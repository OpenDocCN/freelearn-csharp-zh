["```cs\npublic class Service : IService\n{\n    private readonly ILogger _logger;\n    public Service(ILogger<Service> logger)\n    {\n        _logger = logger;\n    }\n    public void Execute()\n    {\n        _logger.LogInformation(\"Service.Execute()\");\n    }\n}\n```", "```cs\npublic interface IService\n{\n    void Execute();\n}\n```", "```cs\nnamespace Logging;\npublic class BaseAbstractions\n{\n    [Fact]\n    public void Should_log_the_Service_Execute_line()\n    {\n        // Arrange\n        var lines = new List<string>();\n        var host = Host.CreateDefaultBuilder()\n            .ConfigureLogging(loggingBuilder =>\n            {\n                loggingBuilder.ClearProviders();\n                loggingBuilder.AddAssertableLogger(lines);\n            })\n            .ConfigureServices(services =>\n            {\n                services.AddSingleton<Service>();\n            })\n            .Build();\n        var service = host.Services.GetRequiredService<Service>(); \n        // Act\n        service.Execute();\n        // Assert\n        Assert.Collection(lines,\n            line => Assert.Equal(\"Service.Execute()\", line)\n        );\n    }\n    // Omitted other members\n}\n```", "```cs\n[Fact]\npublic void Should_log_the_Service_Execute_line_using_WebApplication()\n{\n    // Arrange\n    var lines = new List<string>();\n    var builder = WebApplication.CreateBuilder();\n    builder.Logging.ClearProviders()\n        .AddAssertableLogger(lines);\n    builder.Services.AddSingleton<IService, Service>();\n    var app = builder.Build();\n    var service = app.Services.GetRequiredService<IService>();\n    // Act\n    service.Execute();\n    // Assert\n    Assert.Collection(lines,\n        line => Assert.Equal(\"Service.Execute()\", line)\n    );\n}\n```", "```cs\nnamespace Logging;\npublic class LoggerFactoryExploration\n{\n    private readonly ITestOutputHelper _output;\n    public LoggerFactoryExploration(ITestOutputHelper output)\n    {\n        _output = output ?? throw new ArgumentNullException(nameof(output));\n    }\n    [Fact]\n    public void Create_a_ILoggerFactory()\n    {\n        // Arrange\n        var lines = new List<string>();\n        var host = Host.CreateDefaultBuilder()\n            .ConfigureLogging(loggingBuilder => loggingBuilder\n                .AddAssertableLogger(lines)\n                .AddxUnitTestOutput(_output))\n            .ConfigureServices(services => services.AddSingleton<Service>())\n            .Build()\n        ;\n        var service = host.Services.GetRequiredService<Service>();\n        // Act\n        service.Execute();\n        // Assert\n        Assert.Collection(lines,\n            line => Assert.Equal(\"LogInformation like any ILogger<T>.\", line)\n        );\n    }\n    public class Service\n    {\n        private readonly ILogger _logger;\n        public Service(ILoggerFactory loggerFactory)\n        {\n            ArgumentNullException.ThrowIfNull(loggerFactory);\n            _logger = loggerFactory.CreateLogger(\"My Service\");\n        }\n        public void Execute()\n        {\n            _logger.LogInformation(\"LogInformation like any ILogger<T>.\");\n        }\n    }\n}\n```", "```cs\n_logger.LogTrace(\"Some: {variable}\", variable);\n// Or\n_logger.LogTrace(\"Some: {0}\", variable);\n```", "```cs\n_logger.LogTrace($\"Some: {variable}\");\n```", "```cs\n{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft\": \"Warning\"\n    }\n  }\n}\n```", "```cs\n{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft\": \"Warning\"\n    },\n    \"Console\": {\n      \"LogLevel\": {\n        \"Default\": \"Trace\"\n      }\n    }\n  }\n}\n```", "```cs\npublic class Service\n{\n    private readonly ILogger _logger;\n    public Service(ILogger<Service> logger)\n    {\n        _logger = logger;\n    }\n    public void Execute()\n    {\n        _logger.LogInformation(\"[info] Service.Execute()\");\n        _logger.LogWarning(\"[warning] Service.Execute()\");\n    }\n}\n```", "```cs\n[Fact]\npublic void Should_filter_logs_by_provider()\n{\n    // Arrange\n    var lines = new List<string>();\n    var host = Host.CreateDefaultBuilder()\n        .ConfigureLogging(loggingBuilder =>\n        {\n            loggingBuilder.ClearProviders();\n            loggingBuilder.AddConsole();\n            loggingBuilder.AddAssertableLogger(lines);\n            loggingBuilder.AddxUnitTestOutput(_output);\n            loggingBuilder\n                .AddFilter<XunitTestOutputLoggerProvider>(\n                    level => level >= LogLevel.Warning\n                );\n        })\n        .ConfigureServices(services =>\n        {\n            services.AddSingleton<Service>();\n        })\n        .Build();\n    var service = host.Services.GetRequiredService<Service>();\n    // Act\n    service.Execute();\n    // Assert\n    Assert.Collection(lines,\n        line => Assert.Equal(\"[info] Service.Execute()\", line),\n        line => Assert.Equal(\"[warning] Service.Execute()\", line)\n    );\n}\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Logging.AddJsonConsole();\nvar app = builder.Build();\napp.MapGet(\"/\", (ILoggerFactory loggerFactory) =>\n{\n    const string category = \"root\";\n    var logger = loggerFactory.CreateLogger(category);\n    logger.LogInformation(\"You hit the {category} URL!\", category);\n    return \"Hello World!\";\n});\napp.Run();\n```", "```cs\n{\n  \"EventId\": 0,\n  \"LogLevel\": \"Information\",\n  \"Category\": \"root\",\n  \"Message\": \"You hit the root URL!\",\n  \"State\": {\n    \"Message\": \"You hit the root URL!\",\n    \"category\": \"root\",\n    \"{OriginalFormat}\": \"You hit the {category} URL!\"\n  }\n}\n```", "```cs\ninfo: root[0]\n      You hit the root URL!\n```"]