- en: Displaying Data with Core UI Elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Displaying a "Hello World" UI text message
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying a digital clock
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying a digital countdown timer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a message that fades away
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying a perspective 3D Text Mesh
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating sophisticated text with TextMeshPro
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying an image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating UIs with the Fungus open source dialog system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Fungus character dialog with images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A key element contributing to the entertainment and enjoyment of most games
    is the quality of the visual experience, and an important part of this is the
    **User Interface** (**UI**). UI elements involve ways for the user to interact
    with the game (such as buttons, cursors, and text boxes), as well as ways for
    the game to present up-to-date information to the user (such as the time remaining,
    current health, score, lives left, or location of enemies). This chapter is filled
    with UI recipes to give you a range of examples and ideas for creating game UIs.
  prefs: []
  type: TYPE_NORMAL
- en: The big picture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every game is different, and so this chapter attempts to fulfill two key roles.
    The first aim is to provide step-by-step instructions on how to create a range
    of the Unity 2018 basic UI elements and, where appropriate, associate them with
    game variables in code. The second aim is to provide a rich illustration of how
    UI elements can be used for a variety of purposes so that you can get good ideas
    about how to make the Unity UI set of controls deliver the particular visual experience
    and interactions for the games that you are developing.
  prefs: []
  type: TYPE_NORMAL
- en: The basic UI elements can provide static images and text to just make the screen
    look more interesting. By using scripts, we can change the content of these images
    and text objects, so that the players' numeric scores can be updated, or we can
    show stickmen images to indicate how many lives the player has left. Other UI
    elements are interactive, allowing users to click on buttons, choose options,
    enter text, and so on. More sophisticated kinds of UI can involve collecting and
    calculating data about the game (such as percentage time remaining or enemy hit
    damage; or the positions and types of key GameObjects in the scene, and their
    relationship to the location and orientation of the player), and then displaying
    these values in a natural, graphical way (such as progress bars or radar screens).
  prefs: []
  type: TYPE_NORMAL
- en: 'Core GameObjects, components, and concepts relating to Unity UI development
    include:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Canvas**: Every UI element is a child to a **Canvas**. There can be multiple
    **Canvas** GameObjects in a single scene. If a **Canvas** is not already present,
    then one will automatically be created when a new UI GameObject is created, with
    that UI object as the child to the new **Canvas** GameObject.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**EventSystem**: An **EventSystem** GameObject is required to manage the interaction
    events for UI controls. One will automatically be created with the first UI element.
    Unity generally only allows one **EventSystem** in any Scene (some proposed code
    for multiple event systems can be found at [https://bitbucket.org/Unity-Technologies/ui/pull-requests/18/support-for-multiple-concurrent-event/diff](https://bitbucket.org/Unity-Technologies/ui/pull-requests/18/support-for-multiple-concurrent-event/diff)))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Visual UI** **controls**: The visible UI controls themselves include **Button,
    Image, Text,** and **Toggle******.****'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Rect Transform component**: UI GameObjects can exist in a different space
    from that of the 2D and 3D scenes, which cameras render. Therefore, UI GameObjects
    all have the special **Rect Transform** component, which has some different properties
    to the scene''s GameObject Transform component (with its straightforward X/Y/Z
    position, rotation, and scale properties). Associated with **Rect Transforms**
    are pivot points (reference points for scaling, resizing, and rotations) and anchor
    points.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram shows the four main categories of UI controls, each in
    a **Canvas** GameObject and interacting via an **EventSystem** GameObject. UI
    Controls can have their own Canvas, or several UI controls can be in the same
    **Canvas.** The four categories are: **static** (display-only) and **interactive
    UI** controls, **non-visible** components (such as ones to group a set of mutually
    exclusive radio buttons), and **C# script** classes to manage UI-control behavior
    through logic written in the program code. Note that UI controls that are not
    a child or descendant of a Canvas will not work properly, and interactive UI controls
    will not work properly if the **EventSystem** is missing. Both the **Canvas**
    and **EventSystem** GameObjects are automatically added to the Hierarchy as soon
    as the first UI GameObject is added to a scene:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4d81c94e-7e3e-4490-8aa6-5f39ee7e8660.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Rect Transforms** for UI GameObjects represent a rectangular area rather
    than a single point, which is the case for scene GameObject Transforms. **Rect
    Transforms** describe how a UI element should be positioned and sized relative
    to its parent. Rect Transforms have a width and height that can be changed without
    affecting the local scale of the component. When the scale is changed for the
    **Rect Transform** of a UI element, this will also scale font sizes and borders
    on sliced images, and so on. If all four anchors are at the same point, resizing
    the Canvas will not stretch the Rect Transform. It will only affect its position.
    In this case, we''ll see the Pos X and Pos Y properties, and the Width and Height
    of the rectangle. However, if the anchors are not all at the same point, Canvas
    resizing will result in stretching the element''s rectangle. So instead of the
    Width, we''ll see the values for Left and Right—the position of the horizontal
    sides of the rectangle to the sides of the **Canvas,** where the Width will depend
    on the actual Canvas width (and the same for Top/Bottom/Height).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Unity provides a set of preset values for pivots and anchors, making the most
    common values very quick and easy to assign to an element''s **Rect Transform**.
    The following screenshot shows the 3 x 3 grid that allows you quick choices about
    the left, right, top, bottom, middle, horizontal, and vertical values. Also, the
    extra column on the right offers horizontal stretch presets, and the extra row
    at the bottom offers vertical stretch presets. Using the *Shift*+*Alt *keys sets
    the pivot and anchors when a preset is clicked:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d559845b-f490-409a-aa12-45c260f0f5dc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Unity manual provides a very good introduction to the **Rect Transform**.
    In addition, Ray Wenderlich''s two-part Unity UI web tutorial also presents a
    helpful overview of the Rect Transform, pivots, and anchors. Both parts of Wenderlich''s
    tutorial make great use of animated GIFs to illustrate the effect of different
    values for pivots and anchors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.unity3d.com/Manual/UIBasicLayout.html](http://docs.unity3d.com/Manual/UIBasicLayout.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.raywenderlich.com/78675/unity-new-gui-part-1](http://www.raywenderlich.com/78675/unity-new-gui-part-1)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are three **Canvas** render modes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Screen Space: Overlay**: In this mode, the UI elements are displayed without
    any reference to any camera (there is no need for any **Camera** in the scene).
    The UI elements are presented in front of (overlaying) any sort of camera display
    of the scene contents.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Screen Space**: **Camera**: In this mode, the **Canvas** is treated as a
    flat plane in the frustum (viewing space) of a **Camera** scene – where this plane
    is always facing the camera. So, any scene objects in front of this plane will
    be rendered in front of the UI elements on the **Canvas.** The **Canvas** is automatically
    resized if the screen size, resolution, or camera settings are changed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**World Space**: In this mode, the **Canvas** acts as a flat plane in the frustum
    (viewing space) of a **Camera** scene – but the plane is not made to always face
    the **Camera.** How the **Canvas** appears is just as with any other objects in
    the scene, relative to where (if anywhere) in the camera''s viewing frustum the
    **Canvas** plane is located and oriented.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we have focused on the Screen Space:Overlay mode. But all these
    recipes can be used with the other two modes as well.
  prefs: []
  type: TYPE_NORMAL
- en: Be creative! This chapter aims to act as a launching pad of ideas, techniques,
    and reusable C# scripts for your own projects. Get to know the range of Unity
    UI elements, and try to work smart. Often, a UI element exists with most of the
    components that you may need for something in your game, but you may need to adapt
    it somehow. An example of this can be seen in the recipe that makes a UI Slider
    non-interactive, instead using it to display a red-green progress bar for the
    status of a countdown timer. See this in the *Displaying a countdown timer graphically
    with a UI Slider* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Many of these recipes involve C# script classes that make use of the Unity scene-start
    event sequence of `Awake()` to all game objects, `Start()` to all GameObjects,
    then `Update()` every frame to every GameObject. Therefore, you'll see many recipes
    in this chapter (and the whole book) where we cache references to GameObject components
    in the `Awake()` method, and then make use of these components in `Start()` and
    other methods, once the scene is up and running.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying a "Hello World" UI text message
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first traditional problem to be solved with a new computing technology
    is to display the Hello World message. In this recipe, you''ll learn to create
    a simple UI Text object with this message, in large white text with a selected
    font, in the center of the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a8d1df96-386a-406b-a0ab-a7146417ef98.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we have prepared the font that you need in a folder named `Fonts`
    in the `01_01` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To display a Hello World text message, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Unity 2D project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the provided `Fonts` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Hierarchy panel, add a UI | Text GameObject to the scene—choose menu:
    GameObject | UI | Text. Name this GameObject `Text-hello`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Using the Create menu : Alternatively, use the Create menu immediately below
    the Hierarchy tab, choosing menu: Create | UI | Text.'
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that your new `Text-hello` GameObject is selected in the Hierarchy panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, in the Inspector, ensure the following properties are set:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Text set to read `Hello World`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Font set to `Xolonium-Bold`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Font size as per your requirements (large—this depends on your screen—try `50`
    or `100`)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Alignment set to horizontal and vertical center
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Horizontal` and `Vertical Overflow` set to `Overflow`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Color** set to white'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the **Inspector** panel with these settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9858d847-95e5-4875-97e6-675ac47d9894.png)'
  prefs: []
  type: TYPE_IMG
- en: In the Rect Transform, click on the Anchor Presets square icon, which should
    result in several rows and columns of preset position squares appearing. Hold
    down  *Shift*+*Alt *and click on the center one (middlerow and center column).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The screenshot of the **Rect Transform** in the *Introduction* highlights the
    middle-center preset needed for this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Your Hello World text will now appear, centered nicely in the Game panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have added a new `Text-hello` GameObject to a scene. A parent Canvas and
    **UI EventSystem** will also have been automatically created.
  prefs: []
  type: TYPE_NORMAL
- en: You set the text content and presentation properties and used the Rect Transform
    anchor presets to ensure that whatever way the screen is resized, the text will
    stay horizontally and vertically centered.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here are some more details you don't want to miss.
  prefs: []
  type: TYPE_NORMAL
- en: Styling substrings with Rich Text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Each separate **UI Text** component can have its own color, size, boldness
    styling, and so on. However, if you wish to quickly add some highlighting style
    to part of a string to be displayed to the user, the following are examples of
    some of the HTML-style markups that are available without the need to create separate
    UI Text objects:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Embolden text with the "b" markup: I am `<b>bold</b>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Italicize text with the "i" markup: I am `<i>italic</i>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Set the text color with hex values or a color name: I am `<color=green>green`
    text `</color>`, but I am `<color=#FF0000>red</color>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn more from the Unity online manual's Rich Text page at [http://docs.unity3d.com/Manual/StyledText.html](http://docs.unity3d.com/Manual/StyledText.html).
  prefs: []
  type: TYPE_NORMAL
- en: Displaying a digital clock
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whether it is the real-world time, or an in-game countdown clock, many games
    are enhanced by some form of clock or timer display. The most straightforward
    type of clock to display is a string composed of the integers for hours, minutes,
    and seconds, which is what we'll create in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the kind of clock we will be creating in this
    recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2ece3c61-1197-4299-9e57-82aa47be3795.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we have prepared the font that you need in a folder named `Fonts`
    in the `01_01` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a digital clock, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Unity 2D project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the provided `Fonts` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Hierarchy** panel, add a UI | Text game object to the scene named Text-clock.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Ensure that the `Text-clock` GameObject is selected in the Hierarchy panel.
    Now, in Inspector, ensure that the following properties are set:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Text set to read as time goes here (this placeholder text will be replaced by
    the time when the scene is running)
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: Font type set to `Xolonium Bold`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Font Size set to `20`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Alignment set to horizontal and vertical center
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Horizontal and Vertical Overflow settings set to `Overflow`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Color set to white
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In the **Rect Trans****form**, click on the Anchor Presets square icon, which
    will result in the appearance of several rows and columns of preset position squares.
    Hold down *Shift*+*Alt *and click on the top and center column rows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a folder named `_Scripts` and create a C# script class called `ClockDigital`
    in this new folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Underscore prefix so items appear first in sequence
  prefs: []
  type: TYPE_NORMAL
- en: Since scripts and scenes are things that are most often accessed, prefixing
    their folder names with an underscore character, `_as _Scenes` and `_Scripts`, means
    they are always at the top in the Project panel.
  prefs: []
  type: TYPE_NORMAL
- en: 'Although the preceding code is useful for illustrating how to access the time
    component of a `DateTime` object individually, the `Format(...)` method of the
    `String` class can be used to format a `DateTime` object all in a single statement,
    for example, the preceding could be written more succinctly in a single statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '`String.Format("HH:mm:ss", DateTime.Now)`'
  prefs: []
  type: TYPE_NORMAL
- en: For more examples, see[ http://www.csharp-examples.net/string-format-datetime/](http://www.csharp-examples.net/string-format-datetime/).
  prefs: []
  type: TYPE_NORMAL
- en: Ensure the `Text-clock` GameObject is selected in the Hierarchy panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Inspector panel, add an instance of the `ClockDigital` script class as
    a component by clicking the Add Component button, selecting Scripts, and choosing
    the `Clock Digital` script class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4f1ae827-ed6c-4d5b-a530-d603a3ecc5a0.png)'
  prefs: []
  type: TYPE_IMG
- en: Add script components through drag and drop
  prefs: []
  type: TYPE_NORMAL
- en: Script components can also be added to GameObjects via drag and drop. For example,
    with the `Text-clock` GameObject selected in the Hierarchy panel, drag your `ClockDigital`
    script onto it to add an instance of this script class as a component to the `Text-clock` GameObject.
  prefs: []
  type: TYPE_NORMAL
- en: When you run the scene, you will now see a digital clock that shows hours, minutes,
    and seconds at the top-center part of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You added a Text GameObject to a scene. You added an instance of the `ClockDigital`
    C# script class to that GameObject.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that as well as the standard two C# packages (`UnityEngine` and `System.Collections`)
    that are written by default for every new script, you have added the using statements
    for two more C# script packages, `UnityEngine.UI` and `System`. The **UI package**
    is needed, since our code uses the UI Text object; and the `System` package is
    needed, since it contains the `DateTime` class that we need to access the clock
    on the computer where our game is running.
  prefs: []
  type: TYPE_NORMAL
- en: There is one variable, `textClock`, which will be a reference to the `Text`
    component, whose text content we wish to update in each frame with the current
    time in hours, minutes, and seconds.
  prefs: []
  type: TYPE_NORMAL
- en: The `Awake()` method (executed when the scene begins) sets the `textClock` variable
    to be a reference to the `Text` component in the GameObject, to which our scripted
    object has been added. Storing a reference to a component in this way is referred
    to as caching—it means that code executed later does not need to repeat the computationally-expensive
    task of searching the GameObject hierarchy for a component of a particular type.
  prefs: []
  type: TYPE_NORMAL
- en: Note that an alternative approach would be to make `textClock` a public variable.
    This will allow us to assign it via drag and drop in the Inspector panel.
  prefs: []
  type: TYPE_NORMAL
- en: The `Update()` method is executed in every frame. The current time is stored
    in the time variable, and strings are created by adding leading zeros to the number
    values for the hours, minutes, and seconds properties of variable time.
  prefs: []
  type: TYPE_NORMAL
- en: This method finally updates the text property (that is, the letters and numbers
    that the user sees) to be a string, concatenating the hours, minutes, and seconds
    with colon
  prefs: []
  type: TYPE_NORMAL
- en: separator characters.
  prefs: []
  type: TYPE_NORMAL
- en: The `LeadingZero(...)` method takes as input an integer and returns a string
    of this number with leading zeros added to the left, if the value was less than
    `10`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are some details you don't want to miss.
  prefs: []
  type: TYPE_NORMAL
- en: The Unity tutorial for animating an analog clock
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unity has published a nice tutorial on how to create 3D objects, and animate
    them through a C# script to display an analog clock, at [https://unity3d.com/learn/tutorials/modules/beginner/scripting/simple-clock](https://unity3d.com/learn/tutorials/modules/beginner/scripting/simple-clock).
  prefs: []
  type: TYPE_NORMAL
- en: Displaying a digital countdown timer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This recipe will show you how to display a digital countdown clock, as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0d4de1c2-3df9-4fde-a244-410a751602e7.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe adapts the previous one. So, make a copy of the project for the
    previous recipe, and work on this copy.
  prefs: []
  type: TYPE_NORMAL
- en: For this recipe, we have prepared the script that you need in a folder named
    `_Scripts` in the `01_03` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a digital countdown timer, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Import the provided `_Scripts` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Inspector panel, remove the scripted component, `ClockDigital`, from
    the `Text-clock` GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Inspector panel, add an instance of the `CountdownTimer` script class as
    a component by clicking the `Add Component` button, selecting **Scripts,** and
    choosing the `CountdownTimer` script class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `DigitalCountdown` C# script class that contains the following code,
    and add an instance as a scripted component to the `Text-clock` GameObject:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: When you run the **Scene,** you will now see a digital clock counting down from
    30\. When the countdown reaches zero, the message countdown has finished will
    be displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Automatically add components with** `[RequireComponent(...)]`'
  prefs: []
  type: TYPE_NORMAL
- en: The `DigitalCountdown` script class requires the same GameObject to also have
    an instance of the `CountdownTimer` script class. Rather than having to manually
    attach an instance of a require script, you can use the `[RequireComponent(...)]` C#
    attribute immediately before the class declaration statement. This will result
    in Unity automatically attaching an instance of the required script class.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, by writing the following, Unity will add an instance of `CountdownTimer`
    as soon as an instance of the `DigitalCountdown` script class has been added as
    a component of a GameObject:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Learn more from the Unity documentation at [https://docs.unity3d.com/ScriptReference/RequireComponent.html](https://docs.unity3d.com/ScriptReference/RequireComponent.html).
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have added instances of the `DigitalCountdown` and `CountdownTimer` C# script
    classes to your scene's UI Text GameObject.
  prefs: []
  type: TYPE_NORMAL
- en: The `Awake()` method caches references to the Text and `CountdownTimer` components
    in the `countdownTimer` and `textClock` variables. The `textClock` variable will
    be a reference to the **UI Text** component, whose text content we wish to update
    in each frame with a time-remaining message (or a timer-complete message).
  prefs: []
  type: TYPE_NORMAL
- en: The `Start()` method calls the countdown timer object's `CountdownTimerReset(...)`
    method, passing an initial value of 30 seconds.
  prefs: []
  type: TYPE_NORMAL
- en: The `Update()` method is executed in every frame. This method retrieves the
    countdown timer seconds remaining and stores this value as an integer (whole number)
    in the `timeRemaining` variable. This value is passed as a parameter to the `TimerMessage()`  method,
    and the resulting message is stored in the string (text) variable message. This
    method finally updates the text property (that is, the letters and numbers that
    the user sees) of the `textClock` UI Text GameObject to equal to the string message
    about the remaining seconds.
  prefs: []
  type: TYPE_NORMAL
- en: The `TimerMessage()` method takes an integer as input, and if the value is zero
    or less, a message stating the timer has finished is returned. Otherwise (if greater
    than zero seconds remain) a message stating the number of remaining seconds is
    returned.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a message that fades away
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, we want a message to display just for a certain time, and then fade
    away and disappear.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe adapts the previous one. So, make a copy of the project for the
    that recipe, and work on this copy.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To display a text message that fades away, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the **Inspector** panel, remove the scripted component, `DigitalCountdown`,
    from the `Text-clock` GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a C# script class, `FadeAway`, that contains the following code, and
    add an instance as a scripted component to the `Text-hello` GameObject:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: When you run the **Scene,** you will now see that the message on the screen
    slowly fades away, disappearing after five seconds.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You added an instance of the `FadeAway` scripted class to the `Text-hello` GameObject.
    Due to the `RequireComponent(...)` attribute, an instance of the `CountdownTimer` script
    class was also **automatically** added.
  prefs: []
  type: TYPE_NORMAL
- en: The `Awake()` method caches references to the `Text` and `CountdownTimer` components
    in the `countdownTimer` and `textUI` variables.
  prefs: []
  type: TYPE_NORMAL
- en: The `Start()` method reset the countdown timer to start counting down from five
    seconds.
  prefs: []
  type: TYPE_NORMAL
- en: The `Update()` method (executed every frame) retrieves the proportion of time
    remaining in our timer by calling the `GetProportionTimeRemaining()` method. This
    method returns a value between `0.0` and `1.0`, which also happens to be the range
    of values for the alpha (transparency) property of the color property of a UI
    Text game object.
  prefs: []
  type: TYPE_NORMAL
- en: '**Flexible range of `0.0`**–**`1.0`**'
  prefs: []
  type: TYPE_NORMAL
- en: It is often a good idea to represent proportions as values between 0.0 and 1.0\.
    Either this will be just the value we want for something, or we can multiply the
    maximum value by our decimal proportion, and we get the appropriate value. For
    example, if we wanted the number of degrees of a circle for a given `0.0`–`0.1`
    proportion, we just multiply by the maximum of 360, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: The `Update()` method then retrieves the current color of the text being displayed
    (via `textUI.color`), updates its alpha property, and resets the text object to
    have this updated color value. The result is that each frame in the text object's
    transparency represents the current value of the proportion of the timer remaining
    until it fades to fully transparent when the timer gets to zero.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying a perspective 3D Text Mesh
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unity provides an alternative way to display text in 3D via the Text Mesh component.
    While this is really suitable for a text-in-the-scene kind of situation (such
    as billboards, road signs, and generally wording on the side of 3D objects that
    might be seen close up), it is quick to create and is another way of creating
    interesting menus or instruction scenes.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, you''ll learn how to create a scrolling 3D text, simulating
    the famous opening credits of the movie Star Wars, which looks something like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7deed535-6c0f-47e9-88d0-03d9adb41118.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we have prepared the fonts that you need in a folder named
    `Fonts,` and the text file that you need in a folder named `Text`, in the `01_07`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To display perspective 3D text, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Unity 3D project (this ensures that we start off with a **Perspective**
    camera, suitable for the 3D effect we want to create).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you need to mix 2D and 3D scenes in your project, you can always manually
    set any camera's **Camera Projection** property to **Perspective** or **Orthographic**
    via the **Inspector** panel.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Hierarchy panel, select the Main Camera item, and, in the Inspector
    panel, set its properties as follows: Camera Clear Flags to solid color, Field
    of View to `150`, and Background color to black.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the provided `Fonts` and `Text` folders.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Hierarchy panel, add a UI | Text game object to the scene—choose menu:
    GameObject | UI | Text. Name this GameObject as Text-star-wars.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set UI Text Text-star-wars Text Content to Star Wars (with each word on a new
    line). Then, set its Font to `Xolonium Bold`, its Font Size to `50`, and its **Color**
    to White. Use the anchor presets in Rect Transform to position this UI Text object
    at the top-center of the screen. Set Vertical Overflow to `Overflow`. Set Alignment
    Horizontal to center (leaving Alignment Vertical as top).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Hierarchy panel, add a 3D Text game object to the scene – choose menu:
    GameObject | 3D Object | 3D Text. Name this GameObject Text-crawler.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Inspector panel, set the Transform properties for the Text-crawler GameObject
    as follows: Position (`100, -250, 0`), Rotation (`15, 0, 0`).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Inspector panel, set the **Text Mesh** properties for the `Text-crawler`
    GameObject as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Paste the content of the provided text file, `star_wars.txt`, into Text.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Set Offset Z = `-20`, Line Spacing = `1`, and Anchor = `Middle center`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Set Font Size = `200`, Font = `SourceSansPro-BoldIt`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: When the **Scene** is made to run, the Star Wars story text will now appear
    nicely squashed in 3D perspective on the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have simulated the opening screen of Star Wars, with a flat UI Text object
    title at the top of the screen, and 3D Text Mesh with settings that appear to
    be disappearing into the horizon with 3D perspective "squashing."
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are some details you don't want to miss.
  prefs: []
  type: TYPE_NORMAL
- en: We have to make this text crawl like it does in the movie
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With a few lines of code, we can make this text scroll in the horizon just
    as it does in the movie. Add the following C# script class, `ScrollZ,` as a component
    to the `Text-crawler` GameObject:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In each frame via the `Update()` method, the position of the 3D text object
    is moved in the direction of this GameObject's local up-direction.
  prefs: []
  type: TYPE_NORMAL
- en: Where to learn more
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Learn more about 3D Text and Text Meshes in the Unity online manual at [http://docs.unity3d.com/Manual/class-TextMesh.html](http://docs.unity3d.com/Manual/class-TextMesh.html).
  prefs: []
  type: TYPE_NORMAL
- en: An alternative way of achieving perspective text like this would be to use a
    Canvas with the World Space render mode.
  prefs: []
  type: TYPE_NORMAL
- en: Creating sophisticated text with TextMeshPro
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In 2017, Unity purchased the **TextMeshPro Asset Store** product, with a view
    to integrate it into Unity as a free core feature. **TextMeshPro** uses a **Signed
    Distance Field** (**SDF**) rendering method, resulting in clear and sharply-drawn
    characters at any point size and resolution. Therefore, you will need SDF fonts
    to work with this resource.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the time of writing, **TextMeshpro** is a free **Asset Store** download and
    **Unity Essentials Beta**, so the first step is still to import it via the asset
    store. By the time you read this, you'll probably find **TextMeshPro** as a standard
    GameObject type that you can create in the Scene panel, with no downloading required.
    So, if required, open the Asset Store panel, search for **TextMeshPro,** and import
    this free asset package.
  prefs: []
  type: TYPE_NORMAL
- en: For this recipe, we have prepared the fonts that you need in a folder named
    Fonts & Materials in the `01_08` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To display a text message with sophisticated **TextMeshPro** visual styling,
    follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Unity 3D project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a new UI TextMeshPro **Text** GameObject in the scene – choose menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: GameObject | UI | TextMeshPro **– text**. Name this GameObject Text-sophisticated.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**TextMeshPro** GameObjects do not have to be part of the UI Canvas. You can
    add a **TextMeshPro** GameObject to the Scene directly by choosing the Scene panel
    menu **Create** | **3D Object** | **TextMeshPro – text**.'
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that your new **Text-sophisticated** GameObject is selected in the Hierarchy
    panel. In the Inspector for the Rect Transform, click on the Anchor Presets square
    icon, hold down *Shift* + *Alt*, and click on the top and stretch rows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Ensure the following properties are set:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Font Settings:**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Font Asset set to `Anton SDF`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Material Preset set to `Anton SDF - Outline`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Font size `200`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Alignment set to horizontal center
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Face:**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Color set to `white`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Dilate set to `0`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Outline:**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Color set to `Red`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Thickness set to `0.1`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Underlay (shadow):**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Offset X set to `1`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Offset Y set to `-1`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Dilate set to `1`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the **Inspector** panel with these settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d5109162-7213-412d-acd9-38ce3ff1a38b.png)'
  prefs: []
  type: TYPE_IMG
- en: The **Text-sophisticated** GameObject will now appear as very large, with a
    white inner, red outline, and a drop shadow to the lower right.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have added a new **UI TextMeshPro Text** GameObject to a scene. You chose
    one of the SDF fonts, and an outline material preset. You then adjusted settings
    for the face (inner part of each character), outline, and drop shadow (Underlay).
  prefs: []
  type: TYPE_NORMAL
- en: There are hundreds of settings for a **TextMeshPro** component, and therefore
    much experimentation may be required to achieve a particular effect.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here are some more details you don't want to miss.
  prefs: []
  type: TYPE_NORMAL
- en: Rich Text substrings for colors, effects, and sprites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**TextMeshPro** offers over 30 HTML-style markups to substrings. The following
    code illustrates some, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: One powerful markup is the `<page>` tag, this allows a single set of text to
    be made interactive and presented to the user as a sequence of pages.
  prefs: []
  type: TYPE_NORMAL
- en: Learn more from the online manual Rich Text page at [http://digitalnativestudios.com/textmeshpro/docs/rich-text/](http://digitalnativestudios.com/textmeshpro/docs/rich-text/).
  prefs: []
  type: TYPE_NORMAL
- en: Displaying an image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many cases where we wish to display an image onscreen, including logos,
    maps, icons, and splash graphics. In this recipe, we will display an image centered
    at the top of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows Unity displaying an image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/724fabd6-99c5-493c-b156-1666187f7c89.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we have prepared the image that you need in a folder named
    `Images` in the `01_07` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To display an image, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Unity 2D project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set the Game panel to a 400 x 300 size. Do this by first displaying the **Game**
    panel, and then creating a new **Resolution** in the drop-down menu at the top
    of the panel. Click the plus symbol at the bottom of this menu, setting **Label**
    = **Chapter 2**, **Width** = **400**, and **Height** = **300.** Click **OK** and
    the **Game** panel should be set to this new resolution:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dcb90848-9116-442a-9e6a-5f90667af272.png)'
  prefs: []
  type: TYPE_IMG
- en: Alternatively, you can set the default **Game** panel resolution through menu
    **Edit** | **Project Settings** | **Player** and then the Resolution and Presentation
    width and height in the Inspector (having turned off the Full Screen option).
  prefs: []
  type: TYPE_NORMAL
- en: Import the provided `Images` folder. In the **Inspector** tab, ensure that the
    `unity_logo` image has the **Texture Type** set to **Default**. If it has some
    other type, then choose **Default** from the drop-down list, and click on the
    Apply button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Hierarchy** panel, add a UI | RawImage GameObject named `RawImage-logo` to
    the scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Ensure that the `RawImage-logo` GameObject is selected in the **Hierarchy**
    panel. In the **Inspector** for the **RawImage (Script)** component, click the
    file viewer circle icon at the right side of the **Texture** property, and select
    **image unity_logo**, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/36d8b75b-f8d6-4edb-96bd-51bd87260d48.png)'
  prefs: []
  type: TYPE_IMG
- en: An alternative way of assigning this Texture is to drag the unity_logo image from
    your **Project** folder (Images) into the **Raw Image (Script)** public property **Texture.**
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Set Native Size** button to resize the image so it is no longer
    stretched and distorted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Rect Transform,** click on the **Anchor Presets** square icon, which will
    result in several rows and columns of preset position squares appearing. Hold
    down *Shift* + *Alt* and click on the top row and the center column.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The image will now be positioned neatly at the top of the **Game** panel, and
    will be horizontally centered.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have ensured that an image has the **Texture Type** set to **Default.**
    You added a **UI RawImage** control to the scene. The **RawImage** control has
    been made to display the `unity_logo` image file.
  prefs: []
  type: TYPE_NORMAL
- en: The image has been positioned at the top-center of the **Game** panel.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are some details you don''t want to miss:'
  prefs: []
  type: TYPE_NORMAL
- en: Working with 2D Sprites and UI Image components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you simply wish to display non-animated images, then Texture images and **UI
    RawImage** controls are the way to go. However, if you want more options on how
    an image should be displayed (such as tiling, and animation), the UI Image control
    should be used instead. This control needs image files to be imported as the Sprite
    (2D and UI) type.
  prefs: []
  type: TYPE_NORMAL
- en: Once an image file has been dragged into the UI Image control's **Sprite** property,
    additional properties will be available, such as **Image Type**, and options to
    preserve the aspect ratio.
  prefs: []
  type: TYPE_NORMAL
- en: If you wish to prevent the distortion and stretching of a UI Sprite GameObject,
    then in the Inspector panel, check the **Preserve Aspect** option, in its **Image
    (Script)** component.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An example of tiling a Sprite image can be found in the *Revealing icons for
    multiple object pickups by changing the size of a tiled image* recipe in [Chapter
    3](c6ad221f-b476-4471-8259-9ad448749a32.xhtml), *Inventory UIs*.
  prefs: []
  type: TYPE_NORMAL
- en: Creating UIs with the Fungus open source dialog system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Rather than constructing your own UI and interactions from scratch each time,
    there are plenty of UI and dialogue systems available for Unity. One powerful,
    free, and open source dialog system is called Fungus, which uses a visual flowcharting
    approach to dialog design.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, we''ll create a very simple, one-sentence dialogue, to illustrate
    the basics of Fungus. The following screenshot shows the Fungus-generated dialog
    for the sentence **How are you today?**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f72f0e8f-6278-460c-ae85-0aa4c1af8ae5.png)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a one-sentence dialog using **Fungus**, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Unity 2D project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the **Asset Store** panel, search for **Fungus,** and Import this free
    asset package (search for Fungus and free).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new **Fungus** Flowchart GameObject by choosing menu: **Tools** |
    **Fungus** | **Create** | **Flowchart.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Display and dock the Fungus Flowchart window panel by choosing menu: **Tools**
    | **Fungus** | **Flowchart Window.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'There will be one block in the **Flowchart Window**. Click on this block to
    select it (a green border appears around the block to indicate that it is selected).
    In the **Inspector** panel, change the **Block Name** of this block to Start:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cbaa1b6c-bf56-45bd-914c-5690af28518e.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Each Block** in a **Flowchart** follows a sequence of commands. So in the
    **Inspector,** we are now going to create a sequence of (Say) commands to display
    two sentences to the user when the game runs.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that the **Start** block is still selected in the **Flowchart** panel.
    Click on the plus (**+**) button at the bottom section of the **Inspector** panel
    to display the menu of **Commands,** and select the **Narrative** | Say **command:**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/399c705e-0666-47fa-9b50-99d5cfbe396b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Since we only have one command for this block, that command will automatically
    be selected (highlighted green) in the top part of the **Inspector.** The bottom
    half of the Inspector presents the properties for the currently-selected **Command,**
    as shown in the following screenshot. In the bottom half of the Inspector, for
    the **Story Text** property, enter the text of the question that you wish to be
    presented to the user, which is **How are you today?**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/de5d0fac-6aaf-4bf3-ad4a-73364da2f1ab.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create another **Say Command**, and type the following for its **Story Text
    property**: **Very well thank you**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you run the game, the user will first be presented with the **How are
    you today?** text (hearing a clicking noise as each letter is typed on screen).
    After the user clicks on the **continue** triangle button (at the bottom-right
    part of the dialog window), they will be presented with the second sentence: **Very
    well thank you**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have created a new Unity project, and imported the **Fungus** asset package,
    which contains the **Fungus Unity** menus, windows, and commands, and also the
    example projects.
  prefs: []
  type: TYPE_NORMAL
- en: You have added a **Fungus Flowchart** to your scene with a single **Block**
    that you have named **Start.** Your block starts to execute when the game begins
    (since the default for the first block is to be executed upon receiving the Game
    Started event).
  prefs: []
  type: TYPE_NORMAL
- en: In the **Start** block, you added a sequence of two **Say Commands**. Each command
    presents a sentence to the user, and then waits for the continue button to be
    clicked before proceeding to the next **Command.**
  prefs: []
  type: TYPE_NORMAL
- en: 'As can be seen, the **Fungus** system handles the work of creating a nicely-presented
    panel to the user, displaying the desired text and continue button. **Fungus**
    offers many more features, including menus, animations, and control of sounds
    and music, the details of which can be found in the next recipe, and by exploring
    their provided example projects, and their websites:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://fungusgames.com/](http://fungusgames.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/FungusGames/Fungus](https://github.com/FungusGames/Fungus)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Fungus character dialog with images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **Fungus** dialog system introduced in the previous recipe supports multiple
    characters, whose dialogs can be highlighted through their names, colors, sound
    effects, and even portrait images. In this recipe, we''ll create a two-character
    dialog between Sherlock Holmes and Watson to illustrate the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d9b77b0f-a641-4f4a-a20e-4f9a63ab968b.png)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a character dialog with portrait images using Fungus, follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Unity 2D project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the **Asset Store** panel, and **Import** the **Fungus** dialogue asset
    package (this includes the **Fungus** Examples, whose images we’ll use for the
    two characters).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new **Fungus Flowchart** GameObject by choosing menu: **Tools** |
    **Fungus** | **Create** | **Flowchart.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Display and dock the **Fungus Flowchart** window panel by choosing menu: **Tools**
    | **Fungus** | **Flowchart Window.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the name of the only **Block** in the **Flowchart** to The case of the
    missing violin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new Character by choosing menu: **Tools** | **Fungus** | **Create**
    | **Character.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should now see a new **Character** GameObject in the **Hierarchy****.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With GameObject **Character** 1 – Sherlock selected in the **Project** panel,
    edit its properties in the Inspector:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename this GameObject **Character** 1 – **Sherlock.**
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In its **Character(Script)** component, set the **Name Text** to **Sherlock**
    and the **Name Color** to green.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In the **Inspector,** click the **Add Portrait** button (the plus sign "**+**"),
    to get a "slot" into which to add a portrait image.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Drag the appropriate image into your new portrait image slot (in this screenshot,
    we used the "confident" image from the Sherlock example project: **Fungus Examples**
    | **Sherlock** | **Portraits** | **Sherlock):**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/df6f6ee2-6ec6-43d7-912c-9615e7586bbb.png)'
  prefs: []
  type: TYPE_IMG
- en: Repeat steps 6-8 above to create a second character, John, using **Name Color**
    = blue, and **Portrait Image** = annoyed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select your **Block** in the **Fungus Flowchart,** so you can add some **Commands**
    to be executed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a **Say** command, for **Character 1 - Sherlock**, saying Watson, have
    you seen my violin? and choose the **confident** portrait (since this is the only
    one we added to the character):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5ac06adc-4300-464b-aaf5-d2b0b97b43b3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Add a second **Say** command, this time for **Character 2 – John**, saying
    No, why don''t you find it yourself using your amazing powers of deduction.. and
    choose the **annoyed** portrait:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/39ecda34-c9c7-4b93-acb5-2eddb5501710.png)'
  prefs: []
  type: TYPE_IMG
- en: Run the scene you should see a sequence of statements, clearly showing who is
    saying both with (colored) name text **AND** the portrait image you selected for
    each Say command (after Sherlock’s text has finished appearing, click the box
    to start John’s sentence).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have created a new Unity project with the **Fungus** asset package.
  prefs: []
  type: TYPE_NORMAL
- en: You have added a **Fungus Flowchart** to your scene, and also added two characters
    (each with a text color and a portrait image).
  prefs: []
  type: TYPE_NORMAL
- en: For the **Block** in the **Flowchart,** you added to **Say** commands, stating
    which character was saying each sentence, and which portrait to use (if you had
    added more portrait images, you could select different images to indicate the
    emotion of the character speaking).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are some details you don't want to miss.
  prefs: []
  type: TYPE_NORMAL
- en: Data-driven conversations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Fungus offers a data-driven approach to conversations. The character and portrait
    (and facing direction, and movement onto-off the stage, and so on) can be defined
    through text in a simple format, using the Say command’s **Narrative** | **Conversation**
    option. This recipe’s conversation with portrait images can be declared with just
    two lines of text in a **Conversation:**
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Learn more about the Fungus conversation system on their documentation pages:
    [http://fungusdocs.snozbot.com/conversation_system.html](http://fungusdocs.snozbot.com/conversation_system.html).'
  prefs: []
  type: TYPE_NORMAL
