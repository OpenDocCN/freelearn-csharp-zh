- en: '18'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '18'
- en: Visiting .NET MAUI
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问 .NET MAUI
- en: So far, we have talked about Blazor WebAssembly and Blazor Server, but what
    about the third option?
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经讨论了 Blazor WebAssembly 和 Blazor 服务器，但第三个选项是什么？
- en: In this chapter, we will visit **.NET MAUI**, Microsoft’s new cross-platform
    development platform.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将访问 **.NET MAUI**，微软的新跨平台开发平台。
- en: This chapter will not be a deep dive into .NET MAUI, since that can be a book
    all in itself.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章不会深入探讨 .NET MAUI，因为那可以是一本完整的书。
- en: 'In this chapter, we will cover the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: What is .NET MAUI?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是 .NET MAUI？
- en: Creating a new project
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建新项目
- en: Looking at the template
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看模板
- en: Developing for Android
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 Android 开发
- en: Developing for iOS
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 iOS 开发
- en: Developing for macOS
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 macOS 开发
- en: Developing for Windows
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 Windows 开发
- en: Developing for Tizen
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 Tizen 开发
- en: The idea for this chapter is for you to use it as a reference so that you will
    be able to implement a new project on your own.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目的是让你将其作为参考，以便你能够独立实现一个新项目。
- en: Technical requirements
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter is a reference chapter and is not connected in any way with the
    book’s other chapters.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是参考章节，并且与本书的其他章节没有任何关联。
- en: You can find the source code for this chapter at [https://github.com/PacktPublishing/Web-Development-with-Blazor-Third-Edition/tree/main/Chapter18](https://github.com/PacktPublishing/Web-Development-with-Blazor-Third-Edition/tree/main/Chapter18).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://github.com/PacktPublishing/Web-Development-with-Blazor-Third-Edition/tree/main/Chapter18](https://github.com/PacktPublishing/Web-Development-with-Blazor-Third-Edition/tree/main/Chapter18)找到本章的源代码。
- en: What is .NET MAUI?
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 .NET MAUI？
- en: We’ll start with a bit of history.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从一点历史开始。
- en: Xamarin is a software company founded in May 2011 by the engineers who created
    Mono, a free and open-source version of .NET Framework. Microsoft acquired the
    company in 2016, and it is now a vital part of the .NET development platform,
    providing tools and services for building native cross-platform mobile apps using
    C# and .NET. Xamarin’s technology allows developers to write native iOS, Android,
    and Windows apps using a single shared code base, making it easier to develop
    and maintain apps for multiple platforms.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin 是一家成立于 2011 年 5 月的软件公司，由创建 Mono 的工程师创立，Mono 是 .NET Framework 的免费和开源版本。微软于
    2016 年收购了该公司，现在它是 .NET 开发平台的重要组成部分，为使用 C# 和 .NET 构建原生跨平台移动应用提供工具和服务。Xamarin 的技术允许开发者使用单个共享代码库编写原生
    iOS、Android 和 Windows 应用程序，这使得为多个平台开发和维护应用程序变得更加容易。
- en: '**.NET Multi-Platform App UI** (**MAUI**) is the new framework from Microsoft,
    and is an evolution of Xamarin.Forms.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**.NET 多平台应用程序用户界面**（**MAUI**）是微软的新框架，它是 Xamarin.Forms 的进化。'
- en: This is a way to create one UI, deploy it to many different platforms, and get
    native controls on each platform. .NET MAUI can also host Blazor, which is called
    Blazor Hybrid. This way, we can render Blazor content inside of a .NET MAUI app,
    using the same controls and code that we build for the web. The controls that
    are rendered using Blazor Hybrid are web controls, so we will not get the native
    controls. We can, however, mix native and Blazor Hybrid content.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种创建一个 UI，部署到许多不同的平台，并在每个平台上获得原生控件的方法。.NET MAUI 还可以托管 Blazor，这被称为 Blazor 混合。这样，我们可以在
    .NET MAUI 应用程序内部渲染 Blazor 内容，使用与为网络构建相同的控件和代码。使用 Blazor 混合渲染的控件是网络控件，因此我们不会获得原生控件。然而，我们可以混合原生和
    Blazor 混合内容。
- en: Many years ago, I sat in a meeting with a bunch of consultants. The company
    I was working for wanted to invest in an app, and we turned to one of the big
    consultancy firms in Sweden to get some help on how we should proceed.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 多年前，我参加了一个与一群顾问的会议。我工作的公司想要投资一个应用程序，我们转向瑞典的一家大型咨询公司，以获得关于我们如何进行的帮助。
- en: After a week, we had another meeting, during which they presented their findings.
    Their recommendation was to build natively and not use any of the cross-platform
    frameworks.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一周后，我们再次开会，他们展示了他们的发现。他们的建议是原生开发，不使用任何跨平台框架。
- en: 'They had a bunch of arguments, but two that really stuck with me are as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 他们进行了一系列的争论，但有两点给我留下了深刻的印象，如下：
- en: Native apps look better and give the user a “real” device experience.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原生应用看起来更好，并给用户带来“真实”的设备体验。
- en: Shared code (between platforms) means that if one platform has a bug, the same
    bug is now in all platforms.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 共享代码（跨平台）意味着如果一个平台有错误，同样的错误现在在所有平台上都有。
- en: Since .NET MAUI (formerly Xamarin.Forms) uses native controls, there is no way
    for the users to know the difference between developing a native app and developing
    using .NET MAUI. In the end, it will look and feel like a native app. This is
    not true for Blazor Hybrid, which uses web controls. So, there are some valid
    arguments for the first point. Now, we must ask ourselves, how important is that
    native look and feel? Looking at the apps on my iPhone, not many apps look the
    same, so I would argue it is not that important as long as you uphold a good UX.
    The second argument made me so angry. Were they trying to convince us that sharing
    code was terrible? Yes, they were. Sharing code between platforms is fantastic;
    you only need to write the code once, fix a bug once, and fix it on all platforms.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 .NET MAUI（以前称为 Xamarin.Forms）使用原生控件，用户无法知道在开发原生应用程序和使用 .NET MAUI 开发之间的区别。最终，它将看起来和感觉像原生应用程序。对于
    Blazor 混合来说并非如此，它使用 Web 控件。因此，对于第一个论点有一些合理的论据。现在，我们必须问自己，原生外观和感觉有多重要？看看我 iPhone
    上的应用程序，没有多少应用程序看起来相同，所以我争辩说，只要您坚持良好的 UX，这并不那么重要。第二个论点让我非常生气。他们是不是试图说服我们共享代码很糟糕？是的，他们是。在平台之间共享代码非常棒；您只需编写一次代码，修复一次错误，并在所有平台上修复它。
- en: .NET MAUI gives us both options. We can use native UI with C# code or use Blazor
    Hybrid to get web controls.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: .NET MAUI 给我们提供了两种选择。我们可以使用原生 UI 和 C# 代码，或者使用 Blazor 混合来获取 Web 控件。
- en: Creating a new project
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新项目
- en: To develop cross-platform applications, we must install cross-platform tools
    in Visual Studio.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要开发跨平台应用程序，我们必须在 Visual Studio 中安装跨平台工具。
- en: If you haven’t done that, please open the Visual Studio installer and select
    the **.NET Multi-Platform App UI** development workflow.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有这样做，请打开 Visual Studio 安装程序并选择 **.NET 多平台应用程序 UI** 开发工作流程。
- en: '.NET MAUI has a couple of templates: **.NET MAUI App**, **.NET MAUI Blazor
    Hybrid App**, and **.NET MAUI class library**.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: .NET MAUI 有几个模板：**.NET MAUI 应用程序**、**.NET MAUI Blazor 混合应用程序**和**.NET MAUI 类库**。
- en: .NET MAUI App
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .NET MAUI 应用程序
- en: The .NET MAUI App template uses XAML to create applications.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: .NET MAUI 应用程序模板使用 XAML 创建应用程序。
- en: XAML is also used for **Windows Presentation Foundation** (**WPF**) and **Universal
    Windows Platform** (**UWP**). Every XAML version differs just a bit but if you
    have worked with WPF or UWP before, they should feel familiar.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: XAML 也用于 **Windows 表现基金会**（**WPF**）和**通用 Windows 平台**（**UWP**）。每个 XAML 版本都有细微的差别，但如果您之前使用过
    WPF 或 UWP，它们应该感觉熟悉。
- en: The XAML is converted into native elements. This way, if our app runs on Windows,
    it will have the look and feel of a Windows application. If we run it on an iOS
    device, it will look and feel like a native iOS app.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: XAML 被转换为原生元素。这样，如果我们的应用程序在 Windows 上运行，它将具有 Windows 应用程序的外观和感觉。如果我们运行在 iOS
    设备上，它将看起来和感觉像原生 iOS 应用程序。
- en: This is probably our best option if we want to use our C# skills to create a
    cross-platform application. Using this approach, we will get the native feel without
    the need to write native code in Kotlin or Swift.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想使用我们的 C# 技能创建跨平台应用程序，这可能是我们最好的选择。使用这种方法，我们将获得原生感觉，而无需在 Kotlin 或 Swift 中编写原生代码。
- en: .NET MAUI Class Library
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .NET MAUI 类库
- en: .NET MAUI Class Library is used to share content, classes, and functionality
    between applications.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: .NET MAUI 类库用于在应用程序之间共享内容、类和功能。
- en: .NET MAUI Blazor Hybrid App
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .NET MAUI Blazor 混合应用程序
- en: Since this is a book about Blazor, we will focus on the .NET MAUI Blazor Hybrid
    `App` template. This is a template that embeds a Blazor application inside of
    a native shell.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一本关于 Blazor 的书，我们将重点关注 .NET MAUI Blazor 混合 `App` 模板。这是一个将 Blazor 应用程序嵌入到原生壳中的模板。
- en: 'For the .NET MAUI Blazor App project, we need at least:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 .NET MAUI Blazor 应用程序项目，我们至少需要：
- en: Android 7.0 (API 24) or higher
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android 7.0 (API 24) 或更高版本
- en: iOS 14 or higher
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: iOS 14 或更高版本
- en: macOS 11 or higher, using Mac Catalyst
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: macOS 11 或更高版本，使用 Mac Catalyst
- en: The .NET MAUI Blazor Hybrid App project uses BlazorWebView to render the Blazor
    content. It is not the same as Blazor Server and does not run WebAssembly; it
    is simply the third option we have for hosting Blazor applications.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: .NET MAUI Blazor 混合应用程序项目使用 BlazorWebView 来渲染 Blazor 内容。它与 Blazor 服务器不同，不运行
    WebAssembly；它只是我们托管 Blazor 应用程序的第三个选项。
- en: 'Let’s start a new project and dig a bit deeper:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始一个新的项目并深入了解：
- en: In Visual Studio, create a new .`NET MAUI Blazor Hybrid App` project.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中，创建一个新的 `.NET MAUI Blazor 混合应用程序` 项目。
- en: Name the project `BlazorHybridApp` and make sure you select **.NET 8**.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将项目命名为 `BlazorHybridApp` 并确保您选择了 **.NET 8**。
- en: At the top of Visual Studio, select **Windows Machine** and run the project.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Visual Studio 顶部，选择 **Windows 机器** 并运行项目。
- en: That’s it. We now have our first cross-platform Blazor Hybrid app!
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 就这些。我们现在有了我们的第一个跨平台Blazor混合应用！
- en: '![A screenshot of a computer  Description automatically generated](img/B21849_18_01.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![计算机的截图  自动生成的描述](img/B21849_18_01.png)'
- en: 'Figure 18.1: .NET MAUI app running on Windows'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.1：在Windows上运行的.NET MAUI应用
- en: We might need to enable developer mode on our machine. If there is a message
    asking us to, just follow the instructions and run the app again. Great! We now
    have a project. In the next section, we will take a look at what the template
    looks like.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能需要在我们的机器上启用开发者模式。如果有提示我们这样做，只需按照说明重新运行应用程序。太好了！我们现在有一个项目了。在下一节中，我们将查看模板的样子。
- en: Looking at the template
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看模板
- en: When running the project, we should recognize the UI. It is the same *Hello,
    world!* page, the same counter, and the same weather forecast.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行项目时，我们应该能够识别UI。它就是相同的*Hello, world!*页面，相同的计数器，以及相同的天气预报。
- en: 'If we take a look in the `Components/Pages` folder, we’ll find the Razor components,
    and if we open the `Counter.razor` file, we will find a familiar component that
    looks like this:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看`Components/Pages`文件夹，我们会找到Razor组件，如果我们打开`Counter.razor`文件，我们会找到一个看起来像这样的熟悉组件：
- en: '[PRE0]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: To create a Blazor Hybrid app, adding components like this is all that you need
    to know to get started, but let’s dig a bit deeper. The template is .NET MAUI
    App with some added Blazor startup code.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建Blazor混合应用，添加这样的组件就足够开始了解了，但让我们更深入地了解一下。模板是带有一些添加的Blazor启动代码的.NET MAUI应用。
- en: To understand what is happening, we will start in the `Platforms` folder. In
    the `Platforms` folder, we will find different a folder for each platform we can
    develop for Android, iOS, Mac Catalyst, Tizen, and Windows.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解正在发生的事情，我们将从`Platforms`文件夹开始。在`Platforms`文件夹中，我们将为每个我们可以为Android、iOS、Mac
    Catalyst、Tizen和Windows开发的平台找到不同的文件夹。
- en: This is the starting point for each platform, and they have a bit of a different
    implementation, but in the end, they all point to the `MauiProgram` file located
    at the project’s root.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这是每个平台的开端，它们有一些不同的实现，但最终，它们都指向位于项目根目录的`MauiProgram`文件。
- en: 'The `MauiProgram` class sets everything up, like fonts and dependency injection:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`MauiProgram`类设置了所有内容，比如字体和依赖注入：'
- en: '[PRE1]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The essential thing in the file is `UseMauiApp<App>`, which gives us a clue
    about what is happening next. The next step is to load the `App.xaml`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 文件中的关键是`UseMauiApp<App>`，这给我们一些关于接下来会发生什么的线索。下一步是加载`App.xaml`。
- en: 'The `App.xaml` file has a bunch of resources for styling. The Blazor magic
    starts to happen in `App.xaml.cs`:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`App.xaml`文件包含许多用于样式的资源。Blazor的魔法从`App.xaml.cs`开始：'
- en: '[PRE2]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'It sets the application `MainPage` to an instance of the class `MainPage`.
    In `MainPage.xaml`, we have reached the first Blazor reference in the app, the
    `BlazorWebView`:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 它将应用程序`MainPage`设置为`MainPage`类的实例。在`MainPage.xaml`中，我们已经达到了应用程序中的第一个Blazor引用，即`BlazorWebView`：
- en: '[PRE3]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this case, we are referring to `index.html`, located in the `wwwroot` folder,
    and also set up the root component (similar to what we do in `Program.cs` in Blazor
    Server and Blazor WebAssembly).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们指的是位于`wwwroot`文件夹中的`index.html`，并设置根组件（类似于我们在Blazor Server和Blazor WebAssembly中的`Program.cs`中做的）。
- en: Here, we can also add XAML components, which makes it possible to mix XAML and
    Blazor components. Even though the implementation looks different, we should be
    familiar with the concepts.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们还可以添加XAML组件，这使得混合XAML和Blazor组件成为可能。尽管实现看起来不同，但我们应该熟悉这些概念。
- en: 'The `index.html` is almost the same as in Blazor WebAssembly:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`index.html`几乎与Blazor WebAssembly中的相同：'
- en: '[PRE4]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The only difference worth mentioning is the JavaScript that differs from the
    others (Blazor Server and Blazor WebAssembly implementations). From this point,
    the application is now running pure Blazor.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是唯一的不同之处是与其他的JavaScript不同（Blazor Server和Blazor WebAssembly实现）。从这一点开始，应用程序现在运行的是纯Blazor。
- en: 'As we can see in the `MainPage.xaml`, we are loading a Razor file called `Routes`.
    This is a familiar name from the Blazor Web App template. It looks like this:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在`MainPage.xaml`中看到的，我们正在加载一个名为`Routes`的Razor文件。这个名字来自Blazor Web App模板，看起来像这样：
- en: '[PRE5]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This is where we find the router, where we configure where to find the Razor
    components, and handle the requests that are not found.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们找到路由器的地方，我们在这里配置Razor组件的位置，并处理找不到的请求。
- en: We will not go deeper into the Blazor parts because everything past our router
    is the same as any other Blazor hosting model (Blazor Server and Blazor WebAssembly).
    There is a `MainLayout`, `NavMenu`, and component for each function (`Hello, world!`,
    `Counter`, and `Weather`).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会深入探讨 Blazor 部分，因为路由器之后的一切都与其他任何 Blazor 托管模型（Blazor Server 和 Blazor WebAssembly）相同。有一个`MainLayout`、`NavMenu`以及每个功能的组件（`Hello,
    world!`、`Counter`和`Weather`）。
- en: 'With Blazor Server and Blazor WebAssembly, we need to make JavaScript calls
    to access local resources like Bluetooth, a battery, and a flashlight, to name
    a few. Blazor Hybrid adds the ability to write code that directly accesses local
    resources. We can access the flashlight (because we all love things that light
    up) by using code similar to this:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Blazor Server 和 Blazor WebAssembly，我们需要调用 JavaScript 来访问本地资源，如蓝牙、电池和手电筒等。Blazor
    Hybrid 添加了直接访问本地资源的能力。我们可以通过类似以下代码来访问手电筒（因为我们都喜欢发光的东西）：
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This code will not work if we run a Blazor Server or Blazor WebAssembly app.
    If we still want to share components between .NET MAUI and Blazor web apps, we
    can do that using dependency injection just like we have done a couple of times
    in the book already, one implementation for the web and one for mobile.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行 Blazor Server 或 Blazor WebAssembly 应用程序，此代码将无法工作。如果我们仍然想在 .NET MAUI 和
    Blazor 网页应用程序之间共享组件，我们可以使用依赖注入来实现，就像我们在书中已经做过的几次一样，一个是网页实现，一个是移动实现。
- en: Next, we will get our amazing app to run on Android.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将让我们的神奇应用在 Android 上运行。
- en: Developing for Android
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 针对 Android 的开发
- en: There are two options when it comes to developing for Android. We can run our
    application in an *emulator* or on a *physical device*.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发 Android 时有两个选项。我们可以在**模拟器**或**物理设备**上运行我们的应用程序。
- en: To publish our application, we need to have a Google Developer license, but
    we don’t need one for development and testing.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 要发布我们的应用程序，我们需要一个 Google 开发者许可证，但在开发和测试时不需要。
- en: Running in an emulator
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在模拟器中运行
- en: 'We first need to install an emulator to run our app on an Android emulator:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先需要安装一个模拟器来在 Android 模拟器上运行我们的应用程序：
- en: In Visual Studio, open **Tools** | **Android** | **Android Device Manager**.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中，打开**工具** | **Android** | **Android 设备管理器**。
- en: 'Click the **New** button and configure a new device (the default settings should
    be OK):'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**新建**按钮并配置一个新设备（默认设置应该可以）：
- en: '![](img/B21849_18_02.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21849_18_02.png)'
- en: 'Figure 18.2: Android device configuration'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18.2：Android 设备配置
- en: Click **Create** to download a device image and configure it.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建**以下载设备镜像并配置它。
- en: Select the newly created emulator at the top of Visual Studio and run the project.
    Starting the emulator will take a couple of minutes. When developing, make sure
    not to close the emulator for a faster deployment time.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Visual Studio 顶部选择新创建的模拟器并运行项目。启动模拟器将需要几分钟时间。在开发时，请确保不要关闭模拟器以加快部署时间。
- en: To get the emulator to run fast, we can enable hardware acceleration, depending
    on the processor we use.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让模拟器运行得更快，我们可以根据所使用的处理器启用硬件加速。
- en: 'To enable hardware acceleration, please refer to the official documentation:
    [https://learn.microsoft.com/en-us/xamarin/android/get-started/installation/android-emulator/hardware-acceleration?pivots=windows](https://learn.microsoft.com/en-us/xamarin/android/get-started/installation/android-emulator/hardware-acceleration?pivots=windows).'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用硬件加速，请参阅官方文档：[https://learn.microsoft.com/en-us/xamarin/android/get-started/installation/android-emulator/hardware-acceleration?pivots=windows](https://learn.microsoft.com/en-us/xamarin/android/get-started/installation/android-emulator/hardware-acceleration?pivots=windows)。
- en: 'Great! We now have our app running inside an Android emulator:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！我们现在已经在 Android 模拟器中运行了我们的应用程序：
- en: '![](img/B21849_18_03.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21849_18_03.png)'
- en: 'Figure 18.3: App running inside an Android emulator'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18.3：在 Android 模拟器中运行的应用程序
- en: Next, we will run the application on a physical device.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在物理设备上运行应用程序。
- en: Running on a physical device
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在物理设备上运行
- en: If we want to try our application on a physical device, we need to do a few
    things on our Android device. This may differ from device to device.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想在物理设备上尝试我们的应用程序，我们需要在我们的 Android 设备上做一些事情。这可能会因设备而异。
- en: 'First, we need to make sure the phone is developer-unlocked:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要确保手机已解锁为开发者模式：
- en: Go to the **Settings** screen.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往**设置**屏幕。
- en: Select **About phone**.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**关于手机**。
- en: Tap **Build Number** seven times until **You are now a developer!** is visible.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**构建号**七次，直到出现**您现在是一名开发者**。
- en: 'Second, we need to enable USB debugging:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，我们需要启用 USB 调试：
- en: Go to the **Settings** screen.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往**设置**屏幕。
- en: Select **Developer options**.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**开发者选项**。
- en: Turn on the **USB debugging** option.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 **USB 调试** 选项。
- en: Some devices also need to enable **Install via USB**.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一些设备还需要启用 **通过 USB 安装**。
- en: We are now all set to try our app on a physical device.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好在物理设备上尝试我们的应用程序了。
- en: Connect your device to the computer using a USB cable.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 USB 线缆将您的设备连接到计算机。
- en: In the menu at the top of Visual Studio, click the arrow under **Android local
    devices** and select your device.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Visual Studio 顶部的菜单中，点击 **Android 本地设备** 下的箭头，并选择您的设备。
- en: Press **Run**, and Visual Studio will deploy the application to the device.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 **运行**，Visual Studio 将将应用程序部署到设备上。
- en: We should now have our application running on our device.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在应该在我们的设备上运行我们的应用程序。
- en: It is an extraordinary feeling to run code on another device. Over the years,
    I have developed over 100 applications for Windows 8 and Windows Phone. However,
    to this day, it still gives me the same feeling to see my application deploy to
    another physical device.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一台设备上运行代码是一种非凡的感觉。多年来，我为 Windows 8 和 Windows Phone 开发了超过 100 个应用程序。然而，时至今日，看到我的应用程序部署到另一台物理设备上，我仍然有同样的感觉。
- en: Next, we will look at what options we have for developing for iOS.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将查看我们为 iOS 开发有哪些选项。
- en: Developing for iOS
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发 iOS 应用
- en: Apple does not allow iOS code to be compiled on something that is not an Apple
    computer. There are also cloud options like MacinCloud and MacStadium, but we
    won’t go into those options in this book.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果不允许在非苹果计算机上编译 iOS 代码。还有像 MacinCloud 和 MacStadium 这样的云选项，但在这本书中我们不会讨论这些选项。
- en: This means we must own a Mac (to use the simulator) or have an Apple Developer
    license (to use hot restart).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们必须拥有一台 Mac（用于使用模拟器）或者拥有一个苹果开发者许可证（用于使用热重启）。
- en: 'To enable our iOS device to work, we need to set it in Developer Mode:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的 iOS 设备能够工作，我们需要将其设置为开发者模式：
- en: Open up your iPhone’s **Settings** app.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您 iPhone 的 **设置** 应用。
- en: Scroll down a bit and find **Privacy & Security**, then tap on it.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动一点，找到 **隐私和安全**，然后点击它。
- en: Look for something called **Developer Mode**. If you can’t find it, you might
    need to connect your phone to Xcode. It differs between versions of the operating
    system, but ask Google or Bing for help. There are many resources to be found
    on how to solve it with your versions.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 寻找名为 **开发者模式** 的选项。如果您找不到，您可能需要将手机连接到 Xcode。它因操作系统版本而异，但可以向 Google 或 Bing 求助。有许多资源可以帮助您解决您版本的问题。
- en: There should be a toggle switch; flip it to enable Developer Mode.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应该有一个切换开关；将其翻转以启用开发者模式。
- en: Your iOS device might give you a heads-up about this potentially making your
    device a bit less secure. No worries, just tap **Restart** to move forward.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的 iOS 设备可能会提醒您，这可能会使您的设备的安全性降低。不用担心，只需点击 **重启** 以继续。
- en: Once your device reboots, unlock it. You’ll see another alert asking if you’re
    sure about enabling Developer Mode. Go ahead and tap **Turn On**, and if it asks
    for your passcode, enter it.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您的设备重新启动，解锁它。您会看到一个提示，询问您是否确定要启用开发者模式。继续点击 **开启**，如果需要输入密码，请输入。
- en: Hot restart
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 热重启
- en: To test our application on a physical device, we can use hot restart. The hot
    restart feature is only designed for us to test our application while we are developing
    it, and we will not be able to publish the application.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 要在我们的物理设备上测试我们的应用程序，我们可以使用热重启。热重启功能仅设计用于我们在开发过程中测试应用程序，我们将无法发布应用程序。
- en: First, we need to have iTunes installed. If you don’t have iTunes, you can install
    that from the Windows store.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要安装 iTunes。如果您没有 iTunes，您可以从 Windows 商店安装。
- en: In the top menu in Visual Studio, if we select **iOS Local Device**, we will
    get a nice wizard telling us precisely what we need to do. The first steps are
    informative and let us install iTunes.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Visual Studio 的顶部菜单中，如果我们选择 **iOS 本地设备**，我们会看到一个友好的向导，它会精确地告诉我们需要做什么。第一步是提供信息性的，并允许我们安装
    iTunes。
- en: Next, it’s time to enter our App Store Connect API key information. To be able
    to supply that information, we need to have an Apple Developer account. At the
    time of writing, it costs $99.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，是时候输入我们的 App Store Connect API 密钥信息了。为了能够提供这些信息，我们需要有一个苹果开发者账户。截至写作时，这需要花费
    99 美元。
- en: There are excellent instructions on where to find that information.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 关于如何找到这些信息，有非常优秀的说明。
- en: 'You will be prompted with this screen:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到以下屏幕：
- en: '![A screenshot of a computer  Description automatically generated](img/B21849_18_04.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![计算机的截图 自动生成描述](img/B21849_18_04.png)'
- en: 'Figure 18.4: Apple Connect API Key information screen'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18.4：Apple Connect API 密钥信息屏幕
- en: 'Then, you will need to take the following steps:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您需要采取以下步骤：
- en: You can create a new key by going to [https://appstoreconnect.apple.com/access/api](https://appstoreconnect.apple.com/access/api).
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过访问[https://appstoreconnect.apple.com/access/api](https://appstoreconnect.apple.com/access/api)创建一个新的密钥。
- en: Click **Request API key** and then **Generate API Key**.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**请求API密钥**然后**生成API密钥**。
- en: Enter the name `Visual Studio` and select **Access Developer**.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入名称`Visual Studio`并选择**访问开发者**。
- en: Copy the different values to Visual Studio, download the API key, and select
    the file as the **Private key path**.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将不同的值复制到Visual Studio中，下载API密钥，并将文件作为**私钥路径**选择。
- en: Next, select a team, and we are all set.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，选择一个团队，我们就准备好了。
- en: 'Run the application and see it run on your iPhone:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用程序并查看它在您的iPhone上运行：
- en: '![](img/B21849_18_05.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21849_18_05.png)'
- en: 'Figure 18.5: Application running on an iPhone'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.5：在iPhone上运行的应用程序
- en: Next, we will look at how to set up a simulator.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探讨如何设置模拟器。
- en: Simulator
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模拟器
- en: A simulator runs the app on a Mac but shows the result on a PC. A simulator
    differs from an emulator. An emulator runs the code on the machine (in our case,
    a PC). A simulator runs on top of the native OS (macOS), mimicking an iPad or
    an iPhone.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟器在Mac上运行应用程序，但结果显示在PC上。模拟器与仿真器不同。仿真器在机器上（在我们的案例中，是PC）上运行代码。模拟器在原生操作系统（macOS）上运行，模仿iPad或iPhone。
- en: To get simulators to work, we need to have an Apple computer on the same network.
    Visual Studio will help us along the way to set everything up. We must install
    Xcode. On your Mac, install Xcode from the App Store, and start it to agree to
    the license agreement and select what devices you want to develop for.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 要使模拟器工作，我们需要在同一网络上有苹果电脑。Visual Studio将帮助我们设置一切。我们必须安装Xcode。在您的Mac上，从App Store安装Xcode，启动它以同意许可协议并选择您想要为哪些设备开发。
- en: 'We also need to open remote access to the Mac. We can do that by doing the
    following:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要打开Mac的远程访问。我们可以通过以下方式做到这一点：
- en: On the Mac, invoke Spotlight by pressing *cmd* + *space*, searching for **remote
    login**, and then opening **Sharing System Preferences**.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Mac上，按*cmd* + *space*调用Spotlight，搜索**远程登录**，然后打开**共享系统偏好设置**。
- en: Enable the **Remote Login** option to allow Visual Studio to connect to the
    Mac.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用**远程登录**选项以允许Visual Studio连接到Mac。
- en: Set access for **Only these users** and ensure your user is included in the
    list or group.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置**仅限这些用户**的访问权限，并确保您的用户包含在列表或组中。
- en: 'We now have everything prepared on the Mac. In Visual Studio on the PC, we
    can now pair our Mac:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经在Mac上准备好了所有东西。在PC上的Visual Studio中，我们现在可以配对我们的Mac：
- en: Select **Tools** | **iOS** | **Pair to Mac**.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**工具** | **iOS** | **与Mac配对**。
- en: Follow the instructions in the wizard (same as above).
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照向导中的说明（与上面相同）。
- en: Select the Mac from the list and click **Connect**. Visual Studio can now help
    you install the things you need to get started. It might take a while for the
    Mac to install all the things, so if it doesn’t work, the simulators are probably
    not installed yet.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从列表中选择Mac并点击**连接**。Visual Studio现在可以帮助您安装开始所需的东西。Mac安装所有这些可能需要一段时间，所以如果不起作用，模拟器可能还没有安装。
- en: In the dropdown at the top of Visual Studio, we can select **iOS Simulators**,
    and then choose a device to run our app.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio顶部的下拉菜单中，我们可以选择**iOS模拟器**，然后选择一个设备来运行我们的应用程序。
- en: '![A screenshot of a computer  Description automatically generated](img/B21849_18_06.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![计算机屏幕截图  自动生成描述](img/B21849_18_06.png)'
- en: 'Figure 18.6: Device selection in Visual Studio'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.6：在Visual Studio中的设备选择
- en: 'Run the app and the simulator will start. This is what the app would look like
    if we ran it on an iPad Mini:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用程序，模拟器将启动。如果我们在iPad Mini上运行它，应用程序将看起来像这样：
- en: '![](img/B21849_18_07.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21849_18_07.png)'
- en: 'Figure 18.7: App running in an iPad simulator'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.7：在iPad模拟器中运行的应用程序
- en: 'We now have two ways of running and testing on iOS devices. We can also connect
    an iPhone directly to the Mac and run the application over Wi-Fi. There is more
    information on debugging over Wi-Fi in the official docs: [https://learn.microsoft.com/en-us/xamarin/ios/deploy-test/wireless-deployment](https://learn.microsoft.com/en-us/xamarin/ios/deploy-test/wireless-deployment).'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有两种在iOS设备上运行和测试应用程序的方法。我们还可以直接将iPhone连接到Mac，并通过Wi-Fi运行应用程序。有关通过Wi-Fi调试的更多信息，请参阅官方文档：[https://learn.microsoft.com/en-us/xamarin/ios/deploy-test/wireless-deployment](https://learn.microsoft.com/en-us/xamarin/ios/deploy-test/wireless-deployment)。
- en: Next, we will build an app for macOS.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将为macOS构建一个应用程序。
- en: Developing for macOS
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: macOS开发
- en: 'We don’t have an option for macOS to run or deploy from a Windows machine.
    To run our application on the Mac, follow these steps:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有从 Windows 机器运行或部署到 macOS 的选项。要在 Mac 上运行我们的应用程序，请按照以下步骤操作：
- en: On the Mac, open our project in VS Code.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Mac 上，使用 VS Code 打开我们的项目。
- en: 'At the time of writing, installing the .NET MAUI tooling in VS Code is still
    a bit of a preview, and Microsoft announced that VS for Mac is discontinued. This
    is the best source to keep up to date with installing the tools on a Mac: [https://learn.microsoft.com/en-us/dotnet/maui/get-started/installation?view=net-maui-8.0&tabs=visual-studio-code](https://learn.microsoft.com/en-us/dotnet/maui/get-started/installation?view=net-maui-8.0&tabs=visual-studio-code).
    Follow the instructions in the link.'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在撰写本文时，将 .NET MAUI 工具安装在 VS Code 中仍然是一个预览版本，并且微软宣布 VS for Mac 已停止开发。这是跟踪在 Mac
    上安装工具的最佳来源：[https://learn.microsoft.com/en-us/dotnet/maui/get-started/installation?view=net-maui-8.0&tabs=visual-studio-code](https://learn.microsoft.com/en-us/dotnet/maui/get-started/installation?view=net-maui-8.0&tabs=visual-studio-code)。请遵循链接中的说明。
- en: 'Run the project, and our app will show up:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行项目，我们的应用将显示出来：
- en: '![](img/B21849_18_08.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21849_18_08.png)'
- en: 'Figure 18.8: App running on macOS'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18.8：在 macOS 上运行的应用
- en: In this case, we are running the application on the same platform, with no emulators
    or simulators, which is much less complicated than running it on a separate device.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们是在同一平台上运行应用程序，没有仿真器或模拟器，这比在单独的设备上运行要简单得多。
- en: Next, we will run our application on Windows.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在 Windows 上运行我们的应用程序。
- en: Developing for Windows
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为 Windows 开发
- en: 'Running the application on Windows is what we did in *step 3* of the *.NET
    MAUI Blazor Hybrid App* section. To reiterate, perform the following step:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上运行应用程序是我们之前在 *.NET MAUI Blazor Hybrid App* 部分的 *步骤 3* 中所做的事情。再次强调，执行以下步骤：
- en: Change the dropdown to **Windows Machine** and run the project. We can see the
    result in *Figure 18.1* at the beginning of the chapter.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将下拉菜单更改为 **Windows Machine** 并运行项目。我们可以在本章开头的 *图 18.1* 中看到结果。
- en: As with macOS, we run the application on the same platform, with no emulators
    or simulators, which is much less complicated than running it on a separate device.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 与 macOS 一样，我们在同一平台上运行应用程序，没有仿真器或模拟器，这比在单独的设备上运行要简单得多。
- en: Next, we will take a look at Tizen.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看看 Tizen。
- en: Developing for Tizen
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为 Tizen 开发
- en: Tizen is an operating system mainly for TVs and watches. My Samsung Gear S3
    runs Tizen. Samsung manages Tizen and not Microsoft. This ability for other manufacturers
    to hook into the platform just shows how great the .NET MAUI platform is.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: Tizen 是一个主要针对电视和手表的操作系统。我的三星 Gear S3 运行的是 Tizen。Tizen 由三星管理，而不是微软。其他制造商能够接入这个平台的能力，正好显示了
    .NET MAUI 平台是多么出色。
- en: At the time of writing, the Tizen experience lags a bit. Since this is not an
    official platform and because of the state of the tooling, I have decided not
    to include a guide.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，Tizen 的体验略有滞后。由于这不是一个官方平台，并且由于工具的状态，我决定不包括指南。
- en: But Tizen is working on the tooling, so if you want to transfer your app to
    TVs running Tizen, you should look into it.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 但 Tizen 正在开发工具，所以如果你想将你的应用转移到运行 Tizen 的电视上，你应该了解一下。
- en: Summary
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we looked at cross-platform development with Blazor Hybrid.
    I mentioned this before in this chapter, but it is worth mentioning again that
    running code on a phone or a device that is not a computer is such a fun thing
    to do. You can’t beat that feeling. Even if you don’t intend to develop for mobile
    devices, give it a try.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了使用 Blazor Hybrid 进行跨平台开发。我之前在本章中提到过这一点，但再次提一下，在手机或非计算机设备上运行代码是一件非常有趣的事情。这种感受是无法比拟的。即使你并不打算为移动设备开发，也值得一试。
- en: With .NET MAUI, we can leverage our existing C# knowledge and, perhaps more
    importantly, our Blazor knowledge to create mobile applications.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 .NET MAUI，我们可以利用我们现有的 C# 知识，也许更重要的是，我们的 Blazor 知识来创建移动应用程序。
