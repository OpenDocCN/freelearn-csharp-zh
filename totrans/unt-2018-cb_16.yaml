- en: Working with External Resource Files and Devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Loading external resource files—using Unity default resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading external resource files—downloading files from the internet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: "Loading external resource files—manually storing files in the Unity \Lresources\
    \ or `StreamingAssets` folders"
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving project files into Unity Asset Bundles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading resources from Unity Asset Bundles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For some projects, it works well to use the **Inspector** window to manually
    assign imported assets to the component slots, and then build and play the game
    with no further changes. However, there are also many times when external data
    of some kind can add flexibility and features to a game. For example, it might
    add updateable or user-editable content; it can allow memory of user preferences
    and achievements between scenes, and even game-playing sessions. Using code to
    read local or internet file content at runtime can help file organization and
    the separation of tasks between game programmers and content designers. Having
    an arsenal of different assets and long-term game memory techniques means providing
    a wide range of opportunities to deliver a rich experience to players and developers
    alike.
  prefs: []
  type: TYPE_NORMAL
- en: The big picture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before getting on with the recipes, let''s step back and have a quick review
    of the role of the asset files and the Unity game building and running process.
    The most straightforward way to work with assets is to import them into a Unity
    project, use the **Inspector** window to assign the assets to the components in
    the Inspector, and then build and play the game:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/efbf595d-70a6-4d51-9933-1493f7102ec1.png)'
  prefs: []
  type: TYPE_IMG
- en: Standalone executables offer another possible workflow, which is the adding
    of files into the `Resources` folder of the game after it has been built. This
    will support game media asset developers being able to provide the final version
    of assets after development and building has been completed. However, another
    option is to use the **WWW** class to dynamically read assets from the web at
    runtime or, perhaps, for communication with a high score or multiplayer server,
    and sending and receiving information and files.
  prefs: []
  type: TYPE_NORMAL
- en: When loading/saving data either locally or via the web interface, it is important
    to keep in mind the data types that can be used. When writing C# code, our variables
    can be of any type permitted by the language, but when communicated by the web
    interface, or to a local storage using Unity's **PlayerPrefs** class, we are restricted
    in the types of data that we can work with. Unity's **WWW** class permits three
    file types (text files, binary audio clips, and binary image textures), but, for
    example, for 2D UIs, we sometimes need **Sprite** images and not Textures, so
    we have provided in this chapter a C# method to create a **Sprite** from a **Texture**.
  prefs: []
  type: TYPE_NORMAL
- en: 'When using the **PlayerPrefs** class, we are limited to saving and loading
    integers, floats, and strings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/959e4092-0018-46b2-b1c7-53f99f6ca981.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The WWW is a small class and is straightforward to use. In recent years, Unity
    has introduced the **Unity Web Request system**, as part of its networking library,
    for creating and processing HTTP messages (requests and responses). While the
    **WWW** class is sufficient for the resource saving and loading recipes in this
    chapter, if you are likely to want to work in a more sophisticated way with HTTP
    messages, then you would be advised to learn about Unity Web Requests, such as
    at the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Unity manual section on Unity Web Requests: [https://docs.unity3d.com/Manual/UnityWebRequest.html](https://docs.unity3d.com/Manual/UnityWebRequest.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example use of a Unity Web Request on GitHub: [https://gist.github.com/emoacht/89590d4e4571d40f9e1b](https://gist.github.com/emoacht/89590d4e4571d40f9e1b)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples of HTTP GET/PUT, and so on, requests from StackOverflow: [https://stackoverflow.com/questions/46003824/sending-http-requests-in-c-sharp-with-unity](https://stackoverflow.com/questions/46003824/sending-http-requests-in-c-sharp-with-unity)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading external resource files – using Unity Default Resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will load an external image file, and display it on the screen,
    using the Unity Default Resources file (a library created at the time the game
    was compiled).
  prefs: []
  type: TYPE_NORMAL
- en: This method is perhaps the simplest way to store and read the external resource
    files. However, it is only appropriate when the contents of the resource files
    will not change after compilation, since the contents of these files are combined
    and compiled into the `resources.assets` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `resources.assets` file can be found in the `Data` folder for a compiled
    game:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f782bcfb-b96b-4115-9a58-6b21ed2a68c7.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the 10_01 folder, we have provided an image file, a text file, and an audio
    file in the `.ogg` format for this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '`externalTexture.jpg`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cities.txt`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`soundtrack.ogg`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To load the external resources from Unity Default Resources, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new 3D Unity project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `Project` window, create a new folder and rename it `Resources`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the `externalTexture.jpg` file and place it in the `Resources` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a 3D cube, and name it `Cube-1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a C# `ReadDefaultResources` script class and add an instance object
    as a component to `Cube-1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Play the scene. The `texture` will be loaded and displayed on the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you have another image file, put a copy into the `Resources` folder. Then,
    in the `Inspector` window, change the public file name to the name of your image
    file and play the scene again. The new image will now be displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: "The `Resources.Load (fileName)` statement makes Unity look inside its compiled\
    \ project data file called resources.assets for the contents of a file named `externalTexture.`\
    \ The contents are returned as a texture image, which is stored into the `externalImage`\
    \ variable. The last statement in the `Start()` method sets the texture of the\
    \ GameObject \Lthe script has been attached to our externalImage variable."
  prefs: []
  type: TYPE_NORMAL
- en: The string variable `fileName` is public property, so you can select GameObject
    Cube-1 in the Hierarchy, and edit the File Name string in the Read Default Resources
    (Script) component in the Inspector.
  prefs: []
  type: TYPE_NORMAL
- en: The filename string passed to `Resources.Load()` does not include the file extension
    (such as `.jpg` or `.txt`).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here are some details that you won't want to miss.
  prefs: []
  type: TYPE_NORMAL
- en: Loading text files with this method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can load the external text files using the same approach. The private variable
    needs to be a string (to store the text file content). The `Start()` method uses
    a temporary `TextAsset` object to receive the text file content, and the text
    property of this object contains the string content that are to be stored in the
    private `textFileContents `variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, this string is displayed on the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c09513a5-3963-4d1f-ba3e-c34142b4819a.png)'
  prefs: []
  type: TYPE_IMG
- en: Loading and playing audio files with this method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can load external audio files using the same approach. The private variable
    needs to be an `AudioClip`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We don''t try to play the `AudioClip` until loading has been completed, which
    we can test with the audio clip''s `loadState` property. Learn more about **Audio
    Load State** in the Unity scripting reference pages: [https://docs.unity3d.com/ScriptReference/AudioDataLoadState.html](https://docs.unity3d.com/ScriptReference/AudioDataLoadState.html)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Refer to the following recipes in this chapter for more information:'
  prefs: []
  type: TYPE_NORMAL
- en: Loading external resource files by manually storing files in Unity `Resources`
    folder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading external resource files by downloading files from the internet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading external resource files by downloading files from the internet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One way to store and read a text file data is to store the text files on the
    web. In this recipe, the content of a text file for a given URL are downloaded,
    read, and then displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, you need to have access to the files on a web server. If you
    run a local web server such as Apache, or have your own web hosting, then you
    can use the files in the `10_02` folder and the corresponding URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'Otherwise, you may find the following URLs useful, since they are the web locations
    of an image file (a Packt Publishing logo) and a text file (an ASCII-art badger
    picture):'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.packtpub.com/sites/default/files/packt_logo.png](http://www.packtpub.com/sites/default/files/packt_logo.png)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[www.ascii-art.de/ascii/ab/badger.txt](http://www.ascii-art.de/ascii/ab/badger.txt)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To load external resources by downloading them from the Internet, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: In a 3D project, create a new RawImage UI GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a C# ReadImageFromWeb script class and add an instance object as a component
    to the RawImage GameObject:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Play the **Scene.** Once downloaded, the content of the image file will be
    displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/73064cad-b97b-4763-b97e-f4c7e5f52bfa.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Note the need to use the `UnityEngine.UI` package for this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: "When the game starts, our `Start()` method starts the coroutine method called\
    \ `LoadWWW()`. A **coroutine** is a method that can keep on running in the background\
    \ without halting or \Lslowing down the other parts of the game and the frame\
    \ rate. The yield statement indicates that once a value can be returned for `imageFile,`\
    \ the remainder of the method can be executed—that is, until the file has finished\
    \ downloading, no attempt should be made \Lto extract the texture property of\
    \ the `WWW` object variable."
  prefs: []
  type: TYPE_NORMAL
- en: Once the image data has been loaded, execution will progress past the yield
    statement. Finally, the texture property of the RawImage GameObject, to which
    the script is attached, is changed to the image data that is downloaded from the
    web (inside the texture variable of the WWW object).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are some details that you don't want to miss.
  prefs: []
  type: TYPE_NORMAL
- en: Converting from Texture to Sprite
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: "While in the recipe, we used a UI RawImage, and so we could use the downloaded\
    \ texture directly; however, there may be times when we wish to work with a Sprite\
    \ rather than a Texture. \LTo create a Sprite object from a texture create the\
    \ following script-class:"
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Downloading a text file from the web
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Use this technique to download a text file (attach an instance of a script
    class to a UI Text object):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The WWW class and the resource content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: "The WWW class defines several different properties and methods to allow the\
    \ downloaded media resource file data to be extracted into appropriate variables\
    \ for use in the game. \LThe most useful of these include the following:"
  prefs: []
  type: TYPE_NORMAL
- en: '`.text`: A read-only property, returning the web data as string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.texture`: A read-only property, returning the web data as a `Texture2D` image'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.GetAudioClip()`: A method that returns the web data as an `AudioClip`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information about the Unity WWW class, visit [http://docs.unity3d.com/ScriptReference/WWW.html](http://docs.unity3d.com/ScriptReference/WWW.html)
  prefs: []
  type: TYPE_NORMAL
- en: An example using UnityWebRequest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Rather than the `WWW` class, we can also download the texture using the `UnityWebRequest`
    library. Just replace the content of the `ReadImageFromWeb` script class with
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Refer to the following recipes in this chapter for more information:'
  prefs: []
  type: TYPE_NORMAL
- en: Loading external resource files by **Unity Default Resources**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: "Loading external resource files by manually storing files in the Unity \L`Resources`\
    \ folder"
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: "Loading external resource files by manually storing files in the Unity \LResources\
    \ or StreamingAssets folders"
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At times, the content of the external resource files may need to be changed
    after the game compilation. Hosting the resource files on the web may not be an
    option. There is a method of manually storing and reading files from the `Resources`
    folder of the compiled game, which allows for those files to be changed after
    the game compilation.
  prefs: []
  type: TYPE_NORMAL
- en: The `Resources` folder technique works when you compile to a Windows or Mac
    standalone executables. The `SteamingAssets` folder technique works with these,
    and also iOS and Android devices. The next recipe illustrates the Resources folder
    technique, and then at the end we discuss how to use the `StreamingAssets` approach.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `10_01` folder provides the texture image that you can use for this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '`externalTexture.jpg`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To load external resources by manually storing the files in the Resources folder,
    do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new 3D project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new UI Image GameObject. Make this take up most of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new UI Text GameObject. Position this to stretch the full width of
    the screen, along the bottom.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a C# ReadManualResourceImageFile script class and add an instance object
    as a component to the UI Image GameObject:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: With the UI Image GameObject selected in the Hierarchy, drag the UI Text object
    to populate the public Text URL property, in the Inspector, for the ResourceFileLoader
    (Script) component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the current scene, and add it to the build settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build your (Windows or Mac) standalone executable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the externalTexture.jpg image to your standalone''s `Resources` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/205d9d02-dbbf-4607-8587-7e5f8eec85e1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Run your standalone game application, and the image will be read at run-time
    from the Resources folder and displayed (and the path to that resource will be
    shown in the UI Text at the bottom of the application window):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/aba7b749-cc3e-4d4a-9f4d-7508f65aa022.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A URL-path is defined, stating where Unity can find the desired image in the
    Resources folder of the standalone application build. This path is shown onscreen
    by setting the text property of the UI Text GameObject to that path's string value.
  prefs: []
  type: TYPE_NORMAL
- en: The **WWW** object spots that the URL starts with the file-protocol, and so
    Unity attempts to find the external resource file in its Resources folder (waiting
    until it has finished loading), and then load its content.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Start()` method is declared as an `IEnumerator`, allowing it to run as
    a **co-routine**, and so wait until the WWW class object completes its loading
    of the image file:'
  prefs: []
  type: TYPE_NORMAL
- en: You will need to place the files in the Resources folder manually after every
    compilation.
  prefs: []
  type: TYPE_NORMAL
- en: When you create a Windows or Linux standalone executable, there is also a `_Data`
    folder, created with the executable application file. The Resources folder can
    be found inside this Data folder.
  prefs: []
  type: TYPE_NORMAL
- en: A Mac standalone application executable looks like a single file, but it is
    actually a macOS package folder. Right-click on the executable file and select
    **Show Package Contents**. You will then find the standalone's Resources folder
    inside the Contents folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are using the file protocol for the URL, which must start in the form: `file:///:`'
  prefs: []
  type: TYPE_NORMAL
- en: For the OSX standalone, the Unity Application.dataPath will return a path in
    the form `/user/location-to-Contents`, so we prefix this with `file://` to get
    a valid file-protocol URL in the form `file:///user/location-to-Contents`.
  prefs: []
  type: TYPE_NORMAL
- en: For Windows the standalone for the Unity Application.dataPath will return a
    path in the form `C:Projects/MyUnityProject/location-to-``Data`, so we prefix
    this with `file:/// to get a valid file-prototcol` URL in the form `file:///C:Projects/MyUnityProject/location-to-Data`
  prefs: []
  type: TYPE_NORMAL
- en: 'Learn more from the Unity documentation and Unity answers pages:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Scripting `Application.dataPath`: [https://docs.unity3d.com/ScriptReference/Application-dataPath.html](https://docs.unity3d.com/ScriptReference/Application-dataPath.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Unity Answers: [https://answers.unity.com/questions/517414/how-to-use-www-to-load-local-files.html](https://answers.unity.com/questions/517414/how-to-use-www-to-load-local-files.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are some details that you don't want to miss.
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding cross-platform problems with Path.Combine() rather than / or \
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The filepath folder separator character is different for Windows and Mac file
    systems (backslash \ for Windows, forward slash / for the Mac). However, Unity
    knows which kind of standalone you are compiling your project into; therefore,
    the `Path.Combine()` method will insert the appropriate separator slash character
    form the file URL that is required.
  prefs: []
  type: TYPE_NORMAL
- en: SteamingAssets folder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If deploying to iOS or Android, the `Resources` folder technique won''t work,
    and you should create and store resource files in a folder named `StreamingAssets.`
    For example, if you had a text file named `MyTextFile.txt`, you could create a
    folder named `StreamingAssets` in the **Project** panel, store file `MyTextFile.txt` in
    that folder, and use the following code to load the content of that file at run-time
    with your built application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Learn more about the StreamingAsset folder in Unity at the following links: [https://docs.unity3d.com/Manual/StreamingAssets.html](https://docs.unity3d.com/Manual/StreamingAssets.html) and  [https://docs.unity3d.com/ScriptReference/Application-streamingAssetsPath.html](https://docs.unity3d.com/ScriptReference/Application-streamingAssetsPath.html)
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Refer to the following recipes in this chapter for more information:'
  prefs: []
  type: TYPE_NORMAL
- en: Loading external resource files by Unity Default Resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading external resource files by downloading files from the internet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving Project files into Unity Asset Bundles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unity provides the Asset Bundle mechanism as another way to manage the loading
    of resources at run-time. Asset Bundles can be stored locally, or on the intenet.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create a prefab (of a 3D cube GameObject), and save
    it into an Asset Bundle.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the `10_06` folder, we have provided the `externalTexture.jpg` image file.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To save Unity Asset Bundles, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new 3D Unity project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the provided image file (into a new folder named Textures).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new Cube (named `Cube-1`) in the scene, and apply the imported texure
    image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Project window, create a new folder and rename it Prefabs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Project folder Prefabs, create a new empty Prefab named cube.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the Scene panel, drag GameObject Cube-1 over the Prefab cube in Project
    folder Prefabs. The prefab should turn blue and now be a file storing the properties
    of GameObject Cube-1.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With the file cube selected in the Project panel, go to the bottom of the Inspector
    panel and create a new AssetBundle, naming it chapter11\. See the screenshot illustrating
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/79fde76b-531e-4a77-9c81-f85e0d4a6ef6.png)'
  prefs: []
  type: TYPE_IMG
- en: In the Project panel, create a new folder called `Editor` and `AssetBundles`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Editor folder, create a new C# CreateAssetBundles script class containing
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You should now see two new menu items added to the bottom of the Assets menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ded3e541-21cc-49a7-86d5-5bb0ba87c20b.png)'
  prefs: []
  type: TYPE_IMG
- en: Choose the create bundles action for the operating system you are using (Mac
    or Windows).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should now see files created in folder `AssetBundles`: `AssetBundles` and
    `chapter11`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Resources.Load(fileName)` statement makes Unity look inside its compiled
    project data file called `resources.assets` for the content of a file named `externalTexture`.
    The content is returned as a texture image, which is stored into the `externalImage`
    variable. The last statement in the `Start()` method sets the texture of the GameObject
    to which the script has been attached to our `externalImage` variable.
  prefs: []
  type: TYPE_NORMAL
- en: The string varable fileName is a public property, so you can select GameObject
    Cube-1 in the Hierarchy, and edit the File Name string in the Read Default Resources
    (Script) component in the Inspector.
  prefs: []
  type: TYPE_NORMAL
- en: 'Learn more about AssetBundles and the workflow recommended by Unity at the
    following addresses:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Asset Bundles Workflow: [https://docs.unity3d.com/2018.1/Documentation/Manual/AssetBundles-Workflow.html](https://docs.unity3d.com/2018.1/Documentation/Manual/AssetBundles-Workflow.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Native use of Asset Bundles: [https://docs.unity3d.com/2018.1/Documentation/Manual/AssetBundles-Native.html](https://docs.unity3d.com/2018.1/Documentation/Manual/AssetBundles-Native.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading resources from Unity Asset Bundles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we will load an Asset Bundle, and retrieve a prefab, then create
    (Instantiate) a `GameObject` in the scene from the retrieved data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/517b3d1c-838f-4c05-93d4-e6653824610a.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe uses the files created by the previous reciple. We have also provided
    a copy of folder AssetBundles in `10_07` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To load Unity Asset Bundles, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new 3D Unity project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the provided folder `AssetBundles`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the following C# `AssetBundleLoader` script class and add an instance
    as a component of the Main Camera:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Run the **Scene,** and a cube should appear in the scene, created by extracting
    the Prefab cube file from the Asset Bundle, and then instantiating a new GameObject
    based on this prefab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unity method `UnityWebRequestAssetBundle.GetAssetBundle(...)` expects a file-protocol
    URI to a named Asset Bundle. This bundle was loaded into variable bundle, and
    then the `LoadAsset(...)` method used to extract the file named `cube`. Finally,
    a GameObject was created at run-time based on this prefab, resulting in the cube
    that we see when we run the scene.
  prefs: []
  type: TYPE_NORMAL
- en: The variables `bundleFolderName,` `bundleName,` and `resourceName` define the
    folder, Asset Bundle filename and prefab inside the `Asset` Bundle for this project.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you select the `chapter11` manifest file (the icon that looks like a piece
    of paper with lines), then in the Inspector, you can see that it contains our
    cube prefab:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Learn more about `AssetBundles` and the workflow recommended by Unity at the
    following addresses:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Asset Bundles Workflow: [https://docs.unity3d.com/2018.1/Documentation/Manual/AssetBundles-Workflow.html](https://docs.unity3d.com/2018.1/Documentation/Manual/AssetBundles-Workflow.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Native use of Asset Bundles: [https://docs.unity3d.com/2018.1/Documentation/Manual/AssetBundles-Native.html](https://docs.unity3d.com/2018.1/Documentation/Manual/AssetBundles-Native.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are some details that you don't want to miss.
  prefs: []
  type: TYPE_NORMAL
- en: Loading AssetBundles via AssetBundle.LoadFromFile()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An alternative to `UnityWebRequest` for local loading from tiles is to use `AssetBundle.LoadFromFile():`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Loading AssetBundles hosted via a web server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although we have just illustrated how to load an `AssetBundle` from a local
    file, often such resources are loaded from a web server. In this case, the URI
    needs to be an internet protocol.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if files are being served locally on port 8000, then the host
    will be http://localhost:8000 and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
