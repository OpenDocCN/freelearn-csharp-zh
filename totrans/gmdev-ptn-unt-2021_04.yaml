- en: A Short Primer to Programming in Unity
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: Unity 编程简明指南
- en: This chapter is a short primer to help you get familiar with advanced C# language
    and Unity engine features. I'm not going to attempt to explain in depth any of
    the subject matter presented here because it's beyond the scope of this book.
    Still, I will at least introduce you to some core concepts to avoid confusion
    when they are referenced in the upcoming chapters. I encourage those that have
    advanced knowledge of C# and Unity programming to skip this chapter. But I recommend
    beginners and intermediate developers take the time to review the content of this
    chapter to get a general idea of the language and engine features we will use
    to implement and design our game systems.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是一个简短的入门指南，帮助你熟悉高级 C# 语言和 Unity 引擎特性。我不会尝试深入解释这里呈现的任何主题，因为这超出了本书的范围。尽管如此，我至少会介绍一些核心概念，以避免在即将到来的章节中引用它们时的混淆。我鼓励那些对
    C# 和 Unity 编程有深入了解的人跳过这一章。但我建议初学者和中级开发者花时间回顾本章内容，以获得我们将用于实现和设计游戏系统的语言和引擎特性的总体概念。
- en: In all cases, complete mastery over C# and Unity is not needed to comprehend
    this book, just general awareness and familiarity with some advanced critical
    concepts.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有情况下，对 C# 和 Unity 的完全掌握不是理解本书的必要条件，只需对一些关键概念有一般意识和熟悉即可。
- en: 'In this chapter, we will go through the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下主题：
- en: What you should already know
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你应该已经知道的内容
- en: C# language features
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C# 语言特性
- en: Unity engine features
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity 引擎特性
- en: The code showcased in this chapter is for educational purposes only. It has
    not been optimized and is not meant to be used in production code.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章展示的代码仅用于教学目的。它未经优化，不应用于生产代码。
- en: What you should already know
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你应该已经知道的内容
- en: In this section, I'm listing some core C# language and Unity engine features
    that you should already be familiar with before continuing to more advanced parts
    of this book.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我列举了一些你应该在继续阅读本书更高级部分之前已经熟悉的 C# 语言和 Unity 引擎的核心特性。
- en: '**The following are some core features of C#**:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**以下是一些 C# 的核心特性**：'
- en: Familiarity with class access modifiers such as public and private
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 熟悉类访问修饰符，如 public 和 private
- en: Fundamental knowledge of basic primitive data types (int, string, bool, float,
    and arrays)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本原始数据类型（int、string、bool、float 和数组）的基本知识
- en: A conceptual understanding of inheritance and the relation between a base class
    and a derived class
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对继承和基类与派生类之间关系的概念理解
- en: '**The following are some core features of Unity**:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**以下是一些 Unity 的核心特性**：'
- en: A basic understanding of how to write a `MonoBehaviour` script and attach it
    to a `GameObject` as a component
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本了解如何编写 `MonoBehaviour` 脚本并将其作为组件附加到 `GameObject` 上
- en: Ability to create a new Unity Scene from scratch and manipulate GameObjects
    inside the editor
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够从头创建新的 Unity 场景并在编辑器中操作 GameObject
- en: Familiarity with Unity's basic event functions (`Awake`, `Start`, `Update`)
    and their sequence of execution
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 熟悉 Unity 的基本事件函数（`Awake`、`Start`、`Update`）及其执行顺序
- en: If you are not familiar with the concepts listed previously, I would recommend
    reading the books and documentation that are listed in the *Further reading* section
    of this chapter.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不太熟悉前面列出的概念，我建议阅读本章 *进一步阅读* 部分中列出的书籍和文档。
- en: C# language features
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C# 语言特性
- en: Languages features such as events and delegates might be too advanced for beginners,
    so if you consider yourself in that category, don't worry; you can still enjoy
    this book. Just read the beginner-level chapters such as the ones that explain
    patterns such as Singleton, State, Facade, and Adapter.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 事件和委托等语言特性可能对初学者来说过于高级，所以如果你认为自己属于这一类别，请不要担心；你仍然可以享受这本书。只需阅读入门级章节，例如解释单例、状态、外观和适配器等模式的章节。
- en: 'The following C# advanced language features are fundamental to the optimal
    implementation of some design patterns that we will be implementing in the upcoming
    chapters:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 C# 高级语言特性对于我们在即将到来的章节中实现的一些设计模式的最佳实现是基本的：
- en: '**Static**: Methods and members of a class with the `static` keyword can be
    accessed directly with its name and without initializing an instance. Static methods
    and members are helpful because they are easily accessible from anywhere in your
    code. The following example showcases a class that uses the keyword to establish
    a globally accessible event bus:'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**静态**：带有`static`关键字的类的方法和成员可以直接通过其名称访问，而无需初始化一个实例。静态方法和成员非常有用，因为它们可以从代码的任何地方轻松访问。以下是一个使用该关键字建立全局可访问事件总线的类示例：'
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Events**: An event permits an object that acts as a publisher to send out
    a signal that other objects can receive; these objects that listen for a particular
    event are called subscribers. Events are useful when you want to build an event-driven
    architecture. The following is an example of a class that publishes events:'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件**：事件允许一个充当发布者的对象发送其他对象可以接收的信号；这些监听特定事件的对象被称为订阅者。当你想要构建事件驱动架构时，事件非常有用。以下是一个发布事件的类示例：'
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Delegates**: The concept behind delegates is simple when you understand their
    underlying low-level mechanism. A high-level definition of delegates is that they
    hold references to functions. But this is a very abstract definition of what delegates
    actually do behind the scenes. They''re function pointers, which means that they
    hold the memory address to other functions. So, we could visualize them as an
    address book that contains a list of locations of functions. That is why a delegate
    can hold multiple of them and call them all at once. The following is an example
    of a class that subscribes to events triggered by a publisher class by assigning
    specific local functions to the publisher''s delegates:'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**委托**：当你理解其底层低级机制时，委托的概念很简单。委托的高级定义是它们持有函数的引用。但这是对委托实际在幕后做什么的非常抽象的定义。它们是函数指针，这意味着它们持有其他函数的内存地址。因此，我们可以将它们想象成一个包含函数位置列表的地址簿。这就是为什么委托可以持有多个它们，并一次性调用它们。以下是一个通过将特定的本地函数分配给发布者的委托来订阅由发布者类触发的事件的类示例：'
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Generics**: A relevant C# feature that permits the deferred specification
    of a type until the class is declared and instantiated by the client. When we
    say a class is generic, it doesn''t have a defined object type. The following
    is an example of a generic class and can act as a template:'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**泛型**：C# 的一个相关特性，允许在类被客户端声明和实例化之前延迟指定类型。当我们说一个类是泛型的时候，它没有定义的对象类型。以下是一个泛型类示例，它可以作为一个模板使用：'
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Serialization**:Serialization is the process of converting an instance of
    an object into a binary or textual form. This mechanism permits us to preserve
    the state of an object in a file. The following is an example of a function that
    serializes an instance of an object and saves it as a file:'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**序列化**：序列化是将对象实例转换为二进制或文本形式的过程。这种机制允许我们将对象的状态保存在文件中。以下是一个将对象实例序列化并保存为文件的函数示例：'
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: C# is a programming language with a lot of depth so it would be impossible for
    me to explain each of its core features within the scope of this book. Those presented
    in this section of this book are very useful and will help us implement the game
    systems and patterns described in the upcoming chapters.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: C# 是一门深度很大的编程语言，因此在此书的范围内不可能解释其所有核心特性。本书本节中介绍的都是非常有用的，并将帮助我们实现后续章节中描述的游戏系统和模式。
- en: Unity engine features
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unity 引擎特性
- en: 'Unity is a fully featured engine, including a comprehensive scripting API,
    an animation system, and many additional features for game development. We can''t
    cover them all in this book, so I will only list the core Unity components that
    we will be using in the upcoming design pattern chapters:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Unity 是一个功能齐全的引擎，包括全面的脚本API、动画系统以及许多用于游戏开发的附加功能。我们无法在本书中涵盖所有内容，因此我只会列出我们在即将到来的设计模式章节中将要使用的核心Unity组件：
- en: '**Prefabs**: A prefab is a prefabricated container of assembled GameObjects
    and components. For example, you can have individual prefabs for each type of
    vehicle in your game and dynamically load them in your scene. Prefabs permit you
    to construct and organize reusable game entities as building blocks.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预制体**：预制体是由组装好的GameObject和组件组成的预制容器。例如，你可以在游戏中为每种类型的车辆创建单独的预制体，并在场景中动态加载它们。预制体允许你将可重用的游戏实体作为构建块进行构建和组织。'
- en: '**Unity Events and Actions**: Unity has a native event system; it''s very similar
    to the C# event system but with extra engine-specific features, such as the ability
    to view and configure them in the Inspector.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Unity事件和动作**：Unity有一个本地的事件系统；它与C#事件系统非常相似，但具有额外的引擎特定功能，例如在检查器中查看和配置它们的能力。'
- en: '**ScriptableObjects**: A class that derives from the `ScriptableObject` base
    class can act as a data container. The other native Unity base class, named MonoBehaviour,
    is used to implement behaviors. Therefore, it''s recommended to use MonoBehaviours
    to contain your logic and ScriptableObjects to contain your data. An instance
    of a `ScriptableObject` can be saved as an asset and is often used for authoring
    workflows. It permits non-programmers to create new variations of a specific type
    of entity without a single line of code.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ScriptableObjects**：从`ScriptableObject`基类派生的类可以作为数据容器使用。另一个名为MonoBehaviour的本地Unity基类用于实现行为。因此，建议使用MonoBehaviours来包含你的逻辑，使用ScriptableObjects来包含你的数据。`ScriptableObject`的实例可以保存为资产，通常用于创作工作流程。它允许非程序员无需一行代码即可创建特定类型实体的新变体。'
- en: 'The following is an example of a simple `ScriptableObject` that permits creating
    new configurable `Sword` instances:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个简单的`ScriptableObject`示例，允许创建新的可配置的`Sword`实例：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Coroutines**: The concept of coroutines is not limited to Unity but is an
    essential tool of the Unity API. The typical behavior of a function is to execute
    itself from start to finish. But a coroutine is a function with the extra ability
    of waiting, timing, and even pausing its execution process. These additional features
    permit us to implement complex behaviors that are not easy to do with conventional
    functions. Coroutines are similar to threads but provide concurrency instead of
    parallelism. The following code example showcases the implementation of a countdown
    timer using coroutines:'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**协程**：协程的概念不仅限于Unity，而且是Unity API的一个基本工具。函数的典型行为是从开始到结束执行自己。但协程是一个具有额外等待、计时甚至暂停其执行过程能力的函数。这些附加功能使我们能够实现用传统函数难以实现的行为。协程类似于线程，但提供的是并发而不是并行。以下代码示例展示了使用协程实现倒计时计时器的实现：'
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As we can see, Unity has some rich but straightforward features that permit
    us to implement systems and organize data. We can't cover in depth each of Unity's
    core features because it's beyond the intended scope of the book. If you feel
    that you need more information about the engine before moving along, I recommend
    reviewing the material linked under the *Further reading* section.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，Unity有一些丰富且直观的功能，使我们能够实现系统和组织数据。由于这些核心功能超出了本书的预期范围，我们无法深入探讨每个功能。如果你在继续前进之前觉得需要更多关于引擎的信息，我建议你回顾*进一步阅读*部分下链接的材料。
- en: Summary
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter is intended to be used as a primer to set up a shared knowledge
    base before moving along to the book's hands-on section. But mastery over the
    features presented in the previous sections is not required to start using design
    patterns in Unity. We will review some of them again in more detail in upcoming
    chapters, this time in a practical context.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 本章旨在作为入门指南，在进入书籍的实践部分之前，建立一个共享知识库。但不需要掌握前几节中介绍的功能，就可以开始使用Unity中的设计模式。我们将在接下来的章节中更详细地回顾其中的一些，这次是在实际的应用场景中。
- en: In the next chapter, we are going to review our first pattern, the infamous
    Singleton. We will use it to implement a Game Manager class responsible for initializing
    the game.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将回顾我们的第一个模式，臭名昭著的单例模式。我们将使用它来实现一个负责初始化游戏的`GameManager`类。
- en: Further reading
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'For more information, you can refer to the following material:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如需更多信息，您可以参考以下材料：
- en: '*Learning C# by Developing Games with Unity 2020 *by Harrison Ferrone'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*通过Unity 2020开发游戏学习C#* 由Harrison Ferrone编写'
- en: '*Unity User Manual* by Unity Technologies: [https://docs.unity3d.com/Manual/index.html](https://docs.unity3d.com/2021.1/Documentation/Manual/UnityManual.html)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Unity用户手册* 由Unity Technologies编写：[https://docs.unity3d.com/Manual/index.html](https://docs.unity3d.com/2021.1/Documentation/Manual/UnityManual.html)'
