- en: '*Chapter 2*: Customizing App Configuration'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This second chapter is about application configuration, how to use it, and how
    to customize the ASP.NET configuration to employ different ways to configure your
    app. Perhaps you already have an existing **Extensible Markup Language** (**XML**)
    configuration or want to share a **YAML Ain't Markup Language** (**YAML**) configuration
    file over different kinds of applications. Sometimes, it also makes sense to read
    configuration values out of a database.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using typed configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration using **Initialization** (**INI**) files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration providers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The topics in this chapter refer to the hosting layer of the ASP.NET Core architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – ASP.NET Core architecture](img/Figure_2.1_B17996.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.1 – ASP.NET Core architecture
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To follow the descriptions in this chapter, you will need to create an ASP.NET
    Core **Model-View-Controller** (**MVC**) application. Open your console, shell,
    or Bash terminal, and change to your working directory. Use the following command
    to create a new MVC application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, open the project in Visual Studio by double-clicking the project file
    or, in **Visual Studio Code** (**VS Code**), by typing the following command in
    the already open console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: All of the code samples in this chapter can be found in the GitHub repository
    for this book at [https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter02](https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter02).
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start by looking at how to configure your various configuration options.
  prefs: []
  type: TYPE_NORMAL
- en: Since ASP.NET Core 2.0, the configuration is hidden in the default configuration
    of `WebHostBuilder` and is no longer part of `Startup.cs`. This helps to keep
    the startup clean and simple.
  prefs: []
  type: TYPE_NORMAL
- en: 'In ASP.NET Core 3.1 up to ASP.NET Core 5.0, the code looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In ASP.NET Core 6.0, Microsoft introduced the minimal `Startup` and adds all
    the configuration in the `Program.cs` file. Let''s see how it looks here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Fortunately, in both versions, you are also able to override the default settings
    to customize the configuration in the way you need it. In both versions, we extend
    `IWebHostBuilder` with the `ConfigureAppConfiguration()` method where the magic
    will happen.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is what the configuration looks like in ASP.NET Core 3.1 and ASP.NET Core
    5.0:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This is what the code looks like when using the minimal API approach. You also
    can use `ConfigureAppConfiguration` to configure the app configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'But there is a much simpler approach, by accessing the `Configuration` property
    of the builder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: When you create a new ASP.NET Core project, you will already have `appsettings.json`
    and `appsettings.Development.json` configured. You can, and should, use these
    configuration files to configure your app; this is the preconfigured way, and
    most ASP.NET Core developers will look for an `appsettings.json` file to configure
    the application. This is absolutely fine and works pretty well.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet shows the encapsulated default configuration to
    read the `appsettings.json` files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This configuration also sets the base path of the application and adds the configuration
    via environment variables.
  prefs: []
  type: TYPE_NORMAL
- en: Whenever you customize the application configuration, you should add the configuration
    via environment variables as a final step, using the `AddEnvironmentVariables()`
    method. The order of the configuration matters and the configuration providers
    that you add later on will override the configurations added previously. Be sure
    that the environment variables always override the configurations that are set
    via a file. This way, you also ensure that the configuration of your application
    on an Azure App Service will be passed to the application as environment variables.
  prefs: []
  type: TYPE_NORMAL
- en: '`IConfigurationBuilder` has a lot of extension methods to add more configurations,
    such as XML or INI configuration files and in-memory configurations. You can find
    additional configuration providers built by the community to read in YAML files,
    database values, and a lot more. In an upcoming section, we will see how to read
    INI files. First, we will look at using typed configurations.'
  prefs: []
  type: TYPE_NORMAL
- en: Using typed configurations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before trying to read INI files, it makes sense for you to see how to use typed
    configurations instead of reading the configuration via `IConfiguration`, key
    by key.
  prefs: []
  type: TYPE_NORMAL
- en: 'To read a typed configuration, you need to define the type to configure. I
    usually create a class called `AppSettings`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a simple `ConfigureServices` method in `Startup.cs` until ASP.NET Core
    5.0:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the minimal API approach, you need to configure the `AppSettings` class,
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This way, the typed configuration also gets registered as a service in the
    **dependency injection** (**DI**) container and can be used everywhere in the
    application. You are able to create different configuration types for each configuration
    section. In most cases, one section should be fine, but sometimes it makes sense
    to divide the settings into different sections. The next snippet shows how to
    use the configuration in an MVC controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '`IOptions<AppSettings>` is a wrapper around our `AppSettings` type, and the
    `Value` property contains the actual instance of `AppSettings`, including the
    values from the configuration file.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To try reading the settings in, the `appsettings.json` file needs to have the
    `AppSettings` section configured, otherwise the values are null or not set. Let''s
    now add the section to the `appsettings.json` file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Next, we'll examine how INI files can be used for configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration using INI files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To also use INI files to configure the application, you will need to add the
    INI configuration inside the `ConfigureAppConfiguration()` method in `Program.cs`,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This code loads the INI files the same way as the **JavaScript Object Notation**
    (**JSON**) configuration files. The first line is a required configuration, and
    the second line is an optional configuration depending on the current runtime
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'The INI file could look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, this file contains a section called `AppSettings` and a property
    called `Bar`.
  prefs: []
  type: TYPE_NORMAL
- en: Earlier, we said that the order of the configuration matters. If you add the
    two lines to configure via INI files after the configuration via JSON files, the
    INI files will override the settings from the JSON files. The `Bar` property gets
    overridden with `"FooBar"` and the `Foo` property stays the same because it will
    not be overridden. Also, the values out of the INI file will be available via
    the typed configuration created previously.
  prefs: []
  type: TYPE_NORMAL
- en: Every other configuration provider will work the same way. Let's now see how
    a configuration provider will look.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration providers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A configuration provider is an implementation of `IConfigurationProvider` that
    is created by a configuration source, which is an implementation of `IConfigurationSource`.
    The configuration provider then reads the data from somewhere and provides it
    via `Dictionary`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add a custom or third-party configuration provider to ASP.NET Core, you
    will need to call the `Add` method on `ConfigurationBuilder` and insert the configuration
    source. This is just an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Usually, you would create an extension method to add the configuration source
    more easily, as illustrated here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: A really detailed concrete example about how to create a custom configuration
    provider has been written by Andrew Lock. You can find this in the *Further reading*
    section of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In most cases, you will not need to add a different configuration provider or
    create your own configuration provider, but it's good to know how to change it,
    just in case. Also, using a typed configuration is a nice way to read and provide
    the settings. In classic ASP.NET, we used a manually created façade to read the
    application settings in a typed manner. Now, this is automatically done by just
    providing a type. This type will be automatically instantiated, filled, and provided,
    via DI.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about customizing DI in ASP.NET Core 6.0, let's have a look at
    the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can refer to the following source for more information:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Creating a custom ConfigurationProvider in ASP.NET Core to parse YAML*, *Andrew
    Lock*: [https://andrewlock.net/creating-a-custom-iconfigurationprovider-in-asp-net-core-to-parse-yaml/](https://andrewlock.net/creating-a-custom-iconfigurationprovider-in-asp-net-core-to-parse-yaml/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
