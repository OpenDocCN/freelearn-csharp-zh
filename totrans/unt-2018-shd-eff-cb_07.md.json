["```cs\nProperties \n{\n _Color (\"Color\", Color) = (1,0,0,1)\n _MainTex (\"Albedo (RGB)\", 2D) = \"white\" {}\n}\n```", "```cs\nSubShader \n{\n Pass \n {\n CGPROGRAM\n\n #pragma vertex vert\n #pragma fragment frag\n\n half4 _Color;\n sampler2D _MainTex;\n\n struct vertInput \n {\n float4 pos : POSITION;\n float2 texcoord : TEXCOORD0;\n };\n\n struct vertOutput \n {\n float4 pos : SV_POSITION;\n float2 texcoord : TEXCOORD0;\n };\n\n vertOutput vert(vertInput input) \n {\n vertOutput o;\n o.pos = mul(UNITY_MATRIX_MVP, input.pos);\n o.texcoord = input.texcoord;\n return o;\n }\n\n half4 frag(vertOutput output) : COLOR\n {\n half4 mainColour = tex2D(_MainTex, output.texcoord);\n return mainColour * _Color;\n }\n\n ENDCG\n }\n}\nFallBack \"Diffuse\"\n```", "```cs\n#pragma vertex vert\n#pragma fragment frag\n```", "```cs\nstruct vertInput \n{\n float4 pos : POSITION;\n float2 texcoord : TEXCOORD0;\n};\n```", "```cs\nvertOutput o;\no.pos = UnityObjectToClipPos(input.pos);\n```", "```cs\no.texcoord = input.texcoord;\n```", "```cs\nstruct vertOutput \n{\n  float4 pos : SV_POSITION;\n  float2 texcoord : TEXCOORD0;\n};\n```", "```cs\nTags{ \"Queue\" = \"Transparent\" }\n```", "```cs\nGrabPass{ }\n```", "```cs\nPass \n{\n  CGPROGRAM\n  #pragma vertex vert\n  #pragma fragment frag\n\n  #include \"UnityCG.cginc\"\n  sampler2D _GrabTexture;\n\n  struct vertInput \n  {\n    float4 vertex : POSITION;\n  };\n\n  struct vertOutput \n  {\n    float4 vertex : POSITION;\n    float4 uvgrab : TEXCOORD1;\n  };\n\n  // Vertex function\n  vertOutput vert(vertInput v) \n  {\n    vertOutput o;\n    o.vertex = mul(UNITY_MATRIX_MVP, v.vertex);\n    o.uvgrab = ComputeGrabScreenPos(o.vertex);\n    return o;\n  }\n  // Fragment function\n  half4 frag(vertOutput i) : COLOR \n  {\n    fixed4 col = tex2Dproj(_GrabTexture, UNITY_PROJ_COORD(i.uvgrab));\n    return col + half4(0.5,0,0,0);\n  }\n  ENDCG\n}\n```", "```cs\nsampler2D _GrabTexture;\n```", "```cs\nfixed4 col = tex2Dproj(_GrabTexture, UNITY_PROJ_COORD(i.uvgrab));\n```", "```cs\nGrabPass {\"TextureName\"}\n```", "```cs\nProperties \n{\n  _MainTex(\"Base (RGB) Trans (A)\", 2D) = \"white\" {}\n  _Colour(\"Colour\", Color) = (1,1,1,1)\n  _BumpMap(\"Noise text\", 2D) = \"bump\" {}\n  _Magnitude(\"Magnitude\", Range(0,1)) = 0.05\n}\n```", "```cs\nsampler2D _MainTex;\nfixed4 _Colour;\n\nsampler2D _BumpMap;\nfloat _Magnitude;\n```", "```cs\nfloat2 texcoord : TEXCOORD0;\n```", "```cs\n// Vertex function\nvertOutput vert(vertInput v) \n{\n  vertOutput o;\n  o.vertex = UnityObjectToClipPos(v.vertex);\n  o.uvgrab = ComputeGrabScreenPos(o.vertex);\n  o.texcoord = v.texcoord;\n  return o;\n}\n```", "```cs\nhalf4 frag(vertOutput i) : COLOR \n{\n  half4 mainColour = tex2D(_MainTex, i.texcoord);\n  half4 bump = tex2D(_BumpMap, i.texcoord);\n  half2 distortion = UnpackNormal(bump).rg;\n\n  i.uvgrab.xy += distortion * _Magnitude;\n\n  fixed4 col = tex2Dproj(_GrabTexture, UNITY_PROJ_COORD(i.uvgrab));\n  return col * mainColour * _Colour;\n}\n```", "```cs\nTags{ \"Queue\" = \"Transparent\" \"IgnoreProjector\" = \"True\" \"RenderType\" =\n  \"Opaque\" }\n```", "```cs\nhalf4 bump = tex2D(_BumpMap, i.texcoord);\nhalf2 distortion = UnpackNormal(bump).rg;\n\ni.uvgrab.xy += distortion * _Magnitude;\n```", "```cs\n_NoiseTex(\"Noise text\", 2D) = \"white\" {}\n_Colour (\"Colour\", Color) = (1,1,1,1)\n_Period (\"Period\", Range(0,50)) = 1\n_Magnitude (\"Magnitude\", Range(0,0.5)) = 0.05\n_Scale (\"Scale\", Range(0,10)) = 1\n```", "```cs\nsampler2D _NoiseTex;\nfixed4 _Colour;\n\nfloat _Period;\nfloat _Magnitude;\nfloat _Scale;\n```", "```cs\nstruct vertInput \n{\n  float4 vertex : POSITION;\n  fixed4 color : COLOR;\n  float2 texcoord : TEXCOORD0;\n};\n\nstruct vertOutput \n{\n  float4 vertex : POSITION;\n  fixed4 color : COLOR;\n  float2 texcoord : TEXCOORD0;\n  float4 worldPos : TEXCOORD1;\n  float4 uvgrab : TEXCOORD2;\n};\n```", "```cs\n// Vertex function\nvertOutput vert(vertInput v) \n{\n  vertOutput o;\n  o.vertex = UnityObjectToClipPos(v.vertex);\n  o.color = v.color;\n  o.texcoord = v.texcoord;\n\n  o.worldPos = mul(unity_ObjectToWorld, v.vertex);\n  o.uvgrab = ComputeGrabScreenPos(o.vertex);\n\n  return o;\n}\n```", "```cs\nfixed4 frag (vertOutput i) : COLOR \n{\n  float sinT = sin(_Time.w / _Period);\n\n  float distX = tex2D(_NoiseTex, i.worldPos.xy / _Scale +                 float2(sinT,\n    0) ).r - 0.5;\n  float distY = tex2D(_NoiseTex, i.worldPos.xy / _Scale + float2(0,\n    sinT) ).r - 0.5;\n\n  float2 distortion = float2(distX, distY);\n  i.uvgrab.xy += distortion * _Magnitude;\n  fixed4 col = tex2Dproj( _GrabTexture, UNITY_PROJ_COORD(i.uvgrab));\n  return col * _Colour;\n}\n```", "```cs\nfloat2 distortion = float2( sin(_Time.w/_Period), \n  sin(_Time.w/_Period) ) â€“ 0.5;\n```", "```cs\nfloat sinT = sin(_Time.w / _Period);\nfloat2 distortion = float2( \n    tex2D(_NoiseTex, i.texcoord / _Scale + float2(sinT, 0) ).r - 0.5,\n    tex2D(_NoiseTex, i.texcoord / _Scale + float2(0, sinT) ).r - 0.5\n);\n```", "```cs\nfloat sinT = sin(_Time.w / _Period);\nfloat2 distortion = float2( \n    tex2D(_NoiseTex, i.worldPos.xy / _Scale + float2(sinT, 0) ).r - 0.5,\n    tex2D(_NoiseTex, i.worldPos.xy / _Scale + float2(0, sinT) ).r - 0.5\n);\ni.uvgrab.xy += distortion * _Magnitude;\n```", "```cs\nfloat sinT = sin(_Time.w / _Period);\n\nfloat distX = tex2D(_NoiseTex, i.worldPos.xy / _Scale + \n  float2(sinT, 0) ).r - 0.5;\nfloat distY = tex2D(_NoiseTex, i.worldPos.xy / _Scale + \n  float2(0, sinT) ).r - 0.5;\n\nfloat2 distortion = float2(distX, distY);\ni.uvgrab.xy += distortion * _Magnitude;\n```"]