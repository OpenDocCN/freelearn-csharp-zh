- en: '14'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '14'
- en: Deploying to Production
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署到生产环境
- en: In this chapter, we will take a look at the different options we have when deploying
    our Blazor application to production. Since there are many different options,
    going through them all would be a book all by itself.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨我们在将Blazor应用程序部署到生产环境时拥有的不同选项。由于选项很多，详细说明它们将是一本单独的书。
- en: We won’t go into detail but rather cover the different things we need to think
    about so that we can deploy to any provider.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会深入探讨，而是会涵盖我们需要考虑的不同事项，以便我们可以部署到任何提供商。
- en: In the end, deploying is what we need to do to make use of what we build.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，部署是我们为了利用我们所构建的内容而需要做的事情。
- en: 'In this chapter, we will cover the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Continuous delivery options
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续交付选项
- en: Hosting options
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机选项
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter is about general deployment, so we won’t need any code.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是关于一般部署的，因此我们不需要任何代码。
- en: Continuous delivery options
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续交付选项
- en: 'When deploying anything to production, we should think about making sure to
    remove uncertain factors. For example, if we are deploying from our own machine,
    how do we know it’s the latest version? How do we know that our teammates didn’t
    recently solve a problem and we don’t have the fix in our branch? To be honest,
    how do we even know that the version in source control is the same in production,
    or if the version in production even exists in source control? You know the old
    saying: “Friends don’t let friends right-click and publish” (to production, that
    is)?'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当将任何内容部署到生产环境时，我们应该考虑确保移除不确定因素。例如，如果我们是从自己的机器上部署，我们如何知道它是最新版本？我们如何知道我们的队友最近没有解决问题，而我们分支中没有修复？坦白说，我们甚至不知道源控制中的版本是否与生产中的版本相同，或者生产中的版本是否存在于源控制中？你知道那句老话：“朋友不会让朋友右键点击并发布”（到生产环境中，那就是）？
- en: This is where **Continuous Integration** and **Continuous Delivery/Deployment**
    (**CI/CD**) come into the picture. We make sure that something else makes the
    deployment to production. Entire books could be written on deployment, so we won’t
    go that deep into the subject.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是**持续集成**和**持续交付/部署**（**CI/CD**）出现的地方。我们确保有其他东西将部署到生产环境中。关于部署可以写整本书，所以我们不会深入这个主题。
- en: GitHub Actions and Azure DevOps (or Azure Pipelines) are two products from Microsoft
    for CI/CD. There are many more, such as Jenkins, TeamCity, and GitLab – the list
    is long. If the CI/CD system we are currently using supports deploying ASP.NET,
    it will be able to handle Blazor because, in the end, Blazor is just an ASP.NET
    site.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Actions和Azure DevOps（或Azure Pipelines）是微软的两个CI/CD产品。还有很多其他产品，如Jenkins、TeamCity和GitLab——列表很长。如果我们目前使用的CI/CD系统支持部署ASP.NET，它将能够处理Blazor，因为最终，Blazor只是一个ASP.NET网站。
- en: If we have tests (which we should have), we should also make sure to set up
    tests as part of our CI/CD pipeline. The nice thing is that we don’t need to add
    any specific hardware to test our components; it will work if our CI/CD pipeline
    can run unit tests.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有测试（我们应该有），我们还应该确保将测试设置为CI/CD管道的一部分。好事是，我们不需要添加任何特定的硬件来测试我们的组件；如果我们的CI/CD管道可以运行单元测试，它就会工作。
- en: Since Blazor is ASP.NET, nothing is stopping us from going even further with
    the automated testing of our site.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Blazor是ASP.NET，我们没有任何阻止我们进一步进行网站自动化测试的理由。
- en: There is also something called **wasm-tools**, which we will take a look at
    in *Chapter 16*, *Going Deeper into WebAssembly*.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一种叫做**wasm-tools**的东西，我们将在第16章“深入WebAssembly”中探讨。
- en: Hosting options
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主机选项
- en: When it comes to hosting Blazor, there are many options. Any cloud service that
    can host ASP.NET Core sites should be able to run Blazor without any problems.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到托管Blazor时，有许多选项。任何可以托管ASP.NET Core站点的云服务都应该能够无任何问题地运行Blazor。
- en: We need to think about some things, so let’s go through the options one by one.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要考虑一些事情，让我们逐一探讨选项。
- en: Hosting Blazor Server/InteractiveServer
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 托管Blazor Server/InteractiveServer
- en: If the cloud provider can enable/disable WebSockets, we want to enable them
    since that’s the protocol used by SignalR.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果云提供商可以启用/禁用WebSockets，我们希望启用它们，因为SignalR使用的就是该协议。
- en: Sometimes, the cloud provider may support .NET Core 3.x but not .NET 8 out of
    the box. But don’t worry; by making sure to publish our application with the deployment
    mode as self-contained, we make sure the deployment also adds any files necessary
    to run the project (this might not be true for all hosting providers).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，云服务提供商可能支持.NET Core 3.x，但不支持.NET 8。但不用担心；通过确保以自包含模式发布我们的应用程序，我们确保部署还添加了运行项目所需的任何文件（这可能不是所有托管提供商都适用）。
- en: This is also a good thing to do to make sure that we are running on the exact
    framework version we expect.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这也是确保我们运行在期望的确切框架版本上的一个好方法。
- en: Hosting InteractiveWebAssembly
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行交互式WebAssembly
- en: InteractiveWebAssembly is using a .NET Core backend (like we do for the blog),
    we are hosting a .NET Core website, so the same rules apply as with hosting Blazor
    Server. For our blog, we also added SignalR, so we need WebSockets enabled as
    well.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 交互式WebAssembly使用.NET Core后端（就像我们为博客所做的那样），我们托管了一个.NET Core网站，因此托管Blazor服务器的规则同样适用。对于我们的博客，我们还添加了SignalR，因此我们还需要启用WebSocket。
- en: Hosting Blazor WebAssembly Standalone
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 托管Blazor WebAssembly独立版本
- en: If we are using the Blazor WebAssembly Standalone template, we don’t need to
    think about .NET Core hosting. We can host our application in Azure Static Web
    Apps or even GitHub Pages. This is one of the upsides of doing a Blazor WebAssembly
    Standalone site.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用Blazor WebAssembly独立模板，我们不需要考虑.NET Core托管。我们可以在Azure Static Web Apps或GitHub
    Pages上托管我们的应用程序。这是做Blazor WebAssembly独立站点的优点之一。
- en: Hosting on IIS
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在IIS上托管
- en: We can also host our application on **Internet Information Server** (**IIS**).
    Install the hosting bundle, and it will also make sure to include the ASP.NET
    Core IIS module if installed on a machine with IIS.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在**互联网信息服务器**（**IIS**）上托管我们的应用程序。安装托管包，如果机器上安装了IIS，它还会确保包含ASP.NET Core
    IIS模块。
- en: You need to make sure to enable the WebSocket protocol on the server.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要确保在服务器上启用WebSocket协议。
- en: We currently run our sites on IIS and use Azure DevOps to deploy our sites.
    Since we are using Blazor Server, the downtime is very evident. As soon as the
    web loses the SignalR connection, the site will display a reconnect message.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们目前在我们的网站上运行IIS，并使用Azure DevOps来部署我们的网站。由于我们使用Blazor服务器，停机时间非常明显。一旦Web丢失了SignalR连接，网站将显示重新连接的消息。
- en: For the sites we are using, there are about 8 to 10 seconds of downtime when
    deploying a new version, which is pretty quick.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们使用的网站，在部署新版本时大约有8到10秒的停机时间，这相当快。
- en: Summary
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we talked about why we should use CI/CD since it makes a huge
    difference in ensuring the quality of the application. We looked at some of the
    things we need to do to run our Blazor app on any cloud provider supporting .NET
    8.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了为什么我们应该使用CI/CD，因为它在确保应用程序质量方面有很大差异。我们查看了一些我们需要做的事情，以便在任何支持.NET 8的云服务提供商上运行我们的Blazor应用程序。
- en: Deploying is perhaps the most important step when it comes to an application.
    Without deploying our application, it’s just code. With the things we mentioned
    in this chapter, such as CI/CD, hosting, and deployment, we are now ready to deploy
    the code.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 部署可能是应用程序中最重要的一步。如果没有部署我们的应用程序，它就只是代码。在本章中提到的诸如CI/CD、托管和部署等事项，我们现在已经准备好部署代码。
- en: In the next chapter, we will dig deeper into how we can port a current site,
    use Blazor with other technologies, or use other technologies with Blazor.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将更深入地探讨如何将现有网站移植，使用Blazor与其他技术结合，或者使用其他技术与Blazor结合。
