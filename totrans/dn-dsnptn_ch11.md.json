["```cs\n\n    public interface IObserver<T> \n    { \n      void OnCompleted(); \n      void OnError(Exception exception); \n      void OnNext(T value); \n    }  \n\n    public interface IObservable<T> \n    { \n      IDisposable Subscribe(IObserver<T> observer); \n    } \n\n```", "```cs\n    static void Main(string[] args) \n    { \n      int[] number_array = new int[] { 1,2,3,4,5,6,8}; \n      IEnumerable<int> number_sequence = number_array; \n      foreach (var n in number_sequence) \n        if (n % 2 == 0) \n          Console.WriteLine(n); \n    } \n\n```", "```cs\n    class EmptyDisposable : IDisposable \n    { \n      internal Action action {get;  set;} \n      void IDisposable.Dispose() \n      { this.action(); } \n    } \n\n    class EvenNumberObservable : IObservable<int> \n    { \n      public EvenNumberObservable(IEnumerable<int> numbers) \n      { \n        this._numbers = numbers; \n      } \n\n      private IEnumerable<int> _numbers; \n\n      public IDisposable Subscribe(IObserver<int> observer) \n      { \n        foreach(int number in _numbers) \n        { \n          if (number%2 == 0 ) \n          observer.OnNext(number); \n        } \n        observer.OnCompleted(); \n\n        return new EmptyDisposable { action = () => { ;  } };  \n      } \n    } \n\n    class SimpleObserver : IObserver<int> \n    { \n      public void OnNext(int value) {  Console.WriteLine(value);} \n      public void OnCompleted() { Console.WriteLine(\"Completed\"); } \n      public void OnError(Exception ex){ \n      Console.WriteLine(\"An Error Encountered\"); \n      throw ex; \n    } \n  }  \n\n```", "```cs\n    static void Main(string[] args) \n    { \n      new EvenNumberObservable( \n      new[] { 1,2, 3, 4,6,7,8 }) \n      .Subscribe(new SimpleObserver()); \n      Console.ReadLine(); \n    } \n\n```", "```cs\n    void Main() \n    { \n      var result = \n        from i in Observable.Range(1, 100) \n        from j in Observable.Range(1, 100) \n        from k in Observable.Range(1, 100) \n        where k * k == i * i + j * j \n        select new { a = i, b = j, c = k };   \n\n      // A Subscriber with \n      // A callback (Lambda) which prints value, \n      // A callback for Exception \n      // A callback for Completion  \n\n      IDisposable subscription = result.Subscribe( \n      x => Console.WriteLine(\"OnNext: {0}\", x),  \n      ex => Console.WriteLine(\"OnError: {0}\", ex.Message), \n      () => Console.WriteLine(\"OnCompleted\")); \n    } \n\n```", "```cs\n    static void Main()  \n    { \n      var mylabel = new Label(); \n      var myform = new Form { Controls = { mylabel } }; \n\n      IObservable<EventPattern<MouseEventArgs>>  \n      mousemove =  \n      Observable. \n      FromEventPattern<MouseEventArgs>(myform, \"MouseMove\"); \n\n      mousemove.Subscribe( \n        (evt)=>{mylabel.Text = evt.EventArgs.X.ToString();}, \n        ()=>{}); \n\n      Application.Run(myform); \n    } \n\n```", "```cs\n            var evenNumbers = Observable.Range(0, 10) \n            .Where(i => i % 2 == 0) \n            .Subscribe(Console.WriteLine); \n\n    ```", "```cs\n    try { \n      outstream =  f(g(h(immutablestream))); \n    } \n    catch {} \n\n```"]