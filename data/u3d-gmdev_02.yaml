- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Design and Prototype
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计和原型
- en: 'Now that we have worked through all of the primary lingo of game development
    and have a stronger understanding of 3D spaces, we need to talk through the game
    itself. In this book, we are building a vertical slice—a fully-functional portion
    of the game. For this chapter, we’re going to go into the beginnings of getting
    the project going. The main topics include:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了游戏开发的全部主要术语，并对 3D 空间有了更深入的理解，我们需要讨论游戏本身。在这本书中，我们正在构建一个垂直切片——游戏的一个完全功能的部分。对于这一章，我们将进入项目启动的初期。主要话题包括：
- en: Game design fundamentals
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏设计基础
- en: Your first Unity project
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的第一个 Unity 项目
- en: Prototyping
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原型设计
- en: To begin, let’s start from the top and go over the game design fundamentals
    in greater detail. Take your time reading through this portion as it’s dense with
    knowledge nuggets that will take your game to the next level.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们从顶部开始，更详细地讨论游戏设计基础。花点时间阅读这部分内容，因为它充满了知识要点，将帮助你将游戏提升到下一个层次。
- en: Game design fundamentals
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏设计基础
- en: Game design is a young art. With any art, there are some very basic fundamentals
    that must be thought about before you can explore. We will go through ways in
    which developers like to capture their thoughts in a “document.” Then, we will
    start with a micro-lecture on how each decision should be deliberately as granular
    as possible. Then, we will build on those decisions with iteration. Finally, we
    will go through an explanation of concepting. Let’s get started with a discussion
    of design documents.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏设计是一门年轻的技艺。在艺术中，有一些非常基本的原则必须在探索之前考虑。我们将探讨开发者如何喜欢在“文档”中捕捉他们的想法。然后，我们将从如何尽可能细致地故意做出每个决策的微观讲座开始。然后，我们将通过迭代构建这些决策。最后，我们将解释概念化。让我们从设计文档的讨论开始。
- en: Game design document
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 游戏设计文档
- en: There was a time where our team had some downtime between our development sprints
    in which we wanted to all jump on board with a new tool. Our project management
    was using the Atlassian stack (*Jira*, *Confluence*, etc.), but we wanted to see
    what would be better, so we looked through several different software. This included
    *Hack N’ Plan*, *Trello*, *Notion*, and several other tools. We used all these
    tools to see which ones would end up getting used after our break. In the end,
    we found out we liked *Jira* for the project management and tasking, but for everything
    else we stuck with *Miro*. *Miro* ended up being our concepting boards and design/workflow
    brainstorming tool. This happened organically through other tools just not being
    used by the majority of the team.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 曾经有一段时间，我们的团队在开发冲刺之间有一段空闲时间，我们所有人都想尝试一个新的工具。我们的项目管理正在使用 Atlassian 套件（*Jira*，*Confluence*
    等），但我们想看看还有什么更好的选择，所以我们查阅了多种不同的软件。这包括 *Hack N’ Plan*，*Trello*，*Notion* 和其他一些工具。我们使用所有这些工具来查看哪些会在我们的休息之后被使用。最终，我们发现我们喜欢
    *Jira* 用于项目管理任务，但对于其他所有事情，我们坚持使用 *Miro*。*Miro* 最终成为了我们的概念板和设计/工作流程头脑风暴工具。这是通过其他工具没有被团队大多数成员使用而自然发生的。
- en: No matter how small it seems your game is going to be, there will be some sort
    of documentation that will need to take place. There are strong organizational
    reasons behind making a document, but the strongest reason is that when we put
    something down on paper or draw it out in a collaborative space, we tend to take
    time to more seriously consider its merits. This pause is sometimes referred to
    as heuristic design. This can be done alone or in collaboration.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你的游戏看起来有多小，都可能会有某种形式的文档需要制作。制作文档有很强的组织原因，但最强大的原因是当我们把某事写在纸上或在协作空间中绘制出来时，我们往往会花更多的时间来认真考虑其优点。这种暂停有时被称为启发式设计。这可以单独完成或协作完成。
- en: Some designers wish to draw up a beautifully written, well-outlined document
    in a word processor or an online collaboration tool. This gives a neat outline
    and the ability to write each detail exactly. When the scope of the game is going
    to be larger, this works out well. The writers tend to be technical writers and
    well-versed in the art of documenting processes. The approach is to have a single
    source of truth for any part of the game that anyone can refer to while developing,
    but to go to this extent may not be the best method for you or your team.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一些设计师希望在文字处理软件或在线协作工具中绘制一份书写精美、结构清晰的文档。这提供了一个整洁的概要，并能够精确地写出每个细节。当游戏范围较大时，这种方法效果很好。作者往往是技术作家，精通文档化流程的艺术。这种方法是确保游戏的任何部分都有一个单一的真实来源，任何人都可以在开发过程中参考，但这样做可能不是对你或你的团队最好的方法。
- en: Another option for game design documents is done through collaborative brainstorming
    software. This allows users to work together to make flowcharts, draw, and outline
    in a creative manner. This manner is the direct opposite of the curated form of
    the aforementioned written document approach, but serves a different need. The
    creative form tends to be more intimate and art-focused. Some pre-concept art
    sketches are done, flowcharts are drawn up quickly to draw out questions about
    the gameplay elements, and ideas can be swiftly drawn upon and tossed away or
    kept. This way of designing wouldn’t work well for a large-scale team as there
    is no real organization of sorts. New members would have a hard time onboarding
    in these situations.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种制作游戏设计文档的选项是通过协作头脑风暴软件。这允许用户以创造性的方式一起工作，制作流程图、绘图和概要。这种方式是上述书面文档方法精心策划形式的直接对立面，但满足不同的需求。创造性的形式往往更加亲密和艺术化。一些预概念草图被绘制出来，快速绘制流程图以提出关于游戏元素的问题，想法可以迅速被采纳、丢弃或保留。这种方式的设计对于大型团队来说可能不太适用，因为没有真正的组织结构。新成员在这些情况下可能会有困难融入。
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](img/B17304_02_01.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![计算机截图，描述自动生成，中等置信度](img/B17304_02_01.png)'
- en: 'Figure 2.1: Example of a flowchart'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.1：流程图示例
- en: 'Neither of these options is the magic pill to make a game design document,
    but rest assured, your team needs to have some sort of document to keep your ideas
    written down. Ideas are fleeting on the mind and some of the best ideas slip into
    the ether if they aren’t written down to keep. Experiment with your team to find
    the option that best suits them. There is a saying in design groups: “The best
    tool is the tool your team will actually use”.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种选择都不是制作游戏设计文档的灵丹妙药，但请放心，你的团队需要某种形式的文档来记录你的想法。想法在脑海中是短暂的，一些最好的想法如果没有被记录下来保存，就会消失在虚空中。与你的团队进行实验，找到最适合他们的选项。设计团队中有一句俗语：“最好的工具是团队真正会使用的工具”。
- en: We’ve gone over quite a few options for game design documents and shown that
    they have pros and cons. Even though there isn’t a perfect way right off the bat,
    a great starting point would be to start with a more visual and collaborative
    approach. If you are together, this could be a dry erase board with sticky notes.
    The dry erase board allows for non-permanent thoughts, while the sticky notes
    would be tasks that need completing. Place them on the left side for “need to
    be completed,” and move them to the right side when they are complete.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了许多游戏设计文档的选项，并展示了它们的优缺点。尽管一开始并没有完美的方法，但一个很好的起点是从更视觉化和协作的方法开始。如果你在一起，这可能是一个干擦板和便利贴。干擦板允许非永久性的思考，而便利贴则是需要完成的任务。将它们放在左侧表示“需要完成”，当它们完成时，将它们移动到右侧。
- en: I recommend you spend some time over in our GitHub repo created for this book.
    I’ve added a `GDD images` folder in there for you to take a look at a large scale
    of examples to see what we’ll work through in the next set of chapters.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议你花些时间在我们的GitHub仓库中查看我们为这本书创建的仓库。我在那里为你添加了一个`GDD图像`文件夹，你可以查看大量示例，看看我们将在下一组章节中处理的内容。
- en: '[https://github.com/PacktPublishing/Unity-3D-Game-Development](https://github.com/PacktPublishing/Unity-3D-Game-Development)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Unity-3D-Game-Development](https://github.com/PacktPublishing/Unity-3D-Game-Development)'
- en: Now that we have started documenting our game design, we need to take our thoughts
    and make deliberate choices with them to make them concrete.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经开始记录我们的游戏设计，我们需要对我们的想法进行深思熟虑的选择，使它们具体化。
- en: Deliberate decisions
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 故意决策
- en: 'Although this part of the chapter may be slightly shorter than others, take
    this section to heart: being a designer means building an immersive world that
    makes sense, even when it doesn’t make sense. The player subconsciously makes
    observations at an alarming rate. The more that the player can see non-congruent
    pieces to the puzzle that is the game environment or character, the more immersion
    is broken. The best way to fix any immersion-breaking issue is deliberate decisions.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管本章的这一部分可能比其他部分略短一些，但请将这一节铭记在心：成为一名设计师意味着构建一个即使在没有意义时也具有沉浸感的虚拟世界。玩家会无意识地以惊人的速度进行观察。玩家能看到的与游戏环境或角色不协调的拼图碎片越多，沉浸感就会越被破坏。解决任何破坏沉浸感问题的最佳方式是做出深思熟虑的决定。
- en: To give a very simple explanation of this, take the example of door handles.
    You’ve seen them your whole life and used them intuitively. In fact, when you
    have to deal with a poorly designed door handle is when your actual, real-life
    immersion breaking happens. If you have ever grabbed a handle to a door and tried
    to pull inward, only to find out the door was designed to be pushed, you’ve encountered
    this issue. If the door was designed to only be allowed to move in one direction,
    the correct design for an exit is a flat panel where the door handle would be.
    This immediately implies “push.”
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了给出一个非常简单的解释，以门把手为例。你一生中见过它们，并本能地使用它们。事实上，当你不得不处理一个设计糟糕的门把手时，你真正的、现实生活中的沉浸感就会被破坏。如果你曾经抓住门把手试图拉门，却发现门是设计成要推的，你就遇到了这个问题。如果门只允许向一个方向移动，那么出口的正确设计就是一个门把手所在位置的平面板。这立即暗示了“推”。
- en: Every level, mesh, texture, concept, and feeling needs to be deliberately thought
    about with an attempt to implement. Only after you have a strong reason to place
    something in a certain way without giving in to clichés is when you then can explore
    other unique aspects to build something truly unique.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 每个级别、网格、纹理、概念和感觉都需要经过深思熟虑并尝试实施。只有在你有充分的理由将某物放置在特定位置而不屈服于陈词滥调时，你才能探索其他独特的方面，从而构建真正独特的东西。
- en: The project you will be making and playing with in this book has undergone prolonged
    and deliberate thought. To emphasize this, in each section, you will see a set
    of questions that are answered in as much detail as needed in a concise manner.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，你将制作并与之互动的项目已经经过了长时间的深思熟虑。为了强调这一点，在每个部分，你都会看到一系列问题，这些问题将以简洁的方式尽可能详细地回答。
- en: Iterative production
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 迭代生产
- en: Game development has an interesting need for immersion to be at the forefront
    of play. To get this immersion as complete as we can get it, the development team
    needs to continuously ask whether the direction it is going in works well. Very
    often, the game that you began developing is not what you will ultimately end
    up with. This cycle is called an iterative design or production.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏开发对沉浸感的需求非常有趣，需要将其置于游戏体验的前沿。为了使沉浸感尽可能完整，开发团队需要不断询问当前的方向是否运作良好。非常常见的情况是，你开始开发的游戏最终可能并非你所期望的那样。这个周期被称为迭代设计或生产。
- en: There are a multitude of patterns you can use when you undertake iterative design.
    The approach that will be described here is not the only definitive approach to
    completing a design, but it is a good starting point from where your team can
    branch off as it sees fit.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当你进行迭代设计时，你可以使用多种模式。这里将要描述的方法不是完成设计的唯一确定方法，但它是一个良好的起点，你的团队可以从这里根据需要分支发展。
- en: Iteration needs to happen often and early for a game to grow in terms of how
    easy it is to understand. There is a concept called **MVP**, or **Minimum Viable
    Product**, where game developers make the minimum amount of gameplay elements
    required to give the game to testers. This should take very little time and the
    feedback is invaluable. When you hand this off to the testers, there will be feedback
    that you and your team could not have seen as you are very close to the product.
    Make sure to listen to the feedback carefully with an open mind as their experience
    could be common among your players. We’re working toward a deliberately designed
    experience for as many players as possible. This feedback forces you and your
    team to iterate on the design, and possibly cut or add game mechanics, to respond
    to the main testing feedback.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏要想在易于理解方面得到成长，迭代需要频繁且尽早进行。有一个概念叫做**MVP**，即**最小可行产品**，游戏开发者制作出所需的最小游戏元素以供测试者测试。这应该花费很少的时间，并且反馈是无价的。当你将这个版本交给测试者时，你会得到一些反馈，这些反馈是你和你的团队无法看到的，因为你们非常接近产品。确保以开放的心态仔细倾听反馈，因为他们的经验可能在你的玩家中很常见。我们正在努力为尽可能多的玩家设计一个精心设计的体验。这种反馈迫使你和你的团队对设计进行迭代，并可能裁剪或添加游戏机制，以应对主要的测试反馈。
- en: '![A picture containing text  Description automatically generated](img/B17304_02_02.png)![A
    picture containing indoor, plant, decorated  Description automatically generated](img/B17304_02_03.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![包含文字的图片  自动生成的描述](img/B17304_02_02.png)![包含室内、植物、装饰的图片  自动生成的描述](img/B17304_02_03.png)'
- en: 'Figure 2.2 a, b: Examples of iterations in level design'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.2 a, b：关卡设计中迭代的示例
- en: After having iterations resolve major holes in your design, you then move into
    a vertical slice (which will be covered in the *Vertical slice* section of this
    chapter) of the game. This should be an iteration where you are comfortable with
    the basics of the movement and primary game mechanics. Your team will want to
    make a full game loop from start to finish with a single level that houses a win
    and lose condition. Then, you guessed it, test again, but this time with new testers
    that have never seen this game. Ask similar questions and some new ones that have
    surfaced during internal playtesting.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在迭代解决了你设计中的主要漏洞之后，你然后进入游戏的垂直切片（将在本章的**垂直切片**部分中介绍）。这应该是一个你对自己在运动和主要游戏机制方面的基本感到舒适的迭代。你的团队将希望从开始到结束制作一个完整的游戏循环，使用一个包含胜利和失败条件的单个关卡。然后，你猜对了，再次测试，但这次是与从未见过这个游戏的新测试者。提出类似的问题，以及在内测期间出现的一些新问题。
- en: 'The loop for development should seem repetitive, and it is:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 开发循环应该看起来是重复的，它确实是这样的：
- en: Think and test
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 思考和测试
- en: Create and test
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建和测试
- en: Update and test
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新和测试
- en: Then, continue this approach until you are at number of iterations until it’s
    a shippable product. The most important portion of each step is the testing. Make
    sure to take feedback from testing as strong indications of where improvement
    is required. We will begin this cycle with conceptualization.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，继续这种做法，直到你达到可以发布的产品的迭代次数。每个步骤最重要的部分是测试。确保将测试反馈作为改进所需的地方的强烈指示。我们将从这个概念化阶段开始这个周期。
- en: Concepting
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构思
- en: You need to make a game and you have a group ready to go. You are comfortable
    with deliberately making granular decisions and know the iterative process. Now
    you need to get a concept started.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要制作一个游戏，并且你已经有一个准备就绪的团队。你习惯于有意识地做出细致的决策，并且了解迭代过程。现在你需要开始一个概念。
- en: The first step to getting a project going is to explore what emotion you and
    your team want your players to experience. With our art form being so young and
    malleable, we can pursue this emotion any way we like. This is the power of the
    game developer. Once you know what emotions you are focused on as regards the
    experience players will have, start thinking about how you can create it as a
    gameplay experience.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 开始一个项目的第一步是探索你和你的团队希望玩家体验到的情感。鉴于我们的艺术形式如此年轻且可塑，我们可以以任何我们喜欢的方式追求这种情感。这是游戏开发者的力量。一旦你知道你关注的情感是关于玩家将体验到的体验，就开始思考你如何将其作为游戏体验来创造。
- en: If the emotion is fear, you could have the player deal with spaces that are
    dark, with just a flashlight as their primary defense tool. This may lead you
    to explore sound design as your development focus since vision will not be the
    primary experience tool.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果情感是恐惧，你可以让玩家处理黑暗的空间，只有手电筒作为他们的主要防御工具。这可能会让你探索声音设计作为你的开发重点，因为视觉将不会是主要体验工具。
- en: If the emotion is grieving, then you may work through a narrative focus, where
    you play a child who has lost a family member and the players work through a narrative-driven
    gameplay in a dream world. This pushes storytelling and pacing, with a tight understanding
    of color theory as well as the stages of grief through a child’s perspective.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果情绪是悲伤，那么你可能可以通过叙事焦点来处理，在这个焦点中，你扮演一个失去家庭成员的孩子，玩家们在一个梦境世界中通过叙事驱动的游戏玩法来处理故事。这推动了叙事和节奏，通过儿童视角对色彩理论和悲伤阶段有紧密的理解。
- en: We could go on for a while regarding concepts as there is an infinite number
    of scenarios. Choose what your primary goal is and then work toward it. After
    this, you may want to put some of these ideas to paper to get an idea of what
    the feelings of the immersion will be, from an artistic viewpoint. This could
    potentially be silhouettes of character concepts. It could also be architectural
    designs.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 关于概念，我们可以继续讨论，因为存在无限多的场景。选择你的主要目标，然后朝着这个目标努力。在此之后，你可能想要将这些想法写下来，以了解沉浸感的感觉，从艺术的角度来看。这可能是角色概念轮廓。也可能是建筑设计。
- en: It could also be a collection of pictures you’ve saved that gave you a feeling
    of the emotion you want to evoke that you can draw ideas from.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这也可能是一组你保存的图片，这些图片给你带来了想要唤起的情感，你可以从中获取灵感。
- en: '![A picture containing text  Description automatically generated](img/B17304_02_04.jpg)![A
    picture containing text, window, silhouette  Description automatically generated](img/B17304_02_05.jpg)![A
    picture containing text, window  Description automatically generated](img/B17304_02_06.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![包含文本的图片  自动生成的描述](img/B17304_02_04.jpg)![包含文本、窗口、轮廓的图片  自动生成的描述](img/B17304_02_05.jpg)![包含文本、窗口的图片  自动生成的描述](img/B17304_02_06.jpg)'
- en: 'Figure 2.3 a, b, c: Concepts used in project'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.3 a, b, c：项目中使用的概念
- en: Either way, the prominent action is to get the ideas started visually. After
    you have some art panels drawn up and you have a visual idea of how this may be
    built, we then make a Unity project.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 无论哪种方式，突出的行动是视觉上开始这些想法。在你绘制了一些艺术画板并有了如何构建的视觉想法之后，我们然后创建一个Unity项目。
- en: Your first Unity project
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你的第一个Unity项目
- en: You’ve put together a concept that you want to develop, and now we need to get
    Unity and create a project. To do this, we need to get the Unity Hub and then
    choose a version, followed by a template to start with.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经整理了一个想要开发的概念，现在我们需要获取Unity并创建一个项目。为此，我们需要获取Unity Hub并选择一个版本，然后选择一个模板开始。
- en: Unity Hub
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Unity Hub
- en: Unity Hub is a small application that holds all of the projects in a centralized
    location so all of your projects are easily accessible as well as the versions
    of Unity you have installed. To acquire Unity Hub, you need to go to [unity.com](http://unity.com)
    and create a **UnityID**. After you create an account, click the blue button named
    **Get Started**. Follow the prompts that best make sense for your needs and operating
    system. Download and install **Unity Hub** and let’s get creating!
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Unity Hub是一个小型应用程序，它将所有项目集中存储在一个位置，因此你可以轻松访问所有项目以及你安装的Unity版本。要获取Unity Hub，你需要访问[unity.com](http://unity.com)并创建一个**UnityID**。在创建账户后，点击名为**开始**的蓝色按钮。根据你的需求和操作系统，遵循最合适的提示。下载并安装**Unity
    Hub**，然后开始创作！
- en: Choosing a version
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择版本
- en: Unity runs multiple versions at once. There are **Alpha**, **Beta**, **Official**,
    and **LTS** releases.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Unity可以同时运行多个版本。有**Alpha**、**Beta**、**Official**和**LTS**发布版本。
- en: Alpha versions have experimental features that may not be fully complete or
    production-ready and are not recommended for builds as there may be features causing
    build-breaking bugs. Studios and enthusiasts may use this for testing mechanics,
    engine features, or packages. They are generally one release ahead of official
    releases. Beta is similar to Alpha versions; however, they are experimental versions
    of the most current official release. Official releases are stable current releases.
    LTS means **Long-Term Support**. These are the final releases of a version with
    minor hotfixes if bugs are found.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Alpha版本具有实验性功能，可能不完全完整或生产就绪，不建议用于构建，因为可能存在导致构建中断的错误。工作室和爱好者可以使用此版本进行测试机制、引擎功能或包。它们通常比官方发布提前一个版本。Beta版本与Alpha版本类似；然而，它们是最当前官方发布的实验版本。官方发布是稳定的当前版本。LTS代表**长期支持**。这些是版本的最终发布版本，如果发现错误，将包含一些小型的热修复。
- en: 'An easy way to see the versions is through the **Unity Hub**. An example of
    what this may look like can be seen in *Figure 2.4*:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 通过**Unity Hub**可以轻松查看版本。*图2.4*展示了其可能的样子：
- en: '![](img/B17304_02_07.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17304_02_07.png)'
- en: 'Figure 2.4: Example list of Unity versions'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.4：Unity版本示例列表
- en: LTS releases are recommended for a production application. If your team is experimenting
    or looking to prototype with new features, it would only be possible in prerelease
    versions. After choosing a version for your project to be built in, you need to
    choose a template from Unity’s options as you make a new project.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 对于生产应用，建议使用LTS版本。如果你的团队正在尝试或想要使用新功能进行原型设计，那么只能在预发布版本中实现。在为项目选择要构建的版本后，你需要在创建新项目时从Unity的选项中选择一个模板。
- en: This book, however, is version independent. If you’ve bought this book after
    2022, the book is still as relevant as it can be. The screenshots may have slight
    UI changes, but the foundations still remain intact.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这本书是版本无关的。如果你在2022年之后购买了这本书，这本书仍然具有相关性。截图可能会有轻微的UI变化，但基础仍然保持不变。
- en: Choosing a template
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择模板
- en: Unity presents you with a few template choices when you press the **New** button
    on the projects tab. This gives you the options of **2D**, **3D**, **Universal
    Rendering Pipeline** (**URP**), and **High-Definition Rendering Pipeline** (**HDRP**).
    There are large rendering differences as well as some functionality that might
    be interesting to you and your team to work with. These differences between these
    templates, arose when the **Scriptable Rendering Pipeline** (**SRP**) came to
    life!
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在项目标签页上按下**新建**按钮时，Unity会为你提供一些模板选择。这些选项包括**2D**、**3D**、**通用渲染管线（URP**）和**高清渲染管线（HDRP**）。这些模板之间有显著的渲染差异，以及一些可能对你和你的团队来说很有趣的功能。这些模板之间的差异是在**可脚本渲染管线（SRP**）出现时产生的！
- en: Scriptable rendering pipeline
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可脚本渲染管线
- en: 'Rendering and computer graphics are a detailed subject that you could get a
    PhD in, so we will scratch the surface of what is possible through a rendering
    pipeline. The top level of the pipeline entails three tasks: **Culling**, **Rendering**,
    and **Post-Processing**. In each of these categories, many tasks are taking place
    in certain orders and to certain degrees of accuracy. The primary function of
    all of this is to optimize the view to the end user for a high frame rate as well
    as maintain the art style that is required for the experience you are wanting
    for the user.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染和计算机图形学是一个可以攻读博士学位的详细主题，因此我们将通过渲染管线探讨一下可能实现的内容。管线的顶层包括三个任务：**剔除**、**渲染**和**后期处理**。在这些类别中，许多任务按照特定的顺序和精度进行。所有这些的主要功能是优化视图，以便以高帧率向最终用户提供，同时保持用户期望的艺术风格。
- en: 'With the advent of the SRP, these templates split into three main categories:
    B**uilt-in**, **Universal**, and **High Definition**. To get an idea of these
    three templates, let’s break them out into their respective groups and dive in
    a little bit further. For our project, we will be using Universal Rendering as
    we will be utilizing several features inside this rendering pipeline.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 随着SRP的出现，这些模板分为三大类：**内置**、**通用**和**高清**。为了更好地理解这三种模板，让我们将它们分别归类并进一步探讨。对于我们的项目，我们将使用通用渲染，因为我们将在渲染管线中利用多个功能。
- en: Built-In Rendering
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内置渲染
- en: This is an older pipeline that doesn’t use scriptable pipelines. There are a
    great many applications for the built-in renderer. Both of the 2D and 3D templates
    run Built-In Rendering systems. This is also the standard for which most of the
    assets in the asset store were built before the SRP came out. You can think of
    “Built-in” as the base experience in Unity. There are several reasons why you
    may not want to use the Built-In Renderer. If you are looking to use volumetric
    lighting, GPU particles, or ray tracing you would want to look into the scriptable
    render pipelines below.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个较旧的管线，它不使用可脚本管线。内置渲染器有许多应用。2D和3D模板都运行内置渲染系统。这也是在SRP出现之前，资产商店中大多数资产所采用的标准。你可以将“内置”视为Unity中的基础体验。有多个原因你可能不想使用内置渲染器。如果你想要使用体积光照、GPU粒子或光线追踪，你将需要查看下面的可脚本渲染管线。
- en: Universal Rendering
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用渲染
- en: The Universal Rendering pipeline is aptly named as it has the most features
    available with a scriptable rendering pipeline available. If you are looking to
    make a 2D game, this is the best option to choose as it has built-in, pixel-perfect
    rendering, 2D lights, and 2D shadows. For the 3D option, this is also a fantastic
    choice. There are two graphs available to both URP and HDRP, which are ShaderGraph
    and VFXGraph. ShaderGraph is a visual shader creation tool that allows for complex
    shaders to be written visually. VFXGraph’s primary function is to be a particle
    system focused on GPU particles, allowing you to create millions of particles
    on screen at the same time for stunning visuals.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 通用渲染管线（Universal Rendering Pipeline，简称URP）恰如其名，因为它提供了最丰富的功能，并具有可脚本化的渲染管线。如果你想要制作2D游戏，这是最佳选择，因为它具有内置的像素级渲染、2D光源和2D阴影。对于3D选项，这也是一个极好的选择。URP和HDRP都提供了两个图表，分别是ShaderGraph和VFXGraph。ShaderGraph是一个视觉着色器创建工具，允许以视觉方式编写复杂的着色器。VFXGraph的主要功能是作为一个专注于GPU粒子的粒子系统，允许你在屏幕上同时创建数百万个粒子，以实现惊人的视觉效果。
- en: We would like to use GPU-based particles, in our project which VFXGraph is responsible
    for handling, as well as show the use of ShaderGraph. With these requirements,
    we chose to work within URP as our rendering pipeline.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望在项目中使用基于GPU的粒子，由VFXGraph负责处理，以及展示ShaderGraph的使用。有了这些要求，我们选择在URP中工作，作为我们的渲染管线。
- en: If you are looking for more of a physically accurate rendering system with ray
    tracing and volumetric clouds, then HDRP is what you are looking for.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在寻找一个更物理准确的渲染系统，具有光线追踪和体积云，那么HDRP正是你所需要的。
- en: High-Definition Rendering
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 高清渲染
- en: 'This rendering pipeline has one major purpose: to give the best-looking output
    while remaining as optimized as possible. Whether to use HDRP or not is a widely
    discussed topic. There are several main reasons why HDRP would be the option for
    you. This is if you are looking for a physical-based sky with cloud layers, volumetric
    clouds, multiple directional lights, highly customizable shadow options, and ray
    tracing to include raytraced reflections, volumetrics, and multiple high-level
    shader outputs. There are many other high-level rendering options that HDRP only
    can provide. These concepts are deep topics in the computer graphics world and
    we implore you to look them up to see the beautiful work of what real-time rendering
    is becoming.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这个渲染管线有一个主要目的：在尽可能优化的同时，提供最佳的外观输出。是否使用HDRP是一个广泛讨论的话题。有几个主要原因表明HDRP可能是你的选择。这是如果你在寻找基于物理的天空，具有云层、体积云、多个方向光源、高度可定制的阴影选项，以及包括光线追踪反射、体积和多个高级着色器输出的光线追踪。HDRP还可以提供许多其他高级渲染选项。这些概念是计算机图形世界中的深度话题，我们强烈建议你查找它们，以了解实时渲染正在成为什么样的美丽工作。
- en: Prototyping
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 原型设计
- en: Now that you have a project, you can start putting together the assets that
    will create the game. In this book, we have worked through how we are going to
    build this game out so that way, we can section off each major chunk into chapters.
    Prototyping can happen in a multitude of ways. We can’t go over every way in which
    every studio will prototype as each business has its own manner of creation. We
    will talk about major progression patterns that are common within the industry
    as a whole. Breaking down the life cycle of any task that is built upon iteration,
    there needs to be a cycle to pull out the impurities. This is commonly regarded
    as analyze, design, implement, and test, and then iterate again until complete.
    The prototyping phase goes through all of these steps as well. Take a look at
    them all and work through each portion that makes sense to you or the group building
    your game.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你有了项目，你可以开始收集将创建游戏的资源。在这本书中，我们已经探讨了如何构建这个游戏，以便我们可以将每个主要部分划分到章节中。原型设计可以通过多种方式实现。我们无法详述每个工作室的原型设计方式，因为每个业务都有其独特的创作方式。我们将讨论整个行业中普遍存在的重大进展模式。将任何基于迭代的任务的生命周期分解，需要有一个循环来去除杂质。这通常被认为是分析、设计、实施和测试，然后迭代直到完成。原型设计阶段也要经过所有这些步骤。看看所有这些，并处理对你或你所在团队构建游戏有意义的每个部分。
- en: Wireframing or paper creation
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 线框图或纸面设计
- en: In this form of prototyping, the creator breaks the video game down into phases
    in a physical or digital system to go through each game loop or experience the
    player will feel throughout your game. Sometimes, this could be creating a paper
    board game to run through the rules. Sometimes, this may involve digitally drawing
    game wireframes through the user interface to intuition for the gameplay experience.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种原型设计形式中，创作者将视频游戏分解为物理或数字系统中的阶段，以通过每个游戏循环或体验玩家在整个游戏中的感受。有时，这可能意味着创建一个纸板游戏来运行规则。有时，这可能涉及通过用户界面进行数字绘制游戏线框图，以直观地体验游戏玩法。
- en: Grayboxing
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 灰盒
- en: This name is what you think it means! A bunch of untextured shapes, generally
    gray boxes, that line out your environment to ensure that the storytelling of
    the environment through its silhouette can be defined. This version of prototyping
    is particularly useful if you need a very direct camera angle you need to display,
    and do not have assets to set up the environment. This can also be useful in the
    development of concept art as you can push the composition to the concept artists
    for quicker turnarounds.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这个名字就是你所想的含义！一堆未着色的形状，通常是灰色盒子，它们勾勒出你的环境，以确保可以通过其轮廓定义环境的叙事。这种原型设计版本特别有用，如果你需要一个非常直接的摄像机角度来展示，并且没有设置环境的资产。这也可以在概念艺术的发展中很有用，因为你可以将构图推给概念艺术家以获得更快的周转。
- en: '![A picture containing indoor, curtain, bedclothes  Description automatically
    generated](img/B17304_02_08.png)![A picture containing indoor  Description automatically
    generated](img/B17304_02_09.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![包含室内、窗帘、床单的图片 自动生成的描述](img/B17304_02_08.png)![包含室内的图片 自动生成的描述](img/B17304_02_09.png)'
- en: 'Figure 2.5 a, b: Greyboxing examples in project'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.5 a, b：项目中的灰盒示例
- en: From *Figure 2.5* above, you can see how a concept artist could take these and
    draw over them to get a rendered concept in order to provide more design ideas
    for the space, even if this means changing the environment, since this was a quick
    mock-up of the space to get things started.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的*图2.5*中，你可以看到概念艺术家如何在这些基础上绘制，以获得渲染的概念，从而为空间提供更多的设计想法，即使这意味着改变环境，因为这是一个快速的空间草图，以开始工作。
- en: These can provide enough detail to start working on a proof of concept, which
    we go over next.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这些可以提供足够的细节来开始工作于一个概念验证，我们将在下一部分进行讨论。
- en: Proof of Concept (PoC)
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概念验证 (PoC)
- en: The naming is fairly accurate. This is where you are getting very specific about
    your testing. Maybe you need to tune a camera to get a very specific feel for
    the gameplay. This might take several iterations in itself and multiple people
    taking a crack at it if you have a team.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 命名相当准确。这是你开始非常具体地进行测试的地方。你可能需要调整摄像机以获得对游戏玩法的非常具体的感受。这可能需要自身多次迭代，如果有一个团队，可能需要多个人尝试。
- en: '![Diagram  Description automatically generated with medium confidence](img/B17304_02_10.png)![Diagram,
    engineering drawing  Description automatically generated](img/B17304_02_11.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图表 自动生成的描述具有中等置信度](img/B17304_02_10.png)![工程图纸 自动生成的描述](img/B17304_02_11.png)'
- en: 'Figure 2.6 a, b: An example of iterating on a game asset'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.6 a, b：游戏资产迭代的示例
- en: '*Figures* *2.6 a* and *b* above show the iteration of some architecture. We
    started with a simple archway that had a feeling of fantasy just to start. After
    we put it in the level, we had more time to think about the styling and add more
    appealing parts to the archway. This is a helpful concept to understand that your
    assets can be perfect in the beginning. To get to an MVP, you have to start somewhere
    and work toward greatness!'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '*图* *2.6 a* 和 *b* 上方展示了某些建筑的迭代。我们从一个简单的拱门开始，它有一种幻想的感觉，只是为了开始。在我们将其放入关卡后，我们有更多的时间来思考风格，并为拱门添加更多吸引人的部分。这是一个有用的概念，了解你的资产在开始时可能并不完美。要达到MVP，你必须从某个地方开始，朝着伟大努力！'
- en: Minimum Viable Product (MVP)
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最小可行产品 (MVP)
- en: 'This is as the name implies: a pared-down version of the game. In a platformer,
    there must be jumping. Perhaps you have swinging as your game demands that as
    a mechanic, this will not get cut no matter how much funding you have? You do
    not need polished art assets or even animations. The purpose of an MVP is to demonstrate
    the gameplay’s features are within an acceptable range to ensure that anything
    built on top has the foundation of the MVP’s mechanics working properly.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这正如其名所暗示的那样：游戏的简化版。在平台游戏中，必须包含跳跃。也许你的游戏需要作为机制，有摇摆动作，那么无论你有多少资金，这个机制都不会被删减？你不需要精美的艺术资产，甚至不需要动画。最小可行产品（MVP）的目的是展示游戏玩法特性在可接受的范围内，以确保在MVP机制的基础上构建的任何内容都能正常工作。
- en: Vertical slice
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 垂直切片
- en: Sometimes you have a good idea of the art direction, the primary mechanics,
    and narrative, but need to gather some feedback or possibly funding. A vertical
    slice is when you take a very thin slice of the game and polish it to generate
    hype and a sense of the end product. Demos are a similar concept to a vertical
    slice. This is more complex than the MVP as there is a level of polish to the
    art, animations, mechanics, lighting, and so on that MVPs aren’t expected to have,
    which can take a significant amount of time as well as an understanding of the
    final product, which may not have been available when the MVP was made.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候你对艺术方向、主要机制和叙事有很好的想法，但需要收集一些反馈或可能需要资金。垂直切片是指你从游戏中取一个非常薄的切片并对其进行润色，以产生炒作和最终产品的感觉。演示与垂直切片有相似的概念。这比MVP更复杂，因为艺术、动画、机制、照明等方面的润色是MVP所期望的，这需要大量的时间和对最终产品的理解，而这些可能在制作MVP时可能还没有可用。
- en: This style of prototyping is the best use case for our project needs within
    this book. We are developing a small portion of the game to get a strong understanding
    of what the entire game could be. This is our best option.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这种原型制作风格是本书中我们项目需求的最佳用例。我们正在开发游戏的一小部分，以深入了解整个游戏可能是什么样子。这是我们最好的选择。
- en: While making prototypes, your game may need to go through all of these to get
    to proper gameplay that feels good to play. You may also not need all of them.
    This varies greatly within each development group.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在制作原型时，你的游戏可能需要经历所有这些步骤才能达到令人愉悦的游戏体验。你可能也不需要所有这些。这在不同的发展团队中差异很大。
- en: Summary
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Within this chapter, we went over some deep topics—game design, what options
    to choose for your first project, and prototyping fundamentals. We went over how
    you and your team could collaborate in a Word document or a more visual flowchart
    to bring your game together. The idea here is to make the design’s ideas a reality.
    Once you’ve done this, you should dig into your first Unity project, choosing
    which template to work with and utilizing effects that follow the setting of your
    game concept, such as GPU particles. Finally, we covered prototyping to get your
    project started and get a sense of whether it conveys the experience to the user
    that you want it to convey.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了一些深入的主题——游戏设计、为你的第一个项目选择哪些选项，以及原型制作的基础。我们讨论了你和你的团队如何在一个Word文档或更直观的流程图中协作，将你的游戏整合起来。这里的想法是将设计的想法变为现实。一旦你做到了这一点，你应该深入到你的第一个Unity项目中，选择要使用的模板，并利用符合你游戏概念设置的特效，例如GPU粒子。最后，我们讨论了原型制作，以启动你的项目并了解它是否传达了你希望传达给用户的体验。
- en: In the next chapter, we will begin to look at programming, helping you to bring
    all your game ideas to life.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始探讨编程，帮助你将所有游戏想法变为现实。
