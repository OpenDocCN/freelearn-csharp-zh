["```cs\nusing UnityEngine;\nusing Photon.Pun;\nusing Photon.Realtime;\n```", "```cs\npublic class NetworkManager : MonoBehaviourPunCallbacks\n{\n    private const string ROOM_NAME = \"Multiplayer Room\";\n    private const byte MAX_PLAYERS = 5;\n}\n```", "```cs\nprivate void Awake()\n{\n    InitiateServerConnection();\n}\nprivate void InitiateServerConnection()\n{\n     if (!PhotonNetwork.IsConnected)\n    {\n        PhotonNetwork.ConnectUsingSettings();\n        Debug.Log(\"Attempting server connection...\");\n    }\n}\n```", "```cs\npublic override void OnConnectedToMaster()\n{\n    base.OnConnectedToMaster();\n    Debug.Log(\"Connected to Master Server.\");\n    JoinOrCreateGameRoom();\n}\n```", "```cs\nprivate void JoinOrCreateGameRoom()\n    {\n        RoomOptions options = new RoomOptions\n        {\n            MaxPlayers = MAX_PLAYERS,\n            IsVisible = true,\n            IsOpen = true\n        };\n        PhotonNetwork.JoinOrCreateRoom(ROOM_NAME, options, TypedLobby.Default);\n}\n```", "```cs\npublic override void OnJoinedRoom()\n{\n    base.OnJoinedRoom();\n    Debug.Log(\"Successfully joined a room.\");\n}\n```", "```cs\npublic override void OnPlayerEnteredRoom(Player newParticipant)\n{\n    base.OnPlayerEnteredRoom(newParticipant);\n    Debug.Log(\"Another player has joined the room.\");\n}\n```", "```cs\nusing UnityEngine;\nusing Photon.Pun;\npublic class NetworkPlayerPlacer : MonoBehaviourPunCallbacks\n{\n    private GameObject playerInstance;\n    private const string PLAYER_PREFAB_NAME = \"Network Player\";\n}\n```", "```cs\npublic override void OnJoinedRoom()\n{\n    base.OnJoinedRoom();\n    SpawnPlayer();\n}\n```", "```cs\nprivate void SpawnPlayer()\n{\n     playerInstance = PhotonNetwork.Instantiate(PLAYER_PREFAB_NAME, transform.position, transform.rotation);\n}\n```", "```cs\npublic override void OnLeftRoom()\n{\n    base.OnLeftRoom();\n    DespawnPlayer();\n}\n```", "```cs\nprivate void DespawnPlayer()\n{\n    if (playerInstance)\n    {\n        PhotonNetwork.Destroy(playerInstance);\n    }\n}\n```", "```cs\nusing UnityEngine;\nusing UnityEngine.XR;\nusing Photon.Pun;\nusing UnityEngine.InputSystem;\npublic class NetworkPlayer : MonoBehaviour\n{\n    public Transform head;\n    public Transform leftHand;\n    public Transform rightHand;\n    private PhotonView photonView;\n    public InputActionAsset xriInputActions;\n    private InputActionMap headActionMap;\n    private InputActionMap leftHandActionMap;\n    private InputActionMap rightHandActionMap;\n    private InputAction headPositionAction;\n    private InputAction headRotationAction;\n    private InputAction leftHandPositionAction;\n    private InputAction leftHandRotationAction;\n    private InputAction rightHandPositionAction;\n    private InputAction rightHandRotationAction;\n}\n```", "```cs\nvoid Start()\n    {\n        photonView = GetComponent<PhotonView>();\n        // Get the Action Maps\n        headActionMap = xriInputActions.FindActionMap(\"XRI Head\");\n        leftHandActionMap = xriInputActions.FindActionMap(\"XRI LeftHand\");\n        rightHandActionMap = xriInputActions.FindActionMap(\"XRI RightHand\");\n        // Get the Position and Rotation actions for each action map\n        headPositionAction = headActionMap.FindAction(\"Position\");\n        headRotationAction = headActionMap.FindAction(\"Rotation\");\n        leftHandPositionAction = leftHandActionMap.FindAction(\"Position\");\n        leftHandRotationAction = leftHandActionMap.FindAction(\"Rotation\");\n        rightHandPositionAction = rightHandActionMap.FindAction(\"Position\");\n        rightHandRotationAction = rightHandActionMap.FindAction(\"Rotation\");\n        // Enable actions\n        headPositionAction.Enable();\n        headRotationAction.Enable();\n        leftHandPositionAction.Enable();\n        leftHandRotationAction.Enable();\n        rightHandPositionAction.Enable();\n        rightHandRotationAction.Enable();\n    }\n```", "```cs\nvoid Update()\n    {\n        if (photonView.IsMine)\n        {\n            rightHand.gameObject.SetActive(false);\n            leftHand.gameObject.SetActive(false);\n            head.gameObject.SetActive(false);\n            MapPosition(head, XRNode.Head);\n            MapPosition(leftHand, XRNode.LeftHand);\n            MapPosition(rightHand, XRNode.RightHand);\n        }\n    }\n```", "```cs\nvoid MapPosition(Transform target, XRNode node)\n    {\n        Vector3 position = Vector3.zero;\n        Quaternion rotation = Quaternion.identity;\n        if (node == XRNode.Head)\n        {\n            position = headPositionAction.ReadValue<Vector3>();\n            rotation = headRotationAction.ReadValue<Quaternion>();\n        }\n        else if (node == XRNode.LeftHand)\n        {\n            position = leftHandPositionAction.ReadValue<Vector3>();\n            rotation = leftHandRotationAction.ReadValue<Quaternion>();\n        }\n        else if (node == XRNode.RightHand)\n        {\n            position = rightHandPositionAction.ReadValue<Vector3>();\n            rotation = rightHandRotationAction.ReadValue<Quaternion>();\n        }\n        target.position = position;\n        target.rotation = rotation;\n    }\n```", "```cs\nvoid OnDestroy()\n    {\n        headPositionAction.Disable();\n        headRotationAction.Disable();\n        leftHandPositionAction.Disable();\n        leftHandRotationAction.Disable();\n        rightHandPositionAction.Disable();\n        rightHandRotationAction.Disable();\n    }\n```", "```cs\n    public GameObject handVisualizationPrefab;\n    [SerializeField] private InputActionProperty triggerAction;\n    [SerializeField] private InputActionProperty gripAction;\n    private GameObject instantiatedHandVisual;\n    private Animator handMotionController;\n```", "```cs\nvoid Awake()\n    {\n        InitializeHandController();\n    }\n    void InitializeHandController()\n    {\n        instantiatedHandVisual = Instantiate(handVisualizationPrefab, transform);\n        handMotionController = instantiatedHandVisual.GetComponent<Animator>();\n    }\n```", "```cs\n   void AdjustHandMotion()\n    {\n        float triggerIntensity = triggerAction.action.ReadValue<float>();\n        float gripIntensity = gripAction.action.ReadValue<float>();\n        handMotionController.SetFloat(\"Trigger\", triggerIntensity);\n        handMotionController.SetFloat(\"Grip\", gripIntensity);\n    }\n```", "```cs\n  void Update()\n    {\n        AdjustHandMotion();\n    }\n```"]