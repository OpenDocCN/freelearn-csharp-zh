- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Cloud-Native Development with ASP.NET Core 9
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ASP.NET Core 9进行云原生开发
- en: Modern applications are designed to operate in cloud environments and take advantage
    of the various features provided, such as agility, scalability, availability,
    and resilience. ASP.NET Core 9 provides us with a set of powerful tools that allow
    us to develop high-quality solutions. However, it is important to be aware of
    the patterns and best practices related to the cloud-native development model.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 现代应用程序被设计成在云环境中运行并利用提供的各种功能，如敏捷性、可伸缩性、可用性和弹性。ASP.NET Core 9为我们提供了一套强大的工具，使我们能够开发高质量解决方案。然而，了解与云原生开发模型相关的模式和最佳实践同样重要。
- en: In this chapter, we will learn about important aspects related to applications
    hosted in cloud environments, exploring patterns, best practices, the mindset
    required for cloud-native application development, the principles of the twelve-factor
    app, and architectural design principles so that you can get the most out of your
    cloud environment.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习与云环境中托管的应用程序相关的重要方面，探讨模式、最佳实践、云原生应用程序开发所需的心态、十二要素应用的原则以及架构设计原则，以便您能够充分利用您的云环境。
- en: 'In this chapter, we will focus on the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将重点关注以下主题：
- en: Creating a cloud-native mindset
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 培养云原生心态
- en: Working with cloud-native tools
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用云原生工具
- en: The principles of the twelve-factor app
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 十二要素应用的原则
- en: Understanding cloud architecture principles
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解云架构原则
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The code examples used in this chapter can be found in the book’s GitHub repository:
    [https://github.com/PacktPublishing/ASP.NET-Core-9.0-Essentials/tree/main/Chapter11](https://github.com/PacktPublishing/ASP.NET-Core-9.0-Essentials/tree/main/Chapter11)
    .'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的代码示例可以在本书的GitHub代码库中找到：[https://github.com/PacktPublishing/ASP.NET-Core-9.0-Essentials/tree/main/Chapter11](https://github.com/PacktPublishing/ASP.NET-Core-9.0-Essentials/tree/main/Chapter11)。
- en: 'In order for you to take advantage of all the examples proposed in this chapter,
    it is important that you fork the book repository. Forking is a feature available
    on GitHub that copies a repository so that it can be managed by a Git user. You
    can learn how to fork a repository using the following URL: [https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/fork-a-repo](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/fork-a-repo)
    .'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了充分利用本章中提出的所有示例，您需要将本书的代码库进行分支。分支是GitHub上的一项功能，它可以将代码库复制出来，以便Git用户进行管理。您可以通过以下网址了解如何分支一个代码库：[https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/fork-a-repo](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/fork-a-repo)。
- en: Creating a cloud-native mindset
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 培养云原生心态
- en: 'Every year brings new innovations in cloud computing: there are always new
    features that bring new possibilities and companies that want new ways to deliver
    value to users in an increasingly demanding market.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 每年云计算都会带来新的创新：总有新的功能带来新的可能性，以及希望以新的方式向用户交付价值的公司。
- en: In previous chapters, we learned about various tools, patterns, and best practices
    and interacted with cloud resources. But even in a scenario where applications
    are built with best practices and standards in mind, are they able to benefit
    from all the features that a cloud environment can provide?
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们学习了各种工具、模式和最佳实践，并与云资源进行了交互。即使在考虑最佳实践和标准的情况下构建的应用程序，它们是否能够充分利用云环境提供的所有功能？
- en: Even today, there are many organizations that run applications in private environments
    (on-premises), which brings several benefits. Consequently, applications developed
    in these environments have limited scalability and deal with high costs for purchasing
    servers and qualified professionals to maintain them.. In this solution model,
    computing resources are limited, but at the same time, it brings benefits of greater
    control, compliance, and security for companies.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在今天，仍有许多组织在私有环境中（本地）运行应用程序，这带来了许多好处。因此，在这些环境中开发的应用程序具有有限的可伸缩性，并且需要承担购买服务器和聘请合格专业人员维护它们的高昂成本。在这种解决方案模型中，计算资源有限，但同时也为公司带来了更大的控制权、合规性和安全性。
- en: The cloud appears is an alternative to this model that enhances computing power
    for organizations, but at the same time, several other challenges arise, including
    in the development model and process.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 云似乎为组织提供了一种增强计算能力的替代模型，但同时也带来了其他挑战，包括在开发模型和流程中。
- en: To use the cloud model, we need to understand how it works, its service layers,
    the necessary investments, and how we can adapt our applications to a cloud-native
    model.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用云模型，我们需要了解其工作原理、服务层、必要的投资以及如何将我们的应用程序适配到原生云模型。
- en: Let’s start by looking at the service layers offered in cloud environments.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从查看云环境中提供的服务层开始。
- en: Understanding the service layers in a cloud environment
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解云环境中的服务层
- en: 'Maybe you’ve already heard about **CapEx** and **OpEx** and how important these
    two words are in the corporate world:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 也许你已经听说过**CapEx**和**OpEx**，以及这两个词在商业世界中的重要性：
- en: '**Capital expenditure** ( **CapEx** ): CapEx is not a term exclusive to the
    IT area but is a financial term related to expenses or investments in assets.
    The calculation is simple: if there is a need for more servers to support user
    demand, CAPex comes into play and is related to the cost of investment in servers,
    physical location for installing the servers, electricity, UPS, and so on.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资本支出** ( **CapEx** )：CapEx不是一个仅限于IT领域的术语，而是一个与资产相关支出或投资的财务术语。计算很简单：如果需要更多服务器来支持用户需求，CapEx就会发挥作用，并涉及服务器投资成本、服务器安装的物理位置、电力、不间断电源（UPS）等。'
- en: '**Operating expenditure** ( **OpEx** ): OpEx refers to the ongoing costs of
    running daily operations. This includes expenses for services, utilities, rent,
    software licensing, and other operational activities such as staff salaries.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运营支出** ( **OpEx** )：OpEx指的是日常运营的持续成本。这包括服务、公用事业、租金、软件许可以及其他运营活动，如员工工资。'
- en: Observing these concepts, every organization needs to reflect on its investments,
    costs, and professionals to remain competitive.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 观察这些概念，每个组织都需要反思其投资、成本和专业人员，以保持竞争力。
- en: 'When moving to an approach involving cloud computing, the transition from CapEx
    to OpEx takes place. This change has several implications:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当转向涉及云计算的方法时，从CapEx到OpEx的转变就会发生。这种变化有几个影响：
- en: '**Reduced upfront costs** : Adopting cloud services reduces the need for large
    upfront investments in physical hardware and infrastructure. Instead, organizations
    pay for the cloud services they use.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**降低前期成本**：采用云服务减少了在物理硬件和基础设施上的大量前期投资需求。相反，组织只需为使用的云服务付费。'
- en: '**Scalable costs** : Cloud services offer a pay-as-you-go model, allowing organizations
    to scale their usage and expenses according to demand.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可伸缩的成本**：云服务提供按使用付费的模式，允许组织根据需求调整其使用和支出。'
- en: '**Operational flexibility** : Ability to quickly adapt to changes in business
    needs without dependence on investments in hardware.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运营灵活性**：能够快速适应业务需求的变化，而不依赖于硬件投资。'
- en: '**Maintenance and updates** : Cloud providers such as Azure provide infrastructure
    maintenance, updates, and security services, reducing the operational burden on
    an organization’s IT team and allowing them to focus on strategic initiatives.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**维护和更新**：云服务提供商，如Azure，提供基础设施维护、更新和安全服务，减轻了组织IT团队的操作负担，使他们能够专注于战略举措。'
- en: However, having services running in the cloud does not mean that there will
    be less cost as there is a pay-as-you-go model. As with any tool or strategy,
    if not used correctly, the cloud can cause major problems for organizations.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在云中运行服务并不意味着成本会降低，因为存在按使用付费的模式。就像任何工具或策略一样，如果不正确使用，云可能会给组织带来重大问题。
- en: Cloud providers such as Azure take care of the entire infrastructure for providing
    computing services; however, there is shared management with the organizations
    that use the services. This service model is very important to understand.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 云服务提供商，如Azure，负责提供计算服务的整个基础设施；然而，与使用这些服务的组织之间存在共同管理。这种服务模式非常重要，需要理解。
- en: 'In the cloud computing model, organizations focus their efforts on their products
    and services, benefiting from shared management with cloud providers. Organizations
    basically have three options to choose from when deciding what service model they
    want:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在云计算模型中，组织将精力集中在他们的产品和服务上，并从与云提供商的共同管理中受益。组织在决定他们想要的服务模型时，基本上有三个选择：
- en: '![Figure 11.1 – Cloud computing services offer](img/B21788_11_01.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.1 – 云计算服务提供](img/B21788_11_01.jpg)'
- en: Figure 11.1 – Cloud computing services offer
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.1 – 云计算服务提供
- en: 'As shown in *Figure 11* *.1* , we have the following types of service layers:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如[*图 11.1*](#)所示，我们有以下类型的服务层：
- en: '**Infrastructure as a Service (IaaS)** : Provides virtualized computing resources,
    where the company dynamically provisions virtual machines, storage, and networking.
    It is a common adoption model in on-premises migration strategies to the cloud.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基础设施即服务 (IaaS)**：提供虚拟化计算资源，公司可以动态配置虚拟机、存储和网络。它是在地迁移到云的常见采用模型。'
- en: '**Platform as a Service (PaaS)** : Provides a platform that abstracts infrastructure,
    allowing organizations and development teams to focus on solutions and data. We
    used a PaaS resource in [*Chapter 10*](B21788_10.xhtml#_idTextAnchor162) when
    publishing an Azure App Service application.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平台即服务 (PaaS)**：提供一个平台，该平台抽象化基础设施，使组织和开发团队能够专注于解决方案和数据。我们在[*第 10 章*](B21788_10.xhtml#_idTextAnchor162)中发布
    Azure App Service 应用程序时使用了 PaaS 资源。'
- en: '**Software as a Service (SaaS)** : Provides software applications on a subscription
    basis, such as streaming applications and Microsoft 365 applications.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**软件即服务 (SaaS)**：基于订阅提供软件应用程序，例如流媒体应用程序和 Microsoft 365 应用程序。'
- en: Cloud services are essential components of cloud-native development, helping
    to define migration strategies, cost optimization, scalability, resiliency, security,
    and deployment.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 云服务是云原生开发的关键组件，有助于定义迁移策略、成本优化、可扩展性、弹性、安全性和部署。
- en: So that we can understand how we should adapt our tools and development processes
    and benefit from the power of cloud computing, it is important to start with best
    practices.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解我们应如何调整我们的工具和开发流程并从云计算的强大功能中受益，从最佳实践开始是非常重要的。
- en: Cloud-native development best practices
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 云原生开发最佳实践
- en: Microsoft provides extensive documentation and powerful services in Azure, where
    it is possible to host applications using different technologies and, of course,
    solutions developed in ASP.NET Core 9.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 微软在 Azure 中提供了广泛的文档和强大的服务，其中可以使用不同的技术托管应用程序，当然，还包括在 ASP.NET Core 9 中开发的解决方案。
- en: In addition to documenting the resources available in Azure, it is very important
    that development teams know about the **Cloud Adoption Framework** ( **CAF** )
    and the **Well-Architected Framework** ( **WAF** ). These two resources have different
    use cases and help teams deal with various challenges posed by cloud environments.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 除了记录 Azure 中可用的资源外，开发团队了解**云采用框架**（**CAF**）和**架构良好框架**（**WAF**）非常重要。这两个资源有不同的用例，并帮助团队应对云环境带来的各种挑战。
- en: Let’s briefly learn about each of these features.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简要了解这些功能中的每一个。
- en: The CAF
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: The CAF
- en: Microsoft’s CAF has an excellent collection of documentation, implementation
    guidance, best practices, and tools designed to help organizations plan and execute
    their cloud adoption strategy.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 微软的 CAF 拥有一套优秀的文档、实施指南、最佳实践和工具，旨在帮助组织规划和执行其云采用战略。
- en: 'The CAF basically consists of seven phases:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: CAF 基本上包括七个阶段：
- en: '**Strategy** : Define business outcomes, establish a cloud adoption plan, and
    prioritize workloads for migration.'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**策略**：定义业务成果，建立云采用计划，并优先考虑迁移的工作负载。'
- en: '**Plan** : Assess your current digital estate, create a cloud adoption plan,
    and identify gaps in required skills and resources.'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**规划**：评估您的当前数字资产，创建云采用计划，并确定所需技能和资源方面的差距。'
- en: '**Ready** : Prepare the environment for cloud adoption by configuring a landing
    zone that includes governance, security, and management tools.'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**准备**：通过配置包括治理、安全和管理工作在内的着陆区来准备云采用环境。'
- en: '**Migrate** : Migrate workloads to the cloud, using tools and methodologies
    to ensure a smooth transition.'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**迁移**：使用工具和方法将工作负载迁移到云，确保平稳过渡。'
- en: '**Innovate** : Develop new cloud-native applications or modernize existing
    applications to make the most of cloud capabilities.'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**创新**：开发新的云原生应用程序或现代化现有应用程序以充分利用云功能。'
- en: '**Govern** : Implement governance best practices to ensure compliance, manage
    risk, and establish security controls.'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**治理**：实施治理最佳实践以确保合规性、管理风险并建立安全控制。'
- en: '**Manage** : Operate and manage the cloud environment, using monitoring and
    management tools to ensure performance, reliability, and cost efficiency.'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**管理**：操作和管理云环境，使用监控和管理工具确保性能、可靠性和成本效率。'
- en: CAF
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: CAF
- en: CAF has extensive documentation and resources that should be part of a software
    engineer’s daily life. To learn more, visit [https://learn.microsoft.com/en-us/azure/cloud-adoption-framework/](https://learn.microsoft.com/en-us/azure/cloud-adoption-framework/)
    .
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: CAF拥有广泛的文档和资源，这些资源应该是软件工程师日常生活的组成部分。要了解更多信息，请访问[https://learn.microsoft.com/en-us/azure/cloud-adoption-framework/](https://learn.microsoft.com/en-us/azure/cloud-adoption-framework/)。
- en: The CAF aims to help organizations adopt a cloud-native mindset, emphasizing
    the importance of planning, governance, and continuous improvement, ensuring that
    cloud adoption aligns with business objectives.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: CAF旨在帮助组织采用云原生思维，强调规划、治理和持续改进的重要性，确保云采用与业务目标一致。
- en: The CAF is an excellent source of knowledge, and generally, the focus is not
    exactly on one application (or workload, as they are commonly called) but on structuring
    the entire environment in general. However, it can be used as an excellent source
    of knowledge and planning for new workloads, as it involves business teams, development,
    infrastructure, and the entire continuous delivery flow.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: CAF是知识宝库，通常，其重点并不完全在于一个应用程序（或工作负载，如它们通常被称为），而是在于一般性地构建整个环境。然而，它可以作为知识库和规划新工作负载的绝佳来源，因为它涉及业务团队、开发、基础设施和整个持续交付流程。
- en: In addition to the CAF, there is another very important resource that must be
    taken into consideration when defining application architectural models for your
    cloud environment.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 除了CAF，在定义云环境中的应用架构模型时，还必须考虑另一个非常重要的资源。
- en: The WAF
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: WAF
- en: 'The WAF is a set of capabilities offered by Microsoft that contains best practices,
    principles, and architectural guidance for designing, building, and operating
    secure, high-performance, resilient, and efficient infrastructures for your cloud
    applications. The WAF is subdivided into five pillars:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: WAF是由微软提供的一套能力，包含设计、构建和运营安全、高性能、弹性且高效的云应用程序基础设施的最佳实践、原则和架构指导。WAF分为五个支柱：
- en: '**Operational excellence** : This pillar focuses on operational processes that
    keep applications running smoothly and efficiently. This includes monitoring,
    automation, and incident response.'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**运营卓越**：这个支柱侧重于保持应用程序平稳高效运行的运营流程。这包括监控、自动化和事件响应。'
- en: '**Security** : This pillar ensures that applications and data are protected
    from threats. It covers identity management, infrastructure protection, data encryption,
    and threat detection.'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**安全性**：这个支柱确保应用程序和数据免受威胁。它涵盖了身份管理、基础设施保护、数据加密和威胁检测。'
- en: '**Reliability** : This pillar ensures that applications can recover from failures
    and continue to function as expected. This includes disaster recovery strategies,
    fault tolerance, and data backup.'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**可靠性**：这个支柱确保应用程序能够从故障中恢复并继续按预期运行。这包括灾难恢复策略、容错和数据备份。'
- en: '**Performance efficiency** : This pillar ensures that applications use resources
    efficiently and can scale to meet demand. It covers capacity planning, resource
    optimization, and performance monitoring.'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**性能效率**：这个支柱确保应用程序高效地使用资源，并且可以扩展以满足需求。它包括容量规划、资源优化和性能监控。'
- en: '**Cost optimization** : This pillar focuses on effectively managing costs while
    delivering optimal performance and value. This includes cost monitoring, usage
    analysis, and implementing cost reduction strategies.'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**成本优化**：这个支柱侧重于在提供最佳性能和价值的同时有效管理成本。这包括成本监控、使用分析和实施成本降低策略。'
- en: Learn more about the WAF
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 了解更多关于WAF
- en: The WAF not only provides great documentation containing strategies and best
    practices in relation to each of the five pillars, but it also provides tools,
    such as **Assessment** , where it is possible to analyze your existing cloud workloads
    to improve them, checklists, and many other resources. To learn more about the
    WAF, visit [https://learn.microsoft.com/en-us/azure/well-architected/](https://learn.microsoft.com/en-us/azure/well-architected/)
    .
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: WAF不仅提供了包含与五个支柱相关的策略和最佳实践的出色文档，还提供了工具，例如**评估**，可以分析现有的云工作负载以改进它们，清单和其他许多资源。要了解更多关于WAF的信息，请访问[https://learn.microsoft.com/en-us/azure/well-architected/](https://learn.microsoft.com/en-us/azure/well-architected/)。
- en: Each of the pillars presented previously supports a cloud-native mindset, providing
    clear and practical guidelines for each workload. This allows teams to not only
    analyze solutions from different perspectives but also make the best of the cloud
    environment through high-quality solutions that meet organizational objectives,
    such as cost optimization.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 之前提出的每个支柱都支持云原生思维模式，为每个工作负载提供清晰和实用的指南。这使得团队能够从不同角度分析解决方案，并通过满足组织目标（如成本优化）的高质量解决方案充分利用云环境。
- en: Going beyond code development
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 超越代码开发
- en: To achieve a cloud-native solutions mindset, as software engineers, we must
    be prepared to go beyond the boundaries of code development.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现云原生解决方案的思维模式，作为软件工程师，我们必须准备好超越代码开发的边界。
- en: The DevOps culture brings a collaboration model that is not just restricted
    to different teams communicating effectively but extends to sharing knowledge,
    standards, and best practices.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 文化带来了一种协作模式，这种模式不仅限于不同团队的有效沟通，还扩展到知识、标准和最佳实践的共享。
- en: Operations teams have adapted to the code development model by using technology
    such as Infrastructure as Code, GitHub repositories, and even pipelines.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 运维团队通过使用基础设施即代码、GitHub 仓库甚至流水线等技术，已经适应了代码开发模型。
- en: Likewise, it is important that we learn concepts related to networking, infrastructure,
    security, and data. This will make all the difference in the architectural design
    and development of solutions that make the best of cloud environments and will
    help create a cloud-native mindset.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，学习与网络、基础设施、安全和数据相关的概念也很重要。这将在最佳利用云环境的解决方案的架构设计和开发中产生重大差异，并有助于形成云原生思维模式。
- en: Now that we have an insight into the challenges associated with cloud computing,
    it’s time to learn about cloud-native tools.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了与云计算相关的挑战，是时候学习云原生工具了。
- en: Working with cloud-native tools
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用云原生工具
- en: In an increasingly competitive market, being agile and delivering solutions
    quickly has become synonymous with success.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在日益竞争激烈的市场中，敏捷和快速交付解决方案已经成为成功的同义词。
- en: The cloud-native approach is associated with agility and speed, allowing teams
    to create solutions, and adding layers of services and functionalities with loose
    coupling, resilience, management, and observability.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 云原生方法与敏捷性和速度相关联，允许团队创建解决方案，并通过松散耦合、弹性、管理和可观察性添加服务层和功能层。
- en: However, we must understand the relationship between agility and speed when
    it comes to developing cloud-native applications. Being agile is not being fast,
    and being fast does not necessarily mean being agile. That completely changes
    the way we think about a solution.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当我们谈到开发云原生应用时，我们必须理解敏捷性和速度之间的关系。敏捷并不意味着快速，快速也不一定意味着敏捷。这完全改变了我们思考解决方案的方式。
- en: 'Let’s say your team received a request to create an API that aims to provide
    data on products available for sale in an online store, as shown in *Figure 11*
    *.2* :'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你的团队收到了一个创建 API 的请求，该 API 的目的是提供在线商店中可销售产品的数据，如图 *图 11.2* 所示：
- en: '![Figure 11.2 – Online store consuming a Product API](img/B21788_11_02.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.2 – 在线商店消费产品 API](img/B21788_11_02.jpg)'
- en: Figure 11.2 – Online store consuming a Product API
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.2 – 在线商店消费产品 API
- en: 'In the example shown in *Figure 11* *.12* , the Product API would be an application
    in ASP.NET Core 9, containing good layer and package separation practices – let’s
    say it’s hosted in Microsoft Azure. From an application perspective, all expected
    API features have most likely been implemented according to functional and non-functional
    requirements. It is also expected that the quality process has been carried out
    satisfactorily, as shown in *Figure 11* *.3* :'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *图 11.12* 所示的示例中，产品 API 将是一个 ASP.NET Core 9 应用程序，包含良好的层和包分离实践——假设它托管在 Microsoft
    Azure 上。从应用程序的角度来看，所有预期的 API 功能很可能都已根据功能和非功能需求实现。还预期质量过程已经得到满意地执行，如图 *图 11.3*
    所示：
- en: '![Figure 11.3 – Development and publishing flow](img/B21788_11_03.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.3 – 开发和发布流程](img/B21788_11_03.jpg)'
- en: Figure 11.3 – Development and publishing flow
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.3 – 开发和发布流程
- en: '*Figure 11* *.3* shows a common scenario of a software development process,
    involving task management, requirements, coding, deployment, and application maintenance.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 11.3* 展示了一个软件开发过程的常见场景，涉及任务管理、需求、编码、部署和应用程序维护。'
- en: The main objective is to quickly meet market needs, that is, reducing the lead
    time for delivering value.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 主要目标是快速满足市场需求，即缩短交付价值的时间。
- en: The shorter the lead time, the better. For teams and organizations to be able
    to strike a good balance between agility and speed, it is very important to understand
    the factors in each of the process steps shown in *Figure 11* *.3* .
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 领先时间越短越好。为了使团队和组织能够在敏捷性和速度之间取得良好的平衡，了解*图11.3*中所示每个流程步骤中的因素非常重要。
- en: An application developed and delivered in an environment is not necessarily
    a cloud-native solution. As software engineers, we must go beyond the artifact
    generated after compiling a code, and, prepare applications to be able to take
    full advantage of cloud environments and handle growing user demand., we must
    be prepared to act in different areas of knowledge.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在某个环境中开发和交付的应用程序不一定是云原生解决方案。作为软件工程师，我们必须超越编译代码后生成的工件，并准备应用程序以便充分利用云环境并处理不断增长的用户需求，我们必须准备好在不同的知识领域采取行动。
- en: 'Therefore, cloud-native solutions must be based on factors such as the following:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，云原生解决方案必须基于以下因素：
- en: Infrastructure
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基础设施
- en: Modern design
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现代设计
- en: DevOps
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps
- en: Support services
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持服务
- en: Containers and orchestrators
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器和编排器
- en: Microservices
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微服务
- en: 'These factors can be represented graphically as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这些因素可以用以下图表表示：
- en: '![Figure 11.4 – Cloud-native factors](img/B21788_11_04.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图11.4 – 云原生因素](img/B21788_11_04.jpg)'
- en: Figure 11.4 – Cloud-native factors
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.4 – 云原生因素
- en: These factors form the basis for the development of cloud-native solutions and
    must be worked on continuously, since changes, both in service requirements and
    market needs, are constant.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这些因素是云原生解决方案发展的基础，并且必须持续工作，因为服务需求和市场需求的变化是持续的。
- en: Another important factor that we can notice in *Figure 11* *.4* is that there
    is no relationship between the factors and a specific cloud provider, such as
    Azure, AWS, or GCP. On the contrary, the cloud-native model is a vendor-agnostic
    paradigm, and therefore, contrary to what generally happens with hyped-up technologies,
    there are a range of adoption patterns, definitions, and good practices, maintained
    by the **Cloud Native Computing** **Foundation** ( **CNCF** ).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图11.4*中，我们可以注意到的一个重要因素是，这些因素与特定的云提供商（如Azure、AWS或GCP）之间没有关系。相反，云原生模型是一个供应商无关的范式，因此，与通常炒作技术的情况相反，存在一系列的采用模式、定义和最佳实践，这些由**云原生计算基金会**（**CNCF**）维护。
- en: Getting to know CNCF
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解CNCF
- en: CNCF is a consortium created in 2015 within the scope of the Linux Foundation.
    It involves more than 400 companies that aim to create a common language between
    technologies, standards, and best practices, independent of the supplier. CNCF
    aims to build sustainable solution ecosystems for cloud-native software by bringing
    together communities of developers, end users, and vendors.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: CNCF是2015年在Linux基金会范围内创建的一个联盟。它涉及超过400家公司，旨在在技术、标准和最佳实践之间建立一种共同语言，独立于供应商。CNCF旨在通过汇集开发者、最终用户和供应商的社区来构建可持续的云原生软件解决方案生态系统。
- en: CNCF promotes cloud-native technologies, supporting and maintaining projects
    that enable the adoption of practices such as containerization, microservices,
    and dynamic orchestration, promoting open standards and best practices, and allowing
    cloud-native applications to work in an interoperable manner. Additionally, CNCF
    supports innovation by nurturing a community of contributors and maintaining a
    neutral ground for the development of cutting-edge cloud-native tools and projects.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: CNCF推广云原生技术，支持并维护那些使容器化、微服务和动态编排等实践得以采用的项目，促进开放标准和最佳实践，并允许云原生应用程序以互操作的方式工作。此外，CNCF通过培养贡献者社区并维护一个中立的环境来支持创新，以促进前沿云原生工具和项目的发展。
- en: One of the important resources of CNCF is the technology landscape, which is
    a visual representation and interactive guide that maps the cloud-native ecosystem
    in a categorized way, displaying a wide range of tools, projects, and technologies
    that are part of or related to the mission of CNCF.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: CNCF的重要资源之一是技术景观，它是一个视觉表示和交互式指南，以分类方式映射云原生生态系统，展示了一系列工具、项目和与CNCF使命相关或属于CNCF的技术。
- en: The CNCF landscape
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: CNCF的生态系统
- en: 'The CNCF landscape is an excellent resource for organizations and professionals,
    helping you to understand the technology and tool options available, their relationships,
    and their roles in the cloud-native ecosystem. To learn more about the CNCF landscape,
    visit the following URL: [https://landscape.cncf.io](https://landscape.cncf.io)
    .'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: CNCF的景观是组织和专业人士的优秀资源，帮助您了解可用的技术和工具选项，它们之间的关系以及它们在云原生生态系统中的作用。要了解更多关于CNCF景观的信息，请访问以下网址：[https://landscape.cncf.io](https://landscape.cncf.io)。
- en: To understand how we could use CNCF to our advantage, let’s look at a development
    scenario for an ASP.NET Core 9 solution hosted on Microsoft Azure.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解我们如何利用CNCF的优势，让我们看看一个托管在Microsoft Azure上的ASP.NET Core 9解决方案的开发场景。
- en: Working with CNCF
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与CNCF合作
- en: 'Imagine the following scenario:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 想象以下场景：
- en: '*You are developing a web application using ASP.NET Core 9 and the application
    is hosted in Azure. You want to ensure that your application is developed using
    cloud-native principles and that it leverages the best tools available for deployment,
    monitoring,* *and management.*'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '*您正在使用ASP.NET Core 9开发一个Web应用程序，该应用程序托管在Azure上。您希望确保您的应用程序是按照云原生原则开发的，并且利用了可用的最佳工具进行部署、监控和管理工作。*'
- en: 'Let’s see how the use of CNCF can support us in the architectural definition
    and development of the application in the scenario:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看CNCF的使用如何支持我们在以下场景中定义应用程序架构和开发：
- en: '**Containerization strategy** : Based on the knowledge acquired in the previous
    chapter, you choose to use Docker and containerize your ASP.NET Core 9 application.
    To recap, Docker, a project formed by CNCF, allows you to package your application
    and its dependencies in a container, ensuring consistency in different environments.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器化策略**：基于上一章获得的知识，您选择使用Docker并将您的ASP.NET Core 9应用程序容器化。为了回顾，Docker是由CNCF形成的一个项目，允许您将应用程序及其依赖项打包到容器中，确保在不同环境中的一致性。'
- en: 'These are the benefits:'
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些是好处：
- en: Ensures application consistency across development, testing, and production
    environments
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保应用程序在开发、测试和生产环境之间的一致性
- en: Simplifies dependency management and isolation
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简化依赖管理和隔离
- en: '**Container orchestration** : For this application to be hosted, you decide
    to use Kubernetes, which is another CNCF graduate project, for container orchestration.
    **Azure Kubernetes Service** ( **AKS** ) provides a managed Kubernetes environment
    in Azure, making it easy to deploy, manage, and scale your containerized applications.
    AKS uses the same standards defined by the CNCF in relation to Kubernetes but
    abstracts the complexity of creating a cluster and offers several other services.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器编排**：为了使此应用程序托管，您决定使用Kubernetes，这是另一个CNCF毕业项目，用于容器编排。**Azure Kubernetes
    Service**（**AKS**）在Azure中提供了一个托管的Kubernetes环境，使得部署、管理和扩展您的容器化应用程序变得容易。AKS使用CNCF为Kubernetes定义的相同标准，但抽象了创建集群的复杂性，并提供了几项其他服务。'
- en: 'These are the benefits:'
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些是好处：
- en: Manages the container lifecycle, scaling, and load balancing
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理容器生命周期、扩展和负载均衡
- en: Ensures high availability and resilience
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保高可用性和弹性
- en: '**Automation** : You decide to use CI/CD tools such as Jenkins or GitHub Actions
    to automate your build, test, and deployment processes. These tools ensure that
    your code changes are continually integrated and deployed, improving your development
    workflow.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化**：您决定使用CI/CD工具，如Jenkins或GitHub Actions，来自动化您的构建、测试和部署流程。这些工具确保您的代码更改持续集成和部署，从而提高您的开发工作流程。'
- en: 'These are the benefits:'
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些是好处：
- en: Automates the deployment process, ensuring consistency and reducing the risk
    of human error
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化部署过程，确保一致性并降低人为错误的风险
- en: Accelerates the development cycle, enabling continuous integration and deployment
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加速开发周期，实现持续集成和部署
- en: '**Monitoring and logging** : Completing development, performing continuous
    integration, and achieving continuous deployment are just the first steps to working
    on a project as a cloud-native solutions software engineer. It’s important to
    incorporate observability tools such as **Prometheus** and **Grafana** , both
    incubating CNCF projects, to monitor the performance and health of your application.
    Prometheus collects metrics and Grafana visualizes them, providing insights into
    your application’s behavior. Azure Monitor is also an observability tool featured
    in the CNCF landscape. Furthermore, other types of tools such as **OpenTelemetry**
    , also incubated by CNCF, would be a great option for applications to have a vendor-agnostic
    collector, which reduces the dependence on proprietary libraries in applications.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控和日志记录**：作为云原生解决方案软件工程师，完成开发、执行持续集成和实现持续部署只是项目工作的第一步。重要的是要整合可观察性工具，如**Prometheus**和**Grafana**，这两个都是
    CNCF 孵化项目，以监控您应用程序的性能和健康状况。Prometheus 收集指标，Grafana 将其可视化，为您提供有关应用程序行为的洞察。Azure
    Monitor 也是 CNCF 生态系统中特色的可观察性工具。此外，其他类型的工具，如由 CNCF 孵化的**OpenTelemetry**，对于应用程序来说，拥有一个无厂商依赖的收集器是一个很好的选择，这可以减少应用程序对专有库的依赖。'
- en: 'These are the benefits:'
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些是好处：
- en: Provides real-time monitoring and alerts for your application
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为您的应用程序提供实时监控和警报
- en: Helps you quickly diagnose and resolve performance issues
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 帮助您快速诊断和解决性能问题
- en: Leveraging CNCF and its landscape provides numerous tools and best practices
    for developing, deploying, and managing cloud-native applications. By adopting
    these tools, a software engineer working on an ASP.NET Core 9 application hosted
    in Azure can ensure that their application is scalable, resilient, and maintainable.
    Containerization with Docker, orchestration with Kubernetes, observability with
    Prometheus and Grafana, and automated CI/CD pipelines with Jenkins or GitHub Actions
    are just a few examples of how CNCF projects can enhance your cloud-native development
    workflow.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 利用 CNCF 及其生态系统，为开发、部署和管理云原生应用程序提供了众多工具和最佳实践。通过采用这些工具，在 Azure 上托管 ASP.NET Core
    9 应用程序的软件工程师可以确保他们的应用程序是可扩展的、有弹性的和可维护的。使用 Docker 容器化、使用 Kubernetes 进行编排、使用 Prometheus
    和 Grafana 进行可观察性，以及使用 Jenkins 或 GitHub Actions 进行自动化的 CI/CD 管道，只是 CNCF 项目如何增强您的云原生开发工作流程的几个例子。
- en: However, the scenario mentioned previously provides an Azure-agnostic solution
    model, making it possible to be hosted on different cloud providers, as each of
    the tools mentioned follows the standards established by CNCF for cloud-provider-agnostic
    solutions.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，之前提到的场景提供了一个与 Azure 无关的解决方案模型，这使得它可以在不同的云提供商上托管，因为提到的每个工具都遵循 CNCF 为无云提供商解决方案制定的标准。
- en: It is very important to regularly visit the CNCF website to be aware of news
    and changes in cloud models and analyze the tools available in the CNCF landscape
    for the needs of your solutions. These resources will help you create increasingly
    powerful solutions that adapt to the different needs of your organization and
    the market.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 定期访问 CNCF 网站，了解云模型的新闻和变化，并分析 CNCF 生态系统中可用的工具，以满足您解决方案的需求，这一点非常重要。这些资源将帮助您创建越来越强大的解决方案，以适应您组织和市场不同的需求。
- en: We know that CNCF is an important resource that sets the standard for cloud-native
    solutions and should be added to any software engineer’s toolbox. Additionally,
    there are other principles that, in a practical way, guide us in the process of
    developing cloud-native solutions. ASP.NET Core 9 can help us implement these
    principles, such as the **twelve-factor app methodology** . We will discuss these
    principles in the next section.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道 CNCF 是一个重要的资源，它为云原生解决方案设定了标准，应该被添加到任何软件工程师的工具箱中。此外，还有一些其他原则，以实际的方式指导我们在开发云原生解决方案的过程。ASP.NET
    Core 9 可以帮助我们实现这些原则，例如**十二要素应用方法**。我们将在下一节中讨论这些原则。
- en: The twelve-factor app principles
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 十二要素应用原则
- en: The twelve-factor app methodology ( [https://12factor.net](https://12factor.net)
    ) is a set of best practices designed to help developers build modern, scalable,
    and maintainable cloud-native applications. It was created by Heroku developers
    to provide a framework for developing applications that can be deployed and managed
    in the cloud.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 十二要素应用方法（[https://12factor.net](https://12factor.net)）是一套最佳实践，旨在帮助开发者构建现代、可扩展和可维护的云原生应用程序。它是由
    Heroku 开发者创建的，旨在为开发可以部署和管理的云应用程序提供框架。
- en: Heroku
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: Heroku
- en: According to the website’s own definition, Heroku is a cloud platform that allows
    companies to create, deliver, monitor, and scale applications.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 根据网站自身的定义，Heroku 是一个云平台，允许公司创建、交付、监控和扩展应用程序。
- en: Heroku is a cloud PaaS offering, founded in 2007, that allows developers to
    build, run, and operate applications entirely in the cloud in a simplified way.
    To learn more, visit [https://www.heroku.com/home](https://www.heroku.com/home)
    .
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: Heroku 是一个成立于 2007 年的云平台即服务（PaaS），允许开发者以简化的方式在云中构建、运行和操作应用程序。了解更多信息，请访问 [https://www.heroku.com/home](https://www.heroku.com/home)。
- en: 'The twelve-factor app methodology, as the name suggests, has twelve factors
    or principles:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名所示，十二要素应用方法包含十二个要素或原则：
- en: '**Code base** : Use a code base tracked in version control.'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**代码库**：使用版本控制跟踪的代码库。'
- en: '**Dependencies** : Explicitly declare and isolate dependencies.'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**依赖项**：明确声明并隔离依赖项。'
- en: '**Config** : Store the configuration in the environment.'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**配置**：将配置存储在环境中。'
- en: '**Backing services** : Treat supporting services as attached resources.'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**后端服务**：将支持服务视为附加资源。'
- en: '**Build, release, run** : Strictly separate the build and run stages.'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**构建、发布、运行**：严格分离构建和运行阶段。'
- en: '**Processes** : Run the application as one or more stateless processes.'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**进程**：以一个或多个无状态进程运行应用程序。'
- en: '**Port binding** : Export services via port binding.'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**端口绑定**：通过端口绑定导出服务。'
- en: '**Concurrency** : Expansion through the process model.'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**并发**：通过进程模型进行扩展。'
- en: '**Disposability** : Maximize robustness with fast startup and smooth shutdown.'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**可处置性**：通过快速启动和平稳关闭最大化鲁棒性。'
- en: '**Dev/prod parity** : Keep development, staging, and production as similar
    as possible.'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**开发/生产一致性**：尽可能保持开发、预发布和生产环境的相似性。'
- en: '**Logs** : Treat logs as streams of events.'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**日志**：将日志视为事件流。'
- en: '**Administrative processes** : Perform administrative/management tasks as single
    processes.'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**管理流程**：作为单个进程执行管理/管理任务。'
- en: Let’s get into more detail about each of the factors mentioned.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地了解所提到的每个要素。
- en: Code base
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码库
- en: During the solution development cycle, you should maintain the source code in
    a remote repository, such as a Git-based repository.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在解决方案开发周期中，你应该在远程仓库中维护源代码，例如基于 Git 的仓库。
- en: The code base factor entails that there should be a code base for each application
    context, allowing the correct separation of responsibilities and improving code
    management.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 代码库要素意味着每个应用程序上下文都应该有一个代码库，这有助于正确分离责任并提高代码管理。
- en: '*Figure 11* *.5* illustrates the management of the different contexts of an
    application, such as configurations, source code, and infrastructure scripts.
    Each of these contexts can be distributed in different environments, at different
    times in the development flow.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 11.5* 描述了应用程序不同上下文的管理，例如配置、源代码和基础设施脚本。这些上下文可以在开发流程的不同时间、不同环境中进行分发。'
- en: '![Figure 11.5 – Code base management](img/B21788_11_05.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.5 – 代码库管理](img/B21788_11_05.jpg)'
- en: Figure 11.5 – Code base management
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.5 – 代码库管理
- en: Despite being a principle considered natural during the application development
    flow, its importance goes beyond source code management on remote servers. Development
    teams must take ownership of the end-to-end solution, defining source code management
    processes such as the use of branches, development standards, code review, quality
    processes, and documentation.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在应用程序开发流程中被视为一个自然的原则，但其重要性超出了远程服务器上的源代码管理。开发团队必须对端到端解决方案负责，定义源代码管理流程，例如分支的使用、开发标准、代码审查、质量流程和文档。
- en: In cloud environments, it is common to have one repository for managing application
    code and another repository specifically for storing infrastructure code. The
    contextualization and separation of contexts in repositories allow for constant
    collaboration and management between the development and operations teams.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在云环境中，通常有一个用于管理应用程序代码的仓库，另一个专门用于存储基础设施代码的仓库。在仓库中实现上下文的具体化和分离，允许开发团队和运维团队之间持续协作和管理。
- en: The code base principle is the basis for all other principles. Next, we will
    learn about dependencies.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 代码库原则是所有其他原则的基础。接下来，我们将学习关于依赖项的内容。
- en: Dependencies
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 依赖项
- en: Dependencies are part of application development, as we have already seen in
    some examples in the book when using NuGet packages. Using packages brings benefits
    such as reusability and, together with package management mechanisms, allows for
    easy package updates. Most programming languages currently provide extensibility
    mechanisms based on package management.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖关系是应用程序开发的一部分，正如我们在书中的一些示例中已经看到的那样，当使用 NuGet 包时。使用包带来了诸如可重用性等好处，并且与包管理机制一起，可以轻松更新包。目前大多数编程语言都提供了基于包管理的可扩展性机制。
- en: The dependencies principle defines that dependencies must be managed in a manifest
    file and a package management tool must be used.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖关系原则定义了依赖关系必须在清单文件中管理，并且必须使用包管理工具。
- en: For example, ASP.NET Core 9 applications have the NuGet package manager, and
    all dependencies are managed through the **<ProjectName>.csproj** file, which
    contains the references and versions of the packages used in the application.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，ASP.NET Core 9 应用程序有 NuGet 包管理器，所有依赖项都通过 **<ProjectName>.csproj** 文件进行管理，该文件包含应用程序中使用的包的引用和版本。
- en: Through this feature, we can benefit from the interoperability of the .NET platform,
    and in conjunction with the .NET CLI tool, we are able to obtain dependencies
    in a simple way, executing the **dotnet restore** command and allowing us to build
    and generate deployment packages without running the risk of human error.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 通过此功能，我们可以从 .NET 平台的互操作性中受益，并且与 .NET CLI 工具结合使用，我们可以以简单的方式获取依赖项，执行 **dotnet
    restore** 命令，并允许我们构建和生成部署包，而无需担心人为错误的风险。
- en: Using package management avoids managing dependency files manually.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 使用包管理可以避免手动管理依赖文件。
- en: Just as dependencies are necessary in an application, configurations are important.
    Let’s understand how the config factor helps in configuration management.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 正如依赖关系在应用程序中是必要的，配置同样重要。让我们了解配置因子如何帮助配置管理。
- en: Config
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置
- en: All applications have some type of configuration file, which can include sensitive
    information such as encryption keys and connection strings. Keeping settings in
    configuration files is an excellent practice and avoids having to change the source
    code if there is a configuration change.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 所有应用程序都有某种类型的配置文件，这可能包括敏感信息，如加密密钥和连接字符串。在配置文件中保持设置是一种很好的做法，可以避免在配置更改时需要更改源代码。
- en: In the cloud, applications generally have different environments to ensure that
    with each update, the quality of the solution remains high. Furthermore, production
    environments have access restrictions for security reasons; application configurations
    in production environments should not be accessible.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在云中，应用程序通常有不同的环境以确保每次更新后，解决方案的质量保持较高。此外，出于安全原因，生产环境有访问限制；生产环境中的应用程序配置不应可访问。
- en: 'The config factor says that configurations must be kept separate from code,
    making it easier to manage different environments. *Figure 11* *.6* illustrates
    the approach proposed by the config factor:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 配置因子表示配置必须与代码分开，这使得管理不同的环境变得更容易。*图 11.6* 说明了配置因子提出的方法：
- en: '![Figure 11.6 – Configuration server and environments](img/B21788_11_06.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.6 – 配置服务器和环境](img/B21788_11_06.jpg)'
- en: Figure 11.6 – Configuration server and environments
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.6 – 配置服务器和环境
- en: As we can see in *Figure 11* *.6* , the development flow uses an automation
    pipeline, CI, and CD, and when the artifact is obtained, it will be published
    in different environments.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们在 *图 11.6* 中所见，开发流程使用自动化管道、CI 和 CD，当获得工件时，它将在不同的环境中发布。
- en: The application then obtains its respective configurations based on the execution
    environment.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序随后根据执行环境获取其相应的配置。
- en: In [*Chapter 10*](B21788_10.xhtml#_idTextAnchor162) , we learned how to manage
    application configurations and behaviors using Azure App Configuration. This way,
    we can abstract the management of developers’ configurations and define access
    to sensitive configurations, and the application can be dynamically deployed in
    different environments.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第 10 章*](B21788_10.xhtml#_idTextAnchor162) 中，我们学习了如何使用 Azure App Configuration
    管理应用程序配置和行为。这样，我们可以抽象化开发人员配置的管理，并定义对敏感配置的访问，并且应用程序可以在不同的环境中动态部署。
- en: Configurations are very important in the context of any application, as are
    the integrations that are made. The next factor suggests a best practice that
    directly influences the architectural definitions of a solution.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何应用程序的上下文中，配置非常重要，所做的集成也是如此。下一个因素建议了一种最佳实践，这直接影响了解决方案的架构定义。
- en: Backing services
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 后端服务
- en: Most applications have some dependency on external resources or, in this case,
    backing services. These resources can be databases, email servers, and storage
    servers, among other services.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数应用程序都对外部资源或在这种情况下，后端服务有一定的依赖。这些资源可以是数据库、电子邮件服务器和存储服务器，以及其他服务。
- en: 'Applications must be prepared to isolate such dependencies and, at the same
    time, be able to use these services independently of the execution environment,
    without any changes to the code. Backing services must be exposed through a URL
    and respective credentials, depending on the resource. Resources must be maintained
    and made available in isolation and applications must reference them. Let’s look
    at *Figure 11* *.7* :'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序必须准备好隔离这样的依赖关系，同时，能够独立于执行环境使用这些服务，而无需对代码进行任何更改。后端服务必须通过URL和相应的凭据公开，具体取决于资源。资源必须被维护并在隔离中提供，应用程序必须引用它们。让我们看看*图11.7*：
- en: '![Figure 11.7 – Interaction between an application and backing services](img/B21788_11_07.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![图11.7 – 应用程序与后端服务之间的交互](img/B21788_11_07.jpg)'
- en: Figure 11.7 – Interaction between an application and backing services
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.7 – 应用程序与后端服务之间的交互
- en: As we can see in *Figure 11* *.7* , the application’s architectural model proposes
    isolation between services that are consumed externally, such as database, message
    broker, and storage services. When reflecting on architectural approaches at the
    source code level, the use of **hexagonal architecture** or **Onion Architecture**
    can help in this context of service isolation.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们在*图11.7*中可以看到，该应用程序的架构模型提出了外部消费的服务之间的隔离，例如数据库、消息代理和存储服务。当在源代码级别反思架构方法时，使用**六边形架构**或**洋葱架构**可以帮助在这种服务隔离的背景下。
- en: Hexagonal architecture and Onion Architecture
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 六边形架构和洋葱架构
- en: Hexagonal architecture (or ports-and-adapters architecture) is a design pattern
    that aims to create a clear separation between core business logic and external
    elements, such as user interfaces, databases, and other services. In this architecture,
    the core application logic is in the center, surrounded by several ports, which
    define interfaces for different functionalities. Adapters are the specific implementation
    of the interfaces for interacting with some external resource.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 六边形架构（或端口-适配器架构）是一种设计模式，旨在在核心业务逻辑和外部元素之间创建清晰的分离，例如用户界面、数据库和其他服务。在这种架构中，核心应用程序逻辑位于中心，周围环绕着几个端口，这些端口定义了不同功能性的接口。适配器是用于与某些外部资源交互的接口的具体实现。
- en: The Onion Architecture, also a design pattern, emphasizes the separation of
    concerns within an application. It places the core domain in the center, surrounded
    by layers that contain infrastructure and presentation concerns. The innermost
    layer represents the domain model and business logic, which are independent of
    external concerns. Surrounding this core are layers for application services,
    followed by infrastructure and user interfaces in the outermost layer. Dependencies
    flow inward, which means that external layers can depend on internal layers, but
    not vice versa.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 洋葱架构，也是一种设计模式，强调应用程序内部关注点的分离。它将核心领域放在中心，周围是包含基础设施和表示关注点的层。最内层代表领域模型和业务逻辑，它们独立于外部关注点。围绕这个核心是应用程序服务层，然后是基础设施和用户界面层，最外层。依赖关系流向内部，这意味着外部层可以依赖于内部层，但反之则不行。
- en: To learn more about the hexagonal architecture and the Onion Architecture, visit
    [https://alistair.cockburn.us/hexagonal-architecture/](https://alistair.cockburn.us/hexagonal-architecture/)
    and [https://jeffreypalermo.com/blog/the-onion-architecture-part-1/](https://jeffreypalermo.com/blog/the-onion-architecture-part-1/)
    .
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于六边形架构和洋葱架构的信息，请访问[https://alistair.cockburn.us/hexagonal-architecture/](https://alistair.cockburn.us/hexagonal-architecture/)和[https://jeffreypalermo.com/blog/the-onion-architecture-part-1/](https://jeffreypalermo.com/blog/the-onion-architecture-part-1/)。
- en: 'The backing services factor, if analyzed further, allows us to reflect on other
    architectural aspects that are important in a cloud environment, such as resilience
    and availability. As applications depend on other services, certain questions
    arise, such as these:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 如果进一步分析后备服务因素，我们可以反思在云环境中重要的其他架构方面，例如弹性和可用性。由于应用程序依赖于其他服务，会引发某些问题，例如：
- en: '*How should the application behave if the database or cache is* *not working?*'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*如果数据库或缓存不工作，应用程序应该如何表现？*'
- en: '*What if the email service is* *not working?*'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*如果电子邮件服务* *不工作怎么办？*'
- en: The answers to these questions allow us to expand our horizons beyond source
    code, moving us toward cloud-native thinking.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这些问题的答案使我们能够超越源代码的视野，转向云原生思维。
- en: The isolation proposed by the backing services factor allows automation approaches
    to be used in the value delivery flow.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 后备服务因素提出的隔离允许在价值交付流程中使用自动化方法。
- en: Build, release, run
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建、发布、运行
- en: In [*Chapter 10*](B21788_10.xhtml#_idTextAnchor162) , we learned about the importance
    of DevOps and automated processes, in the *Understanding the DevOps approach with*
    *CI/CD* section.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第 10 章*](B21788_10.xhtml#_idTextAnchor162) 中，我们学习了 DevOps 和自动化流程的重要性，在 *通过
    CI/CD 理解 DevOps 方法* 部分中。
- en: Automation is exactly the concept defined by the build, release, run factor.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化正是构建、发布、运行因素所定义的概念。
- en: The CI process is associated with the moment of building the artifact, where
    processes such as downloading dependencies and building and executing quality
    and security flows are carried out, in addition to making the artifact available
    to be consumed by another process, such as CD.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: CI 流程与构建工件的时刻相关联，此时执行下载依赖项、构建和执行质量和安全流程，以及使工件可供其他流程（如 CD）使用。
- en: '*Figure 11* *.8* demonstrates the CI process:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 11.8* 展示了 CI 流程：'
- en: '![Figure 11.8 – CI and the pull-request approach](img/B21788_11_08.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.8 – 持续集成与拉取请求方法](img/B21788_11_08.jpg)'
- en: Figure 11.8 – CI and the pull-request approach
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.8 – 持续集成与拉取请求方法
- en: In addition to the CI process, we have CD, whose objective is to deploy the
    artifact in different environments.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 CI 流程外，我们还有 CD，其目标是部署不同环境中的工件。
- en: '*Figure 11* *.9* demonstrates the CD process:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 11.9* 展示了 CD 流程：'
- en: '![Figure 11.9 – CD with the rollback approach](img/B21788_11_09.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.9 – 使用回滚方法的 CD](img/B21788_11_09.jpg)'
- en: Figure 11.9 – CD with the rollback approach
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.9 – 使用回滚方法的 CD
- en: As seen in *Figure 11* *.9* , the use of automated processes brings great benefits
    to the CD flow. CD is executed after CI, and if there is any inconsistency in
    any environment, or even in the production environment, rollback processes can
    be executed quickly to publish the latest stable version of the application again.
    Furthermore, other techniques can be used in this process, such as feature toggles,
    as discussed in [*Chapter 10*](B21788_10.xhtml#_idTextAnchor162) .
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 如 *图 11.9* 所示，自动流程的使用给 CD 流程带来了巨大的好处。CD 在 CI 之后执行，如果任何环境中存在不一致，甚至在生产环境中，可以快速执行回滚流程，再次发布应用程序的最新稳定版本。此外，还可以在此过程中使用其他技术，例如功能开关，如
    [*第 10 章*](B21788_10.xhtml#_idTextAnchor162) 中所述。
- en: The next factor is very important for cloud-native environments.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个因素对于云原生环境非常重要。
- en: Processes
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 流程
- en: The processes factor defines that an application should be executed in an environment,
    independently and without the state. If state storage is required, it must be
    stored through external support services. Stateless processes are easily sized
    and replaced without losing the state, improving reliability and scalability.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 流程因素定义了应用程序应在无状态的环境中独立执行。如果需要状态存储，必须通过外部支持服务进行存储。无状态流程易于调整大小和替换，而不会丢失状态，从而提高可靠性和可伸缩性。
- en: '*Figure 11* *.10* shows a high-level view of an application running in different
    processes and interacting with a database-based state persistence model.'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 11.10* 显示了在不同流程中运行的应用程序及其与基于数据库的状态持久化模型的交互的高级视图。'
- en: '![Figure 11.10 – Managing application states with a database](img/B21788_11_10.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.10 – 使用数据库管理应用程序状态](img/B21788_11_10.jpg)'
- en: Figure 11.10 – Managing application states with a database
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.10 – 使用数据库管理应用程序状态
- en: Web APIs developed in ASP.NET Core are an example of stateless applications,
    where there is no state management through sessions in memory. Each request has
    the context of the information that needs to be processed by the API, as we learned
    in [*Chapter 6*](B21788_06.xhtml#_idTextAnchor093) , where we implement authentication
    and authorization. For each request, the user information is sent in the request
    header as a token. Then, the API, using ASP.NET Core 9 middleware, contextualizes
    the request with the user’s information, allowing, or not, an action to be performed.
    Each request is independent, and the state is obtained during the request cycle
    of the request.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ASP.NET Core 中开发的 Web API 是无状态应用程序的例子，其中没有通过内存中的会话进行状态管理。每个请求都有 API 需要处理的信息的上下文，正如我们在
    [*第 6 章*](B21788_06.xhtml#_idTextAnchor093) 中所学，在那里我们实现了身份验证和授权。对于每个请求，用户信息作为令牌发送在请求头中。然后，API
    使用 ASP.NET Core 9 中间件将用户的上下文与请求相关联，允许或不允许执行操作。每个请求都是独立的，状态是在请求周期中获得的。
- en: This is an important feature that allows applications to be ableto scale dynamically
    , such as the execution of multiple instances of the same application in a Docker
    container.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个重要的功能，允许应用程序能够动态扩展，例如在 Docker 容器中执行同一应用程序的多个实例。
- en: 'See the example shown in *Figure 11* *.11* :'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅 *图 11.11* 中的示例：
- en: '![Figure 11.11 – Stateless application](img/B21788_11_11.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.11 – 无状态应用程序](img/B21788_11_11.jpg)'
- en: Figure 11.11 – Stateless application
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.11 – 无状态应用程序
- en: 'The diagram presented in *Figure 11* *.11* illustrates how an application performs
    several stateless processes (using container instances) to deal with requests.
    The following is a brief description of each component of the diagram:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 11.11* 中展示的图解说明了应用程序如何通过容器实例执行多个无状态过程来处理请求。以下是图中每个组件的简要描述：'
- en: '**User** : The user makes an API request.'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户**：用户发起 API 请求。'
- en: '**API Gateway** : The API gateway receives the request and acts as a load balancer.'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**API 网关**：API 网关接收请求并充当负载均衡器。'
- en: '**Load Balancer** : The load balancer distributes API requests to various instances
    of the container application.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**负载均衡器**：负载均衡器将 API 请求分发到容器应用程序的各个实例。'
- en: '**Container Instances** : Several container instances process requests independently.'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器实例**：几个容器实例独立处理请求。'
- en: '**Database** : Each container instance interacts with a shared database to
    process the request and recover or store the necessary data.'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据库**：每个容器实例与共享数据库交互以处理请求并恢复或存储必要的数据。'
- en: '**Response Flow** : After requesting the request, each container instance sends
    the response back through the API gateway, which returns the final response to
    the user.'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**响应流**：请求后，每个容器实例通过 API 网关发送响应，API 网关将最终响应返回给用户。'
- en: In addition to the processes factor, it is essential to understand the concept
    of port binding.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 除了进程因素外，理解端口绑定的概念也是至关重要的。
- en: Port binding
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 端口绑定
- en: Like the previous factor, here, each application should be mapped and made available
    at a specific address and via a specific port.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面的因素一样，这里，每个应用程序都应该映射并可通过特定的地址和端口提供。
- en: 'If each server has an address and URL, each server can be responsible for responding
    to multiple applications at the same time. To differentiate which application
    will respond to a particular request, you must map the port. Thus, **Service A**
    can be hosted on a server through port 4040, **Service B** through port 3030,
    and **Service C** through port 8080, as in *Figure 11* *.12* :'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 如果每个服务器都有一个地址和 URL，则每个服务器可以同时负责响应多个应用程序。为了区分哪个应用程序将响应特定的请求，必须映射端口。因此，**服务 A**
    可以通过端口 4040 在服务器上托管，**服务 B** 通过端口 3030，**服务 C** 通过端口 8080，如 *图 11.12* 所示：
- en: '![Figure 11.12 – Port binding](img/B21788_11_12.jpg)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.12 – 端口绑定](img/B21788_11_12.jpg)'
- en: Figure 11.12 – Port binding
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.12 – 端口绑定
- en: When performing the applications developed in this book using the **dotnet run**
    command, we observed that a URL is provided in the format **http:// localhost:<port>**
    . The door may vary from environment to environment, and the application may define
    which door will be executed.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用本书中开发的 **dotnet run** 命令执行应用程序时，我们观察到提供了一个格式为 **http:// localhost:<端口>**
    的 URL。端口号可能因环境而异，应用程序可以定义哪个端口将被执行。
- en: 'This pattern even applies when adopting the container strategy using Docker,
    where we map the host and container doors, as shown in *Figure 11* *.13* :'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 当采用 Docker 的容器策略时，这种模式同样适用，其中我们将主机和容器的端口映射，如 *图 11.13* 所示：
- en: '![Figure 11.13 – Port binding for containers](img/B21788_11_13.jpg)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.13 – 容器的端口绑定](img/B21788_11_13.jpg)'
- en: Figure 11.13 – Port binding for containers
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.13 – 容器的端口绑定
- en: In *Figure 11* *.13* , there are three instances of the same application, responding
    to different ports through the host. Despite being the same application, each
    container is performed in an isolated process. Having different instances of a
    container is a common scenario in applications that require scalability for the
    needs of competing requests from users, which is the theme of the next factor.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在图 11.13 中，有三个相同应用程序的实例，通过主机响应不同的端口。尽管是相同的应用程序，但每个容器都在一个隔离的进程中执行。拥有不同实例的容器是应用程序中常见的场景，这些应用程序需要扩展以应对来自用户的竞争性请求，这是下一个因素的主题。
- en: Concurrency
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 并发
- en: The cloud environment allows applications to deal with different needs in a
    dynamic way. The characteristic of elasticity not only enables software engineers
    to keep their applications working properly according to user needs but also allows
    insights that help optimize applications.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 云环境允许应用程序以动态方式处理不同的需求。弹性的特性不仅使软件工程师能够根据用户需求保持应用程序正常运行，而且还允许优化应用程序的见解。
- en: Each application hosted in an environment needs resources to run, whether memory,
    CPU, or storage. These metrics are of paramount importance to define the limits
    of the applications and determine when it is necessary to scale.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个环境中托管的应用程序需要资源来运行，无论是内存、CPU还是存储。这些指标对于定义应用程序的限制以及确定何时需要扩展至关重要。
- en: Generally speaking, the use of techniques with cargo and monitoring tests should
    be a constant part of this continuous application flow, directing decisions that
    are based on concrete data.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 通常来说，使用带有监控和测试技术的策略应该是持续应用程序流程的组成部分，指导基于具体数据的决策。
- en: 'If there is a need for scalability, we must define whether the strategy will
    be horizontal or vertical, as shown in the following example:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要扩展性，我们必须定义策略将是水平还是垂直，如下面的示例所示：
- en: '![Figure 11.14 – Vertical and horizontal scalability](img/B21788_11_14.jpg)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.14 – 垂直和水平扩展性](img/B21788_11_14.jpg)'
- en: Figure 11.14 – Vertical and horizontal scalability
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.14 – 垂直和水平扩展性
- en: 'Basically, there are two types of scalability:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，有两种类型的扩展性：
- en: '**Vertical scalability** : This is applied when adding more features to a server,
    such as memory, CPU, or storage, to support application processing.'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**垂直扩展性**：当向服务器添加更多功能时，例如内存、CPU或存储，以支持应用程序处理时，会应用此方法。'
- en: '**Horizontal scalability** : Horizontal scalability involves the creation of
    new instances of servers, such as clusters. In this approach, processing is staggered
    between servers to support load demand through a load balancer. Horizontal scalability
    is a strategy widely used by orchestrators such as Kubernetes to create different
    instances of an application container to support constant user requests.'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**水平扩展性**：水平扩展性涉及创建新的服务器实例，例如集群。在此方法中，处理在服务器之间交错进行，通过负载均衡器支持负载需求。水平扩展性是 Kubernetes
    等编排器广泛使用的策略，用于创建应用程序容器的不同实例以支持持续的用户请求。'
- en: In addition to the points mentioned, each application, in its context, may depend
    on different types of simultaneous processing, which can be divided into background
    processes. Perhaps your application includes the asynchronous processing of an
    HTTP request and at the same time information is generated that must be processed
    in the background because it is a long-term execution. Therefore, its architecture
    can provide a web application for HTTP processing and another application that
    works with a worker, capable of processing long-term requests in the background.
    In conjunction with this strategy, the web application and the processes in the
    background, following the characteristics of the twelve-factor application, can
    be scaled vertically and/or horizontally.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 除了提到的点之外，每个应用程序在其上下文中可能依赖于不同类型的并发处理，这些处理可以划分为后台进程。也许你的应用程序包括异步处理 HTTP 请求，同时生成必须后台处理的信息，因为它是一个长期执行的任务。因此，其架构可以提供一个用于
    HTTP 处理的 Web 应用程序，以及一个与工作进程协同工作的应用程序，能够后台处理长期请求。与这种策略相结合，遵循十二要素应用程序特性的 Web 应用程序和后台进程可以垂直和/或水平扩展。
- en: In the next section, we will understand disposability.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将了解可处置性。
- en: Disposability
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可处置性
- en: The principle of disposability emphasizes the importance of maximizing the robustness
    of an application, including fast startup and graceful closure, allowing the application
    to deal with rapid changes of scale, deployment, and code with no impact on user
    experience or system stability.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 可丢弃原则强调最大化应用程序的鲁棒性，包括快速启动和优雅关闭，使应用程序能够处理快速变化的规模、部署和代码，而不会影响用户体验或系统稳定性。
- en: Fast startup times enable quick outages and recoveries, while graceful shutdowns
    ensure that ongoing requests are completed and resources are released correctly
    before application interruption.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 快速启动时间可以实现快速停机并迅速恢复，而优雅的关闭确保在应用程序中断之前，正在进行的请求被完成，资源被正确释放。
- en: In [*Chapter 10*](B21788_10.xhtml#_idTextAnchor162) , when learning about the
    principles of Docker, we used a multi-stage build, with the aim of generating
    an optimized container image, which supports the rapid boot of the container if
    necessary.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第 10 章*](B21788_10.xhtml#_idTextAnchor162)中，当我们学习 Docker 的原理时，我们使用了多阶段构建，目的是生成一个优化的容器镜像，如果需要，它支持容器的快速启动。
- en: Moreover, the principle of disposability helps maintain system resilience and
    reliability, allowing applications to better resist hardware failures, producing
    dynamic cloud environments where instances can be created and destroyed frequently.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，可丢弃原则有助于维护系统弹性和可靠性，使应用程序能够更好地抵抗硬件故障，产生动态云环境，其中实例可以频繁地创建和销毁。
- en: 'See *Figure 11* *.15* :'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '见 *图 11* *.15* :'
- en: '![Figure 11.15 – Disposability example](img/B21788_11_15.jpg)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.15 – 可丢弃示例](img/B21788_11_15.jpg)'
- en: Figure 11.15 – Disposability example
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.15 – 可丢弃示例
- en: The diagram presented shows how applications should deal with quick startup
    and graceful startup processes to maintain robustness and reliability in a native
    cloud environment.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 展示的图表说明了应用程序应该如何处理快速启动和优雅启动过程，以在原生云环境中保持鲁棒性和可靠性。
- en: 'In the following points, we can see the details of each item mentioned in the
    diagram:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下各点中，我们可以看到图表中提到的每个项目的详细信息：
- en: '**User** : The user makes a request for load balancing.'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户**：用户发起负载均衡请求。'
- en: '**Load Balancer** : The load balancer distributes input requests to the available
    container instances.'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**负载均衡器**：负载均衡器将输入请求分配到可用的容器实例。'
- en: '**Scaling** :'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**扩展** :'
- en: '**New Container Instance - Starting Up** : Upon scaleout, a new container instance
    is created. The application starts up quickly, making the instance ready to handle
    requests in minimal time.'
  id: totrans-258
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**新容器实例 - 启动**：在扩展时，创建一个新的容器实例。应用程序快速启动，使实例在最短时间内准备好处理请求。'
- en: The load balancer begins to distribute requests to this new instance once it
    is ready.
  id: totrans-259
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦准备就绪，负载均衡器开始将请求分配到这个新实例。
- en: '**Shutdown** :'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关闭** :'
- en: '**Old Container Instance** : When scaling in or deploying a new version, the
    load balancer stops sending new requests to the old container instance.'
  id: totrans-261
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**旧容器实例**：在缩放或部署新版本时，负载均衡器停止向旧容器实例发送新请求。'
- en: '**Graceful Shutdown** : The old instance completes any in-progress requests
    before shutting down, ensuring no request is abruptly terminated.'
  id: totrans-262
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优雅关闭**：旧实例在关闭之前完成任何正在进行的请求，确保没有请求被突然终止。'
- en: '**Terminated** **Instance** : After completing all requests and releasing resources,
    the old instance is terminated.'
  id: totrans-263
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**终止** **实例**：在完成所有请求并释放资源后，旧实例被终止。'
- en: In ASP.NET Core 9, you can implement graceful shutdown by setting up the hosting
    and handling of cancellation tokens to ensure that continuous requests are completed
    before application shutdown.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ASP.NET Core 9 中，你可以通过设置托管和取消令牌的处理来实现优雅关闭，以确保在应用程序关闭之前完成连续请求。
- en: 'Let’s look at an example of code in a **Program.cs** file:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 **Program.cs** 文件中的一个代码示例：
- en: '[PRE0]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the previous code, the **app.Services.GetService<IHostApplicationLifetime>()**
    service was configured to deal with application stop events.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，**app.Services.GetService<IHostApplicationLifetime>()** 服务被配置来处理应用程序停止事件。
- en: The **host.ApplicationStopping.Register** method allows you to register a callback
    that will be invoked when the application is stops.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '**host.ApplicationStopping.Register** 方法允许你注册一个回调，当应用程序停止时将被调用。'
- en: In a registered call return, you can perform the necessary cleaning tasks, such
    as registration shutdown events, release of resources, and filling in ongoing
    tasks.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在注册的回调返回中，你可以执行必要的清理任务，例如注册关闭事件、释放资源以及填写正在进行的任务。
- en: By following this approach, you can ensure that your app is gracefully stopped,
    keeping robustness and reliability. In addition, it is also important that we
    have consistency at the level of applications and environments, as we will understand
    when looking at the next factor, dev/prod parity.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循这种方法，你可以确保你的应用能够优雅地停止，保持其健壮性和可靠性。此外，在应用和环境层面保持一致性也非常重要，因为当我们查看下一个因素，即开发/生产环境一致性时，我们会理解这一点。
- en: Dev/prod parity
  id: totrans-271
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发/生产环境一致性
- en: 'For years one of the most quoted phrases by developers was:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，开发者们经常引用的一句话是：
- en: It works on my machine!
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 它在我的机器上运行！
- en: In a way, this statement is true. Applications may behave differently in different
    execution environments. There are numerous variables that can contribute to malfunctions,
    such as the amount of CPU, memory, storage, or even access permissions to resources
    and dependencies.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在某种程度上，这个说法是正确的。应用在不同的执行环境中可能会有不同的行为。有许多变量可能导致故障，例如 CPU、内存、存储量，甚至对资源和依赖项的访问权限。
- en: To minimize problems related to the environment, there must be as much compatibility
    as possible between each server.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 为了最小化与环境的关联问题，每个服务器之间必须尽可能多地保持兼容性。
- en: That’s why it’s important for teams to work with technologies for creating infrastructure
    as code, such as Terraform and Bicep, which, in addition to providing agility,
    improve management, governance, compliance, and security.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 正因如此，对于团队来说，与用于创建基础设施代码的技术合作非常重要，例如 Terraform 和 Bicep，这些技术除了提供敏捷性外，还改善了管理、治理、合规性和安全性。
- en: '*Figure 11* *.16* demonstrates this concept:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 11.16* 展示了这一概念：'
- en: '![Figure 11.16 – Dev/prod parity](img/B21788_11_16.jpg)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.16 – 开发/生产环境一致性](img/B21788_11_16.jpg)'
- en: Figure 11.16 – Dev/prod parity
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.16 – 开发/生产环境一致性
- en: '*Figure 11* *.16* demonstrates a flow in a development process that involves
    the delivery of applications in an automated manner and the automation of the
    creation of infrastructure environments through an IaC approach, ensuring that
    all environments are similar.'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 11.16* 展示了一个涉及以自动化方式交付应用和通过 IaC 方法自动化创建基础设施环境的开发流程，确保所有环境都是相似的。'
- en: In addition to infrastructure, as we have already learned, the container strategy
    also allows containerized applications to run in different types of environments.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 除了基础设施，正如我们已经学到的，容器策略还允许容器化应用在不同的环境中运行。
- en: Now let’s talk about the logs factor, which goes beyond just recording application
    events in a file.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们谈谈日志因素，它不仅仅是在文件中记录应用事件。
- en: Logs
  id: totrans-283
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日志
- en: For a long time, logs were treated purely as records of events during the application
    execution flow, being recorded, in most cases, in text files, which were only
    accessed when there was a need to correct issues.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 很长时间以来，日志被纯粹地视为应用执行流程中的事件记录，通常记录在文本文件中，只有在需要纠正问题时才会访问。
- en: However, in a cloud environment, writing logs to files can pose some challenges
    for teams working on applications that are constantly changing.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在云环境中，将日志写入文件可能会给那些在持续变化的应用上工作的团队带来一些挑战。
- en: The logs factor determines that this type of information should be treated as
    streams of events, not managed by files but maintained by specific monitoring-related
    environments, such as **Elasticsearch** , **Logstash** , **Azure Monitor** , and
    **Datadog** , or open source solutions such as **Prometheus** and **Grafana**
    .
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 日志因素决定了这类信息应该被视为事件流，而不是由文件管理，而是由特定的监控相关环境维护，例如 **Elasticsearch**、**Logstash**、**Azure
    Monitor** 和 **Datadog**，或者像 **Prometheus** 和 **Grafana** 这样的开源解决方案。
- en: Thus, each flow of events generated through applications can provide important
    information about the execution flow of a given request, generate trend graphs,
    or even monitor in real time how the application behaves in relation to demand.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，通过应用生成的事件流可以提供关于特定请求执行流程的重要信息，生成趋势图，甚至实时监控应用如何根据需求表现。
- en: The data generated by log collection plays a fundamental role in decision-making,
    allowing teams to act proactively, optimize resources, define limits for automatic
    scaling, and, of course, support issue corrections.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 日志收集生成数据在决策中起着基本作用，使团队能够主动行动，优化资源，定义自动扩展的限制，当然，也支持问题纠正。
- en: There are several solutions on the market that support the event streaming management
    model, including paid and open source solutions. Many of these solutions are referenced
    in the CNCF landscape.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 市面上有几种支持事件流管理模型的解决方案，包括付费和开源解决方案。许多这些解决方案在CNCF景观中都有所提及。
- en: When implementing the logs factor in our applications, we must take into account
    that telemetry and log information must be collected in a transparent manner;
    however, managing this information is not part of the application context.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现我们应用程序中的日志因素时，我们必须考虑到遥测和日志信息必须以透明的方式进行收集；然而，管理这些信息不是应用程序上下文的一部分。
- en: Therefore, each logging and metrics solution has different collection methods,
    which creates a dependency on SDKs in the applications that are necessary to connect
    to the collection tools. This dependency can be a disadvantage if there is any
    need to change the log instrumentation tool.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，每个日志和指标解决方案都有不同的收集方法，这导致应用程序需要依赖SDK来连接到收集工具。如果需要更改日志检测工具，这种依赖可能是一个缺点。
- en: 'It is important to isolate mechanisms and dependencies. To help with this task,
    there are options such as **OpenTelemetry** , which offers a vendor-independent
    approach and allows collaboration and delivery of logs and metrics to be distributed
    across several monitoring services, avoiding greater coupling between applications,
    as shown in *Figure 11* *.17* :'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 隔离机制和依赖关系非常重要。为了帮助完成这项任务，有如**OpenTelemetry**这样的选项，它提供了一种供应商无关的方法，并允许日志和指标在多个监控服务之间进行协作和分发，从而避免了应用程序之间更大的耦合，如图*图11*
    *.17* 所示：
- en: '![Figure 11.17 – Isolating a log collector mechanism with OpenTelemetry](img/B21788_11_17.jpg)'
  id: totrans-293
  prefs: []
  type: TYPE_IMG
  zh: '![图11.17 – 使用OpenTelemetry隔离日志收集机制](img/B21788_11_17.jpg)'
- en: Figure 11.17 – Isolating a log collector mechanism with OpenTelemetry
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.17 – 使用OpenTelemetry隔离日志收集机制
- en: Learn more about OpenTelemetry
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 了解更多关于OpenTelemetry的信息
- en: OpenTelemetry is an open source observability framework for cloud-native software
    maintained by CNCF that provides a standardized way to collect, process, and export
    telemetry data such as traces, metrics, and logs from applications. OpenTelemetry
    provides some SDKs that abstract the collection of data from the application and
    distribute them into different log management tools. For more details, visit [https://opentelemetry.io/docs/](https://opentelemetry.io/docs/)
    .
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: OpenTelemetry是由CNCF维护的云原生软件的开源可观察性框架，它提供了一种标准化的方式来收集、处理和导出来自应用程序的遥测数据，如跟踪、指标和日志。OpenTelemetry提供了一些SDK，它们抽象了从应用程序中收集数据并将其分发到不同的日志管理工具。有关更多详细信息，请访问[https://opentelemetry.io/docs/](https://opentelemetry.io/docs/)。
- en: Log collection is an important and strategic task in cloud-native applications
    and, as mentioned previously, allows teams to gain insights into the execution
    flow of application processes and supports bug fixes in applications. Associated
    with the logs strategy, strategies for sending alerts for nonconformities, exceptions,
    and the misbehavior of applications can be included, giving teams the possibility
    to act proactively.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 日志收集是云原生应用程序中的一个重要且战略性的任务，如前所述，它允许团队深入了解应用程序过程的执行流程，并支持应用程序中的错误修复。与日志策略相关联的，还可以包括发送关于不符合规范、异常和应用程序不良行为的警报的策略，这为团队提供了主动采取行动的可能性。
- en: Logs are also essential in architecture strategies based on events and microservices
    where there is the distributed processing of information. Through logs, it is
    possible to map the entire execution flow, if there is a need for auditing, optimization,
    and bug fixing.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于事件和微服务的架构策略中，日志同样至关重要，尤其是在信息分布式处理的情况下。通过日志，可以映射整个执行流程，如果需要进行审计、优化和错误修复。
- en: We can see that when working with cloud-native solutions, we isolate responsibilities,
    ensuring that each part of a solution is decoupled, giving teams flexibility,
    improved maintenance, and better security, among other aspects. The admin process
    factor also plays into this.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，当与云原生解决方案一起工作时，我们隔离了责任，确保解决方案的每个部分都是解耦的，这为团队提供了灵活性、改进的维护和更好的安全性，以及其他方面。管理员流程因素也对此有所贡献。
- en: Admin process
  id: totrans-300
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理员流程
- en: When talking about the twelve factors, we most often mention the contextualization
    of the application domain, ensuring that it is built and delivered independently,
    with as little coupling as possible.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 当谈到十二要素时，我们最常提到的是应用域的上下文化，确保其尽可能独立地构建和交付，耦合度尽可能低。
- en: However, even in this scenario, the complexity of the application implies interactions
    with administrative tasks, such as performing database migrations.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，即使在这样的情况下，应用程序的复杂性也意味着需要与行政任务进行交互，例如执行数据库迁移。
- en: Although the database is part of the solution that makes up the application,
    tasks such as migrations and scripts for seeding basic information, among other
    types of administrative tasks, are not the responsibility of the application.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管数据库是构成应用程序的解决方案的一部分，但诸如迁移和用于播种基本信息的脚本等任务，以及其他类型的行政任务，并不属于应用程序的责任。
- en: The admin process factor suggests that administrative tasks must be carried
    out in isolation from applications, in a single process, and that it must be possible
    to monitor such changes.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 管理流程因素建议行政任务必须在与应用程序隔离的情况下执行，在一个单独的流程中，并且必须能够监控此类更改。
- en: 'Processes such as CI/CD run outside the scope of the application. Thus, during
    the execution of a pipeline and CI, the execution of tasks, such as generating
    database migration scripts, for example, can be performed, and these scripts are
    shared with CD pipelines, which may have different tasks required to apply the
    changes, as shown in *Figure 11* *.18* :'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 如CI/CD之类的流程运行在应用程序范围之外。因此，在执行管道和CI期间，可以执行诸如生成数据库迁移脚本之类的任务，例如，这些脚本与CD管道共享，CD管道可能需要执行不同的任务以应用更改，如图*图11.18*所示：
- en: '![Figure 11.18 – Example of the admin process implementation](img/B21788_11_18.jpg)'
  id: totrans-306
  prefs: []
  type: TYPE_IMG
  zh: '![图11.18 – 管理流程实现示例](img/B21788_11_18.jpg)'
- en: Figure 11.18 – Example of the admin process implementation
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.18 – 管理流程实现示例
- en: '*Figure 11* *.18* demonstrates a pipeline flow whereby, through the CD process,
    two distinct tasks are executed so that the application can be prepared for its
    correct execution in an environment.'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '*图11.18*展示了通过CD流程执行的管道流程，通过这种方式，执行两个不同的任务，以便应用程序可以在环境中正确执行。'
- en: Performing one-time administrative processes helps maintain the application
    state and ensures that any changes made during these tasks are immediately reflected
    in the live environment, reducing discrepancies and potential errors.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 执行一次性的管理流程有助于维护应用程序状态，并确保在这些任务期间所做的任何更改都能立即反映在实时环境中，从而减少差异和潜在错误。
- en: The admin process factor plays an important role in the application life cycle,
    as do the other factors proposed in the twelve-factor app methodology.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 管理流程因素在应用程序生命周期中起着重要作用，正如十二要素应用程序方法中提出的其他因素一样。
- en: The importance of the twelve-factor app methodology
  id: totrans-311
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 十二要素应用程序方法的重要性
- en: As we discussed in previous topics, the principles described in the twelve-factor
    app methodology were designed to help developers create modern, scalable, and
    maintainable applications, reinforcing the cloud-native mindset necessary for
    applications that deliver constant value.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面章节中讨论的那样，十二要素应用程序方法中描述的原则旨在帮助开发者创建现代、可扩展和可维护的应用程序，强化为提供持续价值的应用程序所需的云原生思维模式。
- en: Some of the principles are already present in the software engineer’s daily
    life; others open our minds to different perspectives and possibilities. However,
    we can note that the 12 principles are connected and, furthermore, are closely
    aligned with the main characteristics of cloud-native computing, such as microservices
    architecture, containerization, and CI/CD.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 一些原则已经在软件工程师的日常工作中存在；其他原则则开阔了我们的视野，让我们看到了不同的视角和可能性。然而，我们可以注意到，12个原则是相互关联的，并且与云原生计算的主要特征（如微服务架构、容器化和CI/CD）紧密一致。
- en: Using the methodology proposed by the twelve-factor app methodology, together
    with the other approaches presented in this chapter, such as the CAF, WAF, and
    projects available at CNCF, is a great model of best practices for any software
    engineer.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 使用十二要素应用程序方法提出的方法，以及本章中提出的其他方法（如CAF、WAF和CNCF上的项目），是任何软件工程师最佳实践的典范。
- en: The concepts and capabilities provided by ASP.NET Core 9 easily allow such principles
    to be implemented.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 9提供的概念和能力很容易实现这些原则。
- en: In the next section, we will learn about concepts related to cloud architecture.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将了解与云架构相关的概念。
- en: Understanding cloud architecture principles
  id: totrans-317
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解云架构原则
- en: Modern cloud architectures are the foundation of scalable, resilient, and highly
    available applications. In this chapter, we have learned about several principles
    and tools necessary for software engineers to combine the development of solutions
    in ASP.NET Core 9 and fully leverage the benefits of cloud environments such as
    Microsoft Azure.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 现代云架构是可扩展、弹性高和高度可用应用程序的基础。在本章中，我们学习了软件工程师结合ASP.NET Core 9解决方案的开发并充分利用云环境（如Microsoft
    Azure）的益处所必需的几个原则和工具。
- en: The availability of resources in a cloud environment is not enough to deliver
    the quality and experience needed by users in such a demanding market today.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 在云环境中，资源的可用性不足以提供今天这样高要求的市场中用户所需的质量和体验。
- en: Each stage of the development flow helps organizations provide applications
    and services that meet users’ needs, in addition to enhancing companies’ return
    on investment and, of course, making users increasingly loyal to the solutions
    developed.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 开发流程的每个阶段都有助于组织提供满足用户需求的应用程序和服务，同时提高公司的投资回报率，当然，也使用户越来越忠诚于开发出的解决方案。
- en: In this context, we must go beyond the boundaries of source code and layered
    definitions, and think about strategies that allow applications to deal with users’
    demands and needs. Therefore, it is important to adapt to the architectural concepts
    available in cloud-native applications.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种背景下，我们必须超越源代码和分层定义的界限，考虑允许应用程序处理用户需求和需求的策略。因此，适应云原生应用程序中可用的架构概念非常重要。
- en: Let’s understand some of these architectural principles and how they can enhance
    applications developed in ASP.NET Core 9.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解一些这些架构原则以及它们如何增强在ASP.NET Core 9中开发的应用程序。
- en: Working with modern design architecture
  id: totrans-323
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与现代设计架构打交道
- en: As software engineers, we are used to dealing with the implementation of code
    that is based on best practices and architectural styles such as Clean Code, hexagonal
    architecture, and design patterns, among other approaches.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 作为软件工程师，我们习惯于处理基于最佳实践和建筑风格（如Clean Code、六边形架构和设计模式等）的代码实现。
- en: By developing using a cloud-native approach, we not only add great possibilities
    to applications but also add other challenges, such as those mentioned in this
    chapter.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 通过采用云原生方法进行开发，我们不仅为应用程序增加了巨大的可能性，还带来了其他挑战，如本章中提到的。
- en: Software engineers must go beyond writing code and explore a world of different
    variables and approaches, such as DevOps, infrastructure, network, resilience,
    availability, agility, security, cost, and other aspects.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 软件工程师必须超越编写代码，探索一个充满不同变量和方法的世界，例如DevOps、基础设施、网络、弹性、可用性、敏捷性、安全性、成本以及其他方面。
- en: Organizations have shifted their focus to emphasize not only the importance
    of user interfaces such as forms and screens in business contexts and strategies
    but also the critical need for processing large volumes of data, providing services
    such as APIs, implementing artificial intelligence, and facilitating seamless
    integrations between diverse systems.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 组织已经将重点转向强调不仅重视在业务环境和战略中用户界面（如表单和屏幕）的重要性，而且强调处理大量数据、提供API等服务、实施人工智能以及促进不同系统之间无缝集成的关键需求。
- en: Dealing with large demands for data requests, ingestion, and analysis is an
    important feature for organizations to consider.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 处理大量数据请求、摄取和分析是组织需要考虑的重要特性。
- en: As a result, some modern architectural styles allow organizations to get the
    best out of cloud environments and at the same time bring great robustness to
    the business.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，一些现代建筑风格允许组织在云环境中获得最佳效果，同时为业务带来极大的鲁棒性。
- en: Imagine what an online store application would be like during a promotional
    event such as Black Friday that did not have the ability to adapt to user demands
    and deal with growing purchase requests to a payment gateway. If there were a
    bug in that virtual store application’s payment flow, what would be the company’s
    loss if the system was inactive for five minutes?
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，在像黑色星期五这样的促销活动中，如果一个在线商店应用程序没有适应用户需求和处理不断增长的支付网关购买请求的能力，如果虚拟商店应用程序的支付流程中存在一个错误，如果系统在五分钟内处于不活动状态，公司会损失多少？
- en: Certainly, the consequences would be bad. Therefore, there is a need to have
    the ability to deal with asynchronous processing and work with event-based architectural
    styles.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，后果将是严重的。因此，需要具备处理异步处理和与基于事件架构风格协同工作的能力。
- en: Event-driven architectures
  id: totrans-332
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 事件驱动架构
- en: 'Event-driven architectures allow applications to process information asynchronously,
    enabling real-time reactions based on events or state changes. They also enable
    better consistency for the processing of important business flows, such as payment
    processing for an online store. Another powerful feature of event-driven architecture
    is the ability to decouple components, generating independence and improving the
    maintenance and evolution of applications. ASP.NET Core 9 can be integrated with
    event-driven systems to create scalable and resilient applications. Let’s look
    at the example illustrated in *Figure 11* *.19* :'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 事件驱动架构允许应用程序异步处理信息，根据事件或状态变化实现实时反应。它们还使重要业务流程（如在线商店的支付处理）的处理一致性更好。事件驱动架构的另一个强大功能是能够解耦组件，生成独立性，并提高应用程序的维护和演进。ASP.NET
    Core 9 可以与事件驱动系统集成以创建可扩展和健壮的应用程序。让我们看看 *图 11.19* 中所示的示例：
- en: '![Figure 11.19 – Event-driven architecture example](img/B21788_11_19.jpg)'
  id: totrans-334
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.19 – 事件驱动架构示例](img/B21788_11_19.jpg)'
- en: Figure 11.19 – Event-driven architecture example
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.19 – 事件驱动架构示例
- en: 'In this example, the following flow is executed as an event-driven architecture
    implementation approach:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，以下流程作为事件驱动架构实现方法执行：
- en: '**Event Producer** :'
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件生产者** :'
- en: '**Order Service** : The order service acts as the event producer. When an order
    is created, it publishes an order-created event.'
  id: totrans-338
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**订单服务** : 订单服务作为事件生产者。当创建订单时，它发布一个订单创建事件。'
- en: '**Event Broker** :'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件代理** :'
- en: '**Azure Event Grid** : Azure Event Grid acts as the event broker. It receives
    the event from the order service and distributes it to the subscribed consumers.'
  id: totrans-340
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure 事件网格** : Azure 事件网格作为事件代理。它从订单服务接收事件并将其分发到已订阅的消费者。'
- en: '**Event Consumers** :'
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件消费者** :'
- en: '**Inventory Service** : The inventory service consumes the order-created event
    and updates the inventory accordingly.'
  id: totrans-342
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**库存服务** : 库存服务消费订单创建事件并相应地更新库存。'
- en: '**Notification Service** : The notification service consumes the event to send
    a notification to the user about the order creation.'
  id: totrans-343
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通知服务** : 通知服务消费事件以向用户发送关于订单创建的通知。'
- en: '**Billing Service** : The billing service consumes the event to process the
    billing for the order.'
  id: totrans-344
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**计费服务** : 计费服务消费事件以处理订单的计费。'
- en: The example of architecture, combined with other techniques such as scalability,
    further improves the quality of solutions.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 将此架构示例与其他技术（如可扩展性）相结合，可以进一步提高解决方案的质量。
- en: 'Some event-driven architecture strategies must be considered according to the
    application requirements, such as these:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 根据应用程序需求，必须考虑一些事件驱动架构策略，例如这些：
- en: '**Event source** : The event source works like a trace, capturing all state
    changes as they are executed sequentially. This approach favors the complete traceability
    of the entire execution chain, in addition to providing replay of executed events.
    ASP.NET Core 9 easily integrates with technologies such as Azure Event Hubs and
    Apache Kafka to implement event sourcing, as in the example shown in *Figure 11*
    *.20* :'
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件源** : 事件源的工作方式类似于跟踪，按顺序执行时捕获所有状态变化。这种方法有利于整个执行链的完整可追溯性，同时提供已执行事件的回放。ASP.NET
    Core 9 可以轻松集成 Azure Event Hubs 和 Apache Kafka 等技术以实现事件源，如下所示 *图 11.20* :'
- en: '![Figure 11.20 – Event source example](img/B21788_11_20.jpg)'
  id: totrans-348
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.20 – 事件源示例](img/B21788_11_20.jpg)'
- en: Figure 11.20 – Event source example
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.20 – 事件源示例
- en: '**Command Query Responsibility Segregation (CQRS)** : CQRS separates the read
    and write operations of an application. This approach is very powerful in contexts
    where the flow of persistence or writing of information, called commands (writes),
    is independent of the flow of queries (reads) . *Figure 11* *.21* illustrates
    the use of CQRS:'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命令查询责任分离 (CQRS)** : CQRS 将应用程序的读操作和写操作分离。在持久化或信息写入（称为命令）的流程独立于查询（读取）流程的上下文中，这种方法非常强大。*图
    11.21* 展示了 CQRS 的使用：'
- en: '![Figure 11.21 – CQRS in ASP.NET Core 9](img/B21788_11_21.jpg)'
  id: totrans-351
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.21 – ASP.NET Core 9 中的 CQRS](img/B21788_11_21.jpg)'
- en: Figure 11.21 – CQRS in ASP.NET Core 9
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.21 – ASP.NET Core 9 中的 CQRS
- en: '**Message brokers** : Message brokers facilitate communication between decoupled
    services by sending and receiving messages. They ensure that messages are delivered
    reliably and allow services to scale independently. A great example of this approach
    is payment processing in an online store. Upon receiving a payment request, the
    application delivers a message to a broker. This message is handled by one or
    more applications with the aim of communicating with payment gateways, among other
    services. If there is a problem with the broker on the server, the messages are
    persisted in a queue called a dead-letter queue. Therefore, when the broker resource
    re-establishes its operation, unprocessed messages will re-enter the queue, ensuring
    that applications can process them. ASP.NET Core 9 applications can integrate
    with message brokers such as Azure Service Bus or RabbitMQ to handle asynchronous
    processing and inter-service communication, as in *Figure 11* *.22* :'
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消息代理**：消息代理通过发送和接收消息来促进解耦服务之间的通信。它们确保消息可靠地传递，并允许服务独立扩展。这种方法的绝佳例子是在线商店中的支付处理。在收到支付请求后，应用程序将消息发送给代理。该消息由一个或多个应用程序处理，目的是与其他服务（如支付网关）通信。如果服务器上的代理出现问题，消息将保存在一个称为死信队列的队列中。因此，当代理资源重新建立其操作时，未处理的消息将重新进入队列，确保应用程序可以处理它们。ASP.NET
    Core 9 应用程序可以与消息代理（如 Azure Service Bus 或 RabbitMQ）集成，以处理异步处理和跨服务通信，如 *图 11* *.22*
    所示：'
- en: '![Figure 11.22 – Message broker with a dead-letter queue](img/B21788_11_22.jpg)'
  id: totrans-354
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.22 – 带有死信队列的消息代理](img/B21788_11_22.jpg)'
- en: Figure 11.22 – Message broker with a dead-letter queue
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.22 – 带有死信队列的消息代理
- en: Dead-Letter queue
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 死信队列
- en: 'A **dead-letter queue** ( **DLQ** ) is a specialized message queue used to
    store messages that cannot be processed due to some server or broker failure.
    Messages are kept isolated in the DLQ and retrieved for reprocessing after server
    problems are resolved. For more information, you can visit the Azure Service Bus
    DLQ documentation: [https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-dead-letter-queues](https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-dead-letter-queues)
    .'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '**死信队列**（**DLQ**）是一个专门的消息队列，用于存储由于某些服务器或代理故障而无法处理的消息。消息在 DLQ 中保持隔离，并在服务器问题解决后重新提取以进行重新处理。有关更多信息，您可以访问
    Azure Service Bus DLQ 文档：[https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-dead-letter-queues](https://docs.microsoft.com/en-us/azure/service-bus-messaging/service-bus-dead-letter-queues)。'
- en: Understanding and applying Event-Driven architecture approaches is essential
    for creating cloud-native solutions, prepared to deal with different types of
    user demands.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 理解和应用事件驱动架构方法对于创建准备应对不同类型用户需求的开源云解决方案至关重要。
- en: Based on event-driven architecture principles, another crucial architectural
    paradigm for cloud-native development is microservices, further enhancing application
    modularity and scalability.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 基于事件驱动架构原则，另一个对云原生开发至关重要的架构范式是微服务，这进一步增强了应用程序的模块化和可扩展性。
- en: Understanding microservices
  id: totrans-360
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解微服务
- en: Microservices are an architectural style that fully supports the development
    of cloud-native solutions and, in essence, applies the best practices mentioned
    in this chapter.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务是一种架构风格，它完全支持云原生解决方案的开发，并且本质上应用了本章中提到的最佳实践。
- en: 'Microservices offer an approach that means an application has the following
    characteristics:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务提供了一种方法，意味着一个应用程序具有以下特征：
- en: It has a bounded implementation context
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它具有有界实现上下文
- en: It is autonomous and can therefore be deployed independently
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是自治的，因此可以独立部署
- en: It is independent and scalable
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是独立的且可扩展的
- en: It does not depend on a specific language, so there can be different microservices
    with different technologies
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它不依赖于特定语言，因此可以有不同技术的不同微服务
- en: Your process runs independently and can benefit from different types of communication
    protocols, such as HTTP/HTTPS and gRPC and message queues
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的过程独立运行，并可以从不同类型的通信协议中受益，例如 HTTP/HTTPS 和 gRPC 以及消息队列
- en: In general, microservices manage their own data independently
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通常，微服务独立管理自己的数据
- en: '*Figure 11* *.23* illustrates a comparison between microservices and monoliths:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 11* *.23* 展示了微服务和单体之间的比较：'
- en: '![Figure 11.23 – Monolithic versus microservices](img/B21788_11_23.jpg)'
  id: totrans-370
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.23 – 单体与微服务](img/B21788_11_23.jpg)'
- en: Figure 11.23 – Monolithic versus microservices
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.23 – 单体与微服务
- en: It is very important to keep in mind that microservices are not there to replace
    monolithic applications. Each approach has its respective advantages, disadvantages,
    and challenges. The choice of one approach over another will depend on the context
    and application requirements.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 非常重要的是要记住，微服务不是为了取代单体应用。每种方法都有其各自的优点、缺点和挑战。选择一种方法而不是另一种方法将取决于上下文和应用需求。
- en: When analyzing *Figure 11* *.23* , we can see that in the monolithic approach,
    the application layer is responsible for managing all associated processes, represented
    by symbols, in addition to sharing access with all application states in the same
    database.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 当分析*图11.23*时，我们可以看到在单体方法中，应用层负责管理所有相关过程，由符号表示，并且与同一数据库中所有应用状态共享访问权限。
- en: In the microservices approach, each service is contextualized in an independent
    application, managing the state in isolation, independently, but delivering the
    same business flow as in the monolithic approach.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 在微服务方法中，每个服务都在一个独立的应用程序中进行上下文化，独立地管理状态，但提供与单体方法相同的业务流程。
- en: There are several challenges associated with microservices, such as communication,
    transaction management, scalability, granularity, teams, distributed data, consistency,
    availability, reliability, and resilience.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 与微服务相关联存在几个挑战，例如通信、事务管理、可伸缩性、粒度、团队、分布式数据、一致性、可用性、可靠性和弹性。
- en: Microservices can even be developed using a container strategy in conjunction
    with ASP.NET Core 9, which provides a powerful and performant platform, bringing
    several benefits to software engineers.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务甚至可以使用与ASP.NET Core 9结合的容器策略进行开发，它提供了一个强大且性能卓越的平台，为软件工程师带来了许多好处。
- en: Furthermore, in addition to the development process, regardless of the architectural
    strategy used, at some point we must deliver solutions in a cloud environment.
    This process is very important and must cause as little impact as possible to
    users, which requires deployment strategies.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，除了开发过程之外，无论使用哪种架构策略，我们最终都必须在云环境中交付解决方案。这个过程非常重要，并且必须尽可能减少对用户的影响，这需要部署策略。
- en: Considering deployment strategies
  id: totrans-378
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 考虑部署策略
- en: Deployment strategies are essential in cloud-native development, enabling applications
    to be delivered with the least possible impact on users.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 部署策略在云原生开发中至关重要，它使得应用能够以尽可能小的对用户影响进行交付。
- en: 'Cloud environments and other technologies support different deployment strategies.
    The following points mention the most common strategies:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 云环境和其他技术支持不同的部署策略。以下要点提到了最常用的策略：
- en: '**Blue-green deployment** : Blue-green deployment is based on the use of two
    identical environments: blue (current production) and green (new version). New
    versions of an application are deployed in the green environment and, after carrying
    out validations, a swap is performed; that is, the traffic goes from blue to green.
    In Azure, this strategy can be implemented by configuring separate slots in Azure
    App Service. Through deployment slots, it is possible to carry out deployments
    in a secure manner, and if the new version has any errors, even after validation,
    you can simply run the swap again for the previous version to be made available.
    Azure App Service implements load balancing and directs user requests to avoid
    losses, as demonstrated in *Figure 11* *.24* :'
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**蓝绿部署**：蓝绿部署基于使用两个相同的环境：蓝色（当前生产环境）和绿色（新版本）。应用的新版本在绿色环境中部署，并在进行验证后进行交换；也就是说，流量从蓝色转移到绿色。在Azure中，可以通过配置Azure
    App Service中的单独槽位来实现此策略。通过部署槽位，可以安全地进行部署，如果新版本有任何错误，即使在验证后，也可以简单地再次运行交换，以便使旧版本可用。Azure
    App Service实现负载均衡并将用户请求导向以避免损失，如*图11.24*所示：'
- en: '![Figure 11.24 – Blue-green deployment with Azure App Service](img/B21788_11_24.jpg)'
  id: totrans-382
  prefs: []
  type: TYPE_IMG
  zh: '![图11.24 – 使用Azure App Service的蓝绿部署](img/B21788_11_24.jpg)'
- en: Figure 11.24 – Blue-green deployment with Azure App Service
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.24 – 使用Azure App Service的蓝绿部署
- en: '**Canary deployment** : Canary deployment is a variation of blue-green deployment
    that gradually introduces the new version to a small subset of users before rolling
    it out to the entire user base. Microsoft Azure provides traffic management tools,
    such as Azure Traffic Manager, to direct some traffic to the new version while
    monitoring its performance, as illustrated in *Figure 11* *.25* :'
  id: totrans-384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**金丝雀部署**：金丝雀部署是蓝绿部署的一种变体，在将新版本推广到整个用户群之前，它逐渐将新版本引入一小部分用户。微软 Azure 提供流量管理工具，如
    Azure 流量管理器，将部分流量导向新版本，同时监控其性能，如图 *图 11.25* 所示：'
- en: '![Figure 11.25 – Canary deployment with Azure Traffic Manager](img/B21788_11_25.jpg)'
  id: totrans-385
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.25 – 使用 Azure 流量管理器的金丝雀部署](img/B21788_11_25.jpg)'
- en: Figure 11.25 – Canary deployment with Azure Traffic Manager
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.25 – 使用 Azure 流量管理器的金丝雀部署
- en: The blue-green and canary deployment strategies significantly improve the reliability,
    flexibility, and security of the deployment process, minimizing impacts to users,
    in addition to allowing the restoration of the last stable environment in an agile
    manner.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 蓝绿和金丝雀部署策略显著提高了部署过程的可靠性、灵活性和安全性，最小化了用户的影响，同时还能以敏捷的方式恢复到最后一个稳定的环境。
- en: The combination of these strategies, tools, and modern architectural models
    strengthens the mindset needed for cloud-native solutions.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 这些策略、工具和现代架构模型的结合加强了实现云原生解决方案所需的思维模式。
- en: ASP.NET Core 9 is a platform that is prepared for different contexts and challenges
    and offers powerful solutions in a cloud environment.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 9 是一个为不同环境和挑战做好准备的平台，在云环境中提供强大的解决方案。
- en: As a software engineer, it is important to consider the approaches and techniques
    mentioned in this book to take your solutions to a higher level.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名软件工程师，考虑本书中提到的方法和技巧对于将你的解决方案提升到更高水平非常重要。
- en: Summary
  id: totrans-391
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed various resources, tools, strategies, and architectural
    approaches with the aim of developing a mindset focused on cloud-native solutions.
    We learned about the different layers of services offered by cloud environments,
    and we learned about CNCF and the CNCF landscape, which details excellent open
    source projects that implement cloud concepts and best practices. We also learned
    about the principles of the twelve-factor app, the CAF, and the WAF, and we discussed
    the principles of modern cloud architectures and value delivery strategies. The
    combination of all the content available in this chapter, together with the ASP.NET
    Core 9 platform, will enable any software engineer to go beyond code and deliver
    high-value solutions. It all starts with *Hello World* .
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了各种资源、工具、策略和架构方法，旨在培养一种专注于云原生解决方案的思维模式。我们了解了云环境提供的不同服务层，并了解了 CNCF 及其景观，它详细介绍了实现云概念和最佳实践的杰出开源项目。我们还学习了十二要素应用的原则、CAF
    和 WAF，并讨论了现代云架构和价值交付策略的原则。本章中所有内容的组合，加上 ASP.NET Core 9 平台，将使任何软件工程师能够超越代码，交付高价值解决方案。一切始于
    *Hello World*。
