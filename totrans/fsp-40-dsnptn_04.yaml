- en: Chapter 4.  Basic Pattern Matching
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter continues the study of functional programming foundations that
    the previous chapter opened. It covers basic data pattern matching. Pattern matching
    is an essential feature-rich mechanism of powerful data processing that is embedded
    into the F# language's core.
  prefs: []
  type: TYPE_NORMAL
- en: A good grasp of the F# pattern matching features is an absolute must for an
    enterprise developer because most of the time, enterprise business is revolving
    around sophisticated data transformations in **Line Of Business** ( **LOB** )
    **applications** ([https://blogs.msdn.microsoft.com/dragoman/2007/07/19/what-is-a-lob-application/](https://blogs.msdn.microsoft.com/dragoman/2007/07/19/what-is-a-lob-application/)
    ) and along ****E** xtract Transform Load** ( **ETL** ) ([https://en.wikipedia.org/wiki/Extract,_transform,_load](https://en.wikipedia.org/wiki/Extract,_transform,_load)
    ) cycles in data warehousing and business analytics.
  prefs: []
  type: TYPE_NORMAL
- en: I intentionally narrowed down the subject of this chapter to basic pattern matching
    for a merely didactic reason. Usually, F# beginners first grasp pattern matching
    as an imperative switch on steroids or just a semantically equivalent way of coding
    lengthy `if...then...elif...elif... ...else...` expressions. Then, they begin
    to recognize the role of pattern matching in data structures decomposition. And
    finally, the pattern matching knowledge acquisition gets completed with embracing
    **active patterns** .
  prefs: []
  type: TYPE_NORMAL
- en: 'The goal of this chapter is to provide you with a thorough grasp of the pattern
    matching features associated with the F# `match` construction:'
  prefs: []
  type: TYPE_NORMAL
- en: The overall composition of this rather complicated language construction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tacit assumptions behind the parts of match (the ordering of matching rules
    and completeness of pattern cases, to name a few)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specific kinds of pattern cases and how to build composite cases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The decomposition abilities consideration is postponed until the coverage of
    the data structures in the upcoming chapters. Similarly, I will cope with **active
    patterns** when covering the advanced programming techniques of F#.
  prefs: []
  type: TYPE_NORMAL
- en: An explicit form of pattern matching with match construction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Explicit `match` construction in F# belongs to control flow elements, along
    with `if-then-else` , or `while-do` . Of other F# bits and pieces, a `match` is
    a relatively complicated combination of the following parts and governing rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: It works in this manner, that is, `comparison-expression` is juxtaposed with
    each `pattern-expression` beginning with `pattern-expression1` and goes down the
    list until either the first match occurs, or passing `pattern-expressionN` still
    non-matched. If a match is found for `pattern-expressionX` , then the result of
    the entire construction is the result of `result-expressionX` . If no matches
    are found, then `MatchFailureException` is thrown, indicating that the match cases
    were incomplete.
  prefs: []
  type: TYPE_NORMAL
- en: 'The key points of pattern matching that are often missing by F# beginners on
    the first read are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The `match` construction represents an expression, like any other F# construction
    excluding value binding. This means that the value of one and only one of `result-expressions`
    will be taken for the value of the entire construction (given that a certain matching
    has indeed taken place).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Every `pattern-expression1` through `pattern-expressionN` must share the same
    type, which is also the same with the type of `comparison-expression` in order
    for the `match` construction to compile.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Every `result-expression1` through `result-expressionN` must share the same
    type in order for the match construction to compile.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listed pattern to result cases are tried at run-time one after another in the
    top-down order. This arrangement prescribes a certain ordering of the cases from
    the standpoint of pattern commonality. More specific patterns must precede less
    specific ones; otherwise, more specific patterns will not have chances to be matched
    ever.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The set of alternatives represented by all patterns must be exhaustive; otherwise,
    matching `comparison-expression` not covered by any of the patterns will cause
    `MatchFailureException` .
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More atomic pattern terms can be composed into broader pattern expressions using
    Boolean logic operators OR (`|` ), AND (`&` ), and a special `when` guard.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, I will walk you through the multiplicity of pattern kinds so that you get
    used to their broad repertoire and become comfortable with getting around `match`
    expressions.
  prefs: []
  type: TYPE_NORMAL
- en: Matching literals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the simplest cases of matching patterns is a pattern represented by a
    literal and assuming a simple `comparison-expression` value equality. Literals
    can be of any numeric, character, or string types. They can also be cases of a
    .NET enumeration (each such case is inherently a symbolic name alias of the integer
    value) or a value decorated with the `[<Literal>]` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following script, I can easily match `int` literals and the `int` value
    aliased as `THREE` , decorated with the `[<Literal>]` attribute (`Ch4_1.fsx` ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This yields string `"3"` , as expected. However, it wouldn''t be possible to
    mix `int` literals with named `int` constant values from the following script
    (`Ch4_1.fsx` ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This yields string `"5"` , although being literals, `Multiples.Zero` and `Multiples.Five`
    are typed as members of the `Multiples` enumeration.
  prefs: []
  type: TYPE_NORMAL
- en: (Besides, if you did not grok this yet, placing almost any text between the
    doubled backticks, such as [PRE3] above, makes this text a valid F# name and,
    when used in moderation, may add to improved code readability).
  prefs: []
  type: TYPE_NORMAL
- en: Wildcard matching
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If I put the preceding scripts into Visual Studio, the F# source code editor
    will draw a blue warning squiggle line under the [PRE4] comparison expression,
    indicating that the set of rules in this `match` construction is not exhaustive,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Wildcard matching](img/Image00018.jpg)'
  prefs: []
  type: TYPE_IMG
- en: An example of an incomplete pattern matching
  prefs: []
  type: TYPE_NORMAL
- en: 'The compiler even gives a sample value of [PRE5] , which is not going to match.
    Although this value is not present within the definition of type `Multiples` ,
    if I synthetically create this value as `enum<Multiples>(1)` and feed it as an
    argument into `transformB` , the result would be the run-time exception of type
    `Microsoft.FSharp.Core.MatchFailureException` . This situation should raise the
    following question: how would it be possible to put a *match all* rule into the
    `match` , which means anything that was not specified in preceding rules?'
  prefs: []
  type: TYPE_NORMAL
- en: 'For this purpose, F# offers the special **wildcard pattern ** `_` that matches
    anything that was not matched in the preceding rules. With its help and turning
    to the idiomatic F# way of processing undefined values by presenting the result
    as a value of type `option` , the function processing only legitimate `Multiples`
    values may be defined as shown in the following code (`Ch4_1.fsx` ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now, the match within the `transformB'` definition carries the exhaustive set
    of match cases. Any legitimate value of `Multiples` given as `m` will be transformed
    into a correspondent `Somestring option` value, and any non-legitimate value of
    the `m` argument will be transformed into a `None` result.
  prefs: []
  type: TYPE_NORMAL
- en: Arranging matching rules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Wildcard pattern demonstrates the importance of arranging the match cases from
    more specific to less specific. For example, if I put the *match all* third rule
    with the wildcard pattern before the first two rules in the preceding script,
    then the F# compiler will put the blue squiggle line under explicit `Multiples`
    values, indicating that these rules will never be matched (check out `transformB''`
    definition in `Ch4_1.fsx` ).
  prefs: []
  type: TYPE_NORMAL
- en: Named patterns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The F# compiler performs a certain analysis when a name (identifier) occurs
    in the position of a pattern case. Strictly speaking, there are some opportunities
    for the name to be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: A named literal (such as THREE in the earlier script)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A case value of a discriminated union (such as `None` if matching an F# `option`
    )
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A type of an exception (such as `System.ArgumentException` if matching an exception
    type)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A custom name of an active pattern (which will be covered in the upcoming chapters)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the name occurrence does not fit any of the previously listed alternatives,
    the name is considered a **variable pattern** ([https://msdn.microsoft.com/en-us/library/dd547125.aspx](https://msdn.microsoft.com/en-us/library/dd547125.aspx)
    ). It is treated similarly to the wildcard pattern, getting the value of `comparison-expression`
    parameter, which can be used in the corresponding `result-expression` . Sounds
    confusing, right? Then let's turn to a sample in order to make this matter clear.
  prefs: []
  type: TYPE_NORMAL
- en: 'I just took the definition of the `transformA` function from the matching literals
    section, changed the name of the function to `transformA''` , and removed the
    definition of the `THREE` literal from the context (`Ch4_2.fsx` ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The results of experimenting with this function version are shown in the following
    screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Named patterns](img/Image00019.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Turning of a literal pattern into a variable pattern
  prefs: []
  type: TYPE_NORMAL
- en: To begin with, the omission of the literal didn't blow up the script, producing
    just a benign warning that `THREE` might be a misspelled pattern name. Applying
    the function to the argument `50` that is completely off produces the same result
    as before for the legitimate argument value `3` . What gives?
  prefs: []
  type: TYPE_NORMAL
- en: No magic here; in accordance with the description identifier, `THREE` was not
    recognized as a named literal, discriminated union case, exception type, or active
    pattern. This finding turned it into a variable pattern playing the role of a
    match-all pattern case, which `result-expression` just blindly outputs as string
    `"3".`
  prefs: []
  type: TYPE_NORMAL
- en: In my experience as an F# developer, I faced at least one occasion when this
    seemingly innocuous pattern type transformation typo turned into a nasty bug.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The moral: handle with care, and do not disregard F# compiler warnings!'
  prefs: []
  type: TYPE_NORMAL
- en: The as pattern
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Interestingly, a pattern case may have the `as` clause appended to it. This
    clause binds the matched value to a name that may be used within the corresponding
    `result-expression` of the `match` construction or elsewhere within a local context
    of an outer `let` binding. The following script demonstrates how flexible the
    `as` pattern can be (`Ch4_3.fsx` ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In the first case, `r` is bound using `as` to the result of `TryParse` , which
    is the tuple, so the expression `snd r` yields the parsed GUID value.
  prefs: []
  type: TYPE_NORMAL
- en: In the second case, `as` bounds `r` to any tuple; however, it must be obvious
    from the match cases sequencing that this case matches the failed GUID parsing
    and the value of argument is a garbage.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot reflects firing each of these using `as` binding match
    cases in FSI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The as pattern](img/Image00020.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Pattern matching with as binding
  prefs: []
  type: TYPE_NORMAL
- en: Grouping patterns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pattern match cases I've covered until this point can be composed together in
    a manner that resembles the terms of a Boolean expression with OR (`|` ) and AND
    (`&` ) operators. Let me demonstrate this technique by implementing a function
    that accepts two string arguments that represent keys and validates that both
    the given values are non-empty, providing a detailed diagnostics.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should be able to grasp at this point why I should begin the matching with
    the most specific case when both the keys are empty. The next less specific match
    is represented by two symmetric cases when either the first or the second key
    is empty. Here, in order to demonstrate the flexibility provided by F# patterns
    grouping, I combine these two patterns with Boolean OR and at the same time capture
    key values into the local context with a variable pattern represented by the tuple
    `(x,y)` . For the most generic leftover case, I know that both keys are not empty,
    so just a variable pattern is sufficient here. The sought function definition
    is as follows (`Ch4_4.fsx` ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Although the boolean OR pattern combinator helps reach F# code succinctness
    by combining some cases that require the same transformation expression, boolean
    AND is not used that frequently for combining the pattern cases in regular pattern
    matching practice. However, it gets very relevant when grouping *active patterns*
    , which I will be covering in later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Guards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, I believe you would agree that pattern matching is a powerful
    data transformation feature. Just to further amplify the facilities considered
    so far, F# offers enhancing `pattern-expressions` with additional matching logic.
    *Guard* is represented by an arbitrary boolean expression that is attached to
    `pattern-expression` using the `when` keyword. The guard kicks in only if its
    `pattern-expression` host has matched. Then, the guard expression is computed,
    and if `true` , it springs the transformation performed by the corresponding `result-expression`
    to the right. Otherwise, the entire rule is considered non matched, and the matching
    continues in an usual manner. The `when` guards can be mixed and matched within
    a `match` construction in a completely arbitrary manner.
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate `when` guards in action, let me slightly modify the previous
    example. In the case where both keys are not empty, there are two subcases: when
    the keys are equal to each other and when they are not. Furthermore, our function
    would be required to format the result for each of these cases differently.'
  prefs: []
  type: TYPE_NORMAL
- en: 'All that is required for this modification is just one extra line of code preceding
    the last one (remember that I want to add a more specific match case, and then
    it must go in front of a more generic one). The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: That's it for this modification. I encourage you to play with both scripts `Ch4_4.fsx`
    and `Ch4_5.fsx` in FSI by entering different arguments provided in the scripts
    and observing the changing function behavior.
  prefs: []
  type: TYPE_NORMAL
- en: The alternative syntax for anonymous function performing matching
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: F# offers a special syntax to define anonymous functions that perform matching,
    or **pattern matching functions** ([https://docs.microsoft.com/en-us/dotnet/articles/fsharp/language-reference/match-expressions](https://docs.microsoft.com/en-us/dotnet/articles/fsharp/language-reference/match-expressions)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: This syntax assumes that the anonymous function has a single parameter that
    is placed at the beginning of the function body in the invisible `match` construction.
    Having this alternative way of defining pattern matching anonymous functions just
    adds to the language succinctness and also better reflects the intent behind defining
    such kind of functions within the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Continuing with coding exercises, in the latest F# script I will rewrite the
    `validate` function using the alternative syntax. However, to achieve this, it
    is required that you address the following problem. The alternative syntax assumes
    that the pattern matching function has a single argument, while validate has a
    pair of arguments. The way out would be to apply skills acquired after reading
    the previous chapter and performing the currying. The following is the code (`Ch4_6.fsx`
    ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I hope that this chapter did not leave stones unturned in the matter of plain
    vanilla pattern matching. You should now be well prepared to overcome typical
    pattern matching challenges that F# beginner programmers experience. I remind
    you that further pattern matching features, namely data decomposition and active
    patterns, will be covered in later chapters in order to preserve the logical flow
    of the material.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, I will turn to the exciting subject of *Algebraic Data
    Types* . We will explore how data may be composed too and what are the benefits
    behind the data composition.
  prefs: []
  type: TYPE_NORMAL
