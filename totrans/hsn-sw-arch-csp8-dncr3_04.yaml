- en: Documenting Requirements with Azure DevOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure DevOps is the evolution of Visual Studio Team Services and there is a
    variety of new features that can help developers to document and organize their
    software. The purpose of this chapter is to present an overview of this tool provided
    by Microsoft.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Azure DevOps project using your Azure account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the functionalities offered by Azure DevOps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Organizing and managing requirements using Azure DevOps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Presenting use cases in Azure DevOps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter requires you to create a new free Azure account or use an existing
    one. The *Creating an Azure account* section of [Chapter 1](14b5c5da-4042-439e-9e5a-2e19ba4c4930.xhtml),
    *Understanding the Importance of Software Architecture*, explains how to create
    one.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Azure DevOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure DevOps is a Microsoft **Software as a S****ervice** (**SaaS**) platform
    that enables you to deliver continuous value to your customers. By creating an
    account there, you will be able to easily plan your project, store your code safely,
    test it, publish the solution to a staging environment, and then publish the solution
    to the actual production infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, Azure DevOps is a complete framework and the ecosystem that it provides
    for
  prefs: []
  type: TYPE_NORMAL
- en: software development is currently available. The automation of all the steps
    involved in software production ensures the continuous enhancement and improvement
    of an existing solution in order to adapt it to market needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can start the process moving in your Azure portal. If you don''t know how
    to create an Azure portal account, then please check [Chapter 1](14b5c5da-4042-439e-9e5a-2e19ba4c4930.xhtml),
    *Understanding the Importance of Software Architecture*. The steps to create an
    Azure DevOps account are quite simple:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select Create a resource and then DevOps Project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0bb2e952-9c3d-4ec9-a014-b2ac7f3b9dc4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As soon as you start the wizard for creating the project, you can choose how
    you want to deliver your system from several different platforms. This is one
    of the greatest advantages of Azure DevOps as you are not limited to Microsoft
    tools and products, but you can from all common platforms, tools, and products
    available on the market:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/88a26d74-f288-44f3-b0a9-d3d0a371f961.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The options available will depend on the platform chosen in the first step.
    In some cases, you can choose from several deployment options, as you can see
    in the following screenshot, which appears if you select the .NET platform:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/76e11a43-9b8e-4a88-8895-6950366f7ac7.png)'
  prefs: []
  type: TYPE_IMG
- en: Once the setup is complete, you will be able to manage the project using the
    project portal according to the information you provided. It is worth mentioning
    that this wizard will create an Azure DevOps Service if you do not have one. The
    Azure DevOps organization is where you can organize all of you
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Azure DevOps projects. The whole process takes less than 20 minutes:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/d23628fd-50d5-415b-8e82-7e5cda97f824.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After that, you will be able to start planning your project. The following
    screenshot shows the page that appears once the Azure DevOps project creation
    is complete. In the remainder of this book, we will come back to this page several
    times to introduce and describe various useful features that ensure a faster and
    efficacious deployment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7ba71792-4ed2-4066-b3e2-4341113b29fe.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see from the preceding screenshot, the process for creating an Azure
    DevOps account and starting to develop the best-in-class DevOps tool is quite
    simple. It is worth mentioning that you can start using this fantastic tool at
    no cost, considering you have up to five developers on your team, plus any number
    of stakeholders.
  prefs: []
  type: TYPE_NORMAL
- en: Organizing your work using Azure DevOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DevOps is a **Continuous Integration/Continuous Deployment** (**CI/CD**) methodology,
    that is, a set of best practices on how to apply continuous improvements to a
    software application and how to deliver them to the production environment. Azure
    DevOps is a powerful tool whose range of applications encompasses all the steps
    involved in both the initial development of an application and in its subsequent CI/CD
    process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Azure DevOps contains tools for collecting requirements and for organizing
    the whole development process. They can be accessed by clicking the Boards menu
    in the Azure DevOps page and will be described in more detail in the next two
    sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/aeaf61e6-9ec3-4739-836b-373b4b95bf2d.png)'
  prefs: []
  type: TYPE_IMG
- en: All other functionalities available in Azure DevOps are briefly reviewed in
    the following subsections. They will be discussed in detail in [Chapter 15](c707cf13-3616-4788-8f39-687bd1cb7c7b.xhtml),
    *Testing Your Code with Unit Test Cases and TDD*, to [Chapter 20](e61b3c5d-3abd-4442-9c9c-e12fd3acedcc.xhtml),
    *Automation for Software Testing*.
  prefs: []
  type: TYPE_NORMAL
- en: Azure DevOps repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Repos menu item gives you access to a Git repository in order to place
    the project code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a9b2f212-5f28-4b8d-8df0-08bce2ef787b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can connect to this repository from inside Visual Studio in a very simple
    way:'
  prefs: []
  type: TYPE_NORMAL
- en: Start Visual Studio and ensure you are logged in to Visual Studio with the same
    Microsoft account used to define your DevOps project (or used to add you as a
    team member).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Prepare a Visual Studio solution containing the Visual Studio projects you need
    in your application (further projects can be added during development) if your
    DevOps project repository is empty.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the Team Explorer tab and then click the connection button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c0fca1ee-8026-4583-9dcc-8f1579360299.png)'
  prefs: []
  type: TYPE_IMG
- en: Clicking the Connect... link of Azure DevOps, you will be driven to connect
    with one of your Azure DevOps projects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the Team Explorer Home button. Now, you will see commands for performing
    Git operations and for interaction with other Azure DevOps areas:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/53bda670-8b1f-4794-b35c-451cbbad6a7a.png)'
  prefs: []
  type: TYPE_IMG
- en: Commit the solution you just created by clicking the Changes button if the Azure
    DevOps repository is empty and then following the subsequent instructions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the Sync button to synchronize your local repository with the remote Azure
    DevOps repository. If the remote repository is empty and you just created a solution,
    this action will initialize the remote Azure DevOps repository with this solution;
    otherwise, this action will download the remote repository on your local machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once all team members have initialized both their local machine repositories
    and the Azure DevOps repository with the preceding steps, it is enough to open
    Visual Studio. The solution created in your local repository will appear in the
    bottom area of the Team Explorer window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the window to open the solution on your local machine. Then, synchronize
    with the remote repository to ensure the code you are modifying is up to date.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Team Explorer menu enables you to execute most Git commands, to launch remote
    builds (Builds button) and to interact with other Azure DevOps areas (see, for
    instance, the Work Items button).
  prefs: []
  type: TYPE_NORMAL
- en: Package feeds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Artifacts menu handles the software packages used by the project. There,
    you may define feeds for basically all types of packages such as NuGet, Node.js,
    and Python. Once in the Artifacts area, you may create several feeds by clicking
    the + New Feed link, where each feed can handle several kinds of packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/18d082aa-6eee-4b29-b31a-60f26dfc9696.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you select the option to connect to packages from public sources, as a default,
    the feed connects to `npmjs`, `nuget.org`, and `pypi.org`. However, you can go
    to the upstream sources tab in the Feed settings section through the menu in the
    upper-right corner and remove/add package sources:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9e8a421b-0634-4b20-99e4-679ef66afeae.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Connect to feed link of each feed shows a window that, for each package
    type, explains how to do the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: Upload private packages to the feed. This way each team can use its private
    package's code base.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connect to the feed to use its packages from Visual Studio. You should add all
    the project feeds to your Visual Studio feeds in order to also use the private
    team packages uploaded in the feed; otherwise, your local build will file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Manage credentials to access the feed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/99c1a595-ddcf-42e3-8282-d14f45630f93.png)'
  prefs: []
  type: TYPE_IMG
- en: Test plans
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Test Plans section allows you to define the test plans you want to use
    and their settings. It can be accessed through the Test Plans menu item:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6857dc53-f333-4cb4-8ab5-24251e039eba.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, you may define, execute, and track test plans made of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Manual acceptance tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatic unit tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Load tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Automatic unit tests must be defined in test projects contained in the Visual
    Studio solution and based on a framework such as NUnit, xUnit, and MSTest (Visual
    Studio has project templates for all of them). Test Plans gives you the opportunity
    to execute these tests on Azure and to define the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A number of configuration settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When to execute them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to track them and where to report their results in the overall project documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For manual tests, you may define complete instructions for the operator, the
    environment in which to execute them (for example, an operating system), and where
    to report their results in the project documentation. You can also define how
    to execute load tests, how to measure results, and where to report them.
  prefs: []
  type: TYPE_NORMAL
- en: Pipelines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Pipelines are automatic action plans that specify all steps from the code build
    until the software deployment is in production. They can be defined in the pipelines
    area, which is accessible through the Pipelines menu item:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8d574ea9-3e7c-424a-9c24-ff9e19182ba8.png)'
  prefs: []
  type: TYPE_IMG
- en: There, you can define a complete pipeline of tasks to execute alongside their
    triggering events, which encompasses steps such as code building, launching test
    plans, and what to do after the tests are passed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Typically, after the tests are passed, the application is automatically deployed
    in a staging area where it can be beta-tested. You can also define the criteria
    for the automatic deployment in production. Such criteria include, but are not
    limited to, the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Number of days the application was beta-tested
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Number of bugs found during beta-testing and/or removed by the last code change
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manual approval by one or more managers/team members
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The criteria decision will depend on the way the company wants to manage the
    product that is being developed. You, as a software architect, have to understand
    that when it comes to moving code to production, the safer, the better.
  prefs: []
  type: TYPE_NORMAL
- en: Managing system requirements in Azure DevOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure DevOps enables you to document system requirements using *work items*.
    Work items are stored in your project as a piece of information that can be assigned
    to a person. They are classified into various types and may contain a measure
    of the development effort required, a status, and the development stage (iteration)
    they belong to.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, DevOps methodology, as an Agile methodology, is made of several iterations
    and the whole development process is organized as a set of sprints. The work items
    available depends on the *Working Item Process* you select while creating the
    Azure DevOps project. The following subsections contain a description of the most
    common work item types.
  prefs: []
  type: TYPE_NORMAL
- en: Epics work items
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Imagine you are developing a system made of various subsystems. Probably, you
    are not going to conclude the whole system in a single iteration. Therefore, we
    need an umbrella spanning several iterations to encapsulate all features of each
    subsystem. Each Epics work item represents one of these umbrellas that can contain
    several features to be implemented in various development iterations.
  prefs: []
  type: TYPE_NORMAL
- en: In the Epics work item, you can define the state and acceptance criteria as
    well as the start date and target date. Besides, you can also provide a priority
    and an effort estimate. All of this detailed information helps the stakeholders
    to follow the development process. This is really useful as a macro view of the
    project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Epics are not available as a default. They must be enabled in the project''s
    Team Settings page, which can be reached by clicking the project settings link
    in the bottom-left corner of the project page and then selecting Team Settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/360da6d1-2fd9-4b0d-8fe1-5a31f7cb33af.png)'
  prefs: []
  type: TYPE_IMG
- en: Features work items
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All of the information that you provide in an Epics work item can also be placed
    in a Features work item. So, the difference between these two types of work items
    is not related to the kind of information they contain, but to their roles and
    the focus; your team will get to conclude them. Epics may span several iterations
    and are hierarchically above Features, that is, each Epics work items is linked
    to several children Features, while each Features work items must be implemented
    in a single iteration and is part of a single Epics work items.
  prefs: []
  type: TYPE_NORMAL
- en: It is worth mentioning that all work items have sections for team discussions.
    There, you will be able to find a team member in the discussion area by typing
    the `@` character (like in several forum/social applications). Inside each work
    item, you can link and attach various information. You may also check the history
    of the current work item in a specific section.
  prefs: []
  type: TYPE_NORMAL
- en: Features work items are the places to start recording user requirements. For
    instance, you can write a Features work item called **Access Control** to define
    the complete functionally needed to implement the system access control.
  prefs: []
  type: TYPE_NORMAL
- en: Product Backlog items/User Story work items
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After selecting the *Working Item Process*, you will know which of these two
    work items is available. There are minor differences between them, but their purpose
    is substantially the same. They contain detailed requirements for the Features,
    described by the Features work items they are connected to. More specifically, each Product
    Backlog/User Story work item specifies the requirements of a single functionality
    that is a part of the behavior described in its father Features work items. For
    instance, in a Features of system access control, the maintenance of the users
    and the login interface should be two different User Stories/Product Backlog items.
    These requirements will guide the creation of other children work items:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Tasks**: They are important work items that describe the job that needs to
    be done to meet the requirements stated in the father Product Backlog items/User
    Story work item. Task work items can contain time estimates that help team capacity
    management and overall scheduling.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Test cases**: These items describe how to test the functionality described
    by the requirements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The number of tasks and test cases you will create for each Product Backlog/User
    Story work item will vary according to the development and testing scenario you
    use.
  prefs: []
  type: TYPE_NORMAL
- en: Book use case – presenting use cases in Azure DevOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section clarifies the concepts exposed in the previous section with the
    practical example of the wwtravelclub. Considering the scenario described in [Chapter
    1](14b5c5da-4042-439e-9e5a-2e19ba4c4930.xhtml), *Understanding the Importance
    of Software Architecture*, we decided to define three Epics work items, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4ffaa42d-4b11-498c-92a9-eb0ea4c4547f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The creation of these work items is quite simple:'
  prefs: []
  type: TYPE_NORMAL
- en: Inside each work item, link the different types of work items, as you can see
    in the following screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It is really important to know that the connection between work items are really
    useful during software development. Hence, as a software architect, you have to
    provide this knowledge to your team and, more than that, you have to incentive
    them to make these connections:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4b998f62-44ea-48a2-a493-54bbe32da6e4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As soon as you create a Feature work item, you will be able to connect it to
    several Product Backlog work items that detail its specifications. The following
    screenshot shows the details of a Product Backlog work item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/64a16342-99a5-4d09-8844-cf33fbbd41fc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After that, Task and Test Case work items can be created for each Product Backlog
    work item. The user interface provided by Azure DevOps is really efficacious because
    it enables you to track the chain of functionalities and the relations among them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fe92bd07-a172-4c78-a547-e22c363404bd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As soon as you complete the input for the Product Backlog and Tasks work items,
    you will be able to plan the project sprints together with your team. The plan
    view enables you to drag and drop Product Backlog work items to each planned Sprint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/af7d376f-1824-47cd-88d1-ce55c871c4e8.png)'
  prefs: []
  type: TYPE_IMG
- en: This is how these work items are created. Once you understand this mechanism,
    you will be able to create and plan any software project. It is worth mentioning
    that the tool itself will not solve problems related to team management. However,
    the tool is a great way to incentive the team to update the project status, so
    you can keep a clear vision of how the project is evolving.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covered how you can create an Azure DevOps account for a software
    development project, and how to start managing your projects with Azure DevOps. It
    also gave a short review of all Azure DevOps functionalities, explaining how to
    access them through the Azure DevOps main menu. This chapter described in more
    detail how to manage system requirements and how to organize the job with various
    kinds of work items, and how to plan and organize sprints that will deliver Epics
    solutions with many Features.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter discusses the different models of software architecture. We
    will also learn about the fundamental hints and criteria for choosing among the
    options offered by a sophisticated cloud platform such as Azure while developing
    the infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Is Azure DevOps available only for .NET Core projects?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: May Azure DevOps trigger automatic builds after a commit in a specific branch? May
    Azure DevOps automatically trigger deployment in production?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What kind of test plans are available in Azure DevOps?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can DevOps projects use private NuGet packages?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why do we use work items?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between Epics and Features work items?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What kind of relation exists between Tasks and Product Backlog items/User Story
    work items?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some books and links you may consider reading with a view to gathering
    more information about this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://go.microsoft.com/fwlink/?LinkID=825688](https://go.microsoft.com/fwlink/?LinkID=825688)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/virtualization-and-cloud/hands-devops-azure-video](https://www.packtpub.com/virtualization-and-cloud/hands-devops-azure-video)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/application-development/mastering-non-functional-requirements](https://www.packtpub.com/application-development/mastering-non-functional-requirements)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
