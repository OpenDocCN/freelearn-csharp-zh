- en: Chapter 6. Trade
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we discussed how Microsoft Dynamics NAV can help us
    to streamline our production process using both the standard application as well
    as customized solutions. We talked about five vertical industries and how to fit
    the application for them.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will discuss how to use Microsoft Dynamics NAV for these
    companies using sales and purchase documents and how to integrate this with the
    built-in Warehouse Management and Reservation processes.
  prefs: []
  type: TYPE_NORMAL
- en: The primary focus of this chapter is on how the application is designed, and
    where to go to change or enhance the design. Basic knowledge of how to create
    and process sales and purchase documents in Microsoft Dynamics NAV is a prerequisite.
  prefs: []
  type: TYPE_NORMAL
- en: We will use examples from the same vertical industries—automotive, fashion,
    medicines, food, and furniture—which we discussed in the previous chapters. After
    reading this chapter, you will have a good understanding of how to implement Microsoft
    Dynamics NAV in trading companies.
  prefs: []
  type: TYPE_NORMAL
- en: The process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A trading company purchases and sells items without changing them. The main
    activities are purchase, storage, packaging, sales, and shipping, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The process](img/0365EN_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Managing the inventory is very important in these companies. Having inventory
    is crucial for delivering on time and not having to say "no" to customers.
  prefs: []
  type: TYPE_NORMAL
- en: Wholesale versus retail
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Traditionally, trading companies are divided into wholesale and retail companies.
    Wholesale companies sell to business and retail companies sell to consumers. Microsoft
    Dynamics NAV supports both and from the perspective of design (table and posting
    structure), there is not much difference.
  prefs: []
  type: TYPE_NORMAL
- en: The biggest difference between wholesale and retail for the application is the
    transaction volume. While the total turnover of a wholesale company can be much
    higher compared to a retailer, the retailer often has more, smaller transactions.
    It can be a challenge from an application design perspective to retain a solution
    that performs well.
  prefs: []
  type: TYPE_NORMAL
- en: Another issue with high volume transaction systems is traceability of the data.
    Whenever something goes wrong, it is very important to see where this has started
    and how much data was impacted by the mistake. In low transaction systems, it
    is easier to find this manually.
  prefs: []
  type: TYPE_NORMAL
- en: Sales and purchasing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Traditionally, salespersons used to work with paper order forms. They would
    write down the customer name and address and the items or services required.
  prefs: []
  type: TYPE_NORMAL
- en: '![Sales and purchasing](img/0365EN_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Paper order form
  prefs: []
  type: TYPE_NORMAL
- en: In Microsoft Dynamics NAV, the paper document is replaced by a sales and purchase
    document using a header for the general order information and lines to register
    the items and services.
  prefs: []
  type: TYPE_NORMAL
- en: The posting process breaks down the information in the document into the journals
    and posts them, so the end user does not have to worry about this. The application
    reuses the same posting routines as we discussed in earlier chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at how the documents and journals tie together by drawing the table
    and transaction scheme for this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sales and purchasing](img/0365EN_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The first step is creating the document. When we create this **Sales Document**
    (**Sales Header** and **Sales Line**), nothing is posted. We are only entering
    the information into the system that can be changed at any time.
  prefs: []
  type: TYPE_NORMAL
- en: When we start the **Codeunit Sales-Post (80)**, the system will create all the
    journals for us and post them. When we sell an item, the system will create an
    **Item Journal Line**, and when we sell a resource, the system creates a **Resource
    Journal Line**, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: The **Invoice Posting buffer** is used to create the entries in the **General
    Journal Line**. We already discussed this feature in [Chapter 3](ch03.html "Chapter 3. Financial
    Management"), *Financial Management*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Microsoft Dynamics NAV allows us to create four different kinds of posted sales
    documents: invoices, shipments, credit memos, and return receipts. We will discuss
    all these types later in this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: Transaction mirroring
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The unique concept of sales and purchase in Microsoft Dynamics NAV is the mirroring
    of the transaction structure. Once we understand how the sales transactions fit
    together, it will be easy to understand the structure of a purchase.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s demonstrate this by comparing the first fields in **Table 37 Sales Line**
    and **Table 39 Purchase Line**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Transaction mirroring](img/0365EN_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The fields in both tables are equally numbered and serve the same process even
    though they use different terminology, for example, field 18, **Qty. to Ship**
    (sale) and **Qty. To Receive** (purchase).
  prefs: []
  type: TYPE_NORMAL
- en: Some fields are different because they don't make sense to be in both processes,
    for example, **Unit Price (LCY)** (field 31) in purchase and **Customer Price
    Group** (field 42) in sales.
  prefs: []
  type: TYPE_NORMAL
- en: The purchase process also uses the same posting methodology. The purchase header
    (38) and purchase line (39) tables are posted using the codeunit Purch.-Post (90)
    in the purchase receipt, invoice, credit memo, and return shipment documents.
  prefs: []
  type: TYPE_NORMAL
- en: Let's have a closer look at the sales process.
  prefs: []
  type: TYPE_NORMAL
- en: Sales
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The sales process supports six document types that are normalized into two tables,
    sales header (36) and sales line (37).
  prefs: []
  type: TYPE_NORMAL
- en: 'Each process can have its own Number Series and has a special card and list
    page, but they all share the same business logic. Let''s discuss the document
    types:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Quote**: When a customer would like to know the terms and conditions of making
    a purchase, we can make a quote. This will show all the calculations such as pricing
    and VAT.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Blanket Order**: This is a pre-order status. When used, we have an agreement
    with the customer without knowing the exact shipment date.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Order**: This is used for the actual order document.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Invoice**: This can be used in two ways; directly, without a sales order
    if the company only invoices directly on G/L Accounts, or we can use the invoices
    to invoice one or more shipments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Credit Memo**: We can use a credit memo when we credit on a G/L Account.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Return Order**: If a customer returns an item, we can use a return order
    to reverse the inventory process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Orders
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The main process is the order. The other document types are designed to support
    this. Sales orders can be created directly or via a quote or blanket order. There
    are two differences between a quote and a blanket order:'
  prefs: []
  type: TYPE_NORMAL
- en: Quotes can only be fully transferred into a sales order, not in parts. For example,
    a blanket order of 100 items can be split into 10 deliveries of 10 items with
    different shipping dates.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A customer with a quote has the possibility to say yes or no. When the answer
    is no, there will be no transaction. Therefore, quotes are not used in the supply
    and demand calculation, as we discussed in the previous chapter. A blanket order
    is a real order. The customer should eventually purchase the complete quantity
    that was agreed. Therefore, the blanket orders are used in the supply and demand
    calculation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quote to order and blanket order to order
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although the quotes and blanket to orders are stored in the same table, the
    records are physically deleted from the table and inserted using another document
    type. This is done in codeunits sales-quote to order (86) and blanket sales order
    to order (87).
  prefs: []
  type: TYPE_NORMAL
- en: When comparing these codeunits in compare tools, such as Beyond Compare or Araxis,
    we can see that there is a lot of similarity. They both create a new sales order.
  prefs: []
  type: TYPE_NORMAL
- en: Quote to order
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When moving a quote to an order, the complete quote is copied and then deleted.
    A quote can be created from an opportunity in CRM as we discussed in [Chapter
    4](ch04.html "Chapter 4. Relationship Management"), *Relationship Management*.
    Therefore, the opportunity is updated when this happens.
  prefs: []
  type: TYPE_NORMAL
- en: Blanket order to order
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A blanket order can be moved in parts. Therefore, business logic is implemented
    to calculate the remaining quantity. There is no link between blanket orders and
    CRM and it is also not possible to create a blanket order from a quote.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new sales order
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to understand the examples in this chapter, we will discuss the most
    important fields of the sales order. A sales document contains one header and
    multiple lines.
  prefs: []
  type: TYPE_NORMAL
- en: While the sales header table contains more static registration of information,
    the sales line has more real business logic, such as price calculation, inventory
    availability, and VAT. We will discuss how this business logic is normalized.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a new sales order](img/0365EN_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Sales header
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All document types are uniquely numbered. The primary key fields of the sales
    header table are **Document Type** and **No.**.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is very useful to use Number Series code that makes sense to the end users,
    for example, SO13-0012 for sales order 12 in the year 2013 and SQ14-0312 for sales
    quote 312 for 2014.
  prefs: []
  type: TYPE_NORMAL
- en: 'The sales document contains the following two different customer no. fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sell-to Customer No.**: This is the primary customer no. field, which defines
    the customer who requested the order to be created. This customer number is used
    to calculate the discounts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bill-to Customer No.**: By default, the **Sell-to Customer No.** will also
    receive the invoice. By changing this field to another customer, this will make
    the invoice print out containing other customer details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A sales document contains some dates that are used for different purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Posting Date**: This date is used for posting to the various ledgers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Document Date**: This date is used for the accounts receivable'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Shipment Date**: This date is for the calculation or the inventory availability'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Due Date**: This date is the last date at which the bill-to customer is expected
    to pay the invoice'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sales lines
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Each sales document can contain an almost unlimited number of sales lines. By
    default, the sales lines are numbered 10000, 20000, 30000, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The numbering is done using the `AutoSplitKey` property on the sales line page
    and the increment cannot be changed. When a user inserts new records between two
    existing lines, the program will calculate the new number to be exactly between
    the old values, for example, 10000, 15000, 17500, 18750, 19375, 19687, 19843,
    19921, 19960, 19980, 19990, 19995, 19997, 19998, 19999, and 20000\. If there is
    no more room, the system will generate a runtime error message, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sales lines](img/0365EN_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Master data options
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'A sales line can contain a reference to six types of master data defined by
    the **Type** field. These types are: **Text** (blank option), **G/L Account**,
    **Item**, **Resource**, **Fixed Asset**, and **Charge** (item).'
  prefs: []
  type: TYPE_NORMAL
- en: The type that we specify here determines which journal will be used later when
    we post this sales document. However, each line can contain financial information,
    which will be processed to the general ledger via the posting buffer table.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss how to add a new type to this process.
  prefs: []
  type: TYPE_NORMAL
- en: Sales line fields
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create a new sales line and start the important business logic in Microsoft
    Dynamics NAV, we need to know about the following fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Type**: This defines the master data type the sales line uses and eventually
    the journal that will be used during posting'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: When the **Type** field changes after the sales line was created, the record
    is cleared and the fields get their default values.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**No.**: This is the actual reference to the unique number of the master data
    type that is used'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: When the **No.** field is changed, the previous quantity is used to recreate
    the sales line with the new master data.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Quantity**: This is used to calculate the sales amounts for the invoicing
    and in the case of an item, and also the physical quantity of the changes in inventory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Outstanding Quantity**, **Qty. to Invoice**, and **Qty. to Ship**: These
    fields are designed to use for partial shipping and invoicing of an order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unit Price** and **Unit Cost (LCY)**: The fields are used to calculate the
    sales amount and profit'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Line Discount %** and **Line Discount Amount**: These fields are used to
    determine the discounts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validation flow
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The sales line table has a specific validation flow of functions that is important
    to understand before making changes to the table. This flow is based on the normal
    way an end user creates a sales line.
  prefs: []
  type: TYPE_NORMAL
- en: To create a sales line, only four fields are populated and the line is ready
    to use. After setting the type and choosing a no., the end user types in the **Quantity**
    field and if necessary, the **Unit Price** field.
  prefs: []
  type: TYPE_NORMAL
- en: Let's analyze the C/AL code in the `OnValidate` trigger of the three fields
    that can calculate the sales line.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When changing these C/AL routines, make sure to use the *Test near*, *Test far*,
    *Do it*, and *Clean up* methods that we discussed in [Chapter 1](ch01.html "Chapter 1. Introduction
    to Microsoft Dynamics NAV"), *Introduction to Microsoft Dynamics NAV*.
  prefs: []
  type: TYPE_NORMAL
- en: No. | field 6
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The C/AL code in the `OnValidate` trigger starts by doing the initial testing,
    if the change is allowed. After this, the record is cleared and the old values
    for the **No.** field and **Quantity** fields are applied, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, the sales line inherits the values from the sales header, if required,
    and the date fields are calculated, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The sales header information is not present in the sales line when an end user
    picks a value for the **No.** field. We cannot use the customer information for
    table relations.
  prefs: []
  type: TYPE_NORMAL
- en: When this is done, we see a `CASE` statement where the master data is acquired.
    This would be the place where we would move newly added fields from master data
    to the sales line table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: When this is done, the quantities are calculated and the unit price is calculated.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The latter is very important for our analysis. After this function, other code
    is executed but this is not important for this example.
  prefs: []
  type: TYPE_NORMAL
- en: Quantity | field 15
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Just like the **No.** field, the **Quantity** field also first checks whether
    the change is allowed. When this is done, the following section of C/AL code is
    important:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding C/AL code, we should notice again the `UpdateUnitPrice` function
    and also the validation of the `Line Discount %` field.
  prefs: []
  type: TYPE_NORMAL
- en: Unit price | field 22
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This field has little C/AL code. When changing the unit price manually, the
    C/AL code will trigger the `Line Discount %` field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Before going to this field, let's first have a look at the `UpdateUnitPrice`
    function we noticed earlier in the **Quantity** and **No.** field.
  prefs: []
  type: TYPE_NORMAL
- en: UpdateUnitPrice
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `UpdateUnitPrice` function executes the following C/AL code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: After doing the checks, the sales price calculation routines we discussed in
    [Chapter 2](ch02.html "Chapter 2. A Sample Application"), *A Sample Application*,
    are executed. This is codeunit Sales Price Calc. Mgt. 7000.
  prefs: []
  type: TYPE_NORMAL
- en: When this is done, it validates the field Unit Price that we already analyzed.
    This leads us to one single point; the `OnValidate` trigger of Line Discount %.
  prefs: []
  type: TYPE_NORMAL
- en: Line Discount % | field 27
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The C/AL code in this `OnValidate` trigger first calculates the line discount
    amount based on the unit price and then starts the `UpdateAmounts` function, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: UpdateAmounts
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `UpdateAmounts` function completes the creation of the sales line and this
    is where our quest ends.
  prefs: []
  type: TYPE_NORMAL
- en: The two most important other functions that are executed in this function are
    the `UpdateVATAmounts` for VAT calculation and the credit limit check for the
    customer in `CustCheckCreditLimit.SalesLineCheck(Rec)`.
  prefs: []
  type: TYPE_NORMAL
- en: VAT calculation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The VAT calculation in Microsoft Dynamics NAV is not normalized in one application
    area but redeveloped everywhere. This makes VAT calculation one of the most complex
    application areas to make changes to.
  prefs: []
  type: TYPE_NORMAL
- en: Code cloning
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The VAT calculation is not only done in the sales line, purchase line, and general
    journal line table, but also in more specific function tables such as the service
    line. This is done by making a full copy of the C/AL code.
  prefs: []
  type: TYPE_NORMAL
- en: This phenomenon is known as code cloning in computer science. Although code
    cloning simplifies application design, it is considered bad practice and should
    be avoided at all times. In this case, it would have been better if VAT would
    have been calculated in a generic engine.
  prefs: []
  type: TYPE_NORMAL
- en: It is therefore highly recommended not to change VAT calculation in Microsoft
    Dynamics NAV.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If VAT calculation is required in a customized solution, it can be done using
    the general journal line as a temporary table. By populating the necessary fields
    and starting the calculation, we can use the results without copying the VAT calculation
    to our own solution.
  prefs: []
  type: TYPE_NORMAL
- en: Invoicing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Microsoft Dynamics NAV, a sales order can be shipped and invoiced directly
    from the document.
  prefs: []
  type: TYPE_NORMAL
- en: However, not all companies have a combined shipping and invoicing process. Some
    companies ship the goods first and send the invoice later, most of the time using
    combined invoicing.
  prefs: []
  type: TYPE_NORMAL
- en: Prepayments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Besides separating the invoice moment from the shipping moment, Microsoft Dynamics
    NAV also allows a prepayment process. This prepayment process is designed to work
    on top of the normal invoicing process. This means it does not replace the invoice
    but instead creates an extra invoice.
  prefs: []
  type: TYPE_NORMAL
- en: '![Prepayments](img/0365EN_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This invoice is not created in codeunit sales-post (80) but in codeunit sales-post
    prepayments (461).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using prepayments in Microsoft Dynamics NAV will always generate a minimum of
    two invoices per sales order.
  prefs: []
  type: TYPE_NORMAL
- en: When the order is eventually invoiced, the prepayment invoice is deducted from
    the invoice amount.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The design of this solution by Microsoft teaches us and demonstrates that to
    generate a posted sales invoice, it is not specifically necessary to start codeunit
    sales-post 80.
  prefs: []
  type: TYPE_NORMAL
- en: Combined invoicing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Combined invoicing of shipments can be done manually or using a batch report.
  prefs: []
  type: TYPE_NORMAL
- en: Manual
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To manually combine shipments on a sales invoice, we can use the **Sales-Get
    Shipment Codeunit (64)**.
  prefs: []
  type: TYPE_NORMAL
- en: This codeunit can be started from the actions on a sales invoice subpage (47)
    and displays the sales shipment lines that are not yet completely invoiced.
  prefs: []
  type: TYPE_NORMAL
- en: '![Manual](img/0365EN_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The C/AL code, however, is not completely within the codeunit; the process starts
    in the codeunit and runs the page. The page then again starts a function in the
    codeunit.
  prefs: []
  type: TYPE_NORMAL
- en: '![Manual](img/0365EN_06_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Batch
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The Combine Shipments report (295) can be used to create one invoice for multiple
    shipments in batch. It works in a similar way as the Combine Invoice report we
    created in [Chapter 2](ch02.html "Chapter 2. A Sample Application"), *A Sample
    Application*.
  prefs: []
  type: TYPE_NORMAL
- en: The C/AL code that creates the sales line for the invoice is normalized and
    used in both codeunit sales-get shipment (64) and combine shipments report (295).
    The function is located in the sales shipment line table (111) and is called `InsertInvLineFromShptLine`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To enable combined shipments, the Boolean field Combine Shipments (87) should
    be set to **Yes** in the customer table. This value is inherited into the sales
    header for the sales order document.
  prefs: []
  type: TYPE_NORMAL
- en: Credit memo and return orders
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The credit memo and return order document types are used to reverse the order
    process.
  prefs: []
  type: TYPE_NORMAL
- en: Purchasing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we can ship the items we sold, we first need to purchase or produce them.
    We discussed the production process in the previous chapter, so let's focus on
    the purchasing process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Technically, the sales and purchase process are mirrored transactions and the
    application design is similar. The purchase header table has the same document
    types: quote, order, invoice, credit memo, blanket order, and return order, and
    the same posting process.'
  prefs: []
  type: TYPE_NORMAL
- en: So instead of going into the similarities, we will discuss the differences.
  prefs: []
  type: TYPE_NORMAL
- en: Resources
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In Microsoft Dynamics NAV, it is not possible to purchase resources. When we
    take a closer look at the **Type** field (5), we can see that the option is left
    blank:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Resources](img/0365EN_06_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Drop shipments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When selling items that are not in the inventory, it is possible to purchase
    the items from a vendor and have them directly shipped to the customer. This process
    is called drop shipments.
  prefs: []
  type: TYPE_NORMAL
- en: This process can be handled manually and using the requisition worksheet.
  prefs: []
  type: TYPE_NORMAL
- en: Manual
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To create a drop shipment manually, the purchase order should first be created
    using the **Sell-to Customer No.** from the corresponding sales order as the shipping
    address:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Manual](img/0365EN_06_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When this is done, we can start the codeunit Purch.-Get Drop Shpt. (76) from
    **ACTIONS** on the purchase order. This function will show a list of all sales
    orders for this **Sell-to Customer No.** regardless of whether drop shipment is
    possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we select a sales order without sales lines that are marked for drop shipment,
    we get the following error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Manual](img/0365EN_06_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After retrieving the sales information, the sales line and purchase line table
    are connected to each other by populating the **Purchase Order No.**, **Purch.
    Order Line No.**, **Sales Order No.**, and **Sales Order Line No.** fields.
  prefs: []
  type: TYPE_NORMAL
- en: '![Manual](img/0365EN_06_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: These fields are numbered 71 and 72 in the sales line and purchase line table.
  prefs: []
  type: TYPE_NORMAL
- en: Requisition worksheet
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We introduced the requisition worksheet in the previous chapter when we discussed
    the planning process. The requisition worksheet can also be used for the **Drop
    Shipment** functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Requisition worksheet](img/0365EN_06_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This will start the Get Sales Orders report (698), which will filter on all
    sales lines marked for drop shipment and creates a line in the requisition worksheet
    table.
  prefs: []
  type: TYPE_NORMAL
- en: This line can be processed by carrying out the action messages. This function
    will also connect the sales order to the purchase order using fields 71 and 72.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The C/AL code for manual drop shipment and using the requisition worksheet is
    not normalized (code cloning). This means that changes done in one method should
    also be done in the other method and maintained twice.
  prefs: []
  type: TYPE_NORMAL
- en: Document releasing and approval process
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Within the sales and purchase document process, there is a workflow available
    for releasing and approving a document. This is taken care of by a single status
    field and two processes.
  prefs: []
  type: TYPE_NORMAL
- en: Status
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The **Status** field (120) in the sales header and purchase header table indicates
    the status of the process. There are four options: **Open**, **Released**, **Pending
    Approval**, and **Pending Prepayment**.'
  prefs: []
  type: TYPE_NORMAL
- en: Two of these status fields, **Open** and **Released**, are mandatory to use.
    **Pending Approval** and **Pending Prepayment** are optional.
  prefs: []
  type: TYPE_NORMAL
- en: We have already discussed prepayments earlier in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Releasing a document
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before a document can be posted, it is mandatory to release it. This is done
    by the codeunits Release Sales Document (414) and Release Purchase Document (415).
    These codeunits are, as you may have guessed, almost identical.
  prefs: []
  type: TYPE_NORMAL
- en: 'The codeunit performs a number of tests before setting the status to **Released**.
    Let''s discuss some of these checks:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A typical example of Test Near, the customer number should not be blank:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'There should be at least one sales line with a `Quantity`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When the testing is done, some final calculations are implemented. These calculations
    are document calculations that span over the individual sales lines:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following codeunit calculates the invoice discount:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: At the end of the releasing process, the VAT calculation is completed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Releasing a document also calculates the **Amount** and **Amount Including VAT**
    fields on the sales line.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manual versus automatic releasing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'By default, Microsoft Dynamics NAV releases the document automatically. The
    posting codeunits sales-post (80) and purchase-post (90) contain the following
    C/AL code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This code temporarily releases the document by starting the release codeunit
    but then sets the status back to **Open**, modifies the records, and commits the
    transaction. Then, the status is set to **Released**.
  prefs: []
  type: TYPE_NORMAL
- en: Whenever there is an error afterwards, the status will still be **Open** since
    that was the status before the `COMMIT`.
  prefs: []
  type: TYPE_NORMAL
- en: Document approval
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On top of the release process is a document approval workflow. This feature
    is designed to work on top of the functionality we already discussed and is optional.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting sales and purchase documents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: During the life cycle of our application, many documents will be created. There
    might come a day when this exceeds the point where some maintenance is required.
  prefs: []
  type: TYPE_NORMAL
- en: Data deletion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the **IT Administration** section of the **Departments Role Center**, we
    can find a **Data Deletion** section, which is designed for IT administrators
    to clean up data, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Data deletion](img/0365EN_06_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When a sales order is invoiced using **Get Shipment Lines** or **Combined Invoicing**,
    the sales order is not automatically deleted, nor are completely handled blanket
    orders.
  prefs: []
  type: TYPE_NORMAL
- en: Leaving old orders in the database may lead to large tables. Since these document
    tables are heavily inserted and modified throughout the working day by many people,
    this may lead to unnecessary overhead in the database.
  prefs: []
  type: TYPE_NORMAL
- en: Deletion of shipments and invoices
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Microsoft Dynamics NAV allows users to delete posted shipments and invoices
    when they are printed.
  prefs: []
  type: TYPE_NORMAL
- en: '![Deletion of shipments and invoices](img/0365EN_06_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Although it should be considered carefully, it might be necessary for some companies
    to periodically clean up this data. Most companies never look at the shipments
    once the items are delivered to their customers.
  prefs: []
  type: TYPE_NORMAL
- en: Cleaning up these tables will have a positive impact on the performance and
    maintainability of your system if it reaches the size of roughly 50-100 GB.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When designing business analysis reports, never use data from the sales shipment
    header or line table since they might get deleted. Always use the ledger entry
    tables instead.
  prefs: []
  type: TYPE_NORMAL
- en: Inventory management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Microsoft Dynamics NAV, inventory is kept for items in locations using **Item
    Ledger Entries** and **Value Entries**. On top of this, we can use **Stock Keeping
    Units** to have different inventory settings per item, location, and variant.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by looking at the design patterns of the inventory in Microsoft
    Dynamics NAV:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Inventory management](img/0365EN_06_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Keeping inventory can be extended with the use of warehouse management. This
    is designed to run on top of the **Basic Item Inventory** functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Items
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The item table hosts the master data for inventory management like a G/L Account
    does for financial management.
  prefs: []
  type: TYPE_NORMAL
- en: '![Items](img/0365EN_06_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this table, we can do the set up for each individual item such as pricing,
    inventory and production strategies, and tracking options.
  prefs: []
  type: TYPE_NORMAL
- en: Locations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The location table defines which level of inventory management is done. A location
    can either be a physical warehouse somewhere or a part of a warehouse, if one
    warehouse uses different warehouse strategies.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we look at the **Location Card**, we see what we can set up:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Locations](img/0365EN_06_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s see these settings in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '**General**: Here, we can specify the physical location of the warehouse. We
    can also specify **Use As In-Transit**. When this is specified, we can only use
    transfer orders to move inventory to this location.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Warehouse**: On this tab, we specify which level of warehouse management
    functionality we want to use. If everything is left blank, no warehouse entries
    are created when this location is used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bins**: This tab contains the default bins for most inventory activities,
    such as **Receipt** and **Shipment**. These values can be changed when creating
    the warehouse documents.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bin Policies**: This tab contains some more advanced options for warehouse
    management.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Variants
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Item variants is a powerful feature in Microsoft Dynamics NAV. It enables us
    to split an item into different categories without having to create a new item.
  prefs: []
  type: TYPE_NORMAL
- en: The variant code is maintained in the item ledger entries and used when applying
    them. Let's see an example of how this can be used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our company sells t-shirts. We have three sizes; small, medium, and large,
    and four colors; white, black, red, and blue. This enables us to create the following
    twelve unique variant codes:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Size and color |'
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  prefs: []
  type: TYPE_TB
- en: '| S-WHITE | S-BLACK | S-RED | S-BLUE |'
  prefs: []
  type: TYPE_TB
- en: '| M-WHITE | M-BLACK | M-RED | M-BLUE |'
  prefs: []
  type: TYPE_TB
- en: '| L-WHITE | L-BLACK | L-RED | L-BLUE |'
  prefs: []
  type: TYPE_TB
- en: When we purchase or produce these t-shirts, we need to specify the variant code,
    which is inherited into the item ledger entry.
  prefs: []
  type: TYPE_NORMAL
- en: If we sell or transfer one of these items, we can specify the same variant code.
    Microsoft Dynamics NAV will then use this variant code when searching for inventory.
  prefs: []
  type: TYPE_NORMAL
- en: '![Variants](img/0365EN_06_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Stock keeping units
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes, the same item can have more than one unit cost, replenishment system,
    or production method. To support this, we can use stock keeping units.
  prefs: []
  type: TYPE_NORMAL
- en: 'A stock keeping unit refers to an existing item, location, and variant. These
    three fields are the unique primary key. Let''s see an example of how this can
    be used. Our t-shirts need to have different unit costs. In order to do this,
    we need to create a SKU for each variant we just created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Stock keeping units](img/0365EN_06_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When we now create two purchase order lines for the same item with a different
    variant code, we can see that the **Last Direct Cost** is different for each variant.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Stockkeeping Units** is a very powerful feature of Microsoft Dynamics. It
    enables you to change the settings for an item after it is created, using variant
    codes for each setting. Make sure the code of the variant is self-explanatory.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a SKU function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When an item has many variants and locations, creating the SKU for each combination
    can be quite a challenge. To help in this process, we can use the **Create Stockkeeping
    Unit** report (5706).
  prefs: []
  type: TYPE_NORMAL
- en: 'The newly created SKU will inherit all the necessary fields from the item.
    After this, we can go in and make necessary changes to the individual SKU records:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a SKU function](img/0365EN_06_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Sales pricing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The basic unit price of an item can be set in the **Item** table. This is a
    static field, which is used when a new sales document is created. To use more
    flexible unit prices, we can use the **Sales Prices** and **Sales Discounts**
    functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sales pricing](img/0365EN_06_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: More information about pricing can be found in [Chapter 1](ch01.html "Chapter 1. Introduction
    to Microsoft Dynamics NAV"), *Introduction to Microsoft Dynamics NAV*, and [Chapter
    2](ch02.html "Chapter 2. A Sample Application"), *A Sample Application*.
  prefs: []
  type: TYPE_NORMAL
- en: Item ledger entry application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the inventory is created and used, the system will apply and close positive
    and negative item ledger entries with each other. This enables us to trace inventory.
  prefs: []
  type: TYPE_NORMAL
- en: The application is saved in **Item Application Entry** table (339). Let's have
    a look at the C/AL code that handles the item application.
  prefs: []
  type: TYPE_NORMAL
- en: Item application C/AL routine
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Item application is done in codeunit Item Jnl.-Post Line (22) in the `ApplyItemLedgEntry`
    function. The function starts with checking whether reservations are used. Using
    reservations changes the way inventory application is used. We'll discuss reservations
    later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'If there are no reservations made, the system will start the application code.
    This allows two possibilities: manual application and automatic application.'
  prefs: []
  type: TYPE_NORMAL
- en: Manual application is done when the user populates the **Applies-to Entry**
    field in the item journal line. This is also used when users change the application.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In this case, the system checks whether the **Item Ledger Entry** we have specified
    matches the requirements. When the application is done automatically, the system
    will search for the best item ledger entry based on the same requirements.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The actual application entry is created in the `InsertApplEntry` function.
  prefs: []
  type: TYPE_NORMAL
- en: Requirements to apply an item ledger
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In order to apply an item ledger entry to another item ledger entry, certain
    requirements should be taken into account. We can read these requirements from
    the C/AL code:'
  prefs: []
  type: TYPE_NORMAL
- en: The **Item No.** should be the same for both the entries.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The old item ledger entry should be **Open**. When an item ledger entry is fully
    applied, the Boolean field **Open** is set to **False**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The variant code and location code should be the same.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Boolean field **Positive** should have a reverse sign. This results in the
    limitation of not being able to apply one negative entry to another negative entry.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other requirements are conditional based on system setup. For example, if the
    item uses a **Lot No.** or **Serial No.**, this should also match.
  prefs: []
  type: TYPE_NORMAL
- en: When the system has defined the filter, it tries to find the first record. The
    search method depends on the costing method. If the cost method is LIFO, the system
    will try to find the last record in the filter. For all other costing methods,
    it will find the first.
  prefs: []
  type: TYPE_NORMAL
- en: We can also see that when using Lot numbers, the application and the costing
    is done within the Lot number.
  prefs: []
  type: TYPE_NORMAL
- en: Value entries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Microsoft Dynamics NAV, the physical information for Inventory is stored
    separately from the financial information. This information is stored in a one-to-many
    relation, meaning one Item Ledger Entry can have multiple Value Entries.
  prefs: []
  type: TYPE_NORMAL
- en: This enables us to specify the value information in detail in a time dimension
    and cost type dimension.
  prefs: []
  type: TYPE_NORMAL
- en: Direct cost
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Each item ledger entry starts with at least one value entry of the type direct
    cost. This defines the initial value of the inventory. During the inventory lifetime,
    the item ledger entry can get the following four other types of value entries:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Revaluation**: This entry type is used when the item revaluation batch is
    started and the value of the item is different compared to the direct cost.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rounding**: Sometimes, the inventory adjustment leads into rounding issues.
    The rounding is stored as a special entry type for traceability.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Indirect Cost**: When **Indirect Cost %** is used on the item card the system
    will create additional value entries for the indirect cost amount.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Variance**: When the item uses standard cost, the difference between the
    invoiced amount and the standard cost is saved as an entry type variance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Value entries and general ledger entries
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The value entries and general ledger entries are linked through the G/L - Item
    Ledger Relation table (5823). Each general ledger entry is linked to one or more
    value entries. This enables traceability and helps auditors to analyze the system.
  prefs: []
  type: TYPE_NORMAL
- en: Transfer orders
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To move inventory from one location to another location, it is possible to
    do a negative and a positive adjustment in the **Item Journal Line**, but we can
    also use a **Transfer Order**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Transfer orders](img/0365EN_06_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The **Transfer Order** creates the item ledger entries for each location and
    maintains the link for the value entries.
  prefs: []
  type: TYPE_NORMAL
- en: This means that if we move 100 items from location blue to green without having
    received the purchase invoice yet, the system will create value entries for the
    moved inventory when the invoice is posted. Let's try this for a new item.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The item we will use is **Jeans**. The first step is to create the item as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: We only define the **No.**, **Description**, **Base UOM**, and the **Posting
    Groups**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we create a new purchase order with quantity 10 in location **BLUE**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We receive the purchase order.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using a new transfer order, we move the inventory from **BLUE** to **RED**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will result in five **Item Ledger Entries** with five **Value Entries**
    but the total cost is zero since we have not yet received the purchase invoice.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Example](img/0365EN_06_27.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Now, we create a new purchase invoice and get the receipt lines. We use a **Unit
    Cost** of **10**.![Example](img/0365EN_06_28.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This results in a value entry for the original item ledger entry.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To create the value entries for the transfers, we need to run the Adjust Cost
    - Item Entries report (795). This results in all item ledger entries having the
    same value entries:![Example](img/0365EN_06_29.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Requisition worksheets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For trading companies, it is very important to have just enough inventories;
    not too many, not too few. In order to do this, we can use the requisition journals
    together with the reordering policy on the item.
  prefs: []
  type: TYPE_NORMAL
- en: Reordering policy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The reordering policy tells the system how to calculate the moment and the
    quantity for item ordering. Microsoft Dynamics NAV uses the following four different
    reordering policies:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed Reorder Qty.**: Each time we run the requisition journal, the system
    will purchase the same, fixed quantity of items. This quantity is specified in
    the **Reorder Quantity** field.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maximum Qty.**: The system will purchase as many items to meet the value
    of the **Maximum Inventory** field.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Order**: For each sales order, a purchase order will be created. This automatically
    enables the reservation process for this item.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lot-for-Lot**: This option will calculate the required inventory necessary
    to deliver the outstanding sales orders.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The quantity is calculated in the codeunit Inventory Profile Offsetting (99000854)
    in the `CalcReorderQty` function.
  prefs: []
  type: TYPE_NORMAL
- en: Extending the reordering policy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The ordering policy algorithms in Microsoft Dynamics NAV are very static and
    some trading companies need more flexibility.
  prefs: []
  type: TYPE_NORMAL
- en: One example is seasonal and depends on the weather. Toy stores need extra inventory
    during Christmas and garden tool stores have their peak in spring. During these
    peaks, the delivery times and availability is also different compared to the other
    times of the year.
  prefs: []
  type: TYPE_NORMAL
- en: Virtual inventory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An upcoming trend in trading companies is virtual inventory. This is the inventory
    that we do not control but is available to sell to our customers. The computer
    industry uses this frequently. Everyone can start a website for computer equipment
    and use the inventory of large wholesale companies.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order for this to work, the information should always be real time and reliable.
    In Microsoft Dynamics NAV, we could solve this using web services.
  prefs: []
  type: TYPE_NORMAL
- en: Warehouse management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With inventory management, we can use the locations to see where the inventory
    is. For some trading companies, this is good enough but some would like to be
    more specific in where the items are in the warehouse.
  prefs: []
  type: TYPE_NORMAL
- en: For this, we can use the **Warehouse Management Systems** (**WMS**) functionality
    in Microsoft Dynamics NAV. WMS enables us to specify zones and bins within each
    location.
  prefs: []
  type: TYPE_NORMAL
- en: Another feature in warehouse management is the possibility of combining sales
    shipments and purchase receipts in warehouse documents. Using these documents,
    warehouse employees can pick or put away for more than one order at the same time
    resulting in a more efficient way of doing logistics.
  prefs: []
  type: TYPE_NORMAL
- en: Warehouse strategy levels
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Warehouse management can be used and implemented from very simple to highly
    advanced. To demonstrate the application design of WMS in Microsoft Dynamics NAV,
    we will discuss the following five possible levels of implementation. For each
    level, we will show the table and posting models.
  prefs: []
  type: TYPE_NORMAL
- en: '**Bin Code**: Using this field in the sales and purchase document enables the
    system to start creating warehouse entries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Warehouse Receipt and Shipment**: This allows us to combine sales shipments
    and purchase receipts in one warehouse document. We cannot use the **Pick and
    Put-Away** activities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Warehouse Put-Away and Pick**: For each purchase receipt or sales shipment,
    we can create a **Put-Away or Pick** journal.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Warehouse Receipt and Shipment + Use Put-away Worksheet**: This allows us
    to implement a real two-step warehouse process and receive the items on a staging
    location and creating put-away documents to move the items to their storage location
    in the warehouse.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Directed Put-Away and Pick**: This is the full option of WMS functionality
    in Microsoft Dynamics NAV. We use **Receipts**, **Shipments**, **Put-aways**,
    and **Picks**. Microsoft Dynamics NAV will suggest the **Bin Codes**. We can also
    use **Zones**, **Cross Docking**, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Location setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The setup options in the Location table (14) enable or disable the WMS options
    in Microsoft Dynamics NAV. This is done on the **Warehouse** tab, as shown in
    the following screenshot. Each level requires a special combination of settings.
  prefs: []
  type: TYPE_NORMAL
- en: '![Location setup](img/0365EN_06_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s have a look at the different levels:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Level 1**: Enable Bin Mandatory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Level 2**: Enable Require Receive, Require Shipment, and Bin Mandatory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Level 3**: Enable Require Put-away, Require Pick, and Bin Mandatory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Level 4**: Enable Require Receive, Shipment, Require Put-away, Require Pick,
    Bin Mandatory, and Use Put-away Worksheet'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Level 5**: Enable Require Receive, Require Shipment, Require Put-away, Require
    Pick, Bin Mandatory, and Directed Put-away and Pick'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Warehouse employees
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before we can start, the current user should be set up as a warehouse employee.
  prefs: []
  type: TYPE_NORMAL
- en: '![Warehouse employees](img/0365EN_06_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This can be done by creating a new record in the Warehouse Employee table (7301).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Each user can be a warehouse employee in each location and can only do warehouse
    actions in the locations that they are assigned to.
  prefs: []
  type: TYPE_NORMAL
- en: Bin code | level 1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The starting level of implementing WMS is using the Bin table. This is done
    by enabling the **Bin Mandatory** field on the location. The **Bin Code** field
    is available in all the necessary tables, such as Purchase Line, Sales Line, and
    Item Journal Line.
  prefs: []
  type: TYPE_NORMAL
- en: When the **Bin Code** is used, codeunit Item Jnl.-Post Line (22) will create
    a Warehouse Journal Line and start the Whse. Jnl.-Register Line Codeunit (7301).
    This will result in the creation of Warehouse Entries (7312) and a Bin Content
    (7302).
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will create a new location, **ORANGE**, with a bin of **BIN1**. The location
    uses the **Bin Mandatory** option, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Example](img/0365EN_06_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Bin Mandatory
  prefs: []
  type: TYPE_NORMAL
- en: In a new purchase order, we can now select this new Bin Code and post a receipt.
    The system now creates a new record in the **Bin Content** table, which enables
    us to see the created **Warehouse Entries**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Example](img/0365EN_06_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Bin content
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Whenever a Bin is used for the first time, Microsoft Dynamics NAV will create
    a **Bin Content** record. A **Bin Content** record is neither master data nor
    a ledger entry or document. It is a special kind of table in the philosophy of
    Microsoft Dynamics NAV.
  prefs: []
  type: TYPE_NORMAL
- en: 'The C/AL code for the **Bin Content** handling can be found in codeunit Whse.
    Jnl.-Register Line (7301). To see which Bins are used for an item at any moment,
    we can open the **Bin Content** from the **Item Card**, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bin content](img/0365EN_06_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The warehouse entries can be displayed by clicking on the **Quantity (Base)**
    field.
  prefs: []
  type: TYPE_NORMAL
- en: Receipt and shipment | level 2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we enable **Require Receive** and **Require Shipment** in the location,
    we can start using the warehouse receipt and shipment documents. These documents
    allow us to receive or ship multiple purchase or sales orders in one document.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at how this is done in the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Receipt and shipment | level 2](img/0365EN_06_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Warehouse request
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All warehouse documents start with a record Warehouse Request table (5765).
    These records are created when a sales or purchase document is released.
  prefs: []
  type: TYPE_NORMAL
- en: 'The warehouse receipt or shipment can be created in the following three ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the **Create Whse. Receipt** or **Create Whse. Shipment** option from
    the purchase and sales order
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Get Source Documents report (5723)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the **Get Source Documents** option on the **Warehouse Receipt** or **Shipment
    Card**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first two options will create a new warehouse document for each sales or
    purchase document. The latter allows us to combine orders in one warehouse document.
  prefs: []
  type: TYPE_NORMAL
- en: '![Warehouse request](img/0365EN_06_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Limitations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using only the warehouse receipt and shipment document is basically just adding
    one layer on top of the sales and purchase document. The posting routines **Whse.
    Post Shipment (5763)** and **Whse. Post Receipt (5760)**, do not actually post
    something to the warehouse; they just write back the Bin code to the Sales Line
    and Purchase Line table. Technically, this uses the same C/AL code as level 1.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see how this is done by looking at the `InitSourceDocumentLines` function
    of, for example, Codeunit Whse. Post Receipt (5760):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: When the source tables are updated, the system creates a normal purchase receipt
    or sales shipment using codeunits sales-post (80) and Purch. Post (90).
  prefs: []
  type: TYPE_NORMAL
- en: Put-away and Pick | level 3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Instead of creating a warehouse receipt or shipment, we can also directly create
    a Put-away or Pick from the sales or purchase order.
  prefs: []
  type: TYPE_NORMAL
- en: To enable this, we need to activate the **Require Put-away** and **Require Pick**
    options on the **Location Card**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Put-away and Pick | level 3](img/0365EN_06_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Warehouse request
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The warehouse request record is exactly the same as in level 2, but instead
    of creating a warehouse receipt or shipment, the system directly creates a warehouse
    activity header and line.
  prefs: []
  type: TYPE_NORMAL
- en: Warehouse activities
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The warehouse activity header and line table are the internal Microsoft Dynamics
    NAV warehouse documents. There are five types of warehouse activity documents,
    they are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Put-away**: This document is used to move items from the receipt bin to a
    put-away bin. The document is generated from a warehouse receipt.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pick**: This document is used to move items from a storage bin to a shipment
    bin. The document is generated from a warehouse shipment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Movement**: This is an internal document that is used to move items internally
    in the warehouse.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Invt. Put-away**: This document is used to receive items and put them directly
    into the warehouse on their permanent bin. The document is created from a warehouse
    request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Invt. Pick**: This document is used to ship items directly from the warehouse
    in one step. The document is created from a warehouse request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When only using the **Require Put-away** and **Require Pick** option on a location,
    document types **Invt. Put-Away** and **Invt. Pick** are used. This will also
    make sure that the purchase order and sales order will be processed by starting
    codeunit sales-post (80) and Purch. Post (90).
  prefs: []
  type: TYPE_NORMAL
- en: Level 2 and level 3 comparison
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Both level 2 and level 3 setup options are one-step warehouse implementations.
    When receiving an item, we must provide the storage bin where the item will be
    stored until it is sold. There is no additional step.
  prefs: []
  type: TYPE_NORMAL
- en: Using the warehouse receipt and shipment documents allows us to combine sales
    and purchase documents on one warehouse document. This cannot be done using direct
    Put-away and Pick. Using direct Put-away and Pick, we can split one sales line
    or purchase line into multiple bins. This cannot be done using warehouse receipt
    and shipment documents.
  prefs: []
  type: TYPE_NORMAL
- en: The reason for this is the way the warehouse entries are created. Level 2 uses
    the **Bin** field in the **Item Journal Line** to create the warehouse entries.
  prefs: []
  type: TYPE_NORMAL
- en: Using level 3, the warehouse entries are created using codeunit Whse.-Activity-Post
    (7324). The Bin code is not written back into the sales line or purchase line.
    This means we also cannot use the **Bin** code field in the purchase receipt and
    sales shipment documents.
  prefs: []
  type: TYPE_NORMAL
- en: Level 4 – receipt with Put-away worksheet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most warehouses use a two-step receipt and shipment process. The first step
    is receiving the items on a receipt location, which is often close to the unloading
    docks. Then, the items are stored in their warehouse location until they are required
    for the production or sales process. This is step 2.
  prefs: []
  type: TYPE_NORMAL
- en: To enable this two-step process, we can combine level 2 and 3 by using the options
    **Require Receive**, **Shipment**, **Put-away and Pick** + **Bin Mandatory** +
    **Use Put-away worksheet** in the **Location Card**.
  prefs: []
  type: TYPE_NORMAL
- en: This allows us to first perform the warehouse receipt and shipment as discussed
    in level 2\. When we process this document, it will not only post the sales order
    and purchase order but it will also generate a record in the Whse. Put-away Request
    table (7324).
  prefs: []
  type: TYPE_NORMAL
- en: '![Level 4 – receipt with Put-away worksheet](img/0365EN_06_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Whse.- activity register versus whse.-activity-post
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When the whse. put-away request is processed using the warehouse worksheet,
    it will result in a warehouse activity header and line. In this context, the system
    will use the Put-away and pick document type that we discussed in the previous
    section about level 3.
  prefs: []
  type: TYPE_NORMAL
- en: 'Technically, the documents for level 3 and level 4 are equal, but there are
    the following two differences:'
  prefs: []
  type: TYPE_NORMAL
- en: In a two-step warehouse setup, the items are already in a warehouse entry. This
    means we have to move them. This results in two new warehouse entries but also
    two lines in the warehouse document.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The two-step warehouse documents are not posted but registered. This means that
    the system will only create warehouse entries and no longer updates the sales
    and purchase documents.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Level 5 – directed put-away and pick
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Combining warehouse receipts and shipments with put-aways and picks completes
    the table and posting diagram of WMS in Microsoft Dynamics NAV. But there are
    additional options to enrich the functionality.
  prefs: []
  type: TYPE_NORMAL
- en: One of these options is directed put-away and pick. When this option is activated,
    the system can and will help us in finding the correct bins for each warehouse
    activity.
  prefs: []
  type: TYPE_NORMAL
- en: Zones and default bins
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let's start with defining zones and default bins. A zone is a group of bins.
    Usually, they are located near each other physically but more importantly, they
    share some properties.
  prefs: []
  type: TYPE_NORMAL
- en: For each zone, we need to specify if it is allowed to receive, ship, put-away,
    and pick. This is done in the **Bin Type** list.
  prefs: []
  type: TYPE_NORMAL
- en: 'When defining the bins, it is recommended to use a logical name such as R-01-001
    for **Receipt** row one shelf one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Zones and default bins](img/0365EN_06_39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The default bins are set up in the **Location Card** on the **Bin** tab. These
    bins can always be changed on each document.
  prefs: []
  type: TYPE_NORMAL
- en: Bin calculation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The bin calculation is done for the put-away documents using templates. This
    template defines the rules for finding the correct bin to store the items:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bin calculation](img/0365EN_06_40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The find options are stored in the put-away template line table (7308); they
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Find Fixed Bin**: The system will try to find a bin, which is fixed. A fixed
    bin is usually reserved for a specific item.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Find Floating Bin**: This will try to find the first available bin.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Find Same Item**: This will filter on an available bin that already contains
    this item.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Find Unit of Measure Match**: This option can be used if parts of the warehouse
    are designed to handle a specific kind of carrier such as Euro or US pallet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Find Bin w. Less than Min. Qty**: Use this option to find bins that are not
    fully used. If this option is not used with the **Find Same Item**, it might result
    in two items in the same bin.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Find Empty Bin**: This option will make sure we find an empty bin.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The C/AL code that handles the bin calculation is located in codeunit create
    put-away (7313). Let''s have a look:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: For each record in the put-away template line table, the system will try to
    find a bin. This means that if the rules of the first template line fail, it will
    use the second template line and so forth.
  prefs: []
  type: TYPE_NORMAL
- en: The two options `Find Empty Bin` and `Find Floating Bin` eliminate using the
    others. If these are `true`, the system will call the `FindBin` function. For
    the other options, it will use the `FindBinContent` function.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing and customizing warehouse management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since there are many ways to set up WMS in Microsoft Dynamics NAV, it is very
    important to make the correct decisions at the start of the implementation. Moving
    the system from one strategy to another is quite a challenge.
  prefs: []
  type: TYPE_NORMAL
- en: It is therefore very important to discuss all possibilities and compare them
    to the way your company works.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A common mistake when implementing WMS software is trying to solve procedural
    issues with a computer system. The simple rule is: "If it does not work without
    a computer system, it will most certainly not work with a computer system".'
  prefs: []
  type: TYPE_NORMAL
- en: Customizing and changing WMS should be done very carefully since the data flow
    is very complex, especially for Microsoft Dynamics NAV standards.
  prefs: []
  type: TYPE_NORMAL
- en: Reservations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Microsoft Dynamics NAV, it is possible to do reservations on inventory. This
    can help us manage our inventory more effectively. Let's discuss the reservation
    process with a customer scenario.
  prefs: []
  type: TYPE_NORMAL
- en: One of our customer orders 100 black t-shirts size M on January 22, 2015\. Currently,
    we have 120 in our inventory so we can ship them without any problems. The customer
    wants to have them delivered on November 18\. We enter a sales order with the
    shipping date and release the order.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next day, another customer calls for 40 black t-shirts size M. Our inventory
    is still 120\. This customer wants to have them delivered on May 31\. We enter
    the sales order without a warning. Lastly, we will create a new sales order for
    90 of the same t-shirts with a delivery date on July 25\. Now, we get the following
    error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Reservations](img/0365EN_06_41.jpg)'
  prefs: []
  type: TYPE_IMG
- en: And if we now go back to the second sales order and re-enter the quantity, we
    get a similar message.
  prefs: []
  type: TYPE_NORMAL
- en: Check-avail. period calc.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The reason this happens lies in the way Microsoft Dynamics NAV calculates the
    gross requirement:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Check-avail. period calc.](img/0365EN_06_42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is a two-step method where first, the requirement is calculated until the
    shipment date of the sales line and secondly, a `Lookahead` function is called
    using a date formula that is defined in the company information table.
  prefs: []
  type: TYPE_NORMAL
- en: The C/AL code that is used to calculate the `Lookahead` can be found in the
    `QtyAvailabletoPromise` function in codeunit Available to Promise (5790).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: If this `Lookahead` functionality is not detailed enough, we can start using
    the reservation process.
  prefs: []
  type: TYPE_NORMAL
- en: Always versus optional reservation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Reservation** option can be activated on the item level and customer
    level and can be set to **Never**, **Optional**, and **Always**, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Always versus optional reservation](img/0365EN_06_43.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s see what these options signify:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Never**: Reservations on this item or customer are impossible. If the item
    is **Reserve** as **Always** and the **Customer** as **Never**, the item wins.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Optional**: It is possible to reserve items for this customer; however, salespersons
    and warehouse employees can decide to overrule the reservation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Always**: Shipping is not possible without a proper reservation. If the demand
    is larger than the supply, the salespersons and warehouse employees must make
    manual decisions of who gets what.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reservation entries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Microsoft Dynamics NAV uses the Reservation Entry (337) table to store the
    reservation entries. Reservation entries can be connected to all outstanding documents
    and journals and posted entries. This is done using the following source fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Source Type**: This is an integer field representing the table the record
    is linked to, for example, 37 means sales line and 5406, prod. order line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Source Subtype**: This is an option field, which is linked to the **Document
    Type** field when the record is linked to a sales line, purchase line record,
    or the status of a production order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Source ID**: This is the link to the document no. of the record this line
    is linked to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Source Batch Name**: If the record is linked to a journal, this field represents
    the journal batch name. If this field is used, the source ID is empty and vice
    versa.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Source Prod. Order Line**: When the record is used for a production order
    line or component, this field represents the production order line number.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Source Ref. No.**: This is an integer field, which is used to link the record
    to a line no. in a document, journal, or the production component. If the line
    is linked to a ledger entry, this field represents the entry no. field.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are four types of Reservation Entries in Microsoft Dynamics NAV represented
    by the **Reservation Status** field:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Reservation**: These are real reservation entries, which means that a part
    of the current or future inventory is reserved for a production order or sales
    order. If the item uses the **Always** reservation option, it is not possible
    to work around this. If the reservation is optional, it is possible that someone
    else might still use these items in another process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tracking**: This option is used by the **Order Tracking Policy** option in
    Microsoft Dynamics NAV. This is an "underwater" process that can link supply and
    demand automatically. The status **Tracking** means that there is a supply as
    well as a demand.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Surplus**: This option is used for both item tracking as discussed in [Chapter
    5](ch05.html "Chapter 5. Production"), *Production*, and the Order Tracking policy.
    The records can be identified by using the value of the item tracking field. This
    is set to **None** for Order Tracking policy records and **Serial No.**, **Lot
    No.**, and **Lot** and **Serial No.** for item tracking.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Prospect**: When item tracking is used, a prospect reservation record indicates
    an internal journal action, for example, assigning a serial number to an item
    journal line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a reservation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's go into the application and create a reservation to see what entries we
    get in the database.
  prefs: []
  type: TYPE_NORMAL
- en: We will do this using a new item. The item should have a Description, Base Unit
    of Measure, and a Gen. Prod., VAT Prod., and an Inventory Posting Group. The default
    value for **Reserve** is **Optional**, which we will use for this example. The
    default costing method is FIFO, which we will also use.
  prefs: []
  type: TYPE_NORMAL
- en: To demonstrate the real value of reservations, we should create two purchase
    orders with different dates and unit costs. With FIFO, the system would normally
    apply the sales order to the first item ledger entry. We will reserve on the second
    item ledger entry to demonstrate the impact on item costing and application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When this is done, we can create a new sales order with one sales line containing
    the item and half the inventory and select **Reserve** from the **Functions**
    tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this screen, we can take a look at the available inventory by clicking on
    **Available to Reserve**:![Creating a reservation](img/0365EN_06_44.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here, we select the second receipt and navigate to **Actions** | **Functions**
    | **Reserve**. Then, we close the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Sales Order Lines**, we can now see the **Reserved Quantity** as **50**:![Creating
    a reservation](img/0365EN_06_45.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s have a look at the **Reservation Entries** created in the database by
    running the table from the **Object Designer**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a reservation](img/0365EN_06_46.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A reservation entry of the type **Reservation** always uses to lines with the
    same entry no. The **Source Type** for the first entry links to the Sales Line
    table (37) and the second uses the Item Ledger Entry Table (32).
  prefs: []
  type: TYPE_NORMAL
- en: 'We ship and invoice the sales order and look at the **Item Ledger Entries**
    for our item:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a reservation](img/0365EN_06_47.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We see that Microsoft Dynamics NAV has used the second item ledger entry, but
    the cost is **500**, not the **600** from the second entry.
  prefs: []
  type: TYPE_NORMAL
- en: To correct this, we run the report Adjust Cost - Item Entries (795) and have
    another look at the **Item Ledger Entries** and the **Value Entries** to see that
    it is corrected.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a reservation](img/0365EN_06_48.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Order tracking policy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have seen that reservation entries are not only used for the reservation
    process of inventory and item tracking but also for balancing supply and demand.
    This is an internal option within Microsoft Dynamics NAV that allows us to link
    inventory internally.
  prefs: []
  type: TYPE_NORMAL
- en: The entries are used in the supply and demand calculation to create the requisition
    worksheets.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let's create a copy of our reservation test item to see the differences between
    reservations and item tracking. This new item should have the Order Tracking Policy
    Tracking and Action Msg.
  prefs: []
  type: TYPE_NORMAL
- en: We will create two purchase orders with both a quantity of **50** without receiving
    them and create a sales order for the same item with a quantity of **80**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Example](img/0365EN_06_49.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If we now select **Order Tracking** from the **Sales Line Functions**, we see
    that the system matches supply and demand.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at the **Reservation Entries**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Example](img/0365EN_06_50.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can see that Microsoft Dynamics NAV is now using the **Surplus** and **Tracking**
    types. The 20 items we have left are not linked to a demand.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start the **Requisition Worksheet** for this item and see what Microsoft
    Dynamics NAV can do with this information.
  prefs: []
  type: TYPE_NORMAL
- en: Replenishment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s change the reordering policy of the item to **Lot-for-Lot** and run
    the **Requisition Worksheet** for this item:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Replenishment](img/0365EN_06_51.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This will result in the suggestion to combine both purchase orders into one
    document with a different quantity.
  prefs: []
  type: TYPE_NORMAL
- en: '![Replenishment](img/0365EN_06_52.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Auto increment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Microsoft Dynamics NAV 2013, the Reservation Entry table was redesigned to
    use the Auto increment feature to determine unique numbering. This improves application
    performance and reduces locking.
  prefs: []
  type: TYPE_NORMAL
- en: Trade in vertical industries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Microsoft Dynamics NAV is used in many different vertical industries that often
    require specific features. Rather than trying to implement all these features
    in the standard product, Microsoft Dynamics NAV supports the framework and allows
    developers to design and create the vertical features.
  prefs: []
  type: TYPE_NORMAL
- en: For these features, the 80/20 rule applies. Microsoft delivers 80 percent of
    the framework which costs 20 percent of our time to implement. The missing 20
    percent of the functionality is developed costing 80 percent of the budgeted time.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will discuss how Microsoft Dynamics NAV is used for trade
    in five different vertical industries. For each industry, we will discuss two
    specific vertical features and how they could be solved.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Most industries have solid add-on solutions available designed by certified
    Microsoft Dynamics NAV partners that have been implemented at multiple sites.
    It is highly recommended to look at those add-on solutions instead of reinventing
    the wheel and rewriting an add-on that already exists.
  prefs: []
  type: TYPE_NORMAL
- en: Fashion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The fashion industry has trade periods within the seasons. During spring, shops
    need to order the collection for the next winter and during autumn they buy summer
    clothes.
  prefs: []
  type: TYPE_NORMAL
- en: Sales orders
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The sales orders for each collection are created as normal sales orders but
    with a shipment date in the future, sometimes six months or more ahead. When using
    variants, there should be a separate sales line for each variant, meaning, size,
    and color.
  prefs: []
  type: TYPE_NORMAL
- en: This can be quite a hassle to enter for sales people, so we could speed this
    up using a template sales line for the main item and hide the individual sizes.
  prefs: []
  type: TYPE_NORMAL
- en: Using a matrix where the *x* axis represents the size and *y* axis the color,
    sales people can quickly enter the quantities. When the matrix is closed, we can
    update the hidden sales lines. These hidden sales lines are used to calculate
    the production orders as discussed in [Chapter 5](ch05.html "Chapter 5. Production"),
    *Production*.
  prefs: []
  type: TYPE_NORMAL
- en: Reservations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When the production orders return from the factory, the warehouse and sales
    people need to decide which customer gets the items first. This can be done using
    the shipment date but that might not be completely fair if one customer orders
    in time, meaning six months ahead, and another customer orders too late with an
    earlier or the same shipment date.
  prefs: []
  type: TYPE_NORMAL
- en: This is where we can start using reservations. The reservations already support
    variants but the auto reserve functionality of Microsoft Dynamics NAV might not
    just do what we like.
  prefs: []
  type: TYPE_NORMAL
- en: Changing this functionality is a complex task. The C/AL code for AutoReserve
    can be found in codeunit Reservation Management (99000845) but should only be
    changed by experienced developers.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, reservations are layered on top of the normal inventory, production,
    purchase, and sales process. If we change the algorithm, we can remove the current
    reservations and retest the code to see if the newly created reservation entries
    are good. This testing process should be done very carefully, on a dataset that
    is small enough to analyze using Microsoft Excel.
  prefs: []
  type: TYPE_NORMAL
- en: Automotive
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Microsoft Dynamics NAV is used by many car dealer companies and garages because
    there are some strong add-on products available for this vertical industry.
  prefs: []
  type: TYPE_NORMAL
- en: On top of the normal trade process supported by Microsoft Dynamics NAV, these
    companies have additional business requirements. Let's discuss two of them.
  prefs: []
  type: TYPE_NORMAL
- en: Vehicle information
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Each vehicle that is sold needs to be configured and ordered. The configuration
    should be stored in the database for future maintenance and warranty.
  prefs: []
  type: TYPE_NORMAL
- en: We can compare this to serial numbers or the lot number information table in
    the standard product. We could create a new master data table called **Vehicle**
    and create a record in this table for each car we configure or sell. The number
    we create for the **Vehicle** can be used as a serial number in the **Item Ledger
    Entry**.
  prefs: []
  type: TYPE_NORMAL
- en: For maintenance, we could have a vehicle journal that creates vehicle ledger
    entries each time the car comes back for servicing. This helps us keep track of
    the history and should include information such as mileage. The technical design
    of this solution can be compared to the squash application we created in [Chapter
    2](ch02.html "Chapter 2. A Sample Application"), *A Sample Application*.
  prefs: []
  type: TYPE_NORMAL
- en: Parts management
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the automotive industry, using the right part is crucial. Different parts
    can be used on different types of cars and are often even brand independent.
  prefs: []
  type: TYPE_NORMAL
- en: Many vendors offer their assortment in digital formats allowing us to create
    interfaces with them. Parts should be defined as items, using standard features
    such as substitutions. As many parts can be expensive and have a low turnover
    speed, keeping them in the inventory can be very expensive, thus a minimum inventory
    should be maintained.
  prefs: []
  type: TYPE_NORMAL
- en: Parts can be connected to vehicle types. For example, a car interior mirror
    could be used for five types of cars. When a service engineer wants to replace
    such a mirror, he/she can use a filtered item list of all available parts.
  prefs: []
  type: TYPE_NORMAL
- en: Pharmaceuticals/medicines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In a pharmacy or at another medicine supplier, it is normal that not just every
    customer is allowed to purchase any item. They cannot sell medicines against cardiac
    arrhythmia to a healthy person.
  prefs: []
  type: TYPE_NORMAL
- en: Even when someone is allowed to use a certain medication, it is often limited
    to certain doses. People are often insured for the cost of these medicines but
    most insurance companies require a contribution.
  prefs: []
  type: TYPE_NORMAL
- en: Medication card
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Microsoft Dynamics NAV does not support item regulation. To support this, we
    should create new functionality that links items to customers but also allows
    us to enter the doses and frequency.
  prefs: []
  type: TYPE_NORMAL
- en: From this template, we could periodically create sales orders and shipments.
    Whenever we ship the medicines, we need to update the template.
  prefs: []
  type: TYPE_NORMAL
- en: Contribution invoicing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When customers need to pay a part of the medication as an own contribution,
    we require the system to create two sales invoices for one sales order.
  prefs: []
  type: TYPE_NORMAL
- en: This is possible using the standard pre-payment functionality in Microsoft Dynamics
    NAV. We could send a pre-payment invoice to the customer and handle the other
    invoices to the insurance companies using combined invoicing. The pre-payments
    will be automatically deducted from the invoice amount but the value entries on
    the items will remain intact.
  prefs: []
  type: TYPE_NORMAL
- en: However, the standard system does not allow us to create a pre-payment invoice
    to another Bill-to Customer No. This would have to be designed and developed.
  prefs: []
  type: TYPE_NORMAL
- en: Food
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Where fashion companies have two or three large ordering moments per year where
    customers carefully consider what to order, most food companies have a daily ordering
    process of high volume items.
  prefs: []
  type: TYPE_NORMAL
- en: This ordering process is often done by phone or fax where the retailer calls
    and tells the call center employees what to ship the next day.
  prefs: []
  type: TYPE_NORMAL
- en: Assortment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Most food companies use an assortment of products. This assortment can change
    from season to season or contain special action items but is usually stable since
    that is what most consumers want; meatballs on Monday, pork chops on Tuesday,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: To save valuable time creating a new sales order with the same items each day,
    we could have the system do this at night.
  prefs: []
  type: TYPE_NORMAL
- en: This could be done using Standard Customer Sales Codes. This standard function
    in Microsoft Dynamics NAV allows us to create template sales orders with multiple
    items or other master data supported by the sales process. It also supports fixed
    quantities that can be adjusted when the sales orders are created.
  prefs: []
  type: TYPE_NORMAL
- en: 'The sales order can be created from the Customer Sales Codes using the **Get.
    Std. Cust Sales Codes** function, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Assortment](img/0365EN_06_53.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Sales order creation
  prefs: []
  type: TYPE_NORMAL
- en: This function could be scheduled in the **Job Scheduler** to create new sales
    order each night for the next day. We will discuss the job scheduler in [Chapter
    9](ch09.html "Chapter 9. Interfacing"), *Interfacing*.
  prefs: []
  type: TYPE_NORMAL
- en: Fast order entry
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When the retailer contacts the call center to complete the sales order, the
    order entry person should be able to quickly find the correct sales line. If the
    assortment contains 150 items, this can be quite challenging.
  prefs: []
  type: TYPE_NORMAL
- en: This can be solved by implementing a fast order entry functionality that enables
    users to key in an item number and quantity on the sales header. The values will
    be updated in the correct sales line and blanked for the next entry.
  prefs: []
  type: TYPE_NORMAL
- en: With this functionality, the end user can always work from the same place without
    searching for the correct sales line.
  prefs: []
  type: TYPE_NORMAL
- en: Furniture
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The furniture trading companies have similar issues with variants like fashion
    companies, with some key differences.
  prefs: []
  type: TYPE_NORMAL
- en: Items like office chairs and desks have far more options compared to clothes
    and when sold, most consumers buy few with the same specifications rather than
    a collection of different sizes.
  prefs: []
  type: TYPE_NORMAL
- en: Variant configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The price of furniture is dependent of the configuration, which fabric we want
    for the seat, the type of armrest, or even the type of wheel. This configuration
    also determines the item number.
  prefs: []
  type: TYPE_NORMAL
- en: An office chair or desk can have as much as 1200 possible combinations. We do
    not want to register all these combinations as items or even as variants.
  prefs: []
  type: TYPE_NORMAL
- en: Most furniture suppliers offer online systems or small external software packages
    to determine the combination. Once the combination is identified, we can create
    a new variant code or see if the variant already exists and create the sales order.
  prefs: []
  type: TYPE_NORMAL
- en: One-off items
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Furniture retailers often have many collections they can sell with thousands
    of items. Most of the items in these collections will never be sold, or get sold
    as one-off items that are only sold once to one customer.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, it does not make sense to create an item with an item cost and
    inventory value, but we still want to have some traceability of the item. This
    calls for two solutions:'
  prefs: []
  type: TYPE_NORMAL
- en: We could create a collection item, which we can reuse each time we sell an item
    that is similar to another item but not exactly the same, for example, a lamp
    with a different foot color. On the sales line, we create the possibility for
    sales people to enter the vendor/collection and an item category. The system should
    then search for the template item.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another solution is to create a new item runtime from the sales order. The sales
    person will also select the vendor/collection and item category and the system
    should show a list with items already in the database. If the item is not created,
    the system should create the item using a template for the posting groups. The
    sales person can immediately use it and we then have traceability of the items
    we sold.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With this chapter, we end our quest exploring the production and trade functionality
    around the items in Microsoft Dynamics NAV. We discussed the application design
    of sales and purchase documents in Microsoft Dynamics NAV and how they are mirrored.
    We talked about the different document types and how they work together from quote
    or blanket order to order, and invoice or return order, and credit memo.
  prefs: []
  type: TYPE_NORMAL
- en: The sales and purchase line validation methodology helps us to calculate the
    pricing, inventory and VAT using a special structure of functions that is linked
    to the way end users create these lines.
  prefs: []
  type: TYPE_NORMAL
- en: Sales and purchase orders have a mandatory release process that can be extended
    with document approval and prepayments. The items have a two-layer inventory process
    using item ledger entries on locations and warehouse entries on bins and zones.
    We can use transfer orders to move items from one location to another and warehouse
    documents to move items from bin to bin and zone to zone. A warehouse is set up
    in the location and can have different levels. The setup level should match the
    physical process in the warehouse.
  prefs: []
  type: TYPE_NORMAL
- en: Item application and costing is tied together with the reservation process in
    Microsoft Dynamics NAV. The Reservation Entry table adds a new level to the inventory
    process linking documents, journals, and entries together to level supply and
    demand. When used, the reservation process can overrule the costing method.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of the chapter, we talked about different ways to implement this
    in vertical solutions and what gaps would have to be solved and how. This demonstrates
    the flexibility and the power of the standard transaction structure in Microsoft
    Dynamics NAV.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will take this to a new level where we will design and
    build a real-world vertical solution for Microsoft Dynamics NAV that will enable
    us to create combine sales shipment in routes for trucks. We will also create
    a new solution on top of Microsoft Dynamics NAV using the application as a development
    environment to build something new with respect to the methodology of the application.
  prefs: []
  type: TYPE_NORMAL
