["```cs\nusing System.Reflection;\nusing System.Reflection.Emit;\nvar assemblyName = new AssemblyName(\"MyDynamicAssembly\");\nvar dynamicAssembly = AssemblyBuilder.Define\n  DynamicAssembly(assemblyName, AssemblyBuilderAccess.Run);\nvar dynamicModule = dynamicAssembly.DefineDynamicModule\n  (\"MyDynamicModule\");\n```", "```cs\nstatic string CreateUniqueName(string prefix)\n{\n    var uid = Guid.NewGuid().ToString();\n    uid = uid.Replace('-', '_');\n    return $\"{prefix}{uid}\";\n}\n```", "```cs\npublic class MyType\n{\n    public void SaySomething(string message)\n    {\n        System.Console.WriteLine(message);\n    }\n}\n```", "```cs\n    dotnet new console\n    ```", "```cs\nusing System.Reflection;\nusing System.Reflection.Emit;\nnamespace Chapter6;\npublic class MyTypeGenerator\n{\n    public static Type Generate()\n    {\n        // Do the generation\n    }\n}\n```", "```cs\nvar name = new AssemblyName(\"MyDynamicAssembly\");\nvar assembly = AssemblyBuilder.DefineDynamicAssembly(name,\n  AssemblyBuilderAccess.Run);\nvar module = assembly.DefineDynamicModule\n  (\"MyDynamicModule\");\n```", "```cs\nvar typeBuilder = module.DefineType(\"MyType\",\n  TypeAttributes.Public | TypeAttributes.Class);\nvar methodBuilder = typeBuilder.DefineMethod\n  (\"SaySomething\", MethodAttributes.Public);\nmethodBuilder.SetParameters(typeof(string));\nmethodBuilder.DefineParameter(0, ParameterAttributes.None,\n  \"message\");\n```", "```cs\nvar consoleType = typeof(Console);\nvar writeLineMethod = consoleType.GetMethod(nameof\n  (Console.WriteLine), new[] { typeof(string) })!;\nvar methodILGenerator = methodBuilder.GetILGenerator();\nmethodILGenerator.Emit(OpCodes.Ldarg_1);\nmethodILGenerator.EmitCall(OpCodes.Call, writeLineMethod,\n  new[] { typeof(string) });\nmethodILGenerator.Emit(OpCodes.Ret);\n```", "```cs\n    return typeBuilder.CreateType()!;\n    ```", "```cs\nusing System.Reflection;\nusing System.Reflection.Emit;\nnamespace Chapter6;\npublic class MyTypeGenerator\n{\n    public static Type Generate()\n    {\n        var name = new AssemblyName(\"MyDynamicAssembly\");\n        var assembly = AssemblyBuilder.DefineDynamic\n          Assembly(name, AssemblyBuilderAccess.Run);\n        var module = assembly.DefineDynamicModule\n          (\"MyDynamicModule\");\n        var typeBuilder = module.DefineType(\"MyType\",\n          TypeAttributes.Public | TypeAttributes.Class);\n        var methodBuilder = typeBuilder.DefineMethod\n          (\"SaySomething\", MethodAttributes.Public);\n        methodBuilder.SetParameters(typedoc(string));\n        var parameterBuilder = methodBuilder\n          .DefineParameter(0, ParameterAttributes.None,\n            \"message\");\n        var consoleType = typeof(Console);\n        var writeLineMethod = consoleType.GetMethod\n          (nameof(Console.WriteLine), new[] { typeof\n            (string) })!;\n        var methodILGenerator = methodBuilder\n          .GetILGenerator();\n        methodILGenerator.Emit(OpCodes.Ldarg_1);\n        methodILGenerator.EmitCall(OpCodes.Call,\n          writeLineMethod, new[] { typeof(string) });\n        methodILGenerator.Emit(OpCodes.Ret);\n        return typeBuilder.CreateType()!;\n    }\n}\n```", "```cs\nusing Chapter6;\nvar myType = MyTypeGenerator.Generate();\nvar method = myType.GetMethod(\"SaySomething\")!;\nvar myTypeInstance = Activator.CreateInstance(myType);\nmethod.Invoke(myTypeInstance, new[] { \"Hello world\" });\n```", "```cs\nHello world\n```", "```cs\n    var toStringMethod = typeof(object).GetMethod(nameof\n      (object.ToString))!;\n    var newToStringMethod = typeBuilder.DefineMethod(nameof\n      (object.ToString), toStringMethod.Attributes,\n        typeof(string), Array.Empty<Type>());\n    var toStringGenerator = newToStringMethod.GetILGenerator();\n    toStringGenerator.Emit(OpCodes.Ldstr, \"A message from\n      ToString()\");\n    toStringGenerator.Emit(OpCodes.Ret);\n    typeBuilder.DefineMethodOverride(newToStringMethod,\n      toStringMethod);\n    ```", "```cs\n    using Chapter6;\n    var myType = MyTypeGenerator.Generate();\n    var method = myType.GetMethod(\"SaySomething\")!;\n    var myTypeInstance = Activator.CreateInstance(myType);\n    method.Invoke(myTypeInstance, new[] { \"Hello world\" });\n    Console.WriteLine(myTypeInstance); // Added line\n    ```", "```cs\nA message from ToString()\n```", "```cs\npublic interface INotifyPropertyChanged\n{\n    event PropertyChangedEventHandler? PropertyChanged;\n}\n```", "```cs\npublic class Employee\n{\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n}\n```", "```cs\nusing System.ComponentModel;\npublic class Employee : INotifyPropertyChanged\n{\n    private string _firstName;\n    public string FirstName\n    {\n        get { return _firstName; }\n        set\n        {\n            _firstName = value;\n            RaisePropertyChanged(\"FirstName\");\n        }\n    }\n    public event PropertyChangedEventHandler\n      PropertyChanged;\n    protected void RaisePropertyChanged(string\n      propertyName)\n    {\n        if (PropertyChanged != null)\n        {\n            PropertyChanged(this, new Property\n              ChangedEventArgs(propertyName));\n        }\n    }\n}\n```", "```cs\nnamespace Chapter6;\npublic class Employee\n{\n    public virtual string FirstName { get; set; }\n    public virtual string LastName { get; set; }\n}\n```", "```cs\nusing System.ComponentModel;\nusing System.Linq.Expressions;\nusing System.Reflection;\nusing System.Reflection.Emit;\nnamespace Chapter6;\npublic static class NotifyingObjectWeaver\n{\n    const string DynamicAssemblyName = \"Dynamic Assembly\";\n    const string DynamicModuleName = \"Dynamic Module\";\n    const string PropertyChangedEventName = nameof\n      (INotifyPropertyChanged.PropertyChanged);\n    const string OnPropertyChangedMethodName =\n      \"OnPropertyChanged\";\n    static readonly Type VoidType = typeof(void);\n    static readonly Type DelegateType = typeof(Delegate);\n    const MethodAttributes EventMethodAttributes =\n        MethodAttributes.Public | MethodAttributes\n          .HideBySig | MethodAttributes.Virtual;\n    const MethodAttributes OnPropertyChanged\n      MethodAttributes =\n        MethodAttributes.Public | MethodAttributes\n          .HideBySig;\n}\n```", "```cs\nstatic TypeBuilder DefineType(Type type)\n{\n    var name = $\"{type.Name}_Proxy\";\n    var typeBuilder = DynamicModule.DefineType(name,\n      TypeAttributes.Public | TypeAttributes.Class);\n    typeBuilder.SetParent(type);\n    var interfaceType = typeof(INotifyPropertyChanged);\n    typeBuilder.AddInterfaceImplementation(interfaceType);\n    return typeBuilder;\n}\n```", "```cs\nstatic void DefineEvent(TypeBuilder typeBuilder, Type\n  eventHandlerType, FieldBuilder fieldBuilder)\n{\n    var eventBuilder = typeBuilder.DefineEvent(nameof\n      (INotifyPropertyChanged.PropertyChanged),\n        EventAttributes.None, eventHandlerType);\n    DefineAddMethodForEvent(typeBuilder, eventHandlerType,\n      fieldBuilder, eventBuilder);\n    DefineRemoveMethodForEvent(typeBuilder,\n      eventHandlerType, fieldBuilder, eventBuilder);\n}\n```", "```cs\nstatic void DefineAddMethodForEvent(TypeBuilder\n  typeBuilder, Type eventHandlerType, FieldBuilder\n    fieldBuilder, EventBuilder eventBuilder)\n{\n    var combineMethodInfo = DelegateType.GetMethod\n      (\"Combine\", BindingFlags.Public |\n        BindingFlags.Static, null,\n          new[] { DelegateType, DelegateType }, null)!;\n    var addEventMethod = string.Format(\"add_{0}\",\n      PropertyChangedEventName);\n    var addMethodBuilder = typeBuilder.DefineMethod\n      (addEventMethod, EventMethodAttributes, VoidType,\n        new[] { eventHandlerType });\n    var addMethodGenerator = addMethodBuilder\n      .GetILGenerator();\n    addMethodGenerator.Emit(OpCodes.Ldarg_0);\n    addMethodGenerator.Emit(OpCodes.Ldarg_0);\n    addMethodGenerator.Emit(OpCodes.Ldfld, fieldBuilder);\n    addMethodGenerator.Emit(OpCodes.Ldarg_1);\n    addMethodGenerator.EmitCall(OpCodes.Call,\n      combineMethodInfo, null);\n    addMethodGenerator.Emit(OpCodes.Castclass,\n      eventHandlerType);\n    addMethodGenerator.Emit(OpCodes.Stfld, fieldBuilder);\n    addMethodGenerator.Emit(OpCodes.Ret);\n    eventBuilder.SetAddOnMethod(addMethodBuilder);\n}\n```", "```cs\nstatic void DefineRemoveMethodForEvent(TypeBuilder\n  typeBuilder, Type eventHandlerType, FieldBuilder\n    fieldBuilder, EventBuilder eventBuilder)\n{\n    var removeEventMethod = string.Format(\"remove_{0}\",\n      PropertyChangedEventName)!;\n    var removeMethodInfo = DelegateType.GetMethod(\"Remove\",\n      BindingFlags.Public | BindingFlags.Static, null,\n        new[] { DelegateType, DelegateType }, null)!;\n    var removeMethodBuilder = typeBuilder.DefineMethod\n      (removeEventMethod, EventMethodAttributes, VoidType,\n        new[] { eventHandlerType });\n    var removeMethodGenerator = removeMethodBuilder\n      .GetILGenerator();\n    removeMethodGenerator.Emit(OpCodes.Ldarg_0);\n    removeMethodGenerator.Emit(OpCodes.Ldarg_0);\n    removeMethodGenerator.Emit(OpCodes.Ldfld,\n      fieldBuilder);\n    removeMethodGenerator.Emit(OpCodes.Ldarg_1);\n    removeMethodGenerator.EmitCall(OpCodes.Call,\n      removeMethodInfo, null);\n    removeMethodGenerator.Emit(OpCodes.Castclass,\n      eventHandlerType);\n    removeMethodGenerator.Emit(OpCodes.Stfld,\n      fieldBuilder);\n    removeMethodGenerator.Emit(OpCodes.Ret);\n    eventBuilder.SetRemoveOnMethod(removeMethodBuilder);\n}\n```", "```cs\nstatic MethodBuilder DefineOnPropertyChangedMethod\n  (TypeBuilder typeBuilder, FieldBuilder\n    propertyChangedFieldBuilder)\n{\n    var onPropertyChangedMethodBuilder =\n      typeBuilder.DefineMethod(OnPropertyChangedMethodName,\n        OnPropertyChangedMethodAttributes, VoidType,\n    new[] { typeof(string) });\n    var onPropertyChangedMethodGenerator =\n      onPropertyChangedMethodBuilder.GetILGenerator();\n    var invokeMethod = typeof(PropertyChangedEventHandler)\n      .GetMethod(nameof(PropertyChangedEventHandler\n        .Invoke))!;\n}\n```", "```cs\nvar propertyChangedEventArgsType = typeof(\n  PropertyChangedEventArgs);\nonPropertyChangedMethodGenerator.DeclareLocal(\n  propertyChangedEventArgsType);\n```", "```cs\nvar propertyChangedNullLabel = onPropertyChangedMethod\n  Generator.DefineLabel();\nonPropertyChangedMethodGenerator.Emit(OpCodes.Ldnull);\nonPropertyChangedMethodGenerator.Emit(OpCodes.Ldarg_0);\nonPropertyChangedMethodGenerator.Emit(OpCodes.Ldfld,\n  propertyChangedFieldBuilder);\nonPropertyChangedMethodGenerator.Emit(OpCodes.Ceq);\nonPropertyChangedMethodGenerator.Emit(OpCodes.Brtrue_S,\n  propertyChangedNullLabel);\n```", "```cs\nonPropertyChangedMethodGenerator.Emit(OpCodes.Ldarg_1);\nonPropertyChangedMethodGenerator.Emit(OpCodes.Newobj,\n  propertyChangedEventArgsType.GetConstructor(new[] {\n    typeof(string) })!);\nonPropertyChangedMethodGenerator.Emit(OpCodes.Stloc_0);\nonPropertyChangedMethodGenerator.Emit(OpCodes.Ldarg_0);\nonPropertyChangedMethodGenerator.Emit(OpCodes.Ldfld,\n  propertyChangedFieldBuilder);\nonPropertyChangedMethodGenerator.Emit(OpCodes.Ldarg_0);\nonPropertyChangedMethodGenerator.Emit(OpCodes.Ldloc_0);\nonPropertyChangedMethodGenerator.EmitCall(OpCodes.Callvirt,\n  invokeMethod, null);\n```", "```cs\nonPropertyChangedMethodGenerator.MarkLabel(propertyChanged\n  NullLabel);\nonPropertyChangedMethodGenerator.Emit(OpCodes.Ret);\nreturn onPropertyChangedMethodBuilder;\n```", "```cs\n    namespace Chapter6;\n    [AttributeUsage(AttributeTargets.Property)]\n    public class NotifyChangesForAttribute : Attribute\n    {\n        public NotifyChangesForAttribute(params string[]\n          propertyNames)\n        {\n            PropertyNames = propertyNames;\n        }\n        public string[] PropertyNames { get; }\n    }\n    ```", "```cs\n    static string[] GetPropertiesToNotifyFor(PropertyInfo\n      property)\n    {\n        var properties = new List<string>\n        {\n            property.Name\n        };\n        foreach (var attribute in (NotifyChangesForAttribute[])\n          property.GetCustomAttributes(typeof(NotifyChangesFor\n            Attribute), true))\n        {\n            properties.AddRange(attribute.PropertyNames);\n        }\n        return properties.ToArray();\n    }\n    ```", "```cs\n    static void DefineProperties(TypeBuilder typeBuilder, Type\n      baseType, MethodBuilder onPropertyChangedMethodBuilder)\n    {\n        var properties = baseType.GetProperties();\n        var query = from p in properties\n                    where p.GetGetMethod()!.IsVirtual && !p\n                      .GetGetMethod()!.IsFinal\n                    select p;\n        foreach (var property in query)\n        {\n            DefineGetMethodForProperty(property, typeBuilder);\n            DefineSetMethodForProperty(property, typeBuilder,\n              onPropertyChangedMethodBuilder);\n        }\n    }\n    ```", "```cs\n    static void DefineSetMethodForProperty(PropertyInfo\n      property, TypeBuilder typeBuilder, MethodBuilder\n        onPropertyChangedMethodBuilder)\n    {\n        var setMethodToOverride = property.GetSetMethod();\n        if (setMethodToOverride is null)\n        {\n            return;\n        }\n        var setMethodBuilder = typeBuilder.DefineMethod\n          (setMethodToOverride.Name, setMethodToOverride\n            .Attributes, VoidType, new[] { property\n              .PropertyType });\n        var setMethodGenerator = setMethodBuilder\n          .GetILGenerator();\n        var propertiesToNotifyFor = GetPropertiesToNotifyFor\n          (property);\n        setMethodGenerator.Emit(OpCodes.Ldarg_0);\n        setMethodGenerator.Emit(OpCodes.Ldarg_1);\n        setMethodGenerator.Emit(OpCodes.Call,\n          setMethodToOverride);\n        foreach (var propertyName in propertiesToNotifyFor)\n        {\n            setMethodGenerator.Emit(OpCodes.Ldarg_0);\n            setMethodGenerator.Emit(OpCodes.Ldstr,\n              propertyName);\n            setMethodGenerator.Emit(OpCodes.Call,\n              onPropertyChangedMethodBuilder);\n        }\n        setMethodGenerator.Emit(OpCodes.Ret);\n        typeBuilder.DefineMethodOverride(setMethodBuilder,\n          setMethodToOverride);\n    }\n    ```", "```cs\nstatic void DefineGetMethodForProperty(PropertyInfo\n  property, TypeBuilder typeBuilder)\n{\n    var getMethodToOverride = property.GetGetMethod()!;\n    var getMethodBuilder = typeBuilder.DefineMethod\n      (getMethodToOverride.Name, getMethodToOverride\n        .Attributes, property.PropertyType,\n          Array.Empty<Type>());\n    var getMethodGenerator = getMethodBuilder\n      .GetILGenerator();\n    var label = getMethodGenerator.DefineLabel();\n    getMethodGenerator.DeclareLocal(property.PropertyType);\n    getMethodGenerator.Emit(OpCodes.Ldarg_0);\n    getMethodGenerator.Emit(OpCodes.Call,\n      getMethodToOverride);\n    getMethodGenerator.Emit(OpCodes.Stloc_0);\n    getMethodGenerator.Emit(OpCodes.Br_S, label);\n    getMethodGenerator.MarkLabel(label);\n    getMethodGenerator.Emit(OpCodes.Ldloc_0);\n    getMethodGenerator.Emit(OpCodes.Ret);\n    typeBuilder.DefineMethodOverride(getMethodBuilder,\n      getMethodToOverride);\n}\n```", "```cs\nstatic readonly AssemblyBuilder DynamicAssembly;\nstatic readonly ModuleBuilder DynamicModule;\nstatic readonly Dictionary<Type, Type> Proxies = new();\nstatic NotifyingObjectWeaver()\n{\n    var assemblyName = new AssemblyName\n      (DynamicAssemblyName);\n    DynamicAssembly = AssemblyBuilder\n      .DefineDynamicAssembly(assemblyName,\n        AssemblyBuilderAccess.Run);\n    DynamicModule = DynamicAssembly.DefineDynamicModule\n      (DynamicModuleName);\n}\nThe code introduces a private Proxies field. This will serve as a cache to avoid generating the same type multiple times every time one needs a proxy of a type.\n```", "```cs\npublic static Type GetProxyType(Type type)\n{\n    Type proxyType;\n    if (Proxies.ContainsKey(type))\n    {\n        proxyType = Proxies[type];\n    }\n    else\n    {\n        proxyType = CreateProxyType(type);\n        Proxies[type] = proxyType;\n    }\n    return proxyType;\n}\n```", "```cs\nvar type = NotifyingObjectWeaver.GetProxyType\n  (typeof(Person));\nConsole.WriteLine($\"Type name : {type}\");\nvar instance = (Activator.CreateInstance(type) as\n  INotifyPropertyChanged)!;\ninstance.PropertyChanged += (sender, e) =>\n  Console.WriteLine($\"{e.PropertyName} changed\");\nvar instanceAsViewModel = (instance as Person)!;\ninstanceAsViewModel.FirstName = \"John\";\n```", "```cs\nType name : Person6e46bfa7_e47a_4299_8ae6_f928b8a027ee\nFirstName changed\n```", "```cs\npublic class Person\n{\n    [NotifyChangesFor(nameof(FullName))]\n    public virtual string FirstName { get; set; } =\n      string.Empty;\n    [NotifyChangesFor(nameof(FullName))]\n    public virtual string LastName { get; set; } =\n      string.Empty;\n    public virtual string FullName => $\"{FirstName}\n      {LastName}\";\n}\n```", "```cs\nType name : Person6e46bfa7_e47a_4299_8ae6_f928b8a027ee\nFirstName changed\nFullName changed\n```"]