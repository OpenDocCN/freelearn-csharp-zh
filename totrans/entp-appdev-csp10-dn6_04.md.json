["```cs\n// See https://aka.ms/new-console-template for more //information\n```", "```cs\nConsole.WriteLine(\"Hello, World!\");\n```", "```cs\nglobal using System.Threading;\n```", "```cs\nglobal using SRS = System.Runtime.Serialization;\n```", "```cs\nglobal using static System.Console;\n```", "```cs\nWriteLine(\"Hello C# 10\");\n```", "```cs\n<ItemGroup>\n```", "```cs\n  <Using Include=\"System.Threading\" />\n```", "```cs\n  <Using Remove=\"System.IO\" />\n```", "```cs\n</ItemGroup>\n```", "```cs\n<ImplicitUsings>disable</ImplicitUsings>\n```", "```cs\npublic record struct Employee(string Name);\n```", "```cs\nusing static System.Console;\n```", "```cs\n public record struct EmployeeRecord(string Name);\n```", "```cs\nEmployee employee1 = new EmployeeRecord(\"Suneel\", \"Kunani\");\n```", "```cs\nEmployee employee2 = new EmployeeRecord(\"Suneel\", \"Kunani\");\n```", "```cs\nWriteLine(employee1.ToString());\n```", "```cs\nWriteLine($\"HashCode of s1 is :{ employee1.GetHashCode()}\");\n```", "```cs\nWriteLine($\"HashCode of s2 is :{ employee2.GetHashCode()}\");\n```", "```cs\nWriteLine($\"Is s1 equals s2 : { employee1 == employee2}\");\n```", "```cs\n//deconstruct the fields from the employee object\n```", "```cs\nstring firstName;\n```", "```cs\n (firstname, var lastname) = employee1;\n```", "```cs\nConsole.WriteLine($\"firstname: {firstname}, lastname:{lastname}\");\n```", "```cs\npublic readonly record struct Employee(string Name);\n```", "```cs\nEmployee employee2 = employee1 with { LastName = string.Empty };\n```", "```cs\nVar Square = (int x) => x * x;\n```", "```cs\nvar SayHello = (string name) => Console.WriteLine($\"Hello {name}\");\n```", "```cs\nVar SayWelcome = (ref string name) => Console.WriteLine($\"Welcome {name}\");\n```", "```cs\npublic record class Person();\n```", "```cs\npublic record class Employee() : Person();\n```", "```cs\npublic record class Manager() : Person();\n```", "```cs\nvar createExpression = (bool condition) => condition ? new Employee() : new Manager();\n```", "```cs\nvar createEmployee = Person (bool hasReportees) => condition ? new Manager() : new Employee();\n```", "```cs\n// Create the Person object based on condition\n```", "```cs\nvar manager = createEmployee(true);\n```", "```cs\nvar GetEmployeeById =  [Authorize] Employee ([FromRoute]int id) => { return new Employee { }; };\n```", "```cs\nstring message = string.Format(\"{0}, {1}!\", Greeting, Message);\n```", "```cs\nstring Greeting = \"Hello\";\n```", "```cs\nstring Language = \"C#\";\n```", "```cs\nint version = 10;\n```", "```cs\nstring message = $\"{Greeting}, {Language}!\";\n```", "```cs\nstring messageWithVersion = $\"{Greeting}, {Language} {version}!\";\n```", "```cs\nString text = \"Hello\";\n```", "```cs\nstring text2 = \"C#\";\n```", "```cs\nint num = 10;\n```", "```cs\nstring text3 = text + \", \" + text2 + \"!\";\n```", "```cs\nstring text4 = string.Format(\"{0}, {1} {2}!\", text, text2, num);\n```", "```cs\nstring Greeting = \"Hello\";\n```", "```cs\nstring Language = \"C#\";\n```", "```cs\nint version = 10;\n```", "```cs\nstring message = Greeting + \", \" + Language + \"!\";\n```", "```cs\nDefaultInterpolatedStringHandler defaultInterpolatedStringHandler = new DefaultInterpolatedStringHandler(4, 3);\n```", "```cs\ndefaultInterpolatedStringHandler.AppendFormatted(Greeting);\n```", "```cs\ndefaultInterpolatedStringHandler.AppendLiteral(\", \");\n```", "```cs\ndefaultInterpolatedStringHandler.AppendFormatted(Language);\n```", "```cs\ndefaultInterpolatedStringHandler.AppendLiteral(\" \");\n```", "```cs\ndefaultInterpolatedStringHandler.AppendFormatted(version);\n```", "```cs\ndefaultInterpolatedStringHandler.AppendLiteral(\"!\");\n```", "```cs\nstring messageWithVersion = defaultInterpolatedStringHandler.ToStringAndClear();\n```", "```cs\nProduct product = new Product\n```", "```cs\n{\n```", "```cs\n    Name =\"Men's Shirt\",\n```", "```cs\n    Price =10.0m,\n```", "```cs\n    Location = new Address\n```", "```cs\n    {\n```", "```cs\n        Country =\"USA\",\n```", "```cs\n        State =\"NY\"\n```", "```cs\n    }\n```", "```cs\n};\n```", "```cs\nif (product is Product { Location: { Country: \"USA\" } })\n```", "```cs\n    Console.WriteLine(\"USA\"); \n```", "```cs\nif (product is Product { Location.Country : \"USA\"  })\n```", "```cs\n    Console.WriteLine(\"USA\");\n```", "```cs\npublic class Gift : INotifyPropertyChanged\n```", "```cs\n{\n```", "```cs\n    private string _description;\n```", "```cs\n    public string Description\n```", "```cs\n    {\n```", "```cs\n        get\n```", "```cs\n        {\n```", "```cs\n            return _description;\n```", "```cs\n        }\n```", "```cs\n        set\n```", "```cs\n        {\n```", "```cs\n            _description = value;\n```", "```cs\n            OnPropertyRaised();\n```", "```cs\n        }\n```", "```cs\n    }\n```", "```cs\n    public event PropertyChangedEventHandler \n```", "```cs\n      PropertyChanged;\n```", "```cs\n    private void OnPropertyRaised([CallerMemberName] string \n```", "```cs\n      propertyname=\"\")\n```", "```cs\n    {\n```", "```cs\n        if (PropertyChanged != null)\n```", "```cs\n        {\n```", "```cs\n            PropertyChanged(this, new \n```", "```cs\n              PropertyChangedEventArgs(propertyname));\n```", "```cs\n        }\n```", "```cs\n    }\n```", "```cs\n} \n```", "```cs\npublic string Description\n```", "```cs\n{\n```", "```cs\n    get { return _description;     }\n```", "```cs\n    set\n```", "```cs\n    {\n```", "```cs\n        _description = value;\n```", "```cs\n        OnPropertyRaised(\"Description\");\n```", "```cs\n    }\n```", "```cs\n}\n```", "```cs\npublic static class ArgumentValidation\n```", "```cs\n{\n```", "```cs\n    public static void ThrowIfNull<T>(T value,\n```", "```cs\n    [CallerArgumentExpression(\"value\")] string expression = \n```", "```cs\n      null) where T : class\n```", "```cs\n    {\n```", "```cs\n        if (value == null)\n```", "```cs\n            Throw(expression);\n```", "```cs\n    }\n```", "```cs\n    private static void Throw(string expression)\n```", "```cs\n        => throw new ArgumentException($\"Argument \n```", "```cs\n           {expression} must not be null\");\n```", "```cs\n} \n```", "```cs\npublic async Task<ProductDetailsViewModel> AddProductAsync (ProductDetailsViewModel product)\n```", "```cs\n{\n```", "```cs\n    ArgumentValidation.ThrowIfNull(product);\n```", "```cs\n    // Implementation to add the product to cart\n```", "```cs\n}\n```"]