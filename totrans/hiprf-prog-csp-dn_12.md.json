["```cs\n    USE [Northwind]\n    GO\n    SET ANSI_NULLS ON\n    GO\n    SET QUOTED_IDENTIFIER ON\n    GO\n    CREATE PROCEDURE [dbo].[InsertProduct] \n        @ProductName NVARCHAR(40),\n        @CategoryID INT,\n        @SupplierID INT,\n        @Discontinued BIT\n    AS\n    BEGIN\n    SET NOCOUNT ON;\n    INSERT INTO \n            Products (\n                ProductName,\n                CategoryID,\n                SupplierID,\n                Discontinued,\n                 QuantityPerUnit\n            )\n        VALUES (\n            @ProductName,\n            @CategoryID,\n            @SupplierID,\n            @Discontinued,\n             '1'\n        )\n    END\n    GO\n    ```", "```cs\n    USE [Northwind]\n    GO\n    SET ANSI_NULLS ON\n    GO\n    SET QUOTED_IDENTIFIER ON\n    GO\n    CREATE PROCEDURE [dbo].[GetProductName]\n        @ProductName NVARCHAR(40)\n    AS\n    BEGIN\n        SET NOCOUNT ON;\n        SELECT \n            Top 1 ProductName \n        FROM \n            Products\n        WHERE\n            ProductName LIKE @ProductName\n    END\n    GO\n    ```", "```cs\n    USE [Northwind]\n    GO\n    SET ANSI_NULLS ON\n    GO\n    SET QUOTED_IDENTIFIER ON\n    GO\n    CREATE PROCEDURE [dbo].[FilterProducts]\n        @ProductName NVARCHAR(40)\n    AS\n    BEGIN\n            SET NOCOUNT ON;\n            SELECT \n                * \n            FROM \n                Products\n            WHERE\n                ProductName LIKE @ProductName\n    END\n    GO\n    ```", "```cs\n    USE [Northwind]\n    GO\n    SET ANSI_NULLS ON\n    GO\n    SET QUOTED_IDENTIFIER ON\n    GO\n    CREATE PROCEDURE [dbo].[UpdateProductName]\n            @OldProductName NVARCHAR(40),\n            @NewProductName NVARCHAR(40)\n    AS\n    BEGIN\n        SET NOCOUNT ON;\n         UPDATE \n             Products\n             SET \n                ProductName = @NewProductName\n             WHERE\n                ProductName = @OldProductName\n    END\n    GO\n    ```", "```cs\n    USE [Northwind]\n    GO\n    SET ANSI_NULLS ON\n    GO\n    SET QUOTED_IDENTIFIER ON\n    GO\n    CREATE PROCEDURE [dbo].[DeleteProduct]\n        @ProductName NVARCHAR(40)\n    AS\n    BEGIN\n        SET NOCOUNT ON;\n         DELETE FROM \n                Products\n         WHERE\n                ProductName = @ProductName\n    END\n    GO\n    ```", "```cs\n    using System.Data.Common;\n    using System.Reflection;\n    internal class Properties \n    {\n    }\n    ```", "```cs\n    public static PropertyInfo GetProperty<T>(string name)\n    {\n          return typeof(T).GetProperty(name);\n    }\n    ```", "```cs\n    public static T GetValue<T, U>(U source, string name)\n    {\n          return (T)GetProperty<U>(name).GetValue(source);\n    }\n    ```", "```cs\n        public static int GetFieldCount(DbDataRecord \n            record)\n        {\n            return GetValue<int, DbDataRecord>(\n            record, \"FieldCount\"\n        );\n    }\n    ```", "```cs\npublic string ConnectionString { get; set; }\n```", "```cs\n    Microsoft.Extensions.Configuration\n    Microsoft.Extensions.Configuration.JsonFile\n    Microsoft.Extensions.Configuration.EnvironmentVariables\n    Microsoft.Extensions.Configuration.UserSecrets\n    ```", "```cs\n    using Microsoft.Extensions.Configuration;\n    using System;\n    using System.IO;\n    ```", "```cs\n    public static IConfiguration Configuration \n    {\n          get; private set; \n    }\n    ```", "```cs\n    public static string GetSecrets<T>(string sectionName)\n    where T : class\n    {\n    var devEnvironmentVariable = \n        Environment\n            .GetEnvironmentVariable(\"NETCORE_ENVIRONMENT\");\n    var isDevelopment = \n        string.IsNullOrEmpty(devEnvironmentVariable) \n        || devEnvironmentVariable.ToLower() == \"development\";\n    var builder = new ConfigurationBuilder()\n        .SetBasePath(Directory.GetCurrentDirectory())\n            .AddJsonFile(\n                \"appsettings.json\", \n                optional: true, \n                reloadOnChange: true\n        )\n        .AddEnvironmentVariables();\n    //only add secrets in development\n    if (isDevelopment) \n    {\n        builder.AddUserSecrets<T>();\n    }\n    Configuration = builder.Build();\n    return Configuration.GetSection($\"{typeof(T).Name}\n          :{sectionName}\").Value;\n    }\n    ```", "```cs\n    using System;\n    using System.ComponentModel.DataAnnotations;\n    using System.ComponentModel.DataAnnotations.Schema;\n    [Table(\"Products\")]\n    public class Product\n    {\n    }\n    ```", "```cs\n    [Key]\n    public int ProductID { get; set; }\n    public string ProductName { get; set; }\n    [ForeignKey(\"Suppliers\")]\n    public int SupplierID { get; set; }\n    [ForeignKey(\"Categories\")]\n    public int CategoryID { get; set; }\n    public string QuantityPerUnit { get; set; } = \"1\"\n    public decimal UnitPrice { get; set; }\n    public Int16 UnitsInStock { get; set; }\n    public Int16 UnitsOnOrder { get; set; }\n    public Int16 ReorderLevel { get; set; }\n    public bool Discontinued { get; set; }\n    ```", "```cs\n    public string CommandText { get; set; }\n    public CommandType CommandType { get; set; }\n    public SqlCommandParameterModel[] CommandParameters { \n        get; set; }\n    ```", "```cs\npublic string ParameterName { get; set; }\n```", "```cs\npublic DbType DataType { get; set; }\n```", "```cs\npublic dynamic Value { get; set; }\n```", "```cs\n    using CH10_DataAccessBenchmarks.Models;\n    using CH10_DataAccessBenchmarks.Reflection;\n    using System;\n    using System.Collections;\n    using System.Collections.Generic;\n    using System.Data.Common;\n    using System.Data.SqlClient;\n    using System.Reflection;\n    internal class AdoDotNetData : IDisposable\n    {\n    private readonly SqlConnection _sqlConnection;\n    private bool _isDisposed;\n    public AdoDotNetData(string connectionString)\n    {\n              _sqlConnection = \n               new SqlConnection(connectionString);\n    }\n    public void Dispose()\n    {\n        Dispose(_isDisposed);\n    }\n    public void Dispose(bool disposing)\n    {\n            if (disposing)\n            {\n            _sqlConnection.Dispose();\n            _isDisposed = true;\n        }\n    }\n    }\n    ```", "```cs\n        internal void ExecuteNonQuery(SqlCommandModel \n            model)\n        {\n            SqlCommand sqlCommand \n             = new (model.CommandText, _sqlConnection);\n         sqlCommand.CommandType = model.CommandType;\n         foreach (SqlCommandParameterModel parameter in \n            model.CommandParameters)\n         sqlCommand.Parameters.Add(new SqlParameter()\n            {\n                ParameterName = parameter.ParameterName,\n                DbType = parameter.DataType,\n                Value = parameter.Value\n         });\n         _sqlConnection.Open();\n         sqlCommand.ExecuteNonQuery();\n         _sqlConnection.Close();\n    }\n    ```", "```cs\n    internal int ExecuteNonQuery(string sql)\n    {\n    try\n    {\n    _sqlConnection.Open();\n    return new SqlCommand(sql, _sqlConnection)\n        .ExecuteNonQuery();\n    }\n    finally\n    {\n    _sqlConnection.Close();\n    }\n    }\n    ```", "```cs\n    internal T ExecuteScalar<T>(string sql)\n    {\n         try\n         {\n            _sqlConnection.Open();\n            return (T)new SqlCommand(sql, _sqlConnection)\n                .ExecuteScalar();\n    }\n        finally\n        {\n            _sqlConnection.Close();\n    }\n    }\n    ```", "```cs\n    internal T ExecuteScalar<T>(SqlCommandModel model)\n    {\n    SqlCommand sqlCommand = new(\n         model.CommandText, _sqlConnection);\n    sqlCommand.CommandType = model.CommandType;\n        foreach (SqlCommandParameterModel parameter in \n            model.CommandParameters)\n            sqlCommand.Parameters.Add(new SqlParameter()\n            {\n                ParameterName = parameter.ParameterName,\n                DbType = parameter.DataType,\n                Value = parameter.Value\n         });\n      _sqlConnection.Open();\n        T data = (T)sqlCommand.ExecuteScalar();\n        _sqlConnection.Close();\n        return data;\n    }\n    ```", "```cs\n    internal IEnumerator<T> ExecuteReader<T>(string sql)\n    {\n        Type TypeT = typeof(T);\n        ConstructorInfo ctor = \n          TypeT.GetConstructor(Type.EmptyTypes);\n    if (ctor == null)\n        {\n    throw new InvalidOperationException($\"Type \n        {TypeT.Name} does not have a default\n            constructor.\");\n    }\n        _sqlConnection.Open();\n    IEnumerator data = new SqlCommand(sql, _sqlConnection)\n     .ExecuteReader().GetEnumerator();    \n    while (data.MoveNext())\n        {\n            T newInst = (T)ctor.Invoke(null);\n            DbDataRecord record = (DbDataRecord)\n                    data.Current;\n            int fieldCount = Properties\n                 .GetFieldCount((DbDataRecord)\n                    data.Current);\n         for (int i = 0; i < fieldCount; i++)\n            {\n                string propertyName = record.GetName(i);\n                PropertyInfo propertyInfo = TypeT\n                     .GetProperty(propertyName);\n                 if (propertyInfo != null)\n                {\n                    object value = record[i];\n                    if (value == DBNull.Value)\n                        propertyInfo\n                             .SetValue(newInst, null);\n                     else\n                        propertyInfo\n                             .SetValue(newInst, value);\n             }\n         }\n            yield return newInst;\n    }\n    }\n    ```", "```cs\n    internal IEnumerator<T> ExecuteReader<T>\n         (SqlCommandModel model) {\n    Type TypeT = typeof(T);\n    ConstructorInfo ctor \n             = TypeT.GetConstructor(Type.EmptyTypes);\n    if (ctor == null) {\n    throw new InvalidOperationException($\"Type \n        {TypeT.Name} does not have a default\n             constructor.\");\n    }\n    SqlCommand sqlCommand \n        = new(model.CommandText, _sqlConnection);\n    sqlCommand.CommandType = model.CommandType;\n    foreach (SqlCommandParameterModel parameter in \n        model.CommandParameters)\n    sqlCommand.Parameters.Add(new SqlParameter() {\n    ParameterName = parameter.ParameterName,\n    DbType = parameter.DataType, Value = \n        parameter.Value});\n    _sqlConnection.Open();\n    SqlDataReader reader = sqlCommand.ExecuteReader();\n    if (reader.HasRows) {\n    while (reader.Read()) {\n    T newInst = (T)ctor.Invoke(null);\n    for (int i = 0; i < reader.FieldCount; i++) {\n         string propertyName = reader.GetName(i);\n         PropertyInfo propertyInfo \n             = TypeT.GetProperty(propertyName);\n         if (propertyInfo != null) {\n             object value = reader[i];\n             if (value == DBNull.Value)\n                   propertyInfo.SetValue(newInst, null);\n             else  \n                   propertyInfo.SetValue(newInst, value);\n         }\n    }        \n        yield return newInst;\n    }\n    }\n      _sqlConnection.Close();\n    }\n    ```", "```cs\n    using CH10_DataAccessBenchmarks.Models;\n    using Microsoft.EntityFrameworkCore;\n    using System.Collections.Generic;\n    using Microsoft.Data.SqlClient;\n    using System.Linq;\n    using Microsoft.EntityFrameworkCore.SqlServer\n        .Infrastructure.Internal;\n    public class EntityFrameworkCoreData : DbContext\n    {\n        private string _connectionString = string.Empty;\n        public DbSet<Product> Products { get; set; }\n        public EntityFrameworkCoreData(string \n            connectionString) : base(GetOptions\n                 (connectionString))\n        {\n            _connectionString = connectionString;\n        }\n        private static DbContextOptions GetOptions(string \n            connectionString)\n        {\n        return SqlServerDbContextOptionsExtensions\n            .UseSqlServer(new DbContextOptionsBuilder(), \n                connectionString).Options;\n        }\n    ```", "```cs\n    protected override void OnConfiguring\n         (DbContextOptionsBuilder optionsBuilder)\n    {     \n          optionsBuilder.UseSqlServer(_connectionString);\n    }\n    ```", "```cs\n    public int ExecuteSQL(string sql)\n        {\n            return Database.ExecuteSqlRaw(sql, null);\n    }\n    ```", "```cs\n    public int ExecuteNonQuerySP(SqlCommandModel model)\n        {\n            SqlParameter[] parameters \n            = new SqlParameter[model.CommandParameters\n                .Length];\n            for (int i = 0; i < parameters.Length; i++)\n            {\n                parameters[i] = new SqlParameter(\n                model.CommandParameters[i].ParameterName,\n                 model.CommandParameters[i].Value\n                 );\n         }\n            if (parameters.Length == 4)\n                return Database.ExecuteSqlRaw(\n                 model.CommandText, parameters[0], \n                 parameters[1], parameters[2], \n                 parameters[3]\n             );\n         else if (parameters.Length == 2)\n             return Database.ExecuteSqlRaw(\n                 model.CommandText, parameters[0], \n                 parameters[1]\n             );\n         else\n             return Database.ExecuteSqlRaw(\n                 model.CommandText, parameters[0]\n             );\n    }\n    ```", "```cs\n    public string ExecuteScalarSP(string productName)\n        {\n            return Products.FromSqlRaw(\n                \"EXEC FilterProducts @ProductName={0}\",\n                new SqlParameter() { \n            ParameterName = \"@ProductName\", Value = \n                    productName })\n                .AsEnumerable().FirstOrDefault()\n                  .ProductName;\n        }\n    ```", "```cs\n    public IEnumerator<Product> ExecuteReaderSP(string \n        productName)\n    {\n    return Products.FromSqlRaw(\n            \"EXEC FilterProducts @ProductName={0}\", \n            new SqlParameter() { \n                 ParameterName = \"@ProductName\", \n                 Value = productName \n             }\n         ).GetEnumerator();\n    }\n    ```", "```cs\n    public class DapperDotNet : IDisposable\n    {\n        private bool isDisposed = false;\n         private IDbConnection _dbConnection;\n         public DapperDotNet(string connection)\n        {\n         SimpleCRUD\n                .SetDialect(SimpleCRUD.Dialect.SQLServer);\n             _dbConnection = new SqlConnection\n                 (connection);\n         }\n         public void Dispose()\n        {\n             Dispose(true);\n            GC.SuppressFinalize(this);\n         }\n         protected virtual void Dispose(bool disposing)\n        {\n            if (isDisposed)\n                return;\n             if (disposing)\n                 _dbConnection.Dispose();\n             isDisposed = true;\n    }\n    }\n    ```", "```cs\n        public int ExecuteNonQuery(string sql)\n        {\n            try\n            {\n                _dbConnection.Open();\n                return _dbConnection.Execute(sql);\n         }\n            finally\n            {\n                _dbConnection.Close();\n         }\n        }\n    ```", "```cs\n    public void ExecuteNonQuery(SqlCommandModel model)\n        {\n            try\n            {\n                _dbConnection.Open();\n             var parameters = new DynamicParameters();\n                foreach (\n                 SqlCommandParameterModel parameter in  \n                 model.CommandParameters\n             ) \n                 parameters.Add(\n                     parameter.ParameterName, \n                     parameter.Value\n                 );\n                 _dbConnection.Query(\n                 model.CommandText, \n                 parameters, \n                 commandType: CommandType.StoredProcedure\n             );\n            }\n            finally\n         {\n                _dbConnection.Close();\n            }\n    }\n    ```", "```cs\n        public T ExecuteScalar<T>(string sql)\n        {\n            try\n            {\n                _dbConnection.Open();\n                return _dbConnection.ExecuteScalar\n                    <T>(sql);\n         }\n            finally\n            {\n                if (_dbConnection != null \n                 && _dbConnection.State \n                     == ConnectionState.Open)\n                 _dbConnection.Close();\n         }\n    }\n    ```", "```cs\n    public string ExecuteScalarSP(SqlCommandModel model)\n    {\n            try\n            {\n                _dbConnection.Open();\n                var parameters = new DynamicParameters();\n                    parameters.Add(\n                    model.CommandParameters[0]\n                     .ParameterName,   \n                 model.CommandParameters[0].Value\n             );\n                return _dbConnection.Query<Product>(\n                 model.CommandText, \n                 parameters, \n                 commandType: CommandType.StoredProcedure\n             ).First().ProductName;\n         }\n            finally\n            {\n                if (\n                 _dbConnection != null \n                 && _dbConnection.State \n                     == ConnectionState.Open)\n                 _dbConnection.Close();\n         }\n    }\n    ```", "```cs\n    public IEnumerator<T> ExecuteReader<T>(string sql) \n        where T : class\n    {\n             try\n            {\n                _dbConnection.Open();\n                return _dbConnection.Query<T>(sql)\n                 .GetEnumerator();\n        }\n            finally\n            {\n                if (_dbConnection != null \n                 && _dbConnection.State \n                     == ConnectionState.Open)\n                 _dbConnection.Close();\n        }\n    }\n    ```", "```cs\n        public IEnumerator<Product> ExecuteReaderSP\n            <Product>(\n        SqlCommandModel model\n    )\n        {\n            try\n            { \n                _dbConnection.Open();\n                var parameters = new DynamicParameters();\n                foreach (SqlCommandParameterModel \n                    parameter in model.CommandParameters)\n                 parameters.Add(\n                     parameter.ParameterName, \n                     parameter.Value\n                 );\n             return _dbConnection.Query<Product>(\n                 model.CommandText, \n                 parameters, \n                 commandType: CommandType.StoredProcedure\n             ).GetEnumerator();\n         }\n            finally\n            {\n                if (_dbConnection != null \n                 && _dbConnection.State \n                 == ConnectionState.Open)\n             _dbConnection.Close();\n         }\n    }\n    ```", "```cs\n    public string GetProductNameSP(string productName)\n        {\n            try\n            {\n                _dbConnection.Open();\n                var parameters = new DynamicParameters();\n                parameters.Add(\"@ProductName\", \n                    productName);\n                return _dbConnection.Query<Product>(\n                 $\"GetProductName\", parameters, \n                 commandType: CommandType.StoredProcedure\n                 ).First().ProductName;\n         }\n            finally\n            {\n                if (_dbConnection != null \n                 && _dbConnection.State \n                 == ConnectionState.Open)\n                 _dbConnection.Close();\n            }\n    }\n    ```"]