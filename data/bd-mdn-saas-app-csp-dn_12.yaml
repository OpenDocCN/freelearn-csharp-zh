- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Growing Pains – Operating at Scale
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 成长之痛——大规模运营
- en: As **Software-as-a-Service** (**SaaS**) applications grow and gain more users,
    they inevitably face new challenges related to performance, scalability, security,
    and availability. These hurdles are collectively referred to as the challenges
    of operating at scale. So far in this book, we have delved into the fundamentals
    of building SaaS applications with Microsoft technologies, covering aspects such
    as data modeling, microservices architecture, web APIs, Entity Framework, Blazor,
    and secure authentication and authorization. Although we have not explicitly addressed
    the issue of scaling these elements, we have been laying a solid groundwork by
    adhering to best practices and building a robust foundation that will prove invaluable
    when the time comes to scale the application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 随着**软件即服务**（**SaaS**）应用程序的成长和用户数量的增加，它们不可避免地会面临与性能、可扩展性、安全性和可用性相关的新挑战。这些障碍统称为大规模运营的挑战。到目前为止，在这本书中，我们已经深入探讨了使用微软技术构建SaaS应用程序的基础知识，包括数据建模、微服务架构、Web
    API、Entity Framework、Blazor以及安全的身份验证和授权。尽管我们没有明确地解决扩展这些元素的问题，但我们通过遵循最佳实践并构建一个坚实的基石，为将来扩展应用程序提供了宝贵的价值。
- en: In this chapter, we will more thoroughly explore the challenges associated with
    operating at scale, as always, with particular emphasis on scaling SaaS applications
    using Microsoft technologies. We will start with a comprehensive overview of the
    various facets of scaling, followed by detailed insights into techniques for scaling
    the database, API, and **user interface** (**UI**). Additionally, we will discuss
    the critical importance of monitoring and alerting, the implementation of effective
    DevOps practices, and robust disaster recovery planning.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将更深入地探讨与大规模运营相关的挑战，一如既往地，特别强调使用微软技术扩展SaaS应用程序。我们将从对扩展各个方面的全面概述开始，接着详细探讨扩展数据库、API和**用户界面**（**UI**）的技术。此外，我们还将讨论监控和警报的至关重要性、实施有效的DevOps实践以及稳健的灾难恢复计划。
- en: By examining these aspects, we aim to provide you with the necessary knowledge
    and tools to confidently tackle the challenges that arise as your SaaS application
    expands. Our goal is to equip you with a deep understanding of the intricacies
    of scaling, ensuring that your application remains performant, reliable, and secure
    even as it caters to an ever-growing user base.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 通过研究这些方面，我们的目标是为您提供必要的知识和工具，以便自信地应对随着您的SaaS应用程序扩展而出现的挑战。我们的目标是让您深入了解扩展的复杂性，确保您的应用程序即使在为不断增长的用户群体提供服务时，也能保持高性能、可靠性和安全性。
- en: 'The main topics covered in this chapter are the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主要内容包括以下几方面：
- en: The challenges of operating at scale
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大规模运营的挑战
- en: Scaling the database
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展数据库
- en: Scaling the API
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展API
- en: Scaling the UI
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展UI
- en: Monitoring and alerting
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控和警报
- en: DevOps practices for scaling SaaS applications
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展SaaS应用程序的DevOps实践
- en: Disaster recovery planning
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 灾难恢复计划
- en: The challenges of operating at scale
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 大规模运营的挑战
- en: It’s an exciting milestone when a SaaS application needs to scale, as it means
    that the application is successful and is driving revenue for the business. However,
    with this growth comes challenges, and it’s essential to be prepared for them
    so that the application can continue to be successful. As your user base grows,
    your application must remain available at all times, be able to handle the increased
    demand for resources, and continue to provide excellent performance and security.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当SaaS应用程序需要扩展时，这是一个令人兴奋的里程碑，因为这意味着该应用程序取得了成功，并为业务创造了收入。然而，随着这种增长，也会带来挑战，因此准备好应对这些挑战至关重要，以便应用程序可以继续成功。随着用户基础的扩大，您的应用程序必须始终保持可用性，能够处理对资源的增加需求，并继续提供卓越的性能和安全性。
- en: The challenges of operating at scale can be broadly categorized into several
    areas, including infrastructure scalability, performance optimization, security
    and compliance, availability and uptime, cost and resource management, and planning
    for scaling and growth. In this section, we will explore each of these areas in
    detail, discussing the specific challenges you may encounter and the strategies
    you can use to overcome them. We will consider how these areas impact the main
    layers of the application, from the database to the API and, finally, the UI.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 大规模运营的挑战可以广泛地分为几个领域，包括基础设施的可扩展性、性能优化、安全性和合规性、可用性和正常运行时间、成本和资源管理，以及为扩展和增长进行规划。在本节中，我们将详细探讨这些领域，讨论您可能遇到的特定挑战以及您可以使用哪些策略来克服它们。我们将考虑这些领域如何影响应用程序的主要层，从数据库到API，最后到UI。
- en: By understanding the challenges of operating at scale before you actually start
    to operate at scale and by developing a plan to address them, you can build and
    operate a successful SaaS application that can handle the demands of a growing
    user base.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在您实际开始大规模运营之前，理解大规模运营的挑战并制定应对这些挑战的计划，您就可以构建并运营一个成功的SaaS应用程序，该应用程序能够满足不断增长的用户群体的需求。
- en: Throughout this book, so far, we have focused on the development of the application
    and on running the code locally on a developer’s laptop. While we have been mindful
    that we will have to run at scale, scale is obviously not an issue in a dev environment!
    Most of these tips and techniques in this chapter refer to production environments
    hosted on the cloud. Because we are mostly dealing with Microsoft technologies,
    I will focus on Azure as the cloud platform, but the general advice in this section
    should apply equally to other cloud providers.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书的到目前为止的部分，我们一直专注于应用的开发以及在当地开发者的笔记本电脑上本地运行代码。虽然我们已经意识到我们最终需要大规模运行，但在开发环境中，规模显然不是问题！本章中的大部分技巧和技术都指的是托管在云上的生产环境。因为我们主要处理的是微软技术，所以我将重点关注Azure作为云平台，但本节中的通用建议同样适用于其他云服务提供商。
- en: Performance and response time
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 性能和响应时间
- en: One of the most critical aspects of operating a SaaS application at scale is
    ensuring optimal performance and response time for the user. In order to deliver
    a performant UI, every layer under the UI must also be performant – the app is
    only as performant as its least performant piece! A fast and efficient experience
    is vital to user satisfaction, as it directly impacts their perception of your
    application’s quality and reliability. Studies have shown that users tend to abandon
    slow-performing applications or websites, leading to a loss of revenue and user
    engagement. Consequently, maintaining high performance and fast response times
    is essential to retaining users and supporting the growth of your SaaS application.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在大规模运营SaaS应用程序时，最关键的方面之一是确保用户获得最佳的性能和响应时间。为了提供性能良好的UI，UI下每一层都必须是高性能的——应用程序的性能取决于其最不性能的部分！快速而高效的用户体验对于用户满意度至关重要，因为它直接影响到他们对应用程序质量可靠性的感知。研究表明，用户往往会放弃性能缓慢的应用程序或网站，导致收入和用户参与度下降。因此，保持高性能和快速的响应时间是保留用户并支持您的SaaS应用程序增长的关键。
- en: As the user base grows and the data volumes grow, the demands on your application’s
    infrastructure and resources increase proportionately. This will result in performance
    degradation if not properly managed. By proactively monitoring and addressing
    performance and response time, you can create a positive user experience that
    keeps customers engaged and loyal to your SaaS application. There are a few practical
    steps that you can take to keep on top of the application performance and, therefore,
    keep your users happy.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 随着用户基础和数据量的增长，对您应用程序的基础设施和资源的需求也会相应增加。如果不妥善管理，这会导致性能下降。通过主动监控和解决性能和响应时间，您可以创造一个积极的用户体验，使客户保持参与和忠诚于您的SaaS应用程序。您可以采取一些实际步骤来保持应用程序性能，从而保持您的用户满意。
- en: Regularly monitoring and profiling your application is essential for identifying
    performance bottlenecks and optimizing response times. Use performance monitoring
    tools, such as Application Insights for .NET applications, to collect and analyze
    metrics related to response times, throughput, and resource utilization. Profiling
    tools can help you pinpoint specific areas of the codebase that may be causing
    performance issues, enabling you to make targeted optimizations. All of this should
    be as automated as possible, ideally completely so, with an alert issued when
    the systems detect performance degradation.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 定期监控和剖析您的应用程序对于识别性能瓶颈和优化响应时间至关重要。使用性能监控工具，如适用于.NET应用程序的应用洞察，来收集和分析与响应时间、吞吐量和资源利用率相关的指标。剖析工具可以帮助您确定代码库中可能引起性能问题的特定区域，使您能够进行有针对性的优化。所有这些都应该尽可能自动化，理想情况下是完全自动化的，当系统检测到性能下降时发出警报。
- en: Implement caching strategies to reduce the load on your application and database
    servers. Utilize various caching techniques, such as in-memory, distributed, and
    output caching, to store frequently requested data and serve it more quickly to
    users. **Content delivery networks** (**CDNs**) can also be employed to cache
    and serve static assets, such as images and scripts, from geographically distributed
    servers, thereby reducing latency and improving response times for users around
    the globe. This is a very complex subject and could probably take up an entire
    chapter on its own! As long as you, as a developer of a SaaS application, are
    aware of this, then you will be well placed to take advantage of it should the
    need arise. We will look at caching in more detail in the coming sections focusing
    on the database, API, and UI.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 实施缓存策略以减少应用程序和数据库服务器的负载。利用各种缓存技术，如内存、分布式和输出缓存，来存储频繁请求的数据，并更快地为用户提供服务。**内容分发网络**（**CDNs**）也可以用于从地理位置分布的服务器缓存和提供静态资产，如图像和脚本，从而减少延迟并提高全球用户的响应时间。这是一个非常复杂的话题，可能需要单独占用整整一章！只要作为SaaS应用程序的开发者，你意识到这一点，那么在需要时你将能够充分利用它。我们将在接下来的章节中更详细地探讨缓存，重点关注数据库、API和UI。
- en: Optimize database performance by implementing proper indexing, fine-tuning queries,
    and using connection pooling. Regularly review and update database indexes to
    improve query execution times. Analyze slow-running queries and optimize them
    using the SQL Server Query Store or the SQL Server Management Studio’s built-in
    performance tools.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 通过实施适当的索引、微调查询和使用连接池来优化数据库性能。定期审查和更新数据库索引以改进查询执行时间。分析运行缓慢的查询并使用SQL Server Query
    Store或SQL Server Management Studio内置的性能工具进行优化。
- en: Implement load balancing to distribute traffic evenly among multiple instances
    of your application, preventing any single instance from becoming a bottleneck.
    This can be achieved using technologies such as Azure Load Balancer or Application
    Gateway. As with much of this advice, load balancing must be completely automatic.
    Leverage autoscaling to dynamically adjust the number of application instances
    based on the current load. This ensures that your application remains responsive
    during peak times while reducing costs during periods of low usage.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 实施负载均衡，以在您的应用程序的多个实例之间均匀分配流量，防止任何单个实例成为瓶颈。可以使用像Azure Load Balancer或Application
    Gateway这样的技术来实现。与许多此类建议一样，负载均衡必须是完全自动的。利用自动扩展根据当前负载动态调整应用程序实例的数量。这确保了在高峰时段您的应用程序保持响应，同时在低使用期间降低成本。
- en: Offload time-consuming tasks to asynchronous processes, which can run in the
    background without blocking the main application flow. This can help improve response
    times for user-facing operations, as they don’t have to wait for these tasks to
    be complete. Message queues, such as Azure Service Bus or RabbitMQ, can be employed
    to manage and distribute these tasks among background worker services. You will
    remember that we looked at RabbitMQ in the chapter dedicated to microservices.
    This same technology, which allowed us to cleanly separate our application, can
    also be used to improve or maintain performance.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 将耗时任务卸载到异步进程中，这些进程可以在后台运行而不会阻塞主应用程序流程。这有助于提高面向用户的操作响应时间，因为它们不需要等待这些任务完成。可以使用像Azure
    Service Bus或RabbitMQ这样的消息队列来管理和分配这些任务到后台工作服务中。你会记得我们在关于微服务的章节中查看过RabbitMQ。这项相同的技术，使我们能够干净地分离我们的应用程序，也可以用来提高或维护性能。
- en: As you can probably tell, there are many different tricks, tools, and techniques
    that can be used when scaling a SaaS application!
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如你或许能猜到的，在扩展 SaaS 应用程序时，可以使用许多不同的技巧、工具和技术！
- en: Reliability and availability
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可靠性和可用性
- en: Reliability and availability are also very important components of operating
    a SaaS application at scale, as they directly influence user trust and satisfaction.
    A reliable application consistently performs its intended functions without unexpected
    failures or errors, while application availability refers to the application’s
    ability to be accessible and operational whenever users need it. Ensuring high
    reliability and availability is vital for user retention and building a positive
    reputation for your SaaS application.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 可靠性和可用性也是在大规模运营 SaaS 应用程序时非常重要的组成部分，因为它们直接影响用户的信任和满意度。一个可靠的应用程序会持续执行其预期功能，而不会出现意外的故障或错误；而应用可用性则指应用在用户需要时能够访问和运行的能力。确保高可靠性和可用性对于用户保留和建立你
    SaaS 应用的正面声誉至关重要。
- en: As an application gains traction, it is common for growth to be non-linear,
    with periods of plateau followed by occasional sharp increases in demand that
    wither, taper out, or persist. These are challenging circumstances in which to
    maintain application uptime! As your application scales, it becomes increasingly
    important to design for fault tolerance, redundancy, and effective monitoring
    to minimize downtime and ensure a seamless user experience even during periods
    of variable demand – or sharply increasing demand!
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 随着应用的普及，增长往往是非线性的，伴随着一段时间的平稳期，随后偶尔会出现需求激增，这些需求可能会逐渐减少、减弱或持续存在。在这样的环境中保持应用的正常运行时间是极具挑战性的！随着你的应用规模扩大，设计容错性、冗余性和有效的监控变得越来越重要，以最小化停机时间并确保在需求波动或急剧增加的时期也能提供无缝的用户体验！
- en: Design your application to be fault-tolerant by implementing redundancy at various
    levels, including data storage, compute resources, and network connections. This
    can be achieved by deploying multiple instances of your application across different
    geographic regions or availability zones. In case of a failure in one instance,
    the other instances can continue to serve users without interruption.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在数据存储、计算资源和网络连接等多个层面实现冗余，设计你的应用以具备容错性。这可以通过在不同地理区域或可用区部署你应用的多个实例来实现。在某个实例发生故障的情况下，其他实例可以继续不间断地为用户提供服务。
- en: Additionally, ensure that your data is replicated across multiple locations
    to safeguard against data loss and facilitate quick recovery. Services such as
    Azure SQL Database and Azure Storage Service provide built-in data replication
    features that can help you achieve this level of redundancy relatively easily.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，确保你的数据在多个地点进行复制，以防止数据丢失并便于快速恢复。例如，Azure SQL 数据库和 Azure 存储服务提供了内置的数据复制功能，这可以帮助你相对容易地实现这种级别的冗余。
- en: No matter how good your systems are, there will eventually be a failure that
    requires you to recover some data from a backup. To make this eventuality as seamless
    as possible, implement regular backups of your application data and configuration
    to enable quick recovery in case of data loss or corruption. Use tools such as
    Azure Backup or SQL Server Backup to automate the data backup process and ensure
    that your backups are stored securely and independently from the primary data
    storage. Additionally, establish a disaster recovery plan to outline the steps
    for restoring your application in case of a catastrophic event. Don’t forget to
    test your disaster recovery plan periodically to validate its effectiveness and
    make any necessary adjustments.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你的系统多么出色，最终都可能会出现需要从备份中恢复数据的故障。为了使这种可能性尽可能无缝，实施定期备份你的应用数据和配置，以便在数据丢失或损坏的情况下快速恢复。使用
    Azure 备份或 SQL Server 备份等工具来自动化数据备份过程，并确保你的备份安全存储，且独立于主数据存储。此外，制定灾难恢复计划，概述在发生重大事件时恢复应用所需的步骤。别忘了定期测试你的灾难恢复计划，以验证其有效性并进行必要的调整。
- en: Doing backups alone is not enough – you should also implement a regular practice
    of performing recoveries, where data is restored from the backup and checked for
    consistency. There have been many recorded instances where the ‘backup’ was not
    as complete as it was assumed, and this fact was only discovered during a restore
    after a data loss.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 仅进行备份是不够的——您还应该实施定期执行恢复的常规做法，其中数据从备份中恢复并检查一致性。已经记录了许多实例，其中“备份”并不像预期的那样完整，这一事实仅在数据丢失后的恢复过程中被发现。
- en: Backups and recoveries will save you after a data loss. But measures should
    be taken to prevent this circumstance from occurring in the first place. Set up
    comprehensive health monitoring and alerting to detect and respond to potential
    issues before they impact users. Use monitoring tools to collect metrics, logs,
    and traces from your application, infrastructure, and network. Configure alerts
    and notifications based on predefined thresholds, allowing your team to promptly
    address issues and minimize downtime.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 备份和恢复可以在数据丢失后拯救您。但应采取措施防止这种情况首先发生。建立全面的健康监控和警报，以在问题影响用户之前检测和响应潜在问题。使用监控工具收集应用程序、基础设施和网络的数据、日志和跟踪。根据预定义的阈值配置警报和通知，使您的团队能够及时解决问题并最小化停机时间。
- en: Even with the best-in-class logging and monitoring, and a solid backup and recovery
    strategy, there will be times (sadly) when your application buckles under the
    strain of a surge of new users. Design your application to degrade gracefully
    under heavy load or during partial failures. Implement techniques such as circuit
    breakers, timeouts, and retries to handle errors and failures in a controlled
    manner, preventing cascading failures and ensuring that users can still access
    core functionalities even when certain components or services are unavailable.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 即使拥有最先进的日志记录和监控，以及稳固的备份和恢复策略，也难免会有时候（遗憾的是）您的应用程序会在新用户激增的压力下崩溃。设计您的应用程序以优雅地处理高负载或部分故障。实施诸如断路器、超时和重试等技术，以控制方式处理错误和故障，防止级联故障，并确保即使在某些组件或服务不可用的情况下，用户仍然可以访问核心功能。
- en: Security and compliance
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安全和合规
- en: Security and compliance are of paramount importance when operating a SaaS application
    at scale, as they protect your users’ data, your application’s integrity, and
    your company’s reputation. A secure application safeguards sensitive data from
    unauthorized access, prevents malicious attacks, and maintains the confidentiality,
    integrity, and availability of user data. Compliance ensures that your application
    adheres to applicable legal, regulatory, and industry standards, mitigating risks
    and building trust among your users.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在大规模运营SaaS应用程序时，安全和合规至关重要，因为它们保护您的用户数据、应用程序的完整性和公司的声誉。一个安全的应用程序可以保护敏感数据免受未经授权的访问，防止恶意攻击，并维护用户数据的机密性、完整性和可用性。合规性确保您的应用程序遵守适用的法律、法规和行业标准，降低风险，并在用户之间建立信任。
- en: As your application grows, the potential attack surface increases, making it
    crucial to implement robust security measures and maintain compliance with relevant
    standards. By proactively addressing security and compliance, you can create a
    secure environment that protects your users and your business while scaling to
    meet the demands of a growing user base.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 随着您的应用程序增长，潜在的攻击面增加，因此实施强大的安全措施并保持与相关标准的合规性至关重要。通过积极应对安全和合规性问题，您可以创建一个安全的环境，保护您的用户和业务，同时满足不断增长的用户群的需求。
- en: The first line of defense is to implement robust authentication and authorization
    mechanisms to control access to your application and its resources. We discussed
    this in an earlier chapter and gave some examples of how to build this into a
    microservice architecture with .NET. As per that example, you should never try
    to build your own infrastructure – always use battle-tested solutions such as
    OAuth 2.0, OpenID Connect, or Azure Active Directory for user authentication,
    and implement **role-based access control** (**RBAC**) or claims-based authorization
    in a standard way to enforce fine-grained permissions within your application.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 第一道防线是实施强大的身份验证和授权机制，以控制对您的应用程序及其资源的访问。我们已在之前的章节中讨论了这一点，并给出了一些如何将.NET集成到微服务架构中的示例。根据该示例，您永远不应该尝试构建自己的基础设施——始终使用经过实战检验的解决方案，如OAuth
    2.0、OpenID Connect或Azure Active Directory进行用户身份验证，并以标准方式实现**基于角色的访问控制（RBAC**）或基于声明的授权，以在应用程序内强制执行细粒度的权限。
- en: There is little point in worrying about authentication and authorization if
    your application is transmitting data in an unencrypted way. Protect sensitive
    data both in transit and at rest by implementing strong encryption methods. Use
    encryption protocols such as **Transport Layer Security** (**TLS**) for securing
    data in transit and encryption technologies such as Azure Storage Service Encryption,
    Azure Disk Encryption, or **transparent data encryption** (**TDE**) for SQL Server
    to encrypt data at rest. Additionally, manage access to encryption keys securely
    using services such as Azure Key Vault. Take particular care when working with
    secrets in a developer environment. There have been many instances where the secrets
    for production have been accidentally leaked by committing them into a public
    repository!
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的应用程序以未加密的方式传输数据，那么担心身份验证和授权几乎是没有意义的。通过实施强大的加密方法，保护在传输中和静止状态下的敏感数据。使用如**传输层安全性**（**TLS**）这样的加密协议来保护传输中的数据，以及如Azure存储服务加密、Azure磁盘加密或**透明数据加密**（**TDE**）这样的加密技术来加密SQL
    Server中的静止数据。此外，使用如Azure Key Vault等服务安全地管理加密密钥。在开发环境中处理机密信息时，要特别小心。已经有许多实例表明，生产环境的机密信息被意外提交到公共存储库中而泄露了！
- en: Even though you may think that you have secured your application from the start,
    it is still very important to conduct regular security audits and vulnerability
    assessments to identify potential weaknesses in your application’s security. Use
    tools such as Azure Security Center or third-party vulnerability scanners to detect
    and remediate security vulnerabilities. Additionally, perform penetration testing
    to simulate real-world attacks and assess your application’s ability to withstand
    them.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你认为你已经从一开始就保护了你的应用程序，仍然非常重要的是要定期进行安全审计和漏洞评估，以识别应用程序安全中的潜在弱点。使用如Azure Security
    Center或第三方漏洞扫描器等工具来检测和修复安全漏洞。此外，进行渗透测试以模拟现实世界的攻击并评估应用程序承受这些攻击的能力。
- en: Penetration testing is a complex topic that **requires** a very particular set
    of skills. It is often advisable to consult with domain experts to carry out **penetration**
    (**pen**) testing.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 渗透测试是一个复杂的话题，**需要**非常特定的技能集。通常建议咨询领域专家来执行**渗透**（**pen**）测试。
- en: Set up continuous monitoring and logging to detect and respond to security incidents
    in a timely manner. Leverage tools such as Azure Monitor, Azure Sentinel, or third-party
    **security information and event management** (**SIEM**) solutions to aggregate
    and analyze logs from various sources, such as application, server, and network
    logs. Develop an incident response plan to outline the steps for identifying,
    containing, and recovering from security incidents, as well as communicating with
    affected users and stakeholders.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 设置持续监控和日志记录，以便及时检测和响应安全事件。利用如Azure Monitor、Azure Sentinel或第三方**安全信息和事件管理**（**SIEM**）解决方案来汇总和分析来自各种来源的日志，例如应用程序、服务器和网络日志。制定一个事件响应计划，概述识别、控制和从安全事件中恢复的步骤，以及与受影响用户和利益相关者的沟通。
- en: Finally, while the myriad of compliance requirements might seem like a needless
    burden, these things exist for a reason. Ensure your application adheres to relevant
    legal, regulatory, and industry compliance standards, such as **General Data Protection
    Regulation** (**GDPR**), **Health Insurance Portability and Accountability Act**
    (**HIPAA**), or **Payment Card Industry Data Security Standard** (**PCI DSS**).
    Regularly review and update your application’s privacy policy, data handling procedures,
    and security measures to maintain compliance. Consider using tools such as Azure
    Compliance Manager to track and manage your compliance requirements.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，尽管众多的合规要求可能看起来像是不必要的负担，但这些规定存在是有原因的。确保你的应用程序遵守相关的法律、法规和行业标准，例如**通用数据保护条例**（**GDPR**）、**健康保险可携带性和问责法案**（**HIPAA**）或**支付卡行业数据安全标准**（**PCI
    DSS**）。定期审查和更新应用程序的隐私政策、数据处理程序和安全措施，以保持合规。考虑使用Azure Compliance Manager等工具来跟踪和管理你的合规要求。
- en: Infrastructure scalability
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基础设施可扩展性
- en: Infrastructure scalability used to be an enormous challenge. In the days of
    apps running on physical servers, the only way to scale was to call your hardware
    supplier and place an order for a truck full of new servers! This process could
    take months – it was simply not possible to react to moment-by-moment spikes in
    use, and outages were extremely common. The only way to cope with small spikes
    in demand was to have on hand extra capacity that was not used 99% of the time
    – an extremely expensive inefficiency for the company hosting the app!
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 基础设施的可扩展性曾经是一个巨大的挑战。在应用运行在物理服务器上的时代，唯一的扩展方式是联系您的硬件供应商，并订购一卡车新的服务器！这个过程可能需要数月时间——根本无法对使用高峰的瞬间做出反应，而且故障非常常见。应对需求小幅度波动的唯一方法是拥有99%时间未使用的额外容量——这对托管应用的公司来说是一种极其昂贵的低效。
- en: Thankfully, in these cloud-enabled days, many of these problems are now consigned
    to history. There are, however, a new set of challenges that must be addressed!
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，在云服务普及的今天，许多这些问题现在已经被历史所淘汰。然而，仍然有一系列新的挑战需要解决！
- en: Could infrastructure scalability quickly become a crucial factor when operating
    a SaaS application at scale, as it ensures that your application can adapt to
    varying demands and continue to provide a high-quality user experience? Scalable
    cloud infrastructure can grow or shrink dynamically to meet the changing needs
    of your application, allowing it to handle increasing loads without sacrificing
    performance, reliability, or availability. Similarly, cloud infrastructure can
    scale down again when demand dips, such as overnight in your most active region.
    This allows the operator of the application to be extremely efficient with their
    usage, only having to maintain a small amount of always-on buffer against spikes
    in use.As your application’s user base and resource requirements grow, it becomes
    increasingly important to design and implement infrastructure that can scale both
    vertically and horizontally. By proactively addressing infrastructure scalability,
    you can create an adaptable environment that supports your application’s growth
    and continues to meet the demands of a growing user base.Horizontal scaling refers
    to designing your application to run on multiple instances or nodes, which can
    be added or removed as needed to accommodate changing loads. To achieve this,
    it is very useful to embrace microservices architecture, as we have discussed
    in an earlier chapter. A microservice architecture allows you to scale individual
    components or services independently, improving resource utilization and management.
    It is also advisable to use containerization technologies such as Docker and orchestration
    platforms such as Kubernetes or **Azure Kubernetes Service** (**AKS**) to simplify
    the deployment and management of your microservices.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当大规模运营SaaS应用时，基础设施的可扩展性是否会迅速成为一个关键因素，因为它确保了您的应用能够适应不断变化的需求，并继续提供高质量的用户体验？可扩展的云基础设施可以动态地增长或缩小，以满足您应用的变化需求，使其能够处理不断增长的负载，而不会牺牲性能、可靠性或可用性。同样，当需求下降时，例如在您最活跃的地区夜间，云基础设施也可以再次缩小规模。这使得应用的操作者能够极其高效地使用资源，只需维护一小部分始终在线的缓冲区以应对使用高峰。随着您的应用用户基础和资源需求的增长，设计和实施能够垂直和水平扩展的基础设施变得越来越重要。通过主动解决基础设施的可扩展性问题，您可以创建一个适应性强、支持应用增长并继续满足不断增长的用户群需求的环境。水平扩展是指设计您的应用以在多个实例或节点上运行，这些实例或节点可以根据需要添加或删除，以适应不断变化的负载。为了实现这一点，采用我们在前面章节中讨论的微服务架构非常有用。微服务架构允许您独立扩展单个组件或服务，从而提高资源利用和管理效率。还建议使用容器化技术，如Docker，以及编排平台，如Kubernetes或**Azure
    Kubernetes Service（AKS**），以简化微服务的部署和管理。
- en: Vertical scaling refers to the process of increasing the resources, such as
    CPU, memory, or storage, allocated to your application’s components as needed
    to handle increased demand. Regularly analyze and optimize your application’s
    resource usage to ensure that it is using the available resources efficiently.
    Use tools such as Azure Monitor or Application Insights to track resource utilization
    and identify potential bottlenecks.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 垂直扩展是指根据需要增加分配给应用组件的资源，如CPU、内存或存储，以处理增加的需求。定期分析和优化应用资源使用，以确保其高效地使用可用资源。使用Azure
    Monitor或Application Insights等工具跟踪资源利用情况并识别潜在瓶颈。
- en: If your application is designed such that it can easily scale horizontally,
    and your cloud infrastructure can scale vertically, then you have given yourself
    the best chance of coping with transient spikes in demand!
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的应用程序设计得可以轻松地进行水平扩展，并且你的云基础设施可以垂直扩展，那么你已经为自己应对需求波动的峰值提供了最佳的机会！
- en: These spikes can happen at any time, night or day, and can often happen very
    rapidly. There is no time to get a team on it, and both horizontal and vertical
    scaling must be built to happen automatically in response to the additional demand.
    Use automated services to define scaling rules and triggers based on predefined
    metrics, such as CPU utilization or request rate. Combine autoscaling with load
    balancing, using technologies such as Azure Load Balancer or Application Gateway,
    to distribute traffic evenly across instances and ensure optimal performance and
    resource utilization.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这些峰值可能随时发生，不分昼夜，而且往往发生得非常快。没有时间组建团队来处理，并且必须自动构建水平和垂直扩展以响应额外的需求。使用自动化服务来定义基于预定义指标（如CPU利用率或请求速率）的扩展规则和触发器。结合自动扩展和负载均衡，使用如Azure负载均衡器或应用程序网关等技术，在实例之间均匀分配流量，确保最佳性能和资源利用率。
- en: One very modern and also very clever approach to help facilitate automatic scaling
    is to adopt **Infrastructure-as-Code** (**IaC**) practices to automate the provisioning,
    configuration, and management of your infrastructure. IaC allows you to define
    your infrastructure as code, version control it, and consistently apply changes
    across environments. Use tools such as **Azure Resource Manager** (**ARM**) templates,
    Terraform, or Ansible to implement IaC and streamline your infrastructure management.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一种非常现代且非常巧妙的方法来帮助促进自动扩展，是采用**基础设施即代码**（**IaC**）实践来自动化基础设施的供应、配置和管理。IaC允许你将基础设施定义为代码，对其进行版本控制，并在各个环境中一致地应用更改。使用如**Azure资源管理器**（**ARM**）模板、Terraform或Ansible等工具来实现IaC，并简化你的基础设施管理。
- en: Finally, again, no matter how good your processes and practices are, there will
    inevitably be some unexpected issues that arise. To mitigate the impact of this,
    continuously monitor your infrastructure’s performance, resource utilization,
    and capacity to make informed decisions about scaling. Use monitoring tools such
    as Azure Monitor, Application Insights, or third-party solutions to collect and
    analyze infrastructure metrics. Regularly review capacity planning to estimate
    future resource needs and ensure that your infrastructure is prepared to handle
    expected growth. By doing so, you give yourself the best possible chance to catch
    issues before they occur, or at least respond very quickly when they do!
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，再次强调，无论你的流程和实践多么出色，总会不可避免地出现一些意外问题。为了减轻这种影响，持续监控你的基础设施性能、资源利用率和容量，以便做出关于扩展的明智决策。使用Azure
    Monitor、Application Insights或第三方解决方案等监控工具来收集和分析基础设施指标。定期审查容量规划，以估计未来的资源需求，并确保你的基础设施能够应对预期的增长。通过这样做，你将给自己最大的机会在问题发生之前捕捉到它们，或者至少在它们发生时能够迅速响应！
- en: Cost and resource management
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 成本和资源管理
- en: In the previous section, we talked about horizontal and vertical scaling by
    adding additional resources for your application to consume. Even when talking
    about cloud infrastructure, adding resources costs additional money and can become
    extremely expensive as your application scales.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们讨论了通过为你的应用程序添加额外资源来消费来实现水平和垂直扩展。即使是在谈论云基础设施时，添加资源也会产生额外的费用，并且随着应用程序的扩展，这可能会变得极其昂贵。
- en: Therefore, efficient cost and resource management is essential when operating
    a SaaS application at scale, as it enables your organization to optimize the use
    of resources, reduce expenses, and maintain a sustainable and profitable business
    model. As your application’s user base and infrastructure grow, it becomes increasingly
    important to implement strategies that help you monitor, control, and optimize
    the costs associated with running and scaling your application.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在规模运营SaaS应用程序时，有效的成本和资源管理至关重要，因为它使你的组织能够优化资源的使用，减少开支，并维持可持续和盈利的业务模式。随着你的应用程序的用户基础和基础设施的增长，实施有助于你监控、控制和优化与运行和扩展应用程序相关的成本的策略变得越来越重要。
- en: By proactively addressing cost and resource management, you can create an adaptable
    and cost-effective environment that supports your application’s growth while maximizing
    return on investment.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 通过积极应对成本和资源管理，你可以创建一个适应性强且成本效益高的环境，支持你的应用程序的增长，同时最大化投资回报率。
- en: This starts by simply paying attention to the costs as they arise. Regularly
    analyze and optimize your application’s resource usage to ensure that it’s using
    the available resources efficiently. Use monitoring tools such as Azure Monitor,
    Application Insights, or third-party solutions to track resource utilization and
    identify potential bottlenecks or underutilized resources. Implement autoscaling
    and load balancing strategies, as discussed in the *Infrastructure scalability*
    section, to optimize resource allocation and utilization.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这一点首先是从简单关注成本开始。定期分析和优化应用程序的资源使用，以确保其高效地使用可用资源。使用监控工具，如Azure Monitor、Application
    Insights或第三方解决方案，以跟踪资源利用情况并识别潜在的瓶颈或未充分利用的资源。实施自动扩展和负载均衡策略，如*基础设施可伸缩性*部分所述，以优化资源分配和利用。
- en: As with much of the advice in this chapter, it is important to continuously
    monitor your application’s costs using tools such as Azure Cost Management, AWS
    Cost Explorer, or third-party cost management solutions. Set up cost alerts and
    notifications to keep your team informed about cost trends and potential budget
    overruns. Regularly review and analyze cost reports to identify opportunities
    for cost optimization and to ensure that your application’s expenses are in line
    with your budget and business goals.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 与本章中的许多建议一样，使用Azure Cost Management、AWS Cost Explorer或第三方成本管理解决方案等工具持续监控应用程序的成本非常重要。设置成本警报和通知，以使团队了解成本趋势和潜在的预算超支。定期审查和分析成本报告，以识别成本优化的机会，并确保应用程序的支出符合预算和业务目标。
- en: Choosing the right infrastructure and resources for your application based on
    its specific requirements and usage patterns is challenging and is often overlooked
    by technical teams that just want to build cool applications! But, the success
    of an application is ultimately a function of its profitability, so care should
    be taken to choose the most appropriate cloud services. Regularly review your
    infrastructure choices and right-size your resources to ensure that you’re not
    overprovisioning or underutilizing resources.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 根据应用程序的具体需求和用法模式选择合适的基础设施和资源具有挑战性，并且经常被只想构建酷炫应用程序的技术团队所忽视！但是，应用程序的成功最终是盈利能力的函数，因此应谨慎选择最合适的云服务。定期审查您的基础设施选择，并调整资源以确保您没有过度配置或未充分利用资源。
- en: Data consistency and integrity
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据一致性和完整性
- en: Data consistency and integrity are critical aspects of operating a SaaS application
    at scale, as they directly impact the quality and reliability of the data your
    application processes and stores. Ensuring data consistency means that your application
    presents a coherent view of the data to all users, regardless of where the data
    is stored or accessed. Data integrity refers to maintaining the accuracy, completeness,
    and consistency of the data over its entire life cycle.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 数据一致性和完整性是大规模运营SaaS应用程序的关键方面，因为它们直接影响到应用程序处理和存储的数据的质量和可靠性。确保数据一致性意味着无论数据存储在何处或如何访问，应用程序都向所有用户提供一致的数据视图。数据完整性是指在整个生命周期内保持数据的准确性、完整性和一致性。
- en: As your application’s user base and data volume grow, it becomes increasingly
    important to implement strategies that ensure data consistency and integrity across
    your application’s components and services. By proactively addressing data consistency
    and integrity, you can create a dependable environment that maintains the quality
    of your data and supports your application’s growth.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 随着应用程序的用户基础和数据量的增长，实施确保应用程序组件和服务之间数据一致性和完整性的策略变得越来越重要。通过积极解决数据一致性和完整性问题，您可以创建一个可靠的环境，保持数据质量并支持应用程序的增长。
- en: When building a SaaS app, it is very common to be working with distributed data
    systems or microservices. With these technologies, you should consider adopting
    an eventual consistency model to maintain data consistency across multiple data
    stores or services. In this model, data updates are allowed to propagate asynchronously
    between different components, eventually reaching a consistent state. Implement
    mechanisms such as message queues (such as RabbitMQ, as demonstrated in the microservices
    chapter) or event-driven architectures to propagate data updates and enforce consistency
    across your application’s services.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建SaaS应用时，与分布式数据系统或微服务一起工作是非常常见的。使用这些技术，你应该考虑采用最终一致性模型来维护多个数据存储或服务之间的数据一致性。在这个模型中，数据更新可以在不同的组件之间异步传播，最终达到一致状态。实施机制，如消息队列（例如在微服务章节中演示的RabbitMQ）或事件驱动架构，以传播数据更新并在应用的服务之间强制一致性。
- en: Having a solid data model at the database layer is extremely important, but
    it is also important to try to prevent bad data from entering the database in
    the first place. To achieve this, implement data validation and sanitization processes
    at the UI, API, and database levels to ensure that only accurate and well-formed
    data is stored and processed. Use input validation techniques, such as data type
    constraints, range checks, and pattern matching, to validate incoming data before
    it’s stored or processed. Additionally, sanitize data to remove any potentially
    harmful content or formatting, thereby preventing security vulnerabilities such
    as SQL injection or **cross-site scripting** (**XSS**) attacks.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据库层拥有一个稳固的数据模型非常重要，但同样重要的是尝试防止不良数据首先进入数据库。为了实现这一点，在UI、API和数据库级别实施数据验证和清理过程，以确保仅存储和处理的准确且格式良好的数据。使用输入验证技术，如数据类型约束、范围检查和模式匹配，在存储或处理之前验证传入的数据。此外，清理数据以删除任何可能有害的内容或格式，从而防止诸如SQL注入或**跨站脚本**（**XSS**）攻击等安全漏洞。
- en: As discussed in the *Reliability and availability* section, regularly back up
    your application data to protect against data loss or corruption. Implement backup
    strategies that include multiple levels of redundancy, such as full, differential,
    and incremental backups. And don’t forget to test your backup and recovery processes
    periodically to ensure they are effective and can restore data integrity in case
    of a failure.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如在*可靠性和可用性*部分所述，定期备份应用数据以防止数据丢失或损坏。实施包括多个级别冗余的备份策略，如完整备份、差异备份和增量备份。并且不要忘记定期测试备份和恢复过程，以确保它们有效，并在发生故障时能够恢复数据完整性。
- en: A common theme across all of these considerations for scaling is to continuously
    monitor and audit your application’s data operations to detect and respond to
    potential issues that may impact data consistency and integrity. Regularly review
    data audit logs to identify trends and patterns, as well as to ensure compliance
    with relevant regulations and standards.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有这些扩展考虑因素中，一个共同的主题是持续监控和审计应用的数据操作，以检测和应对可能影响数据一致性和完整性的潜在问题。定期审查数据审计日志以识别趋势和模式，以及确保符合相关法规和标准。
- en: Planning for scaling and growth
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 规划扩展和增长
- en: So far, this chapter has focused mostly on technical tips, but it is also important
    to consider the non-technical elements that are involved in scaling the application
    so that it can handle changes in demand. Putting plans in place to scale and grow
    is a vital aspect of operating a successful SaaS application at scale, as it ensures
    that your application is prepared to handle the demands of an expanding user base
    and can continue to deliver a high-quality user experience. By proactively planning
    for growth, you can create an agile and resilient environment that supports your
    application’s growth and helps maintain a high level of customer satisfaction.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，本章主要关注技术技巧，但考虑非技术元素也同样重要，这些元素涉及到应用扩展，以便它能处理需求的变化。制定扩展和增长的计划是成功运营大规模SaaS应用的关键方面，因为它确保了你的应用能够准备好应对不断增长的用户群体的需求，并能够持续提供高质量的用户体验。通过积极规划增长，你可以创建一个灵活且具有弹性的环境，支持应用的增长并帮助维持高水平的客户满意度。
- en: The first step is to just sit down with the technical team and any other stakeholders
    to regularly review your application’s capacity planning and resource requirements
    to estimate future needs based on historical trends, user growth projections,
    and resource utilization patterns. Nothing stays static for long in tech, so update
    your capacity plan periodically to ensure that your application and infrastructure
    are prepared to handle expected growth.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是与技术团队以及其他利益相关者坐下来，定期审查你的应用程序的容量规划和资源需求，根据历史趋势、用户增长预测和资源利用率模式来估计未来的需求。在技术领域，没有什么会长期保持静止，所以定期更新你的容量计划，以确保你的应用程序和基础设施为预期的增长做好准备。
- en: To validate your assumptions and to provide input into the growth-planning sessions,
    conduct regular performance testing and benchmarking to assess your application’s
    ability to handle increasing workloads and user concurrency. Use load testing
    and stress testing tools to simulate real-world usage scenarios and identify potential
    bottlenecks or performance issues. Establish performance baselines and set target
    metrics to help guide your scaling efforts and ensure that your application continues
    to meet performance requirements as it scales.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证你的假设并为增长规划会议提供输入，定期进行性能测试和基准测试，以评估你的应用程序处理增加的工作负载和用户并发的能力。使用负载测试和压力测试工具来模拟真实世界的使用场景，并识别潜在的瓶颈或性能问题。建立性能基线并设置目标指标，以帮助指导你的扩展工作，并确保你的应用程序在扩展过程中继续满足性能要求。
- en: Of course, problems will occur along the way. The less blindsided the team is
    by these issues, the less of an impact they will have, so develop a comprehensive
    disaster recovery and business continuity plan to ensure that your application
    can recover from unexpected failures and continue to provide service to your users.
    As discussed in the *Reliability and availability* section, implement backup and
    recovery strategies, redundancy, and failover mechanisms to minimize downtime
    and data loss. Regularly test and update your disaster recovery plan to ensure
    that it remains effective and aligned with your application’s growth and evolving
    requirements.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，在过程中可能会出现问题。团队对这些问题的意外程度越低，它们的影响就越小，因此制定全面的灾难恢复和业务连续性计划，以确保你的应用程序能够从意外故障中恢复，并继续为用户提供服务。正如在*可靠性和可用性*部分所讨论的，实施备份和恢复策略、冗余和故障转移机制，以最大限度地减少停机时间和数据损失。定期测试和更新你的灾难恢复计划，以确保其有效性并与其应用程序的增长和不断变化的需求保持一致。
- en: It is very easy to focus on the technical challenges that are involved in scaling
    an application, but that should not be the only consideration. Planning for the
    future in this respect will prove invaluable as your application grows!
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易专注于扩展应用程序所涉及的技术挑战，但这一点不应是唯一的考虑因素。在这方面为未来做规划将证明非常有价值，因为你的应用程序会不断增长！
- en: Embracing DevOps and automation
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拥抱DevOps和自动化
- en: Everything that we have discussed in this chapter so far is predicated on a
    solid understanding of DevOps and automation. It is virtually impossible to keep
    up with the ever-changing demands placed on a modern SaaS application when using
    manual processes.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们本章所讨论的一切都基于对DevOps和自动化的扎实理解。在使用手动流程时，几乎不可能跟上对现代SaaS应用不断变化的需求。
- en: Embracing DevOps and automation enables your team to streamline development
    and operations processes, increase efficiency, and minimize potential risks. By
    integrating development and operations teams and leveraging automation tools and
    practices, you can ensure that your application remains agile, reliable, and adaptable
    as it grows.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 拥抱DevOps和自动化使你的团队能够简化开发和运营流程，提高效率，并最小化潜在风险。通过整合开发和运营团队并利用自动化工具和实践，你可以确保你的应用程序在增长过程中保持敏捷、可靠和适应性强。
- en: By proactively incorporating DevOps and automation into your organization’s
    culture and processes, you can create a collaborative and efficient environment
    that supports your application’s growth and helps maintain a high level of customer
    satisfaction.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 通过积极地将DevOps和自动化融入你组织的文化和流程中，你可以创造一个协作高效的环境，支持你的应用程序增长并帮助保持高水平的客户满意度。
- en: The core of this is **continuous integration and continuous deployment** (**CI/CD**),
    which we will discuss in detail in the coming chapter! CI/CD pipelines to automate
    the process of building, testing, and deploying your application are foundational
    to the process as they significantly reduce the time and effort required to release
    new features and improvements while minimizing the risk of introducing errors,
    regressions, or performance issues.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 其核心是**持续集成和持续部署**（**CI/CD**），我们将在下一章中详细讨论！CI/CD流水线自动化构建、测试和部署应用程序的过程，对于这个过程来说是基础性的，因为它们显著减少了发布新功能和改进所需的时间和精力，同时最大限度地降低了引入错误、回归或性能问题的风险。
- en: The CI pipelines should always verify the correctness of the code by running
    a suite of automated tests. This includes unit, integration, and end-to-end tests.
    Automated testing paired with robust CI pipelines massively reduces the risk of
    introducing errors or performance issues as your application scales.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: CI流水线应始终通过运行一系列自动化测试来验证代码的正确性。这包括单元测试、集成测试和端到端测试。自动化测试与强大的CI流水线相结合，可以大幅降低在应用程序扩展过程中引入错误或性能问题的风险。
- en: Modern cloud infrastructure allows us to adopt IaC practices to manage and provision
    your application’s infrastructure using code and configuration files rather than
    manual processes. IaC enables you to automate infrastructure provisioning and
    configuration, ensuring consistency, repeatability, and scalability. Tools such
    as Terraform can be used to facilitate this.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现代云基础设施使我们能够采用IaC（基础设施即代码）实践，使用代码和配置文件而不是手动流程来管理和配置应用程序的基础设施。IaC使您能够自动化基础设施的配置和提供，确保一致性、可重复性和可扩展性。例如，可以使用Terraform等工具来促进这一过程。
- en: As we have demonstrated with the demo application environment in this book,
    it is also possible to configure **Developer Environment as Code** (**DEaC**)
    and build all of the developer dependencies into a Docker setup.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本书的演示应用程序环境中所展示的，配置**开发者环境即代码**（**DEaC**）并将所有开发者依赖项构建到Docker设置中也是可能的。
- en: Continuing the theme of ‘automate everything’, is also very handy to implement
    configuration management tools and practices to automate the process of managing
    your application’s settings, dependencies, and environment configurations. Configuration
    management helps ensure consistency and reliability across your application’s
    components and services while simplifying the process of deploying updates and
    scaling your infrastructure. Automating configuration also minimizes the risk
    that important config details for the production environments will be accidentally
    shared or pushed to a less secure environment.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 继续延续“自动化一切”的主题，实现配置管理工具和实践以自动化管理应用程序的设置、依赖和环境配置的过程也是非常方便的。配置管理有助于确保应用程序组件和服务的一致性和可靠性，同时简化部署更新和扩展基础设施的过程。自动化配置还可以最大限度地减少在生产环境中重要配置细节意外共享或推送到不安全环境的风险。
- en: Finally, there is a huge non-technical component to getting DevOps right. Foster
    a collaborative culture between development and operations teams by encouraging
    open communication, shared goals, and joint problem-solving. Implement tools and
    practices that facilitate collaboration and information sharing, such as project
    management tools such as Jira or Trello and communication platforms such as Microsoft
    Teams or Slack. Regularly hold cross-functional meetings and retrospectives to
    review progress, discuss challenges, and identify opportunities for improvement.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，正确实施DevOps还有很大的非技术成分。通过鼓励开放沟通、共同目标和联合问题解决，在开发和运维团队之间培养协作文化。实施促进协作和信息共享的工具和实践，例如项目管理工具如Jira或Trello，以及通信平台如Microsoft
    Teams或Slack。定期举行跨职能会议和回顾会议，以审查进度、讨论挑战并确定改进的机会。
- en: DevOps has exploded in recent years and for good reason. DevOps practices play
    a crucial role in the successful operation of SaaS applications at scale. By bringing
    together development and operations teams, DevOps facilitates seamless collaboration
    and ensures that software is delivered quickly, reliably, and securely. With DevOps,
    developers can continuously deploy new features and updates, while operations
    teams can maintain the high availability and reliability of the application. This
    is especially important when operating at scale, where any downtime or interruption
    can have a significant impact on the user experience and revenue. The use of DevOps
    practices is, therefore, essential for ensuring the smooth operation of SaaS applications
    at scale.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps近年来迅速发展，这是有充分理由的。DevOps实践在成功运营大规模SaaS应用中发挥着关键作用。通过将开发和运维团队结合起来，DevOps促进了无缝协作，并确保软件快速、可靠、安全地交付。使用DevOps，开发者可以持续部署新功能和更新，而运维团队能够保持应用的高可用性和可靠性。这在运营规模较大时尤为重要，因为任何停机或中断都可能对用户体验和收入产生重大影响。因此，使用DevOps实践对于确保大规模SaaS应用的平稳运行至关重要。
- en: In conclusion, operating a SaaS application at scale presents numerous challenges
    that development teams must address to ensure the continued success and growth
    of the application. By understanding and proactively addressing these challenges,
    you can create an environment that is scalable, efficient, and resilient, allowing
    your application to thrive as its user base expands.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，在大规模运营SaaS应用时，开发团队必须解决众多挑战，以确保应用的持续成功和增长。通过理解和积极应对这些挑战，您可以创造一个可扩展、高效且具有弹性的环境，使应用随着用户基础的扩大而蓬勃发展。
- en: Throughout this section, we have explored key areas, including performance and
    response time, reliability and availability, data consistency and integrity, security
    and compliance, infrastructure scalability, cost and resource management, planning
    for scaling and growth, and embracing DevOps and automation. By implementing the
    practical tips and strategies provided in this section, your team can tackle the
    challenges of operating at scale, maintain a high level of customer satisfaction,
    and drive the ongoing success of your SaaS application.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了关键领域，包括性能和响应时间、可靠性和可用性、数据一致性和完整性、安全性和合规性、基础设施可扩展性、成本和资源管理、规划扩展和增长，以及拥抱DevOps和自动化。通过实施本节提供的实用技巧和策略，您的团队能够应对大规模运营的挑战，保持高水平的客户满意度，并推动SaaS应用的持续成功。
- en: As you continue to grow and scale your SaaS application, it is important to
    regularly review and adjust your strategies and practices in response to changing
    requirements, new technologies, and evolving user expectations. By staying agile,
    adaptable, and focused on continuous improvement, your development team can successfully
    navigate the challenges of operating at scale and ensure the long-term success
    and sustainability of your SaaS application.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 随着您继续扩大和扩展SaaS应用，定期审查和调整您的策略和实践，以应对不断变化的需求、新技术和不断发展的用户期望，这一点非常重要。通过保持敏捷、适应性强并专注于持续改进，您的开发团队能够成功应对大规模运营的挑战，并确保SaaS应用的长期成功和可持续性。
- en: We will now look at particular scaling considerations across the various layers
    of the application.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将查看应用各层级的特定扩展考虑因素。
- en: Scaling the database
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展数据库
- en: In this section, we will delve into the critical task of scaling the database
    layer of your SaaS application. As the foundation upon which your application
    is built, the database plays a pivotal role in the overall performance, reliability,
    and scalability of your system. Effectively managing the database becomes increasingly
    important as your application experiences growth, handling larger data volumes
    and more user requests. We’ll discuss essential strategies and techniques, including
    sharding, horizontal scaling, caching, partitioning, archiving, indexing and query
    optimization, connection pooling, and replication. By mastering these approaches,
    you’ll strengthen the database foundation and ensure a performant, scalable, and
    resilient SaaS application that meets the demands of a growing user base.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将深入探讨扩展您的SaaS应用程序数据库层的关键任务。作为您应用程序构建的基础，数据库在系统的整体性能、可靠性和可扩展性中起着至关重要的作用。随着应用程序的增长，处理更大的数据量和更多的用户请求，有效管理数据库变得越来越重要。我们将讨论包括分片、水平扩展、缓存、分区、归档、索引和查询优化、连接池和复制在内的基本策略和技术。通过掌握这些方法，您将加强数据库基础，并确保一个性能优良、可扩展且具有弹性的SaaS应用程序，以满足不断增长的用户群体的需求。
- en: Sharding
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分片
- en: Sharding is a database scaling technique that involves dividing a large dataset
    into smaller, more manageable pieces called shards. Each shard contains a portion
    of the data and is stored on a separate database server, thereby distributing
    the load and improving overall performance. Sharding can be particularly beneficial
    for SaaS applications, where the ability to handle increasing data volumes and
    user demands is crucial for growth and success.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 分片是一种数据库扩展技术，涉及将大型数据集划分为更小、更易于管理的片段，称为分片。每个分片包含数据的一部分，并存储在单独的数据库服务器上，从而分散负载并提高整体性能。对于SaaS应用程序来说，分片特别有益，因为处理不断增长的数据量和用户需求对于增长和成功至关重要。
- en: 'There are two primary approaches to sharding:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 分片主要有两种方法：
- en: '**Horizontal sharding (data partitioning)**: This approach divides the dataset
    by rows, with each shard containing a distinct subset of records. Horizontal sharding
    is typically based on a specific attribute, such as user ID or geographic location.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**水平分片（数据分区）**：这种方法通过行来划分数据集，每个分片包含一组独特的记录子集。水平分片通常基于特定属性，如用户ID或地理位置。'
- en: '**Vertical sharding (schema partitioning)**: In this approach, the dataset
    is divided into columns, with each shard containing a subset of the table’s attributes.
    Vertical sharding is often used when certain columns are accessed more frequently
    or have different scaling requirements than others.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**垂直分片（模式分区）**：在这种方法中，数据集被分为列，每个分片包含表属性的一个子集。当某些列比其他列更频繁地被访问或具有不同的扩展需求时，通常使用垂直分片。'
- en: 'When implementing sharding, it’s essential to select an appropriate sharding
    key to determine how data will be distributed across shards. The choice of the
    sharding key can significantly impact performance, so it’s important to consider
    factors such as query patterns, data distribution, and scalability requirements.
    Common sharding strategies include the following:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在实施分片时，选择合适的分片键以确定数据如何在分片中分布是至关重要的。分片键的选择可以显著影响性能，因此需要考虑查询模式、数据分布和可扩展性需求等因素。常见的分片策略包括以下几种：
- en: '**Range-based sharding**: Data is partitioned based on a range of values for
    the sharding key (e.g., date ranges or alphabetical ranges).'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于范围的分片**：数据根据分片键的值范围（例如，日期范围或字母范围）进行分区。'
- en: '**Hash-based sharding**: A hash function is applied to the sharding key, and
    data is distributed across shards based on the resulting hash value. This approach
    typically provides a more uniform distribution of data.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于哈希的分片**：对分片键应用哈希函数，并根据产生的哈希值将数据分布在分片中。这种方法通常提供更均匀的数据分布。'
- en: '**Directory-based sharding**: A separate lookup service or directory is used
    to map sharding keys to specific shards, providing greater flexibility in data
    distribution and shard management.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于目录的分片**：使用单独的查找服务或目录将分片键映射到特定的分片，提供在数据分布和分片管理方面的更大灵活性。'
- en: 'While sharding can significantly improve database performance and scalability,
    it’s important to be aware of potential challenges and considerations:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然分片可以显著提高数据库性能和可扩展性，但重要的是要意识到潜在挑战和考虑因素：
- en: '**Data consistency**: Ensuring consistency across shards can be complex, particularly
    in distributed transactions or when dealing with eventual consistency models.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据一致性**：确保跨分片的一致性可能很复杂，尤其是在分布式事务或处理最终一致性模型时。'
- en: '**Query complexity**: Sharding can increase query complexity, as some queries
    may need to be executed across multiple shards and their results combined.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**查询复杂性**：分片可能会增加查询的复杂性，因为某些查询可能需要在多个分片及其结果组合中执行。'
- en: '**Rebalancing and resharding**: As your application grows, you may need to
    redistribute data across shards or add new shards. This process, known as rebalancing
    or resharding, can be time-consuming and may require careful planning and execution.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重新平衡和重新分片**：随着您的应用程序的增长，您可能需要重新分配数据到分片或添加新的分片。这个过程，称为重新平衡或重新分片，可能很耗时，可能需要仔细的计划和执行。'
- en: '**Cross-shard operations**: Operations that span multiple shards, such as joins
    or transactions, can be more complex and less performant than those within a single
    shard.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跨分片操作**：跨越多个分片的操作，如连接或事务，可能比单个分片内的操作更复杂且性能更低。'
- en: Scaling
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展
- en: 'In contrast to sharding, which involves partitioning the data into smaller
    subsets and distributing them across separate database servers, scaling focuses
    on increasing the capacity of the database infrastructure to handle increased
    workloads. There are two primary methods for scaling databases: horizontal scaling
    and vertical scaling.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 与涉及将数据分区成更小的子集并分布到单独数据库服务器的分片不同，扩展侧重于增加数据库基础设施的容量以处理增加的工作负载。扩展数据库有两种主要方法：水平扩展和垂直扩展。
- en: Horizontal scaling, also known as scaling out, involves adding more servers
    or nodes to your infrastructure to handle the increased load and improve performance.
    In the context of databases, horizontal scaling involves replicating the entire
    database across multiple servers or nodes and distributing the load among them.
    Load balancing and data replication techniques are often employed to achieve horizontal
    scaling.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 水平扩展，也称为向外扩展，涉及向您的基础设施添加更多服务器或节点以处理增加的负载并提高性能。在数据库的上下文中，水平扩展涉及在整个数据库中复制到多个服务器或节点，并将负载在他们之间分配。负载均衡和数据复制技术通常被用于实现水平扩展。
- en: Vertical scaling, or scaling up, involves increasing the capacity of an existing
    server by adding more resources, such as CPU, memory, and storage, to handle the
    increased workload and improve performance. When vertically scaling a database,
    you upgrade the hardware or increase the resources allocated to the database server.
    This can involve upgrading to a more powerful server, adding more **random-access
    memory** (**RAM**), increasing storage capacity, or allocating more CPU cores.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 垂直扩展，或向上扩展，涉及通过添加更多资源（如CPU、内存和存储）来增加现有服务器的容量，以处理增加的工作负载并提高性能。在垂直扩展数据库时，您升级硬件或增加分配给数据库服务器的资源。这可能包括升级到更强大的服务器、添加更多**随机存取存储器**（**RAM**）、增加存储容量或分配更多CPU核心。
- en: Both horizontal and vertical scaling have their advantages and limitations.
    Horizontal scaling allows for better fault tolerance and potentially greater overall
    capacity, while vertical scaling can provide immediate performance improvements
    without the complexity of managing multiple servers. However, vertical scaling
    has inherent limitations in terms of resource availability and potential single
    points of failure.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 水平扩展和垂直扩展都有其优势和局限性。水平扩展允许更好的容错性和可能更大的整体容量，而垂直扩展可以在不管理多个服务器复杂性的情况下提供即时的性能提升。然而，垂直扩展在资源可用性和潜在的单点故障方面存在固有的局限性。
- en: These scaling techniques are important techniques for increasing the capacity
    of your database infrastructure to handle growing workloads. By understanding
    the differences between these methods and their respective advantages and limitations,
    you can make informed decisions about the best approach for scaling your SaaS
    application’s database layer.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这些扩展技术是提高您数据库基础设施处理增长工作负载容量的重要技术。通过了解这些方法之间的差异以及各自的优缺点，您可以做出关于扩展您的SaaS应用程序数据库层的最佳方法的明智决策。
- en: Partitioning
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分区
- en: Earlier, we discussed sharding as a technique for distributing data across multiple
    database systems or clusters to achieve greater scalability and fault tolerance.
    Partitioning, on the other hand, is a related but distinct concept that involves
    dividing a large table within a single database system into smaller, more manageable
    pieces based on specific criteria. While both partitioning and sharding aim to
    improve performance and manageability, partitioning operates within a single database
    system and is transparent to the application, whereas sharding requires explicit
    management and coordination across multiple database systems.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 之前我们讨论了分片作为一种在多个数据库系统或集群之间分配数据的技术，以实现更大的可扩展性和容错性。另一方面，分区是一个相关但不同的概念，它涉及根据特定标准将单个数据库系统中的大表划分为更小、更易于管理的部分。虽然分区和分片都旨在提高性能和管理性，但分区在单个数据库系统内操作，对应用程序是透明的，而分片则需要跨多个数据库系统进行显式管理和协调。
- en: Partitioning is a technique for managing large datasets in a database by splitting
    the data into smaller, more manageable pieces. This approach can help improve
    the performance, maintainability, and scalability of your SaaS application’s database
    layer. Partitioning can be applied at both the table and index level, depending
    on the specific database system being used.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 分区是一种通过将数据拆分为更小、更易于管理的部分来管理数据库中大型数据集的技术。这种方法可以帮助提高您SaaS应用程序数据库层的性能、可维护性和可扩展性。分区可以在表和索引级别应用，具体取决于所使用的特定数据库系统。
- en: 'There are two primary types of partitioning to consider when scaling your database:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在扩展数据库时，需要考虑两种主要的分区类型：
- en: '**Horizontal partitioning**: As discussed earlier in the sharding section,
    horizontal partitioning involves splitting a table’s rows into smaller subsets
    based on specific criteria, such as a range of values or a hashing function. Each
    partition contains a distinct subset of rows and can be stored on separate database
    servers or tablespaces, which can improve performance by allowing parallel processing
    and reducing contention.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**水平分区**：如前所述，水平分区涉及根据特定标准（如值范围或哈希函数）将表行拆分为更小的子集。每个分区包含行的一个独特子集，可以存储在单独的数据库服务器或表空间中，这可以通过允许并行处理和减少竞争来提高性能。'
- en: '**Vertical partitioning**: In vertical partitioning, the table’s columns are
    split into smaller subsets, with each partition containing a subset of the columns.
    This approach can be particularly useful for large tables with many columns or
    when specific columns are frequently accessed together. Vertical partitioning
    can help reduce the amount of **input/output** (**I/O**) required to fetch data,
    thus improving query performance.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**垂直分区**：在垂直分区中，表的列被拆分为更小的子集，每个分区包含列的一个子集。这种方法对于具有许多列的大表或特定列经常一起访问的情况特别有用。垂直分区可以帮助减少获取数据所需的**输入/输出**（**I/O**）量，从而提高查询性能。'
- en: 'When implementing partitioning, several factors should be taken into account:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现分区时，应考虑以下几个因素：
- en: '**Partitioning key**: Choose an appropriate partitioning key that provides
    a balanced distribution of data across the partitions. A poorly chosen key may
    lead to skewed data distribution and negatively impact performance.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分区键**：选择一个合适的分区键，以确保数据在分区之间得到平衡分布。选择不当的键可能会导致数据分布不均，从而对性能产生负面影响。'
- en: '**Partitioning scheme**: Determine the most suitable partitioning scheme for
    your data based on factors such as data access patterns, query performance requirements,
    and maintenance considerations.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分区方案**：根据数据访问模式、查询性能要求和维护考虑等因素，确定最适合您数据的最合适的分区方案。'
- en: '**Data management**: Implement data management strategies, such as partition
    maintenance, to ensure that your partitions remain optimized and up to date. This
    may involve tasks such as adding or merging partitions, reorganizing partitions,
    or updating partition statistics.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据管理**：实施数据管理策略，例如分区维护，以确保您的分区保持优化并保持最新。这可能包括添加或合并分区、重新组织分区或更新分区统计信息等任务。'
- en: '**Query optimization**: Optimize your queries to take advantage of partitioning,
    using features such as partition elimination and partition-wise joins, which can
    significantly improve query performance.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**查询优化**：优化您的查询以利用分区，使用如分区消除和分区内连接等特性，这些特性可以显著提高查询性能。'
- en: Partitioning is an effective technique for managing large datasets and improving
    the performance and scalability of your SaaS application’s database layer. By
    understanding the different types of partitioning and their associated considerations,
    you can implement partitioning strategies that optimize query performance, facilitate
    data management, and enable your database to scale as your application grows.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 分区是一种有效的技术，用于管理大型数据集并提高SaaS应用程序数据库层的性能和可伸缩性。通过了解不同类型的分区及其相关考虑因素，您可以实施优化查询性能、便于数据管理和使数据库随着应用程序的增长而扩展的分区策略。
- en: Caching
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缓存
- en: Caching is a technique used to improve the performance and responsiveness of
    a SaaS application by storing frequently used data or the results of resource-intensive
    operations in a temporary storage area known as a cache. By using a cache, the
    application can quickly retrieve the data without having to recompute or re-fetch
    it from the database, thus reducing the load on the database and minimizing response
    times.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存是一种用于通过在称为缓存的临时存储区域中存储频繁使用的数据或资源密集型操作的结果来提高SaaS应用程序性能和响应性的技术。通过使用缓存，应用程序可以快速检索数据，而无需重新计算或从数据库中重新获取，从而减少数据库的负载并最小化响应时间。
- en: 'There are several caching strategies that you can employ to optimize your SaaS
    application’s database performance:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以采用几种缓存策略来优化SaaS应用程序的数据库性能：
- en: '**In-memory caching**: This approach involves storing frequently accessed data
    in the application server’s memory, allowing for faster data retrieval. In-memory
    caching can be implemented using built-in .NET caching mechanisms or third-party
    libraries such as Redis.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内存缓存**：这种方法涉及将频繁访问的数据存储在应用程序服务器的内存中，从而允许更快的数据检索。内存缓存可以使用内置的.NET缓存机制或第三方库，如Redis来实现。'
- en: '**Distributed caching**: In a distributed caching setup, the cache is stored
    across multiple servers, often using a dedicated caching service such as Redis
    or Memcached. This approach is particularly useful for large-scale applications,
    as it allows the cache to scale horizontally and maintain consistency across multiple
    application servers.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分布式缓存**：在分布式缓存设置中，缓存存储在多个服务器上，通常使用专门的缓存服务，如Redis或Memcached。这种方法对于大规模应用程序特别有用，因为它允许缓存水平扩展并保持多个应用程序服务器之间的一致性。'
- en: '**Database caching**: Database caching involves using built-in caching mechanisms
    provided by the database system itself, such as SQL Server’s buffer cache or Azure
    SQL Database’s in-memory **online transaction processing** (**OLTP**) feature.
    This approach helps optimize query performance by reducing the time needed to
    fetch data from disk.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据库缓存**：数据库缓存涉及使用数据库系统本身提供的内置缓存机制，例如SQL Server的缓冲区缓存或Azure SQL数据库的内存**在线事务处理**（**OLTP**）功能。这种方法通过减少从磁盘获取数据所需的时间来帮助优化查询性能。'
- en: '**Query result caching**: By caching the results of frequently executed queries,
    you can reduce the need for repeated database queries and improve performance.
    This can be achieved using application-level caching or by leveraging database-level
    caching features, such as SQL Server’s Query Store.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**查询结果缓存**：通过缓存频繁执行的查询的结果，可以减少对数据库重复查询的需求并提高性能。这可以通过应用级缓存或利用数据库级缓存功能来实现，例如SQL
    Server的查询存储功能。'
- en: 'When implementing caching, it’s essential to consider the following factors:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在实施缓存时，以下因素是至关重要的：
- en: '**Cache invalidation**: Determine when and how cached data should be invalidated
    or updated to ensure the application serves accurate and up-to-date information'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓存失效**：确定何时以及如何使缓存数据失效或更新，以确保应用程序提供准确和最新的信息。'
- en: '**Cache expiration**: Define appropriate expiration policies for cached data
    to prevent stale data from being served to users and to optimize cache usage'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓存过期**：为缓存数据定义适当的过期策略，以防止向用户提供过时数据并优化缓存使用。'
- en: '**Cache granularity**: Choose the appropriate level of granularity for caching,
    balancing the need for performance improvements against the potential complexity
    of managing fine-grained cache entries'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓存粒度**：选择适当的缓存粒度，平衡性能改进的需求与精细粒度缓存条目管理的潜在复杂性。'
- en: '**Monitoring and metrics**: Implement monitoring and metrics to track cache
    performance, hit rates, and resource usage, allowing you to optimize caching strategies
    and make informed decisions about capacity planning and scaling'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控和指标**：实施监控和指标以跟踪缓存性能、命中率以及资源使用情况，这使您能够优化缓存策略，并就容量规划和扩展做出明智的决策。'
- en: Caching is a powerful technique for improving the performance and scalability
    of your SaaS application’s database layer. By understanding the various caching
    strategies and their associated considerations, you can effectively reduce database
    load, minimize response times, and provide a better overall experience for your
    users.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存是提高您的SaaS应用程序数据库层性能和可扩展性的强大技术。通过了解各种缓存策略及其相关考虑因素，您可以有效地减少数据库负载，最小化响应时间，并为用户提供更好的整体体验。
- en: Indexing and query optimization
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 索引和查询优化
- en: We touched on this in the database chapter earlier in this book. Indexing and
    query optimization are essential aspects of scaling your SaaS application’s database,
    as they help ensure that your database queries run efficiently and minimize the
    impact on performance. Inefficient queries can have an enormous impact on the
    performance of an application and can also significantly increase the cost of
    the cloud resources running the database. It is doubly important to get this right!
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本书的数据库章节中已经提到了这一点。索引和查询优化是扩展您的SaaS应用程序数据库的关键方面，因为它们有助于确保您的数据库查询运行高效，并最小化对性能的影响。低效的查询可能会对应用程序的性能产生巨大影响，并可能显著增加运行数据库的云资源成本。正确处理这一点尤为重要！
- en: An index is a database object that helps speed up the retrieval of rows from
    a table by providing a more efficient access path to the data. Indexes can be
    created on one or more columns of a table, and they enable the database engine
    to quickly locate the required rows without having to perform a full table scan.
    Creating the right indexes for your application can significantly improve query
    performance and reduce the load on the database.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 索引是一种数据库对象，它通过提供更有效的数据访问路径来帮助加快从表中检索行，从而提高检索速度。可以在表的一个或多个列上创建索引，并且它们使数据库引擎能够快速定位所需的行，而无需执行完整的表扫描。为您的应用程序创建正确的索引可以显著提高查询性能并减少数据库负载。
- en: 'Here are the types of indexes:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是索引的类型：
- en: '**Clustered index**: A clustered index determines the physical order of data
    storage in a table. There can be only one clustered index per table, and it can
    significantly improve the performance of queries that retrieve data in the order
    defined by the index'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**聚集索引**：聚集索引确定表中数据存储的物理顺序。每个表只能有一个聚集索引，它可以显著提高按索引定义的顺序检索数据的查询性能。'
- en: '**Non-clustered index**: A non-clustered index stores a separate copy of the
    indexed columns, along with a reference to the corresponding rows in the table.
    You can create multiple non-clustered indexes per table, and they can help improve
    the performance of queries that filter, sort, or join data based on the indexed
    columns'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**非聚集索引**：非聚集索引存储索引列的单独副本，以及对应表中行的引用。您可以在每个表上创建多个非聚集索引，并且它们可以帮助提高基于索引列进行筛选、排序或连接数据的查询性能。'
- en: '**Columnstore index**: A columnstore index stores data in a columnar format,
    which can provide significant performance improvements for analytical queries
    and large-scale data aggregation tasks. Columnstore indexes are particularly well-suited
    for data warehousing and reporting scenarios'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**列存储索引**：列存储索引以列格式存储数据，这可以为分析查询和大规模数据聚合任务提供显著的性能改进。列存储索引特别适合数据仓库和报告场景。'
- en: 'As well as indexing, optimizing your queries is an important aspect of database
    performance tuning, as it ensures that your application retrieves data from the
    database efficiently. Some techniques for query optimization include the following:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 除了索引之外，优化您的查询是数据库性能调优的重要方面，因为它确保您的应用程序能够高效地从数据库中检索数据。以下是一些查询优化的技术：
- en: '`SELECT` statements with specific columns rather than `SELECT *`'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用特定列的`SELECT`语句而不是`SELECT *`
- en: '**Utilize indexes**: Ensure that your queries take advantage of existing indexes
    and consider creating additional indexes to support frequently executed queries'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**利用索引**：确保您的查询利用现有的索引，并考虑创建额外的索引以支持频繁执行的查询。'
- en: '`LIMIT`, `OFFSET`, or `TOP` clauses to restrict the number of rows returned
    by a query, which can help reduce the amount of data transferred and processed
    by the application'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `LIMIT`、`OFFSET` 或 `TOP` 子句来限制查询返回的行数，这有助于减少应用程序传输和处理的请求数据量。
- en: '`INNER JOIN` or `OUTER JOIN`, based on your data requirements'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据 `INNER JOIN` 或 `OUTER JOIN` 的数据需求。
- en: '**Analyze query plans**: Use tools such as SQL Server’s Query Analyzer or Azure
    SQL Database’s Query Performance Insight to analyze query execution plans and
    identify potential bottlenecks or inefficiencies'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分析查询计划**：使用诸如 SQL Server 的查询分析器或 Azure SQL 数据库的查询性能洞察等工具来分析查询执行计划，并识别潜在的瓶颈或不效率。'
- en: Indexing and query optimization play a crucial role in improving the performance
    and scalability of your SaaS application’s database layer. By understanding the
    different types of indexes and employing effective query optimization techniques,
    you can ensure that your application retrieves data efficiently, minimizing the
    impact on database performance and providing a better user experience.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 索引和查询优化在提高您的 SaaS 应用程序数据库层的性能和可扩展性方面发挥着至关重要的作用。通过了解不同类型的索引并采用有效的查询优化技术，您可以确保应用程序高效地检索数据，最小化对数据库性能的影响，并提供更好的用户体验。
- en: Data archiving and retention
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据存档和保留
- en: As your SaaS application grows, the volume of data stored in your database will
    inevitably increase, potentially leading to slower performance and higher storage
    costs. Implementing a data archiving and retention strategy can help you manage
    the growth of your data while ensuring that your application remains responsive
    and cost-effective.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 随着您的 SaaS 应用程序的增长，数据库中存储的数据量必然会增加，这可能导致性能下降和更高的存储成本。实施数据存档和保留策略可以帮助您管理数据增长，同时确保您的应用程序保持响应和成本效益。
- en: Data archiving involves moving historical or infrequently accessed data from
    your primary database to a separate, more cost-effective storage system. This
    process allows you to maintain the performance of your primary database by reducing
    the amount of data it needs to manage and query. Archived data can still be accessed
    when needed, albeit at a potentially slower rate, and can be used for reporting,
    analytics, or compliance purposes.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 数据存档涉及将历史数据或很少访问的数据从您的主数据库移动到单独的、更具成本效益的存储系统。此过程通过减少主数据库需要管理和查询的数据量，从而允许您保持主数据库的性能。存档数据在需要时仍然可以访问，尽管可能速度较慢，并且可用于报告、分析或合规目的。
- en: 'When implementing a data archiving strategy, consider the following factors:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在实施数据存档策略时，考虑以下因素：
- en: '**Identify the data to be archived**: Determine which data can be safely moved
    to an archive without impacting your application’s functionality or user experience.
    This may include historical transaction data, completed projects, or inactive
    user accounts.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**确定要存档的数据**：确定哪些数据可以安全地移动到存档中，而不会影响应用程序的功能或用户体验。这可能包括历史交易数据、已完成的项目或非活跃用户账户。'
- en: '**Choose the appropriate storage solution**: Select a storage solution that
    meets your cost, performance, and compliance requirements, such as Azure Blob
    Storage, Azure Data Lake, or other archival storage services.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选择合适的存储解决方案**：选择满足您的成本、性能和合规要求的存储解决方案，例如 Azure Blob 存储、Azure 数据湖或其他存档存储服务。'
- en: '**Automate the archiving process**: Implement a process to periodically move
    eligible data from your primary database to the archival storage system, ensuring
    that your data remains up-to-date and your primary database stays lean.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化存档过程**：实施一个过程，定期将合格数据从主数据库移动到存档存储系统，确保您的数据保持最新，主数据库保持精简。'
- en: Data retention is the practice of defining how long data should be stored in
    your database or archival storage system before it is permanently deleted. A well-defined
    data retention policy helps you manage storage costs, comply with data protection
    regulations, and reduce the risk of data breaches.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 数据保留是在数据库或存档存储系统中定义数据在永久删除之前应存储多长时间的实践。一个定义良好的数据保留策略可以帮助您管理存储成本，遵守数据保护法规，并降低数据泄露的风险。
- en: 'When developing a data retention policy, consider the following factors:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在制定数据保留策略时，考虑以下因素：
- en: '**Understand your legal and regulatory obligations**: Determine the minimum
    and maximum retention periods for different types of data based on your industry,
    jurisdiction, and any applicable regulations, such as GDPR or HIPAA.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**了解您的法律和监管义务**：根据您的行业、管辖区域以及任何适用的法规（如GDPR或HIPAA），确定不同类型数据的最低和最高保留期限。'
- en: '**Define retention periods based on business requirements**: Establish retention
    periods for each type of data based on your business needs, taking into account
    factors such as data value, access frequency, and storage costs.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**根据业务需求定义保留期限**：根据您的业务需求，为每种类型的数据建立保留期限，考虑数据价值、访问频率和存储成本等因素。'
- en: '**Implement data deletion processes**: Develop processes to automatically delete
    data that has reached the end of its retention period, ensuring that your data
    storage remains compliant with your retention policy.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实施数据删除流程**：开发流程以自动删除已达到保留期限结束的数据，确保您的数据存储符合您的保留政策。'
- en: A well-executed data archiving and retention strategy can help you manage the
    growth of your SaaS application’s data while maintaining database performance
    and controlling storage costs. By carefully considering which data to archive,
    selecting the appropriate storage solutions, and implementing a clear data retention
    policy, you can ensure that your application remains scalable and cost-effective
    as it grows.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '一个执行良好的数据归档和保留策略可以帮助您在保持数据库性能和控制存储成本的同时，管理SaaS应用程序数据的增长。通过仔细考虑哪些数据需要归档，选择适当的存储解决方案，并实施明确的数据保留政策，您可以确保随着应用程序的增长，您的应用程序保持可扩展性和成本效益。 '
- en: Scaling the database is a critical aspect of ensuring the success and growth
    of your SaaS application. As your user base grows and the volume of data increases,
    it’s essential to implement strategies that will help you maintain performance,
    reliability, and cost-effectiveness.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展数据库是确保您的SaaS应用程序成功和增长的关键方面。随着用户基础的扩大和数据量的增加，实施有助于您保持性能、可靠性和成本效益的策略至关重要。
- en: In this section, we covered various techniques and best practices for scaling
    your database, including sharding, horizontal and vertical scaling, caching, partitioning,
    data archiving and retention, monitoring, and performance tuning. Each of these
    approaches has its own advantages and trade-offs, and the specific combination
    of techniques that work best for your application will depend on your unique requirements
    and constraints.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们介绍了各种技术和最佳实践，用于扩展您的数据库，包括分片、水平扩展和垂直扩展、缓存、分区、数据归档和保留、监控以及性能调整。每种方法都有其自身的优势和权衡，最适合您应用程序的具体技术组合将取决于您的独特需求和限制。
- en: As you continue to build and scale your SaaS application, keep these strategies
    in mind and continue to evaluate and adjust your approach as needed. By proactively
    addressing the challenges of scaling your database and adopting the right mix
    of techniques, you can ensure that your application remains performant, reliable,
    and cost-effective, providing a high-quality experience for your growing user
    base.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在您继续构建和扩展SaaS应用程序的过程中，请记住这些策略，并根据需要持续评估和调整您的做法。通过积极应对数据库扩展的挑战并采用正确的技术组合，您可以确保您的应用程序保持高性能、可靠性和成本效益，为不断增长的用户群体提供高质量的服务。
- en: Scaling the API
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展API
- en: In this section, we will explore the specific considerations for scaling the
    API in your SaaS application. A well-designed API is crucial for maintaining the
    performance, reliability, and flexibility of your application as it grows. As
    you have already built the Good Habits demo application and have implemented a
    microservice architecture with WebAPI, Ocelot as the API gateway, and RabbitMQ
    for asynchronous communication, you have laid a strong foundation for scaling
    your API! However, there are additional aspects you need to consider to ensure
    that your API remains responsive and efficient as the demands on your system increase.
    We will discuss various strategies and best practices, such as load balancing,
    API versioning, rate limiting, caching, and monitoring. By understanding and implementing
    these techniques, you can effectively scale your API to meet the needs of your
    growing user base and continue to deliver a high-quality experience for your customers.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨在SaaS应用中扩展API的具体考虑因素。一个设计良好的API对于保持应用在增长过程中的性能、可靠性和灵活性至关重要。既然你已经构建了Good
    Habits演示应用，并实现了包含WebAPI、Ocelot作为API网关和RabbitMQ用于异步通信的微服务架构，你已经为API的扩展奠定了坚实的基础！然而，你还需要考虑其他方面，以确保随着系统需求的增加，你的API仍然能够保持响应性和高效性。我们将讨论各种策略和最佳实践，例如负载均衡、API版本控制、速率限制、缓存和监控。通过理解和实施这些技术，你可以有效地扩展API以满足不断增长的用户群体的需求，并继续为你的客户提供高质量的服务体验。
- en: Load balancing and API gateway optimization
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 负载均衡和API网关优化
- en: Load balancing is a crucial aspect of scaling your API, as it helps distribute
    incoming requests evenly across your available resources, ensuring that no single
    instance becomes a bottleneck. By implementing load balancing and optimizing your
    API gateway, you can improve the performance and reliability of your API as your
    application scales.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 负载均衡是扩展API的关键方面，因为它有助于将传入请求均匀地分配到可用资源中，确保没有单个实例成为瓶颈。通过实施负载均衡和优化API网关，你可以提高API的性能和可靠性，随着应用的扩展。
- en: 'Here are a few load-balancing strategies that you may want to consider:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些你可能想要考虑的负载均衡策略：
- en: '**Round robin**: This distributes requests evenly across all instances of your
    API, regardless of their current load or response time. This approach is simple
    and easy to implement but may not account for differences in instance performance
    or capacity.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**轮询**：这种策略将请求均匀地分配到API的所有实例中，无论它们的当前负载或响应时间如何。这种方法简单易行，但可能没有考虑到实例性能或容量的差异。'
- en: '**Least connections**: This routes requests to the instance with the fewest
    active connections. This strategy helps ensure that instances with fewer connections
    can handle more requests, potentially improving overall performance.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最少连接数**：这种策略将请求路由到活动连接最少的实例。这种策略有助于确保具有较少连接的实例可以处理更多请求，从而可能提高整体性能。'
- en: '**Latency-based**: This directs requests to the instance with the lowest latency
    or response time. This approach can help minimize the impact of network latency
    on your API’s performance.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于延迟**：这种策略将请求路由到延迟最低或响应时间最短的实例。这种方法可以帮助最小化网络延迟对API性能的影响。'
- en: 'There is a lot involved in API gateway optimization, and it’s outside the scope
    of this book to go into detail. Here are some general points to consider:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: API网关优化涉及很多方面，但这本书的范围不包括详细探讨。以下是一些需要考虑的一般性要点：
- en: '**Connection pooling**: By reusing existing connections between the API gateway
    and your API instances, you can reduce the overhead of establishing new connections,
    resulting in improved performance and reduced latency'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**连接池**：通过重用API网关和API实例之间的现有连接，你可以减少建立新连接的开销，从而提高性能并降低延迟'
- en: '**Caching**: Implement caching at the API gateway level to store and serve
    frequently accessed data or responses, reducing the load on your API instances
    and improving response times'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓存**：在API网关级别实现缓存，以存储和提供频繁访问的数据或响应，减少对API实例的负载并提高响应时间'
- en: '**Rate limiting**: Enforce rate limits at the API gateway level to protect
    your API instances from being overwhelmed by excessive requests from individual
    clients or malicious attacks'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**速率限制**：在API网关级别实施速率限制，以保护API实例免受单个客户端或恶意攻击带来的过多请求的影响'
- en: '**Security**: Implement security features such as authentication, authorization,
    and API key management at the gateway level, offloading these responsibilities
    from your API instances and improving their performance'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全性**：在网关级别实现安全功能，如身份验证、授权和API密钥管理，将这些责任从您的API实例中卸载，从而提高其性能'
- en: By employing load-balancing strategies and optimizing your API gateway, you
    can efficiently distribute incoming requests, improve the performance and reliability
    of your API, and ensure a high-quality experience for your growing user base.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 通过采用负载均衡策略和优化您的API网关，您可以有效地分配传入请求，提高API的性能和可靠性，并确保不断增长的用户群获得高质量的体验。
- en: API versioning and backward compatibility
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API版本化和向后兼容性
- en: As your SaaS application evolves and new features are added, changes to the
    API may be necessary. Ensuring backward compatibility and managing API versioning
    are essential aspects of scaling your API to maintain a consistent and reliable
    experience for clients and users.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 随着您的SaaS应用程序的演变和新功能的添加，API的变更可能是必要的。确保向后兼容性和管理API版本化是扩展API以保持客户和用户一致可靠体验的关键方面。
- en: 'We have covered API versioning strategies in the API chapter. Here’s a quick
    reminder of some of the key strategies:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在API章节中介绍了API版本化策略。以下是一些关键策略的快速提醒：
- en: '`/v1/users` or `/v2/users`. This approach is simple and easy for clients to
    understand but may lead to cluttered URIs and requires careful management of resources
    and routing'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/v1/users` 或 `/v2/users`。这种方法简单易懂，但对于客户来说可能导致URI杂乱，并需要仔细管理资源和路由'
- en: '`/users?version=1` or `/users?version=2`. This method keeps the URI clean and
    allows for more flexible versioning but it may be less intuitive for clients'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/users?version=1` 或 `/users?version=2`。这种方法使URI保持简洁，并允许更灵活的版本化，但对于客户来说可能不太直观'
- en: '`X-API-Version: 1` or `X-API-Version: 2`. This approach keeps the URI clean
    and separates versioning concerns from resource representation but may be less
    discoverable for clients'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`X-API-Version: 1` 或 `X-API-Version: 2`。这种方法使URI保持简洁，并将版本化问题与资源表示分离，但对于客户来说可能不太容易被发现'
- en: 'Once an API is in production, it is very important not to introduce any breaking
    changes that may cause errors in any consuming application. To make sure that
    the API remains backward compatible, you could consider the following:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦API投入生产，非常重要的一点是不要引入任何可能导致任何消费应用程序出现错误的破坏性变更。为了确保API保持向后兼容，您可以考虑以下措施：
- en: '**Avoid breaking changes**: Whenever possible, design your API changes to be
    backward compatible, allowing existing clients to continue functioning without
    modifications'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**避免破坏性变更**：尽可能设计您的API变更以实现向后兼容，允许现有客户在无需修改的情况下继续运行'
- en: '**Deprecation strategy**: If breaking changes are necessary, provide a clear
    deprecation strategy and timeline to inform clients when older API versions will
    no longer be supported'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**弃用策略**：如果需要引入破坏性变更，请提供一个清晰的弃用策略和时间表，以便通知客户何时将不再支持旧版本的API'
- en: '**Graceful degradation**: Implement fallback mechanisms for new API features,
    allowing clients that do not support the latest version to continue functioning
    with reduced functionality or features'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优雅降级**：为新API功能实现回退机制，允许不支持最新版本的客户端以减少功能或特性的方式继续运行'
- en: '**Documentation**: Maintain clear and comprehensive documentation for each
    API version, helping clients understand the differences between versions and the
    migration process'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文档**：为每个API版本维护清晰和全面的文档，帮助客户了解版本之间的差异以及迁移过程'
- en: By managing API versioning and ensuring backward compatibility, you can minimize
    disruptions for your clients and users while continuing to evolve and scale your
    SaaS application. This approach allows you to maintain a consistent and reliable
    experience as your API grows and adapts to changing requirements.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 通过管理API版本化和确保向后兼容性，您可以在继续演进和扩展SaaS应用程序的同时，最小化对客户和用户的干扰。这种方法允许您在API增长和适应不断变化的需求时，保持一致和可靠的体验。
- en: Rate limiting and throttling
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 速率限制和节流
- en: As your SaaS application scales and attracts more users, the number of requests
    to your API will also grow. Implementing rate limiting and throttling strategies
    helps prevent abuse, protect your API from excessive load, and ensure fair usage
    among clients.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 随着您的SaaS应用程序扩展并吸引更多用户，对API的请求数量也会增加。实施速率限制和节流策略有助于防止滥用，保护API免受过度负载的影响，并确保客户之间公平使用。
- en: 'If your application is coming under intermittent heavy load, you could consider
    the following rate-limiting strategies:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的应用程序正在面临间歇性的重负载，你可以考虑以下速率限制策略：
- en: '**Global rate limiting**: This sets the maximum number of requests allowed
    across all clients within a specified time period. This approach can help protect
    your API from excessive load but may not account for individual client usage patterns.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全局速率限制**：这将在指定时间周期内设置所有客户端允许的最大请求数量。这种方法可以帮助保护你的API免受过度负载的影响，但可能无法考虑个别客户端的使用模式。'
- en: '**Per-client rate limiting**: Set a maximum number of requests allowed for
    each client within a specified time period. This strategy can help ensure fair
    usage among clients but may require more sophisticated tracking and enforcement
    mechanisms.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**按客户端速率限制**：在指定时间周期内为每个客户端设置允许的最大请求数量。这种策略可以帮助确保客户端之间的公平使用，但可能需要更复杂的跟踪和执行机制。'
- en: '**Tiered rate limiting**: Offer different rate limits based on client subscription
    levels or access tiers. This method allows you to provide differentiated service
    levels and encourages clients to upgrade to higher tiers for better API access.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分层速率限制**：根据客户端订阅级别或访问层提供不同的速率限制。这种方法允许你提供差异化的服务级别，并鼓励客户端升级到更高层以获得更好的API访问。'
- en: 'In addition to the preceding rate-limiting strategies, you could consider the
    following throttling techniques:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 除了前面提到的速率限制策略，你还可以考虑以下节流技术：
- en: '**Leaky bucket**: Implement an algorithm that accumulates incoming requests
    and processes them at a fixed rate. This approach smooths out request spikes and
    ensures that your API does not become overwhelmed.'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**漏桶**：实现一个算法，该算法累积传入的请求并以固定速率处理它们。这种方法可以平滑请求峰值，并确保你的API不会过载。'
- en: '**Token bucket**: Use tokens to regulate the rate at which clients can make
    requests. Clients must have a token to make a request, and tokens are generated
    at a fixed rate. This method allows for more flexibility and adaptability in handling
    request bursts.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**令牌桶**：使用令牌来调节客户端可以发起请求的速率。客户端必须拥有令牌才能发起请求，并且令牌以固定速率生成。这种方法允许在处理请求突发时具有更大的灵活性和适应性。'
- en: '**Exponential backoff**: Encourage clients to progressively increase the time
    between retries when they encounter rate limits or errors. This technique helps
    distribute retries over time, reducing the chance of overwhelming your API.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**指数退避**：鼓励客户端在遇到速率限制或错误时逐渐增加重试之间的时间间隔。这种技术有助于在时间上分散重试，从而降低压倒你的API的机会。'
- en: By implementing rate limiting and throttling strategies, you can protect your
    API from excessive load, prevent abuse, and ensure a high-quality experience for
    your users. These techniques help maintain the performance and reliability of
    your API as your SaaS application grows and serves a larger user base.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 通过实施速率限制和节流策略，你可以保护你的API免受过度负载，防止滥用，并确保用户获得高质量的服务体验。这些技术有助于维护API的性能和可靠性，随着你的SaaS应用的增长和为更大的用户群体提供服务，这些技术尤为重要。
- en: Caching strategies for API performance
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API性能的缓存策略
- en: We have discussed caching at the database layer, and we will now cover caching
    at the API layer. Caching is an essential technique to improve the performance
    and responsiveness of your API, especially as your SaaS application scales. By
    storing and serving frequently accessed data or responses from the cache, you
    can reduce the load on your API instances and improve response times. Caching
    at the API layer means that there is no contact with the database layer at all,
    so the benefits are felt throughout the stack.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了数据库层的缓存，现在我们将介绍API层的缓存。缓存是一种提高API性能和响应性的基本技术，尤其是在你的SaaS应用扩展时。通过存储和提供频繁访问的数据或缓存中的响应，你可以减少API实例的负载并提高响应时间。在API层进行缓存意味着根本不与数据库层接触，因此整个堆栈都能感受到好处。
- en: 'The following are examples of caching strategies:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些缓存策略的示例：
- en: '**Client-side caching**: This encourages clients to cache API responses locally
    by providing appropriate cache-control headers (e.g., **Cache-Control**, **ETag**).
    This approach reduces the number of requests to your API and offloads caching
    responsibility to the clients.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户端缓存**：通过提供适当的缓存控制头（例如，**Cache-Control**，**ETag**），鼓励客户端在本地缓存API响应。这种方法减少了发送到你的API的请求数量，并将缓存责任转移到客户端。'
- en: '**Server-side caching**: This stores frequently accessed data or responses
    on the server-side, either in-memory or using an external caching service (e.g.,
    Redis or Memcached). This method can significantly improve the performance of
    your API by reducing the need for time-consuming data retrieval or processing.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务器端缓存**：这将在服务器端存储频繁访问的数据或响应，无论是在内存中还是在外部缓存服务（例如，Redis或Memcached）中。这种方法可以通过减少耗时数据检索或处理的需求，显著提高API的性能。'
- en: '**Edge caching**: This utilizes CDNs to cache and serve API responses closer
    to the clients. This approach can help reduce latency and improve response times,
    especially for clients located far from your API instances.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**边缘缓存**：这利用CDN在客户端附近缓存和提供API响应。这种方法可以帮助减少延迟并提高响应时间，特别是对于远离您的API实例的客户端。'
- en: '**Cache invalidation**: This implements strategies to invalidate cache entries
    when the underlying data changes, ensuring that clients receive up-to-date information.
    Techniques such as cache expiry, cache versioning, or event-driven cache invalidation
    can be employed to maintain data consistency.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓存失效**：这实现了在底层数据更改时使缓存条目失效的策略，确保客户端接收到的信息是最新的。可以采用缓存过期、缓存版本化或事件驱动缓存失效等技术来维护数据一致性。'
- en: By incorporating caching strategies into your API, you can improve performance,
    reduce latency, and minimize the load on your backend systems. As your SaaS application
    scales and serves more users, effective caching becomes increasingly important
    to ensure a high-quality experience for your clients and users.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将缓存策略集成到您的API中，您可以提高性能、减少延迟并最小化对后端系统的负载。随着您的SaaS应用程序扩展并服务于更多用户，有效的缓存变得越来越重要，以确保为您的客户和用户提供高质量体验。
- en: Asynchronous communication and message queuing
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 异步通信和消息队列
- en: SaaS applications are often complex and require computationally expensive API
    calls. These can negatively impact its performance and responsiveness, as well
    as sharply increase the cost of cloud resources. Implementing asynchronous processing
    and background jobs can help offload these tasks from the main API request/response
    cycle, ensuring a smooth experience for your users.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: SaaS应用程序通常很复杂，需要计算密集型的API调用。这些可能会对其性能和响应性产生负面影响，并急剧增加云资源的成本。实现异步处理和后台作业可以帮助从主API请求/响应周期中卸载这些任务，确保用户获得流畅的体验。
- en: 'In order to keep your application running smoothly, you could consider these
    asynchronous processing strategies and techniques for running jobs in the background:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持您的应用程序平稳运行，您可以考虑以下这些异步处理策略和技术，用于在后台运行作业：
- en: '**Message queues**: This utilizes message queues (e.g., RabbitMQ, Azure Service
    Bus) to decouple the API from processing tasks. Clients send requests to the API,
    which then pushes tasks onto a queue for processing by dedicated worker services.'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消息队列**：这利用消息队列（例如，RabbitMQ、Azure Service Bus）将API与处理任务解耦。客户端向API发送请求，然后API将任务推送到队列中，由专门的工人服务进行处理。'
- en: '**Event-driven architecture**: This implements an event-driven architecture
    to trigger processing based on specific events or actions within your system.
    This approach enables you to build scalable and resilient systems that can evolve
    with your application’s needs.'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件驱动架构**：这实现了一个基于特定事件或系统内操作的事件驱动架构来触发处理。这种方法使您能够构建可扩展且具有弹性的系统，这些系统可以随着您的应用程序需求的发展而发展。'
- en: '**Scheduled jobs**: This schedules background jobs to run at specific intervals,
    such as nightly data processing, weekly report generation, or daily cleanup tasks.
    This technique helps you distribute the load on your system more evenly over time.'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**计划任务**：这安排在特定间隔运行后台作业，例如夜间数据处理、每周报告生成或每日清理任务。这种技术有助于您在时间上更均匀地分配系统负载。'
- en: '**Priority queuing**: This assigns different priority levels to tasks in your
    background job queues, ensuring that critical tasks are processed first. This
    approach helps you manage system resources more effectively and improve the overall
    user experience.'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优先级队列**：这为后台作业队列中的任务分配不同的优先级级别，确保关键任务首先被处理。这种方法有助于您更有效地管理系统资源并提高整体用户体验。'
- en: '**Retry and fallback mechanisms**: This implements retry and fallback mechanisms
    for background jobs that may fail due to transient errors, such as network issues
    or temporary resource constraints. This technique helps ensure that tasks are
    eventually completed, and your system remains resilient to failures.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重试和回退机制**：这为可能因暂时性错误（如网络问题或临时资源限制）而失败的背景作业实现了重试和回退机制。这种技术有助于确保任务最终完成，并且您的系统对故障具有弹性。'
- en: By leveraging asynchronous processing and background jobs, you can offload resource-intensive
    tasks from your API, helping maintain its performance and responsiveness as your
    SaaS application scales. This approach enables you to deliver a high-quality experience
    to your users while efficiently managing system resources.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用异步处理和后台作业，您可以将资源密集型任务从API中卸载，帮助保持其性能和响应性，随着您的SaaS应用程序扩展。这种方法使您能够在高效管理系统资源的同时，为用户提供高质量的服务体验。
- en: Stateless and idempotent API design
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 无状态和幂等API设计
- en: Designing stateless and idempotent APIs is essential when scaling a SaaS application,
    as it ensures that your system is more predictable, easier to manage, and less
    prone to errors. In this section, we will explore statelessness and idempotency
    and their importance in API design for scalable applications.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在扩展SaaS应用程序时，设计无状态和幂等API至关重要，因为它确保您的系统更具可预测性、易于管理，并且更不容易出错。在本节中，我们将探讨无状态性和幂等性及其在可扩展应用程序API设计中的重要性。
- en: 'Stateless APIs do not maintain any client-specific state between requests,
    meaning each request is self-contained and independent of previous requests. Implementing
    stateless APIs provides several benefits, as listed here:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 无状态API在请求之间不维护任何客户端特定状态，这意味着每个请求都是自包含的，并且独立于之前的请求。实现无状态API提供了以下好处：
- en: '**Simplifies scaling**: Stateless APIs are more straightforward to scale horizontally
    since you can distribute requests across multiple instances without worrying about
    maintaining the session state'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简化扩展**：无状态API更容易进行横向扩展，因为您可以在多个实例之间分配请求，而无需担心维护会话状态'
- en: '**Improved reliability**: Stateless APIs are more resilient to failures, as
    any instance can handle a request without depending on the state of other instances'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提高可靠性**：无状态API对故障具有更强的抵抗力，因为任何实例都可以处理请求，而不依赖于其他实例的状态'
- en: '**Enhanced performance**: Stateless APIs can better utilize caching mechanisms,
    as responses are not dependent on the client-specific state'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**增强性能**：无状态API可以更好地利用缓存机制，因为响应不依赖于客户端特定的状态'
- en: 'To design stateless APIs, consider the following practices:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 要设计无状态API，请考虑以下实践：
- en: Avoid server-side sessions and, instead, use tokens (e.g., **JSON Web Token**
    (**JWT**)) to authenticate and authorize requests
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免服务器端会话，而是使用令牌（例如，**JSON Web Token**（JWT））来验证和授权请求
- en: Store any required state on the client side or in external storage, such as
    databases or caches
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在客户端或外部存储（如数据库或缓存）中存储任何所需的状态
- en: An idempotent API operation, when called multiple times with the same inputs,
    produces the same results and side effects as if it were called once. Designing
    idempotent APIs ensures that your system behaves predictably and is less prone
    to errors due to network retries, timeouts, or other issues.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 幂等API操作在多次调用时，如果使用相同的输入，将产生与只调用一次相同的结果和副作用。设计幂等API确保您的系统行为可预测，并且由于网络重试、超时或其他问题而导致的错误更少。
- en: 'To design idempotent APIs, consider the following practices:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 要设计幂等API，请考虑以下实践：
- en: Use appropriate HTTP methods, such as `GET`, `PUT`, and `DELETE`, which are
    inherently idempotent
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用适当的HTTP方法，例如`GET`、`PUT`和`DELETE`，这些方法本身是无状态的
- en: Implement idempotency keys or tokens for non-idempotent operations such as `POST`,
    allowing clients to safely retry requests without causing unintended side effects
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于非幂等操作，如`POST`，实现幂等键或令牌，允许客户端安全地重试请求，而不会造成意外的副作用
- en: Ensure that your API’s internal logic can handle repeated requests without creating
    duplicate records or performing unwanted actions
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保您的API内部逻辑可以处理重复请求，而不会创建重复记录或执行不希望的操作
- en: By designing stateless and idempotent APIs, you can build a more scalable, reliable,
    and predictable SaaS application. These design principles help ensure that your
    system can handle increased load and provide a high-quality experience for your
    users as your application grows.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 通过设计无状态和幂等API，您可以构建更可扩展、可靠和可预测的SaaS应用程序。这些设计原则有助于确保您的系统可以处理增加的负载，并在您的应用程序增长时为用户提供高质量的服务体验。
- en: Security and authentication at scale
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 规模化安全性和身份验证
- en: As your SaaS application grows, ensuring the security and proper authentication
    of your API become even more crucial. In earlier chapters, we discussed building
    authentication into your application. Scaling your application can introduce new
    security challenges, and it’s essential to implement robust security measures
    to protect your users’ data and maintain their trust. In this section, we will
    discuss key considerations and best practices for enhancing security and authentication
    when scaling your API.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 随着您的SaaS应用程序的增长，确保API的安全性和适当的身份验证变得更加关键。在早期章节中，我们讨论了将身份验证集成到您的应用程序中。扩展应用程序可能会引入新的安全挑战，因此实施强大的安全措施来保护用户数据和维持他们的信任至关重要。在本节中，我们将讨论在扩展API时增强安全和身份验证的关键考虑因素和最佳实践。
- en: Using a centralized authentication and authorization system, such as OAuth 2.0
    or OpenID Connect, allows you to manage user access to your API effectively. Implementing
    **single sign-on** (**SSO**) enables users to access multiple services within
    your application using a single set of credentials. Furthermore, utilizing an
    identity provider (such as Azure Active Directory) can offload the management
    of user identities and authentication processes, helping to ensure a secure and
    scalable solution.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 使用如OAuth 2.0或OpenID Connect之类的集中式身份验证和授权系统，您可以有效地管理用户对API的访问。实施**单点登录**（**SSO**）使用户能够使用一组凭据访问应用程序内的多个服务。此外，利用身份提供者（如Azure
    Active Directory）可以减轻对用户身份和身份验证流程的管理负担，有助于确保一个安全且可扩展的解决方案。
- en: Proper API key management is essential for maintaining the security of your
    API. This includes the generation, distribution, and revocation of API keys. Ensure
    that API keys have appropriate access levels and scopes to limit their usage to
    specific resources and actions. Regularly rotate API keys and encourage clients
    to do the same to reduce the risk of unauthorized access.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 正确的API密钥管理对于维护API的安全性至关重要。这包括API密钥的生成、分发和撤销。确保API密钥具有适当的访问级别和作用域，以限制其使用到特定的资源和操作。定期轮换API密钥，并鼓励客户端也这样做，以降低未经授权访问的风险。
- en: Use HTTPS for all API communications to protect data in transit and consider
    using technologies such as **HTTP Strict Transport Security** (**HSTS**) to enforce
    secure connections. Encrypt sensitive data at rest using strong encryption algorithms
    and key management practices. Implement proper data handling procedures to minimize
    the risk of data leaks or breaches.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 使用HTTPS进行所有API通信以保护传输中的数据，并考虑使用诸如**HTTP严格传输安全**（**HSTS**）等技术来强制执行安全连接。使用强大的加密算法和密钥管理实践在静态中对敏感数据进行加密。实施适当的数据处理程序以最大限度地降低数据泄露或违规的风险。
- en: Apply rate limiting and throttling policies for your logins to protect your
    API from abuse, **Denial of Service** (**DoS**) attacks, and excessive resource
    consumption. Customize rate limits based on factors such as user roles, API keys,
    or IP addresses to provide a fair and secure API experience.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 为登录应用速率限制和节流策略，以保护API免受滥用、**拒绝服务**（**DoS**）攻击和过度资源消耗。根据用户角色、API密钥或IP地址等因素自定义速率限制，以提供公平和安全的API体验。
- en: Conduct regular security audits and vulnerability assessments to identify potential
    weaknesses in your API and infrastructure. Establish a process for addressing
    identified security issues and continuously improve your security posture.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 定期进行安全审计和漏洞评估，以识别API和基础设施中可能存在的潜在弱点。建立处理识别出的安全问题的流程，并持续改进您的安全态势。
- en: By focusing on security and authentication when scaling your API, you can protect
    your users’ data, maintain their trust, and ensure the continued success of your
    SaaS application. Implementing robust security measures is essential to providing
    a secure and reliable API experience for your growing user base.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在扩展API时关注安全和身份验证，您可以保护用户数据，维持他们的信任，并确保您的SaaS应用程序持续成功。实施强大的安全措施对于为不断增长的用户群提供安全可靠的API体验至关重要。
- en: Scaling the API of your SaaS application is a critical aspect of ensuring the
    overall performance, reliability, and security of your system. By addressing key
    areas such as stateless and idempotent API design, load balancing, versioning,
    rate limiting, caching, asynchronous communication, and security, you can build
    a robust and scalable API that can handle the demands of a growing user base.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展您的SaaS应用的API是确保系统整体性能、可靠性和安全性的关键方面。通过解决诸如无状态和幂等API设计、负载均衡、版本控制、速率限制、缓存、异步通信和安全等方面的关键领域，您可以构建一个强大且可扩展的API，能够满足不断增长的用户群体的需求。
- en: Throughout this section, we have explored various techniques and best practices
    to ensure that your API can adapt to the increased demands of a successful SaaS
    application. By implementing these strategies, you not only enhance the performance
    and efficiency of your API but also ensure a consistent and secure experience
    for your users.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了各种技术和最佳实践，以确保您的API能够适应成功SaaS应用增加的需求。通过实施这些策略，您不仅提高了API的性能和效率，还确保了用户获得一致且安全的服务体验。
- en: As your application continues to grow, it’s essential to monitor and refine
    your API scaling strategies, adapting to new challenges and evolving requirements.
    By doing so, you will ensure the long-term success and sustainability of your
    SaaS application while providing a high-quality experience for your users.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 随着应用的持续增长，监控和优化您的API扩展策略，适应新的挑战和不断变化的需求至关重要。通过这样做，您将确保SaaS应用的长期成功和可持续性，同时为用户提供高质量的服务体验。
- en: Scaling the UI
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展UI
- en: Having covered database and API scaling, we will now look at scaling techniques
    for the UI layer. The UI is a critical component of your SaaS application, as
    it’s the layer that users directly interact with! The user’s impression of your
    entire application will be based on how much they enjoy (or do not enjoy) using
    your UI! Ensuring a smooth and responsive user experience as your application
    grows is essential for maintaining user satisfaction and engagement. In this section,
    we will discuss various techniques and best practices for scaling the UI layer,
    focusing on performance optimization, efficient management of static assets, and
    implementing effective caching strategies. Hopefully, these techniques will put
    a smile on your users’ faces and keep them coming back to your SaaS application!
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在覆盖了数据库和API扩展之后，我们现在将探讨UI层的扩展技术。UI是您SaaS应用的关键组件，因为它是用户直接与之交互的层！用户对您整个应用的印象将基于他们对使用您UI的喜爱程度（或不喜欢程度）！确保随着应用的增长，用户体验流畅且响应迅速，对于维持用户满意度和参与度至关重要。在本节中，我们将讨论扩展UI层的各种技术和最佳实践，重点关注性能优化、静态资产的效率管理以及实施有效的缓存策略。希望这些技术能让您的用户面带微笑，并持续回到您的SaaS应用中！
- en: Best practices for designing scalability and performance for the UI
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计可扩展性和性能的最佳实践
- en: Good design underpins all aspects of scaling the application, including good
    database design and sound architectural principles on the backend. Good design
    on the front end is multi-faceted, though, as the design must be technically sound
    and also a joy for the ends users to interact with.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 良好的设计是支撑应用扩展所有方面的基础，包括良好的数据库设计和后端稳健的架构原则。然而，前端的设计是多方面的，因为设计不仅要技术上可靠，还要让最终用户在使用时感到愉悦。
- en: Designing a performant and scalable UI is tricky, though. This involves designing
    the UI and **user experience** (**UX**) to adapt to the growing user base and
    the increasing complexity of your application. By adhering to best practices,
    you can provide a responsive, efficient, and enjoyable experience for your users.
    In this section, we will explore various UI and UX best practices to help you
    design a scalable UI.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 设计一个性能良好且可扩展的UI是复杂的。这涉及到设计UI和**用户体验**（**UX**）以适应不断增长的用户基础和应用的日益复杂性。通过遵循最佳实践，您可以为客户提供响应迅速、高效且愉悦的体验。在本节中，我们将探讨各种UI和UX最佳实践，以帮助您设计一个可扩展的UI。
- en: Keep the UI as simple and intuitive as possible to reduce the cognitive load
    on users. This sounds obvious and easy, but in practice, this can be incredibly
    challenging. Try to focus on core features, minimize visual clutter, and prioritize
    user workflows. A clean and straightforward UI can also help reduce the amount
    of processing and rendering required by the client, thus improving performance.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 尽可能使UI简单直观，以减少用户的心理负担。这听起来显然且简单，但在实践中，这可能极具挑战性。尝试专注于核心功能，最小化视觉杂乱，并优先考虑用户工作流程。简洁直观的UI还可以帮助减少客户端所需的处理和渲染量，从而提高性能。
- en: Ensure your application’s UI adapts seamlessly to different screen sizes, resolutions,
    and device types. Implement responsive design techniques such as fluid grids,
    flexible images, and CSS media queries to create a consistent experience across
    various devices. This approach improves usability and helps future-proof your
    application as new devices and screen sizes emerge.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您的应用程序的用户界面能够无缝适应不同的屏幕尺寸、分辨率和设备类型。实施响应式设计技术，如流体网格、灵活的图像和CSS媒体查询，以在各种设备上创建一致的用户体验。这种方法可以提高可用性，并帮助您的应用程序适应新设备和屏幕尺寸的出现。
- en: The UI is all that your users really see, and they will judge the performance
    of the entire application on the performance of the UI. Improve UI performance
    by optimizing rendering and reducing unnecessary re-renders. Techniques such as
    a virtual **Document Object Model** (**DOM**), debouncing, and throttling can
    help minimize the frequency of updates and the impact on performance. Additionally,
    consider using lighter-weight UI frameworks and libraries.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: UI是用户真正看到的全部，他们将以UI的性能来评判整个应用程序的性能。通过优化渲染和减少不必要的重渲染来提高UI性能。例如，使用虚拟**文档对象模型**（**DOM**）、防抖和节流等技术可以帮助最小化更新频率和对性能的影响。此外，考虑使用更轻量级的UI框架和库。
- en: Finally, always keep accessibility in mind. As your app user base grows, the
    number of differently abled individuals using the app will also grow proportionately.
    Design your application with accessibility in mind, ensuring that it can be used
    by individuals with various abilities and disabilities. This broadens your user
    base and makes your application more user-friendly and versatile. Utilize semantic
    HTML, **Assistive Rich Internet Applications** (**ARIA**) roles, and keyboard
    navigation to enhance accessibility.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，始终牢记可访问性。随着您的应用程序用户基础的扩大，使用应用程序的不同能力或残疾的人的数量也将相应增加。以可访问性为设计理念，确保应用程序可以被具有各种能力和残疾的个人使用。这扩大了您的用户基础，并使您的应用程序更加用户友好和多功能。利用语义HTML、**辅助富互联网应用程序**（**ARIA**）角色和键盘导航来增强可访问性。
- en: Optimizing static assets and bundling
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优化静态资源和打包
- en: Static assets, such as images, stylesheets, and JavaScript files, play a significant
    role in the performance and responsiveness of your UI. Properly optimizing and
    bundling these assets can lead to faster load times and a better overall UX, as
    well as reduce the load on your cloud resources. In this section, we will discuss
    several techniques for optimizing static assets and bundling them efficiently.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 静态资源，如图像、样式表和JavaScript文件，在您的UI性能和响应性方面发挥着重要作用。正确优化和打包这些资源可以缩短加载时间，提高整体UX，并减轻云资源的负载。在本节中，我们将讨论几种优化静态资源并高效打包的技术。
- en: Minifying your CSS and JavaScript files by removing unnecessary characters,
    spaces, and comments can significantly reduce their size. This, in turn, reduces
    the time required to download and parse these files. Additionally, compressing
    files using algorithms such as Gzip or Brotli can further decrease file sizes,
    resulting in faster load times.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 通过删除不必要的字符、空格和注释来精简CSS和JavaScript文件可以显著减小其大小。这反过来又减少了下载和解析这些文件所需的时间。此外，使用Gzip或Brotli等算法压缩文件可以进一步减小文件大小，从而加快加载时间。
- en: Optimize images to reduce their file sizes without compromising quality. Use
    appropriate formats (e.g., JPEG for photographs, PNG for graphics with transparency,
    and SVG for vector images) and ensure images are compressed to minimize their
    file sizes. Also, leverage responsive images and serve different image sizes based
    on the user’s device and screen resolution.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 优化图像以减小其文件大小，同时不牺牲质量。使用适当的格式（例如，JPEG用于照片，PNG用于具有透明度的图形，SVG用于矢量图像），并确保图像被压缩以最小化其文件大小。此外，利用响应式图像，根据用户的设备和屏幕分辨率提供不同的图像大小。
- en: Combine multiple CSS and JavaScript files into a single bundle to reduce the
    number of HTTP requests made by the client. This helps improve page load times
    and can be done using build tools such as webpack, Rollup, or Parcel. You can
    also split your bundles into smaller chunks using code-splitting techniques to
    load only the necessary code for a particular page or feature.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 将多个 CSS 和 JavaScript 文件合并成一个单独的包，以减少客户端发出的 HTTP 请求次数。这有助于提高页面加载时间，可以使用 webpack、Rollup
    或 Parcel 等构建工具来实现。您还可以使用代码拆分技术将包拆分成更小的块，以便只加载特定页面或功能的必要代码。
- en: Just as in the database and API layer, we can utilize caching to optimize the
    UI as well. Set appropriate cache headers for your static assets to allow browsers
    to cache these files, reducing the need to download them again on subsequent visits.
    Configure cache control headers such as Cache-Control and ETag to ensure efficient
    caching behavior. This reduces the load on your server and improves the UX by
    delivering assets more quickly.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在数据库和 API 层一样，我们可以利用缓存来优化 UI。为您的静态资产设置适当的缓存头，以便浏览器缓存这些文件，减少在后续访问时再次下载的需求。配置缓存控制头，如
    Cache-Control 和 ETag，以确保高效的缓存行为。这可以减轻服务器的负载，并通过更快地交付资产来改善用户体验。
- en: CDN serves your static assets from geographically distributed servers. This
    reduces latency by serving assets from a server that is closer to the user’s location.
    CDNs also help to balance the load on your servers, improving performance and
    scalability.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: CDN 从地理位置分布的服务器上提供您的静态资产。通过从更靠近用户位置的服务器上提供资产来减少延迟。CDN 还有助于平衡服务器的负载，提高性能和可伸缩性。
- en: Implement HTTP/2, which is the latest version of the HTTP protocol, to enable
    faster and more efficient communication between the client and the server. HTTP/2
    provides benefits such as multiplexing, header compression, and server push, which
    can significantly improve the loading and rendering of static assets.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 实施最新的 HTTP 协议版本 HTTP/2，以实现客户端和服务器之间更快、更高效的通信。HTTP/2 提供了多路复用、头部压缩和服务器推送等好处，可以显著提高静态资产的加载和渲染速度。
- en: Optimizing static assets and bundling them efficiently can make a huge difference
    to the performance of the UI and also take a significant load (and therefore cost)
    off the cloud systems.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 优化静态资产并高效地打包它们可以对 UI 的性能产生巨大影响，并显著减轻（因此成本）云系统的负担。
- en: Implementing progressive loading and lazy loading techniques
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实施渐进式加载和懒加载技术
- en: It is very common when starting to build a UI to simply send everything that
    the user needs for a certain page at the initial page load. This seems like it
    gets all the loadings out of the way in one go and allows for the most performant
    UI. But, taking this approach can consume a lot of bandwidth and drive up the
    cost of the cloud systems. Progressive and lazy loading techniques can help to
    mitigate this by minimizing the amount of data and resources loaded initially,
    resulting in faster initial page loads and reducing the bandwidth requirements
    of the server/cloud.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始构建 UI 时，通常会简单地将用户需要用于某个页面的所有内容在初始页面加载时发送出去。这似乎一次解决了所有加载问题，并允许实现性能最高的 UI。但是，采取这种方法可能会消耗大量带宽并增加云系统的成本。渐进式和懒加载技术可以通过最小化最初加载的数据和资源量来帮助减轻这一问题，从而加快初始页面加载速度并减少服务器/云的带宽需求。
- en: Progressive loading involves loading content in stages, starting with lower-resolution
    or simplified versions and gradually replacing them with higher-quality or more
    detailed versions as they are required. This approach is particularly useful for
    images and other media, allowing users to start interacting with the content before
    it’s fully loaded. One method to implement progressive loading is by using **low-quality
    image placeholders** (**LQIP**) or blurred thumbnails that are replaced with full-resolution
    images as they become available. It may be that some images never need their full
    resolution versions loaded, ultimately reducing the bandwidth consumed and speeding
    up the UI for the end user.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 渐进式加载涉及分阶段加载内容，从低分辨率或简化版本开始，并在需要时逐渐用更高品质或更详细的版本替换它们。这种方法特别适用于图像和其他媒体，允许用户在内容完全加载之前开始与之交互。实现渐进式加载的一种方法是通过使用**低质量图像占位符**（**LQIP**）或模糊缩略图，当可用时用全分辨率图像替换。可能有些图像根本不需要加载全分辨率版本，最终减少带宽消耗并加快最终用户的
    UI 加载速度。
- en: Lazy loading, on the other hand, defers the loading of non-critical or off-screen
    resources until they are needed. This technique reduces the initial payload size,
    resulting in faster page load times. For images and media, you can enable native
    lazy loading in modern browsers by using the `loading="lazy"` attribute for the
    `img` and `iframe` elements. If native lazy loading is not an option or you need
    more customization, you can also implement custom lazy loading using JavaScript
    libraries, such as the Intersection Observer API, which detects when elements
    become visible on the screen and loads them only when necessary.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，懒加载将非关键或屏幕外资源的加载推迟到需要时。这项技术减少了初始负载大小，从而加快了页面加载时间。对于图像和媒体，您可以通过为`img`和`iframe`元素使用`loading="lazy"`属性来在现代浏览器中启用原生的懒加载。如果原生懒加载不可用或您需要更多定制，您还可以使用JavaScript库（如Intersection
    Observer API）实现自定义懒加载，该API可以检测元素何时在屏幕上可见，并在必要时加载它们。
- en: In addition to images and media, lazy loading can be applied to other parts
    of your application, such as loading components or modules on demand. This can
    be particularly beneficial in large applications with numerous features or components,
    as it allows you to load only the necessary parts of your application when they
    are needed, reducing the initial load time and overall resource usage.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 除了图像和媒体之外，懒加载还可以应用于应用程序的其他部分，例如按需加载组件或模块。这对于具有众多功能或组件的大型应用程序尤其有益，因为它允许您在需要时仅加载应用程序的必要部分，从而减少初始加载时间和整体资源使用。
- en: For example, in a Blazor WebAssembly application, you can use the built-in code
    splitting and lazy loading features to load specific components or entire assemblies
    on demand. By leveraging this technique, your application can become more modular
    and efficient, making it easier to scale and maintain over time.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在Blazor WebAssembly应用程序中，您可以使用内置的代码拆分和懒加载功能按需加载特定的组件或整个程序集。通过利用这项技术，您的应用程序可以变得更加模块化和高效，从而更容易在长期内进行扩展和维护。
- en: Implementing progressive loading and lazy loading techniques in your application
    can significantly improve its performance, responsiveness, and overall UX. By
    minimizing the resources and data loaded initially and focusing on delivering
    only what is necessary when it’s needed, you can ensure a smooth and fast experience
    for your users!
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的应用程序中实现渐进式加载和懒加载技术可以显著提高其性能、响应速度和整体用户体验。通过最小化最初加载的资源和数据，并专注于在需要时仅提供必要的内容，您可以确保用户获得流畅且快速的体验！
- en: Leveraging caching strategies for UI components
  id: totrans-271
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 利用UI组件的缓存策略
- en: Once again, caching is an important technique for improving the performance
    and responsiveness of your SaaS application’s UI, particularly as it scales. By
    storing and reusing previously fetched or computed data, caching reduces the need
    for redundant requests, decreasing the load on your servers and improving the
    overall user experience.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，缓存是提高您的SaaS应用程序UI性能和响应速度的重要技术，尤其是在它扩展时。通过存储和重用之前获取或计算的数据，缓存减少了冗余请求的需求，减轻了服务器的负载，并改善了整体用户体验。
- en: One of the most effective caching strategies for UI components is client-side
    caching. By storing frequently used data or rendered components in the browser’s
    cache, your application can quickly access this information without requiring
    additional server requests. HTML5 local storage and IndexedDB are two examples
    of client-side storage mechanisms that can be used for caching data.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 对于UI组件，最有效的缓存策略之一是客户端缓存。通过在浏览器缓存中存储频繁使用的数据或渲染的组件，您的应用程序可以快速访问这些信息，而无需额外的服务器请求。HTML5本地存储和IndexedDB是可用于缓存数据的两种客户端存储机制。
- en: Another caching technique involves memoization, a method for caching the results
    of function calls based on their input parameters. In the context of UI components,
    memoization can be used to cache the output of computationally expensive or frequently
    executed functions, reducing the need for redundant computations. Many modern
    UI libraries, such as Blazor, provide built-in support for memoization, making
    it easier to implement in your application.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种缓存技术涉及记忆化，这是一种基于函数调用输入参数缓存函数结果的策略。在UI组件的上下文中，记忆化可以用于缓存计算成本高或频繁执行函数的输出，减少冗余计算的需求。许多现代UI库，如Blazor，都提供了内置的记忆化支持，这使得在您的应用程序中实现它变得更加容易。
- en: When leveraging caching strategies, it’s crucial to strike a balance between
    caching data for performance benefits and ensuring that the data remains fresh
    and up-to-date. To maintain data consistency, you should implement cache invalidation
    strategies that expire or update cached data when it is no longer valid or when
    the underlying data changes. Some methods for cache invalidation include setting
    expiration times for cached data, using versioning or timestamps to detect changes,
    and listening for server-side events that indicate updates to the data.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 当利用缓存策略时，在缓存数据以获得性能好处和确保数据保持新鲜和更新之间取得平衡至关重要。为了保持数据一致性，你应该实施缓存失效策略，在数据不再有效或底层数据发生变化时过期或更新缓存数据。一些缓存失效的方法包括为缓存数据设置过期时间，使用版本或时间戳来检测变化，以及监听指示数据更新的服务器端事件。
- en: In distributed environments, such as microservices-based architectures, caching
    can also be implemented on the server side. Techniques such as caching API responses
    or using a distributed cache, such as Redis or Memcached, can help reduce the
    load on your backend services and improve the overall performance of your application.
    When implementing server-side caching, be sure to consider factors such as data
    consistency, cache coherence, and fault tolerance.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在分布式环境中，例如基于微服务的架构中，缓存也可以在服务器端实现。例如缓存API响应或使用分布式缓存，如Redis或Memcached，可以帮助减少后端服务的负载，并提高应用程序的整体性能。在实现服务器端缓存时，务必考虑数据一致性、缓存一致性和容错性等因素。
- en: Caching is always a hard thing to get right, and this is no different when thinking
    about caching on the UI layer. It is essential to carefully plan and implement
    caching strategies for UI components that consider both the performance benefits
    and the potential complexities introduced by caching. By choosing the right caching
    techniques and striking a balance between performance and data freshness, you
    can significantly improve the UX of your SaaS application as it scales. Remember
    to monitor and evaluate the effectiveness of your caching strategies over time,
    making adjustments as necessary to ensure optimal performance and scalability.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存总是很难做对，当考虑到UI层的缓存时，这一点也不例外。为UI组件精心规划和实施缓存策略，考虑性能带来的好处以及缓存可能引入的潜在复杂性，这是至关重要的。通过选择合适的缓存技术，在性能和数据新鲜度之间取得平衡，你可以在扩展时显著提高SaaS应用程序的用户体验。记住要随着时间的推移监控和评估缓存策略的有效性，根据需要做出调整，以确保最佳性能和可伸缩性。
- en: Scaling the UI layer of your SaaS application is a crucial aspect of ensuring
    a smooth and responsive user experience as your application grows. By focusing
    on performance optimization, efficiently managing and delivering static assets,
    implementing progressive and lazy loading techniques, and leveraging caching strategies
    for UI components, you can significantly improve your application’s performance
    and responsiveness even as it scales to accommodate more users.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的SaaS应用程序中扩展UI层是确保随着应用程序的增长用户体验平滑和响应的关键方面。通过关注性能优化，高效管理和交付静态资产，实施渐进式和懒加载技术，以及利用UI组件的缓存策略，你可以在扩展以适应更多用户的同时显著提高应用程序的性能和响应性。
- en: As your application continues to grow, it’s essential to continually monitor
    and refine your UI scaling strategies to ensure optimal performance and user experience.
    Keep in mind that adopting a data-driven approach to performance optimization,
    analyzing user feedback, and staying up-to-date with the latest industry best
    practices will help you maintain a competitive edge and deliver a high-quality
    experience to your users. With thoughtful planning and execution of UI scaling
    strategies, your SaaS application will be well equipped to handle the challenges
    that come with growth and expansion.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 随着你的应用程序继续增长，持续监控和优化你的UI扩展策略以确保最佳性能和用户体验是至关重要的。记住，采用数据驱动的性能优化方法，分析用户反馈，并跟上最新的行业最佳实践将帮助你保持竞争优势，并为用户提供高质量的服务。通过深思熟虑地规划和执行UI扩展策略，你的SaaS应用程序将能够应对增长和扩张带来的挑战。
- en: Summary
  id: totrans-280
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'This chapter focuses on the challenges and best practices for operating a SaaS
    application built with Microsoft technologies at scale. The chapter is divided
    into four main sections: a general overview, scaling the database, scaling the
    API, and scaling the UI.'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点介绍使用微软技术构建的 SaaS 应用程序在规模扩展过程中面临的挑战和最佳实践。本章分为四个主要部分：一般概述、数据库扩展、API 扩展和 UI
    扩展。
- en: The first section provides a general discussion of the challenges associated
    with operating at scale, including infrastructure scalability, performance optimization,
    security and compliance, availability and uptime, and cost and resource management.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 第一部分提供了关于在规模扩展过程中遇到的挑战的一般讨论，包括基础设施可扩展性、性能优化、安全性和合规性、可用性和正常运行时间，以及成本和资源管理。
- en: The second section covers scaling the database and includes sub-sections on
    partitioning, sharding, archiving, and caching. By implementing these techniques,
    you can ensure that your database can handle increased demand and provide reliable
    and performant data access for your application.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 第二部分涵盖了数据库扩展，包括分区、分片、存档和缓存等子部分。通过实施这些技术，你可以确保你的数据库能够处理增加的需求，并为你的应用程序提供可靠且高性能的数据访问。
- en: The third section covers scaling the API and includes sub-sections on load balancing,
    microservices, caching, and monitoring. By implementing these techniques, you
    can ensure that your API can handle increased demand and provide a reliable and
    performant data access layer for your application.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 第三部分涵盖了 API 扩展，包括负载均衡、微服务、缓存和监控等子部分。通过实施这些技术，你可以确保你的 API 能够处理增加的需求，并为你的应用程序提供一个可靠且高性能的数据访问层。
- en: The fourth section covers scaling the UI and includes sub-sections on performance
    optimization, caching, load testing, UX optimization, monitoring and scaling automation,
    and security considerations. By implementing these techniques, you can ensure
    that your UI remains performant and responsive even as your user base grows and
    demand increases.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 第四部分涵盖了 UI 扩展，包括性能优化、缓存、负载测试、用户体验优化、监控和自动化扩展以及安全考虑。通过实施这些技术，你可以确保即使在用户基础增长和需求增加的情况下，你的
    UI 仍然保持高性能和响应性。
- en: In summary, operating a SaaS application at scale presents several challenges,
    but by implementing appropriate techniques and best practices, you can ensure
    that your application can handle increased demand and provide a reliable and performant
    user experience for your customers.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，在规模上运营 SaaS 应用程序会带来一些挑战，但通过实施适当的技术和最佳实践，你可以确保你的应用程序能够处理增加的需求，并为你的客户提供可靠且高性能的用户体验。
- en: We are approaching the end of our learning on SaaS applications with Microsoft
    technologies! In the final chapter, we will take a look at everything that we
    have covered and summarize our learnings!
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 我们即将结束使用微软技术对 SaaS 应用程序的学习！在最后一章中，我们将回顾我们已经涵盖的内容，并总结我们的学习成果！
- en: Further reading
  id: totrans-288
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '36 Things You Should Know When Designing and Scaling SaaS Software: [https://medium.com/@mikesparr/things-i-wish-i-knew-when-starting-software-programming-3508aef0b257](https://medium.com/@mikesparr/things-i-wish-i-knew-when-starting-software-programming-3508aef0b257)'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计和扩展 SaaS 软件时应了解的 36 件事：[https://medium.com/@mikesparr/things-i-wish-i-knew-when-starting-software-programming-3508aef0b257](https://medium.com/@mikesparr/things-i-wish-i-knew-when-starting-software-programming-3508aef0b257)
- en: 'Scalability: [https://learn.microsoft.com/en-us/sql/relational-databases/in-memory-oltp/scalability?view=sql-server-ver16](https://learn.microsoft.com/en-us/sql/relational-databases/in-memory-oltp/scalability?view=sql-server-ver16)'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可扩展性：[https://learn.microsoft.com/en-us/sql/relational-databases/in-memory-oltp/scalability?view=sql-server-ver16](https://learn.microsoft.com/en-us/sql/relational-databases/in-memory-oltp/scalability?view=sql-server-ver16)
- en: 'The practical guide to API management: [https://www.softwareag.com/en_corporate/resources/api/guide/api-management.html](https://www.softwareag.com/en_corporate/resources/api/guide/api-management.html)'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API 管理实用指南：[https://www.softwareag.com/en_corporate/resources/api/guide/api-management.html](https://www.softwareag.com/en_corporate/resources/api/guide/api-management.html)
- en: 'ASP.NET Core Blazor performance best practices: [https://learn.microsoft.com/en-us/aspnet/core/blazor/performance?view=aspnetcore-7.0](https://learn.microsoft.com/en-us/aspnet/core/blazor/performance?view=aspnetcore-7.0)'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ASP.NET Core Blazor 性能最佳实践：[https://learn.microsoft.com/en-us/aspnet/core/blazor/performance?view=aspnetcore-7.0](https://learn.microsoft.com/en-us/aspnet/core/blazor/performance?view=aspnetcore-7.0)
- en: Questions
  id: totrans-293
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What are the key challenges faced when scaling a SaaS application?
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扩展 SaaS 应用程序时面临的关键挑战是什么？
- en: How does sharding help improve database scalability?
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分片如何帮助提高数据库的可扩展性？
- en: What are the differences between horizontal and vertical scaling for databases?
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据库的水平扩展和垂直扩展之间有什么区别？
- en: How does implementing rate limiting and throttling contribute to API scalability?
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实施速率限制和节流如何有助于API的可扩展性？
- en: What is the purpose of progressive loading and lazy loading techniques in UI
    scaling?
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在UI扩展中，渐进式加载和懒加载技术的目的是什么？
- en: How does caching improve performance for both UI components and backend services?
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 缓存如何提高UI组件和后端服务的性能？
- en: 'Part 5: Concluding Thoughts'
  id: totrans-300
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第五部分：总结思考
- en: This section brings the book to a close with a single chapter that revises what
    we have learned and gives some pointers for how to apply your newfound knowledge!
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 本节通过一个章节来结束本书，回顾我们所学的知识，并提供一些如何应用新获得知识的指导！
- en: 'This section has the following chapter:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 本节包含以下章节：
- en: '[*Chapter 13*](B19343_13.xhtml#_idTextAnchor319), *Wrapping It Up*'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第13章*](B19343_13.xhtml#_idTextAnchor319)，*总结*'
