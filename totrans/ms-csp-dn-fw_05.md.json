["```cs\ndynamic dyn = \"This is a dynamic declared string\";\nType t = dyn.GetType();\nPropertyInfo prop = t.GetProperty(\"Length\");\nint stringLength = prop.GetValue(dyn, new object[] { });\nConsole.WriteLine(dyn);\nConsole.WriteLine(stringLength);\n```", "```cs\nusing System;\nusing System.Reflection;\nusing System.Windows.Forms;\nusing static System.Console;\n\nnamespace Reflection1\n{\n  class Program\n  {\n    static void Main(string[] args)\n    {\n      Person p = new Person()\n      {\n        eMail = \"person@email\",\n        Name = \"Person Name\",\n        BirthDate = DateTime.Today\n      };\n      WriteLine($\"Type of p: { p.GetType() }\");\n      Read();\n    }\n  }\n  class Person\n  {\n    public string Name { get; set; }\n    public string eMail { get; set; }\n    public DateTime BirthDate { get; set; }\n    public void ShowPersonData(string caption, MessageBoxIcon icon)\n    {\n      MessageBox.Show(this.Name + \" - \" + this.BirthDate,\n      caption, MessageBoxButtons.OK, icon);\n    }\n  }\n}\n// Output: \"Type of p:  Reflection1.Person\"\n```", "```cs\nWriteLine($\"Type of p: { p.GetType() }\");\nType tPerson = p.GetType();\nWriteLine($\"Assembly Name: {tPerson.Assembly.ToString()}\");\nWriteLine($\"Module Name (Path removed): {tPerson.Module.Name}\");\nWriteLine($\"Name of the undelying type: {tPerson.UnderlyingSystemType.Name}\");\nWriteLine($\"Number of Properties (public): {tPerson.GetProperties().Length}\");\n// Now ler's retrieve all public members\nvar members = tPerson.GetMembers();\nforeach (var member in members)\n{\n  WriteLine($\"Member: {member.Name}, {member.MemberType.ToString()}\");\n}\nRead();\n```", "```cs\n// Invoke a method\nvar method = tPerson.GetMethod(\"ShowPersonData\");\nobject[] parameters = new object[method.GetParameters().Length];\nparameters[0] = \"Caption for the MessageBox\";\nparameters[1] = MessageBoxIcon.Exclamation;\nmethod.Invoke(p, parameters);\n```", "```cs\n// Change a Property\nWriteLine(\" Write/Read operations\\n\");\nvar property = tPerson.GetProperty(\"Name\");\nobject[] argums = { \"John Doe\" };\nWriteLine($\" Property {property.Name} - Is writable: {property.CanWrite}\");\ntPerson.InvokeMember(\"Name\", BindingFlags.SetProperty, null, p, argums);\nWriteLine($\" Property {property.Name}: written ok.\");\n// Read the Name property\nobject value = tPerson.InvokeMember(property.Name, BindingFlags.GetProperty, null, p, null);\nWriteLine($\" New {property.Name} is: {value}\");\n```", "```cs\nusing System;\nusing System.Windows.Forms;\nusing System.Reflection;\nusing static System.Console;\n\nnamespace Reflection1\n{\n  class Program2\n  {\n    static void Main(string[] args)\n    {\n      // Direct reflection of a referenced type\n      // (System.Math belongs to mscorlib)\n      WriteLine(\"\\n MemberInfo from System.Math\");\n      // Type and MemberInfo data.\n      Type typeMath = Type.GetType(\"System.Math\");\n      MemberInfo[] mathMemberInfo = typeMath.GetMembers();\n      // Shows the DeclaringType method.\n      WriteLine($\"\\n The type {typeMath.FullName} contains {mathMemberInfo.Length} members.\");\n      Read();\n    }\n  }\n}\n\n// output:\n// MemberInfo from System.Math\n// The type System.Math contains 76 members.\n```", "```cs\n// Loading an assembly at runtime.\nAssembly asm = Assembly.Load(\"mscorlib\");\nType ty = asm.GetType(\"System.Int32\");\nWriteLine(ty.FullName);\nObject o = asm.CreateInstance(\"System.Int32\");\nWriteLine(o.GetType().FullName);   // => System.Int32\n```", "```cs\n// Get information on assemblies referenced in the current assembly.\nAssemblyName[] refAssemblies;\nrefAssemblies =   Assembly.GetExecutingAssembly().GetReferencedAssemblies();\nWriteLine(\" Assemblies referenced by the running assembly:\");\nforeach (var item in refAssemblies)\n{\n  Console.WriteLine(\" \" + item.FullName);\n}\nRead();\n```", "```cs\nusing System;\nusing static System.Console;\nusing System.Collections.Generic;\n\nnamespace Reflection1\n{\n  class Program3\n  {\n    static void Main(string[] args)\n    {\n      var HttpVerbs = new Dictionary<string, string>();\n      HttpVerbs.Add(\"Delete\", \"Requests that a specified URI be deleted.\");\n      HttpVerbs.Add(\"Get\", \"Retrieves info that is identified by the URI of the request\");\n      HttpVerbs.Add(\"Head\", \"Retrieves the message headers \");\n      HttpVerbs.Add(\"Post\", \"Posts a new entity as an addition to a URI.\");\n      HttpVerbs.Add(\"Put\", \"Replaces an entity that is identified by a URI.\");\n\n      // Reflection on a generic type\n      Type t = HttpVerbs.GetType();\n      WriteLine($\"\\r\\n {t}\");\n      WriteLine($\" Is a generic type? {t.IsGenericType}\");\n      WriteLine($\" Is a generic type definition? {t.IsGenericTypeDefinition}\");\n\n      // Info on type parameters or type arguments.\n      Type[] typeParameters = t.GetGenericArguments();\n\n      WriteLine($\" Found {typeParameters.Length} type arguments:\");\n      foreach (Type tParam in typeParameters)\n      {\n        if (tParam.IsGenericParameter)\n        {\n          // Display Generic Parameters (if any);\n          Console.WriteLine($\" Type parameter: {tParam.Name} in position: \" + $\" {tParam.GenericParameterPosition}\");\n        }\n        else\n        {\n          Console.WriteLine($\" Type argument: {tParam}\" );\n        }\n      }\n      Read();\n    }\n  }\n}\n```", "```cs\nusing System.CodeDom;\nusing System.Reflection;\nusing System.CodeDom.Compiler;\nusing System.IO;\n\nnamespace Reflection1\n{\n  class Program5\n  {\n    static void Main(string[] args)\n    {\n      CodeCompileUnit oCU = new CodeCompileUnit();\n      CodeTypeDeclaration oTD;\n\n      // Working with CodeDOM\n      CodeNamespace oNamespace = new CodeNamespace(\"Reflection1\");\n      // CodeNameSpace can import declarations of other namespaces\n      // which is equivalent to the \"using\" statement\n      oNamespace.Imports.Add(new CodeNamespaceImport(\"System.Windows.Forms\"));\n      // Class creation is undertaken by CodeTypeDeclaration class.\n      // You can configure it with attributes, properties, etc.\n      oTD = new CodeTypeDeclaration();\n      oTD.Name = \"Person\";\n      oTD.IsClass = true;\n\n      // Generate code\n      CodeDomProvider provider = CodeDomProvider.CreateProvider(\"CSharp\");\n      CodeGeneratorOptions options = new CodeGeneratorOptions();\n      options.BracingStyle = \"C\";\n      using (StreamWriter sr = new StreamWriter(@\"Person.cs\"))\n      {\n        provider.GenerateCodeFromCompileUnit(oCU, sr, options);\n      }\n    }\n  }\n}\n```", "```cs\n// 1st sample of emission (using ILGenerator):\n// A way to obtain one is creating a dynamic method. When the\n// method is invoked, its generated contents are executed.\nDynamicMethod dn = new DynamicMethod(\"dynamicMethod\", null, null);\nvar ilgen = dn.GetILGenerator();\nilgen.EmitWriteLine(\"Testing Reflection Emit.\");\nilgen.EmitWriteLine(\"We use IlGenerator here...\");\nilgen.Emit(OpCodes.Ret);\ndn.Invoke(null, null);\n```", "```cs\npublic void OpenWordDoc()\n{\n  ApplicationClass WordApp = new ApplicationClass();\n  WordApp.Visible = true;\n  object missing = System.Reflection.Missing.Value;\n  object readOnly = false;\n  object isVisible = true;\n  object fileName = Path.Combine(\n    AppDomain.CurrentDomain.BaseDirectory, @\"..\\..\\..\\Document.doc\");\n  Microsoft.Office.Interop.Word.Document theDoc = WordApp.Documents.Open(\n      ref fileName, ref missing, ref readOnly, ref missing,\n      ref missing, ref missing, ref missing, ref missing,\n      ref missing, ref missing, ref missing, ref isVisible,\n      ref missing, ref missing, ref missing, ref missing);\n  theDoc.Activate();\n}\n```", "```cs\nusing Excel = Microsoft.Office.Interop.Excel;\nusing Word = Microsoft.Office.Interop.Word;\n...\nprivate void Form1_Load(object sender, EventArgs e)\n{\n  OpenExcel();\n}\npublic void OpenExcel()\n{\n  var excel = new Excel.Application();\n  excel.Visible = true;\n  excel.Workbooks.Add();\n  excel.get_Range(\"A1\").Value2 = \"Initial Data\";\n  excel.get_Range(\"B1\").Value2 = \"Demo data 1\";\n  excel.get_Range(\"C1\").Value2 = \"Demo data 2\";\n  excel.get_Range(\"D1\").Value2 = \"Demo data 3\";\n}\n```", "```cs\n// an alternative way to get a range object\nvar oSheet = excel.Sheets[1]; // Index starts by 1\nvar oRange = (Excel.Range)oSheet.Range[oSheet.Cells[1, 2],\n  oSheet.Cells[4, 3]];\noRange.Value2 = \"Same value\";\n```", "```cs\npublic Excel.Style FormatCells()\n{\n  Excel.Style style = excel.ActiveWorkbook.Styles.Add(\"myStyle\");\n  //Creation of an style to format the cells\n  style.Font.Name = \"Segoe UI\";\n  style.Font.Size = 14;\n  style.Font.Color = ColorTranslator.ToOle(Color.White);\n  style.Interior.Color = ColorTranslator.ToOle(Color.Silver);\n  style.HorizontalAlignment = Excel.XlHAlign.xlHAlignRight;\n  return style;\n}\n```", "```cs\n// Load an image to Clipboard and paste it\nClipboard.SetImage(new Bitmap(\"Packt.jpg\"));\nexcel.get_Range(\"A6\").Select();\noSheet.Paste();\n```", "```cs\npublic Bitmap LoadImageFromSite()\n{\n  // Change your URL to point to any other image...\n  var urlImg = @\"https://www.packtpub.com/sites/default/files/B05245_MockupCover_Nor\tmal_.jpg\";\n  WebRequest request = WebRequest.Create(urlImg);\n  WebResponse response = request.GetResponse();\n  Stream responseStream = response.GetResponseStream();\n  return new Bitmap(responseStream);\n}\n```", "```cs\nClipboard.SetImage(LoadImageFromSite());\n```", "```cs\nchart.ChartWizard(Source: range.CurrentRegion,\n  Title: \"Memory Usage of Office Applications\");\nchart.ChartType = Excel.XlChartType.xl3DArea;\nchart.ChartStyle = 14;\nchart.ChartArea.Copy();\n```", "```cs\npublic void DrawChart()\n{\n  var processes = Process.GetProcesses()\n    .OrderBy(p => p.WorkingSet64);\n  int i = 2;\n  foreach (var p in processes)\n  {\n    if (p.ProcessName == \"WINWORD\" ||\n      p.ProcessName == \"OUTLOOK\" ||\n      p.ProcessName == \"EXCEL\")\n    {\n      excel.get_Range(\"A\" + i).Value2 = p.ProcessName;\n      excel.get_Range(\"B\" + i).Value2 = p.WorkingSet64;\n      i++;\n    }\n  }\n\n  Excel.Range range = excel.get_Range(\"A1\");\n  Excel.Chart chart = (Excel.Chart)excel.ActiveWorkbook.Charts.Add(\n    After: excel.ActiveSheet);\n\n  chart.ChartWizard(Source: range.CurrentRegion,\n    Title: \"Memory Usage of Office Applications\");\n  chart.ChartType = Excel.XlChartType.xl3DArea;\n  chart.ChartStyle = 14;\n  //chart.CopyPicture(Excel.XlPictureAppearance.xlScreen,\n  //    Excel.XlCopyPictureFormat.xlBitmap,\n  //    Excel.XlPictureAppearance.xlScreen);\n  chart.ChartArea.Copy();\n}\n```", "```cs\nprivate void btnGenerateGraph_Click(object sender, EventArgs e)\n{\n  DrawChart();\n  if (Clipboard.ContainsImage())\n  {\n    pbChart.SizeMode = PictureBoxSizeMode.StretchImage;\n    pbChart.Image = Clipboard.GetImage();\n  }\n  else\n  {\n    MessageBox.Show(\"Clipboard is empty\");\n  }\n}\n```", "```cs\nprivate void frmInteropExcel_FormClosing(object sender, FormClosingEventArgs e)\n{\n  excel.ActiveWorkbook.Saved = true;\n  excel.UserControl = false;\n  excel.Quit();\n}\n```", "```cs\nWord.Application word = new Word.Application();\nprivate void btnOpenWord_Click(object sender, EventArgs e)\n{\n  word.Visible = true;\n  word.Documents.Add();\n\n  var theDate = DateTime.Today.ToString(CultureInfo.CreateSpecificCulture(\"en-US\"));\n  word.Selection.InsertAfter(theDate + Environment.NewLine);\n  word.Selection.InsertAfter(\"This text is passed to Word directly.\" + Environment.NewLine);\n  word.Selection.InsertAfter(\"Number or paragraphs: \" +\n    word.ActiveDocument.Paragraphs.Count.ToString());\n}\n```", "```cs\nprivate void fmInteropWord_FormClosing(object sender, FormClosingEventArgs e)\n{\n  try\n  {\n    word.ActiveDocument.Saved = true;\n    word.Quit();\n  }\n  catch (Exception)\n  {\n    MessageBox.Show(\"Word already closed or not present\");\n  }\n}\n```", "```cs\nprivate void btnInsertImage_Click(object sender, EventArgs e)\n{\n  var filePath = Environment.CurrentDirectory;\n  word.Selection.InsertAfter(Environment.NewLine + \"Logo PACKT: \");\n  var numChars = word.Selection.Characters.Count;\n  word.Selection.InlineShapes.AddPicture(filePath + \"\\\\Packt.jpg\",\n    Range: word.ActiveDocument.Range(numChars));\n}\n```", "```cs\nprivate void btnFormat_Click(object sender, EventArgs e)\n{\n  Word.Range firstPara = word.ActiveDocument.Paragraphs[1].Range;\n  firstPara.Font.Size = 21;\n  firstPara.Font.Name = \"Century Gothic\";\n  firstPara.ParagraphFormat.Alignment =\n    Word.WdParagraphAlignment.wdAlignParagraphCenter;\n}\n```", "```cs\nprivate void btnSpellCheck_Click(object sender, EventArgs e)\n{\n  if (word.Documents.Count >= 1)\n    rtbSpellingText.Text +=\n      Environment.NewLine + Environment.NewLine +\n    SpellCheck(rtbSpellingText.Text);\n  else\n    MessageBox.Show(\"Please, use the Open Word option first\");\n}\n\nprivate string SpellCheck(string text)\n{\n  var corrected = string.Empty;\n  var doc = word.ActiveDocument;\n  if (!string.IsNullOrEmpty(text))\n  {\n    doc.Words.Last.InsertAfter(Environment.NewLine + text);\n    var corRange = doc.Paragraphs.Last.Range;\n    corRange.CheckSpelling();\n    corrected = corRange.Text;\n  }\n  return corrected;\n}\n```", "```cs\n<button id=\"insert-data-from-Task-Pane\">Insert data from TaskPane</button>\n```", "```cs\n$('#insert-data-from-Task-Pane').click(insertDataFromTaskPane);\n```", "```cs\nfunction insertDataFromTaskPane() {\n  Office.context.document.setSelectedDataAsync(\n    'Text inserted from the Task Pane' +\n    '\\nCallaback function notifies status',\n    function (result) {\n      app.showNotification('Feedback:', result.status);\n    }\n  );\n}\n```"]