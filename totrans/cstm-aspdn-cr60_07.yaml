- en: '*Chapter 7*: Using IHostedService and BackgroundService'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This seventh chapter isn't really about customization; it's more about a feature
    you can use to create background services to run tasks asynchronously inside your
    application. I use this feature to regularly fetch data from a remote service
    in a small ASP.NET Core application.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll examine the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing `IHostedService`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing `BackgroundService`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing the new Worker Service projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The topics of this chapter refer to the Host layer of the ASP.NET Core architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.1 – ASP.NET Core architecture](img/Figure_7.1_B17996.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.1 – ASP.NET Core architecture
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To follow the descriptions in this chapter, you will need to create an ASP.NET
    Core application. Open your console, shell, or Bash terminal, and change to your
    working directory. Use the following command to create a new MVC application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now open the project in Visual Studio by double-clicking the project file or
    in VS Code by changing the folder to the project and typing the following command
    in the already open console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'All of the code samples in this chapter can be found in the GitHub repo for
    this book: [https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter07](https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter07).'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing IHostedService
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hosted services have been a thing since ASP.NET Core 2.0 and can be used to
    run tasks asynchronously in the background of your application. They can be used
    to fetch data periodically, do some calculations in the background, or do some
    cleanup. You can also use them to send preconfigured emails – or whatever you
    need to do in the background.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hosted services are basically simple classes that implement the `IHostedService`
    interface. You call them with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '`IHostedService` needs to implement a `StartAsync()` method and a `StopAsync()`
    method. The `StartAsync()` method is the place where you implement the logic to
    execute. This method gets executed once, immediately after the application starts.
    The `StopAsync()` method, on the other hand, gets executed just before the application
    stops. This also means that to start a scheduled service, you will need to implement
    it on your own. You will need to implement a loop that executes the code regularly.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To execute a `IHostedService`, you will need to register it in the ASP.NET
    Core dependency injection container as a singleton instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The next sample shows you how hosted services work. It writes a log message
    to the console on start, on stop, and every 2 seconds:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, write the class skeleton that retrieves `ILogger` via `DependencyInjection`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The next step is to implement the `StopAsync` method. This method is used to
    clean up in case you need to close connections, streams, and so on:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The actual work will be done in the `StartAsync` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To test this, start the application by calling the following command in the
    console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Or press *F5* in Visual Studio or VS Code. This results in the following console
    output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 7.2 – A screenshot of the dotnet run output](img/Figure_7.2_B17996.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.2 – A screenshot of the dotnet run output
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the log output is written to the console every 2 seconds.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at `BackgroundService`.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing BackgroundService
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `BackgroundService` class was introduced in ASP.NET Core 3.0 and is basically
    an abstract class that implements the `IHostedService` interface. It also provides
    an abstract method, called `ExecuteAsync()`, which returns a `Task`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to reuse the hosted service from the last section, the code will
    need to be rewritten. Follow these steps to learn how:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, write the class skeleton that retrieves `ILogger` via `DependencyInjection`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The next step would be to override the `StopAsync` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the final step, we will override the `ExecuteAsync` method that does all
    the work:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Even the registration is new.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Additionally, in ASP.NET Core 3.0 and later, the `ServiceCollection` has a
    new extension method to register hosted services or a background worker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'To test this, start the application by calling the following command in the
    console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Or press *F5* in Visual Studio or VS Code. It should show almost the same output
    as the `SampleHostedService` you created in the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's take a look at Worker Service projects.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the new Worker Service projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **worker services** and the generic hosting in ASP.NET Core 3.0 and later
    make it pretty easy to create simple service-like applications that can do some
    stuff without the full-blown ASP.NET stack – and without a web server.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can create this project with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Basically, this creates a console application with a `Program.cs` and a `Worker.cs`
    file in it. The `Worker.cs` file contains the `Worker` class that inherits from
    the `BackgroundService` class. In ASP.NET 5.0 and earlier, the `Program.cs` file
    looks pretty familiar to what we saw in the previous versions of ASP.NET Core
    but without a `WebHostBuilder`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In ASP.NET Core 6.0, `Program.cs` is pretty simplified in the same way as the
    minimal APIs. It looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This creates an `IHost` with dependency injection enabled. This means we can
    use dependency injection in any kind of .NET Core application, and not only in
    ASP.NET Core applications.
  prefs: []
  type: TYPE_NORMAL
- en: Then the worker is added to the service collection.
  prefs: []
  type: TYPE_NORMAL
- en: Where is this useful? You can run this app as a Windows service or as a background
    application in a Docker container, which doesn't need an HTTP endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can now start to do some more complex things with an `IHostedService` and
    the `BackgroundService`. Be careful with background services because they all
    run in the same application; if you use too much CPU or memory, this could slow
    down your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'For bigger applications, I would suggest running such tasks in a separate application
    that is specialized for executing background tasks: a separate Docker container,
    a `BackgroundWorker` on Azure, Azure Functions, or something like that. However,
    it should be separate from the main application in that case.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about middleware, and how you can use them
    to implement special logic on the request pipeline or serve specific logic on
    different paths.
  prefs: []
  type: TYPE_NORMAL
