["```cs\nif (env.IsDevelopment())\n{\n    app.UseDeveloperExceptionPage();\n}\nelse\n{\n    app.UseExceptionHandler(\"/Error\");\n    app.UseHsts();\n}\n```", "```cs\npublic void OnGet()\n{\n    RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier;\n    var exceptionFeature =\n        HttpContext.Features.Get<IExceptionHandlerPathFeature>();\n    // Access the Exception through exceptionFeature?.Error\n    // Access the Path through exceptionFeature?.Path\n    if (exceptionFeature?.Path == \"/\")\n    {\n        ErrorMessage ??= string.Empty;\n        ErrorMessage += \" We have bigger problems if the main page is             bombing.\";\n        _logger.Log(LogLevel.Error, exceptionFeature?.Error,             ErrorMessage);\n    }\n}\n```", "```cs\napp.UseExceptionHandler(handler =>\n{\n    var logger = loggerFactory.CreateLogger(\"Middleware\");\n    handler.Run(async context =>\n    {\n        context.Response.StatusCode = StatusCodes.            Status501NotImplemented;\n        context.Response.ContentType = MediaTypeNames.Text.Plain;\n        await context.Response.WriteAsync(\"Uh-oh...an exception was             thrown.\");\n        var exceptionFeature =\n            context.Features.Get<IExceptionHandlerPathFeature>();\n        if (exceptionFeature?.Path == \"/\")\n        {\n            var message = \" Yep, the home page isn't implemented                 yet.\";\n            await context.Response.WriteAsync(message);\n            logger.Log(LogLevel.Error, exceptionFeature.Error,                 $@\"Error:{message}\");\n        }\n    });\n});\n```", "```cs\nvar number = \"2\";\nint result;\ntry\n{\n    result = int.Parse(number);\n}\ncatch\n{\n    result = 0;\n}\n// use result\n```", "```cs\nvar number = \"2\";\nif (!int.TryParse(number, out var result))\n{\n    result = 0;\n}\n// use result\n```", "```cs\nvar number = \"hi\";\nint result;\ntry\n{\n    result = int.Parse(number);\n}\ncatch\n{\n    // gives us \"OnGetAsync:invalid number - hi\"\n    _logger.LogInformation($\"{MethodBase.GetCurrentMethod()}:invalid number - {number}\");\n    result = 0;\n}\n// use result\n```", "```cs\n// Arrange\nvar number = \"2\";\nint result;\ntry\n{\n    // Act\n    result = int.Parse(number);\n}\n// Assert\ncatch\n{\n    // gives us \"OnGetAsync:invalid number - hi\"\n    _logger.LogInformation($\"{MethodBase.GetCurrentMethod()}:invalid number - {number}\");\n    result = 0;\n}\n// use result\n```", "```cs\nprivate void Deposit(Account myAccount, decimal amount)\n{\n    try\n    {\n        myAccount.Deposit(amount);\n    }\n    catch { }\n}\n```", "```cs\nFileStream fileStream = null;\ntry\n{\n    fileStream = new FileStream(@\"C:\\temp\\myfile.txt\", FileMode.Append);\n}\ncatch (DirectoryNotFoundException e)\n{\n    _logger.Log(LogLevel.Information, MethodBase.GetCurrentMethod()+\":Directory not found - \" + e.Message);\n}\ncatch (FileNotFoundException e)\n{\n    _logger.Log(LogLevel.Information, MethodBase.GetCurrentMethod()+\":File Not Found - \" + e.Message);\n}\ncatch (IOException e)\n{\n    _logger.Log(LogLevel.Information, MethodBase.GetCurrentMethod()+\":I/O Error - \" + e.Message);\n}\ncatch (NotSupportedException e)\n{\n    _logger.Log(LogLevel.Information, MethodBase.GetCurrentMethod()+\":Not Supported - \" + e.Message);\n}\ncatch (Exception e)\n{\n    _logger.Log(LogLevel.Information, MethodBase.GetCurrentMethod()+\":General Exception - \" + e.Message);\n}\n// Use filestream\n```", "```cs\nFileStream fileStream = null;\ntry\n{\n    fileStream = new FileStream(@\"C:\\temp\\myfile.txt\", FileMode.Append);\n}\ncatch (Exception e) when\n    (  e is DirectoryNotFoundException\n    || e is FileNotFoundException)\n{\n    _logger.Log(LogLevel.Warning, $\"{MethodBase.GetCurrentMethod()}:{nameof(e)} - {e.Message}\");\n}\ncatch (Exception e) when\n    (e is NotSupportedException\n    || e is IOException)\n{\n    _logger.Log(LogLevel.Error, $\"{MethodBase.GetCurrentMethod()}:{nameof(e)} - {e.Message}\");\n}\ncatch (Exception e)\n{\n    _logger.Log(LogLevel.Error, $\"{MethodBase.GetCurrentMethod()}:{nameof(e)} - {e.Message}\");\n}\n// Use filestream\n```", "```cs\nFileStream fileStream = null;\ntry\n{\n    fileStream = new FileStream(@\"C:\\temp\\myfile.txt\", FileMode.Append);\n}\ncatch (Exception e)\n{\n    var logLevel = e switch\n    {\n        DirectoryNotFoundException => LogLevel.Warning,\n        FileNotFoundException => LogLevel.Warning,\n        _ => LogLevel.Error\n    };\n    _logger.Log(logLevel, $\"{MethodBase.GetCurrentMethod()}:{nameof(e)} - {e.Message}\");\n}\n// Use filestream\n```", "```cs\nusing System.Data.SqlClient;\nvar connectionString = @\"Data Source=localhost;Initial Catalog=myDatabase;Integrated Security=true;\";\nusing SqlConnection connection = new SqlConnection(connectionString);\nvar command = new SqlCommand(\"UPDATE Users SET Name='Jonathan' WHERE ID=1 \", connection);\ntry\n{\n    command.Connection.Open();\n    command.ExecuteNonQuery();\n}\ncatch (SqlException ex)\n{\n    Console.WriteLine(ex.ToString());\n    throw;\n}\nfinally\n{\n    connection.Close();\n}\n```"]