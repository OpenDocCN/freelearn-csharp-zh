["```cs\npublic class Product\n{\n    public Product(string name, int quantityInStock, int? id = null)\n    {\n        Name = name ?? throw new ArgumentNullException(nameof(name));\n        QuantityInStock = quantityInStock;\n        Id = id;\n    }\n    public int? Id { get; init; }\n    public string Name { get; init; }\n    public int QuantityInStock { get; private set; }\n    public void AddStock(int amount)\n    {\n        if (amount == 0) { return; }\n        if (amount < 0) { \n            throw new NegativeValueException(amount);\n        }\n        QuantityInStock += amount;\n    }\n    public void RemoveStock(int amount)\n    {\n        if (amount == 0) { return; }\n        if (amount < 0) { \n            throw new NegativeValueException(amount);\n        }\n        if (amount > QuantityInStock) { \n            throw new NotEnoughStockException(\n                QuantityInStock, amount); \n        }\n        QuantityInStock -= amount;\n    }\n}\n```", "```cs\npublic class Product\n{\n    public int? Id { get; set; }\n    public required string Name { get; set; }\n    public int QuantityInStock { get; set; }\n}\n```", "```cs\npublic interface IRepository<T, TId>\n    where T : class, IEntity<TId>\n{\n    Task<IEnumerable<T>> AllAsync(CancellationToken cancellationToken);\n    Task<T?> GetByIdAsync(TId id, CancellationToken cancellationToken);\n    Task<T> CreateAsync(T entity, CancellationToken cancellationToken);\n    Task UpdateAsync(T entity, CancellationToken cancellationToken);\n    Task DeleteAsync(TId id, CancellationToken cancellationToken);\n}\npublic interface IEntity<TId>\n{\n    TId Id { get; }\n}\n```", "```cs\ndb.Products.Add(new Data.Product\n{\n    Id = 1,\n    Name = \"Banana\",\n    QuantityInStock = 50\n});\n```", "```cs\nvar product = _db.Products.Find(productId);\n```", "```cs\n_db.Products.Single(x => x.Id == productId);\n```", "```cs\n_db.Products.Select(p => new Domain.Product\n{\n    Id = p.Id,\n    Name = p.Name,\n    QuantityInStock = p.QuantityInStock\n});\n```", "```cs\nvar outOfStockProducts = _db.Products\n    .Where(p => p.QuantityInStock == 0);\n```", "```cs\nvar mostLikelyOutOfStockProducts = _db.Products\n    .Where(p => p.QuantityInStock < 3);\n```", "```cs\nvar product = _db.Products.Find(productId);\nproduct.QuantityInStock += amount;\n_db.SaveChanges();\n```", "```cs\n_db.Products.Add(newProduct);\n_db.Products.Remove(productToDelete);\nproduct.Name = \"New product name\";\n_db.SaveChanges();\n```", "```cs\nnamespace Domain.Services;\npublic class StockService : IStockService\n{\n    private readonly IProductRepository _repository;\n    public StockService(IProductRepository repository)\n    {\n        _repository = repository ?? throw new ArgumentNullException(nameof(repository));\n    }\n```", "```cs\n public async Task<int> AddStockAsync(int productId, int amount, CancellationToken cancellationToken)\n    {\n        var product = await _repository.FindByIdAsync(productId, cancellationToken);\n        if (product == null)\n        {\n            throw new ProductNotFoundException(productId);\n        }\n        product.AddStock(amount);\n        await _repository.UpdateAsync(product, cancellationToken);\n        return product.QuantityInStock;\n    }\n```", "```cs\n public async Task<int> RemoveStockAsync(int productId, int amount, CancellationToken cancellationToken)\n    {\n        var product = await _repository.FindByIdAsync(productId, cancellationToken);\n        if (product == null)\n        {\n            throw new ProductNotFoundException(productId);\n        }\n        product.RemoveStock(amount);\n        await _repository.UpdateAsync(product, cancellationToken);\n        return product.QuantityInStock;\n    }\n}\n```"]