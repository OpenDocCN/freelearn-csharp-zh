- en: 'Chapter 4: Creating Projects and Templates'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A template within Visual Studio is a set of files, references, project properties,
    and compilation options for working with a particular technology. Templates provide
    us with basic code to work with and acts as a guide that we can follow and complete
    by including our business logic and requirements. Different templates are installed
    according to the workloads that have been selected during Visual Studio installation,
    although there are templates that will be installed by default, such as class
    libraries. Depending on the project or technology we want to use, we will find
    different template options to choose from. Selecting the right template that fits
    your needs is the best action that you can take to evade technical debt and future
    issues in your architecture.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will analyze the main web development templates provided
    by Visual Studio 2022 and the options available to customize these templates.
    Also, during this chapter, we will understand how to pick the best template for
    our projects, considering the scope, requirements, and expertise of the team.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will review the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Selecting and searching for templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Templates for .NET Core
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Templates for **application programming interfaces** (**APIs**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Templates for .NET Framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Templates for **single-page application** (**SPA**) projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's see what these templates are all about and how to work with them.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To follow along with this chapter, you must have previously installed Visual
    Studio 2022 with the web development workload, as shown in [*Chapter 1*](B17873_01_ePub.xhtml#_idTextAnchor013),
    *Getting Started with Visual Studio 2022*.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can check out the changes made to the project at the following link: [https://github.com/PacktPublishing/Hands-On-Visual-Studio-2022/tree/main/Chapter04](https://github.com/PacktPublishing/Hands-On-Visual-Studio-2022/tree/main/Chapter04)'
  prefs: []
  type: TYPE_NORMAL
- en: Selecting and searching for templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned in the introduction of this chapter, Visual Studio has many templates
    that we can use with .NET and other technologies, depending on the type of project
    you are working on.
  prefs: []
  type: TYPE_NORMAL
- en: 'To explore the templates in Visual Studio 2022, just open Visual Studio and
    select the **Create a new project** option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.1 – The Visual Studio Create a new project option](img/Figure_4.01_B17873.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.1 – The Visual Studio Create a new project option
  prefs: []
  type: TYPE_NORMAL
- en: 'After selecting this option, we will see a list of templates to choose from
    for creating our new project, as shown in *Figure 4.2*. Similarly, on the left
    side, we will be able to see the templates we have recently selected, with the
    option to pin or unpin each template, so that we can quickly select the templates
    that we use the most:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.2 – The option to pin or unpin a template in the Recent project
    templates section](img/Figure_4.02_B17873.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.2 – The option to pin or unpin a template in the Recent project templates
    section
  prefs: []
  type: TYPE_NORMAL
- en: In *Figure 4.2*, we also see a search bar at the top for filtering the different
    templates. If you know the name or the technology that you will use, you can type
    the term related to it and start searching for the template. The search engine
    will show you all the templates that include the term you have entered.
  prefs: []
  type: TYPE_NORMAL
- en: 'Below the search bar, we can also see three drop-down controls, which also
    serve as filters to search for templates related to the programming language,
    platforms, or types of projects we want to create. Among the most important options
    for each of these filters, we can find the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**All languages**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**C#**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JavaScript**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Python**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TypeScript**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Visual Basic**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**All platforms**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Android**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**iOS**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Linux**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Windows**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**All project types**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cloud**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Desktop**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Games**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Machine Learning**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mobile**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Test**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Web**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In addition, it is possible to combine the filters with the search bar. For
    example, you can type `.NET Core` and select the **C#** option in the language
    drop-down menu to get all the projects related to .NET Core and C#, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.3 – The .NET Core templates for C#'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.03_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.3 – The .NET Core templates for C#
  prefs: []
  type: TYPE_NORMAL
- en: In *Figure 4.3*, we can see many kinds of projects related to .NET Core that
    Visual Studio has found, according to the filters and workloads selected during
    installation.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the end of the results, you will have an option to install other templates
    if you cannot find the option that you are looking for:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.4 – The option to install more tools and features in Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.04_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.4 – The option to install more tools and features in Visual Studio
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that each template has a description including the details
    related to the template, so we can easily identify whether the template includes
    the structure and schema that we need.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, when the description of the template contains the **Empty** keyword,
    it means that the template doesn't contain elements or modules by default and
    includes either demos or examples, such as a guide, for the developer. This kind
    of template only includes the project and the base components to compile and run.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know how to use the template selection window, let's look at the
    most important templates for web development.
  prefs: []
  type: TYPE_NORMAL
- en: Templates for .NET Core
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start this section knowing the difference between .NET Core and ASP.NET
    Core:'
  prefs: []
  type: TYPE_NORMAL
- en: .NET Core (now called .NET) is a cross-platform, free, and open source framework
    used to create web, desktop, mobile, and other kinds of applications, using a
    standard library and C#, Visual Basic, or F# as a programming language.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ASP.NET Core, on the other hand, is a multi-platform web technology for creating
    modern applications using .NET. This is why, although the .NET Core framework
    has been replaced with .NET 6, you will still find terms related to .NET Core
    as a part of the templates.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If we want to create a new clean project of the ASP.NET Core type, we can search
    and select the `AspCoreEmpty`.
  prefs: []
  type: TYPE_NORMAL
- en: Also, we must indicate the location to save the project. You can choose to leave
    the default path, or select a custom path, such as `C:\demos\AspCoreEmpty`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, set the name of the solution. By default, it will be the same as the
    project, but you can change it to another name. In *Figure 4.5*, we have kept
    the same name:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.5 – Configuring a new ASP.NET Core Empty project'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.05_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.5 – Configuring a new ASP.NET Core Empty project
  prefs: []
  type: TYPE_NORMAL
- en: 'After clicking on the **Next** button, you will be shown a new window, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.6 – Creating the ASP.NET Core Empty project'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.06_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.6 – Creating the ASP.NET Core Empty project
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in *Figure 4.6*, you can configure the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Framework**: This dropdown will show you the set of frameworks available
    to work with the selected technology. Although it is possible to select older
    frameworks, it is always advisable to create new projects with the latest version
    of the framework available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configure for HTTPS**: This checkbox allows you to configure the project
    to use a self-signed SSL certificate. If you are working on such a project for
    the first time, you will be asked to trust the certificate when you run the application
    so that everything works correctly. Although it is possible to work with the HTTP
    protocol, it is always recommended to use HTTPS in real life.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enable Docker**: This option allows you to enable Docker support in your
    project. This means that a Docker file will be generated, which you can then publish
    – for example, to Microsoft Azure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In our example (*Figure 4.6*), we select **.NET 6** as a target framework. The
    **Configure for HTTPS** option is marked by default, and it is optional for this
    demo. Finally, you can click on **Create** to complete the wizard and create the
    project.
  prefs: []
  type: TYPE_NORMAL
- en: 'After creating the project, we can analyze the structure of the created project,
    which is simple, as shown in *Figure 4.7*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.7 – The ASP.NET Core Empty project in Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.07_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.7 – The ASP.NET Core Empty project in Visual Studio
  prefs: []
  type: TYPE_NORMAL
- en: In the panel called **Solution Explorer**, we can see all the files related
    to the template created for the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are only two files related to the structure of the project, which are
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`appsettings.json`: This is a JSON file that contains all the settings by default
    for an ASP.NET Core project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Program.cs`: This is the entry point of an application that contains a sequence
    of commands to configure and start the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this template we have selected, a new concept introduced in .NET 6 is used,
    called Minimal APIs, which is a way to have the minimum code necessary to create
    a simple endpoint, using helper functions inside `Program.cs`.
  prefs: []
  type: TYPE_NORMAL
- en: By default, when the application is executed, it will show a `GET` method and
    mapped into the base URL – for example, `http://myapiurl/`.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: Minimal API is a new template included in .NET 6 that is very useful for creating
    simple APIs, such as demos, small services, serverless functions, and microservices.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s create a new project with the `ASPNET` and select the **ASP.NET
    Core Web App** template:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.8 – Searching by ASPNET and selecting the ASP.NET Core Web App template'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.08_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.8 – Searching by ASPNET and selecting the ASP.NET Core Web App template
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, click on **Next** and fill out the information required for the new project,
    as shown in *Figure 4.9*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.9 – Configuring the new ASP.NET Core Web App project'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.9_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.9 – Configuring the new ASP.NET Core Web App project
  prefs: []
  type: TYPE_NORMAL
- en: 'After filling out the additional information for the project, as seen in *Figure
    4.10*, you can click on the **Create** button to generate the project with the
    ASP.NET Core Web App template:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.10 – Additional options for the new ASP.NET Core Web App template'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.10_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.10 – Additional options for the new ASP.NET Core Web App template
  prefs: []
  type: TYPE_NORMAL
- en: This template is perfect if you want to create a web application using .NET
    and C# running on the server. Also, it uses razor pages (syntaxes that combine
    C# with HTML in `cshtml` extension files) to build a web application into small
    and reusable pieces.
  prefs: []
  type: TYPE_NORMAL
- en: Modern applications normally run in the browser because they run faster and
    have a better **search engine optimization** (**SEO**), which improves the traffic
    to your website. However, server-side applications are still very useful for dashboards,
    internal projects, administration panels, and many other types of web applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'An ASP.NET Core Web project contains a `wwwroot` folder, which you can see
    in *Figure 4.11*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.11 – The structure of an ASP.NET Web project'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.11_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.11 – The structure of an ASP.NET Web project
  prefs: []
  type: TYPE_NORMAL
- en: The `wwwroot` folder is associated with static files such as CSS, images, and
    JavaScript files. There is also a folder called `Pages` that contains all the
    UI pieces.
  prefs: []
  type: TYPE_NORMAL
- en: '`Index.cshtml` is an example where you can see C# code mixed with HTML code.
    The `@` character allows you to use the C# code in the file. `@model`, for example,
    sets the model type to map the values on the page.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Other kinds of .NET Core project templates include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Console App**: This template creates a simple console application. Normally,
    we use this kind of application when we are starting out and learning.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Class Library**: This allows you to create components and classes to share
    across different projects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Templates for APIs**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Templates for SPAs**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are the recommended templates, as they are the most updated and in line
    with the latest versions of .NET.
  prefs: []
  type: TYPE_NORMAL
- en: Templates for APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Today, it is almost a rule that applications use API-based endpoints. This is
    because they provide a high level of security and interoperability by not depending
    on a particular technology or operating system, and they can be scaled according
    to the existing demand. Also, we can implement advanced architecture, such as
    microservices using APIs, where all our business logic is distributed in small
    isolated and standalone services.
  prefs: []
  type: TYPE_NORMAL
- en: 'Due to the great importance of being able to develop solutions based on APIs,
    Visual Studio 2022 incorporates a special template so that we can create APIs
    based on .NET 6, which we can search by filtering the `api` term, as can be seen
    in *Figure 4.12*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.12 – Filtering by API and selecting the ASP.NET Core Web API'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.12_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.12 – Filtering by API and selecting the ASP.NET Core Web API
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have selected the template, we will have to fill in the complementary
    information, according to our needs, as seen in *Figure 4.13*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.13 – Configuring the ASP.NET Core Web API project'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.13_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.13 – Configuring the ASP.NET Core Web API project
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next window, we will be asked to select the version of the framework
    and whether we require some type of authentication, among other data that we have
    already seen in the *Templates for .NET Core* section. However, we have a couple
    of additional options that we do not see in a normal ASP.NET Core project, which
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**User controllers**: If this option is selected, the use of controller files
    will be enabled from the configuration. If it is deselected, a feature called
    minimal APIs will be used, which will create the minimum code necessary to have
    a functional API.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enable OpenAPI support**: Swagger is a set of open source tools based on
    the OpenAPI specification that will allow us to describe the APIs we create in
    a simple, easy, and well-structured way, providing API users with good documentation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For our example, we will leave both options selected, as seen in *Figure 4.14*,
    so that you can see the resulting structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.14 – Selecting options in Additional information for the ASP.NET
    Core Web API project'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.14_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.14 – Selecting options in Additional information for the ASP.NET Core
    Web API project
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the project has been created, we can see that a folder called `Controllers`
    has been created as part of the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.15 – The structure of an ASP.NET Core API project'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.15_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.15 – The structure of an ASP.NET Core API project
  prefs: []
  type: TYPE_NORMAL
- en: In the `Controllers` folder, we will find the controllers that will be created
    as part of the API. Remember that we can see the controllers in this folder because
    of the **Use controllers** option we selected in *Figure 4.14*.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run or execute the application, we need to use the green arrow or play icon
    in the standard toolbar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.16 – The play button to start the project in Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.16_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.16 – The play button to start the project in Visual Studio
  prefs: []
  type: TYPE_NORMAL
- en: We can start the project with debugging on or off. In this case, either option
    is fine. We just want to see how the project looks.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: There are some useful shortcuts to start a project. You can use *F5* on your
    keyboard to run the project in debugging mode, and *Ctrl* + *F5* to start the
    project without debugging.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we proceed to run the application, it will immediately take us to a window
    with the URL ending at `/swagger/index.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.17 – The Swagger page for the ASP.NET Web API project'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.17_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.17 – The Swagger page for the ASP.NET Web API project
  prefs: []
  type: TYPE_NORMAL
- en: Here, we will be able to find all the functionality available in our API documented
    through Swagger – this means all the endpoints that we create from the controllers
    in our project. Swagger is a library that uses the OpenAPI standard to show all
    the endpoints, including the parameters required and the type of values returned.
  prefs: []
  type: TYPE_NORMAL
- en: From this same page, we will be able to test each one of the endpoints, for
    the purpose of validating them, and carry out necessary debugging when some endpoint
    does not work as expected. As you can appreciate, this tool is of great help,
    both for development purposes and for providing users with documentation of the
    created API.
  prefs: []
  type: TYPE_NORMAL
- en: This template gives us everything we need to create our own modern APIs from
    scratch. Let's now take a look at the templates available for working with .NET
    Framework.
  prefs: []
  type: TYPE_NORMAL
- en: Templates for .NET Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: .NET Framework is the original implementation of .NET, released by Microsoft
    in 2002\. The long-term idea was to make this framework a multi-platform framework.
    Unfortunately, it always worked officially on Windows devices, due to API restrictions.
    To solve this problem, specific versions of the framework were created to support
    different platforms, which caused a fragmentation of the platform. Through the
    experience gathered from these projects launched over time, the Microsoft team
    has finally succeeded in unifying the .NET platform.
  prefs: []
  type: TYPE_NORMAL
- en: As, for many years, the .NET Framework platform was the primary framework for
    developing .NET applications, many companies around the world use ASP.NET Web
    Forms, MVC, or Web API applications, based on .NET Framework. This is the reason
    why .NET Framework templates are still included in Visual Studio. This does not
    mean that it is advisable to create applications using such templates. You should
    always opt for the use of modern technologies that have current and constant support.
  prefs: []
  type: TYPE_NORMAL
- en: 'Although there are several templates with .NET Framework, there is one that
    really interests us for web development. This is called `net framework` term,
    as seen in *Figure 4.18*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.18 – Searching with net framework'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.18_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.18 – Searching with net framework
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you select the template, in the next window, you will see numerous fields
    to fill in, which will be familiar to you, such as the project name and location,
    among other data. The important point is to note that we have a dropdown that
    shows us a significant number of versions of .NET Framework that we can work with.
    We will select the last version in this example, as you can see in *Figure 4.19*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.19 – Configuring ASP.NET Web Application (.NET Framework)'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.19_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.19 – Configuring ASP.NET Web Application (.NET Framework)
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we have selected the framework, we can choose what type of application
    we want to create – the options include a clean project, templates for web forms,
    MVC-based projects, web APIs, and single-page applications, as seen in *Figure
    4.20*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.20 – The type of web applications for .NET Framework in Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.20_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.20 – The type of web applications for .NET Framework in Visual Studio
  prefs: []
  type: TYPE_NORMAL
- en: The selection of these templates will depend on the needs of the application,
    although, as mentioned at the beginning of this section, it is recommended to
    opt for templates that are oriented toward .NET.
  prefs: []
  type: TYPE_NORMAL
- en: Let's move on to review the category of SPA's templates, which is oriented toward
    the creation of applications with which users will interact.
  prefs: []
  type: TYPE_NORMAL
- en: Templates for SPAs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SPAs is an amazing architecture for web projects, where all the elements are
    rendered using a single **HyperText Markup Language** (**HTML**) file. There are
    a good number of libraries and frameworks that use this concept – for example,
    Angular, React.js, and Blazor WebAssembly.
  prefs: []
  type: TYPE_NORMAL
- en: Any project created with these templates will contain all the required components
    to create a monolithic application, using ASP.NET on the backend and a SPA library
    or framework on the frontend side.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create our first SPA project with Visual Studio. You can search for
    `ASP.NET Core with` to find the templates for SPAs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.21 – Searching by ASP.NET Core with'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.21_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.21 – Searching by ASP.NET Core with
  prefs: []
  type: TYPE_NORMAL
- en: 'In *Figure 4.21*, you can see the result of searching by `ASP.NET Core with`.
    There are three templates that we can select to work with SPAs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ASP.NET Core with Angular**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ASP.NET Core with React.js**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ASP.NET Core with React.js and Redux**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will create a project with React.js, so let''s select **ASP.NET Core with
    React.js** and then click on **Next** to continue:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.22 – Configuring ASP.NET Core with the React.js project'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.22_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.22 – Configuring ASP.NET Core with the React.js project
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: This project that you will create is going to be used for the next exercises
    in this book, so it's important to save this code in a permanent folder that you
    prefer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, you should select **.NET 6 (Long-term support)** as a **Framework** target
    and **None** in **Authentication type**, and finally, click on **Create**, as
    shown in *Figure 4.23*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.23 – Filling out the Additional information section'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.23_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.23 – Filling out the Additional information section
  prefs: []
  type: TYPE_NORMAL
- en: 'After clicking on **Create**, you can see the project created with the SPA
    template and analyze the architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.24 – The ASP.NET Core project with the React.js project created
    in Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.24_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.24 – The ASP.NET Core project with the React.js project created in
    Visual Studio
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three important folders to highlight in this template:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ClientApp**: Contains the client application – in this case, a React.js app'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Controllers**: Contains all the controllers related to the business logic
    on a server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pages**: Contains razor pages, which means UI components rendered on a server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The template has a demo with the `WeatherForecastController.cs` file. This is
    a simple demo that returns some random data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s run the project by clicking the play button, as shown in *Figure 4.25*,
    to see how the application looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.25 – The option to run the project in Visual Studio (the green arrow
    or play icon)'
  prefs: []
  type: TYPE_NORMAL
- en: tt
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.25_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.25 – The option to run the project in Visual Studio (the green arrow
    or play icon)
  prefs: []
  type: TYPE_NORMAL
- en: 'When the project is running, you can see a simple HTML page explaining how
    the template works, which includes two demos, **Counter** and **Fetch data**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.26 – ASP.NET Core with the React.js project running'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.26_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.26 – ASP.NET Core with the React.js project running
  prefs: []
  type: TYPE_NORMAL
- en: The template is simple but includes everything that we need for creating a new
    web application using a monolithic architecture and best practices on the backend
    and frontend sides. If you require a web application with high-performance security,
    this template is a good option. React.js uses JavaScript in the syntaxes, so for
    this template, you need more knowledge of this language and C# for the backend.
    In the template that we analyzed in the *Templates for .NET Core* section, C#
    was more important than JavaScript for writing our UI and business logic.
  prefs: []
  type: TYPE_NORMAL
- en: We will perform some modifications in this project, and we will use the files
    and demos by default to analyze the tools in Visual Studio and learn how to take
    advantage of these amazing functionalities.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visual Studio has different options for creating projects, using templates depending
    on the workload added during the installation process. We have four filters to
    search quickly in the templates. Though we can filter by language, platform, and
    project type, we also have the possibility to use the search bar to find our template,
    using a term or a specific word.
  prefs: []
  type: TYPE_NORMAL
- en: After selecting the template to use, we must always type a project name and
    the folder where our project is going to be created. Then, we must select the
    target framework and some optional information. Visual Studio is going to open
    the project after selecting **Create** on the screen, so we have the possibility
    to start working on our project right away.
  prefs: []
  type: TYPE_NORMAL
- en: Using **Solution Explorer**, we can see the structure of the project, including
    the folders used in the application. Normally, a project created with a template
    contains a demo that helps us to verify whether an application is running fine.
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 5*](B17873_05_ePub.xhtml#_idTextAnchor060), *Debugging and Compiling
    Your Projects*, we will debug our created SPA project. We will understand why
    this tool is important, and we will check the options to compile our project before
    executing it.
  prefs: []
  type: TYPE_NORMAL
