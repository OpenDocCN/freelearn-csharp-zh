["```cs\n    using System.Text;\n    using System.Security.Cryptography;\n    using UnityEngine;\n    using UnityEngine.UI;\n    using PlayFab;\n    using PlayFab.ClientModels;\n    public class AzurePlayFabAccountManager :\n      MonoBehaviour\n    {\n        [SerializeField]\n        private InputField _userName, _email, _password;\n        [SerializeField]\n        private Text _message;\n        public void OnSignUpButtonClick()\n        {\n            var userRequest = new\n              RegisterPlayFabUserRequest\n            {\n                Username = _userName.text,\n                Email = _email.text,\n                Password = Encrypt(_password.text)\n            };\n            PlayFabClientAPI.RegisterPlayFabUser(userRequest,\n              OnRegisterSuccess, OnError);\n        }\n      public void\n       OnRegisterSuccess(RegisterPlayFabUserResult result)\n        {\n            _message.text = \"created a new account!\";\n            var displayNameRequest = new\n              UpdateUserTitleDisplayNameRequest\n            {\n                DisplayName = result.Username\n            };\n               PlayFabClientAPI.\n                 UpdateUserTitleDisplayName(display\n                 NameRequest, OnUpdateDisplayNameSuccess, \n                 OnError);\n        }\n        public void OnError(PlayFabError error)\n        {\n            _message.text = error.ErrorMessage;\n        }\n        private static string Encrypt(string input)\n        {\n            var md5 = new MD5CryptoServiceProvider();\n            var bytes = Encoding.UTF8.GetBytes(input);\n            bytes = md5.ComputeHash(bytes);\n            return Encoding.UTF8.GetString(bytes);\n        }\n    }\n    ```", "```cs\n    // ... pre-existing code ...\n    using UnityEngine.SceneManagement;\n    //... pre-existing code ...\n        public void OnLoginButtonClick()\n        {\n            var userRequest = new\n              LoginWithEmailAddressRequest\n            {\n                Email = _email.text,\n                Password = Encrypt(_password.text)\n            };\n            PlayFabClientAPI.\n              LoginWithEmailAddress(userRequest,\n      OnLoginSuccess, OnError);\n        }\n        public void OnLoginSuccess(LoginResult result)\n        {\n            _message.text = \"login successful!\";\n            StartGame();\n        }\n        private static void StartGame()\n        {\n            SceneManager.LoadScene(1);\n        }\n    ```", "```cs\n    using System.Collections.Generic;\n    using UnityEngine;\n    using PlayFab;\n    using PlayFab.ClientModels;\n    public class AzurePlayFabLeaderboardManager :\n      MonoBehaviour\n    {\n        public void UpdateLeaderboardInAzurePlayFab(int\n           score)\n        {\n            var scoreUpdate = new StatisticUpdate\n            {\n                StatisticName = \"UnityBookGame\",\n                Value = score\n            };\n            var scoreUpdateList = new\n              List<StatisticUpdate> { scoreUpdate };\n            var scoreRequest = new\n              UpdatePlayerStatisticsRequest\n            {\n                Statistics = scoreUpdateList\n            };\n            PlayFabClientAPI.UpdatePlayerStatistics\n              (scoreRequest, OnUpdateSuccess, OnError);\n        }\n        public void OnUpdateSuccess\n          (UpdatePlayerStatisticsResult result) \n        {\n            Debug.Log(\"Update Success!\");\n        }\n        public void OnError(PlayFabError error) \n        {\n            Debug.LogError(error.ErrorMessage);\n        }\n    }\n    ```", "```cs\n    // ... pre-existing code ...\n      [SerializeField]\n      private AzurePlayFabLeaderboardManager \n        _azurePlayFabLeaderboardManager;\n    // ... pre-existing code ...\n      public void GameOver()\n        {\n        _azurePlayFabLeaderboardManager.\n          UpdateLeaderboardInAzurePlayFab(score);\n        }\n    ```", "```cs\n     // ... pre-existing code ...\n        public void LoadLeaderboardDataFromAzurePlayFab()\n        {\n            var loadRequest = new GetLeaderboardRequest\n            {\n                StatisticName = \"UnityBookGame\",\n                StartPosition = 0,\n                MaxResultsCount = 10\n            };\n            PlayFabClientAPI.GetLeaderboard(loadRequest,\n              OnLoadSuccess, OnError);\n        }\n    // ... pre-existing code ...\n        public void OnLoadSuccess(GetLeaderboardResult\n          result)\n        {\n            Debug.Log(\"Load Success!\");\n        }\n    ```", "```cs\n    public void GameOver()\n    {\n      _azurePlayFabLeaderboardManager.\n        UpdateLeaderboardInAzurePlayFab(score);\n      _azurePlayFabLeaderboardManager.\n        LoadLeaderboardDataFromAzurePlayFab();\n     }\n    ```", "```cs\n    // ... pre-existing code ...\n        [SerializeField]\n        private GameObject _leaderboardUIPanel;\n        [SerializeField]\n        private List<Text> _itemsText;\n    // ... pre-existing code ...\n        public void OnLoadSuccess(GetLeaderboardResult\n          result)\n        {\n            _leaderboardUIPanel.SetActive(true);\n            CreateRankingItemsInUnity(result.Leaderboard);\n        }\n        private void CreateRankingItemsInUnity\n          (List<PlayerLeaderboardEntry> items)\n        {\n            foreach(var item in items)\n            {\n                var itemText = _itemsText[item.Position];\n                itemText.text = $\"{item.Position + 1}:\n                {item.Profile.DisplayName} –\n                  {item.StatValue}\";\n            }\n        }\n    ```"]