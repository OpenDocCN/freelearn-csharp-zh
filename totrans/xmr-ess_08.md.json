["```cs\npublic partial class ParkDetailPage : ContentPage\n{\n    . . .\n    public void EditClicked(object sender, EventArgs e)\n    {\n        Navigation.PushModalAsync (\n            new ParkEditPage (_park));\n    }\n}\n```", "```cs\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<ContentPage xmlns=\"http://xamarin.com/schemas/...\n    xmlns:x=\"http://schemas.microsoft.com/winfx...\n    x:Class=\"NationalParks.ParkEditPage\">\n  <StackLayout Orientation=\"Vertical\"\n    HorizontalOptions=\"StartAndExpand\">\n    <Grid>\n      <Grid.ColumnDefinitions>\n        <ColumnDefinition Width=\"Auto\" />\n        <ColumnDefinition Width=\"*\" />\n        </Grid.ColumnDefinitions>\n        <Label\n          Text=\"Name:\"\n          Grid.Row=\"0\" Grid.Column=\"0\" />\n  <Entry\n          x:Name=\"descriptionEntry\"\n          Text=\"{Binding Name}\"\n          Grid.Row=\"0\" Grid.Column=\"1\"\n          HorizontalOptions=\"FillAndExpand\" />\n  . . .\n   </Grid>\n   <Button\n       x:Name=\"doneButton\" \n       Text=\"Done\"\n       Clicked=\"DoneClicked\" />\n  </StackLayout>\n</ContentPage>\n```", "```cs\npublic partial class ParkEditPage : ContentPage\n{\n  NationalPark _park;\n  public ParkEditPage()\n  {\n    InitializeComponent ();\n  }\n  protected void DoneClicked(object sender, EventArgs e)\n  {\n    // perform event handler logic\n  }\n}\n```", "```cs\npublic partial class ParkEditPage : ContentPage {\n    private Entry nameEntry;    \n    . . .    \n    private Button doneButton;  \n    private void InitializeComponent() {\n        this.LoadFromXaml(typeof(ParkEditPage));\n        nameEntry =\n          this.FindByName <Entry>(\"nameEntry\");\n        . . .\n        doneButton =\n          this.FindByName <Button>(\"doneButton\");\n    }\n}\n```", "```cs\n    <Entry x:Name=\"nameEntry\"\n        Text=\"{Binding Name}\"\n        Grid.Row=\"0\" Grid.Column=\"1\"\n        HorizontalOptions=\"FillAndExpand\" />\n```", "```cs\npublic ParkEditPage (NationalPark park)\n{\n    InitializeComponent ();\n    _park = park;\n    BindingContext = _park;\n}\n```", "```cs\nparksListView.ItemsSource =\n  NationalParksData.Instance.Parks;\n```", "```cs\npublic class App\n{\n    public static Page GetMainPage()\n    {\n        return new HelloWorldPage();\n    }\n}\n```", "```cs\n[Register(\"AppDelegate\")]\npublic partial class AppDelegate : UIApplicationDelegate\n{\n  UIWindow window;\n  public override bool FinishedLaunching(UIApplication app, NSDictionary options)\n  {\n    Forms.Init();\n    window = new UIWindow(UIScreen.MainScreen.Bounds);\n    window.RootViewController =\n        App.GetMainPage().CreateViewController();\n    window.MakeKeyAndVisible();\n    return true;\n  }\n}\n```", "```cs\nnamespace HelloWorld.Android\n{\n    [Activity(Label=\"HelloWorld\", MainLauncher=true)]\n    public class MainActivity : AndroidActivity\n    {\n        protected override void OnCreate(Bundle bundle)\n        {\n            base.OnCreate(bundle);\n            Xamarin.Forms.Forms.Init(this, bundle);\n            SetPage(App.GetMainPage());\n        }\n    }\n}\n```", "```cs\n    <StackLayout Orientation=\"Vertical\"\n        HorizontalOptions=\"StartAndExpand\">\n        <ListView x:Name=\"parksListView\"\n            IsVisible=\"true\"\n            ItemSelected=\"ParkSelected\">\n        </ListView>\n        <Button Text=\"New\"\n      Clicked=\"NewClicked\" />\n    </StackLayout>\n    ```", "```cs\n    <ListView.ItemTemplate>\n      <DataTemplate>\n        <ViewCell>\n           <ViewCell.View>\n         <StackLayout Orientation=\"Vertical\"\n               HorizontalOptions=\"StartAndExpand\">\n               <Label Text=\"{Binding Name}\"\n                 HorizontalOptions=\"FillAndExpand\" />\n             </StackLayout>\n          </ViewCell.View>\n        </ViewCell>\n      </DataTemplate>\n    </ListView.ItemTemplate>\n    ```", "```cs\n    public static Page GetMainPage ()\n    {\n        NavigationPage mainPage =\n            new NavigationPage(new ParksListPage());\n        return mainPage;\n    }\n    ```", "```cs\n    // Initialize data service\n    NationalParksData.Instance.DataDir =\n        Environment.CurrentDirectory;\n    NationalParksData.Instance.FileHandler =\n        new FileHandler ();\n    ```", "```cs\n    // Initialize data service\n    NationalParksData.Instance.DataDir =\n        System.Environment.GetFolderPath(\n            System.Environment.SpecialFolder.MyDocuments);\n    NationalParksData.Instance.FileHandler =\n        new FileHandler ();\n    ```", "```cs\n    public async Task LoadData()\n    {\n      await NationalParksData.Instance.Load();\n      parksListView.ItemsSource =\n          NationalParksData.Instance.Parks;\n    }\n    ```", "```cs\n      InitializeComponent ();\n      LoadData ();\n    ```", "```cs\n    <Grid>\n        <Grid.ColumnDefinitions>\n            <ColumnDefinition Width=\"Auto\" />\n            <ColumnDefinition Width=\"*\" />\n        </Grid.ColumnDefinitions>\n        <Label Text=\"Name:\"\n            Grid.Row=\"0\" Grid.Column=\"0\" />\n        <Label Text=\"{Binding Name}\"\n            Grid.Row=\"0\" Grid.Column=\"1\"\n            HorizontalOptions=\"FillAndExpand\" />\n        . . .\n    </Grid>\n    ```", "```cs\n    <Button Text=\"Edit\"\n                  WidthRequest=\"175\"\n                  HorizontalOptions=\"Center\"\n                  Clicked=\"EditClicked\" />\n    <Button Text=\"Directions\"\n                  WidthRequest=\"175\"\n                  HorizontalOptions=\"Center\"\n                  Clicked=\"DirectionsClicked\" />\n    <Button Text=\"Photos\"\n                  WidthRequest=\"175\"\n                  HorizontalOptions=\"Center\"\n                  Clicked=\"PhotosClicked\" />\n    ```", "```cs\n    NationalPark _park;\n    public ParkDetailPage (NationalPark park)\n    {\n    InitializeComponent ();\n      _park = park;\n      BindingContext = _park;\n    }\n    ```", "```cs\n    protected void ParkSelected(object sender,\n    SelectedItemChangedEventArgs e)\n    {\n        Navigation.PushAsync (new\n            ParkDetailPage ((NationalPark) e.SelectedItem));\n    }\n    ```", "```cs\n    public interface IParkInfoServices\n    {\n        void ShowDirections(NationalPark park);\n        void ShowPhotos(NationalPark park);\n    }\n    ```", "```cs\n    public void ShowDirections(NationalPark park)\n    {\n      if ((park.Latitude.HasValue) &&\n          (park.Longitude.HasValue))\n      {\n        NSUrl url = new NSUrl (\n            String.Format (\n     \"http://maps.apple.com/maps?daddr={0},{1}&saddr=CurrentLocation\", park.Latitude, park.Longitude));\n\n        UIApplication.SharedApplication.OpenUrl (url);\n      }\n    }\n    public void ShowPhotos(NationalPark park)\n    {\n        UIApplication.SharedApplication.OpenUrl (\n            new NSUrl(String.Format (\n              \"http://www.bing.com/images/search?q={0}\",\n              park.Name)));\n    }\n    ```", "```cs\n    [assembly: Dependency (typeof (iOSParkInfoServices))]\n    namespace NationalParks.iOS\n    {\n        . . .\n    ```", "```cs\n    public void ShowDirections(NationalPark park)\n    {\n      if ((park.Latitude.HasValue) &&\n        (park.Longitude.HasValue))\n     {\n         Intent mapIntent = new Intent (Intent.ActionView,\n          Android.Net.Uri.Parse (\n         String.Format (\"geo:0,0?q={0},{1}&z=16 ({2})\",\n                park.Latitude, park.Longitude,\n                park.Name)));\n          Forms.Context.StartActivity (mapIntent);\n      }\n    }\n    public void ShowPhotos(NationalPark park)\n    {\n      Intent urlIntent = new Intent (Intent.ActionView);\n      urlIntent.SetData (Android.Net.Uri.Parse (\n            String.Format (\n            \"http://www.bing.com/images/search?q={0}\",\n            park.Name)));\n      Forms.Context.StartActivity (urlIntent);\n    }\n    ```", "```cs\n    [assembly: Dependency (typeof (AndroidParkInfoServices))]\n    namespace NationalParks.iOS\n    {\n        . . .\n    ```", "```cs\npublic void DirectionsClicked(\n    object sender, EventArgs e)\n{\n    DependencyService.Get<IParkInfoServices> ().\n        ShowDirections (_park);\n}\npublic void PhotosClicked(\n    object sender, EventArgs e)\n{\n    DependencyService.Get<IParkInfoServices> ().\n        ShowPhotos (_park);\n}\n```", "```cs\n    <Label Text=\"Name:\"\n        Grid.Row=\"0\" Grid.Column=\"0\" />\n    <Entry x:Name=\"nameEntry\"\n        Text=\"{Binding Name}\"\n        Grid.Row=\"0\" Grid.Column=\"1\"\n        HorizontalOptions=\"FillAndExpand\" />\n    ```", "```cs\n    <Button x:Name=\"doneButton\"\n                 Text=\"Done\"\n                  WidthRequest=\"175\"\n                  HorizontalOptions=\"Center\"\n                  Clicked=\"DoneClicked\" />\n    ```", "```cs\n    public ParkEditPage()\n    {\n    InitializeComponent ();\n      _park = new NationalPark ();\n      BindingContext = _park;\n    }\n    public ParkEditPage (NationalPark park)\n    {\n      InitializeComponent ();\n      _park = park;\n      BindingContext = _park;\n    }\n    ```", "```cs\n    protected void DoneClicked(object sender, EventArgs e)\n    {\n        NationalParksData.Instance.Save(_park);\n        Navigation.PopAsync ();\n    }\n    ```", "```cs\n    public void EditClicked(object sender, EventArgs e)\n    {\n       Navigation.PushAsync(new ParkEditPage(_park));\n    }\n    ```", "```cs\n    protected void NewClicked(object sender, EventArgs e)\n    {\n        Navigation.PushAsync(new ParkEditPage());\n    }\n    ```"]