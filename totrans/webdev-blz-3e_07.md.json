["```cs\napp.MapGet(\"/api/helloworld\", () => \"Hello world!\"); \n```", "```cs\n    using Data.Models;\n    using Data.Models.Interfaces;\n    using Microsoft.AspNetCore.Authorization;\n    using Microsoft.AspNetCore.Mvc; \n    ```", "```cs\n    public static class BlogPostEndpoints\n    {\n        public static void MapBlogPostApi(this WebApplication app)\n        {\n            app.MapGet(\"/api/BlogPosts\",\n            async (IBlogApi api, [FromQuery] int numberofposts, [FromQuery] int startindex) =>\n            {\n                return Results.Ok(await api.GetBlogPostsAsync(numberofposts, startindex));\n            });\n           }\n    } \n    ```", "```cs\n    using BlazorWebApp.Endpoints; \n    ```", "```cs\n    app.MapBlogPostApi(); \n    ```", "```cs\n    app.MapGet(\"/api/BlogPostCount\",\n    async (IBlogApi api) =>\n    {\n        return Results.Ok(await api.GetBlogPostCountAsync());\n    }); \n    ```", "```cs\n    app.MapGet(\"/api/BlogPosts/{*id}\",\n    async (IBlogApi api, string id) =>\n    {\n        return Results.Ok(await api.GetBlogPostAsync(id));\n    }); \n    ```", "```cs\n    app.MapPut(\"/api/BlogPosts\",\n    async (IBlogApi api, [FromBody] BlogPost item) =>\n    {\n        return Results.Ok(await api.SaveBlogPostAsync(item));\n    }).RequireAuthorization(); \n    ```", "```cs\n    app.MapDelete(\"/api/BlogPosts/{*id}\",\n    async (IBlogApi api, string id) =>\n    {\n        await api.DeleteBlogPostAsync(id);\n        return Results.Ok();\n    }).RequireAuthorization(); \n    ```", "```cs\n    using Data.Models;\n    using Data.Models.Interfaces;\n    using Microsoft.AspNetCore.Mvc;\n    namespace BlazorWebApp.Endpoints;\n    public static class CategoryEndpoints\n    {\n        public static void MapCategoryApi(this WebApplication app)\n        {\n            app.MapGet(\"/api/Categories\",\n            async (IBlogApi api) =>\n            {\n                return Results.Ok(await api.GetCategoriesAsync());\n            });\n            app.MapGet(\"/api/Categories/{*id}\",\n            async (IBlogApi api, string id) =>\n            {\n                return Results.Ok(await api.GetCategoryAsync(id));\n            });\n            app.MapPut(\"/api/Categories\",\n            async (IBlogApi api, [FromBody] Category item) =>\n            {\n                return Results.Ok(await api.SaveCategoryAsync(item));\n            }).RequireAuthorization();\n            app.MapDelete(\"/api/Categories/{*id}\",\n            async (IBlogApi api, string id) =>\n            {\n                await api.DeleteCategoryAsync(id);\n                return Results.Ok();\n            }).RequireAuthorization();\n        }\n    } \n    ```", "```cs\n    app.MapCategoryApi(); \n    ```", "```cs\n    using Data.Models;\n    using Data.Models.Interfaces;\n    using Microsoft.AspNetCore.Mvc;\n    namespace BlazorWebApp.Endpoints;\n    public static class TagEndpoints\n    {\n        public static void MapTagApi(this WebApplication app)\n        {\n            app.MapGet(\"/api/Tags\",\n            async (IBlogApi api) =>\n            {\n                return Results.Ok(await api.GetTagsAsync());\n            });\n            app.MapGet(\"/api/Tags/{*id}\",\n            async (IBlogApi api, string id) =>\n            {\n                return Results.Ok(await api.GetTagAsync(id));\n            });\n            app.MapPut(\"/api/Tags\",\n            async (IBlogApi api, [FromBody] Tag item) =>\n            {\n                return Results.Ok(await api.SaveTagAsync(item));\n            }).RequireAuthorization();          app.MapDelete(\"/api/Tags/{*id}\",\n            async (IBlogApi api, string id) =>\n            {\n                await api.DeleteTagAsync(id);\n                return Results.Ok();\n            }).RequireAuthorization();\n        }\n    } \n    ```", "```cs\n    app.MapTagApi(); \n    ```", "```cs\n    using Data.Models;\n    using Data.Models.Interfaces;\n    using Microsoft.AspNetCore.Mvc;\n    namespace BlazorWebApp.Endpoints;\n    public static class CommentEndpoints\n    {\n        public static void MapCommentApi(this WebApplication app)\n        {\n            app.MapGet(\"/api/Comments/{*blogPostid}\",\n            async (IBlogApi api, string blogPostid) =>\n            {\n                return Results.Ok(await api.GetCommentsAsync(blogPostid));\n            });\n            }).RequireAuthorization();\n            app.MapPut(\"/api/Comments\",\n            async (IBlogApi api, [FromBody] Comment item) =>\n            {\n                return Results.Ok(await api.SaveCommentAsync(item));\n            }).RequireAuthorization();\n            app.MapDelete(\"/api/Comments/{*id}\",\n            async (IBlogApi api, string id) =>\n            {\n                await api.DeleteCommentAsync(id);\n                return Results.Ok();\n        }\n    } \n    ```", "```cs\n    app.MapCommentApi(); \n    ```", "```cs\n    using Data.Models;\n    using Data.Models.Interfaces;\n    using Microsoft.AspNetCore.Components.WebAssembly.Authentication;\n    using System.Net.Http.Json;\n    using System.Text.Json; \n    ```", "```cs\n    namespace BlazorWebApp.Client;\n    public class BlogApiWebClient : IBlogApi\n    {\n    } \n    ```", "```cs\n     private readonly IHttpClientFactory _factory;\n        public BlogApiWebClient(IHttpClientFactory factory)\n        {\n            _factory = factory;\n        } \n    ```", "```cs\n    public async Task<BlogPost?> GetBlogPostAsync(string id)\n        {\n            var httpclient = _factory.CreateClient(\"Api\");\n            return await httpclient.GetFromJsonAsync<BlogPost>($\"api/BlogPosts/{id}\");\n        }\n        public async Task<int> GetBlogPostCountAsync()\n        {\n            var httpclient = _factory.CreateClient(\"Api\");\n            return await httpclient.GetFromJsonAsync<int>(\"/api/BlogPostCount\");\n        }\n        public async Task<List<BlogPost>?> GetBlogPostsAsync(int numberofposts, int startindex)\n        {\n            var httpclient = _factory.CreateClient(\"Api\");\n            return await httpclient.GetFromJsonAsync<List<BlogPost>>($\"/api/BlogPosts?numberofposts={numberofposts}&startindex={startindex}\");\n        } \n    ```", "```cs\n    public async Task<BlogPost?> SaveBlogPostAsync(BlogPost item)\n    {\n        try\n        {\n            var httpclient = _factory.CreateClient(\"Api\");\n            var response = await httpclient.PutAsJsonAsync<BlogPost>\n               (\"api/BlogPosts\", item);\n            var json = await response.Content.ReadAsStringAsync();\n            return JsonSerializer.Deserialize<BlogPost>(json);\n        }\n        catch (AccessTokenNotAvailableException exception)\n        {\n            exception.Redirect();\n        }\n        return null;\n    }\n    public async Task DeleteBlogPostAsync(string id)\n    {\n        try\n        {\n            var httpclient = _factory.CreateClient(\"Api\");\n            await httpclient.DeleteAsync($\"api/BlogPosts/{id}\");\n        }\n        catch (AccessTokenNotAvailableException exception)\n        {\n            exception.Redirect();\n        }\n    } \n    ```", "```cs\n    public async Task<List<Category>?> GetCategoriesAsync()\n    {\n        var httpclient = _factory.CreateClient(\"Api\");\n        return await httpclient.GetFromJsonAsync<List<Category>>($\"api/Categories\");\n    }\n    public async Task<Category?> GetCategoryAsync(string id)\n    {\n        var httpclient = _factory.CreateClient(\"Api\");\n        return await httpclient.GetFromJsonAsync<Category>($\"api/Categories/{id}\");\n    }\n    public async Task DeleteCategoryAsync(string id)\n    {\n        try\n        {\n            var httpclient = _factory.CreateClient(\"Api\");\n            await httpclient.DeleteAsync($\"api/Categories/{id}\");\n        }\n        catch (AccessTokenNotAvailableException exception)\n        {\n            exception.Redirect();\n        }\n    }\n    public async Task<Category?> SaveCategoryAsync(Category item)\n    {\n        try\n        {\n            var httpclient = _factory.CreateClient(\"Api\");\n            var response = await httpclient.PutAsJsonAsync<Category>(\"api/Categories\", item);\n            var json = await response.Content.ReadAsStringAsync();\n            return JsonSerializer.Deserialize<Category>(json);\n        }\n        catch (AccessTokenNotAvailableException exception)\n        {\n            exception.Redirect();\n        }\n        return null;\n    } \n    ```", "```cs\n    public async Task<Tag?> GetTagAsync(string id)\n    {\n        var httpclient = _factory.CreateClient(\"Api\");\n        return await httpclient.GetFromJsonAsync<Tag>($\"api/Tags/{id}\");\n    }\n    public async Task<List<Tag>?> GetTagsAsync()\n    {\n        var httpclient = _factory.CreateClient(\"Api\");\n        return await httpclient.GetFromJsonAsync<List<Tag>>($\"api/Tags\");\n    }\n    public async Task DeleteTagAsync(string id)\n    {\n        try\n        {\n            var httpclient = _factory.CreateClient(\"Api\");\n            await httpclient.DeleteAsync($\"api/Tags/{id}\");\n        }\n        catch (AccessTokenNotAvailableException exception)\n        {\n            exception.Redirect();\n        }\n    }\n    public async Task<Tag?> SaveTagAsync(Tag item)\n    {\n        try\n        {\n            var httpclient = _factory.CreateClient(\"Api\");\n            var response = await httpclient.PutAsJsonAsync<Tag>(\"api/Tags\", item);\n            var json = await response.Content.ReadAsStringAsync();\n            return JsonSerializer.Deserialize<Tag>(json);\n        }\n        catch (AccessTokenNotAvailableException exception)\n        {\n            exception.Redirect();\n        }\n        return null;\n    } \n    ```", "```cs\n    public async Task<List<Comment>> GetCommentsAsync(string blogpostid)\n        {\n            var httpclient = _factory.CreateClient(\"Api\");\n            return await httpclient.GetFromJsonAsync<List<Comment>>($\"api/Comments/{blogpostid}\");\n        }\n\n        public async Task DeleteCommentAsync(string id)\n        {\n            try\n            {\n                var httpclient = _factory.CreateClient(\"Api\");\n                await httpclient.DeleteAsync($\"api/Comments/{id}\");\n            }\n            catch (AccessTokenNotAvailableException exception)\n            {\n                exception.Redirect();\n            }\n        }\n        public async Task<Comment?> SaveCommentAsync(Comment item)\n        {\n            try\n            {\n                var httpclient = _factory.CreateClient(\"Api\");\n                var response = await httpclient.PutAsJsonAsync<Comment>(\"api/Comments\", item);\n                var json = await response.Content.ReadAsStringAsync();\n                return JsonSerializer.Deserialize<Comment>(json);\n            }\n            catch (AccessTokenNotAvailableException exception)\n            {\n                exception.Redirect();\n            }\n            return null;\n        } \n    ```"]