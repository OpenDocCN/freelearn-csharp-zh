["```cs\nVec2i cursorPos;\n```", "```cs\ncursorPos = getMousePos();\n```", "```cs\ngl::drawSolidCircle( cursorPos, 10 );\n```", "```cs\ncursorPos.y++;\n```", "```cs\nvoid mouseMove(MouseEvent event);\n```", "```cs\nvoid BasicEventsApp::mouseMove(MouseEvent event) {\n    cursorPos = event.getPos();\n}\n```", "```cs\nvector<Vec2i> circlePositions;\nvoid mouseDown(MouseEvent event);\n```", "```cs\nvoid BasicEventsApp::mouseDown(MouseEvent event)\n{\n    // check if the left mouse button was pressed\n    if ( event.isLeft() ) {\n        // it was\n        Vec2i cp = event.getPos(); // save current mouse position\n        circlePositions.push_back(cp); // and add it to the vector\n    }\n\n    // check if the right mouse button was pressed\n    if ( event.isRight() ) {\n        // it was\n        // check if the vector has at least one element\n        if ( !circlePositions.empty() ) {  \n            // it has, erase the first element\n            circlePositions.erase(circlePositions.begin());\n        }\n    }\n}\n```", "```cs\n// declare an iterator for this specific kind of vector\nvector<Vec2i>::iterator i;\n\n// loop through circle positions\nfor ( i=circlePositions.begin(); i!=circlePositions.end(); ++i ) {\n    // and draw circles at these positions one by one\n    gl::drawSolidCircle( *i, 20 );\n}\n```", "```cs\nPolyLine<Vec2f> line;\nvoid mouseDrag(MouseEvent event);\n```", "```cs\nvoid BasicEventsApp::mouseDrag(MouseEvent event) {\n    // create new position from current mouse position\n    Vec2f cp = event.getPos();\n\n    // copy it to the PolyLine\n    line.push_back(cp);\n}\n```", "```cs\nif ( line.size() ) {\n  gl::drawSolid(line);\n}\n```", "```cs\nvoid keyDown(KeyEvent event);\n```", "```cs\nvoid BasicEventsApp::keyDown(KeyEvent event) {\n    if ( event.getCode() == KeyEvent::KEY_c ) {\n        circlePositions.clear();\n        line.getPoints().clear();\n    }\n}\n```", "```cs\n#include \"cinder/gl/Texture.h\"\n#include \"cinder/ImageIo.h\"\n```", "```cs\ngl::Texture background;\nvoid fileDrop(FileDropEvent);\n```", "```cs\nvoid BasicEventsApp::fileDrop(FileDropEvent event) {\n    try {\n         background = gl::Texture( loadImage( event.getFile(0) ) );\n   } catch( ... ) {\n         console() << \"unable to load file\" << endl;\n   };\n}\n```", "```cs\nif ( background ) {\n    gl::draw( background, getWindowBounds() );\n}\n```"]