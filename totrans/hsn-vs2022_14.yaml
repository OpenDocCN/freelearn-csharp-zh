- en: 'Chapter 11: Implementing Git Integration'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章：实现Git集成
- en: Having a change control platform for the development of a software project is
    essential for good control of the project. There are many different versioning
    systems, but **Git** is the most widely used system today, which is why more and
    more IDEs are including tools for managing repositories based on this technology
    natively.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 对于软件项目的开发来说，拥有一个变更控制平台对于良好的项目管理至关重要。有许多不同的版本控制系统，但**Git**是目前最广泛使用的系统，这也是为什么越来越多的IDE都开始集成基于此技术的仓库管理工具。
- en: This has precisely happened with Visual Studio, which integrates a series of
    options to allow us to work with Git-based repositories.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是Visual Studio所发生的，它集成了一系列选项，使我们能够与基于Git的仓库一起工作。
- en: In this chapter, you are going to learn how to work with Git repositories based
    on **GitHub**, which is the most popular repository-hosting platform today.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何基于**GitHub**（目前最受欢迎的仓库托管平台）使用Git仓库。
- en: 'The main topics we will see in the chapter are as follows:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将讨论的主要主题如下：
- en: Getting started with Git settings
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用Git设置
- en: Creating a Git repository
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建Git仓库
- en: Cloning a Git repository
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 克隆Git仓库
- en: Fetching, pulling, and pushing Git repositories
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取、拉取和推送Git仓库
- en: Managing branches
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理分支
- en: Viewing changes in repositories
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看仓库中的更改
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To follow along in the chapter, you must have installed Visual Studio with the
    workload set from [*Chapter 1*](B17873_01_ePub.xhtml#_idTextAnchor013), *Getting
    Started with Visual Studio 2022*.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本章内容，您必须已安装带有从[*第1章*](B17873_01_ePub.xhtml#_idTextAnchor013)“使用Visual Studio
    2022入门”中设置的负载的工作负载的Visual Studio。
- en: 'Since the projects hosted in the main repository of the previous chapters already
    have a GitHub configuration, we will create a new project throughout the chapter
    to do the exercises. Therefore, a GitHub account is required, which can be created
    at the following link: [https://github.com/signup](https://github.com/signup).'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 由于前几章的主要仓库中的项目已经具有GitHub配置，因此我们将在本章中创建一个新项目来进行练习。因此，需要一个GitHub账户，可以在以下链接创建：[https://github.com/signup](https://github.com/signup)。
- en: Getting started with Git settings
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用Git设置
- en: Starting to work with Git tools is very easy in Visual Studio 2022, since they
    are included as part of the installation itself, so you can install Visual Studio
    and start working on your projects as soon as possible.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在Visual Studio 2022中开始使用Git工具非常简单，因为它们是作为安装本身的一部分包含的，所以您可以立即安装Visual Studio并开始处理您的项目。
- en: 'To access the management of code projects hosted on GitHub, you must first
    sign in with a Microsoft account, as explained in [*Chapter 1*](B17873_01_ePub.xhtml#_idTextAnchor013),
    *Getting Started with Visual Studio 2022*. Once logged in, click on the account
    profile icon and select the **Account settings…** option, as shown here:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问托管在GitHub上的代码项目管理，您必须首先使用Microsoft账户登录，如[*第1章*](B17873_01_ePub.xhtml#_idTextAnchor013)“使用Visual
    Studio 2022入门”中所述。登录后，点击账户个人资料图标并选择**账户设置…**选项，如图所示：
- en: '![Figure 11.1 – Accessing the account settings'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.1 – 访问账户设置'
- en: '](img/Figure_11.01_B17873.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.01_B17873.jpg)'
- en: Figure 11.1 – Accessing the account settings
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.1 – 访问账户设置
- en: 'This will open an account customization window, where we can add a GitHub account
    via the **+Add** button, as shown here:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开账户定制窗口，我们可以通过**+添加**按钮添加GitHub账户，如图所示：
- en: '![Figure 11.2 – The button to add a GitHub account'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.2 – 添加GitHub账户的按钮'
- en: '](img/Figure_11.02_B17873.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.02_B17873.jpg)'
- en: Figure 11.2 – The button to add a GitHub account
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.2 – 添加GitHub账户的按钮
- en: 'Once we press the button, we will be redirected to the GitHub authentication
    portal, where we can log in with an existing GitHub account or create an account
    if we don''t have one. After successful authentication, we will be asked to authorize
    Visual Studio to interact with GitHub services, so it is essential to press the
    button that says **Authorize github**:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们按下按钮，我们将被重定向到GitHub身份验证门户，在那里我们可以使用现有的GitHub账户登录，或者如果没有账户，可以创建一个账户。身份验证成功后，我们将被要求授权Visual
    Studio与GitHub服务交互，因此必须按下显示**授权github**的按钮：
- en: '![Figure 11.3 – The authorization button to connect Visual Studio and GitHub'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.3 – 连接Visual Studio和GitHub的授权按钮'
- en: '](img/Figure_11.3_B17873.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.3_B17873.jpg)'
- en: Figure 11.3 – The authorization button to connect Visual Studio and GitHub
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.3 – 连接Visual Studio和GitHub的授权按钮
- en: 'After this step, the GitHub account will have been added as part of the accounts
    associated with the main Visual Studio account, so we can start working with the
    repositories of the GitHub account, as shown in *Figure 11.4*:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在此步骤之后，GitHub 账户将作为与主要 Visual Studio 账户关联的账户之一被添加，因此我们可以开始使用 GitHub 账户的存储库，如图
    11.4 所示：
- en: '![Figure 11.4 – The GitHub account added to the account listing'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.4 – 已添加到账户列表中的 GitHub 账户'
- en: '](img/Figure_11.04_B17873.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.04_B17873.jpg)'
- en: Figure 11.4 – The GitHub account added to the account listing
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.4 – 已添加到账户列表中的 GitHub 账户
- en: Now that we have associated a GitHub account, let's learn how to create Git
    repositories in GitHub.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经关联了 GitHub 账户，让我们学习如何在 GitHub 中创建 Git 存储库。
- en: Creating a Git repository
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 Git 存储库
- en: Creating a repository in GitHub from a Visual Studio project is very easy to
    do. In this section, you will have to test your knowledge by creating a new `GitDemo`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Visual Studio 项目中从 GitHub 创建存储库非常容易。在本节中，您将通过创建一个新的 `GitDemo` 来测试您的知识。
- en: 'To create the new repository in GitHub from the project you have created, just
    select the **Git** | **Create Git Repository** menu option and fill in the repository
    information, according to the data shown in *Figure 11.5*:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要从您创建的项目在 GitHub 中创建新存储库，只需选择 **Git** | **创建 Git 存储库** 菜单选项并填写存储库信息，根据图 11.5
    所示的数据：
- en: '![Figure 11.5 – Filling in the information for a new repository on GitHub](img/Figure_11.05_B17873.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.5 – 在 GitHub 上创建新存储库时填写信息](img/Figure_11.05_B17873.jpg)'
- en: Figure 11.5 – Filling in the information for a new repository on GitHub
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.5 – 在 GitHub 上创建新存储库时填写信息
- en: 'Let''s briefly explain each option:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简要解释每个选项：
- en: '**Local path**: This sets the path on the local machine where the source code
    is hosted (usually the path where you created the project).'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**本地路径**：这设置本地机器上托管源代码的路径（通常是创建项目的路径）。'
- en: '**.gitignore template**: This allows you to select a template that establishes
    a set of files that will not be uploaded to the repository – for example, files
    that are generated after a compilation and can be regenerated on a different computer
    are selected by the selected template.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**.gitignore 模板**：这允许您选择一个模板，该模板确定一组不会上传到存储库的文件 – 例如，由所选模板选择的文件是在编译后生成的，可以在不同的计算机上重新生成。'
- en: '**License template**: This allows you to choose a license for the repository
    code, which indicates what users can and cannot do with the project code.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**许可证模板**：这允许您为存储库代码选择一个许可证，它表明用户可以对项目代码做什么以及不能做什么。'
- en: '`readme` file that describes the purpose of the repository.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述存储库目的的 `readme` 文件。
- en: '**Account**: This allows you to select the GitHub account to which the repository
    will be published. It is possible to associate an account from here if one has
    not been associated before.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**账户**：这允许您选择将存储库发布到的 GitHub 账户。如果之前尚未关联账户，则可以在此处关联账户。'
- en: '**Owner**: This allows you to set which GitHub account will be the owner of
    the repository if the account belongs to several work teams.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**所有者**：这允许您设置如果账户属于多个工作团队，哪个 GitHub 账户将是存储库的所有者。'
- en: '**Repository name**: This allows you to set the name of the repository, although
    the project''s own name is normally used. This will affect the URL of the final
    repository.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储库名称**：这允许您设置存储库的名称，尽管通常使用项目自己的名称。这将影响最终存储库的 URL。'
- en: '**Description**: This allows you to enter a description of the repository created.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**描述**：这允许您输入创建的存储库的描述。'
- en: '**Private repository**: This allows you to set whether the repository will
    be public or private.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**私有存储库**：这允许您设置存储库是公开的还是私有的。'
- en: Once these values are set, just click on the **Create and Push** button to start
    the repository creation process. It is important that you follow this step in
    your GitHub account so that you can carry out the activities in the following
    sections.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦设置了这些值，只需点击 **创建和推送** 按钮即可开始存储库创建过程。在您的 GitHub 账户中遵循此步骤非常重要，这样您才能执行以下章节中的活动。
- en: 'There are several signs to identify whether a project belongs to a Git repository,
    as shown in *Figure 11.6*, such as lock icons on the left side of source files,
    which indicate that they are the original repository files:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如图 11.6 所示，有几个标志可以用来识别项目是否属于 Git 存储库，例如源文件左侧的锁定图标，表示它们是原始存储库文件：
- en: '![Figure 11.6 – Signs to identify a versioned project with Git'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.6 – 使用 Git 识别已版本化的项目的标志'
- en: '](img/Figure_11.06_B17873.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.06_B17873.jpg)'
- en: Figure 11.6 – Signs to identify a versioned project with Git
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.6 – 使用 Git 识别版本化项目的标志
- en: Another sign to identify whether a project belongs to a Git repository is that
    (as shown in *Figure 11.6*) at the bottom, there is a branch icon, indicating
    which branch we are working on. In our case, the branch is **master**.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个识别项目是否属于 Git 仓库的标志是（如图 11.6 所示），在底部有一个分支图标，指示我们正在工作的分支。在我们的例子中，分支是 **master**。
- en: Now that we know how to create a new repository, let's see how to clone a repository
    to our local machine.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经知道了如何创建一个新的仓库，让我们看看如何将仓库克隆到我们的本地机器上。
- en: Cloning a Git repository
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 克隆 Git 仓库
- en: It may be the case that you want to clone an existing repository and not start
    from scratch because you need to work in a team, or simply while browsing the
    GitHub site, you came across a repository that caught your attention.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 可能的情况是你想克隆一个现有的仓库而不是从头开始，因为你需要团队合作，或者简单地说，在浏览 GitHub 网站时，你遇到了一个引起你注意的仓库。
- en: 'The easiest way to clone a repository is from the initial window of Visual
    Studio, which can be reached by either starting a new instance of Visual Studio,
    closing an open project, or from the **File** | **Start Window** menu. In this
    window, the first option is the **Clone a repository** button:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 克隆仓库的最简单方法是从 Visual Studio 的初始窗口开始，可以通过启动 Visual Studio 的新实例、关闭一个打开的项目或从 **文件**
    | **启动窗口** 菜单访问。在这个窗口中，第一个选项是 **克隆仓库** 按钮：
- en: '![Figure 11.7 – The Clone a repository option from the startup window'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 11.7 – 启动窗口中的克隆仓库选项'
- en: '](img/Figure_11.07_B17873.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.07_B17873.jpg)'
- en: Figure 11.7 – The Clone a repository option from the startup window
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.7 – 启动窗口中的克隆仓库选项
- en: 'Once we press this button, a new window (shown in *Figure 11.8*) will open,
    asking us to indicate the URL of the remote repository and the local path where
    the source code files will be stored:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们按下这个按钮，就会打开一个新的窗口（如图 11.8 所示），要求我们指定远程仓库的 URL 和源代码文件将存储的本地路径：
- en: '![Figure 11.8 – The window for cloning a repository'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 11.8 – 克隆仓库的窗口'
- en: '](img/Figure_11.08_B17873.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.08_B17873.jpg)'
- en: Figure 11.8 – The window for cloning a repository
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.8 – 克隆仓库的窗口
- en: 'For the purposes of this demonstration, we will use the URL of the repository
    created in the *Creating a Git repository* section, which should look like this:
    `https://github.com/{your-github-username-here}/GitDemo`.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示的目的，我们将使用在 *创建 Git 仓库* 部分创建的仓库的 URL，它应该看起来像这样：`https://github.com/{你的 GitHub
    用户名}/GitDemo`。
- en: 'Because we previously created a project with the same name in the *Creating
    a Git repository* section, we have to indicate a different path for the project.
    For simplicity, we will change the name of the folder to `GitDemo2`, as shown
    in *Figure 11.8*:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们在 *创建 Git 仓库* 部分已经创建了一个同名项目，我们必须为项目指定不同的路径。为了简单起见，我们将文件夹的名称更改为 `GitDemo2`，如图
    11.8 所示：
- en: 'After filling in the information in the window, we will proceed to click on
    the **Clone** button, which will start the process of cloning the repository locally.
    Once the process is finished, the **Solution Explorer** window will show you a
    folder view:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在窗口中填写完信息后，我们将点击 **克隆** 按钮，这将开始本地克隆仓库的过程。一旦过程完成，**解决方案资源管理器** 窗口将显示文件夹视图：
- en: '![Figure 11.9 – The folder view on the Solution Explorer window'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 11.9 – 解决方案资源管理器窗口中的文件夹视图'
- en: '](img/Figure_11.09_B17873.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.09_B17873.jpg)'
- en: Figure 11.9 – The folder view on the Solution Explorer window
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.9 – 解决方案资源管理器窗口中的文件夹视图
- en: To switch from the folder view to the solution view, and to be able to work
    with the source files, you must open the solution by clicking on the `GitDemo.sln`
    file. This will open the solution and all its files, allowing us to work on the
    source files, as we have done so far.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要从文件夹视图切换到解决方案视图，并且能够处理源文件，你必须通过点击 `GitDemo.sln` 文件来打开解决方案。这将打开解决方案及其所有文件，使我们能够处理源文件，就像我们迄今为止所做的那样。
- en: Important Note
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: It is possible to change the default folder view to the solution view by selecting
    the option located at **Git** | **Settings** | **Git Global Settings** | **Automatically
    load the solution when opening a Git repository**.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过选择位于 **Git** | **设置** | **Git 全局设置** | **打开 Git 仓库时自动加载解决方案** 的选项来将默认的文件夹视图更改为解决方案视图。
- en: Now that we have learned how to clone repositories, let's see how we can perform
    pushing and pulling actions on repositories.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学会了如何克隆仓库，让我们看看我们如何在仓库上执行推送和拉取操作。
- en: Fetching, pulling, and pushing Git repositories
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取、拉取和推送 Git 仓库
- en: 'The most important commands when working with Git repositories have to do with
    fetching, pulling, and pushing operations. There are two main ways to execute
    these operations:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理 Git 仓库时，最重要的命令与获取、拉取和推送操作有关。执行这些操作有两种主要方式：
- en: 'The first way is by accessing through the **Git** menu, as shown here:'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一种方式是通过访问 **Git** 菜单，如图所示：
- en: '![Figure 11.10 – Accessing the Fetch, Pull, and Push operations from the menu'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.10 – 从菜单访问获取、拉取和推送操作'
- en: '](img/Figure_11.10_B17873.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.10_B17873.jpg)'
- en: Figure 11.10 – Accessing the Fetch, Pull, and Push operations from the menu
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.10 – 从菜单访问获取、拉取和推送操作
- en: 'The second is to enable the **Git Changes** window, which you can open through
    the **View** | **Git Changes** menu, as shown in *Figure 11.11*:'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二种方法是启用 **Git 变更** 窗口，您可以通过 **视图** | **Git 变更** 菜单打开它，如图 11.11 所示：
- en: '![Figure 11.11 – Accessing the Fetch, Pull, and Push operations from the Git
    Changes window'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.11 – 从 Git 变更窗口访问获取、拉取和推送操作'
- en: '](img/Figure_11.11_B17873.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.11_B17873.jpg)'
- en: Figure 11.11 – Accessing the Fetch, Pull, and Push operations from the Git Changes
    window
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.11 – 从 Git 变更窗口访问获取、拉取和推送操作
- en: At this point, you may be wondering what each of these operations is for. So,
    let's now explain them briefly.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，你可能想知道这些操作各自的作用。那么，现在让我们简要地解释一下。
- en: Fetching repositories
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取仓库
- en: The fetch operation allows you to check whether there are remote commits that
    should be incorporated into the local repository.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 获取操作允许您检查是否有远程提交应该合并到本地仓库中。
- en: 'To run this example, go to the GitHub portal, log in if you are not already
    logged in, and open the repository we created in the *Creating a Git repository*
    section called `GitDemo`. Once you are in the repository, go to the `Program.cs`
    file and click on the pencil icon, which will allow you to edit the file, as shown
    here:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行此示例，请转到 GitHub 门户，如果您尚未登录，请登录，并打开我们在 *创建 Git 仓库* 部分创建的名为 `GitDemo` 的仓库。一旦您进入仓库，请转到
    `Program.cs` 文件并点击铅笔图标，这将允许您编辑文件，如图所示：
- en: '![Figure 11.12 – The button to edit a repository file'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.12 – 编辑仓库文件的按钮'
- en: '](img/Figure_11.12_B17873.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.12_B17873.jpg)'
- en: Figure 11.12 – The button to edit a repository file
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.12 – 编辑仓库文件的按钮
- en: 'We will make a very simple change by adding a pair of exclamation marks at
    the end of the string in line four:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过在第四行字符串末尾添加一对感叹号来做一个非常简单的更改：
- en: '[PRE0]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once this change has been made, go to the bottom of the page and click on the
    green button to commit the changes:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成此更改，请滚动到页面底部并点击绿色按钮以提交更改：
- en: '![Figure 11.13 – The button to commit changes on the repository'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.13 – 在仓库上提交更改的按钮'
- en: '](img/Figure_11.13_B17873.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.13_B17873.jpg)'
- en: Figure 11.13 – The button to commit changes on the repository
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.13 – 在仓库上提交更改的按钮
- en: 'If we now go to Visual Studio and click on the **Fetch** button, as shown in
    *Figure 11.14*, we can see a **0 outgoing / 1 incoming** message, indicating that
    there is a change in the repository that has not been applied to the local project:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在转到 Visual Studio 并点击 **获取** 按钮，如图 11.14 所示，我们可以看到一个 **0 个外出 / 1 个传入**
    的消息，指示仓库中有一个更改尚未应用到本地项目：
- en: '![Figure 11.14 – The button for fetching from the repository'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.14 – 从仓库获取的按钮'
- en: '](img/Figure_11.14_B17873.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.14_B17873.jpg)'
- en: Figure 11.14 – The button for fetching from the repository
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.14 – 从仓库获取的按钮
- en: 'Additionally, if we click on this message, a new window will open, which will
    show us the version history of the project, showing us which changes we have not
    been applied locally:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果我们点击此消息，将打开一个新窗口，显示项目的版本历史，显示我们尚未应用本地的更改：
- en: '![Figure 11.15 – The window showing the pending changes to be applied to the
    local repository'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.15 – 显示要应用到本地仓库的挂起更改的窗口'
- en: '](img/Figure_11.15_B17873.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.15_B17873.jpg)'
- en: Figure 11.15 – The window showing the pending changes to be applied to the local
    repository
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.15 – 显示要应用到本地仓库的挂起更改的窗口
- en: It should be noted that the fetch operation does not make any changes locally
    or in the remote repository, which the pull and push operations do. We will discuss
    these operations next.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 应该注意的是，获取操作不会在本地或远程仓库中做出任何更改，而拉取和推送操作则会。我们将在下一节讨论这些操作。
- en: Pulling repositories
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拉取仓库
- en: 'A pull operation refers to the act of downloading the latest changes from the
    repository to our local project. In the *Fetching repositories* section, we saw
    that we have a pending change to apply. So, we will proceed to click on the **Pull**
    button, as shown in *Figure 11.16*, to apply it:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 拉取操作是指从仓库下载最新更改到我们的本地项目。在 *获取仓库* 部分中，我们看到了一个待应用更改。因此，我们将继续点击如图 *图 11.16* 所示的
    **拉取** 按钮，以应用它：
- en: '![Figure 11.16 – The button for pulling changes'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.16 – 拉取更改的按钮'
- en: '](img/Figure_11.16_B17873.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.16_B17873.jpg)'
- en: Figure 11.16 – The button for pulling changes
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.16 – 拉取更改的按钮
- en: 'Once the changes have been downloaded, a message will appear, indicating which
    commit has been applied to the current project, as shown in *Figure 11.17*:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦更改已下载，将出现一条消息，指示已应用到当前项目的哪个提交，如图 *图 11.17* 所示：
- en: '![Figure 11.17 – The window showing the applied commit and the changes in it'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.17 – 显示已应用提交及其更改的窗口'
- en: '](img/Figure_11.17_B17873.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.17_B17873.jpg)'
- en: Figure 11.17 – The window showing the applied commit and the changes in it
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.17 – 显示已应用提交及其更改的窗口
- en: If we click on the name of the commit, a window will appear, showing the changes
    that have been applied to the project, as shown in *Figure 11.17*.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们点击提交的名称，将出现一个窗口，显示已应用到项目的更改，如图 *图 11.17* 所示。
- en: In this section, although we have made a change in the remote repository from
    the main GitHub site, the most common way to do it is from Visual Studio itself.
    That is why, in the next section, we will analyze how to perform push operations
    to the repositories.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，尽管我们从主 GitHub 网站对远程仓库进行了更改，但最常见的方法是从 Visual Studio 本身进行。这就是为什么在下一节中，我们将分析如何执行向仓库的推送操作。
- en: Pushing to repositories
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 推送到仓库
- en: 'A push operation refers to uploading changes to a repository. To demonstrate
    how this operation works, let''s open the `Program.cs` file and modify line four,
    changing the `Hello World` string to `Hello Git`:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 推送操作是指将更改上传到仓库。为了演示此操作的工作原理，让我们打开 `Program.cs` 文件并修改第四行，将 `Hello World` 字符串更改为
    `Hello Git`：
- en: '[PRE1]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Immediately, you will see that the file icon in the **Solution Explorer** changes
    to a red checkmark, indicating that there has been a change in the local repository,
    which we can upload to the repository on GitHub:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 立即，你将看到 **解决方案资源管理器** 中的文件图标变为红色勾选标记，表示本地仓库已发生更改，我们可以将其上传到 GitHub 上的仓库：
- en: '![Figure 11.18 – The checkmark indicating that the original file has been modified'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.18 – 表示原始文件已被修改的勾选标记'
- en: '](img/Figure_11.18_B17873.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.18_B17873.jpg)'
- en: Figure 11.18 – The checkmark indicating that the original file has been modified
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.18 – 表示原始文件已被修改的勾选标记
- en: 'Similarly, in the **Git Changes** window, you will see a list of those files
    that have changes and can be uploaded to the repository, as shown in *Figure 11.19*:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，在 **Git 更改** 窗口中，你会看到可以上传到仓库的更改文件列表，如图 *图 11.19* 所示：
- en: '![Figure 11.19 – The list of files with changes that can be uploaded to the
    remote repository'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.19 – 可以上传到远程仓库的更改文件列表'
- en: '](img/Figure_11.19_B17873.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.19_B17873.jpg)'
- en: Figure 11.19 – The list of files with changes that can be uploaded to the remote
    repository
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.19 – 可以上传到远程仓库的更改文件列表
- en: In the preceding figure, we can also see a button with the **Commit All** legend.
    This button is used to create a commit locally, without affecting the remote repository.
    This is a drop-down button that contains more options we can use, such as the
    **Commit All and Push** option. This option will push the changes to the remote
    repository.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图中，我们还可以看到一个带有 **提交所有** 标识的按钮。此按钮用于在本地创建提交，而不会影响远程仓库。这是一个包含更多我们可以使用的选项的下拉按钮，例如
    **提交所有并推送** 选项。此选项将更改推送到远程仓库。
- en: 'For our demonstration, we will add the **Modified Program.cs** message, as
    shown in *Figure 11.20*, and click on the **Commit All and Push** option, to apply
    the changes on the server:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的演示中，我们将添加 **修改后的 Program.cs** 消息，如图 *图 11.20* 所示，并点击 **提交所有并推送** 选项，以在服务器上应用更改：
- en: '![Figure 11.20 – The message added and the Commit All and Push option'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.20 – 添加的消息以及“提交所有”和“推送”选项'
- en: '](img/Figure_11.20_B17873.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.20_B17873.jpg)'
- en: Figure 11.20 – The message added and the Commit All and Push option
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.20 – 添加的消息以及“提交所有”和“推送”选项
- en: If you go to the online repository in your GitHub account, you will see that
    the changes have been applied successfully.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你访问你 GitHub 账户中的在线仓库，你会看到更改已成功应用。
- en: Important Note
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: It is recommended that before executing a push operation, you always perform
    a pull operation to avoid merge conflicts as much as possible. You can use the
    **Sync (Pull then Push)** button to perform both actions one after another.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 建议在执行推送操作之前，您始终先执行拉取操作，以尽可能避免合并冲突。您可以使用**同步（先拉后推）**按钮依次执行这两个操作。
- en: Now that we have analyzed how to execute the most common operations in GitHub,
    let's see how to work with branches in Visual Studio.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经分析了如何在 GitHub 中执行最常见的操作，让我们看看如何在 Visual Studio 中处理分支。
- en: Managing branches
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理分支
- en: So far, we have been working with the main branch of our project called **master**.
    Imagine this branch as a timeline, where each event is performed by a commit.
    This is very useful when there is some conflict and you need to go back to a previous
    version, undoing the changes of a specific commit.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在使用我们项目的**master**主分支进行工作。想象这个分支就像一个时间线，其中每个事件都是由一个提交执行的。当存在冲突并需要回到之前的版本，撤销特定提交的更改时，这非常有用。
- en: However, if you are working in a team, it is common that you will need to add
    a functionality in some kind of sandbox, before merging this functionality into
    the master branch. It is in this sort of scenario where Git branches will help
    us, allowing us to create a new project branch from an existing repository branch
    and work on it without affecting the functionality of the main repository.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果您在团队中工作，通常您需要在将此功能合并到主分支之前，在某种沙盒中添加该功能。在这种情况下，Git分支将帮助我们，允许我们从现有的仓库分支创建一个新的项目分支，并在此分支上工作，而不会影响主仓库的功能。
- en: To create a new branch, just go to the **Git** | **New Branch** menu. This will
    open a new window that asks for the branch name, the branch on which the new branch
    will be based, and a checkbox labeled **Checkout branch**, which, if checked,
    will transition to the new branch once it is created.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新分支，只需转到**Git** | **新建分支**菜单。这将打开一个新窗口，要求输入分支名称、新分支将基于的分支，以及一个标记为**检出分支**的复选框，如果选中，则在创建后将切换到新分支。
- en: 'For this demonstration, let''s use `branch01` as the name of the branch, which
    will be based on the **master** branch, and leave the checkbox selected, as shown
    in *Figure 11.21*:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个演示，让我们使用`branch01`作为分支名称，它将基于**master**分支，并保持复选框选中，如图 11.21 所示：
- en: '![Figure 11.21 – Creating a new branch'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.21 – 创建新分支'
- en: '](img/Figure_11.21_B17873.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.21_B17873.jpg)'
- en: Figure 11.21 – Creating a new branch
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.21 – 创建新分支
- en: 'Once the new branch has been created, we can apply as many changes as we need.
    In our example, we will open the `Program.cs` file and modify line four again,
    with the following code:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了新分支，我们就可以应用所需的任何更改。在我们的例子中，我们将打开`Program.cs`文件，再次修改第四行，代码如下：
- en: '[PRE2]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once this change has been made, we will push the code as shown in the *Pushing
    to repositories* section, making sure to apply the change to **branch01**, as
    shown in *Figure 11.22*:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦进行了此更改，我们将按照*推送到仓库*部分所示推送代码，确保将更改应用到**branch01**，如图 11.22 所示：
- en: '![Figure 11.22 – Pushing changes to the new branch'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.22 – 将更改推送到新分支'
- en: '](img/Figure_11.22_B17873.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.22_B17873.jpg)'
- en: Figure 11.22 – Pushing changes to the new branch
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.22 – 将更改推送到新分支
- en: This allows us to add functionality on an isolated remote repository without
    affecting the operation of the **master** branch.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许我们在不影响**master**分支操作的情况下，在隔离的远程仓库中添加功能。
- en: 'Once you have your code tested, you will probably want to integrate it back
    into the **master** branch. This can be done from the **View** | **Git Repository**
    window. In this window, we will have a section called **Branches**, where we will
    see the list of the different branches in our project. Just right-click on the
    **master** branch and click on the **Checkout** option to switch to the master
    branch, which is where we will add the **branch01** changes. Then, right-click
    on the **branch01** branch and select the **Merge ''branch01'' into ''master''**
    option:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的代码经过测试，您可能希望将其集成回**主**分支。这可以从**视图** | **Git 仓库**窗口完成。在这个窗口中，我们将有一个名为**分支**的部分，其中我们将看到项目中不同分支的列表。只需右键单击**master**分支并选择**检出**选项以切换到主分支，这是我们将在其中添加**branch01**更改的地方。然后，右键单击**branch01**分支并选择**将
    'branch01' 合并到 'master'**选项：
- en: '![Figure 11.23 – Merging branches'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.23 – 合并分支'
- en: '](img/Figure_11.23_B17873.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.23_B17873.jpg)'
- en: Figure 11.23 – Merging branches
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.23 – 合并分支
- en: This will cause the **branch01** branch to be merged with the **master** branch,
    which means that the new functionality will be integrated into the project.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致 **branch01** 分支与 **master** 分支合并，这意味着新功能将被集成到项目中。
- en: Now that we have seen how to create branches and merge them, it is time to see
    how Visual Studio allows us to visualize the changes while editing the source
    code.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了如何创建分支和合并它们，现在是时候看看 Visual Studio 如何在编辑源代码时可视化更改了。
- en: Viewing changes in repositories
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看仓库中的更改
- en: 'There are several ways in which Visual Studio helps us to visualize the changes
    in the repositories. The first one is through the **Git Repository** window, as
    shown here:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio 有几种方式帮助我们可视化仓库中的更改。第一种是通过如图所示的 **Git Repository** 窗口：
- en: '![Figure 11.24 – The Git Repository window'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.24 – Git 仓库窗口'
- en: '](img/Figure_11.24_B17873.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.24_B17873.jpg)'
- en: Figure 11.24 – The Git Repository window
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.24 – Git 仓库窗口
- en: This window allows us to visualize whether there are versions that have not
    been applied in our local repository through **Incoming**, whether there are commits
    made locally but not pushed to the server through **Outgoing**, and also **Local
    History**.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 此窗口允许我们通过 **Incoming** 可视化本地仓库中是否有未应用版本，通过 **Outgoing** 可视化本地提交但未推送到服务器的提交，以及
    **Local History**。
- en: 'If we want to visualize the changes that have occurred between different commits,
    just right-click on two or more commits and select the **Compare Commits…** option:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想可视化不同提交之间的更改，只需在两个或多个提交上右键单击并选择 **比较提交…** 选项：
- en: '![Figure 11.25 – The Compare Commits… option'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.25 – “比较提交…” 选项'
- en: '](img/Figure_11.25_B17873.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.25_B17873.jpg)'
- en: Figure 11.25 – The Compare Commits… option
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.25 – “比较提交…” 选项
- en: This will display a new window with the changes that occurred between the different
    source files.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示一个新窗口，显示不同源文件之间发生的变化。
- en: 'Another way to view changes to a single file is to right-click on a file in
    the **Solution Explorer** and then select the **Git** | **View History** option,
    which will open the changes window for the selected file only, as shown in *Figure
    11.26*:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种查看单个文件更改的方法是在 **解决方案资源管理器** 中右键单击文件，然后选择 **Git** | **查看历史** 选项，这将仅打开所选文件的更改窗口，如图
    11.26 所示：
- en: '![Figure 11.26 – The option to view the history of changes to a specific file'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.26 – 查看特定文件更改历史的选项'
- en: '](img/Figure_11.26_B17873.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.26_B17873.jpg)'
- en: Figure 11.26 – The option to view the history of changes to a specific file
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.26 – 查看特定文件更改历史的选项
- en: Finally, we already discussed the CodeLens functionality in [*Chapter 7*](B17873_07_ePub.xhtml#_idTextAnchor088),
    *Coding Efficiently with AI and Code Views*, which also contains functionality
    to view changes to the members of a class, such as the history of changes and
    who made modifications to a member.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们已经在 [*第 7 章*](B17873_07_ePub.xhtml#_idTextAnchor088) 中讨论了 CodeLens 功能，*使用
    AI 和代码视图高效编码*，它还包含查看类成员更改的功能，例如更改历史和谁对成员进行了修改。
- en: Summary
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned how Visual Studio integrates tools so that
    we can easily manage projects using Git and GitHub.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了 Visual Studio 如何集成工具，使我们能够轻松使用 Git 和 GitHub 管理项目。
- en: Knowing how to work with Git-based projects is indispensable for all developers
    who want to manage their projects in a more controlled way, with the purpose of
    having an overview of a project structure in previous versions.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所有希望以更受控的方式管理项目，以便对项目结构的前版本有一个概览的开发者来说，了解如何使用基于 Git 的项目是必不可少的。
- en: Likewise, if you work with other developers, you will be able to share project
    tasks, test them independently, and merge them when the code is reliable, in order
    not to damage the source code that has already been tested.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果你与其他开发者合作，你将能够共享项目任务，独立测试它们，并在代码可靠时合并它们，以避免损坏已测试的源代码。
- en: That is why we have learned how to set up a GitHub account in Visual Studio,
    how to create and clone repositories, how to perform fetch, pull, and push operations,
    how to manage branches in our projects, and finally, how to visualize changes
    in repositories.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 正因如此，我们学习了如何在 Visual Studio 中设置 GitHub 账户，如何创建和克隆仓库，如何执行获取、拉取和推送操作，如何管理项目中的分支，以及最后如何可视化仓库中的更改。
- en: In the next chapter, [*Chapter 12*](B17873_12_ePub.xhtml#_idTextAnchor142),
    *Sharing Code with Live Share*, you will learn how to work collaboratively with
    a development team on the same project in real time, thanks to the use of Live
    Share.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，[*第12章*](B17873_12_ePub.xhtml#_idTextAnchor142)，*使用Live Share共享代码*，你将学习如何利用Live
    Share实时与开发团队在同一项目上协作。
