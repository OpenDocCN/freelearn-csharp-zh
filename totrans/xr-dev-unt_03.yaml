- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: VR Development in Unity
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unity 中的 VR 开发
- en: Let's explore the world of VR, from creating your first VR project in Unity
    to deploying our first VR scene on a headset or simulator. In this chapter, we’ll
    present the most important VR toolkits and plugins available in Unity, helping
    you become familiar with each one’s capabilities.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索 VR 的世界，从在 Unity 中创建你的第一个 VR 项目到在头戴式设备或模拟器上部署我们的第一个 VR 场景。在本章中，我们将介绍 Unity
    中可用的最重要的 VR 工具包和插件，帮助你熟悉每个的功能。
- en: You’ll gain hands-on experience with the **XR Interaction Toolkit**’s demo scene
    , understand its most important components and scripts, and learn how to use them
    in your future VR projects. We’ll help you understand the nuances between VR development
    and traditional game development, as well as share different strategies to ensure
    a VR headset’s computing power.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你将通过 **XR Interaction Toolkit** 的演示场景获得实际操作经验，了解其最重要的组件和脚本，并学习如何在未来的 VR 项目中使用它们。我们将帮助你理解
    VR 开发与传统游戏开发之间的细微差别，以及分享确保 VR 头盔计算能力的不同策略。
- en: Another important skill you will gain in this chapter is how to test and deploy
    VR experiences on various devices, from simulators to VR headsets. This chapter
    will give you a robust foundation that will equip you with the necessary skills
    and knowledge to create increasingly complex and immersive VR scenes using Unity.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中你将获得的重要技能之一是学习如何在各种设备上测试和部署 VR 体验，从模拟器到 VR 头盔。本章将为你提供一个坚实的基础，为你提供创建越来越复杂和沉浸式
    VR 场景所需的必要技能和知识。
- en: 'We’ll cover the following topics as we proceed:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的内容中涵盖以下主题：
- en: What is VR development?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是 VR 开发？
- en: Setting up a VR project in Unity and the XR Interaction Toolkit
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Unity 中设置 VR 项目和 XR Interaction Toolkit
- en: Exploring the XR Interaction Toolkit demo scene
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索 XR Interaction Toolkit 演示场景
- en: Deploying and testing VR experiences onto different VR platforms or simulators
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 VR 体验部署和测试到不同的 VR 平台或模拟器
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To effectively follow along with this chapter on VR development in Unity, it
    is essential to have an appropriate hardware and software setup. For the most
    effective and seamless experience, we strongly recommend utilizing a Windows PC
    or a robust Windows laptop, even if your target platform is a standalone VR headset.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了有效地跟随本章关于 Unity 中 VR 开发的说明，拥有适当的硬件和软件设置至关重要。为了获得最有效和无缝的体验，我们强烈建议使用 Windows
    PC 或坚固的 Windows 笔记本电脑，即使你的目标平台是独立 VR 头盔。
- en: Windows
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Windows
- en: Windows is the most supported platform by the majority of VR headset manufacturers,
    including **Meta Quest** and **HTC**. This support stems from Windows’ comprehensive
    hardware support and its optimization for gaming. Whether you’re developing for
    PC-tethered or standalone VR headsets, a Windows environment will provide the
    most resources and compatibility for VR development in Unity.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 是大多数 VR 头盔制造商，包括 **Meta Quest** 和 **HTC**，支持的平台。这种支持源于 Windows 对硬件的全面支持以及其对游戏的优化。无论你是为
    PC 绑定式还是独立 VR 头盔开发，Windows 环境将为 Unity 中的 VR 开发提供最丰富的资源和兼容性。
- en: 'For a smooth experience, we recommend the following minimum requirements:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获得流畅的体验，我们建议以下最低要求：
- en: 'Operating system: Windows 10 or above'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作系统：Windows 10 或更高版本
- en: 'Processor: Intel i5-4590/AMD Ryzen 5 1500X or greater'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理器：Intel i5-4590/AMD Ryzen 5 1500X 或更高
- en: 'Memory: 8 GB RAM or more'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存：8 GB RAM 或更多
- en: 'Graphics: NVIDIA GTX 1060/AMD Radeon RX 480 or greater'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图形：NVIDIA GTX 1060/AMD Radeon RX 480 或更高
- en: macOS
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: macOS
- en: While macOS is rarely supported by VR headsets, Unity still enables VR development
    on Apple devices through platforms such as ARKit that predominantly target AR
    instead of VR. If you’re using macOS and targeting standalone VR headsets, consider
    setting up a Windows partition through **Boot Camp**, which allows you to use
    any Windows-compatible VR headset. This setup will enable you to follow along
    with the instructions in this chapter without significant issues.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 macOS 很少被 VR 头盔支持，但 Unity 仍然可以通过 ARKit 等平台在苹果设备上实现 VR 开发，这些平台主要针对 AR 而不是
    VR。如果你正在使用 macOS 并针对独立 VR 头盔进行开发，考虑通过 **Boot Camp** 设置 Windows 分区，这允许你使用任何兼容 Windows
    的 VR 头盔。这种设置将使你能够无重大问题地跟随本章中的说明。
- en: Linux
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Linux
- en: Linux’s VR support is relatively limited, but **Valve** does extend support
    to the *Valve Index* and *HTC Vive* headsets via SteamVR on Linux platforms. If
    you’re targeting standalone VR headsets such as the *Oculus Quest*, Linux can
    be used for development by creating Android builds of your VR applications in
    Unity, then transferring these builds to the headset for testing. However, the
    standalone VR headsets typically run a version of Android, not Linux, which may
    bring about unique challenges.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Linux对VR的支持相对有限，但**Valve**通过SteamVR在Linux平台上扩展了对**Valve Index**和**HTC Vive**头戴设备的支持。如果你针对的是如**Oculus
    Quest**这样的独立VR头戴设备，可以通过在Unity中创建VR应用程序的Android版本来进行Linux平台上的开发，然后将这些构建转移到头戴设备上进行测试。然而，独立VR头戴设备通常运行Android版本而不是Linux，这可能会带来独特的挑战。
- en: 'If you’re utilizing a Linux platform, please ensure your system meets the following
    minimum requirements:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用Linux平台，请确保你的系统满足以下最低要求：
- en: 'Operating system: Ubuntu 18.04 LTS or newer'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作系统：Ubuntu 18.04 LTS或更新版本
- en: 'Processor: Dual-core CPU with hyper-threading'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理器：双核CPU带超线程技术
- en: 'Memory: 8 GB RAM or more'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存：8 GB RAM或更高
- en: 'Graphics: Nvidia GeForce GTX 970, AMD RX480'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图形：Nvidia GeForce GTX 970，AMD RX480
- en: What is VR development?
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是VR开发？
- en: When embarking on the fascinating journey of VR development in Unity, it’s important
    that we understand the features and peculiarities of VR development. This includes
    appreciating the software and hardware limitations, as well as the challenges
    that exist within this field. In the forthcoming sections, we will dive into the
    contrasts between VR development and traditional game development for 2D computer
    screens.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当开始Unity中VR开发的迷人旅程时，了解VR开发的特性和独特之处非常重要。这包括欣赏软件和硬件限制，以及该领域存在的挑战。在接下来的章节中，我们将深入探讨VR开发和传统2D计算机屏幕游戏开发的差异。
- en: Moreover, we will explore current trajectories and future trends of VR headset
    technology. This exploration includes the unique pros and cons that each VR headset
    brings to the table. Such understanding is key as it not only guides you in making
    a well-informed selection of a VR headset that suits your needs, but also equips
    you with the necessary knowledge to judge which VR headset would be ideal or less
    ideal, given a particular context.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们将探讨VR头戴设备技术的当前轨迹和未来趋势。这种探索包括每个VR头戴设备带来的独特优缺点。这种理解至关重要，因为它不仅指导你做出明智的选择，选择适合你需求的VR头戴设备，还使你具备判断在特定情境下哪种VR头戴设备理想或不理想所必需的知识。
- en: By the end of this section, you will be well-equipped to navigate the immersive
    and dynamic world of VR development in Unity.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 到本节结束时，你将具备充分的知识和技能，以在Unity中导航沉浸式和动态的VR开发世界。
- en: Exploring the contrasts between classical and VR game development
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索经典游戏与VR游戏开发的差异
- en: Classical game development and VR development, although existing on different
    ends of the gaming spectrum, both emerged from the same desire to create immersive,
    virtual landscapes. Intriguingly, both categories share more than just the objective
    of captivating the audience; they’re built on similar foundational elements of
    game design and require a corresponding toolset.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 经典游戏开发和VR开发，尽管存在于游戏光谱的不同端点，但它们都源于创造沉浸式、虚拟景观的相同愿望。有趣的是，这两个类别不仅共享吸引观众的共同目标，它们还建立在类似的游戏设计基础元素之上，并需要相应的工具集。
- en: Both domains of game creation demand careful planning and consideration of gameplay
    mechanics, user interfaces, objectives, levels, and storylines. Developers, whether
    they’re working on a traditional game or a VR project, often use the same suite
    of programming languages such as C++, C#, or Python for scriptwriting.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏创作的两个领域都要求仔细规划和考虑游戏玩法机制、用户界面、目标、关卡和剧情。开发者，无论是从事传统游戏还是VR项目，通常使用相同的编程语言套件，如C++、C#或Python进行脚本编写。
- en: The creation of **game assets** – textures, models, animations, and sounds –
    is another commonality between the two fields. VR development may lean slightly
    more toward 3D models and spatial audio to enrich the immersive nature of the
    environment. However, the overarching process of creating and incorporating these
    assets remains congruous in both disciplines. Regardless of the gaming medium,
    be it a 2D screen or a VR headset, the implementation of realistic physics is
    paramount to an engrossing experience.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**游戏资产**（纹理、模型、动画和声音）的创建是这两个领域的另一个共同点。VR开发可能略微偏向于3D模型和空间音频，以丰富环境的沉浸感。然而，创建和整合这些资产的整体过程在两个学科中仍然是一致的。无论游戏媒介是2D屏幕还是VR头盔，实现逼真的物理效果对于沉浸式体验至关重要。'
- en: Though they share these similarities, the divergences between classical game
    development and VR development are just as fascinating, primarily due to VR’s
    distinct nature and abilities.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然它们有这些相似之处，但经典游戏开发和VR开发之间的差异同样引人入胜，这主要归因于VR的独特性质和能力。
- en: 'One of the significant contrasts lies in the design’s dimensionality. Classical
    2D games primarily operate on a flat plane, wherein objects are depicted in two
    dimensions: height and width. The game *Super Mario Bros*. serves as a classic
    example, with the action unfolding from left to right and the characters’ movements
    largely restricted within this plane.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个显著的对比在于设计的维度。经典2D游戏主要在一个平面上运行，其中物体以二维形式呈现：高度和宽度。《超级马里奥兄弟》就是一个经典的例子，其动作从左到右展开，角色的移动主要限制在这个平面上。
- en: Conversely, VR games invite depth as a vital third dimension into play, thus
    offering the user the freedom to explore the scene from any perspective or position,
    akin to their experience in the real world. For instance, in a VR game such as
    *Beat Saber*, players can look around, reach out, and interact with the game environment
    in a way that mimics real-world spatial interactions.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，VR游戏将深度作为一个重要的第三维度引入游戏，从而使用户能够从任何角度或位置探索场景，类似于他们在现实世界中的体验。例如，在*Beat Saber*这样的VR游戏中，玩家可以四处张望，伸手，并以模仿现实世界空间交互的方式与游戏环境互动。
- en: These subtle yet impactful differences pave the way for a varied range of experiences
    in classical game development and VR development, each with its own unique charm
    and challenges.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这些微妙但影响深远的不同为经典游戏开发和VR开发中的各种体验铺平了道路，每种体验都有其独特的魅力和挑战。
- en: Equally important, the scope of player movement exhibits a clear distinction
    between classical 2D games and VR gaming experiences. Traditional 2D games typically
    restrict player actions to the *x* and *y* axes, confining movement within a certain
    plane. Conversely, VR introduces varying degrees of freedom.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 同样重要的是，玩家移动的范围在经典2D游戏和VR游戏体验之间表现出明显的区别。传统的2D游戏通常将玩家的动作限制在*x*和*y*轴上，将移动限制在一定的平面上。相反，VR引入了不同程度的自由度。
- en: For example, **three degrees of freedom** (**3DoF**) devices, often paired with
    **Mobile VR** solutions such as *Google Cardboard*, allow the user to look around
    freely (pitch, yaw, and roll) but don’t track physical displacement within a space.
    This provides a basic level of immersion, enabling the user to view a scene or
    object from multiple perspectives while standing still.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，**三个自由度**（**3DoF**）设备，通常与**移动VR**解决方案如*Google Cardboard*搭配使用，允许用户自由地四处张望（俯仰、偏航和翻滚），但不会跟踪空间内的物理位移。这提供了一种基本的沉浸感，使用户能够站在原地从多个角度观看场景或物体。
- en: A step further into the realm of VR are the **six degrees of freedom** (**6DoF**)
    devices. These not only track a player’s view but also register their physical
    movement along the *x*, *y*, and *z* axes, thus creating a more immersive and
    interactive environment. Crafting experiences for 6DoF can be intricate, necessitating
    full 3D spatial interactions. For instance, modern VR headsets such as the *Meta
    Quest 2* pair up with VR controllers or even offer hand-tracking capabilities.
    Users can interact with the virtual world in an incredibly intuitive manner, pressing
    buttons, twisting their hands, and conducting an array of movements that the AI-powered
    cameras on the VR headset accurately capture and translate in real time.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步深入VR领域的是**六自由度**（**6DoF**）设备。这些设备不仅跟踪玩家的视角，还能记录他们在*x*、*y*和*z*轴上的物理移动，从而创造一个更加沉浸和互动的环境。为6DoF创造体验可能相当复杂，需要完整的3D空间交互。例如，现代VR头戴设备如*Meta
    Quest 2*与VR控制器配对，甚至提供手势追踪功能。用户可以以极其直观的方式与虚拟世界交互，按按钮、转动双手，进行一系列动作，VR头戴设备上AI驱动的摄像头能够准确捕捉并实时翻译这些动作。
- en: The imperative of **player safety** is a unique aspect that distinguishes VR
    development from traditional game creation. While physical safety concerns are
    virtually non-existent in classical 2D game development, the expanded range of
    movement in VR can potentially lead to real-world mishaps. As such, developers
    need to engineer safety features such as virtual boundaries or alert systems to
    forestall accidents.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**玩家安全**的重要性是区分VR开发与传统游戏制作的独特方面。虽然物理安全问题是经典2D游戏开发中几乎不存在的，但VR中运动范围的扩大可能导致现实世界的意外。因此，开发者需要设计安全特性，如虚拟边界或警报系统，以防止事故发生。'
- en: The final distinguishing factor lies in **player conditioning**. Classical 2D
    games generally rely on players’ familiarity with standard game controls and mechanics
    – a safe assumption given the ubiquity of PCs in everyday life. VR, however, often
    pioneers novel forms of interactions that might confound first-time users. To
    bridge this gap, developers may need to incorporate tutorials or guides to help
    players navigate and interact with the VR gaming world.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的区分因素在于**玩家习惯**。经典的2D游戏通常依赖于玩家对标准游戏控制和机制的熟悉度——考虑到PC在日常生活中的普及，这是一个安全的假设。然而，VR往往开创了新颖的交互形式，可能会让初次用户感到困惑。为了弥合这一差距，开发者可能需要整合教程或指南来帮助玩家导航并交互VR游戏世界。
- en: Not only does VR development diverge significantly from traditional game development,
    but it also showcases a broader spectrum of techniques to power VR headsets. These
    diverse approaches, integral to the operation of VR technology, will be unraveled
    in the next section.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: VR开发不仅与传统游戏制作有显著差异，而且展示了为VR头戴设备供电的更广泛的技术范围。这些多样化的方法对于VR技术的运行至关重要，将在下一节中揭晓。
- en: Understanding different approaches to power VR headsets
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解为VR头戴设备供电的不同方法
- en: The power of a virtual reality headset can dramatically impact the success of
    your VR application. Let’s delve into the most common.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟现实头戴设备的功率可以显著影响你VR应用的成败。让我们深入了解其中最常见的情况。
- en: PC VR (alternatively known as PC-based VR or tethered VR headsets)
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PC VR（也称为基于PC的VR或有线VR头戴设备）
- en: '**PC-based VR headsets**, including models such as *Valve Index* and *HTC Vive
    Pro*, hinge on the computational capacity of a desktop or laptop computer. They
    delegate the heavy lifting, such as intensive computations, graphics rendering,
    and 3D simulations, to the connected computer. To this day, a substantial portion
    of VR headsets are either wholly PC-based or support a PC VR mode alongside a
    standalone variant. This is primarily because PC VR, bolstered by the superior
    computational power and graphical prowess of PCs, provides the most graphically
    rich and immersive VR experiences. Attributes such as level of detail, frame rate,
    and responsiveness are top-notch in PC-based VR.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**基于PC的VR头戴设备**，包括如*Valve Index*和*HTC Vive Pro*等型号，依赖于台式机或笔记本电脑的计算能力。它们将繁重的工作，如密集计算、图形渲染和3D模拟，委托给连接的电脑。时至今日，相当一部分VR头戴设备要么完全是基于PC的，要么在独立版本之外还支持PC
    VR模式。这主要是因为PC VR，得益于PC卓越的计算能力和图形能力，提供了最丰富和沉浸式的VR体验。在基于PC的VR中，细节级别、帧率和响应速度都是一流的。'
- en: PC-based VR systems predominantly employ two modes of connection between the
    VR headset and the computer. The wired cable connection, often utilizing HDMI
    or DisplayPort for video and USB for data, is the traditional route. A more recent
    innovation is a wireless connection, exemplified by the *Air Link* connection
    in the *Meta Quest* series. However, wireless PC VR connections are seldom used
    in reality due to their higher latency, which could hamper the responsiveness
    of the VR experience. Video quality can also fluctuate depending on network conditions,
    necessitating a robust and stable Wi-Fi signal for optimal operation.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 基于PC的VR系统主要采用两种连接方式将VR头盔与电脑连接。有线电缆连接通常使用HDMI或DisplayPort进行视频传输，USB进行数据传输，这是传统的连接方式。一种较新的创新是无线连接，例如*Meta
    Quest*系列中的*Air Link*连接。然而，由于无线PC VR连接的延迟较高，可能会影响VR体验的响应速度，因此在现实中很少使用。视频质量也会根据网络条件而波动，需要强大的稳定Wi-Fi信号才能实现最佳操作。
- en: Despite the convenience of wireless connections, for a seamless VR experience,
    a wired connection is still advisable, even when the headset supports both. It’s
    essential to note, however, that a wired PC VR system sacrifices portability due
    to its physical attachment to a PC. Whether you choose wired or wireless, the
    mobility of your VR setup is limited. For example, you can’t easily pack your
    VR headset for a holiday, an event, a conference, or a friend’s gathering. If
    you decide to transport your VR gear, it necessitates bringing along a powerful
    PC or ensuring the destination has the required computational resources. Coupled
    with the potentially steep price of a high-performance or gaming PC, this could
    make PC VR systems a substantial investment for some users.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管无线连接方便，但为了获得无缝的VR体验，即使头戴式设备支持无线连接，有线连接仍然是首选。然而，需要注意的是，有线PC VR系统由于物理连接到电脑，牺牲了便携性。无论选择有线还是无线，VR设置的移动性都受到限制。例如，你无法轻松地将VR头盔打包用于度假、活动、会议或朋友的聚会。如果你决定携带VR设备，则需要携带一台强大的电脑或确保目的地有所需的计算资源。加上高性能或游戏电脑可能高昂的价格，这可能会使PC
    VR系统对某些用户来说是一项重大投资。
- en: Standalone VR headsets
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 独立式VR头盔
- en: Addressing the limitations of PC-based VR headsets, **standalone VR devices**
    are making waves in the market, gaining immense popularity. Leading the pack is
    the *Meta Quest* series. These devices house all necessary computing components
    within the headsets themselves, making them autonomous units. Most modern standalone
    headsets are driven by *Qualcomm Snapdragon* chips, offering robust processing
    capabilities.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 针对基于PC的VR头盔的局限性，**独立式VR设备**在市场上引起了轰动，获得了巨大的流行度。处于领先地位的是*Meta Quest*系列。这些设备将所有必要的计算组件都集成在头戴式设备中，使其成为独立的单元。大多数现代独立式头戴式设备由*Qualcomm
    Snapdragon*芯片驱动，提供强大的处理能力。
- en: Standalone VR headsets champion portability and freedom of movement, eliminating
    the need to tether to a separate computing device. These all-in-one systems offer
    a cost-effective alternative to PC-based VR. Moreover, many standalone headsets,
    such as those in the *Meta Quest* series, support a PC VR mode, providing the
    flexibility to take on more computation-intensive applications such as *Half-Life
    Alyx* when desired.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 独立式VR头盔推崇便携性和自由移动，消除了连接到单独计算设备的需要。这些一体化系统为基于PC的VR提供了一种经济实惠的替代方案。此外，许多独立式头戴式设备，如*Meta
    Quest*系列中的设备，支持PC VR模式，提供了在需要时处理更密集计算应用（如*Half-Life Alyx*）的灵活性。
- en: One drawback, however, is the relatively short battery life of standalone headsets,
    usually topping out around two hours. Nevertheless, remedies exist, such as purchasing
    comfortable head straps equipped with additional battery life extenders. In most
    scenarios, we endorse the more affordable standalone headsets such as the *Meta
    Quest* series over their PC-based counterparts. For academic and business environments,
    standalone headsets are an efficient choice. A simple solution, such as purchasing
    multiple standalone headsets or a set of battery-enhancing head straps, can still
    offer substantial savings over traditional PC VR solutions. Standalone VR headsets
    also shine when used at events or conferences to showcase products or research,
    offering a hassle-free and portable solution.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，一个缺点是独立式头盔的电池寿命相对较短，通常最多只能使用两个小时。尽管如此，也存在一些补救措施，例如购买配备额外电池寿命延长器的舒适头带。在大多数情况下，我们推荐更经济实惠的独立式头盔，如*Meta
    Quest*系列，而不是基于PC的头盔。在学术和商业环境中，独立式头盔是一个高效的选择。简单的解决方案，如购买多个独立式头盔或一套增强电池寿命的头带，与传统PC
    VR解决方案相比，仍然可以节省大量费用。在活动或会议中使用独立式VR头盔展示产品或研究时，它们也表现出色，提供了一种方便且便携的解决方案。
- en: Console-based VR headsets
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基于控制台（Console-based）的VR头盔
- en: '**Console-based VR headsets**, such as the *PlayStation VR 2*, cater mainly
    to the gaming community. They draw on the processing power of the gaming console,
    delivering high-quality VR experiences without the need for a separate PC. However,
    the cost of owning a gaming console isn’t trivial. Moreover, like their PC-based
    counterparts, console-based VR headsets sacrifice portability due to their tethered
    nature. The quality of VR experiences can also be limited by the console’s capabilities.
    In summary, unless your primary focus is gaming, console-based VR headsets may
    not be the best fit for creating VR experiences, whether in a personal, business,
    or academic setting. Even within gaming circles, there may be superior options
    to consider.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**基于控制台的VR头盔**，如*PlayStation VR 2*，主要针对游戏社区。它们利用游戏控制台的处理能力，提供高质量的VR体验，无需单独的PC。然而，拥有游戏控制台的成本并不低。此外，就像它们的PC基对手一样，由于它们的连接性质，基于控制台的VR头盔牺牲了便携性。VR体验的质量也可能受到控制台能力的限制。总的来说，除非你的主要关注点是游戏，否则基于控制台的VR头盔可能不是在个人、商业或学术环境中创建VR体验的最佳选择。即使在游戏圈中，也可能有更好的选择可以考虑。'
- en: Smartphone-based VR headsets
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基于智能手机的VR头盔
- en: '**Smartphone-based VR headsets**, exemplified by *Google Cardboard* and *Samsung
    Gear VR*, harness the display and computing power of smartphones, which are devices
    most people already own. These headsets offer a cost-effective and highly portable
    solution. However, due to their limited computational and graphical prowess, the
    immersive experience they provide is inherently diminished. Furthermore, their
    interaction capabilities within the VR environment are curtailed due to a more
    restrictive range of sensors compared to other VR headset types. Thus, we seldom
    recommend them. Even for preliminary testing of VR experiences in the absence
    of a VR headset, tools such as Unity’s XR Device Simulator offer a free, convenient,
    and even superior solution.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**基于智能手机的VR头盔**，例如*Google Cardboard*和*Samsung Gear VR*，利用了智能手机的显示和计算能力，这些设备是大多数人已经拥有的。这些头盔提供了一种经济实惠且高度便携的解决方案。然而，由于它们的计算和图形能力有限，它们提供的沉浸式体验本质上会降低。此外，由于与其他VR头盔类型相比传感器范围更窄，它们在VR环境中的交互能力也受到限制。因此，我们很少推荐它们。即使在没有VR头盔的情况下进行VR体验的初步测试，Unity的XR设备模拟器等工具也提供了一种免费、方便甚至更优的解决方案。'
- en: Cloud-based VR headsets
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基于云的VR头盔
- en: A growing chorus within the VR community is advocating the development of **cloud-based
    VR headsets**. This emergent technology capitalizes on robust servers to shoulder
    computational tasks, streaming the results to the VR headset via the internet.
    This arrangement could potentially deliver high-resolution VR experiences independent
    of local computational prowess, further enhancing immersion and user satisfaction.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟现实（VR）社区中越来越多的声音正在倡导开发**基于云的VR头盔**。这项新兴技术利用强大的服务器来承担计算任务，通过互联网将结果流式传输到VR头盔。这种安排有可能在不依赖于本地计算能力的情况下提供高分辨率的VR体验，从而进一步增强沉浸感和用户满意度。
- en: A cloud-based approach could make VR headsets lighter and more user friendly,
    inviting a broader audience to invest in their own VR hardware. Another appealing
    aspect is that the hardware housed in the data center that powers the VR headset
    can be periodically upgraded by the provider, saving users from frequently investing
    in new equipment.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 基于云的方法可以使VR头戴设备更轻便、更易于使用，吸引更广泛的受众投资自己的VR硬件。另一个吸引人的方面是，为VR头戴设备提供动力的数据中心中的硬件可以由提供商定期升级，从而避免用户频繁投资新设备。
- en: So, why isn’t this computational approach ubiquitous in contemporary VR headsets?
    The primary reason is the necessity of a stable, high-bandwidth, low-latency internet
    connection – a prerequisite that isn’t universally available. Furthermore, there
    are potential privacy and security concerns associated with transmitting sensitive
    data over the internet.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，为什么这种计算方法在当代VR头戴设备中并不普遍呢？主要原因是需要一个稳定、高带宽、低延迟的互联网连接——这是一个并非普遍可用的先决条件。此外，与通过互联网传输敏感数据相关的潜在隐私和安全问题。
- en: As technology evolves and these challenges are addressed, we may see more adoption
    of cloud-based VR systems. However, as of now, their use remains largely experimental
    and not yet mainstream.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 随着技术的进步和这些挑战得到解决，我们可能会看到更多基于云的VR系统的采用。然而，截至目前，它们的使用仍然主要处于实验阶段，尚未成为主流。
- en: Having journeyed through this exploration of the distinct features of VR headsets
    and the nuances of VR development, you are now well-prepared to embark on the
    creation of your inaugural VR scene in Unity. This milestone will allow you to
    play around with some of the engaging toolkits that Unity provides specifically
    for VR, including the highly versatile XR Interaction Toolkit.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 经过对VR头戴设备的独特特性和VR开发的细微之处的探索，你现在已准备好开始创建你的首个Unity VR场景。这一里程碑将使你能够尝试Unity为VR提供的某些引人入胜的工具包，包括高度通用的XR交互工具包。
- en: Setting up a VR project in Unity and the XR Interaction Toolkit
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Unity和XR交互工具包中设置VR项目
- en: 'In the following sections, you will acquire the knowledge to create a Unity
    project specifically tailored for VR development. Furthermore, you will become
    proficient in the installation and configuration of two highly significant plugins
    that are pivotal to VR development within Unity: **XR Plug-in Management** and
    the XR Interaction Toolkit.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，你将获得创建专门针对VR开发的Unity项目的知识。此外，你将熟练掌握安装和配置两个对Unity中VR开发至关重要的插件：**XR插件管理**和XR交互工具包。
- en: Creating a project in Unity for VR development
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Unity中为VR开发创建项目
- en: Let’s begin by creating a brand-new project in the latest version of Unity.
    To ensure compatibility with different devices and platforms, it is crucial to
    enable both `Installs` folder, clicking on the **Settings** icon of your Unity
    version, selecting **Add Modules**, and installing the missing build supports.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从在最新版本的Unity中创建一个全新的项目开始。为了确保与不同设备和平台兼容，启用`Installs`文件夹至关重要，点击你的Unity版本的**设置**图标，选择**添加模块**，并安装缺失的构建支持。
- en: To bring a VR scene to life, we must first navigate to the **Projects** section
    in Unity and create a fresh project using the latest Unity version. While Unity
    does provide a VR template among the various project types to choose from, I recommend
    selecting **3D URP** **template** instead.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要使VR场景生动起来，我们首先需要导航到Unity中的**项目**部分，并使用最新的Unity版本创建一个新的项目。虽然Unity确实在可供选择的各种项目类型中提供VR模板，但我建议选择**3D
    URP** **模板**。
- en: The rationale behind this recommendation is that Unity’s VR template does not
    include the XR Interaction Toolkit, which would lead to extensive setting modifications
    if you were to choose the VR template. As such, creating a 3D URP project is a
    more streamlined and trouble-free approach.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这些建议背后的原因是Unity的VR模板不包括XR交互工具包，如果你选择VR模板，这将导致广泛的设置修改。因此，创建一个3D URP项目是一个更简洁、更无烦恼的方法。
- en: In the next section, you will learn how to install XR Plug-in Management and
    additional XR Plug-ins for PC-based and standalone VR headsets.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，你将学习如何为基于PC和独立VR头戴设备安装XR插件管理和额外的XR插件。
- en: Installing XR Plug-in Management and XR Plug-ins
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装XR插件管理和XR插件
- en: 'Now, let’s head over to **Edit** | **Project Settings** | **XR Plug-in Management**.
    From here, proceed by clicking on **Install XR Plug-in Management**. Think of
    XR Plug-in Management as the bridge between Unity and the different VR, MR, and
    AR systems you want to use for your scene. It acts like a middleman, allowing
    Unity to communicate and work effectively with these devices. Upon successful
    installation of XR Plug-in Management, you can navigate to **Edit** | **Project
    Settings** | **XR Plug-in Management** to select various plugin providers that
    will enable your VR application to run in PC VR mode on your VR headset. The following
    is a brief overview of some of the options:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们转到**编辑** | **项目设置** | **XR插件管理**。从这里，通过点击**安装XR插件管理**来继续操作。将XR插件管理视为Unity和不同VR、MR和AR系统之间的桥梁。它就像一个中间人，允许Unity与这些设备进行通信和有效工作。在XR插件管理成功安装后，你可以导航到**编辑**
    | **项目设置** | **XR插件管理**，选择各种插件提供商，这将使你的VR应用程序能够在你的VR头显上以PC VR模式运行。以下是一些选项的简要概述：
- en: '**Unity Mock HMD**: Ideal for game developers who may not have direct access
    to a VR headset. Unity’s Mock HMD mimics the functionalities of a VR headset,
    providing a platform to design, develop, and test your game within Unity’s environment
    without requiring physical hardware.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Unity模拟HMD**：非常适合可能无法直接访问VR头显的游戏开发者。Unity的模拟HMD模仿了VR头显的功能，提供了一个平台，可以在Unity环境中设计、开发和测试你的游戏，而无需物理硬件。'
- en: '**Oculus integration package**: A specialized Unity development package catering
    to Oculus devices. This includes platform-specific features, Avatar and LipSync
    SDKs, spatial audio, the Guardian system, and support for hand tracking. However,
    this package might restrict the portability of your project to non-Oculus platforms.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Oculus集成包**：一个专门针对Oculus设备的Unity开发包。这包括平台特定的功能、Avatar和LipSync SDKs、空间音频、守护者系统以及对手部追踪的支持。然而，这个包可能会限制你的项目在非Oculus平台上的可移植性。'
- en: '**OpenXR**: A remarkable open standard developed by the *Khronos Group* that
    offers developers the freedom to cater to a broad array of XR devices with the
    same input, thereby eliminating fragmentation. This obviates the need for separate
    Oculus or SteamVR plugins, simplifying maintenance by allowing a single code base
    to operate on any XR system.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OpenXR**：由*Khronos Group*开发的一个卓越的开放标准，为开发者提供了自由，可以针对广泛的XR设备提供相同的输入，从而消除碎片化。这消除了需要单独的Oculus或SteamVR插件的需求，通过允许单个代码库在任何XR系统上运行，简化了维护工作。'
- en: If you’re an ambitious developer aiming to create a VR experience that appeals
    to a wide audience, irrespective of their VR hardware, OpenXR would be your go-to.
    For this reason, we’ll be utilizing the OpenXR plugin throughout this book.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是一个雄心勃勃的开发者，旨在创建一个能够吸引广泛受众的VR体验，无论他们的VR硬件如何，OpenXR将是你的首选。因此，我们将在这本书中利用OpenXR插件。
- en: To get started, enable the **OpenXR** checkboxes on both the **PC** and **Android**
    tabs.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请在**PC**和**Android**标签上启用**OpenXR**复选框。
- en: This action triggers the download of OpenXR into your Unity project. Once the
    download is complete, a prompt requesting permission to restart the project will
    appear. Click **Yes**, as a restart is necessary to transition from Unity’s old
    input mode to the new one. After Unity restarts, you’ll find that the **OpenXR**
    option is now activated in XR Plug-in Management. However, an interaction profile
    still needs to be added, as indicated by the warning symbol next to it, as shown
    in *Figure 3**.1*.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 此操作将触发OpenXR下载到你的Unity项目中。下载完成后，将出现一个请求权限重新启动项目的提示。点击**是**，因为重启是必要的，以便从Unity的旧输入模式过渡到新模式。Unity重启后，你会发现XR插件管理中的**OpenXR**选项现在已激活。然而，还需要添加交互配置文件，如*图3.1*旁边所示警告符号所示。
- en: "![Figure 3.1 – \uFEFFHow the OpenXR plugin is selected for the PC tab in XR\
    \ Plug-in Management](img/B20869_03_01.jpg)"
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图3.1 – 如何在XR插件管理中为PC标签选择OpenXR插件](img/B20869_03_01.jpg)'
- en: Figure 3.1 – How the OpenXR plugin is selected for the PC tab in XR Plug-in
    Management
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.1 – 如何在XR插件管理中为PC标签选择OpenXR插件
- en: Navigate to **XR Plug-in Management** | **OpenXR** and click on the **+** icon
    in the **Interaction Profiles** section. Here, you can incorporate the interaction
    profiles of all headsets you aim to support. For instance, if you’re using a VR
    headset from the *Meta Quest* series, you should opt for the **Oculus Touch Controller
    Profile** option, as shown in *Figure 3**.2*.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到**XR插件管理** | **OpenXR**，然后在**交互配置文件**部分点击**+**图标。在这里，您可以包含您旨在支持的 所有头显的交互配置文件。例如，如果您使用的是*Meta
    Quest*系列的VR头盔，您应该选择**Oculus Touch Controller Profile**选项，如图*图3.2*所示。
- en: "![Figure 3.2 – \uFEFFThe OpenXR tab with the Oculus Touch Controller Profile\
    \ selected as an interaction profile](img/B20869_03_02.jpg)"
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图3.2 – 选择Oculus Touch Controller Profile作为交互配置文件的OpenXR选项卡](img/B20869_03_02.jpg)'
- en: Figure 3.2 – The OpenXR tab with the Oculus Touch Controller Profile selected
    as an interaction profile
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.2 – 选择Oculus Touch Controller Profile作为交互配置文件的OpenXR选项卡
- en: OpenXR’s **interaction profiles** are standardized sets of user inputs for XR
    devices, ensuring consistency and compatibility across various platforms. They
    allow developers to program once while catering to multiple devices, making the
    development process more efficient. For instance, two VR controllers from different
    manufacturers might have different button layouts, but through OpenXR, they can
    be mapped to a standard set of interactions. This means that if an XR developer
    programs an action such as *grab* or *jump*, it will work irrespective of the
    exact controller used as long as the appropriate interaction profile is implemented.
    By adding only a few interaction profiles, developers limit their application’s
    compatibility to a specific set of devices, potentially excluding some users.
    Conversely, incorporating as many interaction profiles as possible broadens the
    application’s reach, ensuring that it can be used seamlessly across a wide array
    of XR devices.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: OpenXR的**交互配置文件**是一组标准化的用户输入集，用于XR设备，确保了跨各种平台的一致性和兼容性。它们允许开发者一次编程，同时满足多个设备，使开发过程更加高效。例如，来自不同制造商的两个VR控制器可能有不同的按钮布局，但通过OpenXR，它们可以被映射到一组标准交互。这意味着如果XR开发者编程一个动作，如*抓取*或*跳跃*，只要实现了适当的交互配置文件，它就会在任何控制器上工作，而不管具体使用的是哪种控制器。通过仅添加少量交互配置文件，开发者限制了他们应用程序的兼容性，使其仅限于特定设备集，可能会排除一些用户。相反，尽可能多地包含交互配置文件可以扩大应用程序的覆盖范围，确保它可以在广泛的XR设备上无缝使用。
- en: Make sure to add interaction profiles for both **PC** and **Android**. If you
    can’t locate the **Android** tab, this implies that you missed downloading the
    module during the initial Unity setup. In such a case, you must return to Unity
    Hub and add the module to your installed Unity version.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 确保为**PC**和**Android**都添加交互配置文件。如果您找不到**Android**选项卡，这意味着您在Unity初始设置过程中错过了下载模块。在这种情况下，您必须返回Unity
    Hub，并将模块添加到您安装的Unity版本中。
- en: You might be wondering why we must configure the same setting twice, once under
    the **Windows** tab and then under the **Android** tab. The reason is that the
    **Windows** tab enables VR for PC VR, while the **Android** tab permits the addition
    of plug-ins from different providers to run your VR application on your VR headset
    in standalone mode.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想知道为什么我们必须配置相同的设置两次，一次在**Windows**选项卡下，然后是在**Android**选项卡下。原因是**Windows**选项卡启用了PC
    VR的VR功能，而**Android**选项卡允许添加来自不同提供商的插件，以便在您的VR头盔上以独立模式运行您的VR应用程序。
- en: Next, let’s discuss **Render Mode** for both the **Windows** and **Android**
    tabs. The default rendering mode is **single pass instanced** (**SPI**), but there’s
    also an option for the **multi pass** (**MP**) rendering mode. Both are tailored
    for VR environments, each with its own set of benefits and limitations.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们讨论**Windows**和**Android**选项卡的**渲染模式**。默认渲染模式是**单遍实例化**（**SPI**），但还有一个**多遍**（**MP**）渲染模式的选项。这两个都是针对VR环境定制的，每个都有自己的优点和局限性。
- en: SPI offers considerable performance advantages, most notably by reducing the
    number of draw calls by half. This is crucial for standalone VR headsets, where
    optimization is paramount to ensure the application runs smoothly. Maintaining
    a consistent frame rate and smoothness is vital in VR to avoid motion sickness.
    Additionally, SPI guarantees visual consistency as both eyes are rendered from
    the same instance, reducing the chances of visual discrepancies that can lead
    to discomfort. However, the catch is that SPI often requires shader modifications
    for accurate geometry processing, which can introduce another layer of development
    complexity.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: SPI提供了相当的性能优势，最显著的是将绘制调用次数减半。这对于独立VR耳机至关重要，优化是确保应用程序平稳运行的关键。在VR中保持一致的帧率和流畅性对于避免运动病至关重要。此外，SPI通过从同一实例渲染两只眼睛，保证了视觉一致性，减少了可能导致不适的视觉差异。然而，问题是SPI通常需要对着色器进行修改以进行准确的几何处理，这可能会引入另一层开发复杂性。
- en: 'On the other hand, MP boasts greater shader compatibility since it doesn’t
    demand specific shader modifications. This can be beneficial if your scene uses
    a variety of shaders. Each eye is rendered independently in MP, which can sometimes
    lead to superior visual quality by reducing visual artifacts. However, this comes
    with a performance trade-off: MP doubles the draw calls, which might overwhelm
    lower-end devices. Furthermore, rendering each eye separately might produce slight
    visual differences that can be jarring in VR.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，MP由于不需要特定的着色器修改而具有更好的着色器兼容性。如果您的场景使用了多种着色器，这可能是有益的。在MP中，每只眼睛都是独立渲染的，这有时可以通过减少视觉伪影来提高视觉质量。然而，这伴随着性能上的权衡：MP将绘制调用次数加倍，这可能会使低端设备不堪重负。此外，分别渲染每只眼睛可能会产生轻微的视觉差异，这在VR中可能会令人不快。
- en: As for standalone VR development, SPI is often the preferred choice due to its
    optimization advantages. It’s crucial for delivering visually compelling experiences
    that also perform well on standalone VR headsets. That said, recent Unity versions
    tend to favor MP in desktop mode for editor testing.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 对于独立VR开发，由于其优化优势，SPI通常是首选。对于提供视觉上引人入胜且在独立VR耳机上表现良好的体验至关重要。尽管如此，最近的Unity版本在桌面模式下倾向于使用MP进行编辑器测试。
- en: Having made our project VR-ready, we can now proceed to install the XR Interaction
    Toolkit and its demo scene.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在使我们的项目准备好VR之后，我们现在可以继续安装XR交互工具包及其演示场景。
- en: Installing the XR Interaction Toolkit and samples
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装XR交互工具包和示例
- en: 'By installing XR Plug-in Management, we have enabled Unity to now communicate
    with our VR headset. But how can we enable Unity to receive information from our
    headset? And how can our application in Unity translate inputs it gets from the
    VR headsets into actions in the game? This is where the XR Interaction Toolkit
    comes into play. To download the XR Interaction Toolkit, do the following:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 通过安装XR插件管理，我们已经使Unity能够与我们的VR耳机进行通信。但如何使Unity能够从我们的耳机接收信息？以及如何将Unity应用程序从VR耳机接收到的输入转换为游戏中的动作？这就是XR交互工具包发挥作用的地方。要下载XR交互工具包，请按照以下步骤操作：
- en: Navigate to **Window** | **Package Manager**. In **Package Manager**, you can
    see all the packages you have currently imported, such as the **OpenXR** plugin.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**窗口** | **包管理器**。在**包管理器**中，您可以查看您当前已导入的所有包，例如**OpenXR**插件。
- en: Download the XR Interaction Toolkit by clicking the `com.unity.xr.interaction.toolkit`
    as the `2.5.1` as the **Version**.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击`com.unity.xr.interaction.toolkit`并选择`2.5.1`作为**版本**来下载XR交互工具包。
- en: Important note
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Adding a specific version number is optional when installing packages. By default,
    if you don’t specify a version, the Package Manager will automatically install
    the latest version of the XR Interaction Toolkit. While staying updated with the
    latest versions is generally advisable for new projects, for the purpose of this
    book, we strongly recommend sticking to version *2.5.1* of the toolkit. Using
    this specific version ensures consistency and ease of understanding as you follow
    along with our tutorials. Even though newer versions might retain a similar structure,
    the additional features and elements introduced could make navigating our tutorials
    more challenging. So, to ensure a smooth learning experience, please use version
    *2.5.1* while working through this book.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装包时添加特定版本号是可选的。默认情况下，如果您没有指定版本，包管理器将自动安装XR交互工具包的最新版本。虽然对于新项目来说，保持与最新版本的同步通常是建议的，但为了本书的目的，我们强烈建议坚持使用工具包的版本*2.5.1*。使用这个特定版本确保了在跟随我们的教程时的一致性和易于理解。即使新版本可能保持相似的结构，引入的额外功能和元素可能会使导航我们的教程更具挑战性。因此，为了确保学习体验顺畅，请在阅读本书时使用版本*2.5.1*。
- en: Hit **Enter** and the XR Interaction Toolkit will be automatically downloaded
    into your project. If you see a pop-up window with a warning asking you to restart
    the Unity Editor, click on **Yes**. This just means that the XR Interaction Toolkit
    is using a new input system to validate interactions.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下**Enter**键，XR交互工具包将自动下载到您的项目中。如果您看到一个带有警告的弹出窗口，要求您重新启动Unity编辑器，请点击**是**。这仅仅意味着XR交互工具包正在使用一个新的输入系统来验证交互。
- en: Staying in the `Samples` folder to expand a list of useful add-ons to the XR
    Interaction Toolkit and import **Starter Assets**. This is a collection of tools
    that make it easier to set up behaviors. It includes a pre-made set of actions
    you can use as inputs, as well as presets specifically designed for XR Interaction
    Toolkit behaviors that rely on the input system.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Samples`文件夹中展开XR交互工具包的有用附加组件列表，并导入**起始资产**。这是一个包含使设置行为更简单的工具的集合。它包括一组预先制作的行为，您可以用作输入，以及专门为依赖于输入系统的XR交互工具包行为设计的预设。
- en: After closing `XR Interaction Toolkit` folder is the actual XR Interaction Toolkit,
    while the `Samples` folder includes the sample add-ons we downloaded. First, let’s
    open the **Demo Scene** asset that comes with **Starter Assets**. To do this,
    navigate to **Samples** | **XR Interaction Toolkit** | **2.5.1** | **Starter Assets**
    and double-click on **Demo Scene**.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭`XR交互工具包`文件夹后是实际的XR交互工具包，而`Samples`文件夹包括我们下载的示例附加组件。首先，让我们打开**起始资产**中包含的**演示场景**资产。为此，导航到**Samples**
    | **XR Interaction Toolkit** | **2.5.1** | **Starter Assets**，然后双击**演示场景**。
- en: In the next section, we will explore the different components of the **Demo**
    **Scene** asset.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探索**演示场景**资产的不同组件。
- en: Exploring the XR Interaction Toolkit demo scene
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索XR交互工具包的演示场景
- en: In this section, we will delve into the **Demo Scene** asset of the XR Interaction
    Toolkit. This scene offers a comprehensive overview of all the crucial concepts
    you need to grasp to develop your own immersive VR experiences. If you’ve followed
    the steps in the previous section, you should now be presented with the scene
    pictured in *Figure 3**.3*.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将深入了解XR交互工具包的**演示场景**资产。这个场景提供了所有关键概念的全面概述，这些概念对于开发您自己的沉浸式VR体验至关重要。如果您已经遵循了上一节中的步骤，现在应该会看到图*3.3*中所示的场景。
- en: "![Figure 3.3 – \uFEFFThe \uFEFFScene view \uFEFFand the Scene \uFEFFHierarchy\
    \ window of the XR Interaction Toolkit’s demo scene](img/B20869_03_03.jpg)"
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图3.3 – XR交互工具包演示场景的场景视图和场景层次结构窗口](img/B20869_03_03.jpg)'
- en: Figure 3.3 – The Scene view and the Scene Hierarchy window of the XR Interaction
    Toolkit’s demo scene
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.3 – XR交互工具包演示场景的场景视图和场景层次结构窗口
- en: Beyond the `Climb Sample` via the project window’s search bar. Dragging and
    dropping this prefab from the project window into the scene hierarchy window will
    present the identical ladder and climbing wall in your new scene, combined with
    the associated scripts and functionalities. Similarly, the **XR Interaction Setup**
    prefab, the most important prefab of the XR Interaction Toolkit, will be a staple
    of many of the forthcoming XR projects discussed in this book. You will learn
    more about it in the next section.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 通过项目窗口的搜索栏找到**攀爬样本**。将此预制体从项目窗口拖放到场景层次结构窗口中，将在您的新场景中呈现相同的梯子和攀爬墙，同时结合相关的脚本和功能。同样，**XR交互设置**预制体，作为XR交互工具包最重要的预制体，将成为本书中讨论的许多即将到来的XR项目的标准。您将在下一节中了解更多关于它的信息。
- en: Examining the pre-configured player
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查预配置的玩家
- en: While the **Teleportation Environment**, **Interactables Sample**, **UI Sample**,
    and **Climb Sample** prefabs all provide an easy way for you to incorporate different
    types of interactions into your VR scenes, the **XR Interaction Setup** prefab
    is the entity that interacts with these interactable components. Essentially,
    it’s a pre-configured player, designed for seamless navigation and interaction
    within the scene. You can integrate it into any of your future VR scenes in which
    you import the XR Interaction Toolkit. Let’s begin to explore it.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然**传送环境**、**交互样本**、**UI样本**和**攀爬样本**预制体都为你提供了将不同类型的交互轻松集成到VR场景中的方法，但**XR交互设置**预制体是与这些交互组件交互的实体。本质上，它是一个预配置的玩家，旨在在场景中实现无缝导航和交互。您可以将它集成到任何未来VR场景中，其中您导入了XR交互工具包。让我们开始探索它。
- en: By clicking on the arrow next to the **XR Interaction Setup** prefab in the
    scene hierarchy window, you can see its child components, which are **Input Action
    Manager**, **Interaction Manager**, **Event System**, and **XR Origin (XR Rig)**.
    By opening up all of their child components as well, you can examine the structure
    of this prefab, as shown in *Figure 3**.4*.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在场景层次结构窗口中点击**XR交互设置**预制体旁边的箭头，您可以看到其子组件，包括**输入动作管理器**、**交互管理器**、**事件系统**和**XR原点（XR
    Rig）**。通过打开所有子组件，您可以检查该预制体的结构，如图*3.4*所示。
- en: "![Figure 3.4 – \uFEFFThe components of the complete XR Interaction Setup prefab](img/B20869_03_04.jpg)"
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![图3.4 – 完整XR交互设置预制体的组件](img/B20869_03_04.jpg)'
- en: Figure 3.4 – The components of the complete XR Interaction Setup prefab
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.4 – 完整XR交互设置预制体的组件
- en: 'To understand these components and how they interact with each other, let’s
    imagine a VR game scenario where the player takes on the role of a chef in a restaurant
    and uses a VR headset and controllers to interact with the kitchen environment.
    In this imaginary example, the components of the **XR Interaction Setup** prefab
    would take on the following roles:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解这些组件以及它们如何相互交互，让我们想象一个VR游戏场景，其中玩家扮演餐厅的厨师角色，并使用VR头盔和控制器与厨房环境进行交互。在这个虚构的例子中，**XR交互设置**预制体的组件将承担以下角色：
- en: '**Input Action Manager**: This component manages the processing of inputs from
    the VR controllers. For instance, a controller button press could initiate actions
    such as gripping a pan or picking up an ingredient.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输入动作管理器**：该组件负责处理VR控制器输入。例如，控制器按钮的按下可以启动诸如握住锅或拿起食材等动作。'
- en: '**XR Interaction Manager**: This component governs interactions between the
    player and virtual objects. For instance, it manages the outcomes when a player’s
    VR hand interacts with a virtual button – perhaps a door opens or a light switches
    on. Similarly, if the player, holding a pan, moves their hand over the stove and
    releases the grip button, the pan could settle onto the stove.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**XR交互管理器**：该组件负责玩家与虚拟对象之间的交互。例如，它管理玩家VR手与虚拟按钮（如门打开或灯光开启）交互的结果。同样，如果玩家手持锅，将手移至炉灶上方并释放握把按钮，锅可能会落在炉灶上。'
- en: '**EventSystem**: This component oversees the triggering and processing of events
    within the game. For example, upon the successful preparation and serving of a
    dish, an event could be triggered perhaps the sound of applause or a visual congratulatory
    message illuminating the screen.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件系统**：该组件负责游戏内事件的触发和处理。例如，在成功准备和上菜后，可以触发事件，例如掌声或屏幕上亮起的视觉祝贺信息。'
- en: '**XR Origin (XR Rig)**: This component serves as the player’s anchor point
    in the virtual world, responsible for managing the user’s movement and positioning
    within the XR environment. By utilizing data from the VR device, **XR Origin**
    updates the position and orientation of the camera and controllers via its attached
    **XR Origin** script, thus creating the illusion of movement and interaction within
    the virtual environment. In our game context, **XR Origin** would represent the
    player’s location in the virtual kitchen; if the player advances a step, their
    avatar would correspondingly move a step closer to the stove.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**XR起点（XR Rig）**：这个组件作为玩家在虚拟世界中的锚点，负责管理用户在XR环境中的移动和定位。通过利用VR设备的数据，**XR起点**通过其附加的**XR起点**脚本来更新相机和控制器的位置和朝向，从而在虚拟环境中创造移动和交互的错觉。在我们的游戏场景中，**XR起点**代表玩家在虚拟厨房中的位置；如果玩家向前迈一步，他们的角色将相应地向前迈一步靠近炉灶。'
- en: '**Camera Offset** with **Main Camera**: This component tracks the player’s
    head movements. For instance, if the player turns their head toward a recipe book
    lying on a shelf, the game’s viewpoint adjusts accordingly to focus on the book.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**相机偏移**与**主相机**：这个组件跟踪玩家的头部动作。例如，如果玩家将头部转向放在架子上的食谱书，游戏的视角将相应调整以聚焦于书本。'
- en: '**Left Controller** and **Right Controller**: These components monitor the
    player’s hand movements, which typically correspond with the position of the VR
    controllers. If the player extends their hand to grab a virtual pan using the
    controller, the VR hands within the scene would mimic this action. This is why
    the hands contain child objects such as **Poke Interactor** for touch, **Direct
    Interactor** for grabbing, **Ray Interactor** for pointing, and **Teleport Interactor**
    for swift movement.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**左控制器**和**右控制器**：这些组件监控玩家的手部动作，通常与VR控制器的位置相对应。如果玩家使用控制器将手伸出来抓取虚拟锅具，场景中的VR手将模仿这个动作。这就是为什么手部包含子对象，如**戳击交互器**用于触摸、**直接交互器**用于抓取、**射线交互器**用于指向和**传送交互器**用于快速移动。'
- en: '**Gaze Interactor**: This component facilitates interactions based on the player’s
    eye or head gaze direction. For instance, if the player focuses their gaze on
    a particular ingredient, a tooltip might appear to deliver more information about
    it. As not every VR headset supports eye tracking, **Gaze Interactor** also supports
    head tracking.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注视交互器**：这个组件根据玩家的视线或头部注视方向促进交互。例如，如果玩家将注意力集中在特定的食材上，可能会出现一个工具提示来提供更多关于它的信息。由于并非每个VR头盔都支持眼动追踪，**注视交互器**也支持头部追踪。'
- en: '**Locomotion System**: As its name already suggests, this GameObject with its
    associated **Locomotion System** script is responsible for equipping the player
    with different forms of movement such as turning, walking, teleporting, or climbing.
    Let’s have a look at each of its children:'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运动系统**：正如其名称所暗示的，这个具有相关**运动系统**脚本的GameObject负责为玩家配备不同的移动形式，如转向、行走、传送或攀爬。让我们来看看它的每个子组件：'
- en: '**Turn**: The **Turn** GameObject has two important scripts attached to it,
    which you can see by selecting **Turn** in the scene hierarchy window and navigating
    to its inspector window. First, there is the **Snap Turn Provider** script. This
    script enables the player to rotate their view in the VR environment in discrete
    steps, or “snaps,” using their VR controllers. This can be useful in cases where
    physically turning isn’t convenient or possible.'
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**转向**：**转向**GameObject附有两个重要的脚本，您可以通过在场景层次窗口中选择**转向**并导航到其检查器窗口来查看。首先，有一个**快照转向提供者**脚本。这个脚本允许玩家使用VR控制器在VR环境中以离散的步骤，或“快照”，旋转他们的视角。这在物理转向不方便或不可能的情况下非常有用。'
- en: Second, there is the **Continuous Turn Provider** script. Allowing for smooth,
    continuous turning in the VR environment using the VR controllers, this script
    offers an alternative to the step-by-step turning provided by the **Snap Turn**
    **Provider** script.
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二，有一个**连续转向提供者**脚本。它允许在VR环境中使用VR控制器进行平滑、连续的转向，这个脚本提供了**快照转向提供者**脚本提供的逐步转向的替代方案。
- en: '**Move**: In our VR restaurant game, for example, the player can move through
    the kitchen by navigating with the controllers of their VR headset. Even though
    they remain stationary in the physical world, their perspective shifts in the
    virtual space, giving the illusion of traversing the environment as if they were
    genuinely walking through the virtual kitchen. This functionality comes from the
    **Dynamic Move Provider** script, which is attached to the **Move** GameObject.'
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Move**: 例如，在我们的VR餐厅游戏中，玩家可以通过VR头显的控制器导航穿过厨房。尽管他们在物理世界中保持静止，但他们的视角在虚拟空间中发生变化，给人一种像真正在虚拟厨房中行走一样穿越环境的错觉。这种功能来自附加到**Move**游戏对象的**Dynamic
    Move Provider**脚本。'
- en: '**Grab Move**: This component of the XR Interaction Toolkit’s **XR Interaction
    Setup** prefab facilitates intuitive movement within the VR space. With two instances
    of the **Grab Move Provider** script being attached to this GameObject, the player
    can simulate the sensation of grabbing the virtual world with either hand. As
    the player moves the controller, the VR origin adjusts inversely, keeping the
    controller’s position consistent relative to the virtual environment. Complementing
    this, the **Two-Handed Grab Move Provider** script empowers players to manipulate
    their position using both controllers, similar to grabbing two bars and pulling
    or pushing oneself. This dual-hand interaction allows players to not just move
    through the VR restaurant game, but also to adjust their orientation and scale
    within the scene.'
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**抓取移动**: XR交互工具包的**XR交互设置**预制件中的这个组件促进了VR空间中的直观移动。通过将两个**抓取移动提供者**脚本附加到这个游戏对象上，玩家可以用任何一只手模拟抓住虚拟世界的感受。随着玩家移动控制器，VR原点反向调整，保持控制器相对于虚拟环境的相对位置一致。与此相辅相成的是，**双手抓取移动提供者**脚本使玩家能够使用两个控制器来操纵他们的位置，就像抓住两根杆子并拉动或推动自己一样。这种双手交互允许玩家不仅能够在VR餐厅游戏中移动，还可以在场景中调整他们的方向和比例。'
- en: '**Teleportation**: Solely navigating the virtual world via continuous movement,
    as provided by the **Move** GameObject, can make some VR users motion sick, even
    if they regularly immerse themselves in VR. This is why most VR applications mainly
    work with teleportation, which enables the player to instantly appear in a new
    spot within the virtual space by moving the joysticks of the VR controllers in
    the desired direction. As they do so, a visual cue, often a circled overlay, indicates
    the target destination. Once the joystick is released, the player is directly
    teleported to that location. The **Teleportation** GameObject of the XR Interaction
    Toolkit offers the player of our imaginary VR restaurant game a rich variety of
    ways to teleport around the kitchen or dining area. For example, the player might
    only be able to navigate to distinct places in the VR restaurant, making the gameplay
    more straightforward and structured, which is ideal for educational settings or
    applications tailored to newbies to VR. If exploration and spontaneity are the
    core missions of the VR restaurant game, enabling the player to teleport to any
    part of the floor that is not occupied by chairs, tables, or kitchen cabinets
    might be more favorable.'
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**传送**: 仅通过**Move**游戏对象提供的连续移动在虚拟世界中导航，可能会让一些VR用户感到恶心，即使他们经常沉浸在VR中。这就是为什么大多数VR应用主要使用传送功能，它允许玩家通过在VR控制器上移动摇杆，在虚拟空间中瞬间出现在新的位置。在此过程中，一个视觉提示，通常是一个圆形覆盖层，指示目标目的地。一旦释放摇杆，玩家就会直接传送到那个位置。XR交互工具包中的**传送**游戏对象为我们虚构的VR餐厅游戏玩家提供了丰富的传送方式，可以在厨房或用餐区周围传送。例如，玩家可能只能导航到VR餐厅中的特定地点，使游戏玩法更加直接和结构化，这对于教育环境或针对VR新手的应用程序来说非常理想。如果探索和自发性是VR餐厅游戏的核心任务，允许玩家传送到地板上没有椅子、桌子或厨房橱柜的任何部分可能更为有利。'
- en: Given the importance of teleportation in VR applications, we’ll delve deeper
    into which teleportation features the XR Interaction Toolkit offers in the upcoming
    section.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 由于传送在VR应用中的重要性，我们将在下一节中深入了解XR交互工具包提供的哪些传送功能。
- en: Teleporting
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 传送
- en: The **Teleportation Environment** prefab of the **Demo Scene** asset consists
    of a **Teleport Area** prefab and four **Teleportation Anchor** prefabs. You can
    see these components in *Figure 3**.5*.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**Demo Scene**资产中的**传送环境**预制件由一个**传送区域**预制件和四个**传送锚点**预制件组成。您可以在*图3*.5中看到这些组件。'
- en: "![Figure 3.5 – \uFEFFThe Teleportation Area and four Teleportation Anchors,\
    \ which are both part of the Teleportation Environment prefab](img/B20869_03_05.jpg)"
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图3.5 – 传送区域和四个传送锚点，它们都是传送环境预制件的一部分](img/B20869_03_05.jpg)'
- en: Figure 3.5 – The Teleportation Area and four Teleportation Anchors, which are
    both part of the Teleportation Environment prefab
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.5 – 传送区域和四个传送锚点，它们都是传送环境预制件的一部分
- en: The **Teleport Area** script, equipped with a **Teleportation Area** prefab
    and a child cube, represents a space available for teleportation. Users can teleport
    to any pointed spot within this designated area, effectively teleporting within
    the bounds of the cube.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '**传送区域**脚本，配备了一个**传送区域**预制件和一个子立方体，代表了一个可用于传送的空间。用户可以在这个指定区域内指向任何点进行传送，从而在立方体的范围内实现传送。'
- en: By contrast, a **Teleport Anchor** prefab serves as a specific teleportation
    point, allowing users to navigate to exact locations with ease.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，**传送锚点**预制件作为一个特定的传送点，使用户能够轻松地导航到确切的位置。
- en: Imagine a VR game where users must traverse a river by hopping from one stone
    lying in the water to another. On the other side of the river, there is a forest
    with gold hidden underneath some trees that they must find. In this case, **Teleport
    Anchors** could be used for each of the stones lying in the water. This would
    allow the users to traverse the river with ease and focus more on the actual gameplay.
    For the other side of the river, however, a **Teleport Area** script would be
    better suited, allowing users to explore the area as they wish.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一个VR游戏，用户必须通过从水中的一块石头跳到另一块石头上来穿越河流。河流的另一边是一个森林，一些树下隐藏着金币，他们必须找到这些金币。在这种情况下，**传送锚点**可以用于水中的每一块石头。这将使用户能够轻松地穿越河流，更多地关注实际的游戏玩法。然而，对于河流的另一边，**传送区域**脚本将更适合，使用户能够按自己的意愿探索该区域。
- en: In the next section, you will learn all about grabbable objects and their movement
    types.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，你将了解所有关于可抓取对象及其移动类型的内容。
- en: Exploring grabbable objects
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索可抓取对象
- en: The **Interactables Sample** prefab, another part of the **Demo Scene** asset,
    contains three 3D figures that highlight the capabilities of the **XR Grab Interactable**
    script, an essential tool within the XR Interaction Toolkit. This script will
    likely be a staple of your future VR projects whenever you want an object to be
    grabbable. Once you’ve integrated the XR Interaction Toolkit and configured XR
    Plug-in Management in any of your VR endeavors, making an object grabbable is
    a breeze. Simply highlight the object in the scene hierarchy window, click on
    the **Add Component** option in the Inspector, and then search for and choose
    the **XR Grab Interactable** script. Additionally, ensure the **XR Interaction
    Setup** prefab is in your scene, as it provides the required player for the interaction.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '**交互式样本**预制件，**演示场景**资产的一部分，包含三个3D角色，突出了**XR抓取交互**脚本的能力，这是XR交互工具包中的一个基本工具。这个脚本很可能会成为你未来VR项目中每次想要使对象可抓取时的必备工具。一旦你集成了XR交互工具包并在你的任何VR项目中配置了XR插件管理，使对象可抓取就变得轻而易举。只需在场景层次窗口中突出显示对象，然后在检查器中点击**添加组件**选项，然后搜索并选择**XR抓取交互**脚本。此外，确保**XR交互设置**预制件在场景中，因为它提供了所需的玩家以进行交互。'
- en: This single step of adding the **XR Grab Interactable** script to an object
    transforms it into a VR-interactable item. This ease of use and efficiency is
    a significant reason behind the XR Interaction Toolkit’s popularity among VR developers.
    Instead of manually coding numerous lines to achieve this functionality, you can
    focus your time on refining the user experience by tweaking the integrated physics
    settings. These adjustments can significantly enhance the immersion and realism
    of your VR application.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 将**XR抓取交互**脚本添加到对象中的这一步将其转换成了一个VR交互物品。这种易用性和效率是XR交互工具包在VR开发者中受欢迎的重要原因之一。你不必手动编写大量代码来实现这一功能，你可以将时间集中在通过调整集成的物理设置来完善用户体验。这些调整可以显著提高你的VR应用的沉浸感和真实感。
- en: Now, let’s delve into the various physics configurations offered by the **XR
    Grab Interactable** script to enhance the object-grabbing experience. Each of
    the three figures of the **Interactables Sample** prefab showcases a different
    **Movement Type** setting of the **XR Grab Interactable** script, as you can see
    in *Figure 3**.6*.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们深入了解**XR抓取交互式**脚本提供的各种物理配置，以增强物体抓取体验。**交互式样本**预制件的三个图例分别展示了**XR抓取交互式**脚本的**运动类型**设置的不同选项，如图*图3.6*所示。
- en: "![Figure 3.6 – \uFEFFThe demo scene’s Interactables Sample prefab in the scene\
    \ view](img/B20869_03_06.jpg)"
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![图3.6 – 场景视图中演示场景的交互式样本预制件](img/B20869_03_06.jpg)'
- en: Figure 3.6 – The demo scene’s Interactables Sample prefab in the scene view
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.6 – 场景视图中演示场景的交互式样本预制件
- en: 'Let’s go through the figures one by one:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐个分析这些图例：
- en: '**Interactable Kinematic Torus**: When you select this in the scene hierarchy
    window and inspect its properties, you will see that its **Movement Type** setting
    is labeled as **Kinematic**. A kinematic object is guided by the software’s calculations
    rather than by external forces. This means it moves smoothly based on the game
    engine’s instructions and isn’t affected by gravity or collisions like a regular
    object would be. This type of movement can be useful in applications such as puzzle
    games, where objects must fit into specific locations without bouncing or rolling
    away. It ensures that once placed, the objects remain static.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可交互运动学环面**：当您在场景层次结构窗口中选择此对象并检查其属性时，您将看到其**运动类型**设置被标记为**运动学**。运动学对象由软件的计算而不是外部力引导。这意味着它根据游戏引擎的指令平滑移动，不会像普通对象那样受到重力或碰撞的影响。这种类型的运动在需要物体放入特定位置的应用程序中非常有用，例如益智游戏，确保一旦放置，物体就保持静止。'
- en: '**Interactable Instant Pyramid**: This figure has **Instantaneous** selected
    as its **Movement Type** setting. Instantaneous movement is precisely as it sounds:
    immediate. Instead of creating a sensation of weight or inertia as you move it,
    this object will respond and relocate right away without any noticeable lag or
    drift. It’s like moving a cursor on a computer screen; where you point, it goes.
    This is ideal for **user interface** (**UI**) interactions in VR, such as selecting
    menu options or dragging and dropping virtual files. It’s also useful in time-sensitive
    scenarios, such as a fast-paced game where players must rapidly move objects to
    different locations without the delay of simulated physical interaction.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可交互的即时金字塔**：此图例已将**即时**选为其**运动类型**设置。即时运动正如其名：立即。与移动时产生重量或惯性的感觉不同，此对象将立即响应并重新定位，没有任何明显的延迟或漂移。这就像在电脑屏幕上移动光标一样；你指向哪里，它就去哪里。这对于VR中的**用户界面**（**UI**）交互非常理想，例如选择菜单选项或拖放虚拟文件。在时间敏感的场景中也非常有用，例如快节奏的游戏，玩家必须快速将物体移动到不同的位置，而无需模拟物理交互的延迟。'
- en: '**Interactable Velocity Tracked Wedge**: This figure’s **Movement Type** setting
    is set to **Velocity Tracking**. Here, the movement relies on the speed and direction
    of your hand motion. Think of it like tossing a ball; the speed and angle of your
    throw will determine how the ball flies. In the VR space, this object’s motion
    mirrors the speed and trajectory of your gesture. This movement type is perfect
    for sports simulations such as VR baseball or basketball, where the speed and
    direction of the player’s hand play a role in the performance of the in-game action.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可交互速度追踪楔形物**：此图例的**运动类型**设置为**速度追踪**。在这里，运动依赖于您手部动作的速度和方向。想象一下扔球；你扔的速度和角度将决定球飞行的轨迹。在VR空间中，此对象的运动反映了您手势的速度和轨迹。这种运动类型非常适合体育模拟，如VR棒球或篮球，其中玩家的手部速度和方向在游戏动作的执行中起着作用。'
- en: You can observe these three movement types firsthand by running the demo scene
    on your VR headset or via the XR Device Simulator and navigating to the **Grab
    Interactable** **Objects** booth.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在您的VR头盔上运行演示场景或通过XR设备模拟器并导航到**抓取交互式对象**展台，亲自观察这三种运动类型。
- en: The next section introduces you to the different types of UI elements provided
    by the XR Interaction Toolkit.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节将向您介绍XR交互工具包提供的不同类型的用户界面元素。
- en: Inspecting different types of UI elements
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查不同类型的用户界面元素
- en: The **UI Sample** prefab in the **Demo Scene** asset showcases the different
    types of UI elements currently provided by the XR Interaction Toolkit. You can
    see them in *Figure 3**.7*.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '**UI样本**预制体在**Demo Scene**资产中展示了XR交互工具包目前提供的不同类型的UI元素。您可以在*图3.7*中看到它们。'
- en: "![Figure 3.7 – \uFEFFThe demo scene’s UI Sample prefab in the scene view](img/B20869_03_07.jpg)"
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![图3.7 – 示例场景的UI样本预制体在场景视图中](img/B20869_03_07.jpg)'
- en: Figure 3.7 – The demo scene’s UI Sample prefab in the scene view
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.7 – 示例场景的UI样本预制体在场景视图中
- en: 'Click on the arrow next to the prefab in the scene hierarchy window to inspect
    its child components. Let’s go through them:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在场景层次窗口中点击预制体旁边的箭头以检查其子组件。让我们逐一查看：
- en: '**ModalSingleButton**: This UI element presents a short text message accompanied
    by a button. This layout makes it an ideal UI prefab whenever you need to display
    important pop-up notifications to the user of your VR experience. For instance,
    it could serve to inform users at the outset of a VR session that they’re about
    to embark on a timed experience. Alternatively, it can ensure that users have
    understood instructions or confirm their consent for data usage in a VR research
    study.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ModalSingleButton**：这个UI元素展示了一段简短的文本消息和按钮。这种布局使其成为在需要向VR体验用户显示重要弹出通知时理想的UI预制体。例如，它可以用来在VR会话开始时通知用户他们即将开始一个计时体验。或者，它可以确保用户已经理解了说明或确认了他们对VR研究数据使用的同意。'
- en: '**Interactive Controls**: This prefab contains multiple UI elements with more
    detailed input choices for users compared to the **ModalSingleButton** prefab.
    **MinMaxSlider**, for instance, lets the user pinpoint a specific state within
    a minimum-to-maximum range by sliding over it with the VR controller. The **Dropdown**
    prefab, **Text Toggle** prefab, and **Icon Toggle** prefab grant similarly precise
    ways for users to communicate their preferences in the VR world. These components
    of the **Interactive Controls** prefab shine in contexts requiring intricate user
    feedback or directives. For instance, the user might select the room they want
    to see in a VR apartment viewing experience via a **Dropdown** menu. They could
    adjust the room lighting intensity with **MinMaxSlider**, and toggle between floor
    materials and wall paintings using **Text Toggle** and **Icon Toggle**.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**交互控件**：与**ModalSingleButton**预制体相比，这个预制体包含多个UI元素，为用户提供更详细的输入选项。例如，**MinMaxSlider**允许用户通过VR控制器在最小到最大范围内滑动，以精确指定一个特定状态。**Dropdown**预制体、**Text
    Toggle**预制体和**Icon Toggle**预制体为用户提供了在VR世界中精确表达偏好的方式。这些**交互控件**预制体的组件在需要复杂用户反馈或指令的上下文中表现突出。例如，用户可以通过**Dropdown**菜单选择他们想要在VR公寓查看体验中看到的房间。他们可以使用**MinMaxSlider**调整房间照明的强度，并通过**Text
    Toggle**和**Icon Toggle**在地板材料和墙面画作之间切换。'
- en: '**Scroll UI Sample**: This prefab features a simple text block that users can
    scroll through using their VR controllers. This element is a handy tool for educational
    segments within VR, such as diving deep into the history of an art piece in a
    virtual museum tour.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**滚动UI样本**：这个预制体包含一个简单的文本块，用户可以使用VR控制器滚动浏览。这个元素是VR教育部分的一个实用工具，例如在虚拟博物馆游览中深入了解一件艺术品的历程。'
- en: By right-clicking on the UI sample prefab in the scene hierarchy window and
    selecting one of the options offered under UI, you can easily add more UI elements
    onto the **Canvas** component as you please.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在场景层次窗口中右键单击UI样本预制体并选择UI下提供的选项之一，您可以轻松地将更多UI元素添加到**Canvas**组件中，按需操作。
- en: The **TrackedDeviceGraphicRaycaster** script is another essential component
    of all UI interactions in VR scenes with the XR Interaction Toolkit. It should
    be attached to the **Canvas** component showcasing the UI elements. In the case
    of the **Demo Scene** asset, the **UI Sample** prefab is the **Canvas** component,
    so the script is attached to it, as you can also see in its inspector window.
    The **TrackedDeviceGraphicRaycaster** script gives your **Canvas** component an
    X-ray vision to discern when a player’s controller is aiming at an element on
    the **Canvas** component. Within the VR context, it transforms controller movements
    into interactions with the UI elements displayed on the **Canvas** component.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '**TrackedDeviceGraphicRaycaster**脚本是所有使用XR交互工具包的VR场景中UI交互的另一个重要组件。它应该附加到展示UI元素的**Canvas**组件上。在**Demo场景**资产的情况下，**UI样本**预制件是**Canvas**组件，因此脚本附加到它上，正如你可以在其检查器窗口中看到的那样。**TrackedDeviceGraphicRaycaster**脚本给你的**Canvas**组件提供了X光般的视力，以辨别玩家的控制器是否瞄准**Canvas**组件上的元素。在VR环境中，它将控制器动作转换为与**Canvas**组件上显示的UI元素之间的交互。'
- en: In the next section, you will learn how you can interact with buttons in your
    VR scene.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，你将学习如何在与你的VR场景中的按钮进行交互。
- en: Interacting via buttons
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过按钮进行交互
- en: The **Poke Interactions Sample** GameObject within our **Demo Scene** asset
    features three unique buttons that are shown in *Figure 3**.8*.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们**Demo场景**资产中的**Poke交互样本**GameObject展示了三个独特的按钮，如图*3.8*所示。
- en: "![Figure 3.8 – \uFEFFThree unique buttons from the Poke Interaction Sample\
    \ of the demo scene](img/B20869_03_08.jpg)"
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![图3.8 – 演示场景的戳击交互样本中的三个独特按钮](img/B20869_03_08.jpg)'
- en: Figure 3.8 – Three unique buttons from the Poke Interaction Sample of the demo
    scene
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.8 – 演示场景的戳击交互样本中的三个独特按钮
- en: Unlike ordinary buttons, these are designed to react to your touch in distinct
    ways. The button on the left side triggers a particle animation once it is poked;
    the button in the middle plays a sound, and the button on the right side increments
    the number on the UI element that is attached to it every time it is pressed.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 与普通按钮不同，这些按钮被设计成以独特的方式对你的触摸做出反应。左侧的按钮一旦被戳，就会触发粒子动画；中间的按钮会播放声音，而右侧的按钮每次被按下时都会增加其附加到UI元素上的数字。
- en: 'These buttons all have the same three scripts attached to them: **XR Simple
    Interactable**, **XR Poke Filter**, and **XR Poke Interactor**. These scripts
    provide important functionalities that all of these buttons need, despite their
    distinct flavors:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这些按钮都附加了相同的三个脚本：**XR简单交互脚本**、**XR戳击过滤器**和**XR戳击交互器**。尽管它们的风格各不相同，但这些脚本提供了所有这些按钮都需要的重要功能：
- en: '**XR Simple Interactable**: This script is the magic that makes our buttons
    interactive and touch-responsive. Without it, they would simply be static objects
    in the virtual world, unreactive to our touch. In the scene hierarchy window,
    select the first **Push** button and navigate to the inspector window. Now, click
    on the arrow next to the **Interactable Events** menu of the **XR Simple Interactable**
    script to see all interactable events associated with this script. Scroll down
    to the **Select** section and observe how the **Particle System** event is played
    or stopped as the user enters or exits the selection of this button. Repeat this
    step for the other two buttons to see what their **Select** sections look like.
    In the upcoming chapters of this book, you will create your own unique game logics
    in the **Interactable** **Events** section.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**XR简单交互脚本**：这是使我们的按钮交互式和触摸响应的魔法。没有它，它们在虚拟世界中将仅仅是静态对象，对我们的触摸无动于衷。在场景层次结构窗口中，选择第一个**Push**按钮并导航到检查器窗口。现在，点击**XR简单交互脚本**的**交互事件**菜单旁边的箭头，以查看与此脚本关联的所有交互事件。向下滚动到**选择**部分，观察当用户进入或退出此按钮的选择时，**粒子系统**事件是如何播放或停止的。重复此步骤，查看其他两个按钮的**选择**部分看起来如何。在本书的后续章节中，你将在**交互事件**部分创建自己的独特游戏逻辑。'
- en: '**XR Poke Filter**: This script assesses the authenticity of a touch. If the
    touch doesn’t meet its criteria, the poke filter blocks its entry.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**XR戳击过滤器**：此脚本评估触摸的真实性。如果触摸不符合其标准，戳击过滤器会阻止其进入。'
- en: '**XR Poke Follow Affordance**: This script provides the buttons with a lifelike,
    tactile response. Upon poking, the respective button is pressed down, mirroring
    the movement of a real-world button. Upon release, it rebounds back to its original
    position.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**XR戳击跟随行为**：此脚本为按钮提供了逼真的、触觉上的响应。戳击时，相应的按钮被按下，模仿现实世界按钮的运动。释放时，它反弹回原始位置。'
- en: Throughout this book, we’ll delve deeper into creating diverse poke interactions,
    teaching you to customize these components to fulfill your specific requirements.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的整个过程中，我们将深入探讨创建多样化的POKE交互，教你如何自定义这些组件以满足你的特定需求。
- en: On our last step of exploring the **Demo Scene** asset, you’ll get a glimpse
    of more advanced features of the XR Interaction Toolkit.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们探索**演示场景**资产的最后一步，你将一瞥XR交互工具包的更多高级功能。
- en: Exploring gaze interactions and climbing
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索注视交互和攀爬
- en: '**Gaze interaction** is an immersive feature in VR that enables the user to
    trigger events and control aspects of the VR environment simply by directing their
    eye or head gaze. The demo scene of the XR Interaction Toolkit contains an entire
    booth just to showcase different types of gaze-based interactions. These types
    of interactions are among the most advanced features of the XR Interaction Toolkit,
    which is why you will learn how to implement them into your VR scenes in [*Chapter
    8*](B20869_08.xhtml#_idTextAnchor026), alongside other advanced techniques.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '**注视交互**是VR中的一种沉浸式功能，它允许用户通过指向他们的眼睛或头部注视来触发事件和控制VR环境的各个方面。XR交互工具包的演示场景包含一个专门的展位，用于展示不同类型的基于注视的交互。这些交互类型是XR交互工具包中最先进的功能之一，这就是为什么你将在[*第8章*](B20869_08.xhtml#_idTextAnchor026)中学习如何将它们实现到你的VR场景中，以及其他高级技术。'
- en: 'Climbing, while a demanding concept in real life, is easier to enable in VR
    scenes than one might think, especially when compared to techniques such as gaze
    tracking. The **Demo Scene** asset’s **Climb Sample** prefab showcases two climbable
    objects: a ladder and a climbing wall. You can observe them in *Figure 3**.9*.'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然攀爬在现实生活中是一个要求较高的概念，但在VR场景中启用它比人们想象的要容易，尤其是在与注视跟踪等技术相比时。**演示场景**资产中的**攀爬样本**预制体展示了两个可攀爬物体：一个梯子和一个攀岩墙。你可以在*图3.9*中观察到它们。
- en: "![Figure 3.9 – \uFEFFThe Climb Sample prefab, consisting of a ladder and a\
    \ climbing wall among other elements](img/B20869_03_09.jpg)"
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![图3.9 – **攀爬样本**预制体，包括梯子和攀岩墙等元素](img/B20869_03_09.jpg)'
- en: Figure 3.9 – The Climb Sample prefab, consisting of a ladder and a climbing
    wall among other elements
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.9 – **攀爬样本**预制体，包括梯子和攀岩墙等元素
- en: At first glance, they may seem distinct, but underneath, they share the same
    scripts.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 初看之下，它们可能看起来不同，但本质上，它们共享相同的脚本。
- en: 'To understand how you can make an object in your VR scene climbable, follow
    these steps:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何在你的VR场景中使一个物体可攀爬，请按照以下步骤操作：
- en: Open the **Climb Sample** prefab in the scene hierarchy window.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在场景层次窗口中打开**攀爬样本**预制体。
- en: 'Explore every child component of both the **Ladder** and the **Climbing Wall**
    prefab that has the *Climbable* label. In the inspector window, you’ll notice
    each of these climbable components has the same two scripts from the XR Interaction
    Toolkit attached to them: the **Climb Interactable** script and the **XR Interactable
    Affordance State** **Provider** script.'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 探索**梯子**和**攀岩墙**预制体中所有带有*可攀爬*标签的子组件。在检查器窗口中，你会发现每个这些可攀爬组件都附有XR交互工具包的两个相同的脚本：**攀爬交互**脚本和**XR交互能力状态提供者**脚本。
- en: 'Simply adding these two scripts to any object in your VR environment via the
    inspector window provides it with climbable properties. Now, let’s dive deeper
    into the roles of these two scripts:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 简单地将这两个脚本添加到你的VR环境中的任何对象，通过检查器窗口，就可以给它提供可攀爬属性。现在，让我们更深入地探讨这两个脚本的作用：
- en: '**Climb Interactable**: This script essentially makes an object climbable.
    When a player interacts with an object that has this script, they can virtually
    climb it.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**攀爬交互**：这个脚本本质上使一个物体可攀爬。当玩家与具有此脚本的物体交互时，他们可以虚拟地攀爬它。'
- en: '**XR Interactable Affordance State Provider**: This script aids in fine-tuning
    the interaction between the player and climbable objects. It’s a system that dictates
    how the climbing experience should function and respond to the user’s interactions.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**XR交互能力状态提供者**：这个脚本有助于微调玩家与可攀爬物体之间的交互。这是一个规定攀爬体验应该如何运作并响应用户交互的系统。'
- en: Now that we’ve explored all the key components of the demo scene, it’s time
    for you to test and explore it. In the upcoming section, we’ll discuss several
    options to get you started on this exciting journey.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经探索了演示场景的所有关键组件，现在是时候让你测试和探索它了。在接下来的部分，我们将讨论几个选项，帮助你开始这段激动人心的旅程。
- en: Deploying and testing VR experiences onto different VR platforms or simulators
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将VR体验部署和测试到不同的VR平台或模拟器
- en: Creating a VR scene goes beyond just design; it involves testing and deployment
    as well. While testing focuses on ensuring the VR scene works correctly and offers
    a good user experience, deployment is about transferring and optimizing the scene
    for playback on specific VR headsets, such as the *Meta Quest* series, *HTC Vive*,
    or *Valve Index*. Early development stages might use tools such as the XR Device
    Simulator for rapid testing, but as a project nears completion, thorough testing
    on an actual VR headset becomes essential.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 创建VR场景不仅涉及设计，还包括测试和部署。虽然测试侧重于确保VR场景正确运行并提供良好的用户体验，但部署则是将场景传输并优化以在特定的VR头戴设备上播放，例如*Meta
    Quest*系列、*HTC Vive*或*Valve Index*。在早期开发阶段，可能会使用XR设备模拟器等工具进行快速测试，但随着项目接近完成，在实际VR头戴设备上进行彻底测试变得至关重要。
- en: 'Now, let’s go through the various options for testing and deploying your VR
    scene based on what hardware is available to you:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们根据您可用的硬件，逐一介绍测试和部署您VR场景的各种选项：
- en: '*No VR headset available*: In cases where a VR headset is unavailable, you
    can use the XR Interaction Toolkit’s XR Device Simulator to test the features
    of your VR scene. Even if you do have a VR headset at your disposal, the simulator
    can offer a quicker alternative to physically connecting and testing on a VR headset,
    particularly when you’re making simple modifications.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*没有可用的VR头戴设备*：在没有VR头戴设备的情况下，您可以使用XR交互工具包的XR设备模拟器来测试您VR场景的功能。即使您有可用的VR头戴设备，模拟器也可以提供一种比物理连接和测试VR头戴设备更快的替代方案，尤其是在您进行简单修改时。'
- en: '*Standalone VR headset*: Most standalone VR headsets support PC-based VR mode.
    This mode, when enabled, is often the most efficient and powerful way to test
    your VR scene. However, there might be times when you don’t have the necessary
    cable to activate PC-based VR mode. In such cases, you have two main alternatives
    for testing your VR scene. The XR Device Simulator is typically the preferred
    method, because testing directly on a standalone VR headset requires deploying
    it onto the device. This process can be lengthy and time-consuming. It happens
    on the Android platform via the project’s *Build Settings*. So, if PC-based VR
    mode isn’t an option, you might use the XR Device Simulator for quick tweaks and
    minor scene changes. For substantial modifications or a comprehensive user experience
    test, deploying directly to the headset would be advisable.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*自带VR头戴设备*：大多数自带VR头戴设备支持PC模式。启用此模式通常是测试您VR场景最有效和最强大的方式。然而，有时您可能没有激活PC模式的必要电缆。在这种情况下，您有两个主要的测试VR场景的替代方案。XR设备模拟器通常是首选方法，因为直接在自带VR头戴设备上测试需要将其部署到设备上。这个过程可能既耗时又费力。在Android平台上，这个过程是通过项目的*构建设置*完成的。因此，如果PC模式不可用，您可能需要使用XR设备模拟器进行快速调整和场景的微小修改。对于实质性的修改或全面的用户体验测试，直接部署到头戴设备上可能是更可取的。'
- en: '*PC-based VR headset or Standalone VR headset with PC-based VR mode enabled*:
    If you have either a PC-based VR headset or a standalone VR headset with PC-based
    VR mode enabled, your options for testing and deployment are expanded. For minor
    modifications to your VR scene, the XR Device Simulator might be all you need.
    For moderate to major changes, it is easy to test the VR scene on your headset
    by pressing the **Play** button in your Unity scene, provided the VR headset is
    connected to either the *SteamVR* or *Oculus* software. For considerable changes,
    or when analyzing the overall user experience, you can deploy your VR scene through
    **Windows/Mac/Linux** in **Build Settings** while the VR headset is connected
    to the *SteamVR* or *Oculus* software.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*基于PC的VR头戴设备或启用PC模式的自带VR头戴设备*：如果您拥有基于PC的VR头戴设备或已启用PC模式的自带VR头戴设备，您的测试和部署选项将得到扩展。对于您VR场景的微小修改，XR设备模拟器可能就是您所需要的。对于中等至重大的修改，只要VR头戴设备连接到*SteamVR*或*Oculus*软件，您就可以通过在Unity场景中按**播放**按钮轻松地在头戴设备上测试VR场景。对于相当大的修改或分析整体用户体验时，您可以通过在**构建设置**中连接到*SteamVR*或*Oculus*软件的VR头戴设备，通过**Windows/Mac/Linux**部署您的VR场景。'
- en: 'You might be curious about what *SteamVR* or *Oculus* software entails and
    when you’ll need them. Simply put, both are software platforms that not only let
    you play PC VR games but also test and deploy VR experiences on your headset.
    You will learn more about both in the upcoming sections of this chapter. In general,
    we would recommend the following, depending on the type of headset you own:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能对*SteamVR*或*Oculus*软件的内容以及何时需要它们感到好奇。简单来说，这两个都是软件平台，不仅让您能够玩PC VR游戏，还能在您的耳机上测试和部署VR体验。您将在本章接下来的部分中了解更多关于这两个平台的信息。一般来说，我们会根据您拥有的耳机类型推荐以下内容：
- en: '*Headset from the Meta Quest series*: Install both SteamVR and Oculus software
    on your computer and learn to deploy your VR scene to your VR headset through
    both VR platforms, as these headsets support both. Both types of deployment are
    very easy to do, but they enable you not only to test your scene more thoroughly,
    but also to easily reach a wider audience.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Meta Quest系列耳机*：在您的电脑上安装SteamVR和Oculus软件，并学习如何通过这两个VR平台将您的VR场景部署到VR耳机上，因为这些耳机支持两者。这两种部署方式都非常容易操作，但它们不仅让您能够更彻底地测试您的场景，而且可以轻松地触及更广泛的受众。'
- en: '*Valve Index, HTC Vive series, or any other non-Meta headset*: Only install
    SteamVR and learn to deploy your VR scene onto your VR headset.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Valve Index、HTC Vive系列或其他非Meta耳机*：只需安装SteamVR，并学习如何将您的VR场景部署到VR耳机上。'
- en: The following sections will delve deeper into each of these options, providing
    a detailed guide on installing the XR Device Simulator, SteamVR, and Oculus software.
    Feel free to skip to the sections that are relevant to you.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 以下章节将更深入地探讨这些选项中的每一个，提供安装XR设备模拟器、SteamVR和Oculus软件的详细指南。请随意跳转到与您相关的部分。
- en: Installing the XR Device Simulator
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装XR设备模拟器
- en: Now, we’ll learn about the essentials of installing and using the XR Device
    Simulator, a valuable tool in the VR development workflow that lets you emulate
    user inputs to control XR devices in a simulated environment. From importing the
    toolkit to using it effectively in your Unity projects, we’ll detail every aspect
    using comprehensive examples.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将了解安装和使用XR设备模拟器的要点，这是VR开发工作流程中的一个宝贵工具，它允许您在模拟环境中模拟用户输入以控制XR设备。从导入工具包到在Unity项目中有效使用它，我们将通过综合示例详细说明每个方面。
- en: 'As it is part of the XR Interaction Toolkit, you can easily import the XR Device
    Simulator via Unity’s package manager. Here is a step-by-step guide to doing this:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 作为XR交互工具包的一部分，您可以通过Unity的包管理器轻松导入XR设备模拟器。以下是进行此操作的步骤指南：
- en: Inside your Unity project, navigate to **Windows** | **Package Manager** | **XR**
    **Interaction Toolkit**.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的Unity项目中，导航到**Windows** | **包管理器** | **XR交互工具包**。
- en: By selecting the **Samples** tab of the **XR Interaction Toolkit** package,
    you will find **XR Device Simulator** among the listed elements.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择**XR交互工具包**包的**样本**选项卡，您将在列出的元素中找到**XR设备模拟器**。
- en: By clicking the **Import** button next to the XR Device Simulator, you import
    it into your project.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击XR设备模拟器旁边的**导入**按钮，将其导入到您的项目中。
- en: After successfully installing the XR Device Simulator, let’s use it to test
    out the **Demo Scene** asset of the XR Interaction Toolkit.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功安装XR设备模拟器后，让我们使用它来测试XR交互工具包的**演示场景**资产。
- en: Using the XR Device Simulator
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用XR设备模拟器
- en: To incorporate the XR Device Simulator into the demo scene or any of your future
    VR scenes, search for `XR Device Simulator` via the project window’s search bar.
    This way, you will find the **XR Device Simulator** prefab, the asset you will
    need to add to scenes where you want to simulate XR input. Now, simply drag this
    prefab into the scene hierarchy window of your VR scene. Before continuing, make
    sure the **XR Interaction Setup** prefab is also added to your scene. Now, click
    on the **Play** button to explore the power of the XR Device Simulator. *Figure
    3**.10* shows what the XR Device Simulator looks like in the **Play** mode.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 要将XR设备模拟器集成到演示场景或您未来的任何VR场景中，通过项目窗口的搜索栏搜索`XR设备模拟器`。这样，您将找到**XR设备模拟器**预制件，这是您需要添加到希望模拟XR输入的场景中的资产。现在，只需将这个预制件拖放到您的VR场景的场景层次结构窗口中。在继续之前，请确保**XR交互设置**预制件也已添加到您的场景中。现在，点击**播放**按钮以探索XR设备模拟器的功能。*图3.10*显示了XR设备模拟器在**播放**模式下的外观。
- en: "![Figure 3.10 – \uFEFFThe Play mode of the XR Interaction’s Toolkit demo scene\
    \ when the XR Device Simulator is added to the scene](img/B20869_03_10.jpg)"
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![图3.10 – 当将XR设备模拟器添加到场景时，XR交互工具包演示场景的播放模式](img/B20869_03_10.jpg)'
- en: Figure 3.10 – The Play mode of the XR Interaction’s Toolkit demo scene when
    the XR Device Simulator is added to the scene
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.10 – 当XR设备模拟器添加到场景时，XR交互工具包演示场景的播放模式
- en: You are now equipped to navigate your scene using the key bindings supplied
    by the simulator, specifically the *WASD* keys. Hit the *Tab* key to switch active
    control between the left controller, right controller, and VR headset. Utilizing
    your mouse, you can explore the scene or alter the angles of your controllers,
    contingent on whether you are operating in headset or controller mode. Pressing
    the *G* key enables you to interact with objects in the scene, including pressing
    buttons. After experimenting with the XR Device Simulator and familiarizing yourself
    with the different keys, you’ll swiftly appreciate its simplicity and effectiveness
    as a testing tool for your VR scene before moving on to real XR hardware deployment.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在已经准备好使用模拟器提供的按键绑定来导航您的场景，特别是*WASD*键。按下*Tab*键可以在左侧控制器、右侧控制器和VR头盔之间切换活动控制。使用您的鼠标，您可以探索场景或调整控制器的角度，这取决于您是在头盔模式还是控制器模式下操作。按下*G*键可以使您与场景中的对象进行交互，包括按下按钮。在尝试了XR设备模拟器并熟悉了不同的按键后，您将迅速体会到它作为VR场景测试工具的简单性和有效性，然后再转向真实XR硬件部署。
- en: As powerful and convenient as the XR Device Simulator might be, there is no
    experience more immersive than testing and deploying your scene onto a VR headset.
    The following section explains how to do so using SteamVR.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管XR设备模拟器可能非常强大和方便，但将您的场景测试和部署到VR头盔上的体验没有比这更沉浸的。下一节将解释如何使用SteamVR来完成这项工作。
- en: Setting up SteamVR
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置SteamVR
- en: SteamVR is a platform developed by *Valve Corporation* for VR applications and
    content. It is part of the larger **Steam** platform, a very popular online marketplace
    for games and software, known for its extensive library and active community.
    For VR developers, using SteamVR can thus be very advantageous as VR content in
    SteamVR can potentially reach millions of users worldwide. SteamVR supports a
    wide range of VR headsets, including those from *HTC Vive*, *Valve Index*, *Windows
    Mixed Reality*, and the *Meta Quest* series. At the time of writing the book,
    we are not aware of any commercially available VR headset that doesn’t support
    SteamVR. It is basically a default standard in the VR headset market.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: SteamVR是由*Valve Corporation*为VR应用程序和内容开发的一个平台。它是更大的**Steam**平台的一部分，这是一个非常流行的游戏和软件在线市场，以其庞大的图书馆和活跃的社区而闻名。对于VR开发者来说，使用SteamVR可以非常有优势，因为SteamVR中的VR内容有可能触达全球数百万用户。SteamVR支持广泛的VR头盔，包括*HTC
    Vive*、*Valve Index*、*Windows Mixed Reality*和*Meta Quest*系列。在撰写本书时，我们不知道有任何商业上可用的VR头盔不支持SteamVR。它基本上是VR头盔市场的一个默认标准。
- en: Interestingly, even the *Meta Quest* series, designed on Android and not primarily
    PC-based VR, allows developers to deploy VR scenes and applications not just on
    Meta’s proprietary Oculus platform, but also on the SteamVR platform. This versatility
    is immensely beneficial. If you’re a *Meta Quest* series headset owner, we highly
    recommend learning to test and deploy your scenes on both platforms. Let’s illustrate
    this with an example.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，即使是基于Android而非主要基于PC的VR的*Meta Quest*系列，也允许开发者将VR场景和应用部署到Meta的专有Oculus平台，以及SteamVR平台。这种多功能性非常有益。如果您是*Meta
    Quest*系列头盔的拥有者，我们强烈建议您学习在两个平台上测试和部署您的场景。让我们用一个例子来说明这一点。
- en: Suppose you’re creating a VR game requiring intricate hand interactions such
    as object manipulation and complex maneuvers. You aim to cater to users of *HTC
    Vive*, *Valve Index*, and headsets from the *Meta Quest* series. By harnessing
    SteamVR and its SteamVR Unity plugin, you can develop the game once and ensure
    compatibility across all these headsets. SteamVR’s precise tracking system enhances
    the game’s immersive and responsive nature across various devices. Post-development,
    you can launch your game on the Steam platform, thus accessing a vast user base,
    including users of the *Meta Quest* series who are employing SteamVR.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您正在创建一个需要复杂手部交互的VR游戏，如物体操作和复杂操作。您的目标是满足*HTC Vive*、*Valve Index*和*Meta Quest*系列头盔的用户。通过利用SteamVR及其SteamVR
    Unity插件，您可以一次开发游戏并确保所有这些头盔的兼容性。SteamVR的精确跟踪系统增强了游戏在各种设备上的沉浸感和响应性。开发完成后，您可以在Steam平台上发布您的游戏，从而接触到庞大的用户群，包括使用SteamVR的*Meta
    Quest*系列头盔的用户。
- en: In the following section, you will learn how to install SteamVR.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，您将学习如何安装SteamVR。
- en: Installing SteamVR
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装SteamVR
- en: 'To target SteamVR, you must first install and setup SteamVR. To do this, perform
    the following steps:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 要针对SteamVR进行开发，你必须首先安装和设置SteamVR。为此，请执行以下步骤：
- en: Download Steam to your PC from the official website ([https://store.steampowered.com/about/](https://store.steampowered.com/about/)),
    create a Steam account, and log into this Steam account via the Steam software.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从官方网站([https://store.steampowered.com/about/](https://store.steampowered.com/about/))下载Steam到你的PC，创建一个Steam账户，并通过Steam软件登录此Steam账户。
- en: Inside Steam, search for `SteamVR` in the Steam Store, select the **Play Game**
    button, and follow through with the on-screen instructions to begin installing
    SteamVR.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Steam内，在Steam商店中搜索`SteamVR`，选择**玩游戏**按钮，并按照屏幕上的说明开始安装SteamVR。
- en: Once the installation of SteamVR is completed, connect your headset to your
    PC via a cable or a wireless connection such as *Air Link* for the *Meta Quest*
    series. Then, either search for the SteamVR plugin inside the Steam software and
    click the `SteamVR` in your regular PC apps and clicking on it. Either way, you
    should quickly see that your VR headset is connected to SteamVR on your PC. Inside
    your VR headset, you should now see the SteamVR environment and game store.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SteamVR安装完成后，通过有线连接或无线连接（如*Air Link*用于*Meta Quest*系列）将你的头戴设备连接到你的PC。然后，你可以在Steam软件内搜索SteamVR插件，并在你的常规PC应用中点击`SteamVR`，或者以任何方式，你应该很快就能看到你的VR头戴设备已连接到你的PC上的SteamVR。在你的VR头戴设备内，你现在应该能看到SteamVR环境和游戏商店。
- en: While some VR headsets, such as *Valve Index*, only necessitate the installation
    of SteamVR software for testing and deploying VR experiences, many other headset
    manufacturers demand additional software to be installed alongside SteamVR. For
    instance, *Windows Mixed Reality* devices, including the *HP Reverb* series, also
    require the *Mixed Reality Portal*. These installations are typically straightforward
    and usually don’t involve any further steps from you other than opening the downloaded
    software every time you want to connect your VR headset to the PC. As these software
    requirements can change over time, we recommend you check whether any manufacturer-specific
    software is needed for your particular VR headset model to test or deploy on it.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然一些VR头戴设备，如*Valve Index*，只需要安装SteamVR软件来测试和部署VR体验，但许多其他头戴设备制造商要求安装额外的软件与SteamVR一起使用。例如，*Windows
    Mixed Reality*设备，包括*HP Reverb*系列，也需要安装*Mixed Reality Portal*。这些安装通常很简单，通常不需要你采取任何其他步骤，除了每次你想将你的VR头戴设备连接到PC时打开下载的软件。由于这些软件要求可能会随时间变化，我们建议你检查是否需要为你的特定VR头戴设备型号安装制造商特定的软件以进行测试或部署。
- en: After installing and setting up SteamVR and potentially some other manufacturer-specific
    software, the next section reveals how you can finally test and deploy your scene
    onto your VR headset.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 安装和设置SteamVR以及可能的一些制造商特定的软件后，下一节将揭示你如何最终测试和部署你的场景到你的VR头戴设备上。
- en: Testing and deploying your VR scene with SteamVR
  id: totrans-219
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用SteamVR测试和部署你的VR场景
- en: When developing for SteamVR in Unity, you can test your VR scene directly in
    the Editor using the **Play** button. With the SteamVR plugin installed, the Unity
    Editor will recognize a connected SteamVR-compatible headset, and the scene will
    be rendered in VR. This enables you to quickly evaluate changes, troubleshoot
    issues, and refine your VR content without leaving the Unity environment.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity中为SteamVR开发时，你可以使用**播放**按钮直接在编辑器中测试你的VR场景。安装了SteamVR插件后，Unity编辑器将识别连接的SteamVR兼容头戴设备，并将场景以VR模式渲染。这使你能够在不离开Unity环境的情况下快速评估更改、解决问题和优化你的VR内容。
- en: When you’re ready to deploy your scene, you can build the project into an executable
    file that can be run outside of Unity.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 当你准备好部署你的场景时，你可以将项目构建成一个可执行文件，该文件可以在Unity之外运行。
- en: After connecting your VR headset to SteamVR, go back into your Unity project.
    Here, go to **File** | **Build Settings** in your Unity project. Make sure that
    your preferred **Target Platform** field, such as Windows, is selected and that
    the **Architecture** field is set to 64-bit. Finally, you can deploy your VR scene
    onto your headset by clicking the **Build and Run** button in **Build Settings**.
    Once built, the project can be launched in SteamVR through the Steam client, allowing
    you to experience the VR scene on your headset as end users would.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在将VR头戴设备连接到SteamVR后，返回你的Unity项目。在这里，在你的Unity项目中转到**文件** | **构建设置**。确保你的首选**目标平台**字段，例如Windows，已被选中，并且**架构**字段设置为64位。最后，你可以通过点击**构建设置**中的**构建和运行**按钮将你的VR场景部署到头戴设备上。一旦构建完成，项目可以通过Steam客户端在SteamVR中启动，让你像最终用户一样在头戴设备上体验VR场景。
- en: If you own a VR headset from the *Meta Quest* series, setting up your VR scene
    for Oculus will be just as important to you as setting it up for SteamVR. The
    next section explains how to do this.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你拥有*Meta Quest*系列的VR头戴设备，为Oculus设置你的VR场景对你来说将和为SteamVR设置一样重要。下一节将解释如何进行此操作。
- en: Setting up Oculus
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置Oculus
- en: In this section, we’ll explore the steps for setting up Oculus for your VR development
    projects. We’ll detail the installation of the Oculus app on your PC, how to test
    your VR scenes with Oculus, and how to deploy your VR scenes with Oculus.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨为你的VR开发项目设置Oculus的步骤。我们将详细介绍在PC上安装Oculus应用，如何使用Oculus测试你的VR场景，以及如何使用Oculus部署你的VR场景。
- en: Installing Oculus
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装Oculus
- en: 'To work with Oculus in Unity, you’ll first need to download and install the
    Oculus app onto your PC. Complete the following steps:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Unity中使用Oculus，你首先需要在你的PC上下载并安装Oculus应用。完成以下步骤：
- en: Navigate to [www.oculus.com/setup](http://www.oculus.com/setup) in your web
    browser.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的网络浏览器中导航到[www.oculus.com/setup](http://www.oculus.com/setup)。
- en: Below the VR headset of your choice, such as *Meta Quest Pro*, click **Download
    Software**.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你选择的VR头戴设备，如*Meta Quest Pro*下方，点击**下载软件**。
- en: Open the downloaded Oculus app and click the **Install** **Now** button.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开下载的Oculus应用并点击**立即安装**按钮。
- en: Follow the on-screen instructions to create an Oculus account and set up your
    VR headset.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照屏幕上的说明创建Oculus账户并设置你的VR头戴设备。
- en: After the installation and setup are completed, it is finally time to test and
    deploy your VR scene with Oculus. This process is described in the next section.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 安装和设置完成后，终于到了测试和部署你的VR场景到Oculus的时候。这个过程将在下一节中描述。
- en: Testing and deploying your VR scene with Oculus
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Oculus测试和部署你的VR场景
- en: 'Once the Oculus software is installed on your PC, you can test your VR scenes
    directly in the Unity Editor. The following steps show you how:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Oculus软件安装到你的PC上，你就可以直接在Unity编辑器中测试你的VR场景。以下步骤将指导你如何操作：
- en: Connect your Oculus-compatible VR headset to your PC. Ensure the Oculus app
    recognizes it.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的Oculus兼容VR头戴设备连接到你的PC。确保Oculus应用识别到它。
- en: Open your VR project in Unity.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Unity中打开你的VR项目。
- en: Click the **Play** button in the Unity Editor to start the scene. Unity will
    automatically render the scene in VR, allowing you to interact with the scene
    using your Oculus headset.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Unity编辑器中点击**播放**按钮以开始场景。Unity将自动在VR中渲染场景，允许你使用Oculus头戴设备与场景交互。
- en: 'After testing and refining your VR scene, you can build and deploy it so it
    can be experienced outside of Unity. Complete the following steps:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试和改进你的VR场景后，你可以构建和部署它，以便在Unity之外体验。完成以下步骤：
- en: With your VR project open in Unity, go to **File** | **Build Settings**.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Unity中打开你的VR项目，转到**文件** | **构建设置**。
- en: Make sure your preferred **Target Platform** field, such as Windows, is selected.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你的首选**目标平台**字段，例如Windows，已被选中。
- en: Ensure the **Architecture** is set to 64-bit.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保**架构**设置为64位。
- en: Click the **Build and Run** button. Unity will build an executable file of your
    project and run it. After the build is complete, the executable can be launched
    with the Oculus software. Now, you can fully experience your VR scene with your
    Oculus headset, just as your end users will.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**构建和运行**按钮。Unity将构建你的项目可执行文件并运行它。构建完成后，可执行文件可以通过Oculus软件启动。现在，你可以使用Oculus头戴设备完全体验你的VR场景，就像你的最终用户一样。
- en: Summary
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Throughout this chapter, you’ve navigated the exciting landscape of VR development
    in Unity. You’ve learned to create a fundamental VR scene from scratch and mastered
    the deployment process on various devices. The utilization of the XR Interaction
    Toolkit and the informative elements from its demo scene should now be within
    your repertoire, empowering you to generate basic VR scenes with increased confidence
    and proficiency.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您已经探索了Unity中VR开发的激动人心的领域。您已经学会了从头开始创建基本的VR场景，并掌握了在多种设备上的部署过程。现在，您应该已经掌握了XR交互工具包及其演示场景中的信息元素，这将使您能够更有信心和熟练地生成基本的VR场景。
- en: Furthermore, these acquired skills aren’t limited to a specific genre. Whether
    it be for industrial applications or academic research, your new proficiency in
    VR development should allow you to replicate this process effectively to fit any
    use case that you encounter.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，这些获得的技能并不仅限于特定类型。无论是工业应用还是学术研究，您在VR开发方面的新技能应该允许您有效地复制此过程，以适应您遇到的任何用例。
- en: As we venture into the next chapter, we will broaden our horizon to include
    the creation and deployment of AR scenes within Unity.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们进入下一章，我们将拓宽我们的视野，包括在Unity中创建和部署AR场景。
