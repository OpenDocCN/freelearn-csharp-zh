["```cs\n    using UnityEngine;\n    using UnityEngine.XR.ARFoundation;\n    public class ImageScanMode : MonoBehaviour\n    {\n        [SerializeField] ARTrackedImageManager imageManager;\n        private void OnEnable()\n        {\n            UIController.ShowUI(\"Scan\");\n        }\n        void Update()\n        {\n            if (imageManager.trackables.count > 0)\n            {\n                InteractionController.EnableMode(\"Main\");\n            }\n        }\n    }\n    ```", "```cs\n    using UnityEngine;\n    public class Planet : MonoBehaviour\n    {\n        public string planetName;\n        public string description;\n    }\n    ```", "```cs\n        [SerializeField] private float inclineDegrees =        23.4f;\n        [SerializeField] private float rotationPeriodHours =        24f;\n        [SerializeField] private Transform incline;\n        [SerializeField] private Transform planet;\n        public float animationHoursPerSecond = 1.0f;\n        void Start()\n        {\n            incline.Rotate(0f, 0f, inclineDegrees);\n        }\n        void Update()\n        {\n            float speed =           rotationPeriodHours * animationHoursPerSecond;\n            planet.Rotate(0f, speed * Time.deltaTime, 0f);\n        }\n    ```", "```cs\n    using UnityEngine;\n    using RotaryHeart.Lib.SerializableDictionary;\n    using UnityEngine.XR.ARFoundation;\n    using TMPro;\n    using UnityEngine.UI;\n    ```", "```cs\n    [System.Serializable]\n    public class PlanetPrefabDictionary : SerializableDictionaryBase<string, GameObject> { }\n    public class PlanetsMainMode : MonoBehaviour\n    {\n        [SerializeField] PlanetPrefabDictionary         planetPrefabs;\n    ```", "```cs\n        private void OnEnable()\n        {\n            UIController.ShowUI(\"Main\");\n        }\n    ```", "```cs\n        [SerializeField] ARTrackedImageManager imageManager;\n    ```", "```cs\n        void OnEnable()\n        {\n            UIController.ShowUI(\"Main\");\n    InstantiatePlanet for each one. \n    ```", "```cs\n        void InstantiatePlanet(ARTrackedImage image)\n        {\n            string name =            image.referenceImage.name.Split('-')[0];\n            if (image.transform.childCount == 0)\n            {\n                GameObject planet =                Instantiate(planetPrefabs[name]);\n                planet.transform.SetParent(image.transform,                false);\n            }\n            else\n            {\n                Debug.Log($\"{name} already instantiated\");\n            }\n        }\n    ```", "```cs\n        void OnTrackedImageChanged         (ARTrackedImagesChangedEventArgs eventArgs)\n        {\n            foreach (ARTrackedImage newImage in                  eventArgs.added)\n            {\n                InstantiatePlanet(newImage);\n            }\n        }\n    ```", "```cs\n            imageManager.trackedImagesChanged +=            OnTrackedImageChanged;\n    ```", "```cs\n        void OnDisable()\n        {\n            imageManager.trackedImagesChanged -=            OnTrackedImageChanged;\n        }\n    ```", "```cs\n        void Update()\n        {\n            if (imageManager.trackables.count == 0)\n            {\n                InteractionController.EnableMode(\"Scan\");\n            }\n        }\n    ```", "```cs\n    using TMPro;\n    using UnityEngine.UI;\n    ```", "```cs\n        Camera;\n        int layerMask;\n        void Start()\n        {\n            camera = Camera.main;\n            layerMask =             1 << LayerMask.NameToLayer(\"PlacedObjects\");\n        }\n    ```", "```cs\n        [SerializeField] TMP_Text planetName;\n        [SerializeField] Toggle infoButton;\n    ```", "```cs\n            planetName.text = \"\";\n            infoButton.interactable = false;\n    ```", "```cs\n        void Update()\n        {\n            if (imageManager.trackables.count == 0)\n            {\n                InteractionController.EnableMode(\"Scan\");\n            }\n            else\n            {\n                Ray = new Ray(camera.transform.position,                  camera.transform.forward);\n                RaycastHit hit;\n                if (Physics.Raycast(ray, out hit,                 Mathf.Infinity, layerMask))\n                {\n                    Planet = hit.collider.                    GetComponentInParent<Planet>();\n                    planetName.text = planet.planetName;\n                    infoButton.interactable = true;\n                }\n                else\n                {\n                    planetName.text = \"\";\n    infoButton.interactable = false; \n                }\n            }\n        }\n    ```", "```cs\n        [SerializeField] GameObject detailsPanel;\n        [SerializeField] TMP_Text detailsText;\n    ```", "```cs\n           detailsPanel.SetActive(false);\n    ```", "```cs\n                if (Physics.Raycast(ray, out hit,                 Mathf.Infinity, layerMask))\n                {\n                    Planet = hit.collider.                    GetComponentInParent<Planet>();\n                    planetName.text = planet.planetName;\n                    detailsText.text = planet.description;\n                    infoButton.interactable = true;\n                }\n                else\n                {\n                    planetName.text = \"\";\n                    detailsText.text = \"\";\n                    infoButton.interactable = false;\n                }          \n    ```"]