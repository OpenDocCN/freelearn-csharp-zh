["```cs\nhttps://api.uqsblog/posts/1\n```", "```cs\npublic record Author(int Id, string Name);\npublic record Post(int Id, string Content, Author Author, \n    DateTime CreatedDate, int NumberOfComments\n    , int NumberOfViews, …);\n```", "```cs\n{\n  \"id\": 1,\n  \"content\": \"Some content\",\n  \"author\": {\n    \"id\": 100,\n    \"name\": \"John Smith\"\n  },\n  \"createdDate\": \"2022-01-01T01:01:01\",\n  \"numberOfComments\": 5,\n  \"numberOfViews\": 486,\n  …\n}\n```", "```cs\npublic class Person \n{\n    public string Email { get; private set; }\n    public void ChangeEmail(string email) \n    {\n        …\n    }\n    // other properties and methods\n}\n```", "```cs\npublic class Person \n{\n    public string Email { get; set; }\n    // other properties\n}\n```", "```cs\npublic class PersonService\n{\n    public void ChangeEmail(int personId, string email)\n    {\n      Person person = …; // get the object some how\n      // validate email format\n      // check that no other person is using the email\n      person.Email = email;\n    }\n}\n```", "```cs\npublic class AddPostService\n{\n    private readonly IPostRepository _postRepository;\n    private readonly IAuthorRepository _authorRepository;\n    public AddPostService(IPostRepository postRepository,\n         IAuthorRepository authorRepository)\n    {\n        _postRepository = postRepository;\n        _authorRepository = authorRepository;\n    }\n\n    public int AddPost(int authorId)\n    {\n        var author = _authorRepository.GetById(authorId);\n        if (author is null)\n        {\n            throw new ArgumentException(\n              \"Author Id not found\",nameof(authorId));\n        }\n        if (author.IsLocked)\n        {\n            throw new InvalidOperationException( \n              \"Author is locked\");\n        }\n        var newPostId = _postRepository.CreatePost\n          (authorId);\n        return newPostId;\n    }\n}\n```", "```cs\npublic class UpdateTitleService\n{\n    private readonly IPostRepository _postRepository;\n    private const int TITLE_MAX_LENGTH = 90;\n    public UpdateTitleService(IPostRepository postRepo)\n    {\n        _postRepository = postRepo;\n    }\n    public void UpdateTitle(int postId, string title)\n    {\n        if (title is null) title = string.Empty;\n        title = title.Trim();\n        if (title.Length > TITLE_MAX_LENGTH)\n        {\n            throw new\n               ArgumentOutOfRangeException(nameof(title), \n               $\"Title max is {TITLE_MAX_LENGTH} letters\");\n        }\n        var post = _postRepository.GetById(postId);\n        if (post is null)\n        {\n            throw new ArgumentException(\n                $\"Unable to find a post of Id {postId}\", \n                nameof(post));\n        }\n        post.Title = title;\n        _postRepository.Update(post);\n    }\n}\n```", "```cs\npublic class Post\n{\n    public int Id { get; private set; }\n    public string? Title { get; private set; }\n    // more properties…\n    private readonly IPostRepository _postRepository;\n    private const int TITLE_MAX_LENGTH = 90;\n    public Post(IPostRepository postRepository)\n    {\n        _postRepository = postRepository;\n    }\n    public void UpdateTitle(string title)\n    {\n        …\n    }\n}\n```", "```cs\nvar post = _postRepository.GetById(postId);\n```", "```cs\nusing Dapper;\nusing System.Data.SqlClient;\n…\npublic interface IPostRepository\n{\n    int CreatePost(int authorId);\n    Post? GetById(int postId);\n    void Update(Post post);\n}\npublic class PostRepository : IPostRepository\n{\n    public Post? GetById(int postId)\n    {\n        var connectionString = … // Get con string from config\n        using var connection = new SqlConnection\n          (connectionString);\n        connection.Open();\n        var post = connection.Query<Post>(\n            \"SELECT * FROM Post WHERE Id = @Id\", new {Id = \n                 postId}).SingleOrDefault();           \n        connection.Close();\n        return post;\n    }\n    … \n}\n```", "```cs\npublic class PostRepository : IPostRepository\n{\n    private readonly IDbConnection _dbConnection;\n    public PostRepository(IDbConnection dbConnection)\n    {\n        _dbConnection = dbConnection;\n    }\n    public Post? GetById(int postId)\n    {\n        _dbConnection.Open();\n        var post = _dbConnection.Query<Post>(\n            \"SELECT * FROM Post WHERE Id = @Id\", new {Id = \n                 postId}).SingleOrDefault();\n        _dbConnection.Close();\n        return post;\n    }\n    …\n}\n```"]