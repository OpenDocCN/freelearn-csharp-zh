["```cs\nusing Shared;\nusing System.Text.Json.Serialization;\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddCustomerRepository();\nbuilder.Services\n    .AddControllers()\n    .AddJsonOptions(options => options\n        .JsonSerializerOptions\n        .Converters\n        .Add(new JsonStringEnumConverter())\n    )\n;\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\nvar app = builder.Build();\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseDarkSwaggerUI();\n}\napp.MapControllers();\napp.InitializeSharedDataStore();\napp.Run();\n```", "```cs\n[Route(\"api/[controller]\")]\n[ApiController]\npublic class SomeController : ControllerBase\n{\n    [HttpGet]\n    public IActionResult Get() => Ok();\n}\n```", "```cs\nusing Microsoft.AspNetCore.Mvc;\nnamespace MVC.API.Controllers;\n[Route(\"api/[controller]\")]\n[ApiController]\npublic class ValuesController : ControllerBase\n{\n    [HttpGet(\"IActionResult\")]\n    public IActionResult InterfaceAction()\n        => Ok(new Model(nameof(InterfaceAction)));\n    [HttpGet(\"ActionResult\")]\n    public ActionResult ClassAction()\n        => Ok(new Model(nameof(ClassAction)));\n    // ...\n    public record class Model(string Name);\n}\n```", "```cs\n[ProducesResponseType(typeof(Model), StatusCodes.Status200OK)]\npublic IActionResult InterfaceAction() { ... }\n```", "```cs\n[HttpGet(\"DirectModel\")]\npublic Model DirectModel()\n    => new Model(nameof(DirectModel)); \n```", "```cs\n[HttpGet(\"ActionResultT\")]\npublic ActionResult<Model> ActionResultT()\n    => new Model(nameof(ActionResultT));\n```", "```cs\n[HttpGet(\"MultipleResults\")]\npublic ActionResult<Model> MultipleResults()\n{\n    var condition = Random.Shared\n        .GetItems(new[] { true, false }, 1)\n        .First();\n    return condition\n        ? Ok(new Model(nameof(MultipleResults)))\n        : NotFound();\n}\n```", "```cs\nnamespace MVC.API.Controllers.Empty;\n[Route(\"empty/[controller]\")]\n[ApiController]\npublic class CustomersController : ControllerBase\n{\n    [HttpGet]\n    public Task<IEnumerable<Customer>> GetAllAsync(\n        ICustomerRepository customerRepository)\n        => throw new NotImplementedException();\n    [HttpGet(\"{id}\")]\n    public Task<ActionResult<Customer>> GetOneAsync(\n        int id, ICustomerRepository customerRepository)\n        => throw new NotImplementedException();\n    [HttpPost]\n    public Task<ActionResult> PostAsync(\n        [FromBody] Customer value, ICustomerRepository customerRepository)\n        => throw new NotImplementedException();\n    [HttpPut(\"{id}\")]\n    public Task<ActionResult<Customer>> PutAsync(\n        int id, [FromBody] Customer value, \n        ICustomerRepository customerRepository)\n        => throw new NotImplementedException();\n    [HttpDelete(\"{id}\")]\n    public Task<ActionResult<Customer>> DeleteAsync(\n        int id, ICustomerRepository customerRepository)\n        => throw new NotImplementedException();\n}\n```", "```cs\nnamespace Shared.Models;\npublic record class Customer(\n    int Id,\n    string Name,\n    List<Contract> Contracts\n);\npublic record class Contract(\n    int Id,\n    string Name,\n    string Description,\n    WorkStatus Status,\n    ContactInformation PrimaryContact\n);\npublic record class WorkStatus(int TotalWork, int WorkDone)\n{\n    public WorkState State =>\n        WorkDone == 0 ? WorkState.New :\n        WorkDone == TotalWork ? WorkState.Completed :\n        WorkState.InProgress;\n}\npublic record class ContactInformation(\n    string FirstName,\n    string LastName,\n    string Email\n);\npublic enum WorkState\n{\n    New,\n    InProgress,\n    Completed\n}\n```", "```cs\nusing Shared.Models;\nnamespace Shared.Data;\npublic interface ICustomerRepository\n{\n    Task<IEnumerable<Customer>> AllAsync(\n        CancellationToken cancellationToken);\n    Task<Customer> CreateAsync(\n        Customer customer, \n        CancellationToken cancellationToken);\n    Task<Customer?> DeleteAsync(\n        int customerId, \n        CancellationToken cancellationToken);\n    Task<Customer?> FindAsync(\n        int customerId, \n        CancellationToken cancellationToken);\n    Task<Customer?> UpdateAsync(\n        Customer customer, \n        CancellationToken cancellationToken);\n}\n```", "```cs\n// PUT raw/customers/1\n[HttpPut(\"{id}\")]\npublic async Task<ActionResult<Customer>> PutAsync(\n    int id,\n    [FromBody] Customer value,\n    ICustomerRepository customerRepository)\n{\n    var customer = await customerRepository.UpdateAsync(\n        value, \n        HttpContext.RequestAborted);\n    if (customer == null)\n    {\n        return NotFound();\n    }\n    return customer;\n}\n```", "```cs\nPUT {{MVC.API.BaseAddress}}/customers/1\nContent-Type: application/json\n{\n  \"id\": 1,\n  \"name\": \"Some new name\",\n  \"contracts\": []\n}\n```", "```cs\n{\n  \"id\": 1,\n  \"name\": \"Some new name\",\n  \"contracts\": []\n}\n```", "```cs\n{\n  \"id\": 1,\n  \"name\": \"Jonny Boy Inc.\",\n  \"contracts\": [\n    {\n      \"id\": 1,\n      \"name\": \"First contract\",\n      \"description\": \"This is the first contract.\",\n      \"status\": {\n        \"totalWork\": 100,\n        \"workDone\": 100,\n        \"state\": \"Completed\"\n      },\n      \"primaryContact\": {\n        \"firstName\": \"John\",\n        \"lastName\": \"Doe\",\n        \"email\": \"john.doe@jonnyboy.com\"\n      }\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Some other contract\",\n      \"description\": \"This is another contract.\",\n      \"status\": {\n        \"totalWork\": 100,\n        \"workDone\": 25,\n        \"state\": \"InProgress\"\n      },\n      \"primaryContact\": {\n        \"firstName\": \"Jane\",\n        \"lastName\": \"Doe\",\n        \"email\": \"jane.doe@jonnyboy.com\"\n      }\n    }\n  ]\n}\n```", "```cs\nnamespace Shared.DTO;\npublic record class ContractDetails(\n    int Id,\n    string Name,\n    string Description,\n    int StatusTotalWork,\n    int StatusWorkDone,\n    string StatusWorkState,\n    string PrimaryContactFirstName,\n    string PrimaryContactLastName,\n    string PrimaryContactEmail\n);\npublic record class CustomerDetails(\n    int Id,\n    string Name,\n    IEnumerable<ContractDetails> Contracts\n);\npublic record class CustomerSummary(\n    int Id,\n    string Name,\n    int TotalNumberOfContracts,\n    int NumberOfOpenContracts\n);\npublic record class CreateCustomer(string Name);\npublic record class UpdateCustomer(string Name);\n```", "```cs\n// PUT dto/customers/1\n[HttpPut(\"{customerId}\")]\npublic async Task<ActionResult<CustomerDetails>> PutAsync(\n        int customerId,\n        [FromBody] UpdateCustomer input,\n        ICustomerRepository customerRepository)\n{\n    // Get the customer\n    var customer = await customerRepository.FindAsync(\n        customerId,\n        HttpContext.RequestAborted\n    );\n    if (customer == null)\n    {\n        return NotFound();\n    }\n    // Update the customer's name using the UpdateCustomer DTO\n    var updatedCustomer = await customerRepository.UpdateAsync(\n        customer with { Name = input.Name },\n        HttpContext.RequestAborted\n    );\n    if (updatedCustomer == null)\n    {\n        return Conflict();\n    }\n    // Map the updated customer to a CustomerDetails DTO\n    var dto = MapCustomerToCustomerDetails(updatedCustomer);\n    // Return the DTO\n    return dto;\n}\n```", "```cs\n{\n  \"id\": 1,\n  \"name\": \"Some new name\",\n  \"contracts\": [\n    {\n      \"id\": 1,\n      \"name\": \"First contract\",\n      \"description\": \"This is the first contract.\",\n      \"statusTotalWork\": 100,\n      \"statusWorkDone\": 100,\n      \"statusWorkState\": \"Completed\",\n      \"primaryContactFirstName\": \"John\",\n      \"primaryContactLastName\": \"Doe\",\n      \"primaryContactEmail\": \"john.doe@jonnyboy.com\"\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Some other contract\",\n      \"description\": \"This is another contract.\",\n      \"statusTotalWork\": 100,\n      \"statusWorkDone\": 25,\n      \"statusWorkState\": \"InProgress\",\n      \"primaryContactFirstName\": \"Jane\",\n      \"primaryContactLastName\": \"Doe\",\n      \"primaryContactEmail\": \"jane.doe@jonnyboy.com\"\n    }\n  ]\n}\n```", "```cs\n// GET: dto/customers\n[HttpGet]\npublic async Task<IEnumerable<CustomerSummary>> GetAllAsync(\n    ICustomerRepository customerRepository)\n{\n    // Get all customers\n    var customers = await customerRepository.AllAsync(\n        HttpContext.RequestAborted\n    );\n    // Map customers to CustomerSummary DTOs\n    var customersSummary = customers\n        .Select(customer => new CustomerSummary(\n            Id: customer.Id,\n            Name: customer.Name,\n            TotalNumberOfContracts: customer.Contracts.Count,\n            NumberOfOpenContracts: customer.Contracts.Count(x => x.Status.State != WorkState.Completed)\n        ))\n    ;\n    // Return the DTOs\n    return customersSummary;\n}\n```", "```cs\n[\n  {\n    \"id\": 1,\n    \"name\": \"Some new name\",\n    \"totalNumberOfContracts\": 2,\n    \"numberOfOpenContracts\": 1\n  },\n  {\n    \"id\": 2,\n    \"name\": \"Some mega-corporation\",\n    \"totalNumberOfContracts\": 1,\n    \"numberOfOpenContracts\": 1\n  }\n]\n```"]