["```cs\nclass BasicAnimationApp : public AppBasic {\npublic:\n  void setup();\n  void update();\n  void draw();\n void prepareSettings( Settings *settings );\n};\n```", "```cs\nvoid BasicAnimationApp::prepareSettings( Settings *settings ){}\n```", "```cs\nsettings->setWindowSize( 800, 600 );\n```", "```cs\nsettings->setFrameRate( 60 );\n```", "```cs\nvoid BasicAnimationApp::prepareSettings( Settings *settings ){\n  settings->setWindowSize( 800, 600 );\n  settings->setFrameRate( 60 );\n}\n```", "```cs\ngl::drawSolidCircle( getWindowCenter(), 30 );\n```", "```cs\n  void prepareSettings( Settings *settings );\n Vec2f currentPosition;\n};\n```", "```cs\nvoid BasicAnimationApp::setup() {\n currentPosition = getWindowCenter();\n}\n```", "```cs\nvoid BasicAnimationApp::draw() {\n  gl::clear( Color( 0, 0, 0 ) );\n  gl::drawSolidCircle( currentPosition, 30 );\n}\n```", "```cs\ncurrentPosition.x++;\n```", "```cs\n  void prepareSettings( Settings *settings );\n  Vec2f currentPosition;\n float circleRadius;\n};\n```", "```cs\nvoid BasicAnimationApp::setup() {\n  currentPosition = getWindowCenter();\n  circleRadius = 100;\n}\n```", "```cs\n  currentPosition.x++;\n  circleRadius--;\n  gl::drawSolidCircle( currentPosition, circleRadius );\n}\n```", "```cs\nvoid BasicAnimationApp::setup() {\n  currentPosition = Vec2f(0,0);\n  circleRadius = 100;\n}\n```", "```cs\n  Vec2f currentPosition;\n Vec2f targetPosition;\n  float circleRadius;\n};\n```", "```cs\nvoid BasicAnimationApp::setup() {\n  currentPosition = Vec2f(0,0);\n targetPosition = Vec2f(800,600);\n  circleRadius = 100;\n}\n```", "```cs\nvoid BasicAnimationApp::update() {\n  Vec2f difference = targetPosition - currentPosition;\n  difference *= 0.95f;\n  currentPosition = targetPosition - difference;\n}\n```", "```cs\n#include \"cinder/Rand.h\"\n```", "```cs\nvoid BasicAnimationApp::setup() {\n  currentPosition = Vec2f(0,0);\n targetPosition.x = Rand::randFloat(0, getWindowWidth());\n targetPosition.y = Rand::randFloat(0, getWindowHeight());\n  circleRadius = 100;\n}\n```", "```cs\nvoid BasicAnimationApp::setup() {\n currentPosition.x = Rand::randFloat(0, getWindowWidth());\n currentPosition.y = Rand::randFloat(0, getWindowHeight());\n  targetPosition.x = Rand::randFloat(0, getWindowWidth());\n  targetPosition.y = Rand::randFloat(0, getWindowHeight());\n  circleRadius = 100;\n}\n```", "```cs\nif ( currentPosition.distance(targetPosition) < 1.0f ) {\n  targetPosition.x = Rand::randFloat(0, getWindowWidth());\n  targetPosition.y = Rand::randFloat(0, getWindowHeight());\n}\n```", "```cs\ngl::clear( Color( 0, 0, 0 ) );\n//currentPosition.x++;\n//circleRadius--;\ngl::drawSolidCircle( currentPosition, circleRadius );\n```", "```cs\n#define CIRCLE_COUNT 100\n```", "```cs\nVec2f currentPosition[CIRCLE_COUNT];\nVec2f targetPosition[CIRCLE_COUNT];\nfloat circleRadius[CIRCLE_COUNT];\n```", "```cs\nvoid BasicAnimationApp::setup() {\n  for(int i=0; i<CIRCLE_COUNT; i++) {\n    currentPosition[i].x=Rand::randFloat(0,getWindowWidth());\n    currentPosition[i].y=Rand::randFloat(0,getWindowHeight());\n    targetPosition[i].x=Rand::randFloat(0,getWindowWidth());\n    targetPosition[i].y=Rand::randFloat(0,getWindowHeight());\n    circleRadius[i] = Rand::randFloat(1, 10);\n  }\n}\n```", "```cs\nvoid BasicAnimationApp::update() {\n  Vec2f difference;\n  for (int i=0; i<CIRCLE_COUNT; i++) {\n    difference = targetPosition[i] - currentPosition[i];\n    difference *= 0.95f;\n    currentPosition[i] = targetPosition[i] - difference;\n\n    if (currentPosition[i].distance(targetPosition[i]) < 1.0f) {\n      targetPosition[i].x =\n      Rand::randFloat(0,getWindowWidth());\n      targetPosition[i].y =\n      Rand::randFloat(0,getWindowHeight());\n    }\n  }\n}\n```", "```cs\nvoid BasicAnimationApp::draw() {\n  gl::clear( Color( 0, 0, 0 ) );\n  for (int i=0; i<CIRCLE_COUNT; i++) {\n    gl::drawSolidCircle( currentPosition[i], circleRadius[i] );\n  }\n}\n```", "```cs\n#define CIRCLE_COUNT 1000\n```", "```cs\n#include \"cinder/Easing.h\"\n```", "```cs\nVec2f startPosition[CIRCLE_COUNT];\nVec2f currentPosition[CIRCLE_COUNT];\nVec2f targetPosition[CIRCLE_COUNT];\nfloat circleRadius[CIRCLE_COUNT];\nfloat circleTimeBase[CIRCLE_COUNT];\n\n```", "```cs\nstartPosition[i].x = Rand::randFloat(0, getWindowWidth());\nstartPosition[i].y = Rand::randFloat(0, getWindowHeight());\ncircleTimeBase[i] = 0;\n```", "```cs\nvoid BasicAnimationApp::update() {\n  Vec2f difference;\n  for (int i=0; i<CIRCLE_COUNT; i++) {\n difference = targetPosition[i] - startPosition[i];\n currentPosition[i] = easeOutExpo(\n getElapsedSeconds()-circleTimeBase[i]) *\n difference + startPosition[i];\n\n    if ( currentPosition[i].distance(targetPosition[i])\n    < 1.0f )\n    {\n      targetPosition[i].x =\n      Rand::randFloat(0, getWindowWidth());\n      targetPosition[i].y =\n      Rand::randFloat(0, getWindowHeight());\n startPosition[i] = currentPosition[i];\n circleTimeBase[i] = getElapsedSeconds();\n    }\n  }\n}\n```", "```cs\n#define TWEEN_SPEED 0.2\n```", "```cs\ncurrentPosition[i] = easeOutExpo(\n (getElapsedSeconds()-circleTimeBase[i])*TWEEN_SPEED) *\n  difference + startPosition[i];\n```", "```cs\n#include \"cinder/app/AppBasic.h\"\n#include \"cinder/gl/gl.h\"\n#include \"cinder/Rand.h\"\n#include \"cinder/Easing.h\"\n\n#define CIRCLE_COUNT 100\n#define TWEEN_SPEED 0.2\n\nusing namespace ci;\nusing namespace ci::app;\nusing namespace std;\n\nclass BasicAnimationApp : public AppBasic {\n  public:\n  void setup();\n  void update();\n  void draw();\n\n  void prepareSettings( Settings *settings );\n  Vec2f startPosition[CIRCLE_COUNT];\n  Vec2f currentPosition[CIRCLE_COUNT];\n  Vec2f targetPosition[CIRCLE_COUNT];\n  float circleRadius[CIRCLE_COUNT];\n  float circleTimeBase[CIRCLE_COUNT];\n};\n\nvoid BasicAnimationApp::prepareSettings( Settings *settings ) {\n  settings->setWindowSize(800,600);\n  settings->setFrameRate(60);\n}\n\nvoid BasicAnimationApp::setup() {\n  for(int i=0; i<CIRCLE_COUNT; i++) {\n    currentPosition[i].x=Rand::randFloat(0, getWindowWidth());\n    currentPosition[i].y=Rand::randFloat(0, getWindowHeight());\n    targetPosition[i].x=Rand::randFloat(0, getWindowWidth());\n    targetPosition[i].y=Rand::randFloat(0, getWindowHeight());\n    circleRadius[i] = Rand::randFloat(1, 10);\n    startPosition[i].x = Rand::randFloat(0, getWindowWidth());\n    startPosition[i].y = Rand::randFloat(0, getWindowHeight());\n    circleTimeBase[i] = 0;\n  }\n}\n\nvoid BasicAnimationApp::update() {\n  Vec2f difference;\n  for (int i=0; i<CIRCLE_COUNT; i++) {\n    difference = targetPosition[i] - startPosition[i];\n    currentPosition[i] = easeOutExpo(\n      (getElapsedSeconds()-circleTimeBase[i]) *\n      TWEEN_SPEED) *\n      difference + startPosition[i];\n\n      if ( currentPosition[i].distance(\n      targetPosition[i]) < 1.0f )\n    {\n      targetPosition[i].x =\n      Rand::randFloat(0, getWindowWidth());\n      targetPosition[i].y =\n      Rand::randFloat(0, getWindowHeight());\n      startPosition[i] = currentPosition[i];\n      circleTimeBase[i] = getElapsedSeconds();\n    }\n  }\n}\n\nvoid BasicAnimationApp::draw() {\n  gl::clear( Color( 0, 0, 0 ) );\n  for (int i=0; i<CIRCLE_COUNT; i++) {\n    gl::drawSolidCircle( currentPosition[i], circleRadius[i] );\n  }\n}\n\nCINDER_APP_BASIC( BasicAnimationApp, RendererGl )\n```"]