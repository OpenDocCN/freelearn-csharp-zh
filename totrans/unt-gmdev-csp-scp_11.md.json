["```cs\nusing Unity.Netcode;\nusing UnityEngine;\npublic class NetworkManagerExample : MonoBehaviour\n{\n    void Start()\n    {\n        // Start as server or client\n        if (IsServer)\n        {\n            NetworkManager.Singleton.StartServer();\n        }\n        else\n        {\n           NetworkManager.Singleton.StartClient();\n        }\n    }\n```", "```cs\n    // Send a message to the server\n    public void SendMessageToServer()\n    {\n        if (NetworkManager.Singleton.IsClient)\n        {\n           var buffer = Encoding.UTF8.GetBytes(\"Hello\n             Server!\");\n           using (var writer = new\n           FastBufferWriter(buffer.Length, Allocator.Temp))\n            {\n                writer.WriteBytes(buffer);\n              NetworkManager.Singleton.\n              CustomMessagingManager.\n              SendNamedMessage(\"ReceiveMessage\",\n              NetworkManager.Singleton.\n              ServerClientId, writer);\n            }\n        }\n    }\n```", "```cs\n    // Receive a message from a client\n    public void OnEnable()\n    {\n       NetworkManager.Singleton.\n       CustomMessagingManager.\n       RegisterNamedMessageHandler(\"ReceiveMessage\",\n       (senderClientId, reader) =>\n        {\n            var buffer = new byte[reader.Length];\n            reader.ReadBytes(buffer, reader.Length);\n            string message = Encoding.\n            UTF8.GetString(buffer);\n            Debug.Log(\"Received message: \" + message);\n        });\n    }\n}\n```", "```cs\n// Command function called by the client but executed on the server\n[Command]\nvoid CmdFire() {\n    // Instantiate projectile\n    GameObject projectile = Instantiate(projectilePrefab, position, rotation);\n    NetworkServer.Spawn(projectile);\n    // Trigger some behavior on all clients\n    RpcShowFireEffects();\n}\n// RPC function to update clients\n[ClientRpc]\nvoid RpcShowFireEffects() {\n    // Show effects here\n    Instantiate(fireEffect, transform.position, Quaternion.identity);\n}\n```", "```cs\n    // Using Mirror for room creation\n    public void CreateRoom(string roomName) {\n        NetworkManager.singleton.StartHost(); // Start a host instance\n        NetworkRoomManager.roomName = roomName; // Set the room name\n    }\n    ```", "```cs\n    // Pseudocode for listing and joining rooms using Photon\n    void ListRooms() {\n        var rooms = PhotonNetwork.GetRoomList(); // Get list of rooms\n        foreach(var room in rooms) {\n            UI.AddRoomToList(room.name, room.playerCount); // Update UI with room details\n        }\n    }\n    public void JoinRoom(string roomName) {\n        PhotonNetwork.JoinRoom(roomName); // Join a specific room\n    }\n    ```", "```cs\n    // Using Mirror to handle player readiness\n    [Command]\n    public void CmdSetReady(bool isReady) {\n        this.isReady = isReady; // Set player readiness\n        RpcUpdateReadyStatus(this.isReady); // Notify all clients\n    }\n    [ClientRpc]\n    void RpcUpdateReadyStatus(bool isReady) {\n        UI.UpdatePlayerReadiness(playerId, isReady); // Update UI on all clients\n    }\n    ```", "```cs\n    using Unity.Netcode;\n    public class PlayerHealth : NetworkBehaviour {\n        public NetworkVariable<int> health = \n            new NetworkVariable<int>(100, \n                NetworkVariableReadPermission.Everyone, \n                NetworkVariableWritePermission.Server);\n        [ServerRpc]\n        public void TakeDamage(int damage) {\n            health.Value -= damage;\n        }\n    }\n    NetworkVariable that automatically synchronizes its value across the network. When damage is taken, only the server adjusts the health value, which then propagates to all clients.\n    ```", "```cs\n    using Unity.Netcode;\n    public class GameActions : NetworkBehaviour {\n        [ServerRpc]\n        public void FireProjectileServerRpc()\n        {\n            PerformFire();\n            FireProjectileClientRpc();\n        }\n        [ClientRpc]\n        private void FireProjectileClientRpc() {\n            // This method will be called on all clients\n            if (!IsServer) // Avoid double execution on the server\n            {\n                PerformFire();\n            }\n        }\n        void PerformFire(){\n            // Code to instantiate and fire a projectile\n        }\n    ```", "```cs\n    using Unity.Netcode;\n    using UnityEngine;\n\n       public class PlayerScore : NetworkBehaviour {\n           public NetworkVariable<int> score = \n               new NetworkVariable<int>(0, \n                   NetworkVariableReadPermission.Everyone, \n                   NetworkVariableWritePermission.Server);\n           [ServerRpc] \n           public void AddScore(int points) {\n               score.Value += points;\n           }\n       }\n    ```", "```cs\n// Example of choosing a server based on lowest ping\nvoid SelectBestServer(List<Server> servers) {\n    Server bestServer = null;\n    float lowestPing = float.MaxValue;\n    foreach (Server server in servers) {\n        float ping = PingServer(server);\n        if (ping < lowestPing) {\n            bestServer = server;\n            lowestPing = ping;\n        }\n    }\n    ConnectToServer(bestServer);\n}\n```", "```cs\n// Example of client-side prediction for player movement\nvoid UpdatePlayerPosition(PlayerInput input) {\n    if (isLocalPlayer) {\n        // Predict local player's position\n        PredictPosition(input);\n    } else {\n        // Interpolate position for remote players\n        InterpolatePosition();\n    }\n}\nvoid PredictPosition(PlayerInput input) {\n    // Apply input to predict the next position\n    transform.position += input.direction * speed * Time.deltaTime;\n}\nvoid InterpolatePosition() {\n    // Smoothly interpolate to the server-reported position\n    transform.position = Vector3.Lerp(transform.position, \n      serverReportedPosition, Time.deltaTime * smoothingFactor);\n}\n```"]