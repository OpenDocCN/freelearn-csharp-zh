- en: Content, Objects, and Scale
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You may remember building a diorama project for school from a shoebox as a
    child. We''re going to make one today, using Unity. Let''s assemble our first
    scene, which is composed of simple geometric objects. Along the way, we''ll talk
    a lot about **world scale**. Then we''ll explore various 3D content creation tools
    that developers and artists use for assets imported into Unity. In this chapter,
    we will discuss the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: A short introduction to the Unity 3D game engine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a simple diorama in Unity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making some measuring tools, including a unit cube and a grid projector
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using **Blender** to create a cube with texture maps and importing it into Unity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Google Tilt Brush to create a 3D sketch and importing it into Unity via
    Google Poly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the experimental Unity EditorXR tools for editing scenes directly in VR
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started with Unity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you don't have the Unity 3D game engine application installed on your PC
    yet, do that now! The full-featured **Personal Edition** is free and runs on both
    Windows and Mac. To get Unity, go to [https://store.unity.com/](https://store.unity.com/),
    select the version that you want, click on Download Installer, and continue following
    the instructions. This book assumes you have version 2017.2 or later of Unity.
  prefs: []
  type: TYPE_NORMAL
- en: For you beginners out there, we're going to take this first section nice and
    slow, with more hand-holding than what you'll get later on in the book. Furthermore,
    even if you already know Unity and have developed your own games, it may be worthwhile
    to revisit the fundamental concepts, since the rules are sometimes different when
    designing for virtual reality.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new Unity project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's create a new Unity project named `VR_is_Awesome`, or whatever you'd like.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a new Unity project, launch Unity from your operating system and
    the Open dialog box will appear. From this dialog box, select New, which opens
    a New Project dialog box, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6b51fb65-2ad0-48c2-bf9a-a8557570f44c.png)'
  prefs: []
  type: TYPE_IMG
- en: Fill in the name of your project and verify that the folder location is what
    you want. Ensure that 3D is selected (on the right). There is no need to add any
    extra asset packages at this time, as we'll bring them in later if we need them.
    Click on Create project.
  prefs: []
  type: TYPE_NORMAL
- en: Unity 2018 introduced the Unity Hub tool for managing multiple Unity versions
    and projects. If you are using Unity Hub, you can choose the "3D" template, or
    one of the newer VR render pipeline templates for your project.
  prefs: []
  type: TYPE_NORMAL
- en: The Unity editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Your new project opens in the Unity editor, as shown in the following screenshot
    (where I arranged the window panels in a custom layout to facilitate this discussion
    and labeled the visible panels):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7704e575-441b-4497-905f-b8a7677fa918.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Unity editor consists of a number of non-overlapping windows, or *panels*,
    which may be subdivided into *panes*. Here''s a brief explanation of each panel
    that is shown in the preceding layout image (your layout may be different):'
  prefs: []
  type: TYPE_NORMAL
- en: The Scene panel on the upper left-hand side (highlighted) is where you can visually
    compose the 3D space of the current scene, including the placement of objects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Below the Scene panel is the Game view (lower left-hand side), which shows the
    actual game camera view (presently, it is empty with an ambient sky). When in
    **Play Mode**, your game runs in this panel.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the center, we have arranged the Hierarchy, Project, and Console panels (from
    the top to the bottom, respectively).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Hierarchy panel provides a tree view of all the *objects* in the current
    scene.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Project panel contains all the *reusable assets* for the project, including
    the ones imported as well as those that you'll create along the way.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Console panel shows messages from Unity, including *warnings and errors*
    from code scripts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On the right-hand side is the Inspector panel (highlighted), which contains
    the properties of the currently selected object. (Objects are selected by clicking
    on them in the Scene, Hierarchy, or the Project panel). The Inspector panel has
    separate panes for each component of the object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the top is the main menu bar (on a Mac, this will be at the top of your screen,
    not at the top of the Unity window). There's a toolbar area with various controls
    that we'll use later on, including the **Play** (triangle icon) button that starts
    Play mode.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From the main menu bar's Window menu, you can open additional panels as needed.
    The editor's user interface is configurable. Each panel can be rearranged, resized,
    and tabbed by grabbing one of the panel tabs and dragging it. Go ahead, try it!
    On the upper right-hand side is a Layout selector that lets you either choose
    between various default layouts or save your own preferences.
  prefs: []
  type: TYPE_NORMAL
- en: The default world space
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A default empty Unity scene consists of a Main Camera object and a single Directional
    Light object, as listed in the Hierarchy panel and depicted in the Scene panel.
    The Scene panel also shows a perspective of an infinite reference ground plane
    grid, like a piece of graph paper with nothing on it yet. The grid spans across
    the *x* (red) and *z* (blue) axes. The *y *axis (green) is up.
  prefs: []
  type: TYPE_NORMAL
- en: An easy way to remember the Gizmo axes colors is by keeping in mind that R-G-B
    corresponds to *X-Y-Z*.
  prefs: []
  type: TYPE_NORMAL
- en: The Inspector panel shows the details of the currently selected item. Select
    the Directional Light with your mouse, either from the Hierarchy list or within
    the scene itself, and look at the Inspector panel for each of the properties and
    components associated with the object, including its transform. An object's transform
    specifies its position, rotation, and scale in the 3D world space. For example,
    position (0, 3, 0) is 3 units above (in the *Y* direction) the center of the ground
    plane (*X* = `0`, *Z* = `0`). A rotation of (`50`, `330`, `0`) means that it's
    rotated 50 degrees around the *x *axis and 330 degrees around the *y *axis. As
    you'll see, you can change an object's transforms numerically here or directly
    with the mouse in the Scene panel.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, if you click on the Main Camera, it may be located at the (`0`, `1`,
    `-10`) position with no rotation. That is, it's pointed straight ahead, towards
    the positive *Z* direction.
  prefs: []
  type: TYPE_NORMAL
- en: When you select the Main Camera, as shown in the preceding editor screenshot,
    a Camera Preview inset is added to the Scene panel, which shows the view that
    the camera presently sees. (If the Game tab is open, you'll see the same view
    there too). Presently, the view is empty and the reference grid does not get rendered,
    but a foggy horizon is discernible, with the grey ground plane below and the blue
    default ambient Skybox above.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a simple diorama
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we will add a few objects to the scene to set up the environment, including
    a unit cube, a flat plane, a red ball, and a photographic backdrop. Here is a
    photograph of a physical mock-up of the diorama we will build in VR:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c5e7b978-8989-4cd8-b79f-4f0ab499e920.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding a cube
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s add the first object to the scene: a unit-sized cube.'
  prefs: []
  type: TYPE_NORMAL
- en: Within the Hierarchy panel, use the Create menu and choose 3D Object | Cube.
    The same selection can also be found in the main menu bar's GameObject drop-down
    menu.
  prefs: []
  type: TYPE_NORMAL
- en: A default white cube is added to the scene, centered on the ground plane at
    the (0, 0, 0) position, with no rotation, and a scale of one, as you can see in
    the Inspector panel. This is the Reset setting, which can be found in the object's
    Transform component of the Inspector panel.
  prefs: []
  type: TYPE_NORMAL
- en: The Reset values of the Transform component are Position (`0`, `0`, `0`), Rotation
    (`0`, `0`, `0`), and Scale (`1`, `1`, `1`).
  prefs: []
  type: TYPE_NORMAL
- en: If for some reason your cube has other Transform values, set these in the Inspector
    panel or locate the small *gear* icon in the upper right-hand side of the Inspector
    panel's Transform component, click on it, and select Reset.
  prefs: []
  type: TYPE_NORMAL
- en: This cube has the dimensions of one unit on each side. As we'll see later, one
    unit in Unity corresponds to one meter in world coordinates. Its local center
    is the center of the cube.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a plane
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let's add a ground plane object into the scene.
  prefs: []
  type: TYPE_NORMAL
- en: In the Hierarchy panel, click on the Create menu (or main GameObject menu) and
    choose 3D Object | Plane.
  prefs: []
  type: TYPE_NORMAL
- en: A default white plane is added to the scene, centered on the ground plane at
    Position (`0`, `0`, `0`). (If necessary, select Reset from the Inspector panel's
    Transform component's *gear* icon). Rename it to `GroundPlane`.
  prefs: []
  type: TYPE_NORMAL
- en: Note that at a scale of (`1`, `1`, `1`), Unity's plane object actually measures
    10 by 10 units in X and Z. In other words, the size of `GroundPlane` is 10 by
    10 units and its transform's Scale is 1.
  prefs: []
  type: TYPE_NORMAL
- en: 'The cube is centered at Position (`0`, `0`, `0`), just like the ground plane.
    However, maybe it doesn''t look like it to you. The Scene panel may show a Perspective
    projection that renders 3D scenes onto a 2D image. The Perspective distortion
    makes the cube not seem centered on the ground plane, but it is. Count the grid
    lines on either side of the cube. As you''ll see, when it is viewed in VR and
    you''re actually standing in the scene, it won''t look distorted at all. This
    is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0622dbe6-78d4-466a-9e60-984e09066a94.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The cube is submerged in the ground plane because its local origin is at its
    geometric center—it measures 1 by 1 by 1 and its middle point is (0.5, 0.5, 0.5).
    This might sound obvious, but it is possible for the origin of a model to not
    be its geometric center (such as one of its corners). The Transform component''s
    position is the world space location of the object''s local origin. Let''s move
    the cube as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Move the cube onto the surface of the ground plane—in the Inspector panel,
    set its Y position to 0.5: Position (`0`, `0.5`, `0`).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s rotate the cube a bit around the *y* axis. Enter 20 into its Y rotation:
    Rotation (`0`, `0.5`, `0`).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note the direction in which it rotates. That's 20 degrees clockwise. Using your
    left hand, give a thumbs-up gesture. See the direction your fingers are pointing?
    Unity uses a left-handed coordinate system. (There is no standard for the coordinate
    system *handedness*. Some software uses left-handedness, others use right-handedness).
  prefs: []
  type: TYPE_NORMAL
- en: Unity uses a left-handed coordinate system. And the *y* axis is up.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a sphere and some material
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, let's add a sphere. Select GameObject | 3D Object | Sphere from the menu.
  prefs: []
  type: TYPE_NORMAL
- en: Like the cube, the sphere has a radius of 1.0, with its origin at the center.
    (If necessary, select Reset from the Inspector panel Transform component's *gear*
    icon). It's hard to see the sphere as it is embedded in the cube. We need to move
    the sphere's position.
  prefs: []
  type: TYPE_NORMAL
- en: 'This time, let''s use the Scene panel''s **Gizmos** component to move the object.
    In the Scene view, you can select graphical controls, or Gizmos, to manipulate
    the objects transforms, as illustrated in the following screenshot from the Unity
    documentation ([http://docs.unity3d.com/Manual/PositioningGameObjects.html](http://docs.unity3d.com/Manual/PositioningGameObjects.html)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8ce24601-1cae-427f-a346-ef4f58a7b910.png)'
  prefs: []
  type: TYPE_IMG
- en: In the Scene panel, with the sphere selected, make sure that the Translate tool
    is active (second icon on the top-left icon toolbar) and use the arrows of the
    *x*, *y*, and *z *axes to position it. I left mine at Position (`1.6`, `0.75`,
    `-1.75`).
  prefs: []
  type: TYPE_NORMAL
- en: A **Gizmo** is a graphical control that lets you manipulate the parameters of
    an object or a view. Gizmos have grab points or handles that you can click and
    drag with the mouse.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we go much further, let''s save our work as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: From the main menu bar, select File | Save Scene As... and name it `Diorama`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Also, navigate to File | Save Project for good measure. Note that in the Project
    panel, the new scene object was saved in the top-level Assets folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s add some color to the scene by making a couple of colored materials
    and applying them to our objects. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Project panel, select the top-level Assets folder and select Create |
    Folder. Rename the folder to `Materials`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the `Materials` folder selected, select Create | Material and rename it
    to `Red Material`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Inspector panel, click the white rectangle to the right of Albedo, which
    opens the Color panel. Choose a nice juicy red.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat the preceding steps to make a `Blue Material` too.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Sphere from the Hierarchy (or Scene) panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the `Red Material` from the Project panel into the Inspector panel for
    the sphere. The sphere should now look red.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Cube from the Scene (or Hierarchy) panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This time, drag the `Blue Material` from the `Project` panel into the scene
    and drop it onto the cube. It should now look blue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Save your scene and save the project. Here''s what my scene looks like now
    (yours might be a little different, but that''s OK):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/50f9ebde-13f6-4557-91a3-27db3d77eaf7.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that we're using the folders in the Project panel `/Assets/` directory
    to organize our stuff.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the scene view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can change the scene view any time in a number of ways, and this varies
    depending on whether you have a mouse with three-buttons, or two-buttons, or Mac
    with only one button. Read up on it in the Unity manual, which can be found at
    [http://docs.unity3d.com/Manual/SceneViewNavigation.html](http://docs.unity3d.com/Manual/PositioningGameObjects.html),
    to find out what works for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'In general, combinations of left/right mouse clicks with the *Shift* + *Ctrl*
    + *Alt* keys will let you perform the following actions:'
  prefs: []
  type: TYPE_NORMAL
- en: Drag the camera around.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Orbit the camera around the current pivot point.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zoom in and out.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Press *Alt* and right-click to swing the current eye orbit up, down, left, and
    right.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the **Hand** tool is selected (in the upper-left icon bar), the right mouse
    button moves the eye. The middle-click of the mouse does a similar thing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the upper right-hand side of the Scene panel, you have the **Scene View** Gizmo,
    which depicts the current scene view orientation as shown in the following screenshot.
    It may indicate, for example, a Perspective view, with x extending back to the
    left and z extending back to the right:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8a3b97e1-8edc-4a55-82ae-624392098b46.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can change the view to look directly along any of the three axes by clicking
    on the corresponding colored cone as shown in the following screenshot. Clicking
    on the small cube in the center changes the Perspective view to the Orthographic
    (non-distorted) view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/91ecc775-19c9-45b7-a83f-94437f379199.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Before moving on, let''s first align the scene view with the Main Camera direction.
    You may recall me saying that the default camera orientation, (`0`, `0`, `0`),
    is looking down the positive z direction (back to front). Follow the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the white z cone on the Scene View Gizmo to adjust the view from the
    Back (back direction), looking forward.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Also, use the Hand tool (or the middle mouse button) to slide the view up a
    tad.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, when you select the Main Camera component (from the Hierarchy panel), you
    will see that the Scene view is roughly similar to the Camera Preview, looking
    in the same direction. (See the screen capture image shown in the following section
    for what the scene and preview looks like with this view direction after we add
    the photo.)
  prefs: []
  type: TYPE_NORMAL
- en: For a full list of Unity shortcut hotkeys, see [https://docs.unity3d.com/Manual/UnityHotkeys.html](https://docs.unity3d.com/Manual/UnityHotkeys.html).
  prefs: []
  type: TYPE_NORMAL
- en: Adding a photo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let's add a photo for the big-screen backdrop of our diorama.
  prefs: []
  type: TYPE_NORMAL
- en: 'In computer graphics, an image that is mapped onto an object is called a **texture**.
    While objects are represented in the x, y, and z world coordinates, textures are
    said to be in the U, V coordinates (such as pixels). We''ll see that textures
    and UV maps can have their own scaling issues. Follow the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a plane by navigating to GameObject | 3D Object | Plane and rename it
    `PhotoPlane`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reset the plane's transform. In the Inspector panel, find the *gear* icon on
    the upper right-hand side of the Transform panel. Click on this icon and select
    Reset.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, rotate it by 90 degrees around the *z *axis (set its Transform component's
    Rotation value of z to -90). That's *minus 90*. So, it's standing up, perpendicular
    to the ground.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rotate it by 90 degrees around the *y *axis so that its front is facing us.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move it to the end of the ground plane at Position value of *z* = `5` and above,
    at Position value of y = `5` (you may recall that the ground plane is 10 x 10
    units).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose any photo from your computer to paste on this photo plane using Windows
    Explorer or Mac Finder. (Alternatively, you can use the `GrandCanyon.jpg` image
    that comes with this book).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Project panel, select the top-level Assets folder and navigate to Create
    | Folder. Rename the folder to `Textures`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the photo file into the `Assets/Textures` folder. It should automatically
    import as a texture object. Alternatively, you can right-click on the Assets folder,
    select Import New Asset..., and import the picture.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the new image Texture in the Project panel and review its settings in
    the Inspector panel. For Unity''s rendering purposes, even if the original photo
    was rectangular, the texture is square now (for example, 2048 x 2048) and looks
    squished. When you map it onto a square-shaped face, it will be squished there
    too. Let''s perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Drag the photo texture from the Project panel onto the photo plane (in the Scene
    panel).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Oops! In my case, the picture is rotated sideways—yours, too?
  prefs: []
  type: TYPE_NORMAL
- en: Select `PhotoPlane` (the photo plane) and set the Transform component's Rotation
    value of X to `90` degrees.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: OK, it's upright, but still squished. Let's fix this. Check the original resolution
    of your photo and determine its aspect ratio. My `Grand Canyon` image was 2576
    x 1932\. When you divide its width by its height, you get the 0.75 ratio.
  prefs: []
  type: TYPE_NORMAL
- en: In Unity, set the `PhotoPlane` plane Transform component's Scale value of Z
    to `0.75`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Because its scale origin is the center, we also have to move it back down a
    bit.
  prefs: []
  type: TYPE_NORMAL
- en: Set the Position value of y to `3.75`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why 3.75? The height started at 10\. So, we scaled it to 7.5\. The scaling of
    objects is relative to their origin. So now, the half of the height is 3.75\.
    We want to position the center of the backdrop 3.5 unit above the ground plane.
  prefs: []
  type: TYPE_NORMAL
- en: We have the size and position set up, but the photo looks washed out. That's
    because the ambient lighting in the scene is affecting it. You might want to keep
    it that way, especially as you build more sophisticated lighting models and materials
    in your scenes. But for now, we'll un-light it.
  prefs: []
  type: TYPE_NORMAL
- en: With `PhotoPlane` selected, note that the photo's Texture component in the Inspector
    panel has its default Shader component set as Standard. Change it to Unlit | Texture.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s what mine looks like; yours should be similar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/038b07a3-eb34-4efe-9e42-4838d16a5e4a.png)'
  prefs: []
  type: TYPE_IMG
- en: There! That looks pretty good. Save your scene and project.
  prefs: []
  type: TYPE_NORMAL
- en: You may notice that Planes are only visible from their front. All surfaces in
    computer graphics have a front-facing direction (normal vector). The view camera
    must be towards the front face or else the object will not be rendered. This is
    a performance optimization. If you require a *plane* with faces on both sides,
    use a Cube scaled thinly, or two separate Planes facing away from each other.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that if you check your Materials folder now, you'll find that Unity has
    automatically created a `GrandCanyon.mat` material for you that uses the `GrandCanyon.jpg`
    texture.
  prefs: []
  type: TYPE_NORMAL
- en: Coloring the ground plane
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you want to change the ground plane color, create a new material (in the
    Project panel), name it `Ground`, and drag it onto the ground plane. Then, change
    its Albedo color. I suggest using the dropper (icon) to pick an earth tone from
    the image in your photo plane.
  prefs: []
  type: TYPE_NORMAL
- en: Measurement tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've created a Unity scene, added a few primitive 3D objects, and created a
    couple of basic textures, including a photograph. Along the way, we learned about
    positioning and transforming objects in Unity's 3D world space. The problem is
    that the actual size of stuff in your scene is not always obvious. You could be
    zoomed up or you may be using either a Perspective or Orthographic view, or other
    features that affect the apparent size. Let's look at ways to deal with the scale.
  prefs: []
  type: TYPE_NORMAL
- en: Keeping a unit cube handy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I suggest keeping a unit cube handy in your Hierarchy panel. When it's not needed,
    just disable it (uncheck the checkbox in the top left-hand side of the Inspector
    panel). It can be used like a measuring stick, or rather, a measuring block, when
    needed. I use one to estimate actual world sizes of objects, distances between
    objects, heights, and elevations, and so forth. Let's do it now.
  prefs: []
  type: TYPE_NORMAL
- en: Create a unit cube, name it `Unit Cube`, and place it somewhere out of the way
    for now, such as Position (`-2`, `0.5`, `-2`).
  prefs: []
  type: TYPE_NORMAL
- en: Leave it enabled for the time being.
  prefs: []
  type: TYPE_NORMAL
- en: Using a Grid Projector
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I want to tell you about the **Grid Projector**, a handy tool that is used
    to visualize a scale in any Unity scene. It''s one of the Standard Assets in the
    Effects package. So, you may need to import it into your project. To import, perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select Assets in the main menu bar and then navigate to Import Package | Effects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Import dialog box pops up, containing a list of all the things that can
    get imported. Then select Import.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you cannot find the `Effects` package to import, you may not have installed
    `Standard Assets` when you installed Unity. To get them now, you will need to
    run the `UnityDownloadAssistant` again as described at the beginning of this chapter
    (and it may already be in your `Downloads` folder).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we''ll add a projector to the scene, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Find the Grid Projector prefab located in the Project panel by navigating to
    the `Assets/Standard Assets/Effects/Projectors/Prefabs` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag a copy of the Grid Projector into your scene. Set the y value of the Position
    to `5` so that it's above the ground plane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The default Grid Projector is facing downward (Rotation value of x = 90), which
    is usually what we want. In the Scene view, you can see the Orthographic projection
    rays. A Unity doc ([http://docs.unity3d.com/Manual/class-Projector.html](http://docs.unity3d.com/Manual/class-Projector.html))
    explains a Projector as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: A Projector allows you to project a Material onto all objects that intersect
    its frustum.
  prefs: []
  type: TYPE_NORMAL
- en: This means that the objects intersected by the projection rays will receive
    the projected material.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, as you'd expect, the projector material (also named `GridProjector`)
    has a *grid* texture, which simply looks like a crosshair. (See for yourself,
    in the `Assets/.../Projectors/Textures/Grid` object).
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the projector shines the grid pattern as a light on the surface
    that it illuminates. In our scene, the `GroundPlane` plane is a light color. So,
    the grid may not show up. Now, follow the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: With Grid Projector selected in the Hierarchy panel, locate the `GridProjector` material
    component in the Inspector panel and change its Shader from Projector/Light to
    Projector/Multiply.
  prefs: []
  type: TYPE_NORMAL
- en: 'It now paints the white gridlines black. To get a better feel of what''s going
    on, change the scene view to a Top view orientation, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Click the green y cone on the Scene View Gizmo in the upper right-hand side
    of the View panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Also, click the little cube at the center of the Gizmo to change from the Perspective
    to the Orthographic (flattened) view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should now be looking straight down onto the ground plane. With the Grid
    Projector selected (make sure that the Translate tool is active, which is the
    second icon in the top-left icon toolbar), you can grab the Translate Gizmo attached
    to the Projector and move it from side to side. The grid line will move accordingly.
    You might leave it at Position (`-2.5`, `5`, `-0.5`) and avoid the projector Gizmo
    blocking the directional light.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, the built-in view reference grid might be confusing. So, turn
    it off in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Scene view panel, click on Gizmos (the menu with this name, which has
    options to control your Gizmos) and uncheck Show Grid.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: OK, so what does this get us? We can see that the default grid size measures
    half the edge of the unit cube. In Inspector, the Projector component's Orthographic
    size value is `0.25`.
  prefs: []
  type: TYPE_NORMAL
- en: Change the Projector's Orthographic size value from `0.25` to `0.5`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the scene and the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we have a one-unit grid that can be turned on and projected onto the scene
    any time it is needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s leave it on for now because it looks kind of cool, as you can see in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b3e1e5aa-1b61-4d2d-9e35-5607318eec64.png)'
  prefs: []
  type: TYPE_IMG
- en: Measuring the Ethan character
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How big is an avatar? Unity comes with a third-person character named `Ethan`.
    Let's add him to our scene. He's one of the `Standard Assets` in the `Characters`
    package. So, you may need to import that into your project.
  prefs: []
  type: TYPE_NORMAL
- en: 'To import, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select Assets in the main menu bar and then navigate to Import Package | Characters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Import dialog box pops up, containing a list of all the things that can
    get imported. Click All and then Import. The `ThirdPersonController` is a prefab
    (pre-built asset) located in the Project panel. This can be found by navigating
    to the `Assets/Standard Assets/Characters/ThirdPersonCharacter/Prefabs` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag a copy of `ThirdPersonController` into your scene. The exact x and z positions
    don't matter, but set y to `0` so that the character named `Ethan` is standing
    on `GroundPlane`. I left mine at (`2.2`, `0`, `0.75`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s try it out:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the *Play* icon at the top of the Unity window in the center, to start
    your game. Use the *W*, *A*, *S*, and *D* keys to move him around. *Run, Ethan!
    Run!*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the *Play* icon again to stop the game and return to edit mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'So, how big is Ethan? According to Google search, the average height of a human
    male is 5 foot 6 inches, or 1.68 meters (in the USA, the average adult male is
    more like 5'' 10" or 1.77 meters tall). Let''s see how tall Ethan is when compared
    to these:'
  prefs: []
  type: TYPE_NORMAL
- en: Slide the unit cube next to Ethan using the Translate Gizmo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alright, he's about 1.6 times its height
  prefs: []
  type: TYPE_NORMAL
- en: Scale the unit cube's height (y) to 1.6 and center its y position to 0.8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Look again. As illustrated in the following screenshot, he''s not quite 1.6\.
    So, Ethan is a little shorter than the average male (unless you include his pointy
    hairdo). Swinging my view around, I''m looking Ethan right in the face, and by
    further adjusting the cube, the eye level is about 1.4 meters. Make a note of
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: Restore the unit cube's Scale (`1`,`1`,`1`) and Position (`-2`, `0.5`, `-2`)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the scene and the project
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the comparison of the unit cube and Ethan:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ba258a68-f33b-4b53-a167-9672cb9e22f9.png)'
  prefs: []
  type: TYPE_IMG
- en: Using third-party content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far we have shown you how to use Unity and be productive creating a scene,
    but with pretty simple content. Inherently, Unity is not a 3D modeling or asset
    creation tool. Rather (as the name *Unity* suggests), it's a unified platform
    for pulling together content from a variety of sources to assemble and program
    a game or experience involving animation, physics, rendering effects, and so on.
    If you are a 3D artist you may know how to create content in other programs like
    Blender, 3D Studio Max, or Maya. If not, you can find a plethora of models on
    the web.
  prefs: []
  type: TYPE_NORMAL
- en: 'One terrific source is the **Unity Asset Store** ([https://www.assetstore.unity3d.com/en/](https://www.assetstore.unity3d.com/en/)).
    Many asset packs are free, especially starter ones, with possible paid upgrades
    if you want more. If you are looking for a few things to get your learning and
    experimental projects going, here are some of my free favorites:'
  prefs: []
  type: TYPE_NORMAL
- en: Nature Starter Kit 1 and 2 ([https://assetstore.unity.com/packages/3d/environments/nature-starter-kit-1-49962](https://assetstore.unity.com/packages/3d/environments/nature-starter-kit-1-49962))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wispy Skybox ([https://assetstore.unity.com/packages/2d/textures-materials/sky/wispy-skybox-21737](https://assetstore.unity.com/packages/2d/textures-materials/sky/wispy-skybox-21737))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Planet Earth Free ([https://assetstore.unity.com/packages/3d/environments/sci-fi/planet-earth-free-23399](https://assetstore.unity.com/packages/3d/environments/sci-fi/planet-earth-free-23399))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Seamless Texture Pack ([https://assetstore.unity.com/packages/2d/textures-materials/seamless-texture-pack-21934](https://assetstore.unity.com/packages/2d/textures-materials/seamless-texture-pack-21934))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And of course, Cute Snowman ([https://assetstore.unity.com/packages/3d/props/cute-snowman-12477](https://assetstore.unity.com/packages/3d/props/cute-snowman-12477))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition to 3D models, the Asset Store contains an amazing amalgamation of
    development tools, add-ons, audio, and more. The Asset Store, its active community
    of developers, and its huge amount of content is one of the things that has made
    Unity so successful.
  prefs: []
  type: TYPE_NORMAL
- en: The Asset Store is available directly within the Unity Editor. To access it,
    choose **Window** | **Asset Store** and begin exploring.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add assets to your project using the Asset Store for example, simply find
    one and select Download, then choose Import to add it to your `Project Assets`
    folder. Asset packs often come with example scenes you can open to explore how
    it looks and works. After that, locate its `Prefab` folder and simply drag any
    prefabs into your own scene. An example is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c4613402-acc5-4528-8f63-e62840c74b08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Furthermore, there are many sites for sharing 3D models, both free and for
    a fee. Some are oriented towards higher-end 3D CAD for engineers. Others cater
    to 3D printing enthusiasts. No matter. Just be sure to look for FBX or OBJ file
    formats of the model so they can be imported into Unity. Some of the more popular
    resource sites include:'
  prefs: []
  type: TYPE_NORMAL
- en: 3D CAD Browser: [https://www.3dcadbrowser.com/](https://www.3dcadbrowser.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BlenderSwap: [http://www.blendswap.com/](http://www.blendswap.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CG Trader: [https://www.cgtrader.com/](https://www.cgtrader.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Free3D: [https://free3d.com/](https://free3d.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Poly: [https://poly.google.com/](https://poly.google.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft Remix 3D: [https://www.remix3d.com](https://www.remix3d.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sketchfab: [https://sketchfab.com](https://sketchfab.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TurboSquid: [http://www.turbosquid.com/](http://www.turbosquid.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will use *Google Poly* later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Creating 3D content with Blender
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unity offers some basic geometric shapes, but when it comes to more complex
    models, you'll need to go beyond Unity. As we discussed, the Unity Asset Store and
    many sites have tons of amazing models. Where do they come from? Will you run
    into problems while importing them into Unity?
  prefs: []
  type: TYPE_NORMAL
- en: I know that this book is about Unity, but we're going on a short side adventure
    right now. We're going to use Blender (version 2.7x), a free and open source 3D
    animation suite ([http://www.blender.org/](http://www.blender.org/)), to make
    a model and then import it into Unity. Grab a coffee and strap yourself in!
  prefs: []
  type: TYPE_NORMAL
- en: The plan is not to build anything very fancy right now. We'll just make a cube
    and a simple texture map. The purpose of this exercise is to find out how well
    a one-unit cube in Blender imports with the same scale and orientation into Unity.
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to skip this section or try a similar experiment using your favorite
    modeling software ([https://en.wikipedia.org/wiki/List_of_3D_modeling_software](https://en.wikipedia.org/wiki/List_of_3D_modeling_software)).
    If you prefer not to follow along or run into problems, a copy of the completed
    files created in this topic is available in the download package for this book.
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to Blender
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open the Blender application. Dismiss the opening splash screen. You will be
    in the Blender editor, which is similar to what''s shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/91d6b51c-7696-401a-9237-2bc33588fe3d.png)'
  prefs: []
  type: TYPE_IMG
- en: Like Unity, Blender consists of a number of non-overlapping windows, and their
    layout can be customized to suit your needs. However, the Blender interface can
    be more daunting, in part because it integrates a number of different editors
    that can be opened at the same time, in their own panels.
  prefs: []
  type: TYPE_NORMAL
- en: It's helpful to realize that the default view, as shown in the preceding screenshot,
    contains five different editors!
  prefs: []
  type: TYPE_NORMAL
- en: The most obvious editor is the large **3D View**, which I highlighted with a
    (red) rectangle. This is where you can view, move, and organize the objects in
    your Blender scene.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the other editors that are opened:'
  prefs: []
  type: TYPE_NORMAL
- en: The Info editor, which can be seen along the top edge of the app, has global
    menus and information about the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Timeline editor, which is present along the bottom edge of the app, is for
    animations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Outliner editor, on the upper right-hand side, has a hierarchical view of
    the objects in your scene
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Properties editor, which can be seen to the right below the Outliner, is
    a powerful panel that lets you see and modify many properties of the objects in
    the scene
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Each editor can have multiple panes. Let''s consider the 3D View editor:'
  prefs: []
  type: TYPE_NORMAL
- en: The large area in the middle is the **3D Viewport**, where you can view, move,
    and organize the objects in your Blender scene.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Just below the 3D Viewport is the editor **Header**, which is called so although
    it's at the bottom in this case. The Header is a row of menus and tools that provide
    great control over the editor, including view selectors, edit modes, transform
    manipulators, and layer management.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On the left-hand side is the Tool Shelf containing various editing tools that
    can be applied to the currently selected object, which can be organized into tabbed
    groups. The Tool Shelf can be toggled open or closed by grabbing and sliding its
    edge or by pressing the key *T*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The 3D Viewport also has a **Properties** pane, which may be hidden by default
    and can be toggled open or closed by pressing the key *N*. It provides the property
    settings for the currently selected object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the upcoming instructions, we will ask you to change the **Interaction Mode**
    of the 3D View editor, say between the Edit Mode and Texture Paint mode. This
    is selected in the Header, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e87815ce-185b-45ba-bf48-9811bfd97e25.png)'
  prefs: []
  type: TYPE_IMG
- en: The other editors also have the Header panes. The Info editor (at the top of
    the app) is only a Header! The outliner and Properties editors (on the right)
    have their Headers at the top of their panel rather than at the bottom.
  prefs: []
  type: TYPE_NORMAL
- en: Once you recognize this layout, it doesn't look so crowded and confusing.
  prefs: []
  type: TYPE_NORMAL
- en: The Properties editor Header has a wide set of icons, which act like tabs, to
    select the group of properties presented in the rest of the panel. Hovering your
    mouse over the icon (like any of the UI widgets here) will show a tooltip with
    a better hint in regards to what it's for. It's pictured in the following images
    (in a couple of pages) when we get to using it.
  prefs: []
  type: TYPE_NORMAL
- en: The Blender layout is very flexible. You can even change a panel from one editor
    to another. At the far left of each Header is the Editor Type selector. When you
    click on it, you can see all the options.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the plethora of things that you can click on in the Blender interface,
    you can use just about any command using a keyboard shortcut. If you forget where
    to find a selection, press the space bar and type in your best guess of the command
    name that you're looking for. It just might pop up!
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a screenshot showing the Editor Type selector available in
    Blender:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/354e9cb3-bf93-47c2-ba5a-de5a4653806f.png)'
  prefs: []
  type: TYPE_IMG
- en: A unit cube
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let's build a unit cube in Blender.
  prefs: []
  type: TYPE_NORMAL
- en: The default scene may already have objects, including a cube, camera, and a
    light source, as shown earlier in the default Blender window. (Your startup settings
    may be different since that can be configured.)
  prefs: []
  type: TYPE_NORMAL
- en: 'If your startup scene does *not* contain a unit cube, create one, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that the scene is empty by deleting whatever is in it (right-click
    to select, *X* on the keyboard to delete).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the 3D cursor to the origin (`0`,`0`,`0`) using *Shift* + *S* (opens the
    Snap options list) | Cursor To Center.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the left Tool Shelf panel, choose the Create tab and under Mesh select Cube
    to add a cube.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: OK, now we're all on the same page.
  prefs: []
  type: TYPE_NORMAL
- en: Note that in Blender, the reference grid extends in the *x* and *y *axes, and
    *z* is up (unlike Unity, where the *y *axis is up).
  prefs: []
  type: TYPE_NORMAL
- en: 'Furthermore, note that the default cube in Blender has a size of (`2`, `2`,
    `2`). We want a unit cube sitting on the ground plane at the origin. For this,
    follow the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Properties pane with the keyboard *N* key
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to Transform | Scale and set X, Y, Z to (`0.5`, `0.5`, `0.5`)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to Transform | Location and set Z to `0.5`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the *N* key again to hide the pane
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can zoom in using the scroll wheel of the mouse
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For our purposes, also ensure that the current renderer is Blender Render (in
    the drop-down selector on the Info editor—at the top of the app window in the
    center).
  prefs: []
  type: TYPE_NORMAL
- en: UV Texture image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's paint the faces of our cube. 3D computer models in Unity are defined by *meshes*—a
    set of Vector3 points connected with edges, forming triangular-shaped facets.
    When building a model in Blender, you can unwrap a mesh into a flattened 2D configuration
    to define the mapping of texture pixels to the corresponding areas on the mesh
    surface (UV coordinates). The result is called a UV Texture image.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create a **UV Texture image** for our cube, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Go into Edit Mode using the Interaction Mode selector in the bottom Header bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select *all* (press the *A* key on the keyboard twice) to make sure that all
    the faces are selected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the left Tool Shelf panel, select the Shading/UVs tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under UV Mapping click on Unwrap, select Smart UV Project from the drop-down
    list, accept the default values, and click on OK (the result, shown in the following
    screenshot, also shows what the unwrapped cube looks like).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, go into the Texture Paint mode using the Interaction Mode selector in the
    bottom Header bar again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We need to define a *paint slot* for our material. Click on Add Paint Slot,
    select Diffuse Color, name it `CubeFaces`, and press OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can now start painting directly on the cube. Paint the front face first,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Make a smaller brush. In the left Tool Shelf panel, in the Tools tab, navigate
    to Brush | Radius and enter `8 px`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It may be easier to work in an orthographic view. From the menu bar at the bottom,
    navigate to View | View Persp/Ortho.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, navigate to View | Front.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can zoom in or out using the mouse scroll wheel if needed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With your best handwriting, write the word `Front` using the left-click of the
    mouse and draw.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, the back face.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the menu bar at the bottom, navigate to View | Back and select this face
    with a right-click.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With your best handwriting, write `Back`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Repeat the above process for the left, right, top, and bottom faces. If at
    some point it''s not painting, make sure that there''s a current face selected.
    Try right-clicking on the face to reselect it. The result should look something
    like this (shown side by side both in the 3D View editor with an orthographic
    perspective and in the UV/Image Editor):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7afaad07-0763-4da3-a0b9-42759928f22c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we need to save the texture image and set up its properties, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the current Editor Type to UV/Image Editor using the selector on the
    far left of the Header at the bottom of the 3D View editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Browse Image to be linked selector icon (just towards the left
    of the + icon) and choose `CubeFaces` from the list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Image menu item on the menu bar at the bottom now has an asterisk (Image*)
    indicating that there's an unsaved image. Click on it, select Save As Image, and
    save it as `CubeFaces.png`. Use a folder outside the Unity project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the right-hand side, in the Properties editor panel, find the long row of
    icons in its Header and select the Texture one (third from the last.) It may be
    hidden if the panel isn't wide enough; you can scroll down with your mouse to
    show it, as shown in the following screenshot:![](img/a99a7f66-7b06-42ec-942a-7d15f83ba191.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the Texture properties, change Type to Image or Movie.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, in the Image group of properties, click on the Browse Image to be Linked
    selector icon (as shown in the following screenshot) and choose `CubeFaces`:![](img/5c22d5b4-bd3a-469c-a66b-5edd9e424720.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should see the labeled faces texture image in the Preview window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Good! Let''s save the Blender model, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Select File from the top main menu bar in the Info editor and click on Save
    (or press *Ctrl* + *S*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the same folder as the one where you saved the texture image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name it `UprightCube.blend` and click on Save Blender File.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We should now have two files in a folder, `UprightCube.blend` and `CubeFaces.png`.
    I use a folder named `Models/` in the root of my Unity project.
  prefs: []
  type: TYPE_NORMAL
- en: We recommend you then export the model as FBX format. This is a standard format
    for Unity. (Unity can import Blend files but may require you always have Blender
    installed on the same system). Use **File** | **Export** | **FBX** to save the
    `.fbx` version.
  prefs: []
  type: TYPE_NORMAL
- en: Wow, that was a lot. Don't worry if you didn't get it all. Blender can be daunting.
    However, Unity needs models. You can always download someone else's models from
    the Unity Asset Store and other 3D model sharing sites, or you can learn to make
    your own. Haha! Seriously, it's a good thing to start to learn. Actually, with
    VR, it's gotten a lot easier as we'll show you later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Importing into Unity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Back in Unity, we now want to import both the files, `UprightCube.fbx` and
    `CubeFaces.png`, one at a time, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Project panel, select the top-level Assets folder, navigate to Create
    | Folder, and rename the folder to `Models`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An easy way to import files into Unity is to just drag and drop the `.fbx` (or `.blend`)
    file from the Windows Explorer (or Mac Finder) window into the Project panel Assets/Models
    folder and drag and drop the `.png` file into the Assets/Textures folder (or you
    can use Assets | Import New Asset... from the main menu bar).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add `UprightCube` to the scene by dragging it from the Assets/Models folder
    where it was just imported into the Scene view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its position so that it's away from the other objects. I left mine at Position
    (`2.6`, `2.2`, `-3`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the `CubeFaces` texture from the Assets/Textures folder into the Scene
    view, hovering over the just added `UprightCube` so that it receives the texture,
    and drop the texture onto the cube.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The scene should now look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d903d01a-6f7e-45ea-a4a9-403a8b9a3dac.png)'
  prefs: []
  type: TYPE_IMG
- en: A few observations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The back of the cube is facing us. Is that a mistake? Actually, it makes sense
    since the current viewpoint is looking forward. So, we should see the back of
    the cube. If you didn't notice already, the same goes for Ethan. It also seems
    like the cube has a one-unit dimension.
  prefs: []
  type: TYPE_NORMAL
- en: However, on closer examination, in the cube's Inspector panel, you'll see it
    imported with the scale that we gave it in Blender (`0.5`, `0.5`, `0.5`). Also,
    it has an X rotation of -90 (minus 90). Thus, if we reset the transform, that
    is, the scale to (`1`,`1`,`1`), it'll be 2 units in our world space and tipped
    over (so, don't reset it).
  prefs: []
  type: TYPE_NORMAL
- en: There's not much that we can do to compensate for the rotational adjustment
    without going back to Blender. But the scale can be adjusted in the model's Import
    Settings (in Inspector).
  prefs: []
  type: TYPE_NORMAL
- en: Blender's default up direction is Z, while Unity's is Y. Importing with a -90
    X rotation adjusts for that. An imported scale can be adjusted in the object's
    Inspector panel's Import Settings.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have more control when it comes to exporting FBX from Blender. As shown
    in the screenshot, during Export you can customize the settings, for example,
    making Y the up axis and Z the forward one and setting the scale factor for import:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0548128a-d68d-431e-914d-63a9ce46fff3.png)'
  prefs: []
  type: TYPE_IMG
- en: Before ending the preceding process, select `UprightCube` from the Hierarchy
    panel and drag it into the Project panel's Assets folder. (You may consider making
    an Assets/Prefabs subfolder and placing it into that.) This makes it a reusable
    prefab, texture image and all.
  prefs: []
  type: TYPE_NORMAL
- en: There are some important lessons in this exercise (other than having learned
    a little bit about Blender) that apply to any 3D Unity project, including the
    VR ones. Normally, you will be importing models that are much more complex than
    a cube. You will likely run into issues related to data conversion, scale, orientation,
    and UV texture images that might be confusing at best. If this happens, try to
    break the problem into smaller, more isolated scenarios. Do little tests to gain
    insight into how applications exchange data and to help you understand which parameter
    tweaks might be necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Creating 3D content in VR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to traditional 3D modeling software like Blender (and ZBrush, 3D
    Studio Max, Maya, and so on) there is a new generation of 3D design apps that
    let you to directly create inside VR. After all, it's pretty awkward trying to
    use an inherently 2D desktop screen with a 2D mouse to form, sculpt, assemble,
    and manipulate 3D models. If only it could be more like real-life sculpture and
    construction. So, why not just do it directly in 3D? In VR!
  prefs: []
  type: TYPE_NORMAL
- en: Like other digital platforms, we can categorize VR apps into ones that present
    an experience, ones where you interact to engage with the environment, and ones
    where you actually create content, for yourself or for sharing. An example of
    the latter and one of the first to be widely successful is Google Tilt Brush ([https://www.tiltbrush.com/](https://www.tiltbrush.com/))
    where you paint in 3D. This is one my favorite go-to apps when introducing VR
    to family and friends. Tilt Brush lets you paint in 3D in virtual reality.
  prefs: []
  type: TYPE_NORMAL
- en: 'Other VR 3D with sculpting and painting tools, to name just a few, include:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Google Blocks**: Low poly modeling ([https://vr.google.com/blocks/](https://vr.google.com/blocks/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Oculus Medium**: Sculpt, model, paint in VR ([https://www.oculus.com/medium/](https://www.oculus.com/medium/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Oculus Quill**: A VR illustration tool ([https://www.facebook.com/QuillApp/](https://www.facebook.com/QuillApp/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kudon**: Surface and volume sculpting ([http://store.steampowered.com/app/479010/Kodon/)](http://store.steampowered.com/app/479010/Kodon/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MasterpieceVR**: VR sculpting and painting ([https://www.masterpiecevr.com/](https://www.masterpiecevr.com/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Microsoft Paint 3D**: Easy 3D sculpting and painting bundled free with Windows
    ([https://www.microsoft.com/en-us/store/p/paint-3d/9nblggh5fv99](https://www.microsoft.com/en-us/store/p/paint-3d/9nblggh5fv99))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Making stuff and playing with it in VR is creative and fun, but to be useful
    and productive, you need to be able to share your creations outside of the app.
    Most VR sculpting tools let you export the models to share on the Internet, export
    in FBX file format, for example, and import them into Unity. There are two different
    workflows to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Export/Import**: In the first workflow you make a model and export it to
    a compatible format, like FBX. This is akin to traditional 3D software like we
    did with Blender.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Publish/Import**: The second workflow is to upload it to a sharing service
    and subsequently download and install it into your Unity project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we will use Tilt Brush as an example. Suppose you have Google
    Tilt Brush and a compatible VR rig. Further, suppose you have a creation you'd
    like to integrate with your VR app with Unity. Let's walk through each workflow
    process.
  prefs: []
  type: TYPE_NORMAL
- en: I opened Tilt Brush in VR and created a masterpiece using the Paper ribbon brush.
    I call it *TiltBox*, consistent with the cube theme we're using in this chapter.
    I know, it's beautiful.
  prefs: []
  type: TYPE_NORMAL
- en: The Tilt Brush features and user interface presented here (at the time of writing)
    are considered by Google to be in beta or experimental and are subject to change
    by the time you read this.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6d4e7291-7f8d-46cf-97da-f6830331240f.png)'
  prefs: []
  type: TYPE_IMG
- en: Exporting and importing Tilt Brush models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to export our model as FBX and then import it into Unity. This
    is an advanced topic so if you're new to Unity you may want to skip this topic
    for now and look at the *Publishing and importing with Google Poly* section instead.
  prefs: []
  type: TYPE_NORMAL
- en: In Tilt Brush, to export, go to the Save panel and choose the More Options… | Labs
    | Export menu. (Note the location of the Export option may change in a future
    release.)
  prefs: []
  type: TYPE_NORMAL
- en: 'The default folder where your files are saved in Windows is `Documents/Tilt
    Brush/Exports/[DrawingName]/`. If you turn your right-hand controller around you''ll
    discover an Info panel on the back, which is a message console that reports the
    actual pathname of the drawing on your system, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8833c058-06c5-4fe3-853f-aefbe507d7cf.png)'
  prefs: []
  type: TYPE_IMG
- en: The folder will contain several files, including the `.fbx` of the model and
    the `.png`'s of the brush textures (not used, as the Tilt Brush Toolkit also provides
    them).
  prefs: []
  type: TYPE_NORMAL
- en: 'To import into Unity you need the Tilt Brush Toolkit Unity package. The Google
    Poly package includes the toolkit (install from the Asset Store as described in
    the next topic). Or install it directly from GitHub, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://github.com/googlevr/tilt-brush-toolkit](https://github.com/googlevr/tilt-brush-toolkit) and
    use the download link for `tiltbrush-UnitySDK-vNN.N.N.unitypackage` (via [https://github.com/googlevr/tilt-brush-toolkit/releases](https://github.com/googlevr/tilt-brush-toolkit/releases))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the toolkit in Unity using Assets | Import Package | Custom Package…,
    then press Import
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You'll find that the toolkit includes assets for rendering brushes.
  prefs: []
  type: TYPE_NORMAL
- en: There is also a `README` file in the `Exports` folder with details about your
    Tilt Brush version and export capabilities, including how to use the `CFG` file
    for tweaking various options for advanced users.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can import the drawing''s FBX:'
  prefs: []
  type: TYPE_NORMAL
- en: Drag the FBX file into your Project Assets (or use Assets | Import New Asset…).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ignore any materials created by the import; we will use those provided in the
    toolkit. You can disable this in the model’s Import settings Materials **|** Import
    **Materials** uncheck, and then click Apply.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can now drag the model to your scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locate the brush material for your sketch in `Assets/TiltBrush/Assets/Brushes/`.
    In our case, the sketch uses Paper brush strokes, located in the `Basic/Paper/`
    subfolder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the material onto your sketch strokes as needed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your scene now contains your Tilt Brush sketch. For more advanced features including
    audio reactive features, animations, and VR teleportation, please refer to the
    Tilt Brush documentation and example scenes.
  prefs: []
  type: TYPE_NORMAL
- en: That was not too difficult although a bit tedious. Other 3D modeling apps require
    a similar process to export models and import into Unity.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing and importing using Google Poly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Fortunately, Google has made things a whole lot easier with the introduction
    of Google Poly ([https://poly.google.com/](https://poly.google.com/)) as a place
    to publish, browse, and download free 3D objects created with Google Tilt Brush
    and Google Blocks (and other apps that create OBJ files with materials).
  prefs: []
  type: TYPE_NORMAL
- en: 'I don''t mean to sound like a Google fanboy, but let''s stick to the Tilt Brush
    theme. Within Tilt Brush, it is very easy to publish your sketches to Google Poly
    with the click of a button. And importing Poly models into Unity is equally easy
    with the Poly Toolkit Unity package available on the Asset Store. Let''s go through
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: Poly is not just for Unity developers. Google provides SDK for access from many
    platforms. See [https://developers.google.com/poly/](https://developers.google.com/poly/).
  prefs: []
  type: TYPE_NORMAL
- en: Within Tilt Brush, first, ensure that you are logged into your Google account
    (My Profile).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the Save menu panel, choose the cloud upload option, as shown. This will
    upload your sketch to Poly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then complete the publishing step in your browser (out of VR), and press Publish.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that Poly Toolkit includes the Tilt Brush Toolkit. If you already imported
    the Tilt Brush toolkit into your project from the previous section, we suggest
    you delete it (and the third-party folders) first before importing Poly to avoid
    conflict.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Unity:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Asset Store panel (Window | Asset Store)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for `Poly Toolkit`, then Download and Import the Poly Toolkit asset package
    into your project ([https://assetstore.unity.com/packages/templates/systems/poly-toolkit-104464](https://assetstore.unity.com/packages/templates/systems/poly-toolkit-104464))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Note that the toolkit installs a new Poly menu in the Unity menu bar. Choose
    Poly | Browse Assets… to open the Poly browser panel, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6b82dfb7-bf8a-4bd4-9b22-82288df138bf.png)'
  prefs: []
  type: TYPE_IMG
- en: This panel can be docked in the Unity editor by dragging its tab
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Before you can browse your own uploads, you must sign in using the Sign In button
    in the upper right
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, in the Poly Toolkit panel's Show selection, choose Your Uploads
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locate the model you wish to import. Its page includes a number of import options,
    including scaling and recentering the model transform
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose Import Into Project
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By default, it will import the model into the `Project Assets/Poly/Assets/`
    folder as a prefab
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the model's prefab from the folder into your scene
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'That''s it. You now have a world of 3D models at your fingertips: ones you
    created and published on Poly and others you''ve discovered on Poly, the Unity
    Asset store, or the plethora of other 3D model sites you can explore.'
  prefs: []
  type: TYPE_NORMAL
- en: Editing Unity in VR with EditorXR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned about the Unity Editor—a tool for creating
    3D scenes and projects on a 2D computer screen. We also learned a bit about Blender—a
    tool for creating 3D assets on at 2D computer screen. Then we progressed to the
    new generation of 3D asset creation tools in virtual reality including Tilt Brush
    and Poly. Now we'll explore creating VR scenes directly in virtual reality too!
  prefs: []
  type: TYPE_NORMAL
- en: '**Unity EditorXR** (**EXR**) is a new experimental feature of Unity (at time
    of writing) where you can edit your 3D scenes directly in VR rather than on your
    2D monitor. In this section, we may be getting ahead of ourselves in more ways
    than one. This is both an advanced topic and an experimental one. If you are just
    getting started with VR, or if you are just getting started with Unity, you may
    want to skip this topic for now and come back at a later time.'
  prefs: []
  type: TYPE_NORMAL
- en: EXR is an advanced topic because it assumes you are comfortable with using the
    Unity Editor windows, are used to thinking in 3D, and are somewhat experienced
    in working with 3D assets. It also assumes you have a VR rig with tracking hand
    controllers, like Oculus Rift and HTC Vive. You will need a powerful PC with a
    high-end graphics card if you hope to have any chance of a smooth, comfortable
    experience. And last but not least, some of EXR's user interaction conventions
    take some learning and getting used to.
  prefs: []
  type: TYPE_NORMAL
- en: 'Despite that, EXR is a pretty sweet project that you could start using today
    to be productive. Especially if you''re not afraid of software that is experimental.
    This also means that the UI we describe in this book is certainly subject to change.
    (For example, at this moment in time the package is being rebranded from EditorVR
    to EditorXR and EXR). Current links to information include:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started presentation: [https://docs.google.com/presentation/d/1THBAjLV267NVvZop9VLuUSNx1R2hyp8USgOc8110Nv8/edit#slide=id.g1e97811ad3_2_17](https://docs.google.com/presentation/d/1THBAjLV267NVvZop9VLuUSNx1R2hyp8USgOc8110Nv8/edit#slide=id.g1e97811ad3_2_17)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started documentation: [https://docs.google.com/document/d/1xWunGC3NJoDRBBz44gxpMUAh3SmedtNK12LqACyy2L0/edit#heading=h.9hlhay6ebu98](https://docs.google.com/document/d/1xWunGC3NJoDRBBz44gxpMUAh3SmedtNK12LqACyy2L0/edit#heading=h.9hlhay6ebu98)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EditorXR community forum: [https://forum.unity3d.com/forums/editorvr.126/](https://forum.unity3d.com/forums/editorvr.126/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GitHub repository: [https://github.com/Unity-Technologies/EditorVR](https://github.com/Unity-Technologies/EditorVR)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another reason EXR is an advanced topic this early in this book is that we need
    to enable VR in our project, a topic we do not get to until the next chapter.
    But we'll walk you through it now quickly without a lot of explanation.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up EditorXR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To get started using EXR in your projects, download and install the Unity package.
    By the time you read this, it may already be bundled with the Unity Download Assistant
    or available in the Asset Store:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the EditorXR Unity package ([https://github.com/Unity-Technologies/EditorXR/releases](https://github.com/Unity-Technologies/EditorXR/releases)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import it into your project (Assets | Import Package | Custom Package…).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are using a version earlier than Unity 2018, download and import Text
    Mesh Pro from the Asset Store ([https://assetstore.unity.com/packages/essentials/beta-projects/textmesh-pro-84126](https://assetstore.unity.com/packages/essentials/beta-projects/textmesh-pro-84126)),
    a free asset from Unity Technologies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are using VIVE, download and import the SteamVR Plugin from the Asset
    Store ([https://www.assetstore.unity3d.com/en/#!/content/32647](https://www.assetstore.unity3d.com/en/#!/content/32647)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are using Oculus Rift with Touch controllers, download and import the
    Oculus Utilities for Unity ([https://developer3.oculus.com/downloads/](https://developer3.oculus.com/downloads/)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set up your default VR platform in Player Settings (Edit | Project Settings
    | Player). Find the XR Settings section (at bottom of the Inspector panel) and
    check the Virtual Reality Supported checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the Virtual Reality SDKs for Oculus and/or OpenVR.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you are using Oculus Rift with touch controllers, make sure the Oculus one
    comes first, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/abccaebe-eb93-4531-9507-1401327bc54b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you’re ready to launch into EXR:'
  prefs: []
  type: TYPE_NORMAL
- en: Select Windows | EditorXR
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If necessary, press Toggle Device View to make the VR view active
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then put on your headset
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now you can access much of the same editing features found in Unity Editor but
    within VR.
  prefs: []
  type: TYPE_NORMAL
- en: Using EditorXR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The user interaction in EXR is similar to Google Tilt Brush. One hand holds
    your menu palette and the other picks functions from it. Like a boxy glove, you
    can change menus with the flick of your thumb to rotate menu box faces. That’s
    the starting point but EXR is ever more complex, as it needs to provide the rich
    set of Unity Editor features in your virtual workspace, compounded with the need
    to navigate the scene, organize your editor panels, and of course edit your scene
    game objects. We encourage you to watch a few demo videos before jumping in.
  prefs: []
  type: TYPE_NORMAL
- en: 'The hand controller selectors implement an innovative, simultaneous combination
    of laser pointers for picking distant objects and grabbing (via a *selection cone*)
    for objects within reach, as illustrated here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/97ec85dc-2360-4c47-a634-6cdf95b785f9.png)'
  prefs: []
  type: TYPE_IMG
- en: To manipulate objects, EXR has implemented robust 3D versions of the familiar
    scene editor widgets in the 2D Editor. They’re really quite powerful and easy
    to use.
  prefs: []
  type: TYPE_NORMAL
- en: 'Without going into much further detail, here are the key features in EXR editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Selection**: Robust use of the hand controller thumbpad/stick, buttons, trigger,
    and grib'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Menus**: Boxed glove menu panels, radial menu, shortcuts, and tools to organize
    panels in 3D'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Navigation**: Move throughout your scene as you work, fly and blink modes,
    rotate in place, scale the world, use a mini-world view'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Workspaces**: Correspond to windows in the 2D editor, for Project, Hierarchy,
    Inspector, Console, Profile, and more, can be opened and placed in the VR work
    area'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other features include locked objects, snapping,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram shows how the manipulator Gizmo can be used for direct
    manipulation of the current selected object, in conjunction with the radial menu
    on your controller, to switch tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dd383c2b-c065-4644-b073-fee429d72e99.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Perhaps one of the more challenging things to learn in EXR is what each of
    the hand controls do as they switch meaning depending on the current context.
    The following diagram shows the controller guides for the VIVE:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8170f9c3-268a-41bd-aa48-b25e8c8c9bd5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Controller guides for the Oculus touch are shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ace8c8d0-51c3-4355-abac-83804e173f5f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To wrap up this topic, you can even use Google Poly to find objects and insert
    them into your scene in VR. An example of the third-party extensions of the EditorXR
    interface and API, the Poly workspace is available in VR. If you have the Poly
    Toolkit installed (as discussed) and you are using EditorXR, then Poly is one
    of the available workspaces. Open it to browse and add 3D models from the cloud
    into your scene, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d3168898-b375-49fb-9b4d-8f1da2846318.png)'
  prefs: []
  type: TYPE_IMG
- en: To learn more about EditorXR and Google Poly see this debut blog post by Matt
    Schoen of Unity Labs: [https://blogs.unity3d.com/2017/11/30/learn-how-googles-poly-works-with-unity-editorxr/](https://blogs.unity3d.com/2017/11/30/learn-how-googles-poly-works-with-unity-editorxr/).
    As a side note, Schoen is a friend and the co-author of another book from Packt,
    *Cardboard VR Projects for Android* (2016): [https://www.packtpub.com/application-development/cardboard-vr-projects-android](https://www.packtpub.com/application-development/cardboard-vr-projects-android).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we built a simple diorama, became more acquainted with the
    Unity editor, and learned about the importance of world scale in designing your
    scenes, including several in-game tools to help us work with scaling and positioning.
  prefs: []
  type: TYPE_NORMAL
- en: We then emphasized that Unity is not so much an asset creation tool. Developers
    typically use tools outside of Unity and then import their models. We introduced
    you to the free and open source Blender modeling app as well as Google Tilt Brush
    and showed you how to export assets and then import them into Unity, including
    cloud services like Google Poly.
  prefs: []
  type: TYPE_NORMAL
- en: One of the really cool things about developing for VR is how quickly things
    are changing. It's the burgeoning of a new industry, a new media, and new paradigms
    evolve year to year as VR comes into its own. New devices are being introduced
    every quarter. Unity is updated every month. New software tools are released every
    week. There are new things to do and learn every day. Of course, this can also
    be very frustrating. My advice is to not let this get to you, and rather embrace
    it.
  prefs: []
  type: TYPE_NORMAL
- en: One key to this is to continuously try new things. That’s what we tried to usher
    you through in this chapter. Come up with an idea, then see if you can get it
    to work. Try out new software. Learn a new Unity feature. Do things one at a time
    so you don't become overwhelmed. Of course, that's what this book is about. The
    journey is a continuous and adventurous one.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll set up your development system and Unity settings
    to build and run the project to play in your VR headset.
  prefs: []
  type: TYPE_NORMAL
