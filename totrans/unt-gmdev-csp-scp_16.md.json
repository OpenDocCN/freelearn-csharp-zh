["```cs\nusing UnityEngine; \nusing UnityEngine.UIElements;\npublic class UIToolkitExample : MonoBehaviour\n{\n  private void OnEnable()\n  {\n    // Get the root visual element from the current UI document\n    var root = GetComponent<UIDocument>()\n      .rootVisualElement;\n    // Create a new button\n    Button myButton = new Button();\n    myButton.text = \"Click Me!\";\n    // Register a click event\n    myButton.clicked += () => Debug.Log(\"Button Clicked!\");\n    // Add the button to the root element\n    root.Add(myButton);\n  }\n}\n```", "```cs\n<!-- UXML: Defining the Button -->\n<ui:Button text=\"Click Me!\" class=\"myButton\"/>\n```", "```cs\n/* USS: Styling the Button */\n.myButton {\n  width: 200px; height: 50px;\n  background-color: #4CAF50; font-size: 18px;\n}\n```", "```cs\nusing UnityEngine; \nusing UnityEngine.UIElements;\npublic class UIToolkitExample : MonoBehaviour\n{\n  private void OnEnable()\n  {\n    // Get the root visual element from the current UI document\n     var root = GetComponent<UIDocument>()\n      .rootVisualElement;\n    // Create a new Button\n    Button myButton = new Button();\n    myButton.text = \"Click Me!\";\n    // Add the button to the root element\n```", "```cs\nusing UnityEngine;\nusing UnityEngine.UIElements;\npublic class UIToolkitExample : MonoBehaviour\n{\n    private void OnEnable()\n    {\n        var root = GetComponent<UIDocument>().rootVisualElement;\n        // Create a button\n        Button myButton = new Button();\n        myButton.text = \"Click Me!\";\n        // Register a click event handler\n        myButton.clicked += () => Debug.Log(\"Button clicked!\");\n        // Add the button to the root element\n        root.Add(myButton);\n    }\n}\n```", "```cs\n/* USS: Styling the button */\n.myButton {\n  width: 150px; height: 40px;\n  background-color: #3498db; color: white;\n  font-size: 16px; border-radius: 5px;\n}\n```", "```cs\nusing UnityEngine;\nusing UnityEngine.UIElements;\npublic class UIToolkitExample : MonoBehaviour\n{\n  private void OnEnable()\n  {\n    var root = GetComponent<UIDocument>()\n      .rootVisualElement;\n    // Create a button and assign a class name for USS styling\n     Button myButton = new Button();\n    myButton.text = \"Styled Button\";\n    myButton.AddToClassList(\"myButton\");\n    // Add the button to the root element\n     root.Add(myButton);\n    // Load the USS file\n    var styleSheet = Resources\n          .Load<StyleSheet>(\"buttonStyle\");\n    root.styleSheets.Add(styleSheet);\n  }\n}\n```", "```cs\nusing UnityEngine;\nusing UnityEngine.InputSystem;\npublic class PlayerController : MonoBehaviour\n{\n  private Vector2 moveInput;\n  public float speed = 5f;\n  private CharacterController controller;\n  private void Start()\n    {\n      controller = GetComponent<CharacterController>();\n    }\n  }\n  // Input System event handler for the Move action\n  public void OnMove(InputAction.CallbackContext context)\n  {\n    moveInput = context.ReadValue<Vector2>();\n  }\n  private void Update()\n  {\n    // Convert the input vector into movement and apply it\n    Vector3 move = new Vector3(moveInput.x, 0, moveInput.y);\n    controller.Move(move * speed * Time.deltaTime);\n  }\n}\n```", "```cs\npublic void OnJump(InputAction.CallbackContext context)\n{\n  if (context.performed)\n  {\n    // Perform the jump action\n    Debug.Log(\"Player jumped!\");\n  }\n}\n```", "```cs\nusing UnityEngine;\nusing UnityEngine.SceneManagement;\npublic class SceneLoader : MonoBehaviour\n{\n  public void LoadNewScene(string sceneName)\n  {\n   // Asynchronously load the scene in the background\n    SceneManager.LoadSceneAsync(sceneName);\n  }\n}\n```", "```cs\nusing Unity.Jobs;\nusing UnityEngine;\npublic class JobExample : MonoBehaviour\n{\n  private struct SimpleJob : IJob\n  {\n    public void Execute()\n    {\n      // Perform heavy computation here\n      Debug.Log(\"Job executed!\");\n    }\n  }\n  void Start()\n  {\n    // Schedule the job to run on a worker thread\n    SimpleJob job = new SimpleJob();\n    JobHandle jobHandle = job.Schedule();\n    jobHandle.Complete(); // Ensure the job is finished before proceeding\n  }\n}\n```", "```cs\nusing Unity.Burst;\nusing Unity.Jobs;\nusing UnityEngine;\npublic class BurstExample : MonoBehaviour\n{\n  [BurstCompile]\n  struct ComplexCalculationJob : IJob\n  {\n    public void Execute()\n    {\n      // Perform complex calculations here\n    }\n  }\n  void Start()\n  {\n    ComplexCalculationJob job = new ComplexCalculationJob();\n    JobHandle jobHandle = job.Schedule();\n    jobHandle.Complete(); // Ensures the job completes before proceeding\n   }\n}\n```"]