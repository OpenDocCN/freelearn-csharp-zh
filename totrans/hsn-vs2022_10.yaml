- en: 'Chapter 8: Web Tools and Hot Reload'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visual Studio has many tools to work with .NET applications and all the Microsoft
    ecosystem, but it also has many tools for other programming languages and technologies.
    This includes web development technologies such as JavaScript, CSS, and HTML.
  prefs: []
  type: TYPE_NORMAL
- en: In Visual Studio 2022, there are also some new improvements that help us to
    code faster on the frontend side. This means design tools for web developers that
    work with CSS, JavaScript, and HTML. With these tools, you don't need to use other
    editors or IDEs to complete your activities while working with these technologies.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn about web tools in Visual Studio, and how to
    take advantage of them and simplify when we are developing some common statements.
    These tools will help you to generate code automatically, install and specify
    a version of web libraries, inspect the code in JavaScript, and refresh the application
    automatically to see the changes in real time.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will learn the following topics related to web tools:'
  prefs: []
  type: TYPE_NORMAL
- en: Using scaffolding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing JavaScript and CSS libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging in JavaScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hot Reload
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will start using scaffolding, which is the main tool for creating project
    files, using templates that are included by default in Visual Studio 2022.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To complete the demos of this book chapter, you must have previously installed
    Visual Studio 2022 with the web development workload, as shown in [*Chapter 1*](B17873_01_ePub.xhtml#_idTextAnchor013),
    *Getting Started with Visual Studio 2022*. It's important to have the SPA base
    project that was created in [*Chapter 4*](B17873_04_ePub.xhtml#_idTextAnchor052),
    *Creating Projects and Templates*.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can check the changes completed in this chapter at the following link:
    [https://github.com/PacktPublishing/Hands-On-Visual-Studio-2022/tree/main/Chapter08](https://github.com/PacktPublishing/Hands-On-Visual-Studio-2022/tree/main/Chapter08).'
  prefs: []
  type: TYPE_NORMAL
- en: Using scaffolding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Scaffolding is one of the most beneficial features for developers in Visual
    Studio. By using scaffolding, we can save time generating code automatically by
    just clicking on some options.
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s indispensable to clarify that scaffolding is a popular concept in software
    development, and this is not unique to Visual Studio. Normally, scaffolding is
    associated with the code generation of **model view controller** (**MVC**) components.
    MVC is a popular pattern for creating web applications. Using MVC, you must distribute
    the responsibilities for creating web applications into three different components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Model**: Responsible for saving the data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**View**: The interface that interacts with the user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Controller**: In charge of handling all the actions performed by the user
    in the view'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To use scaffolding in Visual Studio, you can select the folder in the solution
    explorer and right-click it to open the options to select **New Scaffolded Item…**
    (see *Figure 8.1*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1 – The New Scaffolded Item… option in the project menu'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.1_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.1 – The New Scaffolded Item… option in the project menu
  prefs: []
  type: TYPE_NORMAL
- en: Using this option, we have the possibility to create new elements in the project
    related to the MVC structure.
  prefs: []
  type: TYPE_NORMAL
- en: 'After clicking on **New Scaffolded Item…**, Visual Studio will provide a list
    of elements that we can create using the scaffolding tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.2 – The Add New Scaffolded Item modal options'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.02_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.2 – The Add New Scaffolded Item modal options
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, we will select `GET`, `POST`, `PUT` and `DELETE` verbs. Choose
    the name `GeneratedController.cs` and click on **Add**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.3 – Creating an API Controller with read/write actions'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.03_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.3 – Creating an API Controller with read/write actions
  prefs: []
  type: TYPE_NORMAL
- en: 'Visual Studio is going to generate a new controller in the `Controllers` folder
    with endpoints by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.4 – GeneratedController is created in the Controllers folder'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.4_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.4 – GeneratedController is created in the Controllers folder
  prefs: []
  type: TYPE_NORMAL
- en: After creating the base template, you can replace the data type and method names
    to match your model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create another example of a view page using scaffolding. Using the **Add
    New Scaffolded Item** option again, we will select **Razor View** (see *Figure
    8.5*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.5 – The Razor View option in Add New Scaffolded Item'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.05_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.5 – The Razor View option in Add New Scaffolded Item
  prefs: []
  type: TYPE_NORMAL
- en: 'There are some templates that we can pick, including **Empty**. In this case,
    you should select **Create**, uncheck the **Use a layout page** option, and select
    the **WeatherForecast** model (included by default in the template), as shown
    in *Figure 8.6*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.6 – Configuration to create a new view page using scaffolding'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.06_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.6 – Configuration to create a new view page using scaffolding
  prefs: []
  type: TYPE_NORMAL
- en: 'We can complete the creation process by clicking the `Pages` folder. Visual
    Studio will analyze the model and then create a new form for each property in
    the model, considering the property type (see *Figure 8.7*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.7 – A view created using scaffolding and the WeatherForecast model'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.7_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.7 – A view created using scaffolding and the WeatherForecast model
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `View.cshtml` file, we have a template for creating a new item from
    the **WeatherForecast** model. Scaffolding adds a label, an input, and span for
    control errors, as shown in this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: Scaffolding is related to ASP.NET code; we can create controllers and views
    but not JavaScript components.
  prefs: []
  type: TYPE_NORMAL
- en: Now you know how to use scaffolding in your projects and save time using some
    base templates provided by Visual Studio. Let's see another tool in Visual Studio
    that helps us to include JavaScript and CSS libraries in our projects.
  prefs: []
  type: TYPE_NORMAL
- en: Installing JavaScript and CSS libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To start a project, we can use a template from Visual Studio to easily create
    a **proof of concept** (**POC**), demo, or base project, but there is a probability
    of the project growing in functionalities and services. In this scenario, we will
    have to include libraries to potentialize and optimize our project and extend
    the functions incorporated in the base template.
  prefs: []
  type: TYPE_NORMAL
- en: 'To include a new JavaScript library in our SPAProject, you can open `ClientApp`
    folder. In the menu, you will find the **Client-Side Library…** option (see *Figure
    8.8*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.8 – The Client-Side Library… functionality in Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.08_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.8 – The Client-Side Library… functionality in Visual Studio
  prefs: []
  type: TYPE_NORMAL
- en: 'After clicking on this option, you will get a modal that allows you to include
    web libraries from different resources. By default, **cdnjs** is selected, but
    you can also choose the other sources supported by Visual Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.9 – Providers supported by Visual Studio 2022'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.09_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.9 – Providers supported by Visual Studio 2022
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three public and trusted libraries for CSS and JavaScript that we
    can include in our projects. Visual Studio has support for different library sources;
    let''s review them:'
  prefs: []
  type: TYPE_NORMAL
- en: '**cdnjs**: Fast and reliable content delivery for an open source library supported
    by Cloudflare'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**filesystem**: Custom packages in our local system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**jsdelivr**: Free content delivery network integrated with GitHub and npm'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`libman.json` file manually, include the libraries in the json file, and then
    install them using Visual Studio. For more information, you can check [https://docs.microsoft.com/aspnet/core/client-side/libman/libman-vs](https://docs.microsoft.com/aspnet/core/client-side/libman/libman-vs).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To analyze how Visual Studio adds a library to your project, you should select
    **cdnjs** and search by **bootstrap.** Bootstrap is a powerful library to create
    web interfaces easily using CSS classes. For more information, you can check the
    official documentation and quick-start guides at [https://getbootstrap.com/](https://getbootstrap.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you start typing, Visual Studio will suggest a list of libraries to which
    the written keyword is related (see *Figure 8.10*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.10 – Libraries suggested by Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.10_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.10 – Libraries suggested by Visual Studio
  prefs: []
  type: TYPE_NORMAL
- en: 'After selecting `bootstrap@5.1.3` (see *Figure 8.11*). You can choose all the
    components associated with the library, but normally you only use the minify version.
    You can select only the files that you need, using the `bootstrap.min.js` file,
    which is the only file required to use this library:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.11 – The Bootstrap library selected and the bootstrap.min.js file
    picked'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.11_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.11 – The Bootstrap library selected and the bootstrap.min.js file picked
  prefs: []
  type: TYPE_NORMAL
- en: Now, you can click on **Install** to include Bootstrap in our project.
  prefs: []
  type: TYPE_NORMAL
- en: 'After installing this library, you will see a new folder that contains all
    the files related to Bootstrap in the `ClientApp` folder. Also, you will see a
    new file called `libman.json` that contains the libraries installed in the project
    using Visual Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.12 – The Bootstrap library added in SPAProject'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.12_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.12 – The Bootstrap library added in SPAProject
  prefs: []
  type: TYPE_NORMAL
- en: This file helps Visual Studio to get the libraries from the servers when the
    project doesn't have the files for these libraries in the repository.
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio will execute all the processes automatically and create the `libman.json`
    file, where we can see the version of each library and the destination folder
    in the project.
  prefs: []
  type: TYPE_NORMAL
- en: You now know how to include JavaScript and CSS libraries in your project using
    the different options supported by Visual Studio. Let's learn how to debug JavaScript
    code in Visual Studio to find and resolve issues quickly in the development process.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging in JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We must debug a project when there is strange behavior, an issue, or a blocker
    in our application. Visual Studio supports debugging for many programming languages,
    including JavaScript. This is a great feature, given that we can debug the frontend
    side (for example, with JavaScript) and the backend side (for example, with C#)
    using the same IDE.
  prefs: []
  type: TYPE_NORMAL
- en: 'To debug JavaScript and TypeScript code using Visual Studio, we need to check
    the **Script Debugging (Enabled)** option. This option is on the execution menu
    of the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.13 – The Script Debugging (Enabled) option in the project execution
    menu'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.13_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.13 – The Script Debugging (Enabled) option in the project execution
    menu
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we can run the project in debug mode, but before that, we need to add
    a break to inspect the code. Navigate to `ClientApp` | `src` | `components` |
    `Counter.js` and create a new breakpoint in line number 13 (see *Figure 8.14*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.14 – A breakpoint in the incrementCounter method inside Counter.js'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.14_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.14 – A breakpoint in the incrementCounter method inside Counter.js
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, execute the project using the option in the banner or press *F5* and then
    navigate to the counter module. Once you click on `incrementCounter` method in
    JavaScript. In *Figure 8.15*, you can see this expected behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.15 – The debugging process in the incrementCounter method with the
    breakpoint'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.15_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.15 – The debugging process in the incrementCounter method with the
    breakpoint
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, we can inspect the variables in this file – for example, in
    *Figure 8.16*, we can see the values of `Counter.name` and `currentCount`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.16 – The inspection of Counter.name and currentCount during debugging'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.16_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.16 – The inspection of Counter.name and currentCount during debugging
  prefs: []
  type: TYPE_NORMAL
- en: '`Counter.name` equals `"Counter"` and `currentCount` equals `0`. After executing
    the `incrementCounter` async method, the variable in the `currentCount` state
    will have a value of `1`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use the options to execute the lines of code step by step related to
    the workflow for inspecting the variables, as shown in *Figure 8.17*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.17 – Step Over and tools for the debug process'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.17_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.17 – Step Over and tools for the debug process
  prefs: []
  type: TYPE_NORMAL
- en: You can now debug JavaScript code in Visual Studio and use the same tools and
    actions that we reviewed in [*Chapter 5*](B17873_05_ePub.xhtml#_idTextAnchor060),
    *Debugging and Compiling Your Projects*.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will review a new functionality in Visual Studio 2022
    to refresh the UI after performing changes in the code.
  prefs: []
  type: TYPE_NORMAL
- en: Hot Reload
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For many years, C# developers were waiting for a feature that would allow them
    to see real-time changes in web applications. The big challenge with this was
    the naturalness of C# as a programming language because C# is a compiled language.
    A compiled language needs to be converted to a low-level language for use by an
    interpreter, and this process consumes time and resources in a machine. In *Figure
    8.18*, you can see a new flame-shaped icon. After clicking on this icon, you will
    refresh the changes in the browser, or you can select the **Hot Reload on File
    Save** option to reload a web application automatically after saving changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.18 – The Hot Reload option in Visual Studio enabled during the execution'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.18_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.18 – The Hot Reload option in Visual Studio enabled during the execution
  prefs: []
  type: TYPE_NORMAL
- en: 'The Hot Reload feature has some settings that we can modify according to our
    needs. You can access the features using the **Settings** option when the Hot
    Reload button is enabled, or you can navigate to **Tools** | **Options** | **Debugging**
    | **.NET / C++ Hot Reload**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.19 – The settings for Hot Reload in Visual Studio 2022'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.19_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.19 – The settings for Hot Reload in Visual Studio 2022
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s review these options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Enable Hot Reload and Edit and Continue when debugging**: This option enables
    Hot Reload in debug mode.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enable Hot Reload when starting without debugging**: This option enables
    hot reload without debugging.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Apply Hot Reload on File Save**: After performing a change in any file and
    saving it, the application will reload.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you do not enable the **Apply Hot Reload on File Save** option, you need
    to use the hot reload button to refresh the web application and see the changes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To test this functionality in Visual Studio, you can run a project by pressing
    *F5* or using the option in the `NavMenu.js` file and change the name of `NavLink`
    from `Counter` to `Counter Module`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.20 – The Counter Module NavLink in NavMenu.js'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.20_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.20 – The Counter Module NavLink in NavMenu.js
  prefs: []
  type: TYPE_NORMAL
- en: 'After saving the file using *Ctrl* + *S* or the **File** - > **Save All** menu,
    you will see the change in real time in the web browser. Check the changes shown
    in *Figure 8.21*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.21 – Checking the changes in the UI related to Counter Module'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.21_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.21 – Checking the changes in the UI related to Counter Module
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: The wait time to see the changes in the browser depends on the project size
    and machine resources. Normally, it doesn't take more than 2 or 3 seconds.
  prefs: []
  type: TYPE_NORMAL
- en: We don't need to include a library in the project or install an extension in
    Visual Studio to use this amazing functionally. Hot reload is supported for all
    the web projects, including ASP.NET MVC, SPA with React and Angular (such as our
    SPAProject), and Blazor.
  prefs: []
  type: TYPE_NORMAL
- en: You can now use Hot Reload in your web project to improve your productivity
    when you are coding and need to test the changes in the UI quickly.
  prefs: []
  type: TYPE_NORMAL
- en: This brings us to the end of this chapter. Let's now review what we learned.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, you are ready to take advantage of the web tools in Visual Studio to code
    faster and improve the quality of your code. With scaffolding, we have the possibility
    to create components for an MVC model easily. Visual Studio generates the code
    using a template with simple sample code.
  prefs: []
  type: TYPE_NORMAL
- en: You also learned how to include JavaScript and CSS libraries using the tools
    included in Visual Studio. Using these tools, you know how to select the right
    version of the library and upgrade dependencies in the future.
  prefs: []
  type: TYPE_NORMAL
- en: If there is an issue or strange behavior in the code, you can now use JavaScript
    debugging to analyze the code deeper and execute the code step by step, inspecting
    the values of the variables and workflows.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you learned how to use hot reload in Visual Studio 2022 to refresh
    the application when you are debugging and see the changes performed in the code
    in real time.
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 9*](B17873_09_ePub.xhtml#_idTextAnchor108), *Styling and Cleanup
    Tools*, we will continue learning about tools included in Visual Studio that improve
    our experience working with styles and CSS. We will also use some tools to clean
    up code by choosing a specific file or a whole project.
  prefs: []
  type: TYPE_NORMAL
