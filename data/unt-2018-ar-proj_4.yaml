- en: The Sound of Flowery Prose
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 花草丛中的声音
- en: In this chapter, we will design and create our first AR application with macOS
    and utilize ARKit. This will be an application that utilizes a touch sensor and
    camera sensors in tandem to initiate sound clips from various literary sources.
    This will serve as a fantastic introduction to programming and setting up Unity
    to work with the AR tools available to us. This will also allow us to utilize
    the built-in functions provided for using the camera sensor and the touch sensor.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将设计和创建我们的第一个AR应用程序，使用macOS和利用ARKit。这将是一个利用触摸传感器和摄像头传感器协同工作，从各种文学来源中启动声音片段的应用程序。这将作为编程和设置Unity以使用我们可用的AR工具的绝佳介绍。这将使我们能够利用内置的用于使用摄像头传感器和触摸传感器的功能。
- en: 'In this chapter, we''ll cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Conceptualizing the project
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目构思
- en: Setting up the Unity project
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置Unity项目
- en: Code implementation details
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码实现细节
- en: Working with XCode
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用XCode
- en: Project overview
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目概述
- en: The concept of this application is to be able to select anywhere in the video
    feed of the camera, and it will read a random passage from a poem or book based
    on the lighting of the area. The build time is approximately 30 minutes.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用程序的概念是能够在摄像头的视频流中的任何地方进行选择，并且它将根据该区域的照明读取一首诗或书籍的随机段落。构建时间大约为30分钟。
- en: Getting started
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: 'The following are the software prerequisites:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为软件先决条件：
- en: XCode
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XCode
- en: Unity 2018 for Mac
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity 2018 for Mac
- en: ARKit
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ARKit
- en: Visual Studio for Mac
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio for Mac
- en: MonoFramework
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MonoFramework
- en: 'The software can be downloaded from the following websites:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 软件可以从以下网站下载：
- en: '[https://store.unity.com/](https://store.unity.com/)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://store.unity.com/](https://store.unity.com/)'
- en: '[https://developer.apple.com/arkit/](https://developer.apple.com/arkit/)'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://developer.apple.com/arkit/](https://developer.apple.com/arkit/)'
- en: '[https://www.visualstudio.com/](https://www.visualstudio.com/)'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.visualstudio.com/](https://www.visualstudio.com/)'
- en: '[http://www.mono-project.com/download/stable/](http://www.mono-project.com/download/stable/)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.mono-project.com/download/stable/](http://www.mono-project.com/download/stable/)'
- en: 'The following are the minimum hardware requirements:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是最小硬件要求：
- en: 2011 or newer Mac computer
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2011年或更新的Mac电脑
- en: 8 GB of RAM
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 8 GB的RAM
- en: Conceptualizing the project
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目构思
- en: 'Before building any game or application, it should always be a first step to
    know exactly what you want to build. You don’t have to know the exact implementation
    details, just what you want to build and how you want to go about building it.
    This should include the following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建任何游戏或应用程序之前，了解你确切想要构建的内容始终是第一步。你不需要知道确切的实现细节，只需知道你想要构建的内容以及你打算如何构建它。这应该包括以下内容：
- en: Basic idea/concept
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本想法/概念
- en: Programming language to use
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要使用的编程语言
- en: Platform to release on
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平台发布选择
- en: Game engine or libraries/frameworks to use
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要使用的游戏引擎或库/框架
- en: Design document/design outline
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计文档/设计大纲
- en: Written or code implementation prototype for proof of concept
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于证明概念的书面或代码实现原型
- en: Now, why are these points so important? They are important because it helps
    solidify the idea, gives a clear path for what you want to accomplish, and most
    importantly, proves that the project is possible to build. Let’s dive into each
    point and use them to build our first AR application.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为什么这些点如此重要？它们之所以重要，是因为它有助于巩固想法，为你想要实现的内容提供清晰的路径，最重要的是，证明项目是可构建的。让我们深入每个点，并使用它们来构建我们的第一个AR应用程序。
- en: Basic idea/concept
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本想法/概念
- en: The basic idea or concept of an application or game should not be any more than
    a paragraph explaining what you want to create. It isn’t meant to explain the
    full features or everything you want that to be in the application or game. Rather,
    it is only meant as a basic starting point that says that this is the overall
    idea that you want to work on.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序或游戏的基本想法或概念不应超过一个段落，解释你想要创建的内容。它不是用来解释完整的功能或你希望在应用程序或游戏中包含的所有内容。相反，它只作为一个基本的起点，表明这是你想要工作的整体想法。
- en: This is important because it is the core of the application or game idea, and
    you can define what the main features of the app or game are and give a clear
    point of reference for researching.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这很重要，因为它是应用程序或游戏想法的核心，你可以定义应用程序或游戏的主要功能，并为研究提供一个清晰的参考点。
- en: Our basic concept is to be able to select anywhere in the video feed of the
    camera and it will read a random passage from a poem or book based on the lighting
    of the area. Now, this doesn’t go too much into depth on what the application
    will do, but we can use this as the basis for the fourth step to expand upon the
    basic idea to create a fully functional and detailed explanation of the application.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的基本概念是能够在摄像头的视频流中的任何位置进行选择，然后根据该区域的光线读取一首诗或书籍的随机段落。现在，这并没有深入探讨应用程序将做什么，但我们可以以此为基础，在第四步中扩展基本想法，创建一个功能齐全且详细的解释。
- en: Choosing the right programming language
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择合适的编程语言
- en: This choice is not always obvious when developing an application or a game.
    While your own knowledge does play a major role in choosing the language to use,
    so do the requirements of the application or game and your team’s knowledge. This
    step should be done in tandem with the next step before finalizing the decision,
    as your research may determine that the language that you prefer doesn’t have
    the proper libraries or capabilities for developing the particular game or application
    you want.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发应用程序或游戏时，这个选择并不总是那么明显。虽然您自己的知识在选择要使用的语言时起着重要作用，但应用程序或游戏的需求以及您团队的知识也同样重要。在最终确定决策之前，这一步应该与下一步同时进行，因为您的研究可能会确定您偏好的语言可能没有为开发您想要的特定游戏或应用程序提供适当的库或功能。
- en: Luckily for us, our example will be using C#.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，我们的示例将使用C#。
- en: Choosing your release platform
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择您的发布平台
- en: This one is rather straightforward. Do you want to release on Android, iOS,
    Windows, or some other platform?  This will determine which language to select
    to use as well as which game engine or libraries/frameworks we need – which leads
    us to the next section.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这一点相当直接。您是想在Android、iOS、Windows还是其他平台上发布？这将决定您需要选择哪种语言以及我们需要哪种游戏引擎或库/框架——这引出了下一个部分。
- en: Choosing your game engine, libraries, and frameworks
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择您的游戏引擎、库和框架
- en: As stated previously, this step should be done in tandem with the previous steps
    as they are intrinsically tied together. This step requires you to do in-depth
    and highly detailed research into what you wrote for the basic idea/concept. Not
    only are you looking to see if what you want to do is possible, but also whether
    or not the language, game engine, or library/ framework you want to use supports
    it. This also requires you to know which platform you want to release on.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，这一步应该与前面的步骤同时进行，因为它们本质上是相互关联的。这一步要求您对基本想法/概念进行深入和高度详细的研究。您不仅要查看您想要做的事情是否可行，还要了解您想要使用的语言、游戏引擎或库/框架是否支持它。这也要求您知道您想要在哪个平台上发布。
- en: With the basic idea of this application, we know that it would require utilizing
    the camera and having touch events to detect whether something is lit well enough
    or not to determine whether or not it should play the audio file.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 根据这个应用程序的基本想法，我们知道它将需要利用摄像头并处理触摸事件来检测某个区域是否光线充足，从而确定是否播放音频文件。
- en: Developing the game design and application design document
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发游戏设计和应用程序设计文档
- en: 'The design document is more of a design specification document that describes
    the application in its entirety. That means that all of the data-, architectural-,
    interface-, and component-level design is described for it. The following example
    showcases how the documentation would look. You can download a copy of the template
    from [http://ec.europa.eu/idabc/servlets/Doc7e17.doc?id=18632](http://ec.europa.eu/idabc/servlets/Doc7e17.doc?id=18632):'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 设计文档更像是一个设计规范文档，它描述了整个应用程序。这意味着所有数据级、架构级、界面级和组件级的设计都为其进行了描述。以下示例展示了文档的样式。您可以从[http://ec.europa.eu/idabc/servlets/Doc7e17.doc?id=18632](http://ec.europa.eu/idabc/servlets/Doc7e17.doc?id=18632)下载模板的副本：
- en: '![](img/3dfccba7-eb64-4f7f-99fb-832e5792dd2b.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3dfccba7-eb64-4f7f-99fb-832e5792dd2b.png)'
- en: Technical design template
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 技术设计模板
- en: 'For game design, the design document can be a bit more involved than it is
    for applications. A typical game design document will require the sections described
    to be filled out in as much detail as possible. You can download a copy of the
    template from [https://docs.google.com/document/d/1-I08qX76DgSFyN1ByIGtPuqXh7bVKraHcNIA25tpAzE/edit](https://docs.google.com/document/d/1-I08qX76DgSFyN1ByIGtPuqXh7bVKraHcNIA25tpAzE/edit):'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 对于游戏设计，设计文档可能比应用程序更复杂。典型的游戏设计文档将需要尽可能详细地填写所描述的章节。您可以从 [https://docs.google.com/document/d/1-I08qX76DgSFyN1ByIGtPuqXh7bVKraHcNIA25tpAzE/edit](https://docs.google.com/document/d/1-I08qX76DgSFyN1ByIGtPuqXh7bVKraHcNIA25tpAzE/edit)
    下载模板的副本：
- en: '![](img/d7dcc1ed-2bd3-4a19-9e16-52d59143dd5e.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d7dcc1ed-2bd3-4a19-9e16-52d59143dd5e.png)'
- en: Game design template
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏设计模板
- en: Now, you might be thinking that this is a lot of work for applications or games.
    The key to success is never wrought from laziness or pure luck. In creating documentation
    that has as much depth as this, you are ensuring that you know exactly what you
    need to do and why you need to do it, and if you bring on team members, they will
    be able to read the document and fully understand your goals and intentions with
    little input from you.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可能认为这对于应用程序或游戏来说工作量很大。成功的关键永远不会来自懒惰或纯粹的运气。在创建如此深入的文档时，您确保自己确切地知道需要做什么以及为什么需要这样做，如果您招募团队成员，他们可以阅读文档并充分理解您的目标和意图，而无需您提供太多输入。
- en: This also means that you can keep yourself firmly in line with the project,
    forcing you not to add little pet features except as extra milestones after the
    project has reached the completion mark.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这也意味着您可以确保自己始终与项目保持一致，迫使您不要添加任何小宠物功能，除非在项目达到完成标志后作为额外的里程碑。
- en: Bonus – UML design
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 奖励 – UML 设计
- en: '**Unified Modeling Language** (**UML**) is a great way for visualizing the
    design of your application or game. NClass is a free UML editor that you can download
    and use.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**统一建模语言**（**UML**）是可视化您应用程序或游戏设计的一种绝佳方式。NClass 是一个免费的 UML 编辑器，您可以下载并使用它。'
- en: 'You can preplan all of your methods, attributes, properties, classes, and enums
    – pretty much everything related to programming – with UML. UML really helps for
    the next phase, which is actually to implement the prototype:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 UML 预先规划所有的方法、属性、属性、类和枚举——几乎与编程相关的所有内容。UML 真正有助于下一阶段，即实际实现原型：
- en: '![](img/a3ec8f00-dc55-45c4-aac0-e11468358eb0.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a3ec8f00-dc55-45c4-aac0-e11468358eb0.png)'
- en: 'Further planning of implementations can be seen in the following screenshot:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 实现的进一步规划可以在以下屏幕截图中看到：
- en: '![](img/deb58ef5-d4db-4609-8cad-6ae320d995e0.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/deb58ef5-d4db-4609-8cad-6ae320d995e0.png)'
- en: Prototyping
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 原型设计
- en: Now, our proof of concept will actually be the full project, although for your
    own projects in the future, run a small-scale implementation to make sure the
    features that are 100% necessary are able to be implemented and work appropriately.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的概念验证实际上将是完整的项目，尽管对于您未来的项目，运行小规模实现以确保100%必要的功能能够得到实现并适当工作。
- en: The reason for this is that, if for any reason you are unable to implement the
    main feature of the app or game, you haven’t wasted as much time or money on the
    project as you would have done by implementing on a larger scale.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这也意味着，如果由于任何原因您无法实现应用程序或游戏的主要功能，您在项目上浪费的时间和金钱将不会像在大规模实现上那样多。
- en: Setting up the Unity project
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Unity 项目
- en: 'The very first thing we are going to do is set Unity up on our Mac computer
    to be able to create our project. Since we know we will need ARKit, which only
    works on macOS, we will have different projects for the different chapters, as
    we don’t want any compilation issues:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要做的第一件事是在我们的 Mac 计算机上设置 Unity，以便能够创建我们的项目。由于我们知道我们需要 ARKit，它只能在 macOS 上运行，我们将为不同的章节有不同的项目，因为我们不希望有任何编译问题：
- en: 'Let’s create a new project, and we will call it `Chapter4` or `Sound of Flowery
    Prose`:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个新的项目，我们将称之为 `Chapter4` 或 `Sound of Flowery Prose`：
- en: '![](img/2895fa74-0261-4334-b594-178fb6f9e9a1.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2895fa74-0261-4334-b594-178fb6f9e9a1.png)'
- en: 'Next up, we need to click on the store and search for ARKit to download and
    add it to our project:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要点击商店并搜索 ARKit 以下载并将其添加到我们的项目中：
- en: '![](img/be5d09b1-cff2-4e0c-8a8a-be69c847a492.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/be5d09b1-cff2-4e0c-8a8a-be69c847a492.png)'
- en: 'I am a bit of a stickler for organization, so we have to make sure to set up
    all the empty game objects we need to keep things organized. So, we will have
    four empty game objects called `CameraParent`, `ARKitControl`, `ARCameraManager`,
    and `HitCubeParent`. Your project should look like the one in the following screenshot:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我对组织有点挑剔，所以我们必须确保设置好所有必要的空游戏对象以保持事物有序。因此，我们将有四个空游戏对象，分别命名为`CameraParent`、`ARKitControl`、`ARCameraManager`和`HitCubeParent`。你的项目应该看起来像下面截图中的那样：
- en: '![](img/7770fba0-9342-4566-8dbd-83b723056d6b.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7770fba0-9342-4566-8dbd-83b723056d6b.png)'
- en: 'Drag the camera into the `CameraParent` empty game object:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将相机拖入`CameraParent`空游戏对象中：
- en: '![](img/54949066-801d-4c77-816a-24ed79ea76e5.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/54949066-801d-4c77-816a-24ed79ea76e5.png)'
- en: 'Create a `Cube` and drag the `Cube` into the `HitCubeParent` object:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`Cube`并将`Cube`拖入`HitCubeParent`对象中：
- en: '![](img/06a111dd-30b1-4af7-8005-fba19ff87c25.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/06a111dd-30b1-4af7-8005-fba19ff87c25.png)'
- en: 'Now that we have Unity basically set up as required, we can move on to creating
    and attaching the scripts we need for the project:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经基本按照要求设置了Unity，我们可以继续创建和附加项目所需的脚本：
- en: Click on the Camera component – we have two scripts we need to add to it. The
    first script is Unity AR Camera Near-Far, and the second is Unity AR Video.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击相机组件——我们需要向其中添加两个脚本。第一个脚本是Unity AR Camera Near-Far，第二个是Unity AR Video。
- en: 'The Unity AR Video also needs a clear material, so let’s set that to be `YUVMaterial`:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Unity AR Video也需要一个清晰的材质，所以让我们将其设置为`YUVMaterial`：
- en: '![](img/2f596d7e-5dac-4788-8994-5d1ce920f470.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2f596d7e-5dac-4788-8994-5d1ce920f470.png)'
- en: '`ARCameraManager` needs the appropriate script attached to it – in this case,
    it is called the Unity AR Camera Manager:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ARCameraManager`需要附加适当的脚本——在这种情况下，它被称为Unity AR Camera Manager：'
- en: '![](img/9aa20bbb-8710-46e0-bdb4-7dfc25a72516.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9aa20bbb-8710-46e0-bdb4-7dfc25a72516.png)'
- en: '`ARKitControl` also needs a script attached to it, and it is called Unity AR
    Kit Control:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ARKitControl`也需要附加一个脚本，该脚本称为Unity AR Kit Control：'
- en: '![](img/7f98587a-bb2c-4d96-9902-64877d31ff92.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7f98587a-bb2c-4d96-9902-64877d31ff92.png)'
- en: The final thing we need to do is set up our `Cube` from inside the `HitCubeParent`
    object to have a brand new script created for it.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要做的最后一件事是在`HitCubeParent`对象内部设置我们的`Cube`，并为它创建一个新的脚本。
- en: 'Click on the `Cube` object and select Add Component | Script | New Script.
    The name should be `ARHitCube`:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`Cube`对象，选择添加组件 | 脚本 | 新脚本。名称应该是`ARHitCube`：
- en: '![](img/2ad46cfa-c76c-4bde-bc16-2846b1ba37db.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ad46cfa-c76c-4bde-bc16-2846b1ba37db.png)'
- en: Code implementation details
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码实现细节
- en: Obviously, the most important part of any project is actually to implement what
    we want to accomplish. We want this project to play a literary quote from a list
    of audio samples automatically. To do this, we need an audio source and audio
    clips. We also want this project to take advantage of ARKit to run, so we need
    to write a C# class that utilizes features from the ARKit plugin that is exposed
    from the Objective-C and C++ libraries.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，任何项目的最重要部分实际上是实现我们想要完成的事情。我们希望这个项目能够自动播放从音频样本列表中的文学引文。为此，我们需要一个音频源和音频剪辑。我们还希望这个项目利用ARKit来运行，因此我们需要编写一个C#类，该类利用从Objective-C和C++库中公开的ARKit插件的功能。
- en: 'Let’s open up the `ARHitCube` class, fill in the details, and explain what
    is happening at the same time. I should note that very similar code is already
    provided in the script file called `UnityARHitTestExample`; I created this script
    to be able to show only what is needed and to be able to explain the workflow/thoughts
    necessary for creating the functionality we need:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们打开`ARHitCube`类，填写详细信息，并同时在解释正在发生的事情。我应该注意的是，非常相似的代码已经提供在名为`UnityARHitTestExample`的脚本文件中；我创建了这个脚本，以便能够只显示所需的内容，并能够解释创建所需功能所需的工作流程/思想：
- en: '[PRE0]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As per usual, we will only call the specific namespaces we need for our project.
    In this case, it is `System` and `System.Collections.Generic`:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如同往常，我们只会调用我们项目所需的特定命名空间。在这种情况下，是`System`和`System.Collections.Generic`：
- en: '[PRE1]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Our namespace will be used to organize our code to make sure it stays separate
    from ARKit and Unity’s API, which will avoid naming collisions:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用命名空间来组织我们的代码，以确保它与ARKit和Unity的API保持分离，这将避免命名冲突：
- en: '[PRE2]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Our class will inherit from `MonoBehavior`, as we want to be able to use it
    directly from the object (as well as make sure it can be attached to the game
    object).
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的这个类将继承自`MonoBehavior`，因为我们希望能够直接从对象中使用它（以及确保它可以附加到游戏对象上）。
- en: 'We create a public transform to allow us to track locations and a public array
    of audio clips more easily:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建了一个公共变换以使我们能够更容易地跟踪位置，以及一个公共音频剪辑数组：
- en: '[PRE3]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We create a `Boolean` method type that has the parameters of `ARPoint` and `ARHitTestResultType`.
    Both of these are exposed by ARKit, and you can read the documentation for them
    or look at the source in Unity to gain a better understanding of it. The simplified
    explanation is that `ARPoint` is a point coordinate derived from a Vector 3 value,
    and `ARHitTestResultType` is an enum with the possible results being `ARHitTestResultTypeFeaturePoint`,
    `ARHitTestResultTypeEstimatedHorizontalPlane`, `ARHitTestResultTypeEstimatedVerticalPlane`, `ARHitTestResultTypeExistingPlane`, `ARHitTestResultTypeExistingPlaneUsingExtent`,
    and `ARHitTestResultTypeExistingPlaneUsingGeometry`.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建了一个具有`ARPoint`和`ARHitTestResultType`参数的`Boolean`方法类型。这两个都是ARKit暴露的，你可以阅读它们的文档或查看Unity中的源代码以更好地理解它们。简而言之，`ARPoint`是从Vector
    3值派生出的点坐标，而`ARHitTestResultType`是一个枚举，可能的返回值有`ARHitTestResultTypeFeaturePoint`、`ARHitTestResultTypeEstimatedHorizontalPlane`、`ARHitTestResultTypeEstimatedVerticalPlane`、`ARHitTestResultTypeExistingPlane`、`ARHitTestResultTypeExistingPlaneUsingExtent`和`ARHitTestResultTypeExistingPlaneUsingGeometry`。
- en: 'We create a list called `hitResults` which is going to be set to be `UnityARSessionNativeInterface`.
    `GetARSessionNativeInterface().HitTest` with the parameters being point and result
    types filled in. What this does is create a list every time a native interface
    hit test is registered and stores the values:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建了一个名为`hitResults`的列表，它将被设置为`UnityARSessionNativeInterface.GetARSessionNativeInterface().HitTest`，参数为点和结果类型填充。这样做是每次注册原生接口碰撞测试时创建一个列表，并存储值：
- en: '[PRE4]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Next up, we do an `if` check to verify that the count is greater than `0`. If
    it isn’t greater than `0`, return as false, otherwise proceed to the `foreach`
    loop. Inside of the `foreach` loop, we check all of the hit results and log the
    results. The `HitTransform` position will always be set to be `UnityARMatrixOps.GetPosition`
    with the parameter being the `hitresult.worldTransform`.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们进行一个`if`检查，以验证计数是否大于`0`。如果不是大于`0`，则返回`false`，否则进入`foreach`循环。在`foreach`循环内部，我们检查所有碰撞结果并记录结果。`HitTransform`的位置将始终设置为`UnityARMatrixOps.GetPosition`，参数为`hitresult.worldTransform`。
- en: 'The `HitTransform` rotation will also always be set to be `UnityARMatrixOps.GetRotation`
    with the parameter being the `hitresult.worldtransform`. We end by returning true.
    Essentially, all this function does is detect whether a hit is registered or not
    and passes information to the correct areas that need the information:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`HitTransform`的旋转也将始终设置为`UnityARMatrixOps.GetRotation`，参数为`hitresult.worldtransform`。我们最后返回`true`。本质上，这个函数所做的只是检测是否有碰撞被注册，并将信息传递到需要这些信息的正确区域：'
- en: '[PRE5]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The first thing we want to do is check whether or not the `input.touchcount`
    is `0` and the `HitTransform` is not equal to null. If either of these checks
    fails, then we aren’t going to be able to retrieve the information we need.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先要检查`input.touchcount`是否为`0`，以及`HitTransform`是否不等于`null`。如果这两个检查中的任何一个失败，我们就无法检索到所需的信息。
- en: 'We set a touch variable to be `input.gettouch` with the parameter being `0`.
    `0` is the basic tap gesture:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将触摸变量设置为`input.gettouch`，参数为`0`。`0`是基本点击手势：
- en: '[PRE6]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `if` touch phase statement here is a check to see which touch phase is being
    initialized. The began touch phase is what we want, as it is the starting location
    of touch events.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这里`if`触摸阶段语句是一个检查以查看初始化的是哪种触摸阶段。开始触摸阶段是我们想要的，因为它是触摸事件的起始位置。
- en: 'We created a screen position variable and set it to be the camera screen to
    viewport point, with the parameter filled out being the touch position:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建了一个屏幕位置变量，并将其设置为相机屏幕到视口点，参数填充为触摸位置：
- en: '[PRE7]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'ARPoint point is set to be a new ARPoint, and we want the *x* value to be the
    screen position’s `x` value and the `y` value to be the screen position’s *y*
    value:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ARPoint点设置为一个新的ARPoint，我们希望*x*值是屏幕位置的`x`值，而*y*值是屏幕位置的*y*值：
- en: '[PRE8]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`ARHitTestResultType` is an array called result types. We want to make sure
    that the hit test result types are understood, and in this case, we have three
    types to use: `ExistingPlaneUsingExtent`, `HorizontalPlane`, and `FeaturePoint`:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ARHitTestResultType`是一个名为结果类型的数组。我们想确保理解碰撞测试结果类型，在这种情况下，我们有三种类型可以使用：`ExistingPlaneUsingExtent`、`HorizontalPlane`和`FeaturePoint`：'
- en: '[PRE9]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We can now do a final `foreach` loop on the `ARHitTestResultType` and create
    an `if` statement to check the `HitTestWithResultType` with the parameters filled
    with the point and `resultType`. This essentially just checks to see if the proper
    touch events have occurred, and if they have, then it activates the play method.
    Upon another touch event, it will stop the media that was playing. Following that,
    we return to break from the loop.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以对 `ARHitTestResultType` 执行最终的 `foreach` 循环，并创建一个 `if` 语句来检查带有参数的点 `HitTestWithResultType`
    和 `resultType`。这实际上只是检查是否发生了适当的触摸事件，如果发生了，则激活播放方法。在另一个触摸事件之后，它将停止正在播放的媒体。随后，我们返回并跳出循环。
- en: 'We can go back to the Unity Editor and look at the cube object''s attached
    script:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以回到 Unity 编辑器，查看附加在立方体对象上的脚本：
- en: '![](img/05ab403d-3222-4cdc-a480-32c754a51b7f.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/05ab403d-3222-4cdc-a480-32c754a51b7f.png)'
- en: 'We can attach our `Cube` to be the Hit Transform as when we tap, this will
    be the registered object to read the information:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以将 `Cube` 附加为击中变换，因为我们点击时，这将是我们读取信息的注册对象：
- en: '![](img/bd520666-9f14-4c92-852f-2b619b7dbd1e.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bd520666-9f14-4c92-852f-2b619b7dbd1e.png)'
- en: 'We can now build this project:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以构建这个项目：
- en: 'To do this, click on File and Build Settings. We will be utilizing iOS as the
    platform:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要这样做，请点击文件并选择构建设置。我们将使用 iOS 作为平台：
- en: '![](img/d26f7bc0-3cc6-45e1-9ab1-eece6e8acce0.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d26f7bc0-3cc6-45e1-9ab1-eece6e8acce0.png)'
- en: In Player Settings, we need to change our app’s name in the Bundle Identifier
    area and write a small description in the camera usage description.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在玩家设置中，我们需要在捆绑标识符区域更改我们应用程序的名称，并在相机使用描述中写一个简短的描述。
- en: 'I will name the app `com.rpstudios.arkitscene`, and the description will be
    `AR BABY`:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我将命名这个应用为 `com.rpstudios.arkitscene`，描述将是 `AR BABY`：
- en: '![](img/80f6410a-de88-43fa-a466-2fbf8f2955bc.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/80f6410a-de88-43fa-a466-2fbf8f2955bc.png)'
- en: 'Once we select Build app, Unity will create an XCode project, which is the
    main difference between building for Android, Windows, and Linux:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们选择构建应用程序，Unity 将创建一个 XCode 项目，这是为 Android、Windows 和 Linux 构建时的主要区别：
- en: '![](img/6a629a93-3285-40f5-a5c5-9239233e01fd.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6a629a93-3285-40f5-a5c5-9239233e01fd.png)'
- en: The main bulk of the work is done; now we just need to get familiar with XCode
    and finalize the build process there.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 主要工作已经完成；现在我们只需要熟悉 XCode 并完成那里的构建过程。
- en: Working with XCode
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 XCode 进行工作
- en: 'We can navigate to the `Build` folder of our application here and click on
    it to open our XCode project:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以导航到应用程序的 `Build` 文件夹，并点击它以打开我们的 XCode 项目：
- en: 'On the left-hand side of the screen, you should see Unity-iPhone as one of
    the items you can select. Click on it and you should see Unity-iPhone in the center
    and Identity and Type on the right:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在屏幕的左侧，你应该能看到 Unity-iPhone 是你可以选择的项目之一。点击它，你应该在中心看到 Unity-iPhone，在右侧看到身份和类型：
- en: '![](img/ba6b73cb-3279-404a-9ffd-31282cad9552.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ba6b73cb-3279-404a-9ffd-31282cad9552.png)'
- en: 'Check to make sure the Identity is correct. Display Name for me is `Chapter4`,
    with the Bundle Identifier as `com.rpstudios.arkitscene`:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保身份信息正确。对我来说，显示名称是 `Chapter4`，捆绑标识符为 `com.rpstudios.arkitscene`：
- en: '![](img/c4483725-0394-4e43-8e11-c6a7dff6b49f.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4483725-0394-4e43-8e11-c6a7dff6b49f.png)'
- en: 'Now, on Signing, you need to look and make sure that the Automatically manage
    signing checkbox is checked and your Team has your email address attached to it.
    The Signing Certificate is extremely important, as you will not be able to compile
    or send to the simulator properly. If you don’t, you have to register for an Apple
    Developer account at [developer.apple.com](https://developer.apple.com/):'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在签名部分，你需要确保自动管理签名的复选框被勾选，并且你的团队已经将你的电子邮件地址附加到它上。签名证书非常重要，因为如果没有它，你将无法正确编译或发送到模拟器。如果没有，你必须注册一个
    Apple 开发者账户，请访问 [developer.apple.com](https://developer.apple.com/)：
- en: '![](img/d90d219f-74d4-48fa-a797-a35ab7a9d09c.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d90d219f-74d4-48fa-a797-a35ab7a9d09c.png)'
- en: 'Scroll down and look for Linked Frameworks and Libraries. AVFoundation should
    be set from Optional to Required. I’ve noticed that when it is set to Optional,
    the linker fails to work properly:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动并查找链接框架和库。AVFoundation 应该从可选更改为必需。我注意到，当它设置为可选时，链接器无法正常工作：
- en: '![](img/574ec481-599c-4862-bb71-e97939c1ed93.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](img/574ec481-599c-4862-bb71-e97939c1ed93.png)'
- en: 'Locate Architectures, because we need to change from the default to Standard.
    This is due to there being different architectures and iOS doesn’t utilize ARM
    anymore:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位到架构，因为我们需要从默认的架构更改为标准架构。这是由于存在不同的架构，iOS 已经不再使用 ARM 架构：
- en: '![](img/e6aab41b-ddf1-4b00-994f-0b2c61f627ba.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e6aab41b-ddf1-4b00-994f-0b2c61f627ba.png)'
- en: Now, you can click on Build and attach your iPhone 6 or above to your Mac computer.
    Build and then run it on the device. It will ask you to trust the app on your
    phone, so follow the instructions to give trust.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以点击构建，并将你的iPhone 6或更高版本连接到你的Mac电脑。构建并在设备上运行它。它会要求你信任手机上的应用程序，所以按照指示进行信任设置。
- en: Click on the app on your phone and voila! It will load and you can play with
    the app.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击你手机上的应用程序，然后就是！它会加载，你可以玩这个应用程序。
- en: Summary
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to work with ARKit and Unity to build an AR
    application for Mac devices. While this was a very simple implementation, it should
    definitely pave the way for you to incorporate different aspects of sound into
    your own AR games and applications.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用ARKit和Unity为Mac设备构建AR应用程序。虽然这是一个非常简单的实现，但它肯定为你将不同方面的声音融入自己的AR游戏和应用铺平了道路。
- en: Learning the foundations of dealing with AR is possibly the most difficult part,
    as well as figuring out why building for different devices doesn’t work as you
    intended initially. Debugging and testing is something that should be integral
    to every aspect of development. I would suggest either having someone test every
    build, or run automated testing at every chance you get.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 学习处理AR的基础可能是最困难的部分，同时弄清楚为什么为不同设备构建不按你最初期望的方式工作。调试和测试应该是开发每个方面的基本组成部分。我建议要么让某人测试每个构建，要么在有机会的时候进行自动化测试。
- en: In the next chapter, we are going to create an educational-style game prototype
    aimed at children, which will challenge their cognitive reasoning skills by means
    of a puzzle.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将创建一个面向儿童的具有教育风格的游戏原型，通过谜题的方式挑战他们的认知推理技能。
- en: Questions
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'ARKit comes standard with Unity:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ARKit与Unity标准捆绑：
- en: A.) True
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: A.) 正确
- en: B.) False
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: B.) 错误
- en: 'You can build for macOS and iPhone on Windows:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以在Windows上为macOS和iPhone进行构建：
- en: A.) True
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: A.) 正确
- en: B.) False
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: B.) 错误
- en: 'The bundle identifier can be set to be `app.unity.test`:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包标识符可以设置为`app.unity.test`：
- en: A.) True
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: A.) 正确
- en: B.) False
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: B.) 错误
- en: What is ARPoint and what does it do?
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ARPoint是什么？它有什么作用？
- en: 'The design document is not needed for big projects:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设计文档对于大型项目不是必需的：
- en: A.) True
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: A.) 正确
- en: B.) False
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: B.) 错误
- en: 'UML stands for Uniform Modeling Language:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: UML代表统一建模语言：
- en: A.) True
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: A.) 正确
- en: B.) False
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: B.) 错误
- en: 'ARKit has built-in VR support:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ARKit内置了VR支持：
- en: A.) True
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: A.) 正确
- en: B.) False
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: B.) 错误
- en: Can you import ARKit into a Unity project on a Windows machine?
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你能否在Windows机器上将ARKit导入Unity项目？
- en: A.) Yes
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: A.) 是
- en: B.) No
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: B.) 否
- en: What would happen if you were to use an Objective-C plugin with Windows?
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你使用Objective-C插件与Windows配合使用会发生什么？
- en: A.) True
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: A.) 正确
- en: B.) False
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: B.) 错误
- en: Can you use Vuforia and ARKit together in the same project?
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你能否在同一项目中同时使用Vuforia和ARKit？
- en: A.) True
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: A.) 正确
- en: B.) False
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: B.) 错误
- en: Further reading
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'To understand the different design document templates better, here is a list
    of places where you can download and look at templates and examples:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解不同的设计文档模板，以下是一个你可以下载和查看模板和示例的地方列表：
- en: '[https://docs.google.com/document/d/1pgMutdDasJb6eN6yK6M95JM8gQ16IKacxxhPXgeL9WY/edit](https://docs.google.com/document/d/1pgMutdDasJb6eN6yK6M95JM8gQ16IKacxxhPXgeL9WY/edit)'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.google.com/document/d/1pgMutdDasJb6eN6yK6M95JM8gQ16IKacxxhPXgeL9WY/edit](https://docs.google.com/document/d/1pgMutdDasJb6eN6yK6M95JM8gQ16IKacxxhPXgeL9WY/edit)'
- en: '[https://docs.google.com/document/d/1-I08qX76DgSFyN1ByIGtPuqXh7bVKraHcNIA25tpAzE/edit](https://docs.google.com/document/d/1-I08qX76DgSFyN1ByIGtPuqXh7bVKraHcNIA25tpAzE/edit)'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.google.com/document/d/1-I08qX76DgSFyN1ByIGtPuqXh7bVKraHcNIA25tpAzE/edit](https://docs.google.com/document/d/1-I08qX76DgSFyN1ByIGtPuqXh7bVKraHcNIA25tpAzE/edit)'
- en: '[http://robotics.ee.uwa.edu.au/courses/design/examples/example_design.pdf](http://robotics.ee.uwa.edu.au/courses/design/examples/example_design.pdf)'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://robotics.ee.uwa.edu.au/courses/design/examples/example_design.pdf](http://robotics.ee.uwa.edu.au/courses/design/examples/example_design.pdf)'
- en: '[https://www.toptal.com/freelance/why-design-documents-matter](https://www.toptal.com/freelance/why-design-documents-matter)'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.toptal.com/freelance/why-design-documents-matter](https://www.toptal.com/freelance/why-design-documents-matter)'
- en: '[http://portal.unimap.edu.my/portal/page/portal30/BE8D43D77F7A6D38E04400212800D8CE](http://portal.unimap.edu.my/portal/page/portal30/BE8D43D77F7A6D38E04400212800D8CE)'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://portal.unimap.edu.my/portal/page/portal30/BE8D43D77F7A6D38E04400212800D8CE](http://portal.unimap.edu.my/portal/page/portal30/BE8D43D77F7A6D38E04400212800D8CE)'
- en: '[https://www.cs.drexel.edu/~dpn52/Therawii/design.pdf](https://www.cs.drexel.edu/~dpn52/Therawii/design.pdf)'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.cs.drexel.edu/~dpn52/Therawii/design.pdf](https://www.cs.drexel.edu/~dpn52/Therawii/design.pdf)'
- en: 'UML is a topic that is discussed in many circles, and there are plenty of resources
    on it that go into much more depth than I have. The reason for this is that UML
    could have a book written about it in order to do it proper justice:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: UML 是一个在许多领域都有讨论的话题，关于它的资源非常丰富，比我所涉及的深度要深得多。原因在于，关于 UML 可以写一本书来公正地对待它：
- en: '[https://www.utdallas.edu/~chung/Fujitsu/UML_2.0/Rumbaugh--UML_2.0_Reference_CD.pdf](https://www.utdallas.edu/~chung/Fujitsu/UML_2.0/Rumbaugh--UML_2.0_Reference_CD.pdf)'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.utdallas.edu/~chung/Fujitsu/UML_2.0/Rumbaugh--UML_2.0_Reference_CD.pdf](https://www.utdallas.edu/~chung/Fujitsu/UML_2.0/Rumbaugh--UML_2.0_Reference_CD.pdf)'
- en: '[https://courses.cs.washington.edu/courses/cse403/11sp/lectures/lecture08-uml1.pdf](https://courses.cs.washington.edu/courses/cse403/11sp/lectures/lecture08-uml1.pdf)'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://courses.cs.washington.edu/courses/cse403/11sp/lectures/lecture08-uml1.pdf](https://courses.cs.washington.edu/courses/cse403/11sp/lectures/lecture08-uml1.pdf)'
- en: 'Unity also has some fantastic tutorials where you can learn ARKit with Unity:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: Unity 也有一些非常出色的教程，你可以通过它们学习如何使用 Unity 来学习 ARKit：
- en: '[https://unity3d.com/learn/learn-arkit](https://unity3d.com/learn/learn-arkit)'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://unity3d.com/learn/learn-arkit](https://unity3d.com/learn/learn-arkit)'
- en: These references should give you deeper insight into topics that I lightly touched
    on.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 这些参考资料应该能让你对我在轻描淡写中提到的主题有更深的理解。
