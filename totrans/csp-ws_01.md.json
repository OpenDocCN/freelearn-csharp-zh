["```cs\ndotnet --list-sdks\n```", "```cs\n6.0.100 [/usr/local/share/dotnet/sdk]\n```", "```cs\ndotnet new TYPE -n NAME\n```", "```cs\ndotnet new console -n MyConsoleApp\n```", "```cs\n    dotnet new console -n Exercise1_01 \n    ```", "```cs\n    dotnet run --project Exercise1_01\n    ```", "```cs\nusing System;\nnamespace Exercise1_01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Hello World!\");\n        }\n    }\n}\n```", "```cs\nusing System;\nConsole.WriteLine(\"Hello World!\");\n```", "```cs\nint a = 0;\nint b = 0;\n```", "```cs\nint a;\nint b = a; // The compiler will prompt an error on this line: Use of unassigned local variable\n```", "```cs\nint a, b = 100, c = 10;\n```", "```cs\nvar name = \"Elon Musk\";\n```", "```cs\n    dotnet new console -n Exercise1_02\n    ```", "```cs\n    Console.WriteLine(\"Hi! I'm your first Program. What is your name?\");\n    var name = Console.ReadLine();\n    Console.WriteLine($\"Hi {name}, it is very nice to meet you. We have a really fun journey ahead.\");\n    ```", "```cs\n    dotnet run --project Exercise1_02\n    ```", "```cs\nHi! I'm your first Program. What is your name?\n```", "```cs\n    Hi! I'm your first Program. What is your name?\n    Mateus\n    Hi Mateus, it is very nice to meet you. We have a really fun journey ahead.\n    ```", "```cs\n// Declare without initializing.\nstring message1;\n// Initialize to null.\nstring message2 = null;\n// Initialize as an empty string\nstring message3 = System.String.Empty;\n// Will have the same content as the above one\nstring message4 = \"\";\n// With implicit declaration\nvar message4 = \"A random message\"     ;\n```", "```cs\n    $\"Hi {name}, it is very nice to meet you. We have a really fun journey ahead.\");\n    ```", "```cs\n    dotnet new console -n Exercise1_03\n    ```", "```cs\n    static void FormatString(string stringToFormat)\n    {\n    stringToFormat.Replace(\"World\", \"Mars\");\n    }\n    ```", "```cs\n    static string FormatReturningString(string stringToFormat)\n    {\n    return stringToFormat.Replace(\"Earth\", \"Mars\");\n    }\n    ```", "```cs\n    var greetings = \"Hello World!\";\n    FormatString(greetings);\n    Console.WriteLine(greetings);\n    var anotherGreetings = \"Good morning Earth!\";\n    Console.WriteLine(FormatReturningString(anotherGreetings));\n    ```", "```cs\n    dotnet run\n    Hello World!\n    Good morning Mars!\n    ```", "```cs\nstring first = \"Hello.\";\nstring second = first;\nfirst = null;\n```", "```cs\nConsole.WriteLine(first == second);\nConsole.WriteLine(string.Equals(first, second));\n```", "```cs\nFalse\nFalse\n```", "```cs\n    var myFloat = 10f;\n    ```", "```cs\n    var myDouble = 10d;\n    ```", "```cs\n    var myDecimal = 10m;\n    ```", "```cs\n    dotnet new console -n Exercise1_04\n    ```", "```cs\n    Console.WriteLine(\"Type a value for a: \");\n    var a = int.Parse(Console.ReadLine());\n    Console.WriteLine(\"Now type a value for b: \");\n    var b = int.Parse(Console.ReadLine());\n    ```", "```cs\n    Console.WriteLine($\"The value for a is { a } and for b is { b }\");\n    Console.WriteLine($\"Sum: { a + b}\");\n    Console.WriteLine($\"Multiplication: { a * b}\");\n    Console.WriteLine($\"Subtraction: { a - b}\");\n    Console.WriteLine($\"Division: { a / b}\"); \n    ```", "```cs\n    Type a value for a:\n    10\n    Now type a value for b:\n    20\n    The value for a is 10 and b is 20\n    Sum: 30\n    Multiplication: 200\n    Subtraction: -10\n    Division: 0\n    ```", "```cs\npublic class Person\n{\n\tpublic Person() { }\n\tpublic Person(string name, int age)\n{\n\tName = name;\n\tAge = age;\n}\n\tpublic string Name { get; set; }\n\tpublic int Age { get; set; }\n\tpublic void GetInfo()\n{\n\tConsole.WriteLine($\"Name: {Name} – IsChild? {IsChild()}\");\n}\n\tpublic bool IsChild()\n{\n\treturn Age < 12;\n}\n}\n```", "```cs\nvar person = new Person();\n```", "```cs\n    var person = new Person(\"John\", 10);\n    ```", "```cs\n    var person = new Person() { Name = \"John\", Age = 10 };\n    ```", "```cs\n    var person = new Person();\n    person.Name = \"John\";\n    person.Age = 10;\n    ```", "```cs\n    var now = DateTime.Now;\n    ```", "```cs\nvar now = DateTime.UtcNow;\n```", "```cs\n    dotnet new console -n Exercise1_05\n    ```", "```cs\n    Console.WriteLine(\"Are the local and utc dates equal? {0}\", DateTime.Now.Date == DateTime.UtcNow.Date);\n    Console.WriteLine(\"\\nIf the dates are equal, does it mean that there's no TimeSpan interval between them? {0}\",\n    (DateTime.Now.Date - DateTime.UtcNow.Date) == TimeSpan.Zero);\n    DateTime localTime = DateTime.Now;\n    DateTime utcTime = DateTime.UtcNow;\n    TimeSpan interval = (localTime - utcTime);\n    Console.WriteLine(\"\\nDifference between the {0} Time and {1} Time: {2}:{3} hours\",\n        localTime.Kind.ToString(),\n        utcTime.Kind.ToString(),\n        interval.Hours,\n        interval.Minutes);\n    Console.Write(\"\\nIf we jump two days to the future on {0} we'll be on {1}\",\n        new DateTime(2020, 12, 31).ToShortDateString(),\n        new DateTime(2020, 12, 31).AddDays(2).ToShortDateString());\n    ```", "```cs\n    dotnet run --project Exercise1_05\n    ```", "```cs\nAre the local and utc dates equal? True\nIf the dates are equal, does it mean there's no TimeSpan interval between them? True\nDifference between the Local Time and Utc Time: 0:0 hours\nIf we jump two days to the future on 31/12/2020 we'll be on 02/01/2021\n```", "```cs\nvar frenchDate = new DateTime(2008, 3, 1, 7, 0, 0);\nConsole.WriteLine(frenchDate.ToString(System.Globalization.CultureInfo.\n  CreateSpecificCulture(\"fr-FR\")));\n// Displays 01/03/2008 07:00:00\nvar usDate = new DateTime(2008, 3, 1, 7, 0, 0);\nConsole.WriteLine(frenchDate.ToString(System.Globalization.CultureInfo.CreateSpecificCulture(\"en-US\")));\n// For en-US culture, displays 3/1/2008 7:00:00 AM\n```", "```cs\nvar date1 = new DateTime(2008, 3, 1, 7, 0, 0);\nConsole.WriteLine(date1.ToString(\"yyyyMMddTHH:mm:ss\"));\n```", "```cs\n     20080301T07:00:00\n```", "```cs\nvar now = DateTime.Now.Date == DateTime.UtcNow.Date;\n```", "```cs\n    var basicComparison = a > b;\n    ```", "```cs\n    bool anotherBasicComparison = b >= a; \n    ```", "```cs\n    var animal1 = \"Leopard\";\n    var animal2 = \"Lion\";\n    bool areTheseAnimalsSame = animal1 == animal2;\n    ```", "```cs\n    bool areTheseStringsWithZeroLength = \"\".Length == 0 && \" \".Length == 0; \n    Console.WriteLine(areTheseStringsWithZeroLength);// will return false\n    ```", "```cs\n    bool isOneOfTheseStringsWithZeroLength = \"\".Length == 0 || \" \".Length == 0;\n    Console.WriteLine(isOneOfTheseStringsWithZeroLength); // will return true\n    ```", "```cs\n    bool isOneOfTheseStringsWithZeroLength = \"\".Length == 0 || \" \".Length == 0; \n    bool areYouReallySure = !isOneOfTheseStringsWithZeroLength;\n    Console.WriteLine(areYouReallySure); // will return false\n    ```", "```cs\n    dotnet new console -n Exercise1_06\n    ```", "```cs\n    Console.WriteLine(\"Please type a username. It must have at least 6 characters: \");\n    var username = Console.ReadLine();\n    ```", "```cs\n    if (username.Length < 6)\n    {\n    Console.WriteLine($\"The username {username} is not valid.\");\n    }\n    ```", "```cs\n    else\n    {\n    Console.WriteLine(\"Now type a \n    password. It must have a length of at least 6 characters and also contain a number.\");\n    var password = Console.ReadLine();\n\n    if (password.Length < 6)\n         {\n         \t\tConsole.WriteLine(\"The password must have at least 6 characters.\");\n    }\n         else if (!password.Any(c => char.IsDigit©))\n         {\n         \t\tConsole.WriteLine(\"The password must contain at least one number.\");\n    }\n    else\n         {\n                 Console.WriteLine(\"User successfully registered.\");\n    }\n    }\n    ```", "```cs\n    Please type a username. It must have at least 6 characters:\n    thekingjames\n    Now type a password. It must have at least 6 characters and a number.\n    James123!\"#\n    User successfully registered\n    ```", "```cs\nvar gift = person.IsChild() ? \"Toy\" : \"Clothes\";\n```", "```cs\nusing System;\nint a = 100;\nConsole.WriteLine($\"Original value of a: {a}\");\nint b = a;\nConsole.WriteLine($\"Original value of b: {b}\");\nb = b + 100;\nConsole.WriteLine($\"Value of a after modifying b: {a}\");\nConsole.WriteLine($\"Value of b after modifying b: {b}\");\n```", "```cs\nOriginal value of a: 100\nOriginal value of b: 100\nValue of a after modifying b: 100\nValue of b after modifying b: 200\n```", "```cs\nusing System;\nvar car = new Car();\ncar.Name = \"Super Brand New Car\";\ncar.GearType = \"Manual\";\nConsole.WriteLine($\"This is your current configuration for the car {car.Name}: Gea–Type - {car.GearType}\");\nUpgradeGearType(car);\nConsole.WriteLine($\"You have upgraded your car {car.Name} for the GearType {car.GearType}\");\nvoid UpgradeGearType(Car car)\n{\n    car.GearType = \"Automatic\";\n}\nclass Car\n{\n    public string Name { get; set; }\n    public string GearType { get; set; }\n}\n```", "```cs\nThis is your current configuration for the car Super Brand New Car: GearType – Manual\nYou have upgraded your car Super Brand New Car for the GearType Automatic\n```", "```cs\n    dotnet new console -n Exercise1_07\n    ```", "```cs\n    struct GoldenRetriever\n    {\n        public string Name { get; set; }\n    }\n    ```", "```cs\n    class BorderCollie\n    {\n        public string Name { get; set; }\n    }\n    ```", "```cs\n    class Bernese\n    {\n        public string Name { get; set; }\n        public override bool Equals(object obj)\n        {\n            if (obj is Bernese borderCollie && obj != null)\n            {\n                return this.Name == borderCollie.Name;\n            }\n            return false;\n        }\n    }\n    ```", "```cs\n            var aGolden = new GoldenRetriever() { Name = \"Aspen\" };\n            var anotherGolden = new GoldenRetriever() { Name = \"Aspen\" };\n            var aBorder = new BorderCollie() { Name = \"Aspen\" };\n            var anotherBorder = new BorderCollie() { Name = \"Aspen\" };\n            var aBernese = new Bernese() { Name = \"Aspen\" };\n            var anotherBernese = new Bernese() { Name = \"Aspen\" };\n    ```", "```cs\n    var goldenComparison = aGolden.Equals(anotherGolden) ? \"These Golden Retrievers have the same name.\" : \"These Goldens have different names.\";\n    var borderComparison = aBorder.Equals(anotherBorder) ? \"These Border Collies have the same name.\" : \"These Border Collies have different names.\";\n    var berneseComparison = aBernese.Equals(anotherBernese) ? \"These Bernese dogs have the same name.\" : \"These Bernese dogs have different names.\";\n    ```", "```cs\n              Console.WriteLine(goldenComparison);\n              Console.WriteLine(borderComparison);\n              Console.WriteLine(berneseComparison);\n    ```", "```cs\n    These Golden Retrievers have the same name.\n    These Border Collies have different names.\n    These Bernese dogs have the same name.\n    ```", "```cs\nint a = default;\nint b = default;\n```", "```cs\nvar a = default;\nvar b = default;\n```", "```cs\nswitch (matchingExpression) \n{\n  case firstCondition:\n    // code section\n    break;\n  case secondCondition:\n    // code section\n    break;\n  case thirdCondition:\n    // code section\n    break;\n  default:\n    // code section\n    break;\n}\n```", "```cs\n    var menuBuilder = new System.Text.StringBuilder();\n    menuBuilder.AppendLine(\"Welcome to the Burger Joint. \");\n    menuBuilder.AppendLine(string.Empty);\n    menuBuilder.AppendLine(\"1) Burgers and Fries - 5 USD\");\n    menuBuilder.AppendLine(\"2) Cheeseburger - 7 USD\");\n    menuBuilder.AppendLine(\"3) Double-cheeseburger - 9 USD\");\n    menuBuilder.AppendLine(\"4) Coke - 2 USD\");\n    menuBuilder.AppendLine(string.Empty);\n    menuBuilder.AppendLine(\"Note that every burger option comes with fries and ketchup!\");\n    ```", "```cs\n    Console.WriteLine(menuBuilder.ToString());\n    Console.WriteLine(\"Please type one of the following options to order:\");\n    ```", "```cs\n    var option = Console.ReadKey();\n    ```", "```cs\n    switch (option.KeyChar.ToString())\n    {\n        case \"1\":\n            {\n                Console.WriteLine(\"\\nAlright, some burgers on the go. Please pay the cashier.\");\n                break;\n            }\n        case \"2\":\n            {\n                Console.WriteLine(\"\\nThank you for ordering cheeseburgers. Please pay the cashier.\");\n                break;\n            }\n        case \"3\":\n            {\n                Console.WriteLine(\"\\nThank you for ordering double cheeseburgers, hope you enjoy them. Please pay the cashier!\");\n    ```", "```cs\n            break;\n        }\n    case \"4\":\n        {\n            Console.WriteLine(\"\\nThank you for ordering Coke. Please pay the cashier.\");\n            break;\n        }\n    default:\n        {\n            Console.WriteLine(\"\\nSorry, you chose an invalid option.\");\n            break;\n        }\n}\n```", "```cs\n    Welcome to the Burger Joint. \n    1) Burgers and Fries – 5 USD\n    2) Cheeseburger – 7 USD\n    3) Double-cheeseburger – 9 USD\n    4) Coke – 2 USD\n    Note that every burger option comes with fries and ketchup!\n    Please type one of the follow options to order:\n    1\n    Alright, some burgers on the go! Please pay on the following cashier!\n    ```", "```cs\nint i = 0;\nwhile (i < 10)\n{\nConsole.WriteLine(i);\ni = i +1;\n}\n```", "```cs\n    static bool IsPrime(int number)\n    {\n    if (number ==0 || number ==1) return false;\n    bool isPrime = true;\n    int counter = 2;\n    while (counter <= Math.Sqrt(number))\n         {\n         \t\tif (number % counter == 0)\n               {\n               \tisPrime = false;\n                    break;\n    }\n    counter++;\n    }\n         return isPrime;\n    }\n    ```", "```cs\n    Console.Write(\"Enter a number to check whether it is Prime: \");\n    var input = int.Parse(Console.ReadLine());\n    ```", "```cs\n    Console.WriteLine($\"{input} is prime? {IsPrime(input)}.\");\n    ```", "```cs\n    Enter a number to check whether it is Prime:\n    29\n    29 is prime? True\n    ```", "```cs\nstatic bool IsPrimeWithContinue(int number)\n        {\n        if (number == 0 || number ==1) return false;\n            bool isPrime = true;\n            int counter = 2;\n            while (counter <= Math.Sqrt(number))\n            {\n                if (number % counter != 0)\n                {\n                    counter++;\n                    continue;\n                }\n                isPrime = false;\n                break;\n            }\n            return isPrime;\n        }\n```", "```cs\nstatic bool IsPrimeWithGoTo(int number)\n        {\n        if (number == 0 || number ==1) return false;\nbool isPrime = true;\n            int counter = 2;\n            while (counter <= Math.Sqrt(number))\n            {\n                if (number % counter == 0)\n                {\n                    isPrime = false;\n                    goto isNotAPrime; \n                }\n                counter++;\n            }\n            isNotAPrime:\n            return isPrime;\n        }\n```", "```cs\nstatic bool IsPrimeWithReturn(int number)\n        {\n        if (number == 0 || number ==1) return false;\n            int counter = 2;\n            while (counter <= Math.Sqrt(number))\n            {\n                if (number % counter == 0)\n                {\n                    return false;\n                }\n                counter ++;\n            }\n            return true;\n        }\n```", "```cs\nint t = 0;\ndo\n{\n    Console.WriteLine(t);\n    t++;\n} while (t < 5);\n```", "```cs\nint[] numbers = { 1, 2, 3, 4, 5 };\n```", "```cs\nvar numbers = new int[5];\n```", "```cs\nfor (initializer; condition; iterator)\n{\n\t[statements]\n}\n```", "```cs\nint[] array = { 1, 2, 3, 4, 5 };\nfor (int j = 0; j < array.Length - 1; j++)\n{\nConsole.WriteLine(array[j]);\n}\n```", "```cs\n    dotnet new console -n Exercise1_10\n    ```", "```cs\n    static int[] BubbleSort(int[] array)\n    {\n        int temp;\n        // Iterate over the array\n        for (int j = 0; j < array.Length - 1; j++)\n        {\n            // If the last j elements are already ordered, skip them\n            for (int i = 0; i < array.Length - j - 1; i++)\n            {\n                if (array[i] > array[i + 1])\n                {\n                    temp = array[i + 1];\n                    array[i + 1] = array[i];\n                    array[i] = temp;\n                }\n            }\n        }\n        return array;\n    }\n    ```", "```cs\n    int[] randomNumbers = { 123, 22, 53, 91, 787, 0, -23, 5 };\n    ```", "```cs\n    int[] sortedArray = BubbleSort(randomNumbers);\n    ```", "```cs\n    Console.WriteLine(\"Sorted:\");\n    for (int i = 0; i < sortedArray.Length; i++)\n    {\n        Console.Write(sortedArray[i] + \" \");\n    }\n    ```", "```cs\n    Sorted:\n    -23 0 5 22 53 91 123 787\n    ```", "```cs\nvar items = new int[] { 1, 2, 3, 4, 5 };\nforeach (int element in items)\n{\nConsole.WriteLine(element);\n}\n```", "```cs\n    dotnet new console -n Exercise1_11\n    ```", "```cs\n    Model;Memory;Storage;USB Ports;Screen;Condition;Price USD\n    Macbook Pro Mid 2012;8GB;500GB HDD;USB 2.0x2;13\" screen;Refurbished;400\n    Macbook Pro Mid 2014;8GB;512GB SSD;USB 3.0x3;15\" screen;Refurbished;750\n    Macbook Pro Late 2019;16GB;512GB SSD;USB 3.0x3;15\" screen;Refurbished;1250\n    ```", "```cs\n    using System;\n    using System.IO;\n    using System.Threading.Tasks;\n    namespace Exercise1_11\n    {\n        public class Program\n        {\n            public static async Task Main()\n            {\n            using (var fileStream = new FileStream(\"products.csv\", FileMode.Open, FileAccess.Read))\n            {\n                using (var reader = new StreamReader(fileStream))\n                {\n                    var content = await reader.ReadToEndAsync();\n                    var lines = content.Split(Environment.NewLine);\n                    foreach (var line in lines)\n                    {\n                        Console.WriteLine(line);\n                    }\n                }\n            }\n            }\n        }\n    }\n    ```", "```cs\n    dotnet new console -n Exercise1_12\n    ```", "```cs\n    static async Task ReadFile(FileStream fileStream)\n        {\n            using (var reader = new StreamReader(fileStream))\n            {\n                var content = await reader.ReadToEndAsync();\n                var lines = content.Split(Environment.NewLine);\n                foreach (var line in lines)\n                {\n                    Console.WriteLine(line);\n                }\n            }\n        }\n    ```", "```cs\n            using (var file = new StreamWriter(\"products.csv\", append: true))\n            {\n                file.Write(\"\\nOne more macbook without details.\");\n            }\n    ```", "```cs\n    using (var fileStream = new FileStream(\"products.csv\", FileMode.Open,\n                FileAccess.Read))\n            {\n                await ReadFile(fileStream);\n            }\n    ```", "```cs\n    Model;Memory;Storage;USB Ports;Screen;Condition;Price USD\n    Macbook Pro Mid 2012;8GB;500GB HDD;USB 2.0x2;13\" screen;Refurbished;400\n    Macbook Pro Mid 2014;8GB;512GB SSD;USB 3.0x3;15\" screen;Refurbished;750\n    Macbook Pro Late 2019;16GB;512GB SSD;USB 3.0x3;15\" screen;Refurbished;1250\n    One more macbook without details.\n    ```", "```cs\ntry\n{\n// some logic that might throw an exception\n}\ncatch\n{\n// error handling\n}\n```", "```cs\ndouble Divide(int a, int b) => a/b;\n```", "```cs\n    static double Divide(int a, int b)\n    {\n        return a / b;\n    }\n    ```", "```cs\n    bool divisionExecuted = false;\n    ```", "```cs\n    while (!divisionExecuted)\n    {\n        try\n        {\n            Console.WriteLine(\"Please input a number\");\n            var a = int.Parse(Console.ReadLine());\n            Console.WriteLine(\"Please input another number\");\n            var b = int.Parse(Console.ReadLine());\n            var result = Divide(a, b);\n            Console.WriteLine($\"Result: {result}\");\n            divisionExecuted = true;\n        }\n        catch (System.FormatException)\n        {\n            Console.WriteLine(\"You did not input a number. Let's start again ... \\n\");\n            continue;\n        }\n        catch (System.DivideByZeroException)\n        {\n            Console.WriteLine(\"Tried to divide by zero. Let's start again ... \\n\");\n            continue;\n        }\n    }\n    ```", "```cs\n    Please input a number\n    5\n    Please input another number\n    0\n    Tried to divide by zero. Let's start again …\n    Please input a number\n    5\n    Please input another number\n    s\n    You did not input a number. Let's start again …\n    Please input a number\n    5\n    Please input another number\n    1\n    Result: 5\n    ```", "```cs\nclass Person\n{\nPerson(string name)\n     {\nif (string.IsNullOrWhiteSpace(name)) throw new ArgumentNullException(nameof(name));\nName = name;\n     }\n    String Name { get ; set; }\n}\n```", "```cs\n    new Random().Next(0, 10)\n    ```"]