- en: Chapter 3. Overview of Collision Matrix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn types of different colliders in Unity3D, which
    define the collision shape of objects in scene and their Collision Matrix.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will learn in detail about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Collision Matrix
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Trigger Matrix
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Layer-based Collision Matrix
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will get knowledge about the matrix of colliders
    and their types. Using a matrix configuration of two colliding game objects, we
    will see how we can define different actions.
  prefs: []
  type: TYPE_NORMAL
- en: 'During the development with Unity3D, you will encounter with the following
    terms:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Collision Matrix**: This represents a matrix that shows which collider type
    will show a collision'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Trigger Matrix**: This represents a matrix that shows which collider type
    will fire a trigger event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Layer-based Collision Matrix**: This represents a matrix that shows layer-based
    collision'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following figure will show you the different types of matrices:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Overview of Collision Matrix](img/00030.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Let's take a look at them in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Collision Matrix 3D
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will learn about Collision Matrix for 3D development; this matrix will define
    which collider type will show collision. We can define different actions by configuring
    two colliding game objects. The following table defines the collision status of
    two colliding game objects based on the attached components. To apply Physics,
    the game object must have Rigidbodies attached. Collision Matrix here represents
    a matrix that shows which collider type will show a collision.
  prefs: []
  type: TYPE_NORMAL
- en: 'On collision, the following events will be generated (for the description,
    please check the previous chapter):'
  prefs: []
  type: TYPE_NORMAL
- en: '`OnCollsionEnter()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OnCollisionStay()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OnCollisionExit()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Only the collider that possesses a Rigidbody will show reaction on collision.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following figure shows the table of the Collision Matrix for 3D objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Collision Matrix 3D](img/00031.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s see how we read the preceding table with a few examples:'
  prefs: []
  type: TYPE_NORMAL
- en: A static collider will detect collision with a Rigidbody
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Rigidbody Collider will detect collision with static, Rigidbody, and Kinematic
    Rigidbody Colliders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Kinematic Rigidbody will show reaction on collision with a Rigidbody
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In other conditions, no collision will be detected
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Trigger Matrix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Trigger Matrix here represents a matrix that shows which collider type will
    fire trigger events. On trigger, the following events will be generated (for the
    description, please check the previous chapter):'
  prefs: []
  type: TYPE_NORMAL
- en: '`OnTiggerEnter()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OnTriggerStay()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OnTriggerExit()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Only Trigger Collider will fire trigger events.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following figure shows the table of the Trigger Matrix for 3D objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Trigger Matrix](img/00032.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s see how we can read the preceding table with the following examples:'
  prefs: []
  type: TYPE_NORMAL
- en: The static collider will fire trigger events on collision with a Rigidbody Trigger
    Collider and Kinematic Rigidbody Collider
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Rigidbody Collider will fire trigger events on collision with a static Trigger
    Collider, Rigidbody Trigger Collider, and Kinematic Trigger Collider
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Kinematic Rigidbody Collider will fire trigger events on collision with
    a static Trigger Collider, Rigidbody Trigger Collider, and Kinematic Trigger Collider
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The static Trigger Collider will fire trigger events on collision with a Rigidbody
    Collider, Kinematic Rigidbody Collider, Rigidbody Trigger and Kinematic Trigger
    Collider
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matrix for 2D Objects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although in Unity3D, Physics for 2D objects and 3D objects are very similar,
    there are some differences in sending messages during collision.
  prefs: []
  type: TYPE_NORMAL
- en: There are some important differences that we will see in the following table.
    The matrix given in this table is based on the assumption that we are using 2D
    variants of colliders and Rigidbodies.
  prefs: []
  type: TYPE_NORMAL
- en: The table is based on instances where collision detection occurs and Collision2D
    messages are sent.
  prefs: []
  type: TYPE_NORMAL
- en: '![Matrix for 2D Objects](img/00033.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s see how we can read the preceding table with the following examples:'
  prefs: []
  type: TYPE_NORMAL
- en: The static collider will fire collision events on collision with a Rigidbody
    only
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Rigidbody will show collision with a static collider, Rigidbody, and Kinematic
    Rigidbody Collider
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Kinematic Rigidbody will fire collision events with a Rigidbody
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following figure shows instances where Trigger2D messages are sent upon
    collision:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Matrix for 2D Objects](img/00034.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s see how we can read the preceding table with the following examples:'
  prefs: []
  type: TYPE_NORMAL
- en: The static collider will fire trigger events on collision with a Rigidbody only
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Rigidbody will show collision with a static Trigger and Rigidbody Trigger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Kinematic Rigidbody will fire collision events with a Rigidbody Trigger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Layers and Collision Matrix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, if multiple game objects are on the default layer, they will all
    collide with each other. In that case, we can say everything will collide with
    everything. In game development, often we need to decide which object will collide
    with which one. For this, we need to define a layer-specific division of game
    objects. We put each type of object in different layers. In Collision Matrix,
    for each new layer, a new column and row are added. Matrix defines the interaction
    between the layers. By default, a new layer collides with all the other layers.
    A developer needs to set up the interaction between the layers. Using a correct
    setup, we can avoid unwanted collision.
  prefs: []
  type: TYPE_NORMAL
- en: An example of a layer-based Collision Matrix
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s take a look at an example of setting Collision Matrix for layers:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new scene and name it `Layer Collision`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a box container game object, as shown in the following screenshot:![An
    example of a layer-based Collision Matrix](img/00035.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'By default, all the objects will appear on the default layer, as shown in the
    following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![An example of a layer-based Collision Matrix](img/00036.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Add and set up the Box layer for floor and wall game objects. As shown in the
    following screenshot, by clicking on **Layer**, we will see a drop-down list of
    existing layers. We can add a new layer by clicking on **Add Layer**.![An example
    of a layer-based Collision Matrix](img/00037.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As shown in the following screenshot, we have created a new layer **Box**. By
    selecting **Box**, we can specify the layer for all the box game objects.![An
    example of a layer-based Collision Matrix](img/00038.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the box container, add a red ball, green ball, and blue ball.![An example
    of a layer-based Collision Matrix](img/00039.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Similar to step 3, we add and set up different layers for the balls. As shown
    in the following screenshot, we have created layers for the red ball, green ball,
    and blue ball:![An example of a layer-based Collision Matrix](img/00040.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To set up collision rules for game objects, let's open **Matrix**. As shown
    in the following screenshot, navigate to **Edit** | **Project Settings** and select
    **Physics**:![An example of a layer-based Collision Matrix](img/00041.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As shown in the following screenshot, a collision table will be shown in the
    **Inspector** panel. By default, every object will collide with every another
    object.![An example of a layer-based Collision Matrix](img/00042.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check and uncheck the checkboxes of matrix to set up rules, as shown in the
    following screenshot. We have set up Collision Matrix for a green ball, red ball,
    blue ball, and a box.![An example of a layer-based Collision Matrix](img/00043.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the preceding steps, we can set up a layer-based Collision Matrix.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new JavaScript and attach it to the main camera and run the test.
  prefs: []
  type: TYPE_NORMAL
- en: 'Write the following code inside this JavaScript file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Using the preceding script, you can check which objects are colliding with one
    another and for how long.
  prefs: []
  type: TYPE_NORMAL
- en: Collision Matrix and a script
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's see how we can ignore collision for specific objects using a script. Often,
    in interactive development, we need to set up rules for collision between objects.
    For example, we need to set up a rule where projectiles should not collide with
    the objects shooting them. Although, using custom layer-based collision on GUI,
    we can define a layer-based game objects collision rule, we also can handle it
    using a script. We can use `IgnoreCollision` Physics of Unity3D for creating Collision
    Matrix.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Limitation of IgnoreCollision**'
  prefs: []
  type: TYPE_NORMAL
- en: Collision Matrix does not store the state when saving the scene and we can apply
    only on active game objects.
  prefs: []
  type: TYPE_NORMAL
- en: An example of a script-based Collision Matrix
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following is the example of a script-based Collision Matrix:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new scene and name it `Script-Collision-Matrix`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a wall using **Plane**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a **Bullet** game object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a shooting object. Now, we need to set up a rule that a bullet should
    not collide with the shooting object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a script and attach it to the main camera object. Add the following
    code to the script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run and test the script, you will see that a bullet is ignoring collision with
    the shooting object.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about different Collision Matrix and Trigger Matrix
    for 2D and 3D game objects. You also learned how we can set up a layer-based Collision
    Matrix and how we handle it with the scripts. In the next chapter, you will learn
    about Rigidbodies and their behaviors. The next chapter serves as a detailed description
    and will give you the uses and types of different Rigidbodies in Unity3D, which
    will covering topics such as Physics Rigidbody, Kinematic Rigidbody, and the properties
    of a Rigidbody.
  prefs: []
  type: TYPE_NORMAL
