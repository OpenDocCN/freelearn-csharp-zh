- en: Inventory System
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The inventory system is one of the most critical components of an RPG. It will
    be used to store all important game elements that the player will need in your
    game environment. This chapter will guide you on how to create a simple generic
    inventory system that can be utilized and extended as you see fit.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a breakdown of the chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Designing an inventory system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Weighted inventory
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Determining item types
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an inventory item
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the prefab
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding an inventory item agent
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Inventory items defined as prefabs
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing an inventory interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the inventory UI framework
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing a dynamic item viewer
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a scroll view
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding elements to PanelItem and Scroll View
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding txtItemElement dynamically
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Building the final inventory item UI
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating the UI with the actual inventory system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hooking the category buttons and displaying the data
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing the inventory system
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Inventory items and the player character
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying inventory items
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How it looks
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: There is a lot of work ahead of us in this chapter. Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Designing an inventory system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As with everything else we have discussed thus far, designing your **inventory
    system** will also be heavily dependent on your game. There are many different
    types of inventory system mechanics that you can study and choose based on its
    relevance to your game.
  prefs: []
  type: TYPE_NORMAL
- en: Weighted inventory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I will be leaning towards implementing what is called the **weighted inventory**.
    In this type of inventory system, each item or piece of equipment is assigned
    a numerical value that represents the weight of the item. This, in return, is
    used to determine how much inventory the player can carry at any given time during
    game play. This makes sense for our RPG, if you think about it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following as an example: assume you are a hiker who wants to climb
    Mount Ararat. The climb itself will take a certain amount of time. During the
    climb, you will need to carry with you the necessary equipment to complete the
    journey or climb. Realistically, there are several crucial items that you, as
    the hiker, will need to carry with you, such as those shown in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: Clothing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sleeping bags
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Boots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ice breakers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Food
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Light source
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Personal items
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each one of the categories listed above has a specific weight associated to
    it in real life. Therefore, when you are planning your hike, you will need to
    plan ahead and see how you can meet your climbing needs, while in the meantime
    also reducing the amount of items and the total weight of the items you will need
    to carry on your back during the journey. The actual logistics are a little more
    involved, but you get the picture.
  prefs: []
  type: TYPE_NORMAL
- en: It is no different in our RPG. The player character can only carry a certain
    number of items and/or equipment with them for their journey. For instance, the
    player character cannot carry twenty different types of weapon at any given time!
    It would be just impossible, realistically speaking. So it would be a nice touch
    to put some realism into the game play.
  prefs: []
  type: TYPE_NORMAL
- en: Also, just like in real life, the heavier the equipment one has to carry, the
    more energy it will take. So, we can also incorporate such a system for our game.
    For instance, carrying too many weapons will have a major effect on the player
    character over a long period of time. First of all, it will reduce its speed and
    movement drastically; secondly, it can have a major impact on the health of the
    player. This is where your creativity and design skills will come into play. You
    are the master of the game, and you determine how you want to implement it!
  prefs: []
  type: TYPE_NORMAL
- en: I am going to keep it simple for the sake of demonstration!
  prefs: []
  type: TYPE_NORMAL
- en: Determining item types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For starters, we will concentrate on some of the basic item types that we would
    like to define in our game, such as weapons, armor, and clothing. On top of this,
    we can also add health packets, potions, and collectibles.
  prefs: []
  type: TYPE_NORMAL
- en: We will create three new scripts named `BaseItem.cs`, `InventoryItem.c`, and
    `InventorySystem.cs`. The `BaseItem` class will hold the generic properties for
    all items, just like the `BaseCharacter` class we defined previously. The `InventoryItem`
    class will inherit the `BaseItem` class and define the item type.
  prefs: []
  type: TYPE_NORMAL
- en: 'A listing of `BaseItem.cs` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The main idea in the preceding code is `ItemCateogry`. At the moment, I have
    kept it to only five different types of category that the inventory would keep
    track of.
  prefs: []
  type: TYPE_NORMAL
- en: A category could have multiple item types. For instance, there are different
    types of weapons and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'A listing of `InventoryItem.cs` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code implements more properties or attributes for the items to
    be used in the inventory. For now, let's just keep it the way it is; we can always
    change it in the future.
  prefs: []
  type: TYPE_NORMAL
- en: The next important script is the actual script that will be used to manage the
    inventory. There are many ways to implement the logic for the inventory system.
    Again keeping things simple, the current script will have five `List` datatypes
    of type `InventoryItem`, one for each item category.
  prefs: []
  type: TYPE_NORMAL
- en: 'A listing of `InventorySystem.cs` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We won''t have direct access to the lists that will be used to contain the
    inventory items. For now, we have implemented two functions, `AddItem()` and `DeleteItem()`,
    which will handle the two basics features of the inventory, adding an item to
    it and removing an item from it. These two functions will take an `InventoryItem` object,
    and based on `ItemCategory`, be added or removed from the appropriate list within
    the inventory, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The basics are in place. Now we will need to integrate this with the `GameMaster.cs`
    script. To do so, we will need to create a new variable of type `InventorySystem`
    named `INVENTORY`, initialized in the `Awake()` function of the `GameMaster.cs`
    script.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following listing illustrates just the new addition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that we are actually creating an `InventoryItem` object and inserting
    it into `InventorySystem` for testing purposes. Another great feature is that
    you can see `InventorySystem` during design time since we have serialized the
    classes and the fields. Take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00114.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding screenshot displays the inventory system as seen in the Inspector
    Window when you select the `GameMaster` object. When you run the game to test
    it, you will see the following update:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00115.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Notice how the data reflects appropriately in the inventory system, as expected!
    The CLOTHING list has increased its size to 1, and the `InventoryItem` object
    within the list is properly stored and displayed for testing and debugging. We
    have one clothing item named Testing, with the given description, a Strength of
    0.5, and a Weight of 0.2.
  prefs: []
  type: TYPE_NORMAL
- en: So far, so good. Now we need to actually create the items that will be used
    to visually represent our inventory items! This is discussed in the following
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an inventory item
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is now time to actually create the items (assets) we are going to use for
    our inventory system. I will be creating one item type from each item category
    to keep things simple. This section will again be highly dependent on how you
    have modeled your character models. As discussed earlier in the book, in my particular
    model, all of the character's essential parts are embedded within the **fbx**.
    In this case, you will need to navigate down your model's hierarchy and extract
    the mesh for the specific armor or weapon, or anything else you will be using
    for the inventory.
  prefs: []
  type: TYPE_NORMAL
- en: You can also use independent models representing your inventory items that may
    or may not be related to your character model's mesh. These items are just used
    for visual representation within the world, so that the player can pick them up.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00116.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Creating asset prefabs
  prefs: []
  type: TYPE_NORMAL
- en: If you recall from the character customization scene, we had already gone through
    the model and identified the parts we wanted to have the player be able to enable
    or disable based on the selection they made through the interface.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the prefab
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have not already done so, go ahead and create a folder in your Project
    Window named Prefabs. Within this folder, go ahead and create a new folder and
    name it InventoryItems, and then create a sub-folder named ShoulderPads. You are
    welcome to use a different naming and folder structure if you choose, as long
    as you are comfortable and it is organized for you to work with.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a prefab, you simply need to take an existing GameObject that is
    present in the Scene Window and drag it into the Project Window. To keep things
    organized, we will be using the structure defined in the previous paragraph. So
    you will need to navigate to the ShoulderPads folder in the project window, and
    then simply drag one of the shoulder pad meshes from your model and drop it into
    the ShoulderPads folder. Take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00117.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Creating asset prefabs
  prefs: []
  type: TYPE_NORMAL
- en: Observe, when you create a prefab, the prefab will be an exact copy of the GameObject
    in the active scene! In this case, my mesh is disabled in the scene; therefore,
    when I create a prefab of the mesh, it will also be disabled! Since it is disabled,
    when you drag the newly created prefab into the scene as a new GameObject, it
    will be invisible; you will need to enable it.
  prefs: []
  type: TYPE_NORMAL
- en: Adding an inventory item agent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We need the means to interact with our inventory items. In order to do this,
    we will need to create a new script that will handle our interaction with the
    inventory items during game play. This will be coded in the `InventoryItemAgent.cs`
    script. At the moment, the script will just enable us to interact with the `InventoryItem`
    object through the IDE.
  prefs: []
  type: TYPE_NORMAL
- en: 'A listing of the script is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Very simply, in order for us to be able to interact with the GameObject, we
    would need to use a script that inherits *MonoBehaviour*. Go ahead and attach
    this script to your prefab. Now you can easily set up your inventory items visually.
    Take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00118.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Inventory item agent
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding screenshot, you can see that we have created a GameObject from
    the prefab and, using the InventoryItemAgent component, we have access to the
    properties of the InventoryItem object. Utilizing this concept, you can now create
    your prefabs for the different types of inventory item.
  prefs: []
  type: TYPE_NORMAL
- en: If you are applying your changes in the scene window, make sure you apply them
    to the original prefab so that it keeps it in memory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Caution: When you apply changes to a prefab, all instances of the prefab get
    updated with the new attributes.'
  prefs: []
  type: TYPE_NORMAL
- en: At the moment we have implemented an easy way to define our inventory items,
    but we still need to implement user interaction with the items. The logic for
    the interaction will be implemented in the `InventoryItemAgent.cs` script. First
    we need to identify who we are colliding with; in this case, we want to make sure
    it is the player that is going to collect the item. Second, we need to store the
    data in `GameMaster`, and also remove `GameObject` from the active scene. The
    last two parts will be handled by `GameMaster`, as you will see.
  prefs: []
  type: TYPE_NORMAL
- en: 'The new code listing for `InventoryItemAgent.cs` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'I have created a new function in the `InventoryItem.cs` script called `CoptInventoryItem()`.
    This function is used to make a copy of one `InventoryItem` object into another
    one. The code for the newly added function in the `InventoryItem` class is as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We have already seen how to add an item to the inventory using `GameMaster`.
    However, we need to add a new function that will handle the destruction of `GameObjects`
    in our game. This is done by the `RPG_Destroy()` function.
  prefs: []
  type: TYPE_NORMAL
- en: You cannot use `Destroy()`, `DestroyImmediate()`, or `DestroyObject()` since
    they are part of all `GameObjects` in Unity. Therefore, be cautious of your naming
    convention within your own classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The listing of the new function is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'One final component that needs to be added to your prefabs representing the
    inventory items is a *Collider*. Take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00119.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Mesh collider
  prefs: []
  type: TYPE_NORMAL
- en: 'I used a Mesh Collider to keep things simple. A collider can be added by selecting
    the Add Component | Physics | Mesh Collider from the Inspector Window, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00120.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Inventory items defined as prefabs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following figure shows some of the inventory item prefabs I have created
    for demonstration purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00121.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Inventory prefab sample
  prefs: []
  type: TYPE_NORMAL
- en: The key for all of this to work is to make sure that your prefabs have the `InventoryItemAgent.cs`
    script as well as a `Collider` component attached to the prefabs. Then you will
    need to provide the inventory item data through the IDE uniquely identifying each
    one.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table lists the data for each inventory item defined:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Prefab** | **Name** | **Description** | **Category** | **Strength** | **Weight**
    |'
  prefs: []
  type: TYPE_TB
- en: '| Helmet | HL01 | Brass Helmet with Two Horns | Armor | 0.2 | 0.2 |'
  prefs: []
  type: TYPE_TB
- en: '|  | HL02 | Brass Helmet Face Protection | Armor | 0.3 | 0.25 |'
  prefs: []
  type: TYPE_TB
- en: '|  | HL03 | Bronze Helmet Protecting Face | Armor | 0.3 | 0.3 |'
  prefs: []
  type: TYPE_TB
- en: '|  | HL04 | Bronze Helmet | Armor | 0.2 | 0.25 |'
  prefs: []
  type: TYPE_TB
- en: '| Shield | SL01 | Iron Shield | Armor | 0.3 | 0.3 |'
  prefs: []
  type: TYPE_TB
- en: '|  | SL02 | Wooden Shield | Armor | 0.2 | 0.2 |'
  prefs: []
  type: TYPE_TB
- en: '| Shoulder Pads | SP01 | Shoulder Pad 01 | Armor | 0.1 | 0.2 |'
  prefs: []
  type: TYPE_TB
- en: '|  | SP02 | Shoulder Pad 02 | Armor | 0.1 | 0.2 |'
  prefs: []
  type: TYPE_TB
- en: '|  | SP03 | Shoulder Pad 03 | Armor | 0.15 | 0.25 |'
  prefs: []
  type: TYPE_TB
- en: '|  | SP04 | Shoulder Pad 04 | Armor | 0.2 | 0.25 |'
  prefs: []
  type: TYPE_TB
- en: '| Weapons | Axe1 | Single Head | Weapon | 0.2 | 0.1 |'
  prefs: []
  type: TYPE_TB
- en: '|  | Axe2 | Double Head | Weapon | 0.25 | 0.2 |'
  prefs: []
  type: TYPE_TB
- en: '|  | Club1 | Wooden Club | Weapon | 0.2 | 0.1 |'
  prefs: []
  type: TYPE_TB
- en: 'Again, the data is arbitrary: you decide what best suits your game and game
    design. Usually, you will have a table that would be loaded with such information,
    and your game manager will handle preloading it at runtime from the server.'
  prefs: []
  type: TYPE_NORMAL
- en: Designing an inventory interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is now time to think about how we are going to visualize the inventory during
    game play. Creating a user interface for any game is a challenging task. You need
    to have a balanced approach about the amount of information you want to display
    on the screen at playtime, without interfering with the game play. In the meantime,
    you want to make sure that the player has the most crucial and important information
    necessary to complete their mission to hand.
  prefs: []
  type: TYPE_NORMAL
- en: 'With that said, let''s look at how we can design a simple user interface to
    enable the player with the basics of interacting with the inventory system. Here
    is a list of minimum features that the player should be able to perform:'
  prefs: []
  type: TYPE_NORMAL
- en: Display the inventory at any time during game play
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigate based on category
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See what items are listed under each category
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Be able to remove an item from the inventory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Be able to consume an item from the inventory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See what inventory items are already in use by the player
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The preceding list will give us a good start for implementing our inventory
    interface. Let's start by identifying the categories that will need to be displayed.
    The categories are defined as an **enum** named `ItemCategory` in the `BaseItem`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have the following: weapons, armor, clothing, health, and potion. Take a
    look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00122.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding screenshot shows a concept I am leaning towards for the implementation
    of the inventory interface. The interface can be constructed by utilizing the
    following UI elements:'
  prefs: []
  type: TYPE_NORMAL
- en: Buttons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Panels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each category will have a button, and there will be one main panel containing
    the list of items per category, as illustrated in the preceding diagram. Each
    item will be contained in its own panel, which will contain an image of the inventory
    item, the item description, and two buttons that can be used to add or remove
    the item from the inventory system.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the inventory UI framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start by first implementing the initial framework for our inventory system
    graphical interface. In the main scene of your project, go ahead and create a
    new *Canvas* GameObject if you have not done so already.
  prefs: []
  type: TYPE_NORMAL
- en: To do so, right-click on the Hierarchy *Window,* and select UI | Panel. This
    will automatically create a Canvas GameObject and a Panel UI Element as a child
    to the canvas.
  prefs: []
  type: TYPE_NORMAL
- en: Rename this panel PanelInventory. This will be the main panel that will contain
    everything else. Now, let's go ahead and start building the buttons that will
    represent our main categories.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, right-click on the PanelInventory GameObject and select UI | Button.
    This will make sure that the newly created button becomes a child of the PanelInventory.
    If, for whatever reason, this is not the case in the Hierarchy Window after the
    creation of the button(s), simply drag the newly created button(s) under the PanelInventory
    panel. Do this for all five categories. Rename the buttons appropriately, such
    as butWeaponsCategory and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the caption of the button so that it reflects the button''s function.
    Also, rename the Text element to something like the following: txtWeaponsCategory
    and so on. Take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00123.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Inventory UI
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, add a new Panel element to the PanelInventory again, by selecting
    the PanelInventory GameObject and right-clicking and selecting UI | Panel. Rename
    the newly created panel to PanelCategory. Take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00124.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Your inventory user interface should look something like the preceding screenshot.
    Before we get more involved, let's go ahead and hook up some of the basics for
    showing and hiding the inventory interface for the player. To do this, we will
    need to modify the `UiController.cs`*,* `GameLevelController.cs`, and also the
    `GameMaster.cs` scripts.
  prefs: []
  type: TYPE_NORMAL
- en: 'I will not be listing the whole source file as we will do this later on in
    the chapter. The changes for each script for now are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`UiController.cs`: Added a new function named `DisplayInventory()` and a new
    variable to reference the inventory canvas named `InventoryCanvas`. See the following
    code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '`GameLevelController.cs`: Updated the `OnlevelWasLoaded()` function to assign
    the `uiController` GameObject to the `GameMaster` instance, if one is present.
    See the following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '`GameMaster.cs`: Modified the `Update()` function to check and see if the J
    key was pressed and released. This in turn toggled a Boolean variable to see if
    we are supposed to show or hide the inventory interface. See the following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: If you test your scene from the main menu, you will be able to test out the
    interface and toggle it on and off.
  prefs: []
  type: TYPE_NORMAL
- en: Don't forget that you will need to disable the Canvas for the inventory system
    during design time, or at runtime when the game loads initially.
  prefs: []
  type: TYPE_NORMAL
- en: Designing a dynamic item viewer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next challenge for us is to create a method to dynamically populate the
    inventory items and displaying them properly on the user interface. We are going
    to use two new UI elements that we have not used before. We will be using a s*croll
    view* to give us the ability to scroll through the items when needed.
  prefs: []
  type: TYPE_NORMAL
- en: Let's first get the scroll view set up and look at how to add a simple UI prefab
    to the scroll view. Once this is done, we can go ahead and enhance the UI prefab
    to handle what we have outlined in the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a scroll view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next few screenshots will illustrate how to add a scroll view functionality
    to your user interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00125.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Adding a scroll view
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the scene where you have created your Inventory UI, and select the *PanelCategory*
    in the *Canvas*. Right-click and select *UI | Scroll View* to add a scroll view
    UI element. Take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00126.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Adding Scroll View
  prefs: []
  type: TYPE_NORMAL
- en: You should now have a scroll view UI element with associated children under
    your *PanelCategory* panel. The children will be *Viewport*, *Scrollbar Horizontal*,
    and *Scrollbar Vertical*.
  prefs: []
  type: TYPE_NORMAL
- en: Make your adjustment to the scroll view UI element before you delete the children.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to make some modifications to the default scroll view. Go ahead
    and delete the following from *Scroll View:* the *Scrollbar Horizontal*, *Scrollbar
    Vertical*, and the *Viewport* child elements. After you are done, your screen
    should look something like the preceding screenshot. Now take a look at the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00127.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Layout adjustment
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to add a Panel element as a child to our Scroll View. Go ahead
    and select the scroll view, right-click, and select UI | Panel. Rename the newly
    added panel PanelItem. We need to add two layout components to our PanelItem.
    To do this, select PanelItem, and from the Inspector Window select Add Component
    | Layout | Vertical Layout Group, and once more select Add Component | Layout
    | Content Size Filter. Take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00128.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Layout adjustment
  prefs: []
  type: TYPE_NORMAL
- en: Go ahead and modify the following attributes under the Vertical Layout Group
    components. Set the Left, Right, Top, and Bottom Padding to 3\. Set the Spacing
    to 0, change the Child Alignment to Upper Left, and set the Child Force Expand
    to True for both Width and Height.
  prefs: []
  type: TYPE_NORMAL
- en: For the Content Size Filter component, set the Horizontal Fit to Unconstrained
    and the Vertical Fit to Min Size.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, in the Rect Transform component, change the Anchor Point to Top Center,
    and modify the Pos Y to -10.
  prefs: []
  type: TYPE_NORMAL
- en: At this point we have the basic framework in place. The next step it to populate
    our newly created ScrollView!
  prefs: []
  type: TYPE_NORMAL
- en: Adding elements to PanelItem and Scroll View
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For starters, let's go ahead and add a *Text* element under the `PanelItem`
    panel. Again select the `PanelItem` element and right-click and select UI | Text.
    Next select the text element and rename it to `txtItemElement`. We need to add
    a new component to the Text element, from the Inspector Window go ahead and select
    Add Component | Layout | Layout Element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the Min Height attribute of the Layout Element component to 20\. Take
    a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00129.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Modification
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding screenshot illustrates the setup of the `InventoryItem` element
    and UI. Now take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00130.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Adding an inventory item
  prefs: []
  type: TYPE_NORMAL
- en: 'We need a means to access and modify the Text attribute of the new `Text` UI
    element. In order to do this, we need to create a new script called InventoryItemUI.cs.
    The code will just have a public variable that will reference the `Text` element.
    The listing is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Finally, drag and drop the `Text` element from the hierarchy window into the
    TextItemElement attribute of the InventoryItemUI component attached to the txtItemElement
    object. Refer to the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: The script is used to self-reference. We will use it to modify the text component
    of the `Text` UI element.
  prefs: []
  type: TYPE_NORMAL
- en: Now we will need to create a Prefab of the txtItemElement by dragging and dropping
    it into a designated folder. I have created a new folder under my Prefabs folder
    named it *UI* and have created the prefab in that folder. Refer to the preceding
    screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: You can now delete the txtItemElement from the Hierarchy Window under the PanelItem
    object. We will be adding them dynamically during runtime.
  prefs: []
  type: TYPE_NORMAL
- en: There is one last configuration you will need to do before we move forward.
    You will need to add a `Mask` component to the `ScrollView` UI element. Select
    the Scroll View from the Hierarchy Window, and from the Inspector Window select
    Add Component | UI | Mask. After the addition of the Mask component, make sure
    that the Show Mask Graphics attribute is *unchecked*.
  prefs: []
  type: TYPE_NORMAL
- en: Adding txtItemElement dynamically
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now it is time to add our inventory item placeholder dynamically to the `PanelItem`
    UI element. To do so, we will use the `UiController.cs` script. Go ahead and open
    up the script and add the following variable to the class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In the designer, you will need to assign the `PanelItem` UI element from the
    *Canvas* GameObject and the `txtItemElement` prefab from the prefab folder.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we are going to modify the `Update()` function so that when we press the
    H key on the keyboard, it will go ahead and instantiate a new `InventoryItemElement`
    and make it a child element of the `PanelItem` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'The listing of the code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code listing simply instantiates the prefab and makes it a child
    of the `PanelItem` element. We are also changing the caption of the element and
    placing it with a timestamp to see the uniqueness of each UI element.
  prefs: []
  type: TYPE_NORMAL
- en: 'The outcome is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00131.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Inventory view
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we have put together the main elements to have our inventory
    interface list items dynamically and be able to scroll through them.
  prefs: []
  type: TYPE_NORMAL
- en: Building the final inventory item UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To create the actual Inventory Item user interface, we are going to need to
    use several UI elements. We will need a panel to be the container of the item.
    Within the *Panel*, we are going to need to use an *Image*, a *Text*, and two
    *Button* UI elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: I will not be going through the steps of how to put the panel together.
    You should know how to create user interfaces by now.'
  prefs: []
  type: TYPE_NORMAL
- en: Just make sure that you add the *Layout Element* component and *Inventory Item
    UI* script to the panel that will be the base for the inventory item.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00132.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Panel containing inventory item UI elements
  prefs: []
  type: TYPE_NORMAL
- en: The following figure illustrates the UI component that has been developed for
    displaying the inventory item. Since the UI component has been modified, we also
    have to update the `InventoryItemUI.cs` script to contain a reference to all of
    the new UI elements in the *Panel*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The listing of the new `InventoryItemUi.cs` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: We also need to update the `UiController.cs` script to handle the new prefab
    accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'The listing for the new UI prefab in `UiController.cs` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding listing , the main concept I want to point out is the implementation
    of the `onClick()` event handler for the buttons within the prefab.
  prefs: []
  type: TYPE_NORMAL
- en: Since we are dynamically generating our UI, and hence the buttons, we need to
    be able to trigger the `onClick()` function somehow; this is done by adding a
    listener, as shown in the code.
  prefs: []
  type: TYPE_NORMAL
- en: For now, when you click the AddButton button, you will get an output on the
    Console Window with the appropriate caption. When you click the DeleteButton button,
    you will get another output on the Console Window, with the appropriate caption.
    Then the item will be destroyed, that is, removed from the inventory.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating the UI with the actual inventory system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have seen and implemented the concepts necessary to make our inventory system
    UI work properly. Now it is time to actually fill the user interface with the
    actual data that is stored in `GameMaster`.
  prefs: []
  type: TYPE_NORMAL
- en: Hooking the category buttons and displaying the data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using the `UiController.cs` script, we are going to create five new methods
    that will handle the proper visualization of our inventory system. We are going
    to add the following five functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`DisplayWeaponsCategory()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DisplayArmourCategory()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DisplayClothingCategory()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DisplayHealthCategory()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DisplayPotionsCategory()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We also need to clear the existing inventory items from the panel when the user
    switches from one category to the next. This will require a private function named
    `ClearInventoryItemPanel()`, which will just do that.
  prefs: []
  type: TYPE_NORMAL
- en: 'The listing for the new `UiController.cs` script is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: We also had to some modifications to the `InventorySystem.cs` script to make
    it possible for us to access properties storing the data more easily.
  prefs: []
  type: TYPE_NORMAL
- en: 'The new listing of the script is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Notice that I have removed the code from the `Update()` function in the `UiController.cs`
    script as it was only for testing purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the inventory system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For testing purposes, I have placed a number of the inventory item prefabs
    created earlier in this chapter. Take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00133.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Inventory items to be collected
  prefs: []
  type: TYPE_NORMAL
- en: 'Start the game from the main menu and go through the character customization
    scene to save the character player and start the game. Once you are in the playable
    scene, go ahead and collect a few of the items that have been placed throughout
    the scene. Take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00134.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Item inserted into inventory - 1
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice in the following screenshot that I have selected the `_GameMaster` GameObject
    to display the Inventory data in the Inspector Window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00135.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Item inserted into inventory - 2
  prefs: []
  type: TYPE_NORMAL
- en: 'We have picked up two weapon types and two armor types. The weapons items we
    have picked up are: Axe 2\. The armor items we have picked up are: Leg Plate,
    SP1, Knee Pad, and SP3, as indicated in the Inspector Window. Take a look at the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00136.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Item inserted into inventory - 3
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that in the Game Window, when we bring up the Inventory Window for display
    and click the weapons button, we get two listings. The listings display the proper
    data for each inventory item in the category. Take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00137.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Armour category
  prefs: []
  type: TYPE_NORMAL
- en: 'To illustrate the `onClick()` event for the add button, please see the following
    screenshot from the Console Window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00138.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Inventory item properties
  prefs: []
  type: TYPE_NORMAL
- en: 'To list the armor items in the inventory, we will click the armour button.
    The following screenshot displays the items in the armour category in the inventory
    based on our data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00139.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We have come a long way. Let's take a moment to put things in perspective.
  prefs: []
  type: TYPE_NORMAL
- en: 'We first created the following scripts to lay the foundation for our inventory
    system in the game:'
  prefs: []
  type: TYPE_NORMAL
- en: '`BaseItem.cs`'
  prefs: []
  type: TYPE_NORMAL
- en: '`InventoryItem.cs`'
  prefs: []
  type: TYPE_NORMAL
- en: '`InventoryItemAgent.cs`'
  prefs: []
  type: TYPE_NORMAL
- en: '`InventorySystem.cs`'
  prefs: []
  type: TYPE_NORMAL
- en: The next step was to create the prefabs for each inventory item and add them
    to the `InventoryItemAgent.cs` script. This in turn allowed us to assign the necessary
    data to identify the prefab as an inventory item during game play.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we started work on the design and development of the user interface for
    the inventory system. We created a sketch of how we would like the inventory window
    to look  and implemented the framework using the build in UI architecture.
  prefs: []
  type: TYPE_NORMAL
- en: Slowly adding to the UI and applying different concepts and new elements, we
    built the final user interface for the inventory system.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we used the prefabs to test the complete addition and removal of the
    inventory items from the user interface.
  prefs: []
  type: TYPE_NORMAL
- en: The next challenge we face is how to actually apply the inventory items to the
    player character.
  prefs: []
  type: TYPE_NORMAL
- en: Inventory items and the player character
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have seen how to create the inventory system, we need to be able
    to utilize it during game play to apply changes to our player character. In this
    section, we will examine how to do just that!
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some of the new features we need to work on:'
  prefs: []
  type: TYPE_NORMAL
- en: Applying a selected inventory item to the player character
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing accounting on both the player character and the inventory system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating the game state accordingly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying inventory items
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We need to make some design decisions on how we are going to handle applying
    the inventory items to the player character, and in turn how the system will handle
    the event. For instance, let's assume the player character has acquired several
    weapons; let's say Weapons A, B, and C.
  prefs: []
  type: TYPE_NORMAL
- en: Let's also assume that initially, the player does not have any active weapons.
    Now, the player selects to activate Weapon A. For this scenario, we would just
    use the inventory item data and activate Weapon A for the player, taking into
    consideration all of the accounting that comes with the weapon.
  prefs: []
  type: TYPE_NORMAL
- en: Now, the player wants to change his/her weapon to Weapon B because it is more
    powerful and they will need it to defeat the boss. Since the player already has
    Weapon A active, what are we going to do with it before we activate Weapon B?
    Do we put it back into the game world, or do we put it back into our inventory
    for later use?
  prefs: []
  type: TYPE_NORMAL
- en: In our case, once you have an item in the inventory, it will stay with you until
    you actually delete it from the inventory, in which case it will be destroyed.
    We need to make a few code modifications, and also some prefab modifications,
    to have everything working together.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start with the `InventoryItem.cs` script. We are going to add new data
    to store the type of the inventory item. This is necessary because we have a category,
    and within the category we have different types of items. This is especially true
    for the Armour category! For instance, we have a Helmet, a Shield, a Shoulder
    Pad, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code listing is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'When you make the update to your script, make sure to go back into the IDE
    and select the proper type for each prefab we have created, to represent your
    inventory items. Take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00140.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Inventory item type field
  prefs: []
  type: TYPE_NORMAL
- en: You will need to update the Type field for each prefab you have created for
    your inventory items.
  prefs: []
  type: TYPE_NORMAL
- en: We also need to update the `PlayerCharacter.cs` script. We are going to make
    the original data variables private and create public properties to access them.
    This way, if we need to perform any extra work prior to, or after, setting or
    getting the property value, we can do so easily.
  prefs: []
  type: TYPE_NORMAL
- en: 'The listing for the `PlayerCharacter.cs` script is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The next code modification will be on the `BarbarianCharacterCustomization.cs`
    script. Since this script has been used in the character customization scene,
    we can utilize the same script and expand it to apply the visual changes to our
    player character. But before we can utilize this script, we will need to copy
    the actual component from the `Base` GameObject defined in our character customization
    scene, and paste it into the `PC_C6` GameObject representing our player character!
  prefs: []
  type: TYPE_NORMAL
- en: When you copy a component using the gear menu in the *Inspector Window*, all
    the configurations, links, and references stay intact! When you paste the component,
    again using the gear menu in the *Inspector Window*, you will have an exact copy
    of the component. This will eliminate the need for us to rewire all of the GameObjects
    to their references in the script.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following two screenshots illustrate the copy of the component from the
    `_Base` GameObject to the `PC_C6` GameObject:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00141.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Using the gear icon to copy and paste a component
  prefs: []
  type: TYPE_NORMAL
- en: 'The `_Base` GameObject has the customization script attached to it, as illustrated
    in the preceding screenshot, copying the values from the `_Base` GameObject to
    transfer over to PC-C6 object. Take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00142.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Using the gear icon to copy and paste a component
  prefs: []
  type: TYPE_NORMAL
- en: This works because the script is actually referencing the different parts of
    the `PC_C6` GameObject hierarchy in the first place. The difference was that it
    used to be attached to the `_Base` GameObject for the customization.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: Can they both be active at the same time, in the same scene, at this
    point? Yes! However, if you have the time, you might want to redo your UI event
    triggers to use the `PC_CC` GameObject, and then you can remove the `BarbarianCharacterCustomization.cs`
    script from the `_Base` GameObject.'
  prefs: []
  type: TYPE_NORMAL
- en: Now we actually need to modify the `BarbarianCharacterCustomization.cs` script
    to activate the different parts of the player character model using the data it
    will receive from the `GameMaster.cs` script.
  prefs: []
  type: TYPE_NORMAL
- en: 'A partial listing of the `CharacterCustomization.cs` script is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: I have not listed the whole script as it would take many pages. But the basic
    concept is to overload the `SetXXXXX()` functions so that they will perform the
    necessary tasks based on the parameters coming in, as for the preceding example, `PlayerCharacter.WeaponType`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next script that needs to be modified is the `UiController.cs` script.
    This is where we will modify the five functions we created previously, to actually
    apply the changes to the player character. Let''s look at one of the functions
    that have been modified, without listing the whole code, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Notice that we are also saving the *item* from the `foreach` loop into the `invItem.item`
    variable. This is important, to make sure the `OnClick()` listener is picking
    up the current `InventoryItem` variable from the list.
  prefs: []
  type: TYPE_NORMAL
- en: The bulk of the work is done in `onClick.AddListener()` for each button. We
    basically set the selected weapon using `GameMaster.instance` to store, and then
    we are calling the `PlayerWeaponChanged()` function to handle some more features.
    This will be demonstrated in the next code listing.
  prefs: []
  type: TYPE_NORMAL
- en: You will need to handle each add button listener in a similar fashion, based
    on how you have designed and implemented your code and your prefabs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we are going to make some modifications to the `GameMaster.cs` script.
    The listing is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The only function I want you to take a note of is the `PlayerArmourChanged()` function.
    It is because of this function that we have to add the new *Type* data variable
    and datatype to the `InventoryItem` class. Take a look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: We have a lot of different types of armor, and we needed a way to distinguish
    between them. Based on the armor type, we would then call the appropriate function
    to activate them on the player character.
  prefs: []
  type: TYPE_NORMAL
- en: How it looks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter was a bit involved with regard to configuring your GameObjects
    and prefabs, and, more importantly, the code that went along to glue everything
    together. I have tried to keep things as simple as possible. Having said that,
    there are a few items that we have not discussed and incorporated in the chapter—the
    topics relating to leveling up, XP, and Quests. If you truly study and understand
    the Inventory System, you can very easily drive and expand it to cover all other
    parts. Unfortunately, we won't be able to implement everything in one book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following is a screenshot illustrating the player character prior to picking
    up the inventory items placed on the level. Notice that `INVENOTRY` is empty in
    the `GameMaster` object. Also, there are no selected items in the `PC-C6` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00143.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Player character data
  prefs: []
  type: TYPE_NORMAL
- en: 'After I move the player character to pick up the inventory items, I will use
    the hot-key programmed to bring up the inventory window. In my case, the J key.
    The following screenshot captures the interaction:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00144.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Player Character Data Inventory
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's look at how things change when we apply a few of the inventory items
    to the player character. You can see the changes applied in the preceding screenshot,
    in the inventory collection.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is a lot covered in this chapter. The core of the chapter was to create
    a usable inventory system. We began the chapter by discussing weighted inventories,
    and gave a brief overview of the concept. We then determined the item types we
    are going to be using for our game.
  prefs: []
  type: TYPE_NORMAL
- en: We created the scripts `BaseItem.cs`, `InventoryItem.cs`, and `InventorySystem.cs`.
    These scripts were then utilized as a starting point to design and develop our
    inventory. We then updated the `GameMaster.cs` script, to test the basics of the
    newly created scripts and be able to view the data within the Unity IDE by serializing
    the attributes. We did this by instantiating an `InventoryItem` and inserting
    it into the `InventorySystem`, and validated the operation visually through the
    IDE.
  prefs: []
  type: TYPE_NORMAL
- en: The next step was to actually create the inventory item prefabs. This section
    covered how to navigate and find your customizable inventory items if your model
    included everything on the actual fbx model, how to extract it from the model,
    and how to convert it into a prefab for later use. Then we created a new script,
    called `InventoryItemAgent.cs`, which was attached to every prefab created to
    represent an inventory item. This script basically gives us the ability to set
    the data for each inventory item from within the IDE. Very useful! We also had
    to attach a collider to each prefab, to handle collision and trigger a pick-up
    call when the player collides with the object.
  prefs: []
  type: TYPE_NORMAL
- en: Once we had the basics in place, we started looking at how to design and implement
    the user interface for our inventory system. We discussed the categories that
    we want to represent, as well as how the items within each category will be listed/displayed
    for the player during game play. We implemented the initial framework for the
    inventory window and integrated it with the game.
  prefs: []
  type: TYPE_NORMAL
- en: Now we are ready to discuss how to create a dynamic item viewer that can be
    populated during runtime and represent the inventory items we have collected correctly.
    We introduced some new user interface concepts, such as scroll view and how to
    utilize layouts in our interface. We did a quick test with a simple placeholder
    to just display the name of the item. Once we got the mechanics working, we implemented
    the main inventory item control panel and converted it into a prefab, to be instantiated
    at runtime when needed.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we worked on the integration of the inventory system with the inventory
    UI, with the GameMaster and player character, to have the final implementation.
    This required that we update and modify more scripts.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of the chapter, you have a fully functional inventory system that
    can be expanded as needed.
  prefs: []
  type: TYPE_NORMAL
