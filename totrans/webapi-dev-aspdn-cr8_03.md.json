["```cs\napp.MapControllers();\n```", "```cs\n[ApiController][Route(\"[controller]\")]\npublic class WeatherForecastController : ControllerBase\n{\n  // Omitted for brevity\n}\n```", "```cs\n[ApiController] [Route(\"api/[controller]\")]\n public class PostsController : ControllerBase\n {\n   // Omitted for brevity\n }\n```", "```cs\nbuilder.Services.AddRouting(options => options.LowercaseUrls = true);\n```", "```cs\n[ApiController] [Route(\"api/[controller]\")]\n [Route(\"api/some-posts-whatever\")]\n public class PostsController : ControllerBase\n {\n   // Omitted for brevity\n }\n```", "```cs\n[HttpGet] public async Task<ActionResult<List<Post>>> GetPosts()\n {\n   // Omitted for brevity\n }\n```", "```cs\n[HttpGet(\"{id}\")] public async Task<ActionResult<Post>> GetPost(int id)\n {\n   // Omitted for brevity\n }\n```", "```cs\n[HttpPut(\"{id}/publish\")] public async Task<ActionResult> PublishPost(int id)\n {\n   // Omitted for brevity\n }\n```", "```cs\n[HttpGet(\"{userId}\")] // api/posts/user/1 public async Task<ActionResult<List<Post>>> GetPostsByUserId(int userId)\n```", "```cs\nMicrosoft.AspNetCore.Routing.Matching.AmbiguousMatchException: The request matched multiple endpoints. Matches:RoutingDemo.Controllers.PostsController.GetPost (RoutingDemo)\n RoutingDemo.Controllers.PostsController.GetPostsByUserId (RoutingDemo)\n```", "```cs\n[HttpGet(\"{id:int}\")] public async Task<ActionResult<Post>> GetPost(int id)\n {\n   // Omitted for brevity\n }\n```", "```cs\n[HttpGet(\"{id:int:range(1, 100)}\")] public async Task<ActionResult<Post>> GetPost(int id)\n {\n   // Omitted for brevity\n }\n```", "```cs\n[HttpGet(\"{id}\")] public async Task<ActionResult<Post>> GetPost(int id)\n```", "```cs\n[HttpGet(\"paged\")] public async Task<ActionResult<List<Post>>> GetPosts([FromQuery] int pageIndex, [FromQuery] int pageSize)\n {\n     // Omitted for brevity\n }\n```", "```cs\n[HttpPost] public async Task<ActionResult<Post>> CreatePost(Post post)\n {\n     // Omitted for brevity\n }\nThe post parameter is a complex type, so [FromBody] inferred that the post should be from the request body. But [FromBody] is not inferred for simple data types, such as int, string, and so on. We will define an action method as follows:\n[HttpPost(\"search\")]\n public async Task<ActionResult<Post>> SearchPosts(string keyword)\n```", "```cs\n[HttpPost(\"search\")] public async Task<ActionResult<Post>> SearchPosts([FromBody] string keyword)\n```", "```cs\ndotnet new webapi -n ConfigurationDemo -controllers\n```", "```cs\n{  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft.AspNetCore\": \"Warning\"\n    }\n  },\n  \"AllowedHosts\": \"*\"\n}\n```", "```cs\n{  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft.AspNetCore\": \"Warning\"\n    }\n  },\n  \"AllowedHosts\": \"*\",\n  \"MyKey\": \"MyValue\"\n}\n```", "```cs\nusing Microsoft.AspNetCore.Mvc;namespace ConfigurationDemo.Controllers;\n[ApiController]\n[Route(\"[controller]\")]\npublic class ConfigurationController(IConfiguration configuration) : ControllerBase\n{\n    [HttpGet]\n    [Route(\"my-key\")]\n    public ActionResult GetMyKey()\n    {\n        var myKey = configuration[\"MyKey\"];\n        return Ok(myKey);\n    }\n}\n```", "```cs\nvar myKey = configuration[\"MyKey\"];\n```", "```cs\nhttprepl http://localhost:5116cd Configuration\nget my-key\n```", "```cs\nHTTP/1.1 200 OKContent-Type: text/plain; charset=utf-8\nDate: Fri, 23 Sep 2022 11:22:40 GMT\nServer: Kestrel\nTransfer-Encoding: chunked\nMyValue\n```", "```cs\n{  \"Database\": {\n    \"Type\": \"SQL Server\",\n    \"ConnectionString\": \"This is the database connection string\"\n  }\n}\n```", "```cs\n[HttpGet][Route(\"database-configuration\")]\npublic ActionResult GetDatabaseConfiguration()\n{\n    var type = configuration[\"Database:Type\"];\n    var connectionString = configuration[\"Database:ConnectionString\"];\n    return Ok(new { Type = type, ConnectionString = connectionString });\n}\n```", "```cs\nhttprepl http://localhost:5116cd Configuration\nget database-configuration\n```", "```cs\nHTTP/1.1 200 OKContent-Type: application/json; charset=utf-8\nDate: Fri, 23 Sep 2022 11:35:55 GMT\nServer: Kestrel\nTransfer-Encoding: chunked\n{\n  \"type\": \"SQL Server\",\n  \"connectionString\": \"This is the database connection string\"\n}\n```", "```cs\nnamespace ConfigurationDemo;public class DatabaseOption\n{\n    public const string SectionName = \"Database\";\n    public string Type { get; set; } = string.Empty;\n    public string ConnectionString { get; set; } = string.Empty;\n}\n```", "```cs\n[HttpGet][Route(\"database-configuration-with-bind\")]\npublic ActionResult GetDatabaseConfigurationWithBind()\n{\n    var databaseOption = new DatabaseOption();\n    // The `SectionName` is defined in the `DatabaseOption` class, which shows the section name in the `appsettings.json` file.\n    configuration.GetSection(DatabaseOption.SectionName).Bind(databaseOption);\n    // You can also use the code below to achieve the same result\n    // configuration.Bind(DatabaseOption.SectionName, databaseOption);\n    return Ok(new { databaseOption.Type, databaseOption.ConnectionString });\n}\n```", "```cs\n[HttpGet][Route(\"database-configuration-with-generic-type\")]\npublic ActionResult GetDatabaseConfigurationWithGenericType()\n{\n    var databaseOption = configuration.GetSection(DatabaseOption.SectionName).Get<DatabaseOption>();\n    return Ok(new { databaseOption.Type, databaseOption.ConnectionString });\n}\n```", "```cs\n// Register the DatabaseOption class as a configuration object.// This line must be added before the `builder.Build()` method.\nbuilder.Services.Configure<DatabaseOption>(builder.Configuration.GetSection(DatabaseOption.SectionName));\nvar app = builder.Build();\n```", "```cs\n[HttpGet][Route(\"database-configuration-with-ioptions\")]\npublic ActionResult GetDatabaseConfigurationWithIOptions([FromServices] IOptions<DatabaseOption> options)\n{\n    var databaseOption = options.Value;\n    return Ok(new { databaseOption.Type, databaseOption.ConnectionString });\n}\n```", "```cs\n[HttpGet][Route(\"database-configuration-with-ioptions-snapshot\")]\npublic ActionResult GetDatabaseConfigurationWithIOptionsSnapshot([FromServices] IOptionsSnapshot<DatabaseOption> options)\n{\n    var databaseOption = options.Value;\n    return Ok(new { databaseOption.Type, databaseOption.ConnectionString });\n}\n```", "```cs\nconfig.AddJsonFile(\"appsettings.json\", optional: true, reloadOnChange: true)  .AddJsonFile($\"appsettings.{env.EnvironmentName}.json\", optional: true, reloadOnChange: true);\n```", "```cs\n[HttpGet][Route(\"database-configuration-with-ioptions-monitor\")]\npublic ActionResult GetDatabaseConfigurationWithIOptionsMonitor([FromServices] IOptionsMonitor<DatabaseOption> options)\n{\n    var databaseOption = options.CurrentValue;\n    return Ok(new { databaseOption.Type, databaseOption.ConnectionString });\n}\n```", "```cs\n{  \"Databases\": {\n    \"System\": {\n      \"Type\": \"SQL Server\",\n      \"ConnectionString\": \"This is the database connection string for the system database.\"\n    },\n    \"Business\": {\n      \"Type\": \"MySQL\",\n      \"ConnectionString\": \"This is the database connection string for the business database.\"\n    }\n  }\n}\n```", "```cs\npublic class DatabaseOptions{\n    public const string SystemDatabaseSectionName = \"System\";\n    public const string BusinessDatabaseSectionName = \"Business\";\n    public string Type { get; set; } = string.Empty;\n    public string ConnectionString { get; set; } = string.Empty;\n}\n```", "```cs\nbuilder.Services.Configure<DatabaseOptions>(DatabaseOptions.SystemDatabaseSectionName, builder.Configuration.GetSection($\"{DatabaseOptions.SectionName}:{DatabaseOptions.SystemDatabaseSectionName}\"));builder.Services.Configure<DatabaseOptions>(DatabaseOptions.BusinessDatabaseSectionName, builder.Configuration.GetSection($\"{DatabaseOptions.SectionName}:{DatabaseOptions.BusinessDatabaseSectionName}\"));\n```", "```cs\n[HttpGet][Route(\"database-configuration-with-named-options\")]\npublic ActionResult GetDatabaseConfigurationWithNamedOptions([FromServices] IOptionsSnapshot<DatabaseOptions> options)\n{\n    var systemDatabaseOption = options.Get(DatabaseOptions.SystemDatabaseSectionName);\n    var businessDatabaseOption = options.Get(DatabaseOptions.BusinessDatabaseSectionName);\n    return Ok(new { SystemDatabaseOption = systemDatabaseOption, BusinessDatabaseOption = businessDatabaseOption });\n}\n```", "```cs\n{  \"systemDatabaseOption\": {\n    \"type\": \"SQL Server\",\n    \"connectionString\": \"This is the database connection string for the system database.\"\n  },\n  \"businessDatabaseOption\": {\n    \"type\": \"MySQL\",\n    \"connectionString\": \"This is the database connection string for the business database.\"\n  }\n}\n```", "```cs\nusing ConfigurationDemo;namespace DependencyInjectionDemo;\npublic static class OptionsCollectionExtensions\n{\n    public static IServiceCollection AddConfig(this IServiceCollection services, IConfiguration configuration)\n    {\n        services.Configure<DatabaseOption>(configuration.GetSection(DatabaseOption.SectionName));\n        services.Configure<DatabaseOptions>(DatabaseOptions.SystemDatabaseSectionName, configuration.GetSection($\"{DatabaseOptions.SectionName}:{DatabaseOptions.SystemDatabaseSectionName}\"));\n        services.Configure<DatabaseOptions>(DatabaseOptions.BusinessDatabaseSectionName, configuration.GetSection($\"{DatabaseOptions.SectionName}:{DatabaseOptions.BusinessDatabaseSectionName}\"));\n        return services;\n    }\n}\n```", "```cs\nbuilder.Services.AddConfig(builder.Configuration);\n```", "```cs\ndotnet user-secrets init\n```", "```cs\n<PropertyGroup>  <TargetFramework>net8.0</TargetFramework>\n  <Nullable>enable</Nullable>\n  <ImplicitUsings>enable</ImplicitUsings>\n  <UserSecretsId>f3351c6a-2508-4243-8d80-89c27758164d</UserSecretsId>\n</PropertyGroup>\n```", "```cs\ndotnet user-secrets set \"Database:Type\" \"PostgreSQL\"dotnet user-secrets set \"Database:ConnectionString\" \"This is the database connection string from user secrets\"\n```", "```cs\n{  \"Database:Type\": \"PostgreSQL\",\n  \"Database:ConnectionString\": \"This is the database connection string from user secrets\"\n}\n```", "```cs\n# List all the secretsdotnet user-secrets list\n# Remove a secret\ndotnet user-secrets remove \"Database:Type\"\n# Clear all the secrets\ndotnet user-secrets clear\n```", "```cs\n{  \"Database\": {\n    \"Type\": \"SQL Server\",\n    \"ConnectionString\": \"This is the database connection string.\"\n  }\n}\n```", "```cs\n$Env:<variable-name>\n```", "```cs\n$Env:Database__Type=\"SQLite\"\n```", "```cs\n$Env:Database__Type\n```", "```cs\ndotnet run Database:Type=MySQL\n```", "```cs\ndotnet run --Database:Type MySQLdotnet run /Database:Type MySQL\n```", "```cs\ndotnet new webapi -n EnvironmentDemo -controllers\n```", "```cs\n{  // Omitted for brevity\n  \"Database\": {\n    \"Type\": \"SQL Server\",\n    \"ConnectionString\": \"This is the database connection string from base appsettings.json.\"\n  }\n}\n```", "```cs\n{  // Omitted for brevity\n  \"Database\": {\n    \"Type\": \"LocalDB\",\n    \"ConnectionString\": \"This is the database connection string from appsettings.Development.json\"\n  }\n}\n```", "```cs\nusing Microsoft.AspNetCore.Mvc;namespace EnvironmentsDemo.Controllers;\n[ApiController]\n[Route(\"[controller]\")]\npublic class ConfigurationController(IConfiguration configuration) : ControllerBase\n{\n    private readonly IConfiguration _configuration;\n    public ConfigurationController(IConfiguration configuration)\n    {\n        _configuration = configuration;\n    }\n    [HttpGet]\n    [Route(\"database-configuration\")]\n    public ActionResult GetDatabaseConfiguration()\n    {\n        var type = configuration[\"database:Type\"];\n        var connectionString = configuration[\"Database:ConnectionString\"];\n        return Ok(new { Type = type, ConnectionString = connectionString });\n    }\n}\n```", "```cs\n  \"profiles\": {    \"http\": {\n      \"commandName\": \"Project\",\n      \"dotnetRunMessages\": true,\n      \"launchBrowser\": true,\n      \"launchUrl\": \"swagger\",\n      \"applicationUrl\": \"http://localhost:5161\",\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n      }\n    },\n    \"https\": {\n      \"commandName\": \"Project\",\n      \"dotnetRunMessages\": true,\n      \"launchBrowser\": true,\n      \"launchUrl\": \"swagger\",\n      \"applicationUrl\": \"https://localhost:7096;http://localhost:5161\",\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n      }\n    },\n    \"IIS Express\": {\n      \"commandName\": \"IISExpress\",\n      \"launchBrowser\": true,\n      \"launchUrl\": \"swagger\",\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n      }\n    }\n  }\n```", "```cs\nBuilding...info: Microsoft.Hosting.Lifetime[14]\n      Now listening on: http://localhost:5161\ninfo: Microsoft.Hosting.Lifetime[0]\n      Application started. Press Ctrl+C to shut down.\ninfo: Microsoft.Hosting.Lifetime[0]\n      Hosting environment: Development\ninfo: Microsoft.Hosting.Lifetime[0]\n      Content root path: C:\\dev\\web-api-with-asp-net\\example_code\\chapter3\\EnvironmentsDemo\n```", "```cs\ndotnet run --launch-profile https\n```", "```cs\n{  // Omitted for brevity\n  \"Database\": {\n    \"Type\": \"PostgreSQL\",\n    \"ConnectionString\": \"This is the database connection string from appsettings.Production.json\"\n  }\n}\n```", "```cs\n// Omitted for brevity  \"profiles\": {\n    // Omitted for brevity\n    \"production\": {\n      \"commandName\": \"Project\",\n      \"dotnetRunMessages\": true,\n      \"launchBrowser\": true,\n      \"launchUrl\": \"swagger\",\n      \"applicationUrl\": \"https://localhost:7096;http://localhost:5161\",\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Production\"\n      }\n    }\n    // Omitted for brevity\n  }\n```", "```cs\ndotnet run --launch-profile production\n```", "```cs\nPS C:\\dev\\web-api-with-asp-net\\example_code\\chapter3\\EnvironmentsDemo> dotnet run --launch-profile productionBuilding...\nwarn: Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServer[8]\n      The ASP.NET Core developer certificate is not trusted. For information about trusting the ASP.NET Core developer certificate, see https://aka.ms/aspnet/https-trust-dev-cert.\ninfo: Microsoft.Hosting.Lifetime[14]\n      Now listening on: https://localhost:7096\ninfo: Microsoft.Hosting.Lifetime[14]\n      Now listening on: http://localhost:5161\ninfo: Microsoft.Hosting.Lifetime[0]\n      Application started. Press Ctrl+C to shut down.\ninfo: Microsoft.Hosting.Lifetime[0]\n      Hosting environment: Production\ninfo: Microsoft.Hosting.Lifetime[0]\n      Content root path: C:\\dev\\web-api-with-asp-net\\example_code\\chapter3\\EnvironmentsDemo\n```", "```cs\n$Env:ASPNETCORE_ENVIRONMENT = \"Production\"dotnet run --no-launch-profile\n```", "```cs\n[Environment]::SetEnvironmentVariable(\"ASPNETCORE_ENVIRONMENT\", \"Production\", \"Machine\")\n```", "```cs\ndotnet run --environment Production\n```", "```cs\n{  // Omitted for brevity\n  \"configurations\": [\n    {\n      \"name\": \".NET Core Launch (web)\",\n      \"type\": \"coreclr\",\n      // Omitted for brevity\n      \"env\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n      },\n      // Omitted for brevity\n    }\n  ]\n}\n```", "```cs\nif (app.Environment.IsDevelopment()){\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\n```", "```cs\npublic static class Environments{\n    public static readonly string Development = \"Development\";\n    public static readonly string Staging = \"Staging\";\n    public static readonly string Production = \"Production\";\n}\n```", "```cs\nvar builder = WebApplication.CreateBuilder(new WebApplicationOptions{\n    EnvironmentName = Environments.Staging\n});\n```", "```cs\n// Omitted for brevityvar app = builder.Build();\n// Read the environment variable ASPNETCORE_ENVIRONMENT\nvar environmentName = Environment.GetEnvironmentVariable(\"ASPNETCORE_ENVIRONMENT\");\nConsole.WriteLine($\"ASPNETCORE_ENVIRONMENT is {environmentName}\");\n```", "```cs\nPS C:\\dev\\web-api-with-asp-net\\example_code\\chapter3\\EnvironmentsDemo> dotnet runBuilding...\nASPNETCORE_ENVIRONMENT is Development\ninfo: Microsoft.Hosting.Lifetime[14]\n      Now listening on: http://localhost:5161\n# Omitted for brevity\n```"]