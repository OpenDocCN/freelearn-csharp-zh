["```cs\n    using System;\n    using System.Collections.Generic;\n    using System.Reactive.Concurrency;\n    using System.Reactive.Linq;\n    using System.Threading;\n    using static System.Console;\n    using static System.Threading.Thread;\n    ```", "```cs\n    static IEnumerable<int> EnumerableEventSequence()\n    {\n      for (int i = 0; i < 10; i++)\n      {\n        Sleep(TimeSpan.FromSeconds(0.5));\n        yield return i;\n      }\n    }\n    ```", "```cs\n    foreach (int i in EnumerableEventSequence())\n    {\n      Write(i);\n    }\n\n    WriteLine();\n    WriteLine(\"IEnumerable\");\n\n    IObservable<int> o = EnumerableEventSequence().().ToObservable();\n    using (IDisposable subscription = o.Subscribe(Write))\n    {\n      WriteLine();\n      WriteLine(\"IObservable\");\n    }\n\n    o = EnumerableEventSequence().ToObservable()\n        .SubscribeOn(TaskPoolScheduler.Default);\n    using (IDisposable subscription = o.Subscribe(Write))\n    {\n      WriteLine();\n      WriteLine(\"IObservable async\");\n      ReadLine();\n    }\n    ```", "```cs\n    using System;\n    using System.Collections.Generic;\n    using System.Reactive.Concurrency;\n    using System.Reactive.Disposables;\n    using System.Reactive.Linq;\n    using static System.Console;\n    using static System.Threading.Thread;\n    ```", "```cs\n    class CustomObserver : IObserver<int>\n    {\n      public void OnNext(int value)\n      {\n        WriteLine($\"Next value: {value}; Thread Id: {CurrentThread.ManagedThreadId}\");\n      }\n\n      public void OnError(Exception error)\n      {\n        WriteLine($\"Error: {error.Message}\");\n      }\n\n      public void OnCompleted()\n      {\n        WriteLine(\"Completed\");\n      }\n    }\n\n    class CustomSequence : IObservable<int>\n    {\n      private readonly IEnumerable<int> _numbers;\n\n      public CustomSequence(IEnumerable<int> numbers)\n      {\n        _numbers = numbers;\n      }\n      public IDisposable Subscribe(IObserver<int> observer)\n      {\n        foreach (var number in _numbers)\n        {\n          observer.OnNext(number);\n        }\n        observer.OnCompleted();\n        return Disposable.Empty;\n      }\n    }\n    ```", "```cs\n    var observer = new CustomObserver();\n\n    var goodObservable = new CustomSequence(new[] {1, 2, 3, 4, 5});\n    var badObservable = new CustomSequence(null);\n\n    using (IDisposable subscription = goodObservable.Subscribe(observer))\n    {\n    }\n\n    using (IDisposable subscription = goodObservable\n        .SubscribeOn(TaskPoolScheduler.Default).Subscribe(observer))\n    {\n      Sleep(TimeSpan.FromMilliseconds(100));\n      WriteLine(\"Press ENTER to continue\");\n      ReadLine();\n    }\n\n    using (IDisposable subscription = badObservable\n        .SubscribeOn(TaskPoolScheduler.Default).Subscribe(observer))\n    {\n      Sleep(TimeSpan.FromMilliseconds(100));\n      WriteLine(\"Press ENTER to continue\");\n      ReadLine();\n    }\n    ```", "```cs\n    using System;\n    using System.Reactive.Subjects;\n    using static System.Console;\n    using static System.Threading.Thread;\n    ```", "```cs\n    static IDisposable OutputToConsole<T>(IObservable<T> sequence)\n    {\n      return sequence.Subscribe(\n        obj => WriteLine($\"{obj}\")\n        , ex => WriteLine($\"Error: {ex.Message}\")\n        , () => WriteLine(\"Completed\")\n      );\n    }\n    ```", "```cs\n    WriteLine(\"Subject\");\n    var subject = new Subject<string>();\n\n    subject.OnNext(\"A\");\n    using (var subscription = OutputToConsole(subject))\n    {\n      subject.OnNext(\"B\");\n      subject.OnNext(\"C\");\n      subject.OnNext(\"D\");\n      subject.OnCompleted();\n      subject.OnNext(\"Will not be printed out\");\n    }\n\n    WriteLine(\"ReplaySubject\");\n    var replaySubject = new ReplaySubject<string>();\n\n    replaySubject.OnNext(\"A\");\n    using (var subscription = OutputToConsole(replaySubject))\n    {\n      replaySubject.OnNext(\"B\");\n      replaySubject.OnNext(\"C\");\n      replaySubject.OnNext(\"D\");\n      replaySubject.OnCompleted();\n    }\n\n    WriteLine(\"Buffered ReplaySubject\");\n    var bufferedSubject = new ReplaySubject<string>(2);\n\n    bufferedSubject.OnNext(\"A\");\n    bufferedSubject.OnNext(\"B\");\n    bufferedSubject.OnNext(\"C\");\n    using (var subscription = OutputToConsole(bufferedSubject))\n    {\n      bufferedSubject.OnNext(\"D\");\n      bufferedSubject.OnCompleted();\n    }\n\n    WriteLine(\"Time window ReplaySubject\");\n    var timeSubject = new ReplaySubject<string>(TimeSpan.FromMilliseconds(200));\n\n    timeSubject.OnNext(\"A\");\n    Sleep(TimeSpan.FromMilliseconds(100));\n    timeSubject.OnNext(\"B\");\n    Sleep(TimeSpan.FromMilliseconds(100));\n    timeSubject.OnNext(\"C\");\n    Sleep(TimeSpan.FromMilliseconds(100));\n    using (var subscription = OutputToConsole(timeSubject))\n    {\n      Sleep(TimeSpan.FromMilliseconds(300));\n      timeSubject.OnNext(\"D\");\n      timeSubject.OnCompleted();\n    }\n\n    WriteLine(\"AsyncSubject\");\n    var asyncSubject = new AsyncSubject<string>();\n\n    asyncSubject.OnNext(\"A\");\n    using (var subscription = OutputToConsole(asyncSubject))\n    {\n      asyncSubject.OnNext(\"B\");\n      asyncSubject.OnNext(\"C\");\n      asyncSubject.OnNext(\"D\");\n      asyncSubject.OnCompleted();\n    }\n\n    WriteLine(\"BehaviorSubject\");\n    var behaviorSubject = new BehaviorSubject<string>(\"Default\");\n    using (var subscription = OutputToConsole(behaviorSubject))\n    {\n      behaviorSubject.OnNext(\"B\");\n      behaviorSubject.OnNext(\"C\");\n      behaviorSubject.OnNext(\"D\");\n      behaviorSubject.OnCompleted();\n    }\n    ```", "```cs\n    using System;\n    using System.Reactive.Disposables;\n    using System.Reactive.Linq;\n    using static System.Console;\n    using static System.Threading.Thread;\n    ```", "```cs\n    static IDisposable OutputToConsole<T>(IObservable<T> sequence)\n    {\n      return sequence.Subscribe(\n        obj => WriteLine(\"{0}\", obj)\n        , ex => WriteLine(\"Error: {0}\", ex.Message)\n        , () => WriteLine(\"Completed\")\n      );\n    }\n    ```", "```cs\n    IObservable<int> o = Observable.Return(0);\n    using (var sub = OutputToConsole(o));\n    WriteLine(\" ---------------- \");\n\n    o = Observable.Empty<int>();\n    using (var sub = OutputToConsole(o));\n    WriteLine(\" ---------------- \");\n\n    o = Observable.Throw<int>(new Exception());\n    using (var sub = OutputToConsole(o));\n    WriteLine(\" ---------------- \");\n\n    o = Observable.Repeat(42);\n    using (var sub = OutputToConsole(o.Take(5)));\n    WriteLine(\" ---------------- \");\n\n    o = Observable.Range(0, 10);\n    using (var sub = OutputToConsole(o));\n    WriteLine(\" ---------------- \");\n\n    o = Observable.Create<int>(ob => {\n      for (int i = 0; i < 10; i++)\n      {\n        ob.OnNext(i);\n      }\n      return Disposable.Empty;\n    });\n    using (var sub = OutputToConsole(o)) ;\n    WriteLine(\" ---------------- \");\n\n    o = Observable.Generate(\n      0 // initial state\n      , i => i < 5 // while this is true we continue the sequence\n      , i => ++i // iteration\n      , i => i*2 // selecting result\n    );\n    using (var sub = OutputToConsole(o));\n    WriteLine(\" ---------------- \");\n\n    IObservable<long> ol = Observable.Interval(TimeSpan.FromSeconds(1));\n    using (var sub = OutputToConsole(ol))\n    {\n      Sleep(TimeSpan.FromSeconds(3));\n    };\n    WriteLine(\" ---------------- \");\n\n    ol = Observable.Timer(DateTimeOffset.Now.AddSeconds(2));\n    using (var sub = OutputToConsole(ol))\n    {\n      Sleep(TimeSpan.FromSeconds(3));\n    };\n    WriteLine(\" ---------------- \");\n    ```", "```cs\n    using System;\n    using System.Reactive.Linq;\n    using static System.Console;\n    ```", "```cs\n    static IDisposable OutputToConsole<T>(IObservable<T> sequence, int innerLevel)\n    {\n      string delimiter = innerLevel == 0 \n            ? string.Empty \n            : new string('-', innerLevel*3);\n\n      return sequence.Subscribe(\n        obj => WriteLine($\"{delimiter}{obj}\")\n        , ex => WriteLine($\"Error: {ex.Message}\")\n        , () => WriteLine($\"{delimiter}Completed\")\n      );\n    }\n    ```", "```cs\n    IObservable<long> sequence = Observable.Interval(\n        TimeSpan.FromMilliseconds(50)).Take(21);\n\n    var evenNumbers = from n in sequence\n            where n % 2 == 0\n            select n;\n\n    var oddNumbers = from n in sequence\n            where n % 2 != 0\n            select n;\n\n    var combine = from n in evenNumbers.Concat(oddNumbers)\n          select n;\n\n    var nums = (from n in combine\n          where n % 5 == 0\n          select n)\n        .Do(n => WriteLine($\"------Number {n} is processed in Do method\"));\n\n    using (var sub = OutputToConsole(sequence, 0))\n    using (var sub2 = OutputToConsole(combine, 1))\n    using (var sub3 = OutputToConsole(nums, 2))\n    {\n      WriteLine(\"Press enter to finish the demo\");\n      ReadLine();\n    }\n    ```", "```cs\n    using System;\n    using System.Reactive;\n    using System.Reactive.Linq;\n    using System.Reactive.Threading.Tasks;\n    using System.Threading.Tasks;\n    using System.Timers;\n    using static System.Console;\n    using static System.Threading.Thread;\n    ```", "```cs\n    static async Task<T> AwaitOnObservable<T>(IObservable<T> observable)\n    {\n      T obj = await observable;\n      WriteLine($\"{obj}\" );\n      return obj;\n    }\n\n    static Task<string> LongRunningOperationTaskAsync(string name)\n    {\n      return Task.Run(() => LongRunningOperation(name));\n    }\n\n    static IObservable<string> LongRunningOperationAsync(string name)\n    {\n      return Observable.Start(() => LongRunningOperation(name));\n    }\n\n    static string LongRunningOperation(string name)\n    {\n      Sleep(TimeSpan.FromSeconds(1));\n      return $\"Task {name} is completed. Thread Id {CurrentThread.ManagedThreadId}\";\n    }\n\n    static IDisposable OutputToConsole(IObservable<EventPattern<ElapsedEventArgs>> sequence)\n    {\n      return sequence.Subscribe(\n        obj => WriteLine($\"{obj.EventArgs.SignalTime}\")\n        , ex => WriteLine($\"Error: {ex.Message}\")\n        , () => WriteLine(\"Completed\")\n      );\n    }\n\n    static IDisposable OutputToConsole<T>(IObservable<T> sequence)\n    {\n      return sequence.Subscribe(\n        obj => WriteLine(\"{0}\", obj)\n        , ex => WriteLine(\"Error: {0}\", ex.Message)\n        , () => WriteLine(\"Completed\")\n      );\n    }\n    ```", "```cs\n    delegate string AsyncDelegate(string name);\n\n    static void Main(string[] args)\n    {\n    IObservable<string> o = LongRunningOperationAsync(\"Task1\");\n    using (var sub = OutputToConsole(o))\n    {\n      Sleep(TimeSpan.FromSeconds(2));\n    };\n    WriteLine(\" ---------------- \");\n\n    Task<string> t = LongRunningOperationTaskAsync(\"Task2\");\n    using (var sub = OutputToConsole(t.ToObservable()))\n    {\n      Sleep(TimeSpan.FromSeconds(2));\n    };\n    WriteLine(\" ---------------- \");\n\n    AsyncDelegate asyncMethod = LongRunningOperation;\n\n    // marked as obsolete, use tasks instead\n    Func<string, IObservable<string>> observableFactory = \n      Observable.FromAsyncPattern<string, string>(\n            asyncMethod.BeginInvoke, asyncMethod.EndInvoke);\n\n    o = observableFactory(\"Task3\");\n    using (var sub = OutputToConsole(o))\n    {\n      Sleep(TimeSpan.FromSeconds(2));\n    };\n    WriteLine(\" ---------------- \");\n\n    o = observableFactory(\"Task4\");\n    AwaitOnObservable(o).Wait();\n    WriteLine(\" ---------------- \");\n\n    using (var timer = new Timer(1000))\n    {\n      var ot = Observable.\n                   FromEventPattern<ElapsedEventHandler, ElapsedEventArgs>(\n        h => timer.Elapsed += h,\n                h => timer.Elapsed -= h);\n      timer.Start();\n\n      using (var sub = OutputToConsole(ot))\n      {\n        Sleep(TimeSpan.FromSeconds(5));\n      }\n      WriteLine(\" ---------------- \");\n      timer.Stop();\n    }\n    ```"]