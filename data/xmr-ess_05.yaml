- en: Chapter 5. Developing Your First Android App with Xamarin.Android
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章. 使用Xamarin.Android开发您的第一个Android应用
- en: 'In this chapter, we will develop a sample app similar to `NationalParks.iOS`
    from the last chapter using Xamarin.Android. This chapter covers the following
    topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用Xamarin.Android开发一个类似于上一章中的`NationalParks.iOS`的示例应用。本章涵盖了以下主题：
- en: Overview of the sample app
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例应用概述
- en: Creating a Xamarin.Android app
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建Xamarin.Android应用
- en: Editing Android layout files with Xamarin Studio
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Xamarin Studio编辑Android布局文件
- en: Running and debugging apps with Xamarin Studio
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Xamarin Studio运行和调试应用
- en: Running and debugging apps with Visual Studio
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Visual Studio运行和调试应用
- en: Inspecting compile-time generated elements of a Xamarin.Android app
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查Xamarin.Android应用的编译时生成元素
- en: The sample app
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例应用
- en: 'The sample app we will create in this chapter follows the same basic design
    as the `NationalParks.iOS` app from the previous chapter. To review the screen
    mockups and general description you can refer to the *The sample national parks
    app* section in [Chapter 4](ch04.html "Chapter 4. Developing Your First iOS App
    with Xamarin.iOS"), *Developing Your First iOS App with Xamarin.iOS*. The following
    screenshots show the Android screens from the provided solution:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将创建的示例应用将遵循上一章中`NationalParks.iOS`应用的基本设计。要回顾屏幕原型和一般描述，您可以参考[第4章](ch04.html
    "第4章. 使用Xamarin.iOS开发您的第一个iOS应用")中的*示例国家公园应用*部分，*使用Xamarin.iOS开发您的第一个iOS应用*。以下截图显示了提供的解决方案中的Android屏幕：
- en: '![The sample app](img/0838OT_05_06.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![示例应用](img/0838OT_05_06.jpg)'
- en: There is one design change we will introduce in the Android version of the app;
    we will create a singleton class to help manage loading and saving parks to a
    JSON-formatted file. This will be discussed further when we start building the
    singleton class in an upcoming section, *Creating the NationalParksData singleton*.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在应用的Android版本中引入一个设计变更；我们将创建一个单例类来帮助管理将公园加载和保存到JSON格式文件。我们将在创建单例类的下一节中进一步讨论这个问题，*创建NationalParksData单例*。
- en: Creating NationalParks.Droid
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建NationalParks.Droid
- en: We will begin by creating a new Android project and adding it to our existing
    `NationalParks` solution created in the previous chapter. Xamarin Studio allows
    both Android and iOS projects to be part of the same solution. This proves to
    be very useful particularly as we move towards the later chapters that are focused
    on code reuse. You will find that the next chapter, [Chapter 6](ch06.html "Chapter 6. The
    Sharing Game"), *The Sharing Game*, will show you exactly how to do this.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先创建一个新的Android项目，并将其添加到上一章创建的现有`NationalParks`解决方案中。Xamarin Studio允许Android和iOS项目成为同一解决方案的一部分。这在我们向后续章节过渡，特别是关注代码重用的章节时，证明是非常有用的。您会发现下一章，[第6章](ch06.html
    "第6章. 分享游戏")，*分享游戏*，将向您展示如何做到这一点。
- en: 'To create the national parks Android app, perform the following steps:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建国家公园Android应用，请执行以下步骤：
- en: You first need to launch Xamarin Studio and open the `NationalParks` solution
    created in the previous chapter.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您首先需要启动Xamarin Studio并打开上一章创建的`NationalParks`解决方案。
- en: Following this, select the `NationalParks` solution in the **Solution** pad
    on the left-hand side of Xamarin Studio, right-click on it, and navigate to **Add**
    | **Add New Project…**, as shown in the following screenshot:![Creating NationalParks.Droid](img/0838OT_05_07.jpg)
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在Xamarin Studio左侧的**解决方案**面板中选择`NationalParks`解决方案，右键单击它，然后导航到**添加** | **添加新项目…**，如图所示：![创建NationalParks.Droid](img/0838OT_05_07.jpg)
- en: Navigate to **C#** | **Android** on the left-hand side of the dialog box and
    **Android Application** in the middle section, as follows:![Creating NationalParks.Droid](img/0838OT_05_08.jpg)
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在对话框的左侧导航到**C#** | **Android**，在中间部分选择**Android应用程序**，如下所示：![创建NationalParks.Droid](img/0838OT_05_08.jpg)
- en: You now need to enter `NationalParks.Droid` in the **Name** field and click
    on **OK**. Xamarin Studio will then create a new project, add it to the `NationalParks`
    solution, and open it.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您需要在**名称**字段中输入`NationalParks.Droid`并点击**确定**。Xamarin Studio将创建一个新的项目，将其添加到`NationalParks`解决方案中，并打开它。
- en: Reviewing the app
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查应用
- en: A simple working app has been created that contains a number of files; let's
    take a few minutes to review what was created.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 已创建一个简单的工作应用，其中包含多个文件；让我们花几分钟时间回顾一下创建了什么。
- en: Resources
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 资源
- en: The `Resources` folder corresponds to the `res` folder in a traditional Java
    Android app. It contains subfolders with the various types of resources that can
    be used, including layouts, menus, drawables, strings, and styles. Subfolders
    within `Resources` follow the same naming conventions as in traditional Java Android
    apps, drawables, layouts, values, and so on.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`Resources` 文件夹对应于传统 Java Android 应用中的 `res` 文件夹。它包含可用于各种类型的子文件夹，包括布局、菜单、可绘制元素、字符串和样式。`Resources`
    中的子文件夹遵循与传统 Java Android 应用相同的命名约定，如可绘制元素、布局、values 等。'
- en: The Resource.designer.cs file
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Resource.designer.cs 文件
- en: '`Resource.designer.cs` is a C# source file in the `Resources` folder that is
    generated by Xamarin.Android and contains constant ID definitions for all the
    resources in the app; it corresponds to the `R.java` file generated for Java Android
    apps.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`Resource.designer.cs` 是位于 `Resources` 文件夹中的一个 C# 源文件，由 Xamarin.Android 生成，包含应用中所有资源的常量
    ID 定义；它对应于为 Java Android 应用生成的 `R.java` 文件。'
- en: The MainActivity.cs file
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MainActivity.cs 文件
- en: '`MainActivity.cs` is a C# source file in the root of the `NationalParks.Droid`
    project and is the only activity added to the project. Open the file to view the
    contents. Note the attributes at the top of the class:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`MainActivity.cs` 是位于 `NationalParks.Droid` 项目根目录中的一个 C# 源文件，并且是项目中添加的唯一活动。打开文件查看内容。注意类顶部的属性：'
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The specification of `Label` and `MainLauncher` will affect the contents of
    `ApplicationManifest.xml`. Note the overridden `OnCreate()` method in the following
    code snippet:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`Label` 和 `MainLauncher` 的指定将影响 `ApplicationManifest.xml` 的内容。注意以下代码片段中的重写
    `OnCreate()` 方法：'
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: With the exception of the fact that `OnCreate()` is using C# syntax, the code
    within it looks very similar to what you might find in a Java Android app. Near
    the top, the content is set to the `Main` layout file; `Resource.Layout.Main`
    is a constant defined in `Resource.designer.cs`. A reference to a `Button` instance
    is obtained by a call to `FindViewById()`, and then an event handler is assigned
    to handle click events.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `OnCreate()` 使用 C# 语法外，其中的代码看起来与您可能在 Java Android 应用中找到的代码非常相似。接近顶部，内容被设置为
    `Main` 布局文件；`Resource.Layout.Main` 是在 `Resource.designer.cs` 中定义的一个常量。通过调用 `FindViewById()`
    获取对 `Button` 实例的引用，然后分配一个事件处理器来处理点击事件。
- en: The Main.axml file
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主.axml 文件
- en: '`Main.axml` is an XML layout file located in the `Resources/layout` folder.
    Xamarin.Android uses the extension `.axml` for layout files rather than simply
    using `.xml`. Other than using a different extension, Xamarin.Android treats layout
    files in essentially the same way that a Java Android app does. Open `Main.axml`
    to view the contents; at the bottom of the screen, there are tabs to switch between
    a visual, content view, and a source or XML view. Notice that there is a single
    `Button` instance defined with `LinearLayout`.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`Main.axml` 是位于 `Resources/layout` 文件夹中的一个 XML 布局文件。Xamarin.Android 使用 `.axml`
    扩展名而不是简单的 `.xml` 来表示布局文件。除了使用不同的扩展名外，Xamarin.Android 以与 Java Android 应用基本相同的方式处理布局文件。打开
    `Main.axml` 查看内容；屏幕底部有标签页可以切换到视觉、内容视图和源或 XML 视图。注意定义了一个使用 `LinearLayout` 的单个 `Button`
    实例。'
- en: 'Xamarin.Android honors the Android naming convention for layout folders, as
    follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin.Android 遵循 Android 命名约定来命名布局文件夹，如下所示：
- en: '`Resources/layout`: This naming convention is used for a normal screen size
    (default)'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Resources/layout`：这种命名约定用于正常屏幕尺寸（默认）'
- en: '`Resources/layout-small`: This naming convention is used for small screens'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Resources/layout-small`：这种命名约定用于小屏幕'
- en: '`Resources/layout-large`: This naming convention is used for large screens'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Resources/layout-large`：这种命名约定用于大屏幕'
- en: '`Resources/layout-land`: This naming convention is used for a normal screen
    size in landscape mode'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Resources/layout-land`：这种命名约定用于横屏模式下的正常屏幕尺寸'
- en: Project Options
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目选项
- en: 'There are many options that can be set that affect the way your app is compiled,
    linked, and executed. These options can be viewed and modified from the **Project
    Options** dialog box. The sections that are most interesting for Android apps
    are as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多选项可以设置，这些选项会影响您的应用编译、链接和执行的方式。这些选项可以从 **项目选项** 对话框中查看和修改。对 Android 应用最有兴趣的部分如下：
- en: '**Build** | **General**: This setting is used for the Target framework version'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建** | **常规**：此设置用于目标框架版本'
- en: '**Build** | **Android Build**: This setting is used by the compile and link
    process to optimize the resulting executable'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建** | **Android 构建**：此设置用于编译和链接过程以优化生成的可执行文件'
- en: '**Build** | **Android Application**: This setting gives the default package
    name, app version number, and app permissions'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建** | **Android应用程序**：此设置提供默认包名、应用程序版本号和应用程序权限'
- en: 'To set the Target framework version for `NationalParks.Droid`, perform the
    following steps:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要为`NationalParks.Droid`设置目标框架版本，请执行以下步骤：
- en: Select the `NationalParks.Droid` project in the **Solution** pad.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**解决方案**选项卡中选择`NationalParks.Droid`项目。
- en: Right-click and select **Options**.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击并选择**选项**。
- en: Navigate to **Build** | **General** and set the **Target Framework** option
    to **4.0.3 (Ice Cream Sandwich)** and click on **OK**.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**构建** | **常规**，将**目标框架**选项设置为**4.0.3 (冰激凌三明治**)，然后点击**确定**。
- en: Xamarin Studio Preferences
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Xamarin Studio首选项
- en: 'Xamarin Studio provides a **Preferences** dialog box that allows you to adjust
    various preferences that control how the environment operates. These are as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin Studio提供了一个**首选项**对话框，允许您调整控制环境操作的各种首选项。以下是一些：
- en: '**Projects** | **SDK Locations** | **Android**: Using this option, you can
    control the location for the Android SDK, Java SDK, and Android NDK that should
    be used to compile and run apps'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目** | **SDK位置** | **Android**：使用此选项，您可以控制用于编译和运行应用程序的Android SDK、Java SDK和Android
    NDK的位置'
- en: '**Projects** | **Android**: These settings affect how the Android Emulator
    is launched including command-line arguments'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目** | **Android**：这些设置影响Android模拟器的启动方式，包括命令行参数'
- en: Running and debugging with Xamarin Studio
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Xamarin Studio运行和调试
- en: While the app we currently have is very simple, it is runnable, and now is a
    good time to take a look at how you can execute and debug Xamarin.Android apps.
    Apps can be executed in a number of ways; the two most common ways are the Android
    Emulator and a physical device.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们目前拥有的应用程序非常简单，但它可以运行，现在是时候看看如何执行和调试Xamarin.Android应用程序了。应用程序可以通过多种方式执行；最常见的方式是Android模拟器和物理设备。
- en: Running apps with the Android Emulator
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Android模拟器运行应用程序
- en: Xamarin.Android works with the Android Emulator to support executing and debugging
    your app. When Xamarin.Android is installed, a number of **Android Virtual Devices**
    (**AVD**) are automatically set up for your use. You can launch the AVD Manager
    from the **Tools** menu by choosing **Open Android Emulator Manager**.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin.Android与Android模拟器一起工作，以支持执行和调试您的应用程序。当Xamarin.Android安装后，会自动为您设置一系列**Android虚拟设备**（**AVD**）。您可以通过从**工具**菜单中选择**打开Android模拟器管理器**来启动AVD管理器。
- en: 'To run `NationalParks.Droid`, perform the following steps:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行`NationalParks.Droid`，请执行以下步骤：
- en: Click on the **Start/Stop** button on the left-hand side of the taskbar. You
    can also run the app by pressing *F5* or by navigating to **Run** | **Start Debugging**.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击任务栏左侧的**启动/停止**按钮。您也可以通过按*F5*键或导航到**运行** | **开始调试**来运行应用程序。
- en: Then, select an AVD on the **Select Device** dialog box and click on **Start
    Emulator**.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在**选择设备**对话框中选择一个AVD，然后点击**启动模拟器**。
- en: When the emulator has completed startup, select the name of the running emulator
    instance in the **Devices** list and click on **OK**.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当模拟器完成启动后，在**设备**列表中选择正在运行的模拟器实例名称，然后点击**确定**。
- en: You now need to click on the **Hello World** button on the app and note the
    caption change.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您需要点击应用程序上的**Hello World**按钮，并注意标题的变化。
- en: Switch back to Xamarin Studio and stop the app by clicking on the **Start/Stop**
    button on the left-hand side of the taskbar.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换回Xamarin Studio，通过点击任务栏左侧的**启动/停止**按钮来停止应用程序。
- en: Open `MainActivity.cs` and set a breakpoint on the `SetContentView()` statement
    in `OnCreate()` by clicking in the far-left margin of the editor window, which
    you can see in the following screenshot. At this point, restart `NationalParks.Droid`;
    the app will stop at the breakpoint:![Running apps with the Android Emulator](img/0838OT_05_02.jpg)
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`MainActivity.cs`，通过在编辑器窗口的左侧边缘点击来在`OnCreate()`中的`SetContentView()`语句上设置断点，您可以在下面的屏幕截图中看到。此时，重新启动`NationalParks.Droid`；应用程序将在断点处停止：![使用Android模拟器运行应用程序](img/0838OT_05_02.jpg)
- en: You will find the basic flow controls to step through execution in the taskbar.
    These allow you to (icons from left to right) continue execution, step over the
    current line, step into the current function, and step out of the current function:![Running
    apps with the Android Emulator](img/0838OT_05_05.jpg)
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将在任务栏中找到基本流程控制，用于逐步执行。这些允许您（从左到右的图标）继续执行、跳过当前行、进入当前函数和退出当前函数：![使用Android模拟器运行应用程序](img/0838OT_05_05.jpg)
- en: Use the step controls to go to line 27, highlight the button in the text, right-click
    on it and select **Expression Evaluator**. The **Expression Evaluator** dialog
    box can be used to view the state of objects during the program execution, as
    follows:![Running apps with the Android Emulator](img/0838OT_05_03.jpg)
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用步骤控件跳转到第27行，突出显示文本中的按钮，右键单击并选择**表达式评估器**。**表达式评估器**对话框可以用来查看程序执行期间对象的状态，如下所示：![使用Android模拟器运行应用](img/0838OT_05_03.jpg)
- en: You will also notice a set of panels at the bottom of Xamarin Studio that contains
    tabs for **Watch**, **Locals**, **Breakpoints**, **Threads**, **Application Output**,
    and **Call Stack**, as follows:![Running apps with the Android Emulator](img/0838OT_05_04.jpg)
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还会注意到Xamarin Studio底部有一组面板，包含**观察**、**局部变量**、**断点**、**线程**、**应用程序输出**和**调用堆栈**标签页，如下所示：![使用Android模拟器运行应用](img/0838OT_05_04.jpg)
- en: Click on the **Continue** button to allow the app to continue running.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**继续**按钮以允许应用继续运行。
- en: As you can see, Xamarin Studio, in combination with the Android Emulator, provides
    a robust environment to execute and debug apps with most of the features that
    can be found in most modern IDEs.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，Xamarin Studio与Android模拟器结合使用，提供了一个强大的环境来执行和调试应用，其中包含大多数现代IDE中可以找到的功能。
- en: You can make any modifications to the list of AVDs from the AVD Manager (**Tools**
    | **Open Android Emulator Manager**), and you can make any adjustments to the
    Android SDK from Android SDK Manager (**Tools** | **Open Android SDK Manager**).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从AVD管理器（**工具** | **打开Android模拟器管理器**）修改AVD列表，也可以从Android SDK管理器（**工具** |
    **打开Android SDK管理器**）调整Android SDK。
- en: Running apps on a physical device
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在物理设备上运行应用
- en: Xamarin Studio also supports debugging apps running on a physical device. This
    is generally the most productive way to develop and debug apps as many of the
    device features can be challenging to configure and use in the emulator. There
    is really nothing special about getting Xamarin Studio to work with a device;
    simply go through the normal steps of enabling USB debugging on the device, attach
    the device to your computer, and start the app from Xamarin Studio; the device
    will show up in Xamarin Studio's **Select Device** dialog box. As you might be
    aware, on Windows, a special USB driver is required that corresponds with the
    device being used; generally OS X users are good to go.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin Studio还支持在物理设备上调试应用。这通常是开发调试应用最有效的方法，因为许多设备功能在模拟器中配置和使用可能具有挑战性。要让Xamarin
    Studio与设备协同工作，实际上并没有什么特别之处；只需按照设备上启用USB调试的正常步骤操作，将设备连接到您的计算机，并从Xamarin Studio启动应用；设备将显示在Xamarin
    Studio的**选择设备**对话框中。如您所知，在Windows上，需要一个与所使用的设备相对应的特殊USB驱动程序；通常，OS X用户无需担心。
- en: The issues related to debugging with an emulator or physical device is not unique
    or even different because of the use of Xamarin; it's an issue that all Android
    developers face.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 使用模拟器或物理设备进行调试的问题并不独特，甚至与Xamarin的使用无关；这是所有Android开发者都会面临的问题。
- en: Running apps with Genymotion
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Genymotion运行应用
- en: A while ago, I became aware of another option to run Android apps. Genymotion
    is a product that is based on the VirtualBox virtualization platform. Genymotion
    provides a set of virtual device templates for many of the Android devices available
    on the market today. Once a virtual device is created, you simply start it and
    it will be selectable from Xamarin Studio's **Select Device** dialog box just
    like a running AVD.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 不久前，我了解到另一种运行Android应用的选择。Genymotion是一个基于VirtualBox虚拟化平台的产品。Genymotion为市场上许多Android设备提供了一套虚拟设备模板。一旦创建了一个虚拟设备，您只需启动它，它就会像正在运行的AVD一样，在Xamarin
    Studio的**选择设备**对话框中可供选择。
- en: With all the different device templates that come with Genymotion, it's a great
    testing tool. Genymotion also has a much quicker start time and a much more responsive
    execution time than the standard Android Emulators. There are free and paid versions
    depending on what features you need, irrespective of whether you are using Xamarin.Android
    or native Java Android development. You can find more information about Genymotion
    on their home page at [http://www.genymotion.com](http://www.genymotion.com).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Genymotion附带了许多不同的设备模板，它是一个出色的测试工具。Genymotion的启动时间和执行时间也比标准Android模拟器快得多。根据您需要的功能，有免费和付费版本，无论您是使用Xamarin.Android还是原生Java
    Android开发。您可以在他们的主页[http://www.genymotion.com](http://www.genymotion.com)上找到更多关于Genymotion的信息。
- en: Extending NationalParks.Droid
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展NationalParks.Droid
- en: 'As we have a good understanding of our starting point, we can now turn our
    attention to enhance what we have to support the features we need. We have the
    following enhancements to complete:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们对起点有很好的理解，现在我们可以将注意力转向增强现有功能以支持我们需要的特性。我们需要完成以下增强：
- en: Add a `ListView` instance to `MainActivity` to list national parks and an add
    action in the `ActionBar` class to add a new national park.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `MainActivity` 中添加一个 `ListView` 实例以列出国家公园，并在 `ActionBar` 类中添加一个添加动作以添加新的国家公园。
- en: Add a detail view that can be used to view and update national parks with actions
    to save and delete national parks as well as to view photos on [www.Bing.com](http://www.Bing.com)
    and get directions from a map provider.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个可以用来查看和更新国家公园的详细视图，包括保存和删除国家公园的操作，以及查看 [www.Bing.com](http://www.Bing.com)
    上的照片和从地图提供商获取方向。
- en: Add logic to load and save national parks to a JSON-formatted text file.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加逻辑以将国家公园加载和保存到 JSON 格式的文本文件中。
- en: Storing and loading national parks
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 存储和加载国家公园
- en: 'Similar to the `NationalParks.iOS` project, we will store our parks data in
    a JSON-formatted text file. In this project, we will create a singleton class
    to help manage loading and saving parks. We are going with a singleton class for
    a couple of reasons:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `NationalParks.iOS` 项目类似，我们将把我们的公园数据存储在 JSON 格式的文本文件中。在这个项目中，我们将创建一个单例类来帮助管理加载和保存公园。我们选择单例类有几个原因：
- en: In the next chapter, we are going to start looking at sharing and reusing code;
    this gets us started on a solution we will want to reuse
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始探讨代码的共享和重用；这将使我们开始构建我们希望重用的解决方案。
- en: It's a little more difficult to pass an object between `Activities` in Android
    than it is between `ViewControllers` in iOS, and the singleton class will provide
    a convenient way to share park data
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Android 中，在 `Activities` 之间传递对象比在 iOS 中在 `ViewControllers` 之间传递对象要困难一些，而单例类将提供一种方便的方式来共享公园数据
- en: Adding Json.NET
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加 Json.NET
- en: If you worked through [Chapter 4](ch04.html "Chapter 4. Developing Your First
    iOS App with Xamarin.iOS"), *Developing Your First iOS App with Xamarin.iOS*,
    Json.NET will already be installed on your machine and you simply need to add
    this to your project.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你完成了 [第 4 章](ch04.html "第 4 章。使用 Xamarin.iOS 开发您的第一个 iOS 应用")，*使用 Xamarin.iOS
    开发您的第一个 iOS 应用*，Json.NET 将已经安装在你的机器上，你只需将其添加到你的项目中。
- en: 'To add Json.NET to the `NationalParks.Droid` project, perform the following
    steps:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 Json.NET 添加到 `NationalParks.Droid` 项目中，请执行以下步骤：
- en: Select the `Components` folder in the `NationalParks.Droid` project in the **Solution**
    pad, right-click and choose **Edit Components**.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **解决方案** 面板中，选择 `NationalParks.Droid` 项目的 `Components` 文件夹，右键单击并选择 **编辑组件**。
- en: If you see Json.NET listed in the **Installed on this machine** section, click
    on **Add to Project** and you are done; otherwise continue with the next step.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你看到 **安装在这台机器上** 部分列出了 Json.NET，点击 **添加到项目** 即可完成；否则继续下一步。
- en: In the upper-right hand corner, click on **Get More Components** and enter `Json.NET`
    in the search field.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右上角，点击 **获取更多组件** 并在搜索字段中输入 `Json.NET`。
- en: Select **Json.NET** from the list and choose **Add to App**.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从列表中选择 **Json.NET** 并选择 **添加到应用**。
- en: Borrowing the entity class and JSON file
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 借用实体类和 JSON 文件
- en: 'We need an entity class that represents our subject area: the national parks.
    This sounds familiar if you worked through [Chapter 4](ch04.html "Chapter 4. Developing
    Your First iOS App with Xamarin.iOS"), *Developing Your First iOS App with Xamarin.iOS*,
    where we created one. As one already exists, there is no need to create one from
    scratch, so let''s just copy it from `NationalParks.iOS`. In [Chapter 6](ch06.html
    "Chapter 6. The Sharing Game"), *The Sharing Game*, we will look at actually sharing
    the code between projects.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个表示我们主题领域的实体类：国家公园。如果你在 [第 4 章](ch04.html "第 4 章。使用 Xamarin.iOS 开发您的第一个
    iOS 应用")，*使用 Xamarin.iOS 开发您的第一个 iOS 应用* 中工作过，这听起来很熟悉，在那里我们创建了一个。由于已经存在一个，我们无需从头创建，所以让我们从
    `NationalParks.iOS` 中复制它。在 [第 6 章](ch06.html "第 6 章。共享游戏")，*共享游戏* 中，我们将查看如何在项目之间实际共享代码。
- en: 'To copy the `NationalPark.cs` file, perform the following steps:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要复制 `NationalPark.cs` 文件，请执行以下步骤：
- en: Select the `NationalPark.cs` file in the `NationalParks.iOS` project, right-click
    on it, and choose **Copy**.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `NationalParks.iOS` 项目中，选择 `NationalPark.cs` 文件，右键单击它，并选择 **复制**。
- en: Select the `NationalPark.Droid` project, right-click on it and choose **Paste**.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 `NationalPark.Droid` 项目，右键单击它并选择 **粘贴**。
- en: Creating the NationalParksData singleton
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建 NationalParksData 单例
- en: As we mentioned previously, we will create a singleton class to simplify sharing
    and accessing national parks. A singleton is a design pattern that restricts the
    number of instances of class that can exist within an app to a single instance.
    Singletons can be helpful in maintaining global state and sharing a single object
    across multiple views. For our purposes, the singleton pattern simplifies managing
    a single collection of national parks and housing the logic required to load and
    save parks to a JSON-formatted file.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们将创建一个单例类来简化共享和访问国家公园。单例是一种设计模式，它将类在应用程序中可以存在的实例数量限制为单个实例。单例有助于维护全局状态并在多个视图中共享单个对象。对于我们的目的，单例模式简化了管理单个国家公园集合以及存储加载和保存公园到
    JSON 格式文件的逻辑。
- en: 'To create `NationalParksData`, perform the following steps:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建 `NationalParksData`，请执行以下步骤：
- en: Select `NationalParks.Droid`, right-click on it, and navigate to **Add** | **New
    File**.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 `NationalParks.Droid`，右键单击它，然后导航到 **添加** | **新建文件**。
- en: Select **General** | **Empty Class**, enter `NationalParksData` for the **Name**
    field, and click on **New**.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **通用** | **空类**，在 **名称** 字段中输入 `NationalParksData`，然后单击 **新建**。
- en: 'Add a `static` `instance` property to access a single instance for `NationalParksData`
    and initialize the single instance in the getter for the property, as follows:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个 `static` `instance` 属性来访问 `NationalParksData` 的单个实例，并在属性的获取器中初始化单例实例，如下所示：
- en: '[PRE2]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Add a `Parks` collection property to load the parks into:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个 `Parks` 集合属性以将公园加载到：
- en: '[PRE3]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note the use of `protected set`, which protects the `Parks` property from being
    modified outside of the singleton class.
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意使用 `protected set`，这可以保护 `Parks` 属性不被单例类外部修改。
- en: 'There are several places we need to determine the filename to load and save
    parks to a JSON-formatted file. Create a method that returns a fully-qualified
    filename, as follows:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要确定几个地方来加载和保存到 JSON 格式文件的公园的文件名。创建一个返回完全限定文件名的方法，如下所示：
- en: '[PRE4]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Add a private constructor that loads the `Parks` collection if a file exists.
    Providing a private constructor is a part of implementing the singleton pattern
    as it helps ensure only a single instance exists. The private constructor can
    be added using the following code snippet:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个私有构造函数，如果存在文件，则加载 `Parks` 集合。提供私有构造函数是实现单例模式的一部分，因为它有助于确保只有一个实例存在。可以使用以下代码片段添加私有构造函数：
- en: '[PRE5]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Add a `Save()` method. This method accepts a park, adds it to the `Parks` collection
    if it is a new park, and then saves the collection to the file, as follows:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个 `Save()` 方法。此方法接受一个公园，如果它是新公园，则将其添加到 `Parks` 集合中，然后将集合保存到文件中，如下所示：
- en: '[PRE6]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Add a `Delete()` method. This method removes the park from the `Parks` collection
    and saves the updated collection to the file, as follows:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个 `Delete()` 方法。此方法从 `Parks` 集合中删除公园，并将更新后的集合保存到文件中，如下所示：
- en: '[PRE7]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Enhancing MainActivity
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 增强 `MainActivity`
- en: With the `NationalParksData` singleton in place, we can move on to some of the
    UI work. The Xamarin.Android project template did not give us much of a head start
    as we received in the last chapter. We need to add a list view to `MainActivity`,
    create a `DetailActivity` to view a park, and create an `EditActivity` to update
    and delete parks. `MainActivity` is a good starting point.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `NationalParksData` 单例就绪后，我们可以继续进行一些 UI 工作。Xamarin.Android 项目模板在上一章中并没有给我们太多帮助。我们需要向
    `MainActivity` 添加一个列表视图，创建一个 `DetailActivity` 来查看公园，并创建一个 `EditActivity` 来更新和删除公园。`MainActivity`
    是一个很好的起点。
- en: Adding a ListView instance
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加 `ListView` 实例
- en: The default view (`Main.xml`) generated when we created the project contains
    a `Button` instance within `LinearLayout`. We need to remove this button and add
    a `ListView` instance to display our parks.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建项目时生成的默认视图 (`Main.xml`) 包含一个位于 `LinearLayout` 中的 `Button` 实例。我们需要删除此按钮并添加一个
    `ListView` 实例来显示我们的公园。
- en: Touring the Xamarin.Android Designer
  id: totrans-118
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 探索 Xamarin.Android 设计器
- en: 'Xamarin Studio provides a graphical design tool to create and edit layout files.
    As this is our first time using this tool, we will devote a few minutes to become
    familiar with it. Perform the following steps:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin Studio 提供了一个图形设计工具来创建和编辑布局文件。由于这是我们第一次使用这个工具，我们将花几分钟时间熟悉它。请执行以下步骤：
- en: Open `Main.xml`; note the two tabs at the bottom of the view, **Content** and
    **Source**. With the **Content** tab selected, a visual representation of the
    layout is displayed. With the **Source** tab selected, the raw XML is displayed
    in an XML editor.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Main.xml`；注意视图底部的两个标签页，**内容**和**源**。选择**内容**标签页时，会显示布局的可视表示。选择**源**标签页时，会在
    XML 编辑器中显示原始 XML。
- en: Now, switch to the **Content** tab. Note that on the right-hand side of Xamarin
    Studio, there are two pads, **Document Outline** and **Properties**. When a layout
    is opened in the **Content** mode, the **Document Outline** pad displays a hierarchical
    view of the contents of the layout file. The **Document Outline** pad shows the
    **Button** control within `LinearLayout`.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，切换到**内容**标签页。注意在 Xamarin Studio 的右侧有两个面板，**文档大纲**和**属性**。当在**内容**模式下打开布局时，**文档大纲**面板显示布局文件内容的分层视图。**文档大纲**面板显示了
    `LinearLayout` 中的**按钮**控件。
- en: 'The **Properties** pad displays properties for the currently selected widget.
    Select the **Button** instance and switch to the **Properties** pad. Note the
    tabs at the top of the **Properties** pad: **Widget**, **Style**, **Layout**,
    **Scroll**, and **Behavior**. The tabs group together the various types of properties
    available for a particular widget.'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**属性**面板显示当前所选小部件的属性。选择**按钮**实例，切换到**属性**面板。注意**属性**面板顶部的标签：**小部件**、**样式**、**布局**、**滚动**和**行为**。这些标签将特定小部件可用的各种类型属性分组在一起。'
- en: Editing the Main.xml file
  id: totrans-123
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 编辑 Main.xml 文件
- en: 'To add a `ListView` instance in `Main.xml`, perform the following steps:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 `Main.xml` 中添加 `ListView` 实例，请执行以下步骤：
- en: With `Main.axml` open in the **Content** mode, select the **Button** instance,
    right-click on it, and choose **Delete** (or press the *Delete* key).
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**内容**模式下打开 `Main.axml`，选择**按钮**实例，右键单击它，然后选择**删除**（或按*删除*键）。
- en: In the search field at the top of the **Toolbox** tab, enter `List`. Select
    the `ListView` widget displayed and drag-and-drop it to `Main.axml`.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**工具箱**标签页顶部的搜索框中输入 `List`。选择显示的 `ListView` 小部件，并将其拖放到 `Main.axml` 中。
- en: In the **Document Outline** pad, select the `ListView` widget.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**文档大纲**面板中，选择 `ListView` 小部件。
- en: In the **Properties** pad under the **Widget** tab, enter `@+id/parksListView`
    for the **ID** value.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**小部件**标签页下的**属性**面板中，将**ID**值输入为 `@+id/parksListView`。
- en: In the **Document Outline** pad, select the `LinearLayout` widget.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**文档大纲**面板中，选择 `LinearLayout` 小部件。
- en: In the **Properties** pad under the **Layout** tab, enter `8dp` for **Padding**.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**布局**标签页下的**属性**面板中，将**填充**值输入为 `8dp`。
- en: Creating an adapter
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建适配器
- en: We need a `ListAdapter` instance to populate our `ListView` with national parks.
    We will create an adapter that extends from `BaseAdapter`.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个 `ListAdapter` 实例来填充我们的 `ListView` 以显示国家公园。我们将创建一个继承自 `BaseAdapter` 的适配器。
- en: 'To create `NationalParksAdapter.cs`, perform the following steps:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建 `NationalParksAdapter.cs`，请执行以下步骤：
- en: Select the `NationalParks.Droid` project, right-click on it, and choose **New
    File**. In the **New File** dialog box, navigate to **Android** | **Android Class**.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 `NationalParks.Droid` 项目，右键单击它，然后选择**新建文件**。在**新建文件**对话框中，导航到**Android**
    | **Android 类**。
- en: Enter `NationalParks.cs` for the **Name** field and click on **New**.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**名称**字段中输入 `NationalParks.cs` 并单击**新建**。
- en: 'Change `NationalParksAdapter` to be a public class and to extend `BaseAdapter<>`
    using `NationalPark` as the type specification, as follows:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `NationalParksAdapter` 修改为公共类，并使用 `NationalPark` 作为类型规范扩展 `BaseAdapter<>`，如下所示：
- en: '[PRE8]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Place the cursor on `BaseAdapater<>`, right-click on it, and navigate to **Refactor**
    | **Implement** abstract members, and then press *Enter*. Xamarin Studio will
    create a default method stub for each abstract method with code that throws the
    exception `NotImplementedException`.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将光标放在 `BaseAdapater<>` 上，右键单击它，然后导航到**重构** | **实现**抽象成员，然后按 *Enter*。Xamarin
    Studio将为每个抽象方法创建一个默认的方法存根，其中包含抛出异常 `NotImplementedException` 的代码。
- en: 'At this point, you can implement a constructor that accepts an activity and
    saves the reference for use within `GetView()`, as shown in the following code
    snippet:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个阶段，你可以实现一个接受活动并保存其引用以在 `GetView()` 中使用的构造函数，如下面的代码片段所示：
- en: '[PRE9]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Implement the `GetItemId()` method and return the position that was passed
    as the ID. The `GetItemId()` method is intended to provide an ID for a row of
    data displayed in `AdapterView`. Unfortunately, the method must return a `long`
    instance, and our ID is a GUID. The best we can do is return the position that
    is passed to us, as follows:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`GetItemId()`方法，并返回作为ID传入的位置。`GetItemId()`方法旨在为在`AdapterView`中显示的数据行提供一个ID。不幸的是，该方法必须返回一个`long`实例，而我们的ID是一个GUID。我们能做的最好的事情就是返回传递给我们的位置，如下所示：
- en: '[PRE10]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Implement the `Count` property to return the number of items in the `Parks`
    collection, as follows:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`Count`属性，以返回`Parks`集合中的项目数量，如下所示：
- en: '[PRE11]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Implement the indexed property and return the `NationalPark` instance located
    at the position passed in within the `Parks` collection, as follows:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现索引属性，并返回位于`Parks`集合中传入位置处的`NationalPark`实例，如下所示：
- en: '[PRE12]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Implement the `GetView()` method and return a populated `View` instance for
    a park using the default Android layout `SimpleListItem1`, as follows:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现`GetView()`方法，并返回一个使用默认Android布局`SimpleListItem1`填充的`View`实例，如下所示：
- en: '[PRE13]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To conclude these steps, hook up the adapter to `ListView` on `MainActivity`.
    This is normally done in the `OnCreate()` method, as follows:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了完成这些步骤，将适配器连接到`MainActivity`上的`ListView`。这通常在`OnCreate()`方法中完成，如下所示：
- en: '[PRE14]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Adding the New action to the ActionBar
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向ActionBar添加新操作
- en: We now need to add an `Add` action to the ActionBar, which can be used to create
    a new national park.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要向ActionBar添加一个`Add`操作，它可以用来创建一个新的国家公园。
- en: 'To create the `Add` action, perform the following steps:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建`Add`操作，执行以下步骤：
- en: You firstly need to select the `Resources` folder in the `NationalParks.Droid`
    project, right-click on it, and navigate to **Add** | **New Folder**.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在`NationalParks.Droid`项目中选择`Resources`文件夹，右键单击它，然后导航到**添加** | **新建文件夹**。
- en: At this point, name the folder `menu`.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这一点上，将文件夹命名为`menu`。
- en: Select the newly created `menu` folder, right-click on it, and navigate to **Add**
    | **New File**, then select **XML** | **Empty XML File**, enter `MainMenu.xml`
    in the **Name** field, and click on **New**.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择新创建的`menu`文件夹，右键单击它，然后导航到**添加** | **新建文件**，然后选择**XML** | **空XML文件**，在**名称**字段中输入`MainMenu.xml`，然后点击**新建**。
- en: 'Fill in the newly created XML file with a menu definition for the **Add** action.
    The following sample demonstrates what is needed:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新创建的XML文件中填写一个用于**Add**操作的菜单定义。以下示例演示了所需的内容：
- en: '[PRE15]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Copy all of the image files (`*.png`) from the `Assets` folder to the `Resources/drawable`
    folder in the `NationalParks.Droid` project.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Assets`文件夹中的所有图像文件（`*.png`）复制到`NationalParks.Droid`项目中的`Resources/drawable`文件夹。
- en: Select the `Resources/drawable` folder, right-click and choose **Add Files**,
    select all of the image files, including `ic_new.png`, and click on **Open**.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`Resources/drawable`文件夹，右键单击并选择**添加文件**，选择所有图像文件，包括`ic_new.png`，然后点击**打开**。
- en: Now that we have the menu definition and graphics in place, we need to add some
    code to put the menus in place. Android provides several virtual methods to create
    and process clicks for ActionBar items.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了菜单定义和图形，我们需要添加一些代码来放置菜单。Android提供了几个虚拟方法来创建和处理ActionBar项的点击事件。
- en: Overriding the OnCreateOptionsMenu() method
  id: totrans-162
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 覆盖`OnCreateOptionsMenu()`方法
- en: 'The `OnCreateOptionsMenu()` method is called when an activity is started and
    provides a place to create ActionBar items. The following code demonstrates how
    to use the definition in `MainMenu.xml` to create the `Add` action:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 当活动启动时，会调用`OnCreateOptionsMenu()`方法，并提供了一个创建ActionBar项的地方。以下代码演示了如何使用`MainMenu.xml`中的定义来创建`Add`操作：
- en: '[PRE16]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Overriding the OnOptionsItemSelected() method
  id: totrans-165
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 覆盖`OnOptionsItemSelected()`方法
- en: 'The `OnOptionsItemsSelected()` method is called when an action in the ActionBar
    is clicked on, and it provides a place to handle the request. In our case, we
    want to navigate to the detail view, which has not been created yet. For now,
    simply implement the `OnOptionsItemSelected()` method with a placeholder for the
    navigation logic. The following code demonstrates what is needed:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 当在ActionBar中点击操作时，会调用`OnOptionsItemsSelected()`方法，并提供了一个处理请求的地方。在我们的例子中，我们希望导航到尚未创建的详细视图。目前，只需简单地实现`OnOptionsItemSelected()`方法，并使用占位符来代替导航逻辑。以下代码演示了所需的内容：
- en: '[PRE17]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Running the app
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行应用
- en: We have completed our enhancements to `MainActivity`. Run the app and review
    the changes. When you initially start the app, you will notice that `ListView`
    is empty. You can place the `NationalParks.json` file in the emulator virtual
    device using the **Android Device Monitor** (**ADM**). Xamarin Studio is not configured
    with a menu item for ADM, but you can add one using **Preferences** | **External
    Tools**.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了对`MainActivity`的增强。运行应用并查看更改。当您首次启动应用时，您会注意到`ListView`是空的。您可以使用**Android
    Device Monitor**（**ADM**）将`NationalParks.json`文件放置在模拟器虚拟设备中。Xamarin Studio没有配置用于ADM的菜单项，但您可以使用**Preferences**
    | **External Tools**添加一个。
- en: Upload `NationalParks.json` to the emulator using the ADM application. Restart
    `NationalParks.Droid`; you should now see parks listed.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 使用ADM应用程序将`NationalParks.json`上传到模拟器。重新启动`NationalParks.Droid`；您现在应该看到公园列表。
- en: Creating the DetailActivity view
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建DetailActivity视图
- en: Now, let's add a view that displays the details for a national park. For this,
    we need to create a simple view with `ScrollView` as the parent `ViewGroup` and
    `EditText` widgets for each of the properties on the `NationalPark` entity class.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们添加一个显示国家公园详细信息的视图。为此，我们需要创建一个简单的视图，其中`ScrollView`作为父`ViewGroup`，并为`NationalPark`实体类上的每个属性添加`EditText`小部件。
- en: 'To create the `DetailActivity` view, perform the following steps:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建`DetailActivity`视图，请执行以下步骤：
- en: Select the `NationalParks.Droid` project in the **Solution** pad, right-click
    and navigate to **Add** | **New File**.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Solution**面板中选择`NationalParks.Droid`项目，右键单击并导航到**Add** | **New File**。
- en: After this, navigate to **Android** | **Android Activity**, enter `DetailActivity`
    for the value of the **Name** field, and click on **New**.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此之后，导航到**Android** | **Android Activity**，将**Name**字段的值设置为`DetailActivity`，然后点击**New**。
- en: Then, select the `Resources/layout` folder in `NationalParks.Droid`, right-click
    on it, and navigate to **Add** | **New File**.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在`NationalParks.Droid`中的`Resources/layout`文件夹上右键单击，并导航到**Add** | **New File**。
- en: Navigate to **Android** | **Android Layout**, enter `Detail` for the **Name**
    field, and click on **New**.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**Android** | **Android Layout**，将**Name**字段的值设置为`Detail`，然后点击**New**。
- en: In the **Outline** pad, select `LinearLayout`, right-click on it, and choose
    **Delete**.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Outline**面板中，选择`LinearLayout`，右键单击它，并选择**Delete**。
- en: From the **Toolbox** pad, select the `ScrollView` widget and drag it onto the
    `Detail.axml` layout.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**Toolbox**面板中选择`ScrollView`小部件，并将其拖放到`Detail.axml`布局中。
- en: From the **Toolbox** pad, select `LinearLayout` and drag it onto the `Detail.axml`
    layout.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**Toolbox**面板中选择`LinearLayout`，并将其拖放到`Detail.axml`布局中。
- en: In the **Properties** pad under the **Layout** tab, set **Padding** to `8dp`
    for `LinearLayout`.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Layout**选项卡下的**Properties**面板中，将`LinearLayout`的**Padding**设置为`8dp`。
- en: Add `TextView` widgets for each property on the `NationalPark` entity class
    except the `ID` property. Also, add `TextView` widgets that serve as labels. For
    each of the `TextView` widgets that will be used to display properties, fill in
    the `ID` property with a name that corresponds to the property names on the entity,
    for example, `nameTextView`. Arrange the widgets based on your preferences; you
    can use the screen mockups in the *The sample national parks app* section of [Chapter
    4](ch04.html "Chapter 4. Developing Your First iOS App with Xamarin.iOS"), *Developing
    Your First iOS App with Xamarin.iOS*, or the sample solution as a guide.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`NationalPark`实体类上的每个属性添加`TextView`小部件（除了`ID`属性）。还要添加作为标签的`TextView`小部件。对于将用于显示属性的每个`TextView`小部件，将`ID`属性填写为与实体属性名称相对应的名称，例如`nameTextView`。根据您的偏好排列小部件；您可以使用[第4章](ch04.html
    "第4章. 使用Xamarin.iOS开发您的第一个iOS应用")中*The sample national parks app*部分的屏幕模拟图，或作为指南的示例解决方案。
- en: Review `Detail.axml` in the **Content** mode and adjust it as needed.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Content**模式下查看`Detail.axml`，并根据需要调整。
- en: 'In `DetailActivity.OnCreate()`, add call to `SetContentView()`, and pass the
    layout ID for `Detail.axml`, as follows:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`DetailActivity.OnCreate()`中，添加对`SetContentView()`的调用，并传递`Detail.axml`的布局ID，如下所示：
- en: '[PRE18]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Adding ActionBar items
  id: totrans-186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加ActionBar项目
- en: 'We now need to add three items to the action bar: an action to edit a park,
    view photos on [www.bing.com](http://www.bing.com) for a park, and get directions
    to a park. Follow the same steps used previously to create a new menu definition
    file named `DetailMenu.xml`. The following XML shows the code that needs to be
    used:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要向操作栏添加三个项目：编辑公园的操作、在[www.bing.com](http://www.bing.com)上查看公园的照片，以及获取前往公园的路线。按照之前创建新菜单定义文件`DetailMenu.xml`的相同步骤进行操作。以下XML显示了需要使用的代码：
- en: '[PRE19]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: After adding the menu definition, implement the `OnCreateOptionsMenu()`and `OnOptionsItemSelected()`
    methods like we did for `MainActivity`. Just add empty stubs to handle the actual
    actions and we will fill in the logic in the coming sections.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加菜单定义后，实现`OnCreateOptionsMenu()`和`OnOptionsItemSelected()`方法，就像我们为`MainActivity`所做的那样。只需添加空占位符来处理实际的动作，我们将在接下来的部分中填充逻辑。
- en: Populating DetailActivity
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 填充`DetailActivity`
- en: 'Add logic to populate `DetailActivity` in `OnCreate()`, using the following
    steps:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在`OnCreate()`中添加逻辑以填充`DetailActivity`，按照以下步骤操作：
- en: 'The first step is to determine if a park `Id` was passed in as an intent extra.
    If one was passed in, locate it in the `Parks` list on `NationalParksData`. If
    not, create a new instance using the following snippet:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是确定是否将公园`Id`作为意图附加信息传递。如果传递了，则在`NationalParksData`的`Parks`列表中定位它。如果没有，则使用以下代码片段创建一个新实例：
- en: '[PRE20]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now populate the `EditText` fields based on data from the park. The sample
    solution has a `ParkToUI()` method for this logic, as follows:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在根据公园的数据填充`EditText`字段。示例解决方案有一个`ParkToUI()`方法用于此逻辑，如下所示：
- en: '[PRE21]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Handling the Show Photos action
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理显示照片动作
- en: We would like to direct the user to [www.bing.com](http://www.bing.com) to view
    photos for a park. This can be accomplished with a simple `ActionView` intent
    and a properly formatted search URI for [www.bing.com](http://www.bing.com).
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望将用户引导到[www.bing.com](http://www.bing.com)以查看公园的照片。这可以通过一个简单的`ActionView`意图和一个格式正确的搜索URI来实现。
- en: 'To handle the Show Photos action, create some logic on the `OnOptionsItemSelected()`
    method to create an `ActionView` intent and pass in a formatted URI to search
    [www.bing.com](http://www.bing.com) for photos. The following code demonstrates
    the required action:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 要处理显示照片动作，需要在`OnOptionsItemSelected()`方法中创建一个`ActionView`意图，并传入一个格式化的URI来搜索[www.bing.com](http://www.bing.com)上的照片。以下代码演示了所需的操作：
- en: '[PRE22]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Handling the Show Directions action
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理显示路线动作
- en: We would like to direct the user to an external map app to get directions to
    a park. Again, this can be accomplished with a simple `ActionView` intent along
    with a properly formatted URI requesting map information.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望将用户引导到外部地图应用以获取前往公园的路线。同样，这可以通过一个简单的`ActionView`意图以及一个格式正确的URI请求地图信息来实现。
- en: 'To handle the Show Directions action, create a logic on the `OnOptionsItemSelected()`
    method to create an `ActionView` intent and pass in a formatted URI to display
    the map information. The following code demonstrates the required action:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 要处理显示路线动作，在`OnOptionsItemSelected()`方法中创建逻辑以创建一个`ActionView`意图，并传入一个格式化的URI来显示地图信息。以下代码演示了所需的操作：
- en: '[PRE23]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Adding navigation
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加导航
- en: Now that we have `DetailActivity` in place, we need to go back and add some
    navigation logic in `MainActivity` so that when a park is selected in the list,
    `DetailActivity` will be displayed.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了`DetailActivity`，我们需要回到`MainActivity`并添加一些导航逻辑，以便当在列表中选择公园时，将显示`DetailActivity`。
- en: A user clicking on an item in `ListView` can be handled by providing an event
    handler for `ListView.OnItemClicked`.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击`ListView`中的项目时，可以通过为`ListView.OnItemClicked`提供事件处理程序来处理。
- en: 'To add navigation from `MainActivity`, perform the following steps:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 要从`MainActivity`添加导航，请执行以下步骤：
- en: Open `MainActivity.cs`.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`MainActivity.cs`。
- en: 'Create an event handler to handle an `OnItemClicked` event. The following event
    handler represents what is needed:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个事件处理程序来处理`OnItemClicked`事件。以下事件处理程序代表了所需的内容：
- en: '[PRE24]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Hook up the event handler in the `OnCreate()` method, as follows:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`OnCreate()`方法中连接事件处理程序，如下所示：
- en: '[PRE25]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Running the app
  id: totrans-213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行应用程序
- en: We have now completed `DetailActivity`. Run the app and select a park to display
    the new activity. Choose the Show Photos and Show Directions actions. If you are
    running the application in an emulator, you will not be able to view directions
    as the emulator will not have access to Google Play Services.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经完成了`DetailActivity`。运行应用程序并选择一个公园以显示新的活动。选择显示照片和显示路线动作。如果您在模拟器中运行应用程序，您将无法查看路线，因为模拟器无法访问Google
    Play服务。
- en: Creating EditActivity
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建`EditActivity`
- en: We are now ready to add our last activity, `EditActivity`. This exercise will
    be similar to the one we just finished except that we will use `EditText` widgets
    so that users will be able to modify data. In addition, `EditActivity` can be
    used to display an existing park or a new one.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备添加我们的最后一个活动，`EditActivity`。这个练习将与我们刚刚完成的练习类似，但我们将使用`EditText`小部件，以便用户可以修改数据。此外，`EditActivity`可以用来显示现有的公园或新的公园。
- en: 'To create `EditActivity`, perform the following steps:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建`EditActivity`，请执行以下步骤：
- en: Follow the same steps used in the previous section to create a new activity
    and layout file named `EditActivity` and `Edit.axml` respectively.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照上一节中使用的相同步骤创建一个新的活动和一个名为`EditActivity`和`Edit.axml`的布局文件。
- en: Also, add `ScrollView`, `LinearLayout`, and `Padding` in the same manner as
    was done for `Detail.axml`.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，以与`Detail.axml`相同的方式添加`ScrollView`、`LinearLayout`和`Padding`。
- en: Add `TextView` widgets and `EditText` widgets for each property on the `NationalPark`
    entity class except the `Id` property. The `TextView` widgets should be used as
    labels and the `EditText` widgets to edit properties. For each of the `EditView`
    widgets that will be used to display properties, fill in the `Id` property with
    a name that corresponds to the property names on the entity, for example, `nameTextView`.
    Arrange the widgets based on your preferences; you can use the screen mockups
    in the *The sample national parks app* section of [Chapter 4](ch04.html "Chapter 4. Developing
    Your First iOS App with Xamarin.iOS"), *Developing Your First iOS App with Xamarin.iOS*,
    or sample solution as a guide.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`NationalPark`实体类上的每个属性（除了`Id`属性）添加`TextView`小部件和`EditText`小部件。`TextView`小部件应用作标签，而`EditText`小部件用于编辑属性。对于将用于显示属性的每个`EditView`小部件，将`Id`属性填充为与实体上的属性名称相对应的名称，例如`nameTextView`。根据您的偏好排列小部件；您可以使用[第4章](ch04.html
    "第4章. 使用Xamarin.iOS开发您的第一个iOS应用程序")中*示例国家公园应用程序*部分的屏幕原型，或作为指南的示例解决方案。
- en: Review `Edit.axml` in the **Content** mode and adjust as needed.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**内容**模式下审查`Edit.axml`并根据需要调整。
- en: 'In `EditActivity.OnCreate()`, add a call to `SetContentView()` and pass in
    the layout `Id` for `Edit.axml`, as follows:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`EditActivity.OnCreate()`中，添加对`SetContentView()`的调用并传入`Edit.axml`的布局`Id`，如下所示：
- en: '[PRE26]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Adding ActionBar items
  id: totrans-224
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加ActionBar项目
- en: 'We now need to add three items to the action bar: an action to edit a park,
    view photos on [www.bing.com](http://www.bing.com) for a park, and get directions
    to a park. Follow the same steps used previously in the section *Adding the New
    action to the ActionBar* to create a new menu definition file named `DetailMenu.xml`.
    The following XML shows the required code:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要向工具栏添加三个项目：编辑公园的操作、在[www.bing.com](http://www.bing.com)上查看公园的照片，以及获取公园的路线。按照上一节中*添加新的ActionBar操作*部分中使用的相同步骤创建一个新的菜单定义文件，命名为`DetailMenu.xml`。以下XML显示了所需的代码：
- en: '[PRE27]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'After adding the menu definition, implement the `OnCreateOptionsMenu()`and
    `OnOptionsItemSelected()` methods like we did for `MainActivity`. Add empty stubs
    to handle each action and we will fill in the logic in the coming sections, as
    follows:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加菜单定义后，实现`OnCreateOptionsMenu()`和`OnOptionsItemSelected()`方法，就像我们为`MainActivity`所做的那样。为每个操作添加空占位符，我们将在接下来的部分中填充逻辑，如下所示：
- en: '[PRE28]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Creating reference variables for widgets
  id: totrans-229
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建小部件的引用变量
- en: As we will be putting data in the `EditText` widgets and then pulling it back
    out again, it make sense to create reference variables for the widgets and set
    the references in the `OnCreate()` method.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将数据放入`EditText`小部件，然后再将其拉出来，因此为小部件创建引用变量并在`OnCreate()`方法中设置引用是有意义的。
- en: 'To create reference variables for widgets, perform the following steps:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 要为小部件创建引用变量，请执行以下步骤：
- en: 'Create a set of references to `EditText` objects in the `EditActivity` class,
    as follows:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`EditActivity`类中创建一组`EditText`对象的引用，如下所示：
- en: '[PRE29]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In the `OnCreate()` method of `EditActivity`, set the references to the appropriate
    widgets using `FindViewById()`, as follows:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`EditActivity`的`OnCreate()`方法中，使用`FindViewById()`设置对适当小部件的引用，如下所示：
- en: '[PRE30]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Populating EditActivity
  id: totrans-236
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 填充`EditActivity`
- en: 'To populate EditActivity, perform the following steps:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 要填充`EditActivity`，请执行以下步骤：
- en: 'Create a method named `ParkToUI()` to move data from the `_park` object to
    the `EditText` widgets, as follows:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`ParkToUI()`的方法，将数据从`_park`对象移动到`EditText`小部件，如下所示：
- en: '[PRE31]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Override `OnResume()` and add a call to the `ToUI()` method to populate the
    `EditText` widgets, as follows:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重写`OnResume()`并添加对`ToUI()`方法的调用以填充`EditText`小部件，如下所示：
- en: '[PRE32]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Handling the Save action
  id: totrans-242
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理保存操作
- en: When the `Save` action is clicked on, the `OnOptionsItemSelected()` method is
    called. Create a `Save()` method on `DetailActivity` and call it from `OnOptionsItemSelected()`.
    The solution project has a `UIToPark()` method to take content from the `EditText`
    widgets and populate the `Park` entity before saving it.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 当点击`保存`操作时，会调用`OnOptionsItemSelected()`方法。在`DetailActivity`上创建一个`Save()`方法，并在`OnOptionsItemSelected()`中调用它。解决方案项目有一个`UIToPark()`方法，用于从`EditText`小部件获取内容，并在保存之前填充`Park`实体。
- en: 'To handle the `Save` action, perform the following steps:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 处理`保存`操作，请执行以下步骤：
- en: 'Create a method named `ToPark()` to move data from the `EditText` widgets to
    the `_park` object. This method will be used when handling the `Save` action,
    as follows:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`ToPark()`的方法，将数据从`EditText`小部件移动到`_park`对象。此方法将在处理`保存`操作时使用，如下所示：
- en: '[PRE33]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Create a method to handle saving the park that calls `UIToPark()` to populate
    the `_park` object with changes, then it calls the `Save()` method on `NationalParksData`
    to save the changes to file, sets the result code, and finishes the activity.
    The required code is as follows:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个处理保存公园的方法，该方法调用`UIToPark()`以将更改填充到`_park`对象中，然后它调用`NationalParksData`上的`Save()`方法以将更改保存到文件，设置结果代码，并结束活动。所需的代码如下：
- en: '[PRE34]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Note
  id: totrans-249
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that a Boolean `Extra` named `parkdeleted` is set to `false`. This is used
    to communicate to the calling activity that the park was not deleted.
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，名为`parkdeleted`的布尔`Extra`被设置为`false`。这用于通知调用活动公园没有被删除。
- en: 'Update `OnOptionsItemSelected()` to call `SavePark()`, as follows:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`OnOptionsItemSelected()`以调用`SavePark()`，如下所示：
- en: '[PRE35]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Handling the Delete action
  id: totrans-253
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理删除操作
- en: Handling the `Delete` action is similar to the `Save` action, but somewhat simpler
    as we do not have to save changes from the UI widgets.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 处理`删除`操作与`保存`操作类似，但稍微简单一些，因为我们不需要从UI小部件保存更改。
- en: 'To handle the Delete action, perform the following steps:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 要处理`删除`操作，请执行以下步骤：
- en: 'Create a method to handle the deleting of the park by calling the `Delete()`
    method on `NationalParksData`, setting the result code, and finishing the activity,
    as follows:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个方法来处理删除公园的操作，通过在`NationalParksData`上调用`Delete()`方法，设置结果代码，并结束活动，如下所示：
- en: '[PRE36]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Note
  id: totrans-258
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that the Boolean `Extra` named `parkdeleted` is set to `true` to tell the
    calling activity that the park was deleted. This is important to the `DetailActivity`
    because when a park was previously shown as deleted, it should be finished and
    returned to `MainActivity`.
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，名为`parkdeleted`的布尔`Extra`被设置为`true`，以通知调用活动公园已被删除。这对于`DetailActivity`很重要，因为当一个公园之前显示为已删除时，它应该结束并返回到`MainActivity`。
- en: 'Update `OnOptionsItemSelected()` to call `DeletePark()`, as follows:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`OnOptionsItemSelected()`以调用`DeletePark()`，如下所示：
- en: '[PRE37]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Adding navigation
  id: totrans-262
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加导航
- en: Now that `EditActivity` is in place, we need to add navigation logic to `MainActivity`
    when a user chooses the `New` action and to `DetailActivity` when the user chooses
    the `Edit` action.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`EditActivity`已经就绪，我们需要在用户选择`新建`操作时在`MainActivity`中添加导航逻辑，以及在用户选择`编辑`操作时在`DetailActivity`中添加导航逻辑。
- en: Navigating on the New action
  id: totrans-264
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在新操作上进行导航
- en: 'As you can recall, in `OnMenuItemSelected()` in `MainActivity`, we added a
    comment to the place where we need to navigate to `EditActivity`. We can now replace
    this comment with the following use of `StartActivity()`:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所回忆的，在`MainActivity`的`OnMenuItemSelected()`中，我们在需要导航到`EditActivity`的地方添加了一个注释。我们现在可以用以下`StartActivity()`的使用来替换这个注释：
- en: '[PRE38]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Navigating on the Edit action
  id: totrans-267
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在编辑操作上进行导航
- en: 'In the same way, we need to add navigation code to `OnMenuItemSelected()` in
    `DetailActivity`. However, there are a few differences. We need to pass in the
    `Id` property for the park we want to edit and we want to receive back a result
    that indicates whether or not the user deleted this park. The required code is
    as follows:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们还需要在`DetailActivity`的`OnMenuItemSelected()`中添加导航代码。然而，有一些区别。我们需要传递我们想要编辑的公园的`Id`属性，并且我们希望接收一个结果，指示用户是否删除了此公园。所需的代码如下：
- en: '[PRE39]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '`DetailActivity` also needs to detect when a park is deleted so that it can
    finish and return to `MainActivity` to view the list. To accomplish this, override
    `OnActivityResult()` and check the Boolean `Extra` named `parkdeleted` to determine
    if the park was deleted, as follows:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '`DetailActivity`还需要检测公园被删除的情况，以便它可以完成并返回到`MainActivity`查看列表。为此，重写`OnActivityResult()`并检查名为`parkdeleted`的布尔`Extra`，以确定公园是否被删除，如下所示：'
- en: '[PRE40]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Refreshing ListView in MainActivity
  id: totrans-272
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在`MainActivity`中刷新ListView
- en: 'The last thing we need to implement is the logic that will refresh `ListView`
    in `MainActivity` with any changes that might have been made on `EditActivity`.
    To accomplish this, call `NotifyDataSetChanged()` on the adapter object within
    an override to the `OnResume()` method on `MainActivity`, as follows:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要实现的最后一件事是逻辑，该逻辑将刷新`MainActivity`中的`ListView`，以反映在`EditActivity`上可能进行的任何更改。为此，在`MainActivity`的`OnResume()`方法的重写中调用适配器对象的`NotifyDataSetChanged()`，如下所示：
- en: '[PRE41]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Running the app
  id: totrans-275
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行应用程序
- en: We have now completed the `NationalParks.Droid` app. You should now be able
    to run your app and exercise each of the features.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经完成了 `NationalParks.Droid` 应用程序。你现在应该能够运行你的应用程序并练习每个功能。
- en: Working with Xamarin.Android projects in Visual Studio
  id: totrans-277
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中使用 Xamarin.Android 项目
- en: 'If you have installed Xamarin.Android on a Windows machine with Visual Studio
    2010 or Visual Studio 2013 (which is the current version), the Xamarin.Android
    Visual Studio add-on will already be installed. Working with projects in Visual
    Studio is similar to working with Xamarin Studio with the exception of certain
    features. To access options for the project, perform the following steps:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在一台安装了 Visual Studio 2010 或 Visual Studio 2013（当前版本）的 Windows 机器上安装了 Xamarin.Android，Xamarin.Android
    Visual Studio 附加组件已经安装。在 Visual Studio 中处理项目与在 Xamarin Studio 中处理项目类似，但某些功能除外。要访问项目选项，请执行以下步骤：
- en: Select the `NationalParks.Droid` project, right-click and select **Properties**.
    A multi-tabbed window will be open that allows various project-related options
    to be specified.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 `NationalParks.Droid` 项目，右键单击并选择 **属性**。将打开一个多标签窗口，允许指定各种项目相关选项。
- en: To access Xamarin.Android-related options for Visual Studio, navigate to **Tools**
    | **Options** | **Xamarin** | **Android Settings**.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要访问 Visual Studio 中与 Xamarin.Android 相关的选项，请转到 **工具** | **选项** | **Xamarin**
    | **Android 设置**。
- en: To access the AVD Manager, navigate to **Tools** | **Open Android Emulator Manager**.
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要访问 AVD 管理器，请转到 **工具** | **打开 Android 模拟器管理器**。
- en: To manage your Xamarin account and activate a license, navigate to **Tools**
    | **Xamarin Account**.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要管理你的 Xamarin 账户并激活许可证，请转到 **工具** | **Xamarin 账户**。
- en: If you are working on a Windows machine with Visual Studio installed and you
    have not taken time to try out the add-on, open `NationalParks.Droid` in Visual
    Studio and run the app.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在一台安装了 Visual Studio 的 Windows 机器上工作，并且还没有尝试过附加组件，请打开 Visual Studio 中的 `NationalParks.Droid`
    并运行应用程序。
- en: Reviewing the generated elements
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看生成的元素
- en: Prior to wrapping this chapter up, let's look at some of the things that go
    on behind the scenes.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 在结束本章之前，让我们看看幕后发生的一些事情。
- en: Peer objects
  id: totrans-286
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 同伴对象
- en: 'In [Chapter 3](ch03.html "Chapter 3. Demystifying Xamarin.Android"), *Demystifying
    Xamarin.Android*, we discussed the role of peer objects in a Xamarin.Android app.
    Let''s now take a look at one of the generated Java peer objects from our project.
    The source for these classes can be found in `NationalParks.Droid/obj/Debug/android/src`.
    Open `nationalparks.droid.MainActivity.java`. Now, note the following pointers:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第 3 章](ch03.html "第 3 章。揭秘 Xamarin.Android") 的 *揭秘 Xamarin.Android* 中，我们讨论了在
    Xamarin.Android 应用程序中同伴对象的作用。现在，让我们看看我们项目中的一个生成的 Java 同伴对象。这些类的源代码可以在 `NationalParks.Droid/obj/Debug/android/src`
    中找到。打开 `nationalparks.droid.MainActivity.java`。现在，注意以下提示：
- en: '`MainActivity` extends `android.app.Activity`.'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MainActivity` 继承自 `android.app.Activity`。'
- en: Each method we created an override for has a corresponding method created that
    calls our override. For example, we created an override for `OnCreate()`. The
    generated class has a method named `onCreate()` that calls a private native method
    `n_onCreate()`, which in turn points to our override through a JNI reference.
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们为每个创建覆盖的方法都创建了一个相应的方法，该方法调用我们的覆盖方法。例如，我们为 `OnCreate()` 创建了一个覆盖方法。生成的类有一个名为
    `onCreate()` 的方法，该方法调用一个私有本地方法 `n_onCreate()`，该方法通过 JNI 引用指向我们的覆盖方法。
- en: The static class initializer for `MainActivity` registers all the native methods
    for use with JNI using the `mono.android.Runtime.register()` method.
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MainActivity` 的静态类初始化器使用 `mono.android.Runtime.register()` 方法注册所有用于 JNI 的本地方法。'
- en: The class constructor activates an instance of our managed C# class using the
    `mono.android.TypeManager.Activate()`method.
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类构造函数使用 `mono.android.TypeManager.Activate()` 方法激活我们的托管 C# 类的实例。
- en: The AndroidManifest.xml file
  id: totrans-292
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AndroidManifest.xml 文件
- en: 'Xamarin.Android generates an `AndroidManifest.xml` file at build time using
    two sources as input: the first one being the content in the `AndroidManifest.xml`
    file in `NationalParks.Droid/Properties` and the second one being the attributes
    specified on classes, primarily activities in your project. You can find the generated
    `AndroidManifest.xml` in `NationalParks.Droid/obj/Debug/android`. Open the file
    with a text editor and note the following pointers:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin.Android 在构建时使用两个源生成 `AndroidManifest.xml` 文件：第一个是 `NationalParks.Droid/Properties`
    中 `AndroidManifest.xml` 文件的内容，第二个是类上指定的属性，主要是项目中的活动。你可以在 `NationalParks.Droid/obj/Debug/android`
    中找到生成的 `AndroidManifest.xml`。使用文本编辑器打开文件，并注意以下提示：
- en: There are two `<activity/>` elements in the file and `MainActivity` is specified
    to be the launch activity. These entries are generated from the attributes specified
    on each of the activity classes.
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件中有两个 `<activity/>` 元素，`MainActivity` 被指定为启动活动。这些条目是从每个活动类中指定的属性生成的。
- en: A single permission of `INTERNET` is specified. This came from the `AndroidManifest.xml`
    file in the `NationalParks.Droid/Properties` folder.
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指定了一个 `INTERNET` 权限。这来自 `NationalParks.Droid/Properties` 文件夹中的 `AndroidManifest.xml`
    文件。
- en: The APK file
  id: totrans-296
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: APK 文件
- en: 'Another interesting thing to look at is the APK produced for a Xamarin.Android
    app. We will be covering in detail how to create APKs in [Chapter 10](ch10.html
    "Chapter 10. Preparing Xamarin.Android Apps for Distribution"), *Preparing Xamarin.Android
    Apps for Distribution*. This a fairly simple process; if you can''t wait, use
    the following steps:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个值得关注的点是生成的 Xamarin.Android 应用程序的 APK。我们将在第 10 章 [准备分发 Xamarin.Android 应用](ch10.html
    "第 10 章。准备分发 Xamarin.Android 应用") 中详细说明如何创建 APK，*准备分发 Xamarin.Android 应用*。这是一个相当简单的过程；如果您迫不及待，可以使用以下步骤：
- en: In the upper-left hand corner of the toolbar, set the built type to **Release**.
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在工具栏的左上角，将构建类型设置为 **发布**。
- en: From the **Project** menu, select **Publish Android Project**.
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **项目** 菜单中选择 **发布 Android 项目**。
- en: In the **Publish Android Application** dialog box, choose **Create new keystore**,
    fill out all of the required information, and click on **Create**.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **发布 Android 应用** 对话框中，选择 **创建新密钥库**，填写所有必需的信息，然后点击 **创建**。
- en: Xamarin.Android will publish the APK in the location you selected. As APKs are
    ZIP files, simply unzip the APK to view the contents.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Xamarin.Android 将将 APK 发布到您选择的目录。由于 APK 是 ZIP 文件，只需解压 APK 即可查看内容。
- en: 'The following screenshot shows the contents of the resulting APK:'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图显示了生成的 APK 的内容：
- en: '![The APK file](img/0838OT_05_01.jpg)'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![APK 文件](img/0838OT_05_01.jpg)'
- en: 'The following table provides a description of the contents of the APK:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格提供了 APK 内容的描述：
- en: '| Content | Description |'
  id: totrans-305
  prefs: []
  type: TYPE_TB
  zh: '| 内容 | 描述 |'
- en: '| --- | --- |'
  id: totrans-306
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `assemblies/System.*` | These assemblies contain core .NET namespaces such
    as `System.IO` and `System.Collection` |'
  id: totrans-307
  prefs: []
  type: TYPE_TB
  zh: '| `assemblies/System.*` | 这些程序集包含核心 .NET 命名空间，例如 `System.IO` 和 `System.Collection`
    |'
- en: '| `assemblies/Mono.Android.dll` | This assembly contains the Xamarin.Android
    binding classes |'
  id: totrans-308
  prefs: []
  type: TYPE_TB
  zh: '| `assemblies/Mono.Android.dll` | 此程序集包含 Xamarin.Android 绑定类 |'
- en: '| `assemblies/NationalParks.Droid.dll` | This assembly contains the classes
    we created: `MainActivity`, `DetailActivity`, and `NationalParksAdapter` |'
  id: totrans-309
  prefs: []
  type: TYPE_TB
  zh: '| `assemblies/NationalParks.Droid.dll` | 此程序集包含我们创建的类：`MainActivity`、`DetailActivity`
    和 `NationalParksAdapter` |'
- en: '| `assemblies/Newtonsoft.Json.dll` | This assembly contains the Json.NET classes
    |'
  id: totrans-310
  prefs: []
  type: TYPE_TB
  zh: '| `assemblies/Newtonsoft.Json.dll` | 此程序集包含 Json.NET 类 |'
- en: '| `classes.dex` | This file contains all the generated Java peer objects in
    a Dalvik-compiled format |'
  id: totrans-311
  prefs: []
  type: TYPE_TB
  zh: '| `classes.dex` | 此文件包含所有以 Dalvik 编译格式生成的 Java 同伴对象 |'
- en: '| `lib/armeabi-v7a/libmonodroid.so` | This is the Mono CLR for Android |'
  id: totrans-312
  prefs: []
  type: TYPE_TB
  zh: '| `lib/armeabi-v7a/libmonodroid.so` | 这是 Android 的 Mono CLR |'
- en: '| `res/*` | This folder contains all the resources; drawables, layouts, menus,
    and so on |'
  id: totrans-313
  prefs: []
  type: TYPE_TB
  zh: '| `res/*` | 此文件夹包含所有资源；可绘制对象、布局、菜单等 |'
- en: Summary
  id: totrans-314
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we created a sample Xamarin.Android app and demonstrated the
    concepts that need to be understood to work with the Xamarin.Android platform.
    While we did not demonstrate all of the features that can be used in an Android
    app, you should now feel comfortable with how to access these features.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们创建了一个示例 Xamarin.Android 应用，并演示了与 Xamarin.Android 平台一起工作时需要理解的概念。虽然我们没有演示
    Android 应用中可以使用的所有功能，但您现在应该对如何访问这些功能感到舒适。
- en: In the next chapter, we will turn our attention to the important topics of sharing
    code across apps, one of the key advantages of using Xamarin.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将关注跨应用共享代码等重要主题，这是使用 Xamarin 的关键优势之一。
