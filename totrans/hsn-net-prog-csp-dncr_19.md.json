["```cs\ndotnet new webapi -n DataSimulation\n```", "```cs\npublic static IWebHostBuilder CreateWebHostBuilder(string[] args) =>\n  WebHost.CreateDefaultBuilder(args)\n    .UseUrls(\"https://[::]:33333\")\n    .UseStartup<Startup>();\n```", "```cs\npublic class OutputRecord {\n  public int Id { get; set; }\n  public string SimpleString { get; set; }\n  public List<string> StringList { get; set; } = new List<string>();\n}\n```", "```cs\npublic class DataController : ControllerBase {\n\n  [HttpGet(\"value/{id}\")]\n  public ActionResult<string> GetString(int id) {\n    return $\"{id}: some data\";\n  }\n\n  [HttpGet(\"values/{id}\")]\n  public ActionResult<IEnumerable<string>> GetStrings(int id) {\n    return new string[] { $\"{id}: value1\", $\"{id + 1}: value2\" };\n  }\n```", "```cs\n[HttpGet(\"record/{id}\")]\npublic ActionResult<OutputRecord> GetRecord(int id) {\n  return new OutputRecord() {\n    Id = id,\n    SimpleString = $\"{id}: value 1\",\n    StringList = new List<string> {\n      $\"{id}:value 2\",\n      $\"{id}:value 3\"\n    }\n  };\n}\n```", "```cs\n[HttpGet(\"records/{id}\")]\npublic ActionResult<IEnumerable<OutputRecord>> GetRecords(int id) {\n  return new List<OutputRecord>(){\n    new OutputRecord() {\n      Id = id,\n      SimpleString = $\"{id}: value 1\",\n      StringList = new List<string> {\n        $\"{id}:value 2\",\n        $\"{id}:value 3\"\n      }\n    }, new OutputRecord() {\n      Id = id + 1,\n      SimpleString = $\"{id + 1}: value 4\",\n      StringList = new List<string> {\n        $\"{id + 1}:value 5\",\n        $\"{id + 1}:value 6\"\n      }\n    }\n  };\n}\n```", "```cs\n[HttpGet(\"value/{id}\")]\npublic ActionResult<string> GetString(int id) {\n    Thread.Sleep(5000);\n    return $\"{id}: some data\";\n}\n```", "```cs\nservices.AddHttpClient(Constants.DATA_CLIENT, options => {\n  options.BaseAddress = new Uri(\"https://localhost:33333\");\n  options.DefaultRequestHeaders.Add(\"Accept\", \"application/json\");\n});\n```", "```cs\npublic interface IDataService{\n  Task<string> GetStringValueById(string id);\n  Task<IEnumerable<string>> GetStringListById(string id);\n  Task<DataRecord> GetRecordById(string id);\n  Task<IEnumerable<DataRecord>> GetRecordListById(string id);\n}\n```", "```cs\nprivate async Task<string> GetResponseString(string path) {\n    var client = _httpFactory.CreateClient(Constants.DATA_CLIENT);\n    var request = new HttpRequestMessage(HttpMethod.Get, path);\n    var response = await client.SendAsync(request);\n    return await response.Content.ReadAsStringAsync();\n}\n```", "```cs\npublic async Task<DataRecord> GetRecordById(string id) {\n    var respStr = await GetResponseString($\"api/data/record/{id}\");\n    return JsonConvert.DeserializeObject<DataRecord>(respStr);\n}\n```", "```cs\n[Route(\"api/cache-client\")]\n[ApiController]\npublic class ValuesController : ControllerBase {\n\n    private IDataService _dataService;\n\n    public ValuesController(IDataService data) {\n        _dataService = data;\n    }\n    ...\n```", "```cs\n[HttpGet(\"value/{id}\")]\npublic async Task<ActionResult<string>> GetValue(string id) {\n    return await _dataService.GetStringValueById(id);\n}\n\n[HttpGet(\"values/{id}\")]\npublic async Task<IEnumerable<string>> GetValues(string id) {\n    return await _dataService.GetStringListById(id);\n}\n\n[HttpGet(\"record/{id}\")]\npublic async Task<ActionResult<DataRecord>> GetRecord(string id) {\n    return await _dataService.GetRecordById(id);\n}\n\n[HttpGet(\"records/{id}\")]\npublic async Task<IEnumerable<DataRecord>> Get(string id) {\n    return await _dataService.GetRecordListById(id);\n}\n```", "```cs\nservices.AddDistributedRedisCache(options => {\n    options.Configuration = \"localhost\";\n    options.InstanceName = \"local\";\n});\n```", "```cs\npublic interface ICacheService {\n    Task<bool> HasCacheRecord(string id);\n    Task<string> FetchString(string id);\n    Task<T> FetchRecord<T>(string id);\n    Task WriteString(string id, string value);\n    Task WriteRecord<T>(string id, T record);\n}\n```", "```cs\npublic class CacheService : ICacheService {\n    IDistributedCache _cache;\n\n    public CacheService(IDistributedCache cache) {\n        _cache = cache;\n    }\n```", "```cs\npublic async Task<bool> HasCacheRecord(string id) {\n    var record = await _cache.GetStringAsync(id);\n    return record != null;\n}\n```", "```cs\npublic async Task<string> FetchString(string id) {\n    return await _cache.GetStringAsync(id);\n}\n\npublic async Task<T> FetchRecord<T>(string id) {\n    var record = await _cache.GetStringAsync(id);\n    T result = JsonConvert.DeserializeObject<T>(record);\n    return result;\n}\n```", "```cs\npublic async Task WriteString(string id, string value) {\n    DistributedCacheEntryOptions opts = new DistributedCacheEntryOptions() {\n        SlidingExpiration = TimeSpan.FromMinutes(60)\n    };\n    await _cache.SetStringAsync(id, value, opts);\n}\n\npublic async Task WriteRecord<T>(string id, T record) {\n    var value = JsonConvert.SerializeObject(record);\n    DistributedCacheEntryOptions opts = new DistributedCacheEntryOptions() {\n        SlidingExpiration = TimeSpan.FromMinutes(60)\n    };\n\n    await _cache.SetStringAsync(id, value, opts);\n}\n```", "```cs\n[HttpGet(\"record/{id}\")]\npublic async Task<ActionResult<DataRecord>> GetRecord(string id) {\n    var key = $\"{id}record\";\n    if (await _cache.HasCacheRecord(key)) {\n        return await _cache.FetchRecord<DataRecord>(key);\n    }\n    var value = await _dataService.GetRecordById(id);\n    await _cache.WriteRecord(key, value);\n    return value;\n}\n```"]