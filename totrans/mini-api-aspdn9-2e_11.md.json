["```cs\napp.MapGet(\"/fetch-data\", (HttpContext httpContext) =>\n{\n    HttpClient client = new HttpClient();\n    string url =\n        \"https://jsonplaceholder.typicode.com/posts/1\";\n    // Initiate the asynchronous operation and return a\n    // continuation task\n    return client.GetStringAsync(url).ContinueWith(task =>\n    {\n        if (task.IsCompletedSuccessfully)\n        {\n            // Task completed successfully, return the data\n            return httpContext.Response.WriteAsJsonAsync(\n                new { data = task.Result }\n            );\n        }\n        else if (task.IsFaulted)\n        {\n            // Task faulted, handle the exception\n            var errorMessage =\n                task.Exception.Flatten().InnerException\n                    ?.Message ?? \"An error occurred\";\n            httpContext.Response.StatusCode =\n                StatusCodes.Status500InternalServerError;\n            return httpContext.Response.WriteAsJsonAsync(\n                new { error = errorMessage }\n            );\n        }\n        else\n        {\n            // If task was cancelled or some other state,\n            // handle accordingly\n            httpContext.Response.StatusCode =\n                StatusCodes.Status500InternalServerError;\n            return httpContext.Response.WriteAsJsonAsync(\n                new { error = \"Unknown error occurred.\" }\n            );\n        }\n    });\n});\n```", "```cs\napp.MapGet(\n    \"/fetch-data-async-await\",\n    async (HttpContext httpContext) =>\n{\n    HttpClient client = new HttpClient();\n    string url =\n        \"https://jsonplaceholder.typicode.com/posts/1\";\n    try\n    {\n        // Asynchronously fetch data from the external\n        // service\n        string data = await client.GetStringAsync(url);\n        await httpContext.Response.WriteAsJsonAsync(\n            new { data}\n        );\n    }\n    catch (HttpRequestException ex)\n    {\n        // Handle error (e.g., network issues, server\n        // problems)\n        httpContext.Response.StatusCode =\n            StatusCodes.Status500InternalServerError;\n        await httpContext.Response.WriteAsJsonAsync(\n            new\n            {\n                error =\n                    \"Error fetching data: \" + ex.Message\n            });\n    }\n    catch (Exception ex)\n    {\n        // Handle any other exceptions\n        httpContext.Response.StatusCode =\n            StatusCodes.Status500InternalServerError;\n        await httpContext.Response.WriteAsJsonAsync(\n            new\n            {\n                error =\n                    \"An unexpected error occurred: \" +\n                        ex.Message\n            });\n    }\n});\n```", "```cs\nvar results = new ConcurrentDictionary<Guid, string>();\n// Endpoint to start the long-running background task\napp.MapPost(\"/start-process\", async () =>\n{\n});\n```", "```cs\nvar requestId = Guid.NewGuid();\nvar requestIdStr = requestId.ToString();\n```", "```cs\n// Start the long-running task\n_ = Task.Run(async () =>\n{\n    await Task.Delay(10000); // Simulate a long-running\n                             // task (10 seconds)\n    results[requestId] = $\"Result for {requestIdStr}\";\n    // Store result in dictionary\n});\n// Respond with the request ID\nreturn Results.Ok(new { RequestId = requestIdStr });\n```", "```cs\n// Endpoint to get the result based on the request ID\napp.MapGet(\"/get-result/{requestId}\", (string requestId) =>\n{\n    if (Guid.TryParse(requestId, out var guid) &&\n        results.TryGetValue(guid, out var result))\n    {\n        return Results.Ok(new { Result = result });\n    }\n    return Results.NotFound(new { Error =\n        \"Result not found or not yet completed.\"\n    });\n});\n```", "```cs\n    // Deadlock-prone code\n    public async Task<IActionResult> GetData()\n    {\n        var data = Task.Run(() =>\n            GetDataFromDatabase()).Result; // Blocking\n                                           // call\n        return Ok(data);\n    }\n    ```", "```cs\n    public async Task<IActionResult> GetData()\n    {\n        var data = await Task.Run(() =>\n            GetDataFromDatabase());\n        return Ok(data);\n    }\n    ```", "```cs\n    public async Task<IActionResult> GetData()\n    {\n        await using (var dbContext = new DbContext())\n        {\n            var data = await dbContext.GetDataAsync();\n            return Ok(data);\n        }\n    }\n    ```", "```cs\n    private static int _counter = 0;\n    public async Task<IResult> IncrementCounter()\n    {\n        var newCounterValue = _counter + 1;\n        await Task.Delay(100); // Simulate async work\n        _counter = newCounterValue;\n        return Results.Ok(_counter);\n    }\n    ```", "```cs\n    private static int _counter = 0;\n    private static readonly object _counterLock =\n        new object();\n    public async Task<IActionResult> IncrementCounter()\n    {\n        lock (_counterLock)\n        {\n            var newCounterValue = _counter + 1;\n            _counter = newCounterValue;\n        }\n        await Task.Delay(100); // Simulate async work\n        return Ok(_counter);\n    }\n    ```"]