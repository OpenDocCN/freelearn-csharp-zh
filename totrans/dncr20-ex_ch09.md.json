["```cs\npublic async Task<Stream> GetFileContentAsync()\n{\n    using(var httpClient = new HttpClient())\n    {\n        var stream = await \n        httpClient.GetStreamAsync(\n        \"http://localhost:9596/api/Files/1\");\n        return stream;\n    }\n}\n```", "```cs\n        private static int GetThreadPoolStats(out string iocp, out \n        string worker)\n        {\n            int maxIoThreads, maxWorkerThreads;\n            ThreadPool.GetMaxThreads(out maxWorkerThreads, out \n            maxIoThreads);\n\n            int freeIoThreads, freeWorkerThreads;\n            ThreadPool.GetAvailableThreads(out freeWorkerThreads, \n            out freeIoThreads);\n\n            int minIoThreads, minWorkerThreads;\n            ThreadPool.GetMinThreads(out minWorkerThreads, out \n            minIoThreads);\n\n            int busyIoThreads = maxIoThreads - freeIoThreads;\n            int busyWorkerThreads = maxWorkerThreads - \n            freeWorkerThreads;\n            iocp = $\"(Busy={busyIoThreads},\n            Free={freeIoThreads},Min=\n            {minIoThreads},Max={maxIoThreads})\";\n            worker = $\"(Busy={busyWorkerThreads},Free=\n            {freeWorkerThreads},Min={minWorkerThreads},Max=\n            {maxWorkerThreads})\";\n            return busyWorkerThreads;\n        }\n```", "```cs\nvar stream = await   \nhttpClient.GetStreamAsync(\"http://localhost:9596/api/Files/1\");\nvar stream = await \nhttpClient.GetStreamAsync(\"http://localhost:9596/api/Files/1\").ConfigureAwait(false);\n```", "```cs\n<aspNetCore processPath=\".\\PacktLetsChat.exe\"                 stdoutLogEnabled=\"true\"                 stdoutLogFile=\".\\logs\" />   </system.webServer>\n```", "```cs\n<configuration> \n   <runtime> \n      <gcServer enabled=\"true\"/> \n   </runtime> \n</configuration>\n```", "```cs\nvar arrayExample= new byte[10];\nSpan<byte> bytes = arrayExample; // Implicit cast from T[] to Span<T>\n```", "```cs\nSpan<byte> slicedBytes = bytes.Slice(start: 5, length: 2);\nslicedBytes[0] = 42;\nslicedBytes[1] = 43;\nAssert.Equal(42, slicedBytes[0]);\nAssert.Equal(43, slicedBytes[1]);\nAssert.Equal(arrayExample [5], slicedBytes[0]);\nAssert.Equal(arrayExample [6], slicedBytes[1]);\nslicedBytes[2] = 44; // Throws IndexOutOfRangeException\nbytes[2] = 45; // OK\nAssert.Equal(arrayExample [2], bytes[2]);\nAssert.Equal(45, arr[2]);\n\n```", "```cs\nusing (var userHiveRegKey = Registry.CurrentUser.OpenSubKey(@\"Software\\Packt\\Books\\NetCore2ByExample\"))\n        {\n           var value = userHiveRegKey?.GetValue(\"TechnicalEditor\");\n        }\n```"]