- en: '11'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AI-Assisted Refactoring with GitHub Copilot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Change is a constant in technology, and that’s certainly true in the .NET ecosystem.
    Every year, Microsoft releases a new version of .NET and C# packed with new features
    to keep the language exciting, useful, and relevant as technology changes. But
    perhaps the most significant changes to .NET development in the last two years
    have come not from the major language releases, but in the field of artificial
    intelligence through AI agents such as GitHub Copilot and ChatGPT.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we’ll explore how GitHub Copilot integrates into Visual Studio
    and brings ChatGPT-like conversational AI into your editor. We’ll also explore
    some of the interesting possibilities this opens and some of the things we must
    keep in mind when considering whether this new technology has a place in our toolset.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing GitHub Copilot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started with GitHub Copilot in Visual Studio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refactoring with GitHub Copilot Chat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drafting documentation with GitHub Copilot Chat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating test ideas with GitHub Copilot Chat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the limits of GitHub Copilot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The starting code for this chapter is available from GitHub at [https://github.com/PacktPublishing/Refactoring-with-CSharp](https://github.com/PacktPublishing/Refactoring-with-CSharp)
    in the `Chapter11/Ch11BeginningCode` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing GitHub Copilot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In 2021, GitHub announced a new artificial intelligence tool called **GitHub
    Copilot**. GitHub Copilot is an editor extension that integrates into different
    editors including JetBrains Rider, VS Code, and all editions of Visual Studio
    2022.
  prefs: []
  type: TYPE_NORMAL
- en: 'What GitHub Copilot does is it looks at the code you just typed and generates
    predictions for the code it thinks you’re about to type. If it has a prediction
    and you are not currently typing, GitHub Copilot displays the prediction in grey
    text in front of your cursor for you to evaluate and possibly add to your code,
    as shown in *Figure 11**.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.1 – GitHub Copilot suggesting code to add as the developer types](img/B21324_11_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.1 – GitHub Copilot suggesting code to add as the developer types
  prefs: []
  type: TYPE_NORMAL
- en: Copilot does this by using a predictive machine learning model that has been
    trained on various pieces of code in many different programming languages, including
    C#, F#, JavaScript, and SQL.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding GitHub’s predictive model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If this sounds familiar, it’s because GitHub Copilot’s model is a specialized
    machine learning model built around a promising new model training technique called
    **transformers**.
  prefs: []
  type: TYPE_NORMAL
- en: Transformers, introduced in 2017 in a paper called *Attention is All You Need*
    ([https://research.google/pubs/pub46201/](https://research.google/pubs/pub46201/)),
    allow machine learning models to be trained on larger bodies of text while still
    retaining the context of how different pieces of text related to each other.
  prefs: []
  type: TYPE_NORMAL
- en: This innovation has led to technologies such as Google BERT (which powered Google
    search predictions), MidJourney, and DALL-E (which can generate art from textual
    prompts), and the extremely popular ChatGPT by OpenAI that can mimic conversations
    with humans.
  prefs: []
  type: TYPE_NORMAL
- en: Transformer-based models are now commonly referred to as **large language models**
    (**LLMs**). Their superpower is their ability to memorize patterns in text and
    generate new text that mimics patterns it has internalized in its model.
  prefs: []
  type: TYPE_NORMAL
- en: Ever wondered what GPT stood for?
  prefs: []
  type: TYPE_NORMAL
- en: The GPT acronym (found in ChatGPT, GPT-4, and similar) stands for **generative
    pre-trained transformer**. In other words, this is a transformer-based model used
    to generate new content, and the model has been trained on a large volume of data.
  prefs: []
  type: TYPE_NORMAL
- en: 'These LLMs take in a textual prompt and generate some form of output. With
    chat LLMs, the prompt might be a question such as “What is .NET?” and the output
    might be a short description of .NET, as pictured in this interaction with Bing
    Chat ([https://www.bing.com/](https://www.bing.com/)) in *Figure 11**.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.2 – Bing Chat describing .NET in response to a short prompt](img/B21324_11_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.2 – Bing Chat describing .NET in response to a short prompt
  prefs: []
  type: TYPE_NORMAL
- en: There is no intelligent understanding built into an LLM. These models do not
    think or have thoughts of their own, but rather use mathematics to identify similarities
    between the text they receive and the large volumes of text the model was trained
    on.
  prefs: []
  type: TYPE_NORMAL
- en: While LLM systems may seem eerily intelligent at times, this is because they
    are emulating the intelligence of the authors of the various books, blog posts,
    tweets, and other materials they’ve been trained on.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Copilot uses an LLM called **Codex**. The Codex model is produced by
    OpenAI and was trained not on blog posts or tweets but on open-source software
    repositories.
  prefs: []
  type: TYPE_NORMAL
- en: This means that when you type something into your editor, the text you type
    can be used as a prompt to predict the next line of code you might type. This
    is very similar to how Google search predicts the next few words in a search term
    or how ChatGPT generates textual replies.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll talk more about the use of open-source code in GitHub Copilot and whether
    it is appropriate to use GitHub Copilot in a workplace project near the end of
    this chapter. For now, let’s move on to some of the newer aspects of GitHub Copilot.
  prefs: []
  type: TYPE_NORMAL
- en: Starting the conversation with GitHub Copilot Chat
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: GitHub extended Copilot’s code generation capabilities by introducing **GitHub
    Copilot Chat**. GitHub Copilot Chat gives you the ability to interact with a conversational
    AI agent like ChatGPT directly in your editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'This means that you can chat with an LLM in Visual Studio and do things such
    as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Ask it to explain a block of code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generate new code using textual prompts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ask Copilot for ways to improve the quality of your code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have Copilot draft unit tests or documentation for methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I’ve even used Copilot to generate intentionally messy code just to practice
    refactoring.
  prefs: []
  type: TYPE_NORMAL
- en: 'A typical interaction with GitHub Copilot Chat involves the user selecting
    some code and then pressing *Alt* + */* to start a conversation. For example,
    *Figure 11**.3* shows the user typing a text prompt to GitHub Copilot Chat with
    a small block of code selected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.3 – Asking GitHub Copilot Chat a question](img/B21324_11_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.3 – Asking GitHub Copilot Chat a question
  prefs: []
  type: TYPE_NORMAL
- en: 'From there, GitHub Copilot Chat generates a textual response that is shown
    to the user, as seen in *Figure 11**.4*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.4 – GitHub Copilot generating an explanation of the block of code](img/B21324_11_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.4 – GitHub Copilot generating an explanation of the block of code
  prefs: []
  type: TYPE_NORMAL
- en: If you feel you’re too experienced with C# to fully benefit from this feature,
    I want to assure you that it has value beyond basic programming. Sometimes when
    maintaining code, you’ll encounter strange method calls that don’t make sense
    and you don’t have any documentation to tell you what the developer was trying
    to do. When this happens, having Chat’s opinion can be very valuable in understanding
    the intent of the developer who wrote the code.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, Chat can be used to generate code, as we’ll see in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: The bottom line for me is that programming with GitHub Copilot Chat is something
    that not only amplifies my capabilities as a developer but also helps keep me
    focused since I have fewer reasons to go check the documentation or leave my editor.
    Between the automation capabilities built into the Chat LLM and this added extra
    focus, GitHub Copilot Chat is a significant boost to my productivity and capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: I suspect you’ll like GitHub Copilot Chat too, so let’s see how to get started.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with GitHub Copilot in Visual Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to work with GitHub Copilot, you’ll need to have a GitHub account.
    If you don’t have one, you can sign up for a free GitHub account at [https://github.com/signup](https://github.com/signup).
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Copilot also requires that you work with Visual Studio 2022 version 17.4.4
    or later. If you haven’t installed Visual Studio, you can download a copy at [https://visualstudio.microsoft.com/downloads/](https://visualstudio.microsoft.com/downloads/).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you need to update or check your Visual Studio version, a quick way of doing
    either task is to launch the **Visual Studio Installer** from the Windows menu.
    This will let you see your current version and optionally update your edition
    of Visual Studio, as shown in *Figure 11**.5*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.5 – Updating Visual Studio from the Visual Studio Installer](img/B21324_11_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.5 – Updating Visual Studio from the Visual Studio Installer
  prefs: []
  type: TYPE_NORMAL
- en: Once you have a GitHub account and an up-to-date edition of Visual Studio, you
    can install the GitHub Copilot extension.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and activating GitHub Copilot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install GitHub Copilot, launch Visual Studio, choose the **Extensions**
    menu, and then select **Manage Extensions**. Next, search for **GitHub Copilot**
    and download and install the extension, as shown in *Figure 11**.6*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.6 – Installing GitHub Copilot in Visual Studio](img/B21324_11_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.6 – Installing GitHub Copilot in Visual Studio
  prefs: []
  type: TYPE_NORMAL
- en: Next, you will need to log in to GitHub within Visual Studio to link the extension
    to your GitHub account. Follow the instructions at [https://docs.github.com/en/copilot/getting-started-with-github-copilot?tool=visualstudio](https://docs.github.com/en/copilot/getting-started-with-github-copilot?tool=visualstudio)
    for the most up-to-date instructions on how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Copilot Chat is currently a separate extension from GitHub Copilot. If
    you want to try Chat, I recommend you install Copilot on its own and ensure it
    works first. Once you’ve done this, repeat the installation process for the Chat
    extension.
  prefs: []
  type: TYPE_NORMAL
- en: Some GitHub Copilot features, such as Chat, may need to be enabled or require
    additional configuration. You can do so by going to the **Tools** menu and then
    selecting **Options…** and finding the **GitHub** node in the list.
  prefs: []
  type: TYPE_NORMAL
- en: Getting access to GitHub Copilot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While GitHub itself is free, GitHub Copilot is a premium feature that requires
    you to have a GitHub Premium license or be part of GitHub Copilot for Business
    account. We’ll talk more about the benefits of Copilot for Business near the end
    of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of this writing, GitHub charges $10 USD/month for individuals or
    $19/month per user for a Copilot for Business account. As with any emerging technology,
    pricing and availability may change over time.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve covered how to install and get access to Copilot, let’s see it
    in action.
  prefs: []
  type: TYPE_NORMAL
- en: Generating suggestions with GitHub Copilot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In your `Program.cs` file for this chapter’s code, type a comment such as `//
    Populate a list of random numbers`, then move down to the next line.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, type the letters `Ra` and wait a moment before continuing. If everything
    is configured right, you should hopefully see a suggestion similar to the one
    I encountered in *Figure 11**.7*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.7 – GitHub Copilot helping at Random](img/B21324_11_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.7 – GitHub Copilot helping at Random
  prefs: []
  type: TYPE_NORMAL
- en: Here, GitHub Copilot has suggested some code based on the context it has observed
    in the area. In my case, its suggestion was `Random rand = new Random();`, which
    is a valid C# code.
  prefs: []
  type: TYPE_NORMAL
- en: In your case, it may suggest something different, including something that potentially
    doesn’t even make sense or compile.
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that LLMs such as GitHub Copilot are not intelligent, but they
    memorize patterns and trends in their training data. Sometimes those trends work,
    while other times they look plausible but reference properties or capabilities
    that simply don’t exist.
  prefs: []
  type: TYPE_NORMAL
- en: Because GitHub Copilot and systems like it are trained on older code, you’ll
    sometimes notice Copilot generating out-of-date code or code using obsolete APIs.
    It’s also entirely possible that Copilot generates code with bugs, security vulnerabilities,
    performance issues, or other bad things. It’s your responsibility as a programmer
    to identify good and bad code.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve covered the basics of working with Copilot, let’s see what this
    has to do with refactoring by working with GitHub Copilot Chat.
  prefs: []
  type: TYPE_NORMAL
- en: Interacting with GitHub Copilot Chat
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With GitHub Copilot Chat installed and configured, let’s try our experiment
    again with a list of random numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Remove any code you added after the comment on populating a list of random numbers.
    Next, move your typing cursor to the line below the comment as if you were about
    to start typing a line of code there.
  prefs: []
  type: TYPE_NORMAL
- en: 'From here, let’s show the GitHub Copilot Chat window by selecting **View**
    and then choosing **GitHub Copilot Chat**. You should see the **GitHub Copilot
    Chat** pane, shown in *Figure 11**.8*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.8 – The GitHub Copilot Chat pane](img/B21324_11_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.8 – The GitHub Copilot Chat pane
  prefs: []
  type: TYPE_NORMAL
- en: 'In the text box, type in `Generate a list of 10 random numbers` and press *Enter*.
    With any luck, you should see something like *Figure 11**.9*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.9 – A code suggestion from GitHub Copilot Chat](img/B21324_11_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.9 – A code suggestion from GitHub Copilot Chat
  prefs: []
  type: TYPE_NORMAL
- en: If you’ve ever interacted with ChatGPT or similar conversational AI agents,
    this should look very similar to that experience. In this case, Copilot Chat generated
    some code that we can accept either by clicking on the first button to copy the
    code or the **Insert** button to add it to the editor directly.
  prefs: []
  type: TYPE_NORMAL
- en: After clicking `Main` method. Click **Accept** and the code will be inserted.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t like working with the GitHub Copilot Chat pane, you can bring up
    GitHub Copilot Chat suggestions at any time with the *Alt* + */* keyboard shortcut.
  prefs: []
  type: TYPE_NORMAL
- en: 'If GitHub Copilot Chat doesn’t seem like it’s working, open the **Output**
    view and choose **Show output from: GitHub Copilot Chat**, as shown in *Figure
    11**.10*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.10 – Diagnostic information from GitHub Copilot Chat](img/B21324_11_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.10 – Diagnostic information from GitHub Copilot Chat
  prefs: []
  type: TYPE_NORMAL
- en: This diagnostic information has helped me track down a few issues, but equally
    often the solution is simply to re-open Visual Studio. Thankfully, this diagnostic
    information is rarely ever needed, but it’s nice to know where to find it if you
    need it.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve seen Copilot at work, let’s use it to refactor some code.
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring with GitHub Copilot Chat
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Because GitHub Copilot Chat was trained on open-source repositories, it has
    had a lot of exposure to people writing about code. Because of this, its likelihood
    of being able to provide helpful insight is high.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see this, we’ll refactor the aptly-named `RefactorMe.cs` file, which looks
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This code has some deliberate inefficiencies, and there’s even a potentially
    dangerous bug I sometimes see with `Random`. I’ll give you a few paragraphs to
    see if you can spot the issue, but let’s see if GitHub Copilot Chat can spot it.
  prefs: []
  type: TYPE_NORMAL
- en: Select the `DisplayRandomNumbers` method and then press *Alt* + */* to open
    the chat prompt. Next, ask Copilot `How would you improve` `this code?`
  prefs: []
  type: TYPE_NORMAL
- en: 'When I asked Copilot, I got several suggestions, as shown in *Figure 11**.11*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.11 – GitHub Copilot Chat acting as a code reviewer](img/B21324_11_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.11 – GitHub Copilot Chat acting as a code reviewer
  prefs: []
  type: TYPE_NORMAL
- en: 'Looking over the suggestions I encountered (which might be different from the
    ones you see following this same experiment), I can summarize them into a few
    bullet points:'
  prefs: []
  type: TYPE_NORMAL
- en: Declare the `Random` outside of the loop for performance reasons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since you know the size of the list, declare it as `new List<int>(10)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a `foreach` and an `Enumerable.Range` instead of a `for` loop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Not only did GitHub Copilot Chat generate ideas for improvement, but it even
    suggested the following code to fulfill its suggestions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here, Copilot suggested some improvements I was considering, such as moving
    Random outside of the loop, and a few I wasn’t, such as using `Enumerable.Range`.
  prefs: []
  type: TYPE_NORMAL
- en: What was the bug?
  prefs: []
  type: TYPE_NORMAL
- en: If you’re curious about the potential bug I mentioned, it had to do with `Random`
    being instantiated in the loop. Every time you run `new Random()`, it uses the
    current system time as a random seed to generate new numbers. If you do this in
    a fast loop, the clock stays the same, resulting in the same sequence of “random”
    numbers every iteration.
  prefs: []
  type: TYPE_NORMAL
- en: Looking at the recommended code, I notice a few opportunities for improvement,
    such as renaming the `n` variable to something more meaningful, using target-typed
    `new` to instantiate the objects, and discarding the unused `i` variable with
    the `_` operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Between GitHub and myself, our final code for this method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The resulting code is more concise, slightly more performant in its list allocation,
    and ultimately represents a slightly better result for a small piece of code.
  prefs: []
  type: TYPE_NORMAL
- en: The purpose of this section wasn’t to show you how to generate random numbers,
    but instead for you to see the potential value chat offers as a “brainless” programming
    buddy who can review your code and generate suggestions. These suggestions won’t
    always make sense or even compile, but they can give you a quick external perspective
    when your coworkers are unavailable.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Copilot Chat as a code reviewer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'GitHub Copilot Chat’s value for refactoring isn’t just limited to code generation.
    You can also ask GitHub Copilot Chat questions such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Can you review this code as if you were a senior engineer in a code review?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What performance optimizations can be made to this method?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can I make this method more readable?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Where would this method encounter errors?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are there any ways of reducing or combining lines that don’t hurt the overall
    readability?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Of course, it’s important to remember that you’re effectively getting advice
    from an LLM that is essentially a glorified autocompletion/sentence prediction
    engine and not a being with intelligent or original thought.
  prefs: []
  type: TYPE_NORMAL
- en: Amusingly, I’ve noticed that asking GitHub Copilot Chat for its opinion on methods
    several times can yield different results. These results can even reverse the
    opinion of the original recommendations that Copilot provided! Still, this can
    be valuable in getting a variety of perspectives.
  prefs: []
  type: TYPE_NORMAL
- en: Before we move on, let’s look at another example of refactoring code.
  prefs: []
  type: TYPE_NORMAL
- en: Targeted refactoring with GitHub Copilot Chat
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This refactoring example focuses on the `BaggageCalculator.cs` file. This file
    holds the final version of the `BaggageCalculator` class from the end of [*Chapter
    2*](B21324_02.xhtml#_idTextAnchor026).
  prefs: []
  type: TYPE_NORMAL
- en: As a quick reminder, this class has a `CalculatePrice` method that calculates
    and displays the baggage fee for a customer based on the number of checked-in
    and carry-on bags and whether they’re traveling on a holiday.
  prefs: []
  type: TYPE_NORMAL
- en: Supporting the public `CalculatePrice` method is a private static `ApplyCheckedBagFee`
    method that calculates the fee of a checked bag.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll focus largely on the `CalculatePrice` method, which looks a little repetitive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Looking at this code, we see three similar blocks that check a condition, calculate
    a fee, display that fee, and then add it to `total`.
  prefs: []
  type: TYPE_NORMAL
- en: This repetitive nature of the code strikes me as a code smell that could potentially
    be improved. One solution would be to extract a method for each of these three
    blocks, but these methods would still be very similar to each other.
  prefs: []
  type: TYPE_NORMAL
- en: Instead, I naturally wonder if there’s a solution that might involve an `Action`
    or a `Func`, but I’m not immediately certain of what such a solution might look
    like.
  prefs: []
  type: TYPE_NORMAL
- en: Thankfully, we can ask Copilot about this by selecting the entire method and
    telling GitHub Copilot Chat `Refactor this method to use an Action that writes
    the fee out and adds it to total so the three blocks are` `less repetitive`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For me, this resulted in the following method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Here, Copilot introduced a local `addFeeToTotal` variable storing an `Action`
    that writes the `fee` to the console and increments `total`. It then calls this
    `Action` from each of the three branches.
  prefs: []
  type: TYPE_NORMAL
- en: However, this refactoring was incorrect in a few regards. First, the messages
    being displayed now start with `Fee` instead of the appropriate fee name. Second,
    the refactoring didn’t remove the `WriteLine` for the holiday fee, so that `fee`
    would be displayed twice.
  prefs: []
  type: TYPE_NORMAL
- en: 'Still, the refactoring does give us an idea of how the code could be improved.
    With a little clean-up, you end up with a more correct method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This code now works properly and reduces duplication. In this particular case,
    Copilot was able to suggest a path forward, but accurately implementing it without
    introducing bugs was beyond its current abilities.
  prefs: []
  type: TYPE_NORMAL
- en: This limit underscores both the need for tests and the role of Copilot as the
    *partner* of the human programmer and not a *replacement* for the human.
  prefs: []
  type: TYPE_NORMAL
- en: Reminder
  prefs: []
  type: TYPE_NORMAL
- en: Remember that GitHub Copilot Chat, ChatGPT, and other generative AI systems
    based on large language models are just prediction machines that generate text
    that follows patterns from their training data. There is nothing guaranteeing
    that these generated values are correct, optimal, or free of bugs.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve covered a few refactoring scenarios, let’s see what else we can
    do with GitHub Copilot Chat.
  prefs: []
  type: TYPE_NORMAL
- en: Drafting documentation with GitHub Copilot Chat
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Over the years, I’ve learned that developers don’t always like to document their
    code. While some code truly is self-documenting as developers claim, other areas
    require proper documentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'In C#, we document public methods with XML documentation, such as the sample
    comment for the `DisplayRandomNumbers` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This specially formatted comment is interpreted by Visual Studio to display
    additional help in the editor. This extra information appears in the editor when
    you are trying to invoke your method, as shown in *Figure 11**.12*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.12 – Visual Studio showing a tooltip containing the method comment](img/B21324_11_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.12 – Visual Studio showing a tooltip containing the method comment
  prefs: []
  type: TYPE_NORMAL
- en: Although the sample documentation we saw a moment ago was relatively straightforward,
    documentation gets a bit more complex when you have return values and parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s use GitHub Copilot Chat to document a method. We’ll start with the `AddEvenNumbers`
    method in `DocumentMe.cs`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This method takes in an array of numbers and, optionally, a number to add to
    the resulting sum. If at least one number was provided, the method returns the
    sum of all even numbers in that array added to the optional `total` parameter.
    If no elements were provided, an `ArgumentException` will be thrown instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you’ve read *my* description of this, let’s see how GitHub Copilot
    describes it. Press *Alt* + */* to open the chat interface and then tell Copilot
    to `Document AddEvenNumbers`. Copilot should suggest documentation changes such
    as the ones shown in the preview in *Figure 11**.12*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.13 – GitHub Copilot suggesting documentation](img/B21324_11_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.13 – GitHub Copilot suggesting documentation
  prefs: []
  type: TYPE_NORMAL
- en: Click **Accept** and the comments will be added to your method.
  prefs: []
  type: TYPE_NORMAL
- en: 'For me, the documentation generated was reasonably good:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a very accurate piece of documentation. The one change I would make
    is to add the following line of XML documenting the potential exception:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This adds the exception to the list shown in the method tooltip, as seen in
    *Figure 11**.13*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.14 – Exception documentation in Visual Studio](img/B21324_11_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.14 – Exception documentation in Visual Studio
  prefs: []
  type: TYPE_NORMAL
- en: Communicating exceptions allows other code to catch them in an appropriate manner.
  prefs: []
  type: TYPE_NORMAL
- en: Human-generated documentation will usually be better than AI documentation,
    but when humans and AI can work together, it can be a huge productivity boost.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we’ll see how these productivity boosts apply to testing
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: Generating test stubs with GitHub Copilot Chat
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For our final technical section of this chapter, let’s look at a method that
    finds the largest number in a sequence of numbers, provided that the number doesn’t
    have a “7” in it somewhere, such as a 71 or 17\. This method is located inside
    of `TestMe.cs`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This `CalculateLargestNumberWithoutASeven` method takes in an `INumberProvider`
    that allows us to call `GenerateNumbers` and get a sequence of integers.
  prefs: []
  type: TYPE_NORMAL
- en: Next, the method looks at the resulting sequence, finds the numbers that don’t
    have a seven somewhere in their string representation, and then returns the largest
    number.
  prefs: []
  type: TYPE_NORMAL
- en: Dependency injection
  prefs: []
  type: TYPE_NORMAL
- en: As a brief refresher, our method is effectively getting its dependency on an
    `INumberProvider` injected into it as an external parameter. This means the code
    works with anything that implements that interface without having to know the
    details.
  prefs: []
  type: TYPE_NORMAL
- en: While this method seems utterly useless as something you might write in the
    real world, think for a moment about how you would test this method. Specifically,
    how would you call this method? What would you give it as an `INumberProvider`?
    What value would you expect it to return?
  prefs: []
  type: TYPE_NORMAL
- en: While you’re thinking that over, let’s see how GitHub Copilot would handle this
    by opening the GitHub Copilot Chat pane and typing in `Generate tests` `for CalculateLargestNumberWithoutASeven.`
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: While I usually prefer to use the *Alt* + */* method of interacting with Copilot,
    if you want Copilot to generate a new file you should use the GitHub Copilot Chat
    pane for best results.
  prefs: []
  type: TYPE_NORMAL
- en: 'For me, Copilot generated a C# code for a new test class. I’ll share that code
    shortly, but what’s most interesting to me about the code generation are the three
    buttons at the bottom of the recommendation, shown in *Figure 11**.14*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.15 – GitHub Copilot offering to create a new file](img/B21324_11_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.15 – GitHub Copilot offering to create a new file
  prefs: []
  type: TYPE_NORMAL
- en: These three buttons allow you to copy the new code to your clipboard, create
    a new file, and insert the code in the current editor, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Since we want the tests to live in the test project, click **Create** **new
    file**.
  prefs: []
  type: TYPE_NORMAL
- en: 'This will create a new file in your test project with any test(s) generated
    by Copilot. For me, it generated two tests, as shown at a high level in *Figure
    11**.16*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.16 – A pair of XUnit tests generated by GitHub Copilot Chat](img/B21324_11_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.16 – A pair of XUnit tests generated by GitHub Copilot Chat
  prefs: []
  type: TYPE_NORMAL
- en: 'The tests aren’t the most important thing here, so I don’t want to focus on
    the code other than to make a few observations on Copilot’s strategy when I asked
    it for tests:'
  prefs: []
  type: TYPE_NORMAL
- en: Copilot generated a pair of tests using xUnit and Moq, which were both installed
    in the test project already. These tests compile and pass.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first test ensured the method threw an exception when given a null input.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second test provided a series of numbers at random and asserted that the
    method returned the largest number without a seven.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both tests used Moq to create a fake `INumberProvider` that is programmed to
    generate the desired sequence of numbers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, have we discovered the silver bullet that allows us to forget about writing
    tests going forward? Probably not.
  prefs: []
  type: TYPE_NORMAL
- en: While both tests verify something legitimate, their readability could be better.
    Additionally, the tests don’t consider all the paths that should be tested. For
    example, it didn’t test with an empty sequence of elements, with only a single
    number, with a single number with a seven in it, with only negative numbers, or
    with the largest number having a seven in it. These are all legitimate cases that
    a human tester would likely consider.
  prefs: []
  type: TYPE_NORMAL
- en: So, GitHub Copilot won’t absolve you of your responsibility to test your code
    (and think about your tests), but it’s not completely worthless either.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Copilot has a lot of value for identifying test cases and considering
    new ways of testing particularly hard-to-test classes. I’ve come to view it as
    a catalyst – or copilot –that helps get your momentum going when writing tests
    of your own.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve seen the value GitHub Copilot provides, let’s talk about its
    limits.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the limits of GitHub Copilot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By this point in the chapter, many readers are probably thinking “This is great,
    but can I actually use this in my job?” That’s a valid question, so let’s talk
    about the two common objections: privacy of source code and license concerns with
    public code.'
  prefs: []
  type: TYPE_NORMAL
- en: Data privacy and GitHub Copilot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many organizations considering GitHub Copilot are concerned that integrating
    an AI tool into their code editor means exposing their code to GitHub. Some also
    raise the potential that GitHub might even use the organization’s private code
    to generate new large language models in the future where these new models might
    generate code based on the organization’s proprietary logic.
  prefs: []
  type: TYPE_NORMAL
- en: These are valid concerns, and depending on which edition of GitHub Copilot you
    are using, there may be some basis for them.
  prefs: []
  type: TYPE_NORMAL
- en: With **GitHub Copilot for Individuals**, the prompts you send to GitHub Copilot,
    including surrounding code and Copilot’s suggested code, may be retained for analysis
    unless you have disabled the code snippet collection in your settings.
  prefs: []
  type: TYPE_NORMAL
- en: 'This setting can be disabled at [https://github.com/settings/copilot](https://github.com/settings/copilot)
    by unchecking the **Allow GitHub to use my code snippets for product improvements**
    checkbox, as shown in *Figure 11**.17*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.17 – GitHub Copilot settings](img/B21324_11_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.17 – GitHub Copilot settings
  prefs: []
  type: TYPE_NORMAL
- en: While GitHub Copilot for Individuals has some data privacy concerns by default,
    these can be easily opted out if you are working with sensitive code.
  prefs: []
  type: TYPE_NORMAL
- en: It should also be noted that GitHub Copilot for Individuals also collects telemetry
    on GitHub Copilot usage to detect how frequently the service is used and detect
    and resolve errors.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, **GitHub Copilot for Business** is private by default and
    also offers additional organization-wide policy settings that businesses can configure
    to globally enable or disable Copilot. These features can also be used to prevent
    Copilot from generating code matching known public code for everyone in your organization.
  prefs: []
  type: TYPE_NORMAL
- en: According to the **GitHub Copilot Trust Center**, *“GitHub Copilot [for business]
    does not use Prompts or Suggestions to train AI models. These inputs are not retained
    or utilized in the training process of AI models for GitHub Copilot”.* This means
    that the code you send to GitHub Copilot and the suggestions it generates for
    you are private from human consumption and will not be used to give others insight
    into your codebase.
  prefs: []
  type: TYPE_NORMAL
- en: Disclaimer
  prefs: []
  type: TYPE_NORMAL
- en: This book is intended to help you understand the basics of GitHub Copilot and
    was written with the best understanding available of an early technology. As with
    any technology, GitHub Copilot continues to evolve and grow. As it does so, the
    privacy policy, data retention policy, and pricing model will likely change over
    time. Readers are encouraged to verify the information in this chapter against
    current information provided by GitHub before making any usage decisions.
  prefs: []
  type: TYPE_NORMAL
- en: Glory Francke, head of privacy at GitHub, states “We only process your code
    to provide the service. It is not retained, human eyes don’t see it, and it is
    not being used for any AI model improvements” (GitHub Copilot Trust Center – [https://resources.github.com/copilot-trust-center/](https://resources.github.com/copilot-trust-center/)).
  prefs: []
  type: TYPE_NORMAL
- en: In general, I find the GitHub Copilot Trust Center to be a very useful tool
    in addressing enterprise concerns around the security, privacy, and accessibility
    of the tool. You can read more about the trust center in the *Further reading*
    section of this chapter, but for now, let’s talk more about GitHub Copilot and
    public code.
  prefs: []
  type: TYPE_NORMAL
- en: Concerns around GitHub Copilot and public code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most open-source code is accompanied by a license dictating the terms developers
    must follow when using the source code. There are several common licenses that
    developers choose, such as the MIT License, Apache License, GNU General Public
    License, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: While many of these licenses are very permissive, some include clauses requiring
    additional actions such as attributing the source code, making your organization’s
    code open source, or not being able to use the code in commercial software projects.
  prefs: []
  type: TYPE_NORMAL
- en: Because of restrictions like this, and because GitHub Copilot was trained on
    open-source software code, there’s a small chance that GitHub Copilot might accidentally
    generate code identical to code from a public repository.
  prefs: []
  type: TYPE_NORMAL
- en: Because of this concern, GitHub Copilot now allows individuals and businesses
    to block the generation of code that is identical to known public code. Additionally,
    GitHub is currently rolling out a new feature called GitHub Copilot code referencing,
    which allows you to detect whether Copilot has suggested public code. This feature
    lets you unleash Copilot’s full creativity while allowing you to see what repositories
    the code was found and the licenses for those repositories.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing this chapter, this feature was not yet available for
    GitHub Copilot for Visual Studio, but it’s likely that this capability will make
    it to Visual Studio sometime after the publication of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s close the chapter with a case study on GitHub Copilot Chat at our fictitious
    airline.
  prefs: []
  type: TYPE_NORMAL
- en: 'Case study: Cloudy Skies Airline'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The use of AI at Cloudy Skies Airlines started first with individual developers,
    as often happens with productivity tools and new technologies. James, an eager
    young developer on the team, shared with his coworkers how he’s been trying GitHub
    Copilot, feeling more capable and empowered, and even learning new things. His
    coworkers were excited, but his manager, Mya, had a few concerns.
  prefs: []
  type: TYPE_NORMAL
- en: Looping in the chief technology officer (CTO), Mya and James demonstrated the
    capabilities of the tool and talked about how it worked. The CTO was worried about
    legal compliance and the safety of the company’s intellectual property. As a result,
    the use of Copilot and other AI tools was temporarily suspended while the team
    investigated the implications of the technology.
  prefs: []
  type: TYPE_NORMAL
- en: 'After some research, and with the help of the GitHub Copilot Trust Center,
    the Cloudy Skies Airlines team agreed to a multi-stage plan:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Pilot the program**: A small group of developers, including James, will try
    GitHub Copilot with code snippet collection disabled for two weeks'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Review**: The team will evaluate any impacts on productivity, code quality,
    and general developer feedback from the pilot program and decide whether the tool
    should be adopted'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Rollout**: If GitHub Copilot is found to be beneficial, it will either be
    allowed for individuals organizational-wide with guidelines or be managed through
    a GitHub Copilot for Business account, depending on the results of the technology
    review'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The developers in the pilot program reported having an easier time focusing
    on code, employing helpful practices for speeding up “boring” aspects of coding,
    and learning some new practices and concepts from the code that Copilot generated.
  prefs: []
  type: TYPE_NORMAL
- en: As a result, Cloudy Skies Airlines embraced GitHub Copilot and adopted a GitHub
    Copilot for Business account to ensure snippet collection was disabled and that
    appropriate policies on things such as public code sources were set at an organizational
    level.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw how GitHub Copilot and GitHub Copilot Chat can help
    developers understand, refactor, document, and even test their code.
  prefs: []
  type: TYPE_NORMAL
- en: We talked about how GitHub Copilot is not an intelligent AI overlord, but instead
    a predictive model built around patterns in text found in open-source repositories.
    As a result, the code it generates may not even compile and may contain security
    vulnerabilities, bugs, performance issues, or other undesirable effects.
  prefs: []
  type: TYPE_NORMAL
- en: We closed this chapter with a discussion of privacy and open-source licensing
    that organizations must care about for security and compliance purposes and how
    GitHub Copilot helps organizations meet those needs.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll explore code analysis in Visual Studio and see how
    code analysis can help you detect potential issues and targets for refactoring
    in your code.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How do GitHub Copilot and GitHub Copilot Chat work?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you address data privacy and compliance concerns with Copilot?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can find more information about GitHub Copilot at these URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: 'About the GitHub Copilot extension for Visual Studio: [https://learn.microsoft.com/en-us/visualstudio/ide/visual-studio-github-copilot-extension](https://learn.microsoft.com/en-us/visualstudio/ide/visual-studio-github-copilot-extension)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GitHub Copilot Trust Center: [https://resources.github.com/copilot-trust-center/](https://resources.github.com/copilot-trust-center/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*GitHub Copilot* *Chat*: [https://docs.github.com/en/copilot/github-copilot-chat/about-github-copilot-chat](https://docs.github.com/en/copilot/github-copilot-chat/about-github-copilot-chat)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
