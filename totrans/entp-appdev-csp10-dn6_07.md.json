["```cs\n        public class WeatherService\n        {\n            private readonly IweatherProvider\n                weatherProvider;\n            public WeatherService(IWeatherProvider\n                weatherProvider)\n                    => this.weatherProvider =\n                        weatherProvider;\n            public WeatherForecast GetForecast(string\n                location) =>\n                this.weatherProvider.\n                    GetForecastOfLocation (location);   \n        }\n    ```", "```cs\n    public class WeatherService2\n    {\n        private IWeatherProvider _weatherProvider;\n        public IWeatherProvider WeatherProvider\n        {\n            get => _weatherProvider == null ?\n                        throw new\n                            InvalidOperationException(\n                            \"WeatherService is not\n                            initialized\")\n                    : _weatherProvider;\n            set => _weatherProvider = value;\n        }\n        public WeatherForecast GetForecast(string\n            location) =>\n            this.WeatherProvider.\n                GetForecastOfLocation(location);\n    }\n```", "```cs\n    public class WeatherService\n    {\n       public WeatherForecast GetForecast(\n           string location, IWeatherProvider\n           weatherProvider)\n        {\n            if(weatherProvider == null)\n            {\n                throw new ArgumentNullException(\n                    nameof(weatherProvider));\n            }\n            return weatherProvider.\n                GetForecastOfLocation (location);\n        }\n    }\n```", "```cs\nforeach(var i in builder.Services.AsEnumerable())\n```", "```cs\n{\n```", "```cs\n    Console.WriteLine($\"{i.Lifetime} - {i.ServiceType.ToString()}\");\n```", "```cs\n}\n```", "```cs\nbuilder.Services.AddScoped<IWeatherProvider, WeatherProvider>();\n```", "```cs\n    public static IServiceCollection AddTransient(this\n     IServiceCollection services, Type serviceType);\n    ```", "```cs\n    public static IServiceCollection AddSingleton(this\n     IServiceCollection services, Type serviceType);\n    ```", "```cs\n    public static IServiceCollection AddScoped(this\n     IServiceCollection services, Type serviceType);\n    ```", "```cs\nbuilder.Host.UseDefaultServiceProvider(opt => { opt.ValidateScopes = true; }); \n```", "```cs\n    public interface IScopedService {     }\n    public class ScopedService : IScopedService {    }\n    ```", "```cs\n    public interface ISingletonService   {    }\n    public class SingletonService : ISingletonService {  }\n    ```", "```cs\n    public interface ITransientService   {    }\n    public class TransientService : ITransientService{   }\n    ```", "```cs\n    //Register as Scoped\n    builder.Services.AddScoped<IScopedService,ScopedService>();\n    //Register as Singleton\n    builder.Services.AddSingleton<ISingletonService,SingletonService>();\n    //Register as Transient\n    builder.Services.AddTransient<ITransientService,TransientService>();\n    ```", "```cs\n    public class HomeViewModel\n    {\n            public int Singleton { get; set; }\n            public int Scoped { get; set; }\n            public int Scoped2 { get; internal set; }\n            public int Transient { get; set; }\n            public int Transient2 { get; internal set; }\n    }\n    ```", "```cs\n    private readonly ILogger<HomeController> _logger;\n    private readonly IScopedService scopedService;\n    private readonly IScopedService scopedService2;\n    private readonly ISingletonService singletonService;\n    private readonly ITransientService transientService;\n    private readonly ITransientService transientService2;\n    public HomeController(ILogger<HomeController> logger,\n    IScopedService scopedService,\n    IScopedService scopedService2,\n    ISingletonService singletonService,\n    ITransientService transientService,\n    ITransientService transientService2)\n    {\n         this._logger = logger;\n         this.scopedService = scopedService;\n         this.scopedService2 = scopedService2;\n         this.singletonService = singletonService;\n         this.transientService = transientService;\n         this.transientService2 = transientService2;\n    }\n    ```", "```cs\n    public IActionResult Index()\n    {\n          var viewModel = new HomeViewModel\n         {\n             Scoped = scopedService.GetHashCode(),\n             Scoped2 = scopedService2.GetHashCode(),\n             Singleton = singletonService.GetHashCode(),\n             Transient = transientService.GetHashCode(),\n             Transient2 = transientService2.GetHashCode(),\n          };\n          return View(viewModel);\n    }\n    ```", "```cs\n    @model HomeViewModel\n    @{\n        ViewData[\"Title\"] = \"Home Page\";\n    }\n    <h2 class=\"text-success\">Singleton.</h2>\n    <p>\n            <strong>ID:</strong> <code>@Model.Singleton\n    </code>\n    </p>\n    <h2 class=\"text-success\">Scoped instance 1</h2>\n    <p>\n            <strong>ID:</strong> <code>@Model.Scoped</code>\n    </p>\n    <h2 class=\"text-success\">Scoped instance 2</h2>\n    <p>\n            <strong>ID:</strong> <code>@Model.Scoped2</code>\n    </p>\n    <h2 class=\"text-success\">Transient instance 1</h2>\n    <p>\n            <strong>ID:</strong> <code>@Model.Transient</code>\n    </p>\n    <h2 class=\"text-success\">Transient instance 2</h2>\n    <p>\n            <strong>ID:</strong> <code>@Model.Transient2</code>\n    </p>\n    ```", "```cs\nvar _disposableSingletonService= new DisposableSingletonService();\n```", "```cs\n// Registering an instance of a class with singleton lifetime\n```", "```cs\nbuilder.Services.AddSingleton<IDisposableSingletonService>(_disposableSingletonService);\n```", "```cs\napp.Lifetime.ApplicationStopping.Register(() => {\n```", "```cs\n    _disposableSingletonService.Dispose();\n```", "```cs\n});\n```", "```cs\n// Refer AsyncDisposableScope sample code for the implementation\n```", "```cs\nawait using (var scope = provider.CreateAsyncScope())\n```", "```cs\n{\n```", "```cs\n    var foo = scope.ServiceProvider.GetRequiredService<IWeatherProviderAsync>();\n```", "```cs\n} \n```", "```cs\npublic IActionResult Index([FromServices] ISingletonService singletonService2)\n```", "```cs\n{\n```", "```cs\n}\n```", "```cs\napp.MapGet(\"/\", (ISingletonService service) => service.DoAction());\n```", "```cs\nservices.AddScoped<IWeatherForecastService, WeatherForecastService>();\n```", "```cs\nservices.AddScoped<IWeatherForecastService, WeatherForecastServiceV2>();\n```", "```cs\nprivate readonly IWeatherForecastService weatherForecastService;\n```", "```cs\npublic WeatherForecastController(ILogger<WeatherForecastController> logger, IWeatherForecastService weatherForecastService)\n```", "```cs\n{\n```", "```cs\n      _logger = logger;\n```", "```cs\n      this.weatherForecastService = weatherForecastService;\n```", "```cs\n}\n```", "```cs\nprivate readonly IEnumerable<IWeatherForecastService> weatherForecastServices;\n```", "```cs\npublic WeatherForecastController(\n```", "```cs\nILogger<WeatherForecastController> logger, IEnumerable<IWeatherForecastService> weatherForecastServices)\n```", "```cs\n{\n```", "```cs\n   _logger = logger;\n```", "```cs\n   this.weatherForecastServices = weatherForecastServices;\n```", "```cs\n}\n```", "```cs\nservices.AddScoped<IWeatherForecastService, WeatherForecastService>();\n```", "```cs\nservices.TryAddScoped<IWeatherForecastService, WeatherForecastServiceV2>();\n```", "```cs\nbuilder.Services.TryAddScoped<IWeatherForecastService, WeatherForecastService>();\n```", "```cs\nbuilder.Services.Replace(ServiceDescriptor.Scoped<IWeatherForecastService, WeatherForecastServiceV2>());\n```", "```cs\npublic WeatherForecastController(ILogger<WeatherForecastController> logger, IEnumerable<IWeatherForecastService> weatherForecastService)\n```", "```cs\n{\n```", "```cs\n      _logger = logger;\n```", "```cs\n      this.weatherForecastService = weatherForecastService;\n```", "```cs\n}\n```", "```cs\nservices.RemoveAll<IWeatherForecastService>();\n```", "```cs\n//Removes the first registration of IWeatherForecastService           \n```", "```cs\nBuilder.Services.Remove(ServiceDescriptor.Scoped<IWeatherForecastService, WeatherForecastService>());\n```", "```cs\nBuilder.Services.TryAdd(ServiceDescriptor.Singleton(typeof(ILogger<>), typeof(Logger<>))); \n```", "```cs\nnamespace Microsoft.Extensions.DependencyInjection\n```", "```cs\n{\n```", "```cs\npublic static class NotificationServicesServiceCollectionExtension\n```", "```cs\n{\n```", "```cs\n   public static IServiceCollection AddNotificationServices(this IServiceCollection services)\n```", "```cs\n  {\n```", "```cs\n       services.TryAddScoped<INotificationService, EmailNotificationService>();\n```", "```cs\n       services.TryAddScoped<INotificationService, SMSNotificationService>();\n```", "```cs\n        return services;\n```", "```cs\n   }\n```", "```cs\n}\n```", "```cs\nbuilder.Services.AddNotificationServices();\n```", "```cs\n{\n```", "```cs\n  \"AllowedHosts\": \"*\",\n```", "```cs\n  \"isFlightOn\": \"true\"\n```", "```cs\n}\n```", "```cs\n@using Microsoft.Extensions.Configuration\n```", "```cs\n@inject Iconfiguration Configuration\n```", "```cs\n@{\n```", "```cs\n   string isFlightOn = Configuration[\"isFlightOn\"];\n```", "```cs\n   if (string.Equals(isFlightOn, \"true\", StringComparison.OrdinalIgnoreCase))\n```", "```cs\n   {\n```", "```cs\n       <h1>\n```", "```cs\n        <strong>Flight content</strong>\n```", "```cs\n       </h1>\n```", "```cs\n   }\n```", "```cs\n}\n```", "```cs\npublic static StartupMethods LoadMethods(IServiceProvider hostingServiceProvider, [DynamicallyAccessedMembers(StartupLinkerOptions.Accessibility)] Type startupType, string environmentName, object? instance = null)\n```", "```cs\n{ \n```", "```cs\n    var configureMethod = FindConfigureDelegate(startupType, environmentName);\n```", "```cs\n    var servicesMethod = FindConfigureServicesDelegate(startupType, environmentName);\n```", "```cs\n    var configureContainerMethod = FindConfigureContainerDelegate(startupType, environmentName);\n```", "```cs\n     -----------------------\n```", "```cs\n}\n```", "```cs\n    builder.Host.UseServiceProviderFactory(new AutofacServiceProviderFactory());\n    ```", "```cs\n    builder.Host.ConfigureContainer<ContainerBuilder>(builder =>\n    {\n        builder.RegisterType<WeatherProvider>()\n                        .As<IWeatherProvider>();\n    });\n    ```", "```cs\n    public class WeatherForecastController : ControllerBase\n    {\n            private readonly ILogger<WeatherForecastController> _logger;\n            private readonly IWeatherProvider weatherProvider;\n            public WeatherForecastController( ILogger<WeatherForecastController> logger,\n    IWeatherProvider weatherProvider)\n            {\n                _logger = logger;\n                this.weatherProvider = weatherProvider;\n            }\n            [HttpGet]\n            public IEnumerable<WeatherForecast> Get()\n            {\n                return weatherProvider.GetForecast();\n            }\n    }\n    ```"]