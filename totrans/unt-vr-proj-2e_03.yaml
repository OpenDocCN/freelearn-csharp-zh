- en: VR Build and Run
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Yeah well, this is cool and everything, but where''s my VR? I WANT MY VR!*'
  prefs: []
  type: TYPE_NORMAL
- en: Hold on kid, we're getting there.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to set up your system and configure your project
    to build and run with a virtual reality **head-mounted display** (**HMD**). We
    will be discussing the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The levels of VR device integration software
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling virtual reality for your platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using device-specific camera rigs in your project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up your development machine to build and run VR projects from Unity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This chapter is very nuts and bolts. Although Unity aims to provide a unified
    platform for *create once, build many*, you are always going to need to do some
    system setup, project configuration, and include object components for your specific
    target devices. After the first couple of topics in this chapter, you can jump
    to the section(s) that most concern you and your target devices. This chapter
    includes cookbook instructions for the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Building for SteamVR
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building for Oculus Rift
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building for Windows immersive MR
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up for Android devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building for GearVR and Oculus Go
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building for Google VR
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up for iOS devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unity VR Support and Toolkits
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Generally, as a developer, you spend your time working on your project scene.
    As we did for the diorama in the previous chapter, you''ll add objects, attach
    materials, write scripts, and so on. When you build and run your project, the
    scene is rendered on a VR device and responds in real time to head and hand motions.
    The following diagram summarizes this Unity system VR architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b7b252dc-9367-455d-8e69-b77970004120.png)'
  prefs: []
  type: TYPE_IMG
- en: Within your scene, you may include a camera rig and other higher-level toolkit
    prefabs and components. All device manufacturers provide toolkits that are tuned
    to their specific devices. At a minimum, this includes the Unity Camera component
    for rendering the VR scene. It probably also includes a whole suite of prefabs
    and components, some required and some optional, which really help you create
    interactive, responsive, and comfortable VR experiences. We will go into detail
    throughout this chapter on how to set up your scene with these specific devices.
  prefs: []
  type: TYPE_NORMAL
- en: Unity has a growing library of built-in classes and components to support VR—what
    they call *XR*—and also to include augmented reality. Some are platform specific.
    But some are device independent. These include stereo rendering, input tracking,
    and audio spatializers, to name a few. For details, see the Unity Manual pages
    for `UnityEngine.XR` and `UnityEngine.SpatialTracking` ([https://docs.unity3d.com/ScriptReference/30_search.html?q=xr](https://docs.unity3d.com/ScriptReference/30_search.html?q=xr)).
  prefs: []
  type: TYPE_NORMAL
- en: At the lower level, any Unity project that runs on VR must set up the **XR Player
    Settings** with **Virtual Reality Supported**, and identify the specific low-level
    SDK the application should be used to drive the VR device. We will go into detail
    throughout this chapter on how to set up your project for specific devices.
  prefs: []
  type: TYPE_NORMAL
- en: So, as you can see, Unity is sandwiched between the app-level toolkit components
    and the device-level SDK. It provides a device-independent glue between device-specific
    API, tools, and optimizations.
  prefs: []
  type: TYPE_NORMAL
- en: Strategically, the team at Unity Technologies is dedicated to delivering a unified
    development platform for 2D, 3D, VR, and AR games and apps. Important new components
    are under development at Unity (and may already be available by the time you read
    this book) including the VR Foundation Toolkit and new input system. These are
    not covered in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Before jumping in, let's understand the possible ways to integrate our Unity
    project with virtual reality devices. Software for the integration of applications
    with VR hardware spans a spectrum, from built-in support and device-specific interfaces
    to device-independent and platform- independent ones. So, let's consider your
    options.
  prefs: []
  type: TYPE_NORMAL
- en: Unity's built-in VR support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In general, your Unity project must include a camera object that can render
    stereoscopic views, one for each eye on the VR headset. Since Unity 5.1, support
    for VR headsets has been built into Unity for various devices across several platforms.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can simply use a standard camera component, like the one attached to the
    default `Main Camera` when you create a new scene. As we''ll see, you can have Virtual
    Reality Supported enabled in XR Player Settings for Unity to render stereoscopic
    camera views and run your project on a VR headset (HMD). In Player Settings, you
    then choose which specific virtual reality SDK(s) to use when the project is built.
    The SDK talks to the device runtime drivers and underlying hardware. Unity''s
    support for VR devices is collected in the XR class, and is documented as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**XR Settings**: Global XR-related settings including a list of supported devices
    in the build, and eye textures for the loaded device. See [https://docs.unity3d.com/ScriptReference/XR.XRSettings.html](https://docs.unity3d.com/ScriptReference/XR.XRSettings.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**XR Device**: Query the capabilities of the current device such as the refresh
    rate and tracking space type. See [https://docs.unity3d.com/ScriptReference/XR.XRDevice.html](https://docs.unity3d.com/ScriptReference/XR.XRDevice.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**XR Input Tracking**: Access the VR positional tracking data including the
    position and rotation of individual *nodes*. See [https://docs.unity3d.com/ScriptReference/XR.InputTracking.html](https://docs.unity3d.com/ScriptReference/XR.InputTracking.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Input controller buttons, triggers, touchpads, and thumbsticks can also map
    generically to Unity''s Input system. For example, the OpenVR hand controller
    mappings can be found here: [https://docs.unity3d.com/Manual/OpenVRControllers.html](https://docs.unity3d.com/Manual/OpenVRControllers.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Device-specific toolkits
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While built-in VR support may be sufficient to get started, you are advised
    to also install the device-specific Unity package provided by the manufacturer.
    The device-specific interface will provide prefab objects, lots of useful custom
    scripts, shaders, and other important optimizations that directly take advantage
    of the features of the underlying runtime and hardware. The toolkits ordinarily
    include example scenes, prefabs, components, and documentation to guide you. Toolkits
    include:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SteamVR Plugin**: Steam''s SteamVR toolkit ([https://assetstore.unity.com/packages/tools/steamvr-plugin-32647](https://assetstore.unity.com/packages/tools/steamvr-plugin-32647))
    was originally released for HTC VIVE only. It now has support for several VR devices
    and runtimes that have positional-tracked left and right-hand controllers. This
    includes Oculus Rift and Windows Immersive MR. You build your project using the
    OpenVR SDK and the final executable program will decide at runtime which type
    of hardware you have attached to your PC and run that app on that device. This
    way, you don''t need different versions of your app for VIVE, Rift, and IMR devices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Oculus Integration Toolkit**: The Oculus Integration plugin for Unity ([https://assetstore.unity.com/packages/tools/integration/oculus-integration-82022](https://assetstore.unity.com/packages/tools/integration/oculus-integration-82022))
    supports Oculus VR devices including Rift, GearVR, and GO. In addition to the
    Touch hand controllers, it supports Oculus Avatar, Spatial Audio, and network
    Rooms SDK.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Windows Mixed Reality Toolkit**: The Windows MRTK plugin ([https://github.com/Microsoft/MixedRealityToolkit-Unity](https://github.com/Microsoft/MixedRealityToolkit-Unity))
    supports VR and AR devices in the Windows 10 UWP Mixed Reality family, including
    immersive HMD (like those from Acer, HP, and others) as well as the wearable HoloLens
    augmented reality headset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Google VR SDK for Unity**: The GVR SDK for Unity plugin ([https://github.com/googlevr/gvr-unity-sdk/releases](https://github.com/googlevr/gvr-unity-sdk/releases))
    provides support for user input, controllers, and rendering for both Google Daydream
    and simpler Google Cardboard environments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you set up your VR projects in Unity, you will probably install one or
    more of these toolkits. We walk you through this later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Application toolkits
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you require more device independence plus higher-level interactive features,
    consider the open source **Virtual Reality ToolKit** (**VRTK**) at [https://assetstore.unity.com/packages/tools/vrtk-virtual-reality-toolkit-vr-toolkit-64131](https://assetstore.unity.com/packages/tools/vrtk-virtual-reality-toolkit-vr-toolkit-64131) and
    **NewtonVR** ([https://github.com/TomorrowTodayLabs/NewtonVR](https://github.com/TomorrowTodayLabs/NewtonVR)).
    These Unity plugins provide a framework for developing VR applications with support
    for multiple platforms, locomotion, interactions, and UI controls. NewtonVR focuses
    mostly on *physics interactions*. VRTK is built on top of the Unity built-in VR
    support plus the device-specific prefabs, so it's not *instead of* but is a wrapper
    on top of those SDKs.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is worth mentioning at this point that Unity is working on its own toolkit,
    the **XR Foundation Toolkit** (**XRFT**) at [https://blogs.unity3d.com/2017/02/28/updates-from-unitys-gdc-2017-keynote/](https://blogs.unity3d.com/2017/02/28/updates-from-unitys-gdc-2017-keynote/))
    which will include:'
  prefs: []
  type: TYPE_NORMAL
- en: Cross-platform controller input
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizable physics systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AR/VR-specific shaders and camera fades
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Object snapping and building systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developer debugging and profiling tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All major AR and VR hardware systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web and JavaScript-based VR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Important JavaScript APIs are being built directly into major web browsers,
    including special builds of Firefox, Chrome, Microsoft Edge, and other browsers
    like those from Oculus and Samsung for GearVR.
  prefs: []
  type: TYPE_NORMAL
- en: WebVR, for example, is like **WebGL** (the 2D and 3D graphics markup API for
    the web), adding VR rendering and hardware support. While Unity presently has
    support for WebGL, it does not support building VR apps for WebVR (yet). But we
    hope to see this happen one day soon.
  prefs: []
  type: TYPE_NORMAL
- en: The promise of Internet-based WebVR is exciting. The internet is the greatest
    content distribution system in the history of the world. The ability to build
    and distribute VR content just as easily as web pages will be revolutionary.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we know, browsers run on just about any platform. So, if you target your
    game to WebVR or similar framework, you don''t even need to know the user''s operating
    system, let alone which VR hardware they''re using! That''s the idea anyway. Some
    of the tools and frameworks to watch include:'
  prefs: []
  type: TYPE_NORMAL
- en: '**WebVR** ([http://webvr.info/](http://webvr.info/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A-Frame** ([https://aframe.io/](https://aframe.io/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Primrose** ([https://www.primrosevr.com/](https://www.primrosevr.com/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ReactVR** ([https://facebook.github.io/react-vr/](https://facebook.github.io/react-vr/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3D worlds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are a number of third-party 3D world platforms that provide multi-user
    social experiences in shared virtual spaces. You can chat with other players,
    move between rooms through *portals*, and even build complex interactions and
    games without having to be an expert. For examples of 3D virtual worlds, check
    out the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**VRChat**: [http://vrchat.net/](http://vrchat.net/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AltspaceVR**: [http://altvr.com/](http://altvr.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**High Fidelity**: [https://highfidelity.com/](https://highfidelity.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While these platforms may have their own tools for building rooms and interactions,
    in particular, VRChat lets you develop 3D spaces and avatars in Unity. Then you
    export them using their SDK and load them into VRChat for you and others to share the
    virtual spaces you created over the internet in a real-time social VR experience.
    We will explore this in [Chapter 13](721ca227-9208-4342-b6ac-a12799adbb2b.xhtml),
    *Social VR Metaverse*.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling Virtual Reality for your platform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The diorama scene we created in the previous chapter was a 3D scene using the
    Unity default `Main Camera`. As we saw, when you pressed Play in the Unity Editor
    you had the scene running in the Game window on your 2D computer monitor. The
    steps for setting up your project to run in VR include:'
  prefs: []
  type: TYPE_NORMAL
- en: Set the target platform for your project builds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enable Virtual Reality in the XR Player Settings in Unity and set the VR SDK
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Import the device toolkit for your target device into your project (optional
    but recommended) and use the prescribed prefabs instead of the default `Main Camera`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install the system tool required to build your target device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure your device's operating system is enabled for development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure your device's VR runtime is set up and running
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you are not sure, use the table to determine the target platform, virtual
    reality SDK, and Unity package to use for your VR device:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Device** | **Target Platform** | **VR SDK** | **Unity Package** |'
  prefs: []
  type: TYPE_TB
- en: '| **HTC Vive** | Standalone | OpenVR | SteamVR Plugin |'
  prefs: []
  type: TYPE_TB
- en: '| **Oculus Rift** | Standalone | OpenVR | SteamVR Plugin |'
  prefs: []
  type: TYPE_TB
- en: '| **Oculus Rift** | Standalone | Oculus | Oculus Integration |'
  prefs: []
  type: TYPE_TB
- en: '| **Windows IMR** | Universal Windows Platform | Windows Mixed Reality | Mixed
    Reality Toolkit Unity |'
  prefs: []
  type: TYPE_TB
- en: '| **GearVR/GO** | Android | Oculus | Oculus Integration |'
  prefs: []
  type: TYPE_TB
- en: '| **Daydream** | Android | Daydream | Google VR SDK for Unity and Daydream
    Elements |'
  prefs: []
  type: TYPE_TB
- en: '| **Cardboard** | Android | Cardboard | Google VR SDK for Unity |'
  prefs: []
  type: TYPE_TB
- en: '| **Cardboard** | iOS | Cardboard | Google VR SDK for Unity |'
  prefs: []
  type: TYPE_TB
- en: 'Links to the Unity packages for various integration toolkits are listed as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: SteamVR Plugin: [https://assetstore.unity.com/packages/tools/steamvr-plugin-32647](https://assetstore.unity.com/packages/tools/steamvr-plugin-32647)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Oculus Integration: [https://assetstore.unity.com/packages/tools/integration/oculus-integration-82022](https://assetstore.unity.com/packages/tools/integration/oculus-integration-82022)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MixedRealityToolkit-Unity: [https://github.com/Microsoft/MixedRealityToolkit-Unity](https://github.com/Microsoft/MixedRealityToolkit-Unity)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google VR SDK for Unity: [https://github.com/googlevr/gvr-unity-sdk/releases](https://github.com/googlevr/gvr-unity-sdk/releases)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Daydream Elements: [https://github.com/googlevr/daydream-elements/releases](https://github.com/googlevr/daydream-elements/releases)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let's configure the project for your specific VR headset.
  prefs: []
  type: TYPE_NORMAL
- en: As you know, installation and setup details are subject to change. We recommend
    you double-check with the current Unity manual and your device's Unity interface
    documentation for the latest instructions and links.
  prefs: []
  type: TYPE_NORMAL
- en: Setting your target platform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'New Unity projects normally default to targeting standalone desktop platforms.
    If this works for you, you do not need to change anything. Let''s see:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Build Settings window (File | Build Settings…) and review the Platform
    list
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Choose your target platform. For example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you're building for Oculus Rift or HTC VIVE, for example, choose PC, Mac
    & Linux Standalone
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If you're building for Windows MR, choose **U**niversal Windows Platform
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are building for Google Daydream on Android, choose **Android**
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are building for Google Cardboard on iOS, choose iOS
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Then press Switch Platform
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting your XR SDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When your project is built with **Virtual Reality Supported** enabled in **Player
    Settings**, it renders stereoscopic camera views and runs on an HMD:'
  prefs: []
  type: TYPE_NORMAL
- en: Go into Player Settings (Edit | Project Settings | Player).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Inspector window, find the XR Settings at the bottom and check the Virtual
    Reality Supported checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the Virtual Reality SDK you will require for your target device. Refer
    to the previous table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Depending on the target platform you are using, the Virtual Reality SDKs available
    in your Unity installation will vary. If your target VR is shown, then you're
    good to go. You can add others by pressing the ( + ) button in the list, and remove
    ones pressing the ( - ) button.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the following screenshot shows the Virtual Reality SDKs selected
    for the Standalone platform. With Virtual Reality Supported enabled, the app will
    use Oculus SDK if it can. If the app cannot initialize the Oculus SDK at runtime,
    it will then try the OpenVR SDK.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, by pressing Play in the Unity Editor you may be able to preview
    your scene in VR. Different platforms support Play mode in different ways. Some
    do not support Editor previews at all.
  prefs: []
  type: TYPE_NORMAL
- en: Installing your device toolkit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, install your device-specific Unity package. If the toolkit is available
    in the Unity Asset Store, use the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Within Unity, open the Asset Store window (Window | Asset Store)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for the package you want to install
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the asset's page, press Download, and then click on Install to install the
    files in your `Project Assets/` folder
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you downloaded the package from the web separately, use the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Within Unity, select Assets | Import Package | Custom Package
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the folder containing the `.unitypackage` file you downloaded
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press Open and then click on Install to install the files into your `Project
    *Assets/*` folder
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Feel free to explore the package contents files. Try opening and trying out
    any sample scenes included. And become familiar with any prefab objects (in a
    `Prefabs/` folder) that might be useful to you later in the book.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the MeMyselfEye player prefab
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most VR toolkits provide a preconfigured player camera rig as a prefab that
    you can insert into your scene. This rig replaces the default `Main Camera`. For
    this book, since we do not know which particular devices and platforms you are
    targeting, we will make our own camera rig. Let's called it `MeMyselfEye` (hey,
    this is VR!). This will be helpful later on, and it will simplify our conversations
    in this book, since different VR devices may use different camera assets. *Like
    an empty vessel for your VR soul...*
  prefs: []
  type: TYPE_NORMAL
- en: We will reuse this `MeMyselfEye` prefab in chapters throughout the book as a
    convenient generic VR camera asset in our projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'A **prefab** is a reusable (prefabricated) object retained in your project''s
    Assets folder that can be added one or more times into project scenes. Let''s
    create the object using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Unity and the project from the last chapter. Then, open the diorama scene
    by navigating to File | Open Scene (or double-click on the scene object in the Project
    panel, under Assets).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the main menu bar, navigate to GameObject | Create Empty.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the object `MeMyselfEye`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure it has a reset transform (in its Inspector window's Transform pane, choose
    the gear icon in upper-right and select Reset).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Hierarchy panel, drag the `Main Camera` object into `MeMyselfEye` so
    that it's a child object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the `Main Camera` object selected, reset its transform values (in the Transform
    panel, in the upper-right section, click on the *gear icon* and select Reset).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then position yourself near the middle of the scene. Select `MeMyselfEye` again
    and set its Position (`0`, `0`, `-1.5`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On some VR devices, the player height is determined by the device calibration
    and sensors, that is, your height in real life, so leave the `Main Camera`'s Y-Position
    at `0`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On other VR devices, especially ones with no positional tracking, you need to
    specify the camera height. Select the `Main Camera` (or more specifically, the
    game object that has the Camera component on it) and set its Position (`0`, `1.4`,
    `0`)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Game view should show that we're inside the scene. If you recall the Ethan
    experiment that we did earlier, I picked a Y-position of `1.4` so that we'll be
    at about the eye level with Ethan.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s save this as a reusable prefabricated object, or *prefab*, in the
    Project panel, under Assets so that we can use it again in the other scenes in
    the other chapters of this book:'
  prefs: []
  type: TYPE_NORMAL
- en: In Project panel, under Assets, select the top-level `Assets` folder, right-click
    and navigate to Create | Folder. Rename the folder `Prefabs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the `MeMyselfEye` prefab into the Project panel, under the `Assets/Prefabs`
    folder to create a prefab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your hierarchy with the prefab is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7cf68b49-49ad-4c21-9664-8d016486f8af.png)'
  prefs: []
  type: TYPE_IMG
- en: Now we will continue the discussion on how to build your project, on a per-platform
    basis. Please skip to the topic appropriate for your setup.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to try your projects on multiple platforms, say VIVE (Windows) and
    Daydream (Android), consider making separate prefabs for each target device, for
    example, `MeMyselfEye-SteamVR`, `MeMyselfEye-GVR`, and so on and then swap them
    in and out as needed.
  prefs: []
  type: TYPE_NORMAL
- en: Building for SteamVR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To target your app to use *HTC VIVE* you will use the *OpenVR SDK*. This SDK
    also supports Oculus Rift with Touch controllers, and **Windows Immersive Mixed
    Reality** (**IMR**) devices:'
  prefs: []
  type: TYPE_NORMAL
- en: Configure your Unity Build Settings to target the Standalone platform.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Player Settings, under XR Settings, set Virtual Reality to Enabled
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure OpenVR is at the top of the Virtual Reality SDKs list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download and Install the SteamVR Plugin from the Asset Store, as instructed
    previously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you install SteamVR you may be prompted to accept recommended changes to
    your project settings. Unless you know better, we recommend you accept them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now we will add the SteamVR camera rig to the `MeMyselfEye` object in our scene:'
  prefs: []
  type: TYPE_NORMAL
- en: Look in your Project window; under the `Assets` folder, you should have a folder
    named `SteamVR`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within that is a subfolder called `Prefabs`. Drag the prefab named `[CameraRig]`
    from the `Assets/SteamVR/Prefabs/` folder into your hierarchy. Place it as a child
    object of `MeMyselfEy*e*`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If necessary, reset its Transform to Position (`0`, `0`, `0`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Disable the `Main Camera` object, also under `MeMyselfEye`; you can disable
    objects by unchecking the enable checkbox in the top-left of its Inspector window.
    Alternatively, you can just delete the `Main Camera` object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the prefab by selecting `MeMyselfEye` in Hierarchy, then press its Apply
    button in the Inspector.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that the SteamVR camera rig Y position should be set to 0 as it will use
    the real-life height of the player to set the camera height in real time.
  prefs: []
  type: TYPE_NORMAL
- en: To test it out, make sure that the VR device is properly connected and turned
    on. You should have the SteamVR app opened on the Windows desktop. Click on the
    game Play button at the top-center of the Unity Editor. Put on the headset, and
    it should be awesome! Within VR, you can look all around—left, right, up, down,
    and behind you. You can lean over and lean in. Using the hand controller's thumb
    pad, you can make Ethan walk, run, and jump just like we did earlier.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you can build your game as a separate executable app using the following
    steps. Most likely, you''ve done this before, at least for non-VR apps. It''s
    pretty much the same:'
  prefs: []
  type: TYPE_NORMAL
- en: From the main menu bar, navigate to File | Build Settings...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the current scene is not already in the Scenes to Build list, press Add Open
    Scenes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Build and set its name to `Diorama`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I like to keep my builds in a subdirectory named `Build`; create one if you
    want to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Save.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'An executable will be created in your Build folder. Run `Diorama` as you would
    do for any executable application: double-click on it.'
  prefs: []
  type: TYPE_NORMAL
- en: For more information on Unity support for OpenVR, see [https://docs.unity3d.com/Manual/VRDevices-OpenVR.html](https://docs.unity3d.com/Manual/VRDevices-OpenVR.html).
  prefs: []
  type: TYPE_NORMAL
- en: Building for Oculus Rift
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To build for Oculus Rift you can use OpenVR. But if you plan to publish in
    the Oculus Store and/or use Oculus-specific SDK for other high-value features
    offered in the Oculus ecosystem, you will need to build to the Oculus SDK, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Configure your Unity Build Settings to target the Standalone platform
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Player Settings**, under XR Settings, set **Virtual Reality Enabled**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure **Oculus** is at the top of the **Virtual Reality SDKs** list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download and **Install** the Oculus Integration package from the Asset Store,
    as instructed previously
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now we will add the OVR camera rig to the `MeMyselfEye` object in our scene:'
  prefs: []
  type: TYPE_NORMAL
- en: Look in your Project window, under the *Assets* folder you should have a folder
    named *OVR*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within that is a subfolder called `Prefabs`. Drag the prefab named `OVRCameraRig`
    from the `Assets/OVR/Prefabs/` folder into your Hierarchy. Place it as a child
    object of `MeMyselfEye`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its Y position to 1.6 by setting its Transform to Position to (`0`, `1.6`,
    `0`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Disable the `Main Camera` object, also under `MeMyselfEye`. You can disable
    objects by unchecking the enable checkbox in the top-left of its Inspector window.
    Alternatively, you can just delete the `Main Camera` object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the prefab by selecting `MeMyselfEye` in Hierarchy, then press its **Apply**
    button in the Inspector.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that the OVR camera rig should be set to your desired height (1.6 in this
    case), which will be accommodated at runtime based on the height you configured
    in the Oculus runtime device configuration.
  prefs: []
  type: TYPE_NORMAL
- en: To test it out, make sure that the VR device is properly connected and turned
    on. You should have the Oculus runtime app opened on the Windows desktop. Click
    on the game Play button at the top-center of the Unity Editor. Put on the headset,
    and it should be awesome! Within VR, you can look all around—left, right, up,
    down, and behind you. You can lean over and lean in. Using the hand controller’s
    thumbstick, you can make Ethan walk, run, and jump just like we did earlier.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that the Oculus package installs helpful menu items on the Unity Editor
    menu bar. We won''t go into details here, and they are subject to change. We encourage
    you to explore the options and shortcuts they provide. See the screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/26814764-08c4-45c6-8f1b-faae20685751.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To include Oculus Dash support, you must use Oculus OVR version 1.19 or later
    (included with Unity 2017.3 or later). Then:'
  prefs: []
  type: TYPE_NORMAL
- en: In Player Settings, XR panel, unfold the Oculus SDK for additional settings
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Shared Depth Buffer** checkbox
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check the **Dash Support** checkbox:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1c4a3746-8d2f-4e7c-98f5-a0c584a306bf.png)'
  prefs: []
  type: TYPE_IMG
- en: For more information on Oculus Dash support in Unity, see [https://developer.oculus.com/documentation/unity/latest/concepts/unity-dash/](https://developer.oculus.com/documentation/unity/latest/concepts/unity-dash/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you can build your game as a separate executable app using the following
    steps. Most likely, you''ve done this before, at least for non-VR apps. It''s
    pretty much the same:'
  prefs: []
  type: TYPE_NORMAL
- en: From the main menu bar, navigate to File | Build Settings...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the current scene is not already in the **Scenes to Build** list, press **Add
    Open Scenes**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Build** and set its name to `Diorama`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I like to keep my builds in a subdirectory named `Build`; create one if you
    want to
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'An executable will be created in your `Build` folder. Run `Diorama` as you
    would do for any executable application: double-click on it.'
  prefs: []
  type: TYPE_NORMAL
- en: For more information on Unity support for Oculus, see [https://developer.oculus.com/documentation/unity/latest/concepts/book-unity-gsg/.](https://developer.oculus.com/documentation/unity/latest/concepts/book-unity-gsg/)
  prefs: []
  type: TYPE_NORMAL
- en: Building for Windows Immersive MR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Microsoft's 3D media **Mixed Reality** strategy is to support the spectrum of
    devices and applications from virtual reality to augmented reality. This book
    and our projects are about VR. At the other end is the Microsoft HoloLens wearable
    AR device. The MixedRealityToolkit-Unity package that we will use includes support
    for both immersive MR headsets and HoloLens.
  prefs: []
  type: TYPE_NORMAL
- en: 'To allow your app to use a **Windows immersive Mixed Reality** (**IMR**) headset,
    you will use the Window Mixed Reality SDK, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Configure your Unity **Build Settings** to target the **Universal Windows Platform** platform.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Player Settings, under XR Setting**s**, set **Virtual Reality Enabled**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure **Windows** Mixed **Reality** is at the top of the **Virtual Reality**
    **SDKs** list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download and install the Mixed Reality Toolkit Unity, as instructed previously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We also recommend you install its sister examples unity package from the same
    location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now we will add the `MixedRealityCamera` rig to the `MeMyselfEye` object in
    our scene:'
  prefs: []
  type: TYPE_NORMAL
- en: Look in your Project window; under the `Assets` folder, you should have a folder
    named `HoloToolkit` (or `MixedRealityToolkit`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within that is a subfolder called `Prefabs`. Drag the prefab named `MixedRealityCameraParent`
    from the `Assets/HoloToolkit/Prefabs/` folder into your Hierarchy. Place it as
    a child object of `MeMyselfEye`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If necessary, reset its Transform to **Position** (`0`, `0`, `0`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Disable the `Main Camera` object, also under `MeMyselfEye`. You can disable
    objects by unchecking the enable checkbox in the top-left of its Inspector window.
    Alternatively, you can just delete the `Main Camera` object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the prefab by selecting `MeMyselfEye` in Hierarchy, then press its Apply
    button in the Inspector.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that the `MixedRealityCameraParent` rig y position should be set to 0 as
    it will use the real-life height of the player to set the camera height in real
    time.
  prefs: []
  type: TYPE_NORMAL
- en: To test it out, make sure that the VR device is properly connected and turned
    on. You should have the MR Portal app opened in the Windows desktop. Click on
    the game Play button at the top-center of the Unity Editor. Put on the headset,
    and it should be awesome! Within VR, you can look all around—left, right, up,
    down, and behind you. You can lean over and lean in. Using the hand controller's
    thumb pad, you can make Ethan walk, run, and jump just like we did earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Windows 10 Developer mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For Windows MR, you must be developing on Windows 10, with Developer mode enabled.
    To set Developer mode:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Action Center** | **All Settings** | **Update & Security** | **For Developers**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select **Developer mode**, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/33ad8bb0-ecdc-4216-9269-6d7fcc2ba72b.png)'
  prefs: []
  type: TYPE_IMG
- en: Installing UWP support in Visual Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you install Unity, you have the option to install *Microsoft Visual Studio
    Tools for Unity* as the default script editor. It's a great editor and debugging
    environment. However, this edition installed with Unity is not a full version
    of Visual Studio. To target your build as a separate UWP app, you will need to
    use a full version of Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio is a powerful **integrated developer environment** (**IDE**) for
    all kinds of projects. When we build for UWP from Unity we will actually build
    a Visual Studio-ready project folder that you can then open in VS to complete
    the compile, build and deploy process, to run the app on your device.
  prefs: []
  type: TYPE_NORMAL
- en: 'Visual Studio comes in three editions, *Community*, *Professional*, and *Enterprise*;
    any of these are sufficient for us. The Community version is *free* and can be
    downloaded from here: [https://www.visualstudio.com/vs/.](https://www.visualstudio.com/vs/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the installer is downloaded, open it to choose which components to install.
    Under the Workloads tab we have selected:'
  prefs: []
  type: TYPE_NORMAL
- en: Universal Windows Platform development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Game development with Unity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/d74623b1-ef69-4eeb-8a4a-44edb6d98eee.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Also, select the Game development with Unity options, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3e9d595c-d7f1-4074-b331-c9148e9c0620.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can now go into Unity. First, we should make sure Unity knows we''re using
    Visual Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Edit** | **Preferences**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **External Tools** tab, make sure **Visual Studio** is selected as your
    **External Script Editor**, like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0bcff01c-9e91-412a-97e6-3f7ddcfa0c72.png)'
  prefs: []
  type: TYPE_IMG
- en: UWP build
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, you can build your game as a separate executable app using the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: From the main menu bar, navigate to **File** | **Build Settings...**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the current scene is not already in the **Scenes to Build** list, press **Add
    Open Scenes**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the right side of the dialog are options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Target Device: PC'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Build Type: D3D'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SDK: Latest Installed (for example, 10.0.16299.0)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on **Build** and set its name
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I like to keep my builds in a subdirectory named Build; create one if you want
    to
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Note that the Mixed Reality ToolKit provides shortcuts to these and other settings
    and services, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1b4a8785-523f-4860-aa8d-592eac9e819d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now open the project in Visual Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: An easy way is to navigate to the Build folder in File Explorer and look for
    the `.sln` file for the project (SLN is the Microsoft VS *solution* file). Double-click
    it to open the project in Visual Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Choose the solution configuration: Debug, Master or Release.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the target to x64.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press Play Local Machine to build the solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For more information on Unity support for Windows Mixed Reality, see [https://github.com/Microsoft/MixedRealityToolkit-Unity](https://github.com/Microsoft/MixedRealityToolkit-Unity),
    including the link to the Getting Started page.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up for Android devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To develop VR apps that will run on Google Daydream, Cardboard, GearVR, Oculus
    GO, or other Android devices, we will need to set up a development machine for
    Android development.
  prefs: []
  type: TYPE_NORMAL
- en: This section will help you set up your Windows PC or Mac. The requirements are
    not specific to virtual reality; these are the same steps required by anyone building
    any Android app from Unity. The process is also well documented elsewhere, including
    the Unity documentation at [https://docs.unity3d.com/Manual/android-sdksetup.html](https://docs.unity3d.com/Manual/android-sdksetup.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps include:'
  prefs: []
  type: TYPE_NORMAL
- en: Install Java Development Kit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install Android SDK
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install USB device drivers and debugging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the Unity External Tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the Unity Player Settings for Android
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OK, let's get going.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Java Development Kit (JDK)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You may already have Java installed on your machine. You can check by opening
    a terminal window and running the command `java-version`. If you do not have Java
    or need to upgrade, follow the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse on over to the Java SE Downloads web page at [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html)
    and get it. Look for the **JDK** button icon, which takes you to the downloads
    page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the package for your system. For example, for Windows choose Windows
    x64\. After the file downloads, open it and follow the installation instructions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make a note of the installation directory for later reference.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once installed, open a fresh terminal window and run `java -version` once more
    to verify.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Whether you just installed the JDK or it was already there, please make a note
    of its location on your disk. You will need to tell Unity this information in
    a later step.
  prefs: []
  type: TYPE_NORMAL
- en: 'On Windows, the path is probably something like Windows: `C:\Program Files\Java\jdk1.8.0_111\bin`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you can''t find it, open Windows Explorer, navigate to the `\Program Files`
    folder, look for Java, and drill down until you see its bin directory, as the
    following screenshot shows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0aa5e5e4-16ac-472a-91a6-32338e407bb9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On OS X, the path is probably something like: `/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you can''t find it, from a terminal window, run the following command: `/usr/libexec/java_home`.'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Android SDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You also need to install the Android SDK. Specifically, you need the **Android
    SDK Manager**. This is available by itself as a command-line tool or part of the
    full Android Studio IDE. If you can afford the disk space I recommend just installing
    Android Studio, as it provides a nice graphical interface for SDK Manager.
  prefs: []
  type: TYPE_NORMAL
- en: To install Android Studio IDE, go to [https://developer.android.com/studio/install.html](https://developer.android.com/studio/index.html)
    and click Download Android Studio. When the download is done, open it and follow
    the installation instructions.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will be prompted for the locations of the Android Studio IDE and the SDK.
    You can accept the default locations or change them. Please make a note of the
    SDK path location; you will need to tell Unity this information in a later step:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9370026a-1810-45a6-acfb-1b8dea4c623c.png)'
  prefs: []
  type: TYPE_IMG
- en: Personally, I have more room on my `D:` drive so I installed the app into `D:\Programs\Android\Android
    Studio`. And I like to keep the SDK near the Android Studio program files, as
    it's easier to find again that way, so I change the Android SDK Installation Location
    to `D:\Programs\Android\sdk`.
  prefs: []
  type: TYPE_NORMAL
- en: Via Command Line Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Unity really only needs the command-line tools to build projects for Android.
    If you prefer, you can install just that package and save disk space. Scroll to
    the section named Get just the command line tools at the bottom of the downloads
    page. Select the package for your platform:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f4dc588f-941d-476a-a6d8-6d9bebc90b60.png)'
  prefs: []
  type: TYPE_IMG
- en: This is a ZIP file; uncompress it to a folder and please remember its location.
    As mentioned, on Windows I like to use `D:\Programs\Android\sdk`. This will contain
    a `tools` subfolder.
  prefs: []
  type: TYPE_NORMAL
- en: The ZIP is only the tools, not the actual SDK. Use the `sdkmanager` to download
    the packages you'll need. See [https://developer.android.com/studio/command-line/sdkmanager.html](https://developer.android.com/studio/command-line/sdkmanager.html)
    for details.
  prefs: []
  type: TYPE_NORMAL
- en: 'To list the installed and available packages, run `sdkmanager --list`. You
    can install multiple packages by listing them in quotes, delimited with a semicolon
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'As of writing, the minimum Android API levels are as follows (check the current
    documentation for changes):'
  prefs: []
  type: TYPE_NORMAL
- en: '**Cardboard**: API Level 19 (Android 4.4 *KitKat*)'
  prefs: []
  type: TYPE_NORMAL
- en: '**GearVR**: API Level 21 (Android 5.0 *Lollipop*)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Daydream**: API Level 24 (Android 7.0 *Nougat*)'
  prefs: []
  type: TYPE_NORMAL
- en: About your Android SDK root path location
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you already had Android installed, or if you forget where the SDK is installed,
    you can find the root path by opening the SDK Manager GUI. While Android Studio
    is open, navigate to the main menu and **Tools** | **Android** | **SDK Manag****er**.
    You can find the path near the top:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/805fd349-82c3-4910-bda9-3febea4e9e75.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On Windows, the path is probably something like:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Windows: `C:\Program Files\Android\sdk`, or `C:/Users/Yourname/AppData/Local/Android/Sdk`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On OS X, the path is probably something like:'
  prefs: []
  type: TYPE_NORMAL
- en: 'OS X: `/Users/Yourname/Library/Android/sdk `'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing USB device debugging and connection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next step is to enable USB debugging on your Android device. This is part
    of the Developer Options in your Android Settings. But Developer Options may not
    be visible and has to be enabled:'
  prefs: []
  type: TYPE_NORMAL
- en: Find the Build number property in **Settings** | **About** on the device. Depending
    on your device you may even need to drill down another level or two (such as **Settings**
    | **About** | **Software Information** | **More** | **Build number**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now for the magic incantation. Tap on the build number seven times. It'll count
    down until the **Developer Options** are enabled, and will now appear as another
    choice in the Settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to Settings | Developer options, find USB debugging, and enable it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now connect the device to your development machine via USB cable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Android device may automatically be recognized. If you are prompted to update
    the drivers, you can do this through the Windows Device Manager.
  prefs: []
  type: TYPE_NORMAL
- en: 'On Windows, if the device is not recognized, you may need to download the Google
    USB Driver. You can do this through the SDK Manager, under the SDK Tools tab.
    For more information see [https://developer.android.com/studio/run/win-usb.html](https://developer.android.com/studio/run/win-usb.html).
    The following screenshot, for example, shows the SDK Manager’s SDK Tools tab with
    the Google USB Driver selected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8290962e-04af-4279-af5a-505b23c6df1c.png)'
  prefs: []
  type: TYPE_IMG
- en: Great job so far!
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Unity External Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Armed with all the stuff we need and the paths to the tools we installed, we
    can now go back into Unity. We need to tell Unity where to find all the Java and
    Android stuff. Note that if you skip this step, then Unity will prompt you for
    the folders when building the app:'
  prefs: []
  type: TYPE_NORMAL
- en: On Windows, navigate to main menu and to Edit | Preferences, then select the
    External Toolstab on the left. On OS X it’s in Unity | Preferences.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Android SDK text slot, paste the path of your Android SDK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Java JDK text slot, paste the path of your Java JDK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The Unity Preferences with my SDK and JDK are shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f7812a57-fbf9-4e6a-8cb3-9e36d0ff4175.png)'
  prefs: []
  type: TYPE_IMG
- en: Configuring Unity Player Settings for Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We now will configure your Unity project to build for Android. First, ensure
    Android is your target platform in Build Settings. Unity provides a great deal
    of support for Android, including configuration and optimization for runtime features
    and the capabilities of mobile devices. These options can be found in Player Settings.
    We only need to set a couple of them now. The minimum required to build our demo
    project are Bundle Identifier and Minimum API Level:'
  prefs: []
  type: TYPE_NORMAL
- en: In Unity, navigate to File | Build Settings and examine the Platform pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If Android is not presently selected, select it now and press Switch Platform.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you have the Build Settings window open, press the Player Settings… button.
    Or, you can get there from the main menu and Edit | Project Settings | Player.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Look across at the Inspector panel, which now contains the Player Settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the Other Settings group of parameters, and click the header bar (if it’s
    not already opened) to find the Identification variables
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the Bundle Identifier to a unique name for your product that resembles a
    traditional Java package name. An ID is required for all Android apps. Typically
    it is in the format `com.CompanyName.ProductName`. It must be unique on the target
    device, and eventually, unique in the Google Play store. You can choose whatever
    name you want.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set a Minimum API Level for your target platform (as listed earlier).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Again, there are many other options in the Player Settings but we can use their
    defaults for now.
  prefs: []
  type: TYPE_NORMAL
- en: Building for GearVR and Oculus Go
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To build for Samsung GearVR and Oculus Go mobile devices, you will use the
    Oculus SDK. These are both Android-based devices so you must set up your development
    machine for Android development as described previously (Oculus Go is binary and
    compatible with GearVR). Then complete the following steps in Unity:'
  prefs: []
  type: TYPE_NORMAL
- en: Configure your Unity Build Settings to target the Android platform.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `Player Settings`, under XR Settings, set Virtual Reality Enabled
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure Oculus is at the top of the Virtual Reality SDKs list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download and Install the Oculus Integration package from the Asset Store, as
    instructed previously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we will add the OVR camera rig to the MeMyselfEye object in our scene. These
    steps are like the Standalone Oculus Rift setup described previously. In this
    case, you can use the same MeMyselfEye prefab for both Rift and GearVR.
  prefs: []
  type: TYPE_NORMAL
- en: Look in your Project window; under the *Assets* folder you should have a folder
    named OVR.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within that is a subfolder called `Prefabs`. Drag the prefab named `OVRCameraRig`
    from the `Assets/OVR/Prefabs/` folder into your Hierarchy. Place it as a child
    object of `MeMyselfEye`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its height to 1.6 by setting its **Transform** to **Position** to (`0`,
    `1.6`, `0`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Disable the `Main Camera` object also under `MeMyselfEye`. You can disable objects
    by unchecking the enable-checkbox in the top-left of its Inspector window. Alternatively,
    you can just delete the `Main Camera` object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the prefab by selecting `MeMyselfEye` in Hierarchy, then press its **Apply**
    button in the Inspector.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, you can build your game as a separate executable app using the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: From the main menu bar, navigate to File | Build Settings...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the current scene is not already in the **Scenes to Build** list, press **Add
    Open Scenes**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Build and Run **and set its name to `Diorama`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I like to keep my builds in a subdirectory named Build; create one if you want
    to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An Android APK file will be created in your Build folder and uploaded to your
    attached Android device.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on Unity support for Oculus SDK, see [https://docs.unity3d.com/Manual/VRDevices-Oculus.html.](https://docs.unity3d.com/Manual/VRDevices-Oculus.html)
  prefs: []
  type: TYPE_NORMAL
- en: Building for Google VR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Google VR SDK supports both Daydream and Cardboard. **Daydream** is the
    higher-end version limited to faster, more capable Daydream-ready Android phones.
    **Cardboard** is lower end and supported on many more mobile devices including
    Apple iOS iPhones. You can build projects in Unity that target both.
  prefs: []
  type: TYPE_NORMAL
- en: Google Daydream
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To build for *Google Daydream* on mobile Android devices, you will use the
    Daydream SDK. You must set up your development machine for Android development
    as described above. Then complete the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Configure your Unity **Build Settings** to target the **Android** platform
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Player Settings, under XR Settings, set Virtual Reality Enabled
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure Daydream is at the top of the Virtual Reality SDKs list
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download and Install the Google VR SDK package, as instructed previously
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will now build the `MeMyselfEye` camera rig for our scene. At the present
    time, the best example we have is the GVRDemo example scene provided with the
    Google VR SDK (can be found in the `Assets/GoogleVR/Demos/Scenes/` folder):'
  prefs: []
  type: TYPE_NORMAL
- en: In your scene Hierarchy, create an empty game object under the `MeMyselfEye`
    (select the `MeMyselfEye` object, right-click, select Create Empty). Name it `MyGvrRig`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its height to 1.6 by setting its **Transform** to **Position** to (`0`,
    `1.6`, `0`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the Project folders, locate the provided prefabs (`Assets/GoogleVR/Prefabs`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Drag a copy of each of the following prefabs from the Project folder to Hierarchy
    as a child of `MyGvrRig`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Headset/GvrHeadset
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Controllers/GvrControllerMain
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: EventSystem/GvrEventSystem
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: GvrEditorEmulator
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: GvrInstantPreviewMain
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Leave the `Main Camera` object under `MeMyselfEye` and enable it. The GoogleVR
    uses the existing `Main Camera` object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the prefab by selecting `MeMyselfEye` in Hierarchy, then press its Apply
    button in the Inspector.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `GvrHeadset` is a VR camera properties manager. The G`vrControllerMain`
    provides support for the Daydream 3DOF hand controller. We will use `GvrEventSystem`
    in later chapters; it provides a drop-in replacement for Unity's Event System
    object. The `GvrEditorEmulator` is not actually part of your app but enables previewing
    your scene in the Unity Editor when you press Play. Likewise, adding `GvrInstantPreviewMain`
    lets you preview your app on your phone when you press Play in the editor.
  prefs: []
  type: TYPE_NORMAL
- en: These are the prefabs that we know we’re going to want to use. Certainly, go
    ahead and explore the other prefabs provided in the SDK. See [https://developers.google.com/vr/unity/reference/](https://developers.google.com/vr/unity/reference/).
  prefs: []
  type: TYPE_NORMAL
- en: We also recommend you take a look at Google Daydream Elements which provides
    additional demos and scripts "for developing high-quality VR experiences." We
    introduce this in the next chapter. See [https://developers.google.com/vr/elements/overview.](https://developers.google.com/vr/elements/overview)
  prefs: []
  type: TYPE_NORMAL
- en: 'When you’re ready, you can build your game as a separate executable app using
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: From the main menu bar, navigate to File | Build Settings....
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the current scene is not already in the Scenes to Build list, press Add Open
    Scenes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Build and Run and set its name to `Diorama`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I like to keep my builds in a subdirectory named Build; create one if you want
    to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Save.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An Android APK file will be created in your Build folder and uploaded to your
    attached Android phone.
  prefs: []
  type: TYPE_NORMAL
- en: Google Cardboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Building for Google Cardboard is similar, but simpler, than Daydream. Also,
    Cardboard apps can run on iPhones. You must set up your development machine for
    Android development as described. Or if you’re developing for iOS, see the next
    section for details. Then set up your project as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Configure your Unity Build Settings to target **Android** or **iOS** platform.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Player Settings, under XR Settings, set Virtual Reality Enabled, and
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure Cardboard is in the Virtual Reality SDKs list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download and Install the Google VR SDK package, as instructed previously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will now build the `MeMyselfEye` camera rig for our scene.
  prefs: []
  type: TYPE_NORMAL
- en: In your scene Hierarchy, create an empty game object under the `MeMyselfEye`
    (select the `MeMyselfEye` object, right-click, select Create Empty). Name it `MyGvrRig`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its height to 1.6 by setting its **Transform** to **Position** to (`0`,
    `1.6`, `0`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the Project folders, locate the provided prefabs (`Assets/GoogleVR/Prefabs`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Drag a copy of each of the following prefabs from the Project folder to Hierarchy
    as a child of MyGvrRig:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Headset/GvrHeadset
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: GvrEditorEmulator
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Leave the `Main Camera` object under `MeMyselfEye` and enable it. The GoogleVR
    uses the existing `Main Camera` object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the prefab by selecting `MeMyselfEye` in Hierarchy, then press its Apply
    button in the Inspector
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you’re ready, you can build your game as a separate executable app using
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: From the main menu bar, navigate to File | Build Settings....
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the current scene is not already in the Scenes to Build list, press Add Open
    Scenes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Build and Run and set its name to `Diorama`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I like to keep my builds in a subdirectory named Build; create one if you want
    to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Save.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An Android APK file will be created in your Build folder and uploaded to your
    attached Android phone.
  prefs: []
  type: TYPE_NORMAL
- en: Google VR Play Mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When your project is configured for Google VR (Daydream or Cardboard), and
    you press Play in Unity can you preview the scene and use keyboard keys to emulate
    device motion:'
  prefs: []
  type: TYPE_NORMAL
- en: Use *Alt* + mouse-move to pan and tilt forward or backwards.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use *Ctrl* + mouse-move to tilt your head from side to side.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use *Shift* + mouse control the Daydream hand controller (Daydream only).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click the mouse to select.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more details, see [https://developers.google.com/vr/unity/get-started](https://developers.google.com/vr/unity/get-started).
  prefs: []
  type: TYPE_NORMAL
- en: With Daydream, you also have the option to use Instant Preview which allows
    you to test your VR app instantly on your device. Follow the instructions in the
    Google VR docs ([https://developers.google.com/vr/tools/instant-preview](https://developers.google.com/vr/tools/instant-preview))
    to set up your project and device to take advantage of this feature.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on Unity support for Google VR SDK for Daydream, see [https://docs.unity3d.com/Manual/VRDevices-GoogleVR.html](https://docs.unity3d.com/Manual/VRDevices-GoogleVR.html).
  prefs: []
  type: TYPE_NORMAL
- en: Setting up for iOS devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will help set up your Mac for iOS development from Unity for iPhones.
    The requirements are not specific to virtual reality; these are the same steps
    required by anyone building any iOS app from Unity. The process is also well documented
    elsewhere, including the Unity documentation at [https://docs.unity3d.com/Manual/iphone-GettingStarted.html](https://docs.unity3d.com/Manual/iphone-GettingStarted.html).
  prefs: []
  type: TYPE_NORMAL
- en: A requirement of Apple's closed ecosystem is you must use a Mac as your development
    machine to develop for iOS. That’s just the way it is. The upside is the setup
    process is very straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, the only VR apps that will run on iOS are Google Cardboard.
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps include:'
  prefs: []
  type: TYPE_NORMAL
- en: Have an Apple ID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install Xcode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure the Unity Player Settings for iOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build And Run
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OK, let's take a bite of this apple.
  prefs: []
  type: TYPE_NORMAL
- en: Have an Apple ID
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To develop for iOS you need a Mac computer to develop on, and an Apple ID to
    log into the App Store. This will permit you to build iOS apps that run on your
    personal device.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also recommended that you have an Apple Developer account. It costs $99
    USD per year but is your admission ticket to the tools and services including
    setup provisioning profiles needed to share and test your app on other devices.
    You can find out more about the Apple Developer Program here: [https://developer.apple.com/programs/](https://developer.apple.com/programs/).'
  prefs: []
  type: TYPE_NORMAL
- en: Install Xcode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Xcode is the all-in-one toolkit for developing for any Apple devices. It is
    free to download from the Mac App Store here: [https://itunes.apple.com/gb/app/xcode/id497799835?mt=12](https://itunes.apple.com/gb/app/xcode/id497799835?mt=12).
    Beware: it is quite big (over 4.5 GB as of writing). Download it, open the downloaded
    `dmg` file, and follow the installation instructions.'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Unity Player Settings for iOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We now will configure your Unity project to build for iOS. First, ensure *iOS* is
    your target platform in Build Settings. Unity provides a great deal of support
    for iOS, including configuration and optimization for runtime features and the
    capabilities of mobile devices. These options can be found in Player Settings.
    We only need to set a couple of them now (the minimum required to build our projects):'
  prefs: []
  type: TYPE_NORMAL
- en: In Unity, navigate to **F****ile** | **Build Settings** and examine the Platform
    pane. If iOS is not presently selected, select it now and press Switch Platform.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you have the Build Settings window open, press the Player Settings… button.
    Or, you can get there from the main menu: Edit | Project Settings | Player. Look
    across at the Inspector panel, which now contains the Player Settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the Other Settings group of parameters, and click the header bar (if it's
    not already opened) to find the Identification variables.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the Bundle Identifier to a unique name for your product that resembles a
    traditional Java package name. An ID is required for all iOS apps. Typically,
    it is in the format `com.CompanyName.ProductName`. It must be unique on the target
    device, and eventually, unique in the App Store. You can choose whatever name
    you want.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the Automatic Signing Team ID to your Signing Team setup in Xcode, and check
    the Automatically Sign checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To configure your Apple ID with Xcode, in Xcode go to Preferences | Accounts
    and add an Apple ID by tapping +.
  prefs: []
  type: TYPE_NORMAL
- en: Build And Run
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Xcode consists of an **integrated development environment** (**IDE**) that hosts
    your Xcode projects. When you build for iOS from Unity, it doesn't actually build
    an iOS executable. Rather, Unity builds an Xcode-ready project folder that you
    then open in Xcode to complete the compile, build, and deploy process, and to
    run the app on your device. Let's go!
  prefs: []
  type: TYPE_NORMAL
- en: Be sure your device is turned on, connected, and you grant permission for the
    Mac to access.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Build Settings, press the Build And Run button to begin building.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be prompted for a name and location of the build files. We recommend
    you create a new folder in your project root named `Build` and specify the file
    or subfolder name under that, as needed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If all goes well, Unity will create an Xcode project and open it in Xcode. It
    will attempt to build the app, and if successful, upload it to your device. You
    now have a running VR app on your device you can show off to your friends and
    family!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we helped you set up your system for VR development and built
    your project for your target platform and devices. We discussed the different
    levels of device integration software and then installed software that was appropriate
    for your target VR device onto your development machine and asset packages into
    your Unity project. While we have summarized the steps, all of these steps are
    well documented on the device manufacturers sites and in the Unity manual and
    we encourage you to look at all the relevant documentation.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you should be able to preview your VR scene in Unity Editor's
    Play mode. And you should be able to build and run your project and install and
    run it as a binary directly on your device.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll work more on the diorama scene and explore techniques
    to control objects in virtual reality. From a third-person perspective, we'll
    interact with objects in the scene (Ethan, the zombie) and implement look-based
    control.
  prefs: []
  type: TYPE_NORMAL
