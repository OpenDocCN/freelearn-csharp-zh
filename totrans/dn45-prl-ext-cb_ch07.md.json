["```cs\n    using System;\n    using System.Diagnostics;\n    using System.Threading;\n    using System.Threading.Tasks;\n    ```", "```cs\n    static void Method1()\n    {\n      Console.WriteLine(\"In Method1.\");\n      for (int i = 0; i < 3; i++)\n      {\n        Task.Factory.StartNew(index => Method2((int)index), i);               \n      }\n    }\n    ```", "```cs\n    static void Method2(int number)\n    {\n      Random rnd = new Random();\n      var sum = number + rnd.Next(1,10);\n      Console.WriteLine(\"In Method2\\. Value:{0}\", sum);\n      Method4(sum);            \n    }\n    ```", "```cs\n    static void Method3()\n    {\n      Console.WriteLine(\"In Method3.\");\n      for (int i = 0; i < 3; i++)\n      {\n        Task.Factory.StartNew(() =>\n        {\n          Task.Factory.StartNew(index => Method2((int)index), i);\n        });\n        Thread.Sleep(10);\n      }\n\n    }\n    ```", "```cs\n    static void Method4(int number)\n    {\n      Console.WriteLine(\"In Method4.\", number);\n      Debugger.Break();\n    }\n    ```", "```cs\n    static void Main()\n    {\n      var task1 = Task.Factory.StartNew(() => Method1());\n      var task2 = Task.Factory.StartNew(() => Method3());\n      Console.ReadLine();\n    }\n    ```", "```cs\n    using System.Collections.Generic;\n    using System.Diagnostics;\n    using System.Threading;\n    using System.Threading.Tasks;\n    ```", "```cs\n    static void Main()\n    {\n      int taskCount = 5;\n      var countdownEvent = new CountdownEvent(taskCount);\n      var tasks = new Task[taskCount];\n    }\n    ```", "```cs\n    for(int i = 0; i < taskCount; i++)\n    {\n       tasks[i] = Task.Factory.StartNew((state) =>\n         {\n           countdownEvent.Signal();\n           tasks[(((int)state)+1)taskCount].Wait();\n         },i);\n    }\n    ```", "```cs\n    var task1 = new Task(() =>\n    {\n      Thread.Sleep(500);                \n    });\n\n    var task2 = new Task(() =>\n    {\n      Thread.Sleep(500);\n    });\n\n    task1.Start();\n    task2.Start();\n    ```", "```cs\n    countdownEvent.Wait();\n    Debugger.Break();\n    ```", "```cs\n    using System;\n    using System.Collections.Concurrent;\n    using System.Collections.Generic;\n    using System.Threading.Tasks;\n    ```", "```cs\n    private static double CalcSumRoot(int root)\n    {\n      double result = 0;\n      for (int i = 1; i < 10000000; i++)\n      {\n        result += Math.Exp(Math.Log(i) / root);\n      }\n      return result;\n    }\n    ```", "```cs\n    private static void DisplayResults(BlockingCollection<double> results)\n    {\n      foreach (var item in results.GetConsumingEnumerable())\n      {\n        Console.Write(\"\\nConsuming item: {0}\", item);\n      }\n    }\n    ```", "```cs\n    var results = new BlockingCollection<double>();\n    var tasks = new List<Task>();\n    var consume1 = Task.Factory.StartNew(() => DisplayResults(results));\n    var consume2 = Task.Factory.StartNew(() => DisplayResults(results));\n    var consume3 = Task.Factory.StartNew(() => DisplayResults(results));\n    var consume4 = Task.Factory.StartNew(() => DisplayResults(results));\n    ```", "```cs\n    for (int item = 1; item < 100; item++)\n    {\n      var value = item;\n      var compute = Task.Factory.StartNew(() =>\n      {\n        var calcResult = CalcSumRoot(value);\n        Console.Write(\"\\nProducing item: {0}\", calcResult);\n        results.TryAdd(calcResult);\n      });\n      tasks.Add(compute);\n    }\n    ```", "```cs\n    Task.Factory.ContinueWhenAll(tasks.ToArray(), result =>\n    {\n     results.CompleteAdding();\n     Console.Write(\"\\nCompleted adding.\");\n    });\n\n    Console.ReadLine();\n    ```"]