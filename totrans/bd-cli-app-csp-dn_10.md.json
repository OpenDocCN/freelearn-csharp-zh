["```cs\ndotnet new mstest -n bookmarkr.UnitTests\n```", "```cs\ndotnet sln add bookmarkr.UnitTests/bookmarkr.UnitTests.csproj\n```", "```cs\ndotnet add reference ../bookmarkr/bookmarkr.csproj\n```", "```cs\nusing System.Diagnostics.CodeAnalysis;\n//…\n[ExcludeFromCodeCoverage(Justification=\"CLI application configuration. No processing is performed in this class.\")]\nclass Program\n{\n    // …\n}\n```", "```cs\n[TestMethod]\npublic void LinkCommand_CallingClassConstuctor_EnsuresThatLinkAddCommandIsTheOnlySubCommandOfLinkCommand()\n{\n    // Arrange\n   IBookmarkService service = null;\n   var expectedSubCommand = new LinkAddCommand(service, \"add\", \"Add a \n   new bookmark link\");\n    // Act\n    var actualCommand = new LinkCommand(service, \"link\", \"Manage \n    bookmarks links\");\n    var actualSubCommand = actualCommand.Subcommands[0];\n    // Assert\n   Assert.AreEqual(1, actualCommand.Subcommands.Count);\n   CollectionAssert.AreEqual(actualSubCommand.Aliases.ToList(), \n   expectedSubCommand.Aliases.ToList());\n   Assert.AreEqual(actualSubCommand.Description, expectedSubCommand.\n   Description);\n}\n```", "```cs\ndotnet test\n```", "```cs\ndotnet add package NSubstitute\n```", "```cs\nusing NSubstitute;\n…\nnamespace bookmarkr.Tests;\n[TestClass]\npublic class LinkCommandTests\n{\n    [TestMethod]\n    public void LinkCommand_CallingClassConstuctor_\n    EnsuresThatLinkAddCommandIsTheOnlySubCommandOfLinkCommand()\n    {\n        // Arrange\n        IBookmarkService service = Substitute.For<IBookmarkService>();\n        …\n    }\n}\n```", "```cs\nusing bookmarkr.Commands;\nusing bookmarkr.Services;\nusing NSubstitute;\nnamespace bookmarkr.Tests;\n[TestClass]\npublic class ImportCommandTests\n{\n}\n```", "```cs\ndotnet add package System.IO.Abstractions\n```", "```cs\ndotnet add package System.IO.Abstractions.TestingHelpers\n```", "```cs\n[TestMethod]\npublic void OnImportCommand_PassingAValidAndExistingFile_CallsImportMethodOnBookmarkService()\n{\n    // Arrange\n    var mockBookmarkService = Substitute.For<IBookmarkService>();\n    string bookmarksAsJson = @\"[\n        {\n            \"\"Name\"\": \"\"Packt Publishing\"\",\n            \"\"Url\"\": \"\"https://packtpub.com/\"\",\n            \"\"Category\"\": \"\"Tech Books\"\"\n        },\n        {\n            \"\"Name\"\": \"\"Audi cars\"\",\n            \"\"Url\"\": \"\"https://audi.ca\"\",\n            \"\"Category\"\": \"\"See later\"\"\n        },\n        {\n            \"\"Name\"\": \"\"LinkedIn\"\",\n            \"\"Url\"\": \"\"https://www.linkedin.com/\"\",\n            \"\"Category\"\": \"\"Social Media\"\"\n        }\n    ]\";\n    var mockFileSystem = new MockFileSystem(new Dictionary<string, \n    MockFileData>\n    {\n        {@\"bookmarks.json\", new MockFileData(bookmarksAsJson)}\n        });\n    var command = new ImportCommand(mockBookmarkService, \n    mockFileSystem, \"import\", \"Imports all bookmarks from a file\");\n    // Act\n    command.OnImportCommand(mockFileSystem.FileInfo.New(\"bookmarks.\n    json\"));\n    // Assert\n    mockBookmarkService.Received(3).Import(Arg.Any<Bookmark>());\n    mockBookmarkService.Received(1).Import(Arg.Is<Bookmark>(b => \n    b.Name == \"Packt Publishing\" && b.Url == \"https://packtpub.com/\" \n    && b.Category == \"Tech Books\"));\n    mockBookmarkService.Received(1).Import(Arg.Is<Bookmark>(b => \n    b.Name \n    == \"Audi cars\" && b.Url == \"https://audi.ca\" && b.Category == \"See \n    later\"));\n    mockBookmarkService.Received(1).Import(Arg.Is<Bookmark>(b => \n    b.Name == \"LinkedIn\" && b.Url == \"https://www.linkedin.com/\" && \n    b.Category == \"Social Media\"));\n}\n```", "```cs\n[TestMethod]\npublic void ImportCommand_Conflict_TheNameOfTheConflictingBookmarkIsUpdated()\n{\n    // Arrange\n    var bookmarkService = new BookmarkService();\n    bookmarkService.ClearAll();\n    bookmarkService.AddLink(\"Audi Canada\", \"https://audi.ca\", \"See \n    later\");\n    string bookmarksAsJson = @\"[\n        {\n            \"\"Name\"\": \"\"Packt Publishing\"\",\n            \"\"Url\"\": \"\"https://packtpub.com/\"\",\n            \"\"Category\"\": \"\"Tech Books\"\"\n        },\n        {\n            \"\"Name\"\": \"\"Audi cars\"\",\n            \"\"Url\"\": \"\"https://audi.ca\"\",\n            \"\"Category\"\": \"\"See later\"\"\n        },\n        {\n            \"\"Name\"\": \"\"LinkedIn\"\",\n            \"\"Url\"\": \"\"https://www.linkedin.com/\"\",\n            \"\"Category\"\": \"\"Social Media\"\"\n        }\n    ]\";\n    var mockFileSystem = new MockFileSystem(new Dictionary<string,\n    MockFileData>\n    {\n        {@\"bookmarks.json\", new MockFileData(bookmarksAsJson)}\n    });\n    var command = new ImportCommand(bookmarkService, mockFileSystem, \n    \"import\", \"Imports all bookmarks from a file\");\n    // Act\n    command.OnImportCommand(mockFileSystem.FileInfo.New(\"bookmarks.\n    json\"));\n    var currentBookmarks = bookmarkService.GetAll();\n    // Assert\n    Assert.AreEqual(3, currentBookmarks.Count);\n    Assert.IsTrue(currentBookmarks.Exists(b => b.Name == \"Packt \n    Publishing\" && b.Url == \"https://packtpub.com/\" && b.Category == \n    \"Tech Books\"));\n    Assert.IsTrue(currentBookmarks.Exists(b => b.Name == \"Audi cars\" \n    && b.Url == \"https://audi.ca\" && b.Category == \"See later\"));\n    Assert.IsTrue(currentBookmarks.Exists(b => b.Name == \"LinkedIn\" \n    && b.Url == \"https://www.linkedin.com/\" && b.Category == \"Social \n    Media\"));\n    Assert.IsFalse(currentBookmarks.Exists(b => b.Name == \"Audi \n    Canada\" && b.Url == \"https://audi.ca\" && b.Category == \"See \n    later\"));\n}\n```", "```cs\n<ItemGroup>\n    <InternalsVisibleTo Include=\"bookmarkr.UnitTests\" />\n</ItemGroup>\n```", "```cs\npublic required IBookmarkService _bookmarkService;\npublic required MockFileSystem _mockFileSystem;\n[TestInitialize]\npublic void TestInitialize()\n{\n    string bookmarksAsJson = @\"[\n       {\n           \"\"Name\"\": \"\"Packt Publishing\"\",\n           \"\"Url\"\": \"\"https://packtpub.com/\"\",\n           \"\"Category\"\": \"\"Tech Books\"\"\n        },\n        {\n            \"\"Name\"\": \"\"Audi cars\"\",\n            \"\"Url\"\": \"\"https://audi.ca\"\",\n            \"\"Category\"\": \"\"See later\"\"\n        },\n        {\n            \"\"Name\"\": \"\"LinkedIn\"\",\n            \"\"Url\"\": \"\"https://www.linkedin.com/\"\",\n            \"\"Category\"\": \"\"Social Media\"\"\n        }\n    ]\";\n    _mockFileSystem = new MockFileSystem(new Dictionary<string, \n    MockFileData>\n    {\n        {@\"bookmarks.json\", new MockFileData(bookmarksAsJson)}\n    });\n}\n```"]