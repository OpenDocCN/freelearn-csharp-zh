- en: '*Chapter 10*: Pausing the Game, Altering Sound, and a Mock Test'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to add background music to our game. Then, we
    will make our music fade in when the level starts, fade out when the level is
    completed, and stop if the player dies. After that, we will be using all the UI
    skills we have learned so far to create a pause screen and add some slider components
    to it (which will be used in the next chapter for volume controls). With the pause
    screen built, we will make our game pause by freezing the player, the enemies
    on the screen, bullets, and the moving textures. Also within the pause screen,
    we will be giving the player the option to resume play or quit so that the game
    goes back to the title screen with the use of Event Listeners, which we learned
    about in [*Chapter 9*](B18381_09_Epub.xhtml#_idTextAnchor161), *Creating a 2D
    Shop Interface and In-Game HUD*. Finally, we will be providing a mini mock test
    with 20 questions to cover what we have learned from this chapter, as well as
    previous ones.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, we will be able to make changes to the `AudioSource`
    component directly within our script. We will know how to make every GameObject
    stop moving on the screen for our pause screen. Finally, we will know how to create
    a more fulfilling experience by adding toggle and slider components.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Applying and adjusting level music
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a pause screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a game pause button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mock test
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In terms of the Unity Programmer Exam, the next section will label the core
    objectives that will be covered in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Core exam skills covered in this chapter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the core exam skills that will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Programming core interaction:*'
  prefs: []
  type: TYPE_NORMAL
- en: Implement behaviors and interactions of game objects and environments.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identify methods to implement inputs and controls.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Developing application systems:*'
  prefs: []
  type: TYPE_NORMAL
- en: Application interface flow such as menu systems, UI navigation, and application
    settings.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Programming for scene and environment design:*'
  prefs: []
  type: TYPE_NORMAL
- en: Determine scripts for implementing audio assets.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The project content for this chapter can be found at [https://github.com/PacktPublishing/Unity-Certified-Programmer-Exam-Guide-Second-Edition/tree/main/Chapter_10](https://github.com/PacktPublishing/Unity-Certified-Programmer-Exam-Guide-Second-Edition/tree/main/Chapter_10).
  prefs: []
  type: TYPE_NORMAL
- en: You can download the entirety of each chapter's project files at [https://github.com/PacktPublishing/Unity-Certified-Programmer-Exam-Guide-Second-Edition](https://github.com/PacktPublishing/Unity-Certified-Programmer-Exam-Guide-Second-Edition).
  prefs: []
  type: TYPE_NORMAL
- en: All the content for this chapter is held in this chapter's `unitypackage` file,
    including a `Complete` folder that holds all of the work we'll carry out in this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the *Code in Action*: [https://bit.ly/3kjkSBW](https://bit.ly/3kjkSBW).'
  prefs: []
  type: TYPE_NORMAL
- en: Applying and adjusting level music
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to look at adding background music to our game
    levels. We will also be updating our scripts so that our music volume changes
    at different points of the game.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following sections, we are going to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Add music to each level.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the player completes the level, make the music fade out.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the player dies, make the music instantly stop.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure music does not play in other scenes, only level scenes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, let's make a start and add our game music to the `level1` scene.
  prefs: []
  type: TYPE_NORMAL
- en: Updating our GameManager prefab
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we are going to update the `GameManager` game object so that
    it holds a new game object (called `LevelMusic`) as a child in the `AudioSource`
    component and an MP3 fileto play. This kind of setup is ideal for a simple game;
    otherwise, we potentially run the risk of adding another manager, which is only
    suitable for a bigger and more complicated game.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a game object and add a music file to it, we need to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Unity Editor, open the `bootUp` scene from the `Assets /Scene`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right click **GameManager** in the **Hierarchy window** and select **Audio |
    Audio Source** from the drop-down.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Rename the new game object `LevelMusic`. The following screenshot shows the
    game object with its component being created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.1 – Creating an Audio Source Component'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.01_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.1 – Creating an Audio Source Component
  prefs: []
  type: TYPE_NORMAL
- en: 'With the `LevelMusic` game object still selected, we can now drag our `lvlMusic`
    MP3 file from `Assets/Resources/Sound` in the **Project** window into the **AudioClip**
    parameter, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.2 – Add the lvlMusic MP3 to the AudioClip field in the Audio Source
    Component'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.02_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.2 – Add the lvlMusic MP3 to the AudioClip field in the Audio Source
    Component
  prefs: []
  type: TYPE_NORMAL
- en: Now is a good time to save our `GameManager` prefab by selecting it in the **Hierarchy**
    window and clicking on **Overrides | Apply All** in the top-right corner of the
    **Inspector** window.
  prefs: []
  type: TYPE_NORMAL
- en: If we now click `level1` scene, the game will start to play music. This is because,
    by default, the **Audio Source** component is set to **Play On Awake**. This is
    good, but it won't stop playing until the scene changes, which is enough for most
    games. However, we want to add control to the music's volume via scripting.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we are going to update the `ScenesManager` script and control
    when and how our music will be played.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing states for our game music
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we are going to ensure that our game music is no longer set
    to its default `ScenesManager` script as it is relatively connected.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add our three music states (play, stop, and fade down), we need to do the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `ScenesManager` script (`Assets/Script`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the top of the `ScenesManager` script where we have entered our variables,
    just below the scope of our `public enum Scenes` property, enter the following
    `enum`, along with its three states:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We covered enums back in the *Setting up our scene's manager script* section
    in [*Chapter 3*](B18381_03_Epub.xhtml#_idTextAnchor073), *Managing Scripts and
    Taking aMock Test*; the principles are the same as labeling our states. For our
    `enum`, we have assigned it a data type name of `MusicMode`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have our three states labeled, we need to put these into action.
    We need to make our three states carry out their intended actions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`noSound`: No music is playing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fadeDown`: The music''s volume will fade to zero.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`musicOn`: The music will be playing and will be set to its maximum volume.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At various points of the game, we will want these states to be triggered, and
    the best way of accessing these short sets of states is to use a switch case to
    funnel out each outcome.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we need to add a `switch` statement for our three music states.
  prefs: []
  type: TYPE_NORMAL
- en: Still inside the `ScenesManager` script, we are going to add an `IEnumerator`
    that will act on either state. We covered `StartCoroutine`/`IEnumerator` in the
    *Setting up our EnemySpawner script* section in [*Chapter 2*](B18381_02_Epub.xhtml#_idTextAnchor048),
    *Adding and Manipulating Objects*.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, because we are adding an `IEnumerator`, we also need to add an extra library
    to support this functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `ScenesManager` script, at the very top, add the following library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Our script now supports coroutines and IEnumerators.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'I''m going to place my `IEnumerator` just outside of the scope of the `Update`
    function and name it `MusicVolume`, where it takes the `MusicMode` data type,
    and we will refer to it as `musicMode`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the scope of the `MusicVolume` `IEnumerator`, we will make a start with
    our `switch` statement and take in the reference of one of the three states that
    would have been sent through from the `musicMode` reference:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If `musicMode` contains the `noSound` state, then we use `GetComponentInChildren<AudioSource>()`
    to grab the only child game object that holds `AudioSource`, which is the newly
    created `LevelMusic` game object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We then use the `Stop` function to stop the music and then break out of the
    case:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The next case is if `musicMode` holds the `fadeDown` state. Here, we grab the
    reference of the `LevelMusic` game object and reduce its `volume` value over time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The third and final case is `musicOn`; inside the case, we first make a check
    to see whether an audio clip has already been loaded into the `AudioSource`. If
    there is no audio clip, we discard the rest of the case; otherwise, we `Play`
    the music loaded in and set it to full volume (with `1` being the highest):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To close the `switch` statement, we add our `yield return` with a fraction-of-a-second
    delay to give our game time to change the settings from the `switch` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have created our `enum` `musicMode` states and set up what each
    of them will do when triggered in the `IEnumerator`, we can move on to implementing
    the coroutines to make changes to the music.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing our game's music states
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we are going to continue making changes to our `ScenesManager`
    script and add `StartCoroutines` to specific parts of our code with the `musicMode`
    state, which is where our music's volume is going to change. So, for example,
    if the player dies in the game, we want the music to stop immediately by using
    the `noSound` state.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s make a start on this by loading our music into the game level, follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `ScenesManager` script, scroll down to the `GameTimer` method. For the
    first case, which checks whether the player is on level 1, 2, or 3, add the following
    `if` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Our `if` statement makes a check to see whether the audio clip of our LevelMusic''s
    `AudioSource` is empty (null). If it doesn''t have an audio clip, the `if` statement
    will carry out the following roles:'
  prefs: []
  type: TYPE_NORMAL
- en: Grab our audio file (`lvlMusic.mp3`) from its folder and store it as an `AudioClip`
    data type.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apply the audio clip to the `AudioSource` component.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run the `Play` function from `AudioSource`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that our music plays when we start a level, we need to make it such that
    when a level is completed, the music fades out. This part is fairly simple as
    we are in the correct method to fade the game music out when a level is completed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Scroll down to the `//if level is completed` comment and add the following
    line of code to fade the game music out when a level is completed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The last thing to do within the `switch` statement is to add a line of code
    that resets the audio clip to `null` as a failsafe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Now, if our `GamerTimer` method is called and none of the cases (our player
    isn't on level 1, 2, or 3) apply, our player is likely to be on the title, game
    over, or bootup scene, which means we will not play any level music.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will look at how to use `StartCoroutines`.
  prefs: []
  type: TYPE_NORMAL
- en: Using StartCoroutine with our music states
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, we need to learn how to stop and start the music, typically when the level
    is about to start or abruptly ends (typically when the player dies). Still inside
    `ScenesManager`, go back to the methods that will need updating so that they can
    support the music settings. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first method we will be updating is `ResetScene`. Within the scope of the
    method, enter the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This will make a call to the `MusicVolume` `IEnumrator` to turn off the music.
    The following code block shows how the `ResetScene` method looks after it''s been
    updated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The next method we are going to update is the `NextLevel` method. We can start
    the music at any time, irrespective of where the player is. We can play it whenever
    we want with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code block shows what the `NextLevel` method looks like when
    the code has been updated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Now, we'll move on to the `Start` function, which works as a failsafe for starting
    a scene and to see whether it should be playing music.
  prefs: []
  type: TYPE_NORMAL
- en: Whenever the `ScenesManager` script is active, it will automatically attempt
    to play music from our `LevelMusic` game object's `AudioSource` component.
  prefs: []
  type: TYPE_NORMAL
- en: If `AudioSource` doesn't contain a valid `AudioClip` (no MP3 found), then our
    code will presume the level the player is on doesn't require music.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code block shows the `Start` function in its entirety with the
    added `StartCoroutine`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The last method to update is `OnSceneLoaded`. When a level is loaded, we will
    attempt to turn the music on. The following code block shows the `OnSceneLoaded`
    method with the added `StartCoroutine` at the top:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Save the script and the `bootUp` scene.
  prefs: []
  type: TYPE_NORMAL
- en: Our code for manipulating music is complete for our level scenes.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we updated our `GameManager` so that it holds a second game
    object called `LevelMusic`. This `LevelMusic` game object will hold an `AudioSource`
    component that can be manipulated when the player starts a level, completes a
    level, or dies via the `ScenesManager` script.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will add a pause screen to our game and learn how to
    adjust the volume of our music and sound effects, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a pause screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Currently, we aren't able to pause the game, nor do we have an options screen
    that allows us to manipulate the settings of the game. In this section, we are
    going to combine these ideas so that our game is capable of pausing and we will
    also be able to change the volume of the music and sound effects.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we are going to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a pause button to the top corner of the screen.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a pause screen.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add the option to resume the game.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add the option to quit the game.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a slider for music and sound effects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create and hook up **Audio Mixer** to both sliders.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The end result of the pause screen can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.3 – Finalized view of the Pause Screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.03_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.3 – Finalized view of the Pause Screen
  prefs: []
  type: TYPE_NORMAL
- en: Let's make a start by focusing on the visuals of the pause screen. Then, we
    will hook up the sliders and buttons.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start with the pause UI visuals, we need to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Load up the `level1` scene from the `Assets/Scene`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the `level1` scene loaded, we can now focus on creating some game objects
    in the **Hierarchy** window for our pause screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the `Canvas` game object in the **Hierarchy** window and selec
    t **Create Empty** from the drop-down list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the newly created game object, right-click it, select `PauseContainer`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`PauseContainer` now needs to be scaled to the size of the game screen so that
    whatever is a child of this game object can be scaled to the correct scale and
    position.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To make `PauseContainer` fully scaled to the game screen''s proportions, ensure
    `PauseContainer` is still selected in the **Hierarchy** window and set its **Rect
    Transform** properties in the **Inspector** window to the properties shown in
    the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.4 – PauseContainer Rect Transform property values'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.04_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.4 – PauseContainer Rect Transform property values
  prefs: []
  type: TYPE_NORMAL
- en: That's our `PauseContainer` created and set to hold two main game objects. The
    first game object will house all of the pause screen's individual buttons and
    sliders. The second game object is for the pause button in the top-left corner
    of the screen and will make the game pause and bring the pause controls up.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows our game with the pause button in the top-left
    corner of the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.5 – Adding a Pause Button to our Game'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.05_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.5 – Adding a Pause Button to our Game
  prefs: []
  type: TYPE_NORMAL
- en: But let's stay focused on the pause screen and its content before we work on
    the in-game pause button. To create a `PauseScreen` game object that will house
    the game objects, we need to repeat a similar procedure for `PauseContainer` in
    terms of our **Rect Transform** properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create and house a `PauseScreen` game object in `PauseContainer`, follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `PauseContainer` game object in the **Hierarchy** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Create Empty** from the dropdown.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The new game object will be a child of the `PauseContainer` game object. Now,
    let's rename the newly created game object `PauseScreen`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click `PauseScreen`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With `PauseScreen` still selected in the `PauseContainer` has. Use the previous
    **Rect Transform** image as a reference.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can now make a start by filling our `PauseScreen` game object with its own
    game objects.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start dimming the screen so that the player isn't distracted when the
    game is paused.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a dim effect, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `PauseScreen` game object and select `blackOutScreen`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Apply the same **Rect Transform** properties that you applied to the last two
    game objects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we need to add the **Image** component so that we can cover the screen
    with a semi-transparent black.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With `blackOutScreen` still selected, click the `Image`. Once you see the `blackOutScreen`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The last thing to do for the `blackOutScreen` component''s image property is
    to set its **Color** settings to the ones shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.6 – Set the blackOutScreen Image Component Color values (RGBA)
    to the ones in this screenshot'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.06_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.6 – Set the blackOutScreen Image Component Color values (RGBA) to
    the ones in this screenshot
  prefs: []
  type: TYPE_NORMAL
- en: We will now have a sheet of semi-darkness across the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s add the **Pause** text. To do that, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `PauseScreen` game object and select `PauseText`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This time, give `PauseText`''s **Rect Transform** properties the following
    values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.7 – Set the PauseText Rect Transform property values to the ones
    shown in this screenshot'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.07_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.7 – Set the PauseText Rect Transform property values to the ones shown
    in this screenshot
  prefs: []
  type: TYPE_NORMAL
- en: Next, we need to add the `PauseText` game object.
  prefs: []
  type: TYPE_NORMAL
- en: With `PauseText` still selected, click the `Text` until you can see it in the
    drop-down list. Once you do, select it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the settings of **Text Component** to the ones shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.8 – Update all of the PauseText Text Component property values
    to the ones shown in this screenshot'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.08_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.8 – Update all of the PauseText Text Component property values to
    the ones shown in this screenshot
  prefs: []
  type: TYPE_NORMAL
- en: If you require more information on **Text Component**, check out the *Applying
    text and images to your scenes* section in [*Chapter 8*](B18381_08_Epub.xhtml#_idTextAnchor150),
    *Adding Custom Fonts and UI*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows what the **Hierarchy** and **Scene** views currently
    look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.9 – The Pause text should look like this'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.09_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.9 – The Pause text should look like this
  prefs: []
  type: TYPE_NORMAL
- en: We have our pause title customized and centered. Now, let's move on to some
    sliders for the **Music** and **Effects** volume settings. We'll make a start
    on the **Music** slider and then duplicate it to the other side of the screen
    for the **Effects** slider.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a volume UI slider to the Pause screen
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we are going to give the pause screen its title name and create
    and customize the pause screen volume sliders for our game's music and its sound
    effects.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create, customize, and position the **Music** slider, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click the `PauseScreen` game object in the **Hierarchy** window. Then,
    from the dropdown, select **UI**, followed by **Slider**, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.10 – Add a Slider from the UI dropdown'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.10_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.10 – Add a Slider from the UI dropdown
  prefs: []
  type: TYPE_NORMAL
- en: Select the newly created `Slider` game object, right-click it, and rename it
    `Music`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, position the `Music` slider by changing its **Rect Transform** properties
    to the ones shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.11 – Set the Music Rect Transform property values to the ones shown
    here'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.11_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.11 – Set the Music Rect Transform property values to the ones shown
    here
  prefs: []
  type: TYPE_NORMAL
- en: We will now change the color of the `Music` slider's bar to make it look more
    suited for the pause screen. We'll do this by changing it from light gray to red.
  prefs: []
  type: TYPE_NORMAL
- en: 'To change the color of the slider, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Click the arrow to the left of the `Music` game object in the `Fill Area` game
    object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the `Fill` game object from the dropdown of the `Music` game object,
    as shown in the following screenshot, just as it would look in the **Hierarchy**
    window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.12 – Select Fill from the Fill Area dropdown in the Hierarchy window'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.12_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.12 – Select Fill from the Fill Area dropdown in the Hierarchy window
  prefs: []
  type: TYPE_NORMAL
- en: 'With `Fill` still selected, in its **Inspector** window, change the **Image**
    component''s **Color** value to red, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.13 – Change Fill Image Component Color values to the ones shown
    in this screenshot'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.13_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.13 – Change Fill Image Component Color values to the ones shown in
    this screenshot
  prefs: []
  type: TYPE_NORMAL
- en: 'If you still have the `Fill` game object selected, you can view the slider''s
    red backgroundby adjusting the **Value** slider at the bottom of the **Slider**
    component in the **Inspector** window, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.14 – Update the Fill Slider Component values to the ones in this
    screenshot'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.14_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.14 – Update the Fill Slider Component values to the ones in this screenshot
  prefs: []
  type: TYPE_NORMAL
- en: Also, as shown in the previous screenshot, we need to set the slider's `-80`
    and its `0`. The reason for this is that in the next chapter, these will match
    the same values as the Audio Mixer.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Music` slider is set to the right size; we just need to tweak the handle
    so it isn''t so stretched and is easier to click or drag with our fingers. Follow
    these steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Handle` game object. Then, select it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `Image` component to stop the `Handle` game object from looking so stretched.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With `Handle` still selected, change its `3` on all axes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows what our handle looks like now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.15 – The handle of the slider has now been visually updated'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.15_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.15 – The handle of the slider has now been visually updated
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Music` slider is now set. This means we can move on to the text so that
    we can label the slider for the player. To give the slider its own UI text, we
    need to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `PauseScreen` game object and from the drop-down list, select **UI**,
    followed by **Text**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click our newly created `Text` game object and select `MusicText`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With the `MusicText` game object still selected, change its **Rect Transform**
    to the following values to position and scale the text in the correct location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.16 – Change the values of the MusicText Rect Transform'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.16_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.16 – Change the values of the MusicText Rect Transform
  prefs: []
  type: TYPE_NORMAL
- en: 'With the `MusicText` game object still selected in the **Inspector** window,
    update the **Text** component values to the following property values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.17 – Update the MusicText Text Component property values to the
    ones shown in this screenshot'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.17_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.17 – Update the MusicText Text Component property values to the ones
    shown in this screenshot
  prefs: []
  type: TYPE_NORMAL
- en: 'Our pause screen is starting to take shape. The following screenshot shows
    what we currently have:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.18 – We now have a Music Volume Slider'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.18_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.18 – We now have a Music Volume Slider
  prefs: []
  type: TYPE_NORMAL
- en: We can now copy and paste our music text and slider to the other side of the
    screen and tweak some of its property values so that it will be identified as
    the sound effects volume bar.
  prefs: []
  type: TYPE_NORMAL
- en: 'To duplicate and tweak the music text and slider, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Hold *Ctrl* (*Command* on Mac) and select `MusicText` and `Music` from the **Hierarchy**
    window so that they are highlighted. Then, press *D* on the keyboard to duplicate
    the two game objects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `Music (1)` game object, right-click it, select `Effects`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `MusicText (1)` game object, right-click it, select `EffectsText`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With `EffectsText` still selected, update its **Rect Transform** in the **Inspector**
    window with the following property values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.19 – Update the EffectsText Rect Transform property values to the
    ones shown in this screenshot'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.19_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.19 – Update the EffectsText Rect Transform property values to the
    ones shown in this screenshot
  prefs: []
  type: TYPE_NORMAL
- en: 'With `EffectsText` still selected, we can now pay attention to renaming the
    text. The rest of EffectsText''s `MUSIC` to `EFFECTS`, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.20 – Change the EffectsText Text Component text from MUSIC to EFFECTS'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.20_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.20 – Change the EffectsText Text Component text from MUSIC to EFFECTS
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we can move our **Effects** slider over so that it sits below the **EFFECTS**
    text in our scene view. To do this, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the `Effects` game object in the **Hierarchy** window. In the **Inspector**
    window, change its **Rect Transform** properties to the ones shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.21 – Update the Effects Rect Transform Component property values'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.21_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.21 – Update the Effects Rect Transform Component property values
  prefs: []
  type: TYPE_NORMAL
- en: We are nearly done with our pause screen in terms of its visual elements. The
    last two things we have to configure are the **Quit** and **Resume** buttons.
    As with the slider game objects, we can make one, copy and paste it to create
    a second, and then edit them.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create and customize a **Quit** button, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `PauseScreen` game object in the **Hierarchy** window and select
    **UI**, then **Button**, from the drop-down list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the newly created `Button` game object, we can rename it to `Quit`; right-click
    the `Button` game object in the `Button` to `Quit`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we can put the `Quit` game object into the correct location and resize
    it within our `PauseScreen` game object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With the `Quit` game object still selected, change its **Rect Transform** properties
    in the **Inspector** window to the ones shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.22 – Update the Quit Rect Transform property values'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.22_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.22 – Update the Quit Rect Transform property values
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Quit` game object will now be in the bottom right of the pause screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.23 – Our Quit button is added to the pause screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.23_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.23 – Our Quit button is added to the pause screen
  prefs: []
  type: TYPE_NORMAL
- en: Next, we can customize it by changing the button's sprite, color, and text.
    We'll start with the button's sprite by taking off the curved corners that we
    can see in the previous screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: 'With our `Quit` button still selected, we can remove the single sprite by doing
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: In the **Inspector** window, click the remote button in the **Image** component
    at the top right (denoted as **1** in the following screenshot).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A new window will appear. Select **None** at the top from the dropdown (denoted
    as **2** in the following screenshot):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.24 – Remove the Source Image sprite for the Quit button'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.24_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.24 – Remove the Source Image sprite for the Quit button
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we''ll change the color of the buttons, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: With the `Quit` game object still selected in the **Hierarchy** window, we can
    change the **Normal Color** property on **Button** **Component** in the **Inspector**
    window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the color field titled `255`, `0`, `0`, `150`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next thing we need to do to the button is to change its text.
  prefs: []
  type: TYPE_NORMAL
- en: With our `Quit` game object still selected in the **Hierarchy** window, select
    the drop-down arrow to the left of its name in the **Hierarchy** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the `Text` child game object from the `Quit` game object and give the
    **Text** component in the **Inspector** window the following property settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.25 – Update the Text game object''s Text Component to the values
    shown in this screenshot'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.25_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.25 – Update the Text game object's Text Component to the values shown
    in this screenshot
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be left with a button that looks more fitting for our game:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.26 – Our Quit button now looks more suitable for our game'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.26_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.26 – Our Quit button now looks more suitable for our game
  prefs: []
  type: TYPE_NORMAL
- en: The last thing to do in this section is to duplicate the `Quit` game object
    we have just created and rename the text `RESUME`. The **Resume** button will
    be used to cancel the pause screen and let the player continue playing the game.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the `Resume` game object, we will need to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the `Quit` game object in the **Hierarchy** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Ctrl* (*command* on Mac) and *D* on the keyboard to duplicate the game
    object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the duplicated game object from `Quit (1)` to `Resume`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With `Resume` still selected, change its **Rect Transform** property values
    in the **Inspector** window to the ones shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.27 – Give the Resume Rect Transform the same property values as
    shown in this screenshot'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.27_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.27 – Give the Resume Rect Transform the same property values as shown
    in this screenshot
  prefs: []
  type: TYPE_NORMAL
- en: 'All that''s left for the `Resume` game object is to rename its text from `QUIT`
    to `RESUME` by expanding the **Resume** selection by clicking on its arrow on
    the left in the **Hierarchy** window. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the `Text` game object in the **Hierarchy** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `QUIT` to `RESUME`, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.28 – The Resume button'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.28_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.28 – The Resume button
  prefs: []
  type: TYPE_NORMAL
- en: The pause screen is now visually complete and can support various screen ratios
    thanks to the use of our **Anchors** from our **Rect Transform** properties. Earlier,
    we mentioned that we will have a pause button in the top-left corner of the game
    screen so that we can pause our game and load up the pause screen that we've just
    made.
  prefs: []
  type: TYPE_NORMAL
- en: 'Everything we did in this section was achieved within the Unity Editor without
    the use of any code. In this section, we covered the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: How to access our pause screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How the pause screen would overlay the levels in our game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying a semi-transparent blackout to dim the game as the pause screen's background
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating sliders for our music and effects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying custom text to various points
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Unity's **Button** component to give the player the option to quit or
    resume the game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let's make the pause button. After that, we can start looking at hooking
    all these sliders and buttons up with our code.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a game pause button
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the beginning of the previous section, we briefly spoke about the **in-game
    pause button**. This button will appear at the start of a level and once pressed,
    the player, enemies, and bullets that have been fired will freeze in time. In
    this section, we will only be focusing on the visuals, just as we did with our
    pause screen in the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: 'The pause button will act slightly differently from the previous buttons we
    have made. This time, the button will be an `toggle` game object, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the `PauseContainer` game object in the **Hierarchy** window, right-click
    it, and select **UI** from the drop-down list, followed by **Toggle**, as shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.29 – Add a Toggle (on/off switch)'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.29_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.29 – Add a Toggle (on/off switch)
  prefs: []
  type: TYPE_NORMAL
- en: With the `Toggle` game object still selected in the `PauseButton`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Currently, our `PauseButton` looks nothing like how we want it to and resembles
    a tick box, as shown in the following screenshot. However, we can fix this and
    make it look like a normal-looking **pause** button but with the functionality
    of a toggle (on or off):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.30 – We are going to change the tick box to a pause button'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.30_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.30 – We are going to change the tick box to a pause button
  prefs: []
  type: TYPE_NORMAL
- en: 'To alter the current look of the `PauseButton` game object so that it looks
    like the prospective one in the preceding screenshot, we need to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `PauseButton` game object to expand its content, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.31 – Expand out all the PauseButton children in the Hierarchy window'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.31_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.31 – Expand out all the PauseButton children in the Hierarchy window
  prefs: []
  type: TYPE_NORMAL
- en: Select the `Label` game object in the **Hierarchy** window and press *Delete*
    on your keyboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Toggle** label will be removed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will set our game object to its correct position and scale. Select
    `PauseButton` in the **Hierarchy** window and give its **Rect Transform** the
    following properties in the **Inspector** window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.32 – Update the PauseButton Rect Transform property values'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.32_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.32 – Update the PauseButton Rect Transform property values
  prefs: []
  type: TYPE_NORMAL
- en: 'The toggle will now be placed and scaled to the top-left corner of the game
    canvas, as circled in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.33 – The pause button''s anchors are set in the top-left corner
    of the screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.33_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.33 – The pause button's anchors are set in the top-left corner of
    the screen
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice how our `PauseButton` game object that holds another game object titled
    `Background` doesn''t have its `Background` game object selected in the **Hierarchy**
    window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.34 – Select the Background game object from the Hierarchy window'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.34_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.34 – Select the Background game object from the Hierarchy window
  prefs: []
  type: TYPE_NORMAL
- en: 'To correct the `Background` game object''s `Background` game object and give
    it the following values in the **Inspector** window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.35 – Set the Background Rect Transform property values to the ones
    shown in this screenshot'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.35_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.35 – Set the Background Rect Transform property values to the ones
    shown in this screenshot
  prefs: []
  type: TYPE_NORMAL
- en: The `Background` game object is now the same size as the `PauseButton` game
    object with regard to the **Anchor** size.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now start tweaking the size and filling the **Background** with a suitable
    image. We''ll replace the white-square-with-a-tick icon with a dark circle. Follow
    these steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: With `PauseButton` still expanded in the `Background` game object if you haven't
    done so already.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the small remote button to the right of **Source Image** in the **Image**
    component in the **Inspector** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the dropdown that appears, replace its current selection with `UISprite`
    and change it to **Knob**. Its selection is shown in the following screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The square has now become a circle. Now, we can alter its color so that it matches
    the rest of our game's UI.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the `Background` game object still selected, select its `92`, `92`, `92`,
    and `123`, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.36 – Our Background Image Component should have the same values
    as the ones shown in this screenshot'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.36_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.36 – Our Background Image Component should have the same values as
    the ones shown in this screenshot
  prefs: []
  type: TYPE_NORMAL
- en: Next, we can make the gray oval shape into a circle.
  prefs: []
  type: TYPE_NORMAL
- en: Still in the **Image** component, set **Image Type** to **Simple** and tick
    the **Preserve Aspect** box, as shown in the previous screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '**Image Type** offers different behaviors to an image; for example, **Sliced**
    works well as a progress bar/timer to increment how much of the image can be seen
    over time.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Preserve Aspect** means that no matter which way the image is scaled, it
    will remain in its original form – there will be no squashed or stretched-looking
    images.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a close-up view of `PauseButton` in the **Scene** view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.37 – What our pause button currently looks like'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.37_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.37 – What our pause button currently looks like
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to replace the tick image with a large pause symbol. Follow these
    steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the `Checkmark` game object from the `Background` game object) and in
    the **Inspector** window, give its **Rect Transform** the following settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.38 – Set the Checkmark Rect Transform property values to the ones
    shown in this screenshot'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.38_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.38 – Set the Checkmark Rect Transform property values to the ones
    shown in this screenshot
  prefs: []
  type: TYPE_NORMAL
- en: With the `Checkmark` game object still selected in `Checkmark` to `pause` by
    clicking on the **remote** button and selecting the **pause** sprite from the
    drop-down list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `152`, `177`, `178`, `125`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change **Image Type** to **Simple** if it isn't already.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Tick the **Preserve Aspect** box, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.39 – Update the Checkmark Image Component property values to the
    ones shown in this screenshot'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.39_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.39 – Update the Checkmark Image Component property values to the ones
    shown in this screenshot
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Scene** window should look something like this, with our pause button
    in the top left:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.40 – Our pause button is now visually complete'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.40_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.40 – Our pause button is now visually complete
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, to make it so that the `toggle` button actually does something when
    we click on it, we need to make sure we have an **EventSystem** in our **Hierarchy**
    window. This is very simple to do; follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the **Hierarchy** window, right-click an open space.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If there isn't an **EventSystem** in **Hierarchy**, select **UI**, followed
    by **EventSystem**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this section, we mixed our UI images, buttons, text, and sliders on one screen
    that supports various landscape variations.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we are going to move on to the scripting side of what each
    of the UI components we made in the pause screen will do when the player presses
    the buttons or moves the slider.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our PauseComponent script
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `PauseComponent` script will have the responsibility of managing anything
    to do with accessing and altering the conditions the pause screen gives the player.
    Here, we will follow a series of subsections that will take us through setting
    up individual segments of the `PauseComponent` script. Before we do that, though,
    we need to create our script. If you don't know how to make a script, then revisit
    the *Setting up our camera* section in [*Chapter 2*](B18381_02_Epub.xhtml#_idTextAnchor048),
    *Adding and Manipulating Objects*. Once you've done that, rename the script `PauseComponent`.
    For maintenance purposes, store your script in the `Assets/Script` folder in the
    **Project** window.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's move on to the first subsection of the `PauseComponent` script by
    applying logic to the in-game pause button.
  prefs: []
  type: TYPE_NORMAL
- en: PauseScreen basic setup and PauseButton functionality
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we are going to make the pause button appear when the player
    has control of the game in the level. When the player presses the pause button,
    we need to make sure that all the moving components and scrolling textures freeze.
    Finally, we need to introduce the pause screen itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we start the level in its current state, we will see that the `PauseScreen`
    game object overlays the screen. This looks great, but we need to turn it off
    for the time being. To turn off the `PauseScreen` game object, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Unity Editor, open the newly created `PauseComponent` script by double-clicking
    the file held in `Assets/Script`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With the script open, add the `UnityEngine` UI library at the top to give us
    extra functionality for our code (manipulate text and image components), including
    the usual `UnityEngine` library and the name of the class, along with its inheritance
    of `MonoBehaviour`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following variable to the `PauseComponent` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`[SerializeField]` will keep the `pauseScreen` variable exposed in the `public`.
    The second line is a `GameObject` type that will store a reference to the entire
    `PauseScreen` game object.'
  prefs: []
  type: TYPE_NORMAL
- en: Save the script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Back in the Unity Editor, select the `PauseContainer` game object from the `PauseComponent`
    until you see it in the drop-down list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, drag and drop the `PauseScreen` game object from the `PauseScreen`, as
    shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.41 – Drag and drop the PauseScreen game object into the Pause Component
    | Pause Screen field'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.41_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.41 – Drag and drop the PauseScreen game object into the Pause Component
    | Pause Screen field
  prefs: []
  type: TYPE_NORMAL
- en: 'Back in the `PauseComponent` script, we can now turn off the `PauseScreen`
    game object at the beginning of the level and turn it back on when the player
    presses the pause button. To turn `PauseScreen` off, we can do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `PauseComponent` script, create an `Awake` function and inside it, turn
    the `pauseScreen` game object off, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can now test it in the Editor when we press the **Play** button at the top
    of the screen. The game will run without the pause screen being shown. Now, we
    can focus on introducing the pause button to the player within a few seconds as
    the level begins.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by creating a method that will turn off/on the visuals and the
    interactability of the pause button for the player:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go back into the `PauseComponent` script and create a method that takes one
    `bool` parameter, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With our `PauseComponent` script being attached to the `PauseContainer` game
    object, we can easily access any of the game objects and their components. The
    other two main game objects attached are `PauseScreen` and `PauseButton`. The
    next few pieces of code we will add to our `SetPauseButtonActive` will relate
    to the visuals and interactivity of the `PauseButton` game object.
  prefs: []
  type: TYPE_NORMAL
- en: 'To change the visibility of our `PauseButton`, we need to access its `Toggle`
    component''s `colors` value and store it in a temporary `ColorBlock` type. Enter
    this line of code inside the `SetPauseButtonActive` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, we need to check the condition of the value by looking at the `bool` parameter
    the method is receiving. If the `switchButton` `bool` is set to off, then we are
    going to set all colors related to the toggle to zero, which is black and zero
    alpha (completely transparent).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following code just after the line of code we entered previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code shows that we run a check to see whether the `bool` parameter
    is `false`.
  prefs: []
  type: TYPE_NORMAL
- en: If `switchButton` does contain a `false` value, then we step into the `if` statement
    and set the `col` (the color of the pause button) `normalColor` property to all
    zero. This means that it doesn't display this button at all. Then, we apply the
    same value to all of the other possible color states for the pause button. We
    also need to set the `Toggle` `interactable` value to `false` so that the player
    can't accidentally press the pause button either.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The screenshot on the left in the following figure shows the code we''ve just
    entered. The screenshot on the right is the `Toggle` component with the properties
    we have changed in our `if` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.42 – The code on the left will manipulate the Toggle property values
    on the right'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.42_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.42 – The code on the left will manipulate the Toggle property values
    on the right
  prefs: []
  type: TYPE_NORMAL
- en: If `switchButton` is set to `true`, we set the values from all zeros to their
    chosen color values and make the `PauseButton` `intractable`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the following code just after the preceding code that we just wrote:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The last two lines after this piece of code are applying the `col` value back
    to the `Toggle` component.
  prefs: []
  type: TYPE_NORMAL
- en: The second line of code turns the pause symbol on or off. If this wasn't set,
    then the pause button would appear/disappear without affecting the two white pause
    stripes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last two `GetComponentInChildren` lines are added after the preceding code,
    which reapplies the color back to the `Toggle` component and the pause symbol
    to on or off with the use of the `switchButton` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, all we need to do is make use of the method we''ve just written. Originally,
    we wanted the pause button to not be in view at the start of the level until the
    player has control of their ship. To turn off the pause button, we need to revisit
    the `Awake` function and do the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, I have added two extra lines of code in the `Awake` function. `SetPauseButtonActive(false)`
    turns the pause button off with the method we've just made, while the `Invoke`
    function will delay for 5 seconds until we run the `DelayPauseAppear` method.
    Inside `DelayPauseAppear` is `SetPauseButtonActive(true)`, which is the time when
    our player gains control of their ship.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the extra method that we mentioned in the `Invoke` function to turn the
    pause button on, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Back in the Unity Editor, press **Play**; our game will start normally and after
    5 seconds, the pause button will appear in the top-left corner. If we press the
    pause button, it will break and nothing extra will happen. This is because we
    haven't made the pause button do anything when it is pressed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s return to the `PauseComponent` script and add a small method that can
    run when the pause button is pressed. To add a pause method that freezes the game
    and brings up the pause screen we built earlier, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Reopen the `PauseComponent` script and enter the following method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within the `PauseGame` method, we set the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We set the pause screen game object's activity to `true`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Turn off the pause button (because we have the `QUIT` button to use instead).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Set the game''s `timeScale` to 0, which will stop all moving, animating objects
    in the scene. For more information about `timeScale`, check out the official Unity
    documentation here: [https://docs.unity3d.com/ScriptReference/Time-timeScale.html](https://docs.unity3d.com/ScriptReference/Time-timeScale.html).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**timeScale** can also be found in **Time Manager** in the Unity Editor. This
    is located at the top of the **Editor** window, under **Edit | Project Settings
    | Time**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You also have other useful properties such as **Fixed Timestep**, where you
    can change its value to make your physics simulation more precise. For more information
    about **Time Manager** and its properties, check out the following link: [https://docs.unity3d.com/Manual/class-TimeManager.html](https://docs.unity3d.com/Manual/class-TimeManager.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Save the script and return to the Editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we need to attach the new `PauseGame` method to the `PauseButton` event
    system, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the `PauseButton` game object from the **Hierarchy** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the bottom of the **Inspector** window, click the plus (**+**) sign to add
    an event:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.43 – Add an Event to the Toggle Component'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.43_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.43 – Add an Event to the Toggle Component
  prefs: []
  type: TYPE_NORMAL
- en: Next, drag `PauseContainer`, which contains our `PauseComponent` script, to
    the empty field (denoted as `PauseComponent` from the dropdown (denoted as **2**
    in the following screenshot).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Lastly, select the `PauseGame ()` public method (denoted as **3** in the following
    screenshot).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the marked-out steps we have gone through in
    selecting the `PauseGame ()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.44 – Drag PauseContainer from the Hierarchy window into the Event
    slot; finally set its function to PauseGame ()'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.44_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.44 – Drag PauseContainer from the Hierarchy window into the Event
    slot; finally set its function to PauseGame ()
  prefs: []
  type: TYPE_NORMAL
- en: Now would be a good time to try and see whether the pause screen appears when
    we press the pause button. Press **Play** in the Unity Editor and in the **Game**
    window, press the pause button in the top-left corner when it appears. The pause
    screen will appear; we won't be able to escape from this until we code in the
    logic for our **Resume** and **Quit** buttons.
  prefs: []
  type: TYPE_NORMAL
- en: So far in this section, we have given the player the ability to pause the game.
    In the next section, we will make it so that the player will be able to resume
    or quit the game from the pause screen.
  prefs: []
  type: TYPE_NORMAL
- en: Resuming or quitting the game from the pause screen
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this subsection, we will continue to extend the `PauseComponent` script
    by adding two methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Resume`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Quit`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s make a start by adding the logic for the **Resume** button; follow these
    instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: If the `PauseComponent` script isn't open already, go to the `Assets/Script`.
    Double-click the file to open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the `PauseComponent` script, scroll to a point where we can add a new
    method – it doesn't matter where, as long as it's inside the `PauseComponent`
    class and not interfering with other methods.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we are going to add a `Resume` method where if the player wishes to close
    the pause screen, the game animation continues, and the pause button in the top-left
    corner reappears. To make all of this happen, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This code is similar to the code shown in the previous section; it's just in
    the opposite order (instead of the value being set to true, it's now false and
    vice versa to bring back the original settings).
  prefs: []
  type: TYPE_NORMAL
- en: Save the script and return to the Unity Editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Unity Editor, select the `PauseScreen` game object. Make sure the **Hierarchy**
    window also shows that **Resume** is selected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the bottom of the `PauseContainer` game object from the **Hierarchy** window
    into the **None (Object)** **On Click ()** event system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the `PauseComponent`, followed by `On Click ()` event system set up
    correctly for the `Resume` game object button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.45 – The Resume button''s On Click () event hooked up to the Resume
    function'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.45_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.45 – The Resume button's On Click () event hooked up to the Resume
    function
  prefs: []
  type: TYPE_NORMAL
- en: Let's test the **Resume** button before moving on to the **Quit** button. Press
    **Play** in the Editor. Once the pause button appears in the top left of the **Game**
    window, click it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, click the big **Resume** button. We will be brought back to the game
    playing out.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The last button to hook up in our pause screen is the `PauseComponent` script
    and add the following method to the script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The code we've just entered resets the game; the `timescale` value goes back
    to `1`. We reset the player's score from `ScoreManager` directly and also directly
    told `ScenesManager` to take us back to scene zero, which is our `bootUp` scene.
  prefs: []
  type: TYPE_NORMAL
- en: Save the script before ending this section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is similar to the **Resume** button in regard to setting up an event to
    our script.
  prefs: []
  type: TYPE_NORMAL
- en: Select the **QUIT** button from the pause screen and make sure that, at the
    bottom of the **Inspector** window, you follow the same steps that you followed
    for the **Resume** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When we get to applying the `Quit` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the `Quit` game object''s button setup:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.46 – When the Quit button is pressed, it will run the Quit function'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.46_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.46 – When the Quit button is pressed, it will run the Quit function
  prefs: []
  type: TYPE_NORMAL
- en: Before we wrap up this chapter, we need to ensure that the player and enemies
    behave how we expect them to when the game is paused.
  prefs: []
  type: TYPE_NORMAL
- en: Pausing the player and enemies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So, we have reached the point where we can press our in-game pause button and
    watch our game freeze in time. To make sure the scene is saved, including new
    and edited scripts, let''s test the pause screen:'
  prefs: []
  type: TYPE_NORMAL
- en: Press **Play** in the Unity Editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the pause button appears, press it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The game pauses, but our enemies appear to float off. Also, when we press the
    fire button for the player, its player bullet light glows on the ship.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's fix the enemy floating first.
  prefs: []
  type: TYPE_NORMAL
- en: This is an easy fix – we need to change the update time for our `EnemyWave`
    script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Stop playing. Then, in the `Assets/Script` and double-click the `EnemyWave`
    script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Find the line that states the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change this to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Save the `EnemyWave` script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further Information
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'More information about **FixedUpdate** can be found here: [https://docs.unity3d.com/ScriptReference/MonoBehaviour.FixedUpdate.html](https://docs.unity3d.com/ScriptReference/MonoBehaviour.FixedUpdate.html).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, let''s reinforce the player''s behavior so that all of its functionality
    is frozen when the game pauses. To freeze our player, we need to reopen its script:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Assets/Script` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click the `Player` script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Scroll down to the `Update` function and wrap the player''s `Movement` and
    `Attack` methods with the following `if` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code runs a check to see whether the game's `timeScale` is running
    at full speed (`1`) and then carries on with the `Movement` and `Attack` methods.
  prefs: []
  type: TYPE_NORMAL
- en: Save the `Player` script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Great! We now have the ability to pause our game, continue our game, or quit
    it. Don't worry about adding this pause screen to the rest of the levels as we
    will do this in the next chapter. Speaking of the next chapter, there, we will
    look at how we can change the **Music** and **Effects** sliders. For now, let's
    reflect on what we have covered in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By completing this chapter, our game has improved even more and now has a pause
    screen, just as you would expect from any game. We also learned how to freeze
    time in our game with the **timeScale** value. We did revisit some things we covered
    in previous chapters such as Event Listeners and UI positioning and scaling, but
    we also used other UI components such as toggles and sliders and modified them
    to suit our pause screen. Other things we covered included bringing in some MP3
    music and making it so that the script knew when to fade in and out and stop the
    soound.
  prefs: []
  type: TYPE_NORMAL
- en: In the next game you create outside of this book, you will know not only how
    and when to add background music to play when it's playing but also how to attach
    your audio to a state machine. With state machines, you can make it possible for
    your music to be played, stopped, and faded out when particular moments occur,
    such as the game's screen being paused. Now, you will be able to take the UI components
    you've learned about in this chapter and create your own menu/pause screen. By
    doing this, you can run events to close or resume your game. You also know how
    to pause your game completely and/or slow time down with the **timeScale** function.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be looking at Unity's Audio Mixer to control the
    volume of our player's bullets and music and hook it up to our pause screen volume
    sliders. We will also look into different types of data that need to be stored,
    such as our game remembering the volume settings so that we don't have to adjust
    the sliders every time we start our game.
  prefs: []
  type: TYPE_NORMAL
- en: For now, I wish you the best of luck with your mini mock test!
  prefs: []
  type: TYPE_NORMAL
- en: Mock test
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you want to keep a private variable visible in the `[Header]`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`[SerializeField]`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`[AddComponentMenu]`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`[Tooltip]`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have created a pinball game for a mobile device; the game mechanics all
    work well but you also need to apply a pause screen. Obviously, when the player
    presses pause, the entire game should freeze. The way you are going to achieve
    this is by setting Unity's `timeScale` to zero.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which time property isn't affected when we set `Time.timeScale` to `0`?
  prefs: []
  type: TYPE_NORMAL
- en: '`captureFramerate`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`frameCount`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`realtimeSinceStartup`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`timeSinceLevelLoad`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There is a list of scenes in your `BuildSettings` window. You know that the
    first scene is your title scene and that the rest that follow are your game's
    level scenes. Your game designer hasn't settled on the names of the scenes and
    keeps changing them. As a programmer, you can select the scenes to load by using
    what `SceneManager` method?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`GetSceneByBuildIndex()`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`GetActiveScene()`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`SceneManager.GetSceneByName()`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`SceneManager.GetSceneByPath()`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: If you have a pause screen that can be enabled or disabled, which is the best
    UI component to switch between the two?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Toggle`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Button`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Slider`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Scroll Rect`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: A new prototype of Killer Wave is handed to you on a mobile device for testing.
    You notice you can move the ship or shoot when you enter a level with UI text
    in the middle of the screen. What would be causing the restriction in movement?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The ratio of the screen's proportion is out of calibration.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The UI text has Raycast Target ticked.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The mobile device needs charging.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Too many fingers on the screen at once has confused the Input system.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You have created a UI button that displays an image of coins on it when you
    have money in your account and an image of an empty brown bag when your account
    is empty.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What should the Transition field of the button be set to in the Unity Inspector
    to support these image changes?
  prefs: []
  type: TYPE_NORMAL
- en: Color Tint
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: None
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Animation
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sprite Swap
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: While entering some UI details at the bottom of the screen to show your player's
    lives and what level they are on, you notice you need the text to be a specific
    size. You can change the text to any size you want, but you also need to accommodate
    the ratio of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What's the best way of amending the font to make sure it doesn't appear squashed?
  prefs: []
  type: TYPE_NORMAL
- en: Decrease Font Size.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Turn on Best Fit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set Vertical Overflow to Truncate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set Horizontal Overflow to Overflow.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have started working on a game that relies on time being stopped, rewound,
    and fast forward, but only for your enemies, with the use of the `Time.timeScale`
    functionality. Some of your enemies aren't being affected by the change of time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What property value could potentially cause this in the enemy's **Animator**
    component?
  prefs: []
  type: TYPE_NORMAL
- en: Set `Update Mode` to Animate Physics.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set `Culling Mode` to Cull Completely.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set `Culling Mode` to Always Animate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set `Update Mode` to Unscaled Time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have a selection of game objects that are tomato plants. Each tomato on
    the tomato plant has a script attached named `Tomato`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In order to avoid the tomato plants appearing repetitively, some of the artists
    have turned off the `tomato` game objects so they can't be seen.
  prefs: []
  type: TYPE_NORMAL
- en: At the start of the scene, we need to count how many tomatoes are in the scene,
    including the hidden ones.
  prefs: []
  type: TYPE_NORMAL
- en: Which command would get a reference to all `Tomato` scripts?
  prefs: []
  type: TYPE_NORMAL
- en: '`GetComponentsInChildren(typeof(Tomato), true)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`GetComponentInChildren(typeof(Tomato), true)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`GetComponentsInChildren(typeof(Tomato))`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`GetComponenstInParent(typeof(Tomato), true)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which static `Time` class property would be used to freeze time?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`timeScale`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`maximumDeltaTime`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`captureFramerate`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`time`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following would be the most useful for labeling in a state machine?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enum
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: String
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Float
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Int
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following is related to triggering an event in-game?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A particle effect is running.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The player is idle on the menu screen for 20 minutes.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The player presses a UI button.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The player moves the mouse cursor.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You have created a game where your player must sneak around and avoid the enemy.
    In one of the missions, your player has to listen out in the warehouse where the
    enemy is (listening for footsteps, talking, and so on).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What audio property would you add for this game?
  prefs: []
  type: TYPE_NORMAL
- en: Add an Audio Source component to each enemy, set its spatial blend to 3D, and
    play a sound.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use an Audio Mixer Snapshot to add a low-pass filter when enemies are nearby.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Measure the distance between each enemy and the player and play a sound if the
    distance drops below a certain threshold.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an Audio Source that plays music in the background and increase or decrease
    its volume based on the distance of the closest enemy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within your `CustomRolloff`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`SpatialBlend`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`ReverbZoneMix`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Spread`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have started adding music and sound effects to your game. When testing,
    you notice that the background music cuts out when some sound effects are played.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which property in the **Audio Source** component will fix this so that your
    music doesn't cut out?
  prefs: []
  type: TYPE_NORMAL
- en: Increase Priority.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Increase Volume.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Increase MinDistance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Decrease SpatialBlend.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have been asked to make a UI menu screen. You have made a **Canvas** and
    set its **Render Mode** to **Screen Space - Overlay**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Canvas Scaler** component, which property in UI Scale Mode will make
    UI elements retain the same size in pixels, regardless of screen size?
  prefs: []
  type: TYPE_NORMAL
- en: '**Constant Pixel Size**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Scale with Screen Size**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Constant Physical Size**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Disable Canvas Scaler**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When ticking the Preserve Aspect checkbox in an **Image** component, what does
    this do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sets the aspect of the camera to match the perspective of the image.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Makes the image match the same aspect ratio as the cameras.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The image retains its original dimension.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Has no effect on **Image** components, only Sprite Renderers.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Can a Sprite Renderer be used instead of an **Image** component within the **Canvas**?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No. Even though a Sprite Renderer can work in 2D/3D spaces, it's not intended
    to be used with the **Canvas** and therefore will not work.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Yes, but Sprite Renderer has fewer features and is an older version of the **Image**
    component.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Depending on the Unity project, if your scene is in 2D mode, yes.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Yes, when being used to animate sprite sheets.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What does the `Toggle` button on or off
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Makes the graphic active or inactive when the player presses it during runtime
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Holds the **CheckMark** image
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does `parent` game object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
