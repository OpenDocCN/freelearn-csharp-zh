["```cs\n    private void btnMethod1_Click(object sender, RoutedEventArgs e)\n            {\n                IEnumerable<int> collection1 = Enumerable.Range(10, 500000);\n\n                //Start the timer.\n                Stopwatch sw1 = new Stopwatch();\n                sw1.Start();\n\n         //Method 1 - This uses a ForAll method and an empty \n         //delegate method.\n                ParallelQuery<int> PQ1 = from num in collection1.AsParallel()\n                          where num % 5 == 0\n                          select num;\n\n                PQ1.ForAll((i) => DoWork(i));\n\n        // Use a standard foreach loop and merge the results.\n                foreach (int i in PQ1)\n                {\n                    lb1.Items.Add(i);\n                }\n\n                //Stop the timer.\n                sw1.Stop();\n\n                tbTime1.Text = sw1.ElapsedMilliseconds.ToString();\n\n            }\n    ```", "```cs\n    private void btnMethod2_Click(object sender, RoutedEventArgs e)\n            {\n                IEnumerable<int> collection2 = Enumerable.Range(10, 500000);\n\n                //Start the timer.\n                Stopwatch sw2 = new Stopwatch();\n                sw2.Start();\n\n                // Method 2 - Use a standard ToArray method to return //the results.\n                int[] PQ2 = (from num in collection2.AsParallel()\n                           where num % 10 == 0\n                           select num).ToArray();\n\n                // Use a standard foreach loop and merge the results.\n                foreach (int i in PQ2)\n                {\n                    lb2.Items.Add(i);\n                }\n\n                //Stop the timer.\n                sw2.Stop();\n\n                tbTime2.Text = sw2.ElapsedMilliseconds.ToString();\n         }\n    ```", "```cs\n    private void btnMethod3_Click(object sender, RoutedEventArgs e)\n            {\n                IEnumerable<int> collection3 = Enumerable.Range(10, 10000);\n\n                //Start the timer.\n                Stopwatch sw3 = new Stopwatch();\n                sw3.Start();\n\n                // Method 3 - Use the LINQ standard method format.\n                ParallelQuery<int> PQ3 = collection3.AsParallel().Where(n => n % 10 == 0).Select(n => n);\n\n                // Use a standard foreach loop and merge the results.\n                foreach (int i in PQ3)\n                {\n                    lb3.Items.Add(i);\n                }\n\n                //Stop the timer.\n                sw3.Stop();\n\n                tbTime3.Text = sw3.ElapsedMilliseconds.ToString();\n\n            }\n    ```", "```cs\n    using System.Diagnostics;\n    ```", "```cs\n    static void DoWork(int i)\n            {\n            }\n    ```", "```cs\n    <Window x:Class=\"WpfPLINQQuery.MainWindow\"\n\n            Title=\"MainWindow\" Height=\"759.12\" Width=\"725.431\">\n\n        <Grid>\n            <ListBox x:Name=\"lb1\" HorizontalAlignment=\"Left\" Height=\"557\" Margin=\"38,78,0,0\" VerticalAlignment=\"Top\" Width=\"150\"/>\n            <ListBox x:Name=\"lb2\" HorizontalAlignment=\"Left\" Height=\"557\" Margin=\"285,78,0,0\" VerticalAlignment=\"Top\" Width=\"150\"/>\n            <ListBox x:Name=\"lb3\" HorizontalAlignment=\"Left\" Height=\"557\" Margin=\"526,78,0,0\" VerticalAlignment=\"Top\" Width=\"150\"/>\n            <Button x:Name=\"btnMethod1\" Content=\"Execute Method 1\" HorizontalAlignment=\"Left\" Height=\"43\" Margin=\"38,26,0,0\" VerticalAlignment=\"Top\" Width=\"150\" Click=\"btnMethod1_Click\"/>\n            <Button x:Name=\"btnMethod2\" Content=\"Execute Method 2\" HorizontalAlignment=\"Left\" Height=\"43\" Margin=\"285,26,0,0\" VerticalAlignment=\"Top\" Width=\"150\" Click=\"btnMethod2_Click\"/>\n            <Button x:Name=\"btnMethod3\" Content=\"Execute Method 3\" HorizontalAlignment=\"Left\" Height=\"43\" Margin=\"526,26,0,0\" VerticalAlignment=\"Top\" Width=\"150\" Click=\"btnMethod3_Click\"/>\n            <TextBox x:Name=\"tbTime1\" HorizontalAlignment=\"Left\" Height=\"28\" Margin=\"38,684,0,0\" TextWrapping=\"Wrap\" VerticalAlignment=\"Top\" Width=\"150\"/>\n            <TextBox x:Name=\"tbTime2\" HorizontalAlignment=\"Left\" Height=\"28\" Margin=\"285,684,0,0\" TextWrapping=\"Wrap\" VerticalAlignment=\"Top\" Width=\"150\"/>\n            <TextBox x:Name=\"tbTime3\" HorizontalAlignment=\"Left\" Height=\"28\" Margin=\"526,684,0,0\" TextWrapping=\"Wrap\" VerticalAlignment=\"Top\" Width=\"150\"/>\n\n        </Grid>\n\n    </Window>\n    ```", "```cs\nParallelQuery<int> PQ1 = from num in collection1.AsParallel()\n                      where num % 5 == 0\n                      select num;\n```", "```cs\ncollection1.AsParallel();\n```", "```cs\nPQ1.ForAll((i) => DoWork(i));\n```", "```cs\nint[] PQ2 = (from num in collection2.AsParallel()\n                       where num % 10 == 0\n                       select num).ToArray();\n```", "```cs\nParallelQuery<int> PQ3 = collection3.AsParallel().Where(n => n % 10 == 0).Select(n => n);\n```", "```cs\n    ParallelQuery<int> PQ1 = from num in collection1.AsParallel().AsOrdered()\n                          where num % 5 == 0\n                       select num;\n    ```", "```cs\n    int[] PQ2 = (from num in collection2.AsParallel().AsOrdered()\n                           where num % 10 == 0\n                       select num).ToArray();\n    ```", "```cs\n    ParallelQuery<int> PQ3 = collection3.AsParallel().AsOrdered().Where(n =>           n % 10 == 0).Select(n => n);\n    ```", "```cs\nParallelQuery<int> PQ1 = from num in collection1.AsParallel().AsOrdered().WithMergeOptions(ParallelMergeOptions.NotBuffered)\n                where num % 5 == 0\n                select num;\n```", "```cs\nParallelQuery<int> PQ1 = from num in collection1.AsParallel().AsOrdered().WithMergeOptions(ParallelMergeOptions.AutoBuffered)\n                      where num % 5 == 0\n                      select num;\n```", "```cs\nParallelQuery<int> PQ1 = from num in collection1.AsParallel().AsOrdered().WithMergeOptions(ParallelMergeOptions.FullyBuffered)\n                      where num % 5 == 0\n                      select num;\n```", "```cs\n          using System.Threading;\n    ```", "```cs\n                CancellationTokenSource cs = new CancellationTokenSource();\n    ```", "```cs\n             private void btnCancel_Click(object sender, RoutedEventArgs e)\n                  {\n                         cs.Cancel();\n               }\n    ```", "```cs\n                IEnumerable<int> collection1 = Enumerable.Range(10, 500000);\n    ```", "```cs\n                try\n                      {\n                          // Method 2 - Use a standard TOArray method to //return the results.\n    PQ2 = (from num in collection2.AsParallel().AsOrdered().WithCancellation(cs.Token)\n                                 where num % 10 == 0\n                                 select num).ToArray();\n                      }\n                      catch (OperationCanceledException ex)\n                      {\n                          lb2.Items.Clear();\n                          lb2.Items.Add(ex.Message);\n                          return;\n                   }\n    ```", "```cs\n   CancellationTokenSource cs = new CancellationTokenSource();\n```", "```cs\n    private void btnCancel_Click(object sender, RoutedEventArgs e)\n        {\n            cs.Cancel();\n        }\n```", "```cs\n        try\n            {\n                // Method 2 - Use a standard TOArray method to return the //results.\n                PQ2 = (from num in collection2.AsParallel().AsOrdered().WithCancellation(cs.Token)\n                             where num % 10 == 0\n                             select num).ToArray();\n            }\n            catch (OperationCanceledException ex)\n            {\n                lb2.Items.Clear();\n                lb2.Items.Add(ex.Message);\n                return;\n            }\n```"]