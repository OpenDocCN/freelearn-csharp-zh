- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Demystifying Serverless Applications
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 揭秘无服务器应用
- en: When it comes to software development, we are living in incredible times. With
    the evolution of cloud platforms and the rise of modern technologies, being a
    developer nowadays is both a wonderful way to live and a challenging profession
    to follow. There are so many ways to deliver an application and so many innovative
    technologies to explore that we may fall into a vicious circle where we focus
    more on the technologies rather than the actual solution.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当谈到软件开发时，我们正生活在令人难以置信的时代。随着云平台的发展以及现代技术的兴起，成为一名开发者如今既是一种美好的生活方式，也是一种充满挑战的职业。有如此多的方式来交付应用程序，有如此多的创新技术去探索，我们可能会陷入一个恶性循环，即我们更多地关注技术而不是实际的解决方案。
- en: This chapter aims to present the serverless architecture and explore how you
    can use this approach to implement a microservices application. To achieve this,
    it covers the theory behind serverless and provides an understanding of how it
    can be a viable alternative for microservices implementation.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章旨在介绍无服务器架构，并探讨您如何使用这种方法来实现微服务应用程序。为了实现这一目标，它涵盖了无服务器背后的理论，并提供了对它如何成为微服务实现可行替代方案的理解。
- en: 'The chapter also explores how Microsoft implements **Function as a Service
    (FaaS),** using Azure Functions as one of the options for building microservices.
    Two alternative development platforms will be presented: Visual Studio Code and
    Visual Studio.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章还探讨了微软如何实现**函数即服务（FaaS）**，使用 Azure Functions 作为构建微服务的一种选项。将介绍两种替代开发平台：Visual
    Studio Code 和 Visual Studio。
- en: By the end of this chapter, you will understand the different triggers available
    in Azure Functions and be ready to create your first function.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将了解 Azure Functions 中可用的不同触发器，并准备好创建您的第一个函数。
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter requires Visual Studio 2022 free *Community edition* or Visual
    Studio Code. During the chapter, the details about how to debug Azure Functions
    for each development environment will be presented in the topics. You will also
    need an Azure account to create the sample environment. You can find the sample
    code for this chapter at [https://github.com/PacktPublishing/Practical-Serverless-and-Microservices-with-Csharp](https://github.com/PacktPublishing/Practical-Serverless-and-Microservices-with-Csharp).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章需要 Visual Studio 2022 免费版 *社区版* 或 Visual Studio Code。在章节中，将介绍如何针对每个开发环境调试
    Azure Functions 的详细信息。您还需要一个 Azure 账户来创建示例环境。您可以在[https://github.com/PacktPublishing/Practical-Serverless-and-Microservices-with-Csharp](https://github.com/PacktPublishing/Practical-Serverless-and-Microservices-with-Csharp)找到本章的示例代码。
- en: What is serverless?
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是无服务器？
- en: When someone asks you to develop a solution, the last thing they usually care
    about is how the infrastructure will work. The truth is, even for developers,
    the most important thing about infrastructure is that it simply works well.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当有人要求您开发一个解决方案时，他们通常最关心的事情不是基础设施将如何工作。事实是，即使是对于开发者来说，关于基础设施最重要的东西就是它简单地工作得很好。
- en: Considering this reality, the possibility of having a cloud provider that dynamically
    manages server allocation and provisioning, leaving the underlying infrastructure
    to the provider, might be the best scenario.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一现实情况，拥有一个能够动态管理服务器分配和配置的云提供商，将底层基础设施留给提供商，可能是一个最佳场景。
- en: 'That is what serverless architecture promises: a model we can use to build
    and run applications and services without having to manage the underlying infrastructure
    ourselves! This approach abstracts server management entirely, allowing developers
    to focus on their code.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是无服务器架构所承诺的：一个我们可以用来构建和运行应用程序和服务的模型，而无需自己管理底层基础设施！这种方法完全抽象化了服务器管理，使开发者能够专注于他们的代码。
- en: The first cloud solution provider that presented this concept was Amazon, with
    the launch of AWS Lambda in 2014\. After that, Microsoft and Google also provided
    similar solutions with Microsoft Azure Functions and Google Cloud Functions. As
    we mentioned before, the focus of this book will be Azure Functions.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个提出这一概念的是亚马逊，2014年推出了 AWS Lambda。之后，微软和谷歌也提供了类似的服务，分别是 Microsoft Azure Functions
    和 Google Cloud Functions。正如我们之前提到的，本书的重点将是 Azure Functions。
- en: There are many advantages that we can consider for using serverless computing.
    The fact that you do not have to worry about scaling can be considered the main
    one. Additionally, the cloud solution provider maintains the reliability and security
    of the environment. Besides that, with this approach, you have the option to pay
    as you go, so you only pay for what you use, enabling a sustainable model of growth.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以考虑使用无服务器计算的一些优点。你不必担心扩展的事实可以被认为是主要的一个。此外，云解决方案提供商维护环境的可靠性和安全性。除此之外，采用这种方法，你有按需付费的选项，因此你只为所使用的付费，这使可持续增长模式成为可能。
- en: Serverless can also be considered a good approach for accelerating software
    development since you only focus on the code needed to deliver that program. On
    the other hand, you may have difficulty overseeing a considerable number of functions,
    so this organization needs to be well handed to not cause problems while creating
    a solution with many functions.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器架构也可以被认为是一种加速软件开发的好方法，因为你只需关注实现该程序所需的代码。另一方面，你可能难以管理大量功能，因此这种组织结构需要妥善处理，以避免在创建具有许多功能的解决方案时出现问题。
- en: Since the introduction of serverless, various kinds of functions have been created.
    These functions act as triggers that are used to start processing. As soon as
    the function is triggered, the execution can be done in different programming
    languages.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 自从引入无服务器以来，已经创建了各种类型的函数。这些函数作为触发器，用于启动处理。一旦函数被触发，执行就可以用不同的编程语言完成。
- en: Now, let us check whether functions can be considered microservices or not.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们检查一下功能是否可以被认为是微服务。
- en: Is serverless a way to deliver microservices?
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无服务器是一种提供微服务的方式吗？
- en: If you look at the definition of microservices, you will find the concept of
    delivering an application as loosely coupled components that represent the implementation
    of a business capability. You can build something like that with a couple of functions,
    so yes, serverless is a way to deliver microservices.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看微服务的定义，你会发现将应用程序作为松散耦合的组件提供，这些组件代表业务能力的实现。你可以用几个函数构建类似的东西，所以是的，无服务器是一种提供微服务的方式。
- en: Some specialists even consider serverless architecture an evolution of microservices,
    since the focus of serverless architecture is to deliver scalability in a safe
    environment, enabling the possibility of a set of functions to independently be
    developed, tested, and deployed, which brings a lot of flexibility to the software
    architecture. That is exactly the main philosophy of microservices.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一些专家甚至认为无服务器架构是微服务架构的一种演变，因为无服务器架构的焦点是在一个安全的环境中提供可伸缩性，使得一组功能可以独立地进行开发、测试和部署，这为软件架构带来了很多灵活性。这正是微服务架构的主要哲学。
- en: Let us imagine, as an example, a microservice responsible for authenticating
    users. You may create specific functions for registering, logging, and resetting
    passwords. Considering that this set of functions can be created in a single serverless
    project, you have both the flexibility of creating separated functions and the
    possibility of defining the purpose of the microservice.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以一个例子来想象，比如一个负责用户身份验证的微服务。你可能为注册、登录和重置密码创建特定的功能。考虑到这一组功能可以在单个无服务器项目中创建，你既有创建分离功能的灵活性，也有定义微服务目的的可能性。
- en: The serverless project will naturally support integration with databases, messaging
    queues, OpenAPI specifications, and other APIs, enabling the design patterns typically
    needed for a robust microservice architecture. It is also important to mention
    that keeping microservices isolated, small, and preferably reusable is a best
    practice worth following.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器项目将自然支持与数据库、消息队列、OpenAPI规范和其他API的集成，从而实现通常需要的健壮微服务架构的设计模式。同样重要的是要提到，保持微服务隔离、小型且最好是可重用的是一个值得遵循的最佳实践。
- en: Now that you understand that you can write microservices using serverless approaches,
    let us understand how Microsoft Azure presents serverless in its platform.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解到你可以使用无服务器方法编写微服务，让我们了解微软Azure在其平台上如何呈现无服务器。
- en: How does Microsoft Azure present serverless?
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微软Azure如何呈现无服务器？
- en: In 2016, Microsoft introduced Azure Functions as a Platform-as-a-Service (PaaS)
    offering designed to deliver FaaS capabilities. This option enables innovation
    at a scale for business transformation. Today, Azure Functions gives us the opportunity
    to power up applications using multiple programming languages, including C#, JavaScript,
    F#, Java, and Python.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 2016 年，Microsoft 推出了 Azure Functions 作为一种平台即服务（PaaS）产品，旨在提供 FaaS 功能。这一选项为企业转型提供了可扩展的创新。今天，Azure
    Functions 给我们提供了使用多种编程语言（包括 C#、JavaScript、F#、Java 和 Python）来增强应用程序的机会。
- en: One of the standout features of Azure Functions is its seamless integration
    with other Azure services and third-party APIs. For instance, it can easily connect
    to different Azure databases (from Azure SQL Server to Azure Cosmos DB), Azure
    Event Grid for event-based architecture, and Azure Logic Apps for workflow automation.
    This connectivity simplifies the process of building complex, enterprise-grade
    applications that leverage multiple services.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Functions 的一个突出特点是它与其他 Azure 服务和第三方 API 的无缝集成。例如，它可以轻松连接到不同的 Azure 数据库（从
    Azure SQL Server 到 Azure Cosmos DB），Azure Event Grid 用于事件驱动架构，以及 Azure Logic Apps
    用于工作流自动化。这种连接性简化了构建复杂、企业级应用程序的过程，这些应用程序利用了多种服务。
- en: Over the years, the possibilities with Azure Functions have evolved. Today,
    we can even manage stateful workflows and long-running operations, using Azure
    Durable Functions. With this, you can orchestrate complex processes that can be
    executed in multiple function executions.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，Azure Functions 的可能性不断发展。今天，我们甚至可以使用 Azure Durable Functions 来管理有状态的流程和长时间运行的操作。有了这个，您可以编排可以在多个函数执行中执行复杂流程。
- en: But Microsoft has not only created an environment for coding functions. They
    have also created a complete pipeline for developers, following the DevSecOps
    process that’s now widely discussed and used in enterprise solutions. Developers
    can use tools such as Azure Pipelines, GitHub Actions, and other CI/CD services
    to automate the deployment process. You can also monitor and diagnose events in
    these functions using Azure Monitor and Application Insights, which facilitate
    troubleshooting and optimization.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 但 Microsoft 不仅为编写函数创建了一个环境。他们还创建了一个完整的开发人员管道，遵循现在在企业解决方案中广泛讨论和使用的 DevSecOps
    流程。开发者可以使用 Azure Pipelines、GitHub Actions 和其他 CI/CD 服务来自动化部署过程。您还可以使用 Azure Monitor
    和 Application Insights 监控和诊断这些函数中的事件，这些工具有助于故障排除和优化。
- en: 'The PaaS solution also enables different setups to adjust scalability and security
    aspects. Depending on the hosting plan you decide to set, you can have different
    scaling opportunities, as you can check here:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: PaaS 解决方案还允许不同的设置调整可伸缩性和安全性方面。根据您选择的托管计划，您将拥有不同的扩展机会，您可以在此处查看：
- en: 'Consumption plan: The basic and most cost-effective option to get started with
    Azure Functions. Ideal for event-driven workloads with automatic scaling.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消费计划：Azure Functions 的基本且最具成本效益的入门选项。适用于具有自动扩展的事件驱动工作负载。
- en: 'Flex Consumption plan: Offers rapid, elastic scaling combined with support
    for private networking (VNet integration).'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弹性消费计划：提供快速、弹性扩展，同时支持私有网络（VNet 集成）。
- en: 'Dedicated plan (App Service plan): Suitable for long-running functions and
    scenarios requiring more predictable performance and resource allocation.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 专用计划（App Service 计划）：适用于长时间运行的功能和需要更可预测的性能及资源分配的场景。
- en: 'Azure Container Apps plan: A solid choice for microservices-based architectures
    that use multiple technology stacks or require greater flexibility.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 容器应用程序计划：适用于基于微服务架构，使用多种技术堆栈或需要更高灵活性的场景。
- en: 'Premium plan: Designed for high-performance scenarios with the ability to scale
    on demand, providing support for advanced features such as VNet, longer execution
    times, and pre-warmed instances.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 专用计划：为高性能场景设计，具有按需扩展的能力，提供对 VNet、更长的执行时间和预热实例等高级功能的支持。
- en: In summary, Microsoft Azure delivers serverless FaaS through Azure Functions,
    offering a powerful, flexible, and scalable platform that enhances the development
    and deployment of serverless applications. By using Azure Functions, developers
    can build and maintain responsive, cost-effective solutions. Now, let us explore
    how to create an Azure function in the Azure portal.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，Microsoft Azure 通过 Azure Functions 提供无服务器 FaaS，提供了一个强大、灵活且可扩展的平台，增强了无服务器应用程序的开发和部署。通过使用
    Azure Functions，开发者可以构建和维护响应迅速、成本效益高的解决方案。现在，让我们来探讨如何在 Azure 门户中创建一个 Azure 函数。
- en: Creating your first serverless app in Azure
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Azure 中创建您的第一个无服务器应用程序
- en: 'There are not many steps for creating your first serverless app in Azure. You
    can do it in a straightforward process when using the Azure portal. Follow these
    steps to get started:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Azure 中创建您的第一个无服务器应用没有多少步骤。当使用 Azure 门户时，您可以通过直接的过程完成它。按照以下步骤开始：
- en: Log in to the Azure portal. To do so, open your web browser and navigate to
    the Azure portal at [https://portal.azure.com/](https://portal.azure.com/). Sign
    in with your Azure account credentials.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到 Azure 门户。为此，打开您的网络浏览器并导航到 Azure 门户 [https://portal.azure.com/](https://portal.azure.com/)。使用您的
    Azure 账户凭据登录。
- en: In the Azure portal, click on the **Create a resource** button located in the
    upper-left corner.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Azure 门户中，点击位于左上角的**创建资源**按钮。
- en: '![Figure 1.1: Creating a resource in the Azure portal](img/B31916_01_1.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.1：在 Azure 门户中创建资源](img/B31916_01_1.png)'
- en: 'Figure 1.1: Creating a resource in the Azure portal'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1：在 Azure 门户中创建资源
- en: In the **Search services and marketplace** window, search for **Function App**
    and select it from the search results. This service will also be presented in
    the **Popular Azure services** section.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**搜索服务和市场**窗口中，搜索**功能应用**，并从搜索结果中选择它。此服务也将显示在**热门 Azure 服务**部分。
- en: Click the **Create** button to start the creation process.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建**按钮开始创建过程。
- en: '![ Figure 1.2: Selecting Function App for creation](img/B31916_01_2.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.2：选择功能应用进行创建](img/B31916_01_2.png)'
- en: 'Figure 1.2: Selecting Function App for creation'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2：选择功能应用进行创建
- en: As soon as you select **Function App**, you will be prompted to select the required
    hosting plan. Today, we have five options for hosting plans using Azure Functions.
    These plans vary according to the scaling behavior, cold start, the possibility
    of usage of a virtual network, and, obviously, pricing. The *Consumption* plan
    is exactly what serverless is all about, where you have no idea of where and how
    your code is running, and you only pay for the execution of the code. On the other
    hand, when you select the *App Service* or *Container Apps environment* plans,
    you will have more control over the hardware and consumption of resources, which
    means you get the flexibility of using Azure Functions in your solution, along
    with the management needed for larger applications.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦选择**功能应用**，您将被提示选择所需的托管计划。今天，我们使用 Azure Functions 有五种托管计划选项。这些计划根据扩展行为、冷启动、使用虚拟网络的可能性以及显然的价格而有所不同。**消费**计划正是无服务器所涉及的内容，您不知道代码在哪里以及如何运行，您只需为代码的执行付费。另一方面，当您选择**应用服务**或**容器应用环境**计划时，您将拥有更多对硬件和资源消耗的控制权，这意味着您可以在解决方案中使用
    Azure Functions 的灵活性，以及大型应用程序所需的相应管理。
- en: The following screen will be presented to you as soon as you select to create
    an Azure function app. As we described previously, you will need to decide on
    the hosting plan according to your needs.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当您选择创建 Azure 功能应用时，将立即显示以下屏幕。正如我们之前所描述的，您需要根据您的需求选择托管计划。
- en: '![Figure 1.3: Function App hosting plans](img/B31916_01_3.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.3：功能应用托管计划](img/B31916_01_3.png)'
- en: 'Figure 1.3: Function App hosting plans'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3：功能应用托管计划
- en: 'For the purpose of this chapter, we will select the **Consumption** plan. Once
    you select this option, you will find a wizard to help you create the service.
    In this service, you will need to fill in the following information:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了本章的目的，我们将选择**消费**计划。一旦选择此选项，您将找到一个向导来帮助您创建服务。在这个服务中，您需要填写以下信息：
- en: '**Basics**: Fill in the required fields such as **Subscription**, **Resource
    Group**, **Function App name**, **Region**, and **Operating System**. Ensure that
    the name you choose is unique. In **Runtime stack**, select the programming language
    of your functions. We will select **.NET 8 Isolated** worker model, but there
    are other options, as we presented before. It is worth mentioning that in-process
    models will be retired in 2026, so do not start projects using this approach.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基础**：填写所需的字段，例如**订阅**、**资源组**、**功能应用名称**、**区域**和**操作系统**。确保您选择的名称是唯一的。在**运行时堆栈**中，选择您函数的编程语言。我们将选择**.NET
    8 Isolated**工作模型，但还有其他选项，正如我们之前所展示的。值得注意的是，进程模型将在 2026 年被淘汰，因此不要使用这种方法开始项目。'
- en: '**Storage**: The function app needs an Azure storage account by default.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储**：功能应用默认需要 Azure 存储账户。'
- en: '**Networking**: This is where you will define whether the Azure function will
    be available for public access or not.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络**：这是您定义 Azure 函数是否可供公共访问的地方。'
- en: '**Monitoring**: Enable Application Insights to monitor your Function App for
    better diagnostics and performance tracking. Don’t forget that Azure Monitor logs
    will cause a cost increase.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控**：启用 Application Insights 以监控您的函数应用，以获得更好的诊断和性能跟踪。别忘了 Azure Monitor 日志会导致成本增加。'
- en: '**Deployment**: It is also possible to initiate the setup of the deployment
    desired for the function app. This is interesting for enabling continuous deployment
    using GitHub Actions as default.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署**：还可以启动为函数应用所需的部署设置。这对于使用 GitHub Actions 作为默认方式实现持续部署很有趣。'
- en: '**Tags**: Tagging the function app is considered a good practice for facilitating
    FinOps activity in professional environments.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标签**：在专业环境中，将函数应用进行标记被认为是便于 FinOps 活动的良好实践。'
- en: In [*Chapter 2*](Chapter_2.xhtml#_idTextAnchor038), *Demystifying Microservices
    Applications*, we will discuss the best way to interface microservices with the
    external world. For security reasons, it is not recommended that you provide functions
    directly to the public. You may decide to deliver them using an application gateway,
    such as Azure Application Gateway, or you can use Azure API Management as the
    entry for the APIs you develop using Azure Functions.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第 2 章*](Chapter_2.xhtml#_idTextAnchor038)“揭秘微服务应用”中，我们将讨论将微服务与外部世界接口的最佳方式。出于安全考虑，不建议您直接向公众提供函数。您可以选择使用应用程序网关，如
    Azure 应用网关，或使用 Azure API Management 作为您使用 Azure Functions 开发的 API 的入口。
- en: 'Once you click on **Review and create**, you will be able to check all the
    settings. Review your configuration and click the **Create** button again to deploy
    your function app:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您点击**审查和创建**，您将能够检查所有设置。审查您的配置，然后再次点击**创建**按钮以部署您的函数应用：
- en: '![Figure 1.4: Reviewing the function app setup](img/B31916_01_4.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.4：审查函数应用设置](img/B31916_01_4.png)'
- en: 'Figure 1.4: Reviewing the function app setup'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4：审查函数应用设置
- en: 'Once the deployment is complete, navigate to your new function app by clicking
    on the **Go to resource** button. You will find the function app running properly
    there:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 部署完成后，通过点击**转到资源**按钮导航到您的新函数应用。您将看到函数应用正在正常运行：
- en: '![Figure 1.5: Function app running](img/B31916_01_5.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.5：函数应用运行](img/B31916_01_5.png)'
- en: 'Figure 1.5: Function app running'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5：函数应用运行
- en: Now, it is time to understand the possibilities for development using Azure
    Functions and start coding.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候了解使用 Azure Functions 进行开发的可能性和开始编码了。
- en: Understanding the triggers available in Azure Functions
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Azure Functions 中可用的触发器
- en: The basic idea of Azure Functions is that each function requires a trigger to
    start its execution. Once the trigger is fired, the execution of your code will
    start shortly afterward. However, the time it takes for execution to begin can
    vary depending on the selected hosting plan. For instance, in the Consumption
    plan, functions may experience cold starts – that is, a delay that occurs when
    the platform needs to initialize resources. It is also important to understand
    that the function can trigger more than once at the same time, which enables execution
    in parallel.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Functions 的基本思想是每个函数都需要一个触发器来启动其执行。一旦触发器被触发，您的代码执行将很快开始。然而，执行开始所需的时间可能会根据所选的托管计划而变化。例如，在消费计划中，函数可能会遇到冷启动——即当平台需要初始化资源时发生的延迟。了解这一点也很重要，即函数可以同时触发多次，这允许并行执行。
- en: 'Azure Functions offers a variety of triggers that allow developers to execute
    code in response to different events. Here we have the most used triggers:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Functions 提供了各种触发器，允许开发者在响应不同事件时执行代码。这里我们有最常用的触发器：
- en: 'HTTP Trigger: This trigger allows the function to be executed via an HTTP request.
    It is useful for creating APIs and webhooks, where the function can be called
    using standard HTTP methods.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP 触发器：此触发器允许通过 HTTP 请求执行函数。这对于创建 API 和 webhook 非常有用，其中可以使用标准 HTTP 方法调用函数。
- en: 'Timer Trigger: This trigger runs the function on a schedule based on the NCRONTAB
    model. It is ideal for tasks that need to be performed at regular intervals, such
    as cleanup operations, data processing, or sending out periodic reports. It is
    important to mention that the same timer trigger function does not run again until
    its first execution is done. This behavior helps prevent overlapping executions
    and potential conflicts.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Timer 触发器：此触发器根据 NCRONTAB 模型安排运行函数。它非常适合需要定期执行的任务，例如清理操作、数据处理或发送定期报告。重要的是要提到，相同的定时触发器函数在其第一次执行完成后不会再次运行。这种行为有助于防止重叠执行和潜在冲突。
- en: 'Blob Storage Trigger: This trigger runs the function when a new blob is created
    or updated in an Azure Blob Storage container. It is useful for processing or
    transforming files, such as images or logs, as they are uploaded.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Blob Storage 触发器：当在 Azure Blob Storage 容器中创建或更新新的 blob 时，此触发器将运行函数。它适用于处理或转换文件，例如图像或日志，在它们上传时。
- en: 'Queue Storage Trigger: This trigger runs the function in response to messages
    added to Azure Queue Storage. It is useful for building scalable and reliable
    background processing systems.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Queue Storage 触发器：当向 Azure Queue Storage 添加消息时，此触发器将运行函数。它适用于构建可伸缩且可靠的背景处理系统。
- en: 'Event Grid Trigger: This trigger runs the function in response to events published
    to Azure Event Grid. It is useful for reacting to events from various Azure services,
    such as resource creation, modification, or deletion.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Event Grid 触发器：此触发器在 Azure Event Grid 发布事件时运行函数。它适用于对来自各种 Azure 服务的事件做出反应，例如资源创建、修改或删除。
- en: 'Service Bus Trigger: This trigger runs the function when messages are received
    in an Azure Service Bus queue or topic. It is ideal for handling inter-application
    messaging and building complex workflows.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Service Bus 触发器：当在 Azure Service Bus 队列或主题中接收到消息时，此触发器将运行函数。它非常适合处理应用程序间的消息传递和构建复杂的流程。
- en: 'Cosmos DB Trigger: This trigger runs the function in response to creation and
    updates in Azure Cosmos DB. It is useful for processing data changes in real time,
    such as updating a search index or triggering additional data processing.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cosmos DB 触发器：此触发器在 Azure Cosmos DB 中创建和更新时运行函数。它适用于实时处理数据更改，例如更新搜索索引或触发额外的数据处理。
- en: These triggers offer flexibility and scalability, allowing developers to build
    event-driven applications that can respond to distinct types of events seamlessly.
    It is important to say that there are other triggers available in Azure Functions,
    and we will discuss them in more detail in the next chapters.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这些触发器提供了灵活性和可伸缩性，允许开发者构建能够无缝响应不同类型事件的基于事件的应用程序。重要的是要说明，Azure Functions 中还有其他可用的触发器，我们将在下一章中更详细地讨论它们。
- en: Coding with Azure Functions
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Azure Functions 进行编码
- en: The focus of this topic is to rapidly present some ways to develop Azure functions.
    During the other chapters of the book, we will present a use case related to car
    sharing. As you will see in detail in [*Chapter 2*](Chapter_2.xhtml#_idTextAnchor038),
    *Demystifying Microservices Applications*, each microservice must have a health
    check endpoint. Let us develop a sample of this health check API.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 本主题的重点是快速介绍一些开发 Azure 函数的方法。在本书的其他章节中，我们将介绍与汽车共享相关的用例。正如您将在 [*第 2 章*](Chapter_2.xhtml#_idTextAnchor038)
    中详细看到的，*揭秘微服务应用程序*，每个微服务都必须有一个健康检查端点。让我们开发一个这样的健康检查 API 的示例。
- en: Coding Azure functions using VS Code
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 VS Code 编码 Azure 函数
- en: Creating an HTTP trigger Azure function using VS Code involves several well-defined
    steps. Here is a detailed guide to help you through the process.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 VS Code 创建 HTTP 触发器 Azure 函数涉及几个定义明确的步骤。以下是一个详细的指南，帮助您完成这个过程。
- en: 'There are some prerequisites to enable the development of Azure functions using
    VS Code, as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 VS Code 开发 Azure 函数有一些先决条件，如下所述：
- en: Ensure you have VS Code installed on your machine. The use of VS Code will help
    you not only develop the Azure functions needed but also manage your Azure account
    using the **Azure Tools** extension.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保您的机器上已安装 VS Code。使用 VS Code 不仅可以帮助您开发所需的 Azure 函数，还可以通过 **Azure Tools** 扩展来管理您的
    Azure 账户。
- en: It is recommended that you sign in to your Azure account to create the new function.
    The **C# Dev Kit** may also be installed.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建议您登录到您的 Azure 账户以创建新的函数。**C# 开发工具包**也可能已安装。
- en: '**The GitHub Copilot extension** can also be installed to help you solve coding
    problems and, at the same time, guide you while writing code.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以安装 **GitHub Copilot 扩展** 来帮助您解决编码问题，同时在进行编码时为您提供指导。
- en: Install the Azure Functions extension for VS Code. This VS Code extension will
    facilitate the development of functions, giving you wizards for each function
    trigger desired.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 VS Code 的 Azure Functions 扩展。这个 VS Code 扩展将方便函数的开发，为每个期望的函数触发器提供向导。
- en: Install the Azurite extension for VS Code. This VS Code extension is an open
    source Azure Storage API-compatible server for debugging Azure Functions locally.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 VS Code 的 Azurite 扩展。这个 VS Code 扩展是一个开源的与 Azure Storage API 兼容的服务器，用于本地调试
    Azure Functions。
- en: Make sure you have the **Azure Functions Core Tools,** and the **.NET SDK**
    installed if you are using C#.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保你已经安装了 **Azure Functions Core Tools** 和 **.NET SDK**，如果你使用的是 C#。
- en: 'Once you have set up your environment, you will have something like the following
    figure:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你设置了你的环境，你将会有以下类似的结构：
- en: '![Figure 1.6: VS Code ready to write Azure functions](img/B31916_01_6.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.6：VS Code 准备编写 Azure 函数](img/B31916_01_6.png)'
- en: 'Figure 1.6: VS Code ready to write Azure functions'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.6：VS Code 准备编写 Azure 函数
- en: 'Once all the prerequisites are set, in the **Azure** tab, go to **WORKSPACE**
    and select **Create Function Project…**. Next, perform the following steps:'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦所有先决条件都设置好了，在 **Azure** 选项卡中，转到 **WORKSPACE** 并选择 **创建函数项目…**。接下来，执行以下步骤：
- en: Choose a location for your project and select your preferred programming language.
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择你的项目位置并选择你首选的编程语言。
- en: Follow the prompts to create a new HTTP trigger function. You can name it `Health`
    and call the namespace `CarShare.Function.`
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按提示创建一个新的 HTTP 触发函数。你可以将其命名为 `Health` 并调用命名空间 `CarShare.Function.`。
- en: You will need to decide on the **access rights** for this function. For this
    example, you can choose **Anonymous**. We will discuss each of the security options
    later.
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要决定这个函数的 **访问权限**。在这个例子中，你可以选择 **匿名**。我们稍后会讨论每个安全选项。
- en: Open the newly created function file. You will see a template code for an HTTP
    trigger function.
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开新创建的函数文件。你会看到一个 HTTP 触发函数的模板代码。
- en: Modify the function to meet your specific requirements, which, in this case,
    means to respond if the function is working properly. Notice that this is a `GET`
    and `POST` function. For the purpose we have defined, you can change the code
    to only be an HTTP `GET` function.
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改函数以满足你的特定要求，在这种情况下，意味着如果函数运行正常则进行响应。注意这是一个 `GET` 和 `POST` 函数。根据我们的定义，你可以将代码更改为仅作为
    HTTP `GET` 函数。
- en: Save your changes.
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存你的更改。
- en: For running and debugging locally, you just need to press *F5* or navigate to
    **Run** > **Start Debugging**. VS Code will start the Azure Functions host, and
    you will see the function URL in the output window. Then, you can use tools such
    as **Postman** or your browser to send HTTP requests to your function endpoint.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本地运行和调试，你只需按 *F5* 或导航到 **运行** > **开始调试**。VS Code 将启动 Azure Functions 主机，你将在输出窗口中看到函数
    URL。然后，你可以使用 **Postman** 或你的浏览器等工具向你的函数端点发送 HTTP 请求。
- en: It is worth mentioning that for running Azure Functions locally, you will need
    to allow PowerShell scripts to run without being digitally signed. This can be
    a problem depending on the security policies provided by your company.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，为了在本地运行 Azure Functions，你需要允许 PowerShell 脚本在没有数字签名的情况下运行。这可能会根据你公司提供的安全策略成为一个问题。
- en: Once the function is running, you can consider it the same as when you work
    on other types of software projects, and even the debugging will work properly.
    The trigger will depend on the function you set. The following figure shows the
    code of the function program, where you can see the response to the caller with
    a status of `200` by using `OkObjectResult` with the message “Yes! The function
    is live!” and the UTC time.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦函数开始运行，你可以将其视为与其他类型的软件项目工作相同，甚至调试也能正常工作。触发器将取决于你设置的函数。以下图显示了函数程序的代码，你可以看到使用
    `OkObjectResult` 和消息“是的！函数正在运行！”以及 UTC 时间对调用者的响应。
- en: '![Figure 1.7: Azure Functions running locally](img/B31916_01_7.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.7：本地运行的 Azure Functions](img/B31916_01_7.png)'
- en: 'Figure 1.7: Azure Functions running locally'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.7：本地运行的 Azure Functions
- en: As you have created a function app connected to a GitHub repository with the
    deployment process handled by GitHub Actions, once you commit and pull the code
    to GitHub, GitHub Actions will automatically build the function and deploy it
    as a function app.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你已经创建了一个与 GitHub 仓库连接的函数应用，并且部署过程由 GitHub Actions 处理，一旦你将代码提交并拉取到 GitHub，GitHub
    Actions 将自动构建函数并将其作为函数应用部署。
- en: '![Figure 1.8: Function app deployed using GitHub Actions](img/B31916_01_8.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.8：使用 GitHub Actions 部署的函数应用](img/B31916_01_8.png)'
- en: 'Figure 1.8: Function app deployed using GitHub Actions'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.8：使用 GitHub Actions 部署的函数应用
- en: It is not the purpose of this book to discuss CI/CD strategies, but you will
    certainly need to think about them when it comes to professional development.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的目的不是讨论 CI/CD 策略，但在专业开发时，你肯定需要考虑它们。
- en: The result of this deployment can be checked in the Azure portal, where the
    function developed will be available in the list of functions. It is worth noting
    that a function app can handle more than one function at the same time.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '可以在 Azure 门户中检查此部署的结果，其中开发的函数将在函数列表中可用。值得注意的是，一个函数应用可以同时处理多个函数。 '
- en: '![Figure 1.9: Health function available in the function app](img/B31916_01_9.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.9：函数应用中可用的健康功能](img/B31916_01_9.png)'
- en: 'Figure 1.9: Health function available in the function app'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.9：函数应用中可用的健康功能
- en: The function can be executed as soon as it is published to Azure. As a result
    of the sample function, as this was developed as a `GET` HTTP trigger, we can
    check that the function is working by accessing the API in the web browser.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 函数一旦发布到 Azure，就可以立即执行。由于这个示例函数是一个 `GET` HTTP 触发器开发的，我们可以通过在网页浏览器中访问 API 来检查函数是否工作。
- en: '![Figure 1.10: Health function running properly](img/B31916_01_10.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.10：健康功能运行正常](img/B31916_01_10.png)'
- en: 'Figure 1.10: Health function running properly'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.10：健康功能运行正常
- en: As you don’t have a live CI/CD pipeline, you can also publish your Azure function
    directly from the VS Code IDE. To do so, you may use the Azure Functions extension
    provided by VS Code.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你没有实时的 CI/CD 管道，你也可以直接从 VS Code IDE 发布你的 Azure 函数。为此，你可以使用 VS Code 提供的 Azure
    Functions 扩展。
- en: 'There are a few steps to follow in this case. The first one is to select the
    action to deploy the function in the VS Code prompt:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在此情况下，需要遵循几个步骤。第一步是在 VS Code 提示中选中部署函数的操作：
- en: '![Figure 1.11: Deploying to Azure using VS Code](img/B31916_01_11.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.11：使用 VS Code 部署到 Azure](img/B31916_01_11.png)'
- en: 'Figure 1.11: Deploying to Azure using VS Code'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.11：使用 VS Code 部署到 Azure
- en: 'After that, you will need to select the corresponding subscription and the
    name of the new function app you want to deploy, considering a new function:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，你需要选择相应的订阅以及你想要部署的新函数应用的名称，考虑到一个新的函数：
- en: '![Figure 1.12: Creating a new function app](img/B31916_01_12.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.12：创建新的函数应用](img/B31916_01_12.png)'
- en: 'Figure 1.12: Creating a new function app'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.12：创建新的函数应用
- en: 'The current process proposed by the extension is to deploy an Azure function
    in the Flex Consumption plan. There are some specific locations where this option
    is available:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展程序提出的当前流程是在灵活消耗计划中部署 Azure 函数。有一些特定的位置可以提供此选项：
- en: '![Figure 1.13: Defining the location for the new function app](img/B31916_01_13.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.13：定义新函数应用的位置](img/B31916_01_13.png)'
- en: 'Figure 1.13: Defining the location for the new function app'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.13：定义新函数应用的位置
- en: The definition of the runtime stack is also important to get the most out of
    your Azure function. In the case of the Flex Consumption plan, you will also be
    asked for the memory usage in the instance and the maximum number of instances
    available for parallel calls.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时堆栈的定义对于充分利用你的 Azure 函数也很重要。在灵活消耗计划的情况下，你还将被要求输入实例的内存使用量和可用于并行调用的最大实例数。
- en: '![Figure 1.14: Defining the runtime stack for the new function app](img/B31916_01_14.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.14：定义新函数应用的运行时堆栈](img/B31916_01_14.png)'
- en: 'Figure 1.14: Defining the runtime stack for the new function app'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.14：定义新函数应用的运行时堆栈
- en: Once these sets are defined, your Azure function will be deployed correctly.
    You can also redeploy functions using the same technique later, without needing
    to recreate the Azure function app every single time.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦定义了这些集合，你的 Azure 函数将正确部署。你还可以使用相同的技术重新部署函数，而不需要每次都重新创建 Azure 函数应用。
- en: '![Figure 1.15: Function app properly deployed](img/B31916_01_15.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.15：正确部署的函数应用](img/B31916_01_15.png)'
- en: 'Figure 1.15: Function app properly deployed'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.15：函数应用正确部署
- en: Last, but not least, the Azure portal also gives you the possibility to monitor
    and manage the functions deployed. Once this process is done, you can monitor
    your function’s performance and log. By using the **Monitoring** section of your
    function app, you can view execution details, track failures, and analyze performance
    metrics.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，Azure 门户还为您提供了监控和管理已部署函数的可能性。一旦完成此过程，您就可以监控您函数的性能和日志。通过使用您函数应用的 **监控**
    部分，您可以查看执行细节，跟踪失败，并分析性能指标。
- en: Coding Azure functions using Visual Studio
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Visual Studio 编码 Azure 函数
- en: Visual Studio is one of the best options for developing Azure functions. To
    do so, you must set **Azure Development Workload**, which will help enable Azure
    functions development natively on the platform.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio 是开发 Azure 函数的最佳选择之一。为了做到这一点，您必须设置 **Azure 开发工作负载**，这将有助于在平台上原生启用
    Azure 函数开发。
- en: Once you have done this, the same project you created using VS Code will be
    available for you to use at Visual Studio. The difference between VS Code and
    Visual Studio in this case is that Visual Studio will provide an easier setup
    environment for debugging and a lot of visual dialogs that can facilitate your
    decisions.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成此操作，您使用 VS Code 创建的项目将在 Visual Studio 中可用。在这种情况下，VS Code 和 Visual Studio
    的区别在于，Visual Studio 将提供一个更易于设置的环境用于调试，以及许多可以促进您决策的视觉对话框。
- en: '![Figure 1.16: Creating a new Azure function for the function app](img/B31916_01_16.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.16：为 Function app 创建新的 Azure 函数](img/B31916_01_16.png)'
- en: 'Figure 1.16: Creating a new Azure function for the function app'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.16：为 Function app 创建新的 Azure 函数
- en: These dialogs simplify the development process, so if you have the opportunity
    to use Visual Studio, this will be the best option.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这些对话框简化了开发过程，因此如果您有机会使用 Visual Studio，这将是最优选择。
- en: '![Figure 1.17: Defining the Azure function trigger type](img/B31916_01_17.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.17：定义 Azure 函数触发类型](img/B31916_01_17.png)'
- en: 'Figure 1.17: Defining the Azure function trigger type'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.17：定义 Azure 函数触发类型
- en: Once again, when you create a Function Apps project, you can add more than one
    function to this project, which is extremely useful for microservices solutions.
    In the following example, we have added a second HTTP trigger function called
    `Status` to help you understand this possibility and to let you see how these
    functions work together in a single function app.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，当您创建一个 Function Apps 项目时，您可以向该项目添加多个函数，这对于微服务解决方案来说非常有用。在下面的示例中，我们添加了一个名为
    `Status` 的第二个 HTTP 触发函数，以帮助您理解这种可能性，并让您看到这些函数如何在单个 Function App 中协同工作。
- en: '![Figure 1.18: Function app with more than one function](img/B31916_01_18.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.18：具有多个函数的 Function app](img/B31916_01_18.png)'
- en: 'Figure 1.18: Function app with more than one function'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.18：具有多个函数的 Function app
- en: It is important to mention that the same code developed initially using VS Code
    can continue to be maintained using Visual Studio, and vice versa. This is great
    because you can have different developers in the same team using the two environments
    and this will not cause a problem, at least not with Function Apps projects.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要提到，最初使用 VS Code 开发的相同代码可以继续使用 Visual Studio 进行维护，反之亦然。这很好，因为您可以让同一团队中的不同开发者使用这两个环境，而这不会引起问题，至少在
    Function Apps 项目中不会。
- en: Visual Studio is an excellent option for developing Azure functions due to its
    comprehensive setup environment for debugging and integrated visual dialogs, which
    make development easier. Developers can switch between VS Code and Visual Studio
    without compatibility issues, facilitating team collaboration. Multiple functions,
    such as HTTP triggers, can be in a single Function Apps project, supporting microservices
    solutions.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 由于其全面的调试设置环境和集成的视觉对话框，Visual Studio 是开发 Azure 函数的绝佳选择。开发者可以在 VS Code 和 Visual
    Studio 之间切换，而不会出现兼容性问题，从而促进团队协作。HTTP 触发等多个函数可以位于单个 Function Apps 项目中，支持微服务解决方案。
- en: Summary
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter explored the evolution of cloud platforms and the rise of modern
    technologies, emphasizing the importance of focusing on solutions rather than
    just technologies. The chapter highlighted the advantages of serverless computing,
    such as scalability, reliability, security, and cost-effectiveness, while also
    addressing potential challenges. It discussed how serverless architecture can
    deliver microservices and the benefits of using Microsoft Azure Functions for
    building and deploying serverless applications. The chapter also provided practical
    guidance on creating and managing Azure functions using tools such as VS Code
    and Visual Studio.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 本章探讨了云平台的演变和现代技术的兴起，强调了关注解决方案而不是仅仅关注技术的重要性。本章强调了无服务器计算的优势，如可扩展性、可靠性、安全性和成本效益，同时也讨论了潜在的挑战。它讨论了无服务器架构如何交付微服务以及使用Microsoft
    Azure Functions构建和部署无服务器应用程序的好处。本章还提供了使用VS Code和Visual Studio等工具创建和管理Azure函数的实用指南。
- en: In the next chapter, we will discuss how microservices applications can be defined
    and designed in enterprise scenarios.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论如何在企业场景中定义和设计微服务应用程序。
- en: Questions
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What are the main advantages of using serverless computing as mentioned in the
    chapter?
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 本章中提到使用无服务器计算的主要优势是什么？
- en: Serverless computing provides several advantages, including automatic scaling,
    cost-efficiency through a pay-as-you-go model, and reduced infrastructure management.
    Developers do not need to worry about provisioning or maintaining servers, which
    allows them to focus on delivering solutions faster and more efficiently.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器计算提供了几个优势，包括自动扩展、按使用付费的模型带来的成本效益以及减少基础设施管理。开发者无需担心提供或维护服务器，这使他们能够更快、更有效地交付解决方案。
- en: It also promotes software development acceleration by letting developers focus
    solely on the code. Additionally, the environment’s reliability and security are
    managed by the cloud provider, enabling scalable and sustainable solutions without
    sacrificing performance or safety.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 它还通过让开发者专注于代码来促进软件开发加速。此外，云服务提供商管理环境的可靠性和安全性，从而在不牺牲性能或安全性的情况下提供可扩展和可持续的解决方案。
- en: How can serverless architecture be used to deliver microservices?
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何使用无服务器架构来交付微服务？
- en: Serverless architecture supports the microservices model by allowing developers
    to create independent, small, and reusable functions that represent distinct business
    capabilities. These functions can be deployed, tested, and scaled independently,
    following the core principles of microservices.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器架构通过允许开发者创建独立、小型且可重用的函数来支持微服务模型，这些函数代表不同的业务能力。这些函数可以独立部署、测试和扩展，遵循微服务的核心原则。
- en: The chapter gave an example of a user authentication microservice, where separate
    functions such as registration, login, and password reset were implemented within
    a single serverless project. This flexibility enhances the modularity and maintainability
    of applications built using microservices principles.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 本章提供了一个用户身份验证微服务的例子，其中注册、登录和密码重置等单独的功能在一个无服务器项目中实现。这种灵活性增强了使用微服务原则构建的应用程序的模块化和可维护性。
- en: What are the key triggers available in Azure Functions and their purposes?
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Azure Functions中可用的关键触发器及其用途是什么？
- en: Azure Functions can be triggered by a variety of events. The main triggers are
    HTTP trigger (for web requests), timer trigger (scheduled tasks), Blob Storage
    trigger (file uploads or changes), Queue Storage trigger (message processing),
    Event Grid trigger (event handling from Azure services), Service Bus trigger (messaging
    between applications), and Cosmos DB trigger (database change processing).
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Functions可以通过各种事件触发。主要触发器包括HTTP触发器（用于Web请求）、定时触发器（计划任务）、Blob存储触发器（文件上传或更改）、队列存储触发器（消息处理）、事件网格触发器（从Azure服务处理事件）、服务总线触发器（应用程序之间的消息传递）和Cosmos
    DB触发器（数据库更改处理）。
- en: Each trigger allows developers to build event-driven applications with flexibility
    and scalability. For example, timer triggers are ideal for recurring tasks, while
    HTTP triggers are commonly used for APIs and webhooks. This variety of triggers
    supports the development of diverse and responsive solutions.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 每个触发器都允许开发者以灵活性和可扩展性构建事件驱动应用程序。例如，定时触发器非常适合重复性任务，而HTTP触发器通常用于API和webhooks。这种触发器的多样性支持开发多样化的响应式解决方案。
- en: What steps are necessary to create a serverless application in the Azure portal?
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Azure门户中创建无服务器应用需要哪些步骤？
- en: To create a serverless application in Azure, the developer must log in to the
    Azure portal and create a new Function App resource. During the setup, they need
    to choose the hosting plan (e.g., Consumption plan), define project details such
    as region, runtime stack, storage account, and networking options, and enable
    monitoring via Application Insights.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Azure中创建无服务器应用，开发者必须登录到Azure门户并创建一个新的函数应用资源。在设置过程中，他们需要选择托管计划（例如，消费计划），定义项目详情，如区域、运行时堆栈、存储账户和网络选项，并通过应用程序洞察启用监控。
- en: After reviewing the configurations, the developer clicks **Create** to deploy
    the function app. Once deployed, they can navigate to the resource, start coding,
    and manage it directly from the portal or via development tools such as Visual
    Studio or VS Code.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在审查完配置后，开发者点击**创建**来部署函数应用。一旦部署完成，他们可以直接从门户或通过开发工具如Visual Studio或VS Code导航到资源，开始编码并直接管理它。
- en: How does Azure Functions integrate with other Azure services and third-party
    APIs?
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Azure函数如何与其他Azure服务和第三方API集成？
- en: Azure Functions integrates seamlessly with various Azure services such as Azure
    SQL, Cosmos DB, Event Grid, Service Bus, and Logic Apps. This enables developers
    to build complex workflows, automate tasks, and create highly responsive applications
    using existing Azure infrastructure.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: Azure函数与各种Azure服务无缝集成，如Azure SQL、Cosmos DB、Event Grid、Service Bus和Logic Apps。这使得开发者能够利用现有的Azure基础设施构建复杂的工作流、自动化任务并创建高度响应的应用程序。
- en: Additionally, Azure Functions can connect to third-party APIs and services,
    supporting hybrid architectures. This integration capability allows developers
    to extend their applications across platforms, enhancing the flexibility and scalability
    of cloud-native solutions.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Azure函数还可以连接到第三方API和服务，支持混合架构。这种集成能力允许开发者扩展其应用程序到多个平台，增强云原生解决方案的灵活性和可扩展性。
- en: Further reading
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Azure Functions documentation: [https://learn.microsoft.com/en-us/azure/azure-functions/](https://learn.microsoft.com/en-us/azure/azure-functions/)'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure函数文档：[https://learn.microsoft.com/en-us/azure/azure-functions/](https://learn.microsoft.com/en-us/azure/azure-functions/)
- en: 'Azure API Management documentation: [https://learn.microsoft.com/en-us/azure/api-management/](https://learn.microsoft.com/en-us/azure/api-management/)'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure API管理文档：[https://learn.microsoft.com/en-us/azure/api-management/](https://learn.microsoft.com/en-us/azure/api-management/)
- en: 'Azure Application Gateway documentation: [https://learn.microsoft.com/en-us/azure/application-gateway/overview](https://learn.microsoft.com/en-us/azure/application-gateway/overview)'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure应用程序网关文档：[https://learn.microsoft.com/en-us/azure/application-gateway/overview](https://learn.microsoft.com/en-us/azure/application-gateway/overview)
- en: Join our community on Discord
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的Discord社区
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们的社区Discord空间，与作者和其他读者进行讨论：
- en: '[https://packt.link/PSMCSharp](https://packt.link/PSMCSharp)'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/PSMCSharp](https://packt.link/PSMCSharp)'
- en: '![A qr code with black squares  AI-generated content may be incorrect.](img/B31916_Discord-QR-Code.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![一个带有黑色方块的二维码 AI生成的内容可能不正确。](img/B31916_Discord-QR-Code.png)'
