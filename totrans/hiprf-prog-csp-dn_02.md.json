["```cs\n    git clone https://github.com/dotnet/roslyn.git\n    ```", "```cs\n    cd Roslyn\n    ```", "```cs\n    restore.cmd\n    ```", "```cs\n    build.cmd\n    ```", "```cs\n    test.cmd\n    ```", "```cs\n    csc /langversion:?\n    ```", "```cs\ncsc /help\ncsc -langversion:10.0 /out:HelloWorld.exe Program.cs\ncsc HelloWorld\n```", "```cs\nusing System;\n```", "```cs\nnamespace HelloWorld\n```", "```cs\n{\n```", "```cs\nclass Program\n```", "```cs\n{\n```", "```cs\n            static void Main(string[] args)\n```", "```cs\n            {\n```", "```cs\n                  Console.WriteLine(\"Hello, World!\");\n```", "```cs\n            }\n```", "```cs\n}\n```", "```cs\n}\n```", "```cs\nSystem.Console.WriteLine(\"Hello, World\");\n```", "```cs\nnamespace CH01_Books\n```", "```cs\n{\n```", "```cs\n    internal class Book\n```", "```cs\n    {\n```", "```cs\n        public string Title { get; init; }\n```", "```cs\n        public string Author { get; init; }\n```", "```cs\n    }\n```", "```cs\n}\n```", "```cs\nusing System;\n```", "```cs\nusing CH01_Books;\n```", "```cs\nvar bookName = new Book { Title = \"Made up book name\", \n```", "```cs\n    Author = \"Made Up Author\" };\n```", "```cs\nConsole.WriteLine($\"{bookName.Title} is written by \n```", "```cs\n    {bookName.Author}. Well worth reading!\");\n```", "```cs\ninternal record Book\n```", "```cs\n{\n```", "```cs\npublic string Title { get; init; }\n```", "```cs\n     public string Author { get; init; }\n```", "```cs\n}\n```", "```cs\n    using System;\n    using CH01_Records;\n    var bookOne = new Book { \n        Title = \"Made Up Book\", \n        Author = \"Made Up Author\n    };\n    var bookTwo = bookOne with { \n        Title = \"And Another Made Up Book\"\n    };\n    var bookThree = bookTwo with { \n        Title = \"Yet Another Made Up Book\"\n    };\n    var bookFour = bookThree with { \n        Title = \"And Yet Another Made Up Book: Part 1\",\n    };\n    var bookFive = bookFour with { \n        Title = \"And Yet Another Made Up Book: Part 2\"\n    };\n    var bookSix = bookFive with { \n        Title = \"And Yet Another Made Up Book: Part 3\"\n    };\n    Console.WriteLine($\"Some of {bookThree.Author}'s \n        books include:\\n\");\n    Console.WriteLine($\"- {bookOne.Title}\");\n    Console.WriteLine($\"- {bookTwo.Title}\");\n    Console.WriteLine($\"- {bookThree.Title}\");\n    Console.WriteLine($\"- {bookFour.Title}\");\n    Console.WriteLine($\"- {bookFive.Title}\");\n    Console.WriteLine($\"- {bookSix.Title}\");\n    Console.WriteLine($\"\\nMy favourite book by {bookOne.\n        Author} is {bookOne.Title}.\");\n    ```", "```cs\n        internal record Publisher\n        {\n            public string PublisherName { get; init; }\n        }\n    ```", "```cs\n        internal record Book : Publisher\n        {\n            public string Title { get; init; }\n            public string Author { get; init; }\n        }\n    ```", "```cs\n    var bookOne = new Book { \n        Title = \"Made Up Book\", \n        Author = \"Made Up Author\",\n        PublisherName = \"Made Up Publisher Ltd.\"\n    };\n    ```", "```cs\n    Console.WriteLine($\"These books were originally published \n        by {bookSix.PublisherName}.\");\n    ```", "```cs\n    var book = bookThree with { Title = \"Made Up Book\" };\n    var booksEqual = Object.Equals(book, bookOne) ? \n        \"Yes\" : \"No\";\n    Console.WriteLine($\"Are {book.Title} and \n        {bookOne.Title} equal? {booksEqual}\"); \n    ```", "```cs\n        public record Product\n        {\n            readonly string Name;\n            readonly string Description;\n            public Product(string name, string \n                description) \n                => (Name, Description) = (name, \n                description);\n            public void Deconstruct(out string name, out \n                string description) \n                => (name, description) = (Name, \n                    Description);\n        }\n    ```", "```cs\n    var ide = new Product(\"Awesome-X\", \"Advanced Multi-\n        Language IDE\");\n    var (product, description) = ide;\n    Console.WriteLine($\"The product called {product} is an \n        {description}.\");\n    ```", "```cs\n        internal record Product\n        {\n            public string Name { get; init; }\n            public string Description { get; init; }\n            public decimal UnitPrice { get; init; }\n        }\n    ```", "```cs\n        internal record OrderItem : Product\n        {\n            public int QuantityOrdered { get; init; }\n        }\n    ```", "```cs\n    var orderOne = new OrderItem {\n            Name = \"50-80mm Scottish Cobbles\", \n            Description = \"These rounded stones are \n              frequently used for edging paths and to add \n                interest to gardens\", \n            QuantityOrdered = 4, \n            UnitPrice = 199 \n    };\n    ```", "```cs\n    static int GetDiscount(object order) =>\n        order switch\n        {\n            OrderItem o when o.QuantityOrdered == 0 => \n                throw \n              new ArgumentException(\"Quantity must be \n                  greater than zero.\"),\n            OrderItem o when o.QuantityOrdered > 20 => 30,\n            OrderItem o when o.QuantityOrdered < 5 => 10,\n            OrderItem => 20,\n            _ => throw new ArgumentException(\"Not a known \n                OrderItem!\", nameof(order))\n        };\n    ```", "```cs\n    Console.WriteLine($\"The discount for Order One is \n        {GetDiscount(orderOne)}%.\");\n    Console.WriteLine($\"The discount for Order Two is \n        {GetDiscount(orderTwo)}%.\");\n    Console.WriteLine($\"The discount for Order Three is \n        {GetDiscount(orderThree)}%.\");\n    ```", "```cs\n    static int GetDiscountRelational(OrderItem orderItem) \n        => orderItem.QuantityOrdered switch\n        {\n            < 1 => throw new ArgumentException(\"Quantity \n                must be greater than zero.\"),\n            > 20 => 30,\n            < 5 => 10,\n            _ => 20\n        };\n    ```", "```cs\n    Console.WriteLine($\"The discount for Order One is \n        {GetDiscountRelational(orderOne)}%.\");\n    Console.WriteLine($\"The discount for Order Two is \n        {GetDiscountRelational(orderTwo)}%.\");\n    Console.WriteLine($\"The discount for Order Three is \n        {GetDiscountRelational(orderThree)}%.\");\n    ```", "```cs\n    static int GetDiscountLogical(OrderItem orderItem) =>\n        orderItem.QuantityOrdered switch\n        {\n            < 1 => throw new ArgumentException(\"Quantity \n                must be greater than zero.\"),\n            > 0 and < 5 => 10,\n            > 4 and < 21 => 20,\n            > 20 => 30\n        };\n    ```", "```cs\n    Console.WriteLine($\"The discount for Order One is \n        {GetDiscountLogical(orderOne)}%.\");\n    Console.WriteLine($\"The discount for Order Two is \n        {GetDiscountLogical(orderTwo)}%.\");\n    Console.WriteLine($\"The discount for Order Three is \n        {GetDiscountLogical(orderThree)}%.\");\n    ```", "```cs\n        public record Student\n        {\n            private readonly string _firstName;\n            private readonly string _lastName;\n            public Student(string firstName, string \n                lastName)\n            {\n                _firstName = firstName;\n                _lastName = lastName;\n            }\n            public void Deconstruct(out string firstName, \n                out string lastName)\n                => (firstName, lastName) = (_firstName, \n                    _lastName);\n        }\n    ```", "```cs\n    Student jenniferAlbright = new (\"Jennifer\", \n        \"Albright\");\n    var studentList = new List<Student>\n    {\n        new (\"Jennifer\", \"Albright\"),\n        new (\"Kelly\", \"Charmichael\"),\n        new (\"Lydia\", \"Braithwait\")\n    };\n    var (firstName, lastName) = jenniferAlbright;\n    Console.WriteLine($\"Student: {lastName}, {firstName}\");\n    (firstName, lastName) = studentList.Last();\n    Console.WriteLine($\"Student: {lastName}, {firstName}\");\n    ```", "```cs\nobject[] covariantArray = new string[] { \"alpha\", \"beta\", \n```", "```cs\n    \"gamma\", \"delta\" };\n```", "```cs\npublic interface ICovariant<out T> { }\n```", "```cs\npublic class Covariant<T> : ICovariant<T> { }\n```", "```cs\npublic class Person { }\n```", "```cs\npublic class Teacher : Person { }\n```", "```cs\npublic class Student : Person { }\n```", "```cs\npublic class CovarianceExample\n```", "```cs\n{\n```", "```cs\npublic void CovariantMethod(ICovariant<Person> person)\n```", "```cs\n{ \n```", "```cs\n      Console.WriteLine($\"The type of person passed in is \n```", "```cs\n          of type {person.GetType()}.\");\n```", "```cs\n}\n```", "```cs\n}\n```", "```cs\npublic void CovarianceAtWork()\n```", "```cs\n{\n```", "```cs\nICovariant<Person> person = new Covariant<Person>();\n```", "```cs\nICovariant<Teacher> teacher = new Covariant<Teacher>();\n```", "```cs\nICovariant<Student> student = new Covariant<Student>();\n```", "```cs\nCovariantMethod(person);\n```", "```cs\nCovariantMethod(teacher);\n```", "```cs\nCovariantMethod(student);\n```", "```cs\n}\n```", "```cs\nCovarianceExample.CovarianceAtWork();\n```", "```cs\n    using System;\n    using System.Diagnostics;\n    using System.IO;\n    ```", "```cs\n    private static string _baseDirectory = string.Empty;\n    private static string _sourceExtension = string.Empty;\n    private static string _destinationExtension = string\n        .Empty;\n    ```", "```cs\n    static void Main(string[] args)\n    {\n    Console.Write(\"Enter Source Directory: \");\n    _baseDirectory = Console.ReadLine();\n    Console.Write(\"Enter Source Extension: \");\n    _sourceExtension = Console.ReadLine();\n    Console.Write(\"Enter Destination Extension: \");\n    _destinationExtension = Console.ReadLine();\n    new Program().BatchConvert();\n    }\n    ```", "```cs\n    private void BatchConvert()\n    {\n    var directory = new DirectoryInfo(_baseDirectory);\n    ProcessFolder(directory);\n    }\n    ```", "```cs\n    private void ProcessFolder(DirectoryInfo \n        directoryInfo)\n    {\n    Console.WriteLine($\"Processing Directory: \n        {directoryInfo.FullName}\");\n    var fileInfos = directoryInfo.EnumerateFiles();\n    var directorieInfos = directoryInfo.\n        EnumerateDirectories();\n           foreach (var fileInfo in fileInfos)\n                 if (fileInfo.Extension.Replace(\".\", \"\") \n                     == sourceExtension)\n                        ConvertFile(fileInfo);\n    foreach (var dirInfo in directorieInfos)\n                 ProcessFolder(dirInfo);\n    }\n    ```", "```cs\n    private void ConvertFile(FileInfo fileInfo)\n    {    \n    }\n    ```", "```cs\n    var timeout = 10000;\n    var source = $\"\\\"{fileInfo.FullName}\\\"\";\n    var destination = $\"\\\"{fileInfo.FullName.Replace\n         (_sourceExtension, _destinationExtension)}\\\"\";\n    ```", "```cs\n    if (File.Exists(fileInfo.FullName.Replace\n         (_sourceExtension, _destinationExtension)))\n    {\n    Console.WriteLine($\"Unprocessed: {fileInfo.FullName}\");\n           return;\n    }\n    ```", "```cs\n    Console.WriteLine($\"Converting file: {fileInfo.FullName}\n        from {_sourceExtension} to {_destination\n            Extension}.\");\n    using var ffmpeg = new Process\n    {\n    StartInfo = {\n                 FileName = @\"C:\\Tools\\ffmpeg\\bin\n                    \\ffmpeg.exe\",\n                  Arguments = $\"-i {source} \n                    {destination}\",\n                  UseShellExecute = false,\n                  RedirectStandardOutput = true,\n                  RedirectStandardError = true,\n                  CreateNoWindow = true\n    }\n    };\n    ffmpeg.EnableRaisingEvents = false;\n    ffmpeg.OutputDataReceived += (s, e) => Debug.WriteLine\n         ($\"Debug: e.Data\");\n    ffmpeg.ErrorDataReceived += (s, e) => Debug.WriteLine\n         ($@\"Error: {e.Data}\");\n    ffmpeg.Start();\n    ffmpeg.BeginOutputReadLine();\n    ffmpeg.BeginErrorReadLine();\n    ffmpeg.WaitForExit(timeout);\n    ```", "```cs\n    dotnet publish --framework netcoreapp3.1 -\n        p:PublishSingleFile=true --runtime win10-x64\n    ```"]