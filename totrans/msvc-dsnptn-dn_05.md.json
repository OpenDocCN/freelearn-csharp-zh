["```cs\npublic record CreateAppointmentCommand (int\n  AppointmentTypeId, Guid DoctorId, Guid PatientId, Guid\n    RoomId, DateTime Start, DateTime End, string Title):\n      IRequest<string>;\n```", "```cs\npublic class CreateAppointmentHandler :\n  IRequestHandler<CreateAppointmentCommand, string>\n{\n    private readonly IAppointmentRepository _repo;\n    public CreateAppointmentHandler(IAppointmentRepository\n      repo /* Any Other Dependencies */)\n{\n        _repo = repo\n        /* Any Other Dependencies */\n      };\n    public async Task<string> Handle\n      (CreateAppointmentCommand request, CancellationToken\n         cancellationToken)\n    {\n        // Handle Pre-checks and Validations Here\n        var newAppointment = new Appointment\n        (\n            Guid.NewGuid(),\n            request.AppointmentTypeId,\n            request.DoctorId,\n            request.PatientId,\n            request.RoomId,\n            request.Start,\n            request.End,\n            request.Title\n        );\n        await _repo.Add(newAppointment);\n     //Perform post creation hand-off to services bus.\n        return newAppointment.Id.ToString();\n    }\n}\n```", "```cs\nprivate readonly IMediator _mediator;\n  public AppointmentsController(IMediator mediator) =>\n    _mediator = mediator;\n```", "```cs\n[HttpPost]\npublic async Task<ActionResult> Post([FromBody]\n  CreateAppointmentCommand createAppointmentCommand)\n{\n   await _mediator.Send(createAppointmentCommand);\n   return StatusCode(201);\n}\n```", "```cs\n    [HttpPost]\n    ```", "```cs\n    public async Task<ActionResult> Post([FromBody]\n    ```", "```cs\n      AppointmentDto appointment)\n    ```", "```cs\n    {\n    ```", "```cs\n        var createAppointmentCommand = new\n    ```", "```cs\n          CreateAppointmentCommand { /* Assign all values\n    ```", "```cs\n            here*/}\n    ```", "```cs\n       await _mediator.Send(createAppointmentCommand);\n    ```", "```cs\n       return StatusCode(201);\n    ```", "```cs\n    }\n    ```", "```cs\n    // New Command Model with DTO property\n    ```", "```cs\n      public record CreateAppointmentCommand\n    ```", "```cs\n        (AppointmentDto Appointment) : IRequest<string>;\n    ```", "```cs\n    // New Post method\n    ```", "```cs\n    [HttpPost]\n    ```", "```cs\n    public async Task<ActionResult> Post([FromBody]\n    ```", "```cs\n      AppointmentDto appointment)\n    ```", "```cs\n    {\n    ```", "```cs\n        var createAppointmentCommand = new\n    ```", "```cs\n          CreateAppointmentCommand { Appointment =\n    ```", "```cs\n            appointment; }\n    ```", "```cs\n       await _mediator.Send(createAppointmentCommand);\n    ```", "```cs\n       return StatusCode(201);\n    ```", "```cs\n    }\n    ```", "```cs\npublic record GetAppointmentsQuery(): Irequest\n  <List<Appointment>>;\npublic record GetAppointmentByIdQuery(string Id):\n  IRequest<AppointmentDetailsDto>;\n```", "```cs\npublic class GetAppointmentsHandler : IrequestHandler\n  <GetAppointmentsQuery, List<Appointment>>\n    {\n        private readonly IAppointmentRepository _repo;\n        public GetAppointmentsHandler\n          (IAppointmentRepository repo) => _repo = repo;\n        public async Task<List<Appointment>>\n           Handle(GetAppointmentsQuery request,\n             CancellationToken cancellationToken)\n        {\n            return await _repo.GetAll();\n        }\n    }\n```", "```cs\npublic class GetAppointmentByIdHandler :\n  IRequestHandler<GetAppointmentByIdQuery,\n    AppointmentDetailsDto>\n    {\n        private readonly IAppointmentRepository _repo;\n        public GetAppointmentByIdHandler\n          (IAppointmentRepository repo)\n        {\n            _repo = repo;\n        }\n        public async Task<AppointmentDetailsDto>\n          Handle(GetAppointmentByIdQuery request,\n            CancellationToken cancellationToken)\n        {\n            // Carry out all query operations and convert\n            the result to the expected return type\n            return new AppointmentDetailsDto{ /* Fill model\n              with appropriate values */ };\n        }\n    }\n```", "```cs\n[HttpGet]\npublic async Task<ActionResult<Appointment>> Get()\n{\n    var appointments = await _mediator.Send(new\n      GetAppointmentsQuery());\n            return Ok(appointments);\n}\n[HttpGet(\"{id}\")]\npublic async Task<ActionResult<AppointmentDetailsDto>>\n    Get(string id)\n{\n  var appointment = await _mediator.Send(new\n    GetAppointmentByIdQuery(id));\n            return Ok(appointment);\n}\n```"]