["```cs\n<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n<ContentPage   \n\n    x:Class=\"SpeechTalk.Pages.MainPage\"> \n\n    <ContentPage.Content> \n\n    <Grid x:Name=\"Grid\" RowSpacing=\"0\" Padding=\"10, 10, 10, 10\" > \n        <Grid.RowDefinitions> \n            <RowDefinition Height=\"Auto\"/> \n            <RowDefinition Height=\"Auto\"/> \n            <RowDefinition Height=\"Auto\"/> \n        </Grid.RowDefinitions> \n\n        <Grid.ColumnDefinitions> \n            <ColumnDefinition Width=\"*\"/> \n        </Grid.ColumnDefinitions> \n\n    </Grid>  \n\n    </ContentPage.Content> \n\n</ContentPage> \n\n```", "```cs\nx:Class=\"SpeechTalk.Pages.MainPage\" \n\n```", "```cs\npublic App () \n        { \n            // The root page of your application \n            MainPage = new ContentPage { \n                Content = new StackLayout { \n                    VerticalOptions = LayoutOptions.Center, \n                    Children = { \n                        new Label { \n                            XAlign = TextAlignment.Center, \n                            Text = \"Welcome to Xamarin Forms!\" \n                        } \n                    } \n                } \n            }; \n        } \n\n```", "```cs\npublic App () \n        { \n            MainPage = new MainPage (); \n        } \n\n```", "```cs\n    [Register (\"AppDelegate\")] \n    public partial class AppDelegate : global::Xamarin.Forms.Platform.iOS.FormsApplicationDelegate \n    { \n        public override bool FinishedLaunching (UIApplication app, NSDictionary options) \n        { \n            global::Xamarin.Forms.Forms.Init (); \n\n            LoadApplication (new App ()); \n\n            return base.FinishedLaunching (app, options); \n        } \n    } \n\n```", "```cs\nglobal::Xamarin.Forms.Platform.iOS.FormsApplicationDelegate \n\n```", "```cs\n[Activity (Label = \"SpeechTalk.Droid\", Icon = \"@drawable/icon\", MainLauncher = true, ConfigurationChanges = ConfigChanges.ScreenSize | ConfigChanges.Orientation)] \n    public class MainActivity : global::Xamarin.Forms.Platform.Android.FormsApplicationActivity \n    { \n        protected override void OnCreate (Bundle bundle) \n        { \n            base.OnCreate (bundle); \n\n            global::Xamarin.Forms.Forms.Init (this, bundle); \n\n            LoadApplication (new App ()); \n        } \n    } \n\n```", "```cs\n<forms:WindowsPhonePage \n    x:Class=\"SpeechTalk.WinPhone.MainPage\" \n\n    mc:Ignorable=\"d\" \n    Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\"> \n\n    <Grid> \n\n    </Grid> \n</forms:WindowsPhonePage> \n\n```", "```cs\npublic sealed partial class MainPage \n{ \n    public MainPage() \n    { \n        InitializeComponent(); \n\n        NavigationCacheMode = NavigationCacheMode.Required; \n        LoadApplication(new SpeechTalk.App()); \n    } \n} \n\n```", "```cs\nif (rootFrame == null) \n{ \n    // Create a Frame to act as the navigation context and navigate to the first page \n    rootFrame = new Frame(); \n\n    // TODO: change this value to a cache size that is appropriate for your application \n    rootFrame.CacheSize = 1; \n\n    Xamarin.Forms.Forms.Init(e); \n\n    if (e.PreviousExecutionState == ApplicationExecutionState.Terminated) \n    { \n        // TODO: Load state from previously suspended application \n    } \n\n    // Place the frame in the current Window \n    Window.Current.Content = rootFrame; \n}  \n\n```", "```cs\nXamarin.Forms.Forms.Init(e); \n\n```", "```cs\nrootFrame.CacheSize = 1; \n\n```", "```cs\npublic interface ITextToSpeech \n    { \n        void Speak (string msg) \n    } \n\n```", "```cs\npublic static class IoC \n    { \n        public static IContainer Container { get; private set; } \n\n        private static ContainerBuilder builder; \n\n        public static void CreateContainer()  \n        { \n            builder = new ContainerBuilder(); \n        } \n\n        public static void StartContainer() \n        { \n            Container = builder.Build(); \n        } \n\n        public static void RegisterModule(IModule module) \n        { \n            module.Register (builder); \n        } \n\n        public static void RegisterModules(IEnumerable<IModule> modules) \n        { \n            foreach (var module in modules)  \n            { \n                module.Register (builder); \n            } \n        } \n\n        public static T Resolve<T>() \n        { \n            return Container.Resolve<T> (); \n        } \n    } \n\n```", "```cs\n        public override bool FinishedLaunching (UIApplication app, NSDictionary options) \n        { \n            global::Xamarin.Forms.Forms.Init (); \n\n            InitIoC (); \n\n            LoadApplication (new App ()); \n\n            return base.FinishedLaunching (app, options); \n        } \n\n        private void InitIoC() \n        { \n            IoC.CreateContainer (); \n            IoC.RegisterModule (new IOSModule()); \n            IoC.RegisterModule (new PCLModule()); \n            IoC.StartContainer (); \n        } \n\n```", "```cs\n\n    public class IOSModule : IModule \n    { \n        public void Register(ContainerBuilder builer) \n        { \n            builer.RegisterType<TextToSpeech> ().As<ITextToSpeech> ().SingleInstance (); \n        } \n    } \n\n```", "```cs\npublic class TextToSpeech : ITextToSpeech \n    { \n        public void Speak (string msg) \n        { \n            var speechSynthesizer = new AVSpeechSynthesizer (); \n\n            var speechUtterance = new AVSpeechUtterance (msg)  \n            { \n                Rate = AVSpeechUtterance.MaximumSpeechRate / 4, \n                Voice = AVSpeechSynthesisVoice.FromLanguage (\"en-US\"), \n                Volume = 0.5f, \n                PitchMultiplier = 1.0f \n            }; \n\n            speechSynthesizer.SpeakUtterance (speechUtterance); \n        } \n    } \n\n```", "```cs\npublic abstract class ViewModelBase : INotifyPropertyChanged \n    { \n        #region Public Events \n\n        public event PropertyChangedEventHandler PropertyChanged; \n\n        #endregion  \n\n        #region Methods \n\n        protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null) \n        { \n            PropertyChangedEventHandler handler = this.PropertyChanged; \n\n            if (handler != null) \n            { \n                handler(this, new PropertyChangedEventArgs(propertyName)); \n            } \n        } \n\n        #endregion \n    } \n\n```", "```cs\npublic class MainPageViewModel : ViewModelBase \n    { \n        #region Private Properties \n\n        private readonly ITextToSpeech _textToSpeech; \n\n        private string _descriptionMessage = \"Enter text and press the 'Speak' button to start speaking\"; \n\n        private string _speakEntryPlaceholder = \"Text to speak\"; \n\n        private string _speakText = string.Empty; \n\n        private string _speakTitle = \"Speak\"; \n\n        private ICommand _speakCommand; \n\n        #endregion \n\n        #region Constructors \n\n        public MainPageViewModel (ITextToSpeech textToSpeech)  \n        { \n           _textToSpeech = textToSpeech; \n\n            _speakCommand = new Command ((c) => _textToSpeech.Speak (this.SpeakText)); \n        }  \n\n        #endregion \n    } \n\n```", "```cs\n#region Public Properties \n\n        public string DescriptionMessage \n        { \n            get \n            { \n                return _descriptionMessage; \n            } \n\n            set \n            { \n                if (value.Equals(_descriptionMessage)) \n                { \n                    return; \n                } \n\n                _descriptionMessage = value; \n                OnPropertyChanged(\"DescriptionMessage\"); \n            } \n        } \n\n        public string SpeakEntryPlaceholder \n        { \n            get \n            { \n                return _speakEntryPlaceholder; \n            } \n\n            set \n            { \n                if (value.Equals(_speakEntryPlaceholder)) \n                { \n                    return; \n                } \n\n                _speakEntryPlaceholder = value; \n                OnPropertyChanged(\"SpeakEntryPlaceholder\"); \n            } \n        } \n\n        public string SpeakText \n        { \n            get \n            { \n                return _speakText; \n            } \n\n            set \n            { \n                if (value.Equals(_speakText)) \n                { \n                    return; \n                } \n\n                _speakText = value; \n                OnPropertyChanged(\"SpeakText\"); \n            } \n        } \n\n        public string SpeakTitle \n        { \n            get \n            { \n                return _speakTitle; \n            } \n\n            set \n            { \n                if (value.Equals(_speakTitle)) \n                { \n                    return; \n                } \n\n                _speakTitle = value; \n                OnPropertyChanged(\"SpeakTitle\"); \n            } \n        } \n\n        public ICommand SpeakCommand \n        { \n            get \n            { \n                return _speakCommand; \n            } \n\n            set \n            { \n                if (value.Equals(_speakCommand)) \n                { \n                    return; \n                } \n\n                _speakCommand = value; \n                OnPropertyChanged(\"SpeakCommand\"); \n            } \n        } \n\n        #endregion \n\n```", "```cs\n<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n<ContentPage   \n\n    x:Class=\"SpeechTalk.Pages.MainPage\" \n    BackgroundColor=\"White\"> \n\n    <ContentPage.Content> \n\n    <Grid x:Name=\"Grid\" RowSpacing=\"10\" Padding=\"10, 10, 10, 10\" VerticalOptions=\"Center\"> \n        <Grid.RowDefinitions> \n            <RowDefinition Height=\"Auto\"/> \n            <RowDefinition Height=\"Auto\"/> \n            <RowDefinition Height=\"Auto\"/> \n        </Grid.RowDefinitions> \n\n        <Grid.ColumnDefinitions> \n            <ColumnDefinition Width=\"*\"/> \n        </Grid.ColumnDefinitions> \n\n        <Label x:Name=\"DesciptionLabel\" Font=\"Arial, 20\" Grid.Row=\"0\" Grid.Column=\"0\"/> \n\n        <Entry x:Name=\"SpeakEntry\" Grid.Row=\"1\" Grid.Column=\"0\"/> \n\n        <Button x:Name=\"SpeakButton\" Grid.Row=\"2\" Grid.Column=\"0\"/> \n    </Grid> \n\n    </ContentPage.Content> \n\n</ContentPage> \n\n```", "```cs\n    public class PCLModule : IModule \n    { \n        public void Register(ContainerBuilder builer) \n        { \n            builer.RegisterType<MainPageViewModel> ().SingleInstance(); \n            builer.RegisterType<MainPage> ().SingleInstance(); \n        } \n    } \n\n```", "```cs\npublic partial class MainPage : ContentPage \n    { \n        public MainPage () \n        { \n            InitializeComponent (); \n        } \n\n        public MainPage (MainPageViewModel model) \n        { \n            BindingContext = model; \n            InitializeComponent (); \n        } \n    } \n\n```", "```cs\n<Label x:Name=\"DesciptionLabel\" Text=\"{Binding DescriptionMessage}\" Font=\"Arial, 20\" Grid.Row=\"0\" Grid.Column=\"0\"/> \n\n<Entry x:Name=\"SpeakEntry\" Placeholder=\"{Binding SpeakEntryPlaceholder}\" Text=\"{Binding SpeakText, Mode=TwoWay}\" Grid.Row=\"1\" Grid.Column=\"0\"/> \n\n<Button x:Name=\"SpeakButton\" Text=\"{Binding SpeakTitle}\" Command=\"{Binding SpeakCommand}\" Grid.Row=\"2\" Grid.Column=\"0\"/>  \n\n```", "```cs\npublic class TextToSpeechDroid :  Java.Lang.Object, ITextToSpeech, Android.Speech.Tts.TextToSpeech.IOnInitListener  \n    { \n        private Android.Speech.Tts.TextToSpeech _speaker; \n\n        private string _toSpeak; \n\n        public void Speak (string msg) \n        { \n            var ctx = Forms.Context; \n            _toSpeak = msg; \n\n            if (_speaker == null)  \n            { \n                _speaker = new Android.Speech.Tts.TextToSpeech (ctx, this); \n            }  \n            else  \n            { \n                var p = new Dictionary<string,string> (); \n                speaker.Speak (_toSpeak, QueueMode.Flush, p); \n            } \n        } \n\n        #region TextToSpeech.IOnInitListener implementation \n\n        public void OnInit (OperationResult status) \n        { \n            if (status.Equals (OperationResult.Success))  \n            { \n                var p = new Dictionary<string,string> (); \n                _speaker.Speak (_toSpeak, QueueMode.Flush, p); \n            } \n        } \n\n        #endregion \n    } \n\n```", "```cs\n    public class DroidModule : IModule \n    { \n        public void Register(ContainerBuilder builer) \n        { \n            builer.RegisterType<TextToSpeechDroid> ().As<ITextToSpeech> ().SingleInstance (); \n        } \n    } \n\n```", "```cs\nprotected override void OnCreate (Bundle bundle) \n        { \n            base.OnCreate (bundle); \n\n            global::Xamarin.Forms.Forms.Init (this, bundle); \n\n            InitIoC (); \n\n            LoadApplication (new App ()); \n        } \n\n        private void InitIoC() \n        { \n            IoC.CreateContainer (); \n            IoC.RegisterModule (new DroidModule()); \n            IoC.RegisterModule (new PCLModule()); \n            IoC.StartContainer (); \n        } \n\n```", "```cs\npublic class TextToSpeechWinPhone : ITextToSpeech \n        { \n            public async void Speak(string text) \n            { \n                MediaElement mediaElement = new MediaElement (); \n\n                var synth = new Windows.Media.SpeechSynthesis. SpeechSynthesizer (); \n\n                SpeechSynthesisStream stream = await synth.SynthesizeTextToStreamAsync(text); \n\n                mediaElement.SetSource(stream, stream.ContentType); \n                mediaElement.Play(); \n            } \n        } \n\n```", "```cs\npublic MainPage() \n    { \n        InitializeComponent(); \n\n        InitIoC(); \n\n        NavigationCacheMode = NavigationCacheMode.Required; \n        LoadApplication(new SpeechTalk.App()); \n    } \n\n    private void InitIoC() \n    { \n        IoC.CreateContainer(); \n        IoC.RegisterModule(new WinPhoneModule ()); \n        IoC.RegisterModule(new PCLModule ()); \n        IoC.StartContainer(); \n    } \n\n```", "```cs\n<Label x:Name=\"DesciptionLabel\" Text=\"{Binding DescriptionMessage}\" TextColor=\"Black\" Font=\"Arial, 20\" Grid.Row=\"0\" Grid.Column=\"0\"/> \n\n<Button x:Name=\"SpeakButton\" Text=\"{Binding SpeakTitle}\" TextColor=\"Blue\" Command=\"{Binding SpeakCommand}\" Grid.Row=\"2\" Grid.Column=\"0\"/> \n\n```", "```cs\n<Entry x:Name=\"SpeakEntry\" Placeholder=\"{Binding SpeakEntryPlaceholder}\" BackgroundColor=\"Silver\" Text=\"{Binding SpeakText, Mode=TwoWay}\" Grid.Row=\"1\" Grid.Column=\"0\"/> \n\n```", "```cs\n<Entry x:Name=\"SpeakEntry\" Placeholder=\"{Binding SpeakEntryPlaceholder}\" Text=\"{Binding SpeakText, Mode=TwoWay}\" Grid.Row=\"1\" Grid.Column=\"0\"> \n            <Entry.BackgroundColor> \n                <OnPlatform x:TypeArguments=\"Color\" \n                    Android=\"White\" \n                    WinPhone=\"Silver\" \n                    iOS=\"White\"> \n                </OnPlatform> \n            </Entry.BackgroundColor> \n        </Entry> \n\n```", "```cs\n<Label x:Name=\"DesciptionLabel\" Text=\"{Binding DescriptionMessage}\" Font=\"Arial, 20\" Grid.Row=\"0\" Grid.Column=\"0\"> \n            <Label.TextColor> \n                <OnPlatform x:TypeArguments=\"Color\" \n                    Android=\"Black\" \n                    WinPhone=\"Black\" \n                    iOS=\"Black\"> \n                </OnPlatform> \n            </Label.TextColor> \n        </Label> \n\n        <Button x:Name=\"SpeakButton\" Text=\"{Binding SpeakTitle}\" Command=\"{Binding SpeakCommand}\" Grid.Row=\"2\" Grid.Column=\"0\"> \n            <Button.TextColor> \n                <OnPlatform x:TypeArguments=\"Color\" \n                    Android=\"Navy\" \n                    WinPhone=\"Blue\" \n                    iOS=\"Navy\"> \n                </OnPlatform> \n            </Button.TextColor> \n        </Button> \n\n```"]