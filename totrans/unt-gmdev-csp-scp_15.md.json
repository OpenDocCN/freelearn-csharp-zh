["```cs\nusing UnityEngine;\npublic class SwipeControl : MonoBehaviour\n{\n    private Vector2 startTouchPosition, endTouchPosition;\n    public float minSwipeDistance = 50f;\n    void Update()\n    {\n        if (Input.touchCount > 0)\n        {\n            Touch touch = Input.GetTouch(0);\n            if (touch.phase == TouchPhase.Began)\n            {\n                startTouchPosition = touch.position;\n            }\n            else if (touch.phase == TouchPhase.Ended)\n            {\n                endTouchPosition = touch.position;\n                DetectSwipe();\n            }\n        }\n    }\n    void DetectSwipe()\n    {\n        if (Vector2.Distance(startTouchPosition, endTouchPosition) >=\n            minSwipeDistance)\n        {\n            Vector2 swipeDirection = endTouchPosition -\n                    startTouchPosition;\n            // Implement your swipe action based on swipeDirection\n        }\n    }\n}\n```", "```cs\nusing UnityEngine;\npublic class MotionControl : MonoBehaviour\n{\n    public float sensitivity = 1.0f;\n    void Update()\n    {\n        Vector3 tilt = Input.acceleration * sensitivity;\n        // Use tilt.x to control horizontal movement and tilt.y to\n        //      control forward/backward movement\n        // Mapping tilt.y to the z argument of transform.Translate for\n        //      forward/backward movement in a 3D space\n        transform.Translate(tilt.x, 0, tilt.y);\n    }\n}\n```", "```cs\nusing UnityEngine;\nusing UnityEngine.UI;\npublic class UIManager : MonoBehaviour\n{\n    public CanvasScaler canvasScaler;\n    void Start()\n    {\n        // Set the reference resolution to ensure consistent UI\n           scaling\n        canvasScaler.referenceResolution = new Vector2(1920, 1080);\n        canvasScaler.uiScaleMode =\n           CanvasScaler.ScaleMode.ScaleWithScreenSize;\n    }\n}\n```", "```cs\nusing UnityEngine;\nusing UnityEngine.UI;\npublic class ResponsiveButton : MonoBehaviour\n{\n    public CanvasScaler canvasScaler;\n    public Button myButton;\n    void Start()\n    {\n        // Configure the CanvasScaler for resolution independence\n        canvasScaler.uiScaleMode =\n             CanvasScaler.ScaleMode.ScaleWithScreenSize;\n        canvasScaler.referenceResolution = new Vector2(1920, 1080);\n        // Set up the button's Rect Transform to anchor to the bottom-\n           right corner\n        RectTransform buttonRectTransform =\n            myButton.GetComponent<RectTransform>();\n        buttonRectTransform.anchorMin = new Vector2(1, 0);\n        buttonRectTransform.anchorMax = new Vector2(1, 0);\n        buttonRectTransform.pivot = new Vector2(1, 0);\n        buttonRectTransform.anchoredPosition = new Vector2(-50, 50);\n        // Add an onClick listener to provide haptic feedback\n        myButton.onClick.AddListener(TriggerHapticFeedback);\n    }\n    void TriggerHapticFeedback()\n    {\n        if (SystemInfo.supportsVibration)\n        {\n            Handheld.Vibrate();\n        }\n    }\n}\n```", "```cs\nusing UnityEngine;\nusing UnityEngine.UI;\npublic class CenteredUI : MonoBehaviour\n{\n    public RectTransform uiElement;\n    void Start()\n    {\n        // Set the anchor points to the center\n        uiElement.anchorMin = new Vector2(0.5f, 0.5f);\n        uiElement.anchorMax = new Vector2(0.5f, 0.5f);\n        uiElement.pivot = new Vector2(0.5f, 0.5f);\n        uiElement.anchoredPosition = Vector2.zero;\n    }\n}\n```", "```cs\nusing UnityEngine;\nusing UnityEngine.UI;\npublic class VerticalList : MonoBehaviour\n{\n    public GameObject itemPrefab;\n    public Transform contentPanel;\n    void Start()\n    {\n        PopulateList();\n    }\n    void PopulateList()\n    {\n        for (int i = 0; i < 10; i++)\n        {\n            GameObject newItem = Instantiate(itemPrefab, \n              contentPanel);\n            // Ensure the prefab contains a Text component\n            Text itemText = newItem.GetComponentInChildren<Text>();\n            if (itemText != null)\n            {\n                itemText.text = \"Item \" + i;\n            }\n            else\n            {\n                Debug.LogError(\"Item prefab does not contain a Text component.\");\n            }\n        }\n    }\n}\n```", "```cs\nusing UnityEngine;\nusing UnityEngine.UI;\npublic class ResponsivePanel : MonoBehaviour\n{\n    public RectTransform panel;\n    void Update()\n    {\n        if (Screen.width > Screen.height) // Landscape mode\n        {\n            panel.anchorMin = new Vector2(0.25f, 0.25f);\n            panel.anchorMax = new Vector2(0.75f, 0.75f);\n        }\n        else // Portrait mode\n        {\n            panel.anchorMin = new Vector2(0.1f, 0.1f);\n            panel.anchorMax = new Vector2(0.9f, 0.9f);\n        }\n    }\n}\n```"]