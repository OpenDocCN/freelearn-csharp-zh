["```cs\nvar a = byte.MaxValue;\nvar b = UInt16.MaxValue;\nvar c = UInt32.MaxValue;\nvar d = UInt64.MaxValue;\n```", "```cs\n01: # var a = byte.MaxValue;\n02: 00007FFF956076EEÂ Â movÂ Â Â Â Â Â Â Â Â dword ptr [rbp+3Ch],0FFh\n03: # var b = UInt16.MaxValue;\n04: 00007FFF956076F5Â Â movÂ Â Â Â Â Â Â Â Â dword ptr [rbp+38h],0FFFFh\n05: # var c = UInt32.MaxValue;\n06: 00007FFF956076FCÂ Â movÂ Â Â Â Â Â Â Â Â dword ptr\n[rbp+34h],0FFFFFFFFh\n07: # var d = UInt64.MaxValue;\n08: 00007FFF95607703Â Â movÂ Â Â Â Â Â Â Â Â eax,0FFFFFFFFh\n09: 00007FFF95607708Â Â cdqe\n10: 00007FFF9560770AÂ Â movÂ Â Â Â Â Â Â Â Â qword ptr [rbp+28h],rax\n```", "```cs\n// Create a new thread with a stack size of 1 MB\nvar thread = new Thread(new ThreadStart(ThreadMethod), 1024 * 1024);\nthread.Start();\n```", "```cs\ntry\n{\nÂ Â Â Â Recur();\n}\ncatch (StackOverflowException e)\n{\nÂ Â Â Â Console.WriteLine($\"Oh oh.. {e.Message}\");\n}\nreturn;\nstatic void Recur()\n{\nÂ Â Â Â Recur();\n}\n```", "```cs\nint i = 42;\nobject o = i; // Boxing\nint j = (int)o; // Unboxing\n```", "```cs\n1: object o = i; // Boxing\n2: 00007FF9625E76F1Â Â movÂ Â Â Â Â Â Â Â Â rcx,7FF96254E8D0h\n3: 00007FF9625E76FBÂ Â callÂ Â Â Â Â Â Â Â CORINFO_HELP_NEWSFAST (07FF9C20D0960h)\n4: 00007FF9625E7700Â Â movÂ Â Â Â Â Â Â Â Â qword ptr [rbp+20h],rax\n5: 00007FF9625E7704Â Â movÂ Â Â Â Â Â Â Â Â rdx,qword ptr [rbp+20h]\n6: 00007FF9625E7708Â Â movÂ Â Â Â Â Â Â Â Â ecx,dword ptr [rbp+3Ch]\n7: 00007FF9625E770BÂ Â movÂ Â Â Â Â Â Â Â Â dword ptr [rdx+8],ecx\n8: 00007FF9625E770EÂ Â movÂ Â Â Â Â Â Â Â Â rdx,qword ptr [rbp+20h]\n9: 00007FF9625E7712Â Â movÂ Â Â Â Â Â Â Â Â qword ptr [rbp+30h],rdx\n```", "```cs\n1: int j = i;\n2: 00007FF9625B7716Â Â movÂ Â Â Â Â Â Â Â Â eax,dword ptr [rbp+3Ch]\n3: 00007FF9625B7719Â Â movÂ Â Â Â Â Â Â Â Â dword ptr [rbp+2Ch],eax\n```", "```cs\n1: int j = (int)o; // Unboxing\n2: 00007FF9625F7726Â Â movÂ Â Â Â Â Â Â Â Â rdx,qword ptr [rbp+30h]\n3: 00007FF9625F772AÂ Â movÂ Â Â Â Â Â Â Â Â rcx,7FF96255E8D0h\n4: 00007FF9625F7734Â Â callÂ Â Â Â Â Â Â Â qword ptr [CLRStub[MethodDescPrestub]@00007FF9625EB8D0 (07FF9625EB8D0h)]\n5: 00007FF9625F773AÂ Â movÂ Â Â Â Â Â Â Â Â eax,dword ptr [rax]\n6: 00007FF9625F773CÂ Â movÂ Â Â Â Â Â Â Â Â dword ptr [rbp+2Ch],eax\n```", "```cs\ninternal void DoSomething()\n{\nÂ Â Â Â int i = 42;\nÂ Â Â Â DoSomethingElse(i);\n}\ninternal void DoSomethingElse(object o)\n{\nÂ Â Â Â Console.WriteLine(o.ToString());\n}\n```", "```cs\ninternal void DoSomething()\n{\nÂ Â Â Â int i = 42;\nÂ Â Â Â DoSomethingElse(i);\n}\ninternal void DoSomethingElse<T>(T o)\n{\nÂ Â Â Â Console.WriteLine(o.ToString());\n}\n```", "```cs\nint i = 42;\nstring message = \"Hello Integer \" + i;\n```", "```cs\nvar list = new ArrayList();\nlist.Add(i); // boxing!\nint j = (int)list[0]; // unboxing!\n```", "```cs\nIComparable i = 42;\n```", "```cs\n1: IComparable i = 42;\n2: 00007FF9625E76F1Â Â movÂ Â Â Â Â Â Â Â Â rcx,7FF96254E8D0h\n3: 00007FF9625E76FBÂ Â callÂ Â Â Â Â Â Â Â CORINFO_HELP_NEWSFAST (07FF9C20D0960h)\n4: 00007FF9625E7700Â Â movÂ Â Â Â Â Â Â Â Â qword ptr [rbp+20h],rax\n5: 00007FF9625E7704Â Â movÂ Â Â Â Â Â Â Â Â rax,qword ptr [rbp+20h]\n6: 00007FF9625E7708Â Â movÂ Â Â Â Â Â Â Â Â dword ptr [rax+8],2Ah\n7: 00007FF9625E770FÂ Â movÂ Â Â Â Â Â Â Â Â rax,qword ptr [rbp+20h]\n8: 00007FF9625E7713Â Â movÂ Â Â Â Â Â Â Â Â qword ptr [rbp+30h],rax\n```", "```cs\nobject myString = \"some string\";\nvar stuff = true ? 42 : myString;\n```", "```cs\nint i = 42;\nint[] r = { 42 };\n```", "```cs\nstring someMessage = \"Hello, World!\";\nstring theSameEmoji = \"\\U0001F600\";\nstring someEmoji = \"ðŸ˜€\";\n```", "```cs\nstring str1 = \"Hello Systems Programmers\";\nstring str2 = \"Hello Systems Programmers\";\n// Reference equality test\nif (Object.ReferenceEquals(str1, str2))\nÂ Â Â Â Console.WriteLine(\"Both strings point to the same Â Â Â Â Â Â Â Â memory location.\");\nelse\nÂ Â Â Â Console.WriteLine(\"Strings do not point to the same Â Â Â Â Â Â Â Â memory location.\");\n```", "```cs\nvar startString = \"Welcome to System \";\nvar longString = startString.Concat(\"Programmers!\");\n```", "```cs\nstring[] myElements = {\"C#\", \"VB.Net\", \"F#\", \"Delphi.Net\"};\nstring result = string.Join(\",\", myElements);\n```", "```cs\nstring a = \"my string\";\nstring b = \"my string\";\nvar areTheyEqual = a == b; // true\n```", "```cs\nstring a = \"my string\";\nstring b = \"my string\";\nvar areTheyEqual = a.Equals(b); // true\n```", "```cs\nstring a = \"my string\";\nstring b = \"my string\";\nvar areTheyEqual = a.Equals(b,\nStringComparison.InvariantCultureIgnoreCase); // true\n```", "```cs\nstring a = \"my string\";\nstring b = \"my string\";\nvar areTheyEqual = a.ToUpper() == b.ToUpper(); // true\n```", "```cs\nlong sum = 0;\nfor (int i = 0; i < array.Length; ++i)\n{\nÂ Â Â Â sum += array[i];\n}\n```", "```cs\nunsafe\n{\nÂ Â Â Â long sum = 0;\nÂ Â Â Â fixed (int* pArray = array)\nÂ Â Â Â {\nÂ Â Â Â Â Â Â Â int* pEnd = pArray + array.Length;\nÂ Â Â Â Â Â Â Â for (int* p = pArray; p < pEnd; p++)\nÂ Â Â Â Â Â Â Â {\nÂ Â Â Â Â Â Â Â Â Â Â Â sum += *p;\nÂ Â Â Â Â Â Â Â }\nÂ Â Â Â }\n}\n```", "```cs\nprivate int AddUp(int a, int b)\n{\nÂ Â Â Â return a + b;\n}\n```", "```cs\n[MethodImpl(MethodImplOptions.AggressiveOptimization)]\nprivate int AddUp(int a, int b)\n{\nÂ Â Â Â return a + b;\n}\n```", "```cs\ndotnet build -c Release -property:Optimize=true\n```", "```cs\nmsbuild /p:Configuration=Release /p:Optimize=true\n```", "```cs\n<PropertyGroup>\nÂ Â <Optimize>True</Optimize>\n</PropertyGroup>\n```"]