["```cs\n<script>\nwindow.myscope = {};\nwindow.myscope.methodName = () => { alert(\"this has been called\"); }\n</script> \n```", "```cs\n@using Microsoft.JSInterop\n@inject IJSRuntime jsRuntime\nawait jsRuntime.InvokeVoidAsync(\"myscope.methodName\"); \n```", "```cs\n    export function showConfirm(message) {\n        return confirm(message);\n    } \n    ```", "```cs\n    @using Microsoft.JSInterop\n    @inject IJSRuntime jsRuntime \n    ```", "```cs\n     IJSObjectReference jsmodule;\n        [Parameter]\n        public string? ConfirmMessage { get; set; } = null;\n        private async Task<bool> ShouldExecute()\n        {\n            if (ConfirmMessage != null)\n            {\n                jsmodule = await jsRuntime.InvokeAsync<IJSObjectReference>(\"import\", \"/_content/SharedComponents/ReusableComponents/BlogButton.razor.js\");\n                return await jsmodule.InvokeAsync<bool>(\"showConfirm\", ConfirmMessage);\n            }\n            else\n            {\n                return true;\n            }\n        } \n    ```", "```cs\n    if (OnClick.HasDelegate && await ShouldExecute())\n     {\n         await OnClick.InvokeAsync(args);\n     } \n    ```", "```cs\n     <tr>\n    <td>\n    <BlogButton OnClick=\"@(()=> {SelectEvent.InvokeAsync(item); })\"> Select</BlogButton>\n    </td>\n    <td>@ItemTemplate(item)</td>\n    <td>\n    <BlogButton ConfirmMessage=\"Are you sure you want to delete this item?\" Type=\"BlogButton.ButtonType.Delete\" OnClick=\"@(()=> {DeleteEvent.InvokeAsync(item);})\"> Delete</BlogButton>\n    </td>\n    </tr> \n    ```", "```cs\n[JSInvokable]\npublic static Task<int[]> ReturnArrayAsync()\n{\n   return Task.FromResult(new int[] { 1, 2, 3 });\n} \n```", "```cs\nDotNet.invokeMethodAsync('BlazorWebAssemblySample', 'ReturnArrayAsync')\n      .then(data => {\n        data.push(4);\n          console.log(data);\n      }); \n```", "```cs\n[JSInvokable(\"DifferentMethodName\")] \n```", "```cs\nusing Microsoft.JSInterop;\npublic class HelloHelper\n{\n    public HelloHelper(string name)\n    {\n        Name = name;\n    }\n    public string Name { get; set; }\n    [JSInvokable]\n    public string SayHello() => $\"Hello, {Name}!\";\n} \n```", "```cs\nexport function sayHello (dotnetHelper) {\n    return dotnetHelper.invokeMethodAsync('SayHello').then(r => alert(r));\n} \n```", "```cs\n@page \"/interop\" @using Microsoft.JSInterop\n@inject IJSRuntime jsRuntime\n@implements IDisposable\n<button type=\"button\" class=\"btn btn-primary\" @onclick=\"async ()=> { await TriggerNetInstanceMethod(); }\">    Trigger .NET instance method HelloHelper.SayHello </button>\n@code {\n    private DotNetObjectReference<HelloHelper> objRef;\n\n    IJSObjectReference jsmodule;\n    public async ValueTask<string>\n TriggerNetInstanceMethod()\n    {\n        objRef = DotNetObjectReference.Create(new HelloHelper(\"Bruce Wayne\"));\n        jsmodule = await jsRuntime. InvokeAsync<IJSObjectReference>(\"import\", \"/_content/MyBlog.Shared/Interop.razor.js\");\n        return await jsmodule.InvokeAsync<string>(\"sayHello\", objRef);\n    }\n    public void Dispose()\n    {\n        objRef?.Dispose();\n    }\n} \n```", "```cs\n<script src=\"img/highcharts.js\"></script> \n```", "```cs\nexport function loadHighchart(id, json) {\nvar obj = looseJsonParse(json);\n    Highcharts.chart(id, obj);\n};\nexport function looseJsonParse(obj) {\n    return Function('\"use strict\";return (' + obj + ')')();\n} \n```", "```cs\n@using Microsoft.JSInterop\n@inject Microsoft.JSInterop.IJSRuntime jsruntime\n<div>\n    <div id=\"@id\"></div>\n</div>\n@code\n{\n    [Parameter] public string Json { get; set; }\n    private string id { get; set; } = \"Highchart\" + Guid.NewGuid().ToString();\n    protected override void OnParametersSet()\n    {\n        StateHasChanged();\n        base.OnParametersSet();\n    }\n    IJSObjectReference jsmodule;\n    protected async override Task OnAfterRenderAsync(bool firstRender)\n    {\n        if (!string.IsNullOrEmpty(Json))\n        {\n            jsmodule = await jsruntime.InvokeAsync<IJSObjectReference>(\"import\", \"/_content/Components/SharedComponents/HighChart.razor.js\");\n            await jsmodule.InvokeAsync<string>(\"loadHighchart\", new object[] { id, Json });\n        }\n        await base.OnAfterRenderAsync(firstRender);\n    }\n} \n```", "```cs\n@rendermode InteractiveServer @page \"/HighChartTest\"\n<HighChart Json=\"@chartjson\">\n</HighChart>\n@code {\n    string chartjson = @\" {\n    chart: { type: 'pie'},\n    series: [{\n        data: [{\n            name: 'Does not look like Pacman',\n            color:'black',\n            y: 20,\n        }, {\n            name: 'Looks like Pacman',\n            color:'yellow',\n            y: 80\n        }]\n    }]\n}\";\n} \n```", "```cs\n<PropertyGroup>\n<AllowUnsafeBlocks>true</AllowUnsafeBlocks>\n</PropertyGroup> \n```", "```cs\n@page \"/nettojswasm\"\n@using System.Runtime.InteropServices.JavaScript\n<h3>This is a demo how to call JavaScript from .NET</h3>\n<button @onclick=\"ShowAlert\">Show Alert</button>\n@code {\n    protected async void ShowAlert()\n    {\n        ShowAlert(\"Hello from .NET\");\n    }\n    protected override async Task OnInitializedAsync()\n    {\n        await JSHost.ImportAsync(\"nettojs\", \"../JSInteropSamples/NetToJS.razor.js\");\n    }\n} \n```", "```cs\nusing System.Runtime.InteropServices.JavaScript;\nnamespace BlazorWebAssembly.Client.JSInteropSamples;\npublic partial class NetToJS\n{\n    [JSImport(\"showAlert\", \"nettojs\")]\n    internal static partial string ShowAlert(string message);\n} \n```", "```cs\nexport function showAlert(message) {\n    return alert(message);\n} \n```", "```cs\n@page \"/jstostaticnetwasm\"\n@using System.Runtime.InteropServices.JavaScript\n<h3>This is a demo how to call .NET from JavaScript</h3>\n<button @onclick=\"ShowMessage\">Show alert with message</button>\n@code {\n    protected override async Task OnInitializedAsync()\n    {\n        await JSHost.ImportAsync(\"jstonet\", \"../JSInteropSamples/JSToStaticNET.razor.js\");\n    }\n} \n```", "```cs\nusing System.Runtime.InteropServices.JavaScript;\nusing System.Runtime.Versioning;\nnamespace BlazorWebAssembly.Client.JSInteropSamples;\n[SupportedOSPlatform(\"browser\")]\npublic partial class JSToStaticNET\n{\n    [JSExport]\n    internal static string GetAMessageFromNET()\n    {\n        return \"This is a message from .NET\";\n    }\n    [JSImport(\"showMessage\", \"jstonet\")]\n    internal static partial void ShowMessage();\n} \n```", "```cs\nexport async function setMessage() {\n    const { getAssemblyExports } = await globalThis.getDotnetRuntime(0);\n    var exports = await getAssemblyExports(\"BlazorWebAssembly.Client.dll\");\n    alert(exports.BlazorWebAssembly.Client.JSInteropSamples.JSToStaticNET.GetAMessageFromNET());\n}\nexport async function showMessage() {\n    await setMessage();\n} \n```"]