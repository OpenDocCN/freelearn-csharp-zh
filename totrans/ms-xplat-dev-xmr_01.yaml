- en: Chapter 1. Developing with Xamarin
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. 使用Xamarin进行开发
- en: 'This chapter examines the Xamarin framework and architecture on different target
    platforms and identifies the differences and similarities. It also includes introductory
    information and tips on preparing the development environment for Xamarin and
    covers some of the Xamarin development essentials. This chapter is divided into
    the following sections:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章探讨了Xamarin框架和架构在不同目标平台上的情况，并确定了差异和相似之处。它还包括有关为Xamarin准备开发环境的入门信息和技巧，并涵盖了Xamarin开发的一些基本要素。本章分为以下部分：
- en: Cross-platform projects with Xamarin
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Xamarin的跨平台项目
- en: Target platforms
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标平台
- en: Setting up the development environment
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置开发环境
- en: Emulator options
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模拟器选项
- en: A typical Xamarin solution structure
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 典型的Xamarin解决方案结构
- en: Quality in cross-development
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨平台开发的质量
- en: Cross-platform projects with Xamarin
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Xamarin的跨平台项目
- en: Developers are enjoying a new era in which development is not restricted to
    one single application platform but spans across various media such as cellphones,
    tablets, personal computers, and even wearable devices. The shared code and assets
    between the development projects improves the elegance and the quality of the
    work. There is also a direct correlation between the robustness, the effort required
    for maintaining a multi-platform application, and the reusable modules.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者正在享受一个新时代，在这个时代中，开发不再局限于单一的应用程序平台，而是跨越各种媒体，如手机、平板电脑、个人电脑，甚至可穿戴设备。开发项目之间的共享代码和资源提高了工作的优雅性和质量。此外，健壮性、维护多平台应用程序所需的努力以及可重用模块之间存在直接相关性。
- en: Universal application is a term previously used to identify applications targeting
    devices running on the iOS operating system (the iPhone and iPad). However, the
    same term is now used to describe Windows Runtime applications (Windows Store
    and Windows Phone 8.1 - WinRT) and Android applications for phones and tablets.
    With the release of Xamarin, a truly universal application concept was born. When
    considering Xamarin applications, the term, universal, refers to applications
    that run on all three platforms and adapt to the system resources.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 通用应用程序是一个以前用来识别针对运行iOS操作系统（iPhone和iPad）的设备的应用程序的术语。然而，现在这个术语也用来描述Windows Runtime应用程序（Windows
    Store和Windows Phone 8.1 - WinRT）以及针对手机和平板电脑的Android应用程序。随着Xamarin的发布，一个真正的通用应用程序概念诞生了。当考虑Xamarin应用程序时，术语“通用”指的是在所有三个平台上运行并适应系统资源的应用程序。
- en: In this universal application context, developers are now finding it difficult
    to get the necessary solutions for common tasks on all three platforms. Moreover,
    taking on each platform as a separate development project results in wasted developer
    hours even though the main driving factors for such an application, namely data,
    business logic, and UI, are conceptually almost identical on all platforms.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个通用应用程序的背景下，开发者现在发现很难获取所有三个平台上的常见任务的必要解决方案。此外，将每个平台视为一个独立的项目进行开发会导致开发者的时间浪费，尽管这种应用程序的主要驱动因素，即数据、业务逻辑和UI，在所有平台上在概念上几乎是相同的。
- en: Development strategies and patterns for the Xamarin platform, some of which
    are described in the rest of this book, try to resolve some of these problems
    and provide the developers with the tools and strategies necessary to produce
    cross-platform, manageable, and quality products.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin平台的开发策略和模式，其中一些在本书的其余部分有所描述，试图解决一些这些问题，并为开发者提供生产跨平台、可管理和高质量产品的工具和策略。
- en: Xamarin as a platform
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Xamarin作为一个平台
- en: Xamarin was initially born as a community effort to port the .NET libraries
    and common language runtime compilers to different operating systems. Initial
    attempts intended to create a set of binaries to develop, compile, and run applications
    written in C#, the indigenous language of .NET, on Unix-based platforms. This
    project, Mono, was later ported to many other operating systems, including iOS
    (Mono-Touch) and Android (Mono for Android).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin最初诞生于一个社区努力，旨在将.NET库和通用语言运行时编译器移植到不同的操作系统。最初的尝试旨在创建一组二进制文件，用于在Unix平台上的C#（.NET的本土语言）编写应用程序的开发、编译和运行。这个项目，Mono，后来被移植到许多其他操作系统，包括iOS（Mono-Touch）和Android（Mono
    for Android）。
- en: The emergence of the Xamarin development platform created a new development
    niche creating products for three separate platforms at the same time, while allowing
    users to adapt their existing .NET development skills to these new platforms and
    produce applications for a wider range of devices and operating systems.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin开发平台的兴起创造了一个新的开发细分市场，即在同一时间针对三个不同的平台创建产品，同时允许用户将现有的.NET开发技能适应这些新平台，并为更广泛的设备和操作系统生成应用程序。
- en: Note
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Microsoft has been a strong supporter of Xamarin platform and toolset since
    the early phases. As you will see in the remainder of the chapter, Xamarin tools
    were fully integrated into Visual Studio and finally included in the Visual Studio
    2015 setup. This partnership lasted until the eventual acquisition of Xamarin
    by Microsoft which was publicly announced in March 2016.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 自从早期阶段开始，微软一直是Xamarin平台和工具集的强力支持者。正如你将在本章剩余部分看到的那样，Xamarin工具已完全集成到Visual Studio中，并最终包含在Visual
    Studio 2015的设置中。这种合作关系一直持续到Xamarin最终被微软收购，这一消息于2016年3月公开宣布。
- en: Xamarin provides compilers for each of the mentioned platforms so that the code
    written in the .NET framework (-alike) is compiled into native applications. This
    process provides highly efficient applications that differ greatly from interpreted
    mobile HTML applications.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin为每个提到的平台都提供了编译器，以便在.NET框架（类似）中编写的代码编译成原生应用程序。这个过程提供了高度高效的应用程序，与解释型移动HTML应用程序大相径庭。
- en: As well as native compilation, Xamarin also provides access to strongly typed
    platform-specific features. These features are used in a robust manner with compile-time
    binding to the underlying platform. Platform-specific execution can also be extended
    with native invocations which is possible with the interop libraries.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 除了原生编译，Xamarin还提供了对强类型平台特定功能的访问。这些功能以健壮的方式使用，在编译时绑定到底层平台。平台特定的执行也可以通过原生调用进行扩展，这是通过互操作库实现的。
- en: Xamarin as a product
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 作为一款产品，Xamarin
- en: Xamarin, as a development suite, comes in different flavors. Developers with
    different sets of knowledge and experience can use these tools to set up their
    development environment according to their own needs. The Xamarin development
    environment can be configured on different operating systems. However, it is currently
    not possible to develop for all three platforms on the same operating system.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一套开发工具，Xamarin有不同的版本。具有不同知识和经验集合的开发者可以使用这些工具根据他们的需求设置自己的开发环境。Xamarin开发环境可以在不同的操作系统上配置。然而，目前还不能在同一个操作系统上为所有三个平台进行开发。
- en: For developers who are looking to use the familiar interface of Visual Studio
    and leverage existing skills, Xamarin extensions for Visual Studio offer a suitable
    option. Once the extensions are installed, the environment is ready to develop
    Android and Windows Phone applications. This extension lets the developers take
    full advantage of Visual Studio, which includes designers for both of these platforms.
    In order to develop iOS applications, you need to go through the so-called pairing
    process of Visual Studio with an Apple OS X build machine. The build machine is
    used in return to visualize storyboards in the development environment (Visual
    Studio), compile iOS code, and debug applications.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 对于希望使用熟悉的Visual Studio界面并利用现有技能的开发者，Xamarin的Visual Studio扩展提供了合适的选项。一旦安装了扩展，环境就准备好开发Android和Windows
    Phone应用程序。这个扩展让开发者能够充分利用Visual Studio，其中包括这两个平台的设计师。为了开发iOS应用程序，你需要通过所谓的Visual
    Studio与Apple OS X构建机器的配对过程。构建机器反过来用于在开发环境（Visual Studio）中可视化故事板、编译iOS代码和调试应用程序。
- en: The second option is to use Xamarin Studio. Xamarin Studio is a complete IDE
    with some of the features you are familiar with from Visual Studio, such as intellisense
    (smart code completion), code analysis, and code formatting. If you run Xamarin
    Studio on Apple OS X, you can develop for Android and iOS platforms with this
    IDE. However, with Xamarin Studio on Windows, you can only target the Android
    platform.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种选择是使用Xamarin Studio。Xamarin Studio是一个完整的IDE，它具有一些你从Visual Studio熟悉的特性，例如智能代码补全（IntelliSense）、代码分析和代码格式化。如果你在Apple
    OS X上运行Xamarin Studio，你可以使用这个IDE为Android和iOS平台开发。然而，在Windows上使用Xamarin Studio时，你只能针对Android平台。
- en: An important part of this development suite is the real-time monitoring tool
    called Xamarin Insights. Xamarin Insights lets developers monitor their live applications
    to help detect and diagnose performance issues and exceptions, and discover how
    the application is used. Xamarin Insights can also be connected to other applications
    so, for instance, application errors can be directly pushed into a bug tracking
    system.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这个开发套件的一个重要部分是实时监控工具，称为Xamarin Insights。Xamarin Insights允许开发者监控他们的实时应用程序，以帮助检测和诊断性能问题和异常，并了解应用程序的使用情况。Xamarin
    Insights还可以连接到其他应用程序，例如，应用程序错误可以直接推送到错误跟踪系统。
- en: Target platforms
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 目标平台
- en: As mentioned, Xamarin created a new platform in which the development efforts
    target multiple operating systems and a variety of devices. Most importantly,
    compiled applications do not run an interpreted sequence but have a native code
    base (such as Xamarin.iOS) or an integrated .NET application runtime (such as
    Xamarin.Android). In essence, Xamarin replaces the Common Language Runtime and
    IL for .NET applications with compiled binaries and an execution context, the
    so-called **mono runtime**.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Xamarin创建了一个新的平台，其中开发工作针对多个操作系统和各种设备。最重要的是，编译的应用程序不是运行解释序列，而是拥有原生代码库（如Xamarin.iOS）或集成的.NET应用程序运行时（如Xamarin.Android）。本质上，Xamarin用编译的二进制文件和执行上下文替换了.NET应用程序的公共语言运行时（CLR）和IL，所谓的**mono运行时**。
- en: Xamarin on Android
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Xamarin on Android
- en: With Android applications, mono runtime is placed right on top of the Linux
    kernel. This creates a parallel execution context to the Android runtime. Xamarin
    code is then compiled into IL and accessed by mono runtime. On the other hand,
    Android runtime is accessed by the so-called **Managed Callable Wrappers** (**MCW**)
    which is a marshalling wrapper between the two runtimes. The MCW layer is responsible
    for converting managed types to Android runtime types and invoking Android code
    at execution time. Every time that .NET code needs to invoke Java code, this JNI
    (Java Interop) bridge is used. MCW provides a wide range of applications including
    inheriting Java types, overriding methods and implementing Java interfaces.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在Android应用程序中，mono运行时直接放置在Linux内核之上。这创建了一个与Android运行时的并行执行上下文。然后，Xamarin代码被编译成IL，并由mono运行时访问。另一方面，Android运行时通过所谓的**托管可调用包装器**（**MCW**）访问，这是一个在两个运行时之间的打包包装器。MCW层负责将托管类型转换为Android运行时类型，并在执行时间调用Android代码。每当.NET代码需要调用Java代码时，都会使用这个JNI（Java互操作）桥。MCW提供了一系列应用，包括继承Java类型、重写方法和实现Java接口。
- en: 'The following image shows the Xamarin.Android architecture:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图像显示了Xamarin.Android架构：
- en: '![Xamarin on Android](img/B04693_01_01.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![Xamarin on Android](img/B04693_01_01.jpg)'
- en: 'Figure 1: Xamarin.Android Architecture'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图1：Xamarin.Android架构
- en: '`Android.*` and `Java.*` namespaces are used throughout the MCWs to access
    device- and platform-specific features in Android runtime and Java APIs such as
    facilities like audio, graphics, OpenGL, and telephony .'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`Android.*`和`Java.*`命名空间在MCWs中用于访问Android运行时和Java API中特定于设备和平台的功能，例如音频、图形、OpenGL和电话等功能。'
- en: Using the interop libraries, it is also possible to load native libraries and
    execute native code in the execution context with Xamarin.Android. The reverse
    callback execution in this case is handled through **Android Callable Wrappers**
    (**ACW**). ACW is a JNI bridge which allows the Android runtime to access the
    .NET domain. An ACW is generated at compile-time for each managed class that is
    directly or indirectly related to Java types (those that inherit `Java.Lang.Object`).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 使用互操作库，也可以在Xamarin.Android的执行上下文中加载原生库并执行原生代码。在这种情况下，反向回调执行通过**Android Callable
    Wrappers**（**ACW**）处理。ACW是一个JNI桥，允许Android运行时访问.NET域。对于每个直接或间接与Java类型（继承自`Java.Lang.Object`的类型）相关的托管类，在编译时生成一个ACW。
- en: Xamarin on iOS
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Xamarin on iOS
- en: In iOS applications, the use of an integrated parallel runtime is (unfortunately)
    not permissible under the iOS SDK agreement. According to the iOS SDK agreement,
    interpreted code can only be used if all of the the scripts and code are downloaded
    and run by Apple's WebKit framework.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在iOS应用程序中，根据iOS SDK协议，使用集成的并行运行时是不允许的（遗憾的是）。根据iOS SDK协议，只有当所有脚本和代码都由Apple的WebKit框架下载和运行时，才能使用解释代码。
- en: With this restriction in place, developers can still develop applications in
    .NET and share code over the other three platforms. At compile time, projects
    are first compiled into IL code and then (with the Mono Touch Ahead-Of-Time compiler—mtouch)
    into static native iOS bits. This means that iOS applications developed with Xamarin
    are completely native applications.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在此限制条件下，开发者仍然可以在.NET平台上开发应用程序并在其他三个平台上共享代码。在编译时，项目首先被编译成IL代码，然后（使用Mono Touch
    Ahead-Of-Time编译器—mtouch）编译成静态原生iOS位代码。这意味着使用Xamarin开发的iOS应用程序是完全的原生应用程序。
- en: '![Xamarin on iOS](img/B04693_01_02.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![Xamarin on iOS](img/B04693_01_02.jpg)'
- en: 'Figure 2: Xamarin.iOS Compilation'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图2：Xamarin.iOS编译
- en: Xamarin.iOS, like Xamarin.Android, contains an interop engine that bridges the
    .NET world with the Objective-C world. Through this bridge, under the `ObjCRuntime`
    namespace, users are able to access iOS C-based APIs, as well as using the Foundation
    namespace, and can use and derive from native types and access Objective-C properties.
    For instance, Objective-C types like `NSObject`, `NSString`, and `NSArray` are
    exposed in C# and provide binding to underlying types. These types can be used
    either as memory references or as strongly-typed objects. This improves the development
    experience and also increases type-safety.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 与Xamarin.Android类似，Xamarin.iOS也包含一个互操作引擎，它将.NET世界与Objective-C世界连接起来。通过这个桥梁，在`ObjCRuntime`命名空间下，用户能够访问iOS基于C的API，以及使用Foundation命名空间，并且可以使用和从原生类型派生，以及访问Objective-C属性。例如，Objective-C类型如`NSObject`、`NSString`和`NSArray`在C#中暴露并提供对底层类型的绑定。这些类型可以作为内存引用或作为强类型对象使用。这提高了开发体验，并增加了类型安全性。
- en: This static compilation is the main reason for using a build machine to develop
    iOS applications with Xamarin on the Windows platform. Therefore, there is no
    reverse-callback functionality in Xamarin.iOS where calls to native runtime from
    .NET code are supported but calls from native code back to .NET domain are not.
    There are other features that are disabled because of the way that Xamarin.iOS
    applications are compiled. For example, no generic types are allowed to inherit
    from `NSObject`. Another important limitation is the fact that no dynamic type
    creation is allowed at runtime which, in return, disables the use of dynamic keywords
    in Xamarin.iOS applications.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这种静态编译是使用Windows平台上的Xamarin开发iOS应用程序时使用构建机器的主要原因。因此，在Xamarin.iOS中没有反向回调功能，即从.NET代码到原生运行时的调用得到支持，但原生代码回.NET域的调用则不支持。由于Xamarin.iOS应用程序的编译方式，还有其他一些功能被禁用。例如，不允许泛型类型从`NSObject`继承。另一个重要的限制是，在运行时不允许创建动态类型，这反过来又禁用了在Xamarin.iOS应用程序中使用动态关键字。
- en: Note
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Xamarin.iOS application packages, if built in a debug configuration, are much
    larger than their Release counterparts when compared to other platforms. These
    packages are instrumented and not optimized by the linker. Profiling of these
    packages is not allowed in Xamarin.iOS applications.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他平台相比，如果Xamarin.iOS应用程序包是在调试配置中构建的，它们的大小比它们的发布版本要大得多。这些包被工具化了，但没有被链接器优化。在Xamarin.iOS应用程序中不允许对这些包进行性能分析。
- en: In a similar way to Xamarin.Android development, with Xamarin.iOS, it is also
    possible to re-use native code and libraries from managed code. To do this, Xamarin
    provides a project template called a **binding library**. A binding library helps
    developers create managed wrappers for native Objective-C code.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 与Xamarin.Android开发类似，使用Xamarin.iOS，也可以从托管代码中重用原生代码和库。为此，Xamarin提供了一个名为**绑定库**的项目模板。绑定库帮助开发者创建原生Objective-C代码的托管包装器。
- en: Windows Runtime apps
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Windows Runtime应用程序
- en: Even though Xamarin does not include Windows Runtime as a target platform nor
    provide specialized tools for it (other than Xamarin.Forms), cross-platform projects
    that involve Xamarin can and generally do include Windows Runtime projects. Since
    .NET and C# are indigenous to Windows Runtime, most of the shared projects (such
    as portable libraries, shared projects, and Xamarin.Forms projects) can be reused
    in Windows Runtime with no further modification.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Xamarin没有将Windows Runtime作为目标平台，也没有为它提供专门的工具（除了Xamarin.Forms之外），但涉及Xamarin的跨平台项目可以，并且通常包括Windows
    Runtime项目。由于.NET和C#是Windows Runtime的本地语言，大多数共享项目（如可移植库、共享项目和Xamarin.Forms项目）可以在Windows
    Runtime中重用，无需进一步修改。
- en: With Windows Runtime, developers can create both Windows Phone 8.1 and Windows
    Store applications. Windows Phone 8 and Windows Phone 8.1 Silverlight can also
    be targeted and included in the PCL description.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Windows Runtime，开发者可以创建 Windows Phone 8.1 和 Windows Store 应用程序。Windows Phone
    8 和 Windows Phone 8.1 Silverlight 也可以作为目标并包含在 PCL 描述中。
- en: Setting up the development environment
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置开发环境
- en: Xamarin projects can be carried out in various development environments. Since
    a number of platforms are involved in such projects, the operating system, the
    IDE selection, and the configuration are all crucial parts of the preparation.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin 项目可以在各种开发环境中进行。由于此类项目涉及多个平台，操作系统、IDE 选择和配置都是准备过程中的关键部分。
- en: Note
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Environment setup not only depends on the target application platforms but also
    on the Xamarin license. A comparison between different licensing options and pricing
    information can be found on the Xamarin website ([https://store.xamarin.com/](https://store.xamarin.com/)).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 环境设置不仅取决于目标应用平台，还取决于 Xamarin 许可证。不同许可选项和定价信息可以在 Xamarin 网站上找到（[https://store.xamarin.com/](https://store.xamarin.com/))。
- en: Choosing the right development OS
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择合适的开发操作系统
- en: Android applications can be developed and compiled on Windows using both Xamarin
    Studio and Visual Studio with Xamarin extensions installed, as well as on an Apple
    OS X operating system with Xamarin Studio for Mac installed.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Android 应用程序可以使用安装了 Xamarin 扩展的 Xamarin Studio 和 Visual Studio 在 Windows 上进行开发和编译，也可以在安装了
    Xamarin Studio for Mac 的 Apple OS X 操作系统上进行。
- en: For iOS application development, whether using Visual Studio on Windows or Xamarin
    Studio on Apple OS X, an Apple Macintosh computer, running at least OS X Mountain
    Lion, is required. The build machine should have the Xcode development tools with
    iOS SDK together with the Xamarin.iOS suite installed.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 iOS 应用程序开发，无论是在 Windows 上的 Visual Studio 还是 Apple OS X 上的 Xamarin Studio，都需要一台至少运行
    OS X Mountain Lion 的 Apple Macintosh 计算机。构建机器应安装 Xcode 开发工具和 iOS SDK，以及安装了 Xamarin.iOS
    套件。
- en: On the other hand, Windows Store applications can only be developed on the Windows
    platform.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，Windows Store 应用程序只能在 Windows 平台上进行开发。
- en: '|   | Apple OS X | Microsoft Windows |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '|   | Apple OS X | Microsoft Windows |'
- en: '| --- | --- | --- |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '|   | **Xamarin Studio** | **Xamarin Studio** | **Visual Studio** |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '|   | **Xamarin Studio** | **Xamarin Studio** | **Visual Studio** |'
- en: '| **iOS Apps** | Yes |   | Yes (with OS X Build Machine) |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| **iOS 应用** | 是 |   | 是（带 OS X 构建机器） |'
- en: '| **Android Apps** | Yes | Yes | Yes |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| **Android 应用** | 是 | 是 | 是 |'
- en: '| **Windows Store Apps** |   |   | Yes |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| **Windows Store 应用** |   |   | 是 |'
- en: '*Figure 3: Development IDEs on OS X and Windows*'
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*图 3：OS X 和 Windows 上的开发 IDE*'
- en: On the virtualization front, developers are also limited. OS X cannot be installed
    and run on a non-Apple branded machine nor can it be virtualized, according to
    the end user agreement. On the other hand, you can set up a virtual machine on
    an OS X development machine for Microsoft Windows and Visual Studio. However,
    in this case, the system should be running nested virtualization for Hyper-V to
    run Visual Studio for Windows Phone and Android emulators. Even though Parallels
    and VMWare Fusion support nested virtualization, Microsoft doesn't support nesting
    Hyper-V and, therefore, such machines may be unstable.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在虚拟化方面，开发者也受到限制。根据最终用户协议，OS X 不能安装在非 Apple 品牌的机器上并运行，也不能进行虚拟化。另一方面，你可以在 OS X
    开发机器上设置一个虚拟机，用于 Microsoft Windows 和 Visual Studio。然而，在这种情况下，系统应运行嵌套虚拟化以运行 Windows
    Phone 和 Android 模拟器的 Visual Studio for Windows。尽管 Parallels 和 VMWare Fusion 支持嵌套虚拟化，但
    Microsoft 不支持嵌套 Hyper-V，因此此类机器可能不稳定。
- en: Xamarin Studio setup and configuration
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Xamarin Studio 设置和配置
- en: Xamarin Studio can be set up on both the Windows and OS X operating systems.
    Developers can download it from [www.xamarin.com](http://www.xamarin.com) and
    follow the installation instructions. Xamarin components for target platforms
    (for example, Xamarin.iOS, Xamarin.Android, and so on) together with the dependencies
    for these platforms (for example, Android SDK) should be downloaded and installed
    on the development machine. One required component for OS X, which has to be installed
    separately and configured, is the iOS SDK with the Xcode development environment.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin Studio 可以在 Windows 和 OS X 操作系统上设置。开发者可以从 [www.xamarin.com](http://www.xamarin.com)
    下载它并遵循安装说明。对于目标平台（例如，Xamarin.iOS、Xamarin.Android 等）以及这些平台的依赖项（例如，Android SDK）应下载并安装到开发机器上。对于
    OS X，必须单独安装并配置的一个必需组件是带有 Xcode 开发环境的 iOS SDK。
- en: '![Xamarin Studio setup and configuration](img/B04693_01_03.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![Xamarin Studio 设置和配置](img/B04693_01_03.jpg)'
- en: 'Figure 4: Xamarin Setup on Mavericks (OS X 10.9)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4：Mavericks（OS X 10.9）上的 Xamarin 设置
- en: On Microsoft Windows, it is important to mention that Xamarin Studio only supports
    the development of Android applications. Neither Windows Phone nor iOS application
    (even with the remote build machine) projects can be viewed, modified, or compiled
    with Xamarin Studio on Windows.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Microsoft Windows 上，重要的是要提到，Xamarin Studio 仅支持 Android 应用程序的开发。Windows Phone
    或 iOS 应用程序（即使是远程构建机器）的项目都不能在 Windows 上的 Xamarin Studio 中查看、修改或编译。
- en: '![Xamarin Studio setup and configuration](img/B04693_01_04.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![Xamarin Studio 设置和配置](img/B04693_01_04.jpg)'
- en: 'Figure 5: Xamarin Dev. Environment Setup on OS X'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5：在 OS X 上设置 Xamarin 开发环境
- en: While developing on OS X, the only option for developing Windows Phone applications
    together with iOS and Android, is to use a Windows virtual machine and run Visual
    Studio in parallel with Xamarin Studio. This setup is also helpful for developers
    who use Team Foundation Server as the source control, since they can use the enhanced
    integration offered by Visual Studio Client rather than the standalone TFS Everywhere.
    It can also be set up so that the OS host machine can be paired with Visual Studio
    to become the build host for iOS applications.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在 OS X 上开发时，与 iOS 和 Android 一起开发 Windows Phone 应用程序的唯一选项是使用 Windows 虚拟机，并使 Visual
    Studio 与 Xamarin Studio 并行运行。这种设置对于使用 Team Foundation Server 作为源控制的开发者也有帮助，因为他们可以使用
    Visual Studio 客户端提供的增强集成，而不是独立的 TFS Everywhere。还可以设置，使操作系统主机机可以与 Visual Studio
    配对，成为 iOS 应用程序的构建主机。
- en: Visual Studio setup and configuration
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Visual Studio 设置和配置
- en: A typical Windows development platform configuration for Xamarin projects includes
    Visual Studio 2013 or 2015, an Apple OS X build host and Hyper-V and/or VirtualBox
    to be able to use Android and Windows Phone emulators. Xamarin.iOS applications
    are then compiled and emulated on the Apple OS X build host.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Xamarin 项目，典型的 Windows 开发平台配置包括 Visual Studio 2013 或 2015、Apple OS X 构建主机以及
    Hyper-V 和/或 VirtualBox，以便能够使用 Android 和 Windows Phone 模拟器。Xamarin.iOS 应用程序随后在
    Apple OS X 构建主机上编译和模拟。
- en: '![Visual Studio setup and configuration](img/B04693_01_05.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![Visual Studio 设置和配置](img/B04693_01_05.jpg)'
- en: 'Figure 6: Windows Platform Xamarin Development Environment'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6：Windows 平台 Xamarin 开发环境
- en: Note
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'In spite of the fact that it is technically possible to run OS X with a virtual
    machine in the Microsoft Windows environment, Apple''s license agreement does
    not allow this:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在 Microsoft Windows 环境中使用虚拟机运行 OS X 在技术上可行，但 Apple 的许可协议不允许这样做：
- en: '*"2.H. Other Use Restrictions: The grants set forth in this License do not
    permit you to, and you agree not to, install, use or run the Apple Software on
    any non-Apple-branded computer, or to enable others to do so."*'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '*"2.H. 其他使用限制：本许可证中规定的授予并不允许您，您同意不，在任何非 Apple 品牌的计算机上安装、使用或运行 Apple 软件，或允许他人这样做。"*'
- en: On Microsoft Windows, the Xamarin installation is similar to the Xamarin Studio
    setup on Apple OS X. All of the prerequisites for Xamarin development are installed
    with the Xamarin for Windows package, together with the Visual Studio extension.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Microsoft Windows 上，Xamarin 的安装与在 Apple OS X 上的 Xamarin Studio 设置类似。所有 Xamarin
    开发的先决条件都包含在 Xamarin for Windows 软件包中，以及 Visual Studio 扩展程序。
- en: '![Visual Studio setup and configuration](img/B04693_01_06.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![Visual Studio 设置和配置](img/B04693_01_06.jpg)'
- en: 'Figure 7: Visual Studio 2015 Setup'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7：Visual Studio 2015 设置
- en: One of the key differences between OS X and Microsoft Windows is that Visual
    Studio 2015 now includes cross-platform development tools such as Android SDK,
    development kits, and Xamarin project templates. Therefore, the Xamarin installation
    is only responsible for installing the extensions for the requested platforms
    (that is, Xamarin.iOS and/or Xamarin.Android).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: OS X 和 Microsoft Windows 之间的一个主要区别是，Visual Studio 2015 现在包括跨平台开发工具，如 Android
    SDK、开发套件和 Xamarin 项目模板。因此，Xamarin 的安装仅负责安装请求平台的扩展（即 Xamarin.iOS 和/或 Xamarin.Android）。
- en: In order to develop and test iOS applications and visualize and edit storyboards
    with Visual Studio, an Apple OS X machine must be connected to Visual Studio as
    a build host. Xamarin 4.0 introduced the concept of Xamarin Mac Agent, which is
    a background process on the OS X machine providing the required SSH connection
    to Visual Studio (a secure connection over port 22). Prior to Xamarin 4.0, the
    build host machine needed to run the so-called Mac **build host** which was used
    to pair the Mac host with Visual Studio. The only prerequisites for Xamarin Mac
    Agent are to have Xamarin.iOS installed on both the Windows workstation and the
    OS X build host and the build host to have a remote login enabled for the current
    user. In Visual Studio, the **Find Xamarin Mac Agent** dialog helps establish
    the remote connection.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '![Visual Studio setup and configuration](img/b04693_01_07.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8: Xamarin.iOS Build Host'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: It is important to keep in mind that the Mac machine paired with Visual Studio
    has to have Xcode with iOS SDK installed. A developer account (either enrolled
    into the app developer program or not) must also be added to the accounts configuration
    section of Xcode.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If the account associated with Xcode does not have a paid subscription to the
    developer program, the platform for the iOS projects can only be set for simulator
    and debug selection to one of the simulator options, not an actual device. Otherwise,
    the user will be presented with an error message such as, **No valid iOS code
    signing keys found in keychain**.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: Emulator options
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of emulators for compiled Xamarin projects for the target
    platform and the development environment. Developers have most flexibility with
    the emulator for the Android platform, whereas the options for iOS and Windows
    Store Apps are limited to the SDK-provided emulators.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: Emulators for Android
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Android applications can be run and tested on a number of emulators on both
    Microsoft Windows and Apple OS X operating systems.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: Android SDK comes with the default emulator that is installed on the development
    machine. This emulation option is available both on OS X and Windows operating
    systems.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '![Emulators for Android](img/B04693_01_09.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9: AVD and Genymotion Emulators'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: This Android emulator uses the **Android Virtual Devices** (**AVD**) to emulate
    the Linux kernel and the Android runtime. It does not require any additional virtualization
    software to run, however, the lack of virtualization support makes AVD much less
    responsive and makes the startup time relatively longer. It also provides a wide
    range of emulation options for developers, from SMS and telephony to hardware,
    peripherals, and power events.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: The Genymotion emulator ([https://www.genymotion.com/](https://www.genymotion.com/))
    is one of the most popular emulation options for Xamarin and Android developers.
    Although it is available with a free license, the free version only allows for
    GPS and camera emulation. The Genymotion emulator runs on (and is installed with)
    VirtualBox virtualization software.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**VirtualBox together with Hyper-V**'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: Virtual Box software cannot be run alongside Hyper-V virtualization software,
    which is required for Windows Phone development and emulation on Windows operating
    systems. In order to use both the Windows Phone emulator and the Genymotion Android
    emulator, you can create a dual boot option to disable and enable Hyper-V on Windows
    start-up.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This would create a second boot option to start Windows without the Hyper-V
    feature so that the virtualization can be used by VirtualBox.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: The last and the most recent Android emulation option is the Visual Studio Android
    emulator. This Android emulator runs on Hyper-V and provides various device API
    versions and emulation options for developers.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '![Emulators for Android](img/B04693_01_10.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10: Visual Studio Android Emulator'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: The Visual Studio Android emulator is installed as part of the Visual Studio
    2015 installation and can also be installed as an extension later. The emulator
    provides a similar experience to the Windows Phone emulator and allows developers
    and testers to use almost the same set of emulation options with different device
    profiles as well as different API levels.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: iOS emulation
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: iOS emulation is only possible with the Xcode tools and iOS SDK. The iOS simulator
    can be started either directly on Apple OS X while developing with Xamarin Studio,
    or by pairing the build machine with the Visual Studio Xamarin extension running
    on Microsoft Windows. It also can be used to test both iPhone and iPad applications.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: A typical Xamarin solution structure
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Xamarin solution can be composed of different types of projects. Some of these
    projects are platform-specific projects and the others are shared project types
    or modules that make it possible to reuse code across platforms.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '![A typical Xamarin solution structure](img/B04693_01_11.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11: Xamarin project solution structure on Visual Studio and Xamarin
    Studio'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: Portable class libraries
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Portable class libraries are the most common way of sharing code between cross-platform
    projects. PCLs provide a set of common reference assemblies that enable .NET libraries
    and binaries to be used on any .NET-based runtime or with Xamarin compilers—from
    phones to clients, to servers and clouds. PCL modules are designed to use only
    a specific subset of the .NET framework and can be set to target different platforms.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '![Portable class libraries](img/B04693_01_12.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12: Portable Class Library Targets'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft has a designation for each target combination and each profile also
    gets a NuGet target. A subset of .NET libraries for portable class libraries were
    released through NuGet with the release of Visual Studio 2013\. This makes it
    possible for developers to release their work through NuGet packages, targeting
    a wide range of mobile platforms (see the *NuGet packages* section for more information).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The currently preferred profile and the greatest common subset for Xamarin projects
    is the so-called Profile 259\. The Microsoft support designation for this profile
    is the .NET Portable Subset (.NET Framework 4.5, Windows 8, Windows Phone 8.1,
    Windows Phone Silverlight 8) and the NuGet target framework profile is `portable-net45+netcore45+wpa81+wp8`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: While creating a PCL, the biggest drawback is the fact that no platform-specific
    code can be included in or referenced by the project. This caveat is generally
    addressed by the abstraction of platform-specific requirements or by using dependency
    injection or similar methods to introduce the implementation in platform-specific
    projects.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, in the device-specific peripheral example below, the common portable
    class library has a constructor that accepts two separate interfaces which can
    be injected with a dependency injection container or can be initialized with a
    device-specific implementation. The common library, in return, creates a business
    logic implementation, as shown:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Shared projects
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The term, shared project, was initially coined by the Microsoft team with the
    release of Universal Apps for Windows Phone and Windows Runtime (that is, Visual
    Studio 2013). With the arrival of Xamarin, shared projects can also be referenced
    by Android and iOS projects. These types of projects are essentially wrappers
    or containers for shared code and resource files that are linked to multiple projects
    and platforms. Shared file assets are included in the referencing projects later
    and compiled as part of these modules.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '![Shared projects](img/B04693_01_13.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13: Shared Projects'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: While using shared projects, developers should be careful when including platform-specific
    code since the shared elements will be included in all the referencing projects
    and compiled. Compiler directives (for example, `#if __ANDROID__`) can be introduced
    in shared projects to denote that certain parts of the code are only for a specific
    platform.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Visualizing platform-specific code in shared projects**'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: With Visual Studio (2013 or higher), it is possible to visualize different execution
    paths according to the combinations of conditional compilation constants.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '![Shared projects](img/B04693_01_14.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14: Visual Studio shared project editor'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio provides a dropdown in the top corner of the editor window which
    determines the platform-specific projects that are referencing the shared project.
    By selecting the project, you can see the disabled sections of the code, according
    the target platform.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: 'If we used the same example to take a photo, we would need to create two completely
    different implementations for the same action, as shown here:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用相同的示例来拍照，我们需要为同一操作创建两个完全不同的实现，如下所示：
- en: '[PRE2]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Xamarin.Forms
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Xamarin.Forms
- en: Xamarin.Forms is the unified library for creating UI implementations for target
    platforms to be rendered with native controls. Xamarin.Forms projects are generally
    created as PCL projects and can be referenced by Xamarin.iOS, Xamarin.Android,
    and Windows Phone development projects. Xamarin.Forms components can also be included
    in shared projects and can utilize platform-specific features.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin.Forms 是用于创建目标平台 UI 实现的统一库，这些 UI 实现将使用原生控件进行渲染。Xamarin.Forms 项目通常作为 PCL
    项目创建，并且可以被 Xamarin.iOS、Xamarin.Android 和 Windows Phone 开发项目引用。Xamarin.Forms 组件也可以包含在共享项目中，并可以利用平台特定的功能。
- en: Developers can effectively create common UI implementations with these forms,
    either declaratively (with XAML), or by using the API provided. These views, which
    are constructed with Xamarin.Forms components, are then rendered at runtime with
    platform-specific controls.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者可以使用这些表单有效地创建常见的 UI 实现，无论是声明式（使用 XAML），还是通过使用提供的 API。这些由 Xamarin.Forms 组件构建的视图，在运行时使用特定平台的控件进行渲染。
- en: Development projects can be realized with Xamarin.Forms by creating the data
    access model up until the UI components with a shared implementation, thus raising
    the amount of shared code between the platforms to as much as, or at times more
    than, 90%.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 开发项目可以通过创建数据访问模型直到 UI 组件的共享实现来实现，从而将平台之间的共享代码量提高到 90% 或更多。
- en: NuGet packages
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NuGet 包
- en: NuGet, which was initially an open source Microsoft initiative to share code
    among developers, has now become a much larger ecosystem. While NuGet servers
    can be used as an open source library-sharing platform, many development teams
    use NuGet as a private company repository for compiled libraries.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: NuGet 最初是微软的一个开源倡议，旨在在开发者之间共享代码，现在已经成为一个更大的生态系统。虽然 NuGet 服务器可以用作开源库共享平台，但许多开发团队将
    NuGet 用作私有公司仓库，用于存储编译后的库。
- en: NuGet packaging is a viable code-sharing and reuse strategy for Xamarin projects
    since it is supported by both Xamarin Studio and Visual Studio (with no further
    installation following Visual Studio 2012).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: NuGet 打包是适用于 Xamarin 项目的可行代码共享和重用策略，因为它得到了 Xamarin Studio 和 Visual Studio（在安装
    Visual Studio 2012 之后无需进一步安装）的支持。
- en: 'The NuGet target framework moniker for Xamarin projects is mono and there are
    further groupings such as MonoAndroid10, which refers to projects with a target
    framework of MonoAndroid version 1.0 or higher. Other platform targets are:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin 项目的 NuGet 目标框架名称为 mono，还有进一步的分组，例如 MonoAndroid10，它指的是目标框架为 MonoAndroid
    1.0 或更高版本的项目。其他平台目标包括：
- en: 'MonoAndroid: Xamarin.Android'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'MonoAndroid: Xamarin.Android'
- en: 'Xamarin.iOS: Xamarin.iOS Unified API (supports 64-bit)'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Xamarin.iOS: Xamarin.iOS 统一 API（支持 64 位）'
- en: 'Xamarin.Mac: Xamarin.Mac''s mobile profile'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Xamarin.Mac: Xamarin.Mac 的移动配置文件'
- en: 'MonoTouch: iOS Classic API'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'MonoTouch: iOS 经典 API'
- en: Developers are free to either re-use publicly available NuGet packages or create
    their own repository to store compiled packages to include in Xamarin projects.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者可以自由地重用公开可用的 NuGet 包或创建自己的仓库来存储编译包，以便包含在 Xamarin 项目中。
- en: Tip
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Creating NuGet packages in Visual Studio 2015**'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '**在 Visual Studio 2015 中创建 NuGet 包**'
- en: With the release of Visual Studio 2015, there is a new project template that
    should help developers to create and reuse NuGet packages.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 Visual Studio 2015 的发布，有一个新的项目模板可以帮助开发者创建和重用 NuGet 包。
- en: '![NuGet packages](img/B04693_01_15.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![NuGet 包](img/B04693_01_15.jpg)'
- en: 'Figure 15: The Visual Studio NuGet package project template'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15：Visual Studio NuGet 包项目模板
- en: 'More information on creating NuGet packages and publishing them can be found
    on the NuGet documentation hub: ([http://docs.nuget.org/create/creating-and-publishing-a-package](http://docs.nuget.org/create/creating-and-publishing-a-package))'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 关于创建 NuGet 包和发布的更多信息可以在 NuGet 文档中心找到：([http://docs.nuget.org/create/creating-and-publishing-a-package](http://docs.nuget.org/create/creating-and-publishing-a-package))
- en: Components
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组件
- en: Components are another approach to re-using compiled libraries and modules in
    Xamarin projects. The Component Store is built into both Xamarin Studio and Visual
    Studio and it has gathered a number of re-usable submissions from developers since
    its release in 2013\. Components can be downloaded and installed into projects
    in the same way as for NuGet packages by using the Xamarin Component Store. The
    Xamarin Component Store can be found at [https://components.xamarin.com](https://components.xamarin.com).
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 组件是另一种在Xamarin项目中重用编译好的库和模块的方法。组件存储库集成在Xamarin Studio和Visual Studio中，并且自2013年发布以来已经收集了来自开发者的许多可重用提交。组件可以通过使用Xamarin组件存储库以与NuGet包相同的方式下载并安装到项目中。Xamarin组件存储库可以在[https://components.xamarin.com](https://components.xamarin.com)找到。
- en: Quality in cross-development
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跨平台开发中的质量
- en: Some development terms help developers create robust, maintainable, high-quality
    code when developing for multiple platforms. These code descriptors help development
    teams identify architectural problems, software issues and random errors.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 一些开发术语有助于开发者在为多个平台开发时创建健壮、可维护、高质量的代码。这些代码描述符帮助开发团队识别架构问题、软件问题和随机错误。
- en: Reusability
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可重用性
- en: '*"How much of the code can be reused throughout the project?"*'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '*"在整个项目中可以重用多少代码？"*'
- en: Reusability is one of the key quality identifiers in cross-platform development
    projects. Xamarin, especially with the release of Xamarin.Forms, has provided
    developers with extensive resources to create platform-agnostic components that
    can decrease redundancy and reduce developer hours in complex projects. Code quality
    matrices generated by Visual Studio and unit test coverage results can convert
    this descriptor into a quantifiable measure.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 可重用性是跨平台开发项目中关键的质量标识之一。Xamarin，特别是随着Xamarin.Forms的发布，为开发者提供了丰富的资源来创建平台无关的组件，这可以减少冗余并减少复杂项目中的开发时间。由Visual
    Studio生成的代码质量矩阵和单元测试覆盖率结果可以将这个描述符转化为可衡量的度量。
- en: Abstraction
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 抽象
- en: '*"How much do the shared components know about the platform?"*'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '*"共享组件对平台了解多少？"*'
- en: It is almost unavoidable not to include platform-specific bits in cross-platform
    solutions. The level that these modules are abstracted to increases the robustness
    of the shared components and is closely related to how loosely the implemented
    logic is coupled with the underlying platform. In this way, the shared components
    can be tested easily with mock or fake libraries without having to create platform-specific
    test harnesses. Unit test code coverage results help determine the testability
    of the application.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在跨平台解决方案中，几乎不可避免地要包含特定平台的代码片段。这些模块抽象化的程度提高了共享组件的鲁棒性，并且与实现逻辑与底层平台耦合的松紧程度密切相关。通过这种方式，共享组件可以很容易地使用模拟或伪造的库进行测试，而无需创建特定平台的测试框架。单元测试代码覆盖率结果有助于确定应用程序的可测试性。
- en: Loose-coupling
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 松耦合
- en: '*"How easy is it to transpose the project into another platform?"*'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '*"将项目移植到另一个平台有多容易？"*'
- en: On top of the platform-specific abstracted implementation, an autonomous shared
    implementation layer creates flexible solutions which can easily be adapted to
    other platforms. Reducing the dependencies of the shared logic to the underlying
    platform not only inherently increases the reusability but also the agility of
    the development projects. The number of conditional compilation blocks or `if`
    or `else` loops for the underlying platform on shared projects identifies the
    amount of code executed according to the platform.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在特定平台的抽象实现之上，一个自主的共享实现层创建了灵活的解决方案，这些解决方案可以轻松地适应其他平台。减少共享逻辑对底层平台的依赖不仅本质上增加了可重用性，也提高了开发项目的敏捷性。共享项目中针对底层平台的条件编译块或`if`或`else`循环的数量确定了根据平台执行的代码量。
- en: Nativity
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原生性
- en: '*"How much does your application blend into the platform?"*'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '*"你的应用程序有多少程度与平台融合在一起？"*'
- en: Even though the ultimate goal while developing with Xamarin is to create an
    application that can be easily compiled onto multiple targets, the applications
    created with Xamarin should look, feel and behave as if they were designed for
    that specific platform. The UI paradigms and user interaction mechanisms of each
    platform should be respected while creating a common foundation. Nativity is more
    of a nominal and subjective measure when compared to the aforementioned code descriptors.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管使用Xamarin开发时的最终目标是创建一个可以轻松编译到多个目标的应用程序，但使用Xamarin创建的应用程序应该看起来、感觉和表现如同为该特定平台设计。在创建共同基础的同时，应尊重每个平台的UI范式和用户交互机制。与上述代码描述相比，原生性更多的是一个名义上的和主观的衡量标准。
- en: Summary
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have discussed some of the key features of the Xamarin development
    suite and development on previously described platforms and looked at Xamarin
    essentials for developing mobile applications. The remaining chapters refer to
    these key features and the differences between the platforms to identify valuable
    patterns and strategies to create cross-platform applications with Xamarin.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了Xamarin开发套件的一些关键特性，以及在这些先前描述的平台上的开发，并探讨了开发移动应用时Xamarin的基本要素。接下来的章节将参考这些关键特性以及平台之间的差异，以识别创建Xamarin跨平台应用的有价值模式和策略。
- en: The architectural overview of the target platforms and how Xamarin applications
    are developed and compiled on these platforms were also discussed. The most important
    difference between these platforms is that Xamarin.Android (and also Windows Phone)
    uses .NET binaries and mono (and .NET) runtime to execute code, whereas Xamarin.iOS
    applications have a completely different setup and double compilation (Ahead-of-Time)
    to make use of .NET binaries, but not to run them directly.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还讨论了目标平台的架构概述以及在这些平台上如何开发和编译Xamarin应用程序。这些平台之间最重要的区别是，Xamarin.Android（以及Windows
    Phone）使用.NET二进制文件和Mono（以及.NET）运行时来执行代码，而Xamarin.iOS应用程序具有完全不同的设置和双编译（编译时提前）来利用.NET二进制文件，但不是直接运行它们。
- en: Whilst developing for Android and iOS platforms with Xamarin, developers are
    also forced to select between different OS platforms and development IDEs. The
    selection and configuration of the development environment depends on the targeted
    platforms. IDE features and emulator and simulator options play an important role
    in this selection. While providing a familiar interface and letting the developers
    transfer their .NET-related skills and know-how, the OS X operating system together
    with Xamarin Studio is currently a more viable option for developing iOS applications.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Xamarin为Android和iOS平台开发时，开发者还被迫在不同的操作系统平台和开发IDE之间做出选择。开发环境的选取和配置取决于目标平台。IDE功能、模拟器和仿真器选项在此选择中扮演着重要角色。虽然OS
    X操作系统与Xamarin Studio提供了一个熟悉的界面，并允许开发者转移他们的.NET相关技能和知识，但目前它们对于开发iOS应用来说是一个更可行的选择。
- en: Another important refresher was for the Xamarin solution structure. We talked
    about how developers can share code between different platforms and re-use public
    or private stores to include shared modules. Shared projects make up the basis
    for most cross-platform development patterns and strategies together with portable
    class libraries.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要的更新是Xamarin解决方案结构。我们讨论了开发者如何在不同的平台之间共享代码，以及如何重用公共或私有存储库来包含共享模块。共享项目是大多数跨平台开发模式和策略的基础，与可移植类库一起。
- en: Overall, when using the Xamarin specifications and features, the main objective
    of developers should be to create loosely coupled, platform-agnostic modules that
    increase productivity and improve the quality of cross-platform development projects.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，当使用Xamarin规范和功能时，开发者的主要目标应该是创建松散耦合、平台无关的模块，以提高生产力和提升跨平台开发项目的质量。
