- en: Design Documentation
  prefs: []
  type: TYPE_NORMAL
- en: Writing game design documents (GDDs) is one of the main responsibilities of
    every game designer. The whole point of having a game designer in a team is to
    ensure that someone is taking care of putting everything about the game in black
    and white—someone able to define and communicate ideas, mechanics, and any other
    information the team might need to know in order to develop the game.
  prefs: []
  type: TYPE_NORMAL
- en: Many novice game designers (and game developers in general) look online or ask
    friends in the industry for a game design document template that they can use
    as a starting point for writing their own documentation. The general misconception
    is that if it worked for someone else, it will do for me.
  prefs: []
  type: TYPE_NORMAL
- en: As opposed to a game concept document, where there are established rules and
    information that must be included in a certain way (due to the selling purpose
    nature of the document), a GDD doesn't follow a determined structure or format,
    and the information it contains can greatly vary depending on the game, on the
    work methodology and on the team size and dynamics.
  prefs: []
  type: TYPE_NORMAL
- en: If you search online for a GDD template, what you are most likely to find is
    a classic standard template. Probably it was made in Word, probably 10 to 20 years
    ago. The template usually contains an outline that game designers are supposed
    to fill with their content, a document, that once filled, will most certainly
    reach at least 100 pages, if not more. A monolithic bible with all the possible
    information you can imagine. One that no one is going to read, not even yourself.
    It contains chapters such as character descriptions, input controls, dialogues,
    and an art assets list.
  prefs: []
  type: TYPE_NORMAL
- en: Game development has changed quite a lot since that kind of document template
    was released. What if your game doesn't have any dialogues? Or there are no characters
    at all? What if the input controls can only be described in association with a
    specific mechanic (for example, swiping for matching candies in Candy Crush Saga)?
    What if you're working on a huge game and filling all that information would require
    months which you don't have? Or maybe you're part of a team of designers and each
    needs to start working on a different aspect of the game at the same time? How
    can you work on the art assets list if you don't even know what the level designer
    is going to include in his or her levels?
  prefs: []
  type: TYPE_NORMAL
- en: All these queries caused a sort of crisis of GDDs in modern game development
    when the very usefulness of producing such documentation was questioned by many
    developers.
  prefs: []
  type: TYPE_NORMAL
- en: Luckily for us, we can say that the crisis has been now resolved. The answer
    is that no one needs that kind of game design document anymore. But of course,
    a GDD is essential to any project that aims to be successfully released. The secret
    lies in the fact that no template is good for your game. Every GDD is unique and
    the format and tools and techniques are simply the ones that work for you, your
    team, and the project. Reading those old templates, or even GDD examples released
    by developers, is still a useful exercise, one that I sincerely recommend. But
    when the time comes to write your GDD, use what you have learned from those templates
    and make sure you are building a document that serves your purposes, instead of
    one that covers all the bullets point made by someone else for a completely different
    project.
  prefs: []
  type: TYPE_NORMAL
- en: As you will have guessed by now, in this chapter we won't focus on what to write
    in a game design document. Instead, I'm going to provide a series of tools and
    techniques you can use to write your own document, in a way that works for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The purpose of a GDD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The characteristics of a good GDD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The tools available for creating GDD with pros and cons for each of them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A list of useful writing techniques
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Elegance in game design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintaining a GDD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the purpose of a GDD?
  prefs: []
  type: TYPE_NORMAL
- en: 'Documentation serves two purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: Providing the team with a detailed description of what needs to be done (communication)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Acts like a sort of encyclopedia of the game, where the team can keep track
    of what has been done and how, and what has changed (memory)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This means that the job of the game designer is not only to spec out the game
    on paper before any software is written, but also to ensure that everything that
    is written must be up to date. Whenever something changes down the line, or it
    is not implemented exactly as per documentation, it is important that the doc
    is updated. A great practice is to add comments about why (and how) the final
    implementation is different from the initial design. This kind of thing happens
    all the time in game development. In fact, no game designer has ever handed his
    document to the rest of team without being asked to modify or remove something
    that could be implemented in a better way or cannot be implemented at all. Like
    we said, game design is an iterative process, and writing documentation is no
    different.
  prefs: []
  type: TYPE_NORMAL
- en: Characteristics of a good GDD
  prefs: []
  type: TYPE_NORMAL
- en: Let's have a look at what makes a good game design document.
  prefs: []
  type: TYPE_NORMAL
- en: The characteristics we're going to describe in the following paragraphs are
    something that any GDD of any game should have.
  prefs: []
  type: TYPE_NORMAL
- en: Every time you're required to write a GDD, come back to this list and make sure
    everything you write conforms to it.
  prefs: []
  type: TYPE_NORMAL
- en: Every time you finish writing a GDD, go back again to this list and ask yourself
    whether your work possesses or not these characteristics and, if not, whether
    it's your particular case that doesn't require it or you have to adjust something.
  prefs: []
  type: TYPE_NORMAL
- en: 'A good GDD:'
  prefs: []
  type: TYPE_NORMAL
- en: Is modular
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Has goals and requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is the result of a discussion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is clear, brief, and concise
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is multimedia
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Leaves space for creativity and debate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is not necessarily only a text file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is online
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is modular
  prefs: []
  type: TYPE_NORMAL
- en: Generally speaking, the goal of the document is to communicate the game design
    to all the parties involved in game development. But it's very unlikely that the
    whole design is going to be covered by a single document. Some parts of the game
    might need to be designed as soon as possible, while others might wait for a later
    stage or even need to be designed after some of the features have been implemented.
  prefs: []
  type: TYPE_NORMAL
- en: A development team can reach over 200 people in AAA productions and many people
    will have a very specific role. Imagine if a programmer in charge of developing
    the multiplayer network was forced to read a 1,000-page document to understand
    what they needs. They will get information about levels, characters, storyline,
    or the balancing of the combat system… all stuff they doesn't need to understand
    to actually jump on what they needs to know.
  prefs: []
  type: TYPE_NORMAL
- en: Ideally, there would be a chapter just for him called Multiplayer. Even better,
    there would be an entirely separate document called Multiplayer. If this, let's
    say, 50-page document contains all the information the programmer needs, with
    fewer possible dependencies on other features or documents, we can call it a GDD
    in itself or a module.
  prefs: []
  type: TYPE_NORMAL
- en: A game document should always be modular.
  prefs: []
  type: TYPE_NORMAL
- en: 'What does modular mean? Let''s get more technical and look at how modularity
    is defined for software development by Wikipedia:'
  prefs: []
  type: TYPE_NORMAL
- en: '"Modular programming is a software design technique that emphasizes separating
    the functionality of a program into independent, interchangeable modules, such
    that each contains everything necessary to execute only one aspect of the desired
    functionality."'
  prefs: []
  type: TYPE_NORMAL
- en: Just like modular software, a modular GDD should be composed of different modules
    as independent and interchangeable as possible. Remember that video games are
    software and as such they can (and should) make good use of software development
    techniques at every level, not only for coding. Unlike software, though, it's
    very unlikely that a video game is going to be made of parts fully independent
    of each other. Removing one part of the game, or changing its design, will have
    an impact on the others, and without one part, the entire game might fall apart
    and not work as intended any more. However, that is exactly why you need to keep
    the GDD organized in modules. If something needed to change, you'd need the confidence
    of knowing which part to rework and exactly how and where it is referenced elsewhere
    in your documentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a very simple example: you have designed a combat system in an action
    game. Following the practice of modularity, you have created a separate document
    called Combat System, just for that feature, where all the details are meticulously
    designed. In other modules of the GDD, every time you have to reference a particular
    mechanic in the combat system, you simply point at the specific document on that
    topic. Let''s say at some point during production, something in the combat system
    must change drastically. If your references to the combat system document are
    very few and always in a form like see combat system document for details, all
    you''d have to do is make the required changes in that module only, and all the
    references will remain relevant.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As we discussed, GDD is by definition a live document, so it will need constant
    updates and changes, and sometimes entire parts may be cut out or added. Modularity
    ensures that taking out or changing a module doesn''t mean going back and updating
    the entire documentation. Most importantly, it guarantees that a change in one
    feature doesn''t impact the rest of the game, or if it does it gives control over
    where the dependencies are. Modularity ensures another important concept inherited
    from software development: reusability. A modular GDD is reusable because every
    single module can be used for different projects (if conveniently adapted). Writing
    a modular GDD means for you, the game designer, creating a library of designs
    for a variety of game features and mechanics that is easy to consult, examine,
    and improve throughout your entire career.'
  prefs: []
  type: TYPE_NORMAL
- en: Don't worry too much about creating a spectacular-looking GDD every time. The
    goal is to communicate in the best and most efficient way, not to show how pretty
    your documentation is. Reusing previous work (without violating any property rights)
    means not losing time reinventing the wheel and focusing more attention on what's
    new or different.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: It starts with goals and requirements
  prefs: []
  type: TYPE_NORMAL
- en: What is the goal of what you're about to write? What do you need to achieve
    and what kind of requirements are there? Some of the requirements and goals of
    the entire game have been already specified in the game concept, but with the
    GDD we are stepping deeper into the game. Therefore, we need to define goals and
    requirements for each different module.
  prefs: []
  type: TYPE_NORMAL
- en: Let's have a look at a practical example.
  prefs: []
  type: TYPE_NORMAL
- en: Hearthstone is a famous Collectible Card Game (CCG). When it was initially released
    in March 2014 the game was strictly multiplayer, with only PvP matches available
    (and a shallow single-player mode to test out card decks). After a few months,
    the Adventure mode was released, offering a single-player experience to Hearthstone
    players.
  prefs: []
  type: TYPE_NORMAL
- en: What goals and requirement could have been set for it?
  prefs: []
  type: TYPE_NORMAL
- en: If you know the game, try to make a list before reading further, and then compare
    your ideas with our list.
  prefs: []
  type: TYPE_NORMAL
- en: 'The set goals might look like these:'
  prefs: []
  type: TYPE_NORMAL
- en: Offer a single-player experience to Hearthstone players
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduce new cards and game boards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep non-competitive players engaged with the game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Expand the setting with storytelling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The requirements could be:'
  prefs: []
  type: TYPE_NORMAL
- en: Keep the game accessible (avoid introducing too much new content/too many new
    mechanics)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Versatile system to periodically introduce new adventures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep the old cards in balance with the new
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adhere to the Warcraft settings guidelines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Of course, these are not the official goals and requirements that Blizzard set
    for the development of the first Hearthstone adventure, Curse of Naxxramas, but
    that's how I would spec them out.
  prefs: []
  type: TYPE_NORMAL
- en: We already mentioned how important requirements and constraints are to creativity.
    Writing a game without knowing what can an
  prefs: []
  type: TYPE_NORMAL
- en: Writing down the goals and the requirements is also a great way to actually
    start writing! Blank page syndrome is well known by all game designers. Putting
    together ideas and creating a flow of words on paper to explain a design is not
    an easy task. Having a fixed structure to follow is always a great idea to start
    with!
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Is the result of a discussion
  prefs: []
  type: TYPE_NORMAL
- en: Once goal and requirements are defined, and some ideas have popped into your
    mind, it's time to have an early confrontation with other designers or the rest
    of the team that will be in charge of developing the feature.
  prefs: []
  type: TYPE_NORMAL
- en: It's never early enough to share ideas! The earlier you start brainstorming
    and sharing, the earlier you'll be able to catch pitfalls in your design or evolve
    your ideas to a more effective level.
  prefs: []
  type: TYPE_NORMAL
- en: Don't think that this part belongs to you. What you are thinking might be not
    feasible for technical reasons you're not aware of. Get the rest of the team involved!
  prefs: []
  type: TYPE_NORMAL
- en: Game programmers are the most important interlocutors at this point. They are
    the ones who will implement your design. You want to get them involved in the
    creative process and you want to make sure they know what they are going to work
    on before giving them the final document.
  prefs: []
  type: TYPE_NORMAL
- en: Brainstorming is an invaluable technique you need to master. There are no too
    crazy ideas during brainstorming; you have to stay open to criticism from others
    but avoid doing the same yourself and to anything that comes to mind. Rationalizing
    them and deciding what to use or not will come after the session. Wikipedia ([`https://en.wikipedia.org/wiki/Brainstorming`](https://en.wikipedia.org/wiki/Brainstorming))
    offers great insights on brainstorming that are worth reading.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: It's only after you have interrogated your ideas and designs with others that
    you'll finally be able to decide what to write. Remember that everything you'll
    be writing will be transformed into software and will require a lot of work by
    many different people. You don't want to get it wrong. Small mistakes and imprecision
    can trigger an avalanche effect that can translate into a massive waste of work
    for the team down the line. Again, this doesn't mean that everything must be written
    like in an instruction manual, but whatever you decide to write down needs to
    reduce confusion and ambiguities, not create more! If something cannot be precisely
    defined at this stage, don't be afraid to write that into the document!
  prefs: []
  type: TYPE_NORMAL
- en: Is clear, brief, and concise
  prefs: []
  type: TYPE_NORMAL
- en: A game designer can produce a lot of documentation, going into the finest details
    and exploring all the possible scenarios, but a document is useless if no one
    reads it. And a very long, too-specific document that requires hours of study
    and reading is most likely counterproductive.
  prefs: []
  type: TYPE_NORMAL
- en: Clarity means that the reader doesn't have to put in too much effort to read
    and understand what you're saying. It means going straight to the point and writing
    only what's necessary. It also means that it is comprehensive and covers all the
    necessary details. Game documentation is neither an essay nor an instruction manual.
  prefs: []
  type: TYPE_NORMAL
- en: A bullet point, such as a to-do list, is most likely too concise (although,
    it might work for very simple games), but on the other hand a lengthy text detailing
    too many irrelevant details or too-technical details won't do any good. If describing
    a feature takes more than a dozen pages, you probably need to split the feature
    into sub-features and describe them in different documents.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe you're working on the design of a guild system for an MMO, which might
    sound like a single feature, but it will turn out to be massive, as it usually
    includes social interactions, guild quests, guild versus guild systems, and maybe
    guilds halls. You should never tackle all that in a single document.
  prefs: []
  type: TYPE_NORMAL
- en: Using weak statements, or words such as could, might, or should, contributes
    to creating a sense of confusion in the reader, so avoid using those!
  prefs: []
  type: TYPE_NORMAL
- en: Is multimedial
  prefs: []
  type: TYPE_NORMAL
- en: A GDD is not just text. A picture is worth a thousand words, including sketches,
    concept art, reference pictures, or even examples from other video games (which
    could easily be in video format). These are great ways to convey information about
    how a specific system should work. In particular, using existing video games as
    a reference is perfectly fine.
  prefs: []
  type: TYPE_NORMAL
- en: It is unambiguous and can save both the designer and the reader a lot of time.
    There's no need to describe something that already exists in a lengthy manner.
    It's called not reinventing the wheel. If someone already did what you're trying
    to do, and you can reuse what's already been done…just do it!
  prefs: []
  type: TYPE_NORMAL
- en: As we already said, you don't have to be innovative in every aspect. On the
    contrary, using familiar mechanics where needed is as important as creating new
    breakthrough features. In the case of new mechanics, the GDD can contain a link
    to a playable prototype or footage of prototyped gameplay. Remember that as a
    designer you should always clearly describe what you’re showing in any media you
    are presenting. Showing a video of a particular game's combat system and just
    stating "Our game combat system works in the same way as the one shown in the
    video" is clearly a very bad way of writing documentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the other hand, if you''re working on a turn-based RPG that uses an initiative
    bar to show the player in which order the characters attack, you can definitely
    use a video or an image from an existing game:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In Grand Kingdom, as in many turn-based JRPGs, an initiative bar shows the combat
    order. This image is a perfect example that can be used as a reference for your
    initiative bar mechanic
  prefs: []
  type: TYPE_NORMAL
- en: It leaves space for creativity and debate
  prefs: []
  type: TYPE_NORMAL
- en: A game development team is usually composed of some very talented professionals.
    Creating documentation that doesn't leave any space for these people to express
    themselves through their work most certainly means that the team's potential will
    remain unexpressed.
  prefs: []
  type: TYPE_NORMAL
- en: This means that if you're writing about game characters, for example, you should
    limit your work to what is needed from a designer. Details such as how the character
    is dressed, how she moves, which sounds/soundtrack accompany her, might not need
    a formal specification and can be left to the artist's interpretation (unless
    those details serve some purpose in terms of gameplay and need to be directed
    by the game design). Likewise, even if you are a highly technical game designer,
    and though you may be able to write code yourself, you don’t want to tell a game
    programmer how to implement the code for a specific feature.
  prefs: []
  type: TYPE_NORMAL
- en: The idea is to communicate the intention rather than the implementation. Don't
    tell other people on your team how to do their job! Everyone in the team should
    be able and free to tackle the development challenges in the way he or she thinks
    is the best. It is highly probable that the same GDD handed to two different professionals
    will end up with the same result achieved in very different ways.
  prefs: []
  type: TYPE_NORMAL
- en: It's a matter of mutual trust; everyone trusts that your documentation is the
    design of a compelling feature for the player, so you have to trust that the team
    is going to do its best to realize it. For the same reason, don't expect to write
    a GDD and then just hand it over to the team and move on to your next thing.
  prefs: []
  type: TYPE_NORMAL
- en: Someone could raise questions or issues with something you've written, and these
    concerns have to be addressed and will eventually require an iteration on the
    document, fixing what doesn’t work or accounting for new, cleverer solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Even more probable, these problems might not arise until the actual development
    stage, meaning that they need prompt problem solving on the go. This is very much
    part of how game design works.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, it might happen that the actual implementation diverged from what
    was written in the GDD. Never think of the GDD as some sort of dogmatic instruction
    manual on how to develop the game. If the actual implementation accomplishes the
    game vision or even does something better than the original design, it's the GDD
    that needs to be changed, not what’s been implemented!
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: It comes in different formats and sizes
  prefs: []
  type: TYPE_NORMAL
- en: This should be clear already. A GDD it's not necessarily a text file written
    in a word processor. There are many types of software that can be used to write
    a GDD, which we're going to explore in the next paragraph. Different games of
    different sizes require different types of GDD.
  prefs: []
  type: TYPE_NORMAL
- en: The entire Office suite or Google Drive suite is usually required (Excel, PowerPoint,
    and Word, and their equivalents), but Word and PowerPoint can be replaced by a
    Wikia online, for example. Some games can be documented entirely on a blueprint
    such as document, a huge canvas where a mix of text and images can be arranged
    to convey the game design.
  prefs: []
  type: TYPE_NORMAL
- en: There are no fixed rules on this. You can even invent your own format if you
    feel like it. The only rule is to use the best tool for what you need to write.
  prefs: []
  type: TYPE_NORMAL
- en: The good news about all this variety is that most of the time, the Office/Google
    Drive suite would be more than enough, especially if you're just starting out.
    Learn and master as many tools as you can, and you will be able to tell which
    ones suit your requirements best.
  prefs: []
  type: TYPE_NORMAL
- en: It is online
  prefs: []
  type: TYPE_NORMAL
- en: This is not a choice in modern game development. If the tool you are using is
    not online, or you don't have a repository to upload your work and share it on
    the go with the rest of your team, you are simply doing it wrong.
  prefs: []
  type: TYPE_NORMAL
- en: Do yourself a favor and make the most of the incredible technology available
    nowadays! Even a sketchbook should always be scanned or captured with a camera
    and archived in digital format. Do it now, and thank yourself for having done
    so in a few years!
  prefs: []
  type: TYPE_NORMAL
- en: Common problems with offline documentation include files getting lost, documents
    shared via email and then being updated only on one end, difficulties in tracking
    the document version and change history, difficulties accessing files from different
    locations, and the list goes on and on.
  prefs: []
  type: TYPE_NORMAL
- en: Always make sure your documents are online and accessible from anywhere. And
    make regular backups!
  prefs: []
  type: TYPE_NORMAL
- en: Tools for writing a GDD
  prefs: []
  type: TYPE_NORMAL
- en: We have seen that there is a variety of tools a game designer can use to produce
    game documentation; the choice is not only about using one instead of another,
    but also about which one to use for any given feature.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on the scope of your game, the number of documents and resources you'd
    have to create will vary. The most important thing is to always have an index
    file where all the different documents and resources are tracked and referenced.
    Keep it up to date and always stay organized! During development, the game designer
    is the go-to person for any questions about the game; he is the expert. Being
    an expert on something that doesn't exist might be a colossal challenge, but that's
    your job and the more committed you are to this task, the more your team will
    benefit from your contribution.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: As we already mentioned when we talked about modularity, there's no need to
    have all your documentation in a single format. For the lore of an RPG game, a
    text file would be required, but that doesn't mean that another feature for the
    same game couldn't be written on a slide presentation or all the game items described
    in a spreadsheet.
  prefs: []
  type: TYPE_NORMAL
- en: We shall now take a look at some of the important tools required to write a
    GDD. Remember, always choose the right tool for what you are trying to communicate!
  prefs: []
  type: TYPE_NORMAL
- en: Word processors
  prefs: []
  type: TYPE_NORMAL
- en: A common misconception is that every GDD starts in Word, or Google Drive Documents,
    or another word processor. I've worked on many projects where no word processor
    has been used at all.
  prefs: []
  type: TYPE_NORMAL
- en: A text file is a good choice when a discursive approach is required.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some examples would be:'
  prefs: []
  type: TYPE_NORMAL
- en: Defining the storyline of a game or describing its lore
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Describing the characters or the environments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining the dialogues or the screenplay for cinematics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here are some pros and cons in choosing word processors for your GDD.
  prefs: []
  type: TYPE_NORMAL
- en: 'Pros:'
  prefs: []
  type: TYPE_NORMAL
- en: Indexing is straightforward, as a particular argument or feature can easily
    be found by page number
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Searching for specific content or keywords is always available and easy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simple formatting means it is easy and fast to maintain documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Minimal setup time makes this a great start for single-developer or small teams
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the same version control software for both documentation and code/assets
    means that changelogs can be directly linked from the document
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's difficult to lose track of revisions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's easy to work offline and update the online version later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cons:'
  prefs: []
  type: TYPE_NORMAL
- en: Collaborative work might be difficult; non-cloud-based word processors cannot
    be used by multiple users effectively
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using multimedia links or linking other documents can become messy pretty quickly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The page format of a word processor is not good for images, videos, or tables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualizing a document made in a specific format on a different machine can
    create compatibility problems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Very popular word processors are Microsoft Word, Apple Pages, and Google Documents
  prefs: []
  type: TYPE_NORMAL
- en: Presentations
  prefs: []
  type: TYPE_NORMAL
- en: A slide-based presentation is probably the most versatile tool to write documentation.
  prefs: []
  type: TYPE_NORMAL
- en: It allows you to easily integrate images, diagrams, and multimedia files. The
    spatial constraint of the slide format is a great way to keep the text brief and
    to the point. Modularity, again, is intrinsic to the tool. You can swap slide
    positions, copy them in other documents, color-code your slides by arguments,
    and mark a slide as one with dependencies, meaning it would need to be reviewed
    and updated if the document that references it gets changed.
  prefs: []
  type: TYPE_NORMAL
- en: A presentation can also be used to make UI prototypes; using hyperlinks and
    integrated drawing tools, it is possible to easily create a menu or a screens
    flow.
  prefs: []
  type: TYPE_NORMAL
- en: 'Pros:'
  prefs: []
  type: TYPE_NORMAL
- en: Versatility
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Being already in a presentation format, the GDD is easy to present or talk through
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The slide format helps in keeping it short and essential
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Easy to print
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modular format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Good for UI prototyping and screens flows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can be personalized with interesting formats
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cons:'
  prefs: []
  type: TYPE_NORMAL
- en: Collaborative work might be difficult
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not efficient for showing tables or big diagrams (spatial constraint)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud-based presentations can get slow if the file size is too big (too many
    slides and images)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can be personalized with interesting formats (yes, this is also a con; if you
    overdo this, or don't know how to make good-looking presentations, you can end
    up with really ugly things!)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apple Keynote, Microsoft PowerPoint, and Google Presentations are all great
    tools for writing presentations.
  prefs: []
  type: TYPE_NORMAL
- en: Mind maps
  prefs: []
  type: TYPE_NORMAL
- en: Mind maps are diagrams used to visually organize information. A mind map might
    not end up in the final GDD, but nonetheless is a great way to organize ideas
    and draft an outline of what will be written in more detail later. Game design
    is about solving problems and mind maps have proven a very effective tool across
    many disciplines. Every game designer should try to use them whenever he feels
    that simple writing or brainstorming is not helping to visualize on paper his
    ideas and thoughts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sometimes, including a mind map in the final GDD proves to be a great way to
    communicate the rationale behind decisions. This is particularly useful when working
    on collaborative documents or to inspire creativity in the reader:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00057.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A mind map can be used to describe a high-level idea for a generic fantasy RPG
    game
  prefs: []
  type: TYPE_NORMAL
- en: 'Writing a mind map is simple:'
  prefs: []
  type: TYPE_NORMAL
- en: Start with a central idea or a concept and write it down (possibly in the center
    of your page); that is your seed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write an idea or concept connected to your seed and draw a bold line that goes
    out from the seed and toward this new idea. It's just like a growing tree branch.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Start again for every new concept you write, using thinner lines as you move
    outward.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use images and different colors if you like.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Follow a radial hierarchy.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You shouldn’t think too much about what you’re writing or drawing; just keep
    working on expanding your seed for 10-15 minutes and then review your work. Usually,
    the results of this process will clarify your doubts or spark new ideas or solutions.
    This is another great technique to kick-start your writing work.
  prefs: []
  type: TYPE_NORMAL
- en: Some good pieces of software for writing mind maps are Xmind, Freemind, or Visio.
  prefs: []
  type: TYPE_NORMAL
- en: If you prefer a pen, colors, and a piece of paper, by all means, go for it!
    For a designer, it is always good, when possible, to interact with physical objects
    and use their hands, moving away from screens, mouse, and keyboard. If you choose
    to do so, by the way, never forget to scan or take pictures of your work and keep
    it organized in digital format!
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Spreadsheets
  prefs: []
  type: TYPE_NORMAL
- en: A spreadsheet is probably the most important tool in game design. While words
    and images can be used to describe a game, a spreadsheet can represent an entire
    game in numbers and simulate its rules before a single line of code is written.
    Some games, at a certain level of abstraction, are basically spreadsheets.
  prefs: []
  type: TYPE_NORMAL
- en: 'Imagine a game such as Age of Empires or another real-time strategy (RTS) game.
    Each unit, building, and resources is nothing but a set of numbers and those numbers
    determine everything that happens in the game. With some skill and a lot of patience,
    it is possible to program and play a simple RTS or RPG only using Excel. There
    is more: video games can contain an incredible amount of data and very complex
    economies. A spreadsheet is the only way to organize, visualize, and manage that
    data.'
  prefs: []
  type: TYPE_NORMAL
- en: We’ll talk about spreadsheets in depth later, when we talk about balancing;
    for now just keep in mind that this is an essential tool that should be used any
    time a set of values or objects has to be described. Balancing, though, is a separate
    phase from documentation and it’s usually done quite early in project development.
    Spreadsheets, nonetheless, have to be used from the very start.
  prefs: []
  type: TYPE_NORMAL
- en: 'To give you a practical example, let''s think about an RPG game such as Witcher
    3\. There are hundreds of items available in the game, each belonging to a particular
    category and with specific characteristics. These items need to be part of the
    initial design, and a spreadsheet is the best tool to list and organize them.
    The initial list can include only a few columns, for example, the category and
    a name, but later in development the same spreadsheet can be improved by adding
    numeric values: the damage for the weapons or the items needed for crafting.'
  prefs: []
  type: TYPE_NORMAL
- en: It is not only the functionalities made available from a spreadsheet that make
    it a great tool for a game designer. A spreadsheet can also be easily imported
    directly into game engines, allowing the game designer to interact with the game
    variables directly from it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Pros:'
  prefs: []
  type: TYPE_NORMAL
- en: Powerful tool to simulate and describe games
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prototype and balance simulations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Searchable and organizable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perfect for lists of objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can be imported right into the game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cons:'
  prefs: []
  type: TYPE_NORMAL
- en: Increase in complexity decreases readability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Complex systems are difficult to maintain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Doesn’t support images very well
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud-based spreadsheets can get slow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft Excel and Google Sheets are the standard spreadsheets every game designer
    should know.
  prefs: []
  type: TYPE_NORMAL
- en: Project management (PM) tools
  prefs: []
  type: TYPE_NORMAL
- en: These tools are designed to plan, organize, and manage projects of different
    natures, game design included. For bigger games, GDDs should be separate from
    production documents and tools to keep track of progress and schedules, which
    will most likely be created and maintained by different people (producers or project
    managers).
  prefs: []
  type: TYPE_NORMAL
- en: As a result, using PM tools could result in the game designer using only a minimal
    part of the entire software functionality—a complete overkill. For smaller projects
    or agile teams, though, game design features can be described as tickets, issues,
    or tasks in a PM tool, which will serve at the same time as a GDD and as a tracking
    tool.
  prefs: []
  type: TYPE_NORMAL
- en: Trello is a great example of PM software that can be used as a GDD for a small
    game.
  prefs: []
  type: TYPE_NORMAL
- en: 'Pros:'
  prefs: []
  type: TYPE_NORMAL
- en: Tracking development progress of each design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrated environment for bugs and issue tracking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allows you to assign designs to specific persons in the team
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time tracking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cons:'
  prefs: []
  type: TYPE_NORMAL
- en: Not as easy to use as a text file or presentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Underuse of the entire software package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Weak multimedia integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Difficult to export in different formats or to print
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The most interesting PM tool for GDD is Trello, but other software includes
    Jira, Hansoft, and Evernote.
  prefs: []
  type: TYPE_NORMAL
- en: Wiki
  prefs: []
  type: TYPE_NORMAL
- en: Wiki have confirmed themselves as one of the most powerful tools for game design
    in recent years. The growing and ever-changing amount of information needed in
    design documents found a perfect fit in online documentation that is designed
    to write, store, and organize complex information from many people over the internet.
  prefs: []
  type: TYPE_NORMAL
- en: Wikis have also become the go-to tools for player communities to store information
    about their favorite games. These fan-based game encyclopedias are useful tools
    for developers too, as it can be very difficult for a developer to discern between
    the development team and the player’s knowledge of a game.
  prefs: []
  type: TYPE_NORMAL
- en: 'Pros:'
  prefs: []
  type: TYPE_NORMAL
- en: Accessibility via browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Built-in categorization and indexing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Easy to search
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Easy to track changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hyperlinks to web resources allow browser navigation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Embedded multimedia files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can link to wiki pages directly from internal bug reports and other correspondence,
    making verification of a bug very easy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Version history and revision control typically built in
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Highly customizable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cons:'
  prefs: []
  type: TYPE_NORMAL
- en: Pages can get orphaned and unreachable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not as easy to use as a text file or presentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A wiki is not sequential, so it could be difficult to read from start to finish
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hard to comment or annotate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hard to print
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some great software for creating Wikis are Confluence, TWiki, and Wikia.
  prefs: []
  type: TYPE_NORMAL
- en: Illustration tools
  prefs: []
  type: TYPE_NORMAL
- en: Most designers use illustration tools to draw diagrams, but some designers work
    on User Interface (UI) and User Experience (UX) design as well (especially for
    mobile and browser games). Sometimes, even more complex illustration tools can
    be used to draw infographics or to give a particular format to a GDD.
  prefs: []
  type: TYPE_NORMAL
- en: Illustration tools are also used to explain some mechanics that require a visual
    explanation. Designing actions that a character can perform in an action game
    is a good example; it’s always a good idea to pair a textual description with
    an image.
  prefs: []
  type: TYPE_NORMAL
- en: Creating wireframes and click dummies is another important part of writing GDDs.
    A wireframe is essentially a sketch of the UI layout, made only using boxes and
    basic lines/shapes, without worrying about the final look. A click dummy is a
    prototype of the interactions the player can have on a specific screen or section
    of the game.
  prefs: []
  type: TYPE_NORMAL
- en: 'Wasting time writing how buttons work and where they lead might be a bad idea
    when it is possible to simply show it with a working prototype:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00034.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using wireframes to design the UI and complement the game design is a great
    way to convey both the mechanics and how the player is supposed to interact with
    them
  prefs: []
  type: TYPE_NORMAL
- en: Another important use of illustration tools is drawing maps and designing levels.
    Many times in your career (all the time, if you'll be working as a level designer)
    you will have to sketch out maps and levels before jumping on the actual level
    building (using a game engine or a level editor tool). Personally, I find this
    one of the most interesting parts of game design. I've been doing map design since
    I was a kid, playing games such as Dungeon & Dragons and Hero Quest.
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating dungeons to explore and puzzles to solve for my friends was my first
    approach to game design and game documentation, and I was only 12! If you haven’t
    played those games (pen and paper RPGs, or dungeon crawler board games) I highly
    recommend doing so. They will provide you some great insights into game design
    and player behaviors. Also, they are insanely fun, and it’s never too late to
    start:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00060.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Dungeons & Dragons is the ultimate source for maps and interesting dungeon/level
    design. This one is from the Starter Set of the 5th Edition
  prefs: []
  type: TYPE_NORMAL
- en: If this sounds interesting, there is a lot more about level design and maps
    later in this book!
  prefs: []
  type: TYPE_NORMAL
- en: Some commonly used software for drawing diagrams are Microsoft Visio and Dia.
  prefs: []
  type: TYPE_NORMAL
- en: Popular tools for creating (UI) wireframes and click dummies are Adobe Experience
    Design, PowerPoint, and Balsamiq.
  prefs: []
  type: TYPE_NORMAL
- en: All-round illustration tools that allow creating actual drawings are Adobe Photoshop,
    Illustrator, and GIMP.
  prefs: []
  type: TYPE_NORMAL
- en: Writing techniques
  prefs: []
  type: TYPE_NORMAL
- en: These are techniques borrowed from creative writing, presentation design, technical
    documentation writing, and best practices that game designers have used and refined
    over thousands of game projects.
  prefs: []
  type: TYPE_NORMAL
- en: Here follows a list of useful techniques to write effective GDDs.
  prefs: []
  type: TYPE_NORMAL
- en: Use of style
  prefs: []
  type: TYPE_NORMAL
- en: 'The style in which you write matters; as with any other document, you need
    to make sure your GDD is readable and attractive to look at:'
  prefs: []
  type: TYPE_NORMAL
- en: Use plenty of white space and divide argument paragraphs
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a serif font for body text, bold or capital letters for headers
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid any fancy or decorative fonts
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Use short sentences
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a hierarchical structure
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Layering details
  prefs: []
  type: TYPE_NORMAL
- en: When you write about something, you should always use a top-down approach to
    layering complexity. The first layer should already give a good general idea of
    what you’re talking about, and successive layers should go deeper into details.
  prefs: []
  type: TYPE_NORMAL
- en: Think about how journalists write articles for newspapers. When reading an article,
    you can generally always get the gist of the story by reading the headline, then
    the first sentence will back it up and give some explanation. The rest of the
    article will provide all the details needed.
  prefs: []
  type: TYPE_NORMAL
- en: Prioritize
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are describing a complex system that will be developed in different
    phases, or one that will need some iterations, always describe the system design
    in phases: the essential part of the features can be described first and marked
    in a specific color (for a prototype or MVP in initial development) with other
    parts of the feature described later and marked as successive iterations or nice
    to have.'
  prefs: []
  type: TYPE_NORMAL
- en: Use of keywords
  prefs: []
  type: TYPE_NORMAL
- en: Using keywords makes your document more readable and catches the reader's attention.
    Use bold or italics to emphasize keyword and important statements. A GDD is going
    to be read multiple times, and while the first one will hopefully be a thorough
    read, any successive consultation will need to focus on fewer details. The problem
    of using too many keywords, obviously, is that keywords will lose their importance,
    so think before you mark anything as more important. Remember, your document should
    already be lean and essential.
  prefs: []
  type: TYPE_NORMAL
- en: Table of Contents
  prefs: []
  type: TYPE_NORMAL
- en: Use a Table of Contents (always!) GDD as reference tools! Even for a shorter
    document, a Table of Contents with hyperlinks to the different sections is vital
    to access the required information quickly.
  prefs: []
  type: TYPE_NORMAL
- en: If a document goes through a lot of revisions, you might also want to consider
    integrating a version history.
  prefs: []
  type: TYPE_NORMAL
- en: Bullet points
  prefs: []
  type: TYPE_NORMAL
- en: Bullet points are effective and brief. They can act as a to-do list for the
    reader and cut off much useless and verbose writing. If you write them in a hierarchy,
    they also communicate priorities. Be sure not to create a wall of bullets points.
    If you end up with a list of more than ten elements, you're probably not focusing
    on the essentials, or not deconstructing your feature into small enough pieces
    that can be handled in separate sections or documents.
  prefs: []
  type: TYPE_NORMAL
- en: Images with captions
  prefs: []
  type: TYPE_NORMAL
- en: The use of images is almost mandatory for writing a clear GDD, but what really
    works is associating the images with meaningful captions. Maybe the concept you
    are showing is described in detail in a paragraph, but always reinforce what you
    are showing with an image. Even better, whenever possible try to describe the
    image with the caption only, or associate with an image a short bullet point list,
    with no other text whatsoever.
  prefs: []
  type: TYPE_NORMAL
- en: Diagrams
  prefs: []
  type: TYPE_NORMAL
- en: Many concepts of game design simply cannot be described with words. Use flowcharts
    to show screen flows or UX; use state machines to describe scenarios or player
    behaviors; use charts to represent data. Don't use too-complex diagrams that no
    one is going to understand, but most of all don't use diagrams to tell programmers
    how to do their jobs (even better, never tell anyone how to do their job!).
  prefs: []
  type: TYPE_NORMAL
- en: Variables
  prefs: []
  type: TYPE_NORMAL
- en: Avoid specifying numbers, numeric ranges, or any fixed values that are likely
    to change many times during development. Use variables instead, names that will
    represent those values, whatever they are going to be. This is also an effective
    way of writing pieces of documentation where some details are not yet defined,
    and automatically answers typical questions such as "How many of these are we
    going to have?" or "How long is this going to last?" Putting a variable in your
    design lets everyone know that a certain value must be kept flexible and open
    to change.
  prefs: []
  type: TYPE_NORMAL
- en: Redundancy
  prefs: []
  type: TYPE_NORMAL
- en: Cut unnecessary words and redundancy. Cut anything that feels like discursive
    writing or has been mentioned or explained already.
  prefs: []
  type: TYPE_NORMAL
- en: Hyperlinks
  prefs: []
  type: TYPE_NORMAL
- en: Use hyperlinks. You are not writing a printed book. Take advantage of hypertext
    but make sure its style is recognizable.
  prefs: []
  type: TYPE_NORMAL
- en: Write incrementally by drafting
  prefs: []
  type: TYPE_NORMAL
- en: Draft to understand the problem and write to solve it. Start writing your GDD
    as soon as possible and with no particular attention to detail. Make bullet points
    and outlines to identify the problem and use mind maps. Sometimes, even something
    that is clear in your mind can show its pitfalls and obscure points only when
    it is written in black on white. Solutions will come easily if the problem solving
    is part of the writing, especially when you are stuck trying to solve one problem
    only in your mind.
  prefs: []
  type: TYPE_NORMAL
- en: Elegance in game design
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the most important principles of good game design is elegance. We are
    going to talk about elegance in game design throughout the whole book, and it
    is a concept that hopefully you''re going to assimilate in every chapter. In your
    game designer career, you are going to hear it all the time: we need an elegant
    solution for this, look at how elegant this tutorial is, such elegance in this
    feature design. What are they talking about?'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you look at the meaning of the word elegance, two keywords are widely used
    to explain what it is: efficiency and simplicity.'
  prefs: []
  type: TYPE_NORMAL
- en: Games are extremely complex systems, so elegance in design is not a luxury,
    as the word might suggest, but a strict requirement. Elegant design means features
    and game mechanics that are simple to learn and hard to master. It means that
    despite the intrinsic complexity of the system, pretty much everyone should be
    able to interact with it. Elegance allows accessibility.
  prefs: []
  type: TYPE_NORMAL
- en: The classic example of elegance in game design is chess, a simple yet incredibly
    deep game that has been played for centuries and is still compelling and exciting
    nowadays. There are more modern examples of elegant game design though. Supercell's
    Clash Royale is certainly one of those. A CCG with not many cards and a simple
    real-time PVP arena is one of the most-played competitive games in video game
    history. It is incredibly simple, yet it offers so much depth and such a clever
    metagame design.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to notice that elegance doesn't mean quality. Some AAA games
    are famous for completely failing at being elegant. These games tend to be extremely
    complex to accommodate a demanding hardcore audience, but the greater the complexity,
    the lower the chances of achieving elegant solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Keep it short and simple (KISS)
  prefs: []
  type: TYPE_NORMAL
- en: This principle is also known as "Keep it simple, stupid!"
  prefs: []
  type: TYPE_NORMAL
- en: 'A very popular design principle, it was introduced in 1960 by the US Navy.
    The principle simply states that a system works best if it''s simple by design.
    As trivial as it may sound, Kelly Johnson, the lead engineer who coined it, made
    a very valid example to remind us how important it can be. It goes more or less
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Consider a jet aircraft that should be repaired by an average mechanic in the
    field under combat conditions with only a handful of basic tools.
  prefs: []
  type: TYPE_NORMAL
- en: Video games are complex systems, full of moving parts and made with advanced
    technologies. Compared to Johnson's maxim, we are talking about futuristic spaceships
    that only scientists in their labs might be able to repair.
  prefs: []
  type: TYPE_NORMAL
- en: To use the KISS principle as a game designer means making sure that this complexity
    is managed and not overused. To remove the superfluous, have a simpler system
    for the benefit of both the development team and the players.
  prefs: []
  type: TYPE_NORMAL
- en: As we already mentioned, iterating is a fundamental part of the development
    of a successful game. In order to effectively iterate and improve, at any stage
    of development, your game needs to be exactly like Johnson's aircraft.
  prefs: []
  type: TYPE_NORMAL
- en: The less-is-more principle
  prefs: []
  type: TYPE_NORMAL
- en: Another fundamental principle of game design is called less-is-more. It is a
    call for minimalistic design, in line with everything we have said so far.
  prefs: []
  type: TYPE_NORMAL
- en: But how do you apply this principle in practice?
  prefs: []
  type: TYPE_NORMAL
- en: 'The answer is pretty straightforward: while designing or prototyping a game,
    instead of adding features or mechanics on top of what you have, try to take something
    out.'
  prefs: []
  type: TYPE_NORMAL
- en: This is especially true when something doesn't quite work as expected. Usually,
    everyone is tempted to add something to the system to make it finally work. Most
    of the time this is a bad idea, as adding functionalities to something problematic
    at its core will never solve that original issue, and just hide it at best. In
    this case, it is a much better idea to take the time to dig into what's already
    there and find out what it is that causes the problem in the first place, then
    just try to remove it!
  prefs: []
  type: TYPE_NORMAL
- en: 'If you think about games such as Super Hexagon and Thomas Was Alone, you immediately
    get how minimalistic design can make, for example, your game art much simpler
    without affecting the gameplay or reducing its enjoyability:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00149.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Super Hexagon is a classic example of minimalistic design. The player controls
    a small triangle, and the game world consists of a central hexagon that attracts
    geometrical shapes
  prefs: []
  type: TYPE_NORMAL
- en: Minimalistic design is not only about art. Shadow of the Colossus is a great
    example of an incredible-looking game with minimalistic design. The less-is-more
    principle here is applied to enemy encounters. The game doesn't feature any minor
    enemy battles; there are only 16 enemies in the whole game, and they all are bosses.
    This unique approach to enemies in video games made this game stand out from anything
    else available at the time (and even now!)
  prefs: []
  type: TYPE_NORMAL
- en: We will talk more about this principle and see how it works in the following
    chapters about the creation of game mechanics.
  prefs: []
  type: TYPE_NORMAL
- en: The screenshots used in this chapter are for illustrative purposes only. We
    do not recommend you to misuse these in any way. For more information please consult
    the terms and conditions of the publishers mentioned in the Disclaimer section
    of this book.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Summary
  prefs: []
  type: TYPE_NORMAL
- en: Writing and maintaining a GDD is a huge part of an everyday game designer's
    responsibilities.
  prefs: []
  type: TYPE_NORMAL
- en: We have discussed the different tools for writing game documentation, with their
    pros and cons, and we have defined the characteristics of a good GDD.
  prefs: []
  type: TYPE_NORMAL
- en: Modularity, in particular, is what keeps GDDs still relevant in the modern game
    development world, characterized by fast iterations and agile methodologies.
  prefs: []
  type: TYPE_NORMAL
- en: We also explored some practical writing techniques that game designers use to
    write effectively and on time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have learned how to write and communicate a game design, we are
    ready to delve into the next section of this book: Designing the Gameplay.'
  prefs: []
  type: TYPE_NORMAL
- en: We will learn how to create game mechanics and how their interactions create
    what we call the gameplay.
  prefs: []
  type: TYPE_NORMAL
