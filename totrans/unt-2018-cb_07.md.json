["```cs\n    using UnityEngine;\n     public class PictureInPicture : MonoBehaviour {\n         public enum HorizontalAlignment {\n             Left, Center, Right\n         };\n\n         public enum VerticalAlignment {\n             Top, Center, Bottom\n         };\n\n         public HorizontalAlignment horizontalAlignment = HorizontalAlignment.Left;\n         public VerticalAlignment verticalAlignment = VerticalAlignment.Top;\n         public float widthPercentage = 0.5f;\n         public float heightPercentage = 0.5f;\n         private Camera camera;\n\n         void Start(){\n             camera = GetComponent<Camera>();\n         }\n\n         void Update() {\n             Vector2 origin = CalcOrigin();\n             Vector2 size = new Vector2(widthPercentage, heightPercentage);\n             Rect newCameraRect = new Rect(origin, size);\n             camera.rect = newCameraRect;\n         }\n\n         private Vector2 CalcOrigin() {\n             float originX = 0;\n             float originY = 0;\n\n             switch (horizontalAlignment) {\n                 case HorizontalAlignment.Right:\n                     originX = 1 - widthPercentage;\n                     break;\n\n                 case HorizontalAlignment.Center:\n                     originX = 0.5f - (0.5f * widthPercentage);\n                     break;\n\n                 case HorizontalAlignment.Left:\n                 default:\n                     originX = 0;\n                     break;\n             }\n\n             switch (verticalAlignment) {\n                 case VerticalAlignment.Top:\n                     originY = 1 - heightPercentage;\n                     break;\n\n                 case VerticalAlignment.Center:\n                     originY = 0.5f - (0.5f * heightPercentage);\n                     break;\n\n                 case VerticalAlignment.Bottom:\n                 default:\n                     originY = 0;\n                     break;\n             }\n\n             return  new Vector2(originX, originY);\n         }\n     }\n```", "```cs\n    [Range(20f, 150f)]\n     public float verticalFieldOfView = 90f;\n\n     [Range(0.25f, 2f)]\n     public float ascectRatio = 1f;\n\n     void Update()\n     {\n         Vector2 origin = CalcOrigin();\n         Vector2 size = new Vector2(widthPercentage, heightPercentage);\n         Rect newCameraRect = new Rect(origin, size);\n         camera.rect = newCameraRect;\n         camera.fieldOfView = verticalFieldOfView;\n         camera.aspect = ascectRatio;\n      }\n```", "```cs\n  using UnityEngine;    \n  public class CameraSwitch : MonoBehaviour  {\n         public Camera[] cameras = new Camera[3];\n         public bool changeAudioListener = true;\n\n         void  Update() {\n             if (Input.GetKeyDown(\"0\")) {\n                 EnableCamera(cameras[0], true);\n                 EnableCamera(cameras[1], false);\n                 EnableCamera(cameras[2], false);\n             }\n\n             if (Input.GetKeyDown(\"1\")) {\n                 EnableCamera(cameras[0], false);\n                 EnableCamera(cameras[1], true);\n                 EnableCamera(cameras[2], false);\n             }\n\n             if (Input.GetKeyDown(\"2\")) {\n                 EnableCamera(cameras[0], false);\n                 EnableCamera(cameras[1], false);\n                 EnableCamera(cameras[2], true);\n             }\n         }\n\n         private void EnableCamera(Camera cam, bool enabledStatus) {\n             cam.enabled = enabledStatus;\n\n             if(changeAudioListener)\n                 cam.GetComponent<AudioListener>().enabled = enabledStatus;\n         }\n     }\n```", "```cs\n    using UnityEngine;\n     using UnityEngine.UI;\n     using System.Collections;\n\n     public class TextureFromCamera : MonoBehaviour {\n         public GameObject imageFrame;\n         public GameObject rawImagePhoto;\n         public float ratio = 0.25f;\n\n         void  LateUpdate ()  {\n             if (Input.GetKeyUp(KeyCode.Mouse0))\n             {\n                 rawImagePhoto.SetActive (false);\n                 StartCoroutine(CaptureScreen());\n                 rawImagePhoto.SetActive (true);\n             }\n         }\n\n         IEnumerator CaptureScreen () {\n             RectTransform frameTransform = imageFrame.GetComponent<RectTransform> ();\n             Rect framing = frameTransform.rect;\n             Vector2 pivot = frameTransform.pivot;\n             Vector2 origin = frameTransform.anchorMin;\n             origin.x *= Screen.width;\n             origin.y *= Screen.height;\n             float xOffset = pivot.x * framing.width;\n             origin.x += xOffset;\n             float yOffset = pivot.y * framing.height;\n             origin.y += yOffset;\n             framing.x += origin.x;\n             framing.y += origin.y;\n             Texture2D texture = new Texture2D((int)framing.width, (int)framing.height);\n\n             yield return new WaitForEndOfFrame();\n             texture.ReadPixels(framing, 0, 0);\n             texture.Apply();\n             Vector3 photoScale = new Vector3 (framing.width * ratio, framing.height * ratio, 1);\n             rawImagePhoto.GetComponent<RectTransform> ().localScale = photoScale;\n             rawImagePhoto.GetComponent<RawImage>().texture = texture;\n         }\n     }\n```", "```cs\n  using UnityEngine;\n\n     public class TelescopicView : MonoBehaviour {\n         public float zoom = 2.0f;\n         public float speedIn = 100.0f;\n         public float speedOut = 100.0f;\n         private float initFov;\n         private float currFov;\n         private float minFov;\n         private float addFov;\n\n         void Start() {\n             initFov = Camera.main.fieldOfView;\n             minFov = initFov / zoom;\n         }\n\n         void Update() {\n             if (Input.GetKey(KeyCode.Mouse0))\n                 ZoomView();\n             else\n                 ZoomOut();\n         }\n\n         void ZoomView(){\n             currFov = Camera.main.fieldOfView;\n             addFov = speedIn * Time.deltaTime;\n\n             if (Mathf.Abs(currFov - minFov) < 0.5f)\n                 currFov = minFov;\n             else if (currFov - addFov >= minFov)\n                 currFov -= addFov;\n\n             Camera.main.fieldOfView = currFov;\n         }\n\n         void ZoomOut() {\n             currFov = Camera.main.fieldOfView;\n             addFov = speedOut * Time.deltaTime;\n\n             if (Mathf.Abs(currFov - initFov) < 0.5f)\n                 currFov = initFov;\n             else if (currFov + addFov <= initFov)\n                 currFov += addFov;\n\n             Camera.main.fieldOfView = currFov;\n         }\n     }\n```", "```cs\nusing UnityEngine.PostProcessing;\n```", "```cs\nprivate PostProcessingBehaviour postProcessingBehaviour;\n```", "```cs\n    void Start() {\n         initFov = Camera.main.fieldOfView;\n         minFov = initFov / zoom;\n         postProcessingBehaviour = GetComponent<PostProcessingBehaviour>();\n     }\n```", "```cs\n    void Update() {\n         if (Input.GetKey(KeyCode.Mouse0)) {\n             postProcessingBehaviour.enabled = true;\n             ZoomView();\n         }\n         else {\n             ZoomOut();\n             postProcessingBehaviour.enabled = false;\n         }\n     }\n```", "```cs\nusing UnityEngine.Rendering.PostProcessing;\n```", "```cs\nprivate Vignette vignetteEffect;\n public float vMax = 1f;\n```", "```cs\n    void Start() {\n         initFov = Camera.main.fieldOfView;\n         minFov = initFov / zoom;\n\n         PostProcessVolume volume = GetComponent<PostProcessVolume>();\n         volume.profile.TryGetSettings<Vignette>(out vignetteEffect);\n     }\n```", "```cs\n   void Update()\n     {\n         if (Input.GetKey(KeyCode.Mouse0))\n             ZoomView();\n         else\n             ZoomOut();\n\n         float currDistance = currFov - initFov;\n         float totalDistance = minFov - initFov;\n         float vMultiplier = currDistance / totalDistance;\n\n         float vAmount = vMax * vMultiplier;\n         vAmount = Mathf.Clamp(vAmount, 0, vMax);\n         vignetteEffect.intensity.Override(vAmount);\n     }\n```", "```cs\n    using UnityEngine;\n\n     public class MiniMap : MonoBehaviour {\n         public GameObject mapUI;\n         private Transform target;\n\n         void Start() {\n             target = GameObject.FindGameObjectWithTag(\"Player\").transform;\n         }\n\n         void Update() {\n             Vector3 compassAngle = new Vector3();\n             compassAngle.z = target.transform.eulerAngles.y;\n             mapUI.transform.eulerAngles = compassAngle;\n         }\n     }\n```", "```cs\n    using UnityEngine;\n     using Cinemachine;\n\n     public class FreeLookSwitcher : MonoBehaviour {\n         private CinemachineFreeLook cinemachineFreeLook;\n\n         private void Start() {\n             cinemachineFreeLook = GetComponent<CinemachineFreeLook>();\n         }\n\n         void Update ()  {\n             if (Input.GetKeyDown(\"1\"))\n                 cinemachineFreeLook.Priority = 99;\n\n             if (Input.GetKeyDown(\"2\"))\n                 cinemachineFreeLook.Priority = 0;\n         }\n     }\n```"]