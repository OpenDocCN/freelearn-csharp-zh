["```cs\nusing UnityEngine;\npublic class HealthSystem: MonoBehaviour\n{\n    [SerializeField] private int _healthMax;\n    private int _healthCurrent;\n    private void OnTriggerEnter2D(Collision collision)\n    {\n        // UNDONE: Test for a collision with a component\n        // that can damage us.\n        // UNDONE: HandleDamageCollision();\n        // UNDONE: Test for a collision with a component\n        // that can heal us.\n        // UNDONE: HandleHealCollision();\n    }\n}\n```", "```cs\n            private void Awake()\n            {\n                _healthCurrent = _healthMax;\n            }\n        ```", "```cs\n    internal void HandleDamageCollision\n        (Collider2D collision, IDamage damage)\n    {\n        // UNDONE: TakeDamage(amount);\n    }\n    ```", "```cs\n    internal void HandleHealCollision(IHeal heal)\n    {\n        // UNDONE: ApplyHealing(amount);\n    }\n    ```", "```cs\n    // UNDONE: Test for a collision with a component\n    // that can damage us.\n```", "```cs\n    private void OnTriggerEnter2D(Collision collision)\n    {\n        // Test for a collision with a component that can\n        // damage us.\n        if (collision.\n            TryGetComponent<IDamage>(out var damage))\n        {\n            HandleDamageCollision(collision, damage);\n        }\n        // Test for a collision with a component that can\n        // heal us.\n        else if (collision.\n            TryGetComponent<IHeal>(out var heal))\n        {\n            HandleHealCollision(heal);\n        }\n    }\n```", "```cs\ninternal interface IDamage\n{\n}\n```", "```cs\n    int DamageAmount { get; }\n```", "```cs\n    internal void HandleDamageCollision\n        (Collider2D collision, IDamage damage)\n    {\n        TakeDamage(damage.DamageAmount);\n    }\n```", "```cs\n    private void TakeDamage(int amount)\n    {\n        // UNDONE: Subtract from current health.\n        // UNDONE: HealthChanged();\n    }\n```", "```cs\n    private void TakeDamage(int amount)\n    {\n        _healthCurrent = Mathf.Max(_healthCurrent - amount,\n            0);\n        HealthChanged();\n    }\n```", "```cs\n    private void HealthChanged()\n    {\n        // UNDONE: If current health is greater than zero,\n        // notify the object with health.\n        // UNDONE: If current health is zero, the object\n        // with health dies/is destroyed.\n    }\n```", "```cs\nusing UnityEngine;\npublic class ProjectileDamage : MonoBehaviour, IDamage\n{\n    public int DamageAmount => _damageAmount;\n    [SerializeField] private int _damageAmount = 5;\n}\n```", "```cs\n    internal interface IHeal\n    {\n        int HealAmount { get; }\n    }\n    ```", "```cs\n        private void HandleHealCollision(IHeal heal)\n        {\n            ApplyHealing(heal.HealAmount);\n        }\n    ```", "```cs\n        private void ApplyHealing(int amount)\n        {\n            _healthCurrent = Mathf.Min(_healthCurrent + amount,\n                _healthMax);\n            HealthChanged();\n        }\n    ```", "```cs\nusing UnityEngine;\npublic class PickupHeal : MonoBehaviour, IHeal\n{\n    public int HealAmount => _healAmount;\n    [SerializeField] private int _healAmount = 10;\n}\n```", "```cs\nusing UnityEngine;\npublic class Destroyer : MonoBehaviour\n{\n    public float Delay = 0f;\n    public void DestroyMe()\n    {\n        if (Delay > 0)\n            Invoke(nameof(DestroyNow), Delay);\n        else\n            DestroyNow();\n    }\n    private void DestroyNow() => Destroy(gameObject);\n}\n```", "```cs\ninternal interface IDamage\n{\n    int DamageAmount { get; }\n    LayerMask DamageMask { get; }\n}\n```", "```cs\npublic class ProjectileDamage : MonoBehaviour, IDamage\n{\n    public LayerMask DamageMask => _damageMask;\n    [SerializeField] private LayerMask _damageMask;\n    …\n```", "```cs\n    internal void HandleDamageCollision\n        (Collider2D collision, IDamage damage)\n    {\n        if (damage.DamageMask\n            & (1 << gameObject.layer)) != 0)\n        {\n            TakeDamage(damage.DamageAmount);\n        }\n    }\n```", "```cs\ninternal interface IHeal\n{\n    int HealAmount { get; }\n    LayerMask HealMask { get; }\n}\n```", "```cs\npublic class PickupHeal : MonoBehaviour, IHeal\n{\n    public LayerMask HealMask => _healMask;\n    [SerializeField] private LayerMask _healMask;\n    …\n```", "```cs\n    private bool IsLayerInLayerMask(\n        int layer,\n        LayerMask mask)\n            => (mask & (1 << layer)) != 0;\n```", "```cs\n        private void HandleHealCollision(IHeal heal)\n        {\n            if (IsLayerInLayerMask(\n                gameObject.layer, heal.HealMask))\n            {\n                ApplyHealing(heal.HealAmount);\n            }\n        }\n```", "```cs\ninternal interface IHaveHealth\n{\n    void HealthChanged(int amount);\n    void Died();\n}\n```", "```cs\nusing UnityEngine;\npublic class Player : MonoBehaviour, IHaveHealth\n{\n}\n```", "```cs\npublic class Player : MonoBehaviour, IHaveHealth\n{\n    public void HealthChanged(int amount)\n    {\n        throw new System.NotImplementedException();\n    }\n    public void Died()\n    {\n        throw new System.NotImplementedException();\n    }\n}\n```", "```cs\npublic class HealthSystem : MonoBehaviour\n{\n    …\n    private IHaveHealth _objectWithHealth;\n    private void Awake()\n    {\n        …\n        _objectWithHealth = GetComponent<IHaveHealth>();\n    }\n```", "```cs\n    private void HealthChanged()\n    {\n        if (_objectWithHealth == null)\n        {\n            Debug.LogWarning($\"HealthSystem on \" +\n                $\"'{gameObject.name}' requires a \" +\n                $\"sibling component that inherits from \" +\n                $\"IHaveHealth!\", gameObject);\n            return;\n        }\n        if (_healthCurrent > 0)\n            _objectWithHealth.HealthChanged\n                (_healthCurrent);\n        else\n            _objectWithHealth.Died();\n    }\n```", "```cs\ninternal interface IDamage\n{\n    …\n    void DoDamage(Collider2D collision, bool isAffected);\n}\ninternal interface IHeal\n{\n    …\n    void DoHeal(GameObject healedObject);\n}\n```", "```cs\npublic class ProjectileDamage : MonoBehaviour, IDamage\n{\n    …\n    public UnityEvent<Collider2D, bool> OnDamageEvent;\n    public void DoDamage(Collider2D collision,\n        bool isAffected)\n            => OnDamageEvent?.Invoke(collision,\n                isAffected);\n}\n```", "```cs\npublic class PickupHeal : MonoBehaviour, IHeal\n{\n    …\n    public UnityEvent<GameObject> OnHealEvent;\n    public void DoHeal(GameObject healedObject)\n        => OnHealEvent?.Invoke(healedObject);\n}\n```", "```cs\n    internal void HandleDamageCollision\n        (Collider2D collision, IDamage damage)\n    {\n        var isAffected = IsLayerInLayerMask(\n            gameObject.layer, damage.DamageMask);\n        damage.DoDamage(collision, isAffected);\n        if (isAffected)\n            TakeDamage(damage.DamageAmount);\n    }\n```", "```cs\n    private void HandleHealCollision(IHeal heal)\n    {\n        if (IsLayerInLayerMask(gameObject.layer,\n            heal.HealMask))\n        {\n            heal.DoHeal(gameObject);\n            ApplyHealing(heal.HealAmount);\n        }\n    }\n```", "```cs\nusing UnityEngine;\npublic class EnemySpawner : MonoBehaviour\n{\n    [SerializeField] private Enemy _enemyPrefab;\n    [SerializeField] private float _spawnInterval = 5f;\n    [SerializeField] private int _maxSpawned = 3;\n    private int _objectCount = 0;\n    private void Start()\n        => InvokeRepeating(\n            nameof(SpawnEnemy), 0f, _spawnInterval);\n    private void SpawnEnemy()\n    {\n        if (_objectCount < _maxSpawned)\n        {\n            var enemy = Instantiate(_enemyPrefab,\n                transform.position, Quaternion.identity);\n            enemy.Init(DestroyedCallback);\n            _objectCount++;\n        }\n    }\n    public void DestroyedCallback() => _objectCount--;\n}\n```", "```cs\npublic class Enemy : MonoBehaviour, IHaveHealth\n{\n    private event UnityAction _onDestroyed;\n    internal void Init(UnityAction destroyedCallback)\n        => _onDestroyed = destroyedCallback;\n    private void OnDestroy()\n        => _onDestroyed?.Invoke();\n    …\n```", "```cs\n    public void Died() => Destroy(gameObject);\n```", "```cs\n    private void SpawnEnemy()\n    {\n        if (_objectCount < _maxSpawned)\n        {\n            …\n            if (enemy.TryGetComponent\n                <IBehaviorPatrolWaypoints>(out var patrol))\n                    patrol.SetWaypoints(\n                        _waypointPatrolLeft,\n                        _waypointPatrolRight);\n        }\n```", "```cs\n    public void SetWaypoints(\n        Transform left,\n        Transform right)\n    {\n        _waypointPatrolLeft = left;\n        _waypointPatrolRight = right;\n    }\n```", "```cs\npublic interface IBehaviorPatrolWaypoints\n{\n    …\n    void SetWaypoints(Transform left, Transform right);\n}\n```"]