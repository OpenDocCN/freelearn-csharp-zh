- en: '18'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Getting Started with UI Toolkit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Up to this point, the focus of this book has been on **Unity UI** (**uGUI**).
    However, Unity has been developing another system in which you can develop UI
    for your game: the **UI Toolkit**. It is based on the principles of web design
    and is meant to allow you to create UI in a more flexible and extensible way than
    the uGUI. It accomplishes this by divorcing the design and development of UI from
    scenes and GameObjects and instead creates UI via code and style sheets—just like
    in web design.'
  prefs: []
  type: TYPE_NORMAL
- en: The UI Toolkit is an entirely different system, so beginning development with
    it may feel jarring at first if you are used to developing UI with uGUI. However,
    if you have experience with `.xhtml` and `.css` or developing Android or iOS interfaces
    using `XML`, this should all feel very familiar.
  prefs: []
  type: TYPE_NORMAL
- en: Since the UI Toolkit is an entirely different system using entirely different
    principles than the rest of the chapters in this book, to fully explain all that
    you could do with it would merit a whole other textbook devoted purely to it.
    Therefore, this chapter will give you the basic information you need to get started
    with using the system, but not fully discuss every aspect of it. I will give you
    additional resources throughout this chapter to review if you’d like to go even
    further with your study of the UI Toolkit.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, I will discuss the following:'
  prefs: []
  type: TYPE_NORMAL
- en: An overview of the UI Toolkit and how to install it if it’s not already in your
    version of Unity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The various parts of the UI Toolkit that work together to create and style an
    interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are Visual Elements and how does the UI Toolkit Hierarchy work?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use the UI Builder to design and layout UI Toolkit interfaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to access UI Toolkit-built UI in C#
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a virtual pet that hangs out with you in your Unity Editor and encourages
    you
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the UI Builder to create style sheets and animation transitions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using web requests to randomly generate your UI’s images and text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This chapter assumes you have a cursory knowledge of HTML and CSS. However,
    having more extensive experience with HTML and CSS will make adopting the UI Toolkit
    system significantly easier.
  prefs: []
  type: TYPE_NORMAL
- en: Before we jump into the inner workings of the UI Toolkit, let’s review its use
    cases and when you will use it.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can find the relevant codes and asset files of this chapter here: [https://github.com/PacktPublishing/Mastering-UI-Development-with-Unity-2nd-Edition/tree/main/Chapter%2018](https://github.com/PacktPublishing/Mastering-UI-Development-with-Unity-2nd-Edition/tree/main/Chapter%2018)'
  prefs: []
  type: TYPE_NORMAL
- en: Overview of UI Toolkit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you may recall from [*Chapter 5*](B18327_05.xhtml#_idTextAnchor072), there
    are three total UI systems that can be used within Unity. Up to this point, the
    focus of this book has been on Unity UI (uGUI), which can be used to make in-game
    (aka runtime) UI. However, if you want to make UI that can be viewed in your Editor,
    you will have to use a different system. The two systems that can be used to create
    Editor UI are **IMGUI**, which we will discuss in the next chapter, and the UI
    Toolkit. However, while IMGUI can only be used to make Editor UI, the UI Toolkit
    can be used to make both runtime and Editor UI.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 18.1: Comparing the three UI systems](img/B18327_18_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.1: Comparing the three UI systems'
  prefs: []
  type: TYPE_NORMAL
- en: Unity’s goal is to replace the uGUI system entirely with the new UI Toolkit.
    However, it is still in development and does not have all the functionalities
    that uGUI does. For example, the UI Toolkit cannot make UI that is positioned
    in the 3D world, like what we discussed in [*Chapter 16*](B18327_16.xhtml#_idTextAnchor447).
    It can only make UI that overlays on top of the screen. Additionally, it cannot
    use custom materials and shaders and is not easily referenced from MonoBehaviours.
  prefs: []
  type: TYPE_NORMAL
- en: So, when would you want to use the UI Toolkit? The UI Toolkit is extremely helpful
    if you want to create stylistic UI without dealing with the bloat that comes along
    with prefabs and prefab variants. You can change the design of UI through code
    instead of altering a GameObject’s Inspector properties. This makes UI more easily
    sharable across multiple projects and quickly customizable. Additionally, if you
    have experience with web development, you may be more comfortable with the workflow
    of the UI Toolkit.
  prefs: []
  type: TYPE_NORMAL
- en: 'Odds are, if you are working on an older project, you will need the information
    discussed in this book that concentrates on uGUI as it is still the most widely
    used UI system. However, if you are creating a new project and would like to consider
    using the UI Toolkit for your project, I recommend you review the following documentation
    to ensure your needs will be met by this system: [https://docs.unity3d.com/Manual/UI-system-compare.xhtml](https://docs.unity3d.com/Manual/UI-system-compare.xhtml)'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve reviewed when you can use the UI Toolkit, let’s get started with
    it by installing it in our project.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the UI Toolkit package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Depending on which version of Unity you are using, the necessary UI Toolkit
    packages may not be installed. The version of the UI Toolkit that allows you to
    develop Editor UI comes packaged with all relatively recent versions of Unity;
    however, the version that allows you to also make runtime UI only comes with the
    most recent versions.
  prefs: []
  type: TYPE_NORMAL
- en: You can determine if you already have all necessary versions of the UI Toolkit
    package installed by going to **Window** | **UI Toolkit**. If the **UI Builder**
    submenu is not present or the UI Toolkit menu item is completely missing, you
    will need to import the package.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 18.2: Determining if you have the UI Toolkit package installed](img/B18327_18_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.2: Determining if you have the UI Toolkit package installed'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you need to install the UI Toolkit, you can do so by importing the package
    from the `git` URL. To do so, complete the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the package manager with **Window** | **Package Manager**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **+** button, then choose **Add package from** **git URL…**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 18.3: Adding a package via the git URL](img/B18327_18_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.3: Adding a package via the git URL'
  prefs: []
  type: TYPE_NORMAL
- en: Type `com.unity.ui` into the text field that appears. Make sure not to add a
    space after the address. If you do, you will receive an error message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the import finishes, you should see the following toolkit in your package
    window.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 18.4: The UI Toolkit package](img/B18327_18_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.4: The UI Toolkit package'
  prefs: []
  type: TYPE_NORMAL
- en: If you’d like to import the examples into your project, select the **Import**
    button to download them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You may notice that the UI Toolkit description says that the UI Builder is not
    included in this package. So, you must import that package separately. To do so,
    select the **+** button, then choose **Add package from git** **URL…** again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This time, enter `com.unity.ui.builder` into the textbox that appears.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the import finishes, you should see the following package.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 18.5: The UI Builder package](img/B18327_18_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.5: The UI Builder package'
  prefs: []
  type: TYPE_NORMAL
- en: As with the other package, there are samples you can import into your project
    with the **Import** buttons.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have the appropriate packages installed, let’s look at the various
    parts of the UI Toolkit system.
  prefs: []
  type: TYPE_NORMAL
- en: Parts of the UI Toolkit system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The UI Toolkit uses a set of assets and a GameObject component to create UI.
    The primary assets used to create UI are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: UI Document (UXML)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Style Sheet (USS)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Panel Settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Theme Style Sheet (TSS)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 18.6: Assets used when making UI Toolkit interfaces](img/B18327_18_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.6: Assets used when making UI Toolkit interfaces'
  prefs: []
  type: TYPE_NORMAL
- en: A `.uxml` extension). This file uses **Unity Extensible Markup Language** (**UXML**)
    to define the layout and structure of the UI. While UXML is a unity-specific markup
    language, it works similarly to other markup languages like HTML and XML. You
    can create UXML files by right-clicking in an Asset folder and selecting **Create**
    | **UI Toolkit** | **UI Document**, then naming the file appropriately.
  prefs: []
  type: TYPE_NORMAL
- en: A `.uss` extension). This file is used to designate style properties that can
    be referenced in a UXML file. This works very similarly to a CSS file when working
    with HTML. You can create USS files by right-clicking in an Asset folder and selecting
    **Create** | **UI Toolkit** | **Style Sheet**, then naming the file appropriately.
  prefs: []
  type: TYPE_NORMAL
- en: A `.asset` extension) defines the collection of properties that the UI will
    have.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 18.7: A default Panel Settings asset’s properties](img/B18327_18_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.7: A default Panel Settings asset’s properties'
  prefs: []
  type: TYPE_NORMAL
- en: A `.tss` extension). It determines which Panel Settings will be used with which
    TSS and USS files, by maintaining a collection of them, as shown in the following
    figure.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 18.8: The Inspector of a TSS file](img/B18327_18_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.8: The Inspector of a TSS file'
  prefs: []
  type: TYPE_NORMAL
- en: When you create a Panel Settings asset, a folder called `Unity Themes` is automatically
    created in the same folder. Within it, a single TSS file called `UnityDefaultRuntimeTheme.tss`
    will be created for you. However, you can create more TSS files by right-clicking
    in an Asset folder and selecting **Create** | **UI Toolkit** | **TSS** **Theme
    File**.
  prefs: []
  type: TYPE_NORMAL
- en: The final piece of the UI Toolkit system is the **UI Document** component, shown
    in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 18.9: The UI Document component](img/B18327_18_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.9: The UI Document component'
  prefs: []
  type: TYPE_NORMAL
- en: 'This component is added to a GameObject in your scene and allows your UI created
    with the UI Toolkit to be rendered. It has three properties: **Panel Settings**,
    **Source Asset**, and **Sort Order**.'
  prefs: []
  type: TYPE_NORMAL
- en: You assign a Panel Setting asset to the **Panel Settings** property to signify
    which settings the UI rendered by this component will have. The **Source Asset**
    property is where you assign the UI Document (UXML) file. The **Sort Order** property
    determines what order the UI defined by the UXML file will render relative to
    any other UXML files you are rendering in the scene that use the same Panel Settings.
    You can add this component to a GameObject by using **Add Component** in the **Inspector**
    and searching for **UI Document**.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know all the required assets and components, let’s review how to
    actually build these assets using the UI Builder.
  prefs: []
  type: TYPE_NORMAL
- en: Visual Elements and UI Hierarchy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the same way that a uGUI-built UI is comprised of multiple GameObjects, a
    UI Toolkit-built UI is comprised of **Visual Elements**. There are multiple UI
    elements available to you in the UI Toolkit system (buttons, labels, sliders,
    etc.), but the Visual Element is the base class for all of them, so they all derive
    many of their properties from it.
  prefs: []
  type: TYPE_NORMAL
- en: Just as GameObjects are organized in the Unity Editor Hierarchy, UI Toolkit
    organizes its Visual Elements in something called a **UI Hierarchy**. For example,
    let’s say I’d like to create a UI similar to the one displayed in *Figure 18**.10*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 18.10: Simple sample UI](img/B18327_18_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.10: Simple sample UI'
  prefs: []
  type: TYPE_NORMAL
- en: The Scene Hierarchy in the Editor, if it were built with uGUI, is quite similar
    to the UI Hierarchy, if it were created with UI Builder, as shown in *Figure 18**.11*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 18.11: Scene Hierarchy for uGUI versus UI Hierarchy for UI Toolkit](img/B18327_18_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.11: Scene Hierarchy for uGUI versus UI Hierarchy for UI Toolkit'
  prefs: []
  type: TYPE_NORMAL
- en: Except for some slight changes in naming and nesting, they are almost the same.
    Where you can consider the UI Document, represented by `Chapter18.uxml` in the
    UI Hierarchy acting with a similar function to the Canvas in the Scene Hierarchy.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The UI Hierarchy screenshot was obtained from the UI Builder tool, which we
    will discuss in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: When working with uGUI, the alignment and position of each GameObject is based
    on the parent object it is nested under. This is true also for Visual Elements
    created with the UI Toolkit system. So, having a sense of how items should be
    nested is important for developing UI with the UI Toolkit system.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You can find the example UI that was developed for *Figure 18**.10* and *Figure
    18**.11* within the Unity project provided in the code bundle. They can be found
    within the scene labeled **Chapter18.asset**. In the Scene Hierarchy, the **Canvas**
    GameObject holds the uGUI version and the the **UIDocument** GameObject holds
    the UI Toolkit version.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve reviewed some basic concepts of the UI Toolkit system, let’s
    look at how we can actually build UI with it.
  prefs: []
  type: TYPE_NORMAL
- en: Creating UI with the UI Builder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create UI with the UI Toolkit, you have to create a UI Document to describe
    what Visual Elements you will render as well as their layout and other properties.
    There are two ways to create UI Documents within the UI Toolkit system:'
  prefs: []
  type: TYPE_NORMAL
- en: Write the code that will lay out the Visual Elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lay the elements in UI Builder and have it write the code for you
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can also do a combination of both and bounce between editing your UI via
    code or the UI Builder.
  prefs: []
  type: TYPE_NORMAL
- en: To access the UI Builder, select **Window** | **UI Toolkit** | **UI Builder**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 18.12: The UI Builder window](img/B18327_18_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.12: The UI Builder window'
  prefs: []
  type: TYPE_NORMAL
- en: In this window, you can drag and drop various Visual Elements from the **Library**
    (bottom left) into the **Viewport** (center). You can resize and move the Visual
    Elements around in this Viewport, as well. You can change the parenting, thus
    changing how the Visual Element is aligned via the **Hierarchy** (left center).
    Additionally, you can also view the code file that is generated from your layout
    in the **UXML Review** Panel and the code files that represent your styles in
    the **USS Preview** Panel (both are in the bottom center). An example of walking
    through how to build a UI with the UI Builder is in the *Examples* section at
    the end of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: To be able to use the UI layout you’ve created with the UI Builder, you must
    save the UI Document as a .`uxml` file. Pressing *Ctrl* + *S* will save the file
    for you in a location of your choosing. I recommend you save them in a folder
    called `UI Toolkit` within `Assets`.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve reviewed how to create a UI Document, let’s review how to tie
    the document to your game’s scene.
  prefs: []
  type: TYPE_NORMAL
- en: You can rename any of your Visual Elements by double-clicking on them in the
    Hierarchy and typing a new name. When using the UI Builder, the names of the Visual
    Elements will act as variables if you need to reference them by C# code. So, it’s
    important to give the Visual Elements distinct names if you plan to access them
    via C# code (see the *Making the UI Interactable with Events* section for further
    information).
  prefs: []
  type: TYPE_NORMAL
- en: Using the UI Document component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned in the *Parts of the UI Toolkit System* section of this chapter,
    the UI Document component must be added to a GameObject in your scene so that
    the UI you’ve created can be rendered. You can do this by either adding the UI
    Document component to an existing GameObject or selecting **+** | **UI Toolkit**
    | **UI Document**. This GameObject will have a **Transform** component and a **UI**
    **Document** component.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 18.13: The Inspector of a UIDocument GameObject](img/B18327_18_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.13: The Inspector of a UIDocument GameObject'
  prefs: []
  type: TYPE_NORMAL
- en: If you do not already have a folder called `UI Toolkit` within your projects’s
    `Assets` folder, one will automatically be created for you. Within it, you will
    find a `PanelSettings` asset, and a folder called `UnityThemes`. Within `UnityThemes`,
    you will find a TSS file called `UnityDefaultRuntimeTheme.tss`. Your `UIDocument`
    GameObject’s `PanelSettings` asset assigned to the `.umxl` file you created into
    the **Source Asset** property to view the UI you created in your scene.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know the basics of building and rendering our UI, let’s look at
    how to code the interactions of UI created with the UI Toolkit.
  prefs: []
  type: TYPE_NORMAL
- en: Making The UI interactable with C#
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The UI Builder and your UXML document only handle the visual properties of your
    UI. While you can assign some basic responses (like changing visuals on hover)
    through the use of style sheets, you will need to create C# scripts to handle
    any logic or events related to your UI.
  prefs: []
  type: TYPE_NORMAL
- en: The UIElements namespaces
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To be able to write code that interfaces with UI Documents, you must use the
    `UnityEngine.UIElements` namespace. If you are using the UI Toolkit to make editor
    UI, you may also need the `UnityEditor.UIElements` namespace.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information about the **UnityEngine.UIElements** and **UnityEditor.UIElements**
    namespaces, see the following resource: [https://docs.unity3d.com/Packages/com.unity.ui@1.0/api/UnityEditor.UIElements.xhtml](https://docs.unity3d.com/Packages/com.unity.ui@1.0/api/UnityEditor.UIElements.xhtml).'
  prefs: []
  type: TYPE_NORMAL
- en: Getting a reference to UI Documents variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Within your C# script, you can create a reference variable to a `UIDocument`
    type. You can assign this variable in the same way you would generally assign
    a variable of another class: assigning it in the `GetComponent`, passing a reference
    to it from another script, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: While you can use **FindObjectOfType**, this is not recommended for finding
    a reference to a **UIDocument**, as you will very likely have multiple UI Documents
    in your scene.
  prefs: []
  type: TYPE_NORMAL
- en: After you get a reference to the `UIDocument` you want to work with, you can
    get a reference to the Visual Elements within it (e.g., the buttons, labels, etc.)
    by getting a reference to the root Visual Element on the UI Document, then `Querying`
    that element for the Visual Element type by its name.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, in the UI shown earlier in the chapter, I have renamed the `Label`
    to `DogLabel` and the `Button` to `CatButton`, as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 18.14: New names for Label and Button](img/B18327_18_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.14: New names for Label and Button'
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a reference to these variables in a C# script, I first created reference
    variables for the `UIDocument`, the `Label`, and the `Button`, with the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `uiDocument` variable will be assigned in the Inspector. As with all `MonoBehaviour`
    scripts, this script needed to be attached to a GameObject in the scene. I attached
    this script to the `UIDocument` GameObject and then dragged the `UIDocument` GameObject
    into the **Ui** **Document** property.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 18.15: Assigning the UIDocument to the script](img/B18327_18_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.15: Assigning the UIDocument to the script'
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that when you reference a `UIDocument` in C#, you are
    referencing the `UIDocument` component, not a UI Document source file.
  prefs: []
  type: TYPE_NORMAL
- en: To initialize `dogLabel` and `catButton`, I got a reference to the `rootVisualElement`
    on the `uiDocument`, then used the `Query` method to find each Visual Element.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Notice how I used `root.Q` to find the `Label` and `root.Query` to find the
    `Button`. You can use either one, and I only did this so you can see that there
    are two different ways to do it. It is up to your preference which one you use.
  prefs: []
  type: TYPE_NORMAL
- en: Managing Visual Element events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since the UXML document does not manage events, you can find out if the UI defined
    in the UXML document is interacted with by either subscribing to an event or registering
    a callback method when the event is triggered.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if I want to log a message in the Console when the `catButton`
    is clicked, I need to create a method that is subscribed to the `catButton`’s
    `clicked` event.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, I add the following method to my script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Then, I need to subscribe to the `catButton`’s `clicked` event, with the following
    in the `Start()` method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: To avoid any errors with the event subscription when the GameObject is disabled
    or destroyed, I unsubscribe from the event in the `OnDisable()` method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This causes the `OnCatButtonClicked` message to display in the Console whenever
    you click the button.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing Visual Element properties
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Similar to the way uGUI GameObjects can have their properties changed via C#
    code, a Visual Element can have its properties adjusted via C# code, as well.
    For example, changing the `OnCatButtonClicked()` method to the following will
    make the word `Text` change to `Meow!`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code causes the UI to appear as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 18.16: The UI after the text changes via a button click](img/B18327_18_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.16: The UI after the text changes via a button click'
  prefs: []
  type: TYPE_NORMAL
- en: There is a lot more I could say about working with the UI Toolkit, but as I
    said at the beginning of this chapter, I could only give a general overview—otherwise,
    I’d have to write a whole separate book just on the UI Toolkit! However, I believe
    I’ve given enough of an overview of the important concepts so that you can dive
    into working with the examples in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have the basic building blocks we need to get started with actually
    creating some UI with UI Toolkit. I didn’t dive deep into style sheets or the
    properties of the various Visual Elements, but I’ll show some examples that will
    expand upon that here. If after completing these examples, you want to learn more,
    see the *Resources* section for a bunch of examples and documentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'When using the UI Toolkit to develop UI, there are two main parts to the work:'
  prefs: []
  type: TYPE_NORMAL
- en: Laying out the UI with the UI Builder (or by editing the UXML document)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing C# code to add functionality to the UI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So, each of these examples will be broken into two parts: one for building
    the UI and the other for writing the functionality.'
  prefs: []
  type: TYPE_NORMAL
- en: Because the UI Toolkit can be used for both Editor and runtime UI, I’ll show
    you one example of both. Let’s start with the Editor example!
  prefs: []
  type: TYPE_NORMAL
- en: Using the UI Toolkit to make an Editor virtual pet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While the primary focus of this book is on runtime UI, I would be remiss to
    show you how to use the UI Toolkit to make some Editor UI, since that’s one of
    its main benefits. Editor UI is usually used for tools to facilitate development,
    improve productivity, streamline your workflow, and so on. Originally, I planned
    to show you how to make some generic Editor tools that you could expand to improve
    your workflow. However, I decided instead to make an Editor tool that can improve
    your mood. Self-care is essential to productivity, after all! While this example
    might not have any practical purposes in the traditional sense, it’s fun and it
    shows you how to use lots of Editor UI features, so it’s a win-win.
  prefs: []
  type: TYPE_NORMAL
- en: This example covers how to make a virtual pet that hangs out with you in a window
    in your Editor and compliments you when you click on it. This also demonstrates
    how to create animated sprite sheets within the Unity Editor.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 18.17: The Editor virtual pet created in this example](img/B18327_18_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.17: The Editor virtual pet created in this example'
  prefs: []
  type: TYPE_NORMAL
- en: 'The cat sprite used in this example is derived from the public domain art asset
    provided here: [https://opengameart.org/content/a-cat](https://opengameart.org/content/a-cat).'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For this example, since we are making an Editor Tool that is not related to
    any of the work we’ve done so far, you might want to create a new Unity project
    to complete this work in. If you do, you will need to reimport any 2D UI packages.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start with laying out the UI with the UI Builder!
  prefs: []
  type: TYPE_NORMAL
- en: Using the UI Builder to make our Editor Window’s UI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create the virtual pet shown in *Figure 18**.17*, complete the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: When writing code for your Editor, you should put all your editor code within
    an `Editor` folder. This signifies to Unity that any code within it is only to
    be used for the Editor and not at runtime. Create a folder in `Assets` called
    `Editor` and a folder within it called `Resource`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the `idleCat.png` sprite sheet found in the book’s source files into your
    newly created `Assets/Editor/Resources` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Import Settings** so that its **Texture Type** is **Sprite (2D and
    UI)** and **Sprite Mode** is **Multiple**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the **Sprite Editor** and you’ll notice that the images are extremely blurry.
    We need to edit the import settings further to fix this.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 18.18: The blurry sprite sheet](img/B18327_18_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.18: The blurry sprite sheet'
  prefs: []
  type: TYPE_NORMAL
- en: Return to the sprite’s `64` and **Compression** to **None**. Also, change the
    **Filter Mode** to **Point (****no filter)**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Apply** and the sprites should now be crisp pixel art cats.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, return to the `16` x `16`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 18.19: The sliced sprite sheet](img/B18327_18_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.19: The sliced sprite sheet'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Slice** button to confirm the changes, then select **Apply** to
    commit the changes. You can now close the **Sprite Editor**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have our sprite imported properly, we’re ready to build out the
    Editor UI in the UI Builder. Open the UI Builder with **Window** | **UI Toolkit**
    | **UI Builder**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `<unsaved file>.uxml` UI Document in the **Hierarchy** to bring up
    its properties in the **Inspector**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 18.20: The UXML file’s Inspector](img/B18327_18_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.20: The UXML file’s Inspector'
  prefs: []
  type: TYPE_NORMAL
- en: Now change `100` x `100`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the UI Document by selecting `Assets/Editor/Resources` folder and name
    the file `IdleCat.uxml` (the `.uxml` extension is automatically added for you).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let’s add the cat to the **Viewport**. Because we want to make the cat
    clickable, the easiest way to achieve this is to use a Button. Drag the icon from
    the **Controls Panel** to the **Viewport**. Note once you do so the Button will
    be positioned at the top of the container.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 18.21: Adding a Button](img/B18327_18_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.21: Adding a Button'
  prefs: []
  type: TYPE_NORMAL
- en: Select the `Button` in the **Hierarchy** to open its Inspector.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand the **Background** property so that you can change the look of the button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Sprite** from the dropdown menu next to the **Image** property. This
    will allow you to select images of **Sprite** type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 18.22: Changing the Background Image type to Sprite](img/B18327_18_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.22: Changing the Background Image type to Sprite'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the circle in the `idleCat_0`. You should see the following in your
    **Viewport** once you do so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 18.23: The Button with the cat image applied](img/B18327_18_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.23: The Button with the cat image applied'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get that text out of the way. At the top of the `Button` from the **Text**
    property.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 18.24: Removing the Text from the button](img/B18327_18_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.24: Removing the Text from the button'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s make it the appropriate dimensions. Expand the `auto` x `auto` to
    `64` x `64`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 18.25: Changing the button size](img/B18327_18_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.25: Changing the button size'
  prefs: []
  type: TYPE_NORMAL
- en: Visual Elements always initialize in the UI Document root container at the top-left
    corner. If you want to be able to position them within the container, you have
    to create a high-level Visual Element that acts as the “shell” in which all the
    other items can be positioned within. So, to make this `Button` centered within
    the window, we will need to add a Visual Element to contain it. Drag `VisualElement`
    from the **Library** into the **Hierarchy**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 18.26: Adding a Visual Element to the Hierarchy](img/B18327_18_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.26: Adding a Visual Element to the Hierarchy'
  prefs: []
  type: TYPE_NORMAL
- en: Within the `Button` onto the `VisualElement`. This will cause the `Button` to
    be a child of the `VisualElement`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 18.27: Making the Button a child of VisualElement](img/B18327_18_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.27: Making the Button a child of VisualElement'
  prefs: []
  type: TYPE_NORMAL
- en: Select `VisualElement` from the **Hierarchy** to open its **Inspector**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You may notice that the `VisualElement` does not fully fit within the root container.
    Expand the `1`. This will cause the `VisualElement` to fill the whole root container.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 18.28: Updating the Grow property](img/B18327_18_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.28: Updating the Grow property'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s center the cat within the `VisualElement`. Expand the `VisualElement`
    and center for both the **Align Items** and **Justify** **Content** properties.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 18.29: Adjusting the Align properties of the VisualElement](img/B18327_18_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.29: Adjusting the Align properties of the VisualElement'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s change the background color of the `VisualElement`. In the `BE8D8D` by
    selecting the color block and typing `BE8D8D` into the **Hexidecimal** property.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 18.30: Adjusting the VisualElement’s background color](img/B18327_18_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.30: Adjusting the VisualElement’s background color'
  prefs: []
  type: TYPE_NORMAL
- en: Now, it’s easy to see there’s some background and border around our cat `Button`
    that we don’t want. To remove this, select the `Button` and change its background
    color so that the alpha is `0`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 18.31: Removing the Button’s background color](img/B18327_18_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.31: Removing the Button’s background color'
  prefs: []
  type: TYPE_NORMAL
- en: 'There is still a border around the `Button` that we don’t want. Expand the
    `0`. You should now have the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 18.32: The final UI look](img/B18327_18_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.32: The final UI look'
  prefs: []
  type: TYPE_NORMAL
- en: We’re almost done with the UI Builder. The last thing we need to do is rename
    `Button` so that it will be easily accessible in our C# code. Double-click on
    `Button` in the `CatButton`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Save your work by pressing *Ctrl* + *S* and we’re done! You should have the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 18.33: The IdleCat.uxml Hierarchy with appropriate names](img/B18327_18_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.33: The IdleCat.uxml Hierarchy with appropriate names'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If a **UIDocument** GameObject was added to your currently open scene, you may
    see a warning about a Panel Setting missing in your **Console**. You can just
    delete this GameObject and dismiss the error message.
  prefs: []
  type: TYPE_NORMAL
- en: Now that our UI is fully laid out, we can write the code to start adding in
    the functionality!
  prefs: []
  type: TYPE_NORMAL
- en: Writing C# code to make our Editor Window and add functionality
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To get our cat to appear as a window in our Unity Editor and have functionality,
    we need to write some C# Editor code. There are a few things we want the cat to
    do:'
  prefs: []
  type: TYPE_NORMAL
- en: Appear in a floating window when you use a **Tools** menu or use pre-defined
    hotkeys
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Say “meow” when you hover over it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compliment you in the **Console** when you click on it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sit with a looping idle animation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Play a standing animation when you click on it (aka pet it)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can achieve all of this in one C# script. To have your virtual pet appear
    in a window within your Unity Editor, complete the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Within your `Editor` folder, create a C# script called `IdleCat.cs` and open
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The first thing we need to do is change our script from a `MonoBehaviour` to
    an `EditorWindow`. Change the class definition to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will automatically add the `UnityEditor` namespace.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We will have the window appear by selecting `IdleCat.cs` script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code, the `[MenuItem("Tools/I'm Lonely _%#K")]` line creates
    the `ShowIdleCat()` method when it is selected. `_%#K` signifies that this can
    also be achieved with the *Ctrl* + *Shift* + *K* shortcut.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following lines instantiate the window and set its title to **Kitty**:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your code and you should see the menu item in your Editor. Clicking it
    or typing *Ctrl* + *Shift* + *K* should bring up a window named **Kitty**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 18.34: The Tools menu and the Kitty window](img/B18327_18_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.34: The Tools menu and the Kitty window'
  prefs: []
  type: TYPE_NORMAL
- en: 'Your window may be a different size than mine. Don’t worry. Let’s set the size
    via code. Add the following two lines of code to your `ShowIdleCat()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will not automatically change the size of your currently open window, because
    this function only runs when you use the menu item or the shortcut keys. You can
    now resize your window by doing one of those actions now. You do not need to close
    the window. You can do this while it is still open.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: One thing to note is that Editor Windows can be docked throughout the Unity
    Editor. So, the size of your window can change based on where the user docks it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, we need to reference the UI Document we created with the UI Builder in
    this script. Since this is an Editor script, it can’t be attached to a GameObject.
    That means we can’t assign the variable via drag and drop or using `GetComponent`.
    Instead, we will have to load it via from our `Editor/Resources` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When working with Editor UI, the `CreateGUI()` method is an Event Function used
    to initialize the UI.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Write the following code, making sure to add the `UnityEngine.UIElements` namespace
    to the top of the script:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This code block does a few things. First, it gets the `rootVisualElement` of
    the Editor Window we have created. Then, it finds the `IdleCat.uxml` file by searching
    for a `VisualTreeAsset` named `IdleCat` within the `Editor/Resources` folder.
    Then, it clones the `IdleCat.uxml` UI Document and places it within the window’s
    root.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you return to the Editor, you should now see your Kitty on the pink background
    in your open window.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 18.35: The window with the appropriate size and UI Document](img/B18327_18_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.35: The window with the appropriate size and UI Document'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to get access to the button. Add the following variable declaration
    to your script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To assign the `catButton`, we need to `Query` the `root` object. Add the following
    line to your `CreateGUI()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, let’s have the tooltip appear when we hover over the button. Add the
    following line of code to the `CreateGUI()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After you save the script, you should be able to immediately see these changes
    reflected in your Editor. (Note that my screenshot tool doesn’t capture the mouse
    cursor, so it is not shown in the following figure.)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 18.36: The meow tooltip](img/B18327_18_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.36: The meow tooltip'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can have the cat compliment you when you click on it. First, let’s
    create a new method called `OnCatButtonClicked()` that shows the `"You''re doing
    great!"` message in the Console. Add the following code to your script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need to have the `OnCatButtonClicked()` method subscribe and unsubscribe
    to the click event on `catButton`. Add the following line to your `CreateGUI()`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also, create the following `OnDisable()` method:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Once you save, you can already see the cat compliment you in the Console when
    you click on it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 18.37: The complimenting cat](img/B18327_18_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.37: The complimenting cat'
  prefs: []
  type: TYPE_NORMAL
- en: Our last two goals for our virtual pet involve animating it. This takes a bit
    of effort. We can’t use a Unity animation to achieve it because we’re in the Editor.
    So, we have to write code that will swap out the background on our `catButton`
    with the appropriate image via code on some kind of timer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One way to do this is with **coroutines**, but unfortunately, coroutines do
    not work by default in the Editor. However, we can use coroutines in our Editor
    by importing the Editor Coroutines package from Unity.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To do that, select **Window** | **Package Manager** to open the **Package Manager**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Select **Package: Unity Registry** from the dropdown to view all available
    Unity packages.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 18.38: Changing which packages appear in the Package Manager](img/B18327_18_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.38: Changing which packages appear in the Package Manager'
  prefs: []
  type: TYPE_NORMAL
- en: Now, scroll until you see **Editor Coroutines**. It will likely be locked. If
    it is, select **Unlock**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 18.39: Unlocking the Editor Coroutines package](img/B18327_18_39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.39: Unlocking the Editor Coroutines package'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you’ve unlocked the Editor Coroutines package, you can add the following
    namespace to the top of your `IdleCat.cs` script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, we can use `EditorCoroutines` in our code! They work pretty similarly to
    regular coroutines. But, before we write our first Editor coroutine to control
    our animations, let’s get access to the images we’ll want to use in our animation
    and write some helper functions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'I want the cat to have two animations: an idle animation and a petting animation
    (which will be triggered by the mouse click). I’ll store the images for these
    animations in two separate Lists. To use them as background images, I’ll need
    to store them in lists of `StyleBackgrounds`. Add the following to your class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Before we can store the appropriate sprites in those Lists, we need to get
    a reference to all of the sprites from the sprite sheet. We’ll do this similarly
    to how we found the UI Document file earlier. Add the following line of code to
    your `CreateGUI()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will look in the `Editor/Resources` folder and store all of the sprites
    with the name `idleCat` to the `allSprites` array.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following frames will represent the specific animations:![Figure 18.40:
    Which sprites go to which animation](img/B18327_18_40.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 18.40: Which sprites go to which animation'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, we need to loop through the `allSprites` array and divvy those sprites
    up into the correct list. We can do so by adding the following code to the `CreateGUI()`
    method:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Before we can write the methods that swap out the background with the correct
    image, we need to add a variable that will keep track of which frame of which
    animation the button is currently displaying. Add the following variable initialization
    to your class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'OK, now we need to write methods that will increase the `animationIndex` and
    set the `catButton`’s `backgroundImage` to the appropriate sprite. Add the following
    method to your class to control the animation for the idle animation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notice that when the index is out of range, it loops back around to `0`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add a similar method to control the petting animation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The **IdleAnimation()** and **PettingAnimation()** methods have some reusable
    code and could be refactored for brevity; however, for clarity, I will keep it
    the way it is.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we’re ready to use an `EditorCortoutine` to call these methods and get
    the animations playing. Let’s start by creating the following Editor coroutine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will create an infinite loop that runs the `IdleAnimation()` method every
    second.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We need to start the Editor coroutine that we wrote in the previous step. Add
    the following code to your `CreateGUI()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you return to your Editor, you should be able to see the cat flicking its
    tail while it loops through its idle animation. Now, we need to write some code
    that will make the petting animation play when you click on the cat. To do this,
    we need another variable. Add the following to your class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This variable will keep track of whether or not the cat should be idling.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following to the `OnCatButtonClicked()` method to signify cat should
    no longer be idle once it is clicked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `NextAnimationFrame()` Editor coroutine so that it switches between
    the idle and petting animations based on the `idle` variable. The code in bold
    is new:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Currently, if you click on the cat, it will enter the petting animation, but
    it will keep looping through that animation indefinitely. We need it to go back
    to the idle animation once the petting animation completes. Update the `PettingAnimation()`
    method to include `idle = true` inside the `if` statement. This will reset the
    `idle` variable to `true` when the animation is complete.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We’ve officially completed everything we set out to do, but there is one problem
    with our code. If you put a `Debug.Log` in the coroutine’s `while` loop and then
    close the `Debug.Log` keeps printing in the Console! We need to stop that coroutine’s
    `while` loop when the window closes. To do that, add another variable to your
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the `while` loop within the `NextAnimationFrame()` coroutine to the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we just need to set `windowOpen` to `false` when the window closes. So,
    add the following to the `OnDisable()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That’s it! You should now have a little kitty friend that hangs out with you
    while you work. Click on her whenever you need a little pick-me-up.
  prefs: []
  type: TYPE_NORMAL
- en: Using the UI Toolkit to make a menu with style sheets and animation transitions
  prefs: []
  type: TYPE_NORMAL
- en: We’ll look at how to use the UI Builder to create a basic menu that uses style
    sheets and transition animations, then we’ll hook up buttons within the menu to
    access web data and randomly generate content in this example.
  prefs: []
  type: TYPE_NORMAL
- en: Since the last example was a virtual pet meant to bring you happiness, I decided
    to stick with the theme of “self-care” for this example, as well. The following
    figure is a screenshot of the UI we will make with a randomly generated image
    of a cat and a quote retrieved from the web.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 18.41: The UI menu with randomly generated content](img/B18327_18_41.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.41: The UI menu with randomly generated content'
  prefs: []
  type: TYPE_NORMAL
- en: Pressing the **Charm Me** button will randomly generate a cat picture and pressing
    the **Inspire Me** button will randomly generate an inspirational quote. Additionally,
    the buttons change color when hovered over and clicked on while animating to a
    slightly bigger shape.
  prefs: []
  type: TYPE_NORMAL
- en: As with the previous example, we will start by laying out the UI with the UI
    Builder.
  prefs: []
  type: TYPE_NORMAL
- en: Using the UI Builder to lay out a menu, make style sheets, and make animation
    transitions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create the UI shown in *Figure 18**.41*, complete the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new scene called `Chapter18-Examples`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click in the Scene Hierarchy and select `Assets` folder called `UI Toolkit`.
    It will contain a `PanelSettings` asset and a `Unity` `Themes` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the `UI Toolkit` folder, right-click and select `InspirationalMenu.uxml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the new UXML file into the `UIDocument` GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Just so that we have the same Game view resolution, set your Game scene view
    to **840x630**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 18.42: Setting your Game view resolution](img/B18327_18_42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.42: Setting your Game view resolution'
  prefs: []
  type: TYPE_NORMAL
- en: Double-click on the `InspirationalMenu.uxml` file to open the UI Builder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select `InspirationalMenu.uxml` from the **Hierarchy** to view its **Inspector**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the **Canvas Size** to **Match Game View**. This will cause the container
    in the **Viewport** to be the same size as your Game view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 18.43: Setting the Canvas Size to Match Game View](img/B18327_18_43.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.43: Setting the Canvas Size to Match Game View'
  prefs: []
  type: TYPE_NORMAL
- en: Drag a **Button** from the **Controls** window into the **Viewport**. It should
    stretch all the way across the container.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `Button` should have a blue outline around it and a handle in its bottom-right
    corner. Select that handle to resize the button to a pleasing “button-like” size.
    It’s up to you what size.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 18.44: The Button element resized in the Viewport](img/B18327_18_44.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.44: The Button element resized in the Viewport'
  prefs: []
  type: TYPE_NORMAL
- en: Change the text on `Button` to `Charm Me` by adjusting the **Text** property.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 18.45: How to change the text that displays on the button](img/B18327_18_45.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.45: How to change the text that displays on the button'
  prefs: []
  type: TYPE_NORMAL
- en: Expand the `22`, and the **Alignment** to center vertically and horizontally.
    Drag the handle of the button to make it a bit bigger or smaller as needed to
    fit the new text size.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 18.46: The Text settings of Button](img/B18327_18_46.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.46: The Text settings of Button'
  prefs: []
  type: TYPE_NORMAL
- en: Expand the `FF9BC8`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 18.47: Changing the background color of the button](img/B18327_18_47.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.47: Changing the background color of the button'
  prefs: []
  type: TYPE_NORMAL
- en: Expand the `5`, and the `10`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 18.48: Adjusting the Border properties](img/B18327_18_48.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.48: Adjusting the Border properties'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you go to your **Game** view, you’ll notice that the colors aren’t exactly
    the same as they are in the UI Builder.![Figure 18.49: The difference between
    the UI Builder Viewport and Editor Game View](img/B18327_18_49.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 18.49: The difference between the UI Builder Viewport and Editor Game
    View'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To make sure what you are seeing in the UI Builder matches your **Game** view,
    select **Unity Default Runtime Theme** from the dropdown in the top-right corner
    of the UI Builder Viewport.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 18.50: Setting the Viewport to Unity Default Runtime Theme](img/B18327_18_50.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 18.50: Setting the Viewport to Unity Default Runtime Theme'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Change the color of the `Button`’s **Text** to white.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 18.51: Changing the Text color](img/B18327_18_51.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.51: Changing the Text color'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s create a Panel that will hold the `Button`. We will create the second
    button momentarily. Drag a **VisualElement** from the **Containers** **Library**
    to the **Viewport**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the same way that you resized the `Button`, resize the `ViusalElement` to
    a reasonable Panel size.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 18.52: Resizing the VisualElement](img/B18327_18_52.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.52: Resizing the VisualElement'
  prefs: []
  type: TYPE_NORMAL
- en: Set the background color of the `VisualElement` to `FFEFEF`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set the `5` and a `6`. You should see the following in your Viewport:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 18.53: The Panel with its new settings](img/B18327_18_53.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.53: The Panel with its new settings'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s make the `Button` a child of the `VisualElement` Panel. In the `Button`
    onto `VisualElement`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 18.54: Parenting the Button to the VisualElement](img/B18327_18_54.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.54: Parenting the Button to the VisualElement'
  prefs: []
  type: TYPE_NORMAL
- en: 'I want to have two sections of the Panel: the left section that holds the buttons
    and the right section that holds the image of the cat and the inspirational quote.
    Add a `VisualElement` as a child of the `VisualElement` that represents the Panel.
    You’ll notice that it automatically stacks under the `Button` in the Viewport.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 18.55: Adding in a new VisualElement](img/B18327_18_55.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.55: Adding in a new VisualElement'
  prefs: []
  type: TYPE_NORMAL
- en: Make the `Button` a child of the new `VisualElement`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, resize the `VisualElement` so that it takes up a portion of the left side
    of the Panel by clicking and dragging its blue handle. You should have something
    that looks like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 18.56: Resizing the VisualElement](img/B18327_18_56.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.56: Resizing the VisualElement'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, add another `VisualElement` as a child of the highest-level `VisualElement`.
    You will see something like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 18.57: Adding another VisualElement to the Hierarchy](img/B18327_18_57.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.57: Adding another VisualElement to the Hierarchy'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the top-most `VisualElement` and change the `VisualElement` or in the
    Inspector.![Figure 18.58: Setting the Flex Direction to row](img/B18327_18_58.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 18.58: Setting the Flex Direction to row'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Doing this will cause its two `VisualElement` children to line up left to right
    rather than top to bottom.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select the bottom-most `VisualElement` from the Hierarchy. In its `1`. This
    will cause the `VisualElement` to fill up the available space within its parent.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we want to make the Panel centered on the screen. To do this, we need to
    create another `VisualElement` that will hold it so that we can center it within
    its parent. Add another `VisualElement` to the Hierarchy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the `VisualElement` that represents the Panel in the Hierarchy so that
    it is a child of the new `VisualElement`. In the following figure, the elements
    encircled by the red rectangle in the Hierarchy are the elements that represent
    the Panel and its children.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 18.59: The Hierarchy of our current layout](img/B18327_18_59.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.59: The Hierarchy of our current layout'
  prefs: []
  type: TYPE_NORMAL
- en: Select the top-most `VisualElement` in the Hierarchy. You’ll see it doesn’t
    fill the entire root container. Set its `1` so it will fill the available space.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand the **Align** property and select center for both the **Align Items**
    and **Justify Content** properties. The Panel should now be centered in the container.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With the top-most `VisualElement` still selected, change the background image
    by expanding the `pinkBackground` to the **Image**. You should see the following
    at this point:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 18.60: Setting the background image on the background](img/B18327_18_60.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.60: Setting the background image on the background'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s add the second button to the Panel. Drag a `Button`. You should see something
    like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 18.61: Adding a new Button](img/B18327_18_61.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.61: Adding a new Button'
  prefs: []
  type: TYPE_NORMAL
- en: Instead of manually setting all the properties of the new `Button` to match
    the other, we can use a style sheet applied to both. This will make sure they
    both always have the same properties. Select the first `Button` (the one with
    the properties we want) and expand its `button-class` into the textbox and then
    press the **Extract Inlined Styles to New** **Class** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 18.62: Creating a style sheet with Extract Inlined Styles to New Class](img/B18327_18_62.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.62: Creating a style sheet with Extract Inlined Styles to New Class'
  prefs: []
  type: TYPE_NORMAL
- en: Select **Add to New USS** from the popup that appears.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the file in `Asset/UI Toolkit` as `ButtonStyle.uss`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `ButtonStyle.uss` style sheet should appear in the **StyleSheets** Panel
    now.![Figure 18.63: The new style sheet](img/B18327_18_63.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 18.63: The new style sheet'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can now apply this style to the unstyled button by dragging `ButtonStyle.uss`
    from the `Button`. Now, the two Buttons will have the same properties.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 18.64: The two buttons with the same style sheet](img/B18327_18_64.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 18.64: The two buttons with the same style sheet'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Change the text on the bottom `Button` to `Inspire Me`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let’s align these buttons in their `VisualElement` parent. Select their
    `VIsualElement` parent and set its `VisualElement` in the Viewport or from the
    **Align** property in the Inspector.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your UI Builder should look like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 18.65: The Buttons centered in their VisualElement parent](img/B18327_18_65.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.65: The Buttons centered in their VisualElement parent'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s add in the holders for the cat pictures and the quotes that will
    be generated from the internet. Add a `VisualElement` so that it is a child of
    the bottom-most `VisualElement`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Resize it so that it is smaller than its `VisualElement` parent.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Expand the **Position** property on its Inspector and change the position from
    **Relative** to **Absolute**. This will allow you to position it manually by either
    entering the numbers or dragging it into position in the Viewport. Position it
    like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 18.66: Manually positioning the VIsualElement](img/B18327_18_66.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.66: Manually positioning the VIsualElement'
  prefs: []
  type: TYPE_NORMAL
- en: Add a `Label` as a sibling of the `VisualElement` we just created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change its **Position** property to **Absolute**, then scale and position it
    as follows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 18.67: Adding a Label to the UI](img/B18327_18_67.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.67: Adding a Label to the UI'
  prefs: []
  type: TYPE_NORMAL
- en: Change the `FF9BC8`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 18.68: The Text property of the Label](img/B18327_18_68.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.68: The Text property of the Label'
  prefs: []
  type: TYPE_NORMAL
- en: Delete the text so that there is nothing displayed there.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Currently, when you click on the buttons, there is not much of a reaction. This
    makes it difficult for the user to tell if they are clicking the buttons. So,
    let’s give the buttons hover and active states.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `.button-class` in the **StyleSheets** Panel. Right-click on it and
    select **Duplicate**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the duplicate and rename it to `.button-class:hover`. This naming
    convention indicates that this style will be applied to the button’s hover state.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Duplicate it again and rename the new duplicate to `.button-class:active`. This
    naming convention indicates that this style will be applied to the button’s click
    state.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `.button-class:hover` style. In the Inspector, change the `E96FA6`
    and change its size to `200` x `90`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `.button-class:active` style. In the Inspector, change the `C35D8B`
    and change its size to `200` x `90`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can now preview the changes you made by either playing your game or by
    using the **Viewport** **Preview**. This will show you the hover and active state
    changes.![Figure 18.69: Using Preview in the Viewport to see the Buttons style
    changes](img/B18327_18_69.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 18.69: Using Preview in the Viewport to see the Buttons style changes'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The buttons now get darker and larger when you hover and click on them.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: These style changes on the buttons are fine, but the transition from its standard
    state to the others is a bit drastic. We can add transition animations to the
    `.button-class` style, so when it transitions to the other styles, it will animate
    more smoothly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `.button-class` style from the `0.5` and the `EaseIn`. This indicates
    that when the button changes width, it will do so over 0.5 seconds and will ease
    into it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 18.70: The width transition animation](img/B18327_18_70.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.70: The width transition animation'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the `0.5`, and **EaseIn**. Your **Transition Animations** should now
    look like the following. This will ensure that when the width and height of the
    buttons change, it will do so smoothly over 0.5 seconds.![Figure 18.71: The Buttons’
    transition animations](img/B18327_18_71.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 18.71: The Buttons’ transition animations'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Play the Preview to watch the buttons grow gradually as you hover over them.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The last thing we need to do in the UI Builder is give variable names for each
    of these Visual Elements so that we can find them via code. Change the names of
    the various Visual Elements to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 18.72: Renaming the Visual Elements we’ll want to access via code](img/B18327_18_72.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.72: Renaming the Visual Elements we’ll want to access via code'
  prefs: []
  type: TYPE_NORMAL
- en: Whew. That was a lot of steps! But we are officially done with the UI Builder.
    We can now work on our C# scripts to get the functionality we want.
  prefs: []
  type: TYPE_NORMAL
- en: Using C# code to set VisualElement and Label properties with web data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Currently, our Buttons do not do anything but animate when we hover over them
    or click them. We now need to hook them up to some functionality. Our goals for
    the two Buttons when clicked are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`CharmButton`: This should get cute cat pictures from the internet and replace
    the background of the `CatPic` Visual Element with the cute cat picture.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`InspireButton`: This should get inspirational quotes from the web, format
    the text, and place it in the `InspirationalQuote` Label.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Honestly, what we’ve done up to this point for this example was all I wanted
    to cover when I initially started planning it. However, I got a bit excited about
    randomly generating the `VisualElements` properties and I possibly made the example
    a bit too complicated. We engineers love to over-engineer, after all. This example
    uses concepts of web requests and JSON manipulation. Since web development is
    not a focus of this book, I won’t belabor the code that performs these functions.
    I want the focus of this example to be on the UI-specific code, not the web requests.
    I will explain what each section of code does, but I will not necessarily explain
    it line-by-line.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we get to the actual code, I do want to give a brief rundown of the
    two sources we will be getting our data from. We will use the following resources
    to get cat pictures and inspirational quotes, respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://placekitten.com/](https://placekitten.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://zenquotes.io/](https://zenquotes.io/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Place Kitten website allows you to get a picture of a kitten with a specific
    dimension by simply adding the dimension to the end of the URL. For example, [https://placekitten.com/300/300](https://placekitten.com/300/300)
    displays an image of a kitten that is 300 x 300\. This website is great for adding
    placeholder images when you are developing websites and just need something to
    fill a specific place. Plus, it’s cute!
  prefs: []
  type: TYPE_NORMAL
- en: 'The Zen Quotes website hosts an API that allows you to get inspirational quotes.
    An API is a collection of functions that let you interact with its data. What
    types of functions the API has will depend on the use of the API and the design
    paradigm the engineers chose to create it. But generally, an API will have the
    ability to GET data. Zen Quotes allows you to GET inspirational quotes. You can
    GET a single quote or a whole set of them. Visit their site to see what other
    options it has for retrieving data from its database. Zen Quotes returns the data
    you request from it in JSON format. JSON is a format standardization that provides
    information. It will look like the following when you get it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'But it can be formatted to look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'I won’t get into the specifics of what the preceding code means, but I will
    point out the important details of the example we cover. If you’d like to learn
    more about JSON format, see the following resource: [https://www.w3schools.com/js/js_json_intro.asp](https://www.w3schools.com/js/js_json_intro.asp)'
  prefs: []
  type: TYPE_NORMAL
- en: 'To finish out this example and have the buttons generate cat pictures and inspirational
    quotes, complete the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new C# script in your `Scripts` folder and call it `InspriationalPanel.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s start with getting a reference to the `UIDocument` we created in the
    previous section. Add the following code to your class, making sure to import
    the `UnityEngine.UIElements` namespace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This code should look familiar after our Editor code example; the main difference
    is we got the reference to the `UIDocument` by using `GetComponent`. So, we’ll
    need to put this script on the same GameObject that contains our UI Document component.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Go ahead and drag this script onto our `UIDocument` GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, create an instance variable for the root Visual Element on the UI Documents
    with the following code in the `Start()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now let’s hook up our charm button. Add the following variable declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code to the `Start()` method to initialize it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need a method that will run when the `charmButton` is clicked. Update your
    code to appear as follows. The new code is bold. This should all look familiar
    after our previous example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: I wanted to add the preceding large block of code because it can essentially
    act as a template for how you will code buttons with the UI Toolkit.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, we need a reference to the Visual Element called `CatPic` so that we can
    change its background. Add the following code to the `Start()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You may notice that I didn’t make `catPic` a class variable but instead made
    it an instance variable within the `Start()` method. This is because the thing
    we will need to reference the most in this code is the `CatPic`’s style, not the
    `CatPic` itself. So, add the following variable to your class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, add the following to the `Start()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To get the image for the `catPic` background, we’ll use [https://placekitten.com/](https://placekitten.com/).
    We’ll randomly pick a width and height between 150 and 300, then get a picture
    from [placekitten.com](http://placekitten.com) that fits those dimensions. To
    do so, we will need to use a coroutine since web requests require coroutines.
    Start by creating the following method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: This method is going to show an error in your IDE until you put in the web request.
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure to add the following namespace to your code so it recognizes what
    an `IEnumerator` is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let’s randomly generate the width and height of the image we will request.
    Add the following to your `GetCatPic()` coroutine to get random numbers and then
    change the `catPic`’s dimensions to match it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remember, the format of the URL for a placekitten image is `https://placekitten.com/300/300`.
    So, we need to create a string that replaces the two `300` values with `randomWidth`
    and `randomHeight`. Add the following line of code to your `GetCatPic()` coroutine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let’s send a web request to the `uri`. Add the following code to your
    `GetCatPic()` coroutine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding code tries to get a texture from a website. The `if` prints an
    error if the request fails. Make sure to import the following namespace so your
    script understands what a `UnityWebRequest` is:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let’s replace the `// Do stuff here with returned data` part with the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This code will take the picture returned by the web request and store it as
    a `Texture2D`. It then sets the background image of `catPicStyle` to that `Texture2D`
    image.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, we need to have our button to actually call the `GetCatPic()` coroutine.
    Update the `OnCharmClicked()` method to call the `GetCatPic()` coroutine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you play the game, you can now click the **Charm Me** button to get random
    cat pictures.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 18.73: Random cat pictures appearing in our UI](img/B18327_18_73.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.73: Random cat pictures appearing in our UI'
  prefs: []
  type: TYPE_NORMAL
- en: You may notice a little funkiness with the image if you click the button a second
    time. Because the `GetCatPic()` method contains a web request, it takes a moment
    to fetch the image and then turn it into a texture, so whatever image is currently
    in its place will resize, becoming distorted, before the new image loads in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Instead of letting this happen, let’s remove the original image while the new
    image loads in. Add the following code as the first line of your `GetCatPic()`
    coroutine:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let’s set up the functionality of the **Inspire Me** button. Add the following
    variable declarations to your class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following method that will be called when the `inspireButton` is clicked:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code to the `Start()` method. This should all look familiar
    to you by now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let’s move on to filling in the data for the inspirational quote. We will
    use the [https://zenquotes.io/api/random](https://zenquotes.io/api/random) request
    to retrieve a random quote. If you navigate to that URL in your web browser, you
    can see how the data it returns is formatted. Add the following code to your `InspriationalPanel.cs`
    script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You’ll notice this is structured similarly to the web request we used to get
    our cat image. Before we proceed, let’s explore how the data is returned.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update your `OnInspireClicked()` method with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Play the game and click the **Inspire Me** button. You will see something like
    the following in the console:![Figure 18.74: The API request response](img/B18327_18_74.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 18.74: The API request response'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As you can see, we can’t exactly put the full result into our Label’s text field.
    We need to format this into something usable and get only the information we want.
    To do this most simply, we’ll need another package.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open the Package Manager with **Window** | **Package Manager**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select the plus sign and select **Add package from** **git URL…**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `com.unity.nuget.newtonsoft-json` into the textbox and select **Add**.
    After some loading, you should see **Newtonsoft Json** in your packages list.
    This will allow you to easily manipulate JSON data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Return to your script and add the following namespace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If `Newtonsoft` is not recognized by your IDE, close the IDE and Unity and reopen
    it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, we can parse the data we receive from our API call and get just the information
    we want. The data that is returned by the API call starts with `[`. This means
    that the data we are receiving is coming to us in an array format. So, we need
    to convert the data to an array. Replace `// more code will go here` with the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We only want the strings assigned to the `"q"` property and the `"a"` property,
    as these represent the quote and the author respectively. To get this data, we
    need our data to be in an object format. The array that is returned to us only
    has a single array item, so use the following code to convert the array item to
    an object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can get the strings we want. Add the following lines to get the quote
    and the author:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The last thing to do is change the label’s text to the information we want
    and make sure it’s formatted correctly. I want the quote to appear in quotes.
    Then, on the next line, I want to see something like `~ Author''s Name`. The following
    line of code will do that:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Play the game and you should now be able to get pictures of kittens and inspirational
    quotes!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 18.75: The final version of our example](img/B18327_18_75.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.75: The final version of our example'
  prefs: []
  type: TYPE_NORMAL
- en: Because zenquotes is an API, the developers have put a limit of 5 calls per
    30 seconds. So, that means if you try clicking the button more than 5 times in
    30 seconds, you will get an error message.
  prefs: []
  type: TYPE_NORMAL
- en: You could expand on this example by getting a set of the data at the start and
    storing it locally. This could reduce some of the load times of the images and
    reduce the number of API calls needed.
  prefs: []
  type: TYPE_NORMAL
- en: That’s all for the examples that I will cover for the UI Toolkit. As I said
    previously, this is a big topic and a whole new way of thinking about developing
    UI. I wasn’t able to cover even half of what I would have liked to. If you enjoy
    working with the UI Toolkit, I recommend viewing the resources section for suggested
    further reading and tutorials.
  prefs: []
  type: TYPE_NORMAL
- en: Resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you’re looking for more documentation, I recommend the following resources
    provided by Unity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://unity.com/resources/user-interface-design-and-implementation-in-unity](https://unity.com/resources/user-interface-design-and-implementation-in-unity)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.unity3d.com/Manual/UIE-Transitioning-From-UGUI.xhtml](https://docs.unity3d.com/Manual/UIE-Transitioning-From-UGUI.xhtml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you’re interested in tutorials, here are some great resources. It’s important
    to note that most of the tutorials at this point are for using the UI Toolkit
    for Editor UI since the runtime support is still new:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.unity3d.com/Manual/UIE-examples.xhtml](https://docs.unity3d.com/Manual/UIE-examples.xhtml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.unity3d.com/2021.2/Documentation/Manual/UIE-HowTo-CreateRuntimeUI.xhtml](https://docs.unity3d.com/2021.2/Documentation/Manual/UIE-HowTo-CreateRuntimeUI.xhtml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.unity3d.com/2023.3/Documentation/Manual/UIE-simple-ui-toolkit-workflow.xhtml](https://docs.unity3d.com/2023.3/Documentation/Manual/UIE-simple-ui-toolkit-workflow.xhtml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://learn.unity.com/tutorial/ui-toolkit-first-steps#61df0f23edbc2a2bf49579a2](https://learn.unity.com/tutorial/ui-toolkit-first-steps#61df0f23edbc2a2bf49579a2)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.unity3d.com/Manual/UIE-HowTo-CreateCustomInspector.xhtml](https://docs.unity3d.com/Manual/UIE-HowTo-CreateCustomInspector.xhtml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.unity3d.com/Manual/UIE-HowTo-CreateEditorWindow.xhtml](https://docs.unity3d.com/Manual/UIE-HowTo-CreateEditorWindow.xhtml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://youtu.be/J2KNj3bw0Bw?feature=shared](https://youtu.be/J2KNj3bw0Bw?feature=shared)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Lastly, Unity has provided some excellent pre-made projects that use the UI
    Toolkit. You can find these projects on the asset store here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://assetstore.unity.com/packages/essentials/tutorial-projects/quizu-a-ui-toolkit-sample-268492](https://assetstore.unity.com/packages/essentials/tutorial-projects/quizu-a-ui-toolkit-sample-268492)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://assetstore.unity.com/packages/essentials/tutorial-projects/ui-toolkit-sample-dragon-crashers-231178](https://assetstore.unity.com/packages/essentials/tutorial-projects/ui-toolkit-sample-dragon-crashers-231178)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The UI Toolkit is still in development, but Unity is actively working on it
    as a system to replace the current uGUI system (that the rest of this book has
    focused on up to this point). It uses the concepts of web development to develop
    UI and can provide a cleaner, more performant UI than uGUI. However, since it
    is still in development, it doesn’t do everything uGUI does … yet. While you might
    not be able to fully transition over to the UI Toolkit system for your UI needs,
    it is helpful to have an idea of how it works, since one day, it will be your
    only option.
  prefs: []
  type: TYPE_NORMAL
- en: To help introduce the concepts of the UI Toolkit to you, we discussed the general
    concepts of the system as well as how to use it to make UI in the Editor and Runtime
    UI.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, we will discuss yet another UI system used within Unity:
    IMGUI.'
  prefs: []
  type: TYPE_NORMAL
