["```cs\npublic static class MauiProgram\n{\n    public static MauiApp CreateMauiApp()\n    {\n        var builder = MauiApp.CreateBuilder();\n        builder\n            .UseMauiApp<App>()\n            .ConfigureFonts(fonts =>\n            {\n                fonts.AddFont(\"OpenSans-Regular.ttf\", \n\"OpenSansRegular\");\n                fonts.AddFont(\"OpenSans-Semibold.ttf\", \n\"OpenSansSemibold\");\n            });\n#if DEBUG\n        builder.Logging.AddDebug();\n#endif\n        return builder.Build();\n    }\n}\n```", "```cs\npublic partial class App : Application\n{\n    public App()\n    {\n        InitializeComponent();\n        MainPage = new AppShell();\n    }\n}\n```", "```cs\n<Shell\n    x:Class=\"DoToo.AppShell\"\n    xmlns=http://schemas.microsoft.com/dotnet/2021/maui\n    xmlns:x=http://schemas.microsoft.com/winfx/2009/xaml\n\n    Shell.FlyoutBehavior=\"Disabled\">\n    <ShellContent\n        Title=\"Home\"\n        ContentTemplate=\"{DataTemplate local:MainPage}\"\n        Route=\"MainPage\" />\n</Shell>\n```", "```cs\nC:\\Users\\cummings.michael\\Source\\Repos\\DoToo\n> dotnet workload list\nInstalled Workload Ids      Manifest Version                              Installation Source\n---------------------------------------------------------------------------------------------\nmaui-windows                6.0.486/6.0.400                          \n     VS 17.3.32901.215\nmaui-maccatalyst            6.0.486/6.0.400                          \n     VS 17.3.32901.215\nmaccatalyst                 15.4.446-ci.-release-6-0-4xx.446/6.0.400\n      VS 17.3.32901.215\nmaui-ios                    6.0.486/6.0.400                         \n      VS 17.3.32901.215\nios                         15.4.446-ci.-release-6-0-4xx.446/6.0.400\n      VS 17.3.32901.215\nmaui-android                6.0.486/6.0.400                         \n      VS 17.3.32901.215\nandroid                     32.0.448/6.0.400                        \n      VS 17.3.32901.215\nUse `dotnet workload search` to find additional workloads to install.\n```", "```cs\nC:\\Users\\cummings.michael\\Source\\Repos\\DoToo\n> dotnet workload update\nNo workloads installed for this feature band. To update workloads \ninstalled with earlier SDK\nversions, include the --from-previous-sdk option.\nUpdated advertising manifest microsoft.net.sdk.android.\nUpdated advertising manifest microsoft.net.sdk.tvos.\nUpdated advertising manifest microsoft.net.sdk.macos.\nUpdated advertising manifest microsoft.net.sdk.maui.\nUpdated advertising manifest microsoft.net.workload.emscripten.\nUpdated advertising manifest microsoft.net.sdk.ios.\nUpdated advertising manifest microsoft.net.sdk.maccatalyst.\nUpdated advertising manifest microsoft.net.workload.mono.toolchain.\nDownloading microsoft.net.sdk.android.manifest-6.0.400.msi.x64 \n(32.0.465)\nInstalling Microsoft.NET.Sdk.Android.Manifest-6.0.400.32.0.465-x64.msi \n......... Done\nDownloading microsoft.net.sdk.ios.manifest-6.0.400.msi.x64 (15.4.454)\nDownloading microsoft.net.sdk.maccatalyst.manifest-6.0.400.msi.x64 \n(15.4.454)\nDownloading microsoft.net.sdk.macos.manifest-6.0.400.msi.x64 \n(12.3.454)\nInstalling Microsoft.NET.Sdk.macOS.Manifest-6.0.400.12.3.454-x64.msi ...... Done\nDownloading microsoft.net.sdk.maui.manifest-6.0.400.msi.x64 (6.0.540)\nInstalling Microsoft.NET.Sdk.Maui.Manifest-6.0.400.6.0.540-x64.msi \n...... Done\nDownloading microsoft.net.sdk.tvos.manifest-6.0.400.msi.x64 (15.4.454)\nDownloading microsoft.net.workload.mono.toolchain.manifest-6.0.400.\nmsi.x64 (6.0.9)\nInstalling Microsoft.NET.Workload.Mono.ToolChain.Manifest-\n6.0.400.6.0.9-x64.msi ....... Done\nDownloading microsoft.net.workload.emscripten.manifest-6.0.400.msi.x64 \n(6.0.9)\nInstalling Microsoft.NET.Workload.Emscripten.Manifest-\n6.0.400.6.0.9-x64.msi ...... Done\nNo workloads installed for this feature band. To update workloads \ninstalled \nwith earlier SDK versions, include the --from-previous-sdk option.\nSuccessfully updated workload(s): .\n```", "```cs\nC:\\Users\\cummings.michael\\Source\\Repos\\DoToo\n> dotnet workload list\nInstalled Workload Ids      Manifest Version\nInstallation Source\n---------------------------------------------------------------------------------------------\nmaui-windows                6.0.540/6.0.400                            \n   VS 17.3.32901.215\nmaui-maccatalyst            6.0.540/6.0.400                            \n   VS 17.3.32901.215\nmaccatalyst                 15.4.446-ci.-release-6-0-4xx.446/6.0.400   \n   VS 17.3.32901.215\nmaui-ios                    6.0.540/6.0.400                            \n   VS 17.3.32901.215\nios                         15.4.446-ci.-release-6-0-4xx.446/6.0.400   \n   VS 17.3.32901.215\nmaui-android                6.0.540/6.0.400                            \n   VS 17.3.32901.215\nandroid                     32.0.465/6.0.400                           \n   VS 17.3.32901.215\nUse `dotnet workload search` to find additional workloads to install.\n```", "```cs\n    namespace DoToo.Models;\n    using System;\n    public class TodoItem\n    {\n        public int Id { get; set; }\n        public string Title { get; set; }\n        public bool Completed { get; set; }\n        public DateTime Due { get; set; }\n    }\n    ```", "```cs\n    namespace DoToo.Repositories;\n    using DoToo.Models;\n    public interface ITodoItemRepository\n    {\n        event EventHandler<TodoItem> OnItemAdded;\n        event EventHandler<TodoItem> OnItemUpdated;\n        Task<List<TodoItem>> GetItemsAsync();\n        Task AddItemAsync(TodoItem item);\n        Task UpdateItemAsync(TodoItem item);\n        Task AddOrUpdateAsync(TodoItem item);\n    }\n    ```", "```cs\n    namespace DoToo.Repositories;\n    using DoToo.Models;\n    public class TodoItemRepository : ITodoItemRepository\n    {\n        public event EventHandler<TodoItem> OnItemAdded;\n        public event EventHandler<TodoItem> OnItemUpdated;\n        public async Task<List<TodoItem>> GetItemsAsync()\n        {\n            return null; // Just to make it build\n        }\n        public async Task AddItemAsync(TodoItem item)\n        {\n        }\n        public async Task UpdateItemAsync(TodoItem item)\n        {\n        }\n        public async Task AddOrUpdateAsync(TodoItem item)\n        {\n            if (item.Id == 0)\n            {\n                await AddItemAsync(item);\n            }\n            else\n            {\n                await UpdateItemAsync(item);\n            }\n        }\n    }\n    ```", "```cs\n    namespace DoToo.Models;\n    using SQLite;\n    public class TodoItem\n    ```", "```cs\n    [PrimaryKey, AutoIncrement]\n    public int Id { get; set; }\n    ```", "```cs\n    namespace DoToo.Repositories;\n    using DoToo.Models;\n    using SQLite;\n    public class TodoItemRepository : ITodoItemRepository\n    ```", "```cs\n    private SQLiteAsyncConnection connection;\n    ```", "```cs\nprivate async Task CreateConnectionAsync() \n{ \n    if (connection != null) \n    { \n        return; \n    } \n\n    var documentPath = Environment.GetFolderPath(Environment.\nSpecialFolder.MyDocuments); \n    var databasePath = Path.Combine(documentPath, \"TodoItems.db\"); \n\n    connection = new SQLiteAsyncConnection(databasePath);  \n    await connection.CreateTableAsync<TodoItem>(); \n\n    if (await connection.Table<TodoItem>().CountAsync() == 0) \n    { \n        await connection.InsertAsync(new TodoItem() \n        { \n            Title = \"Welcome to DoToo\", \n            Due = DateTime.Now \n        }); \n    } \n}\n```", "```cs\n    public async Task<List<TodoItem>> GetItemsAsync()\n    {\n        await CreateConnectionAsync();\n        return await connection.Table<TodoItem>().ToListAsync();\n    }\n    ```", "```cs\n    public async Task AddItemAsync(TodoItem item)\n    {\n        await CreateConnectionAsync();\n        await connection.InsertAsync(item);\n        OnItemAdded?.Invoke(this, item);\n    }\n    ```", "```cs\n    public async Task UpdateItemAsync(TodoItem item)\n    {\n        await CreateConnectionAsync();\n        await connection.UpdateAsync(item);\n        OnItemUpdated?.Invoke(this, item);\n    }\n    ```", "```cs\n    using System.ComponentModel;\n    public abstract class ViewModel : INotifyPropertyChanged\n    {\n        public event PropertyChangedEventHandler PropertyChanged;\n        public void RaisePropertyChanged(params string[] \n    propertyNames)\n        {\n            foreach (var propertyName in propertyNames)\n            {\n                PropertyChanged?.Invoke(this, new \n    PropertyChangedEventArgs(propertyName));\n             }\n        }\n        public INavigation Navigation { get; set; }\n    }\n    ```", "```cs\npublic class MyTestViewModel : ViewModel\n{\n    private string name;\n    public string Name\n    {\n        get { return name; }\n        set\n        {\n            if (name != value)\n            {\n                name = value;\n                RaisePropertyChanged(nameof(Name));\n            }\n        }\n    }\n}\n```", "```cs\n    using CommunityToolkit.Mvvm.ComponentModel;\n    [ObservableObject]\n    public abstract partial class ViewModel\n    {\n        public INavigation Navigation { get; set; }\n    }\n    ```", "```cs\npublic partial class MyTestViewModel : ViewModel\n{\n    [ObservableProperty]\n    string name;\n}\n```", "```cs\n    public class MainViewModel : ViewModel\n    {\n        private readonly ITodoItemRepository repository;\n        public MainViewModel(ITodoItemRepository repository)\n        {\n            this.repository = repository;\n            Task.Run(async () => await LoadDataAsync());\n        }\n        private async Task LoadDataAsync()\n        {\n        }\n    }\n    ```", "```cs\n    namespace DoToo.ViewModels;\n    using CommunityToolkit.Mvvm.ComponentModel;\n    using DoToo.Models;\n    public partial class TodoItemViewModel : ViewModel\n    {\n        public TodoItemViewModel(TodoItem item) => Item = item;\n        public event EventHandler ItemStatusChanged;\n        [ObservableProperty]\n        TodoItem item;\n        public string StatusText => Item.Completed ? \"Reactivate\" : \"Completed\";\n    }\n    ```", "```cs\n    namespace DoToo.ViewModels;\n    using DoToo.Repositories;\n    public class ItemViewModel : ViewModel\n    {\n        private readonly ITodoItemRepository repository;\n        public ItemViewModel(ITodoItemRepository repository)\n        {\n            this.repository = repository;\n        }\n    }\n    ```", "```cs\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <ContentPage xmlns=\"http://schemas.microsoft.com/dotnet/2021/\n    maui\"\n\n      x:Class=\"DoToo.Views.MainView\"\n      Title=\"Do Too!\">\n      <ContentPage.ToolbarItems>\n        <ToolbarItem Text=\"Add\" />\n      </ContentPage.ToolbarItems>\n      <Grid>\n        <Grid.RowDefinitions>\n          <RowDefinition Height=\"auto\" />\n          <RowDefinition Height=\"*\" />\n        </Grid.RowDefinitions>\n        <Button Text=\"Toggle filter\" />\n        <ListView Grid.Row=\"1\">\n        </ListView>\n      </Grid>\n    </ContentPage>\n    ```", "```cs\n    public MainView(MainViewModel viewModel)\n    {\n        InitializeComponent();\n        viewModel.Navigation = Navigation;\n        BindingContext = viewModel;\n    }\n    ```", "```cs\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <ContentPage xmlns=http://schemas.microsoft.com/dotnet/2021/maui\n                  xmlns:x=http://schemas.microsoft.com/winfx/2009/xaml\n      x:Class=\"DoToo.Views.ItemView\"\n      Title=\"New todo item\">\n      <ContentPage.ToolbarItems>\n        <ToolbarItem Text=\"Save\" />\n      </ContentPage.ToolbarItems>\n      <StackLayout Padding=\"14\">\n        <Label Text=\"Title\" />\n        <Entry />\n        <Label Text=\"Due\" />\n        <DatePicker />\n        <StackLayout Orientation=\"Horizontal\">\n          <Switch />\n          <Label Text=\"Completed\" />\n        </StackLayout>\n      </StackLayout>\n    </ContentPage>\n    ```", "```cs\n    public ItemView (ItemViewModel viewmodel)\n    {\n        InitializeComponent ();\n        viewmodel.Navigation = Navigation;\n        BindingContext = viewmodel;\n    }\n    ```", "```cs\n    using DoToo.Repositories;\n    public static class MauiProgram\n    {\n        public static MauiApp CreateMauiApp()\n        {\n            var builder = MauiApp.CreateBuilder();\n            builder\n                .UseMauiApp<App>()\n                .ConfigureFonts(fonts =>\n                {\n                    fonts.AddFont(\"OpenSans-Regular.ttf\", \n    \"OpenSansRegular\");\n                    fonts.AddFont(\"OpenSans-Semibold.ttf\", \n    \"OpenSansSemibold\");\n                })\n                .RegisterServices()\n                .RegisterViewModels()\n                .RegisterViews();\n                return builder.Build();\n        }\n    public static MauiAppBuilder RegisterServices(this \n    MauiAppBuilder mauiAppBuilder)\n        {\n        mauiAppBuilder.Services.AddSingleton<ITodoItemRepository,TodoItemRepository>();\n            return mauiAppBuilder;\n        }\n    public static MauiAppBuilder RegisterViewModels(this \n    MauiAppBuilder mauiAppBuilder)\n        {\n             mauiAppBuilder.Services.AddTransient<ViewModels.\n    MainViewModel>();\n            mauiAppBuilder.Services.AddTransient<ViewModels.\n    ItemViewModel>();\n            return mauiAppBuilder;\n        }\n    public static MauiAppBuilder RegisterViews(this \n    MauiAppBuilder mauiAppBuilder)\n        {\n            mauiAppBuilder.Services.AddTransient<Views.MainView>();\n            mauiAppBuilder.Services.AddTransient<Views.ItemView>();\n            return mauiAppBuilder;\n        }\n    }\n    ```", "```cs\n    public App(Views.MainView view)\n    {\n        InitializeComponent();\n        MainPage = new NavigationPage(view);\n    }\n    ```", "```cs\n<Entry Text=\"{Binding Title}\" />\n```", "```cs\n    private readonly IServiceProvider services;\n    ```", "```cs\n    public MainViewModel(ITodoItemRepository repository, \n    IServiceProvider services)\n    {\n        this.repository = repository;\n        this.services = services;\n        Task.Run(async () => await LoadDataAsync());\n    }\n    ```", "```cs\npublic ICommand AddItem => new Command(async () =>\n{\n    await Navigation.PushAsync(itemView);\n});\n```", "```cs\n    [RelayCommand]\n    public async Task AddItemAsync() => await Navigation.\n    PushAsync(services.GetRequiredService<ItemView>());\n    ```", "```cs\n    public partial class MainViewModel : ViewModel\n    ```", "```cs\n    <ContentPage xmlns=http://schemas.microsoft.com/dotnet/2021/maui\n                 xmlns:x=http://schemas.microsoft.com/winfx/2009/xaml\n\n      x:Class=\"DoToo.Views.MainView\"\n      x:DataType=\"viewModels:MainViewModel\"\n      Title=\"Do Too!\">\n    ```", "```cs\n    <ContentPage.ToolbarItems>\n      <ToolbarItem Text=\"Add\" Command=\"{Binding AddItemAsyncCommand}\" />\n    </ContentPage.ToolbarItems>\n    ```", "```cs\n    using CommunityToolkit.Mvvm.ComponentModel;\n    using CommunityToolkit.Mvvm.Input;\n    using DoToo.Models;\n    using DoToo.Repositories;\n    public partial class ItemViewModel : ViewModel\n    {\n        private readonly ITodoItemRepository repository;\n        [ObservableProperty]\n        TodoItem item;\n        public ItemViewModel(ITodoItemRepository repository)\n        {\n            this.repository = repository;\n            Item = new TodoItem() { Due = DateTime.Now.AddDays(1) };\n        }\n        [RelayCommand]\n        public async Task SaveAsync()\n        {\n            await repository.AddOrUpdateAsync(Item);\n            await Navigation.PopAsync();\n        }\n    }\n    ```", "```cs\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <ContentPage\n      xmlns=http://schemas.microsoft.com/dotnet/2021/maui\n        xmlns:x=http://schemas.microsoft.com/winfx/2009/xaml\n\n      x:Class=\"DoToo.Views.ItemView\"\n      x:DataType=\"viewModels:ItemViewModel\" >\n      <ContentPage.ToolbarItems>\n        <ToolbarItem Text=\"Save\" Command=\"{Binding \n    SaveAsyncCommand}\" />\n      </ContentPage.ToolbarItems>\n      <StackLayout Padding=\"14\">\n        <Label Text=\"Title\" />\n        <Entry Text=\"{Binding Item.Title}\" />\n        <Label Text=\"Due\" />\n        <DatePicker Date=\"{Binding Item.Due}\" />\n        <StackLayout Orientation=\"Horizontal\">\n        <Switch IsToggled=\"{Binding Item.Completed}\" />\n        <Label Text=\"Completed\" />\n      </StackLayout>\n    </ContentPage>\n    ```", "```cs\n    [ObservableProperty]\n    ObservableCollection<TodoItemViewModel> items;\n    ```", "```cs\n    private async Task LoadDataAsync()\n    {\n        var items = await repository.GetItemsAsync();\n        var itemViewModels = items.Select(i => CreateTodoItemViewModel(i));\n        Items = new ObservableCollection<TodoItemViewModel> \n    (itemViewModels);\n    }\n    private TodoItemViewModel CreateTodoItemViewModel(TodoItem item)\n    {\n        var itemViewModel = new TodoItemViewModel(item);\n        itemViewModel.ItemStatusChanged += ItemStatusChanged;\n        return itemViewModel;\n    }\n    private void ItemStatusChanged(object sender, EventArgs e)\n    {\n    }\n    ```", "```cs\n    using CommunityToolkit.Mvvm.ComponentModel;\n    using DoToo.Models;\n    ```", "```cs\n    public MainViewModel(TodoItemRepository repository, \n    IServiceProvider services)\n    {\n        repository.OnItemAdded += (sender, item) =>\n            items.Add(CreateTodoItemViewModel(item));\n        repository.OnItemUpdated += (sender, item) =>\n            Task.Run(async () => await LoadDataAsync());\n        this.repository = repository;\n        this.services = services;\n        Task.Run(async () => await LoadDataAsync());\n    }\n    ```", "```cs\n    <ListView Grid.Row=\"1\"\n      RowHeight=\"70\" ItemsSource=\"{Binding Items}\">\n      <ListView.ItemTemplate>\n        <DataTemplate x:DataType=\"viewModels:TodoItemViewModel\">\n          <ViewCell>\n            <Grid Padding=\"15,10\">\n              <Grid.RowDefinitions>\n                  <RowDefinition />\n                  <RowDefinition />\n              </Grid.RowDefinitions>\n              <Grid.ColumnDefinitions>\n                <ColumnDefinition Width=\"10\" />\n                <ColumnDefinition Width=\"*\" />\n              </Grid.ColumnDefinitions>\n              <BoxView Grid.RowSpan=\"2\" />\n              <Label Grid.Column=\"1\"\n                Text=\"{Binding Item.Title}\" FontSize=\"Medium\" />\n              <Label Grid.Column=\"1\" Grid.Row=\"1\"\n                Text=\"{Binding Item.Due}\" FontSize=\"Micro\" />\n              <Label Grid.Column=\"1\" Grid.Row=\"1\"\n                HorizontalTextAlignment=\"End\" Text=\"Completed\"\n                IsVisible=\"{Binding Item.Completed}\"\n                FontSize=\"Micro\" />\n            </Grid>\n          </ViewCell>\n        </DataTemplate>\n      </ListView.ItemTemplate>\n    </ListView>\n    ```", "```cs\n    using System;\n    using System.Globalization;\n    public class StatusColorConverter : IValueConverter\n    {\n        public object Convert(object value, Type targetType, object \n    parameter, CultureInfo culture)\n        {\n            return (Color)Application.Current.Resources[\n            (bool)value ? \"CompletedColor\" : \"ActiveColor\"];\n        }\n        public object ConvertBack(object value, Type targetType, \n    object parameter, CultureInfo culture)\n        {\n            return null;\n        }\n    }\n    ```", "```cs\n    <Application ...>\n        <Application.Resources>\n            <ResourceDictionary>\n                <ResourceDictionary.MergedDictionaries>\n                    <ResourceDictionary Source=\"Resources/Styles/Colors.xaml\" />\n                    <ResourceDictionary Source=\"Resources/Styles/\n    Styles.xaml\" />\n            </ResourceDictionary.MergedDictionaries>\n            <ResourceDictionary>\n                <Color x:Key=\"CompletedColor\"> #1C8859 </Color>\n                <Color x:Key=\"ActiveColor\"> #D3D3D3 </Color>\n            </ResourceDictionary>\n            </ResourceDictionary>\n        </Application.Resources>\n    </Application>\n    ```", "```cs\n    <ContentPage  xmlns=\"http://schemas.microsoft.com/dotnet/2021/\n    maui\"\n                 xmlns:x=\"http://schemas.microsoft.com/winfx/2009/\n    xaml\"\n\n      x:Class=\"DoToo.Views.MainView\" Title=\"Do Too!>\n    ```", "```cs\n    <ContentPage ...>\n      <ContentPage.Resources>\n        <ResourceDictionary>\n    <converters:StatusColorConverter \n    x:Key=\"statusColorConverter\"/>\n        </ResourceDictionary>\n      </ContentPage.Resources>\n      <ContentPage.ToolBarItems>\n        <ToolbarItem Text=\"Add\" Command=\"{Binding AddItem}\" />\n      </ContentPage.ToolbarItems>\n      <Grid ...>\n      </Grid>\n    </ContentPage>\n    ```", "```cs\n    <BoxView Grid.RowSpan=\"2\"\n            BackgroundColor=\"{Binding Item.Completed,\n            Converter={StaticResource statusColorConverter}}\" />\n    ```", "```cs\n    [ObservableProperty]\n    TodoItemViewModel selectedItem;\n    partial void OnSelectedItemChanging(TodoItemViewModel value)\n    {\n        if (value == null)\n        {\n            return;\n        }\n        MainThread.BeginInvokeOnMainThread(async () => {\n            await NavigateToItemAsync(value);\n        });\n    }\n    private async Task NavigateToItemAsync(TodoItemViewModel item)\n    {\n        var itemView = services.GetRequiredService<ItemView>();\n        var vm = itemView.BindingContext as ItemViewModel;\n        vm.Item = item.Item;\n        itemView.Title = \"Edit todo item\";\n        await Navigation.PushAsync(itemView);\n    }\n    ```", "```cs\n    <ListView x:Name=\"ItemsListView\" Grid.Row=\"1\" RowHeight=\"70\"\n        ItemsSource=\"{Binding Items}\"\n        SelectedItem=\"{Binding SelectedItem}\">\n    ```", "```cs\n    public MainView(MainViewModel viewmodel)\n    {\n        InitializeComponent();\n        viewmodel.Navigation = Navigation;\n        BindingContext = viewmodel;\n        ItemsListView.ItemSelected += (s, e) =>\n            ItemsListView.SelectedItem = null;\n    }\n    ```", "```cs\n    [RelayCommand]\n    void ToggleCompleted()\n    {\n        Item.Completed = !Item.Completed;\n        ItemStatusChanged?.Invoke(this, new EventArgs());\n    }\n    ```", "```cs\n    <ListView.ItemTemplate>\n      <DataTemplate>\n        <ViewCell>\n          <ViewCell.ContextActions>\n    <MenuItem Text=\"{Binding StatusText}\" Command=\"{Binding \n    ToggleCompletedCommand}\" />\n          </ViewCell.ContextActions>\n          <Grid Padding=\"15,10\">\n          ...\n          </Grid>\n        </ViewCell>\n      </DataTemplate>\n    </ListView.ItemTemplate>\n    ```", "```cs\n    private void ItemStatusChanged(object sender, EventArgs e)\n    {\n        if (sender is TodoItemViewModel item)\n        {\n            if (!ShowAll && item.Item.Completed)\n            {\n                Items.Remove(item);\n            }\n            Task.Run(async () => await repository.UpdateItemAsync(item.Item));\n        }\n    }\n    [ObservableProperty]\n    bool showAll;\n    ```", "```cs\n    private async Task LoadDataAsync()\n    {\n        var items = await repository.GetItemsAsync();\n        if (!ShowAll)\n        {\n            items = items.Where(x => x.Completed == false).ToList();\n        }\n        var itemViewModels = items.Select(i => \n    CreateTodoItemViewModel(i));\n        Items = new ObservableCollection<TodoItemViewModel> (itemViewModels);\n    }\n    ```", "```cs\n    [RelayCommand]\n    private async Task ToggleFilterAsync()\n    {\n        ShowAll = !ShowAll;\n        await LoadDataAsync();\n    }\n    ```", "```cs\n    using System;\n    using System.Globalization;\n    internal class FilterTextConverter : IValueConverter\n    {\n        public object Convert(object value, Type targetType, object \n    parameter, CultureInfo culture)\n        {\n            return (bool)value ? \"All\" : \"Active\";\n        }\n        public object ConvertBack(object value, Type targetType, \n    object parameter, CultureInfo culture)\n        {\n            return null;\n        }\n    }\n    ```", "```cs\n    <ResourceDictionary>\n        <converters:StatusColorConverter  x:Key=\n    \"statusColorConverter\"/>\n        <converters:FilterTextConverter \n    x:Key=\"filterTextConverter\"/>\n    </ResourceDictionary>\n    ```", "```cs\n    <Button Text=\"{Binding ShowAll,Converter={StaticResource \n    filterTextConverter}, StringFormat='Filter: {0}'}\"\n        Command=\"{Binding ToggleFilterAsyncCommand}\" />\n    ```", "```cs\n    <ResourceDictionary>\n      <Style TargetType=\"NavigationPage\">\n        <Setter Property=\"BarBackgroundColor\" Value=\"#A25EBB\" />\n        <Setter Property=\"BarTextColor\" Value=\"#FFFFFF\" />\n      </Style>\n      <Style x:Key=\"FilterButton\" TargetType=\"Button\">\n        <Setter Property=\"Margin\" Value=\"15\" />\n        <Setter Property=\"BorderWidth\" Value=\"1\" />\n        <Setter Property=\"BorderColor\" Value=\"Silver\" />\n        <Setter Property=\"TextColor\" Value=\"Black\" />\n      </Style>\n      <Color x:Key=\"CompletedColor\">#1C8859</Color>\n      <Color x:Key=\"ActiveColor\">#D3D3D3</Color>\n    </ResourceDictionary>\n    ```", "```cs\n    <Button Style=\"{DynamicResource FilterButton}\"\n            Text=\"{Binding ShowAll,Converter={StaticResource \n    filterTextConverter}, StringFormat='Filter: {0}'}\"\n            BackgroundColor=\"{DynamicResource ActiveColor}\"\n            TextColor=\"Black\"\n            Command=\"{Binding ToggleFilterCommand}\">\n      <Button.Triggers>\n    <DataTrigger TargetType=\"Button\" Binding=\"{Binding ShowAll}\" \n    Value=\"True\">\n    <Setter Property=\"BackgroundColor\" Value=\"{DynamicResource \n    CompletedColor}\" />\n          <Setter Property=\"TextColor\" Value=\"White\" />\n        </DataTrigger>\n      </Button.Triggers>\n    </Button>\n    ```", "```cs\n    <Label Grid.Column=\"1\" Grid.Row=\"1\"\n          Text=\"{Binding Item.Due, StringFormat='{0:MMMM d, yyyy}'}\"\n          FontSize=\"Micro\" />\n    <Label Grid.Column=\"1\" Grid.Row=\"1\"\n          HorizontalTextAlignment=\"End\"\n          Text=\"Completed\"\n          IsVisible=\"{Binding Item.Completed}\"\n          FontSize=\"Micro\"\n          TextColor=\"{StaticResource CompletedColor}\" />\n    ```"]