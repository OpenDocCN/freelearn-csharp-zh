["```cs\nRect rect = new Rect(10, 10, 50, 50);\n```", "```cs\nVector2 position = new Vector2(10, 10);\nVector2 dimensions = new Vector2(50, 50);\nRect rect = new Rect(position, dimensions);\n```", "```cs\npublic static void Label(Rect position, string text);\npublic static void Label(Rect position, Texture image);\n```", "```cs\npublic class Chapter19Labels : MonoBehaviour {\n    public Texture2D labelTexture;\n    private void OnGUI() {\n        GUI.Label(new Rect(10, 10, 100, 50), \"Text Label\");\n        GUI.Label(new Rect(10, 80, 50, 50), labelTexture);\n    }\n}\n```", "```cs\npublic static bool Button(Rect position, string text);\npublic static bool Button(Rect position, Texture image);\n```", "```cs\npublic class Chapter19Buttons : MonoBehaviour {\n    public Texture2D buttonTexture;\n    private void OnGUI() {\n        if (GUI.Button(new Rect(10, 10, 100, 50), \"Text Button\")) {\n            Debug.Log(\"Text Button Clicked\");\n        }\n        if (GUI.Button(new Rect(10, 80, 50, 50), buttonTexture)) {\n            Debug.Log(\"Image Button Clicked\");\n        }\n    }\n}\n```", "```cs\npublic static string TextField(Rect position, string text);\npublic static string TextArea(Rect position, string text);\n```", "```cs\npublic class Chapter10TextFieldAndArea : MonoBehaviour {\n    private string textFieldText = \"Enter text\";\n    private string textAreaText = \"Enter text\";\n    private void OnGUI() {\n        textFieldText = GUI.TextField(new Rect(10, 10, 100, 50), textFieldText);\n        textAreaText = GUI.TextArea(new Rect(10, 80, 100, 100), textAreaText);\n    }\n}\n```", "```cs\npublic static bool Toggle(Rect position, bool value, string text);\n```", "```cs\npublic class Chapter19Toggle : MonoBehaviour {\n    private bool toggleBool = true;\n    private void OnGUI() {\n        toggleBool = GUI.Toggle(new Rect(10, 10, 100, 50), toggleBool,\"Toggle Me\");\n    }\n}\n```", "```cs\nGUI.Button(new Rect(10, 10, 100, 50), \"Text Button\");\n```", "```cs\nGUILayout.Button(\"Text Button\");\n```", "```cs\n    int fps;\n    [SerializeField] int fpsThreshold;\n    ```", "```cs\n    private void OnGUI() {\n            GUI.Label(new Rect(10, 10, 50, 50), \"fps = \" + fps.ToString());\n    }\n    ```", "```cs\n    private void Update() {\n        fps = (int)(1f / Time.unscaledDeltaTime);\n    }\n    ```", "```cs\n    if (fps < fpsThreshold) {\n        GUI.contentColor = Color.red;\n    }\n    else {\n        GUI.contentColor = Color.white;\n    }\n    ```", "```cs\n    public class DialogueData : ScriptableObject {\n    ```", "```cs\n    public string textPath;\n    public List<string> importedDialogue;\n    ```", "```cs\n    [CreateAssetMenu(fileName = \"New SO\", menuName = \"DialogueData\", order = 1)]\n    ```", "```cs\n    public class DialogueDataCustomEditor : Editor {\n    ```", "```cs\n    using UnityEditor;\n    ```", "```cs\n    [CustomEditor(typeof(DialogueData))]\n    ```", "```cs\n    public override void OnInspectorGUI()\n    {\n        if (GUI.Button(new Rect(10, 10, 100, 50), \"Import Button\"))\n        {\n            // Handle button click logic here\n        }\n    }\n    ```", "```cs\n    DrawDefaultInspector();\n    ```", "```cs\n    if (GUILayout.Button(\"Import Dialogue\")) {\n    }\n    ```", "```cs\n    private string[] splitTags = { \"\\r\\n\", \"\\r\", \"\\n\"};\n    ```", "```cs\n    private void ReadString() {\n        DialogueData dialogueDataScript = (DialogueData)target;\n        StreamReader reader = new StreamReader(dialogueDataScript.textPath);\n        ParseFile(reader.ReadToEnd());\n        reader.Close();\n    }\n    private void ParseFile(string theFileText) {\n        Debug.Log(theFileText);\n        DialogueData dialogueDataScript = (DialogueData)target;\n        dialogueDataScript.importedDialogue.Clear();\n        string[] lines = theFileText.Split(splitTags, StringSplitOptions.None);\n        foreach (var line in lines) {\n            dialogueDataScript.importedDialogue.Add(line);\n            EditorUtility.SetDirty(target);\n        }\n    }\n    ```", "```cs\n    public override void OnInspectorGUI() {\n            DrawDefaultInspector();\n            if (GUILayout.Button(\"Import Dialogue\")) {\n                ReadString();\n            }\n      }\n    ```"]