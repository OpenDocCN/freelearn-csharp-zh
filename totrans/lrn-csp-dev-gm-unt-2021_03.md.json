["```cs\npublic int FirstName = \"Harrison\"; \n```", "```cs\npublic\nint\nFirstName\n= \n\"Harrison\"; \n```", "```cs\npublic void MethodName() \n{\n} \n```", "```cs\npublic void MethodName() {\n} \n```", "```cs\n    Debug.Log(\"Text goes here.\");\n    Debug.Log(CurrentAge); \n    ```", "```cs\n    Debug.LogFormat(\"Text goes here, add {0} and {1} as variable\n       placeholders\", CurrentAge, FirstName); \n    ```", "```cs\ndataType UniqueName = value; \n```", "```cs\nint CurrentAge = 32; \n```", "```cs\nint CurrentAge; \n```", "```cs\nCurrentAge = 32; \n```", "```cs\naccessModifier dataType UniqueName = value; \n```", "```cs\npublic class LearningCurve : MonoBehaviour\n{\n    private int CurrentAge = 30;\n    public int AddedAge = 1;\n\n**public****float** **Pi =** **3.14f****;**\n**public****string** **FirstName =** **\"Harrison\"****;**\n**public****bool** **IsAuthor =** **true****;**\n\n    // Start is called before the first frame update\n    void Start()\n    {\n        ComputeAge(); \n    }\n\n    /// <summary>\n    /// Time for action - adding comments\n    /// Computes a modified age integer\n    /// </summary>\n    void ComputeAge()\n    {\n        Debug.Log(CurrentAge + AddedAge);\n    }\n} \n```", "```cs\nvoid Start()\n{\n    ComputeAge();\n    **Debug.Log(****$\"A string can have variables like** **{FirstName}** **inserted directly!\"****);**\n} \n```", "```cs\n    int MyInteger = 3;\n    float MyFloat = MyInteger;\n\n    Debug.Log(MyInteger);\n    Debug.Log(MyFloat); \n    ```", "```cs\n    int ExplicitConversion = (int)3.14; \n    ```", "```cs\n**var** CurrentAge = 32; \n```", "```cs\npublic int Health = 100; \n```", "```cs\npublic int MaxPlayerHealth = 100; \n```", "```cs\n5 + 4 - 3 / 2 * 1 = 8\n5 + (4 - 3) / 2 * 1 = 5 \n```", "```cs\nint CurrentAge = 32;\nCurrentAge = CurrentAge * 2; \n```", "```cs\nint CurrentAge = 32;\nCurrentAge *= 2; \n```", "```cs\nstring FullName = \"Harrison \" + \"Ferrone\"; \n```", "```cs\nreturnType UniqueName() \n{ \n    method body \n} \n```", "```cs\nvoid Start() \n{\n} \n```", "```cs\n**accessModifier** returnType UniqueName(**parameterType parameterName**) \n{ \n    method body \n} \n```", "```cs\n// Without parameters\nUniqueName();\n// With parameters\nUniqueName(parameterVariable); \n```", "```cs\n    public void GenerateCharacter() \n    {\n    } \n    ```", "```cs\n    Debug.Log(\"Character: Spike\"); \n    ```", "```cs\n    void Start()\n    {\n        **GenerateCharacter();**\n    } \n    ```", "```cs\n    public void GenerateCharacter(string name, int level) \n    ```", "```cs\n    Debug.LogFormat(\"Character: {0} - Level: {1}\", name, level); \n    ```", "```cs\n    int CharacterLevel = 32;\n    GenerateCharacter(\"Spike\", CharacterLevel); \n    ```", "```cs\n    public **int** GenerateCharacter(string name, int level)\n    {\n            Debug.LogFormat(\"Character: {0} - Level: {1}\", name, level);\n\n            **return** **level +=** **5****;**\n    } \n    ```", "```cs\n    int NextSkillLevel = GenerateCharacter(\"Spike\", CharacterLevel); \n    ```", "```cs\n    Debug.Log(NextSkillLevel);\n    Debug.Log(GenerateCharacter(\"Faye\", CharacterLevel)); \n    ```", "```cs\n    //  Start is called before the first frame update\n    void Start()\n    {\n        int CharacterLevel = 32;\n        int NextSkillLevel = GenerateCharacter(\"Spike\", CharacterLevel);\n        Debug.Log(NextSkillLevel);\n        Debug.Log(GenerateCharacter(\"Faye\", CharacterLevel));\n    }\n    public int GenerateCharacter(string name, int level)\n    {\n        // Debug.LogFormat(\"Character: {0} â€“ Level: {1}\", name, level);\n        return level += 5;\n    } \n    ```"]