- en: '*Chapter 2*: Introducing .NET 6 Core and Standard'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: .NET is a developer platform that offers libraries and tools for building many
    different types of applications, such as web, desktop, mobile, games, **Internet
    of Things** (**IoT**), and cloud applications. Using .NET, we can develop applications
    targeting many operating systems, including Windows, macOS, Linux, Android, iOS,
    and so on, and it supports processor architectures such as x86, x64, ARM32, and
    ARM64.
  prefs: []
  type: TYPE_NORMAL
- en: .NET also supports application development using multiple programming languages,
    such as C#, Visual Basic, and F#, using popular **integrated development environments**
    (**IDEs**) such as Visual Studio, Visual Studio Code, and Visual Studio for Mac.
  prefs: []
  type: TYPE_NORMAL
- en: After .NET 5, .NET 6 is now a major release that includes C# 10 and F# 6, adds
    many language features, and includes many performance improvements.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics are covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing .NET 6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the core components of .NET 6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up the development environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is .NET Standard?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding .NET 6 cross-platform and cloud application support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This chapter will help us understand a few core components, libraries, and tools
    that are included in .NET for developing the applications.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Windows, Linux, or Mac machine is required and install the respective SDK
    from [https://dotnet.microsoft.com/download/dotnet/6.0](https://dotnet.microsoft.com/download/dotnet/6.0).
  prefs: []
  type: TYPE_NORMAL
- en: Introducing .NET 6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In 2002, Microsoft released the first version of .NET Framework, a development
    platform to develop web and desktop applications. .NET Framework offers many services,
    including managed code execution, a vast set of APIs via a base class library,
    memory management, a common type system, language interoperability, and development
    frameworks such as ADO.NET, ASP.NET, WCF, WinForms, and **Windows Presentation
    Framework** (**WPF**). Initially, it was released as a separate installer, but
    it was later integrated and shipped with the Windows operating system. .NET Framework
    4.8 is the latest version of .NET Framework.
  prefs: []
  type: TYPE_NORMAL
- en: In 2014, Microsoft announced an open source, cross-platform implementation of
    .NET called **.NET Core**. .NET Core was built from scratch to make it cross-platform
    and it is currently available on Linux, macOS, and Windows. .NET Core is fast
    and modular and offers support side by side so that we can run different versions
    of .NET Core on the same machine without affecting other applications.
  prefs: []
  type: TYPE_NORMAL
- en: .NET 6 is an open source, cross-platform implementation of .NET with which you
    can build applications that can run on Windows, macOS, and Linux operating systems.
    With .NET 6, Microsoft's unified platform to develop browser, cloud, desktop,
    IoT, and mobile applications in order to use the same .NET libraries and share
    code easily.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about new features in .NET 6, you can visit [https://docs.microsoft.com/en-us/dotnet/core/whats-new/dotnet-6](https://docs.microsoft.com/en-us/dotnet/core/whats-new/dotnet-6).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: .NET 6 is a **long-term support** (**LTS**) release; it is supported for 3 years
    from the generally available date. It is recommended to migrate, particularly
    .NET 5 apps to .NET 6\. For more details, you can visit [https://dotnet.microsoft.com/en-us/platform/support/policy/dotnet-core](https://dotnet.microsoft.com/en-us/platform/support/policy/dotnet-core).
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's understand the core features of .NET.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the core features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are a couple of the core features of .NET that we will understand
    more in depth:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Open source**: .NET is a free (with no licensing costs, including for commercial
    use) and open source developer platform that offers many development tools for
    Linux, macOS, and Windows. Its source code is maintained by Microsoft and the
    .NET community on GitHub. You can access the .NET repositories at [https://github.com/dotnet/core/blob/master/Documentation/core-repos.md](https://github.com/dotnet/core/blob/master/Documentation/core-repos.md).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cross-platform**: .NET applications run on many operating systems, including
    Linux, macOS, Android, iOS, tvOS, watchOS, and Windows. They also run consistently
    across processor architectures, such as x86, x64, ARM32, and ARM64.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With .NET, we can build the following types of applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table 2.1 – Application types'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Table_2.1.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Table 2.1 – Application types
  prefs: []
  type: TYPE_NORMAL
- en: '**Programming languages**: .NET supports multiple programming languages. Code
    written in one language is accessible in other languages. The following table
    shows the supported languages:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Table 2.2 – Supported Languages'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Table_2.2.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Table 2.2 – Supported Languages
  prefs: []
  type: TYPE_NORMAL
- en: '**IDEs**: .NET supports multiple IDEs. Let''s understand each one:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'a. **Visual Studio** is a feature-rich IDE available on the Windows platform
    to build, debug, and publish .NET applications. It is available in three editions:
    Community, Professional, and Enterprise. Visual Studio 2022 Community Edition
    is free for students, individual developers, and organizations contributing to
    open source projects.'
  prefs: []
  type: TYPE_NORMAL
- en: b. **Visual Studio for Mac** is free and available for macOS. It can be used
    to develop cross-platform applications and games for iOS, Android, and the web
    using .NET.
  prefs: []
  type: TYPE_NORMAL
- en: c. **Visual Studio Code** is a free, open source, lightweight yet powerful code
    editor available on Windows, macOS, and Linux. It has built-in support for JavaScript,
    TypeScript, and Node.js and, with extensions, you can add support for many popular
    programming languages.
  prefs: []
  type: TYPE_NORMAL
- en: d. **Codespaces** is a cloud development environment powered by Visual Studio
    Code and hosted by GitHub to develop .NET applications.
  prefs: []
  type: TYPE_NORMAL
- en: '**Deployment models**: .NET supports two modes of deployment:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'a. **Self-contained**: When a .NET application is published in self-contained
    mode, the published artifact contains the .NET runtime, libraries, and the application
    and its dependencies. Self-contained applications are platform-specific, and the
    target machine need not have the .NET runtime installed. The machine uses the
    .NET runtime shipped along with the application to run the application.'
  prefs: []
  type: TYPE_NORMAL
- en: 'b. **Framework-dependent**: When a .NET application is published in framework-dependent
    mode, the published artifact contains only the application and its dependencies.
    The .NET runtime must be installed on the target machine to run the application.'
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's understand the application frameworks offered by .NET.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding application frameworks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '.NET simplifies application development by offering many application frameworks.
    Each application framework contains a set of libraries to develop targeted applications.
    Let''s understand each in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ASP.NET Core**: This is an open source and cross-platform application development
    framework that lets you build modern, cloud-based, internet-connected applications,
    such as web, IoT, and API applications. ASP.NET Core is built on top of .NET Core,
    hence you can build and run across platforms, such as Linux, macOS, and Windows.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Blazor**: This is an application framework to build interactive client-side
    web UI using C# instead of JavaScript. Blazor applications can re-use code and
    libraries from the server side and run in the browser using WebAssembly or handle
    Client UI events on the server using SignalR.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**WPF**: This is a UI framework that lets you create desktop applications for
    Windows. WPF uses **Extensible Application Markup Language** (**XAML**), a declarative
    model for application development.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Entity Framework** (**EF**) Core: This is an open source, cross-platform,
    lightweight, **object-relational mapping** (**ORM**) framework to work with databases
    using .NET objects. It supports LINQ queries, changes tracking, and schema migrations.
    It works with popular databases, such as SQL Server, SQL Azure, SQLite, Azure
    Cosmos DB, MySQL, and many more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Language-Integrated Query** (**LINQ**): This adds query capabilities to .NET
    programming languages. LINQ allows you to query data from a database, XML, in-memory
    arrays, and collections with the same API.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**.NET MAUI**: The .NET Multi-platform App UI is a cross-platform framework
    to create native mobile and desktop applications using C# and XAML. Using .NET
    MAUI, you can develop applications targeting Android, iOS, macOS, and Windows
    using the same code base.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: .NET MAUI is currently in preview, and is not recommended for production use.
    For more information, you can refer to [https://docs.microsoft.com/en-us/dotnet/maui/what-is-maui](https://docs.microsoft.com/en-us/dotnet/maui/what-is-maui).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the next section, let's understand the core components of .NET.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the core components of .NET
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '.NET has two major components: a runtime and base class libraries. The runtime
    includes a **garbage collector** (**GC**) and the **just-in-time** (**JIT**) compiler,
    which manages the execution of .NET applications and **base class libraries**
    (**BCLs**), also known as **runtime libraries** or **framework libraries**, which
    contain the fundamental building blocks for .NET applications.'
  prefs: []
  type: TYPE_NORMAL
- en: The .NET SDK is available for download at [https://dotnet.microsoft.com/download/dotnet/6.0](https://dotnet.microsoft.com/download/dotnet/6.0).
    It contains a set of libraries and tools to develop and run .NET applications.
    You can choose to install either the SDK or the .NET runtime. To develop .NET
    applications, you should install the SDK on the development machine and the .NET
    runtime to run .NET applications. The .NET runtime is included in the .NET SDK,
    hence you don't have to install the .NET runtime separately if you have already
    installed the .NET SDK.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – Visualization of the .NET SDK'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.1_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.1 – Visualization of the .NET SDK
  prefs: []
  type: TYPE_NORMAL
- en: 'The .NET SDK contains the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Common Language Runtime** (**CLR**): CLR executes the code and manages memory
    allocation. .NET applications, when compiled, produce an **intermediate language**
    (**IL**). CLR uses a JIT compiler to convert compiled code to machine code. It
    is a cross-platform runtime that is available for Windows, Linux, and macOS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Memory management**: The GC manages the allocation and release of memory
    for .NET applications. For every new object created, memory is allocated in the
    managed heap and when there is not enough free space available, GC checks for
    objects in the managed heap and removes them if they are no longer used in the
    application. For more information, you can refer to [https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection](https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JIT**: When .NET code is compiled, it is converted to IL. IL is platform-
    and language-independent, so when the runtime runs the application, JIT converts
    IL into machine code that the processor understands.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Common type system**: This defines how types are defined, used, and managed
    in CLR. It enables cross-language integrations and ensures type safety.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`System.String` and `System.Boolean`, collections such as `List<T>` and `Dictionary<Tkey,
    Tvalue>`, and utility functions to perform I/O operations, HTTP, serialization,
    and many more. It simplifies .NET application development.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Roslyn compilers**: Roslyn is an open source C# and Visual Basic compiler
    with rich code analysis APIs. It enables building code analysis tools with the
    same API used by Visual Studio.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MSBuild**: This is a tool to build .NET applications. Visual Studio uses
    MSBuild to build .NET applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NuGet**: This is an open source package manager tool with which you can create,
    publish, and reuse code. A NuGet package contains compiled code, its dependent
    files, and a manifest that includes package version number information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next section, let's understand how to set up the development environment
    to create and run .NET applications.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the development environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Setting up a development environment is very easy. You will need the .NET SDK
    to build and run .NET applications. Optionally, you can choose to install IDEs
    that support .NET application development. You need to perform the following steps
    to set up the .NET SDK on your machine:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: .NET 6 is supported by Visual Studio 2022 and Visual Studio 2022 for Mac. It
    is not supported on earlier versions of Visual Studio. Visual Studio Community
    Edition is free for individual developers, classroom learning, and for unlimited
    users in organizations contributing to research or open source projects. It offers
    the same features as Professional Edition, but for advanced features such as advanced
    debugging and diagnostics tools, testing tools, and more, you need to have Enterprise
    Edition. To compare features, you can visit [https://visualstudio.microsoft.com/vs/compare](https://visualstudio.microsoft.com/vs/compare).
  prefs: []
  type: TYPE_NORMAL
- en: On a Windows machine, download and install Visual Studio 17.0 or later from
    [https://visualstudio.microsoft.com](https://visualstudio.microsoft.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the installation options, from **Workloads**, you can select ASP.NET and
    web for web/API applications, Azure development, Mobile development with .NET
    for iOS, Android, windows, and .NET desktop development for windows applications,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.2 – Visual Studio installation, workload selection'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.2_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.2 – Visual Studio installation, workload selection
  prefs: []
  type: TYPE_NORMAL
- en: Confirm the selection and proceed to complete the installation. This will install
    Visual Studio and the .NET 6 SDK on your machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Azure development workload includes SDKs and tools to develop and support applications
    targeting Azure Services. It includes tools for Container development, Azure resource
    manager, Azure Cloud Services, Service Fabric, Azure Data Lake and Stream Analytics,
    Snapshot Debugger, and many more.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Alternatively, you can also perform the following steps to set it up:'
  prefs: []
  type: TYPE_NORMAL
- en: Download and install the .NET 6 SDK for Windows, macOS, and Linux from [https://dotnet.microsoft.com/download/dotnet/6.0](https://dotnet.microsoft.com/download/dotnet/6.0).
    .NET Core supports side-by-side execution, and hence we can install multiple versions
    of .NET Core SDKs on a development machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From Command Prompt, run the `dotnet --version` command to verify the installed
    version, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.3 – Command-line output of the dotnet command'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.3_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.3 – Command-line output of the dotnet command
  prefs: []
  type: TYPE_NORMAL
- en: Optionally, you can download and install Visual Studio Code from [https://code.visualstudio.com](https://code.visualstudio.com)
    to use it to develop the .NET application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we understand how to set up a development environment for .NET, in
    the next section, let's understand what the .NET CLI is and how it helps to create,
    build, and run .NET applications from the command line.
  prefs: []
  type: TYPE_NORMAL
- en: To set up an e-commerce application, you can refer to [https://github.com/PacktPublishing/Enterprise-Application-Development-with-C-10-and-.NET-6-Second-Edition/blob/main/README.md](https://github.com/PacktPublishing/Enterprise-Application-Development-with-C-10-and-.NET-6-Second-Edition/blob/main/README.md).
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The .NET CLI is a cross-platform, command-line interface tool available to develop,
    build, run, and publish .NET applications. It is included in the .NET SDK.
  prefs: []
  type: TYPE_NORMAL
- en: 'The CLI command structure contains `command driver` (`dotnet`), `command`,
    `command-arguments`, and `options`, and this is a common pattern for most CLI
    operations. Refer to the following command pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'For instance, the following command creates a new console application. `dotnet`
    is the driver, `new` is the command, and `console` is a template name as an argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following table illustrates a few commands and a short description of the
    commands that are supported by the CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table 2.3 – CLI commands'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Table_2.3.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Table 2.3 – CLI commands
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a simple console application and run it using the .NET CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To perform the following steps, as a prerequisite, you should have the .NET
    SDK installed on your machine. You can download and install it from https://dotnet.microsoft.com/download/dotnet/6.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Command Prompt, run the following command to create a console application
    with a project named `HelloWorld`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This command will create a new project called `HelloWorld` based on the `console`
    application template. Refer to the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.4 – Command-line output of the new console application'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.4_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.4 – Command-line output of the new console application
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to build and run the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding command will build and run the application and print the output
    onto the command window, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.5 – Command-line output of the console application when run'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.5_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.5 – Command-line output of the console application when run
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding steps, we created a new console application and ran it using
    the .NET CLI.
  prefs: []
  type: TYPE_NORMAL
- en: Overview of global.json
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On the developer machine, if multiple .NET SDKs are installed in the `global.json`
    file, you can define the .NET SDK version to be used to run the .NET CLI commands.
    In general, the latest version of the SDK is used when no `global.json` file is
    defined, but you can override this behavior by defining `global.json`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Running the following command will create a `global.json` file in the current
    directory. Depending on your requirements, you can choose a version for which
    you want to configure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is an example `global.json` file that is created by running the
    preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Here, `global.json` is configured to use the .NET SDK version 2.1.8.11\. The
    .NET CLI uses this SDK version to build and run applications.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on the .NET CLI, you can refer to [https://docs.microsoft.com/en-us/dotnet/core/tools](https://docs.microsoft.com/en-us/dotnet/core/tools).
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, let's understand what .NET Standard is.
  prefs: []
  type: TYPE_NORMAL
- en: What is .NET Standard?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: .NET Standard is a set of API specifications that are available for multiple
    .NET implementations. New APIs are added with each new version of .NET Standard.
    Each .NET implementation targets a specific version of .NET Standard and has access
    to all the APIs supported by that .NET Standard version.
  prefs: []
  type: TYPE_NORMAL
- en: Libraries that are built targeting .NET Standard can be used in applications
    that are built using .NET implementations, which support those versions of .NET
    Standard. So, when building libraries, targeting higher versions of .NET Standard
    allows more APIs to be used, but can be used only in applications built using
    the versions of .NET implementations that support it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot lists the various versions of .NET implementations
    that support .NET Standard 2.0:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.6 – .NET Standard 2.0-supported .NET implementations'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.6_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.6 – .NET Standard 2.0-supported .NET implementations
  prefs: []
  type: TYPE_NORMAL
- en: For example, if you develop a library targeting .NET Standard 2.0, it has access
    to over 32,000 APIs, but it is supported by fewer versions of .NET implementations.
    If you want your library to be accessible by the maximum number of .NET implementations,
    then choose the lowest possible .NET Standard version, but then you'd need to
    compromise on the APIs available.
  prefs: []
  type: TYPE_NORMAL
- en: Let's understand when to use .NET 6 and .NET Standard.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the use of .NET 6 and .NET Standard
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: .NET Standard makes it easy to share code between different .NET implementations,
    but .NET 6 offers a better way to share code and run on multiple platforms. .NET
    6 unifies the API to support desktop, web, cloud, mobile, and cross-platform console
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: .NET 6 implements .NET Standard 2.1, so your existing code that targets .NET
    Standard works with .NET 6; you need not change the **target framework moniker**
    (**TFM**) unless you want to access new runtime features, language features, or
    APIs. You can multitarget to .NET Standard and .NET 6 so that you can access new
    features and make your code available to other .NET implementations.
  prefs: []
  type: TYPE_NORMAL
- en: If you are building new reusable libraries that need to work with .NET Framework
    as well, then target them to .NET Standard 2.0\. If you don't need to support
    .NET Framework, then you can target either .NET Standard 2.1 or .NET 6\. It is
    recommended to target .NET 6 to gain access to new APIs, runtime, and language
    features.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the .NET CLI, running the following command creates a new class library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: It creates a class library project with the target framework as `.net6.0` or
    the latest available SDK on the developer machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you examine the `MyLibrary\MyLibrary.csproj` file, it should look as in
    the following snippet. You will notice the target framework is set to `net6.0`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'You can force it to use a specific version of the target framework while creating
    a class library using the .NET CLI. The following command creates a class library
    targeting .NET Standard 2.0:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'If you examine the `MyLibrary\MyLibrary.csproj` file, it looks as in the following
    snippet, where the target framework is `netstandard2.0`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: If you create a library targeting .NET Standard 2.0, it can be accessed in an
    application built targeting .NET Core as well as .NET Framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'Optionally, you can target multiple frameworks; for example, in the following
    code snippet, the library project is configured to target .NET 6.0 and .NET Standard
    2.0:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'When you configure your application to support multiple frameworks and build
    the project, you will notice it creates artifacts for each targeted framework
    version. Refer to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.7 – Build artifacts targeting multiple frameworks'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.7_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.7 – Build artifacts targeting multiple frameworks
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s summarize the information here:'
  prefs: []
  type: TYPE_NORMAL
- en: Use .NET Standard 2.0 to share code between .NET Framework and all other platforms.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use .NET Standard 2.1 to share code between Mono, Xamarin, and .NET Core 3.x.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use .NET 6 for code sharing moving forward.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next section, let's understand .NET 6's cross-platform capabilities and
    cloud application support.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding .NET 6 cross-platform and cloud application support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '.NET has many implementations. Each implementation contains runtimes, libraries,
    application frameworks (optional), and development tools. There are four .NET
    implementations:'
  prefs: []
  type: TYPE_NORMAL
- en: .NET Framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: .NET 6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Universal Windows Platform** (**UWP**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mono
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And the set of API specifications common to all these implementations is .NET
    Standard.
  prefs: []
  type: TYPE_NORMAL
- en: 'Multiple .NET implementations enable you to create .NET applications targeting
    many operating systems. You can build .NET applications for the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table 2.4 – .NET implementations'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Table_2.4.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Table 2.4 – .NET implementations
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s understand more about .NET implementations:'
  prefs: []
  type: TYPE_NORMAL
- en: '**.NET Framework** is the initial implementation of .NET. Using .NET Framework,
    you can develop Windows, WPF, web applications, and web and WCF services, targeting
    the Windows operating system. .NET Framework 4.5 and above implement .NET Standard,
    so libraries that are built targeting .NET Standard can be used in .NET Framework
    applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: .NET Framework 4.8 is the last version of .NET Framework and no new versions
    will be released in the future. Microsoft will continue to include it with Windows
    and support it with security and bug fixes. For new development, it is recommended
    to use .NET 6 or later.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**UWP** is an implementation of .NET with which you can build touch-enabled
    Windows applications that can run on PCs, tablets, Xbox, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mono** is an implementation of .NET. It is a small runtime that powers Xamarin
    to develop native Android, macOS, iOS, tvOS, and watchOS applications. It implements
    .NET Standard and libraries targeting .NET Standard can be used in applications
    built using Mono.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**.NET 6** is an open source, cross-platform implementation of .NET with which
    you can build console, web, desktop, and cloud applications that can run on Windows,
    macOS, and Linux operating systems. .NET 6 is now the primary implementation of
    .NET, which is built on a single code base with a uniform set of capabilities
    and APIs that can be used by .NET applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The .NET 6 SDK, along with libraries and tools, also contains multiple runtimes,
    including the .NET runtime, the ASP.NET Core runtime, and .NET Desktop Runtime.
    To run .NET 6 applications, you can choose to install either the .NET 6 SDK or
    a respective platform and workload-specific runtime:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The .NET runtime** only contains components required to run console applications.
    To run web or desktop applications, you need to install the ASP.NET Core runtime
    and .NET Desktop Runtime separately. The .NET runtime is available on Linux, macOS,
    and Windows and supports the x86, x64, ARM32, and ARM64 processor architectures.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The ASP.NET Core runtime** enables you to run web/server applications and
    is available on Linux, macOS, and Windows for the x86, x64, ARM32, and ARM64 processor
    architectures.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**.NET Desktop Runtime** enables you to run Windows-/WPF-based desktop applications
    on Windows. It is available for the x86 and x64 processor architectures.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The availability of .NET runtimes for multiple platforms makes .NET 6 cross-platform.
    On the target machine, you just need to install the runtime that is needed for
    your workload and run the application.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's explore the services offered by Azure that run .NET 6.
  prefs: []
  type: TYPE_NORMAL
- en: Cloud support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '.NET 6 is supported by popular cloud service providers, including Azure, Google
    Cloud, and AWS. Let''s understand a few services that can run .NET 6 applications
    in Azure:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Azure App Service** supports easily deploying and running ASP.NET Core 6
    applications. Azure App Service offers you the chance to host .NET 6 applications
    on Linux or Windows platforms using the x86 or x64 processor architectures. For
    more information, you can refer to [https://docs.microsoft.com/en-in/azure/app-service/overview](https://docs.microsoft.com/en-in/azure/app-service/overview).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Functions** supports deploying and running serverless functions built
    on .NET 6\. You can host Functions apps on Linux or Windows. For more information,
    you can refer to [https://docs.microsoft.com/en-us/azure/azure-functions/functions-overview](https://docs.microsoft.com/en-us/azure/azure-functions/functions-overview).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Docker** .NET 6 applications run on Docker containers. You can build independently
    deployable, highly scalable microservices that run on Docker containers. Official
    .NET Core Docker images are available at [https://hub.docker.com/_/microsoft-dotnet](https://hub.docker.com/_/microsoft-dotnet
    ) for different combinations of .NET (SDK or runtime) and operating systems. Many
    Azure services support Docker containers, including Azure App Service, Azure Service
    Fabric, Azure Batch, Azure Container Instances, and **Azure Kubernetes Service**
    (**AKS**). For more information, you can refer to https://docs.microsoft.com/en-us/dotnet/core/docker/introduction.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With .NET 6, we can develop enterprise server applications or highly scalable
    microservices that can run in the cloud. We can develop mobile applications for
    iOS, Android, and Windows operating systems. .NET code and project files look
    similar and developers can reuse skills or code to develop different types of
    applications targeting different platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned what .NET is and its core features. We learned about
    the application frameworks offered by .NET and the different deployment models
    it supports. Next, we learned about the core components, tools, and libraries
    offered by .NET and learned how to set up a development environment on a machine.
  prefs: []
  type: TYPE_NORMAL
- en: We also looked at the .NET CLI and created a sample application using the .NET
    CLI. Next, we learned what .NET Standard is and when to use .NET 6 and .NET Standard,
    and then concluded the chapter by discussing various .NET implementations, .NET
    6 cross-platform support, and cloud support.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn what is new in C# 10.0.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: .NET Core is which of the following?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. Open source
  prefs: []
  type: TYPE_NORMAL
- en: b. Cross-platform
  prefs: []
  type: TYPE_NORMAL
- en: c. Free
  prefs: []
  type: TYPE_NORMAL
- en: d. All of the above
  prefs: []
  type: TYPE_NORMAL
- en: '**Answer: d**'
  prefs: []
  type: TYPE_NORMAL
- en: The .NET Standard 2.0 library is supported by which of the following?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. .NET Framework 4.6.1 or later
  prefs: []
  type: TYPE_NORMAL
- en: b. .NET Core 2.0 or later
  prefs: []
  type: TYPE_NORMAL
- en: c. .NET 6
  prefs: []
  type: TYPE_NORMAL
- en: d. Mono 5.4+ or later
  prefs: []
  type: TYPE_NORMAL
- en: e. All of the above
  prefs: []
  type: TYPE_NORMAL
- en: '**Answer: e**'
  prefs: []
  type: TYPE_NORMAL
- en: The .NET CLI driver that is mandatory to run CLI commands is which of the following?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. `net`
  prefs: []
  type: TYPE_NORMAL
- en: b. `core`
  prefs: []
  type: TYPE_NORMAL
- en: c. `dotnet`
  prefs: []
  type: TYPE_NORMAL
- en: d. `none`
  prefs: []
  type: TYPE_NORMAL
- en: '**Answer: c**'
  prefs: []
  type: TYPE_NORMAL
- en: The .NET SDK contains which of the following?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. The .NET CLI
  prefs: []
  type: TYPE_NORMAL
- en: b. BCL
  prefs: []
  type: TYPE_NORMAL
- en: c. The runtime
  prefs: []
  type: TYPE_NORMAL
- en: d. All of the above
  prefs: []
  type: TYPE_NORMAL
- en: '**Answer: d**'
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To learn more about .NET 6, you can refer to https://docs.microsoft.com/en-us/dotnet/core/introduction.
  prefs: []
  type: TYPE_NORMAL
