["```cs\n    static GameManager instance;\n    public static GameManager Instance\n    {\n      get { return instance; }\n    }\n    ```", "```cs\n      void Awake()\n      {\n        if(instance == null)\n        {\n          instance = this;\n          DontDestroyOnLoad(this);\n        }\n        else\n        {\n          Destroy(this.gameObject);\n        }\n\n      }\n    ```", "```cs\n    using UnityEngine.SceneManagement;\n    using UnityEngine;\n    ```", "```cs\n    public class ScenesManager : MonoBehaviour\n    {\n    ```", "```cs\n      Scenes scenes;\n      public enum Scenes\n      {\n        bootUp,\n        title,\n        shop,\n        level1,\n        level2,\n        level3,\n        gameOver\n      }\n    ```", "```cs\n  public void ResetScene()\n  {\n    SceneManager.LoadScene(SceneManager.GetActiveScene().    buildIndex);\n  }\n```", "```cs\n  public void GameOver()\n  {\n    SceneManager.LoadScene(\"gameOver\");\n  }\n}\n```", "```cs\n   public void BeginGame()\n  {\n    SceneManager.LoadScene(\"testLevel\");\n  }\n```", "```cs\n    public static int currentScene = 0;\n    public static int gameLevelScene = 3;\n    bool died = false;\n    public bool Died\n    {\n     get {return died;}\n     set {died = value;}\n    }\n    ```", "```cs\n    void Awake()\n    { \n        CheckGameManagerIsInTheScene();\n        currentScene = UnityEngine.SceneManagement.SceneManager.\n            GetActiveScene().buildIndex;\n        LightAndCameraSetup(currentScene);\n    }\n    ```", "```cs\n      void LightAndCameraSetup(int sceneNumber)\n      {\n        switch (sceneNumber)\n        {\n          //testLevel, Level1, Level2, Level3\n          case 3 : case 4 :case 5: case 6:\n          {\n            LightSetup();\n            CameraSetup();\n            break;\n          }\n        }\n      }\n    ```", "```cs\n    public static int playerLives = 3;\n    ```", "```cs\n     public void LifeLost()\n    {\n    ```", "```cs\n        //lose life\n        if (playerLives >= 1)\n        {\n          playerLives--;\n          Debug.Log(\"Lives left: \"+playerLives);\n          GetComponent<ScenesManager>().ResetScene();\n        }\n    ```", "```cs\n        else\n        {\n          playerLives = 3;\n          GetComponent<ScenesManager>().GameOver();\n        }\n    }\n    ```", "```cs\n    GameManager.Instance.LifeLost();\n    ```", "```cs\n    public int score;\n    ```", "```cs\n    int score;\n    ```", "```cs\n    score = actorModel.score;\n    ```", "```cs\nusing UnityEngine;\n```", "```cs\n    public class ScoreManager : MonoBehaviour\n    {\n    ```", "```cs\n    static int playerScore;\n    public int PlayersScore \n    {\n        get\n        {\n            return playerScore;\n        }\n    }\n```", "```cs\n      public void SetScore(int incomingScore)\n        {\n            playerScore += incomingScore;\n        }\n    ```", "```cs\n     public void ResetScore()\n      {\n        playerScore = 00000000;\n      }\n    }\n    ```", "```cs\n    GameManager.Instance.GetComponent<ScoreManager>().SetScore(score);\n    ```", "```cs\n    Debug.Log(\"ENDSCORE: \" +\n      GameManager.Instance.GetComponent<ScoreManager>\n         ().PlayersScore);\n    ```", "```cs\n    void Start()\n    {\n        Light playersTorch = GetComponent<Light>();\n        playersTorch.lightMapBakeType = LightMapBakeType.    Mixed;\n        playersTorch.type = LightType.Area;\n        playersTorch.shadows = LightShadows.Soft;\n        playersTorch.range = 5f;\n    }\n    ```"]