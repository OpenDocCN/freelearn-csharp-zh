["```cs\n<input asp-for=' FirstName ' />\n```", "```cs\n<input type='text' id='Name' name='Name' value=' Mastering enterprise application development Book'>\n```", "```cs\n<input type='text' asp-for='@Name'>\n```", "```cs\ndotnet new webapp --framework net6.0 -o RazorSample \n```", "```cs\n@page\n```", "```cs\n@model IndexModel\n```", "```cs\n@{\n```", "```cs\n    ViewData[\"Title\"] = \"Home page\";\n```", "```cs\n}\n```", "```cs\n<form method=\"post\">\n```", "```cs\n    <div class=\"text-center\">\n```", "```cs\n        <select asp-for=\"WeekDaySelected\" \n```", "```cs\n          asp-items=\"Model.WeekDay\"></select>\n```", "```cs\n        <button type=Submit name=\"Submit\">Submit</button>\n```", "```cs\n        <br>\n```", "```cs\n        <h3>@ViewData[\"Message\"]</h3>\n```", "```cs\n    </div>\n```", "```cs\n</form>\n```", "```cs\npublic class IndexModel : PageModel\n```", "```cs\n{\n```", "```cs\n    public IndexModel(ILogger<IndexModel> logger)\n```", "```cs\n    {\n```", "```cs\n    }\n```", "```cs\n    public List<SelectListItem> WeekDay { get; set; }\n```", "```cs\n    public void OnGet()\n```", "```cs\n    {\n```", "```cs\n        this.WeekDay = new List<SelectListItem>();\n```", "```cs\n        this.WeekDay.Add(new SelectListItem\n```", "```cs\n                              {\n```", "```cs\n                                  Value = 'Monday',\n```", "```cs\n                                  Text =  'Monday'\n```", "```cs\n                              });\n```", "```cs\n        this.WeekDay.Add(new SelectListItem\n```", "```cs\n                              {\n```", "```cs\n                                  Value = 'Tuesday',\n```", "```cs\n                                  Text =  'Tuesday'\n```", "```cs\n                              });                                  \n```", "```cs\n    }\n```", "```cs\n}    \n```", "```cs\n[BindProperty]\n```", "```cs\npublic string WeekDaySelected { get; set; }\n```", "```cs\n<select asp-for='WeekDaySelected' asp-items='Model.WeekDay'></select>\n```", "```cs\n<input type='submit' asp-page-handler='Delete' value='Delete' />s\n```", "```cs\napp.MapRazorPages();\n```", "```cs\napp.UseEndpoints(endpoints =>\n```", "```cs\n{\n```", "```cs\nendpoints.MapControllerRoute(\n```", "```cs\nname: 'default',\n```", "```cs\npattern: '{controller=Products}/{action=Index}/{id?}');\n```", "```cs\n});\n```", "```cs\n    // Method to retrieve all products and filter.\n    Task<IEnumerable<ProductListViewModel>> GetProductsAsync(string filterCriteria = null);\n    // Method to get details of specific product.\n    Task<ProductDetailsViewModel> GetProductByIdAsync(string productId, string productName);\n    // Method to create and order, this method is primarily used to create a cart which is nothing but an order with order status as 'Cart'.\n    Task<OrderDetailsViewModel> CreateOrUpdateOrder(OrderDetailsViewModel order);\n    // Method to retrieve order by ID, also used to retrieve cart/order before checkout.\n    Task<OrderDetailsViewModel> GetOrderByIdAsync(string orderId);\n            Task<InvoiceDetailsViewModel> GetInvoiceByIdAsync(string invoiceId);\n    // Method to submit cart and create invoice.\n    Task<InvoiceDetailsViewModel> SubmitOrder(OrderDetailsViewModel order);\n    // Method to retrieve invoice details by Id.\n    Task<InvoiceDetailsViewModel> GetInvoiceByIdAsync(string invoiceId);\n    ```", "```cs\n    builder.Services.Configure<ApplicationSettings>(this.Configuration.GetSection('ApplicationSettings'));\n    ```", "```cs\n    string appinsightsInstrumentationKey = this.Configuration.GetValue<string>('AppSettings:InstrumentationKey');\n    if (!string.IsNullOrWhiteSpace(appinsightsInstrumentationKey))\n                {\n                    builder.Services.AddLogging(logging =>\n                    {                                                       logging.AddApplicationInsights(\n                      appinsightsInstrumentationKey);\n                    });                \n                       builder.Services\n                       .AddApplicationInsightsTelemetry \n                       (appinsightsInstrumentationKey);\n                }\n    ```", "```cs\n    app.UseStatusCodePagesWithReExecute('/Products/Error/{0}');\n    ```", "```cs\n    {\n    if (env.IsDevelopment())\n        app.UseDeveloperExceptionPage();\n    }\n    else\n    {\n        app.UseExceptionHandler('/Products/Error/500');\n    }\n    ```", "```cs\nprivate readonly HttpClient httpClient;\n```", "```cs\nprivate readonly ApplicationSettings applicationSettings;\n```", "```cs\npublic ECommerceService(IHttpClientFactory httpClientFactory, IOptions<ApplicationSettings> applicationSettings)\n```", "```cs\n{\n```", "```cs\nNotNullValidator.ThrowIfNull(applicationSettings, nameof(applicationSettings));\n```", "```cs\nIHttpClientFactory httpclientFactory = httpClientFactory;\n```", "```cs\nthis.httpClient = httpclientFactory.CreateClient();\n```", "```cs\nthis.applicationSettings = applicationSettings.Value;\n```", "```cs\n}\n```", "```cs\npublic async Task<IEnumerable<ProductListViewModel>> GetProductsAsync(string filterCriteria = null)\n```", "```cs\n{\n```", "```cs\n    IEnumerable<ProductListViewModel> products = new List<ProductListViewModel>();\n```", "```cs\n    using var productRequest = new \n```", "```cs\n      HttpRequestMessage(HttpMethod.Get, \n```", "```cs\n        $'{this.applicationSettings.ProductsApiEndpoint}\n```", "```cs\n        ?filterCriteria={filterCriteria}');\n```", "```cs\n    var productResponse = await this.httpClient.SendAsync(\n```", "```cs\n      productRequest).ConfigureAwait(false);\n```", "```cs\n    if (!productResponse.IsSuccessStatusCode)\n```", "```cs\n    {        await this.ThrowServiceToServiceErrors(\n```", "```cs\n               productResponse).ConfigureAwait(false);\n```", "```cs\n    }\n```", "```cs\n    if (productResponse.StatusCode != \n```", "```cs\n      System.Net.HttpStatusCode.NoContent)\n```", "```cs\n    {\n```", "```cs\n        products = await productResponse.Content\n```", "```cs\n          .ReadFromJsonAsync<Ienumerable\n```", "```cs\n           <ProductListViewModel>>().ConfigureAwait(false);\n```", "```cs\n    }\n```", "```cs\n    return products;\n```", "```cs\n}\n```", "```cs\npublic async Task<OrderDetailsViewModel> CreateOrUpdateOrder(OrderDetailsViewModel order)\n```", "```cs\n{\n```", "```cs\n    NotNullValidator.ThrowIfNull(order, nameof(order));\n```", "```cs\n    using var orderRequest = new \n```", "```cs\n      StringContent(JsonSerializer.Serialize(order), \n```", "```cs\n      Encoding.UTF8, ContentType);\n```", "```cs\n    var orderResponse = await this.httpClient.PostAsync(new \n```", "```cs\n      Uri($'{this.applicationSettings.OrdersApiEndpoint}'), \n```", "```cs\n      orderRequest).ConfigureAwait(false);\n```", "```cs\n    if (!orderResponse.IsSuccessStatusCode)\n```", "```cs\n    {\n```", "```cs\n        await this.ThrowServiceToServiceErrors(\n```", "```cs\n          orderResponse).ConfigureAwait(false);\n```", "```cs\n    }\n```", "```cs\n    var createdOrder = await orderResponse.Content\n```", "```cs\n      .ReadFromJsonAsync<OrderDetailsViewModel>()\n```", "```cs\n      .ConfigureAwait(false);\n```", "```cs\n    return createdOrder;\n```", "```cs\n}\n```", "```cs\nprivate readonly ILogger<ProductsController> logger;\n```", "```cs\nprivate readonly IECommerceService eCommerceService;\n```", "```cs\n    [Route('/Products/Error/{code:int}')]\n    public IActionResult Error(int code)\n    {\n        if (code == 404)\n        {\n            return \n              this.View('~/Views/Shared/NotFound.cshtml');\n        }\n        else\n        {\n            return \n             this.View('~/Views/Shared/Error.cshtml', new \n             ErrorViewModel { CorrelationId = \n             Activity.Current?.RootId ?? \n             this.HttpContext.TraceIdentifier });\n        }\n    }\n    ```", "```cs\n    <!DOCTYPE html>\n    <html lang='en'>\n    <head>\n        <meta charset='utf-8'>\n        <meta name='viewport' content='width=device-width, \n         initial-scale=1'>\n        <meta http-equiv='x-ua-compatible' \n         content='ie=edge'>\n        <title>Ecommerce Packt</title>\n    </head>\n    <body class='hold-transition sidebar-mini layout-top-nav'>    \n            <!-- Navbar -->        \n            <!-- Main content -->        \n             @RenderBody()\n    </body>\n    </html>\n    ```", "```cs\n@{\n    Layout = '~/Views/Shared/__Layout.cshtml';\n}\n```", "```cs\n        @inject Microsoft.ApplicationInsights.AspNetCore.JavaScriptSnippet JavaScriptSnippet\n    ```", "```cs\n    <link rel='stylesheet' href='~/plugins/fontawesome-free/css/all.min.css'>\n    <link rel='stylesheet' href='~/css/adminlte.min.css'>\n    ```", "```cs\n    <!-- REQUIRED SCRIPTS (Order shouldn't matter)-->\n    <!-- jQuery -->\n    <script src='~/plugins/jquery/jquery.min.js'></script>\n    <!-- Bootstrap 4 -->\n    <script src='~/plugins/bootstrap/js/bootstrap.bundle.min.js'></script>\n    <!-- AdminLTE App -->\n    <script src='~/js/adminlte.min.js'></script>\n    ```", "```cs\n    @Html.Raw(JavaScriptSnippet.FullScript)\n```", "```cs\n<form asp-action='Index' asp-controller='Cart'>\n```", "```cs\n<input asp-for='Id' type='hidden'>\n```", "```cs\n<input asp-for='Name' type='hidden'>\n```", "```cs\n<input asp-for='Price' type='hidden'>\n```", "```cs\n<input asp-for='ImageUrls[0]' type='hidden'>\n```", "```cs\npublic class AddressViewModel\n```", "```cs\n{\n```", "```cs\n        [Required(ErrorMessage = 'Address is required')]\n```", "```cs\n        public string Address1 { get; set; }      \n```", "```cs\n        [Required(ErrorMessage = 'City is required')]\n```", "```cs\n        public string City { get; set; }\n```", "```cs\n        [Required(ErrorMessage = 'Country is required')]\n```", "```cs\n        public string Country { get; set; }\n```", "```cs\n}\n```", "```cs\n<form asp-action='Create' asp-controller='Orders'>\n```", "```cs\n<script src='~/lib/jquery-validation/dist/jquery.validate.min.js'></script>\n```", "```cs\n<script src='~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js'></script>\n```", "```cs\n<input asp-for='ShippingAddress.Address1' class='form-control' placeholder='1234 Main St'/>\n```", "```cs\n<span asp-validation-for='ShippingAddress.Address1' class='text-danger'></span>\n```", "```cs\n@page '/counter'\n```", "```cs\n<h1>Counter</h1>\n```", "```cs\n<p>Current count: @currentCount</p>\n```", "```cs\n<button class='btn btn-primary' @onclick='IncrementCount'>Click me</button>\n```", "```cs\n@code {\n```", "```cs\n    private int currentCount = 0;\n```", "```cs\n    private void IncrementCount()\n```", "```cs\n    {        currentCount++;    }\n```", "```cs\n}\n```", "```cs\n    <li class='nav-item px-3'>\n    <NavLink class='nav-link' href='products'>\n      <span class='oi oi-list-rich' aria-\n       hidden='true'></span> Products\n    </NavLink>\n    </li>\n    ```", "```cs\n    builder.Services.AddHttpClient(\"Products\", client =>\n    {\n        client.BaseAddress = new Uri(builder.Configuration[\"ApplicationSettings:ProductsApiEndpoint\"]);\n    });\n    ```", "```cs\n    'ApplicationSettings': {\n        'ProductsApiEndpoint': \n        'https://localhost:7256/api/products/'\n      },\n    ```", "```cs\n    private List<ProductListViewModel> products;\n    protected override async Task OnInitializedAsync()\n        {\n            var client = Factory.CreateClient('Products');\n            var result = await \n              client.GetAsync('').ConfigureAwait(false);\n            result.EnsureSuccessStatusCode();\n            products = new List<ProductListViewModel>();\n            products = await \n              result.Content.ReadFromJsonAsync\n              <List<ProductListViewModel>>()\n              .ConfigureAwait(false);\n        }\n    ```", "```cs\n    @page '/products'\n    @inject IHttpClientFactory Factory\n    @using System.Net.Http.Json;@using Packt.Ecommerce.DTO.Models;\n    <h1>Products</h1>\n    <div>    <a class='btn btn-info' href='addproduct'><i class='oi oi-plus'></i> Add Product</a> </div>\n    @if (products == null)\n    { <p><em>Loading...</em></p> }\n    else { <table class='table'><thead><tr>\n                    <th>Id</th><th>Name</th>\n                    <th>Price</th><th>Quantity</th>\n                    <th>ImageUrls</th><th></th>\n                </tr></thead><tbody>\n                @foreach (var product in products)\n                {<tr>\n                       <td>@product.Id</td>\n                        <td>@product.Name</td>\n                        <td>@product.Price</td>\n                        <td>@product.Quantity</td>\n                        <td><img \n                             src='@product.ImageUrls[0]' \n                             class='product-image w-10 \n                             col-3' alt='Product' /></td>\n                        <td><a class='btn btn-info' \n                              href='editproduct/\n                              @product.Id/@product.Name'>\n                              <i class='oi oi-pencil'>\n                              </i></a></td></tr>\n                }\n            </tbody></table> }\n    ```", "```cs\n<EditForm Model='@product' OnSubmit='@OnSubmit'>\n</EditForm>\n```", "```cs\n<InputText id='category' @bind-Value='product.Name'></InputText>\n<InputSelect @bind-Value='product.Category'>\n<option selected disabled value='-1'> Choose Category</option>\n<option value='Clothing'>Clothing</option>\n<option value='Books'>Books</option>\n</InputSelect>\n```", "```cs\n<DataAnnotationsValidator />\n<ValidationSummary />\n<InputNumber id='quantity' @bind-Value='product.Quantity'></InputNumber>\n<ValidationMessage For='@(() => product.Quantity)' />\n```", "```cs\n    <input type='submit' asp-page-handler='Delete' value='Delete' />\n    ```"]