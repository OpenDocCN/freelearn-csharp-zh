- en: Chapter 3. Bridges
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In [Chapter 2](ch02.html "Chapter 2. Messages and Transforms"), *Messages and
    Transforms*, we covered a fundamental aspect of integration and transformation.
    But transformation is just one of the capabilities that bridges in BizTalk Services
    provide. In this chapter, we will take a closer look at bridges and the following
    features:'
  prefs: []
  type: TYPE_NORMAL
- en: Pipeline stages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validating, enriching, and formatting messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lookup data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Message routing and filters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BizTalk Services Explorer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A **bridge** is actually a **Windows Workflow Foundation** (**WF4**) behind
    the scenes. While you cannot create your own bridge definitions, three templates
    are provided for you:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **XML One-Way** | Caller sends XML-based messages to the bridge and expects
    no response |'
  prefs: []
  type: TYPE_TB
- en: '| **XML Request-Reply** | Caller sends XML-based messages and waits for response
    message |'
  prefs: []
  type: TYPE_TB
- en: '| **Pass-Through** | Caller sends message in any format (XML or non-XML) in
    a one-way pattern |'
  prefs: []
  type: TYPE_TB
- en: These templates provide some standard processing steps that you can use to act
    on or affect messages as they are processed. These steps form a pipeline of processing,
    with each step following the previous one sequentially. Each step also acts on
    the state of the message and its context from the previous step as well. There
    are also opportunities for you to add your own custom pipeline processing as we'll
    see later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: It is worth remembering that bridges are inherently stateless—there is nothing
    durably persisted during bridge processing. If a bridge fails during processing,
    the message could be lost, and so care must be taken to avoid this situation.
    We'll come back to this in much more detail later in this book in [Chapter 7](ch07.html
    "Chapter 7. Tracking and Troubleshooting"), *Tracking and Troubleshooting*.
  prefs: []
  type: TYPE_NORMAL
- en: Pipeline processing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Within a bridge''s pipeline, there are the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Stage | Direction | Purpose |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Message Type | Receive | Match schema to incoming message |'
  prefs: []
  type: TYPE_TB
- en: '| Decode | Receive | Convert incoming message to XML based on schema |'
  prefs: []
  type: TYPE_TB
- en: '| Validate | Receive | Determine if message is valid according to the schema
    |'
  prefs: []
  type: TYPE_TB
- en: '| Enrich | Receive | Create properties from message or context content |'
  prefs: []
  type: TYPE_TB
- en: '| Transform | Receive/Send | Map the message to another message schema format
    |'
  prefs: []
  type: TYPE_TB
- en: '| Enrich | Send | Create properties from the message or context content |'
  prefs: []
  type: TYPE_TB
- en: '| Encode | Send | Get the message ready for transmission |'
  prefs: []
  type: TYPE_TB
- en: Of course, for two-way and pass-through bridges, things are a little different,
    as you would expect. For two-way bridges, there are no Decode and Encode stages,
    and pass-through bridges only have a single stage, Enrich.
  prefs: []
  type: TYPE_NORMAL
- en: Message processing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As BizTalk Services hosted in the cloud exposes default HTTP endpoints to the
    bridges that you publish, this means that it is possible to submit messages to
    a bridge by simply posting them to the endpoint and, with the request/reply bridge,
    receive a response.
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, BizTalk Services provides many more message sources and destinations
    such as FTP, Service Bus queues and topics, and also line of business systems
    such as SAP that are covered in detail in [Chapter 4](ch04.html "Chapter 4. Enterprise
    Application Integration"), *Enterprise Application Integration*. The full list
    is provided in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Transport | Source | Destination | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| FTP | Yes | Yes | File Transfer Protocol support |'
  prefs: []
  type: TYPE_TB
- en: '| SFTP | Yes | Yes | Secure File Transfer Protocol |'
  prefs: []
  type: TYPE_TB
- en: '| Service Bus Queue | Yes | Yes | Receive and send messages to/from queues
    |'
  prefs: []
  type: TYPE_TB
- en: '| Service Bus Topic | Yes | Yes | Receive and send messages to/from topics
    |'
  prefs: []
  type: TYPE_TB
- en: '| HTTP(S) | Yes | Yes | Bridges are exposed as HTTPS endpoints by default on
    the namespace you create the service under. BizTalk Services also supports HTTP
    as a destination by allowing the calling of web services. |'
  prefs: []
  type: TYPE_TB
- en: '| Azure Blob Storage | No | Yes | Send a message to Azure Blob Storage |'
  prefs: []
  type: TYPE_TB
- en: '| Relay | No | Yes | The Service Bus relay is used with BizTalk Adapter Services
    to connect to the following line of business systems:'
  prefs: []
  type: TYPE_NORMAL
- en: SQL Server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Oracle DB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Oracle eBusiness Suite
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: mySAP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Siebel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is covered in detail in [Chapter 4](ch04.html "Chapter 4. Enterprise Application
    Integration"), *Enterprise Application Integration*. |
  prefs: []
  type: TYPE_NORMAL
- en: Messaging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With XML bridges, there are two stages that are used to identify received messages
    and determine what to do with those that are not expected. In order to know what''s
    not expected, the Message Types section of the bridge allows the specification
    of message schemas. Any number of schemas can be configured under the **Message
    Type Picker** dialog box as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Messaging](img/7401EN_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Message Types
  prefs: []
  type: TYPE_NORMAL
- en: The first stage in an XML bridge is Decode. This is only applicable for flat
    files, that is, messages that are not received as XML and have a flat file schema
    specified (more on flat file schemas in [Chapter 4](ch04.html "Chapter 4. Enterprise
    Application Integration"), *Enterprise Application Integration*). While processing
    flat files in an XML bridge may sound strange, the purpose of the bridge is to
    normalize the message into an XML format as this is what allows uniformity of
    processing useful features such as transformation and enrichment. In this way,
    data in any format, for example JSON, can be received and processed. There is
    nothing to configure in the Decode stage; instead, it takes its configuration
    from the provided message types and applies the matching flat file schema to create
    an XML representation of the file. The match is made based on the schemas selected
    in the **Message Type Picker** dialog box as shown in the preceding figure. Only
    one message type can be chosen.
  prefs: []
  type: TYPE_NORMAL
- en: After the Decode stage, the message is validated against the schemas provided.
    The only configurable property here is the Boolean setting **Report Warnings As
    Errors**. This defaults to `false,` meaning that unrecognized or invalid messages
    are still processed through the rest of the bridge. Setting this property to `true`
    will throw an error in the bridge and the message will not be processed. The caller
    (if the caller is using HTTP) will receive an **HTTP 500** status code response.
    This general "Server Error" response is generally returned with a response detailing
    the problem and providing a tracking ID that can be used to diagnose the cause.
    Fault diagnosis and troubleshooting is covered in more detail in [Chapter 7](ch07.html
    "Chapter 7. Tracking and Troubleshooting"), *Tracking and Troubleshooting*. If
    FTP is the configured source, then the file is left on the FTP server and the
    bridge will be retried up to three times after waiting a number of minutes (which
    extends over the number of retries). This behavior is not currently configurable
    in WABS.
  prefs: []
  type: TYPE_NORMAL
- en: Enrichment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Enrichment occurs at two points in the bridge: pre and post transformation.
    The enrichment stages provide the opportunity to write to message properties that
    can be used in either transformation (in the first Enrich stage) or in routing
    (post transformation). Message properties are simply name/value pairs that are
    moved through the bridge with the message itself and can be created in the Enrich
    stages.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several sources of data available when writing to a message property,
    and these are listed in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Source type | Purpose |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Soap | Access SOAP properties of the message such as the Action |'
  prefs: []
  type: TYPE_TB
- en: '| Http | Access HTTP headers sent by the caller |'
  prefs: []
  type: TYPE_TB
- en: '| Lookup | Look up a value in a Windows Azure SQL database |'
  prefs: []
  type: TYPE_TB
- en: '| Xpath | Look up a value using an XPath expression in the message |'
  prefs: []
  type: TYPE_TB
- en: '| Ftp | Access FTP properties such as filename if source is FTP |'
  prefs: []
  type: TYPE_TB
- en: '| Sftp | Access SFTP properties if source is SFTP |'
  prefs: []
  type: TYPE_TB
- en: '| System | Provides access to the system properties such as the date/time a
    message was received |'
  prefs: []
  type: TYPE_TB
- en: '| Brokered | Access Service Bus properties if source or destination is queue/topic
    based |'
  prefs: []
  type: TYPE_TB
- en: 'Using message properties allows bridge processing to be influenced and controlled
    in two primary ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Through transformation**: The message received from the caller can be transformed
    into a different format that is required by the final receiver. Message properties
    can be accessed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Through routing**: We''ll look at this in detail in a moment. Message properties
    can be used to direct a message to a particular destination.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s look at a couple of examples. In the following figure, we have a bridge
    with two destination Service Bus queues configured, **Europe** and **Americas**.
    Assume that we would like to create a property that holds the value of a field
    in the incoming message that contains the name of the country the message is from.
    The routing bridge pattern is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Enrichment](img/7401EN_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Routing bridge pattern
  prefs: []
  type: TYPE_NORMAL
- en: 'The incoming message looks like the following XML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We can create an XPath property against this message as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the first Enrich stage in the designer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Properties** window, double-click on the **Property Definitions** collection
    ellipsis.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Property Definitions** dialog box, click on **Add**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a type of XPath.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following expression in the **Identifier** field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: To easily get the XPath of an item from an XML schema, open the `.xsd` file
    in the Schema editor, select the item you want, and then look in the **Properties**
    window. The **Instance XPath** property will contain the XPath expression required
    to extract it at runtime.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Specify the message type of the `Order` instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `MappedCountry` in the **Property Name** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **string** for the **Data Type** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Property Definitions** dialog box should now look like the following screenshot.
    At runtime, when messages are received by the bridge, the Enrich stage will extract
    the field from the message using the specified XPath and store the country value
    in the message property.
  prefs: []
  type: TYPE_NORMAL
- en: '![Enrichment](img/7401EN_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Property Definitions
  prefs: []
  type: TYPE_NORMAL
- en: Lookups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another usage of message properties is with transformation. Here, a common requirement
    is transcoding, where one value needs to be replaced with or mapped to another
    value. Code tables can be used for this purpose, and we can use the lookup capabilities
    of BizTalk Services to do this and then feed the values into a transform to replace
    the value in the message.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some preparation is needed to set things up. If you recall, when you provision
    a new Windows Azure BizTalk Services instance, you can choose to create a new
    SQL Azure database to hold the various tables needed by the service. We can also
    create a table in this database to hold the transcoding data for the lookups.
    To create a table and add data to it, run the following script against the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The easiest way to do this is to go to the Azure Management Portal at [http://manage.windowsazure.com](http://manage.windowsazure.com)
    and click on the **SQL Databases** tab. The database created for your BizTalk
    Services instance will be named with the service name you provided, appended with
    the `_db` extension. Click on this database and then click on **Manage**. A new
    window (or tab) will open in the browser as shown in the following screenshot.
    In this window, you can select **New Query**, paste in the preceding SQL code,
    and click on **Run** to create the table and populate it with some data.
  prefs: []
  type: TYPE_NORMAL
- en: '![Lookups](img/7401EN_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Windows Azure SQL query editor
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in the dialog box of **Property Definitions**, we can configure the
    Enrich stage in the bridge as before by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the **Property Definitions** dialog box on the first Enrich stage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Lookup** for the **Type** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the dropdown list for the **Identifier** field and click on **Configure
    New…**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The dialog box will be displayed; complete it as shown in the following screenshot:![Lookups](img/7401EN_03_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provider configuration
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: To get the **Connection String** value, log back into the Azure Management Portal,
    click on the **SQL Databases** tab as you did earlier, and click on the WABS database
    that was created when you provisioned your service. Click on **Dashboard** and
    then click on **Show Connection Strings**. Copy the value in the ADO.NET textbox
    into this field.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on **OK** to close the dialog box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the **Lookup** property, select **MappedCountry**—this is the context property
    that was created by the XPath earlier and is used as input to the lookup.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `MappedCountry` in the **Property Name** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **string** in the **Data Type** dropdown.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the values as shown in the following screenshot:![Lookups](img/7401EN_03_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit Property dialog box
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on **OK** to create the property.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, click on **OK** to close the **Property Definitions** dialog box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, when a message is received, the country name in the message is looked
    up in the database and the ISO country code will be returned and stored in the
    **MappedCountry** property. To finish off, we need to add a transformation to
    update the message itself with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the project and select **Add** | **New Item…**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Map** in the templates dialog box and provide a map name of `CountryNameToCountryCode.trfm`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **OK** to create the map.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the open map, click on the **Open Source Schema** link. Select the **PO.XSD**
    schema (from [Chapter 2](ch02.html "Chapter 2. Messages and Transforms"), *Messages
    and Transforms*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do the same for the **Open Destination Schema** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the functoids toolbox, drag-and-drop a **Get Context Property** functoid
    to the designer (it's located in the **Misc Operations** section).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the functoid on the map to configure it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Property Name** field, enter `MappedCountry`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **OK** to close the dialog box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hold down the *Shift* key and click and hold the left mouse button on the `Order`
    node in the left-hand side schema. While still holding the left mouse button and
    the *Shift* key, drag across to the `Order` node in the right-hand side schema
    to connect them. In the pop up that is shown, select **Link by Name**. Recall
    from [Chapter 2](ch02.html "Chapter 2. Messages and Transforms"), *Messages and
    Transforms*, that this action will map every field from the source to the destination.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, you need to delete the link between the `Country` nodes on the left
    and right as you are now looking up this value in the functoid.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The map should now look like the following screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: There are some limits in the bridge configuration **user interface** (**UI**)
    that can make changing configuration difficult. It is worth remembering that the
    bridge is simply an XML configuration file with associated configuration files
    for each source and destination present on the bridge.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For example, there is no way through the UI to change the database details for
    an existing lookup added in an Enrich stage. To do this, though, you simply need
    to open the `LookupProviderConfigurations.xml` file and edit the connection details.
    It is also important to notice that the username and password details for the
    connection are actually stored in this file, and it should therefore be treated
    with some care.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Lookups](img/7401EN_03_07.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The country-code map
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The last step needed is to associate the map with the bridge. Double-click on
    the bridge file to open it (the `MessageFlowItinerary.bcs` file in the Solution
    Explorer).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the **SimpleBridge** component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down to the **Transform** stage and click on the **XMLTransform** box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Properties** window, click on the elipsis (**…**) next to the **Maps**
    property.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The map you just created should be shown in the dialog box; just check the **Selected**
    column to enable it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Routing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now let's look at another common scenario for messaging—routing. Here, a message
    needs to be delivered to one of a number of potential endpoints depending on some
    criteria. That criteria could be based on the property of the message (such as
    where it came from) or a property in the message (a data item such as `country`).
    Such content-based routing is easily achievable with BizTalk Services, as we'll
    see.
  prefs: []
  type: TYPE_NORMAL
- en: It should be noted that a message cannot be sent to more than one endpoint.
    This is something BizTalk Server is capable of, but currently BizTalk Services
    is not. Instead, BizTalk Services allows you to choose between destinations based
    on the routing rules you configure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Look at the design in the *Routing bridge pattern* figure of the *Enrichment*
    section again. Notice that there are two possible destinations. We will now configure
    the message flow itinerary to route the message to the `Americas` destination
    if the `Country` property is `USA`; otherwise, we''ll route to `Europe`. To do
    this, we need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the arrow connecting the bridge to the `Americas` destination.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Properties** window, click on the **Filter Condition** property.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `MappedCountry = '844'` or `MappedCountry = '124'`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on the arrow connecting to the `Europe` destination.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Properties** window, click on the **Filter Condition** property.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `MappedCountry = '826'`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can change the order in which the routes are evaluated by clicking on the
    bridge, and in the **Properties** window, click on the ellipsis (**…**) next to
    the **Route Ordering Table** property. A dialog box, as in the following screenshot,
    will be shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Routing](img/7401EN_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Changing the route order
  prefs: []
  type: TYPE_NORMAL
- en: By using the up and down arrows, the evaluation order can be changed so that
    you can ensure that the first matching condition you want is where the message
    will be routed to.
  prefs: []
  type: TYPE_NORMAL
- en: Trying it out
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As the bridge sends messages to one of the two Service Bus queues, you need
    to create these first in the Azure Management Portal. Create two queues, one called
    `europe` and the other `americas`. The connection information for these queues
    then needs to be set on each of the queue destinations on the bridge. The **Runtime
    Address** property for each takes the following form:'
  prefs: []
  type: TYPE_NORMAL
- en: '`sb://<your namespace>.servicebus.windows.net/Europe`'
  prefs: []
  type: TYPE_NORMAL
- en: The Authentication property also needs to be configured. The Token Provider
    type should be set to Shared Secret and the Issuer Secret set to the ACS Key for
    your Service Bus namespace.
  prefs: []
  type: TYPE_NORMAL
- en: You're now ready to deploy the solution. Do this in the normal way, and once
    deployed, you will have an HTTPS endpoint deployed to which you can post messages.
  prefs: []
  type: TYPE_NORMAL
- en: 'To send a message into the deployed bridge, you can use the BizTalk Service
    Explorer, which provides a number of useful features for managing and testing
    your solutions. It is an extension to Visual Studio and can be set up as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch Visual Studio 2012, and in the **Tools** menu, select **Extensions and
    Updates…**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Online** link in the top-left corner, and in the search box,
    enter `biztalk service explorer` as shown in the following screenshot:![Trying
    it out](img/7401EN_03_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing BizTalk Service Explorer
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **Download** button, which will download an MSI file. Double-click
    on it to install and relaunch Visual Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **View** menu, select **Server Explorer**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Server Explorer** window will have a new node, **Windows Azure BizTalk
    Services**; right-click on it and select **Add BizTalk Service…** as shown in
    the following screenshot:![Trying it out](img/7401EN_03_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding a BizTalk Service instance
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the dialog box that appears, enter the details of your service instance as
    shown in the following screenshot, replacing the details with your values as appropriate,
    and click on **OK**:![Trying it out](img/7401EN_03_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring the Explorer
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that you have the Explorer set up, expand the **Bridges** node and right-click
    on the bridge you just deployed and click on **Send Test Message…**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the dialog box that appears, paste the test message from the start of this
    chapter as shown in the following screenshot and click on the **Send** button:![Trying
    it out](img/7401EN_03_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Testing a bridge
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When you do this, remember that depending on the value you set `Country` to
    in the input message, you can direct messages to either the `Europe` or the `Americas`
    queue, as shown in the *Routing bridge pattern* figure of the *Enrichment* section,
    by using the values `UK`, `USA`, or `CANADA`.
  prefs: []
  type: TYPE_NORMAL
- en: To view the contents of a queue, you can use the Service Bus Explorer application
    that you can download from [http://code.msdn.microsoft.com/windowsazure/Service-Bus-Explorer-f2abca5a](http://code.msdn.microsoft.com/windowsazure/Service-Bus-Explorer-f2abca5a).
    The following screenshot shows the `Europe` destination queue containing the message
    we just posted into the bridge. Notice the `Country` node in the message contains
    the value `826` from the SQL lookup table, replacing the value `UK` that was in
    the original message.
  prefs: []
  type: TYPE_NORMAL
- en: '![Trying it out](img/7401EN_03_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Viewing a message in the queue
  prefs: []
  type: TYPE_NORMAL
- en: Try changing the test message country to one that is not in the lookup table
    to see what happens. If you enter a country that does not exist, the lookup will
    fail. You will actually get a 500 HTTP response code back with a SOAP fault error
    message **Lookup returned no results**. Now try changing the value of `UK` in
    the lookup table to, say, `123`. What will happen now is that the route will fail
    as there is no match to either destination. You will get back the same HTTP 500
    code, but this time with a SOAP fault of **No Filter matched for the message**.
    Have fun experimenting on your own!
  prefs: []
  type: TYPE_NORMAL
- en: Brokered messaging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you refer back to the table in the *Enrichment* section, you may have been
    intrigued by the Brokered property type. Messages that flow through bridges received
    from Service Bus are based on the Service Bus BrokeredMessage type (see [http://msdn.microsoft.com/en-us/library/microsoft.servicebus.messaging.brokeredmessage.aspx](http://msdn.microsoft.com/en-us/library/microsoft.servicebus.messaging.brokeredmessage.aspx)
    for more details). This class provides a number of properties that are exposed
    in BizTalk Services such as `CorrelationId`, `MessageId`, and `SessionId`. What
    is really interesting about this is that when you are using the Service Bus Queue
    or Topic destination, properties you create in the bridge (any property, not just
    brokered properties) or properties set on received messages when Service Bus is
    the source are not just accessible inside the bridge, but outside of it as well.
    This is very useful for passing state from BizTalk Services to a downstream application
    consuming messages from a queue as that application will be able to see the properties
    you set in the bridge.
  prefs: []
  type: TYPE_NORMAL
- en: Note that though this is only applicable for Service Bus sources and destinations,
    if you were to chain one bridge to another, for example, you would not be able
    to pass these properties because chaining actually makes calls over HTTP and thus
    loses the context. Instead, if you wish to pass properties between bridges and
    from a bridge to another application, you must write the properties to the message
    header (in the case of HTTP) in order to preserve them. However, if you are chaining
    via Service Bus, then properties set in the first sending bridge will be accessible
    in the second receiving bridge.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have taken a closer look at the fundamental construct of
    Windows Azure BizTalk Services—the bridge. We've seen how bridges can be configured
    to perform a range of integration activities and how to perform content and context-based
    routing. While we have looked at most of what bridges can do, in the next chapter,
    we'll revisit bridges and look at how to perform custom logic on the stages in
    a bridge using message inspectors. We'll then look at how to track and record
    the message properties you create (tracking) and how to batch messages together
    for sending.
  prefs: []
  type: TYPE_NORMAL
