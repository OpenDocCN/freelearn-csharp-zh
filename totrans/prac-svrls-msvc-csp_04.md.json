["```cs\nALTER DATABASE [CarShareDB]\nSET CHANGE_TRACKING = ON\n(CHANGE_RETENTION = 2 DAYS, AUTO_CLEANUP = ON);\nCREATE TABLE [dbo].[Carholder](\n  [Id] [int] NOT NULL,\n  [Name] [varchar](50) NOT NULL,\n  CONSTRAINT [PK_Carholder] PRIMARY KEY CLUSTERED\n(\n  [Id] ASC\n)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]\n) ON [PRIMARY]\nGO\nALTER TABLE [dbo].[Carholder]\nENABLE CHANGE_TRACKING; \n```", "```cs\nusing Microsoft.Azure.Functions.Worker;\nusing Microsoft.Azure.Functions.Worker.Extensions.Sql;\nusing Microsoft.Extensions.Logging;\nusing Newtonsoft.Json;\nnamespace AuditService\n{\n  public class Audit\n  {\n    private readonly ILogger _logger;\n    public Audit(ILoggerFactory loggerFactory)\n    {\n      _logger = loggerFactory.CreateLogger<Audit>();\n    }\n    [Function(“Audit”)]\n    public void Run(\n      [SqlTrigger(“[dbo].[Carholder]”, “CarShareConnectionString”)] IReadOnlyList<SqlChange<Carholder>> changes,\n                FunctionContext context)\n        {\n          _logger.LogInformation(“SQL Changes: “ + JsonConvert.SerializeObject(changes));\n        }\n    }\n    public class Carholder\n    {\n      public int Id { get; set; }\n      public string Name { get; set; }\n    }\n} \n```", "```cs\n{\n“IsEncrypted”: false,\n“Values”: {\n“AzureWebJobsStorage”: “UseDevelopmentStorage=true”,\n“FUNCTIONS_WORKER_RUNTIME”: “dotnet-isolated”,\n“WEBSITE_SITE_NAME”: “AuditApp”\n}\n} \n```", "```cs\nusing Microsoft.Azure.Functions.Worker;\nusing Microsoft.Extensions.Logging;\nnamespace TemeletryService\n{\n  public class Telemetry\n  {\n    private readonly ILogger _logger;\n    public Telemetry(ILoggerFactory loggerFactory)\n    {\n      _logger = loggerFactory.CreateLogger<Telemetry>();\n    }\n    [Function(“Telemetry”)]\n    public void Run([CosmosDBTrigger(\n      databaseName: “carshare-db”,\n      containerName: “car-telemetry”,\n      Connection = “CosmosDBConnection”,\n      LeaseContainerName = “leases”,\n      CreateLeaseContainerIfNotExists = true)] IReadOnlyList<CarTelemetry> \n          input)\n      {\n        if (input != null && input.Count > 0)\n        {\n          _logger.LogInformation(“Documents modified: “ + input.Count);\n          _logger.LogInformation(“First document Id: “ + input[0].carid);\n        }\n      }\n    }\n    public class CarTelemetry\n    {\n      public string carid { get; set; }\n      public DateTime Date { get; set; }\n      public string Data { get; set; }\n    }\n} \n```", "```cs\nusing Azure.Messaging.ServiceBus;\nusing Microsoft.Azure.Functions.Worker;\nusing Microsoft.Extensions.Logging;\nnamespace RoutesPlanner\n{\n  public class CarSeeking\n  {\n    private readonly ILogger<CarSeeking> _logger;\n    public CarSeeking(ILogger<CarSeeking> logger)\n    {\n      _logger = logger;\n    }\n    [Function(nameof(CarSeeking))]\n    public async Task Run(\n      [ServiceBusTrigger(“car-seeking-requests”, “routes”,\n                          Connection = “car-share-bus”)]\n       ServiceBusReceivedMessage message,\n       ServiceBusMessageActions messageActions)\n       {\n         _logger.LogInformation(“Message ID: {id}”, message.MessageId);\n         _logger.LogInformation(“Message Body: {body}”, message.Body);\n         _logger.LogInformation(“Message Content-Type: {contentType}”,\n                                 message.ContentType);\n         // Complete the message\nawait messageActions.CompleteMessageAsync(message);\n       }\n    }\n  }\n} \n```"]