- en: '*Chapter 2*: Knots, Diverts, and Looping Patterns'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第二章*: 节点、转向和循环模式'
- en: This chapter introduces the concept of knots, sections of an ink story, and
    diverts, which is the functionality to move between them. We will then move into
    defining and moving between knots to create simple looping patterns. By incorporating
    choices (covered in [*Chapter 1*](B17597_01_Final_PG_ePub.xhtml#_idTextAnchor014),
    *Text, Flow, Choices, and Weaves*), we will see how you can begin to experience
    narratives composed of selecting options, having the story move between knots,
    and then use looping patterns to build complex interactions from simple rules
    in ink.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了节点的概念，即墨水故事的章节，以及转向，这是在它们之间移动的功能。然后我们将进入定义和移动到节点以创建简单的循环模式。通过结合选择（在[*第一章*](B17597_01_Final_PG_ePub.xhtml#_idTextAnchor014)，*文本、流程、选择和编织*中介绍），我们将看到您如何开始体验由选择选项、故事在节点之间移动以及使用循环模式从墨水中的简单规则构建复杂交互的叙事。
- en: 'In this chapter, we will to cover the following main topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主要主题：
- en: Tangling a flow in knots
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将流程打结
- en: Moving between sections
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在部分之间移动
- en: Looping knots
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 循环节点
- en: Detecting and changing options
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测和更改选项
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The examples used in this chapter, in `*.ink` files, can be found online on
    GitHub at [https://github.com/PacktPublishing/Dynamic-Story-Scripting-with-the-ink-Scripting-Language/tree/main/Chapter2](https://github.com/PacktPublishing/Dynamic-Story-Scripting-with-the-ink-Scripting-Language/tree/main/Chapter2).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的示例，在`*.ink`文件中，可以在GitHub上找到，网址为[https://github.com/PacktPublishing/Dynamic-Story-Scripting-with-the-ink-Scripting-Language/tree/main/Chapter2](https://github.com/PacktPublishing/Dynamic-Story-Scripting-with-the-ink-Scripting-Language/tree/main/Chapter2)。
- en: Tangling a flow in knots
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将流程打结
- en: 'In [*Chapter 1*](B17597_01_Final_PG_ePub.xhtml#_idTextAnchor014), *Text, Flow,
    Choices, and Weaves*, choices were explained as capable of branching a story into
    different sections. Some simple branching structures were shown, but movement
    through a story consisted of flowing down from one weave to another. When a section
    is given a name in ink, it becomes one of its central concepts: a `==`) and the
    name of the knot on a single line. After this definition, every line until the
    next knot encountered becomes a part of the original knot. By giving names to
    sections, they can be navigated to within ink to create more complex narrative
    experiences for readers.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第一章*](B17597_01_Final_PG_ePub.xhtml#_idTextAnchor014)，*文本、流程、选择和编织*中，选择被解释为能够将故事分支到不同的部分。展示了简单的分支结构，但故事中的移动是从一个编织到另一个的流动。当在墨水中给部分命名时，它成为其核心概念之一：一个`==`)和节点名称的单行。在此定义之后，直到遇到下一个节点之前的每一行都成为原始节点的一部分。通过给部分命名，它们可以在墨水中导航，为读者创造更复杂的叙事体验。
- en: Creating knots
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建节点
- en: A physical book is often divided into chapters. With knots, a digital ink story
    can also be divided into different parts. While a novel or textbook might use
    names for sections based on the word *chapter*, digital stories can grow beyond
    these limitations to use locations, characters, or other, more abstract divisions
    of a story.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 物理书籍通常分为章节。使用节点，数字墨水故事也可以分为不同的部分。虽然小说或教科书可能根据单词*章节*来命名部分，但数字故事可以超越这些限制，使用地点、角色或其他更抽象的故事划分。
- en: 'For example, an ink story based on a detective speaking to different suspects
    of a crime might divide itself up into knots based on its characters, as illustrated
    in the following code snippet:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，基于侦探与犯罪的不同嫌疑人交谈的墨水故事可能会根据其角色将其分成不同的节点，如下面的代码片段所示：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The name of knots in ink must follow three specific rules, as outlined here:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 墨水中的节点名称必须遵循以下三个具体规则，如下所述：
- en: They can contain numbers.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们可以包含数字。
- en: They can contain uppercase and lowercase letters.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们可以包含大写和小写字母。
- en: The only special symbol allowed is an underscore.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许的唯一特殊符号是下划线。
- en: Spaces cannot be used in the names of knots. Without spaces to break up words,
    knot names are often written using lowercase letters with an underscore between
    names, words, or other important details.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 节点名称中不能使用空格。没有空格来分隔单词，节点名称通常使用小写字母书写，名称、单词或其他重要细节之间用下划线分隔。
- en: Diverting between knots
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在节点之间转向
- en: 'Creating knots themselves has little usefulness without a way to move between
    them. In ink, moving between knots is called `-`) and a greater-than sign (`>`).
    This combination, `->`, points to which knot the flow will move to next, as illustrated
    in the following code snippet:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Once defined, a knot can be accessed by any other code within the same story.
    Within an ink story using knots, it is not uncommon for one of the first lines
    of code to be a divert.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Using DONE and END
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The introduction to the concept of a *flow* in [*Chapter 1*](B17597_01_Final_PG_ePub.xhtml#_idTextAnchor014),
    *Text, Flow, Choices, and Weaves* mentioned a specific error that all the three
    previous code examples in this chapter have in common. Because diverting between
    knots introduces the possibility of creating a complex narrative, ink needs to
    know at least one ending of the story to stop a story from *running out*. To help
    signal to ink when a story is going to end, all stories have two built-in knots
    called `DONE` and `END`. Unlike other knots using lowercase and— often—underscores,
    these are written using uppercase letters.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: The differences between `DONE` and `END` are in their usage. When a story diverts
    to `DONE` (`-> DONE`), it signals the end of the current flow but not the end
    of the story. `END`, however, signals the end of all possible flows and completely
    ends a story. The use of `DONE` allows for creating a new flow structure. `END`
    stops the story and does not allow for anything else to happen.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: 'Any ink story diverting to a knot, not `DONE` or `END`, must divert to either
    at some point, or the story will be unusable. Returning to the use of `example_knot`
    earlier in this chapter, a usable form of the code would be this:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Example 1
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Within Inky, the use of the phrase `End of story` displayed at the end of every
    output is the use of the special knot, `END`. Without content to show, the story
    has come to its end. In the terminology of ink, it has diverted to `END`. Here
    is a screenshot displaying this:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – End of story'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.1_B17597.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.1 – End of story
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Moving between sections
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Knots allow authors to divide up an ink story into sections they can name. Diverting
    allows for moving between these knots. In [*Chapter 1*](B17597_01_Final_PG_ePub.xhtml#_idTextAnchor014),
    *Text, Flow, Choices, and Weaves*, choices were introduced using the asterisk
    (`*`) and the ability to branch a story. Using a divert as the result of a choice
    allows an author to craft a weave, a set of choices, where each could divert to
    different knots.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, returning to the detective example earlier in the chapter, an
    updated version with choices where each one diverted to knots for the characters
    would look like this:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Example 2
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the updated version, a *weave* is added. Each choice within it immediately
    diverts to a knot matching a character. Inside the knots is a use of the built-in
    `DONE` knot to let ink know the flow should stop after the content of the knot.
    In the new code, a much more complex story is created by only using the three
    concepts of choices, diverts, and knots.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在更新版本中，增加了一个*编织*。其中每个选择都会立即转向与一个字符匹配的结点。在结点内部，使用内置的 `DONE` 结点来让墨水知道在结点内容之后应该停止流程。在新代码中，仅使用选择、转向和结点的三个概念就创建了一个更复杂的故事。
- en: Knots and stitches
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结点和针脚
- en: 'Knots allow an ink story to be broken up into different parts. Within a knot,
    additional subsections can be added, called `=`) and its name. Stitches follow
    the same naming rules of knots: they can contain numbers, letters, and an underscore,
    but cannot use any other special characters. Stitches can also only appear inside
    an existing knot.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 结点允许墨水故事被分成不同的部分。在结点内部，可以添加额外的子部分，称为 `=`) 和其名称。针脚遵循与结点相同的命名规则：它们可以包含数字、字母和下划线，但不能使用任何其他特殊字符。针脚也仅可以出现在现有的结点内部。
- en: 'Returning to the `example_knot` code, two stitches could be added, as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到 `example_knot` 代码，可以添加两个针脚，如下所示：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The common error of a flow *running out* for knots also applies to stitches.
    As subsections of a story, they must also either divert to another knot or stitch
    or use the built-in knots to stop the flow or story. In the following screenshot,
    you can see an example of a flow running out in a stitch:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 流程在结点处“跑出”的常见错误也适用于针脚。作为故事的一部分，它们也必须转向另一个结点或针脚，或者使用内置的结点来停止流程或故事。在下面的屏幕截图中，你可以看到一个在针脚中流程跑出的例子：
- en: '![Figure 2.2 – An error of flow running out in an example stitch'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.2 – 示例针脚中流程跑出的错误'
- en: '](img/Figure_2.2_B17597.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.2_B17597.jpg)'
- en: Figure 2.2 – An error of flow running out in an example stitch
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.2 – 示例针脚中流程跑出的错误
- en: 'The first stitch in a knot is an exception to this error. The story will flow
    from the knot into the first stitch automatically. A corrected version of the
    previous example, accounting for flowing into the first stitch and including additional
    diverts, is given here:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 结点中的第一个针脚是此错误的例外。故事将自动从结点流向第一个针脚。以下给出了一个修正后的示例，考虑到流向第一个针脚并包括额外的转向：
- en: Example 3
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 3
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This would be the output:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是输出：
- en: '![Figure 2.3 – Inky output from diverting to example_knot'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.3 – 从 example_knot 转向的 Inky 输出'
- en: '](img/Figure_2.3_B17597.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.3_B17597.jpg)'
- en: Figure 2.3 – Inky output from diverting to example_knot
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.3 – 从 example_knot 转向的 Inky 输出
- en: As their own subsections of an ink story, stitches can also be accessed directly.
    Diverting to a stitch inside of a knot follows `.`), is used between the name
    of the divert and the stitch within it.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 作为墨水故事的自身子部分，针脚也可以直接访问。转向结点内部的针脚遵循 `.`)，它用于转向名称和其中针脚之间的名称。
- en: 'Diverting directly to `stitch_two` at the top of the previous code would produce
    the following code:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 直接转向前一个代码顶部中的 `stitch_two` 会产生以下代码：
- en: Example 4
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 4
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This would be the output:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是输出：
- en: '![Figure 2.4 – Ink output from diverting to example_knot.stitch_two stitch'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.4 – 从 example_knot.stitch_two 针脚转向的墨水输出'
- en: '](img/Figure_2.4_B17597.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.4_B17597.jpg)'
- en: Figure 2.4 – Ink output from diverting to example_knot.stitch_two stitch
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.4 – 从 example_knot.stitch_two 针脚转向的墨水输出
- en: Dividing up a story across different files
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在不同文件间划分故事
- en: 'As new knots and stitches are added to a single file, they can quickly grow
    very long. To help with this issue, ink has a keyword for combining files: `INCLUDE`.
    When used with ink code, the `INCLUDE` keyword includes another file based on
    its filename.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当将新的结点和针脚添加到单个文件中时，它们可以迅速变得非常长。为了帮助解决这个问题，墨水有一个用于组合文件的关键字：`INCLUDE`。当与墨水代码一起使用时，`INCLUDE`
    关键字根据其文件名包含另一个文件。
- en: 'The use of the `INCLUDE` keyword has the following two rules:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `INCLUDE` 关键字有以下两个规则：
- en: It should only be used at the top of files.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它应仅用于文件顶部。
- en: It cannot be used inside knots.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它不能在结点内部使用。
- en: 'In Inky, additional files can be added to an existing project by using the
    **New Included ink File** menu option, as illustrated in the following screenshot,
    and naming the new file:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Inky 中，可以通过使用**新包含墨水文件**菜单选项向现有项目添加额外的文件，如图所示，并命名新文件：
- en: '![Figure 2.5 – Inky''s New Included Ink File menu option'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.5 – Inky 的新包含墨水文件菜单选项'
- en: '](img/Figure_2.5_B17597.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.5_B17597.jpg)'
- en: Figure 2.5 – Inky's New Included Ink File menu option
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.5 – Inky 的新包含墨水文件菜单选项
- en: 'Using this functionality with the main ink file option also adds a single newline
    to the existing ink file, if it exists. For example, creating an `additionalFile.ink`
    file will generate an additional line of code: `INCLUDE additionalFile.ink`.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此功能与主 ink 文件选项一起还会在现有的 ink 文件中添加一个单独的新行，如果它存在的话。例如，创建一个 `additionalFile.ink`
    文件将生成一行额外的代码：`INCLUDE additionalFile.ink`。
- en: Warning
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Inky does not automatically add `.ink` to a filename when creating included
    ink files. It is strongly recommended to always add the file type when using this
    functionality.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Inky 在创建包含的 ink 文件时不会自动将 `.ink` 添加到文件名中。强烈建议在使用此功能时始终添加文件类型。
- en: 'Every use of `INCLUDE` adds the file to the current project. This means any
    knots and stitches in these included files can be accessed by any others. Because
    files can be named after locations, characters, or other abstractions in the story,
    this allows an author to break a story into different files with their own knots
    and stitches, as shown in the following code example:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 每次使用 `INCLUDE` 都会将文件添加到当前项目中。这意味着这些包含文件中的任何节点和针都可以被其他任何文件访问。因为文件可以根据故事中的位置、角色或其他抽象命名，这允许作者将故事分成不同的文件，每个文件都有自己的节点和针，如下面的代码示例所示：
- en: Example 5
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 5
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Each choice diverts to a stitch in another file in the new example. Because
    Inky uses `INCLUDE` to combine files into a single project, the knots and stitches
    as part of the `books.ink` file can be accessed as if all the code were part of
    one file, as illustrated in the following code example:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在新示例中，每个选择项都会导向另一个文件中的一个针。因为 Inky 使用 `INCLUDE` 将文件组合成一个单一的项目，所以 `books.ink`
    文件中的节点和针可以像所有代码都是同一个文件的一部分一样访问，如下面的代码示例所示：
- en: Example 5 (books.ink)
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 5 (books.ink)
- en: '[PRE8]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Flow runs top to bottom in ink. Starting with the first file, the flow would
    show the weave of two choices. Choosing the `Red Book` option would then divert
    to the stitch in the other file and, ultimately, to the use of the divert in the
    `DONE` special knot, as illustrated in the following screenshot:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ink 中，流程从上到下运行。从第一个文件开始，流程会显示两个选择项的交织。然后选择 `Red Book` 选项会导向另一个文件中的针，最终导向 `DONE`
    特殊节点中的 `divert`，如下面的截图所示：
- en: '![Figure 2.6 – Combined output from Red Book choice in Example 5'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 2.6 – Combined output from Red Book choice in Example 5](img/Figure_2.6_B17597.jpg)'
- en: '](img/Figure_2.6_B17597.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 2.6 – Combined output from Red Book choice in Example 5](img/Figure_2.6_B17597.jpg)'
- en: Figure 2.6 – Combined output from Red Book choice in Example 5
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.6 – 示例 5 中红皮书选择项的合并输出
- en: Looping knots
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 循环节点
- en: A knot can divert to itself. This fundamental concept is an important part of
    the advanced dialog and narrative structures in ink. However, care must be taken
    when having knots divert to themselves or in a looping pattern. It can become
    very easy to create **infinite loops** where the code loops without stopping.
    To prevent this error, it is always a good idea to include a weave with at least
    one choice whose content ends the story or breaks the loop.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 一个节点可以导向自身。这个基本概念是 ink 中高级对话和叙事结构的一个重要部分。然而，当节点导向自身或形成循环模式时，必须小心。很容易创建 **无限循环**，代码会无限循环而不会停止。为了防止这种错误，始终包含至少一个选择项的内容结束故事或打破循环是一个好主意。
- en: By combining choices, diverts, and knots, looping structures can be created.
    Within these structures, sticky choices become important for creating consistent
    options for readers to choose from during each loop.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 通过结合选择项、分支和节点，可以创建循环结构。在这些结构中，粘性选择对于在每次循环中为读者提供一致的选择选项变得很重要。
- en: Looping structures
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 循环结构
- en: 'The most basic looping structure has two choices. The first continues the loop
    and the second must end the story somehow, as illustrated in the following code
    example:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 最基本的循环结构有两个选择项。第一个继续循环，第二个必须以某种方式结束故事，如下面的代码示例所示：
- en: Example 6
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 6
- en: '[PRE9]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Choices, those created with an asterisk (`*`), can only be used once in an
    entire story. In the previous example, if the first option is chosen, the loop
    repeats, but the second option then appears as the only one, as illustrated in
    the following screenshot:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 选择项，那些带有星号（`*`）的，在整个故事中只能使用一次。在先前的例子中，如果选择了第一个选项，循环会重复，但第二个选项随后就会作为唯一的选择出现，如下面的截图所示：
- en: '![Figure 2.7 – Example 6 choices after one loop'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 2.7 – Example 6 choices after one loop](img/Figure_2.7_B17597.jpg)'
- en: '](img/Figure_2.7_B17597.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 2.7 – Example 6 choices after one loop](img/Figure_2.7_B17597.jpg)'
- en: Figure 2.7 – Example 6 choices after one loop
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.7 – 循环一次后的 6 个选择示例
- en: 'In some stories, reducing the options as the reader moves through the story
    could work well, but a different type of choice is needed for those cases where
    the same options are needed for every loop: **sticky choices**.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些故事中，随着读者在故事中的移动减少选项可能效果很好，但对于每个循环都需要相同选项的情况，则需要不同类型的选择：**粘性选择**。
- en: Revisiting sticky choices
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重新访问粘性选择
- en: 'In [*Chapter 1*](B17597_01_Final_PG_ePub.xhtml#_idTextAnchor014), *Text, Flow,
    Choices, and Weaves*, sticky choices were introduced. Shown as part of a flow
    moving from top to bottom and without repeating any sections, sticky choices did
    not seem very useful at the time. However, within looping patterns using diverts
    and knots, sticky choices are often the best type of choice to use, as illustrated
    in the following code example:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第一章*](B17597_01_Final_PG_ePub.xhtml#_idTextAnchor014)中，介绍了*文本、流程、选择和编织*。粘性选择作为从上到下的流程的一部分展示，且不重复任何部分，当时似乎并不太有用。然而，在循环模式中使用转向和结时，粘性选择通常是最佳选择类型，如下面的代码示例所示：
- en: Example 7
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 7
- en: '[PRE10]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the updated code, both options are sticky choices. This new code allows
    for a repeating pattern and consistent weave options regardless of loop count,
    as illustrated in the following screenshot:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在更新的代码中，两个选项都是粘性选择。这种新代码允许重复模式和一致的编织选项，无论循环次数如何，如下面的屏幕截图所示：
- en: '![Figure 2.8 – Inky output from multiple loops of Example 7](img/Figure_2.8_B17597.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.8 – 示例 7 多次循环的 Inky 输出](img/Figure_2.8_B17597.jpg)'
- en: Figure 2.8 – Inky output from multiple loops of Example 7
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.8 – 示例 7 多次循环的 Inky 输出
- en: Detecting and changing options
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测和更改选项
- en: 'Knots and stitches are not the only ink concept capable of looping—options
    can do so as well. They also have the unique ability to detect when they are part
    of looping structures. These special types of options are named **labeled options**.
    They create an ability to give a *label* to an option and track if it has been
    seen before in the story. Labels are also an example of a **variable**: a value
    changed as part of the story by code.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 结和针不是唯一能够循环的墨水概念——选项也可以这样做。它们还具有独特的检测它们是否是循环结构一部分的能力。这些特殊类型的选项被称为**标记选项**。它们创建了一个能力，可以为选项提供一个*标签*并跟踪它是否在故事中之前出现过。标签也是**变量**的一个例子：代码作为故事的一部分改变其值。
- en: 'The use of labeled options enables us to use the second type of option: `true`,
    the option is shown. If it is not, the option is hidden.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 标记选项的使用使我们能够使用第二种类型的选项：`true`，如果选项显示，则该选项可见。如果不显示，则该选项被隐藏。
- en: Labeled and conditional options
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标记和条件选项
- en: 'Labeled options are created using open and closing parentheses around a name
    after the symbol for a choice, a plus sign (`+`) or asterisk (`*`), and the text
    of the choice itself. Labeled options follow the same rules as the name of knots
    and stitches: they can contain numbers, uppercase and lowercase letters, and an
    underscore. They cannot contain spaces or other special symbols. This is illustrated
    in the following code snippet:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 使用括号（`(` 和 `)`）包围一个名称，并在选择符号（一个加号 `+` 或星号 `*`）之后，以及选择本身的文本来创建标记选项。标记选项遵循与结和针名称相同的规则：它们可以包含数字、大写和小写字母以及下划线。它们不能包含空格或其他特殊符号。以下代码片段展示了这一点：
- en: '[PRE11]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the new example code, a label called `push` is added to the first option
    and exists as a variable in the story. Because it is part of the option itself,
    its value will be increased every time the option is revisited in the story. This
    allows an author to test whether the player has been picking the same option multiple
    times. The following code example illustrates this:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在新的示例代码中，为第一个选项添加了一个名为`push`的标签，并在故事中作为一个变量存在。因为它本身是选项的一部分，所以每次在故事中重新访问该选项时，其值都会增加。这允许作者测试玩家是否多次选择了相同的选项。以下代码示例说明了这一点：
- en: Example 8
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 8
- en: '[PRE12]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In the latest change, a conditional option has also been added using open—`{`—and
    closing—`}`—curly brackets around the comparison between a variable and a value.
    In the new code, when the story starts, the reader can choose the `Push the rock
    up the hill` option. As they do, the value of the label for the option also increases.
    Once its value is at least `4`, the second option becomes available, and the reader
    can push the rock over the edge, as illustrated in the following screenshot:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在最新的更改中，还添加了一个条件选项，使用大括号（`{` 和 `}`）包围变量和值之间的比较。在新代码中，当故事开始时，读者可以选择`推石头上山`选项。当他们这样做时，该选项标签的值也会增加。一旦其值至少为`4`，第二个选项就会变得可用，读者可以将石头推到边缘，如下面的屏幕截图所示：
- en: '![Figure 2.9 – Push the rock up the hill chosen four times in Example 8](img/Figure_2.9_B17597.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.9 – 在示例 8 中选择四次将石头推上山的情形](img/Figure_2.9_B17597.jpg)'
- en: Figure 2.9 – Push the rock up the hill chosen four times in Example 8
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.9 – 在示例 8 中选择四次将石头推上山的情形
- en: 'Conditional and labeled options can also be combined. However, the order in
    which they appear is important. Labels must appear in front of conditional options.
    They cannot appear in the other order, as illustrated in the following code example:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 条件和标记选项也可以结合使用。然而，它们出现的顺序很重要。标记必须出现在条件选项之前。它们不能以其他顺序出现，如下面的代码示例所示：
- en: Example 9
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 9
- en: '[PRE13]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the new example code, the reader only sees a single option when the story
    starts. They must make the same choice six times before the first option is removed
    and the second becomes available. Once the reader selects this option, the story
    finally ends.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在新的示例代码中，当故事开始时，读者只能看到一个选项。他们必须做出相同的选项六次，然后第一个选项才会被移除，第二个选项才会变得可用。一旦读者选择了这个选项，故事最终结束。
- en: Building dynamic weaves
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建动态编织
- en: 'Sticky choices enable options to remain across loops created by diverting to
    the same knot. Labeled and conditional options allow for tracking and showing
    certain options after certain conditions are met in a story. Using all these concepts,
    dynamic weaves become possible, as illustrated in the following code example:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 粘性选择使得选项能够在通过转向相同节点创建的循环中保持。标记和条件选项允许在故事中满足某些条件后跟踪和显示某些选项。使用所有这些概念，动态编织成为可能，如下面的代码示例所示：
- en: Example 10
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 10
- en: '[PRE14]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In the new code, complex combinations of labels and conditional options are
    used to track information during the interrogation of the suspect. Making one
    choice unlocks the next in order, as the flow loops back to the same knot as information
    is slowly unlocked and the reader learns more through making one choice at a time.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在新代码中，使用复杂的标记和条件选项组合来跟踪在审问嫌疑人时的信息。做出一个选择会按顺序解锁下一个，因为流程会循环回相同的节点，随着信息的逐渐解锁，读者通过每次做出一个选择来学习更多。
- en: Note
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Some conditional options in *Example 10* use two ampersands, `&&`. This is known
    as `true`, it checks the next. If both are true, the entire combination is true.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 10* 中的一些条件选项使用两个和号 `&&`。这被称为 `true`，它检查下一个。如果两者都为真，整个组合就为真。'
- en: In the next chapter, easier ways to create sequences of information will be
    covered, as well as introducing randomness into creating text and options. Instead
    of using diverts and knots, ink supplies much simpler functionality for doing
    the same general actions and building repetitions explicitly using knots each
    time.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍创建信息序列的更简单的方法，以及介绍将随机性引入创建文本和选项。与使用转向和节点不同，墨水提供了更简单的功能来完成相同的一般操作，并且每次使用节点时都明确地构建重复。
- en: Summary
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter introduced you to knots, sections of a story, and diverts, which
    are ways to move between them. We examined the use of `DONE` and `END` as built-in
    knots to end a flow (`DONE`) and stop a story completely (`END`). Stitches, subsections
    of a knot, were then discussed to break up a story into even more parts. We learned
    that the `INCLUDE` keyword can be used to break a story into separate files and
    be *included* as part of the same project.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 本章向您介绍了节点，故事的部分，以及转向，这些是它们之间移动的方式。我们探讨了使用 `DONE` 和 `END` 作为内置节点来结束流程（`DONE`）和完全停止故事（`END`）的用法。然后讨论了缝合，节点的子部分，以将故事分解成更多的部分。我们了解到可以使用
    `INCLUDE` 关键字将故事分解成单独的文件，并将其作为同一项目的一部分 *包含*。
- en: Knots can divert to themselves. This, as we saw, is the key to creating looping
    structures where the use of other concepts, labeled and conditional options, can
    also be combined. Labels allow us to create variables for tracking how many times
    an option has been shown. Labeled options then led on to using conditional options,
    testing how many times an option has been chosen when using a looping structure.
    Finally, we ended with making a dynamic weave, using a looping structure where
    each choice made changed the values of labels and unlocked each choice in order.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 节点可以转向自身。正如我们所看到的，这是创建循环结构的关键，在这种结构中，可以使用其他概念，如标记和条件选项，并将它们结合起来。标记允许我们创建变量来跟踪一个选项被显示的次数。然后，标记选项进一步发展到使用条件选项，测试在循环结构中使用时一个选项被选择的次数。最后，我们通过使用循环结构，其中每个选择都改变了标签的值并按顺序解锁每个选择，来制作动态编织。
- en: In the next chapter, we will build on the concepts of knots and diverts. By
    navigating to different sections of a story, alternatives, an ink concept where
    different text is shown across a story or because of multiple loops, becomes possible.
    This allows ink to react to readers revisiting knots and options to show different
    content.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将基于结和分叉的概念进行构建。通过导航到故事的不同部分，可以展示不同的文本，或者在多个循环中，一个ink概念，使得在故事中或因为多个循环，不同的选择成为可能。这允许ink对读者重新访问结和选项做出反应，以展示不同的内容。
- en: Questions
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is a knot?
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是结？
- en: What is the difference between `DONE` and `END`?
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`DONE`和`END`之间的区别是什么？'
- en: What is a stitch?
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 缝合是什么？
- en: How can `INCLUDE` be used in ink?
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在ink中使用`INCLUDE`？
- en: What is the difference between a labeled and a conditional option?
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 标记选项和条件选项之间的区别是什么？
