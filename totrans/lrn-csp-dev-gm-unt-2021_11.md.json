["```cs\nusing System.Collections.Generic; \n```", "```cs\nStack<elementType> name = new Stack<elementType>(); \n```", "```cs\nStack myStack = new Stack(); \n```", "```cs\n    **// 1**\n    public Stack<string> LootStack = new Stack<string>(); \n    ```", "```cs\n    public void Initialize() \n    {\n        _state = \"Game Manager initialized..\";\n        _state.FancyDebug();\n        Debug.Log(_state);\n        **// 2**\n        **LootStack.Push(****\"Sword of Doom\"****);**\n        **LootStack.Push(****\"HP Boost\"****);**\n        **LootStack.Push(****\"Golden Key\"****);**\n        **LootStack.Push(****\"Pair of Winged Boots\"****);**\n        **LootStack.Push(****\"Mythril Bracer\"****);**\n    } \n    ```", "```cs\n    **// 3**\n    public void PrintLootReport()\n    {\n        Debug.LogFormat(\"There are {0} random loot items waiting \n           for you!\", LootStack.Count);\n    } \n    ```", "```cs\n    void OnCollisionEnter(Collision collision)\n    {\n        if(collision.gameObject.name == \"Player\")\n        {\n            Destroy(this.transform.parent.gameObject);\n            Debug.Log(\"Item collected!\");\n            GameManager.Items += 1;\n\n            **// 4**\n            **GameManager.PrintLootReport();**\n        }\n    } \n    ```", "```cs\npublic void PrintLootReport()\n{\n    **// 1**\n    **var** **currentItem = LootStack.Pop();**\n    **// 2**\n    **var** **nextItem = LootStack.Peek();**\n    **// 3**\n    **Debug.LogFormat(****\"You got a {0}! You've got a good chance of finding a {1} next!\"****, currentItem, nextItem);**\n    Debug.LogFormat(\"There are {0} random loot items waiting for you!\", LootStack.Count);\n} \n```", "```cs\n// Empty the stack and reverting the count to 0\nLootStack**.Clear();** \n```", "```cs\n// Returns true for \"Golden Key\" item\nvar itemFound = LootStack**.Contains(****\"Golden Key\"****);** \n```", "```cs\n// Creates a new array of the same length as LootStack\nstring[] CopiedLoot = new string[5]; \n/* \nCopies the LootStack elements into the new CopiedLoot array at index 0\\. The index parameter can be set to any index where you want the copied elements to be stored\n*/\nLootStack**.CopyTo(copiedLoot,** **0****);** \n```", "```cs\n// Copies an existing stack to a new array\nLootStack.ToArray(); \n```", "```cs\nQueue<elementType> name = new Queue<elementType>(); \n```", "```cs\nQueue myQueue = new Queue(); \n```", "```cs\n// Creates a new Queue of string values.\nQueue<string> activePlayers = new Queue<string>(); \n```", "```cs\n// Adds string values to the end of the Queue.\nactivePlayers**.Enqueue(****\"Harrison\"****);**\nactivePlayers**.Enqueue(****\"Alex\"****);**\nactivePlayers**.Enqueue(****\"Haley\"****);** \n```", "```cs\n// Returns the first element in the Queue without removing it.\nvar firstPlayer = activePlayers**.Peek();** \n```", "```cs\n// Returns and removes the first element in the Queue.\nvar firstPlayer = activePlayers**.Dequeue();** \n```", "```cs\nHashSet<elementType> name = new HashSet<elementType>(); \n```", "```cs\nHashSet<string> people = new HashSet<string>();\n// OR\nHashSet<string> people = new HashSet<string>() { \"Joe\", \"Joan\", \"Hank\"}; \n```", "```cs\npeople**.Add(****\"Walter\"****);**\npeople**.Add(****\"Evelyn\"****);** \n```", "```cs\npeople**.Remove(****\"Joe\"****);** \n```", "```cs\ncurrentSet.Operation(specifiedSet); \n```", "```cs\nHashSet<string> activePlayers = new HashSet<string>() { \"Harrison\", \"Alex\", \"Haley\"};\nHashSet<string> inactivePlayers = new HashSet<string>() { \"Kelsey\", \"Basel\"}; \n```", "```cs\nactivePlayers.UnionWith(inactivePlayers);\n/* activePlayers now stores \"Harrison\", \"Alex\", \"Haley\", \"Kelsey\", \"Basel\"*/ \n```", "```cs\nHashSet<string> activePlayers = new HashSet<string>() { \"Harrison\", \"Alex\", \"Haley\"};\nHashSet<string> premiumPlayers = new HashSet<string>() { \"Haley\", \"Basel\"}; \n```", "```cs\nactivePlayers.IntersectWith(premiumPlayers);\n// activePlayers now stores only \"Haley\" \n```", "```cs\nHashSet<string> activePlayers = new HashSet<string>() { \"Harrison\", \"Alex\", \"Haley\"};\nHashSet<string> premiumPlayers = new HashSet<string>() { \"Haley\",\n  \"Basel\"};\nactivePlayers.ExceptWith(premiumPlayers);\n// activePlayers now stores \"Harrison\" and \"Alex\" but removed \"Haley\" \n```"]