- en: '14'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building Interactive Web Components Using Blazor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is about using Blazor to build interactive web user interface components.
    You will learn how to build Blazor components that can execute their C# and .NET
    code on the web server or in the web browser.
  prefs: []
  type: TYPE_NORMAL
- en: When components execute on the server, Blazor uses SignalR to communicate necessary
    updates to the user interface in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: When components execute in the browser using WebAssembly, they must make HTTP
    calls to interact with data on the server. You will learn more about this in *Chapter
    15, Building and Consuming Web Services*.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing the Blazor Web App project template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building components using Blazor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining forms using the EditForm component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reviewing the Blazor Web App project template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before .NET 8, there were separate project templates for the different hosting
    models, for example, **Blazor Server App**, **Blazor WebAssembly App**, and **Blazor
    WebAssembly App Empty**. .NET 8 introduced a unified project template, named **Blazor
    Web App**,and a client-only project template, renamed **Blazor WebAssembly Standalone
    App**. Avoid using the other legacy project templates unless you must use older
    .NET SDKs.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Blazor Web App project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s look at the default template for a Blazor Web App project. Mostly, you
    will see that it is the same as an ASP.NET Core Empty template, with a few key
    additions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use your preferred code editor to open the `ModernWeb` solution, and then add
    a new project, as defined in the following list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Project template: **Blazor Web App**/ `blazor --interactivity Auto`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Solution file and folder: `ModernWeb`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Project file and folder: `Northwind.Blazor`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authentication type**: None'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configure for HTTPS**: Selected'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interactive render mode**: Auto (Server and WebAssembly)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interactivity location**: Per page/component'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Include sample pages**: Selected'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Do not use top-level statements**: Cleared'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you are using VS Code or Rider, then enter the following command at the
    command prompt or terminal: `dotnet new blazor --interactivity Auto -o Northwind.Blazor`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Good Practice**: The default interactive render moder is **Server**. We have
    explicitly chosen **Auto** so that we can see both render modes in this project.
    We have also selected to include sample pages, which you will likely not want
    in a real-world project.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that two projects are created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Northwind.Blazor`: This is the main ASP.NET Core project that defines and
    runs static SSR, streaming, and server-side Blazor components. It also references
    and hosts your client-side WebAssembly Blazor components.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Northwind.Blazor.Client`: This is a Blazor WebAssembly project for any client-side
    components that you define. In the future, it might not need to be in a separate
    project, but for .NET 8 and .NET 9, it still does.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the `ModernWeb` folder, in `Directory.Packages.props`, add an `<ItemGroup>`
    to set version numbers for server-side hosting and defining Blazor WebAssembly
    packages, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In `Northwind.Blazor.csproj`, note that it is identical to an ASP.NET Core project
    that uses the Web SDK and targets .NET 9\. Note also that it references the client-side
    project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `Northwind.Blazor.csproj`, delete the version number for the `Microsoft.AspNetCore.Components.WebAssembly.Server`
    package that allows this project to host WebAssembly components, as shown in the
    following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In `Northwind.Blazor.Client.csproj`, note that it is similar to an ASP.NET Core
    project but uses the Blazor WebAssembly SDK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `Northwind.Blazor.Client.csproj`, delete the version number for the `Microsoft.AspNetCore.Components.WebAssembly`
    package that allows this project to define WebAssembly components, as shown in
    the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Build the `Northwind.Blazor` and `Northwind.Blazor.Client` projects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `Northwind.Blazor`, note that `Program.cs` is almost identical to an ASP.NET
    Core project. One difference is the section that configures services, with its
    call to the `AddRazorComponents` method, which we had in our `Northwind.Web` project.
    This section also calls to enable interactivity on the server and client sides,
    as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also note the section for configuring the HTTP pipeline, which calls the `MapRazorComponents<App>`
    method. This configures a root application component that will be named `App.razor`,
    as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In `Northwind.Blazor`, note that the `Components` folder and its subfolders,
    like `Layout` and `Pages`, use the same naming conventions that you used in your
    `Northwind.Web` project when enabling Blazor components.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `Northwind.Blazor.Client`, in `Program.cs`, note that it creates a `WebAssemblyHostBuilder`
    instead of the normal `WebApplication` builder, as shown highlighted in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In `Northwind.Blazor.Client`, in the `Pages` folder, note that there is one
    Blazor component named `Counter.razor`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reviewing Blazor routing, layouts, and navigation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s review how routing is configured for this Blazor project, the layouts,
    and the navigation menu:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Northwind.Blazor` project folder, in the `Components` folder, in `App.razor`,
    note that it defines basic HTML page markup that references a local copy of Bootstrap
    for styling, as well as a few Blazor-specific elements, as shown highlighted in
    the following markup and noted in the list after the markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'While reviewing the preceding markup, note the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Assets are referenced using the `ComponentBase.Assets` property, which resolves
    the fingerprinted URL for a given asset. This should be used when you use `MapStaticAssets`
    middleware in `Program.cs`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A `<ImportMap />` Blazor component to represent an import map element (`<script
    type="importmap"></script>`) that defines the import map for module scripts. You
    can learn about import maps at the following link: [https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/type/importmap](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/type/importmap).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `<HeadOutlet />` Blazor component to inject additional content into the `<head>`
    section. This is one of the built-in components available in all Blazor projects.
    For example, in a Blazor page component, use the `<PageTitle>` component to set
    the `<title>` of a web page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `<Routes />` Blazor component to define the custom routes in this project.
    This component can be completely customized by the developer because it is part
    of the current project, in a file named `Routes.razor`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A script block for `blazor.web.js` that manages communication back to the server
    for Blazor’s dynamic features, like downloading WebAssembly components in the
    background and later switching from server-side to client-side component execution.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the `Components` folder, in `Routes.razor`, note that a `<Router>` enables
    routing for all Blazor components found in the current project assembly or the
    `Northwind.Blazor.Client` project assembly (for WebAssembly components), and if
    a matching route is found, then `RouteView` is executed, which sets the default
    layout for the component to `MainLayout` and passes any route data parameters
    to the component. For that component, the first `<h1>` element in it will be focused
    on, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Components` folder, in `_Imports.razor`, note that this file imports
    some useful namespaces for use in all your custom Blazor components, as shown
    in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Components\Layout` folder, in `MainLayout.razor`, note that it defines
    `<div>` for a sidebar containing a navigation menu that is implemented by the
    `NavMenu.razor` component file in this project, as well as HTML5 elements like
    `<main>` and `<article>` for the content, with a `<div>` to show unhandled errors,
    as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `Components\Layout` folder, in `MainLayout.razor.css`, note that it contains
    isolated CSS styles for the component. Due to the naming convention, styles defined
    in this file take priority over others defined elsewhere that might affect the
    component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Blazor components often need to provide their own CSS to apply styling or JavaScript
    for activities that cannot be performed purely in C#, like access to browser APIs.
    To ensure that this does not conflict with site-level CSS and JavaScript, Blazor
    supports CSS and JavaScript isolation. If you have a component named `Home.razor`,
    simply create a CSS file named `Home.razor.css`. The styles defined within this
    file will override any other styles in the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Components\Layout` folder, in `NavMenu.razor`, note that it has three
    menu items, **Home**, **Counter**, and **Weather**. These menu links are created
    by using a component named `NavLink`, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that `NavMenu.razor` has its own isolated stylesheet named `NavMenu.razor.css`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Components\Pages` folder, in `Home.razor`, note that it defines a component
    that sets the page title, and then it renders a heading and a welcome message,
    as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Components\Pages` folder, in `Weather.razor`, note that it defines
    a component that fetches weather forecasts from an injected dependency weather
    service and then renders them in a table, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Northwind.Blazor.Client` project, in the `Pages` folder, in `Counter.razor`,
    note that a Blazor page component is defined with a route of `/counter`, a render
    mode that will automatically switch between Server and WebAssembly, which has
    a private field named `currentCount` that is incremented on each click of a button,
    as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How to define a routable page component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a routable page component, add the `@page` directive to the top of
    a component’s `.razor` file, as shown in the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code is the equivalent of a mapped endpoint in `Program.cs`,
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'A page component can have multiple `@page` directives to register multiple
    routes, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The `Router` component scans the assembly specifically in its `AppAssembly`
    parameter for Blazor components with the `@page` directive, registering their
    URL paths as endpoints.
  prefs: []
  type: TYPE_NORMAL
- en: At runtime, a page component is merged with any specific layout that you have
    specified in the `Routes.razor` file `<RouteView>` component. By default, the
    Blazor Web App project template defines `MainLayout.razor` as the layout for page
    components.
  prefs: []
  type: TYPE_NORMAL
- en: '**Good Practice**: By convention, put routable page Blazor components in the
    `Components\Pages` folder.'
  prefs: []
  type: TYPE_NORMAL
- en: How to navigate routes and pass route parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Microsoft provides a dependency service named `NavigationManager` that understands
    Blazor routing and the `NavLink` component. The `NavigateTo` method is used to
    go to the specified URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'Blazor routes can include case-insensitive named parameters, and your code
    can most easily access the values passed by binding the parameter to a property
    in the code block, using the `[Parameter]` attribute, as shown in the following
    markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The recommended way to handle a parameter that should have a default value
    when it is missing is to suffix the parameter with `?` and use the null-coalescing
    operator in the `OnParametersSet` method, as shown in the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: How to use the navigation link component with routes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In HTML, you use the `<a>` element to define navigation links, as shown in
    the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'In Blazor, use the `<NavLink>` component, as shown in the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The `NavLink` component is better than an anchor element because it automatically
    sets its class to `active` if its `href` is a match with the current location
    URL. If your CSS uses a different class name, then you can set the class name
    in the `NavLink.ActiveClass` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, in the matching algorithm, the `href` is a path *prefix*, so if
    `NavLink` has an `href` of `/customers`, as shown in the preceding code example,
    then it would match all the following paths and set them all to have the `active`
    class style:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'To ensure that the matching algorithm only performs matches on *all* of the
    text in the path (in other words, there is only a match when the whole complete
    text matches and not when just part of the path matches), then set the `Match`
    parameter to `NavLinkMatch.All`, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: If you set other attributes, such as `target`, they are passed through to the
    underlying `<a>` element that is generated.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding base component classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `OnParametersSet` method is defined by the base class that components inherit
    from by default, named `ComponentBase`, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '`ComponentBase` has some useful methods that you can call and override, as
    shown in *Table 14.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Method(s)** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `InvokeAsync` | Call this method to execute a function on the associated
    renderer’s synchronization context. |'
  prefs: []
  type: TYPE_TB
- en: '| `OnAfterRender`,`OnAfterRenderAsync` | Override these methods to invoke code
    after each time the component has been rendered. |'
  prefs: []
  type: TYPE_TB
- en: '| `OnInitialized`,`OnInitializedAsync` | Override these methods to invoke code
    after the component has received its initial parameters from its parent in the
    render tree. |'
  prefs: []
  type: TYPE_TB
- en: '| `OnParametersSet`,`OnParametersSetAsync` | Override these methods to invoke
    code after the component has received parameters and the values have been assigned
    to properties. |'
  prefs: []
  type: TYPE_TB
- en: '| `ShouldRender` | Override this method to indicate if the component should
    render. |'
  prefs: []
  type: TYPE_TB
- en: '| `StateHasChanged` | Call this method to cause the component to re-render.
    |'
  prefs: []
  type: TYPE_TB
- en: 'Table 14.1: Useful methods to override in ComponentBase'
  prefs: []
  type: TYPE_NORMAL
- en: 'As you saw in *Chapter 13*, *Building Websites Using ASP.NET Core*, Blazor
    components can have shared layouts. You would create a `.razor` component file
    and make it explicitly inherit from `LayoutComponentBase`, as shown in the following
    markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The base class has a property named `Body` that you can render in the markup
    at the correct place within the layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can set a default layout for components in the `App.razor` file and its
    `Router` component. To explicitly set a layout for a component, use the `@layout`
    directive, as shown in the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Running the Blazor Web App project template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have reviewed the project template and the important parts that
    are specific to the Blazor server, we can start the website and review its behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Northwind.Blazor` project, in the `Properties` folder, in `launchSettings.json`,
    for the `https` profile, modify the `applicationUrl` to use port `5141` for HTTPS
    and port `5140` for HTTP, as shown highlighted in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the `Northwind.Blazor` project using the `https` launch profile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start Chrome and navigate to `https://localhost:5141/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the left navigation menu, click **Weather** and then the **Click me** button
    three times, and note that the label shows **3**, as shown in *Figure 14.1*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B22322_14_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.1: A Blazor Counter component using WebAssembly'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the left navigation menu, click **Weather**, and note that for half a second,
    a **Loading…** message appears, and then it is replaced by a table of five random
    weather forecasts, as shown in *Figure 14.2*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B22322_14_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.2: Fetching weather data into a Blazor Web App using streaming'
  prefs: []
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that you’ve reviewed the sample Blazor components in the Blazor Web App
    project template, let’s dig in and build our own.
  prefs: []
  type: TYPE_NORMAL
- en: Building components using Blazor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will build a component to list, create, and edit customers
    in the Northwind database.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will build it over several steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Make a Blazor component that renders the name of a country set as a parameter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make it work as a routable page as well as a component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implement the functionality to perform **CRUD** (**create**, **read**, **update**
    and **delete**) operations on customers in a database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Defining and testing a simple Blazor component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will add the new component to the existing Blazor Web App project:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Northwind.Blazor` project, in the `Components\Pages` folder, add a new
    file named `Customers.razor`. In Visual Studio, the project item template is named
    **Razor Component**. In Rider, the project item template is named **Blazor Component**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Good Practice**: Remember that Blazor component filenames must start with
    an uppercase letter; otherwise, you will have compile errors!'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add statements to output a heading for the `Customers` component, and define
    a code block that defines a property to store the name of a country, as shown
    highlighted in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `@code` block can be anywhere in the file. Some developers prefer it at
    the top so that any properties defined in it are available while typing the markup
    below, and they can more easily reference them.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Components\Pages` folder, in `Home.razor`, add statements to the bottom
    of the file to instantiate the `Customers` component twice, once with `Germany`
    set as the `Country` parameter and once without setting the country, as shown
    in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the `Northwind.Blazor` project using the `https` launch profile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start Chrome, navigate to `https://localhost:5141/`, and note the `Customers`
    components, as shown in *Figure 14.3*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B22322_14_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.3: The Customers components with the Country parameter set to Germany,
    and not set'
  prefs: []
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using Bootstrap icons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the older Blazor project templates with .NET 7 and earlier, they included
    all Bootstrap icons. In the new project templates with .NET 8 and later, only
    three icons are defined using SVG. Let’s see how the Blazor team defined those
    icons, and then we’ll add some more for our own use:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Components\Layout` folder, in `NavMenu.razor.css`, find the text `bi-house`,
    and note the three icons defined using SVG, as partially shown in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In your favorite browser, navigate to [https://icon-sets.iconify.design/bi/](https://icon-sets.iconify.design/bi/),
    and note that **Bootstrap Icons** have an MIT license and contain more than 2,000
    icons.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are two input boxes on the web page, one labeled **Search Icons** and
    one labeled **Filter Icons**. In the **Filter Icons** box, enter `globe`, and
    note that six globe icons are found.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the first globe, in the **CSS** section, click the **CSS** button, and
    note that you could click the **Copy to Clipboard** button to copy and paste the
    definition of this icon for use in the CSS stylesheet; however, you do not need
    to because I have already created a CSS file for you to use, with five icons defined
    for you to use in your Blazor project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In your favorite browser, navigate to [https://github.com/markjprice/cs13net9/blob/main/code/ModernWeb/Northwind.Blazor/Northwind.Blazor/wwwroot/icons.css](https://github.com/markjprice/cs13net9/blob/main/code/ModernWeb/Northwind.Blazor/Northwind.Blazor/wwwroot/icons.css),
    download the file, and save it in your own project in its `wwwroot` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Components` folder, in the `App.razor` component, in the `<head>`,
    add a `<link>` element to reference the `icons.css` stylesheet, as shown in the
    following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save and close the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Making the component a routable page component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is simple to turn this component into a routable page component with a route
    parameter for the country:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Components\Pages` folder, in the `Customers.razor` component, add a
    statement at the top of the file to register `/customers` as its route with an
    optional `country` route parameter, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Components\Layout` folder, in `NavMenu.razor`, at the bottom of the
    existing list item elements, add two list item elements for our routable page
    component, showing customers worldwide and in Germany that both use an icon of
    people, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `Components\Pages` folder, in `Home.razor`, remove the two `<Customers>`
    components because we can test them using their navigation menu items from now
    on, and we want to keep the home page as simple as possible.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the `Northwind.Blazor` project using the `https` launch profile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start Chrome and navigate to `https://localhost:5141/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the left navigation menu, click **Customers in Germany**. Note that the
    country name is correctly passed to the page component and that the component
    uses the same layout as the other page components, like `Home.razor`. Also note
    the URL, [https://localhost:5141/customers/Germany](https://localhost:5141/customers/Germany),
    as shown in *Figure 14.4*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B22322_14_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.4: Customers in Germany'
  prefs: []
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Getting entities into a Blazor component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that you have seen the minimum implementation of a Blazor page component,
    we can add some useful functionality to it. In this case, we will use the Northwind
    database context to fetch customers from the database:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Northwind.Blazor.csproj`, add a reference to the Northwind database context
    project for either SQL Server or SQLite, and globally import the namespace to
    work with Northwind entities, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Warning!** The relative path to the data context project is two directories
    up from the current project, so we must use `..\..\`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Build the `Northwind.Blazor` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `Program.cs`, before the call to `Build`, add a statement to register the
    Northwind database context in the dependency services collection, as shown in
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We need to explicitly set the `relativePath` because the `Northwind.db` file
    is in the `ModernWeb` folder and the project runs in the `ModernWeb\Northwind.Blazor\Northwind.Blazor`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: Abstracting a service for a Blazor component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We could implement the Blazor component so that it directly calls the Northwind
    database context to fetch the customers using an entity model. This would work
    if the Blazor component executes on the server. However, if the component ran
    in the browser using WebAssembly, then it would not work.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now create a local dependency service to enable better reuse of the
    components:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use your preferred coding tool to add a new project, as defined in the following
    list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Project template: **Class Library** / `classlib`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Project file and folder: `Northwind.Blazor.Services`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Solution file and folder: `ModernWeb`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the `Northwind.Blazor.Services.csproj` project file, add a project reference
    to the Northwind entity models library, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Build the `Northwind.Blazor.Services` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `Northwind.Blazor.Services` project, rename `Class1.cs` to `INorthwindService.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `INorthwindService.cs`, define a contract for a local service that abstracts
    CRUD operations, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Northwind.Blazor.csproj` project file, add a project reference to the
    services class library, as shown highlighted in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Build the `Northwind.Blazor` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `Northwind.Blazor` project, add a new folder named `Services`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Services` folder, add a new file named `NorthwindServiceServerSide.cs`,
    and modify its contents to implement the `INorthwindService` interface by using
    the Northwind database context, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.cs`, import the namespace for our service, as shown in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.cs`, before the call to `Build`, add a statement to register `NorthwindServiceServerSide`
    as a transient service that implements the `INorthwindService` interface, as shown
    in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A transient service is one that creates a new instance for each request. You
    can read more about the different lifetimes for services at the following link:
    [https://learn.microsoft.com/en-us/dotnet/core/extensions/dependency-injection#service-lifetimes](https://learn.microsoft.com/en-us/dotnet/core/extensions/dependency-injection#service-lifetimes).'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Components` folder, in `_Imports.razor`, import the namespace to work
    with the Northwind entities and our service so that Blazor components that we
    build do not need to import the namespaces individually, as shown in the following
    markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `_Imports.razor` file only applies to `.razor` files. If you use code-behind
    `.cs` files to implement component code, then they must have namespaces imported
    separately or use global `usings` to implicitly import the namespaces.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Components\Pages` folder, in `Customers.razor`, add statements to inject
    the service, and then use it to output a table of all customers using synchronous
    database operations, as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the `Northwind.Blazor` project using the `https` launch profile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start Chrome and navigate to `https://localhost:5141/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the left navigation menu, click **Customers in Germany**, and note that
    the table of customers loads from the database and renders in the web page, as
    shown in *Figure 14.5*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B22322_14_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.5: The list of customers in Germany'
  prefs: []
  type: TYPE_NORMAL
- en: In the browser address bar, change `Germany` to `UK`, and note that the table
    of customers is filtered to only show UK customers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the left navigation menu, click **Customers Worldwide**, and note that the
    table of customers is unfiltered by country.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click any of the edit or delete buttons, and note that they return a message
    saying **Error: 404** because we have not yet implemented that functionality.
    Also, note the link to edit the customer identified by the five-character identifier
    `ALFKI`, as shown in the following link: `https://localhost:5141/editcustomer/ALFKI`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enabling streaming rendering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, let’s improve the rendering of the table of customers by making it happen
    after the page has appeared to the visitor. We are already using an asynchronous
    operation to fetch the data, but this operation must finish before the web page
    response is sent back to the browser. This is why we never see the **Loading…**
    message on the page. To see it, we must enable streaming rendering. But if you
    are fetching data from a local database, it might still happen too quickly. So
    to make sure we see it, we will also slow down the fetching of the data by adding
    a delay:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Components\Pages` folder, at the top of `Customers.razor`, add an attribute
    to enable streaming rendering, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Customers.razor`, in the `OnParametersSetAsync` method, add a statement
    to asynchronously delay for one second, as shown highlighted in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the `Northwind.Blazor` project using the `https` launch profile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start Chrome and navigate to `https://localhost:5141/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the left navigation menu, click **Customers in Germany**, and note that the
    **Loading…** message appears for a second and is then replaced by the table of
    customers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: So far, the component provides only a read-only table of customers. Now, we
    will extend it with full CRUD operations.
  prefs: []
  type: TYPE_NORMAL
- en: Defining forms using the EditForm component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Microsoft provides ready-made components to build forms. We will use them to
    provide create, edit, and delete functionality for customers.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft provides the `EditForm` component and several form elements, such
    as `InputText`, to make it easier to use forms with Blazor.
  prefs: []
  type: TYPE_NORMAL
- en: '`EditForm` can have a model set to bind it to an object with properties and
    event handlers for custom validation, as well as to recognize standard Microsoft
    validation attributes on the model class, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'As an alternative to a `ValidationSummary` component, you can use the `ValidationMessage`
    component to show a message next to an individual form element. To bind the validation
    message to a property, you use a lambda expression to select the property, as
    shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Building a customer detail component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will create a component to show the details of a customer. This will only
    be a component, never a page, so it will not have a `@page` directive:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Northwind.Blazor` project, in the `Components` folder, create a new
    file named `CustomerDetail.razor`. (The Visual Studio project item template is
    named **Razor Component**; the Rider project item template is named **Blazor Component**.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify its contents to define a form to edit the properties of a customer,
    as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Building customer create, edit, and delete components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, we can create three routable page components that use the component:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Components\Pages` folder, create a new file named `CreateCustomer.razor`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `CreateCustomer.razor`, modify its contents to use the customer detail component
    to create a new customer, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Components\Pages` folder, in `Customers.razor`, after the `<h3>` element,
    add a `<div>` element with a button to navigate to the create customer page component,
    as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Components\Pages` folder, create a new file named `EditCustomer.razor`,
    and modify its contents to use the customer detail component to edit and save
    changes to an existing customer, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Components\Pages` folder, create a new file named `DeleteCustomer.razor`,
    and modify its contents to use the customer detail component to show the customer
    that is about to be deleted, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Testing the customer components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, we can test the customer components and how to use them to create, edit,
    and delete customers:'
  prefs: []
  type: TYPE_NORMAL
- en: Start the `Northwind.Blazor` project using the `https` launch profile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start Chrome and navigate to `https://localhost:5141/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Customers Worldwide** or **Customers in Germany** and click the
    **+ Create New** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter an invalid **Customer Id** like `ABCDEF`, leave the textbox, and note
    the validation message, as shown in *Figure 14.6*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B22322_14_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.6: Creating a new customer and entering an invalid customer ID'
  prefs: []
  type: TYPE_NORMAL
- en: Change **Customer Id** to `ABCDE`, enter values for the other textboxes like
    `Alpha Corp`, `Main Street`, and `Germany`, and then click the **Create Customer**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the list of customers appears, click **Customers in Germany**, and scroll
    down to the bottom of the page to see the new customer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **ABCDE** customer row, click the **Edit** icon button, change the address
    to something like `Upper Avenue`, click the **Update** button, and note that the
    customer record has been updated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **ABCDE** customer row, click the **Delete** icon button, note the warning,
    click the **Delete Customer** button, and note that the customer record has been
    deleted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Practicing and exploring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Test your knowledge and understanding by answering some questions, getting some
    hands-on practice, and exploring this chapter’s topics with deeper research.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 14.1 – Online material
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Online material can be created by Microsoft or third parties, or it can be found
    in extra content for this book.
  prefs: []
  type: TYPE_NORMAL
- en: Enhancing Blazor apps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To learn how to enhance Blazor apps using AOT native publish and interop with
    JavaScript, as well as handle location-changing events, you can read an optional
    online-only section, found at the following link: [https://github.com/markjprice/cs13net9/blob/main/docs/ch14-enhanced-blazor.md](https://github.com/markjprice/cs13net9/blob/main/docs/ch14-enhanced-blazor.md).'
  prefs: []
  type: TYPE_NORMAL
- en: Leveraging open source Blazor component libraries
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To learn how to use some common Blazor open source components, I have written
    an online-only section for my *Apps and Services with .NET 8* companion book,
    found at the following link: [https://github.com/markjprice/apps-services-net8/blob/main/docs/ch15-blazor-libraries.md](https://github.com/markjprice/apps-services-net8/blob/main/docs/ch15-blazor-libraries.md).'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 14.2 – Practice exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Practice exercises go deeper into the topics for this chapter. First, you will
    create a times table component, and then you will create a country navigation
    component.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a times table component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the `Northwind.Blazor` project, create a routable page component that renders
    a times table, based on a parameter named `Number`, and then test your component
    in two ways.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, do so by adding an instance of your component to the `Home.razor` file,
    as shown in the following markup, to generate the 6 times table with a default
    size of 12 rows, or the 7 times table with a size of 10 rows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Second, do so by entering a path in the browser address bar, as shown in the
    following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '`https://localhost:5141/timestable/6`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://localhost:5141/timestable/7/10](https://localhost:5141/timestable/7/10)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a country navigation item
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the `Northwind.Blazor` project, in the `NavMenu` component, call the customer’s
    web service to get the list of country names and loop through them, creating a
    menu item for each country.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Northwind.Blazor` project, in `INorthwindService.cs`, add the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `NorthwindServiceServerSide.cs`, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `NavMenu.razor`, add the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You cannot use `<NavLink class="nav-link" href="customers/@c">` because Blazor
    does not allow combined text and `@` Razor expressions in components. That is
    why the code above creates a local variable to combine the text to make the country
    URL.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 14.3 – Test your knowledge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Answer the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: What are the four Blazor render modes, and how are they different?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In a Blazor Web App project, compared to an ASP.NET Core MVC project, what extra
    configuration is required?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why should you avoid the Blazor Server and Blazor Server Empty project templates?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In a Blazor Web App project, what does the `App.razor` file do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the main benefit of using the `<NavLink>` component?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you pass a value into a component?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the main benefit of using the `<EditForm>` component?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you execute some statements when parameters are set?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you execute some statements when a component appears?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One of the benefits of Blazor is being able to implement client-side components
    using C# and .NET instead of JavaScript. Does a Blazor component need any JavaScript?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exercise 14.4 – Explore topics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the links on the following page to learn more details about the topics
    covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/markjprice/cs13net9/blob/main/docs/book-links.md#chapter-15---building-interactive-web-components-using-blazor](https://github.com/markjprice/cs13net9/blob/main/docs/book-links.md#chapter-15---building-interactive-web-components-using-blazor)'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you learned:'
  prefs: []
  type: TYPE_NORMAL
- en: About the concepts of Blazor components.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to build Blazor components that execute on the server side, using SignalR
    to update the user interface during interactivity.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to build and consume services that use
    HTTP as the communication layer, aka web services. You will also learn how to
    build Blazor components that execute on the client side, using WebAssembly.
  prefs: []
  type: TYPE_NORMAL
