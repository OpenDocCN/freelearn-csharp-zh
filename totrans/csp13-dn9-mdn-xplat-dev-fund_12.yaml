- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Introducing Modern Web Development Using .NET
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 .NET 引入现代 Web 开发
- en: The third and final part of this book is about modern web development using
    .NET, which means ASP.NET Core, Blazor, and Minimal APIs. You will learn how to
    build cross-platform projects such as websites and web services.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本书第三部分和最后一部分是关于使用 .NET 进行现代 Web 开发，这意味着 ASP.NET Core、Blazor 和 Minimal APIs。您将学习如何构建跨平台的项目，例如网站和
    Web 服务。
- en: Microsoft call platforms for building applications **app models** or **workloads**.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 微软将用于构建应用程序的平台称为 **app models** 或 **workloads**。
- en: I recommend that you work through this and subsequent chapters sequentially
    because later chapters will reference projects in earlier chapters, and you will
    build up sufficient knowledge and skills to tackle the trickier problems in later
    chapters.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议您按顺序阅读本章和后续章节，因为后续章节将引用早期章节中的项目，并且您将积累足够的知识和技能来应对后续章节中更复杂的问题。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Understanding ASP.NET Core
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 ASP.NET Core
- en: New features in ASP.NET Core
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ASP.NET Core 的新功能
- en: Structuring projects
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目结构
- en: Building an entity model for use in the rest of the book
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为本书其余部分构建实体模型
- en: Understanding web development
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 Web 开发
- en: Understanding ASP.NET Core
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 ASP.NET Core
- en: Since this book is about C# and .NET, we will learn about app models that are
    used to build the practical applications that we will encounter in the remaining
    chapters of this book.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本书是关于 C# 和 .NET 的，我们将学习用于构建本书剩余章节中我们将遇到的实际应用程序的应用程序模型。
- en: '**More Information**: Microsoft has extensive guidance for implementing app
    models in its *.NET Architecture Guides* documentation, which you can read at
    the following link: [https://dotnet.microsoft.com/en-us/learn/dotnet/architecture-guides](https://dotnet.microsoft.com/en-us/learn/dotnet/architecture-guides).'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**更多信息**：微软在其 *.NET 架构指南* 文档中提供了广泛的关于实现应用程序模型的指导，您可以通过以下链接阅读：[https://dotnet.microsoft.com/en-us/learn/dotnet/architecture-guides](https://dotnet.microsoft.com/en-us/learn/dotnet/architecture-guides)。'
- en: 'ASP.NET Core is part of a history of evolving Microsoft technologies used to
    build websites and services that work with data:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 是微软用于构建与数据交互的网站和服务的演变技术历史的一部分：
- en: '**ActiveX Data Objects (ADO)** was released in 1996 and was Microsoft’s attempt
    to provide a single set of **Component Object Model** (**COM**) components to
    work with data. With the release of .NET, an equivalent was created named **ADO.NET**,
    which is still the faster method to work with data in .NET, with its core classes,
    `DbConnection`, `DbCommand`, and `DbDataReader`. **ORMs (Object-Relational Mappers)**
    like EF Core use ADO.NET internally.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ActiveX 数据对象 (ADO)** 于 1996 年发布，是微软尝试提供一套单一的 **组件对象模型 (COM**) 组件以处理数据。随着
    .NET 的发布，创建了一个名为 **ADO.NET** 的等效产品，它仍然是 .NET 中处理数据更快的方法，其核心类包括 `DbConnection`、`DbCommand`
    和 `DbDataReader`。像 EF Core 这样的 **ORM（对象关系映射器）** 在内部使用 ADO.NET。'
- en: '**Active Server Pages** (**ASP**) was released in 1996 and was Microsoft’s
    first attempt at a platform for dynamic server-side execution of website code.
    ASP files contain a mix of HTML and code that executes on the server, written
    in the VBScript language.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Active Server Pages** (**ASP**) 于 1996 年发布，是微软首次尝试的平台，用于在服务器端动态执行网站代码。ASP
    文件包含 HTML 和代码的混合体，这些代码在服务器上执行，使用 VBScript 语言编写。'
- en: '**ASP.NET Web Forms** was released in 2002 with the .NET Framework and was
    designed to enable non-web developers, such as those familiar with Visual Basic,
    to quickly create websites by dragging and dropping visual components and writing
    event-driven code in Visual Basic or C#. Web Forms should be avoided in new .NET
    Framework web projects in favor of ASP.NET MVC.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ASP.NET Web Forms** 于 2002 年与 .NET Framework 一起发布，旨在使熟悉 Visual Basic 等非 Web
    开发者能够通过拖放视觉组件和在 Visual Basic 或 C# 中编写事件驱动代码来快速创建网站。在新的 .NET Framework Web 项目中应避免使用
    Web Forms，而应使用 ASP.NET MVC。'
- en: '**Windows Communication Foundation** (**WCF**) was released in 2006 and enables
    developers to build SOAP and REST services. SOAP is powerful but complex, so it
    should be avoided unless you need advanced features, such as distributed transactions
    and complex messaging topologies.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows Communication Foundation** (**WCF**) 于 2006 年发布，使开发者能够构建 SOAP 和 REST
    服务。SOAP 功能强大但复杂，因此除非您需要高级功能，例如分布式事务和复杂消息拓扑，否则应避免使用。'
- en: '**ASP.NET MVC** was released in 2009 to cleanly separate the concerns of web
    developers between **models**, which temporarily store the data; **views**, which
    present data using various formats in the UI; and **controllers**, which fetch
    a model and pass it to a view. This separation enables improved reuse and unit
    testing.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ASP.NET MVC** 于 2009 年发布，旨在在 Web 开发者之间清晰分离 **模型**（临时存储数据）、**视图**（在 UI 中使用各种格式展示数据）和
    **控制器**（获取模型并将其传递给视图）的职责。这种分离使得重用和单元测试得到改进。'
- en: '**ASP.NET Web API** was released in 2012 and enables developers to create HTTP
    services (aka REST services) that are simpler and more scalable than SOAP services.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ASP.NET Web API** 于 2012 年发布，使开发者能够创建比 SOAP 服务更简单、更可扩展的 HTTP 服务（也称为 REST
    服务）。'
- en: '**ASP.NET SignalR** was released in 2013 and enables real-time communication
    for websites by abstracting underlying technologies and techniques, such as WebSockets
    and long polling. This enables website features, such as live chat, and updates
    to time-sensitive data, such as stock prices, across a wide variety of web browsers,
    even when they do not support an underlying technology, such as WebSockets.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ASP.NET SignalR** 于 2013 年发布，通过抽象底层技术和技术，如 WebSockets 和长轮询，为网站提供实时通信功能。这使得网站功能，如实时聊天，以及更新对时间敏感的数据，如股票价格，在广泛的
    Web 浏览器中成为可能，即使它们不支持底层技术，如 WebSockets。'
- en: '**ASP.NET Core** was released in 2016 and combines modern implementations of
    .NET Framework technologies, such as MVC, Web API, and SignalR, with alternative
    technologies, such as Razor Pages, gRPC, and Blazor, all running on modern .NET.
    Therefore, ASP.NET Core can execute across platforms. ASP.NET Core has many project
    templates to get you started with its supported technologies.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ASP.NET Core** 于 2016 年发布，结合了 .NET Framework 技术的现代实现，如 MVC、Web API 和 SignalR，以及替代技术，如
    Razor Pages、gRPC 和 Blazor，所有这些都在现代 .NET 上运行。因此，ASP.NET Core 可以跨平台执行。ASP.NET Core
    提供了许多项目模板，以帮助您开始使用其支持的技术。'
- en: '**Good Practice**: Choose ASP.NET Core to develop websites and web services
    because it includes web-related technologies that are modern and cross-platform.'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**良好实践**：选择 ASP.NET Core 开发网站和 Web 服务，因为它包括现代且跨平台的 Web 相关技术。'
- en: Classic ASP.NET versus modern ASP.NET Core
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 经典 ASP.NET 与现代 ASP.NET Core 对比
- en: Until modern .NET, ASP.NET was built on top of a large assembly in .NET Framework,
    named `System.Web.dll`, and it was tightly coupled to Microsoft’s Windows-only
    web server, named **Internet Information Services** (**IIS**). Over the years,
    this assembly has accumulated a lot of features, many of which are not suitable
    for modern cross-platform development.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 直到现代 .NET，ASP.NET 都是基于 .NET Framework 中的一个大型程序集构建的，名为 `System.Web.dll`，并且它与微软仅适用于
    Windows 的 Web 服务器 **Internet Information Services**（**IIS**）紧密耦合。多年来，这个程序集积累了大量功能，其中许多不适合现代跨平台开发。
- en: ASP.NET Core is a major redesign of ASP.NET. It removes the dependency on the
    `System.Web.dll` assembly and IIS and is composed of modular lightweight packages,
    just like the rest of modern .NET. Using IIS as the web server is still supported
    by ASP.NET Core, but there is a better option.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 是 ASP.NET 的重大重构。它移除了对 `System.Web.dll` 程序集和 IIS 的依赖，并由模块化轻量级包组成，就像现代
    .NET 的其余部分一样。ASP.NET Core 仍然支持使用 IIS 作为 Web 服务器，但有一个更好的选择。
- en: You can develop and run ASP.NET Core applications across platforms on Windows,
    macOS, and Linux. Microsoft has even created a cross-platform, super-performant
    web server, named **Kestrel**, and the entire stack is open source.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 Windows、macOS 和 Linux 等平台上开发和运行 ASP.NET Core 应用程序。微软甚至创建了一个跨平台、高性能的 Web
    服务器，名为 **Kestrel**，整个堆栈都是开源的。
- en: ASP.NET Core 2.2 or later projects default to the new in-process hosting model.
    This gives a 400% performance improvement when hosting in Microsoft IIS, but Microsoft
    still recommends using Kestrel for even better performance.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 2.2 或更高版本的项目默认使用新的进程内托管模型。当在 Microsoft IIS 中托管时，这提供了 400% 的性能提升，但微软仍然推荐使用
    Kestrel 以获得更好的性能。
- en: Building websites using ASP.NET Core
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 ASP.NET Core 构建网站
- en: Websites are made up of multiple web pages, loaded statically from the filesystem
    or generated dynamically by a server-side technology, such as ASP.NET Core. A
    web browser makes `GET` requests using **Unique Resource Locators** (**URLs**)
    that identify each page and can manipulate data stored on the server, using `POST`,
    `PUT`, and `DELETE` requests.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 网站由多个网页组成，这些网页可以从文件系统静态加载，或由服务器端技术（如 ASP.NET Core）动态生成。Web 浏览器使用 **唯一资源定位符**（**URLs**）进行
    `GET` 请求，以标识每个页面，并可以使用 `POST`、`PUT` 和 `DELETE` 请求操作服务器上存储的数据。
- en: With many websites, the web browser is treated as a presentation layer, with
    almost all the processing performed on the server side. Some JavaScript might
    be used on the client side to implement form validation warnings and some presentation
    features, such as carousels.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多网站上，网页浏览器被视为一个表示层，几乎所有处理都在服务器端完成。客户端可能会使用一些JavaScript来实现表单验证警告和一些展示功能，例如轮播图。
- en: 'ASP.NET Core provides multiple technologies to build the user interface for
    websites:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core提供了多种技术来构建网站的用户界面：
- en: '**ASP.NET Core Razor Pages** is a simple way to dynamically generate HTML for
    simple websites. I recommend considering this as a legacy technology and using
    Blazor instead.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ASP.NET Core Razor Pages** 是一种简单的方法，可以动态生成简单网站的HTML。我建议将其视为一种遗留技术，并使用Blazor代替。'
- en: '**ASP.NET Core MVC** is an implementation of the **Model-View-Controller**
    (**MVC**) design pattern that is popular for developing complex websites.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ASP.NET Core MVC** 是一种流行的 **模型-视图-控制器**（**MVC**）设计模式的实现，适用于开发复杂的网站。'
- en: '**Blazor** lets you build user interface components using C# and .NET instead
    of a JavaScript-based UI framework, like Angular, React, and Vue. Early versions
    of Blazor required a developer to choose a **hosting model**. The **Blazor WebAssembly**
    hosting model runs your code in the browser like a JavaScript-based framework
    would. The **Blazor Server** hosting model runs your code on the server and updates
    the web page dynamically. .NET 8 introduced a unified, full-stack hosting model
    that allows individual components to execute either on the server or client side,
    or even adapt dynamically at runtime. You will learn about Blazor in detail in
    *Chapter 14*, *Building Interactive Web Components Using Blazor*.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Blazor** 允许您使用C#和.NET构建用户界面组件，而不是像Angular、React和Vue这样的基于JavaScript的UI框架。Blazor的早期版本要求开发者选择一个
    **托管模型**。**Blazor WebAssembly** 托管模型像基于JavaScript的框架一样在浏览器中运行您的代码。**Blazor Server**
    托管模型在服务器上运行您的代码，并动态更新网页。.NET 8引入了一个统一的、全栈的托管模型，允许单个组件在服务器或客户端上执行，甚至可以在运行时动态适应。您将在第14章“使用Blazor构建交互式Web组件”中详细了解Blazor。'
- en: So, which should you choose?
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，您应该选择哪一个？
- en: “Blazor is now our recommended approach for building web UI with ASP.NET Core,
    but neither MVC nor Razor Pages are now obsolete. Both MVC & Razor Pages are mature,
    fully supported, and widely used frameworks that we plan to support for the foreseeable
    future. There is also no requirement or guidance to migrate existing MVC or Razor
    Pages apps to Blazor. For existing, well-established MVC-based projects, continuing
    to develop with MVC is a perfectly valid and reasonable approach.”
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “Blazor现在是我们的推荐方法，用于使用ASP.NET Core构建Web UI，但MVC和Razor Pages现在并没有过时。MVC和Razor
    Pages都是成熟、全面支持且广泛使用的框架，我们计划在未来一段时间内继续支持它们。也没有要求或指导将现有的MVC或Razor Pages应用程序迁移到Blazor。对于基于MVC的现有、成熟的项目，继续使用MVC进行开发是一个完全合理且可行的方法。”
- en: ''
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: – Dan Roth
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: – 丹·罗斯
- en: 'You can see Dan’s original comment post at the following link: [https://github.com/dotnet/aspnetcore/issues/51834#issuecomment-1913282747](https://github.com/dotnet/aspnetcore/issues/51834#issuecomment-1913282747).'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接中查看丹的原始评论帖子：[https://github.com/dotnet/aspnetcore/issues/51834#issuecomment-1913282747](https://github.com/dotnet/aspnetcore/issues/51834#issuecomment-1913282747)。
- en: 'Dan Roth is the principal product manager at ASP.NET, so he knows the future
    of ASP.NET Core better than anyone else: [https://devblogs.microsoft.com/dotnet/author/danroth27/](https://devblogs.microsoft.com/dotnet/author/danroth27/).'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 丹·罗斯是ASP.NET的首席产品经理，因此他对ASP.NET Core的未来比任何人都了解：[https://devblogs.microsoft.com/dotnet/author/danroth27/](https://devblogs.microsoft.com/dotnet/author/danroth27/)。
- en: 'I agree with the quote by Dan Roth. For me, there are two main choices for
    web development:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我同意丹·罗斯的引言。对我来说，在Web开发中有两个主要选择：
- en: 'For websites or web services using modern web development: Choose Blazor for
    the web user interface and Minimal APIs for the web service. These technologies
    are covered in this book and its companion book, *Apps and Services with .NET
    8*.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于使用现代Web开发的网站或Web服务：选择Blazor作为Web用户界面，并使用Minimal APIs作为Web服务。这些技术在本书中及其配套书籍《使用.NET
    8构建应用程序和服务》中有详细说明。
- en: 'For websites or web services using mature and proven web development: Choose
    controller-based ASP.NET Core MVC for the web user interface and Web API for the
    web service. For even more productivity, you can add third-party platforms on
    top of those, for example, a .NET CMS like Umbraco. These technologies are covered
    in my new companion book, *Real-World Web Development with .NET 9*.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于使用成熟和经过验证的 Web 开发的网站或 Web 服务：选择基于控制器的 ASP.NET Core MVC 用于 Web 用户界面，Web API
    用于 Web 服务。为了获得更高的生产力，你可以在这些之上添加第三方平台，例如，一个像 Umbraco 这样的 .NET CMS。这些技术在我的新书 *Real-World
    Web Development with .NET 9* 中有所介绍。
- en: 'Much of ASP.NET Core is shared across all these choices anyway, so you will
    only need to learn those shared components once, as shown in *Figure 12.1*:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些选择中，ASP.NET Core 的许多部分都是共享的，所以你只需要学习这些共享组件一次，如图 12.1 所示：
- en: '![](img/B22322_12_01.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B22322_12_01.png)'
- en: 'Figure 12.1: Modern or controller-based and shared ASP.NET Core components'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.1：基于现代或控制器和共享的 ASP.NET Core 组件
- en: Comparison of file types used in ASP.NET Core
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ASP.NET Core 中使用的文件类型比较
- en: 'It is useful to summarize the file types used by these technologies because
    they are similar but different. If you do not understand some subtle but important
    differences, it can cause much confusion when trying to implement your own projects.
    Please note the differences in *Table 12.1*:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 总结这些技术使用的文件类型是有用的，因为它们相似但不同。如果你不理解一些微妙但重要的差异，在尝试实现自己的项目时可能会造成很多困惑。请注意 *表 12.1*
    中的差异：
- en: '| **Technology** | **Special filename** | **File extension** | **Directive**
    |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| **技术** | **特殊文件名** | **文件扩展名** | **指令** |'
- en: '| Razor Component (Blazor) |  | `.razor` |  |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| Razor 组件（Blazor） |  | `.razor` |  |'
- en: '| Razor Component (Blazor with page routing) |  | `.razor` | `@page "<path>"`
    |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| Razor 组件（Blazor 与页面路由） |  | `.razor` | `@page "<path>"` |'
- en: '| Razor Component Imports (Blazor) | `_Imports` | `.razor` |  |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| Razor 组件导入（Blazor） | `_Imports` | `.razor` |  |'
- en: '| Razor Page |  | `.cshtml` | `@page` |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| Razor 页面 |  | `.cshtml` | `@page` |'
- en: '| Razor View (MVC) |  | `.cshtml` |  |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| Razor 视图（MVC） |  | `.cshtml` |  |'
- en: '| Razor Layout |  | `.cshtml` |  |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| Razor 布局 |  | `.cshtml` |  |'
- en: '| Razor View Start | `_ViewStart` | `.cshtml` |  |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| Razor 视图启动 | `_ViewStart` | `.cshtml` |  |'
- en: '| Razor View Imports | `_ViewImports` | `.cshtml` |  |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| Razor 视图导入 | `_ViewImports` | `.cshtml` |  |'
- en: 'Table 12.1: Comparison of file types used in ASP.NET Core'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 表 12.1：ASP.NET Core 中使用的文件类型比较
- en: Directives like `@page` are added to the top of a file’s contents.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 指令如 `@page` 被添加到文件内容的顶部。
- en: If a file does not have a special filename, then it can be named anything. For
    example, you might create a Razor component for use in a Blazor project, named
    `Customer.razor`, or you might create a Razor layout for use in an MVC or Razor
    Pages project, named `_MobileLayout.cshtml`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个文件没有特殊文件名，那么它可以被命名为任何东西。例如，你可能会为 Blazor 项目创建一个名为 `Customer.razor` 的 Razor
    组件，或者你可能会为 MVC 或 Razor Pages 项目创建一个名为 `_MobileLayout.cshtml` 的 Razor 布局。
- en: The naming convention for shared Razor files, like layouts and partial views,
    is to prefix with an underscore, `_`. For example, `_ViewStart.cshtml`, `_Layout.cshtml`,
    or `_Product.cshtml` (this might be a partial view for rendering a product).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 共享 Razor 文件的命名约定，例如布局和部分视图，是在文件名前加上下划线 `_`。例如，`_ViewStart.cshtml`、`_Layout.cshtml`
    或 `_Product.cshtml`（这可能是一个用于渲染产品的部分视图）。
- en: 'A Razor layout file like `_MyCustomLayout.cshtml` is identical to a Razor view.
    What makes the file a layout is being set as the `Layout` property of another
    Razor file, as shown in the following code:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一个像 `_MyCustomLayout.cshtml` 这样的 Razor 布局文件与一个 Razor 视图相同。使文件成为布局的是将其设置为另一个
    Razor 文件的 `Layout` 属性，如下面的代码所示：
- en: '[PRE0]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Warning!** Be careful to use the correct file extension and directive at
    the top of the file; otherwise, you will get unexpected behavior.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告！** 请注意在文件顶部使用正确的文件扩展名和指令；否则，你将得到意外的行为。'
- en: Building websites using a content management system
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用内容管理系统构建网站
- en: Most websites have a lot of content, and if developers had to be involved every
    time some content needed to be changed, that would not scale well.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数网站都有大量的内容，如果每次需要更改某些内容时都需要开发者介入，那么这不会很好地扩展。
- en: A **Content Management System** (**CMS**) enables developers to define content
    structure and templates to provide consistency and good design, while making it
    easy for a non-technical content owner to manage the actual content. They can
    create new pages or blocks of content and update existing content, knowing that
    it will look great for visitors with minimal effort.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**内容管理系统**（**CMS**）使开发者能够定义内容结构和模板，以提供一致性和良好的设计，同时使非技术内容所有者轻松管理实际内容。他们可以创建新页面或内容块，并更新现有内容，知道它将为访客提供极小的努力。'
- en: There are a multitude of CMSs available for all web platforms, like WordPress
    for PHP or Django for Python. CMSs that support modern .NET include Optimizely
    Content Cloud, Umbraco, Piranha, and Orchard Core.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 所有Web平台都提供了多种CMS，如用于PHP的WordPress或用于Python的Django。支持现代.NET的CMS包括Optimizely Content
    Cloud、Umbraco、Piranha和Orchard Core。
- en: The key benefit of using a CMS is that it provides a friendly content management
    user interface. Content owners log in to the website and manage the content themselves.
    The content is then rendered and returned to visitors using ASP.NET Core MVC controllers
    and views, or via web service endpoints, known as a **headless CMS**, to provide
    that content to “heads” implemented as mobile or desktop apps, in-store touchpoints,
    or clients built with JavaScript frameworks or Blazor.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 使用CMS的关键好处是它提供了一个友好的内容管理用户界面。内容所有者登录到网站并自行管理内容。然后使用ASP.NET Core MVC控制器和视图，或通过称为**无头CMS**的Web服务端点，将内容渲染并返回给访客，以将内容提供给作为移动或桌面应用程序、店内触摸点或使用JavaScript框架或Blazor构建的客户端。
- en: 'This book does not cover .NET CMSs, so I have included links where you can
    learn more about them in the GitHub repository: [https://github.com/markjprice/cs13net9/blob/main/docs/book-links.md#net-content-management-systems](https://github.com/markjprice/cs13net9/blob/main/docs/book-links.md#net-content-management-systems).
    I also cover Umbraco CMS in my new book, *Real-World Web Development with .NET
    9*.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 本书不涵盖.NET CMS，因此我在GitHub存储库中包含了链接，您可以在其中了解更多关于它们的信息：[https://github.com/markjprice/cs13net9/blob/main/docs/book-links.md#net-content-management-systems](https://github.com/markjprice/cs13net9/blob/main/docs/book-links.md#net-content-management-systems)。我还在我新书《Real-World
    Web Development with .NET 9》中涵盖了Umbraco CMS。
- en: Building web applications using SPA frameworks
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用SPA框架构建Web应用程序
- en: Web applications are often built using technologies known as **Single-Page Application**
    (**SPA**) frameworks, such as Blazor, Angular, React, Vue, or a proprietary JavaScript
    library.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用程序通常使用被称为**单页应用程序**（**SPA**）框架的技术构建，例如Blazor、Angular、React、Vue或专有的JavaScript库。
- en: They can make requests to a backend web service to get more data when needed
    and post updated data using common serialization formats, such as XML and JSON.
    The canonical examples are Google web apps, like Gmail, Maps, and Docs.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当需要更多数据时，它们可以向后端Web服务发出请求，并使用常见的序列化格式，如XML和JSON，发布更新后的数据。典型的例子是Google的Web应用程序，如Gmail、地图和文档。
- en: With a web application, the client side uses JavaScript frameworks or Blazor
    to implement sophisticated user interactions, but most of the important processing
    and data access still happens on the server side, as the web browser has limited
    access to local system resources.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在Web应用程序中，客户端使用JavaScript框架或Blazor来实现复杂的用户交互，但大多数重要的处理和数据访问仍然在服务器端进行，因为Web浏览器对本地系统资源的访问有限。
- en: JavaScript is loosely typed and not designed for complex projects, so most JavaScript
    libraries these days use TypeScript, which adds strong typing to JavaScript and
    is designed with many modern language features to handle complex implementations.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript是弱类型且不是为复杂项目设计的，因此如今大多数JavaScript库都使用TypeScript，它为JavaScript添加了强类型，并设计了许多现代语言特性来处理复杂实现。
- en: The .NET SDK has project templates for JavaScript and TypeScript-based SPAs,
    but we will not spend any time learning how to build JavaScript and TypeScript-based
    SPAs in this book. Even though these SPAs are commonly used with ASP.NET Core
    as the backend, the focus of this book is on C# and not on other languages.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: .NET SDK为基于JavaScript和TypeScript的SPA提供了项目模板，但我们在本书中不会花费时间学习如何构建基于JavaScript和TypeScript的SPA。尽管这些SPA通常与ASP.NET
    Core作为后端一起使用，但本书的重点是C#而不是其他语言。
- en: 'In summary, C# and .NET can be used on both the server side and the client
    side to build websites, as shown in *Figure 12.2*:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，C#和.NET可以在服务器端和客户端上使用来构建网站，如图*12.2*所示：
- en: '![](img/B22322_12_02.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B22322_12_02.png)'
- en: 'Figure 12.2: The use of C# and .NET to build websites on both the server side
    and client side'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.2：使用 C# 和 .NET 在服务器端和客户端构建网站
- en: Building web and other services
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建网页和其他服务
- en: Although we will not learn about JavaScript and TypeScript-based SPAs, we will
    learn how to build a web service using **ASP.NET Core Minimal API**, and then
    we will call that web service from Blazor components.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们不会学习基于 JavaScript 和 TypeScript 的 SPA，但我们将学习如何使用 **ASP.NET Core Minimal API**
    构建一个网络服务，然后从 Blazor 组件中调用该网络服务。
- en: 'There are no formal definitions, but services are sometimes described based
    on their complexity:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管没有正式的定义，但服务有时会根据其复杂性来描述：
- en: '**Service**: All functionality needed by a client app in one monolithic service.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务**: 一个统一的服务中包含客户端应用所需的所有功能。'
- en: '**Microservice**: Multiple services that each focus on a smaller set of functionalities.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**微服务**: 多个服务，每个服务专注于更小的功能集。'
- en: '**Nanoservice**: A single function provided as a service. Unlike services and
    microservices that are hosted 24/7/365, nanoservices are often inactive until
    called upon to reduce resources and costs.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**纳米服务**: 作为服务提供的一个单一功能。与 24/7/365 运行的服务和微服务不同，纳米服务通常在需要时才激活，以减少资源和成本。'
- en: At the start of the first part of this book, we briefly reviewed C# language
    features and in which versions they were introduced. At the start of the second
    part of this book, we briefly reviewed .NET library features and in which versions
    they were introduced. Now, in the third and final part of this book, we will briefly
    review ASP.NET Core features and in which versions they were introduced.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书第一部分的开头，我们简要回顾了 C# 语言特性及其引入的版本。在本书第二部分的开头，我们简要回顾了 .NET 库特性及其引入的版本。现在，在本书的第三和最后一部分，我们将简要回顾
    ASP.NET Core 特性及其引入的版本。
- en: 'You can read this information in the GitHub repository at the following link:
    [https://github.com/markjprice/cs13net9/blob/main/docs/ch12-features.md](https://github.com/markjprice/cs13net9/blob/main/docs/ch12-features.md).'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接的 GitHub 仓库中阅读此信息：[https://github.com/markjprice/cs13net9/blob/main/docs/ch12-features.md](https://github.com/markjprice/cs13net9/blob/main/docs/ch12-features.md)。
- en: 'To summarize what’s new in ASP.NET Core 9, let’s end this section with another
    quote from Dan Roth:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 为了总结 ASP.NET Core 9 的新特性，让我们以 Dan Roth 的另一段话结束本节：
- en: “We’re optimizing how the .NET runtime on WebAssembly initializes so that you
    start up faster and we’re making Blazor’s initialization logic more efficient
    by leveraging source generation for JSON serialization. We’re also optimizing
    how static web assets are handled for all ASP.NET Core apps so that your files
    are pre-compressed as part of publishing your app. For API developers we’re providing
    built-in support for OpenAPI document generation.”
  id: totrans-90
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “我们正在优化 WebAssembly 上的 .NET 运行时初始化方式，以便您启动更快；我们通过利用源生成进行 JSON 序列化来提高 Blazor
    初始化逻辑的效率。我们还优化了处理所有 ASP.NET Core 应用中的静态网页资源的方式，以便您的文件在发布应用时作为预压缩文件。对于 API 开发者，我们提供了内置的
    OpenAPI 文档生成支持。”
- en: ''
  id: totrans-91
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: – Dan Roth
  id: totrans-92
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: – Dan Roth
- en: Building desktop and mobile apps
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建桌面和移动应用
- en: Since this book is about modern cross-platform development using C# and .NET,
    it does not include coverage of building desktop apps using **Windows Forms**,
    **Windows Presentation Foundation (WPF)**, or **WinUI 3** apps because they are
    Windows-only.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 由于本书是关于使用 C# 和 .NET 进行现代跨平台开发的，因此它不包括使用 **Windows Forms**、**Windows Presentation
    Foundation (WPF**) 或 **WinUI 3** 应用构建桌面应用的内容，因为它们仅适用于 Windows。
- en: 'If you need to build apps for Windows, then the following links will be helpful:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要为 Windows 构建应用，以下链接将很有帮助：
- en: 'Official documentation to get started building apps for Windows: [https://learn.microsoft.com/en-us/windows/apps/get-started/](https://learn.microsoft.com/en-us/windows/apps/get-started/)'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始为 Windows 构建应用的官方文档：[https://learn.microsoft.com/en-us/windows/apps/get-started/](https://learn.microsoft.com/en-us/windows/apps/get-started/)
- en: 'Is WPF Dead?: [https://avaloniaui.net/Blog/is-wpf-dead](https://avaloniaui.net/Blog/is-wpf-dead)'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WPF 是否已死？：[https://avaloniaui.net/Blog/is-wpf-dead](https://avaloniaui.net/Blog/is-wpf-dead)
- en: 'How popular is WPF compared to WinUI , MAUI in 2024?: [https://twitter.com/DrAndrewBT/status/1759557538805108860](https://twitter.com/DrAndrewBT/status/1759557538805108860)'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2024 年 WPF 相比 WinUI 和 MAUI 的流行程度如何？：[https://twitter.com/DrAndrewBT/status/1759557538805108860](https://twitter.com/DrAndrewBT/status/1759557538805108860)
- en: 'WinForms in a 64-Bit world – our strategy going forward: [https://devblogs.microsoft.com/dotnet/winforms-designer-64-bit-path-forward/](https://devblogs.microsoft.com/dotnet/winforms-designer-64-bit-path-forward/)'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 64 位世界中的 WinForms – 我们未来的策略：[https://devblogs.microsoft.com/dotnet/winforms-designer-64-bit-path-forward/](https://devblogs.microsoft.com/dotnet/winforms-designer-64-bit-path-forward/)
- en: Mobile app platforms
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 移动应用程序平台
- en: 'There are two major mobile platforms, Apple’s iOS and Google’s Android, each
    with its own programming languages and platform APIs. There are also two major
    desktop platforms, Apple’s macOS and Microsoft’s Windows, each with its own programming
    languages and platform APIs, as shown in the following list:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个主要的移动平台，苹果的 iOS 和谷歌的 Android，每个平台都有自己的编程语言和平台 API。还有两个主要的桌面平台，苹果的 macOS 和微软的
    Windows，每个平台都有自己的编程语言和平台 API，如下表所示：
- en: '**iOS**: Objective C or Swift and UIKit'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**iOS**：Objective C 或 Swift 和 UIKit'
- en: '**Android**: Java or Kotlin and Android API'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Android**：Java 或 Kotlin 和 Android API'
- en: '**macOS**: Objective C or Swift and AppKit or Catalyst'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**macOS**：Objective C 或 Swift 和 AppKit 或 Catalyst'
- en: '**Windows**: C, C++, or many other languages, and Win32 API or Windows App
    SDK'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows**：C、C++ 或许多其他语言，以及 Win32 API 或 Windows App SDK'
- en: Since there are so many combinations to learn to do native mobile development,
    it would be useful if there were a single technology that could target all those
    mobile platforms.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 由于学习进行原生移动开发有许多组合，如果有一个单一的技术可以针对所有这些移动平台，那将非常有用。
- en: .NET MAUI
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: .NET MAUI
- en: Cross-platform mobile and desktop apps can be built once for the **.NET Multi-platform
    App User Interfaces (MAUI)** platform, and then they can run on many mobile and
    desktop platforms.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 可以为 **.NET Multi-platform App User Interfaces (MAUI)** 平台一次性构建跨平台移动和桌面应用程序，然后它们可以在许多移动和桌面平台上运行。
- en: .NET MAUI makes it easy to develop those apps by sharing user interface components
    as well as business logic. They can target the same .NET APIs as used by console
    apps, websites, and web services. The apps will be executed by the Mono runtime
    on mobile devices and the CoreCLR runtime on desktop devices. The Mono runtime
    is better optimized for mobile devices compared to the normal .NET CoreCLR runtime.
    Blazor WebAssembly also uses the Mono runtime because, like a mobile app, it is
    resource-constrained.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: .NET MAUI 通过共享用户界面组件以及业务逻辑，使开发这些应用程序变得容易。它们可以针对与控制台应用程序、网站和 Web 服务相同的 .NET API。这些应用程序将在移动设备上的
    Mono 运行时和桌面设备上的 CoreCLR 运行时上执行。与正常的 .NET CoreCLR 运行时相比，Mono 运行时在移动设备上进行了更好的优化。Blazor
    WebAssembly 也使用 Mono 运行时，因为它像移动应用程序一样，资源受限。
- en: The apps can exist on their own, but they usually call services to provide an
    experience that spans all your computing devices, from servers and laptops to
    phones and gaming systems.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这些应用程序可以独立存在，但它们通常调用服务以提供跨越所有计算设备（从服务器和笔记本电脑到手机和游戏系统）的体验。
- en: 'I introduce .NET MAUI in my companion book, *Apps and Services with .NET 8*,
    and Packt has many other books that go much deeper into .NET MAUI, so if you’re
    serious about learning MAUI, please take a look at the following Packt books:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我在我的配套书籍《使用 .NET 8 开发应用程序和服务》中介绍了 .NET MAUI，Packt 还有许多其他深入探讨 .NET MAUI 的书籍，所以如果你对学习
    MAUI 严肃认真，请查看以下 Packt 书籍：
- en: '*.NET MAUI Cross-Platform Application Development*: [https://www.packtpub.com/en-us/product/net-maui-cross-platform-application-development-9781835080597](https://www.packtpub.com/en-us/product/net-maui-cross-platform-application-development-9781835080597)'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*.NET MAUI 跨平台应用程序开发*：[https://www.packtpub.com/en-us/product/net-maui-cross-platform-application-development-9781835080597](https://www.packtpub.com/en-us/product/net-maui-cross-platform-application-development-9781835080597)'
- en: '*The MVVM Pattern in .NET MAUI*: [https://www.packtpub.com/en-us/product/the-mvvm-pattern-in-net-maui-9781805125006](https://www.packtpub.com/en-us/product/the-mvvm-pattern-in-net-maui-9781805125006)'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《.NET MAUI 中的 MVVM 模式》*：[https://www.packtpub.com/en-us/product/the-mvvm-pattern-in-net-maui-9781805125006](https://www.packtpub.com/en-us/product/the-mvvm-pattern-in-net-maui-9781805125006)'
- en: '*.NET MAUI Projects*: [https://www.packtpub.com/en-us/product/net-maui-projects-9781837634910](https://www.packtpub.com/en-us/product/net-maui-projects-9781837634910)'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*.NET MAUI 项目*：[https://www.packtpub.com/en-us/product/net-maui-projects-9781837634910](https://www.packtpub.com/en-us/product/net-maui-projects-9781837634910)'
- en: Before Microsoft created .NET MAUI, third parties created open source initiatives
    to enable .NET developers to build cross-platform apps using XAML, named **Uno**
    and **Avalonia**.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在微软创建 .NET MAUI 之前，第三方创建了开源项目，以使 .NET 开发者能够使用 XAML 构建跨平台应用程序，这些项目被称为 **Uno**
    和 **Avalonia**。
- en: '**Warning!** I have not tried Uno or Avalonia myself for any real-world projects,
    so I cannot give an evidence-based recommendation for either of them. I mention
    them in this book just to make you aware of them.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告！** 我自己没有尝试过任何真实世界的项目使用 Uno 或 Avalonia，因此我无法为它们中的任何一个提供基于证据的建议。我在这本书中提到它们只是为了让你了解它们。'
- en: Uno platform
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Uno平台
- en: 'Uno is an *“Open-source platform for building single codebase native mobile,
    web, desktop and embedded apps quickly”*, as stated on their website, found at
    the following link: [https://platform.uno/](https://platform.uno/).'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如其在网站[https://platform.uno/](https://platform.uno/)上所述，Uno是一个*“快速构建单一代码库原生移动、Web、桌面和嵌入式应用程序的开源平台”*。
- en: Developers can reuse 99% of the business logic and UI layer across native mobile,
    web, and desktop.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者可以在原生移动、Web和桌面应用程序之间重用99%的业务逻辑和UI层。
- en: The Uno platform uses the Xamarin native platform but *not* Xamarin.Forms. For
    WebAssembly, Uno uses the Mono-WASM runtime. For Linux, Uno uses Skia to draw
    the user interface on canvas.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Uno平台使用Xamarin原生平台，但不使用Xamarin.Forms。对于WebAssembly，Uno使用Mono-WASM运行时。对于Linux，Uno使用Skia在画布上绘制用户界面。
- en: Avalonia
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Avalonia
- en: 'Avalonia is an *“open source framework for building beautiful, cross-platform
    applications from a single .NET codebase”*, as stated on their website, found
    at the following link: [https://avaloniaui.net/](https://avaloniaui.net/).'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如其在网站[https://avaloniaui.net/](https://avaloniaui.net/)上所述，Avalonia是一个*“从单个.NET代码库构建美丽、跨平台应用程序的开源框架”*。
- en: You can think of Avalonia as a spiritual successor to WPF. WPF, Silverlight,
    and UWP developers familiar with WPF can continue to benefit from their years
    of pre-existing knowledge and skills.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将Avalonia视为WPF的精神继承者。熟悉WPF的WPF、Silverlight和UWP开发者可以继续从他们多年的现有知识和技能中受益。
- en: It was used by JetBrains to modernize their WPF-based tools and make them cross-platform.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 它被JetBrains用来现代化他们的基于WPF的工具，并使它们跨平台。
- en: The Avalonia extension for Visual Studio and deep integration with Rider make
    development easier and more productive.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Avalonia的Visual Studio扩展和与Rider的深度集成使开发更加容易和高效。
- en: Structuring projects
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建项目
- en: How should you structure your projects? So far, we have mostly built small individual
    console apps to illustrate language or library features, with the occasional class
    library and unit test project to support them. In the rest of this book, we will
    build multiple projects using different technologies that work together to provide
    a single solution.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该如何构建你的项目？到目前为止，我们主要构建了小型个体控制台应用程序来展示语言或库功能，偶尔会有类库和单元测试项目来支持它们。在这本书的其余部分，我们将使用不同的技术构建多个项目，这些技术协同工作以提供单一解决方案。
- en: With large, complex solutions, it can be difficult to navigate through all the
    code. So the primary reason to structure your projects is to make it easier to
    find components. It is good to have an overall name for your solution that reflects
    the application or solution.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大型、复杂的项目，导航所有代码可能很困难。因此，构建项目的首要原因是为了更容易地找到组件。有一个反映应用程序或解决方案的解决方案整体名称是好的。
- en: We will build multiple projects for a fictional company named **Northwind**.
    We will name the solution `ModernWeb` and use the name `Northwind` as a prefix
    for all the project names.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为一家名为**Northwind**的虚构公司构建多个项目。我们将解决方案命名为`ModernWeb`，并将`Northwind`用作所有项目名称的前缀。
- en: There are many ways to structure and name projects and solutions, for example,
    using a folder hierarchy as well as a naming convention. If you work in a team,
    make sure you know how your team does it.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方法可以构建和命名项目和解决方案，例如，使用文件夹层次结构和命名约定。如果你在一个团队中工作，确保你知道你的团队是如何做的。
- en: Structuring projects in a solution
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在解决方案中构建项目结构
- en: It is good to have a naming convention for your projects in a solution so that
    any developer can tell what each one does instantly. A common choice is to use
    the type of project, for example, class library, console app, website, and so
    on.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在解决方案中为你的项目有一个命名约定是好的，这样任何开发者都可以立即知道每个项目做什么。一个常见的做法是使用项目类型，例如，类库、控制台应用程序、网站等。
- en: Since you might want to run multiple web projects at the same time and they
    will be hosted on a local web server, we need to differentiate each project by
    assigning different port numbers for their endpoints, for both HTTP and HTTPS.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你可能需要同时运行多个网络项目，并且它们将托管在本地网络服务器上，我们需要通过为它们的端点分配不同的端口号来区分每个项目，无论是HTTP还是HTTPS。
- en: Commonly assigned local port numbers are `5000` for HTTP and `5001` for HTTPS.
    We will use a numbering convention of `5<chapter>0` for HTTP and `5<chapter>1`
    for HTTPS. For example, for a website project we will create in *Chapter 13*,
    we will assign `5130` to HTTP and `5131` to HTTPS.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 常用的本地端口号码为 HTTP 的 `5000` 和 HTTPS 的 `5001`。我们将使用 `5<chapter>0` 作为 HTTP 的编号约定，`5<chapter>1`
    作为 HTTPS 的编号约定。例如，对于我们在 *第 13 章* 中创建的网站项目，我们将分配 `5130` 给 HTTP，`5131` 给 HTTPS。
- en: 'We will, therefore, use the following project names and port numbers, as shown
    in *Table 12.2*:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将使用以下项目名称和端口号，如表 *12.2* 所示：
- en: '| **Name** | **Ports** | **Description** |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| **名称** | **端口** | **描述** |'
- en: '| `Northwind.Common` | N/A | A class library project for common types, like
    interfaces, enums, classes, records, and structs, used across multiple projects.
    |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| `Northwind.Common` | N/A | 用于跨多个项目的常见类型（如接口、枚举、类、记录和结构体）的类库项目。|'
- en: '| `Northwind.EntityModels` | N/A | A class library project for common EF Core
    entity models. Entity models are often used on both the server side and client
    side, so it is best to separate dependencies on specific database providers. |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| `Northwind.EntityModels` | N/A | 用于常见 EF Core 实体模型的类库项目。实体模型通常在服务器端和客户端都使用，因此最好将特定数据库提供程序的依赖项分开。|'
- en: '| `Northwind.DataContext` | N/A | A class library project for the EF Core database
    context, with dependencies on specific database providers. |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| `Northwind.DataContext` | N/A | 用于 EF Core 数据库上下文的类库项目，具有对特定数据库提供程序的依赖。|'
- en: '| `Northwind.UnitTests` | N/A | An xUnit test project for the solution. |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| `Northwind.UnitTests` | N/A | 用于解决方案的 xUnit 测试项目。|'
- en: '| `Northwind.Web` | `http` `5130` and`https` `5131` | An ASP.NET Core project
    for a simple website that uses a mixture of static HTML files and Blazor Static
    **Server-Side Rendering** (**SSR**). |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| `Northwind.Web` | `http` `5130` 和 `https` `5131` | 一个用于简单网站（混合使用静态 HTML 文件和
    Blazor 静态 **服务器端渲染**（**SSR**））的 ASP.NET Core 项目。|'
- en: '| `Northwind.Blazor` | `http` `5140` and`https` `5141` | An ASP.NET Core Blazor
    project. |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| `Northwind.Blazor` | `http` `5140` 和 `https` `5141` | 一个 ASP.NET Core Blazor
    项目。|'
- en: '| `Northwind.WebApi` | `http` `5150` and`https` `5151` | An ASP.NET Core project
    for a web API, aka an HTTP service. A good choice for integrating with websites
    because it can use any JavaScript library or Blazor to interact with the service.
    |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| `Northwind.WebApi` | `http` `5150` 和 `https` `5151` | 一个用于 Web API（即 HTTP
    服务）的 ASP.NET Core 项目。它是与网站集成的良好选择，因为它可以使用任何 JavaScript 库或 Blazor 与服务交互。|'
- en: 'Table 12.2: Example project names for various project types'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 表 12.2：各种项目类型的示例项目名称
- en: Central package management
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 中央包管理
- en: In all previous projects in this book, if we needed to reference a NuGet package,
    we included the reference to the package name and version directly in the project
    file.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的所有先前项目中，如果我们需要引用 NuGet 包，我们直接在项目文件中包含对包名称和版本的引用。
- en: '**Central Package Management (CPM)** is a feature that simplifies the management
    of NuGet package versions across multiple projects within a solution. This is
    particularly useful for large solutions with many projects, where managing package
    versions individually can become cumbersome and error-prone.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '**中央包管理（CPM**）是一个简化解决方案内多个项目之间 NuGet 包版本管理的功能。这对于包含许多项目的大型解决方案尤其有用，在这些解决方案中，单独管理包版本可能会变得繁琐且容易出错。'
- en: 'The key features and benefits of CPM include:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: CPM 的关键功能和优势包括：
- en: '**Centralized Control**: CPM allows you to define package versions in a single
    file, typically `Directory.Packages.props`, which is placed in the root directory
    of your solution. This file centralizes the version information for all NuGet
    packages used across the projects in your solution.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集中控制**：CPM 允许您在单个文件中定义包版本，通常是 `Directory.Packages.props` 文件，该文件位于您解决方案的根目录中。此文件集中了您解决方案中所有项目使用的所有
    NuGet 包的版本信息。'
- en: '**Consistency**: It ensures consistent package versions across multiple projects.
    By having a single source of truth for package versions, CPM eliminates discrepancies
    that can occur when different projects specify different versions of the same
    package.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一致性**：它确保多个项目之间包版本的一致性。通过拥有包版本的单一真实来源，CPM 消除了不同项目指定相同包的不同版本时可能出现的差异。'
- en: '**Simplified Updates**: Updating a package version in a large solution becomes
    straightforward. You update the version in the central file, and all projects
    referencing that package automatically use the updated version. This significantly
    reduces the maintenance overhead.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简化更新**：在大型解决方案中更新包版本变得简单直接。您只需在中央文件中更新版本，所有引用该包的项目将自动使用更新后的版本。这显著降低了维护开销。'
- en: '**Reduced Redundancy**: It removes the need to specify package versions in
    individual project files (`.csproj`). This makes project files cleaner and easier
    to manage, as they no longer contain repetitive version information.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**减少冗余**：它消除了在单个项目文件（`.csproj`）中指定包版本的需求。这使得项目文件更干净，更容易管理，因为它们不再包含重复的版本信息。'
- en: 'Let’s set up CPM for a solution that we will use throughout the rest of the
    chapters in this book:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为本书其余章节中将要使用的一个解决方案设置 CPM：
- en: In the `cs13net9` folder, create a new folder named `ModernWeb`.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `cs13net9` 文件夹中，创建一个名为 `ModernWeb` 的新文件夹。
- en: In the `ModernWeb` folder, create a new file named `Directory.Packages.props`.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `ModernWeb` 文件夹中，创建一个名为 `Directory.Packages.props` 的新文件。
- en: 'In `Directory.Packages.props`, modify its contents, as shown in the following
    markup:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Directory.Packages.props` 中，修改其内容，如下面的标记所示：
- en: '[PRE1]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Warning!** The `<ManagePackageVersionsCentrally>` element and its `true`
    value must go all on one line. Also, you cannot use floating wildcard version
    numbers, like `10.0-*`, as you can in an individual project, to always get the
    latest patch version of EF Core 10 during previews automatically.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告！** `<ManagePackageVersionsCentrally>` 元素及其 `true` 值必须全部位于一行上。此外，您不能使用在单个项目中可以使用的浮点通配符版本号，如
    `10.0-*`，以在预览期间自动获取 EF Core 10 的最新补丁版本。'
- en: 'For any projects that we add underneath the folder containing this file, we
    can reference the packages without explicitly specifying the version, as shown
    in the following markup:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们添加到包含此文件的文件夹下的任何项目，我们可以引用这些包，而无需明确指定版本，如下面的标记所示：
- en: '[PRE2]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You should regularly review and update the package versions in the `Directory.Packages.props`
    file to ensure that you are using the latest stable releases, with important bug
    fixes and performance improvements.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该定期审查和更新 `Directory.Packages.props` 文件中的包版本，以确保您使用的是最新的稳定版本，其中包含重要的错误修复和性能改进。
- en: I recommend that you set a monthly event in your calendar for the second Wednesday
    of each month. This will occur after the second Tuesday of each month, which is
    Patch Tuesday, when Microsoft releases bug fixes and patches for .NET and related
    packages.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议你在日历中为每个月的第二个星期三设置一个事件。这将在每个月第二个星期二之后发生，即补丁星期二，届时微软会发布 .NET 和相关包的错误修复和补丁。
- en: 'For example, in mid-December 2024, there are likely to be new versions, so
    you can go to the NuGet page for all your packages and then update the versions
    if necessary, as shown in the following markup:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在 2024 年中旬，可能会有新版本，因此你可以访问所有包的 NuGet 页面，并在必要时更新版本，如下面的标记所示：
- en: '[PRE3]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Before updating package versions, check for any breaking changes in the release
    notes of the packages. Test your solution thoroughly after updating to ensure
    compatibility.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在更新包版本之前，检查包的发布说明中是否有任何破坏性更改。更新后彻底测试您的解决方案以确保兼容性。
- en: Educate your team, and document the purpose and usage of the `Directory.Packages.props`
    file to ensure that everyone understands how to manage package versions centrally.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 教育您的团队，并记录 `Directory.Packages.props` 文件的目的和用法，以确保每个人都了解如何集中管理包版本。
- en: 'You can override an individual package version by using the `VersionOverride`
    attribute on a `<PackageReference />` element, as shown in the following markup:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在 `<PackageReference />` 元素上使用 `VersionOverride` 属性来覆盖单个包版本，如下面的标记所示：
- en: '[PRE4]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This can be useful if a newer version introduces a regression bug.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这在引入回归错误的新版本中可能很有用。
- en: '**More Information**: You can learn more about CPM at the following link: [https://learn.microsoft.com/en-us/nuget/consume-packages/central-package-management](https://learn.microsoft.com/en-us/nuget/consume-packages/central-package-management).'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '**更多信息**：您可以在以下链接中了解更多关于 CPM 的信息：[https://learn.microsoft.com/en-us/nuget/consume-packages/central-package-management](https://learn.microsoft.com/en-us/nuget/consume-packages/central-package-management)。'
- en: Building an entity model for use in the rest of the book
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为本书其余部分构建实体模型
- en: Websites and web services usually need to work with data in a relational database
    or another data store. In this section, we will define an entity data model for
    the Northwind database stored in SQL Server or SQLite. It will be used in most
    of the apps that we create in subsequent chapters.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 网站和 Web 服务通常需要与关系数据库或其他数据存储中的数据进行交互。在本节中，我们将为存储在 SQL Server 或 SQLite 中的 Northwind
    数据库定义一个实体数据模型。它将用于我们在后续章节中创建的大多数应用程序。
- en: Creating the Northwind database
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 Northwind 数据库
- en: The script files to create the Northwind database for SQLite and SQL Server
    are different. The script for SQL Server creates 13 tables as well as related
    views and stored procedures. The script for SQLite is a simplified version that
    only creates 10 tables because SQLite does not support as many features. The main
    projects in this book only need those 10 tables, so you can complete every task
    in this book with either database.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 Northwind 数据库用于 SQLite 和 SQL Server 的脚本文件不同。SQL Server 的脚本创建 13 个表以及相关的视图和存储过程。SQLite
    的脚本是一个简化版本，仅创建 10 个表，因为 SQLite 不支持那么多功能。本书中的主要项目只需要这 10 个表，因此你可以使用任一数据库完成本书中的所有任务。
- en: 'The SQL scripts are found at the following link: [https://github.com/markjprice/cs13net9/tree/main/scripts/sql-scripts](https://github.com/markjprice/cs13net9/tree/main/scripts/sql-scripts).'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 脚本可以在以下链接找到：[https://github.com/markjprice/cs13net9/tree/main/scripts/sql-scripts](https://github.com/markjprice/cs13net9/tree/main/scripts/sql-scripts)。
- en: 'There are multiple SQL scripts to choose from, as described in the following
    list:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如下列表所述，有多种 SQL 脚本可供选择：
- en: '`Northwind4Sqlite.sql` script: To use SQLite on a local Windows, macOS, or
    Linux computer. This script could probably also be used for other SQL systems,
    like PostgreSQL or MySQL, but has not been tested for use with those!'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Northwind4Sqlite.sql` 脚本：在本地 Windows、macOS 或 Linux 计算机上使用 SQLite。这个脚本可能也可以用于其他
    SQL 系统，如 PostgreSQL 或 MySQL，但尚未测试过这些系统的使用！'
- en: '`Northwind4SqlServer.sql` script: To use SQL Server on a local Windows computer.
    The script checks if the Northwind database already exists, and if the database
    does exists, then it drops (aka deletes) the database before recreating it.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Northwind4SqlServer.sql` 脚本：在本地 Windows 计算机上使用 SQL Server。该脚本检查 Northwind
    数据库是否已存在，如果数据库已存在，则在重新创建之前将其删除（即删除）。'
- en: '`Northwind4AzureSqlDatabaseCloud.sql` script: To use SQL Server with an Azure
    SQL Database resource created in the Azure cloud. These resources cost money as
    long as they exist! The script does not drop or create the Northwind database
    because you should manually create the Northwind database using the Azure portal
    user interface.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Northwind4AzureSqlDatabaseCloud.sql` 脚本：在 Azure 云中创建的 Azure SQL 数据库资源上使用 SQL
    Server。只要这些资源存在，就会产生费用！该脚本不会删除或创建 Northwind 数据库，因为您应该使用 Azure 门户用户界面手动创建 Northwind
    数据库。'
- en: '`Northwind4AzureSqlEdgeDocker.sql` script: To use SQL Server on a local computer
    in Docker. The script creates the Northwind database. It does not drop it if it
    already exists because the Docker container should be empty anyway, as a fresh
    one will be spun up each time.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Northwind4AzureSqlEdgeDocker.sql` 脚本：在 Docker 中的本地计算机上使用 SQL Server。该脚本创建
    Northwind 数据库。如果数据库已存在，则不会删除它，因为 Docker 容器应该始终为空，因为每次都会启动一个新的容器。'
- en: Instructions to install SQLite can be found in *Chapter 10*, *Working with Data
    Using Entity Framework Core*. In that chapter, you will also find instructions
    for installing the `dotnet-ef` tool, which you will use to scaffold an entity
    model from an existing database.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *第 10 章*，*使用 Entity Framework Core 处理数据* 中可以找到安装 SQLite 的说明。在该章中，你还可以找到安装
    `dotnet-ef` 工具的说明，你将使用它从现有数据库生成实体模型。
- en: 'Instructions to install SQL Server Developer Edition (free) on your local Windows
    computer can be found in the GitHub repository for this book at the following
    link: [https://github.com/markjprice/cs13net9/blob/main/docs/sql-server/README.md](https://github.com/markjprice/cs13net9/blob/main/docs/sql-server/README.md).'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地 Windows 计算机上安装 SQL Server Developer Edition（免费版）的说明可以在本书的 GitHub 仓库中找到，链接如下：[https://github.com/markjprice/cs13net9/blob/main/docs/sql-server/README.md](https://github.com/markjprice/cs13net9/blob/main/docs/sql-server/README.md)。
- en: 'Instructions to set up Azure SQL Edge in Docker for Windows, macOS, or Linux
    can be found in the GitHub repository for this book at the following link: [https://github.com/markjprice/cs13net9/blob/main/docs/sql-server/sql-edge.md](https://github.com/markjprice/cs13net9/blob/main/docs/sql-server/sql-edge.md).'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Docker for Windows、macOS 或 Linux 上设置 Azure SQL Edge 的说明可以在本书的 GitHub 仓库中找到，链接如下：[https://github.com/markjprice/cs13net9/blob/main/docs/sql-server/sql-edge.md](https://github.com/markjprice/cs13net9/blob/main/docs/sql-server/sql-edge.md)。
- en: Creating a class library for entity models using SQLite
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 SQLite 创建实体模型类库
- en: You will now define entity data models in a class library so that they can be
    reused in other types of projects, including client-side app models.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在将在类库中定义实体数据模型，以便它们可以在其他类型的项目中重用，包括客户端应用程序模型。
- en: '**Good Practice**: You should create a separate class library project for your
    entity data models from the class library for your data context. This allows easier
    sharing of the entity models between backend web servers and frontend desktop,
    mobile, and Blazor clients, and only the backend needs to reference the data context
    class library.'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：您应该为您的实体数据模型从数据上下文类库中创建一个单独的类库项目。这允许在后台Web服务器和前端桌面、移动和Blazor客户端之间更容易地共享实体模型，并且只有后台需要引用数据上下文类库。'
- en: 'We will automatically generate some entity models using the EF Core command-line
    tool:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用EF Core命令行工具自动生成一些实体模型：
- en: 'Use your preferred code editor to create a new project and solution, as defined
    in the following list:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您首选的代码编辑器创建一个新的项目和解决方案，如下面的列表所示：
- en: 'Project template: **Class Library** / `classlib`'
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目模板：**类库** / `classlib`
- en: 'Project file and folder: `Northwind.EntityModels.Sqlite`'
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目文件和文件夹：`Northwind.EntityModels.Sqlite`
- en: 'Solution file and folder: `ModernWeb`'
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决方案文件和文件夹：`ModernWeb`
- en: 'In the `Northwind.EntityModels.Sqlite` project, add package references for
    the SQLite database provider and EF Core design-time support, as shown in the
    following markup:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.EntityModels.Sqlite`项目中，添加对SQLite数据库提供程序和EF Core设计时支持的包引用，如下面的标记所示：
- en: '[PRE5]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Delete the `Class1.cs` file.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`Class1.cs`文件。
- en: Build the `Northwind.EntityModels.Sqlite` project to restore packages.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建项目`Northwind.EntityModels.Sqlite`以恢复包。
- en: Copy the `Northwind4Sqlite.sql` file into the `ModernWeb` solution folder (not
    the project folder!).
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Northwind4Sqlite.sql`文件复制到`ModernWeb`解决方案文件夹中（不是项目文件夹！）。
- en: 'At a command prompt or terminal in the `ModernWeb` folder, enter a command
    to create the `Northwind.db` file for SQLite, as shown in the following command:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ModernWeb`文件夹中的命令提示符或终端中，输入一个命令来创建SQLite的`Northwind.db`文件，如下面的命令所示：
- en: '[PRE6]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Be patient because this command might take a while to create the database structure.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 请耐心等待，因为这个命令可能需要一段时间来创建数据库结构。
- en: To exit SQLite command mode, press *Ctrl* + *C* twice on Windows or *Cmd* +
    *D* on macOS or Linux.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要退出SQLite命令模式，在Windows上请按两次*Ctrl* + *C*，在macOS或Linux上请按*Cmd* + *D*。
- en: 'At a command prompt or terminal in the `ModernWeb` folder, enter a command
    to list the files in the current directory, as shown in the following command:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ModernWeb`文件夹中的命令提示符或终端中，输入一个命令来列出当前目录中的文件，如下面的命令所示：
- en: '[PRE7]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You should see that a new file named `Northwind.db` has been created, as shown
    in the following output:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到已创建一个名为`Northwind.db`的新文件，如下面的输出所示：
- en: '[PRE8]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Change to the project folder:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到项目文件夹：
- en: '[PRE9]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'At a command prompt or terminal in the `Northwind.EntityModels.Sqlite` project
    folder (the folder that contains the `.csproj` project file), generate entity
    class models for all tables, as shown in the following command:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.EntityModels.Sqlite`项目文件夹中（包含`.csproj`项目文件的文件夹），为所有表生成实体类模型，如下面的命令所示：
- en: '[PRE10]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Note the following:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 注意以下事项：
- en: 'The command to perform: `dbcontext scaffold`'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行的命令：`dbcontext scaffold`
- en: 'The connection string refers to the database file in the solution folder, which
    is one folder up from the current project folder: `"Data Source=../Northwind.db"`'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接字符串指的是解决方案文件夹中的数据库文件，位于当前项目文件夹的上一个文件夹中："数据源=../Northwind.db"
- en: 'The database provider: `Microsoft.EntityFrameworkCore.Sqlite`'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库提供程序：`Microsoft.EntityFrameworkCore.Sqlite`
- en: 'The namespace: `--namespace Northwind.EntityModels`'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命名空间：`--namespace Northwind.EntityModels`
- en: 'To use data annotations as well as the Fluent API: `--data-annotations`'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要使用数据注释以及Fluent API：`--data-annotations`
- en: '**Warning!** `dotnet-ef` commands must be entered all on one line and in a
    folder that contains a project; otherwise, you will see the following error: `No
    project was found. Change the current working directory or use the --project option.`
    Remember that all command lines can be found at and copied from the following
    link: [https://github.com/markjprice/cs13net9/blob/main/docs/command-lines.md](https://github.com/markjprice/cs13net9/blob/main/docs/command-lines.md).'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**警告！** `dotnet-ef`命令必须在一行中输入，并且在一个包含项目的文件夹中；否则，您将看到以下错误："未找到项目。更改当前工作目录或使用--project选项。"请记住，所有命令行都可以在以下链接中找到并复制：[https://github.com/markjprice/cs13net9/blob/main/docs/command-lines.md](https://github.com/markjprice/cs13net9/blob/main/docs/command-lines.md)。'
- en: If you use SQLite, then you will see warnings about incompatible type mappings
    between the table columns and properties in the entity class models. For example,
    `The column 'BirthDate' on table 'Employees' should map to a property of type
    'DateOnly', but its values are in an incompatible format. Using a different type`.
    This is due to SQLite using dynamic types. We will fix those issues in the next
    section.
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您使用 SQLite，您将看到有关实体类模型中的表列和属性之间不兼容类型映射的警告。例如，`Employees` 表上的列 'BirthDate'
    应映射到类型为 'DateOnly' 的属性，但其值处于不兼容的格式。使用不同的类型`。这是由于 SQLite 使用动态类型。我们将在下一节中修复这些问题。
- en: Creating a class library for a database context using SQLite
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 SQLite 创建数据库上下文类库
- en: 'You will now define a database context class library:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在将定义一个数据库上下文类库：
- en: 'Add a new project to the solution, as defined in the following list:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据以下列表添加一个新的项目到解决方案中：
- en: 'Project template: **Class Library** / `classlib`'
  id: totrans-220
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目模板：**类库** / `classlib`
- en: 'Project file and folder: `Northwind.DataContext.Sqlite`'
  id: totrans-221
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目文件和文件夹：`Northwind.DataContext.Sqlite`
- en: 'Solution file and folder: `ModernWeb`'
  id: totrans-222
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决方案文件和文件夹：`ModernWeb`
- en: 'In the `Northwind.DataContext.Sqlite` project, statically and globally import
    the `Console` class, add a package reference to the EF Core data provider for
    SQLite, and add a project reference to the `Northwind.EntityModels.Sqlite` project,
    as shown in the following markup:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.DataContext.Sqlite` 项目中，静态和全局导入 `Console` 类，添加对 SQLite EF Core
    数据提供程序的包引用，并添加对 `Northwind.EntityModels.Sqlite` 项目的项目引用，如下所示：
- en: '[PRE11]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**Warning!** The path to the project reference should not have a line break
    in your project file.'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告！**项目引用的路径在项目文件中不应有换行符。'
- en: In the `Northwind.DataContext.Sqlite` project, delete the `Class1.cs` file.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.DataContext.Sqlite` 项目中，删除 `Class1.cs` 文件。
- en: Build the `Northwind.DataContext.Sqlite` project to restore packages.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建北 `wind.DataContext.Sqlite` 项目以还原包。
- en: In the `Northwind.DataContext.Sqlite` project, add a class named `NorthwindContextLogger.cs`.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.DataContext.Sqlite` 项目中，添加一个名为 `NorthwindContextLogger.cs` 的类。
- en: 'Modify its contents to define a static method, named `WriteLine`, that appends
    a string to the end of a text file, named `northwindlog-<date_time>.txt`, in a
    folder named `book-logs` on the desktop, as shown in the following code:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改其内容以定义一个名为 `WriteLine` 的静态方法，该方法将字符串追加到桌面上的 `book-logs` 文件夹中名为 `northwindlog-<date_time>.txt`
    的文本文件的末尾，如下所示：
- en: '[PRE12]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Move the `NorthwindContext.cs` file from the `Northwind.EntityModels.Sqlite`
    project/folder to the `Northwind.DataContext.Sqlite` project/folder.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `NorthwindContext.cs` 文件从 `Northwind.EntityModels.Sqlite` 项目/文件夹移动到 `Northwind.DataContext.Sqlite`
    项目/文件夹。
- en: In Visual Studio **Solution Explorer**, if you drag and drop a file between
    projects, it will be copied. If you hold down *Shift* while dragging and dropping,
    it will be moved. In VS Code **EXPLORER**, if you drag and drop a file between
    projects, it will be moved. If you hold down *Ctrl* while dragging and dropping,
    it will be copied.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Visual Studio **解决方案资源管理器**中，如果您在项目之间拖放文件，它将被复制。如果您在拖放时按住 *Shift* 键，它将被移动。在
    VS Code **资源管理器**中，如果您在项目之间拖放文件，它将被移动。如果您在拖放时按住 *Ctrl* 键，它将被复制。
- en: 'In `NorthwindContext.cs`, note the second constructor can have `options` passed
    as a parameter, which allows us to override the default database connection string
    in any projects, such as websites that need to work with the Northwind database,
    as shown in the following code:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `NorthwindContext.cs` 文件中，注意第二个构造函数可以接受 `options` 作为参数，这允许我们在任何项目中覆盖默认的数据库连接字符串，例如需要与
    Northwind 数据库一起工作的网站，如下所示：
- en: '[PRE13]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In `NorthwindContext.cs`, in the `OnConfiguring` method, remove the compiler
    #warning about the connection string, and then add statements to check the end
    of the current directory to accommodate when running in Visual Studio compared
    to the command prompt with VS Code, as shown in the following code:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在 `NorthwindContext.cs` 文件中的 `OnConfiguring` 方法中，移除关于连接字符串的编译器 #warning，然后添加语句以检查当前目录的末尾，以便在
    Visual Studio 中运行时与使用 VS Code 的命令提示符相比，如下所示：'
- en: '[PRE14]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The throwing of the exception is important because if the database file is missing,
    then the SQLite database provider will create an empty database file, and so if
    you test connecting to it, it works. But if you query it, then you will see an
    exception related to missing tables because it does not have any tables! After
    converting the relative path to an absolute path, you can set a breakpoint while
    debugging to more easily see where the database file is expected to be, or add
    a statement to log that path.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 抛出异常是很重要的，因为如果数据库文件缺失，那么 SQLite 数据库提供者将创建一个空数据库文件，因此如果你测试连接到它，它将正常工作。但是如果你查询它，你将看到与缺失表相关的异常，因为它没有任何表！在将相对路径转换为绝对路径后，你可以在调试时设置断点，以便更容易地看到数据库文件预期所在的位置，或者添加一条记录该路径的语句。
- en: Customizing the model and defining an extension method
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义模型和定义扩展方法
- en: 'Now, we will simplify the `OnModelCreating` method. I will briefly explain
    the individual steps and then show the complete final method. You can either try
    to perform the individual steps or just use the final method code:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将简化 `OnModelCreating` 方法。我将简要解释各个步骤，然后展示完整的最终方法。你可以尝试执行各个步骤，或者直接使用最终方法代码：
- en: 'In the `OnModelCreating` method, remove all Fluent API statements that call
    the `ValueGeneratedNever` method, like the one shown in the following code. This
    will configure primary key properties, like `CategoryId`, to never generate a
    value automatically:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `OnModelCreating` 方法中，删除所有调用 `ValueGeneratedNever` 方法的 Fluent API 语句，如下代码所示。这将配置主键属性，如
    `CategoryId`，以从不自动生成值：
- en: '[PRE15]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If we do not remove the configuration like the statements above, then when
    we add new suppliers, the `CategoryId` value will always be `0`, and we will only
    be able to add one supplier with that value; all other attempts will throw an
    exception. You can compare your `NorthwindContext.cs` to the one in the GitHub
    repository at the following link: [https://github.com/markjprice/cs13net9/blob/main/code/ModernWeb/Northwind.DataContext.Sqlite/NorthwindContext.cs](https://github.com/markjprice/cs13net9/blob/main/code/ModernWeb/Northwind.DataContext.Sqlite/NorthwindContext.cs).'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不删除上述类似配置的语句，那么当我们添加新的供应商时，`CategoryId` 的值将始终是 `0`，我们只能添加一个具有该值的供应商；所有其他尝试都将抛出异常。你可以将你的
    `NorthwindContext.cs` 与以下链接中的 GitHub 仓库中的版本进行比较：[https://github.com/markjprice/cs13net9/blob/main/code/ModernWeb/Northwind.DataContext.Sqlite/NorthwindContext.cs](https://github.com/markjprice/cs13net9/blob/main/code/ModernWeb/Northwind.DataContext.Sqlite/NorthwindContext.cs)。
- en: 'In the `OnModelCreating` method, for the `Product` entity, tell SQLite that
    the `UnitPrice` can be converted from `decimal` to `double`, as shown in the following
    code:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `OnModelCreating` 方法中，对于 `Product` 实体，告诉 SQLite 将 `UnitPrice` 从 `decimal`
    转换为 `double`，如下代码所示：
- en: '[PRE16]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In the `OnModelCreating` method, for the `Order` entity, pass a decimal value
    `0.0M` to the `HasDefaultValue` method, as shown in the following code:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `OnModelCreating` 方法中，对于 `Order` 实体，将十进制值 `0.0M` 传递给 `HasDefaultValue` 方法，如下代码所示：
- en: '[PRE17]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In the `OnModelCreating` method, for the `Product` entity, pass a decimal value
    `0.0M` to the `HasDefaultValue` method, as shown in the following code:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `OnModelCreating` 方法中，对于 `Product` 实体，将十进制值 `0.0M` 传递给 `HasDefaultValue` 方法，如下代码所示：
- en: '[PRE18]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The `OnModelCreating` method should now be simpler, as shown in the following
    code:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如下代码所示，`OnModelCreating` 方法现在应该更简单：
- en: '[PRE19]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In the `Northwind.DataContext.Sqlite` project, add a class named `NorthwindContextExtensions.cs`.
    Modify its contents to define an extension method that adds the Northwind database
    context to a collection of dependency services, as shown in the following code:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.DataContext.Sqlite` 项目中，添加一个名为 `NorthwindContextExtensions.cs`
    的类。修改其内容以定义一个扩展方法，将 Northwind 数据库上下文添加到依赖服务集合中，如下代码所示：
- en: '[PRE20]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Build the two class libraries and fix any compiler errors.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建这两个类库，并修复任何编译器错误。
- en: HasDefaultValue and HasDefaultValueSql
  id: totrans-254
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`HasDefaultValue` 和 `HasDefaultValueSql`'
- en: What’s the difference between these two methods?
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个方法的区别是什么？
- en: You should use `HasDefaultValue()` when you need a constant, static value as
    a default for a column, and the value does not depend on any conditions or need
    to be dynamically calculated at the time of insertion. This constant value is
    set at the model level and is used by EF Core to insert into the database if no
    other value is provided.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要一个作为列默认值的常量、静态值，并且该值不依赖于任何条件或不需要在插入时动态计算时，你应该使用 `HasDefaultValue()`。此常量值在模型级别设置，并由
    EF Core 在没有提供其他值时用于向数据库插入。
- en: For the equivalent to the preceding example, you would use `entity.Property(e
    => e.Freight).HasDefaultValue(0M);` because `0M` uses the decimal suffix `M`.
    Think of it as setting a default value on the client side.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 对于前面示例的等效操作，你会使用`entity.Property(e => e.Freight).HasDefaultValue(0M);`，因为`0M`使用了十进制后缀`M`。将其视为在客户端设置默认值。
- en: 'You should use `HasDefaultValueSql()` when the default value should be calculated
    by the database at the time of insertion, especially if it involves SQL functions
    or dynamic data that the database should evaluate. The default is a string `"0"`
    because it will be concatenated to the SQL statement, as shown in the following
    code:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 当默认值应该在插入时由数据库计算，特别是如果它涉及到数据库应该评估的SQL函数或动态数据时，你应该使用`HasDefaultValueSql()`。默认值是一个字符串`"0"`，因为它将被连接到SQL语句中，如下面的代码所示：
- en: '[PRE21]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Think of this as configuring the database to set a default value on the server
    side.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 将其视为配置数据库以在服务器端设置默认值。
- en: EF Core 8 and earlier database reverse-engineering for SQLite used `HasDefaultValueSql`.
    EF Core 9 database reverse-engineering uses `HasDefaultValue`.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: EF Core 8及更早版本的SQLite数据库反向工程使用`HasDefaultValueSql`。EF Core 9数据库反向工程使用`HasDefaultValue`。
- en: Registering the scope of a dependency service
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注册依赖服务的作用域
- en: 'By default, a `DbContext` class is registered using the `Scope` lifetime, meaning
    that multiple threads can share the same instance. But `DbContext` does not support
    multiple threads. If more than one thread attempts to use the same `NorthwindContext`
    class instance at the same time, then you will see the following runtime exception
    thrown: `A second operation started on this context before a previous operation
    completed. This is usually caused by different threads using the same instance
    of a DbContext, however instance members are not guaranteed to be thread safe`.'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，使用`Scope`生命周期注册`DbContext`类，这意味着多个线程可以共享同一个实例。但是`DbContext`不支持多线程。如果有多个线程同时尝试使用同一个`NorthwindContext`类实例，那么你将看到以下运行时异常被抛出：`在完成之前的操作之前，在此上下文中启动了第二个操作。这通常是由不同的线程使用同一个DbContext实例引起的，然而实例成员不一定保证是线程安全的`。
- en: This happens in Blazor projects with components set to run on the server side
    because, whenever interactions on the client side happen, a SignalR call is made
    back to the server, where a single instance of the database context is shared
    between multiple clients. This issue does not occur if a component is set to run
    on the client side.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况发生在Blazor项目中，当组件被设置为在服务器端运行时，因为每当客户端发生交互时，都会向服务器发起一个SignalR调用，在服务器端，多个客户端之间共享单个数据库上下文实例。如果组件被设置为在客户端运行，则不会出现此问题。
- en: Creating class libraries for entity models using SQL Server
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用SQL Server创建实体模型的类库
- en: 'If you would like to use SQL Server instead of SQLite, then there are instructions
    at the following link:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想使用SQL Server而不是SQLite，那么以下链接中有相应的说明：
- en: '[https://github.com/markjprice/cs13net9/blob/main/docs/sql-server/README.md#chapter-12---introducing-web-development-using-aspnet-core](https://github.com/markjprice/cs13net9/blob/main/docs/sql-server/README.md#chapter-12---introducing-web-development-using-aspnet-core)'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/cs13net9/blob/main/docs/sql-server/README.md#chapter-12---introducing-web-development-using-aspnet-core](https://github.com/markjprice/cs13net9/blob/main/docs/sql-server/README.md#chapter-12---introducing-web-development-using-aspnet-core)'
- en: Improving the class-to-table mapping
  id: totrans-268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改进类到表的映射
- en: The `dotnet-ef` command-line tool generates different code for SQL Server and
    SQLite because they support different levels of functionality, and SQLite uses
    dynamic typing. For example, with EF Core 7, all integer columns in SQLite were
    mapped to nullable `long` properties for maximum flexibility.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '`dotnet-ef`命令行工具为SQL Server和SQLite生成不同的代码，因为它们支持不同的功能级别，并且SQLite使用动态类型。例如，在EF
    Core 7中，SQLite中的所有整数列都被映射为可空的`long`属性，以实现最大的灵活性。'
- en: With EF Core 8 and later, the actual stored values are checked, and if they
    are all storable in an `int`, EF Core 8 and later will declare the mapped property
    as an `int`. If the stored values are all storable in a `short`, EF Core 8 and
    later will declare the mapped property as a `short`.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 使用EF Core 8及更高版本时，会检查实际存储的值，如果它们都可以存储在`int`中，那么EF Core 8及更高版本会将映射属性声明为`int`。如果存储的值都可以存储在`short`中，那么EF
    Core 8及更高版本会将映射属性声明为`short`。
- en: In this edition, we need to do less work to improve the mapping. Hooray!
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一版中，我们需要做更少的工作来改进映射。太好了！
- en: 'As another example, SQL Server text columns can have limits on the number of
    characters. SQLite does not support this. So `dotnet-ef` will generate validation
    attributes to ensure that `string` properties are limited to a specified number
    of characters for SQL Server but not for SQLite, as shown in the following code:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 作为另一个例子，SQL Server的文本列可以限制字符数。SQLite不支持这一点。因此，`dotnet-ef`将为SQL Server生成验证属性以确保`string`属性限制在指定的字符数内，但不适用于SQLite，如下面的代码所示：
- en: '[PRE22]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We will make some small changes to improve the entity model mapping and validation
    rules for SQLite. Similar ones for SQL Server are in the online-only instructions.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将对SQLite的实体模型映射和验证规则进行一些小的修改。SQL Server的类似修改可在在线说明中找到。
- en: 'Remember that all code is available in the GitHub repository for the book.
    Although you will learn more by typing the code yourself, you never have to. Go
    to the following link and press *.* to get a live code editor in your browser:
    [https://github.com/markjprice/cs13net9](https://github.com/markjprice/cs13net9).'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，所有代码都可在本书的GitHub仓库中找到。虽然您通过亲自输入代码会学到更多，但您不必这样做。访问以下链接并按*.*以在浏览器中获得实时代码编辑器：[https://github.com/markjprice/cs13net9](https://github.com/markjprice/cs13net9)。
- en: 'First, we will add a regular expression to validate that a `CustomerId` value
    is exactly five uppercase letters. Second, we will add string length requirements
    to validate that multiple properties throughout the entity models know the maximum
    length allowed for their text values:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将添加一个正则表达式来验证`CustomerId`值正好是五个大写字母。其次，我们将添加字符串长度要求来验证实体模型中的多个属性知道其文本值允许的最大长度：
- en: 'Activate your code editor’s **Find and Replace** feature:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 激活您的代码编辑器的**查找和替换**功能：
- en: In Visual Studio, navigate to **Edit** | **Find and Replace** | **Quick Replace**,
    and then toggle on **Use Regular Expressions**.
  id: totrans-278
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Visual Studio中，导航到**编辑** | **查找和替换** | **快速替换**，然后切换**使用正则表达式**。
- en: 'Type a regular expression in the **Find** box, as shown in *Figure 12.3* and
    the following expression:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**查找**框中输入正则表达式，如*图12.3*和以下表达式所示：
- en: '[PRE23]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In the **Replace** box, type a replacement regular expression, as shown in
    the following expression:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**替换**框中，输入替换正则表达式，如下面的表达式所示：
- en: '[PRE24]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: After the newline character, `\n`, I have included four space characters to
    indent correctly on my system, which uses two space characters per indentation
    level. You can insert as many as you wish.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 在换行符`\n`之后，我包含了四个空格字符，以便在我的系统中正确缩进，每级缩进使用两个空格字符。您可以插入任意多个。
- en: Set **Find and Replace** to search files in the **Current project**.
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**查找和替换**设置为在**当前项目**中搜索文件。
- en: 'Execute **Find and Replace** to replace all files, as shown in *Figure 12.3*:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行**查找和替换**以替换所有文件，如*图12.3*所示：
- en: '![](img/B22322_12_03.png)'
  id: totrans-286
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B22322_12_03.png)'
- en: 'Figure 12.3: Find and replace all matches using regular expressions in Visual
    Studio'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.3：在Visual Studio中使用正则表达式查找和替换所有匹配项
- en: 'Change any date/time columns, for example, in `Employee.cs`, to use a nullable
    `DateTime` instead of a string, as shown in the following code:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将任何日期/时间列，例如在`Employee.cs`中，更改为使用可空的`DateTime`而不是字符串，如下面的代码所示：
- en: '[PRE25]'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Use your code editor’s **Find** feature to search for `"datetime"` to find all
    the properties that need changing. There should be two in `Employee.cs` and three
    in `Order.cs`.
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用您的代码编辑器的**查找**功能搜索`"datetime"`以查找所有需要更改的属性。在`Employee.cs`中应有两个，在`Order.cs`中应有三个。
- en: 'Change any `money` columns, for example, in `Order.cs`, to use a nullable `decimal`
    instead of a `double`, as shown in the following code:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将任何`money`列，例如在`Order.cs`中，更改为使用可空的`decimal`而不是`double`，如下面的代码所示：
- en: '[PRE26]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Use your code editor’s **Find** feature to search for `"money"` to find all
    the properties that need changing. There should be one in `Order.cs`, one in `Orderdetail.cs`,
    and one in `Product.cs`.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 使用您的代码编辑器的**查找**功能搜索`"money"`以查找所有需要更改的属性。在`Order.cs`中应有一个，在`Orderdetail.cs`中应有一个，在`Product.cs`中应有一个。
- en: 'In `Category.cs`, make the `CategoryName` property required, as shown highlighted
    in the following code:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Category.cs`中，使`CategoryName`属性成为必填项，如下所示，代码中已高亮显示：
- en: '[PRE27]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In `Customer.cs`, add a regular expression to validate its primary key `CustomerId`,
    only allowing uppercase Western characters and making the `CompanyName` property
    required, as shown highlighted in the following code:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Customer.cs`中，添加一个正则表达式来验证其主键`CustomerId`，只允许大写西文字符，并使`CompanyName`属性成为必填项，如下所示，代码中已高亮显示：
- en: '[PRE28]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: In `Order.cs`, decorate the `CustomerId` property with a regular expression
    to enforce five uppercase characters.
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Order.cs`中，用正则表达式装饰`CustomerId`属性以强制五个大写字母。
- en: In `Employee.cs`, make the `FirstName` and `LastName` properties required.
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Employee.cs`中，将`FirstName`和`LastName`属性设置为必需。
- en: In `Product.cs`, make the `ProductName` property required.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Product.cs`中，将`ProductName`属性设置为必需。
- en: In `Shipper.cs`, make the `CompanyName` property required.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Shipper.cs`中，将`CompanyName`属性设置为必需。
- en: In `Supplier.cs`, make the `CompanyName` property required.
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Supplier.cs`中，将`CompanyName`属性设置为必需。
- en: Testing the class libraries
  id: totrans-303
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试类库
- en: Now, let’s build some unit tests to ensure that the class libraries are working
    correctly.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们构建一些单元测试以确保类库正常工作。
- en: '**Warning!** If you are using the SQLite database provider, then when you call
    the `CanConnect` method with a wrong or missing database file, the provider creates
    a `Northwind.db` with 0 bytes! This is why it is so important that, in our `NorthwindContext`
    class, we explicitly check if the database file exists and throw an exception
    when it is instantiated if it does not exist, preventing this behavior.'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告！**如果你使用SQLite数据库提供程序，那么当你使用错误或缺失的数据库文件调用`CanConnect`方法时，提供程序会创建一个0字节的`Northwind.db`！这就是为什么在我们的`NorthwindContext`类中，我们明确检查数据库文件是否存在，并在不存在时抛出异常，以防止这种行为。'
- en: 'Let’s write the tests:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写测试：
- en: Use your preferred coding tool to add a new **xUnit Test Project [C#]** / `xunit`
    project, named `Northwind.UnitTests`, to the `ModernWeb` solution.
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你喜欢的编码工具将新的**xUnit测试项目 [C#]** / `xunit`项目，命名为`Northwind.UnitTests`，添加到`ModernWeb`解决方案中。
- en: 'In the `Northwind.UnitTests` project, add a project reference to the `Northwind.DataContext`
    project for either SQLite or SQL Server, as shown highlighted in the following
    configuration:'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.UnitTests`项目中，为SQLite或SQL Server添加对`Northwind.DataContext`项目的项目引用，如下面配置中突出显示：
- en: '[PRE29]'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '**Warning!** The project reference must go all on one line with no line break.'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告！**项目引用必须全部在一行中，不能有换行符。'
- en: If necessary, delete the version numbers specified for the testing packages
    in the project file. (Visual Studio and other code editors will give errors if
    you have projects that should use CPM but specify their own package versions,
    without using the `VersionOverride` attribute.)
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如有必要，删除项目文件中指定的测试包版本号。（如果你有应该使用CPM的项目但指定了它们自己的包版本，而没有使用`VersionOverride`属性，Visual
    Studio和其他代码编辑器将给出错误。）
- en: Build the `Northwind.UnitTests` project to build referenced projects.
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建项目`Northwind.UnitTests`以构建引用的项目。
- en: Rename `UnitTest1.cs` to `EntityModelTests.cs`.
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`UnitTest1.cs`重命名为`EntityModelTests.cs`。
- en: 'Modify the contents of the file to define two tests, the first to connect to
    the database and the second to confirm that there are eight categories in the
    database, as shown in the following code:'
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改文件内容以定义两个测试，第一个测试连接到数据库，第二个测试确认数据库中有八个类别，如下面的代码所示：
- en: '[PRE30]'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Run the unit tests:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行单元测试：
- en: If you are using Visual Studio, navigate to **Test** | **Run All Tests**, and
    then view the results in **Test Explorer**.
  id: totrans-317
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你使用Visual Studio，请导航到**测试** | **运行所有测试**，然后在**测试资源管理器**中查看结果。
- en: 'If you are using VS Code, in the `Northwind.UnitTests` project’s **TERMINAL**
    window, run the tests with the following command: `dotnet test`. Alternatively,
    use the **TESTING** window if you have installed C# Dev Kit.'
  id: totrans-318
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你使用VS Code，在`Northwind.UnitTests`项目的**终端**窗口中，使用以下命令运行测试：`dotnet test`。或者，如果你已安装C#开发工具包，可以使用**测试**窗口。
- en: 'Note that the results should indicate that three tests ran and all passed,
    as shown in *Figure 12.4*:'
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意，结果应显示三个测试已运行且全部通过，如图*12.4*所示：
- en: '![](img/B22322_12_04.png)'
  id: totrans-320
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B22322_12_04.png)'
- en: 'Figure 12.4: Three successful unit tests ran'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.4：运行了三个成功的单元测试
- en: 'If any of the tests fail, then fix the issue. For example, if you use SQLite,
    then check that the `Northwind.db` file is in the solution directory (one up from
    the project directories). Check the database path in the `northwindlog-<date_time>.txt`
    file in the `book-logs` folder on your desktop, which should output the database
    path it used three times for the three tests, as shown in the following log:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 如果任何测试失败，请修复问题。例如，如果你使用SQLite，那么请检查`Northwind.db`文件是否位于解决方案目录中（位于项目目录之上）。检查你桌面上的`book-logs`文件夹中的`northwindlog-<date_time>.txt`文件中的数据库路径，它应该为三个测试输出三次使用的数据库路径，如下面的日志所示：
- en: '[PRE31]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Finally, in this chapter, let’s review some key concepts about web development,
    enabling us to be better prepared to dive into ASP.NET Core Razor Pages in the
    next chapter.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在本章中，让我们回顾一些关于 Web 开发的关键概念，以便我们为下一章深入探讨 ASP.NET Core Razor Pages 做好更好的准备。
- en: Understanding web development
  id: totrans-325
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Web 开发
- en: Developing for the web means developing with the **Hypertext Transfer Protocol**
    (**HTTP**), so we will start by reviewing this important foundational technology.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 为 Web 开发意味着使用 **超文本传输协议**（**HTTP**）进行开发，因此我们将从回顾这项重要的基础技术开始。
- en: Understanding the Hypertext Transfer Protocol
  id: totrans-327
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解超文本传输协议
- en: To communicate with a web server, the client, also known as the **user agent**,
    makes calls over the network using HTTP. As such, HTTP is the technical underpinning
    of the web. So when we talk about websites and web services, we mean that they
    use HTTP to communicate between a client (often a web browser) and a server.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 为了与 Web 服务器通信，客户端（也称为**用户代理**）通过网络使用 HTTP 进行调用。因此，HTTP 是 Web 的技术基础。所以当我们谈论网站和
    Web 服务时，我们是指它们使用 HTTP 在客户端（通常是 Web 浏览器）和服务器之间进行通信。
- en: 'A client makes an HTTP request to a resource, such as a page, uniquely identified
    by a URL, and the server sends back an HTTP response, as shown in *Figure 12.5*:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端向由 URL 唯一标识的资源（如页面）发出 HTTP 请求，服务器随后返回 HTTP 响应，如图 *12.5* 所示：
- en: '![](img/B22322_12_05.png)'
  id: totrans-330
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B22322_12_05.png)'
- en: 'Figure 12.5: An HTTP request and response'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.5：HTTP 请求和响应
- en: You can use Google Chrome and other browsers to record requests and responses.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 Google Chrome 和其他浏览器来记录请求和响应。
- en: '**Good Practice**: Google Chrome is currently used by about two-thirds of website
    visitors worldwide, and it has powerful, built-in developer tools, so it is a
    good first choice for trying out your websites. Try out your websites with Chrome
    and at least two other browsers, for example, Firefox and Safari for macOS and
    iPhone, respectively. Microsoft Edge switched from using Microsoft’s own rendering
    engine to using Chromium in 2019, so it is less important to try out with it,
    although some say Edge has the best developer tools. If Microsoft’s Internet Explorer
    is used at all, it tends to mostly be inside organizations for intranets.'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：目前全球大约三分之二的网站访客使用的是 Google Chrome，它拥有强大的内置开发者工具，因此它是尝试您的网站时的一个很好的首选。请使用
    Chrome 和至少另外两种浏览器来测试您的网站，例如，对于 macOS 和 iPhone，分别是 Firefox 和 Safari。Microsoft Edge
    在 2019 年从使用微软自己的渲染引擎切换到使用 Chromium，因此使用它进行测试的重要性较低，尽管有些人认为 Edge 拥有最好的开发者工具。如果使用
    Microsoft 的 Internet Explorer，则通常是在组织内部用于内联网。'
- en: Understanding the components of a URL
  id: totrans-334
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 URL 的组件
- en: 'A **URL** is made up of several components:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '**URL** 由几个组件组成：'
- en: '**Scheme**: `http` (clear text) or `https` (encrypted).'
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**方案**：`http`（明文）或 `https`（加密）。'
- en: '**Domain**: For a production website or service, the **top-level domain** (**TLD**)
    might be `example.com`. You might have subdomains such as `www`, `jobs`, or `extranet`.
    During development, you typically use `localhost` for all websites and services.'
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**域名**：对于生产网站或服务，**顶级域名**（**TLD**）可能是 `example.com`。您可能有子域名，如 `www`、`jobs`
    或 `extranet`。在开发过程中，您通常使用 `localhost` 来表示所有网站和服务。'
- en: '**Port number**: For a production website or service, use `80` for `http` and
    `443` for `https`. These port numbers are usually inferred from the scheme. During
    development, other port numbers are commonly used, such as `5000`, `5001`, and
    so on, to differentiate between websites and services that all use the shared
    domain `localhost`.'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**端口号**：对于生产网站或服务，使用 `80` 作为 `http` 的端口号，以及 `443` 作为 `https` 的端口号。这些端口号通常从方案中推断出来。在开发过程中，通常使用其他端口号，例如
    `5000`、`5001` 等，以区分使用共享域名 `localhost` 的网站和服务。'
- en: '**Path**: A relative path to a resource, for example, `/customers/germany`.'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：到资源的相对路径，例如，`/customers/germany`。'
- en: '**Query string**: A way to pass parameter values, for example, `?country=Germany&searchtext=shoes`.'
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**查询字符串**：传递参数值的一种方式，例如，`?country=Germany&searchtext=shoes`。'
- en: '**Fragment**: A reference to an element on a web page using its `id`, for example,
    `#toc`.'
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**片段**：使用其 `id` 对网页上的元素进行引用，例如，`#toc`。'
- en: A URL is a subset of a **Uniform Resource Identifier** (**URI**). A URL specifies
    where a resource is located and how to get it. A URI identifies a resource either
    by the URL or **URN** (**Uniform Resource Name**).
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: URL 是 **统一资源标识符**（**URI**）的一个子集。URL 指定了资源的位置以及如何获取它。URI 通过 URL 或 **URN**（**统一资源名称**）来标识资源。
- en: Using Google Chrome to make HTTP requests
  id: totrans-343
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Google Chrome 进行 HTTP 请求
- en: 'Let’s explore how to use Google Chrome to make HTTP requests:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索如何使用 Google Chrome 来进行 HTTP 请求：
- en: Start Google Chrome.
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Google Chrome。
- en: Navigate to **More tools** | **Developer tools**.
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 **更多工具** | **开发者工具**。
- en: 'Click the **Network** tab, and Chrome should immediately start recording the
    network traffic between your browser and any web servers (note the red circle),
    as shown in *Figure 12.6*:'
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **网络** 选项卡，Chrome 应立即开始记录浏览器与任何 Web 服务器之间的网络流量（注意红色圆圈），如图 *图 12.6* 所示：
- en: '![](img/B22322_12_06.png)'
  id: totrans-348
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B22322_12_06.png)'
- en: 'Figure 12.6: Chrome Developer tools recording network traffic'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.6：Chrome 开发者工具记录网络流量
- en: 'In Chrome’s address box, enter the address of Microsoft’s website for learning
    ASP.NET, which is the following URL:'
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Chrome 的地址框中，输入 Microsoft 学习 ASP.NET 网站的地址，该地址如下：
- en: '[https://dotnet.microsoft.com/en-us/learn/aspnet](https://dotnet.microsoft.com/en-us/learn/aspnet)'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://dotnet.microsoft.com/en-us/learn/aspnet](https://dotnet.microsoft.com/en-us/learn/aspnet)'
- en: 'In **Developer Tools**, in the list of recorded requests, scroll to the top
    and click on the first entry, the row where the **Type** is **document**, as shown
    in *Figure 12.7*:'
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **开发者工具** 中，在记录的请求列表中滚动到顶部并点击第一个条目，即 **类型** 为 **document** 的那一行，如图 *图 12.7*
    所示：
- en: '![](img/B22322_12_07.png)'
  id: totrans-353
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B22322_12_07.png)'
- en: 'Figure 12.7: Recorded requests in Developer Tools'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.7：开发者工具中记录的请求
- en: 'On the right-hand side, click on the **Headers** tab, and you will see details
    about **Request Headers** and **Response Headers**, as shown in *Figure 12.8*:'
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右侧，点击 **头** 选项卡，你将看到 **请求头** 和 **响应头** 的详细信息，如图 *图 12.8* 所示：
- en: '![](img/B22322_12_08.png)'
  id: totrans-356
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B22322_12_08.png)'
- en: 'Figure 12.8: Request and response headers'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.8：请求和响应头
- en: 'Note the following aspects:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 注意以下方面：
- en: '**Request Method** is `GET`. Other HTTP methods that you could see here include
    `POST`, `PUT`, `DELETE`, `HEAD`, and `PATCH`.'
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**请求方法**是 `GET`。你在这里可能看到的其他 HTTP 方法包括 `POST`、`PUT`、`DELETE`、`HEAD` 和 `PATCH`。'
- en: '**Status Code** is `200` OK. This means that the server found the resource
    that the browser requested and has returned it in the body of the response. Other
    status codes that you might see in response to a `GET` request include `301 Moved
    Permanently`, `400 Bad Request`, `401 Unauthorized`, and `404 Not Found`.'
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**状态码** 是 `200` OK。这意味着服务器找到了浏览器请求的资源，并将其返回在响应体中。对 `GET` 请求的响应中可能看到的其他状态码包括
    `301 永久移动`、`400 错误请求`、`401 未授权` 和 `404 未找到`。'
- en: '**Request Headers** sent by the browser to the web server include:'
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浏览器发送给 Web 服务器的 **请求头** 包括：
- en: '`accept`, which lists what formats the browser accepts. In this case, the browser
    is saying it understands HTML, XHTML, XML, and some image formats, but it will
    accept all other files (`*/*`). Default weightings, also known as quality values,
    are `1.0`. XML is specified with a quality value of `0.9`, so it is less preferable
    than HTML or XHTML. All other file types are given a quality value of `0.8` so
    are least preferred.'
  id: totrans-362
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`accept`，列出了浏览器接受的格式。在这种情况下，浏览器表示它理解 HTML、XHTML、XML 和一些图像格式，但它将接受所有其他文件 (`*/*`)。默认权重，也称为质量值，是
    `1.0`。XML 使用质量值 `0.9` 指定，因此不如 HTML 或 XHTML 更受欢迎。所有其他文件类型都赋予质量值 `0.8`，因此最不受欢迎。'
- en: '`accept-encoding`, which lists what compression algorithms the browser understands
    – in this case, GZIP, DEFLATE, and Brotli.'
  id: totrans-363
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`accept-encoding`，列出了浏览器理解的压缩算法 – 在这种情况下，GZIP、DEFLATE 和 Brotli。'
- en: '`accept-language`, which lists the human languages it would prefer the content
    to use – in this case, US English, which has a default quality value of `1.0`;
    any dialect of English, which has an explicitly specified quality value of `0.9`;
    and then any dialect of Swedish, which has an explicitly specified quality value
    of `0.8`.'
  id: totrans-364
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`accept-language`，列出了它希望内容使用的人类语言 – 在这种情况下，美国英语，其默认质量值为 `1.0`；任何英语方言，其明确指定的质量值为
    `0.9`；然后是任何瑞典方言，其明确指定的质量值为 `0.8`。'
- en: '**Response Headers** (`content-encoding)`, which tells me that the server has
    sent back the HTML web page response compressed using the `gzip` algorithm, as
    it knows that the client can decompress that format. (This is not visible in *Figure
    12.8* because there is not enough space to expand the **Response Headers** section.)'
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**响应头** (`content-encoding`) 告诉我，服务器已使用 `gzip` 算法压缩发送回的 HTML 网页响应，因为它知道客户端可以解压缩该格式。（这在
    *图 12.8* 中不可见，因为空间不足以展开 **响应头** 部分。）'
- en: Close Chrome.
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭 Chrome。
- en: Understanding client-side web development technologies
  id: totrans-367
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解客户端 Web 开发技术
- en: 'When building websites, a developer needs to know more than just C# and .NET.
    On the client (that is, in the web browser), you will use a combination of the
    following technologies:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建网站时，开发者需要了解的不仅仅是C#和.NET。在客户端（即在网页浏览器中），你将使用以下技术的组合：
- en: '**HTML5**: This is used for the content and structure of a web page.'
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HTML5**：用于网页的内容和结构。'
- en: '**CSS3**: This is used for the styles applied to elements on the web page.'
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CSS3**：用于网页上元素的样式。'
- en: '**JavaScript**: This is used to code any business logic needed on the web page,
    for example, validating form input or making calls to a web service to fetch more
    data needed by the web page.'
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JavaScript**：用于在网页上编写任何需要的业务逻辑，例如验证表单输入或调用网络服务以获取网页所需的数据。'
- en: 'Although HTML5, CSS3, and JavaScript are the fundamental components of frontend
    web development, there are many additional technologies that can make frontend
    web development more productive, including:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然HTML5、CSS3和JavaScript是前端网站开发的基本组件，但还有许多其他技术可以使前端网站开发更加高效，包括：
- en: '**Bootstrap**, the world’s most popular frontend open source toolkit'
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Bootstrap**，世界上最受欢迎的前端开源工具包'
- en: '**SASS** and **LESS**, CSS preprocessors for styling'
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SASS**和**LESS**，用于样式的CSS预处理器'
- en: Microsoft’s **TypeScript** language for writing more robust code
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于编写更健壮代码的Microsoft的**TypeScript**语言
- en: JavaScript libraries such as **Angular**, **jQuery**, **React**, and **Vue**
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如**Angular**、**jQuery**、**React**和**Vue**等JavaScript库
- en: All these higher-level technologies ultimately translate or compile to the underlying
    three core technologies, so they work across all modern browsers.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些高级技术最终都会转换或编译为底层三个核心技术，因此它们可以在所有现代浏览器中工作。
- en: 'As part of the build and deploy process, you will likely use technologies such
    as:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 作为构建和部署过程的一部分，你可能会使用以下技术：
- en: '**Node.js**, a framework for server-side development using JavaScript'
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Node.js**，一个用于服务器端开发的JavaScript框架'
- en: '**Node Package Manager** (**npm**) and **Yarn**, both client-side package managers'
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Node Package Manager**（**npm**）和**Yarn**，都是客户端包管理器'
- en: '**webpack**, a popular module bundler and a tool for compiling, transforming,
    and bundling website source files'
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**webpack**，一个流行的模块打包器，也是用于编译、转换和打包网站源文件的工具'
- en: Practicing and exploring
  id: totrans-382
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习和探索
- en: Test your knowledge and understanding by answering some questions and exploring
    this chapter’s topics with deeper research.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 通过回答一些问题并深入探讨本章的主题来测试你的知识和理解。
- en: Exercise 12.1 – Online material
  id: totrans-384
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 12.1 – 在线材料
- en: Online materials can be extra content written by me for this book, or it can
    be references to content created by Microsoft or third parties.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 在线材料可以是我为这本书写的额外内容，也可以是Microsoft或第三方创建的内容的引用。
- en: 'One of the best sites for learning client-side web development is W3Schools,
    found at the following link: [https://www.w3schools.com/](https://www.w3schools.com/).'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: W3Schools是学习客户端网站开发的最佳网站之一，链接如下：[https://www.w3schools.com/](https://www.w3schools.com/)
- en: 'A summary of what’s new with ASP.NET Core 9 can be found at the following link:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在以下链接中找到关于ASP.NET Core 9的新功能的总结：
- en: '[https://learn.microsoft.com/en-us/aspnet/core/release-notes/aspnetcore-9.0](https://learn.microsoft.com/en-us/aspnet/core/release-notes/aspnetcore-9.0)'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://learn.microsoft.com/en-us/aspnet/core/release-notes/aspnetcore-9.0](https://learn.microsoft.com/en-us/aspnet/core/release-notes/aspnetcore-9.0)'
- en: 'Microsoft’s official recommendation for how to choose an ASP.NET Core web UI
    can be found here:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在这里找到Microsoft官方推荐的如何选择ASP.NET Core Web UI的建议：
- en: '[https://learn.microsoft.com/en-us/aspnet/core/tutorials/choose-web-ui](https://learn.microsoft.com/en-us/aspnet/core/tutorials/choose-web-ui)'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://learn.microsoft.com/en-us/aspnet/core/tutorials/choose-web-ui](https://learn.microsoft.com/en-us/aspnet/core/tutorials/choose-web-ui)'
- en: 'Microsoft’s official recommendation for ASP.NET Core best practices can be
    found here:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在这里找到Microsoft官方推荐的ASP.NET Core最佳实践的指南：
- en: '[https://learn.microsoft.com/en-us/aspnet/core/fundamentals/best-practices](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/best-practices)'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://learn.microsoft.com/en-us/aspnet/core/fundamentals/best-practices](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/best-practices)'
- en: Exercise 12.2 – Practice exercises
  id: totrans-393
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 12.2 – 实践练习
- en: Practice exercises go deeper into the topics for this chapter.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 实践练习将深入探讨本章的主题。
- en: Troubleshooting web development
  id: totrans-395
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 网站开发故障排除
- en: It is common to have temporary issues with web development because there are
    so many moving parts. Sometimes, variations of the classic “turn it off and on
    again” can fix these!
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 由于网站开发中有许多动态部分，因此出现临时问题是很常见的。有时，经典的“关闭再打开”方法可以解决这些问题！
- en: Delete the project’s `bin` and `release` folders.
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除项目的 `bin` 和 `release` 文件夹。
- en: Restart the web server to clear its caches.
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动 Web 服务器以清除其缓存。
- en: Reboot the computer.
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动计算机。
- en: Exercise 12.3 – Test your knowledge
  id: totrans-400
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 12.3 – 测试你的知识
- en: 'Answer the following questions:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 回答以下问题：
- en: What was the name of Microsoft’s first dynamic server-side-executed web page
    technology, and why is it still useful to know this history today?
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 微软的第一个动态服务器端执行网页技术叫什么名字，为什么今天仍然需要了解这段历史？
- en: What are the names of two Microsoft web servers?
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 两个 Microsoft 网络服务器的名字是什么？
- en: What are some differences between a microservice and a nanoservice?
  id: totrans-404
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 微服务和纳米服务之间有哪些区别？
- en: What is Blazor?
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是 Blazor？
- en: What was the first version of ASP.NET Core that could not be hosted on .NET
    Framework?
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一个不能在 .NET Framework 上托管的 ASP.NET Core 版本是什么？
- en: What is a user agent?
  id: totrans-407
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户代理是什么？
- en: What impact does the HTTP request-response communication model have on web developers?
  id: totrans-408
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: HTTP 请求-响应通信模型对 Web 开发者有什么影响？
- en: Name and describe four components of a URL.
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 描述 URL 的四个组成部分。
- en: What capabilities do developer tools give you?
  id: totrans-410
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开发者工具提供了哪些功能？
- en: What are the three main client-side web development technologies, and what do
    they do?
  id: totrans-411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 三种主要的客户端 Web 开发技术是什么，它们做什么？
- en: Know your webbreviations
  id: totrans-412
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 了解你的网络缩写
- en: What do the following web abbreviations stand for, and what do they do?
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 以下网络缩写代表什么，它们做什么？
- en: URI
  id: totrans-414
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: URI
- en: URL
  id: totrans-415
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: URL
- en: WCF
  id: totrans-416
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: WCF
- en: TLD
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: TLD
- en: API
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: API
- en: SPA
  id: totrans-419
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SPA
- en: CMS
  id: totrans-420
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CMS
- en: Wasm
  id: totrans-421
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Wasm
- en: SASS
  id: totrans-422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SASS
- en: REST
  id: totrans-423
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: REST
- en: Exercise 12.4 – Explore topics
  id: totrans-424
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 12.4 – 探索主题
- en: 'Use the links on the following page to learn more details about the topics
    covered in this chapter:'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 使用下一页上的链接了解本章涵盖主题的更多详细信息：
- en: '[https://github.com/markjprice/cs13net9/blob/main/docs/book-links.md#chapter-12---introducing-web-development-using-aspnet-core](https://github.com/markjprice/cs13net9/blob/main/docs/book-links.md#chapter-12---introducing-web-development-using-aspnet-core)'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/cs13net9/blob/main/docs/book-links.md#chapter-12---introducing-web-development-using-aspnet-core](https://github.com/markjprice/cs13net9/blob/main/docs/book-links.md#chapter-12---introducing-web-development-using-aspnet-core)'
- en: Summary
  id: totrans-427
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, you have:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您已经：
- en: Been introduced to some of the app models that you can use to build websites
    and web services using C# and .NET
  id: totrans-429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已介绍了一些可用于使用 C# 和 .NET 构建网站和 Web 服务的应用程序模型
- en: Created class libraries to define an entity data model for working with the
    Northwind database, using SQLite, SQL Server, or both
  id: totrans-430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建类库以定义用于与 Northwind 数据库一起工作的实体数据模型，使用 SQLite、SQL Server 或两者兼用
- en: 'In the following chapters, you will learn the details of how to build the following:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下章节中，您将学习如何构建以下内容的详细信息：
- en: Simple websites using static HTML pages and dynamically generated Blazor static
    SSR pages
  id: totrans-432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用静态 HTML 页面和动态生成的 Blazor 静态 SSR 页面的简单网站
- en: Blazor user interface components that can be hosted on a web server, in the
    browser, or on hybrid web-native mobile and desktop apps
  id: totrans-433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以托管在 Web 服务器上、浏览器中或混合 Web 原生移动和桌面应用程序上的 Blazor 用户界面组件
- en: Web services that can be called by any platform that can make an HTTP request,
    as well as client websites that call those web services
  id: totrans-434
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以由任何可以发出 HTTP 请求的平台调用的 Web 服务，以及调用这些 Web 服务的客户端网站
- en: Learn more on Discord
  id: totrans-435
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Discord 上了解更多
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the author, and learn about new releases – follow the QR code
    below:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 要加入这本书的 Discord 社区——在那里您可以分享反馈、向作者提问，并了解新版本发布——请扫描下面的二维码：
- en: '[https://packt.link/csharp13dotnet9](https://packt.link/csharp13dotnet9)'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/csharp13dotnet9](https://packt.link/csharp13dotnet9)'
- en: '![](img/QR_Code281224304227278796.png)'
  id: totrans-438
  prefs: []
  type: TYPE_IMG
  zh: '![二维码图片](img/QR_Code281224304227278796.png)'
- en: Leave a Review!
  id: totrans-439
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 留下评论！
- en: Thank you for purchasing this book from Packt Publishing—we hope you enjoy it!
    Your feedback is invaluable and helps us improve and grow. Once you’ve completed
    reading it, please take a moment to leave an Amazon review; it will only take
    a minute, but it makes a big difference for readers like you.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢您从 Packt Publishing 购买这本书——我们希望您喜欢它！您的反馈对我们来说是无价的，它帮助我们改进和成长。一旦您阅读完毕，请花一点时间在亚马逊上留下评论；这只需一分钟，但对像您这样的读者来说意义重大。
- en: Scan the QR or visit the link to receive a free ebook of your choice.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描二维码或访问链接以获得您选择的免费电子书。
- en: '[https://packt.link/NzOWQ](https://packt.link/NzOWQ)'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/NzOWQ](https://packt.link/NzOWQ)'
- en: '![A qr code with black squares  Description automatically generated](img/review1.png)'
  id: totrans-443
  prefs: []
  type: TYPE_IMG
  zh: '![带有黑色方块的二维码，描述自动生成](img/review1.png)'
