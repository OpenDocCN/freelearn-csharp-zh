["```cs\nprotected override Size ArrangeOverride(Size arrangeBounds); \nprotected override Size MeasureOverride(Size availableSize); \nprotected virtual void OnActivated(EventArgs e); \nprotected virtual void OnClosed(EventArgs e); \nprotected virtual void OnClosing(CancelEventArgs e); \nprotected override void OnContentChanged(object oldContent, object newContent); \nprotected virtual void OnContentRendered(EventArgs e); \nprotected override AutomationPeer OnCreateAutomationPeer(); \nprotected virtual void OnDeactivated(EventArgs e); \nprotected virtual void OnLocationChanged(EventArgs e); \nprotected override void \n    OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs e); \nprotected virtual void OnSourceInitialized(EventArgs e); \nprotected virtual void OnStateChanged(EventArgs e); \nprotected internal sealed override void  \n    OnVisualParentChanged(DependencyObject oldParent); \n```", "```cs\nusing System.ComponentModel; \nusing System.Windows; \n\n... \n\nprotected override void OnClosing(CancelEventArgs e) \n{ \n  base.OnClosing(e); \n  MessageBoxResult result = MessageBox.Show(\"Are you sure you want to close?\", \n    \"Close Confirmation\", MessageBoxButton.OKCancel, MessageBoxImage.Question); \n  e.Cancel = result == MessageBoxResult.Cancel; \n} \n```", "```cs\nprotected override void OnContentChanged(object oldContent, object newContent) \n{ \n    base.OnContentChanged(oldContent, newContent); \n\n    SetIWindowService(); \n    if (IsLoaded == true) \n    { \n        PostContentRendered(); \n    } \n    else \n    { \n        if (_postContentRenderedFromLoadedHandler == false) \n        { \n            this.Loaded += new RoutedEventHandler(LoadedHandler); \n            _postContentRenderedFromLoadedHandler = true; \n        } \n    } \n} \n```", "```cs\nprotected virtual void AddChild(object value); \nprotected virtual void AddText(string text); \nprotected virtual void OnContentChanged(object oldContent, object newContent); \nprotected virtual void OnContentStringFormatChanged(string oldContentStringFormat, string newContentStringFormat); \nprotected virtual void OnContentTemplateChanged(DataTemplate oldContentTemplate, DataTemplate newContentTemplate); \nprotected virtual void OnContentTemplateSelectorChanged(DataTemplateSelector oldContentTemplateSelector, DataTemplateSelector newContentTemplateSelector); \n```", "```cs\nprotected override Size ArrangeOverride(Size arrangeBounds); \nprotected override Size MeasureOverride(Size constraint); \nprotected virtual void OnMouseDoubleClick(MouseButtonEventArgs e); \nprotected virtual void OnPreviewMouseDoubleClick(MouseButtonEventArgs e); \nprotected virtual void OnTemplateChanged(ControlTemplate oldTemplate, ControlTemplate newTemplate); \n```", "```cs\nprotected virtual Size ArrangeOverride(Size finalSize); \nprotected override Geometry GetLayoutClip(Size layoutSlotSize); \nprotected override Visual GetVisualChild(int index); \nprotected virtual Size MeasureOverride(Size availableSize); \nprotected virtual void OnContextMenuClosing(ContextMenuEventArgs e); \nprotected virtual void OnContextMenuOpening(ContextMenuEventArgs e); \nprotected override void OnGotFocus(RoutedEventArgs e); \nprotected virtual void OnInitialized(EventArgs e); \nprotected override void OnPropertyChanged(DependencyPropertyChangedEventArgs e); \nprotected virtual void OnToolTipClosing(ToolTipEventArgs e); \nprotected virtual void OnToolTipOpening(ToolTipEventArgs e); \n```", "```cs\n<Rectangle Fill=\"Salmon\" Width=\"150\" Height=\"100\" RadiusX=\"25\" RadiusY=\"50\"> \n  <Rectangle.Clip> \n    <EllipseGeometry Center=\"150,50\" RadiusX=\"150\" RadiusY=\"50\" /> \n  </Rectangle.Clip> \n</Rectangle> \n```", "```cs\n<TextBlock x:Class=\"CompanyName.ApplicationName.Views.Controls.BoundlessTextBlock\" \n\n   /> \n```", "```cs\nusing System.Windows; \nusing System.Windows.Controls; \nusing System.Windows.Media; \n\nnamespace CompanyName.ApplicationName.Views.Controls \n{ \n  public partial class BoundlessTextBlock : TextBlock \n  { \n    public BoundlessTextBlock() \n    { \n      InitializeComponent(); \n    } \n\n    protected override Geometry GetLayoutClip(Size layoutSlotSize) \n    { \n      return new EllipseGeometry(new Rect(new Size(150, 22))); \n    } \n  } \n} \n```", "```cs\n\n... \n\n<Border BorderBrush=\"Black\" BorderThickness=\"1\" HorizontalAlignment=\"Center\" \n  VerticalAlignment=\"Center\" SnapsToDevicePixels=\"True\"> \n  <Controls:BoundlessTextBlock Text=\"Can you see what has happened?\" \n    Background=\"Aqua\" FontSize=\"14\" Width=\"150\" Height=\"22\" /> \n</Border> \n```", "```cs\nreturn new EllipseGeometry(new Rect(new Size(205, 22)));\n```", "```cs\nprotected override Geometry GetLayoutClip(Size layoutSlotSize) \n{ \n  return null; \n} \n```", "```cs\npublic bool IsItemItsOwnContainer(object item) \n{ \n  return IsItemItsOwnContainerOverride(item); \n} \n```", "```cs\nprotected virtual bool IsItemItsOwnContainerOverride(object item) \n{ \n  return (item is UIElement); \n} \n```", "```cs\nDependencyObject container; \n\nif (IsItemItsOwnContainerOverride(item)) \n  container = item as DependencyObject; \nelse \n  container = GetContainerForItemOverride(); \n```", "```cs\n<UserControl \n  x:Class=\"CompanyName.ApplicationName.Views.ForcedContainerItemsControlView\" \n\n  Height=\"175\" Width=\"287\"> \n  <Grid> \n    <Grid.Resources> \n      <ItemsPanelTemplate x:Key=\"HorizontalPanelTemplate\"> \n        <StackPanel Orientation=\"Horizontal\" /> \n      </ItemsPanelTemplate> \n      <Style TargetType=\"{x:Type Rectangle}\"> \n        <Setter Property=\"Width\" Value=\"75\" /> \n        <Setter Property=\"Height\" Value=\"75\" /> \n        <Setter Property=\"RadiusX\" Value=\"15\" /> \n        <Setter Property=\"RadiusY\" Value=\"15\" /> \n      </Style> \n    </Grid.Resources> \n    <Grid.RowDefinitions> \n      <RowDefinition Height=\"Auto\" /> \n      <RowDefinition /> \n    </Grid.RowDefinitions> \n    <ListBox Name=\"ListBox\" Height=\"105\" Margin=\"20,20,20,0\"\n      ItemsPanel=\"{StaticResource HorizontalPanelTemplate}\"> \n      <Rectangle Fill=\"Red\" /> \n      <Rectangle Fill=\"Orange\" /> \n      <Rectangle Fill=\"Green\" /> \n    </ListBox> \n  </Grid> \n</UserControl> \n```", "```cs\n<DataTemplate x:Key=\"EllipseDataTemplate\" DataType=\"{x:Type UIElement}\"> \n  <Ellipse Width=\"16\" Height=\"16\" \n    Stroke=\"Gray\" StrokeThickness=\"2\" Margin=\"4\" /> \n</DataTemplate> \n\n... \n\n<ItemsControl Grid.Row=\"1\" ItemsSource=\"{Binding Items, ElementName=ListBox}\" \n  ItemsPanel=\"{StaticResource HorizontalPanelTemplate}\" \n  ItemTemplate=\"{StaticResource EllipseDataTemplate}\" \n  HorizontalAlignment=\"Center\" /> \n```", "```cs\nMust disconnect the specified child from current parent Visual before attaching to new parent Visual.\n```", "```cs\nusing System.Windows.Controls; \n\nnamespace CompanyName.ApplicationName.Views.Controls \n{ \n  public class ForcedContainerItemsControl : ItemsControl \n  { \n protected override bool IsItemItsOwnContainerOverride(object item) \n    { \n      return false; \n    } \n  } \n} \n```", "```cs\n<Controls:ForcedContainerItemsControl Grid.Row=\"1\" \n  ItemsSource=\"{Binding Items, ElementName=ListBox}\" \n  ItemsPanel=\"{StaticResource HorizontalPanelTemplate}\" \n  ItemTemplate=\"{StaticResource EllipseDataTemplate}\" \n  HorizontalAlignment=\"Center\" Height=\"32\" /> \n```", "```cs\nprotected override bool IsItemItsOwnContainerOverride(object item)  \n{  \n  return (item is ListBoxItem); \n} \n```", "```cs\n<Style x:Key=\"HiddenListBoxItems\" TargetType=\"{x:Type ListBoxItem}\"> \n  <Setter Property=\"Template\"> \n    <Setter.Value> \n      <ControlTemplate TargetType=\"{x:Type ListBoxItem}\"> \n        <ContentPresenter /> \n      </ControlTemplate> \n    </Setter.Value> \n  </Setter> \n</Style> \n<Style x:Key=\"HiddenListBox\" TargetType=\"{x:Type ListBox}\"> \n  <Setter Property=\"Template\"> \n    <Setter.Value> \n      <ControlTemplate TargetType=\"{x:Type ListBox}\"> \n        <ScrollViewer> \n          <ItemsPresenter SnapsToDevicePixels=\"{TemplateBinding \n            SnapsToDevicePixels}\" /> \n        </ScrollViewer> \n      </ControlTemplate> \n    </Setter.Value> \n  </Setter> \n</Style> \n```", "```cs\n<DataTemplate x:Key=\"EllipseDataTemplate\" DataType=\"{x:Type UIElement}\"> \n  <Ellipse Width=\"16\" Height=\"16\" Stroke=\"Gray\" StrokeThickness=\"2\" \n    Margin=\"8\"> \n    <Ellipse.Style> \n      <Style TargetType=\"{x:Type Ellipse}\"> \n        <Setter Property=\"Fill\" Value=\"Transparent\" /> \n        <Style.Triggers> \n          <DataTrigger Binding=\"{Binding IsSelected, \n            RelativeSource={RelativeSource \n            AncestorType={x:Type ListBoxItem}}}\" Value=\"True\"> \n            <Setter Property=\"Fill\" Value=\"LightGray\" /> \n          </DataTrigger> \n        </Style.Triggers> \n      </Style> \n    </Ellipse.Style> \n  </Ellipse> \n</DataTemplate> \n```", "```cs\n<ListBox Grid.Row=\"1\" ItemsSource=\"{Binding Items, ElementName=ListBox}\" \n  ItemsPanel=\"{StaticResource HorizontalPanelTemplate}\" \n  ItemTemplate=\"{StaticResource EllipseDataTemplate}\" \n  SelectedItem=\"{Binding SelectedItem, ElementName=ListBox}\" \n  Style=\"{StaticResource HiddenListBox}\" \n  ItemContainerStyle=\"{StaticResource HiddenListBoxItems}\" \n  HorizontalAlignment=\"Center\" /> \n```", "```cs\nprivate void DragSourcePreviewMouseMove(object sender, MouseEventArgs e) \n{ \n  if (_isMouseDown && IsConfirmedDrag(e.GetPosition(sender as ListBox))) \n  { \n    _isMouseDown = false; \n    OnDragSourcePreviewMouseMove(sender, e); \n    if (e.Handled) return; \n    OnDragStart(sender as UIElement); \n  } \n} \n\nprotected virtual void \n  OnDragSourcePreviewMouseMove(object sender, MouseEventArgs e) { } \n\nprotected abstract void OnDragStart(UIElement uiElement); \n```", "```cs\nThe event ClassName.EventName can only appear on the left hand side of += or -= (except when used from within the type ClassName)\n```", "```cs\npublic class AddressEventArgs : EventArgs \n{ \n  public AddressEventArgs(Address oldAddress, Address newAddress) \n  { \n    OldAddress = oldAddress; \n    NewAddress = newAddress; \n  } \n\n  public Address OldAddress { get; } \n\n  public Address NewAddress { get; } \n} \n\n... \n\npublic event EventHandler<AddressEventArgs> AddressChanged;  \n\n... \n\npublic virtual Address Address \n{ \n  get { return (Address)GetValue(AddressProperty); } \n  set \n  { \n    if (!Address.Equals(value)) \n    { \n      Address oldAddress = Address; \n      SetValue(AddressProperty, value); \n      OnAddressChanged(new AddressEventArgs(oldAddress, value)); \n    } \n  } \n} \n\n... \n\nprotected virtual void OnAddressChanged(AddressEventArgs e) \n{ \n  AddressChanged?.Invoke(this, e); \n} \n```", "```cs\nusing System.Windows.Controls; \n\nnamespace CompanyName.ApplicationName.Views.Controls \n{ \n  public partial class Spreadsheet : DataGrid \n  { \n    public Spreadsheet() \n    { \n      InitializeComponent(); \n    } \n  } \n} \n```", "```cs\n<DataGrid x:Class=\"CompanyName.ApplicationName.Views.Controls.Spreadsheet\" \n\n  AutoGenerateColumns=\"False\" SelectionUnit=\"Cell\" SelectionMode=\"Single\" \n  IsReadOnly=\"True\" RowHeight=\"20\" RowHeaderWidth=\"26\" ColumnHeaderHeight=\"26\"\n  CanUserAddRows=\"False\" CanUserDeleteRows=\"False\" CanUserReorderColumns=\"False\"\n  CanUserResizeColumns=\"False\" CanUserResizeRows=\"False\" \n  HorizontalGridLinesBrush=\"{DynamicResource GridlinesBrush}\" \n  VerticalGridLinesBrush=\"{DynamicResource GridlinesBrush}\" \n  BorderBrush=\"{DynamicResource BorderBrush}\"> \n  <DataGrid.Resources> \n    <Color x:Key=\"BackgroundColor\">#FFE6E6E6</Color> \n    <Color x:Key=\"BorderColor\">#FF999999</Color> \n    <SolidColorBrush x:Key=\"BackgroundBrush\" Color=\"{StaticResource BackgroundColor}\" /> \n    <SolidColorBrush x:Key=\"BorderBrush\" Color=\"{StaticResource BorderColor}\" /> \n    <SolidColorBrush x:Key=\"SelectedBackgroundBrush\" Color=\"#FFD2D2D2\" /> \n    <SolidColorBrush x:Key=\"GridlinesBrush\" Color=\"#FFD4D4D4\" /> \n    <SolidColorBrush x:Key=\"SelectionBrush\" Color=\"#FF217346\" /> \n  </DataGrid.Resources> \n</DataGrid> \n```", "```cs\nSystem.InvalidOperationException: 'Items collection must be empty before using ItemsSource.'\n```", "```cs\nnamespace CompanyName.ApplicationName.DataModels\n{\n  public class Cell : BaseDataModel\n  {\n    private string address = string.Empty, content = string.Empty;\n    private double width = 0;\n\n    public Cell(string address, string content, double width)\n    {\n      Address = address;\n      Content = content;\n      Width = width;\n    }\n\n    public string Address\n    {\n      get { return address; }\n      set { if (address != value) { address = value; \n        NotifyPropertyChanged(); } }\n    }\n\n    public string Content\n    {\n      get { return content; }\n      set { if (content != value) { content = value; \n        NotifyPropertyChanged(); } }\n    }\n\n    public double Width\n    {\n      get { return width; }\n      set { if (width != value) { width = value; NotifyPropertyChanged(); } }\n    }\n\n    public override string ToString()\n    {\n      return $\"{Address}: {Content}\";\n    }\n  }\n} \n```", "```cs\nusing CompanyName.ApplicationName.DataModels; \nusing System.Data; \n\nnamespace CompanyName.ApplicationName.ViewModels \n{ \n  public class SpreadsheetViewModel : BaseViewModel \n  { \n    private DataRowCollection dataRowCollection = null; \n\n    public SpreadsheetViewModel() \n    { \n      Cell[] Cells = new Cell[9]; \n      Cells[0] = new Cell(\"A1\", \"\", 64); \n      Cells[1] = new Cell(\"B1\", \"\", 96); \n      Cells[2] = new Cell(\"C1\", \"\", 64); \n      Cells[3] = new Cell(\"A2\", \"\", 64); \n      Cells[4] = new Cell(\"B2\", \"Hello World\", 96); \n      Cells[5] = new Cell(\"C2\", \"\", 64); \n      Cells[6] = new Cell(\"A3\", \"\", 64); \n      Cells[7] = new Cell(\"B3\", \"\", 96); \n      Cells[8] = new Cell(\"C3\", \"\", 64); \n\n      DataTable table = new DataTable(); \n      table.Columns.Add(\"A\", typeof(Cell)); \n      table.Columns.Add(\"B\", typeof(Cell)); \n      table.Columns.Add(\"C\", typeof(Cell)); \n      table.Rows.Add(Cells[0], Cells[1], Cells[2]); \n      table.Rows.Add(Cells[3], Cells[4], Cells[5]); \n      table.Rows.Add(Cells[6], Cells[7], Cells[8]); \n\n      Rows = table.Rows; \n    } \n\n    public DataRowCollection Rows \n    { \n      get { return dataRowCollection; } \n      set { if (dataRowCollection != value) { dataRowCollection = value; \n        NotifyPropertyChanged(); } } \n    } \n  } \n}\n```", "```cs\n<UserControl x:Class=\"CompanyName.ApplicationName.Views.SpreadsheetView\" \n\n  > \n  <Controls:Spreadsheet ItemsSource=\"{Binding Rows}\" Margin=\"50\" /> \n</UserControl> \n```", "```cs\n\n... \n<DataTemplate x:Key=\"CellTemplate\" DataType=\"{x:Type DataModels:Cell}\"> \n  <TextBlock Text=\"{Binding Content}\" HorizontalAlignment=\"Center\" \n    VerticalAlignment=\"Center\" /> \n</DataTemplate> \n```", "```cs\nusing System.Windows; \nusing System.Windows.Controls; \nusing System.Windows.Data; \n\nnamespace CompanyName.ApplicationName.Views.Controls \n{ \n  public class DataGridBoundTemplateColumn : DataGridTemplateColumn \n  { \n    public Binding Binding { get; set; } \n\n    protected override FrameworkElement GenerateElement(DataGridCell cell,\n      object dataItem) \n    { \n      FrameworkElement element = base.GenerateElement(cell, dataItem); \n      if (Binding != null) \n        element.SetBinding(ContentPresenter.ContentProperty, Binding); \n      return element; \n    } \n  } \n} \n```", "```cs\nusing CompanyName.ApplicationName.DataModels; \nusing System.Collections; \nusing System.Data; \nusing System.Linq; \nusing System.Windows; \nusing System.Windows.Controls; \nusing System.Windows.Data; \n\n... \n\nprotected override void OnItemsSourceChanged(IEnumerable oldValue, \n  IEnumerable newValue) \n{ \n  if (!(newValue is DataRowCollection rows) || rows.Count == 0) return; \n  Cell[] cells = rows[0].ItemArray.Cast<Cell>().ToArray(); \n  Columns.Clear(); \n  DataTemplate cellTemplate = (DataTemplate)FindResource(\"CellTemplate\"); \n  for (int i = 0; i < cells.Length; i++) \n  { \n    DataGridBoundTemplateColumn column = new DataGridBoundTemplateColumn \n    { \n      Header = GetColumnName(i + 1), \n      CellTemplate = cellTemplate, \n      Binding = new Binding($\"[{i}]\"), \n      Width = cells[i].Width \n    }; \n    Columns.Add(column); \n  } \n} \n\nprivate string GetColumnName(int index) \n{ \n    if (index <= 26) return ((char)(index + 64)).ToString(); \n    if (index % 26 == 0) \n      return string.Concat(GetColumnName(index / 26 - 1), \"Z\"); \n    return string.Concat(GetColumnName(index / 26), \n      GetColumnName(index % 26)); \n} \n```", "```cs\nusing System; \nusing System.Globalization; \nusing System.Windows; \nusing System.Windows.Controls; \nusing System.Windows.Data; \n\nnamespace CompanyName.ApplicationName.Converters \n{ \n[ValueConversion(typeof(DataGridRow), typeof(int))] \n  public class DataGridRowToRowNumberConverter : IValueConverter \n  { \n    public object Convert(object value, Type targetType, object parameter,\n      CultureInfo culture) \n    { \n      if (value is DataGridRow dataGridRow) \n        return dataGridRow.GetIndex() + 1; \n      return DependencyProperty.UnsetValue; \n    } \n\n    public object ConvertBack(object value, Type targetType, \n      object parameter, CultureInfo culture) \n    { \n      throw new NotImplementedException(); \n    } \n  } \n} \n```", "```cs\n\n... \n\n<Converters:DataGridRowToRowNumberConverter \n  x:Key=\"DataGridRowToRowNumberConverter\" /> \n```", "```cs\n<DataGrid.RowHeaderTemplate> \n  <DataTemplate> \n    <TextBlock Text=\"{Binding Path = ., \n      RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}, \n      Converter={StaticResource DataGridRowToRowNumberConverter}}\" /> \n  </DataTemplate> \n</DataGrid.RowHeaderTemplate> \n```", "```cs\nCannot find resource named 'DataGridRowToRowNumberConverter'. Resource names are case sensitive.\n```", "```cs\n<!--Default Selection Colors--> \n<SolidColorBrush \n  x:Key=\"{x:Static SystemColors.HighlightBrushKey}\" Color=\"Transparent\" /> \n<SolidColorBrush \n  x:Key=\"{x:Static SystemColors.HighlightTextBrushKey}\" Color=\"Black\" /> \n<SolidColorBrush \n  x:Key=\"{x:Static DataGrid.FocusBorderBrushKey}\" Color=\"Transparent\" /> \n<SolidColorBrush x:Key=\"{x:Static \n  SystemColors.InactiveSelectionHighlightBrushKey}\" Color=\"Transparent\" /> \n<LinearGradientBrush x:Key=\"HorizontalBorderGradient\" StartPoint=\"0,0\"\n  EndPoint=\"0,1\"> \n  <GradientStop Color=\"{StaticResource BackgroundColor}\" /> \n  <GradientStop Color=\"{StaticResource BorderColor}\" Offset=\"1\" /> \n</LinearGradientBrush> \n<LinearGradientBrush x:Key=\"VerticalBorderGradient\" StartPoint=\"0,0\"\n  EndPoint=\"1,0\"> \n  <GradientStop Color=\"{StaticResource BackgroundColor}\" /> \n  <GradientStop Color=\"{StaticResource BorderColor}\" Offset=\"1\" /> \n</LinearGradientBrush> \n<LinearGradientBrush x:Key=\"DiagonalBorderGradient\" StartPoint=\"0.2,0\" \n  EndPoint=\"1,1\"> \n  <GradientStop Color=\"{StaticResource BackgroundColor}\" Offset=\"0.45\" /> \n  <GradientStop Color=\"{StaticResource BorderColor}\" Offset=\"1\" /> \n</LinearGradientBrush> \n\n... \n\n<Style TargetType=\"{x:Type DataGridRowHeader}\"> \n  <Setter Property=\"Background\" \n    Value=\"{StaticResource BackgroundBrush}\" /> \n  <Setter Property=\"BorderThickness\" Value=\"0,0,1,1\" /> \n  <Setter Property=\"BorderBrush\" \n    Value=\"{StaticResource VerticalBorderGradient}\" /> \n  <Setter Property=\"Padding\" Value=\"4,0\" /> \n  <Setter Property=\"HorizontalContentAlignment\" Value=\"Center\" /> \n  <Setter Property=\"FontSize\" Value=\"13\" /> \n</Style> \n<Style TargetType=\"{x:Type DataGridColumnHeader}\"> \n  <Setter Property=\"Background\" \n    Value=\"{StaticResource BackgroundBrush}\" /> \n  <Setter Property=\"BorderThickness\" Value=\"0,0,1,1\" /> \n  <Setter Property=\"BorderBrush\" \n    Value=\"{StaticResource HorizontalBorderGradient}\" /> \n  <Setter Property=\"Padding\" Value=\"0\" /> \n  <Setter Property=\"HorizontalContentAlignment\" Value=\"Center\" /> \n  <Setter Property=\"FontSize\" Value=\"13\" /> \n</Style> \n```", "```cs\nusing System; \nusing System.Data; \nusing System.Globalization; \nusing System.Linq; \nusing System.Windows.Data; \n\nnamespace CompanyName.ApplicationName.Converters \n{ \n  public class DataGridRowHeaderSelectionMultiConverter : \n    IMultiValueConverter \n  { \n    public object Convert(object[] values, Type targetType, \n      object parameter, CultureInfo culture) \n    { \n      if (values == null || values.Count() != 2 || \n        !(values[0] is DataRow selectedDataRow) || \n        !(values[1] is DataRow dataRowToCompare)) return false; \n      return selectedDataRow.Equals(dataRowToCompare); \n    } \n\n    public object[] ConvertBack(object value, Type[] targetTypes, \n      object parameter, CultureInfo culture) \n    { \n      throw new NotImplementedException(); \n    } \n  } \n} \n```", "```cs\n<Converters:DataGridRowHeaderSelectionMultiConverter \n  x:Key=\"DataGridRowHeaderSelectionMultiConverter\" /> \n```", "```cs\n<ControlTemplate x:Key=\"DataGridRowHeaderControlTemplate\" \n  TargetType=\"{x:Type DataGridRowHeader}\"> \n  <Grid> \n    <Themes:DataGridHeaderBorder Name=\"Border\" \n      IsHitTestVisible=\"False\" ... > \n      <ContentPresenter ... HorizontalAlignment=\"{TemplateBinding \n        HorizontalContentAlignment}\" /> \n    </Themes:DataGridHeaderBorder> \n    <Rectangle Name=\"ColorSelectionBar\" Fill=\"Transparent\" \n      IsHitTestVisible=\"False\" VerticalAlignment=\"Stretch\" \n      HorizontalAlignment=\"Right\" Width=\"2\" Margin=\"0,-1,0,0\" /> \n    ... \n  </Grid> \n  <ControlTemplate.Triggers> \n    <DataTrigger Value=\"True\"> \n      <DataTrigger.Binding> \n        <MultiBinding Converter=\"{StaticResource \n          DataGridRowHeaderSelectionMultiConverter}\"> \n          <Binding Path=\"CurrentCell.Item\" RelativeSource=\"{RelativeSource \n            AncestorType={x:Type DataGrid}}\" /> \n          <Binding /> \n        </MultiBinding> \n      </DataTrigger.Binding> \n      <Setter Property=\"Foreground\" \n        Value=\"{StaticResource SelectionBrush}\" /> \n      <Setter TargetName=\"ColorSelectionBar\" Property=\"Fill\" \n        Value=\"{StaticResource SelectionBrush}\" /> \n      <Setter TargetName=\"Border\" Property=\"Background\" \n        Value=\"{StaticResource SelectedBackgroundBrush}\" /> \n    </DataTrigger> \n  </ControlTemplate.Triggers> \n</ControlTemplate>\n```", "```cs\n<Setter Property=\"Template\" \n  Value =\"{StaticResource DataGridRowHeaderControlTemplate}\" /> \n```", "```cs\nusing System; \nusing System.Globalization; \nusing System.Linq; \nusing System.Windows; \nusing System.Windows.Data; \n\nnamespace CompanyName.ApplicationName.Converters \n{ \n  public class DataGridColumnHeaderSelectionMultiConverter : \n    IMultiValueConverter \n  { \n    public object Convert(object[] values, Type targetType, \n      object parameter, CultureInfo culture) \n    { \n      if (values == null || values.Count() != 2 || \n        values.Any(v => v == null || v == DependencyProperty.UnsetValue))\n        return false; \n      string selectedColumnHeader = values[0].ToString(); \n      string columnHeaderToCompare = values[1].ToString(); \n      return selectedColumnHeader.Equals(columnHeaderToCompare); \n    } \n\n    public object[] ConvertBack(object value, Type[] targetTypes, \n      object parameter, CultureInfo culture) \n    { \n      throw new NotImplementedException(); \n    } \n  } \n}\n```", "```cs\n<Converters:DataGridColumnHeaderSelectionMultiConverter\n  x:Key=\"DataGridColumnHeaderSelectionMultiConverter\" /> \n```", "```cs\n<ControlTemplate x:Key=\"DataGridColumnHeaderControlTemplate\" \n  TargetType=\"{x:Type DataGridColumnHeader}\"> \n  <Grid> \n    <Themes:DataGridHeaderBorder Name=\"Border\" ... /> \n    <Rectangle Name=\"ColorSelectionBar\" Fill=\"Transparent\" \n      IsHitTestVisible=\"False\" HorizontalAlignment=\"Stretch\" \n      VerticalAlignment=\"Bottom\" Height=\"2\" Margin=\"-1,0,0,0\" /> \n    ... \n  </Grid> \n  <ControlTemplate.Triggers> \n    <DataTrigger Value=\"True\"> \n      <DataTrigger.Binding> \n        <MultiBinding Converter=\"{StaticResource \n          DataGridColumnHeaderSelectionMultiConverter}\"> \n          <Binding Path=\"CurrentCell.Column.Header\" RelativeSource=\"{\n            RelativeSource AncestorType={x:Type DataGrid}}\" /> \n          <Binding Path=\"Content\" RelativeSource=\"{RelativeSource Self}\" /> \n        </MultiBinding> \n      </DataTrigger.Binding> \n      <Setter Property=\"Foreground\" \n        Value=\"{StaticResource SelectionBrush}\" /> \n      <Setter TargetName=\"ColorSelectionBar\" Property=\"Fill\" \n        Value=\"{StaticResource SelectionBrush}\" /> \n      <Setter TargetName=\"Border\" Property=\"Background\" \n        Value=\"{StaticResource SelectedBackgroundBrush}\" /> \n    </DataTrigger> \n  </ControlTemplate.Triggers> \n</ControlTemplate> \n```", "```cs\n<Setter Property=\"Template\" \n  Value =\"{StaticResource DataGridColumnHeaderControlTemplate}\" /> \n```", "```cs\n<ControlTemplate x:Key=\"SelectAllButtonControlTemplate\" \n  TargetType=\"{x:Type Button}\"> \n  <Border BorderThickness=\"0,0,1,1\" BorderBrush=\"{StaticResource \n    DiagonalBorderGradient}\" Background=\"{StaticResource BackgroundBrush}\"> \n    <Polygon Fill=\"#FFB3B3B3\" Points=\"0,12 12,12 12,0\" \n      HorizontalAlignment=\"Right\" VerticalAlignment=\"Bottom\" \n      Stretch=\"Uniform\" Margin=\"10,3,3,3\" /> \n  </Border> \n</ControlTemplate> \n```", "```cs\n<ControlTemplate x:Key=\"ScrollViewerControlTemplate\" \n  TargetType=\"{x:Type ScrollViewer}\"> \n  <Grid> \n    ... \n    <Button Command=\"ApplicationCommands.SelectAll\" \n      Focusable=\"False\" Width=\"26\" Height=\"26\" \n      Template=\"{StaticResource SelectAllButtonControlTemplate}\" /> \n    ... \n    <ScrollContentPresenter x:Name=\"PART_ScrollContentPresenter\" ... /> \n    <Border Grid.Row=\"1\" Grid.Column=\"1\" ClipToBounds=\"True\" \n      BorderThickness=\"0\" IsHitTestVisible=\"False\" Margin=\"-2\"> \n      <Canvas Name=\"SelectionRectangleCanvas\" Background=\"{x:Null}\" \n        IsHitTestVisible=\"False\" RenderTransformOrigin=\"0.5,0.5\" \n        Margin=\"2\" /> \n    </Border> \n    <ScrollBar x:Name=\"PART_VerticalScrollBar\" ... /> \n    ... \n  </Grid> \n</ControlTemplate> \n```", "```cs\n<ControlTemplate x:Key=\"DataGridControlTemplate\" \n  TargetType=\"{x:Type DataGrid}\"> \n  <Border ... > \n    <ScrollViewer x:Name=\"DG_ScrollViewer\" Focusable=\"False\" \n      CanContentScroll=\"False\" \n      Template=\"{StaticResource ScrollViewerControlTemplate}\"> \n      <ItemsPresenter \n        SnapsToDevicePixels=\"{TemplateBinding SnapsToDevicePixels}\" /> \n    </ScrollViewer> \n  </Border> \n</ControlTemplate>\n```", "```cs\n<DataGrid \n  x:Class=\"CompanyName.ApplicationName.Views.Controls.Spreadsheet\" ... \n  Template=\"{DynamicResource DataGridControlTemplate}\"> \n  ... \n</DataGrid> \n```", "```cs\nprivate ScrollViewer scrollViewer; \n\n... \n\npublic override void OnApplyTemplate() \n{ \n  scrollViewer = Template.FindName(\"DG_ScrollViewer\", this) as ScrollViewer; \n} \n```", "```cs\nprivate Canvas selectionRectangleCanvas; \n\n... \n\nprivate void SpreadsheetScrollViewer_ScrollChanged(object sender, \n  ScrollChangedEventArgs e) \n{ \n    if (selectionRectangleCanvas == null) GetCanvasReference(); \n} \n\nprivate void GetCanvasReference() \n{ \n    ControlTemplate scrollViewerControlTemplate = scrollViewer.Template; \n    selectionRectangleCanvas = scrollViewerControlTemplate.\n      FindName(\"SelectionRectangleCanvas\", scrollViewer) as Canvas; \n    selectionRectangleCanvas.RenderTransform = new TranslateTransform(); \n} \n```", "```cs\n<ScrollViewer x:Name=\"DG_ScrollViewer\" ... \n  ScrollChanged=\"SpreadsheetScrollViewer_ScrollChanged\"> \n```", "```cs\nusing System; \nusing System.Windows.Media; \nusing System.Windows.Media.Animation; \nusing System.Windows.Shapes; \n\n... \n\nprivate Rectangle selectionRectangle; \nprivate bool isSelectionRectangleInitialized = false; \n\n... \n\nprivate void UpdateSelectionRectangle(Point startPosition, \n  Point endPosition) \n{ \n  TimeSpan duration = TimeSpan.FromMilliseconds(150); \n  if (!isSelectionRectangleInitialized) \n    InitializeSelectionRectangle(startPosition, endPosition); \n  else \n  { \n    selectionRectangle.BeginAnimation(WidthProperty, new DoubleAnimation(\n      endPosition.X - startPosition.X, duration), HandoffBehavior.Compose); \n    selectionRectangle.BeginAnimation(HeightProperty, new DoubleAnimation(\n      endPosition.Y - startPosition.Y, duration), HandoffBehavior.Compose); \n  } \n  TranslateTransform translateTransform = \n    selectionRectangle.RenderTransform as TranslateTransform; \n  translateTransform.BeginAnimation(TranslateTransform.XProperty, \n    new DoubleAnimation(startPosition.X - RowHeaderWidth + \n    scrollViewer.HorizontalOffset, duration), HandoffBehavior.Compose); \n  translateTransform.BeginAnimation(TranslateTransform.YProperty, \n    new DoubleAnimation(startPosition.Y - ColumnHeaderHeight + \n    scrollViewer.VerticalOffset, duration), HandoffBehavior.Compose); \n} \n\nprivate void InitializeSelectionRectangle(Point startPosition, \n  Point endPosition) \n{ \n  selectionRectangle = new Rectangle(); \n  selectionRectangle.Width = endPosition.X - startPosition.X; \n  selectionRectangle.Height = endPosition.Y - startPosition.Y; \n  selectionRectangle.Stroke = \n    new SolidColorBrush(Color.FromRgb(33, 115, 70)); \n  selectionRectangle.StrokeThickness = 2; \n  selectionRectangle.RenderTransform = new TranslateTransform(); \n  Canvas.SetTop(selectionRectangle, 0); // row and column header \n  Canvas.SetLeft(selectionRectangle, 0); \n  selectionRectangleCanvas.Children.Add(selectionRectangle); \n  isSelectionRectangleInitialized = true; \n} \n```", "```cs\nprotected override void \n  OnSelectedCellsChanged(SelectedCellsChangedEventArgs e) \n{ \n  // base.OnSelectedCellsChanged(e); \n  if (e.AddedCells != null && e.AddedCells.Count == 1) \n  { \n    DataGridCellInfo cellInfo = e.AddedCells[0]; \n    if (!cellInfo.IsValid) return; \n    FrameworkElement cellContent = \n      cellInfo.Column.GetCellContent(cellInfo.Item); \n    if (cellContent == null) return; \n    DataGridCell dataGridCell = (DataGridCell)cellContent.Parent; \n    if (dataGridCell == null) return; \n    Point relativePoint = \n      dataGridCell.TransformToAncestor(this).Transform(new Point(0, 0)); \n    Point startPosition = \n      new Point(relativePoint.X - 3, relativePoint.Y - 3); \n    Point endPosition = \n      new Point(relativePoint.X + dataGridCell.ActualWidth, \n      relativePoint.Y + dataGridCell.ActualHeight); \n    UpdateSelectionRectangle(startPosition, endPosition); \n  } \n}\n```", "```cs\nprivate void SpreadsheetScrollViewer_ScrollChanged(object sender, \n  ScrollChangedEventArgs e) \n{ \n  if (selectionRectangleCanvas == null) GetCanvasReference(); \n  TranslateTransform selectionRectangleCanvasTransform = \n    selectionRectangleCanvas.RenderTransform as TranslateTransform; \n  selectionRectangleCanvas.RenderTransform = new TranslateTransform(\n    selectionRectangleCanvasTransform.X - e.HorizontalChange, \n    selectionRectangleCanvasTransform.Y - e.VerticalChange); \n} \n```", "```cs\nSystem.InvalidOperationException: 'Cannot set a property on object 'System.Windows.Media.TranslateTransform' because it is in a read-only state.'\n```"]