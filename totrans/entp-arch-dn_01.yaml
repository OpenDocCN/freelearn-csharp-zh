- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Sad State of Information Systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before jumping to solutions, it is essential to share a thorough diagnostic
    of a situation. In the case of information systems and, more generally, computer
    use, any user knows of the term “bug” and has experienced the frustration associated
    with malfunction, sometimes with a high personal impact (loss of personal data,
    consequences regarding revenue, and so on). For companies, a malfunction in IT
    can have harsh consequences since they depend more and more on computers to realize
    their business operations, hence their financial objectives.
  prefs: []
  type: TYPE_NORMAL
- en: After defining what an information system is and explaining how its efficiency
    (or lack thereof) can be calculated, an attempt at classifying the causes of such
    problems will be exposed. As for solutions, this will be the subject of the rest
    of this book. But for now, we must understand what is going wrong with information
    systems, how this happens, and – more importantly – why.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is an information system?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why is software building still a craftsmanship, with good and bad consequences?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How the efficiency of an information system can be evaluated
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to classify the different impacts that can happen on information systems,
    as well as what their causes and consequences are
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is an information system?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before talking about the state of information systems, it might be useful to
    give a clear definition of what an information system is and even what a system
    is.
  prefs: []
  type: TYPE_NORMAL
- en: 'A **system** is a group of items that operate together to reach a common goal.
    This is the basic difference between a system and a union of individualities:
    the parts of a system work together toward a vision.'
  prefs: []
  type: TYPE_NORMAL
- en: An **information system** (we will sometimes abbreviate it as **IS**) furthers
    this definition as a group of items that share information to reach a common objective.
    Strictly speaking, an IS is not necessarily made of software, even though most
    of what we will talk about in this book is about computerized information systems.
    And, even in the most sophisticated IS, there remains a non-neglectable part of
    information that is not software-contained. This is a situation that we will talk
    about, but for the main part of this book, we will put ourselves in the hypothesis
    of software-based information systems as they are now pervasive in almost every
    company and organization.
  prefs: []
  type: TYPE_NORMAL
- en: So, an IS is understood as a set of software tools that operate toward a goal.
    This goal is typically designed as a business process for most of the companies
    that own the system. It should be noted that software always depends on hardware,
    but this tends to be more and more hidden in the background and the IS is more
    and more considered as the software means, organized together to reach a business
    goal, by implementing functional processes efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: A quick history of information systems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When dealing with general subjects, such as the quality of information systems,
    it is always interesting to have a look at the past and analyze the evolution
    toward the current situation.
  prefs: []
  type: TYPE_NORMAL
- en: If we follow the definition stated previously, information systems only appear
    when at least two entities collaborate. In our hypothesis of software-based information
    systems, this means at least two computers have been connected. This means that
    initial room-sized computers that are operated on-premises should not be considered
    systems, though they were often called “large systems” (the items that were assembled,
    in this case, were computation mechanisms, short-life memory, and long-life memory).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s go forward in time a little bit and talk about IBM’s client-server mainframes:
    those are the first ones that we can consider as information systems since there
    were client stations connected to a central computer, with information flowing
    between them. The protocol was proprietary, which made it easier for IBM to reach
    the high quality of the service provided by these systems (lots of them are still
    in operation nowadays). Since a unique implementation of a protocol was defined
    by the same team, compatibility, and interoperability were a very light issue.
    This is legacy, but when the system is working and when modernizing it is highly
    risky, the businesses logically make the choice of not moving anything (this is
    the first rule in information systems management: if it works, do not touch it).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fast-forward again and we are in the nineties. This is the era of **personal
    computers** (**PCs**). Though there is a worldwide attempt at keeping compatibility
    between the machines, anybody using computers at this time who was unable to use
    a given piece of software, because it did not support the embedded video card,
    knows this was partly a failure. Of course, things have greatly improved since
    then, with **Video Electronics Standards Association** (**VESA**) international
    standards being created for video cards and screens, such as VGA or VESA, and
    lots of other norms that make it possible, in the present time, to change components
    of a PC without breaking down the whole system. Still, the toll on information
    systems has been quite high: how can we expect networks of machines to work well
    together when even a single machine’s components are hard to assemble? Proprietary
    formats, different encodings, an almost complete absence of strong data exchange
    protocols: everything led to a difficult situation, and only high-budget companies
    could operate complex computerized systems with the help of experts, who would
    twitch about anything from jumpers on an electronic board to compilers parameters
    to make the system work.'
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, Y2K came with the internet expansion and its radical approach to
    normalizing the exchanges between computers. Now, every single computer that abided
    by TCP/IP, HTTP, Unicode, and other internet-born standards could exchange data
    with another one anywhere in the world, regardless of its hardware and operating
    system implementation. This is one of the biggest steps forward in the history
    of IT and the root definition of what our “modern” information systems are today.
  prefs: []
  type: TYPE_NORMAL
- en: A few software layers were added to this to make it easy to reuse functions
    in a system. It started low, with local reuse of code through routines, then libraries
    and components. With the advent of network capacities, this evolved to distributed
    components, web services, and finally **service-oriented architecture** (**SOA**).
    This is also the time when n-tier architectures were put in place, establishing
    a first layer of responsibility separation inside the software application, between
    **graphical user interface** (**GUI**) management, the exposition of functional
    services, the implementation of business rules, and persistence management.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last bit, SOA, has led many companies to costly failures, and the vast
    majority of attempts at putting such architectures in place resulted in important
    financial loss and abandonment of projects. The technological step was too high
    to operate smoothly, and lighter alternatives have appeared to remove local difficulties
    of the SOA approach:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Standardized message-oriented middleware**: To counter the proprietary exchange
    protocols put forward by large software companies operating on SOA and using it
    to lock their customers in their system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The REST approach**: To lighten the weight of SOAP/WSDL web services and
    the weight of all associated norms'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enterprise Service Bus**: This technique is used to reduce the importance
    of the middleware and reach a “dumb pipes” paradigm where the software applications
    participating in the system would be able to communicate with each other without
    needing a central piece of software that would necessarily become a single point
    of failure'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As the presence of a few reference books (Sassoon, Longépé, and Caseau) show,
    the best practices to design a strong and evolution-capable IS were already available
    in the late nineties, though not very well known. But it was during the 2000s
    that these practices came to a larger share in the community and SOA and other
    service-based approaches flourished, leading to the microservices architecture
    in the beginning of the 2010s. This set of practices is still considered as the
    reference architecture at the time of writing, though we will see that not all
    its recommendations should be applied without a strong analysis of its usefulness
    in the studied context. As we will see, the granularity of services is key to
    obtaining an efficient IS. But for now, we will talk about software building in
    general and try to understand the current limits of this so-called “industry.”
  prefs: []
  type: TYPE_NORMAL
- en: Software building – still craftsmanship
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The precise definition of an information system, as interpreted in this book,
    has been given together with a brief history of its evolution. This history is
    not only very short but shows many recent evolutions, most of them radically different
    from the previous state of the art. This very rapid evolution is a sign that information
    systems design is not something that can be considered stabilized and completely
    understood.
  prefs: []
  type: TYPE_NORMAL
- en: 'There remains a large part of craftsmanship in the design and deployment of
    a software information system. Craftsmanship has its advantages: human attention
    to detail, custom-tailored functions, uniqueness, and more. It also has numerous
    drawbacks, such as high costs, difficulty in evolving in a controlled way, dependence
    on a few creators, and many others. These drawbacks outgrow the advantages in
    modern companies for which the information system has become the operational backbone.'
  prefs: []
  type: TYPE_NORMAL
- en: Well-crafted information systems are an evolution from arbitrarily evolving
    ones, and there is nothing to be ashamed of with a craftsman’s job, but the way
    forward today is toward an industrialized approach to information systems. This
    is what this book is all about.
  prefs: []
  type: TYPE_NORMAL
- en: Craftsmanship as opposed to previous lack of quality
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Craftsmanship is used in several domains of IT where opposition is established
    with older, more arbitrary, and self-organized methods where used. For example,
    numerous IT conferences include the word “craftsmanship” in their names as a statement
    of their will to address quality and heterogeneity issues.
  prefs: []
  type: TYPE_NORMAL
- en: Information systems have long appeared simply because pieces of the system were
    put together and linked without any reflection on the whole system itself. This
    is generally what happens with so-called “point-to-point integrations,” where
    connections are made between different software modules while considering only
    the source and the destination of the link, without any map of all the links that
    exist, sometimes reproducing an already existing link or reversing the initially
    intended direction of the functional dependency between the two modules.
  prefs: []
  type: TYPE_NORMAL
- en: Such systems that are born without anybody thinking of the whole functioning
    have very few chances to remain stable for long. In the rare cases where only
    a few connections are created, the system can operate fine, but we all know that
    IT evolves very quickly, and business needs are added all the time (“the only
    stable thing in a system is its need to evolve”). If nobody has a global view
    of the whole system, there is no way that its overall evolution is going to develop
    ideally. It would be pure chance and Murphy’s Law states that, if something can
    go wrong in a software system, it most definitely will.
  prefs: []
  type: TYPE_NORMAL
- en: Software craftsmanship involves a will to not let the system create itself and
    develop in the wrong direction, but to take extra care of the software quality
    and methods to build time-enduring and evolution-capable systems. When applied
    to code (where it mostly happens), software craftsmanship includes test automation,
    a refactoring approach, quality indicators monitoring, and many other methods
    and techniques that go beyond minimal practices.
  prefs: []
  type: TYPE_NORMAL
- en: We could argue that these practices are contrary to craftsmanship, but this
    is only true in established industries, where craftsmanship lives in opposition
    to standardized industrial production. In the world of IT, industrialization has
    not happened yet. The word “craftsmanship” has been used by artisans of IT who
    pride themselves on analyzing problems and solving them with code more elegantly
    and sustainably than usual slack in their analysis and in the realization (many
    of us have seen code without any analysis documentation and a single unit test,
    and yet that has been sent into production just because “it worked”). Craftsmanship
    – as the word is used in the IT movement – could even be said to be the very first
    step into industrializing the software domain since this is the first resolute
    action into making code clean and not letting it derive into what is commonly
    named in the IT jargon as a “big ball of mud.”
  prefs: []
  type: TYPE_NORMAL
- en: 'It might look like I oppose craftsmanship and industrialization, but one isn’t
    better than the other: they are simply two phases of the development of a domain
    – in our case, software. Personally, after 38 years of programming with the desire
    to do things cleanly, I consider myself a craftsman; my goal with this book –
    and the past 15 years of my architect career – is to humbly help make another
    step so that software gets out of its infancy problems and becomes an adult industry.'
  prefs: []
  type: TYPE_NORMAL
- en: As a side note, a subject of discussion among software architects is about our
    working domain to be able to ever become an industry. I tend to think that the
    amount of creativity needed to be a good software engineer will make it impossible
    to fully industrialize software production, but that a lot of things should be
    industrialized to reach this mature, adult phase, where IT will finally deliver
    its complete value.
  prefs: []
  type: TYPE_NORMAL
- en: A word about “emerging architecture”
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The concept of emerging architecture is that, in some human constructions (mainly
    software applications), architecture is not established upfront, but appears gradually
    with the construction of the object. This concept is often used together with
    Agile methods, where the software construction is iterative and not done in a
    single succession of phases, such as in the “V-cycle” method. Instead of a single
    design/development/test series of steps, Agile software development loops many
    times over these steps, each time building on the previous cycle to gradually
    work toward a final vision that may even evolve during the steps.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, each step involves the minimal design activity necessary to realize
    the cycle, in a **Keep It Simple** mindset. Thus, there is no initial complete
    vision of the final architecture, which sometimes can be seen as a serious limitation
    of Agile methods, but is at the same time their force, as they continually adapt.
    There are ways for this to go awry, though, and it mostly happens where participants
    in the project expect the architecture to emerge naturally. This confusion is
    often seen in software developments where no architect is involved and where developers
    believe individual best practices, goodwill, and craftsmanship will have a quality
    impact on the outcome. The reality is that these practices will positively affect
    the individual results of each Agile step but will not guide the overall architecture
    in any sound place since there is no long-term direction.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, it is very important to understand that emerging architecture does
    exist but necessitates an active engagement in making it happen gradually. It
    naturally happens at the module level, where a single developer carefully refines
    and refactors the code. But to work at the system level, there needs to be the
    same level of engagement.
  prefs: []
  type: TYPE_NORMAL
- en: Craftsmanship as opposed to an industrialized approach
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous section, we have opposed craftsmanship to lack of quality intention
    in the code and thus shown how positive craftsmanship can be. Here, we will point
    out its limits when opposed to industrialization. Craftsmanship bears the idea
    of a highly skilled individual operating carefully, where time spent is of little
    importance compared to quality.
  prefs: []
  type: TYPE_NORMAL
- en: Though craftsmanship – in its noble sense of dedication to hand-polished, high-quality
    work – is worth praise, it also states that the level of maturity of the domain
    is still low. When reaching maturity, disciplines tend to separate different steps
    of the work, automate some of them, standardize practices and tools, and overall
    become more efficient, even bringing quality to a higher level that cannot be
    obtained with an individual human approach alone. Moreover, industrialization
    normalizes the whole process and makes it possible for anyone following the norms
    – and not only highly skilled people – to reach this high level of quality.
  prefs: []
  type: TYPE_NORMAL
- en: This is what has been done in all industries (and this is even why we call them
    this), and it is the natural evolution human workers try and reach. In the software
    field, predictability, quality, and time-to-market are sought-after qualities
    and an industrial approach is necessary to reach them.
  prefs: []
  type: TYPE_NORMAL
- en: It is essential to point out that there is nothing wrong with a non-industrial
    approach. Software is not an industry yet. After all, bridges have been built
    for more than 4,000 years, so it is quite understandable that this has become
    something of a controlled and well-established way of working. Software building,
    on the other hand, has only been there for a few decades and still is in its infancy.
  prefs: []
  type: TYPE_NORMAL
- en: But the important information here is that craftsmanship, despite all its advantages,
    is the step before industrialization, and lots of information systems owners nowadays
    really crave an IT team that reaches this next step. Stakes are huge for some
    of them, where competitive advantages come mostly from the information system.
    It has been said that “all companies today are software companies” and this stresses
    once more the importance of the information system and the absolute necessity
    of reaching higher levels of quality.
  prefs: []
  type: TYPE_NORMAL
- en: Concept of technical debt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Technical debt** is a concept that has been created to explain, through a
    metaphor, how the low quality of software development can negatively affect its
    future development. In financial debt, you must pay regular interest, depending
    on the amount you have borrowed. In the software side of the metaphor, buying
    some time by cutting corners and lowering overall quality will have to be paid
    regularly, so long as the low-quality module remains active. Bug correction and
    maintaining the module will take some time, and the team will not be able to spend
    on new features that have value for the users. The lower the quality of the module,
    the higher the “rate of interest” – in our case, the time spent on maintenance.
    In the worst case, the quality of the software is so low that all available money/development
    time is spent only on paying for the interest of the debt (keeping the application
    running), which means that no money remains available to reimburse the debt/correct
    the software, let alone paying for features with more value.'
  prefs: []
  type: TYPE_NORMAL
- en: This concept will be discussed at length in [*Chapter 4*](B21293_04.xhtml#_idTextAnchor121),
    but since we are talking about craftsmanship, now’s a good time to explain the
    link between both concepts right away.
  prefs: []
  type: TYPE_NORMAL
- en: Craftsmanship is often seen as a software development approach where technical
    debt is maintained at its lowest level possible, sometimes being virtually nonexistent.
    A good craftsman developer will take pride in having zero-defect software, 100%
    coverage via automated tests, with a fully automated integration and deployment
    system.
  prefs: []
  type: TYPE_NORMAL
- en: 'The industrialized approach that was opposed to craftsmanship results mostly
    in an improvement of the overall quality, but also goes beyond in how it deals
    with technical debt. Where craftsmanship tends to have an individual and binary
    approach toward technical debt, as opposed to careless development that lets it
    potentially go unleashed and out of control, the industrialized approach manages
    technical debt. The financial metaphor still stands: instead of refusing any debt
    altogether, a well-thought operator will carefully manage their capital, borrowing
    if the advantages are indeed higher than the costs of the loan. Compared to a
    craftsman, an industrially-oriented developer will be more aware of the importance
    of time-to-market and assume a controlled level of technical debt if it helps
    them reach users before their competitors, thus bringing benefits that will partly
    be affected in reducing the technical debt afterward.'
  prefs: []
  type: TYPE_NORMAL
- en: The long-standing comparison of software to mechanical systems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Comparison of software and mechanical industries (in most known cases, the automotive
    industry in particular) is such a habitual position of contenders of both sides
    that it has been worn out. Also, comparisons do not necessarily bear logic, depending
    on the way they are realized. For example, in the famous *Microsoft versus General
    Motors* meme, comparing a single car with a single piece of software brings strange
    conclusions from each side (*If the car industry evolved as quickly as software,
    we would have cars driving 1,000 miles per gallon*”/“*If car industry worked as
    the software industry, a car would crash inadvertently every 1,000 miles*”). The
    underlying error in this ill comparison is that the level of complexity is not
    the same on both sides. If you were to compare a single car created in an industrial
    factory, the cost should be compared to the single operation of a functional process
    in an information system, since only one function is individually operated (transporting
    a few people in the case of a car, calculating a payroll – for example – in the
    case of the software application). If we turn the problem the other way around
    and want to compare the internal operation of the software with its tens, maybe
    hundreds of thousands of lines of code, the right comparison would be with the
    car factory itself as it has the necessary modularity to change its car model
    production, and it also contains thousands of functions and many more moving parts
    to perform such a moving task.
  prefs: []
  type: TYPE_NORMAL
- en: In short, wrongly-calibrated comparisons can be very misleading and of little
    practical interest. But comparing information systems building to the design of
    a car factory, for example, is closer to the reality of the complexity of each
    system and can provide interesting insights, so long as you contextualize them
    carefully. As stated previously, comparing information systems to bridges can
    be pertinent if we stay on the criteria of the age of the industry. How could
    IT, an activity that is only a few decades old, reach the same level of maturity
    as an activity that has been developed over several millennia?
  prefs: []
  type: TYPE_NORMAL
- en: 'We will stop this comparison for now, but you will be introduced to several
    comparisons between the software “industry” and more traditional industries that
    better deserve this qualification throughout this book. We will try to keep the
    comparison as helpful and legitimate as possible. Again, there is no judgment
    in saying that IT is not completely industrialized yet: some systems undoubtedly
    are, and some are not. And this should not be taken against anyone as industries
    took many human generations to reach their current level. Software-based information
    systems simply have not had the time to do so. This book is about the means to
    help go in this direction, taking into account experiments from other industries,
    while keeping in mind that comparisons may sometimes be misleading and should
    be used while paying attention to their applicability.'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have established what an information system is and the many infancy
    problems that it may have because the field is not industrialized yet, a sound
    engineering approach is needed to evaluate this lack of maturity.
  prefs: []
  type: TYPE_NORMAL
- en: The efficiency of an IS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Engineering is about making things in a controlled way; information systems
    will not escape this much-awaited transition as their efficiency could be improved.
    To do so, we need indicators, measures, and a method to get the results on a given
    information system. Fortunately, there is a consensus on this in the field of
    expertise, as we will see now.
  prefs: []
  type: TYPE_NORMAL
- en: The measure of efficiency of a system
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since a system is a group of items working together toward a goal, as defined
    previously, measuring the efficiency of the whole means more than just knowing
    the efficiency measures of each item and summing them one way or another. It is
    often said that the value of a good information system is much more than the value
    of each of its moving parts and that the most positive effects come from their
    interactions.
  prefs: []
  type: TYPE_NORMAL
- en: A good way to measure the efficiency of an information system is to evaluate
    how much time and money it helps save on the functional processes it supports.
    However, this is quite complicated to measure since a single IS generally operates
    several processes, and their respective importance and costs should be evaluated.
    If you consider that processes are also partly human-operated and that the gain
    of efficiency does not come only from the software part but from the way the functional
    teams use the application, how they have been trained, what investment has been
    put in the hardware for performance, and so on, it starts getting difficult to
    evaluate the efficiency of a complete system with these metrics. Furthermore,
    the output may be closer to a return-on-investment calculation than that of an
    efficiency metric.
  prefs: []
  type: TYPE_NORMAL
- en: This is why the efficiency of IS is often evaluated through simpler, more attainable
    metrics, namely the percentage of cost used for maintenance. This simple ratio
    allows us to know how much money is put to keep the system working (this is an
    operational cost) versus how much has been put into designing it and making it
    better (which is an investment cost). As functional features are what is asked
    of the system, the more maintenance there is to keep it operating, the less money
    is related to getting value out of the system. Of course, there are many points
    of view on software efficiency, and we are going to browse a lot of them together
    in this book. But maintenance is simply the easiest way to start evaluating the
    state of an IS.
  prefs: []
  type: TYPE_NORMAL
- en: The cost of maintenance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Maintenance may be the field where software is still lacking the most. Methodologies
    have arisen on the subject of software design and development that are starting
    to help turn craftsmanship into a more industrial approach. But design and development
    are just the beginning of the journey for a piece of software. Once in production,
    the application has to be deployed, patched (sometimes while functioning), improved,
    and maintained in the long run. This is where bad design, technical debt, and
    high costs of maintenance show the shortcomings of the design phase.
  prefs: []
  type: TYPE_NORMAL
- en: Again, the picture is not all that bad. After all, there are proven methods
    to upgrade software applications while running, which is quite an achievement
    if we compare this to its mechanical counterpart of changing a car’s wheel while
    running. But an analysis of the total costs of maintenance of ISs shows that this
    is only the tip of the iceberg and the general situation is quite awry.
  prefs: []
  type: TYPE_NORMAL
- en: 'A study from Gartner dated around 10 years ago and based on 3,700 companies
    indicates that 72% of the budget of IT is used for maintenance. You read that
    correctly: almost three-quarters of the cost of an IS is affected not by designing
    and improving it, but by adjusting and keeping it working while in production.
    Again – and with all the care that should be taken with such a comparison – imagine
    a house that, once you have paid for its building, would cost you three times
    as much every year just to prevent it from collapsing! This shows the sad state
    of information systems today.'
  prefs: []
  type: TYPE_NORMAL
- en: You will find many other studies on this, but the Gartner one may be the most
    well-known. To give just another confirming point of view, another study from
    the same period showed that “roughly 20% of technology-supported initiatives are
    failures, and that number increases with the size and complexity of the project.
    However, unsuccessful projects often show unmistakable symptoms of failure before
    execution even starts.”
  prefs: []
  type: TYPE_NORMAL
- en: The good news is that we are not condemned to go on this way. In its infancy,
    car manufacturing had the same problem, with a huge maintenance cost compared
    to the initial production toll. The first cars were not industrialized but hand-built
    and their yearly maintenance was almost as costly as the car itself, with tires
    that had to be changed every few thousand kilometers, oil that had to be added
    so often that dedicated tanks were present in addition to gas ones, and engines
    had to be revised by mechanics every few months.
  prefs: []
  type: TYPE_NORMAL
- en: Today, when you look at maintenance metrics in industrialized goods, the situation
    is magnitudes better. A brand-new car from a trustworthy company will happily
    drive tens of thousands of kilometers before its first garage review and, with
    the improvement of engine manufacturing, adding oil is something of an old story
    nowadays. Another example is oil filters, which are so standardized that two sizes
    cover almost all of the European market of individual cars.
  prefs: []
  type: TYPE_NORMAL
- en: 'In factories, where statistics of maintenance are keenly observed because the
    financial yield highly depends on them, we have numbers available to quantify
    this in terms of maintenance cost. Generally speaking, the costs of a factory
    are divided into three groups, the ratio of which is important to determine the
    efficiency of the whole:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed expenses**: These are the expenses that are not correlated with the
    production volume. Typically, the cost of the building (through debt reimbursement
    or lease, depending on whether the company owns or rents the premises) does not
    depend on how much you produce. To improve efficiency, you are looking at reducing
    these costs, but augmenting your production level will also help you because it
    will reduce their relative impact on your revenue.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Value-adding related expenses**: These are the expenses that are directly
    related to your production. The more you produce, the more you will pay your suppliers
    for the goods they provide you with. You will get more benefits, except if you
    are selling below the revenue price, which is not only forbidden in most countries
    but is generally a very bad business decision. All in all, these expenses are
    considered good expenses because the higher they are, the more money comes in
    as well!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maintenance expenses**: These are expenses that you need to plan for your
    production tool to continue operating smoothly. Maintenance expenses are a hard
    beast to tame because, if you neglect them for small economies, they might come
    back at you and bite strongly (a little economy on cheap lubricating oil and your
    million-dollar machine may fall apart in a few years). Maintenance costs have
    two drawbacks. First, contrarily to fixed expenses, maintenance expenses grow
    with production (the more your machines operate, the more maintenance they need,
    and this continues exponentially as old machines need more maintenance). Second,
    the opposite of the second kind of expenses, they do not add visible value to
    your product: if you include a better engine in the cars you sell, the associated
    value is immediately perceived; if you buy better oil to maintain the machines
    that are used to build those engines parts, no customer will ever realize it,
    let alone pay for it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With that, we understand why factory managers are very attentive to maintenance
    costs: they are the “bad” expenses and the difficult ones to manage. Fixed prices
    need less attention, simply because… well, they are fixed! And value-adding costs
    are not such a problem because, when they increase, that means your business is
    growing. So, maintenance is the key and most factory managers will be judged by
    the owner or their boss on their maintenance metrics. If you do not control maintenance
    and the costs are soaring, they will be replaced by another manager. If they are
    too restrictive on the maintenance budget, very costly failures may start to appear,
    and, again, they will be considered responsible for the mess.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Statistics help managers find the right way in this difficult equation by comparing
    it to what has been done in the past in similar situations. For example, in heavy
    industry factories, a fair repartition of cost is considered the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed expenses**: 10% of the budget'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Value-added related expenses**: 85% of the budget'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maintenance expenses**: 5% of the budget'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are, of course, tolerated differences in these numbers, but a maintenance
    ratio higher than 7% has to be justified and, beyond 10%, this is a strong alert
    regarding the maintenance not being in control anymore.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s go back to the Gartner studies, where the admitted average of budget
    used to “keep the lights on” by the 3,700 IT leaders interrogated was 72%. Again,
    the comparison seems negative to the so-called IT industry: 10 times worse! But
    there are a few circumstances that must be considered. First, the natural and
    optimal sharing of costs in IT is necessarily different since the design is only
    made in the mind and does not need expensive material prototypes like in the heavy
    industry. Also, the fixed costs share is becoming lower and lower due to the availability
    of “as a service” artifacts. When, a few decades ago, buying a huge computer had
    a large toll on the budget, particularly in the first years when it was only partially
    used, cloud operations allowed us to buy computer power as needed, which made
    these costs fall into the investment costs group.'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, we could consider that the numbers are not directly comparable. Nonetheless,
    the IT industry has a problem with maintenance costs. And as engineers, the question
    that immediately pops to mind is: Where does this come from? The next section
    will hopefully show you that the causes are – most of the time – easy to establish
    since some generic errors are made when designing information systems. These are
    at the root of the observed shortcomings.'
  prefs: []
  type: TYPE_NORMAL
- en: Examples of the prohibited evolution of IT systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, things may been a bit theoretical. Most information systems are created
    without a defined plan and global, architected vision and this is reflected in
    the cost of maintenance – and thus the total cost of ownership – of the whole
    system. But what does this mean in practice? Is it that bad?
  prefs: []
  type: TYPE_NORMAL
- en: You may have heard expressions such as “spaghetti dish” or “data silos.” In
    the first case, the modules of the IS are so intertwined that it becomes impossible
    to touch a given part of the system without causing side effects on another one.
    In this case, evolution becomes complicated. The second expression is associated
    with modules of an IS that are so tightly separated from each other that they
    cannot share common data. This generally leads to duplicated data, loss of quality,
    and sometimes contradictory processes in the whole system. These are just a few
    examples of the designation of generic problems that can happen.
  prefs: []
  type: TYPE_NORMAL
- en: The following sections dive much deeper into such mishaps and detail what chains
    of reaction make information systems get slower, harder to operate, and, in the
    worst cases, stop them from working completely. As an architect for almost 10
    years and then a consultant on information system evolution for small to very
    large companies, I have observed enough hindered information systems to be able
    to create a classification of what went wrong and how this can be analyzed. This
    experience, shared with a research lab in France, led to several scientific papers
    where this analysis was formalized and business/IT alignment anti-patterns were
    documented. Some of them will be detailed in the upcoming sections.
  prefs: []
  type: TYPE_NORMAL
- en: Classification of the causes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following diagram has been extracted from a scientific article that was
    published in 2021 – *Business-IT Alignment Anti-Patterns: A Thought from an Empirical
    Point of View* – and that Dalila Tamzalit, LS2N / CNRS, and myself presented at
    the INFORSID conference in June 2022:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1 – Classification of business/IT alignment anti-patterns](img/B21293_01_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.1 – Classification of business/IT alignment anti-patterns
  prefs: []
  type: TYPE_NORMAL
- en: The small diagrams are a visual code to identify the different patterns of misalignment,
    the meaning of which will become clearer in the next chapter. For now, only the
    position of the different blocks is to be defined.
  prefs: []
  type: TYPE_NORMAL
- en: The horizontal axis expresses the frequency of finding the pattern in information
    systems that have been studied. Admittedly, those were ISs with problems, since
    consultants like me were hired to work on them. However, a decade of experience
    on almost 100 organization/industry systems from many different contexts showed
    that this is – sadly – something extremely current in ISs and that high-quality,
    rapidly evolving, and cost-efficient ones are extremely scarce. These are reserved
    for very small companies with limited needs or very large and rich ones that have
    known from the beginning that their IT system was their spine and brain and invested
    accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: The vertical axis of the schema evaluates the impact the anti-pattern has on
    the functioning of the system. The higher the position of the anti-pattern, the
    more it hinders the correct working and/or evolution of the IS.
  prefs: []
  type: TYPE_NORMAL
- en: The consequence of this classification mode is that the anti-pattern at the
    top right position (**LEVEL 1**) is the most impactful and most often observed.
    This case corresponds to when the business processes are directly implemented
    in the software layer of the system. In [*Chapter 3*](B21293_03.xhtml#_idTextAnchor069),
    we will consider the decomposition of IS on four different layers, but for now,
    suffice it to say that the good alignment between these layers is the most important
    source of quality and that the four-layer diagram is of such importance that the
    symbols of the 14 anti-patterns documented are based on it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following three anti-patterns, as shown in the top-right corner of the
    preceding diagram (**LEVEL 2**), are a bit less spread and harmful than the first
    one but account for a lot of observed difficulties. They correspond to the following
    three cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Feature with multiple implementations**: This leads to different business
    rules, depending on which software is used, and obvious mistakes as consequences'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Silos**: These cause duplication of data and additional work, together with
    errors due to synchronization or lack thereof'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Monoliths**: Heer, a single software application concentrates so many business
    functions that its evolution is complex and it becomes a bottleneck for the whole
    system and sometimes even a blocking point'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The remaining 19 anti-patterns (**LEVEL 3**) are less observed and/or less dangerous
    for the evolution or correct functioning of the information systems, but their
    knowledge can help us spot them in maps of systems and improve the situation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram (*voluntarily blurred to protect customer information*)
    shows how a quick map of an information system can help us visually find the “hot
    spots.” In this case, two applications that received lots of “hard-coupled” (we
    will come back to this notion of coupling in [*Chapter 4*](B21293_04.xhtml#_idTextAnchor121))
    streams of data caused evolutionary problems, particularly since one of them was
    obsolete and the other one difficult to evolve for commercial and regulatory reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.2 – A hand-made map of an information system, revealing the high
    coupling for two software applications](img/B21293_01_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.2 – A hand-made map of an information system, revealing the high coupling
    for two software applications
  prefs: []
  type: TYPE_NORMAL
- en: The story behind this diagram and the reason it is displayed here, while not
    readable, is that when designing this map of an information system, a non-technical
    board member came into the room and immediately pointed at the two notes with
    a lot of red wires pointing to them, saying “I think I know where the problem
    is.” It made us realize that we did not need to continue mapping more precisely
    as the existing analysis was clear enough that we could start acting on the main
    coupling problems. It also was discovered that the two applications were also
    the ones with the highest obsolescence.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is outside the scope of this book to study all the groups of anti-patterns
    that can cause problems in an information system as the subject is the architecture
    of such systems and we will mostly concentrate on how to avoid these problems
    right from the design phase. Nonetheless, if you’re curious, you are invited to
    read the *Business-IT Alignment Anti-Patterns: A Thought from an Empirical Point
    of View* paper (refer to the *Further reading* section) for an academic and more
    formal presentation of the classification.'
  prefs: []
  type: TYPE_NORMAL
- en: The classical symptoms of a blocked IS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Behind the causes, there are symptoms of ISs that include some (and sometimes
    many) of these anti-patterns. If you’re experienced, then you will certainly be
    familiar with some of them:'
  prefs: []
  type: TYPE_NORMAL
- en: The testing time of a software application or a process increases exponentially.
    Release time increases, reaching sometimes up to several years
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A version impacts customers or users who are not concerned with an included
    evolution or feature as it is on a function that they do not use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some side effects of an IS module cannot be explained (well-established bugs,
    but also effects on performance, non-predictable behavior, and more)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Low levels of satisfaction for internal information systems, loss of market
    share for applications that participate in external/customer information systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rate of renewal of large systems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When such impacts happen and become larger and more difficult with time, the
    perceived solution is often to throw the existing IS away and build a new one,
    which is often called the **Big Bang approach**. Not only is this the most expensive
    way of tackling the problem, but it happens to also be the riskiest one as the
    bugs that have been found in the existing legacy applications are bound to reappear
    for some of them or be replaced with new ones, making it extremely slow to reach
    a satisfactory situation. There is even a high probability that, by the end of
    the rewriting process, the new system will also be far from the expected behavior
    since business needs have changed again in the meantime.
  prefs: []
  type: TYPE_NORMAL
- en: This is why it is always better to gradually improve an existing system, leaning
    on its good behaviors and progressively improving the modules that cause the most
    trouble for users.
  prefs: []
  type: TYPE_NORMAL
- en: 'Depending on the level of quality of an information system, the following can
    occur:'
  prefs: []
  type: TYPE_NORMAL
- en: It can be in such a fine condition that all evolutions can be realized without
    any side effects on functions that are not concerned
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can require a few days’ work to implement a simple new working feature and
    deploy it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can present some couplings that make it longer, but not more difficult, to
    do so
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can be so full of problems that implementing new features is complicated
    and necessitates dedicated project management and impact analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can be in such a state that evolution is almost impossible or at the price
    of a higher instability of the whole system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The evolution of ISs is often based on phases with a duration of a few years.
    After 2 to 3 years, and in the best cases 5 years, the future of the business
    is so difficult to predict that planning the evolution of the underlying IS does
    not make any sense. In highly volatile activities, even a plan of 2 years may
    be considered too long.
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, many ISs cannot be fully corrected in only a few years and several
    plans will be necessary to re-align them. In this case, the approach is the same
    as in an Agile software development project: a first step – though much longer,
    generally around a semester – is realized to realign the most urgent problem,
    at which point objectives are re-analyzed and a following re-alignment step is
    undertaken, and so on, in a continuous improvement approach.'
  prefs: []
  type: TYPE_NORMAL
- en: Although much more tempting in some cases (and in particular very appealing
    to non-technical profiles that do not grasp the difficulties linked to stabilization),
    the Big Bang approach is rarely the solution, and if you have to deal with an
    inefficient information system, you will most likely have to plan for a step-by-step
    evolution. While you will be doing such a change in an IS, this will quickly come
    in handy with legacy modules. And though the IT industry is quick to consider
    older technologies as garbage (just type any technology name, followed by “is
    dead,” into a browser and you will realize the extent of this), a responsible
    approach to IS evolution is to observe respect toward the legacy. The reason it
    became legacy is that it has been providing value for a long time.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we discussed what an IS is and why, despite all the expertise
    and care that can be given by true craftsmanship in software design, the system
    that links all these applications together can present many issues, mainly in
    terms of maintenance costs and the ability to evolve in time and rise to the challenges
    of new business processes and requests for features. Many symptoms can alert us
    of the state of a given IS but they all boil down to one main reason: IT has not
    reached the state of a truly industrialized domain since it is still a very recent
    human activity compared to other actual industries.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, we will talk about how industrialization principles can
    be applied to software. This can be summed up in two actions: cutting down complexity
    and standardizing the interfaces.'
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Longépé, C. (2019). *Le projet d’urbanisation du S.I.* – 4th edition. Dunod/InfoPro.
    EAN 9782100802432\. [https://www.dunod.com/sciences-techniques/projet-d-urbanisation-du-si-cas-concret-d-architecture-d-entreprise-0](https://www.dunod.com/sciences-techniques/projet-d-urbanisation-du-si-cas-concret-d-architecture-d-entreprise-0).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sassoon, J. (1998). *Urbanisation des Systèmes d’Information*. Hermès. EAN 9782866016937\.
    [https://www.fnac.com/a270920/Jacques-Sassoon-L-urbanisation-des-systemes-d-information](https://www.fnac.com/a270920/Jacques-Sassoon-L-urbanisation-des-systemes-d-information).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Caseau, Y. (2011). *Urbanisation, SOA et BPM* – 4th edition. Dunod / InfoPro.
    EAN 9782100566365\. [https://www.dunod.com/sciences-techniques/urbanisation-soa-et-bpm-point-vue-du-dsi](https://www.dunod.com/sciences-techniques/urbanisation-soa-et-bpm-point-vue-du-dsi).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Gouigoux, J. P. & Tamzalit, D. (2021). *Business-IT Alignment Anti-Patterns:
    A Thought from an Empirical Point of View*. In E. Insfran, F. González, S. Abrahão,
    M. Fernández, C. Barry, H. Linger, M. Lang, & C. Schneider (Eds.), Information
    Systems Development: Crossing Boundaries between Development and Operations (DevOps)
    in Information Systems (ISD2021 Proceedings). Valencia, Spain: Universitat Politècnica
    de València. [https://aisel.aisnet.org/isd2014/proceedings2021/managingdevops/3/](https://aisel.aisnet.org/isd2014/proceedings2021/managingdevops/3/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
