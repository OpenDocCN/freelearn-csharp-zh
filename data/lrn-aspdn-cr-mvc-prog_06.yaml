- en: Chapter 6. Validation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章 验证
- en: We can never rely on the data entered by users. Sometimes they might be ignorant
    about the application and thus they may be entering incorrect data unknowingly.
    At other times, some malign users may want to corrupt the application by entering
    inappropriate data into it. In either case, we need to validate the input data
    before storing the data for further processing.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们永远不能依赖用户输入的数据。有时他们可能对应用程序一无所知，因此他们可能无意中输入了错误的数据。在其他时候，一些恶意用户可能希望通过在应用程序中输入不适当的数据来破坏应用程序。在任何情况下，我们都需要在存储数据以供进一步处理之前验证输入数据。
- en: 'In this chapter, you''ll be learning about the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习以下主题：
- en: Different types of validation
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同类型的验证
- en: Server-side validation with an example
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有示例的服务器端验证
- en: Client-side validation with an example
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有示例的客户端验证
- en: Unobtrusive JavaScript validation using jQuery unobtrusive libraries, where
    we don't have to write separate code for validation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 jQuery 无障碍库进行无障碍 JavaScript 验证，其中我们不需要为验证编写单独的代码
- en: In an ideal case, users will enter valid data in a proper format in your application.
    But, as you might realize, the real world is not so ideal. Users will enter incorrect
    data in your application. As a developer, it is the responsibility of us to validate
    the user input in our application. If the entered input is not valid, you need
    to inform the user, saying what has gone wrong, so that the user can correct the
    input data and submit the form again.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在理想情况下，用户会在您的应用程序中以适当的格式输入有效数据。但，如您所意识到的那样，现实世界并不那么理想。用户会在您的应用程序中输入错误的数据。作为开发者，验证我们应用程序中的用户输入是我们的责任。如果输入的数据无效，您需要通知用户发生了什么错误，以便用户可以纠正输入数据并再次提交表单。
- en: Validation can be done on the client-side or the server-side or at both ends.
    If the validation is done before sending the data to the server, it is called
    client-side validation. For example, if the user does not enter any data in a
    mandatory field, we can validate (by finding the data that is not entered) the
    form, at the client-side itself. There is no need to send the form data to the
    server. JavaScript is the most commonly used language being used for client-side
    validation.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 验证可以在客户端、服务器端或两端进行。如果在发送数据到服务器之前进行验证，则称为客户端验证。例如，如果用户在必填字段中没有输入任何数据，我们可以在客户端本身验证表单（通过找到未输入的数据）。没有必要将表单数据发送到服务器。JavaScript
    是用于客户端验证最常用的语言。
- en: '![Validation](img/Image00099.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![验证](img/Image00099.jpg)'
- en: If the validation is done at the server-side (sending the form data to the server),
    it is called server-side validation. For instance, you might want to validate
    data entered by the user against the data in the database. In this case, it is
    preferable to do server-side validation as we cannot have all the data in the
    database at the client-side.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果验证是在服务器端进行的（将表单数据发送到服务器），则称为服务器端验证。例如，您可能想验证用户输入的数据与数据库中的数据是否一致。在这种情况下，进行服务器端验证是首选的，因为我们不能在客户端拥有数据库中的所有数据。
- en: '![Validation](img/Image00100.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![验证](img/Image00100.jpg)'
- en: Client-side and server-side validation
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户端和服务器端验证
- en: In the real world, it's not a case of either server-side or client-side validation.
    We can have both types of validation at the same time. In fact, it is recommended
    to validate the data at both ends to avoid unnecessary processing.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实世界中，并不是只有服务器端或客户端验证的情况。我们可以在同一时间同时进行这两种类型的验证。实际上，建议在两端验证数据，以避免不必要的处理。
- en: '![Client-side and server-side validation](img/Image00101.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![客户端和服务器端验证](img/Image00101.jpg)'
- en: The preceding figure shows the validation is being performed at both the client-side
    and the server-side. If the data is not entered into the required field, we can
    catch that issue at the client-side itself. There is no need to send the data
    to the server to finally find out that there is no data entered. Once all the
    required data is entered, the data is sent back to the server to validate the
    entered data based on some business logic. If the validation fails, the form data
    is sent again to the browser with the error message so that the user can send
    the data again.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图示显示了验证在客户端和服务器端同时进行。如果数据没有输入到所需的字段中，我们可以在客户端本身捕捉到这个问题。没有必要将数据发送到服务器，最终发现没有输入数据。一旦所有必需的数据都输入完毕，数据就会发送回服务器，根据某些业务逻辑验证输入的数据。如果验证失败，表单数据会再次发送到浏览器，并带有错误信息，以便用户可以再次发送数据。
- en: We have covered enough theory about the need for validation and the types of
    validations typically used in the application. Let us get our hands dirty by adding
    validation to the application that we built in the previous chapter.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了关于验证的必要性以及应用程序中通常使用的验证类型的理论。让我们通过向上一章构建的应用程序添加验证来实际操作。
- en: The following screenshot is the form that we have built in the previous chapter.
    There is nothing fancy in this form—just three fields. When a user enters the
    data in the form, the data is stored in the database and the entire employee information
    is fetched back and shown in a tabular format.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图是我们上一章构建的表单。这个表单没有太多花哨的地方——只有三个字段。当用户在表单中输入数据时，数据将存储在数据库中，并将整个员工信息以表格格式检索并显示出来。
- en: '![Client-side and server-side validation](img/Image00102.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![客户端和服务器端验证](img/Image00102.jpg)'
- en: 'In the existing application that we have built, we do not show any message
    to the user even when the user does not enter any information in any of the fields
    and submits it. Instead, we silently store the default values for the fields (empty
    values for string types and 0.00 for decimal types) as shown in the following
    screenshot:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们构建的现有应用程序中，即使用户在所有字段中都没有输入任何信息并提交，我们也不会向用户显示任何消息。相反，我们静默地存储字段的默认值（字符串类型的空值和十进制类型的0.00），如下面的截图所示：
- en: '![Client-side and server-side validation](img/Image00103.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![客户端和服务器端验证](img/Image00103.jpg)'
- en: But this should not be the case. We should inform the user saying that the data
    entered is not valid and ask the user to correct the input data.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 但情况不应该是这样的。我们应该通知用户输入的数据无效，并要求用户更正输入数据。
- en: Server-side validation
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务器端验证
- en: 'Let us continue with the application that we built in the previous chapter.
    To do server-side validation, we need to do the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续上章构建的应用程序。要进行服务器端验证，我们需要做以下操作：
- en: Add Data Annotation attributes to the `ViewModels` model class. The input data
    is validated against this metadata and the model state is updated automatically.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数据注释属性添加到`ViewModels`模型类中。输入数据将与此元数据进行验证，并且模型状态将自动更新。
- en: Update the `view` method to display the validation message for each of the fields.
    The `span` tag helper with the `asp-validation-for` attribute will be used to
    display the validation error message.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`view`方法以显示每个字段的验证消息。将使用带有`asp-validation-for`属性的`span`标签助手来显示验证错误消息。
- en: Update the controller action method to verify the model state. If the model
    state is valid, we insert the data into the database. Otherwise, the View model
    is updated and the `view` method is rendered again with the validation error message
    so that the user can update with valid input data and submit the form again.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新控制器操作方法以验证模型状态。如果模型状态有效，我们将数据插入数据库。否则，视图模型将被更新，并且`view`方法将再次渲染，带有验证错误消息，以便用户可以使用有效的输入数据更新并再次提交表单。
- en: Updating View models with the Data Annotation attribute
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用数据注释属性更新视图模型
- en: The Data Annotation attributes defines the validation rules for the properties
    of the `Model` /`ViewModel` . If the input data does not match with the attribute
    definition in the model, the validation will fail, which in turn makes the associated
    model state invalid.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 数据注释属性定义了`Model`/`ViewModel`属性的验证规则。如果输入数据与模型中的属性定义不匹配，验证将失败，这反过来又使得相关的模型状态无效。
- en: 'There are several Data Annotation attributes available to validate the data.
    The following are the most commonly used Data Annotations attributes:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个数据注释属性可用于验证数据。以下是最常用的数据注释属性：
- en: '**Required** : This attribute indicates the property is required.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Required**：此属性表示属性是必需的。'
- en: '**Range** : This attribute defines the minimum and maximum constraints.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Range**：此属性定义了最小和最大约束。'
- en: '**MinLength** : This defines the minimum length a property must have in order
    for the validation to succeed.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MinLength**：这定义了属性必须具有的最小长度，以便验证成功。'
- en: '**MaxLength** : As the name implies, this attribute defines the maximum length
    of the property. If the length of the property value exceeds the maximum length,
    the validation would fail.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MaxLength**：正如其名所示，此属性定义了属性的长度上限。如果属性值的长度超过最大长度，验证将失败。'
- en: '**RegularExpression** : We can use a regular expression for data validation
    if we use this attribute.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**正则表达式**：如果我们使用此属性，我们可以使用正则表达式进行数据验证。'
- en: 'As Data Annotation attributes are available in the `System.ComponentModel.DataAnnotations`
    namespace, we need to include this namespace. The following is the updated View
    model code:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 由于数据注释属性位于`System.ComponentModel.DataAnnotations`命名空间中，我们需要包含此命名空间。以下是更新后的视图模型代码：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We have added Data Annotation attributes for all the three properties—`Name`
    , `Designation` , and `Salary` .
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为所有三个属性——`Name`、`Designation`和`Salary`——添加了数据注释属性。
- en: The `ErrorMessage` attribute displays a message to be displayed when the validation
    fails. If there is a failure of validation and if there is no `ErrorMessage` mentioned,
    the default error message will be displayed.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`ErrorMessage`属性显示在验证失败时显示的消息。如果验证失败且没有指定`ErrorMessage`，则将显示默认错误消息。'
- en: Updating the View model to display the validation error message
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新视图模型以显示验证错误消息
- en: 'For each of the fields, we have added a `span` tag where the error message
    is displayed in a red color when the validation fails. When the validation succeeds,
    there will be no error message displayed. The attribute value of `asp-validation-for`
    represents the field name for which the validation error message has to be displayed.
    For example, we have used the `span` tag with the `asp-validation-for` attribute
    and with the value `Name` , which tells ASP.NET MVC to display the validation
    error message for the `Name` field:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个字段，我们添加了一个`span`标签，当验证失败时，错误消息将以红色显示。当验证成功时，将不会显示错误消息。`asp-validation-for`属性的值表示需要显示验证错误消息的字段名称。例如，我们使用了带有`asp-validation-for`属性和值`Name`的`span`标签，这告诉ASP.NET
    MVC显示`Name`字段的验证错误消息：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Updating the controller action method to verify the model state
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新控制器操作方法以验证模型状态
- en: 'The model state is automatically updated based on the Data Annotation attribute
    specified on our View model and the input data. We are verifying whether the model
    state is valid in the following `Index` method, which is a `POST` action method.
    If the model state is valid (when the validation succeeds), we save the entered
    data to the database. If the validation fails, then the `ModelState` is set to
    `invalid` automatically. Then, we would populate the `ViewModel` with the entered
    data and render the `View` method again so that the user can correct the input
    data and re-submit the data:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 模型状态会根据我们在视图模型上指定的数据注释属性和输入数据自动更新。我们在以下`Index`方法中验证模型状态是否有效，这是一个`POST`操作方法。如果模型状态有效（验证成功），我们将保存输入的数据到数据库。如果验证失败，则`ModelState`会自动设置为`invalid`。然后，我们会用输入的数据填充`ViewModel`并再次渲染`View`方法，以便用户可以纠正输入数据并重新提交数据：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: When you run the application after making aforementioned changes and submit
    the form without entering the values, error messages will be displayed beside
    the fields as shown in the following screenshot. Please note that, even in the
    case of a validation error, we display the employees' data in the following table,
    which is achieved by using the code block in the previous code snippet.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在对应用程序进行上述更改后运行应用程序并提交表单而不输入值时，将显示与字段旁边的错误消息，如下面的截图所示。请注意，即使在验证错误的情况下，我们也会在以下表格中显示员工数据，这是通过使用前一个代码片段中的代码块实现的。
- en: '![Updating the controller action method to verify the model state](img/Image00104.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![更新控制器操作方法以验证模型状态](img/Image00104.jpg)'
- en: 'There are a few things to be noted in the previous validation and its error
    message:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的验证及其错误消息中，有一些需要注意的事项：
- en: If the validation fails, error messages are displayed as expected.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果验证失败，将显示预期的错误消息。
- en: If there is more than one validation for a field, it will display one error
    message at a time. For example, we have a couple of validations for  **Designation**
     field—the `Required` and `MinLength` attributes. If there is no data entered
    for the field, only the required field error message will be displayed. Only when
    the required field error is resolved (by entering some characters in the field),
    the second validation error message will be displayed.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果一个字段有多个验证，它将一次显示一个错误消息。例如，我们对`Designation`字段有几个验证——`Required`和`MinLength`属性。如果没有为该字段输入数据，则只会显示必填字段错误消息。只有当必填字段错误得到解决（在字段中输入一些字符）时，第二个验证错误消息才会显示。
- en: If no error message is available and if the validation fails, the default error
    message is displayed. We have not given any error message for the **Salary** field.
    So, when the validation fails for that field, ASP.NET MVC displays the default
    error message based on the field name and the type of validation failure.![Updating
    the controller action method to verify the model state](img/Image00105.jpg)
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果没有错误消息可用且验证失败，将显示默认错误消息。我们没有为**薪资**字段提供任何错误消息。因此，当该字段的验证失败时，ASP.NET MVC将根据字段名称和验证失败类型显示基于字段的默认错误消息。![更新控制器操作方法以验证模型状态](img/Image00105.jpg)
- en: 'The preceding figure depicts the high-level sequence of events in server-side
    validation and is described as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图示展示了服务器端验证的高级事件序列，具体描述如下：
- en: The user enters the invalid data.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户输入了无效数据。
- en: Based on the Data Annotations attribute in the View model, the model state is
    updated automatically. This happens during the model binding process where the
    data in the `view` method is mapped to the data in the model or View model.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据视图模型中的数据注释属性，模型状态会自动更新。这发生在模型绑定过程中，其中`view`方法中的数据映射到模型或视图模型中的数据。
- en: In the controller's action method, we are verifying the model state.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制器的操作方法中，我们正在验证模型状态。
- en: If the model state is valid, we are saving the entered data to the database.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果模型状态有效，我们将保存输入的数据到数据库。
- en: If the model state is not valid, we are rending the View model again with the
    validation error message so that the user can correct the input data and submit
    the form again with the valid input data.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果模型状态无效，我们将再次渲染带有验证错误消息的视图模型，以便用户可以更正输入数据，并使用有效输入数据再次提交表单。
- en: Client-side validation
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户端验证
- en: There are scenarios where we don't need to go to the server to validate the
    input data. In the preceding example of the server-side validation, we do not
    need to go to the server to verify whether the user has entered the data for the
    **Name** field. We can validate at the client-side itself. This prevents round-trips
    to the server and reduces the server load.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些场景中我们不需要去服务器验证输入数据。在前面的服务器端验证示例中，我们不需要去服务器验证用户是否为**姓名**字段输入了数据。我们可以在客户端本身进行验证。这防止了往返服务器，并减少了服务器负载。
- en: We are going to use JavaScript to validate the data from the client-side. JavaScript
    is a high-level, interpreted language which is primarily used in client-side programming.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用JavaScript从客户端验证数据。JavaScript是一种高级、解释型语言，主要用于客户端编程。
- en: Note
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: These days, JavaScript is also being used at the server-side as part of Node.js.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这些天，JavaScript也被用作Node.js的一部分在服务器端。
- en: 'We are going to make a couple of changes in our View model (`Index.cshtml`
    file) to validate the form at the client-side:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在我们的视图模型（`Index.cshtml`文件）中进行一些更改，以在客户端验证表单：
- en: 'Changes in the form: add the `id` attribute to all the `span` tags so that
    we can access this HTML element to display the HTML error message. On submission
    of the form, call a JavaScript function to validate the input data.'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 表单中的更改：将`id`属性添加到所有`span`标签中，以便我们可以访问此HTML元素来显示HTML错误消息。在表单提交时，调用一个JavaScript函数来验证输入数据。
- en: Add the script HTML element and create a JavaScript function to validate the
    input data.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加脚本HTML元素并创建一个JavaScript函数来验证输入数据。
- en: 'In the following code, we are calling the `validateForm` JavaScript function
    on submission of the form. If the `validateForm` function returns `true` , the
    data will be sent to the server. Otherwise, the data will not be sent. We have
    added the `id` attribute for all the `span` tags so that we can identify the `span`
    tags and display the validation error messages over there:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，我们在表单提交时调用`validateForm` JavaScript函数。如果`validateForm`函数返回`true`，则数据将被发送到服务器。否则，数据将不会发送。我们已为所有`span`标签添加了`id`属性，以便我们可以识别`span`标签并在那里显示验证错误消息：
- en: '[PRE3]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We have added the JavaScript function to validate all three fields. We get
    the values of all the three fields and we store them in separate variables. Then
    we verify whether the value of each of the variables is null or empty. If the
    value is empty, we get the `span` element for the respective field and set the
    text context with the validation error message:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已添加JavaScript函数来验证所有三个字段。我们获取所有三个字段的值并将它们存储在单独的变量中。然后我们验证每个变量的值是否为null或空。如果值为空，我们获取相应字段的`span`元素并设置文本上下文为验证错误消息：
- en: '[PRE4]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: When you run the application and submit the form without entering the data,
    you'll get the error message generated from the client-side itself without ever
    going to the server.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行应用程序并提交表单而没有输入数据时，你会收到客户端本身生成的错误消息，而无需访问服务器。
- en: '![Client-side validation](img/Image00106.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![客户端验证](img/Image00106.jpg)'
- en: In real-world applications, we would not be hand coding the validation code
    at the JavaScript. Instead, most applications use unobtrusive validation, where
    we do not write JavaScript code for validating each of the fields. Simply adding
    the respective JavaScript libraries will do.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实世界的应用程序中，我们不会手动在 JavaScript 中编写验证代码。相反，大多数应用程序使用无侵入验证，我们不需要为每个字段编写 JavaScript
    代码。只需添加相应的 JavaScript 库即可。
- en: You might wonder how the fields get validated without ever writing the code.
    The magic lies in the `data-` attributes added to the input HTML elements based
    on the Data Annotation attributes. This jQuery unobtrusive library gets a list
    of fields for which `data-` attributes are added and it gets validated.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想知道字段是如何在没有编写代码的情况下进行验证的。这个魔法在于根据数据注释属性添加到输入 HTML 元素中的 `data-` 属性。这个 jQuery
    无侵入库获取到添加了 `data-` 属性的字段列表，并进行验证。
- en: 'Run the application and press *Ctrl* + *U* to see the source code. The source
    code will look something like the following:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序并按 *Ctrl* + *U* 键查看源代码。源代码看起来可能如下所示：
- en: '![Client-side validation](img/Image00107.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![客户端验证](img/Image00107.jpg)'
- en: Different attributes will be added to different kinds of Data Annotation attributes.
    For the fields to be validated, the `data-val` attribute would be set to `true`
    . For the properties which are marked as required in the View model, the `data-val-required`
    attribute will have the value of the error message of the associated property.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的属性将被添加到不同类型的数据注释属性中。对于需要验证的字段，`data-val` 属性将被设置为 `true`。对于在视图模型中标记为必填的属性，`data-val-required`
    属性将具有相关属性的错误消息值。
- en: Implementation
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现
- en: 'There will be a layout file (`_Layout.cshtml` ) to define the layout structure
    of your web application. As JavaScript libraries are going to be used in all the
    pages, this is the right place to add common functionalities such as unobtrusive
    validation. Just add the JavaScript libraries (highlighted in bold) to the layout
    file (`_Layout.cshtml` ) so that they will be available for all the `View` files:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 将有一个布局文件 (`_Layout.cshtml` ) 来定义你的 Web 应用程序的布局结构。由于所有页面都将使用 JavaScript 库，这是添加诸如无侵入验证等常见功能的好地方。只需将
    JavaScript 库（粗体显示）添加到布局文件 (`_Layout.cshtml` ) 中，这样它们就会对所有 `View` 文件可用：
- en: '[PRE5]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'There is no change to the View model except for the removal of the JavaScript
    function we wrote earlier for validating the fields. The complete code for the
    view is as following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 除了移除我们之前编写的用于验证字段的 JavaScript 函数外，视图模型没有发生变化。视图的完整代码如下：
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![Implementation](img/Image00108.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![实现](img/Image00108.jpg)'
- en: 'The preceding diagram depicts the unobtrusive client validation process:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 上述图解展示了无侵入客户端验证过程：
- en: Data Annotations are added to `Model` /`ViewModels` .
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Model` /`ViewModels` 中添加了数据注释。
- en: The view takes `Model` /`ViewModels` and generates the HTML.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 视图接受 `Model` /`ViewModels` 并生成 HTML。
- en: 'The generated HTML from the View model contains `data-*` attributes:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 视图模型生成的 HTML 包含 `data-*` 属性：
- en: For the fields for which the `Required` attribute is set, the `data-val-required`
    attribute is created with the error message as its value.
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于设置了 `Required` 属性的字段，将创建 `data-val-required` 属性，其值为错误消息。
- en: For the fields with the `MinLength` Data Annotation attribute, the `data-val-minlength`
    attribute is set with the error message as its value.
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于具有 `MinLength` 数据注释属性的字段，`data-val-minlength` 属性设置为错误消息的值。
- en: For the range Data Annotation, the `data-val-range` attribute is set with the error
    message as its value. The `data-val-range-max` represents the maximum value in
    the range and the `data-val-range-min` attribute represents the minimum value
    in the range.
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于范围数据注释，`data-val-range` 属性设置为错误消息的值。`data-val-range-max` 表示范围的最大值，而 `data-val-range-min`
    属性表示范围的最小值。
- en: The jQuery unobtrusive validation library reads these elements with `data-*`
    attributes and does the client-side validation. This allows the developer to not
    write the separation validation code using JavaScript as everything is resolved
    by the configuration itself.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: jQuery无障碍验证库通过`data-*`属性读取这些元素并执行客户端验证。这允许开发者不必使用JavaScript编写分离的验证代码，因为所有内容都由配置本身解决。
- en: Summary
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned about the need for validation and the different
    kinds of validation available. We have even discussed how client-side and server-side
    validation work, along with the pros and cons of each type of validation. Later,
    we made code changes to validate the input data at the server-side. Then we used
    JavaScript to validate the input data in the client-side itself. Finally, we used
    the jQuery unobtrusive library to do the client-side validation without ever writing
    the JavaScript code to validate the input data at the client-side.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了验证的需求以及可用的不同类型的验证。我们还讨论了客户端和服务器端验证的工作原理，以及每种类型验证的优缺点。随后，我们对代码进行了更改，以在服务器端验证输入数据。然后我们使用JavaScript在客户端本身验证输入数据。最后，我们使用jQuery无障碍库在客户端进行验证，而无需编写任何用于在客户端验证输入数据的JavaScript代码。
- en: In the next chapter, we will discuss the routing principle and how to customize
    it. In an earlier chapter, we saw the basics of routing in an ASP.NET 5 application.
    Now we are going to explore the topic in depth.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论路由原理以及如何自定义它。在早期章节中，我们看到了ASP.NET 5应用程序中路由的基础。现在我们将深入探讨这个主题。
- en: 读累了记得休息一会哦~
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 看累了记得休息一会哦~
- en: '**公众号：古德猫宁李**'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**公众号：古德猫宁李**'
- en: 电子书搜索下载
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子书搜索下载
- en: 书单分享
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 书单分享
- en: 书友学习交流
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 书友学习交流
- en: '**网站：**[沉金书屋 https://www.chenjin5.com](https://www.chenjin5.com)'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**网站：**[沉金书屋 https://www.chenjin5.com](https://www.chenjin5.com)'
- en: 电子书搜索下载
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子书搜索下载
- en: 电子书打包资源分享
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子书打包资源分享
- en: 学习资源分享
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习资源分享
