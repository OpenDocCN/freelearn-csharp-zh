- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Authentication and Authorization
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 身份验证和授权
- en: Authentication and authorization are fundamental concepts in software development
    and have particular importance in the context of **software-as-a-service** (**SaaS**)
    applications. In a SaaS context, all of the users’ data is typically stored remotely
    and is only as secure as the authentication and authorization mechanisms. These
    mechanisms help to ensure that users can interact with the application in a secure
    and controlled manner and that sensitive data and resources are protected from
    unauthorized access.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 身份验证和授权是软件开发中的基本概念，在**软件即服务**（**SaaS**）应用的背景下尤为重要。在SaaS环境中，所有用户数据通常都存储在远程位置，其安全性仅与身份验证和授权机制相当。这些机制有助于确保用户可以以安全和受控的方式与应用交互，并且敏感数据和资源可以免受未经授权的访问。
- en: In this chapter, we will explore the key concepts and best practices for implementing
    authentication and authorization, with a focus on doing so in a SaaS application.
    Of course, we will focus on the Microsoft stack, but the principles that we cover
    should be applicable to most modern options for web development. We will begin
    by discussing the differences between authentication and authorization and how
    these mechanisms work together to provide a secure environment for users and their
    data.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨实现身份验证和授权的关键概念和最佳实践，重点关注在SaaS应用中实现这些功能。当然，我们将重点关注Microsoft技术栈，但我们所讨论的原则应该适用于大多数现代的Web开发选项。我们将从讨论身份验证和授权之间的区别以及这些机制如何协同工作以提供用户及其数据的安全环境开始。
- en: We will then move on to explore some of the technical considerations for implementing
    authentication and authorization in a SaaS application and will consider some
    of the specific challenges that are faced by developers of such applications.
    In particular, we’ll consider how multi-tenancy (as discussed in [*Chapter 3*](B19343_03.xhtml#_idTextAnchor082))
    and microservice architecture (as discussed in [*Chapter 6*](B19343_06.xhtml#_idTextAnchor140))
    impact the security landscape.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探讨在SaaS应用中实现身份验证和授权的一些技术考虑因素，并考虑这些应用开发者面临的一些具体挑战。特别是，我们将考虑多租户（如在第[*3章*](B19343_03.xhtml#_idTextAnchor082)中讨论的）和微服务架构（如在第[*6章*](B19343_06.xhtml#_idTextAnchor140)中讨论的）如何影响安全格局。
- en: Throughout an application’s life cycle, users will come and go, and at times
    they will change their roles within the application. We’ll take a look at how
    to manage the changing and hopefully growing user base.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个应用的生命周期中，用户会来来去去，有时他们会在应用中改变他们的角色。我们将探讨如何管理不断变化且希望增长的用户基础。
- en: Finally, we’ll work on a practical example, where we will add authentication
    and authorization to our demo application, using the skills we have covered in
    this chapter to build a robust model for security that could be scaled up for
    use in a real-world application.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将通过一个实际示例来工作，在这个示例中，我们将使用本章中介绍的技术，将身份验证和授权添加到我们的演示应用中，构建一个健壮的安全模型，该模型可以扩展到用于实际应用。
- en: By the end of this chapter, you will have a clear understanding of the fundamental
    concepts and best practices for implementing authentication and authorization
    in a SaaS application. You will also have a deeper appreciation for the importance
    of getting these mechanisms right and how doing so can help to protect valuable
    data and resources, as well as build trust and confidence among users!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将清楚地理解在SaaS应用中实现身份验证和授权的基本概念和最佳实践。你还将更深入地理解正确实现这些机制的重要性，以及这样做如何有助于保护宝贵的数据和资源，以及如何在用户之间建立信任和信心！
- en: 'The main topics covered in this chapter are the following:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涉及的主要主题如下：
- en: An overview of authentication and authorization
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 身份验证和授权概述
- en: Challenges arising from core SaaS concepts, such as multi-tenancy and microservices
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由核心SaaS概念（如多租户和微服务）引发的问题
- en: How to manage users, roles, and permissions
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何管理用户、角色和权限
- en: Adding authentication and authorization to our demo app
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的演示应用中添加身份验证和授权
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: All code from this chapter can be found at [https://github.com/PacktPublishing/Building-Modern-SaaS-Applications-with-C-and-.NET/tree/main/Chapter-8](https://github.com/PacktPublishing/Building-Modern-SaaS-Applications-with-C-and-.NET/tree/main/Chapter-8).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中所有代码都可以在[https://github.com/PacktPublishing/Building-Modern-SaaS-Applications-with-C-and-.NET/tree/main/Chapter-8](https://github.com/PacktPublishing/Building-Modern-SaaS-Applications-with-C-and-.NET/tree/main/Chapter-8)找到。
- en: What are authentication and authorization
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 认证和授权是什么
- en: 'Before diving into the implementation details, let’s take a moment to understand
    the fundamental concepts of authentication and authorization using a real-world
    analogy. Imagine that your application is like a secured building, and the various
    resources or actions within the application are represented by rooms inside the
    building. To ensure the security of the building and its contents, access to the
    rooms is controlled by a two-step process: authentication and authorization.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入实施细节之前，让我们花一点时间通过一个现实世界的类比来理解认证和授权的基本概念。想象一下，你的应用程序就像一个安全的大楼，而应用程序中的各种资源或操作由大楼内的房间表示。为了确保大楼及其内容的安保，房间的访问通过两步过程进行控制：认证和授权。
- en: Authentication is the process of verifying the identity of a person or entity
    attempting to access the building, much like presenting an ID card to the security
    guard at the entrance. In the context of an application, authentication involves
    confirming that a user is who they claim to be, typically through the use of a
    username and password. This is the first step in ensuring the security of your
    application.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 认证是验证试图进入大楼的人或实体的身份的过程，就像在入口处向保安出示身份证一样。在应用程序的上下文中，认证涉及确认用户是他们所声称的人，通常是通过使用用户名和密码。这是确保你的应用程序安全的第一步。
- en: Once a user’s identity has been authenticated and they have been allowed to
    enter the building, the next step is to determine what they are allowed to do
    within the building. This is where authorization comes into play. Authorization
    is the process of granting or denying access to specific resources or actions
    based on the authenticated user’s permissions, just like an access card or key
    you receive after your identity is verified. These permissions are usually assigned
    through roles or claims and can be as simple or complex as your application requires.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦用户的身份得到验证并被允许进入大楼，下一步就是确定他们在大楼内可以做什么。这就是授权发挥作用的地方。授权是根据经过验证的用户权限，授予或拒绝访问特定资源或操作的过程，就像在身份验证后获得的访问卡或钥匙一样。这些权限通常通过角色或声明分配，可以像你的应用程序所需的那样简单或复杂。
- en: This idea of a secured building with ID required to get into the building, and
    then once in, keycard access for certain parts of the building, is a very useful
    analogy for authentication and authorization that you should keep in mind as we
    dive a little deeper into these concepts!
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这种需要ID才能进入大楼，进入后对大楼的某些部分使用钥匙卡访问的想法，是认证和授权的一个非常有用的类比，你应该在我们深入探讨这些概念时牢记在心！
- en: Authentication
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 认证
- en: We’ll start by delving deeper into the various aspects of authentication, exploring
    different forms and methods, their implementation in .NET, and best practices.
    By understanding the nuances of authentication and how to properly implement it,
    you can build a robust foundation for protecting your application and its users
    as the rest of the application takes shape.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先深入探讨认证的各个方面，包括不同的形式和方法，它们在.NET中的实现以及最佳实践。通过理解认证的细微差别以及如何正确实施它，你可以在应用程序的其余部分成形时，为保护你的应用程序及其用户建立一个坚实的基础。
- en: While most often, we think of a username and password for authentication, there
    are a few ways to approach this. Alternatives to username and password include
    token-based authentication, **multi-factor authentication** (**MFA**), and **single
    sign-on** (**SSO**). We will take a look at how to implement these authentication
    methods, with a focus on how this works in .NET-based applications.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们通常认为用户名和密码是认证的方式，但还有几种方法可以接近这个问题。用户名和密码的替代方案包括基于令牌的认证、**多因素认证**（**MFA**）和**单点登录**（**SSO**）。我们将探讨如何实现这些认证方法，重点关注这些方法在基于.NET的应用程序中的工作方式。
- en: We will also cover some other important topics, such as securely storing passwords
    and secrets, as well as best practices for enforcing strong password policies
    and implementing account lockout policies.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将涵盖一些其他重要主题，例如安全地存储密码和机密信息，以及实施强密码策略和账户锁定策略的最佳实践。
- en: Forms of authentication
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 认证形式
- en: In the world of application security, there are several forms of authentication
    to verify the identity of someone wishing to use the application. Each method
    has its own advantages and limitations.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序安全的世界里，有几种认证形式来验证希望使用应用程序的人的身份。每种方法都有其自身的优点和局限性。
- en: The most common form of authentication is a simple username and password system,
    with which we are all familiar! This method relies on users keeping their passwords
    confidential and choosing strong, complex passwords to reduce the risk of unauthorized
    access, which can be a fairly significant flaw in a security system!
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的身份验证形式是简单的用户名和密码系统，这是我们所有人都熟悉的！这种方法依赖于用户保持其密码的机密性，并选择强大、复杂的密码以降低未经授权访问的风险，这在安全系统中可能是一个相当显著的缺陷！
- en: Using MFA can help to mitigate this. MFA requires users to provide two or more
    forms of authentication to verify their identity, which can greatly improve a
    system’s overall security.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 使用多因素认证（MFA）可以帮助减轻这一问题。多因素认证要求用户提供两种或多种身份验证方式以验证其身份，这可以大大提高系统的整体安全性。
- en: In an enterprise setting, it is common for the organization to use SSO. This
    allows users to access multiple related applications or services using a single
    set of credentials. The big advantage of this is that the organization has a lot
    of control over the security setup. For example, they are able to insist on passwords
    of a certain complexity or enforce MFA.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在企业环境中，组织通常使用单点登录（SSO）。这允许用户使用一组凭证访问多个相关应用程序或服务。这个优点是组织对安全设置有更多的控制。例如，他们可以坚持使用特定复杂性的密码或强制执行多因素认证。
- en: Implementing authentication in .NET
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 .NET 中实现身份验证
- en: In this subsection, we will explore how to implement various authentication
    methods in .NET using ASP.NET Core Identity and integrating with external authentication
    providers. We will discuss the configuration and customization of these methods
    to align with your application’s requirements.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在本小节中，我们将探讨如何在 .NET 中使用 ASP.NET Core Identity 实现各种身份验证方法，并与外部身份验证提供者集成。我们将讨论这些方法的配置和定制，以符合您应用程序的需求。
- en: Later in this chapter, we will use these techniques to add authentication to
    our demo application.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的后面部分，我们将使用这些技术为我们的演示应用程序添加身份验证。
- en: ASP.NET Core Identity
  id: totrans-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ASP.NET Core Identity
- en: 'ASP.NET Core Identity is a flexible and extensible framework that provides
    a secure way to manage user authentication and authorization. It includes features
    such as password hashing, two-factor authentication, and support for external
    authentication providers. To get started with ASP.NET Core Identity, you’ll need
    to install the necessary NuGet packages and configure your application by following
    these steps:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core Identity 是一个灵活且可扩展的框架，它提供了一种安全的方式来管理用户身份验证和授权。它包括密码散列、双因素认证以及支持外部身份验证提供者等功能。要开始使用
    ASP.NET Core Identity，您需要安装必要的 NuGet 包，并按照以下步骤配置您的应用程序：
- en: 'Install the required NuGet packages with the following command:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令安装所需的 NuGet 包：
- en: '[PRE0]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Update your application’s `DbContext` to inherit from `IdentityDbContext`, which
    includes the necessary `Identity` tables for storing user information.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新您的应用程序的 `DbContext` 以继承自 `IdentityDbContext`，它包括存储用户信息的必要 `Identity` 表。
- en: Register the `Identity` services in the `ConfigureServices` method of your `Startup`
    class by adding `services.AddIdentity` and `services.AddAuthentication`.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Startup` 类的 `ConfigureServices` 方法中注册 `Identity` 服务，通过添加 `services.AddIdentity`
    和 `services.AddAuthentication`。
- en: Configure middleware for `Identity` and authentication by adding `app.UseAuthentication`
    and `app.UseAuthorization` in the `Configure` method of your `Startup` class.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在 `Startup` 类的 `Configure` 方法中添加 `app.UseAuthentication` 和 `app.UseAuthorization`
    来配置 `Identity` 和身份验证的中间件。
- en: Modify your views and controllers to include the necessary authentication functionality,
    such as login, registration, and logout actions.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改您的视图和控制器以包含必要的身份验证功能，例如登录、注册和注销操作。
- en: You will see the preceding steps in action when we add authentication to the
    demo application later in this chapter.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在本章后面添加身份验证到演示应用程序时，您将看到前面的步骤是如何发挥作用的。
- en: Integrating with external authentication providers
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 与外部身份验证提供者集成
- en: To enhance the user experience and security of your application, you may want
    to integrate with external authentication providers, such as OAuth 2.0 and OpenID
    Connect, and social logins, such as Microsoft, Google, Facebook, or Twitter.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了增强您应用程序的用户体验和安全，您可能希望与外部身份验证提供者集成，例如 OAuth 2.0 和 OpenID Connect，以及社交登录，如 Microsoft、Google、Facebook
    或 Twitter。
- en: OAuth 2.0 is an authorization framework that enables your application to obtain
    limited access to user accounts on an external service, while **OpenID Connect**
    (**OIDC**) is an authentication layer built on top of OAuth 2.0 that provides
    a secure way to authenticate users and obtain their basic profile information.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: OAuth 2.0 是一个授权框架，它使您的应用程序能够获取对外部服务上用户账户的有限访问权限，而 **OpenID Connect** (**OIDC**)
    是建立在 OAuth 2.0 之上的一个认证层，它提供了一种安全的方式来认证用户并获取他们的基本配置文件信息。
- en: To implement OAuth 2.0 and OIDC in your .NET application, you can use the `Microsoft.AspNetCore.Authentication.OpenIdConnect`
    package. This package includes middleware to handle the OIDC authentication flow,
    such as obtaining an authorization code, exchanging it for an access token, and
    validating the token.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的 .NET 应用程序中实现 OAuth 2.0 和 OIDC，您可以使用 `Microsoft.AspNetCore.Authentication.OpenIdConnect`
    包。此包包括用于处理 OIDC 认证流程的中介件，例如获取授权代码、将其交换为访问令牌以及验证令牌。
- en: Doing so is outside the scope of the demo application, but it may be a useful
    exercise to try and add this yourself!
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做超出了演示应用程序的范围，但尝试自己添加它可能是一个有用的练习！
- en: 'ASP.NET Core Identity also supports integration with popular social login providers
    such as Google, Facebook, and Twitter. To implement social logins in your application,
    follow these steps:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core Identity 也支持与流行的社交登录提供者（如 Google、Facebook 和 Twitter）的集成。要在您的应用程序中实现社交登录，请按照以下步骤操作：
- en: Register your application with the desired social login provider to obtain a
    client ID and client secret.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的应用程序注册到所需的社交登录提供者，以获取客户端 ID 和客户端秘密。
- en: Install the corresponding NuGet package for the social login provider, such
    as `Microsoft.AspNetCore.Authentication.Google`, `Microsoft.AspNetCore.Authentication.Facebook`,
    or `Microsoft.AspNetCore.Authentication.Twitter`.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装社交登录提供者的相应 NuGet 包，例如 `Microsoft.AspNetCore.Authentication.Google`、`Microsoft.AspNetCore.Authentication.Facebook`
    或 `Microsoft.AspNetCore.Authentication.Twitter`。
- en: Configure the social login provider in the `ConfigureServices` method of your
    `Startup` class by adding `services.AddAuthentication().Add[ProviderName]` and
    pass the client ID and client secret obtained earlier.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在 `Startup` 类的 `ConfigureServices` 方法中添加 `services.AddAuthentication().Add[ProviderName]`
    并传递之前获得的客户端 ID 和客户端秘密来配置社交登录提供者。
- en: Update your login view to include buttons or links for each social login provider.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新您的登录视图，以包含每个社交登录提供者的按钮或链接。
- en: Every user of your application will be different and will have different preferences
    for logging into your application. By implementing various authentication methods
    in .NET and integrating with external providers, you can create a secure and user-friendly
    authentication experience for your SaaS application.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您应用程序的每个用户都是不同的，并且对登录您的应用程序有不同的偏好。通过在 .NET 中实现各种认证方法并与外部提供者集成，您可以为您的 SaaS 应用程序创建一个安全且用户友好的认证体验。
- en: Securely storing passwords and secrets
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安全存储密码和秘密
- en: Protecting sensitive information such as user passwords and application secrets
    is crucial to maintaining the security and integrity of your SaaS application.
    In this section, we will discuss techniques for securely storing passwords and
    secrets in your .NET application.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 保护敏感信息，如用户密码和应用秘密，对于维护您的 SaaS 应用程序的安全性和完整性至关重要。在本节中，我们将讨论在您的 .NET 应用程序中安全存储密码和秘密的技术。
- en: Password hashing and salting
  id: totrans-54
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 密码哈希和加盐
- en: When storing a user’s password in a database, or anywhere for that matter, storing
    that password in ‘plaintext’ is always a huge mistake that will compromise your
    application security. Instead, passwords should be hashed and salted before being
    stored in the database.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当在数据库中存储用户的密码或任何其他地方时，将密码以“明文”形式存储始终是一个巨大的错误，这将危害您应用程序的安全性。相反，密码应在存储到数据库之前进行哈希和加盐处理。
- en: Plaintext refers to storing the password as the user enters it. So if the password
    is ‘Passw0rd1’, then that string is the plaintext representation of that password.
    Hashing is a one-way function that transforms the password into a fixed-length
    string of characters, while salting involves adding a random value (which is known
    as ‘the salt’) to the password before hashing to prevent attacks using precomputed
    tables.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 明文是指将密码以用户输入的形式存储。所以如果密码是‘Passw0rd1’，那么这个字符串就是该密码的明文表示。哈希是一种单向函数，它将密码转换为一个固定长度的字符字符串，而加盐则是在哈希之前向密码中添加一个随机值（称为“盐”），以防止使用预计算表进行的攻击。
- en: ASP.NET Core Identity automatically handles password hashing and salting using
    the `IdentityOptions.Password` settings in the `ConfigureServices` method of your
    `Startup` class.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core Identity 自动处理密码散列和加盐，这是通过在 `Startup` 类的 `ConfigureServices` 方法中设置
    `IdentityOptions.Password` 来实现的。
- en: Leveraging the built-in identity tools in .NET offers significant advantages.
    Developing custom identity providers can be both challenging and error-prone.
    Utilizing well-established and battle-tested solutions is always the preferred
    approach!
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 利用 .NET 内置的身份工具提供了显著的优势。开发自定义身份提供者可能既具有挑战性又容易出错。利用经过良好建立和实战检验的解决方案始终是首选的方法！
- en: Securely managing API keys and other secrets
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安全管理 API 密钥和其他秘密
- en: In addition to users’ passwords, your application may also rely on sensitive
    information such as API keys, connection strings, or encryption keys. Again, storing
    these secrets in plaintext or hardcoding them in your source code is a mistake
    that can expose your application to security risks and should be avoided at all
    costs!
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 除了用户的密码外，您的应用程序还可能依赖于敏感信息，如 API 密钥、连接字符串或加密密钥。同样，将这些秘密以纯文本形式存储或在源代码中硬编码是一种错误，可能会使您的应用程序面临安全风险，应不惜一切代价避免！
- en: In much the same way that the built-in .NET Core Identity services should be
    used, pre-existing and battle-tested tools and technologies should be used to
    manage the application secrets. Here are some best practices that should be your
    go-to approach!
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 与内置的 .NET Core Identity 服务应被使用的方式类似，应使用现有的、经过实战检验的工具和技术来管理应用程序的秘密。以下是一些您应该采取的最佳实践！
- en: '`IConfiguration` interface in your application. This is a great way to keep
    development secrets separate from the secrets of the production environment.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的应用程序中，`IConfiguration` 接口是一个很好的方法，可以将开发秘密与生产环境的秘密分开。
- en: '**Environment variables**: Storing secrets in environment variables helps to
    keep them separate from your application code and allows for easy configuration
    changes. In production environments, consider using a centralized configuration
    management solution to manage environment variables and secrets securely.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**环境变量**：将秘密存储在环境变量中有助于将它们与应用程序代码分开，并允许轻松进行配置更改。在生产环境中，请考虑使用集中式配置管理解决方案来安全地管理环境变量和秘密。'
- en: '`Microsoft.Extensions.Configuration.AzureKeyVault` package and configure it
    in your `Startup` class.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `Microsoft.Extensions.Configuration.AzureKeyVault` 包，并在您的 `Startup` 类中进行配置。
- en: By securely storing passwords and application secrets, you help protect your
    application and its data from unauthorized access and potential security breaches.
    Adopting these best practices will ensure that sensitive information remains confidential
    and secure in your .NET-based SaaS application.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 通过安全地存储密码和应用程序秘密，您有助于保护您的应用程序及其数据免受未经授权的访问和潜在的安全漏洞。采用这些最佳实践将确保敏感信息在您的基于 .NET
    的 SaaS 应用程序中保持机密和安全。
- en: Authentication best practices
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 身份验证最佳实践
- en: Implementing a secure and effective authentication process is crucial for the
    overall security of your SaaS application. By following best practices, you can
    enhance the user experience, improve security, and minimize the risk of unauthorized
    access.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 实施一个安全有效的身份验证过程对于您 SaaS 应用程序的整体安全性至关重要。通过遵循最佳实践，您可以提升用户体验，提高安全性，并最小化未经授权访问的风险。
- en: Enforcing strong password policies
  id: totrans-68
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 强制执行强密码策略
- en: 'To protect against weak or easily guessed passwords, enforce strong password
    policies in your application. ASP.NET Core Identity allows you to configure password
    requirements, such as minimum length, complexity, and character types. Consider
    the following guidelines for strong password policies:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止弱密码或容易猜测的密码，请在您的应用程序中强制执行强密码策略。ASP.NET Core Identity 允许您配置密码要求，例如最小长度、复杂性和字符类型。请考虑以下关于强密码策略的指南：
- en: Require a minimum length of at least 12 characters; more is better. Passwords
    that are too short can easily fall to brute force attacks.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密码的最小长度至少为 12 个字符；越长越好。过短的密码很容易受到暴力破解攻击。
- en: Enforce the use of a mix of character types, including uppercase and lowercase
    letters, numbers, and special characters. Increasing the number of characters
    to choose from makes the passwords harder to guess.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强制使用字符类型的组合，包括大写和小写字母、数字和特殊字符。增加可选择的字符数量会使密码更难猜测。
- en: Disallow easily guessable passwords or common patterns, such as “password123”
    or “qwerty.”
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 禁止容易猜测的密码或常见模式，例如“password123”或“qwerty”。
- en: Do not require regular password changes. It used to be considered good practice
    to require users to frequently change their passwords, but this is no longer the
    case as frequent changes can lead to weaker passwords, as users struggle to remember
    their ever-changing passwords.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要要求定期更改密码。过去，要求用户频繁更改密码被视为良好的做法，但这种情况已经不再适用，因为频繁的更改可能导致密码强度降低，因为用户难以记住不断变化的密码。
- en: Encourage MFA. MFA adds an extra layer of security by requiring additional verification
    methods beyond the password, such as a one-time code, a hardware token, or biometric
    data.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鼓励使用多因素认证（MFA）。MFA通过要求除密码之外的其他验证方法（如一次性代码、硬件令牌或生物识别数据）来增加额外的安全层。
- en: Monitoring and auditing authentication events
  id: totrans-75
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 监控和审计身份验证事件
- en: Monitoring and auditing authentication events can help you identify suspicious
    activity, detect unauthorized access attempts, and maintain a secure environment
    for your SaaS application. ASP.NET Core Identity provides built-in support for
    logging authentication events, which should always be used over writing your own
    implementation.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 监控和审计身份验证事件可以帮助您识别可疑活动、检测未经授权的访问尝试，并为您的SaaS应用程序维护一个安全的环境。ASP.NET Core Identity提供了内置的身份验证事件日志记录支持，应始终使用它而不是编写自己的实现。
- en: 'Consider implementing the following monitoring and auditing practices:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑实施以下监控和审计实践：
- en: Log all authentication events, including successful logins, failed login attempts,
    password changes, and account lockouts.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录所有身份验证事件，包括成功的登录、失败的登录尝试、密码更改和账户锁定。
- en: Regularly review authentication logs to identify unusual patterns, such as multiple
    failed login attempts from the same IP address or unusual login times. This process
    could be automated.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定期审查身份验证日志以识别异常模式，例如来自同一IP地址的多次失败登录尝试或异常登录时间。此过程可以自动化。
- en: Implement real-time monitoring and alerting for critical authentication events,
    such as repeated failed login attempts or unauthorized access to sensitive resources.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施对关键身份验证事件（如重复的失败登录尝试或对敏感资源的未经授权访问）的实时监控和警报。
- en: Ensure that logs are stored securely and retained for a sufficient period to
    support incident response and forensic analysis.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保日志安全存储并保留足够长的时间以支持事件响应和法医分析。
- en: Implementing account lockout policies
  id: totrans-82
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 实施账户锁定策略
- en: Account lockout policies can help protect against brute-force attacks, where
    an attacker repeatedly attempts to guess a user’s password. ASP.NET Core Identity
    supports account lockout functionality, allowing you to lock out a user’s account
    after a specified number of failed login attempts.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 账户锁定策略可以帮助防止暴力攻击，其中攻击者反复尝试猜测用户的密码。ASP.NET Core Identity支持账户锁定功能，允许您在指定数量的失败登录尝试后锁定用户的账户。
- en: 'Consider the following guidelines when implementing account lockout policies:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在实施账户锁定策略时考虑以下指南：
- en: Set a reasonable threshold for the number of failed login attempts before locking
    an account, such as 3–5 attempts.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在锁定账户之前设置合理的失败登录尝试次数阈值，例如3-5次尝试。
- en: Determine an appropriate lockout duration, balancing security concerns with
    user experience. This could range from a few minutes to several hours, depending
    on your application’s requirements.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定适当的锁定持续时间，在安全问题和用户体验之间取得平衡。这可以从几分钟到几小时不等，具体取决于您应用程序的需求。
- en: Implement a mechanism for users to unlock their accounts, such as by contacting
    support, resetting their password, or using a secondary authentication factor.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施用户解锁账户的机制，例如通过联系支持、重置密码或使用二级身份验证因素。
- en: Monitor account lockout events to identify potential brute-force attacks or
    other security threats.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控账户锁定事件以识别潜在的暴力攻击或其他安全威胁。
- en: It is often the case with the development that the team can, to a certain extent,
    pick and choose which best practices they want to strictly adhere to. This is
    fine for the most part but is decidedly not so when it comes to authentication.
    Commonly understood best practices should always be followed, and out-of-the-box
    implementations are always preferred over in-house tools. By keeping the preceding
    best practices in mind from the start of the development process, we can be sure
    that our SaaS application is as secure as possible!
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发过程中，团队可以在一定程度上选择他们想要严格遵循的最佳实践。这在大多数情况下是可以的，但在身份验证方面却截然不同。应始终遵循公认的最好实践，并且始终首选开箱即用的实现，而不是内部工具。通过在开发过程开始时牢记这些最佳实践，我们可以确保我们的SaaS应用程序尽可能安全！
- en: Authorization
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 授权
- en: We have covered authentication in detail; now, it is time to move on to authorization.
    Authorization involves determining what actions and resources an authenticated
    user is allowed to access within your application.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经详细介绍了身份验证；现在，是时候转向授权了。授权涉及确定已验证用户在您的应用程序中可以访问哪些操作和资源。
- en: We will begin by discussing the core concepts of authorization, such as **role-based
    access control** (**RBAC**), **claims-based access control** (**CBAC**), and **attribute-based
    access control** (**ABAC**). Next, we will look into the implementation of authorization
    in .NET using ASP.NET Core Authorization Policies, Role, and Claims Management
    with ASP.NET Core Identity and Custom Authorization Middleware and Filters.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先讨论授权的核心概念，如**基于角色的访问控制**（**RBAC**）、**基于声明的访问控制**（**CBAC**）和**基于属性的访问控制**（**ABAC**）。接下来，我们将探讨使用ASP.NET
    Core授权策略、角色和声明管理以及自定义授权中间件和过滤器在.NET中实现授权。
- en: Finally, we will discuss best practices for authorization, including the **principle
    of least privilege** (**POLP**), **separation of duties** (**SoD**), and regular
    auditing and monitoring of access controls.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将讨论授权的最佳实践，包括**最小权限原则**（**POLP**）、**职责分离**（**SoD**）以及定期审计和监控访问控制。
- en: Understanding authorization concepts
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解授权概念
- en: Let’s start by looking at the core concepts of authorization, which involve
    determining the actions and resources a user is allowed to access within an application.
    By understanding these concepts, you can create a secure and efficient access
    control system for your SaaS application.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从查看授权的核心概念开始，这些概念涉及确定用户在应用程序中可以访问哪些操作和资源。通过理解这些概念，您可以为您SaaS应用程序创建一个安全且高效的访问控制系统。
- en: Role-Based Access Control (RBAC)
  id: totrans-96
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 基于角色的访问控制（RBAC）
- en: RBAC is an approach to authorization that assigns users to specific roles, which
    in turn grants them permission to perform certain actions or access specific resources.
    RBAC simplifies the management of access control by allowing you to define and
    manage permissions at the role level rather than assigning permissions directly
    to individual users.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: RBAC是一种授权方法，它将用户分配到特定的角色，从而授予他们执行某些操作或访问特定资源的权限。RBAC通过允许您在角色级别而不是直接分配给单个用户来管理权限，从而简化了访问控制的管理。
- en: Examples of roles in a SaaS application might include “administrator,” “manager,”
    and “user,” each with different levels of access to application resources and
    functionality.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: SaaS应用中角色的示例可能包括“管理员”、“经理”和“用户”，每个角色对应用程序资源和功能具有不同的访问级别。
- en: RBAC is typically used when managing permissions for groups of users with similar
    responsibilities, making it easier to grant and revoke access to resources based
    on predefined roles.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: RBAC通常用于管理具有相似职责的用户组权限，这使得根据预定义的角色更容易授予和撤销对资源的访问权限。
- en: Claims-Based Access Control (CBAC)
  id: totrans-100
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 基于声明的访问控制（CBAC）
- en: CBAC is an alternative approach to authorization that focuses on claims, which
    are pieces of information about a user, such as their name, role, or other attributes.
    In CBAC, permissions are granted based on the user’s claims rather than their
    role.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: CBAC是一种关注声明的授权替代方法，声明是关于用户的信息片段，例如他们的姓名、角色或其他属性。在CBAC中，权限是基于用户的声明而不是他们的角色授予的。
- en: This approach allows for more fine-grained access control and can provide a
    more flexible and dynamic authorization system compared to RBAC. Claims can be
    issued by your application or external authentication providers, such as social
    logins or enterprise identity systems such as **Azure Active Directory** (**Azure
    AD**).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法允许进行更细粒度的访问控制，并且与 RBAC 相比，可以提供更灵活和动态的授权系统。声明可以由您的应用程序或外部身份验证提供者（如社交登录或企业身份系统，例如
    **Azure Active Directory**（Azure AD））颁发。
- en: Claims-based access control is preferred when you need more fine-grained and
    dynamic control over user access.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当您需要更细粒度和动态控制用户访问时，基于声明的访问控制是首选。
- en: Attribute-Based Access Control (ABAC)
  id: totrans-104
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 基于属性的访问控制（ABAC）
- en: ABAC is a more advanced approach to authorization that evaluates a set of attributes
    associated with a user, resource, action, and environment to determine whether
    access should be granted. ABAC enables context-aware access control decisions
    based on a rich set of attributes and can support complex access control policies.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: ABAC 是一种更高级的授权方法，它评估与用户、资源、操作和环境相关联的一组属性，以确定是否授予访问权限。ABAC 允许基于丰富的属性集进行上下文感知的访问控制决策，并可以支持复杂的访问控制策略。
- en: In an ABAC system, rules or policies are defined using a policy language, such
    as **eXtensible Access Control Markup Language** (**XACML**). These rules are
    then evaluated by a **policy decision point** (**PDP**) to determine whether access
    should be granted or denied.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ABAC 系统中，规则或策略使用策略语言（如 **eXtensible Access Control Markup Language**（XACML））定义。然后，这些规则由
    **策略决策点**（PDP）评估，以确定是否授予或拒绝访问。
- en: ABAC is preferred when you require a highly granular and context-aware authorization
    system that considers multiple attributes, such as user characteristics, resource
    attributes, and environmental factors, to make access control decisions.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 当您需要一个高度细粒度和上下文感知的授权系统，考虑多个属性（如用户特征、资源属性和环境因素）以做出访问控制决策时，ABAC（基于属性的访问控制）是首选。
- en: Implementing authorization in .NET
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 .NET 中实现授权
- en: Later, we will build authorization into our demo app. First, we will discuss
    how to implement various authorization concepts in .NET using ASP.NET Core Authorization
    Policies, Role and Claims Management with ASP.NET Core Identity, and Custom Authorization
    Middleware and Filters.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们将在我们的演示应用程序中构建授权。首先，我们将讨论如何使用 ASP.NET Core 授权策略、ASP.NET Core Identity 的角色和声明管理以及自定义授权中间件和过滤器在
    .NET 中实现各种授权概念。
- en: ASP.NET Core Authorization Policies
  id: totrans-110
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ASP.NET Core 授权策略
- en: 'ASP.NET Core provides a powerful and flexible authorization framework that
    allows you to define and enforce access control policies based on roles, claims,
    or custom logic. To implement authorization policies in your .NET application,
    follow these steps:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 提供了一个强大且灵活的授权框架，允许您根据角色、声明或自定义逻辑定义和执行访问控制策略。要在您的 .NET 应用程序中实现授权策略，请按照以下步骤操作：
- en: Define authorization policies in the `ConfigureServices` method of your `Startup`
    class by adding `services.AddAuthorization` and configuring policy options using
    the `AddPolicy` method. You can specify requirements based on roles, claims, or
    custom rules.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Startup` 类的 `ConfigureServices` 方法中定义授权策略，通过添加 `services.AddAuthorization`
    并使用 `AddPolicy` 方法配置策略选项。您可以根据角色、声明或自定义规则指定要求。
- en: Apply authorization policies to your controllers or action methods using the
    `[Authorize]` attribute with the specified policy name. This attribute ensures
    that only users who meet the policy requirements can access the protected resources.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用指定策略名称的 `[Authorize]` 属性将授权策略应用于您的控制器或操作方法。此属性确保只有满足策略要求的用户才能访问受保护的资源。
- en: If needed, create custom authorization handlers and requirements to implement
    complex authorization logic or integrate with external systems. Register your
    custom handlers in the `ConfigureServices` method of your Startup class.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如有必要，创建自定义授权处理程序和需求以实现复杂的授权逻辑或与外部系统集成。在 `Startup` 类的 `ConfigureServices` 方法中注册您的自定义处理程序。
- en: Role and claims management with ASP.NET Core Identity
  id: totrans-115
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用 ASP.NET Core Identity 进行角色和声明管理
- en: 'ASP.NET Core Identity provides built-in support for managing roles and claims,
    making it easy to implement RBAC and CBAC in your application. To use roles and
    claims with ASP.NET Core Identity, follow these steps:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core Identity 提供了对角色和声明的内置支持，使得在您的应用程序中实现 RBAC（基于角色的访问控制）和 CBAC（基于声明的访问控制）变得容易。要使用
    ASP.NET Core Identity 中的角色和声明，请按照以下步骤操作：
- en: Enable role management in your application by updating `DbContext` to inherit
    from `IdentityDbContext` with a role type such as `IdentityRole`.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将`DbContext`更新为继承自具有如`IdentityRole`之类的角色类型的`IdentityDbContext`来在您的应用程序中启用角色管理。
- en: Add role management services to the `ConfigureServices` method of your `Startup`
    class by calling `services.AddIdentity` with the `AddRoles` method.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将角色管理服务添加到您的`Startup`类的`ConfigureServices`方法中，通过调用`services.AddIdentity`并使用`AddRoles`方法来实现。
- en: Use the `RoleManager` and `UserManager` classes in your application to create,
    update, and delete roles, assign roles to users, and manage claims associated
    with users.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的应用程序中使用`RoleManager`和`UserManager`类来创建、更新和删除角色，将角色分配给用户，并管理与用户关联的声明。
- en: Protect your application resources using the `[Authorize]` attribute with roles
    or policy-based authorization, as discussed in the previous section.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用前一小节中讨论的`[Authorize]`属性和基于角色或策略的授权来保护您的应用程序资源。
- en: Custom authorization middleware and filters
  id: totrans-121
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 自定义授权中间件和过滤器
- en: In some cases, you may need to implement custom authorization logic that goes
    beyond roles, claims, and policies. ASP.NET Core allows you to create custom middleware
    and filters to perform additional authorization checks or enforce access control
    at a global level.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，您可能需要实现超出角色、声明和策略的定制授权逻辑。ASP.NET Core允许您创建自定义中间件和过滤器以执行额外的授权检查或在全局级别强制执行访问控制。
- en: To create custom middleware, define a new class that implements the `IMiddleware`
    interface and perform your authorization checks in the `InvokeAsync` method. Register
    your custom middleware in the `Configure` method of your `Startup` class by calling
    `app.UseMiddleware`.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建自定义中间件，定义一个新的类实现`IMiddleware`接口，并在`InvokeAsync`方法中执行您的授权检查。通过在`Startup`类的`Configure`方法中调用`app.UseMiddleware`来注册您的自定义中间件。
- en: To create a custom authorization filter, define a new class that implements
    the `IAuthorizationFilter` or `IAsyncAuthorizationFilter` interface, and perform
    your authorization checks in the `OnAuthorization` or `OnAuthorizationAsync` method.
    Register your custom filter globally in the `ConfigureServices` method of your
    `Startup` class by adding it to the `services.AddControllers` or `services.AddMvc`
    options.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建自定义授权过滤器，定义一个新的类实现`IAuthorizationFilter`或`IAsyncAuthorizationFilter`接口，并在`OnAuthorization`或`OnAuthorizationAsync`方法中执行您的授权检查。通过将自定义过滤器添加到`Startup`类的`ConfigureServices`方法中的`services.AddControllers`或`services.AddMvc`选项来全局注册您的自定义过滤器。
- en: Integrating with external authorization services
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 与外部授权服务集成
- en: In some scenarios, you may wish to integrate your .NET application with external
    authorization services, such as Azure AD, Azure AD B2C, or OAuth 2.0 resource
    servers, to manage access control for your users. In this subsection, we will
    discuss how to integrate your application with these services.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些场景中，您可能希望将您的.NET应用程序与外部授权服务集成，例如Azure AD、Azure AD B2C或OAuth 2.0资源服务器，以管理用户的访问控制。在本小节中，我们将讨论如何将应用程序与这些服务集成。
- en: Azure AD and Azure AD B2C
  id: totrans-127
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Azure AD和Azure AD B2C
- en: Azure AD is a cloud-based **identity and access management** (**IAM**) service
    provided by Microsoft. Azure AD allows you to centralize the management of users,
    groups, and access control for your application. Azure AD B2C is a related service
    that provides consumer-focused identity management, allowing you to implement
    SSO and MFA for your application users.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Azure AD是微软提供的一个基于云的**身份和访问管理**（**IAM**）服务。Azure AD允许您集中管理用户、组和应用程序的访问控制。Azure
    AD B2C是一个相关的服务，提供以消费者为中心的身份管理，允许您为应用程序用户实现单点登录和多因素认证。
- en: 'To integrate your .NET application with Azure AD or Azure AD B2C, follow these
    steps:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 要将您的.NET应用程序与Azure AD或Azure AD B2C集成，请按照以下步骤操作：
- en: Register your application in the Azure portal, and configure your application
    to use Azure AD or Azure AD B2C for authentication and authorization.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Azure门户中注册您的应用程序，并配置应用程序以使用Azure AD或Azure AD B2C进行身份验证和授权。
- en: In your .NET application, add the `Microsoft.Identity.Web` package and configure
    the authentication services in the `ConfigureServices` method of your `Startup`
    class by calling `services.AddAuthentication` and `services.AddMicrosoftIdentityWebApp`.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的.NET应用程序中，添加`Microsoft.Identity.Web`包，并在`Startup`类的`ConfigureServices`方法中通过调用`services.AddAuthentication`和`services.AddMicrosoftIdentityWebApp`来配置身份验证服务。
- en: Protect your application resources using the `[Authorize]` attribute with roles,
    policies, or custom authorization logic, as discussed in the previous sections.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用前几节中讨论的`[Authorize]`属性、策略或自定义授权逻辑来保护您的应用程序资源。
- en: OAuth 2.0 scopes and resource servers
  id: totrans-133
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: OAuth 2.0作用域和资源服务器
- en: OAuth 2.0 is an industry-standard protocol for authorization, which allows you
    to grant third-party applications access to your resources on behalf of a user
    without sharing their credentials. In the context of OAuth 2.0, your .NET application
    may act as a resource server, which hosts protected resources and requires valid
    access tokens for authorization.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: OAuth 2.0是一种行业标准授权协议，允许您代表用户授予第三方应用程序访问其资源，而无需共享其凭据。在OAuth 2.0的上下文中，您的.NET应用程序可能充当资源服务器，它托管受保护资源并需要有效的访问令牌进行授权。
- en: 'To integrate your .NET application with an OAuth 2.0 authorization server,
    follow these steps:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 要将您的.NET应用程序与OAuth 2.0授权服务器集成，请按照以下步骤操作：
- en: Register your application with the authorization server, and configure it to
    use OAuth 2.0 for authentication and authorization.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在授权服务器中注册您的应用程序，并配置它使用OAuth 2.0进行身份验证和授权。
- en: In your .NET application, add the appropriate OAuth 2.0 or OpenID Connect middleware
    package, such as `Microsoft.AspNetCore.Authentication.OAuth` or `Microsoft.AspNetCore.Authentication.OpenIdConnect`,
    and configure the authentication services in the `ConfigureServices` method of
    your `Startup` class.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的.NET应用程序中，添加适当的OAuth 2.0或OpenID Connect中间件包，例如`Microsoft.AspNetCore.Authentication.OAuth`或`Microsoft.AspNetCore.Authentication.OpenIdConnect`，并在`Startup`类的`ConfigureServices`方法中配置身份验证服务。
- en: Define and enforce access control policies based on OAuth 2.0 scopes or claims
    by implementing custom authorization logic, as discussed in the previous sections.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据OAuth 2.0作用域或声明，通过实现如前几节所述的自定义授权逻辑来定义和执行访问控制策略。
- en: By integrating your .NET application with external authorization services, you
    can take advantage of centralized IAM, SSO, MFA, and other advanced security features
    to protect your application resources and provide a seamless user experience.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将您的.NET应用程序与外部授权服务集成，您可以利用集中的IAM、SSO、MFA和其他高级安全功能来保护您的应用程序资源并提供无缝的用户体验。
- en: Authorization best practices
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 授权最佳实践
- en: To ensure a secure and efficient access control system for your SaaS application,
    it is essential to follow authorization best practices. In this subsection, we
    will discuss some of the most important best practices to keep in mind while implementing
    authorization in your application.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保您的SaaS应用程序有一个安全高效的访问控制系统，遵循授权最佳实践至关重要。在本小节中，我们将讨论在实现应用程序中的授权时需要牢记的一些最重要的最佳实践。
- en: Principle of least privilege
  id: totrans-142
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 最小权限原则
- en: 'The POLP is a fundamental security concept that dictates that users should
    be granted the minimum level of access necessary to perform their tasks. By adhering
    to this principle, you can minimize the potential damage caused by unauthorized
    access or compromised user accounts. To implement POLP, ensure that you do the
    following:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: POLP是一个基本的安全概念，规定用户应获得执行其任务所需的最小访问级别。通过遵守这一原则，您可以最小化未经授权的访问或用户账户受损可能造成的潜在损害。要实现POLP，请确保您执行以下操作：
- en: Assign users to the least privileged roles or create custom roles with the minimum
    required permissions.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将用户分配到最少的权限角色或创建具有所需最小权限的自定义角色。
- en: Regularly review and update user permissions to ensure that they align with
    their current responsibilities.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定期审查和更新用户权限，以确保它们与其当前的责任保持一致。
- en: Implement fine-grained access controls using claims or attributes when necessary
    to further restrict access to sensitive resources.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当需要进一步限制对敏感资源的访问时，使用声明或属性实现细粒度访问控制。
- en: Separation of duties
  id: totrans-147
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 职责分离
- en: 'SoD is another important security concept that involves dividing critical tasks
    and responsibilities among multiple users or roles to prevent any single user
    from having excessive access or control. To implement SoD in your application,
    ensure that you perform the following:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: SoD是另一个重要的安全概念，涉及将关键任务和责任分配给多个用户或角色，以防止任何单个用户拥有过度的访问或控制。要在您的应用程序中实现SoD，请确保您执行以下操作：
- en: Define distinct roles for different tasks and responsibilities, and assign users
    to these roles based on their job functions.
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为不同的任务和责任定义不同的角色，并根据用户的职能分配用户到这些角色。
- en: Implement checks and balances, such as requiring multiple approvals for critical
    actions or using different roles for data entry and data validation.
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施检查和平衡措施，例如对关键操作要求多个批准或使用不同的角色进行数据录入和数据验证。
- en: Regularly audit and monitor user activity to ensure that SoD is maintained and
    identify any potential violations or conflicts.
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定期审计和监控用户活动，以确保保持最小权限原则（SoD），并识别任何潜在的违规或冲突。
- en: Regular auditing and monitoring of access controls
  id: totrans-152
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 定期审计和监控访问控制
- en: 'Continuously monitoring and auditing your access control system can help you
    identify potential security risks, ensure that user permissions are up-to-date,
    and detect unauthorized access or abuse. To implement regular auditing and monitoring
    of access controls, consider the following practices:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 持续监控和审计您的访问控制系统可以帮助您识别潜在的安全风险，确保用户权限是最新的，并检测未经授权的访问或滥用。为了实施定期的访问控制审计和监控，请考虑以下实践：
- en: Maintain detailed logs of all authorization events, such as role or permission
    changes, access attempts, and policy evaluations.
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录所有授权事件，如角色或权限更改、访问尝试和政策评估的详细日志。
- en: Regularly review these logs to identify unusual patterns or potential security
    risks, such as users with excessive permissions, unauthorized access attempts,
    or policy violations.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定期审查这些日志，以识别异常模式或潜在的安全风险，例如权限过大的用户、未经授权的访问尝试或政策违规。
- en: Implement real-time monitoring and alerting for critical authorization events
    or anomalies and promptly investigate and address any identified issues.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施对关键授权事件或异常的实时监控和警报，并迅速调查和解决任何识别出的问题。
- en: By following these authorization best practices, you can create a secure and
    efficient access control system for your SaaS application, protecting your valuable
    resources and data while ensuring a seamless user experience.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循这些授权最佳实践，您可以为您SaaS应用程序创建一个安全且高效的访问控制系统，保护您的宝贵资源和数据，同时确保无缝的用户体验。
- en: The synergy of authentication and authorization
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 身份验证和授权的协同效应
- en: In a robust and secure SaaS application, authentication and authorization work
    hand in hand to protect your resources and data. While authentication verifies
    the identity of a user, confirming they are who they claim to be, authorization
    determines what actions and resources the authenticated user is allowed to access.
    By effectively combining these two concepts, you can create a strong and comprehensive
    access control system for your application.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个强大且安全的SaaS应用程序中，身份验证和授权携手合作，以保护您的资源和数据。虽然身份验证验证用户的身份，确认他们就是他们所声称的人，但授权确定已验证用户可以访问哪些操作和资源。通过有效结合这两个概念，您可以为您的应用程序创建一个强大且全面的访问控制系统。
- en: Integrating authentication and authorization effectively in your .NET application
    involves using technologies such as ASP.NET Core Identity, OAuth 2.0, and Azure
    AD. These technologies provide a seamless experience for your users while ensuring
    proper access control. By following best practices for both authentication and
    authorization, you can minimize potential security risks and maintain the integrity
    of your SaaS application.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在.NET应用程序中有效地集成身份验证和授权涉及使用ASP.NET Core Identity、OAuth 2.0和Azure AD等技术。这些技术为用户提供无缝体验，同时确保适当的访问控制。通过遵循身份验证和授权的最佳实践，您可以最小化潜在的安全风险，并保持SaaS应用程序的完整性。
- en: A well-implemented access control system that synergistically combines authentication
    and authorization not only provides a secure environment for your SaaS application
    but also helps create a seamless and efficient user experience, contributing to
    the overall success of your application.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 一个实施良好的访问控制系统，将身份验证和授权协同结合，不仅为您的SaaS应用程序提供一个安全的环境，而且有助于创建无缝且高效的用户体验，从而有助于应用程序的整体成功。
- en: Criticality of secure authentication and authorization
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安全身份验证和授权的重要性
- en: In the rapidly evolving world of SaaS application development, it’s crucial
    to prioritize security and privacy from the very beginning. By investing time
    and resources in getting authentication and authorization right upfront, you’re
    not only protecting your application and users but also building a strong foundation
    for future growth and adaptability.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在SaaS应用程序开发的快速发展的世界中，从一开始就优先考虑安全和隐私至关重要。通过在身份验证和授权方面投入时间和资源，您不仅保护了应用程序和用户，还为未来的增长和适应性奠定了坚实的基础。
- en: One of the key reasons to emphasize proper authentication and authorization
    is the potential impact of security breaches. Data leaks, unauthorized access,
    and cyberattacks can have severe consequences for both businesses and end-users.
    The financial costs associated with data breaches, damage to brand reputation,
    and loss of customer trust can be devastating. By implementing robust security
    measures, you can significantly reduce the risk of such incidents and the associated
    liabilities.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 强调适当的认证和授权的一个关键原因是安全漏洞的潜在影响。数据泄露、未经授权的访问和网络攻击可能对企业和最终用户造成严重后果。数据泄露相关的财务成本、品牌声誉的损害和客户信任的丧失可能是毁灭性的。通过实施强大的安全措施，您可以显著降低此类事件及其相关责任的风险。
- en: Another important factor is compliance with data protection and privacy regulations,
    such as the **General Data Protection Regulation** (**GDPR**) in Europe and the
    **California Consumer Privacy Act** (**CCPA**) in the USA. These regulations require
    businesses to implement appropriate security measures to protect user data and
    privacy. Neglecting to do so can lead to hefty fines and legal ramifications.
    Proper authentication and authorization mechanisms are essential to demonstrate
    your commitment to data protection and to comply with these regulations.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要因素是遵守数据保护和隐私法规，例如欧洲的**通用数据保护条例**（**GDPR**）和美国的**加州消费者隐私法案**（**CCPA**）。这些法规要求企业实施适当的安全措施来保护用户数据和隐私。忽视这些措施可能导致巨额罚款和法律后果。适当的认证和授权机制对于展示您对数据保护的承诺以及遵守这些法规至关重要。
- en: However, implementing effective authentication and authorization can be challenging,
    particularly in complex SaaS environments that may involve multi-tenancy, microservices,
    and distributed systems. As you scale your application, you’ll need to ensure
    that security measures continue to provide a high level of protection and adapt
    to changing requirements.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，实施有效的认证和授权可能具有挑战性，尤其是在可能涉及多租户、微服务和分布式系统的复杂SaaS环境中。随着您扩展应用程序，您需要确保安全措施继续提供高水平保护并适应不断变化的需求。
- en: Some of the challenges include managing user identities and access control across
    various services, securely storing and transmitting sensitive data, and maintaining
    isolation between tenants. Additionally, you’ll need to stay up-to-date with the
    latest security best practices and emerging threats to ensure your application
    remains secure in the face of new vulnerabilities and attack vectors.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一些挑战包括在各个服务中管理用户身份和访问控制、安全地存储和传输敏感数据，以及保持租户之间的隔离。此外，您还需要保持对最新的安全最佳实践和新兴威胁的更新，以确保您的应用程序在面对新的漏洞和攻击向量时保持安全。
- en: Investing in robust authentication and authorization upfront is essential for
    the security, privacy, and success of your SaaS application. By doing so, you’ll
    protect your users, comply with regulations, and build a solid foundation for
    future growth. While it can be a challenging endeavor, taking the time to get
    it right will pay dividends in the long run, ensuring the ongoing safety and trust
    of your customers!
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在一开始就投资于强大的认证和授权对于您SaaS应用程序的安全性、隐私和成功至关重要。通过这样做，您将保护您的用户，遵守法规，并为未来的增长奠定坚实的基础。虽然这可能是一项具有挑战性的任务，但花时间做对的事情将带来长远的好处，确保客户持续的安全和信任！
- en: Authentication and authorization are large and complex topics, even on a simple
    application. With SaaS, we are playing on hard mode, though – we also need to
    think about how to secure a multi-tenant and microservice application. We will
    consider these nuances in the next section.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 认证和授权是庞大且复杂的主题，即使在简单的应用程序中也是如此。然而，在使用SaaS的情况下，我们处于困难模式——我们还需要考虑如何确保多租户和微服务应用程序的安全性。我们将在下一节中探讨这些细微差别。
- en: Multi-tenancy and microservices
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多租户和微服务
- en: In this section, we will explore the unique challenges and considerations associated
    with implementing authentication and authorization in multi-tenant and microservices-based
    SaaS applications. Multi-tenancy requires special attention to ensure proper tenant
    identification and isolation, as well as managing tenant-specific roles and permissions.
    On the other hand, microservices architecture presents its own set of challenges,
    such as centralized authentication, API gateway access control, and secure service-to-service
    communication.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨在多租户和基于微服务的SaaS应用中实现身份验证和授权的独特挑战和考虑因素。多租户需要特别注意确保适当的租户识别和隔离，以及管理特定于租户的角色和权限。另一方面，微服务架构本身也带来了一系列挑战，例如集中式身份验证、API网关访问控制和安全的服务间通信。
- en: Multi-tenancy considerations
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多租户考虑因素
- en: There are a few specific considerations that we have to think about as developers
    of multi-tenant applications.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 作为多租户应用的开发者，我们必须考虑一些特定的因素。
- en: Tenant identification and isolation
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 租户识别和隔离
- en: In a multi-tenant SaaS application, correctly identifying and isolating tenants
    is a critical aspect of ensuring data security and privacy. Tenant identification
    is the process of determining which tenant a user belongs to when they interact
    with your application. Tenant isolation ensures that data and resources are securely
    separated between tenants, preventing unauthorized access or data leaks.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在多租户SaaS应用中，正确识别和隔离租户是确保数据安全和隐私的关键方面。租户识别是确定用户在与您的应用交互时属于哪个租户的过程。租户隔离确保数据资源在租户之间安全分离，防止未经授权的访问或数据泄露。
- en: As you will remember from [*Chapter 3*](B19343_03.xhtml#_idTextAnchor082), there
    are several approaches to tenant identification, including using subdomains, URL
    paths, or custom headers. The chosen method should be consistent and easy to manage.
    Whichever approach you select, it’s important to validate tenant identifiers in
    every request to ensure that users can only access data and resources belonging
    to their tenant.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从[*第3章*](B19343_03.xhtml#_idTextAnchor082)中记得的那样，有几种方法可以用于租户识别，包括使用子域名、URL路径或自定义头信息。选择的方法应该是连贯且易于管理的。无论您选择哪种方法，验证每个请求中的租户标识符都非常重要，以确保用户只能访问属于其租户的数据和资源。
- en: Tenant isolation can be achieved at different levels, such as the database,
    application, or infrastructure level. For example, you could use separate databases
    or schemas for each tenant, ensuring data is physically separated. Alternatively,
    you could use a shared database with row-level security, which enforces tenant
    isolation at the data access layer. At the application level, you can implement
    tenant-aware middleware or filters that enforce tenant isolation in every request.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 租户隔离可以在不同的级别实现，例如数据库、应用或基础设施级别。例如，您可以为每个租户使用单独的数据库或模式，确保数据在物理上分离。或者，您可以使用具有行级安全性的共享数据库，在数据访问层强制执行租户隔离。在应用级别，您可以实施租户感知的中间件或过滤器，在每个请求中强制执行租户隔离。
- en: When designing your multi-tenant SaaS application, consider the trade-offs between
    these approaches in terms of complexity, scalability, and maintainability. By
    effectively implementing tenant identification and isolation, you can build a
    secure and compliant SaaS application that safeguards tenant data and resources.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 当您设计多租户SaaS应用时，请考虑这些方法在复杂性、可扩展性和可维护性方面的权衡。通过有效地实现租户识别和隔离，您可以构建一个安全且合规的SaaS应用，保护租户的数据和资源。
- en: Tenant-specific roles and permissions
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 特定于租户的角色和权限
- en: SaaS applications are frequently multi-tenant, so it is essential to understand
    how to manage tenant-specific roles and permissions to ensure that users have
    the appropriate level of access to resources and functionality within their tenant.
    This not only helps maintain data security but also provides a tailored user experience
    for each tenant, as different tenants may require different sets of roles and
    permissions.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: SaaS应用通常是多租户的，因此了解如何管理特定于租户的角色和权限对于确保用户在其租户内拥有适当的资源访问级别和功能至关重要。这不仅有助于维护数据安全，还为每个租户提供定制的用户体验，因为不同的租户可能需要不同的角色和权限集。
- en: One approach to managing tenant-specific roles and permissions is to extend
    the existing role and permission model by including a tenant identifier. This
    way, when you assign roles and permissions to users, you can associate them with
    a specific tenant. This ensures that users can only perform actions and access
    resources within their tenant’s context.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 管理特定租户的角色和权限的一种方法是通过包括租户标识符来扩展现有的角色和权限模型。这样，当您为用户分配角色和权限时，可以将它们与特定的租户关联起来。这确保了用户只能在租户的上下文中执行操作和访问资源。
- en: 'When implementing tenant-specific roles and permissions, consider the following
    best practices:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在实施特定租户的角色和权限时，请考虑以下最佳实践：
- en: Define a clear and flexible role hierarchy that can accommodate the needs of
    different tenants. This may include common roles shared across all tenants, as
    well as custom roles specific to certain tenants.
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义一个清晰且灵活的角色层次结构，以满足不同租户的需求。这可能包括所有租户共享的常见角色，以及针对某些特定租户的定制角色。
- en: Assign roles and permissions based on the POLP, ensuring users have only the
    necessary access to perform their tasks.
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据最小权限原则（POLP）分配角色和权限，确保用户只有执行其任务所必需的访问权限。
- en: Implement a user-friendly interface for tenant administrators to manage roles
    and permissions within their tenants. This allows tenants to have more control
    over their users’ access levels and simplifies the administration process.
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为租户管理员实现一个用户友好的界面，以便在他们的租户内管理角色和权限。这允许租户对用户访问级别有更多的控制，并简化了管理过程。
- en: Regularly review and update tenant-specific roles and permissions to ensure
    they accurately reflect each tenant’s requirements and the application’s functionality.
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定期审查和更新特定租户的角色和权限，以确保它们准确反映每个租户的需求和应用程序的功能。
- en: Tenant onboarding and offboarding
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 租户的加入和终止
- en: As well as users coming and going, tenants will also join the application and
    (sadly) leave. Tenant onboarding and offboarding are important processes in managing
    multi-tenant SaaS applications. Properly managing these processes helps ensure
    a smooth and efficient experience for your tenants while maintaining security
    and compliance.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 除了用户来来去去，租户也会加入应用程序，(遗憾的是)也会离开。租户的加入和终止是多租户SaaS应用程序管理中的重要流程。正确管理这些流程有助于确保租户获得顺畅和高效的经验，同时保持安全和合规性。
- en: Onboarding a new tenant starts with tenant registration, where you gather essential
    information about the new tenant, such as their organization name, contact information,
    and any custom configuration options they might require. Next, set up the necessary
    resources for the tenant, such as databases, schemas, or namespaces, and apply
    any tenant-specific configurations. After the initial setup, create user accounts,
    including tenant administrators, and assign appropriate roles and permissions.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 新租户的加入始于租户注册，在此过程中，您收集有关新租户的基本信息，例如他们的组织名称、联系信息和可能需要的任何自定义配置选项。接下来，为租户设置必要的资源，如数据库、模式或命名空间，并应用任何特定租户的配置。在初始设置之后，创建用户帐户，包括租户管理员，并分配适当的角色和权限。
- en: In addition to the basic setup, consider applying any tenant-specific branding,
    integrations, or customizations required for the tenant’s unique needs. Finally,
    provide documentation, tutorials, or other support materials to help the tenant’s
    users get started with your application.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 除了基本设置之外，考虑应用任何针对租户特定需求的品牌、集成或定制。最后，提供文档、教程或其他支持材料，以帮助租户的用户开始使用您的应用程序。
- en: When offboarding a tenant, it’s essential to follow a well-defined process to
    ensure clean and secure decommissioning. Start by providing the tenant with the
    ability to export their data in a standard format, ensuring they retain access
    to their information. Once the tenant’s data has been exported, proceed to resource
    cleanup by removing the tenant’s resources, such as databases, schemas, or namespaces,
    and any associated data.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 当终止租户时，遵循一个定义良好的流程对于确保干净和安全的停用至关重要。首先，为租户提供以标准格式导出其数据的能力，确保他们保留对其信息的访问。一旦租户的数据已导出，继续进行资源清理，例如删除租户的资源，如数据库、模式或命名空间，以及任何相关数据。
- en: Also, deactivate user accounts and revoke any access tokens or API keys related
    to the tenant. This step helps prevent unauthorized access to your application
    or system after the tenant has been offboarded. Finally, document the offboarding
    process and maintain a record of the decommissioned tenant for auditing and compliance
    purposes.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还应停用用户账户并撤销与租户相关的任何访问令牌或API密钥。这一步骤有助于防止租户离场后未经授权访问您的应用程序或系统。最后，记录离场流程并保留已退役租户的记录，以供审计和合规性目的使用。
- en: Tenant onboarding and offboarding focus on managing the entire life cycle of
    a tenant within the SaaS application, including creating and removing tenant-specific
    resources, configurations, and customizations, while user provisioning and de-provisioning
    primarily deal with individual user account management, such as creating, updating,
    and deleting user accounts within the context of an existing tenant.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 租户上线和离场关注于管理SaaS应用程序中租户的整个生命周期，包括创建和删除特定于租户的资源、配置和定制，而用户配置和去配置主要涉及单个用户账户管理，例如在现有租户的上下文中创建、更新和删除用户账户。
- en: This should give you a good start in addressing the specific challenges involved
    in securing a multi-tenant application. In the next section, we’ll consider the
    other added complexity that we have introduced – microservices.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该为您解决在确保多租户应用程序安全方面涉及的具体挑战提供了良好的起点。在下一节中，我们将考虑我们已引入的其他附加复杂性——微服务。
- en: Microservices architecture considerations
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 微服务架构考虑事项
- en: Microservice architectures offer significant advantages, as we have discussed
    in an earlier chapter, but they do come at the cost of some additional complexity.
    In this section, we will discuss some of the additional complexities that come
    from working with microservices.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们在前一章中讨论的，微服务架构提供了显著的优势，但它们也带来了一些额外的复杂性。在本节中，我们将讨论一些来自与微服务一起工作的额外复杂性。
- en: Centralized authentication and authorization
  id: totrans-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 集中式身份验证和授权
- en: In a microservices-based SaaS application, implementing centralized authentication
    and authorization is important for managing access control across multiple services
    consistently and efficiently. Centralizing these processes ensures that each service
    adheres to a uniform security policy and reduces the risk of misconfigurations
    or inconsistencies that could lead to vulnerabilities.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于微服务的SaaS应用程序中，实现集中式身份验证和授权对于一致且高效地管理多个服务之间的访问控制非常重要。集中这些流程确保每个服务遵守统一的安全策略，并降低配置错误或不一致导致漏洞的风险。
- en: One common approach to centralizing authentication and authorization in a microservices
    architecture is by using an IAM service, such as Azure AD or Identity Server.
    The IAM service acts as a single source of truth for user authentication, and
    it provides a unified way to manage roles, permissions, and access tokens across
    all services.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在微服务架构中集中身份验证和授权的一种常见方法是通过使用IAM服务，例如Azure AD或Identity Server。IAM服务充当用户身份验证的唯一真实来源，并为跨所有服务提供统一的方式来管理角色、权限和访问令牌。
- en: When a user attempts to access a protected resource, the request is first sent
    to the IAM service for authentication. If the user is successfully authenticated,
    the IAM service generates an access token, which typically includes the user’s
    identity, roles, and permissions. This access token is then passed along with
    subsequent requests to other services, allowing each service to authorize the
    user based on the token’s contents.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户尝试访问受保护资源时，请求首先发送到IAM服务进行身份验证。如果用户身份验证成功，IAM服务将生成一个访问令牌，该令牌通常包括用户的身份、角色和权限。然后，此访问令牌将与后续请求一起传递到其他服务，允许每个服务根据令牌的内容授权用户。
- en: 'To implement centralized authentication and authorization in your microservices
    architecture, consider the following best practices:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 要在您的微服务架构中实现集中式身份验证和授权，请考虑以下最佳实践：
- en: Use an established IAM service or framework that supports industry-standard
    protocols, such as OAuth 2.0 and OpenID Connect, to facilitate interoperability
    and simplify integration.
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用支持行业标准协议（如OAuth 2.0和OpenID Connect）的成熟IAM服务或框架，以促进互操作性和简化集成。
- en: Secure communication between services and the IAM service using encryption,
    such as HTTPS or **mutual Transport Layer** **Security** (**mTLS**).
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用加密（如HTTPS或**双向传输层** **安全**（**mTLS**））来确保服务与IAM服务之间的安全通信。
- en: Implement token validation and caching mechanisms in each service to minimize
    performance overhead and protect against token tampering or replay attacks.
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在每个服务中实施令牌验证和缓存机制，以最小化性能开销并保护免受令牌篡改或重放攻击。
- en: Regularly review and update the roles and permissions defined in the IAM service
    to ensure they accurately reflect the functionality and access requirements of
    each service.
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定期审查和更新IAM服务中定义的角色和权限，以确保它们准确反映每个服务的功能和使用要求。
- en: Please note that implementing such a system is outside the scope of the demo
    app but would serve as a good project for any readers wishing to continue to advance
    their understanding of this topic.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，实施此类系统超出了演示应用程序的范围，但对于任何希望继续深化对该主题理解的读者来说，将是一个很好的项目。
- en: API gateway and access control
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: API网关和访问控制
- en: In a microservices-based SaaS application, an API gateway plays a crucial role
    in managing and securing access to your services. The API gateway acts as a single
    entry point for all client requests, providing a unified layer of access control
    and simplifying the process of managing security across your microservices.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于微服务的SaaS应用程序中，API网关在管理和保护对服务访问方面发挥着至关重要的作用。API网关充当所有客户端请求的单一点入口，提供统一的访问控制层，简化了在微服务中管理安全性的过程。
- en: By consolidating access control at the API gateway, you can enforce consistent
    authentication and authorization policies across all services without duplicating
    the logic in each individual service. This reduces the complexity of your services,
    as they can focus on implementing their specific functionality rather than handling
    access control directly.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在API网关上集中访问控制，您可以在所有服务中强制执行一致的认证和授权策略，而无需在每个单独的服务中重复逻辑。这降低了服务的复杂性，因为它们可以专注于实现其特定的功能，而不是直接处理访问控制。
- en: When a client sends a request to access a protected resource, the API gateway
    intercepts the request and performs the necessary authentication and authorization
    checks. This may involve validating access tokens, verifying user roles and permissions,
    and applying rate limiting or other security measures. If the request meets the
    required criteria, the API gateway forwards the request to the appropriate service.
    Otherwise, the request is denied, and an error message is returned to the client.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 当客户端发送请求以访问受保护资源时，API网关拦截请求并执行必要的身份验证和授权检查。这可能包括验证访问令牌、验证用户角色和权限，以及应用速率限制或其他安全措施。如果请求符合所需标准，API网关将请求转发到适当的服务。否则，请求将被拒绝，并向客户端返回错误消息。
- en: 'To implement access control at the API gateway effectively, consider the following
    best practices:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 为了有效地在API网关上实施访问控制，请考虑以下最佳实践：
- en: Choose an API gateway solution that supports your authentication and authorization
    requirements, such as Ocelot, Kong, or Azure API Management. Ensure the solution
    is compatible with your chosen IAM service and can efficiently handle token validation
    and permission checks.
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择支持您的身份验证和授权要求的API网关解决方案，例如Ocelot、Kong或Azure API Management。确保解决方案与您选择的IAM服务兼容，并且可以高效地处理令牌验证和权限检查。
- en: Configure the API gateway to enforce access control policies consistently across
    all services, including validating access tokens, checking user roles and permissions,
    and applying rate limiting or other security measures.
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置API网关，以确保在所有服务中一致地执行访问控制策略，包括验证访问令牌、检查用户角色和权限，以及应用速率限制或其他安全措施。
- en: Secure communication between the API gateway and your services using encryption,
    such as HTTPS or mTLS, to protect against data breaches and man-in-the-middle
    attacks.
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用加密，如HTTPS或mTLS，在API网关和您的服务之间建立安全的通信，以防止数据泄露和中间人攻击。
- en: Monitor and log access attempts at the API gateway level to gain insight into
    potential security threats and help with auditing and compliance.
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在API网关级别监控和记录访问尝试，以了解潜在的安全威胁，并帮助进行审计和合规性检查。
- en: By implementing access control at the API gateway, you can enhance the security
    of your microservices-based SaaS application while simplifying management and
    ensuring a consistent access control policy across all services.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在API网关上实施访问控制，您可以增强基于微服务的SaaS应用程序的安全性，同时简化管理并确保所有服务的一致访问控制策略。
- en: Service-to-service communication and authentication
  id: totrans-217
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 服务间通信和认证
- en: In a microservices-based SaaS application, secure communication between services
    is essential to maintain the confidentiality, integrity, and availability of your
    system. Service-to-service authentication helps ensure that only authorized services
    can communicate with each other, protecting your application from unauthorized
    access or potential security threats.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于微服务的SaaS应用程序中，确保服务间的安全通信对于维护系统的机密性、完整性和可用性至关重要。服务间认证有助于确保只有授权的服务才能相互通信，从而保护您的应用程序免受未经授权的访问或潜在的安全威胁。
- en: 'To implement secure service-to-service communication and authentication, you
    can leverage a variety of techniques and protocols depending on your application’s
    requirements and architecture. Some common approaches include the following:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现安全的服务间通信和认证，您可以根据应用程序的要求和架构利用各种技术和协议。以下是一些常见的方法：
- en: '**mTLS**: With mTLS, both the client and server services present TLS certificates
    during the TLS handshake process, allowing each service to verify the identity
    of the other. This approach provides strong authentication, encryption, and data
    integrity, making it a popular choice for securing service-to-service communication
    in microservices architectures.'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**mTLS**：在mTLS中，客户端和服务器服务在TLS握手过程中都提供TLS证书，允许每个服务验证另一个服务的身份。这种方法提供了强大的身份验证、加密和数据完整性，使其成为在微服务架构中保护服务间通信的流行选择。'
- en: '**Token-based authentication**: In this approach, services use access tokens,
    such as **JSON Web Tokens** (**JWTs**), to authenticate themselves when communicating
    with other services. The access token typically contains information about the
    service’s identity and may include additional claims, such as roles or permissions.
    To validate the token, the receiving service verifies the token’s signature and
    checks the claims against its access control policies.'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于令牌的认证**：在这种方法中，服务使用访问令牌，例如**JSON Web Tokens**（JWTs），在与其他服务通信时进行身份验证。访问令牌通常包含有关服务身份的信息，并可能包括额外的声明，例如角色或权限。为了验证令牌，接收服务验证令牌的签名，并检查声明是否符合其访问控制策略。'
- en: '**API keys**: API keys are unique identifiers that can be used to authenticate
    services when they make requests to other services. API keys are usually pre-shared
    secrets, meaning they must be securely distributed to each service and kept secret
    to prevent unauthorized access. To authenticate a request, the receiving service
    checks the provided API key against a list of valid keys and, if matched, grants
    access.'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**API密钥**：API密钥是唯一标识符，可用于在服务向其他服务发出请求时进行身份验证。API密钥通常是预共享的秘密，这意味着它们必须安全地分发给每个服务，并保密以防止未经授权的访问。为了验证请求，接收服务将提供的API密钥与有效密钥列表进行比对，如果匹配，则授予访问权限。'
- en: 'When implementing service-to-service communication and authentication, consider
    the following best practices:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在实施服务间通信和认证时，请考虑以下最佳实践：
- en: Choose an authentication method that meets your security requirements and is
    compatible with your existing infrastructure and services.
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择一种符合您的安全要求且与现有基础设施和服务兼容的认证方法。
- en: Encrypt communication between services using transport-level security, such
    as HTTPS or mTLS, to protect data in transit.
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用传输层安全，如HTTPS或mTLS，加密服务间的通信，以保护传输中的数据。
- en: Implement token or API key validation and caching mechanisms to minimize performance
    overhead and protect against token tampering or replay attacks.
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施令牌或API密钥验证和缓存机制，以最小化性能开销并保护免受令牌篡改或重放攻击。
- en: Regularly rotate and revoke tokens, certificates, or API keys to limit their
    potential exposure and reduce the risk of unauthorized access.
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定期轮换和吊销令牌、证书或API密钥，以限制其潜在暴露并降低未经授权访问的风险。
- en: By implementing secure service-to-service communication and authentication,
    you can protect your microservices-based SaaS application from unauthorized access
    and potential security threats, ensuring the confidentiality, integrity, and availability
    of your system.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 通过实施安全的服务间通信和认证，您可以保护基于微服务的SaaS应用程序免受未经授权的访问和潜在的安全威胁，确保系统的机密性、完整性和可用性。
- en: Managing users, roles, and permissions
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理用户、角色和权限
- en: In SaaS applications, managing user access efficiently and securely is extremely
    important. User provisioning and deprovisioning are essential processes for controlling
    access to resources and ensuring that only authorized users have the necessary
    permissions. Let’s explore these processes in detail!
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在SaaS应用程序中，高效且安全地管理用户访问至关重要。用户配置和取消配置是控制资源访问和确保只有授权用户拥有必要权限的基本过程。让我们详细探讨这些过程！
- en: User provisioning and deprovisioning
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户配置和取消配置
- en: User provisioning is the process of creating, updating, and managing user accounts
    and their access rights within a system or application. This process typically
    involves creating user accounts with unique identifiers, such as usernames or
    email addresses. Once the accounts are created, roles or permissions are assigned
    to users based on their responsibilities within the organization. Furthermore,
    enforcing password policies, such as minimum length, complexity, and expiration
    periods, ensures that user accounts remain secure.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 用户配置是创建、更新和管理系统或应用程序中用户账户及其访问权限的过程。这个过程通常包括创建具有唯一标识符的用户账户，例如用户名或电子邮件地址。一旦账户创建完成，就会根据用户在组织中的职责分配角色或权限。此外，实施密码策略，如最小长度、复杂性和过期期限，确保用户账户保持安全。
- en: Automated provisioning can be particularly beneficial for larger organizations
    or when integrating with external identity providers (e.g., Azure AD or OAuth2).
    By automating the provisioning process, you can reduce manual errors in user account
    creation and role assignment, improve the onboarding experience for new users,
    streamline the management of user access across multiple services or applications,
    and enhance security by ensuring that only authorized users have access to specific
    resources.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 自动配置对于大型组织或与外部身份提供者（例如Azure AD或OAuth2）集成尤其有益。通过自动化配置过程，您可以减少用户账户创建和角色分配中的手动错误，改善新用户的入职体验，简化跨多个服务或应用程序的用户访问管理，并通过确保只有授权用户才能访问特定资源来增强安全性。
- en: User deprovisioning is the process of revoking a user’s access rights when they
    are no longer required, such as when an employee leaves the company or changes
    roles. This process typically involves disabling or deleting the user account
    and revoking any assigned roles or permissions. In some cases, it may also be
    necessary to archive or transfer any associated data. Logging the deprovisioning
    process is crucial for auditing and compliance purposes.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 用户取消配置是在不再需要用户访问权限时撤销用户访问权限的过程，例如当员工离职或更改角色时。这个过程通常包括禁用或删除用户账户，并撤销任何分配的角色或权限。在某些情况下，还可能需要归档或转移任何相关数据。记录取消配置过程对于审计和合规至关重要。
- en: Timely and accurate deprovisioning is essential for maintaining security and
    minimizing the risk of unauthorized access. By implementing a systematic deprovisioning
    process, you can prevent former employees or contractors from accessing sensitive
    data or resources, reduce the potential for security breaches caused by orphaned
    or inactive accounts, streamline the management of user access, and ensure that
    only current employees have the appropriate permissions. Additionally, a thorough
    deprovisioning process helps you comply with data protection and privacy regulations
    that require the prompt removal of user access.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 及时且准确的取消配置对于维护安全和最小化未经授权访问的风险至关重要。通过实施系统化的取消配置过程，您可以防止前任员工或承包商访问敏感数据或资源，减少因孤儿账户或非活动账户导致的潜在安全漏洞，简化用户访问管理，并确保只有当前员工拥有适当的权限。此外，彻底的取消配置过程有助于您遵守要求及时移除用户访问权限的数据保护和隐私法规。
- en: A considered approach to user provisioning and deprovisioning ensures that security
    is maintained, access rights are accurately managed, and compliance with data
    protection and privacy regulations is upheld throughout the entire life cycle
    of a user’s interaction with the SaaS application.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 对用户配置和取消配置采取谨慎的方法可以确保在整个用户与SaaS应用程序交互的生命周期中，安全得到维护，访问权限得到准确管理，并遵守数据保护和隐私法规。
- en: This is an important topic, and the processes should be agreed upon and implemented
    early in the life cycle of the application. By implementing robust processes for
    both tasks, you can enhance security, maintain compliance, and streamline access
    management across your application’s ecosystem.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个重要的话题，应该在应用程序的生命周期早期就达成一致并实施相关流程。通过实施稳健的流程来处理这两项任务，您可以增强安全性、维护合规性，并简化应用程序生态系统中访问管理。
- en: Role management and assignment
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 角色管理和分配
- en: In SaaS applications, managing roles and assigning them to users is a crucial
    aspect of access control. Roles define a set of permissions that determine the
    actions a user can perform within the application. By effectively managing roles
    and assigning them to users, you can achieve a higher level of security and maintain
    a clear separation of responsibilities.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在SaaS应用程序中，管理和分配角色是访问控制的关键方面。角色定义了一组权限，这些权限决定了用户可以在应用程序中执行的操作。通过有效地管理角色并将它们分配给用户，您可以实现更高的安全性并保持职责的明确分离。
- en: Role management involves creating and maintaining a set of roles that represent
    different levels of access or responsibilities within your application. These
    roles should be designed to reflect the various tasks and functions that users
    need to perform. For example, you may have roles such as “administrator,” “manager,”
    “editor,” and “viewer,” each with a distinct set of permissions. Role management
    also includes updating roles as needed, such as when new features are added to
    the application or when existing permissions need to be adjusted.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 角色管理包括创建和维护一组代表您应用程序中不同访问级别或职责的角色。这些角色应设计为反映用户需要执行的各种任务和功能。例如，您可能有“管理员”、“经理”、“编辑”和“查看者”等角色，每个角色都有独特的权限集。角色管理还包括根据需要更新角色，例如当应用程序添加新功能或现有权限需要调整时。
- en: Role assignment is the process of associating users with specific roles. By
    assigning roles to users, you can ensure that each user has the appropriate level
    of access to perform their job duties without granting them unnecessary permissions.
    Role assignment can be done manually, through an automated process, or via integration
    with external identity providers, such as Azure AD or OAuth2.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 角色分配是将用户与特定角色关联的过程。通过为用户分配角色，您可以确保每个用户都有执行其工作职责所需的适当访问级别，而不会授予他们不必要的权限。角色分配可以手动进行，通过自动化流程进行，或者通过集成外部身份提供者，如Azure
    AD或OAuth2。
- en: 'To optimize role management and assignment, consider the following best practices:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 为了优化角色管理和分配，请考虑以下最佳实践：
- en: Define roles based on POLP, which means granting users the minimum permissions
    required to perform their tasks.
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据最小权限原则（POLP）定义角色，这意味着授予用户完成任务所需的最小权限。
- en: Regularly review and update roles to ensure they accurately reflect the current
    requirements of your application.
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定期审查和更新角色，以确保它们准确反映您应用程序的当前需求。
- en: Implement a consistent process for role assignment, such as using templates
    or automation, to minimize human errors and simplify access management.
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施一致的流程进行角色分配，例如使用模板或自动化，以最大限度地减少人为错误并简化访问管理。
- en: Monitor role assignments and access logs to identify any discrepancies or potential
    security risks.
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控角色分配和访问日志，以识别任何差异或潜在的安全风险。
- en: By effectively managing roles and assigning them to users, you can achieve a
    more secure and well-organized access control system within your SaaS application.
    This not only enhances security but also promotes a clear separation of responsibilities
    and facilitates compliance with data protection and privacy regulations.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 通过有效地管理角色并将它们分配给用户，您可以在您的SaaS应用程序中实现更安全、更井然有序的访问控制系统。这不仅增强了安全性，而且促进了职责的明确分离，并有助于符合数据保护和隐私法规。
- en: Permission management and fine-grained access control
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 权限管理和细粒度访问控制
- en: Permission management involves defining a set of actions or resources that users
    can access within your application. These permissions can then be assigned to
    roles or, in some cases, directly to users. Fine-grained access control goes beyond
    defining a set of actions or resources by allowing you to create highly detailed
    and specific permissions for a wide range of scenarios.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 权限管理涉及定义用户可以在您的应用程序中访问的一组操作或资源。然后，这些权限可以分配给角色，或者在某些情况下直接分配给用户。细粒度访问控制通过允许您为广泛场景创建高度详细和具体的权限，超越了仅定义一组操作或资源。
- en: Fine-grained access control offers several benefits, including enhanced security,
    improved efficiency, and easier compliance. By providing users with only the necessary
    permissions, you minimize the potential for unauthorized access or actions that
    could compromise your application’s security. With more precise access control,
    users can quickly find and interact with the resources they need while avoiding
    unnecessary clutter and distractions. For example, a marketing manager may only
    need access to customer data relevant to their campaigns and can avoid being overwhelmed
    by irrelevant data. If we think back to our secure building example, we can imagine
    that the areas of the building are very clearly signposted or maybe color-coded,
    making it very clear and obvious who is allowed into which parts of the building!
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 细粒度访问控制提供了几个好处，包括增强的安全性、提高效率和更容易的合规性。通过仅向用户提供必要的权限，您可以最小化未经授权的访问或可能危害您应用程序安全性的操作的可能性。通过更精确的访问控制，用户可以快速找到并交互所需的资源，同时避免不必要的杂乱和干扰。例如，市场营销经理可能只需要访问与其活动相关的客户数据，从而避免被无关数据淹没。如果我们回顾我们安全建筑物的例子，我们可以想象建筑物的区域被非常清楚地标示或可能是用颜色编码的，这使得谁可以进入建筑物的哪个部分非常清晰和明显！
- en: To implement fine-grained access control in your SaaS application, it’s important
    to identify and define the specific actions and resources that users may need
    to access your application, taking into account different roles and responsibilities.
    Create a permissions hierarchy that organizes permissions logically and makes
    it easier to manage and maintain access control. Assign permissions to roles or
    users based on POLP, ensuring that users have the minimum access required to perform
    their tasks. For example, a customer support representative may only need access
    to customer records and basic account information, while a manager may need access
    to more sensitive financial data.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的SaaS应用程序中实现细粒度访问控制，重要的是要识别和定义用户可能需要访问您应用程序的具体操作和资源，考虑到不同的角色和职责。创建一个逻辑上组织权限的权限层次结构，使其更容易管理和维护访问控制。根据最小权限原则（POLP）分配权限给角色或用户，确保用户拥有执行其任务所需的最小访问权限。例如，客户支持代表可能只需要访问客户记录和基本账户信息，而经理可能需要访问更敏感的财务数据。
- en: Regularly review and update permissions to ensure they accurately reflect the
    current requirements and functionality of your application. Monitor and audit
    permission assignments and access logs to detect discrepancies or potential security
    risks.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 定期审查和更新权限，以确保它们准确反映您应用程序当前的需求和功能。监控和审计权限分配和访问日志，以检测差异或潜在的安全风险。
- en: Summary
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored the fundamental concepts of authentication and
    authorization in SaaS applications. Authentication is the process of verifying
    the identity of a user, typically through the use of credentials such as a username
    and password. Authorization, on the other hand, is the process of determining
    what actions a user is authorized to perform within the application, typically
    using **access control lists** (**ACLs**) or RBAC systems.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了SaaS应用程序中身份验证和授权的基本概念。身份验证是通过使用凭证（如用户名和密码）来验证用户身份的过程。另一方面，授权是确定用户在应用程序中授权执行哪些操作的过程，通常使用**访问控制列表**（**ACLs**）或基于角色的访问控制（RBAC）系统。
- en: We discussed how authentication and authorization are closely related and work
    together to provide a secure environment for users to interact with the application.
    In a SaaS application, the consequences of a data leak can be severe, and getting
    authentication and authorization right is critical to preventing data leaks and
    protecting sensitive data.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了身份验证和授权是如何紧密相关并且协同工作，为用户提供一个安全的环境与应用程序交互。在SaaS应用程序中，数据泄露的后果可能是严重的，正确处理身份验证和授权对于防止数据泄露和保护敏感数据至关重要。
- en: We also discussed how implementing strong authentication and authorization mechanisms
    is particularly important in a multi-tenant application, where each tenant’s data
    and resources must be protected from unauthorized access by other tenants or outside
    parties. Technical considerations for implementing authentication and authorization
    in a SaaS application include using a microservices architecture, implementing
    isolation techniques, and implementing automated testing and monitoring.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还讨论了在多租户应用程序中实施强大的身份验证和授权机制的重要性，在多租户应用程序中，每个租户的数据和资源必须受到保护，防止其他租户或外部实体未经授权的访问。在SaaS应用程序中实施身份验证和授权的技术考虑因素包括使用微服务架构、实施隔离技术以及实施自动化测试和监控。
- en: We explored some of the business considerations for implementing authentication
    and authorization in a SaaS application. These include clearly defining tenant
    boundaries and responsibilities, developing a clear pricing model, and providing
    a comprehensive onboarding (and offboarding) process.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 我们探讨了在SaaS应用程序中实施身份验证和授权的一些业务考虑因素。这包括明确定义租户边界和责任、制定清晰的定价模型以及提供全面的入职（和离职）流程。
- en: Finally, we have worked through a practice example that adds authentication
    and authorization to our demo application!
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们已经完成了一个实践示例，为我们的演示应用程序添加了身份验证和授权功能！
- en: By addressing both technical and business considerations, a SaaS application
    can provide a secure, reliable, and scalable platform that meets the needs of
    both application developers and tenants. Implementing strong authentication and
    authorization mechanisms can help to prevent data leaks and protect sensitive
    data while providing a clear and transparent pricing model and a comprehensive
    onboarding process can help to establish the application as a trusted provider
    of valuable services.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 通过解决技术和业务考虑因素，SaaS应用程序可以提供一个安全、可靠且可扩展的平台，满足应用开发者和租户的需求。实施强大的身份验证和授权机制可以帮助防止数据泄露并保护敏感数据，而提供清晰透明的定价模型和全面的入职流程可以帮助将应用程序确立为值得信赖的有价值服务的提供商。
- en: In the next chapter, we will learn about testing. Testing is a very important
    topic, particularly when dealing with SaaS applications. We will cover strategies
    for testing across the application stack.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习关于测试的内容。测试是一个非常重要的主题，尤其是在处理SaaS应用程序时。我们将介绍跨应用程序堆栈的测试策略。
- en: Further reading
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Authentication with client-side Blazor using WebAPI and ASP.NET Core Identity:
    [https://chrissainty.com/securing-your-blazor-apps-authentication-with-clientside-blazor-using-webapi-aspnet-core-identity/](https://chrissainty.com/securing-your-blazor-apps-authentication-with-clientside-blazor-using-webapi-aspnet-core-identity/)'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用WebAPI和ASP.NET Core Identity在客户端Blazor中进行身份验证：[https://chrissainty.com/securing-your-blazor-apps-authentication-with-clientside-blazor-using-webapi-aspnet-core-identity/](https://chrissainty.com/securing-your-blazor-apps-authentication-with-clientside-blazor-using-webapi-aspnet-core-identity/)
- en: 'Blazor WebAssembly - User Registration and Login Example & Tutorial: [https://jasonwatmore.com/post/2020/11/09/blazor-webassembly-user-registration-and-login-example-tutorial](https://jasonwatmore.com/post/2020/11/09/blazor-webassembly-user-registration-and-login-example-tutorial)'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Blazor WebAssembly - 用户注册和登录示例与教程：[https://jasonwatmore.com/post/2020/11/09/blazor-webassembly-user-registration-and-login-example-tutorial](https://jasonwatmore.com/post/2020/11/09/blazor-webassembly-user-registration-and-login-example-tutorial)
- en: 'Introduction to Identity on ASP.NET Core: [https://learn.microsoft.com/en-us/aspnet/core/security/authentication/identity?view=aspnetcore-7.0&tabs=visual-studio&viewFallbackFrom=aspnetcore-2.2](https://learn.microsoft.com/en-us/aspnet/core/security/authentication/identity?view=aspnetcore-7.0&tabs=visual-studio&viewFallbackFrom=aspnetcore-2.2)'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ASP.NET Core上的身份介绍：[https://learn.microsoft.com/en-us/aspnet/core/security/authentication/identity?view=aspnetcore-7.0&tabs=visual-studio&viewFallbackFrom=aspnetcore-2.2](https://learn.microsoft.com/en-us/aspnet/core/security/authentication/identity?view=aspnetcore-7.0&tabs=visual-studio&viewFallbackFrom=aspnetcore-2.2)
- en: 'Choosing A Master Password: [https://medium.com/edgefund/choosing-a-master-password-5d585b2ba568](https://medium.com/edgefund/choosing-a-master-password-5d585b2ba568)'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何选择主密码：[https://medium.com/edgefund/choosing-a-master-password-5d585b2ba568](https://medium.com/edgefund/choosing-a-master-password-5d585b2ba568)
- en: Questions
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the difference between authentication and authorization in a SaaS application,
    and why are both important?
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在SaaS应用程序中，身份验证和授权之间的区别是什么，为什么两者都很重要？
- en: What are some of the technical considerations for implementing authentication
    and authorization in a SaaS application, and how can these help to prevent data
    leaks?
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在SaaS应用程序中实施身份验证和授权时，有哪些技术考虑因素，以及这些因素如何帮助预防数据泄露？
- en: Why is implementing strong authentication and authorization mechanisms particularly
    important in a multi-tenant application, and what are some of the risks associated
    with not doing so?
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么在多租户应用程序中实施强大的身份验证和授权机制尤为重要，以及不这样做可能带来哪些风险？
- en: What are some of the key business considerations for implementing authentication
    and authorization in a SaaS application, and how can these help establish the
    application as a trusted provider of valuable services?
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在SaaS应用程序中实施身份验证和授权时，有哪些关键的商业考虑因素，以及这些因素如何帮助将应用程序确立为值得信赖的有价值服务的提供者？
- en: What are some of the potential consequences of a data leak in a SaaS application,
    and how can implementing strong authentication and authorization mechanisms help
    to mitigate these risks?
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在SaaS应用程序中数据泄露可能带来哪些潜在后果，以及如何通过实施强大的身份验证和授权机制来减轻这些风险？
- en: How can automation be used to enhance the security of a SaaS application, and
    what are some of the benefits of doing so?
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何利用自动化来增强SaaS应用程序的安全性，以及这样做有哪些好处？
- en: 'Part 4: Deploying and Maintaining the Application'
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四部分：部署和维护应用程序
- en: This section focuses on what to do after the application has been built and
    how to keep it running smoothly in production as the user base starts to grow.
    As well as covering testing, this section covers monitoring and logging, **continuous
    integration/continuous deployment** (**CI/CD**), and also offers advice on how
    to scale your SaaS application as the user base starts to grow.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 本节重点关注应用程序构建完成后的操作，以及如何在用户基数开始增长时保持其在生产中的平稳运行。除了涵盖测试，本节还涉及监控和日志、**持续集成/持续部署**（**CI/CD**），并提供有关如何在用户基数开始增长时扩展您的SaaS应用程序的建议。
- en: 'This section has the following chapters:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 本节包含以下章节：
- en: '[*Chapter 9*](B19343_09.xhtml#_idTextAnchor219), *Testing Strategies for SaaS
    Applications*'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第9章*](B19343_09.xhtml#_idTextAnchor219)，*SaaS应用程序的测试策略*'
- en: '[*Chapter 10*](B19343_10.xhtml#_idTextAnchor240), *Monitoring and Logging*'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第10章*](B19343_10.xhtml#_idTextAnchor240)，*监控与日志*'
- en: '[*Chapter 11*](B19343_11.xhtml#_idTextAnchor257), *Release Often, Release Early*'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第11章*](B19343_11.xhtml#_idTextAnchor257)，*频繁发布，尽早发布*'
- en: '[*Chapter 12*](B19343_12.xhtml#_idTextAnchor284), *Growing Pains – Operating
    at Scale*'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第12章*](B19343_12.xhtml#_idTextAnchor284)，*成长之痛 – 规模化运营*'
