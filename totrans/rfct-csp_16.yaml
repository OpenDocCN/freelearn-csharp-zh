- en: '16'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '16'
- en: Adopting Code Standards
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 采用代码规范
- en: In this chapter, we’ll talk about the importance of establishing clear **code
    standards** with the right degree of flexibility. We’ll also cover some built-in
    tooling in Visual Studio that will help your team adopt a consistent set of coding
    standards. This in turn helps you focus on the right things during code review.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论建立具有适当灵活性的清晰**代码规范**的重要性。我们还将介绍Visual Studio中的一些内置工具，这些工具将帮助您的团队采用一致的编码规范。这反过来又可以帮助您在代码审查期间专注于正确的事情。
- en: 'This chapter covers the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了以下主题：
- en: Understanding code standards
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解代码规范
- en: Establishing code standards
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建立代码规范
- en: Formatting and code cleanup in Visual Studio
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio中的格式化和代码清理
- en: Applying code standards with `EditorConfig`
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`EditorConfig`应用代码规范
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The starting code for this chapter is available from GitHub at [https://github.com/PacktPublishing/Refactoring-with-CSharp](https://github.com/PacktPublishing/Refactoring-with-CSharp)
    in the `Chapter16/Ch16BeginningCode` folder.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的起始代码可在GitHub上找到，地址为[https://github.com/PacktPublishing/Refactoring-with-CSharp](https://github.com/PacktPublishing/Refactoring-with-CSharp)，在`Chapter16/Ch16BeginningCode`文件夹中。
- en: Understanding code standards
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解代码规范
- en: In this chapter, we’re going to explore the idea of code standards.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨代码规范的概念。
- en: Code standards are an agreed-upon set of standards your team decides should
    be applied to any new code created by the team.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 代码规范是团队一致决定应用于团队创建的任何新代码的规范集。
- en: These standards have an important role in resolving disputes, focusing attention
    on the areas that truly matter, reducing the amount of technical debt teams naturally
    accumulate, and helping pay down existing technical debt.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这些标准在解决争议、关注真正重要的领域、减少团队自然积累的技术债务以及帮助偿还现有技术债务方面发挥着重要作用。
- en: The importance of code standards
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 代码规范的重要性
- en: 'One of the most frustrating experiences I’ve ever had as a developer is when
    I’ve sent a carefully thought-out change to another developer for review and I’ve
    heard back remarks such as the following:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名开发者，我经历过的最令人沮丧的事情之一是，当我将经过深思熟虑的更改发送给另一位开发者进行审查时，我听到了以下这样的评论：
- en: '*I don’t like your curly* *brace formatting*'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*我不喜欢你那种花括号格式*'
- en: '*Your indentation doesn’t match mine. I use spaces instead* *of tabs*'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*你的缩进不符合我的。我使用空格而不是制表符*'
- en: '*I’d like it if you’d use* `var` *instead of* *the Type*'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*我希望你能使用* `var` *而不是* *类型*'
- en: In these scenarios, the developer in question ignores the *substance* of the
    change and instead focuses on the *style* of the change – specifically where the
    style differs from their preferences.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些情况下，相关的开发者忽略了更改的**实质**，而是专注于更改的**风格**——特别是当风格与他们的偏好不同时。
- en: The cure for this is to adopt a set of code standards that you and your team
    agree upon. These standards establish what your team cares about with regard to
    new code going forward. The standards might also contain the rationale behind
    the team’s style and code preferences.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题的方法是采用一套您和您的团队一致同意的代码规范。这些规范确立了团队对未来新代码的关注点。这些标准还可能包含团队风格和代码偏好的理由。
- en: 'Some examples of code standard decisions might include the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些可能包含的代码规范决策示例：
- en: We use file-scoped namespaces because they result in less nesting
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用文件作用域的命名空间，因为它们导致较少的嵌套
- en: Unit test classes should be named after the classes they test
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试类应该以它们测试的类命名
- en: We prefer using target-typed `new` when instantiating objects
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们更喜欢在实例化对象时使用目标类型`new`
- en: Class definitions should be clearly organized and start with fields, then move
    on to constructors, properties, and finally methods
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类定义应该清晰组织，并从字段开始，然后是构造函数、属性，最后是方法
- en: These standards don’t have to be so rigid that developers don’t have any decisions
    to make or live in constant fear of violating them.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这些规范不必过于僵化，以至于开发者没有做出任何决定，或者生活在不断违反它们的恐惧中。
- en: Your code standards should be prescriptive enough that they address the major
    points of contention and confusion. This helps you focus on creating and maintaining
    code in a way that maximizes your ability to provide value to the organization.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您的代码规范应该足够具体，以解决主要的争议和困惑点。这有助于您以最大化向组织提供价值的方式创建和维护代码。
- en: How code standards influence refactoring
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 代码规范如何影响重构
- en: When you have a definitive set of standards that you and your team agree on,
    it opens the floodgates for refactoring.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当你和你的团队就一套明确的、达成共识的标准进行讨论时，它为重构打开了大门。
- en: Without a set of standards, when you talk about old code, you might say “I don’t
    like this very much,” or “This isn’t how I would have written this,” or “This
    seems poorly put together.”
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 没有一套标准，当你谈论旧代码时，你可能会说“我非常不喜欢这一点”，或者“这不是我会写的样子”，或者“这看起来组织得很差”。
- en: These things may be true, but they aren’t compelling arguments for refactoring.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这些事情可能是真的，但它们并不是重构的强有力论据。
- en: Instead, when you can say “This class violates our code standards in these areas,”
    the conversation becomes much more productive. This is especially true when you
    can establish that some of your standards are critical while others are important
    but less critical.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，当你可以说“这个类在这些方面违反了我们的代码标准”时，对话就会变得更加高效。这尤其在你能够确定一些标准是关键的同时，其他标准虽然重要但不太关键时。
- en: There are certain aspects of code standards that I believe are critical and
    worth going in and making changes to just to get the code onto the new standards.
    For me, these areas often revolve around the handling of `IDisposable` resources
    and using proper exception management practices.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为代码标准中的一些方面是至关重要的，值得深入修改以使代码符合新的标准。对我来说，这些领域通常围绕着对`IDisposable`资源的处理和采用适当的异常管理实践。
- en: Whatever you and your team agree upon is critical. These standards will impact
    your priorities and the decisions you make while maintaining code. Standards violations
    can be issues that get dedicated work items assigned to people to go in and fix
    without any other reason for touching the code in question. We’ll talk more about
    this in the final chapter of this book.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你和你的团队达成什么共识，这都是至关重要的。这些标准将影响你的优先级和你在维护代码时所做的决策。违反标准的问题可能会被分配给人们去修复，而无需其他理由去修改相关的代码。我们将在本书的最后一章中进一步讨论这一点。
- en: Applying code standards to existing code
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将代码标准应用于现有代码
- en: The non-critical standards are used to guide the work developers do every day.
    All code changes are expected to comply with these code standards. Often, the
    standards encourage developers to update nearby pre-existing code that is out
    of compliance.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 非关键标准用于指导开发者每天的工作。所有代码更改都应遵守这些代码标准。通常，这些标准鼓励开发者更新附近不符合标准的现有代码。
- en: For example, your team might have a code standard to not use the `var` keyword
    when you can help it (or to always prefer `var`, if that’s your jam). The team’s
    expectation would be that as developers write new code, the new code will comply
    with this rule.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你的团队可能有一个代码标准，即当你能帮助时不要使用`var`关键字（或者如果你喜欢，始终优先选择`var`）。团队的期望是，随着开发者编写新代码，新代码将遵守这一规则。
- en: When standards are defined, teams sometimes expect that code near the code you’re
    changing will also be updated to comply with the standards. This is particularly
    true for code in the same method. After all, you’ve spent effort testing your
    new code to validate the changes you made. This testing effort can help catch
    any issues introduced by refactoring the rest of the method.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当标准被定义时，团队有时会期望你更改的代码附近的代码也会更新以符合标准。这尤其适用于同一方法中的代码。毕竟，你已经投入了努力测试你的新代码以验证所做的更改。这种测试工作可以帮助捕捉到重构其余方法时引入的问题。
- en: Over time, these code standards will help reduce the rate at which your team
    accumulates technical debt. This ongoing improvement of the existing code will
    also help pay down existing technical debt in frequently changed areas.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，这些代码标准将有助于降低团队积累技术债务的速度。对现有代码的持续改进也将有助于减少经常变更区域的技术债务。
- en: Establishing code standards
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 建立代码标准
- en: So, now that I’ve convinced you how code standards can reduce conflict in your
    team, focus code reviews, and guide refactoring efforts, let’s talk about where
    these standards come from and how we adopt them in our teams.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，既然我已经说服你代码标准如何减少团队冲突、聚焦代码审查和指导重构工作，那么让我们来谈谈这些标准从何而来以及我们如何在团队中采用它们。
- en: Collective code standards
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 集体代码标准
- en: Every software development team already has code standards.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 每个软件开发团队都已经有了代码标准。
- en: I say this because each software development team already has, by definition,
    at least one developer. Every developer, whether they’re aware of it or not, has
    their own set of internalized code standards.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我这么说是因为每个软件开发团队根据定义至少有一个开发者。每个开发者，无论他们是否意识到这一点，都有自己的内部化代码标准。
- en: They may not have thought about their preferences or be able to list them out,
    but if you look at each developer on your team and the code they write in isolation,
    there will be a certain amount of consistency to it.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 他们可能没有考虑过他们的偏好或无法列出它们，但如果你单独查看你团队中的每个开发者和他们编写的代码，将会发现其中存在一定程度的连贯性。
- en: The problem teams encounter is not that they don’t have standards, but rather
    that they have too many standards. Each developer operates from their own internal
    set of standards and preferences and the team must now come together and interact
    with each other’s unique styles and preferences.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 团队遇到的问题不是他们没有标准，而是他们有太多的标准。每个开发者都根据自己的内部标准和偏好进行操作，而团队现在必须聚集在一起，相互交流和互动各自独特的风格和偏好。
- en: Usually, teams will gravitate toward certain styles as developers tend to mimic
    the existing style in code files. As time goes on and teams grow, there are usually
    conflicts over certain choices. When this happens, your team will need to decide
    whether the creative freedom of not having defined any collective standards is
    worth the friction and distractions caused by these differing preferences.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，团队会倾向于某些风格，因为开发者往往会模仿代码文件中现有的风格。随着时间的推移和团队的增长，通常会在某些选择上产生冲突。当这种情况发生时，你的团队将需要决定，没有定义任何集体标准的创造性自由是否值得由这些不同的偏好引起的摩擦和干扰。
- en: Eventually, most teams formalize a set of standards around the things that really
    matter to those teams. Let’s talk about what should go on that list.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，大多数团队会围绕那些真正对团队重要的事情正式化一套标准。让我们来谈谈应该把哪些内容列入清单。
- en: Selecting what is important
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择什么重要
- en: Programming is a creative endeavor and so we don’t want to place too many restrictions
    on how developers write code. On the other hand, when there are too few rules,
    it can result in somewhat eclectic areas of code that are suited to one developer’s
    preferences but not the larger team.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 编程是一项创造性工作，所以我们不希望对开发者编写代码的方式施加过多的限制。另一方面，当规则太少时，可能会导致某些代码区域显得有些杂乱无章，这些区域适合某个开发者的偏好，但不适合更大的团队。
- en: So, how does a development team figure out what should go in its standards?
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，一个开发团队如何确定其标准中应该包含什么内容呢？
- en: I like to start with the standards that keep teams safe. These involve following
    established best practices such as those defined in the .NET’s **Framework Design
    Guidelines** (see *Further reading* for more information). These practices are
    less oriented around individual opinions. This lets them have a high impact while
    being relatively free of drama as a result.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢从确保团队安全的标准开始。这些涉及遵循既定的最佳实践，例如在 .NET 的 **框架设计指南**（见 *进一步阅读* 获取更多信息）中定义的。这些实践较少围绕个人意见。这使得它们具有高影响力，同时相对较少地涉及戏剧性。
- en: Next, look at the major sticking points your team bumps into in code review.
    If you’re sick of discussions around tabs versus spaces – whether or not the `{`
    belongs on its own line, or the use of `var` – these are things to consider adding
    to your team’s standards.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，看看你的团队在代码审查中遇到的主要难题。如果你厌倦了关于制表符与空格的讨论——无论是 `{` 是否应该单独占一行，还是 `var` 的使用——这些都是需要考虑添加到团队标准中的事项。
- en: 'If these areas are major sources of disagreements, you have a couple of choices:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这些领域是分歧的主要来源，你有几个选择：
- en: Pick a stance on the area of contention and adopt it as a team
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在争议领域选择立场并将其作为团队采用
- en: Make having no official stance on the topic your team’s official position
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将对这一主题没有官方立场作为你团队的官方立场
- en: Picking a stance and adopting it as a team may cause temporary arguments and
    hurt feelings. In the long term, adopting a stance tends to be beneficial since
    your team can operate with a consistent style. While developers may feel less
    appreciated or valued by the position, most tend to naturally warm to the new
    style over time, though this can lead to turnover in some cases when developers
    feel very strongly about a topic or that their opinions weren’t considered.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 选择立场并将其作为团队采用可能会引起暂时的争论和伤害感情。从长远来看，采用立场通常会带来好处，因为你的团队可以以一致的风格运作。虽然开发者可能会觉得自己的地位或价值被低估，但大多数人随着时间的推移会自然地接受新的风格，尽管在某些情况下，当开发者对某个话题有强烈的感受或认为他们的意见没有被考虑时，这可能会导致人员流动。
- en: You may not think that explicitly saying your team has no stance on an aspect
    of code would be very beneficial. However, I’ve seen this approach have a massive
    impact on the conversations teams have. By explicitly having no policy on the
    topic, the contentious topic now becomes something quickly resolved.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能认为明确表示你的团队对代码的一个方面没有立场不会带来很大好处。然而，我见过这种方法对团队之间的对话产生了巨大影响。通过明确对主题没有政策，有争议的话题现在变成了可以迅速解决的问题。
- en: Instead of debating whether `var` belongs in your code, the team can point to
    its standards that say individual developers can make their own choices on this
    matter. This moves your team past contentious areas and on to more productive
    topics. The primary downside is that your overall code will be less consistent.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是争论`var`是否应该出现在你的代码中，团队可以指出其标准，说明个人开发者可以在这个问题上做出自己的选择。这使你的团队超越了有争议的领域，转向更富有成效的话题。主要的缺点是整体代码的一致性会降低。
- en: The value of consistency
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一致性的价值
- en: Code that follows consistent styling and design decisions feels more professional,
    makes it easier for developers to work in areas they’ve not worked in before and
    keeps developers productive and focused on the function of code instead of its
    form.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循一致的风格和设计决策的代码感觉更加专业，使开发者更容易在之前未工作过的领域工作，并使开发者保持高效和专注于代码的功能而不是其形式。
- en: Make sure the engineering team is represented when creating code standards and
    determining what goes in those standards. This can be done by involving the entire
    team or by picking a subset that represents the various experience levels and
    preferences of the engineers in your organization. Additionally, if you have individuals
    who may react particularly strongly to a new style, make sure their concerns are
    fully heard and – where possible – involve them in the process.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在创建代码标准和确定这些标准中包含工程团队。这可以通过让整个团队参与或选择代表组织中工程师各种经验和偏好的子集来实现。此外，如果你有可能会对新的风格反应特别强烈的人，确保他们的担忧得到充分听取，并在可能的情况下让他们参与这个过程。
- en: Sources of code standards
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 代码标准的来源
- en: Sometimes, creating a standard of your own can be too difficult or polarizing,
    or you may find that you don’t know where to start when creating code standards.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，制定自己的标准可能过于困难或具有争议性，或者你可能发现自己在创建代码标准时不知道从何开始。
- en: When this happens, I recommend starting from an established set of code standards
    and customizing those as needed.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当这种情况发生时，我建议从一套既定的代码标准开始，并根据需要对其进行定制。
- en: In [*Chapter 12*](B21324_12.xhtml#_idTextAnchor259), we covered the built-in
    code analysis rulesets and how you can progressively move your ruleset from the
    latest ruleset to the latest minimum, then the latest recommended, and finally
    all the latest rulesets. These code analysis rules can help enforce best practices.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第12章*](B21324_12.xhtml#_idTextAnchor259)中，我们介绍了内置的代码分析规则集以及如何逐步将你的规则集从最新规则集移动到最新最低规则集，然后是最新推荐规则集，最后是所有最新规则集。这些代码分析规则可以帮助强制执行最佳实践。
- en: If you’d like a little more formality to things, Microsoft has documented C#
    coding conventions and framework design guidelines that give you a good starting
    point for your team. Both documents are referenced at the end of this chapter
    in the *Further reading* section and are fantastic, evergreen sources of wisdom
    around .NET and C#.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望事情更加正式，微软已经记录了C#编码约定和框架设计指南，这些为你的团队提供了一个良好的起点。这两个文档在本章的*进一步阅读*部分有引用，并且是关于.NET和C#的宝贵、常青的智慧来源。
- en: Evolving code standards
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 代码标准的演变
- en: I mention “evergreen” because C# is not a dormant language. Every November,
    Microsoft ships new versions of C# with new language features building upon the
    previous year’s improvements. This makes the C# language feel more organic as
    it evolves over time.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我提到“常青”，因为C#不是一种停滞的语言。每年11月，微软都会发布新的C#版本，其中包含基于前一年改进的新语言特性。这使得C#语言在随时间演变的过程中感觉更加自然。
- en: Additionally, the context in which we program changes over time. When .NET was
    first introduced, it was essentially a productivity improvement for developers
    primarily performing Windows desktop development. Since then, we’ve seen .NET
    become open source and cross-platform. At the same time, many organizations have
    migrated from on-premises data centers as cloud computing on platforms such as
    Azure and AWS has become the norm.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们编程的上下文随着时间的推移而变化。当 .NET 首次推出时，它本质上是为主要进行 Windows 桌面开发的开发者提供生产力提升的工具。从那时起，我们看到了
    .NET 变得开源和跨平台。同时，许多组织已经从本地数据中心迁移，因为基于 Azure 和 AWS 等平台的云计算已经成为常态。
- en: Things that were best practices back in the original days of C# have since faded
    in popularity as new language features have arrived to take their place and as
    the .NET platform grows new features.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在 C# 的原始时代被认为是最佳实践的事情，随着新语言特性的出现和 .NET 平台的增长而逐渐失去了人气。
- en: I’ve been working with .NET since the beginning and have felt this in my own
    coding style. Throughout this book, I’ve discussed `var` because it’s an easy
    language feature to talk about, but it is a good example of how C# changes over
    time.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我从 .NET 的开始就一直在使用它，并在我的编码风格中感受到了这一点。在这本书中，我讨论了 `var`，因为它是一个容易讨论的语言特性，但它也是一个很好的例子，说明了
    C# 随着时间的推移是如何变化的。
- en: 'Prior to `var`, you’d declare a dictionary of `Guid` keys and `int` values
    as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `var` 之前，您会这样声明一个 `Guid` 键和 `int` 值的字典：
- en: '[PRE0]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When `var` was introduced, the standard shifted to using `var` to simplify
    your declaration since the Type was obvious:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `var` 被引入时，标准转向使用 `var` 来简化您的声明，因为类型是明显的：
- en: '[PRE1]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This resulted in less duplicated syntax and improved developer productivity
    while still keeping the Type obvious.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致了更少的重复语法并提高了开发者的生产力，同时仍然保持了类型明显。
- en: 'With the recent addition of target-typed `new`, my preference changed to use
    it as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 随着最近添加的目标类型 `new`，我的偏好变成了如下使用：
- en: '[PRE2]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: I’m sharing my own personal journey on standards here because it’s a microcosm
    of what engineering teams will go through.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这里分享我自己的个人标准之路，因为它是一个缩影，展示了工程团队将会经历的过程。
- en: You’ll adapt to standards and then C# will change over time, and you’ll adjust
    your standards to keep up. What you may consider a “best” practice right now may
    later turn out to not work well a few months into implementation. It’s also natural
    for the obstacles facing your team to change. When this happens, this forces you
    and your team to adopt new strategies to overcome these obstacles.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 您将适应标准，然后 C# 将随着时间的推移而变化，您将调整标准以保持同步。您现在可能认为的“最佳实践”可能在实施几个月后可能并不适用。面对团队面临的障碍发生变化也是自然的。当这种情况发生时，这迫使您和您的团队采用新的策略来克服这些障碍。
- en: It’s okay to change your standards over time. That’s normal and is a sign of
    an evolving language and the evolving context of our daily programming jobs.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移改变您的标准是正常的。这是语言不断发展和我们日常编程工作上下文不断变化的标志。
- en: Integrating standards into your processes
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将标准整合到您的流程中
- en: Code standards affect a few different places in software development, from how
    you approach building new features to the way in which you maintain code.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 代码标准会影响软件开发中的几个不同地方，从您如何构建新功能到维护代码的方式。
- en: Your code standards should be clearly documented and stored in a central location,
    such as a team wiki or shared document. These standards should be communicated
    to new developers who join the team to help them familiarize themselves with the
    team’s expectations on code standards.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您的代码标准应该清晰地记录并存储在中央位置，例如团队维基或共享文档。这些标准应该传达给新加入团队的开发者，以帮助他们熟悉团队对代码标准的期望。
- en: Code standards should also be reinforced in the code review process after all
    other concerns on the substance of code changes are discussed. These issues should
    be resolved before the code is approved and the work item is completed, but this
    shouldn’t be done in a punitive manner.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论了代码变更实质的所有其他问题之后，代码标准也应该在代码审查过程中得到加强。这些问题应该在代码获得批准和工作项完成之前得到解决，但不应以惩罚的方式进行。
- en: It’s important to understand that internalizing code standards takes some time
    for new developers on the team. It’s normal for it to take a few months with the
    team before your new developers think in terms of the team’s standards.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要理解，对于团队中的新开发者来说，内化代码标准需要一些时间。在您的开发者开始以团队标准为标准思考之前，通常需要几个月的时间。
- en: 'One thing that can help is to incorporate tools into the process that make
    it easy for your team to validate whether its code meets standards before it sends
    the code on for peer review. Code analysis rules and Roslyn Analyzers can help
    with this, but Visual Studio places a few more tools at your disposal that can
    help standardize code before code reaches human review: code formatting and `.``editorconfig`
    files.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 有助于这一点的做法是将工具集成到流程中，使您的团队能够在代码提交同行评审之前轻松验证其代码是否符合标准。代码分析规则和Roslyn分析器可以帮助做到这一点，但Visual
    Studio还提供了一些额外的工具，可以在代码达到人工评审之前帮助标准化代码：代码格式化和`.``editorconfig`文件。
- en: Formatting and code cleanup in Visual Studio
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Visual Studio中的格式化和代码清理
- en: It turns out that Visual Studio can automatically arrange and even clean up
    your code in a consistent manner through built-in features.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 结果表明，Visual Studio可以通过内置功能自动排列甚至以一致的方式清理您的代码。
- en: Formatting documents
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 格式化文档
- en: 'One of the easiest ways to do this is with the **Format Document** feature,
    either by pressing *Ctrl* + *K* and then *Ctrl* + *D* or by opening the **Edit**
    menu, then going to **Advanced** and selecting **Format Document**, as shown in
    *Figure 16**.1*:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 实现这一点的最简单方法之一是使用**格式文档**功能，可以通过按*Ctrl* + *K*然后*Ctrl* + *D*，或者通过打开**编辑**菜单，然后转到**高级**并选择**格式文档**，如图*图16.1*所示。1*：
- en: '![Figure 16.1 – Formatting the active editor document](img/B21324_16_01.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图16.1 – 格式化活动编辑器文档](img/B21324_16_01.jpg)'
- en: Figure 16.1 – Formatting the active editor document
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.1 – 格式化活动编辑器文档
- en: This will change the code in your current file to match the preferences you’ve
    configured in Visual Studio.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这将更改您当前文件中的代码，以匹配您在Visual Studio中配置的首选项。
- en: These settings can be configured by opening the **Tools** menu and then selecting
    **Options…**. From there, expand the **Text Editor**, **C#**, **Code Style**,
    and **Formatting** nodes until you see the various preferences for indentation,
    new lines, spacing, and wrapping.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这些设置可以通过打开**工具**菜单然后选择**选项…**进行配置。从那里，展开**文本编辑器**、**C#**、**代码样式**和**格式化**节点，直到您看到关于缩进、新行、间距和换行的各种首选项。
- en: 'These settings blades allow you to configure the formatting preferences of
    Visual Studio and preview the formatting choices, as shown in *Figure 16**.2*:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这些设置选项卡允许您配置Visual Studio的格式化首选项并预览格式选择，如图*图16.2*所示。2*：
- en: '![Figure 16.2 – Changing how Visual Studio formats catch statements](img/B21324_16_02.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图16.2 – 更改Visual Studio格式化捕获语句的方式](img/B21324_16_02.jpg)'
- en: Figure 16.2 – Changing how Visual Studio formats catch statements
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.2 – 更改Visual Studio格式化捕获语句的方式
- en: Once you’ve customized your settings, these settings will be used any time you
    use the **Format** **Document** feature.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您自定义了设置，这些设置将在您使用**格式** **文档**功能时使用。
- en: Many developers learn the *Ctrl* + *K* and *Ctrl* + *D* shortcuts to format
    documents early on and use them reflexively, but you can actually get Visual Studio
    to apply code cleanup automatically.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 许多开发者早期就学会了使用*Ctrl* + *K*和*Ctrl* + *D*快捷键来格式化文档，并习惯性地使用它们，但实际上您可以让Visual Studio自动应用代码清理。
- en: Automatically formatting documents
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自动格式化文档
- en: Visual Studio has a **Code Cleanup** feature that allows you to format your
    code either manually or automatically whenever the file is saved.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio有一个**代码清理**功能，允许您在文件保存时手动或自动格式化代码。
- en: This is done through `using` statements, sort the members in your classes into
    a more consistent order, and apply your code formatting preferences to a file.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这是通过`using`语句完成的，将您类中的成员按更一致的方式排序，并将您的代码格式首选项应用到文件中。
- en: 'To configure a code cleanup profile, go to the **Options** dialog again and
    this time, find **Code Cleanup** in the **Text Editor** node, as shown in *Figure
    16**.3*:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置代码清理配置文件，请再次转到**选项**对话框，这次在**文本编辑器**节点中找到**代码清理**，如图*图16.3*所示。3*：
- en: '![Figure 16.3 – Enabling code cleanup when files are saved](img/B21324_16_03.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图16.3 – 保存文件时启用代码清理](img/B21324_16_03.jpg)'
- en: Figure 16.3 – Enabling code cleanup when files are saved
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.3 – 保存文件时启用代码清理
- en: From here, you can check **Run Code Cleanup profile on Save** to have your cleanup
    profile automatically applied.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，您可以选择**在保存时运行代码清理配置文件**，以自动应用您的清理配置文件。
- en: I also recommend you click **Configure Code Cleanup** to view your cleanup profiles.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我还建议您点击**配置代码清理**来查看您的清理配置文件。
- en: 'This shows you the fixers that will be applied as part of each profile, as
    shown in *Figure 16**.4*, and allows you to configure what is and isn’t included
    in the code cleanup action:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了每个配置文件中将应用哪些修复程序，如图*图16.4*所示，并允许您配置代码清理操作中包含和不包含的内容：
- en: '![Figure 16.4 – Configuring code cleanup profiles](img/B21324_16_04.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图16.4 – 配置代码清理配置文件](img/B21324_16_04.jpg)'
- en: Figure 16.4 – Configuring code cleanup profiles
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.4 – 配置代码清理配置文件
- en: Automatically cleaning up code on save can be helpful, but it does have some
    downsides. If your code hasn’t been cleaned up in a while, your cleanup action
    could appear to create many changes in the file. This can be confusing in git
    when multiple authors are trying to modify the same file or even see what has
    changed.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在保存时自动清理代码可能会有所帮助，但它也有一些缺点。如果您的代码一段时间内没有清理，您的清理操作可能会在文件中创建许多更改。当多个作者试图修改同一文件或查看更改时，这可能会在git中造成混淆。
- en: Configuring code style settings
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置代码样式设置
- en: Believe it or not, when we covered the C# settings for new lines and indentation
    earlier, this wasn’t the limit of what Visual Studio can do.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 信不信由你，当我们之前介绍了C#的新行和缩进设置时，这并不是Visual Studio能做的极限。
- en: Visual Studio provides a **Code Style** settings section that allows you to
    configure your individual preferences around most language features found in C#.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio提供了一个**代码样式**设置部分，允许您配置围绕C#中找到的大多数语言功能的个人偏好。
- en: 'These settings are found in the **Options** dialog under **Text Editor**, **C#**,
    **Code Style**, and then **General**, as shown in *Figure 16**.5*:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这些设置可以在**选项**对话框的**文本编辑器**、**C#**、**代码样式**和**常规**下找到，如图*图16.5*所示：
- en: '![Figure 16.5 – Configuring Code Style rules in Visual Studio](img/B21324_16_05.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图16.5 – 在Visual Studio中配置代码样式规则](img/B21324_16_05.jpg)'
- en: Figure 16.5 – Configuring Code Style rules in Visual Studio
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.5 – 在Visual Studio中配置代码样式规则
- en: In this user interface, you can configure which rules you care about, what your
    preferences are on each rule, and how much you care about each rule. Also notice
    the **Generate .editorconfig file from settings** button, as we’ll talk about
    that more later.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个用户界面中，您可以配置您关心的规则，每个规则上的偏好，以及您对每个规则的关心程度。注意**从设置生成.editorconfig文件**按钮，我们稍后会详细讨论。
- en: For each rule, you get to select whether the rule only appears as a refactoring
    option, whether Visual Studio subtly suggests the rule through green underlines
    on identifiers, or whether Visual Studio should be more aggressive, such as using
    compiler warnings or compiler errors for violations from standards.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每条规则，您可以选择规则是否仅作为重构选项出现，Visual Studio是否通过标识符上的绿色下划线微妙地建议该规则，或者Visual Studio是否应该更加激进，例如使用编译器警告或编译器错误来处理违反标准的行为。
- en: There are a lot of these settings, but they allow you to fine-tune your individual
    preferences for which C# features you prefer and how you like them formatted.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多这样的设置，但它们允许您微调您对C#功能的首选以及您希望它们如何格式化的个人偏好。
- en: However, these are your *individual* settings that get applied to the code you
    work with on your own machine. In the next section, we’ll talk about how to make
    these settings apply to your entire team.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这些是您**个人**的设置，它们将应用于您在自己的机器上工作的代码。在下一节中，我们将讨论如何使这些设置适用于您的整个团队。
- en: Applying code standards with EditorConfig
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用EditorConfig应用代码标准
- en: Let’s take a look at how you can take the same code style settings found in
    the options dialog and attach them to a project through an `.``editorconfig` file.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看您如何将选项对话框中找到的相同的代码样式设置通过一个`.editorconfig`文件附加到一个项目上。
- en: The `.editorconfig` files that contain style and language usage rules that apply
    to your project. Any violation of your `EditorConfig` rules will result in compiler
    warnings and suggestions in the Visual Studio editor.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 包含应用于您项目中的样式和语言使用规则的`.editorconfig`文件。任何违反您的`EditorConfig`规则的行为都将导致Visual Studio编辑器中的编译器警告和建议。
- en: EditorConfig files outside of Visual Studio
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio之外的EditorConfig文件
- en: At the time of this writing, `.editorconfig` files work in Visual Studio and
    JetBrains Rider natively. In VS Code, EditorConfig files are supported as long
    as you install the C# Dev Kit and the EditorConfig for VS Code extension. See
    the *Further reading* section for instructions on enabling these features in VS
    Code and JetBrains Rider.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，`.editorconfig`文件在Visual Studio和JetBrains Rider中原生支持。在VS Code中，只要您安装了C#开发工具包和EditorConfig
    for VS Code扩展，EditorConfig文件就受到支持。有关在VS Code和JetBrains Rider中启用这些功能的说明，请参阅*进一步阅读*部分。
- en: The key benefit of `EditorConfig` files is that they allow all developers working
    on a project to work with a consistent set of formatting and styling preferences.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`EditorConfig` 文件的关键好处是，它允许所有参与项目开发的人员使用一致的一组格式和样式首选项进行工作。'
- en: Reviewing our starter code
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查我们的起始代码
- en: The code we’ll be formatting lives in our [*Chapter 16*](B21324_16.xhtml#_idTextAnchor341)
    solution, which has a `FlightQueryDecoder` console app and an associated `xUnit`
    test project. This code is minimal for this chapter and revolves around the `FlightQueryParser`
    class.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要格式化的代码位于我们的 [*第16章*](B21324_16.xhtml#_idTextAnchor341) 解决方案中，该方案包含一个 `FlightQueryDecoder`
    控制台应用程序和一个相关的 `xUnit` 测试项目。这段代码在本章中是最小的，并且围绕 `FlightQueryParser` 类展开。
- en: 'Let’s start with the first half of `FlightQueryParser`, which parses a flight
    search string such as `AD08FEBDENLHR` into a `FlightQuery` object:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从 `FlightQueryParser` 的前半部分开始，它将航班搜索字符串，例如 `AD08FEBDENLHR`，解析为 `FlightQuery`
    对象：
- en: '[PRE3]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The actual logic here isn’t the focus. What I want to highlight to you is the
    inconsistency in how the code is formatted within the block.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 实际逻辑不是重点。我想向你强调的是代码在块内格式化的不一致性。
- en: 'Let’s see the other half of the file, which takes a flight search result string
    such as `DEN LHR 05:50P 09:40A E0/789 8:50` and converts it to a `FlightQueryResult`:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看文件的一半，它将一个航班搜索结果字符串，例如 `DEN LHR 05:50P 09:40A E0/789 8:50`，转换为 `FlightQueryResult`：
- en: '[PRE4]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: While this code is deliberately bad and inconsistently formatted to serve as
    an example, I’m sure you’ve seen many larger files in the real world with equally
    inconsistent styling.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这段代码故意写得不好，格式也不一致，以作为示例，但我相信你在现实世界中已经看到过很多同样格式不一致的大文件。
- en: Now that we’ve introduced this code with its different styling choices, let’s
    add an `.editorconfig` file to the project and see how that can help enforce styles.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了这段代码及其不同的样式选择，让我们将 `.editorconfig` 文件添加到项目中，看看它如何有助于强制执行样式。
- en: Adding an EditorConfig
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加 EditorConfig
- en: To add the `.editorconfig` file, right-click on the `Packt.FlightQueryDecoder`
    project and choose **Add** and then **New EditorConfig** or **New** **EditorConfig
    (IntelliCode)**.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加 `.editorconfig` 文件，请右键单击 `Packt.FlightQueryDecoder` 项目，然后选择 **添加**，然后选择
    **新建 EditorConfig** 或 **新建 EditorConfig (IntelliCode)**。
- en: What is EditorConfig (IntelliCode)?
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是 EditorConfig (IntelliCode)？
- en: There’s a difference between the `.editorconfig` file with the default options,
    whereas the IntelliCode choice analyzes your project and generates an `.editorconfig`
    file from the conventions it observes in your current code. Both are viable options
    for creating a starting point for your projects.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 默认选项的 `.editorconfig` 文件与 IntelliCode 选项有所不同，后者分析你的项目，并从你在当前代码中观察到的约定生成 `.editorconfig`
    文件。两者都是为你的项目创建起点的好选择。
- en: Depending on which option you selected, you may need to select which folder
    the `.editorconfig` file should live in. If you’re prompted, select the default
    choice of the `Packt.FlightQueryDecoder` folder.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你选择的选项，你可能需要选择 `.editorconfig` 文件应该位于哪个文件夹中。如果你被提示，请选择 `Packt.FlightQueryDecoder`
    文件夹的默认选项。
- en: Once this completes, you should see a new `.editorconfig` file present in your
    project in **Solution Explorer**.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成，你应该会在 **解决方案资源管理器** 中看到一个新的 `.editorconfig` 文件。
- en: Before we go on to work with this `.editorconfig` file, it’s worth pointing
    out that the `.editorconfig` file based on your current code style choices. This
    allows you to customize your styles and then create an `.editorconfig` file out
    of these choices.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续使用这个 `.editorconfig` 文件之前，值得指出的是，基于你当前的代码样式选择创建的 `.editorconfig` 文件。这允许你自定义你的样式，然后从这些选择中创建一个
    `.editorconfig` 文件。
- en: Now that we have an `.editorconfig` file, let’s customize it.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了 `.editorconfig` 文件，让我们来自定义它。
- en: Customizing EditorConfigs
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义 EditorConfigs
- en: Double-click on the `.editorconfig` file to open its properties view.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 双击 `.editorconfig` 文件以打开其属性视图。
- en: You’ll see an editor with tabs allowing you to customize various properties
    related to white space, code style, naming style, and Roslyn Analyzers.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到一个带有标签的编辑器，允许你自定义与空白、代码样式、命名样式和 Roslyn 分析器相关的各种属性。
- en: There are a lot of options here, so we’ll focus on just a few very specific
    ones.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有许多选项，所以我们将专注于其中几个非常具体的选项。
- en: Go to the **Code Style** tab and then scroll down to the bottom for the **var**
    **preferences** group.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 前往 **代码样式** 选项卡，然后向下滚动到底部，找到 **var** **首选项** 组。
- en: 'From here, you can state your team’s preferences and the severity of violations
    of those preferences. For example, if your team wants to avoid `var`, you could
    set all three `var` rules to **Prefer explicit type** and increase the severity
    to **Warning** or **Error**, as shown in *Figure 16**.6*:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，你可以声明你团队的偏好以及违反这些偏好的严重性。例如，如果你的团队想避免使用 `var`，你可以将所有三个 `var` 规则设置为**首选显式类型**，并将严重性提高到**警告**或**错误**，如图
    *图 16**.6* 所示：
- en: '![Figure 16.6 – Customizing the var preferences for your project](img/B21324_16_06.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.6 – 定制项目中的 var 偏好](img/B21324_16_06.jpg)'
- en: Figure 16.6 – Customizing the var preferences for your project
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.6 – 定制项目中的 var 偏好
- en: 'Save this file and go back into `FlightQueryParser.cs`, and you should now
    see warnings and errors in your editor for violations of these rules, as seen
    in *Figure 16**.7*:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 保存此文件并返回到 `FlightQueryParser.cs`，你应该现在会在你的编辑器中看到违反这些规则的警告和错误，如图 *图 16**.7* 所示：
- en: '![Figure 16.7 – Visual Studio warnings against using var based on code style
    rules](img/B21324_16_07.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.7 – 基于代码样式规则对使用 var 的 Visual Studio 警告](img/B21324_16_07.jpg)'
- en: Figure 16.7 – Visual Studio warnings against using var based on code style rules
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.7 – 基于代码样式规则对使用 var 的 Visual Studio 警告
- en: 'These rule violations do not cause your code to not compile but they do appear
    in the **Error List** view, as shown in *Figure 16**.8*:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这些规则违规不会导致你的代码无法编译，但它们会出现在 **错误列表** 视图中，如图 *图 16**.8* 所示：
- en: '![Figure 16.8 – Code violations appearing in Error List](img/B21324_16_08.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.8 – 出现在错误列表中的代码违规](img/B21324_16_08.jpg)'
- en: Figure 16.8 – Code violations appearing in Error List
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.8 – 出现在错误列表中的代码违规
- en: Because `.editorconfig` files are added to source control when you commit your
    code, other developers on your team will pull down that file and see the exact
    same styling preferences and warnings you see on your machine.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `.editorconfig` 文件在提交代码时被添加到源控制中，你的团队中的其他开发者将拉取该文件并看到与你机器上完全相同的样式首选项和警告。
- en: This makes code standards apparent during the development process and reduces
    the odds of a peer review of important code changes breaking down into a discussion
    of the appropriate placement of opening curly braces or the use of `var`.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得代码标准在开发过程中变得明显，并减少了重要代码更改的同行评审陷入关于开括号的适当位置或使用 `var` 的讨论的可能性。
- en: Summary
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Code standards are important for helping your team focus on productive things
    and ensuring source code can be easily maintained by all developers on your team.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 代码标准对于帮助你的团队专注于生产性事物并确保源代码可以被团队中的所有开发者轻松维护非常重要。
- en: While code standards don’t need to include everything, it can be helpful to
    codify stances on commonly contested items or best practices your team wants to
    make sure absolutely every change follows.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然代码标准不需要包括一切，但将关于常见争议事项或团队希望确保每个更改都遵循的最佳实践进行编码化可能是有帮助的。
- en: Visual Studio provides a number of features that help ensure a consistent and
    high-quality codebase including code formatting, code cleanup profiles, formatting
    on save, code analysis warning profiles, code styles at the editor level, and
    EditorConfigs to configure code styles inside of your editor.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio 提供了许多功能，可以帮助确保代码库的一致性和高质量，包括代码格式化、代码清理配置文件、保存时格式化、代码分析警告配置文件、编辑器级别的代码样式以及
    EditorConfigs 来配置编辑器内的代码样式。
- en: In the final chapter of this book, we’ll discuss refactoring code as part of
    a larger organization and as part of an agile software development team.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的最后一章中，我们将讨论作为更大组织的一部分以及作为敏捷软件开发团队的一部分进行代码重构。
- en: Questions
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: How do you determine what code standards your team should adopt?
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何确定你的团队应该采用哪些代码标准？
- en: What are some ways you can handle disagreements on style rules?
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你有哪些方法可以处理关于样式规则的争议？
- en: What are some options for configuring how Visual Studio formats code?
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有哪些选项可以配置 Visual Studio 代码的格式化方式？
- en: What does the **New EditorConfig (IntelliCode)** option do?
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**新 EditorConfig (IntelliCode)** 选项做什么？'
- en: Further reading
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'You can find more information about materials from this chapter at these URLs:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下网址找到关于本章材料的更多信息：
- en: '*Framework design* *guidelines*: [https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/](https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/)'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*框架设计* **指南**：[https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/](https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/)'
- en: '*.NET coding style* *guidelines*: [https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/coding-style/coding-conventions](https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/coding-style/coding-conventions)'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*.NET 编码风格* 指南: [https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/coding-style/coding-conventions](https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/coding-style/coding-conventions)'
- en: '*Create portable, custom editor settings with* *EditorConfig*: [https://learn.microsoft.com/en-us/visualstudio/ide/create-portable-custom-editor-options](https://learn.microsoft.com/en-us/visualstudio/ide/create-portable-custom-editor-options)'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 EditorConfig 创建可移植的、自定义的编辑器设置*: [https://learn.microsoft.com/en-us/visualstudio/ide/create-portable-custom-editor-options](https://learn.microsoft.com/en-us/visualstudio/ide/create-portable-custom-editor-options)'
- en: '*Beginner friendly EditorConfig* *settings*: [https://newdevsguide.com/2022/11/22/beginner-friendly-csharp/](https://newdevsguide.com/2022/11/22/beginner-friendly-csharp/)'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*适合初学者的 EditorConfig* 设置: [https://newdevsguide.com/2022/11/22/beginner-friendly-csharp/](https://newdevsguide.com/2022/11/22/beginner-friendly-csharp/)'
- en: '*Using EditorConfig in VS Code with C# Dev* *Kit*: [https://code.visualstudio.com/docs/csharp/formatting-linting#_how-to-support-editorconfig-with-c-dev-kit](https://code.visualstudio.com/docs/csharp/formatting-linting#_how-to-support-editorconfig-with-c-dev-kit)'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在 VS Code 中使用 C# 开发套件支持 EditorConfig*: [https://code.visualstudio.com/docs/csharp/formatting-linting#_how-to-support-editorconfig-with-c-dev-kit](https://code.visualstudio.com/docs/csharp/formatting-linting#_how-to-support-editorconfig-with-c-dev-kit)'
- en: '*Using EditorConfig in JetBrains* *Rider*:[https://www.jetbrains.com/help/rider/Using_EditorConfig.html](https://www.jetbrains.com/help/rider/Using_EditorConfig.html)'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在 JetBrains Rider 中使用 EditorConfig*: [https://www.jetbrains.com/help/rider/Using_EditorConfig.html](https://www.jetbrains.com/help/rider/Using_EditorConfig.html)'
