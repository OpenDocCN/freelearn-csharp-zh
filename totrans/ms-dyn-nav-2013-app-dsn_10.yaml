- en: Chapter 10. Application Design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Microsoft Dynamics NAV, technology and functionality go hand in hand. It
    is impossible to design a good change or enhancement to the application without
    thorough knowledge of how the standard pieces fit together. With this knowledge
    now available, we can start designing our own applications.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we talked about application design for Microsoft Dynamics NAV.
    We discussed the design patterns, how it works, and why it works that way. We
    designed several small and large changes to the system both in detailed examples
    and on a conceptual level.
  prefs: []
  type: TYPE_NORMAL
- en: For this chapter, we will fit all the pieces together that we have learned in
    this book and turn them into concepts for good application design.
  prefs: []
  type: TYPE_NORMAL
- en: We will also discuss how to approach a Microsoft Dynamics NAV implementation
    project and how to maintain the application. This requires a different approach
    depending on the level of customization the project contains.
  prefs: []
  type: TYPE_NORMAL
- en: Application life cycle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Designing an application is more than just analyzing processes and developing
    new objects. These phases are just the tip of the iceberg.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once your application has been designed and developed, it is most likely that
    one or more companies will start using it. When this happens, your software will
    start a new phase in its life cycle. Let''s have a look at the life cycle of a
    Microsoft Dynamics NAV application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Application life cycle](img/0365EN_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The **Development** phase of the application starts with the **Fit/Gap** analysis,
    followed by the **Design** and **Build** steps we did in the earlier chapters.
    When that is completed, the **Maintenance** phase of your application will start.
  prefs: []
  type: TYPE_NORMAL
- en: The **Maintenance** phase starts with the implementation and taking the software
    into **Production**. The first time this will happen, it will be the Microsoft
    Dynamics NAV implementation in your company. Once this is done, your system will
    enter the real life cycle where constant improvements will be made to the application.
  prefs: []
  type: TYPE_NORMAL
- en: With the flexibility of the Microsoft Dynamics NAV product, this is a very special
    procedure where it is easy to encounter the many pitfalls there are along the
    way.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will discuss some guidelines that are important to follow. There are six
    categories: Design to use, Maintain, Support, Upgrade, Perform, and Analyze.'
  prefs: []
  type: TYPE_NORMAL
- en: Design to use
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Designing software is not a goal, it's a way to support companies doing their
    business. This makes usability one of the most important focus areas when designing
    your application.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing that pops in mind when talking about usability is the user interface.
    Microsoft Dynamics NAV 2013 has two interfaces that are commonly used, the Windows
    Client and the new Web Client.
  prefs: []
  type: TYPE_NORMAL
- en: Pages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Page objects are used to define the user interface. They are very strict in
    how they are displayed. However, they have a lot of advantages. Let''s go through
    some of the design options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Tabs**: Pages have vertical tabs that can be opened at the same time, making
    it less desirable to move fields to the first tab.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Embedded Lists**: Another advantage of pages is that the users always get
    to see an embedded list page first and then continue to the card, which opens
    in a new Windows control after selecting a record.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Importance**: On pages, it is possible to promote controls to be displayed
    when the tab is closed or made additional so the end users have to specifically
    make them visible. Use this functionality carefully when designing your application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Personalization**: If not restricted, all pages can be personalized by the
    end users, even card pages. This makes it easier to customize pages during an
    implementation for a company, department, or end user. Personalization does not
    change the object definition and does not require a developer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s walk through the elements of a page as shown in the following screenshot
    taken from the example add-on solution in [Chapter 7](ch07.html "Chapter 7. Storage
    and Logistics"), *Storage and Logistics*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Pages](img/0365EN_10_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s have a look at the fields in more detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Actions**: All transactions that can be performed on a page are actions.
    Some actions are generated by the system while other actions are defined by the
    developer. Users can select which actions they want to emphasize, making it easier
    for them to get started with the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fact Boxes**: Each page can have an unlimited number of fact boxes attached.
    Fact boxes can be used to show detailed information about a record. The **Route**
    page in [Chapter 7](ch07.html "Chapter 7. Storage and Logistics"), *Storage and
    Logistics*, is a good example where we can see the route in Bing maps and the
    details of the stops.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Emphasis**: A control on a page can be emphasized to a limited combination
    of colors, bold, and italics.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Client extensibility**: A control on a page can be taken over by a `.net
    dll`. The .NET control will use the content of the `.dll` and render the information.
    We discussed Client extensibility in [Chapter 9](ch09.html "Chapter 9. Interfacing"),
    *Interfacing*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Web Services**: All pages can be exposed as a web service. This makes it
    possible to create your own user interface in Visual Studio, Borland Delphi, or
    another development tool that can consume web services.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Role centers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When it comes to usability in Microsoft Dynamics NAV 2013, the Role Centers
    are the heart of the application. The Role Center is the place where the end users
    starts their working day and returns to regularly. Let's discuss the Role Centers
    we created in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Squash application
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The Squash Court Role Center was created in [Chapter 2](ch02.html "Chapter 2. A
    Sample Application"), *A Sample Application*, and looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Squash application](img/0365EN_10_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The purpose of the screenshot is to just familiarize with the different sections
    in an application
  prefs: []
  type: TYPE_NORMAL
- en: The **Application** screen has two sections, the **Menu** section and the **Role
    Center** section.
  prefs: []
  type: TYPE_NORMAL
- en: The **Menu** section is created by merging actions from the Role Center with
    the main menu. By clicking on **Departments** in the left-hand side corner, an
    end user can access the entire application depending on the security setup.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More information about the home items can be found on the blog at [https://markbrummel.wordpress.com/2014/07/02/tip-26-grouping-in-the-homeitems/](https://markbrummel.wordpress.com/2014/07/02/tip-26-grouping-in-the-homeitems/).
  prefs: []
  type: TYPE_NORMAL
- en: The Role Center has a left and right part. The left part usually contains the
    activities and a shortcut to Microsoft Outlook. The right part contains shortlists
    to the **My List** pages that show frequently used records and notes. An end user
    can customize the Role Center and move the parts around.
  prefs: []
  type: TYPE_NORMAL
- en: Storage and Logistics
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This application has four different Role Centers. We will discuss the Storage
    Role Center (123.456.726). Other Role Centers are Logistics Role Center (123.456.700),
    Manager Log. and St. Role Center (123.456.756) Income and Expenses Role Center
    (123.456.761).
  prefs: []
  type: TYPE_NORMAL
- en: '![Storage and Logistics](img/0365EN_10_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: On the **Activities Storage** page, employees can directly go to the documents
    filtered on dates from the stacks. From the **Menu** options, users can create
    new documents or open worksheets and journals.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have designed two shortlist pages, **My Products** and **My Regions**. **My
    Products** can be changed by the user by clicking on the small lightning button
    and select **Manage List**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Storage and Logistics](img/0365EN_10_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The **My Region** page is built on the Region table. Users cannot change this
    list. The page uses the `SourceTableTemporary` property and `ShowAsTree`. This
    allows users to expand and collapse warehouses.
  prefs: []
  type: TYPE_NORMAL
- en: Reports
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The reports in the standard Microsoft Dynamics NAV application are typical ERP
    reports that show the required information and that's it.
  prefs: []
  type: TYPE_NORMAL
- en: Designing reports requires special skills and is not as easy as it seems. When
    changing a report layout from the standard application, it is best practice to
    leave the original report as it is and modify the saved copy.
  prefs: []
  type: TYPE_NORMAL
- en: We will discuss more about reports in the *Design to analyze* section.
  prefs: []
  type: TYPE_NORMAL
- en: Design to Maintain
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It seldom happens that software is designed and developed, never to be changed.
    The objects created are usually changed many times in the lifetime of the application.
  prefs: []
  type: TYPE_NORMAL
- en: The changes to an existing object may be done quite a while after the object's
    original development. At this time, even if the changes are done by the original
    developer, it will be difficult to remember how and why some changes are done.
  prefs: []
  type: TYPE_NORMAL
- en: Hence, it is important to develop in a unified way. This will make it easier
    for developers to read each other's code or to understand their own code after
    months or years.
  prefs: []
  type: TYPE_NORMAL
- en: Written external documentation is a no brainer at this point but we should realize
    that this is not always done and focus on more obvious and easier ways. A well
    designed and built application should be self-documenting. This is done by following
    some simple guidelines.
  prefs: []
  type: TYPE_NORMAL
- en: Naming
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While creating new objects, it is important to follow the naming guidelines
    of the product. Field and variable names should explain themselves.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This MSDN article at [http://msdn.microsoft.com/en-us/library/ee414213.aspx](http://msdn.microsoft.com/en-us/library/ee414213.aspx)
    describes more details on naming conventions in Microsoft Dynamics NAV.
  prefs: []
  type: TYPE_NORMAL
- en: Singular and plural
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Table names should be singular. This will make the C/AL `TABLECAPTION` command
    return a usable value. Let''s look at an example in the Item table (27):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will generate the following error message with the table
    caption singular:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Singular and plural](img/0365EN_10_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: List pages should be plural as they contain more than one record while card
    pages are singular.
  prefs: []
  type: TYPE_NORMAL
- en: Reserved words
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Reserved words should not be used in objects as name for fields, variables,
    and functions.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Microsoft has published a list of reserved words at [http://msdn.microsoft.com/en-us/library/ee414230.aspx](http://msdn.microsoft.com/en-us/library/ee414230.aspx).
  prefs: []
  type: TYPE_NORMAL
- en: One very important reserved word, which is missing in that list is **Action**.
    This is reserved for using `IF Page.RUNMODAL = ACTION::OK then`.
  prefs: []
  type: TYPE_NORMAL
- en: Names and abbreviations
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Using standard naming and abbreviations is one of the strong points of the application
    that makes it easy to learn for new developers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '**<<Table name>> No.**: This is the standard reference to a field in a table
    relation. If the field has a relation with the customer, the field is called **Customer
    No.** and if the relation is with vendor, we use **Vendor No**. In our example
    application, we have used **Product No.**, **Squash Player No.**, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Line No.**: This fieldname is always used in the popular Header/Line and
    Journal constructions. This field always uses the auto split key property in pages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Entry No.**: This fieldname is always used for entry and register tables
    such as G/L Entry and Customer Ledger Entry.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Name and Description**: This is the standard naming for persons or products.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Quantity/Qty.**: This is the standard name and abbreviation to measure quantity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**(LCY)**: This is the abbreviation for Local Currency.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Duty Due %**: When the field represents a percentage, this sign should be
    in the field name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: A list of naming conventions can be found on MSDN at [http://msdn.microsoft.com/en-us/library/ee414213.aspx](http://msdn.microsoft.com/en-us/library/ee414213.aspx).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Quantity versus quality
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is a general rule that can be applied to the quantity and quality of software
    that says that when more functionality is added to the product, it is difficult
    to maintain a certain level of quality.
  prefs: []
  type: TYPE_NORMAL
- en: '![Quantity versus quality](img/0365EN_10_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To avoid this in your solution, make sure you don't just add all the requirements
    from your prospects into the product in one release and instead use a release
    policy that ensures small pieces of functionality to be developed, tested, and
    implemented each time.
  prefs: []
  type: TYPE_NORMAL
- en: Loosely coupled
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When developing an add-on product, it is important to divide it into smaller
    parts. This will make it easier to have several developers work on the application
    and release parts of the application. Each part of the add-on has its own framework
    that interacts with other pieces of the add-on or the standard product.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is exactly what we did in the storage and logistics example add-on application.
    The add-on has three main functional areas: Storage, Logistics, and Income and
    Expenses. These three areas share the same master data.'
  prefs: []
  type: TYPE_NORMAL
- en: Each area interacts with other parts of the application using mini interfaces.
    Using this concept will also have great benefits when upgrading to newer versions,
    which we will discuss in the *Design to upgrade* section.
  prefs: []
  type: TYPE_NORMAL
- en: Design to support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are different levels of providing support. First-level support is usually
    done by someone at the customer site that works in the IT department or someone
    that has a feeling for IT. The general first line support questions are about
    filters, missing data, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Second-level support is usually a small bug in the software or something missing
    in the setup or master data. Depending on the customer, this will be solved by
    the internal IT department or escalated to the partner.
  prefs: []
  type: TYPE_NORMAL
- en: As a developer, you will most likely employ third-line support where something
    needs to be debugged or reverse engineered in order to find the bug.
  prefs: []
  type: TYPE_NORMAL
- en: So before a bug reaches the developer, other people have already spent time
    in analyzing the issue without success. The development of the software should
    be done in such a way that third-line support makes a minimum change or occurrence.
  prefs: []
  type: TYPE_NORMAL
- en: When the guidelines discussed in the *Design to use* and *Design to maintain*
    sections are used, it will already be easier for the second-level support to analyze
    the issue.
  prefs: []
  type: TYPE_NORMAL
- en: Second-level support
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Most problems in support occur in the second level. The first-level support
    engineers are often very familiar with the system and the third-level support
    engineers are often the original developers of the software.
  prefs: []
  type: TYPE_NORMAL
- en: Second-level support people need to be able to go in a database and analyze
    the issue without having to change their way of thinking.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s briefly summarize the general guidelines for this specific topic:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Shortcuts**: Use standard shortcuts as much as possible. For example, use
    *F9* for posting and registering, and *Ctrl* + *F7* for ledger entries. Avoid
    using reserved shortcuts such as *F8* (copy previous) and *Alt*+ *F3* (filter
    to this value).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Screen Layout**: Avoid screen layouts that are too creative. Too much information
    on a screen is often an indication of a bad design and will be difficult to support.
    Typical examples are multiple subpages and hiding elements based on business logic
    subpages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Variable Naming**: As discussed in the *Design to maintain* section, good
    naming will make a huge difference when looking at someone else''s design. This
    starts with trying to use Microsoft''s naming conventions for the standard application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**C/AL Placement**: Microsoft Dynamics NAV is very flexible when it comes to
    placing C/AL code in objects. Pages support using C/AL code to the extent that
    it is possible to write an entire posting routine there. C/AL coding should be
    done in tables or codeunits unless this is not possible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Using Functions**: When your C/AL code exceeds the size of your screen, it
    is best practice to create a function. This will make the original code more readable
    for others. Use a name for your function that makes sense so the code will document
    itself. An example for this can be found in the codeunit Register Time Sheet (75000)
    we discussed in [Chapter 8](ch08.html "Chapter 8. Consulting"), *Consulting*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Global versus Local Variables**: Variables can be both global and local in
    C/AL. Microsoft does not have strict guidelines on which to use when. The general
    rule when looking at the standard application is to use global variables unless
    the variable is only used in a function—then it can be local.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The compiler does not give a warning when using a local variable with the same
    name as the global variable. The system will always use the local variable first.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Design to upgrade
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It might not be the first thing to realize when designing your application but
    there will come a time when it needs to be upgraded to a newer version.
  prefs: []
  type: TYPE_NORMAL
- en: When upgrading your application, we can split this task into two parts. Part
    one is the part of the add-on that is written on top of the standard application,
    that is, new tables, pages, and codeunits that are loosely coupled with the standard
    application. This part is often easily upgraded. The other part is the changes
    done in the base application. These changes are often more difficult to move to
    a newer version.
  prefs: []
  type: TYPE_NORMAL
- en: Has Microsoft changed my (referenced) object
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Whether or not Microsoft has changed your referenced objects is the question
    it comes down to when analyzing the upgrade task. If the object you modified has
    not been changed by Microsoft, the upgrade is easy. If Microsoft has changed the
    object slightly, we might need to analyze the changes to see whether we need to
    change something as well.
  prefs: []
  type: TYPE_NORMAL
- en: With each release, Microsoft tends to redesign a part of the application. If
    your solution is integrated with the part Microsoft has redesigned, it will be
    a bigger task to bring the add-on forward.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To see the design changes made by Microsoft in a new release, analyze the upgrade
    toolkit objects to see what it hits.
  prefs: []
  type: TYPE_NORMAL
- en: Here are a few examples of some common redesigns.
  prefs: []
  type: TYPE_NORMAL
- en: CRM (Version 2.0)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In Version 2.0, Navision introduced the current CRM application we discussed
    in [Chapter 4](ch04.html "Chapter 4. Relationship Management"), *Relationship
    Management*. The most important change was to merge company contacts and persons
    into one table while implementing new functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Dimensions (Version 3.x)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In Version 3.0, Navision introduced the dimension solution that we know today.
    Before this, the current Global Dimensions 1 and 2 were called **Department Code**
    and **Project Code**.
  prefs: []
  type: TYPE_NORMAL
- en: Bin code (Version 3.x)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: With the introduction of WMS, the usage of the Bin Code field changed. The Bin
    Code used to be a field in the Item Ledger Entry table (32) and moved to the Warehouse
    Entries.
  prefs: []
  type: TYPE_NORMAL
- en: Inventory valuation (Version 3.x)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: No single piece of code in Microsoft Dynamics NAV has changed as many times
    as the inventory valuation solution. Try to avoid changing this in your add-on
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Item tracking (Version 3.6 and 4.0)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: As with inventory valuation, item tracking has been changed many times. Where
    older versions had Item Tracking Entries and Item Ledger Entries, they are merged
    into one table in newer versions as discussed in [Chapter 6](ch06.html "Chapter 6. Trade"),
    *Trade*.
  prefs: []
  type: TYPE_NORMAL
- en: MenuSuite (Version 4.0)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Although it is not a functional change, the introduction of MenuSuite in Version
    4.0 caused a lot of work to upgrade to.
  prefs: []
  type: TYPE_NORMAL
- en: MenuSuite do not support C/AL code. This means that all Journals need to be
    changed for this version.
  prefs: []
  type: TYPE_NORMAL
- en: Jobs (Version 5.0)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: As discussed in [Chapter 7](ch07.html "Chapter 7. Storage and Logistics"), *Storage
    and Logistics*, the Jobs functionality has been changed in Version 5.0\. The budgeting
    in the previous version was done differently using Budget Entries and Phase, Task,
    and Step tables.
  prefs: []
  type: TYPE_NORMAL
- en: The Job Journal Line and Job Ledger entries have not changed, but the new Job
    Task table has become a mandatory field when posting on a job.
  prefs: []
  type: TYPE_NORMAL
- en: When there is no other way, it is possible to take out the Job Objects and renumber
    them to be customized tables. This allows you to upgrade to a newer version with
    minimum impact. After the upgrade, a new project can be started to move to the
    new Job functionality completely.
  prefs: []
  type: TYPE_NORMAL
- en: Dimensions (Version 2013)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Version 2013 introduced a new design pattern for storing dimensions. Although
    the design is a much better one, it requires a lot of redesign to implement this
    new pattern.
  prefs: []
  type: TYPE_NORMAL
- en: Item costing (almost all versions)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The item costing has been improved in almost every new version of Microsoft
    Dynamics NAV. Changes in item costing is difficult to upgrade to newer versions
    and almost always need to be redesigned.
  prefs: []
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While many parts of the application will have no issue in the upgrade, it is
    useful to have external documentation when there is a need to redesign.
  prefs: []
  type: TYPE_NORMAL
- en: This documentation should contain information about the business reason for
    implementing the feature. With that information, it is possible to do a new fit/gap
    analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: External documentation such as Microsoft Word and Visio files can be linked
    to C/Side objects. This way it is easy to find the documentation when a developer
    needs it.
  prefs: []
  type: TYPE_NORMAL
- en: Split operational and financial information
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the Storage and Logistics application, we chose a data and transaction model
    that can be easily upgraded to a newer version of Microsoft Dynamics NAV.
  prefs: []
  type: TYPE_NORMAL
- en: This is achieved by creating separate modules that move data to each other.
  prefs: []
  type: TYPE_NORMAL
- en: Design to perform
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All good applications are useless if the performance is not adequate. Performance
    is very important to keep in mind when designing your application.
  prefs: []
  type: TYPE_NORMAL
- en: When talking about performance, there are two typical issues. The first issue
    is an application with an overall slow performance, and the latter is an application
    with good performance but where users block each other or create deadlocks.
  prefs: []
  type: TYPE_NORMAL
- en: Both issues have their own approach to be analyzed and solved. We will not talk
    in detail about this process but rather explain how to avoid these situations
    in general.
  prefs: []
  type: TYPE_NORMAL
- en: OLTP versus OLAP
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In any ERP system, it is important to balance **Online Transaction Processing**
    (**OLTP**) with **Online Analytical Processing** (**OLAP**). This is especially
    important when working with Microsoft Dynamics NAV. The reason for this is its
    unique data and posting model, which creates the analytical data while processing
    the transaction.
  prefs: []
  type: TYPE_NORMAL
- en: Creating this analytical information in real time can have advantages, but when
    posting the transactions take too much time, it might not be worth it.
  prefs: []
  type: TYPE_NORMAL
- en: Examples of analytical information are dimension information and analysis view
    entries, but also VAT Entries and Value Entries. Although they give us important
    information about the business, we do not always need them instantly when processing
    the transaction.
  prefs: []
  type: TYPE_NORMAL
- en: Other examples of analytical information are secondary keys and `SumIndexFields`.
    All this information will be created when creating the master record. If a Ledger
    Entry table has 32 secondary keys and 15 `SumIndexFields`, it will take a considerable
    amount of time to write this information to the database.
  prefs: []
  type: TYPE_NORMAL
- en: Fast transaction posting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Good performance starts with fast transactions. There are several ways to achieve
    this. The major ones being: cleanup unused indexes and application setup.'
  prefs: []
  type: TYPE_NORMAL
- en: Cleanup unused indexes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Each secondary `SumIndexFields` field in the database needs to be maintained
    whether it is used or not. Microsoft Dynamics NAV allows end users to create their
    own schedule to maintain this.
  prefs: []
  type: TYPE_NORMAL
- en: Creating such an index schedule is quite a complex task and so should be done
    by experienced functional developers.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In versions prior to Microsoft Dynamics 5 SP 1, the overhead of unused `SumIndexFields`
    was substantially higher compared to newer versions.
  prefs: []
  type: TYPE_NORMAL
- en: Application setup
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: It all starts with a solid application setup. Some setup features in Microsoft
    Dynamics NAV will cause the system to create more analytical information when
    posting transactions.
  prefs: []
  type: TYPE_NORMAL
- en: An example is **Update On Posting** for **Analysis** Views. This feature will
    update the Analysis View Entries at the same time as the General Ledger Entries
    are created.
  prefs: []
  type: TYPE_NORMAL
- en: '![Application setup](img/0365EN_10_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Other examples are the **Automatic Cost** options in the inventory setup. When
    they are activated, the cost is adjusted each time an Item Ledger Entry is created.
  prefs: []
  type: TYPE_NORMAL
- en: '![Application setup](img/0365EN_10_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Job Queue
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Microsoft Dynamics NAV is shipped with an excellent multithreaded Job Queue
    system. This process is called an Application Server and can execute C/AL code
    in report and codeunit objects.
  prefs: []
  type: TYPE_NORMAL
- en: Examples of Job Queue tasks are creating the Analysis View Entries, Posting
    the Adjust Cost for Inventory Valuation or even Posting Sales, and Purchase documents.
  prefs: []
  type: TYPE_NORMAL
- en: Background posting
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Background posting was introduced in Microsoft Dynamics NAV 2013 and allows
    you to post documents using a Job Queue. This means that the user who starts the
    posting routine does not need to wait until this process has been completed before
    starting a new task.
  prefs: []
  type: TYPE_NORMAL
- en: Date compressing and cleanup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When the number of records in a table exceeds normal proportions, it might be
    useful to start thinking about doing data maintenance. This is a normal procedure
    in all ERP systems, and Microsoft Dynamics NAV has the capability to do that.
  prefs: []
  type: TYPE_NORMAL
- en: Date compression
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Most Entry tables in Microsoft Dynamics NAV can be compressed by date. This
    means that all entries with the same values will be replaced by one new entry.
    The detailed information is lost afterwards.
  prefs: []
  type: TYPE_NORMAL
- en: '![Date compression](img/0365EN_10_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Data compression
  prefs: []
  type: TYPE_NORMAL
- en: Saving the detailed information can be easily implemented by changing the compression
    report. The detailed information can be saved in a copy of the original table.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The total size of the database has minimal impact on the performance. More important
    is the size of the tables we are writing to during a transaction.
  prefs: []
  type: TYPE_NORMAL
- en: Data cleanup
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Microsoft Dynamics NAV allows most data to be deleted when the fiscal year it
    was created is closed.
  prefs: []
  type: TYPE_NORMAL
- en: Examples of data that can be deleted are Sales Shipments and Purchase Receipts.
    They can be either deleted or moved to copy tables.
  prefs: []
  type: TYPE_NORMAL
- en: Cleaning up data will prevent the transactions to be slower when your company
    uses Microsoft Dynamics NAV for a longer time. Data cleanup generally starts after
    using the product for 5 years and when the database exceeds 100 gigabytes in size.
  prefs: []
  type: TYPE_NORMAL
- en: Locks, blocks, and deadlocks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Microsoft Dynamics NAV product is very sensitive for blocking and deadlocks.
    This has everything to do with the posting model, the inheritance of the Native
    database, and the numbering used in entry tables.
  prefs: []
  type: TYPE_NORMAL
- en: Blocks and Deadlocks are caused primarily by Locks in the database. Locking
    is a mechanism databases use to ensure consistency of the data.
  prefs: []
  type: TYPE_NORMAL
- en: Native server versus SQL Server
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Originally, Microsoft Dynamics NAV had a proprietary (Native) database. This
    database did not support row-level locking, only table locking.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Dynamics NAV 2013 no longer supports this database and only runs on
    SQL Server, which does support row-level locks. However, the current data and
    transaction model is designed for table locking.
  prefs: []
  type: TYPE_NORMAL
- en: The benefit of row-level locking on SQL Server is best experienced in systems
    with many users creating documents in the same database. Most posting transactions
    in the database are isolated, meaning only one user at a time can post a document
    from anywhere in the application.
  prefs: []
  type: TYPE_NORMAL
- en: Locking is always done for a single company; unless tables are shared as explained
    in [Chapter 4](ch04.html "Chapter 4. Relationship Management"), *Relationship
    Management*, a user from company A cannot lock a user in company B.
  prefs: []
  type: TYPE_NORMAL
- en: Locking principles
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In Microsoft Dynamics NAV, locking starts with the `LOCKTABLE` command. Using
    this command will generate the T-SQL statements that are generated by the application
    to issue a `UPDLOCK` hint where without the statement, `READUNCOMMITED` is issued.
  prefs: []
  type: TYPE_NORMAL
- en: Let's create an example that shows how locking is done.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this example, we create a new codeunit Locking A (60000). The codeunit
    has a global variable Cust of type Record 18:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We start this codeunit and leave the confirmation window open.![Locking principles](img/0365EN_10_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we go to the Windows client, open the **Customer Card** for customer **10000**
    and try to change the name. After 10 seconds, we will get the following message:![Locking
    principles](img/0365EN_10_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The reason for this error message to pop up is that the other user issued an
    exclusive lock on the record. If we move to customer **20000**, which is the next
    record in the database, we can safely change the name. This record is not locked.
  prefs: []
  type: TYPE_NORMAL
- en: Deadlocks
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let's take this example one step further and simulate a deadlock. Deadlocks
    happen if users try to lock each other's record in a different order.
  prefs: []
  type: TYPE_NORMAL
- en: '![Deadlocks](img/0365EN_10_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s see this in more detail:'
  prefs: []
  type: TYPE_NORMAL
- en: User A reads and locks Customer 10000
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User B reads and locks Customer 20000
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User A tries to read and lock Customer 20000, a blocking event starts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When user B now tries to lock Customer 10000, a deadlock occurs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To demonstrate a deadlock, we have created two Codeunits Deadlock A (60001)
    and Deadlock B (60002). We need two sessions on the same SQL Server database to
    do this. Start Deadlock A on one client:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Start Deadlock B on the other:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Then, select **Yes** on both the confirmation boxes. One of the clients should
    now deadlock.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SQL Server checks for deadlocks every 5 seconds and kills the transaction that
    has the lowest roll back impact on the database. This is why users will experience
    deadlocks as slow sometimes and fast other times.
  prefs: []
  type: TYPE_NORMAL
- en: '![Deadlocks](img/0365EN_10_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The error message is confusing since it lets us to believe we have locked the
    entire table, which is not true.
  prefs: []
  type: TYPE_NORMAL
- en: The `LockOtherCust` function reads a record from the customer table with another
    variable. This new variable `Cust2` does not explicitly issues a `LOCKTABLE` command.
    This proves that `LOCKTABLE` is a transaction command that is valid for all variables
    of this type.
  prefs: []
  type: TYPE_NORMAL
- en: Blocking and deadlocks in Microsoft Dynamics NAV
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The standard application has several built-in blocking events by design. This
    is to ensure the database integrity and to avoid deadlocks.
  prefs: []
  type: TYPE_NORMAL
- en: The two main isolating tables in Microsoft Dynamics NAV are the G/L Entry table
    (17) and the Item Ledger Entry table (32).
  prefs: []
  type: TYPE_NORMAL
- en: 'Codeunit 12 shows these lines of code before creating G/L Entries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Both Codeunit Sales-Post 80 and Purch.-Post 90 that we discussed earlier have
    optional isolation on the G/L Entry table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In real life, this means that no one in a company can post to the general ledger
    at the same time. The same applies to the item ledger.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This blog entry at [https://blogs.msdn.com/b/nav/archive/2012/10/17/g-l-entry-table-locking-redesign-in-microsoft-dynamics-nav-2013.aspx](https://blogs.msdn.com/b/nav/archive/2012/10/17/g-l-entry-table-locking-redesign-in-microsoft-dynamics-nav-2013.aspx)
    explains the usage of the optional G/L locking while posting documents.
  prefs: []
  type: TYPE_NORMAL
- en: This emphasizes the importance of fast transactions and generating analysis
    data in separate batches.
  prefs: []
  type: TYPE_NORMAL
- en: Impact on development
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we summarize the impact of all this knowledge on your development, it emphasizes
    the importance of designing your own application structures that interface with
    the standard application.
  prefs: []
  type: TYPE_NORMAL
- en: When changing and implementing the standard application, try to reduce the overhead
    during posting as much as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Create compression routines and allow end users to periodically clean up records.
    In the next section, we will talk about how to design to analyze and allow end
    users to generate analysis data in batches separate from the posting transactions.
  prefs: []
  type: TYPE_NORMAL
- en: Design to analyze
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Analysis in Microsoft Dynamics NAV should always be done on (ledger) entry records.
    There are many types of entry records that are either created during a transaction
    or in batches.
  prefs: []
  type: TYPE_NORMAL
- en: Avoid building analysis on document tables. It should always be possible to
    delete old data in the database without losing the essential information for data
    analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Report design
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Designing a report in Microsoft Dynamics NAV starts with generating a Data Set.
    This is built using table relations and can get quite complex.
  prefs: []
  type: TYPE_NORMAL
- en: '![Report design](img/0365EN_10_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When the Data Set is defined, the second step is to define the layout. Creating
    report layouts is beyond the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Reports with a large Data Set are complex to maintain and have a risk of being
    slow in performance since the database engine needs to read all the information
    before combining the information into a view.
  prefs: []
  type: TYPE_NORMAL
- en: This can be solved by preparing the data first and running the report afterwards.
    This approach is quite common in data warehousing. The preparation of the data
    can be done in scheduled batches running in the Job Queue.
  prefs: []
  type: TYPE_NORMAL
- en: Version and object management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When doing software development, discussing version management is unavoidable.
    Microsoft Dynamics NAV is flexible in this and allows developers to make their
    own decisions on this subject rather than forcing them to one way of versioning.
  prefs: []
  type: TYPE_NORMAL
- en: What is a version
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Microsoft Dynamics NAV, there are two ways of determining what a version
    is. The first and easiest approach is to change the version of an object each
    time it changes. The initial released Version is 1.00 and each change increments
    to 1.01, 1.02, and so on. A big change will lead to Version 2.00.
  prefs: []
  type: TYPE_NORMAL
- en: Another more common approach in Microsoft Dynamics NAV is to group version numbers
    in releases of a group of objects together. When this is applied, the application
    gets a version number that is incremented each time we release. This means that
    an object with version number 1.01 can jump to 1.04 if it was not changed in releases
    1.02 and 1.03.
  prefs: []
  type: TYPE_NORMAL
- en: Version numbering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are rules in Microsoft Dynamics NAV for version numbering, although the
    rules have changed over the years.
  prefs: []
  type: TYPE_NORMAL
- en: The current version principle allows us to use letters and digits. The letters
    indicate the product and country code, the digits the version, subversion, and
    service pack number.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at an example object to clarify this. Codeunit Whse.-Printed (5779):'
  prefs: []
  type: TYPE_NORMAL
- en: '| NAV | W1 | 3. | 70. | 01 |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '|   |   |   |   | The last service pack this object was changed |'
  prefs: []
  type: TYPE_TB
- en: '|   |   |   | The last subversion this object was changed |'
  prefs: []
  type: TYPE_TB
- en: '|   |   | The last version this object was changed |'
  prefs: []
  type: TYPE_TB
- en: '|   | The Localization Version |'
  prefs: []
  type: TYPE_TB
- en: '| The Product Name |'
  prefs: []
  type: TYPE_TB
- en: If Microsoft change this object in Service pack 1 for 2013, the new version
    number would be NAVW17.00.01.
  prefs: []
  type: TYPE_NORMAL
- en: Combining versions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An object can have multiple versions, but only one version for each product
    or country. A localized object gets version NAVW13.70.01, NAVNL6.00.01\. This
    means that although the global product team has not changed the object, it has
    been changed by the Dutch localization team.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a version
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Versioning in Microsoft Dynamics NAV is done manually. The version number is
    an editable field in the Object table (2000000001) that can be freely changed.
    Developing a tool to do this is easy and has been done by many partners in the
    channel.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Data and Transaction model of such a solution should look something like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a version](img/0365EN_10_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The process starts with a change request. This can be fixing a small bug or
    creating a new functionality. For this change request, objects need to be modified.
  prefs: []
  type: TYPE_NORMAL
- en: Each modified object is attached to the change request. We can release several
    change requests at the same time. All objects in the release will get the version
    number from the release, which can be automatically updated in the object table.
  prefs: []
  type: TYPE_NORMAL
- en: By saving the change request and release information in the database, we will
    also generate documentation that will help future developers to find information
    on why objects were changed.
  prefs: []
  type: TYPE_NORMAL
- en: Tracking object changes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Object changes can be tracked using triggers in SQL Server. All the C/Side objects
    are stored in the Object table (2000000001).
  prefs: []
  type: TYPE_NORMAL
- en: To connect an object change to a change request, the developer should tell the
    system the request they are currently working on. This will enable us to have
    a failsafe tracking mechanism to perform version management.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To view the complete solution for tracking object changes visit [http://dynamicsuser.net/blogs/stryk/archive/2009/05/18/object-auditing.aspx](http://dynamicsuser.net/blogs/stryk/archive/2009/05/18/object-auditing.aspx).
  prefs: []
  type: TYPE_NORMAL
- en: Saving older versions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to look at the changes, saving a copy of a version can be very useful.
    Besides the obvious possibility of saving the files on a disk, we can also use
    an external tool. One of these tools is Microsoft Team Foundation Server. This
    is a part of the Visual Studio family and from Version 2013, it is available in
    the cloud, making it very easy to set up and use in combination with Microsoft
    Dynamics NAV.
  prefs: []
  type: TYPE_NORMAL
- en: '![Saving older versions](img/0365EN_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The video blog at [https://www.youtube.com/user/SorenKlemmensen/video](https://www.youtube.com/user/SorenKlemmensen/video)
    demonstrates how to start using Visual Studio online combined with Microsoft Dynamics
    NAV.
  prefs: []
  type: TYPE_NORMAL
- en: Development methodology
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To develop software, there are many methodologies such as Prince2, Extreme Programming,
    or the Microsoft Solutions Framework.
  prefs: []
  type: TYPE_NORMAL
- en: Most of these methodologies are suitable to be applied to Microsoft Dynamics
    NAV but they should be used properly. Because of the flexibility of the product,
    it is easy to leave out steps in the process that should be there.
  prefs: []
  type: TYPE_NORMAL
- en: In Microsoft Dynamics NAV, it is easy to quickly create and modify business
    software. This is by far the strongest selling point for the solution, but also
    the biggest pitfall.
  prefs: []
  type: TYPE_NORMAL
- en: A sample approach
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When an end user requests a change to the application, it is tempting for most
    experienced developers to go into the application and create it, preferably in
    the production database without documentation. This is not the desired way of
    doing software development.
  prefs: []
  type: TYPE_NORMAL
- en: However, Microsoft Dynamics NAV is a very suitable design environment for prototyping
    and Rapid Application Design. All the example applications in this book are first
    built with prototyping and later finalized using testing.
  prefs: []
  type: TYPE_NORMAL
- en: If we design a suitable development methodology for Microsoft Dynamics NAV,
    we can see that the application life cycle perfectly fits our methodology.
  prefs: []
  type: TYPE_NORMAL
- en: When implementing Microsoft Dynamics NAV, it is very important to involve the
    end users in each step of the development process.
  prefs: []
  type: TYPE_NORMAL
- en: '![A sample approach](img/0365EN_10_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Fit/gap analysis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At the fit/gap phase, usually a quick specification is enough to describe what
    the user would like the system to do and a possible solution is generated in the
    application. This document should not count more than two or three pages. During
    the prototyping phase, it is very normal to come across advanced understanding.
    It would be a waste of valuable time to find this during the initial analysis
    with the risk of not finding them anyway.
  prefs: []
  type: TYPE_NORMAL
- en: Prototyping
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With the **Quick Spec**, a developer creates the solution as a draft without
    going into too much detail. This should be enough to show the end user what the
    solution will look like when it is finished. Very often, this will lead to new
    questions and ideas that should be carefully considered and put into the full
    specification, or a new prototype should be built first.
  prefs: []
  type: TYPE_NORMAL
- en: Development
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Depending on the amount of changes after the prototype, development can often
    start with the work done already. At this stage, all the details should be worked
    out and tested.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is no complete checklist for developers to use when developing in Microsoft
    Dynamics NAV, but let''s try to create one with the following fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Captions/Translations**: Make sure all objects have the required captions
    and translations populated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Table Relations**: Make sure all Table Relations are in place, and check
    the Ledger Entry and Line tables as well since they are frequently forgotten.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Modify And Delete Triggers**: What happens if a user modifies or deletes
    the record. Make sure that everything is nicely handled in the `OnModify` and
    On Delete C/AL triggers. `OnRename` should be automatically handled by C/Side.
    Renaming a table with many table relations may cause severe locking in the database.
    If users should not rename a record, this can be blocked by placing an `ERROR`
    command in the `OnRename` trigger.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**LookupPageID** and **DrillDownPageID**: Even when running the Windows client,
    it is important to assign a Lookup and Drilldown page ID. Lookup pages are used
    for table relations and Drilldown pages are used when drilling down from a SUM
    flow field.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CardPageID**: The Windows client always starts a list page when a user selects
    a menu item or a cue. Double-clicking a row will open the associated card page.
    This is controlled by the **CardPageID** property on a list page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Field Groups**: To show records from a table relation when entering values,
    the Windows client does not directly use **LookupPageID** but first shows a **DropDown**
    list. The fields in this list are defined in the associated tables **Field Groups**.
    Each table can only have one **Field Group** called **DropDown**, as shown in
    the following screenshot:![Development](img/0365EN_10_19.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Actions**: Actions should make sense to end users. Make sure you use logical
    names and avoid creating menu buttons and actions that are solely for super users
    and just confuse end users. Actions should be placed in the correct container.
    Only promote actions that will be frequently used by all end users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Shortcuts**: Always assign ampersand (&) shortcuts and avoid double shortcuts.
    When using function keys such as *F3* and *F9*, follow the Microsoft standard
    conventions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Compression** and **Posting**: If your solution will generate a potentially
    large amount of data, be sure to provide compression, posting, or cleaning up
    routines so end users can periodically maintain the data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Permissions**: Does your solution require additional permissions to be set
    up in the system? Make sure to document this when delivering the solution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unused Variables**: Make sure you don''t leave unused variables in the C/AL
    objects. Although they won''t break the functionality, it will make future maintenance
    of the software more complex.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**FIND Commands** and **Locking**: Double check the usage of the correct find
    commands before you ship the software. Using the wrong commands and leaving locking
    to the database engine may cause extra performance overhead.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More detailed information about these features is explained in the book *Programming
    Microsoft Dynamics NAV 2013*, *David A. Studebaker*, *Christopher D. Studebaker*,
    *Packt Publishing*.
  prefs: []
  type: TYPE_NORMAL
- en: Testing
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Testing is probably one of the most important but undervalued tasks of application
    design.
  prefs: []
  type: TYPE_NORMAL
- en: 'Testing involves the following three conditions:'
  prefs: []
  type: TYPE_NORMAL
- en: Does the software meet the original requirements? If this is not the case, it
    does not make sense to continue testing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does it work as expected? This includes trying to deliberately break the solution.
    If the software is not monkey proof, things will certainly go wrong when using
    it. Here Murphy's Law is applicable, "What can go wrong, will go wrong."
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does it fit the rest of the application? Is the software usable and intuitive?
    A solution that is bug free but difficult to use will be expensive to maintain.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing should be automated using the Testability Framework. This allows developers
    to rerun complete application tests each time they make a change.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The blog at [http://blogs.msdn.com/b/nav/archive/2012/11/07/application-test-toolset-for-microsoft-dynamics-nav-2013.aspx](http://blogs.msdn.com/b/nav/archive/2012/11/07/application-test-toolset-for-microsoft-dynamics-nav-2013.aspx)
    explains how to install and use the Testability Framework for Microsoft Dynamics
    NAV 2013.
  prefs: []
  type: TYPE_NORMAL
- en: The testing should be also done manually, performed by someone who likes doing
    it and has the available time. If someone is asked to test the software who is
    buried in normal work, the chance of bugs slipping in is quite high.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Testing using the Testability Framework is a mandatory part of the Certified
    for Microsoft Dynamics process.
  prefs: []
  type: TYPE_NORMAL
- en: The cost of fixing a bug increases as the software evolves. The sooner a bug
    is fixed, the better.
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing](img/0365EN_10_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Implementation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When the changes are developed and tested, the documentation should be finalized.
    This can be either a manual for end users or a technical reference for future
    developers and support engineers.
  prefs: []
  type: TYPE_NORMAL
- en: The end users should be trained to use the software.
  prefs: []
  type: TYPE_NORMAL
- en: Maintenance and support
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After the software is implemented and users are trained, the solution goes into
    the maintenance and support stage. During this stage, the application manager
    needs to take care of the data generated by the solution, analyze it, and clean
    up the data periodically.
  prefs: []
  type: TYPE_NORMAL
- en: If the end users request a change on the solution, the cycle starts again.
  prefs: []
  type: TYPE_NORMAL
- en: The project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Implementing an ERP product like Microsoft Dynamics NAV is not just installing
    a software package and starting to use it. Each part of your company will have
    to make decisions how to integrate their work with the software. This very often
    leads to an interesting new look with respect to your company's way of work.
  prefs: []
  type: TYPE_NORMAL
- en: Standard, customized, or both
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are several ways of implementing Dynamics NAV. It is highly important
    to make a decision what kind of implementation you want and adjust the implementation
    accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: '![Standard, customized, or both](img/0365EN_10_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Compared to when it was introduced in 1995, Microsoft Dynamics NAV 2013 is a
    mature ERP package with all the built-in functionalities we discussed in this
    book. On top of this standard product, resellers have built horizontal and vertical
    solutions called add-on products. These two combined offer powerful solutions
    for companies that cannot work with the standard product but are flexible enough
    to use a vertical solution.
  prefs: []
  type: TYPE_NORMAL
- en: Add-on products
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Vertical solutions have started years ago as a customized solution for a company
    who decided to implement Microsoft Dynamics NAV. Together with the implementation
    partner, these companies have customized the product to meet their requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Many of these add-on products are now grown up software solutions that fit a
    vertical industry.
  prefs: []
  type: TYPE_NORMAL
- en: 'When buying an add-on solution, it is good to ask the reseller some questions:'
  prefs: []
  type: TYPE_NORMAL
- en: What is the release procedure? A solid add-on solution has a release procedure.
    Most resellers have periodical release every half year or maybe sooner. If a bug
    is found in the software, there should be a hot fix. Most resellers have releases
    they support. Make sure to know what versions are still supported.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do I upgrade to a new version of the vertical solution? If a new version
    of the vertical solutions is released, there should be an upgrade procedure. This
    should be clearly documented and tested by the reseller.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Am I allowed to make changes to the software? Most add-on resellers do not recommend
    their customers to change the software. The reason for this is the increased complexity
    of bug fixing and upgrading.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What if I do change the software? If an add-on solution is customized anyway,
    it is basically downgraded from being a supported add-on solution to a customized
    database. For most resellers, it is difficult to support these customized solutions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although customizing an add-on solution is not always recommended, customizing
    Microsoft Dynamics NAV should not be considered a bad practice.
  prefs: []
  type: TYPE_NORMAL
- en: The impact of customization in Microsoft Dynamics NAV can make a difference
    that can be compared to a suit that is confection or tailored to fit. The benefits
    of having an ERP package that exactly fits the organization can be more important
    than the increased cost of ownership of the solution.
  prefs: []
  type: TYPE_NORMAL
- en: Total cost of ownership
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The total cost of ownership of Microsoft Dynamics NAV depends highly on the
    level of customizations. A non-customized implementation with one or two good
    add-on products done by experienced consultants will have a low impact on your
    company and will be easy to maintain and support.
  prefs: []
  type: TYPE_NORMAL
- en: The higher the level of customizations, the more it will cost to keep the application
    running. This is not a bad thing per se. If your company has a unique way of doing
    business, it might need an ERP package that supports this uniqueness.
  prefs: []
  type: TYPE_NORMAL
- en: The Road to Repeatability program
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Road to Repeatability** (**R2R**) was introduced by Microsoft to help
    partners to be more repeatable. Although the program is primarily marketing-focused,
    it illustrates the trend of reselling the same Microsoft Dynamics NAV package
    to multiple customers.
  prefs: []
  type: TYPE_NORMAL
- en: Roadmap to success
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Designing a solid application in Microsoft Dynamics NAV starts with a thorough
    knowledge of the standard application functionality and its design philosophy.
  prefs: []
  type: TYPE_NORMAL
- en: Secondly, we need to carefully analyze the business process we want to support
    and implement new functionality step by step to ensure good quality, as the solution
    grows bigger and mature.
  prefs: []
  type: TYPE_NORMAL
- en: Use data and posting models that are similar to Microsoft Dynamics NAV and try
    to maintain a similar user interface. This will make it easier for end users to
    adopt your solution and more likely for the software to be easy to maintain and
    support.
  prefs: []
  type: TYPE_NORMAL
- en: Last but not least, carry out good housekeeping in your database. Compress and
    clean up data periodically to guarantee a stable performance of the system now
    and in the future.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, we have covered functional and technical design of both standard
    Microsoft Dynamics and how to extend the application to succeed.
  prefs: []
  type: TYPE_NORMAL
- en: This book is not finished. After the publication, we will periodically write
    articles, tips, and tricks based on the information in this book on [http://www.brummelds.com](http://www.brummelds.com).
  prefs: []
  type: TYPE_NORMAL
- en: Any questions or comments regarding the information published in this book can
    be posted and discussed there as well.
  prefs: []
  type: TYPE_NORMAL
