- en: Chapter 6. XamChat for Android
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will begin developing the Android UI for our XamChat sample
    application. We will use the native Android APIs directly to create our application
    and call into our shared portable class library similar to what we did on iOS.
    Similarly, our Xamarin.Android application will be indistinguishable from an Android
    application written in Java.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: To begin writing the Android version of XamChat, open the solution provided
    in the previous chapters, and create a new **Android Application** project. Name
    the project `XamChat.Droid` or some other appropriate name of your choice.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: The Android Manifest
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing a login screen for XamChat
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android's ListView and BaseAdapter
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a friends list
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a list of messages
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing Android Manifest
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All Android applications have an XML file called the Android Manifest, which
    declares the basic information about the app such as the application version and
    name, and is named `AndroidManifest.xml`. This is very similar to the `Info.plist`
    file on iOS, but Android puts much more emphasis on its importance. A default
    project doesn't have a manifest, so let's begin by creating one by navigating
    to **Project Options** | **Android Application** and clicking on **Add Android
    Manifest**. Several new settings for your application will appear.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Manifest
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The most important settings, shown in the following screenshot, are as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '**Application name**: This is the title of your application, which is displayed
    below the icon. It is not the same as the name selected on Google Play.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Package name**: This is similar to that on iOS; it''s your app''s bundle
    identifier or bundle ID. It is a unique name used to identify your application.
    The convention is to use the reverse domain style with your company name at the
    beginning; for example, `com.packt.xamchat`. It must begin with a lower case letter
    and contain at least one "." character within.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Application icon**: This is the icon displayed for your app on Android''s
    home screen.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Version number**: This is a one-digit number that represents the version
    of your application. Raising this number indicates a newer version on Google Play.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Version name**: This is a user-friendly version string for your app that
    users will see in settings and on Google Play; for example, **1.0.0**.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Minimum Android version**: This is the minimum version of Android that your
    application supports. In modern Android apps, you can generally target Android
    4.0, but this is a decision based on your application''s core audience.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Target Android version**: This is the version of the Android SDK your application
    is compiled against. Using higher numbers gives you access to new APIs, however,
    you might need to do some checks to call these APIs on newer devices.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Install Location**: This defines the different locations your Android application
    can be installed to: auto (user settings), external (SD card), or internal (device
    internal memory).'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Setting up the Manifest](img/00046.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
- en: Common manifest permissions
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In addition to these settings, there is a set of checkboxes labeled **Required
    permissions**. These are displayed to users on Google Play prior to the application
    being installed. This is Android's way of enforcing a level of security, giving
    users a way to see what kinds of access an app will have to make changes to their
    device.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are some commonly used manifest permissions:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '**Camera**: This provides access to the device camera'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Internet**: This provides access to make web requests over the Internet'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ReadContacts**: This provides access to read the device''s contacts library'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ReadExternalStorage**: This provides access to read the SD card'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**WriteContacts**: This provides access to modify the device''s contacts library'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**WriteExternalStorage**: This provides access to write to the SD card'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition to these settings, a manual change to Android Manifest will be required
    many times. In this case, you can edit the manifest file as you would edit a standard
    XML file in Xamarin Studio. For a complete list of valid XML elements and attributes,
    visit [http://developer.android.com/guide/topics/manifest/manifest-intro.html](http://developer.android.com/guide/topics/manifest/manifest-intro.html).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s fill out the following settings for our application:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '**Application name**: `XamChat`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Package name**: `com.yourcompanyname.xamchat`; make sure to name future apps
    beginning with `com.yourcompanyname`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Version number**: Just start with the number `1`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Version**: This can be any string, but it is recommended to use something
    that resembles a version number'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Minimum Android version**: Select **Android 4.0.3 (API Level 15)**'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Required permissions**: Select **Internet**; we will be using it later'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At this point, we need to reference our shared code from our portable class
    library we created in [Chapter 4](part0036_split_000.html#page "Chapter 4. XamChat
    – a Cross-platform App"), *XamChat – a Cross-platform App*. Right-click on the
    **References** folder for the project, then click on **Edit References...**, and
    add a reference to the `XamChat.Core` project. You will now be able to access
    all the shared code that was written in [Chapter 4](part0036_split_000.html#page
    "Chapter 4. XamChat – a Cross-platform App"), *XamChat – a Cross-platform App*.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the `Resources` directory, and in the `values` folder, open `Strings.xml`;
    this is where all the text throughout your Android app should be stored. This
    is an Android convention that will make it very easy to add multiple languages
    to your application. Let''s change our strings to the following:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We'll use these values later in the chapter. Feel free to add new ones in cases
    where you display the text to the user. If you need to add more languages, it
    is very straightforward; you can see the Android documentation on this subject
    at [http://developer.android.com/guide/topics/resources/localization.html](http://developer.android.com/guide/topics/resources/localization.html).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Creating and implementing the application class
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now let''s implement our main application class; add a new **Activity** from
    the **New File** dialog. We won''t be subclassing `Activity` in this file, but
    this template adds several Android `using` statements to the top of the file that
    imports the Android APIs to be used within your code. Create a new `Application`
    class where we can register everything in our `ServiceContainer` as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We used the built-in Android theme, `Theme.Holo.Light`, just because it is a
    neat theme that matches the default style we used on iOS. Note the strange, empty
    constructor we have to create for this class to function. This is a current requirement
    of a custom `Application` class in Xamarin. You can just recognize this as boilerplate
    code, and you will need to add this in this case.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s implement a simple base class for all the activities throughout
    our app. Create an `Activities` folder in the `XamChat.Droid` project and a new
    file named `BaseActivity.cs` with the following content:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We did several things here to simplify the development of our other activities.
    First, we made this class generic, and made a protected variable named `viewModel`
    to store a ViewModel of a specific type. Note that we did not use generics on
    controllers in iOS due to platform limitations (see more on Xamarin's documentation
    website at [http://docs.xamarin.com/guides/ios/advanced_topics/limitations/](http://docs.xamarin.com/guides/ios/advanced_topics/limitations/)).
    We also implemented `IsBusyChanged`, and displayed a simple `ProgressDialog` function
    with the `Loading` string from the `Strings.xml` file to indicate the network
    activity.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add one more method to display errors to the user, as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This method will display a pop-up dialog indicating that something went wrong.
    Notice that we also used `ErrorTitle` and the built-in Android resource for an
    `Ok` string.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: This will complete the core setup for our Android application. From here, we
    can move on to implement the UI for the screens throughout our app.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Adding a login screen
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before creating Android views, it is important to know the different layouts
    or view group types available in Android. iOS does not have an equivalent for
    some of these because iOS has a very small variation of screen sizes on its devices.
    Since Android has virtually infinite screen sizes and densities, the Android SDK
    has a lot of built-in support for auto-sizing and layout for views.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: Layouts and ViewGroups in Andorid
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the common types of layouts:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '`ViewGroup`: This is the base class for a view that contains a collection of
    child views. You normally won''t use this class directly.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LinearLayout`: This is a layout that positions its child views in rows or
    columns (but not both). You can also set weights on each child to have them span
    different percentages of the available space.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RelativeLayout`: This is a layout that gives much more flexibility on the
    position of its children. You can position child views relative to each other
    so that they are above, below, to the left, or to the right of one another.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FrameLayout`: This layout positions its child views directly on top of one
    another in the **z order** on the screen. This layout is best used for cases where
    you have a large child view that needs other views on top of it and perhaps docked
    to one side.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ListView`: This displays views vertically in a list with the help of an adapter
    class that determines the number of child views. It also has support for its children
    to be selected.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GridView`: This displays views in rows and columns within a grid. It also
    requires the use of an adapter class to supply the number of children.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before we begin writing the login screen, delete the `Main.axml` and `MainActivity.cs`
    files that were created from the Android project template, as they are not useful
    for this application. Next, create an Android layout file named `Login.axml` in
    the `layout` folder of the `Resources` directory in your project.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can start adding functionalities to our Android layout as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Double-click on the `Login.axml` file to open the Android designer.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag two **Plain Text** views onto the layout found in the **Text Fields** section.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Id** field, enter `@+id/username` and `@+id/password` respectively.
    This is a step that you will take for any control you want to work with from C#
    code.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the password field, set its **Input Type** property to `textPassword`.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag a **Button** onto the layout and set its **Text** property to `Login`.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the button's **Id** property to `@+id/login`. We will be using this control
    from code.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your layout will look something like what is shown in the following screenshot
    when complete:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '![Layouts and ViewGroups in Andorid](img/00047.jpeg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
- en: Implementing the login functionality
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now create a new Android Activity file named `LoginActivity.cs` in the `Activites`
    folder we created earlier. We will use this as the main activity that starts when
    the application runs. Let''s implement the login functionality as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Notice that we set `MainLauncher` to `true` to make this activity the first
    activity for the application. In some apps, a splash screen is used as the first
    activity, so keep this in mind if you need to add a splash screen. We also took
    advantage of the `ApplicationName` value and the `BaseActivity` class we set up
    earlier in the chapter. We also overrode `OnResume` to clear out the two `EditText`
    controls so that the values are cleared out if you return to the screen.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: 'Now if you launch the application, you will be greeted by the login screen
    we just implemented, as shown in the following screenshot:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing the login functionality](img/00048.jpeg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
- en: Using ListView and BaseAdapter
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now let's implement a conversations list on Android. The Android equivalent
    of the `UITableView` and `UITableViewSource` iOS classes are `ListView` and `BaseAdapter`.
    There are parallel concepts for these Android classes, such as implementing abstract
    methods and recycling cells during scrolling. There are a few different types
    of adapters used in Android such as `ArrayAdapter` or `CursorAdaptor`, although
    `BaseAdapter` is generally best suited for simple lists.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the conversations screen
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s implement our conversations screen. Let''s begin by making a new Android
    Activity in your `Activities` folder named `ConversationsActivity.cs`. Let''s
    start with only a couple of changes to the class definition as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Perform the following steps to implement a couple of Android layouts:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Android layout in the `layout` folder of the `Resources` directory
    named `Conversations.axml`.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag a **ListView** control from **Toolbox** onto the layout, and set its **Id**
    to `@+id/conversationsList`.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a second Android layout in the `layout` folder in the `Resources` directory
    named `ConversationListItem.axml`.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag a **Text (Medium)** and a **Text (Small)** control onto the layout from
    the **Toolbox** pane.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set their IDs to `@+id/conversationUsername` and `@+id/conversationLastMessage`.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, let's set each of their **Margins** to `3dp` in the **Layout** tab
    of the **Properties** box.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This will set up all the layout files we''ll need to use throughout the conversations
    screen. Your `ConversationListItem.axml` layout will look something like what''s
    shown in the following screenshot:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing the conversations screen](img/00049.jpeg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
- en: 'Now we can implement `BaseAdapter` as a nested class inside `ConversationsActivity`
    as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The following is a review of what is going on inside the adapter:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: We subclassed `BaseAdapter<Conversation>`.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We passed in `Context` (our activity) so that we can pull out `LayoutInflater`.
    This class enables you to load XML layout resources and inflate them into a view
    object.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We implemented `GetItemId`. This is a general method used to identify rows,
    but we just returned the position for now.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We set up `GetView`, which recycles the `convertView` variable by only creating
    a new view if it is null. We also pulled out the text views in our layout to set
    their text.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We overrode `Count` to return the number of conversations.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We implemented an indexer to return a `Conversation` object for a position.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Overall, this should be fairly similar to what we did on iOS.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the adapter
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now let''s set up the adapter in our activity by adding the following to the
    body of `ConversationsActivity`:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This code will set up the adapter and reload our list of conversations when
    the activity appears on the screen. Note that we called `NotifyDataSetInvalidated`
    here so that `ListView` reloads its rows after the number of conversations has
    been updated. This is parallel to what we did on iOS by calling the `UITableView's`
    `ReloadData` method.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: 'Last but not least, we need to modify the `OnLogin` method we set up earlier
    in `LoginActivity` to start our new activity as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now if we compile and run our application, we can navigate to a conversations
    list after logging in, as shown in the following screenshot:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up the adapter](img/00050.jpeg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
- en: Implementing the friends list
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we start implementing the friends list screen, we must first add a menu
    item to `ActionBar` in our application. Let''s begin by creating a new `menu`
    folder within the `Resources` folder of our project. Next, create a new Android
    layout file named `ConversationsMenu.axml`. Remove the default layout created
    by XML, and replace it with the following:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We set up a root menu with one menu item inside it.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a breakdown of what we set for the item in XML:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '`android:id`: We will use this later in C# to reference the menu item with
    `Resource.Id.addFriendMenu`.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android:icon`: This is an image resource used to display the menu item. We
    used a built-in Android one for a generic *plus* icon.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`android:showAsAction`: This will make the menu item visible if there is room
    for the item. If for some reason the device''s screen is too narrow, an overflow
    menu would be displayed for the menu item.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now we can make some changes in `ConversationsActivity.cs` to display the menu
    item as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This code will take our layout and apply it to the menu at the top in our activity''s
    action bar. Next, we can add some code to be run when the menu item is selected
    as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now let's implement the next activity. Let's begin by making a copy of `Conversations.axml`
    found in the `layout` folder in the `Resources` directory and rename it `Friends.axml`.
    The only change we'll make in this file will be to rename the ListView's ID to
    `@+id/friendsList`.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, perform the following steps to create a layout that can be used for the
    list items in `ListView`:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: Make a new Android layout called `FriendListItem.axml`.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the layout and switch to the **Source** tab found at the bottom of the
    screen.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the root `LinearLayout` XML element to a `RelativeLayout` element.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch back to the **Content** tab found at the bottom of the screen.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag a **Text (Large)** control from the **Toolbox** pane onto the layout and
    set its **Id** to `@+id/friendName`.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag an **ImageView** control from the **Toolbox** pane onto the layout; you
    can either let its **Id** be its default value or blank it out.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the image view's image to `@android:drawable/ic_menu_add`. This is the
    same plus icon we used earlier in the chapter. You can select it from the **Resources**
    dialog under the **Framework Resources** tab.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Width** and **Height** of both the controls to `wrap_content`. This
    is found under the **Layout** tab under the **ViewGroup** section.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, check the value for **Align Parent Right** on just the image view.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, set the **Margins** of both the controls to `3dp` in the **Layout**
    tab of the **Properties** box.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Using the Xamarin designer can be very productive, but some developers prefer
    a higher level of control. You might consider writing the XML code yourself as
    an alternative, which is fairly straightforward, as shown in the following code:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Since we now have all the layouts we need for the new screen, let''s create
    an Android Activity in the `Activities` folder named `FriendsActivity.cs`. Let''s
    create the basic definition of the activity as follows, just like we did before:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, let''s implement a nested `Adapter` class to set up the list view items
    as follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: There is really no difference in this adapter and the previous one we implemented
    for the conversations screen. We only have to set the friend's name, and we use
    the `User` object instead of the `Conversation` object.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: 'To finish setting up the adapter, we can update the body of the `FriendsActivity`
    class as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Last but not least, we can update `OnOptionsItemSelected` in the `ConversationsActivity`
    class as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'So, if we compile and run the application, we can navigate to a fully implemented
    friends list screen, as shown in the following screenshot:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing the friends list](img/00051.jpeg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
- en: Composing messages
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next screen is a bit more complicated. We will need to create a `ListView`
    that uses multiple layout files for each row, depending on the type of the row.
    We'll also need to perform some layout tricks to place a view below the `ListView`
    and set up the `ListView` to autoscroll.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: 'For the next screen, let''s begin by creating a new layout named `Messages.axml`
    in the `layout` folder of the `Resources` directory and then perform the following
    steps:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: Drag a new **ListView** onto the layout. Set its **Id** to `@+id/messageList`.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the box for **Stack From Bottom**, and set **Transcript Mode** to `alwaysScroll`.
    This will set it up in order to display items from the bottom up.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Weight** value to `1` for the **ListView** in the **Layout** tab under
    the **LinearLayout** section.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag a new **RelativeLayout** onto the layout. Let its **Id** be the default
    value, or remove it.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag a new **Button** inside **RelativeLayout**. Set its **Id** to `@+id/sendButton`.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the box for **Align Parent Right** in the **Layout** tab.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag a new **Plain Text** found in the **Text Field** section inside **RelativeLayout**
    to the left of the button. Set its **Id** to `@+id/messageText`.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Layout** tab, set **To Left Of** to `@+id/sendButton`, and set its
    **Width** to `match_parent`.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the box for **Center in Parent** to fix the vertical centering.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When completed, the XML file will be as follows:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Next, perform the following steps to make two more Android layouts:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: Create a new layout named `MyMessageListItem.axml` in the `layout` folder of
    the `Resources` directory.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the layout and switch to the **Source** tab. Change the root XML element
    to a `RelativeLayout` element.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch back to the **Content** tab, and drag two **TextView** controls onto
    the layout.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Id** field, enter `@+id/myMessageText` and `@+id/myMessageDate` respectively.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For both the views, set **Margin** to `3dp`, and **Width** and **Height** to
    `wrap_content`.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the first TextView, set its **Color** to `@android:color/holo_blue_bright`
    under the **Style** tab.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the second TextView, check the **Align Parent Right** checkbox under the
    **Layout** tab.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new layout named `TheirMessageListItem.axml` and repeat the process.
    Select a different color for the first TextView in the new layout.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, we''ll need to create a new activity for the screen. Create a new
    Android Activity named `MessagesActivity.cs` in the `Activities` directory. Let''s
    begin with the standard code to set up an activity as follows:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Next, let''s implement a more complicated adapter than what we implemented
    earlier as follows:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This includes everything except our implementation of `GetView`, which we'll
    get to shortly. Here, the first changes are some constants for `MyMessageType`
    and `TheirMessageType`. We then implemented `ViewTypeCount` and `GetItemViewType`.
    This is Android's mechanism for using two different layouts for list items in
    a list view. We use one type of layout for the user's messages and a different
    one for the other user in the conversation.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s implement `GetView` as follows:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Let''s break down our implementation through the following steps:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: We first pull out the `message` object for the position of the row.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we grab the view type that determines whether it is the current user's
    message or the other user in the conversation.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If `convertView` is `null`, we inflate the appropriate layout based on the type.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we pull the two text views, `messageText` and `dateText`, out of the `convertView`.
    We have to use the type value to make sure that we use the correct resource IDs.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We set the appropriate text on both the text views using the `message` object.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We return `convertView`.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now let''s finish `MessagesActivity` by setting up the rest of the adapter.
    First, let''s implement some member variables and the `OnCreate` method as follows:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: So far this activity is fairly standard compared to our previous activities
    in this chapter. We also had to wire up the `Click` event of `sendButton` in `OnCreate`
    so that it sends the message and refreshes the list. We also used a trick to scroll
    the list view to the end by setting its selection to the last item.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we''ll need to implement `OnResume` to load the messages, invalidate
    the adapter, and then scroll the list view to the end as follows:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要实现`OnResume`来加载消息，使适配器失效，然后将列表视图滚动到末尾，如下所示：
- en: '[PRE22]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'So finally, if you compile and run the app, you will be able to navigate to
    the messages screen, and add new messages to the list, as shown in the following
    screenshot:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 所以最终，如果你编译并运行这个应用，你将能够导航到消息屏幕，并向列表中添加新的消息，如下面的截图所示：
- en: '![Composing messages](img/00052.jpeg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![撰写消息](img/00052.jpeg)'
- en: Summary
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we started out by going over the basic settings in the Android
    Manifest file. Next, we implemented a custom `Application` class to set up our
    `ServiceContainer`. We then went over the different types of Android layouts and
    implemented a login screen using native Android views. We implemented the friends
    list screen, and learned about the basics of `ListView` and adapters. Finally,
    we implemented the messages screen, and used the more advanced functionality available
    in list view adapters and layouts.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们首先回顾了AndroidManifest文件中的基本设置。接下来，我们实现了一个自定义的`Application`类来设置我们的`ServiceContainer`。然后，我们介绍了Android的不同布局类型，并使用原生Android视图实现了登录屏幕。我们实现了好友列表屏幕，并学习了`ListView`和适配器的基础知识。最后，我们实现了消息屏幕，并使用了列表视图适配器和布局中更高级的功能。
- en: After completing this chapter, you will have a partially functional Android
    version of XamChat. You will have gained a deeper understanding of the Android
    SDK and tools. You should be confident in developing your own Android applications
    using Xamarin. Take it upon yourself to implement the remaining screens that we
    did not cover in the chapter. If you get lost, feel free to review the full sample
    application included with this book. In the next chapter, we'll cover how to deploy
    to mobile devices and why is it very important to test your applications on real
    devices.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章学习后，你将拥有一个部分功能的Android版XamChat。你将更深入地理解Android SDK和工具。你应该自信地使用Xamarin开发自己的Android应用。请自行实现本章未涵盖的剩余屏幕。如果你感到困惑，请随时查阅本书附带的全样本应用。在下一章中，我们将介绍如何部署到移动设备，以及为什么在实际设备上测试你的应用非常重要。
