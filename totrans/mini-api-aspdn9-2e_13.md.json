["```cs\n/src\n  /MyMinimalApiProject\n    /Modules\n      /Users\n        UserEndpoints.cs\n        UserService.cs\n        UserRepository.cs\n        User.cs\n        UserDto.cs\n        UserValidator.cs\n      /Products\n        ProductEndpoints.cs\n        ProductService.cs\n        ProductRepository.cs\n        Product.cs\n        ProductDto.cs\n        ProductValidator.cs\n    /Middleware\n      ErrorHandlingMiddleware.cs\n      AuthenticationMiddleware.cs\n    /Configuration\n      SwaggerConfig.cs\n      DependencyInjectionConfig.cs\n    /Utils\n      DateTimeHelper.cs\n      LoggingHelper.cs\n    Program.cs\n    appsettings.json\n```", "```cs\n/src\n  /MyMinimalApiProject\n    /Endpoints\n      /Users\n        UserEndpoints.cs\n        UserValidator.cs\n      /Products\n        ProductEndpoints.cs\n        ProductValidator.cs\n    /Services\n      /Users\n        UserService.cs\n      /Products\n        ProductService.cs\n    /Repositories\n      /Users\n        UserRepository.cs\n      /Products\n        ProductRepository.cs\n    /Domain\n      /Entities\n        User.cs\n        Product.cs\n      /DTOs\n        UserDto.cs\n        ProductDto.cs\n    /Middleware\n      ErrorHandlingMiddleware.cs\n      AuthenticationMiddleware.cs\n    /Configuration\n      SwaggerConfig.cs\n      DependencyInjectionConfig.cs\n    /Utils\n      DateTimeHelper.cs\n      LoggingHelper.cs\n    Program.cs\n    appsettings.json\n```", "```cs\n    public interface ILogger\n    {\n        void Log(string message);\n    }\n    ```", "```cs\n    public class FileLogger : ILogger\n    {\n        public void Log(string message)\n        {\n            // Logic to log to a file\n        }\n    }\n    public class DatabaseLogger : ILogger\n    {\n        public void Log(string message)\n        {\n            // Logic to log to a database\n        }\n    }\n    ```", "```cs\n    public static class LoggerFactory\n    {\n        public static ILogger CreateLogger(\n            string loggerType\n        )\n        {\n            return loggerType switch\n            {\n                \"File\" => new FileLogger(),\n                \"Database\" => new DatabaseLogger(),\n                _ => throw new ArgumentException(\n                \"Invalid logger type\")\n            };\n        }\n    }\n    ```", "```cs\npublic class EmployeeRepository : IEmployeeRepository\n{\n    private readonly MyCompanyContext _context;\n    public EmployeeRepository(MyCompanyContext context)\n    {\n        _context = context;\n    }\n    public async Task<Employee> GetByIdAsync(int id)\n    {\n        return await _context.Employees.FindAsync(id);\n    }\n    public async Task<IEnumerable<Employee>> GetAllAsync()\n    {\n        return await _context.Employees.ToListAsync();\n    }\n    public async Task AddAsync(Employee employee)\n    {\n        await _context.Employees.AddAsync(employee);\n        await _context.SaveChangesAsync();\n    }\n    public async Task UpdateAsync(Employee employee)\n    {\n        _context.Employees.Update(employee);\n        await _context.SaveChangesAsync();\n    }\n    public async Task DeleteAsync(int id)\n    {\n        var employee = await\n            _context.Employees.FindAsync(id);\n        if (employee != null)\n        {\n            _context.Employees.Remove(employee);\n            await _context.SaveChangesAsync();\n        }\n    }\n}\n```", "```cs\n    public interface IAnnualLeaveStrategy\n    {\n        int CalculateLeaveAllowance(\n            Models.Employee employee\n        );\n    }\n    ```", "```cs\n    public class ProbationaryAnnualLeaveStrategy\n        : IAnnualLeaveStrategy\n    {\n        public int CalculateLeaveAllowance(\n            Models.Employee employee\n        )\n        {\n            var leaveTotal = 10;\n            if(employee.Country == \"United Kingdom\")\n            {\n                leaveTotal += 3;\n            }\n            return leaveTotal;\n        }\n    }\n    ```", "```cs\n    public class PostProbationaryAnnualLeaveStrategy\n        : IAnnualLeaveStrategy\n    {\n        public int CalculateLeaveAllowance(\n            Models.Employee employee\n        )\n        {\n            var leaveTotal = 16;\n            if(employee.Country == \"United Kingdom\")\n            {\n                leaveTotal += 3;\n            }\n        leaveTotal += employee.YearsOfService;\n            return leaveTotal;\n        }\n    }\n    ```", "```cs\n                builder.Services\n                  .AddScoped<\n                    ProbationaryAnnualLeaveStrategy\n                  >();\n                builder.Services\n                  .AddScoped<\n                    PostProbationaryAnnualLeaveStrategy\n                  >();\n    ```", "```cs\n    app.MapGet(\n        \"/calculate-employee-leave-allowance/\n            {employeeId}\",\n        async (int employeeId,\n            bool employeeOnProbation,\n            [FromServices]\n            EmployeeService employeeService) =>\n    {\n        IAnnualLeaveStrategy annualLeaveStrategy =\n            employeeOnProbation\n              ? new ProbationaryAnnualLeaveStrategy()\n              : new PostProbationaryAnnualLeaveStrategy();\n        var employee = await\n            employeeService.GetEmployeeById(employeeId);\n        return annualLeaveStrategy\n            .CalculateLeaveAllowance(employee);\n    });\n    ```", "```cs\npublic class ErrorHandlingMiddleware\n{\n    private readonly RequestDelegate _next;\n    private readonly ILogger<ErrorHandlingMiddleware>\n        _logger;\n    public ErrorHandlingMiddleware(\n        RequestDelegate next,\n        ILogger<ErrorHandlingMiddleware> logger\n    )\n    {\n        _next = next;\n        _logger = logger;\n    }\n    public async Task InvokeAsync(HttpContext context)\n    {\n        try\n        {\n            await _next(context);\n        }\n        catch (Exception ex)\n        {\n            _logger.LogError(\n                ex, \"An unhandled exception occurred.\"\n            );\n            await HandleExceptionAsync(context, ex);\n        }\n    }\n```", "```cs\n    private static Task HandleExceptionAsync(\n        HttpContext context, Exception exception)\n    {\n    If (context.Response.HasStarted) return;\n    context.Response.ContentType = \"application/json\";\n    context.Response.StatusCode =\n        (int)HttpStatusCode.InternalServerError;\n        var response = new\n        {\n            message =\n                \"An unexpected error occurred. Please try\n                again later.\",\n            details = exception.Message\n        };\n        return context.Response.WriteAsJsonAsync(response);\n    }\n}\n```", "```cs\napp.UseMiddleware<ErrorHandlingMiddleware>();\napp.MapGet(\n    \"/error\",\n    () => {\n        throw new InvalidOperationException(\n            \"This is a test exception\");\n    });\n```", "```cs\n{\n    \"message\": \"An unexpected error occurred. Please try\n        again later.\",\n    \"details\": \"This is a test exception\"\n}\n```", "```cs\n    dotnet add package Microsoft\n        .AspNetCore.Authentication.JwtBearer\n    ```", "```cs\n    using Microsoft.AspNetCore.Authentication.JwtBearer;\n    using Microsoft.IdentityModel.Tokens;\n    using System.Text;\n    using System.IdentityModel.Tokens.Jwt;\n    using System.Security.Claims;\n    using Microsoft.AspNetCore.Authorization;\n    ```", "```cs\n    builder.AddAuthorization();\n    builder.Services.AddAuthentication(\n        JwtBearerDefaults.AuthenticationScheme)\n        .AddJwtBearer(options =>\n        {\n            options.TokenValidationParameters =\n                new TokenValidationParameters\n            {\n                ValidateIssuer = true,\n                ValidateAudience = true,\n                ValidateLifetime = true,\n                ValidateIssuerSigningKey = true,\n                ValidIssuer = \"https://yourdomain.com\",\n                ValidAudience = \"https://yourdomain.com\",\n                IssuerSigningKey =\n                    new SymmetricSecurityKey(\n                        Encoding.UTF8.GetBytes(\n                            \"A_Not_Very_Secret_Key_1234567\n                                890\"\n                        )\n                    )\n            };\n        });\n    var app = builder.Build();\n    app.UseAuthentication();\n    app.UseAuthorization();\n    ```", "```cs\n        app.MapGet(\"/generate-token\", () =>\n        {\n            var tokenHandler =\n                new JwtSecurityTokenHandler();\n            var key = Encoding.UTF8.GetBytes(\n                \" A_Not_Very_Secret_Key_1234567890\"\n            );\n            var tokenDescriptor =\n                new SecurityTokenDescriptor\n            {\n                Subject = new ClaimsIdentity(new[]\n                {\n        new Claim(ClaimTypes.Name, \"TestUser\"),\n        new Claim(ClaimTypes.Role, \"Admin\")\n    }),\n                Expires = DateTime.UtcNow.AddHours(1),\n                Issuer = \"https://yourdomain.com\",\n                Audience = \"https://yourdomain.com\",\n                SigningCredentials =\n                    new SigningCredentials(\n                        new SymmetricSecurityKey(key),\n                            SecurityAlgorithms\n                                .HmacSha256Signature\n                    )\n            };\n            var token =\n                tokenHandler.CreateToken(tokenDescriptor);\n            var tokenString =\n                tokenHandler.WriteToken(token);\n            return Results.Ok(tokenString);\n        });\n    ```", "```cs\n    app.MapGet(\n        \"/secure\",\n        [Authorize] () => \"This is a secure endpoint\")\n        .RequireAuthorization();\n    ```", "```cs\n    \"Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IlRlc3RVc2VyIiwicm9sZSI6IkFkbWluIiwibmJmIjoxNjQyNzE2MzY0LCJleHAiOjE2NDI3MTk5NjQsImlhdCI6MTY0MjcxNjM2NCwiaXNzIjoiaHR0cHM6Ly95b3VyZG9tYWluLmNvbSIsImF1ZCI6Imh0dHBzOi8veW91cmRvbWFpbi5jb20ifQ.-Ym30PjdvWl5eYdltZd0yA5XQ1ikf5D4KrDlmHMIj0s\"\n    ```", "```cs\n    app.MapGet(\n        \"/admin\",\n        [Authorize(Roles = \"Admin\")] () =>\n    {\n        return Results.Ok(\"Welcome, Admin!\");\n    });\n    ```", "```cs\ndotnet add package AspNetCoreRateLimit\n```", "```cs\nusing AspNetCoreRateLimit;\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddMemoryCache();\nbuilder.Services.Configure<IpRateLimitOptions>(options =>\n{\n    options.GeneralRules = new List<RateLimitRule>\n    {\n        new RateLimitRule\n        {\n            Endpoint = \"*\",\n            Limit = 10,\n            Period = \"1m\"\n        }\n    };\n});\nbuilder.Services\n    .AddSingleton<IRateLimitConfiguration,\n        RateLimitConfiguration>();\nbuilder.Services.AddInMemoryRateLimiting();\nvar app = builder.Build();\napp.UseIpRateLimiting();\napp.MapGet(\"/\", () => \"Hello, World!\");\napp.Run();\n```"]