["```cs\n    dotnet new webapi -minimal -o Chapter02\n    ```", "```cs\ncd Chapter02\ncode.\n```", "```cs\napp.MapGet(\"/hello-get\", () => \"[GET] Hello World!\");\napp.MapPost(\"/hello-post\", () => \"[POST] Hello World!\");\napp.MapPut(\"/hello-put\", () => \"[PUT] Hello World!\");\napp.MapDelete(\"/hello-delete\", () => \"[DELETE] Hello\n                World!\");\n```", "```cs\napp.MapMethods(\"/hello-patch\", new[] { HttpMethods.Patch }, \n    () => \"[PATCH] Hello World!\");\napp.MapMethods(\"/hello-head\", new[] { HttpMethods.Head }, \n    () => \"[HEAD] Hello World!\");\napp.MapMethods(\"/hello-options\", new[] { \n    HttpMethods.Options }, () => \"[OPTIONS] Hello World!\");\n```", "```cs\n    app.MapGet(\"/hello-inline\", () => \"[INLINE LAMBDA] \n                 Hello World!\");\n    var handler = () => \"[LAMBDA VARIABLE] Hello World!\";\n    app.MapGet(\"/hello\", handler);\n    ```", "```cs\n    string Hello() => \"[LOCAL FUNCTION] Hello World!\";\n    app.MapGet(\"/hello\", Hello);\n    ```", "```cs\n    var handler = new HelloHandler();\n    app.MapGet(\"/hello\", handler.Hello);\n    class HelloHandler\n    {\n        public string Hello()\n          => \"[INSTANCE METHOD] Hello \n               World!\";\n    }\n    ```", "```cs\n    app.MapGet(\"/hello\", HelloHandler.Hello);\n    class HelloHandler\n    {\n        public static string Hello()\n          => \"[STATIC METHOD] Hello World!\";\n    }\n    ```", "```cs\napp.MapGet(\"/users/{username}/products/{productId}\", \n          (string username, int productId) \n         => $\"The Username is {username} and the product Id \n              is {productId}\");\n```", "```cs\napp.MapGet(\"/users/{id:int}\", (int id) => $\"The user Id is \n                                            {id}\");\napp.MapGet(\"/users/{id:guid}\", (Guid id) => $\"The user Guid \n                                              is {id}\");\n```", "```cs\n// Matches hello?name=Marco\napp.MapGet(\"/hello\", (string name) => $\"Hello, {name}!\"); \n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddScoped<PeopleService>();\nvar app = builder.Build();\napp.MapPut(\"/people/{id:int}\", (int id, bool notify, Person \n             person, PeopleService peopleService) => { });\napp.Run();\npublic class PeopleService { }\npublic record class Person(string FirstName, string \n                           LastName);\n```", "```cs\napp.MapGet(\"/search\", string q) => { });\n```", "```cs\napp.MapGet(\"/search\", ([FromQuery(Name = \"q\")] string \n             searchText) => { });\n```", "```cs\napp.MapGet(\"/people\", (int pageIndex, int itemsPerPage) => { });\n```", "```cs\n// This won't compile\n//app.MapGet(\"/people\", (int pageIndex = 0, int \n                         itemsPerPage = 50) => { });\nstring SearchMethod(int pageIndex = 0, \n                    int itemsPerPage = 50) => $\"Sample \n                    result for page {pageIndex} getting \n                    {itemsPerPage} elements\";\napp.MapGet(\"/people\", SearchMethod);\n```", "```cs\napp.MapGet(\"/people\", (string? orderBy) => $\"Results ordered by {orderBy}\");\n```", "```cs\napp.MapGet(\"/products\", (HttpContext context, HttpRequest req, HttpResponse res, ClaimsPrincipal user) => { });\n```", "```cs\n// GET /navigate?location=43.8427,7.8527\napp.MapGet(\"/navigate\", (Location location) => $\"Location: \n            {location.Latitude}, {location.Longitude}\");\npublic class Location\n{\n    public double Latitude { get; set; }\n    public double Longitude { get; set; }\n    public static bool TryParse(string? value, \n      IFormatProvider? provider, out Location? location)\n    {\n          if (!string.IsNullOrWhiteSpace(value))\n          {\n               var values = value.Split(',', \n               StringSplitOptions.RemoveEmptyEntries);\n               if (values.Length == 2 && double.\n                   TryParse(values[0],\n                   NumberStyles.AllowDecimalPoint, \n                   CultureInfo.InvariantCulture, \n                   out var latitude) && double.\n                   TryParse(values[1], NumberStyles.\n                   AllowDecimalPoint, CultureInfo.\n                   InvariantCulture, out var longitude))\n               {\n                       location = new Location \n                       { Latitude = latitude, \n                       Longitude = longitude };\n                       return true;\n               }\n          }\n          location = null;\n          return false;\n    }\n}\n```", "```cs\n// POST /navigate?lat=43.8427&lon=7.8527\napp.MapPost(\"/navigate\", (Location location) => \n   $\"Location: {location.Latitude}, {location.Longitude}\");\npublic class Location\n{\n    // ...\n    public static ValueTask<Location?> BindAsync(HttpContext \n    context, ParameterInfo parameter)\n    {\n        if (double.TryParse(context.Request.Query[\"lat\"], \n            NumberStyles.AllowDecimalPoint, CultureInfo.\n            InvariantCulture, out var latitude)&& double.\n            TryParse(context.Request.Query[\"lon\"], \n            NumberStyles.AllowDecimalPoint, CultureInfo.\n            InvariantCulture, out var longitude))\n        {\n                var location = new Location \n                { Latitude = latitude, Longitude = longitude };\n                return ValueTask.\n                  FromResult<Location?>(location);\n        }\n        return ValueTask.FromResult<Location?>(null);\n    }\n}\n```", "```cs\napp.MapGet(\"/ok\", () => Results.Ok(new Person(\"Donald\", \n                                              \"Duck\")));\napp.MapGet(\"/notfound\", () => Results.NotFound());\napp.MapPost(\"/badrequest\", () =>\n{\n    // Creates a 400 response with a JSON body.\n    return Results.BadRequest(new { ErrorMessage = \"Unable to\n                                    complete the request\" });\n});\napp.MapGet(\"/download\", (string fileName) => \n             Results.File(fileName));\nrecord class Person(string FirstName, string LastName);\n```", "```cs\npublic class XmlResult : IResult\n{\n   private readonly object value;\n   public XmlResult(object value)\n   {\n       this.value = value;\n   }\n   public Task ExecuteAsync(HttpContext httpContext)\n   {\n       using var writer = new StringWriter();\n\n       var serializer = new XmlSerializer(value.GetType());\n       serializer.Serialize(writer, value);\n       var xml = writer.ToString();\n       httpContext.Response.ContentType = MediaTypeNames.\n       Application.Xml;\n       httpContext.Response.ContentLength = Encoding.UTF8\n      .GetByteCount(xml);\n       return httpContext.Response.WriteAsync(xml);\n   }\n}\n```", "```cs\npublic static class ResultExtensions\n{\n    public static IResult Xml(this IResultExtensions \n    resultExtensions, object value) => new XmlResult(value);\n}\n```", "```cs\napp.MapGet(\"/xml\", () => Results.Extensions.Xml(new City { Name = \"Taggia\" }));\npublic record class City\n{\n    public string? Name { get; init; }\n}\n```", "```cs\napp.MapGet(\"/product\", () =>\n{\n    var product = new Product(\"Apple\", null, 0.42, 6);\n    return Results.Ok(product); \n});\npublic record class Product(string Name, string? Description, double UnitPrice, int Quantity)\n{\n    public double TotalPrice => UnitPrice * Quantity;\n}\n```", "```cs\n{\n    \"name\": \"Apple\",\n    \"description\": null,\n    \"unitPrice\": 0.42,\n    \"quantity\": 6,\n    \"totalPrice\": 2.52\n}\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.Configure<Microsoft.AspNetCore.Http.Json.\nJsonOptions>(options =>\n{\n    options.SerializerOptions.DefaultIgnoreCondition = \n    JsonIgnoreCondition.WhenWritingNull;\n    options.SerializerOptions.IgnoreReadOnlyProperties \n    = true;\n});\n```", "```cs\n{\n    \"name\": \"Apple\",\n    \"unitPrice\": 0.42,\n    \"quantity\": 6\n}\n```", "```cs\napp.MapGet(\"/api/people\", (PeopleService peopleService) => \n            { });\napp.MapGet(\"/api/people/{id:guid}\", (Guid id, PeopleService \n             peopleService) => { });\napp.MapPost(\"/api/people\", (Person Person, PeopleService \n              people) => { });\napp.MapPut(\"/api/people/{id:guid}\", (Guid id, Person \n             Person, PeopleService people) => { });\napp.MapDelete(\"/api/people/{id:guid}\", (Guid id, \n                PeopleService people) => { });\n```", "```cs\npublic class PeopleHandler\n{\n   public static void MapEndpoints(IEndpointRouteBuilder \n   app)\n   {\n       app.MapGet(\"/api/people\", GetList);\n       app.MapGet(\"/api/people/{id:guid}\", Get);\n       app.MapPost(\"/api/people\", Insert);\n       app.MapPut(\"/api/people/{id:guid}\", Update);\n       app.MapDelete(\"/api/people/{id:guid}\", Delete);\n   }\n\n   private static IResult GetList(PeopleService    \n   peopleService) { /* ... */ }\n   private static IResult Get(Guid id, PeopleService \n   peopleService) { /* ... */ }\n   private static IResult Insert(Person person, \n   PeopleService people) { /* ... */ }\n   private static IResult Update(Guid id, Person \n   person, PeopleService people) { /* ... */ }\n   private static IResult Delete(Guid id) { /* ... */ }\n}\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\n// ..\nvar app = builder.Build();\n// ..\nPeopleHandler.MapEndpoints(app);\napp.Run();\n```", "```cs\npublic interface IEndpointRouteHandler\n{\n   public void MapEndpoints(IEndpointRouteBuilder app);\n}\n```", "```cs\npublic class PeopleHandler : IEndpointRouteHandler\n{\n       public void MapEndpoints(IEndpointRouteBuilder app)\n         {\n                // ...\n         }\n         // ...\n}\n```", "```cs\npublic static class IEndpointRouteBuilderExtensions\n{\n    public static void MapEndpoints(this\n    IEndpointRouteBuilder app, Assembly assembly)\n    {\n        var endpointRouteHandlerInterfaceType = \n          typeof(IEndpointRouteHandler);\n        var endpointRouteHandlerTypes = \n        assembly.GetTypes().Where(t =>\n        t.IsClass && !t.IsAbstract && !t.IsGenericType\n        && t.GetConstructor(Type.EmptyTypes) != null\n        && endpointRouteHandlerInterfaceType\n        .IsAssignableFrom(t));\n        foreach (var endpointRouteHandlerType in \n        endpointRouteHandlerTypes)\n        {\n            var instantiatedType = (IEndpointRouteHandler)\n              Activator.CreateInstance\n                (endpointRouteHandlerType)!;\n            instantiatedType.MapEndpoints(app);\n        }\n    }\n}\n```", "```cs\napp.MapEndpoints(Assembly.GetExecutingAssembly());\napp.Run();\n```"]