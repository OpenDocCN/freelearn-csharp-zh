["```cs\ndotnet tool install -g Volo.Abp.Cli\n```", "```cs\nabp new DemoApp -u blazor\n```", "```cs\ndotnet run\n```", "```cs\n  \"AuthServer\": {\n    \"Authority\": \"https://localhost:44306\",\n    \"ClientId\": \"DemoApp_Blazor\",\n    \"ResponseType\": \"code\"\n  }\n```", "```cs\nprivate static void ConfigureAuthentication(\n    WebAssemblyHostBuilder builder)\n{\n    builder.Services.AddOidcAuthentication(options =>\n    {\n        builder.Configuration.Bind(\n            \"AuthServer\", options.ProviderOptions);\n        options.UserOptions.RoleClaim = JwtClaimTypes.Role;\n        options.ProviderOptions.DefaultScopes.Add(\n            \"DemoApp\");\n        options.ProviderOptions.DefaultScopes.Add(\"role\");\n        options.ProviderOptions.DefaultScopes.Add(\"email\");\n        options.ProviderOptions.DefaultScopes.Add(\"phone\");\n    });\n}\n```", "```cs\nConfigure<AbpNavigationOptions>(options =>\n{\n    options.MenuContributors.Add(new\n        DemoAppMenuContributor(\n        context.Services.GetConfiguration()));\n});\n```", "```cs\npublic class DemoAppMenuContributor : IMenuContributor\n{\n    public async Task ConfigureMenuAsync(\n        MenuConfigurationContext context)\n    {\n        if (context.Menu.Name == StandardMenus.Main)\n        {\n            //TODO: Configure the main menu\n        }\n    }\n}\n```", "```cs\nvar l = context.GetLocalizer<DemoAppResource>();\ncontext.Menu.AddItem(\n    new ApplicationMenuItem(\n        DemoAppMenus.Home,\n        l[\"Menu:Home\"],\n        \"/home\",\n        icon: \"fas fa-home\"\n    )\n);\n```", "```cs\nif (await context.IsGrantedAsync(\"MyPermissionName\"))\n{\n    context.Menu.AddItem(...);\n}\n```", "```cs\ncontext.Menu.AddItem(\n    new ApplicationMenuItem(\n        DemoAppMenus.Crm,\n        l[\"Menu:Identity\"]\n    ).AddItem(new ApplicationMenuItem(\n        DemoAppMenus.Orders,\n        l[\"Menu:Orders\"],\n        url: \"/crm/orders\")\n    )\n);\n```", "```cs\npublic partial class Index\n{\n    protected override async Task OnInitializedAsync()\n    {\n        if (await AuthorizationService\n                 .IsGrantedAsync(\"MyPermission\"))\n        {\n            // TODO: ...\n        }\n    }\n}\n```", "```cs\n[Inject]\nprivate IAuthorizationService AuthorizationService { get;\n                                                     set; }\n```", "```cs\n@page \"/\"\n@attribute [Authorize]\n<p>This page is visible only if you've logged in</p>.\n```", "```cs\n@page \"/order-management\"\n@attribute [Authorize(\"CanManageOrders\")]\n<p>You can only see this if you have the necessary\n    permission.</p>\n```", "```cs\n<AuthorizeView Policy=\"CanEditOrders\">\n    <p>You can only see this if you can edit the \n        orders.</p>\n</AuthorizeView>\n```", "```cs\n@using DemoApp.Localization\n@using Microsoft.Extensions.Localization\n@inject IStringLocalizer<DemoAppResource> L\n<h3>@L[\"HelloWorld\"]</h3>\n```", "```cs\n@using Volo.Abp.Users\n@inject ICurrentUser CurrentUser\n<h3>Welcome @CurrentUser.Name</h3>\n```", "```cs\n@page \"/\"\n@inherits DemoAppComponentBase\n<Button Color=\"Color.Primary\"\n        Clicked=\"ShowSuccess\">Click me!</Button>\n@code\n{\n    private async Task ShowSuccess()\n    {\n        await Message.Success(\"This is a success\n                               message!\");\n    }\n}\n```", "```cs\n@page \"/\"\n@inherits DemoAppComponentBase\n<Button Color=\"Color.Primary\" \n        Clicked=\"ShowQuestion\">Click me!</Button>\n@code\n{\n    private async Task ShowQuestion()\n    {\n        var result = await Message.Confirm(\n            \"Are you sure to delete the product?\");\n        if (result == true)\n        {\n            //TODO: ...\n        }\n    }\n}\n```", "```cs\n@page \"/\"\n@inherits DemoAppComponentBase\n<Button Color=\"Color.Primary\" \n        Clicked=\"ShowQuestion\">Click me!</Button>\n@code\n{\n    private async Task ShowQuestion()\n    {\n        var confirmed = await Message.Confirm(\n            \"Are you sure to delete the product?\");\n        if (confirmed)\n        {\n            //TODO: Delete the product\n            await Notify.Success(\"Successfully deleted the\n                                  product!\");\n        }\n    }\n}\n```", "```cs\n@page \"/\"\n@inherits DemoAppComponentBase\n<Button Color=\"Color.Primary\" \n        Clicked=\"DeleteProduct\">Click me!</Button>\n@code\n{\n    private async Task DeleteProduct()\n    {\n        //TODO: Delete the product\n        Alerts.Success(\n            text: \"Successfully deleted the product.\", \n            title: \"Deleted!\", \n            dismissible: true);\n    }\n}\n```", "```cs\npublic interface ITestAppService : IApplicationService\n{\n    Task<int> GetDataAsync();\n}\n```", "```cs\npublic class TestAppService : ApplicationService,\n    ITestAppService\n{\n    public async Task<int> GetDataAsync()\n    {\n        return 42;\n    }\n}\n```", "```cs\npublic partial class Index\n{\n    [Inject]\n    private ITestAppService TestAppService { get; set; }\n    private int Value { get; set; }\n\n    protected override async Task OnInitializedAsync()\n    {\n        Value = await TestAppService.GetDataAsync();\n    }\n}\n```", "```cs\n\"RemoteServices\": {\n  \"Default\": {\n    \"BaseUrl\": \"https://localhost:44306\"\n  }\n}\n```", "```cs\n<!--ABP:Styles-->\n<link href=\"global.css?_v=637649661149948696\"\n    rel=\"stylesheet\"/>\n<link href=\"main.css\" rel=\"stylesheet\"/>\n<!--/ABP:Styles-->\n```", "```cs\nabp bundle\n```", "```cs\npublic class DemoAppBundleContributor : IBundleContributor\n{\n    public void AddScripts(BundleContext context)\n    {\n    }\n    public void AddStyles(BundleContext context)\n    {\n        context.Add(\"main.css\", excludeFromBundle: true);\n    }\n}\n```", "```cs\n<!--ABP:Scripts-->\n<script src=\"img/global.js?_v=637680281013693676\"></script>\n<!--/ABP:Scripts-->\n```"]