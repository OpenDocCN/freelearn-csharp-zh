- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Software projects quickly go from greenfield paradises to brownfield wastelands
    filled with legacy code and technical debt. Every engineer will encounter projects
    that are more difficult than they should be due to existing technical debt. This
    book covers the process of refactoring existing code into more maintainable forms.
  prefs: []
  type: TYPE_NORMAL
- en: In Refactoring with C#, we focus on using modern C# and Visual Studio features
    to safely pay down technical debt in a sustainable way – while continuing to deliver
    value to the business.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is for two distinct types of readers.
  prefs: []
  type: TYPE_NORMAL
- en: The first is junior and mid-level C# developers in the first few years of their
    careers. This book will teach you the programming techniques and mentalities needed
    to advance in your career. You’ll learn how to safely refactor your code and find
    new ways of improving the overall structure of your code.
  prefs: []
  type: TYPE_NORMAL
- en: The second type of reader is the software engineer or engineering manager dealing
    with a particularly troublesome codebase or a project or organization resistant
    to refactoring. This book will help you make the case for refactoring, ensure
    you can do it safely, and give you alternatives to all-or-nothing approaches of
    complete rewrites.
  prefs: []
  type: TYPE_NORMAL
- en: This book also features a number of libraries and language features you may
    not have encountered or thought about recently. I hope that this book gives you
    new perspectives, tools, and techniques that will aid you as you refactor your
    code and build a better codebase.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B21324_01.xhtml#_idTextAnchor015), *Technical Debt, Code Smells,
    and Refactoring*, introduces the reader to the concept of technical debt and the
    things that cause it. The chapter covers legacy code and its impact on the development
    process and code smells that help you find it. The chapter closes with the idea
    of refactoring, which is the focus of the rest of the book.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B21324_02.xhtml#_idTextAnchor026), *Introduction to Refactoring*,
    illustrates the process of refactoring C# code in Visual Studio by taking a sample
    piece of code and progressively refining it with built-in refactorings and custom
    actions.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B21324_03.xhtml#_idTextAnchor045), *Refactoring Code Flow and
    Iteration*, focuses on refactoring individual lines and blocks of code. We focus
    on program flow control, object instantiation, handling collections, and using
    LINQ appropriately.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B21324_04.xhtml#_idTextAnchor072), *Refactoring at the Method
    Level*, expands the scope of the previous chapter by refactoring methods and constructors
    to more maintainable forms. Maintaining consistency within the class and building
    small, maintainable methods is a core focus.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B21324_05.xhtml#_idTextAnchor101), *Object-Oriented Refactoring*,
    takes the ideas of the previous refactoring chapters and applies them at the entire
    class level. This shows how introducing interfaces, inheritance, polymorphism,
    and other classes in general can lead to better patterns of code and more maintainable
    software systems.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B21324_06.xhtml#_idTextAnchor133), *Unit Testing*, serves as
    an introduction to unit testing in C#, moving quickly from the idea of a unit
    test to a tour of how to write one in xUnit, NUnit, and MSTest. We also cover
    parameterized tests and unit testing best practices.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B21324_07.xhtml#_idTextAnchor161), *Test-Driven Development*,
    introduces the reader to test-driven development and red/green/refactor by following
    the TDD process to improve code and enact refactorings. Code generation quick
    actions are also discussed here.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B21324_08.xhtml#_idTextAnchor173), *Avoiding Code Anti-Patterns
    with SOLID*, focuses on what makes code good or bad and how common patterns such
    as SOLID, DRY, and KISS can help make your code more resistant to technical debt.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B21324_09.xhtml#_idTextAnchor189), *Advanced Unit Testing*, covers
    a variety of testing libraries for data generation, mocking, pinning existing
    behavior, and safely making changes with A/B tests. We cover Bogus, Fluent Assertions,
    Moq, NSubstitute, Scientist .NET, Shouldly, and Snapper.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B21324_10.xhtml#_idTextAnchor209), *Defensive Coding Techniques*,
    shows off a wide range of C# language features that can make your code more reliable
    and resistant to defects. This chapter covers nullability, validation, immutability,
    record classes, pattern matching, and more.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B21324_11.xhtml#_idTextAnchor236), *AI-Assisted Refactoring
    with GitHub Copilot*, introduces the reader to the latest AI tooling in Visual
    Studio with GitHub Copilot Chat. This chapter shows the reader how to use GitHub
    Copilot Chat to generate code, give refactoring suggestions, write draft documentation,
    and even help test your code. We also stress on data privacy concerns and ways
    of guarding your company’s intellectual property.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B21324_12.xhtml#_idTextAnchor259), *Code Analysis in Visual
    Studio*, highlights the code analyzers built into modern .NET by showing how code
    analysis profiles can help detect issues in your code. We also explore code metrics
    and prioritize technical debt areas using those metrics. The chapter closes by
    looking at the SonarCloud and NDepend tools, which can help track technical debt
    over time.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 13*](B21324_13.xhtml#_idTextAnchor275), *Creating a Roslyn Analyzer*,
    introduces the idea of custom Roslyn Analyzers that can detect issues in your
    code. The chapter guides the reader through writing their first analyzer, unit
    testing it with RoslynTestKit, and deploying it using a Visual Studio extension.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 14*](B21324_14.xhtml#_idTextAnchor297), *Refactoring Code with Roslyn
    Analyzers*, shows how Roslyn Analyzers can also fix the issues they detect. The
    chapter picks up where the previous one left off by expanding the analyzer to
    provide a code fix. We then discuss packaging analyzers in NuGet packages and
    publishing them on NuGet.org or other NuGet feeds.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 15*](B21324_15.xhtml#_idTextAnchor316), *Communicating Technical
    Debt*, covers the systematic process of tracking and reporting technical debt
    in a way that business leaders can understand. We cover many common obstacles
    to refactoring and building a culture of trust and transparency where business
    management can understand the risks that technical debt represents.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 16*](B21324_16.xhtml#_idTextAnchor341), *Adopting Code Standards*,
    talks about the process of determining code standards that are appropriate for
    your development team and getting developer buy-in. The chapter covers code styling
    in Visual Studio, code cleanup profiles, and sharing EditorConfig files to promote
    consistent style choices across your team.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 17*](B21324_17.xhtml#_idTextAnchor354), *Agile Refactoring*, closes
    the book with a discussion of refactoring in agile environments and the unique
    challenges agile can pose to refactoring. We talk about ways of prioritizing and
    paying down technical debt inside of agile sprints. The chapter also covers larger
    projects, such as upgrades and rewrites, and ways to help those larger projects
    succeed.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ideal reader should be familiar with the C# programming language and the
    Visual Studio IDE. Knowledge of object-oriented programming, classes, and LINQ
    will be particularly helpful.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Software/hardware covered in** **the book** | **Operating** **system requirements**
    |'
  prefs: []
  type: TYPE_TB
- en: '| Visual Studio 2022 v17.8 or higher | Windows |'
  prefs: []
  type: TYPE_TB
- en: '| .NET 8 SDK |  |'
  prefs: []
  type: TYPE_TB
- en: This book works with any edition of Visual Studio from 2022 v17.8 onward, including
    Visual Studio Community. You can download Visual Studio from [https://visualstudio.microsoft.com/downloads/](https://visualstudio.microsoft.com/downloads/).
  prefs: []
  type: TYPE_NORMAL
- en: The latest version of the .NET 8 SDK can be downloaded from [https://dotnet.microsoft.com/en-us/download/dotnet/8.0](https://dotnet.microsoft.com/en-us/download/dotnet/8.0).
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are using the digital version of this book, we advise you to type
    the code yourself or access the code from the book’s GitHub repository (a link
    is available in the next section). Doing so will help you avoid any potential
    errors related to the copying and pasting** **of code.**'
  prefs: []
  type: TYPE_NORMAL
- en: Many chapters feature step-by-step instructions that you can follow along with
    by using the beginning code for a chapter to produce the code featured in the
    chapter’s final code folder. You can also keep an eye on other code you work with
    as you read the book and think about how the topics apply to that code. However,
    you may want to refrain from applying your refactoring techniques to real-world
    codebases until you’ve read the chapters covering safely testing your code.
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from GitHub at [https://github.com/PacktPublishing/Refactoring-with-CSharp](https://github.com/PacktPublishing/Refactoring-with-CSharp).
    If there’s an update to the code, it will be updated in the GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`Code in text`: Indicates code words in text, database table names, folder
    names, filenames, file extensions, pathnames, dummy URLs, user input, and Twitter
    handles. Here is an example: “Let’s look again at the `IFlightUpdater` interface
    from earlier.”'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.
    For instance, words in menus or dialog boxes appear in **bold**. Here is an example:
    “Click **Next**, then give your test project a meaningful name and click **Next**
    again.”'
  prefs: []
  type: TYPE_NORMAL
- en: Tips or important notes
  prefs: []
  type: TYPE_NORMAL
- en: Appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '**General feedback**: If you have questions about any aspect of this book,
    email us at [customercare@packtpub.com](http://customercare@packtpub.com) and
    mention the book title in the subject of your message.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/support/errata](http://www.packtpub.com/support/errata)
    and fill in the form.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at [copyright@packt.com](http://copyright@packt.com)
    with a link to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com).'
  prefs: []
  type: TYPE_NORMAL
- en: Share Your Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you’ve read *Refactoring with C#*, we’d love to hear your thoughts! [Please
    click here to go straight to the Amazon review page for this book and share your
    feedback](https://packt.link/r/1835089984).
  prefs: []
  type: TYPE_NORMAL
- en: Your review is important to us and the tech community and will help us make
    sure we’re delivering excellent quality content.
  prefs: []
  type: TYPE_NORMAL
- en: Download a free PDF copy of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thanks for purchasing this book!
  prefs: []
  type: TYPE_NORMAL
- en: Do you like to read on the go but are unable to carry your print books everywhere?
  prefs: []
  type: TYPE_NORMAL
- en: Is your eBook purchase not compatible with the device of your choice?
  prefs: []
  type: TYPE_NORMAL
- en: Don’t worry, now with every Packt book you get a DRM-free PDF version of that
    book at no cost.
  prefs: []
  type: TYPE_NORMAL
- en: Read anywhere, any place, on any device. Search, copy, and paste code from your
    favorite technical books directly into your application.
  prefs: []
  type: TYPE_NORMAL
- en: The perks don’t stop there, you can get exclusive access to discounts, newsletters,
    and great free content in your inbox daily
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these simple steps to get the benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: Scan the QR code or visit the link below
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B21324_QR_Free_PDF.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[https://packt.link/free-ebook/9781835089989](https://packt.link/free-ebook/9781835089989)'
  prefs: []
  type: TYPE_NORMAL
- en: Submit your proof of purchase
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That’s it! We’ll send your free PDF and other benefits to your email directly
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Part 1: Refactoring with C# in Visual Studio'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the first part of the book, we’ll discuss the nature of technical debt, code
    smells, and refactoring. We’ll focus on the mechanical process of refactoring
    C# code in Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this part, you’ll learn how to safely alter the form of your code
    without changing its functionality. We’ll cover high-level concepts and then walk
    through refactoring individual lines of code. After this, we’ll zoom out to refactor
    entire methods and see how they interact with each other. Finally, we’ll look
    at some object-oriented approaches to refactoring that can help truly reshape
    your code by altering how classes interact with each other.
  prefs: []
  type: TYPE_NORMAL
- en: This part of the book can either be read as a traditional book or used as a
    step-by-step tutorial for refactoring the starting code found in each chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part contains the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B21324_01.xhtml#_idTextAnchor015), *Technical Debt, Code Smells,
    and Refactoring*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B21324_02.xhtml#_idTextAnchor026), *Introduction to Refactoring*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B21324_03.xhtml#_idTextAnchor045)*, Refactoring Code Flow and
    Iteration*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B21324_04.xhtml#_idTextAnchor072)*, Refactoring at the Method
    Level*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B21324_05.xhtml#_idTextAnchor101)*, Object-Oriented Refactoring*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
