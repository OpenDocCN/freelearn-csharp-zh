["```cs\nusing UnityEngine.Events;\nusing System.Collections.Generic;\n\nnamespace Chapter.EventBus\n{\n    public class RaceEventBus\n    {\n        private static readonly \n            IDictionary<RaceEventType, UnityEvent> \n            Events = new Dictionary<RaceEventType, UnityEvent>();\n\n        public static void Subscribe(\n            RaceEventType eventType, UnityAction listener)\n        {\n            UnityEvent thisEvent;\n            if (Events.TryGetValue(eventType, out thisEvent))\n            {\n                thisEvent.AddListener(listener);\n            }\n            else\n            {\n                thisEvent = new UnityEvent();\n                thisEvent.AddListener(listener);\n                Events.Add(eventType, thisEvent);\n            }\n        }\n\n        public static void Unsubscribe(\n            RaceEventType eventType, UnityAction listener)\n        {\n            UnityEvent thisEvent;\n            if (Events.TryGetValue(eventType, out thisEvent))\n            {\n                thisEvent.RemoveListener(listener);\n            }\n        }\n\n        public static void Publish(RaceEventType eventType)\n        {\n            UnityEvent thisEvent;\n            if (Events.TryGetValue(eventType, out thisEvent))\n            {\n                thisEvent.Invoke();\n            }\n        }\n    }\n}\n```", "```cs\nusing UnityEngine;\nusing System.Collections;\n\npublic class CountdownTimer : MonoBehaviour\n{\n    public delegate void TimerStarted(); \n    public static event TimerStarted OnTimerStarted;\n\n    public delegate void TimerEnded(); \n    public static event TimerEnded OnTimerEnded;\n\n    [SerializeField]\n    private float duration = 5.0f;\n\n    void Start()\n    {\n        StartCoroutine(StartCountdown());\n    }\n\n    private IEnumerator StartCountdown()\n    {\n        if (OnTimerStarted != null) \n            OnTimerStarted();\n\n        while (duration > 0)\n        {\n            yield return new WaitForSeconds(1f);\n            duration--;\n        }\n\n        if (OnTimerEnded != null) \n            OnTimerEnded();\n    }\n\n    void OnGUI()\n    {\n        GUI.color = Color.blue;\n        GUI.Label(\n            new Rect(125, 0, 100, 20), \"COUNTDOWN: \" + duration)\n    }\n}\n```", "```cs\nusing UnityEngine;\n\npublic class Buzzer : MonoBehaviour\n{\n    void OnEnable()\n    {\n        // Assigning local functions to delegates defined in the \n        // Timer class\n        CountdownTimer.OnTimerStarted += PlayStartBuzzer;\n        CountdownTimer.OnTimerEnded += PlayEndBuzzer;\n    }\n\n    void OnDisable()\n    {\n        CountdownTimer.OnTimerStarted -= PlayStartBuzzer;\n        CountdownTimer.OnTimerEnded -= PlayEndBuzzer;\n    }\n\n    void PlayStartBuzzer()\n    {\n        Debug.Log(\"[BUZZER] : Play start buzzer!\");\n    }\n\n    void PlayEndBuzzer()\n    {\n        Debug.Log(\"[BUZZER] : Play end buzzer!\");\n    }\n}\n```", "```cs\n// <T> can be any type.\npublic class Singleton<T> : MonoBehaviour where T : Component\n{\n    // ...\n}\n```", "```cs\nprivate void SerializePlayerData(PlayerData playerData)\n{\n    // Serializing the PlayerData instance\n    BinaryFormatter bf = new BinaryFormatter();\n    FileStream file = File.Create(Application.persistentDataPath + \n        \"/playerData.dat\");\n    bf.Serialize(file, playerData);\n    file.Close();\n}\n```", "```cs\nusing UnityEngine;\n\n[CreateAssetMenu(fileName = \"NewSword\", menuName = \"Weaponary/Sword\")]\npublic class Sword: ScriptableObject \n{\n    public string swordName;\n    public string swordPrefab;\n}\n```", "```cs\nusing UnityEngine;\nusing System.Collections;\n\npublic class CountdownTimer : MonoBehaviour\n{\n    private float _duration = 10.0f;\n\n    IEnumerator Start()\n    {\n        Debug.Log(\"Timer Started!\");\n        yield return StartCoroutine(WaitAndPrint(1.0F));\n        Debug.Log(\"Timer Ended!\");\n    }\n\n    IEnumerator WaitAndPrint(float waitTime)\n    {\n        while (Time.time < _duration)\n        {\n            yield return new WaitForSeconds(waitTime);\n            Debug.Log(\"Seconds: \" + Mathf.Round(Time.time));\n        }\n    }\n}\n```"]