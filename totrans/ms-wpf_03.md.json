["```cs\npublic virtual event PropertyChangedEventHandler PropertyChanged; \n\nprotected virtual void NotifyPropertyChanged(string propertyName) \n{ \n  if (PropertyChanged != null)  \n    PropertyChanged(this, new PropertyChangedEventArgs(propertyName)); \n} \n```", "```cs\nPropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName)); \n```", "```cs\nprivate string name = string.Empty; \n\npublic string Name \n{ \n  get { return name; } \n  set \n  { \n    if (name != value) \n    { \n      name = value; \n      NotifyPropertyChanged(\"Name\"); \n    } \n  } \n} \n```", "```cs\nprotected virtual void NotifyPropertyChanged( \n  [CallerMemberName]string propertyName = \"\") \n{ \n  PropertyChanged?.Invoke(this, \n    new PropertyChangedEventArgs(propertyName)); \n} \n```", "```cs\npublic string Name \n{ \n  get { return name; } \n  set { if (name != value) { name = value; NotifyPropertyChanged(); } } \n} \n```", "```cs\nNotifyPropertyChanged(nameof(Name)); \n```", "```cs\npublic decimal Total \n{ \n  get { return Price * Quantity; } \n} \n```", "```cs\nprotected void NotifyPropertyChanged(params string[] propertyNames) \n{ \n  if (PropertyChanged != null) \n  { \n    foreach (string propertyName in propertyNames) \n    { \n      PropertyChanged(this, new PropertyChangedEventArgs(propertyName)); \n    } \n  } \n} \n```", "```cs\nprivate decimal price = 0M; \n\npublic decimal Price \n{ \n  get { return price; } \n  set  \n  {  \n    if (price != value)  \n    { \n      price = value;  \n      NotifyPropertyChanged(nameof(Price), nameof(Total));  \n    } \n  } \n} \n```", "```cs\nusing System.ComponentModel; \nusing System.Runtime.CompilerServices;\nnamespace CompanyName.ApplicationName.ViewModels \n{ \n  public class BaseViewModel : INotifyPropertyChanged \n  { \n    #region INotifyPropertyChanged Members \n\n    public event PropertyChangedEventHandler PropertyChanged; \n\n    protected virtual void NotifyPropertyChanged(\n      params string[] propertyNames) \n    { \n      if (PropertyChanged != null) \n      { \n        foreach (string propertyName in propertyNames)  \n        { \n          PropertyChanged(this, \n            new PropertyChangedEventArgs(propertyName)); \n        } \n      } \n    } \n\n    protected virtual void NotifyPropertyChanged( \n      [CallerMemberName]string propertyName = \"\") \n    { \n      PropertyChanged?.Invoke(this, \n        new PropertyChangedEventArgs(propertyName)); \n    } \n\n    #endregion \n  } \n} \n```", "```cs\nusing System; \nusing System.ComponentModel;\nusing System.Runtime.CompilerServices;\n\nnamespace CompanyName.ApplicationName.DataModels \n{ \n  public class BaseDataModel : INotifyPropertyChanged \n  { \n    private DateTime createdOn; \n    private DateTime? updatedOn; \n    private User createdBy, updatedBy; \n\n    public DateTime CreatedOn \n    { \n      get { return createdOn; } \n      set { createdOn = value; NotifyPropertyChanged(); } \n    } \n\n    public User CreatedBy \n    { \n      get { return createdBy; } \n      set { createdBy = value; NotifyPropertyChanged(); } \n    } \n\n    public DateTime? UpdatedOn \n    { \n      get { return updatedOn; } \n      set { updatedOn = value; NotifyPropertyChanged(); } \n    } \n\n    public User UpdatedBy \n    { \n      get { return updatedBy; } \n      set { updatedBy = value; NotifyPropertyChanged(); } \n    } \n\n    #region INotifyPropertyChanged Members \n\n    ...\n\n    #endregion \n  } \n} \n```", "```cs\nusing System; \n\nnamespace CompanyName.ApplicationName.DataModels.Interfaces \n{ \n  public interface IAuditable \n  { \n    DateTime CreatedOn { get; set; } \n\n    User CreatedBy { get; set; } \n\n    DateTime? UpdatedOn { get; set; } \n\n    User UpdatedBy { get; set; } \n  } \n} \n```", "```cs\nusing System; \nusing CompanyName.ApplicationName.DataModels.Interfaces; \n\nnamespace CompanyName.ApplicationName.DataModels \n{ \n  public class Invoice : BaseDataModel, IAuditable \n  { \n    private DateTime createdOn; \n    private DateTime? updatedOn; \n    private User createdBy, updatedBy; \n\n    public DateTime CreatedOn \n    { \n      get { return createdOn; } \n      set { createdOn = value; NotifyPropertyChanged(); } \n    } \n\n    public User CreatedBy \n    { \n      get { return createdBy; } \n      set { createdBy = value; NotifyPropertyChanged(); } \n    } \n\n    public DateTime? UpdatedOn \n    { \n      get { return updatedOn; } \n      set { updatedOn = value; NotifyPropertyChanged(); } \n    } \n\n    public User UpdatedBy \n    { \n      get { return updatedBy; } \n      set { updatedBy = value; NotifyPropertyChanged(); } \n    } \n  } \n} \n```", "```cs\npublic interface IAuditable \n{ \n  Auditable Auditable { get; set; } \n} \n```", "```cs\npublic class User : IAuditable \n{ \n  private Auditable auditable; \n\n  public Auditable Auditable \n  { \n    get { return auditable; } \n    set { auditable = value; } \n  } \n\n  ... \n} \n```", "```cs\nforeach (IAuditable user in Users) \n{ \n  Report.AddLine($\"Created on {user.Auditable.CreatedOn}\" by\n    {user.Auditable.CreatedBy.Name});\n}\n```", "```cs\nList<IAuditable> auditableObjects = GetAuditableObjects(); \nforeach (IAuditable user in auditableObjects) \n{ \n  Report.AddLine($\"Created on {user.Auditable.CreatedOn}\" by\n    {user.Auditable.CreatedBy.Name});\n} \n```", "```cs\nList<BaseSynchronizableDataModel> baseDataModels = GetBaseDataModels();\nforeach (BaseSynchronizableDataModel baseDataModel in baseDataModels) \n{ \n  if (baseDataModel.HasChanges)  \n    FeedbackManager.Add(baseDataModel.PropertyChanges); \n} \n```", "```cs\nusing System; \nusing System.Collections.Generic; \n\nnamespace CompanyName.ApplicationName.Extensions \n{ \n  public static class IEnumerableExtensions \n  { \n    public static void ForEach<T>(this IEnumerable<T> collection,\n      Action<T> action) \n    { \n      foreach (T item in collection) action(item); \n    } \n  } \n} \n```", "```cs\nIEnumerableExtensions.ForEach(collection, i => i.RevertState()); \n```", "```cs\ncollection.ForEach(i => i.PerformAction()); \n```", "```cs\npublic static IEnumerable<TSource> DistinctBy<TSource, TKey>( \n  this IEnumerable<TSource> source, Func<TSource, TKey> keySelector) \n{ \n  HashSet<TKey> keys = new HashSet<TKey>(); \n  foreach (TSource element in source) \n  { \n    if (keys.Add(keySelector(element))) yield return element; \n  } \n} \n```", "```cs\nIEnumerable<User> distinctUsers = Users.DistinctBy(u => u.Id);\n```", "```cs\nIEnumerable<User> distinctUsers = Users.DistinctBy((User user) => user.Id);\n```", "```cs\nusing System;\nusing System.ComponentModel;\nusing System.Reflection;\n\nnamespace CompanyName.ApplicationName.Extensions \n{ \n  public static class EnumExtensions \n  { \n    public static string GetDescription(this Enum value) \n    { \n      FieldInfo fieldInfo = value.GetType().GetField(value.ToString()); \n      if (fieldInfo == null) return Enum.GetName(value.GetType(), value); \n      DescriptionAttribute[] attributes = (DescriptionAttribute[])\n        fieldInfo.GetCustomAttributes(typeof(DescriptionAttribute), false); \n      if (attributes != null && attributes.Length > 0)  \n        return attributes[0].Description; \n      return Enum.GetName(value.GetType(), value); \n    } \n  } \n} \n```", "```cs\npublic static int Count(this IEnumerable collection) \n{ \n  int count = 0; \n  foreach (object item in collection) count++; \n  return count; \n} \n```", "```cs\n<UserControl   \n  x:Class=\"CompanyName.ApplicationName.Views.Controls.FolderPathEditField\" \n\n  > \n  <TextBox Name=\"FolderPathTextBox\" \n    Text=\"{Binding FolderPath, RelativeSource={RelativeSource \n    AncestorType={x:Type Controls:FolderPathEditField}}, FallbackValue='', \n    UpdateSourceTrigger=PropertyChanged}\" Cursor=\"Arrow\" \n    PreviewMouseLeftButtonUp=\"TextBox_PreviewMouseLeftButtonUp\" /> \n</UserControl> \n```", "```cs\nusing System; \nusing System.Windows; \nusing System.Windows.Controls; \nusing System.Windows.Input; \nusing FolderBrowserDialog = System.Windows.Forms.FolderBrowserDialog; \n\nnamespace CompanyName.ApplicationName.Views.Controls \n{ \n  public partial class FolderPathEditField : UserControl \n  { \n    public FolderPathEditField() \n    { \n      InitializeComponent(); \n    } \n\n    public static readonly DependencyProperty FolderPathProperty =       \n      DependencyProperty.Register(nameof(FolderPath),        \n      typeof(string), typeof(FolderPathEditField), \n      new FrameworkPropertyMetadata(string.Empty, \n      FrameworkPropertyMetadataOptions.BindsTwoWayByDefault)); \n\n    public string FolderPath \n    { \n      get { return (string)GetValue(FolderPathProperty); } \n      set { SetValue(FolderPathProperty, value); } \n    } \n\n    public static readonly DependencyProperty OpenFolderTitleProperty =       \n      DependencyProperty.Register(nameof(OpenFolderTitle), \n      typeof(string), typeof(FolderPathEditField), \n      new FrameworkPropertyMetadata(string.Empty, \n      FrameworkPropertyMetadataOptions.BindsTwoWayByDefault)); \n\n    public string OpenFolderTitle \n    { \n      get { return (string)GetValue(OpenFolderTitleProperty); } \n      set { SetValue(OpenFolderTitleProperty, value); } \n    } \n\n    private void TextBox_PreviewMouseLeftButtonUp(object sender,  \n      MouseButtonEventArgs e) \n    { \n      if (((TextBox)sender).SelectedText.Length == 0 &&  \n        e.GetPosition(this).X <= ((TextBox)sender).ActualWidth -  \n        SystemParameters.VerticalScrollBarWidth)  \n        ShowFolderPathEditWindow(); \n    } \n\n    private void ShowFolderPathEditWindow() \n    { \n      string defaultFolderPath = string.IsNullOrEmpty(FolderPath) ?         \n        Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments)  \n        : FolderPath; \n      string folderPath = ShowFolderBrowserDialog(defaultFolderPath); \n      if (string.IsNullOrEmpty(folderPath)) return; \n      FolderPath = folderPath; \n    } \n\n    private string ShowFolderBrowserDialog(string defaultFolderPath) \n    { \n      using (FolderBrowserDialog folderBrowserDialog = \n        new FolderBrowserDialog())\n      {\n        folderBrowserDialog.Description = OpenFolderTitle;\n        folderBrowserDialog.ShowNewFolderButton = true;\n        folderBrowserDialog.SelectedPath = defaultFolderPath;\n        folderBrowserDialog.ShowDialog();\n        return folderBrowserDialog.SelectedPath;\n      }\n    }\n  }\n} \n```", "```cs\nusing System.Windows; \nusing System.Windows.Data; \n\nnamespace CompanyName.ApplicationName.Converters \n{ \n  public abstract class BaseVisibilityConverter \n  { \n    public enum FalseVisibility { Hidden, Collapsed } \n\n    protected Visibility FalseVisibilityValue { get; set; } = \n      Visibility.Collapsed; \n\n    public FalseVisibility FalseVisibilityState \n    { \n      get { return FalseVisibilityState == Visibility.Collapsed ?              \n        FalseVisibility.Collapsed : FalseVisibility.Hidden; }\n      set { FalseVisibilityState = value == FalseVisibility.Collapsed ?\n        Visibility.Collapsed : Visibility.Hidden; } \n    } \n\n    public bool IsInverted { get; set; } \n  } \n} \n```", "```cs\nusing System; \nusing System.Globalization; \nusing System.Windows; \nusing System.Windows.Data; \n\nnamespace CompanyName.ApplicationName.Converters \n{ \n  [ValueConversion(typeof(bool), typeof(Visibility))] \n  public class BoolToVisibilityConverter : BaseVisibilityConverter,  \n    IValueConverter \n  { \n    public object Convert(object value, Type targetType,  \n      object parameter, CultureInfo culture) \n    { \n      if (value == null || value.GetType() != typeof(bool))  \n        return DependencyProperty.UnsetValue; \n      bool boolValue = IsInverted ? !(bool)value :(bool)value;\n      return boolValue ? Visibility.Visible : FalseVisibilityValue; \n    } \n\n    public object ConvertBack(object value, Type targetType,  \n      object parameter, CultureInfo culture) \n    { \n      if (value == null || value.GetType() != typeof(Visibility))  \n        return DependencyProperty.UnsetValue; \n      if (IsInverted) return (Visibility)value != Visibility.Visible; \n      return (Visibility)value == Visibility.Visible; \n    } \n  } \n} \n```", "```cs\nxmlns:Converters=\"clr-namespace:CompanyName.ApplicationName.Converters; \n  assembly=CompanyName.ApplicationName.Converters\" \n... \n<Converters:BoolToVisibilityConverter x:Key=\"BoolToVisibilityConverter\" /> \n<Converters:BoolToVisibilityConverter  \n  x:Key=\"InvertedBoolToVisibilityConverter\" IsInverted=\"True\" /> \n```", "```cs\nusing System; \nusing System.Globalization; \nusing System.Windows; \nusing System.Windows.Data; \n\nnamespace CompanyName.ApplicationName.Converters \n{ \n  [ValueConversion(typeof(Enum), typeof(Visibility))] \n  public class EnumToVisibilityConverter : BaseVisibilityConverter,  \n    IValueConverter\n  { \n    public object Convert(object value, Type targetType,  \n      object parameter, CultureInfo culture) \n    { \n      if (value == null || (value.GetType() != typeof(Enum) &&     \n        value.GetType().BaseType != typeof(Enum)) ||  \n        parameter == null) return DependencyProperty.UnsetValue; \n      string enumValue = value.ToString(); \n      string targetValue = parameter.ToString(); \n      bool boolValue = enumValue.Equals(targetValue,  \n        StringComparison.InvariantCultureIgnoreCase); \n      boolValue = IsInverted ? !boolValue : boolValue; \n      return boolValue ? Visibility.Visible : FalseVisibilityValue; \n    } \n\n    public object ConvertBack(object value, Type targetType,  \n      object parameter, CultureInfo culture) \n    { \n      if (value == null || value.GetType() != typeof(Visibility) ||\n        parameter == null) return DependencyProperty.UnsetValue; \n      Visibility usedValue = (Visibility)value; \n      string targetValue = parameter.ToString(); \n      if (IsInverted && usedValue != Visibility.Visible)  \n        return Enum.Parse(targetType, targetValue); \n      else if (!IsInverted && usedValue == Visibility.Visible)  \n        return Enum.Parse(targetType, targetValue); \n      return DependencyProperty.UnsetValue; \n    } \n  } \n} \n```", "```cs\nnamespace CompanyName.ApplicationName.DataModels.Enums \n{ \n  public enum FeedbackType \n  { \n    None = -1, \n    Error, \n    Information, \n    Question, \n    Success, \n    Validation, \n    Warning \n  } \n} \n```", "```cs\nusing CompanyName.ApplicationName.DataModels.Enums;\nusing System; \nusing System.Globalization; \nusing System.Windows; \nusing System.Windows.Data; \nusing System.Windows.Media; \n\nnamespace CompanyName.ApplicationName.Converters \n{ \n  [ValueConversion(typeof(FeedbackType), typeof(ImageSource))] \n  public class FeedbackTypeToImageSourceConverter : IValueConverter \n  { \n    public object Convert(object value, Type targetType,  \n      object parameter, CultureInfo culture) \n    { \n      if (!(value is FeedbackType feedbackType) || \n        targetType != typeof(ImageSource)) \n        return DependencyProperty.UnsetValue; \n      string imageName = string.Empty; \n      switch ((FeedbackType)value) \n      { \n        case FeedbackType.None: return null; \n        case FeedbackType.Error: imageName = \"Error_16\"; break;\n        case FeedbackType.Success: imageName = \"Success_16\"; break; \n        case FeedbackType.Validation:\n        case FeedbackType.Warning: imageName = \"Warning_16\"; break; \n        case FeedbackType.Information: imageName = \"Information_16\"; break; \n        case FeedbackType.Question: imageName = \"Question_16\"; break; \n        default: return DependencyProperty.UnsetValue; \n      } \n      return $\"pack://application:,,,/CompanyName.ApplicationName; \n        component/Images/{ imageName }.png\"; \n    } \n\n    public object ConvertBack(object value, Type targetType,  \n      object parameter, CultureInfo culture) \n    { \n      return DependencyProperty.UnsetValue; \n    } \n  } \n} \n```", "```cs\nusing System.ComponentModel;\n\npublic enum BitRate \n{ \n  [Description(\"16 bits\")] \n  Sixteen = 16, \n  [Description(\"24 bits\")] \n  TwentyFour = 24, \n  [Description(\"32 bits\")] \n  ThirtyTwo = 32, \n} \n```", "```cs\nusing System; \nusing System.Globalization; \nusing System.Windows; \nusing System.Windows.Data; \nusing CompanyName.ApplicationName.Extensions; \n\nnamespace CompanyName.ApplicationName.Converters \n{ \n  [ValueConversion(typeof(Enum), typeof(string))] \n  public class EnumToDescriptionStringConverter : IValueConverter \n  { \n    public object Convert(object value, Type targetType,  \n      object parameter, CultureInfo culture) \n    { \n      if (value == null || (value.GetType() != typeof(Enum) &&  \n        value.GetType().BaseType != typeof(Enum)))  \n        return DependencyProperty.UnsetValue; \n      Enum enumInstance = (Enum)value; \n      return enumInstance.GetDescription(); \n    } \n\n    public object ConvertBack(object value, Type targetType,  \n      object parameter, CultureInfo culture) \n    { \n      return DependencyProperty.UnsetValue; \n    } \n  } \n} \n```", "```cs\npublic abstract class BaseSynchronizableDataModel : BaseDataModel \n{ \n  private BaseSynchronizableDataModel originalState; \n\n  public BaseSynchronizableDataModel OriginalState\n  { \n    get { return originalState; } \n    private set { originalState = value; } \n  } \n} \n```", "```cs\npublic abstract class BaseSynchronizableDataModel<T> : BaseDataModel \n{ \n  private T originalState; \n\n  public T OriginalState \n  { \n    get { return originalState; } \n    private set { originalState = value; } \n  } \n} \n```", "```cs\npublic abstract void CopyValuesFrom(BaseSynchronizableDataModel dataModel); \n\npublic virtual BaseSynchronizableDataModel Clone() \n{\n  BaseSynchronizableDataModel clone = \n    Activator.CreateInstance(this.GetType()) as BaseSynchronizableDataModel;\n  clone.CopyValuesFrom(this);\n  return clone;\n}\n\npublic abstract bool PropertiesEqual(BaseSynchronizableDataModel dataModel);\n```", "```cs\npublic abstract void CopyValuesFrom(T dataModel); \n\npublic virtual T Clone() \n{ \n  T clone = new T(); \n  clone.CopyValuesFrom(this as T); \n  return clone; \n} \n\npublic abstract bool PropertiesEqual(T dataModel); \n```", "```cs\npublic bool HasChanges \n{ \n  get { return originalState != null && !PropertiesEqual(originalState); } \n} \n\npublic void Synchronize() \n{ \n  originalState = this.Clone(); \n  NotifyPropertyChanged(nameof(HasChanges)); \n} \n\npublic void RevertState() \n{ \n  Debug.Assert(originalState != null, \"Object not yet synchronized.\"); \n  CopyValuesFrom(originalState); \n  Synchronize(); \n  NotifyPropertyChanged(nameof(HasChanges)); \n} \n```", "```cs\npublic override bool PropertiesEqual(BaseClass genreObject) \n{\n  Genre genre = genreObject as Genre;\n  if (genre == null) return false; \n  return Name == genre.Name && Description == genre.Description; \n} \n\npublic override void CopyValuesFrom(BaseClass genreObject) \n{ \n  Debug.Assert(genreObject.GetType() == typeof(Genre), \"You are using  \n    the wrong type with this method.\"); \n  Genre genre = (Genre)genreObject; \n  Name = genre.Name; \n  Description = genre.Description; \n} \n```", "```cs\npublic override bool PropertiesEqual(Genre genre) \n{ \n  return Name == genre.Name && Description == genre.Description; \n} \n\npublic override void CopyValuesFrom(Genre genre) \n{ \n  Name = genre.Name; \n  Description = genre.Description; \n} \n```", "```cs\n#region INotifyPropertyChanged Members \n\nprotected override void NotifyPropertyChanged( \n  params string[] propertyNames) \n{ \n  if (PropertyChanged != null) \n  { \n    foreach (string propertyName in propertyNames) \n    { \n      if (propertyName != nameof(HasChanges)) PropertyChanged(this,  \n        new PropertyChangedEventArgs(propertyName)); \n    } \n    PropertyChanged(this, \n      new PropertyChangedEventArgs(nameof(HasChanges))); \n  } \n} \n\nprotected override void NotifyPropertyChanged( \n  [CallerMemberName]string propertyName = \"\") \n{ \n  if (PropertyChanged != null) \n  { \n    if (propertyName != nameof(HasChanges)) PropertyChanged(this, \n      new PropertyChangedEventArgs(propertyName)); \n    PropertyChanged(this, \n      new PropertyChangedEventArgs(nameof(HasChanges))); \n  } \n} \n\n#endregion \n```", "```cs\npublic class Users : ObservableCollection<User> \n```", "```cs\npublic class Users : BaseCollection<User> \n```", "```cs\nusing System.Collections.Generic; \nusing System.Collections.ObjectModel; \nusing System.ComponentModel; \nusing System.Linq; \nusing System.Runtime.CompilerServices; \nusing CompanyName.ApplicationName.Extensions; \n\nnamespace CompanyName.ApplicationName.DataModels.Collections \n{ \n  public class BaseCollection<T> :  \n    ObservableCollection<T>, INotifyPropertyChanged \n    where T : class, INotifyPropertyChanged, new() \n  { \n    protected T currentItem; \n\n    public BaseCollection(IEnumerable<T> collection) : this() \n    { \n      foreach (T item in collection) Add(item); \n    } \n\n    public BaseCollection(params T[] collection) :  \n      this(collection as IEnumerable<T>) { } \n\n    public BaseCollection() : base() \n    { \n      currentItem = new T(); \n    } \n\n    public virtual T CurrentItem \n    { \n      get { return currentItem; } \n      set \n      { \n        T oldCurrentItem = currentItem; \n        currentItem = value; \n        CurrentItemChanged?.Invoke(oldCurrentItem, currentItem); \n        NotifyPropertyChanged(); \n      } \n    } \n\n    public bool IsEmpty \n    { \n      get { return !this.Any(); } \n    } \n\n    public delegate void ItemPropertyChanged(T item,  \n      string propertyName); \n\n    public virtual ItemPropertyChanged CurrentItemPropertyChanged  \n      { get; set; } \n\n    public delegate void CurrentItemChange(T oldItem, T newItem);\n\n    public virtual CurrentItemChange CurrentItemChanged { get; set; } \n\n    public T GetNewItem() \n    { \n      return new T(); \n    } \n\n    public virtual void AddEmptyItem() \n    { \n      Add(new T()); \n    } \n\n    public virtual void Add(IEnumerable<T> collection) \n    { \n      collection.ForEach(i => base.Add(i)); \n    } \n\n    public virtual void Add(params T[] items) \n    { \n      if (items.Length == 1) base.Add(items[0]); \n      else Add(items as IEnumerable<T>); \n    } \n\n    protected override void InsertItem(int index, T item) \n    { \n      if (item != null) \n      { \n        item.PropertyChanged += Item_PropertyChanged; \n        base.InsertItem(index, item); \n        if (Count == 1) CurrentItem = item; \n      } \n    } \n\n    protected override void SetItem(int index, T item) \n    { \n      if (item != null) \n      { \n        item.PropertyChanged += Item_PropertyChanged; \n        base.SetItem(index, item); \n        if (Count == 1) CurrentItem = item; \n      } \n    } \n\n    protected override void ClearItems() \n    { \n      foreach (T item in this)  \n        item.PropertyChanged -= Item_PropertyChanged; \n      base.ClearItems(); \n    } \n\n    protected override void RemoveItem(int index) \n    { \n      T item = this[index]; \n      if (item != null) item.PropertyChanged -= Item_PropertyChanged; \n      base.RemoveItem(index); \n    } \n\n    public void ResetCurrentItemPosition() \n    { \n      if (this.Any()) CurrentItem = this.First(); \n    } \n\n    private void Item_PropertyChanged(object sender,  \n      PropertyChangedEventArgs e) \n    { \n      if ((sender as T) == CurrentItem) \n        CurrentItemPropertyChanged?.Invoke(currentItem, e.PropertyName); \n      NotifyPropertyChanged(e.PropertyName); \n    } \n\n    #region INotifyPropertyChanged Members \n\n    ... \n\n    #endregion \n  } \n} \n```", "```cs\npublic class BaseSynchronizableCollection<T> : BaseCollection<T>  \n  where T : BaseSynchronizableDataModel<T> \n```", "```cs\npublic abstract class BaseSynchronizableDataModel<T> : \n  BaseDataModel, ISynchronizableDataModel<T> \n  where T : BaseDataModel, ISynchronizableDataModel<T>, new() \n```", "```cs\npublic class BaseSynchronizableCollection<T> : BaseCollection<T>  \n  where T : class, ISynchronizableDataModel<T>, new() \n```", "```cs\nusing System.Collections.Generic; \nusing System.ComponentModel; \nusing System.Linq; \nusing CompanyName.ApplicationName.DataModels.Interfaces; \nusing CompanyName.ApplicationName.Extensions; \n\nnamespace CompanyName.ApplicationName.DataModels.Collections \n{ \n  public class BaseSynchronizableCollection<T> : BaseCollection<T>  \n    where T : class, ISynchronizableDataModel<T>,  \n    INotifyPropertyChanged, new() \n  { \n    public BaseSynchronizableCollection(IEnumerable<T> collection) :  \n      base(collection) { } \n\n    public BaseSynchronizableCollection(params T[] collection) :  \n      base(collection as IEnumerable<T>) { } \n\n    public BaseSynchronizableCollection() : base() { } \n\n    public virtual bool HasChanges \n    { \n      get { return this.Any(i => i.HasChanges); } \n    } \n\n    public virtual bool AreSynchronized \n    { \n      get { return this.All(i => i.IsSynchronized); } \n    } \n\n    public virtual IEnumerable<T> ChangedCollection \n    { \n      get { return this.Where(i => i.HasChanges); } \n    } \n\n    public virtual void Synchronize() \n    { \n      this.ForEach(i => i.Synchronize()); \n    } \n\n    public virtual void RevertState() \n    { \n      this.ForEach(i => i.RevertState()); \n    } \n  } \n} \n```", "```cs\npublic virtual ICommand Refresh \n{ \n  get \n  { \n    return new ActionCommand(action => RefreshData(),  \n      canExecute => CanRefreshData());  \n  } \n} \n\nprotected abstract void RefreshData(); \n\nprotected abstract bool CanRefreshData(); \n```", "```cs\npublic abstract ICommand Save { get; } \n```", "```cs\nprivate EventHandler eventHandler; \n```", "```cs\npublic event EventHandler CanExecuteChanged \n{ \n  add \n  { \n    eventHandler += value; \n    CommandManager.RequerySuggested += value; \n  } \n  remove \n  { \n    eventHandler -= value; \n    CommandManager.RequerySuggested -= value; \n  } \n} \n```", "```cs\npublic void RaiseCanExecuteChanged() \n{ \n  eventHandler?.Invoke(this, new EventArgs()); \n} \n```", "```cs\nprivate ActionCommand saveCommand = null; \n\n...\n\npublic ICommand SaveCommand \n{ \n  get { return saveCommand ?? (saveCommand =  \n    new ActionCommand(action => Save(), canExecute => CanSave())); } \n} \n```", "```cs\nprivate void ExecuteSomeCommand() \n{ \n  // Perform some operation that fulfills the canExecute condition\n  // then raise the CanExecuteChanged event of the ActionCommand \n  saveCommand.RaiseCanExecuteChanged(); \n} \n```", "```cs\npublic T AddNewDataTypeToCollection<S, T>(S collection)  \n  where S : BaseSynchronizableCollection<T> \n  where T : BaseSynchronizableDataModel<T>, new() \n{ \n  T item = collection.GetNewItem(); \n  if (item is IAuditable)\n    ((IAuditable)item).Auditable.CreatedOn = DateTime.Now; \n  item.Synchronize(); \n  collection.Add(item); \n  collection.CurrentItem = item; \n  return item; \n} \n\npublic T InsertNewDataTypeToCollection<S, T>(int index, S collection)  \n  where S : BaseSynchronizableCollection<T>  \n  where T : BaseSynchronizableDataModel<T>, new() \n{ \n  T item = collection.GetNewItem(); \n  if (item is IAuditable)  \n    ((IAuditable)item).Auditable.CreatedOn = DateTime.Now; \n  item.Synchronize(); \n  collection.Insert(index, item); \n  collection.CurrentItem = item; \n  return item; \n} \n\npublic void RemoveDataTypeFromCollection<S, T>(S collection, T item)  \n  where S : BaseSynchronizableCollection<T>  \n  where T : BaseSynchronizableDataModel<T>, new() \n{ \n  int index = collection.IndexOf(item); \n  collection.RemoveAt(index); \n  if (index > collection.Count) index = collection.Count; \n  else if (index < 0) index++; \n  if (index > 0 && index < collection.Count && \n    collection.CurrentItem != collection[index]) \n    collection.CurrentItem = collection[index]; \n} \n```", "```cs\nusing System; \nusing CompanyName.ApplicationName.DataModels; \n\nnamespace CompanyName.ApplicationName.Models.Interfaces \n{ \n  public interface IDataProvider \n  { \n    User GetUser(Guid id); \n\n    bool SaveUser(User user); \n  } \n} \n```", "```cs\nusing System; \nusing System.Data.Linq; \nusing System.Linq; \nusing CompanyName.ApplicationName.DataModels; \nusing CompanyName.ApplicationName.Models.Interfaces; \n\nnamespace CompanyName.ApplicationName.Models.DataProviders \n{ \n  public class ApplicationDataProvider : IDataProvider \n  { \n    public ApplicationDataContext DataContext \n    { \n      get { return new ApplicationDataContext(); } \n    } \n\n    public User GetUser(Guid id) \n    { \n      DbUser dbUser = DataContext.DbUsers.SingleOrDefault(u => u.Id == id);  \n      if (dbUser == null) return null; \n      return new User(dbUser.Id, dbUser.Name, dbUser.Age); \n    } \n\n    public bool SaveUser(User user) \n    { \n      using (ApplicationDataContext dataContext = DataContext) \n      { \n        DbUser dbUser = \n          dataContext.DbUsers.SingleOrDefault(u => u.Id == user.Id); \n        if (dbUser == null) return false; \n        dbUser.Name = user.Name; \n        dbUser.Age = user.Age; \n        dataContext.SubmitChanges(ConflictMode.FailOnFirstConflict); \n        return true; \n      } \n    } \n  } \n} \n```", "```cs\nusing System; \nusing CompanyName.ApplicationName.DataModels; \nusing CompanyName.ApplicationName.Models.Interfaces; \n\nnamespace Test.CompanyName.ApplicationName.Models.DataProviders \n{ \n  public class MockDataProvider : IDataProvider \n  { \n    public User GetUser(Guid id) \n    { \n      return new User(id, \"James Smith\", 25); \n    } \n\n    public bool SaveUser(User user) \n    { \n      return true; \n    } \n  } \n} \n```", "```cs\nusing System; \nusing CompanyName.ApplicationName.DataModels; \nusing CompanyName.ApplicationName.Models.Interfaces; \n\nnamespace CompanyName.ApplicationName.Models.DataControllers \n{ \n  public class DataController \n  { \n    private IDataProvider dataProvider; \n\n    public DataController(IDataProvider dataProvider) \n    { \n      DataProvider = dataProvider; \n    } \n\n    protected IDataProvider DataProvider \n    { \n      get { return dataProvider; } \n      private set { dataProvider = value; } \n    } \n\n    public User GetUser(Guid id) \n    { \n      return DataProvider.GetUser(id); \n    } \n\n    public bool SaveUser(User user) \n    { \n      return DataProvider.SaveUser(user); \n    } \n  } \n} \n```", "```cs\nDataController dataController = \n  new DataController(new ApplicationDataProvider()); \n```", "```cs\nDataController dataController = new DataController(new MockDataProvider());\n```", "```cs\nusing CompanyName.ApplicationName.DataModels.Interfaces; \n\n... \n\npublic User CurrentUser { get; set; } \n\n... \n\nprivate void SetAuditUpdateFields<T>(T dataModel) where T : IAuditable \n{ \n  dataModel.Auditable.UpdatedOn = DateTime.Now; \n  dataModel.Auditable.UpdatedBy = CurrentUser; \n  return dataModel; \n} \n```", "```cs\npublic bool SaveUser(User user) \n{ \n  return DataProvider.SaveUser(SetAuditUpdateFields(user)); \n} \n```", "```cs\npublic bool AddUser(User user) \n{ \n  return DataProvider.AddUser(SetAuditCreateFields(user)); \n} \n\n... \n\nprivate void SetAuditCreateFields<T>(T dataModel) where T : IAuditable \n{ \n  dataModel.Auditable.CreatedOn = DateTime.Now; \n  dataModel.Auditable.CreatedBy = CurrentUser; \n  return dataModel; \n} \n```", "```cs\npublic DataController(IDataProvider dataProvider, User currentUser) \n{ \n  DataProvider = dataProvider; \n  CurrentUser = currentUser; \n} \n```", "```cs\nprotected DataController Model \n{ \n  get { return new DataController( \n    DependencyManager.Instance.Resolve<IDataProvider>(), \n    StateManager.CurrentUser); } \n} \n```", "```cs\npublic FeedbackManager FeedbackManager \n{ \n  get { return new FeedbackManager(); }  \n} \n```", "```cs\nprivate static StateManager stateManager = new StateManager(); \n\n...\n\npublic static StateManager StateManager \n{ \n  get { return stateManager; }  \n} \n```", "```cs\nnamespace CompanyName.ApplicationName.Managers \n{ \n  public class StateManager \n  { \n    private static StateManager instance; \n\n    private StateManager() { } \n\n    public static StateManager Instance \n    { \n      get { return instance ?? (instance = new StateManager()); } \n    } \n\n    ...\n  } \n} \n```", "```cs\npublic StateManager StateManager \n{ \n  get { return StateManager.Instance; }  \n} \n```", "```cs\nprivate IEmailManager emailManager; \n\n...\n\npublic BaseViewModel(IEmailManager emailManager) \n{ \n  this.emailManager = emailManager; }  \n} \n\n...\n\npublic IEmailManager EmailManager \n{ \n  get { return emailManager; }  \n} \n```", "```cs\nusing System; \nusing System.Collections.Generic; \n\nnamespace CompanyName.ApplicationName.Managers \n{ \n  public class DependencyManager \n  { \n    private static DependencyManager instance; \n    private static Dictionary<Type, Type> registeredDependencies =  \n      new Dictionary<Type, Type>(); \n\n    private DependencyManager() { } \n\n    public static DependencyManager Instance \n    { \n      get { return instance ?? (instance = new DependencyManager()); } \n    } \n\n    public int Count \n    { \n      get { return registeredDependencies.Count; } \n    } \n\n    public void ClearRegistrations() \n    { \n      registeredDependencies.Clear(); \n    } \n\n    public void Register<S, T>() where S : class where T : class  \n    { \n      if (!typeof(S).IsInterface) throw new ArgumentException(\"The S \n        generic type parameter of the Register method must be an\n        interface.\", \"S\"); \n      if (!typeof(S).IsAssignableFrom(typeof(T))) throw  \n        new ArgumentException(\"The T generic type parameter must be a \n        class that implements the interface specified by the S generic\n        type parameter.\", \"T\"); \n      if (!registeredDependencies.ContainsKey(typeof(S)))  \n        registeredDependencies.Add(typeof(S), typeof(T)); \n    } \n\n    public T Resolve<T>() where T : class \n    { \n      Type type = registeredDependencies[typeof(T)]; \n      return Activator.CreateInstance(type) as T; \n    } \n\n    public T Resolve<T>(params object[] args) where T : class \n    { \n      Type type = registeredDependencies[typeof(T)]; \n      if (args == null || args.Length == 0)  \n        return Activator.CreateInstance(type) as T; \n      else return Activator.CreateInstance(type, args) as T; \n    } \n  } \n} \n```", "```cs\nStartupUri=\"MainWindow.xaml\" \n```", "```cs\nStartup=\"App_Startup\" \n```", "```cs\nusing System.Windows; \nusing CompanyName.ApplicationName.Managers; \nusing CompanyName.ApplicationName.ViewModels; \nusing CompanyName.ApplicationName.ViewModels.Interfaces; \n\nnamespace CompanyName.ApplicationName \n{ \n  public partial class App : Application \n  { \n    public void App_Startup(object sender, StartupEventArgs e) \n    { \n      RegisterDependencies(); \n      new MainWindow().Show(); \n    } \n\n    private void RegisterDependencies() \n    { \n      DependencyManager.Instance.ClearRegistrations(); \n      DependencyManager.Instance.Register<IDataProvider,  \n        ApplicationDataProvider>(); \n      DependencyManager.Instance.Register<IEmailManager, EmailManager>(); \n      DependencyManager.Instance.Register<IExcelManager, ExcelManager>(); \n      DependencyManager.Instance.Register<IWindowManager, WindowManager>();\n    } \n  } \n}  \n```", "```cs\nUsersViewModel viewModel =  \n  new UsersViewModel(DependencyManager.Instance.Resolve<IEmailManager>(),\n  DependencyManager.Instance.Resolve<IExcelManager>(),  \n  DependencyManager.Instance.Resolve<IWindowManager>()); \n```", "```cs\nprivate void RegisterMockDependencies() \n{ \n  DependencyManager.Instance.ClearRegistrations(); \n  DependencyManager.Instance.Register<IDataProvider, MockDataProvider>();\n  DependencyManager.Instance.Register<IEmailManager, MockEmailManager>();  \n  DependencyManager.Instance.Register<IExcelManager, MockExcelManager>(); \n  DependencyManager.Instance.Register<IWindowManager, MockWindowManager>(); \n} \n```", "```cs\nusing CompanyName.ApplicationName.DataModels.Enums; \n\nnamespace CompanyName.ApplicationName.Managers.Interfaces \n{ \n  public interface IWindowManager \n  { \n    MessageBoxButtonSelection ShowMessageBox(string message, \n      string title, MessageBoxButton buttons, MessageBoxIcon icon); \n  } \n} \n```", "```cs\nusing System.Windows; \nusing CompanyName.ApplicationName.Managers.Interfaces; \nusing MessageBoxButton =  \n  CompanyName.ApplicationName.DataModels.Enums.MessageBoxButton; \nusing MessageBoxButtonSelection =  \n  CompanyName.ApplicationName.DataModels.Enums.MessageBoxButtonSelection; \nusing MessageBoxIcon =  \n  CompanyName.ApplicationName.DataModels.Enums.MessageBoxIcon; \n\nnamespace CompanyName.ApplicationName.Managers \n{ \n  public class WindowManager : IWindowManager \n  { \n    public MessageBoxButtonSelection ShowMessageBox(string message,  \n      string title, MessageBoxButton buttons, MessageBoxIcon icon) \n    { \n      System.Windows.MessageBoxButton messageBoxButtons; \n      switch (buttons) \n      { \n        case MessageBoxButton.Ok: messageBoxButtons =  \n          System.Windows.MessageBoxButton.OK; break; \n        case MessageBoxButton.OkCancel: messageBoxButtons =\n          System.Windows. MessageBoxButton.OkCancel; break; \n        case MessageBoxButton.YesNo: messageBoxButtons =  \n          System.Windows.MessageBoxButton.YesNo; break; \n        case MessageBoxButton.YesNoCancel: messageBoxButtons =           \n          System.Windows.MessageBoxButton.YesNoCancel; break; \n        default: messageBoxButtons =\n          System.Windows.MessageBoxButton.OKCancel; break; \n      } \n      MessageBoxImage messageBoxImage; \n      switch (icon) \n      { \n        case MessageBoxIcon.Asterisk:  \n          messageBoxImage = MessageBoxImage.Asterisk; break; \n        case MessageBoxIcon.Error:  \n          messageBoxImage = MessageBoxImage.Error; break; \n        case MessageBoxIcon.Exclamation:  \n          messageBoxImage = MessageBoxImage.Exclamation; break; \n        case MessageBoxIcon.Hand:  \n          messageBoxImage = MessageBoxImage.Hand; break; \n        case MessageBoxIcon.Information:  \n          messageBoxImage = MessageBoxImage.Information; break; \n        case MessageBoxIcon.None:  \n          messageBoxImage = MessageBoxImage.None; break; \n        case MessageBoxIcon.Question:  \n          messageBoxImage = MessageBoxImage.Question; break; \n        case MessageBoxIcon.Stop:           \n          messageBoxImage = MessageBoxImage.Stop; break; \n        case MessageBoxIcon.Warning: \n          messageBoxImage = MessageBoxImage.Warning; break;\n        default: messageBoxImage = MessageBoxImage.Stop; break; \n      } \n      MessageBoxButtonSelection messageBoxButtonSelection =  \n        MessageBoxButtonSelection.None; \n      switch (MessageBox.Show(message, title, messageBoxButtons,\n        messageBoxImage)) \n      { \n        case MessageBoxResult.Cancel: messageBoxButtonSelection =  \n          MessageBoxButtonSelection.Cancel; break; \n        case MessageBoxResult.No: messageBoxButtonSelection =  \n          MessageBoxButtonSelection.No; break; \n        case MessageBoxResult.OK: messageBoxButtonSelection =  \n          MessageBoxButtonSelection.Ok; break; \n        case MessageBoxResult.Yes: messageBoxButtonSelection =  \n          MessageBoxButtonSelection.Yes; break; \n      } \n      return messageBoxButtonSelection; \n    } \n  } \n} \n```", "```cs\nWindowManager.ShowMessageBox(errorMessage, \"Error\", MessageBoxButton.Ok, \n  MessageBoxIcon.Error); \n```", "```cs\nusing CompanyName.ApplicationName.DataModels.Enums; \nusing CompanyName.ApplicationName.Managers.Interfaces; \n\nnamespace Test.CompanyName.ApplicationName.Mocks.Managers \n{ \n  public class MockWindowManager : IWindowManager \n  { \n    public MessageBoxButtonSelection ShowMessageBox(string message,  \n      string title, MessageBoxButton buttons, MessageBoxIcon icon) \n    { \n      switch (buttons) \n      { \n        case MessageBoxButton.Ok: \n        case MessageBoxButton.OkCancel:  \n          return MessageBoxButtonSelection.Ok; \n        case MessageBoxButton.YesNo: \n        case MessageBoxButton.YesNoCancel:  \n          return MessageBoxButtonSelection.Yes; \n        default: return MessageBoxButtonSelection.Ok; \n      } \n    } \n  } \n} \n```", "```cs\npublic partial class MainWindow : Window \n{ \n  public MainWindow() \n  { \n    InitializeComponent(); \n    DataContext = this; \n  } \n} \n```", "```cs\n<DataTemplate DataType=\"{x:Type DataModels:User}\"> \n  <TextBlock Text=\"{Binding Name}\" /> \n</DataTemplate> \n```", "```cs\n<DataTemplate DataType=\"{x:Type ViewModels:UsersViewModel}\"> \n  <Views:UsersView /> \n</DataTemplate> \n```", "```cs\nprivate BaseViewModel viewModel; \n\npublic BaseViewModel ViewModel \n{ \n  get { return viewModel; } \n  set { viewModel = value; NotifyPropertyChanged(); } \n} \n\n... \n\nViewModel = new UserViewModel(); \n\n...\n\n<ContentControl Content=\"{Binding ViewModel}\" /> \n```", "```cs\nDependencyManager.Instance.Register<IUserViewModel, UserViewModel>();\n\n...\n\npublic partial class UserView : UserControl \n{ \n  public UserView() \n  { \n    InitializeComponent(); \n    DataContext = DependencyManager.Instance.Resolve<IUserViewModel>(); \n  } \n} \n\n...\n\n<Views:UsersView /> \n```", "```cs\nusing CompanyName.ApplicationName.Managers; \nusing CompanyName.ApplicationName.ViewModels; \nusing CompanyName.ApplicationName.ViewModels.Interfaces; \n\nnamespace CompanyName.ApplicationName.Views.ViewModelLocators \n{ \n  public class ViewModelLocator \n  { \n    public IUserViewModel UserViewModel \n    { \n      get { return DependencyManager.Instance.Resolve<IUserViewModel>(); } \n    } \n  } \n} \n```", "```cs\n<UserControl x:Class=\"CompanyName.ApplicationName.Views.UserView\" \n\n  xmlns:ViewModelLocators=\"clr-namespace:  \n    CompanyName.ApplicationName.Views.ViewModelLocators\" \n  Height=\"30\" Width=\"300\"> \n  <UserControl.Resources> \n    <ViewModelLocators:ViewModelLocator x:Key=\"ViewModelLocator\" /> \n  </UserControl.Resources> \n  <UserControl.DataContext> \n    <Binding Path=\"UserViewModel\" \n      Source=\"{StaticResource ViewModelLocator}\" /> \n  </UserControl.DataContext> \n  <TextBlock Text=\"{Binding User.Name}\" /> \n</UserControl> \n```", "```cs\npublic bool IsDesignTime \n{ \n  get { return \n    DesignerProperties.GetIsInDesignMode(new DependencyObject()); } \n} \n```", "```cs\nprivate DependencyObject dependencyObject = new DependencyObject(); \n\npublic bool IsDesignTime \n{ \n  get { return DesignerProperties.GetIsInDesignMode(dependencyObject); } \n} \n```", "```cs\nusing System.ComponentModel; \nusing System.Windows; \nusing CompanyName.ApplicationName.Managers; \nusing CompanyName.ApplicationName.ViewModels; \nusing CompanyName.ApplicationName.ViewModels.Interfaces; \n\nnamespace CompanyName.ApplicationName.Views.ViewModelLocators \n{ \n  public class ViewModelLocator : DependencyObject \n  { \n    public bool IsDesignTime \n    { \n      get { return DesignerProperties.GetIsInDesignMode(this); } \n    } \n\n    public IUserViewModel UserViewModel \n    { \n      get \n      { \n        return IsDesignTime ? new MockUserViewModel() :  \n          DependencyManager.Instance.Resolve<IUserViewModel>();  \n      } \n    } \n  } \n} \n```", "```cs\nusing System.ComponentModel; \nusing System.Windows; \nusing CompanyName.ApplicationName.Managers; \n\nnamespace CompanyName.ApplicationName.Views.ViewModelLocators \n{ \n  public abstract class BaseViewModelLocator<T> : DependencyObject  \n    where T : class \n  { \n    private T runtimeViewModel, designTimeViewModel; \n\n    protected bool IsDesignTime \n    { \n      get { return DesignerProperties.GetIsInDesignMode(this); } \n    } \n\n    public T ViewModel \n    { \n      get { return IsDesignTime ?  \n        DesignTimeViewModel : RuntimeViewModel; } \n    } \n\n    protected T RuntimeViewModel \n    { \n      get { return runtimeViewModel ??  \n        (runtimeViewModel = DependencyManager.Instance.Resolve<T>()); } \n    } \n\n    protected T DesignTimeViewModel \n    { \n      set { designTimeViewModel = value; } \n      get { return designTimeViewModel; } \n    } \n  } \n} \n```", "```cs\nusing CompanyName.ApplicationName.ViewModels; \nusing CompanyName.ApplicationName.ViewModels.Interfaces; \n\nnamespace CompanyName.ApplicationName.Views.ViewModelLocators \n{ \n  public class UserViewModelLocator : BaseViewModelLocator<IUserViewModel> \n  { \n    public UserViewModelLocator() \n    { \n      DesignTimeViewModel = new MockUserViewModel(); \n    } \n  } \n} \n```", "```cs\n<UserControl x:Class=\"CompanyName.ApplicationName.Views.UserView\" \n  ... \n  <UserControl.Resources> \n    <Locators:UserViewModelLocator x:Key=\"ViewModelLocator\" /> \n  </UserControl.Resources> \n  <UserControl.DataContext> \n    <Binding Path=\"ViewModel\" Source=\"{StaticResource ViewModelLocator}\" /> \n  </UserControl.DataContext> \n  ... \n</UserControl> \n```", "```cs\n\nmc:Ignorable=\"d\" d:DataContext=\"{Binding ViewModel, \n  Source={StaticResource ViewModelLocator}}\"\n```"]