- en: '19'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Where to Go from Here
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The book is coming to an end, and I want to leave you with some of the things
    we have encountered while running Blazor in production ever since it was in preview.
    We will also talk about where to go from here.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Take-aways from running Blazor in production
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next steps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Take-aways from running Blazor in production
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since Blazor was in preview, we have been running Blazor Server in production.
    In most cases, everything has run without issues. Occasionally, we have encountered
    a few problems, and I will share our take-aways from this with you in this section.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will look at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Solving memory problems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Solving concurrency problems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Solving errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Old browsers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are some of the things we ran into, and we have solved them all in a way
    that works for us.
  prefs: []
  type: TYPE_NORMAL
- en: Solving memory problems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our latest upgrade added many users and, with that, a bigger load on the server.
    The server manages memory quite well, but with this release, the backend system
    was a bit slow, so users would press *F5* to reload a page. Then, the circuit
    would disconnect and a new circuit would be created. The old circuit would wait
    for the user to connect to the server again for 3 minutes (by default).
  prefs: []
  type: TYPE_NORMAL
- en: The user would then have a new circuit and would never connect to the old circuit
    again, but for three minutes, the user’s state would still take up memory. This
    is probably not a problem for most applications, but we are loading a lot of data
    into memory—the data, the render tree, and everything surrounding that will be
    kept in memory.
  prefs: []
  type: TYPE_NORMAL
- en: So, what can we learn from that? Blazor is a single-page application. Reloading
    the page is like restarting an app, which means we should always make sure to
    add the ability to update the data from within the page (if that makes sense for
    the application). We could also update the data as it changes, as we did in *Chapter
    11*, *Managing State – Part 2*.
  prefs: []
  type: TYPE_NORMAL
- en: In our case, we added more memory to the server and then made sure there were
    reload buttons in the UI that refresh the data without reloading the whole page.
    The ultimate goal is to add real-time updates that continuously update the UI
    when the data changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'If adding more memory to the server isn’t an option, we can try to change the
    garbage collection from the server to the desktop. The .NET garbage collection
    has two modes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Workstation** mode is optimized for running on a workstation that typically
    doesn’t have a lot of memory. It runs the garbage collection multiple times per
    second.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Server** mode is optimized for servers where there is usually lots of memory
    and prioritizes speed, meaning it will only run the garbage collector every 2
    seconds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The mode of the garbage collector can be set in the project file or the `runtimeconfig.json`
    file by changing the `ServerGarbageCollection` node:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Adding more memory is probably a better idea, though.
  prefs: []
  type: TYPE_NORMAL
- en: We have also noticed the importance of disposing of our database contexts. Make
    sure to use `IDbContextFactory` to create an instance of the data context and,
    when we are done, dispose of it by using the `Using` keyword.
  prefs: []
  type: TYPE_NORMAL
- en: Then the data context will only be available for a short time and then disposed
    of, freeing up memory fast.
  prefs: []
  type: TYPE_NORMAL
- en: Solving concurrency problems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have often run into problems where the data context was already in use and
    couldn’t access the database from two different threads.
  prefs: []
  type: TYPE_NORMAL
- en: This is solved by using `IDbContextFactory` and disposing of the data context
    when we are finished using it.
  prefs: []
  type: TYPE_NORMAL
- en: In a non-Blazor site, having multiple components to load at the same time is
    never a problem (because the web does one thing at a time), so the fact that Blazor
    can do multiple things at the same time is something we need to think about when
    we design our architecture.
  prefs: []
  type: TYPE_NORMAL
- en: Solving errors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Blazor usually gives us an error that is easy to understand, but in some rare
    cases, we do run into problems that are hard to figure out. We can add detailed
    errors to our circuit (for Blazor Server) by adding the following option in `Startup.cs`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: By doing so, we will get more detailed errors. I don’t recommend using detailed
    errors in a production scenario, however. With that said, we have the setting
    turned on for an internal app in production because the internal users are briefed
    on it and understand how to handle it. It makes it easier for us to help our users,
    and the error message is only visible in the developer tools of the web browser
    and not in the interface of the user.
  prefs: []
  type: TYPE_NORMAL
- en: Old browsers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some of our customers were running old browsers on old systems, and even though
    Blazor supports all major browsers, that support doesn’t include really old browsers.
    We ended up helping those customers upgrade to Edge or Chrome simply because we
    didn’t think they should be browsing the web using browsers that no longer receive
    security patches.
  prefs: []
  type: TYPE_NORMAL
- en: Even our TV at home can run Blazor WebAssembly, so old browsers are probably
    not a big problem, but it can be worth thinking about when it comes to browser
    support. What browsers do we need/want to support?
  prefs: []
  type: TYPE_NORMAL
- en: The next steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, we know the difference between Blazor Server and Blazor WebAssembly,
    and we know when to choose what, and picking one of them is not really that important.
    We know how to create reusable components, make APIs, manage state, and much more.
    But where do we go from here? What are the next steps?
  prefs: []
  type: TYPE_NORMAL
- en: The community
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Blazor community is not as big as other frameworks but is growing fast.
    Many people share content with the community through blogs or videos. YouTube
    and PluralSight have a lot of tutorials and courses. Twitch has a growing amount
    of Blazor content, but it is not always easy to find in the vast content catalog.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a number of resources worth mentioning:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Jimmy Engström** – I wouldn’t be much of a Blazor enthusiast if I didn’t
    make it into my own list. I talk about Blazor and throw in a pun here and there.
    When we stream, we do that using CodingAfterWork (see below). My blog has a lot
    of Blazor content and more to come: [https://engstromjimmy.com/](https://engstromjimmy.com/).
    X: `@EngstromJimmy`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **Blazm** component library that we have written can be found here: [http://blazm.net/](http://blazm.net/).
    There are many better grid components out there, but this shows how easy and yet
    complex a grid component can be.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Coding after Work** has many episodes of our podcast and our stream covering
    Blazor; please follow us on social media: [http://codingafterwork.com/FindUs](http://codingafterwork.com/FindUs).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Daniel Roth** is the PM for Blazor. Amazing to listen to, he has been a guest
    on our podcast. Search for him on YouTube. X: `@danroth27`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Steve Sanderson** is the guy who invented Blazor; he is definitely worth
    a follow. He continues to do groundbreaking things in his talks; search for him
    on YouTube. Make sure to see his NDC Oslo talk where he shows Blazor for the first
    time. X: `@stevensanderson`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Awesome-Blazor** has a huge list of Blazor-related links and resources that
    can be found here: [https://github.com/AdrienTorris/awesome-blazor](https://github.com/AdrienTorris/awesome-blazor).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Jeff Fritz** shares Blazor knowledge (among other things) on Twitch: [https://www.twitch.tv/csharpfritz](https://www.twitch.tv/csharpfritz).
    X: `@csharpfritz`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Chris Sainty** is a fellow author and has made many really amazing packages
    for Blazor. He has lots of content on his blog: [https://chrissainty.com/](https://chrissainty.com/).
    X: `@chris_sainty`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Carl Franklin** has done a lot of Blazor videos on [https://BlazorTrain.com/](https://BlazorTrain.com/).
    X: `@carlfranklin`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**John Hilton** has a lot of Blazor content. You can find him here: [https://jonhilton.net/](https://jonhilton.net/).
    X: `@jonhilt`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Patrick God** has a lot of great content on his YouTube channel: [https://www.youtube.com/@PatrickGod](mailto:https://www.youtube.com/@PatrickGod).
    X: `@_PatrickGod`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**David Pine** is a fellow author and the creator of Blazorators and can be
    found here: [https://github.com/IEvangelist/blazorators](https://github.com/IEvangelist/blazorators).
    X: `@davidpine7`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Peter Morris** is the creator of Fluxor and is a great person to follow.
    X: `@MrPeterLMorris`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Michael Washington** is a fellow author, and we can find him here: [https://adefwebserver.com/](https://adefwebserver.com/).
    X: `@ADefWebserver`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ed Charbeneau** always has great content. Make sure to follow him. [https://edcharbeneau.com/](https://edcharbeneau.com/)
    [https://www.twitch.tv/edcharbeneau](https://www.twitch.tv/edcharbeneau), [https://www.youtube.com/edwardcharbeneau](https://www.youtube.com/edwardcharbeneau),
    [https://www.twitch.tv/codeitlive](https://www.twitch.tv/codeitlive), [https://www.youtube.com/@telerik](mailto:https://www.youtube.com/@telerik).
    X: `@EdCharbeneau`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Eric Johansson** is a regular on Twitch, showing his projects and modernizing
    his .NET Framework apps to a more modern platform [https://www.twitch.tv/thindal](https://www.twitch.tv/thindal)
    X: `@EricJohansson`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Egil Hansen** is the creator of bUnit. We can find him here: [https://egilhansen.com/about/](https://egilhansen.com/about/).
    X: `@egilhansen`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sam Basu** is a great person to follow when it comes to .NET MAUI content.
    [https://www.twitch.tv/codeitlive](https://www.twitch.tv/codeitlive) and [https://www.youtube.com/@telerik](mailto:https://www.youtube.com/@telerik).
    X: `@samidip`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Junichi Sakamoto** has made loads of fantastic Blazor libraries, everything
    from connecting to gamepads to translation and pre-rendering. You can find his
    projects here: [https://github.com/jsakamoto](https://github.com/jsakamoto). X:
    `@jsakamoto`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Blazor University** has a lot of training material and is a great resource
    to learn more: [https://blazor-university.com/](https://blazor-university.com/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Gerald Versluis** has plenty of content on his YouTube channel related to
    all kinds of .NET things: [https://youtube.com/GeraldVersluis](https://youtube.com/GeraldVersluis).
    X: `@jfversluis`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maddy Montaquilla** is amazing to watch; search for her on YouTube to watch
    her videos. X: `@maddymontaquila`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**James Montemagno** has a great YouTube channel with loads of .NET MAUI content:
    [https://www.youtube.com/JamesMontemagno](https://www.youtube.com/JamesMontemagno).
    X: `@JamesMontemagno`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Daniel Hindrikes** has some great .NET MAUI content on this YouTube channel:
    [https://www.youtube.com/@DanielHindrikes](mailto:https://www.youtube.com/@DanielHindrikes).
    X: `@hindrikes`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most third-party component vendors, such as Progress Telerik, DevExpress, Syncfusion,
    Radzen, ComponentOne, and many more, have invested in Blazor. Some cost money
    and some are free. There are also a lot of open-source component libraries that
    we can use.
  prefs: []
  type: TYPE_NORMAL
- en: 'This question comes up a lot: *I am new to Blazor. What third-party vendor
    should I use?* My recommendation is to try to figure out what you need before
    investing in a library (either in terms of money or time).'
  prefs: []
  type: TYPE_NORMAL
- en: Many vendors can do all the things we need, but in some cases, it will take
    a bit more effort to make an app work. We started to work on a grid component
    ourselves, and after a while, we decided to make it open-source.
  prefs: []
  type: TYPE_NORMAL
- en: This is how Blazm was born. We had a few special requirements (nothing fancy),
    but they required us to write a lot of code over and over again to make it work
    in a third-party vendor component.
  prefs: []
  type: TYPE_NORMAL
- en: We learned so much from writing our component, which is really easy to do. My
    recommendation is not always to write your own components. It is much better to
    focus on the actual business problem you are trying to solve.
  prefs: []
  type: TYPE_NORMAL
- en: For us, building a pretty advanced grid component taught us so much about the
    inner workings of Blazor.
  prefs: []
  type: TYPE_NORMAL
- en: Think about what you need and try out the different vendors to see what works
    best for you. Perhaps it would be better to build the component yourself, at least
    in the beginning, to learn more about Blazor.
  prefs: []
  type: TYPE_NORMAL
- en: 'But always look at your code. If you repeat the same code, wrap it in a component.
    Always think: *Could this be a reusable component?*'
  prefs: []
  type: TYPE_NORMAL
- en: We currently use a component vendor, but we wrap all the components in one of
    our components. This way, it is easy to set defaults and add logic that is right
    for us, just as we have learned throughout the book.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we examined some of the challenges we have encountered while
    running Blazor in production and discussed where to go from here.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout the book, we have learned how Blazor works and how to create basic
    and advanced components. We implemented security with both authentication and
    authorization. We created and consumed an API connected to a “database.”
  prefs: []
  type: TYPE_NORMAL
- en: We made JavaScript calls and real-time updates. We debugged our application
    and tested our code, and last but not least, we looked at deploying to production.
  prefs: []
  type: TYPE_NORMAL
- en: We are now ready to apply all this knowledge to the next adventure, another
    app. I hope you have had as much fun reading this book as I have had writing it.
    Being part of the Blazor community is so much fun, and we learn new things every
    day.
  prefs: []
  type: TYPE_NORMAL
- en: Thank you for reading this book. Please stay in touch. I would love to learn
    about the things you build!
  prefs: []
  type: TYPE_NORMAL
- en: '*Welcome to the Blazor community!*'
  prefs: []
  type: TYPE_NORMAL
- en: Join our community on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/WebDevBlazor3e](https://packt.link/WebDevBlazor3e)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code2668029180838459906.png)'
  prefs: []
  type: TYPE_IMG
