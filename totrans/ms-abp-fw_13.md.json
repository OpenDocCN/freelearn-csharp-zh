["```cs\npublic class EventAppService\n    : EventHubAppService, IEventAppService\n{\n    //...\n    public async Task AddSessionAsync(Guid eventId,\n                                      AddSessionDto input)\n    {\n        var @event = \n            await _eventRepository.GetAsync(eventId);\n        @event.AddSession(input.TrackId, input.Title,\n            input.StartTime, input.EndTime);\n        await _eventRepository.UpdateAsync(@event);\n    }\n}\n```", "```cs\npublic class Event : FullAuditedAggregateRoot<Guid>\n{\n    public Organization Organization { get; private set; }\n    public string Title { get; private set; }\n    ...\n}\n```", "```cs\npublic class Event : FullAuditedAggregateRoot<Guid>\n{\n    public Guid OrganizationId { get; private set; }\n    public string Title { get; private set; }\n    ...\n}\n```", "```cs\npublic class Event : FullAuditedAggregateRoot<Guid>\n{\n  ...\n  public ICollection<Track> Tracks { get; set; }\n  public ICollection<EventRegistration> Registrations { \n      get; set; }\n}\npublic class EventRegistration : Entity\n{\n    public Guid EventId { get; set; }\n    public Guid UserId { get; set; }\n}\n```", "```cs\npublic class Speaker : Entity\n{\n    public Guid SessionId { get; private set; }\n    public Guid UserId { get; private set; }\n    public Speaker(Guid sessionId, Guid userId)\n    {\n        SessionId = sessionId;\n        UserId = userId;\n    }\n    public override object[] GetKeys()\n    {\n        return new object[] {SessionId, UserId};\n    }\n}\n```", "```cs\npublic class Country : BasicAggregateRoot<Guid>\n{\n    public string Name { get; private set; }\n    private Country() { } // parameterless constructor\n    public Country(Guid id, string name) \n        //primary constructor\n        : base(id)\n    {\n        Name = Check.NotNullOrWhiteSpace(\n               name, nameof(name),\n               CountryConsts.MaxNameLength);\n    }\n}\n```", "```cs\ninternal Event(\n    Guid id,\n    Guid organizationId,\n    string urlCode,\n    string title,\n    DateTime startTime,\n    DateTime endTime,\n    string description)\n    : base(id)\n{\n    OrganizationId = organizationId;\n    UrlCode = Check.NotNullOrWhiteSpace(urlCode, urlCode,\n              EventConsts.UrlCodeLength,\n              EventConsts.UrlCodeLength);\n\n    SetTitle(title);\n    SetDescription(description);\n    SetTimeInternal(startTime, endTime);    \n    Tracks = new Collection<Track>();\n}\n```", "```cs\npublic Event SetTitle(string title)\n{\n    Title = Check.NotNullOrWhiteSpace(title, nameof(title),\n            EventConsts.MaxTitleLength,\n            EventConsts.MinTitleLength);\n    Url = EventUrlHelper.ConvertTitleToUrlPart(Title) + \"-\" \n          + UrlCode;\n    return this;\n}\n```", "```cs\nprivate Event SetTimeInternal(DateTime startTime, \n                              DateTime endTime)\n{\n    if (startTime > endTime)\n    {\n        throw new BusinessException(EventHubErrorCodes\n            .EventEndTimeCantBeEarlierThanStartTime);\n    }\n    StartTime = startTime;\n    EndTime = endTime;\n    return this;\n}\n```", "```cs\npublic class EventManager : DomainService\n{\n    ...\n    public async Task<Event> CreateAsync(\n        Organization organization,\n        string title,\n        DateTime startTime,\n        DateTime endTime,\n        string description)\n    {\n        return new Event(\n            GuidGenerator.Create(),\n            organization.Id,\n            await _eventUrlCodeGenerator.GenerateAsync(),\n            title,\n            startTime,\n            endTime,\n            description\n        );\n    }\n}\n```", "```cs\npublic class Event : FullAuditedAggregateRoot<Guid>\n{\n    ...\n    public string Description { get; private set; }\n\n    public Event SetDescription(string description)\n    {\n        Description = Check.NotNullOrWhiteSpace(\n            description, nameof(description),\n            EventConsts.MaxDescriptionLength,\n            EventConsts.MinDescriptionLength);\n        return this;\n    }\n}\n```", "```cs\npublic Event AddSession(Guid trackId, Guid sessionId,\n    string title, DateTime startTime, DateTime endTime,\n    string description, string language)\n{\n    if (startTime < this.StartTime || this.EndTime < \n        endTime)\n    {\n        throw new BusinessException(EventHubErrorCodes\n            .SessionTimeShouldBeInTheEventTime);\n    }\n    var track = GetTrack(trackId);\n    track.AddSession(sessionId, title, startTime, endTime,\n                     description, language);\n    return this;\n}\nprivate Track GetTrack(Guid trackId)\n{\n    return Tracks.FirstOrDefault(t => t.Id == trackId) ??\n        throw new EntityNotFoundException(typeof(Track),\n                                          trackId);\n}\n```", "```cs\ninternal Track AddSession(Guid sessionId, string title,\n    DateTime startTime, DateTime endTime,\n    string description, string language)\n{\n    if (startTime > endTime)\n    {\n        throw new BusinessException(EventHubErrorCodes\n            .EndTimeCantBeEarlierThanStartTime);\n    }\n    foreach (var session in Sessions)\n    {\n      if (startTime.IsBetween(session.StartTime,\n          session.EndTime) ||\n          endTime.IsBetween(session.StartTime, \n          session.EndTime))\n      {\n        throw new BusinessException(EventHubErrorCodes\n            .SessionTimeConflictsWithAnExistingSession);\n      }\n    }    \n    Sessions.Add(new Session(sessionId, Id, title, \n                 startTime, endTime, description));    \n    return this;\n}\n```", "```cs\npublic async Task SetCapacityAsync(\n    IRepository<EventRegistration, Guid>\n        registrationRepository, int? capacity)\n{\n    if (capacity.HasValue)\n    {\n        var registeredUserCount = await \n            registrationRepository.CountAsync(x =>\n                x.EventId == @event.Id);\n        if (capacity.Value < registeredUserCount)\n        {\n            throw new BusinessException(\n            EventHubErrorCodes\n            .CapacityCanNotBeLowerThanRegisteredUserCount);\n        }\n    }\n    this.Capacity = capacity;\n}\n```", "```cs\npublic class EventManager : DomainService\n{\n    ...\n    public async Task SetCapacityAsync(Event @event, \n                                       int? capacity)\n    {\n        if (capacity.HasValue)\n        {\n            var registeredUserCount = await\n                _eventRegistrationRepository.CountAsync(\n                    x => x.EventId == @event.Id);\n            if (capacity.Value < registeredUserCount)\n            {\n                throw new BusinessException(\n                EventHubErrorCodes.CapacityCanNotBeLower\n                ThanRegisteredUserCount);\n            }\n        }\n        @event.Capacity = capacity;\n    }\n}\n```", "```cs\npublic async Task UpdateAsync(Guid id, \n                              UpdateEventDto input)\n{\n    var @event = await _eventRepository.GetAsync(id);\nO\n    @event.SetTitle(input.Title);\n    @event.SetTime(input.StartTime, input.EndTime);\n    await _eventManager.SetCapacityAsync(@event,\n                                         input.Capacity);\n    @event.Language = input.Language;\n    await _eventRepository.UpdateAsync(@event);\n}\n```", "```cs\npublic interface IEventRepository : IRepository<Event,\n                                                Guid>\n{\n    Task UpdateSessionTimeAsync(\n        Guid sessionId, DateTime startTime, DateTime\n            endTime);\n    Task<List<Event>> GetNearbyEventsAsync();\n}\n```", "```cs\npublic async Task<List<Event>> GetSpokenEventsAsync(Guid\n                                                    userId)\n{\n    var queryable = \n        await _eventRepository.GetQueryableAsync();\n    var query = queryable.Where(x => x.Tracks\n        .Any(track => track.Sessions\n          .Any(session => session.Speakers\n            .Any(speaker => speaker.UserId == userId))));\n    return await AsyncExecuter.ToListAsync(query);\n}\n```", "```cs\npublic interface IEventRepository : IRepository<Event,\n                                                Guid>\n{\n    Task<List<Event>> GetSpokenEventsAsync(Guid userId);\n}\n```", "```cs\npublic interface IEventRepository : IRepository<Event,\n                                                Guid>\n{\n    Task<List<Event>> GetSpokenEventsAsync(Guid userId);\n    Task<List<Event>> GetEventsByDateRangeAsync(DateTime\n        minDate, DateTime maxDate);\n}\n```", "```cs\nTask<List<Event>> GetSpokenEventsByDateRangeAsync(Guid userId, DateTime minDate, DateTime maxDate)\n```", "```cs\npublic async Task<List<Event>> GetSpokenEventsAsync(Guid\n                                                    userId)\n{\n    var startTime = Clock.Now;\n    var endTime = Clock.Now.AddDays(30);\n    return await _eventRepository.GetListAsync(x =>\n        x.Tracks\n        .Any(track => track.Sessions\n            .Any(session => session.Speakers\n                .Any(speaker => speaker.UserId == userId)))\n        && x.StartTime > startTime && x.StartTime <= \n            endTime    \n    );\n}\n```", "```cs\npublic class OnlineEventSpecification :\n    Specification<Event>\n{\n    public override Expression<Func<Event, bool>>\n        ToExpression()\n    {\n        return x => x.IsOnline == true;\n    }\n}\n```", "```cs\nvar events = _eventRepository\n    .GetListAsync(new OnlineEventSpecification());\n```", "```cs\nvar events = _eventRepository\n    .GetListAsync(\n        new OnlineEventSpecification().ToExpression());\n```", "```cs\nEvent evnt = GetEvent();\nif (new OnlineEventSpecification().IsSatisfiedBy(evnt))\n{\n    // ...\n}\n```", "```cs\npublic class SpeakerSpecification : Specification<Event>\n{\n    public Guid UserId { get; }\n    public SpeakerSpecification(Guid userId)\n    {\n        UserId = userId;\n    }\n\n    public override Expression<Func<Event, bool>>\n        ToExpression()\n    {\n        return x => x.Tracks\n            .Any(t => t.Sessions\n                .Any(s => s.Speakers\n                    .Any(sp => sp.UserId == UserId)));\n    }\n}\n```", "```cs\npublic async Task<List<Event>> GetSpokenEventsAsync(Guid\n                                                    userId)\n{\n    return await _eventRepository.GetListAsync(\n        new SpeakerSpecification(userId));\n}\n```", "```cs\nEvent evnt = GetEvent();\nif (new SpeakerSpecification(userId).IsSatisfiedBy(evnt))\n{\n    // ...\n}\n```", "```cs\nvar events = _eventRepository.GetListAsync(\n    new SpeakerSpecification(userId)\n        .And(new OnlineEventSpecification())\n        .ToExpression()\n);\n```", "```cs\nvar events = _eventRepository.GetListAsync(\n    new SpeakerSpecification(userId)\n        .And(new DateRangeSpecification(Clock.Now,\n             Clock.Now.AddDays(30)))\n        .AndNot(new OnlineEventSpecification())\n        .ToExpression()\n);\n```", "```cs\npublic class OnlineSpeakerSpecification : \n    AndSpecification<Event>\n{\n    public OnlineSpeakerSpecification(Guid userId)\n        : base(new SpeakerSpecification(userId),\n               new OnlineEventSpecification())\n    {\n    }\n}\n```", "```cs\npublic void SetTime(DateTime startTime, DateTime endTime)\n{\n    if (startTime > endTime)\n    {\n        throw new BusinessException(EventHubErrorCodes     \n            .EndTimeCantBeEarlierThanStartTime);\n    }\n    StartTime = startTime;\n    EndTime = endTime;\n    if (!IsDraft)\n    {\n        AddLocalEvent(new EventTimeChangedEventData(this));\n    }\n}\n```", "```cs\npublic class EventTimeChangedEventData\n{\n    public Event Event { get; }\n    public EventTimeChangedEventData(Event @event)\n    {\n        Event = @event;\n    }\n}\n```", "```cs\npublic class UserEmailingHandler :\n    ILocalEventHandler<EventTimeChangedEventData>,\n    ITransientDependency\n{\n    public async Task HandleEventAsync(\n        EventTimeChangedEventData eventData)\n    {\n        var @event = eventData.Event;\n        // TODO: Send email to the registered users!\n    }\n}\n```", "```cs\npublic class EventAppService : EventHubAppService, \n    IEventAppService\n{\n    private readonly IRepository<Event, Guid> \n        _eventRepository;\n    private readonly ILocalEventBus _localEventBus;\n    public EventAppService(\n        IRepository<Event, Guid> eventRepository,\n        ILocalEventBus localEventBus)\n    {\n        _eventRepository = eventRepository;\n        _localEventBus = localEventBus;\n    }\n    public async Task SetTimeAsync(\n        Guid eventId, DateTime startTime, DateTime endTime)\n    {\n        var @event = \n            await _eventRepository.GetAsync(eventId);\n        @event.SetTime(startTime, endTime);\n        await _eventRepository.UpdateAsync(@event);\n        await _localEventBus.PublishAsync(\n            new EventTimeChangedEventData(@event));\n    }\n}\n```", "```cs\npublic void SetTime(DateTime startTime, DateTime endTime)\n{\n    if (startTime > endTime)\n    {\n        throw new BusinessException(EventHubErrorCodes \n            .EndTimeCantBeEarlierThanStartTime);\n    }\n    StartTime = startTime;\n    EndTime = endTime;\n    if (!IsDraft)\n    {\n        AddDistributedEvent(new EventTimeChangedEto\n        {\n            EventId = Id, Title = Title,\n            StartTime = StartTime, EndTime = EndTime\n        });\n    }\n}\n```", "```cs\nawait _distributedEventBus.PublishAsync(\n    new EventTimeChangedEto\n    {\n        EventId = @event.Id,\n        Title = @event.Title,\n        StartTime = @event.StartTime,\n        EndTime = @event.EndTime\n    });\n```", "```cs\npublic class UserEmailingHandler :\n    IDistributedEventHandler<EventTimeChangedEto>,\n    ITransientDependency\n{\n    public Task HandleEventAsync(EventTimeChangedEto \n                                 eventData)\n    {\n        var eventId = eventData.EventId;\n        // TODO: Send email to the registered users! \n    }\n}\n```"]