- en: Adaptation of Mechanics
  prefs: []
  type: TYPE_NORMAL
- en: We are finally ready to learn about the most exciting creative challenge for
    game designers: creating the gameplay.
  prefs: []
  type: TYPE_NORMAL
- en: There are many formal definitions of what gameplay is and what it means, and
    we can say the same about mechanics. Our goal with this book is not to try to
    give new definitions. We want to stay practical, therefore we'll go with the most
    intuitive definitions and leave it to you to discover all the studies and implications
    of those words. For the sake of simplicity, by gameplay, we mean how all the mechanics
    of your game contribute to creating the final experience played by the players.
  prefs: []
  type: TYPE_NORMAL
- en: We're going to have a quick look at more specific definitions of what game mechanics
    are later in this chapter. Again, we're going to learn from other game designers
    and scholars who have already done an excellent job on this, with no pretense
    to reformulate our own definitions.
  prefs: []
  type: TYPE_NORMAL
- en: Before learning how to create completely new game mechanics, we are going to
    focus on how to use existing mechanics and change and evolve them to suit your
    game and the gameplay you have envisioned. We have already talked about the fact
    that creating a new game doesn't always mean creating new and never-seen-before
    game mechanics. Understanding existing games and their mechanics and knowing how
    to deconstruct them and make them work for your game is the key to simplicity.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we're going to learn how to use familiar game mechanics as
    a starting point to create your own and we will develop a useful framework that,
    once mastered, will allow you to tackle the challenge of creating something new
    and fresh based on familiar gameplay patterns.
  prefs: []
  type: TYPE_NORMAL
- en: What is a game mechanic?
  prefs: []
  type: TYPE_NORMAL
- en: I know, this is a book about practical game design, but when it comes to game
    mechanics and the core elements of gameplay, we have to go through some theory.
  prefs: []
  type: TYPE_NORMAL
- en: Formally defining anything is a difficult task; I always prefer to quote definitions
    from different authors. All of them are equally correct and the different points
    of view complement each other. It is not our goal with this book to give a comprehensive
    definition, what's important is that a clear idea can stick in your designer mind
    by reading them!
  prefs: []
  type: TYPE_NORMAL
- en: Mechanics are the various actions, behaviors, and control mechanisms afforded
    to the player within a game context.
  prefs: []
  type: TYPE_NORMAL
- en: '–''MDA: Mechanics, Dynamics, Aesthetics Framework'' by Hunicke, M. LeBlanc,
    R. Zubek'
  prefs: []
  type: TYPE_NORMAL
- en: Game mechanics are rule based systems/simulations that facilitate and encourage
    a user to explore and learn the properties of their possibility space through
    the use of feedback mechanisms.
  prefs: []
  type: TYPE_NORMAL
- en: –'A Theory of Fun' by Raph Koster
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: They are the interactions and relationships that remain when all of the aesthetics,
    technology, and story are stripped away.
  prefs: []
  type: TYPE_NORMAL
- en: –'The Art of Game Design' by Jesse Schell
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Got it? Great!
  prefs: []
  type: TYPE_NORMAL
- en: It may all sound pretty simple, but those definitions took hard work and much
    thought to be written in black and white. Again, we are not going in-depth into
    these because this book is about the practical use of this knowledge more than
    the knowledge itself. Make sure to read the source articles and books from which
    we have taken these definitions; they are a must-read for every aspiring game
    designer.
  prefs: []
  type: TYPE_NORMAL
- en: Examples of game mechanics
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a better idea of what a game mechanic is in theory, let's have
    a look at some practical examples from famous games, just to clear any doubts
    that might still be there!
  prefs: []
  type: TYPE_NORMAL
- en: We're going to start with extremely simple mechanics, without lingering too
    much on how they work. What follows is a list of examples to give you a practical
    idea of what a game mechanic is in a game.
  prefs: []
  type: TYPE_NORMAL
- en: Jump!
  prefs: []
  type: TYPE_NORMAL
- en: 'Probably the most famous mechanic of all. Super Mario Bros (1983) featured
    only two main mechanics: running and jumping.'
  prefs: []
  type: TYPE_NORMAL
- en: 'By pressing a button Mario can jump into the air, so he is able to stomp on
    enemies or reach platforms on different levels. That jump mechanic has been replicated
    in endless games and given birth to an entire genre: The Platformer. In the following
    image, we can see Mario in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00157.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Mario jumping in Super Mario World
  prefs: []
  type: TYPE_NORMAL
- en: Shooting and reloading
  prefs: []
  type: TYPE_NORMAL
- en: 'We have two mechanics here:'
  prefs: []
  type: TYPE_NORMAL
- en: Shooting is the action of firing a weapon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reloading is the mechanic by which every now and then the player has to reload
    the gun to keep shooting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Early shooter games didn't have any reloading involved, but modern shooter games
    might have quite complex reloading mechanics, each with their own unique gameplay
    implications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Imagine for example a classic FPS such as Call of Duty (CoD). Every weapon
    has a clip of ammunition that, once unloaded, has to be reloaded. This exposes
    the player to incoming attacks, creating a need for strategy for when to reload
    and a sense of danger in doing so: a fantastic game mechanic! See it in action
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00103.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In Call of Duty, the player can press the reload button at any given time, commencing
    the action of reloading their weapon
  prefs: []
  type: TYPE_NORMAL
- en: 'Star Wars: Battlefront uses a different approach. Firing a weapon for too long
    and too quickly causes overheat. Once overheated, a weapon cannot be used for
    a number of seconds. The final effect (dynamic) is clearly similar to the one
    we have in CoD—the overheated weapon exposes the player to attacks and creates
    a situation of danger, but the strategies are different. Unlike CoD, in Star Wars:
    Battlefront the player can pace their shooting in such a way that the weapon never
    overheats, at the expense of the fire rate:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00176.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In Star Wars: Battlefront a weapon doesn''t need to be reloaded. However, if
    the player keeps shooting for too long, the weapon overheats and has to be cooled
    down by pressing the cooldown (reload) button at the right time'
  prefs: []
  type: TYPE_NORMAL
- en: Action points
  prefs: []
  type: TYPE_NORMAL
- en: 'Typical of turn-based games, action points are a widely used mechanic. The
    player has a budget of points that he can spend for doing actions (each action
    would be a separate mechanic, such as moving, using an ability, attacking an enemy,
    and so forth). Usually, this point also regenerates over time or each turn:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00105.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In Hearthstone, the player has a number of action points called Mana every turn.
    Each card he can play has a Mana cost.
  prefs: []
  type: TYPE_NORMAL
- en: List of common game mechanics
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a practical list of game mechanics common to video games. It is by
    no means a comprehensive list, but it will help you better understand the meaning
    of the word mechanic in the context of video games:'
  prefs: []
  type: TYPE_NORMAL
- en: Turns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Different types of movements (running, crawling, flying)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Card drawing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time limit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resource collection/gathering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shooting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Switching weapons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pushing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pulling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dragging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shooting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Winning condition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Losing condition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rock-Paper-Scissors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Randomly Generated Numbers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Aiming
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quick Time Events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Score points
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Experience Points
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are hundreds of them. It is worth noticing that, as we have seen, a mechanic
    could be either an action that the player can perform or a more abstract rule
    of the game.
  prefs: []
  type: TYPE_NORMAL
- en: Game mechanics interact with each other to develop dynamics
  prefs: []
  type: TYPE_NORMAL
- en: The moment when a game really comes to life and triggers player's real emotions
    is when all the mechanics work together to create experiences. Usually, these
    interactions are called dynamics, such as in the case of the aforementioned MDA
    Framework.
  prefs: []
  type: TYPE_NORMAL
- en: The most striking difference between a mechanic and a dynamic is that a game
    designer has full control of the former but much less of the latter. It is only
    in the hands of players that dynamics can emerge from mechanics and it is the
    game designer's job to make sure this happens in the way they envisioned.
  prefs: []
  type: TYPE_NORMAL
- en: Having less control doesn't mean that designing the mechanics and just hoping
    that they'll work will be enough. The fun of video games ultimately resides in
    dynamics, so getting them right is even more important than designing the core
    mechanics.
  prefs: []
  type: TYPE_NORMAL
- en: Mechanics and dynamics are part of a feature
  prefs: []
  type: TYPE_NORMAL
- en: We know that mechanics are the atoms of our gameplay. We've learned that the
    interactions among our mechanics create dynamics, and now we can finally shed
    some light on the term Feature.
  prefs: []
  type: TYPE_NORMAL
- en: A game feature is an entire set of mechanics, and designing a feature means
    not only describing each mechanic but also how they will generate dynamics and
    interact when played with.
  prefs: []
  type: TYPE_NORMAL
- en: Some feature examples are combat, multiplayer leaderboards, crafting, weapon
    upgrades, a world map, online mode, guilds, tournaments, and procedurally generated
    content; the list is limited only by the designer's imagination.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a list of common features with some examples in popular games:'
  prefs: []
  type: TYPE_NORMAL
- en: '|   Character Creation   |     Skyrim, Pillars of Eternity, World of Warcraft
    |'
  prefs: []
  type: TYPE_TB
- en: '|   Combat System   |     Dark Soul, Call of Duty, Chess |'
  prefs: []
  type: TYPE_TB
- en: '|   Guild Wars   |     Clash of Clans, Lineage II |'
  prefs: []
  type: TYPE_TB
- en: '|   Crafting   |     Minecraft, The Witcher |'
  prefs: []
  type: TYPE_TB
- en: '|   Tournament   |     Overwatch, FIFA |'
  prefs: []
  type: TYPE_TB
- en: '|   World Map   |     Far Cry, Fallout |'
  prefs: []
  type: TYPE_TB
- en: It is important to know that some features can be formed by many other smaller
    features—In open world games the open world is usually described as a feature,
    but an open world includes smaller features such as world map, traveling, weather
    and time, encounters, and many, many others.
  prefs: []
  type: TYPE_NORMAL
- en: Approaching mechanic design
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have some grasp of the theory behind game mechanics and dynamics
    and how they are the building blocks of game features, let's look at how to work
    on them.
  prefs: []
  type: TYPE_NORMAL
- en: As we discussed in [`Chapter 4`](index_split_097.html#filepos293383), Design
    Documentation, every design process should start with the definition of some goals
    and requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'When creating your mechanics, you should always keep in mind the following
    questions:'
  prefs: []
  type: TYPE_NORMAL
- en: What is the goal of the mechanic?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is the goal clear to the player?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are the rules that affect the mechanic?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the feedback to the player?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The kind of game you are developing and its vision should guide you through
    the answers. Let's say you are working on an action medieval-fantasy game where
    melee combat is your core feature. The first mechanic you’ll be focusing on is
    probably going to be the action of attacking an enemy.
  prefs: []
  type: TYPE_NORMAL
- en: What is the purpose of the combat system?
  prefs: []
  type: TYPE_NORMAL
- en: Regardless of the theme of your game and its vision, the fact that we are talking
    about an action game already provides some insights.
  prefs: []
  type: TYPE_NORMAL
- en: An action-oriented combat game challenges the player's physical skills and leverages
    their knowledge of the available game actions. So, one of the requirements would
    certainly be the use of the player's hand-eye coordination skills. It should also
    use memory skills, for pulling out combos or special attacks by pressing key combinations.
    The goal of such mechanics is usually to give to the player a skill-based system,
    easy to learn but difficult to master, to fight different enemies using different
    weapons and tactics.
  prefs: []
  type: TYPE_NORMAL
- en: Rules and game mechanics
  prefs: []
  type: TYPE_NORMAL
- en: Rules are extremely important to any game. According to different definitions
    of game mechanics, they might not be defined as mechanics themselves, but as a
    part of them. Rules for our combat system could be, for example, the number of
    attacks per second the player can perform. Rules can define constraints for actions
    or conditions to be respected (a victory condition, for example). Rules make games
    exciting because they determine the space in which the game's actions can take
    place.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine a Hide and Seek game where the seeker doesn't have to close his eyes
    while the other players are hiding. That would be the most boring Hide and Seek
    game ever! The rule that states the seeker has to close their eyes and count to
    a predetermined number is there to force a challenge that makes the game fun—a
    challenge for both the seeker, who can't look where players are hiding, and the
    hiders, who have a limited time to hide.
  prefs: []
  type: TYPE_NORMAL
- en: We could say that this rule is not a mechanic in itself. The two main mechanics
    in Hide and Seek are for the seeker to Seek and for the hiders to Hide. The rule
    is part of the Seek mechanic, but nonetheless is a fundamental part of the game.
  prefs: []
  type: TYPE_NORMAL
- en: It might be difficult to distinguish between a mechanic and a rule; again, this
    would be a theoretical effort, which we don't want to tackle in this book.
  prefs: []
  type: TYPE_NORMAL
- en: What is important is that you understand that mechanics and rules need to come
    together and be considered at the same time while designing a game.
  prefs: []
  type: TYPE_NORMAL
- en: Mechanics and dynamics produce feedback
  prefs: []
  type: TYPE_NORMAL
- en: Finally, there is feedback, probably the most important part of a game mechanic
    in video games.
  prefs: []
  type: TYPE_NORMAL
- en: 'Wikipedia gives the following definition of video games:'
  prefs: []
  type: TYPE_NORMAL
- en: '"A video game is an electronic game that involves interaction with a user interface
    to generate visual feedback on a video device".'
  prefs: []
  type: TYPE_NORMAL
- en: The word feedback is part of the very definition of video games.
  prefs: []
  type: TYPE_NORMAL
- en: We could argue that the Wikipedia definition is not complete (or up to date),
    as that feedback is not necessarily visual. It can well be audio or even haptic
    (the most traditional haptic feedback is the vibration of a console controller,
    but haptic feedback and devices are evolving at an incredible pace with the growth
    of virtual reality).
  prefs: []
  type: TYPE_NORMAL
- en: Feedback is everywhere in video games and is at the core of any game mechanic.
    For every player's action, there must correspond a change in the game that is
    immediately appreciable.
  prefs: []
  type: TYPE_NORMAL
- en: The fact that Mario jumps on the screen when you hit a specific button on the
    controller is a feedback, as is the iconic bounce sound that he makes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Feedback is not limited to the player''s immediate actions though. An Experience
    Points (XP) progress bar is a visual feedback that provides the player valuable
    information about how many XP points they need for the next level. More importantly,
    that XP bar could flash and make a little progress every time the player accomplishes
    an action that rewards XP. This is a fantastic way to teach the player about cause-effect
    relations in the game:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The result screen at the end of every match in Overwatch is full of visual feedback.
    It does an excellent job in providing information about the player's performance,
    progression, and what is about to happen now that the match is over.
  prefs: []
  type: TYPE_NORMAL
- en: Feedback is also essential to understand the game's world and logic. Imagine
    if the same action performed in the same circumstances doesn't produce the same
    result (and feedback) every time. That would be extremely frustrating for the
    player and undermine the fun of the game. For example, you know that you can fire
    your weapon in a shooter game with a specific button, let's say R2 on a PlayStation's
    controller. Every time you press that button, you expect your weapon to shoot.
    If once in a while, the same button produces a different effect, such as for example
    throwing your weapon at the enemy instead of shooting, we would have an infuriated
    player. For the same reason, if the weapon is jammed or must be reloaded before
    shooting, we expect the game to somehow tell us that the shooting is not available
    and that we need to reload. The outcome of pressing the same button, in this case,
    would actually be different (shoot if the weapon is loaded, don't if it's not),
    but the feedback given to the player must describe what is going on as best as
    possible.
  prefs: []
  type: TYPE_NORMAL
- en: Finding the right reference
  prefs: []
  type: TYPE_NORMAL
- en: How can you create a game mechanic based on an existing one? How do you find
    the right reference to start creating your own?
  prefs: []
  type: TYPE_NORMAL
- en: The first step is to look for games that include mechanics and features similar
    to what you are envisioning for your game. Your game concept should give you a
    clear idea of which games you should look at.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, you should have a clear idea of who your competitors are (as
    we have seen in [`Chapter 2`](index_split_047.html#filepos149451), Game Concept)
    and it is important to look at your competition''s game mechanics with special
    attention. This is for two reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: Here you will find the basic mechanics of your game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It will give you a clear idea of how games similar to yours play. Your goal
    is to make something different in the end, not just copy-paste what's already
    been done!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's make some practical examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s say you are building a Real-Time Strategy game and need to define how
    resources are collected and managed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In Age of Empires, the player needs to gather the resources by allocating his
    workers to the various resources: crops, forests, mines, and farms'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can decide to go with the classic Age of Empires approach, where resources
    are scattered around the map and you have to send a specific unit to collect them,
    or try a modern approach like in Dawn of War, where your resources are granted
    by capturing and maintaining strategic points:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00100.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In Dawn of War the player generates resource points by controlling strategic
    points
  prefs: []
  type: TYPE_NORMAL
- en: These two are great references that you can analyze to decide which approach
    suits your game better.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to remember the concept of Unique Selling Point (USP) here.
    It is unlikely that your game is going have multiple USPs and that's totally fine!
    If resource collection is not what your game is really about, but it still needs
    a resource collection mechanic, just take what has already been built!
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Taking mechanics that work for your game from existing games is exactly what
    you need if you don't want to waste time on the corollary and focus on your true
    USP.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Maybe you are building a classic 2D platformer game, with jumping between platforms
    as one of its core mechanics. The number of references you''d have to look at
    can be pretty overwhelming: Super Mario, Castlevania, Sonic, Donkey Kong, Rayman,
    Kommander Keen...there are hundreds of examples.'
  prefs: []
  type: TYPE_NORMAL
- en: In this case, you should focus on what kind of user experience you want your
    players to have and trim down the list to only the games that have given you something
    similar.
  prefs: []
  type: TYPE_NORMAL
- en: Yes, in order to do that, you would need to play an awful lot of games, especially
    the ones that you wouldn't consider playing as a gamer...that's part of your job!
    Classifying in your mind games and genres, and categorizing them into experiences
    is a must for any game designer.
  prefs: []
  type: TYPE_NORMAL
- en: Keep a game journal. Whenever you play a game, note down your feelings and thoughts.
    A few sentences and the date you played would be enough. It will be valuable information
    later on, even years later.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Deconstructing your references
  prefs: []
  type: TYPE_NORMAL
- en: Once we have found our perfect references it, is time to deconstruct them into
    smaller experiences. We need to analyze these mechanics and understand why they
    have been developed the way they have. Then we need to understand what we need
    to do in order to implement them in our game and make them work according to our
    vision.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s go back to our previous platform game example.
  prefs: []
  type: TYPE_NORMAL
- en: 'We want to analyze the Jumping mechanic of 2D platform games. We will pick
    one of the classics: Super Mario Bros.'
  prefs: []
  type: TYPE_NORMAL
- en: Jumping is, of course, a core mechanic. But can we say something else about
    it?
  prefs: []
  type: TYPE_NORMAL
- en: How high can Mario jump?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How much distance can he cover while jumping?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can you control the character once he's up in the air?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is there any rule that directly affects the mechanic?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What kind of challenge is the player facing with the Jump action?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's try to address these questions.
  prefs: []
  type: TYPE_NORMAL
- en: The longer the player holds the JUMP button, the higher the jump will be
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The distance covered by the jump depends on the speed of the character when
    he jumps and the height of the jump
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mario hovers into the air and the player can use directional movements to line
    up the falling to the target
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mario's jumps are affected by gravity—his speed in going up is slower than coming
    down
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The challenges are:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoiding enemies and obstacles by jumping over them
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Landing a jump on enemies' heads to kill them
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoiding falling into pits
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Reaching a particular platform by jumping on it
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Interesting findings, don't you think?
  prefs: []
  type: TYPE_NORMAL
- en: There are various techniques to deconstruct games and game mechanics. When you
    want to understand a mechanic from an existing game, a great way to understand
    how it is made is to ask an engineer for their opinion on how he or she thinks
    it has been implemented. How does it work at a technical level? Getting insights
    on this kind of question could reveal a lot about a game mechanic!
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Now that we have deconstructed the Jump mechanic in Super Mario, let''s take
    another popular platform game that clearly took inspiration from the Mario: Super
    Meat Boy.'
  prefs: []
  type: TYPE_NORMAL
- en: In Super Meat Boy the core mechanic remains the Jump action. How did the developers
    make a completely new and fresh game out of it?
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all the gravity rule that affects Mario''s jump is simplified: Super
    Meat Boy''s jumps are symmetrical as the speed going up is the same as the speed
    going down.'
  prefs: []
  type: TYPE_NORMAL
- en: At a first glance this seems a tiny, insignificant detail, but in reality, this
    simplification allows Meat Boy to be more reactive and controllable, with his
    jumps much more predictable than Mario's.
  prefs: []
  type: TYPE_NORMAL
- en: No wonder Super Meat Boy is a much more fast-paced game.
  prefs: []
  type: TYPE_NORMAL
- en: 'The predictability of Meat Boy''s jumps serves another purpose: the player
    is often required to make a series of jumps which involves platforms that are
    off-screen at the moment he starts the sequence. So he has to take decisions and
    actions in a matter of milliseconds - something you can’t so easily do with the
    weight and physics of Mario.'
  prefs: []
  type: TYPE_NORMAL
- en: Another distinctive addition to Super Meat Boy's jump mechanic is Wall Jumping.
    By landing a Jump on a wall is possible to immediately Jump again in an upward
    and opposite direction from the wall. This is a simple addition that enables dynamics
    such as vertical climbing, and therefore creates a completely different and new
    game.
  prefs: []
  type: TYPE_NORMAL
- en: Additive and subtractive design
  prefs: []
  type: TYPE_NORMAL
- en: 'Our previous Super Meat Boy jump example is a perfect introduction to the topic
    we''re going to discuss: additive and subtractive design.'
  prefs: []
  type: TYPE_NORMAL
- en: By taking out that gravity element, Meat Boy's developers have subtracted from
    a classic jumping mechanic, while on the other hand they have added to the mechanic
    by allowing wall jumping.
  prefs: []
  type: TYPE_NORMAL
- en: Additive and subtractive design is the principle behind any adaptation of game
    mechanics.
  prefs: []
  type: TYPE_NORMAL
- en: Additive design, in particular, is what game developers have always used to
    create new video games. Expanding and improving existing game mechanics is the
    lifeblood of game design as much as introducing new groundbreaking ones.
  prefs: []
  type: TYPE_NORMAL
- en: Subtractive game design though is probably even more important.
  prefs: []
  type: TYPE_NORMAL
- en: We talked already about the Less is more principle and how it should be applied
    throughout the whole design and its documentation. Applying this principle in
    game mechanics is not only a matter of elegance; it can help game designers to
    discover (or re-discover) the fun at the core of game mechanics and their ease
    of use.
  prefs: []
  type: TYPE_NORMAL
- en: '''Subtractive design is the process of removing imperfections and extraneous
    parts in order to strengthen the core elements. You can think of a design as something
    you build up, construct and let grow, but it''s pruning away the excess that gives
    a design a sense of simplicity, elegance, and power.'''
  prefs: []
  type: TYPE_NORMAL
- en: – David Sirlin, Game Designer
  prefs: []
  type: TYPE_NORMAL
- en: Subtractive design and examples of how it can transform good games into great
    games are everywhere in the history of video games.
  prefs: []
  type: TYPE_NORMAL
- en: 'Valve''s game Portal is a fantastic example of minimal game design. In Portal,
    you can open two different kinds of portals using a Portal Gun—orange portals
    and blue portals. The core mechanic is that you can enter an orange portal and
    come out from the Blue portal. You have no actual weapons, there is no inventory
    screen, there are no NPCs or enemies (with the exception of the turrets and the
    final boss). The controls are ultra-simplified, with action buttons only for moving,
    shooting the two kinds of portals, jumping, and carrying objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00019.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The portal mechanic in Portal
  prefs: []
  type: TYPE_NORMAL
- en: Portal's levels contain practically nothing except for elements that are part
    of puzzles, visual cues as hints about what you should do, and elements related
    to the story. This minimalistic design puts all the emphasis on the portal mechanic
    itself, which is incredibly fun. Basically, all you can do is shoot portals and
    move between them to solve puzzles. The fact that there are no other core mechanics
    in the game allows the designer to fully explore all the possibilities of the
    Portal mechanic, focusing on what is really fun for the player and staying away
    from anything distracting or out of context.
  prefs: []
  type: TYPE_NORMAL
- en: Putting it all back together
  prefs: []
  type: TYPE_NORMAL
- en: Once you have found your references, deconstructed them, taken the most significant
    elements as a base to develop your mechanics, and finally added or taken out whatever
    you needed to achieve your gameplay vision..it is finally time to test whether
    it really works!
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you are probably not yet writing a detailed documentation to
    the rest of team. Most likely you are in some sort of prototyping phase. Especially
    with core mechanics, the only way to test your hypothesis (of fun) is to play
    them.
  prefs: []
  type: TYPE_NORMAL
- en: We will discuss later how to effectively prototype game mechanics and flows.
    For now, it is important that you understand that the process of creating new
    mechanics goes hand in hand with working software.
  prefs: []
  type: TYPE_NORMAL
- en: The only way to know if your character's jump needs to follow a realistic physic
    or not, what the speed at which it is performed should be, and the maximum height
    is to play the game and feel whether your design assumptions were right or not.
  prefs: []
  type: TYPE_NORMAL
- en: Or to better (and more realistically) put it, to see how they were wrong.
  prefs: []
  type: TYPE_NORMAL
- en: In this iterative process of adding and subtracting elements from your mechanics
    and tweaking their values you will eventually find the perfect gameplay feeling
    and finally fix it into your GDD...or fail and realize that some of your assumptions
    were wrong—don't be scared of failure though. The faster you fail, the more time
    you will have to get it right or decide that you’re simply going in the wrong
    direction.
  prefs: []
  type: TYPE_NORMAL
- en: The screenshots used in this chapter are for illustrative purposes only. We
    do not recommend you to misuse these in any way. For more information please consult
    the terms and conditions of the publishers mentioned in the Disclaimer section
    of this book.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Summary
  prefs: []
  type: TYPE_NORMAL
- en: We have explored in this chapter the basic elements that form a game and how
    they interact, creating dynamics. We discovered the importance of playing many
    different games and being able to recall their core mechanics in order to find
    useful references for the creation of your own. We also learned some valuable
    design principles that will help us to adapt existing mechanics into something
    new and true to our game's vision.
  prefs: []
  type: TYPE_NORMAL
- en: With this solid base taken on board, we're ready to move to the next chapter,
    where we're going to learn an even more difficult art—The creation of new mechanics
    and the search for innovative gameplay.
  prefs: []
  type: TYPE_NORMAL
