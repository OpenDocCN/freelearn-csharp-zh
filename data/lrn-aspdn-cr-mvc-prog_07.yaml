- en: Chapter 7. Routing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 7 章。路由
- en: Routing is one of the important concepts in the ASP.NET MVC application as it
    takes care of incoming requests and maps them to the appropriate controller's
    actions.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 路由是 ASP.NET MVC 应用程序中的重要概念之一，它负责处理传入的请求并将它们映射到适当的控制器操作。
- en: 'In this chapter, we are going to learn about the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下主题：
- en: Using the `MapRoute` method to configure routing
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `MapRoute` 方法配置路由
- en: Different types of routing with examples—convention and attribute-based
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有示例的不同类型的路由——约定和基于属性的
- en: Using HTTP verbs in attribute-based routing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在基于属性的路由中使用 HTTP 动词
- en: We briefly discussed routing in [Chapter 3](text00027.html#page "Chapter 3. Controllers")
    , *Controllers* . In this chapter, we are going to discuss routing along with
    several options available to customize it in ASP.NET Core.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第 3 章](text00027.html#page "第 3 章。控制器") *控制器* 中简要讨论了路由。在本章中，我们将讨论路由以及 ASP.NET
    Core 中可用的自定义选项。
- en: Convention-based routing
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于约定的路由
- en: The routing engine is responsible for mapping the incoming requests to the appropriate
    action method of the controller.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 路由引擎负责将传入的请求映射到控制器中适当的操作方法。
- en: 'In the `Configure` method of the `Startup` class, we have mapped the following
    route:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Startup` 类的 `Configure` 方法中，我们已映射以下路由：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `MapRoute` method has two parameters:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`MapRoute` 方法有两个参数：'
- en: '`name` : This represents the name of the route as we could configure multiple
    routes for the same application.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`：这表示路由的名称，因为我们可以为同一应用程序配置多个路由。'
- en: '`template` : This signifies the actual configuration for the route. There are
    three parts to this configuration value. As we are supplying default parameters,
    if the values are not passed, it will take the default parameter values.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`template`：这表示路由的实际配置。此配置值有三个部分。由于我们提供了默认参数，如果未传递值，它将采用默认参数值。'
- en: '`{controller=Employee}` : The first value acts as the name of the controller
    and we use the `Employee` controller as the default controller when the controller
    value is not available in the URL.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{controller=Employee}`：第一个值作为控制器的名称，当 URL 中不可用控制器值时，我们使用 `Employee` 控制器作为默认控制器。'
- en: '`{action=Index}` : The `Index` action method will be acting as the default
    action method and the second parameter from the URL will be taken as the action
    method name.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{action=Index}`：`Index` 操作方法将作为默认操作方法，URL 的第二个参数将被用作操作方法名称。'
- en: '`{id?` `}` : By specifying "`?` " after the `id` parameter, we are saying that
    `id` is the optional parameter. If the value is passed as the third parameter,
    the `id` value will be taken. Otherwise, it would not be considered.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{id?}`：通过在 `id` 参数后指定 "`?"`，我们表示 `id` 是可选参数。如果作为第三个参数传递值，则将采用 `id` 值。否则，它将不被考虑。'
- en: There is another method with the same functionality. The `app.UseMvcWithDefaultRoute()`
    method configures the route `"{controller=Employee}/{action=Index}/{id?}"` . But
    we have used the earlier method to show that we can customize the route as we
    want.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 另有一个具有相同功能的方法。`app.UseMvcWithDefaultRoute()` 方法配置了路由 `"{controller=Employee}/{action=Index}/{id?}"`。但我们使用了前面的方法来表明我们可以按需自定义路由。
- en: 'Let us see a few examples and observe how our routing engine works. We are
    assuming the following routing for the preceding examples:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看几个示例，并观察我们的路由引擎是如何工作的。我们假设以下路由用于前面的示例：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Example 1
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 1
- en: URL-`http://localhost:49831/`
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: URL-`http://localhost:49831/`
- en: 'In this URL, we have not passed a value for the `controller` , `action` , or
    `id` . Since we have not passed anything, it would take the default values for
    the controller and the action. So, the URL is converted into the following URL
    by the routing engine:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在此 URL 中，我们没有为 `controller`、`action` 或 `id` 传递值。由于我们没有传递任何内容，它将采用控制器和操作的默认值。因此，路由引擎将此
    URL 转换为以下 URL：
- en: '`http://localhost:49831/Employee/Index`'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost:49831/Employee/Index`'
- en: Example 2
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 2
- en: URL-`http://localhost:49831/Employee/`
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: URL-`http://localhost:49831/Employee/`
- en: 'In this URL, we have passed the value for the `controller` (the first parameter),
    which is `Employee` , whereas we did not pass anything for `action` method (the
    second parameter) or `id` (the third parameter). So, the URL will be converted
    into the following URL by taking the default value for the `action` method:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在此 URL 中，我们已传递 `controller`（第一个参数）的值，即 `Employee`，而对于 `action` 方法（第二个参数）或 `id`（第三个参数），我们没有传递任何内容。因此，将采用
    `action` 方法的默认值来将 URL 转换为以下 URL：
- en: '`http://localhost:49831/Employee/Index`'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost:49831/Employee/Index`'
- en: Example 3
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 3
- en: URL-`http://localhost:49831/Manager/List`
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: URL-`http://localhost:49831/Manager/List`
- en: The routing engine will take the first parameter, `Manager` , as the `controller`
    method name and the second parameter, `List` , as the `action` method name.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 路由引擎将第一个参数`Manager`视为`controller`方法名称，第二个参数`List`视为`action`方法名称。
- en: Example 4
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例 4
- en: URL-`http://localhost:49831/Manager/Details/2`
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: URL-`http://localhost:49831/Manager/Details/2`
- en: We have passed all three parameters in this URL. So, the first parameter value,
    `Manager` , will be considered as the `controller` method name, the second parameter
    value will be considered as the `action` method name, and the third parameter
    value will be considered as the `id` method name.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在这个URL中传递了所有三个参数。因此，第一个参数值`Manager`将被视为`controller`方法名称，第二个参数值将被视为`action`方法名称，第三个参数值将被视为`id`方法名称。
- en: 'When defining the map route, we have used the `MapRoute` method with a couple
    of parameters. The first parameter, `name` , represents the name of the route
    and the second parameter, `template` , represents the URL pattern to be matched
    along with the default values:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义映射路由时，我们使用了带有几个参数的`MapRoute`方法。第一个参数`name`代表路由的名称，第二个参数`template`代表要匹配的URL模式以及默认值：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'There are other overloaded variations of this `MapRoute` method. The following
    is another commonly overloaded `MapRoute` method, where the incoming URL pattern
    and the default values are passed for different parameters. The name of the route
    is `FirstRoute` and this route will be applied for all URLs starting with `Home`
    . The default values for the controller and the action are `Home` and `Index2`
    respectively:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`MapRoute`方法还有其他重载变体。以下是一个常见的重载`MapRoute`方法，其中传入的URL模式和默认值被传递给不同的参数。路由的名称是`FirstRoute`，这个路由将应用于所有以`Home`开头的URL。控制器和动作的默认值分别是`Home`和`Index2`：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can define any number of routing maps for your ASP.NET MVC application.
    There is no restriction or limit on the routing maps. Let us add another routing
    map to our application. We have added another route map called `FirstRoute` to
    our application (highlighted in bold):'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以为你的ASP.NET MVC应用程序定义任意数量的路由映射。对路由映射没有限制或限制。让我们向我们的应用程序添加另一个路由映射。我们向应用程序添加了另一个名为`FirstRoute`的路由映射（加粗显示）：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'And we have added another `controller` method by the name `HomeController`
    with a couple of simple `action` methods returning different strings:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还添加了另一个名为`HomeController`的`controller`方法，其中包含几个简单的返回不同字符串的`action`方法：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: When you try to access the application through the URL, `http://localhost:49831/Hello`
    , both routing maps, `FirstRoute` and the `default` , match with the URL pattern.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当你尝试通过URL `http://localhost:49831/Hello` 访问应用程序时，`FirstRoute`和`default`两个路由映射都与URL模式匹配。
- en: Which map routing, do you think, will get applied in this scenario?
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你认为在这种情况下，哪个映射路由会被应用？
- en: 'The routing engine maps the incoming URL based on the following factors:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 路由引擎根据以下因素映射传入的URL：
- en: Matching pattern.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 匹配模式。
- en: On the order defined in the routing engine.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据路由引擎定义的顺序。
- en: The first factor is an obvious one. For a routing map to be picked up by the
    routing engine, the pattern of the incoming URL should get matched with the defined
    template in the routing map.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个因素是显而易见的。为了被路由引擎选中，传入URL的模式应该与路由映射中定义的模板匹配。
- en: The second factor is subtle but important. If more than one routing map matches
    with the incoming URL, the routing engine will pick the first URL as defined in
    the configuration. For example, if the incoming URL matches with both the `FirstRoute`
    and `default` maps, the routing engine will pick the `FirstRoute` map as it was
    defined first in the configuration.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个因素微妙但很重要。如果多个路由映射与传入的URL匹配，路由引擎将选择配置中定义的第一个URL。例如，如果传入的URL同时与`FirstRoute`和`default`映射匹配，路由引擎将选择`FirstRoute`映射，因为它在配置中首先定义。
- en: '![Example 4](img/Image00109.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![示例 4](img/Image00109.jpg)'
- en: 'If the routing engine could not map the incoming URL to any of the mapping
    routes, we get an `HTTP 404 error` , meaning that no resource could be found.
    You can see the status (200 means *OK* , 404 means *No resource found* ) by looking
    at the **Network** tab in the developer tools as shown in the following screenshot:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果路由引擎无法将传入的URL映射到任何映射路由，我们将得到一个`HTTP 404错误`，这意味着找不到任何资源。你可以通过查看开发工具中的**网络**选项卡来查看状态（200表示*OK*，404表示*未找到资源*），如下面的截图所示：
- en: '![Example 4](img/Image00110.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![示例 4](img/Image00110.jpg)'
- en: Attribute-based routing
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于属性的路由
- en: Until now, we have used convention-based routing. In convention-based routing,
    we define the routing templates (which are just parameterized strings) in a centralized
    place these are applicable to all the available controllers. The problem with
    convention-based routing is that, if we want to define different URL patterns
    for different controllers, we need to define a custom URL pattern that is common
    to all the controllers. This makes things difficult.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在使用基于约定的路由。在基于约定的路由中，我们在集中位置定义路由模板（这些只是参数化字符串），这些模板适用于所有可用的控制器。基于约定路由的问题在于，如果我们想为不同的控制器定义不同的URL模式，我们需要定义一个对所有控制器都通用的自定义URL模式。这使得事情变得复杂。
- en: There is another option for configuring the routing engine-attribute-based routing.
    In attribute-based routing, instead of configuring all the routing in a centralized
    location, the configuration will happen at the controller level.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 配置路由引擎的另一种选项是基于属性的路由。在基于属性的路由中，不是在集中位置配置所有路由，而是在`controller`级别进行配置。
- en: Let us see an example of attribute-based routing.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看基于属性的路由的一个例子。
- en: 'First, let us remove the convention-based routing that we created earlier in
    the `Configure` method in the `startup.cs` class file:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们从`startup.cs`类文件中的`Configure`方法中删除我们之前创建的基于约定的路由：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Then, we can configure the routing at the controller itself. In the following
    code, we have added the routing configuration for the `home` controller that we
    created earlier:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以在控制器本身配置路由。在下面的代码中，我们为之前创建的`home`控制器添加了路由配置：
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We have used the `Route` attribute in the `action` methods of the controller.
    The value passed in the `Route` attribute will be acting as the URL pattern. For
    example, when we access the URL `http://localhost:49831/Home/` , the `Index` method
    of `HomeController`  will be called. When we access the URL `http://localhost:49831/Home/Index3`
    , the `Index2` method of `HomeController` will be called. Please note that the
    URL pattern and `action` method name do not need to match. In the preceding example,
    we are calling the `Index2` action method but the URL pattern uses `Index3` ,
    `http://localhost:49831/Home/Index3` .
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在控制器的`action`方法中使用了`Route`属性。传递给`Route`属性的值将作为URL模式。例如，当我们访问URL `http://localhost:49831/Home/`
    时，`HomeController`的`Index`方法将被调用。当我们访问URL `http://localhost:49831/Home/Index3`
    时，`HomeController`的`Index2`方法将被调用。请注意，URL模式和`action`方法名称不需要匹配。在先前的示例中，我们调用的是`Index2`动作方法，但URL模式使用的是`Index3`，`http://localhost:49831/Home/Index3`。
- en: When you use attribute-based routing and convention-based routing together,
    attribute-based routing will take precedence.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当你同时使用基于属性的路由和基于约定的路由时，基于属性的路由将具有优先级。
- en: Route attribute at the controller level
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在控制器级别配置路由属性
- en: You will notice that, with the URL pattern for the `action` methods, `Index`
    and `Index2` , we repeat the controller name, `Home` , in both URL patterns, `Home`
    and `Home/Index3` . Instead of repeating the `controller` method name (or any
    common part in the URL) at the `action` method level, we can define it at the
    `controller` level.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到，对于`action`方法的URL模式，`Index`和`Index2`，我们在两个URL模式中重复了控制器名称`Home`，即`Home`和`Home/Index3`。我们可以在`controller`级别定义它，而不是在`action`方法级别重复`controller`方法名称（或URL中的任何公共部分）。
- en: In the following code, the common part of the URL (`Home` ) is defined at the
    `controller` level and the unique part is defined at the `action` method level.
    When the URL pattern is getting mapped to the `action` methods of the controller,
    both route parts (at the `controller` level and at the `action` method level)
    are merged and matched. So there will be no difference between the routes defined
    earlier and those that follow.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，URL的公共部分（`Home`）在`controller`级别定义，而唯一部分在`action`方法级别定义。当URL模式映射到控制器的`action`方法时，两个路由部分（在`controller`级别和`action`方法级别）将被合并并匹配。因此，之前定义的路由和后续的路由之间将没有区别。
- en: If you want two parameters in attribute-based routing, you can pass them within
    curly braces. In the following example, we did this for the `SayHello` action
    method.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在基于属性的路由中使用两个参数，你可以在大括号内传递它们。在下面的示例中，我们对`SayHello`动作方法做了这样的事情。
- en: 'For example, the URL pattern `http://localhost:49831/Home/Index3` , will still
    get mapped to `Index2` method of the `Homecontroller` :'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，URL模式`http://localhost:49831/Home/Index3`，仍然会被映射到`Homecontroller`的`Index2`方法：
- en: '[PRE8]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Passing routing values in HTTP action verbs in the Controller
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在控制器中通过HTTP动作动词传递路由值
- en: Instead of passing the routing values as `Route` attributes, we can even pass
    the routing values in HTTP action verbs such as `HTTPGet`  and `HTTPPost` .
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以将路由值作为`Route`属性传递，而不是将路由值传递到HTTP操作动词，如`HTTPGet`和`HTTPPost`。
- en: In the following code, we have used the `HTTPGet` attribute to pass the route
    values. For the `Index` method, we did not pass any value and hence no route value
    will get appended to the route value defined at the `controller` method level.
    For the `Index2` method, we are passing the value `Index3` and `Index3` will get
    appended to the route value defined at the `controller` level. Please note that
    only URLs with `GET` methods will be mapped to the `action` methods. If you access
    the same URL pattern with the `POST` method, these routes will not get matched
    and hence these `action` methods will not get called.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，我们使用了`HTTPGet`属性来传递路由值。对于`Index`方法，我们没有传递任何值，因此不会将任何路由值附加到在`controller`方法级别定义的路由值上。对于`Index2`方法，我们传递了值`Index3`，`Index3`将被附加到在`controller`级别定义的路由值上。请注意，只有使用`GET`方法的URL才会映射到`action`方法。如果你使用`POST`方法访问相同的URL模式，这些路由将不会匹配，因此这些`action`方法将不会被调用。
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Route Constraints
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由约束
- en: 'Route Constraints enable you to constrain the type of values that you pass
    to the controller action. For example, if you want to restrict the value to be
    passed to the `int` type `int` , you can do so. The following is one such instance:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 路由约束允许你限制传递给控制器操作的值的类型。例如，如果你想将值限制为`int`类型，你可以这样做。以下是一个这样的例子：
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'ASP.NET 5 (ASP.NET Core) even supports default parameter values so that you
    can pass the default parameters:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET 5 (ASP.NET Core)甚至支持默认参数值，这样你就可以传递默认参数：
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Summary
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned about routing and how it works. We learned
    about different kinds of routing available. We discussed convention-based routing
    and attribute-based routing with different examples. We also discussed route constraints
    and the default parameter values that could be passed.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了路由及其工作原理。我们了解了不同类型的路由，并使用不同的示例讨论了基于约定的路由和基于属性的路由。我们还讨论了路由约束和可以传递的默认参数值。
- en: In the next chapter, we are going to see how we can make the application look
    good.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到如何使应用程序看起来更美观。
