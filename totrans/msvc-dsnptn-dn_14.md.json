["```cs\npublic class AppointmentsController : ControllerBase\n    {\n        /* Other fields */\n        private readonly ILogger<AppointmentsController>\n            logger;\n        public AppointmentsController(/* Other Services */,\n            ILogger<AppointmentsController> logger)\n        {\n            this.logger = logger;\n        }\n    }\n```", "```cs\n// GET: api/Appointments\n        [HttpGet]\n        public async Task<ActionResult<Ienumerable\n            <Appointment>>> GetAppointments()\n        {\n            Logger.LogInformation(\"Returning\n                Appointments\");\n            return await _context.Appointments\n               .ToListAsync();\n        }\n```", "```cs\nHealthCare.Appointments.Api.Controllers.AppointmentsController: Information: Retrieving appointments\n```", "```cs\n\"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft.AspNetCore\": \"Warning\"\n    }\n  },\n```", "```cs\npublic async Task<ActionResult<AppointmentDetailsDto>>\n    GetAppointment(Guid id)\n        {\n            try\n            {\n                var appointment = await\n                    _context.Appointments.FindAsync(id);\n                if (appointment == null)\n                {\n                    return NotFound();\n                }\n                // Other service calls\n                var patient = await _patientsApiRepository\n                    .GetPatient(appointment\n                        .PatientId.ToString());\n                var appointmentDto = _mapper.Map\n                   <AppointmentDetailsDto>(appointment);\n                appointmentDto.Patient =\n                    _mapper.Map<PatientDto>(patient);\n                return appointmentDto;\n            }\n            catch (Exception ex)\n            {\n                logger.LogError(100, ex, \"Failure\n                    retrieving apointment with Id: {id}\",\n                        id);\n                throw;\n            }\n        }\n```", "```cs\nbuilder.Logging.ClearProviders();\nbuilder.Logging.AddConsole()\n    .AddEventLog(new EventLogSettings { SourceName =\n        \"Appointments Service\" })\n    .AddDebug()\n    .AddEventSourceLogger();\n```", "```cs\n{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Error\",\n      \"Microsoft\": \"Warning\",\n      \"Microsoft.Hosting.Lifetime\": \"Warning\"\n    },\n    \"Debug\": {\n      \"LogLevel\": {\n        \"Default\": \"Trace\"\n      }\n    },\n    \"Console\": {\n      \"LogLevel\": {\n        \"Default\": \"Information\"\n      }\n    },\n    \"EventSource\": {\n      \"LogLevel\": {\n        \"Microsoft\": \"Information\"\n      }\n    },\n    \"EventLog\": {\n      \"LogLevel\": {\n        \"Microsoft\": \"Information\"\n      }\n    },\n  }\n}\n```", "```cs\nbuilder.Logging.AddAzureWebAppDiagnostics();\nbuilder.Services.Configure<AzureFileLoggerOptions>\n    (options =>\n{\n    options.FileName = \"azure-log-filename\";\n    options.FileSizeLimit = 5 * 2048;\n    options.RetainedFileCountLimit = 15;\n});\nbuilder.Services.Configure<AzureBlobLoggerOptions>\n    (options =>\n{\n    options.BlobName = \"appLog.log\";\n});\n```", "```cs\nInstall-package Serilog.AspNetCore\n```", "```cs\nInstall-package Serilog.Expressions\n```", "```cs\n  \"Serilog\": {\n    \"MinimumLevel\": {\n      \"Default\": \"Information\",\n      \"Override\": {\n        \"Microsoft\": \"Warning\",\n        \"Microsoft.Hosting.Lifetime\": \"Information\"\n      }\n    },\n    \"WriteTo\": [\n      {\n        \"Name\": \"File\",\n        \"Args\": { \"path\":  \"./logs/log-.txt\",\n           \"rollingInterval\": \"Day\" }\n      }\n    ]\n  },\n```", "```cs\n  builder.Host.UseSerilog((ctx, lc) => lc\n        .WriteTo.Console()\n        .ReadFrom.Configuration(ctx.Configuration));\n```", "```cs\ndocker pull datalust/seq\n```", "```cs\ndocker run -–name seq -d --restart unless-stopped -e\nACCEPT_EULA=Y -p 5341:80 datalust/seq:latest\n```", "```cs\nInstall-Package Serilog.Sinks.Seq\n```", "```cs\n\"WriteTo\": [\n      {\n        //  File Configuration\n      },\n      {\n        \"Name\": \"Seq\",\n        \"Args\": { \"serverUrl\": \"http://localhost:5341\" }\n      }\n    ]\n```", "```cs\ndotnet add package --prerelease\n    OpenTelemetry.Instrumentation.AspNetCore\ndotnet add package OpenTelemetry.Exporter.Jaeger\ndotnet add package --prerelease\n    OpenTelemetry.Extensions.Hosting\n```", "```cs\nbuilder.Services.AddOpenTelemetryTracing((builder) =>\n    builder\n        .AddAspNetCoreInstrumentation(o =>\n        {\n            o.EnrichWithHttpRequest = (activity,\n                httpRequest) =>\n            {\n                activity.SetTag(\"requestProtocol\",\n                    httpRequest.Protocol);\n            };\n            o.EnrichWithHttpResponse = (activity,\n                httpResponse) =>\n            {\n                activity.SetTag(\"responseLength\",\n                    httpResponse.ContentLength);\n            };\n            o.EnrichWithException = (activity,\n                exception) =>\n            {\n                activity.SetTag(\"exceptionType\",\n                    exception.GetType().ToString());\n            };\n        })\n        .AddJaegerExporter()\n    );\n```"]