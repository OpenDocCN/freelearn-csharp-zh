- en: Chapter 3. Selecting the Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Reports are formatted presentation of data. Reports are used to present the
    information stored in database(s). Hence the first step is to connect to a database
    to read data from it. In this chapter, we will see how we can connect to the database
    and run SQL queries using Microsoft Visual Studio. We will also talk about DataSet
    and TableAdapter and see how we can use them to fill the ComboBoxes in our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: SQL query in Visual Studio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Populate the ComboBoxes with data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQL queries in Microsoft Visual Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Generally SQL queries are categorized into data definition language and data
    manipulation language.
  prefs: []
  type: TYPE_NORMAL
- en: There are many types of SQL queries such as Select, Update, Delete, and Insert
    query. In this book we will talk only about the Select query because reports use
    the Select query. We will use Northwind database in our example queries and we
    will use Microsoft Visual Studio to run all SQL queries. So first, we need to
    connect to our database.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to our database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open our application, Monitor, in Microsoft Visual Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **View** and click on **Server Explorer**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Server Explorer**, right-click on **Data Connections** and select **Add
    Connection...**. A dialog box similar to the one shown in the next screenshot
    will appear:![Connecting to our database](img/3-1.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure that **Data source:** is **Microsoft SQL Server(SqlClient)**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Because we have installed Microsoft SQL Server on our machine, we can type in
    `localhost` as the server name or write the machine name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Use SQL Server Authentication** and enter `sa` as the **User name:**
    and enter your password that you used while installing Microsoft SQL Server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `Northwind` in the database field and click on the **Test Connection**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If a message box pops up saying that the test succeeded, it means we can go
    ahead. If not, reenter the data or troubleshoot if there is any connection problem
    with SQL Server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **OK** button to connect to the database, and we will see our database
    in the **Server Explorer**, as shown in to the following screenshot:![Connecting
    to our database](img/3-2.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add database diagram
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To understand the Northwind database and relation between its tables we will
    create a new database diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on **Database Diagrams** and choose **Add New Diagram**. Click on
    **Yes** in the confirmation message box
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select all tables in the **Add Tables** dialog and click on the **Add** button.
    We can see all the tables and relations between these tables in the next diagram.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the diagram with the default name `Diagram1`.![Add database diagram](img/3-3.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test queries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need a tool to run queries and test results. Microsoft Visual Studio has
    a good IDE to run SQL queries. We can see this IDE by right-clicking on any table
    name in our database in **Server Explorer** and selecting **New Query**. Then
    we will choose the tables that we will use in our query from the **Add Table**
    dialog box and click on the **OK** button. Refer to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Test queries](img/3-4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As we can see in the previous screenshot, there are four sections in our Query
    IDE. Section one displays all tables we used in our query, section two displays
    simple query builder, section three displays SQL query code, and section four
    displays the query result. In our discussion we will talk about sections three
    and four.
  prefs: []
  type: TYPE_NORMAL
- en: Populate the ComboBoxes with data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In our application, we have many ComboBoxes. How do we populate them with data?
    In this section we will populate the ComboBoxes with data and talk about the basics
    of select SQL query. We have four main steps to populate any ComboBox in our application:
    SQL query, `TableAdapter`, `DataSource`, and Load Event. Before we start filling
    the first ComboBox, we need to add DataSet to our application to save the retrieved
    data by TableAdapter, in to it.'
  prefs: []
  type: TYPE_NORMAL
- en: Add DataSet to the application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Right-click on the Monitor application in the Solution Explorer and navigate
    to **Add** | **New Item**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the dialog box select **DataSet** and we will keep it with the default
    name `DataSet1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Populate the cbEmpTitle ComboBox
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Select data**: We need to populate this ComboBox with all employees'' titles
    without any duplication.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As we can see in the following screenshot, we can use a `Select` query to select
    `Title` from `Employees` table and the `DISTINCT` keyword to avoid duplication.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Populate the cbEmpTitle ComboBox](img/3-5.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**Create TableAdapter**: Open `DataSet1`, right-click on it and navigate to
    **Add** | **TableAddapter**, as shown in the following screenshot:![Populate the
    cbEmpTitle ComboBox](img/3-6.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this step, we can create a new connection string to our database or use
    the connection string that we created to connect to our database in **Server Explorer**.
    Here we will use the one we created before and then click on the **Next** button;
    as we will see the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Populate the cbEmpTitle ComboBox](img/3-7.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'In our application, we will use the SQL statement to access the database, so
    select **Use SQL Statements** and click on the **Next** button to see the following
    screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Populate the cbEmpTitle ComboBox](img/3-8.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'In this dialog we will write the SQL query that we prepared in the previous
    step and click on the **Next** button to see the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Populate the cbEmpTitle ComboBox](img/3-9.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'In this dialog we will change the method names to `FillTitle` and `GetTitle`
    then click on the **Next** button to see the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Populate the cbEmpTitle ComboBox](img/3-10.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'We need to see this dialog to be sure that all the processes are configured
    successfully, then click on the **Finish** button to see the TableAdapter shown
    in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Populate the cbEmpTitle ComboBox](img/3-11.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: In the previous screenshot, we changed the DataTable name to `EmpTitle` and
    TableAdapter name to `EmpTitleTableAdapter`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Set comboboxDataSource**: Open the Main Form; right-click on it and select
    **View Code**. We will create a new method to publish our ComboBox data. Refer
    to the following screenshot:![Populate the cbEmpTitle ComboBox](img/3-12.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `PublishEmpTitle` method, we create the object from `DataSet1` named
    `ds` and create another object from `EmpTitleTableAdapter` named `Adapter`. Then
    we fill our dataset `ds` by t`ableadapterAdapter` using the `FillTitle` method.
    In the end, we assign the `cbEmpTitleDataSource` to `ds` and `DisplayMember` to
    Title.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Update Load event**: In the Main Form Load event `MainForm_Load`, we will
    call our method `PublishEmpTitle` as we can see in the following screenshot:![Populate
    the cbEmpTitle ComboBox](img/3-13.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Test the result**: Run our application to test the result. We can see that
    our ComboBox title is now filled with data; as seen in the following screenshot:![Populate
    the cbEmpTitle ComboBox](img/3-14.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Populate the cbEmpCity ComboBox
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Select data**: We need to fill this ComboBox with all cities without any
    duplication. Refer to the following screenshot:![Populate the cbEmpCity ComboBox](img/3-15.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Create TableAdapter**: Please follow the same steps as in the last section
    to create the TableAdapter and name it as `EmpCity`. The TableAdapter will look
    like the following screenshot:![Populate the cbEmpCity ComboBox](img/3-16.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Set comboboxDataSource**: Refer to the code in the following screenshot:![Populate
    the cbEmpCity ComboBox](img/3-17.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Update Load event**: Refer to the code in the following screenshot:![Populate
    the cbEmpCity ComboBox](img/3-18.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Test the result**: The result will look like the following screenshot:![Populate
    the cbEmpCity ComboBox](img/3-19.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Populate the cbEmpCountry ComboBox
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Select data**: We need to fill this ComboBox with all employee countries
    without any duplication, as shown in the following screenshot:![Populate the cbEmpCountry
    ComboBox](img/3-20.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Create TableAdapter**: Please follow the same steps as before to create the
    TableAdapter. The TableAdapter will look like the following screenshot:![Populate
    the cbEmpCountry ComboBox](img/3-21.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Set comboboxDataSource**: Refer to the code in the following screenshot:![Populate
    the cbEmpCountry ComboBox](img/3-22.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Update Load event**: Refer to the code in the following screenshot:![Populate
    the cbEmpCountry ComboBox](img/3-23.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Test the result**: The result will look like the following screenshot:![Populate
    the cbEmpCountry ComboBox](img/3-24.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Populate the cbProductsCategory ComboBox
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Select data**: We need to fill this ComboBox with all product categories
    without any duplication. Refer to the following screenshot:![Populate the cbProductsCategory
    ComboBox](img/3-25.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Create TableAdapter**: Again, please follow the same steps as before to create
    the TableAdapter. The TableAdapter will look like the following screenshot:![Populate
    the cbProductsCategory ComboBox](img/3-26.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Set comboboxDataSource**: Refer to the code in the following screenshot:![Populate
    the cbProductsCategory ComboBox](img/3-27.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Update Load event**: Refer to the code in the following screenshot:![Populate
    the cbProductsCategory ComboBox](img/3-28.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Test the result**: The result will look like the following screenshot:![Populate
    the cbProductsCategory ComboBox](img/3-29.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Populate cbOrdersCountry ComboBox
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Select data**: We need to fill this ComboBox with all the countries in the
    `Customers` table without any duplication. Refer to the following screenshot:![Populate
    cbOrdersCountry ComboBox](img/3-30.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Create TableAdapter**: Please follow the same steps as before to create the
    TableAdapter. The TableAdapter will look like the following screenshot:![Populate
    cbOrdersCountry ComboBox](img/3-31.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Set comboboxDataSource**: Refer to the code in the following screenshot:![Populate
    cbOrdersCountry ComboBox](img/3-32.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Update Load event**: To do this, please refer to the code in the following
    screenshot:![Populate cbOrdersCountry ComboBox](img/3-33.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Test the result**: The result will look like the following screenshot:![Populate
    cbOrdersCountry ComboBox](img/3-34.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Valid data is more critical than the report design, so we need to select the
    right data before displaying this data in the report. Before we start any reporting
    application, we need to understand the database/data very well to ensure that
    our report has the correct data. In this chapter, we learned how to write our
    Select query in Visual Studio and how to run this query. We learned how to fill
    the ComboBox using the DataAdapter. In the next chapter, we begin to use Crystal
    Reports and we will see how to display this report in our application.
  prefs: []
  type: TYPE_NORMAL
