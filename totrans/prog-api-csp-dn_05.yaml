- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Data Validation
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据验证
- en: Sending data from your API to the database only to find out that the input is
    invalid is unnecessarily expensive. Far better is to test the data on the way
    in to make sure it meets basic criteria. This preliminary set of tests (known
    as validation) examines the input data to make sure it meets the minimum criteria
    and that it is formatted properly.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 只要将数据从你的 API 发送到数据库，却发现输入无效，这是不必要的昂贵。更好的做法是在数据进入时对其进行测试，以确保它符合基本标准。这个初步的测试集（称为验证）检查输入数据，以确保它符合最低标准，并且格式正确。
- en: 'In this chapter, you will learn the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习以下内容：
- en: How to validate input data
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何验证输入数据
- en: How to respond to invalid data
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何响应无效数据
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For this chapter, create a new branch off the existing **data transfer object**
    ( **DTO** ) branch (so that we start with valid data). You will need the following:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，从现有的**数据传输对象**（**DTO**）分支创建一个新的分支（这样我们就可以从有效数据开始）。你需要以下内容：
- en: '**Visual Studio**'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Visual Studio**'
- en: '**AutoMapper**'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AutoMapper**'
- en: '**FluentValidation**'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**FluentValidation**'
- en: 'The **FluentValidation** library is a powerful tool for creating validators
    that we will use throughout this chapter. You can install it in various ways,
    but the easiest is as a NuGet package. You’ll also want the package for ASP.NET,
    as shown in *Figure 5* *.1* :'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**FluentValidation**库是一个强大的工具，我们将在本章中使用它来创建验证器。你可以以各种方式安装它，但最简单的方式是作为一个 NuGet
    包。你还需要 ASP.NET 的包，如图 *图 5* *.1* 所示：'
- en: '![Figure 5.1 – NuGet installation](img/B21998_05_1.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.1 – NuGet 安装](img/B21998_05_1.jpg)'
- en: Figure 5.1 – NuGet installation
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.1 – NuGet 安装
- en: You can find the complete documentation for **FluentValidation** at [https://docs.fluentvalidation.net/en/latest/index.html#](https://docs.fluentvalidation.net/en/latest/index.html#)
    . I will provide detailed steps as we go along.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://docs.fluentvalidation.net/en/latest/index.html#](https://docs.fluentvalidation.net/en/latest/index.html#)找到**FluentValidation**的完整文档。我将在进行过程中提供详细的步骤。
- en: 'The code files for this chapter can be found in the GitHub repository here:
    [https://github.com/PacktPublishing/Programming-APIs-with-C-Sharp-and-.NET/tree/main/Chapter05](https://github.com/PacktPublishing/Programming-APIs-with-C-Sharp-and-.NET/tree/main/Chapter05)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在以下 GitHub 仓库中找到：[https://github.com/PacktPublishing/Programming-APIs-with-C-Sharp-and-.NET/tree/main/Chapter05](https://github.com/PacktPublishing/Programming-APIs-with-C-Sharp-and-.NET/tree/main/Chapter05)
- en: Tuning your API
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整你的 API
- en: Now that we have the fundamentals for our program, we want to validate the data
    that is coming in, both to speed things up and to protect against malicious data.
    We can do that with validation, but first, we need to make a couple of changes
    to give us good code to work with.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经为我们的程序打下了基础，我们想要验证传入的数据，这样既可以加快速度，也可以防止恶意数据。我们可以通过验证来实现这一点，但首先，我们需要做一些修改，以便我们有一个好的代码来工作。
- en: Paging
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分页
- en: Remember that we are simulating an automobile buying and selling application.
    There can be literally hundreds of cars in our database. We need to add paging
    to our **Get** endpoint so that when we get the list of vehicles, they don’t all
    come down at once. This will also give us something to validate.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，我们正在模拟一个汽车买卖应用程序。我们的数据库中可能有成百上千辆汽车。我们需要在我们的**Get**端点中添加分页，这样当我们获取车辆列表时，它们不会一次性全部下载。这也会给我们一些东西来验证。
- en: 'To facilitate this, we need to know the following:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便起见，我们需要知道以下内容：
- en: How big the page is – that is, the number of cars on each page
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页面的大小——也就是说，每页上的汽车数量
- en: The index of the page the client wants to see
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端想要查看的页码索引
- en: 'We’ll accomplish this by modifying our **Get** endpoint to take two additional
    parameters:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过修改我们的**Get**端点来接受两个额外的参数来实现这一点：
- en: '**pageOffset**'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pageOffset**'
- en: '**pageSize**'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pageSize**'
- en: 'Both of these are **int** data types, as shown here:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个都是**int**数据类型，如下所示：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The first new parameter ( **pageNumber** ) will tell **Get** which page it
    is on, and the second ( **pageSize** ) will tell how many rows to get. Let’s look
    at an example in Postman, as shown in *Figure 5* *.2* :'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个新参数（**pageNumber**）将告诉**Get**它位于哪一页，第二个（**pageSize**）将告诉获取多少行。让我们看看 Postman
    中的示例，如图 *图 5* *.2* 所示：
- en: '![Figure 5.2 – Paging](img/B21998_05_2.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.2 – 分页](img/B21998_05_2.jpg)'
- en: Figure 5.2 – Paging
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.2 – 分页
- en: Here, we have set **pageNumber** to **0** , indicating we want to start at the
    beginning of the list, and **pageSize** to **3** , indicating we want only three
    records. As a result, the API will extract the first three records. If we set
    **pageNumber** to **3** , we will get records **10** , **11** , and **12** (that
    is, start at the fourth page and get the next three records).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将**pageNumber**设置为**0**，表示我们想要从列表的开始处开始，将**pageSize**设置为**3**，表示我们只想获取三条记录。因此，API将提取前三条记录。如果我们将**pageNumber**设置为**3**，我们将得到记录**10**、**11**和**12**（即从第四页开始获取下三条记录）。
- en: One enhancement you might want to make to reduce confusion for the user is to
    subtract 1 from the page number to get the offset. This will allow the user to
    enter Page 1 for offset 0.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为了减少用户混淆，您可能希望对用户进行的一项改进是从页码中减去1以获取偏移量。这将使用户能够输入页码1以获得偏移量0。
- en: Validation
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证
- en: It is a best practice to validate the incoming properties on your endpoint *before*
    executing the associated method. This not only increases the performance of the
    API, but it also protects you from some forms of hacking (for example, injection).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行相关方法之前验证端点上的传入属性是一种最佳实践。这不仅提高了API的性能，还能保护您免受某些形式的黑客攻击（例如，注入）。
- en: Our recommendation is to use the **FluentValidation** NuGet package, which you
    can install as shown in the *Technical requirements* section at the start of this
    chapter.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的建议是使用**FluentValidation** NuGet包，您可以在本章开头的技术要求部分中按如下所示安装。
- en: Once installed, you have many options as to how to capture errors. Let’s look
    at a few.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，您有多个选项来捕获错误。让我们看看几个例子。
- en: Capturing errors
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 捕获错误
- en: 'You’ll remember that our **Car** object (defined in [*Chapter 3*](B21998_03.xhtml#_idTextAnchor038)
    ) looks like this:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 您会记得我们的**Car**对象（在[*第3章*](B21998_03.xhtml#_idTextAnchor038)中定义）看起来是这样的：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let’s also say that cars must not be deleted. You can create a validator for
    that pretty quickly. First, add a **Using** statement:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再假设汽车不能被删除。您可以非常快速地创建一个验证器。首先，添加一个**Using**语句：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, create a class that derives from **AbstractValidator** :'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个从**AbstractValidator**派生的类：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Finally, put your validation rules in the constructor for that class. Each
    rule is created by using the **RuleFor** keyword and a lambda expression that
    indicates which property you want to validate and the validation rule. Our simple
    example will look like this:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将验证规则放入该类的构造函数中。每个规则都是通过使用**RuleFor**关键字和一个lambda表达式来创建的，该表达式指示您想要验证哪个属性以及验证规则。我们的简单示例将如下所示：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The **Equal** operator is one of many that you can find on the **FluentValidation**
    documentation page: [https://docs.fluentvalidation.net/en/latest/built-in-validators.html](https://docs.fluentvalidation.net/en/latest/built-in-validators.html)
    .'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**Equal**运算符是您可以在**FluentValidation**文档页面上找到的许多运算符之一：[https://docs.fluentvalidation.net/en/latest/built-in-validators.html](https://docs.fluentvalidation.net/en/latest/built-in-validators.html)
    。'
- en: We’ll test the data and then either compare it to what is valid and return an
    error if appropriate, or, more commonly, we’ll throw an exception if the data
    fails validation.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将测试数据，然后根据需要将其与有效数据进行比较，并在适当的情况下返回错误，或者更常见的是，如果数据未通过验证，我们将抛出异常。
- en: Testing the return value
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试返回值
- en: 'There are a number of ways to deal with a validation error. One is to return
    an error to the calling method. Thus, to validate a **Car** object, conceptually
    you want the following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 处理验证错误有多种方法。一种是将错误返回给调用方法。因此，为了验证**Car**对象，从概念上讲，您希望以下内容：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In our **insert** method, we’ll check to make sure **CarDto** is valid (in
    this case, that it is not deleted):'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的**insert**方法中，我们将检查确保**CarDto**是有效的（在这种情况下，它没有被删除）：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Let’s take a look at returning an error code for data that fails our validation
    check.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何为未通过验证检查的数据返回错误代码。
- en: Returning an error
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 返回错误
- en: 'If we now send **CarDto** to the endpoint using Postman but set **Is_Deleted**
    to **1** , we will get an error as shown in *Figure 5* *.3* :'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在使用Postman将**CarDto**发送到端点，但将**Is_Deleted**设置为**1**，我们将得到如图5.3所示的错误：
- en: '![Figure 5.3 – Validation error](img/B21998_05_3.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图5.3 – 验证错误](img/B21998_05_3.jpg)'
- en: Figure 5.3 – Validation error
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.3 – 验证错误
- en: Notice that the return HTTP value is **400 – Bad Request** . This makes sense
    as the DTO passed in was not valid.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到返回的HTTP值是**400 – Bad Request**。这很合理，因为传入的DTO无效。
- en: Adding a custom message
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加自定义消息
- en: This input is great and provides a lot of information, but the **1** value that
    is in the **Is_Deleted** field has meaning; specifically that the record is already
    deleted. This fails the validation check.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这个输入很棒，提供了很多信息，但 **Is_Deleted** 字段中的 **1** 值有特殊含义；具体来说，这意味着记录已经被删除。这导致验证检查失败。
- en: 'We can make the error clearer with a custom message. Return to **CarDtoValidator**
    and modify the rule as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过自定义消息使错误更清晰。返回到 **CarDtoValidator** 并按如下修改规则：
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You can see a new error message in *Figure 5* *.4* :'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 *图 5.4* 中看到新的错误消息：
- en: '![Figure 5.4 – Custom error message](img/B21998_05_4.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.4 – 自定义错误消息](img/B21998_05_4.jpg)'
- en: Figure 5.4 – Custom error message
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.4 – 自定义错误消息
- en: Custom messages provide vital information to your client. They help avoid confusion
    and make immediately clear what is wrong with the submitted data.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义消息为你的客户端提供了关键信息。它们有助于避免混淆，并立即清楚地表明提交的数据有什么问题。
- en: Chaining
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 链式调用
- en: 'If you want to validate more than one aspect of a property, you can chain tests
    using the **dot** operator:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想验证属性的多方面，你可以使用 **点** 操作符来链式调用测试：
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This test ensures that the **Is_Deleted** field is not empty and also verifies
    that its value is equal to **0** , and returns an error message if the submitted
    value is not valid.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试确保 **Is_Deleted** 字段不为空，并验证其值等于 **0**，如果提交的值无效，则返回错误消息。
- en: The default is that even if the first test ( **NotEmpty** ) fails, the second
    test will run ( **Equal("0"** ). You can prevent this by using **CascadeMode**
    .
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，即使第一个测试（**NotEmpty**）失败，第二个测试（**Equal("0"**）也会运行。你可以通过使用 **CascadeMode**
    来防止这种情况。
- en: 'If you do not want the second test ( **NotEmpty** ) to run if the first test
    ( **Is_Deleted** ) fails, use **CascadeMode.Stop** as shown here:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想在第一个测试（**Is_Deleted**）失败时运行第二个测试（**NotEmpty**），请使用 **CascadeMode.Stop**，如下所示：
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This now works like **&&** in C# – that is, if the first test fails the second
    is never evaluated. The two values for **CascadeMode** are **Stop** and **Continue**
    , with the latter being the default.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这现在在 C# 中像 **&&** 一样工作——也就是说，如果第一个测试失败，第二个测试将不会被执行。**CascadeMode** 的两个值是 **Stop**
    和 **Continue**，后者是默认值。
- en: Throwing an exception
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 抛出异常
- en: 'As an alternative to validating and then checking the result, you can call
    **ValidateAndThrow** . With this terser expression each of your rules will be
    evaluated, and if one fails, an exception will be thrown:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 作为验证并检查结果的一种替代方法，你可以调用 **ValidateAndThrow**。使用这个更简洁的表达式，每个规则都会被评估，如果其中一个失败，则会抛出异常：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The exception that is thrown is of type **ValidationException** , so you can
    test for that in your **catch** blocks. In addition, that exception has an **Errors**
    property, which has the error message for your failed attempt.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 抛出的异常是 **ValidationException** 类型，因此你可以在你的 **catch** 块中测试它。此外，该异常有一个 **Errors**
    属性，其中包含你的失败尝试的错误信息。
- en: 'In the next code snippet, you can see how to set up to throw an exception if
    the validation fails. We create the validator and then call **ValidateAndThrow**
    , passing in the **Dto** object. You can then catch that exception and examine
    the errors:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个代码片段中，你可以看到如何设置在验证失败时抛出异常。我们创建验证器，然后调用 **ValidateAndThrow**，传入 **Dto** 对象。然后你可以捕获该异常并检查错误：
- en: '[PRE11]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: To save you the time and effort of creating custom validators for common scenarios,
    **FluentValidation** provides a number of built-in validators.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 为了节省你创建自定义验证器用于常见场景的时间和精力，**FluentValidation** 提供了多个内置验证器。
- en: Built-in validators
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内置验证器
- en: 'There is a cornucopia of built-in validators in addition to the **Equal** and
    **NotEmpty** validators we’ve seen so far. I won’t provide a comprehensive list
    (see the documentation) but one of the most interesting is the **PredicateValidator**
    validator. This passes the value of the property to a delegate, which can use
    custom validation logic. This is accomplished with the keyword **Must** keyword,
    as shown here:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们之前看到的 **Equal** 和 **NotEmpty** 验证器之外，还有许多内置验证器。我不会提供完整的列表（请参阅文档），但其中一个最有趣的是
    **PredicateValidator** 验证器。它将属性的值传递给一个委托，该委托可以使用自定义验证逻辑。这通过使用 **Must** 关键字实现，如下所示：
- en: '[PRE12]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If this validation fails, the issue is displayed in the results as shown in
    *Figure 5* *.5* :'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个验证失败，问题将如 *图 5.5* 所示显示在结果中：
- en: '![Figure 5.5 – PredicateValidator error](img/B21998_05_5.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.5 – PredicateValidator 错误](img/B21998_05_5.jpg)'
- en: Figure 5.5 – PredicateValidator error
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.5 – PredicateValidator 错误
- en: 'There is a **RegularExpression** validator that uses the **Matches** keyword
    (instead of **Must** ), but one of my favorites is **EmailValidator** , which
    ensures that the value submitted is a valid email. Similarly, there is a **CreditCard**
    validator:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个使用 **正则表达式** 验证器，它使用 **Matches** 关键字（而不是 **Must** ），但我最喜欢的是 **EmailValidator**，它确保提交的值是一个有效的电子邮件地址。同样，还有一个
    **CreditCard** 验证器：
- en: '[PRE13]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: There are quite a few more, such as **NotNull** , **NotEmpty** , **Equal** ,
    **NotEqual** , and so forth.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更多，例如 **NotNull**、**NotEmpty**、**Equal**、**NotEqual** 等等。
- en: 'The best place to see a complete list of built-in validators and how to use
    them is in the **FluentValidation** documentation: [https://docs.fluentvalidation.net/en/latest/index.html#](https://docs.fluentvalidation.net/en/latest/index.html#)
    .'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看内置验证器的完整列表以及如何使用它们，最佳位置是在 **FluentValidation** 文档中：[https://docs.fluentvalidation.net/en/latest/index.html#](https://docs.fluentvalidation.net/en/latest/index.html#)
    。
- en: Summary
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you saw how to use **FluentValidation** to validate input properties
    before executing code for the API.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你看到了如何在使用 API 的代码执行之前，使用 **FluentValidation** 验证输入属性。
- en: You saw how to create rules, how to chain them, and how to ensure that a second
    rule in a chain is not evaluated if the first fails.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你看到了如何创建规则，如何将它们链接起来，以及如何确保在链中的第一个规则失败时，第二个规则不会被评估。
- en: You learned two ways of dealing with errors – testing the return error or throwing
    an exception – and you saw how to create a custom error message.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 你学习了两种处理错误的方式——测试返回的错误或抛出异常——以及你看到了如何创建自定义错误消息。
- en: In the next chapter, we will turn our attention to Azure Functions – a critical
    part of programming APIs in .NET. Following that, we will look at Durable Azure
    Functions and what they add to Azure Functions.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将把注意力转向 Azure Functions——.NET 中编程 API 的关键部分。随后，我们将探讨可持久化的 Azure Functions
    以及它们为 Azure Functions 增加了什么。
- en: You try it
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你试试看
- en: Create a set of rules for the **Car** class (or another class you create) and
    throw an exception if a validation rule is violated. Ensure that the failure of
    the validation is handled.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 为 **Car** 类（或你创建的另一个类）创建一组规则，如果违反验证规则则抛出异常。确保处理验证失败的情况。
- en: As a bonus, create a predicate ( **must** ) custom rule and test against that.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 作为额外奖励，创建一个（**必须**）自定义规则并对其进行测试。
