["```cs\npublic static class PriceCalc\n{\n    public static decimal Discount(this decimal price, decimal discount) => \n        price * discount / 100;\n\n    public static decimal PriceAfterDiscount(this decimal price, decimal discount) =>\n        decimal.Round(price - Discount(price, discount));\n}\n```", "```cs\npublic static decimal Discount(this decimal price, ValidDiscount validDiscount)\n{\n    return price * validDiscount.Discount / 100;\n}\n```", "```cs\nprivate readonly Func<decimal, bool> _vallidDiscount = d => d > 0 || d % 100 <= 1;\n```", "```cs\npublic IEnumerable<DiscountViewModel> FilterOutInvalidDiscountRates(\n    IEnumerable<DiscountViewModel> discountViewModels)\n{\n    var viewModels = discountViewModels.ToList();\n    var res = viewModels.Select(x => x.Discount).Where(_vallidDiscount);\n    return viewModels.Where(x => res.Contains(x.Discount));\n}\n```", "```cs\npublic class DiscountViewModel\n{\n    public Guid ProductId { get; set; }\n    public string ProductName { get; set; }\n    public decimal Price { get; set; }\n    public decimal Discount { get; set; }\n    public decimal Amount { get; set; }\n}\n```", "```cs\nprivate static readonly TextInfo TextInfo = new CultureInfo(\"en-US\", false).TextInfo;\nprivate readonly Predicate<string> _isProductNameTitleCase = s => s.Equals(TextInfo.ToTitleCase(s));\n```", "```cs\npublic IEnumerable<ProductViewModel> FilterOutInvalidProductNames(\n    IEnumerable<ProductViewModel> productViewModels) => productViewModels.ToList()\n    .Where(p => _isProductNameTitleCase(p.ProductName));\n```", "```cs\npublic interface IHelper\n{\n    IEnumerable<DiscountViewModel> FilterOutInvalidDiscountRates(\n        IEnumerable<DiscountViewModel> discountViewModels);\n\n    IEnumerable<ProductViewModel> FilterOutInvalidProductNames(\n        IEnumerable<ProductViewModel> productViewModels);\n}\n```", "```cs\npublic class Helper : IHelper\n{\n    private static readonly TextInfo TextInfo = new CultureInfo(\"en-US\", false).TextInfo;\n    private readonly Predicate<string> _isProductNameTitleCase = s => s.Equals(TextInfo.ToTitleCase(s));\n    private readonly Func<decimal, bool> _vallidDiscount = d => d == 0 || d - 100 <= 1;\n\n    public IEnumerable<DiscountViewModel> FilterOutInvalidDiscountRates(\n        IEnumerable<DiscountViewModel> discountViewModels)\n    {\n        var viewModels = discountViewModels.ToList();\n        var res = viewModels.Select(x => x.ProductDiscountRate).Where(_vallidDiscount);\n        return viewModels.Where(x => res.Contains(x.ProductDiscountRate));\n    }\n\n    public IEnumerable<ProductViewModel> FilterOutInvalidProductNames(\n        IEnumerable<ProductViewModel> productViewModels) => productViewModels.ToList()\n        .Where(p => _isProductNameTitleCase(p.ProductName));\n}\n```", "```cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddTransient<IInventoryRepositry, InventoryRepositry>();\n    services.AddTransient<IHelper, Helper>();\n    services.AddDbContext<InventoryContext>(o => o.UseSqlServer(Configuration.GetConnectionString(\"FlixOneDbConnection\")));\n    services.Configure<CookiePolicyOptions>(options =>\n    {\n        // This lambda determines whether user consent for non-essential cookies is needed for a given request.\n        options.CheckConsentNeeded = context => true;\n        options.MinimumSameSitePolicy = SameSiteMode.None;\n    });\n}\n```", "```cs\npublic class InventoryRepositry : IInventoryRepositry\n{\n    private readonly IHelper _helper;\n    private readonly InventoryContext _inventoryContext;\n\n    public InventoryRepositry(InventoryContext inventoryContext, IHelper helper)\n    {\n        _inventoryContext = inventoryContext;\n        _helper = helper;\n    }\n\n... \n}\n```", "```cs\n    public IEnumerable<Discount> GetDiscountBy(Guid productId, bool activeOnly = false)\n        {\n            var discounts = activeOnly\n                ? GetDiscounts().Where(d => d.ProductId == productId && d.Active)\n                : GetDiscounts().Where(d => d.ProductId == productId);\n            var product = _inventoryContext.Products.FirstOrDefault(p => p.Id == productId);\n            var listDis = new List<Discount>();\n            foreach (var discount in discounts)\n            {\n                if (product != null)\n                {\n                    discount.ProductName = product.Name;\n                    discount.ProductPrice = product.Price;\n                }\n\n                listDis.Add(discount);\n            }\n\n            return listDis;\n        }\n```", "```cs\n    public IEnumerable<DiscountViewModel> GetValidDiscoutedProducts(\n        IEnumerable<DiscountViewModel> discountViewModels)\n    {\n        return _helper.FilterOutInvalidDiscountRates(discountViewModels);\n    }\n}\n```", "```cs\npublic class DiscountController : Controller\n{\n    private readonly IInventoryRepositry _repositry;\n\n    public DiscountController(IInventoryRepositry inventoryRepositry)\n    {\n        _repositry = inventoryRepositry;\n    }\n\n    public IActionResult Index()\n    {\n        return View(_repositry.GetDiscounts().ToDiscountViewModel());\n    }\n\n    public IActionResult Details(Guid id)\n    {\n        return View(\"Index\", _repositry.GetDiscountBy(id).ToDiscountViewModel());\n    }\n}\n```", "```cs\npublic static IEnumerable<T> Where<T>\n    (this IEnumerable<T> source, Func<T, bool> criteria)\n{\n    foreach (var item in source)\n        if (criteria(item))\n            yield return item;\n}\n```", "```cs\npublic static IEnumerable<T> SimplifiedWhere<T>\n    (this IEnumerable<T> source, Func<T, bool> criteria) => \n    Enumerable.Where(source, criteria);\n```", "```cs\npublic IEnumerable<ProductViewModel>\n    GetProductsAbovePrice(IEnumerable<ProductViewModel> productViewModels, decimal price) =>\n    productViewModels.SimplifiedWhere(p => p.ProductPrice > price);\n```"]