["```cs\n    using System;\n    using System.Threading;\n    using static System.Console;\n    ```", "```cs\n    static void TestCounter(CounterBase c)\n    {\n      for (int i = 0; i < 100000; i++)\n      {\n        c.Increment();\n        c.Decrement();\n      }\n    }\n\n    class Counter : CounterBase\n    {\n      private int _count;\n\n      public int Count => _count;\n\n      public override void Increment()\n      {\n        _count++;\n      }\n\n      public override void Decrement()\n      {\n        _count--;\n      }\n    }\n\n    class CounterNoLock : CounterBase\n    {\n      private int _count;\n\n      public int Count => _count;\n\n      public override void Increment()\n      {\n        Interlocked.Increment(ref _count);\n      }\n\n      public override void Decrement()\n      {\n        Interlocked.Decrement(ref _count);\n      }\n    }\n\n    abstract class CounterBase\n    {\n      public abstract void Increment();\n\n      public abstract void Decrement();\n    }\n    ```", "```cs\n    WriteLine(\"Incorrect counter\");\n\n    var c = new Counter();\n\n    var t1 = new Thread(() => TestCounter(c));\n    var t2 = new Thread(() => TestCounter(c));\n    var t3 = new Thread(() => TestCounter(c));\n    t1.Start();\n    t2.Start();\n    t3.Start();\n    t1.Join();\n    t2.Join();\n    t3.Join();\n\n    WriteLine($\"Total count: {c.Count}\");\n    WriteLine(\"--------------------------\");\n\n    WriteLine(\"Correct counter\");\n\n    var c1 = new CounterNoLock();\n\n    t1 = new Thread(() => TestCounter(c1));\n    t2 = new Thread(() => TestCounter(c1));\n    t3 = new Thread(() => TestCounter(c1));\n    t1.Start();\n    t2.Start();\n    t3.Start();\n    t1.Join();\n    t2.Join();\n    t3.Join();\n\n    WriteLine($\"Total count: {c1.Count}\");\n    ```", "```cs\n    using System;\n    using System.Threading;\n    using static System.Console;\n    ```", "```cs\n    const string MutexName = \"CSharpThreadingCookbook\";\n\n    using (var m = new Mutex(false, MutexName))\n    {\n      if (!m.WaitOne(TimeSpan.FromSeconds(5), false))\n      {\n        WriteLine(\"Second instance is running!\");\n      }\n      else\n      {\n        WriteLine(\"Running!\");\n        ReadLine();\n        m.ReleaseMutex();\n      }\n    }\n    ```", "```cs\n    using System;\n    using System.Threading;\n    using static System.Console;\n    using static System.Threading.Thread;\n    ```", "```cs\n    static SemaphoreSlim _semaphore = new SemaphoreSlim(4);\n\n    static void AccessDatabase(string name, int seconds)\n    {\n      WriteLine($\"{name} waits to access a database\");\n      _semaphore.Wait();\n      WriteLine($\"{name} was granted an access to a database\");\n      Sleep(TimeSpan.FromSeconds(seconds));\n      WriteLine($\"{name} is completed\");\n      _semaphore.Release();\n    }\n    ```", "```cs\n    for (int i = 1; i <= 6; i++)\n    {\n      string threadName = \"Thread \" + i;\n      int secondsToWait = 2 + 2 * i;\n      var t = new Thread(() => AccessDatabase(threadName, secondsToWait));\n      t.Start();\n    }\n    ```", "```cs\n    using System;\n    using System.Threading;\n    using static System.Console;\n    using static System.Threading.Thread;\n    ```", "```cs\n    private static AutoResetEvent _workerEvent = new AutoResetEvent(false);\n    private static AutoResetEvent _mainEvent = new AutoResetEvent(false);\n\n    static void Process(int seconds)\n    {\n      WriteLine(\"Starting a long running work...\");\n      Sleep(TimeSpan.FromSeconds(seconds));\n      WriteLine(\"Work is done!\");\n      _workerEvent.Set();\n      WriteLine(\"Waiting for a main thread to complete its work\");\n      _mainEvent.WaitOne();\n      WriteLine(\"Starting second operation...\");\n      Sleep(TimeSpan.FromSeconds(seconds));\n      WriteLine(\"Work is done!\");\n      _workerEvent.Set();\n    }\n    ```", "```cs\n    var t = new Thread(() => Process(10));\n    t.Start();\n\n    WriteLine(\"Waiting for another thread to complete work\");\n    _workerEvent.WaitOne();\n    WriteLine(\"First operation is completed!\");\n    WriteLine(\"Performing an operation on a main thread\");\n    Sleep(TimeSpan.FromSeconds(5));\n    _mainEvent.Set();\n    WriteLine(\"Now running the second operation on a second thread\");\n    _workerEvent.WaitOne();\n    WriteLine(\"Second operation is completed!\");\n    ```", "```cs\n    using System;\n    using System.Threading;\n    using static System.Console;\n    using static System.Threading.Thread;\n    ```", "```cs\n    static void TravelThroughGates(string threadName, int seconds)\n    {\n      WriteLine($\"{threadName} falls to sleep\");\n      Sleep(TimeSpan.FromSeconds(seconds));\n      WriteLine($\"{threadName} waits for the gates to open!\");\n      _mainEvent.Wait();\n      WriteLine($\"{threadName} enters the gates!\");\n    }\n\n    static ManualResetEventSlim _mainEvent = new ManualResetEventSlim(false);\n    ```", "```cs\n    var t1 = new Thread(() => TravelThroughGates(\"Thread 1\", 5));\n    var t2 = new Thread(() => TravelThroughGates(\"Thread 2\", 6));\n    var t3 = new Thread(() => TravelThroughGates(\"Thread 3\", 12));\n    t1.Start();\n    t2.Start();\n    t3.Start();\n    Sleep(TimeSpan.FromSeconds(6));\n    WriteLine(\"The gates are now open!\");\n    _mainEvent.Set();\n    Sleep(TimeSpan.FromSeconds(2));\n    _mainEvent.Reset();\n    WriteLine(\"The gates have been closed!\");\n    Sleep(TimeSpan.FromSeconds(10));\n    WriteLine(\"The gates are now open for the second time!\");\n    _mainEvent.Set();\n    Sleep(TimeSpan.FromSeconds(2));\n    WriteLine(\"The gates have been closed!\");\n    _mainEvent.Reset();\n    ```", "```cs\n    using System;\n    using System.Threading;\n    using static System.Console;\n    using static System.Threading.Thread;\n    ```", "```cs\n    static CountdownEvent _countdown = new CountdownEvent(2);\n\n    static void PerformOperation(string message, int seconds)\n    {\n      Sleep(TimeSpan.FromSeconds(seconds));\n      WriteLine(message);\n      _countdown.Signal();\n    }\n    ```", "```cs\n    WriteLine(\"Starting two operations\");\n    var t1 = new Thread(() => PerformOperation(\"Operation 1 is completed\", 4));\n    var t2 = new Thread(() => PerformOperation(\"Operation 2 is completed\", 8));\n    t1.Start();\n    t2.Start();\n    _countdown.Wait();\n    WriteLine(\"Both operations have been completed.\");\n    _countdown.Dispose();\n    ```", "```cs\n    using System;\n    using System.Threading;\n    using static System.Console;\n    using static System.Threading.Thread;\n    ```", "```cs\n    static Barrier _barrier = new Barrier(2,\n      b => WriteLine($\"End of phase {b.CurrentPhaseNumber + 1}\"));\n\n    static void PlayMusic(string name, string message, int seconds)\n    {\n      for (int i = 1; i < 3; i++)\n      {\n        WriteLine(\"----------------------------------------------\");\n        Sleep(TimeSpan.FromSeconds(seconds));\n        WriteLine($\"{name} starts to {message}\");\n        Sleep(TimeSpan.FromSeconds(seconds));\n        WriteLine($\"{name} finishes to {message}\");\n        _barrier.SignalAndWait();\n      }\n    }\n    ```", "```cs\n    var t1 = new Thread(() => PlayMusic(\"the guitarist\", \"play an amazing solo\", 5));\n    var t2 = new Thread(() => PlayMusic(\"the singer\", \"sing his song\", 2));\n\n    t1.Start();\n    t2.Start();\n    ```", "```cs\n    using System;\n    using System.Collections.Generic;\n    using System.Threading;\n    using static System.Console;\n    using static System.Threading.Thread;\n    ```", "```cs\n    static ReaderWriterLockSlim _rw = new ReaderWriterLockSlim();\n    static Dictionary<int, int> _items = new Dictionary<int, int>();\n\n    static void Read()\n    {\n      WriteLine(\"Reading contents of a dictionary\");\n      while (true)\n      {\n        try\n        {\n          _rw.EnterReadLock();\n          foreach (var key in _items.Keys)\n          {\n            Sleep(TimeSpan.FromSeconds(0.1));\n          }\n        }\n        finally\n        {\n          _rw.ExitReadLock();\n        }\n      }\n    }\n\n    static void Write(string threadName)\n    {\n      while (true)\n      {\n        try\n        {\n          int newKey = new Random().Next(250);\n          _rw.EnterUpgradeableReadLock();\n          if (!_items.ContainsKey(newKey))\n          {\n            try\n            {\n              _rw.EnterWriteLock();\n              _items[newKey] = 1;\n              WriteLine($\"New key {newKey} is added to a dictionary by a {threadName}\");\n            }\n            finally\n            {\n              _rw.ExitWriteLock();\n            }\n          }\n          Sleep(TimeSpan.FromSeconds(0.1));\n        }\n        finally\n        {\n          _rw.ExitUpgradeableReadLock();\n        }\n      }\n    }\n    ```", "```cs\n    new Thread(Read){ IsBackground = true }.Start();\n    new Thread(Read){ IsBackground = true }.Start();\n    new Thread(Read){ IsBackground = true }.Start();\n\n    new Thread(() => Write(\"Thread 1\")){ IsBackground = true }.Start();\n    new Thread(() => Write(\"Thread 2\")){ IsBackground = true }.Start();\n\n    Sleep(TimeSpan.FromSeconds(30)); \n    ```", "```cs\n    using System;\n    using System.Threading;\n    using static System.Console;\n    using static System.Threading.Thread;\n    ```", "```cs\n    static volatile bool _isCompleted = false;\n\n    static void UserModeWait()\n    {\n      while (!_isCompleted)\n      {\n        Write(\".\");\n      }\n      WriteLine();\n      WriteLine(\"Waiting is complete\");\n    }\n\n    static void HybridSpinWait()\n    {\n      var w = new SpinWait();\n      while (!_isCompleted)\n      {\n        w.SpinOnce();\n        WriteLine(w.NextSpinWillYield);\n      }\n      WriteLine(\"Waiting is complete\");\n    }\n    ```", "```cs\n    var t1 = new Thread(UserModeWait);\n    var t2 = new Thread(HybridSpinWait);\n\n    WriteLine(\"Running user mode waiting\");\n    t1.Start();\n    Sleep(20);\n    _isCompleted = true;\n    Sleep(TimeSpan.FromSeconds(1));\n    _isCompleted = false;\n    WriteLine(\"Running hybrid SpinWait construct waiting\");\n    t2.Start();\n    Sleep(5);\n    _isCompleted = true;\n    ```"]