["```cs\n    public struct Person\n    {\n          public string FirstName { get; set; }\n          public string LastName { get; set; }\n          public string FullName { get { return \n            $\"{FirstName} {LastName}\"; } }\n    public Person(string firstName, string lastName)\n    {\n        FirstName = firstName;\n        LastName = lastName;\n    }\n    }\n    ```", "```cs\n    using BenchmarkDotNet.Attributes;\n    using BenchmarkDotNet.Order;\n    using System.Collections.Generic;\n    using System.Linq;\n    ```", "```cs\n    private List<Person> _people = new List<Person>();\n    private string[] _group1 = new string[] { \"iota\", \n        \"epsilon\", \"sigma\", \"upsilon\" };\n    private string[] _group2 = new string[] { \"alpha\", \n        \"omega\" };\n    ```", "```cs\n    [GlobalSetup]\n    public void PrepareBenchmarks()\n    {\n      _people.Add(new Person(\"Alpha\", \"Beta\"));\n      _people.Add(new Person(\"Chi\", \"Delta\"));\n      _people.Add(new Person(\"Epsilon\", \"Phi\"));\n      _people.Add(new Person(\"Gamma\", \"iota\"));\n      _people.Add(new Person(\"Kappa\", \"Lambda\"));\n      _people.Add(new Person(\"Mu\", \"Nu\"));\n      _people.Add(new Person(\"Omicron\", \"Pi\"));\n      _people.Add(new Person(\"Theta\", \"Rho\"));\n      _people.Add(new Person(\"Sigma\", \"Tau\"));\n      _people.Add(new Person(\"Upsilon\", \"Omega\"));\n      _people.Add(new Person(\"Xi\", \"Psi\"));\n      _people.Add(new Person(\"Zeta\", \"Iota\"));\n      _people.Add(new Person(\"Alpha\", \"Omega\"));\n         _people.Add(new Person(\"Omega\", \"Chi\"));\n         _people.Add(new Person(\"Sigma\", \"Tau\"));\n    }\n    ```", "```cs\n    Microsoft.EntityFrameworkCore\n    Microsoft.EntityFrameworkCore.SqlServer\n    Microsoft.EntityFrameworkCore.Tools\n    Microsoft.Extensions.Configuration\n    Microsoft.Extensions.Configuration.EnvironmentVariables\n    Microsoft.Extensions.Configuration.UserSecrets\n    Microsoft.Extensions.OptionsConfigurationExtensions\n    ```", "```cs\n    {\n      \"DatabaseSettings\": {\n        \"ConnectionString\": \"YOUR_CONNECTION_STRING\"\n      }\n    }\n    ```", "```cs\n    using Microsoft.Extensions.Configuration;\n    using System;\n    using System.IO;\n    ```", "```cs\n    public static IConfigurationRoot Configuration \n        { get; set; }\n    ```", "```cs\n    public static T GetSecrets<T>(string sectionName) \n        where T : class\n    {\n    var devEnvironmentVariable = Environment\n          .GetEnvironmentVariable(\"NETCORE_ENVIRONMENT\");\n    var isDevelopment = string.IsNullOrEmpty\n           (devEnvironmentVariable) || devEnvironment\n                Variable.ToLower() == \"development\";\n    var builder = new ConfigurationBuilder() \n        .SetBasePath(Directory.GetCurrentDirectory())\n    .AddJsonFile(\"appsettings.json\", optional: true, \n        reloadOnChange: true)\n    .AddEnvironmentVariables();\n    if (isDevelopment) //only add secrets in development\n    {\n        builder.AddUserSecrets<T>();\n    }\n    Configuration = builder.Build();\n    return Configuration.GetSection(sectionName).Get<T>();\n    ```", "```cs\n    using System.ComponentModel.DataAnnotations;\n    public class Product\n    {\n           public Product() { }\n           public Product(int id)\n           {\n                Id = id;\n               Name = $\"Item {Id} Name\";\n               Description = $\"Item {Id} description.\";\n             }\n           [Key]\n           public int Id { get; private set; }\n           public string Name { get; private set; }\n           public string Description { get; private set; }\n           public override string ToString()\n           {\n          return $\"Id: {Id}, Name: {Name}, \n            Description: {Description}\";\n           }\n    }\n    ```", "```cs\n    using Microsoft.EntityFrameworkCore;\n    using CH07_LinqPerformance.Models;\n    public class DatabaseContext : DbContext\n    {\n    }\n    ```", "```cs\n    public DbSet<Product> Products { get; set; }\n    public DatabaseContext(string connectionString) : \n        base(GetOptions(connectionString))\n    {\n    }\n    ```", "```cs\n    private static DbContextOptions GetOptions(string \n        connectionString)\n    {\n           return SqlServerDbContextOptionsExtensions\n                 .UseSqlServer(\n                       new DbContextOptionsBuilder(),  \n                       connectionString)\n                 .Options;\n    }\n    ```", "```cs\n    protected override void OnModelCreating(ModelBuilder \n        modelBuilder)\n    {\n           modelBuilder.Entity<Product>(entity =>\n         {\n                     entity.HasKey(e => e.Id);\n               entity.Property(e => e.Name)\n                      .HasMaxLength(50);\n                 Entity.Property(e => e.Description)\n                    .HasMaxLength(255);\n                });\n            }\n    ```", "```cs\n    public class DatabaseSettings\n    {\n          public string ConnectionString { get; set; }\n    }\n    ```", "```cs\n    {\n      \"DatabaseSettings\": {\n        \"ConnectionString\": \"Set in Azure. For \n            development, set in User Secrets\"\n      }\n    }\n    ```", "```cs\n    using BenchmarkDotNet.Attributes;\n    using BenchmarkDotNet.Order;\n    using CH07_Collections.Configuration;\n    using CH07_Collections.Data;\n    using CH07_Collections.Models;\n    using Microsoft.Extensions.Options;\n    using System;\n    using System.Collections.Generic;\n    using System.Diagnostics;\n    using System.Linq;\n    [MemoryDiagnoser]\n    [Orderer(SummaryOrderPolicy.Declared)]\n    [RankColumn]\n    public class DatabaseQueryAndIteration : IDisposable \n    {\n    }\n    ```", "```cs\n    private bool disposedValue;\n    protected virtual void Dispose(bool disposing)\n    {\n        if (!disposedValue) {\n            if (disposing)\n                _context.Dispose();\n            disposedValue = true;\n        }\n    }\n    public void Dispose(){\n        Dispose(disposing: true);\n        GC.SuppressFinalize(this);\n    }\n    ```", "```cs\n    private DatabaseContext _context;\n    [GlobalSetup]\n    public void GlobalSetup()\n    {\n          var connectionString = SecretsManager\n            .GetSecrets<DatabaseSettings>(nameof\n              (DatabaseSettings)).ConnectionString;\n      _context = new DatabaseContext(connectionString);\n    }\n    [GlobalCleanup]\n    public void GlobalCleanup()\n    {\n          Dispose(true);\n    }\n    ```", "```cs\n    [Benchmark]\n    public void QueryDb()\n    {\n          var products = (from p in _context.Products\n                          where p.Id > 1select p);\n    foreach (var product in products)\n        Debug.WriteLine(product.Name);\n    }\n    ```", "```cs\n    [Benchmark]\n    public void QueryDbAsList()\n    {\n    List<Product> products = (from p in _context.Products\n      where p.Id > 1select p).ToList<Product>();\n    foreach (var product in products)\n    Debug.WriteLine(product.Name);\n    }\n    ```", "```cs\n    [Benchmark]\n    public void QueryDbAsIEnumerable()\n    {\n    var products = (from p in _context.Products\n                    where p.Id > 1\n                    select p).AsEnumerable<Product>();\n    foreach (var product in products)\n        Debug.WriteLine(product.Name);\n    }\n    ```", "```cs\n    [Benchmark]\n    public void QueryDbAsIEnumerator()\n    {\n          var products = (from p in _context.Products\n                          where p.Id > 1\n                          select p).GetEnumerator();\n        while (products.MoveNext())\n        Debug.WriteLine(products.Current.Name);\n    }\n    ```", "```cs\n    [Benchmark]\n    public void QueryDbAsIQueryable()\n    {\n    var products = (from p in _context.Products\n                    where p.Id > 1\n                    select p).AsQueryable<Product>();\n    foreach (var product in products)\n        Debug.WriteLine(product.Name);\n    }\n    ```", "```cs\n    BenchmarkRunner.Run<DatabaseQueryAndIteration>();\n    ```", "```cs\n    static void Main(string[] args)\n    {\n          BenchmarkRunner.Run<LinqPerformance>();\n    }\n    ```", "```cs\n    [Benchmark]\n    public void GetLastPersonVersion1()\n    {\n          var lastPerson = _people.Last();\n    }\n    ```", "```cs\n    [Benchmark]\n    public void GetLastPersonVersion2()\n    {\n          var lastPerson = _people[_people.Count - 1];\n    }\n    ```", "```cs\n    public static TSource Last<TSource>(this \n        IEnumerable<TSource> source);\n    ```", "```cs\n    [Benchmark]\n    public void ReadingDataWithoutUsingLet()\n    {\n    var result = from person in _people\n        where person.LastName.Contains(\"Omega\")\n        && person.FirstName.Equals(\"Upsilon\")\n        select person;\n    }\n    ```", "```cs\n    [Benchmark]\n    public void ReadingDataUsingLet()\n    {\n          var result = from person in _people\n          let lastName = person.LastName.Contains(\"Omega\")\n          let firstName = person.FirstName.Equals(\"Upsilon\")\n          where lastName && firstName\n          select person;\n    }\n    ```", "```cs\n    [Benchmark]\n    public void GroupByVersion1()\n    {\n    List<Person> People = _people.GroupBy(x => x.LastName)\n                  .Where(x => x.Count() > 1)\n                  .SelectMany(group => group)\n                  .ToList();\n    }\n    ```", "```cs\n    [Benchmark]\n    public void GroupByVersion2()\n    {\n          IEnumerator<IGrouping<string, Person>> test = \n              _people.GroupBy(p => p.LastName)\n        .Where(p => p.Count() > 2).GetEnumerator();\n    List<Person> people = new List<Person>();\n    while (test.MoveNext())\n    {\n        IGrouping<string, Person> current = test.Current;\n        foreach (Person person in current)\n        {\n            people.Add(person);\n        }\n    }\n    }\n    ```", "```cs\n    [Benchmark]\n    public void GroupByVersion3()\n    {\n          IEnumerator<IGrouping<string, Person>> test = \n            _people.ToArray().GroupBy(p => p.LastName)\n        .Where(p => p.Count() > 2).GetEnumerator();\n        List<Person> people = new List<Person>();\n    while (test.MoveNext())\n          {\n        var current = test.Current;\n        foreach (var person in current)\n        {\n            people.Add(person);\n        }\n    }\n    }\n    ```", "```cs\n    [MemoryDiagnoser]\n    [Orderer(SummaryOrderPolicy.FastestToSlowest)]\n    [RankColumn]\n    ```", "```cs\n    [Benchmark]\n    public List<Person> FilterGroupsVersion1()\n    {\n     return (from p in _people where \n                 _group1.Contains(p.LastName.ToLower())\n                 || _group2.Contains(p.LastName.ToLower())\n                 select p).ToList(\n    }\n    ```", "```cs\n    [Benchmark]\n    public List<Person> FilterGroupsVersion2()\n    {\n          return (from p in _people\n              let lastName = p.LastName.ToLower()\n              where _group1.Contains(lastName)\n              || _group2.Contains(lastName)\n              select p).ToList();\n    }\n    ```", "```cs\n    [Benchmark]\n    public List<Person> FilterGroupsVersion3()\n    {\n    List<Person> people = new List<Person>();\n    for (int i = 0; i < _people.Count; i++)\n    {\n        var person = _people[i];\n        var lastName = person.LastName.ToLower();\n        if (\n            _group1.Contains(lastName) \n            || _group2.Contains(lastName)\n        )\n        people.Add(person);\n    }\n    return people;\n    }\n    ```", "```cs\n    [Benchmark]\n    public List<Person> FilterGroupsVersion4()\n    {\n          List<Person> people = new List<Person>();\n    for (int i = 0; i < _people.Count; i++)\n    {\n        var person = _people[i];\n        var lastName = person.LastName.ToLower();\n        if (\n            _group2.Contains(lastName) \n            || _group1.Contains(lastName)\n        )\n        people.Add(person);\n    }\n    return people;\n    }\n    ```", "```cs\n    [Benchmark]\n    public void LinqClosureUsingParameters()\n    {           Func<string, char, char, bool> Between()\n           {\n                 Func<string, char, char, bool> IsBetween \n                       = delegate (\n                  string param1, char param2, char param3)\n                 {\n                     var character = param1[0];\n                       return (\n                             (character >= param2) \n                             && (character <= param3)\n                       );\n                 };\n                 return IsBetween;\n           }\n           var IsBetween = Between();\n           var data = (from p in _people.ToList()\n                    where IsBetween(p.LastName, 'A', 'G')\n                      select p).ToList();\n    }\n    ```", "```cs\n    [Benchmark]\n    public void LinqClosureUsingVariables()\n    {\n    Func<string, bool> Between()\n           {\n                     char first = 'A';\n               char last = 'G';\n               Func<string, bool> IsBetweenAG = delegate \n                   (string param1)\n               {\n                     var character = param1[0];\n                    return ((character >= first) && \n                        (character <= last));\n                 };\n                 return IsBetweenAG;\n           }\n           var IsBetweenAG = Between();\n           var data = (from p in _people.ToList()\n                       where IsBetweenAG(p.LastName)\n                        select p).ToList();\n    }\n    ```", "```cs\n    [Benchmark]\n    public void NonLinqFilter()\n    {\n           var data = _people.FindAll(\n           x => x.LastName[0] >= 'A' && x.LastName[0] \n               <= 'G');\n    }\n    ```"]