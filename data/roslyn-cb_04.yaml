- en: Improving Code Maintenance of C# Code Base
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提高 C# 代码库的代码维护性
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下内容：
- en: Configuring C# code style rules built into Visual Studio 2017
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 Visual Studio 2017 内置的 C# 代码风格规则
- en: Using the `.editorconfig` file for the configuration of code style rules
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `.editorconfig` 文件配置代码风格规则
- en: Using the public API analyzer for API surface maintenance
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用公共 API 分析器进行 API 表面维护
- en: Using third-party StyleCop analyzers for code style rules
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用第三方 StyleCop 分析器进行代码风格规则
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In the current era of open source projects with numerous diverse contributors
    from different organizations and different parts of the world, one of the primary
    requirements of maintaining any repo is enforcing code style guidelines across
    the code base. Historically, this has been done through exhaustive documentation
    and code reviews to catch any violations of these coding guidelines. However,
    this approach has its flaws and requires a lot of man hours on maintaining the
    documentation and performing exhaustive code reviews.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前开源项目时代，众多来自不同组织和世界各地的不同贡献者，维护任何仓库的一个主要要求是在代码库中强制执行代码风格指南。历史上，这通常通过详尽的文档和代码审查来实现，以捕捉任何违反这些编码指南的行为。然而，这种方法有其缺陷，需要大量的人力和时间来维护文档和执行详尽的代码审查。
- en: With the automated code style and naming rules that are built into Visual Studio
    2017, users can customize and configure the enforcement levels for individual
    rules and prompt visual indicators for violations, such as suggestions or squiggles
    in the editor and diagnostics in the error list, with appropriate severity (error/warning/informational
    message). Additionally, the rules come with a code fix that can automatically
    fix one or more instances of the violations across the document, project, or solution.
    With the new EditorConfig support in Visual Studio 2017, these rule configurations
    can be enforced and customized at each folder level via an `.editorconfig` file.
    Additionally, the `.editorconfig` files can be checked into the repo alongside
    the sources so that the rules are enforced for every user that contributes to
    the repo.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 利用 Visual Studio 2017 内置的自动代码风格和命名规则，用户可以自定义和配置单个规则的执行级别，并对违规行为提供视觉提示，例如编辑器中的建议或波浪线，以及错误列表中的诊断信息，并设置适当的严重性（错误/警告/信息性消息）。此外，规则还包含一个代码修复功能，可以自动修复文档、项目或解决方案中一个或多个违规实例。在
    Visual Studio 2017 的新 EditorConfig 支持下，这些规则配置可以在每个文件夹级别通过 `.editorconfig` 文件进行强制执行和自定义。此外，`.editorconfig`
    文件可以与源代码一起提交到仓库，以确保所有为仓库做出贡献的用户都遵守这些规则。
- en: EditorConfig ([http://editorconfig.org/](http://editorconfig.org/)) is an open
    source file format that helps developers configure and enforce formatting and
    code style conventions to achieve consistent, more readable codebases. EditorConfig
    files are easily checked into source control and are applied at repository and
    project levels. EditorConfig conventions override their equivalents in your personal
    settings, such that the conventions of the codebase take precedence over the individual
    developer.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: EditorConfig ([http://editorconfig.org/](http://editorconfig.org/)) 是一种开源文件格式，帮助开发者配置和强制执行格式化和代码风格约定，以实现代码库的一致性和可读性。EditorConfig
    文件易于提交到源代码控制，并在仓库和项目级别应用。EditorConfig 约定覆盖个人设置中的等效约定，使得代码库的约定优先于单个开发者的约定。
- en: In this chapter, we will introduce you to these code style rules, show you how
    to configure them in the Visual Studio 2017 IDE, and save these settings into
    an EditorConfig file. Additionally, we will introduce you to a very popular third-party
    Roslyn analyzer, the PublicAPI analyzer, that allows tracking the public API surface
    of .NET assemblies through additional non-source text files checked into the repo,
    and provides diagnostics and code fixes when there is a breaking API change or
    a new addition to the public API that is not documented in the public API files.
    We will also walk you through configuring StyleCop analyzers for a .NET project,
    a popular third-party code style analyzer, and an alternative to the built-in
    Visual Studio code style rules for enforcing code style.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将向您介绍这些代码风格规则，展示如何在 Visual Studio 2017 IDE 中配置它们，并将这些设置保存到 EditorConfig
    文件中。此外，我们还将向您介绍一个非常流行的第三方 Roslyn 分析器，即 PublicAPI 分析器，它允许通过检入到仓库中的附加非源文本文件来跟踪 .NET
    程序集的公共 API 表面，并在出现破坏性 API 变更或未在公共 API 文件中记录的新公共 API 添加时提供诊断和代码修复。我们还将指导您如何为 .NET
    项目配置 StyleCop 分析器，这是一个流行的第三方代码风格分析器，也是内置 Visual Studio 代码风格规则的替代方案，用于强制执行代码风格。
- en: Configuring C# code style rules built into Visual Studio 2017
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 Visual Studio 2017 中内置的 C# 代码风格规则
- en: In this section, we will walk you through the important categories of code style
    rules built into Visual Studio 2017, and also show you how to configure them in
    Visual Studio.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将向您介绍 Visual Studio 2017 中内置的重要代码风格规则类别，并展示如何在 Visual Studio 中配置它们。
- en: Getting ready
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备中
- en: You will need to have Visual Studio 2017 installed on your machine to execute
    the recipes in this chapter. You can install a free community version of Visual
    Studio 2017 from [https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在您的机器上安装 Visual Studio 2017 才能执行本章中的配方。您可以从 [https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15)
    安装 Visual Studio 2017 的免费社区版本。
- en: How to do it...
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Start Visual Studio, navigate to File | New | Project..., create a new C# class
    library project, and replace the code in `Class1.cs` with code from the code sample
    at `ClassLibrary/Class1.cs`.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Visual Studio，导航到文件 | 新建 | 项目...，创建一个新的 C# 类库项目，并用 `ClassLibrary/Class1.cs`
    中的代码替换 `Class1.cs` 中的代码。
- en: 'Click on Tools | Options to bring up the tools options dialog and navigate
    to the C# code style options (Text Editor | C# | Code Style | General):'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击工具 | 选项以打开工具选项对话框，并导航到 C# 代码风格选项（文本编辑器 | C# | 代码风格 | 一般）：
- en: '![](img/b102d1de-6050-423d-b786-8ebc55eef267.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b102d1de-6050-423d-b786-8ebc55eef267.png)'
- en: 'Change the Severity of ''this.'' preferences to Suggestion, predefined type
    preferences to Warning, and ''var'' preferences to Error. Change the Preference
    of ''var'' preferences from Prefer explicit type to Prefer ''var'':'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 'this.' 预设的严重性更改为建议，预设的类型偏好更改为警告，以及将 'var' 偏好更改为错误。将 'var' 偏好的偏好从“首选显式类型”更改为“首选
    'var'”：
- en: '![](img/f2a6f176-6866-4490-bb87-50b245e1f7d7.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f2a6f176-6866-4490-bb87-50b245e1f7d7.png)'
- en: 'Change the Severity of Code block preferences to Warning and change the Preference
    For methods to Prefer expression body:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将代码块偏好的严重性更改为警告，并将方法偏好更改为首选表达式体：
- en: '![](img/8abec331-d7e1-4301-bf53-90099ccd3425.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8abec331-d7e1-4301-bf53-90099ccd3425.png)'
- en: Ensure that all the remaining code style rules (Expression preferences, Variable
    preferences and 'null' checking) have the severity Suggestion.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保所有剩余的代码风格规则（表达式偏好、变量偏好和 'null' 检查）的严重性均为建议。
- en: 'Verify the following code style diagnostics in the error list:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在错误列表中验证以下代码风格诊断：
- en: '![](img/cac29f6b-689b-4c7b-a00b-6c56c36f69e4.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/cac29f6b-689b-4c7b-a00b-6c56c36f69e4.png)'
- en: 'Double-click on the first IDE0007 error and verify that a light bulb is offered
    for a code fix to use ''var'' instead of explicit type. Verify that hitting the
    *Enter* key fixes the code and the diagnostic is removed from the error list.
    Repeat the exercise for the remaining IDE0007 diagnostics:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击第一个 IDE0007 错误并验证是否提供了使用 'var' 而不是显式类型的代码修复的灯泡提示。验证按 *Enter* 键可以修复代码，并将诊断从错误列表中删除。对剩余的
    IDE0007 诊断重复此练习：
- en: '![](img/9e0cd8f4-28af-4b99-9305-1193c44b409d.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9e0cd8f4-28af-4b99-9305-1193c44b409d.png)'
- en: 'Now, double-click on the first IDE0012 warning and verify that a light bulb
    is offered to Simplify name ''System.Int32''. This time, click on the Fix all
    occurrences in Document hyperlink and verify a preview changes dialog comes up
    that fixes all instances of *IDE0012* in the document with a single batch fix:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，双击第一个 IDE0012 警告，并验证是否提供了一个用于简化名称 'System.Int32' 的灯泡提示。这次，单击“文档中所有出现的修复”超链接，并验证是否出现了一个预览更改对话框，该对话框使用单个批量修复来修复文档中所有
    *IDE0012* 的实例：
- en: '![](img/ab570d39-fbd0-4da5-955b-477bf176a71e.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ab570d39-fbd0-4da5-955b-477bf176a71e.png)'
- en: 'Apply code fixes for each of the remaining diagnostics in the error list and
    verify that the code is now completely clean:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对错误列表中剩余的每个诊断应用代码修复，并验证代码现在是否完全干净：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add the following new method to `Class1` and verify that IDE0007 (use ''var''
    instead of explicit type) is raised for the code style violation in the newly
    added code:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下新方法添加到 `Class1` 中，并验证是否为新增代码中的代码风格违规抛出了 IDE0007（使用 'var' 而不是显式类型）：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works...
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Code style rules are built into Visual Studio 2017 and are classified into
    the following broad categories:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 代码风格规则内置在 Visual Studio 2017 中，并分为以下广泛类别：
- en: '''this.'' preferences'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '''this.'' 偏好'
- en: predefined type preferences
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预定义类型偏好
- en: '''var'' preferences'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '''var'' 偏好'
- en: Code block preferences
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码块偏好
- en: Expression preferences
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表达式偏好
- en: Variable preferences
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量偏好
- en: '''null'' checking'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '''null'' 检查'
- en: 'Each category has a set of one or more rules, each with two fields:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 每个类别都有一组一个或多个规则，每个规则有两个字段：
- en: 'Preference: A string identifying the preference for the rule. Normally, it
    has two possible values, one indicating that the rule should be preferred, and
    the other indicating the rule should not be preferred. For example, for a ''this.''
    preference rule, the possible values are:'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 偏好：一个字符串，用于标识规则的偏好。通常，它有两个可能的值，一个表示规则应该被优先考虑，另一个表示规则不应该被优先考虑。例如，对于 'this.' 偏好规则，可能的值包括：
- en: 'Do not prefer ''this.'': This enforces that code with the `''this.''` prefix
    to member accesses is flagged.'
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不偏好 'this.'：这强制标记带有 `'this.'` 前缀的成员访问的代码。
- en: 'Prefer ''this.'': This ensures that code without ''this.'' prefix to member
    accesses is flagged.'
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 偏好 'this.'：这确保了没有 'this.' 前缀的成员访问的代码会被标记。
- en: 'Severity: An enum identifying the severity of the rule. It has the following
    possible values and visual effects:'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 严重性：一个枚举，用于标识规则的严重性。它有以下可能的值和视觉效果：
- en: 'Error: Violations of the rule produce error diagnostics in the error list and
    red squiggles in the code editor.'
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误：规则的违规会在错误列表中产生错误诊断，并在代码编辑器中产生红色波浪线。
- en: 'Warning: Violations of the rule produce warning diagnostics in the error list
    and green squiggles in the code editor.'
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 警告：规则的违规会在错误列表中产生警告诊断，并在代码编辑器中产生绿色波浪线。
- en: 'Suggestion: Violations of the rule produce informational message diagnostics
    in the error list and gray dots under the first couple of characters of violating
    syntax in the code editor.'
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建议：规则的违规会在错误列表中产生信息性消息诊断，并在代码编辑器中违反语法的第一个几个字符下方产生灰色点。
- en: 'None: Rule is not enforced in the editor and there are no diagnostics in the
    error list or visual indicators in the editor.'
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无：规则在编辑器中不受强制，错误列表中没有诊断，编辑器中也没有视觉指示器。
- en: Users can configure the preference and severity of each rule as per their requirements
    using the Tools | Options dialog. Closing and re-opening the source documents
    causes the configuration changes to take effect and the violations are reported
    in the error list and visual indicators (squiggles/dots) appear in the code editor.
    Each rule comes with a code fix and FixAll support to fix one or more instances
    of the violation across the document, project, or solution.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以使用“工具 | 选项”对话框根据其要求配置每个规则的偏好和严重性。关闭并重新打开源文档会导致配置更改生效，违规将在错误列表和视觉指示器（波浪线/点）中报告。每个规则都附带代码修复和
    FixAll 支持，以修复文档、项目或解决方案中一个或多个违规的实例。
- en: Diagnostics reported for the built-in code style rules are only produced during
    live code editing in Visual Studio 2017 -they do not break the build and are not
    produced during the command-line builds. This behavior may or may not change in
    future versions of Visual Studio.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 对于内置代码风格规则报告的诊断仅在 Visual Studio 2017 的实时代码编辑期间生成——它们不会中断构建，也不会在命令行构建期间生成。这种行为在未来版本的
    Visual Studio 中可能会改变，也可能不会改变。
- en: There is more...
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Code style rule preferences are saved with user profile settings and persisted
    across Visual Studio sessions on the machine for the same Visual Studio install.
    This means that any project opened in Visual Studio will have the same code style
    enforcement. However, the same sources opened on a different Visual Studio installation
    or a different machine with a different user profile will not have the same code
    style enforcement. To enable same code style enforcement for a repo across all
    users, users need to persist the code style settings into an `.editorconfig` file
    and check it into the repo along with the sources. Refer to, *Using .editorconfig
    file for per-folder configuration for code style rules*, recipe in this chapter
    for further details.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 代码样式规则首选项与用户配置文件设置一起保存，并在同一Visual Studio安装的Visual Studio会话之间持久化。这意味着在Visual
    Studio中打开的任何项目都将具有相同的代码样式强制执行。然而，在具有不同用户配置文件的不同Visual Studio安装或不同机器上打开的相同源将不会具有相同的代码样式强制执行。为了在所有用户之间启用相同的代码样式强制执行，用户需要将代码样式设置持久化到`.editorconfig`文件中，并将其与源文件一起提交到仓库。有关详细信息，请参阅本章中的*使用.editorconfig文件进行按文件夹配置代码样式规则*配方。
- en: Consider exploring the Naming rules in the Tools | Options... dialog under Text
    Editor | C# | Code Style | Naming. These rules allow users to enforce guidelines
    on how each different symbol kind should be named. For example, interface names
    should start with capital letter "I", type name should be Pascal cased, and so
    on.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在文本编辑器 | C# | 代码样式 | 命名规则下，考虑探索工具 | 选项...对话框中的命名规则。这些规则允许用户强制执行关于每种不同符号应该如何命名的指南。例如，接口名称应该以大写字母"I"开头，类型名称应该是Pascal大小写，等等。
- en: Using the .editorconfig file for configuration of code style rules
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`.editorconfig`文件配置代码样式规则
- en: In this section, we will show you how to configure the code style rules built
    into Visual Studio 2017 using the EditorConfig file, and how to override these
    settings at different folder levels. These EditorConfig files can be checked into
    the repo along with source files and this ensures the code style settings are
    persisted and enforced for all repo contributors.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将向您展示如何使用EditorConfig文件配置Visual Studio 2017内置的代码样式规则，以及如何在不同的文件夹级别覆盖这些设置。这些EditorConfig文件可以与源文件一起提交到仓库中，这确保了代码样式设置对所有仓库贡献者都是持久和强制执行的。
- en: Getting ready
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need to have Visual Studio 2017 installed on your machine to execute
    the recipes in this chapter. You can install a free community version of Visual
    Studio 2017 from [https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在您的机器上安装Visual Studio 2017才能执行本章中的配方。您可以从[https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15)安装免费的Visual
    Studio 2017社区版。
- en: Install the `EditorConfig Language Service` VSIX from the Visual Studio extension
    gallery at [http://vsixgallery.com/extension/1209461d-57f8-46a4-814a-dbe5fecef941/](http://vsixgallery.com/extension/1209461d-57f8-46a4-814a-dbe5fecef941/)
    to get intellisense and autocompletion for `.editorconfig` files in Visual Studio.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 从[http://vsixgallery.com/extension/1209461d-57f8-46a4-814a-dbe5fecef941/](http://vsixgallery.com/extension/1209461d-57f8-46a4-814a-dbe5fecef941/)的Visual
    Studio扩展库中安装`EditorConfig Language Service` VSIX，以在Visual Studio中获得`.editorconfig`文件的智能感知和自动完成功能。
- en: How to do it...
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Start Visual Studio, click on File | New | Project..., create a new C# class
    library project, and replace the code in `Class1.cs` with code from the code sample
    at `ClassLibrary/Class1.cs`.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Visual Studio，点击文件 | 新建 | 项目...，创建一个新的C#类库项目，并用`ClassLibrary/Class1.cs`中的代码替换`Class1.cs`中的代码。
- en: 'Add a new text file named `.editorconfig` to the project with the following
    contents:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目中添加一个名为`.editorconfig`的新文本文件，内容如下：
- en: '[PRE2]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Verify the following code style diagnostics in the error list:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在错误列表中验证以下代码样式诊断：
- en: '![](img/d3b69fa0-88c8-42ed-a5fd-ba1ab89b5cb1.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d3b69fa0-88c8-42ed-a5fd-ba1ab89b5cb1.png)'
- en: Double-click on the first IDE0007 error and verify that a light bulb is offered
    for a code fix to use 'var' instead of explicit type. Verify that hitting the
    *Enter* key fixes the code and the diagnostic is removed from the error list.
    Repeat the exercise for the remaining IDE0007 diagnostics.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击第一个IDE0007错误，并验证是否提供了一个代码修复选项，使用`var`而不是显式类型。验证按*Enter*键可以修复代码，并将诊断从错误列表中删除。对剩余的IDE0007诊断重复此练习。
- en: Then, double-click on the first IDE0012 warning and verify that a light bulb
    is offered to Simplify name 'System.Int32'. This time, click on the Fix all occurrences
    in **Document** hyperlink and verify that a preview changes dialog comes up, which
    fixes all instances of IDE0012 in the document with a single batch fix.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，双击第一个IDE0012警告，并验证是否提供了一个灯泡图标来简化名称'System.Int32'。这次，点击“在**文档**中修复所有实例”的超链接，并验证是否出现了一个预览更改对话框，该对话框通过单个批量修复解决了文档中所有IDE0012的实例。
- en: 'Apply code fixes for each of the remaining diagnostics in the error list and
    verify the code is now completely clean:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对错误列表中剩余的每个诊断项应用代码修复，并验证代码现在是否完全干净：
- en: '[PRE3]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Add a new folder, say `NewFolder`, to the root of the project and add a new
    class, say `Class2.cs`, to the folder with the following method and verify IDE0007
    (use 'var' instead of explicit type) is raised for the code style violation in
    the newly added code.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目的根目录中添加一个新文件夹，例如`NewFolder`，并在该文件夹中添加一个新类，例如`Class2.cs`，然后验证IDE0007（使用`var`代替显式类型）是否因新添加的代码中的代码风格违规而引发。
- en: '[PRE4]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Add a new text file named `.editorconfig` to `NewFolder` with the following
    contents:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`NewFolder`中添加一个名为`.editorconfig`的新文本文件，其内容如下：
- en: '[PRE5]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Close and reopen `Class2.cs` and verify the IDE0007 is no longer reported.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭并重新打开`Class2.cs`，并验证IDE0007不再被报告。
- en: How it works...
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Refer to the *How it works...,* section in the recipe, *Configuring C# code
    style rules built into Visual Studio 2017,* in this chapter to understand the
    different built-in code style rules in Visual Studio 2017, the Preference and
    Severity settings associated with these rules and how they map to the editor config
    entries. For example, consider the following entry:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 参考本章中食谱的*如何工作...*部分，*配置Visual Studio 2017中内置的C#代码风格规则*，以了解Visual Studio 2017中的不同内置代码风格规则，以及与这些规则关联的偏好和严重性设置，以及它们如何映射到编辑器配置条目。例如，考虑以下条目：
- en: '[PRE6]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`dotnet_style_qualification_for_field` is the rule name, with the preference
    `false` and severity `suggestion`. These rules and their settings are enforced
    at each folder level, with the EditorConfig file at any folder level overriding
    the settings from the EditorConfig files in the ancestor directories, until the
    root file path is reached or an EditorConfig file with `root=true` is found. We
    recommend you refer to the following articles to get a detailed understanding
    of EditorConfig and related support in Visual Studio 2017:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`dotnet_style_qualification_for_field`是规则名称，偏好设置为`false`，严重性设置为`suggestion`。这些规则及其设置在每个文件夹级别强制执行，任何文件夹级别的EditorConfig文件都会覆盖祖先目录中EditorConfig文件的设置，直到达到根文件路径或找到具有`root=true`的EditorConfig文件。我们建议您参考以下文章，以获得对EditorConfig和Visual
    Studio 2017中相关支持的详细理解：'
- en: 'Editorconfig file format: [http://EditorConfig.org/](http://editorconfig.org/)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Editorconfig文件格式：[http://EditorConfig.org/](http://editorconfig.org/)
- en: 'Editorconfig support for .NET code style in VS2017: [https://blogs.msdn.microsoft.com/dotnet/2016/12/15/code-style-configuration-in-the-vs2017-rc-update/](https://blogs.msdn.microsoft.com/dotnet/2016/12/15/code-style-configuration-in-the-vs2017-rc-update/)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VS2017中.NET代码风格的Editorconfig支持：[https://blogs.msdn.microsoft.com/dotnet/2016/12/15/code-style-configuration-in-the-vs2017-rc-update/](https://blogs.msdn.microsoft.com/dotnet/2016/12/15/code-style-configuration-in-the-vs2017-rc-update/)
- en: 'Editorconfig reference for .NET code style in VS2017: [https://docs.microsoft.com/en-us/visualstudio/ide/EditorConfig-code-style-settings-reference](https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference)'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VS2017中.NET代码风格的Editorconfig参考：[https://docs.microsoft.com/en-us/visualstudio/ide/EditorConfig-code-style-settings-reference](https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference)
- en: Using the public API analyzer for API surface maintenance
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用公共API分析器进行API表面维护
- en: 'The `DeclarePublicAPIAnalyzer` analyzer is a popular third-party analyzer developed
    at the ([https://github.com/dotnet/roslyn-analyzers](https://github.com/dotnet/roslyn-analyzers))
    repo and published as a NuGet package at [https://www.nuget.org/packages/Roslyn.Diagnostics.Analyzers](https://www.nuget.org/packages/Roslyn.Diagnostics.Analyzers/).
    This analyzer helps track the public surface area of a project with additional
    readable and reviewable text files that live along with the project sources and
    provide API documentation as a source. For example, consider the following source
    file with public and non-public symbols:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`DeclarePublicAPIAnalyzer`分析器是在([https://github.com/dotnet/roslyn-analyzers](https://github.com/dotnet/roslyn-analyzers))仓库中开发的流行第三方分析器，并作为NuGet包发布在[https://www.nuget.org/packages/Roslyn.Diagnostics.Analyzers](https://www.nuget.org/packages/Roslyn.Diagnostics.Analyzers/)。此分析器通过提供与项目源文件一起存在的可读和可审查的文本文件来帮助跟踪项目的公共表面区域，并提供作为源的API文档。例如，考虑以下具有公共和非公共符号的源文件：'
- en: '[PRE7]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The additional API surface text file for this type will look as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型的附加API表面文本文件将如下所示：
- en: '[PRE8]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'There is an entry for every public symbol: type *Class1*, its constructor and
    it''s members *Field1, Method1* overloads, and the *Property1* getter. Entries
    contain the entire symbol signature, including the return type and parameters.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 每个公共符号都有一个条目：类型*Class1*，其构造函数及其成员*Field1, Method1*重载，以及*Property1*获取器。条目包含整个符号签名，包括返回类型和参数。
- en: With this NuGet package, users can track the shipped and unshipped public API
    surface at any point of time, get live and build breaking diagnostics when the
    public API surface is changed, and apply code fixes to update these additional
    files to match the local API changes. This enables richer and more focused API
    reviews when the actual code changes are large and spread across the code base,
    but the API changes can be reviewed by just looking at core signature changes
    in a single file.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此NuGet包，用户可以在任何时间点跟踪已发布和未发布的公共API表面，当公共API表面发生变化时，获取实时和构建中断诊断，并应用代码修复来更新这些附加文件以匹配本地的API更改。当实际的代码更改很大且分散在代码库中时，这允许进行更丰富和更集中的API审查，但只需查看单个文件中的核心签名更改即可审查API更改。
- en: '**DeclarePublicAPIAnalyzer** was written primarily for tracking the public
    API surface of the Roslyn source base at [https://github.com/dotnet/roslyn](https://github.com/dotnet/roslyn)
    and is still very popular among all Roslyn contributors. The analyzer was eventually
    converted into a general-purpose open source analyzer that can be installed for
    any .NET project from [NuGet.org](http://NuGet.org).'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**DeclarePublicAPIAnalyzer**主要编写用于跟踪位于[https://github.com/dotnet/roslyn](https://github.com/dotnet/roslyn)的Roslyn源库的公共API表面，并且在所有Roslyn贡献者中仍然非常受欢迎。分析器最终被转换为一个通用开源分析器，可以从[NuGet.org](http://NuGet.org)安装到任何.NET项目中。'
- en: In this section, we will show you how to install and configure the public API
    analyzer for a C# project, walk you through the additional text files tracking
    the public API surface, show you the diagnostics reported from this analyzer with
    API changes, and finally show you how to apply code fixes to fix one or multiple
    instances of these diagnostics to update the API surface text files.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将向您展示如何为C#项目安装和配置公共API分析器，带您了解跟踪公共API表面的附加文本文件，向您展示分析器报告的API更改诊断，并最终向您展示如何应用代码修复来修复一个或多个这些诊断的实例以更新API表面文本文件。
- en: Getting ready
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need to have Visual Studio 2017 installed on your machine to execute
    the recipes in this chapter. You can install a free community version of Visual
    Studio 2017 from [https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在您的机器上安装Visual Studio 2017以执行本章中的配方。您可以从[https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15)安装Visual
    Studio 2017的免费社区版本。
- en: How to do it...
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Start Visual Studio, click on File | New | Project..., create a new C# class
    library project, and replace the code in `Class1.cs` with code from the code sample
    at `ClassLibrary/Class1.cs` (also mentioned in the *Introduction* section of this
    recipe).
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Visual Studio，点击文件 | 新建 | 项目...，创建一个新的C#类库项目，并将`Class1.cs`中的代码替换为`ClassLibrary/Class1.cs`（也在本食谱的*简介*部分中提到）中的代码样本。
- en: Install the `Roslyn.Diagnostics.Analyzers` NuGet package Version *1.2.0-beta2*.
    For guidance on how to search for and install the analyzer NuGet package in a
    project, refer to the recipe *Searching and installing analyzers through the NuGet
    package manager,* in [Chapter 2](8e0229af-657f-4306-96b5-40511d1fe7b2.xhtml),
    *Consuming Diagnostic Analyzers in .NET Projects*.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装`Roslyn.Diagnostics.Analyzers` NuGet包版本*1.2.0-beta2*。有关如何在项目中搜索和安装分析器NuGet包的指导，请参阅配方*通过NuGet包管理器搜索和安装分析器*，在[第2章](8e0229af-657f-4306-96b5-40511d1fe7b2.xhtml)，*在.NET项目中使用诊断分析器*。
- en: Escalate the severity of *RS0016* and *RS0017* from Warning to Error. For guidance
    on analyzer severity configuration, refer to the recipe, *Viewing and configuring
    analyzers in solution explorer in Visual Studio* in [Chapter 2](8e0229af-657f-4306-96b5-40511d1fe7b2.xhtml),
    *Consuming Diagnostic Analyzers in .NET Projects.*
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将*RS0016*和*RS0017*的严重性从警告升级到错误。有关分析器严重性配置的指导，请参阅配方，*在Visual Studio解决方案资源管理器中查看和配置分析器*，在[第2章](8e0229af-657f-4306-96b5-40511d1fe7b2.xhtml)，*在.NET项目中使用诊断分析器*。
- en: Add two new text files named `PublicAPI.Shipped.txt` and `PublicAPI.Unshipped.txt`
    to the project.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将两个新的文本文件`PublicAPI.Shipped.txt`和`PublicAPI.Unshipped.txt`添加到项目中。
- en: 'Select both text files in the solution explorer, change their build action
    from Content to AdditionalFiles using the Properties window, and save the project:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在解决方案资源管理器中选择两个文本文件，使用属性窗口将它们的构建操作从内容更改为AdditionalFiles，并保存项目：
- en: '![](img/fa5b4e08-f2ed-4279-9d0b-d125fdd2209f.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fa5b4e08-f2ed-4279-9d0b-d125fdd2209f.png)'
- en: 'Verify squiggles in the editor and six *RS0016* errors (the ''*x*'' is not
    part of the declared API) in the error list, one for each public symbol:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证编辑器中的波浪线和错误列表中的六个*RS0016*错误（`*x*`不是已声明的API的一部分），每个公共符号一个：
- en: '![](img/997e7f84-5a52-4a60-89cf-7ae5c942be8e.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/997e7f84-5a52-4a60-89cf-7ae5c942be8e.png)'
- en: 'Move the caret to the field symbol `Field1` and hit *Ctrl* + dot(.) to get
    the code fix to automatically fix the diagnostic and add the symbol to the unshipped
    public API text file:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将光标移至字段符号`Field1`，并按*Ctrl* + 点号(.)以获取自动修复诊断并将符号添加到未发布的公共API文本文件的代码修复：
- en: '![](img/9e203eb7-23f2-467a-bbd2-e3ba6549d37f.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9e203eb7-23f2-467a-bbd2-e3ba6549d37f.png)'
- en: Apply the code fix by hitting the *Enter* key and verify the entry `Class1.Field1
    -> int` is added to `PublicAPI.Unshipped.txt` and the diagnostic and squiggle
    for `Field1` no longer exist.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过按*Enter*键应用代码修复，并验证条目`Class1.Field1 -> int`已添加到`PublicAPI.Unshipped.txt`，并且`Field1`的诊断和波浪线不再存在。
- en: 'Move the caret to the type declaration for *Class1* and again hit *Ctrl* +
    dot to get the code fix, but this time apply a FixAll code fix to batch fix all
    RS0016 instances in the entire document and add all public symbols to the unshipped
    public API text file. For guidance on applying FixAll code fixes, refer to the
    recipe, *Applying batch code fixes (FixAll) across different scopes: document,
    project and solution*, in [Chapter 3](b14c99a8-f390-4888-a441-54ebfb46d0c7.xhtml),
    *Writing IDE Code Fixes, Refactorings and Intellisense Completion Providers.*'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将光标移至`Class1`的类型声明处，再次按*Ctrl* + 点号以获取代码修复，但这次应用FixAll代码修复以批量修复整个文档中的所有RS0016实例，并将所有公共符号添加到未发布的公共API文本文件中。有关应用FixAll代码修复的指导，请参阅配方，*在不同范围内应用批量代码修复（FixAll）：文档、项目和解决方案*，在[第3章](b14c99a8-f390-4888-a441-54ebfb46d0c7.xhtml)，*编写IDE代码修复、重构和Intellisense完成提供者*。
- en: Cut the entire contents of `PublicAPI.Unshipped.txt` and paste it into `PublicAPI.Shipped.txt`.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 剪切`PublicAPI.Unshipped.txt`中的全部内容，并将其粘贴到`PublicAPI.Shipped.txt`中。
- en: In `Class1.cs`, attempt to introduce a breaking API change by renaming the shipped
    public symbol `Field1` to `Field2`*.*
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Class1.cs`中，尝试通过将已发布的公共符号`Field1`重命名为`Field2`来引入破坏性API更改*。
- en: Verify *RS0016* is immediately reported for `Field2` and a code fix is offered
    to add a public API entry for `Field2`*.* Apply the code fix to add `Field2` to
    the public API surface and fix the diagnostic.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证`Field2`立即报告*RS0016*，并提供一个代码修复以添加`Field2`的公共API条目。应用代码修复将`Field2`添加到公共API表面并修复诊断。
- en: 'Build the project and verify that the project fails to build with the following
    *RS0017* diagnostic in the output window for the breaking change: `ClassLibraryPublicAPI.Shipped.txt(3,1,3,21):
    error RS0017: Symbol ''Class1.Field1 -> int'' is part of the declared API, but
    is either not public or could not be found`.'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '构建项目，并验证项目在输出窗口中由于破坏性更改出现以下*RS0017*诊断错误而无法构建：`ClassLibraryPublicAPI.Shipped.txt(3,1,3,21):
    错误 RS0017: 符号''Class1.Field1 -> int''是已声明的API的一部分，但既不是公共的，也无法找到`。'
- en: Undo the changes in steps 11 and 12.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第11步和第12步中撤销更改。
- en: Change `Method2` to be a public method, verify *RS0016* is reported for it,
    and use the code fix to add it's API entry to `PublicAPI.Unshipped.txt`.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `Method2` 改为公共方法，验证它报告了 *RS0016*，并使用代码修复将其 API 条目添加到 `PublicAPI.Unshipped.txt`。
- en: 'Now, rename the `unshipped` public symbol from `c` to `Method3`*.* Verify that
    *RS0016* is reported for `Method3` and the code fix replaces the public API entry
    for *Method2* with the entry for `Method3`:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将 `unshipped` 公共符号从 `c` 重命名为 `Method3`*.* 验证 `Method3` 报告了 *RS0016*，并且代码修复将
    *Method2* 的公共 API 条目替换为 `Method3` 的条目：
- en: '![](img/629732ef-e6d7-46d1-a818-2416d0aee6f7.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/629732ef-e6d7-46d1-a818-2416d0aee6f7.png)'
- en: Apply the code fix and verify that the build succeeds and there are no diagnostics
    in the error list.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用代码修复并验证构建是否成功，错误列表中没有诊断信息。
- en: How it works...
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '`DeclarePublicAPIAnalyzer` is an additional file analyzer that works by comparing
    the public symbols declared in the compilation against the public API entries
    in the shipped and unshipped API surface text files. It uses a unique string representation
    for each symbol, based on its fully qualified name and signature as it''s public
    API entry. It reports diagnostics for any missing or extra public API entries.
    You can find the implementation of this analyzer at [https://github.com/dotnet/roslyn-analyzers/blob/master/src/Roslyn.Diagnostics.Analyzers/Core/DeclarePublicAPIAnalyzer.cs](https://github.com/dotnet/roslyn-analyzers/blob/master/src/Roslyn.Diagnostics.Analyzers/Core/DeclarePublicAPIAnalyzer.cs),
    and its corresponding code fix provided at [https://github.com/dotnet/roslyn-analyzers/blob/master/src/Roslyn.Diagnostics.Analyzers/Core/DeclarePublicAPIFix.cs](https://github.com/dotnet/roslyn-analyzers/blob/master/src/Roslyn.Diagnostics.Analyzers/Core/DeclarePublicAPIFix.cs).'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`DeclarePublicAPIAnalyzer` 是一个额外的文件分析器，它通过比较编译中声明的公共符号与已发布和未发布的 API 表面文本文件中的公共
    API 条目来工作。它为每个符号使用基于其完全限定名称和签名的唯一字符串表示形式，作为其公共 API 条目。它报告任何缺失或多余的公共 API 条目的诊断信息。您可以在
    [https://github.com/dotnet/roslyn-analyzers/blob/master/src/Roslyn.Diagnostics.Analyzers/Core/DeclarePublicAPIAnalyzer.cs](https://github.com/dotnet/roslyn-analyzers/blob/master/src/Roslyn.Diagnostics.Analyzers/Core/DeclarePublicAPIAnalyzer.cs)
    找到该分析器的实现，以及提供的相应代码修复 [https://github.com/dotnet/roslyn-analyzers/blob/master/src/Roslyn.Diagnostics.Analyzers/Core/DeclarePublicAPIFix.cs](https://github.com/dotnet/roslyn-analyzers/blob/master/src/Roslyn.Diagnostics.Analyzers/Core/DeclarePublicAPIFix.cs)。'
- en: There's more...
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: You can read more about how to write and consume additional file analyzers,
    such as the DeclarePublicAPIAnalyzer, at [https://github.com/dotnet/roslyn/blob/master/docs/analyzers/Using%20Additional%20Files.md](https://github.com/dotnet/roslyn/blob/master/docs/analyzers/Using%20Additional%20Files.md).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 [https://github.com/dotnet/roslyn/blob/master/docs/analyzers/Using%20Additional%20Files.md](https://github.com/dotnet/roslyn/blob/master/docs/analyzers/Using%20Additional%20Files.md)
    阅读更多关于如何编写和消费额外的文件分析器，如 DeclarePublicAPIAnalyzer 的信息。
- en: Using third-party StyleCop analyzers for code style rules
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用第三方 StyleCop 分析器进行代码风格规则
- en: In this section, we will introduce you to a popular third-party analyzer package
    for code style rules for C# projects, StyleCop analyzers. We will walk through
    how to install the StyleCop analyzers NuGet package, give example violations for
    each of the StyleCop rule categories, and show you how to configure and tune individual
    StyleCop rules.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将向您介绍一个流行的第三方分析器包，用于 C# 项目的代码风格规则，即 StyleCop 分析器。我们将介绍如何安装 StyleCop 分析器
    NuGet 包，给出 StyleCop 规则类别的示例违规，并展示如何配置和调整单个 StyleCop 规则。
- en: Getting ready
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need to have Visual Studio 2017 installed on your machine to execute
    the recipes in this chapter. You can install a free community version of Visual
    Studio 2017 from [https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在您的机器上安装 Visual Studio 2017 才能执行本章中的配方。您可以从 [https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15)
    安装免费的 Visual Studio 2017 社区版本。
- en: How to do it...
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Start Visual Studio, navigate to File | New | Project..., create a new C# class
    library project, and replace the code in `Class1.cs` with code from the code sample
    at `ClassLibrary/Class1.cs`.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Visual Studio，导航到文件 | 新建 | 项目...，创建一个新的 C# 类库项目，并将 `Class1.cs` 中的代码替换为 `ClassLibrary/Class1.cs`
    中的代码样本。
- en: Install the `StyleCop.Analyzers` NuGet package (as of this writing, the latest
    prerelease version is *1.1.0-beta001*). For guidance on how to search for and
    install analyzer NuGet package in a project, refer to the recipe, *Searching and
    installing analyzers through the NuGet package manager* in [Chapter 2](8e0229af-657f-4306-96b5-40511d1fe7b2.xhtml),
    *Consuming Diagnostic Analyzers in .NET Projects*.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 `StyleCop.Analyzers` NuGet 包（截至本文撰写时，最新预发布版本为 *1.1.0-beta001*）。有关如何在项目中搜索和安装分析器
    NuGet 包的指导，请参阅配方，*通过 NuGet 包管理器搜索和安装分析器*，位于 [第 2 章](8e0229af-657f-4306-96b5-40511d1fe7b2.xhtml)，*在
    .NET 项目中消费诊断分析器*。
- en: 'Verify the following StyleCop diagnostics show up in the error list:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证以下 StyleCop 诊断是否显示在错误列表中：
- en: '![](img/9230d185-ddbd-49aa-8c5a-0408dd39dc67.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9230d185-ddbd-49aa-8c5a-0408dd39dc67.png)'
- en: Build the project from the command-line or top-level Build menu in Visual Studio
    and verify these diagnostics are also reported from the build.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从命令行或在 Visual Studio 的顶级构建菜单中构建项目，并验证这些诊断是否也来自构建。
- en: 'Double-click on the warning *SA1025* *Code must not contain multiple whitespace
    characters in a row,* verify that the lightbulb is offered in the editor to fix
    the spacing violation, and applying the code fix by hitting the *Enter* key fixes
    it:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击警告 *SA1025* *代码不得在一行中包含多个空格字符*，验证编辑器中是否提供了灯泡以修复间距违规，并通过按 *Enter* 键应用代码修复来修复它：
- en: '![](img/8e7acd55-b902-4313-9df6-97438d3adb08.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8e7acd55-b902-4313-9df6-97438d3adb08.png)'
- en: Then, double-click on the warning SA1200 Using directive must appear within
    a namespace declaration and verify it is reported on the using statement `using
    System;` due to it being outside the namespace `Namespace`.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，双击警告 SA1200 使用指令必须在命名空间声明内出现，并验证它是否在 `using System;` 使用语句上报告，因为它位于命名空间 `Namespace`
    之外。
- en: Add a new file to the project named `stylecop.json`.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向项目中添加一个名为 `stylecop.json` 的新文件。
- en: 'Select `stylecop.json` in the solution explorer, change its build action from
    Content to AdditionalFiles using the Properties window, and save the project:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在解决方案资源管理器中选择 `stylecop.json`，使用属性窗口将其构建操作从内容更改为 AdditionalFiles，并保存项目：
- en: '![](img/fd18c60e-a282-4d68-b637-3e3d859ef4da.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fd18c60e-a282-4d68-b637-3e3d859ef4da.png)'
- en: 'Add the following text to `stylecop.json` and verify that *SA1200* is no longer
    reported:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下文本添加到 `stylecop.json` 并验证 *SA1200* 已不再被报告：
- en: '[PRE9]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Move `using System;` inside the namespace `Namespace` and verify *SA1200* *(*using
    directive must appear outside a namespace declaration) is now reported for the
    using statement being inside the namespace.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `using System;` 移入命名空间 `Namespace` 内，并验证 *SA1200* (*使用指令必须出现在命名空间声明之外*) 现在报告了位于命名空间内的使用语句。
- en: How it works...
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The StypeCop analyzers contain the following categories of style rules:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: StypeCop 分析器包含以下类别的样式规则：
- en: '**Spacing rules (SA1000-)** ([https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SpacingRules.md](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SpacingRules.md)):
    Rules that enforce spacing requirements around keywords and symbols in the code'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**间距规则（SA1000-）** ([https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SpacingRules.md](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SpacingRules.md))：强制执行代码中关键字和符号周围间距要求的规则'
- en: '**Readability rules (SA1100-)** ([https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/ReadabilityRules.md](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/ReadabilityRules.md)):
    Rules that ensure that the code is well-formatted and readable'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可读性规则（SA1100-）** ([https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/ReadabilityRules.md](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/ReadabilityRules.md))：确保代码格式良好且可读的规则'
- en: '**Ordering rules (SA1200-)** ([https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/OrderingRules.md](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/OrderingRules.md)):
    Rules that enforce a standard ordering scheme for code contents'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**排序规则（SA1200-）** ([https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/OrderingRules.md](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/OrderingRules.md))：强制执行代码内容标准排序方案的规则'
- en: '**Naming rules (SA1300-)** ([https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/NamingRules.md](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/NamingRules.md)):
    Rules that enforce naming requirements for members, types, and variables'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命名规则（SA1300-）** ([https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/NamingRules.md](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/NamingRules.md))：强制执行成员、类型和变量的命名要求的规则'
- en: '**Maintainability rules (SA1400-)** ([https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/MaintainabilityRules.md](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/MaintainabilityRules.md)):
    Rules that improve code maintainability'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可维护性规则（SA1400-）** ([https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/MaintainabilityRules.md](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/MaintainabilityRules.md))：提高代码可维护性的规则'
- en: '**Layout rules (SA1500-)** ([https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/LayoutRules.md](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/LayoutRules.md)):
    Rules that enforce code layout and line spacing'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**布局规则（SA1500-）** ([https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/LayoutRules.md](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/LayoutRules.md))：强制执行代码布局和行间距的规则'
- en: '**Documentation rules (SA1600-)** ([https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/DocumentationRules.md](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/DocumentationRules.md)):
    Rules that verify the content and formatting of code documentation'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文档规则（SA1600-）** ([https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/DocumentationRules.md](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/DocumentationRules.md))：验证代码文档内容和格式的规则'
- en: 'The code example that we provided had the following StyleCop diagnostics by
    category:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提供的代码示例按类别具有以下StyleCop诊断：
- en: '**Spacing**:'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**间距**：'
- en: SA1025 (Code must not contain multiple whitespace characters in a row)
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: SA1025（代码不得在一行中包含多个空白字符）
- en: '**Readability**:'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可读性**：'
- en: SA1101 (Prefix local calls with this)
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: SA1101（使用this前缀调用局部变量）
- en: '**Ordering**:'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**排序**：'
- en: SA1200 (Using directive must appear within a namespace declaration)
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: SA1200（使用指令必须位于命名空间声明内）
- en: '**Naming**:'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命名**：'
- en: SA1300 (Element "method" must begin with an uppercase letter)
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: SA1300（元素"method"必须以大写字母开头）
- en: SA1303 (Const field names must begin with uppercase letter)
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: SA1303（常量字段名必须以大写字母开头）
- en: '**Maintainability**:'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可维护性**：'
- en: SA1401 (Field must be private)
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: SA1401（字段必须是私有的）
- en: SA1402 (File may only contain a single type)
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: SA1402（文件只能包含一个类型）
- en: '**Layout**:'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**布局**：'
- en: SA1502 (Element must not be on a single line)
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: SA1502（元素不得位于单行）
- en: SA1503 (Braces must not be omitted)
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: SA1503（大括号不得省略）
- en: SA1505 (An opening brace must not be followed by a blank line)
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: SA1505（开括号后不得跟空白行）
- en: '**Documentation**:'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文档**：'
- en: SA1600 (Elements must be documented)
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: SA1600（元素必须进行文档化）
- en: SA1633 (The file header is missing or not located at the top of the file)
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: SA1633（文件头缺失或未位于文件顶部）
- en: The StyleCop analyzers package also comes with code fixes for certain rules
    to fix the violations.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: StyleCop分析器包还包含针对某些规则的代码修复，以修复违规行为。
- en: The StyleCop analyzers can be installed either as a NuGet package ([http://www.nuget.org/packages/StyleCop.Analyzers/](http://www.nuget.org/packages/StyleCop.Analyzers/))
    for specific C# projects/solutions or as a VSIX Extension enabled for all C# projects.
    The NuGet package enables the build-time StyleCop diagnostics and hence is the
    recommended way of installing the analyzers.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: StyleCop分析器可以作为NuGet包安装，用于特定的C#项目/解决方案，或者作为为所有C#项目启用的VSIX扩展。NuGet包启用构建时的StyleCop诊断，因此是推荐安装分析器的方式。
- en: The code style is generally considered to be a very subjective matter, and hence
    it is very important that individual rules can be selectively enabled, suppressed,
    or configured by the end user.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 代码风格通常被认为是一个非常主观的问题，因此允许最终用户选择性地启用、抑制或配置个别规则非常重要。
- en: StyleCop rules can be enabled or suppressed using the code analysis ruleset
    files (see the recipe, *Using ruleset file and ruleset editor to configure analyzers,*
    in [Chapter 2](8e0229af-657f-4306-96b5-40511d1fe7b2.xhtml), *Consuming Diagnostic
    Analyzers in .NET Projects* for reference).
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: StyleCop规则可以通过代码分析规则集文件启用或抑制（参见第2章的配方，*使用规则集文件和规则集编辑器配置分析器*，在[第2章](8e0229af-657f-4306-96b5-40511d1fe7b2.xhtml)，*在.NET项目中使用诊断分析器*中参考）。
- en: 'Stylecop rules can be configured and tuned using a `stylecop.json` file added
    to the project as an additional non-source file. For example, consider the ordering
    rule *SA1200* (using directive must appear within a namespace declaration) at
    ([http://www.nuget.org/packages/StyleCop.Analyzers/](http://www.nuget.org/packages/StyleCop.Analyzers/)).
    By default, this rule reports violations if using directives are placed at the
    top of the file *outside* a namespace declaration. However, this rule can be configured
    to be its semantic opposite and require using directives to be outside a namespace
    declaration and report violations if they are *inside*, using the following `stylecop.json`:'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Stylecop 规则可以通过添加到项目中作为额外非源文件的 `stylecop.json` 文件进行配置和调整。例如，考虑排序规则 *SA1200*（使用指令必须在命名空间声明内出现）在
    ([http://www.nuget.org/packages/StyleCop.Analyzers/](http://www.nuget.org/packages/StyleCop.Analyzers/))。默认情况下，此规则如果使用指令放置在文件顶部
    *外部* 命名空间声明，则会报告违规。然而，此规则可以被配置为其语义相反，并要求使用指令在命名空间声明外部，如果它们在 *内部* 则报告违规，使用以下 `stylecop.json`：
- en: '[PRE10]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The StyleCop analyzers repo has thorough documentation for each category of
    rules, as well as individual style rules. You can find the documentation at [https://github.com/DotNetAnalyzers/StyleCopAnalyzers/tree/master/documentation](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/tree/master/documentation).
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: StyleCop 分析器仓库为每个规则类别提供了详细的文档，以及单个样式规则。您可以在 [https://github.com/DotNetAnalyzers/StyleCopAnalyzers/tree/master/documentation](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/tree/master/documentation)
    找到这些文档。
