- en: '16'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '16'
- en: Building Mobile and Desktop Apps Using .NET MAUI
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用.NET MAUI构建移动和桌面应用程序
- en: This chapter is about learning how to make **graphical user interface** (**GUI**)
    apps by building a cross-platform mobile and desktop app for iOS and Android,
    macOS Catalyst, and Windows using **.NET MAUI** (**Multi-platform App UI**). According
    to the MAUI team, there are no breaking API changes between .NET 7 and .NET 8\.
    They focused primarily on fixing bugs and improving performance.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是关于通过构建适用于iOS和Android、macOS Catalyst和Windows的跨平台移动和桌面应用程序来学习如何制作图形用户界面（GUI）应用程序。根据MAUI团队的说法，.NET
    7和.NET 8之间没有破坏性API更改。他们主要专注于修复错误和改进性能。
- en: You will see how **eXtensible Application Markup Language** (**XAML**) makes
    it easy to define the **user interface** (**UI**) for a graphical app. XAML is
    pronounced “zamel.”
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到可扩展应用程序标记语言（**XAML**）如何使定义图形应用程序的用户界面（UI）变得容易。XAML发音为“zamel”。
- en: Cross-platform GUI development cannot be learned in only a hundred or so pages,
    but I want to introduce you to some of what is possible. Think of this .NET MAUI
    chapter and the additional online-only sections as an introduction that will give
    you a taste to inspire you, and then you can learn more from a book dedicated
    to mobile or desktop development.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 跨平台GUI开发不能仅在一百多页中学会，但我希望向您介绍一些可能的内容。想想这个.NET MAUI章节和仅在线提供的附加部分，它们将为您提供一个入门介绍，以激发您的兴趣，然后您可以从专门针对移动或桌面开发的书籍中学习更多。
- en: The app will allow the listing and management of customers in the Northwind
    database. The mobile app that you create will call an ASP.NET Core Minimal APIs
    web service. We will start building it in this chapter and then continue building
    the app in the online-only section, *Implementing Model-View-ViewModel for .NET
    MAUI*, which you will find in the exercises at the end of this chapter.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序将允许列出和管理Northwind数据库中的客户。您创建的移动应用程序将调用ASP.NET Core Minimal APIs Web服务。我们将从本章开始构建它，然后在仅在线提供的部分，即“实现.NET
    MAUI的模型-视图-视图模型（MVVM）”，继续构建应用程序，您可以在本章末尾的练习中找到它。
- en: A Windows computer with Visual Studio 2022 version 17.8 or later, or any operating
    system with Visual Studio Code and the `dotnet` CLI or JetBrains Rider, can be
    used to create a .NET MAUI project. But you will need a computer with Windows
    to compile WinUI 3 apps, and you will need a computer with macOS and Xcode to
    compile for macOS Catalyst and iOS.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有Visual Studio 2022版本17.8或更高版本的Windows计算机，或者任何具有Visual Studio Code和`dotnet`
    CLI或JetBrains Rider的操作系统，都可以用来创建.NET MAUI项目。但您需要一个装有Windows的计算机来编译WinUI 3应用程序，并且您需要一个装有macOS和Xcode的计算机来编译macOS
    Catalyst和iOS。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Understanding XAML
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解XAML
- en: Understanding .NET MAUI
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解.NET MAUI
- en: Building mobile and desktop apps using .NET MAUI
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用.NET MAUI构建移动和桌面应用程序
- en: Using shared resources
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用共享资源
- en: Using data binding
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用数据绑定
- en: Understanding XAML
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解XAML
- en: Let’s start by looking at the markup language used by .NET MAUI.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从.NET MAUI使用的标记语言开始看起。
- en: In 2006, Microsoft released **Windows Presentation Foundation** (**WPF**), which
    was the first technology to use XAML. Silverlight, for web and mobile apps, quickly
    followed, but it is no longer supported by Microsoft. WPF is still used today
    to create Windows desktop applications; for example, Visual Studio 2022 is partially
    built using WPF.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在2006年，微软发布了**Windows Presentation Foundation**（**WPF**），这是第一个使用XAML的技术。随后，用于网页和移动应用的Silverlight也迅速推出，但微软已不再支持它。WPF至今仍被用于创建Windows桌面应用程序；例如，Visual
    Studio 2022就是部分使用WPF构建的。
- en: 'XAML can be used to build parts of the following apps:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: XAML可以用于构建以下应用的某些部分：
- en: '**.NET MAUI apps** for mobile and desktop devices, including Android, iOS,
    Windows, and macOS. It is an evolution of a technology named **Xamarin.Forms**.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**.NET MAUI应用程序**适用于移动和桌面设备，包括Android、iOS、Windows和macOS。它是名为**Xamarin.Forms**的技术的一种演变。'
- en: '**WinUI 3 apps** for Windows 10 and 11.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WinUI 3应用程序**适用于Windows 10和11。'
- en: '**Universal Windows Platform (UWP) apps** for Windows 10 and 11, Xbox, Mixed
    Reality, and Meta Quest VR headsets.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通用Windows平台（UWP）应用**适用于Windows 10和11、Xbox、混合现实和Meta Quest VR头戴式设备。'
- en: '**WPF apps** for Windows desktop, including Windows 7 and later.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WPF应用程序**用于Windows桌面，包括Windows 7及更高版本。'
- en: '**Avalonia** and **Uno Platform apps** using cross-platform third-party technologies.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用跨平台第三方技术的**Avalonia**和**Uno Platform**应用。
- en: Simplifying code using XAML
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用XAML简化代码
- en: XAML simplifies C# code, especially when building a UI.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: XAML简化了C#代码，尤其是在构建用户界面（UI）时。
- en: Imagine that you need two or more pink buttons laid out horizontally to create
    a toolbar, which execute a method for their implementation when clicked.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你需要两个或更多水平排列的粉色按钮来创建工具栏，当点击时执行它们的实现方法。
- en: 'In C#, you might write the following code:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在 C# 中，你可能编写以下代码：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In XAML, this could be simplified to the following lines of code. When this
    XAML is processed, the equivalent properties are set, and methods are called to
    achieve the same goal as the preceding C# code:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在 XAML 中，这可以简化为以下几行代码。当处理此 XAML 时，等效的属性会被设置，并调用方法以实现与前面 C# 代码相同的目标：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You can think of XAML as an alternative and easier way of declaring and instantiating
    .NET types, especially when defining a UI and the resources that it uses.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将 XAML 视为一个替代且更简单的声明和实例化 .NET 类型的途径，尤其是在定义 UI 及其使用的资源时。
- en: XAML allows resources like brushes, styles, and themes to be declared at different
    levels, like a UI element or a page, or globally for the application to enable
    resource sharing.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: XAML 允许在不同级别声明资源，如 UI 元素或页面，或全局应用于应用程序以实现资源共享。
- en: XAML allows data binding between UI elements or between UI elements and objects
    and collections.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: XAML 允许在 UI 元素之间或 UI 元素与对象和集合之间进行数据绑定。
- en: 'If you choose to use XAML to define your UI and related resources at compile
    time, then the code-behind file must call the `InitializeComponent` method in
    the page constructor, as shown highlighted in the following code:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择在编译时使用 XAML 定义你的 UI 和相关资源，那么代码后文件必须在页面构造函数中调用 `InitializeComponent` 方法，如下面高亮显示的代码所示：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Calling the `InitializeComponent` method tells the page to read its XAML, create
    the controls defined in it, and set their properties and event handlers.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 调用 `InitializeComponent` 方法告诉页面读取其 XAML，创建其中定义的控件，并设置它们的属性和事件处理器。
- en: .NET MAUI namespaces
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .NET MAUI 命名空间
- en: '.NET MAUI has several important namespaces where its types are defined, as
    shown in *Table 16.1*:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: .NET MAUI 有几个重要的命名空间，其中定义了其类型，如 *表 16.1* 所示：
- en: '| **Namespace** | **Description** |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| **命名空间** | **描述** |'
- en: '| `Microsoft.Maui` | Utility types like `FlowDirection`, `IButton`, `IImage`,
    and `Thickness`. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `Microsoft.Maui` | 如 `FlowDirection`、`IButton`、`IImage` 和 `Thickness` 之类的实用类型。
    |'
- en: '| `Microsoft.Maui.Controls` | Common controls, pages, and related types like
    `Application`, `Brush`, `Button`, `CheckBox`, `ContentPage`, `Image`, and `VerticalStackPanel`.
    |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `Microsoft.Maui.Controls` | 常用控件、页面和相关类型，如 `Application`、`Brush`、`Button`、`CheckBox`、`ContentPage`、`Image`
    和 `VerticalStackPanel`。 |'
- en: '| `Microsoft.Maui.Graphics` | Types for graphics like `Color`, `Font`, `ImageFormat`,
    `PathBuilder`, `Point`, and `Size`. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `Microsoft.Maui.Graphics` | 用于图形的类型，如 `Color`、`Font`、`ImageFormat`、`PathBuilder`、`Point`
    和 `Size`。 |'
- en: 'Table 16.1: Important MAUI namespaces'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 表 16.1：重要的 MAUI 命名空间
- en: To import a namespace using XAML, in the root element you add `xmlns` attributes.
    One namespace is imported as the default, and others must be named using a prefix.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 XAML 导入命名空间，在根元素中添加 `xmlns` 属性。一个命名空间被导入为默认值，其他命名空间必须使用前缀命名。
- en: 'For example, .NET MAUI types are imported by default, so the element names
    do not need a prefix; general XAML syntax is imported using the `x` prefix for
    doing common things like naming a control or the class name that the XAML will
    be compiled as. Your project types are often imported using the `local` prefix,
    as shown in the following markup:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，.NET MAUI 类型默认导入，因此元素名称不需要前缀；通用 XAML 语法使用 `x` 前缀导入，用于执行命名控件或 XAML 将编译成的类名等常见操作。你的项目类型通常使用
    `local` 前缀导入，如下面的标记所示：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the example above, the project is named `MyMauiApp` and its controls like
    the `CustomerList` control are defined in a namespace named `MyMauiApp.Controls`.
    This namespace has been registered with the prefix `local`, so when an instance
    of the `CustomerList` control is needed, it is declared using `<local:CustomerList>`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，项目名为 `MyMauiApp`，其控件如 `CustomerList` 控件定义在名为 `MyMauiApp.Controls` 的命名空间中。此命名空间已使用前缀
    `local` 进行注册，因此当需要 `CustomerList` 控件的实例时，它使用 `<local:CustomerList>` 进行声明。
- en: You can import as many namespaces with different prefixes as you need.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以根据需要导入带有不同前缀的命名空间。
- en: Type converters
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类型转换器
- en: 'Type converters convert XAML attribute values that must be set as `string`
    values into other types. For example, the following button has its `Background`
    property set to the `string` value `"Pink"`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 类型转换器将必须设置为 `string` 类型的 XAML 属性值转换为其他类型。例如，以下按钮的 `Background` 属性设置为 `string`
    值 `"Pink"`：
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This is converted into a `SolidColorBrush` instance using a type converter,
    as shown in the following equivalent code:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: There are many type converters provided by .NET MAUI and you can create and
    register your own. These are especially useful for custom data visualizations.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: Choosing between .NET MAUI controls
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are lots of predefined controls that you can choose from for common UI
    scenarios. .NET MAUI (and most dialects of XAML) support these controls, as shown
    in *Table 16.2*:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '| **Controls** | **Description** |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
- en: '| `Button`, `ImageButton`, `MenuItem`, `ToolbarItem` | Executing actions |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
- en: '| `CheckBox`, `RadioButton`, `Switch` | Choosing options |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
- en: '| `DatePicker`, `TimePicker` | Choosing dates and times |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
- en: '| `CollectionView`, `ListView`, `Picker`, `TableView` | Choosing items from
    lists and tables |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
- en: '| `CarouselView`, `IndicatorView` | Scrolling animated views that show one
    item at a time |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
- en: '| `AbsoluteLayout`, `BindableLayout`, `FlexLayout`, `Grid`, `HorizontalStackLayout`,
    `StackLayout`, `VerticalStackLayout` | Layout containers that affect their children
    in different ways |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
- en: '| `Border`, `BoxView`, `Frame`, `ScrollView` | Visual elements |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
- en: '| `Ellipse`, `Line`, `Path`, `Polygon`, `Polyline`, `Rectangle`, `RoundRectangle`
    | Graphical elements |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
- en: '| `ActivityIndicator`, `Label`, `ProgressBar`, `RefreshView` | Displaying read-only
    text and other read-only displays |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
- en: '| `Editor`, `Entry` | Editing text |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
- en: '| `GraphicsView`, `Image` | Embedding images, videos, and audio files |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
- en: '| `Slider`, `Stepper` | Selecting within ranges of numbers |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
- en: '| `SearchBar` | Adding a search feature |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
- en: '| `BlazorWebView`, `WebView` | Embedding Blazor and web components |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
- en: '| `ContentView` | Building custom controls |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
- en: 'Table 16.2: MAUI user interface controls'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '.NET MAUI defines its controls in the `Microsoft.Maui.Controls` namespace.
    It has some specialized controls too:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '`Application`: Represents a cross-platform graphical application. It sets the
    root page, manages windows, themes, and resources, and provides app-level events
    like `PageAppearing`, `ModalPushing`, and `RequestedThemeChanged`. It also has
    methods that you can override to hook into app events like `OnStart`, `OnSleep`,
    `OnResume`, and `CleanUp`.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Shell`: A `Page` control that provides UI features that most applications
    require, like flyout or tab bar navigation, navigation tracking and management,
    and navigation events.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most .NET MAUI controls derive from `View`. One of the most important characteristics
    of a `View`-derived type is that they can be nested. This allows you to build
    complex custom user interfaces.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Markup extensions
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To support some advanced features, XAML uses markup extensions. Some of the
    most important enable element and data binding and the reuse of resources, as
    shown in the following list:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '`{Binding}` links an element to a value from another element or a data source.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`{OnPlatform}` sets properties to different values depending on the current
    platform.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`{StaticResource}` and `{DynamicResource}` link an element to a shared resource.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{StaticResource}` 和 `{DynamicResource}` 将元素链接到共享资源。'
- en: '`{AppThemeBinding}` links an element to a shared resource defined in a theme.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`{AppThemeBinding}` 将元素链接到在主题中定义的共享资源。'
- en: '.NET MAUI provides the `OnPlatform` markup extension to allow you to set different
    markup depending on the platform. For example, iPhone X and later introduced the
    notch that takes up extra space at the top of the phone display. We could add
    extra padding to an app that applies to all devices, but it would be better if
    we could add that extra padding only to iOS, as shown in the following markup:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: .NET MAUI 提供了 `OnPlatform` 标记扩展，允许您根据平台设置不同的标记。例如，iPhone X 及以后的型号在手机显示屏顶部引入了缺口，占据了额外的空间。我们可以为适用于所有设备的应用程序添加额外的填充，但如果我们能只为
    iOS 添加额外的填充，那就更好了，如下面的标记所示：
- en: '[PRE6]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'There is a simplified syntax too, as shown in the following markup:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 也有简化的语法，如下面的标记所示：
- en: '[PRE7]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Understanding .NET MAUI
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 .NET MAUI
- en: To create a mobile app that only needs to run on iPhones, you might choose to
    build it with either the Objective-C or Swift language and the UIkit libraries
    using the Xcode development tool.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个仅需要在 iPhone 上运行的应用程序，您可能会选择使用 Objective-C 或 Swift 语言以及 UIKit 库，并通过 Xcode
    开发工具来构建它。
- en: To create a mobile app that only needs to run on Android phones, you might choose
    to build it with either the Java or Kotlin language and the Android SDK libraries
    using the Android Studio development tool.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个仅需要在 Android 手机上运行的应用程序，您可能会选择使用 Java 或 Kotlin 语言以及 Android SDK 库，并通过 Android
    Studio 开发工具来构建它。
- en: But what if you need to create a mobile app that can run on iPhones *and* Android
    phones? And what if you only want to create that mobile app once using a programming
    language and development platform that you are already familiar with? And what
    if you realized that with a bit more coding effort to adapt the UI to desktop-size
    devices, you could target macOS and Windows desktops too?
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果您需要创建一个可以在 iPhone 和 Android 手机上运行的应用程序呢？如果您只想使用您已经熟悉的编程语言和开发平台创建一次该移动应用程序怎么办？还有，如果您意识到通过稍微增加一些代码来适应桌面尺寸的
    UI，您还可以针对 macOS 和 Windows 桌面呢？
- en: .NET MAUI enables developers to build cross-platform mobile apps for Apple iOS
    (iPhone), iPadOS, macOS using Catalyst, Windows using WinUI 3, and Google Android
    using C# and .NET, which are then compiled to native APIs and executed on native
    phone and desktop platforms.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: .NET MAUI 使开发者能够使用 Catalyst 为 Apple iOS（iPhone）、iPadOS、macOS 构建跨平台移动应用程序，使用
    WinUI 3 为 Windows 构建应用程序，以及使用 C# 和 .NET 为 Google Android 构建应用程序，这些应用程序随后被编译成原生
    API 并在原生手机和桌面平台上执行。
- en: Business logic layer code can be written once and shared between all platforms.
    UI interactions and APIs are different on various mobile and desktop platforms,
    so the UI layer is sometimes custom for each platform.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 业务逻辑层代码可以一次编写并在所有平台上共享。UI 交互和 API 在各种移动和桌面平台上有所不同，因此 UI 层有时需要针对每个平台进行自定义。
- en: Like WPF and UWP apps, .NET MAUI uses XAML to define the UI once for all platforms
    using abstractions of platform-specific UI components. Applications built with
    .NET MAUI draw the UI using native platform widgets, so the app’s look and feel
    fits naturally with the target mobile platform.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 与 WPF 和 UWP 应用程序一样，.NET MAUI 使用 XAML 为所有平台定义一次 UI，使用特定于平台的 UI 组件的抽象。使用 .NET
    MAUI 构建的应用程序使用原生平台小部件绘制 UI，因此应用程序的外观和感觉与目标移动平台自然契合。
- en: 'A user experience built using .NET MAUI will not perfectly fit a specific platform
    in the same way that one custom built with native tools for that platform would,
    but for mobile and desktop apps that will not have millions of users, it is good
    enough. With some effort, you can build beautiful apps, as illustrated by the
    Microsoft challenge that you can read about at the following link:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 .NET MAUI 构建的用户体验可能不会像使用针对该平台原生工具自定义构建的应用程序那样完美地适应特定平台，但对于不会拥有数百万用户的移动和桌面应用程序来说，这已经足够好了。通过一些努力，您可以构建出美丽的应用程序，正如微软挑战所展示的那样，您可以在以下链接中了解更多信息：
- en: '[https://devblogs.microsoft.com/dotnet/announcing-dotnet-maui-beautiful-ui-challenge/](https://devblogs.microsoft.com/dotnet/announcing-dotnet-maui-beautiful-ui-challenge/)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://devblogs.microsoft.com/dotnet/announcing-dotnet-maui-beautiful-ui-challenge/](https://devblogs.microsoft.com/dotnet/announcing-dotnet-maui-beautiful-ui-challenge/)'
- en: .NET MAUI and Xamarin support
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .NET MAUI 和 Xamarin 支持
- en: Major versions of .NET MAUI ship with .NET starting with .NET 7 but as an optional
    workload. This means that .NET MAUI does not follow the same **Short Term Support**
    (**STS**)/**Long Term Support** (**LTS**)as the main .NET platform. Every version
    of .NET MAUI only has 18 months of support, so .NET MAUI effectively is always
    an STS release, and this includes the .NET MAUI version that ships as a workload
    with .NET 8.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: .NET MAUI的主要版本从.NET 7开始与.NET一起发货，但作为可选工作负载。这意味着.NET MAUI不遵循与主要.NET平台相同的**短期支持**（**STS**）/**长期支持**（**LTS**）。每个.NET
    MAUI版本只有18个月的支持，因此.NET MAUI实际上始终是一个STS版本，这包括随.NET 8一起作为工作负载发货的.NET MAUI版本。
- en: .NET MAUI has dependencies on other OSes like iOS and macOS so it gets complicated.
    Major versions of iOS usually release in September, and major versions of iPadOS
    and macOS often release later in October or November. This does not give the .NET
    MAUI team much time to make sure their platform works well with those operating
    systems before a major version of .NET is released in early November.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: .NET MAUI依赖于其他操作系统，如iOS和macOS，因此会变得复杂。iOS的主要版本通常在9月发布，而iPadOS和macOS的主要版本通常在10月或11月稍晚发布。这并不给.NET
    MAUI团队太多时间在11月初.NET发布前确保其平台与这些操作系统良好兼容。
- en: '**Warning!** Xamarin reaches its **end-of-life** (**EOL**) on May 1, 2024 so
    any Xamarin and Xamarin.Forms projects should migrate to .NET MAUI or an alternative
    like Avalonia or Uno before then.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告！**Xamarin将于2024年5月1日达到其**生命终结**（**EOL**），因此任何Xamarin和Xamarin.Forms项目都应该在此之前迁移到.NET
    MAUI或Avalonia或Uno等替代方案。'
- en: Development tools for mobile first, cloud first
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 移动优先、云优先的开发工具
- en: Mobile apps are often supported by services in the cloud.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 移动应用程序通常由云中的服务支持。
- en: 'Satya Nadella, CEO of Microsoft, famously said the following:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 微软首席执行官萨蒂亚·纳德拉（Satya Nadella）曾著名地说以下内容：
- en: To me, when we say mobile first, it’s not the mobility of the device, it’s actually
    the mobility of the individual experience. [...] The only way you are going to
    be able to orchestrate the mobility of these applications and data is through
    the cloud.
  id: totrans-102
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 对我来说，当我们说“移动优先”时，并不是指设备的移动性，而是指个人体验的移动性。[...] 你唯一能够协调这些应用程序和数据移动性的方式是通过云。
- en: 'When installing Visual Studio 2022, you must select the **.NET Multi-platform
    App UI development** workload, which is in the **Desktop & Mobile** section, as
    shown in *Figure 16.1*:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装Visual Studio 2022时，你必须选择位于**桌面和移动**部分的**.NET多平台应用程序UI开发**工作负载，如图*图16.1*所示：
- en: '![](img/B19587_16_01.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19587_16_01.png)'
- en: 'Figure 16.1: Selecting the .NET MAUI workload for Visual Studio 2022'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.1：为Visual Studio 2022选择.NET MAUI工作负载
- en: Installing .NET MAUI workloads manually
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 手动安装.NET MAUI工作负载
- en: Installing Visual Studio 2022 should install the required .NET MAUI workloads
    if you selected them. If not, then you can make sure that the workloads are installed
    manually.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Visual Studio 2022应该会安装你选择的所需.NET MAUI工作负载。如果没有，那么你可以手动确保工作负载已安装。
- en: 'To see which workloads are currently installed, enter the following command:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看当前安装的工作负载，请输入以下命令：
- en: '[PRE8]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The currently installed workloads will appear in a table, as shown in the following
    output:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当前安装的工作负载将显示在表格中，如下所示输出：
- en: '[PRE9]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To see which workloads are available to install, enter the following command:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看可安装的工作负载，请输入以下命令：
- en: '[PRE10]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The currently available workloads will appear in a table, as shown in the following
    output:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 当前可用的工作负载将显示在表格中，如下所示输出：
- en: '[PRE11]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To install the .NET MAUI workloads for all platforms, enter the following command
    at the command line or terminal:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装所有平台的.NET MAUI工作负载，请在命令行或终端中输入以下命令：
- en: '[PRE12]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To update all existing workload installations, enter the following command:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 要更新所有现有工作负载安装，请输入以下命令：
- en: '[PRE13]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To add missing workload installations required for a project, in the folder
    containing the project file, enter the following command:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加项目中缺少的工作负载安装，请在包含项目文件的文件夹中输入以下命令：
- en: '[PRE14]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Over time you are likely to install multiple versions of workloads related
    to different versions of .NET SDKs. Before .NET 8, developers tried to manually
    delete workload folders, which can cause problems. Introduced with .NET 8 is a
    new feature to remove leftover and unneeded workloads, as shown in the following
    command:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，你可能会安装与不同版本的.NET SDK相关的多个工作负载版本。在.NET 8之前，开发者尝试手动删除工作负载文件夹，这可能会引起问题。随着.NET
    8的引入，有一个新功能可以删除遗留和不需要的工作负载，如下所示命令：
- en: '[PRE15]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '**More Information**: If you want to use Visual Studio 2022 to create an iOS
    mobile app or a macOS Catalyst desktop app, then you can connect over a network
    to a **Mac build host**. Instructions can be found at the following link: [https://learn.microsoft.com/en-us/dotnet/maui/ios/pair-to-mac](https://learn.microsoft.com/en-us/dotnet/maui/ios/pair-to-mac).'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '**更多信息**：如果您想使用Visual Studio 2022创建iOS移动应用程序或macOS Catalyst桌面应用程序，那么您可以通过网络连接到**Mac构建主机**。有关说明，请参阅以下链接：[https://learn.microsoft.com/en-us/dotnet/maui/ios/pair-to-mac](https://learn.microsoft.com/en-us/dotnet/maui/ios/pair-to-mac)。'
- en: .NET MAUI user interface component categories
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .NET MAUI用户界面组件类别
- en: '.NET MAUI includes some common controls for building user interfaces. They
    can be divided into four categories:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: .NET MAUI包括一些用于构建用户界面的常见控件。它们可以分为四个类别：
- en: '**Pages** represent cross-platform application screens, for example, `Shell`,
    `ContentPage`, `NavigationPage`, `FlyoutPage`, and `TabbedPage`.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**页面**代表跨平台应用程序屏幕，例如`Shell`、`ContentPage`、`NavigationPage`、`FlyoutPage`和`TabbedPage`。'
- en: '**Layouts** represent the structure of a combination of other UI components,
    for example, `Grid`, `StackLayout`, and `FlexLayout`.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**布局**代表其他UI组件组合的结构，例如`Grid`、`StackLayout`和`FlexLayout`。'
- en: '**Views** represent a single user interface component, for example, `CarouselView`,
    `CollectionView`, `Label`, `Entry`, `Editor`, and `Button`.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图**代表单个用户界面组件，例如`CarouselView`、`CollectionView`、`Label`、`Entry`、`Editor`和`Button`。'
- en: '**Cells** represent a single item in a list or table view, for example, `TextCell`,
    `ImageCell`, `SwitchCell`, and `EntryCell`.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单元格**代表列表或表格视图中的单个项目，例如`TextCell`、`ImageCell`、`SwitchCell`和`EntryCell`。'
- en: Shell control
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Shell控件
- en: The `Shell` control is designed to simplify app development by providing standardized
    navigation and search capabilities. In your project, you would create a class
    that inherits from the `Shell` control class. Your derived class defines components
    like a `TabBar`, which contains `Tab` items, `FlyoutItem` instances, and `ShellContent`,
    which contain the `ContentPage` instances for each page. A `TabBar` should be
    used when there are only up to about four or five pages to navigate between. `FlyoutItem`
    navigation should be used when there are more items because they can be presented
    as a vertical scrollable list. You can use both, with the `TabBar` showing a subset
    of items. The `Shell` will keep them synchronized.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`Shell`控件旨在通过提供标准化的导航和搜索功能来简化应用程序开发。在您的项目中，您将创建一个从`Shell`控件类继承的类。您的派生类定义了如`TabBar`之类的组件，它包含`Tab`项、`FlyoutItem`实例和`ShellContent`，它们包含每个页面的`ContentPage`实例。当只有四到五页需要导航时，应使用`TabBar`。当有更多项时，应使用`FlyoutItem`导航，因为它们可以表示为垂直可滚动的列表。您可以使用两者，其中`TabBar`显示项目的一个子集。`Shell`将它们保持同步。'
- en: Flyout navigation is when a list of items flies out (or slides) from the left
    side of a mobile device’s screen or desktop app’s main window. The user invokes
    it by tapping on a “hamburger” icon with three horizontal lines stacked on top
    of each other. When the user taps a flyout item, its page is instantiated when
    needed, as the user navigates around the UI.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Flyout导航是指从移动设备屏幕的左侧或桌面应用程序主窗口的左侧飞出（或滑动）项目列表。用户通过点击一个带有三个水平线堆叠的“汉堡”图标来调用它。当用户点击飞出项时，其页面在需要时实例化，因为用户在UI中导航。
- en: The top bar automatically shows a **Back** button when needed to allow the user
    to navigate back to a previous page.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 顶部栏在需要时自动显示**返回**按钮，允许用户导航回上一页。
- en: ListView control
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 列表视图控件
- en: The `ListView` control is used for long lists of data-bound values of the same
    type. It can have headers and footers and its list items can be grouped.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`ListView`控件用于长列表的数据绑定值，这些值类型相同。它可以有标题和页脚，其列表项可以分组。'
- en: 'It has cells to contain each list item. There are two built-in cell types:
    text and image. Developers can define custom cell types.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 它包含用于容纳每个列表项的单元格。有两种内置的单元格类型：文本和图像。开发者可以定义自定义单元格类型。
- en: 'Cells can have context actions that appear when the cell is swiped on an iPhone,
    long-pressed on Android, or right-clicked on a desktop OS. A context action that
    is destructive can be shown in red, as shown in the following markup:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 单元格可以具有上下文操作，当在iPhone上滑动单元格、在Android上长按或桌面操作系统上右键单击时会出现。破坏性的上下文操作可以以红色显示，如下面的标记所示：
- en: '[PRE16]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Entry and Editor controls
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Entry和Editor控件
- en: 'The `Entry` and `Editor` controls are used for editing text values and are
    often data-bound to an entity model property, as shown in the following markup:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`Entry`和`Editor`控件用于编辑文本值，通常与实体模型属性数据绑定，如下面的标记所示：'
- en: '[PRE17]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '**Good Practice**: Use `Entry` for a single line of text. Use `Editor` for
    multiple lines of text.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：对于单行文本使用`Entry`。对于多行文本使用`Editor`。'
- en: .NET MAUI handlers
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .NET MAUI处理器
- en: In .NET MAUI, XAML controls are defined in the `Microsoft.Maui.Controls` namespace.
    Components called **handlers** map these common controls to native controls on
    each platform. On iOS, a handler will map a .NET MAUI `Button` to an iOS-native
    `UIButton` defined by UIkit. On macOS, `Button` is mapped to `NSButton` defined
    by AppKit. On Android, `Button` is mapped to an Android-native `AppCompatButton`.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在.NET MAUI中，XAML控件在`Microsoft.Maui.Controls`命名空间中定义。称为**处理器**的组件将这些常用控件映射到每个平台的原生控件。在iOS上，处理器将.NET
    MAUI的`Button`映射到由UIkit定义的iOS原生`UIButton`。在macOS上，`Button`映射到由AppKit定义的`NSButton`。在Android上，`Button`映射到Android原生`AppCompatButton`。
- en: Handlers have a `NativeView` property that exposes the underlying native control.
    This allows you to work with platform-specific features like properties, methods,
    and events, and customize all instances of a native control.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 处理器有一个`NativeView`属性，它公开了底层的原生控件。这允许你使用平台特定的功能，如属性、方法和事件，并自定义原生控件的所有实例。
- en: Writing platform-specific code
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写特定平台的代码
- en: If you need to write code statements that only execute for a specific platform
    like Android, then you can use compiler directives.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要编写仅针对特定平台（如Android）执行的代码语句，则可以使用编译器指令。
- en: 'For example, by default, `Entry` controls on Android show an underline character.
    If you want to hide the underline, you could write some Android-specific code
    to get the handler for the `Entry` control, use its `NativeView` property to access
    the underlying native control, and then set the property that controls that feature
    to `false`, as shown in the following code:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，默认情况下，Android上的`Entry`控件显示下划线字符。如果你想隐藏下划线，你可以编写一些Android特定的代码来获取`Entry`控件的处理器，使用其`NativeView`属性来访问底层的原生控件，然后将控制该功能的属性设置为`false`，如下面的代码所示：
- en: '[PRE18]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Predefined compiler constants include the following:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 预定义的编译器常量包括以下内容：
- en: '`__ANDROID__`'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__ANDROID__`'
- en: '`__IOS__`'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__IOS__`'
- en: '`WINDOWS`'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WINDOWS`'
- en: 'The compiler `#if` statement syntax is slightly different from the C# `if`
    statement syntax, as shown in the following code:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器的`#if`语句语法与C#的`if`语句语法略有不同，如下面的代码所示：
- en: '[PRE19]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Now that you have been introduced to some of the important concepts around MAUI
    apps, and you’ve set up the additional components needed for MAUI, let’s get practical
    and build a MAUI project.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了MAUI应用程序的一些重要概念，并且已经设置了MAUI所需的附加组件，让我们来实际操作并构建一个MAUI项目。
- en: Building mobile and desktop apps using .NET MAUI
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用.NET MAUI构建移动和桌面应用程序
- en: We will build a mobile and desktop app for managing customers in Northwind.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为Northwind的客户管理构建一个移动和桌面应用程序。
- en: '**Good Practice**: If you have a Mac and you have never run Xcode on it, then
    run it now until you see the *Start* window. This will ensure that all its required
    components are installed and registered. If you do not do this, then you might
    get errors with your projects later.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：如果你有一台Mac，并且你从未在上面运行过Xcode，那么现在就运行它，直到你看到*开始*窗口。这将确保所有必需的组件都已安装并注册。如果你不这样做，那么你的项目可能会出现错误。'
- en: Creating a virtual Android device for local app testing
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建用于本地应用程序测试的虚拟Android设备
- en: To target Android, you must install at least one Android SDK. A default installation
    of Visual Studio 2022 with the mobile development workload already includes one
    Android SDK, but it is often an older version designed to support as many Android
    devices as possible.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 要针对Android，你必须安装至少一个Android SDK。Visual Studio 2022的默认安装（已包含移动开发工作负载）已经包含了一个Android
    SDK，但它通常是针对尽可能多的Android设备设计的较旧版本。
- en: 'To use the latest features of .NET MAUI, you must configure a more recent Android
    virtual device:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用.NET MAUI的最新功能，你必须配置一个更近期的Android虚拟设备：
- en: In Windows, start **Visual Studio 2022**. If you see the modal dialog box **Welcome
    Experience**, then click **Continue without code**.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Windows中，启动**Visual Studio 2022**。如果你看到模态对话框**欢迎体验**，则单击**无代码继续**。
- en: Navigate to **Tools** | **Android** | **Android Device Manager**. If you are
    prompted by **User Account Control** to allow this app to make changes to your
    device, click **Yes**.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**工具** | **Android** | **Android设备管理器**。如果你被**用户账户控制**提示允许此应用程序对你的设备进行更改，请单击**是**。
- en: In the **Android Device Manager**, click the **+ New** button to create a new
    device.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Android设备管理器**中，单击**+ 新建**按钮以创建一个新设备。
- en: 'In the dialog box, make the following choices, as shown in *Figure 16.2*:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在对话框中，按照*图16.2*所示进行以下选择：
- en: '**Base Device**: **Pixel 5**'
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基础设备**: **Pixel 5**'
- en: '**Processor**: **x86_64**'
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**处理器**: **x86_64**'
- en: '**OS**: **Android 13.0 – API 33**'
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**操作系统**: **Android 13.0 – API 33**'
- en: '**Google APIs**: Selected'
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Google APIs**: 已选择'
- en: '**Google Play Store**: Cleared'
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Google Play Store**: 已清除'
- en: '![](img/B19587_16_02.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19587_16_02.png)'
- en: 'Figure 16.2: Selecting the hardware and OS for a virtual Android device'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.2：选择虚拟 Android 设备的硬件和操作系统
- en: Click **Create**.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **创建**。
- en: Accept any license agreements.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接受任何许可协议。
- en: Wait for any required downloads.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待任何必要的下载。
- en: In **Android Device Manager**, in the list of devices, in the row for the device
    that you just created, click **Start**.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Android 设备管理器** 中，在设备列表中，在您刚刚创建的设备的行中，点击 **启动**。
- en: Be patient! It can take a few minutes for the emulator to start.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请耐心等待！模拟器启动可能需要几分钟。
- en: When the Android device has finished starting, click the Chrome browser and
    test that it has access to the network by navigating to [https://www.bbc.co.uk/news](https://www.bbc.co.uk/news).
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当 Android 设备启动完成后，点击 Chrome 浏览器，通过导航到 [https://www.bbc.co.uk/news](https://www.bbc.co.uk/news)
    测试它是否有网络访问权限。
- en: Close the emulator.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭模拟器。
- en: Close **Android Device Manager**.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭 **Android 设备管理器**。
- en: Restart Visual Studio 2022 to ensure that it is aware of the new emulator.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动 Visual Studio 2022 以确保它知道新的模拟器。
- en: Enabling Windows developer mode
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用 Windows 开发者模式
- en: 'To create apps for Windows, you must enable developer mode:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 要为 Windows 创建应用程序，您必须启用开发者模式：
- en: Navigate to **Start** **|** **Settings** **|** **Privacy & security** **|**
    **For developers**, and then switch on **Developer Mode**. (You can also search
    for “developers”.)
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 **开始** **|** **设置** **|** **隐私和安全** **|** **开发者**，然后开启 **开发者模式**。（您也可以搜索“开发者”。）
- en: Accept the warning about how it “**could expose your device and personal data
    to security risk or harm your device**e.”
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接受有关它“**可能使您的设备和个人信息面临安全风险或损害您的设备**”的警告。
- en: Close the **Settings** app.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭 **设置** 应用。
- en: Creating a .NET MAUI project
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 .NET MAUI 项目
- en: 'We will now create a project for a cross-platform mobile and desktop app:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将创建一个跨平台移动和桌面应用程序的项目：
- en: 'In Visual Studio 2022, add a new project, as defined in the following list:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Visual Studio 2022 中，添加一个新项目，如下列表中定义：
- en: 'Project template: **.NET MAUI App** / `maui`'
  id: totrans-192
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目模板：**.NET MAUI App** / `maui`
- en: You can select **C#** for the language and **MAUI** for the project type to
    filter and show only the appropriate project templates.
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以选择 **C#** 作为语言，并选择 **MAUI** 作为项目类型以过滤并仅显示适当的模板。
- en: 'Project file and folder: `Northwind.Maui.Client`'
  id: totrans-194
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目文件和文件夹：`Northwind.Maui.Client`
- en: 'Solution file and folder: `Chapter16`'
  id: totrans-195
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决方案文件和文件夹：`Chapter16`
- en: On Windows, if you see a Windows security alert that **Windows Defender Firewall
    has blocked some features of Broker on all public and private networks**, then
    select **Private networks** and clear **Public networks**, and then click the
    **Allow access** button.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Windows 上，如果您看到 Windows 安全警报，表明 **Windows Defender 防火墙已阻止所有公共和私人网络上的 Broker
    的某些功能**，那么选择 **私人网络** 并清除 **公共网络**，然后点击 **允许访问** 按钮。
- en: 'In the project file, note the element that targets iOS, Android, and Mac Catalyst,
    and the element to enable Windows targeting if the operating system is Windows,
    as well as the elements that set the project to be a single MAUI project, as shown
    highlighted in the following partial markup:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目文件中，注意针对 iOS、Android 和 Mac Catalyst 的元素，以及如果操作系统是 Windows，则启用 Windows 目标的元素，以及将项目设置为单个
    MAUI 项目的元素，如下部分标记所示：
- en: '[PRE20]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'If you see the error `Error NU1012 Platform version is not present for one
    or more target frameworks, even though they have specified a platform: net8.0-ios,
    net8.0-maccatalyst`, then at the command prompt or terminal, in the project folder,
    restore workloads for the project, as shown in the following command:'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '如果您看到错误 `Error NU1012 Platform version is not present for one or more target
    frameworks, even though they have specified a platform: net8.0-ios, net8.0-maccatalyst`，那么在命令提示符或终端中，在项目文件夹中，如以下命令所示恢复项目工作负载：'
- en: '[PRE21]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'To the right of the **Run** button in the toolbar, set **Framework** to **net8.0-android**,
    and select the **Pixel 5 - API 33 (Android 13.0 - API 33)** emulator image that
    you previously created, as shown in *Figure 16.3*:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在工具栏中 **运行** 按钮的右侧，将 **框架** 设置为 **net8.0-android**，并选择您之前创建的 **Pixel 5 - API
    33 (Android 13.0 - API 33)** 模拟器映像，如图 *16.3* 所示：
- en: '![](img/B19587_16_03.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19587_16_03.png)'
- en: 'Figure 16.3: Selecting an Android device as the target for startup'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.3：选择 Android 设备作为启动目标
- en: Click the **Run** button in the toolbar and wait for the device emulator to
    start the Android operating system, and then deploy and launch your mobile app.
    This can take more than five minutes, especially the first time that you build
    a new MAUI project. Keep an eye on the Visual Studio 2022 status bar, as shown
    in *Figure 16.4*:![](img/B19587_16_04.png)
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 16.4: Status bar shows progress of the .NET MAUI app deployment'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you’re doing this for the first time, there might be another Google license
    agreement to confirm.
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the .NET MAUI app, click the **Click me** button to increment the counter
    three times, as shown in *Figure 16.5*:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_16_05.png)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.5: Incrementing the counter three times in the .NET MAUI app on Android'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: Close the Android device emulator. You do not need to power down the emulator.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To the right of the **Run** button in the toolbar, set **Framework** to **net8.0-windows10.0.19041.0**.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure that the **Debug** configuration is selected and then click the solid
    green triangle **Start** button labeled **Windows Machine**. You might see a warning
    about missing packages that should be installed on the first run. Just click the
    **start** button a second time and they should now be installed and it will work.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After a few moments, note that the Windows app displays with the same **Click
    me** button and counter functionality as shown in *Figure 16.6*:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_16_06.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.6: The same .NET MAUI app on Windows'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: Close the Windows app.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Good Practice**: You should test your .NET MAUI app on all the potential
    devices that it will need to run on. In this chapter, even if I do not explicitly
    tell you to do so, I recommend that you try the app by running it on your emulated
    Android device and on Windows after each task to add a new feature. That way,
    you will have at least seen how it looks on a mobile device with a primarily tall
    and thin portrait size, and on a desktop device with a larger landscape size.
    If you are using a Mac, then I recommend that you test it in the iOS Simulator,
    Android Emulator, and as a Mac Catalyst desktop app.'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: Adding shell navigation and more content pages
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, let’s review the existing structure of the .NET MAUI app and then add
    some new pages and navigation to the project:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Northwind.Maui.Client` project, in `MauiProgram.cs`, note that the
    `builder` object calls `UseMauiApp` and specifies `App` as its generic type, as
    shown highlighted in the following code:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In **Solution Explorer**, expand `App.xaml`, open `App.xaml.cs`, and note the
    `MainPage` property of the `App` is set to an instance of `AppShell`, as shown
    highlighted in the following code:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In `AppShell.xaml`, note that the shell disables flyout mode and only has a
    single content page named `MainPage`, as shown highlighted in the following code:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: A shell with only one content page does not show any navigation. You must have
    at least two shell content items.
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the `Resources` folder, in the `Images` folder, add images for some icons
    that we will use for flyout items in the navigation we are about to add.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Resources`文件夹中的`Images`文件夹中，添加我们将用于即将添加的导航中飞出项的一些图标图片。
- en: 'You can download the images from the GitHub repository at the following link:
    [https://github.com/markjprice/apps-services-net8/tree/main/code/Chapter16/Northwind.Maui.Client/Resources/Images](https://github.com/markjprice/apps-services-net8/tree/main/code/Chapter16/Northwind.Maui.Client/Resources/Images).'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以从以下链接下载图片：[https://github.com/markjprice/apps-services-net8/tree/main/code/Chapter16/Northwind.Maui.Client/Resources/Images](https://github.com/markjprice/apps-services-net8/tree/main/code/Chapter16/Northwind.Maui.Client/Resources/Images)。
- en: 'In `AppShell.xaml`, enable flyout mode, set the background to a pale blue color,
    add an icon for the `MainPage` content, add a flyout header, and then add some
    flyout items with more shell content, as shown highlighted in the following markup:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`AppShell.xaml`中，启用飞出模式，将背景设置为浅蓝色，添加`MainPage`内容的图标，添加飞出标题，然后添加一些包含更多外壳内容的飞出项，如下面的标记所示：
- en: '[PRE25]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: You will see warnings on some of the `ContentTemplate` lines about missing pages
    because we have not created them yet. `AliceBlue` looks good in light mode, but
    if your operating system uses dark mode, then you might prefer an alternative
    color like `#75858a`.
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你会在一些`ContentTemplate`行上看到关于缺失页面的警告，因为我们还没有创建它们。在浅色模式下`AliceBlue`看起来不错，但如果你的操作系统使用深色模式，你可能更喜欢像`#75858a`这样的替代颜色。
- en: In Visual Studio 2022, right-click the `Northwind.Maui.Client` project folder,
    choose **Add** | **New Item...** or press *Ctrl* + *Shift* + *A*, select **.NET
    MAUI** in the template types tree, select **.NET MAUI ContentPage (XAML)**, enter
    the name `SettingsPage`, and click **Add**.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio 2022中，右键单击`Northwind.Maui.Client`项目文件夹，选择**添加** | **新建项...**或按*Ctrl*
    + *Shift* + *A*，在模板类型树中选择**.NET MAUI**，选择**.NET MAUI ContentPage (XAML)**，输入名称`SettingsPage`，然后点击**添加**。
- en: 'Visual Studio Code and JetBrains Rider do not have project item templates for
    MAUI. You can create this item using the CLI, as shown in the following command:'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Visual Studio Code和JetBrains Rider没有MAUI的项目项模板。你可以使用CLI创建此项目，如下面的命令所示：
- en: '[PRE26]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Repeat the previous step to add content pages named:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复之前的步骤以添加以下命名的内容页面：
- en: '`CategoriesPage`'
  id: totrans-236
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CategoriesPage`'
- en: '`CustomersPage`'
  id: totrans-237
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CustomersPage`'
- en: '`CustomerDetailPage`'
  id: totrans-238
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CustomerDetailPage`'
- en: '`EmployeesPage`'
  id: totrans-239
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EmployeesPage`'
- en: '`ProductsPage`'
  id: totrans-240
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ProductsPage`'
- en: In **Solution Explorer**, double-click on the `CategoriesPage.xaml` file to
    open it for editing. Note that Visual Studio 2022 does not yet have a graphical
    design view for XAML.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**解决方案资源管理器**中，双击`CategoriesPage.xaml`文件以打开它进行编辑。请注意，Visual Studio 2022还没有XAML的图形设计视图。
- en: 'In the `<ContentPage>` element, change the `Title` to `Categories`, and in
    the `<Label>` element, change the `Text` to `Categories`, as shown highlighted
    in the following markup:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<ContentPage>`元素中，将`Title`更改为`Categories`，在`<Label>`元素中，将`Text`更改为`Categories`，如下面的标记所示：
- en: '[PRE27]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Navigate to **View** | **Toolbox** or press *Ctrl* + *W*, *X*. Note that the
    toolbox has sections for **Controls****,** **Layouts**, **Cells**, and **General**.
    If you are using a code editor without a toolbox, you can just type the markup
    instead of using the toolbox.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**视图** | **工具箱**或按*Ctrl* + *W*，*X*。请注意，工具箱有**控件**、**布局**、**单元格**和**通用**等部分。如果你使用的是没有工具箱的代码编辑器，你可以直接输入标记而不是使用工具箱。
- en: At the top of the toolbox is a search box. Enter the letter `b`, and then note
    that the list of controls is filtered to show controls like **Button**, **ProgressBar**,
    and **AbsoluteLayout**.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在工具箱的顶部是一个搜索框。输入字母`b`，然后注意控件列表被过滤以显示**Button**、**ProgressBar**和**AbsoluteLayout**等控件。
- en: 'Drag and drop the **Button** control from the toolbox into the XAML markup
    after the existing `<Label>` control, before the closing element of the `VerticalStackLayout`,
    and change its `Text` property to `Hello!`, as shown in the following markup:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将工具箱中的**Button**控件拖放到现有的`<Label>`控件之后，在`VerticalStackLayout`的关闭元素之前，并将它的`Text`属性更改为`Hello!`，如下面的标记所示：
- en: '[PRE28]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Set the startup to **Windows Machine** and then start the `Northwind.Maui.Client`
    project with debugging. Note that the Visual Studio status bar shows us that **XAML
    Hot Reload** is connected.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将启动设置为**Windows Machine**，然后以调试模式启动`Northwind.Maui.Client`项目。请注意，Visual Studio的状态栏显示**XAML热重载**已连接。
- en: 'In the top-left corner of the app, click the flyout menu (the “hamburger” icon),
    and note the header and the images used for the icons in the flyout items, as
    shown in *Figure 16.7*:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用左上角，点击飞出菜单（“汉堡”图标），并注意飞出项中使用的标题和图标图片，如图16.7所示：
- en: '![](img/B19587_16_07.png)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19587_16_07.png)'
- en: 'Figure 16.7: A flyout with image icons'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.7：带有图像图标的飞出菜单
- en: In the flyout menu, click **Categories**, and note that the text on the button
    says **Hello!** and that it stretches across the width of the app window.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在飞出菜单中，点击**类别**，注意按钮上的文本为**Hello**！并且它横跨应用程序窗口的宽度。
- en: 'Leave the app running, and then in Visual Studio 2022, change the `Text` property
    to `Click Me`, add an attribute to set the `WidthRequest` property to `100`, and
    note that the **XAML Hot Reload** feature automatically reflects the changes in
    the app itself, as shown in *Figure 16.8*:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持应用程序运行，然后在Visual Studio 2022中，将 `Text` 属性更改为 `Click Me`，添加一个属性来设置 `WidthRequest`
    属性为 `100`，并注意**XAML热重载**功能会自动在应用程序本身中反映更改，如图 *图16.8* 所示：
- en: '![](img/B19587_16_08.png)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19587_16_08.png)'
- en: 'Figure 16.8: XAML Hot Reload automatically updating changes in the XAML in
    the live app'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.8：XAML热重载自动更新实时应用程序中的XAML更改
- en: Close the app.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭应用程序。
- en: 'Modify the `Button` element to give it the name of `ClickMeButton` and a new
    event handler for its `Clicked` event, as shown in *Figure 16.9*:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `Button` 元素修改为名为 `ClickMeButton`，并为它的 `Clicked` 事件添加一个新的事件处理器，如图 *图16.9* 所示：
- en: '![](img/B19587_16_09.png)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19587_16_09.png)'
- en: 'Figure 16.9: Adding an event handler to a control'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.9：向控件添加事件处理器
- en: Right-click the event handler name and select **Go To Definition** or press
    *F12*.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击事件处理器名称，选择**转到定义**或按 *F12*。
- en: 'Add a statement to the event handler method that sets the content of the button
    to the current time, as shown highlighted in the following code:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在事件处理器方法中添加一个语句，将按钮的内容设置为当前时间，如图中高亮显示的以下代码所示：
- en: '[PRE29]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Start the `Northwind.Maui.Client` project on at least one mobile device and
    one desktop device.
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在至少一个移动设备和至少一个桌面设备上启动 `Northwind.Maui.Client` 项目。
- en: '**Good Practice**: When deploying to an Android emulator or an iOS simulator,
    the old version of the app could still be running. Make sure to wait for the deployment
    of the new version of your app before interacting with it. You can keep an eye
    on the Visual Studio status bar to track the deployment progress or just wait
    until you see the message **XAML Hot Reload connected**.'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**良好实践**：当部署到Android模拟器或iOS模拟器时，旧版本的应用程序可能仍在运行。在与新版本的应用程序交互之前，请确保等待新版本的应用程序部署完成。您可以通过查看Visual
    Studio状态栏来跟踪部署进度，或者只需等待您看到消息**XAML热重载已连接**。'
- en: Navigate to **Categories**, click the button, and note that its text label changes
    to the current time.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**类别**，点击按钮，注意其文本标签变为当前时间。
- en: Close the app.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭应用程序。
- en: Implementing more content pages
  id: totrans-267
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现更多内容页面
- en: 'Now, let’s implement some of the new pages:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们实现一些新页面：
- en: 'In `EmployeesPage.xaml`, change the `Title` to `Employees` and add markup to
    define the UI for a simple calculator, as shown highlighted in the following markup:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `EmployeesPage.xaml` 中，将 `Title` 修改为 `Employees`，并添加标记来定义简单计算器的UI，如图中高亮显示的以下标记所示：
- en: '[PRE30]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Add an event handler for the page’s `Loaded` event, as shown highlighted in
    the following markup:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为页面的 `Loaded` 事件添加一个语句，如图中高亮显示的以下标记所示：
- en: '[PRE31]'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'In `EmployeesPage.xaml.cs`, add statements to resize each button in the grid
    and hook up an event handler for the `Clicked` event, as shown in the following
    code:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `EmployeesPage.xaml.cs` 中，添加语句来调整网格中每个按钮的大小，并为 `Clicked` 事件连接事件处理器，如图中以下代码所示：
- en: '[PRE32]'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Add a `Button_Clicked` method, with statements to handle the clicked button
    by concatenating the text of the button to the output label, as shown in the following
    code:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个 `Button_Clicked` 方法，包含处理点击按钮的语句，将按钮的文本连接到输出标签，如图中以下代码所示：
- en: '[PRE33]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This is not a proper implementation for a calculator because the operations
    have not been implemented. It just simulates one for now because we are focusing
    on how to build UIs with .NET MAUI. You can Google how to implement a simple calculator
    as an optional exercise.
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这不是一个合适的计算器实现，因为操作尚未实现。我们现在只是模拟一个，因为我们专注于如何使用.NET MAUI构建UI。您可以通过Google搜索如何实现一个简单的计算器作为可选练习。
- en: Start the `Northwind.Maui.Client` project with at least one desktop and one
    mobile device.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用至少一个桌面设备和至少一个移动设备启动 `Northwind.Maui.Client` 项目。
- en: 'Navigate to **Employees**, click some of the buttons, and note that the label
    updates to show what is clicked, as shown on an emulated Android device in *Figure
    16.10*:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**员工**，点击一些按钮，注意标签更新以显示所点击的内容，如图 *图16.10* 所示：
- en: '![](img/B19587_16_10.png)'
  id: totrans-280
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19587_16_10.png)'
- en: 'Figure 16.10: A simulated calculator on an emulated Android'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.10：模拟器上的模拟计算器
- en: Close the app.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭应用程序。
- en: By now, we have built a few simple UIs using XAML and MAUI. Next, let’s see
    some techniques to improve apps, like defining and sharing resources.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经使用XAML和MAUI构建了一些简单的UI。接下来，让我们看看一些改进应用的技术，比如定义和共享资源。
- en: Using shared resources
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用共享资源
- en: 'When building graphical UIs, you will often want to use a resource, such as
    a brush to paint the background of controls or an instance of a class to perform
    custom conversions. Resources can be defined at the following levels and shared
    with everything at that level or lower:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 当构建图形用户界面时，你通常会想要使用资源，例如画笔来绘制控件背景或类的实例以执行自定义转换。资源可以在以下级别定义，并与该级别或以下级别的所有内容共享：
- en: Application
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序
- en: Page
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页面
- en: Control
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控件
- en: Defining resources to share across an app
  id: totrans-289
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义跨应用共享的资源
- en: 'A good place to define shared resources is at the app level, so let’s see how
    to do that:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 定义共享资源的好地方是在应用级别，那么让我们看看如何做到这一点：
- en: In the `Resources` folder, in the `Styles` folder, add a new **.NET MAUI Resource
    Dictionary (XAML)** project item named `Northwind.xaml`.
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Resources` 文件夹中，在 `Styles` 文件夹中，添加一个名为 `Northwind.xaml` 的新 **.NET MAUI 资源字典
    (XAML**) 项目项。
- en: 'Visual Studio Code and JetBrains Rider do not have project item templates for
    MAUI. You can create this item using the CLI, as shown in the following command:'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Visual Studio Code 和 JetBrains Rider 没有MAUI的项目项模板。你可以使用CLI创建此项目项，如下所示：
- en: '[PRE34]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Add markup inside the existing `ResourceDictionary` element to define a linear
    gradient brush with a key of `Rainbow`, as shown highlighted in the following
    markup:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在现有的 `ResourceDictionary` 元素内部添加标记，以定义具有 `Rainbow` 键的线性渐变画笔，如下所示，高亮显示的标记：
- en: '[PRE35]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'In `App.xaml`, add an entry to the merged resource dictionaries to reference
    the resource file in the `Styles` folder named `Northwind.xaml`, as shown highlighted
    in the following markup:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `App.xaml` 中，向合并的资源字典中添加一个条目以引用 `Styles` 文件夹中名为 `Northwind.xaml` 的资源文件，如下所示，高亮显示的标记：
- en: '[PRE36]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Referencing shared resources
  id: totrans-298
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引用共享资源
- en: 'Now we can reference the shared resource:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以引用共享资源：
- en: 'In `CategoriesPage.xaml`, modify the `ContentPage` to set its background to
    the brush resource with the key of `Rainbow`, as shown highlighted in the following
    markup:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `CategoriesPage.xaml` 中，修改 `ContentPage` 以将其背景设置为具有 `Rainbow` 键的画笔资源，如下所示，高亮显示的标记：
- en: '[PRE37]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '`StaticResource` means the resource is read once when the app first starts.
    If the resource changes after that, any elements that reference it will not be
    updated.'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`StaticResource` 表示资源在应用首次启动时只读取一次。如果之后资源发生变化，引用它的任何元素都不会更新。'
- en: Start the `Northwind.Maui.Client` project with debugging.
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以调试模式启动 `Northwind.Maui.Client` 项目。
- en: Navigate to **Categories** and note that the background of the page is a rainbow.
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 **类别** 并注意页面的背景是一个彩虹。
- en: Close the app.
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭应用。
- en: Changing shared resources dynamically
  id: totrans-306
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动态更改共享资源
- en: 'Now we can implement a settings page to allow the user to change between light
    mode, dark mode, or system mode used in the UI at runtime:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以实现一个设置页面，允许用户在运行时在浅色模式、深色模式或UI中使用的系统模式之间切换：
- en: In the `Resources` folder, in the `Styles` folder, add a new **.NET MAUI Resource
    Dictionary (XAML)** project item named `LightDarkModeColors.xaml`.
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Resources` 文件夹中，在 `Styles` 文件夹中，添加一个名为 `LightDarkModeColors.xaml` 的新 **.NET
    MAUI 资源字典 (XAML**) 项目项。
- en: 'Add markup inside the existing `ResourceDictionary` element to define sets
    of suitable colors for light and dark mode, as shown in the following markup:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在现有的 `ResourceDictionary` 元素内部添加标记，以定义浅色模式和深色模式适用的颜色集，如下所示，高亮显示的标记：
- en: '[PRE38]'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: In the `Resources` folder, in the `Styles` folder, add a new **.NET MAUI Resource
    Dictionary (XAML)** project item named `DarkModeTheme.xaml`.
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Resources` 文件夹中，在 `Styles` 文件夹中，添加一个名为 `DarkModeTheme.xaml` 的新 **.NET MAUI
    资源字典 (XAML**) 项目项。
- en: 'Add markup inside the existing `ResourceDictionary` element to define styles
    to use in dark mode, as shown in the following markup:'
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在现有的 `ResourceDictionary` 元素内部添加标记，以定义用于深色模式的样式，如下所示，高亮显示的标记：
- en: '[PRE39]'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: In the `Resources` folder, in the `Styles` folder, add a new **.NET MAUI Resource
    Dictionary (XAML)** project item named `LightModeTheme.xaml`.
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Resources` 文件夹中，在 `Styles` 文件夹中，添加一个名为 `LightModeTheme.xaml` 的新 **.NET MAUI
    资源字典 (XAML**) 项目项。
- en: 'Add markup inside the existing `ResourceDictionary` element to define styles
    to use in light mode, as shown in the following markup:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在现有的 `ResourceDictionary` 元素内部添加标记，以定义用于浅色模式的样式，如下所示，高亮显示的标记：
- en: '[PRE40]'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: In the `Resources` folder, in the `Styles` folder, add a new **.NET MAUI Resource
    Dictionary (XAML)** project item named `SystemModeTheme.xaml`.
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Resources` 文件夹中，在 `Styles` 文件夹中，添加一个名为 `SystemModeTheme.xaml` 的新 **.NET MAUI
    资源字典 (XAML**) 项目项。
- en: 'Add markup inside the existing `ResourceDictionary` element to define styles
    to use with light and dark mode depending on how the operating system has had
    its option set, as shown in the following markup:'
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在现有的`ResourceDictionary`元素内添加标记，以定义根据操作系统选项设置来使用的样式，如下面的标记所示：
- en: '[PRE41]'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Note the use of the `AppThemeBinding` extension to dynamically bind to two pre-defined
    special filters, `Light` and `Dark`. These are bound to system modes.
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意使用`AppThemeBinding`扩展来动态绑定到两个预定义的特殊过滤器`Light`和`Dark`。这些绑定到系统模式。
- en: 'In `App.xaml`, add the light and dark mode colors and system theme resources,
    as shown highlighted in the following markup:'
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`App.xaml`中添加浅色和暗色模式颜色以及系统主题资源，如下面的标记所示：
- en: '[PRE42]'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '**Good Practice**: The `SystemModeTheme.xaml` resources file references colors
    defined in the `LightDarkModelColors.xaml` file, so the order is important.'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**良好实践**：`SystemModeTheme.xaml`资源文件引用了在`LightDarkModelColors.xaml`文件中定义的颜色，因此顺序很重要。'
- en: In the project, create a folder named `Controls`.
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目中创建一个名为`Controls`的文件夹。
- en: 'In the `Controls` folder, add a class file named `ThemeEnum.cs`, and define
    an `enum` type with three values: `System`, `Light`, and `Dark`, for selecting
    themes, as shown in the following code:'
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Controls`文件夹中，添加一个名为`ThemeEnum.cs`的类文件，并定义一个包含三个值`System`、`Light`和`Dark`的`enum`类型，用于选择主题，如下面的代码所示：
- en: '[PRE43]'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'In the `Controls` folder, add a class file named `EnumPicker.cs`, and define
    a class that inherits from the `Picker` control that can be bound to any `enum`
    type and show a dropdown list of its values, as shown in the following code:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Controls`文件夹中，添加一个名为`EnumPicker.cs`的类文件，并定义一个从`Picker`控件继承的类，该类可以绑定到任何`enum`类型并显示其值的下拉列表，如下面的代码所示：
- en: '[PRE44]'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'In `SettingsPage.xaml`, import a `local` namespace for using our custom `EnumPicker`
    control, an `ios` namespace for adding a special property that only applies to
    iOS apps, change the `Title` to `Settings`, and create an instance of `EnumPicker`
    for selecting a theme, as shown highlighted in the following markup:'
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`SettingsPage.xaml`中，导入一个`local`命名空间以使用我们的自定义`EnumPicker`控件，一个`ios`命名空间以添加仅适用于iOS应用程序的特殊属性，将`Title`更改为`设置`，并创建一个`EnumPicker`实例以选择主题，如下面的标记所示：
- en: '[PRE45]'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'In `SettingsPage.xaml.cs`, add statements to handle the events for the picker,
    as shown highlighted in the following code:'
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`SettingsPage.xaml.cs`中添加处理选择器事件的语句，如下面的代码所示：
- en: '[PRE46]'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Start the `Northwind.Maui.Client` project with at least one desktop and mobile
    device.
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用至少一个桌面和移动设备启动`Northwind.Maui.Client`项目。
- en: 'Note that the colors and shape of the button on the home page are in light
    mode, as shown on a **Window** machine in *Figure 16.11*:'
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意，主页上按钮的颜色和形状处于浅色模式，如图16.11中的**Window**机器所示：
- en: '![](img/B19587_16_11.png)'
  id: totrans-335
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19587_16_11.png)'
- en: 'Figure 16.11: Light mode button on Windows'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.11：Windows上的浅色模式按钮
- en: 'Leave the app running, start the Windows **Settings** app, navigate to **Personalization**
    | **Colors**, and in the **Choose your mode** section, select **Dark**, as shown
    in *Figure 16.12*:'
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持应用程序运行，启动Windows**设置**应用程序，导航到**个性化**|**颜色**，在**选择你的模式**部分选择**暗色**，如图16.12所示：
- en: '![](img/B19587_16_12.png)'
  id: totrans-338
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19587_16_12.png)'
- en: 'Figure 16.12: Switching the system color mode in Windows Settings'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.12：在Windows设置中切换系统颜色模式
- en: 'Leave **Settings** open, switch back to the app, and note that it has dynamically
    switched to dark mode colors, as shown in *Figure 16.13*:'
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持**设置**打开，切换回应用程序，并注意它已动态切换到暗色模式颜色，如图16.13所示：
- en: '![](img/B19587_16_13.png)'
  id: totrans-341
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19587_16_13.png)'
- en: 'Figure 16.13: Dark mode in our app'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.13：我们应用程序中的暗色模式
- en: Close the app.
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭应用程序。
- en: In **Settings**, switch back to **Light** mode.
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**设置**中，切换回**浅色**模式。
- en: '**Good Practice**: A resource can be an instance of any object. To share it
    within an application, define it in the `App.xaml` file and give it a unique key.
    To set an element’s property with a resource once when the app first starts, use
    `{StaticResource key}`. To set an element’s property with a resource whenever
    the resource value changes during the lifetime of the app, use `{DynamicResource
    key}`. To load a resource using code, use the `TryGetValue` method of the `Resources`
    property. If you treat the `Resources` property as a dictionary and use array-style
    syntax, like `Resources[key]`, it will only find resources defined directly in
    the dictionary, not in any merged dictionaries.'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：资源可以是任何对象的实例。为了在应用程序中共享它，请在`App.xaml`文件中定义它并给它一个唯一的键。为了在应用程序首次启动时一次性设置元素的属性，请使用`{StaticResource
    key}`。为了在应用程序的生命周期内资源值变化时设置元素的属性，请使用`{DynamicResource key}`。为了使用代码加载资源，请使用`Resources`属性的`TryGetValue`方法。如果你将`Resources`属性视为字典并使用数组样式语法，如`Resources[key]`，它将只找到在字典中直接定义的资源，而不是在任何合并的字典中。'
- en: Resources can be defined and stored inside any element of XAML, not just at
    the app level. For example, if a resource is only needed on `MainPage`, then it
    can be defined there. You can also dynamically load XAML files at runtime.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 资源可以在XAML的任何元素中定义和存储，而不仅仅是应用程序级别。例如，如果一个资源只在`MainPage`上需要，那么它可以在那里定义。您还可以在运行时动态加载XAML文件。
- en: '**More Information**: You can read more about .NET MAUI resource dictionaries
    at the following link: [https://learn.microsoft.com/en-us/dotnet/maui/fundamentals/resource-dictionaries](https://learn.microsoft.com/en-us/dotnet/maui/fundamentals/resource-dictionaries).
    In particular, note the section about resource lookup behavior.'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '**更多信息**：您可以在以下链接中了解更多关于.NET MAUI资源字典的信息：[https://learn.microsoft.com/en-us/dotnet/maui/fundamentals/resource-dictionaries](https://learn.microsoft.com/en-us/dotnet/maui/fundamentals/resource-dictionaries)。特别是注意关于资源查找行为的章节。'
- en: Using data binding
  id: totrans-348
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用数据绑定
- en: When building graphical UIs, you will often want to bind a property of one control
    to another, or to some data.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 当构建图形用户界面时，你通常会想要将一个控件的一个属性绑定到另一个控件，或者绑定到某些数据。
- en: Binding to elements
  id: totrans-350
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绑定到元素
- en: The simplest type of binding is between two elements. One element acts as a
    source for a value and the other elements acts as the target.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的绑定类型是两个元素之间的绑定。一个元素作为值的源，另一个元素作为目标。
- en: 'Let’s take the following steps:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们采取以下步骤：
- en: 'In `CategoriesPage.xaml`, under the existing button in the vertical stack layout,
    add a label for instructions, another label to show the current degree of rotation,
    a slider for selecting a rotation, and a rainbow square to rotate, as shown highlighted
    in the following markup:'
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`CategoriesPage.xaml`中，在现有的垂直堆叠布局中的按钮下方，添加一个用于说明的标签，另一个用于显示当前旋转角度的标签，一个用于选择旋转的滑动条，以及一个彩虹方块用于旋转，如下面的标记所示：
- en: '[PRE47]'
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Note that the text of the label and the angle of the rotation of the rectangle
    are both bound to the slider’s value using a binding context and the `{Binding}`
    markup extension.
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，标签的文本和矩形的旋转角度都是通过绑定上下文和`{Binding}`标记扩展绑定到滑动条的值。
- en: Start the `Northwind.Maui.Client` project.
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动`Northwind.Maui.Client`项目。
- en: Navigate to the **Categories** page.
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**类别**页面。
- en: 'Click and pull the slider to change the rotation of the rainbow square, as
    shown in *Figure 16.14*:'
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击并拖动滑动条以更改彩虹方块的旋转，如图*图16.14*所示：
- en: '![](img/B19587_16_14.png)'
  id: totrans-359
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19587_16_14.png)'
- en: 'Figure 16.14: A slider data bound to a label and the rotation of a rectangle
    on Windows'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.14：一个与标签绑定并旋转的矩形在Windows上的滑动数据
- en: Close the app.
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭应用程序。
- en: Practicing and exploring
  id: totrans-362
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习和探索
- en: Test your knowledge and understanding by answering some questions, getting some
    hands-on practice, and exploring this chapter’s topics with more in-depth research.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 通过回答一些问题，进行一些实际操作练习，并更深入地研究本章的主题来测试你的知识和理解。
- en: Exercise 16.1 – Test your knowledge
  id: totrans-364
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习16.1 – 测试你的知识
- en: 'Answer the following questions:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 回答以下问题：
- en: What are the four categories of .NET MAUI UI components, and what do they represent?
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: .NET MAUI UI组件的四个类别是什么，它们分别代表什么？
- en: What is the benefit of the `Shell` component and what kinds of UI does it implement?
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Shell`组件的好处是什么，它实现了哪些类型的UI？'
- en: How can you enable a user to perform an action on a cell in a list view?
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何让用户能够在列表视图中的一个单元格上执行操作？
- en: When would you use an `Entry` instead of an `Editor`?
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会在什么情况下使用`Entry`而不是`Editor`？
- en: What is the effect of setting `IsDestructive` to `true` for a menu item in a
    cell’s context actions?
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将菜单项的`IsDestructive`设置为`true`对单元格上下文操作中的菜单项有什么影响？
- en: You have defined a `Shell` with a content page, but no navigation is shown.
    Why might this be?
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你已经定义了一个包含内容页的 `Shell`，但没有显示导航。这可能是为什么？
- en: What is the difference between `Margin` and `Padding` for an element like a
    `Button`?
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于像 `Button` 这样的元素，`Margin` 和 `Padding` 之间的区别是什么？
- en: How are event handlers attached to an object using XAML?
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何使用 XAML 将事件处理器附加到对象？
- en: What do XAML styles do?
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: XAML 样式的作用是什么？
- en: Where can you define resources?
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你在哪里可以定义资源？
- en: Exercise 16.2 – Explore topics
  id: totrans-376
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 16.2 – 探索主题
- en: 'Use the links on the following page to learn more detail about the topics covered
    in this chapter:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 使用下一页上的链接了解更多关于本章涵盖主题的详细信息：
- en: '[https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-16---building-mobile-and-desktop-apps-using-net-maui](https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-16---building-mobile-and-desktop-apps-using-net-maui)'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-16---building-mobile-and-desktop-apps-using-net-maui](https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-16---building-mobile-and-desktop-apps-using-net-maui)'
- en: Exercise 16.3 – Implementing Model-View-ViewModel for .NET MAUI
  id: totrans-379
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 16.3 – 实现 .NET MAUI 的模型-视图-视图模型
- en: 'In this online-only section, you will learn how to implement the MVVM design
    pattern with a .NET MAUI app:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个仅在线的部分，你将学习如何使用 .NET MAUI 应用实现 MVVM 设计模式：
- en: '[https://github.com/markjprice/apps-services-net8/blob/main/docs/ch16-mvvm.md](https://github.com/markjprice/apps-services-net8/blob/main/docs/ch16-mvvm.md)'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/apps-services-net8/blob/main/docs/ch16-mvvm.md](https://github.com/markjprice/apps-services-net8/blob/main/docs/ch16-mvvm.md)'
- en: Exercise 16.4 – Integrating .NET MAUI apps with Blazor and native platforms
  id: totrans-382
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 16.4 – 集成 .NET MAUI 应用与 Blazor 和原生平台
- en: 'In this online-only section, you will learn how to integrate a .NET MAUI app
    with native mobile features:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个仅在线的部分，你将学习如何将 .NET MAUI 应用与原生移动功能集成：
- en: '[https://github.com/markjprice/apps-services-net8/blob/main/docs/ch16-maui-blazor.md](https://github.com/markjprice/apps-services-net8/blob/main/docs/ch16-maui-blazor.md)'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/apps-services-net8/blob/main/docs/ch16-maui-blazor.md](https://github.com/markjprice/apps-services-net8/blob/main/docs/ch16-maui-blazor.md)'
- en: Summary
  id: totrans-385
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, you learned:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了：
- en: How to build a cross-platform mobile and desktop app using .NET MAUI.
  id: totrans-387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 .NET MAUI 构建跨平台的移动和桌面应用程序。
- en: How to define shared resources and reference them.
  id: totrans-388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何定义共享资源并引用它们。
- en: How to use data binding with common controls.
  id: totrans-389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用常见控件进行数据绑定。
- en: In the *Epilogue*, you will learn how to continue your learning journey with
    apps and services for .NET.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *结语* 中，你将学习如何通过 .NET 的应用程序和服务继续你的学习之旅。
