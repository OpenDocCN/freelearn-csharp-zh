- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Handling Dates, Times, and Internationalization
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理日期、时间和国际化
- en: This chapter is about some of the common types that are included with .NET.
    These include types to manipulate dates and times and implement internationalization,
    which includes globalization and localization.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了.NET中包含的一些常见类型。这些包括用于操作日期和时间以及实现国际化的类型，包括全球化和本地化。
- en: When writing code to handle times, it is especially important to consider time
    zones. Bugs are often introduced because two times are compared in different time
    zones without taking that into account. It is important to understand the concept
    of **Coordinated Universal Time** (**UTC**) and to convert time values into UTC
    before performing time manipulation.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当编写处理时间的代码时，特别重要的是要考虑时区。错误通常是由于没有考虑到这一点，在不同时区比较两个时间而引入的。理解**协调世界时**（**UTC**）的概念并将时间值转换为UTC在进行时间操作之前非常重要。
- en: You should also be aware of any **Daylight Saving Time** (**DST**) adjustments
    that might be needed.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 您还应该注意可能需要的任何**夏令时**（**DST**）调整。
- en: 'This chapter covers the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了以下主题：
- en: Working with dates and times
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理日期和时间
- en: Working with time zones
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理时区
- en: Working with cultures
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理文化
- en: Working with Noda Time
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理Noda Time
- en: Working with dates and times
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理日期和时间
- en: 'After numbers and text, the next most popular types of data to work with are
    dates and times. The two main types are as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在数字和文本之后，接下来最常用的数据类型是日期和时间。主要有以下两种类型：
- en: '`DateTime`: Represents a combined date and time value for a fixed point in
    time.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DateTime`：表示固定时间点的日期和时间组合值。'
- en: '`TimeSpan`: Represents a duration of time.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TimeSpan`：表示时间的持续时间。'
- en: These two types are often used together. For example, if you subtract one `DateTime`
    value from another, the result is a `TimeSpan`. If you add a `TimeSpan` to a `DateTime`,
    then the result is a `DateTime` value.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种类型通常一起使用。例如，如果您从一个`DateTime`值减去另一个，结果是`TimeSpan`。如果您将`TimeSpan`添加到`DateTime`，则结果是`DateTime`值。
- en: Specifying date and time values
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指定日期和时间值
- en: 'A common way to create a date and time value is to specify individual values
    for the date and time components, like day and hour, as described in *Table 7.1*:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 创建日期和时间值的一种常见方式是指定日期和时间组件的单独值，如天和小时，如*表7.1*中所述：
- en: '| **Date/time parameter** | **Value range** |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| **日期/时间参数** | **值范围** |'
- en: '| `year` | 1 to 9,999 |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `year` | 1 到 9,999 |'
- en: '| `month` | 1 to 12 |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| `month` | 1 到 12 |'
- en: '| `day` | 1 to the number of days in that month |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| `day` | 该月的天数到1 |'
- en: '| `hour` | 0 to 23 |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `hour` | 0 到 23 |'
- en: '| `minute` | 0 to 59 |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `minute` | 0 到 59 |'
- en: '| `second` | 0 to 59 |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `second` | 0 到 59 |'
- en: '| `millisecond` | 0 to 999 |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `millisecond` | 0 到 999 |'
- en: '| `microsecond` | 0 to 999 |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `microsecond` | 0 到 999 |'
- en: 'Table 7.1: Parameters for formatting date and time values'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 表7.1：格式化日期和时间值的参数
- en: 'For example, to instantiate a `DateTime` that represents when .NET 9 might
    be released for **General Availability**, as shown in the following code:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，为了实例化一个表示.NET 9可能发布为**通用可用性**时的`DateTime`，如下面的代码所示：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Good Practice**: The preceding code example might make you think, “What time
    zone does the value represent?” This is the big problem with `DateTime` and why
    it is good practice to avoid it in favor of `DateTimeOffset`, which stores the
    time zone too. We will look at this issue in more detail later in this chapter.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：前面的代码示例可能会让您想，“这个值代表的是哪个时区？”这是`DateTime`的大问题，也是为什么避免使用它而选择包含时区的`DateTimeOffset`是一个好习惯。我们将在本章后面更详细地探讨这个问题。'
- en: An alternative is to provide the value as a `string` to be parsed, but this
    can be misinterpreted depending on the default culture of the thread. For example,
    in the UK, dates are specified as day/month/year, whereas in the US, dates are
    specified as month/day/year.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是提供要解析的`string`值，但这可能取决于线程的默认文化而误解。例如，在英国，日期指定为day/month/year，而在美国，日期指定为month/day/year。
- en: 'Let’s see what you might want to do with dates and times:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看您可能想要如何处理日期和时间：
- en: 'Use your preferred code editor to create a new project, as defined in the following
    list:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您首选的代码编辑器创建一个新项目，如下列所示：
- en: 'Project template: **Console App** / `console`'
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目模板：**控制台应用程序** / `console`
- en: 'Project file and folder: `WorkingWithTime`'
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目文件和文件夹：`WorkingWithTime`
- en: 'Solution file and folder: `Chapter07`'
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决方案文件和文件夹：`Chapter07`
- en: '**Do not use top-level statements**: Cleared.'
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不要使用顶级语句**：已清除。'
- en: '**Enable native AOT publish**: Cleared.'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启用原生AOT发布**：已清除。'
- en: In the project file, treat warnings as errors, and add an element to statically
    and globally import the `System.Console` class.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目文件中，将警告视为错误，并添加一个元素以静态和全局导入 `System.Console` 类。
- en: 'Add a new class file named `Program.Helpers.cs` and replace its contents, as
    shown in the following code:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为 `Program.Helpers.cs` 的新类文件，并替换其内容，如下面的代码所示：
- en: '[PRE1]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In `Program.cs`, delete the existing statements, and then add statements to
    initialize some special date/time values, as shown in the following code:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，删除现有的语句，然后添加语句以初始化一些特殊的日期/时间值，如下面的代码所示：
- en: '[PRE2]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Run the code, and note the results, as shown in the following output:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，并注意结果，如下面的输出所示：
- en: '[PRE3]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The date and time formats output are determined by the culture settings of your
    console app. We called the `ConfigureConsole` method to make sure we all see the
    same default output in US English.
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出的日期和时间格式由控制台应用程序的文化设置决定。我们调用了 `ConfigureConsole` 方法以确保我们都能看到相同的默认输出（美国英语）。
- en: 'In `Program.cs`, at the top of the statement that calls `ConfigureConsole`,
    set the parameter to not override your local computer’s culture, as shown in the
    following code:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，在调用 `ConfigureConsole` 的语句顶部设置参数，以便不覆盖您的本地计算机文化，如下面的代码所示：
- en: '[PRE4]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Run the code, and note the output is localized to your computer’s culture.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，并注意输出已本地化为您的计算机文化。
- en: 'In `Program.cs`, set the parameter to specify alternative languages, like French
    in Canada (`fr-CA`) or English in Great Britain (`en-GB`), as shown in the following
    code:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，设置参数以指定替代语言，如加拿大法语 (`fr-CA`) 或英国英语 (`en-GB`)，如下面的代码所示：
- en: '[PRE5]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**More Information**: There is a table of common culture codes at the following
    link: [https://en.wikipedia.org/wiki/Language_localisation#Language_tags_and_codes](https://en.wikipedia.org/wiki/Language_localisation#Language_tags_and_codes)'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**更多信息**：以下链接提供了一个常见文化代码表：[https://en.wikipedia.org/wiki/Language_localisation#Language_tags_and_codes](https://en.wikipedia.org/wiki/Language_localisation#Language_tags_and_codes)'
- en: Run the code, and note that the output is localized to the specified culture.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，并注意输出已本地化为指定的文化。
- en: 'Reset the console configuration back to the default so that it uses US English
    culture, as shown in the following code:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将控制台配置重置为默认设置，以便使用美国英语文化，如下面的代码所示：
- en: '[PRE6]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Formatting date and time values
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 格式化日期和时间值
- en: You have just seen that dates and times have default formats based on the current
    culture.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 您刚刚看到日期和时间有基于当前文化的默认格式。
- en: 'You can take complete control of date and time formatting using custom format
    code, as shown in *Table 7.2*:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用自定义格式代码完全控制日期和时间格式，如下表 7.2 所示：
- en: '| **Format code** | **Description** |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| **格式代码** | **描述** |'
- en: '| `/` | Date part separator. Varies by culture; for example, `en-US` uses `/`,
    but `fr-FR` uses `-` (dash). |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `/` | 日期部分分隔符。根据文化不同而变化；例如，`en-US` 使用 `/`, 但 `fr-FR` 使用 `-` (破折号)。|'
- en: '| `\` | Escape character. Useful if you want to use a special format code as
    a literal character; for example, `h \h m \m` would format a time of 9:30 am as
    `9 h 30 m`. |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| `\` | 转义字符。如果您想将特殊格式代码作为字面字符使用，则很有用；例如，`h \h m \m` 将格式化为上午 9:30 的时间为 `9 h
    30 m`。|'
- en: '| `:` | Time part separator. Varies by culture; for example, `en-US` uses `:`,
    but `fr-FR` uses `.` (dot). |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| `:` | 时间部分分隔符。根据文化不同而变化；例如，`en-US` 使用 `:`, 但 `fr-FR` 使用 `.` (点)。|'
- en: '| `d`, `dd` | The day of the month, from `1` to `31`, or with a leading zero
    from `01` through `31`. |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| `d`, `dd` | 月份中的日期，从 `1` 到 `31`，或带前导零从 `01` 到 `31`。|'
- en: '| `ddd, dddd` | The abbreviated or full name of the day of the week, for example,
    `Mon` or `Monday`, localized for the current culture. |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `ddd, dddd` | 周几的缩写或全称，例如，`Mon` 或 `Monday`，根据当前文化本地化。|'
- en: '| `f`, `ff`, `fff` | The tenths of a second, hundredths of a second, or milliseconds.
    |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `f`, `ff`, `fff` | 十分之一秒、百分之一秒或毫秒。|'
- en: '| `g` | The period or era, for example, `A.D.` |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `g` | 时期或纪元，例如，`A.D.` |'
- en: '| `h`, `hh` | The hour, using a 12-hour clock from `1` to `12`, or from `01`
    to `12`. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `h`, `hh` | 小时，使用 12 小时制从 `1` 到 `12`，或从 `01` 到 `12`。|'
- en: '| `H`, `HH` | The hour, using a 24-hour clock from `0` to `23`, or from `01`
    to `23`. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `H`, `HH` | 小时，使用 24 小时制从 `0` 到 `23`，或从 `01` 到 `23`。|'
- en: '| `K` | Time zone information. `null` for an unspecified time zone, `Z` for
    UTC, and a value like `-8:00` for local time adjusted from UTC. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `K` | 时区信息。对于未指定的时区为 `null`，对于 UTC 为 `Z`，对于从 UTC 调整的本地时间为类似 `-8:00` 的值。|'
- en: '| `m`, `mm` | The minute, from `0` through `59`, or with a leading zero from
    `00` through `59`. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `m`, `mm` | 分钟，从 `0` 到 `59`，或带前导零从 `00` 到 `59`。|'
- en: '| `M`, `MM` | The month, from `1` through `12`, or with a leading zero from
    `01` through `12`. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `M`, `MM` | 月份，从 `1` 到 `12`，或带前导零从 `01` 到 `12`。|'
- en: '| `MMM`, `MMMM` | The abbreviated or full name of the month, for example, `Jan`
    or `January`, localized for the current culture. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `MMM`, `MMMM` | 月份的缩写或全称，例如，`Jan` 或 `January`，针对当前文化本地化。|'
- en: '| `s`, `ss` | The second, from `0` through `59`, or with a leading zero from
    `00` through `59`. |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| `s`, `ss` | 秒，从 `0` 到 `59`，或带前导零从 `00` 到 `59`。|'
- en: '| `t`, `tt` | The first or both characters of the AM/PM designator. |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `t`, `tt` | AM/PM 标识符的第一个或前两个字符。|'
- en: '| `y`, `yy` | The year of the current century, from `0` through `99`, or with
    a leading zero from `00` through `99`. |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `y`, `yy` | 当前世纪的年份，从 `0` 到 `99`，或带前导零从 `00` 到 `99`。|'
- en: '| `yyy` | The year with a minimum of three digits, and as many as needed. For
    example, 1 A.D. is `001`. The first sacking of Rome was in `410`. The year this
    book was published is `2023`. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `yyy` | 至少三位数的年份，最多所需位数。例如，公元 1 年是 `001`。罗马城第一次被攻陷是在 `410` 年。这本书出版的那一年是 `2023`
    年。|'
- en: '| `yyyy`, `yyyyy` | The year as a four- or five-digit number. |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `yyyy`, `yyyyy` | 四位或五位数的年份。|'
- en: '| `z`, `zz` | Hours offset from UTC, with no leading zeros, or with leading
    zeros. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `z`, `zz` | 从 UTC 偏移的小时，不带前导零，或带前导零。|'
- en: '| `zzz` | Hours and minutes offset from UTC, with a leading zero, for example,
    `+04:30`. |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `zzz` | 从 UTC 偏移的小时和分钟，带前导零，例如，`+04:30`。|'
- en: 'Table 7.2: Custom format code for date and time values'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 表 7.2：日期和时间值的自定义格式代码
- en: '**More Information**: A full list of custom format code can be found at the
    following link: [https://learn.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings](https://learn.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**更多信息**：有关自定义格式代码的完整列表，请参阅以下链接：[https://learn.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings](https://learn.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings)'
- en: 'You can apply standard date and time formatting using simpler format code,
    like the `d` and `D` we used in the code example, as shown in *Table 7.3*:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用简单的格式代码应用标准日期和时间格式，就像我们在代码示例中使用的 `d` 和 `D` 一样，如 *表 7.3* 所示：
- en: '| **Format code** | **Description** |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| **格式代码** | **描述** |'
- en: '| `d` | Short date pattern. Varies by culture; for example, `en-US` uses `M/d/yyyy`
    and `fr-FR` uses `dd/MM/yyyy`. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `d` | 短日期模式。因文化而异；例如，`en-US` 使用 `M/d/yyyy`，而 `fr-FR` 使用 `dd/MM/yyyy`。|'
- en: '| `D` | Long date pattern. Varies by culture; for example, `en-US` uses `mmmm,
    MMMM d, yyyy` and `fr-FR` uses `mmmm, dd MMMM yyyy`. |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| `D` | 长日期模式。因文化而异；例如，`en-US` 使用 `mmmm, MMMM d, yyyy`，而 `fr-FR` 使用 `mmmm,
    dd MMMM yyyy`。|'
- en: '| `f` | Full date/time pattern (short time – hours and minutes). Varies by
    culture. |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| `f` | 完整日期/时间模式（短时间 - 小时和分钟）。因文化而异。|'
- en: '| `F` | Full date/time pattern (long time – hours, minutes, seconds, and AM/PM).
    Varies by culture. |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| `F` | 完整日期/时间模式（长时间 – 小时、分钟、秒和 AM/PM）。因文化而异。|'
- en: '| `o, O` | A standardized pattern, suitable to serialize date/time values for
    roundtrips, for example, `2023-05-30T13:45:30.0000000-08:00`. |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `o, O` | 标准化模式，适用于序列化日期/时间值进行往返，例如，`2023-05-30T13:45:30.0000000-08:00`。|'
- en: '| `r`, `R` | RFC1123 pattern. |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| `r`, `R` | RFC1123 模式。|'
- en: '| `t` | Short time pattern. Varies by culture; for example, `en-US` uses `h:mm
    tt` and `fr-FR` uses `HH:mm`. |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| `t` | 短时间模式。因文化而异；例如，`en-US` 使用 `h:mm tt`，而 `fr-FR` 使用 `HH:mm`。|'
- en: '| `T` | Long time pattern. Varies by culture; for example, `en-US` uses `h:mm:ss
    tt` and `fr-FR` uses `HH:mm:ss`. |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| `T` | 长时间模式。因文化而异；例如，`en-US` 使用 `h:mm:ss tt`，而 `fr-FR` 使用 `HH:mm:ss`。|'
- en: '| `u` | Universal sortable date/time pattern, for example, `2009-06-15 13:45:30Z`.
    |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| `u` | 通用可排序日期/时间模式，例如，`2009-06-15 13:45:30Z`。|'
- en: '| `U` | Universal full date/time pattern. Varies by culture; for example, `en-US`
    might be `Monday, June 15, 2009 8:45:30 PM`. |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `U` | 通用完整日期/时间模式。因文化而异；例如，`en-US` 可能是 `Monday, June 15, 2009 8:45:30 PM`。|'
- en: 'Table 7.3: Standard format code for date and time values'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 表 7.3：日期和时间值的标准格式代码
- en: '**More Information**: A full list of format code can be found at the following
    link: [https://learn.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings](https://learn.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings).'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**更多信息**：有关格式代码的完整列表，请参阅以下链接：[https://learn.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings](https://learn.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings).'
- en: 'Let’s run some examples:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行一些示例：
- en: 'In `Program.cs`, add statements to define Christmas Day in 2024 and display
    it in various ways, as shown in the following code:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中添加语句来定义2024年的圣诞节并以各种方式显示，如下所示代码：
- en: '[PRE7]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Run the code, and note the results, as shown in the following output:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，并注意结果，如下所示输出：
- en: '[PRE8]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Disable overriding your computer culture or pass a specific culture code, like
    French in France, as shown in the following code:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 禁用覆盖您的计算机文化或传递特定的文化代码，例如法国的法国文化，如下所示代码：
- en: '[PRE9]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Run the code, and note that the results should be localized to that culture.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，并注意结果应该本地化为该文化。
- en: Reset the console configuration back to the default of US English.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将控制台配置重置为默认的US English。
- en: Date and time calculations
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日期和时间计算
- en: 'Now, let’s try performing simple calculations on date and time values:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试对日期和时间值进行简单计算：
- en: 'In `Program.cs`, add statements to perform addition and subtraction with Christmas
    2024, as shown in the following code:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中添加语句来对2024年的圣诞节进行加法和减法运算，如下所示代码：
- en: '[PRE10]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Run the code, and note the results, as shown in the following output:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，并注意结果，如下所示输出：
- en: '[PRE11]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Add statements to define the time on Christmas Day that your children (or dog
    or cat or iguana?) might wake up to open presents, and display it in various ways,
    as shown in the following code:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加语句来定义孩子们（或狗、猫、鬣蜥？）可能会醒来打开礼物的圣诞节时间，并以各种方式显示，如下所示代码：
- en: '[PRE12]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Run the code, and note the results, as shown in the following output:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，并注意结果，如下所示输出：
- en: '[PRE13]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Microseconds and nanoseconds
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 微秒和纳秒
- en: In earlier versions of .NET, the smallest unit of time measurement was a tick.
    A tick is 100 nanoseconds, so developers used to have to do the calculation for
    nanoseconds themselves. .NET 7 introduced millisecond and microsecond parameters
    to constructors, and microsecond and nanosecond properties to the `DateTime`,
    `DateTimeOffset`, `TimeSpan`, and `TimeOnly` types.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在.NET的早期版本中，时间测量的最小单位是刻度。一个刻度是100纳秒，因此开发者以前必须自己进行纳秒的计算。.NET 7为构造函数引入了毫秒和微秒参数，并将微秒和纳秒属性添加到`DateTime`、`DateTimeOffset`、`TimeSpan`和`TimeOnly`类型中。
- en: 'Let’s see some examples:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一些示例：
- en: 'In `Program.cs`, add statements to construct a date and time value with more
    precision than was possible and to display its value, as shown in the following
    code:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中添加语句来构造一个比以前更精确的日期和时间值，并显示其值，如下所示代码：
- en: '[PRE14]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Run the code, and note the results, as shown in the following output:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，并注意结果，如下所示输出：
- en: '[PRE15]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Globalization with dates and times
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日期和时间的全球化
- en: 'The current culture controls how dates and times are formatted and parsed:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 当前文化控制日期和时间的格式化和解析方式：
- en: 'At the top of `Program.cs`, import the namespace to work with globalization,
    as shown in the following code:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`顶部，导入用于全球化操作的命名空间，如下所示代码：
- en: '[PRE16]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Add statements to show the current culture that is used to display date and
    time values, and then parse the United States’ Independence Day and display it
    in various ways, as shown in the following code:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加语句来显示用于显示日期和时间值的当前文化，然后解析美国的独立日并以各种方式显示，如下所示代码：
- en: '[PRE17]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '**Good Practice**: Although you can create a `CultureInfo` instance using its
    constructor, unless you need to make changes to it, you should get a read-only
    shared instance by calling the `GetCultureInfo` method.'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**良好实践**：虽然您可以使用构造函数创建`CultureInfo`实例，除非您需要对其进行更改，否则您应该通过调用`GetCultureInfo`方法来获取只读共享实例。'
- en: 'At the top of `Program.cs`, set the culture to British English, as shown in
    the following code:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`顶部，将文化设置为英国英语，如下所示代码：
- en: '[PRE18]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Run the code, and note the results, as shown in the following output:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，并注意结果，如下所示输出：
- en: '[PRE19]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: When the current culture is *English (Great Britain)*, if a date is given as
    4 July 2024, then it is correctly parsed regardless of whether the current culture
    is British or American. But if the date is given as `7/4/2024`, then it is parsed
    as 7 April. You can override the current culture by specifying the correct culture
    as a provider when parsing, as shown in the third example above.
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当当前文化设置为*英语（英国）*时，如果给定日期为2024年7月4日，则无论当前文化是英国还是美国，都能正确解析。但如果日期给定为`7/4/2024`，则解析为4月7日。在解析时，可以通过指定正确的文化作为提供者来覆盖当前文化，如上面第三个示例所示。
- en: 'Add statements to loop from the year 2023 to 2028, displaying if the year is
    a leap year and how many days there are in February, and then showing if Christmas
    and Independence Day are during DST, as shown in the following code:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加语句从2023年循环到2028年，显示该年是否是闰年以及二月有多少天，然后显示圣诞节和独立日是否在夏令时期间，如下所示代码：
- en: '[PRE20]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Run the code, and note the results, as shown in the following output:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，并注意结果，如下所示输出：
- en: '[PRE21]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Complexities of Daylight Saving Time (DST)
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 夏令时（DST）的复杂性
- en: DST is not used in all countries; it is also determined by hemisphere, and politics
    plays a role. For example, the United States is currently debating whether it
    should make DST permanent. They might decide to leave the decision up to individual
    states. It could all get extra confusing for Americans over the next few years.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 夏令时不是所有国家都使用；它也由半球决定，政治也起着作用。例如，美国目前正在辩论是否应该使夏令时永久化。他们可能会决定将决定权留给各州。在接下来的几年里，这可能会让美国人感到更加困惑。
- en: Each country has its own rules for what day and what hour DST happens. These
    rules are encoded by .NET so that it can adjust automatically when needed.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 每个国家都有自己的规则来决定夏令时（DST）在什么日子和什么时间开始。这些规则被.NET编码，以便在需要时自动调整。
- en: 'In the US in springtime, the clocks “spring” forward one hour at 2 AM. In the
    fall, they “fall” back one hour at 2 AM. Wikipedia explains this at the following
    link: [https://en.wikipedia.org/wiki/Daylight_saving_time_in_the_United_States](https://en.wikipedia.org/wiki/Daylight_saving_time_in_the_United_States)'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在美国的春季，时钟在凌晨2点“跳”前一小时。在秋季，它们在凌晨2点“退”后一小时。维基百科在以下链接中解释了这一点：[https://en.wikipedia.org/wiki/Daylight_saving_time_in_the_United_States](https://en.wikipedia.org/wiki/Daylight_saving_time_in_the_United_States)
- en: 'In the UK in springtime, the clocks spring forward one hour at 1 AM. In the
    autumn, they fall back one hour at 2 AM. The UK government explains this at the
    following link: [https://www.gov.uk/when-do-the-clocks-change](https://www.gov.uk/when-do-the-clocks-change)'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在英国的春季，时钟在凌晨1点“跳”前一小时。在秋季，它们在凌晨2点“退”后一小时。英国政府在以下链接中解释了这一点：[https://www.gov.uk/when-do-the-clocks-change](https://www.gov.uk/when-do-the-clocks-change)
- en: Imagine that you need to set an alarm to wake you up at 1:30 AM to catch a flight
    from Heathrow airport in the UK. Your flight happens to depart on the day that
    DST takes effect.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你需要设置一个闹钟在凌晨1:30 AM醒来，以便从英国的希思罗机场赶飞机。不幸的是，你的航班恰好是在夏令时生效的那天出发。
- en: In the UK spring, the clocks are at 12:59 AM, and then the next minute they
    spring forward to 2:00AM. 1:30 AM never happens, your alarm does not go off, and
    you miss your flight! 1:30 AM is an invalid time in .NET, and if you try to store
    that value in a variable, it will throw an exception.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在英国的春季，时钟显示为凌晨12:59，然后下一分钟它们会跳到凌晨2:00。1:30 AM永远不会发生，你的闹钟不会响，你可能会错过航班！在.NET中，1:30
    AM是一个无效的时间，如果你尝试将这个值存储在变量中，它将抛出一个异常。
- en: In the UK autumn, the clocks are at 1:59, and then the next minute, they fall
    back to 1:00 and repeat that hour. In this case, 1:30 AM happens twice.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在英国的秋季，时钟显示为1:59，然后下一分钟，它们会退回到1:00并重复那个小时。在这种情况下，1:30 AM会发生两次。
- en: Localizing the DayOfWeek enum
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本地化DayOfWeek枚举
- en: '`DayOfWeek` is an `enum`, so it cannot be localized as you might expect or
    hope. Its `string` values are hardcoded in English, as shown in the following
    code:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`DayOfWeek`是一个`enum`，所以它不能像你预期或希望的那样本地化。它的`string`值是硬编码在英语中的，如下所示代码：'
- en: '[PRE22]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: There are two solutions to this problem. First, you could apply the `dddd` date
    format code to a whole date value. For example,
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题的有两个方案。首先，你可以将`dddd`日期格式代码应用到整个日期值上。例如，
- en: '[PRE23]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Second, you can use a helper method of the `DateTimeFormatInfo` class to convert
    a `DayOfWeek` value into a localized `string` for output as text.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，你可以使用`DateTimeFormatInfo`类的辅助方法将`DayOfWeek`值转换为本地化的`string`，以便作为文本输出。
- en: 'Let’s see an example of the problem and solution:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个问题和解决方案的例子：
- en: 'In `Program.cs`, add statements to explicitly set the current culture to Danish,
    and then output the current day of the week in that culture, as shown in the following
    code:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中添加语句，显式地将当前文化设置为丹麦语，然后输出该文化中的当前星期几，如下所示代码：
- en: '[PRE24]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Run the code, and note the results, as shown in the following output:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，并注意结果，如下所示输出：
- en: '[PRE25]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Working with only a date or a time
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 仅处理日期或时间
- en: .NET 6 introduced some new types to work with only a date value or only a time
    value, named `DateOnly` and `TimeOnly`.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: .NET 6引入了一些新类型，用于仅处理日期值或仅处理时间值，分别命名为`DateOnly`和`TimeOnly`。
- en: These are better than using a `DateTime` value with a zero time to store a date-only
    value because it is type-safe and avoids misuse. `DateOnly` also maps better to
    database column types, for example, a `date` column in SQL Server. `TimeOnly`
    is good for setting alarms and scheduling regular meetings or the opening hours
    for an organization, and it maps to a `time` column in SQL Server.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这些比使用具有零时间的 `DateTime` 值来存储仅日期的值要好，因为它类型安全且避免了误用。`DateOnly` 也更好地映射到数据库列类型，例如
    SQL Server 中的 `date` 列。`TimeOnly` 适用于设置闹钟和安排定期会议或组织的营业时间，它映射到 SQL Server 中的 `time`
    列。
- en: 'Let’s use them to plan a release party for .NET 9, probably on Tuesday, November
    12, 2024, one week after the US presidential election:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用它们来计划 .NET 9 的发布派对，可能是在 2024 年 11 月 12 日星期二，美国总统选举后一周：
- en: 'In `Program.cs`, add statements to define the .NET 9 release party and a time
    for it to start, and then combine the two values to make a calendar entry so that
    we don’t miss it, as shown in the following code:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，添加语句以定义 .NET 9 发布派对及其开始时间，然后将这两个值组合成一个日历条目，以免错过，如下面的代码所示：
- en: '[PRE26]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Run the code and note the results, as shown in the following output:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码并注意结果，如下面的输出所示：
- en: '[PRE27]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Getting date/time formatting information
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取日期/时间格式化信息
- en: Each culture has its own date/time formatting rules. These are defined in the
    `DateTimeFormat` property of a `CultureInfo` instance.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 每个文化都有自己的日期/时间格式化规则。这些规则定义在 `CultureInfo` 实例的 `DateTimeFormat` 属性中。
- en: 'Let’s output some commonly used information:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们输出一些常用信息：
- en: 'In `Program.cs`, add statements to get the date/time formatting information
    for the current culture and output some of its most useful properties, as shown
    in the following code:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，添加语句以获取当前文化的日期/时间格式化信息并输出其中一些最有用的属性，如下面的代码所示：
- en: '[PRE28]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Run the code, and note the results, as shown in the following output:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，并注意结果，如下面的输出所示：
- en: '[PRE29]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Change the culture to something else, run the code, and note the results.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文化更改为其他，运行代码并注意结果。
- en: Unit testing with a time provider
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用时间提供程序进行单元测试
- en: Writing unit tests for components that need the current time is tricky because
    the time is constantly changing!
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 为需要当前时间的组件编写单元测试很棘手，因为时间是不断变化的！
- en: Imagine you want visitors to your e-commerce website to get a 20% discount if
    they make an order at the weekend. During workdays, they pay full price. How can
    we test this functionality?
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你希望电子商务网站的访客在周末下单时获得 20% 的折扣。在工作日，他们需要支付全价。我们如何测试这个功能？
- en: To control the time used in unit tests, .NET 8 introduces the `TimeProvider`
    class.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 为了控制单元测试中使用的时间，.NET 8 引入了 `TimeProvider` 类。
- en: 'Let’s start defining a function to perform this calculation:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们定义一个执行此计算的功能：
- en: In the `Chapter07` solution, add a new **Class Library**/`classlib` project
    named `TimeFunctionsLib`.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Chapter07` 解决方案中，添加一个名为 `TimeFunctionsLib` 的新 **类库**/`classlib` 项目。
- en: In the `TimeFunctionsLib` project, rename `Class1.cs` to `DiscountService.cs`.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `TimeFunctionsLib` 项目中，将 `Class1.cs` 重命名为 `DiscountService.cs`。
- en: 'In `DiscountService.cs`, define a function to perform the calculation, as shown
    in the following code:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `DiscountService.cs` 中，定义一个执行计算的功能，如下面的代码所示：
- en: '[PRE30]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In the `Chapter07` solution, add a new **xUnit Test Project**/`xunit` project
    named `TestingWithTimeProvider`.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Chapter07` 解决方案中，添加一个名为 `TestingWithTimeProvider` 的新 **xUnit 测试项目**/`xunit`
    项目。
- en: 'In the `TestingWithTimeProvider` project, add a reference to the `TimeFunctionsLib`
    project, as shown in the following markup:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `TestingWithTimeProvider` 项目中，添加对 `TimeFunctionsLib` 项目的引用，如下面的标记所示：
- en: '[PRE31]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Build the `TestingWithTimeProvider` project.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建名为 `TestingWithTimeProvider` 的项目。
- en: In the `TestingWithTimeProvider` project, rename `Test1.cs` to `TimeTests.cs`.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `TestingWithTimeProvider` 项目中，将 `Test1.cs` 重命名为 `TimeTests.cs`。
- en: 'In `TimeTests.cs`, modify the statements to import the namespace for the discount
    service, and then define two tests, one for workdays and one for weekends, as
    shown in the following code:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `TimeTests.cs` 文件中，修改语句以导入折扣服务的命名空间，然后定义两个测试，一个用于工作日，一个用于周末，如下面的代码所示：
- en: '[PRE32]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Run the two tests, and note that only one can ever succeed at any one time.
    If you run the tests during workdays, the weekend test will fail. If you run the
    tests during the weekend, the workday test will fail!
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行两个测试，并注意在任何时候只能成功运行一个测试。如果你在工作日运行测试，周末测试将失败。如果你在周末运行测试，工作日测试将失败！
- en: Now that you’ve seen the problem, how can we solve it?
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经看到了问题，我们该如何解决它？
- en: 'The way Microsoft solves it is by each team that creates .NET libraries defining
    its own internal `ISystemClock` interface with, at a minimum, a property named
    `UtcNow`, and sometimes other members, along with implementations that typically
    use the built-in system clock but are all slightly different. A typical example
    is shown in the following code:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 微软解决这个问题的方法是，每个创建.NET库的团队定义自己的内部`ISystemClock`接口，至少包含一个名为`UtcNow`的属性，有时还有其他成员，以及通常使用内置系统时钟但略有不同的实现。以下是一个典型的示例代码：
- en: '[PRE33]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Finally, with .NET 8, the core .NET team has introduced a proper equivalent
    of the preceding code with an implementation that uses the system clock. Unfortunately,
    they do not define an interface. Instead, they define an abstract class named
    `TimeProvider`.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，随着.NET 8的推出，.NET核心团队引入了前面代码的适当等效实现，该实现使用系统时钟。不幸的是，他们没有定义一个接口。相反，他们定义了一个名为`TimeProvider`的抽象类。
- en: 'Let’s use it:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用它：
- en: 'In the `TimeFunctionsLib` project, in `DiscountService.cs`, comment out the
    use of the `UtcNow` property, and add a statement to add a constructor-injected
    service, as highlighted in the following code:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`TimeFunctionsLib`项目中，在`DiscountService.cs`文件中，注释掉使用`UtcNow`属性的部分，并添加一个语句来添加一个构造函数注入的服务，如下面的代码所示：
- en: '[PRE34]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'In the `TestingWithTimeProvider` project, in `TimeTests.cs`, add statements
    to both tests to show how we could use the new `TimeProvider` and its `System`
    property (which would still have a dependency on the system clock!), as shown
    in the following code:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`TestingWithTimeProvider`项目中，在`TimeTests.cs`文件中，为两个测试添加语句以展示如何使用新的`TimeProvider`及其`System`属性（这仍然依赖于系统时钟！），如下面的代码所示：
- en: '[PRE35]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'In the `TestingWithTimeProvider` project, add a reference to `Moq`, a package
    to mock dependencies, as shown in the following markup:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`TestingWithTimeProvider`项目中，添加对`Moq`的引用，这是一个用于模拟依赖项的包，如下面的标记所示：
- en: '[PRE36]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Moq 4.18.4 was the last version released before a controversy erupted when
    the developer added obfuscated code that executed during builds. You can read
    more about this at the following link: [https://github.com/devlooped/moq/issues/1370](https://github.com/devlooped/moq/issues/1370).
    I plan to keep an eye on the situation over the next few months and then decide
    whether I should switch to an alternative.'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Moq 4.18.4是在开发者添加在构建期间执行的混淆代码后引发争议之前的最后一个版本。你可以在以下链接中了解更多信息：[https://github.com/devlooped/moq/issues/1370](https://github.com/devlooped/moq/issues/1370)。我计划在未来几个月内密切关注这种情况，然后决定是否应该切换到替代方案。
- en: 'In `TimeTests.cs`, import the namespace to use the `Mock.Of<T>` extension method,
    as shown in the following code:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`TimeTests.cs`文件中，导入命名空间以使用`Mock.Of<T>`扩展方法，如下面的代码所示：
- en: '[PRE37]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'In the `TestDiscountDuringWorkdays` method, comment out the statement that
    used the `System` provider, and replace it with statements to mock a time provider
    that always returns a fixed date and time during workdays, as highlighted in the
    following code:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`TestDiscountDuringWorkdays`方法中，注释掉使用`System`提供者的语句，并用以下代码中的语句替换，以模拟一个在工作日总是返回固定日期和时间的时钟提供者：
- en: '[PRE38]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'In the `TestDiscountDuringWeekends` method, comment out the statement that
    used the `System` provider and replace it with statements to mock a time provider
    that always returns a fixed date and time at the weekend, as highlighted in the
    following code:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`TestDiscountDuringWeekends`方法中，注释掉使用`System`提供者的语句，并用以下代码中的语句替换，以模拟一个在周末总是返回固定日期和时间的时钟提供者：
- en: '[PRE39]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Run the unit tests, and note that they both succeed.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行单元测试，并注意它们都成功了。
- en: Working with time zones
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与时区一起工作
- en: In the code example about the .NET release party, using a `TimeOnly` was not
    actually a good idea because the `TimeOnly` value did not include information
    about the time zone. It is only useful if you are in the correct time zone. `TimeOnly`
    is, therefore, a poor choice for an event. For events, we need to understand and
    handle time zones.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在关于.NET发布派对的代码示例中，使用`TimeOnly`实际上并不是一个好主意，因为`TimeOnly`值没有包含时区信息。只有在你处于正确的时区时才有用。因此，`TimeOnly`对于事件来说是一个较差的选择。对于事件，我们需要理解和处理时区。
- en: Understanding DateTime and TimeZoneInfo
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解`DateTime`和`TimeZoneInfo`
- en: 'The `DateTime` class has many useful members related to time zones, as shown
    in *Table 7.4*:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '`DateTime`类有许多与时区相关的重要成员，如下表7.4所示：'
- en: '| **Member** | **Description** |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| **成员** | **描述** |'
- en: '| `Now` property | A `DateTime` value that represents the current date and
    time in the local time zone. |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| `Now`属性 | 表示本地时区的当前日期和时间的`DateTime`值。 |'
- en: '| `UtcNow` property | A `DateTime` value that represents the current date and
    time in the UTC time zone. |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| `UtcNow` 属性 | 表示 UTC 时区的当前日期和时间的 `DateTime` 值。|'
- en: '| `Kind` property | A `DateTimeKind` value that indicates whether the `DateTime`
    value is `Unspecified`, `Utc`, or `Local`. |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '| `Kind` 属性 | 表示 `DateTime` 值是 `Unspecified`、`Utc` 还是 `Local` 的 `DateTimeKind`
    值。|'
- en: '| `IsDaylightSavingTime` method | A `bool` that indicates if the `DateTime`
    value is during DST. |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| `IsDaylightSavingTime` 方法 | 一个 `bool`，指示 `DateTime` 值是否在夏令时（DST）。|'
- en: '| `ToLocalTime` method | Converts a UTC `DateTime` value to the equivalent
    local time. |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| `ToLocalTime` 方法 | 将 UTC `DateTime` 值转换为等效的本地时间。|'
- en: '| `ToUniversalTime` method | Converts a local `DateTime` value to the equivalent
    UTC time. |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '| `ToUniversalTime` 方法 | 将本地 `DateTime` 值转换为等效的 UTC 时间。|'
- en: 'Table 7.4: DateTime members related to time zones'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 表 7.4：与时区相关的 DateTime 成员
- en: 'The `TimeZoneInfo` class has many useful members, as shown in *Table 7.5*:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '`TimeZoneInfo` 类具有许多有用的成员，如 *表 7.5* 所示：'
- en: '| **Member** | **Description** |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| **成员** | **描述** |'
- en: '| `Id` property | A `string` that uniquely identifies the time zone. |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| `Id` 属性 | 一个 `string`，唯一标识时区。|'
- en: '| `Local` property | A `TimeZoneInfo` value that represents the current local
    time zone. Varies depending on where the code executes. |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| `Local` 属性 | 表示当前本地时区的 `TimeZoneInfo` 值。取决于代码执行的地点。|'
- en: '| `Utc` property | A `TimeZoneInfo` value that represents the UTC time zone.
    |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| `Utc` 属性 | 表示 UTC 时区的 `TimeZoneInfo` 值。|'
- en: '| `StandardName` property | A `string` for the name of the time zone when Daylight
    Saving is not active. |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| `StandardName` 属性 | 当夏令时不激活时，表示时区名称的 `string`。|'
- en: '| `DaylightName` property | A `string` for the name of the time zone when Daylight
    Saving is active. |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| `DaylightName` 属性 | 当夏令时激活时，表示时区名称的 `string`。|'
- en: '| `DisplayName` property | A `string` for the general name of the time zone.
    |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '| `DisplayName` 属性 | 表示时区的通用名称的 `string`。|'
- en: '| `BaseUtcOffset` property | A `TimeSpan` that represents the difference between
    this time zone and the UTC time zone, ignoring any potential Daylight Saving adjustments.
    |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '| `BaseUtcOffset` 属性 | 表示此时区与 UTC 时区之间的差异的 `TimeSpan`，忽略任何潜在的夏令时调整。|'
- en: '| `SupportsDaylightSavingTime` property | A `bool` that indicates whether this
    time zone has Daylight Saving adjustments. |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '| `SupportsDaylightSavingTime` 属性 | 一个 `bool` 值，指示此时区是否有夏令时调整。|'
- en: '| `ConvertTime` method | Converts a `DateTime` value to another `DateTime`
    value in a different time zone. You can specify the source and destination time
    zones. |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| `ConvertTime` 方法 | 将 `DateTime` 值转换为另一个时区的 `DateTime` 值。您可以指定源时区和目标时区。|'
- en: '| `ConvertTimeFromUtc` method | Converts a `DateTime` value in the UTC time
    zone to a `DateTime` value in a specified time zone. |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| `ConvertTimeFromUtc` 方法 | 将 UTC 时区的 `DateTime` 值转换为指定时区的 `DateTime` 值。|'
- en: '| `ConvertTimeToUtc` method | Converts a `DateTime` value in a specified time
    zone to a `DateTime` value in the UTC time zone. |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| `ConvertTimeToUtc` 方法 | 将指定时区的 `DateTime` 值转换为 UTC 时区的 `DateTime` 值。|'
- en: '| `IsDaylightSavingTime` method | Returns a `bool`, indicating whether the
    `DateTime` value is in Daylight Saving. |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| `IsDaylightSavingTime` 方法 | 返回一个 `bool`，指示 `DateTime` 值是否在夏令时。|'
- en: '| `GetSystemTimeZones` method | Returns a collection of time zones registered
    with the operating system. |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '| `GetSystemTimeZones` 方法 | 返回操作系统注册的时区集合。|'
- en: 'Table 7.5: TimeZoneInfo useful members'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 表 7.5：TimeZoneInfo 有用成员
- en: Some database providers for EF Core only allow you to store `DateTime` values
    that use the `Kind` property to determine whether it is UTC, so you might need
    to convert to and from `DateTimeOffset` if you need to work with these values.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 EF Core 数据库提供者仅允许您存储使用 `Kind` 属性确定是否为 UTC 的 `DateTime` 值，因此如果您需要处理这些值，可能需要将它们转换为
    `DateTimeOffset`。
- en: Exploring DateTime and TimeZoneInfo
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索 DateTime 和 TimeZoneInfo
- en: 'Use the `TimeZoneInfo` class to work with time zones:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `TimeZoneInfo` 类处理时区：
- en: 'Use your preferred code editor to add a new **Console App** / `console` project
    named `WorkingWithTimeZones` to the `Chapter07` solution:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您首选的代码编辑器将名为 `WorkingWithTimeZones` 的新 **控制台应用程序**/ `console` 项目添加到 `Chapter07`
    解决方案中：
- en: In Visual Studio 2022, set **Startup Project** to **Current selection**.
  id: totrans-240
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Visual Studio 2022 中，将 **启动项目** 设置为 **当前选择**。
- en: Treat warnings as errors, and statically and globally import the `System.Console`
    class.
  id: totrans-241
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将警告视为错误，并静态和全局导入 `System.Console` 类。
- en: Add a new class file named `Program.Helpers.cs`.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为 `Program.Helpers.cs` 的新类文件。
- en: 'Modify its contents to define some helper methods to output a section title
    in a visually different way, output a list of all time zones in the current system,
    and output details about a `DateTime` or `TimeZoneInfo` object, as shown in the
    following code:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改其内容以定义一些辅助方法，以视觉上不同的方式输出一个部分标题，输出当前系统中的所有时区列表，以及输出关于`DateTime`或`TimeZoneInfo`对象的详细信息，如下面的代码所示：
- en: '[PRE40]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'In `Program.cs`, delete the existing statements. Add statements to output the
    current date and time in the local and UTC time zones, and then output details
    about the local and UTC time zones, as shown in the following code:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，删除现有的语句。添加语句以输出本地和UTC时区的当前日期和时间，然后输出本地和UTC时区的详细信息，如下面的代码所示：
- en: '[PRE41]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Run the console app and note the results, including the time zones registered
    on your operating system (there are 141 on my Windows 11 laptop), and that it
    is currently 4:17 PM on 31 May 2022 in England, meaning I am in the GMT Standard
    Time zone. However, because DST is active, it is currently known as GMT Summer
    Time, which is one hour ahead of UTC, as shown in the following output:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行控制台应用程序并注意结果，包括在您的操作系统上注册的时区（在我的Windows 11笔记本电脑上有141个），以及目前是2022年5月31日下午4:17在英格兰，这意味着我处于GMT标准时区。然而，由于夏令时正在活跃，它目前被称为GMT夏令时，比UTC快一个小时，如下面的输出所示：
- en: '[PRE42]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The `BaseUtcOffset` of the **GMT Standard Time** zone is zero because normally
    Daylight Saving is not active. That is why it is prefixed with `Base`.
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**GMT标准时间**时区的`BaseUtcOffset`为零，因为通常夏令时不活跃。这就是为什么它前面有`Base`前缀。'
- en: 'In `Program.cs`, add statements to prompt the user to enter a time zone (using
    Eastern Standard Time as a default), get that time zone, output details about
    it, and then compare a time entered by the user with the equivalent time in the
    other time zone, and catch potential exceptions, as shown in the following code:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，添加语句提示用户输入一个时区（使用东部标准时间作为默认值），获取该时区，输出其详细信息，然后比较用户输入的时间与另一个时区的等效时间，并捕获潜在的异常，如下面的代码所示：
- en: '[PRE43]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Run the console app, press *Enter* for US East Coast, then enter `12:30pm`
    for the local time, and note the results, as shown in the following output:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行控制台应用程序，按*Enter*键选择美国东部时间，然后输入`12:30pm`作为当地时间，并注意以下输出结果：
- en: '[PRE44]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: My local time zone is GMT Standard Time, so there is currently a five-hour time
    difference between me and the US East Coast. Your local time zone will be different.
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我的本地时区是GMT标准时间，因此目前我与美国东部时间之间有五个小时的时差。您的本地时区可能会有所不同。
- en: 'Run the console app, copy one of the time zones to the clipboard, paste it
    at the prompt, and then press *Enter* for the local time. Note the results, as
    shown in the following output:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行控制台应用程序，将一个时区复制到剪贴板，在提示符中粘贴它，然后按*Enter*键输入当地时间。注意以下输出结果：
- en: '[PRE45]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Sydney, Australia, is currently nine hours ahead, so at about 5 PM for me, it
    is about 2 AM on the following day for them.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 澳大利亚的悉尼目前比我们快九个小时，所以对我来说大约是下午5点，对他们来说大约是第二天凌晨2点。
- en: That’s a lot to learn about dates, times, and time zones. But we aren’t done
    yet. Now, we need to look at the wider topic of cultures, which are a combination
    of language and region and do not just affect date and time formatting.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 这需要学习很多关于日期、时间和时区的内容。但我们还没有完成。现在，我们需要关注更广泛的文化主题，这些文化是语言和区域的组合，并不仅仅影响日期和时间格式。
- en: Working with cultures
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与文化打交道
- en: Internationalization is the process of enabling your code to correctly run all
    over the world. It has two parts, **globalization** and **localization**, and
    both of them are about working with cultures.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 国际化是使您的代码能够在全球范围内正确运行的过程。它有两个部分，**全球化**和**本地化**，它们都与处理文化有关。
- en: Globalization is about writing your code to accommodate multiple languages and
    region combinations. The combination of a language and a region is known as a
    culture. It is important for your code to know both the language and region because,
    for example, the date and currency formats are different in Quebec and Paris,
    despite them both using the French language.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 全球化涉及编写代码以适应多种语言和区域组合。语言和区域的组合称为文化。对于您的代码来说，了解语言和区域都很重要，因为例如，尽管魁北克和巴黎都使用法语，但它们的日期和货币格式是不同的。
- en: There are **International Organization for Standardization** (**ISO**) codes
    for all culture combinations. For example, in the code `da-DK`, `da` indicates
    the Danish language and `DK` indicates the Denmark region, and in the code `fr-CA`,
    `fr` indicates the French language and `CA` indicates the Canada region.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所有文化组合，都有国际标准化组织（**ISO**）代码。例如，在代码 `da-DK` 中，`da` 表示丹麦语言，`DK` 表示丹麦地区，而在代码
    `fr-CA` 中，`fr` 表示法语，`CA` 表示加拿大地区。
- en: 'ISO is not just an acronym. ISO is a reference to the Greek word *isos* (which
    means *equal*). You can see a list of ISO culture codes at the following link:
    [https://lonewolfonline.net/list-net-culture-country-codes/](https://lonewolfonline.net/list-net-culture-country-codes/).'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: ISO 不仅仅是一个缩写。ISO 是指希腊单词 *isos*（意为 *平等*）。您可以在以下链接中查看 ISO 文化代码列表：[https://lonewolfonline.net/list-net-culture-country-codes/](https://lonewolfonline.net/list-net-culture-country-codes/)。
- en: Localization is about customizing the user interface to support a language,
    for example, changing the label of a button to **Close** (`en`) or **Fermer**
    (`fr`). Since localization is more about the language, it doesn’t always need
    to know about the region, although, ironically enough, the words *standardization*
    (`en-US`) and *standardisation* (`en-GB`) suggest otherwise.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 本地化是关于定制用户界面以支持一种语言，例如，将按钮标签更改为 **关闭**（`en`）或 **Fermer**（`fr`）。由于本地化更多地涉及语言，因此它通常不需要了解地区，尽管讽刺的是，单词
    *standardization*（`en-US`）和 *standardisation*（`en-GB`）似乎暗示了相反的情况。
- en: '**Good Practice**: I am not a professional translator of software user interfaces,
    so take all examples in this chapter as general guidance. My research into French
    user interface labeling common practice led me to the following links, but it
    would be best to hire a professional if you are not a native language speaker:
    [https://french.stackexchange.com/questions/12969/translation-of-it-terms-like-close-next-search-etc](https://french.stackexchange.com/questions/12969/translation-of-it-terms-like-close-next-search-etc)
    and [https://www.linguee.com/english-french/translation/close+button.html](https://www.linguee.com/english-french/translation/close+button.html).'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：我不是专业软件用户界面翻译员，因此请将本章中的所有示例视为一般性指导。我对法语用户界面标签常见实践的研究使我找到了以下链接，但如果您不是母语人士，最好还是聘请专业人士：[https://french.stackexchange.com/questions/12969/translation-of-it-terms-like-close-next-search-etc](https://french.stackexchange.com/questions/12969/translation-of-it-terms-like-close-next-search-etc)
    和 [https://www.linguee.com/english-french/translation/close+button.html](https://www.linguee.com/english-french/translation/close+button.html)。'
- en: Detecting and changing the current culture
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检测和更改当前文化
- en: Internationalization is a huge topic on which thousand-page books have been
    written. In this section, you will get a brief introduction to the basics, using
    the `CultureInfo` and `RegionInfo` types in the `System.Globalization` namespace.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 国际化是一个巨大的主题，有成千上万页的书籍被撰写。在本节中，您将简要了解基础知识，使用 `System.Globalization` 命名空间中的 `CultureInfo`
    和 `RegionInfo` 类型。
- en: 'Let’s write some code:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写一些代码：
- en: Use your preferred code editor to add a new **Console App** / `console` project
    named `WorkingWithCultures` to the `Chapter07` solution.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您首选的代码编辑器，将一个名为 `WorkingWithCultures` 的新 **控制台应用程序**/ `console` 项目添加到 `Chapter07`
    解决方案中。
- en: 'In the project file, treat warnings as errors, and then statically and globally
    import the `System.Console` class, and globally import the `System.Globalization`
    namespace so that we can use the `CultureInfo` class, as shown in the following
    markup:'
  id: totrans-270
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在项目文件中，将警告视为错误，然后全局导入 `System.Console` 类，并全局导入 `System.Globalization` 命名空间，以便我们可以使用
    `CultureInfo` 类，如下面的标记所示：
- en: '[PRE46]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Add a new class file named `Program.Helpers.cs`, and modify its contents to
    add a method to the partial `Program` class that will output information about
    the cultures used for globalization and localization, as shown in the following
    code:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为 `Program.Helpers.cs` 的新类文件，并修改其内容以向部分 `Program` 类添加一个方法，该方法将输出有关用于全球化和本地化的文化信息，如下面的代码所示：
- en: '[PRE47]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'In `Program.cs`, delete the existing statements, and add statements to set
    the output encoding of the console to support Unicode. Then, output information
    about the globalization and localization cultures. Finally, prompt the user to
    enter a new culture code and show how that affects the formatting of common values,
    such as dates and currency, as shown in the following code:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 文件中，删除现有的语句，并添加语句以设置控制台输出编码以支持 Unicode。然后，输出有关全球化本地化文化的信息。最后，提示用户输入一个新的文化代码，并展示它如何影响常见值（如日期和货币）的格式化，如下面的代码所示：
- en: '[PRE48]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: When you run an application, it automatically sets its thread to use the culture
    of the operating system. I am running my code in London, UK, so the thread is
    set to English (Great Britain).
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当你运行一个应用程序时，它会自动将线程设置为使用操作系统的文化。我在英国伦敦运行我的代码，所以线程被设置为英语（大不列颠）。
- en: The code prompts the user to enter an alternative ISO code. This allows your
    applications to replace the default culture at runtime.
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 代码提示用户输入一个替代的ISO代码。这允许你的应用程序在运行时替换默认的文化。
- en: The application then uses standard format codes to output the day of the week
    using format code `dddd`, the number of minutes with thousand separators using
    format code `N0`, and the salary with the currency symbol. These adapt automatically,
    based on the thread’s culture.
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 应用程序随后使用标准的格式代码，使用格式代码`dddd`输出星期几，使用格式代码`N0`输出带千位分隔符的分钟数，以及使用货币符号的薪水。这些会根据线程的文化自动调整。
- en: 'Run the code and enter `en-US` for the ISO code (or press *Enter*), and then
    enter some sample data, including a date in a format valid for US English, as
    shown in the following output:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，输入ISO代码`en-US`（或按*Enter*键），然后输入一些示例数据，包括一个适用于美国英语的日期格式，如下面的输出所示：
- en: '[PRE49]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Run the code again, and try Danish in Denmark (`da-DK`), as shown in the following
    output:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次运行代码，并尝试在丹麦使用丹麦语（`da-DK`），如下面的输出所示：
- en: '[PRE50]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: In this example, only the date and salary are globalized into Danish. The rest
    of the text is hardcoded as English. Later, we will translate that English text
    into other languages. For now, let’s see some other differences between cultures.
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此示例中，只有日期和薪水被全球化为丹麦语。其余的文本硬编码为英语。稍后，我们将翻译这些英语文本为其他语言。现在，让我们看看文化之间的其他差异。
- en: 'Run the code again, and try Polish in Poland (`pl-PL`). Note that the grammar
    rules in Polish make the day number possessive for the month name, so the month
    `styczeń` becomes `stycznia`, as shown in the following output:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次运行代码，并尝试在波兰使用波兰语（`pl-PL`）。请注意，波兰的语法规则使得月份名称的日期是所有格，所以月份`styczeń`变为`stycznia`，如下面的输出所示：
- en: '[PRE51]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Run the code again, and try Persian in Iran (`fa-IR`). Note that dates in Iran
    must be specified as year/month/day, and that this year (2023) is the year 1401
    in the Persian calendar, as shown in the following output:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次运行代码，并尝试在伊朗使用波斯语（`fa-IR`）。请注意，伊朗的日期必须指定为年/月/日，并且今年（2023年）在波斯历中是1401年，如下面的输出所示：
- en: '[PRE52]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Although I tried to confirm with a Persian reader whether this example is correct,
    due to factors like right-to-left languages being tricky to work with in console
    apps and copying and pasting from a console window into a word processor, I apologize
    in advance to my Persian readers if this example is all messed up!
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我试图与一位波斯语读者确认此示例是否正确，但由于在控制台应用程序中处理从右到左的语言很棘手，以及从控制台窗口复制粘贴到文字处理器的因素，如果此示例全部混乱，我提前向我的波斯语读者道歉！
- en: Temporarily using the invariant culture
  id: totrans-289
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 暂时使用不变的文化
- en: Sometimes, you might need to temporarily use a different culture without switching
    the current thread to that culture. For example, when automatically generating
    documents, queries, and commands that include data values, you might need to ignore
    your current culture and use a more standardized culture. For this purpose, you
    can use the invariant culture, which is based on US English.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你可能需要暂时使用不同的文化，而无需切换当前线程到该文化。例如，当自动生成包含数据值的文档、查询和命令时，你可能需要忽略当前的文化并使用更标准化的文化。为此，你可以使用基于美国英语的不变文化。
- en: 'For example, you might need to generate a JSON document with a decimal number
    value and format the number with two decimal places, as shown in the following
    code:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可能需要生成一个带有小数数值的JSON文档，并使用两位小数格式化数字，如下面的代码所示：
- en: '[PRE53]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'If you were to execute this on a Slovenian computer, you would get the following
    output:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在斯洛文尼亚的计算机上执行此操作，你会得到以下输出：
- en: '[PRE54]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: If you then tried to insert this JSON document into a cloud database, it would
    fail because it would not understand the number format that uses commas for decimals
    and dots for groups.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试将此JSON文档插入云数据库，它将失败，因为它不会理解使用逗号表示小数点，点表示组的数字格式。
- en: 'So you can override the current culture and specify the invariant culture only
    when outputting the number as a `string` value, as shown in the following code:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你可以在输出数字作为`string`值时覆盖当前文化，并指定不变的文化，如下面的代码所示：
- en: '[PRE55]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'If you were to execute this on a Slovenian (or any other culture) computer,
    you would now get the following output, which would be successfully recognized
    by a cloud database and not throw exceptions:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在斯洛文尼亚（或任何其他文化）的计算机上执行此操作，你现在将得到以下输出，这将成功被云数据库识别而不会抛出异常：
- en: '[PRE56]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Now, let’s see how to translate text from one language to another so that the
    label prompts are in the correct language for the current culture.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何将文本从一种语言翻译成另一种语言，以便标签提示在当前文化中正确显示。
- en: Localizing your user interface
  id: totrans-301
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本地化用户界面
- en: 'A localized application is divided into two parts:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 本地化应用程序分为两部分：
- en: An assembly containing code that is the same for all locales and contains resources
    for when no other resource file is found.
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含对所有区域都相同的代码和在其他资源文件未找到时使用的资源的程序集。
- en: One or more assemblies that contain the user interface resources, which are
    different for different locales. These are known as **satellite assemblies**.
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含不同区域用户界面资源的一个或多个程序集，这些被称为**卫星程序集**。
- en: This model allows the initial application to be deployed with default invariant
    resources, and over time, additional satellite assemblies can be deployed as the
    resources are translated. In the coding task, you will create a console app with
    embedded invariant culture, and satellite assemblies for Danish, French, French-Canadian,
    Polish, and Iranian (Persian). To add more cultures in the future, just follow
    the same steps.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 此模型允许初始应用程序部署时使用默认的不变资源，并且随着时间的推移，可以部署额外的卫星程序集，因为资源被翻译。在编码任务中，你将创建一个具有嵌入式不变文化的控制台应用程序，以及丹麦语、法语、法语-加拿大、波兰语和伊朗语（波斯语）的卫星程序集。要将来添加更多文化，只需遵循相同的步骤。
- en: User interface resources include any text for messages, logs, dialog boxes,
    buttons, labels, or even filenames of images, videos, and so on. Resource files
    are XML files with the `.resx` extension. The filename includes a culture code,
    for example, `PacktResources.en-GB.resx` or `PacktResources.da-DK.resx`.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 用户界面资源包括任何消息、日志、对话框、按钮、标签或甚至图像、视频等文件名的文本。资源文件是具有 `.resx` 扩展名的 XML 文件。文件名包括文化代码，例如，`PacktResources.en-GB.resx`
    或 `PacktResources.da-DK.resx`。
- en: 'If a resource file or individual entry is missing, the automatic culture fallback
    search path for resources goes from specific culture (language and region) to
    neutral culture (language only) to invariant culture (supposedly independent but,
    basically, US English). If the current thread culture is `en-AU` (Australian English),
    then it will search for the resource file in the following order:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 如果资源文件或单个条目缺失，资源自动文化回退搜索路径从特定文化（语言和区域）到中性文化（仅语言）再到不变文化（理论上独立，但实际上是美式英语）。如果当前线程文化是
    `en-AU`（澳大利亚英语），那么它将按以下顺序搜索资源文件：
- en: 'Australian English: `PacktResources.en-AU.resx`'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 澳大利亚英语：`PacktResources.en-AU.resx`
- en: 'Neutral English: `PacktResources.en.resx`'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 中性英语：`PacktResources.en.resx`
- en: 'Invariant: `PacktResources.resx`'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不变项：`PacktResources.resx`
- en: Defining and loading resources
  id: totrans-311
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义和加载资源
- en: 'To load resources from these satellite assemblies, we use some standard .NET
    types named `IStringLocalizer<T>` and `IStringLocalizerFactory`. Implementations
    of these are loaded from the .NET generic host as dependency services:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 要从这些卫星程序集中加载资源，我们使用一些标准的 .NET 类型，名为 `IStringLocalizer<T>` 和 `IStringLocalizerFactory`。这些实现的加载来自
    .NET 通用宿主作为依赖服务：
- en: 'In the `WorkingWithCultures` project, add package references to Microsoft extensions
    to work with generic hosting and localization, as shown in the following markup:'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `WorkingWithCultures` 项目中，添加对 Microsoft 扩展的包引用以使用通用托管和本地化，如下所示：
- en: '[PRE57]'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Build the `WorkingWithCultures` project to restore packages.
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建具有 `WorkingWithCultures` 项目的项目以恢复包。
- en: In the project folder, create a new folder named `Resources`.
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目文件夹中，创建一个名为 `Resources` 的新文件夹。
- en: 'In the `Resources` folder, add a new XML file named `PacktResources.resx`,
    and modify the contents to contain default invariant language resources (usually
    equivalent to US English), as shown in the following markup:'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Resources` 文件夹中，添加一个名为 `PacktResources.resx` 的新 XML 文件，并修改其内容以包含默认的不变语言资源（通常相当于美式英语），如下所示：
- en: '[PRE58]'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'In the `WorkingWithCultures` project folder, add a new class file named `PacktResources.cs`
    that will load text resources for the user interface, as shown in the following
    code:'
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `WorkingWithCultures` 项目文件夹中，添加一个名为 `PacktResources.cs` 的新类文件，该文件将加载用户界面的文本资源，如下所示：
- en: '[PRE59]'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: For the `GetEnterYourNamePrompt` method, I broke the implementation down into
    steps to get useful information, like checking if the resource string is found
    and showing the search path if not. The other method implementations use a simplified
    fallback to the key name for the resource string if the resource is not found.
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于`GetEnterYourNamePrompt`方法，我将实现分解为步骤以获取有用的信息，例如检查资源字符串是否找到，如果没有找到则显示搜索路径。其他方法实现如果资源未找到，则使用简化回退到资源字符串的键名。
- en: 'In `Program.cs`, at the top, import the namespaces to work with hosting and
    dependency injection, and then configure a host that enables localization and
    the `PacktResources` service, as shown in the following code:'
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`文件顶部，导入用于处理托管和依赖注入的命名空间，然后配置一个启用本地化和`PacktResources`服务的宿主，如下所示：
- en: '[PRE60]'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '**Good Practice**: By default, `ResourcesPath` is an empty string, meaning
    it looks for `.resx` files in the current directory. We are going to make the
    project tidier by putting resources into a subfolder.'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**良好实践**：默认情况下，`ResourcesPath`是一个空字符串，这意味着它将在当前目录中查找`.resx`文件。我们将通过将资源放入子文件夹来使项目更整洁。'
- en: 'After changing the current culture, add a statement to get the `PacktResources`
    service, and use it to output localized prompts for the user to enter their name,
    date of birth, and salary. Then, output their details, as highlighted in the following
    code:'
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在更改当前文化后，添加一个获取`PacktResources`服务的语句，并使用它来输出用户输入姓名、出生日期和薪水的本地化提示。然后，输出他们的详细信息，如下所示：
- en: '[PRE61]'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Testing globalization and localization
  id: totrans-327
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试全球化与本地化
- en: 'Now, we can run the console app and see the resources being loaded:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以运行控制台应用程序并查看资源正在被加载：
- en: Run the console app and enter `da-DK` for the ISO code. Note that the prompts
    are in US English because we currently only have invariant culture resources.
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行控制台应用程序，并输入`da-DK`作为ISO代码。请注意，提示信息使用的是美式英语，因为我们目前只有不变的文化资源。
- en: To save time and to make sure you have the correct structure, you can copy,
    paste, and rename the `.resx` files instead of creating empty new ones. Or you
    could copy these files from the GitHub repository for the book.
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了节省时间并确保你有正确的结构，你可以复制、粘贴并重命名`.resx`文件，而不是创建空的新文件。或者，你也可以从本书的GitHub仓库中复制这些文件。
- en: 'In the `Resources` folder, add a new XML file named `PacktResources.da.resx`,
    and modify the contents to contain non-region-specific Danish language resources,
    as shown in the following markup:'
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Resources`文件夹中，添加一个名为`PacktResources.da.resx`的新XML文件，并修改其内容以包含非区域特定的丹麦语资源，如下所示：
- en: '[PRE62]'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'In the `Resources` folder, add a new XML file named `PacktResources.fr.resx`,
    and modify the contents to contain non-region-specific French language resources,
    as shown in the following markup:'
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Resources`文件夹中，添加一个名为`PacktResources.fr.resx`的新XML文件，并修改其内容以包含非区域特定的法语资源，如下所示：
- en: '[PRE63]'
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'In the `Resources` folder, add a new XML file named `PacktResources.fr-CA.resx`,
    and modify the contents to contain the French language in Canada region resources,
    as shown in the following markup:'
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Resources`文件夹中，添加一个名为`PacktResources.fr-CA.resx`的新XML文件，并修改其内容以包含加拿大地区的法语资源，如下所示：
- en: '[PRE64]'
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'In the `Resources` folder, add a new XML file named `PacktResources.pl-PL.resx`,
    and modify the contents to contain the Polish language in Poland region resources,
    as shown in the following markup:'
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Resources`文件夹中，添加一个名为`PacktResources.pl-PL.resx`的新XML文件，并修改其内容以包含波兰地区的波兰语资源，如下所示：
- en: '[PRE65]'
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'In the `Resources` folder, add a new XML file named `PacktResources.fa-IR.resx`,
    and modify the contents to contain the Farsi language in Iranian region resources,
    as shown in the following markup:'
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Resources`文件夹中，添加一个名为`PacktResources.fa-IR.resx`的新XML文件，并修改其内容以包含伊朗地区的波斯语资源，如下所示：
- en: '[PRE66]'
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Run the code, and enter `da-DK` for the ISO code. Note that the prompts are
    in Danish, as shown in the following output:'
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，并输入`da-DK`作为ISO代码。请注意，提示信息使用的是丹麦语，如下所示：
- en: '[PRE67]'
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Run the code, and enter `fr-FR` for the ISO code. Note that the prompts are
    in French only, as shown in the following output:'
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，并输入`fr-FR`作为ISO代码。请注意，提示信息只使用法语，如下所示：
- en: '[PRE68]'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Run the code, and enter `fr-CA` for the ISO code. Note that the prompts are
    in French and English because Canada might have a requirement to support both
    as official languages, as shown in the following output:'
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，并输入`fr-CA`作为ISO代码。请注意，提示信息使用的是法语和英语，因为加拿大可能需要支持这两种官方语言，如下所示：
- en: '[PRE69]'
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Run the code, and enter `fa-IR` for the ISO code. Note that the prompts are
    in Persian/Farsi and English, and there is the additional complication of a right-to-left
    language, as shown in the following output:'
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，并输入`fa-IR`作为ISO代码。注意提示为波斯/波斯语和英语，并且存在从右到左的语言的额外复杂性，如下所示：
- en: '[PRE70]'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: If you need to work with Persian dates, then there are NuGet packages with open-source
    GitHub repositories that you can try, although I cannot vouch for their correctness,
    like [https://github.com/VahidN/DNTPersianUtils.Core](https://github.com/VahidN/DNTPersianUtils.Core)
    and [https://github.com/imanabidi/PersianDate.NET](https://github.com/imanabidi/PersianDate.NET).
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你需要处理波斯日期，那么有一些NuGet包和开源GitHub存储库可供尝试，尽管我不能保证它们的正确性，如[https://github.com/VahidN/DNTPersianUtils.Core](https://github.com/VahidN/DNTPersianUtils.Core)和[https://github.com/imanabidi/PersianDate.NET](https://github.com/imanabidi/PersianDate.NET)。
- en: 'In the `Resources` folder, in `PacktResources.da.resx`, modify the contents
    to deliberately change the key for the prompt to enter your name, by appending
    `Wrong`, as highlighted in the following markup:'
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Resources`文件夹中，在`PacktResources.da.resx`中，修改内容以故意更改提示输入姓名的键，通过附加`Wrong`，如以下标记所示：
- en: '[PRE71]'
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Run the code, and enter `da-DK` for the ISO code. Note that the prompts are
    in Danish, except for the `Enter your name` prompt in English, due to it falling
    back to the default resource file, as shown in the following output:'
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，并输入`da-DK`作为ISO代码。注意提示为丹麦语，除了`Enter your name`提示，它显示错误并使用键名作为最后的-退路回退，如下所示：
- en: '[PRE72]'
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: In the `Resources` folder, in `PacktResources.resx`, modify the contents to
    deliberately change the key for the prompt to enter your name, by appending `Wrong`.
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Resources`文件夹中，在`PacktResources.resx`中，修改内容以故意更改提示输入姓名的键，通过附加`Wrong`。
- en: 'Run the code, and enter `da-DK` for the ISO code. Note that the prompts are
    in Danish, except for the `Enter your name` prompt, which shows an error and uses
    the key name as a last - resort fallback, as shown in the following output:'
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行代码，并输入`da-DK`作为ISO代码。注意提示为丹麦语，除了`Enter your name`提示，它显示错误并使用键名作为最后的-退路回退，如下所示：
- en: '[PRE73]'
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Remove the `Wrong` suffix in both resource files.
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从两个资源文件中移除`Wrong`后缀。
- en: 'In **Solution Explorer**, toggle **Show All Files**, and expand the `bin/Debug/net8.0/da`
    folder, as shown in *Figure 7.1*:'
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**解决方案资源管理器**中，切换**显示所有文件**，并展开`bin/Debug/net8.0/da`文件夹，如图7.1所示：
- en: '![](img/B19587_07_01.png)'
  id: totrans-359
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19587_07_01.png)'
- en: 'Figure 7.1: The satellite assembly folders for culture resources'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.1：文化资源卫星组件文件夹
- en: Note the satellite assembly named `WorkingWithCultures.resources.dll` for the
    neutral Danish resources.
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意名为`WorkingWithCultures.resources.dll`的卫星组件，用于中性的丹麦资源。
- en: 'Any other culture resource assemblies are named the same but stored in folders
    that match the appropriate culture code. You can use tools like **ResX Resource
    Manager** (found at the following link: [https://dotnetfoundation.org/projects/resx-resource-manager](https://dotnetfoundation.org/projects/resx-resource-manager))
    to create many more `.resx` files, compile them into satellite assemblies, and
    then deploy them to users without needing to recompile the original console app.'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 其他文化资源组件的命名相同，但存储在匹配适当文化代码的文件夹中。你可以使用像**ResX资源管理器**（可在以下链接找到：[https://dotnetfoundation.org/projects/resx-resource-manager](https://dotnetfoundation.org/projects/resx-resource-manager)）这样的工具来创建更多的`.resx`文件，将它们编译成卫星组件，然后部署给用户，而无需重新编译原始控制台应用程序。
- en: '**Good Practice**: Consider whether your application needs to be internationalized,
    and plan for that before you start coding! Think about all the data that will
    need to be globalized (date formats, number formats, and sorting text behavior).
    Write down all the pieces of text in the user interface that will need to be localized.'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：考虑你的应用程序是否需要国际化，并在开始编码之前为此做好准备！思考所有需要全球化的数据（日期格式、数字格式和排序文本行为）。写下用户界面中所有需要本地化的文本片段。'
- en: 'Microsoft has an online tool (found at the following link: [https://www.microsoft.com/en-us/Language/](https://www.microsoft.com/en-us/Language/))
    that can help you translate text in your user interfaces, as shown in *Figure
    7.2*:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 微软有一个在线工具（可在以下链接找到：[https://www.microsoft.com/en-us/Language/](https://www.microsoft.com/en-us/Language/))，可以帮助你翻译用户界面中的文本，如图7.2所示：
- en: '![](img/B19587_07_02.png)'
  id: totrans-365
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19587_07_02.png)'
- en: 'Figure 7.2: Microsoft user interface online text translation tool'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.2：微软用户界面在线文本翻译工具
- en: We have now seen lots of date and time features provided by the .NET BCL. Does
    it provide everything we need to handle internationalization? Unfortunately, no.
    That’s why you will likely want to use Noda Time.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了 .NET BCL 提供的许多日期和时间功能。它是否提供了我们处理国际化所需的一切？不幸的是，并没有。这就是为什么你可能会想使用 Noda
    Time。
- en: Working with Noda Time
  id: totrans-368
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Noda Time
- en: '**Noda Time** is for developers who feel that the built-in libraries for handling
    dates and times are not good enough. Noda Time is like Joda Time, a replacement
    date/time handling library for Java.'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '**Noda Time** 是为那些觉得内置的日期/时间处理库不够好的开发者设计的。Noda Time 类似于 Joda Time，是 Java 的替代日期/时间处理库。'
- en: Noda Time 3.0 or later supports .NET Standard 2.0 and .NET 6 or later. This
    means that you can use it with legacy platforms like .NET Framework and Xamarin,
    as well as modern .NET.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: Noda Time 3.0 或更高版本支持 .NET Standard 2.0 和 .NET 6 或更高版本。这意味着你可以使用它与旧平台，如 .NET
    Framework 和 Xamarin，以及现代 .NET。
- en: To understand one of the core deficiencies with the built-in .NET date/time
    types, imagine that instead of defining separate types for numbers, like `int`
    (`System.Int32`), `double` (`System.Double`), and `decimal` (`System.Decimal`),
    the .NET team defined only a `System.Number` type with a property named `Kind`
    to indicate what kind of number it is, how it is stored in memory, how to handle
    it, and so on.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解内置 .NET 日期/时间类型的核心缺陷之一，可以想象，如果 .NET 团队没有为数字定义单独的类型，如 `int` (`System.Int32`)、`double`
    (`System.Double`) 和 `decimal` (`System.Decimal`)，而是只定义了一个名为 `System.Number` 的类型，并有一个名为
    `Kind` 的属性来指示它是哪种类型的数字，它在内存中的存储方式，如何处理它等等。
- en: That is what the team did with `System.DateTime`. That type has a `Kind` property
    that indicates if it is a local time, UTC time, or unspecified. It varies in behavior
    depending on how you treat it. This makes date/time values as implemented in .NET
    fundamentally tricky to work with and understand.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 那就是团队对 `System.DateTime` 类型所做的事情。该类型有一个 `Kind` 属性，指示它是否是本地时间、UTC 时间或未指定。它的行为会根据你如何处理它而有所不同。这使得在
    .NET 中实现的日期/时间值在操作和理解上非常复杂。
- en: '**More Information**: Jon Skeet, the creator of Noda Time, has a lot more to
    say about the limitations of date/time support in .NET and `DateTime`, specifically
    in a 2011 blog post found at the following link: [https://blog.nodatime.org/2011/08/what-wrong-with-datetime-anyway.html](https://blog.nodatime.org/2011/08/what-wrong-with-datetime-anyway.html)'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '**更多信息**: Noda Time 的创建者 Jon Skeet 在一篇 2011 年的博客文章中详细讨论了 .NET 和 `DateTime`
    对日期/时间支持的局限性，具体内容可以在以下链接找到：[https://blog.nodatime.org/2011/08/what-wrong-with-datetime-anyway.html](https://blog.nodatime.org/2011/08/what-wrong-with-datetime-anyway.html)'
- en: Important concepts and defaults in Noda Time
  id: totrans-374
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Noda Time 中的重要概念和默认值
- en: The built-in `DateTime` type stores both global and local values, or values
    that are unspecified. Unless treated with great care, this opens the door to subtle
    bugs and misunderstandings.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 内置的 `DateTime` 类型存储全局和本地值，或者未指定的值。除非非常小心地处理，否则这会打开细微的错误和误解的大门。
- en: The first big difference with Noda Time is that it forces you to make a choice
    at the type level. Noda Time, therefore, has more types and, at first, can seem
    more confusing. Types in Noda Time are global or local. Every person anywhere
    in the world would share the same global values at the same instant, whereas each
    person would have a different local value, depending on factors like their time
    zone.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Noda Time 的第一个重大区别在于，它强制你在类型级别做出选择。因此，Noda Time 有更多类型，并且一开始可能会显得更复杂。Noda Time
    中的类型是全球性的或本地的。世界上任何地方的每个人在同一个瞬间都会共享相同的全局值，而每个人会有不同的本地值，这取决于他们的时区等因素。
- en: The built-in date/time types in .NET are only accurate to the tick, which is
    about 100 nanoseconds. Noda Time is accurate to 1 nanosecond, 100 times more accurate.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: .NET 内置的日期/时间类型仅精确到 tick，大约是 100 纳秒。Noda Time 精确到 1 纳秒，比它精确 100 倍。
- en: The “zero” baseline in Noda Time is midnight at the start of 1 January 1970
    in the UTC time zone. The Noda Time `Instant` is the number of nanoseconds before
    (if a negative value) or since (if a positive value) that time and represents
    a point in time on the global timeline.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: Noda Time 的“零”基线是 1970 年 1 月 1 日午夜在 UTC 时区开始的时间。Noda Time 的 `Instant` 是从那时起（如果是一个负值）或到那时（如果是一个正值）的纳秒数，它代表全球时间线上的一个时间点。
- en: 'The default calendaring system in Noda Time is the ISO-8601 calendar because
    it is the standard, and you can read more about it at the following link: [https://en.wikipedia.org/wiki/ISO_8601](https://en.wikipedia.org/wiki/ISO_8601).
    Automatic conversions to other calendaring systems like Julian, Coptic, and Buddhist
    are supported.'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: Noda Time 的默认日历系统是 ISO-8601 日历，因为它是一个标准，你可以在以下链接中了解更多信息：[https://en.wikipedia.org/wiki/ISO_8601](https://en.wikipedia.org/wiki/ISO_8601)。支持自动转换为其他日历系统，如儒略、科普特和佛教日历。
- en: 'Noda Time has some common types that are like some .NET date/time types, as
    summarized in *Table 7.6*:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: Noda Time 有一些类似于某些 .NET 日期/时间类型的常见类型，总结如下 *表 7.6*：
- en: '| **Noda Time type** | **Description** |'
  id: totrans-381
  prefs: []
  type: TYPE_TB
  zh: '| **Noda Time 类型** | **描述** |'
- en: '| `Instant` struct | Represents an instant on the global timeline, with nanosecond
    resolution. |'
  id: totrans-382
  prefs: []
  type: TYPE_TB
  zh: '| `Instant` 结构体 | 表示全球时间线上的一个瞬间，具有纳秒级分辨率。 |'
- en: '| `Interval` struct | Two `Instant` values, an inclusive start and an exclusive
    end. |'
  id: totrans-383
  prefs: []
  type: TYPE_TB
  zh: '| `Interval` 结构体 | 两个 `Instant` 值，一个包含的起始点和一个排除的终点。 |'
- en: '| `LocalDateTime` struct | A date/time value in a particular calendaring system,
    but it does not represent a fixed point on the global timeline. For example, midnight
    on New Year’s Eve 2023 happens for different people in different time zones. If
    you do not know the user’s time zone, you will likely have to use this type. |'
  id: totrans-384
  prefs: []
  type: TYPE_TB
  zh: '| `LocalDateTime` 结构体 | 在特定日历系统中的日期/时间值，但它不表示全球时间线上的一个固定点。例如，2023 年除夕的午夜对不同时区的人来说是不同的。如果你不知道用户的时区，你可能会不得不使用此类型。
    |'
- en: '| `LocalDate` and `LocalTime` structs | Like `LocalDateTime` struct but only
    the date or time part. When prompting the user to enter date and time values,
    you often start with them separately and then combine them into a single `LocalDateTime`
    struct. |'
  id: totrans-385
  prefs: []
  type: TYPE_TB
  zh: '| `LocalDate` 和 `LocalTime` 结构体 | 与 `LocalDateTime` 结构体类似，但只有日期或时间部分。当提示用户输入日期和时间值时，你通常分别使用它们，然后将它们组合成一个单一的
    `LocalDateTime` 结构体。 |'
- en: '| `DateTimeZone` class | Represents a time zone. It is easy to convert from
    the .NET `TimeZoneInfo` using `BclDateTimeZone`. Use `DateTimeZoneProviders.Tzdb`
    to get a time zone, based on the standard names listed at the following link:
    [https://en.wikipedia.org/wiki/List_of_tz_database_time_zones](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
    |'
  id: totrans-386
  prefs: []
  type: TYPE_TB
  zh: '| `DateTimeZone` 类 | 表示时区。可以使用 `BclDateTimeZone` 从 .NET 的 `TimeZoneInfo` 转换，使用
    `DateTimeZoneProviders.Tzdb` 获取时区，基于以下链接中列出的标准名称：[https://en.wikipedia.org/wiki/List_of_tz_database_time_zones](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)
    |'
- en: '| `ZonedDateTime` struct | A date/time value in a particular calendaring system
    and in a specific time zone, so it does represent a fixed point on the global
    timeline. |'
  id: totrans-387
  prefs: []
  type: TYPE_TB
  zh: '| `ZonedDateTime` 结构体 | 在特定日历系统和特定时区中的日期/时间值，因此它确实代表全球时间线上的一个固定点。 |'
- en: '| `Offset` struct | Represents an offset. It is positive if the local time
    is ahead of UTC, and negative if the local time is behind UTC. |'
  id: totrans-388
  prefs: []
  type: TYPE_TB
  zh: '| `Offset` 结构体 | 表示偏移量。如果本地时间早于 UTC，则为正值；如果本地时间晚于 UTC，则为负值。 |'
- en: '| `OffsetDateTime` struct | You might know the offset from UTC, but that does
    not always cleanly map to a single time zone. This type should be used in this
    scenario instead of `ZonedDateTime`. |'
  id: totrans-389
  prefs: []
  type: TYPE_TB
  zh: '| `OffsetDateTime` 结构体 | 你可能知道从 UTC 的偏移量，但这并不总是干净地映射到一个单一时区。在这种情况下应使用此类型而不是
    `ZonedDateTime`。 |'
- en: '| `Duration` struct | A fixed number of nanoseconds. Has properties to convert
    to common time units like `Days`, `Hours`, `Minutes`, and `Seconds`, rounded down
    or up to zero because they return an `int`, and non-rounded properties like `TotalDays`,
    `TotalMinutes`, and so on, because they return a `double`. Used for calculations
    on `Instant` and `ZonedDateTime` values. Use this instead of the .NET `TimeSpan`
    type. |'
  id: totrans-390
  prefs: []
  type: TYPE_TB
  zh: '| `Duration` 结构体 | 表示固定数量的纳秒。具有转换为常用时间单位（如 `Days`、`Hours`、`Minutes` 和 `Seconds`）的属性，由于它们返回一个
    `int`，所以会向下或向上舍入到零，以及非舍入属性如 `TotalDays`、`TotalMinutes` 等，因为它们返回一个 `double`。用于对
    `Instant` 和 `ZonedDateTime` 值进行计算。使用此类型代替 .NET 的 `TimeSpan` 类型。 |'
- en: '| `Period` class | A variable duration because the “two months” represented
    by January and February 2024 are different lengths to the “two months” of June
    and July 2024, or even the “two months” represented by January and February in
    a non-leap year (2024 is a leap year, so February 2024 has 29 days). |'
  id: totrans-391
  prefs: []
  type: TYPE_TB
  zh: '| `Period` 类 | 可变持续时间，因为 2024 年 1 月和 2 月表示的“两个月”与 2024 年 6 月和 7 月的“两个月”或甚至非闰年（2024
    年是闰年，因此 2024 年 2 月有 29 天）表示的“两个月”长度不同。 |'
- en: 'Table 7.6: Common Noda Time types'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 表 7.6：常见的 Noda Time 类型
- en: '**Good Practice**: Use `Instant` to record the point in time when something
    happened. It is good for timestamps. It can then be represented to the user in
    their local time zone. Common types used to record a user-entered date/time value
    are the following: `ZonedDateTime`, `OffsetDateTime`, `LocalDateTime`, `LocalDate`,
    and `LocalTime`.'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：使用 `Instant` 记录某事发生的时间点。这对于时间戳很有用。然后可以将其表示为用户所在时区的本地时间。用于记录用户输入的日期/时间值的常见类型如下：`ZonedDateTime`、`OffsetDateTime`、`LocalDateTime`、`LocalDate`
    和 `LocalTime`。'
- en: Converting between Noda Time date/time types
  id: totrans-394
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Noda Time 日期/时间类型之间进行转换
- en: 'To summarize common ways to convert between Noda Time types, review the following
    non-exhaustive diagram:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 为了总结在 Noda Time 类型之间转换的常见方法，请查看以下非详尽图示：
- en: '![](img/B19587_07_03.png)'
  id: totrans-396
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19587_07_03.png)'
- en: 'Figure 7.3: Common ways to convert between Noda Time date/time types'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.3：在 Noda Time 日期/时间类型之间转换的常见方法
- en: Exploring Node Time in a console app
  id: totrans-398
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索控制台应用程序中的节点时间
- en: 'Let’s write some code:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写一些代码：
- en: Use your preferred code editor to add a new **Console App** / `console` project
    named `WorkingWithNodaTime` to the `Chapter07` solution.
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你喜欢的代码编辑器将一个新的 **控制台应用程序**/`console` 项目命名为 `WorkingWithNodaTime` 添加到 `Chapter07`
    解决方案中。
- en: 'In the project file, treat warnings as errors, then statically and globally
    import the `System.Console` class, and add a package reference for `NodaTime`,
    as shown in the following markup:'
  id: totrans-401
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在项目文件中，将警告视为错误，然后静态和全局导入 `System.Console` 类，并添加对 `NodaTime` 的包引用，如下面的标记所示：
- en: '[PRE74]'
  id: totrans-402
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Add a new class file named `Program.Helpers.cs`, and replace its contents,
    as shown in the following code:'
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为 `Program.Helpers.cs` 的新类文件，并替换其内容，如下面的代码所示：
- en: '[PRE75]'
  id: totrans-404
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'In `Program.cs`, delete the existing statements, add statements to get the
    current instant in time, and convert it to various Noda Time types, including
    UTC, a couple of time zones, and local time, as shown in the following code:'
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 文件中，删除现有的语句，添加语句以获取当前时间点，并将其转换为各种 Noda Time 类型，包括 UTC、几个时区和本地时间，如下面的代码所示：
- en: '[PRE76]'
  id: totrans-406
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Run the console app, and note the results, including that “local” time does
    not take into account any DST offset; for example, in my case, living in the UK,
    I must use the London time zone to get British Summer Time (10:21am), not “local”
    time (9:21am), as shown in the following output:'
  id: totrans-407
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行控制台应用程序，并注意结果，包括“本地”时间不考虑任何夏令时偏移；例如，在我的情况下，居住在英国，我必须使用伦敦时区来获取夏令时（上午 10:21），而不是“本地”时间（上午
    9:21），如下面的输出所示：
- en: '[PRE77]'
  id: totrans-408
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'In `Program.cs`, add statements to explore what can be done with periods of
    time, as shown in the following code:'
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 文件中，添加语句以探索如何使用时间段，如下面的代码所示：
- en: '[PRE78]'
  id: totrans-410
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Run the console app and note the results, including that at the time of running
    the console app on 1 June 2023, the modern .NET era has lasted 6 years, 11 months,
    and 4 days, the serialization format for the `Period` type, and how two periods
    can be compared and should be normalized before the comparison, as shown in the
    following output:'
  id: totrans-411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行控制台应用程序并注意结果，包括在 2023 年 6 月 1 日运行控制台应用程序时，现代 .NET 时代已经持续了 6 年 11 个月和 4 天，`Period`
    类型的序列化格式，以及如何比较两个时间段以及比较之前应该进行归一化，如下面的输出所示：
- en: '[PRE79]'
  id: totrans-412
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '**More Information**: Normalizing a `Period` with the `Normalize` method means
    multiplying any weeks by 7 and adding them to the number of days, then setting
    `Weeks` to zero, and other calculations. Learn more at the following link: [https://nodatime.org/3.1.x/api/NodaTime.Period.html#NodaTime_Period_Normalize](https://nodatime.org/3.1.x/api/NodaTime.Period.html#NodaTime_Period_Normalize)'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: '**更多信息**：使用 `Normalize` 方法归一化 `Period` 意味着将任何周数乘以 7 并加到天数上，然后将 `Weeks` 设置为零，以及其他计算。更多信息请参阅以下链接：[https://nodatime.org/3.1.x/api/NodaTime.Period.html#NodaTime_Period_Normalize](https://nodatime.org/3.1.x/api/NodaTime.Period.html#NodaTime_Period_Normalize)'
- en: Unit testing and JSON serialization with Noda Time
  id: totrans-414
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Noda Time 进行单元测试和 JSON 序列化
- en: Noda Time has two optional packages to write unit tests (`NodaTime.Testing`)
    and work with JSON.NET (`NodaTime.Serialization.JsonNet`).
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: Noda Time 有两个可选包用于编写单元测试（`NodaTime.Testing`）和与 JSON.NET 一起工作（`NodaTime.Serialization.JsonNet`）。
- en: 'The documentation for Noda Time is found at the following link: [https://nodatime.org/](https://nodatime.org/)'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: Noda Time 的文档可以在以下链接找到：[https://nodatime.org/](https://nodatime.org/)
- en: Practicing and exploring
  id: totrans-417
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习和探索
- en: Test your knowledge and understanding by answering some questions, getting some
    hands-on practice, and exploring the topics in this chapter with deeper research.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 通过回答一些问题、进行一些动手实践和更深入地研究本章主题来测试你的知识和理解。
- en: Exercise 7.1 – Test your knowledge
  id: totrans-419
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 7.1 – 测试你的知识
- en: 'Use the web to answer the following questions:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 使用网络回答以下问题：
- en: What is the difference between localization, globalization, and internationalization?
  id: totrans-421
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 本地化、全球化和国际化之间的区别是什么？
- en: What is the smallest measurement of time available in .NET?
  id: totrans-422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: .NET 中可用的最小时间度量是什么？
- en: How long is a “tick” in .NET?
  id: totrans-423
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 .NET 中，“滴答”的时间是多长？
- en: In what scenario might you use a `DateOnly` value instead of a `DateTime` value?
  id: totrans-424
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在什么场景下你可能使用 `DateOnly` 值而不是 `DateTime` 值？
- en: For a time zone, what does its `BaseUtcOffset` property tell you?
  id: totrans-425
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于一个时区，它的 `BaseUtcOffset` 属性告诉你什么？
- en: How can you get information about the local time zone in which your code executes?
  id: totrans-426
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何获取代码执行所在本地时区的信息？
- en: For a `DateTime` value, what does its `Kind` property tell you?
  id: totrans-427
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于一个 `DateTime` 值，它的 `Kind` 属性告诉你什么？
- en: How can you control the current culture for your executing code?
  id: totrans-428
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何控制执行代码的当前文化环境？
- en: What is the ISO culture code for Welsh?
  id: totrans-429
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 威尔士的 ISO 文化代码是什么？
- en: How do localization resource file fallbacks work?
  id: totrans-430
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 本地化资源文件回退是如何工作的？
- en: Exercise 7.2 – Explore topics
  id: totrans-431
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 7.2 – 探索主题
- en: 'Use the links on the following page to learn more details about the topics
    covered in this chapter:'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下页面上的链接了解本章涵盖主题的更多详细信息：
- en: '[https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-7---handling-dates-times-and-internationalization](https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-7---handling-dates-times-and-internationalization)'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-7---handling-dates-times-and-internationalization](https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-7---handling-dates-times-and-internationalization)'
- en: Exercise 7.3 – Learn from expert Jon Skeet
  id: totrans-434
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 7.3 – 向专家 Jon Skeet 学习
- en: 'Jon Skeet is a world-renowned expert on internationalization. Watch him present
    *Working with Time is Easy* at the following link: [https://www.youtube.com/watch?v=saeKBuPewcU](https://www.youtube.com/watch?v=saeKBuPewcU)'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: Jon Skeet 是国际化的世界知名专家。观看他在以下链接中展示的 *Working with Time is Easy*：[https://www.youtube.com/watch?v=saeKBuPewcU](https://www.youtube.com/watch?v=saeKBuPewcU)
- en: Summary
  id: totrans-436
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, you:'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你：
- en: Explored dates and times, including the .NET 8 `TimeProvider` to improve unit
    tests.
  id: totrans-438
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索了日期和时间，包括 .NET 8 的 `TimeProvider` 以改进单元测试。
- en: Learned how to handle time zones.
  id: totrans-439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学会了如何处理时区。
- en: Learned how to internationalize your code using globalization and localization.
  id: totrans-440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习了如何使用全球化和本地化来国际化你的代码。
- en: Explored some of the features of Noda Time.
  id: totrans-441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索了 Noda Time 的一些功能。
- en: In the next chapter, you will learn how to build web services using the ASP.NET
    Core Minimal API, and how to secure and protect them.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何使用 ASP.NET Core Minimal API 构建网络服务，以及如何确保和保护它们。
