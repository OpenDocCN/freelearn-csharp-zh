["```cs\npublic interface IComponent\n{\n    string Operation();\n}\n```", "```cs\npublic class ComponentA : IComponent\n{\n    public string Operation()\n    {\n        return \"Hello from ComponentA\";\n    }\n}\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddSingleton<IComponent, ComponentA>();\nvar app = builder.Build();\napp.MapGet(\"/\", (IComponent component) => component.Operation());\napp.Run();\n```", "```cs\nHello from ComponentA\n```", "```cs\npublic class DecoratorA : IComponent\n{\n    private readonly IComponent _component;\n    public DecoratorA(IComponent component)\n    {\n        _component = component ?? throw new ArgumentNullException(nameof(component));\n    }\n    public string Operation()\n    {\n        var result = _component.Operation();\n        return $\"<DecoratorA>{result}</DecoratorA>\";\n    }\n}\n```", "```cs\nbuilder.Services.AddSingleton<IComponent>(serviceProvider => new DecoratorA(new ComponentA()));\n```", "```cs\n<DecoratorA>Hello from ComponentA</DecoratorA>\n```", "```cs\npublic class DecoratorB : IComponent\n{\n    private readonly IComponent _component;\n    public DecoratorB(IComponent component)\n    {\n        _component = component ?? throw new ArgumentNullException(nameof(component));\n    }\n    public string Operation()\n    {\n        var result = _component.Operation();\n        return $\"<DecoratorB>{result}</DecoratorB>\";\n    }\n}\n```", "```cs\nbuilder.Services.AddSingleton<IComponent>(serviceProvider => new DecoratorB(new DecoratorA(new ComponentA())));\n```", "```cs\n<DecoratorB><DecoratorA>Hello from ComponentA</DecoratorA></DecoratorB>\n```", "```cs\ndotnet add package Scrutor\n```", "```cs\nbuilder.Services.AddSingleton<IComponent>(serviceProvider => new DecoratorB(new DecoratorA(new ComponentA())))\n```", "```cs\nbuilder.Services\n    .AddSingleton<IComponent, ComponentA>()\n    .Decorate<IComponent, DecoratorA>()\n    .Decorate<IComponent, DecoratorB>()\n;\n```", "```cs\nvar instance = new DecoratorB(new DecoratorA(new ComponentA()));\n```", "```cs\nnamespace Decorator.IntegrationTests;\n//...\n[Fact]\npublic async Task Should_return_a_double_decorated_string()\n{\n    // Arrange\n    var client = _webApplicationFactory.CreateClient();\n    // Act\n    var response = await client.GetAsync(\"/\");\n    // Assert\n    response.EnsureSuccessStatusCode();\n    var body = await response.Content.ReadAsStringAsync();\n    Assert.Equal(\n        \"Operation: <DecoratorB><DecoratorA>Hello from ComponentA</DecoratorA></DecoratorB>\",\n        body\n    );\n}\n```", "```cs\nnamespace Composite.Models;\npublic interface IComponent\n{\n    int Count { get; }\n    string Type { get; }\n}\n```", "```cs\nnamespace Composite.Models;\npublic class Book : IComponent\n{\n    public Book(string title)\n    {\n        Title = title ?? throw new ArgumentNullException(nameof(title));\n    }\n    public string Title { get; }\n    public string Type => \"Book\";\n    public int Count { get; } = 1;\n}\n```", "```cs\nusing System.Collections;\nusing System.Collections.ObjectModel;\nnamespace Composite.Models;\npublic abstract class BookComposite : IComponent\n{\n    protected readonly List<IComponent> children = new();\n    public BookComposite(string name)\n    {\n        Name = name ?? throw new ArgumentNullException(nameof(name));\n    }\n    public string Name { get; }\n    public virtual string Type => GetType().Name;\n    public virtual int Count \n        => children.Sum(child => child.Count);\n    public virtual IEnumerable Children \n        => new ReadOnlyCollection<IComponent>(children);\n    public virtual void Add(IComponent bookComponent)\n    {\n        children.Add(bookComponent);\n    }\n    public virtual void Remove(IComponent bookComponent)\n    {\n        children.Remove(bookComponent);\n    }\n}\n```", "```cs\nnamespace Composite.Models;\npublic class Corporation : BookComposite\n{\n    public Corporation(string name, string ceo)\n        : base(name)\n    {\n        CEO = ceo;\n    }\n    public string CEO { get; }\n}\n```", "```cs\nnamespace Composite.Models;\npublic class Store : BookComposite\n{\n    public string Location { get; }\n    public string Manager { get; }\n    public Store(string name, string location, string manager)\n        : base(name)\n    {\n        Location = location;\n        Manager = manager;\n    }\n}\n```", "```cs\npublic class Section : BookComposite\n{\n    public Section(string name) : base(name) { }\n}\n```", "```cs\nnamespace Composite.Models;\npublic class Set : BookComposite\n{\n    public Set(string name, params IComponent[] books)\n        : base(name)\n    {\n        foreach (var book in books)\n        {\n            Add(book);\n        }\n    }\n}\n```", "```cs\npublic interface ICorporationFactory\n{\n    Corporation Create();\n}\n```", "```cs\nusing Composite.Models;\nnamespace Composite.Services;\npublic class DefaultCorporationFactory : ICorporationFactory\n{\n    public Corporation Create()\n    {\n        var corporation = new Corporation(\n            \"Boundless Shelves Corporation\",\n            \"Bosmang Kapawu\"\n        );\n        corporation.Add(CreateTaleTowersStore());\n        corporation.Add(CreateEpicNexusStore());\n        return corporation;\n    }\n    // ...\n}\n```", "```cs\nprivate IComponent CreateTaleTowersStore()\n{\n    var store = new Store(\n        \"Tale Towers\",\n        \"125 Enchantment Street, Storyville, SV 72845\",\n        \"Malcolm Reynolds\"\n    );\n    store.Add(CreateFantasySection());\n    store.Add(CreateAdventureSection());\n    store.Add(CreateDramaSection());\n    return store;\n}\nprivate IComponent CreateEpicNexusStore()\n{\n    var store = new Store(\n        \"Epic Nexus\",\n        \"369 Parchment Plaza, Novelty, NV 68123\",\n        \"Ellen Ripley\"\n    );\n    store.Add(CreateFictionSection());\n    store.Add(CreateFantasySection());\n    store.Add(CreateAdventureSection());\n    return store;\n}\n```", "```cs\nprivate IComponent CreateFictionSection()\n{\n    var section = new Section(\"Fiction\");\n    section.Add(new Book(\"Some alien cowboy\"));\n    section.Add(CreateScienceFictionSection());\n    return section;\n}\n```", "```cs\nprivate IComponent CreateScienceFictionSection()\n{\n    var section = new Section(\"Science Fiction\");\n    section.Add(new Book(\"Some weird adventure in space\"));\n    section.Add(new Set(\n        \"Star Wars\",\n        new Set(\n            \"Prequel trilogy\",\n            new Book(\"Episode I: The Phantom Menace\"),\n            new Book(\"Episode II: Attack of the Clones\"),\n            new Book(\"Episode III: Revenge of the Sith\")\n        ),\n        new Set(\n            \"Original trilogy\",\n            new Book(\"Episode IV: A New Hope\"),\n            new Book(\"Episode V: The Empire Strikes Back\"),\n            new Book(\"Episode VI: Return of the Jedi\")\n        ),\n        new Set(\n            \"Sequel trilogy\",\n            new Book(\"Episode VII: The Force Awakens\"),\n            new Book(\"Episode VIII: The Last Jedi\"),\n            new Book(\"Episode IX: The Rise of Skywalker\")\n        )\n    ));\n    return section;\n}\n```", "```cs\nusing Composite.Services;\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddSingleton<ICorporationFactory, DefaultCorporationFactory>();\nvar app = builder.Build();\napp.MapGet(\n    \"/\",\n    (ICorporationFactory corporationFactory)\n        => corporationFactory.Create()\n);\napp.Run();\n```", "```cs\n{\n  \"ceo\": \"Bosmang Kapawu\",\n  \"name\": \"Boundless Shelves Corporation\",\n  \"type\": \"Corporation\",\n  \"count\": 43,\n  \"children\": [\n    {\n      \"location\": \"369 Parchment Plaza, Novelty, NV 68123\",\n      \"manager\": \"Ellen Ripley\",\n      \"name\": \"Epic Nexus\",\n      \"type\": \"Store\",\n      \"count\": 25,\n      \"children\": [\n        {\n          \"name\": \"Fiction\",\n          \"type\": \"Section\",\n          \"count\": 11,\n          \"children\": [\n            {\n              \"name\": \"Science Fiction\",\n              \"type\": \"Section\",\n              \"count\": 10,\n              \"children\": [\n                {\n                  \"name\": \"Star Wars\",\n                  \"type\": \"Set\",\n                  \"count\": 9,\n                  \"children\": [\n                    {\n                      \"name\": \"Prequel trilogy\",\n                      \"type\": \"Set\",\n                      \"count\": 3,\n                      \"children\": []\n                    },\n                    {\n                      \"name\": \"Original trilogy\",\n                      \"type\": \"Set\",\n                      \"count\": 3,\n                      \"children\": []\n                    },\n                    {\n                      \"name\": \"Sequel trilogy\",\n                      \"type\": \"Set\",\n                      \"count\": 3,\n                      \"children\": []\n                    }\n                  ]\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    }\n  ]\n}\n```", "```cs\npublic interface IGreeter\n{\n    string Greeting();\n}\npublic class ExternalGreeter\n{\n    public string GreetByName(string name)\n    {\n        return $\"Adaptee says: hi {name}!\";\n    }\n}\n```", "```cs\npublic class ExternalGreeterAdapter : IGreeter\n{\n    private readonly ExternalGreeter _adaptee;\n    public ExternalGreeterAdapter(ExternalGreeter adaptee)\n    {\n        _adaptee = adaptee ?? throw new ArgumentNullException(nameof(adaptee));\n    }\n    public string Greeting()\n    {\n        return _adaptee.GreetByName(\"ExternalGreeterAdapter\");\n    }\n}\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddSingleton<ExternalGreeter>();\nbuilder.Services.AddSingleton<IGreeter, ExternalGreeterAdapter>();\nvar app = builder.Build();\napp.MapGet(\"/\", (IGreeter greeter) => greeter.Greeting());\napp.Run();\n```", "```cs\n// An added interface for flexibility\npublic interface IOpaqueFacade\n{\n    string ExecuteOperationA();\n    string ExecuteOperationB();\n}\n// A hidden component\ninternal class ComponentA\n{\n    public string OperationA() => \"Component A, Operation A\";\n    public string OperationB() => \"Component A, Operation B\";\n}\n// A hidden component\ninternal class ComponentB\n{\n    public string OperationC() => \"Component B, Operation C\";\n    public string OperationD() => \"Component B, Operation D\";\n}\n// A hidden component\ninternal class ComponentC\n{\n    public string OperationE() => \"Component C, Operation E\";\n    public string OperationF() => \"Component C, Operation F\";\n}\n// The opaque façade using the other hidden components\npublic class OpaqueFacade : IOpaqueFacade\n{\n    private readonly ComponentA _componentA;\n    private readonly ComponentB _componentB;\n    private readonly ComponentC _componentC;\n    // Using constructor injection\n    internal OpaqueFacade(ComponentA componentA, ComponentB componentB, ComponentC componentC)\n    {\n        _componentA = componentA ?? throw new ArgumentNullException(nameof(componentA));\n        _componentB = componentB ?? throw new ArgumentNullException(nameof(componentB));\n        _componentC = componentC ?? throw new ArgumentNullException(nameof(componentC));\n    }\n    public string ExecuteOperationA()\n    {\n        return new StringBuilder()\n            .AppendLine(_componentA.OperationA())\n            .AppendLine(_componentA.OperationB())\n            .AppendLine(_componentB.OperationD())\n            .AppendLine(_componentC.OperationE())\n            .ToString();\n    }\n    public string ExecuteOperationB()\n    {\n        return new StringBuilder()\n            .AppendLine(_componentB.OperationC())\n            .AppendLine(_componentB.OperationD())\n            .AppendLine(_componentC.OperationF())\n            .ToString();\n    }\n}\n```", "```cs\npublic static class StartupExtensions\n{\n    public static IServiceCollection AddOpaqueFacadeSubSystem(this IServiceCollection services)\n    {\n        services.AddSingleton<IOpaqueFacade>(serviceProvider\n            => new OpaqueFacade(new ComponentA(), new ComponentB(), new ComponentC()));\n        return services;\n    }\n}\n```", "```cs\nnamespace TransparentFacadeSubSystem.Abstractions\n{\n    public interface ITransparentFacade\n    {\n        string ExecuteOperationA();\n        string ExecuteOperationB();\n    }\n    public interface IComponentA\n    {\n        string OperationA();\n        string OperationB();\n    }\n    public interface IComponentB\n    {\n        string OperationC();\n        string OperationD();\n    }\n    public interface IComponentC\n    {\n        string OperationE();\n        string OperationF();\n\n}\n```", "```cs\nnamespace TransparentFacadeSubSystem\n{\n    public class ComponentA : IComponentA\n    {\n        public string OperationA() => \"Component A, Operation A\";\n        public string OperationB() => \"Component A, Operation B\";\n}\n    public class ComponentB : IComponentB\n    {\n        public string OperationC() => \"Component B, Operation C\";\n        public string OperationD() => \"Component B, Operation D\";\n    }\n    public class ComponentC : IComponentC\n    {\n        public string OperationE() => \"Component C, Operation E\";\n        public string OperationF() => \"Component C, Operation F\";\n    }\n    public class TransparentFacade : ITransparentFacade\n    {\n        private readonly IComponentA _componentA;\n        private readonly IComponentB _componentB;\n        private readonly IComponentC _componentC;\n    public TransparentFacade(IComponentA componentA, IComponentB\ncomponentB, IComponentC componentC)\n    {\n        _componentA = componentA ?? throw new ArgumentNullException(nameof(componentA));\n        _componentB = componentB ?? throw new ArgumentNullException(nameof(componentB));\n        _componentC = componentC ?? throw new ArgumentNullException(nameof(componentC));\n    }\n        public string ExecuteOperationA()\n        {\n            return new StringBuilder()\n                .AppendLine(_componentA.OperationA())\n                .AppendLine(_componentA.OperationB())\n                .AppendLine(_componentB.OperationD())\n                .AppendLine(_componentC.OperationE())\n                .ToString();\n            }\n        public string ExecuteOperationB()\n        {\n            return new StringBuilder()\n                .AppendLine(_componentB.OperationC())\n                .AppendLine(_componentB.OperationD())\n                .AppendLine(_componentC.OperationF())\n                .ToString();\n        }\n    }\n}\n```", "```cs\npublic static class StartupExtensions\n{\n    public static IServiceCollection AddTransparentFacadeSubSystem(this IServiceCollection services)\n    {\n        services.AddSingleton<ITransparentFacade, TransparentFacade>();\n        services.AddSingleton<IComponentA, ComponentA>();\n        services.AddSingleton<IComponentB, ComponentB>();\n        services.AddSingleton<IComponentC, ComponentC>();\n        return services;\n    }\n}\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services\n    .AddOpaqueFacadeSubSystem()\n    .AddTransparentFacadeSubSystem()\n;\n```", "```cs\nvar app = builder.Build();\napp.MapGet(\n    \"/opaque/a\",\n    (IOpaqueFacade opaqueFacade)\n        => opaqueFacade.ExecuteOperationA()\n); \napp.MapGet(\n    \"/opaque/b\",\n    (IOpaqueFacade opaqueFacade)\n        => opaqueFacade.ExecuteOperationB()\n);\napp.MapGet(\n    \"/transparent/a\",\n    (ITransparentFacade transparentFacade)\n        => transparentFacade.ExecuteOperationA()\n);\napp.MapGet(\n    \"/transparent/b\",\n    (ITransparentFacade transparentFacade)\n        => transparentFacade.ExecuteOperationB()\n);\napp.Run();\n```", "```cs\nComponent A, Operation A\nComponent A, Operation B\nComponent B, Operation D\nComponent C, Operation E\n```", "```cs\nComponent B, Operation C\nComponent B, Operation D\nComponent C, Operation F\n```", "```cs\nComponent A, Operation A\nComponent A, Operation B\nComponent B, Operation D\nComponent C, Operation E\n```", "```cs\nComponent B, Operation C\nComponent B, Operation D\nComponent C, Operation F\n```", "```cs\nComponent B, Operation C\nComponent B, Operation D\nComponent C, Operation F\n```", "```cs\nFlexibility\nDesign Pattern\nComponent C, Operation F\n```", "```cs\nusing TransparentFacadeSubSystem.Abstractions;\nnamespace Facade;\npublic class UpdatedComponentB : IComponentB\n{\n    public string OperationC() => \"Flexibility\";\n    public string OperationD() => \"Design Pattern\";\n}\n```", "```cs\nbuilder.Services\n    .AddOpaqueFacadeSubSystem()\n    .AddTransparentFacadeSubSystem()\n    .AddSingleton<IComponentB, UpdatedComponentB>()\n;\n```"]