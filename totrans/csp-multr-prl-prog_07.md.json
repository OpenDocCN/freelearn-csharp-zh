["```cs\n        // Named method.\n        Parallel.For(0, i, DoWork);\n\n        // Anonymous method\n        Parallel.For(0, i, delegate(int j)\n        {\n            // Do Work.\n        });\n\n        // Lambda expression.\n        Parallel.For(0, i, j =>\n        {\n            // Do Work\n        });\n```", "```cs\n    Title=\"ParallelMath\" Height=\"350\" Width=\"525\">\n    ```", "```cs\n    int[] numbers = new int[10];\n    ```", "```cs\n                int[] numbers = new int[10];\n                numbers[0] = Convert.ToInt32(tb1.Text);\n                numbers[1] = Convert.ToInt32(tb2.Text);\n                numbers[2] = Convert.ToInt32(tb3.Text);\n                numbers[3] = Convert.ToInt32(tb4.Text);\n                numbers[4] = Convert.ToInt32(tb5.Text);\n                numbers[5] = Convert.ToInt32(tb6.Text);\n                numbers[6] = Convert.ToInt32(tb7.Text);\n                numbers[7] = Convert.ToInt32(tb8.Text);\n                numbers[8] = Convert.ToInt32(tb9.Text);\n                numbers[9] = Convert.ToInt32(tb10.Text);\n\n                Parallel.For(0, 9, CalculateNumbers);\n\n                tb1.Text = numbers[0].ToString();\n                tb2.Text = numbers[1].ToString();\n                tb3.Text = numbers[2].ToString();\n                tb4.Text = numbers[3].ToString();\n                tb5.Text = numbers[4].ToString();\n                tb6.Text = numbers[5].ToString();\n                tb7.Text = numbers[6].ToString();\n                tb8.Text = numbers[7].ToString();\n                tb9.Text = numbers[8].ToString();\n             tb10.Text = numbers[9].ToString();\n    ```", "```cs\n            private void CalculateNumbers(int i)\n            {\n                int j = numbers[i];\n                for (int k = 1; k <= 10; k++)\n                {\n                    j *= k;\n                }\n\n                numbers[i] = j;\n\n            }\n    ```", "```cs\nParallel.ForEach(dataCollection, item => DoWork(item));\n```", "```cs\n    using System.Threading.Tasks;\n    ```", "```cs\n    private int Count = 0;\n    // Number of bitmaps to break the original into and add to \n    // the list of bitmaps.\n    private List<Bitmap> BitmapList;\n            //List of bitmaps to use the ParallelForEach on.\n            Bitmap OriginalBitmap;\n    private String prsOldStarsCount = \"0\";\n    //Old stars count using a lock to protect thread safety.\n    ```", "```cs\n            private Bitmap CropBitmap(Bitmap proBitmap, Rectangle proRectangle)\n            {\n              // Create a new bitmap copying the portion of the \n              // original defined by proRectangle\n                // and keeping its PixelFormat\n                Bitmap loCroppedBitmap = proBitmap.Clone(proRectangle, proBitmap.PixelFormat);\n\n                return loCroppedBitmap;\n         }\n    ```", "```cs\n            private void ThreadOldStarsFinder(Bitmap loBitmap)\n            {\n                int liRow;                  // The pixel matrix (bitmap) row number (Y)\n                int liCol;                  // The pixel matrix (bitmap) col number (X)\n                Color loPixelColor;         // The pixel color\n\n                // Iterate through each pixel matrix (bitmap) rows\n                for (liRow = 0; liRow < loBitmap.Height; liRow++)\n                {\n                    // Iterate through each pixel matrix (bitmap) cols\n                    for (liCol = 0; liCol < loBitmap.Width; liCol++)\n                    {\n                        // Get the pixel Color for liCol and liRow\n                        loPixelColor = loBitmap.GetPixel(liCol, liRow);\n                        if (IsOldStar(loPixelColor))\n                        {\n                            // The color range corresponds to an old star\n                            // Change its color to a pure blue\n                            loBitmap.SetPixel(liCol, liRow, Color.Blue);\n\n                            lock (prsOldStarsCount)\n                            {\n                                int i = Convert.ToInt32(prsOldStarsCount);\n                                i = i + 1;\n                                prsOldStarsCount = i.ToString();\n                            }\n\n                        }\n                    }\n                }\n      }\n    ```", "```cs\n    private void ShowBitmapWithOldStars()\n            {\n                int liThreadNumber;\n                // Each bitmap portion\n                Bitmap loBitmap;\n                // The starting row in each iteration\n                int liStartRow = 0;\n\n                // Calculate each bitmap's height\n                int liEachBitmapHeight = ((int)(OriginalBitmap.Height / Count)) + 1;\n\n                // Create a new bitmap with the whole width and height\n                loBitmap = new Bitmap(OriginalBitmap.Width, OriginalBitmap.Height);\n                Graphics g = Graphics.FromImage((Image)loBitmap);\n                g.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;\n\n                for (liThreadNumber = 0; liThreadNumber < Count; liThreadNumber++)\n                {\n                    // Draw each portion in its corresponding absolute starting row\n                    g.DrawImage(BitmapList[liThreadNumber], 0, liStartRow);\n                    // Increase the starting row\n                    liStartRow += liEachBitmapHeight;\n                }\n                // Show the bitmap in the PictureBox picStarsBitmap\n                picStarsBitmap.Image = loBitmap;\n                //picStarsBitmap.Image.Save(\"c:\\\\packt\\\\resulting_image.png\", ImageFormat.Png);\n\n                tbCount.Text = prsOldStarsCount;\n\n                g.Dispose();\n        }\n    ```", "```cs\n    private void butFindOldStars_Click(object sender, EventArgs e)\n            {\n                Count = Convert.ToInt32(tbTasks.Text);\n                OriginalBitmap = new Bitmap(picStarsBitmap.Image);\n                BitmapList = new List<Bitmap>(Count);\n\n                int StartRow = 0;\n                int EachBitmapHeight = ((int)(OriginalBitmap.Height / Count)) + 1;\n\n                int HeightToAdd = OriginalBitmap.Height;\n                Bitmap loBitmap;\n\n                // Breakup the bitmap into a list of bitmaps.\n                for (int i = 0; i < Count; i++)\n                {\n\n                    if (EachBitmapHeight > HeightToAdd)\n                    {\n                        // The last bitmap height perhaps is less than the other bitmaps height\n                        EachBitmapHeight = HeightToAdd;\n                    }\n\n                    loBitmap = CropBitmap(OriginalBitmap, new Rectangle(0, StartRow, OriginalBitmap.Width, EachBitmapHeight));\n                    HeightToAdd -= EachBitmapHeight;\n                    StartRow += EachBitmapHeight;\n                    BitmapList.Add(loBitmap);               \n                }\n\n                //Iterate through the list of bitmaps with the Parallel.ForEach command.\n                Parallel.ForEach(BitmapList, item => ThreadOldStarsFinder(item));\n\n                ShowBitmapWithOldStars();\n        }\n    ```", "```cs\n            // Breakup the bitmap into a list of bitmaps.\n            for (int i = 0; i < Count; i++)\n            {\n                if (EachBitmapHeight > HeightToAdd)\n                {\n                    // The last bitmap height perhaps is less than \n                    // the other bitmaps height\n                    EachBitmapHeight = HeightToAdd;\n                }\n\n                loBitmap = CropBitmap(OriginalBitmap, new Rectangle(0, StartRow, OriginalBitmap.Width, EachBitmapHeight));\n                HeightToAdd -= EachBitmapHeight;\n                StartRow += EachBitmapHeight;\n                BitmapList.Add(loBitmap);               \n            }\n```", "```cs\nParallel.ForEach(BitmapList, item => ThreadOldStarsFinder(item));\n```", "```cs\nShowBitmapWithOldStars();\n```", "```cs\n            private void CalculateNumbers2(int i, ParallelLoopState pls)\n            {\n                int j = numbers[i];\n\n                if (i < 7)\n                {\n                    for (int k = 1; k <= 10; k++)\n                    {\n                        j *= k;\n                    }\n\n                    numbers[i] = j;\n                }\n\n                else\n                {\n                    pls.Stop();\n                    return;\n                }\n         }\n    ```", "```cs\n    Parallel.For(0, 9, CalculateNumbers2);\n    ```", "```cs\npls.Stop();\n```", "```cs\n    using System.Collections.Concurrent;\n    ```", "```cs\n    ConcurrentQueue<Exception> exceptions = new ConcurrentQueue<Exception>();\n    ```", "```cs\n            private void CalculateNumbers3(int i, ParallelLoopState pls)\n            {\n                int j = numbers[i];\n\n                try\n                {\n                    for (int k = 1; k <= 10; k++)\n                    {\n                        j *= k;\n\n                        if (j > 5000000) throw new ArgumentException(String.Format(\"The value of text box {0} is {1}. \", i, j));\n                    }\n                }\n                catch(Exception e)\n                {\n                    exceptions.Enqueue(e);\n                }\n\n                numbers[i] = j;\n\n        }\n    ```", "```cs\n                try\n                {\n                    Parallel.For(0, 10, CalculateNumbers3);\n\n                    if (exceptions.Count > 0) throw new AggregateException(exceptions);\n                }\n\n                catch (AggregateException ae)\n                {\n                    // This is where you can choose which exceptions to handle. \n                    foreach (var ex in ae.InnerExceptions)\n                    {\n                        if (ex is ArgumentException)\n                        {\n                            tbMessages.Text += ex.Message;\n                            tbMessages.Text += \"\\r\\n\";\n                        }\n                        else\n                            throw ex;\n                    }\n         }\n    ```", "```cs\nConcurrentQueue<Exception> exceptions = new ConcurrentQueue<Exception>();\n```", "```cs\nif (j > 5000000) throw new ArgumentException(String.Format(\"The value of text box {0} is {1}. \", i, j));\n```", "```cs\n            catch(Exception e)\n            {\n                exceptions.Enqueue(e);\n            }\n```", "```cs\n           try\n            {\n                Parallel.For(0, 10, CalculateNumbers3);\n\n                if (exceptions.Count > 0) throw new AggregateException(exceptions);\n            }\n\n            catch (AggregateException ae)\n            {\n                // This is where you can choose which exceptions to handle. \n                foreach (var ex in ae.InnerExceptions)\n                {\n                    if (ex is ArgumentException)\n                    {\n                        tbMessages.Text += ex.Message;\n                        tbMessages.Text += \"\\r\\n\";\n                    }\n                    else\n                        throw ex;\n                }\n            }\n```", "```cs\nForEach<TSource, TLocal>(IEnumerable<TSource>, Func<TLocal>, Func<TSource, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)\n```", "```cs\n    using System.Threading;\n    ```", "```cs\n    long total = 0;\n    ```", "```cs\n    //Parallel.For(0, 10, CalculateNumbers3);\n    ```", "```cs\n                    Parallel.For<long>(0, 10, \n                                () => 0,\n                                (i, loop, subtotal) => \n                                {\n                                    int j = numbers[i];\n                                    for (int k = 1; k <= 10; k++)\n                                    {\n                                        j *= k;\n                                    }\n\n                                    numbers[i] = j;\n                                    subtotal += j;\n                                    return subtotal; \n                                },\n                                (finalResult) => Interlocked.Add(ref total, finalResult)\n                             );\n    ```", "```cs\n    tbSum.Text = total.ToString();\n    ```", "```cs\n                Parallel.For<long>(0, 10, \n                            () => 0,\n                            (i, loop, subtotal) => \n                            {\n                                int j = numbers[i];\n                                for (int k = 1; k <= 10; k++)\n                                {\n                                    j *= k;\n                                }\n\n                                numbers[i] = j;\n                                subtotal += j;\n                                return subtotal; \n                            },\n                            (finalResult) => Interlocked.Add(ref total, finalResult)\n                            );\n```", "```cs\n(i, loop, subtotal) => \n                            {\n                                int j = numbers[i];\n                                for (int k = 1; k <= 10; k++)\n                                {\n                                    j *= k;\n                                }\n\n                                numbers[i] = j;\n                                subtotal += j;\n                                return subtotal; \n                            }\n```", "```cs\n() => 0\n```", "```cs\n(finalResult) => Interlocked.Add(ref total, finalResult)\n```"]