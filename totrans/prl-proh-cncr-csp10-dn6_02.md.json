["```cs\nConsole.WriteLine(\"Hello, World!\");\n```", "```cs\nvar bgThread = new Thread(() =>\n```", "```cs\n{\n```", "```cs\n    while (true)\n```", "```cs\n    {\n```", "```cs\n        bool isNetworkUp = System.Net.NetworkInformation\n```", "```cs\n            .NetworkInterface.GetIsNetworkAvailable();\n```", "```cs\n        Console.WriteLine($\"Is network available? Answer: \n```", "```cs\n            {isNetworkUp}\");\n```", "```cs\n        Thread.Sleep(100);\n```", "```cs\n    }\n```", "```cs\n});\n```", "```cs\nbgThread.IsBackground = true;\n```", "```cs\nbgThread.Start();\n```", "```cs\nfor (int i = 0; i < 10; i++)\n```", "```cs\n{\n```", "```cs\n    Console.WriteLine(\"Main thread working...\");\n```", "```cs\n    Task.Delay(500);\n```", "```cs\n}\n```", "```cs\nConsole.WriteLine(\"Done\");\n```", "```cs\nConsole.ReadKey();\n```", "```cs\n    bgThread.IsBackground = true;\n    ```", "```cs\nbgThread.IsBackground = true;\n```", "```cs\nConsole.WriteLine(\"Hello, World!\");\n```", "```cs\nvar bgThread = new Thread((object? data) =>\n```", "```cs\n{\n```", "```cs\n    if (data is null) return;\n```", "```cs\n    int counter = 0;\n```", "```cs\nvar result = int.TryParse(data.ToString(), \n```", "```cs\n        out int maxCount);\n```", "```cs\n    if (!result) return;\n```", "```cs\n    while (counter < maxCount)\n```", "```cs\n    {\n```", "```cs\n        bool isNetworkUp = System.Net.NetworkInformation\n```", "```cs\n            .NetworkInterface.GetIsNetworkAvailable();\n```", "```cs\n        Console.WriteLine($\"Is network available? Answer: \n```", "```cs\n            {isNetworkUp}\");\n```", "```cs\n        Thread.Sleep(100);\n```", "```cs\n        counter++;\n```", "```cs\n    }\n```", "```cs\n});\n```", "```cs\nbgThread.IsBackground = true;\n```", "```cs\nbgThread.Start(12);\n```", "```cs\nfor (int i = 0; i < 10; i++)\n```", "```cs\n{\n```", "```cs\n    Console.WriteLine(\"Main thread working...\");\n```", "```cs\n    Task.Delay(500);\n```", "```cs\n}\n```", "```cs\nConsole.WriteLine(\"Done\");\n```", "```cs\nConsole.ReadKey();\n```", "```cs\nvar currentThread = System.Threading.Thread.CurrentThread;\n```", "```cs\nConsole.WriteLine(\"Hello, World!\");\n```", "```cs\nvar bgThread = new Thread((object? data) =>\n```", "```cs\n{\n```", "```cs\n    if (data is null) return;\n```", "```cs\n    int counter = 0;\n```", "```cs\n    var result = int.TryParse(data.ToString(), out int \n```", "```cs\n        maxCount);\n```", "```cs\n    if (!result) return;\n```", "```cs\n    while (counter < maxCount)\n```", "```cs\n    {\n```", "```cs\n        bool isNetworkUp = System.Net.NetworkInformation.\n```", "```cs\n            NetworkInterface.GetIsNetworkAvailable();\n```", "```cs\n        Console.WriteLine($\"Is network available? Answer: \n```", "```cs\n             {isNetworkUp}\");\n```", "```cs\n        Thread.Sleep(10);\n```", "```cs\n        counter++;\n```", "```cs\n    }\n```", "```cs\n});\n```", "```cs\nbgThread.Start(12);\n```", "```cs\nfor (int i = 0; i < 12; i++)\n```", "```cs\n{\n```", "```cs\n    Console.WriteLine(\"Main thread working...\");\n```", "```cs\n    Thread.Sleep(100);\n```", "```cs\n}\n```", "```cs\nConsole.WriteLine(\"Done\");\n```", "```cs\nConsole.ReadKey();\n```", "```cs\n...\n```", "```cs\nMonitor.Enter(order);\n```", "```cs\norder.AddDetails(orderDetail);\n```", "```cs\nMonitor.Exit(order);\n```", "```cs\n...\n```", "```cs\nprivate static Mutex orderMutex = new Mutex();\n```", "```cs\n...\n```", "```cs\norderMutex.WaitOne();\n```", "```cs\norder.AddDetails(orderDetail);\n```", "```cs\norderMutex.ReleaseMutex();\n```", "```cs\n...\n```", "```cs\norderMutex.WaitOne(500);\n```", "```cs\npublic class ContactListManager\n```", "```cs\n{\n```", "```cs\n    private readonly List<Contact> contacts;\n```", "```cs\n    private readonly ReaderWriterLockSlim contactLock = \n```", "```cs\n        new ReaderWriterLockSlim();\n```", "```cs\n    public ContactListManager(\n```", "```cs\n        List<Contact> initialContacts)\n```", "```cs\n    {\n```", "```cs\n        contacts = initialContacts;\n```", "```cs\n    }\n```", "```cs\n    public void AddContact(Contact newContact)\n```", "```cs\n    {\n```", "```cs\n        try\n```", "```cs\n        {\n```", "```cs\n            contactLock.EnterWriteLock();\n```", "```cs\n            contacts.Add(newContact);\n```", "```cs\n        }\n```", "```cs\n        finally\n```", "```cs\n        {\n```", "```cs\n            contactLock.ExitWriteLock();\n```", "```cs\n        }\n```", "```cs\n    }\n```", "```cs\n    public Contact GetContactByPhoneNumber(string \n```", "```cs\n        phoneNumber)\n```", "```cs\n    {\n```", "```cs\n        try\n```", "```cs\n        {\n```", "```cs\n            contactLock.EnterReadLock();\n```", "```cs\n            return contacts.FirstOrDefault(x => \n```", "```cs\n                x.PhoneNumber == phoneNumber);\n```", "```cs\n        }\n```", "```cs\n        finally\n```", "```cs\n        {\n```", "```cs\n            contactLock.ExitReadLock();\n```", "```cs\n        }\n```", "```cs\n    }\n```", "```cs\n}\n```", "```cs\ncontacts.EnterWriteLock(1000);\n```", "```cs\n    public void CheckNetworkStatus(object data)\n    {\n        for (int i = 0; i < 12; i++)\n        {\n            bool isNetworkUp = System.Net.\n                NetworkInformation.NetworkInterface\n                    .GetIsNetworkAvailable();\n            Console.WriteLine($\"Thread priority \n                {(string)data}; Is network available? \n                    Answer: {isNetworkUp}\");\n            i++;\n        }\n    }\n    ```", "```cs\n    using BackgroundPingConsoleApp_sched;\n    Console.WriteLine(\"Hello, World!\");\n    var networkingWork = new NetworkingWork();\n    var bgThread1 = new \n        Thread(networkingWork.CheckNetworkStatus);\n    var bgThread2 = new \n        Thread(networkingWork.CheckNetworkStatus);\n    var bgThread3 = new \n        Thread(networkingWork.CheckNetworkStatus);\n    var bgThread4 = new \n        Thread(networkingWork.CheckNetworkStatus);\n    var bgThread5 = new \n        Thread(networkingWork.CheckNetworkStatus);\n    bgThread1.Priority = ThreadPriority.Lowest;\n    bgThread2.Priority = ThreadPriority.BelowNormal;\n    bgThread3.Priority = ThreadPriority.Normal;\n    bgThread4.Priority = ThreadPriority.AboveNormal;\n    bgThread5.Priority = ThreadPriority.Highest;\n    bgThread1.Start(\"Lowest\");\n    bgThread2.Start(\"BelowNormal\");\n    bgThread3.Start(\"Normal\");\n    bgThread4.Start(\"AboveNormal\");\n    bgThread5.Start(\"Highest\");\n    for (int i = 0; i < 10; i++)\n    {\n        Console.WriteLine(\"Main thread working...\");\n    }\n    Console.WriteLine(\"Done\");\n    Console.ReadKey();\n    ```", "```cs\n    public void CheckNetworkStatus(object data)\n    {\n        var cancelToken = (CancellationToken)data;\n        while (!cancelToken.IsCancellationRequested)\n        {\n            bool isNetworkUp = System.Net\n                .NetworkInformation.NetworkInterface\n                    .GetIsNetworkAvailable();\n            Console.WriteLine($\"Is network available? \n                Answer: {isNetworkUp}\");\n        }\n    }\n    ```", "```cs\n    var pingThread = new \n        Thread(networkingWork.CheckNetworkStatus);\n    var ctSource = new CancellationTokenSource();\n    pingThread.Start(ctSource.Token);\n    ...\n    ```", "```cs\n    for (int i = 0; i < 10; i++)\n    {\n        Console.WriteLine(\"Main thread working...\");\n        Thread.Sleep(100);\n    }\n    ```", "```cs\n    ...\n    ctSource.Cancel();\n    pingThread.Join();\n    ctSource.Dispose();\n    ```", "```cs\npublic void CheckNetworkStatus2(object data)\n```", "```cs\n{\n```", "```cs\n    bool finish = false;\n```", "```cs\n    var cancelToken = (CancellationToken)data;\n```", "```cs\n    cancelToken.Register(() => {\n```", "```cs\n        // Clean up and end pending work\n```", "```cs\n        finish = true;\n```", "```cs\n    });\n```", "```cs\n    while (!finish)\n```", "```cs\n    {\n```", "```cs\n        bool isNetworkUp = System.Net.NetworkInformation\n```", "```cs\n            .NetworkInterface.GetIsNetworkAvailable();\n```", "```cs\n        Console.WriteLine($\"Is network available? Answer: \n```", "```cs\n            {isNetworkUp}\");\n```", "```cs\n    }\n```", "```cs\n}\n```"]