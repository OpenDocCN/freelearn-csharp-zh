- en: '11'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Car Sharing App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Car Sharing app was introduced in [*Chapter 2*](Chapter_2.xhtml#_idTextAnchor038),
    *Demystifying Microservices Applications*. Regardless of the technology used to
    implement it, any microservice is either processing a user interface request,
    processing a message from another microservice, or streaming a result to the communication
    bus defined for the solution. Therefore, we decided to dedicate a chapter to provide
    you with more details about it. The idea of putting the description of the entire
    solution into one chapter is to help you better understand the principles that
    we have covered throughout the book. Let’s now understand the general architecture
    of the app.
  prefs: []
  type: TYPE_NORMAL
- en: General architecture description
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The application that we will describe in more detail in this chapter is the
    Car Sharing app. The following figure presents the entire solution and the microservices
    involved in enabling the solution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.1: Car Sharing app](img/B31916_11_1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.1: Car Sharing app'
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 7*](Chapter_7.xhtml#_idTextAnchor151), *Microservices in Practice*,
    we described some messages of this demo that are exchanged between the microservices.
    All classes that implement these messages are included in the `SharedMessages`
    library project presented in the demo code. It is important to mention that all
    microservices must add this library to facilitate communication between the services.
    It is also worth noting that RabbitMQ is the message broker defined for this demonstration,
    which has already been presented in the book.
  prefs: []
  type: TYPE_NORMAL
- en: Microservices involved
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you can see in the preceding figure, there are five microservices designed
    to demonstrate the solution. There is also a service that simply deploys the user
    interface using Blazor as the basis (Blazor UI). Its purpose is to host the user
    interface that interacts with the following microservices via HTTP and RabbitMQ
    where applicable.
  prefs: []
  type: TYPE_NORMAL
- en: Authorization microservice
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In [*Chapter 10*](Chapter_10.xhtml#_idTextAnchor297), *Security and Observability
    for Serverless and Microservices Applications*, we discussed the importance of
    implementing security with different layers of protection. The **Authorization**
    microservice is one of these layers, and it handles user logins and bearer token
    emissions. It also contains user information. It intercepts the route extension-accepted
    message of each car sharer and allows the users whose requests were accepted to
    access the car-sharer profile. The user who needs to car share can access the
    user profile of a car sharer who accepted their request by providing the route
    ID of the route it was accepted in.
  prefs: []
  type: TYPE_NORMAL
- en: 'To implement this, the ASP.NET Core Web API was used. The same bearer token
    will be required for all endpoints. These are the endpoints proposed for this
    microservice:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Login** – Accepts credentials and returns a JWT'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Renew** – Accepts a token and returns a renewed JWT'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Change Password** – Accepts current and new passwords to update user credentials'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reset Password** – Sends a temporary password to the user’s email'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Add User** – Registers a new user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User Profile** – Provides user’s email and name for matched car-sharing trips'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The purpose of managing user login, password updates, and token generation is
    common to all applications. It is worth noting that, in the real world, many solutions
    will decide to have this service done by **identity providers** from Microsoft,
    Google, or Meta.
  prefs: []
  type: TYPE_NORMAL
- en: CarSharer microservice
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **CarSharer** microservice interacts with the Blazor UI and contains the
    web API that implements all car-sharer operations. The car sharer inserts an initial
    route containing their departure and destination towns and possible intermediary
    towns.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, they receive possible matchings with car-sharing requests by the `RoutesPlanning`
    microservice. Accordingly, it shows all possible extensions, and the car sharer
    can reject or accept each extension. They can also close the route, meaning they
    reach an acceptable number of people for the trip. Here, you have the routes imagined
    for the scenario of this sample:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Create Route** – Creates a new route with the date and all towns’ milestones'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Delete Route** – Removes a specific route'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Close Route** – Closes a route to prevent further matching'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Extend Route** – Accepts user requests to an existing route'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Get Suggested Extensions** – Lists compatible ride requests for a route'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Get Active Routes** – Lists all active (not expired or deleted) routes for
    a specific user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Considering this is essentially a CRUD operation, this microservice can be implemented
    using Azure Functions, as we discussed in [*Chapter 4*](Chapter_4.xhtml#_idTextAnchor105),
    *Azure Functions and Triggers Available*.
  prefs: []
  type: TYPE_NORMAL
- en: CarRequests microservice
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The **CarRequests** microservice also interacts with the Blazor UI. It contains
    the web API that implements all car ride request operations. Requests to go from
    a source to a destination are inserted by the user. Then, the user can verify
    whether a car sharer inserted their request in their request. When a car sharer
    accepts the request, no other car sharer can select it, so just one option is
    handled. We assume that the user automatically accepts the car-sharer proposal.
    Here, we have the endpoints for this implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Add New Request** – Inserts a ride request with source, destination, and
    date. It is important to have confirmation of whether the request has been registered
    or not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Get My Requests** – Lists active requests with matching car-sharer options.
    Matching routes also contain the car owner’s details, which can be used to get
    user information from the authentication server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Azure Functions technology here is, again, a good option.
  prefs: []
  type: TYPE_NORMAL
- en: RoutesPlanning microservice
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **RoutesPlanning** microservice matches car-sharer routes with car requests
    according to a distance minimization criterion. Its behavior is fully described
    in [*Chapter 7*](Chapter_7.xhtml#_idTextAnchor151), *Microservices in Practice*,
    and the technology used here is the ASP.NET Core Web API. To facilitate the understanding,
    the code that implements it is also available in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Email microservice
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To finish, the **Email** microserviceintercepts the route extension-accepted
    event emitted by a car sharer and informs all users included in the route that
    they were included via email. It works in the background, as we checked some implementations
    in [*Chapter 5*](Chapter_5.xhtml#_idTextAnchor122), *Background Functions in Practice*.
    The route extension-accepted event emitted contains `UserBasicInfoMessage`, where
    the user’s `DisplayName` in the example is supposed to be the email. These are
    the functions that will be executed in this microservice:'
  prefs: []
  type: TYPE_NORMAL
- en: Listen to the `RouteExtensionAccepted` event and enqueue a request for sending
    an email
  prefs: []
  type: TYPE_NORMAL
- en: Process email, which is the routine that will dequeue the requests and send
    the email
  prefs: []
  type: TYPE_NORMAL
- en: The Azure Functions technology will be also used in this case. The idea of the
    microservice is not to have the processing of the emails attached directly to
    the listening event. That is why a queue is being used.
  prefs: []
  type: TYPE_NORMAL
- en: The demonstration code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can find the sample code for this chapter at [https://github.com/PacktPublishing/Practical-Serverless-and-Microservices-with-Csharp/tree/main/ch11](https://github.com/PacktPublishing/Practical-Serverless-and-Microservices-with-Csharp/tree/main/ch11).
    This chapter will require, at least, the Visual Studio 2022 free *Community Edition*.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that the provided code is not fully functional. You, as the reader,
    are encouraged to further develop it. Its main purpose is to offer a foundation
    for implementing different microservice approaches in a specific use case.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table summarizes the list of microservices proposed:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Microservice** | **Technology** | **Key Responsibility** | **API/Event
    Highlights** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Authorization` | ASP.NET Core Web API | Manage user auth and profiles |
    `Login`, `Renew`, `AddUser`, `GetProfile` |'
  prefs: []
  type: TYPE_TB
- en: '| `CarSharer` | Azure Functions | Manage car owner routes | `CreateRoute`,
    `ExtendRoute`, `GetSuggestions` |'
  prefs: []
  type: TYPE_TB
- en: '| `CarRequest` | Azure Functions | Manage ride requests from users | `AddRequest`,
    `GetRequests` |'
  prefs: []
  type: TYPE_TB
- en: '| `RoutesPlanning` | ASP.NET Core Web API | Suggest optimal route-request matches
    | Event-driven logic, covered in [*Chapter 7*](Chapter_7.xhtml#_idTextAnchor151)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Email` | Azure Functions | Notify users via email | `RouteExtensionAccepted`
    → Queue → Email |'
  prefs: []
  type: TYPE_TB
- en: 'A SQL instance accepts TCP/IP requests and user/password authentication since
    it must communicate with clients running inside Docker containers. Please note
    that the SQL instance that comes with the Visual Studio installation doesn’t support
    TCP/IP, so you need either to install SQL Server Express or use a cloud instance.
    For local installation, both the installer and instructions are available here:
    [https://www.microsoft.com/en-US/download/details.aspx?id=104781](https://www.microsoft.com/en-US/download/details.aspx?id=104781).
    You may also run the SQL Server development edition as a Docker image with the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The username corresponding to the chosen password will be `sa`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To run Docker, use **Docker Desktop** for Windows ([https://www.docker.com/products/docker-desktop](https://www.docker.com/products/docker-desktop)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Docker Desktop**, in turn, requires **Windows Subsystem for Linux** (**WSL**),
    which can be installed by following these steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `powershell` in the Windows 10/11 search bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When Windows PowerShell is proposed as a search result, click on **Run as an
    administrator**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Windows PowerShell administrative console that appears, run the `wsl
    --install` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following figure shows how the code structure is organized:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.2: Car Sharing app code structure](img/B31916_11_2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.2: Car Sharing app code structure'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, there is a `Common` library that shares messages that will be
    transferred between the microservices. `Authorization` and `RoutesPlanning` were
    written using web API microservices while `CarRequests`, `CarSharer`, and `Email`
    were written using Azure Functions as the basis. That is why we showed both possibilities
    during the presentation of the book. According to what we have presented, depending
    on the complexity of the microservices and the real need of the business rules,
    we can choose between one of these alternatives for creating distributed applications.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have presented a detailed demonstration of an event-driven
    application using microservices as the basis for connecting each message that
    is transferred from frontend to backend. We hope that this demo will help you
    better understand all the principles that we have presented throughout the book.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Cloud design patterns: [https://learn.microsoft.com/en-us/azure/architecture/patterns/](https://learn.microsoft.com/en-us/azure/architecture/patterns/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Event-driven application: [https://learn.microsoft.com/en-us/azure/architecture/guide/architecture-styles/event-driven](https://learn.microsoft.com/en-us/azure/architecture/guide/architecture-styles/event-driven)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Join our community on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/PSMCSharp](https://packt.link/PSMCSharp)'
  prefs: []
  type: TYPE_NORMAL
- en: '![A qr code with black squares  AI-generated content may be incorrect.](img/B31916_Discord-QR-Code.png)'
  prefs: []
  type: TYPE_IMG
