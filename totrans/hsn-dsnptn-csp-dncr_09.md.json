["```cs\npublic class User\n{\n    public Guid Id { get; set; }\n    public string UserName { get; set; }\n    public string EmailId { get; set; }\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n    public byte[] PasswordHash { get; set; }\n    public byte[] PasswordSalt { get; set; }\n    public string SecretKey { get; set; }\n    public string Mobile { get; set; }\n    public string EmailToken { get; set; }\n    public DateTime EmailTokenDateTime { get; set; }\n    public string OTP { get; set; }\n    public DateTime OtpDateTime { get; set; }\n    public bool IsMobileVerified { get; set; }\n    public bool IsEmailVerified { get; set; }\n    public bool IsActive { get; set; }\n    public string Image { get; set; }\n}\n```", "```cs\npublic class LoginViewModel\n{\n    [Required]\n    public string Username { get; set; }\n    [Required]\n    [DataType(DataType.Password)]\n    public string Password { get; set; }\n    [Display(Name = \"Remember Me\")]\n    public bool RememberMe { get; set; }\n    public string ReturnUrl { get; set; }\n}\n```", "```cs\npublic class UserManager : IUserManager\n{\n    private readonly InventoryContext _context;\n\n    public UserManager(InventoryContext context) => _context = context;\n\n    public bool Add(User user, string userPassword)\n    {\n        var newUser = CreateUser(user, userPassword);\n        _context.Users.Add(newUser);\n        return _context.SaveChanges() > 0;\n    }\n\n    public bool Login(LoginViewModel authRequest) => FindBy(authRequest) != null;\n\n    public User GetBy(string userId) => _context.Users.Find(userId);\n```", "```cs\n   public User FindBy(LoginViewModel authRequest)\n    {\n        var user = Get(authRequest.Username).FirstOrDefault();\n        if (user == null) throw new ArgumentException(\"You are not registered with us.\");\n        if (VerifyPasswordHash(authRequest.Password, user.PasswordHash, user.PasswordSalt)) return user;\n        throw new ArgumentException(\"Incorrect username or password.\");\n    }\n    public IEnumerable<User> Get(string searchTerm, bool isActive = true)\n    {\n        return _context.Users.Where(x =>\n            x.UserName == searchTerm.ToLower() || x.Mobile == searchTerm ||\n            x.EmailId == searchTerm.ToLower() && x.IsActive == isActive);\n    }\n\n    ...\n}\n```", "```cs\n<form asp-action=\"Login\" asp-route-returnurl=\"@Model.ReturnUrl\">\n    <div asp-validation-summary=\"ModelOnly\" class=\"text-danger\"></div>\n\n    <div class=\"form-group\">\n        <label asp-for=\"Username\" class=\"control-label\"></label>\n        <input asp-for=\"Username\" class=\"form-control\" />\n        <span asp-validation-for=\"Username\" class=\"text-danger\"></span>\n    </div>\n\n    <div class=\"form-group\">\n        <label asp-for=\"Password\" class=\"control-label\"></label>\n        <input asp-for=\"Password\" class=\"form-control\"/>\n        <span asp-validation-for=\"Password\" class=\"text-danger\"></span>\n    </div>\n\n    <div class=\"form-group\">\n        <label asp-for=\"RememberMe\" ></label>\n        <input asp-for=\"RememberMe\" />\n        <span asp-validation-for=\"RememberMe\"></span>\n    </div>\n    <div class=\"form-group\">\n        <input type=\"submit\" value=\"Login\" class=\"btn btn-primary\" />\n    </div>\n</form>\n```", "```cs\n[HttpGet]\npublic IActionResult Login(string returnUrl = \"\")\n{\n    var model = new LoginViewModel { ReturnUrl = returnUrl };\n    return View(model);\n}\n```", "```cs\n[HttpPost]\npublic IActionResult Login(LoginViewModel model)\n{\n    if (ModelState.IsValid)\n    {\n        var result = _authManager.Login(model);\n\n        if (result)\n        {\n           return !string.IsNullOrEmpty(model.ReturnUrl) && Url.IsLocalUrl(model.ReturnUrl)\n                ? (IActionResult)Redirect(model.ReturnUrl)\n                : RedirectToAction(\"Index\", \"Home\");\n        }\n    }\n    ModelState.AddModelError(\"\", \"Invalid login attempt\");\n    return View(model);\n}\n```", "```cs\n<li class=\"nav-item\">\n    @{\n        if (AuthManager.IsAuthenticated)\n        {\n            <a class=\"nav-link text-dark\" asp-area=\"\" asp-controller=\"Account\" asp-action=\"Logout\"><strong>Welcome @AuthManager.Name</strong>, Logout</a>\n\n        }\n        else\n        {\n            <a class=\"nav-link text-dark\" asp-area=\"\" asp-controller=\"Account\" asp-action=\"Login\">Login</a>\n        }\n    }\n</li>\n```", "```cs\npublic bool IsAuthenticated\n{\n    get { return User.Identities.Any(u => u.IsAuthenticated); }\n}\n```", "```cs\npublic IActionResult Login(LoginViewModel model)\n{\n    if (ModelState.IsValid)\n    {\n        var result = _authManager.Login(model);\n\n        if (result)\n        {\n           return !string.IsNullOrEmpty(model.ReturnUrl) && Url.IsLocalUrl(model.ReturnUrl)\n                ? (IActionResult)Redirect(model.ReturnUrl)\n                : RedirectToAction(\"Index\", \"Home\");\n        }\n    }\n    ModelState.AddModelError(\"\", \"Invalid login attempt\");\n    return View(model);\n}\n```", "```cs\npublic bool Login(LoginViewModel model)\n{\n    var user = _userManager.FindBy(model);\n    if (user == null) return false;\n    SignInCookie(model, user);\n    return true;\n}\n```", "```cs\nprivate void SignInCookie(LoginViewModel model, User user)\n{\n    var claims = new List<Claim>\n    {\n        new Claim(ClaimTypes.Name, user.FirstName),\n        new Claim(ClaimTypes.Email, user.EmailId),\n        new Claim(ClaimTypes.NameIdentifier, user.Id.ToString())\n    };\n\n    var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);\n    var principal = new ClaimsPrincipal(identity);\n    var props = new AuthenticationProperties { IsPersistent = model.RememberMe };\n    _httpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, principal, props).Wait();\n}\n```", "```cs\n//Cookie authentication\nservices.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme).AddCookie();\n//For claims\nservices.AddSingleton<IHttpContextAccessor, HttpContextAccessor>();\nservices.AddTransient<IAuthManager, AuthManager>();\n```", "```cs\n<li class=\"nav-item\">\n    @{\n        if (AuthManager.IsAuthenticated)\n        {\n            <a class=\"nav-link text-dark\" asp-area=\"\" asp-controller=\"Product\" asp-action=\"Index\">Products</a>\n        }\n    }\n</li>\n```", "```cs\npublic class Role\n{\n    public Guid Id { get; set; }\n    public string Name { get; set; }\n    public string ShortName { get; set; }\n}\n```", "```cs\npublic IEnumerable<Role> GetRoles() => _context.Roles.ToList();\n\npublic IEnumerable<Role> GetRolesBy(string userId) => _context.Roles.Where(x => x.UserId.ToString().Equals(userId));\n\npublic string RoleNamesBy(string userId)\n{\n    var listofRoleNames = GetRolesBy(userId).Select(x=>x.ShortName).ToList();\n    return string.Join(\",\", listofRoleNames);\n}\n```", "```cs\nprivate void SignInCookie(LoginViewModel model, User user)\n{\n    var claims = new List<Claim>\n    {\n        new Claim(ClaimTypes.Name, user.FirstName),\n        new Claim(ClaimTypes.Email, user.EmailId),\n        new Claim(ClaimTypes.NameIdentifier, user.Id.ToString())\n    };\n\n    if (user.Roles != null)\n    {\n        string[] roles = user.Roles.Split(\",\");\n\n        claims.AddRange(roles.Select(role => new Claim(ClaimTypes.Role, role)));\n    }\n\n    var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);\n\n    var principal = new ClaimsPrincipal(identity);\n    var props = new AuthenticationProperties { IsPersistent = model.RememberMe };\n    _httpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, principal, props).Wait();\n}\n```", "```cs\nnamespace Product_Test\n{\n    public class UnitTest1\n    {\n        [Fact]\n        public void Test1()\n        {\n        }\n    }\n}\n```", "```cs\npublic class ProductData\n{\n    public IEnumerable<ProductViewModel> GetProducts()\n    {\n        var productVm = new List<ProductViewModel>\n        {\n            new ProductViewModel\n            {\n                CategoryId = Guid.NewGuid(),\n                CategoryDescription = \"Category Description\",\n                CategoryName = \"Category Name\",\n                ProductDescription = \"Product Description\",\n                ProductId = Guid.NewGuid(),\n                ProductImage = \"Image full path\",\n                ProductName = \"Product Name\",\n                ProductPrice = 112M\n            },\n           ... \n        };\n\n        return productVm;\n    }\n```", "```cs\npublic class ProductTests\n{\n    [Fact]\n    public void Get_Returns_ActionResults()\n    {\n        // Arrange\n        var mockRepo = new Mock<IProductRepository>();\n        mockRepo.Setup(repo => repo.GetAll()).Returns(new ProductData().GetProductList());\n        var controller = new ProductController(mockRepo.Object);\n\n        // Act\n        var result = controller.GetList();\n\n        // Assert\n        var viewResult = Assert.IsType<OkObjectResult>(result);\n        var model = Assert.IsAssignableFrom<IEnumerable<ProductViewModel>>(viewResult.Value);\n        Assert.NotNull(model);\n        Assert.Equal(2, model.Count());\n    }\n}\n```", "```cs\ninstall-package moq \n```"]