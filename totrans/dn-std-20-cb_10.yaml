- en: Let’s Fine-Tune Our Library
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们调整我们的库
- en: 'In this chapter, we will be looking at these recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下食谱：
- en: Logging the library
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录库
- en: Creating a .NET Core console application to use the library
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个.NET Core控制台应用程序以使用库
- en: Informing the end user – exception handling and error messages
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通知最终用户 - 异常处理和错误消息
- en: Using Visual Studio 2017 diagnostics and debugging tools
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Visual Studio 2017的诊断和调试工具
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Readers should have a basic knowledge of C#. They should also have a basic knowledge
    of using Visual Studio, installing packages using NuGet, and referencing libraries
    within projects from other projects.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 读者应具备C#的基本知识。他们还应具备使用Visual Studio、使用NuGet安装包以及在其他项目中引用库的基本知识。
- en: 'The code files for this chapter can be found on GitHub:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在GitHub上找到：
- en: '[https://github.com/PacktPublishing/DotNET-Standard-2-Cookbook/tree/master/Chapter10/Chapter10.Logging](https://github.com/PacktPublishing/DotNET-Standard-2-Cookbook/tree/master/Chapter10/Chapter10.Logging)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/DotNET-Standard-2-Cookbook/tree/master/Chapter10/Chapter10.Logging](https://github.com/PacktPublishing/DotNET-Standard-2-Cookbook/tree/master/Chapter10/Chapter10.Logging)'
- en: 'Check out the following video to see the code in action:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的实际效果：
- en: '[https://goo.gl/HNVQMh](https://goo.gl/HNVQMh)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://goo.gl/HNVQMh](https://goo.gl/HNVQMh)'
- en: Introduction
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In this chapter, we will be looking at how to fine-tune our .NET Standard 2.0
    library, how to create a log, and how to use the debugging tools available in
    Visual Studio 2017\. We will also look at exception handling. Throughout previous
    chapters, we have been looking at how to build a library and its utilization.
    In this chapter, we are going to make that library good and solid.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨如何调整我们的.NET Standard 2.0库，如何创建日志，以及如何使用Visual Studio 2017中可用的调试工具。我们还将探讨异常处理。在前面的章节中，我们一直在探讨如何构建库及其利用。在本章中，我们将使该库变得更好、更稳固。
- en: A library logs things itself
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 库会自己记录信息
- en: In this recipe, we will be using a text log file to store details about how
    the library interacts with other programs. This is a good practice; to log things
    as you go. Then, you will be able to pinpoint errors and other important things,
    such as usage of the library.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将使用文本日志文件来存储有关库如何与其他程序交互的详细信息。这是一个好的做法；边走边记录。然后，您将能够定位错误和其他重要事项，例如库的使用。
- en: Getting ready
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure you have the latest version of Visual Studio 2017 installed on your
    system. Let's get started on our recipe.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您的系统上已安装最新版本的Visual Studio 2017。让我们开始我们的食谱。
- en: How to do it...
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open Visual Studio 2017.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio 2017。
- en: Click File | New | Projectto create a project.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击文件 | 新建 | 项目创建项目。
- en: In the New Project dialog box, expand the Other Project Types node in the left-hand
    pane and select Visual Studio Solutions. In the right-hand pane, select Blank
    Solution**.**
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“新建项目”对话框中，展开左侧窗格中的“其他项目类型”节点，并选择Visual Studio解决方案。在右侧窗格中，选择空白解决方案**。**
- en: 'In the Name: textbox, type `Chapter10.Logging`, and, in the Location: textbox,
    select a path from the drop-down box or click on the Browse... button to locate
    a path:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“名称”文本框中，输入`Chapter10.Logging`，并在“位置”文本框中，从下拉框中选择路径或点击浏览...按钮定位路径：
- en: '![](img/035fee47-ea1d-434a-973b-7147f337d760.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/035fee47-ea1d-434a-973b-7147f337d760.png)'
- en: Click OK.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击确定。
- en: 'Now, the Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，解决方案资源管理器（*Ctrl* + *Alt* + *L*）应该看起来像这样：
- en: '![](img/e0c73bf8-203a-4665-a2fb-299609fb9714.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e0c73bf8-203a-4665-a2fb-299609fb9714.png)'
- en: Now, right-click on the `Chapter10.Logging` label in the Solution Explorer and
    select Add | New Project.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在解决方案资源管理器中的`Chapter10.Logging`标签上右键单击，然后选择添加 | 新项目。
- en: In the New Project dialog box, expand the Visual C# node.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“新建项目”对话框中，展开Visual C#节点。
- en: 'Select .NET Standard in the left-hand pane and Class Library (.NET Standard)
    in the right-hand pane:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧窗格中选择.NET Standard，在右侧窗格中选择类库(.NET Standard)：
- en: '![](img/bf0d9236-6a2b-4645-9551-4b9d862b980b.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bf0d9236-6a2b-4645-9551-4b9d862b980b.png)'
- en: 'In the Name: textbox, type `Chapter10.Logging.LogLib`, leave the other defaults
    as they are, and click OK:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“名称”文本框中，输入`Chapter10.Logging.LogLib`，保留其他默认设置，然后点击确定：
- en: '![](img/ffa51c39-9f81-4f6f-8023-63c9812c63b5.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ffa51c39-9f81-4f6f-8023-63c9812c63b5.png)'
- en: 'Now, the Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，解决方案资源管理器（*Ctrl* + *Alt* + *L*）应该看起来像这样：
- en: '![](img/c64bff24-6840-404c-97a2-1ab5aed72d0f.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c64bff24-6840-404c-97a2-1ab5aed72d0f.png)'
- en: Now, select `Class1.cs` in the Solution Explorer and press *F2* to rename the
    file `LoggerDemo.cs`.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在解决方案资源管理器中选择`Class1.cs`，然后按*F2*重命名文件为`LoggerDemo.cs`。
- en: Answer Yes in the confirmation dialog box that asks to rename the class name
    as well.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在询问是否重命名类名的确认对话框中回答“是”。
- en: Double-click on the `LoggerDemo.cs` label in the Solution Explorer.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击解决方案资源管理器中的`LoggerDemo.cs`标签。
- en: 'Let''s scroll up in the code window and add the following `using` directive:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在代码窗口中向上滚动并添加以下`using`指令：
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, create two class-level variables to hold the filename and the `StreamWriter`
    class:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建两个类级别变量来保存文件名和`StreamWriter`类：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, create the default constructor method as follows:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建默认构造函数方法如下：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Again, create this `private`method to write log details to the file:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次创建这个`private`方法来将日志详细信息写入文件：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Create these three `public` methods:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建以下这三个`public`方法：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Press *Ctrl* + *Shift* + *B* to build the solution.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Ctrl* + *Shift* + *B*构建解决方案。
- en: How it works...
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In steps 1 to 11, we created a blank solution and added a .NET Standard 2.0
    library to the solution. In these steps, we assigned proper names to the solution
    and to the library. In steps 12 and 13, we renamed the existing `Class1.cs` created
    by Visual Studio. In step 15, we created a `using` directive to access the file
    operations.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤1到11中，我们在解决方案中创建了一个空白解决方案并添加了一个.NET Standard 2.0库。在这些步骤中，我们为解决方案和库分配了合适的名称。在步骤12和13中，我们将Visual
    Studio创建的现有`Class1.cs`重命名。在步骤15中，我们创建了一个`using`指令来访问文件操作。
- en: In step 16, we created two `private` variables to hold the filename and the
    `StreamWriter` class. In step 17, we created the default constructor and we are
    calling the `WriteLog()` method we created in step 18\. In step 19, we created
    three test methods to demonstrate logging. Finally, in step 20, we performed a
    quick build to check for syntax.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤16中，我们创建了两个`private`变量来保存文件名和`StreamWriter`类。在步骤17中，我们创建了默认构造函数，并调用了我们在步骤18中创建的`WriteLog()`方法。在步骤19中，我们创建了三个测试方法来演示日志记录。最后，在步骤20中，我们进行了快速构建以检查语法。
- en: Creating a .NET Core console application to use the library
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个.NET Core控制台应用程序来使用库
- en: In this recipe, we will be creating a .NET Core console application to use the
    library from the previous recipe. You can also try this recipe in macOS or Linux,
    since .NET Core is cross-platform.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将创建一个.NET Core控制台应用程序来使用前面配方中的库。你还可以在macOS或Linux上尝试这个配方，因为.NET Core是跨平台的。
- en: Getting ready
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure you have completed the previous recipe and that it builds successfully.
    Let's open the solution and get ready.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经完成了前面的配方并且构建成功。让我们打开解决方案并做好准备。
- en: How to do it...
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open Visual Studio 2017.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio 2017。
- en: Now, open the solution from the previous recipe. Click File | Open | Open Project/Solution, or
    press *Ctrl* + *Shift* + *O*, and select the `Chapter10.Logging` solution.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开前面配方中的解决方案。点击 文件 | 打开 | 打开项目/解决方案，或按 *Ctrl* + *Shift* + *O*，选择`Chapter10.Logging`解决方案。
- en: Press *Ctrl* + *Shift* + *B* for a quick build to check that everything is fine.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Ctrl* + *Shift* + *B*进行快速构建以检查一切是否正常。
- en: Click on the `Chapter10.Logging` solution label. Click File | Add | New Project.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`Chapter10.Logging`解决方案标签。点击 文件 | 添加 | 新建项目。
- en: In the Add New Project template dialog box, expand the Visual C# node in the
    left-hand pane.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 添加新项目 模板对话框中，展开左侧窗格中的Visual C#节点。
- en: 'Select .NET Core and select Console App (.NET Core) in the right-hand pane:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 .NET Core 并在右侧窗格中选择 控制台应用程序 (.NET Core)：
- en: '![](img/6143722b-69f8-41ca-81b6-8003ecf900b2.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6143722b-69f8-41ca-81b6-8003ecf900b2.png)'
- en: 'In the Name: textbox, type `Chapter10.Logging.LogCore` as the name of the project.
    The rest of the fields can be left as they are:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在名称：文本框中，将项目名称输入为`Chapter10.Logging.LogCore`。其余字段可以保持不变：
- en: '![](img/2e02cb5f-c6e7-409f-8156-61bb793dc548.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2e02cb5f-c6e7-409f-8156-61bb793dc548.png)'
- en: Click OK.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“确定”。
- en: 'Now, the Solution Explorer (press *Ctrl* + *Alt* + *L*) should look like this:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，解决方案资源管理器（按*Ctrl* + *Alt* + *L*）应该看起来像这样：
- en: '![](img/2cc47abf-74d8-4d9e-ac94-d2a7462391cb.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2cc47abf-74d8-4d9e-ac94-d2a7462391cb.png)'
- en: Right-click on the Dependencies label under `Chapter10.Logging.LogCore`.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`Chapter10.Logging.LogCore`下的依赖项标签。
- en: Select Add Reference.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择添加引用。
- en: 'In the Reference Manager, click on the Projects label in the right-hand pane:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在引用管理器中，点击右侧窗格中的项目标签：
- en: '![](img/2b417b1b-aba3-47cc-891c-61e641442f6c.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2b417b1b-aba3-47cc-891c-61e641442f6c.png)'
- en: Check the `Chapter10.Logging.LogLib`project in the left-hand pane.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧窗格中检查`Chapter10.Logging.LogLib`项目。
- en: Click OK.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“确定”。
- en: Now, double-click on the `Program.cs` label in the Solution Explorer.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，双击解决方案资源管理器中的`Program.cs`标签。
- en: Scroll up until you see the `using` directives.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动直到看到`using`指令。
- en: 'Add the following reference next to the last line of `using` directives:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`using`指令的最后一行旁边添加以下引用：
- en: '[PRE5]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, replace the existing code in the `Main()` method with this code:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将`Main()`方法中的现有代码替换为以下代码：
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Press *F5* to debug the code.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*F5*键进行调试代码。
- en: 'You should see the following output:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '![](img/5b57dfd9-1fd0-4de8-aafb-7db8a976a40a.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5b57dfd9-1fd0-4de8-aafb-7db8a976a40a.png)'
- en: Press *Enter* to exit.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Enter*键退出。
- en: 'You will also see a `lib_log.txt` file created inside the `bin/Debug` folder
    (make sure you have clicked Show All Files):'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你还会看到在`bin/Debug`文件夹中创建了一个`lib_log.txt`文件（确保你已经点击了显示所有文件）：
- en: '![](img/678d390b-ab8c-4e1d-b32b-d80ac065ccb9.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/678d390b-ab8c-4e1d-b32b-d80ac065ccb9.png)'
- en: 'The `lib_log.txt` file should have the following output:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`lib_log.txt`文件应该有以下输出：'
- en: '![](img/3cf2b241-8e03-4898-be5e-32e05c5dff26.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3cf2b241-8e03-4898-be5e-32e05c5dff26.png)'
- en: How it works...
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何工作...
- en: In steps 1 to 10, we opened the solution from the previous recipe and added
    a .NET Core console application. In these steps, we gave it a proper name. In
    step 17, we added the code-level reference to the library. In step 18, we created
    the code inside the `Main` method. In the first line, we created an instance of
    the `LoggerDemo` class and stored it in a variable. In the next few lines, we
    executed the `public` methods of `CallMethod1()`, `CallMethod2()`, and `CallMethod3()`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在第1步到第10步中，我们从上一个菜谱打开了解决方案并添加了一个.NET Core控制台应用程序。在这些步骤中，我们给它起了个合适的名字。在第17步中，我们向库添加了代码级别的引用。在第18步中，我们在`Main`方法中创建了代码。在第一行，我们创建了一个`LoggerDemo`类的实例并将其存储在一个变量中。在接下来的几行中，我们执行了`public`方法`CallMethod1()`、`CallMethod2()`和`CallMethod3()`。
- en: Finally, in steps 19 and 20, we executed the code and tested it. In steps 21
    and 22, we investigated the text file created from the library.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在第19步和第20步中，我们执行了代码并进行了测试。在第21步和第22步中，我们调查了从库中创建的文本文件。
- en: Informing the end user – Exception handling and error messages
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通知最终用户 – 异常处理和错误消息
- en: In this recipe, we will be looking at exception handling inside a .NET class
    library. We will be reusing the same library created in the first recipe of this
    chapter.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将查看.NET类库中的异常处理。我们将重用本章第一个菜谱中创建的相同库。
- en: Getting ready
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure you have completed the two recipes from this chapter. Open the solution
    and perform a quick build to check that everything is fine and compiles well.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经完成了本章的两个菜谱。打开解决方案并快速构建以检查一切是否正常且编译良好。
- en: How to do it...
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open Visual Studio 2017.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio 2017。
- en: Now, open the solution from the previous recipe. Click File | Open | Open Project/Solution, or
    press *Ctrl* + *Shift* + *O*, and select the `Chapter10.Logging` solution.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开上一个菜谱的解决方案。点击文件 | 打开 | 打开项目/解决方案，或者按*Ctrl* + *Shift* + *O*，然后选择`Chapter10.Logging`解决方案。
- en: Press *Ctrl* + *Shift* + *B* for a quick build to check that everything is fine.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Ctrl* + *Shift* + *B*进行快速构建以检查一切是否正常。
- en: 'The Solution Explorer should look like this:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解决方案资源管理器应该看起来像这样：
- en: '![](img/0e30766f-9714-4c11-8b94-6466e21015f8.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0e30766f-9714-4c11-8b94-6466e21015f8.png)'
- en: Now, double-click on the `LoggerDemo.cs` label to open the code window.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，双击`LoggerDemo.cs`标签以打开代码窗口。
- en: Scroll down until you reach the `WriteLog()` method.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动直到到达`WriteLog()`方法。
- en: 'Replace the current code with the following:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将当前代码替换为以下代码：
- en: '[PRE7]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now, click on the .NET Core console application project and press *F5* to test.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，单击.NET Core控制台应用程序项目并按*F5*进行测试。
- en: How it works...
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何工作...
- en: In steps 1 to 5, we opened the existing solution. In step 7, we added exception
    handling to the `WriteLog()` method in the library. In the first line of code,
    we added the keyword `try`**. **Inside it, we created the code that creates the
    text file. Then, we caught a `FileNotFoundException` in the first `catch` clause.
    This is a good practice; to catch the exact exception. If you have caught all
    exceptions, then you can catch the default `exception`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在第1步到第5步中，我们打开了现有的解决方案。在第7步中，我们在库中的`WriteLog()`方法中添加了异常处理。在代码的第一行中，我们添加了关键字`try`**。**
    在其中，我们创建了创建文本文件的代码。然后，在第一个`catch`子句中捕获了一个`FileNotFoundException`。这是一个好习惯；捕获确切的异常。如果你已经捕获了所有异常，那么你可以捕获默认的`exception`。
- en: Finally, we have used a `finally` clause to close the file stream. The `finally`
    clause will always execute inside a `try...catch` block. It's a good practice
    to include the code for a cleanup inside a `finally` clause.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用了一个`finally`子句来关闭文件流。`finally`子句将始终在`try...catch`块中执行。在`finally`子句中包含清理代码是一个好习惯。
- en: Using Visual Studio 2017 diagnostics and debugging tools
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Visual Studio 2017 诊断和调试工具
- en: In this recipe, we will be looking at how to debug a .NET Standard 2.0 library
    using Visual Studio 2017 and its debugging tools. We will be using the same solution
    we created in the previous recipes.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将探讨如何使用 Visual Studio 2017 及其调试工具调试 .NET Standard 2.0 库。我们将使用之前菜谱中创建的相同解决方案。
- en: Getting ready
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure you have completed the previous recipes and built them without any
    issues. Let's get started.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经完成了之前的菜谱，并且没有问题地构建了它们。让我们开始吧。
- en: How to do it...
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open Visual Studio 2017.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio 2017。
- en: Now, open the solution from the previous recipe. Click File | Open | Open Project/Solution, or
    press *Ctrl* + *Shift* + *O*, and select the `Chapter10.Logging` solution.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开之前菜谱中的解决方案。点击 文件 | 打开 | 打开项目/解决方案，或按 *Ctrl* + *Shift* + *O*，然后选择`Chapter10.Logging`解决方案。
- en: Press *Ctrl* + *Shift* + *B* for a quick build to check that everything is fine.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Ctrl* + *Shift* + *B*进行快速构建以检查一切是否正常。
- en: 'The Solution Explorer should look like this:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解决方案资源管理器应该看起来像这样：
- en: '![](img/e67d6dc6-df65-4b49-83f7-353a1b84c453.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e67d6dc6-df65-4b49-83f7-353a1b84c453.png)'
- en: Now, double-click on the `LoggerDemo.cs` label to open the code window.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，双击`LoggerDemo.cs`标签以打开代码窗口。
- en: Scroll down until you reach the `WriteLog()` method.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动直到到达`WriteLog()`方法。
- en: 'Now, as shown in the following, click on the gray bar on the left side of the
    code window to add a debug point:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如图所示，点击代码窗口左侧的灰色栏以添加一个调试点：
- en: '![](img/d8ed76a6-7579-4183-8928-5d9f8bb152a9.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d8ed76a6-7579-4183-8928-5d9f8bb152a9.png)'
- en: Again, click on the `Program.cs` tab.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次，点击`Program.cs`标签页。
- en: Press *F**5* to debug the code.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*F5*键以调试代码。
- en: 'As you can see, the cursor will stop at the debugging point:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如你所见，光标将停在调试点上：
- en: '![](img/464195b3-1b90-409a-9500-1762a03823ae.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/464195b3-1b90-409a-9500-1762a03823ae.png)'
- en: 'Now, move your mouse pointer to the `message` parameter of the `WriteLog()`
    method:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将鼠标指针移到`WriteLog()`方法的`message`参数上：
- en: '![](img/eff31b8f-75ea-409c-afc8-4138e53b8c4e.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eff31b8f-75ea-409c-afc8-4138e53b8c4e.png)'
- en: Now, you can see what is stored inside that variable.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以看到那个变量里面存储的内容了。
- en: 'Click on the small green arrow as highlighted in the following:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击以下图中突出显示的小绿色箭头：
- en: '![](img/7dc3e5cf-c01a-44fd-afa1-aa9c14e794c0.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7dc3e5cf-c01a-44fd-afa1-aa9c14e794c0.png)'
- en: You should see that the debug point jumps to the `logFile.WriteLine` method.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到调试点跳转到了`logFile.WriteLine`方法。
- en: 'On the right-hand side of the screen, you should see the Diagnostics Tools
    window:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在屏幕的右侧，你应该能看到诊断工具窗口：
- en: '![](img/0a7a26ec-9dcd-4ad9-9557-e267942ff5cd.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0a7a26ec-9dcd-4ad9-9557-e267942ff5cd.png)'
- en: 'Also, at the bottom, you should see the Watch windows and the Call Stack window:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，在底部，你应该能看到监视窗口和调用堆栈窗口：
- en: '![](img/552bd11d-aa89-40a6-b6f7-b9a0882f6ef8.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/552bd11d-aa89-40a6-b6f7-b9a0882f6ef8.png)'
- en: Now, stop debugging by pressing *Shift* + *F5*.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，通过按*Shift* + *F5*停止调试。
- en: How it works...
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In steps 1 to 5, we opened the existing solution with the .NET Standard library
    and its accompanying .NET Core application. In step 10, we added a debugging point
    to the code. In step 11, we could see that it had stopped at the debugging point,
    at the .NET Standard 2.0 library itself. From then on, it performed like a normal
    debugging application. Visual Studio knew we were looking for code in the library.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤1到5中，我们打开了包含.NET Standard库及其配套.NET Core应用程序的现有解决方案。在步骤10中，我们在代码中添加了一个调试点。在步骤11中，我们看到它已经停止在.NET
    Standard 2.0库本身上。从那时起，它就像一个正常的调试应用程序一样运行。Visual Studio知道我们正在寻找库中的代码。
- en: In step 13, we moved the mouse pointer to the `string` parameter of the `WriteLog()`
    method, which is in the library code itself. Visual Studio showed us the value
    inside that parameter. Again, in step 13, we saw that we could jump to any area
    in the code we desired. This is a new feature in Visual Studio 2017\. In step
    15, we saw the diagnostic tools available, including the Events, Memory, and the
    CPU usage. These tools help us to fine-tune our library as normal C# code.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤13中，我们将鼠标指针移到了库代码本身中的`WriteLog()`方法的`string`参数上。Visual Studio向我们显示了该参数内的值。同样，在步骤13中，我们看到我们可以跳转到代码中的任何我们想要的地方。这是
    Visual Studio 2017 的新特性。在步骤15中，我们看到了可用的诊断工具，包括事件、内存和CPU使用情况。这些工具帮助我们像正常的C#代码一样微调我们的库。
- en: Finally, we looked at the Watch and Call Stack windows, which are self-explanatory.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们查看监视和调用堆栈窗口，它们是自我解释的。
