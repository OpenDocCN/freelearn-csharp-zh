- en: Chapter 4. Developing Your First iOS App with Xamarin.iOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we finally get to jump in and start writing some code. We
    will develop a sample app that demonstrates the basics of developing Xamarin.iOS
    apps and will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Overview of the sample app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Xamarin.iOS app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running and debugging apps with Xamarin Studio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Xamarin iOS Designer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending the sample app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MonoTouch.Dialog
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The sample national parks app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will create a sample app that we will continue to work
    with through [Chapter 8](ch08.html "Chapter 8. Sharing with Xamarin.Forms"), *Sharing
    with Xamarin.Forms*. The app will allow you to view, create, edit, and delete
    information about national parks, and will have a similar user interface and flow
    as the iOS 7 Contacts app. The following screen mock-ups depict how the user interface
    will be organized:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The sample national parks app](img/0838OT_04_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following are the different views of national park apps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**List view**: This view displays a list of national parks that allows a park
    to be viewed and also a new park to be created'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Detail view**: This view displays all the properties of a national park in
    read-only mode, and allows navigation to see photos of a park or see directions
    to a park'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Edit view**: This view allows you to edit new or existing parks as well as
    delete parks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the sample app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Xamarin.iOS template will be used to create the sample app, giving us much
    of the required functionality that is already in place.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout the chapter, we will present sample code from the downloaded solutions.
    Feel free to deviate in any manner to take the app in any direction you see fit.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the national parks sample app, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch Xamarin Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **File** menu, navigate to **New** | **Solution**. The **New Solution**
    dialog box will be presented, as shown in the following screenshot:![Creating
    the sample app](img/0838OT_04_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **C#** | **iOS** | **iPhone Storyboard** on the left-hand side of
    the dialog box and **Master-Detail Application** in the middle section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `NationalParks.iOS` in the **Name** field, select the location where you
    would like to place your code by clicking on the **Browse** button, change the
    **Solution name** to `NationalParks`, leave **Create directory for solution**
    checked, and click on **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One reason for naming the project `NationalParks.iOS` is that in future chapters,
    we will add a new project named `NationalParks.Droid` to the same solution. This
    project will clearly identify which platform is supported by each project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Xamarin Studio will create both the solution and project folders, generate a
    number of files for solution and project, and then open the new solution and project.
    The following screenshot depicts Xamarin Studio with the newly created project
    open:![Creating the sample app](img/0838OT_04_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By selecting the Master-Detail template, Xamarin Studio has generated a functioning
    application with a master view (list) and a detail view along with everything
    that is needed to navigate between the two.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a brief look at what was automatically created:'
  prefs: []
  type: TYPE_NORMAL
- en: '`MainStoryboard.storyboard`: A storyboard file containing the user interface
    definitions was created and named `MainStoryboard.storyboard`. Double-click on
    this file to open it in Xcode. You will notice that the storyboard contains two
    view controllers: `MasterViewController` and `DetailViewController` with a single
    segue between them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MasterViewController`: The `MasterViewController.cs` and the corresponding
    `MasterViewController.designer.cs` files were created as a result of `MasterViewController`
    defined in the storyboard. `MasterViewController.cs` is the file where we will
    add code, while we override methods and add logic.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataSource`: `MasterViewController` contains an inner class named `DataSource`,
    which is a specialization of `UITableViewSource`. The `DataSource` class is responsible
    for providing populated `UICellViews` to the table view on `MasterViewController`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DetailViewController`: The `DetailViewController.cs` and its corresponding
    `DetailViewController.designer.cs` files were created as a result of `DetailViewController`
    defined in the storyboard. This is used to display properties of a specific item
    from the table view on `MasterViewController`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Project Options view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are numerous options that can be set that affect how an iOS app is built
    and executed. These options can be viewed and adjusted from the **Project Options**
    view. The following sections are of the most interest for iOS apps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**iOS Application**: This includes settings that describe the application,
    including the devices supported, iOS target version, orientations supported, icons,
    and more'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**iOS IPA Options**: This includes settings related to creating an IPA package
    for ad hoc distribution'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**iOS Bundle Signing**: This includes settings that control how the bundle
    is signed during the build process'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**iOS Build**: This includes settings used by the compile and link process
    to optimize the resulting executable'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Prior to running the app, we need to choose a setting for our target version
    of iOS. To adjust this setting, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the sample app project under the sample app solution in the **Solution**
    pad.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click and select **Options**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **iOS Application** section and set the **Deployment Target** option
    to **7.0** and click on **OK**.![The Project Options view](img/0838OT_04_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Running and debugging within Xamarin Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have a good understanding of what was created for us, let's take
    a few minutes to look at the capabilities Xamarin Studio provides to run and debug
    apps. The way in which a tool supports running and debugging apps has a big impact
    on developer productivity. Xamarin Studio provides a robust set of debugging capabilities
    comparable to the most modern development environments that can be used with either
    the iOS Simulator or a physical device. As with an iOS development, using a physical
    device provides the most accurate results.
  prefs: []
  type: TYPE_NORMAL
- en: 'The two dropdowns on the upper-left hand corner of Xamarin Studio control the
    type of build (**Release** or **Debug**) that will be produced and, when **Debug**
    is selected, which of the iOS Simulators should be used. Build types include **Ad-Hoc**,
    **AppStore**, **Debug**, and **Release**. All of these build types except **Debug**
    will be discussed in [Chapter 9](ch09.html "Chapter 9. Preparing Xamarin.iOS Apps
    for Distribution"), *Preparing Xamarin.iOS Apps for Distribution*. The **Debug**
    build type is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running and debugging within Xamarin Studio](img/0838OT_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note that **Debug** is selected for the type of build and the various options
    available for the iOS Simulator. Selecting **iOS Device** allows you to debug
    the app on an attached device.
  prefs: []
  type: TYPE_NORMAL
- en: 'To debug an app, follow the given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select **Debug** for the build type, and select **iOS 7.1** from **iPhone Retina
    (4-inch 64-bit)** for the **iOS Simulator** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the debugging session by clicking on the **Start** button from the taskbar
    on the left-hand side. You can also initiate the debugging session by navigating
    to **Run** | **Start Debugging** from the main menu bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Xamarin Studio will compile the app, launch the iOS Simulator, install the app
    on the simulator and finally launch the app. Xamarin Studio keeps you informed
    of what is going in the status window in the middle of the taskbar. The following
    screenshot shows the status window during the build process:![Running and debugging
    within Xamarin Studio](img/0838OT_04_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An empty list is initially presented. Click the **+** (add) button a few times
    and you will see the date/time fields being added to the list. Select an entry
    and the **Detail** view is displayed, as shown in the following screenshot:![Running
    and debugging within Xamarin Studio](img/0838OT_04_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open `MasterViewController.cs` by double-clicking the **Solution** pad on the
    left-hand side. Set a breakpoint on the first line in the `AddNewItem()` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **+** (add) button in the app. You will notice the app has stopped
    on the breakpoint, as follows:![Running and debugging within Xamarin Studio](img/0838OT_04_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will find the basic flow controls in the taskbar. These allow you to continue
    execution, step over current line, step into current function, and step out of
    the current function. The taskbar will appear:![Running and debugging within Xamarin
    Studio](img/0838OT_04_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: A complete set of flow control and debugging options can be found under the
    **Run** main menu.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: From the first line in `AddNewItem()`, select `DateTime.Now`, right-click, and
    select **Expression Evaluator**. This dialog box allows you to quickly view the
    status of objects during your app's execution, as follows:![Running and debugging
    within Xamarin Studio](img/0838OT_04_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will also notice a set of panels at the bottom of Xamarin Studio, which
    contain tabs for **Watch**, **Locals**, **Breakpoints**, **Threads**, **Application
    Output**, and **Call Stack**.![Running and debugging within Xamarin Studio](img/0838OT_04_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the continue icon to allow the app to continue running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you can see from the previous exercise, Xamarin Studio and the iOS Simulator
    provide a robust set of features to run and debug applications.
  prefs: []
  type: TYPE_NORMAL
- en: Extending the sample app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, it''s time to extend the app. We have two primary tasks before us:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a way for national parks to be loaded and saved from a file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhance the user interface to show all of the appropriate attributes and allow
    to view and edit data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storing and loading national parks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use a simple JSON-formatted text file to store information. .NET provides
    libraries to accomplish this, but the library I have had the most success with
    is Json.NET. Json.NET is an open source library created by James Newton-King,
    and this is definitely worth considering. Json.NET is also available in the Xamarin
    component store, so we can add it to our project directly from there.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Json.NET
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To add Json.NET to the sample app, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Expand the `NationalParks.iOS` project, select the `Components` folder, and
    choose **Edit Components**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the upper-right corner, click on **Get More Components** and enter `Json.NET`
    in the search field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Json.NET** from the list and choose **Add to App**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating an entity class
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We now need an entity class that represents our subject: national parks. This
    will be a simple .NET class with a handful of properties.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To create an entity class, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on `NationalParks.iOS` project and select the **New File** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **New File** dialog box, select the **General** section, select **Empty
    Class**, enter `NationalPark` in the **Name** field, and click on **New**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following code demonstrates what is needed for the entity class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Adding a JSON-formatted file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, we need a file filled with JSON-formatted national parks. You can find
    such a file in the assets folder of the downloaded solutions. The name of the
    file is `NationalParks.json`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the data file to the project, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Copy the `NationalParks.json` file to the `NationalParks.iOS` project folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the `NationalParks.iOS` project and choose **Add Files**, select
    `NationalParks.json` and click on **Open**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the `NationalParks.json` file to open it and view the content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are several file properties that must be set that determine how the file
    is handled during the compilation and deployment process. We want the file to
    be treated as content and placed in the same folder as the app during deployment.
    The following screenshot shows the settings required to accomplish this. The panels
    to adjust these settings are in the **Properties** tab on the right-hand side
    of Xamarin Studio.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a JSON-formatted file](img/0838OT_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is not an ideal location for apps to store their data for a production
    distribution, but will work for our purpose in this chapter. In [Chapter 5](ch05.html
    "Chapter 5. Developing Your First Android App with Xamarin.Android"), *Developing
    Your First Android App with Xamarin.Android*, we will build a more robust storage
    mechanism when we discuss sharing code between iOS and Android apps.
  prefs: []
  type: TYPE_NORMAL
- en: Loading objects from a JSON-formatted file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now, we need to add the logic to load data from the file to a list.
  prefs: []
  type: TYPE_NORMAL
- en: 'To load objects from a file, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'As you recall, when our app was generated, the `UITableViewSource` file placed
    in `MasterViewController.cs` used a `List<object>` object to populate the list.
    We need to convert this to `List<NationalPark>` `Parks`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that we do not instantiate the `Parks` list; Json.NET will do this for
    us when we deserialize the JSON string.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We also need to convert the `Objects` property defined on `DataSource` to the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `using` clauses for `System.IO` and `Newtonsoft.Json` in preparation
    to add the load and deserialize steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The JSON file will be placed in the `app` folder; the `Environment.CurrentDirectory`
    property gives us the path to this location. Loading objects from this file requires
    two basic steps. The first step is to read the text into a string with `File.ReadAllText()`.
    The second step is to deserialize the objects into a list using `JsonConvert.DeserializeObject<>()`.
    The following code sample demonstrates what needs to be placed in the constructor
    of the `DataSource` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Saving objects to a JSON-formatted file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Saving objects to a JSON-formatted file is just as simple as loading them.
    Simply call `JsonConvert.SerializeObject()` to create a JSON representation of
    the object(s) in a string and write the resulting string to a text file using
    `File.WriteAllText()`. The following code demonstrates what is needed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We will use this logic in the upcoming section titled *Implementing the Done
    Clicked event handler*.
  prefs: []
  type: TYPE_NORMAL
- en: Running the app
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We are now ready to take a look at some of our work. Run the app and notice
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`MasterViewController` is populated with information from `NationalParks.json`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Selecting a park displays `DetailViewController` populated with the name of
    the park
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clicking on the **Add** button from `MasterViewController` adds a new park with
    the name **New Park**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhancing the UI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will now turn our attention to create a more robust UI that will support
    listing items, view item details, and edit new and existing items. This is a common
    pattern for mobile apps and we already have about 75 percent of what we need.
    We need to make the following additions:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a new view controller named `EditViewController` that can be used to edit
    new or existing national parks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the **Add** button on `MasterViewController` to open a new national park
    entry in `EditViewController`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add fields to `DetailViewController` that will display all the properties of
    a national park and an **Edit** button that will navigate to `EditViewController`
    to edit the current item.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As we discussed in [Chapter 2](ch02.html "Chapter 2. Demystifying Xamarin.iOS"),
    *Demystifying Xamarin.iOS*, we have two options to edit storyboards: Xcode Interface
    Builder and the Xamarin.iOS Designer. Either of these tools can be used based
    on preference. Within Xamarin Studio, you can choose which tool to launch by selecting
    a storyboard file, right-click on it and select **Open With**. The following screenshot
    shows the storyboard context menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Enhancing the UI](img/0838OT_04_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The rest of this chapter will be based on using the Xamarin.iOS Designer. If
    you choose to work with Xcode Interface Builder, you need to be aware that when
    changes are made in Xcode, there is a synchronization process that takes place
    when the Xamarin Studio becomes active again. This process synchronizes changes
    made in Xcode with C# designer class files and creates appropriate outlets and
    actions. The following screenshot shows Xamarin Studio''s status bar during synchronization:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Enhancing the UI](img/0838OT_04_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you would like more guidance with Xamarin.iOS Designer or need a kick start
    or refresher course on using Xcode Interface Builder, the following links provide
    tutorials:'
  prefs: []
  type: TYPE_NORMAL
- en: Xamarin Tutorial for using Xamarin.iOS Designer available at [http://developer.xamarin.com/guides/ios/user_interface/designer/](http://developer.xamarin.com/guides/ios/user_interface/designer/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apple Tutorial for Xcode Interface Builder available at [https://developer.apple.com/library/ios/documentation/ToolsLanguages/Conceptual/Xcode_Overview/chapters/edit_user_interface.html](https://developer.apple.com/library/ios/documentation/ToolsLanguages/Conceptual/Xcode_Overview/chapters/edit_user_interface.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Xamarin Tutorial for using Xcode Interface Builder available at [http://docs.xamarin.com/guides/ios/user_interface/tables/part_5_-_using_xcode,_interface_builder,_and_storyboards/](http://docs.xamarin.com/guides/ios/user_interface/tables/part_5_-_using_xcode,_interface_builder,_and_storyboards/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Touring the Xamarin.iOS Designer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Xamarin.iOS Designer provides a full set of tools to create and edit storyboard
    files. As this might be your first time using the tool, we will devote a few minutes
    to get familiar with it. To do so, follow the given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Double-click on `MainStoryboard.storyboard` to open the storyboard in Xamarin.iOS
    Designer. You will see `NavigationController`, `MasterViewController`, `DetailViewController`,
    and segues that connect everything, as shown in following screenshot:![Touring
    the Xamarin.iOS Designer](img/0838OT_04_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note the **Toolbox** pad in the lower right-hand corner of Xamarin Studio. It
    contains all the items that can be used within a storyboard. You can search for
    items using the search field. The **Toolbox** pad is shown in the following screenshot:![Touring
    the Xamarin.iOS Designer](img/0838OT_04_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note the **Document Outline** pad in the upper-right hand corner of Xamarin
    Studio. This view depicts the content of the storyboard in a hierarchical form
    that you can use to drill down to view increasing levels of detail. The **Document
    Outline** pad is very helpful to view and select specific elements in a storyboard,
    as shown in the following screenshot:![Touring the Xamarin.iOS Designer](img/0838OT_04_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note the **Properties** pad in the upper-right hand corner of Xamarin Studio;
    you can access it by clicking on the tab labeled **Properties**. The **Properties**
    pad allows you to edit properties for the currently selected item. Entering a
    name for a control in the **Widget** section will automatically create an outlet
    and entering names in the **Events** section will automatically create an action.
    The **Properties** pad is shown in the following screenshot:![Touring the Xamarin.iOS
    Designer](img/0838OT_04_22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note the top of the designer that contains a number of controls to adjust options,
    such as iOS version, device size, device orientation, and level of zoom. There
    are also controls to establish constraints, as shown in the following screenshot:![Touring
    the Xamarin.iOS Designer](img/0838OT_04_23.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Selecting items in the designer can be a little tricky, particularly when selecting
    a view controller. If you click in the middle of the view controller, the view
    will be selected and not the view controller. There are three different ways to
    select a view controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click in the middle of the view controller and navigate to **View Controller**
    | **Select**, as shown in the following screenshot:![Touring the Xamarin.iOS Designer](img/0838OT_04_25.jpg)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on the bar at the bottom of the view controller, as shown in the following
    screenshot:![Touring the Xamarin.iOS Designer](img/0838OT_04_26.jpg)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Select the view controller in the **Document Outline** pad
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding EditViewController and segues
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With a basic understanding of Xamarin.iOS Designer, we are now ready to add
    a new view controller and segues.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add `EditViewController` and segues, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Double-click on `MainStoryboard.storyboard` to open the storyboard in Xamarin.iOS
    Designer. You will see `MasterViewController` and `DetailViewController` in the
    file with a segue between them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new `UIViewController` by selecting the **View Controller** item from
    the **Toolbox** pad and drag-and-drop it on the designer view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new view controller `EditViewController` by clicking on the bar at
    the bottom to select it, switch to the **Properties** pad, and enter `EditViewController`
    for the **Class** field. The following screenshot depicts the **Properties** pad:![Adding
    EditViewController and segues](img/0838OT_04_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a Bar Button Item to the right-hand side of the Navigation Item on `DetailViewController`
    and set the **Identifier** button to **Edit** on the **Widget** section of the
    **Properties** pad.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a push segue from the **Edit** button on `DetailViewController` to the new
    controller, `EditViewController`. Press and hold the *Ctrl* key, click and hold
    the **Edit** button, drag it to the bar at the bottom of `EditViewController`,
    let go of the mouse, choose **Push** and enter `editFromDetail` for the **Identifier**
    option on the **Widget** section of the **Properties** pad.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a Bar Button Item to the right-hand side of the Navigation Item on `MasterViewController`
    and set the **Identifier** button to **Add**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a push segue from the **Add** button on `MasterViewController` to the new
    controller, `EditViewController`. Press and hold the *Ctrl* key, click and hold
    the **Add** button, drag it to the bar at the bottom of `EditViewController`,
    let go of the mouse, choose **Push**, and enter `editFromMaster` for the **Identifier**
    option on the **Widget** section of the **Properties** pad.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a Bar Button Item to the right-hand side of the Navigation Item on `EditViewController`
    and set the **Identifier** option to **Done**. Name the button `DoneButton`. Naming
    the button will create an outlet that can later be used as a reference to assign
    a traditional .NET event handler.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a label, `UILabel`, to the center of `EditViewController`. This will be
    used temporarily to display the name of an item, while we test and debug the navigation
    of the app. Name this `UILabel` instance as `editDescriptionLabel`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a `UIButton` instance to `EditViewController` and set the **Title** option
    to **Delete**. Add an action named `DeleteClicked` to the **Touch Down** event
    in the **Events** section of the **Properties** pad. Creating an action will generate
    a partial method that we can later complete with logic to implement the `DeleteClicked`
    event handler.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save all of the changes made.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we need to write some code to tie everything together. Let''s start by
    looking at some of the code that was generated as a result of our work in Xamarin.iOS
    Designer. You will find two files that have been added for `EditViewController`,
    a designer file named `EditViewController.designer.cs` nested under a nondesigner
    file named `EditViewController.cs`. Double-click on the designer class to view
    the contents, as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that `EditViewController` is a partial class; the two outlets and the actions
    were generated based on the specifications we made.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the DoneClicked event handler
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the **Done** button, we created an outlet so we will have a reference to
    the object that can be used to assign a .NET event handler at runtime. When **Done**
    is clicked on, we need to do a few things. First, check whether we are dealing
    with a new object and add it to the `_parks` collection. If so, then we need to
    save the `_parks` collection to `NationalParks.json`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To implement the **Done** button, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a method to save changes to `NationalParks.json`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a .NET event handler named `DoneClicked` and add logic to add `_park`
    to the `_parks` collection. If it''s a new park, call the `SaveParks()` method
    to save updates to `NationalParks.json`, and to return to the previous view controller,
    use the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Implementing the DeleteClicked action
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We created an action for the **Delete** button, which caused a partial method
    to be created in the designer class. We now need to create an implementation for
    the partial method.
  prefs: []
  type: TYPE_NORMAL
- en: 'To implement the **Delete** action all you need to do is add a `partial` method
    implementation for `DeleteClicked` that removes `_park` from the `parks` collection
    and saves the change to the `NationalParks.json` file, which will then return
    to the `MasterViewController`. This can be done by:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The two approaches demonstrated to implement event handlers accomplish essentially
    the same thing without having a clear advantage over the other. As we don't have
    the event handler assignment in `ViewDidLoad()` for the action, it's slightly
    less coded. It really comes down to which method you prefer and become most comfortable
    with.
  prefs: []
  type: TYPE_NORMAL
- en: Passing data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'All iOS apps have a need to navigate between views and pass data. As we are
    using storyboards and segues for the UI, most of the work related to navigation
    is done for us. However, we need to pass data between the views. There are two
    parts to accomplish this: define a way that a view controller will accept data
    and use this mechanism from the initiating view controller. As far as accepting
    data is concerned, this can be accomplished with the use of simple properties
    on the view controller, or by defining a method that accepts the data and saves
    it to private variables. We will go with defining a method to accept navigation
    data, which is also the approach the code that was generated for us uses.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To complete the logic to accept navigation data, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `DetailViewController` and locate the `SetDetailItem` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's start by changing the name to be a little more meaningful. Select the
    `SetDetailItem` text in the editor, right-click and navigate to **Refactor** |
    **Rename**. Enter `SetNavData` and click on **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's also rename `ConfigureView ()` to `ToUI()` using the same method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the `SetNavData()` method so that it accepts a list of `NationalPark`
    items as well as the single park that should be displayed and saves these parameters
    to a set of private variables. Also, remove the call to `ToUI()`; we will move
    this to a more appropriate place in the next step, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Override `ViewWillAppear()` to call `ToUI()`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update `ToUI()` so that it populates `UILabel` using the private `_park` variable,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, add `SetNavData()` and `ToUI()` methods to `EditViewController` that has
    the same function as `DetailViewController`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have taken care of receiving navigation data, we turn our attention
    to passing data. When using segues, iOS view controller has the `PrepareForSegue()`
    method that can be overridden to prepare the target view controller for display.
    We need to override `PrepareForSegue()` in both `MasterViewController` and `DetailViewController`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To complete the logic to pass navigation data, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `MasterViewController` and locate the existing `PrepareForSegue()` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`MasterViewController` actually has two segues: the original segue that navigates
    to `DetailViewController` and the new one we added that navigates to `EditViewController`.
    The `PrepareForSegue()` method provides a segue parameter that has an `Identifier`
    property that can be used to determine which navigation path is being taken. Change
    the code in `PrepareForSegue()` so that it calls `SetNavData()` on the appropriate
    view controller based on the segue identifier, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, open `DetailViewController` and create an override for `PrepareForSegue()`
    that passes navigation data to `EditViewController`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Running the app
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We have made a lot of changes and are now ready to run the app to test the
    basic navigation. Start the app and test navigation to the various views; observe
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: When you click the **+** (add) button on `MasterViewController`, a new national
    park is displayed in `EditViewController`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you click the **Edit** button on `DetailViewController`, the app navigates
    to `EditViewController` that shows the current park.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you click on **Done** on `EditViewController`, it will take you to the
    previous view controller, either `MasterViewController` or `DetailViewController`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you click on **Delete** on `EditViewController`, it will take you to `MasterViewController`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshots depict what you should see:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running the app](img/0838OT_04_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Finishing the sample app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The view controllers and navigation are now in place. All we need now is to
    add some addition controls to view and edit information and a little logic.
  prefs: []
  type: TYPE_NORMAL
- en: Finishing DetailViewController
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To finish `DetailViewController`, we need a set of `UILabel` controls that can
    be used to display the properties of a park, and add buttons that can initiate
    actions to view photos or receive directions.
  prefs: []
  type: TYPE_NORMAL
- en: 'To finish `DetailViewController`, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a `UIScrollView` onto the View for `DetailViewController`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add `UILabel` controls for each property defined on `NationalPark` except for
    the `Id` property. Also add `UILabel` controls that can be used as labels for
    the properties. Use the screen mockups from the *The sample national parks app*
    section as a guide to lay out the controls.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a name for each `UILabel` control that will be used to display park properties
    so that outlets can be created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the `ToUI()` method so that the `UILabel` controls are populated with
    data from the park, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add a `UIButton` instance with a title of photos with an action named `PhotoClicked`
    in the `Touch Down` event.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add an implementation for the `PhotoClicked` action, which opens a URL to view
    photos on [www.bing.com](http://www.bing.com) that uses the park''s name as the
    search parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add a `UIButton` instance with a title of directions with an action named `DirectionsClicked`
    in the `Touch Down` event.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add an implementation for the `DirectionsClicked` action, which opens a URL
    to receive directions to a park that uses the park''s latitude and longitude coordinates:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add appropriate constraints to `UIScrollView` and and `UILables` so that scrolling
    and layout works as desired in the landscape and portrait modes. Take a look at
    the example for more clarity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finishing EditViewController
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To finish `EditViewController`, we need to add labels and edit controls in order
    to edit the park data. We also need to do some data conversion and save the updates.
  prefs: []
  type: TYPE_NORMAL
- en: 'To finish `EditViewController`, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a `UIScrollView` instance on the View for `EditViewController`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add controls to the `EditViewController` class along with the corresponding
    outlets to allow editing of each property on the `NationalPark` entity. The `UITextField`
    controls can be used for everything except the description property, which is
    better suited to a `UITextView` control. Also add `UITextLabel` controls to label
    properties of the park. You can again use the screen mockups from the *The sample
    national parks app* section as a guide.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the `ToUI()` method to account for the new fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new method that moves data from the UI controls to the entity class
    prior to saving it, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `DoneClicked()` action to call `ToPark()` in order to move values
    to the park object prior to saving changes to `NationalParks.json`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add appropriate constraints to `UIScrollView` and `UITextFields` so that scrolling
    and layout works as desired in landscape and portrait modes. Take a look at the
    reference solution for more clarity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add logic to scroll the active `UITextField` into view when the keyboard is
    displayed. There are several methods of accomplishing this. Refer to the example
    for reference solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Running the app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Okay, we now have a fairly functional app. Run the app in the simulator and
    test each screen and navigation path. The following screenshots show the final
    result of the three view controllers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running the app](img/0838OT_04_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: MonoTouch.Dialog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**MonoTouch.Dialog** (**MT.D**) is a framework for Xamarin.iOS that provides
    a declarative approach to develop the user interface and eliminates writing a
    lot of the tedious code. MT.D is based on using `UITableView` controls to provide
    navigation and allow users to interact with data.'
  prefs: []
  type: TYPE_NORMAL
- en: More information about MT.D can be found at [http://docs.xamarin.com/guides/ios/user_interface/monotouch.dialog/](http://docs.xamarin.com/guides/ios/user_interface/monotouch.dialog/).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we created a sample Xamarin.iOS app and demonstrated the concepts
    that need to be understood to work with the Xamarin.iOS platform. While we did
    not demonstrate all of the features that we can use in an iOS app, you should
    now feel comfortable with how to access these features.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will build the same sample app for Android.
  prefs: []
  type: TYPE_NORMAL
