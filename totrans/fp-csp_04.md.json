["```cs\npublic Tower GetTower(int towerId)\n{\n     var tower = _gameState.GetTowerById(towerId);\n     return tower;\n}\n```", "```cs\npublic void UpgradeTower(TowerUpgradeInfo upgradeInfo)\n{\n     _gameState.UpgradeTower(upgradeInfo);\n}\n```", "```cs\npublic abstract class Enemy {}\npublic class GroundEnemy : Enemy\n{\n     public int Speed { get; set; }\n     public int Armor { get; set; }\n}\npublic class FlyingEnemy : Enemy\n{\n     public int Altitude { get; set; }\n     public int DodgeChance { get; set; }\n}\npublic class BossEnemy : Enemy\n{\n     public int Health { get; set; }\n     public string SpecialAbility { get; set; }\n}\npublic string GetEnemyDetails(Enemy? enemy)\n{\n     // Your code here\n}\n```", "```cs\npublic static int Divide(int numerator, int denominator)\n{\n    return numerator / denominator;\n}\n```", "```cs\nvar user = FindUserById(userId);\nvar fullName = $\"{user.FirstName} {user.LastName}\";\n```", "```cs\nstring notNullable = \"Hello, World!\";\nstring? nullable = null;\n```", "```cs\nstring notNullable = \"Hello, World!\";\nnotNullable = null!;\n```", "```cs\n#nullable enable\n```", "```cs\nstring name = null; // This will trigger a warning\nstring? maybeName = null; // This is okay\n```", "```cs\n#nullable disable\n```", "```cs\n#nullable enable warnings\n```", "```cs\n#nullable enable annotations\n```", "```cs\n<PropertyGroup>\n    <Nullable>enable</Nullable>\n</PropertyGroup>\n```", "```cs\n#nullable enable\n// The section of the code where nullable reference types are enabled.\n#nullable restore\n```", "```cs\nUserProfile GetUserProfile(int userId);\n```", "```cs\nUserProfile? GetUserProfile(int userId);\n```", "```cs\nvar userProfile = GetUserProfile(userId);\nif (userProfile is null)\n{\n    // Handle the scenario when the profile is not available\n}\nelse\n{\n    // Proceed with the user profile data\n}\n```", "```cs\nList<Order> GetOrdersForUser(int userId)\n{\n    return ordersRepository.FindByUserId(userId) ?? new List<Order>();\n}\n```", "```cs\nProduct? FindProductById(int productId)\n{\n    return productsRepository.GetById(productId);\n}\n```", "```cs\npublic void UpdateUserProfile(UserProfile profile)\n{\n    // Some operations on profile\n}\n```", "```cs\n#nullable enable\npublic void UpdateUserProfile(UserProfile profile)\n{\n    // Some operations on profile\n}\n```", "```cs\npublic void UpdateUserProfile(UserProfile profile)\n{\n    if (profile is null)\n    {\n        throw new ArgumentNullException(nameof(profile), \"Profile cannot be null!\");\n    }\n    // Some operations on profile\n}\n```", "```cs\npublic void UpdateUserProfile(UserProfile profile)\n{\n    Contract.Requires<ArgumentNullException>(profile != null, \"Profile cannot be null!\");\n    // Some operations on profile\n}\n```", "```cs\npublic void UpdateUserProfile(UserProfile profile)\n{\n    ArgumentNullException.ThrowIfNull(profile);\n    // Some operations on profile\n}\n```", "```cs\npublic void UpdateUserEmail(long userId, string email)\n{\n    ArgumentException.ThrowIfNullOrEmpty(email);\n    // Updating the email after finding the user by ID\n}\n```", "```cs\nobject tower = GetRandomTower();\nswitch (tower)\n{\n    case ArcherTower a:\n        Console.WriteLine($\"It's an Archer Tower with a range of {a.Range}!\");\n        break;\n    case CannonTower c:\n        Console.WriteLine($\"It's a Cannon Tower with an explosion radius of {c.ExplosionRadius}!\");\n        break;\n    default:\n        throw new Exception(\"Unknown tower type!\");\n        break;\n}\n```", "```cs\nUserProfile? profile = GetUserProfile(userId);\n```", "```cs\nif (profile is null)\n{\n    Console.WriteLine(\"Profile not found.\");\n}\nelse\n{\n    Console.WriteLine($\"Welcome, {profile.Name}!\");\n}\n```", "```cs\npublic class Book\n{\n    public bool IsPublished { get; set; }\n    public bool IsDraft { get; set; }\n}\nstring bookStatus = book switch\n{\n    null => \"No book found\",\n    { IsPublished: true, IsDraft: false } => \"Published Book\",\n    { IsPublished: false, IsDraft: true } => \"Draft Book\",\n    { IsPublished: false, IsDraft: false } => \"Unpublished Book\",\n    _ => \"Unknown book status\"\n};\n```", "```cs\nif (user != null)\n{\n    user.PerformOperation();\n}\n```", "```cs\npublic interface IUser\n{\n    void PerformOperation();\n}\npublic class User : IUser\n{\n    public void PerformOperation()\n    {\n        // Actual implementation here\n    }\n}\npublic class NullUser : IUser\n{\n    public void PerformOperation()\n    {\n        // Do nothing: this is a null object\n    }\n}\n```", "```cs\nuser.PerformOperation();\n```", "```cs\npublic struct Option<T>\n{\n     private readonly bool _isSome;\n     private readonly T _value;\n     public static Option<T> None => default;\n     public static Option<T> Some(T value) => new Option<T>(value);\n     Option(T value)\n     {\n          _value = value;\n          _isSome = _value is not null;\n     }\n     public bool IsSome(out T value)\n     {\n          value = _value;\n          return _isSome;\n     }\n}\n```", "```cs\npublic Option<UserProfile> GetUserProfile(int userId)\n{\n    var user = database.FindUserById(userId);\n    return new Option<UserProfile>(user);\n}\n```", "```cs\npublic Option<UserProfile> GetUserProfile(int userId)\n{\n    var user = database.FindUserById(userId);\n    return user is not null\n   ? Option<UserProfile>.Some(user)\n   : Option<UserProfile>.None;\n}\n```", "```cs\nvar profileOption = GetUserProfile(userId);\nUserProfile profile;\nif (!profileOption.IsSome(out profile))\n{\n     // Handle the scenario when the profile is not available\n}\n// Continue with profile operations\n```", "```cs\npublic Video GetVideoDetails(int videoId)\n{\n    var video = database.FindVideoById(videoId);\n    if (video == null)\n    {\n        throw new VideoNotFoundException($\"Video with ID {videoId} not found.\");\n    }\n    return video;\n}\n```", "```cs\npublic Option<Video> GetVideoDetails(int videoId)\n{\n    var video = database.GetVideoById(videoId);\n    return new Option<Video>(video);\n}\n```", "```cs\npublic string GetVideoDetails(Video video)\n{\n    if (video is LiveStream)\n    {\n        var liveStream = video as LiveStream;\n        return $\"Live Stream titled '{liveStream.Title}' is currently {liveStream.Status}.\";\n    }\n    else if (video is Video360)\n    {\n        var video360 = video as Video360;\n        return $\"360-Degree Video titled '{video360.Title}' with a resolution of {video360.Resolution}.\";\n    }\n    // ... and so on for other video types\n    else\n    {\n        return \"Unknown video type.\";\n    }\n}\n```", "```cs\npublic string GetVideoDetails(Video video)\n{\n    return video switch\n    {\n        LiveStream l => $\"Live Stream titled '{l.Title}' is currently {l.Status}.\",\n        Video360 v => $\"360-Degree Video titled '{v.Title}' with a resolution of {v.Resolution}.\",\n        StandardUpload s => $\"Standard video titled '{s.Title}' uploaded on {s.UploadDate}.\",\n        _ => \"Unknown video type.\"\n    };\n}\n```", "```cs\npublic Video GetVideo(int videoId)\n{\n    var video = database.FindVideoById(videoId);\n    if (video == null)\n    {\n        throw new VideoNotFoundException($\"Video with ID {videoId} not found.\");\n    }\n    return video;\n}\n```", "```cs\nvar video = GetVideo(videoId);\nif(video != null)\n{\n    Display(video);\n}\nelse\n{\n    ShowError(\"Video not found\");\n}\n```", "```cs\npublic class NullVideo : Video\n{\n    public override string Title => \"Video not available\";\n    public override string Description => \"This video is currently not available.\";\n    // Other default properties or methods...\n}\n```", "```cs\npublic Video GetVideo(int videoId)\n{\n    return database.FindVideoById(videoId) ?? new NullVideo();\n}\n```", "```cs\nvar video = GetVideo(someId);\nDisplay(video); // No special null handling here\n```", "```cs\n    #nullable enable\n    // The section of the code where nullable reference types are enabled.\n    #nullable restore\n    ```", "```cs\n    public void ProcessData(string? data)\n    {\n        if (data is null)\n        {\n            throw new ArgumentNullException(nameof(data));\n        }\n        // Rest of the processing...\n    }\n    ```", "```cs\n    [Test]\n    public void GetUser_NullInput_ThrowsException()\n    {\n        // arrange part of the test\n        // act & assert\n        Assert.Throws<ArgumentNullException>(() => sut.GetUser(null));\n    }\n    ```", "```cs\n    [Test]\n    public void GetUser_PresetUserId_ReturnsProfile()\n    {\n        // arrange part of the test\n        // act\n        var result = sut.GetUser(123);\n        // assert\n        User user;\n        if (!result.IsSome(out user))\n        {\n            Assert.Fail(\"Expected a user profile.\");\n        }\n        // The rest of the assertions\n    }\n    ```", "```cs\npublic Tower GetTowerByPosition(Vector2 position)\n{\n     var tower = _gameMap.FindTowerAt(position);\n     return tower;\n}\n```", "```cs\npublic void ApplyPowerUp(Tower tower, PowerUp powerUp)\n{\n     tower.ApplyPowerUp(powerUp);\n     _gameState.UpdateTower(tower);\n}\n```", "```cs\npublic abstract class Enemy {}\npublic class Goblin : Enemy\n{\n     public int Strength { get; set; }\n     public bool HasWeapon { get; set; }\n}\npublic class Dragon : Enemy\n{\n     public int FireBreathDamage { get; set; }\n     public int WingSpan { get; set; }\n}\npublic class Wizard : Enemy\n{\n     public string[] Spells { get; set; }\n     public int MagicPower { get; set; }\n}\npublic string DescribeEnemy(Enemy? enemy)\n{\n     // Your implementation here\n}\n```", "```cs\npublic Option<Tower> GetTowerByPosition(Vector2 position)\n{\n     var tower = _gameMap.FindTowerAt(position);\n     return Option<Tower>.Some(tower);\n}\n```", "```cs\npublic void ApplyPowerUp(Tower? tower, PowerUp? powerUp)\n{\n     ArgumentNullException.ThrowIfNull(tower, nameof(tower));\n     ArgumentNullException.ThrowIfNull(powerUp, nameof(powerUp));\n     tower.ApplyPowerUp(powerUp);\n     _gameState.UpdateTower(tower);\n}\n```", "```cs\npublic string DescribeEnemy(Enemy? enemy)\n{\n     return enemy switch\n     {\n                  Goblin g => $\"A goblin with {g.Strength} strength, {(g.HasWeapon ? \"armed\" : \"unarmed\")}.\",\n                  Dragon d => $\"A dragon with {d.FireBreathDamage} fire breath damage and a {d.WingSpan}m wingspan.\",\n                  Wizard w => $\"A wizard with {w.MagicPower} magic power, knowing {w.Spells.Length} spells.\",\n                  null => \"No enemy in sight.\",\n                  _ => \"An unknown enemy approaches!\"\n     };\n}\n```"]