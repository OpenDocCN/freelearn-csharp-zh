["```cs\nvar itemCollection = new BlockingCollection<string>(new \n```", "```cs\n    ConcurrentStack<string>(), 100);\n```", "```cs\n    <Grid.RowDefinitions>\n        <RowDefinition Height=\"Auto\"/>\n        <RowDefinition Height=\"*\"/>\n    </Grid.RowDefinitions>\n    <Grid.ColumnDefinitions>\n        <ColumnDefinition/>\n        <ColumnDefinition/>\n    </Grid.ColumnDefinitions>\n    ```", "```cs\n    <ComboBox x:Name=\"LettersComboBox\"\n                Grid.Row=\"0\" Grid.Column=\"0\"\n                Margin=\"4\">\n        <ComboBoxItem Content=\"A\"/>\n        <ComboBoxItem Content=\"D\"/>\n        <ComboBoxItem Content=\"F\"/>\n        <ComboBoxItem Content=\"G\"/>\n        <ComboBoxItem Content=\"M\"/>\n        <ComboBoxItem Content=\"O\"/>\n        <ComboBoxItem Content=\"A\"/>\n        <ComboBoxItem Content=\"T\"/>\n        <ComboBoxItem Content=\"W\"/>\n    </ComboBox>\n    <Button Grid.Row=\"0\" Grid.Column=\"1\"\n            Margin=\"4\" Content=\"Load Words\"\n            Click=\"Button_Click\"/>\n    ```", "```cs\n    <ListView x:Name=\"WordsListView\" Margin=\"4\"\n                Grid.Row=\"1\" Grid.ColumnSpan=\"2\"/>\n    ```", "```cs\n    private async Task<BlockingCollection<string>> \n        LoadBookLinesFromFile()\n    {\n        var lines = new BlockingCollection<string>();\n        using var reader = File.OpenText(Path.Combine(\n            Path.GetDirectoryName(Assembly\n                .GetExecutingAssembly().Location), \n                    \"ulysses.txt\"));\n        string line;\n        while ((line = await reader.ReadLineAsync()) != \n            null)\n        {\n            lines.Add(line);\n        }\n        lines.CompleteAdding();\n        return lines;\n    }\n    ```", "```cs\n    private BlockingCollection<string> \n        GetWords(BlockingCollection<string> lines)\n    {\n        var words = new BlockingCollection<string>();\n        Parallel.ForEach(lines.GetConsumingPartitioner(), \n            (line) =>\n        {\n            var matches = Regex.Matches(line, \n                @\"\\b[\\w']*\\b\");\n            foreach (var m in matches.Cast<Match>())\n            {\n                if (!string.IsNullOrEmpty(m.Value))\n                {\n                    words.TryAdd(TrimSuffix(m.Value, \n                        '\\''));\n                }\n            }\n        });\n        words.CompleteAdding();\n        return words;\n    }\n    private string TrimSuffix(string word, char \n        charToTrim)\n    {\n        int charLocation = word.IndexOf(charToTrim);\n        if (charLocation != -1)\n        {\n            word = word[..charLocation];\n        }\n        return word;\n    }\n    ```", "```cs\n    private async Task<List<string>> GetWordsByLetter(char \n        letter)\n    {\n        BlockingCollection<string> lines = await \n            LoadBookLinesFromFile();\n        BlockingCollection<string> words = \n            GetWords(lines);\n        // 275,506 words in total\n        return words.GetConsumingPartitioner()\n            .AsParallel()\n            .Where(w => w.StartsWith(letter) || \n                w.StartsWith(char.ToLower(letter)))\n            .ToList();\n    }\n    ```", "```cs\n    private async void Button_Click(object sender, \n        RoutedEventArgs e)\n    {\n        if (LettersComboBox.SelectedIndex < 0)\n        {\n            MessageBox.Show(\"Please select a letter.\");\n            return;\n        }\n        WordsListView.ItemsSource = await \n            GetWordsByLetter(\n            char.Parse(GetComboBoxValue(LettersComboBox\n                .SelectedValue)));\n    }\n    private string GetComboBoxValue(object item)\n    {\n        var comboxItem = item as ComboBoxItem;\n        return comboxItem.Content.ToString();\n    }\n    ```", "```cs\n    using System.Collections.Concurrent;\n    using System.Collections.Generic;\n    using System.IO;\n    using System.Linq;\n    using System.Reflection;\n    using System.Text.RegularExpressions;\n    using System.Threading.Tasks;\n    using System.Windows;\n    using System.Windows.Controls;\n    ```", "```cs\n    public class ImposterPdfData\n    {\n        private string _plainText;\n        private byte[] _data;\n        public ImposterPdfData(string plainText)\n        {\n            _plainText = plainText;\n            _data = System.Text.Encoding.ASCII.GetBytes\n                (plainText);\n        }\n        public string PlainText => _plainText;\n        public byte[] PdfData => _data;\n    }\n    ```", "```cs\n    public class PdfParser\n    {\n        private ImposterPdfData? _pdf;\n        public void SetPdf(ImposterPdfData pdf) => \n            _pdf = pdf;\n        public ImposterPdfData? GetPdf() => _pdf;\n        public string GetPdfAsString()\n        {\n            if (_pdf != null)\n                return _pdf.PlainText;\n            else\n                return \"\";\n        }\n        public byte[] GetPdfBytes()\n        {\n            if (_pdf != null)\n                return _pdf.PdfData;\n            else\n                return new byte[0];\n        }\n    }\n    ```", "```cs\n    public void AppendString(string data)\n    {\n        string newData;\n        if (_pdf == null)\n        {\n            newData = data;\n        }\n        else\n        {\n            newData = _pdf.PlainText + Environment.NewLine \n                + data;\n        }\n        _pdf = new ImposterPdfData(newData);\n    }\n    ```", "```cs\n    public class PdfWorkerPool\n    {\n        private ConcurrentBag<PdfParser> _workerPool = \n            new();\n        public PdfWorkerPool()\n        {\n            // Add initial worker\n            _workerPool.Add(new PdfParser());\n        }\n        public PdfParser Get() => _workerPool.TryTake(out \n            var parser) ? parser : new PdfParser();\n        public void Return(PdfParser parser) => \n            _workerPool.Add(parser);\n        public int WorkerCount => _workerPool.Count();\n    }\n    ```", "```cs\n    using ConcurrentBag.PdfProcessor;\n    Console.WriteLine(\"Hello, ConcurrentBag!\");\n    var pool = new PdfWorkerPool();\n    Parallel.For(0, 15, async (i) =>\n    {\n        var parser = pool.Get();\n        var data = new ImposterPdfData($\"Data index: {i}\");\n        try\n        {\n            parser.SetPdf(data);\n            parser.AppendString(DateTime.UtcNow\n                .ToShortDateString());\n            Console.WriteLine($\"\n               {parser.GetPdfAsString()}\");\n            Console.WriteLine($\"Parser count: \n                {pool.WorkerCount}\");\n            await Task.Delay(100);\n        }\n        finally\n        {\n            pool.Return(parser);\n            await Task.Delay(250);\n        }\n    });\n    Console.WriteLine(\"Press the Enter key to exit.\");\n    Console.ReadLine();\n    ```", "```cs\n    public class Drug\n    {\n        public string? Id { get; set; }\n        public string? Ndc { get; set; }\n        public string? TypeName { get; set; }\n        public string? ProprietaryName { get; set; }\n        public string? NonProprietaryName { get; set; }\n        public string? DosageForm { get; set; }\n        public string? Route { get; set; }\n        public string? SubstanceName { get; set; }\n    }\n    ```", "```cs\n    using System.Collections.Concurrent;\n    using System.Data;\n    using System.Reflection;\n    namespace FdaNdcDrugLookup\n    {\n        public class DrugService\n        {\n            private ConcurrentDictionary<string, Drug> \n                _drugData = new();\n        }\n    }\n    ```", "```cs\n    public void LoadData(string fileName)\n    {\n        using DataTable dt = new();\n        using StreamReader sr = new(Path.Combine(\n            Path.GetDirectoryName(Assembly\n                .GetExecutingAssembly().Location), \n                   fileName));\n        var del = new char[] { '\\t' };\n        string[] colheaders = sr.ReadLine().Split(del);\n        foreach (string header in colheaders)\n        {\n            dt.Columns.Add(header); // add headers\n        }\n        while (sr.Peek() > 0)\n        {\n            DataRow dr = dt.NewRow(); // add rows\n            dr.ItemArray = sr.ReadLine().Split(del);\n            dt.Rows.Add(dr);\n        }\n        foreach (DataRow row in dt.Rows)\n        {\n            Drug drug = new(); // map to Drug object\n            foreach (DataColumn column in dt.Columns)\n            {\n                switch (column.ColumnName)\n                {\n                    case \"PRODUCTID\":\n                        drug.Id = row[column].ToString();\n                        break;\n                    case \"PRODUCTNDC\":\n                        drug.Ndc = row[column].ToString();\n                        break;\n    ...\n    // REMAINING CASE STATEMENTS IN GITHUB\n                }\n            }\n            _drugData.TryAdd(drug.Ndc, drug);\n        }\n    }\n    ```", "```cs\nhttps://github.com/PacktPublishing/Parallel-Programming-and-Concurrency-with-C-sharp-10-and-.NET-6/tree/main/chapter09/FdaNdcDrugLookup.\n```", "```cs\n    public Drug GetDrugByNdc(string ndcCode)\n    {\n        bool result = _drugData.TryGetValue(ndcCode, out \n            var drug);\n        if (result && drug != null)\n            return drug;\n        else\n            return new Drug();\n    }\n    ```", "```cs\n    private DrugService _drugService = new();\n    ```", "```cs\n    private async void btnLoad_Click(object sender, \n        EventArgs e)\n    {\n        var t1 = Task.Run(() => _drugService.LoadData\n            (\"product.txt\"));\n        var t2 = Task.Run(() => _drugService.LoadData\n            (\"product2.txt\"));\n        await Task.WhenAll(t1, t2);\n        btnLookup.Enabled = true;\n        btnLoad.Enabled = false;\n    }\n    ```", "```cs\n    private void btnLookup_Click(object sender, \n        EventArgs e)\n    {\n        if (!string.IsNullOrWhiteSpace(txtNdc.Text))\n        {\n            var drug = _drugService.GetDrugByNdc\n               (txtNdc.Text);\n            txtDrugName.Text = drug.ProprietaryName;\n        }\n    }\n    ```", "```cs\n    public class Order\n    {\n        public int Id { get; set; }\n        public string? ItemName { get; set; }\n        public int ItemQty { get; set; }\n        public int CustomerId { get; set; }\n        public decimal OrderTotal { get; set; }\n    }\n    ```", "```cs\n    using System.Collections.Concurrent;\n    namespace ConcurrentOrderQueue\n    {\n        public class OrderService\n        {\n            private ConcurrentQueue<Order> _orderQueue = \n                new();\n        }\n    }\n    ```", "```cs\n    public List<Order> DequeueOrders()\n    {\n        List<Order> orders = new();\n        while (_orderQueue.TryDequeue(out var order))\n        {\n            orders.Add(order);\n        }\n        return orders;\n    }\n    ```", "```cs\n    public async Task EnqueueOrders()\n    {\n        var t1 = EnqueueOrders(1);\n        var t2 = EnqueueOrders(2);\n        await Task.WhenAll(t1, t2);\n    }\n    private async Task EnqueueOrders(int customerId)\n    {\n        for (int i = 1; i < 6; i++)\n        {\n            var order = new Order\n            {\n                Id = i * customerId,\n                CustomerId = customerId,\n                ItemName = \"Widget for customer \" + \n                    customerId,\n                ItemQty = 20 - (i * customerId)\n            };\n            order.OrderTotal = order.ItemQty * 5;\n            _orderQueue.Enqueue(order);\n            await Task.Delay(100 * customerId);\n        }\n    }\n    ```", "```cs\n    using ConcurrentOrderQueue;\n    Console.WriteLine(\"Hello, World!\");\n    var service = new OrderService();\n    await service.EnqueueOrders();\n    var orders = service.DequeueOrders();\n    foreach(var order in orders)\n    {\n        Console.WriteLine(order.ItemName);\n    }\n    ```", "```cs\n    private async Task<BlockingCollection<string>> \n        LoadBookLinesFromFile()\n    {\n        var lines = new BlockingCollection<string>(new \n            ConcurrentStack<string>());\n        ...\n        return lines;\n    }\n    ```"]