["```cs\n    @page \"/ch03r01\"\n    @rendermode InteractiveWebAssembly\n    ```", "```cs\n    @code {\n        protected bool ShowTickets { get; set; }\n    }\n    ```", "```cs\n    private void ToggleTickets()\n        => ShowTickets = !ShowTickets;\n    ```", "```cs\n    <button class=\"btn btn-sm btn-success\"\n        @onclick=\"@ToggleTickets\">\n        Toggle Tickets\n    </button>\n    ```", "```cs\n    @if (!ShowTickets) return;\n    <hr />\n    ```", "```cs\n    @foreach (var ticket in Tickets.All)\n    {\n        <div class=\"d-flex justify-content-between mb-1\"\n             id=\"ticket-@ticket.Id\">\n            <div>@ticket.Title</div>\n        </div>\n    }\n    ```", "```cs\npublic Task InvokeAsync(object? arg)\n{\n    if (Receiver == null)\n    {\n        return EventCallbackWorkItem\n            .InvokeAsync<object?>(Delegate, arg);\n    }\n    return Receiver\n        .HandleEventAsync(\n            EventCallbackWorkItem(Delegate),arg);\n}\n```", "```cs\nTask IHandleEvent.HandleEventAsync(\n    EventCallbackWorkItem callback, object? arg)\n{\n    // ...\n    StateHasChanged();\n    // ...\n}\n```", "```cs\n    protected Ticket SelectedTicket;\n    ```", "```cs\n    private void Show(Ticket ticket)\n        => SelectedTicket = ticket;\n    ```", "```cs\n    <div>@ticket.Title</div>\n    <div>\n        <button class=\"btn btn-sm btn-success\"\n                @onclick=@(() => Show(ticket))>\n            Show details\n        </button>\n        <button class=\"btn btn-sm btn-success\"\n                @onclick=@(() => ticket.Stock += 5)>\n            Top up\n        </button>\n    </div>\n    ```", "```cs\n    @if (SelectedTicket is null) return;\n    <hr />\n    ```", "```cs\n    <div>Title: @SelectedTicket.Title</div>\n    <div>Price: @SelectedTicket.Price</div>\n    <div>Stock: @SelectedTicket.Stock</div>\n    ```", "```cs\n    @code {\n        [Parameter, EditorRequired]\n        public EventCallback OnShow { get; set; }\n        [Parameter, EditorRequired]\n        public EventCallback OnTopUp { get; set; }\n        [Parameter, EditorRequired]\n        public EventCallback OnRemove { get; set; }\n    }\n    ```", "```cs\n    <button class=\"btn btn-sm btn-success\"\n            @onclick=\"@OnShow\">\n        Show\n    </button>\n    <button class=\"btn btn-sm btn-info\"\n            @onclick=\"@OnTopUp \">\n        Top up\n    </button>\n    <button class=\"btn btn-sm btn-danger\"\n            @onclick=\"@OnRemove\">\n        Remove\n    </button>\n    ```", "```cs\n    private void TopUp(Ticket ticket)\n        => ticket.Stock += 5;\n    private void Remove(Ticket ticket)\n        => Tickets.All.Remove(ticket);\n    ```", "```cs\n    <div>@ticket.Title</div>\n    <div>\n        <TicketOptions\n            OnShow=\"@(() => Show(ticket))\"\n            OnTopUp=\"@(() => TopUp(ticket))\"\n            OnRemove=\"@(() => Remove(ticket))\" />\n    </div>\n    ```", "```cs\n    internal string Creator = string.Empty;\n    ```", "```cs\n    private void MonitorCreation(KeyboardEventArgs args)\n    {\n        if (args.Key == \"+\")\n        {\n            Tickets.All.Add(new() { Title = Creator });\n            Creator = string.Empty;\n            return;\n        }\n        if (args.IsBackspace() && Creator.Length > 0)\n        {\n            Creator = Creator[..^1];\n            return;\n        }\n        if (args.IsLetter())\n        {\n            Creator += args.Key;\n            return;\n        }\n    }\n    ```", "```cs\n    <h5>Quick creation</h5>\n    <p>\n        <input value=\"@Creator\"\n               @onkeydown=\"MonitorCreation\"\n               @onkeydown:preventDefault />\n    </p>\n    ```", "```cs\nprivate void MonitorCreation(KeyboardEventArgs args)\n{\n    if (args.IsComposing) return;\n    //rest of the processing logic obscured for simplicity\n}\n```", "```cs\n    <div class=\"d-flex justify-content-between mb-1\"\n         id=\"ticket-@ticket.Id\"\n         @onclick=\"() => Show(ticket)\">\n        @* here's still the ticket container body *@\n    </div>\n    ```", "```cs\n    <button class=\"btn btn-sm btn-success\"\n            @onclick=\"@OnShow\"\n            @onclick:stopPropagation>\n        Show\n    </button>\n    <button class=\"btn btn-sm btn-info\"\n            @onclick=\"@OnTopUp\"\n            @onclick:stopPropagation>\n        Top up\n    </button>\n    <button class=\"btn btn-sm btn-danger\"\n            @onclick=\"@OnRemove\"\n            @onclick:stopPropagation>\n        Remove\n    </button>\n    ```", "```cs\n    export function afterWebStarted(blazor) {\n        blazor.registerCustomEventType('preventcopy', {\n            browserEventName: 'copy',\n            createEventArgs: event => {\n                event.clipboardData.setData('text/plain',\n                    '-------');\n                event.preventDefault();\n                return {\n                    stamp: new Date()\n                };\n            }\n        });\n    }\n    ```", "```cs\n    public class PreventedCopyEventArgs : EventArgs\n    {\n        public DateTime Stamp { get; init; }\n    }\n    ```", "```cs\n    [EventHandler(\"onpreventcopy\",\n        typeof(PreventedCopyEventArgs))]\n    public static class EventHandlers { }\n    ```", "```cs\n    @code {\n        [Parameter, EditorRequired]\n        public RenderFragment ChildContent { get; set; }\n        private void Log(PreventedCopyEventArgs args)\n            => Console.WriteLine(\n                $\"Prevented data leak at {args.Stamp}\n                    UTC.\");\n    }\n    ```", "```cs\n    <div @onpreventcopy=\"@Log\">\n         @ChildContent\n    </div>\n    ```", "```cs\n    <PreventCopy>\n        <div>Title: @SelectedTicket.Title</div>\n        <div>Price: @SelectedTicket.Price</div>\n        <div>Stock: @SelectedTicket.Stock</div>\n    </PreventCopy>\n    ```", "```cs\n    @code {\n        [Parameter, EditorRequired]\n        public Func<Task> Job { get; set; }\n        [Parameter, EditorRequired]\n        public RenderFragment ChildContent { get; set; }\n    }\n    ```", "```cs\n    internal bool IsLoading;\n    private async Task RunAsync()\n    {\n        IsLoading = true;\n        StateHasChanged();\n        await Job.Invoke();\n        IsLoading = false;\n    }\n    ```", "```cs\n    <button class=\"btn btn-sm btn-success\"\n            @onclick=\"@RunAsync\"\n            disabled=\"@IsLoading\">\n        Load\n    </button>\n    ```", "```cs\n    @if (IsLoading)\n    {\n        <hr />\n        <p>Loading...</p>\n    }\n    else\n    {\n        @ChildContent\n    }\n    ```", "```cs\n    @code {\n        [Parameter, EditorRequired]\n        public Func<int, Task> Job { get; set; }\n        [Parameter, EditorRequired]\n        public int Total { get; set; }\n    }\n    ```", "```cs\n    internal double Progress = 0;\n    ```", "```cs\n    private string Label\n        => Progress > 0 ? $\"Processing {Progress:0%}\"\n                        : \"Process\";\n    ```", "```cs\n    private async Task RunAsync()\n    {\n        for (int i = 0; i < Total; i++)\n        {\n            Progress = 1.0 * (1 + i) / Total;\n            StateHasChanged();\n            await Job.Invoke(i);\n        }\n        Progress = 0;\n    }\n    ```", "```cs\n    <button class=\"btn btn-sm btn-success\"\n            @onclick=\"@RunAsync\"\n            disabled=\"@(Progress > 0)\">\n        @Label\n    </button>\n    ```", "```cs\n    public Task SaveAsync(int index)\n        => Tickets.SaveAsync(Tickets.All[index]);\n    ```", "```cs\n    <ProgressIndicator Job=\"SaveAsync\" Total=\"@Tickets.All.Count\" />\n    ```", "```cs\n    <LoadingIndicator Job=\"@(() => Tickets.GetAsync())\">\n        <hr />\n        @foreach (var ticket in Tickets.All)\n        {\n            @* here's still the ticket container markup *@\n        }\n    </LoadingIndicator>\n    ```"]