["```cs\n<Grid.ColumnDefinitions> \n    <ColumnDefinition Width=\"Auto\"/> \n    <ColumnDefinition Width=\"15\"/> \n    <ColumnDefinition Width=\"*\"/> \n</Grid.ColumnDefinitions> \n<Grid.RowDefinitions> \n    <RowDefinition Height=\"Auto\"/> \n    <RowDefinition Height=\"Auto\"/> \n    <RowDefinition Height=\"10\"/> \n    <RowDefinition Height=\"Auto\"/> \n</Grid.RowDefinitions> \n```", "```cs\n<!-- Row 0 --> \n<TextBlock Text=\"Your department\" \n           Grid.Row=\"0\" Grid.Column=\"0\"/> \n<TextBlock Text=\":\" \n           Grid.Row=\"0\" Grid.Column=\"1\" \n           HorizontalAlignment=\"Center\"/> \n<TextBlock Text=\"{Binding Department, ElementName=window}\" \n           Margin=\"0 2\" \n           Grid.Row=\"0\" Grid.Column=\"2\"/> \n\n<!-- Row 1 --> \n<TextBlock Text=\"Your name\" \n           Grid.Row=\"1\" Grid.Column=\"0\"/> \n<TextBlock Text=\":\" \n           Grid.Row=\"1\" Grid.Column=\"1\" \n           HorizontalAlignment=\"Center\"/> \n<TextBox Text=\"{Binding PersonName, ElementName=window, Mode=TwoWay}\" \n         Margin=\"0 2\" \n         Grid.Row=\"1\" Grid.Column=\"2\"/> \n\n<!-- Row 3 --> \n<StackPanel Orientation=\"Horizontal\" \n            HorizontalAlignment=\"Center\" \n            Grid.Row=\"3\" Grid.Column=\"0\" \n            Grid.ColumnSpan=\"3\"> \n    <Button Content=\"Submit\" \n            Margin=\"4\" Width=\"80\" \n            Click=\"OnSubmit\"/> \n    <Button Content=\"Reset\" \n            Margin=\"4\" Width=\"80\" \n            Click=\"OnReset\"/> \n</StackPanel> \n```", "```cs\npublic string Department { get { return \"Software Engineering\"; } } \n\nprivate string personName; \npublic string PersonName \n{ \n    get { return personName; } \n    set { personName = value; } \n} \n```", "```cs\nprivate void OnSubmit(object sender, RoutedEventArgs e) \n{ \n    MessageBox.Show(\"Hello \" + PersonName); \n} \n\nprivate void OnReset(object sender, RoutedEventArgs e) \n{ \n    PersonName = string.Empty; \n}\n```", "```cs\npublic partial class MainWindow : Window, INotifyPropertyChanged\n```", "```cs\nusing System.ComponentModel; \n```", "```cs\npublic event PropertyChangedEventHandler PropertyChanged; \npublic void OnPropertyChanged(string propertyName) \n{ \n    //in C# 7.0 and above \n    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName)); \n\n    //prior to C# 7.0 \n    //var handler = PropertyChanged; \n    //if (handler != null) \n    //{ \n    //    handler(this, new PropertyChangedEventArgs(propertyName)); \n    //} \n} \n```", "```cs\nprivate string personName; \npublic string PersonName \n{ \n    get { return personName; } \n    set  \n    {  \n          personName = value;  \n          OnPropertyChanged(\"PersonName\");  \n    } \n} \n```", "```cs\n<Window x:Class=\"CH04.DependencyPropertyDemo.MainWindow\" \n\n        x:Name=\"window\" \n        Title=\"Dependency Properties Demo\" Height=\"150\"  \n        Width=\"300\"> \n    <Grid Margin=\"10\"> \n        <Grid.ColumnDefinitions> \n            <ColumnDefinition Width=\"Auto\"/> \n            <ColumnDefinition Width=\"15\"/> \n            <ColumnDefinition Width=\"*\"/> \n        </Grid.ColumnDefinitions> \n        <Grid.RowDefinitions> \n            <RowDefinition Height=\"Auto\"/> \n            <RowDefinition Height=\"Auto\"/> \n            <RowDefinition Height=\"10\"/> \n            <RowDefinition Height=\"Auto\"/> \n        </Grid.RowDefinitions> \n\n        <!-- Row 0 --> \n        <TextBlock Text=\"Your department\" \n                   Grid.Row=\"0\" Grid.Column=\"0\"/> \n        <TextBlock Text=\":\" \n                   Grid.Row=\"0\" Grid.Column=\"1\" \n                   HorizontalAlignment=\"Center\"/> \n        <TextBlock Text=\"{Binding Department,  \n                          ElementName=window}\" \n                   Margin=\"0 2\" \n                   Grid.Row=\"0\" Grid.Column=\"2\"/> \n\n        <!-- Row 1 --> \n        <TextBlock Text=\"Your name\" \n                   Grid.Row=\"1\" Grid.Column=\"0\"/> \n        <TextBlock Text=\":\" \n                   Grid.Row=\"1\" Grid.Column=\"1\" \n                   HorizontalAlignment=\"Center\"/> \n        <TextBox Text=\"{Binding PersonName,  \n                        ElementName=window, Mode=TwoWay}\" \n                 Margin=\"0 2\" \n                 Grid.Row=\"1\" Grid.Column=\"2\"/> \n\n        <!-- Row 3 --> \n        <StackPanel Orientation=\"Horizontal\" \n                    HorizontalAlignment=\"Center\" \n                    Grid.Row=\"3\" Grid.Column=\"0\" \n                    Grid.ColumnSpan=\"3\"> \n            <Button Content=\"Submit\" \n                    Margin=\"4\" Width=\"80\" \n                    Click=\"OnSubmit\"/> \n            <Button Content=\"Reset\" \n                    Margin=\"4\" Width=\"80\" \n                    Click=\"OnReset\"/> \n        </StackPanel> \n    </Grid> \n</Window> \n```", "```cs\npublic string Department  \n{  \n    get { return \"Software Engineering\"; }  \n} \n```", "```cs\npublic string PersonName \n{ \n    get { return (string)GetValue(PersonNameProperty); } \n    set { SetValue(PersonNameProperty, value); } \n} \n\npublic static readonly DependencyProperty PersonNameProperty = \n    DependencyProperty.Register(\"PersonName\",  \n          typeof(string), typeof(MainWindow),  \n          new PropertyMetadata(string.Empty)); \n```", "```cs\nprivate void OnSubmit(object sender, RoutedEventArgs e) \n{ \n    MessageBox.Show(\"Hello \" + PersonName); \n} \n\nprivate void OnReset(object sender, RoutedEventArgs e) \n{ \n    PersonName = string.Empty; \n} \n```", "```cs\npublic static readonly DependencyProperty PersonNameProperty = \n    DependencyProperty.Register(\"PersonName\",  \n                       typeof(string),  \n                       typeof(MainWindow),  \n                       new PropertyMetadata(string.Empty)); \n```", "```cs\npublic string PersonName \n{ \n    get { return (string)GetValue(PersonNameProperty); } \n    set { SetValue(PersonNameProperty, value); } \n} \n\npublic static readonly DependencyProperty PersonNameProperty = \n    DependencyProperty.Register(\"PersonName\", typeof(string),   \n    typeof(MainWindow), new PropertyMetadata(string.Empty,   \n    OnPropertyChangedCallback)); \n\nprivate static void OnPropertyChangedCallback(DependencyObject d, DependencyPropertyChangedEventArgs e) \n{ \n\n} \n```", "```cs\nusing System.Windows; \nusing System.Windows.Controls; \n```", "```cs\npublic static bool GetSelectOnFocus(DependencyObject obj) \n{ \n    return (bool)obj.GetValue(SelectOnFocusProperty); \n} \n\npublic static void SetSelectOnFocus(DependencyObject obj,  \n bool value) \n{ \n    obj.SetValue(SelectOnFocusProperty, value); \n} \n\npublic static readonly DependencyProperty SelectOnFocusProperty\n     = DependencyProperty.RegisterAttached(\"SelectOnFocus\",  \n       typeof(bool),  \n       typeof(TextBoxExtensions),  \n       new PropertyMetadata(false, OnSelectOnFocusChanged)); \n\nprivate static void OnSelectOnFocusChanged(DependencyObject d, DependencyPropertyChangedEventArgs e) \n{ \n    if (d is TextBox textBox) \n    { \n        textBox.GotFocus += (s, arg) => \n        { \n            textBox.SelectAll(); \n        }; \n    } \n} \n```", "```cs\n<Window x:Class=\"CH04.AttachedPropertyDemo.MainWindow\" \n\n        Title=\"Attached Property Demo\"  \n        Height=\"150\" Width=\"340\"> \n    <StackPanel Margin=\"15\"> \n        <TextBox Text=\"Normal TextBox Control\" \n                 Width=\"200\" Height=\"30\" \n                 Margin=\"4\"/> \n        <TextBox Text=\"Select On Focus: Enabled\" \n                 extensions:TextBoxExtensions.SelectOnFocus=\"True\" \n                 Width=\"200\" Height=\"30\" \n                 Margin=\"4\"/> \n    </StackPanel> \n</Window> \n```", "```cs\npublic class Person \n{ \n    public string Name { get; set; } \n    public string Blog { get; set; } \n    public int Experience { get; set; } \n} \n```", "```cs\npublic Person PersonDetails \n{ \n    get { return (Person)GetValue(PersonDetailsProperty); } \n    set { SetValue(PersonDetailsProperty, value); } \n} \n\npublic static readonly DependencyProperty PersonDetailsProperty =\n```", "```cs\n    DependencyProperty.Register(\"PersonDetails\",  \n                       typeof(Person),  \n                       typeof(MainWindow),  \n                       new PropertyMetadata(null)); \n```", "```cs\nPersonDetails = new Person \n{ \n    Name = \"Kunal Chowdhury\", \n    Blog = \"http://www.kunal-chowdhury.com\", \n    Experience = 10 \n}; \n\nDataContext = PersonDetails; \n```", "```cs\n<StackPanel Margin=\"10\"> \n    <TextBlock Margin=\"0 0 0 20\" \n               TextWrapping=\"Wrap\"> \n        <Run Text=\"{Binding Name}\"/> blogs at <Hyperlink NavigateUri=\"{Binding Blog}\"><Run Text=\"{Binding Blog}\"/></Hyperlink>, and has <Run Text=\"{Binding Experience}\"/> years of experience. \n    </TextBlock> \n    <StackPanel Orientation=\"Horizontal\"> \n        <TextBlock Text=\"Enter years of experience:\"/> \n        <TextBox Text=\"{Binding Experience, Mode=TwoWay}\" \n                 Margin=\"10 0\" Width=\"50\"/> \n    </StackPanel> \n</StackPanel>\n```", "```cs\npublic class Employee \n{ \n    public string FirstName { get; set; } \n    public string LastName { get; set; } \n    public string Department { get; set; } \n} \n```", "```cs\nusing System.Collections.ObjectModel; \n```", "```cs\npublic ObservableCollection<Employee> Employees \n{ \n    get { return (ObservableCollection<Employee>)GetValue(EmployeesProperty); } \n    set { SetValue(EmployeesProperty, value); } \n} \n\npublic static readonly DependencyProperty EmployeesProperty = \n    DependencyProperty.Register(\"Employees\",  \n             typeof(ObservableCollection<Employee>),  \n             typeof(MainWindow),  \n             new PropertyMetadata(null)); \n```", "```cs\nEmployees = new ObservableCollection<Employee> \n{ \n    new Employee \n    { \n        FirstName = \"Kunal\", LastName =\"Chowdhury\", \n        Department=\"Software Division\" \n    }, \n\n    new Employee \n    { \n        FirstName = \"Michael\", LastName =\"Washington\", \n        Department=\"Software Division\" \n    }, \n\n    new Employee \n    { \n        FirstName = \"John\", LastName =\"Strokes\", \n        Department=\"Finance Department\" \n    }, \n}; \n\ndataGrid.ItemsSource = Employees; \n```", "```cs\n<Grid> \n    <DataGrid x:Name=\"dataGrid\" \n              AutoGenerateColumns=\"False\"> \n        <DataGrid.Columns> \n            <DataGridTextColumn Header=\"First Name\"  \n                     Binding=\"{Binding FirstName}\"/> \n            <DataGridTextColumn Header=\"Last Name\"  \n                     Binding=\"{Binding LastName}\"/> \n            <DataGridTextColumn Header=\"Department\"  \n                     Binding=\"{Binding Department}\"/> \n        </DataGrid.Columns> \n    </DataGrid> \n</Grid>\n```", "```cs\n<DataGrid ItemsSource=\"{Binding Employees, ElementName=window}\" \n```", "```cs\n<Grid> \n    <TextBlock FontSize=\"{Binding Value,  \n     ElementName=fontSizeSlider}\" \n               Margin=\"4\" \n               HorizontalAlignment=\"Center\" \n               VerticalAlignment=\"Center\"> \n        <Run Text=\"Font Size:\"/> \n        <Run Text=\"{Binding Value,  \n               ElementName=fontSizeSlider}\"/> \n    </TextBlock> \n    <Slider x:Name=\"fontSizeSlider\"  \n            Minimum=\"10\" Maximum=\"40\" Value=\"20\" \n            LargeChange=\"5\" \n            VerticalAlignment=\"Bottom\" \n            Margin=\"10\"/> \n</Grid> \n```", "```cs\npublic class Employee \n{ \n    public string ID { get; set; } \n    public string FirstName { get; set; } \n    public string LastName { get; set; } \n    public string Department { get; set; } \n}\n```", "```cs\npublic ObservableCollection<Employee> Employees \n{ \n    get { return (ObservableCollection<Employee>) GetValue(EmployeesProperty); } \n    set { SetValue(EmployeesProperty, value); } \n} \n\npublic static readonly DependencyProperty \n    EmployeesProperty =  \n    DependencyProperty.Register(\"Employees\",  \n            typeof(ObservableCollection<Employee>),  \n            typeof(MainWindow),  \n            new PropertyMetadata(null)); \n```", "```cs\nEmployees = new ObservableCollection<Employee> \n{ \n    new Employee \n    { \n        ID = \"EMP0001\", \n        FirstName = \"Kunal\", LastName = \"Chowdhury\", \n        Department = \"Software Division\" \n    }, \n\n    new Employee \n    { \n        ID = \"EMP0002\", \n        FirstName = \"Michael\", LastName = \"Washington\", \n        Department = \"Software Division\" \n    }, \n\n    new Employee \n    { \n        ID = \"EMP0003\", \n        FirstName = \"John\", LastName = \"Strokes\", \n        Department = \"Finance Department\" \n    }, \n\n    new Employee \n    { \n        ID = \"EMP0004\", \n        FirstName = \"Ramesh\", LastName = \"Shukla\", \n        Department = \"Finance Department\" \n    } \n}; \n```", "```cs\n<StackPanel> \n    <DataGrid x:Name=\"dataGrid\" \n      AutoGenerateColumns=\"False\"> \n        <DataGrid.Columns> \n            <DataGridTextColumn Header=\"EMP ID\"  \n                     Binding=\"{Binding ID}\"/> \n            <DataGridTextColumn Header=\"First Name\"  \n                     Binding=\"{Binding FirstName}\"/> \n            <DataGridTextColumn Header=\"Last Name\"  \n                     Binding=\"{Binding LastName}\"/> \n            <DataGridTextColumn Header=\"Department\"  \n                     Binding=\"{Binding Department}\"/> \n        </DataGrid.Columns> \n    </DataGrid> \n</StackPanel> \n```", "```cs\ndataGrid.ItemsSource = Employees;\n```", "```cs\n<CheckBox x:Name=\"sortByDepartment\" \n          Content=\"Sort by Department\"  \n          HorizontalAlignment=\"Right\" \n          Margin=\"10\" \n          Click=\"OnSortByDepartment\"/> \n```", "```cs\nprivate void OnSortByDepartment(object sender,  \n RoutedEventArgs e) \n{ \n    var cvs =   \n    CollectionViewSource.GetDefaultView(dataGrid.ItemsSource); \n    if (cvs != null && cvs.CanSort) \n    { \n        cvs.SortDescriptions.Clear(); \n\n        if (sortByDepartment.IsChecked == true) \n        { \n            cvs.SortDescriptions.Add( \n                new SortDescription(\"Department\",  \n                ListSortDirection.Ascending)); \n        } \n    } \n}\n```", "```cs\nItemsSource=\"{Binding Employees, ElementName=window}\" \n```", "```cs\n<StackPanel> \n    <DataGrid x:Name=\"dataGrid\" \n              ItemsSource=\"{Binding Employees,  \n                ElementName=window}\" \n              AutoGenerateColumns=\"False\"  \n              CanUserAddRows=\"False\"> \n        <DataGrid.Columns> \n            <DataGridTextColumn Header=\"EMP ID\"  \n                 Binding=\"{Binding ID}\"/> \n            <DataGridTextColumn Header=\"First Name\"  \n                 Binding=\"{Binding FirstName}\"/> \n            <DataGridTextColumn Header=\"Last Name\"  \n                 Binding=\"{Binding LastName}\"/> \n            <DataGridTextColumn Header=\"Department\"  \n                 Binding=\"{Binding Department}\"/> \n        </DataGrid.Columns> \n    </DataGrid> \n    <CheckBox x:Name=\"groupByDepartment\" \n              Content=\"Group by Department\"  \n              HorizontalAlignment=\"Right\" \n              Margin=\"10\" \n              Click=\"OnGroupByDepartment\"/> \n</StackPanel> \n```", "```cs\n<DataGrid.GroupStyle> \n    <GroupStyle> \n        <GroupStyle.ContainerStyle> \n            <Style TargetType=\"{x:Type GroupItem}\"> \n                <Setter Property=\"Margin\" Value=\"0,0,0,5\"/> \n                <Setter Property=\"Template\"> \n                    <Setter.Value> \n                        <ControlTemplate TargetType=\"{x:Type \n                         GroupItem}\"> \n                            <Expander IsExpanded=\"True\"> \n                                <Expander.Header> \n                                    <TextBlock Text=\"{Binding   \n                                     Path=Name}\" \n                                     Margin=\"5,0,0,0\"/> \n                                </Expander.Header> \n                                <Expander.Content> \n                                    <ItemsPresenter /> \n                                </Expander.Content> \n                            </Expander> \n                        </ControlTemplate> \n                    </Setter.Value> \n                </Setter> \n            </Style> \n        </GroupStyle.ContainerStyle> \n    </GroupStyle> \n</DataGrid.GroupStyle>\n```", "```cs\nprivate void OnGroupByDepartment(object sender,  \n RoutedEventArgs e) \n{ \n    var cvs =  \n    CollectionViewSource.GetDefaultView(dataGrid.ItemsSource); \n    if (cvs != null && cvs.CanGroup) \n    { \n        cvs.GroupDescriptions.Clear(); \n\n        if (groupByDepartment.IsChecked == true) \n        { \n            cvs.GroupDescriptions.Add( \n              new PropertyGroupDescription(\"Department\")); \n        } \n    } \n} \n```", "```cs\ncvs.GroupDescriptions.Add( \n         new PropertyGroupDescription(\"Department\")); \n```", "```cs\n<Expander IsExpanded=\"True\"> \n    <Expander.Header> \n        <TextBlock Text=\"{Binding Path=Name}\" Margin=\"5,0,0,0\"/> \n    </Expander.Header> \n    <Expander.Content> \n        <ItemsPresenter /> \n    </Expander.Content> \n</Expander> \n```", "```cs\n<Expander.Header> \n    <StackPanel Orientation=\"Horizontal\"> \n        <TextBlock Text=\"{Binding Path=Name}\" Margin=\"5,0,0,0\"/> \n        <StackPanel Orientation=\"Horizontal\"> \n            <TextBlock Margin=\"5,0,0,0\" \n                       Text=\"{Binding Path=ItemCount}\"/> \n            <TextBlock Text=\" Item(s)\"/> \n        </StackPanel> \n    </StackPanel> \n</Expander.Header> \n```", "```cs\n<StackPanel Orientation=\"Horizontal\" \n            HorizontalAlignment=\"Right\" \n            Margin=\"4 8\"> \n    <TextBlock Text=\"Filter records: \"/> \n    <TextBox x:Name=\"searchBox\" Width=\"100\" \n             TextChanged=\"OnFilterChanged\"/> \n</StackPanel> \n```", "```cs\n<DataGrid x:Name=\"dataGrid\" \n          AutoGenerateColumns=\"False\" \n          CanUserAddRows=\"False\" \n          ItemsSource=\"{Binding Employees,  \n           ElementName=window}\"> \n    <DataGrid.Columns> \n        <DataGridTextColumn Header=\"EMP ID\"  \n             Binding=\"{Binding ID}\"/> \n        <DataGridTextColumn Header=\"First Name\"  \n             Binding=\"{Binding FirstName}\"/> \n        <DataGridTextColumn Header=\"Last Name\"  \n             Binding=\"{Binding LastName}\"/> \n        <DataGridTextColumn Header=\"Department\"  \n             Binding=\"{Binding Department}\"/> \n    </DataGrid.Columns> \n</DataGrid> \n```", "```cs\nprivate void OnFilterChanged(object sender,  \n TextChangedEventArgs e) \n{ \n    var cvs = \n    CollectionViewSource.GetDefaultView(dataGrid.ItemsSource); \n    if (cvs != null && cvs.CanFilter) \n    { \n        cvs.Filter = OnFilterApplied; \n    } \n} \n\nprivate bool OnFilterApplied(object obj) \n{ \n    if(obj is Employee emp) \n    { \n        var searchText = searchBox.Text.ToLower(); \n        return  \n           emp.Department.ToLower().Contains(searchText) || \n           emp.FirstName.ToLower().Contains(searchText) || \n           emp.LastName.ToLower().Contains(searchText); \n    } \n\n    return false; \n}\n```", "```cs\n<Label Background=\"OrangeRed\" \n       Content=\"Kunal Chowdhury\" \n       FontSize=\"25\" \n       Width=\"300\" Height=\"60\" \n       Padding=\"10\" Margin=\"10\"/> \n```", "```cs\n<Label Background=\"{x:Static  \n  SystemColors.ControlDarkBrush}\" \n       Content=\"Kunal Chowdhury\" \n       FontSize=\"25\" \n       Width=\"300\" Height=\"60\" \n       Padding=\"10\" Margin=\"10\"/>\n```", "```cs\n<Window.Resources> \n    <SolidColorBrush Color=\"GreenYellow\"  \n      x:Key=\"myBrush\"/> \n</Window.Resources> \n```", "```cs\n<Label Background=\"{x:Static  \n  SystemColors.ControlDarkBrush}\" \n       Foreground=\"{StaticResource myBrush}\" \n       Content=\"Kunal Chowdhury\" \n       FontSize=\"25\" \n       Width=\"300\" Height=\"60\" \n       Padding=\"10\" Margin=\"10\"/> \n```", "```cs\n<StackPanel Orientation=\"Horizontal\" \n            VerticalAlignment=\"Top\" \n            Margin=\"20\"> \n    <CheckBox x:Name=\"chkBox\" \n              Content=\"Show/Hide Box\"/> \n    <Rectangle Fill=\"Red\" Margin=\"80 0 0 0\" \n               Width=\"150\" Height=\"50\" \n               Visibility=\"{Binding IsChecked,  \n                 ElementName=chkBox}\"/> \n</StackPanel> \n```", "```cs\npublic object Convert(object value,  \n                      Type targetType,  \n                      object parameter,  \n                      CultureInfo culture) \n{ \n    return value is bool val && val ? Visibility.Visible : \n    Visibility.Collapsed; \n} \n\npublic object ConvertBack(object value,  \n                          Type targetType,  \n                          object parameter,  \n                          CultureInfo culture) \n{ \n    throw new NotImplementedException(); \n} \n```", "```cs\n<Window.Resources> \n    <converters:BoolToVisibilityConverter  \n       x:Key=\"BoolToVisibilityConverter\"/> \n</Window.Resources>\n```", "```cs\nVisibility=\"{Binding IsChecked, ElementName=chkBox, Converter={StaticResource BoolToVisibilityConverter}}\" \n```", "```cs\npublic class BoolToVisibilityConverter : IValueConverter \n{ \n   public object Convert(object value,  \n                         Type targetType,  \n                         object parameter,  \n                         CultureInfo culture) \n   { \n         var val = (bool) value; \n         if (parameter is string param &&  \n             param.ToString().Equals(\"inverse\")) { val = !val; } \n\n         return val ? Visibility.Visible: Visibility.Collapsed; \n   } \n\n   public object ConvertBack(object value,  \n                             Type targetType,  \n                             object parameter,  \n                             CultureInfo culture) \n   { \n         throw new NotImplementedException(); \n   } \n} \n```", "```cs\n<Rectangle Fill=\"Red\" Margin=\"80 0 0 0\" \n           Width=\"150\" Height=\"50\" \n           Visibility=\"{Binding IsChecked, ElementName=chkBox,  \n           Converter={StaticResource BoolToVisibilityConverter},  \n           ConverterParameter=inverse}\"/> \n```", "```cs\n<Grid.RowDefinitions> \n    <RowDefinition Height=\"Auto\"/> \n    <RowDefinition Height=\"Auto\"/> \n    <RowDefinition Height=\"Auto\"/> \n    <RowDefinition Height=\"Auto\"/> \n    <RowDefinition Height=\"*\"/> \n</Grid.RowDefinitions> \n<Grid.ColumnDefinitions> \n    <ColumnDefinition/> \n    <ColumnDefinition Width=\"90\"/> \n    <ColumnDefinition/> \n</Grid.ColumnDefinitions>\n```", "```cs\n<TextBlock Text=\"Firstname:\"  \n           Grid.Column=\"0\" Margin=\"2 0\"/> \n<TextBlock Text=\"Middle:\"  \n           Grid.Column=\"1\" Margin=\"2 0\"/> \n<TextBlock Text=\"Lastname:\"  \n           Grid.Column=\"2\" Margin=\"2 0\"/> \n<TextBlock Text=\"Fullname:\"  \n           Grid.Row=\"2\" Grid.ColumnSpan=\"3\" \n           Margin=\"2 0\"/> \n\n<TextBox x:Name=\"firstName\" \n         Grid.Row=\"1\" Grid.Column=\"0\" \n         Margin=\"2 0\"/> \n<TextBox x:Name=\"middleName\" \n         Grid.Row=\"1\" Grid.Column=\"1\" \n         Margin=\"2 0\"/> \n<TextBox x:Name=\"lastName\" \n         Grid.Row=\"1\" Grid.Column=\"2\" \n         Margin=\"2 0\"/> \n<TextBox x:Name=\"fullName\" \n         Grid.Row=\"3\" Grid.ColumnSpan=\"3\" \n         Margin=\"2 0\"> \n\n</TextBox> \n```", "```cs\npublic object Convert(object[] values, Type targetType, object parameter, CultureInfo culture) \n{ \n    return string.Format(\"{0} {1} {2}\", values[0], values[1], \n    values[2]); \n} \n\npublic object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture) \n{ \n    return value.ToString().Split(' '); \n} \n```", "```cs\n<Window.Resources> \n    <converters:FullNameConverter  \n              x:Key=\"FullNameConverter\"/> \n</Window.Resources> \n```", "```cs\n<TextBox x:Name=\"fullName\" \n         Grid.Row=\"3\" \n         Grid.ColumnSpan=\"3\" \n         Margin=\"2 0\"> \n    <TextBox.Text> \n        <MultiBinding Converter=\"{StaticResource  \n            FullNameConverter}\"> \n            <Binding ElementName=\"firstName\"  \n                     Path=\"Text\" Mode=\"TwoWay\"/> \n            <Binding ElementName=\"middleName\"  \n                     Path=\"Text\" Mode=\"TwoWay\"/> \n            <Binding ElementName=\"lastName\"  \n                     Path=\"Text\" Mode=\"TwoWay\"/> \n        </MultiBinding> \n    </TextBox.Text> \n</TextBox> \n```"]