["```cs\ndotnet new classlib --framework net8.0 -o Codebreaker.GameApis.Client\n```", "```cs\n<PropertyGroup>\n  <TargetFrameworks>net7.0;net8.0</TargetFrameworks>\n  <!-- code removed for brevity -->\n</PropertyGroup>\n```", "```cs\n#if NET8_0_OR_GREATER\n[JsonConverter(typeof(JsonStringEnumConverter<GameType>))]\n#else\n[JsonConverter(typeof(JsonStringEnumConverter))]\n#endif\npublic enum GameType\n{\n    Game6x4,\n    Game6x4Mini,\n    Game8x5,\n    Game5x5x4,\n}\n```", "```cs\n[JsonConverter(typeof(JsonStringEnumConverter<GameType>))]\npublic enum GameType\n{\n  Game6x4,\n  Game6x4Mini,\n  Game8x5,\n  Game5x5x4,\n}\npublic record class CreateGameRequest(\n  GameType,\n  string PlayerName);\n```", "```cs\npublic record class GamesQuery(\n  GameType? GameType = default,\n  string? PlayerName = default,\n  DateOnly? Date = default,\n  bool? Ended = false)\n{\n  public string AsUrlQuery()\n  {\n    var queryString = \"?\";\n    if (GameType != null)\n    {\n      queryString += $\"gameType={GameType}&\";\n    }\n    if (PlayerName != null)\n    {\n      queryString += $\"playerName={Uri.EscapeDataString(PlayerName)}&\";\n    }\n    // code removed for brevity\n    queryString = queryString.TrimEnd('&');\n    return queryString;\n  }\n}\n```", "```cs\npublic class GamesClient(HttpClient httpClient)\n{\n  private readonly HttpClient _httpClient = httpClient;\n  private readonly JsonSerializerOptions _jsonOptions = new()\n  {\n    PropertyNameCaseInsensitive = true\n  };\n  // code removed for brevity\n```", "```cs\npublic async Task<Game?> GetGameAsync(bool id, CancellationToken cancellationToken = default)\n{\n  Game game = default;\n  try\n  {\n    game = await _httpClient.GetFromJsonAsync<Game>(\n      $\"/games/{id}\", _jsonOptions, cancellationToken);\n  }\n  catch (HttpRequestException ex) when (ex.StatusCode = \n  HttpStatusCode.NotFound)\n  {\n    return default;\n  }\n  return game;\n}\npublic async Task<IEnumerable<Game>> GetGamesAsync(GamesQuery query, CancellationToken cancellationToken = default)\n{\n  IEnumerable<Game> games = (\n    await _httpClient.GetFromJsonAsync<IEnumerable<Game>>(\n$\"/games/{query.AsUrlQuery()}\", _jsonOptions, \n      cancellationToken)) ?? Enumerable.Empty<Game>();\n  return games;\n}\n```", "```cs\npublic async Task<(Guid id, int numberCodes, int maxMoves, IDictionary<string, string[]> FieldValues)>\n  StartGameAsync(GameType gameType, string playerName, \n  CancellationToken cancellationToken = default)\n{\n  CreateGameRequest createGameRequest = new(_gameType, _playerName);\nvar response = await _httpClient.PostAsJsonAsync(\"/games\", \n    createGameRequest, cancellationToken);\n  response.EnsureSuccessStatusCode();\n  var gameResponse = await response.Content.\n    ReadFromJsonAsync<CreateGameResponse>(\n    _jsonOptions, cancellationToken);\n  if (gameResponse is null)\n    throw new InvalidOperationException();\n  return (gameResponse.Id, gameResponse.NumberCodes, gameResponse.\n    MaxMoves, gameResponse.FieldValues);\n}\n```", "```cs\npublic async Task<(string[] Results, bool Ended, bool IsVictory)> SetMoveAsync(Guid id, string playerName, GameType gameType, int moveNumber, string[] guessPegs, CancellationToken cancellationToken = default)\n{\n  UpdateGameRequest updateGameRequest = new(id, gameType, playerName, \n    moveNumber)\n  {\n    GuessPegs = guessPegs\n  };\nvar response = await _httpClient.PatchAsJsonAsync($\"/games/{id}\", \n    updateGameRequest, _jsonOptions, cancellationToken);\n  response.EnsureSuccessStatusCode();\n  var moveResponse = await response.Content.ReadFromJsonAsync<UpdateGameResponse>(_jsonOptions, cancellationToken)\n    ?? throw new InvalidOperationException();\n  (_, _, _, bool ended, bool isVictory, string[] results) = \n    moveResponse;\n  return (results, ended, isVictory);\n}\n```", "```cs\ncd Codebreaker.GameAPIs.Client\ndotnet pack --configuration Release\n```", "```cs\ndotnet new nugetconfig\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <packageSources>\n    <clear />\n    <add key=\"nuget\" value=\"https://api.nuget.org/v3/index.json\" />\n<add key=\"custom\" value=\"https://pkgs.dev.azure.com/\n      MyOrganization/_packaging/MyFeed/nuget/v3/index.json\" />\n  </packageSources>\n</configuration>\n```", "```cs\ndotnet new console –framework net8.0 -o Codebreaker.Console\ncd Codebreaker.Console\ndotnet add package Microsoft.Extensions.Hosting\ndotnet add package Microsoft.Extensions.Http.Resilience\ndotnet add package Spectre.Console.Cli\ndotnet add reference ../Codebreaker.GameAPIs.Client\n```", "```cs\nvar builder = Host.CreateApplicationBuilder(args);\nbuilder.Services.AddHttpClient<GamesClient>(client =>\n{\n  string gamesUrl = builder.Configuration[\"GamesApiUrl\"] ??throw new \n    InvalidOperationException(\"GamesApiUrl not found\");\n  client.BaseAddress = new Uri(gamesUrl);\n});\nbuilder.Services.AddTransient<Runner>();\nvar app = builder.Build();\nvar runner = app.Services.GetRequiredService<Runner>();\nawait runner.RunAsync();\n```", "```cs\n{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Warning\"\n    }\n  },\n  \"GamesApiUrl\": \"http://localhost:9400\"\n}\n```", "```cs\ninternal class Runner(GamesClient client)\n{\n  private readonly CancellationTokenSource _cancellationTokenSource = new();\n  public async Task RunAsync()\n  {\n    bool ended = false;\n    while (!ended)\n    {\n      var selection = Inputs.GetMainSelection();\n      switch (selection)\n      {\n        case MainOptions.Play:\n          await PlayGameAsync();\n          break;\n        case MainOptions.Exit:\n          ended = true;\n          break;\n        case MainOptions.QueryGame:\n          await ShowGameAsync();\n          break;\n        case MainOptions.QueryList:\nawait ShowGamesAsync();\n          break;\n        case MainOptions.Delete:\n          await DeleteGameAsync();\n          break;\n        default:\n          throw new ArgumentOutOfRangeException();\n      }\n    }\n  }\n  // code removed for brevity\n}\n```", "```cs\ndotnet new classlib --framework net8.0 -o Codebreaker.GameApis.KiotaClient\ncd Codebreaker.GameApis.KiotaClient\ndotnet add package Microsoft.Kiota.Http.HttpClientLibrary\ndotnet add package Microsoft.Kiota.Serialization.Json\ndotnet add package Microsoft.Kiota.Serialization.Form\ndotnet add package Microsoft.Kiota.Serialization.Multipart\ndotnet add package Microsoft.Kiota.Serialization.Text\n```", "```cs\ndotnet new tool-manifest\ndotnet tool install microsoft.openapi.kiota\n```", "```cs\ndotnet kiota generate --openapi ..\\..\\gamesapi-swagger.json --output codebreaker --language CSharp --class-name GamesAPIClient --namespace-name Codebreaker.Client\n```", "```cs\npublic class CreateGameRequest : IParsable\n{\n  public Codebreaker.Client.Models.GameType? GameType { get; set; }\n  public string? PlayerName { get; set; }\n  public static CreateGameRequest \n    CreateFromDiscriminatorValue(IParseNode parseNode)\n  {\n    _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));\n    return new CreateGameRequest();\n  }\n  public virtual IDictionary<string, Action<IParseNode>> \n    GetFieldDeserializers()\n  {\n    return new Dictionary<string, Action<IParseNode>> {\n      {\"gameType\", n => { GameType = n.GetEnumValue<GameType>(); } },\n      {\"playerName\", n => { PlayerName = n.GetStringValue(); } },\n    };\n  }\n  public virtual void Serialize(ISerializationWriter writer)\n  {\n    _ = writer ?? throw new ArgumentNullException(nameof(writer));\n    writer.WriteEnumValue<GameType>(\"gameType\", GameType);\n    writer.WriteStringValue(\"playerName\", PlayerName);\n  }\n}\n```", "```cs\npublic class GamesAPIClient : BaseRequestBuilder\n{\n  public GamesRequestBuilder Games\n  {\n    get => new GamesRequestBuilder(PathParameters, RequestAdapter);\n  }\n  public GamesAPIClient(IRequestAdapter requestAdapter) : base(requestAdapter, \"{+baseurl}\", new Dictionary<string, object>())\n  {\n     ApiClientBuilder.\n       RegisterDefaultSerializer<JsonSerializationWriterFactory>();\n     ApiClientBuilder.\n       RegisterDefaultSerializer<TextSerializationWriterFactory>();\n     ApiClientBuilder.\n       RegisterDefaultDeserializer<JsonParseNodeFactory>();\n  // code removed for brevity\n  }\n}\n```", "```cs\npublic class GamesRequestBuilder : BaseRequestBuilder\n{\n  public GamesItemRequestBuilder this[Guid position]\n  {\n    get\n    {\n      // code removed for brevity\n      return new GamesItemRequestBuilder(urlTplParams, \n        RequestAdapter);\n    }\n  }\n  public async Task<List<Game>?> GetAsync(Action<RequestConfiguration\n    <GamesRequestBuilderGetQueryParameters>>? requestConfiguration = \n    default, CancellationToken cancellationToken = default)\n  {\n    var requestInfo = ToGetRequestInformation(requestConfiguration);\n    var collectionResult = await RequestAdapter.\n      SendCollectionAsync<Game>(requestInfo, Game.\n      CreateFromDiscriminatorValue, default, cancellationToken).\n      ConfigureAwait(false);\n    return collectionResult?.ToList();\n  }\npublic async Task<CreateGameResponse?> PostAsync(CreateGameRequest \n    body, Action<RequestConfiguration<DefaultQueryParameters>>? \n    requestConfiguration = default, CancellationToken \n    cancellationToken = default)\n  {\n    // code removed for brevity\n  }\n```", "```cs\nvar builder = Host.CreateApplicationBuilder(args);\nbuilder.Services.Configure<RunnerOptions>(options =>\n{\noptions.GamesApiUrl = builder.Configuration[\"GamesApiUrl\"] ??\n    throw new InvalidOperationException(\"GamesApiUrl not found\");\n});\nbuilder.Services.AddTransient<Runner>();\nvar app = builder.Build();\nvar runner = app.Services.GetRequiredService<Runner>();\nawait runner.RunAsync();\n```", "```cs\ninternal class Runner\n{\n  private readonly GamesAPIClient _client;\n  private readonly CancellationTokenSource _cancellationTokenSource = new();\n  public Runner(IOptions<RunnerOptions> options)\n  {\n    AnonymousAuthenticationProvider authenticationProvider = new();\n    HttpClientRequestAdapter adapter = new(authenticationProvider)\n    {\nBaseUrl = options.Value.GamesApiUrl ?? throw new \n        InvalidOperationException(\"Could not read GamesApiUrl\")\n    };\n    _client = new GamesAPIClient(adapter);\n  }\n```", "```cs\nprivate async Task ShowGamesAsync()\n{\n  var games = await _client.Games.GetAsync(config =>\n  {\n    config.QueryParameters.Date = new Date(DateTime.Today);\n  }, _cancellationTokenSource.Token);\n  // code removed for brevity\n```", "```cs\nprivate async Task PlayGameAsync()\n{\n  // code removed for brevity\n  CreateGameRequest request = new()\n  {\n    PlayerName = playerName,\n    GameType = gameType\n  };\nvar response = await _client.Games.PostAsync(request, \n    cancellationToken: _cancellationTokenSource.Token);\n```", "```cs\nprivate async Task ShowGameAsync()\n{\n  // code removed for brevity\n  var game = await _client.Games[id.ToString()].GetAsync(\n    cancellationToken: _cancellationTokenSource.Token);\n  // code removed for brevity\n```"]