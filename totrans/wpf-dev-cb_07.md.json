["```cs\n<StackPanel Orientation=\"Horizontal\"> \n    <Image Source=\"Images/image1.png\" \n           Width=\"150\" \n           Margin=\"8\"/> \n    <Image Source=\"Images/image2.png\" \n           Width=\"150\" \n           Margin=\"8\"/> \n</StackPanel> \n```", "```cs\n<Image Source=\"/CH07.ResourceLibrary;component/\nImages/image1.png\"/> \n```", "```cs\n/<AssemblyName>;v<VersionNo>;<Token>;component/<ResourcePath> \n\n\"/CH07.ResourceLibrary;v1.0;3ca44a7f7ca54f49;component/Images/image1.png\" \n```", "```cs\n<Image Source=\"pack://siteOfOrigin:,,,/Images/image1.png\" /> \n```", "```cs\n<Grid> \n    <Image x:Name=\"img\" /> \n</Grid>\n```", "```cs\nvar streamResourceInfo = Application.GetResourceStream(new Uri(\"Images/image1.png\", UriKind.RelativeOrAbsolute)); \n```", "```cs\nvar bitmapImage = new BitmapImage(); \nbitmapImage.BeginInit(); \nbitmapImage.CacheOption = BitmapCacheOption.OnLoad; \nbitmapImage.StreamSource = streamResourceInfo.Stream; \nbitmapImage.EndInit(); \nbitmapImage.Freeze(); \n```", "```cs\nimg.Source = bitmapImage; \n```", "```cs\npublic MainWindow() \n{ \n    InitializeComponent(); \n\n    var streamResourceInfo = Application.GetResourceStream( \n                              new Uri(\"Images/image1.png\",  \n                              UriKind.RelativeOrAbsolute)); \n\n    var bitmapImage = new BitmapImage(); \n    bitmapImage.BeginInit(); \n    bitmapImage.CacheOption = BitmapCacheOption.OnLoad; \n    bitmapImage.StreamSource = streamResourceInfo.Stream; \n    bitmapImage.EndInit(); \n    bitmapImage.Freeze(); \n\n    img.Source = bitmapImage; \n}\n```", "```cs\n<Border Height=\"80\" \n        Width=\"150\" \n        Margin=\"8\"> \n</Border> \n```", "```cs\n<Border Height=\"80\" \n        Width=\"150\" \n        Margin=\"8\"> \n    <Border.Background> \n        <LinearGradientBrush> \n            <GradientStop Offset=\"0\" \n                          Color=\"LightYellow\"/> \n            <GradientStop Offset=\"0.2\" \n                          Color=\"Yellow\"/> \n            <GradientStop Offset=\".5\" \n                          Color=\"YellowGreen\"/> \n            <GradientStop Offset=\"1\" \n                          Color=\"Green\"/> \n        </LinearGradientBrush> \n    </Border.Background> \n</Border> \n```", "```cs\n<Window.Resources> \n    <LinearGradientBrush x:Key=\"myLinearBrush\"> \n        <GradientStop Offset=\"0\" \n                      Color=\"LightYellow\"/> \n        <GradientStop Offset=\"0.2\" \n                      Color=\"Yellow\"/> \n        <GradientStop Offset=\".5\" \n                      Color=\"YellowGreen\"/> \n        <GradientStop Offset=\"1\" \n                      Color=\"Green\"/> \n    </LinearGradientBrush> \n</Window.Resources> \n```", "```cs\n<StackPanel Orientation=\"Horizontal\"> \n    <Border Height=\"80\" \n            Width=\"150\" \n            Margin=\"8\" \n            Background=\"{StaticResource myLinearBrush}\"/> \n    <Border Height=\"80\" \n            Width=\"150\" \n            Margin=\"8\" \n            Background=\"{StaticResource myLinearBrush}\"/> \n</StackPanel> \n```", "```cs\n<Window.Resources> \n    <LinearGradientBrush x:Key=\"myLinearBrush\"> \n        <GradientStop Offset=\"0\" \n                      Color=\"LightYellow\"/> \n        <GradientStop Offset=\"0.2\" \n                      Color=\"Yellow\"/> \n        <GradientStop Offset=\".5\" \n                      Color=\"YellowGreen\"/> \n        <GradientStop Offset=\"1\" \n                      Color=\"Green\"/> \n    </LinearGradientBrush> \n</Window.Resources> \n```", "```cs\nvar resource = FindResource(\"myLinearBrush\") as Brush; \n```", "```cs\nResources.Add(\"myBrush\", new SolidColorBrush(Colors.Red)); \nResources.Remove(\"myBrush\"); \n```", "```cs\n<StackPanel Orientation=\"Horizontal\"> \n    <Border Height=\"80\" \n            Width=\"150\" \n            Margin=\"8\"/> \n    <StackPanel Margin=\"10\"> \n        <RadioButton GroupName=\"colorGroup\" \n                     Content=\"Red\" \n                     Margin=\"4\"/> \n        <RadioButton GroupName=\"colorGroup\" \n                     Content=\"Green\" \n                     IsChecked=\"True\" \n                     Margin=\"4\"/> \n        <RadioButton GroupName=\"colorGroup\" \n                     Content=\"Blue\" \n                     Margin=\"4\"/> \n    </StackPanel> \n</StackPanel> \n```", "```cs\n<Window.Resources> \n    <LinearGradientBrush x:Key=\"myLinearBrush\"> \n        <GradientStop Offset=\"0\" \n                      Color=\"LightYellow\"/> \n        <GradientStop Offset=\"1\" \n                      Color=\"Green\"/> \n    </LinearGradientBrush> \n</Window.Resources>\n```", "```cs\n<Border Height=\"80\" \n        Width=\"150\" \n        Margin=\"8\" \n        Background=\"{StaticResource myLinearBrush}\"/> \n```", "```cs\n<StackPanel Orientation=\"Horizontal\"> \n    <Border Height=\"80\" \n            Width=\"150\" \n            Margin=\"8\" \n            Background=\"{StaticResource myLinearBrush}\"/> \n    <StackPanel Margin=\"10\"> \n        <RadioButton GroupName=\"colorGroup\" \n                     Content=\"Red\" \n                     Margin=\"4\" \n                     Checked=\"OnRedRadioChecked\"/> \n        <RadioButton GroupName=\"colorGroup\" \n                     Content=\"Green\" \n                     IsChecked=\"True\" \n                     Margin=\"4\" \n                     Checked=\"OnGreenRadioChecked\"/> \n        <RadioButton GroupName=\"colorGroup\" \n                     Content=\"Blue\" \n                     Margin=\"4\" \n                     Checked=\"OnBlueRadioChecked\"/> \n    </StackPanel> \n</StackPanel> \n```", "```cs\nprivate void OnRedRadioChecked(object sender,  \n RoutedEventArgs e) \n{ \n    var brush = Resources[\"myLinearBrush\"]; \n    if (brush is LinearGradientBrush lBrush) \n    { \n        lBrush = new LinearGradientBrush \n        { \n            GradientStops = new GradientStopCollection \n            { \n                new GradientStop\n                (Colors.LightGoldenrodYellow, 0), \n                new GradientStop(Colors.Red, 1) \n            } \n        }; \n\n        Resources[\"myLinearBrush\"] = lBrush; \n    } \n} \n\nprivate void OnGreenRadioChecked(object sender,  \n RoutedEventArgs e) \n{ \n    var brush = Resources[\"myLinearBrush\"]; \n    if (brush is LinearGradientBrush lBrush) \n    { \n        lBrush = new LinearGradientBrush \n        { \n            GradientStops = new GradientStopCollection \n            { \n                new GradientStop(Colors.LightYellow, 0), \n                new GradientStop(Colors.Green, 1) \n            } \n        }; \n\n        Resources[\"myLinearBrush\"] = lBrush; \n    } \n} \n\nprivate void OnBlueRadioChecked(object sender,  \n RoutedEventArgs e) \n{ \n    var brush = Resources[\"myLinearBrush\"]; \n    if (brush is LinearGradientBrush lBrush) \n    { \n        lBrush = new LinearGradientBrush \n        { \n            GradientStops = new GradientStopCollection \n            { \n                new GradientStop(Colors.LightBlue, 0), \n                new GradientStop(Colors.Blue, 1) \n            } \n        }; \n\n        Resources[\"myLinearBrush\"] = lBrush; \n    } \n}\n```", "```cs\n<Border Height=\"80\" \n        Width=\"150\" \n        Margin=\"8\" \n        Background=\"{DynamicResource myLinearBrush}\"/>\n```", "```cs\n<LinearGradientBrush x:Key=\"myLinearBrush\"> \n    <GradientStop Offset=\"0\" \n                  Color=\"Yellow\"/> \n    <GradientStop Offset=\"1\" \n                  Color=\"OrangeRed\"/> \n</LinearGradientBrush>\n```", "```cs\n<Grid> \n    <Border Height=\"100\" \n            Width=\"280\" \n            Margin=\"8\" \n            Background=\"{DynamicResource myLinearBrush}\"/> \n</Grid> \n```", "```cs\n<Application.Resources> \n    <ResourceDictionary> \n        <ResourceDictionary.MergedDictionaries> \n            <ResourceDictionary  \n                 Source=\"Themes/Brushes.xaml\" /> \n        </ResourceDictionary.MergedDictionaries> \n    </ResourceDictionary> \n</Application.Resources> \n```", "```cs\n<Application.Resources> \n    <ResourceDictionary> \n        <SolidColorBrush Color=\"Red\" x:Key=\"redBrush\" /> \n        <SolidColorBrush Color=\"Green\" x:Key=\"greenBrush\" /> \n        <SolidColorBrush Color=\"Blue\" x:Key=\"blueBrush\" /> \n        <ResourceDictionary.MergedDictionaries> \n            <ResourceDictionary  \n                     Source=\"Themes/SolidBrushes.xaml\" /> \n            <ResourceDictionary  \n                     Source=\"Themes/GradientBrushes.xaml\" /> \n            <ResourceDictionary Source=\"Themes/Fonts.xaml\" /> \n        </ResourceDictionary.MergedDictionaries> \n    </ResourceDictionary> \n</Application.Resources> \n```", "```cs\n<Rectangle Height=\"100\" \n           Width=\"300\"/> \n```", "```cs\n<Rectangle Fill=\"{DynamicResource {x:Static SystemColors.DesktopBrushKey}}\" \n           Height=\"100\" \n           Width=\"300\"/> \n```", "```cs\nFill=\"{DynamicResource {x:Static SystemColors.DesktopBrushKey}}\" \n```", "```cs\n<TextBlock FontFamily=\"{DynamicResource {x:Static SystemFonts.CaptionFontFamily}}\" \n           FontSize=\"{DynamicResource {x:Static SystemFonts.CaptionFontSizeKey}}\" \n           FontWeight=\"{DynamicResource {x:Static SystemFonts.CaptionFontWeightKey}}\" \n           Text=\"Hello World!\"/> \n```", "```cs\n<DockPanel Margin=\"10\"> \n    <StackPanel Orientation=\"Vertical\" \n                DockPanel.Dock=\"Left\"> \n        <ListBox Width=\"180\" Height=\"110\"> \n        </ListBox> \n        <TextBlock> \n        </TextBlock> \n    </StackPanel> \n    <StackPanel Orientation=\"Vertical\" \n                Margin=\"4 0\" \n                DockPanel.Dock=\"Right\"> \n        <TextBlock Text=\"Firstname\"/> \n        <TextBox Text=\"\"/> \n        <TextBlock Text=\"Lastname\"/> \n        <TextBox Text=\"\"/> \n        <Button Content=\"Add\" \n                Margin=\"0 8\"/> \n    </StackPanel> \n</DockPanel> \n```", "```cs\npublic class UserModel \n{ \n    public string Firstname { get; set; } \n    public string Lastname { get; set; } \n} \n```", "```cs\nusing CH07.MVVMDemo.Models; \nusing System.Collections.ObjectModel; \nusing System.ComponentModel; \n```", "```cs\npublic class MainWindowViewModel : INotifyPropertyChanged \n```", "```cs\npublic event PropertyChangedEventHandler PropertyChanged; \npublic void OnPropertyChanged(string propertyName) \n{ \n    PropertyChanged?.Invoke(this,  \n        new PropertyChangedEventArgs(propertyName)); \n}\n```", "```cs\nprivate UserModel m_selectedUser; \npublic UserModel SelectedUser \n{ \n    get { return m_selectedUser; } \n    set \n    { \n        m_selectedUser = value; \n        OnPropertyChanged(\"SelectedUser\"); \n    } \n} \n\nprivate ObservableCollection<UserModel> m_userCollection; \npublic ObservableCollection<UserModel> UserCollection \n{ \n    get { return m_userCollection; } \n    set \n    { \n        m_userCollection = value; \n        OnPropertyChanged(\"UserCollection\"); \n    } \n} \n```", "```cs\npublic MainWindowViewModel() \n{ \n    UserCollection = new ObservableCollection<UserModel> \n    { \n        new UserModel \n        { \n            Firstname = \"User\", Lastname = \"One\" \n        }, \n        new UserModel \n        { \n            Firstname = \"User\", Lastname = \"Two\" \n        }, \n        new UserModel \n        { \n            Firstname = \"User\", Lastname = \"Three\" \n        }, \n        new UserModel \n        { \n            Firstname = \"User\", Lastname = \"Four\" \n        }, \n    }; \n} \n```", "```cs\n<Window.Resources> \n    <viewmodels:MainWindowViewModel x:Key=\"ViewModel\"/> \n</Window.Resources> \n```", "```cs\n<DockPanel DataContext=\"{StaticResource ViewModel}\" \n           Margin=\"10\"> \n```", "```cs\n<ListBox Width=\"180\" Height=\"110\" \n         ItemsSource=\"{Binding UserCollection}\" \n         SelectedItem=\"{Binding SelectedUser}\">\n```", "```cs\n<TextBlock DataContext=\"{Binding SelectedUser}\"> \n    <Run Text=\"Selected:\"/> \n    <Run Text=\"{Binding Firstname}\"/> \n    <Run Text=\"{Binding Lastname}\"/> \n</TextBlock> \n```", "```cs\n<ListBox.ItemTemplate> \n    <DataTemplate> \n        <TextBlock> \n            <Run Text=\"{Binding Firstname}\"/> \n            <Run Text=\"{Binding Lastname}\"/> \n        </TextBlock> \n    </DataTemplate> \n</ListBox.ItemTemplate>\n```", "```cs\n<StackPanel Orientation=\"Vertical\" \n            DockPanel.Dock=\"Left\"> \n    <ListBox Width=\"180\" Height=\"110\" \n             ItemsSource=\"{Binding UserCollection}\" \n             SelectedItem=\"{Binding SelectedUser}\"> \n        <ListBox.ItemTemplate> \n            <DataTemplate> \n                <TextBlock> \n                <Run Text=\"{Binding Firstname}\"/> \n                <Run Text=\"{Binding Lastname}\"/> \n                </TextBlock> \n            </DataTemplate> \n        </ListBox.ItemTemplate> \n    </ListBox> \n    <TextBlock DataContext=\"{Binding SelectedUser}\"> \n        <Run Text=\"Selected:\"/> \n        <Run Text=\"{Binding Firstname}\"/> \n        <Run Text=\"{Binding Lastname}\"/> \n    </TextBlock> \n</StackPanel> \n```", "```cs\npublic class RoutedCommands \n{ \n    public static RoutedCommand AddCommand =  \n                            new RoutedCommand(); \n} \n```", "```cs\nusing System.Windows.Input; \n```", "```cs\nprivate UserModel m_newUserDetails; \npublic UserModel NewUserDetails \n{ \n    get { return m_newUserDetails; } \n    set \n    { \n        m_newUserDetails = value; \n        OnPropertyChanged(\"NewUserDetails\"); \n    } \n} \n```", "```cs\npublic MainWindowViewModel() \n{ \n    UserCollection = new ObservableCollection<UserModel> \n    { \n        new UserModel \n        { \n            Firstname = \"User\", Lastname = \"One\" \n        }, \n        new UserModel \n        { \n            Firstname = \"User\", Lastname = \"Two\" \n        }, \n        new UserModel \n        { \n            Firstname = \"User\", Lastname = \"Three\" \n        }, \n        new UserModel \n        { \n            Firstname = \"User\", Lastname = \"Four\" \n        }, \n    }; \n\n    NewUserDetails = new UserModel(); \n} \n```", "```cs\n<StackPanel Orientation=\"Vertical\" \n            Margin=\"4 0\" \n            DockPanel.Dock=\"Right\" \n            DataContext=\"{Binding NewUserDetails}\"> \n    <TextBlock Text=\"Firstname\"/> \n    <TextBox Text=\"{Binding Firstname, Mode=TwoWay}\"/> \n    <TextBlock Text=\"Lastname\"/> \n    <TextBox Text=\"{Binding Lastname, Mode=TwoWay}\"/> \n    <Button Content=\"Add\" \n            Margin=\"0 8\"/> \n</StackPanel> \n```", "```cs\n\n9.  What next? We need to create the command binding under the `Window` tag. Add the following XAML code block inside the `Window` tag:\n\n```", "```cs\n\n10.  Register the `CanExecute` and `Executed` events, named `CanExecute_AddCommand` and `Execute_AddCommand,` respectively, inside the code-behind class file, which is `MainWindow.xaml.cs` in our case.\n11.  Navigate back to the `MainWindow.xaml` and associate the command with the `Button` control, as follows:\n\n```", "```cs\n\n12.  The complete markup changes will look like this:\n\n```", "```cs\n\n13.  Now open the `MainWindow.xaml.cs` file and create a member variable of type `MainWindowViewModel`. Name it `ViewModel` and initialize it as `null`. This will be used to store the reference of the ViewModel from the window resources:\n\n```", "```cs\n\n14.  Inside the constructor, grab the associated `ViewModel` reference from the `Resources`:\n\n```", "```cs\n\n15.  The `CanExecute_AddCommand` event passes an argument of type `CanExecuteRoutedEventArgs`. It contains a property named `CanExecute`, which is responsible for holding a `boolean` value, indicating whether the `System.Windows.Input.RoutedCommand` associated with this event can be executed on the command target. As we have associated the `AddCommand` with the button, `e.CanExecute = true` will enable the button. In other cases, it will be disabled. So, let's modify the `CanExecute_AddCommand` event to implement this logic:\n\n```", "```cs\n\n16.  Once that has been done, we need to implement the `Execute` command. Modify the `Execute_AddCommand` event handler, as follows:\n\n```", "```cs\n\n17.  Let's run the application now. You will see that the Add button is disabled. This is because, as per our logic, the `e.CanExecute` property has been set to `false` as both the `TextBox` fields are empty:\n\n![](img/f0097033-b474-41b7-a43a-9ab9ffc5cddc.png)\n\n18.  Enter some strings into both the `TextBox` fields and press the *TAB* key. It will automatically enable the button control, as follows:\n\n![](img/a0ab56c5-c0f1-48cf-b3e8-04542e368323.png)\n\n19.  Click on Add, which will add the entered value to the collection and reset the `TextBox` fields. As soon as it resets the fields to empty, the button will automatically become disabled until the user fills the fields again:\n\n![](img/8153737f-b546-4580-bce4-951fb10b4e72.png)\nHow it works...\nThe `RoutedCommand` class falls under the `System.Windows.Input` namespace, and provides two methods named `CanExecute` and `Execute`. The `CanExecute` method indicates whether the command is available, whereas the `Execute` method executes the command.\nThe `RoutedCommand` objects are basically empty shells and can't contain the implementation. For this to work, they look for a `CommandBinding` object from a target element that indicates the handler of the command. It registers the `CanExecute` and `Execute` methods to fire when the command associates with any control.\nFor example, in this demonstration, the `AddCommand` associated with the `Button` control has a `CommandBinding`, which denotes its `CanExecute` and `Execute` handler as `CanExecute_AddCommand` and `Execute_AddCommand`. When the button fires the `Click` event, it routes to the command binding to execute the associate command interface.\n\n```"]