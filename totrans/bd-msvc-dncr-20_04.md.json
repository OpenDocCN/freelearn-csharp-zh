["```cs\n [Fact]\n public void Get_Returns_ActionResults()\n {\n    // Arrange\n    var mockRepo = new Mock<IProductRepository>();\n    mockRepo.Setup(repo => repo.GetAll().\n    ToViewModel()).Returns(GetProducts());\n    var controller = new ProductController(mockRepo.Object);\n    // Act\n    var result = controller.Get();\n    // Assert\n    var viewResult = Assert.IsType<OkObjectResult>(result);\n    var model = Assert.IsAssignableFrom<\n    IEnumerable<ProductViewModel>>(viewResult.Value);\n    Assert.Equal(2, model.Count());\n }\n```", "```cs\npublic class ProductData\n{\n  public IEnumerable<ProductViewModel> GetProducts()\n  {\n    var productVm = new List<ProductViewModel>\n    {\n      new ProductViewModel\n      {\n        CategoryId = Guid.NewGuid(),\n        CategoryDescription = \"Category Description\",\n        CategoryName = \"Category Name\",\n        ProductDescription = \"Product Description\",\n        ProductId = Guid.NewGuid(),\n        ProductImage = \"Image full path\",\n        ProductName = \"Product Name\",\n        ProductPrice = 112M\n      },\n      new ProductViewModel\n      {\n        CategoryId = Guid.NewGuid(),\n        CategoryDescription = \"Category Description-01\",\n        CategoryName = \"Category Name-01\",\n        ProductDescription = \"Product Description-01\",\n        ProductId = Guid.NewGuid(),\n        ProductImage = \"Image full path\",\n        ProductName = \"Product Name-01\",\n        ProductPrice = 12M\n      }\n    };\n    return productVm;\n  }\n  public IEnumerable<Product> GetProductList()\n  {\n    return new List<Product>\n    {\n      new Product\n      {\n        Category = new Category(),\n        CategoryId = Guid.NewGuid(),\n        Description = \"Product Description-01\",\n        Id = Guid.NewGuid(),\n        Image = \"image full path\",\n        Name = \"Product Name-01\",\n        Price = 12M\n      },\n      new Product\n      {\n        Category = new Category(),\n        CategoryId = Guid.NewGuid(),\n        Description = \"Product Description-02\",\n        Id = Guid.NewGuid(),\n        Image = \"image full path\",\n        Name = \"Product Name-02\",\n        Price = 125M\n      }\n    };\n  }\n}\n```", "```cs\npublic class ProductTests\n{\n    [Fact]\n    public void Get_Returns_ActionResults()\n    {\n      // Arrange\n      var mockRepo = new Mock<IProductRepository>();\n      mockRepo.Setup(repo => repo.GetAll()).\n      Returns(new ProductData().GetProductList());\n      var controller = new ProductController(mockRepo.Object);\n      // Act\n      var result = controller.GetList();\n      // Assert\n      var viewResult = Assert.IsType<OkObjectResult>(result);\n      var model = Assert.IsAssignableFrom<IEnumerable<\n      ProductViewModel>>(viewResult.Value);\n      Assert.NotNull(model);\n      Assert.Equal(2, model.Count());\n    }\n}\n```", "```cs\n {\n   \"ConnectionStrings\": \n   {\n     \"ProductConnection\": \"Data Source=.;Initial\n     Catalog=ProductsDB;Integrated\n     Security=True;MultipleActiveResultSets=True\"\n   },\n   \"buildOptions\": \n   {\n     \"copyToOutput\": \n     {\n       \"include\": [ \"appsettings.json\" ]\n     }\n   }\n } \n```", "```cs\npublic virtual void ConfigureServices(IServiceCollection services)\n{\n   services.AddTransient<IProductRepository,\n   ProductRepository>();\n   services.AddDbContext<ProductContext>(\n   o => o.UseSqlServer(Configuration.\n   GetConnectionString(\"ProductConnection\")));\n   services.AddMvc();\n   //Code ommited\n}\npublic virtual void Configure(IApplicationBuilder app, IHostingEnvironment env)\n{\n   if (env.IsDevelopment())\n   {\n      app.UseDeveloperExceptionPage();\n      app.UseBrowserLink();\n   }\n   else\n   {\n      app.UseExceptionHandler(\"/Home/Error\");\n   }\n   app.UseStaticFiles();\n   app.UseMvc(routes =>\n   {\n      routes.MapRoute(name: \"default\",\n      template: \"{controller=Home}/{action=\n      Index}/{id?}\");\n    });\n    // Enable middleware to serve generated Swagger \n    as a JSON endpoint.app.UseSwagger();\n    // Enable middleware to serve swagger-ui (HTML, JS, \n    CSS, etc.), specifying the Swagger JSON endpoint.\n    app.UseSwaggerUI(c =>\n    {\n      c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \n      \"Product API V1\");\n    });\n}\n```", "```cs\npublic class TestStartup : Startup\n{\n   public TestStartup(IConfiguration \n   configuration) : base(configuration)\n   { }\n   public override void ConfigureServices\n   (IServiceCollection services)\n   {\n   //mock context\n   services.AddDbContext<ProductContext>(\n   o => o.UseSqlServer(Configuration.\n   GetConnectionString(\"ProductConnection\")));\n   services.AddMvc();\n   }\n   public override void Configure(IApplicationBuilder\n   app, IHostingEnvironment env)\n   { }\n}\n```", "```cs\npublic class ProductTest\n{\n  public ProductTest()\n  {\n    // Arrange\n    var webHostBuilder = new WebHostBuilder()\n    .UseStartup<TestStartup>();\n    var server = new TestServer(webHostBuilder);\n    _client = server.CreateClient();\n  }\n  private readonly HttpClient _client;\n  [Fact]\n  public async Task ReturnProductList()\n  {\n    // Act\n    var response = await _client.GetAsync\n    (\"api/product/productlist\"); //change per //setting\n    response.EnsureSuccessStatusCode();\n    var responseString = await response.Content.\n    ReadAsStringAsync();\n    // Assert\n    Assert.NotEmpty(responseString);\n  }\n}\n```", "```cs\npublic class ConsumerProductApi : IDisposable\n{\n  public ConsumerProductApi()\n  {\n    PactBuilder = new PactBuilder(new PactConfig\n    {\n      SpecificationVersion = Constant.SpecificationVersion,\n      LogDir = Helper.SpecifyDirectory(Constant.LogDir),\n      PactDir = Helper.SpecifyDirectory(Constant.PactDir)\n    })\n    .ServiceConsumer(Constant.ConsumerName)\n    .HasPactWith(Constant.ProviderName);\n    MockProviderService = PactBuilder.MockService\n    (Constant.Port, Constant.EnableSsl);\n  }\n  public IPactBuilder PactBuilder { get; }\n  public IMockProviderService MockProviderService { get; }\n  public string ServiceBaseUri => $\"http://localhost:{Constant.Port}\";\n  public void Dispose()\n  {\n    PactBuilder.Build();\n  }\n}\n```", "```cs\n[Fact]\npublic void WhenApiIsUp_ReturnsTrue()\n{\n  //Arrange\n  _mockProviderService.UponReceiving(\"a request to\n  check the api status\")\n  .With(new ProviderServiceRequest\n  {\n    Method = HttpVerb.Get,\n    Headers = new Dictionary<string, object> { { \"Accept\",\n    \"application/json\" } },\n    Path = \"/echo/status\"\n  })\n  .WillRespondWith(new ProviderServiceResponse\n  {\n    Status = 200,\n    Headers = new Dictionary<string, object> { {\n    \"Content-Type\", \"application/json; charset=utf-8\" } },\n    Body = new\n    {\n      up = true,\n      upSince = DateTime.UtcNow,\n      version = \"2.0.0\",\n      message = \"I'm up and running from last 19 hours.\"\n    }\n  });\n  var consumer = new ProductApiClient(_serviceBaseUri);\n  //Act\n  var result = consumer.ApiStatus().Up;\n  //Assert\n  Assert.True(result);\n  _mockProviderService.VerifyInteractions();\n}\n```", "```cs\n{\n  \"consumer\": \n  {\n    \"name\": \"Product API Consumer\"\n  },\n  \"provider\": \n  {\n    \"name\": \"Product API\"\n  },\n  \"interactions\": \n  [\n    {\n      \"description\": \"a request to check the api status\",\n      \"request\": \n      {\n        \"method\": \"get\",\n        \"path\": \"/echo/status\",\n        \"headers\": \n        {\n          \"Accept\": \"application/json\"\n        }\n      },\n      \"response\": \n      {\n        \"status\": 200,\n        \"headers\": \n        {\n          \"Content-Type\": \"application/json; charset=utf-8\"\n        },\n        \"body\": \n        {\n          \"up\": true,\n          \"upSince\": \"2017-11-06T00:52:01.3164539Z\",\n          \"version\": \"2.0.0\",\n          \"message\": \"I'm up and running from last 19 hours.\"\n        } \n      }\n    }\n  ],\n  \"metadata\": \n  {\n    \"pactSpecification\": \n    {\n      \"version\": \"2.0.0\"\n    }\n  }\n}\n```", "```cs\n//Arrange\nconst string serviceUri = \"http://localhost:13607\";\nvar config = new PactVerifierConfig\n{\n  Outputters = new List<IOutput>\n  {\n    new CustomOutput(_output)\n  }\n};\n//code omitted\n```"]