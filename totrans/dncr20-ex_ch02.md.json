["```cs\n#include <ncurses.h>\n\nVoid WelcomeMessage()\n{\n  initscr(); /* Start ncurses mode */\n  printw(\"Welcome to .NET Core 2.0\"); /* Print welcome message */\n  Move(3, 2); /* moves the cursor to 3rd row and 2nd column */\n  Addch('a' | A_Bold | A_UNDERLINE); /* Move() and addch() functions     \n  can be replaced by mvaddch(row,col,ch); */\n  refresh(); /* Print it on to the real screen */\n  getch(); /* Wait for user input */\n  endwin(); /* End curses mode */\n}\nint main()\n{\n  WelcomeMessage();\n  return 0;\n}\n```", "```cs\nsudo apt-get install libncurses5-dev libncursesw5-dev\n```", "```cs\ngcc  <Program_name_with_Extension> -o <Out_FileName> -lncurses\n```", "```cs\ngcc IntroToNcurses.c -o ExampleOfNcurses -lncurses \n```", "```cs\nusing System.Runtime.InteropServices;\npublic class Demo\n{\n    // Import user32.dll (contains the method we need) and define\n    // the method corresponding to the native method\n    [DllImport(\"user32.dll\")]\n    static extern bool AnyPopup();\n\n    public static void Main(string[] args)\n    {\n        // Invoke the method as a regular managed method.\n        AnyPopup();\n    }\n}\n```", "```cs\nnamespace System.Runtime.InteropServices\n{\n    //\n    // Summary:\n    // Indicates that the attributed method is exposed by an unmanaged \n       dynamic-link\n    // library (DLL) as a static entry point.\n    [AttributeUsage(AttributeTargets.Method, Inherited = false)]\n    public sealed class DllImportAttribute : Attribute\n    {\n        //\n        // Summary:\n        // Enables or disables best-fit mapping behavior when \n           converting Unicode characters\n        // to ANSI characters.\n        public bool BestFitMapping;\n        //\n        // Summary:\n        // Indicates the calling convention of an entry point.\n        public CallingConvention CallingConvention;\n        //\n        // Summary:\n        // Indicates how to marshal string parameters to the method and \n           controls name mangling.\n        public CharSet CharSet;\n        //\n        // Summary:\n        // Indicates the name or ordinal of the DLL entry point to be \n           called.\n        public string EntryPoint;\n        //\n        // Summary:\n        // Controls whether the \n           System.Runtime.InteropServices.DllImportAttribute.CharSet\n        // field causes the common language runtime to search an \n           unmanaged DLL for entry-point\n        // names other than the one specified.\n        public bool ExactSpelling;\n        //\n        // Summary:\n        // Indicates whether unmanaged methods that have HRESULT or \n           retval return values\n        // are directly translated or whether HRESULT or retval return \n           values are automatically\n        // converted to exceptions.\n        public bool PreserveSig;\n        //\n        // Summary:\n        // Indicates whether the callee calls the SetLastError Win32 \n           API function before\n        // returning from the attributed method.\n        public bool SetLastError;\n        //\n        // Summary:\n        // Enables or disables the throwing of an exception on an \n           unmappable Unicode character\n        // that is converted to an ANSI \"?\" character.\n        public bool ThrowOnUnmappableChar;\n\n        //\n        // Summary:\n        // Initializes a new instance of the  \n           System.Runtime.InteropServices.DllImportAttribute\n        // class with the name of the DLL containing the method to \n           import.\n        //\n        // Parameters:\n        // dllName:\n        // The name of the DLL that contains the unmanaged method. This \n           can include an assembly\n        // display name, if the DLL is included in an assembly.\n        public DllImportAttribute(string dllName);\n\n        //\n        // Summary:\n        // Gets the name of the DLL file that contains the entry point.\n        //\n        // Returns:\n        // The name of the DLL file that contains the entry point.\n        public string Value { get; }\n    }\n}\n```", "```cs\n[DllImport(\"dllname\", EntryPoint=\"MethodName\")]\n[DllImport(\"dllname\", EntryPoint=\"#XYZ\")]\n```", "```cs\n#ifndef Calculate\n#define Calculate\n\nextern \"C\"\n{\n  __declspec(dllexport)int Sum(int a, int b)\n  {\n    return a + b;\n  }\n}\n\n#endif\n```", "```cs\nusing System.Runtime.InteropServices;\n\nclass Program\n\n    {\n        //Insert file path of dll you want to import\n        [DllImport(@\"C:\\Users\\neshriv\\Documents\\Visual Studio \n        2017\\Projects\\ExampleDLL\\Debug\\ExampleDLL.dll\")]\n        public static extern int Sum(int a, int b);\n        static void Main(string[] args)\n        {\n\n            int sumValue = Sum(3, 4);\n\n            Console.WriteLine(\"Sum of 3 and 4 is {0}\",sumValue);\n\n            Console.ReadKey();\n\n        }\n\n    }\n```", "```cs\n# include<stdio.h>\n\nint hello()\n{\n  return 15;\n}\n```", "```cs\ngcc -shared -o libHelloSO.so -fPIC HelloSOLib.c\n```", "```cs\nUsing System;\nUsing System.Runtime.InteropServices;\n\nNamespace Hello\n{\n  Class Program\n  {\n    [DllImport(\"/home/neha/Documents/InteroWithMonoLib/libHelloSO.so\")]\n    Private static extern int hello()\n    Static void Main(string[] args)\n    {\n      int a = hello();\n      Console.WriteLine(a);\n    }\n  }\n}\n```", "```cs\nmono -O=all --aot <exe name>\n```", "```cs\nsudo apt install mono-mcs\n```", "```cs\nmcs -out:helloNative.exe InteropWithNativeSO.cs\n```", "```cs\nmono helloNative.exe\n```", "```cs\n#include \"stdafx.h\"\n\nconst char * HelloMsg()\n{\n  char * msg = \"Hello .NET Core.\";\n  return msg;\n}\nint main()\n{\n  printf(HelloMsg());\n}\n```", "```cs\n[DllImport(\"HelloMsgLib.so\")]\npublic static extern char *  HelloMsg();\n```", "```cs\n#ifndef Calculate\n#define Calculate\n\nextern \"C\"\n{\n  __declspec(dllexport)int Sum(int a, int b)\n  {\n    return a + b;\n  }\n  __declspec(dllexport) int Multiply(int number1, int number2)\n  {\n    int result = number1 * number2;\n    return result;\n  }\n  __declspec(dllexport) double divide(int number1, int number2)\n  {\n    double result = 0.0;\n    if (number2 != 0)\n    result = number1 / number2;\n    return result;\n  }\n}\n#endif\n```", "```cs\nusing System;\nusing System.Runtime.InteropServices;\nnamespace InteropWithCS\n{\n    class Program\n    {\n        [DllImport(@\"C:\\Users\\neshriv\\Documents\\Visual Studio \n        2017\\Projects\\ExampleDLL\\Debug\\ExampleDLL.dll\")]\n\n        static extern int Multiply(int number1, int number2);\n\n        [DllImport(@\"C:\\Users\\neshriv\\Documents\\Visual Studio \n        2017\\Projects\\ExampleDLL\\Debug\\ExampleDLL.dll\")]\n\n        static extern double divide(int number1, int number2);\n\n        [DllImport(@\"C:\\Users\\neshriv\\Documents\\Visual Studio \n        2017\\Projects\\ExampleDLL\\Debug\\ExampleDLL.dll\")]\n\n        static extern int Sum(int a, int b);\n        static void Main(string[] args)\n        {\n\n            Console.WriteLine(\"Enter number1\");\n            int number1 = Convert.ToInt32(Console.ReadLine());\n            Console.WriteLine(\"Enter number2\");\n            int number2 = Convert.ToInt32(Console.ReadLine());\n            Console.WriteLine(\"Select Operation : 1 for Sum , 2 for \n            multiply, 3 for divide\");\n            int option = Convert.ToInt32(Console.ReadLine());\n            int result ;\n            switch (option)\n            {\n                case 1:\n                    result = Sum(number1, number2);\n                    Console.WriteLine(\"You have selected Sum \n                    operation! \n                    Sum is : \" + result);\n                    Console.ReadLine();\n                    break;\n                case 2:\n                    result = Multiply(number1, number2);\n                    Console.WriteLine(\"You have selected Sum \n                    operation! \n                    multiplication is : \" + result);\n                    Console.ReadLine();\n                    break;\n                case 3:\n                    double result1 = divide(number1, number2);\n                    Console.WriteLine(\"You have selected Sum \n                    operation! \n                    division is : \" + result1);\n                    Console.ReadLine();\n                    break;\n            }\n\n        }\n\n    }\n\n}\n```", "```cs\n# include <stdio.h>\n# include <ncurses.h>\n\nint row, column, // current row and column (Top left is (0,0))\nnumberOfRows, // number of rows in current window\nnumberOfColumns; // number of columns in current window\n\nvoid drawCharOnWindow(char drawChar, int row, int column)\n\n{\n  move(row, column); // ncurses call to move cursor to given row, given \n  column\n\n  delch(); //ncurses calls to replace character \n  insch(drawChar); //under cursor by drawChar\n\n  refresh(); // ncurses call to update screen\n  row++; // go to next row\n  // check for need to shift right or wrap around\n  if (row == numberOfRows)\n  {\n    row = 0;\n    column++;\n    if (column == numberOfColumns) column = 0;\n  }\n}\nvoid hello(int i, int j, char c)\n{\n  initscr(); // ncurses call to initialize window\n  refresh(); // curses call to implement all changes since last refresh\n  while (1)\n  {\n    if (c == 'q') break; // quit?\n    {\n      drawCharOnWindow(c, i, j);\n    }\n  }\n}\n```", "```cs\ngcc -shared -o libHelloSO.so -fPIC HelloSOLib.c -lncurses\n```", "```cs\nusing System;\nusing System.Runtime.InteropServices;\n\nnamespace Hello\n{\n    class Program\n    {\n        [DllImport(\"/home/neha/Documents/\n        InteropWithMonoLib/libHelloSO.so\")]\n        private static extern void hello(int i, int j, int c);\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Enter Character you want to print:\\n\");\n            char c = Convert.ToChar(Console.ReadLine());\n            Console.WriteLine(\"Enter row numbers till where to want to \n            see pattern of character:\\n\");\n            int i = Convert.ToInt32(Console.ReadLine());\n            Console.WriteLine(\"Enter column numbers till where to want \n            to see pattern of character:\\n\");\n            int j = Convert.ToInt32(Console.ReadLine());\n            for (int a = 0; a < i; a++)\n            {\n                for (int b = 0; b < j; b++)\n                {\n                    hello(i, j, c);\n                }\n            }\n        }\n    }\n}\n```", "```cs\nmcs -out:helloNative.exe InteropWithNativeSO.cs\n```", "```cs\nmono helloNative.exe\n```", "```cs\ndotnet new console\n```", "```cs\ndotnet run\n```"]