["```cs\nusing UnityEngine;\n\nnamespace Chapter.Singleton\n{\n    public class  Singleton<T> : \n        MonoBehaviour where T : Component {\n\n        private static T _instance;\n\n        public static T Instance\n        {\n            get\n            {\n                if (_instance == null)\n                {\n                    _instance = FindObjectOfType<T>();\n\n                    if (_instance == null)\n                    {\n                        GameObject obj = new GameObject();\n                        obj.name = typeof(T).Name;\n                        _instance = obj.AddComponent<T>();\n                    }\n                }\n\n                return _instance;\n            }\n        }\n```", "```cs\n        public virtual void Awake()\n        {\n            if (_instance == null)\n            {\n                _instance = this as T;\n                DontDestroyOnLoad(gameObject);\n            }\n            else\n            {\n                Destroy(gameObject);\n            }\n        }\n    }\n}\n```", "```cs\nDontDestroyOnLoad(gameObject);\n```", "```cs\nusing System;\nusing UnityEngine;\nusing UnityEngine.SceneManagement;\n\nnamespace Chapter.Singleton \n{\n    public class GameManager : MonoBehaviour\n    {\n        private DateTime _sessionStartTime;\n        private DateTime _sessionEndTime;\n\n        void Start() {\n            // TODO:\n            // - Load player save\n            // - If no save, redirect player to registration scene\n            // - Call backend and get daily challenge and rewards \n\n            _sessionStartTime = DateTime.Now;\n            Debug.Log(\n                \"Game session start @: \" + DateTime.Now);\n        }\n\n        void OnApplicationQuit() {\n            _sessionEndTime = DateTime.Now;\n\n            TimeSpan timeDifference = \n                _sessionEndTime.Subtract(_sessionStartTime);\n\n            Debug.Log(\n                \"Game session ended @: \" + DateTime.Now);\n            Debug.Log(\n                \"Game session lasted: \" + timeDifference);\n        }\n\n        void OnGUI() {\n            if (GUILayout.Button(\"Next Scene\")) {\n                SceneManager.LoadScene(\n                    SceneManager.GetActiveScene().buildIndex + 1);\n            }\n        }\n    }\n}\n```", "```cs\npublic class GameManager : Singleton<GameManager> \n```", "```cs\nusing System;\nusing UnityEngine;\nusing UnityEngine.SceneManagement;\n\nnamespace Chapter.Singleton \n{\n    public class GameManager : Singleton<GameManager> \n    {\n        private DateTime _sessionStartTime;\n        private DateTime _sessionEndTime;\n\n        void Start() {\n            // TODO:\n            // - Load player save\n            // - If no save, redirect player to registration scene\n            // - Call backend and get daily challenge and rewards \n\n            _sessionStartTime = DateTime.Now;\n            Debug.Log(\n                \"Game session start @: \" + DateTime.Now);\n        }\n\n        void OnApplicationQuit() {\n            _sessionEndTime = DateTime.Now;\n\n            TimeSpan timeDifference = \n                _sessionEndTime.Subtract(_sessionStartTime);\n\n            Debug.Log(\n                \"Game session ended @: \" + DateTime.Now);\n            Debug.Log(\n                \"Game session lasted: \" + timeDifference);\n        }\n\n        void OnGUI() {\n            if (GUILayout.Button(\"Next Scene\")) {\n                SceneManager.LoadScene(\n                    SceneManager.GetActiveScene().buildIndex + 1);\n            }\n        }\n    }\n}\n```"]