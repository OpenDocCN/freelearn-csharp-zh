- en: '*Chapter 12*: Understanding Authentication'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have built the **user interface** (**UI**) and service layer of our
    e-commerce application. In this chapter, we will learn how to secure it. Our e-commerce
    application should be able to uniquely identify a user and respond to that user's
    requests. A commonly used pattern for establishing user identity involves the
    provision of a username and password. These are then verified against the user's
    profile data, which is stored in a database or an application. If it matches,
    a cookie or token with the user's identity is generated and stored in the client's
    browser so that, for subsequent requests, a cookie/token is sent to the server
    and validated to service requests.
  prefs: []
  type: TYPE_NORMAL
- en: '**Authentication** is a process in which you identify a user or a program accessing
    protected areas of your application. For instance, in our e-commerce application,
    a user can navigate through different pages and browse the products that are displayed.
    However, to place an order or view past orders, users need to provide a username
    and a password to identify themselves. If the user is new, they should create
    these to continue.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn about the features offered by ASP.NET Core related
    to authentication and understand various methods to implement authentication.
    In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the elements of authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to ASP.NET Core Identity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding OAuth 2.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to **Azure Active Directory** (**Azure AD**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to Windows Authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding best practices to secure client and server applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this chapter, you need basic knowledge of Azure, **Entity Framework** (**EF**),
    Azure AD B2C, and an active Azure subscription with a contributor role. If you
    don't have one, you can sign up for a free account at [https://azure.microsoft.com/en-in/free/](https://azure.microsoft.com/en-in/free/).
    Visual Studio 2022 is used to illustrate a few examples. You can download it from
    [https://visualstudio.microsoft.com](https://visualstudio.microsoft.com).
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the elements of authentication in .NET 6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Authentication in ASP.NET Core is handled by authentication middleware, which
    uses registered authentication handlers to perform authentication. Registered
    authentication handlers and their associated configurations are called **authentication
    schemes**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following list describes the core elements of an authentication framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Program.cs`. They comprise an authentication handler and have options to configure
    this handler. You can register multiple authentication schemes to authenticate,
    challenge, and forbid actions. Alternatively, you can specify authentication schemes
    in the authorization policies that you configure. The following is a sample code
    to register an `OpenIdConnect` authentication scheme:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code snippet, the authentication service is registered to use
    the `OpenIdConnect` authentication scheme with the Microsoft identity platform.
    Additionally, the necessary settings specified in the configuration file, in the
    `AzureAdB2C` section, are used to initialize the authentication options.
  prefs: []
  type: TYPE_NORMAL
- en: More details regarding `OpenIdConnect` and `AzureAdB2C` will be covered in the
    *Introduction to Azure AD* section of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '**Authentication handler**: Authentication handlers are responsible for authenticating
    a user. Based on the authentication scheme, they either construct an authentication
    ticket (usually, this is a token/cookie with the user''s identity) or reject a
    request if authentication is unsuccessful.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authenticate**: This method is responsible for constructing an authentication
    ticket with the user identity. For example, a cookie authentication scheme constructs
    a cookie, while a **JavaScript Object Notation** (**JSON**) **Web Token** (**JWT**)
    bearer scheme constructs a token.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Challenge**: This method is invoked by authorization when an unauthenticated
    user requests a resource that requires authentication. Based on the configured
    scheme, the user is then asked to authenticate.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Forbid**: This method is invoked by authorization when an authenticated user
    tries to access a resource to which they are not permitted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let's understand how to add authentication using the ASP.NET Core Identity
    framework.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to ASP.NET Core Identity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ASP.NET Core Identity is a membership-based system that provides an easy way
    to add login and user management features to your application. It offers UIs and
    **application programming interfaces** (**APIs**) to create new user accounts,
    provide email confirmation, manage user profile data, manage passwords (such as
    changing or resetting passwords), perform logins, logouts, and more, and enable
    **multi-factor authentication** (**MFA**). Also, it allows you to integrate with
    external login providers such as Microsoft Account, Google, Facebook, Twitter,
    and many other social websites. This is so that users can use their existing accounts
    to sign up instead of having to create new ones, thus enhancing the user experience.
  prefs: []
  type: TYPE_NORMAL
- en: By default, ASP.NET Core Identity stores user information such as usernames,
    passwords, and more in a SQL Server database using an EF Code-First approach.
    Additionally, it allows you to customize table/column names and capture additional
    user data such as the user's date of birth, phone number, and more. You can also
    customize it to save data in a different persistent store such as Azure Table
    Storage or a NoSQL database. It also provides an API to customize password hashing,
    password validation, and more.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will learn how to create a simple web application and
    configure it to use ASP.NET Core Identity for authentication.
  prefs: []
  type: TYPE_NORMAL
- en: Sample implementation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Visual Studio 2022, create a new project, select the **ASP.NET Core Web
    Application** template, provide your project details to continue, and change **Authentication
    type**. You will find the following list of options to choose from:'
  prefs: []
  type: TYPE_NORMAL
- en: '**None**: Choose this if no authentication is required for your application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Individual Accounts**: Choose this if you use a local store or SQL database
    to manage user identities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Microsoft Identity Platform**: Choose this if you wish to authenticate users
    against Azure AD or Azure AD B2C.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Windows**: Choose this if your application is only available on an intranet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For this sample implementation, we will use a local store to save user data.
    Select **Individual Accounts**, and click on **Create** to create the project,
    as illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.1 – Authentication type'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.1_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.1 – Authentication type
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, you can use the `dotnet` `SQLite` as the database store, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To configure a SQL database as a store, run the following command, making sure
    you apply migrations to create the necessary tables in the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, run the following command to build and run the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see output similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.2 – The dotnet run command output for reference'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.2_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.2 – The dotnet run command output for reference
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding screenshot, notice the logs from the console and the **Uniform
    Resource Locators** (**URLs**) with ports at which the application is accessible.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that your application is up and running, open the URL in the browser and
    click on **Register**. Provide the required details, and click on the **Register**
    button. You might see the following error message the first time you try this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.3 – A runtime exception due to missing migrations'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.3_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.3 – A runtime exception due to missing migrations
  prefs: []
  type: TYPE_NORMAL
- en: You can click on `Update-Database` to apply the migrations and rerun the application.
    Now, you should be able to register and log in to the application. Next, let's
    examine a project structure that has been created for us.
  prefs: []
  type: TYPE_NORMAL
- en: 'Under **Dependencies Packages**, you will notice the following NuGet packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Microsoft.AspNetCore.Identity.UI`: This is a Razor class library, and it contains
    the entire identity UI with which you can navigate from a browser—for example,
    `/Identity/Account/Register` or `/Identity/Account/Login`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Microsoft.AspNetCore.Identity.EntityFrameworkCore`: This is used by ASP.NET
    Core Identity to interact with the database store.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Microsoft.EntityFrameworkCore.SqlServer`: This is a library that is used to
    interact with SQLDB.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The packages can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.4 – The Solution Explorer view of the AuthSample project'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.4_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.4 – The Solution Explorer view of the AuthSample project
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's examine the code of `Program.cs`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code registers the authentication middleware that enables the
    authentication capability:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '`ApplicationDbContext` is registered as the dependent service by providing
    an `options` configuration with a connection string of `sql database` that is
    specified in `appsettings.json`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `AddDefaultIdentity` method registers services that generate a UI and configures
    a default identity system using `IdentityUser` as a model.
  prefs: []
  type: TYPE_NORMAL
- en: 'ASP.NET Core Identity allows us to configure a number of identity options to
    meet our needs—for example, the following code allows us to disable email confirmations,
    configure password requirements, and set lock timeout settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: For more details, you can refer to [https://docs.microsoft.com/en-us/aspnet/core/security/authentication/identity?view=aspnetcore-6.0](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/identity?view=aspnetcore-6.0).
  prefs: []
  type: TYPE_NORMAL
- en: Scaffolding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To further customize the UI and any other settings, you can selectively add
    source code contained in the Razor class library. Then, you can modify the generated
    source code to suit your needs. To scaffold, in Solution Explorer, right-click
    on **Project** | **Add** | **New Scaffolded Item** | **Identity** | **Add**.
  prefs: []
  type: TYPE_NORMAL
- en: 'This will open a window where you can select the files that you want to override,
    as illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.5 – Dialog to override the identity modules'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.5_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.5 – Dialog to override the identity modules
  prefs: []
  type: TYPE_NORMAL
- en: 'You can select to override all files or only choose those files that you want
    to customize. Choose your data context class and click on `Identity` folder—both
    Razor and the corresponding C# files will be added. The following screenshot illustrates
    the files that have been added based on the selection:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.6 – The Solution Explorer view of the AuthSample project'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.6_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.6 – The Solution Explorer view of the AuthSample project
  prefs: []
  type: TYPE_NORMAL
- en: For more details relating to customizations, you can refer to [https://docs.microsoft.com/en-us/aspnet/core/security/authentication/scaffold-identity?view=aspnetcore-6.0](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/scaffold-identity?view=aspnetcore-6.0).
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's understand how to integrate an ASP.NET Core application with external
    login providers.
  prefs: []
  type: TYPE_NORMAL
- en: Integration with external login providers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will learn how to integrate an ASP.NET Core application
    to use external login providers, such as Microsoft Account, Google, Facebook,
    Twitter, and more. Additionally, we will look at how to authenticate using an
    OAuth 2.0 flow so that users can use their existing credentials to sign up and
    access our application. A common pattern to integrate an ASP.NET Core application
    with any external login provider is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Acquire credentials (usually, the client ID and secret) to access OAuth APIs
    for authentication from the respective developer portal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the credentials in the application settings or user secrets.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we need to add the respective NuGet package to the project at **Add Middleware
    Support** to use the OpenID and OAuth 2.0 flows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `Program.cs`, add the `AddAuthentication` method to register the authentication
    middleware.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring Google
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To configure Google as an external login provider, you need to perform the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create OAuth credentials at [https://developers.google.com/identity/sign-in/web/sign-in](https://developers.google.com/identity/sign-in/web/sign-in).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Configure the credentials in the user secrets. You can use the `dotnet` CLI
    to add secrets to your project, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `Microsoft.AspNetCore.Authentication.Google` NuGet package to your
    project, and add the following code to `Program.cs`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Similarly, you can add multiple providers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To learn how to integrate with other popular external authentication providers,
    you can refer to [https://docs.microsoft.com/en-us/aspnet/core/security/authentication/social/?view=aspnetcore-6.0](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/social/?view=aspnetcore-6.0).
  prefs: []
  type: TYPE_NORMAL
- en: After you have completed the preceding steps, you should be able to use Google
    credentials to log in to your application. This concludes this section on using
    ASP.NET Core Identity with external login providers in your application for authentication.
    In the next section, let's see what OAuth is.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding OAuth 2.0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OAuth 2.0 is a modern and industry-standard protocol for securing web APIs.
    It simplifies the process by providing specific authorization flows for web apps,
    single-page apps, mobile apps, and more to access secured APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Let's consider a use case where you want to build a web portal in which users
    can sync and view photos/videos from their favorite applications such as Instagram,
    Facebook, or other third-party applications. Your application should be able to
    request data from third-party applications on behalf of the user. One approach
    involves the storing of a user's credentials in relation to each third-party application,
    and your application sends or requests data on behalf of the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'This approach can lead to many problems. They are outlined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: You need to design your application to securely store user credentials.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users might not be comfortable with their credentials being shared and stored
    by third-party applications in your application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a user changes their credentials, they need to be updated back in your application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the case of a security breach, fraudsters can gain unrestricted access to
    a user's data in third-party applications. This can lead to potential revenue
    and reputation loss.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OAuth 2.0 can handle all of the preceding use cases by addressing all of these
    concerns. Let''s see how it does this, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The user logs in to your application. To sync pictures/videos, the user will
    be redirected to a third-party application, and they will need to sign in with
    their credentials.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: OAuth 2.0 reviews and approves the app's request to fetch resources.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user is redirected back to your application with the authorization code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To sync pictures/videos, your application can acquire a token by exchanging
    the authorization code and then making an API call to a third-party application
    along with the token.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For each request, the third-party application validates the token and responds
    accordingly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In OAuth flows, there are four parties involved: **Client**, **Resource Owner**,
    **Authorization Server**, and **Resource Server**. Refer to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.7 – An OAuth2 flow'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.7_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.7 – An OAuth2 flow
  prefs: []
  type: TYPE_NORMAL
- en: 'From the preceding screenshot, we can see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Client**: This refers to an application that acquires a token from the authorization
    server and makes requests to the resource server on behalf of the resource owner.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resource Owner**: This is an entity that owns resources/data and is capable
    of granting access to clients.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authorization Server**: This authenticates the resource owner and issues
    tokens to clients.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resource Server**: This is the server that hosts resources or data relating
    to the resource owner, uses a bearer token to validate, and responds to or rejects
    requests coming from clients.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tokens
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The authorization server authenticates the user and provides an ID token, access
    token, and refresh token, which are used by native/web applications to access
    protected services. Let''s understand each of them a bit more:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Access token**: This is issued by the authorization server as part of the
    OAuth flow, usually in JWT format; a Base64-encoded JSON object containing information
    about the issuer, user, scope, expiry, and more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Refresh token**: This is issued by the authorization server along with the
    access token, which is used by the client application to request a new access
    token before it expires.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ID tokens**: This is issued by the authorization server as part of the OpenID
    Connect flow, which can be used to authenticate the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: OpenID Connect is an authentication protocol built on top of OAuth2\. It can
    be used to verify the identity of a user on an authentication server.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Authorization grant types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'OAuth 2.0 defines a number of ways for a client to acquire tokens to access
    secured resources—these are called **grants**. It defines five grant types: authorization
    code flow, implicit flow, on-behalf-of flow, client credentials flow, and device
    grant flow. They are outlined here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Authorization code flow**: This flow is suitable for web, mobile, and single-page
    apps, where your application needs to get your data from another server. The authorization
    code flow begins with the client redirecting the user to authenticate at the authorization
    server. If successful, the user gives their consent to permissions required by
    the client and is redirected back to the client with the authorization code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here, the client's identity is verified by the configured redirection **Uniform
    Resource Identifier** (**URI**) in the authorization server. Next, the client
    requests the access token by passing the authorization code and, in return, gets
    the access token, the refresh token, and the expiry date. The client can use the
    access token to call the web API. Since access tokens are short-lived, before
    they expire, the client should request a new access token by passing the access
    token and the refresh token.
  prefs: []
  type: TYPE_NORMAL
- en: '**Implicit flow**: This is a simplified version of code flow suitable for single-page,
    JavaScript-based applications. With implicit flow, instead of issuing an authorization
    code, the authorization server only issues an access token. Here, the client identity
    is not verified, as there is no need to specify a redirect URL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**On-behalf-of flow**: This flow is best suited to situations where a client
    invokes a call to a web API (say, A) that, in turn, needs to invoke another API
    (say, on B). The flow goes like this: the user sends a request along with a token
    to A; A requests a token for B from the authorization server by providing a token
    of A and credentials such as the client ID and client secret of A. Once it acquires
    the token for B, it invokes the API on B.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Client credentials flow**: This flow is used in cases where server-to-server
    interaction is needed (say, A to B, where A acquires the token to interact with
    B using its credentials—usually, this is the client ID and the client secret—and
    then invokes the API with the acquired token). This request runs under the context
    of A instead of the user. The required permissions should be granted to A to perform
    the necessary actions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Device grant flow**: This flow is used in cases where users need to sign
    in to devices with no browsers, such as smart TVs, IoT devices, or printers. The
    user visits a web page on mobile or PC to authenticate and enters the code displayed
    on the device to acquire the token and refresh the token for the device to connect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we understand what OAuth is, in the next section, let's understand
    what Azure AD is, how to integrate it with our e-commerce application, and how
    to use it as our identity server.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Azure AD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure AD is an **Identity and Access Management** (**IAM**) cloud service offering
    from Microsoft. It is a single identity store for both internal and external users
    so that you can configure applications to use Azure AD for authentication. You
    can synchronize on-premises Windows AD to Azure AD; therefore, you can enable
    a **single sign-on** (**SSO**) experience for your users.
  prefs: []
  type: TYPE_NORMAL
- en: Users can log in using their work or school credentials or personal Microsoft
    accounts such as `Outlook.com`, Xbox, and Skype. It also allows you to natively
    add or delete users, create groups, do a self-service password reset, enable Azure
    MFA, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: With **Azure AD B2C**, you can customize how your users sign up, sign in, and
    manage their profiles. Additionally, it allows your customers to use their existing
    social credentials such as Facebook and Google to sign in and access your applications
    and APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Azure AD is compliant with industry-standard protocols such as **OpenID Connect**,
    also known as **OIDC** and **OAuth 2.0**. OIDC is an identity layer built on top
    of the OAuth 2.0 protocol and is used to authenticate and retrieve a user's profile
    information. OAuth 2.0 is used for authorization to obtain access to an HTTP service
    using different flows such as implicit grant flow, on-behalf-of flow, client credentials
    flow, code flow and device grant flow.
  prefs: []
  type: TYPE_NORMAL
- en: 'A typical authentication flow in web apps goes like this:'
  prefs: []
  type: TYPE_NORMAL
- en: The user tries to access the secure content of an application (say, **My Orders**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user is redirected to the Azure AD sign-in page if they are not authenticated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the user has submitted their credentials, they are validated by Azure AD,
    which sends a token back to the web app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A cookie is saved to the user's browser and displays the user-requested page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On subsequent requests, a cookie is sent to the server that is used to validate
    the user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Azure AD B2C** enables your customer to use their preferred social, enterprise,
    or native identities to access your applications or APIs. It can scale to millions
    of users and billions of authentications per day.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try to integrate our e-commerce application with Azure AD B2C. At a
    high level, we need to perform the following steps to integrate it:'
  prefs: []
  type: TYPE_NORMAL
- en: Create an Azure AD B2C tenant.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Register an application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add identity providers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create user flows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the app code to integrate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As a prerequisite, you should have an active Azure subscription with a contributor
    role. If you don't have one, you can sign up for a free account at [https://azure.microsoft.com/en-in/free/](https://azure.microsoft.com/en-in/free/).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The Azure AD B2C setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using Azure AD B2C as an identity service will allow our e-commerce users to
    sign up, create their own credentials, or use their existing social credentials
    such as Facebook or Google. Let''s look at the steps that we need to perform to
    configure Azure AD B2C as an identity service for our e-commerce application,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the Azure portal, making sure you are in the same directory that contains
    your subscription.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Home** page, click on **Create Resource** and search for **B2C**. Then,
    select **Azure Active Directory B2C** from the list of options.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select **Create a new Azure AD B2C Tenant**, as illustrated in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.8 – Azure AD B2C'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.8_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.8 – Azure AD B2C
  prefs: []
  type: TYPE_NORMAL
- en: 'Provide the required details and click on **Review + create**. Then, complete
    the following fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Organization name**: This is the name of your B2C tenant.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Internal domain name**: This is the internal domain name of your tenant.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Country/Region**: Select the country or region where your tenant should be
    provisioned.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Subscription** and **Resource Group**: Provide subscription and resource
    group details.'
  prefs: []
  type: TYPE_NORMAL
- en: 'These fields are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.9 – The New Azure AD B2C Configuration section'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.9_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.9 – The New Azure AD B2C Configuration section
  prefs: []
  type: TYPE_NORMAL
- en: 'Review your details and click on **Create**. The creation of your new tenant
    might take a few minutes. Once it has been created, you will see a confirmation
    message in the notification section. In the **Notifications** popup, click on
    the tenant name to navigate to the newly created tenant, as illustrated in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.10 – Confirmation of the creation of the Azure AD B2C service'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.10_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.10 – Confirmation of the creation of the Azure AD B2C service
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, note that **Subscription status** is given as
    **No Subscription**. Additionally, a warning message says that you should **link
    a subscription to your tenant**. You can click on the link to fix it, else you
    can skip to *Step 9* to continue to configure Azure AD:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.11 – A warning message showing no subscription has been linked'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.11_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.11 – A warning message showing no subscription has been linked
  prefs: []
  type: TYPE_NORMAL
- en: 'The link will open the same screen that you saw in *Step 3*. This time, click
    on **Link an existing Azure AD B2C Tenant to my Azure subscription** to continue,
    as illustrated in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.12 – Linking an Azure AD B2C tenant to a subscription'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.12_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.12 – Linking an Azure AD B2C tenant to a subscription
  prefs: []
  type: TYPE_NORMAL
- en: 'Select your B2C tenant subscription from the drop-down list, provide a **Resource
    group** value, and click on **Create** to link the subscription and the tenant,
    as illustrated in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.13 – Subscription selection'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.13_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.13 – Subscription selection
  prefs: []
  type: TYPE_NORMAL
- en: 'You can navigate to your B2C tenant by selecting the **Open B2C Tenant** link
    in the overview section of the B2C tenant to continue with the next steps of the
    configuration, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You need to register your application with the Azure AD B2C tenant to use it
    as the identity service.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You need to choose the identity providers that users can use to sign in to your
    application.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Choose user flows to define the experience for your users to sign up or sign
    in, as illustrated in the following screenshot:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 12.14 – Three steps to configure Azure AD B2C'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.14_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.14 – Three steps to configure Azure AD B2C
  prefs: []
  type: TYPE_NORMAL
- en: 'Under **Manage**, click on **App Registrations** and provide the necessary
    details as follows. Then, click on **Register** to create the AD application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Name**: Display the name of your application.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Supported account types**: Choose **Accounts in any identity provider or
    organizational directory** so that we can allow users to use their existing credentials
    to sign up or sign in.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Redirect URI**: You need to provide the URL of your application to which
    the user will be redirected after successful authentication. For now, we can leave
    it blank.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Permissions**: Select **Grant admin consent to openid and offline_access
    permissions**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The fields are illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.15 – Registering a new Azure AD application'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.15_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.15 – Registering a new Azure AD application
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To set up and debug locally, we can configure with `localhost`. This needs to
    be replaced with the URL where your app is hosted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s choose **Identity Providers** under **Manage** to configure, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Local accounts**: This option allows users to register and sign in to our
    application in a traditional way—with a username and password. The following screenshot
    illustrates this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.16 – Selecting an identity provider'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.16_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.16 – Selecting an identity provider
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s configure Google as the identity provider for our application. You can
    follow the steps outlined at [https://docs.microsoft.com/en-in/azure/active-directory-b2c/identity-provider-google](https://docs.microsoft.com/en-in/azure/active-directory-b2c/identity-provider-google)
    to acquire the client ID and secret. The details you need to provide are shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.17 – Google: New OAuth client'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.17_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 12.17 – Google: New OAuth client'
  prefs: []
  type: TYPE_NORMAL
- en: 'After you provide the required details and select save, the client ID and secret
    are generated, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.18 – The Google OAuth client'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.18_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.18 – The Google OAuth client
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have created **Auth Client**, click on **Google** from **identity
    providers**, and then provide the **Client ID** and **Client secret** values to
    complete the configuration. Refer to the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.19 – The identity provider configuration'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.19_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.19 – The identity provider configuration
  prefs: []
  type: TYPE_NORMAL
- en: Let's configure Facebook as another identity provider for our e-commerce application.
    You can follow the steps outlined at [https://docs.microsoft.com/en-in/azure/active-directory-b2c/identity-provider-facebook](https://docs.microsoft.com/en-in/azure/active-directory-b2c/identity-provider-facebook).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have created the **Client Auth** settings, click on **Facebook** from
    **identity providers**, and then provide the **Client Id** and **Client Secret**
    values to complete the configuration. Refer to *Figure 12.19* for an overview
    of this.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let's configure the user flow. The user flow allows you to configure and
    customize the authentication experience for your users. You can configure multiple
    flows in your tenant and use them in your application. User flows allow you to
    add MFA and also customize the information that you capture from a user at the
    time of registration—for example, their given name, country, postal code, and,
    optionally, whether you want to add them to claims. You can also customize the
    UI for a better user experience. To create a flow, click on **User Flows** under
    **Policies** and choose a flow type, as illustrated in the following screenshot:![Figure
    12.20 – A new user flow
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_12.20_B18507.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 12.20 – A new user flow
  prefs: []
  type: TYPE_NORMAL
- en: 'Provide the necessary details, and click on **Create** to save:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Name**: This is the name of your flow to uniquely identify.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Identity providers**: Select your identity providers.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Optionally, you can choose additional user attributes such as **Name**, **Postal
    Code**, and more, as illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.21 – The user flow configuration'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.21_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.21 – The user flow configuration
  prefs: []
  type: TYPE_NORMAL
- en: 'You can choose additional attributes in the **User attributes and token claims**
    section, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.22 – The additional attribute and claim configuration'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.22_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.22 – The additional attribute and claim configuration
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, we should also set up a password reset policy. This is required for
    local accounts. To create one, under **Create User Flow**, choose **Password Reset**
    and provide the necessary details. You can refer to *Figure 12.20*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Having completed the minimum required setup of Azure AD B2C, we are ready to
    test the flow. Select the user flow that was created and click on **Run user flow**.
    You can view the sign-up and sign-in pages that were created for you, which you
    can find in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.23 – The sign-in and sign-up screens'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.23_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.23 – The sign-in and sign-up screens
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at the changes that we need to do in `Packt.Ecommerce.Web` to integrate
    with Azure AD.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating our e-commerce application with Azure AD B2C
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will configure authentication on the web application to use Azure AD B2C.
    Let''s make the necessary changes to our application to integrate with the B2C
    tenant, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following two NuGet packages to our `Packt.Ecommerce.Web` project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Microsoft.Identity.Web`: This is the main package required to integrate with
    Azure AD.'
  prefs: []
  type: TYPE_NORMAL
- en: '`Microsoft.Identity.Web.UI`: This package generates the UI for signing in and
    signing out. In `Program.cs`, we need to add an authentication service using the
    `OpenIdConnect` scheme along with the `Azure AD B2C` configuration, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Under the `Configure` method, add the following code before the `app.UseAuthorization()`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need to add `AzureAdB2C` to `appsettings.json`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Instance`: `https://<domain>.b2clogin.com/tfp`. Replace `<domain>` with the
    name you have chosen while creating the B2C tenant.'
  prefs: []
  type: TYPE_NORMAL
- en: '`ClientId`: This is the AD application ID that you created while setting up
    Azure AD B2C.'
  prefs: []
  type: TYPE_NORMAL
- en: '`Domain`: `<domain>.onmicrosoft.com`. Here, replace `<domain>` with the domain
    name you chose while creating the B2C tenant.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Update `SignUpSignInPolicyId` and `ResetPasswordPolicyId`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: You can add an `[Authorize]` attribute to controllers or action methods—for
    instance, you can add it to `OrdersController` in `OrdersController.cs` to force
    users to authenticate themselves to access the `Orders` information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The last step is to update the reply URI. To do so, navigate to **AD Application**
    in your tenant. Navigate to the **Authentication** section under **Manage**, update
    **Reply URI**, and set implicit grant permissions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The reply URI is the URL of your application to which users will be redirected
    after successful authentication. To set up an application and debug them locally,
    we can configure the localhost URL, but once you deploy the application to a server,
    you will need to update the URL of the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Under **Implicit grant**, select **Access tokens** and **ID tokens**, which
    are required for our ASP.NET Core application, as illustrated in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.24 – The reply URL configuration'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.24_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.24 – The reply URL configuration
  prefs: []
  type: TYPE_NORMAL
- en: Now, run your application and try accessing the **Orders** page. You will be
    redirected to the sign-in and sign-up pages, as shown in *Figure 12.23*. This
    concludes the integration of our e-commerce application with Azure AD B2C.
  prefs: []
  type: TYPE_NORMAL
- en: Azure AD offers many more options and customizations to suit your needs. For
    more details, you can look at [https://docs.microsoft.com/en-in/azure/active-directory-b2c](https://docs.microsoft.com/en-in/azure/active-directory-b2c).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You can use Duende Identity Server to set up your own identity server. This
    uses OpenID Connect and the OAuth 2.0 framework to establish identity. It is available
    via NuGet and can be easily integrated with ASP.NET Core applications. For more
    details, you can refer to [https://docs.duendesoftware.com/identityserver/v6](https://docs.duendesoftware.com/identityserver/v6).
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, let's see how to use Windows Authentication.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Windows Authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ASP.NET Core applications can be configured to use Windows Authentication, whereby
    users are authenticated against their Windows credentials. Windows Authentication
    is the best choice when your application is hosted on a Windows server and your
    application is only available on the intranet. In this section, we will learn
    how to use Windows Authentication in an ASP.NET Core application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Visual Studio, choose `--auth Windows` parameters to create a new web app
    using Windows Authentication, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'If you open `launchSettings.json`, you will notice that `WindowsAuthentication`
    is set to `true` and `anonymousAuthentication` is set to `false`, as illustrated
    in the following code snippet. This setting is only applicable when running an
    application in **Internet Information Services Express** (**IIS Express**):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'When you host an application on IIS, you need to configure `WindowsAuthentication`
    to `true` in `web.config`. By default, `web.config` is not added to the .NET Core
    web application, so you need to add it and make the necessary changes, as depicted
    in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding configuration makes every endpoint secure. There will be no impact,
    even if we set `AllowAnonymous` on every controller or action. If you want to
    make any endpoint anonymously accessible, you need to set `anonymousAuthentication`
    to `true` and set `Authorize` on the endpoints that you want to make secure. In
    addition to that, you need to register the authentication service with the scheme
    as `Windows`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: This is all you need to do to enable Windows Authentication in your application.
    For more details, you can refer to [https://docs.microsoft.com/en-us/aspnet/core/security/authentication/windowsauth?view=aspnetcore-6.0](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/windowsauth?view=aspnetcore-6.0).
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at a few best practices to be followed to
    secure client and server applications.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding best practices to secure client and server applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are several best practices that are recommended to secure your web application.
    The .NET Core and Azure services make it easy to ensure their adoption. The following
    are key ones you could consider:'
  prefs: []
  type: TYPE_NORMAL
- en: Enforce HTTPS for web applications. Use `UseHttpsRedirection` middleware to
    redirect requests from HTTP to HTTPS.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use modern authentication frameworks based on OAuth 2.0 and OIDC to secure your
    web or API app.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are using the Microsoft identity platform, use open source libraries
    such as MSAL.js and MSAL.NET to acquire or renew tokens.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure strong password requirements and lock your account in the case of
    continuous failed login attempts—for example, five consecutive failed attempts.
    This can prevent a brute-force attack.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enable MFA for privileged accounts such as back-office admin, back-office staff
    accounts, and more.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure session timeouts, invalidate your session on logout, and clear cookies.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enforce authorization on all secured endpoints and on the client side.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Store keys/passwords in a secured location such as key vaults.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are using Azure AD, register each logical/environment-specific application
    separately.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do not store sensitive information in plain text.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure proper exception handling.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perform a security/malware scan on files that are uploaded.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prevent cross-site scripting attacks—always HTML-encode user input data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prevent SQL injection attacks by parameterizing SQL queries and using stored
    procedures.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prevent cross-site request forgery attacks—use a `ValidateAntiForgeryToken`
    filter on an action, a controller, or globally.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enforce **Cross-Origin Requests** (**CORS**) in middleware using this policy.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While the provided best practices and guidance are good to start with, you need
    to always consider an application's context and continuously assess and enhance
    your application to address security vulnerabilities and threats.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we understood what authentication is and the key elements of
    authentication in ASP.NET Core. We explored the different options offered by the
    ASP.NET Core framework and learned how ASP.NET Core Identity helps to quickly
    add authentication to your application. We discussed OAuth 2.0 and grant flows
    and understood how they make things easier when you need to authenticate and connect
    to multiple API services.
  prefs: []
  type: TYPE_NORMAL
- en: Also, we looked at configuring Azure AD as your identity service, using external
    authentication providers such as Google or Facebook in your application, and using
    Windows Authentication in an ASP.NET Core application. We concluded this chapter
    by discussing a few best practices to follow while developing server-side and
    client-side applications.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see what authorization is and how it helps to control
    access to your resources.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What information can be derived from a JWT?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. Issuer
  prefs: []
  type: TYPE_NORMAL
- en: b. Expiry
  prefs: []
  type: TYPE_NORMAL
- en: c. Scopes
  prefs: []
  type: TYPE_NORMAL
- en: d. Subject
  prefs: []
  type: TYPE_NORMAL
- en: e. All of the above
  prefs: []
  type: TYPE_NORMAL
- en: '**Answer: e**'
  prefs: []
  type: TYPE_NORMAL
- en: What are the recommended OAuth grant flows for single-page apps?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. Client credentials flow
  prefs: []
  type: TYPE_NORMAL
- en: b. Implicit flow
  prefs: []
  type: TYPE_NORMAL
- en: c. Code grant flow
  prefs: []
  type: TYPE_NORMAL
- en: d. On-behalf-of flow
  prefs: []
  type: TYPE_NORMAL
- en: '**Answer: b and c**'
  prefs: []
  type: TYPE_NORMAL
- en: What are the minimum required NuGet packages to integrate with Azure AD?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. `Microsoft.AspNetCore.Identity`
  prefs: []
  type: TYPE_NORMAL
- en: b. `Microsoft.Identity.Web.UI`
  prefs: []
  type: TYPE_NORMAL
- en: c. `Microsoft.AspNetCore.Identity.UI`
  prefs: []
  type: TYPE_NORMAL
- en: d. `Microsoft.Identity.Web`
  prefs: []
  type: TYPE_NORMAL
- en: '**Answer: d**'
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To learn more about authentication, you can refer to the following resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.microsoft.com/en-us/aspnet/core/security/authentication/?view=aspnetcore-6.0](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/?view=aspnetcore-6.0)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.microsoft.com/en-in/azure/active-directory-b2c](https://docs.microsoft.com/en-in/azure/active-directory-b2c)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
