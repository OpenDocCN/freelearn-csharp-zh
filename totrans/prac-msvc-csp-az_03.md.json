["```cs\nwinget install Microsoft.SQLServer.2022.Developer\n```", "```cs\nwinget install Microsoft.Azure.CosmosEmulator\n```", "```cs\nwinget install Microsoft.SQLServerManagementStudio\n```", "```cs\npublic class Game(\n  Guid id,\n  string gameType,\n  string playerName,\n  DateTime startTime,\n  int numberCodes,\n  int maxMoves)\n{\n  public Guid Id { get; private set; } = id;\n  public string GameType { get; private set; } = gameType;\n  public string PlayerName { get; private set; } = playerName;\n  public DateTime StartTime { get; private set; } = startTime;\n  // code removed for brevity\npublic required IDictionary<string, IEnumerable<string>> FieldValues \n    { get; init; }\n  public required string[] Codes { get; init; }\n  public ICollection<Move> Moves { get; } = new List<Move>();\n  public override string ToString() => $\"{Id}:{GameType} - \n{StartTime}\";\n}\n```", "```cs\npublic class Move(Guid id, int moveNumber)\n{\n  public Guid Id { get; private set; } = id;\n  public int MoveNumber { get; private set; } = moveNumber;\n  public required string[] GuessPegs { get; init; }\n  public required string[] KeyPegs { get; init; }\n  public override string ToString() => $\"{MoveNumber}. \" +\n    $\"{string.Join('#',GuessPegs)} : \" +\n    $\"{string.Join('#', KeyPegs)}\";\n}\n```", "```cs\ndotnet new classlib --framework net8.0 -o Codebreaker.Data.SqlServer\n```", "```cs\npublic class GamesSqlServerContext(DbContextOptions<GamesSqlServerContext> options) : DbContext(options), IGamesRepository\n{\n  protected override void OnModelCreating(ModelBuilder modelBuilder)\n  {\n    modelBuilder.HasDefaultSchema(\"codebreaker\");\n    modelBuilder.ApplyConfiguration(new GameConfiguration());\n    modelBuilder.ApplyConfiguration(new MoveConfiguration());\n    // code removed for brevity\n  }\n  public DbSet<Game> Games => Set<Game>();\n  public DbSet<Move> Moves => Set<Move>();\n  // code removed for brevity\n}\n```", "```cs\ninternal class GameConfiguration : IEntityTypeConfiguration<Game>\n{\n  public void Configure(EntityTypeBuilder<Game> builder)\n  {\n    builder.HasKey(g => g.Id);\n    builder.Property(g => g.GameType).HasMaxLength(20);\n    builder.Property(g => g.PlayerName).HasMaxLength(60);\n    builder.Property(g => g.Codes).HasMaxLength(120);\n    // code removed for brevity\n```", "```cs\ninternal class MoveConfiguration : IentityTypeConfiguration<Move>\n{\n  public void Configure(EntityTypeBuilder<Move> builder)\n  {\n    // code removed for brevity\n    builder.Property(g => g.GuessPegs).HasMaxLength(120);\n    builder.Property(g => g.KeyPegs).HasMaxLength(60);\n  }\n}\n```", "```cs\nDictionary<string, IEnumerable<string>> input = new ()\n{\n  { \"colors\", [\"Red\", \"Green\", \"Blue\"] },\n  { \"shapes\", [\"Rectangle\", \"Circle\"] }\n};\n```", "```cs\nvar expected = \"colors:Red#colors:Green#colors:Blue#shapes:Rectangle#shapes:Circle\";\n```", "```cs\npublic static class MappingExtensions\n{\n  public static string ToFieldsString(this IDictionary<string, \nIEnumerable<string>> fields)\n  {\n    return string.Join('#',\n      fields.SelectMany(\n        key => key.Value\n          .Select(value => $\"{key.Key}:{value}\")));\n  }\n  // code removed for brevity\n}\n```", "```cs\npublic static IDictionary<string, IEnumerable<string>> \nFromFieldsString(this string fieldsString)\n{\n  Dictionary<string, List<string>> fields = new();\n  foreach (var pair in fieldsString.Split('#'))\n  {\n    var index = pair.IndexOf(':');\n    if (index < 0)\n    {\n      throw new ArgumentException($\"Field {pair} does not contain ':' \n      delimiter.\");\n    }\n    var key = pair[..index];\n    var value = pair[(index + 1)..];\n    if (!fields.TryGetValue(key, out List<string>? List))\n    {\n      list = [];\n      fields[key] = list;\n    }\n    list.Add(value);\n  }\n  return fields.ToDictionary(\n    pair => pair.Key,\n    pair => (IEnumerable<string>)pair.Value);\n}\n```", "```cs\npublic void Configure(EntityTypeBuilder<Game> builder)\n{\n  // code removed for brevity\n  builder.Property(g => g.FieldValues)\n    .HasColumnName(\"Fields\")\n    .HasColumnType(\"nvarchar\")\n    .HasMaxLength(200)\n    .HasConversion(\n      convertToProviderExpression: fields => fields.ToFieldsString(),\n      convertFromProviderExpression: fields => fields.\n        FromFieldsString(),\nvalueComparer: new ValueComparer<IDictionary<string, \n        Ienumerable<string>>>(\n        equalsExpression: (a, b) => a!.SequenceEqual(b!),\nhashCodeExpression: a => a.Aggregate(0, (result, next) => \n          HashCode.Combine(result, next.GetHashCode())),\nsnapshotExpression: a => a.ToDictionary(kv => kv.Key, kv => \n        kv.Value)));\n}\n```", "```cs\ninternal class MoveConfiguration : IEntityTypeConfiguration<Move>\n{\n  public void Configure(EntityTypeBuilder<Move> builder)\n  {\n    builder.Property<Guid>(\"GameId\");\n    builder.Property(g => g.GuessPegs).HasMaxLength(120);\n    builder.Property(g => g.KeyPegs).HasMaxLength(60);\n  }\n}\n```", "```cs\npublic void Configure(EntityTypeBuilder<Game> builder)\n{\n  builder.HasKey(g => g.Id);\n  builder.HasMany(g => g.Moves)\n    .WithOne()\n    .HasForeignKey(\"GameId\");\n  // code removed for brevity\n}\n```", "```cs\npublic async Task AddGameAsync(Game game, CancellationToken cancellationToken = default)\n{\n  Games.Add(game);\nawait SaveChangesAsync(cancellationToken);\n}\npublic async Task<bool> DeleteGameAsync(Guid id, CancellationToken \ncancellationToken = default)\n{\n  var affected = await Games\n    .Where(g => g.Id == id)\n    .ExecuteDeleteAsync(cancellationToken);\n    return affected == 1;\n}\n```", "```cs\nINSERT INTO [codebreaker].[Games] ([Id], [Codes], [Duration], [EndTime], [Fields], [GameType], [LastMoveNumber], [MaxMoves], [NumberCodes], [PlayerName], [StartTime], [Won])\n      VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11);\n```", "```cs\npublic async Task AddMoveAsync(Game game, Move move, CancellationToken cancellationToken = default)\n{\n  Moves.Add(move);\n  Games.Update(game);\n  await SaveChangesAsync(cancellationToken);\n}\n```", "```cs\npublic async Task<Game?> GetGameAsync(Guid id, CancellationToken cancellationToken = default)\n{\n  var game = await Games\n    .Include(\"Moves\")\n    .TagWith(nameof(GetGameAsync))\n    .SingleOrDefaultAsync(g => g.Id == id, cancellationToken);\n  return game;\n}\n```", "```cs\n-- GetGameAsync\nSELECT [t].[ Id], [t].[Codes], [t].[Duration], [t].[EndTime], [t].[Fields], [t].[GameType], [t].[LastMoveNumber], [t].[MaxMoves], [t].[NumberCodes], [t].[PlayerName], [t].[StartTime], [t].[Won], [m].[Id], [m].[GameId], [m].[GuessPegs], [m].[KeyPegs], [m].[MoveNumber]\nFROM (\n  SELECT TOP(2) [g].[Id], [g].[Codes], [g].[Duration], [g].[EndTime], [g].[Fields], [g].[GameType], [g].[LastMoveNumber], [g].[MaxMoves], [g].[NumberCodes], [g].[PlayerName], [g].[StartTime], [g].[Won]\n  FROM [codebreaker].[Games] AS [g]\n  WHERE [g].[Id] = @__Id_0\n) AS [t]\nLEFT JOIN [codebreaker].[Moves] AS [m] ON [t].[Id] = [m].[GameId]\nORDER BY [t].[Id]\n```", "```cs\npublic async Task<IEnumerable<Game>> GetGamesAsync(GamesQuery? gamesQuery, CancellationToken cancellationToken = default)\n{\n  IQueryable<Game> query = Games\n    .TagWith(nameof(GetGamesAsync))\n    .Include(g => g.Moves);\n  if (gamesQuery.Date.HasValue)\n  {\n    DateTime begin = gamesQuery.Date.Value.ToDateTime(TimeOnly.\n        MinValue);\n    DateTime end = begin.AddDays(1);\nquery = query.Where(g => g.StartTime < end && g.StartTime > \n      begin);\n  }\n  if (gamesQuery.PlayerName != null)\n    query = query.Where(g => g.PlayerName == gamesQuery.PlayerName);\n  if (gamesQuery.GameType != null)\n    query = query.Where(g => g.GameType == gamesQuery.GameType);\n  if (gamesQuery.Ended)\n  {\n    query = query.Where(g => g.EndTime != null)\n      .OrderBy(g => g.Duration);\n  }\n  else\n  {\n    query = query.OrderByDescending(g => g.StartTime);\n  }\n  query = query.Take(MaxGamesReturned);\n  return await query.ToListAsync(cancellationToken);\n}\n```", "```cs\nSELECT [t].[Id], [t].[Codes], [t].[Duration], [t].[EndTime], [t].[Fields], [t].[GameType], [t].[IsVictory], [t].[LastMoveNumber], [t].[MaxMoves], [t].[NumberCodes], [t].[PlayerIsAuthenticated], [t].[PlayerName], [t].[StartTime], [m].[Id], [m].[GameId], [m].[GuessPegs], [m].[KeyPegs], [m].[MoveNumber]\nFROM (\n  SELECT TOP(@__p_3) [g].[Id], [g].[Codes], [g].[Duration], [g].[EndTime], [g].[Fields], [g].[GameType], [g].[IsVictory], [g].[LastMoveNumber], [g].[MaxMoves], [g].[NumberCodes], [g].[PlayerIsAuthenticated], [g].[PlayerName], [g].[StartTime]\n  FROM [codebreaker].[Games] AS [g]\n  WHERE [g].[StartTime] < @__end_0 AND [g].[StartTime] > @__begin_1 AND [g].[GameType] = @__gamesQuery_GameType_2\n  ORDER BY [g].[StartTime] DESC\n) AS [t]\nLEFT JOIN [codebreaker].[Moves] AS [m] ON [t].[Id] = [m].[GameId]\nORDER BY [t].[StartTime] DESC, [t].[Id]\n```", "```cs\ncd Codebreaker.AppHost\ndotnet user-secrets init\n```", "```cs\ndotnet user-secrets set Parameters:sql-password [enter the password]\n```", "```cs\nvar builder = DistributedApplication.CreateBuilder(args);\nvar sqlServer = builder.AddSqlServer(\"sql\", sqlPassword)\n  .AddDatabase(\"CodebreakerSql\", \"codebreaker\");\n```", "```cs\n{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft.AspNetCore\": \"Warning\",\n      \"Aspire.Hosting.Dcp\": \"Warning\"\n    }\n  },\n  \"DataStore\": \"SqlServer\"\n}\n```", "```cs\nstring dataStore = builder.Configuration[\"DataStore\"] ??\n  \"InMemory\";\n```", "```cs\nbuilder.AddProject<Projects.Codebreaker_GameAPIs>(\"gameapis\")\n  .WithEnvironment(\"DataStore\", dataStore)\n  .WithReference(sqlServer);\n// code removed for brevity\n```", "```cs\npublic static void AddApplicationServices(this IHostApplicationBuilder builder)\n{\n  // code removed for brevity\n  string? dataStore = builder.Configuration.\n    GetValue<string>(\"DataStore\");\n  switch (dataStore)\n  {\n    case \"SqlServer\":\n      ConfigureSqlServer(builder);\n      break;\n    default:\n      ConfigureInMemory(builder);\n      break;\n  }\n  builder.Services.AddScoped<IGamesService, GamesService>();\n}\n```", "```cs\nstatic void ConfigureSqlServer(IHostApplicationBuilder builder)\n{\n  builder.AddDbContextObjectPool<IGamesRepository, GamesSqlServerContext>(options =>\n  {\n    var connectionString = builder.Configuration.\n    GetConnectionString(\"CodebreakerSql\") ?? throw new \nInvalidOperationException(\"Could not read SQL Server connection \nstring\");\n    options.UseSqlServer(connectionString);\n    options.UseQueryTrackingBehavior(\n    QueryTrackingBehavior.NoTracking);\n  }\n  builder.EnrichSqlServerDbContext<GamesSqlServerContext>();\n}\n```", "```cs\ncd Codebreaker.Data.SqlServer\ndotnet new tool-manifest\n```", "```cs\ndotnet tool install dotnet-ef\n```", "```cs\ndotnet tool restore\n```", "```cs\ndotnet ef migrations add InitGames -s ..\\Codebreaker.GameAPIs\n```", "```cs\ndotnet ef database update -s ..\\Codebreaker.GameAPIs.\n```", "```cs\npublic static async Task CreateOrUpdateDatabaseAsync(this WebApplication app)\n{\n  var dataStore = app.Configuration[\"DataStore\"] ?? \"InMemory\";\n  if (dataStore == \"SqlServer\")\n  {\n    try\n    {\n      using var scope = app.Services.CreateScope();\n      var repo = scope.ServiceProvider.GetRequiredService<IGamesRepository>();\n      if (repo is GamesSqlServerContext context)\n      {\n        await context.Database.MigrateAsync();\n        app.Logger.LogInformation(\"SQL Server database updated\");\n      }\n    }\n    catch (Exception ex)\n    {\n      app.Logger.LogError(ex, \"Error updating database\");\n      throw;\n    }\n  }\n}\n```", "```cs\npublic class Game(\n  Guid id,\n  string gameType,\n  string playerName,\n  DateTime startTime,\n  int numberCodes,\n  int maxMoves) : IGame\n{\n  public Guid Id { get; private set; } = id;\n  public string GameType { get; private set; } = gameType;\n  public string PlayerName { get; private set; } = playerName;\n  public bool PlayerIsAuthenticated { get; set; } = false;\n  // code removed for brevity\n```", "```cs\ncd Codebreaker.Data.SqlServer\ndotnet ef migrations add AddPlayerIsAuthenticated -s ..\\Codebreaker.GameAPIs\n```", "```cs\npublic partial class AddPlayerIsAuthenticated : Migration\n{\nprotected override void Up(MigrationBuilder migrationBuilder)\n  {\n    migrationBuilder.AddColumn<bool>(\n      name: \"PlayerIsAuthenticated\",\n      schema: \"codebreaker\",\n      table: \"Games\",\n      type: \"bit\",\n      nullable: false,\n      defaultValue: false);\n    }\n  protected override void Down(MigrationBuilder migrationBuilder)\n  {\n    migrationBuilder.DropColumn(\n      name: \"PlayerIsAuthenticated\",\n      schema: \"codebreaker\",\n      table: \"Games\");\n  }\n}\n```", "```cs\ndotnet new classlib --framework net8.0 -o Codebreaker.Data.Cosmos\n```", "```cs\npublic class GamesCosmosContext(DbContextOptions<GamesCosmosContext> optoins) : DbContext(options), IGamesRepository\n{\n  private const string PartitionKey = nameof(PartitionKey);\n  private const string ContainerName = \"GamesV3\";\n  private const string DiscriminatorValue = \"GameV3\";\n  protected override void OnModelCreating(ModelBuilder modelBuilder)\n  {\n    modelBuilder.HasDefaultContainer(ContainerName);\n    var gameModel = modelBuilder.Entity<Game>();\n    gameModel.Property<string>(PartitionKey);\n    gameModel.HasPartitionKey(PartitionKey);\n    gameModel.HasKey(nameof(Game.Id), PartitionKey);\n    gameModel.HasDiscriminator<string>(\"Discriminator\")\n      .HasValue<Game>(DiscriminatorValue);\n    // code removed for brevity\n  }\n  public DbSet<Game> Games => Set<Game>();\npublic static string ComputePartitionKey(Game game) => \n    game.GameId.ToString();\n  public void SetPartitionKey(Game game) =>\n    Entry(game).Property(PartitionKey).CurrentValue =\n      ComputePartitionKey(game);\n  // code removed for brevity\n```", "```cs\ninternal class FieldValueValueConverter : ValueConverter<IDictionary<string, IEnumerable<string>>, string>\n{\n  static string GetJson(IDictionary<string, IEnumerable<string>> \nvalues) => return JsonSerializer.Serialize(values);\n  static IDictionary<string, IEnumerable<string>> GetDictionary(string \njson) => JsonSerializer.Deserialize<IDictionary<string, \nIEnumerable<string>>>(json) ??\n      new Dictionary<string, IEnumerable<string>>();\n  public FieldValueValueConverter() : base(\n    convertToProviderExpression: v => GetJson(v),\n    convertFromProviderExpression: v => GetDictionary(v))\n  { }\n}\n```", "```cs\npublic class GamesCosmosContext(DbContextOptions<GamesCosmosContext> options) : DbContext(options), IGamesRepository\n{\n  private static FieldValueValueConverter s_fieldValueConverter = new();\n  private static FieldValueComparer s_fieldValueComparer = new();\n  protected override void OnModelCreating(ModelBuilder modelBuilder)\n  {\n    // code removed for brevity\n    gameModel.Property(g => g.FieldValues)\n.HasConversion(s_fieldValueConverter, s_fieldValueComparer);\n  }\n```", "```cs\npublic async Task AddGameAsync(Game game, CancellationToken cancellationToken = default)\n{\n  SetPartitionKey(game);\n  Games.Add(game);\n  await SaveChangesAsync(cancellationToken);\n}\n```", "```cs\nSELECT c\nFROM root c\nWHERE (((c[\"Discriminator\"] = \"Game\") AND ((c[\"StartTime\"] < @__end_0) AND (c[\"StartTime\"] > @__begin_1))) AND (c[\"GameType\"] = @__gamesQuery_GameType_2))\nORDER BY c[\"StartTime\"] DESC\nOFFSET 0 LIMIT @__p_3\n```", "```cs\nvar cosmos = builder.AddAzureCosmosDB(\"codebreakercosmos\")\n  .AddDatabase(\"codebreaker\");\n  .RunAsEmulator();\n  builder.AddProject<Projects.Codebreaker_GameAPIs>(\"gameapis\")\n  .WithEnvironment(\"DataStore\", dataStore)\n  .WithReference(cosmos)\n  .WithReference(sqlServer);\n```", "```cs\nstatic void ConfigureCosmos(IHostApplicationBuilder builder)\n{\n  builder.AddDbContext<IGamesRepository, GamesCosmosContext>(options =>\n  {\n    var connectionString = builder.Configuration.\n      GetConnectionString(\"codebreakercosmos\") ??\n      throw new InvalidOperationException(\"Could not read Cosmos \n      connection string\");\n    options.UseCosmos(connectionString, \"codebreaker\");\n    options.UseQueryTrackingBehavior(\n    QueryTrackingBehavior.NoTracking);\n  });\n  builder.EnrichCosmosDbContext<GamesCosmosContext>();\n}\n```", "```cs\npublic static async Task CreateOrUpdateDatabaseAsync(this WebApplication app)\n{\n  // code removed for brevity\n  else if (dataStore == \"Cosmos\")\n  {\n    try\n    {\n      using var scope = app.Services.CreateScope();\n      var repo = scope.ServiceProvider.\n        GetRequiredService<IGamesRepository>();\n      if (repo is GamesCosmosContext context)\n      {\n        bool created = await context.Database.EnsureCreatedAsync();\n        app.Logger.LogInformation(\"Cosmos database created: \n          {created}\", created);\n      }\n    }\n    catch (Exception ex)\n    {\n        app.Logger.LogError(ex, \"Error updating database\");\n      throw;\n    }\n  }\n}\n```"]