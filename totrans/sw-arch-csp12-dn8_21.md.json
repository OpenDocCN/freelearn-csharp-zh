["```cs\n    builder.Entity<Destination>()\n        .OwnsMany(m =>m.Packages); \n    ```", "```cs\n    using Microsoft.EntityFrameworkCore;\n    using Microsoft.EntityFrameworkCore.Design;\n    namespace WWTravelClubDB\n    {\n        public class LibraryDesignTimeDbContextFactory\n            : IDesignTimeDbContextFactory<MainDBContext>\n        {\n            private const string endpoint = \"<your account endpoint>\";\n            private const string key = \"<your account key>\";\n            private const string databaseName = \"packagesdb\";\n            public MainDBContext CreateDbContext(params string[] args)\n            {\n                var builder = new DbContextOptionsBuilder<MainDBContext>();\n                builder.UseCosmos(endpoint, key, databaseName);\n                return new MainDBContext(builder.Options);\n            }\n        }\n    } \n    ```", "```cs\n    var context = new LibraryDesignTimeDbContextFactory()\n        .CreateDbContext();\n    context.Database.EnsureCreated();\n    var firstDestination = new Destination\n    {\n        Id = Guid.NewGuid().ToString(),\n        Name = \"Florence\",\n        Country = \"Italy\",\n        Packages = new List<Package>()\n        {\n        new Package\n        {\n            Id=Guid.NewGuid().ToString(),\n            Name = \"Summer in Florence\",\n            StartValidityDate = new DateTime(2019, 6, 1),\n            EndValidityDate = new DateTime(2019, 10, 1),\n            DurationInDays=7,\n            Price=1000\n        },\n        new Package\n        {\n            Id=Guid.NewGuid().ToString(),\n            Name = \"Winter in Florence\",\n            StartValidityDate = new DateTime(2019, 12, 1),\n            EndValidityDate = new DateTime(2020, 2, 1),\n            DurationInDays=7,\n            Price=500\n        }\n      }\n    }; \n    ```", "```cs\n    var list = context.Destinations\n        .AsEnumerable() // move computation on the client side\n        .SelectMany(m =>m.Packages)\n        .Where(m => period >= m.StartValidityDate....)\n        ... \n    ```", "```cs\npublic interface IMessageQueue\n{\n    public Task<IList<QueueItem>> Top(int n);\n    public Task Dequeue(IEnumerable<QueueItem> items);\n    public Task Enqueue(QueueItem item);\n} \n```", "```cs\npublic interface IDayStatistics\n{\n    Task<decimal> DayTotal(DateTimeOffset day);\n    Task<QueueItem?> Add(QueueItem model);\n} \n```", "```cs\npublic static class StorageExtensions\n{\n    public static IServiceCollection AddStorage(this IServiceCollection services,\n string connectionString)\n    {\n        services.AddDbContext<IUnitOfWork,MainDbContext>(options =>\n            options.UseSqlServer(connectionString, b =>\nb.MigrationsAssembly(\"GrpcMicroServiceStore\")));\n        services.AddScoped<IMessageQueue, MessageQueue>();\n        services.AddScoped<IDayStatistics, DayStatistics>();\n        return services;\n    }\n} \n```", "```cs\nsyntax = \"proto3\";\noption csharp_namespace = \"GrpcMicroService\";\nimport \"google/protobuf/timestamp.proto\";\npackage counting;\nservice Counter {\n  // Accepts a counting request\nrpc Count (CountingRequest) returns (CountingReply);\n}\nmessage CountingRequest {\n  string id = 1;\n  google.protobuf.Timestamp time = 2;\n  string location = 3;\n  sint32 cost =4;\n  google.protobuf.Timestamp purchaseTime = 5;\n}.\nmessage CountingReply {} \n```", "```cs\nbool processed = await ctx.Purchases.AnyAsync(m => m.Id == model.MessageId);\nif (processed) return model; \n```", "```cs\n<Protobuf Include=\"Protos\\counting.proto\" GrpcServices=\"Server\" /> \n```", "```cs\nusing Grpc.Core;\nusing GrpcMicroServiceStore;\nnamespace GrpcMicroService.Services;\npublic class CounterService: Counter.CounterBase\n{\n    private readonly IMessageQueue queue;\n    public CounterService(IMessageQueue queue)\n    {\n\t If (queue == null) throw new \t\t\t\t\tArgumentNullException(nameof(queue));\n        this.queue = queue;\n    }\n    public override async  Task<CountingReply> Count(CountingRequest request,\n        ServerCallContext context)\n    {\n            await queue.Enqueue(new GrpcMicroServiceStore.Models.QueueItem\n            {\n                Cost = request.Cost,\n                MessageId = Guid.Parse(request.Id),\n                Location = request.Location,\n                PurchaseTime = request.PurchaseTime.ToDateTimeOffset(),\n                Time = request.Time.ToDateTimeOffset()\n            });\n            return new CountingReply {  }; \n    }\n} \n```", "```cs\n    \"ConnectionStrings\": {\n    \"DefaultConnection\": \"Server=(localdb)\\\\mssqllocaldb;Database=grpcmicroservice;Trusted_Connection=True;MultipleActiveResultSets=true\"\n    } \n    ```", "```cs\n    builder.Services.AddStorage(\n    builder.Configuration.GetConnectionString(\"DefaultConnection\")); \n    ```", "```cs\n    app.MapGrpcService<CounterService>(); \n    ```", "```cs\nbuilder.Services.AddHostedService<MyHostedService>(); \n```", "```cs\nusing GrpcMicroServiceStore;\nusing GrpcMicroServiceStore.Models;\nnamespace GrpcMicroService.HostedServices;\npublic class ProcessPurchases : BackgroundService\n{\n    IServiceProvider services;\n    public ProcessPurchases(IServiceProvider services)\n    {\n        this.services = services;\n    }\n    protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n    {\n        bool queueEmpty = false;\n        while (!stoppingToken.IsCancellationRequested)\n        {\n           while (!queueEmpty && !stoppingToken.IsCancellationRequested)\n           {\n             ...\n           }\n            await Task.Delay(100, stoppingToken);\n            queueEmpty = false;\n        }\n    }\n} \n```", "```cs\nusing (var scope = services.CreateScope())\n{\n    IMessageQueue queue = scope.ServiceProvider.GetRequiredService<IMessageQueue>();\n\n    var toProcess = await queue.Top(10);\n    if (toProcess.Count > 0)\n    {\n        Task<QueueItem?>[] tasks = new Task<QueueItem?>[toProcess.Count];\n        for (int i = 0; i < tasks.Length; i++)\n        {\n            var toExecute = ...\n            tasks[i] = toExecute();\n        }\n        await Task.WhenAll(tasks);\n        await queue.Dequeue(tasks.Select(m => m.Result)\n           .Where(m => m != null).OfType<QueueItem>());\n    }\n    else queueEmpty = true;\n} \n```", "```cs\nvar toExecute = async () =>\n{\n    using (var sc = services.CreateScope())\n    {\n        IDayStatistics statistics = sc.ServiceProvider.GetRequiredService<IDayStatistics>();\n        return await statistics.Add(toProcess[i]);\n    }\n}; \n```", "```cs\n<ItemGroup>\n<Protobuf Include=\"..\\GrpcMicroService\\Protos\\counting.proto\" GrpcServices=\"Client\">\n<Link>Protos\\counting.proto</Link>\n</Protobuf>\n</ItemGroup> \n```", "```cs\nusing Grpc.Net.Client;\nusing GrpcMicroService;\nusing Google.Protobuf.WellKnownTypes;\nnamespace FakeSource;\npublic class Worker : BackgroundService\n{\n    private readonly string[] locations = new string[]\n           { \"Florence\", \"London\", \"New York\", \"Paris\" };\n    protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n    {\n        Random random = new Random();\n        while (!stoppingToken.IsCancellationRequested)\n        {\n          try\n          {\n             ...\n             await Task.Delay(2000, stoppingToken);\n          }\n          catch (OperationCanceledException)\n          {\n             return;\n          }\n          catch { }\n        }\n    }\n} \n```", "```cs\nvar purchaseDay = new DateTimeOffset(DateTime.UtcNow.Date, TimeSpan.Zero);\n//randomize a little bit purchase day\npurchaseDay = purchaseDay.AddDays(random.Next(0, 3) - 1); \n//message time\nvar now = DateTimeOffset.UtcNow;\n//add random location\nvar location = locations[random.Next(0, locations.Length)];\nvar messageId = Guid.NewGuid().ToString();\n//add random cost\nint cost = 200 * random.Next(1, 4);\n//send message\nusing var channel = GrpcChannel.ForAddress(\"http://localhost:5000\");\nvar client = new Counter.CounterClient(channel);\n//since this is a fake random source\n//in case of errors we simply do nothing.\n//An actual client should use Polly\n//to define retry policies\ntry\n{\n    await client.CountAsync(new CountingRequest\n    {\n        Id = messageId,\n        Location = location,\n        PurchaseTime = Timestamp.FromDateTimeOffset(purchaseDay),\n        Time = Timestamp.FromDateTimeOffset(now),\n        Cost = cost\n    });\n\n}\ncatch {} \n```", "```cs\nusing GrpcMicroService.HostedServices;\nusing GrpcMicroServiceStore;\nIHost host = Host.CreateDefaultBuilder(args)\n    .ConfigureServices((hostContext, services) =>\n    {\n        services.AddStorage(hostContext.Configuration\n            .GetConnectionString(\"DefaultConnection\"));\n        services.AddHostedService<ProcessPurchases>();\n    })\n    .Build();\nawait host.RunAsync(); \n```", "```cs\nsyntax = \"proto3\";\noption csharp_namespace = \"GrpcMicroService\";\nimport \"google/protobuf/timestamp.proto\";\npackage purchase;\nmessage PurchaseMessage {\n  string id = 1;\n  google.protobuf.Timestamp time = 2;\n  string location = 3;\n  int32 cost =4;\n  google.protobuf.Timestamp purchaseTime = 5;\n} \n```", "```cs\n<ItemGroup>\n<Protobuf Include=\"Protos\\messages.proto\" GrpcServices=\"Client\" />\n</ItemGroup> \n```", "```cs\nprotected override async Task ExecuteAsync(CancellationToken stoppingToken)\n{\n    Random random = new Random();\n    var factory = new ConnectionFactory{ HostName = \"localhost\" };\n    IConnection? connection =null;\n    IModel? channel = null;\n    try\n    {\n        while (!stoppingToken.IsCancellationRequested)\n        {\n        ...      \n        }\n    }\n    finally\n    {\n        if (connection != null)\n        {\n            channel.Dispose();\n            connection.Dispose();\n            channel = null;\n            connection = null;\n        }\n    }\n} \n```", "```cs\nvar purchaseDay = DateTime.UtcNow.Date;\n//randomize a little bit purchase day\npurchaseDay = purchaseDay.AddDays(random.Next(0, 3) – 1);\nvar purchase = new PurchaseMessage\n{\n    //message time\n    PurchaseTime = Timestamp.FromDateTime(purchaseDay),\n    Time = Timestamp.FromDateTime(DateTime.UtcNow),\n    Id = Guid.NewGuid().ToString(),\n    //add random location\n    Location = locations[random.Next(0, locations.Length)],\n    //add random cost\n    Cost = 200 * random.Next(1, 4)\n}; \n```", "```cs\nbyte[]? body = null;\nusing (var stream = new MemoryStream())\n{\n    purchase.WriteTo(stream);\n    stream.Flush();\n    body = stream.ToArray();\n} \n```", "```cs\nvar policy = Policy\n    .Handle<Exception>()\n    .WaitAndRetry(6,\n        retryAttempt => TimeSpan.FromSeconds(Math.Pow(2,\n        retryAttempt))); \n```", "```cs\npolicy.Execute(() =>\n{\ntry\n{\n    if(connection == null || channel == null)\n    {\n        connection = factory.CreateConnection();\n        channel = connection.CreateModel();\n        channel.ConfirmSelect();\n    }\n    //actual communication here\n    ...\n    ...\n}\ncatch\n{\n    channel.Dispose();\n    connection.Dispose();\n    channel = null;\n    connection = null;\n    throw;\n} \n```", "```cs\n    channel.QueueDeclare(queue: \"purchase_queue\",\n        durable: true,\n        exclusive: false,\n        autoDelete: false,\n       arguments: null); \n    ```", "```cs\n    var properties = channel.CreateBasicProperties();\n    properties.Persistent = true; \n    ```", "```cs\n    channel.BasicPublish(exchange: \"\",\n            routingKey: \"purchase_queue\",\n            basicProperties: properties,\n            body: body); \n    ```", "```cs\n    channel.WaitForConfirmsOrDie(new TimeSpan(0, 0, 5)); \n    ```", "```cs\nprotected override async Task ExecuteAsync(CancellationToken stoppingToken)\n{\n    while (!stoppingToken.IsCancellationRequested)\n    {\n        try\n        {\n            var factory = new ConnectionFactory() { HostName = \"localhost\" };\n            using (var connection = factory.CreateConnection())\n            using (var channel = connection.CreateModel())\n            {\n                channel.QueueDeclare(queue: \"purchase_queue\",\n                                     durable: true,\n                                     exclusive: false,\n                                     autoDelete: false,\n                                     arguments: null);\n                channel.BasicQos(prefetchSize: 0, prefetchCount: 1, global: false);\n                var consumer = new EventingBasicConsumer(channel);\n                consumer.Received += async (sender, ea) =>\n                {\n                    // Message received even handler\n                    ...\n                };\n                channel.BasicConsume(queue: \"purchase_queue\",\n                            autoAck: false,\n                            consumer: consumer);\n                 await Task.Delay(1000, stoppingToken);\n            }\n         }\n        catch { }\n    }\n} \n```", "```cs\nif (stoppingToken.IsCancellationRequested)\n{\n    channel.Close();\n    connection.Close();\n    return;\n} \n```", "```cs\nusing (var scope = services.CreateScope())\n{\n  try\n  {\n  // actual message processing\n  ...\n  }\n  catch {\n    ((EventingBasicConsumer)sender).Model.BasicNack(ea.DeliveryTag, false, true);\n  }\n} \n```", "```cs\nIDayStatistics statistics = scope.ServiceProvider\n    .GetRequiredService<IDayStatistics>(); \n```", "```cs\nvar body = ea.Body.ToArray();\nPurchaseMessage? message = null;\nusing (var stream = new MemoryStream(body))\n{\n    message = PurchaseMessage.Parser.ParseFrom(stream);\n}\nvar res = await statistics.Add(new Purchase {\n    Cost= message.Cost,\n    Id= Guid.Parse(message.Id),\n    Location = message.Location,\n    Time = new DateTimeOffset(message.Time.ToDateTime(), TimeSpan.Zero),\n    PurchaseTime = new DateTimeOffset(message.PurchaseTime.ToDateTime(), TimeSpan.Zero)\n}); \n```", "```cs\nif(res != null)\n    ((EventingBasicConsumer)sender).Model\n        .BasicAck(ea.DeliveryTag, false);\nelse\n    ((EventingBasicConsumer)sender).Model\n        .BasicNack(ea.DeliveryTag, false, true); \n```", "```cs\nbyte[]? body = null;\nusing (var stream = new MemoryStream())\n{\n    BinaronConvert.Serialize(purchase, stream);\n    stream.Flush();\n    body = stream.ToArray();\n} \n```", "```cs\nPurchaseMessage? message = null;\nusing (var stream = new MemoryStream(body))\n{\n    message = BinaronConvert.Deserialize<PurchaseMessage>(stream);\n}. \n```", "```cs\n{\n\"ConnectionStrings\": {\n\"DefaultConnection\": \"Server=\n   (localdb)\\\\mssqllocaldb;Database=wwtravelclub;\nTrusted_Connection=True;MultipleActiveResultSets=true\"\n},\n    ...\n    ...\n} \n```", "```cs\nbuilder.Services.AddDbContext<WWTravelClubDB.MainDBContext>(options =>\noptions.UseSqlServer(\nbuilder.Configuration.GetConnectionString(\"DefaultConnection\"),\n            b =>b.MigrationsAssembly(\"WWTravelClubDB\"))) \n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\n...\nbuilder.Services.AddSwaggerGen(c =>\n{\n    c.SwaggerDoc(\"v2\", new() { Title = \"WWTravelClub REST API - .NET 8\", Version = \"v2\" });\n});\nvar app = builder.Build();\n...\napp.UseSwagger();\napp.UseSwaggerUI(c => c.SwaggerEndpoint(\"/swagger/v2/swagger.json\", \"WWTravelClub REST API - .NET 8\"));\n...\napp.Run(); \n```", "```cs\n[Route(\"api/packages\")]\n[ApiController]\npublic class PackagesController : ControllerBase\n{\n    [HttpGet(\"bydate/{start}/{stop}\")]\n    [ProducesResponseType(typeof(IEnumerable<PackagesListDTO>), 200)]\n    [ProducesResponseType(400)]\n    [ProducesResponseType(500)]\n    public async Task<IActionResult> GetPackagesByDate(\n        [FromServices] WWTravelClubDB.MainDBContext ctx,\n        DateTime start, DateTime stop)\n    {\n    }\n} \n```", "```cs\nnamespace WWTravelClubWebAPI80.DTOs;\npublic record PackagesListDTO\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n    public int DurationInDays { get; set; }\n    public DateTime? StartValidityDate { get; set; }\n    public DateTime? EndValidityDate { get; set; }\n    public string DestinationName { get; set; }\n    public int DestinationId { get; set; }\n} \n```", "```cs\nusing Microsoft.EntityFrameworkCore;\nusing WWTravelClubWebAPI80.DTOs; \n```", "```cs\ntry\n{\n    var res = await ctx.Packages\n        .Where(m => start >= m.StartValidityDate\n        && stop <= m.EndValidityDate)\n        .Select(m => new PackagesListDTO\n        {\n            StartValidityDate = m.StartValidityDate,\n            EndValidityDate = m.EndValidityDate,\n            Name = m.Name,\n            DurationInDays = m.DurationInDays,\n            Id = m.Id,\n            Price = m.Price,\n            DestinationName = m.MyDestination.Name,\n            DestinationId = m.DestinationId\n        })\n        .ToListAsync();\n    return Ok(res);\n}\ncatch (Exception err)\n{\n    return StatusCode(500, err.ToString());\n} \n```", "```cs\n{\n\"errors\": {\n\"start\": [\n\"The value '2019' is not valid.\"\n]\n},\n\"title\": \"One or more validation errors occurred.\",\n\"status\": 400,\n\"traceId\": \"80000008-0000-f900-b63f-84710c7967bb\"\n} \n```", "```cs\npublic static class SendEmail\n{\n    [FunctionName(nameof(SendEmail))]\n    public static async Task<HttpResponseMessage>RunAsync( [HttpTrigger(AuthorizationLevel.Function, \"post\")] HttpRequestMessage req, ILogger log)\n    {\n        var requestData = await req.Content.ReadAsStringAsync();\n        var connectionString = Environment.GetEnvironmentVariable(\"EmailQueueConnectionString\");\n        var storageAccount = CloudStorageAccount.Parse(connectionString);\n        var queueClient = storageAccount.CreateCloudQueueClient();\n        var messageQueue = queueClient.GetQueueReference(\"email\");\n        var message = new CloudQueueMessage(requestData);\n        await messageQueue.AddMessageAsync(message);\n        log.LogInformation(\"HTTP trigger from SendEmail function processed a request.\");\n        var responseObj = new { success = true };\n        return new HttpResponseMessage(HttpStatusCode.OK)\n        {\n            Content = new StringContent(JsonConvert.SerializeObject(responseObj), Encoding.UTF8, \"application/json\"),\n         };\n    }\n} \n```", "```cs\n        <ItemGroup>\n        <FrameworkReference\n         Include=\"Microsoft.AspNetCore.App\" />\n        </ItemGroup> \n        ```", "```cs\npublic interface IPackage : IEntity<int>\n{\n    void FullUpdate(IPackageFullEditDTO packageDTO);\n    string Name { get; set; } = null!;\n    string Description { get;} = null!;\n    decimal Price { get; set; }\n    int DurationInDays { get; }\n    DateTime? StartValidityDate { get;}\n    DateTime? EndValidityDate { get; }\n    int DestinationId { get; }\n\n} \n```", "```cs\npublic interface IPackageRepository:\n        IRepository<IPackage>\n{\n    Task<IPackage?> GetAsync(int id);\n    IPackage New();\n    Task<IPackage?> Delete(int id);\n} \n```", "```cs\npublic class PackageDeleteEvent: IEventNotification\n{\n    public PackageDeleteEvent(int id, long oldVersion)\n    {\n        PackageId = id;\n        OldVersion = oldVersion;\n    }\n    public int PackageId { get; }\n    public long OldVersion { get; }\n\n}\npublic class PackagePriceChangedEvent: IEventNotification\n{\n    public PackagePriceChangedEvent(int id, decimal price,\n long oldVersion, long newVersion)\n    {\n            PackageId = id;\n            NewPrice = price;\n            OldVersion = oldVersion;\n            NewVersion = newVersion;\n     }\n    public int PackageId { get; }\n    public decimal NewPrice { get; }\n    public long OldVersion { get; }\n    public long NewVersion { get; }\n} \n```", "```cs\npublic class Package: Entity<int>, IPackage\n{\n    public void FullUpdate(IPackageFullEditDTO o)\n    {\n        if (IsTransient())\n        {\n            Id = o.Id;\n            DestinationId = o.DestinationId;\n        }\n        else\n        {\n            if (o.Price != this.Price)\n                this.AddDomainEvent(new PackagePriceChangedEvent(\n                        Id, o.Price, EntityVersion, EntityVersion+1));\n        }\n        Name = o.Name;\n        Description = o.Description;\n        Price = o.Price;\n        DurationInDays = o.DurationInDays;\n        StartValidityDate = o.StartValidityDate;\n        EndValidityDate = o.EndValidityDate;\n    }\n    [MaxLength(128)]\n    public string Name { get; set; }= null!;\n    [MaxLength(128)]\n    public string? Description { get; set; }\n    public decimal Price { get; set; }\n    public int DurationInDays { get; set; }\n    public DateTime? StartValidityDate { get; set; }\n    public DateTime? EndValidityDate { get; set; }\n    public Destination MyDestination { get; set; }= null!;\n    [ConcurrencyCheck]\n    public long EntityVersion{ get; set; }\n    public int DestinationId { get; set; }\n} \n```", "```cs\nIdentityDbContext<IdentityUser<int>, IdentityRole<int>, int> \n```", "```cs\npublic async Task StartAsync()\n{\n    await Database.BeginTransactionAsync();\n}\npublic Task CommitAsync()\n{\n    Database.CommitTransaction();\n    return Task.CompletedTask;\n}\npublic Task RollbackAsync()\n{\n    Database.RollbackTransaction();\n    return Task.CompletedTask;\n} \n```", "```cs\npublic async Task<bool> SaveEntitiesAsync()\n{\n    try\n    {\n        return await SaveChangesAsync() > 0;\n    }\n    catch (DbUpdateConcurrencyException ex)\n    {\n        foreach (var entry in ex.Entries)\n        {\n            entry.State = EntityState.Detached;\n\n        }\n        throw;\n    }\n} \n```", "```cs\npublic async Task<IPackage?> Delete(int id)\n{\n    var model = await GetAsync(id);\n    if (model is not Package package) return null;\n    context.Packages.Remove(package);\n    model.AddDomainEvent(\n        new PackageDeleteEvent(\n            model.Id, package.EntityVersion));\n    return model;\n} \n```", "```cs\nservices.AddDbContext<MainDbContext>(options =>\n                options.UseSqlServer(connectionString,\n                b => b.MigrationsAssembly(migrationAssembly))); \n```", "```cs\nservices.AddIdentity<IdentityUser<int>, IdentityRole<int>>()\n                .AddEntityFrameworkStores<MainDbContext>()\n                .AddDefaultTokenProviders(); \n```", "```cs\n ...\n    builder.Services.AddRazorPages();\n    builder.Services.AddDbLayer(\n        builder.Configuration.GetConnectionString(\"DefaultConnection\"),\n        \"PackagesManagementDB\");\n    ...\n    app.UseAuthentication();\n    app.UseAuthorization();\n    ... \n```", "```cs\n{\n\"ConnectionStrings\": {\n\"DefaultConnection\": \"Server=(localdb)\\\\mssqllocaldb;Database=package-management;Trusted_Connection=True;MultipleActiveResultSets=true\"\n},\n    ...\n} \n```", "```cs\nAdd-Migration Initial -Project PackageManagementDB \n```", "```cs\napp.UseAuthorization();\n// Code to add: configure the Localization middleware\nvar ci = new CultureInfo(\"en-US\");\napp.UseRequestLocalization(new RequestLocalizationOptions\n{\n    DefaultRequestCulture = new RequestCulture(ci),\n    SupportedCultures = new List<CultureInfo>\n    {\n        ci,\n    },\n     SupportedUICultures = new List<CultureInfo>\n    {\n        ci,\n    }\n}); \n```", "```cs\n...\n...\nbuilder.Services.AddAllQueries(this.GetType().Assembly);\nbuilder.Services.AddAllCommandHandlers(this.GetType().Assembly);\nbuilder.Services.AddAllEventHandlers(this.GetType().Assembly); \n```", "```cs\npublic class PackagesListQuery(MainDbContext ctx) :IPackagesListQuery\n{\n    public async Task<IReadOnlyCollection<PackageInfosViewModel>> GetAllPackages()\n    {\n        return await ctx.Packages.Select(m => new PackageInfosViewModel\n        {\n            StartValidityDate = m.StartValidityDate,\n            EndValidityDate = m.EndValidityDate,\n            Name = m.Name,\n            DurationInDays = m.DurationInDays,\n            Id = m.Id,\n            Price = m.Price,\n            DestinationName = m.MyDestination.Name,\n            DestinationId = m.DestinationId\n        })\n            .OrderByDescending(m=> m.EndValidityDate)\n            .ToListAsync();\n    }\n} \n```", "```cs\npublic class PackageFullEditViewModel: IPackageFullEditDTO\n    {\n        public PackageFullEditViewModel() { }\n        public PackageFullEditViewModel(IPackage o)\n        {\n            Id = o.Id;\n            DestinationId = o.DestinationId;\n            Name = o.Name;\n            Description = o.Description;\n            Price = o.Price;\n            DurationInDays = o.DurationInDays;\n            StartValidityDate = o.StartValidityDate;\n            EndValidityDate = o.EndValidityDate;\n        }\n        ...\n        ... \n```", "```cs\npublic int Id { get; set; }\n[StringLength(128, MinimumLength = 5), Required]\n[Display(Name = \"name\")]\npublic string Name { get; set; }= null!;\n[Display(Name = \"package infos\")]\n[StringLength(128, MinimumLength = 10), Required]\npublic string Description { get; set; }= null!;\n[Display(Name = \"price\")]\n[Range(0, 100000)]\npublic decimal Price { get; set; }\n[Display(Name = \"duration in days\")]\n[Range(1, 90)]\npublic int DurationInDays { get; set; }\n[Display(Name = \"available from\"), Required]\npublic DateTime? StartValidityDate { get; set; }\n[Display(Name = \"available to\"), Required]\npublic DateTime? EndValidityDate { get; set; }\n[Display(Name = \"destination\")]\npublic int DestinationId { get; set; } \n```", "```cs\npublic class UpdatePackageCommand: ICommand\n{\n    public UpdatePackageCommand(IPackageFullEditDTO updates)\n    {\n        Updates = updates;\n    }\n    public IPackageFullEditDTO Updates { get; private set; }\n} \n```", "```cs\npublic class UpdatePackageCommandHandler(IPackageRepository repo, IEventMediator mediator) \n```", "```cs\npublic async Task HandleAsync(UpdatePackageCommand command)\n{\n    bool done = false;\n    IPackage model;\n    while (!done)\n    {\n        try\n        {\n            model = await repo.GetAsync(command.Updates.Id);\n            if (model == null) return;\n            model.FullUpdate(command.Updates);\n            await mediator.TriggerEvents(model.DomainEvents);\n            await repo.UnitOfWork.SaveEntitiesAsync();\n            done = true;\n        }\n        catch (DbUpdateConcurrencyException)\n        {\n          // add some logging here\n        }\n    }\n} \n```", "```cs\npublic class PackagePriceChangedEventHandler( IPackageEventRepository repo) :\n\tIEventHandler<PackagePriceChangedEvent>\n{\n    public Task HandleAsync(PackagePriceChangedEvent ev)\n    {\n        repo.New(PackageEventType.CostChanged, ev.PackageId,\n            ev.OldVersion, ev.NewVersion, ev.NewPrice);\n      return Task.CompletedTask;\n    }\n} \n```", "```cs\npublic AccountController(\n  UserManager<IdentityUser<int>> userManager,\n  SignInManager<IdentityUser<int>> signInManager) : Controller \n```", "```cs\n[HttpPost]\npublic async Task<IActionResult> Logout()\n{\n    await signInManager.SignOutAsync();\n    return RedirectToAction(nameof(HomeController.Index), \"Home\");\n} \n```", "```cs\n[HttpGet]\npublic async Task<IActionResult> Login(string? returnUrl = null)\n{\n    // Clear the existing external cookie\n//to ensure a clean login process\nawait HttpContext\n         .SignOutAsync(IdentityConstants.ExternalScheme);\n    ViewData[\"ReturnUrl\"] = returnUrl;\n    return View();\n} \n```", "```cs\n<form asp-route-returnurl=\"@ViewData[\"ReturnUrl\"]\" method=\"post\">\n...\n</form> \n```", "```cs\n[ValidateAntiForgeryToken]\npublic async Task<IActionResult> Login(\n    LoginViewModel model,\n string? returnUrl = null)\n        {\n            ... \n```", "```cs\nif (User.Identity.IsAuthenticated)\n{\n      await signInManager.SignOutAsync();\n\n} \n```", "```cs\nif (ModelState.IsValid)\n{\n     ...\n}\nelse\n// If we got this far, something failed, redisplay form\nreturn View(model); \n```", "```cs\nvar result = await signInManager.PasswordSignInAsync(\n    model.UserName,\n    model.Password, model.RememberMe,\n    lockoutOnFailure: false); \n```", "```cs\nif (result.Succeeded)\n{\n    if (!string.IsNullOrEmpty(returnUrl))\n        return LocalRedirect(returnUrl);\n    else\nreturn RedirectToAction(nameof(HomeController.Index), \"Home\");\n}\nelse\n{\n    ModelState.AddModelError(string.Empty,\n        \"wrong username or password\");\n    return View(model);\n} \n```", "```cs\n[HttpGet]\npublic async Task<IActionResult> Index(\n    [FromServices] IPackagesListQuery query)\n{\n    var results = await query.GetAllPackages();\n    var vm = new PackagesListViewModel { Items = results };\n    return View(vm);\n} \n```", "```cs\n@foreach(var package in Model.Items)\n{\n<tr>\n<td>\n<a asp-controller=\"ManagePackages\"\n asp-action=\"@nameof(ManagePackagesController.Delete)\"\n asp-route-id=\"@package.Id\">\n            delete\n        </a>\n</td>\n<td>\n<a asp-controller=\"ManagePackages\"\n asp-action=\"@nameof(ManagePackagesController.Edit)\"\n asp-route-id=\"@package.Id\">\n            edit\n        </a>\n</td>\n    ...\n    ... \n```", "```cs\n[HttpGet]\npublic async Task<IActionResult> Edit(\n int id,\n    [FromServices] IPackageRepository repo)\n{\n    if (id == 0) return RedirectToAction(\n        nameof(ManagePackagesController.Index));\n    var aggregate = await repo.Get(id);\n    if (aggregate == null) return RedirectToAction(\n        nameof(ManagePackagesController.Index));\n    var vm = new PackageFullEditViewModel(aggregate);\n    return View(vm);\n} \n```", "```cs\n@inject PackagesManagement.Queries.IDestinationListQuery destinationsQuery\n@{\n    ViewData[\"Title\"] = \"Edit/Create package\";\n    var allDestinations =\n        await destinationsQuery.AllDestinations();\n} \n```", "```cs\n[HttpPost]\npublic async Task<IActionResult> Edit(\n    PackageFullEditViewModel vm,\n    [FromServices] ICommandHandler<UpdatePackageCommand> command)\n{\n    if (ModelState.IsValid)\n    {\n        await command.HandleAsync(new UpdatePackageCommand(vm));\n        return RedirectToAction(\n            nameof(ManagePackagesController.Index));\n    }\n    else\nreturn View(vm);\n} \n```", "```cs\n@if (User.Identity.IsAuthenticated)\n{\n\t<li class=\"nav-item\">\n<a class=\"nav-link text-dark\"\n asp-controller=\"ManagePackages\"\n asp-action=\"Index\">Manage packages</a>\n</li>\n<li class=\"nav-item\">\n<a class=\"nav-link text-dark\"\n href=\"javascript:document.getElementById('logoutForm').submit()\">\n            Logout\n        </a>\n</li>\n}\nelse\n{\n    <li class=\"nav-item\">\n<a class=\"nav-link text-dark\"\n asp-controller=\"Account\" asp-action=\"Login\">Login</a>\n</li>\n} \n```", "```cs\n@if (User.Identity.IsAuthenticated)\n{\n    <form asp-area=\"\" asp-controller=\"Account\"\n asp-action=\"Logout\" method=\"post\"\n id=\"logoutForm\" ></form>\n} \n```", "```cs\nbuilder.Services.AddCors(o => {\n    o.AddDefaultPolicy(pbuilder =>\n    {\n        pbuilder.AllowAnyMethod();\n        pbuilder.WithHeaders(HeaderNames.ContentType, HeaderNames.Authorization);\n        pbuilder.WithOrigins(\"https://localhost:7027/\");\n    });\n}); \n```", "```cs\nbuilder.Services.AddScoped(sp => new HttpClient {\n BaseAddress = new Uri(\"https://localhost:7269/\")}); \n```", "```cs\n\"ConnectionStrings\": {\n\"DefaultConnection\": \"Server=(localdb)\\\\mssqllocaldb;Database=package-management;Trusted_Connection=True;MultipleActiveResultSets=true\"\n}, \n```", "```cs\nbuilder.services.AddDbLayer(Configuration\n                .GetConnectionString(\"DefaultConnection\"),\n                \"PackagesManagementDB\"); \n```", "```cs\nbuilder.services.AddAllQueries(this.GetType().Assembly); \n```", "```cs\n<InvariantGlobalization>false</InvariantGlobalization> \n```", "```cs\nusing System;\nnamespace PackagesManagementBlazor.Shared\n{\n    public class PackageInfosViewModel\n    {\n        public int Id { get; set; }\n        public required string Name { get; set; }\n        public decimal Price { get; set; }\n        public int DurationInDays { get; set; }\n        public DateTime? StartValidityDate { get; set; }\n        public DateTime? EndValidityDate { get; set; }\n        public required string DestinationName { get; set; }\n        public int DestinationId { get; set; }\n        public override string ToString()\n        {\n            return $\"{Name}. {DurationInDays} days in {DestinationName}, price: {Price}\";\n        }\n    }\n} \n```", "```cs\nusing System.Collections.Generic;\nnamespace PackagesManagementBlazor.Shared\n{\n    public class PackagesListViewModel\n    {\n        Public required ReadOnlyCollection<PackageInfosViewModel>\n            Items { get; set; }\n    }\n} \n```", "```cs\nusing DDD.ApplicationLayer;\nusing PackagesManagementBlazor.Shared;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nnamespace PackagesManagementBlazor.Server.Queries\n{\n    public interface IPackagesListByLocationQuery: IQuery\n    {\n        Task<ReadOnlyCollection<PackageInfosViewModel>>\n            GetPackagesOf(string location);\n    }\n} \n```", "```cs\npublic class PackagesListByLocationQuery(MainDbContext ctx):IPackagesListByLocationQuery\n{\n\n    public async Task<ReadOnlyCollection<PackageInfosViewModel>>\n GetPackagesOfAsync(string location)\n    {\n        Return new ReadOnlyCollection<PackageInfosViewModel>\n\t(await ctx.Packages\n            .Where(m => m.MyDestination.Name.StartsWith(location))\n            .Select(m => new PackageInfosViewModel\n        {\n            StartValidityDate = m.StartValidityDate,\n            EndValidityDate = m.EndValidityDate,\n            Name = m.Name,\n            DurationInDays = m.DurationInDays,\n            Id = m.Id,\n            Price = m.Price,\n            DestinationName = m.MyDestination.Name,\n            DestinationId = m.DestinationId\n        })\n            .OrderByDescending(m=> m.EndValidityDate)\n            .ToListAsync());\n    }\n} \n```", "```cs\nusing Microsoft.AspNetCore.Mvc;\nusing PackagesManagementBlazor.Server.Queries;\nusing PackagesManagementBlazor.Shared;\nusing System.Threading.Tasks;\nnamespace PackagesManagementBlazor.Server.Controllers\n{\n    [Route(\"[controller]\")]\n    [ApiController]\n    public class PackagesController : ControllerBase\n    {\n        // GET api/<PackagesController>/Flor\n        [HttpGet(\"{location}\")]\n        public async Task<PackagesListViewModel>    \n GetAsync(string location,\n            [FromServices] IPackagesListByLocationQuery query )\n        {\n            return new PackagesListViewModel\n            {\n                Items = await query.GetPackagesOf(location)\n            };\n        } \n    }\n} \n```", "```cs\nusing System.ComponentModel.DataAnnotations;\nnamespace PackagesManagementBlazor.Client.ViewModels\n{\n    public class SearchViewModel\n    {\n        [Required]\n        public string? Location { get; set; }\n    }\n} \n```", "```cs\nnamespace PackagesManagementBlazor.Client.Services\n{\n    public class PackagesClient\n    {\n        private HttpClient client;\n        public PackagesClient(HttpClient client)\n        {\n            this.client = client;\n        }\n        public async Task<IEnumerable<PackageInfosViewModel>>\n            GetByLocationAsync(string location)\n        {\n            var result =\n                await client.GetFromJsonAsync<PackagesListViewModel>\n                    (\"Packages/\" + Uri.EscapeDataString(location));\n            return result.Items;\n        }\n    }\n} \n```", "```cs\nbuilder.Services.AddScoped<PackagesClient>(); \n```", "```cs\n@using PackagesManagementBlazor.Client.ViewModels\n@using PackagesManagementBlazor.Shared\n@using PackagesManagementBlazor.Client.Services\n@inject PackagesClient client\n@page \"/\"\n<h1>Search packages by location</h1>\n<EditForm Model=\"search\"\n OnValidSubmit=\"Search\">\n<DataAnnotationsValidator />\n<div class=\"form-group\">\n<label for=\"integerfixed\">Insert location starting chars</label>\n<InputText @bind-Value=\"search.Location\" />\n<ValidationMessage For=\"@(() => search.Location)\" />\n</div>\n<button type=\"submit\" class=\"btn btn-primary\">\n        Search\n  </button>\n</EditForm>\n@code{\n    SearchViewModel search { get; set; } = new SearchViewModel();\n    async Task Search()\n    {\n        ...\n    }\n} \n```", "```cs\n@if (packages != null)\n{\n...\n}\nelse if (loading)\n{\n    <p><em>Loading...</em></p>\n}\n@code{\n    SearchViewModel search { get; set; } = new SearchViewModel();\n    private IEnumerable<PackageInfosViewModel> packages;\n    bool loading;\n    async Task Search()\n    {\n        packages = null;\n        loading = true;\n        await InvokeAsync(StateHasChanged);\n        packages = await client.GetByLocationAsync(search.Location);\n        loading = false;\n    }\n} \n```", "```cs\n<div class=\"table-responsive\">\n<table class=\"table\">\n<thead>\n<tr>\n<th scope=\"col\">Destination</th>\n<th scope=\"col\">Name</th>\n<th scope=\"col\">Duration/days</th>\n<th scope=\"col\">Price</th>\n<th scope=\"col\">Available from</th>\n<th scope=\"col\">Available to</th>\n</tr>\n</thead>\n<tbody>\n      @foreach (var package in packages)\n      {\n        <tr>\n<td>\n            @package.DestinationName\n          </td>\n<td>\n            @package.Name\n          </td>\n<td>\n            @package.DurationInDays\n          </td>\n<td>\n            @package.Price\n          </td>\n<td>\n            @(package.StartValidityDate.HasValue ?\n              package.StartValidityDate.Value.ToString(\"d\")\n              :\n              String.Empty)\n          </td>\n<td>\n            @(package.EndValidityDate.HasValue ?\n              package.EndValidityDate.Value.ToString(\"d\")\n              :\n              String.Empty)\n          </td>\n</tr>\n      }\n    </tbody>\n</table>\n</div> \n```", "```cs\n<TargetFrameworks> Condition=\"$([MSBuild]::IsOSPlatform('windows'))\">$(TargetFrameworks);net8.0-windows10.0.19041.0 </TargetFrameworks> \n```", "```cs\n@using PackagesManagementMAUIBlazor.Services\n@using PackagesManagementBlazor.Shared\n@using PackagesManagementMAUIBlazor.ViewModels\n@inject PackagesClient client\n@page \"/\" \n```", "```cs\nbuilder.Services.AddScoped(sp => new HttpClient\n    { BaseAddress = new Uri(\"https://localhost:7269/\") });\nbuilder.Services.AddScoped<PackagesClient>(); \n```", "```cs\n[HttpPost]\npublic async Task<IActionResult> Edit(\n    PackageFullEditViewModel vm,\n    [FromServices] ICommandHandler<UpdatePackageCommand> command)\n{\n    if (ModelState.IsValid)\n    {\n        await command.HandleAsync(\n\t\tnew  UpdatePackageCommand(vm));\n        return RedirectToAction(\n            nameof(ManagePackagesController.Index));\n    }\n    else\nreturn View(vm);\n} \n```", "```cs\n[Fact]\npublic async Task DeletePostValidationFailedTest()\n{\n} \n```", "```cs\nvar controller = new ManagePackagesController();\ncontroller.ModelState\n    .AddModelError(\"Name\", \"fake error\"); \n```", "```cs\nvar vm = new PackageFullEditViewModel();\nvar commandDependency =\n                new Mock<ICommandHandler<UpdatePackageCommand>>();\nvar result = await controller.Edit(vm, commandDependency.Object); \n```", "```cs\nvar viewResult = Assert.IsType<ViewResult>(result);\nAssert.Equal(vm, viewResult.Model); \n```", "```cs\n[Fact]\npublic async Task DeletePostSuccessTest()\n{\n} \n```", "```cs\nvar controller = new ManagePackagesController();\nvar commandDependency =\n    new Mock<ICommandHandler<UpdatePackageCommand>>();\ncommandDependency\n    .Setup(m =>\n\tm.HandleAsync(It.IsAny<UpdatePackageCommand>()))\n    .Returns(Task.CompletedTask);\nvar vm = new PackageFullEditViewModel(); \n```", "```cs\nvar result = await controller.Edit(vm,\n    commandDependency.Object); \n```", "```cs\ncommandDependency.Verify(m => m.HandleAsync(\n    It.IsAny<UpdatePackageCommand>()),\n    Times.Once);\nvar redirectResult = Assert.IsType<RedirectToActionResult>(result);\nAssert.Equal(nameof(ManagePackagesController.Index),\n    redirectResult.ActionName);\nAssert.Null(redirectResult.ControllerName); \n```", "```cs\n    **\\PackagesManagementTest.dll\n    !**\\*TestAdapter.dll\n    !**\\obj\\** \n    ```"]