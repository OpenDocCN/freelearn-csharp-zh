- en: '*Chapter 4*: Understanding the Reference Solution'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we built a simple full-stack web application that is
    used to manage products with categories. We've seen a typical flow of developing
    applications with ABP Framework. You are now ready to create your own application
    with the basic features. In the next chapters, you will better understand the
    ABP features and create more advanced applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Giving examples with real-world complexities in a book is not very easy. Having
    reflected on that, we''ve prepared a complete, real-world reference application
    built with ABP Framework: *EventHub*. It is open source and freely available on
    GitHub.'
  prefs: []
  type: TYPE_NORMAL
- en: The EventHub solution is thought of as a live system that is available on [openeventhub.com.](http://openeventhub.com.)
    You can just try it out to explore it. We've established the **continuous integration/continuous
    development** (**CI/CD**) pipelines, and we are updating the website as we develop
    it and get contributions from the community. Feel free to see its source code,
    submit bug reports or feature requests, or even send your pull requests to contribute!
    As the name suggests, this is an open platform.
  prefs: []
  type: TYPE_NORMAL
- en: This book is the only source of documentation that explains the EventHub solution
    because we've mainly prepared it for the readers of this book. I will refer to
    that solution in the next chapters of the book, especially in *Part 3*, *Implementing
    Domain-Driven Design*.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will investigate the EventHub solution in the following
    sections:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running the solution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can clone or download the source code of the EventHub project from GitHub,
    at [https://github.com/volosoft/eventhub](https://github.com/volosoft/eventhub).
  prefs: []
  type: TYPE_NORMAL
- en: If you want to run the solution in your local development environment, you need
    to have an **integrated development environment** (**IDE**)/editor (such as Visual
    Studio) to build and run ASP.NET Core solutions. You also need to have **Docker**
    installed on your computer. You can download and install **Docker Desktop** for
    the development environment by following the documentation at [https://docs.docker.com/get-docker](https://docs.docker.com/get-docker).
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'EventHub is a platform that is used to create organizations to organize events.
    You create events, either online or in person, then people register them. The
    following screenshot is taken from the **Home** page of the [openeventhub.com](http://openeventhub.com)
    website:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.1 – EventHub Home page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.01_B17287.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.1 – EventHub Home page
  prefs: []
  type: TYPE_NORMAL
- en: You can explore upcoming **Events** section on the **Home** page. Click on an
    event for details and register for the event. You get an email notification before
    the event starts or the event time changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is another screenshot from the **Create New Event** page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.2 – Create New Event page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.02_B17287.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.2 – Create New Event page
  prefs: []
  type: TYPE_NORMAL
- en: You can select one of your owned organizations on this page, set a **Title**,
    time, and description, pick a **Cover Image**, and determine other details about
    the event you are organizing.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to learn more, please register at [openeventhub.com](http://openeventhub.com)
    and explore the platform. In this book, I want to talk about the technical details
    rather than the application's features. Let's begin with the big picture and understand
    the solution's architecture.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here is an overall diagram of the applications inside the solution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.3 – Applications of the EventHub solution'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.03_B17287.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.3 – Applications of the EventHub solution
  prefs: []
  type: TYPE_NORMAL
- en: 'There are six applications and one database shown in *Figure 4.3*, and more
    information on them is provided here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`IdentityServer` library. It is a **single sign-on** (**SSO**) server, which
    means that if you log in to one of the applications, you are then logged in to
    all of the applications (and vice versa, meaning that if you log out of one of
    the applications, you are logged out of all of the applications). That is an **ASP.NET
    Core Razor Pages** application, and it directly connects to **The Database**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Main Website**: This is an essential website ([www.openeventhub.com](http://www.openeventhub.com))
    of the platform used by **End Users** to create new events and register for events.
    It is an **ASP.NET Core Razor Pages** application that uses the **Main HTTP API**
    as the backend.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Admin Application**: This application allows **Admin Users** to manage organizations,
    events, and the system. It uses the **Admin HTTP API** for all the operations,
    which is a **Blazor WebAssembly** application that runs in the browser.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Main HTTP API**: Exposes **HyperText Transfer Protocol** (**HTTP**) **application
    programming interfaces** (**APIs**) to be consumed by the main website.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Admin HTTP API**: Exposes HTTP APIs to be consumed by the admin application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Background Services**: A **console application** that runs background workers
    and background jobs of the system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Database**: This is a relational **PostgreSQL** database that stores
    all the data in the system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since it is a distributed system, it uses **Redis** as the distributed cache
    server.
  prefs: []
  type: TYPE_NORMAL
- en: It is a good idea to start by understanding the authentication flow to then
    understand the system.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication flow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As mentioned in the previous section, the **Authentication Server** is an SSO
    server used to authenticate users and clients. **Main Website** and **Admin Application**
    use the **OpenID Connect** (**OIDC**) protocol to redirect users to the **Authentication
    Server** when users want or need to log in to the application. The following diagram
    shows the login process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.4 – The authentication flow'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.04_B17287.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.4 – The authentication flow
  prefs: []
  type: TYPE_NORMAL
- en: 'In *Figure 4.4*, the logic process occurs in the following order:'
  prefs: []
  type: TYPE_NORMAL
- en: Whenever a user wants to visit a page that requires authentication **(1)** or
    a user explicitly clicks to the login link, the **Main Website** redirects the
    user **(2)** to the **Authentication Server**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authentication Server** has a login page so that users can enter a username
    and password or register as a new user. Once the login process is done, the user
    is redirected back to the **Main Website** with an authorization code **(3)**
    and **(4)**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Main Website** then performs a token request **(5)** to the server using
    the obtained authorization code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authentication Server** returns an **identifier** (**ID**) token (contains
    some user information such as username, ID, email, and so on) and an access token
    **(6)**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Main Website** stores the access token in a cookie so that it can be obtained
    in the next requests. In the next requests, it gets the access token from the
    cookie and adds it to the HTTP request header while performing HTTP requests to
    the **Main HTTP API** application **(7)**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Main HTTP API** application validates the access token **(8)** and authorizes
    the request.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Main Website** uses cookies to store the access token, as mentioned. On
    the other hand, the **Admin (Blazor WebAssembly) Application** stores the access
    token in the local storage of the browser and adds it to the HTTP request header
    in every request to the server.
  prefs: []
  type: TYPE_NORMAL
- en: All that process is done by ABP's `Account` and `IdentityServer` modules with
    some configurations in the applications. I won't show the detailed configuration
    here to keep this chapter focused on the overall solution structure and architecture
    (check the source code for more details).
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will explore the EventHub .NET solution and the projects
    inside it.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The EventHub .NET solution consists of several projects, grouped by the application
    type and shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.5 – EventHub .NET solution in Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.05_B17287.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.5 – EventHub .NET solution in Visual Studio
  prefs: []
  type: TYPE_NORMAL
- en: The solution contains a single domain layer with two application layers and
    corresponding HTTP API and **user interface** (**UI**) layers. Two applications
    use the single domain layer but they have different application logic, so they
    are separated. We will return to this topic (multiple application layers) in the
    *Dealing with multiple applications* section of [*Chapter 9*](B17287_09_Epub_AM.xhtml#_idTextAnchor300),
    *Understanding Domain-Driven Design*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s begin explaining the projects with the core part, the `common` folder.
    That folder contains common libraries and services, as outlined here:'
  prefs: []
  type: TYPE_NORMAL
- en: The `EventHub.Domain` project is the domain layer that contains the entities,
    domain services, and other domain objects. The `EventHub.Domain.Shared` project
    contains constants and some other classes, which are shared among all layers and
    applications in the solution.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `EventHub.EntityFrameworkCore` project contains the code that defines `DbContext`,
    mappings, database migrations, repository implementations, and other code related
    to EF Core.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `EventHub.DbMigrator` project is a console application that you can run
    to apply pending database migrations and seed the initial data (such as the admin
    user/ role and their permissions). It is suitable to use in development and production
    environments.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `EventHub.BackgroundServices` project is another console application that
    runs background workers and jobs on the system and should always be running.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `www` folder contains the **Main Website** ([www.openeventhub.com](http://www.openeventhub.com))
    application''s components, listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The `EventHub.Application` project is the application layer that contains the
    implementation of the application services, while the `EventHub.Application.Contracts`
    project includes the application service interfaces and **data transfer objects**
    (**DTOs**) that are shared with the UI layer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `EventHub.HttpApi` project contains the API controllers that are consumed
    by the UI (web) layer. The controllers in that project are simple wrappers around
    the application services.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `EventHub.HttpApi.Host` project hosts the HTTP API layer. In this way, the
    hosting logic is separated from the project that contains the API controllers
    (which makes it possible to reuse the `EventHub.HttpApi` project as a library).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `EventHub.HttpApi.Client` project is a library that can be referenced by
    a .NET application to consume the API controllers easily. The UI (web) layer uses
    that project to call the HTTP APIs. This project uses ABP's dynamic C# proxy feature,
    which will be covered in [*Chapter 14*](B17287_14_Epub_AM.xhtml#_idTextAnchor429),
    *Building HTTP APIs and Real-Time Services*. In this way, we don't need to deal
    with HTTP clients and low-level details to call HTTP APIs from the UI layer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `EventHub.Web` project is the UI layer of the application. That is a typical
    Razor Pages application that renders the **HyperText Markup Language** (**HTML**)
    in the server. It has no database connection but uses the **Main HTTP API** application
    for all operations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `EventHub.Web.Theme` project is a custom theme for the application. ABP
    has a theming system that you can use to build your own themes and reuse them
    in any application. The `EventHub.Web` project uses this theme. Theming system
    will be covered in *Part 4*, *User Interface and API Development*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `admin` folder contains the admin application that is used by the users
    who maintain the system, and is explained in more detail here:'
  prefs: []
  type: TYPE_NORMAL
- en: The `EventHub.Admin.Application` project is the application layer of the admin
    side that contains the implementation of the application services, while the `EventHub.Admin.Application.Contracts`
    project includes the application service interfaces and DTOs that are shared with
    the UI layer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `EventHub.Admin.HttpApi` project contains the API controllers that are consumed
    by the UI (web) layer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `EventHub.Admin.HttpApi.Host` project hosts the HTTP API layer. In this
    way, the hosting logic is separated from the project that contains the API controllers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `EventHub.Admin.HttpApi.Client` project is a library that can be referenced
    by a .NET application to consume the API controllers easily. The UI (web) layer
    uses that project to call the HTTP APIs. This project uses ABP's dynamic C# proxy
    feature, which will be covered in [*Chapter 14*](B17287_14_Epub_AM.xhtml#_idTextAnchor429),
    *Building HTTP APIs and Real-Time Services*. In this way, we don't need to deal
    with HTTP clients and low-level details to call HTTP APIs from the UI layer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `EventHub.Admin.Web` project is the UI layer of the application. That is
    a **Blazor WebAssembly** application that runs in the browser and performs HTTP
    API calls to the server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, the `account` folder contains the `EventHub.IdentityServer`, that is
    used by other applications to authenticate the users.
  prefs: []
  type: TYPE_NORMAL
- en: I've explained all the projects in the solution, in brief. It is also important
    to understand the relations and dependencies between the projects.
  prefs: []
  type: TYPE_NORMAL
- en: Project dependencies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Separating the solution into multiple projects makes it possible to have multiple
    applications on runtime while sharing the code base between applications where
    it is necessary.
  prefs: []
  type: TYPE_NORMAL
- en: In the next sections, I will show the dependency graph of each application so
    that you can understand how the code base is organized. We begin with the **Main
    Website**, the essential application.
  prefs: []
  type: TYPE_NORMAL
- en: Main Website
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Remember that the `Web`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.6 – Main website project dependencies'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.06_B17287.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.6 – Main website project dependencies
  prefs: []
  type: TYPE_NORMAL
- en: The `Web` project depends on `Web.Theme`, which implements the EventHub application's
    UI theme. `Web.Theme` is a separate project because it is reused from the **Authentication
    Server** application. That is an example of reusing a UI theme between multiple
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: The `Web` project also depends on the `HttpApi` project. In this way, the HTTP
    API controllers become available in the web application, and we can consume these
    APIs from the client (JavaScript) code. However, when you call an HTTP API controller
    of this application, the request is redirected to the `HttpApi.Client` package.
    Notice that both the `HttpApi` and `HttpApi.Client` project reference the `Application.Contacts`
    project. API controllers in the `HttpApi` project use the application service
    interfaces, while the `HttpApi.Client` package implements these interfaces (using
    ABP's dynamic C# proxy system, which will be explored in [*Chapter 14*](B17287_14_Epub_AM.xhtml#_idTextAnchor429),
    *Building HTTP APIs and Real-Time Services*) to perform remote HTTP calls to the
    **Main HTTP API** application. So, this application becomes a proxy for the direct
    API calls between the client (JavaScript) and the HTTP API server. The actual
    implementations of the application service interfaces run in the **Main HTTP API**
    application, which will be explained in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Main HTTP API
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`HttpApi.Host` project and its direct and indirect dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.7 – Main HTTP API project dependencies'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.07_B17287.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.7 – Main HTTP API project dependencies
  prefs: []
  type: TYPE_NORMAL
- en: By referencing (adding a project dependency to) the `HttpApi` project (which
    includes the API controllers), we can respond to HTTP API calls. The API controllers
    use the application service interfaces defined in the `Application.Contracts`
    project. These interfaces are implemented by the `Application` project. That is
    why we need to reference the `Application` project from the `HttpApi.Host` project.
    The `Application` project uses the `Domain` project to perform the business logic
    of the application.
  prefs: []
  type: TYPE_NORMAL
- en: The `HttpApi.Host` project also references the `EntityFrameworkCore` project
    since we need a data layer on runtime. The `EntityFrameworkCore` project maps
    entities to the tables in the database, and implements the repositories defined
    in the `Domain` project.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that the `Application.Contracts` project (and the `Domain.Shared` project,
    indirectly) is shared by the client application, the **Main Website**, so they
    can rely on the same application service interfaces to communicate.
  prefs: []
  type: TYPE_NORMAL
- en: We have now explored the **Main Website** application components. The next section
    continues from the admin side.
  prefs: []
  type: TYPE_NORMAL
- en: Admin application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The admin application is a Blazor WebAssembly application that runs on the
    browser and is accessed using the following **Uniform Resource Locator** (**URL**):
    [admin.openeventhub.com](http://admin.openeventhub.com). It is used by the users
    who maintain the system. This application has a different set of APIs, UI pages,
    authorization rules, caching requirements, and so on. Hence, we''ve created a
    different application and HTTP API layers for that application. Nevertheless,
    it shares the same domain layer, so it uses the same domain logic and the same
    database.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start from the following diagram of the frontend (Blazor WebAssembly)
    application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.8 – Admin website project dependencies'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.08_B17287.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.8 – Admin website project dependencies
  prefs: []
  type: TYPE_NORMAL
- en: This diagram is simple compared to previous ones. The `Admin.Web` project (which
    is the Blazor WebAssembly application) references the `Admin.HttpApi.Client` project
    because it needs to call remote HTTP APIs. ABP's dynamic C# client proxy system
    (covered in [*Chapter 14*](B17287_14_Epub_AM.xhtml#_idTextAnchor429), *Building
    HTTP APIs and Real-Time Services*) makes it possible to use the application service
    interfaces in the Blazor WebAssembly application to consume Admin HTTP APIs on
    the server easily. The `Admin.HttpApi.Client` project depends on the `Admin.Application.Contracts`
    project (which internally depends on the `Domain.Shared` project) to be able to
    use the application service interfaces defined in that project.
  prefs: []
  type: TYPE_NORMAL
- en: Admin HTTP API
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `Admin.HttpApi.Host` project and its direct and indirect dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.9 – Admin HTTP API project dependencies'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.09_B17287.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.9 – Admin HTTP API project dependencies
  prefs: []
  type: TYPE_NORMAL
- en: The diagram is very similar to the diagram of the `EntityFrameworkCore`) layers
    to share the same core domain rules and the same **Database**. I will return to
    that topic in the *Dealing with multiple applications* section of [*Chapter 9*](B17287_09_Epub_AM.xhtml#_idTextAnchor300),
    *Understanding Domain-Driven Design*.
  prefs: []
  type: TYPE_NORMAL
- en: All the applications use the **Authentication Server** application as an SSO
    server, discussed in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication Server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `IdentityServer` project and has the dependencies shown in the following
    diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.10 – Authentication Server project dependencies'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.10_B17287.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.10 – Authentication Server project dependencies
  prefs: []
  type: TYPE_NORMAL
- en: The `IdentityServer` project has a reference to the `Web.Theme` project, which
    is the UI theme that is shared with the `EntityFrameworkCore` project to be able
    to use the `EntityFrameworkCore` project, we also have indirect references to
    the `Domain` and `Domain.Shared` projects.
  prefs: []
  type: TYPE_NORMAL
- en: The next section shows the dependencies of the final application in the solution.
  prefs: []
  type: TYPE_NORMAL
- en: Background Services
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `BackgroundServices` project has the dependencies shown in the following
    diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.11 – BackgroundServices project dependencies'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.11_B17287.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.11 – BackgroundServices project dependencies
  prefs: []
  type: TYPE_NORMAL
- en: The `BackgroundServices` project uses the `EntityFrameworkCore` project so that
    it can work with the **Database**. It can also use the **Domain** objects (entities,
    domain services) to perform background tasks.
  prefs: []
  type: TYPE_NORMAL
- en: We've explored all the projects in the solution. Now, we are ready to run them
    in our local development environment.
  prefs: []
  type: TYPE_NORMAL
- en: Running the solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you want to run the solution in your local environment, follow the steps
    in the next sections.
  prefs: []
  type: TYPE_NORMAL
- en: Cloning the GitHub repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First of all, you need to clone the GitHub repository on your local computer.
    The repository is located at [https://github.com/volosoft/eventhub](https://github.com/volosoft/eventhub)
    and can be cloned using the following command (which requires Git tools to be
    installed):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, navigate to [https://github.com/volosoft/eventhub](https://github.com/volosoft/eventhub),
    click the **Code** button, and then click **Download ZIP**, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.12 – Downloading the EventHub repository from GitHub'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.12_B17287.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.12 – Downloading the EventHub repository from GitHub
  prefs: []
  type: TYPE_NORMAL
- en: You should extract the ZIP file into an empty folder.
  prefs: []
  type: TYPE_NORMAL
- en: Running the infrastructure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The EventHub solution needs `docker-compose` files in the `etc/docker` folder.
    If you have the Docker installed on your computer, you can execute the `up.ps1`
    file in that folder to run these servers. If you can't use PowerShell on your
    computer, you can just open it in a text editor, copy the content, and execute
    it in a command-line terminal in the `etc/docker` directory. In the first run,
    it may take a few minutes to download the Docker images. If you don't want to
    use Docker, you need to install **Redis** and **PostgreSQL** servers on your computer.
  prefs: []
  type: TYPE_NORMAL
- en: Opening the solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The cloned or downloaded repository contains an `EventHub.sln` file in the root
    folder. If you want to develop or debug the solution, open it in Visual Studio
    or another .NET-compatible IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The solution has a console application named `EventHub.DbMigrator` that is shown
    in *Figure 4.5*. Run this application (for Visual Studio, right-click on it and
    choose **Set as the startup project**, then hit *Ctrl* + *F5*). It will create
    a database and seed some initial data.
  prefs: []
  type: TYPE_NORMAL
- en: Running the applications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are now ready to start the actual applications. You can run the projects
    in the following order (for Visual Studio, right-click on each project, select
    **Set as the startup project**, then hit *Ctrl* + *F5*):'
  prefs: []
  type: TYPE_NORMAL
- en: '`EventHub.IdentityServer`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EventHub.HttpApi.Host`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EventHub.Web`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EventHub.Admin.HttpApi.Host`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EventHub.Admin.Web`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EventHub.BackgroundServices`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To log in to one of the applications, use `admin` as the username and `1q2w3E*`
    as the password. Of course, you can create additional users on the UI.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that Visual Studio has some problems when you run multiple applications.
    Sometimes, a previously run application may stop. In this case, run the stopped
    applications again. However, Microsoft's `Tye` project makes it much easier to
    run multiple applications.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Tye project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you don't need to develop or debug the solution but just want to run it,
    you can use the Microsoft `Tye` project to run it without opening an IDE. `Tye`
    is a .NET global tool used to run such distributed applications easily with a
    simple configuration file. The EventHub solution was configured to run with `Tye`.
    All you need to do is to install `Tye` and run it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before using `Tye`, you still need to run the infrastructure (see the *Running
    the infrastructure* section), then create a database using the `EventHub.DbMigrator`
    application. If you haven''t done this before, open a command-line terminal in
    the `src/EventHub.DbMigrator` directory and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'After the database is ready, you can install `Tye` using the following command
    in a command-line terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'At the time of writing this book, the `Tye` project was still in preview. You
    may need to specify the latest preview version (you can find this on NuGet, at
    [https://www.nuget.org/packages/Microsoft.Tye](https://www.nuget.org/packages/Microsoft.Tye)).
    For example, see the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Check [https://github.com/dotnet/tye/blob/main/docs/getting_started.md](https://github.com/dotnet/tye/blob/main/docs/getting_started.md)
    to learn how to install `Tye`.
  prefs: []
  type: TYPE_NORMAL
- en: '`Tye` requires Docker to be installed on your computer. If you haven''t installed
    it yet, you also need to do so. After all the installation is done, you can run
    the following command to start the applications (it is suggested to close the
    IDE first if it is open):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'It will take some time on the first run. Once it is complete, you can open
    a browser and navigate to `http://127.0.0.1:8000` to open the **Tye Dashboard**,
    which you can see in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.13 – The Tye Dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.13_B17287.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.13 – The Tye Dashboard
  prefs: []
  type: TYPE_NORMAL
- en: The `web` is the **Main Website** of the system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Tye is a handy tool when you have a solution with multiple applications that
    need to run together. You can also configure `dotnet watch` for a project so that
    it is automatically reloaded (or hotloaded with .NET 6.0) when you change it.
    See Microsoft''s documentation to learn more about this: [https://github.com/dotnet/tye/tree/main/docs](https://github.com/dotnet/tye/tree/main/docs).'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: EventHub is a complete, real-world quality application built on ABP Framework.
    It is not just an example but also a live project published on [openeventhub.com](http://openeventhub.com)
    and actively developed on [https://github.com/volosoft/eventhub](https://github.com/volosoft/eventhub).
    Feel free to send bug reports, feature requests, and pull requests.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, my purpose was not to explain the code base in detail. I explained
    the overall architecture and structure of the solution so that you can understand
    how to explore the code base and run the solution. The next chapters will refer
    to that solution while introducing some ABP features and concepts.
  prefs: []
  type: TYPE_NORMAL
- en: EventHub is a good example of a system that was built with multiple applications.
    It is also a clear example to understand the purpose of ABP's layering model and
    how to reuse these layers in different applications.
  prefs: []
  type: TYPE_NORMAL
- en: You may not understand all the details of the EventHub solution now because
    we haven't explained the module system, database integrations, dynamic C# client
    proxies, and all the other ABP features yet. The chapters in the next part will
    explore the fundamental building blocks of ABP Framework and the ASP.NET Core
    framework so that you will start to understand all the details.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore the basic building blocks of ASP.NET Core
    and ABP Framework to understand how an application is configured and initialized.
  prefs: []
  type: TYPE_NORMAL
