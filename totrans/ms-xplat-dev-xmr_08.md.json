["```cs\n[Register(\"AppDelegate\")]\npublic partial class AppDelegate : global::Xamarin.Forms.Platform.iOS.FormsApplicationDelegate\n{\n    public override bool FinishedLaunching(UIApplication app, NSDictionary options)\n    {\n        global::Xamarin.Forms.Forms.Init();\n        LoadApplication(new App());\n\n        return base.FinishedLaunching(app, options);\n    }\n}\n```", "```cs\npublic App()\n{\n    // The root page of your application\n    MainPage = new ContentPage\n    {\n        Content = new StackLayout\n        {\n            VerticalOptions = LayoutOptions.Center,\n            Children = {\n                new Label {\n                    XAlign = TextAlignment.Center,\n                    Text = \"Welcome to Xamarin Forms!\"\n                }\n            }\n        }\n    };\n}\n```", "```cs\nvar tabbedPage = new TabbedPage();\n\ntabbedPage.Children.Add(new ContentPage\n{\n    Title = \"Recent\",\n    Content = new StackLayout\n    {\n        VerticalOptions = LayoutOptions.Center,\n        Children = {\n            new Label {\n                HorizontalTextAlignment = TextAlignment.Center,\n                Text = \"Recent uploads page\"\n            }\n        }\n    }\n});\n\n// ...\n// TODO: Add the other tab nav items\n\nMainPage = tabbedPage;\n```", "```cs\n<TabbedPage \n\n  x:Class=\"Xamarin.Master.TravelTrace.Views.MainTabView\">\n  <ContentPage Title=\"Recent\" Icon=\"social.png\">\n    <StackLayout VerticalOptions=\"Center\">\n      <Label Text=\"Recent uploads page\" HorizontalTextAlignment=\"Center\"></Label>\n    </StackLayout>\n  </ContentPage>\n  <ContentPage Title=\"Local\" Icon=\"map.png\">\n    <StackLayout VerticalOptions=\"Center\">\n      <Label Text=\"Local landmarks page\" HorizontalTextAlignment=\"Center\"></Label>\n    </StackLayout>\n  </ContentPage>\n  <ContentPage Title=\"Friends\" Icon=\"people.png\">\n    <StackLayout VerticalOptions=\"Center\">\n      <Label Text=\"Friends related page\" HorizontalTextAlignment=\"Center\"></Label>\n    </StackLayout>\n  </ContentPage>\n</TabbedPage>\n```", "```cs\npublic NavigationMenuView(Page root)\n{\n    Icon = \"toggle.png\";\n\n    InitializeComponent();\n\n    ListViewMenu.ItemsSource = m_MenuItems = new List<Tuple<string, string, string>\n    {\n        new Tuple<string, string, string>(\"Profile\", \"profile\", \"profileicon.png\"),\n        new Tuple<string, string, string>(\"Map\", \"map\", \"mapicon.png\"),\n        new Tuple<string, string, string>(\"Settings\", \"settings\", \"settingsicon.png\")\n    };\n\n    ListViewMenu.SelectedItem = m_MenuItems[0];\n\n    ListViewMenu.ItemSelected += async (sender, e) => \n    {\n        if(ListViewMenu.SelectedItem == null)\n            return;\n\n        // TODO: Implement the navigation strategy \n        Debug.WriteLine(\"Item selected {0}\", \n          ((Tuple<string, string, string>)e.SelectedItem).Item2);\n    };\n}\n```", "```cs\nvar masterDetailPage = new MasterDetailPage();\n\n// Can select any of the behaviors: \n// Default, Popover, Split, SplitOnLandscape, SplitOnPortrait\nmasterDetailPage.MasterBehavior = MasterBehavior.Popover;\nmasterDetailPage.Master = new NavigationMenuView(masterDetailPage);\nmasterDetailPage.Detail = new NavigationPage(new ContentPage\n{\n    Title = \"Detail Page\",\n    Content = new StackLayout\n    {\n        VerticalOptions = LayoutOptions.Center,\n        Children = {\n            new Label {\n                HorizontalTextAlignment = TextAlignment.Center,\n                Text = \"Here is the Detail\"\n            }\n        }\n    }\n});\n\nMainPage = masterDetailPage;\n```", "```cs\n<CarouselPage \n\n  x:Class=\"Xamarin.Master.TravelTrace.Views.GuidesView\">\n  <ContentPage Title=\"First Peer\">\n    <StackLayout  HeightRequest=\"50\" VerticalOptions=\"Center\" BackgroundColor=\"Silver\">\n      <Label Text=\"Content for the First Peer\" HorizontalTextAlignment=\"Center\"></Label>\n    </StackLayout>\n  </ContentPage>\n  <ContentPage Title=\"Second Per\">\n    <StackLayout HeightRequest=\"50\" VerticalOptions=\"Center\" BackgroundColor=\"Gray\">\n      <Label Text=\"Content for the Second Peer\" HorizontalTextAlignment=\"Center\"></Label>\n    </StackLayout>\n  </ContentPage>\n  <ContentPage Title=\"Third Peer\">\n    <StackLayout HeightRequest=\"50\" VerticalOptions=\"Center\" BackgroundColor=\"Silver\">\n      <Label Text=\"Content for the Third Peer\" HorizontalTextAlignment=\"Center\"></Label>\n    </StackLayout>\n  </ContentPage>\n</CarouselPage>\n```", "```cs\n  <ScrollView>\n    <StackLayout x:Name=\"StackLayout\">\n      <Grid Padding=\"10\" ColumnSpacing=\"4\">…</Grid>\n      <Grid Padding=\"10\" ColumnSpacing=\"4\">…</Grid>\n      <!-- Omitted for clarity -->\n    </StackLayout>\n  </ScrollView>\n```", "```cs\n<Grid Padding=\"10\" ColumnSpacing=\"4\">\n  <Grid.RowDefinitions>\n    <RowDefinition Height=\"Auto\" />\n    <RowDefinition Height=\"40\" />\n  </Grid.RowDefinitions>\n  <Grid.ColumnDefinitions>\n    <ColumnDefinition Width=\"*\" />\n    <ColumnDefinition Width=\"60\" />\n  </Grid.ColumnDefinitions>\n  <Image Grid.RowSpan=\"2\" Grid.Column=\"1\" Source=\"mapicon.png\" HeightRequest=\"40\" WidthRequest=\"40\"/>\n  <Label Grid.Row=\"0\" Grid.Column=\"0\" Text=\"Item Title\" FontSize=\"16\"/>\n  <Label Grid.Row=\"1\" Grid.Column=\"0\" Text=\"{Binding LongTextPlaceholder}\" FontSize=\"14\" />\n</Grid>\n```", "```cs\nrelativeLayout.Children.Add(image,\n    Constraint.RelativeToParent(parent => parent.Width/2 - 50),\n    Constraint.RelativeToParent(parent => parent.Height/2 - 50),\n    Constraint.Constant(100), Constraint.Constant(100));\n```", "```cs\nrelativeLayout.Children.Add(label,\n    Constraint.RelativeToParent(parent => parent.Width/2 - 100),\n    Constraint.RelativeToView(image, (parent, view) =>\n    {\n        // Here view is referring to the other relative control\n        return view.Y + view.Height + 10;\n    }),\n    Constraint.Constant(200),\n    Constraint.Constant(100));\n```", "```cs\n<RelativeLayout x:Name=\"relativeLayout\">\n  <Image x:Name=\"Image\" Source=\"icon.png\" HeightRequest=\"100\" WidthRequest=\"100\"\n          RelativeLayout.XConstraint=\n          \"{ConstraintExpression Type=RelativeToParent, \n                                  Property=Width, \n                                  Factor=0.5, \n                                  Constant=-50}\"\n          RelativeLayout.YConstraint=\n          \"{ConstraintExpression Type=RelativeToParent, \n                                  Property=Height, \n                                  Factor=0.5, \n                                  Constant=-50}\" />\n  <Label Text=\"Hello Relative Layout!\" HeightRequest=\"100\" WidthRequest=\"200\" HorizontalTextAlignment=\"Center\"\n          RelativeLayout.XConstraint=\n          \"{ConstraintExpression Type=RelativeToParent, \n                                  Property=Width, \n                                  Factor=0.5, \n                                  Constant=-100}\"\n          RelativeLayout.YConstraint=\n          \"{ConstraintExpression Type=RelativeToView,\n                                  ElementName=Image,\n                                  Property=Y, \n                                  Constant=110}\"/>\n</RelativeLayout>\n```", "```cs\nRecentUploadsList.ItemsSource = new List<Tuple<string, string, string>>\n{\n    new Tuple<string, string, string>(\"Sarajevo trip on 04.10\", longText, \"profileicon.png\"),\n    new Tuple<string, string, string>(\"Istanbul trip on 23.09\", longText, \"mapicon.png\"),\n    new Tuple<string, string, string>(\"Rome trip on 12.09\", longText, \"settingsicon.png\"),\n    new Tuple<string, string, string>(\"Sarajevo trip on 04.10\", longText, \"profileicon.png\"),\n    new Tuple<string, string, string>(\"Istanbul trip on 23.09\", longText, \"mapicon.png\"),\n    new Tuple<string, string, string>(\"Rome trip on 12.09\", longText, \"settingsicon.png\"),\n    new Tuple<string, string, string>(\"Sarajevo trip on 04.10\", longText, \"profileicon.png\"),\n    new Tuple<string, string, string>(\"Istanbul trip on 23.09\", longText, \"mapicon.png\"),\n    new Tuple<string, string, string>(\"Rome trip on 12.09\", longText, \"settingsicon.png\")\n};\n```", "```cs\n<ListView BackgroundColor=\"Gray\" SeparatorColor=\"Black\" HasUnevenRows=\"true\" x:Name=\"RecentUploadsList\" >\n  <ListView.Header>\n    <Label TranslationX=\"10\" Text=\"Recent Uploads\"></Label>\n  </ListView.Header>\n  <!--<ListView.ItemTemplate> TODO: Insert DataTemplate </ListView.ItemTemplate>-->\n</ListView>\n```", "```cs\n<ListView.ItemTemplate>\n  <DataTemplate>\n    <ViewCell>\n        <Grid Padding=\"10\" ColumnSpacing=\"4\">\n          <Grid.RowDefinitions>\n            <RowDefinition Height=\"Auto\" />\n            <RowDefinition Height=\"40\" />\n          </Grid.RowDefinitions>\n          <Grid.ColumnDefinitions>\n            <ColumnDefinition Width=\"*\" />\n            <ColumnDefinition Width=\"60\" />\n          </Grid.ColumnDefinitions>\n          <Image Grid.RowSpan=\"2\" Grid.Column=\"1\" Source=\"{Binding Item3}\" \n                  HeightRequest=\"40\" WidthRequest=\"60\"/>\n          <Label Grid.Row=\"0\" Grid.Column=\"0\" \n                  Text=\"{Binding Item1}\" FontSize=\"16\" />\n          <Label Grid.Row=\"1\" Grid.Column=\"0\" \n                  Text=\"{Binding Item2}\" FontSize=\"14\" />\n        </Grid>\n    </ViewCell>\n  </DataTemplate>\n</ListView.ItemTemplate>\n```", "```cs\n<ViewCell.ContextActions>\n  <MenuItem Text=\"Favourite\" Clicked=\"OnFavouriteClicked\" CommandParameter=\"{Binding .}\">\n  </MenuItem>\n  <MenuItem Text=\"Remove\" IsDestructive=\"True\" Clicked=\"OnRemoveClicked\" CommandParameter=\"{Binding .}\">\n  </MenuItem>\n</ViewCell.ContextActions>\n```", "```cs\n<TableView Intent=\"Settings\" HasUnevenRows=\"True\">\n  <TableRoot>\n    <TableSection Title=\"Location\">\n      <ViewCell>\n        <StackLayout Orientation=\"Vertical\" Padding=\"10\">\n          <StackLayout Orientation=\"Horizontal\">\n            <Label TextColor=\"White\" FontSize=\"24\"\n                   VerticalTextAlignment=\"Center\" \n                   HorizontalOptions=\"StartAndExpand\" \n                   Text=\"Use Location\" />\n            <Switch IsToggled=\"True\"></Switch>\n          </StackLayout>\n          <Label TextColor=\"Silver\" FontSize=\"20\"\n                 VerticalTextAlignment=\"Center\" \n                 HorizontalOptions=\"StartAndExpand\"  \n                 Text=\"Use location to tag photos and notes. Location can be used for notifications as well\">\n          </Label>\n        </StackLayout>\n      </ViewCell>\n      <ViewCell>\n        <StackLayout Orientation=\"Vertical\" Padding=\"10\">\n          <StackLayout Orientation=\"Horizontal\">\n            <Label TextColor=\"White\" FontSize=\"24\"\n                   VerticalTextAlignment=\"Center\" \n                   HorizontalOptions=\"StartAndExpand\" \n                   Text=\"Create Geofences\" />\n            <Switch IsToggled=\"True\"></Switch>\n          </StackLayout>\n          <Label TextColor=\"Silver\" FontSize=\"20\"\n                  VerticalTextAlignment=\"Center\" \n                  HorizontalOptions=\"StartAndExpand\" \n                  Text=\"Create geofences to give notifications about landmarks.\">\n          </Label>\n        </StackLayout>\n      </ViewCell>\n    </TableSection>\n    <!-- Additional sections were removed for simplicity -->\n  </TableRoot>\n</TableView>\n```", "```cs\n<ContentPage.Resources>\n  <ResourceDictionary>\n    <Style TargetType=\"Label\">\n      <Setter Property=\"HorizontalOptions\" Value=\"StartAndExpand\" />\n      <Setter Property=\"VerticalTextAlignment\" Value=\"Center\" />\n    </Style>\n  </ResourceDictionary>\n</ContentPage.Resources>\n```", "```cs\n<Style x:Key=\"SettingLabel\" TargetType=\"Label\">\n  <Setter Property=\"FontSize\" Value=\"24\"></Setter>\n  <Setter Property=\"TextColor\" Value=\"White\"></Setter>\n</Style>\n<Style x:Key=\"SettingDescription\" TargetType=\"Label\">\n  <Setter Property=\"FontSize\" Value=\"20\"></Setter>\n  <Setter Property=\"TextColor\" Value=\"Silver\"></Setter>\n</Style>\n```", "```cs\n<ContentPage.Resources>\n  <ResourceDictionary>\n    <Style x:Key=\"BaseLabelStyle\" TargetType=\"Label\">\n      <Setter Property=\"HorizontalOptions\" Value=\"StartAndExpand\" />\n      <Setter Property=\"VerticalTextAlignment\" Value=\"Center\" />\n    </Style>\n <Style x:Key=\"SettingLabel\" BaseResourceKey=\"BaseLabelStyle\" TargetType=\"Label\">\n      <Setter Property=\"FontSize\" Value=\"24\"></Setter>\n      <Setter Property=\"TextColor\" Value=\"White\"></Setter>\n    </Style>\n <Style x:Key=\"SettingDescription\" BasedOn=\"{StaticResource BaseLabelStyle}\" TargetType=\"Label\">\n      <Setter Property=\"FontSize\" Value=\"20\"></Setter>\n      <Setter Property=\"TextColor\" Value=\"Silver\"></Setter>\n    </Style>\n  </ResourceDictionary>\n</ContentPage.Resources>\n```", "```cs\n<Switch x:Name=\"SwitchUseGeofences\" IsToggled=\"True\"\n              IsEnabled=\"{Binding Source={x:Reference SwitchUserLocation}, Path=IsToggled}\">\n```", "```cs\n<ViewCell>\n  <StackLayout Orientation=\"Vertical\" Padding=\"10\">\n    <StackLayout Orientation=\"Horizontal\">\n      <Label Text=\"Create Geofences\" Style=\"{StaticResource SettingLabel}\" />\n      <Switch x:Name=\"SwitchUseGeofences\" IsToggled=\"True\"\n              IsEnabled=\"{Binding Source={x:Reference SwitchUserLocation}, Path=IsToggled}\">\n        <Switch.Triggers>\n <DataTrigger TargetType=\"Switch\" Binding=\"{Binding Source={x:Reference SwitchUserLocation}, Path=IsToggled}\" Value=\"True\">\n <Setter Property=\"IsEnabled\" Value=\"False\"></Setter>\n </DataTrigger>\n        </Switch.Triggers>\n      </Switch>\n    </StackLayout>\n    <Label Text=\"Create geofences to give notifications about landmarks.\"\n            Style=\"{StaticResource SettingDescription}\">\n      <Label.Triggers>\n <DataTrigger TargetType=\"Label\" Binding=\"{Binding Source={x:Reference SwitchUserLocation}, Path=IsToggled}\" Value=\"False\">\n <Setter Property=\"IsEnabled\" Value=\"False\"></Setter>\n <Setter Property=\"TextColor\" Value=\"Transparent\"></Setter>\n </DataTrigger>\n </Label.Triggers>\n    </Label>\n  </StackLayout>\n</ViewCell>\n```", "```cs\npublic class WarningTriggerAction : TriggerAction<Switch>\n{\n    public string Message { get; set; }\n    protected override void Invoke(Switch sender)\n    {\n        if(!sender.IsToggled) \n            DependencyService.Get<INotificationService>()\n                .Notify(Message);\n    }\n}\n```", "```cs\n<Switch x:Name=\"SwitchUserLocation\" IsToggled=\"True\">\n  <Switch.Triggers>\n    <EventTrigger Event=\"Toggled\">\n      <components:WarningTriggerAction Message=\"Disabling this setting will disable other values\" />\n    </EventTrigger>\n  </Switch.Triggers>\n</Switch>\n```", "```cs\n<Style x:Key=\"SectionToggleSwitch\" TargetType=\"Switch\">\n  <Style.Triggers>\n    <EventTrigger Event=\"Toggled\">\n      <components:WarningTriggerAction Message=\"Disabling this setting will disable other values\" />\n    </EventTrigger>\n  </Style.Triggers>\n</Style>\n```", "```cs\npublic class SectionSwitchAlertBehavior : Behavior<Switch>\n{\n    public string Message { get; set; }\n\n    protected override void OnAttachedTo(Switch control)\n    {\n        control.Toggled += ControlOnToggled;\n\n        base.OnAttachedTo(control);\n    }\n\n    protected override void OnDetachingFrom(Switch control)\n    {\n        control.Toggled -= ControlOnToggled;\n\n        base.OnDetachingFrom(control);\n    }\n    private void ControlOnToggled(object sender, ToggledEventArgs toggledEventArgs)\n    {\n        if (!toggledEventArgs.Value && !string.IsNullOrWhiteSpace(Message))\n        {\n            DependencyService.Get<INotificationService>().Notify(Message);\n        }\n    }\n}\n```", "```cs\n<Style x:Key=\"SectionToggleSwitch\" TargetType=\"Switch\">\n  <Style.Behaviors>\n <components:SectionSwitchAlertBehavior Message=\"Disabling this setting will disable other values\" />\n  </Style.Behaviors>\n</Style>\n```", "```cs\nMessagingCenter.Subscribe<MyViewModel, MyMessageContract>(this, \"MyMessageName\",\n    (sender, data) =>\n    {\n        // TODO: Use the provided data and the sender\n    });\n\n// or\n//MessagingCenter.Subscribe(this, \"MyMessageName\", (sender) => { }, myViewModelInstance);\n```", "```cs\nMessagingCenter.Send(this, \"MyMessageName\", new MyMessageContract\n{\n    // TODO: Pass on the required data.\n});\n```", "```cs\npublic interface INotificationService\n{\n    void Notify(string message);\n}\n```", "```cs\n[assembly:Xamarin.Forms.Dependency(typeof(NotificationService))]\nnamespace Xamarin.Master.TravelTrace.Droid.Modules\n{\n    public class NotificationService : INotificationService\n    {\n        public void Notify(string message)\n        {\n            var toast = Toast.MakeText(Application.Context, message, ToastLength.Long);\n            toast.Show();\n        }\n    }\n}\n```", "```cs\n[assembly: Xamarin.Forms.Dependency(typeof(NotificationService))]\nnamespace Xamarin.Master.TravelTrace.iOS.Modules\n{\n    public class NotificationService : INotificationService\n    {\n        public void Notify(string message)\n        {\n            //\n            // This will not fire for the foreground application\n            //UILocalNotification localNotification = new \n            // UILocalNotification();\n            // localNotification.FireDate = \n            // NSDate.Now.AddSeconds(2);\n            //localNotification.AlertBody = message;\n            //localNotification.TimeZone = \n            // NSTimeZone.SystemTimeZone;\n            // UIApplication.SharedApplication\n            // .PresentLocalNotificationNow(localNotification);\n            // UIApplication.SharedApplication\n            // .ScheduleLocalNotification(localNotification);\n\n            //Create Alert\n            var okAlertController = UIAlertController.Create (\"Notification\", message, UIAlertControllerStyle.Alert);\n\n            //Add Action\n            okAlertController.AddAction(UIAlertAction.Create(\"OK\", UIAlertActionStyle.Default, null));\n\n            if (UIApplication.SharedApplication.KeyWindow != null)\n                UIApplication.SharedApplication.KeyWindow.RootViewController.PresentViewController(okAlertController, true, null);\n        }\n    }\n}\n```", "```cs\n[assembly: Xamarin.Forms.Dependency(typeof(NotificationService))]\nnamespace Xamarin.Master.TravelTrace.WinPhone.Modules\n{\n    public class NotificationService : INotificationService\n    {\n        public void Notify(string message)\n        {\n            MessageBox.Show(message);\n        }\n    }\n}\n```", "```cs\nDependencyService.Get<INotificationService>().Notify(\"Hello Xamarin.Forms!\");\n```", "```cs\nXamarin.Forms.DependencyService.Register<INotificationService, NotificationService>();\n```", "```cs\npublic class NotificationService\n{\n    public void Notify(string message)\n    {\n        if (!string.IsNullOrWhiteSpace(message))\n#if __IOS__\n    var okAlertController = UIAlertController.Create(\"Notification\", message, UIAlertControllerStyle.Alert);\n\n    okAlertController.AddAction(UIAlertAction.Create(\"OK\", UIAlertActionStyle.Default, null));\n\n    if (UIApplication.SharedApplication.KeyWindow != null)\n        UIApplication.SharedApplication.KeyWindow.RootViewController\n            .PresentViewController(okAlertController, true, null);\n#elif __ANDROID__\n    var toast = Toast.MakeText(Application.Context, message, ToastLength.Long);\n    toast.Show();\n#elif WINDOWS_PHONE\n            MessageBox.Show(message);\n#endif\n    }\n}\n```", "```cs\nvar mylabel = new Label\n{\n    Text = \"Text for my Title\",\n    Style = Device.Styles.TitleStyle\n};\n```", "```cs\n<Label x:Name=\"MyLabel\" Text=\"Text for my Title\" Style=\"{DynamicResource TitleStyle}\" />\n```", "```cs\nvar mylabel = new Label {Text = \"Text for my Title\"};\n\n// A Large font size, for titles or other important text elements\nmylabel.FontSize = Device.GetNamedSize(NamedSize.Large, typeof (Label));\n```", "```cs\n<Label x:Name=\"MyLabel\" Text=\"Text for my Title\" FontSize=\"Large\" />\n```", "```cs\nvar mylabel = new Label {Text = \"Text for my Title\"};\nmylabel.FontSize = Device.OnPlatform<double>(\n     Android: 24, WinPhone: 24, iOS: 18);\n```", "```cs\n<Label x:Name=\"MyLabel\" Text=\"Text for my Title\">\n  <Label.FontSize>\n    <OnPlatform x:TypeArguments=\"x:Double\" Android=\"24\" WinPhone=\"24\" iOS=\"16\"/>\n  </Label.FontSize>\n</Label>\n```"]