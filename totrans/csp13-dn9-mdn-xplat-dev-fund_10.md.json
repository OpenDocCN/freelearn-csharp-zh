["```cs\n<PackageReference Include=\"EntityFramework\" Version=\"6.5.1\" /> \n```", "```cs\n    sqlite3 \n    ```", "```cs\n    SQLite version 3.42.0 2023-05-16 12:36:15\n    Enter \".help\" for usage hints.\n    Connected to a transient in-memory database.\n    Use \".open FILENAME\" to reopen on a persistent database.\n    sqlite> \n    ```", "```cs\nsudo apt-get install sqlite3 \n```", "```cs\n    sqlite3 Northwind.db -init Northwind4SQLite.sql \n    ```", "```cs\n    -- Loading resources from Northwind4SQLite.sql\n    SQLite version 3.42.0 2023-05-16 12:36:15\n    Enter \".help\" for usage hints.\n    sqlite> \n    ```", "```cs\n    <ItemGroup>\n      <None Update=\"Northwind.db\">\n        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\n      </None>\n    </ItemGroup> \n    ```", "```cs\n    <ItemGroup>\n      <Using Include=\"System.Console\" Static=\"true\" />\n    </ItemGroup>\n    <ItemGroup>\n      <PackageReference Version=\"9.0.0\"\n        Include=\"Microsoft.EntityFrameworkCore.Sqlite\" />\n    </ItemGroup> \n    ```", "```cs\n    using Microsoft.EntityFrameworkCore; // To use DbContext and so on.\n    namespace Northwind.EntityModels;\n    // This manages interactions with the Northwind database.\n    public class NorthwindDb : DbContext\n    {\n      protected override void OnConfiguring(\n        DbContextOptionsBuilder optionsBuilder)\n      {\n        string databaseFile = \"Northwind.db\";\n        string path = Path.Combine(\n          Environment.CurrentDirectory, databaseFile);\n        string connectionString = $\"Data Source={path}\";\n        WriteLine($\"Connection: {connectionString}\");\n        optionsBuilder.UseSqlite(connectionString);\n      }\n    } \n    ```", "```cs\n    protected internal virtual void OnConfiguring(\n    DbContextOptionsBuilder optionsBuilder)\n    {\n    } \n    ```", "```cs\n    using Northwind.EntityModels; // To use Northwind.\n    using NorthwindDb db = new();\n    WriteLine($\"Provider: {db.Database.ProviderName}\");\n    // Disposes the database context. \n    ```", "```cs\n    Connection: Data Source=C:\\cs13net9\\Chapter10\\WorkingWithEFCore\\bin\\Debug\\net9.0\\Northwind.db\n    Provider: Microsoft.EntityFrameworkCore.Sqlite \n    ```", "```cs\nCREATE TABLE Products (\n    ProductId       INTEGER       PRIMARY KEY,\n **ProductName     NVARCHAR (****40****)** **NOT****NULL****,**\n    SupplierId      \"INT\",\n    CategoryId      \"INT\",\n    QuantityPerUnit NVARCHAR (20),\n    UnitPrice       \"MONEY\"       CONSTRAINT DF_Products_UnitPrice DEFAULT (0),\n    UnitsInStock    \"SMALLINT\"    CONSTRAINT DF_Products_UnitsInStock DEFAULT (0),\n    UnitsOnOrder    \"SMALLINT\"    CONSTRAINT DF_Products_UnitsOnOrder DEFAULT (0),\n    ReorderLevel    \"SMALLINT\"    CONSTRAINT DF_Products_ReorderLevel DEFAULT (0),\n    Discontinued    \"BIT\"         NOT NULL\n                                  CONSTRAINT DF_Products_Discontinued DEFAULT (0),\n    CONSTRAINT FK_Products_Categories FOREIGN KEY (\n        CategoryId\n    )\n    REFERENCES Categories (CategoryId),\n    CONSTRAINT FK_Products_Suppliers FOREIGN KEY (\n        SupplierId\n    )\n    REFERENCES Suppliers (SupplierId),\n    CONSTRAINT CK_Products_UnitPrice CHECK (UnitPrice >= 0),\n    CONSTRAINT CK_ReorderLevel CHECK (ReorderLevel >= 0),\n    CONSTRAINT CK_UnitsInStock CHECK (UnitsInStock >= 0),\n    CONSTRAINT CK_UnitsOnOrder CHECK (UnitsOnOrder >= 0)\n); \n```", "```cs\n[Required]\n[StringLength(40)]\npublic string ProductName { get; set; } \n```", "```cs\n[Column(TypeName = \"money\")]\npublic decimal? UnitPrice { get; set; } \n```", "```cs\nmodelBuilder.Entity<Product>()\n  .Property(product => product.ProductName)\n  .IsRequired()\n  .HasMaxLength(40); \n```", "```cs\nmodelBuilder.Entity<Product>()\n  .HasData(new Product\n  {\n    ProductId = 1,\n    ProductName = \"Chai\",\n    UnitPrice = 8.99M\n  }); \n```", "```cs\n    namespace Northwind.EntityModels;\n    public class Category\n    {\n    } \n    ```", "```cs\n    namespace Northwind.EntityModels;\n    public class Product\n    {\n    } \n    ```", "```cs\n    <ItemGroup>\n      <ProjectReference Include=\"..\\Northwind.EntityModels\\\n    Northwind.EntityModels.csproj\" />\n    </ItemGroup> \n    ```", "```cs\nCREATE TABLE Categories (\n  CategoryId   INTEGER       PRIMARY KEY,\n  CategoryName NVARCHAR (15) NOT NULL,\n  Description  \"NTEXT\",\n  Picture      \"IMAGE\"\n); \n```", "```cs\n    **using** **System.ComponentModel.DataAnnotations.Schema;** **// To use [Column].**\n    namespace Northwind.EntityModels;\n    public class Category\n    {\n    **// These properties map to columns in the database.**\n    **public****int** **CategoryId {** **get****;** **set****; }** **// The primary key.**\n    **public****string** **CategoryName {** **get****;** **set****; } =** **null****!;**\n     **[****Column(TypeName =** **\"ntext\"****)****]**\n    **public****string****? Description {** **get****;** **set****; }**\n    **// Defines a navigation property for related rows.**\n    **public****virtual** **ICollection<Product> Products {** **get****;** **set****; }**\n    **// To enable developers to add products to a Category, we must**\n    **// initialize the navigation property to an empty collection.**\n    **// This also avoids an exception if we get a member like Count.**\n     **=** **new** **HashSet<Product>();**\n    } \n    ```", "```cs\n    **using** **System.ComponentModel.DataAnnotations;** **// To use [Required].**\n    **using** **System.ComponentModel.DataAnnotations.Schema;** **// To use [Column].**\n    namespace Northwind.EntityModels;\n    public class Product\n    {\n    **public****int** **ProductId {** **get****;** **set****; }** **// The primary key.**\n     **[****Required****]**\n     **[****StringLength(40)****]**\n    **public****string** **ProductName {** **get****;** **set****; } =** **null****!;**\n    **// Property name is different from the column name.**\n     **[****Column(****\"UnitPrice\"****, TypeName =** **\"money\"****)****]**\n    **public****decimal****? Cost {** **get****;** **set****; }**\n     **[****Column(****\"UnitsInStock\"****)****]**\n    **public****short****? Stock {** **get****;** **set****; }**\n    **public****bool** **Discontinued {** **get****;** **set****; }**\n    **// These two properties define the foreign key relationship**\n    **// to the Categories table.**\n    **public****int** **CategoryId {** **get****;** **set****; }**\n    **public****virtual** **Category Category {** **get****;** **set****; } =** **null****!;**\n    } \n    ```", "```cs\n    public class NorthwindDb : DbContext\n    {\n    **// These two properties map to tables in the database.**\n    **public****DbSet****<****Category****>? Categories** **{** **get****;** **set****; }**\n    **public****DbSet****<****Product****>? Products** **{** **get****;** **set****; }**\n      protected override void OnConfiguring(\n        DbContextOptionsBuilder optionsBuilder)\n      {\n        ...\n      }\n    **protected****override****void****OnModelCreating****(**\n     **ModelBuilder modelBuilder****)**\n     **{**\n    **// Example of using Fluent API instead of attributes**\n    **// to limit the length of a category name to 15.**\n     **modelBuilder.Entity<Category>()**\n     **.Property(category => category.CategoryName)**\n     **.IsRequired()** **// NOT NULL**\n     **.HasMaxLength(****15****);**\n    **// Some SQLite-specific configuration.**\n    **if** **(Database.ProviderName?.Contains(****\"Sqlite\"****) ??** **false****)**\n     **{**\n    **// To \"fix\" the lack of decimal support in SQLite.**\n     **modelBuilder.Entity<Product>()**\n     **.Property(product => product.Cost)**\n     **.HasConversion<****double****>();**\n     **}**\n     **}**\n    } \n    ```", "```cs\n    dotnet tool list --global \n    ```", "```cs\n    Package Id      Version     Commands\n    -------------------------------------\n    dotnet-ef       7.0.0       dotnet-ef \n    ```", "```cs\n    dotnet tool update --global dotnet-ef \n    ```", "```cs\n    dotnet tool install --global dotnet-ef \n    ```", "```cs\ndotnet tool update --global dotnet-ef --version 9.0-* \n```", "```cs\ndotnet tool uninstall --global dotnet-ef \n```", "```cs\n    <ItemGroup>\n     **<PackageReference Version=****\"9.0.0\"**\n     **Include=****\"Microsoft.EntityFrameworkCore.Design\"****>**\n     **<PrivateAssets>all</PrivateAssets>**\n     **<IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>**\n     **</PackageReference>**\n      <PackageReference Version=\"9.0.0\"\n                        Include=\"Microsoft.EntityFrameworkCore.Sqlite\" />\n    </ItemGroup> \n    ```", "```cs\n    dotnet ef dbcontext scaffold \"Data Source=Northwind.db\" Microsoft.EntityFrameworkCore.Sqlite --table Categories --table Products --output-dir AutoGenModels --namespace WorkingWithEFCore.AutoGen --data-annotations --context NorthwindDb \n    ```", "```cs\n    Build started...\n    Build succeeded.\n    To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148\\. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.\n    Skipping foreign key with identity '0' on table 'Products' since principal table 'Suppliers' was not found in the model. This usually happens when the principal table was not included in the selection set. \n    ```", "```cs\n    namespace WorkingWithEFCore.AutoGen;\n    [Index(\"CategoryName\", Name = \"CategoryName\")]\n    public partial class Category\n    {\n      [Key]\n      public int CategoryId { get; set; }\n      [Column(TypeName = \"nvarchar (15)\")]\n      public string CategoryName { get; set; } = null!;\n      [Column(TypeName = \"ntext\")]\n      public string? Description { get; set; }\n      [Column(TypeName = \"image\")]\n      public byte[]? Picture { get; set; }\n      [InverseProperty(\"Category\")]\n      public virtual ICollection<Product> Products { get; set; }\n        = new List<Product>();\n    } \n    ```", "```cs\n    using Microsoft.EntityFrameworkCore;\n    namespace WorkingWithEFCore.AutoGen;\n    public partial class NorthwindDb : DbContext\n    {\n      public NorthwindDb()\n      {\n      }\n      public NorthwindDb(DbContextOptions<NorthwindDb> options)\n          : base(options)\n      {\n      }\n      public virtual DbSet<Category> Categories { get; set; }\n      public virtual DbSet<Product> Products { get; set; }\n      protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    #warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148\\. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.\n          => optionsBuilder.UseSqlite(\"Data Source=Northwind.db\");\n      protected override void OnModelCreating(ModelBuilder modelBuilder)\n      {\n        modelBuilder.Entity<Category>(entity =>\n        {\n          entity.Property(e => e.CategoryId).ValueGeneratedNever();\n        });\n        modelBuilder.Entity<Product>(entity =>\n        {\n          entity.Property(e => e.ProductId).ValueGeneratedNever();\n          entity.Property(e => e.Discontinued).HasDefaultValueSql(\"0\");\n          entity.Property(e => e.ReorderLevel).HasDefaultValueSql(\"0\");\n          entity.Property(e => e.UnitPrice).HasDefaultValueSql(\"0\");\n          entity.Property(e => e.UnitsInStock).HasDefaultValueSql(\"0\");\n          entity.Property(e => e.UnitsOnOrder).HasDefaultValueSql(\"0\");\n        });\n        OnModelCreatingPartial(modelBuilder);\n      }\n      partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n    } \n    ```", "```cs\nprotected override void ConfigureConventions(\n  ModelConfigurationBuilder configurationBuilder)\n{\n  configurationBuilder.Properties<string>().HaveMaxLength(50);\n  configurationBuilder.IgnoreAny<IDoNotMap>();\n} \n```", "```cs\n    partial class Program\n    {\n      private static void ConfigureConsole(string culture = \"en-US\",\n        bool useComputerCulture = false)\n      {\n        // To enable Unicode characters like Euro symbol in the console.\n        OutputEncoding = System.Text.Encoding.UTF8;\n        if (!useComputerCulture)\n        {\n          CultureInfo.CurrentCulture = CultureInfo.GetCultureInfo(culture);\n        }\n        WriteLine($\"CurrentCulture: {CultureInfo.CurrentCulture.DisplayName}\");\n      }\n      private static void WriteLineInColor(string text, ConsoleColor color)\n      {\n        ConsoleColor previousColor = ForegroundColor;\n        ForegroundColor = color;\n        WriteLine(text);\n        ForegroundColor = previousColor;\n      }\n      private static void SectionTitle(string title)\n      {\n        WriteLineInColor($\"*** {title} ***\", ConsoleColor.DarkYellow);\n      }\n      private static void Fail(string message)\n      {\n        WriteLineInColor($\"Fail > {message}\", ConsoleColor.Red);\n      }\n      private static void Info(string message)\n      {\n        WriteLineInColor($\"Info > {message}\", ConsoleColor.Cyan);\n      }\n    } \n    ```", "```cs\n        using Microsoft.EntityFrameworkCore; // To use Include method.\n        using Northwind.EntityModels; // To use Northwind, Category, Product.\n        partial class Program\n        {\n          private static void QueryingCategories()\n          {\n            using NorthwindDb db = new();\n            SectionTitle(\"Categories and how many products they have\");\n            // A query to get all categories and their related products.\n            // This is a query definition. Nothing has executed against the database.\n            IQueryable<Category>? categories = db.Categories?\n              .Include(c => c.Products);\n            // You could call any of the following LINQ methods and nothing will be executed against the database:\n            // Where, GroupBy, Select, SelectMany, OfType, OrderBy, ThenBy, Join, GroupJoin, Take, Skip, Reverse.\n            // Usually, methods that return IEnumerable or IQueryable support deferred execution.\n            // Usually, methods that return a single value do not support deferred execution.\n            if (categories is null || !categories.Any())\n            {\n              Fail(\"No categories found.\");\n              return;\n            }\n            // Enumerating the query converts it to SQL and executes it against the database.\n            // Execute query and enumerate results.\n            foreach (Category c in categories)\n            {\n              WriteLine($\"{c.CategoryName} has {c.Products.Count} products.\");\n            }\n          }\n        } \n        ```", "```cs\n    ConfigureConsole();\n    QueryingCategories(); \n    ```", "```cs\n    Beverages has 12 products.\n    Condiments has 12 products.\n    Confections has 13 products.\n    Dairy Products has 10 products.\n    Grains/Cereals has 7 products.\n    Meat/Poultry has 6 products.\n    Produce has 5 products.\n    Seafood has 12 products. \n    ```", "```cs\n        private static void FilteredIncludes()\n        {\n          using NorthwindDb db = new();\n          SectionTitle(\"Products with a minimum number of units in stock\");\n          string? input;\n          int stock;\n          do\n          {\n            Write(\"Enter a minimum for units in stock: \");\n            input = ReadLine();\n          } while (!int.TryParse(input, out stock));\n          IQueryable<Category>? categories = db.Categories?\n            .Include(c => c.Products.Where(p => p.Stock >= stock));\n          if (categories is null || !categories.Any())\n          {\n            Fail(\"No categories found.\");\n            return;\n          }\n          foreach (Category c in categories)\n          {\n            WriteLine(\n              \"{0} has {1} products with a minimum {2} units in stock.\",\n              arg0: c.CategoryName, arg1: c.Products.Count, arg2: stock);\n            foreach(Product p in c.Products)\n            {\n              WriteLine($\"  {p.ProductName} has {p.Stock} units in stock.\");\n            }\n          }\n        } \n        ```", "```cs\n    FilteredIncludes(); \n    ```", "```cs\n    Enter a minimum for units in stock: 100\n    Beverages has 2 products with a minimum of 100 units in stock.\n      Sasquatch Ale has 111 units in stock.\n      Rhönbräu Klosterbier has 125 units in stock.\n    Condiments has 2 products with a minimum of 100 units in stock.\n      Grandma's Boysenberry Spread has 120 units in stock.\n      Sirop d'érable has 113 units in stock.\n    Confections has 0 products with a minimum of 100 units in stock.\n    Dairy Products has 1 products with a minimum of 100 units in stock.\n      Geitost has 112 units in stock.\n    Grains/Cereals has 1 products with a minimum of 100 units in stock.\n      Gustaf's Knäckebröd has 104 units in stock.\n    Meat/Poultry has 1 products with a minimum of 100 units in stock.\n      Pâté chinois has 115 units in stock.\n    Produce has 0 products with a minimum of 100 units in stock.\n    Seafood has 3 products with a minimum of 100 units in stock.\n      Inlagd Sill has 112 units in stock.\n      Boston Crab Meat has 123 units in stock.\n      Röd Kaviar has 101 units in stock. \n    ```", "```cs\nchcp 65001 \n```", "```cs\n        private static void QueryingProducts()\n        {\n          using NorthwindDb db = new();\n          SectionTitle(\"Products that cost more than a price, highest at top\");\n          string? input;\n          decimal price;\n          do\n          {\n            Write(\"Enter a product price: \");\n            input = ReadLine();\n          } while (!decimal.TryParse(input, out price));\n          IQueryable<Product>? products = db.Products?\n            .Where(product => product.Cost > price)\n            .OrderByDescending(product => product.Cost);\n          if (products is null || !products.Any())\n          {\n            Fail(\"No products found.\");\n            return;\n          }\n          foreach (Product p in products)\n          {\n            WriteLine(\n              \"{0}: {1} costs {2:$#,##0.00} and has {3} in stock.\",\n              p.ProductId, p.ProductName, p.Cost, p.Stock);\n          }\n        } \n        ```", "```cs\n    Enter a product price: 50\n    38: Côte de Blaye costs $263.50 and has 17 in stock.\n    29: Thüringer Rostbratwurst costs $123.79 and has 0 in stock.\n    9: Mishi Kobe Niku costs $97.00 and has 29 in stock.\n    20: Sir Rodney's Marmalade costs $81.00 and has 40 in stock.\n    18: Carnarvon Tigers costs $62.50 and has 42 in stock.\n    59: Raclette Courdavault costs $55.00 and has 79 in stock.\n    51: Manjimup Dried Apples costs $53.00 and has 20 in stock. \n    ```", "```cs\n    Fail > No products found. \n    ```", "```cs\n    // Calling ToQueryString does not execute against the database.\n    // LINQ to Entities just converts the LINQ query to an SQL statement.\n    Info($\"ToQueryString: {products.ToQueryString()}\"); \n    ```", "```cs\n    Enter a minimum for units in stock: 95\n    Connection: Data Source=C:\\cs13net9\\Chapter10\\WorkingWithEFCore\\bin\\Debug\\net9.0\\Northwind.db\n    Info > ToQueryString: .param set @__stock_0 95\n    SELECT \"c\".\"CategoryId\", \"c\".\"CategoryName\", \"c\".\"Description\", \"t\".\"ProductId\", \"t\".\"CategoryId\", \"t\".\"UnitPrice\", \"t\".\"Discontinued\", \"t\".\"ProductName\", \"t\".\"UnitsInStock\"\n    FROM \"Categories\" AS \"c\"\n    LEFT JOIN (\n        SELECT \"p\".\"ProductId\", \"p\".\"CategoryId\", \"p\".\"UnitPrice\", \"p\".\"Discontinued\", \"p\".\"ProductName\", \"p\".\"UnitsInStock\"\n        FROM \"Products\" AS \"p\"\n        WHERE \"p\".\"UnitsInStock\" >= @__stock_0\n    ) AS \"t\" ON \"c\".\"CategoryId\" = \"t\".\"CategoryId\"\n    ORDER BY \"c\".\"CategoryId\"\n    Beverages has 2 products with a minimum of 95 units in stock.\n      Sasquatch Ale has 111 units in stock.\n      Rhönbräu Klosterbier has 125 units in stock.\n    ... \n    ```", "```cs\nInfo > ToQueryString: DECLARE @__stock_0 smallint = CAST(95 AS smallint);\nSELECT [c].[CategoryId], [c].[CategoryName], [c].[Description], [t].[ProductId], [t].[CategoryId], [t].[UnitPrice], [t].[Discontinued], [t].[ProductName], [t].[UnitsInStock]\nFROM [Categories] AS [c]\nLEFT JOIN (\n    SELECT [p].[ProductId], [p].[CategoryId], [p].[UnitPrice], [p].[Discontinued], [p].[ProductName], [p].[UnitsInStock]\n    FROM [Products] AS [p]\n    WHERE [p].[UnitsInStock] >= @__stock_0\n) AS [t] ON [c].[CategoryId] = [t].[CategoryId]\nORDER BY [c].[CategoryId] \n```", "```cs\n    optionsBuilder.LogTo(WriteLine) // This is the Console method.\n    #if DEBUG\n      .EnableSensitiveDataLogging() // Include SQL parameters.\n      .EnableDetailedErrors()\n    #endif\n    ; \n    ```", "```cs\n    warn: 7/16/2023 14:03:40.255 CoreEventId.SensitiveDataLoggingEnabledWarning[10400] (Microsoft.EntityFrameworkCore.Infrastructure)\n          Sensitive data logging is enabled. Log entries and exception messages may include sensitive application data; this mode should only be enabled during development.\n    ...\n    dbug: 05/03/2023 12:36:11.702 RelationalEventId.ConnectionOpening[20000] (Microsoft.EntityFrameworkCore.Database.Connection)\n          Opening connection to database 'main' on server 'C:\\cs13net9\\Chapter10\\WorkingWithEFCore\\bin\\Debug\\net9.0\\Northwind.db'.\n    dbug: 05/03/2023 12:36:11.718 RelationalEventId.ConnectionOpened[20001] (Microsoft.EntityFrameworkCore.Database.Connection)\n          Opened connection to database 'main' on server 'C:\\cs13net9\\Chapter10\\WorkingWithEFCore\\bin\\Debug\\net9.0\\Northwind.db'.\n    dbug: 05/03/2023 12:36:11.721 RelationalEventId.CommandExecuting[20100] (Microsoft.EntityFrameworkCore.Database.Command)\n          Executing DbCommand [Parameters=[], CommandType='Text', CommandTimeout='30']\n          SELECT \"c\".\"CategoryId\", \"c\".\"CategoryName\", \"c\".\"Description\", \"p\".\"ProductId\", \"p\".\"CategoryId\", \"p\".\"UnitPrice\", \"p\".\"Discontinued\", \"p\".\"ProductName\", \"p\".\"UnitsInStock\"\n          FROM \"Categories\" AS \"c\"\n          LEFT JOIN \"Products\" AS \"p\" ON \"c\".\"CategoryId\" = \"p\".\"CategoryId\"\n          ORDER BY \"c\".\"CategoryId\"\n    ... \n    ```", "```cs\n    // To use RelationalEventId.\n    using Microsoft.EntityFrameworkCore.Diagnostics; \n    ```", "```cs\n    optionsBuilder.LogTo(WriteLine**,** // This is the Console method.\n    **new****[] { RelationalEventId.CommandExecuting }**)\n    #if DEBUG\n      .EnableSensitiveDataLogging()\n      .EnableDetailedErrors()\n    #endif\n    ; \n    ```", "```cs\n    dbug: 05/03/2022 12:48:43.153 RelationalEventId.CommandExecuting[20100] (Microsoft.EntityFrameworkCore.Database.Command)\n          Executing DbCommand [Parameters=[], CommandType='Text', CommandTimeout='30']\n          SELECT \"c\".\"CategoryId\", \"c\".\"CategoryName\", \"c\".\"Description\", \"p\".\"ProductId\", \"p\".\"CategoryId\", \"p\".\"UnitPrice\", \"p\".\"Discontinued\", \"p\".\"ProductName\", \"p\".\"UnitsInStock\"\n          FROM \"Categories\" AS \"c\"\n          LEFT JOIN \"Products\" AS \"p\" ON \"c\".\"CategoryId\" = \"p\".\"CategoryId\"\n          ORDER BY \"c\".\"CategoryId\"\n    Beverages has 12 products.\n    Condiments has 12 products.\n    Confections has 13 products.\n    Dairy Products has 10 products.\n    Grains/Cereals has 7 products.\n    Meat/Poultry has 6 products.\n    Produce has 5 products.\n    Seafood has 12 products. \n    ```", "```cs\nIQueryable<Product>? products = db.Products?\n  .TagWith(\"Products filtered by price and sorted.\")\n  .Where(product => product.Cost > price)\n  .OrderByDescending(product => product.Cost); \n```", "```cs\n-- Products filtered by price and sorted. \n```", "```cs\n        private static void GettingOneProduct()\n        {\n          using NorthwindDb db = new();\n          SectionTitle(\"Getting a single product\");\n          string? input;\n          int id;\n          do\n          {\n            Write(\"Enter a product ID: \");\n            input = ReadLine();\n          } while (!int.TryParse(input, out id));\n          // This query is not deferred because the First method does not return IEnumerable or IQueryable.\n          // The LINQ query is immediately converted to SQL and executed to fetch the first product.\n          Product? product = db.Products?\n            .First(product => product.ProductId == id);\n          Info($\"First: {product?.ProductName}\");\n          if (product is null) Fail(\"No product found using First.\");\n          product = db.Products?\n            .Single(product => product.ProductId == id);\n          Info($\"Single: {product?.ProductName}\");\n          if (product is null) Fail(\"No product found using Single.\");\n        } \n        ```", "```cs\n    Enter a product ID: 1\n    Connection: Data Source=C:\\cs13net9\\Chapter10\\WorkingWithEFCore\\bin\\Debug\\net9.0\\Northwind.db\n    dbug: 9/17/2023 18:04:14.210 RelationalEventId.CommandExecuting[20100] (Microsoft.EntityFrameworkCore.Database.Command)\n          Executing DbCommand [Parameters=[@__id_0='1'], CommandType='Text', CommandTimeout='30']\n          SELECT \"p\".\"ProductId\", \"p\".\"CategoryId\", \"p\".\"UnitPrice\", \"p\".\"Discontinued\", \"p\".\"ProductName\", \"p\".\"UnitsInStock\"\n          FROM \"Products\" AS \"p\"\n          WHERE \"p\".\"ProductId\" > @__id_0\n          **LIMIT 1**\n    Info > First: Chang\n    dbug: 9/17/2023 18:04:14.286 RelationalEventId.CommandExecuting[20100] (Microsoft.EntityFrameworkCore.Database.Command)\n          Executing DbCommand [Parameters=[@__id_0='1'], CommandType='Text', CommandTimeout='30']\n          SELECT \"p\".\"ProductId\", \"p\".\"CategoryId\", \"p\".\"UnitPrice\", \"p\".\"Discontinued\", \"p\".\"ProductName\", \"p\".\"UnitsInStock\"\n          FROM \"Products\" AS \"p\"\n          WHERE \"p\".\"ProductId\" > @__id_0\n          **LIMIT 2**\n    Info > Single: Chang \n    ```", "```cs\n        private static void QueryingWithLike()\n        {\n          using NorthwindDb db = new();\n          SectionTitle(\"Pattern matching with LIKE\");\n          Write(\"Enter part of a product name: \");\n          string? input = ReadLine();\n          if (string.IsNullOrWhiteSpace(input))\n          {\n            Fail(\"You did not enter part of a product name.\");\n            return;\n          }\n          IQueryable<Product>? products = db.Products?\n            .Where(p => EF.Functions.Like(p.ProductName, $\"%{input}%\"));\n          if (products is null || !products.Any())\n          {\n            Fail(\"No products found.\");\n            return;\n          }\n          foreach (Product p in products)\n          {\n            WriteLine(\"{0} has {1} units in stock. Discontinued: {2}\",\n              p.ProductName, p.Stock, p.Discontinued);\n          }\n        } \n        ```", "```cs\n    Enter part of a product name: che\n    dbug: 07/16/2023 13:03:42.793 RelationalEventId.CommandExecuting[20100] (Microsoft.EntityFrameworkCore.Database.Command)\n          Executing DbCommand [Parameters=[@__Format_1='%che%' (Size = 5)], CommandType='Text', CommandTimeout='30']\n          SELECT \"p\".\"ProductId\", \"p\".\"CategoryId\", \"p\".\"UnitPrice\", \"p\".\"Discontinued\", \"p\".\"ProductName\", \"p\".\"UnitsInStock\"\n          FROM \"Products\" AS \"p\"\n          WHERE \"p\".\"ProductName\" LIKE @__Format_1\n    Chef Anton's Cajun Seasoning has 53 units in stock. Discontinued: False\n    Chef Anton's Gumbo Mix has 0 units in stock. Discontinued: True\n    Queso Manchego La Pastora has 86 units in stock. Discontinued: False \n    ```", "```cs\nvar randomQuestions = await db.Questions\n  .OrderBy(q => EF.Functions.Random())\n  .Take(10); // Select 10 random questions. \n```", "```cs\nvar randomDataSample = await db.Products\n  .Where(d => EF.Functions.Random() > 0.5); \n```", "```cs\n    // A global filter to remove discontinued products.\n    modelBuilder.Entity<Product>()\n      .HasQueryFilter(p => !p.Discontinued); \n    ```", "```cs\n    Enter part of a product name: che\n    dbug: 05/03/2022 13:34:27.290 RelationalEventId.CommandExecuting[20100] (Microsoft.EntityFrameworkCore.Database.Command)\n          Executing DbCommand [Parameters=[@__Format_1='%che%' (Size = 5)], CommandType='Text', CommandTimeout='30']\n          SELECT \"p\".\"ProductId\", \"p\".\"CategoryId\", \"p\".\"UnitPrice\", \"p\".\"Discontinued\", \"p\".\"ProductName\", \"p\".\"UnitsInStock\"\n          FROM \"Products\" AS \"p\"\n          WHERE **NOT (\"p\".\"Discontinued\") AND** (\"p\".\"ProductName\" LIKE @__Format_1)\n    Chef Anton's Cajun Seasoning has 53 units in stock. Discontinued? False\n    Queso Manchego La Pastora has 86 units in stock. Discontinued? False\n    Gumbär Gummibärchen has 15 units in stock. Discontinued? False \n    ```", "```cs\n    private static void GetProductUsingSql()\n    {\n      using NorthwindDb db = new();\n      SectionTitle(\"Get product using SQL\");\n      int? rowCount = db.Products?.Count();\n      if (rowCount is null)\n      {\n        Fail(\"Products table is empty.\");\n        return;\n      }\n      int productId = 1;\n      Product? p = db.Products?.FromSql(\n        $\"SELECT * FROM Products WHERE ProductId = {\n        productId}\").FirstOrDefault();\n      if (p is null)\n      {\n        Fail(\"Product not found.\");\n        return;\n      }\n      WriteLine($\"Product: {p.ProductId} - {p.ProductName}\");\n    } \n    ```", "```cs\n    dbug: 7/27/2024 14:47:07.515 RelationalEventId.CommandExecuting[20100] (Microsoft.EntityFrameworkCore.Database.Command)\n          Executing DbCommand [Parameters=[], CommandType='Text', CommandTimeout='30']\n          SELECT COUNT(*)\n          FROM \"Products\" AS \"p\"\n          WHERE NOT (\"p\".\"Discontinued\")\n    dbug: 7/27/2024 14:47:07.582 RelationalEventId.CommandExecuting[20100] (Microsoft.EntityFrameworkCore.Database.Command)\n          Executing DbCommand [Parameters=[p0='1'], CommandType='Text', CommandTimeout='30']\n          SELECT \"n\".\"ProductId\", \"n\".\"CategoryId\", \"n\".\"UnitPrice\", \"n\".\"Discontinued\", \"n\".\"ProductName\", \"n\".\"UnitsInStock\"\n          FROM (\n              SELECT * FROM Products WHERE ProductId = @p0\n          ) AS \"n\"\n          WHERE NOT (\"n\".\"Discontinued\")\n          LIMIT 1\n    Product: 1 – Chai \n    ```", "```cs\n    CREATE TABLE Employees(\n      EmpId INT IDENTITY,\n      FirstName NVARCHAR(40) NOT NULL,\n      Salary MONEY\n    ) \n    ```"]