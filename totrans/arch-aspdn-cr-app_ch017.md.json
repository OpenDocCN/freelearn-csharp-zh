["```cs\nnamespace Mediator;\npublic interface IMediator\n{\n    void Send(Message message);\n}\npublic interface IColleague\n{\n    string Name { get; }\n    void ReceiveMessage(Message message);\n}\npublic record class Message(IColleague Sender, string Content);\n```", "```cs\npublic class ConcreteMediator : IMediator\n{\n    private readonly List<IColleague> _colleagues;\n    public ConcreteMediator(params IColleague[] colleagues)\n    {\n        ArgumentNullException.ThrowIfNull(colleagues);\n        _colleagues = new List<IColleague>(colleagues);\n    }\n    public void Send(Message message)\n    {\n        foreach (var colleague in _colleagues)\n        {\n            colleague.ReceiveMessage(message);\n        }\n    }\n}\n```", "```cs\npublic class ConcreteColleague : IColleague\n{\n    private readonly IMessageWriter<Message> _messageWriter;\n    public ConcreteColleague(string name, IMessageWriter<Message> messageWriter)\n    {\n        Name = name ?? throw new ArgumentNullException(nameof(name));\n        _messageWriter = messageWriter ?? throw new ArgumentNullException(nameof(messageWriter));\n    }\n    public string Name { get; }\n    public void ReceiveMessage(Message message)\n    {\n        _messageWriter.Write(message);\n    }\n}\n```", "```cs\nnamespace Mediator;\npublic interface IMessageWriter<Tmessage>\n{\n    void Write(Tmessage message);\n} \n```", "```cs\nnamespace Mediator;\npublic class MediatorTest\n{\n    [Fact]\n    public void Send_a_message_to_all_colleagues()\n    {\n        // Arrange\n        var (millerWriter, miller) = CreateConcreteColleague(\"Miller\");\n        var (orazioWriter, orazio) = CreateConcreteColleague(\"Orazio\");\n        var (fletcherWriter, fletcher) = CreateConcreteColleague(\"Fletcher\");\n```", "```cs\n var mediator = new ConcreteMediator(miller, orazio, fletcher);\n        var expectedOutput = @\"[Miller]: Hey everyone!\n[Orazio]: What's up Miller?\n[Fletcher]: Hey Miller!\n\";\n```", "```cs\n // Act\n        mediator.Send(new Message(\n            Sender: miller,\n            Content: \"Hey everyone!\"\n        ));\n        mediator.Send(new Message(\n            Sender: orazio,\n            Content: \"What's up Miller?\"\n        ));\n        mediator.Send(new Message(\n            Sender: fletcher,\n            Content: \"Hey Miller!\"\n        )); \n```", "```cs\n // Assert\n        Assert.Equal(expectedOutput, millerWriter.Output.ToString());\n        Assert.Equal(expectedOutput, orazioWriter.Output.ToString());\n        Assert.Equal(expectedOutput, fletcherWriter.Output.ToString());\n    }\n```", "```cs\n private static (TestMessageWriter, ConcreteColleague) CreateConcreteColleague(string name)\n    {\n        var messageWriter = new TestMessageWriter();\n        var concreateColleague = new ConcreteColleague(name, messageWriter);\n        return (messageWriter, concreateColleague);\n    }\n```", "```cs\n private class TestMessageWriter : IMessageWriter<Message>\n    {\n        public StringBuilder Output { get; } = new StringBuilder();\n        public void Write(Message message)\n        {\n            Output.AppendLine($\"[{message.Sender.Name}]: {message.Content}\");\n        }\n    }\n} // Closing the MediatorTest class\n```", "```cs\nnamespace Mediator;\npublic interface IChatRoom\n{\n    void Join(IParticipant participant);\n    void Send(ChatMessage message);\n}\n```", "```cs\npublic interface IParticipant\n{\n    string Name { get; }\n    void Send(string message);\n    void ReceiveMessage(ChatMessage message);\n    void ChatRoomJoined(IChatRoom chatRoom);\n}\n```", "```cs\npublic record class ChatMessage(IParticipant Sender, string Content);\n```", "```cs\npublic class User : IParticipant\n{\n    private IChatRoom? _chatRoom;\n    private readonly IMessageWriter<ChatMessage> _messageWriter;\n    public User(IMessageWriter<ChatMessage> messageWriter, string name)\n    {\n        _messageWriter = messageWriter ?? throw new ArgumentNullException(nameof(messageWriter));\n        Name = name ?? throw new ArgumentNullException(nameof(name));\n    }\n    public string Name { get; }\n    public void ChatRoomJoined(IChatRoom chatRoom)\n    {\n        _chatRoom = chatRoom;\n    }\n    public void ReceiveMessage(ChatMessage message)\n    {\n        _messageWriter.Write(message);\n    }\n    public void Send(string message)\n    {\n        if (_chatRoom == null)\n        {\n            throw new ChatRoomNotJoinedException();\n        }\n        _chatRoom.Send(new ChatMessage(this, message));\n    }\n}\npublic class ChatRoomNotJoinedException : Exception\n{\n    public ChatRoomNotJoinedException()\n        : base(\"You must join a chat room before sending a message.\")\n    { }\n}\n```", "```cs\npublic class ChatRoom : IChatRoom\n{\n    private readonly List<IParticipant> _participants = new();\n    public void Join(IParticipant participant)\n    {\n        _participants.Add(participant);\n        participant.ChatRoomJoined(this);\n        Send(new ChatMessage(participant, \"Has joined the channel\"));\n    }\n    public void Send(ChatMessage message)\n    {\n        _participants.ForEach(participant \n            => participant.ReceiveMessage(message));\n    }\n}\n```", "```cs\nnamespace Mediator;\npublic class ChatRoomTest\n{\n    [Fact]\n    public void ChatRoom_participants_should_send_and_receive_messages()\n    {\n        // Arrange, Act, Assert blocks here\n    }\n    private (TestMessageWriter, User) CreateTestUser(string name)\n    {\n        var writer = new TestMessageWriter();\n        var user = new User(writer, name);\n        return (writer, user);\n    }\n    private class TestMessageWriter : IMessageWriter<ChatMessage>\n    {\n        public StringBuilder Output { get; } = new StringBuilder();\n        public void Write(ChatMessage message)\n        {\n            Output.AppendLine($\"[{message.Sender.Name}]: {message.Content}\");\n        }\n    }\n}\n```", "```cs\npublic interface IMessageWriter<TMessage>\n{\n    void Write(TMessage message);\n}\n```", "```cs\n// Arrange\nvar (kingChat, king) = CreateTestUser(\"King\");\nvar (kelleyChat, kelley) = CreateTestUser(\"Kelley\");\nvar (daveenChat, daveen) = CreateTestUser(\"Daveen\");\nvar (rutterChat, _) = CreateTestUser(\"Rutter\");\nvar chatroom = new ChatRoom();\n```", "```cs\n// Act\nchatroom.Join(king);\nchatroom.Join(kelley);\nking.Send(\"Hey!\");\nkelley.Send(\"What's up King?\");\nchatroom.Join(daveen);\nking.Send(\"Everything is great, I joined the CrazyChatRoom!\");\ndaveen.Send(\"Hey King!\");\nking.Send(\"Hey Daveen\");\n```", "```cs\n// Assert\nAssert.Empty(rutterChat.Output.ToString());\n```", "```cs\nAssert.Equal(@\"[King]: Has joined the channel\n[Kelley]: Has joined the channel\n[King]: Hey!\n[Kelley]: What's up King?\n[Daveen]: Has joined the channel\n[King]: Everything is great, I joined the CrazyChatRoom!\n[Daveen]: Hey King!\n[King]: Hey Daveen\n\", kingChat.Output.ToString());\n```", "```cs\nAssert.Equal(@\"[Kelley]: Has joined the channel\n[King]: Hey!\n[Kelley]: What's up King?\n[Daveen]: Has joined the channel\n[King]: Everything is great, I joined the CrazyChatRoom!\n[Daveen]: Hey King!\n[King]: Hey Daveen\n\", kelleyChat.Output.ToString());\n```", "```cs\nAssert.Equal(@\"[Daveen]: Has joined the channel\n[King]: Everything is great, I joined the CrazyChatRoom!\n[Daveen]: Hey King!\n[King]: Hey Daveen\n\", daveenChat.Output.ToString());\n```", "```cs\npublic interface IMediator\n{\n    TReturn Send<TQuery, TReturn>(TQuery query)\n        where TQuery : IQuery<TReturn>;\n    void Send<TCommand>(TCommand command)\n        where TCommand : ICommand;\n    void Register<TCommand>(ICommandHandler<TCommand> commandHandler)\n        where TCommand : ICommand;\n    void Register<TQuery, TReturn>(IQueryHandler<TQuery, TReturn> commandHandler)\n        where TQuery : IQuery<TReturn>;\n}\n```", "```cs\npublic interface ICommand { }\npublic interface ICommandHandler<TCommand> \n    where TCommand : ICommand\n{\n    void Handle(TCommand command);\n}\n```", "```cs\npublic interface IQuery<TReturn> { }\npublic interface IQueryHandler<TQuery, TReturn>\n    where TQuery : IQuery<TReturn>\n{\n    TReturn Handle(TQuery query);\n}\n```", "```cs\npublic record class ChatMessage(IParticipant Sender, string Message)\n{\n    public DateTime Date { get; } = DateTime.UtcNow;\n}\n```", "```cs\npublic interface IParticipant\n{\n    string Name { get; }\n    void Join(IChatRoom chatRoom);\n    void Leave(IChatRoom chatRoom);\n    void SendMessageTo(IChatRoom chatRoom, string message);\n    void NewMessageReceivedFrom(IChatRoom chatRoom, ChatMessage message);\n    IEnumerable<IParticipant> ListParticipantsOf(IChatRoom chatRoom);\n    IEnumerable<ChatMessage> ListMessagesOf(IChatRoom chatRoom);\n}\n```", "```cs\npublic interface IChatRoom\n{\n    string Name { get; }\n    void Add(IParticipant participant);\n    void Remove(IParticipant participant);\n    IEnumerable<IParticipant> ListParticipants();\n    void Add(ChatMessage message);\n    IEnumerable<ChatMessage> ListMessages();\n}\n```", "```cs\npublic class Mediator : IMediator\n{\n    private readonly HandlerDictionary _handlers = new();\n    public void Register<TCommand>(ICommandHandler<TCommand> commandHandler)\n        where TCommand : ICommand\n    {\n        _handlers.AddHandler(commandHandler);\n    }\n    public void Register<TQuery, TReturn> (IQueryHandler<TQuery, TReturn> commandHandler)\n        where TQuery : IQuery<TReturn>\n    {\n        _handlers.AddHandler(commandHandler);\n    }\n    public TReturn Send<TQuery, TReturn>(TQuery query)\n        where TQuery : IQuery<TReturn>\n    {\n        var handler = _handlers.Find<TQuery, TReturn>();\n        return handler.Handle(query);\n    }\n    public void Send<TCommand>(TCommand command)\n        where TCommand : ICommand\n    {\n        var handlers = _handlers.FindAll<TCommand>();\n        foreach (var handler in handlers)\n        {\n            handler.Handle(command);\n        }\n    }\n}\n```", "```cs\npublic class JoinChatRoom\n{\n    public record class Command(IChatRoom ChatRoom, IParticipant Requester) : ICommand;\n    public class Handler : ICommandHandler<Command>\n    {\n        public void Handle(Command command)\n        {\n            command.ChatRoom.Add(command.Requester);\n        }\n    }\n}\n```", "```cs\npublic class LeaveChatRoom\n{\n    public record class Command(IChatRoom ChatRoom, IParticipant Requester) : ICommand;\n    public class Handler : ICommandHandler<Command>\n    {\n        public void Handle(Command command)\n        {\n            command.ChatRoom.Remove(command.Requester);\n        }\n    }\n}\n```", "```cs\npublic class SendChatMessage\n{\n    public record class Command(IChatRoom ChatRoom, ChatMessage Message) : ICommand;\n    public class Handler : ICommandHandler<Command>\n    {\n        public void Handle(Command command)\n        {\n            command.ChatRoom.Add(command.Message);\n            var participants = command.ChatRoom.ListParticipants();\n            foreach (var participant in participants)\n            {\n                participant.NewMessageReceivedFrom(\n                    command.ChatRoom, \n                    command.Message\n                );\n            }\n        }\n    }\n}\n```", "```cs\npublic class ListParticipants\n{\n    public record class Query(IChatRoom ChatRoom, IParticipant Requester) : IQuery<IEnumerable<IParticipant>>;\n    public class Handler : IQueryHandler<Query, IEnumerable<IParticipant>>\n    {\n        public IEnumerable<IParticipant> Handle(Query query)\n        {\n            return query.ChatRoom.ListParticipants();\n        }\n    }\n}\n```", "```cs\npublic class ListMessages\n{\n    public record class Query(IChatRoom ChatRoom, IParticipant Requester) : IQuery<IEnumerable<ChatMessage>>;\n    public class Handler : IQueryHandler<Query, IEnumerable<ChatMessage>>\n    {\n        public IEnumerable<ChatMessage> Handle(Query query)\n        {\n            return query.ChatRoom.ListMessages();\n        }\n    }\n}\n```", "```cs\npublic class ChatRoom : IChatRoom\n{\n    private readonly List<IParticipant> _participants = new List<IParticipant>();\n    private readonly List<ChatMessage> _chatMessages = new List<ChatMessage>();\n    public ChatRoom(string name)\n    {\n        Name = name ?? throw new ArgumentNullException(nameof(name));\n    }\n    public string Name { get; }\n    public void Add(IParticipant participant)\n    {\n        _participants.Add(participant);\n    }\n    public void Add(ChatMessage message)\n    {\n        _chatMessages.Add(message);\n    }\n    public IEnumerable<ChatMessage> ListMessages()\n    {\n        return _chatMessages.AsReadOnly();\n    }\n    public IEnumerable<IParticipant> ListParticipants()\n    {\n        return _participants.AsReadOnly();\n    }\n    public void Remove(IParticipant participant)\n    {\n        _participants.Remove(participant);\n    }\n}\n```", "```cs\npublic class Participant : IParticipant\n{\n    private readonly IMediator _mediator;\n    private readonly IMessageWriter _messageWriter;\n    public Participant(IMediator mediator, string name, IMessageWriter messageWriter)\n    {\n        _mediator = mediator ?? throw new ArgumentNullException(nameof(mediator));\n        Name = name ?? throw new ArgumentNullException(nameof(name));\n        _messageWriter = messageWriter ?? throw new ArgumentNullException(nameof(messageWriter));\n    }\n    public string Name { get; }\n    public void Join(IChatRoom chatRoom)\n    {\n        _mediator.Send(new JoinChatRoom.Command(chatRoom, this));\n    }\n    public void Leave(IChatRoom chatRoom)\n    {\n        _mediator.Send(new LeaveChatRoom.Command(chatRoom, this));\n    }\n    public IEnumerable<ChatMessage> ListMessagesOf(IChatRoom chatRoom)\n    {\n        return _mediator.Send<ListMessages.Query, IEnumerable<ChatMessage>>(new ListMessages.Query(chatRoom, this));\n    }\n    public IEnumerable<IParticipant> ListParticipantsOf(IChatRoom chatRoom)\n    {\n        return _mediator.Send<ListParticipants.Query, IEnumerable<IParticipant>>(new ListParticipants.Query(chatRoom, this));\n    }\n    public void NewMessageReceivedFrom(IChatRoom chatRoom, ChatMessage message)\n    {\n        _messageWriter.Write(chatRoom, message);\n    }\n    public void SendMessageTo(IChatRoom chatRoom, string message)\n    {\n        _mediator.Send(new SendChatMessage.Command (chatRoom, new ChatMessage(this, message)));\n    }\n}\n```", "```cs\npublic class ChatRoomTest\n{\n    private readonly IMediator _mediator = new Mediator();\n    private readonly TestMessageWriter _reagenMessageWriter = new();\n    private readonly TestMessageWriter _garnerMessageWriter = new();\n    private readonly TestMessageWriter _corneliaMessageWriter = new();\n    private readonly IChatRoom _room1 = new ChatRoom(\"Room 1\");\n    private readonly IChatRoom _room2 = new ChatRoom(\"Room 2\");\n    private readonly IParticipant _reagen;\n    private readonly IParticipant _garner;\n    private readonly IParticipant _cornelia;\n    public ChatRoomTest()\n    {\n        _mediator.Register(new JoinChatRoom.Handler());\n        _mediator.Register(new LeaveChatRoom.Handler());\n        _mediator.Register(new SendChatMessage.Handler());\n        _mediator.Register(new ListParticipants.Handler());\n        _mediator.Register(new ListMessages.Handler());\n        _reagen = new Participant(_mediator, \"Reagen\", _reagenMessageWriter);\n        _garner = new Participant(_mediator, \"Garner\", _garnerMessageWriter);\n        _cornelia = new Participant(_mediator, \"Cornelia\", _corneliaMessageWriter);\n    }\n    // Omited test cases and helpers\n}\n```", "```cs\nprivate class TestMessageWriter : IMessageWriter\n{\n    public List<(IChatRoom chatRoom, ChatMessage message)> Output { get; } = new();\n    public void Write(IChatRoom chatRoom, ChatMessage message)\n    {\n        Output.Add((chatRoom, message));\n    }\n}\n```", "```cs\n[Fact]\npublic void A_participant_should_be_able_to_list_the_participants_that_joined_a_chatroom()\n{\n    _reagen.Join(_room1);\n    _reagen.Join(_room2);\n    _garner.Join(_room1);\n    _cornelia.Join(_room2);\n    var room1Participants = _reagen.ListParticipantsOf(_room1);\n    Assert.Collection(room1Participants,\n        p => Assert.Same(_reagen, p),\n        p => Assert.Same(_garner, p)\n    );\n}\n```", "```cs\n[Fact]\npublic void A_participant_should_receive_new_messages()\n{\n    _reagen.Join(_room1);\n    _garner.Join(_room1);\n    _garner.Join(_room2);\n    _reagen.SendMessageTo(_room1, \"Hello!\");\n    Assert.Collection(_garnerMessageWriter.Output,\n    line =>\n    {\n        Assert.Equal(_room1, line.chatRoom);\n        Assert.Equal(_reagen, line.message.Sender);\n        Assert.Equal(\"Hello!\", line.message.Message);\n    }\n  );\n}\n```", "```cs\npublic interface IStrategy\n{\n    string Execute();\n}\n```", "```cs\npublic interface IStrategyA : IStrategy { }\npublic interface IStrategyB : IStrategy { }\npublic class StrategyA : IStrategyA\n{\n    public string Execute() => \"StrategyA\";\n}\npublic class StrategyB : IStrategyB\n{\n    public string Execute() => \"StrategyB\";\n}\n```", "```cs\npublic class Consumer\n{\n    public IStrategyA StrategyA { get; }\n    public IStrategyB StrategyB { get; }\n    public Consumer(IStrategyA strategyA, IStrategyB strategyB)\n    {\n        StrategyA = strategyA ?? throw new ArgumentNullException(nameof(strategyA));\n        StrategyB = strategyB ?? throw new ArgumentNullException(nameof(strategyB));\n    }\n}\n```", "```cs\n[Fact]\npublic void ConsumerTest()\n{\n    // Arrange\n    var serviceProvider = new ServiceCollection()\n        .AddSingleton<IStrategyA, StrategyA>()\n        .AddSingleton<IStrategyB, StrategyB>()\n        .AddSingleton<Consumer>()\n        .BuildServiceProvider();\n    // Act\n    var consumer = serviceProvider.GetRequiredService<Consumer>();\n    // Assert\n    Assert.IsType<StrategyA>(consumer.StrategyA);\n    Assert.IsType<StrategyB>(consumer.StrategyB);\n}\n```", "```cs\npublic class StrategyA : IStrategy\n{\n    public string Execute() => \"StrategyA\";\n}\npublic class StrategyB : IStrategy\n{\n    public string Execute() => \"StrategyB\";\n}\npublic class Consumer\n{\n    public IStrategy StrategyA { get; }\n    public IStrategy StrategyB { get; }\n    public Consumer(IStrategy strategyA, IStrategy strategyB)\n    {\n        StrategyA = strategyA ?? throw new ArgumentNullException(nameof(strategyA));\n        StrategyB = strategyB ?? throw new ArgumentNullException(nameof(strategyB));\n    }\n}\n```", "```cs\n// Arrange\nvar serviceProvider = new ServiceCollection()\n    .AddSingleton<StrategyA>()\n    .AddSingleton<StrategyB>()\n    .AddSingleton(serviceProvider =>\n    {\n        var strategyA = serviceProvider.GetRequiredService<StrategyA>();\n        var strategyB = serviceProvider.GetRequiredService<StrategyB>();\n        return new Consumer(strategyA, strategyB);\n    })\n    .BuildServiceProvider();\n// Act\nvar consumer = serviceProvider.GetRequiredService<Consumer>();\n// Assert\nAssert.IsType<StrategyA>(consumer.StrategyA);\nAssert.IsType<StrategyB>(consumer.StrategyB);\n```", "```cs\nbuilder.Services\n    // Core Layer\n    .AddMediatR(cfg => cfg.RegisterServicesFromAssemblyContaining<NotEnoughStockException>())\n;\n```", "```cs\nnamespace Core.UseCases;\npublic class AddStocks\n{\n    public class Command : IRequest<int>\n    {\n        public int ProductId { get; set; }\n        public int Amount { get; set; }\n    }\n    public class Handler : IRequestHandler<Command, int>\n    {\n        private readonly IProductRepository _productRepository;\n        public Handler(IProductRepository productRepository)\n        {\n            _productRepository = productRepository ?? throw new ArgumentNullException(nameof(productRepository));\n        }\n        public async Task<int> Handle(Command request, CancellationToken cancellationToken)\n        {\n            var product = await _productRepository.FindByIdAsync(request.ProductId, cancellationToken);\n            if (product == null)\n            {\n                throw new ProductNotFoundException(request.ProductId);\n            }\n            product.AddStock(request.Amount);\n            await _productRepository.UpdateAsync(product, cancellationToken);\n            return product.QuantityInStock;\n        }\n    }\n}\n```", "```cs\nnamespace Core.UseCases;\npublic class RemoveStocks\n{\n    public class Command : IRequest<int>\n    {\n        public int ProductId { get; set; }\n        public int Amount { get; set; }\n    }\n    public class Handler : IRequestHandler<Command, int>\n    {\n        private readonly IProductRepository _productRepository;\n        public Handler(IProductRepository productRepository)\n        {\n            _productRepository = productRepository ?? throw new ArgumentNullException(nameof(productRepository));\n        }\n        public async Task<int> Handle(Command request, CancellationToken cancellationToken)\n        {\n            var product = await _productRepository.FindByIdAsync(request.ProductId, cancellationToken);\n            if (product == null)\n            {\n                throw new ProductNotFoundException(request.ProductId);\n            }\n            product.RemoveStock(request.Amount);\n            await _productRepository.UpdateAsync(product, cancellationToken);\n            return product.QuantityInStock;\n        }\n    }\n}\n```", "```cs\nnamespace Core.Services;\npublic class StockService\n{\n    private readonly IProductRepository _repository;\n    // Omitted constructor\n    public async Task<int> AddStockAsync(int productId, int amount, CancellationToken cancellationToken)\n    {\n        var product = await _repository.FindByIdAsync(productId, cancellationToken);\n        if (product == null)\n        {\n            throw new ProductNotFoundException(productId);\n        }\n        product.AddStock(amount);\n        await _repository.UpdateAsync(product, cancellationToken);\n        return product.QuantityInStock;\n    }\n    // Omitted RemoveStockAsync method\n}\n```", "```cs\npublic class Command : IRequest<int>\n{\n    public int ProductId { get; set; }\n    public int Amount { get; set; }\n}\n```", "```cs\napp.MapPost(\"/products/{productId:int}/add-stocks\", async (\n    int productId, \n    AddStocks.Command command, \n    IMediator mediator, \n    CancellationToken cancellationToken) =>\n{\n    command.ProductId = productId;\n    var quantityInStock = await mediator.Send(command, cancellationToken);\n    var stockLevel = new StockLevel(quantityInStock);\n    return Results.Ok(stockLevel);\n});\napp.MapPost(\"/products/{productId:int}/remove-stocks\", async (\n    int productId, \n    RemoveStocks.Command command, \n    IMediator mediator, \n    CancellationToken cancellationToken) =>\n{\n    command.ProductId = productId;\n    var quantityInStock = await mediator.Send(command, cancellationToken);\n    var stockLevel = new StockLevel(quantityInStock);\n    return Results.Ok(stockLevel);\n});\n// Omitted code\npublic record class StockLevel(int QuantityInStock);\n```"]