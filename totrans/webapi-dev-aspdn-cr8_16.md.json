["```cs\n[HttpGet(\"{id:int}\")]public ActionResult<User> Get(int id)\n{\n    var user = Users.First(u => u.Id == id);\n    if (user == null)\n    {\n        return NotFound();\n    }\n    return Ok(user);\n}\n```", "```cs\n[ApiController][ApiExplorerSettings(IgnoreApi = true)]\npublic class ErrorController(ILogger<ErrorController> logger) : ControllerBase\n{\n    [Route(\"/error-development\")]\n    public IActionResult HandleErrorDevelopment(\n        [FromServices] IHostEnvironment hostEnvironment)\n    {\n        if (!hostEnvironment.IsDevelopment())\n        {\n            return NotFound();\n        }\n        var exceptionHandlerFeature =\n            HttpContext.Features.Get<IExceptionHandlerFeature>()!;\n        logger.LogError(exceptionHandlerFeature.Error, exceptionHandlerFeature.Error.Message);\n        return Problem(\n            detail: exceptionHandlerFeature.Error.StackTrace,\n            title: exceptionHandlerFeature.Error.Message);\n    }\n    [Route(\"/error\")]\n    public IActionResult HandleError()\n    {\n        var exceptionHandlerFeature =\n            HttpContext.Features.Get<IExceptionHandlerFeature>()!;\n        logger.LogError(exceptionHandlerFeature.Error, exceptionHandlerFeature.Error.Message);\n        return Problem();\n    }\n}\n```", "```cs\nif (app.Environment.IsDevelopment()){\n    app.UseSwagger();\n    app.UseSwaggerUI();\n    app.UseExceptionHandler(\"/error-development\");\n}\nelse\n{\n    app.UseExceptionHandler(\"/error\");\n}\n```", "```cs\npublic class User{\n    public int Id { get; set; }\n    [Required]\n    [StringLength(50, MinimumLength = 3, ErrorMessage = \"The length of FirstName must be between 3 and 50.\")]\n    public string FirstName { get; set; } = string.Empty;\n    [Required]\n    [StringLength(50, MinimumLength = 3, ErrorMessage = \"The length of LastName must be between 3 and 50.\")]\n    public string LastName { get; set; } = string.Empty;\n    [Required]\n    [Range(1, 120, ErrorMessage = \"The value of Age must be between 1 and 120.\")]\n    public int Age { get; set; }\n    [Required]\n    [EmailAddress]\n    public string Email { get; set; } = string.Empty;\n    [Required]\n    [Phone]\n    public string PhoneNumber { get; set; } = string.Empty;\n}\n```", "```cs\n{  \"firstName\": \"ab\",\n  \"lastName\": \"xy\",\n  \"age\": 20,\n  \"email\": \"user-example.com\",\n  \"phoneNumber\": \"abcxyz\"\n}\n```", "```cs\n{  \"type\": \"https://tools.ietf.org/html/rfc9110#section-15.5.1\",\n  \"title\": \"One or more validation errors occurred.\",\n  \"status\": 400,\n  \"errors\": {\n    \"Email\": [\n      \"The Email field is not a valid e-mail address.\"\n    ],\n    \"LastName\": [\n      \"The length of LastName must be between 3 and 50.\"\n    ],\n    \"FirstName\": [\n      \"The length of FirstName must be between 3 and 50.\"\n    ],\n    \"PhoneNumber\": [\n      \"The PhoneNumber field is not a valid phone number.\"\n    ]\n  },\n  \"traceId\": \"00-8bafbe8952051318d15ddb570d2872b0-369effbb9978122b-00\"\n}\n```", "```cs\ndotnet add package FluentValidation\n```", "```cs\npublic class UserValidator : AbstractValidator<User>{\n    public UserValidator()\n    {\n        RuleFor(u => u.FirstName)\n            .NotEmpty()\n            .WithMessage(\"The FirstName field is required.\")\n            .Length(3, 50)\n            .WithMessage(\"The length of FirstName must be between 3 and 50.\");\n        // Omitted other rules for brevity\n        // Create a custom rule to validate the Country and PhoneNumber. If the country is New Zealand, the phone number must start with 64.\n        RuleFor(u => u)\n            .Custom((user, context) =>\n            {\n                if (user.Country.ToLower() == \"new zealand\" && !user.PhoneNumber.StartsWith(\"64\"))\n                {\n                    context.AddFailure(\"The phone number must start with 64 for New Zealand users.\");\n                }\n            });\n    }\n}\n```", "```cs\nbuilder.Services.AddScoped<IValidator<User>, UserValidator>();\n```", "```cs\ndotnet add package FluentValidation.DependencyInjectionExtensions\n```", "```cs\nbuilder.Services.AddValidatorsFromAssemblyContaining<UserValidator>();\n```", "```cs\n[HttpPost]public async Task<ActionResult<User>> Post(User user)\n{\n    var validationResult = await _validator.ValidateAsync(user);\n    if (!validationResult.IsValid)\n    {\n        return BadRequest(new ValidationProblemDetails(validationResult.ToDictionary()));\n    }\n    user.Id = Users.Max(u => u.Id) + 1;\n    Users.Add(user);\n    return CreatedAtRoute(\"\", new { id = user.Id }, user);\n}\n```", "```cs\n{  \"firstName\": \"ab\",\n  \"lastName\": \"xy\",\n  \"age\": 20,\n  \"email\": \"user-example.com\",\n  \"country\": \"New Zealand\",\n  \"phoneNumber\": \"12345678\"\n}\n```", "```cs\n{  \"title\": \"One or more validation errors occurred.\",\n  \"status\": 400,\n  \"errors\": {\n    \"FirstName\": [\n      \"The length of LastName must be between 3 and 50.\"\n    ],\n    \"LastName\": [\n      \"The length of LastName must be between 3 and 50.\"\n    ],\n    \"Email\": [\n      \"The Email field is not a valid e-mail address.\"\n    ],\n    \"\": [\n      \"The phone number must start with 64 for New Zealand users.\"\n    ]\n  }\n}\n```", "```cs\nbuilder.Services.AddHealthChecks();var app = builder.Build();\napp.MapHealthChecks(\"healthcheck\");\n```", "```cs\npublic interface IHealthCheck{\n    Task<HealthCheckResult> CheckHealthAsync(\n        HealthCheckContext context,\n        CancellationToken cancellationToken = default);\n}\n```", "```cs\npublic class OtherServiceHealthCheck(IHttpClientFactory httpClientFactory) : IHealthCheck{\n    public async Task<HealthCheckResult> CheckHealthAsync(\n        HealthCheckContext context,\n        CancellationToken cancellationToken = default)\n    {\n        var client = httpClientFactory.CreateClient(\"JsonPlaceholder\");\n        var response = await client.GetAsync(\"posts\", cancellationToken);\n        return response.IsSuccessStatusCode\n            ? HealthCheckResult.Healthy(\"A healthy result.\")\n            : HealthCheckResult.Unhealthy(\"An unhealthy result.\");\n    }\n}\n```", "```cs\nbuilder.Services.AddHealthChecks()    .AddCheck<OtherServiceHealthCheck>(\"OtherService\");\n// Omitted other code for brevity\napp.MapHealthChecks(\"/other-service-health-check\",\n    new HealthCheckOptions() { Predicate = healthCheck => healthCheck.Name == \"OtherService\" });\n```", "```cs\nbuilder.Services.AddHealthChecks()    .AddCheck<OtherServiceHealthCheck>(\"OtherService\", tags: new[] { \"other-service\" })\n    .AddCheck<OtherService2HealthCheck>(\"OtherService2\", tags: new[] { \"other-service\" });\n    .AddCheck<OtherService3HealthCheck>(\"OtherService3\", tags: new[] { \"other-service\" });\n```", "```cs\napp.MapHealthChecks(\"/other-services-health-check\",    new HealthCheckOptions() { Predicate = healthCheck => healthCheck.Tags.Contains(\"other-service\") });\n```", "```cs\ndotnet add package Microsoft.Extensions.Diagnostics.HealthChecks.EntityFrameworkCore\n```", "```cs\nbuilder.Services.AddDbContext<InvoiceDbContext>(options =>    options.UseSqlServer(builder.Configuration.GetConnectionString(\"DefaultConnection\")));\n```", "```cs\nbuilder.Services.AddHealthChecks().AddDbContextCheck<InvoiceDbContext>(\"Database\", tags: new[] { \"database\" });\n```", "```cs\napp.MapHealthChecks(\"/database-health-checks\",    new HealthCheckOptions() { Predicate = healthCheck => healthCheck.Tags.Contains(\"database\") });\n```", "```cs\nlivenessProbe:  httpGet:\n    path: /liveness\n    port: 8080\n    httpHeaders:\n    - name: Custom-Header\n      value: X-Health-Check\n  initialDelaySeconds: 3\n  periodSeconds: 5\n  timeoutSeconds: 1\n  successThreshold: 1\n  failureThreshold: 3\n```", "```cs\nreadinessProbe:  httpGet:\n    path: /readiness\n    port: 8080\n    httpHeaders:\n    - name: Custom-Header\n      value: X-Health-Check\n  initialDelaySeconds: 5\n  periodSeconds: 5\n  timeoutSeconds: 1\n  successThreshold: 3\n  failureThreshold: 2\n```", "```cs\nstartupProbe:  httpGet:\n    path: /startup\n    port: 8080\n    httpHeaders:\n    - name: Custom-Header\n      value: X-Health-Check\n  periodSeconds: 5\n  timeoutSeconds: 1\n  successThreshold: 1\n  failureThreshold: 30\n```", "```cs\ndotnet add package OpenTelemetry.Instrumentation.AspNetCore --prereleasedotnet add package OpenTelemetry.Instrumentation.Http --prerelease\ndotnet add package OpenTelemetry.Exporter.OpenTelemetryProtocol\ndotnet add package OpenTelemetry.Exporter.Console\ndotnet add package OpenTelemetry.Extensions.Hosting\n```", "```cs\npublic class InvoiceMetrics{\n    private readonly Counter<long> _invoiceCreateCounter;\n    private readonly Counter<long> _invoiceReadCounter;\n    private readonly Counter<long> _invoiceUpdateCounter;\n    private readonly Counter<long> _invoiceDeleteCounter;\n    public InvoiceMetrics(ImeterFactory meterFactory)\n    {\n        var meter = meterFactory.Create(\"MyWebApiDemo.Invoice\");\n        _invoiceCreateCounter = meter.CreateCounter<long>(\"mywebapidemo.invoices.created\");\n        _invoiceReadCounter = meter.CreateCounter<long>(\"mywebapidemo.invoices.read\");\n        _invoiceUpdateCounter = meter.CreateCounter<long>(\"mywebapidemo.invoices.updated\");\n        _invoiceDeleteCounter = meter.CreateCounter<long>(\"mywebapidemo.invoices.deleted\");\n    }\n    public void IncrementCreate()\n    {\n        _invoiceCreateCounter.Add(1);\n    }\n    public void IncrementRead()\n    {\n        _invoiceReadCounter.Add(1);\n    }\n    // Omitted other methods for brevity\n}\n```", "```cs\nbuilder.Services.AddOpenTelemetry()    .ConfigureResource(config =>\n    {\n        config.AddService(nameof(MyWebApiDemo));\n    })\n    .WithMetrics(b =>\n    {\n        b.AddConsoleExporter();\n        b.AddAspNetCoreInstrumentation();\n        b.AddMeter(\"Microsoft.AspNetCore.Hosting\",\n            \"Microsoft.AspNetCore.Server.Kestrel\",\n            \"MyWebApiDemo.Invoice\");\n    });\nbuilder.Services.AddSingleton<InvoiceMetrics>();\n```", "```cs\n[HttpPost]public async Task<ActionResult<Invoice>> Post(Invoice invoice)\n{\n    // Omitted for brevity\n    await dbContext.SaveChangesAsync();\n    // Instrumentation\n    _invoiceMetrics.IncrementCreate();\n    return CreatedAtAction(nameof(Get), new { id = invoice.Id }, invoice);\n}\n```", "```cs\ndotnet tool install --global dotnet-counters\n```", "```cs\ndotnet-counters monitor -n MyWebApiDemo --counters Microsoft.AspNetCore.Hosting\n```", "```cs\nPress p to pause, r to resume, q to quit.    Status: Running\n[Microsoft.AspNetCore.Hosting]\n    http.server.active_requests ({request})\n        http.request.method=GET,url.scheme=https                           0\n        http.request.method=POST,url.scheme=https                          0\n    http.server.request.duration (s)\n        http.request.method=GET,http.response.status_code=200,ht           0.006\n        http.request.method=GET,http.response.status_code=200,ht           0.006\n        http.request.method=GET,http.response.status_code=200,ht           0.006\n        http.request.method=POST,http.response.status_code=201,h           0.208\n        http.request.method=POST,http.response.status_code=201,h           0.208\n        http.request.method=POST,http.response.status_code=201,h           0.208\n```", "```cs\ndotnet-counters monitor -n MyWebApiDemo --counters MyWebApiDemo.Invoice\n```", "```cs\nPress p to pause, r to resume, q to quit.    Status: Running\n[MyWebApiDemo.Invoice]\n    mywebapidemo.invoices.created (Count / 1 sec)                    0\n    mywebapidemo.invoices.read (Count / 1 sec)                       0\n```", "```cs\ndotnet-counters monitor -n MyWebApiDemo --counters Microsoft.AspNetCore.Hosting,MyWebApiDemo.Invoice\n```", "```cs\nprivate readonly UpDownCounter<long> _invoiceRequestUpDownCounter;public InvoiceMetrics(IMeterFactory meterFactory)\n{\n    // Omitted for brevity\n    _invoiceRequestUpDownCounter = meter.CreateUpDownCounter<long>(\"mywebapidemo.invoices.requests\");\n}\npublic void IncrementRequest()\n{\n    _invoiceRequestUpDownCounter.Add(1);\n}\npublic void DecrementRequest()\n{\n    _invoiceRequestUpDownCounter.Add(-1);\n}\n```", "```cs\n[HttpGet(\"{id}\")]public async Task<ActionResult<Invoice>> Get(Guid id)\n{\n    _invoiceMetrics.IncrementRequest();\n    // Omitted for brevity\n    _invoiceMetrics.DecrementRequest();\n    return Ok(result);\n}\n```", "```cs\nprivate readonly Histogram<double> _invoiceRequestDurationHistogram;public InvoiceMetrics(IMeterFactory meterFactory)\n{\n    // Omitted for brevity\n    _invoiceRequestDurationHistogram = meter.CreateHistogram<double>(\"mywebapidemo.invoices.request_duration\");\n}\npublic void RecordRequestDuration(double duration)\n{\n    _invoiceRequestDurationHistogram.Record(duration);\n}\n```", "```cs\n[HttpGet(\"{id}\")]public async Task<ActionResult<Invoice>> Get(Guid id)\n{\n    var stopwatch = Stopwatch.StartNew();\n    // Omitted for brevity\n    // Simulate a latency\n    await Task.Delay(_random.Next(0, 500));\n    // Omitted for brevity\n    stopwatch.Stop();\n    _invoiceMetrics.RecordRequestDuration(stopwatch.Elapsed.TotalMilliseconds);\n    return Ok(result);\n}\n```", "```cs\nPress p to pause, r to resume, q to quit.    Status: Running\n[Microsoft.AspNetCore.Hosting]\n    http.server.active_requests ({request})\n        http.request.method=GET,url.scheme=https                           0\n        http.request.method=POST,url.scheme=https                          0\n    http.server.request.duration (s)\n        http.request.method=GET,http.response.status_code=200,ht           0.075\n        http.request.method=GET,http.response.status_code=200,ht           0.24\n        http.request.method=GET,http.response.status_code=200,ht           0.24\n        http.request.method=POST,http.response.status_code=201,h           0.06\n        http.request.method=POST,http.response.status_code=201,h           0.06\n        http.request.method=POST,http.response.status_code=201,h           0.06\n[MyWebApiDemo.Invoice]\n    mywebapidemo.invoices.created (Count / 1 sec)                          0\n    mywebapidemo.invoices.read (Count / 1 sec)                             0\n    mywebapidemo.invoices.request_duration\n        Percentile=50                                                     74.25\n        Percentile=95                                                    239.5\n        Percentile=99                                                    239.5\n    mywebapidemo.invoices.requests                                         0\n```", "```cs\ndotnet add package OpenTelemetry.Exporter.Prometheus.AspNetCore --prerelease\n```", "```cs\nbuilder.Services.AddOpenTelemetry()    .ConfigureResource(config =>\n    {\n        config.AddService(nameof(MyWebApiDemo));\n    })\n    .WithMetrics(metrics =>\n    {\n        metrics.AddAspNetCoreInstrumentation()\n            .AddMeter(\"Microsoft.AspNetCore.Hosting\")\n            .AddMeter(\"Microsoft.AspNetCore.Server.Kestrel\")\n            .AddMeter(\"MyWebApiDemo.Invoice\")\n            .AddConsoleExporter()\n            .AddPrometheusExporter();\n    });\n// Omitted for brevity\n// Add the Prometheus scraping endpoint\napp.MapPrometheusScrapingEndpoint();\n```", "```cs\n- job_name: 'MyWebApiDemo'  scrape_interval: 5s # Set the scrape interval to 5 seconds so we can see the metrics update immediately.\n  static_configs:\n]\n```", "```cs\n- job_name: 'MyWebApiDemo'  scrape_interval: 5s # Set the scrape interval to 5 seconds so we can see the metrics update immediately.\n  scheme: https\n  static_configs:\n    - targets: ['localhost:7003']\n```", "```cs\nts=2023-10-14T10:44:55.133Z caller=web.go:566 level=info component=web msg=\"Start listening for connections\" address=0.0.0.0:9090\n```", "```cs\nrate(mywebapidemo_invoices_read_total[1m])\n```", "```cs\nhistogram_quantile(0.95, sum(rate(mywebapidemo_invoices_request_duration_bucket[1m])) by (le)) > 100\n```", "```cs\nINFO [10-15|12:31:31] Validated license token                  logger=licensing appURL=http://localhost:3000/ source=disk status=NotFound\n```", "```cs\nbuilder.Services.AddOpenTelemetry()    .ConfigureResource(config =>\n    {\n        config.AddService(nameof(MyWebApiDemo));\n    })\n    .WithMetrics(metrics =>\n    {\n        // Omitted for brevity\n    })\n    .WithTracing(tracing =>\n    {\n        tracing.AddAspNetCoreInstrumentation()\n            .AddHttpClientInstrumentation()\n            .AddConsoleExporter();\n    });\n```", "```cs\n./jaeger-all-in-one --collector.otlp.enabled\n```", "```cs\n{\"level\":\"info\",\"ts\":1697354213.8840668,\"caller\":\"otlpreceiver@v0.86.0/otlp.go:83\",\"msg\":\"Starting GRPC server\",\"endpoint\":\"0.0.0.0:4317\"}\n```", "```cs\n.WithTracing(tracing =>{\n    tracing.AddAspNetCoreInstrumentation()\n        .AddHttpClientInstrumentation()\n        .AddConsoleExporter()\n        .AddOtlpExporter(options =>\n        {\n            options.Endpoint = new Uri(\"http://localhost:4317\");\n        });\n});\n```", "```cs\n{  \"id\": 0,\n  \"orderNumber\": \"string\",\n  \"contactName\": \"string\",\n  \"description\": \"string\",\n  \"amount\": 0,\n  \"customerId\": 1,\n  \"orderDate\": \"2023-10-15T08:57:54.724Z\",\n  \"dueDate\": \"2023-10-15T08:57:54.724Z\",\n  \"orderItems\": [\n    {\n      \"id\": 1,\n      \"orderId\": 0,\n      \"productId\": 1,\n      \"quantity\": 0,\n      \"unitPrice\": 0\n    }\n  ],\n  \"status\": 0\n}\n```", "```cs\nvar logger = new LoggerConfiguration().WriteTo.Seq(\"http://localhost:5341\").CreateLogger();builder.Logging.AddSerilog(logger);\nbuilder.Services.AddHttpLogging(logging =>\n{\n    logging.LoggingFields = HttpLoggingFields.All;\n});\n// Omitted for brevity\napp.UseHttpLogging();\n```", "```cs\n\"Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware\": \"Information\"\n```", "```cs\n@TraceId = '8c7ab3bccf13135f27baf11c161e17ca'\n```", "```cs\n\"APPLICATIONINSIGHTS_CONNECTION_STRING\": \"InstrumentationKey=xxxxx\"\n```", "```cs\ndotnet add package Azure.Monitor.OpenTelemetry.AspNetCore --prerelease\n```", "```cs\nbuilder.Services.AddOpenTelemetry()    // Omitted for brevity\n    .UseAzureMonitor()\n```"]