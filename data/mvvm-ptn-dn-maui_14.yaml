- en: '14'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '14'
- en: Troubleshooting and Debugging Tips
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 故障排除和调试技巧
- en: Congratulations on making it this far in your journey to mastering the MVVM
    pattern in .NET MAUI! By now, you’ve learned about the intricacies of data binding,
    dependency injection, converters, and various other components that make up your
    *Recipes!* app. However, as any seasoned developer will tell you, even the most
    experienced experts encounter roadblocks from time to time.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你在掌握.NET MAUI中MVVM模式的旅程中走这么远！到目前为止，你已经了解了数据绑定、依赖注入、转换器以及构成你的*Recipes!*应用的各个组件的复杂性。然而，正如任何经验丰富的开发者都会告诉你的，即使是经验最丰富的专家有时也会遇到障碍。
- en: MVVM, with all its benefits, can sometimes feel like navigating a complex maze.
    When you encounter issues, it’s not always obvious where to find the root cause
    or how to fix it. That’s where this chapter comes in. In this short but invaluable
    chapter, we’ll shine a light on common pitfalls and challenges you may face during
    your MVVM journey.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管MVVM拥有所有这些好处，但它有时可能感觉像是在一个复杂的迷宫中导航。当你遇到问题时，并不总是明显知道要找到根本原因或如何修复它。这正是本章的作用所在。在本章这个简短但非常有价值的章节中，我们将揭示你在MVVM之旅中可能遇到的常见陷阱和挑战。
- en: 'We’ll explore three areas where issues often tend to occur:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将探讨三个经常出现问题的领域：
- en: Common data binding issues
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常见的数据绑定问题
- en: Services and Dependency Injection pitfalls
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务和依赖注入陷阱
- en: Frequent custom control and converter problems
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 频繁的自定义控件和转换器问题
- en: Let’s get started on our journey through these common stumbling blocks. By the
    end of this chapter, you’ll be better equipped to troubleshoot and conquer the
    challenges that MVVM in .NET MAUI may throw your way.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始解决这些常见障碍的旅程。到本章结束时，你将更好地装备自己，以解决.NET MAUI中MVVM可能带来的挑战。
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To ensure you’re in sync with the upcoming content, make your way to our GitHub
    repository at [https://github.com/PacktPublishing/MVVM-pattern-.NET-MAUI/tree/main/Chapter14](https://github.com/PacktPublishing/MVVM-pattern-.NET-MAUI/tree/main/Chapter14).
    Kick off with the materials in the `Start` folder. And remember, if you’re ever
    in need of a consolidated reference, the `Finish` folder holds the final, refined
    code at the chapter’s close.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保你与即将到来的内容保持同步，请前往我们的GitHub仓库[https://github.com/PacktPublishing/MVVM-pattern-.NET-MAUI/tree/main/Chapter14](https://github.com/PacktPublishing/MVVM-pattern-.NET-MAUI/tree/main/Chapter14)。从`Start`文件夹中的材料开始。记住，如果你需要综合参考，`Finish`文件夹在章节结束时包含了最终的、精炼的代码。
- en: Common data binding issues
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见的数据绑定问题
- en: 'One of the cornerstones of the MVVM pattern is data binding. It forms the link
    between your View and ViewModel, ensuring seamless communication between them.
    While data binding offers powerful capabilities, it’s also an area where developers
    often face challenges. This section aims to shed light on common data binding
    and ViewModel issues and how to troubleshoot them:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: MVVM模式的一个基石是数据绑定。它形成了你的View和ViewModel之间的联系，确保它们之间无缝的通信。虽然数据绑定提供了强大的功能，但它也是开发者经常面临挑战的领域。本节旨在阐明常见的数据绑定和ViewModel问题以及如何解决它们：
- en: '**Typos and mismatched names**: One of the simplest yet surprisingly common
    issues developers encounter is typos or mismatched property names. A small typo
    in your XAML markup or ViewModel code can disrupt the entire data binding process.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错别字和名称不匹配**：开发者遇到的最简单但意外常见的问题之一是错别字或属性名称不匹配。你XAML标记或ViewModel代码中的一个小错误可能会破坏整个数据绑定过程。'
- en: '`OneWay`, `TwoWay`, and `OneTime`, each with its own purpose, as we’ve seen
    in [*Chapter 4*](B20941_04.xhtml#_idTextAnchor069), *Data Binding in .NET MAUI*.
    Using the wrong mode can lead to unexpected behavior in your app.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OneWay`、`TwoWay`和`OneTime`，每个都有其自己的用途，正如我们在[*第4章*](B20941_04.xhtml#_idTextAnchor069)中看到的，*在.NET
    MAUI中的数据绑定*。使用错误的模式可能导致你的应用出现意外的行为。'
- en: '`int` to a property of type `Color` on a UI control won’t work, despite XAML
    supporting implicit type conversion in certain cases.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽管XAML在某些情况下支持隐式类型转换，但将`int`转换为UI控件上的`Color`属性类型将不起作用。
- en: '`PropertyChanged` events. What happens when these events don’t trigger as expected?
    The View will not be updated to reflect the changes in the ViewModel’s data.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PropertyChanged`事件。当这些事件没有按预期触发时会发生什么？View将不会更新以反映ViewModel数据中的更改。'
- en: '`ObservableCollection`. Make sure your collections update correctly and avoid
    the pitfall of inadvertently assigning a new `ObservableCollection`.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ObservableCollection`。确保你的集合正确更新，并避免无意中分配新的`ObservableCollection`。'
- en: '`ListView` or `CollectionView`, keep in mind that each item in the collection
    creates its own data binding scope. This means that when attempting to bind a
    property or command that resides in the ViewModel rather than the individual item,
    you’ll need to use techniques such as relative or element binding to correctly
    reference the desired context.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ListView`或`CollectionView`，请注意，集合中的每个项目都会创建自己的数据绑定作用域。这意味着当尝试绑定位于 ViewModel
    而不是单个项目中的属性或命令时，您需要使用相对或元素绑定等技术来正确引用所需上下文。'
- en: '**Data binding in behaviors**: Behaviors exist outside the visual tree, which
    means they do not have the same capability for locating ancestors as other UI
    elements do.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在行为中的数据绑定**：行为存在于视觉树之外，这意味着它们没有与其他 UI 元素相同的定位祖先的能力。'
- en: Note
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Some of these pitfalls, such as typos in property names and binding incompatible
    data types, can be avoided by leveraging compiled bindings, as stipulated in [*Chapter
    4*](B20941_04.xhtml#_idTextAnchor069), *Data Binding in .**NET MAUI*.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用编译绑定，如[*第 4 章*](B20941_04.xhtml#_idTextAnchor069)中所述的，*在 .NET MAUI 中的数据绑定*，可以避免一些陷阱，例如属性名中的拼写错误和绑定不兼容的数据类型。
- en: As you can see, a lot of issues related to data binding can arise. Luckily,
    some of them aren’t that hard to spot and fix, as long as you know where to look.
    Let’s start off by looking at some tools in Visual Studio.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，与数据绑定相关的问题可能很多。幸运的是，其中一些问题并不难发现和修复，只要您知道该往哪里看。让我们从查看 Visual Studio 中的某些工具开始。
- en: Checking the Output and XAML Binding Failures window
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查输出和 XAML 绑定失败窗口
- en: 'With both the **Output** window and **XAML Binding Failures** window in Visual
    Studio, typos or mismatched property names can easily be spotted. Here’s how:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中，使用**输出**窗口和**XAML 绑定失败**窗口，可以轻松地发现拼写错误或属性名不匹配。以下是方法：
- en: 'Let’s first introduce two faulty data binding statements in our code. On `RecipesOverviewPage`,
    update the `Image` and `Label` elements in the `CollectionView`’s `ItemTemplate`,
    as shown here:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们先在我们的代码中引入两个错误的数据绑定语句。在`RecipesOverviewPage`中，更新`CollectionView`的`ItemTemplate`中的`Image`和`Label`元素，如下所示：
- en: '[PRE0]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Run the app. While the app is running, head over to Visual Studio and open
    up the **Output** window. If it’s not already open, you can open it through **Debug**
    | **Windows** | **Output**. Notice the following:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用。当应用正在运行时，前往 Visual Studio 并打开**输出**窗口。如果尚未打开，您可以通过**调试**|**窗口**|**输出**来打开它。注意以下内容：
- en: '[PRE1]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Alternatively, let’s have a look at the **XAML Binding Failures** window in
    Visual Studio. This can be opened through **Debug** | **Windows** | **XAML Binding
    Failures**. *Figure 14**.1* shows what this window looks like:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 或者，让我们看看 Visual Studio 中的**XAML 绑定失败**窗口。可以通过**调试**|**窗口**|**XAML 绑定失败**来打开。*图
    14*.1 展示了此窗口的外观：
- en: '![Figure 14.1: XAML Binding Failures window](img/B20941_14_01.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.1：XAML 绑定失败窗口](img/B20941_14_01.jpg)'
- en: 'Figure 14.1: XAML Binding Failures window'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.1：XAML 绑定失败窗口
- en: This window gives us the same information as the **Output** window. Additionally,
    it shows extra information such as where the failing binding statement is located
    and how many times this issue has occurred. The best thing about this window?
    When clicking on an item in this list, Visual Studio will open the XAML file where
    the faulty binding statement is located and will put the pointer on the exact
    data binding statement that contains the error.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 此窗口提供的信息与**输出**窗口相同。此外，它还显示了额外信息，例如失败的绑定语句所在位置以及此问题发生次数。这个窗口最好的地方是什么？当点击此列表中的项目时，Visual
    Studio 将打开包含错误绑定语句的 XAML 文件，并将指针放在包含错误的确切数据绑定语句上。
- en: Whenever you have a binding failure in your application, the **XAML Binding
    Failures** window and the **Output** window in Visual Studio will provide information
    about what went wrong. The **XAML Binding Failures** window, especially, provides
    immediate insight into typos, missing properties, or data type issues. Always
    keep an eye on this window when developing your views.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 无论何时您的应用程序中出现绑定失败，Visual Studio 中的**XAML 绑定失败**窗口和**输出**窗口都会提供有关错误的信息。特别是**XAML
    绑定失败**窗口，可以立即提供关于拼写错误、缺失属性或数据类型问题的洞察。在开发视图时，始终关注此窗口。
- en: Another way to troubleshoot or debug data binding issues is by creating and
    leveraging a specialized converter. Let’s have a look!
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种解决或调试数据绑定问题的方法是创建并利用专门的转换器。让我们看看吧！
- en: Debugging with a DoNothingConverter
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 DoNothingConverter 进行调试
- en: 'A `DoNothingConverter` is an invaluable tool for debugging. By placing it in
    your binding pipeline, you can inspect the values being passed during the binding
    process. If you see unexpected values or none at all, it can help pinpoint where
    the breakdown occurs. Here’s the implementation of the `DoNothingConverter`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`DoNothingConverter` 是一个宝贵的调试工具。通过将其放置在绑定管道中，您可以检查绑定过程中传递的值。如果您看到意外的值或根本没有值，这可以帮助确定故障发生的位置。以下是
    `DoNothingConverter` 的实现：'
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To add and use this converter in your binding statements, follow these steps:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加和使用此转换器到您的绑定语句中，请按照以下步骤操作：
- en: 'Add a `DoNothingConverter` to the `Resources` of the page where you want to
    debug a binding statement. Here’s how we can add it to `RecipesOverviewPage`:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `DoNothingConverter` 添加到您想要调试绑定语句的页面的 `Resources` 中。以下是将其添加到 `RecipesOverviewPage`
    的方法：
- en: '[PRE3]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Add the converter to the binding statement you want to debug, as shown here:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将转换器添加到您想要调试的绑定语句中，如下所示：
- en: '[PRE4]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Insert a breakpoint in the `Convert` or `ConvertBack` method of the `DoNothingConverter`.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `DoNothingConverter` 的 `Convert` 或 `ConvertBack` 方法中插入断点。
- en: If the breakpoint is hit during runtime, it indicates a successful binding to
    an existing property on the ViewModel. You’ll notice that the breakpoint in the
    `Convert` method will not be hit for the `Titel` binding as this property doesn’t
    exist.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果在运行时遇到断点，这表明成功绑定到 ViewModel 上的现有属性。您会注意到，在 `Convert` 方法中的断点不会因为 `Titel` 绑定而触发，因为这个属性不存在。
- en: If the breakpoint isn’t hit on subsequent updates of the property value, check
    the binding mode of the statement and ensure that the `PropertyChanged` method
    is triggered when the property gets updated.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果在属性值后续更新时没有遇到断点，请检查语句的绑定模式，并确保当属性更新时触发 `PropertyChanged` 方法。
- en: When the breakpoint is hit, you can easily inspect the bound value and compare
    it to your expectations.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当断点被触发时，您可以轻松检查绑定的值并将其与您的预期进行比较。
- en: You can also examine the `targetType` parameter, which represents the type of
    the target property. Keep in mind that while XAML supports implicit type conversion
    in certain cases, it’s essential to be aware of the specific conversions supported.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以检查 `targetType` 参数，它表示目标属性的类型。请注意，虽然 XAML 在某些情况下支持隐式类型转换，但了解支持的特定转换是至关重要的。
- en: The `ConvertBack` method should be called when the property on the UI controls
    is updated and the binding mode is set to `TwoWay` or `OneWayToSource`. If you
    expect this to work but the `ConvertBack` method is not called, check the binding
    statement’s binding mode.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当 UI 控件上的属性更新且绑定模式设置为 `TwoWay` 或 `OneWayToSource` 时，应调用 `ConvertBack` 方法。如果您期望这能正常工作，但
    `ConvertBack` 方法没有调用，请检查绑定语句的绑定模式。
- en: By following these steps and utilizing the `DoNothingConverter` tool, you can
    effectively troubleshoot data binding issues in your MVVM application.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循这些步骤并使用 `DoNothingConverter` 工具，您可以有效地解决 MVVM 应用中的数据绑定问题。
- en: 'Let’s discuss another cause of potential data binding issues: collections.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论另一个可能导致数据绑定问题的原因：集合。
- en: Troubleshooting collections
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决集合问题
- en: When working with collections, especially `ObservableCollection`, developers
    frequently encounter challenges related to updates and bindings.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当与集合一起工作时，尤其是 `ObservableCollection`，开发者经常会遇到与更新和绑定相关的挑战。
- en: 'If you’re using an `ObservableCollection` or any collection implementing the
    `INotifyCollectionChanged` interface, it’s usually assigned once during the initialization
    of your ViewModel. Here’s an important nuance to keep in mind: the setter for
    this property doesn’t trigger the `PropertyChanged` event. Instead, when you add
    or remove items from the collection, it triggers the `CollectionChanged` event
    on the collection instance. This event, in turn, updates the bound control, assuming
    it supports binding to `ObservableCollection`. To verify whether a specific control
    works well with the `INotifyCollectionChanged` interface, consult the control’s
    documentation.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用 `ObservableCollection` 或任何实现 `INotifyCollectionChanged` 接口的集合，它通常在 ViewModel
    的初始化过程中分配一次。这里有一个需要记住的重要细节：这个属性的设置器不会触发 `PropertyChanged` 事件。相反，当您向集合中添加或删除项目时，它会在集合实例上触发
    `CollectionChanged` 事件。此事件随后更新绑定的控件，假设它支持绑定到 `ObservableCollection`。要验证特定控件是否与
    `INotifyCollectionChanged` 接口良好协作，请查阅控件文档。
- en: 'However, there’s a critical point to be aware of: if the `ObservableCollection`
    is assigned anew, the binding will effectively be *lost*, unless, of course, the
    `PropertyChanged` event is properly raised. This means that if you reassign the
    entire collection with a new instance of `ObservableCollection`, you need to ensure
    that the `PropertyChanged` event is correctly triggered. To check whether this
    event is effectively raised, you can utilize the `DoNothingConverter`.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有一个关键点需要注意：如果重新分配 `ObservableCollection`，绑定将实际上会丢失，除非当然，`PropertyChanged`
    事件被正确触发。这意味着如果您使用 `ObservableCollection` 的新实例重新分配整个集合，您需要确保 `PropertyChanged`
    事件被正确触发。为了检查此事件是否有效触发，您可以使用 `DoNothingConverter`。
- en: In contrast, when you’re working with a collection that doesn’t implement `INotifyCollectionChanged`
    (as in the case of a standard `List` or similar collections), adding or removing
    items won’t be automatically detected by the UI layer. In this scenario, the `PropertyChanged`
    event must be explicitly triggered when items are added to or removed from the
    collection. Consequently, the entire list will be re-rendered in the UI when you
    make changes.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，当您处理一个没有实现 `INotifyCollectionChanged` 的集合（例如标准 `List` 或类似的集合）时，添加或删除项目将不会被
    UI 层自动检测。在这种情况下，当向集合中添加或从集合中删除项目时，必须显式触发 `PropertyChanged` 事件。因此，当您进行更改时，整个列表将在
    UI 中重新渲染。
- en: When troubleshooting issues related to collections, pay close attention to whether
    you’re using `ObservableCollection` or non-observable collections, and ensure
    that you trigger the appropriate events to keep your ViewModel and UI in sync.
    Understanding these dynamics will help you navigate the complexities of collections
    in your MVVM application more effectively and prevent potential issues.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理与集合相关的问题时，请密切关注您是否正在使用 `ObservableCollection` 或非可观察集合，并确保您触发了适当的事件以保持 ViewModel
    和 UI 保持同步。理解这些动态将帮助您更有效地导航 MVVM 应用程序中集合的复杂性，并防止潜在的问题。
- en: When working with collections, remember that you don’t need to trigger a `PropertyChanged`
    event on the collection itself when a property of an item within the collection
    changes. Instead, the key lies in raising the `PropertyChanged` event on the instance
    of the specific item that underwent modification. This ensures that the UI is
    notified of changes at the item level and reflects the updated state accurately.
    In essence, you’re focusing the update event precisely where it matters, minimizing
    unnecessary updates to the entire collection.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当与集合一起工作时，请记住，当集合中某个项目的属性发生变化时，您不需要在集合本身上触发 `PropertyChanged` 事件。相反，关键在于在经过修改的特定项目的实例上引发
    `PropertyChanged` 事件。这确保了 UI 被通知到项目级别的更改，并准确地反映了更新后的状态。本质上，您正在将更新事件精确地集中在需要的地方，最小化对整个集合的不必要更新。
- en: The data binding pitfall on Behaviors
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Behaviors 上的数据绑定陷阱
- en: 'It’s very easy to oversee this while writing XAML, but relative source binding
    won’t work on Behaviors. That is because Behaviors exist outside the visual tree.
    In fact, a Behavior can even be reused by multiple UI elements, hence a relative
    source binding won’t be able to retrieve a parent object. When applying relative
    source binding to a Behavior, your app will crash, preceded by an exception of
    type `System.InvalidOperationException`. The exception states the following: **Operation
    is not valid due to the current state of the object**. This exception alongside
    this message should be an indication that there is a faulty data binding statement
    defined on a Behavior. There will be no further indication in the exception or
    in the **Output** window whatsoever. The only thing you can do is systematically
    go through the Behaviors in your code and look at their binding statements.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写 XAML 时很容易忽略这一点，但相对源绑定在 Behaviors 上不起作用。这是因为 Behaviors 存在于视觉树之外。实际上，一个 Behavior
    可以被多个 UI 元素重用，因此相对源绑定将无法检索父对象。当将相对源绑定应用于 Behavior 时，您的应用程序将崩溃，并在崩溃之前出现类型为 `System.InvalidOperationException`
    的异常。该异常指出以下内容：**由于对象当前的状态，操作无效**。这个异常以及此消息应该是一个迹象，表明在 Behavior 上定义了一个错误的数据绑定语句。在异常或
    **输出** 窗口中将没有任何进一步的指示。您唯一能做的就是系统地遍历代码中的 Behaviors 并查看它们的绑定语句。
- en: 'In many cases, the relative source binding can be replaced by element binding,
    as demonstrated here:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，相对源绑定可以被元素绑定所替代，如下所示：
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: <ContentView
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: <ContentView
- en: '...'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: x:Name="root">
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: x:Name="root">
- en: '...'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: <toolkit:IconTintColorBehavior
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: <toolkit:IconTintColorBehavior
- en: TintColor="{Binding IsFavorite,
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: TintColor="{Binding IsFavorite,
- en: Source={x:Reference root},
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 源={x:Reference root},
- en: Converter=...}" />
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 转换器=...}" />
- en: '...'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: </ContentView>
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: </ContentView>
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: public static readonly BindableProperty
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: public static readonly BindableProperty
- en: IsFavoriteProperty =
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: IsFavoriteProperty =
- en: BindableProperty.Create(nameof(IsFavorite), …);
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可绑定属性创建(nameof(IsFavorite), …);
- en: public bool IsFavorite
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: public bool IsFavorite
- en: '{'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{'
- en: '...'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '...'
- en: '}'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE7]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: public static readonly BindableProperty
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: public static readonly BindableProperty
- en: IsFavoriteProperty =
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: IsFavoriteProperty =
- en: BindableProperty.Create(nameof(IsFavorite),
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可绑定属性创建(nameof(IsFavorite),
- en: typeof(bool), …);
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: typeof(bool), …);
- en: public bool IsFavorite
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: public bool IsFavorite
- en: '{'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{'
- en: '...'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '...'
- en: '}'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE8]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'public partial class FavoriteControl : ContentView'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'public partial class FavoriteControl : ContentView'
- en: '{'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{'
- en: public static readonly BindableProperty
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: public static readonly BindableProperty
- en: IsFavoriteProperty =
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: IsFavoriteProperty =
- en: BindableProperty.Create(...
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: BindableProperty.Create(...
- en: typeof(FavoriteControl),...);
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: typeof(FavoriteControl),...);
- en: public bool IsFavorite
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: public bool IsFavorite
- en: '{'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{'
- en: '...'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '...'
- en: '}'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE9]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: public static readonly BindableProperty IsFavoriteProperty = ...
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: public static readonly BindableProperty IsFavoriteProperty = ...
- en: public bool IsFavorite
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: public bool IsFavorite
- en: '{'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{'
- en: get => (bool)GetValue(IsFavoriteProperty);
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: get => (bool)GetValue(IsFavoriteProperty);
- en: set => SetValue(IsFavoriteProperty, value);
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: set => SetValue(IsFavoriteProperty, value);
- en: '}'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE10]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: <Image
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: <Image
- en: HeightRequest="{Binding HeightRequest,
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: HeightRequest="{Binding HeightRequest,
- en: Source={x:Reference icon}}"
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 源={x:Reference icon}}"
- en: IsVisible="{Binding IsInteractive,
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: IsVisible="{Binding IsInteractive,
- en: Source={RelativeSource AncestorType={x:Type
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 源={RelativeSource AncestorType={x:Type
- en: local:FavoriteControl}}}"
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: local:FavoriteControl}}}"
- en: '... />'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '... />'
- en: '[PRE11]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
