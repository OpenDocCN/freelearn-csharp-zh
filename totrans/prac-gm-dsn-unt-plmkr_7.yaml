- en: Chapter 7. Working with External APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous chapters you created a multiplayer air hockey game. One way of expanding
    it would be making more levels and mechanics for it, but you already know how
    to do that. The other way would be integrating it with different external services,
    such as analytics, online scoring platforms, and leaderboards.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter we are going to talk about **application programming interfaces**
    (**APIs**). We will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: API—what it is and what it's used for
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Existing useful external APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The way Unity typically communicates with external APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating a game with one of the existing APIs (Kongregate)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will look at some code snippets that you are going to use to integrate your
    game with Kongregate, test the game online, and save the number of times the player
    wins on Kongregate's servers.
  prefs: []
  type: TYPE_NORMAL
- en: About external application programming interfaces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In simple terms and in the context of Unity, an external API is an external
    library of code that can be accessed from a Unity script and provides some additional
    functionality to your game. Some APIs let you access the JavaScript code of the
    page your WebPlayer game is on, while others provide a possibility of transferring
    game data and getting information to remote servers.
  prefs: []
  type: TYPE_NORMAL
- en: 'You have already used one API in your air hockey game in the previous chapter:
    that of Photon Unity Networking. Most of the calls to remote servers are buried
    deep inside of its source code, but it is nevertheless an API.'
  prefs: []
  type: TYPE_NORMAL
- en: Other APIs that you might encounter include online game platforms, such as Kongregate
    and Facebook; analytics tools, such as Google Analytics and Game Analytics; and
    online data storage platforms, such as Scoreoid and Steamworks.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to different functions, APIs use different ways to connect to the
    external code base and different ways to communicate with it later, which may
    seem like a hard task, but rarely is. There is generally a comprehensive guide
    to the API on its website, and even when there is not the Unity community often
    comes to the rescue, putting together its own guides, template files, and code
    snippets readily available in Unity answers or forums.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to integrate our game with Kongregate to show how this works and
    what kind of code you need to use. Kongregate was chosen as a fairly straightforward,
    very common, and completely free API.
  prefs: []
  type: TYPE_NORMAL
- en: Uploading your game to Kongregate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before starting to use the Kongregate API, you have to see that you can actually
    upload your game to the website. To do that, you are going to need a Kongregate
    account if you do not have one yet.
  prefs: []
  type: TYPE_NORMAL
- en: Go to [http://kongregate.com](http://kongregate.com) and near the top of the
    page find and click the **Register** link, as shown in the following screenshot:![Uploading
    your game to Kongregate](img/8108OT_07_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A registration form should appear, offering you to either connect using Facebook
    or enter your account information manually. Do that and click on the **Sign Up**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, if you go to the Kongregate main page and hover over the **GAMES** button
    just under the sign-in block of the website, a submenu should appear, divided
    into three sections: **FEATURED**, **CATEGORIES**, and **DEVELOPERS**. It is the
    last one that is of interest to us. Find the **UPLOAD A GAME** button there and
    click on it.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open Unity and make a Web build, like you did to test multiplayer in [Chapter
    6](ch06.html "Chapter 6. Networking and Multiplayer"), *Networking and Multiplayer*;
    remember where you saved it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the Kongregate website, you now should have the game information menu. Enter
    the game's name, category, and description, then click on **Continue**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next step asks you to choose game files and upload them to Kongregate's
    server. Click on the **Choose File** button next to **Game File**, navigate to
    the folder where you saved your Web build from Unity, select the file with the
    `unity3d` extension, and click on **Open**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the two text fields below, enter the game's resolution (width 960 and height
    600).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Upload an image as an icon. You can test, but cannot publish a game that does
    not have an icon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can also upload images as screenshots. This is not necessary, and you can
    do this later.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check **This game is exclusive to Kongregate** if you are not planning to upload
    the game anywhere else. This will ensure that you get more ad profits for people
    playing your game.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Read the **License Agreement** and check the four checkboxes below it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Statistics API** section is what we are going to be using the Kongregate
    API for. Click on **Add a statistic**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Statistic Name** to `Wins` and select the **Add Type** radio button. This
    is the statistic type, which determines how the statistic will behave. In our
    case, we will simply add the player's wins up. If your game had a scoring system,
    you could create another statistic of **Max** type for it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check **Display in leaderboards** to make sure that the statistic shows up on
    the game's public page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save**, then click on **Upload** on the bottom of the form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After a short waiting period, the game should show up on your screen, being
    completely functionally playable. You can test the multiplayer mode to make sure
    that nothing has changed since you uploaded it to the server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If everything works correctly, we should integrate our **Wins** parameter with
    the game itself. To do that, we will need to write a couple of scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Writing Kongregate API code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are two scripts that we are going to have to make in order to get our
    **Wins** scoring parameter saved and appearing in the leaderboards. The first
    one will set up Kongregate, make sure that the game is indeed on the Kongregate
    page, and inform the game about the API connection status.
  prefs: []
  type: TYPE_NORMAL
- en: The second script is going to be about incrementing a score for the player who
    wins based on the goal the puck hits.
  prefs: []
  type: TYPE_NORMAL
- en: 'Without any further delay, the following is the code for the handshake script,
    which is called `KongregateAPI`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This code is fairly straightforward and does not require much explanation on
    top of the comments already given within the script. Only two things should be
    noted: `Application.ExternalEval` is what makes your Unity game communicate with
    the JavaScript of the page it is on. Unity sends a message in the form of a string
    of text to the page, which is picked up by Kongregate and interpreted as code.
    The contents of this string are using the Kongregate API, the full version of
    which can be consulted here: [http://www.kongregate.com/developer_center/docs/en/using-the-api-with-unity3d](http://www.kongregate.com/developer_center/docs/en/using-the-api-with-unity3d).
    `ExternalEval` is a very common method for accessing external APIs.'
  prefs: []
  type: TYPE_NORMAL
- en: It is imperative that the game object your script is attached to (as well as
    the script itself) is called **KongregateAPI**. Create an empty game object in
    the **demo_lobby** scene and attach the script to it, then save the scene.
  prefs: []
  type: TYPE_NORMAL
- en: Once the JavaScript code on the page is executed, Kongregate sends a callback
    message back to Unity. This message always takes the form of the `OnKongregateAPILoaded(string
    userInfoString)` method. This, too, is part of the API. We then separate the string
    that it gives us using the `|` symbol and save parts of it into variables.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There is really no point in making the Kongregate API script into a Playmaker
    action, unless you don''t want to use any components other that Playmaker in your
    game, in which case I will leave it up to you to do it: the process is similar
    to that which we used in [Chapter 5](ch05.html "Chapter 5. Scripting and Custom
    Actions"), *Scripting and Custom Actions*.'
  prefs: []
  type: TYPE_NORMAL
- en: Unless you have changed something in the winning condition, the game does not
    currently distinguish between player 1 and 2 winning, and simply restarts the
    game no matter what happens. However, due to the fact that we have a multiplayer
    mode and want to save each player's wins, this does not work for us anymore. We
    are going to need to make the goal trigger into prefabs and spawn them the way
    we already spawn the goals and the mallets; then, when the puck hits one of them,
    detect if it belongs to us, and, if it does not, send the win to Kongregate.
  prefs: []
  type: TYPE_NORMAL
- en: To begin with, let us prepare a Playmaker action that sends wins to Kongregate.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here `Application.ExternalCall` is used. It calls an external function in the
    page as opposed to `ExternalEval`, which evaluates a code snippet that may or
    may not contain function calls.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`ExternalCall` and `ExternalEval` both only work in Unity Webplayer.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps in order to increment the **Wins** statistic on Kongregate:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the **demo_room** scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a prefab called `GoalTrigger`, then drag the **GoalTriggerLeft** game
    object to it from **Hierarchy**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete both **GoalTriggerLeft** and **GoalTriggerRight** game objects from the
    scene; we are going to spawn them on startup.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Game** game object and, in its **Game Manager** FSM, add a **GameObject**
    variable called **goalTriggerRef**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to this FSM's instantiate player state. Add a new **Photon Network
    Instantiate** action to this state. Set the **Game Object** property to **GoalTrigger**,
    **Position** to `(-9`, `0.42`, `0`), **Rotation** to (`0`, `90`, `0`), and **Store
    Object** to **goalTriggerRef**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the **Create Puck** state and add a **Set Position** action to it. In this
    action, set the **Game Object** property to **Specify Game Object**, then set
    it to the **goalTriggerRef** variable. Set **Vector**, **Y**, and **Z** to **None**
    and **X** to `9`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have set up the instantiation of our goal triggers, we need to send
    our scores to Kongregate. Select the `GoalTrigger` prefab in the Project panel
    and add a **Photon View** component to it, then drag its **Transform** component
    into the **Observe** slot of **Photon View**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a **PlayMaker Photon GameObject Proxy** component to the prefab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **playMaker** panel, make the FSM look as shown in the following figure,
    adding all the missing states, events, and transitions.![Writing Kongregate API
    code](img/8108OT_07_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a **Photon View Get Is Mine** action to the **is mine?** state. Set **Is
    Mine Event** to **YES** and **Is Not Mine Event** to **NO**, provided that you
    have created the **YES** and **NO** events in the **Events** tab before. If you
    haven't, go ahead and do it now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add **Kongregate Send Action** to the **KongregateSend** state. This is the
    action that we created earlier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, if you build the game, upload it to Kongregate, play, and win, a score
    will be added. You should see a **HIGH SCORE** tab appear on the right on your
    game's page.
  prefs: []
  type: TYPE_NORMAL
- en: If it does not, don't worry, sometimes it can take some time for the first score
    to be submitted. If you feel like there is a problem, you can see exactly what
    commands Kongregate exchanges with your game by opening the JavaScript console
    of your internet browser while on the game's page.
  prefs: []
  type: TYPE_NORMAL
- en: Once you are sure that the game is working well and the **Wins** statistic is
    being submitted properly, you can either try adding some more stats or just publish
    the game by pressing the appropriate link near the top of the page. Then you can
    test it by either sending the public link to your friends or by opening it twice
    yourself and joining the same server.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned what an external API in Unity is and what kinds
    of external APIs there are, and then added one to your game. You uploaded your
    game to Kongregate and saved a game statistic for your multiplayer air hockey
    game on Kongregate's servers.
  prefs: []
  type: TYPE_NORMAL
