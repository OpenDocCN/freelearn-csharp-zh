["```cs\nif(condition is true)\n{\n    Execute code of code \n} \n```", "```cs\nelse \n    Execute single line of code\n// OR\nelse \n{\n    Execute multiple lines\n    of code\n} \n```", "```cs\nif(condition is true)\n{\n    Execute this code\n    block\n}\nelse \n{\n    Execute this code \n    block\n} \n```", "```cs\n    public class LearningCurve: MonoBehaviour \n    {\n        public bool hasDungeonKey = true;\n        Void Start() \n        {\n            if(hasDungeonKey) \n            {\n                Debug.Log(\"You possess the sacred key – enter.\");\n            }\n        }\n    } \n    ```", "```cs\n    public class LearningCurve: MonoBehaviour \n    {\n        public bool hasDungeonKey = true;\n        void Start() \n        {\n            if(hasDungeonKey) \n            {\n                Debug.Log(\"You possess the sacred key – enter.\");\n            } \n            else \n            {\n                Debug.Log(\"You have not proved yourself yet.\");\n            }\n        }\n    } \n    ```", "```cs\n    public int CurrentGold = 32; \n    ```", "```cs\n    if(CurrentGold > 50)\n    {\n        Debug.Log(\"You're rolling in it!\");\n    } \n    ```", "```cs\n    else if (CurrentGold < 15)\n    {\n        Debug.Log(\"Not much there to steal...\");\n    } \n    ```", "```cs\n    else\n    {\n        Debug.Log(\"Looks like your purse is in the sweet spot.\");\n    } \n    ```", "```cs\n    public void Thievery()\n    {\n        if(CurrentGold > 50)\n        {\n            Debug.Log(\"You're rolling in it!\");\n        } else if (CurrentGold < 15)\n        {\n            Debug.Log(\"Not much there to steal...\");\n        } else\n        {\n            Debug.Log(\"Looks like your purse is in the sweet spot.\");\n        }\n    } \n    ```", "```cs\nif(variable == false)\n// AND\nif(!variable) \n```", "```cs\npublic class LearningCurve : MonoBehaviour\n{\n    public bool hasDungeonKey = false;\n    public string weaponType = \"Arcane Staff\";\n    void Start()\n    {\n        if(!hasDungeonKey)\n        {\n            Debug.Log(\"You may not enter without the sacred key.\");\n        }\n        if(weaponType != \"Longsword\")\n{\n            Debug.Log(\"You don't appear to have the right type of weapon...\");\n}\n    }\n} \n```", "```cs\npublic class LearningCurve : MonoBehaviour \n{\n    public bool weaponEquipped = true;\n    public string weaponType = \"Longsword\";\n    void Start()\n    {\n        if(weaponEquipped)\n        {\n            if(weaponType == \"Longsword\")\n            {\n                Debug.Log(\"For the Queen!\");\n            }\n        }\n        else \n        {\n            Debug.Log(\"Fists aren't going to work against armor...\");\n        }\n    }\n} \n```", "```cs\nif(weaponEquipped && weaponType == \"Longsword\")\n{\n    Debug.Log(\"For the Queen!\");\n} \n```", "```cs\n    public bool PureOfHeart = true;\n    public bool HasSecretIncantation = false;\n    public string RareItem = \"Relic Stone\"; \n    ```", "```cs\n    if(PureOfHeart && RareItem == \"Relic Stone\")\n    {\n    } \n    ```", "```cs\n    if(!HasSecretIncantation)\n    {\n        Debug.Log(\"You have the spirit, but not the knowledge.\");\n    } \n    ```", "```cs\n    public class LearningCurve : MonoBehaviour\n    {\n        public bool PureOfHeart = true;\n        public bool HasSecretIncantation  = false;\n        public string RareItem = \"Relic Stone\";\n        // Use this for initialization\n        void Start()\n        {\n            OpenTreasureChamber();\n        }\n        public void OpenTreasureChamber()\n        {\n            if(PureOfHeart && RareItem == \"Relic Stone\")\n            {\n                if(!HasSecretIncantation)\n                {\n                    Debug.Log(\"You have the spirit, but not the knowledge.\");\n                }\n                else\n                {\n                    Debug.Log(\"The treasure is yours, worthy hero!\");\n                }\n            }\n            else\n            {\n                Debug.Log(\"Come back when you have what it takes.\");\n            }\n        }\n    } \n    ```", "```cs\nswitch(matchExpression)\n{\n    **case** matchValue1:\n        Executing code block\n        **break****;**\n    **case** matchValue2:\n        Executing code block\n        **break****;**\n    **default****:**\n        Executing code block\n        **break****;**\n} \n```", "```cs\n    string CharacterAction = \"Attack\"; \n    ```", "```cs\n    switch(CharacterAction)\n    {\n    } \n    ```", "```cs\n    case \"Heal\":\n        Debug.Log(\"Potion sent.\");\n        break;\n    case \"Attack\":\n        Debug.Log(\"To arms!\");\n        break; \n    ```", "```cs\n    default:\n        Debug.Log(\"Shields up.\");\n        break; \n    ```", "```cs\n    string CharacterAction = \"Attack\";\n    // Start is called before the first frame update\n    void Start()\n    {\n        PrintCharacterAction();\n    }\n    public void PrintCharacterAction()\n    {\n        switch(CharacterAction)\n        {\n            case \"Heal\":\n                Debug.Log(\"Potion sent.\");\n                break;\n            case \"Attack\":\n                Debug.Log(\"To arms!\");\n                break;\n            default:\n                Debug.Log(\"Shields up.\");\n                break;\n        }\n    } \n    ```", "```cs\n    int DiceRoll = 7; \n    ```", "```cs\n    switch(DiceRoll)\n    {\n    } \n    ```", "```cs\n    case 7:\n    case 15:\n        Debug.Log(\"Mediocre damage, not bad.\");\n        break;\n    case 20:\n        Debug.Log(\"Critical hit, the creature goes down!\");\n        break;\n    default:\n        Debug.Log(\"You completely missed and fell on your face.\");\n        break; \n    ```", "```cs\nelementType[] name = new elementType[numberOfElements]; \n```", "```cs\nint[] topPlayerScores = new int[3]; \n```", "```cs\n// Longhand initializer\nint[] topPlayerScores = new int[] {713, 549, 984};\n// Shortcut initializer\nint[] topPlayerScores = { 713, 549, 984 }; \n```", "```cs\n// The value of score is set to 713\nint score = topPlayerScores[1]; \n```", "```cs\ntopPlayerScores[1] = 1001; \n```", "```cs\ntopPlayerScores.Length; \n```", "```cs\nList<elementType> name = new List<elementType>(); \n```", "```cs\nList<elementType> name = new List<elementType>() { value1, value2 }; \n```", "```cs\n    List<string> QuestPartyMembers = new List<string>()\n        {\n            \"Grim the Barbarian\",\n            \"Merlin the Wise\",\n            \"Sterling the Knight\"\n        }; \n    ```", "```cs\n    Debug.LogFormat(\"Party Members: {0}\", QuestPartyMembers.Count); \n    ```", "```cs\n QuestPartyMembers.Add(\"Craven the Necromancer\"); \n```", "```cs\n{ \"Grim the Barbarian\", \"Merlin the Wise\", \"Sterling the Knight\",\n    \"Craven the Necromancer\"}; \n```", "```cs\n QuestPartyMembers.Insert(1, \"Tanis the Thief\"); \n```", "```cs\n{ \"Grim the Barbarian\", \"Tanis the Thief\", \"Merlin the Wise\", \"Sterling\n    the Knight\", \"Craven the Necromancer\"}; \n```", "```cs\n// Both of these methods would remove the required element\nQuestPartyMembers.RemoveAt(0); \nQuestPartyMembers.Remove(\"Grim the Barbarian\"); \n```", "```cs\n{ \"Tanis the Thief\", \"Merlin the Wise\", \"Sterling the Knight\", \"Craven\n    the Necromancer\"}; \n```", "```cs\nDictionary<keyType, valueType> name = new Dictionary<keyType,\n  valueType>(); \n```", "```cs\nDictionary<keyType, valueType> name = new Dictionary<keyType,\n  valueType>()\n{\n    {key1, value1},\n    {key2, value2}\n}; \n```", "```cs\n    Dictionary<string, int> `I`temInventory = new Dictionary<string, int>()\n        {\n            { \"Potion\", 5 },\n            { \"Antidote\", 7 },\n            { \"Aspirin\", 1 }\n        }; \n    ```", "```cs\n    Debug.LogFormat(\"Items: {0}\", `I`temInventory.Count); \n    ```", "```cs\nint numberOfPotions = `I`temInventory[\"Potion\"]; \n```", "```cs\n`I`temInventory[\"Potion\"] = 10; \n```", "```cs\n`I`temInventory.Add(\"Throwing Knife\", 3); \n```", "```cs\n`I`temInventory[\"Bandage\"] = 5; \n```", "```cs\nif(`I`temInventory.ContainsKey(\"Aspirin\"))\n{\n    `I`temInventory[\"Aspirin\"] = 3;\n} \n```", "```cs\n`I`temInventory.Remove(\"Antidote\"); \n```", "```cs\nfor (initializer; condition; iterator)\n{\n    code block;\n} \n```", "```cs\nList<string> QuestPartyMembers = new List<string>()\n{ \"Grim the Barbarian\", \"Merlin the Wise\", \"Sterling the Knight\"}; \nfor (int i = 0; i < QuestPartyMembers.Count; i++)\n{\n    Debug.LogFormat(\"Index: {0} - {1}\", i, QuestPartyMembers[i]);\n} \n```", "```cs\n    if(QuestPartyMembers[i] == \"Merlin the Wise\")\n    {\n        Debug.Log(\"Glad you're here Merlin!\");\n    } \n    ```", "```cs\n    // Start is called before the first frame update\n    void Start()\n    {\n        FindPartyMember();\n    }\n    public void FindPartyMember()\n    {\n        List<string> QuestPartyMembers = new List<string>()\n        {\n            \"Grim the Barbarian\",\n            \"Merlin the Wise\",\n            \"Sterling the Knight\"\n        };\n        Debug.LogFormat(\"Party Members: {0}\", QuestPartyMembers.Count);\n        for(int i = 0; i < QuestPartyMembers.Count; i++)\n        {\n            Debug.LogFormat(\"Index: {0} - {1}\", i, QuestPartyMembers[i]);\n            if(QuestPartyMembers[i] == \"Merlin the Wise\")\n            {\n                Debug.Log(\"Glad you're here Merlin!\");\n            }\n        }\n    } \n    ```", "```cs\nforeach(elementType localName in collectionVariable)\n{\n    code block;\n} \n```", "```cs\nList<string> QuestPartyMembers = new List<string>()\n{ \"Grim the Barbarian\", \"Merlin the Wise\", \"Sterling the Knight\"};\n\nforeach(string partyMember in QuestPartyMembers)\n{\n    Debug.LogFormat(\"{0} - Here!\", partyMember);\n} \n```", "```cs\nDictionary<string, int> `I`temInventory = new Dictionary<string, int>()\n{\n    { \"Potion\", 5},\n    { \"Antidote\", 7},\n    { \"Aspirin\", 1}\n};\n\nforeach(KeyValuePair<string, int> kvp in `I`temInventory)\n{\n     Debug.LogFormat(\"Item: {0} - {1}g\", kvp.Key, kvp.Value);\n} \n```", "```cs\nInitializer\nwhile (condition)\n{\n    code block;\n    iterator;\n} \n```", "```cs\n    int PlayerLives = 3; \n    ```", "```cs\n    while(PlayerLives > 0)\n    {\n    } \n    ```", "```cs\n    Debug.Log(\"Still alive!\");\n    PlayerLives--; \n    ```", "```cs\n    Debug.Log(\"Player KO'd...\"); \n    ```", "```cs\n    int PlayerLives = 3;\n    // Start is called before the first frame update\n    void Start()\n    {\n        HealthStatus();\n    }\n    public void HealthStatus()\n    {\n        while(PlayerLives > 0)\n        {\n            Debug.Log(\"Still alive!\");\n            PlayerLives--;\n        }\n        Debug.Log(\"Player KO'd...\");\n    } \n    ```"]