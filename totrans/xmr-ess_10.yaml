- en: Chapter 10. Preparing Xamarin.Android Apps for Distribution
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss activities related to preparing a Xamarin.Android
    app for distribution and look at the various options for distributing apps. Many
    of the activities we will discuss are an integral part of any Android app deployment.
    However, in this chapter, we will try to narrow the scope of our coverage to aspects
    that are unique to developing with Xamarin.Android. We will cover the following
    topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: App profiling
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android Build settings for distributing apps
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: App distribution options
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing for a release APK
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Prior to publishing a signed APK file for release, there are a number of activities
    that need to be completed. The following sections discuss topics that should be
    considered prior to producing a release APK.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: Profiling Xamarin.Android apps
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Xamarin.Android Business license provides limited support to profile Android
    apps. Profiling can be a very effective way to identify memory leaks and process
    bottlenecks.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will not cover profiling within this book, but the following link provides
    an overview of using the profiling capabilities of Xamarin.Android: [http://docs.xamarin.com/guides/android/deployment,_testing,_and_metrics/profiling](http://docs.xamarin.com/guides/android/deployment,_testing,_and_metrics/profiling).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: In addition to using the tools provided with Xamarin.Android, traditional Android
    profiling tools such as Traceview and `dmtracedump` can be used. You can find
    more information at [http://developer.android.com/tools/debugging/debugging-tracing.html](http://developer.android.com/tools/debugging/debugging-tracing.html).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Disabling debug
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When developing a Xamarin.Android app, Xamarin Studio supports debugging with
    the use of **Java Debug Wire Protocol** (**JDWP**). This feature needs to be disabled
    in release builds as it poses a security risk. You have two different ways to
    accomplish this:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Changing the settings in `AndroidManifest.xml`
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the settings in `AssemblyInfo.cs`
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the settings in AndroidManifest.xml
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first method can be done by using the following listing, which shows you
    how to turn off JDWP debugging from the `AndroidManifest.xml` file:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Changing the settings in AssemblyInfo.cs
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The alternative method is done by disabling JDWP through `AssemblyInfo.cs`.
    This has the advantage of being based on the currently selected configuration.
    The following listing shows how to use a conditional directive to turn JDWP debugging
    off:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Android Application (AndroidManifest.xml) settings
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By the time you start considering deployment of your app, you will have already
    established most of the settings needed in `AndroidManifest.xml`. However, you
    will need to update the version information. Keep in mind, the version number
    is used by the Android platform during the installation process to determine whether
    an APK is an update to an existing app. A version name is a free-form text and
    can be used to track app versions in any manner desired. This can be accomplished
    by opening the **Project Options** dialog box and navigating to **Build** | **Android
    Application**, or by double-clicking on `NationalParks/Properties/AndroidManifest.xml`.
    The following screenshot depicts the **Android Application** settings dialog box:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '![Android Application (AndroidManifest.xml) settings](img/0838OT_10_01.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
- en: Linker Options
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'During a build, Xamarin.Android performs static analysis of the assemblies
    that make up an app and attempts to eliminate type and member instances that are
    not needed. The settings that control this process can be viewed and set in the
    **Project Options** dialog box under the **Android Build** section, as shown in
    the following screenshot:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '![Linker Options](img/0838OT_10_03.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
- en: 'Xamarin.Android supports the same linker options as Xamarin.iOS. When viewing
    and adjusting the **Linker Options** settings, be sure to first select **Release**
    from the **Configuration** drop-down box. The following linking options are available:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '**Don''t link**: This option disables the linker and ensures that all referenced
    assemblies are included without modification. This is the default setting for
    builds that target the iOS Simulator. This eliminates the time-consuming process
    of linking, and deploying a large file to the simulator is relatively quick.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Link SDK assemblies only**: This option tells the linker to operate only
    on the SDK assemblies; those assemblies that ship with Xamarin.iOS. This is the
    default setting for builds that target a device.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Link all assemblies**: This option tells the linker to operate on the entire
    app, as well as all referenced assemblies. This allows the linker to use a larger
    set of optimizations and results in the smallest possible application. However,
    when the linker runs in this mode, there is a greater chance that it might break
    portions of your code due to false assumptions made by the static analysis process.
    In particular, the use of reflection and serialization can trip up the static
    analysis.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following table shows how the APK file size varies based on the linker
    setting:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '|   | File linking version | PCL version |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
- en: '| **Don''t link** | 26.4 MB | 27.5 MB |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
- en: '| **Link SDK assemblies only** | 4.3 MB | 4.3 MB |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
- en: '| **Link all assemblies** | 4.1 MB | 4.2 MB |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
- en: Overriding the linker
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In some cases, the linking option can have negative side effects, such as important
    types and/or members being accidentally eliminated. It is important for an application
    that has been compiled and linked in release mode to be thoroughly tested before
    distribution in order to identify such issues. In some situations, you should
    conduct tests beyond the initial developer's testing, and this should be conducted
    using an APK file produced in release mode.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: In the event that you encounter any runtime exceptions related to missing types
    or trouble locating specific methods, you can make use of one of the following
    methods to give explicit instructions to the linker.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Preserving code with attributes
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you determine from testing that the linking is removing classes or methods
    needed by your app, you can explicitly tell the linker to always include them
    by using the `Preserve` attribute on a class and/or method.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: 'To preserve the entire type, use the following command:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To preserve a single member, use the following command:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Preserving code with custom linker files
  id: totrans-47
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'There are times when you might not have access to the source code, but still
    need to preserve specific types and/or members. This can be accomplished with
    a custom linker file. The following example instructs the linker to always include
    specific members for a type:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You can add a custom-linking file to a project by adding a simple XML file
    and populating it with similar content to the previous example; it does not really
    matter where you place it in the project structure. After adding the file to the
    project, select the file, open the **Properties** pad, and choose **LinkDescription**
    for **Build action**, as shown in the following screenshot:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '![Preserving code with custom linker files](img/0838OT_10_02.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
- en: Skipping assemblies
  id: totrans-52
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You can also instruct the linker to skip entire assemblies so that all the
    types and members will be retained. This can be accomplished in the following
    two ways:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Using a command-line option `linkskip`, for example, `--linkskip=someassembly`
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using the `AndroidLinkSkip` MSBuild property, as follows:'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Supported ABIs
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Android supports a number of different CPU architectures. The Android platform
    defines a set of **Application Binary Interfaces** (**ABI**) that corresponds
    to different CPU architectures. By default, Xamarin.Android assumes that armeabi-v7a
    is appropriate for most circumstances. To support additional architectures, check
    each option that applies on the **Project Options** dialog box under the **Android
    Build** section.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '![Supported ABIs](img/0838OT_10_04.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
- en: Publishing a release APK
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have adjusted the setting needed to produce a release build, you
    are ready to publish the actual APK. When we say publish, we simply mean to produce
    an APK that can be uploaded to the Google Play Store. The following sections discuss
    the steps of producing a signed APK from within Xamarin Studio.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Keystores
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A keystore is a database of security certificates created and managed by the
    keytool program from the Java SDK. You can create the keystore outside of Xamarin
    Studio using the keytool command or from within Xamarin Studio that provides a
    UI that interfaces with the keytool command. The next section takes you through
    the steps to publish an APK and create a new keystore from within Xamarin Studio.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Publishing from Xamarin.Android
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps guide you through the creation of a new keystore as a part
    of the process of creating a signed APK:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: In the **Configuration** drop-down box, select **Release**.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Project** | **Publish Android Application** from the main menu;
    note the **Keystore selection** page of the **Publish Android Application** wizard,
    as shown in the following screenshot:![Publishing from Xamarin.Android](img/0838OT_10_05.jpg)
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Create new keystore**, select a location including a filename for the
    keystore, and enter the password and confirm it. The example keystore is in the
    project folder named `NationalParks.keystore` and the password is `nationalparks`.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Forward**; you will see the **Key creation** page of the **Publish
    Android Application** wizard, as shown in the following screenshot:![Publishing
    from Xamarin.Android](img/0838OT_10_06.jpg)
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter all the relevant information. This example uses `nationalparks` for the
    **Alias** field and **Password**.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Forward**; you will see the **Select destination** page of the **Publish
    Android Application** wizard, as shown in the following screenshot:![Publishing
    from Xamarin.Android](img/0838OT_10_07.jpg)
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the required **Target directory** option and click on **Create**. Xamarin
    Studio will compile the app for release and generate a signed APK file. You should
    see the following in the **Publishing package** pad:![Publishing from Xamarin.Android](img/0838OT_10_08.jpg)
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The resulting APK is ready for final testing and potential distribution. Be
    sure to secure and back up your keystore as it is critical to distributing future
    versions.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: Republishing from Xamarin.Android
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Subsequent publications of an app should always use the original keystore. To
    accomplish this, simply select **Use existing keystore** on the **Keystore selection**
    page of the **Publish Android Application** wizard.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Publishing from Visual Studio
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Publishing a signed APK from within Visual Studio essentially follows the same
    process. To do so, simply navigate to **Tools** | **Publish Android Application**
    from the main menu.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: App distribution options
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Distributing Xamarin.Android apps is no different from any other Android app.
    They can be distributed through all the normal channels, app stores, e-mail attachments,
    website links, thumb drive, and so on.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have reviewed activities related to preparing for distribution
    of an app and the process to actually produce a signed release APK file.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: This chapter completes our book on Xamarin Essentials. We have tried to provide
    a productive approach for experienced mobile developers to quickly come up to
    speed on developing apps using the Xamarin platform. We have reviewed the Xamarin
    architecture, developed functional apps for both iOS and Android, and looked at
    how to maximize Xamarin's value by sharing code across mobile platforms using
    several different approaches and frameworks. You are now ready to put Xamarin
    to work.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 本章完成了我们关于Xamarin Essentials的书籍。我们试图为经验丰富的移动开发者提供一个高效的方法，以便他们能够快速掌握使用Xamarin平台开发应用程序。我们回顾了Xamarin架构，为iOS和Android开发了功能性的应用程序，并探讨了如何通过使用多种不同的方法和框架，在移动平台间共享代码来最大化Xamarin的价值。现在，你已经准备好将Xamarin投入使用了。
- en: I hope you have found this book a useful resource and that it has generated
    some excitement in you about developing great mobile apps with Xamarin.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你们觉得这本书是一本有用的资源，并且它激发了你使用Xamarin开发优秀移动应用程序的热情。
