["```cs\next install csharp\n```", "```cs\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\n\nnamespace Sample\n{\n  [TestClass]\n  public class UnitTest1\n  {\n    [TestMethod]\n    public void TestMethod1()\n    {\n    }\n  }\n}\n```", "```cs\nvar sampleClass = new SampleClass();\n```", "```cs\npublic class SampleClass\n{\n}\n```", "```cs\nTotal tests: 1\\. Passed: 1\\. Failed: 0\\. Skipped: 0.\n```", "```cs\n[Fact]\npublic void Given3ThenFizz()\n{\n  // Arrange\n  // Act\n  var result = FizzBuzz(3);\n\n  // Assert \n  Assert.Equal(\"Fizz\", result);\n}\n```", "```cs\nprivate object FizzBuzz(int value)\n{\n  return \"Fizz\";\n}\n```", "```cs\n[Fact]\npublic void Given5ThenBuzz()\n{\n  // Arrange\n  // Act\n  var result = FizzBuzz(5);\n\n  // Assert\n  Assert.Equal(\"Buzz\", result);\n}\n```", "```cs\nprivate object FizzBuzz(int value)\n{\n  return value == 3 ? \"Fizz\" : \"Buzz\";\n}\n```", "```cs\n[Fact]\npublic void Given15ThenFizzBuzz()\n{\n  // Arrange  \n  // Act\n  var result = FizzBuzz(15);\n\n  // Assert\n  Assert.Equal(\"FizzBuzz\", result);\n}\n```", "```cs\n[Fact]\npublic void Given1Then1()\n{\n  // Arrange\n  // Act \n  var result = FizzBuzz(1);\n\n  // Assert \n  Assert.Equal(1, result);\n}\n```", "```cs\n[Theory]\n[InlineData(0)]\n[InlineData(15)]\n[InlineData(30)]\n[InlineData(45)]\npublic void GivenDivisibleBy3And5ThenFizzBuzz(int number)\n{\n  // Arrange\n  // Act\n  var result = FizzBuzz(number);\n\n  // Assert\n  Assert.Equal(\"FizzBuzz\", result);\n}\n```", "```cs\nprivate object FizzBuzz(int value)\n{\n  if (value % 15 == 0)\n    return \"FizzBuzz\";\n\n  if (value % 5 == 0)\n    return \"Buzz\";\n\n  if (value % 3 == 0)\n    return \"Fizz\";\n\n  return value;\n}\n```", "```cs\nAs a conference organizer \n I want to search for available speakers \n So that I may contact them about my conference \n\nGiven I am a conference organizer \n And Given a speaker in mind \n When I search for speakers by name \n Then I receive speakers with a matching first name \n\nGiven I am a conference organizer \n And Given a speaker in mind \n When I search for speakers by name \n Then I receive speakers with a matching last name \n```", "```cs\n[Fact]\npublic void ItExists()\n{\n  var controller = new SpeakerController();\n}\n```", "```cs\n[Fact]\npublic void ItHasSearch()\n{\n  // Arrange\n  var controller = new SpeakerController();\n\n  // Act\n  controller.Search(\"Jos\");\n}\n```", "```cs\n[Fact]\npublic void ItReturnsOkObjectResult()\n{\n  // Arrange\n  var controller = new SpeakerController();\n\n  // Act\n  var result = controller.Search(\"Jos\");\n\n  // Assert\n  Assert.NotNull(result);\n  Assert.IsType<OkObjectResult>(result);\n}\n```", "```cs\n[Fact]\npublic void ItReturnsCollectionOfSpeakers()\n{\n  // Arrange\n  var controller = new SpeakerController();\n\n  // Act\n  var result = controller.Search(\"Jos\") as OkObjectResult;\n\n  // Assert\n  Assert.NotNull(result);\n  Assert.NotNull(result.Value); \n  Assert.IsType<List<Speaker>>(result.Value);\n}\n```", "```cs\nprivate readonly SpeakerController _controller;\n\npublic SpeakerControllerSearchTests()\n{\n  _controller = new SpeakerController();\n}\n```", "```cs\n[Fact]\npublic void GivenExactMatchThenOneSpeakerInCollection()\n{\n  // Arrange\n  // Act\n  var result = _controller.Search(\"Joshua\") as OkObjectResult;\n\n  // Assert\n  var speakers = ((IEnumerable<Speaker>)result.Value).ToList();\n  Assert.Equal(1, speakers.Count);\n}\n```", "```cs\n[Fact]\npublic void GivenExactMatchThenOneSpeakerInCollection()\n{\n  // Arrange\n  // Act\n  var result = _controller.Search(\"Joshua\") as OkObjectResult;\n\n  // Assert  \n  var speakers = ((IEnumerable<Speaker>)result.Value).ToList();\n  Assert.Equal(1, speakers.Count);\n  Assert.Equal(\"Joshua\", speakers[0].Name);\n}\n```", "```cs\n[Theory]\n[InlineData(\"Joshua\")]\n[InlineData(\"joshua\")]\n[InlineData(\"JoShUa\")]\npublic void GivenCaseInsensitveMatchThenSpeakerInCollection (string searchString)\n{\n  // Arrange\n  // Act\n  var result = _controller.Search(searchString) as OkObjectResult;\n\n  // Assert\n  var speakers = ((IEnumerable<Speaker>)result.Value).ToList();\n  Assert.Equal(1, speakers.Count);\n  Assert.Equal(\"Joshua\", speakers[0].Name);\n}\n```", "```cs\n[Fact]\npublic void GivenNoMatchThenEmptyCollection()\n{\n  // Arrange\n  // Act\n  var result = _controller.Search(\"ZZZ\") as OkObjectResult;\n\n  // Assert\n  var speakers = ((IEnumerable<Speaker>)result.Value).ToList();\n  Assert.Equal(0, speakers.Count);\n}\n```", "```cs\n[Fact]\npublic void Given3MatchThenCollectionWith3Speakers()\n{\n  // Arrange\n  // Act \n  var result = _controller.Search(\"jos\") as OkObjectResult;\n\n  // Assert  \n  var speakers = ((IEnumerable<Speaker>)result.Value).ToList();\n  Assert.Equal(3, speakers.Count);\n  Assert.True(speakers.Any(s => s.Name == \"Josh\"));\n  Assert.True(speakers.Any(s => s.Name == \"Joshua\"));\n  Assert.True(speakers.Any(s => s.Name == \"Joseph\"));\n}\n```", "```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace SpeakerMeet.Api.Controllers\n{\n  [Route(\"api/[controller]\")]\n  public class SpeakerController : Controller\n  {\n    [Route(\"search\")]\n    public IActionResult Search(string searchString)\n    {\n      var hardCodedSpeakers = new List<Speaker>\n      {\n        new Speaker{Name = \"Josh\"},\n        new Speaker{Name = \"Joshua\"},\n        new Speaker{Name = \"Joseph\"},\n        new Speaker{Name = \"Bill\"},\n      };\n\n      var speakers = hardCodedSpeakers.Where(x => x.Name.StartsWith(searchString, StringComparison.OrdinalIgnoreCase)).ToList();\n\n      return Ok(speakers);\n    }\n  }\n\n  public class Speaker\n  {\n    public string Name { get; set; }\n  }\n}\n```"]