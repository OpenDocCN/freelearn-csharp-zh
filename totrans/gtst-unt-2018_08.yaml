- en: Implementing Our Non-Player Characters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we focused on our game's player character, the Cucumber
    Man. We imported the character, reviewed the controls, examined the animations,
    and made the necessary configuration changes to fully use our character in the
    game. We reviewed the player character's animations and the character's animation
    controller. We also identified scripts relevant to the player character and reviewed
    several of them. In addition, we made modifications to our game's terrain to better accommodate
    the player character during gameplay.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will focus on the non-player characters. Our Cucumber Beetles
    will serve as our game's non-player characters and will be the Cucumber Man's
    enemies. We will incorporate Cucumber Beetles in our game through direct placement.
    We will review the beetles' 11 animations and make changes to the non-player character's
    animation controller. In addition, we will write scripts to control the non-player
    characters. We will also add cucumber patches, cucumbers, and cherries to our
    game world.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the non-player characters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing the non-player characters into our game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animating our non-player characters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Incorporating the non-player characters into our game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Terraforming the terrain for our Cucumber Beetles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding cucumber patches to our terrain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding cucumbers to our terrain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scripting our non-player characters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the non-player characters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Non-player characters, commonly referred to as NPCs, are simply game characters
    that are not controlled by a human player. These characters are controlled through
    scripts, and their behaviors are usually responsive to in-game conditions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our game''s non-player characters are the Cucumber Beetles. These beetles,
    as depicted in the following screenshot, have six legs that they can walk on;
    under special circumstances, they can also walk on their hind legs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7e44d123-493a-4125-b5b9-9d3f0264198c.png)'
  prefs: []
  type: TYPE_IMG
- en: Cucumber Beetles are real insects, and are a threat to cucumbers. They cannot
    really walk on their hind legs, but they can in our game.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will import a Cucumber Beetle asset package prepared
    specifically for this game. There will only be one beetle in that asset package.
    We will, through scripting, make multiple copies of the beetle.
  prefs: []
  type: TYPE_NORMAL
- en: Before you move on to the next section, you should open your Unity game project. Alternatively,
    you can download the `Starting-Chapter-08` Unity project available from the publisher's
    companion site.
  prefs: []
  type: TYPE_NORMAL
- en: Importing the non-player characters into our game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You are now ready to import the asset package for our game''s non-player character,
    the Cucumber Beetle. Go through the following steps to import the package:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the `Cucumber_Beetle.unitypackage` file from the publisher's companion
    website
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Unity, with your game project open, select Assets | Import Package | Custom
    Package from the top menu
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the location of the asset package you downloaded in step 1 and click
    the Open button
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When presented with the Import Asset Package dialog window, click the Import
    button
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As you will notice, the `Cucumber_Beetle` asset package contains several assets
    related to the Cucumber Beetles, including a controller, scripts, a prefab, animations,
    and other assets:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/137a9770-5573-4f7d-9cf8-92f3a2e0dbd6.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that the `Cucumber_Beetle` asset package has been imported into our game
    project, we should save our project. Use the File | Save Project menu option.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's review what was imported.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Project panel, under Assets | Prefabs, you will see a new `Beetle.Prefab`.
    Also in the Project panel, under Assets, you will see a `Beetle` folder. It is
    important that you understand what each component in the folder is for. Please
    refer to the following screenshot for an overview of the assets that you will
    be using in this chapter in regards to the Cucumber Beetle:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ab7937dc-ce30-4b44-851a-dee280891c64.png)'
  prefs: []
  type: TYPE_IMG
- en: The other assets in the previous screenshot that were not called out include
    a `readme.txt` file, the texture and materials for the Cucumber Beetle, and the
    source files. We will review the Cucumber Beetle's animations in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Animating our non-player characters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Several Cucumber Beetle animations have been prepared for use in our game.
    Here is a list of the animation names as they appear in our project, along with
    brief descriptions of how we will incorporate the animation into our game. The
    animations are listed in alphabetical order by name:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Animation Name** | **Usage Details** |'
  prefs: []
  type: TYPE_TB
- en: '| `Attack_Ground` | The beetle attacks the Cucumber Man''s feet from the ground
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Attack_Standing` | The beetle attacks the Cucumber Man from a standing position
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Die_Ground` | The beetle dies from the starting position of on the ground
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Die_Standing` | The beetle dies from the starting position of standing on
    its hind legs |'
  prefs: []
  type: TYPE_TB
- en: '| `Eat_Ground` | The beetle eats cucumbers while on the ground |'
  prefs: []
  type: TYPE_TB
- en: '| `Idle_Ground` | The beetle is not eating, walking, fighting, or standing
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Idle_Standing` | The beetle is standing, but not walking, running, or attacking
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Run_Standing` | The beetle runs on its hind legs |'
  prefs: []
  type: TYPE_TB
- en: '| `Stand` | The beetle goes from an on-the-ground position to standing (it
    stands up) |'
  prefs: []
  type: TYPE_TB
- en: '| `Walk_Ground` | The beetle walks using its six legs |'
  prefs: []
  type: TYPE_TB
- en: '| `Walk_Standing` | The beetle walks on its hind legs |'
  prefs: []
  type: TYPE_TB
- en: You can preview these animations by clicking on an animation file, such as `Eat_Ground.fbx`,
    in the Project panel. Then, in the Inspector panel, click the play button to watch
    the animation.
  prefs: []
  type: TYPE_NORMAL
- en: There are 11 animations for our Cucumber Beetle, and we will use scripting,
    later in this chapter, to determine when an animation is played.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will add the Cucumber Beetle to our game.
  prefs: []
  type: TYPE_NORMAL
- en: Incorporating the non-player characters into our game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, let's simply drag the `Beetle.Prefab` from the `Assets`/`Prefab` folder
    in the Project panel to our game in Scene view. Place the beetle somewhere in
    front of the Cucumber Man so that the beetle can be seen as soon as you put the
    game into game mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'A suggested placement is illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9bde2f10-3845-464e-a9fc-0a0672712618.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you put the game into game mode, you will notice that the beetle cycles
    through its animations. If you double-click the `Beetle.controller` in the `Assets`
    | `Beetle` folder in the Project panel, you will see, as shown in the following
    screenshot, that we currently have several animations set to play successively
    and repeatedly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/83e5d469-c8f4-405e-8d86-546f0067edc0.png)'
  prefs: []
  type: TYPE_IMG
- en: This initial setup is intended to give you a first, quick way of previewing
    the various animations. In the next section, we will modify the animation controller.
  prefs: []
  type: TYPE_NORMAL
- en: Working with the Animation Controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will use an Animation Controller to organize our NPCs' animations. The Animation
    Controller will also be used to manage the transitions between animations.
  prefs: []
  type: TYPE_NORMAL
- en: Before we start making changes to our Animation Controller, we need to identify
    what states our beetle has and then determine what transitions each state can
    have in relation to other states.
  prefs: []
  type: TYPE_NORMAL
- en: Animation states can be referred to as the character's state of animation. For
    example, walking is a state, as are running and jumping.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the states that the beetle can have, each tied to an animation:'
  prefs: []
  type: TYPE_NORMAL
- en: Idle on Ground
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Walking on Ground
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eating on Ground
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attacking on Ground
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Die on Ground
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stand
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Standing Idle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Standing Walk
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Standing Run
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Standing Attack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Die Standing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With the preceding list of states, we can assign the following transitions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'From Idle on Ground to:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Walking on Ground
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Running on Ground
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Eating on Ground
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Attacking on Ground
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Stand
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'From Stand to:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Standing Idle
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Standing Walk
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Standing Run
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Standing Attack
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Reviewing the transitions from Idle on Ground to Stand demonstrates the type
    of state-to-state transition decisions you need to make for your game.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s turn our attention back to the Animation Controller window. You will
    notice that there are two tabs in the left panel of that window: Layers and Parameters.
    The Layers tab shows a Base Layer. While we can create additional layers, we do
    not need to do this for our game. The Parameters tab is empty, and that is fine.
    We will make our changes using the Layout area of the Animation Controller window.
    That is the area with the grid background.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by making the following changes. For all 11 New State buttons,
    do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Left-click the state button
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Look in the Inspector panel to determine which animation is associated with
    the state button
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the state name in the Inspector panel to reflect the animation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the return button
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-check the state button to ensure your change was made
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you have completed the preceding five steps for all 11 states, your Animation
    Controller window should match the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/388a048e-5c23-47fa-96ee-ac427307fa31.png)'
  prefs: []
  type: TYPE_IMG
- en: If you were to put the game into game mode, you would see that nothing has changed.
    We only changed the state names so they made more sense to us. So, we have some
    more work to do with the Animation Controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'Currently, the Attacking on Ground state is the default. That is not what we
    want. It makes more sense to have the **Idle on Ground** state to be our default.
    To make that change, right-click the **Idle on Ground** state and select Set as
    Layer Default State:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5413c304-8755-4e37-9eed-ce5bcfb859b4.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, we need to make a series of changes to the state transitions. There are
    a lot of states and there will be a lot of transitions. In order to make things
    easier, we will start by deleting all the default transitions. To accomplish this,
    left-click each white line with an arrow and press your keyboard's *Delete* key.
    Do not delete the orange line that goes from **Entry** to **Idle on Ground**.
  prefs: []
  type: TYPE_NORMAL
- en: 'After all transitions have been deleted, you can drag your states around so
    you have more working room. You might temporarily reorganize them in a manner
    similar to what is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e452d19e-f83f-4527-9c08-76e32790acf4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Our next task is to create all of our state transitions. Follow these steps
    for each state transition you want to add:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the originating state.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Create Transition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the destination state.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you have made all your transitions, you can reorganize your states to
    declutter the Animation Controller''s layout area. A suggested final organization
    is provided in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/69fae59c-6c5b-4110-8b79-c41251f458da.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see in our final arrangement, we have 11 states and over two dozen
    transitions. You will also note that the **Die on Ground** and **Die Standing**
    states do not have any transitions. In order for us to use these animations in
    our game, they must be placed into an Animation Controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s run a quick experiment:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the Beetle character in the Hierarchy panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Inspector panel, click the Add Component button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Physics | Box Collider.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the Edit Collider button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify the size and position of the box collider so that it encases the entire
    beetle body.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the Edit Collider button again to get out of edit mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your box collider should look similar to what is depicted in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8b398df8-efde-4b50-a2c1-0427b115102e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, let''s create a script that invokes the Die on Ground animation when
    the Cucumber Man character collides with the beetle. This will simulate the Cucumber
    Man stepping on the beetle. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the Beetle character in the Hierarchy panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Inspector panel, click the Add Component button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select New Script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the script `BeetleNPC`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the Create and Add button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the project view, select Favorites | All Scripts | BeetleNPC.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click the `BeetleNPC` script file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit the script so that it matches the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This code detects a collision between the Cucumber Man and the beetle. If a
    collision is detected, the `Die on Ground` animation is played.  As you can see
    in the following screenshot, the Cucumber Man defeated the Cucumber Beetle:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c6028313-bd1c-455f-bef2-11b8411b6eba.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This short test demonstrated two important things that will help us further
    develop this game:'
  prefs: []
  type: TYPE_NORMAL
- en: Earlier in this section, you renamed all the states in the Animation Controller
    window. The names you gave the states are the ones you will reference in code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since the animation we used did not have any transitions to other states, the
    Cucumber Beetle will remain in the final position of the animation unless we script
    it otherwise. So, if we had 100 beetles and defeated them all, all 100 would remain
    on their backs in the game world.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This was a simple and successful scripting test for our Cucumber Beetle. We
    will need to write several more scripts to manage the beetles in our game. First,
    there are some game world modifications we will make.
  prefs: []
  type: TYPE_NORMAL
- en: Terraforming the terrain for our Cucumber Beetles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our game world is currently very large and appropriate for the game we envisioned.
    In order to efficiently demonstrate how to script the Cucumber Beetles, we will
    designate a sandbox area of our game and confine the Cucumber Beetles to that
    area. We will also need to move some cherry trees there.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will make the following sequential modifications to our game''s terrain:'
  prefs: []
  type: TYPE_NORMAL
- en: Designate a sandbox area
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plant additional cherry trees
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create spawning sites
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designating a sandbox area
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We do not necessarily want to make major modifications to our game's terrain.
    We previously spent considerable time planning, creating, and fine-tuning the
    terrain. Instead, we will select one of the large, flat areas to act as a sandbox.
    If you do not have any large, flat areas, you can select one of your flat areas
    and make it a bit bigger.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following image suggests a size relative to our current game world. The
    white box towards the bottom center of the image represents an ideal size:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8806b183-af16-4efa-ba32-ac4147fc9066.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we know where our sandbox will be, let's prepare the Hierarchy panel
    for any new items we create for the sandbox. Simply right-click in an empty area
    of the Hierarchy panel and select Create Empty. With that new `GameObject` selected,
    rename it in the Inspector panel as `Sandbox`.
  prefs: []
  type: TYPE_NORMAL
- en: Planting additional cherry trees
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since our sandbox is a smaller representation of our larger game environment,
    we will need one or more cherry trees. As you will recall, the Cucumber Man will
    collect cherries from the cherry trees and use them to launch ranged attacks on
    the Cucumber Beetles.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 6](04be4d7b-8c85-4d9e-baf2-43965183f99f.xhtml), *Creating and Importing
    3D Objects for Our Game*, we imported our `Cherry Tree` object and modified it
    for our game. Now, we can simply add additional cherry trees to our sandbox area.
    You can drag the CherryTreeCollider from Projects | Assets | Prefabs directly
    into your sandbox area in the Scene view.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you will want to zoom into the sandbox area, using the Scene view, to
    ensure that your trees are not above the ground or in need of additional adjustments.
  prefs: []
  type: TYPE_NORMAL
- en: Once your additional cherry trees are in place, each new cherry tree will be
    accessible in the Hierarchy panel. Click each newly created cherry tree and drag
    it to the `Sandbox` object you previously created. We are using the `Sandbox`
    object for organizational purposes only.
  prefs: []
  type: TYPE_NORMAL
- en: Creating spawning sites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Within the sandbox area, select three areas to serve as spawn points. Where
    you create them is up to you. Placing them at equal distances from one another
    would be a good approach. To make these spawn points obvious, let's create a spawn
    pad and then copy it and place it at various points in the sandbox.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the steps to create the spawn pad:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Hierarchy panel, right-click Sandbox and select 3D Object | Cylinder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Inspector panel, rename the Cylinder to `SpawnPad1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click Transform | Scale and change the scale of `SpawnPad1` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: x = `3`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: y = `0.05`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: z =`3`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Test the scale of the pad by placing it under the Cucumber Man. It should look
    similar to what is shown in the following screenshot. Make adjustments so that
    your pad matches what you see here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f515e789-5b3d-42c1-984d-4a52462f5e5b.png)'
  prefs: []
  type: TYPE_IMG
- en: With `SpawnPad1` selected, deselect the Mesh Renderer | Receive Shadows checkbox
    in the Inspector view. This will prevent shadows from being cast onto our spawn
    pad. This step is not terribly important, but helps make our spawn pad seem nonorganic,
    and since we will be spawning the Cucumber Man on this pad, it adds a nice visual
    element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the transform tools, adjust the position of the pad so that it is under
    the bottom of the Cucumber Man's feet, just at or above the grass level.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With `SpawnPad1` selected, click the small circle to the right of the Materials
    | Element 0 | Missing (Material) input box in the Inspector panel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/567a2e3f-0f71-4dd2-9d0d-0d1bca9125f5.png)'
  prefs: []
  type: TYPE_IMG
- en: Select a material of your choice from the Select Material dialog window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, deselect the Capsule Collider component in the Inspector panel. We
    will not need this.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You now have your first spawn pad. Make two further copies, ensuring that they
    are named `SpawnPad1`, `SpawnPad2`, and `SpawnPad3`. In the Hierarchy panel, ensure
    that they are all in your `Sandbox` object.
  prefs: []
  type: TYPE_NORMAL
- en: Our last task is to put the three spawn pad instances where we want them in
    the `Sandbox` area in Scene view.
  prefs: []
  type: TYPE_NORMAL
- en: This is a good time to save your scene and your project.
  prefs: []
  type: TYPE_NORMAL
- en: Adding cucumber patches to our terrain
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 6](04be4d7b-8c85-4d9e-baf2-43965183f99f.xhtml), *Creating and Importing
    3D Objects for Our Game*, we used planes to designate six cucumber patch areas.
    In this section, we will make a seventh cucumber patch and use it in our sandbox
    area. We will also plant cucumber patches inside the new cucumber patch area.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a cucumber patch area in the sandbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section guides you through the steps necessary to create a cucumber patch area
    in the sandbox. In the Hierarchy panel, you should have a `Cucumber Patch Areas`
    game object that contains every size of cucumber patch, each one a 3D object of
    the `plane `type. If you do not have these objects, which are shown in the following
    screenshot, either revisit [Chapter 6](04be4d7b-8c85-4d9e-baf2-43965183f99f.xhtml),
    *Creating and Importing 3D Objects for Our Game*, or download the `Starting-Chapter-08` Unity project
    available from the publisher''s companion site:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b3fcc4a9-2c3d-4f56-a10f-2164a8c2d156.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here are the steps to create a sandbox area in our game:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Hierarchy panel, expand the `Cucumber Patch Areas` game object to expose
    the six planes. Remember, we created the `Cucumber Patch Areas` game object to
    serve as a visual organizing folder for our convenience.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click each plane (`CucumberPatchArea1`, `CucumberPatchArea2`, `CucumberPatchArea3`, `CucumberPatchArea4`, `CucumberPatchArea5`,
    and `CucumberPatchArea6`). When you double-click an object in the Hierarchy panel,
    the Scene view will be focused on it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Identify which cucumber patch area is already in your sandbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Hierarchy panel, right-click the identified cucumber patch and select
    Duplicate.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the duplicated cucumber patch as `CucumberPatchAreaSandbox`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Hierarchy panel, drag the `CucumberPatchAreaSandbox` to subordinate it
    under the `Sandbox` game object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the `CucumberPatchAreaSandbox` plane selected, modify the shape to fit
    the sandbox area. Use the transform tools for this.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify the terrain section of the sandbox, if necessary, so that the terrain
    inside the confines of the `CucumberPatchAreaSandbox` is flat and can receive
    cucumber patches.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You may have to use the Raise / Lower Terrain and Smooth Height terrain tools
    to ensure the area with the `CucumberPatchAreaSandbox` is flat. The following
    screenshot shows the orange-outlined `CucumberPatchAreaSandbox` area, two cherry
    trees, and the three spawn pads indicated in red. Smaller and more difficult to
    see are the Cucumber Man and one Cucumber Beetle. Your sandbox does not need to
    look exactly like this, but should have the same components as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/df148726-9e49-4441-9393-cc7de1c6d0a4.png)'
  prefs: []
  type: TYPE_IMG
- en: Planting cucumber patches
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will use our cucumber patches, the `CucumberPatch1` and `CucumberPatch2` prefabs,
    to create cucumber patch areas in the sandbox. These areas will serve as cover
    for our cucumbers. In this section, we will create an empty game object to encapsulate
    a series of cucumber patches. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the Sandbox in the Hierarchy panel and select Create Empty.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the new GameObject as `cucumberPatches`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag several `CucumberPatch1` prefabs onto the scene, in your sandbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag several `CucumberPatch2` prefabs onto the scene, in your sandbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Hierarchy panel, move all the newly created cucumber patches to the `cucumberPatches`
    game object under Sandbox. This is merely to keep the Hierarchy panel organized.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand the `cucumberPatches` game object in the Hierarchy panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select all of the cucumber patches you added and use *Ctrl* + *C* and *Ctrl*
    + *V* to copy and paste them, respectively. The copied results will be highlighted
    in the Hierarchy panel and accessible in the Scene view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Scene view, use the transform tools to relocate the copied group of cucumber
    patches.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat steps 7 and 8 until you are satisfied with your sandbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'An example of what your sandbox might look like with the newly created cucumber
    patches is provided in the following screenshot. Your sandbox will be different,
    and that is okay:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1dfa14be-b881-442c-868c-3c0b16d800fd.png)'
  prefs: []
  type: TYPE_IMG
- en: Our sandbox now has sufficient cucumber patches. In the next section, we will
    focus on cucumbers.
  prefs: []
  type: TYPE_NORMAL
- en: Adding cucumbers to our terrain
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cucumbers will be used in our game to give the beetles something to search for
    and to eat. We will place several cucumbers in the sandbox area and, in [Chapter
    10](fdacd7a8-63fe-454d-9d50-f9f40070e484.xhtml), *Scripting Our Points System*,
    keep track of how many there are during gameplay. In this section, we will prepare
    the cucumbers for our use and populate them in our game.
  prefs: []
  type: TYPE_NORMAL
- en: 'You previously downloaded the necessary assets for the cucumber. As you can
    see in the following screenshot, `Cucumber` is accessible in the `Assets/Cucumber` folder.
    You will note that when we select `Cucumber`, the bottom of the Project panel
    identifies the `Cucumber` file as a `.fbx` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0313ce77-b146-4e54-8762-bb62c3425dec.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `.fbx` file was exported from the 3D modeling software so we can use it
    in our game. When that asset is selected, the inspector view shows Import Settings.
    We want access to the transform, mesh renderer, and other components, so we will
    turn it into a prefab and make some changes. Here are some initial steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Drag the `Cucumber.fbx` file from Assets | Cucumber to the Hierarchy panel
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the `Cucumber` selected in the Hierarchy panel, drag it to the `Assets`/`Prefabs`
    folder in the Project panel
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the `Cucumber` from the Hierarchy panel
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Project panel, select Assets | Prefabs | Cucumber
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When we select the `Cucumber` file we just moved from the Hierarchy panel to
    the `Prefabs` folder, the bottom of the Project panel, shown in the following
    screenshot, identifies `Cucumber` as a prefab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dbdf2d49-aabc-43a1-9346-a5bf0e5494c8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, when we look in the Inspector panel, we have access to the components
    we need to further prepare the cucumber for use in our game. Let''s make a few
    changes to the prefab:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Inspector panel, select Tag | Add Tag.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Tags & Layers interface, click the plus icon to the right of the view.
    As shown in the following screenshot, beneath the plus icon is the CherryTree
    tag and to the right:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1e6da26c-2888-40ca-a56d-da287af4e472.png)'
  prefs: []
  type: TYPE_IMG
- en: Enter the name Cucumber.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the Save button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Assets | Prefabs | Cucumber prefab in the Project panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Inspector panel, select Tag | Cucumber.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that our `cucumber` prefab has a tag, all copies of it will have that same
    tag. This tag will facilitate the following for us regarding gameplay:'
  prefs: []
  type: TYPE_NORMAL
- en: Easily count how many cucumbers are left in the game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identify when a beetle has found a cucumber
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We have one more modification to make for our `cucumber` prefab—add a collider:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the Assets | Prefabs | Cucumber prefab in the Project panel
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Inspector panel, click the Add Component button
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Physics | Box Collider
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we can add cucumbers to our sandbox area. First, let''s take the same
    approach as we did for the cucumber patches in regards to organization:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the Sandbox in the Hierarchy panel and select Create Empty.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the new `GameObject` to `cucumbers`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag several `Cucumber` prefabs onto the scene, in your sandbox. You can also
    drag a single prefab into the Scene view and make copies of it using the shortcut
    *Ctrl* + *D*, which will duplicate all currently selected objects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the transform tools, rotate, resize, and relocate the cucumbers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure you have at least 10 cucumbers in your sandbox area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Hierarchy panel, move all the newly created cucumbers to the `cucumbers`
    game object under Sandbox. This is merely to keep the Hierarchy panel organized.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have your cucumbers dispersed throughout the sandbox area of your game
    world, you are ready to start scripting the Cucumber Beetles. We will take care
    of this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: This is a good time to save your scene and your project.
  prefs: []
  type: TYPE_NORMAL
- en: Scripting our non-player characters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will write the necessary scripts to manage the Cucumber
    Beetles in our game. Specifically, we will write scripts to accomplish the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Beetle patrol
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Beetle finds and eats cucumber
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Beetle attacks player on the ground
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Beetle stands to attack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting organized
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since we are writing several scripts, we should stay organized. We can click
    Favorites | All Scripts in the Project panel to get a list of all the scripts
    in our project, but there are a lot of them, most of which we will not edit for
    our game. So, let''s create a folder in the Project panel to organize our custom
    scripts. Here are the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Project panel, right-click the `Assets` folder
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Create | Folder
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new folder `Custom Scripts`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that we have a folder for our custom scripts, let''s move a few:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Project panel, click Favorites | All Scripts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll until you find the `BeetleNPC` script we created earlier in this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the `BeetleNPC` script to our `Custom Scripts` folder. This moves the `BeetleNPC`
    script to the designated folder. You will still see it in Favorites | All Scripts because
    this feature shows all scripts regardless of their location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move the `CameraFollower` script to the `Custom Scripts` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move the `PlayerController` script to the `Custom Scripts` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move the `PlayerMotor` script to the `Custom Scripts` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you are done moving scripts, your `Cucumber Scripts` folder should be
    the same as the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/75bddd97-870c-4906-ad89-b0d3d3774135.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Our beetles will have the following behaviors in our game:'
  prefs: []
  type: TYPE_NORMAL
- en: Search for cucumbers (patrol)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eat cucumbers when found
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defend itself from the Cucumber Man on the ground
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stand to defend itself from the Cucumber Man
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next sections will show you how to script these behaviors.
  prefs: []
  type: TYPE_NORMAL
- en: Beetle patrol
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Beetles in our game will search for cucumbers within the sandbox area. In this
    section, we will write a script to manage their patrol. Let's take some preparatory
    steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will get started by creating a character controller for our `Beetle` prefab.
    Here are the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Project panel, select Assets | Prefabs and click on the `Beetle` prefab
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Inspector panel, click the Add Component button
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Physics | Character Controller
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Be sure that you add the character controller to the `Beetle` prefab, not a
    beetle that you have in your scene.
  prefs: []
  type: TYPE_NORMAL
- en: We do not need to make any changes to the default character controller, but
    we do need to have one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s make things easy on us and create some temporary containing walls
    for the beetles. You can simply add 3D cube game objects and, using the transform
    tools, orientate them so that they border the sandbox, or a part of the sandbox.
     You can put your walls inside an empty game object called `Walls` and, in the
    Hierarchy panel, organize them inside the `Sandbox` game object. A representative
    example is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dea4e9b1-e644-4930-aaaf-aba9e0563c7c.png)'
  prefs: []
  type: TYPE_IMG
- en: Okay, now we are ready to start scripting our beetle's patrol. To get started,
    right-click the Assets | Custom Scripts folder in the Project panel. Select Create
    | C# Script, then name the script `BeetlePatrol`. This creates a C# script for
    us in our `Custom Scripts` folder. We will walk through this script from top to
    bottom in small chunks.
  prefs: []
  type: TYPE_NORMAL
- en: 'This first section of code simply imports `System.Collections`, `System.Collections.Generic`,
    and the `UnityEngine`. The section also has our `BeetlePatrol` class header:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Our variables are provided in the next section. The first variable, `isDie`,
    is a global variable the we will use to determine whether the Cucumber Beetle
    should stop patrolling. The remaining variables are local. Their use will be self-evident
    after reviewing subsequent code sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The next section of code is our `Start()` method, which only runs at the beginning
    of the game. This code sets the initial rotation for the beetle''s patrol:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Our `Update()` method, shown in the following code, is our next section. This
    code will be executed once per game frame. Here, you can see that if condition
    `isDie` is `false` (or not `true`), then the code will be executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This last section of code provides two methods. The `NewHeading()` and `NewHeadingRoutine()`
    methods calculate a new direction for the beetle to move towards:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Save your script. Next, we need to associate it with the `Beetle` prefab. With
    the prefab selected, click the Add Component button in the Inspector panel. Then,
    select Scripts | Beetle Patrol.
  prefs: []
  type: TYPE_NORMAL
- en: You can drag multiple beetles into your scene and test the game. You should
    see them wandering around your sandbox, remaining confined by the walls you built.
  prefs: []
  type: TYPE_NORMAL
- en: Beetle finds and eats cucumber
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Earlier in this chapter, we created a `BeetleNPC` script file and attached it
    to our `Beetle` prefab. That script detected collisions with the Cucumber Man.
    In this section, we will modify that script so that it can also detect when it
    collides with a cucumber.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s first ensure that the cucumbers are properly set up. Check that the
    is selected (checked) in the cucumber''s Box Collider component in the Inspector
    panel. Next, make several copies of your cucumber throughout the sandbox area
    of your scene. You can place them in close proximity to your beetles for easier
    testing. See the following screenshot for an optimal test configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fac4c46f-b637-49e8-8b8d-e2363b3a3c52.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `BeetleNPC` script needs a new variable and two methods, one of which will
    be used as a coroutine. Let''s get started with the new variable. As you can see
    in the following code snippet, we now have a second variable, `cucumberToDestroy`.
    We will use that to reference the cucumber that the beetle ate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will add an `OnTriggerEvent()` method that is similar to the `OnCollissionEnter`
    that we previously created in this chapter. As you can see, we are testing to
    see whether the beetle collided with a cucumber. When that is detected, we have
    four lines of code that are executed. The first line points the `cucumberToDestroy`
    variable to the specific cucumber the beetle collided with. The next line sets
    the `isEating` value to `true`. We will update the `BeetlePatrol` script to accommodate
    that change. The third statement plays the eating animation. The final statement
    calls the `DestroyCucumber` function, which we will look at next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The last change to the `BeetleNPC` script is the `DestroyCucumber()` function.
    We are using this function to delay the destruction of the cucumber. This simulates
    the amount of time it takes for the beetle to eat the cucumber. You can change
    the parameter of `WaitForSecondsRealTime` to your liking. That parameter represents
    real-world seconds. Once the delay is over, the object is destroyed and the `isEating`
    variable is set to `false`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We have two changes to make to our `BeetlePatrol` script. First, as you can
    see in the following code, we will add the new `isEating` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Our final change to the `BeetlePatrol` script is to update the conditional
    statement, as shown in the following code. Now, we will stop the patrol if the
    beetle is dying or eating:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Beetle attacks player on the ground
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Currently, when our Cucumber Man collides with a Cucumber Beetle, the Die animation
    is played, but no other behaviors are implemented. In this section, we will modify
    the necessary scripts for the following to occur each time the Cucumber Man collides
    with a Cucumber Beetle:'
  prefs: []
  type: TYPE_NORMAL
- en: Beetle faces Cucumber Man
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Beetle attacks Cucumber Man for specified time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Beetle's die animation plays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Beetle is removed from game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will use the following three lines of code inside our `OnCollisionEnter()`
    method to force the beetle to face the Cucumber Man when there is a collision.
    As you can see from the following code, we create a variable to make it easy to
    reference the Cucumber Man and then a second variable for the Cucumber Man''s
    current transform. The third line of code tells the current Cucumber Beetle to
    face the Cucumber Man:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we just need to edit the `OnCollisionEnter` method to include two statements.
    The first statement plays the Attacking on Ground animation. The second statement
    makes a call to the function that will destroy the current Cucumber Beetle. Here
    are those two lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The last change to the `BeetleNPC` script is the `DestroySelf()` function.
    We are using this function to simulate the battle and end of life for the current
    Cucumber Beetle. There are three statements inside the function. The first statement
    simulates the attack time. The second statement plays the `Die on Ground` animation.
    The final line destroys the game object, which is the current Cucumber Beetle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We have two changes to make to our `BeetlePatrol` script. First, as you can
    see in the following code, we will add the new `isAttacking` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Our final change to the `BeetlePatrol` script is to update the conditional
    statement, as shown in the following code. Now, we will stop the patrol if the
    beetle is dying, eating, or attacking:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: We will make additional modifications to the scripts and behaviors in [Chapter
    10](fdacd7a8-63fe-454d-9d50-f9f40070e484.xhtml), *Scripting Our Points System*.
  prefs: []
  type: TYPE_NORMAL
- en: Beetle stands to attack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will recall that the Cucumber Man has the ability to throw cherries at the
    Cucumber Beetles. This is a ranged attack, and if the Cucumber Beetle were to
    start walking or running on the ground toward the Cucumber Man to attack, it is
    likely the beetle would die before reaching the Cucumber Man.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, if a beetle is hit by a cherry, we want the following to occur:'
  prefs: []
  type: TYPE_NORMAL
- en: Beetle faces Cucumber Man
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Beetle stands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Beetle runs, while standing, towards the Cucumber Man
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Beetle attacks Cucumber Man while standing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can review the animations if you need a refresher on what they look like.
  prefs: []
  type: TYPE_NORMAL
- en: We will make some significant changes to our `BeetleNPC` script. The updated
    script is presented in the following code in its entirety, divided by sequential
    sections with explanations.
  prefs: []
  type: TYPE_NORMAL
- en: 'This section shows the imports and class-level variables. You will notice that
    the last three variables (`cherryHit`, `smoothTime`, and `smoothVelocity`) are
    new. We will use `cherryHit` to keep track of the sequence leading up to the beetle''s
    death. The remaining two variables will be used to control how fast and smooth
    the beetle travels to the Cucumber Man:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'No change was made to the `Start()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We are now using the `Update()` method for the first time. This is necessary
    so that every frame in which the beetle can travel toward the Cucumber Man is
    shown. You can also see that we are using the `cherryHit` variable in our conditional
    statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The next section of our script is the `OnCollisionEnter()` method. We moved
    the statements we previously had in this method so that they are encapsulated
    in an `if` statement. If the `cheeryHit` is `false`, then the original code will
    be executed, otherwise the two lines of code after the `else` statement will be
    executed. We see there that we caused two animations to play:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The next section of code is the `OnTriggerEnter()` method that we previously
    created for handling collisions with cucumbers.  As you can see from the following
    code, we added an `else if` statement to check whether we collided with a `gameObject`
    with a tag of `Cherry`. When that condition is `true`, we set the `isAttacking`
    Boolean variable to `true` so that the forward motion driven by the `BeetlePatrol`
    script will stop. We also set the `cherryHit` value to `true` and play the animation
    that shows the beetle standing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The last section of our `BeetleNPC` script contains three `Destroy`-related
    functions. You are already familiar with `DestroyCucumber()`. We renamed the `DestroySelf()`
    function as `DestroySelfOnGround()` and added the new `DestroySelfStanding()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: In order to test this functionality, we will need to have some cherries in our
    scene. Start by downloading the `Cherries.unitypackage` asset package from the
    publisher's site. This package includes a `Cherry.prefab` file that is already
    set up to work in our game. It has a `Cherry` tag and a `Box Collider` with `Is
    Trigger` checked.
  prefs: []
  type: TYPE_NORMAL
- en: 'In [Chapter 10](fdacd7a8-63fe-454d-9d50-f9f40070e484.xhtml), *Scripting Our
    Points System*, we will add the ability for the Cucumber Man to throw cherries.
    For now, let''s place a bunch of them in our sandbox for testing. One approach,
    as illustrated in the following screenshot, is to surround a beetle with cherries.
    This will make our testing easier and faster:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8837ae96-dafb-4c65-bb23-9d27fe991f24.png)'
  prefs: []
  type: TYPE_IMG
- en: This is a good time to save your scene and your project.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we focused on the Cucumber Beetles, our game''s non-player
    characters. We reviewed the beetles'' 11 animations and made changes to the non-player
    characters'' animation controller. In addition, we wrote scripts to control the
    non-player characters. Our scripts resulted in several beetle behaviors: patrolling,
    cucumber consumption, fighting on the ground, and, when hit by a cherry, standing,
    running, and attacking on hind legs. We also added cucumber patches, cucumbers,
    and cherries to our game world.'
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 9](6e2e628c-4c81-4ec3-bd4f-2ae0f2a29aab.xhtml), *Adding a Heads-Up
    Display*, we will design, develop, and incorporate a **Heads-Up Display** (**HUD**)
    in our game. We will create text and graphics that provide visual indicators of
    points, health, and additional information to help the player maintain situational
    awareness during gameplay.
  prefs: []
  type: TYPE_NORMAL
