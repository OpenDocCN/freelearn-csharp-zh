- en: Assessments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section contains answers to questions from all the chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 1 – Text, Flow, Choices, and Weaves
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The story is the content, and the narrative is the experience of it. In nonlinear
    storytelling, the story is potentially experienced in a different order, with
    each reordering creating a new narrative for the reader.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ink understands flow as movement through the story as a narrative-like experience.
    In ink, this can "*run out*" when there are no paths to the end of the story.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Multiple lines can be combined using glue, a combination of less-than and greater-than
    symbols.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A weave is a collection of choices.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The different types of choices are basic, often called disappearing, and sticky
    choices. The first can only be used once and the second multiple times, as they
    "stick around" across weave usages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Selective output allows an author to *select* what to use when shaping an option
    based on the text of the choice in ink. Different amounts of text can be shown
    to the reader based on the use of opening and closing square brackets with the
    text of the choice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sticky choices keep options open for later use. In more complex stories, the
    reader may return to a weave and pick a different or the same option again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 2 – Knots, Diverts, and Looping Patterns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A knot is a section of a story with a name that can be diverted to ink.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`DONE` ends the current flow and `END` stops the story completely.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A stitch is a sub-section of a story that can only appear inside a knot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `INCLUDE` keyword pulls in other files and allows a project to use multiple
    files with their own knots and stitches available to the whole project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A labeled option creates a value that is increased each time it is shown. Conditional
    values, on the other hand, allow for comparing variables and values. If the condition
    is true when used with an option, it will be shown. Otherwise, it will be hidden.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 3 – Sequences, Cycles, and Shuffling Text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The three types of alternatives are sequences, cycles, and shuffles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The single-line forms of sequences, cycles, and shuffles all use the vertical
    bar, `|`, between elements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The ampersand, `&`, is used before the first element as an alternative to creating
    a cycle.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A sequence will show each of the elements until the last. A cycle will loop
    back to the first element after its last one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A shuffle picks a random element from its set each time it is run.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Multi-line sequences use the `stopping` keyword. This is unlike cycles and shuffles,
    which each use the name of the type of alternative as the keyword to create their
    multi-line forms.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 4 – Variables, Lists, and Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Assignment happens any time a variable is given a new value. This happens when
    a variable is first created in ink and can also happen on single lines of code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A new string created based on two strings being added, or between a string and
    numerical value, is known as concatenation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The tilde defines a single line of code in ink. It is often used with assignment,
    to call a function, or to perform some other single-line action.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The values in a list are part of a Boolean set. This means they are either `true`
    or `false`. In ink, all values in a list are set to `false` by default. To change
    to `true`, they must be surrounded by opening and closing parentheses.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The technical term for a variable defined as part of a function or a knot is
    a parameter. It affects the calculations or how content is processed by the function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 5 – Tunnels and Threads
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To create a tunnel, a divert must be used before and after the name of a knot
    or stitch. Within the knot or stitch, two diverts must be used together to return
    from the tunnel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tunnels connect two different locations in ink. They can be used between knots,
    stitches, or other locations in a story. Tunnels move the flow to a location and
    then return when two diverts are encountered.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A divert moves the flow to another knot or stitch. A tunnel uses two diverts
    to move to a knot or stitch and then returns to where it started. A thread is
    the inverse of a divert. It moves the knot or stitch to the current flow location
    instead of moving the flow to the knot or stitch.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Normally, multiple threads cannot be used on the same line. However, when using
    alternatives, it is possible to include multiple threads as part of the same structure.
    They are still accessed one at a time but can be grouped together on one line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 6 – Adding and Working with the ink-Unity Integration Plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: No, Inkle, the maintainers of the ink-Unity Integration plugin, do not recommend
    using the version found in the Unity Asset Store. This version is often out of
    date.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the ink-Unity Integration plugin is installed in a project, new ink files
    can be created using the Create menu. This can be accessed using the **Project**
    window toolbar, right-clicking in the **Project** window, or via the **Assets**
    menu by selecting **Create**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inky is a good choice for editing ink source files. However, it needs to be
    associated with ink source files, which can be opened by double-clicking on files
    in the **Project** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yes, the auto-compilation process can be adjusted by opening the **Project**
    Settings, selecting **Ink**, and then changing the **Compile All Ink Automatically**
    option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 7 – Unity API – Making Choices and Story Progression
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Continue()` method only loads a single line of ink text content and the
    next weave it encounters each time it is called. The `ContinueMaximally()` method
    loads all text content until it encounters a weave or the end of the story.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `ChooseChoiceIndex()` method expects an `int` value within the range of
    the total number of entries in the `currentChoices` property in the `Story` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `canContinue` property is a Boolean value. If there is more story content,
    it will be `true`. Otherwise, it will be `false`. The `canContinue` property should
    always be checked as part of a conditional statement before using the `Continue()`
    or `ContinueMaximally()` methods to prevent either method from throwing an error.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A prefab is a `GameObject` instance saved as an asset in Unity. Any game object
    used as part of the **Hierarchy** view can be saved as an asset by dragging it
    into the **Project** window. A copy of a prefab can be created during runtime
    through a process called *instantiation* in Unity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For a weave encountered in a running ink story, the `currentChoices` properties
    will contain a `List<Choice>` instance, where each entry is an object based on
    the `Choice` class with `text` and `index` properties.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 8 – Story API – Accessing ink Variables and Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Yes, once a variable is created in ink, it can be accessed at any point in the
    story. By using the `variablesState` property as part of the Story API, the values
    of variables can also be accessed and changed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Because functions are global in ink, this means they can be accessed from any
    point in an ink story. When working with the ink-Unity Integration plugin, the
    `HasFunction()` and `EvaluateFunction()` methods as part of the Story API provide
    the ability to test for a global function in an ink story and evaluate it, if
    it exists. The `EvaluateFunction()` method calls the ink function and can be used
    to pass data to ink or retrieve the text output of the function using the `out`
    C# keyword.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unlike text content, the values of variables in ink exist outside of story progression
    controlled by the `Continue()` method or `ContinueMaximally()` method. However,
    because variables are global, their values can be changed during the action of
    loading a line or a larger chunk of a story. The value of a variable might be
    changed because of using either the `Continue()` method or `ContinueMaximally()`
    method, but they are not technically needed to work with variables in ink.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Any variables can be accessed by using their name in quotation marks within
    square brackets when working with the `variablesState` property as part of the
    Story API. While the same API provides methods for working with variables in ink,
    the shorthand syntax is often the preferred way to access and change the values
    of variables.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yes. It is recommended to use the `HasFunction()` method for functions before
    attempting to change the value of a variable or evaluate a function. This will
    help prevent potentially game-crashing problems.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `out` C# keyword provides a way to pass a variable by reference instead
    of passing only its value. This is an easy way to retrieve the text output of
    an ink function as a parameter to the `EvaluateFunction()` method of the Story
    API.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 9 – Story API – Observing and Reacting to Story Events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `ObserveVariable()` and `ObserveVariables()` methods are based on the use
    of the action of *observing* variables. This separates the reaction in Unity from
    the action in ink. The action of observing allows Unity to react in any way it
    wants. The methods only provide the name of the variable and its new value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delegated functions are the second parameter of both the `ObserveVariable()`
    and `ObserveVariables()` methods. The use of the `delegate` C# keyword *delegates*
    the running of a function because of another function or method. The `ObserveVariable()`
    and `ObserveVariables()` methods are used in a callback approach.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first, the `ObserveVariable()` method, accepts the name of a single variable
    and a delegated function to be called when it changes. The second, the `ObserveVariables()`
    method, accepts a `List<string>` instance of variables to watch and a delegated
    function. In both cases, the delegated function will be called with the name of
    the variable that changed and its new value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `variablesState` property provides direct access to ink variables and their
    current values by their names. However, the name of the ink variable must be used
    to access its value as part of recurring code such as might be found in the `Update()`
    or `FixedUpdate()` methods in Unity. The `ObserveVariable()` and `ObserveVariables()`
    methods allow a developer to write code that only runs when one or more ink variables
    change and only then. This can free up time each cycle to only run the necessary
    code and then update Unity when ink itself updates some value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 10 – Dialogue Systems with ink
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A hashtag is created when the hash (`#`) is used to create a tag on a single
    line in ink. Hashtags are used to add extra data per line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A hashtag can only be used at the end of a line, but a speech tag is often used
    at the beginning of a line. A speech tag is always used to mark who is communicating,
    but a hashtag conveys extra information of any form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The branching patterns of dialogue often look like trees, where the initial
    set of choices appears as a "*trunk*," with each branch moving outward into its
    own sets.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The list pattern presents options in a vertical arrangement. It can display
    multiple sentences per option but often needs scroll bars to present all the options
    within a set. It is best used when there is more visual spacing available for
    dialogue choices.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The radial menu pattern presents options clockwise on the screen. It is often
    used with video game consoles or other limited visual space contexts. Because
    of the reduced amount of spacing, options often appear as single words, icons,
    or short descriptions of their outcomes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 11 – Quest Tracking and Branching Narratives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A quest is a series of events connected to a character within a story.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The name of the ink knot used to progress a quest is `progress`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `ChoosePathString()` method abruptly moves the current location from one
    section to another.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The global property in Unity is named `Application.dataPath`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Polling requires checking values in one system from another. The events-based
    approach allows one system to observe another and respond to changes (events)
    as they happen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 12 – Procedural Storytelling with ink
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Procedural storytelling** occurs when the story of a project is generated
    by procedures, or rules, that dynamically plan or shape content for a player.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A **random table** is a set of entries where individual values are chosen at
    random. Originally created as tables where rows were chosen using dice, the same
    concept can be used in ink with shuffles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`RANDOM()` function can be used to decide the probability of entries instead
    of the default equal amounts when using the shuffle functionality.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A **grammar** is a set of rules for a language. A substitution grammar decides
    the substitution of words or phrases according to a set of rules. Often, substitution
    grammars are used with random entries or according to conditional rules.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Story planning** is the ordering of story content based on rules. Story planning
    is based on using a substitution grammar for deciding which parts of a project
    a player might experience, either before play starts or because of certain player
    actions.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
