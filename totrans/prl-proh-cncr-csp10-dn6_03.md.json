["```cs\npublic async IAsyncEnumerable<Order> \n```", "```cs\n    GetLargeOrdersForCustomerAsync(int custId)\n```", "```cs\n{\n```", "```cs\n    await foreach (var order in \n```", "```cs\n        GetOrdersByCustomerAsync(custId))\n```", "```cs\n    {\n```", "```cs\n        if (order.Items.Count > 10) yield return order;\n```", "```cs\n    }\n```", "```cs\n}\n```", "```cs\nConsole.WriteLine(\"Hello, World!\");\n```", "```cs\nThreadPool.QueueUserWorkItem((o) =>\n```", "```cs\n{\n```", "```cs\n    for (int i = 0; i < 20; i++)\n```", "```cs\n    {\n```", "```cs\n        bool isNetworkUp = System.Net.NetworkInformation.\n```", "```cs\n            NetworkInterface.GetIsNetworkAvailable();\n```", "```cs\n        Console.WriteLine($\"Is network available? Answer: \n```", "```cs\n            {isNetworkUp}\");\n```", "```cs\n        Thread.Sleep(100);\n```", "```cs\n    }\n```", "```cs\n});\n```", "```cs\nfor (int i = 0; i < 10; i++)\n```", "```cs\n{\n```", "```cs\n    Console.WriteLine(\"Main thread working...\");\n```", "```cs\n    Task.Delay(500);\n```", "```cs\n}\n```", "```cs\nConsole.WriteLine(\"Done\");\n```", "```cs\nConsole.ReadKey();\n```", "```cs\n    private System.Timers.Timer? _timer;\n    private void InitializeTimer()\n    {\n        _timer = new System.Timers.Timer\n        {\n            Interval = 1000\n        };\n        _timer.Elapsed += _timer_Elapsed;\n    }\n    ```", "```cs\n    private void _timer_Elapsed(object? sender, \n        System.Timers.ElapsedEventArgs e)\n    {\n        int messageCount = CheckForNewMessageCount();\n        if (messageCount > 0)\n        {\n            AlertUser(messageCount);\n        }\n    }\n    ```", "```cs\n    public void StartTimer()\n    {\n        if (_timer == null)\n        {\n            InitializeTimer();\n        }\n        if (_timer != null && !_timer.Enabled)\n        {\n            _timer.Enabled = true;\n        }\n    }\n    public void StopTimer()\n    {\n        if (_timer != null && _timer.Enabled)\n        {\n            _timer.Enabled = false;\n        }\n    }\n    ```", "```cs\n    private void InitializeTimer()\n    {\n        var updater = new MessageUpdater();\n        _timer = new System.Threading.Timer(\n        callback: new TimerCallback(TimerFired),\n        state: updater,\n        dueTime: 500,\n        period: 1000);\n    }\n    ```", "```cs\n    public void StartTimer()\n    {\n        if (_timer == null)\n        {\n            InitializeTimer();\n        }\n    }\n    public async Task DisposeTimerAsync()\n    {\n        if (_timer != null)\n        {\n            await _timer.DisposeAsync();\n        }\n    }\n    ```", "```cs\n    internal class MessageUpdater\n    {\n        internal void Update(int messageCount)\n        {\n            Debug.WriteLine($\"You have {messageCount} new \n                messages!\");\n        }\n    }\n    ```", "```cs\n    private void TimerFired(object? state)\n    {\n        int messageCount = CheckForNewMessageCount();\n        if (messageCount > 0 &&\n            state is MessageUpdater updater)\n        {\n            updater.Update(messageCount);\n        }\n    }\n    ```", "```cs\ninternal class ParallelInvokeExample\n```", "```cs\n{\n```", "```cs\n    internal void DoWorkInParallel()\n```", "```cs\n    {\n```", "```cs\n        Parallel.Invoke(\n```", "```cs\n            DoComplexWork,\n```", "```cs\n            () => {\n```", "```cs\n                Console.WriteLine($\"Hello from lambda \n```", "```cs\n                expression. Thread id: \n```", "```cs\n                {Thread.CurrentThread.ManagedThreadId}\");\n```", "```cs\n            },\n```", "```cs\n            new Action(() =>\n```", "```cs\n            {\n```", "```cs\n                Console.WriteLine($\"Hello from Action. \n```", "```cs\n                Thread id: {Thread.CurrentThread\n```", "```cs\n                .ManagedThreadId}\");\n```", "```cs\n            }),\n```", "```cs\n            delegate ()\n```", "```cs\n            {\n```", "```cs\n                Console.WriteLine($\"Hello from delegate. \n```", "```cs\n                Thread id: {Thread.CurrentThread\n```", "```cs\n                .ManagedThreadId}\");\n```", "```cs\n            }\n```", "```cs\n        );\n```", "```cs\n    }\n```", "```cs\n    private void DoComplexWork()\n```", "```cs\n    {\n```", "```cs\n        Console.WriteLine($\"Hello from DoComplexWork \n```", "```cs\n        method. Thread id: {Thread.CurrentThread\n```", "```cs\n       .ManagedThreadId}\");\n```", "```cs\n    }\n```", "```cs\n}\n```", "```cs\ninternal void ExecuteParallelForEach(IList<int> numbers)\n```", "```cs\n{\n```", "```cs\n    Parallel.ForEach(numbers, number =>\n```", "```cs\n    {\n```", "```cs\n        bool timeContainsNumber = DateTime.Now.\n```", "```cs\n            ToLongTimeString().Contains(number.ToString());\n```", "```cs\n        if (timeContainsNumber)\n```", "```cs\n        {\n```", "```cs\n            Console.WriteLine($\"The current time contains \n```", "```cs\n            number {number}. Thread id: {Thread.\n```", "```cs\n            CurrentThread.ManagedThreadId}\");\n```", "```cs\n        }\n```", "```cs\n        else\n```", "```cs\n        {\n```", "```cs\n            Console.WriteLine($\"The current time does not \n```", "```cs\n            contain number {number}. Thread id: \n```", "```cs\n            {Thread.CurrentThread.ManagedThreadId}\");\n```", "```cs\n        }\n```", "```cs\n    });\n```", "```cs\n}\n```", "```cs\nvar numbers = new List<int> { 1, 3, 5, 7, 9, 0 };\n```", "```cs\nvar foreachExample = new ParallelForEachExample();\n```", "```cs\nforeachExample.ExecuteParallelForEach(numbers);\n```", "```cs\ninternal void ExecuteLinqQuery(IList<int> numbers)\n```", "```cs\n{\n```", "```cs\n    var evenNumbers = numbers.Where(n => n % 2 == 0);\n```", "```cs\n    OutputNumbers(evenNumbers, \"Regular\");\n```", "```cs\n}\n```", "```cs\ninternal void ExecuteParallelLinqQuery(IList<int> numbers)\n```", "```cs\n{\n```", "```cs\n    var evenNumbers = numbers.AsParallel().Where(n => \n```", "```cs\n        IsEven(n));\n```", "```cs\n    OutputNumbers(evenNumbers, \"Parallel\");\n```", "```cs\n}\n```", "```cs\nprivate bool IsEven(int number)\n```", "```cs\n{\n```", "```cs\n    Task.Delay(100);\n```", "```cs\n    return number % 2 == 0;\n```", "```cs\n}\n```", "```cs\nprivate void OutputNumbers(IEnumerable<int> numbers, string \n```", "```cs\n    loopType)\n```", "```cs\n{\n```", "```cs\n    var numberString = string.Join(\",\", numbers);\n```", "```cs\n    Console.WriteLine($\"{loopType} number string: \n```", "```cs\n        {numberString}\");\n```", "```cs\n}\n```", "```cs\nvar linqNumbers = new List<int> { 0, 1, 2, 3, 4, 5, 6, 7, \n```", "```cs\n    8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 };\n```", "```cs\nvar linqExample = new ParallelLinqExample();\n```", "```cs\nlinqExample.ExecuteLinqQuery(linqNumbers);\n```", "```cs\nlinqExample.ExecuteParallelLinqQuery(linqNumbers);\n```", "```cs\n    internal async Task CheckNetworkStatusAsync()\n    {\n        Task t = NetworkCheckInternalAsync();\n        for (int i = 0; i < 8; i++)\n        {\n            Console.WriteLine(\"Top level method \n               working...\");\n            await Task.Delay(500);\n        }\n        await t;\n    }\n    private async Task NetworkCheckInternalAsync()\n    {\n        for (int i = 0; i < 10; i++)\n        {\n            bool isNetworkUp = System.Net.\n               NetworkInformation.NetworkInterface\n                   .GetIsNetworkAvailable();\n            Console.WriteLine($\"Is network available? \n                Answer: {isNetworkUp}\");\n            await Task.Delay(100);\n        }\n    }\n    ```", "```cs\n    using AsyncConsoleExample;\n    Console.WriteLine(\"Hello, async!\");\n    var networkHelper = new NetworkHelper();\n    await networkHelper.CheckNetworkStatusAsync();\n    Console.WriteLine(\"Main method complete.\");\n    Console.ReadKey();\n    ```"]