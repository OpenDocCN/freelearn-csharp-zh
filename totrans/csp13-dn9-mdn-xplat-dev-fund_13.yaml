- en: '13'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building Websites Using ASP.NET Core
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is about building websites with a modern HTTP architecture on the
    server side using ASP.NET Core.
  prefs: []
  type: TYPE_NORMAL
- en: ASP.NET Core is a free, open-source, and cross-platform web framework developed
    by Microsoft for building modern, cloud-based, and internet-connected applications.
    It is a significant redesign of the previous ASP.NET framework, focusing on flexibility,
    modularity, and performance.
  prefs: []
  type: TYPE_NORMAL
- en: ASP.NET Core provides a unified programming model for building web **user interface**
    (**UI**) and web APIs, which means you can use the same framework for both server-side
    and client-side logic.
  prefs: []
  type: TYPE_NORMAL
- en: ASP.NET Core is optimized for high performance and can handle a significant
    number of requests per second. It has a lightweight, modular architecture that
    allows developers to include only the necessary components, reducing the overall
    footprint.
  prefs: []
  type: TYPE_NORMAL
- en: You will learn about building simple websites using the Blazor static **Server-Side
    Rendering** (**SSR**) feature introduced with ASP.NET Core 8.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Exploring ASP.NET Core
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: History of Blazor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring Blazor static SSR
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Entity Framework Core with ASP.NET Core
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring ASP.NET Core
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we explore an example ASP.NET Core project, let’s review its architecture.
  prefs: []
  type: TYPE_NORMAL
- en: Architecture of ASP.NET Core
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The architecture of ASP.NET Core is composed of several key components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Middleware**: Middleware components are used to handle requests and responses.
    They are chained together in a pipeline, where each piece of middleware processes
    the request and passes it to the next component in the chain. In an optional online
    section for this chapter, you can learn how to customize this pipeline.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Routing**: The routing component is responsible for mapping incoming requests
    to appropriate endpoints and Blazor components.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dependency Injection (DI) container**: This is built-in and used for managing
    service object lifetimes and dependencies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configuration**: ASP.NET Core uses a flexible configuration system that supports
    various sources like JSON files, environment variables, and command-line arguments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Logging**: The framework has a logging API that supports various logging
    providers, allowing you to capture and store log data in a consistent manner.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now we will create an empty ASP.NET Core project and explore how to enable it
    to serve simple web pages.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an empty ASP.NET Core project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will create an ASP.NET Core project that will show a list of suppliers from
    the `Northwind` database.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `dotnet` tool has many project templates that do a lot of work for you,
    but it can be difficult to know which works best for a given situation, so we
    will start with the empty website project template and then add features step
    by step so that you can understand all the pieces:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use your preferred code editor to open the `ModernWeb` solution and then add
    a new project, as defined in the following list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Project template**: **ASP.NET Core Empty [C#]** / `web`. For Rider, select
    the project template named **ASP.NET Core Web Application**, and then set **Type**
    to **Empty**.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Project file and folder**: `Northwind.Web`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Solution file and folder**: `ModernWeb`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For Visual Studio, leave all other options as their defaults.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Framework**: .NET 9.0 **(**Standard TermSupport)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configure for HTTPS**: Selected'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enable Docker**: Cleared'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Do not use top-level statements**: Cleared'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For VS Code and the `dotnet new web` command, the defaults are the options we
    want. In future projects, if you want to change from top-level statements to the
    old `Program` class style, then specify the switch `--use-program-main`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Summaries of Visual Studio and `dotnet new` options when creating new projects
    can be found in the GitHub repository at the following link: [https://github.com/markjprice/cs13net9/blob/main/docs/ch01-project-options.md](https://github.com/markjprice/cs13net9/blob/main/docs/ch01-project-options.md).'
  prefs: []
  type: TYPE_NORMAL
- en: Build the `Northwind.Web` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `Northwind.Web.csproj`, note that the project is like a class library except
    that the SDK is `Microsoft.NET.Sdk.Web`, as shown highlighted in the following
    markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add an element to import the `System.Console` class globally and statically,
    as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you are using Visual Studio, in **Solution Explorer**, toggle **Show All
    Files**. If you are using Rider, then move the cursor over the **Solution** pane,
    and then click the “eyeball” icon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Expand the `obj` folder, expand the `Debug` folder, expand the `net9.0` folder,
    and select the `Northwind.Web.GlobalUsings.g.cs` file. Note how the implicitly
    imported namespaces include all the ones for a console app or class library, as
    well as some ASP.NET Core ones, such as `Microsoft.AspNetCore.Builder`, as shown
    in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Close the file and collapse the `obj` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Northwind.Web` project/folder, expand the folder named `Properties`,
    open the file named `launchSettings.json`, and note the profiles named `http`
    and `https`. They have randomly assigned port numbers that you will change in
    the next step so, for now, just note their locations, as shown highlighted in
    the following configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `launchSettings.json` file is only for use during development. It has no
    effect on the build process. It is not deployed with the compiled website project,
    so it has no effect on the production runtime. It is only processed by code editors
    like Visual Studio and Rider to set up environment variables and define URLs for
    the web server to listen on when the project is started by a code editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the `https` profile, for its `applicationUrl`, change the assigned port
    numbers for `http` to `5130` and `https` to `5131`, and swap the order so `http`
    is first in the list and will be used by default, as shown highlighted in the
    following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `http` and `https` launch profiles have a `commandName` of `Project`, meaning
    they use the web server configured in the project to host the website, which is
    Kestrel by default. There is also a profile and settings for **IIS**, which is
    a Windows-only web server. In this book, we will only use Kestrel as the web server
    since it is cross-platform. To declutter your `launchSettings.json` file, you
    could even delete the `iisSettings` and `IIS Express` sections.
  prefs: []
  type: TYPE_NORMAL
- en: Save the changes to `launchSettings.json` and close the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `Program.cs`, note the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An ASP.NET Core project is like a top-level console app, with a hidden `<Main>$`
    method as its entry point that has an argument passed using the name `args`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: It calls `WebApplication.CreateBuilder`, which creates a host for the website
    using defaults for a web host that is then built.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The website will respond to all HTTP `GET` requests to the root path of the
    website with this plain text: `Hello World!`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The call to the `Run` method is a blocking call, so the hidden `<Main>$` method
    does not return until the web server stops running.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The contents of `Program.cs` are shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'After the existing call to `MapGet`, add two calls to define an endpoint that
    returns an anonymous C# object as JSON, and an endpoint that returns a web page,
    as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As well as `Json` and `Content`, the `Results` class has many more methods,
    like `BadRequest`, `Bytes`, `Created`, `File`, `NoContent`, `NotFound`, `Ok`,
    `Problem`, `Redirect`, and so on. You can learn more at the following link: [https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.http.results](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.http.results).'
  prefs: []
  type: TYPE_NORMAL
- en: 'At the bottom of `Program.cs`, add a comment to explain the `Run` method and
    a statement to write a message to the console after `Run` and, therefore, after
    the web server has stopped, as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Testing and securing the website
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will now test the functionality of the ASP.NET Core Empty website project.
    We will also enable the encryption of all traffic between the browser and web
    server for privacy by switching from HTTP to HTTPS. HTTPS is the secure encrypted
    version of HTTP.
  prefs: []
  type: TYPE_NORMAL
- en: 'For Visual Studio:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the toolbar, make sure that the **https** profile is selected (rather than
    **http**, **IIS Express**, or **WSL**), and then change **Web Browser** to **Google
    Chrome**, as shown in *Figure 13.1*:![](img/B22322_13_01.png)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 13.1: Selecting the https profile with its Kestrel web server in Visual
    Studio'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Navigate to **Debug** | **Start Without Debugging…**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Windows, if you see a **Windows Security Alert** saying **Windows Defender
    Firewall has blocked some features of this app**, then click the **Allow access**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first time you start a secure website, you might be notified that your project
    is configured to use SSL, and to avoid warnings in the browser, you can choose
    to trust the self-signed certificate that ASP.NET Core has generated. Click **Yes**.
    When you see the **Security Warning** dialog box, click **Yes** again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For VS Code, enter the command to start the project with the `https` profile,
    like this: `dotnet run --launch-profile https`. Then start Chrome.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For Rider:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigate to **Run** | **Edit Configurations…**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Run/Debug Configurations** dialog box, select **Northwind.Web: https**.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: At the bottom of the dialog box, to the right of the **After launch** check
    box, select **Chrome** and then click **OK**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to **Run** | **Run ‘Northwind.Web: https’**.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In either Visual Studio’s command prompt window or VS Code’s terminal, note
    the following, as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The web server has started listening on the ports we assigned for HTTP and HTTPS.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You can press *Ctrl* +*C* to shut down the Kestrel web server.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The hosting environment is `Development`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Visual Studio will also start your chosen browser automatically and navigate
    to the first URL. If you are using VS Code, you will have to start Chrome manually.
  prefs: []
  type: TYPE_NORMAL
- en: Leave the Kestrel web server running in the command prompt or terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Chrome, show **Developer Tools**, and click the **Network** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Request the home page for the website project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are using Visual Studio and Chrome launched automatically with the URL
    already entered for you, then click the **Reload this page** button or press *F5*.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are using VS Code and the command prompt or terminal, then in the Chrome
    address bar, manually enter the address `http://localhost:5130/`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the **Network** tab, click **localhost**, and note the response is **Hello
    World!** in plain text from the cross-platform Kestrel web server, as shown in
    *Figure 13.2*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B22322_13_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.2: Plain text response from the website project'
  prefs: []
  type: TYPE_NORMAL
- en: 'Browsers like Chrome might also request a `favicon.ico` file to show in their
    browser window or tab, but this file does not exist in our project, so it shows
    as a `404 Not Found` error. If this annoys you, then you can generate a `favicon.ico`
    file for free at the following link and put it in the project folder: [https://favicon.io/](https://favicon.io/).
    On a web page, you can also specify one in the meta tags, for example, a blank
    one using Base64 encoding, as shown in the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<link rel="icon" href="data:;base64,iVBORw0KGgo=">`'
  prefs: []
  type: TYPE_NORMAL
- en: Enter the address `https://localhost:5131/` and note that if you are not using
    Visual Studio or if you clicked **No** when prompted to trust the SSL certificate,
    then the response is a privacy error. You will see this error when you have not
    configured a certificate that the browser can trust to encrypt and decrypt HTTPS
    traffic (if you do not see this error, it is because you have already configured
    a certificate). In a production environment, you would want to pay a company such
    as Verisign for an SSL certificate because they provide liability protection and
    technical support. During development, you can tell your OS to trust a temporary
    development certificate provided by ASP.NET Core.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visual Studio will also start your chosen browser automatically and navigate
    to the first URL. If you are using VS Code, you will have to start Chrome manually.
  prefs: []
  type: TYPE_NORMAL
- en: Enter the address `https://localhost:5131/data` and note that some JSON is returned.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the address `https://localhost:5131/welcome` and note that a web page
    is returned.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the command prompt or terminal, press *Ctrl*+ *C* to shut down the web server,
    and note the message that is written, as shown highlighted in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you need to trust a local self-signed SSL certificate, then at the command
    line or terminal, enter the following command: `dotnet dev-certs https --trust`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note the message **Trusting the HTTPS development certificate was requested**.
    You might be prompted to enter your password, and a valid HTTPS certificate may
    already be present.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enabling stronger security and redirecting to a secure connection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is good practice to enable stricter security and automatically redirect requests
    for HTTP to HTTPS.
  prefs: []
  type: TYPE_NORMAL
- en: '**Good Practice**: An optional but recommended security enhancement is **HTTP
    Strict Transport Security** (**HSTS**), which you should always enable. If a website
    specifies it and a browser supports it, then it forces all communication over
    HTTPS and prevents the visitor from using untrusted or invalid certificates.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s do that now:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Program.cs`, after the statement that builds the `app`, add a region and
    an `if` statement to enable HSTS when *not* in development, and redirect HTTP
    requests to HTTPS, as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the `Northwind.Web` website project without debugging using the `https`
    launch profile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If Chrome is still running, close and restart it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Chrome, show **Developer Tools**, and click the **Network** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the address `http://localhost:5130/`, and note how the server responds
    with a **307 Temporary Redirect** to `https://localhost:5131/`, and that the certificate
    is valid and trusted, as shown in *Figure 13.3*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B22322_13_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.3: The connection is now secured using a valid certificate and a
    307 redirect'
  prefs: []
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Good Practice**: Remember to shut down the Kestrel web server by switching
    to the command prompt or terminal and pressing *Ctrl* + *C* whenever you have
    finished testing a website.'
  prefs: []
  type: TYPE_NORMAL
- en: Controlling the hosting environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In ASP.NET Core 5 and earlier, the project template sets a rule to say that
    while in development mode, any unhandled exceptions will be shown in the browser
    window for the developer to see the details of the exception, as shown in the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: With ASP.NET Core 6 and later, this code is configured by default by the `WebApplication`
    builder and therefore executed automatically so it is no longer needed in the
    project template `Program.cs` source code.
  prefs: []
  type: TYPE_NORMAL
- en: How does ASP.NET Core know when we are running in development mode so that the
    `IsDevelopment` method returns `true`, and this extra code executes to set up
    the developer exception page? Let’s find out.
  prefs: []
  type: TYPE_NORMAL
- en: ASP.NET Core can read from settings files and environment variables to determine
    what hosting environment to use, for example, `DOTNET_ENVIRONMENT` or `ASPNETCORE_ENVIRONMENT`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can override these settings during local development:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Northwind.Web` folder, expand the folder named `Properties`, and open
    the file named `launchSettings.json`. Note that the `https` launch profile sets
    the environment variable for the hosting environment to `Development`, as shown
    highlighted in the following configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Change the `ASPNETCORE_ENVIRONMENT` environment variable from `Development`
    to `Production`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are using Visual Studio, optionally, change `launchBrowser` to `false`
    to prevent Visual Studio from automatically launching a browser. This setting
    is ignored when you start a website project using `dotnet run` or Rider.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `Program.cs`, modify the first `MapGet` statement to return the name of
    the environment instead of `Hello World`, as shown highlighted in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the website project using the `https` launch profile and note that the
    hosting environment is `Production`, as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In Chrome, note that the plain text is `Environment is Production`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `launchSettings.json`, change the environment variable back to `Development`,
    and save the changes to the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**More Information**: You can learn more about environments at the following
    link: [https://learn.microsoft.com/en-us/aspnet/core/fundamentals/environments](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/environments).'
  prefs: []
  type: TYPE_NORMAL
- en: Enabling a website to serve static content
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A website that only ever returns a single plain text message isn’t very useful!
  prefs: []
  type: TYPE_NORMAL
- en: At a minimum, it ought to return static HTML pages, CSS that the web pages will
    use for styling, and any other static resources, such as images and videos.
  prefs: []
  type: TYPE_NORMAL
- en: By convention, these files should be stored in a directory named `wwwroot` to
    keep them separate from the dynamically executing parts of your website project.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a folder for static files and a web page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will now create a folder for your static website resources and a basic
    index page that uses Bootstrap for styling:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Northwind.Web` project/folder, create a folder named `wwwroot`. Note
    that Visual Studio recognizes it as a special type of folder by giving it a globe
    icon, ![](img/global_icon.png).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `wwwroot` folder, add a new file named `index.html`. (In Visual Studio,
    the project item template is named **HTML Page**.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `index.html`, modify its markup to link to CDN-hosted Bootstrap for styling,
    and use modern good practices such as setting the viewport, as shown in the following
    markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Good Practice**: Check out the latest version at the following link: [https://getbootstrap.com/docs/versions/](https://getbootstrap.com/docs/versions/).
    Click the latest version to go to its **Get started with Bootstrap** page. Scroll
    down the page to step 2 to find the latest `<link>` element (and later in this
    chapter, the `<script>` element), which you can then copy and paste.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Bootstrap is the world’s most popular framework for building responsive, mobile-first
    websites. You can read an online-only section introducing some of Bootstrap’s
    most important features at the following link: [https://github.com/markjprice/cs13net9/blob/main/docs/ch13-bootstrap.md](https://github.com/markjprice/cs13net9/blob/main/docs/ch13-bootstrap.md).'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `wwwroot` folder, add a file named `site.css` and modify its content,
    as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `wwwroot` folder, add a file named `categories.jpeg`. You can download
    it from the following link: [https://github.com/markjprice/cs13net9/blob/main/code/images/Categories/categories.jpeg](https://github.com/markjprice/cs13net9/blob/main/code/images/Categories/categories.jpeg).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `wwwroot` folder, add a file named `about.html` and modify its content,
    as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Enabling static and default files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you were to start the website now and enter `http://localhost:5130/index.html`
    or `https://localhost:5131/index.html` in the address box, the website would return
    a `404 Not Found` error saying no web page was found. To enable the website to
    return static files such as `index.html`, we must explicitly configure that feature.
  prefs: []
  type: TYPE_NORMAL
- en: Even if we enable static files stored in `wwwroot`, if you were to start the
    website and enter `http://localhost:5130/` or `https://localhost:5131/` in the
    address box, the website would still return a `404 Not Found` error because the
    web server does not know what to return by default if no named file is requested.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will now enable static files, explicitly configure default files like `index.html`,
    and change the URL path registered that returns the plain text response:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Program.cs`, add statements after enabling HTTPS redirection to enable
    static files and default files. Also, modify the statement that maps a `GET` request
    to return the plain text response containing the environment name to only respond
    to the URL path `/env`, as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'ASP.NET Core 9 introduced the `MapStaticAssets` method that automatically compresses
    the static files, which reduces bandwidth requirements. For ASP.NET Core 8 and
    earlier, you must call the `UseStaticFiles` method instead. You can learn more
    at the following link: [https://learn.microsoft.com/en-us/aspnet/core/release-notes/aspnetcore-9.0#optimizing-static-web-asset-delivery](https://learn.microsoft.com/en-us/aspnet/core/release-notes/aspnetcore-9.0#optimizing-static-web-asset-delivery).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Warning!** The call to `UseDefaultFiles` must come before the call to `MapStaticAssets`
    or `UseStaticFiles`, or it will not work! You will learn more about the ordering
    of middleware and endpoint routing in an online section linked at the end of this
    chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: Start the website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start Chrome and show **Developer Tools**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Chrome, enter `http://localhost:5130/`. Note that you are redirected to the
    HTTPS address on port `5131`, and the `index.html` file is now returned over that
    secure connection because it is one of the possible default files for this website
    and it was the first match found in the `wwwroot` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Warning!** If you still see the environment name as plain text, make sure
    that you mapped the relative path `/env` to that endpoint instead of just `/`,
    otherwise that will override the default request for the `index.html` file.'
  prefs: []
  type: TYPE_NORMAL
- en: In Chrome, enter `http://localhost:5131/about.html` and note that the web page
    is returned, and it requests the `site.css` file, which applies additional styles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Developer Tools**, note the request for the Bootstrap stylesheet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Chrome, enter `http://localhost:5130/env` and note that it returns the plain
    text environment name as before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Understanding MapStaticAssets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Introduced in .NET 9, `MapStaticAssets` works by integrating build and publish-time
    processes to gather data about all the static resources in an application. This
    data is then used by the runtime library to serve these files efficiently to the
    browser.
  prefs: []
  type: TYPE_NORMAL
- en: While `MapStaticAssets` can often directly replace `UseStaticFiles`, it is specifically
    optimized for serving assets known to the app at build and publish time. For assets
    served from other locations, such as disk or embedded resources, `UseStaticFiles`
    should still be used.
  prefs: []
  type: TYPE_NORMAL
- en: '`MapStaticAssets` provides the following benefits compared to `UseStaticFiles`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Build time compression for all the assets in the app:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gzip` during development and `gzip` + `brotli` during publishing.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: All assets are compressed with the goal of reducing the size of the assets to
    the minimum.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The ETags for each resource are the Base64-encoded string of the SHA-256 hash
    of the content. This ensures that the browser only redownloads a file if its contents
    have changed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As an example, *Table 13.1* shows the original and compressed sizes using the
    Fluent UI Blazor components library, with a total of 478 KB uncompressed to 84
    KB compressed:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **File** | **Original** | **Compressed** | **% Reduction** |'
  prefs: []
  type: TYPE_TB
- en: '| `fluent.js` | 384 | 73 | 80.99% |'
  prefs: []
  type: TYPE_TB
- en: '| `fluent.css` | 94 | 11 | 88.30% |'
  prefs: []
  type: TYPE_TB
- en: '| Total | 478 | 84 | 82.43% |'
  prefs: []
  type: TYPE_TB
- en: 'Table 13.1: How MapStaticAssets compresses Fluent UI Blazor components'
  prefs: []
  type: TYPE_NORMAL
- en: If all web pages are static (that is, they only get changed manually by a web
    editor), then our website programming work is complete. But almost all websites
    need dynamic content, which means a web page that is generated at runtime by executing
    code.
  prefs: []
  type: TYPE_NORMAL
- en: The easiest way to do that is to use a feature of ASP.NET Core named Blazor
    staticSSR. But before that, let’s understand why you might see additional requests
    in tools like **Developer Tools** that you don’t expect.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding browser requests during development
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In **Developer Tools**, we can see all the requests made by the browser. Some
    will be requests that you expect, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`localhost`: This is the request for the home page in the website project.
    For our current project, the address will be `http://localhost:5130/` or `https://localhost:5131/`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bootstrap.min.css`: This is the request for Bootstrap’s styles. We added a
    reference to this on the home page, so the browser then made this request for
    the stylesheet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some of the requests are made only during development and are determined by
    the code editor that you use. You can usually ignore them if you see them in **Developer
    Tools**. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`browserLink` and `aspnetcore-browser-refresh.js`: These are requests made
    by Visual Studio to connect the browser to Visual Studio for debugging and Hot
    Reload. For example, `https://localhost:5131/_vs/browserLink` and `https://localhost:5131/_framework/aspnetcore-browser-refresh.js`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`negotiate?requestUrl`, `connect?transport`, `abort?Transport`, and so on:
    These are additional requests used to connect Visual Studio with the browser.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Northwind.Web/`: This is a secure WebSockets request related to SignalR used
    to connect Visual Studio with the browser: `wss://localhost:44396/Northwind.Web/`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that you have seen how to set up a basic website with support for static
    files like HTML web pages and CSS, let’s make it more interesting by adding support
    for dynamically generated static web pages (once the web page arrives at the browser
    client, it is static).
  prefs: []
  type: TYPE_NORMAL
- en: ASP.NET Core has multiple technologies for dynamically generating static web
    pages, including Razor Pages and **Model View Controller** (**MVC**) Razor views.
    The most modern technology for dynamic web pages is Blazor static SSR pages. But
    let’s first review Blazor and why it was created.
  prefs: []
  type: TYPE_NORMAL
- en: History of Blazor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Blazor lets you build interactive web UI components using C# instead of JavaScript.
    Blazor is supported on all modern browsers.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript and friends
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Traditionally, any code that needs to be executed in a web browser must be written
    using the JavaScript programming language or a higher-level technology that **transpiles**
    (transforms or compiles) into JavaScript. This is because all browsers have supported
    JavaScript for over two decades, so it is the lowest common denominator for implementing
    business logic in the client.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript does have some issues, however. Although it has superficial similarities
    to C-style languages like C# and Java, it is actually very different once you
    dig beneath the surface. It is a dynamically typed pseudo-functional language
    that uses prototypes instead of class inheritance for object reuse. It might look
    human, but you will get a surprise when it’s revealed to be a Skrull.
  prefs: []
  type: TYPE_NORMAL
- en: It’d be great if we could use the same language and libraries in a browser as
    we do on the server.
  prefs: []
  type: TYPE_NORMAL
- en: Even Blazor cannot replace JavaScript completely. For example, some parts of
    the browser are only accessible to JavaScript. Blazor provides an interop service
    so that your C# code can call JavaScript code, and vice versa. You will see this
    in the online-only *Interop with JavaScript* section in *Chapter 14*, *Building
    Interactive Web Components Using Blazor*.
  prefs: []
  type: TYPE_NORMAL
- en: Silverlight – C# and .NET using a plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Microsoft made a previous attempt at achieving this goal with a technology named
    Silverlight. When Silverlight 2 was released in 2008, a C# and .NET developer
    could use their skills to build libraries and visual components that were executed
    in the web browser by the Silverlight plugin.
  prefs: []
  type: TYPE_NORMAL
- en: By 2011 and Silverlight 5, Apple’s success with the iPhone and Steve Jobs’ hatred
    of browser plugins like Flash eventually led to Microsoft abandoning Silverlight
    since, like Flash, Silverlight is banned from iPhones and iPads.
  prefs: []
  type: TYPE_NORMAL
- en: WebAssembly – a target for Blazor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another development in web browsers has given Microsoft the opportunity to
    make another attempt. In 2017, the **WebAssembly Consensus** was completed, and
    all major browsers now support it: Chromium (Chrome, Edge, Opera, and Brave),
    Firefox, and WebKit (Safari).'
  prefs: []
  type: TYPE_NORMAL
- en: '**WebAssembly** (**Wasm**) is a binary instruction format for a virtual machine
    that provides a way to run code written in multiple languages on the web at near-native
    speed. Wasm is designed as a portable target for the compilation of high-level
    languages like C#.'
  prefs: []
  type: TYPE_NORMAL
- en: Blazor hosting models in .NET 7 and earlier
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Blazor is a single programming or app model. For .NET 7 and earlier, a developer
    had to choose one hosting model for each project:'
  prefs: []
  type: TYPE_NORMAL
- en: A **Blazor Server** project runs on the server side, so the C# code has full
    access to all resources that your business logic might need without needing to
    supply credentials to authenticate. It uses SignalR to communicate UI updates
    to the client side. The server must keep a live SignalR connection to each client
    and track the current state of every client. This means that Blazor Server does
    not scale well if you need to support lots of clients. It first shipped as part
    of ASP.NET Core 3 in September 2019.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A **Blazor Wasm** project runs on the client side, so the C# code only has access
    to resources in the browser. It must make HTTP calls (which might require authentication)
    before it can access resources on the server. It first shipped as an extension
    to ASP.NET Core 3.1 in May 2020 and was versioned 3.2 because it was a current
    release and therefore not covered by ASP.NET Core 3.1’s Long-Term Support. The
    Blazor Wasm 3.2 version used the Mono runtime and Mono libraries. .NET 5 and later
    use the Mono runtime and the .NET libraries.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A **.NET MAUI Blazor app**, aka **Blazor Hybrid**, project renders its web UI
    to a web view control using a local interop channel and is hosted in a .NET MAUI
    app. It is conceptually like an Electron app.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unification of Blazor hosting models in .NET 8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With .NET 8, the Blazor team has created a unified hosting model where each
    individual component can be set to execute using a different rendering model:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SSR**: Executes code on the server side like Razor Pages and MVC do. The
    complete response is then sent to the browser to display to the visitor and there
    is no further interaction between the server and client until the browser makes
    a new HTTP request. As far as the browser is concerned, the web page is static
    just like any other HTML file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Streaming rendering**: Executes code on the server side. HTML markup can
    be returned and displayed in the browser, and while the connection is still open,
    any asynchronous operations can continue to execute. When all asynchronous operations
    are complete, the final markup is sent by the server to update the contents of
    the page. This improves the experience for the visitor because they see some content
    like a “Loading…” message while waiting for the rest.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interactive server rendering**: Executes code on the server side during live
    interactions, which means the code has full and easy access to server-side resources
    like databases. This can simplify implementing functionality. Interactive requests
    are made using SignalR, which is more efficient than a full request. A permanent
    connection is needed between the browser and server, which limits scalability.
    This is a good choice for intranet websites where there are a limited number of
    clients and high bandwidth networking.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interactive Wasm rendering**: Executes code on the client side, which means
    the code only has access to resources within the browser. This can complicate
    the implementation because a callback to the server must be made whenever new
    data is required. A good choice for public websites where there are potentially
    a large number of clients and low bandwidth connections for some of them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interactive automatic rendering**: Starts by rendering on the server for
    faster initial display, downloads Wasm components in the background, and then
    switches to Wasm for subsequent interactivity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This unified model means that, with careful planning, a developer can write
    Blazor components once and then choose to run them on the web server side, or
    the web client side, or dynamically switch. This gives the best of all worlds.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Blazor components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is important to understand that Blazor is used to create **UI components**.
    Components define how to render the UI and react to user events, and can be composed,
    nested, and compiled into a Razor class library for packaging and distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, to provide a UI for star ratings of products on a commerce site,
    you might create a component named `Rating.razor`, as shown in the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'You could then use the component on a web page, as shown in the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The markup for creating an instance of a component looks like an HTML tag, where
    the name of the tag is the component type. Components can be embedded in a web
    page using an element, for example, `<Rating Value="5" />`, or they can be routed
    to, like a mapped endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of a single file with both markup and an `@code` block, the code can
    be stored in a separate code-behind file named `Rating.razor.cs`. The class in
    this file must be `partial` and have the same name as the component.
  prefs: []
  type: TYPE_NORMAL
- en: There are many built-in Blazor components, including ones to set elements like
    `<title>` in the `<head>` section of a web page, and plenty of third parties who
    will sell you components for common purposes.
  prefs: []
  type: TYPE_NORMAL
- en: What is the difference between Blazor and Razor?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You might wonder why Blazor components use `.razor` as their file extension.
    Razor is a template markup syntax that allows the mixing of HTML and C#. Older
    technologies that support Razor syntax use the `.cshtml` file extension to indicate
    the mix of C# and HTML.
  prefs: []
  type: TYPE_NORMAL
- en: 'Razor syntax is used for:'
  prefs: []
  type: TYPE_NORMAL
- en: ASP.NET Core MVC **views** and **partial views** that use the `.cshtml` file
    extension. The business logic is separated into a controller class that treats
    the view as a template to push the view model to, which then outputs it to a web
    page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Razor Pages** that use the `.cshtml` file extension. The business logic can
    be embedded or separated into a file that uses the `.cshtml.cs` file extension.
    The output is a web page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Blazor components** that use the `.razor` file extension. The output is rendered
    as part of a web page, although layouts can be used to wrap a component so it
    outputs as a web page, and the `@page` directive can be used to assign a route
    that defines the URL path to retrieve the component as a page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now that you understand the background of Blazor, let’s see something more
    practical: how to add Blazor support to an existing ASP.NET Core project.'
  prefs: []
  type: TYPE_NORMAL
- en: Exploring Blazor static SSR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ASP.NET Core Blazor static SSR allows a developer to easily mix C# code statements
    with HTML markup to make the generated web page dynamic.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling Blazor static SSR
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here is a summary of the tasks that you must complete to enable Blazor and
    its static SSR capability in an existing ASP.NET Core project:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a `Components` folder to contain your Blazor components.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a `Components\Pages` folder to contain your Blazor page components.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Components` folder, create three `.razor` files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`_Imports.razor`: This file imports namespaces for all `.razor` files so that
    you do not need to import them at the top of every `.razor` file. At a minimum,
    you will want to import the namespace for Blazor routing and your local project
    Blazor components.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`App.razor`: This file contains HTML for the web page that will contain all
    your Blazor components. It also needs to reference your Blazor `Routes` component
    somewhere in the `<body>` of the web page.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Routes.razor`: This file defines a `<Router>` component that scans the current
    assembly for page components and their registered routes.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In `Components\Pages`, create an `Index.razor` file, a Blazor page component
    that will be your home page shown by default by the Blazor router. It will need
    a directive at the top of the file to define a route for the root path: `@page
    "/"`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `Program.cs`, you must call `AddRazorComponents()` to register Blazor aka
    Razor components (`*.razor`) files with ASP.NET Core’s dependency services collection,
    and then call `MapRazorComponents<App>()` to map endpoints for all the found Blazor
    routes. You must also call `UseAntiforgery()` because Blazor components automatically
    check for anti-forgery tokens; therefore, the HTTP pipeline must enable middleware
    to support them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will now add and enable the Blazor static SSR service, and then copy and
    change the static HTML page into a Blazor static SSR file:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Northwind.Web` project folder, create a folder named `Components`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `Components` folder, create a folder named `Pages`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `Components` folder, create a file named `_Imports.razor`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `_Imports.razor`, add statements to import the namespaces for Blazor components
    routing, and for your `Northwind.Web` project and its components, as shown in
    the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `Components` folder, create a file named `Routes.razor`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `Routes.razor`, add statements to define a router that scans the current
    assembly for Blazor page components that have been registered with a route, as
    shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Copy the `index.html` file into the `Components\Pages` folder. (In Visual Studio
    or Rider, hold down *Ctrl* while dragging and dropping.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the file in the `Components\Pages` folder (not the original file), rename
    the file extension from `index.html` to `Index.razor`. Make sure the “I” is uppercase.
    (Blazor components must start with an uppercase letter or you will get a compiler
    error!)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `Components` folder, create a file named `App.razor`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `App.razor`, cut and paste the root markup, including head and body elements
    from `Index.razor`, and then add elements to insert a page title using `<HeadOutlet
    />` and for your `<Routes>` component, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Index.razor`, add the `@page` directive to the top of the file and set
    its route to `/`, add a `<PageTitle>` component to set the web page `<title>`,
    remove the `<h2>` element that says that this is a static HTML page, and note
    the result, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Warning!** If you have installed ReSharper for Visual Studio, or you use
    Rider, then they might give warnings like “Cannot resolve symbol” in your Razor
    Pages, Razor views, and Blazor components. This does not always mean there is
    an actual problem. If the file compiles, then you can ignore their errors. Sometimes
    these tools get confused and needlessly worry developers.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Program.cs`, after the statement that creates the `builder`, add a statement
    to add ASP.NET Core Blazor components and their related services, and optionally
    define a `#region`, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.cs`, after calling the method to use HTTPS redirection, add a statement
    to use anti-forgery middleware, as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.cs`, at the top of the file, add a statement to import your project
    components, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.cs`, before the statement that maps an HTTP `GET` request for the
    path `/env`, add a statement to call the `MapRazorComponents` method, as shown
    highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the website project using the `https` launch profile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In Chrome, enter `https://localhost:5131/` and note that the element that says
    this is a static HTML page is gone. If it is still there, then you might have
    to empty the browser cache. View **Developer Tools**, click and hold on the **Reload
    this page** button, and then select **Empty cache and hard reload**, as shown
    in *Figure 13.4*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B22322_13_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.4: View Developer Tools, then click and hold the Reload this page
    button to see more commands'
  prefs: []
  type: TYPE_NORMAL
- en: Adding code to a Blazor static SSR page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the HTML markup of a web page, Razor syntax is indicated by the `@` symbol.
    Blazor static SSR pages can be described as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Blazor static SSR pages require the `@page` directive at the top of the file
    with a route specified as a string value like `"/"` or `"/customers"`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Warning!** *Blazor static SSR pages* are different from *Razor Pages* and
    *Razor views* (used in ASP.NET Core MVC) but they share the same Razor syntax.
    Blazor components have the `.razor` file extension. *Razor Pages* and *Razor views*
    have the `.cshtml` file extension. *Razor Pages* must have the `@page` directive.
    *Razor views* must **not** use the `@page` directive.'
  prefs: []
  type: TYPE_NORMAL
- en: Blazor static SSR pages can optionally have an `@code` section that defines
    properties for storing data values, like in a class definition. You can then get
    the property values in the HTML.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Blazor static SSR pages’ markup can have comments using `@*` and `*@`, as shown
    in the following code: `@* This is a comment. *@`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s now add some dynamic content to the Blazor static SSR page using an `@code`
    block:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Components/Pages` folder, in `Index.cshtml`, after the `@page` directive,
    add an `@code` statement block to define a property to store the name of the current
    day as a `string` value, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the second HTML paragraph, `<p>`, render the day name, as shown highlighted
    in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the website project using the `https` profile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In Chrome, if necessary, enter `https://localhost:5131/`, and note that the
    current day name is output on the page, as shown in *Figure 13.5*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B22322_13_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.5: Welcome to the Northwind page showing the current day'
  prefs: []
  type: TYPE_NORMAL
- en: In Chrome, enter `https://localhost:5131/index.html`, which exactly matches
    the static filename, and note that it returns the static HTML page as before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Chrome, enter `https://localhost:5131/env`, which exactly matches the endpoint
    route that returns plain text, and note that it returns the plain textas before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using shared layouts with Blazor static SSR pages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most websites have more than one page. The boilerplate markup for the body of
    the web page that is currently in `Index.razor` is minimal. Usually, there will
    be common markup in the body that needs to be visible on every page. If each page
    had to duplicate that markup, then it would become a pain to manage. So, ASP.NET
    Core has a feature named **layouts**.
  prefs: []
  type: TYPE_NORMAL
- en: To use layouts, we must create a Razor file to define the default layout for
    all Blazor components and specify it in the `Routes` component. By convention,
    we store it in a `Layout` folder. The name of this file can be anything, as we
    will specify it, but `MainLayout.razor` is good practice.
  prefs: []
  type: TYPE_NORMAL
- en: Typically, your main layout will include a navigation menu with links to all
    the other Blazor page components. The naming convention for this file is `NavMenu.razor`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see layouts in action:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Components` folder, add a new folder named `Layout`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `Layout` folder, add a file named `NavMenu.razor`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `NavMenu.razor`, modify the content, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**More Information**: This markup uses a Bootstrap feature called `navbar`,
    which you can read about at the following link: [https://getbootstrap.com/docs/5.3/components/navbar/](https://getbootstrap.com/docs/5.3/components/navbar/).'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Layout` folder, add a file named `MainLayout.razor`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `MainLayout.razor`, modify the content, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'While reviewing the preceding markup, note the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@Body` marks the insertion point for the Blazor page component being requested.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the bottom of the layout is a script to implement some cool features of Bootstrap
    that we can use later, such as a carousel of images.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In `Routes.razor`, add an attribute to set the class name for the default layout,
    as shown highlighted in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the website using the `https` launch profile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Visit it with Chrome and note that it now has a navigation menu at the top
    of every page, as shown in *Figure 13.6*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B22322_13_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.6: Navigation menu in the shared layout component'
  prefs: []
  type: TYPE_NORMAL
- en: '**Warning!** Clicking the navigation menu for suppliers will give a `404 Not
    Found` error because we have not created that Blazor page component yet.'
  prefs: []
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a suppliers page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will now create a Blazor static SSR page component that shows a list of
    suppliers. In the next topic, we will load the list of suppliers from a database,
    but for now, we will simulate that with a hardcoded array of `string` values:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Pages` folder, add a new Blazor page component named `Suppliers.razor`.
    If you are using Visual Studio or Rider, then the project item template is named
    **Razor Component**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `Suppliers.razor`, replace the existing contents with markup to render an
    HTML table containing supplier company names, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'While reviewing the preceding markup, note the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The `Suppliers` property is populated with some example supplier company names
    from an array of `string` values. Later, we will populate this from the `Northwind`
    database.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The page outputs an HTML table with Bootstrap styles.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The page uses Razor syntax `@if` and `@for` statements to embed C# code in HTML.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The data rows in the table are generated by looping through the `Suppliers`
    property if it is not `null`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Start the website using the `https` launch profile and visit it using Chrome.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the button to learn more about suppliers, and note the table of suppliers,
    as shown in *Figure 13.7*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B22322_13_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.7: The table of suppliers loaded from an array of strings'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring files included in an ASP.NET Core project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Until now, most of our projects have been simple console apps and class libraries
    with a few C# class files. By default, when we compiled those projects, all `.cs`
    files in the project folder or subfolders were automatically included in the build
    at compile time.
  prefs: []
  type: TYPE_NORMAL
- en: ASP.NET Core projects get more complicated. There are many more file types;
    some of them can be compiled at runtime instead of compile time, and some of them
    are just content that does not need to be compiled but does need to be deployed
    along with the compiled assemblies.
  prefs: []
  type: TYPE_NORMAL
- en: You can control how files are processed during a build, and which are included
    or excluded from a deployment, by putting elements in the project file. These
    are processed by **MS Build** and other tools during builds and deployments.
  prefs: []
  type: TYPE_NORMAL
- en: 'You declare items in the project file as child elements of an `<ItemGroup>`
    element. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: You can have as many `<ItemGroup>` elements as you want, so it is good practice
    to use them to logically divide elements by type. They are merged automatically
    by build tools.
  prefs: []
  type: TYPE_NORMAL
- en: Usually, you manually add these elements when you know you need to use them,
    but unfortunately, Visual Studio and other code editors sometimes mess things
    up by trying to be helpful.
  prefs: []
  type: TYPE_NORMAL
- en: In one scenario, you might have added a new Blazor component in the `Components\Pages`
    folder named `Customers.razor`. You start the web server, but the page does not
    appear. Or, you are working on a GraphQL service, and you add a file named `seafoodProducts.graphql`,
    but when you run the GraphQL tool to auto-generate client-side proxies, it fails.
  prefs: []
  type: TYPE_NORMAL
- en: These are both common indications that your code editor has decided that the
    new file should not be part of the project. It has automatically added an element
    to the project file to remove the file from the build process without telling
    you.
  prefs: []
  type: TYPE_NORMAL
- en: 'To solve this type of problem, review the project file for unexpected entries
    like the following, and delete them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '**Good Practice**: When using tools that automatically “fix” problems without
    telling you, review your project file for unexpected elements when unexpected
    results happen.'
  prefs: []
  type: TYPE_NORMAL
- en: '**More Information**: You can read more about managing MS Build items at the
    following link: [https://learn.microsoft.com/en-us/visualstudio/msbuild/msbuild-items](https://learn.microsoft.com/en-us/visualstudio/msbuild/msbuild-items).'
  prefs: []
  type: TYPE_NORMAL
- en: Project file build actions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we have just seen, it is important that ASP.NET Core developers understand
    how project build actions affect compilation.
  prefs: []
  type: TYPE_NORMAL
- en: All files in a .NET SDK project have a build action. Most are set implicitly
    based on their file extension. You can override the default behavior by explicitly
    setting a build action. You can do this either by directly editing the `.csproj`
    project file or by using your code editor’s **Properties** window.
  prefs: []
  type: TYPE_NORMAL
- en: 'Common build actions for ASP.NET Core project files are shown in *Table 13.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Build action** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| **Compile** or **C# compiler** | Passed to the compiler as a source file.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Content** | Included as part of the website when it’s deployed. |'
  prefs: []
  type: TYPE_TB
- en: '| **Embedded Resource** | Passed to the compiler as a resource to be embedded
    in the assembly. |'
  prefs: []
  type: TYPE_TB
- en: '| **None** | Not part of the build. This value can be used for documentation
    and other files that should not be deployed with the website. |'
  prefs: []
  type: TYPE_TB
- en: 'Table 13.2: Common build actions for ASP.NET Core project files'
  prefs: []
  type: TYPE_NORMAL
- en: '**More Information**: You can learn more about **build actions** and `.csproj`
    entries at the following link: [https://learn.microsoft.com/en-us/visualstudio/ide/build-actions](https://learn.microsoft.com/en-us/visualstudio/ide/build-actions).'
  prefs: []
  type: TYPE_NORMAL
- en: Using Entity Framework Core with ASP.NET Core
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Entity Framework Core is a natural way to get real data onto a website. In *Chapter
    12*, *Introducing Modern Web Development Using .NET*, you created a pair of class
    libraries (one for the entity models and one for the `Northwind` database context)
    using SQLite as the data provider (or SQL Server). You will now use them in your
    website project.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Entity Framework Core as a service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Functionality that is needed by an ASP.NET Core project, such as Entity Framework
    Core database contexts, should be registered as a dependency service during website
    startup. The code in the GitHub repository solution and below uses SQLite, but
    you can easily use SQL Server if you prefer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see how:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Northwind.Web` project, add a project reference to the `Northwind.DataContext`
    project for either SQLite or SQL Server, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Warning!** The project reference must go all on one line with no line break.'
  prefs: []
  type: TYPE_NORMAL
- en: Build the `Northwind.Web` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `Program.cs`, import the namespace to work with your entity model types,
    as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.cs`, after the statement that adds Razor components to the registered
    services, add a statement to register the `Northwind` database context class,
    as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Components` folder, in `_Imports.razor`, import the namespace for our
    database context, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Components\Pages` folder, in `Suppliers.razor`, inject an instance
    of the Northwind context service, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the `Companies` property to be declared as a sequence of `Supplier`
    objects instead of `string` values, as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define an `OnInitialized` method to set the `Companies` property using data
    from the Northwind `Suppliers` tables, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the markup to render multiple columns for each supplier, as shown highlighted
    in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the website using the `https` launch profile and go to the website home
    page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click **Learn more about our suppliers** and note that the `Suppliers` table
    now loads from the database and the data is sorted first by country and then by
    company name, as shown in *Figure 13.8*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B22322_13_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.8: The Suppliers table loaded from the Northwind database'
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will implement a Blazor website with interactivity so
    we can easily modify data as well as display it.
  prefs: []
  type: TYPE_NORMAL
- en: Practicing and exploring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Test your knowledge and understanding by answering some questions, getting some
    hands-on practice, and exploring this chapter’s topics with deeper research.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 13.1 – online material
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Online material could be material created by Microsoft or third parties, or
    extra content for this book.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring services and the HTTP request pipeline
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This online section reviews how services and the HTTP request pipeline work
    in more detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/markjprice/cs13net9/blob/main/docs/ch13-http-pipeline.md](https://github.com/markjprice/cs13net9/blob/main/docs/ch13-http-pipeline.md)'
  prefs: []
  type: TYPE_NORMAL
- en: Enabling HTTP/3 and request decompression support
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: HTTP/3 brings benefits to all internet-connected apps, but especially mobile.
    I have written an online-only section introducing HTTP/3 and showing how to enable
    it in an ASP.NET Core project like `Northwind.Web` when targeting .NET 7 or later.
  prefs: []
  type: TYPE_NORMAL
- en: 'In previews of .NET 8, HTTP/3 was enabled by default, but the Microsoft team
    decided to revert to disabling HTTP/3 by default. They did this due to a bad experience
    caused by some antivirus software. Hopefully, in ASP.NET Core 9, they will resolve
    this issue and re-enable HTTP/3 by default. You can read more about their decision
    at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-8-rc-1/#http-3-disabled-by-default](https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-8-rc-1/#http-3-disabled-by-default)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The page also includes a section about enabling request decompression support.
    You can read the page at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/markjprice/cs13net9/blob/main/docs/ch13-enabling-http3.md](https://github.com/markjprice/cs13net9/blob/main/docs/ch13-enabling-http3.md)'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Bootstrap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Bootstrap is the world’s most popular framework for building responsive, mobile-first
    websites. You can read an online-only section introducing some of Bootstrap’s
    most important features at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/markjprice/cs13net9/blob/main/docs/ch13-bootstrap.md](https://github.com/markjprice/cs13net9/blob/main/docs/ch13-bootstrap.md)'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 13.2 – practice exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Practice exercises go deeper into the topics for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Build a data-driven web page
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Add a Razor Page to the `Northwind.Web` website that enables the user to see
    a list of customers grouped by country. When the user clicks on a customer record,
    they should then see a page showing the full contact details of that customer
    and a list of their orders.
  prefs: []
  type: TYPE_NORMAL
- en: 'My suggested solution can be found at the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/markjprice/cs13net9/blob/main/code/ModernWeb/Northwind.Web/Components/Pages/Customers.razor](https://github.com/markjprice/cs13net9/blob/main/code/ModernWeb/Northwind.Web/Components/Pages/Customers.razor)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/markjprice/cs13net9/blob/main/code/ModernWeb/Northwind.Web/Components/Pages/CustomerOrders.razor](https://github.com/markjprice/cs13net9/blob/main/code/ModernWeb/Northwind.Web/Components/Pages/CustomerOrders.razor)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build web pages for functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Reimplement some of the console apps from earlier chapters as Razor Pages; for
    example, from *Chapter 4**, Writing, Debugging, and Testing Functions*, provide
    a web UI to output times tables, calculate tax, and generate factorials and the
    Fibonacci sequence.
  prefs: []
  type: TYPE_NORMAL
- en: 'My suggested solution can be found at the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/markjprice/cs13net9/blob/main/code/ModernWeb/Northwind.Web/Components/Pages/Functions.razor](https://github.com/markjprice/cs13net9/blob/main/code/ModernWeb/Northwind.Web/Components/Pages/Functions.razor)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exercise 13.3 – test your knowledge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Answer the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: List six method names that can be specified in an HTTP request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: List six status codes and their descriptions that can be returned in an HTTP
    response.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In ASP.NET Core, what is the `Program` class used for?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does the acronym HSTS stand for and what does it do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you enable static HTML pages for a website?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you mix C# code into the middle of HTML to create a dynamic page?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you define shared layouts for Blazor components?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In a Blazor project, what three files do you typically create in a `Components`
    folder and what do they do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you configure an Entity Framework Core data context for use with an ASP.NET
    Core website?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the tasks that you must complete to enable Blazor and its static SSR
    capability in an existing ASP.NET Core Empty project?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exercise 13.4 – explore topics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the links on the following page to learn more about the topics covered
    in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/markjprice/cs13net9/blob/main/docs/book-links.md#chapter-13---building-websites-using-aspnet-core](https://github.com/markjprice/cs13net9/blob/main/docs/book-links.md#chapter-13---building-websites-using-aspnet-core)'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you learned:'
  prefs: []
  type: TYPE_NORMAL
- en: About the foundations of web development using HTTP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to build a simple website that returns static files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use ASP.NET Core with Entity Framework Core to create web pages that
    are dynamically generated from information in a database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to build interactive UI using Blazor.
  prefs: []
  type: TYPE_NORMAL
