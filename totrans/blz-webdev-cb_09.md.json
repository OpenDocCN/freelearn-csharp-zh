["```cs\n    <ItemGroup>\n      <ProjectReference\n        Include=\"..\\BlazorCookbook.App.Client\\\n        BlazorCookbook.App.Client.csproj\" />\n      <ProjectReference\n        Include=\"..\\BlazorCookbook.Library\\\n        BlazorCookbook.Library.csproj\" />\n    </ItemGroup>\n    ```", "```cs\n    using BlazorCookbook.Library.Chapter09.Recipe01;\n    //other registrations and pipelines\n    app.MapRazorComponents<App>()\n        .AddInteractiveServerRenderMode()\n        .AddInteractiveWebAssemblyRenderMode()\n        .AddAdditionalAssemblies(\n            typeof(_Imports).Assembly,\n            typeof(ExternalEventManager).Assembly\n        );\n    ```", "```cs\n    @using BlazorCookbook.Library.Chapter09.Recipe01\n    <Router AppAssembly=\"@typeof(Program).Assembly\"\n            AdditionalAssemblies=\"new[]\n            {\n                typeof(Client._Imports).Assembly,\n                typeof(ExternalEventManager).Assembly\n            }\">\n        @* router configuration *@\n    </Router>\n    ```", "```cs\n    @page \"/ch09r02\"\n    @page \"/ch09r02/{eventId:guid}\"\n    @page \"/ch09r02/{eventId:guid}/venues/{venue?}\"\n    ```", "```cs\n    @code {\n        [Parameter] public Guid EventId { get; set; }\n        [Parameter] public string Venue { get; set; }\n    }\n    ```", "```cs\n    @if (EventId == default) return;\n    <p>Event ID: @EventId</p>\n    <p>In @(Venue ?? \"all venues\")</p>\n    ```", "```cs\n@page \"/ch09r02/{*path}\"\n@code {\n    [Parameter] public string Path {get; set; }\n}\n```", "```cs\n    [SupplyParameterFromQuery]\n    public DateTime Date { get; set; }\n    ```", "```cs\n    @if (Date == DateTime.MinValue) return;\n    <p>On @Date</p>\n    ```", "```cs\n[SupplyParameterFromQuery(Name = \"seat\")]\npublic string[] Seats { get; set; }\n```", "```cs\n    public static class DeepLinks\n    {\n        // you will define routes here\n    }\n    ```", "```cs\n    public const string\n        LandingPage = \"/ch09r04\",\n        EventPage = \"/ch09r04/{eventId:guid}\",\n        EventAtVenuePage =\n            \"/ch09r04/{eventId:guid}/venues/{venue?}\";\n    ```", "```cs\n    @attribute [Route(DeepLinks.LandingPage)]\n    @attribute [Route(DeepLinks.EventPage)]\n    @attribute [Route(DeepLinks.EventAtVenuePage)]\n    ```", "```cs\npublic const string\n    EventPage = \"/ch09r04/{eventId:guid}\";\npublic static string GetPage(Guid eventId)\n    => EventPage.Replace(\"{eventId:guid}\", $\"{eventId}\");\n```", "```cs\n    //...\n    //other middleware registrations\n    app.UseAntiforgery();\n    app.UseStatusCodePagesWithRedirects(\"/error\");\n    //...\n    ```", "```cs\n    @inject ILogger<Routes> Logger\n    ```", "```cs\n    @code {\n        private void LogNavigation(\n            NavigationContext context)\n            => Logger.LogInformation(\n                \"User entered: {Path}\",\n                context.Path);\n    }\n    ```", "```cs\n    <Router AppAssembly=\"@typeof(Program).Assembly\"\n            AdditionalAssemblies=\"new[]\n            {\n                typeof(Client._Imports).Assembly,\n                typeof(ExternalEventManager).Assembly\n            }\"\n            OnNavigateAsync=\"@LogNavigation\">\n        @* here's further router configuration *@\n    </Router>\n    ```", "```cs\n    @rendermode InteractiveWebAssembly\n    @implements IDisposable\n    ```", "```cs\n    [Inject] private NavigationManager Nav { get; init; }\n    ```", "```cs\n    private CancellationTokenSource _cts;\n    ```", "```cs\n    private void CancelTask(object sender,\n        LocationChangedEventArgs args) => _cts?.Cancel();\n    ```", "```cs\n    protected override void OnInitialized()\n        => Nav.LocationChanged += CancelTask;\n    ```", "```cs\n    public void Dispose()\n    {\n        Nav.LocationChanged -= CancelTask;\n        _cts?.Dispose();\n    }\n    ```", "```cs\n    private async Task GetAsync()\n    {\n        _cts = new();\n        var eventId = await Source.LoadAsync(_cts.Token);\n        if (_cts.IsCancellationRequested) return;\n        Nav.NavigateTo($\"/ch09r07/{eventId}\");\n    }\n    ```", "```cs\n    @if (EventId == default)\n    {\n        <button class=\"btn btn-primary\"\n                @onclick=\"@GetAsync\">\n            Get event\n        </button>\n        return;\n    }\n    ```", "```cs\n    private async Task GetAsync()\n    {\n        //... event getting logic\n        Nav.NavigateTo($\"/ch09r08/{eventId}\",\n            replace: true);\n    }\n    ```"]