["```cs\n    using System.Numerics; // To use BigInteger. \n    ```", "```cs\n    const int width = 40;\n    WriteLine(\"ulong.MaxValue vs a 30-digit BigInteger\");\n    WriteLine(new string('-', width));\n    ulong big = ulong.MaxValue;\n    WriteLine($\"{big,width:N0}\");\n    BigInteger bigger =\n      BigInteger.Parse(\"123456789012345678901234567890\");\n    WriteLine($\"{bigger,width:N0}\"); \n    ```", "```cs\n    ulong.MaxValue vs a 30-digit BigInteger\n    ----------------------------------------\n                  18,446,744,073,709,551,615\n     123,456,789,012,345,678,901,234,567,890 \n    ```", "```cs\n    WriteLine(\"Multiplying big integers\");\n    int number1 = 2_000_000_000;\n    int number2 = 2;\n    WriteLine($\"number1: {number1:N0}\");\n    WriteLine($\"number2: {number2:N0}\");\n    WriteLine($\"number1 * number2: {number1 * number2:N0}\");\n    WriteLine($\"Math.BigMul(number1, number2): {\n      Math.BigMul(number1, number2):N0}\");\n    WriteLine($\"int.BigMul(number1, number2): {\n      int.BigMul(number1, number2):N0}\"); \n    ```", "```cs\n    Multiplying big integers\n    number1: 2,000,000,000\n    number2: 2\n    number1 * number2: -294,967,296\n    Math.BigMul(number1, number2): 4,000,000,000\n    int.BigMul(number1, number2): 4,000,000,000 \n    ```", "```cs\n(a + bi) + (c + di) = (a + c) + (b + d)i \n```", "```cs\n    Complex c1 = new(real: 4, imaginary: 2);\n    Complex c2 = new(real: 3, imaginary: 7);\n    Complex c3 = c1 + c2;\n    // Output using the default ToString implementation.\n    WriteLine($\"{c1} added to {c2} is {c3}\");\n    // Output using a custom format.\n    WriteLine(\"{0} + {1}i added to {2} + {3}i is {4} + {5}i\",\n      c1.Real, c1.Imaginary,\n      c2.Real, c2.Imaginary,\n      c3.Real, c3.Imaginary); \n    ```", "```cs\n    <4; 2> added to <3; 7> is <7; 9>\n    4 + 2i added to 3 + 7i is 7 + 9i \n    ```", "```cs\nRandom r = new(); \n```", "```cs\nRandom r = new(Seed: 46378); \n```", "```cs\n    Random r = Random.Shared;\n    // minValue is an inclusive lower bound i.e. 1 is a possible value.\n    // maxValue is an exclusive upper bound i.e. 7 is not a possible value.\n    int dieRoll = r.Next(minValue: 1, maxValue: 7); // Returns 1 to 6.\n    WriteLine($\"Random die roll: {dieRoll}\");\n    double randomReal = r.NextDouble(); // Returns 0.0 to less than 1.0.\n    WriteLine($\"Random double: {randomReal}\");\n    byte[] arrayOfBytes = new byte[256];\n    r.NextBytes(arrayOfBytes); // Fills array with 256 random bytes.\n    Write(\"Random bytes: \");\n    for (int i = 0; i < arrayOfBytes.Length; i++)\n    {\n      Write($\"{arrayOfBytes[i]:X2} \");\n    }\n    WriteLine(); \n    ```", "```cs\n    Random die roll: 1\n    Random double: 0.06735275453092382\n    Random bytes: D9 38 CD F3 5B 40 2D F4 5B D0 48 DF F7 B6 67 C1 95 A1 2C 58 42 CF 70 6C C3 BE 82 D7 EC 61 0D D2 2D C4 49 7B C7 0F EA CC B3 41 F3 04 5D 29 25 B7 F7 99 8A 0F 56 20 A6 B3 57 C4 48 DA 94 2B 07 F1 15 64 EA 8D FF 79 E6 E4 9A C8 65 C5 D8 55 3D 3C C0 2B 0B 4C 3A 0E E6 A5 91 B7 59 6C 9A 94 97 43 B7 90 EE D8 9A C6 CA A1 8F DD 0A 23 3C 01 48 E0 45 E1 D6 BD 7C 41 C8 22 8A 81 82 DC 1F 2E AD 3F 93 68 0F B5 40 7B 2B 31 FC A6 BF BA 05 C0 76 EE 58 B3 41 63 88 E5 5C 8B B5 08 5C C3 52 FF 73 69 B0 97 78 B5 3B 87 2C 12 F3 C3 AE 96 43 7D 67 2F F8 C9 31 70 BD AD B3 9B 44 53 39 5F 19 73 C8 43 0E A5 5B 6B 5A 9D 2F DF DC A3 EE C5 CF AF A4 8C 0F F2 9C 78 19 48 CE 49 A8 28 06 A3 4E 7D F7 75 AA 49 E7 4E 20 AF B1 77 0A 90 CF C1 E0 62 BC 4F 79 76 64 98 BF 63 76 B4 F9 1D A4 C4 74 03 63 02 \n    ```", "```cs\n    string[] beatles = r.GetItems(\n      choices: new[] { \"John\", \"Paul\", \"George\", \"Ringo\" },\n      length: 10);\n    Write(\"Random ten beatles:\");\n    foreach (string beatle in beatles)\n    {\n      Write($\" {beatle}\");\n    }\n    WriteLine();\n    r.Shuffle(beatles);\n    Write(\"Shuffled beatles:\");\n    foreach (string beatle in beatles)\n    {\n      Write($\" {beatle}\");\n    }\n    WriteLine(); \n    ```", "```cs\n    Random ten beatles: Paul Paul John John John John Paul John George Ringo\n    Shuffled beatles: George John Paul Paul John John John Ringo Paul John \n    ```", "```cs\n    WriteLine($\"Empty GUID: {Guid.Empty}.\");\n    Guid g = Guid.NewGuid();\n    WriteLine($\"Random GUID: {g}.\");\n    byte[] guidAsBytes = g.ToByteArray();\n    Write(\"GUID as byte array: \");\n    for (int i = 0; i < guidAsBytes.Length; i++)\n    {\n      Write($\"{guidAsBytes[i]:X2} \");\n    }\n    WriteLine();\n    WriteLine(\"Generating three v7 GUIDs:\");\n    for (int i = 0; i < 3; i++)\n    {\n      Guid g7 = Guid.CreateVersion7(DateTimeOffset.UtcNow);\n      WriteLine($\"  {g7}.\");\n    } \n    ```", "```cs\n    Empty GUID: 00000000-0000-0000-0000-000000000000.\n    Random GUID: c7a11eea-45a5-4619-964a-a9cce1e4220c.\n    GUID as byte array: EA 1E A1 C7 A5 45 19 46 96 4A A9 CC E1 E4 22 0C\n    Generating three v7 GUIDs:\n      0191a398-12ec-7d5e-a8d3-8a629eae8be1.\n      0191a398-12ed-7913-8096-c6f70b5edd8f.\n      0191a398-12ed-7475-8284-0588b573080e. \n    ```", "```cs\n    string city = \"London\";\n    WriteLine($\"{city} is {city.Length} characters long.\"); \n    ```", "```cs\n    London is 6 characters long. \n    ```", "```cs\n    WriteLine($\"First char is {city[0]} and fourth is {city[3]}.\"); \n    ```", "```cs\n    First char is L and fourth is d. \n    ```", "```cs\n    string cities = \"Paris,Tehran,Chennai,Sydney,New York,Medellín\";\n    string[] citiesArray = cities.Split(',');\n    WriteLine($\"There are {citiesArray.Length} items in the array:\");\n    foreach (string item in citiesArray)\n    {\n      WriteLine($\"  {item}\");\n    } \n    ```", "```cs\n    There are 6 items in the array:\n      Paris\n      Tehran\n      Chennai\n      Sydney\n      New York\n      Medellín \n    ```", "```cs\n    string fullName = \"Alan Shore\";\n    int indexOfTheSpace = fullName.IndexOf(' ');\n    string firstName = fullName.Substring(\n      startIndex: 0, length: indexOfTheSpace);\n    string lastName = fullName.Substring(\n      startIndex: indexOfTheSpace + 1);\n    WriteLine($\"Original: {fullName}\");\n    WriteLine($\"Swapped: {lastName}, {firstName}\"); \n    ```", "```cs\n    Original: Alan Shore\n    Swapped: Shore, Alan \n    ```", "```cs\n    string company = \"Microsoft\";\n    WriteLine($\"Text: {company}\");\n    WriteLine(\"Starts with M: {0}, contains an N: {1}\",\n      arg0: company.StartsWith('M'),\n      arg1: company.Contains('N')); \n    ```", "```cs\n    Text: Microsoft\n    Starts with M: True, contains an N: False \n    ```", "```cs\n    using System.Globalization; // To use CultureInfo.\n    OutputEncoding = System.Text.Encoding.UTF8; // Enable Euro symbol. \n    ```", "```cs\n    CultureInfo.CurrentCulture = CultureInfo.GetCultureInfo(\"en-US\");\n    string text1 = \"Mark\";\n    string text2 = \"MARK\";\n    WriteLine($\"text1: {text1}, text2: {text2}\");\n    WriteLine(\"Compare: {0}.\", string.Compare(text1, text2));\n    WriteLine(\"Compare (ignoreCase): {0}.\",\n      string.Compare(text1, text2, ignoreCase: true));\n    WriteLine(\"Compare (InvariantCultureIgnoreCase): {0}.\",\n      string.Compare(text1, text2,\n      StringComparison.InvariantCultureIgnoreCase));\n    // German string comparisons\n    CultureInfo.CurrentCulture = CultureInfo.GetCultureInfo(\"de-DE\");\n    text1 = \"Strasse\";\n    text2 = \"Straße\";\n    WriteLine($\"text1: {text1}, text2: {text2}\");\n    WriteLine(\"Compare: {0}.\", string.Compare(text1, text2,\n      CultureInfo.CurrentCulture, CompareOptions.IgnoreNonSpace));\n    WriteLine(\"Compare (IgnoreCase, IgnoreNonSpace): {0}.\",\n      string.Compare(text1, text2, CultureInfo.CurrentCulture,\n      CompareOptions.IgnoreNonSpace | CompareOptions.IgnoreCase));\n    WriteLine(\"Compare (InvariantCultureIgnoreCase): {0}.\",\n      string.Compare(text1, text2,\n      StringComparison.InvariantCultureIgnoreCase)); \n    ```", "```cs\n    text1: Mark, text2: MARK\n    Compare: -1.\n    Compare (ignoreCase): 0.\n    Compare (InvariantCultureIgnoreCase): 0.\n    text1: Strasse, text2: Straße\n    Compare: 0.\n    Compare (IgnoreCase, IgnoreNonSpace): 0.\n    Compare (InvariantCultureIgnoreCase): -1. \n    ```", "```cs\n    string recombined = string.Join(\" => \", citiesArray);\n    WriteLine(recombined); \n    ```", "```cs\n    Paris => Tehran => Chennai => Sydney => New York => Medellín \n    ```", "```cs\n    string fruit = \"Apples\";\n    decimal price =  0.39M;\n    DateTime when = DateTime.Today;\n    WriteLine($\"Interpolated:  {fruit} cost {price:C} on {when:dddd}.\");\n    WriteLine(string.Format(\"string.Format: {0} cost {1:C} on {2:dddd}.\",\n      arg0: fruit, arg1: price, arg2: when)); \n    ```", "```cs\n    Interpolated:  Apples cost $0.39 on Friday.\n    string.Format: Apples cost $0.39 on Friday. \n    ```", "```cs\nWriteLine(\"WriteLine: {0} cost {1:C} on {2:dddd}.\",\n  arg0: fruit, arg1: price, arg2: when); \n```", "```cs\nstring vowels = \"AEIOUaeiou\";\n// .NET 8 and later.\nSearchValues<char> vowelsSearchValues = SearchValues.Create(vowels);   \nReadOnlySpan<char> text = \"Fred\";\nWriteLine($\"vowels: {vowels}\");\nWriteLine($\"text: {text}\");\nWriteLine($\"text.IndexOfAny(vowelsSearchValues): {\n  text.IndexOfAny(vowelsSearchValues)}\"); \n```", "```cs\nvowels: AEIOUaeiou\ntext: Fred\ntext.IndexOfAny(vowelsSearchValues): 2 \n```", "```cs\nstring[] names = [ \"Cassian\", \"Luthen\", \"Mon Mothma\",\n  \"Dedra\", \"Syril\", \"Kino\" ];\n// .NET 9 and later.\nSearchValues<string> namesSearchValues = SearchValues.Create(\n  names, StringComparison.OrdinalIgnoreCase);\nReadOnlySpan<char> sentence = \"In Andor, Diego Luna returns as the titular character, Cassian Andor, to whom audiences were first introduced in Rogue One.\";\nWriteLine($\"names: {string.Join(' ', names)}\");\nWriteLine($\"sentence: {sentence}\");\nWriteLine($\"sentence.IndexOfAny(vowelsSearchValues): {\n  sentence.IndexOfAny(namesSearchValues)}\"); \n```", "```cs\nnames: Cassian Luthen Mon Mothma Dedra Syril Kino\nsentence: In Andor, Diego Luna returns as the titular character, Cassian Andor, to whom audiences were first introduced in Rogue One.\nsentence.IndexOfAny(vowelsSearchValues): 55 \n```", "```cs\n    using System.Text.RegularExpressions; // To use Regex. \n    ```", "```cs\n    Write(\"Enter your age: \");\n    string input = ReadLine()!; // Null-forgiving operator.\n    Regex ageChecker = new(@\"\\d\");\n    WriteLine(ageChecker.IsMatch(input) ? \"Thank you!\" :\n      $\"This is not a valid age: {input}\"); \n    ```", "```cs\n    Enter your age: 34\n    Thank you! \n    ```", "```cs\n    Enter your age: carrots\n    This is not a valid age: carrots \n    ```", "```cs\n    Enter your age: bob30smith\n    Thank you! \n    ```", "```cs\n    Regex ageChecker = new(@\"**^**\\d**$**\"); \n    ```", "```cs\n    Regex ageChecker = new(@\"^\\d**+**$\"); \n    ```", "```cs\n\"Monsters, Inc.\",\"I, Tonya\",\"Lock, Stock and Two Smoking Barrels\" \n```", "```cs\n    // C# 1 to 10: Use escaped double-quote characters \\\"\n    // string films = \"\\\"Monsters, Inc.\\\",\\\"I, Tonya\\\",\\\"Lock, Stock and Two Smoking Barrels\\\"\";\n    // C# 11 or later: Use \"\"\" to start and end a raw string literal\n    string films = \"\"\"\n    \"Monsters, Inc.\",\"I, Tonya\",\"Lock, Stock and Two Smoking Barrels\"\n    \"\"\";\n    WriteLine($\"Films to split: {films}\");\n    string[] filmsDumb = films.Split(',');\n    WriteLine(\"Splitting with string.Split method:\");\n    foreach (string film in filmsDumb)\n    {\n      WriteLine($\"  {film}\");\n    } \n    ```", "```cs\n    Regex csv = new(\n      \"(?:^|,)(?=[^\\\"]|(\\\")?)\\\"?((?(1)[^\\\"]*|[^,\\\"]*))\\\"?(?=,|$)\");\n    MatchCollection filmsSmart = csv.Matches(films);\n    WriteLine(\"Splitting with regular expression:\");\n    foreach (Match film in filmsSmart)\n    {\n      WriteLine($\"  {film.Groups[2].Value}\");\n    } \n    ```", "```cs\n    Splitting with string.Split method:\n      \"Monsters\n       Inc.\"\n      \"I\n       Tonya\"\n      \"Lock\n       Stock and Two Smoking Barrels\"\n    Splitting with regular expression:\n      Monsters, Inc.\n      I, Tonya\n      Lock, Stock and Two Smoking Barrels \n    ```", "```cs\n    public Regex(**[StringSyntax(StringSyntaxAttribute.Regex****)]** **string** **pattern**) :\n      this(pattern, culture: null)\n    {\n    } \n    ```", "```cs\n    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Parameter, AllowMultiple = false, Inherited = false)]\n    public sealed class StringSyntaxAttribute : Attribute\n    {\n      public const string CompositeFormat = \"CompositeFormat\";\n      public const string DateOnlyFormat = \"DateOnlyFormat\";\n      public const string DateTimeFormat = \"DateTimeFormat\";\n      public const string EnumFormat = \"EnumFormat\";\n      public const string GuidFormat = \"GuidFormat\";\n      public const string Json = \"Json\";\n      public const string NumericFormat = \"NumericFormat\";\n      public const string Regex = \"Regex\";\n      public const string TimeOnlyFormat = \"TimeOnlyFormat\";\n      public const string TimeSpanFormat = \"TimeSpanFormat\";\n      public const string Uri = \"Uri\";\n      public const string Xml = \"Xml\";\n      …\n    } \n    ```", "```cs\n    partial class Program\n    {\n      private const string DigitsOnlyText = @\"^\\d+$\";\n      private const string CommaSeparatorText =\n        \"(?:^|,)(?=[^\\\"]|(\\\")?)\\\"?((?(1)[^\\\"]*|[^,\\\"]*))\\\"?(?=,|$)\";\n    } \n    ```", "```cs\n    Regex ageChecker = new(**DigitsOnlyText**); \n    ```", "```cs\n    Regex csv = new(**CommaSeparatorText**); \n    ```", "```cs\n    **using** **System.Diagnostics.CodeAnalysis;** **// To use [StringSyntax].**\n    partial class Program\n    {\n     **[****StringSyntax(StringSyntaxAttribute.Regex)****]**\n      private const string DigitsOnlyText = @\"^\\d+$\";\n     **[****StringSyntax(StringSyntaxAttribute.Regex)****]**\n      private const string CommaSeparatorText =\n        \"(?:^|,)(?=[^\\\"]|(\\\")?)\\\"?((?(1)[^\\\"]*|[^,\\\"]*))\\\"?(?=,|$)\";\n    } \n    ```", "```cs\n    [StringSyntax(StringSyntaxAttribute.DateTimeFormat)]\n    private const string FullDateTime = \"\"; \n    ```", "```cs\nRegex ageChecker = new(DigitsOnlyText, RegexOptions.Compiled); \n```", "```cs\n    using System.Text.RegularExpressions; // To use [GeneratedRegex].\n    partial class Program\n    {\n      [GeneratedRegex(DigitsOnlyText, RegexOptions.IgnoreCase)]\n      private static partial Regex DigitsOnly { get; }\n      [GeneratedRegex(CommaSeparatorText, RegexOptions.IgnoreCase)]\n      private static partial Regex CommaSeparator { get; }\n    } \n    ```", "```cs\n    Regex ageChecker = **DigitsOnly**; \n    ```", "```cs\n    Regex csv = **CommaSeparator**; \n    ```", "```cs\nnamespace System.Collections;\npublic interface ICollection : IEnumerable\n{\n  int Count { get; }\n  bool IsSynchronized { get; }\n  object SyncRoot { get; }\n  void CopyTo(Array array, int index);\n} \n```", "```cs\nint howMany = passengers.Count; \n```", "```cs\nnamespace System.Collections;\npublic interface IEnumerable\n{\n  IEnumerator GetEnumerator();\n}\npublic interface IEnumerator\n{\n  object Current { get; }\n  bool MoveNext();\n  void Reset();\n} \n```", "```cs\nforeach (Passenger p in passengers)\n{\n  // Perform an action on each passenger.\n} \n```", "```cs\nnamespace System.Collections.Generic;\npublic interface ICollection<T> : IEnumerable<T>, IEnumerable\n{\n  int Count { get; }\n  bool IsReadOnly { get; }\n  void Add(T item);\n  void Clear();\n  bool Contains(T item);\n  void CopyTo(T[] array, int index);\n  bool Remove(T item);\n} \n```", "```cs\nnamespace System.Collections.Generic;\n[DefaultMember(\"Item\")] // aka \"this\" indexer.\npublic interface IList<T> : ICollection<T>, IEnumerable<T>, IEnumerable\n{\n  T this[int index] { get; set; }\n  int IndexOf(T item);\n  void Insert(int index, T item);\n  void RemoveAt(int index);\n} \n```", "```cs\n    partial class Program\n    {\n      private static void OutputCollection<T>(\n        string title, IEnumerable<T> collection)\n      {\n        WriteLine($\"{title}:\");\n        foreach (T item in collection)\n        {\n          WriteLine($\"  {item}\");\n        }\n      }\n    } \n    ```", "```cs\n    // Simple syntax for creating a list and adding three items.\n    List<string> cities = new();\n    cities.Add(\"London\");\n    cities.Add(\"Paris\");\n    cities.Add(\"Milan\");\n    /* Alternative syntax that is converted by the compiler into\n       the three Add method calls above.\n    List<string> cities = new()\n      { \"London\", \"Paris\", \"Milan\" }; */\n    /* Alternative syntax that passes an array\n       of string values to AddRange method.\n    List<string> cities = new();\n    cities.AddRange(new[] { \"London\", \"Paris\", \"Milan\" }); */\n    OutputCollection(\"Initial list\", cities);\n    WriteLine($\"The first city is {cities[0]}.\");\n    WriteLine($\"The last city is {cities[cities.Count - 1]}.\");\n    WriteLine($\"Are all cities longer than four characters? {\n      cities.TrueForAll(city => city.Length > 4)}.\");\n    WriteLine($\"Do all cities contain the character 'e'? {\n      cities.TrueForAll(city => city.Contains('e'))}.\");\n    cities.Insert(0, \"Sydney\");\n    OutputCollection(\"After inserting Sydney at index 0\", cities);\n    cities.RemoveAt(1);\n    cities.Remove(\"Milan\");\n    OutputCollection(\"After removing two cities\", cities); \n    ```", "```cs\n    Initial list:\n      London\n      Paris\n      Milan\n    The first city is London.\n    The last city is Milan.\n    Are all cities longer than four characters? True.\n    Do all cities contain the character 'e'? False.\n    After inserting Sydney at index 0:\n      Sydney\n      London\n      Paris\n      Milan\n    After removing two cities:\n      Sydney\n      Paris \n    ```", "```cs\nnamespace System.Collections.Generic;\n[DefaultMember(\"Item\")] // aka \"this\" indexer.\npublic interface IDictionary<TKey, TValue>\n  : ICollection<KeyValuePair<TKey, TValue>>,\n    IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable\n{\n  TValue this[TKey key] { get; set; }\n  ICollection<TKey> Keys { get; }\n  ICollection<TValue> Values { get; }\n  void Add(TKey key, TValue value);\n  bool ContainsKey(TKey key);\n  bool Remove(TKey key);\n  bool TryGetValue(TKey key, [MaybeNullWhen(false)] out TValue value);\n} \n```", "```cs\nnamespace System.Collections.Generic;\npublic readonly struct KeyValuePair<TKey, TValue>\n{\n  public KeyValuePair(TKey key, TValue value);\n  public TKey Key { get; }\n  public TValue Value { get; }\n  [EditorBrowsable(EditorBrowsableState.Never)]\n  public void Deconstruct(out TKey key, out TValue value);\n  public override string ToString();\n} \n```", "```cs\n    // Define an alias for a dictionary with string key and string value.\n    using StringDictionary = System.Collections.Generic.Dictionary<string, string>; \n    ```", "```cs\n    // Declare a dictionary without the alias.\n    // Dictionary<string, string> keywords = new();\n    // Use the alias to declare the dictionary.\n    StringDictionary keywords = new();\n    // Add using named parameters.\n    keywords.Add(key: \"int\", value: \"32-bit integer data type\");\n    // Add using positional parameters.\n    keywords.Add(\"long\", \"64-bit integer data type\");\n    keywords.Add(\"float\", \"Single precision floating point number\");\n    /* Alternative syntax; compiler converts this to calls to Add method.\n    Dictionary<string, string> keywords = new()\n    {\n      { \"int\", \"32-bit integer data type\" },\n      { \"long\", \"64-bit integer data type\" },\n      { \"float\", \"Single precision floating point number\" },\n    }; */\n    /* Alternative syntax; compiler converts this to calls to Add method.\n    Dictionary<string, string> keywords = new()\n    {\n      [\"int\"] = \"32-bit integer data type\",\n      [\"long\"] = \"64-bit integer data type\",\n      [\"float\"] = \"Single precision floating point number\",\n    }; */\n    OutputCollection(\"Dictionary keys\", keywords.Keys);\n    OutputCollection(\"Dictionary values\", keywords.Values);\n    WriteLine(\"Keywords and their definitions:\");\n    foreach (KeyValuePair<string, string> item in keywords)\n    {\n      WriteLine($\"  {item.Key}: {item.Value}\");\n    }\n    // Look up a value using a key.\n    string key = \"long\";\n    WriteLine($\"The definition of {key} is {keywords[key]}.\"); \n    ```", "```cs\n    Dictionary keys:\n      int\n      long\n      float\n    Dictionary values:\n      32-bit integer data type\n      64-bit integer data type\n      Single precision floating point number\n    Keywords and their definitions:\n      int: 32-bit integer data type\n      long: 64-bit integer data type\n      float: Single precision floating point number\n    The definition of long is 64-bit integer data type \n    ```", "```cs\n    HashSet<string> names = new();\n    foreach (string name in\n      new[] { \"Adam\", \"Barry\", \"Charlie\", \"Barry\" })\n    {\n      bool added = names.Add(name);\n      WriteLine($\"{name} was added: {added}.\");\n    }\n    WriteLine($\"names set: {string.Join(',', names)}.\"); \n    ```", "```cs\n    Adam was added: True.\n    Barry was added: True.\n    Charlie was added: True.\n    Barry was added: False.\n    names set: Adam,Barry,Charlie. \n    ```", "```cs\n    Queue<string> coffee = new();\n    coffee.Enqueue(\"Damir\"); // Front of the queue.\n    coffee.Enqueue(\"Andrea\");\n    coffee.Enqueue(\"Ronald\");\n    coffee.Enqueue(\"Amin\");\n    coffee.Enqueue(\"Irina\"); // Back of the queue.\n    OutputCollection(\"Initial queue from front to back\", coffee);\n    // Server handles next person in queue.\n    string served = coffee.Dequeue();\n    WriteLine($\"Served: {served}.\");\n    // Server handles next person in queue.\n    served = coffee.Dequeue();\n    WriteLine($\"Served: {served}.\");\n    OutputCollection(\"Current queue from front to back\", coffee);\n    WriteLine($\"{coffee.Peek()} is next in line.\");\n    OutputCollection(\"Current queue from front to back\", coffee); \n    ```", "```cs\n    Initial queue from front to back:\n      Damir\n      Andrea\n      Ronald\n      Amin\n      Irina\n    Served: Damir.\n    Served: Andrea.\n    Current queue from front to back:\n      Ronald\n      Amin\n      Irina\n    Ronald is next in line.\n    Current queue from front to back:\n      Ronald\n      Amin\n      Irina \n    ```", "```cs\n    private static void OutputPQ<TElement, TPriority>(string title,\n      IEnumerable<(TElement Element, TPriority Priority)> collection)\n    {\n      WriteLine($\"{title}:\");\n      foreach ((TElement, TPriority) item in collection)\n      {\n        WriteLine($\"  {item.Item1}: {item.Item2}\");\n      }\n    } \n    ```", "```cs\n    PriorityQueue<string, int> vaccine = new();\n    // Add some people.\n    // 1 = High priority people in their 70s or poor health.\n    // 2 = Medium priority e.g. middle-aged.\n    // 3 = Low priority e.g. teens and twenties.\n    vaccine.Enqueue(\"Pamela\", 1);\n    vaccine.Enqueue(\"Rebecca\", 3);\n    vaccine.Enqueue(\"Juliet\", 2);\n    vaccine.Enqueue(\"Ian\", 1);\n    OutputPQ(\"Current queue for vaccination\", vaccine.UnorderedItems);\n    WriteLine($\"{vaccine.Dequeue()} has been vaccinated.\");\n    WriteLine($\"{vaccine.Dequeue()} has been vaccinated.\");\n    OutputPQ(\"Current queue for vaccination\", vaccine.UnorderedItems);\n    WriteLine($\"{vaccine.Dequeue()} has been vaccinated.\");\n    WriteLine(\"Adding Mark to queue with priority 2.\");\n    vaccine.Enqueue(\"Mark\", 2);\n    WriteLine($\"{vaccine.Peek()} will be next to be vaccinated.\");\n    OutputPQ(\"Current queue for vaccination\", vaccine.UnorderedItems); \n    ```", "```cs\n    Current queue for vaccination:\n      Pamela: 1\n      Rebecca: 3\n      Juliet: 2\n      Ian: 1\n    Pamela has been vaccinated.\n    Ian has been vaccinated.\n    Current queue for vaccination:\n      Juliet: 2\n      Rebecca: 3\n    Juliet has been vaccinated.\n    Adding Mark to queue with priority 2\n    Mark will be next to be vaccinated.\n    Current queue for vaccination:\n      Mark: 2\n      Rebecca: 3 \n    ```", "```cs\nvoid ReadCollection<T>(ICollection<T> collection)\n{\n  // We can check if the collection is read-only.\n  if (collection.IsReadOnly)\n  {\n    // Read the collection.\n  }\n  else\n  {\n    WriteLine(\"You have given me a collection that I could change!\");\n  }\n} \n```", "```cs\n    private static void UseDictionary(\n      IDictionary<string, string> dictionary)\n    {\n      WriteLine($\"Count before is {dictionary.Count}.\");\n      try\n      {\n        WriteLine(\"Adding new item with GUID values.\");\n        // Add method with return type of void.\n        dictionary.Add(\n          key: Guid.NewGuid().ToString(),\n          value: Guid.NewGuid().ToString());\n      }\n      catch (NotSupportedException)\n      {\n        WriteLine(\"This dictionary does not support the Add method.\");\n      }\n      WriteLine($\"Count after is {dictionary.Count}.\");\n    } \n    ```", "```cs\n    UseDictionary(keywords); \n    ```", "```cs\n    Count before is 3.\n    Adding new item with GUID values.\n    Count after is 4. \n    ```", "```cs\n    //UseDictionary(keywords);\n    UseDictionary(keywords.AsReadOnly()); \n    ```", "```cs\n    Count before is 3.\n    Adding new item with GUID values.\n    This dictionary does not support the Add method.\n    Count after is 3. \n    ```", "```cs\n    using System.Collections.Immutable; // To use ImmutableDictionary<T, T>. \n    ```", "```cs\n    //UseDictionary(keywords.AsReadOnly());\n    UseDictionary(keywords.ToImmutableDictionary()); \n    ```", "```cs\n    ImmutableDictionary<string, string> immutableKeywords =\n      keywords.ToImmutableDictionary();\n    // Call the Add method with a return value.\n    ImmutableDictionary<string, string> newDictionary =\n      immutableKeywords.Add(\n        key: Guid.NewGuid().ToString(),\n        value: Guid.NewGuid().ToString());\n    OutputCollection(\"Immutable keywords dictionary\", immutableKeywords);\n    OutputCollection(\"New keywords dictionary\", newDictionary); \n    ```", "```cs\n    Immutable keywords dictionary:\n      [float, Single precision floating point number]\n      [long, 64-bit integer data type]\n      [int, 32-bit integer data type]\n    New keywords dictionary:\n      [d0e099ff-995f-4463-ae7f-7b59ed3c8d1d, 3f8e4c38-c7a3-4b20-acb3-01b2e3c86e8c]\n      [float, Single precision floating point number]\n      [long, 64-bit integer data type]\n      [int, 32-bit integer data type] \n    ```", "```cs\n    using System.Collections.Frozen; // To use FrozenDictionary<T, T>. \n    ```", "```cs\n    // Creating a frozen collection has an overhead to perform the\n    // sometimes complex optimizations.\n    FrozenDictionary<string, string> frozenKeywords =\n      keywords.ToFrozenDictionary();\n    OutputCollection(\"Frozen keywords dictionary\", frozenKeywords);\n    // Lookups are faster in a frozen dictionary.\n    WriteLine($\"Define long: {frozenKeywords[\"long\"]}\"); \n    ```", "```cs\n    Frozen keywords dictionary:\n      [int, 32-bit integer data type]\n      [long, 64-bit integer data type]\n      [float, Single precision floating point number]\n    Define long: 64-bit integer data type \n    ```", "```cs\nint[] numbersArray11 = { 1, 3, 5 };\nList<int> numbersList11 = new() { 1, 3, 5 };\nSpan<int> numbersSpan11 = stackalloc int[] { 1, 3, 5 }; \n```", "```cs\nint[] numbersArray12 = [ 1, 3, 5 ];\nList<int> numbersList12 = [ 1, 3, 5 ];\nSpan<int> numbersSpan12 = [ 1, 3, 5 ]; \n```", "```cs\nint[] row0 = [1, 2, 3];\nint[] row1 = [4, 5];\nint[] row2 = [6, 7, 8, 9];\n// Use the spread element to combine the three arrays and an integer into a single array.\nint[] combinedRows = [..row0, ..row1, ..row2, 10];\nforeach (int number in combinedRows)\n{\n  Console.Write($\"{number}, \");\n} \n```", "```cs\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \n```", "```cs\nList<string> names = new();\nnames.EnsureCapacity(10_000);\n// Load ten thousand names into the list. \n```", "```cs\nvoid ProcessCollection<T>(IEnumerable<T> collection)\n{\n  // Process the items in the collection,\n  // perhaps using a foreach statement.\n} \n```", "```cs\nvoid ProcessCollection<T>(**List<T>** collection)\n{\n  // Process the items in the collection,\n  // perhaps using a foreach statement.\n} \n```", "```cs\npublic class Vehicle\n{\n  public List<Person>? GetPassengers()\n  {\n    ICollection<Person> passengers = GetFromDatabase();\n    if (passengers.Count > 0)\n    {\n      return passengers;\n    }\n    else\n    {\n      return null;\n    }\n  }\n  public List<Person>? Passengers\n  {\n    get\n    {\n      ICollection<Person> passengers = GetFromDatabase();\n      if (passengers.Count > 0)\n      {\n        return passengers;\n      }\n      else\n      {\n        return null;\n      }\n    }\n  }\n} \n```", "```cs\nvar people = car.GetPassengers();\n// Accessing people could throw a NullReferenceException!\nWriteLine($\"There are {people.Count} people.\");\nforeach (Person p in car.Passengers)\n{\n  // Process each person.\n} \n```", "```cs\n// Return an empty sequence instead.\nreturn Enumerable.Empty<Person>();\n// Or an empty array.\nreturn Array,Empty<Person>();\n// Or an empty collection expression.\nreturn []; \n```", "```cs\nint index = 3;\nPerson p = people[index]; // Fourth person in array.\nchar letter = name[index]; // Fourth letter in name. \n```", "```cs\n// Two ways to define the same index, 3 in from the start.\nIndex i1 = new(value: 3); // Counts from the start\nIndex i2 = 3; // Using implicit int conversion operator.\n// Two ways to define the same index, 5 in from the end.\nIndex i3 = new(value: 5, fromEnd: true);\nIndex i4 = ^5; // Using the caret ^ operator. \n```", "```cs\nRange r1 = new(start: new Index(3), end: new Index(7));\nRange r2 = new(start: 3, end: 7); // Using implicit int conversion.\nRange r3 = 3..7; // Using C# 8.0 or later syntax.\nRange r4 = Range.StartAt(3); // From index 3 to last index.\nRange r5 = 3..; // From index 3 to last index.\nRange r6 = Range.EndAt(3); // From index 0 to index 3.\nRange r7 = ..3; // From index 0 to index 3. \n```", "```cs\n    string name = \"Samantha Jones\";\n    // Getting the lengths of the first and last names.\n    int lengthOfFirst = name.IndexOf(' ');\n    int lengthOfLast = name.Length - lengthOfFirst - 1;\n    // Using Substring.\n    string firstName = name.Substring(\n      startIndex: 0,\n      length: lengthOfFirst);\n    string lastName = name.Substring(\n      startIndex: name.Length - lengthOfLast,\n      length: lengthOfLast);\n    WriteLine($\"First: {firstName}, Last: {lastName}\");\n    // Using spans.\n    ReadOnlySpan<char> nameAsSpan = name.AsSpan();\n    ReadOnlySpan<char> firstNameSpan = nameAsSpan[0..lengthOfFirst];\n    ReadOnlySpan<char> lastNameSpan = nameAsSpan[^lengthOfLast..];\n    WriteLine($\"First: {firstNameSpan}, Last: {lastNameSpan}\"); \n    ```", "```cs\n    First: Samantha, Last: Jones\n    First: Samantha, Last: Jones \n    ```", "```cs\nReadOnlySpan<char> text = \"12+23+456\".AsSpan();\nint sum = 0;\nforeach (Range r in text.Split('+'))\n{\n  sum += int.Parse(text[r]);\n}\nWriteLine($\"Sum using Split: {sum}\"); \n```", "```cs\nThe default regular expression checks for at least one digit.\nEnter a regular expression (or press ENTER to use the default): ^[a-z]+$\nEnter some input: apples\napples matches ^[a-z]+$? True\nPress ESC to end or any key to try again.\nEnter a regular expression (or press ENTER to use the default): ^[a-z]+$\nEnter some input: abc123xyz\nabc123xyz matches ^[a-z]+$? False\nPress ESC to end or any key to try again. \n```", "```cs\n    string city = \"Aberdeen\";\n    ReadOnlySpan<char> citySpan = city.AsSpan()[^5..^0];\n    WriteLine(citySpan.ToString()); \n    ```"]