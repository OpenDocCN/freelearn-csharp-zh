- en: Interacting with Data in C# - Entity Framework Core
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we mentioned in [Chapter 5](49aed8bb-9a4a-4241-9efc-f53c3f53dd5a.xhtml),
    *Applying a Microservice Architecture to Your Enterprise Application*, software
    systems are organized into layers, and each layer communicates with the previous
    and next layers through interfaces that don''t depend on how the layer is implemented.
    When the software is a Business/Enterprise system, it usually contains at least
    three layers: the data layer, the business layer, and the presentation layer.
    In general, the interface that''s offered by each layer and the way the layer
    is implemented depends on the application.'
  prefs: []
  type: TYPE_NORMAL
- en: However, it turns out that the functionalities offered by data layers are quite
    standard, since they just map data from a data storage subsystem into objects
    and vice versa. This leads to the conceptions of general-purpose frameworks for
    implementing data layers in a substantially declarative way. These tools are called
    **Object-Relational Mapping** (**ORM**) tools since they are data storage subsystems
    based on relational databases. However, they also work well with the modern non-relational
    storages classified as NoSQL databases (such as MongoDB and Azure Cosmos DB) since
    their data model is closer to the target object model than a pure relational model.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding ORM basics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Entity Framework Core
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Entity Framework Core migrations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Querying and updating data with Entity Framework Core
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying your data layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Entity Framework Core advanced features – global filters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This chapter describes ORMs and how to configure them, and then focuses on Entity
    Framework Core, the ORM included in .NET Core.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter requires Visual Studio 2017 or 2019 free Community Edition or better
    with all the database tools installed.
  prefs: []
  type: TYPE_NORMAL
- en: All the concepts in this chapter will be clarified with practical examples based
    on the WWTravelClub book use case. You will find the code for this chapter at [https://github.com/PacktPublishing/Hands-On-Software-Architecture-with-CSharp-8](https://github.com/PacktPublishing/Hands-On-Software-Architecture-with-CSharp-8).
  prefs: []
  type: TYPE_NORMAL
- en: Understanding ORM basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ORMs map relational DB tables into in-memory collections of objects where object
    properties correspond to DB table fields. Types from C#, such as Booleans, numeric
    types, and strings, have corresponding DB types. If GUIDs are not available in
    the mapped database, while single characters are mapped to DB single-character
    strings, then types such as GUIDs are mapped to their equivalent string representations.
    All date and time types are mapped either to C# `DateTime` when date/time contains
    no time zone information or to `DateTimeOffset` when date/time also contains explicit
    time zone information. Any DB time duration is mapped to a `TimeSpan`.
  prefs: []
  type: TYPE_NORMAL
- en: Since the string properties of most object-oriented languages have no length
    limits associated with them (while DB string fields usually have length limits),
    the DB limits are taken into account in the DB mapping configuration. In general,
    when the mapping between DB types and object-oriented language types need options
    to be specified, these options are declared in the mapping configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'The way the whole configuration is defined depends on the specific ORM. Entity
    Framework Core offers three options:'
  prefs: []
  type: TYPE_NORMAL
- en: Data annotations (property attributes)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Name conventions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fluent configuration interface based on configuration objects and methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While the fluent interface can be used to specify any configuration option,
    the data annotations and name conventions can be used for a smaller subset of
    them.
  prefs: []
  type: TYPE_NORMAL
- en: Each ORM adapts to a specific DB type (Oracle, MySQL, SQL Server, and so on)
    with DB-specific adapters called **providers** or **connectors**. Entity Framework
    Core has providers for most of the available DB engines.
  prefs: []
  type: TYPE_NORMAL
- en: A complete list of providers can be found at [https://docs.microsoft.com/en-US/ef/core/providers/](https://docs.microsoft.com/en-US/ef/core/providers/).
  prefs: []
  type: TYPE_NORMAL
- en: Adapters are necessary for the differences in DB types, for the way transactions
    are handled, and for all the other features that are not standardized by the SQL
    language.
  prefs: []
  type: TYPE_NORMAL
- en: Relations among tables are represented with object pointers. For instance, in
    a one-to-many relationship, the class that's mapped to the *one* side of the relationship
    contains a collection that is populated with the related objects on the *many*
    side of the relationship. On the other hand, the class mapped to the *many* side
    of the relationship has a simple property that is populated with the uniquely
    related object on the *one* side of the relationship.
  prefs: []
  type: TYPE_NORMAL
- en: The whole database (or just a part of it) is represented by an in-memory cache
    class that contains a property for each collection that's mapped to a DB table.
    First, the query and update operations are performed on an instance of an in-memory
    cache class, and then this instance is synchronized with the database. The in-memory
    cache class that's used by Entity Framework Core is called `DBContext` and it
    also contains the mapping configuration. More specifically, the application-specific
    in-memory cache class is obtained by inheriting `DBContext` and adding it to all
    the mapped collections and all the necessary configuration information.
  prefs: []
  type: TYPE_NORMAL
- en: Summing up, `DBContext` subclass instances contain partial snapshots of the
    DB that are synchronized with the database to get/update the actual data.
  prefs: []
  type: TYPE_NORMAL
- en: DB queries are performed with a query language made of method calls on the collections
    of the in-memory cache class. The actual SQL is created and executed during the
    synchronization stage. For instance, Entity Framework Core performs **Language
    Integrated Queries** (**LINQ**) on the collections mapped to the DB tables.
  prefs: []
  type: TYPE_NORMAL
- en: 'In general, LINQ queries produce `IEnumerable` instances, that is, collections
    whose elements are not computed when `IEnumerable` is created at the end of the
    query, but when you actually attempt to retrieve the collection elements from
    `IEnumerable`. This works as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: LINQ queries that start from a mapped collection of a `DBContext` create a specific
    subclass of `IEnumerable` called `IQueryable`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An `IQueryable` contains all the information that's needed to issue a query
    to the database, but the actual SQL is produced and executed when the first element
    of the `IQueryable` is retrieved.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thus, in the case of Entity Framework Core, the synchronization with the database
    is performed when an element is actually retrieved from the final `IQueryable`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Typically, each Entity Framework query ends with a `ToList` or `ToArray` operation
    that transforms the `IQueryable` into a list or array, thereby causing the actual
    execution of the query on the database.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In case the query is expected to return just a single element or no element
    at all, we typically execute a `FirstOrDefault` operation that returns a single
    element, if any, or `null`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also, updates, deletions, and additions of new entities to a DB table are performed
    by mimicking these operations on a `DBContext` collection property that represents
    the database table. However, entities may only be updated or deleted this way
    after they have been loaded in that memory collection by means of a query. An
    update query requires the in-memory representation of the entity to be modified
    as needed, while a delete query requires the in-memory representation of the entity
    to be removed from its in-memory mapped collection. In Entity Framework Core,
    the removal operation is performed by calling the `Remove(entity)` method of the
    collection.
  prefs: []
  type: TYPE_NORMAL
- en: The addition of a new entity has no further requirements. It is enough to add
    the new entity to the in-memory collection. Updates, deletes, and additions that
    are performed on various in-memory collections are actually passed to the database
    with an explicit call to a DB synchronization method. For instance, Entity Framework
    Core passes all the changes that are performed on a `DBContext` instance to the
    database when you call the `DBContext.SaveChanges()` method.
  prefs: []
  type: TYPE_NORMAL
- en: Changes that are passed to the database during a synchronization operation are
    executed in a single transaction. Moreover, for ORMs, such as Entity Framework
    Core, that have an explicit representation of transactions, a synchronization
    operation is executed in the scope of a transaction, since it uses that transaction
    instead of creating a new one.
  prefs: []
  type: TYPE_NORMAL
- en: The remaining sections in this chapter explain how to use Entity Framework Core,
    along with some example code based on this book's WWTravelClub use case.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Entity Framework Core
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since Database handling is confined within a dedicated application layer, it
    is good practice to define your Entity Framework Core (`DBContext`) in a separate
    library. Accordingly, we need to define a .NET Core class library project. As
    we discussed in the *Book use case – .NET Core in action, Main Types of .NET Core
    projects* section of [Chapter 2](a4194162-692d-4ac4-9b8e-a48199e746ab.xhtml),
    *Functional and Nonfunctional Requirements*, we have two different kinds of library
    projects: **.NET** **Standard** and **.NET Core**.
  prefs: []
  type: TYPE_NORMAL
- en: While .NET Core libraries are tied to a specific .NET Core version, .NET Standard
    2.0 libraries have a wide range of applications since they work with any .NET
    version greater than 2.0 and also with the classical .NET Framework.
  prefs: []
  type: TYPE_NORMAL
- en: However, the `Microsoft.EntityFrameworkCore` package (which we need in our DB
    layer) depends just on .NET Standard 2.0\. It is designed to work with a specific
    .NET Core version (its version numbers are the same as the .NET Core versions).
    Therefore, if we define our DB layer as .NET Standard 2.0, the specific `Microsoft.EntityFrameworkCore` package
    that we add as a dependency may conflict with another version of the same library
    contained in another system component that's tied to a specific .NET Core version.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since our library is not a general-purpose library (it''s just a component
    of a specific application), it is preferable to tie it to a specific .NET Core
    version than to track its version dependencies in the whole design of our application.
    Therefore, let''s choose a .NET Core library project for the latest .NET Core
    version installed on our machine. Our .NET Core library project can be created
    and prepared as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Visual Studio and define a new solution named `WWTravelClubDB` and then
    select Class Library (.NET Core) for the latest .NET Core version available.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We must install all Entity Framework Core-related dependencies. The simplest
    way to have all the necessary dependencies installed is to add the NuGet package
    for the provider of the database engine we are going to use – in our case, SQL
    Server – as we mentioned in [Chapter 4](049a0a4b-74b6-41a1-92db-87a4f8af9fd1.xhtml),
    *Deciding on the Best Cloud-Based Solution*. In fact, any provider will install
    all the required packages since it has all of them as dependencies. So, let's
    add the latest stable version of `Microsoft.EntityFrameworkCore.SqlServer`. If
    you plan to use several database engines, you can also add other providers since
    they can work side by side. Later in this chapter, we will install other NuGet
    packages that contain tools that we need to process our Entity Framework Core.
    Then, we will explain how to install further tools that are needed to process
    Entity Framework Core's configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's rename the default `Class1` class to `MainDBContext`. This was automatically
    added to the class library.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let''s replace its content with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We inherit from `DbContext` and we are required to pass `DbContextOptions` to
    the `DBContext` constructor. `DbContextOptions` contains creation options such
    as the database connection string, which depend on the target DB engine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All the collections that have been mapped to database tables will be added as
    properties of `MainDBContext`. The mapping configuration will be defined inside
    of the overridden `OnModelCreating` method with the help of the `ModelBuilder`
    object passed as a parameter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next step is the creation of all the classes that represent all the DB table
    rows. These are called **entities**. We need an entity class for each DB table
    we want to map. Let's create a `Models` folder in the project root for all of
    them. The next subsection explains how to define all the required entities.
  prefs: []
  type: TYPE_NORMAL
- en: Defining DB entities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'DB design, like the whole application design, is organized in iterations. Let''s
    suppose that, in the first iteration, we need a prototype with two database tables:
    one for all the travel packages and another one for all the locations referenced
    by the packages. Each package covers just one location, while a single location
    may be covered by several packages, so the two tables are connected by a one-to-many
    relationship.'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let''s start with the location database table. As we mentioned at the end
    of the previous section, we need an entity class to represent the rows of this
    table. Let''s call `Destination` the entity class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: All the DB fields must be represented by read/write C# properties. Suppose that
    each destination is something like a town or a region that can be defined by just
    its name and the country it is in, and that all the relevant information is contained
    in its `Description`. In future iterations, we will probably add several more
    fields. `Id` is an auto-generated key.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, now, we need to add information about how all the fields are mapped
    to DB fields. In Entity Framework Core, all the primitive types are mapped automatically
    to DB types by the DB engine-specific provider that''s used (in our case, SQL
    Server provider). Our only preoccupations are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Length limits on the string**: They can be taken into account by applying
    adequate `MaxLength` and `MinLength` attributes to each string property. All the
    attributes that are useful for the entity''s configuration are contained in the `System.ComponentModel.DataAnnotation`
    and `System.ComponentModel.DataAnnotations.Schema` namespaces. Therefore, it''s
    good practice to add both of them to all the entity definitions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Specifying which fields are obligatory and which ones are optional**: By
    default, all the reference types (such as all the strings) are assumed to be optional,
    while all the value types (numbers and GUIDs, for instance) are assumed to be
    obligatory. If we want a reference type to be obligatory, then we must decorate
    it with the `Required` attribute. However, if we want a `T` value type property
    to be optional, then we must replace it with `T?`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Specifying which property represents the primary key**: The key may be specified
    by decorating a property with the `Key` attribute. However, if no `Key` attribute
    is found, a property named `Id` (if there is one) is taken as the primary key.
    In our case, there is no need for the `Key` attribute. If the primary key is composed
    of several properties, it is enough to add the `Key` attribute to all of them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since each destination is on the *one* side of a one-to-many relationship, it
    must contain a collection for the related package entities; otherwise, we will
    not be able to refer to the related entities in the clauses of our LINQ queries.
  prefs: []
  type: TYPE_NORMAL
- en: 'Putting everything together, the final version of the `Destination` class is
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Since the `Description` property has no length limits, it will be implemented
    with a SQL Server `ntext` field of indefinite length. We can write the code for
    the `Package` class in a similar way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Each package has a duration in days, as well as optional start and stop dates
    in which the package offer is valid. `MyDestination` connects packages with their
    destinations in the many-to-one relationship that they have with the `Destination`
    entity, while `DestinationId` is the external key of the same relation.
  prefs: []
  type: TYPE_NORMAL
- en: While it is not obligatory to specify the external key, it is good practice
    to do so since this is the only way to specify some properties of the relationship.
    For instance, in our case, since `DestinationId` is an `int` (value type), it
    is obligatory. Therefore, the relationship here is one-to-many and not (0, 1)-to-many.
    Defining `DestinationId` as `int?`, instead of `int`, would turn the one-to-many
    relationship into a (0, 1)-to-many relationship.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will explain how to define the in-memory collection
    that represents the database tables.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the mapped collections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once we have defined all the entities that are object-oriented representations
    of the database rows, we need to define the in-memory collections that represent
    the database tables themselves. As we mentioned in the *ORM basics* section, all
    the database operations are mapped to the operations on these collections (the
    *Querying and updating data with Entity Framework Core* section of this chapter
    explains *how*). It is enough to add a `DbSet<T>` collection property to our `DBContext`
    for each entity, `T`. Usually, the name of each of these properties is obtained
    by pluralizing the entity name. Thus, we need to add the following two properties
    to our `MainDBContext`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Up until now, we've translated database stuff into properties, classes, and
    data annotations. However, Entity Framework needs further information to interact
    with a database. The next subsection explains how to provide them.
  prefs: []
  type: TYPE_NORMAL
- en: Completing the mapping configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The mapping configuration information that we couldn''t specify in the entity
    definitions must be added in the `OnModelCreating DBContext` method. Each configuration
    information relative to an entity, `T`, starts with `builder.Entity<T>()` and
    continues with a call to a method that specifies that kind of constraint. Further
    nested calls specify further properties of the constraint. For instance, our one-to-many
    relationship may be configured as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The two sides of the relationship are specified through the navigation properties
    that we added to our entities. `HasForeignKey` specifies the external key. Finally,
    `OnDelete` specifies what to do with packages when a destination is deleted. In
    our case, it performs a cascade delete of all the packages related to that destination.
  prefs: []
  type: TYPE_NORMAL
- en: 'The same configuration can be defined by starting from the other side of the
    relationship, that is, starting with `builder.Entity<Package>()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The only difference is that the previous statement's `HasMany`-`WithOne` methods
    are replaced by the `HasOne`-`WithMany` methods since we started from the other
    side of the relationship.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `ModelBuilder builder` object allows us to specify database indexes with
    something such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Multi-property indexes are defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If we add all the necessary configuration information, then our `OnModelCreating`
    method will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Once you've configured Entity Framework Core, we can use all the configuration
    information we have to create the actual database and put all the tools we need
    in place in order to update the database's structure as the application evolves.
    The next section explains how.
  prefs: []
  type: TYPE_NORMAL
- en: Entity Framework Core migrations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've configured Entity Framework and defined our application-specific
    `DBContext` subclass, we can use the Entity Framework Core design tools to generate
    the physical database and create the database structure snapshot that's needed
    by Entity Framework Core to interact with the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Entity Framework Core design tools must be installed in each project that needs
    them as NuGet packages. There are two equivalent options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Tools that work in any Windows console**: These are available through the `Microsoft.EntityFrameworkCore.Design` NuGet
    package. All Entity Framework Core commands are in `dotnet ef .....` format since
    they are contained in the `ef` command line''s .NET Core application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tools that are specific to the Visual Studio** Package Manager Console: These
    are contained in the `Microsoft.EntityFrameworkCore.Tools` NuGet package. They
    don''t need the `dotnet ef` prefix since they can only be launched from the Package
    Manager Console inside of Visual Studio.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Entity Framework Core''s design tools are used within the design/update procedure.
    This procedure is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: We modify `DBContext` and Entities' definitions as needed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We launch the design tools to ask Entity Framework Core to detect and process
    all the changes we made.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once launched, the design tools update the database structure snapshot and generate
    a new *migration*, that is, a file containing all the instructions we need in
    order to modify the physical database to reflect all the changes we made.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We launch another tool to update the database with the newly created migration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We test the newly configured DB layer and, if new changes are necessary, we
    go back to *step 1*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the data layer is ready, it is deployed in staging or production, where
    all the migrations are applied once more to the actual staging/production database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is repeated several times in the various software project iterations and
    during the lifetime of the application. If we operate on an already existing database,
    we need to configure `DBContext` and its models to reflect the existing structure
    of all the tables we want to map. Then, we call the design tools with an `IgnoreChanges`
    option so that they generate an empty migration. Also, this empty migration must
    be passed to the physical database so that it can synchronize a database structure
    version associated with the physical database with the version that's been recorded
    in the database snapshot. This version is important because it determines which
    migrations must be applied to a database and which ones have already been applied.
  prefs: []
  type: TYPE_NORMAL
- en: 'The whole design process needs a test/design database and, if we operate on
    an existing database, the structure of this test/design database must reflect
    the actual database – at least in terms of the tables we want to map. To enable
    design tools so that we can interact with the database, we must define the `DbContextOptions`
    options that they pass to the `DBContext` constructor. These options are important
    at design time since they contain the connection string of the test/design database.
    The design tools can be informed about our `DbContextOptions` options if we create a
    class that implements the `IDesignTimeDbContextFactory<T>` interface, where `T`
    is our `DBContext` subclass:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '`connectionString` will be used by Entity Framework to create a new database
    in the local SQL Server instance that''s been installed in the development machine
    and connects with Windows credentials. You are free to change it to reflect your
    needs.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we are ready to create our first migration! Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Let's go to the Package Manager Console and ensure that WWTravelClubDB is selected
    as our default project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, type `Add-Migration initial` and press *Enter* to issue this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d81b11a6-78ee-4f9f-b286-002c0b88ddb1.png)'
  prefs: []
  type: TYPE_IMG
- en: '`initial` is the name we gave our first migration. So, in general, the command
    is `Add-Migration <migration name>`. When we operate on an existing database,
    we must add the `-IgnoreChanges` option to the first migration (and just to that)
    so that an empty migration is created. References to the whole set of commands
    can be found in the *Further reading* section.'
  prefs: []
  type: TYPE_NORMAL
- en: If, after having created the migration, but before having applied the migration
    to the database, we realize we made some errors, we can undo our action with the
    `Remove-Migration` command. If the migration has already been applied to the database,
    the simplest way to correct our error is to make all the necessary changes to
    the code and then apply another migration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As soon as the `Add-Migration` command is executed, a new folder appears in
    our project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bb865a32-ee95-460d-ab24-c9b86ee779a6.png)'
  prefs: []
  type: TYPE_IMG
- en: '`20190205102637_initial.cs` is our migration expressed in an easy to understand
    language.'
  prefs: []
  type: TYPE_NORMAL
- en: You may review the code to verify that everything is okay and you may also modify
    the migration content (only if you are enough of an expert to do it reliably).
    Each migration contains an `Up` method and a `Down` method. The `Up` method implies
    the migration, while the `Down` method undoes its changes. Accordingly, the `Down`
    method contains the reverse actions of all the actions included in the `Up` method
    in reverse order.
  prefs: []
  type: TYPE_NORMAL
- en: '`20190205102637_initial.Designer.cs` is the Visual Studio designer code you
    *mustn''t* modify, while `MainDBContextModelSnapshot.cs` is the overall database
    structure snapshot. If you add further migrations, new migration files and their
    designer counterparts will appear and the unique `MainDBContextModelSnapshot.cs`
    database structure snapshot will be updated to reflect the database''s overall
    structure.'
  prefs: []
  type: TYPE_NORMAL
- en: The same command can be issued in a Windows console by typing `dotnet ef migrations
    add initial`. However, this command must be issued from within the project's root
    folder (not from within the solution's root folder).
  prefs: []
  type: TYPE_NORMAL
- en: Migrations can be applied to the database by typing `Update-Database` in the
    Package Manager Console. The equivalent Windows console command is `dotnet ef
    database update`. Let's try using this command to create the physical database!
  prefs: []
  type: TYPE_NORMAL
- en: The next subsection explains how to create database stuff that Entity Framework
    is unable to create automatically. After that, in the next section, we will use
    Entity Framework's configuration and the database we generated with `dotnet ef
    database update` to create, query, and update data.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding stored procedures and direct SQL commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some database structures can't be generated automatically by the Entity Framework
    Core commands and declarations we described previously. For instance, Entity Framework
    Core can't generate automatically stored procedures. Stored procedures such as
    generic SQL strings can be included manually in the `Up` and `Down` methods through
    the `migrationBuilder.Sql("<sql scommand>")` method.
  prefs: []
  type: TYPE_NORMAL
- en: The safest way to do this is by adding a migration without performing any configuration
    changes so that the migration is empty when it's created. Then, we can add the
    necessary SQL commands to the empty `Up` method of this migration and their converse
    commands in the empty `Down` method. It is good practice to put all the SQL strings
    in the properties of resource files (`.resx` files).
  prefs: []
  type: TYPE_NORMAL
- en: Now, you are ready to interact with the database through Entity Framework Core.
  prefs: []
  type: TYPE_NORMAL
- en: Querying and updating data with Entity Framework Core
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To test our DB layer, we need to add a console project based on the same .NET
    Core version as our library to the solution. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Let's call the new console project `WWTravelClubDBTest`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we need to add our data layer as a dependency of the console project by
    right-clicking on the *References* node of the console project and selecting *Add
    reference*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Remove the content of the `Main` static method in the `program.cs` file and
    start by writing the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add the following namespaces at the top of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have finished preparing our test project, we can experiment with
    queries and data updates. Let''s start by creating some database objects, that
    is, some destinations and packages. Follow these steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we must create an instance of our `DBContext` subclass with an appropriate
    connection string. We can use the same `LibraryDesignTimeDbContextFactory` class
    that''s used by the design tools to get it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'New rows can be created by simply adding class instances to the mapped collections
    of our `DBContext` subclass. If a `Destination` instance has packages associated
    with it, we can simply add them to its `Packages` property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: There is no need to specify primary keys since they are auto-generated and will
    be filled in by the database. In fact, after the `SaveChanges()` operation synchronizes
    our context with the actual DB, the `firstDestination.Id` property has a non-zero
    value. The same is true for the primary keys of `Package`.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we declare that an entity (in our case, a `Package`) is a child of another
    entity (in our case, a `Destination`) by inserting it in a father entity collection
    (in our case, the `Packages` collection), there is no need to explicitly set its
    external key (in our case, `DestinationId`) since it is inferred automatically
    by Entity Framework Core. Once created and synchronized with the `firstDestination` database,
    we can add further packages in two different ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a `Package` class instance, set its `DestinationId` external key to `firstDestination.Id`
    and add it to `context.Packages`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a `Package` class instance, with no need to set its external key, and
    then add it to the `Packages` collection of its father `Destination` instance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The latter option is the only possibility when a child entity (`Package`) is
    added with its father entity (`Destination`) and the father entity has an auto-generated
    principal key since, in this case, the external key isn't available at the time
    we perform the additions. In most of the other circumstances, the former option
    is simpler since the second option requires the father `Destination` entity to
    be loaded in memory, along with its `Packages` collection, that is, together with
    all the packages associated with the `Destination` object (by default, connected
    entities aren't loaded by queries).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s say we want to modify the *Florence* destination and give a 10%
    increment to all `Florence` packages prices. How do we proceed? Follow these steps
    to find out how:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to load the entity into memory with a query, modify it, and
    call `SaveChanges()` to synchronize our changes with the database. If we want
    to modify, say, just its description, a query such as the following is enough:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We need to load all the related destination packages that are not loaded by
    default. This can be done with the `Include` clause, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, we can modify the description and package prices, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: So far, we've performed queries whose unique purpose is to update the retrieved
    entities. Next, we will explain how to retrieve information that will be shown
    to the user and/or be used by complex business operations.
  prefs: []
  type: TYPE_NORMAL
- en: Returning data to the presentation layer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To keep the layers separated and to adapt queries to the data that''s actually
    needed by each *use case*, DB entities aren''t sent as they are to the presentation
    layer. Instead, the data is projected into smaller classes that contain the information
    that''s needed by the *use case*. These are implemented by the presentation layer''s
    caller method. Objects that move data from one layer to another are called **Data
    Transport Objects** (**DTOs**). As an example, let''s create a DTO containing
    the summary information that is worth showing when returning a list of packages
    to the user (we suppose that, if needed, the user can get more details by clicking
    the package they are interested in):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add a DTO to our WWTravelClubDBTest project that contains all the information
    that needs to be shown in a list of packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: We don't need to load entities in memory and then copy their data into the DTO,
    but database data can be projected directly into the DTO, thanks to the LINQ `Select`
    clause. This minimizes how much data is exchanged with the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, we can populate our DTOs with a query that checks all the packages
    that are available around the 10th of August:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: In the `Select` clause, we can also navigate to any related entities to get
    the data we need. For instance, the preceding query navigates to the related `Destination`
    entity to get the `Package` destination name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, right-click on the WWTravelClubDBTest project in the Solution Explorer
    and set it as the start project. Then, run the solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The programs stop at each `Console.ReadKey()` method, waiting for you to hit
    any key. This way, you have time to analyze the output that's produced by all
    the code snippets that we added to the `Main` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we will learn how to handle operations that can't be efficaciously mapped
    to the immediate operations in the in-memory collections that represent the database
    tables.
  prefs: []
  type: TYPE_NORMAL
- en: Issuing direct SQL commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Not all database operations can be executed efficiently by querying the database
    with LINQ and updating in-memory entities. For instance, counter increments can
    be performed more efficiently with a single SQL instruction. Moreover, some operations
    can be executed with acceptable performance if we define adequate stored procedures/SQL
    commands. In these cases, we are forced to either issue direct SQL commands to
    the database or call database stored procedures from our Entity Framework code.
    There are two possibilities: SQL statements that perform database operations but
    do not return entities, and SQL statements that do return entities.'
  prefs: []
  type: TYPE_NORMAL
- en: 'SQL commands that don''t return entities can be executed with the `DBContext`
    method, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Parameters can be referenced in the string as `{0}, {1}, ..., {n}`. Each `{m}`
    is filled with the object contained at the `m` index of the `parameters` array,
    which is converted from a .NET type into the corresponding SQL type. The method
    returns the number of affected rows.
  prefs: []
  type: TYPE_NORMAL
- en: 'SQL commands that return collections of entities must be issued through the
    `FromSqlRaw` method of the mapped collection associated with those entities:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Thus, for instance, a command that returns `Package` instances would look something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'SQL strings and parameters work like this in the `ExecuteSqlRaw` method. The
    following is a simple example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: It is good practice to put all the SQL strings in resource files and encapsulate
    all the `ExecuteSqlRaw` and `FromSqlRaw` calls inside the public methods that
    you defined in your `DBContext` subclasses, in order to keep the dependence from
    a specific database inside of your Entity Framework Core-based data layer.
  prefs: []
  type: TYPE_NORMAL
- en: Handling transactions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All the changes that are made to a `DBContext` instance are passed in a single
    transaction at the first `SaveChanges` call. However, sometimes, it is necessary
    to include queries and updates in the same transaction. In these cases, we must
    handle the transaction explicitly. Several entity Framework Core commands can
    be included in a transaction if we put them inside a `using` block associated
    with a transaction object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, `context` is an instance of our `DBContext` subclass.
    Inside of the `using` block, the transaction can be aborted and committed by calling
    its `Rollback` and `Commit` methods. Any `SaveChanges` calls that are included
    in the transaction block use the transaction they are already in, instead of creating
    new ones.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying your data layer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When your database layer is deployed in production or in staging, usually, an
    empty database already exists, so you must apply all the migrations in order to
    create all the database objects. This can be done by calling `context.Database.Migrate()`.
    The `Migrate` method applies the migrations that haven't been applied to the databases
    yet, so it may be called safely several times during the application's lifetime. `context`
    is an instance of our `DBContext` class that must be passed through a connection
    string with enough privileges to create tables and to perform all the operations
    included in our migrations. Thus, typically, this connection string is different
    from the string we will use during normal application operations.
  prefs: []
  type: TYPE_NORMAL
- en: During the deployment of a web application on Azure, we are given the opportunity
    to check migrations with a connection string we provide. We can also check migrations
    manually by calling the `context.Database.Migrate()` method when the application
    starts. This will be discussed in detail in [Chapter 13](003ee8cb-5995-4364-8772-73d73df29cf8.xhtml),
    *Presenting ASP.NET Core MVC*, which is dedicated to ASP.NET MVC Web applications.
  prefs: []
  type: TYPE_NORMAL
- en: For desktop applications, we can apply migrations during the installation of
    the application and of its subsequent updates.
  prefs: []
  type: TYPE_NORMAL
- en: At the first application installation and/or in subsequent application updates,
    we may need to populate some tables with initial data. For Web applications this
    operation can be performed at application start, while for desktop application
    this operation can be included in the installation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Database tables can be populated with Entity Framework Core commands. First,
    though, we need to verify whether the table is empty in order to avoid adding
    the same table rows several times. This can be done with the `Any()` LINQ method,
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Let's take a look at a few advanced features that Entity Framework Core has
    to share.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Entity Framework Core advanced feature – global filters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Global filters were introduced at the end of 2017\. They enable techniques such
    as soft delete and multi-tenant tables that are shared by several users, where
    each user just *sees* its records.
  prefs: []
  type: TYPE_NORMAL
- en: 'Global filters are defined with the `modelBuilder` object, which is available
    in the `DBContext OnModelCreating` method. The syntax for this method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'For instance, if we add an `IsDeleted` property to our `Package` class, we
    may soft delete a Package without removing it from the database by defining the
    following filter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'However, filters contain `DBContext` properties. Thus, for instance, if we
    add a `CurrentUserID` property to our `DBContext` subclass (whose value is set
    as soon as a `DBContext` instance is created), then we can add a filter like the
    following one to all the entities that refer to a user ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: With the preceding filter in place, the currently logged user can only access
    the documents they own (the ones that have their `UserId`). Similar techniques
    are very useful in the implementation of multi-tenant applications.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at the essentials of ORM basics and why they are
    so useful. Then, we described Entity Framework Core. In particular, we discussed
    how to configure the database mappings with class annotations and other declarations
    and commands that are included in `DBContext` subclasses.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we discussed how to automatically create and update the physical database
    structure with the help of migrations, as well as how to query and pass updates
    to the database through Entity Framework Core. Finally, we learned how to pass
    direct SQL commands and transactions through Entity Framework Core, as well as
    how to deploy a data layer based on Entity Framework Core.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter also reviewed some of the advanced features that had been introduced
    in the latest Entity Framework Core releases.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss how Entity Framework Core can be used with
    NoSQL data models and the various types of storage options that are available
    in the cloud and, in particular, in Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How does Entity Framework Core adapt to several different database engines?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How are primary keys declared in Entity Framework Core?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How is a string field's length declared in Entity Framework Core?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How are indexes declared in Entity Framework Core?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How are relations declared in Entity Framework Core?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the two important migration commands?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By default, are related entities loaded by LINQ queries?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Is it possible to return database data in a class instance that isn't a database
    entity? If yes, how?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How are migrations applied in production and staging?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: More details about migrations commands can be found at [https://docs.microsoft.com/en-US/ef/core/miscellaneous/cli/index](https://docs.microsoft.com/en-US/ef/core/miscellaneous/cli/index)
    and in the other links contained there.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More details about Entity Framework Core can be found in the official Microsoft
    documentation: [https://docs.microsoft.com/en-us/ef/core/](https://docs.microsoft.com/en-us/ef/core/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An exhaustive set of examples of complex LINQ queries can be found here: [https://code.msdn.microsoft.com/101-LINQ-Samples-3fb9811b.](https://code.msdn.microsoft.com/101-LINQ-Samples-3fb9811b)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
