["```cs\nTower mainTower = new(position: new Vector2(5, 5));\nfor (int level = 1; level <= mainTower.MaxLevel; level++)\n{\n     double upgradeCost = 100 * Math.Pow(1.5, level - 1);\n     Console.WriteLine($\"Upgrading to level {level} costs {upgradeCost} gold\");\n     if (playerGold >= upgradeCost)\n     {\n                  mainTower.Upgrade();\n                  playerGold -= upgradeCost;\n     }\n}\n```", "```cs\nstring GetTowerDamageReport(IEnumerable<Tower> towers)\n{\n      int totalDamage = 0;\n      foreach (Tower tower in towers)\n      {\n           if (tower.IsActive)\n           {\n                totalDamage += tower.Damage;\n           }\n      }\n      return $\"Active towers deal {totalDamage} total damage\";\n}\n```", "```cs\nvar pagesPerChapter = 20;\nvar totalBookPages = pagesPerChapter * 10;\n```", "```cs\nvar pagesPerChapter = 20;\nvar totalBookPages = pagesPerChapter * 10;\n```", "```cs\nint bookCount = 5;\nfor(int chapter = 1; chapter <= bookCount; chapter++)\n{\n     var wordCount = chapter * 1000;\n     Console.WriteLine($\"Chapter {chapter} contains {wordCount} words.\");\n}\n```", "```cs\ndouble averageLength = 0;\nforeach (string title in bookTitles)\n{\n    int titleLength = title.Length;\n    averageLength += titleLength;\n}\naverageLength /= bookTitles.Length;\n```", "```cs\nvar averageLength = bookTitles.Average(title => title.Length);\n```", "```cs\n// If-else statement\nstring bookStatus;\nif (pageCount > 300)\n{\n     bookStatus = \"Long read\";\n}\nelse\n{\n     bookStatus = \"Quick read\";\n}\n// Conditional operator\nstring bookStatus = pageCount > 300 ? \"Long read\" : \"Quick read\";\n```", "```cs\nstring GetPublicVideosViewsMessage(IEnumerable<Video> videos)\n{\n     int totalPublicViews = 0;\n     foreach (Video video in videos)\n     {\n          if (video.IsPublic)\n          {\n               totalPublicViews += video.Views;\n          }\n     }\n     return $\"Public videos have {totalPublicViews} views\";\n}\n```", "```cs\nstring GetPublicVideosViewsMessage(IEnumerable<Video> videos)\n{\n     var totalPublicViews = videos\n               .Where(v => v.IsPublic)\n               .Sum(v => v.Views);\n     return $\"Public videos have {totalPublicViews} views\";\n}\n```", "```cs\nFunc<Book, int> getWordCount = book => book.PageCount * 250;\n```", "```cs\nint wordCount = getWordCount(book);\n```", "```cs\nList<Publisher> publishers = GetPublishers();\nList<Book> books = GetBooks();\nvar publisherBookPairs = publishers.SelectMany(\n    publisher => books.Where(book => book.PublisherId == publisher.Id),\n    (publisher, book) => new { PublisherName = publisher.Name, BookTitle = book.Title }\n);\n```", "```cs\nbool IsBookPopular(Book book)\n{\n     if (book.AverageRating > 4.5 && book.NumberOfReviews > 1000)\n     {\n          return true;\n     }\n     return false;\n}\n```", "```cs\nbool IsBookPopular(Book book)\n{\n     return book.AverageRating > 4.5 && book.NumberOfReviews > 1000;\n}\n```", "```cs\nbool IsBookPopular(Book book) => book.AverageRating > 4.5 && book.NumberOfReviews > 1000;\n```", "```cs\nbooks.Where(book => book.AverageRating > 4.5 && book.NumberOfReviews > 1000)\n```", "```cs\nbooks.Where(book => IsBookPopular(book))\n```", "```cs\nbooks.Where(IsBookPopular)\n```", "```cs\nList<Video> videos = GetVideos();\nvideos.ForEach(delegate(Video video)\n     {\n         Console.WriteLine($\"{video.Title}: {video.Views} views\");\n     });\n```", "```cs\nList<string> GetWhales(IEnumerable<Player> players, DateTime date, decimal minSpend)\n{\n     return players\n     .Where(p => p.JoinDate > date)\n     .Where(p => p.Spend > minSpend)\n     .Select(p => p.Nickname)\n     .ToList();\n}\n```", "```cs\nList<string> GetWhales(IEnumerable<Player> players, DateTime date, decimal minSpend)\n{\n     return players\n     .Where(p => p.JoinDate > date && p.Spend > minSpend)\n     .Select(p => p.Nickname)\n     .ToList();\n}\n```", "```cs\npublic int CalculateRoyalty(Book book)\n{\n    if(book.CopiesSold < 10000)\n    {\n        return book.CopiesSold * 0.2;\n    }\n    else\n    {\n        return book.CopiesSold * 0.3;\n    }\n}\n```", "```cs\npublic int CalculateRoyalty(Book book) =>\n    book.CopiesSold < 10000\n       ? book.CopiesSold * 2\n       : book.CopiesSold * 3;\n```", "```cs\npublic bool IsVideoTrending(Video video)\n{\n     int viewThreshold = CalculateViewThreshold(video.UploadDate);\n     return video.Views > viewThreshold;\n}\nprivate int CalculateViewThreshold(DateTime uploadDate)\n{\n     int daysOld = (DateTime.Now - uploadDate).Days;\n     return 1000 * daysOld;\n}\n```", "```cs\nFunc<int, int, int> add = (a, b) => a + b;\n```", "```cs\nParameterExpression a = Expression.Parameter(typeof(int), \"a\");\nParameterExpression b = Expression.Parameter(typeof(int), \"b\");\nParameterExpression c = Expression.Parameter(typeof(int), \"c\");\nBinaryExpression addExpression = Expression.Add(a, b);\n```", "```cs\n// Define parameters\nParameterExpression a = Expression.Parameter(typeof(int), \"a\");\nParameterExpression b = Expression.Parameter(typeof(int), \"b\");\n// Define body\nBinaryExpression body = Expression.Add(a, b);\n// Combine them\nExpression<Func<int, int, int>> addExpression = Expression.Lambda<Func<int, int, int>>(body, a, b);\n```", "```cs\n// Define parameters\nParameterExpression a = Expression.Parameter(typeof(int), \"a\");\nParameterExpression b = Expression.Parameter(typeof(int), \"b\");\nParameterExpression c = Expression.Parameter(typeof(int), \"c\");\n// Define bodies for addition and multiplication\nBinaryExpression addBody = Expression.Add(a, b);\nBinaryExpression multiplyBody = Expression.Multiply(addBody, c);\n// Combine them\nExpression<Func<int, int, int, int>> combinedExpression = Expression.Lambda<Func<int, int, int, int>>(multiplyBody, a, b, c);\n```", "```cs\n// Define parameters\nParameterExpression book = Expression.Parameter(typeof(Book), \"book\");\nParameterExpression keyword = Expression.Parameter(typeof(string), \"keyword\");\nParameterExpression minPages = Expression.Parameter(typeof(int), \"minPages\");\nParameterExpression minRating = Expression.Parameter(typeof(double), \"minRating\");\n// Define body\nMethodCallExpression titleContainsKeyword = Expression.Call(\n    Expression.Property(book, nameof(Book.Title)),\n    typeof(string).GetMethod(\"Contains\", new[] { typeof(string) }),\n    keyword\n);\nBinaryExpression pagesGreaterThanMinPages = Expression.GreaterThan(\n    Expression.Property(book, nameof(Book.Pages)),\n    minPages\n);\nBinaryExpression ratingGreaterThanMinRating = Expression.GreaterThan(\n    Expression.Property(book, nameof(Book.Rating)),\n    minRating\n);\n// Combine expressions with 'AND' logical operator\nBinaryExpression andExpression = Expression.AndAlso(\n    Expression.AndAlso(titleContainsKeyword, pagesGreaterThanMinPages),\n    ratingGreaterThanMinRating\n);\n// Combine parameters and body into a lambda expression\nExpression<Func<Book, string, int, double, bool>> filterExpression = Expression.Lambda<Func<Book, string, int, double, bool>>(\n    andExpression,\n    book, keyword, minPages, minRating\n);\n```", "```cs\nvar filter = filterExpression.Compile();\nvar popularBooks = books\n    .Where(book => filter(book, keyword, minPages, minRating))\n    .ToList();\n```", "```cs\nvar youngCustomers = dbContext.Customers\n    .Where(c => c.Age < 30)\n    .Select(c => new { c.Name, c.Age });\n```", "```cs\n    ParameterExpression x = Expression.Parameter(typeof(int), \"x\");\n    ParameterExpression y = Expression.Parameter(typeof(int), \"y\");\n    ```", "```cs\n    BinaryExpression body = Expression.Multiply(x, y);\n    ```", "```cs\n    Expression<Func<int, int, int>> multiplyExpression = Expression.Lambda<Func<int, int, int>>(body, x, y);\n    ```", "```cs\n    Func<int, int, int> multiply = multiplyExpression.Compile();\n    ```", "```cs\n    int result = multiply(6, 7); // This returns 42\n    ```", "```cs\nTower mainTower = new(position: new Vector2(5, 5));\nfor (int level = 1; level <= mainTower.MaxLevel; level++)\n{\n     double upgradeCost = 100 * Math.Pow(1.5, level - 1);\n     Console.WriteLine($\"Upgrading to level {level} costs {upgradeCost} gold\");\n     if (playerGold >= upgradeCost)\n     {\n                  mainTower.Upgrade();\n                  playerGold -= upgradeCost;\n     }\n}\n```", "```cs\nstring GetTowerDamageReport(IEnumerable<Tower> towers)\n{\n      int totalDamage = 0;\n      foreach (Tower tower in towers)\n      {\n           if (tower.IsActive)\n           {\n                totalDamage += tower.Damage;\n           }\n      }\n      return $\"Active towers deal {totalDamage} total damage\";\n}\n```", "```cs\nTower mainTower = new(position: new Vector2(5, 5));\nfor (int level = 1; level <= mainTower.MaxLevel; level++)\n{\n     double upgradeCost = 100 * Math.Pow(1.5, level - 1);\n     Console.WriteLine($\"Upgrading to level {level} costs {upgradeCost} gold\");\n     if (playerGold >= upgradeCost)\n     {\n                  mainTower.Upgrade();\n                  playerGold -= upgradeCost;\n     }\n}\n```", "```cs\nstring GetTowerDamageReport(IEnumerable<Tower> towers) =>\n     $\"Active towers deal {towers.Where(t => t.IsActive).Sum(t => t.Damage)} total damage\";\n```", "```cs\nParameterExpression baseDamage = Expression.Parameter(typeof(int), \"baseDamage\");\nParameterExpression level = Expression.Parameter(typeof(int), \"level\");\nBinaryExpression multiply = Expression.Multiply(baseDamage, level);\nExpression<Func<int, int, int>> damageCalc = Expression.Lambda<Func<int, int, int>>(multiply, baseDamage, level);\n// Compile the expression\nFunc<int, int, int> calculateDamage = damageCalc.Compile();\n// Calculate tower damage\nint towerDamage = calculateDamage(10, 5);\nConsole.WriteLine($\"Tower damage: {towerDamage}\");\n```"]