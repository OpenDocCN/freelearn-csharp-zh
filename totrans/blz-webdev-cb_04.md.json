["```cs\n    @typeparam T\n    ```", "```cs\n    @code {\n        [Parameter, EditorRequired]\n        public List<T> Data { get; set; }\n        [Parameter, EditorRequired]\n        public RenderFragment Header { get; set; }\n        [Parameter, EditorRequired]\n        public RenderFragment<T> Row { get; set; }\n    }\n    ```", "```cs\n    <thead>\n        @Header\n    </thead>\n    ```", "```cs\n    <tbody>\n        @foreach (var element in Data)\n        {\n            @Row(element)\n        }\n    </tbody>\n    ```", "```cs\n    @page \"/ch04r01\"\n    <Grid Data=\"@Tickets.All\">\n        @* we will construct the grid body next @*\n    </Grid>\n    ```", "```cs\n    <Header>\n        <tr>\n            <td>Tariff</td>\n            <td>Price</td>\n        </tr>\n    </Header>\n    ```", "```cs\n    <Row>\n        <tr>\n            <td>@context.Tariff</td>\n            <td>@context.Price</td>\n        </tr>\n    </Row>\n    ```", "```cs\n<Grid Tickets=\"@Tickets.All\">\n    @* ... *@\n    <Row>\n        <tr @key=\"context.Id\">\n            <td>@context.Tariff</td>\n            <td>@context.Price</td>\n        </tr>\n    </Row>\n</Grid>\n```", "```cs\n    public class ColumnViewModel<T>\n    {\n        public string Label { get; init; }\n        public RenderFragment<T> Template { get; init; }\n        public EventCallback OnSort { get; init; }\n    }\n    ```", "```cs\n    @typeparam T\n    @attribute [CascadingTypeParameter(nameof(T))]\n    ```", "```cs\n    @code {\n        [Parameter, EditorRequired]\n        public List<T> Data { get; set; }\n        [Parameter, EditorRequired]\n        public RenderFragment ChildContent { get; set; }\n    }\n    ```", "```cs\n    protected List<ColumnViewModel<T>> Columns = [];\n    public void AddColumn(ColumnViewModel<T> column)\n        => Columns.Add(column);\n    ```", "```cs\n    protected override void OnAfterRender(\n        bool firstRender)\n    {\n        if (firstRender) StateHasChanged();\n    }\n    ```", "```cs\n    <thead>\n        <tr>\n            @foreach (var column in Columns)\n            {\n                <th @onclick=\"@column.OnSort\">\n                    @column.Label\n                </th>\n            }\n        </tr>\n    </thead>\n    ```", "```cs\n    <tbody>\n        @foreach (var element in Data)\n        {\n            <tr>\n                @foreach (var column in Columns)\n                {\n                    <td>@column.Template(element)</td>\n                }\n            </tr>\n        }\n    </tbody>\n    ```", "```cs\n    <CascadingValue Value=\"this\">\n        @ChildContent\n    </CascadingValue>\n    ```", "```cs\n    @typeparam T\n    @code {\n        [CascadingParameter]\n        public Grid<T> Grid { get; set; }\n        [Parameter, EditorRequired]\n        public string Label { get; set; }\n        [Parameter, EditorRequired]\n        public RenderFragment<T> ChildContent { get; set; }\n        [Parameter]\n        public EventCallback OnSort { get; set; }\n    }\n    ```", "```cs\n    protected override void OnInitialized()\n    {\n        var model = new ColumnViewModel<T>\n        {\n            Label = Label,\n            Template = ChildContent,\n            OnSort = OnSort\n        };\n        Grid.AddColumn(model);\n    }\n    ```", "```cs\n    @code {\n        private void Sort(string prop)\n            => Console.WriteLine($\"Sorted by {prop}!\");\n    }\n    ```", "```cs\n    <Column OnSort=\"@(() => Sort(nameof(Ticket.Tariff)))\"\n            Label=\"Tariff\">\n        @context.Tariff\n    </Column>\n    <Column OnSort=\"@(() => Sort(nameof(Ticket.Price)))\"\n            Label=\"Price\">\n        @context.Price\n    </Column>\n    ```", "```cs\n    @rendermode InteractiveWebAssembly\n    ```", "```cs\n<tr @onclick=\"@ShowTicketDetails\">\n    <td>@ticket.Tariff</td>\n    <td @onclick=\"@AddToCart\"\n        @onclick:stopPropagation>\n        @ticket.Price\n    </td>\n</tr>\n```", "```cs\n    public record PaginateEventArgs(int Page, int Size);\n    ```", "```cs\n    [Parameter, EditorRequired]\n    public EventCallback<PaginateEventArgs>\n        Paginate { get; set; }\n    [Parameter, EditorRequired]\n    public int DataSize { get; set; }\n    ```", "```cs\n    protected int TotalPages,\n        CurrentPage = 1, PageSize = 5;\n    ```", "```cs\n    protected override void OnInitialized()\n        => TotalPages =\n            (DataSize + PageSize - 1)\n            / PageSize;\n    ```", "```cs\n    private Task LoadAsync()\n    {\n        var state = new PaginateEventArgs(\n            CurrentPage,\n            PageSize\n        );\n        return Paginate.InvokeAsync(state);\n    }\n    ```", "```cs\n    private async Task NextAsync()\n    {\n        if (CurrentPage == TotalPages) return;\n        CurrentPage++;\n        await LoadAsync();\n    }\n    ```", "```cs\n    private async Task PreviousAsync()\n    {\n        if (CurrentPage == 1) return;\n        CurrentPage--;\n        await LoadAsync();\n    }\n    ```", "```cs\n    protected override async Task\n        OnAfterRenderAsync(bool firstRender)\n    {\n        if (firstRender) await LoadAsync();\n    }\n    ```", "```cs\n    <div class=\"d-flex\">\n        <button @onclick=\"@PreviousAsync\">\n            Previous\n        </button>\n        <input disabled\n               class=\"text-center\"\n               value=\"@CurrentPage\" />\n        <button @onclick=\"@NextAsync\">\n            Next\n        </button>\n    </div>\n    ```", "```cs\n    protected IEnumerable<T> Set = [];\n    ```", "```cs\n    public Task LoadAsync(PaginateEventArgs args)\n    {\n        Set = Data\n            .Skip((args.Page - 1) * args.Size)\n            .Take(args.Size);\n        return Task.CompletedTask;\n    }\n    ```", "```cs\n    <tbody>\n        @foreach (var element in Set)\n        {\n            @* nested loop through Columns *@\n        }\n    </tbody>\n    ```", "```cs\n    <hr />\n    <Paginator Paginate=\"@LoadAsync\"\n               DataSize=\"@Data.Count\"/>\n    ```", "```cs\n    public Func<T, object> Property { get; init; }\n    ```", "```cs\n    [Parameter]\n    public Func<T, object> Property { get; set; }\n    ```", "```cs\n    var model = new ColumnViewModel<T>\n    {\n        Label = Label,\n        Template = ChildContent,\n        Property = Property\n    };\n    ```", "```cs\n    private string _currentSortColumn;\n    private bool _isAsc;\n    ```", "```cs\n    protected Paginator PaginatorRef;\n    ```", "```cs\n    public Task SortAsync(ColumnViewModel<T> column)\n    {\n        if (_currentSortColumn == column.Label)\n            _isAsc = !isAsc;\n        else\n            _isAsc = true;\n        Comparison<T> comparer = (left, right) =>\n        {\n            var result = Comparer<object>.Default\n                .Compare(column.Property(left),\n                    column.Property(right));\n            return _isAsc ? result : -result;\n        };\n        Data.Sort(comparer);\n        _currentSortColumn = column.Label;\n        return PaginatorRef.LoadAsync();\n    }\n    ```", "```cs\n    <th @onclick=\"@(() => SortAsync(column))\">\n        @column.Label\n    </th>\n    ```", "```cs\n    <Paginator @ref=\"@PaginatorRef\"\n               Paginate=\"@LoadAsync\"\n               DataSize=\"@Data.Count\" />\n    ```", "```cs\n    <Column Property=\"@(it => it.Tariff)\"\n            Label=\"Tariff\">\n        @context.Tariff\n    </Column>\n    <Column Property=\"@(it => it.Price)\"\n            Label=\"Price\">\n        @context.Price\n    </Column>\n    ```", "```cs\n    builder.Services.AddScoped<TicketsApi>();\n    ```", "```cs\n    @typeparam T\n    ```", "```cs\n    [Parameter, EditorRequired]\n    public Func<int, int, CancellationToken,\n        Task<(int, List<T>)>> Provider { get; set; }\n    [Parameter, EditorRequired]\n    public RenderFragment Header { get; set; }\n    [Parameter, EditorRequired]\n    public RenderFragment<T> Row { get; set; }\n    ```", "```cs\n    private async ValueTask<ItemsProviderResult<T>>\n        LoadAsync(ItemsProviderRequest request)\n    {\n        (var total, var data) = await Provider\n            .Invoke(request.StartIndex, request.Count,\n                    request.CancellationToken);\n        return new(data, total);\n    }\n    ```", "```cs\n    <table class=\"table table-bordered\">\n        <thead>\n            @Header\n        </thead>\n        <tbody>\n            <Virtualize ItemsProvider=\"@LoadAsync\">\n                @Row(context)\n            </Virtualize>\n        </tbody>\n    </table>\n    ```", "```cs\n    @page \"/ch04r05\"\n    @rendermode InteractiveWebAssembly\n    @inject TicketsApi Tickets\n    ```", "```cs\n    <Grid Provider=\"@Service.GetAsync\">\n        <Header>\n            <tr>\n                <td>Id</td>\n                <td>Tariff</td>\n                <td>Price</td>\n            </tr>\n        </Header>\n        <Row>\n            <tr>\n                <td>@context.Id</td>\n                <td>@context.Tariff</td>\n                <td>@context.Price</td>\n            </tr>\n        </Row>\n    </Grid>\n    ```", "```cs\n    builder.Services.AddScoped<TicketsApi>();\n    ```", "```cs\n    <ItemGroup>\n      <PackageReference\n          Include=\n              \"Microsoft.AspNetCore.Components.QuickGrid\"\n          Version=\"8.0.2\" />\n    </ItemGroup>\n    ```", "```cs\n    @page \"/ch04r06\"\n    @using Microsoft.AspNetCore.Components.QuickGrid\n    @rendermode InteractiveWebAssembly\n    @inject TicketsApi Tickets\n    ```", "```cs\n    @code {\n        protected PaginationState Pagination = new()\n        {\n            ItemsPerPage = 5\n        };\n    }\n    ```", "```cs\n    <QuickGrid Class=\"w-100 table table-bordered\"\n               Items=\"@Tickets.Get()\"\n               Pagination=\"@Pagination\">\n        <PropertyColumn Property=\"@(x => x.Tariff)\"\n                        Sortable=\"true\" />\n        <PropertyColumn Property=\"@(x => x.Price)\"\n                        Sortable=\"true\" Format=\"0.00\" />\n    </QuickGrid>\n    <Paginator State=\"@Pagination\" />\n    ```"]