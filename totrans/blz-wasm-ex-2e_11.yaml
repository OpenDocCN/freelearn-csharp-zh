- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Building a Task Manager Using ASP.NET Web API
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 ASP.NET Web API 构建任务管理器
- en: Most websites are not islands standing alone. They need a server. They rely
    on a server for both data access and security, among other services.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数网站都不是孤岛独立存在的。它们需要一个服务器。它们在数据访问和安全性等众多服务上依赖于服务器。
- en: In this chapter, we will learn how to create a hosted Blazor WebAssembly app.
    We will learn how to use the **HttpClient** service to call web APIs, and we will
    also learn how to use **JSON helper methods** to make requests to a web API to
    read, add, edit, and delete data.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何创建一个托管的 Blazor WebAssembly 应用程序。我们将学习如何使用 **HttpClient** 服务调用 Web
    API，并且我们还将学习如何使用 **JSON 辅助方法** 向 Web API 发送请求以读取、添加、编辑和删除数据。
- en: The project that we create in this chapter will be a **task manager**. We will
    use a multi-project architecture to separate the Blazor WebAssembly app from the
    ASP.NET Web API endpoints. The hosted Blazor WebAssembly app will use JSON helper
    methods to read, add, edit, and delete tasks that are stored in a SQL Server database.
    An ASP.NET core project will host the Blazor WebAssembly app and provide the ASP.NET
    Web API endpoints. A third project will be used to define the classes that are
    shared by the other two projects.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中我们将创建的项目将是一个 **任务管理器**。我们将使用多项目架构将 Blazor WebAssembly 应用程序与 ASP.NET Web API
    端点分离。托管的 Blazor WebAssembly 应用程序将使用 JSON 辅助方法读取、添加、编辑和删除存储在 SQL Server 数据库中的任务。一个
    ASP.NET 核心项目将托管 Blazor WebAssembly 应用程序并提供 ASP.NET Web API 端点。第三个项目将用于定义其他两个项目共享的类。
- en: Islands stand alone.
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 孤岛独立存在。
- en: ''
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Most websites are not islands -
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 大多数网站都不是孤岛 -
- en: ''
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: they need a server.
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 它们需要一个服务器。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下主题：
- en: Understanding hosted applications
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解托管应用程序
- en: Using the `HttpClient` service
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `HttpClient` 服务
- en: Using JSON helper methods
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 JSON 辅助方法
- en: Creating the task manager project
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建任务管理器项目
- en: Technical requirements
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To complete this project, you need to have Visual Studio 2022 installed on your
    PC. For instructions on how to install the free Community Edition of Visual Studio
    2022, refer to *Chapter 1*, *Introduction to Blazor WebAssembly*. You will also
    need access to a version of SQL Server. For instructions on how to install the
    free edition of SQL Server 2022, refer to *Chapter 1*, *Introduction to Blazor
    WebAssembly*.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成此项目，您需要在您的电脑上安装 Visual Studio 2022。有关如何安装 Visual Studio 2022 的免费社区版的说明，请参阅
    *第 1 章*，*Blazor WebAssembly 简介*。您还需要访问 SQL Server 的某个版本。有关如何安装 SQL Server 2022
    的免费版的说明，请参阅 *第 1 章*，*Blazor WebAssembly 简介*。
- en: 'The source code for this chapter is available in the following GitHub repository:
    [https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter11](https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter11).'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可在以下 GitHub 仓库中找到：[https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter11](https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter11)。
- en: 'The Code in Action video is available here: [https://packt.link/Ch11](https://packt.link/Ch11).'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 代码实战视频在此处可用：[https://packt.link/Ch11](https://packt.link/Ch11)。
- en: Understanding hosted applications
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解托管应用程序
- en: When we create a new Blazor WebAssembly project by using Microsoft’s **Blazor
    WebAssembly App Empty** project template, we have the option to create a hosted
    Blazor WebAssembly app by checking the **ASP.NET Core Hosted** checkbox.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用 Microsoft 的 **Blazor WebAssembly App Empty** 项目模板创建一个新的 Blazor WebAssembly
    项目时，我们可以通过勾选 **ASP.NET Core 托管** 复选框来创建一个托管的 Blazor WebAssembly 应用程序。
- en: 'The following screenshot highlights the **ASP.NET Core Hosted** checkbox:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图突出了 **ASP.NET Core 托管** 复选框：
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18471_11_01.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序  自动生成的描述](img/B18471_11_01.png)'
- en: 'Figure 11.1: Blazor WebAssembly App Empty project template'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.1：Blazor WebAssembly App Empty 项目模板
- en: 'The hosted Blazor WebAssembly app, created by the **Blazor WebAssembly App
    Empty** project template, includes the following three projects:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 由 **Blazor WebAssembly App Empty** 项目模板创建的托管 Blazor WebAssembly 应用程序包括以下三个项目：
- en: Client project
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端项目
- en: Server project
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器项目
- en: Shared project
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 共享项目
- en: Client project
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 客户端项目
- en: The client project is a client-side Blazor WebAssembly project. It is almost
    identical to the standalone Blazor WebAssembly app we created in *Chapter 2*,
    *Building Your First Blazor WebAssembly Application*. The only big difference
    is in how the data is accessed. In the client project, the sample data is accessed
    from the server project using Web API endpoints instead of a static file. Since
    the server project is both hosting the client project and serving the data via
    ASP.NET Web API, it won’t have any CORS problems.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端项目是一个客户端 Blazor WebAssembly 项目。它与我们在 *第2章*，*构建您的第一个 Blazor WebAssembly 应用程序*
    中创建的独立 Blazor WebAssembly 应用几乎相同。唯一的重大区别在于数据访问方式。在客户端项目中，示例数据是通过 Web API 端点从服务器项目访问的，而不是静态文件。由于服务器项目既托管客户端项目，又通过
    ASP.NET Web API 提供数据服务，因此它不会遇到任何 CORS 问题。
- en: Server project
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务器项目
- en: The server project is an ASP.NET Core project. This project is responsible for
    serving the client application. In addition to hosting the client app, the server
    project provides the Web API endpoints.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器项目是一个 ASP.NET Core 项目。该项目负责提供客户端应用程序。除了托管客户端应用程序外，服务器项目还提供了 Web API 端点。
- en: '**IMPORTANT NOTE**'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: In this scenario, since the ASP.NET Core project is serving the Blazor WebAssembly
    app, it must be set as the startup project in the solution.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，由于 ASP.NET Core 项目正在提供 Blazor WebAssembly 应用，因此它必须在解决方案中设置为启动项目。
- en: Shared project
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 共享项目
- en: The shared project is also an ASP.NET Core project. It contains application
    logic that is shared between the other two projects. In the past, we had to write
    validation code on both the client and the server. We had to write JavaScript
    validation code for the client and C# validation code for the server. Not surprisingly,
    sometimes the two validation models did not match. The shared project solves that
    problem since all the validation code is maintained in a single location using
    a single language.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 共享项目也是一个 ASP.NET Core 项目。它包含在另外两个项目之间共享的应用程序逻辑。在过去，我们不得不在客户端和服务器上编写验证代码。我们必须为客户端编写
    JavaScript 验证代码，为服务器编写 C# 验证代码。不出所料，有时这两个验证模型并不匹配。共享项目解决了这个问题，因为所有验证代码都使用单一语言在单个位置维护。
- en: By using a multi-project solution, we can create a more robust application.
    The shared project defines the classes, and the client project uses the `HttpClient`
    service to make requests for data from the server project.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用多项目解决方案，我们可以创建一个更健壮的应用程序。共享项目定义了类，而客户端项目使用 `HttpClient` 服务从服务器项目请求数据。
- en: Using the HttpClient service
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 HttpClient 服务
- en: 'HTTP is not just for serving web pages – it can also be used for serving data.
    These are the HTTP methods that we will be using in this chapter:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP 不仅用于提供网页服务，还可以用于提供数据。以下是本章我们将使用的 HTTP 方法：
- en: '`GET`: This method is used to request one or more resources.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GET`：此方法用于请求一个或多个资源。'
- en: '`POST`: This method is used to create a new resource.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`POST`：此方法用于创建新的资源。'
- en: '`PUT`: This method is used to update the specified resource.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PUT`：此方法用于更新指定的资源。'
- en: '`DELETE`: This method is used to delete the specified resource.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DELETE`：此方法用于删除指定的资源。'
- en: 'The `HttpClient` service is a preconfigured service for making HTTP requests
    from a Blazor WebAssembly app to a server. It is configured in the `Client/Program.cs`
    file. The following code is used to configure it:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`HttpClient` 服务是一个预配置的服务，用于从 Blazor WebAssembly 应用向服务器发送 HTTP 请求。它在 `Client/Program.cs`
    文件中配置。以下代码用于配置它：'
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `HttpClient` service is added to a page using **dependency injection** (**DI**).
    To use the `HttpClient` service in a component, you must inject it by either using
    the `@inject` directive or the `Inject` attribute. For more information on DI,
    see *Chapter 7*, *Building a Shopping Cart Using Application State*.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 **依赖注入**（**DI**）将 `HttpClient` 服务添加到页面中。要在组件中使用 `HttpClient` 服务，您必须通过使用 `@inject`
    指令或 `Inject` 属性来注入它。有关依赖注入的更多信息，请参阅 *第7章*，*使用应用程序状态构建购物车*。
- en: 'The following code demonstrates the two different ways to inject the `HttpClient`
    service into a component:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码演示了将 `HttpClient` 服务注入到组件中的两种不同方法：
- en: '[PRE1]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The first example is used in `.razor` files while the second example is used
    in `.razor.cs` files. After we have injected the `HttpClient` service into a component,
    we can use the JSON helper methods to send requests to a Web API.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个示例用于 `.razor` 文件，而第二个示例用于 `.razor.cs` 文件。在我们将 `HttpClient` 服务注入到组件后，我们可以使用
    JSON 辅助方法向 Web API 发送请求。
- en: Using JSON helper methods
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 JSON 辅助方法
- en: There are three JSON helper methods. There is one for reading data, one for
    adding data, and one for updating data. Since there is not one for deleting data,
    we will use the `HttpClient.DeleteAsync` method to delete data.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种 JSON 辅助方法。一个用于读取数据，一个用于添加数据，一个用于更新数据。由于没有用于删除数据的方法，我们将使用 `HttpClient.DeleteAsync`
    方法来删除数据。
- en: 'The following table shows the relationship between the JSON helper methods
    and the HTTP methods:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格显示了 JSON 辅助方法与 HTTP 方法之间的关系：
- en: '| JSON Helper Method | HTTP Method | Action |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| JSON 辅助方法 | HTTP 方法 | 操作 |'
- en: '| `GetFromJsonAsync` | GET | Read |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `GetFromJsonAsync` | GET | 读取 |'
- en: '| `PostAsJsonAsync` | POST | Create |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `PostAsJsonAsync` | POST | 创建 |'
- en: '| `PutAsJsonAsync` | PUT | Update |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `PutAsJsonAsync` | PUT | 更新 |'
- en: '| `HttpClient.DeleteAsync` | DELETE | Delete |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `HttpClient.DeleteAsync` | DELETE | 删除 |'
- en: 'Table 11.1: Relationship between the HTTP methods and the JSON helper methods'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 表 11.1：HTTP 方法与 JSON 辅助方法之间的关系
- en: '**TIP**'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: You can also use the `HttpClient` service and JSON helper methods to call external
    web API endpoints. By way of an example, see *Chapter 6*, *Building a Weather
    App as a Progressive Web App (PWA)*.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用 `HttpClient` 服务和 JSON 辅助方法来调用外部 Web API 端点。例如，请参阅 *第 6 章*，*构建作为渐进式 Web
    应用 (PWA) 的天气应用*。
- en: 'In the following code examples, we will be referring to the `TaskItem` class.
    This is the `TaskItem` class:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码示例中，我们将参考 `TaskItem` 类。这是 `TaskItem` 类：
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: GetFromJsonAsync
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GetFromJsonAsync
- en: 'The `GetFromJsonAsync` method is used to read data. It does the following:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`GetFromJsonAsync` 方法用于读取数据。它执行以下操作：'
- en: Sends an `HTTP GET` request to the indicated URI.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向指定的 URI 发送 `HTTP GET` 请求。
- en: Deserializes the JSON response body to create the indicated object.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 JSON 响应体反序列化为指定的对象。
- en: 'The following code uses the `GetFromJsonAsync` method to return a collection
    of `TaskItem` objects:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码使用 `GetFromJsonAsync` 方法返回一个 `TaskItem` 对象的集合：
- en: '[PRE3]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the preceding code, the type of object returned by the `GetFromJsonAsync`
    method is `IList<TaskItem>.`
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，`GetFromJsonAsync` 方法返回的对象类型是 `IList<TaskItem>`。
- en: 'We can also use the `GetFromJsonAsync` method to get an individual object.
    The following code uses the `GetFromJsonAsync` method to return a single `TaskItem`
    object where `id` is the unique identifier of the object:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用 `GetFromJsonAsync` 方法来获取单个对象。以下代码使用 `GetFromJsonAsync` 方法返回一个单个 `TaskItem`
    对象，其中 `id` 是对象的唯一标识符：
- en: '[PRE4]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the preceding code, the type of object returned by the `GetFromJsonAsync`
    method is `TaskItem`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，`GetFromJsonAsync` 方法返回的对象类型是 `TaskItem`。
- en: PostAsJsonAsync
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PostAsJsonAsync
- en: 'The `PostAsJsonAsync` method is used to add data. It does the following:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`PostAsJsonAsync` 方法用于添加数据。它执行以下操作：'
- en: Sends an `HTTP POST` request to the indicated URI. The request includes the
    JSON-encoded content used to create the new data.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向指定的 URI 发送 `HTTP POST` 请求。请求包含用于创建新数据的 JSON 编码内容。
- en: Returns an `HttpResponseMessage` instance that includes both a status code and
    data.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回一个包含状态码和数据的 `HttpResponseMessage` 实例。
- en: 'The following code creates a new `TaskItem` object by using the `PostAsJsonAsync`
    method:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码通过使用 `PostAsJsonAsync` 方法创建一个新的 `TaskItem` 对象：
- en: '[PRE5]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the preceding code, the new `TaskItem` is deserialized from the response
    using the `ReadFromJsonAsync` method if the HTTP response returns a success status
    code.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，如果 HTTP 响应返回成功状态码，则使用 `ReadFromJsonAsync` 方法将新的 `TaskItem` 对象反序列化。
- en: '**TIP**'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: The `ReadFromJsonAsync` method returns deserialized content. It is included
    in the `System.Text.Json` library provided by Microsoft. The `System.Text.Json`
    library includes high-performance, low-allocating methods for serializing and
    deserializing JSON text to and from objects.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`ReadFromJsonAsync` 方法返回反序列化后的内容。它包含在由微软提供的 `System.Text.Json` 库中。`System.Text.Json`
    库包括用于将 JSON 文本序列化和反序列化到对象的高性能、低分配方法。'
- en: PutAsJsonAsync
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PutAsJsonAsync
- en: 'The `PutAsJsonAsync` method is used to update data. It does the following:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`PutAsJsonAsync` 方法用于更新数据。它执行以下操作：'
- en: Sends an `HTTP PUT` request to the indicated URI. The request includes the JSON-encoded
    content used to update the data.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向指定的 URI 发送 `HTTP PUT` 请求。请求包含用于更新数据的 JSON 编码内容。
- en: Returns an `HttpResponseMessage` instance that includes both a status code and
    data.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回一个包含状态码和数据的 `HttpResponseMessage` 实例。
- en: 'The following code updates an existing `TaskItem` object by using the `PutAsJsonAsync`
    method:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码使用 `PutAsJsonAsync` 方法通过更新现有的 `TaskItem` 对象：
- en: '[PRE6]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the preceding code, the updated `TaskItem` is deserialized from the response
    using the `ReadFromJsonAsync` method if the HTTP response returns a success status
    code.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，如果 HTTP 响应返回成功状态码，则使用 `ReadFromJsonAsync` 方法将更新的 `TaskItem` 从响应反序列化。
- en: HttpClient.DeleteAsync
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HttpClient.DeleteAsync
- en: 'The `HttpClient.DeleteAsync` method is used to delete data. It does the following:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`HttpClient.DeleteAsync` 方法用于删除数据。它执行以下操作：'
- en: Sends an `HTTP DELETE` request to the indicated URI.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向指定的 URI 发送 `HTTP DELETE` 请求。
- en: Returns an `HttpResponseMessage` instance that includes both a status code and
    data.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回一个包含状态码和数据的 `HttpResponseMessage` 实例。
- en: 'The following code deletes an existing `TaskItem` object by using the `Http.DeleteAsync`
    method:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码使用 `Http.DeleteAsync` 方法删除现有的 `TaskItem` 对象：
- en: '[PRE7]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the preceding code, the `TaskItem` with the indicated `TaskItemId` is deleted.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，删除了具有指定 `TaskItemId` 的 `TaskItem`。
- en: The JSON helper methods make it easy to consume web APIs. We use them to read,
    create, and update data. We use `HttpClient.DeleteAsync` to delete data.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: JSON 辅助方法使得消费 Web API 变得容易。我们使用它们来读取、创建和更新数据。我们使用 `HttpClient.DeleteAsync` 来删除数据。
- en: Now, let’s get a quick overview of the project that we are going to build in
    this chapter.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们快速了解一下本章将要构建的项目。
- en: Creating the TaskManager project
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 TaskManager 项目
- en: In this chapter, we will build a hosted Blazor WebAssembly app to manage tasks.
    We will be able to view, add, edit, and delete tasks. The tasks will be stored
    in a SQL Server database.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将构建一个托管 Blazor WebAssembly 应用程序来管理任务。我们将能够查看、添加、编辑和删除任务。任务将存储在 SQL Server
    数据库中。
- en: 'This is a screenshot of the completed application:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这是完成的应用程序的截图：
- en: '![Chart  Description automatically generated with medium confidence](img/B18471_11_02.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图表  自动生成的描述，中等置信度](img/B18471_11_02.png)'
- en: 'Figure 11.2: TaskManager project'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.2：任务管理器项目
- en: The build time for this project is approximately 60 minutes.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 此项目的构建时间大约为 60 分钟。
- en: Project overview
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目概述
- en: The `TaskManager` project will be created by using Microsoft’s **Blazor WebAssembly
    App Empty** project template to create a hosted Blazor WebAssembly project. First,
    we will add both a `TaskItem` class and a `TaskItemsController` class. Next, we
    will use `Entity Framework` migrations to create a database in SQL Server. We
    will add `Bootstrap` and `Bootstrap icons` to our project to style our UI. Finally,
    we will demonstrate how to read data, update data, delete data, and add data using
    the `HttpClient` service.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 将使用 Microsoft 的 **Blazor WebAssembly App Empty** 项目模板创建 `TaskManager` 项目，以创建一个托管
    Blazor WebAssembly 项目。首先，我们将添加一个 `TaskItem` 类和一个 `TaskItemsController` 类。接下来，我们将使用
    `Entity Framework` 迁移在 SQL Server 中创建数据库。我们将向项目中添加 `Bootstrap` 和 `Bootstrap icons`
    以样式化我们的 UI。最后，我们将演示如何使用 `HttpClient` 服务读取数据、更新数据、删除数据和添加数据。
- en: Create the TaskManager project
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 TaskManager 项目
- en: 'We need to create a new hosted Blazor WebAssembly app. We do this as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建一个新的托管 Blazor WebAssembly 应用程序。我们这样做如下：
- en: Open Visual Studio 2022.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio 2022。
- en: Click the **Create a new project** button.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **创建新项目** 按钮。
- en: Press *Alt*+*S* to enter the **Search for templates** textbox.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下 *Alt*+*S* 进入 **搜索模板** 文本框。
- en: Enter `Blazor` and press the *Enter* key.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 `Blazor` 并按 *Enter* 键。
- en: 'The following screenshot shows the **Blazor WebAssembly App Empty** project
    template:'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图显示了 **Blazor WebAssembly App Empty** 项目模板：
- en: '![Graphical user interface, text, application, chat or text message  Description
    automatically generated](img/B18471_11_03.png)'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，聊天或文本消息  自动生成的描述](img/B18471_11_03.png)'
- en: 'Figure 11.3: Blazor WebAssembly App Empty project template'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.3：Blazor WebAssembly App Empty 项目模板
- en: Select the **Blazor WebAssembly App Empty** project template and click the **Next**
    button.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **Blazor WebAssembly App Empty** 项目模板并点击 **下一步** 按钮。
- en: Enter `TaskManager` in the **Project name** textbox and click the **Next** button.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **项目名称** 文本框中输入 `TaskManager` 并点击 **下一步** 按钮。
- en: 'This is a screenshot of the dialog used to configure our new project:'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是配置我们新项目的对话框截图：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_11_04.png)'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B18471_11_04.png)'
- en: 'Figure 11.4: Configure your new project dialog'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.4：配置新项目对话框
- en: '**TIP**'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**提示**'
- en: In the preceding example, we placed the `TaskManager` project into the `E:/Blazor`
    folder. However, the location of this project is not important.
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们将 `TaskManager` 项目放置在 `E:/Blazor` 文件夹中。然而，此项目的位置并不重要。
- en: Select **.NET 7.0** as the version of the `Framework` to use.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **.NET 7.0** 作为要使用的 `Framework` 版本。
- en: Check the **Configure for HTTPS** checkbox.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 勾选**配置为 HTTPS**复选框。
- en: Check the **ASP.NET Core Hosted** checkbox.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 勾选**ASP.NET Core 托管**复选框。
- en: Uncheck the **Progressive Web Application** checkbox.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消勾选**渐进式Web应用**复选框。
- en: 'This is a screenshot of the dialog used to collect additional information about
    our new project:'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是用于收集有关我们新项目附加信息的对话框截图：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_11_05.png)'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B18471_11_05.png)'
- en: 'Figure 11.5: Additional information dialog'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图11.5：附加信息对话框
- en: Click the **Create** button.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建**按钮。
- en: We have created a hosted **TaskManager** Blazor WebAssembly project.
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们已创建一个托管的**TaskManager** Blazor WebAssembly项目。
- en: 'The **TaskManager** solution comprises three different projects. The following
    screenshot of Visual Studio’s **Solution Explorer** shows the three projects that
    are in the solution:'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**TaskManager**解决方案包含三个不同的项目。以下Visual Studio的**解决方案资源管理器**截图显示了解决方案中的三个项目：'
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18471_11_06.png)'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序  自动生成的描述](img/B18471_11_06.png)'
- en: 'Figure 11.6: Solution Explorer'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图11.6：解决方案资源管理器
- en: Right-click the **TaskManager.Server** project and select the **Set as Startup
    Project** option from the menu.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击**TaskManager.Server**项目，从菜单中选择**设置为启动项目**选项。
- en: We have created the **TaskManager** solution and set the **TaskManager.Server**
    project as the startup project. Now we need to add a shared class to the **TaskManager.Shared**
    project.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已创建**TaskManager**解决方案并将**TaskManager.Server**项目设置为启动项目。现在我们需要向**TaskManager.Shared**项目添加一个共享类。
- en: Adding the TaskItem class
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加TaskItem类
- en: 'We need to add the `TaskItem` class. We do this as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要添加`TaskItem`类。我们这样做如下：
- en: Right-click the **TaskManager.Shared** project and select the **Add**, **Class**
    option from the menu.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击**TaskManager.Shared**项目，从菜单中选择**添加**，**类**选项。
- en: Name the new class `TaskItem`.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新类命名为`TaskItem`。
- en: Click the **Add** button.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加**按钮。
- en: 'Make the class public by adding the `public` modifier:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加`public`修饰符使类公开：
- en: '[PRE8]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Add the following properties to the `TaskItem` class:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向`TaskItem`类添加以下属性：
- en: '[PRE9]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: From the **Build** menu, select the **Build Solution** option.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**构建**菜单中选择**构建解决方案**选项。
- en: We have added the `TaskItem` class. Next, we need to add an `API controller`
    for the `TaskItem` class. The `API Controller` will handle incoming HTTP requests
    from the Blazor WebAssembly client and will send responses back to it.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已添加了`TaskItem`类。接下来，我们需要为`TaskItem`类添加一个`API控制器`。`API控制器`将处理来自Blazor WebAssembly客户端的传入HTTP请求，并将响应发送回它。
- en: Adding the TaskItem API controller
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加TaskItem API控制器
- en: 'We need to add a `TaskItemsController` class. We do this as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要添加一个`TaskItemsController`类。我们这样做如下：
- en: Right-click the **TaskManager.Server** project and select the **Add**, **New
    Folder** option from the menu.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击**TaskManager.Server**项目，从菜单中选择**添加**，**新建文件夹**选项。
- en: Name the new folder `Controllers`.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新文件夹命名为`Controllers`。
- en: Right-click the `TaskManager.Server.Contollers` folder and select the **Add**,
    **Controller** option from the menu.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`TaskManager.Server.Controllers`文件夹，从菜单中选择**添加**，**控制器**选项。
- en: 'Select the **API Controller with actions, using Entity Framework** option:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**使用 Entity Framework 添加具有操作的 API 控制器**选项：
- en: '![Graphical user interface, application, Teams  Description automatically generated](img/B18471_11_07.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序，Teams  自动生成的描述](img/B18471_11_07.png)'
- en: 'Figure 11.7: Add New Scaffolded Item dialog'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.7：添加新模板项对话框
- en: Click the **Add** button.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加**按钮。
- en: Set **Model class** to **TaskItem (TaskManager.Shared)**.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**模型类**设置为**TaskItem (TaskManager.Shared)**。
- en: 'Click the **Add data context** button to open the **Add Data Context** dialog:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加数据上下文**按钮以打开**添加数据上下文**对话框：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_11_08.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B18471_11_08.png)'
- en: 'Figure 11.8: Add API Controller with actions, using Entity Framework dialog'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.8：添加 API 控制器（使用 Entity Framework）对话框
- en: Click the **Add** button to accept the default values.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加**按钮以接受默认值。
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_11_09.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B18471_11_09.png)'
- en: 'Figure 11.9: Add Data Context dialog'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.9：添加数据上下文对话框
- en: Click the **Add** button on the **Add API Controller with actions, using Entity
    Framework** dialog.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**添加 API 控制器（使用 Entity Framework）**对话框中点击**添加**按钮。
- en: We have created the `TaskItemsController` class. Now we need to set up SQL Server.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了`TaskItemsController`类。现在我们需要设置SQL Server。
- en: Setting up SQL Server
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置SQL Server
- en: 'We need to create a new database on SQL Server and add a table to contain the
    tasks. We do this as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在SQL Server上创建一个新的数据库并添加一个包含任务的表。我们这样做如下：
- en: Open the `TaskManager.Server/appsettings.json` file.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`TaskManager.Server/appsettings.json`文件。
- en: 'Update the connection string to the following:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将连接字符串更新为以下内容：
- en: '[PRE10]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Replace the `{Server name}` placeholder with the name of your SQL Server.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`{服务器名称}`占位符替换为你的SQL Server名称。
- en: '**IMPORTANT NOTE**'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: Although we are using SQL Server 2022 Express, it does not matter what version
    of SQL Server you use for this project.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们使用的是SQL Server 2022 Express，但对于这个项目来说，你使用什么版本的SQL Server都无关紧要。
- en: From the **Tools** menu, select the **NuGet Package Manager**, **Package Manager
    Console** option.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**工具**菜单中选择**NuGet包管理器**，**包管理控制台**选项。
- en: In **Package Manager Console**, use the drop-down list to change **Default project**
    to **TaskManager.Server**.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**包管理控制台**中，使用下拉列表将**默认项目**更改为**TaskManager.Server**。
- en: 'Execute the following commands in **Package Manager Console**:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**包管理控制台**中执行以下命令：
- en: '[PRE11]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The preceding commands use `Entity Framework` migrations to update SQL Server.
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的命令使用`Entity Framework`迁移来更新SQL Server。
- en: From the **View** menu, select **SQL Server Object Explorer**.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**视图**菜单中选择**SQL Server对象资源管理器**。
- en: 'If you do not see the SQL Server instance that you are using for this project,
    click the **Add SQL Server** button to connect it:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你没有看到用于此项目的SQL Server实例，请单击**添加SQL Server**按钮来连接它：
- en: '![Graphical user interface, application, website  Description automatically
    generated](img/B18471_11_10.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序，网站  自动生成的描述](img/B18471_11_10.png)'
- en: 'Figure 11.10: SQL Server Object Explorer'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.10：SQL Server对象资源管理器
- en: Navigate to the **TaskManager** database.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**任务管理器**数据库。
- en: '**TIP**'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**提示**'
- en: If you do not see the **TaskManager** database under **Databases**, right-click
    **Databases** and select the **Refresh** option.
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你没有在**数据库**下看到**TaskManager**数据库，请右键单击**数据库**并选择**刷新**选项。
- en: 'Navigate to **TaskManager**, **Tables**, **dbo.TaskItem**:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**任务管理器**，**表格**，**dbo.TaskItem**：
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18471_11_11.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序  自动生成的描述](img/B18471_11_11.png)'
- en: 'Figure 11.11: TaskManager database'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.11：TaskManager数据库
- en: Right-click **dbo.TaskItem** and select the **View Data** option.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击**dbo.TaskItem**并选择**查看数据**选项。
- en: 'Enter a couple of tasks by completing the **TaskName** field and setting the
    **IsComplete** field to **False**:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过完成**任务名称**字段并将**IsComplete**字段设置为**False**来输入几个任务：
- en: '![Table  Description automatically generated](img/B18471_11_12.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![表格  自动生成的描述](img/B18471_11_12.png)'
- en: 'Figure 11.12: Sample data'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.12：示例数据
- en: Press *Ctrl*+*F5* to start the application without debugging.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Ctrl*+*F5*键以无调试模式启动应用程序。
- en: Add `/api/taskitems` to the address bar and press *Enter*.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`/api/taskitems`添加到地址栏并按*Enter*键。
- en: 'The following screenshot shows the JSON that is returned by `TaskItemsController`:'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图显示了`TaskItemsController`返回的JSON：
- en: '![Graphical user interface, text  Description automatically generated](img/B18471_11_13.png)'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形用户界面，文本  自动生成的描述](img/B18471_11_13.png)'
- en: 'Figure 11.13: JSON returned by the TaskItem API controller'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图11.13：TaskItem API控制器返回的JSON
- en: Close the browser.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭浏览器。
- en: We have demonstrated that `TaskItemsController` works. Now we can start working
    on the `TaskManager.Client` project. We will use `Bootstrap` to style our UI and
    `Bootstrap icons` to provide the trashcan image on the delete button.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经证明`TaskItemsController`可以工作。现在我们可以开始工作在`TaskManager.Client`项目上了。我们将使用`Bootstrap`来美化我们的UI，并使用`Bootstrap
    icons`在删除按钮上提供垃圾桶图像。
- en: Install Bootstrap
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Bootstrap
- en: 'We need to install `Bootstrap` and `Bootstrap icons` in our web app. We do
    this as follows:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在我们的Web应用中安装`Bootstrap`和`Bootstrap icons`。我们这样做如下：
- en: Return to Visual Studio.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回Visual Studio。
- en: Press *Ctrl*+*Alt*+*L* to view **Solution Explorer**.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Ctrl*+*Alt*+*L*键查看**解决方案资源管理器**。
- en: Right-click the `TaskManager.Client/wwwroot/css` folder and select the **Add**,
    **Client-Side Library** option from the menu.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`TaskManager.Client/wwwroot/css`文件夹，从菜单中选择**添加**，**客户端库**选项。
- en: Enter `bootstrap` into the **Library** search textbox and press the *Enter*
    key.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**库**搜索文本框中输入`bootstrap`并按*Enter*键。
- en: Select **Choose specific files**.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**选择特定文件**。
- en: Select only the **css** files, as shown in the following screenshot:![Graphical
    user interface, application, email  Description automatically generated](img/B18471_11_14.png)
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如以下截图所示，仅选择 **css** 文件：![图形用户界面，应用程序，电子邮件，自动生成描述](img/B18471_11_14.png)
- en: 'Figure 11.14: Add Client-Side Library dialog'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.14：添加客户端库对话框
- en: '**TIP**'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**提示**'
- en: Although the preceding screenshot has version 5.2.3 of Bootstrap selected, you
    can use any version of Bootstrap 5 to complete this project.
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 尽管前面的截图选择了 Bootstrap 的 5.2.3 版本，但你可以使用任何版本的 Bootstrap 5 来完成此项目。
- en: Click the **Install** button.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **安装** 按钮。
- en: '**IMPORTANT NOTE**'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: After you install `Bootstrap`, a new folder will be added to the `wwwroot/css`
    folder. This new folder contains all the CSS files needed for `Bootstrap`. We
    will only be using the `bootstrap.min.css` file in this project.
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 安装 `Bootstrap` 后，将在 `wwwroot/css` 文件夹中添加一个新文件夹。这个新文件夹包含 `Bootstrap` 所需的所有 CSS
    文件。在本项目中，我们只将使用 `bootstrap.min.css` 文件。
- en: Open the `TaskManager.Client/wwwroot/index.html` file.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `TaskManager.Client/wwwroot/index.html` 文件。
- en: 'Add the following markup to the `head` element before the link to the `css/app.css`
    stylesheet:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在链接到 `css/app.css` 样式表的 `head` 元素之前添加以下标记：
- en: '[PRE12]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Right-click the `TaskManager.Client/wwwroot/css` folder and select the **Add,
    Client-Side Library** option from the menu.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击 `TaskManager.Client/wwwroot/css` 文件夹，从菜单中选择 **添加，客户端库** 选项。
- en: Enter `bootstrap-icons` into the **Library** search textbox and press the *Enter*
    key.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **库** 搜索文本框中输入 `bootstrap-icons` 并按 *Enter* 键。
- en: Select **Choose specific files**.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **选择特定文件**。
- en: 'Select only the **font** files as shown in the following screenshot:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如以下截图所示，仅选择 **字体** 文件：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_11_15.png)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件，自动生成描述](img/B18471_11_15.png)'
- en: 'Figure 11.15: Add Client-Side Library dialog'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.15：添加客户端库对话框
- en: Open the `TaskManager.Client/wwwroot/index.html` file.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `TaskManager.Client/wwwroot/index.html` 文件。
- en: 'Add the following markup to the `head` element before the link to the `css/app.css`
    stylesheet:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在链接到 `css/app.css` 样式表的 `head` 元素之前添加以下标记：
- en: '[PRE13]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We have installed both `Bootstrap` and `Boostrap icons`. Now we will update
    the **Home** page to display the tasks that are stored in SQL Server.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已安装了 `Bootstrap` 和 `Boostrap icons`。现在我们将更新 **主页** 以显示存储在 SQL Server 中的任务。
- en: Displaying the tasks
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示任务
- en: 'We need to fetch the list of tasks and display them to the user. We do this
    as follows:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要获取任务列表并将其显示给用户。我们这样做如下：
- en: Right-click the `TaskManager.Client.Pages` folder and select the **Add**, **Class**
    option from the menu.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击 `TaskManager.Client.Pages` 文件夹，从菜单中选择 **添加**，**类** 选项。
- en: Name the new class `Index.razor.cs`.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新类命名为 `Index.razor.cs`。
- en: Click the **Add** button.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **添加** 按钮。
- en: 'Add the `partial` modifier to the class:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `partial` 修饰符添加到类中。
- en: '[PRE14]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Add the following `using` statement:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下 `using` 语句：
- en: '[PRE15]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Add the following property to the `Index` class:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下属性添加到 `Index` 类中：
- en: '[PRE16]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The preceding code injects the `HttpClient` service into the component.
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的代码将 `HttpClient` 服务注入到组件中。
- en: 'Add the following code to the `Index` class:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到 `Index` 类中：
- en: '[PRE17]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The preceding code uses the `GetFromJsonAsync` method to return the collection
    of `TaskItem` objects.
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的代码使用 `GetFromJsonAsync` 方法返回 `TaskItem` 对象的集合。
- en: 'Verify that Visual Studio has automatically added the following `using` statements:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认 Visual Studio 已自动添加以下 `using` 语句：
- en: '[PRE18]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Open the `TaskManager.Client.Pages/Index.razor` page.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `TaskManager.Client.Pages/Index.razor` 页面。
- en: Remove the `h1` element.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除 `h1` 元素。
- en: 'Add the following `@if` statement:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下 `@if` 语句：
- en: '[PRE19]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The preceding markup displays the loading message if the value of `tasks` is
    `null`. Otherwise, it loops through the collection of `TaskItem` objects in `tasks`.
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的标记在 `tasks` 的值为 `null` 时显示加载消息。否则，它将遍历 `tasks` 中 `TaskItem` 对象的集合。
- en: 'Add the following markup to the `@foreach` loop:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `@foreach` 循环中添加以下标记：
- en: '[PRE20]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The preceding markup displays a checkbox, the `TaskName` field, and a delete
    button for each `TaskItem` class.
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的标记为每个 `TaskItem` 类显示一个复选框、`TaskName` 字段和一个删除按钮。
- en: Press *Ctrl*+*F5* to start the application without debugging.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Ctrl*+*F5* 启动应用程序，不进行调试。
- en: 'The following is a screenshot of the **Home** page:'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是一个 **主页** 的截图：
- en: '![Graphical user interface, application  Description automatically generated](img/B18471_11_16.png)'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序，自动生成描述](img/B18471_11_16.png)'
- en: 'Figure 11.16: List of tasks'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.16：任务列表
- en: We have added a list of tasks to the **Home** page, but nothing happens when
    we click either the checkbox or the **delete** button. Next, we need to allow
    the user to mark a task as complete.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在 **主页** 上添加了一个任务列表，但点击复选框或 **删除** 按钮时没有任何反应。接下来，我们需要允许用户标记任务为完成。
- en: Completing the tasks
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 完成任务
- en: 'We will allow the user to mark a task as complete by clicking the checkbox
    next to the name of the task. We do this as follows:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将允许用户通过点击任务名称旁边的复选框来标记任务为完成。我们这样做如下：
- en: Return to Visual Studio.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回 Visual Studio。
- en: Right-click the `TaskManager.Client`/`Pages` folder and select the **Add**,
    **New Item** option from the menu.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击 `TaskManager.Client`/`Pages` 文件夹，从菜单中选择 **添加**，**新建项** 选项。
- en: Enter `css` in the **Search** box.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **搜索** 框中输入 `css`。
- en: Select **Style Sheet**.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **样式表**。
- en: Name the file `Index.razor.css`.
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件命名为 `Index.razor.css`。
- en: Click the **Add** button.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **添加** 按钮。
- en: 'Replace the default text with the following style:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将默认文本替换为以下样式：
- en: '[PRE21]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The preceding style will render a line through the tasks that are in the `completed-task`
    class.
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述样式将渲染一个穿过 `completed-task` 类任务的线条。
- en: Open the `TaskManager.Client/wwwroot/index.html` file.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `TaskManager.Client/wwwroot/index.html` 文件。
- en: 'Uncomment the following link element:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消注释以下链接元素：
- en: '[PRE22]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Open the `Index.razor` file.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Index.razor` 文件。
- en: 'Update the `span` element used to display the task’s name to the following:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新用于显示任务名称的 `span` 元素如下：
- en: '[PRE23]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The preceding markup will set the class of the `span` element to `completed-task`
    when the task is completed by checking the checkbox associated with the task.
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述标记将在任务通过勾选与任务关联的复选框完成时，将 `span` 元素的类设置为 `completed-task`。
- en: 'Add the following markup to the `input` element of type checkbox:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向复选框类型的 `input` 元素添加以下标记：
- en: '[PRE24]'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Open the `TaskManager.Client.Pages/Index.razor.cs` file.
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `TaskManager.Client.Pages/Index.razor.cs` 文件。
- en: 'Add the following `CheckboxChecked` method:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下 `CheckboxChecked` 方法：
- en: '[PRE25]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The preceding code uses the `PutAsJsonAsync` method to update the indicated
    `TaskItem` class.
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述代码使用 `PutAsJsonAsync` 方法更新指定的 `TaskItem` 类。
- en: Press *Ctrl*+*F5* to start the application without debugging.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Ctrl*+*F5* 以无调试模式启动应用程序。
- en: Mark one of the tasks as complete by clicking the checkbox next to it.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击旁边的复选框标记其中一个任务为完成。
- en: 'The following screenshot shows a task that has been completed:'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图显示了一个已完成的任务：
- en: '![Graphical user interface, application  Description automatically generated
    with medium confidence](img/B18471_11_17.png)'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序描述自动生成，中等置信度](img/B18471_11_17.png)'
- en: 'Figure 11.17: Completed task'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.17：完成的任务
- en: Return to Visual Studio.
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回 Visual Studio。
- en: Select the **dbo.TaskItem [Data]** tab.
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **dbo.TaskItem [数据]** 选项卡。
- en: Click *Shift*+*Alt*+*R* to refresh the data.
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 *Shift*+*Alt*+*R* 来刷新数据。
- en: Verify that the **IsComplete** field has been updated to **True** for the `TaskItem`
    that you marked as complete.
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证标记为完成的 `TaskItem` 的 **IsComplete** 字段是否已更新为 **True**。
- en: When a user checks the checkbox next to a task, the UI is updated, and the SQL
    Server database is updated. Next, we need to add the ability to delete tasks.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户勾选任务旁边的复选框时，UI 将更新，SQL Server 数据库也将更新。接下来，我们需要添加删除任务的功能。
- en: Deleting tasks
  id: totrans-289
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除任务
- en: 'We need to allow users to delete tasks. We do this as follows:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要允许用户删除任务。我们这样做如下：
- en: Open the `Index.razor` file.
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Index.razor` 文件。
- en: 'Update the `button` element to the following by adding the highlighted code:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加高亮代码更新 `button` 元素如下：
- en: '[PRE26]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Open the `TaskManager.Client.Pages/Index.razor.cs` file.
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `TaskManager.Client.Pages/Index.razor.cs` 文件。
- en: 'Add the following `DeleteTask` method:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下 `DeleteTask` 方法：
- en: '[PRE27]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The preceding code uses the `Http.DeleteAsync` method to delete the indicated
    `TaskItem` class.
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述代码使用 `Http.DeleteAsync` 方法删除指定的 `TaskItem` 类。
- en: Press *Ctrl*+*F5* to start the application without debugging.
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Ctrl*+*F5* 以无调试模式启动应用程序。
- en: Click the button with the garbage can icon to delete one of the tasks.
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击带有垃圾箱图标的按钮来删除一个任务。
- en: Return to Visual Studio.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回 Visual Studio。
- en: Select the **dbo.TaskItem [Data]** tab.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **dbo.TaskItem [数据]** 选项卡。
- en: Click *Shift*+*Alt*+*R* to refresh the data.
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 *Shift*+*Alt*+*R* 来刷新数据。
- en: Verify that the `TaskItem` has been deleted.
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证 `TaskItem` 是否已被删除。
- en: We have added the ability to delete tasks. Now we need to add the ability to
    add new tasks.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经添加了删除任务的功能。现在我们需要添加添加新任务的功能。
- en: Adding new tasks
  id: totrans-305
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加新任务
- en: 'We need to provide a way for users to add new tasks. We do this as follows:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要提供一个让用户添加新任务的方法。我们这样做如下：
- en: Open the `Index.razor` file.
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Index.razor` 文件。
- en: 'Add the following markup before the `@foreach` loop:'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `@foreach` 循环之前添加以下标记：
- en: '[PRE28]'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Open the `TaskManager.Client.Pages/Index.razor.cs` file.
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `TaskManager.Client.Pages/Index.razor.cs` 文件。
- en: 'Add the following field:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下字段：
- en: '[PRE29]'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Add the following `AddTask` method:'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下 `AddTask` 方法：
- en: '[PRE30]'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The preceding code uses the `PostAsJsonAsync` method to create a new `TaskItem`
    class.
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述代码使用 `PostAsJsonAsync` 方法创建一个新的 `TaskItem` 类。
- en: Press *Ctrl*+*F5* to start the application without debugging.
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Ctrl*+*F5* 以无调试模式启动应用程序。
- en: Add a few new tasks.
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加几个新任务。
- en: Return to Visual Studio.
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回 Visual Studio。
- en: Select the **dbo.TaskItem [Data]** tab.
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **dbo.TaskItem [数据]** 选项卡。
- en: Click *Shift*+*Alt*+*R* to refresh the data.
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Shift*+*Alt*+*R* 刷新数据。
- en: Verify that the new tasks have been added to the SQL Server database.
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证新任务是否已添加到 SQL Server 数据库中。
- en: We have added the ability for users to add new tasks.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经添加了用户添加新任务的功能。
- en: Summary
  id: totrans-323
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: You should now be able to create a hosted Blazor WebAssembly app that uses ASP.NET
    Web API to update data in a SQL Server database.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您应该能够创建一个托管 Blazor WebAssembly 应用程序，该程序使用 ASP.NET Web API 更新 SQL Server 数据库中的数据。
- en: In this chapter, we introduced hosted Blazor WebAssembly apps, the `HttpClient`
    service, and the JSON helper methods used to read, create, and update data. We
    also demonstrated how to delete data using the `HttpClient.DeleteAsync` method.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了托管 Blazor WebAssembly 应用程序、`HttpClient` 服务以及用于读取、创建和更新数据的 JSON 辅助方法。我们还演示了如何使用
    `HttpClient.DeleteAsync` 方法删除数据。
- en: After that, we used Microsoft’s **Blazor WebAssembly App Empty** project template
    to create a hosted Blazor WebAssembly app. We added a `TaskItem` class to the
    `TaskManager.Shared` project and a `TaskItem API controller` to the `TaskManager.Server`
    project. Next, we configured SQL Server by updating the connection string to the
    database and using `Entity Framework` migrations. To enhance the UI, we added
    `Bootstrap` and `Bootstrap icons`. Finally, we used the `HttpClient` service to
    read the list of tasks, update a task, delete a task, and add new tasks.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们使用 Microsoft 的 **Blazor WebAssembly App Empty** 项目模板创建了一个托管 Blazor WebAssembly
    应用程序。我们将 `TaskItem` 类添加到 `TaskManager.Shared` 项目中，并将 `TaskItem API 控制器` 添加到 `TaskManager.Server`
    项目中。接下来，我们通过更新数据库的连接字符串和使用 `Entity Framework` 迁移来配置 SQL Server。为了增强 UI，我们添加了 `Bootstrap`
    和 `Bootstrap icons`。最后，我们使用 `HttpClient` 服务读取任务列表、更新任务、删除任务以及添加新任务。
- en: We can apply our new skills to create a hosted Blazor WebAssembly app that is
    part of a multi-project solution and use ASP.NET Web API to read, create, update,
    and delete data.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将我们的新技能应用于创建一个作为多项目解决方案一部分的托管 Blazor WebAssembly 应用程序，并使用 ASP.NET Web API
    读取、创建、更新和删除数据。
- en: In the next chapter, we will build an expense tracker using the `EditForm` component.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用 `EditForm` 组件构建一个支出跟踪器。
- en: Questions
  id: totrans-329
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'The following questions are provided for your consideration:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 以下问题供您参考：
- en: What are the benefits of using a hosted Blazor WebAssembly project versus a
    standalone Blazor WebAssembly project?
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用托管 Blazor WebAssembly 项目与独立 Blazor WebAssembly 项目相比有哪些好处？
- en: What is the difference between HTTP GET, HTTP POST, and HTTP PUT?
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: HTTP GET、HTTP POST 和 HTTP PUT 之间有什么区别？
- en: In our project, how would we obtain the `TaskItemId` of a `TaskItem` that was
    created using the `PostAsJsonAsync` method?
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的项目中，我们如何通过使用 `PostAsJsonAsync` 方法创建的 `TaskItem` 获取 `TaskItemId`？
- en: Can you add, edit, and delete data in a SQL Server database directly from Visual
    Studio?
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您能否直接从 Visual Studio 中添加、编辑和删除 SQL Server 数据库中的数据？
- en: Further reading
  id: totrans-335
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'The following resources provide more information concerning the topics covered
    in this chapter:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 以下资源提供了有关本章涵盖主题的更多信息：
- en: For more information on the `HttpClient` class, refer to [https://learn.microsoft.com/en-us/dotnet/api/system.net.http.httpclient](https://learn.microsoft.com/en-us/dotnet/api/system.net.http.httpclient).
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关 `HttpClient` 类的更多信息，请参阅 [https://learn.microsoft.com/en-us/dotnet/api/system.net.http.httpclient](https://learn.microsoft.com/en-us/dotnet/api/system.net.http.httpclient)。
- en: For more information on calling a web API from Blazor WebAssembly, refer to
    [https://learn.microsoft.com/en-us/aspnet/core/blazor/call-web-api](https://learn.microsoft.com/en-us/aspnet/core/blazor/call-web-api).
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关从 Blazor WebAssembly 调用 Web API 的更多信息，请参阅 [https://learn.microsoft.com/en-us/aspnet/core/blazor/call-web-api](https://learn.microsoft.com/en-us/aspnet/core/blazor/call-web-api)。
- en: For more information on the extension methods that perform serialization and
    deserialization using `System.Text.Json`, refer to [https://learn.microsoft.com/en-us/dotnet/api/system.text.json](https://learn.microsoft.com/en-us/dotnet/api/system.text.json).
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如需了解使用 `System.Text.Json` 执行序列化和反序列化操作的扩展方法，请参阅 [https://learn.microsoft.com/en-us/dotnet/api/system.text.json](https://learn.microsoft.com/en-us/dotnet/api/system.text.json)。
- en: For more information on `Entity Framework`, refer to [https://learn.microsoft.com/en-us/ef](https://learn.microsoft.com/en-us/ef).
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如需了解有关 `Entity Framework` 的更多信息，请参阅 [https://learn.microsoft.com/en-us/ef](https://learn.microsoft.com/en-us/ef)。
- en: For more information on `Bootstrap`, refer to [https://getbootstrap.com](https://getbootstrap.com).
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如需了解有关 `Bootstrap` 的更多信息，请参阅 [https://getbootstrap.com](https://getbootstrap.com)。
