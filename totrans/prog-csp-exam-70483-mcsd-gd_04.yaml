- en: Implementing Program Flow
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现程序流程
- en: This chapter focuses on how we can manage program flow in C#. In other words,
    this chapter will help you understand how the program controls and validates input
    and output arguments and makes decisions using statements that are available in
    C#. We will cover various Boolean expressions, such as If/Else and Switch, which
    control the flow of code based on certain conditions. We will also evaluate various
    operators, such as the conditional operator and the equality operator (`<`, `>`,
    `==`), both of which govern the flow of code. We will focus on how we can iterate
    across collections (with `for` loops, `while` loops, and so on) and explicit jump
    statements.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点介绍如何在 C# 中管理程序流程。换句话说，本章将帮助您了解程序如何通过 C# 中可用的语句控制、验证输入和输出参数并做出决策。我们将涵盖各种布尔表达式，例如
    If/Else 和 Switch，它们根据特定条件控制代码的流程。我们还将评估各种运算符，例如条件运算符和相等运算符（`<`, `>`, `==`），它们都控制代码的流程。我们将关注如何通过集合（使用
    `for` 循环、`while` 循环等）和显式跳转语句进行迭代。
- en: The following topics will be covered in this chapter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题。
- en: Understanding operators
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解运算符
- en: Understanding conditional/selection statements
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解条件/选择语句
- en: Iteration statements
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迭代语句
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The exercises in this chapter can be practiced using Visual Studio 2012 or above
    with .NET Framework version 2.0 or above. However, any new C# features from version
    7.0 and above require you to have Visual Studio 2017.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的练习可以使用 Visual Studio 2012 或更高版本以及 .NET Framework 2.0 或更高版本进行练习。然而，任何从版本 7.0
    及以上版本的新 C# 功能都需要您拥有 Visual Studio 2017。
- en: If you don't have a license for any of these products, you can download the
    community version of Visual Studio 2017 from [https://visualstudio.microsoft.com/downloads/](https://visualstudio.microsoft.com/downloads/).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有这些产品的许可证，您可以下载 Visual Studio 2017 的社区版本：[https://visualstudio.microsoft.com/downloads/](https://visualstudio.microsoft.com/downloads/)。
- en: The sample code for this chapter can be found in this book's GitHub repository
    at [https://github.com/PacktPublishing/Programming-in-C-sharp-Exam-70-483-MCSD-Guide/tree/master/Chapter04](https://github.com/PacktPublishing/Programming-in-C-sharp-Exam-70-483-MCSD-Guide/tree/master/Chapter04).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的示例代码可以在本书的 GitHub 仓库中找到：[https://github.com/PacktPublishing/Programming-in-C-sharp-Exam-70-483-MCSD-Guide/tree/master/Chapter04](https://github.com/PacktPublishing/Programming-in-C-sharp-Exam-70-483-MCSD-Guide/tree/master/Chapter04)。
- en: Understanding operators
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解运算符
- en: 'Before we dive into this topic, let''s understand what operators and operands
    are. These are two important terms we will use in this section of this book:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入这个主题之前，让我们了解运算符和操作数是什么。这两个是我们将在本书的这一部分使用的重要术语：
- en: An operator is a programming element that is applied to one or more operands
    in an expression or statement.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运算符是应用于表达式或语句中的一个或多个操作数的编程元素。
- en: An operand is an object that can be manipulated.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作数是可以被操作的对象。
- en: C# offers different types of operators, such as the Unary operator (`[increment
    operator] ++`, `new`) which takes one operand, Binary operators of the arithmetic
    type (`+`, `-`, `*`, `/`), relational types (`>` ,`<`, `<=`, `>=`), equality types
    (`=`, `!=`), and shift types (`>>`, `<<`), all of which are used between two operands.
    C# also offers a ternary operator that takes three operands (`?:`).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: C# 提供不同类型的运算符，例如一元运算符（`[增量运算符] ++`, `new`），它接受一个操作数，二元算术类型的运算符（`+`, `-`, `*`,
    `/`），关系类型（`>` ,`<`, `<=`, `>=`），相等类型（`=`, `!=`），以及位移类型（`>>`, `<<`），所有这些都在两个操作数之间使用。C#
    还提供了一种三元运算符，它接受三个操作数（`?:`）。
- en: Unary operators
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一元运算符
- en: An operator that requires only one operand is called a **Unary operator**. They
    can perform operations such as increment, decrement, negation and so on. They
    can also be applied before (prefix) or after (postfix) the operand.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 只需要一个操作数的运算符称为**一元运算符**。它们可以执行增量、减量、取反等操作。它们也可以应用于操作数之前（前缀）或之后（后缀）。
- en: 'The following table lists a few Unary operators. `x`, in the left-hand column,
    is an operand where we apply the operators:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 下表列出了几个一元运算符。`x` 在左侧列中是应用运算符的操作数：
- en: '| **Expression** | **Description** |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| **表达式** | **描述** |'
- en: '| `+x` | **Identity**: This operator can be used as a Unary or Binary operator.
    If it''s used on numeric values, it returns the value. If it''s applied on two
    numeric operands, it returns the sum of operands. On strings, it concatenates
    both operands. |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| `+x` | **恒等性**：此运算符可以用作一元或二元运算符。如果用于数值，则返回该值。如果应用于两个数值操作数，则返回操作数的总和。在字符串上，它连接两个操作数。|'
- en: '| `-x` | **Negation**: This operator can be used as a Unary or Binary operator.
    Applying this operator on numeric types results in the numeric negation of the
    operand. |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| `-x` | **取反**: 这个运算符可以用作一元或二元运算符。对数值类型应用此运算符会导致操作数的数值取反。|'
- en: '| `!x` | **Logical negation**: This operator negates the operand. It is applied
    for bool operands and returns if the operand is false. |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `!x` | **逻辑取反**: 这个运算符取反操作数。它应用于布尔操作数，并在操作数为假时返回。|'
- en: '| `~x` | **Bitwise negation**: This produces a complement of its operand by
    reversing each bit. |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `~x` | **位取反**: 通过反转每个位来产生操作数的补码。|'
- en: '| `++x` | **Pre-increment**: This is an increment operator and can appear before
    or after the operand. When prefixed, the result is placed after the increment.
    If postfixed, the result is placed before the increment. |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `++x` | **前置递增**: 这是一个递增运算符，可以出现在操作数之前或之后。当作为前缀时，结果放在递增之后。如果作为后缀，结果放在递增之前。|'
- en: '| `--x` | **Pre-decrement**: This is a decrement operator and can appear before
    or after the operand. When prefixed, the result is placed after decrement. If
    postfixed, the result is placed before the decrement. |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `--x` | **前置递减**: 这是一个递减运算符，可以出现在操作数之前或之后。当作为前缀时，结果放在递减之后。如果作为后缀，结果放在递减之前。|'
- en: 'In the following code, we will declare a few variables and use them to showcase
    examples of the preceding operators:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，我们将声明一些变量并使用它们来展示前面运算符的示例：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`+` and `-` can be used with a single operand or multiple operands. When used
    with multiple operands of the integer type, they either sum the operands or get
    the difference. The `+` operator can be used with string type operands as well.
    In this case, it will concatenate both the strings. A string and an operator is
    always a Binary operator:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`+` 和 `-` 可以与单个操作数或多个操作数一起使用。当与多个整数类型的操作数一起使用时，它们要么对操作数求和，要么得到差值。`+` 运算符也可以与字符串类型的操作数一起使用。在这种情况下，它将连接两个字符串。字符串和运算符始终是二进制运算符：'
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `!` operator works well with Boolean operands where it produces logical
    negation; that is, true becomes false, whereas the `~` operator works with bitwise
    operands. In the following example, a Binary digit representation and its bitwise
    negation are displayed. We are taking an integer value and converting it into
    a Binary value and then negating it using the `~` operator and displaying it in
    base 2 format:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`!` 运算符与布尔操作数配合良好，它产生逻辑取反；也就是说，真变为假，而 `~` 运算符与位运算符配合使用。在以下示例中，显示了一个二进制位表示及其位取反。我们取一个整数值，将其转换为二进制值，然后使用
    `~` 运算符取反，并以二进制格式显示：'
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `++` and `--` operators, when applied on integer operands, perform increments
    or decrements on the operands, respectively. These can be applied pre or post
    an operand. The following example shows both the post and pre increment and decrement
    operators. Pre produces results before displaying and post produces results after
    displaying:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`++` 和 `--` 运算符，当应用于整数操作数时，分别对操作数执行递增或递减操作。这些可以应用于操作数的前面或后面。以下示例显示了后置和前置递增和递减运算符。前置在显示之前产生结果，后置在显示之后产生结果：'
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Relational operators
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关系运算符
- en: As the name suggests, relational operators test or define the relationship between
    two operands, for example, if the first operand is less than the second one, or
    greater than or equal to it. These operators are applied to numeric operands.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名所示，关系运算符测试或定义两个操作数之间的关系，例如，如果第一个操作数小于第二个操作数，或者大于等于它。这些运算符应用于数值操作数。
- en: 'The following table lists a few Binary operators:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 下表列出了几个二进制运算符：
- en: '| **Expression** | **Description** |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| **表达式** | **描述** |'
- en: '| `<` | Defined as less than the operator. Used as `X < Y`. Returns true if
    the first operand is less than the second operand. |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `<` | 定义为小于运算符。用作 `X < Y`。如果第一个操作数小于第二个操作数，则返回 true。|'
- en: '| `>` | Defined as greater than an operator. Used as `X > Y`. Returns true
    if the first operand is greater than the second operand. |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `>` | 定义为大于运算符。用作 `X > Y`。如果第一个操作数大于第二个操作数，则返回 true。|'
- en: '| `<=` | Less than Or Equal To operator. Used as `X <= Y`. |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `<=` | 小于或等于运算符。用作 `X <= Y`。|'
- en: '| `>=` | Greater than Or Equal To operator. Used as `X >= Y`. |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `>=` | 大于或等于运算符。用作 `X >= Y`。|'
- en: 'We will use the same variables we defined in the preceding example to understand
    these relational operators. Here, we are trying to find out whether `firstvalue`
    is less than `secondvalue` or whether `firstvalue` is greater than `secondvalue`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用前面示例中定义的相同变量来理解这些关系运算符。在这里，我们正在尝试找出`firstvalue`是否小于`secondvalue`或`firstvalue`是否大于`secondvalue`：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Equality operators
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相等运算符
- en: Equality operators are a type of Binary operator, where `2` operands are required.
    Because they check for the equality of the operands, these can be termed under
    relational operators as well.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 相等运算符是一种二元运算符，需要两个操作数。因为它们检查操作数的相等性，所以这些也可以称为关系运算符。
- en: 'The following table lists the available equality operators:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了可用的相等运算符：
- en: '| **Expression** | **Description** |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| **表达式** | **描述** |'
- en: '| `==` | This works for predefined value types. Defined as the equality operator.
    Used as `X == Y`. Returns `true` if the first operand is equal to the second operand.
    |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `==` | 这适用于预定义值类型。定义为相等运算符。用作`X == Y`。如果第一个操作数等于第二个操作数，则返回`true`。|'
- en: '| `!=` | Defined as the inequality operator. Used as `X! = Y`. Returns `true`
    if the operands are not equal. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `!=` | 定义为不等运算符。用作`X! = Y`。如果操作数不相等，则返回`true`。|'
- en: 'We will use the same variables we created in the preceding examples to try
    and understand the equality operators. Here, we are trying to check if `firstvalue`
    is equal or not equal to `secondvalue`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用前面示例中创建的相同变量来尝试理解相等运算符。在这里，我们正在尝试检查`firstvalue`是否等于`secondvalue`或不相等：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Shift operators
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 位移运算符
- en: Shift operators are another type of Binary operator. They take two integer operands
    and left shift or right shift the bits by the number specified.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 位移运算符是另一种类型的二元运算符。它们接受两个整数操作数，并根据指定的位数将位左移或右移。
- en: 'The following table lists the available shift operators:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了可用的位移运算符：
- en: '| **Expression** | **Description** |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| **表达式** | **描述** |'
- en: '| `<<` | This is an example of a Binary operator that allows you to shift the
    first operand left by the number of bits specified in the second operand. The
    second operator must be a type of Int. |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `<<` | 这是一个二元运算符的示例，允许你将第一个操作数左移由第二个操作数指定的位数。第二个操作数必须是整数类型。|'
- en: '| `>>` | This is an example of a Binary operator that allows you to shift the
    first operand right by the number of bits specified in the second operand. The
    second operator must be a type of Int. |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `>>` | 这是一个二元运算符的示例，允许你将第一个操作数右移由第二个操作数指定的位数。第二个操作数必须是整数类型。|'
- en: 'In the following example, the program accepts an integer operand and shifts
    left or right by 1 bit. Shift works on Binary operators, so, for our understanding,
    I wrote a method that will convert an integer into Binary format and display it.
    When we pass an integer number of `9` to the program, `i`, and use the `>>` operator,
    its Binary string is shifted by 1 and the result is displayed. When `1001` is
    right-shifted, it becomes `100`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，程序接受一个整数操作数，并将其左移或右移1位。位移操作适用于二元运算符，因此，为了我们的理解，我编写了一个方法，将整数转换为二进制格式并显示。当我们向程序传递整数`9`，即`i`，并使用`>>`运算符时，其二进制字符串右移1位，并显示结果。当`1001`右移时，它变为`100`：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Logical, conditional, and null operators
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 逻辑、条件和null运算符
- en: C# allows you to combine the aforementioned operators with `OR` (`||`), `AND`
    (`&&`), or `XOR` (`^`). These are applied to both operands in an expression.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: C# 允许你使用`OR`（`||`）、`AND`（`&&`）或`XOR`（`^`）将上述运算符组合起来。这些应用于表达式中的两个操作数。
- en: 'The following table lists the logical, conditional, and `null` operators:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了逻辑、条件和`null`运算符：
- en: '| **Expression** | **Description and example** |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| **表达式** | **描述和示例** |'
- en: '| Logical OR (`&#124;`) | This operator computes both operands and returns
    `false` if both are `false`. |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 逻辑或 (`&#124;`) | 此运算符计算两个操作数，如果两个操作数都为`false`，则返回`false`。|'
- en: '| Logical AND (`&`) | This operator can be used in two forms: Unary address
    operator or Binary logical operator. When used as a Unary address operator, it
    returns the address of the operand. If used as a Binary, it evaluates both operands
    and returns `true` if both operands are `true`; otherwise, it will return `false`.
    |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 逻辑与 (`&`) | 此运算符有两种形式：一元地址运算符或二元逻辑运算符。当用作一元地址运算符时，它返回操作数的地址。如果用作二元运算符，它评估两个操作数，如果两个操作数都为`true`，则返回`true`；否则，它将返回`false`。|'
- en: '| Conditional AND (`&&`) | This conditional operator is used when two `bool`
    operands need to be evaluated. When applied, both operands are computed and returns
    `true` if both operands are `true`. If the first operand returns `false`, the
    conditional operator doesn''t evaluate the other operator. This is also known
    as the *short-circuiting* logical `AND` operator. |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 条件 AND (`&&`) | 当需要评估两个布尔操作数时使用此条件运算符。当应用时，计算两个操作数，如果两个操作数都为 `true`，则返回 `true`。如果第一个操作数返回
    `false`，则条件运算符不会评估另一个操作数。这也被称为*短路*逻辑 `AND` 运算符。 |'
- en: '| Conditional OR (`&#124;&#124;`) | This is also known as the *short-circuiting*
    logical `OR` operator. The conditional `OR` operator evaluates both `bool` operands
    and returns `true` if either of them is `true`. If the first operand returns `true`,
    it won''t evaluate the second operator. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| 条件 OR (`&#124;&#124;`) | 这也称为*短路*逻辑 `OR` 运算符。条件 `OR` 运算符评估两个布尔操作数，如果任一操作数为
    `true`，则返回 `true`。如果第一个操作数返回 `true`，则不会评估第二个操作数。 |'
- en: '| Logical XOR (`^`) | This operator is evaluated as a bitwise exclusive `OR`
    for integral types and logical exclusive and `OR` for `bool` types. When applied,
    it computes both operands and returns `true` if one of the operands is `true`;
    otherwise, it returns `false`. |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| 逻辑异或 (`^`) | 此运算符对于整型类型是按位异或，对于布尔类型是逻辑异或和。当应用时，它计算两个操作数，如果任一操作数为 `true`，则返回
    `true`；否则返回 `false`。 |'
- en: '| Null coalescing (`??`) | The null coalescing operator computes both operands
    and returns the operand that is `not null`. It''s used like so: `int y = x ??
    1;`. In this scenario, if `x` is `null`, `y` is assigned a value of `1`; otherwise,
    `y` is assigned a value of `x`. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| 空合并 (`??`) | 空合并运算符计算两个操作数并返回非 `null` 的操作数。其用法如下：`int y = x ?? 1;`。在这种情况下，如果
    `x` 为 `null`，则 `y` 被分配值为 `1`；否则，`y` 被分配值为 `x`。 |'
- en: '| Ternary operator (`?:`) | The conditional operator is also known as the `Ternary`
    operator and evaluates a Boolean expression. The condition is `? true value :
    false value`. If the condition is `true`, the operator returns `true value`, but
    if the condition is `false`, the operator returns `false value`. Ternary operators
    support nested expressions or operators, which is also known as being *right-associative*.
    |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| 三元运算符 (`?:`) | 条件运算符也称为三元运算符，用于评估布尔表达式。条件是 `? true value : false value`。如果条件为
    `true`，则运算符返回 `true value`，但如果条件为 `false`，则运算符返回 `false value`。三元运算符支持嵌套表达式或运算符，这也称为*右结合性*。
    |'
- en: 'The following code will allow us to understand each of these statements in
    detail. Initially, we will define the required variables and methods and then
    proceed with each statement. The following code is available on GitHub. The link
    is provided in the *Technical requirements* section:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将使我们能够详细了解每个语句。最初，我们将定义所需的变量和方法，然后对每个语句进行处理。以下代码可在 GitHub 上找到。链接在*技术要求*部分提供：
- en: '[PRE7]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the following code block, logical `OR` (`|`) shows usage of the `|` operator.
    We have two Boolean expressions in the following code block that are evaluated
    at runtime and return either `true` or `false`. This operator always returns `true`
    except when both operands return `false`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码块中，逻辑 `OR` (`|`) 展示了 `|` 运算符的用法。以下代码块中有两个布尔表达式在运行时评估并返回 `true` 或 `false`。此运算符始终返回
    `true`，除非两个操作数都返回 `false`：
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the following code block, logical `AND` shows how the `&` operator can be
    used. Logical `AND` evaluates both operands and returns `true` if both operands
    are evaluated as `true`; otherwise, it returns `false`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码块中，逻辑 `AND` 展示了 `&` 运算符的用法。逻辑 `AND` 评估两个操作数，如果两个操作数都评估为 `true`，则返回 `true`；否则返回
    `false`：
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the following code clock, the conditional `AND` (`&&`) illustrates the `&&`
    operator. This operator evaluates the first operator and, if it is `true`, it
    evaluates the second operator. Otherwise, it returns `false`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码块中，条件 `AND` (`&&`) 说明了 `&&` 运算符。此运算符评估第一个操作数，如果它是 `true`，则评估第二个操作数。否则，它返回
    `false`：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the following code block, the conditional `OR` (`||`) illustrates the `||`
    operator. This operator returns `true` if any of the operands is `true`; otherwise,
    it returns `false`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码块中，条件 `OR` (`||`) 说明了 `||` 运算符。此运算符如果任一操作数为 `true`，则返回 `true`；否则返回 `false`：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the following code, the logical `XOR` (`^`) explains the `^` operator on
    `bool` operands. This returns `true` if one of the operands is `true`. This is
    similar to the logical `OR` operator:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，逻辑 `XOR` (`^`) 解释了 `^` 运算符在 `bool` 操作数上的用法。如果其中一个操作数是 `true`，则返回 `true`。这与逻辑
    `OR` 运算符类似：
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Here, we will look at null coalescing and the ternary operator. The null coalescing
    operator, `??`, is used to check if an operand is null before returning its value.
    It returns the value if the first operand is not null; otherwise, it returns the
    second operand. This can be used in a nested form as well.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将探讨空合并和三元运算符。空合并运算符 `??` 用于在返回其值之前检查操作数是否为 `null`。如果第一个操作数不是 `null`，则返回其值；否则，返回第二个操作数。这也可以以嵌套形式使用。
- en: 'The ternary operator, (`?:`), is used to evaluate an expression. If it is `true`,
    then it returns `true-value`; otherwise, it returns `false-value`:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 三元运算符 (`?:`) 用于评估表达式。如果它是 `true`，则返回 `true-value`；否则，返回 `false-value`：
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Understanding conditional/selection statements
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解条件/选择语句
- en: C# offers multiple conditional/selection statements to help us make decisions
    throughout our programming. We can use all of the operators we learned about in
    the previous sections alongside these statements. These statements help the program
    take on a specific flow based on whether the expression is evaluated as `true`
    or `false`. These statements are the most widely used ones in C#.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: C# 提供了多个条件/选择语句，帮助我们在整个编程过程中做出决策。我们可以使用我们在上一节中学到的所有运算符与这些语句一起使用。这些语句帮助程序根据表达式评估为
    `true` 或 `false` 来采取特定的流程。这些语句是 C# 中最广泛使用的语句。
- en: 'The following table lists the available conditional/selection statements:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了可用的条件/选择语句：
- en: '| **Expression** | **Description** |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| **Expression** | **描述** |'
- en: '| `If..else` | If statements evaluate the expression that''s provided. If it
    is `true`, then the statements are executed. If it is `false`, then else statements
    are executed. |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| `If..else` | 如果语句评估提供的表达式。如果它是 `true`，则执行这些语句。如果它是 `false`，则执行 `else` 语句。|'
- en: '| `Switch..case..default` | Switch statements evaluate a specific expression
    and execute the switch section if the pattern matches the match expression. |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| `Switch..case..default` | Switch 语句评估特定表达式，如果模式与匹配表达式匹配，则执行 switch 部分。|'
- en: '| `break` | `break` allows us to terminate a control flow and move on to the
    next statement. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| `break` | `break` 允许我们终止控制流并继续执行下一个语句。|'
- en: '| `goto` | `goto` is used to transfer control to a specific label when the
    expression evaluates to `true`. |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `goto` | `goto` 用于在表达式评估为 `true` 时将控制转移到特定标签。|'
- en: In the following subsections, we will cover each of these statements in detail.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下小节中，我们将详细介绍这些语句。
- en: if...else
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: if...else
- en: Using the `if` statement is simple and easy in a scenario where the user wants
    to execute a specific code block when a condition is met. C# provides us with
    widely used if statements that allow us to achieve the desired functionality.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在用户希望满足条件时执行特定代码块的场景中，使用 `if` 语句简单且容易。C# 提供了广泛使用的 `if` 语句，使我们能够实现所需的功能。
- en: '`If` (`true`) then-statements `Else` (`false`) `else`-statements. The following
    is the general syntax of the `If / Else` statement:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`If` (`true`) then-语句 `Else` (`false`) else-语句。以下为 `If / Else` 语句的一般语法：'
- en: '[PRE14]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: When the Boolean expression evaluates to true, `then-statements` are executed,
    and when the Boolean expression evaluates to false, `else-statements` are executed.
    When the Boolean expression evaluates to either true or false, the program allows
    you to execute single or multiple statements. However, multiple statements need
    to be enclosed in curly braces, `{}`. This will ensure that all the statements
    are executed in one context and in sequence. This is also called a **code block**.
    For single statements, these braces are optional, but they are recommended from
    a code readability point of view. Also, we need to understand that the scope of
    the variables is limited to the code block they were defined in.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 当布尔表达式评估为 `true` 时，执行 `then-statements`；当布尔表达式评估为 `false` 时，执行 `else-statements`。当布尔表达式评估为
    `true` 或 `false` 时，程序允许你执行单个或多个语句。然而，多个语句需要用花括号 `{}` 括起来。这将确保所有语句在一个上下文中按顺序执行。这也被称为
    **代码块**。对于单个语句，这些括号是可选的，但从代码可读性的角度来看，它们是推荐的。此外，我们需要理解变量的作用域仅限于它们被定义的代码块内。
- en: The else statement is optional. If this is not provided, the program evaluates
    the Boolean expression and executes the `then-statement`. At any given time, either
    the `then-statements` or the `else-statements` of an `if-else` statement will
    be executed.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: else语句是可选的。如果没有提供，程序将评估布尔表达式并执行`then-statement`。在任何给定的时间，`if-else`语句的`then-statements`或`else-statements`中只有一个会被执行。
- en: 'Let''s look at a few examples. In the following code block, we have already
    set the condition variable to `true`, so when the Boolean expression in the if
    statement is evaluated, it returns `true` and the code block (`then-statement`)
    is executed. `Else-statement` is ignored:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看几个例子。在下面的代码块中，我们已经将条件变量设置为`true`，所以当if语句中的布尔表达式被评估时，它返回`true`，并执行代码块（`then-statement`）。`Else-statement`被忽略：
- en: '[PRE15]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In the following scenario, if the statement doesn''t include the else part,
    when the Boolean expression is evaluated to `true`, `then-statements` is executed
    by default:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下场景中，如果语句不包括else部分，当布尔表达式评估为`true`时，默认情况下将执行`then-statements`：
- en: '[PRE16]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: C# also allows nested `if` and nested `else` statements. In the following code,
    we will see how nested if statements can be used in a program.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: C#还允许嵌套的`if`和嵌套的`else`语句。在下面的代码中，我们将看到如何在程序中使用嵌套的if语句。
- en: 'When condition `1` is evaluated to `true`, by default, the then-statements
    of condition `1` are executed. Similarly, when condition `2` is evaluated to `true`,
    the then-statements of condition `2` are executed:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当条件`1`评估为`true`时，默认情况下，将执行条件`1`的`then-statements`。同样，当条件`2`评估为`true`时，将执行条件`2`的`then-statements`：
- en: '[PRE17]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We can also define a nested if in an `Else` statement. For example, the user
    wants to find out whether the character that was entered was a vowel and, if so,
    to print it. The following code block illustrates how multiple if statements can
    be used. The program checks if the entered character is a vowel or not and prints
    the results:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以在`Else`语句中定义嵌套的if。例如，用户想要找出输入的字符是否是元音，如果是，则打印它。下面的代码块说明了如何使用多个if语句。程序检查输入的字符是否是元音，并打印结果：
- en: '[PRE18]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: switch..case..default
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: switch...case...default
- en: The switch statement evaluates an expression against a condition or multiple
    conditions and executes a labeled code block. These labeled code blocks are called
    switch labels. Each switch label is followed by a break statement which helps
    the program come out of the loop and move on to the next statement. In the preceding
    example, where we checked for vowels using the `if...else` statement, we used
    `if...else` for each vowel and a default value for any other character. This can
    be further simplified using a `switch...case...default` statement.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: switch语句根据条件或多个条件评估一个表达式，并执行一个带标签的代码块。这些带标签的代码块被称为switch标签。每个switch标签后面跟着一个break语句，这有助于程序跳出循环并继续执行下一个语句。在先前的例子中，我们使用`if...else`语句检查元音，我们为每个元音使用`if...else`，并为任何其他字符提供一个默认值。这可以通过使用`switch...case...default`语句进一步简化。
- en: 'All we want is to have a condition expression check the character. If it matches
    any of the matching expressions, that is, a vowel, it prints the vowel; otherwise,
    it prints that it is not a vowel:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所希望的是，一个条件表达式检查字符。如果它与任何匹配的表达式匹配，即元音，则打印元音；否则，打印它不是元音：
- en: '[PRE19]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: break
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: break
- en: 'In C#, the `break;` statement allows us to break a loop or a block of statements
    where it is enclosed. For example, in a recursive function, you might need to
    break after n number of iterations. Alternatively, in an example where you want
    to print the first `5` numbers in a loop of `10` iterations, you will want to
    use the break statement:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在C#中，`break;`语句允许我们在包含它的循环或语句块中跳出。例如，在递归函数中，你可能需要在n次迭代后跳出。或者，在一个例子中，你想要在10次迭代的循环中打印前5个数字，你将想要使用break语句：
- en: '[PRE20]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: goto
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: goto
- en: '`Goto` statements allow the program to transfer control to a specific section
    or code block. This is also called a labeled statement. The classic example is
    the `Switch..case` statement, which we discussed in the previous section. When
    an expression matches a case, the labeled criteria statements in that code block
    are executed:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`Goto`语句允许程序将控制权转移到特定的部分或代码块。这也被称为带标签的语句。经典的例子是我们在上一节讨论的`Switch..case`语句。当一个表达式匹配一个case时，该代码块中的带标签的准则语句将被执行：'
- en: '[PRE21]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: continue
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: continue
- en: 'The `continue;` statement allows the program to skip the execution of statements
    until the end of that code block and continues with the next iteration. For example,
    in a `for` loop of `1..10`, if the continue statement is placed within an expression,
    that is, `i <= 5`, it looks at all 10 numbers, but the action will only be performed
    on 6, 7, 8, 9, and 10:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`continue;`语句允许程序跳过该代码块中语句的执行，直到代码块结束，然后继续下一个迭代。例如，在一个`1..10`的`for`循环中，如果`continue`语句放在一个表达式内，即`i
    <= 5`，它会查看所有10个数字，但只有6、7、8、9和10会执行操作：'
- en: '[PRE22]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Iteration statements
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迭代语句
- en: Iteration statements help execute a loop for a specific number of times or while
    a conditional expression is met. All of the statements in a code block are executed
    in sequence when a loop initiates. If the program encounters a `jump statement`
    or `continue statement`, the execution flow is altered for that scenario. In the
    case of `go-to`, control moves to the labeled code block and, in the case of `continue
    statement`, the loop ignores all of the statements after `continue`.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代语句帮助执行循环特定次数或直到满足条件表达式。当循环开始时，代码块中的所有语句都按顺序执行。如果程序遇到`跳转语句`或`继续语句`，执行流程将改变。在`go-to`的情况下，控制移动到标记的代码块，而在`继续语句`的情况下，循环忽略`继续`之后的全部语句。
- en: 'The following are the keywords that are used in C# when an iteration or a loop
    is required:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在C#中需要迭代或循环时使用的关键字：
- en: '`do`'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`do`'
- en: '`for`'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`for`'
- en: '`foreach...in`'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`foreach...in`'
- en: '`while`'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`while`'
- en: do...while
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: do...while
- en: A `do` statement is always used along with a `while` statement. The `do` statement
    executes a code block and evaluates the `while` expression. If the `while` statement
    evaluates to `true`, the code block is executed again. This continues as long
    as `while` evaluates to `true`. Because the condition expression is evaluated
    after the code block is executed, `do...while` always executes the code block
    at least once.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 总是与`while`语句一起使用`do`语句。`do`语句执行代码块并评估`while`表达式。如果`while`语句评估为`true`，则代码块再次执行。只要`while`评估为`true`，这个过程就会继续。因为条件表达式是在代码块执行之后评估的，所以`do...while`总是至少执行代码块一次。
- en: '`break;`, `continue;`, `return`, or `throw` can be used to come out of this
    loop any time during execution:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`break;`、`continue;`、`return`或`throw`可以在执行过程中任何时候退出这个循环：'
- en: '[PRE23]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: for
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: for
- en: Unlike `do..while`, `for` evaluates the condition expression first and if `true`,
    executes the code block. The code block will not be executed once unless the condition
    is true. Similar to `do..while`, we can come out of the loop using the `return`,
    `throw`, `goto`, or `continue` statements.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 与`do..while`不同，`for`首先评估条件表达式，如果为`true`，则执行代码块。一旦条件为真，代码块才会执行。与`do..while`类似，我们可以使用`return`、`throw`、`goto`或`continue`语句退出循环。
- en: 'Take a look at the following `for` statement''s structure:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下以下`for`语句的结构：
- en: '[PRE24]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The initializer, condition, and iterator are all optional. The body can be
    one statement or an entire code block:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化器、条件、迭代器都是可选的。主体可以是一行语句或整个代码块：
- en: '[PRE25]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Initializer section
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始化部分
- en: 'This section is executed only once. When the program''s control encounters
    a `for` loop, the initialization section is triggered. `#` allows one or more
    of the following statements in the initializer section of the `for` loop, separated
    by a comma:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这个部分只执行一次。当程序控制遇到`for`循环时，初始化部分被触发。`#`允许在`for`循环的初始化部分使用一个或多个以下语句，语句之间用逗号分隔：
- en: Declaration of the local loop variable. This is not available outside of the
    loop.
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 局部循环变量的声明。这个变量在循环外部不可用。
- en: An assignment statement.
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个赋值语句。
- en: Method invocation.
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法调用。
- en: Pre/post increment or decrement.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前置/后置递增或递减。
- en: New object creation.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新对象创建。
- en: Await expression. We will look at this in more detail in the upcoming chapters.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等待表达式。我们将在接下来的章节中更详细地探讨这个问题。
- en: Condition section
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 条件部分
- en: As we mentioned earlier, this is an optional section. If it's not provided,
    by default, it is evaluated as `true`. If it is provided, the condition expression
    is evaluated before executing every iteration. If the condition evaluates to `false`,
    the loop is terminated.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前提到的，这是一个可选部分。如果没有提供，默认情况下，它被评估为`true`。如果提供了，则在每次迭代执行之前评估条件表达式。如果条件评估为`false`，则循环终止。
- en: Iteration section
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迭代部分
- en: The iteration section defines what happens to the body of the loop. As detailed
    in the *Initializer section* section, it can contain one or more of the aforementioned
    statements.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代部分定义了循环体的行为。正如在 *初始化器部分* 中详细说明的那样，它可以包含上述一个或多个语句。
- en: Examples of rare usage for statements
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语句的罕见用法示例
- en: 'Here is an example for your reference:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个参考示例：
- en: '[PRE26]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: foreach...in
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: foreach...in
- en: '`Foreach` is applicable to instances of the `IEnumerable` type or Generic collections.
    This works similar to the `for` loop. `Foreach` is not just limited to these types;
    it can also be applied to any instance that implements the `GetEnumerator` method
    without parameters and returns a class, struct, or interface type. `Foreach` can
    also be applied to types that are returned by the `Current` property of `GetEnumerator`
    and parameter less `MoveNext` methods, which return a bool value.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`Foreach` 可用于 `IEnumerable` 类型或泛型集合的实例。这与 `for` 循环类似工作。`Foreach` 不仅限于这些类型；它还可以应用于任何实现无参数
    `GetEnumerator` 方法并返回类、结构或接口类型的实例。`Foreach` 还可以应用于由 `GetEnumerator` 的 `Current`
    属性和参数较少的 `MoveNext` 方法返回的类型，这些方法返回一个布尔值。'
- en: From C# 7.3 onward, the `Current` property returns a reference to the return
    value (`ref T`), where `T` is of the collection element type.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 从 C# 7.3 开始，`Current` 属性返回对返回值的引用（`ref T`），其中 `T` 是集合元素类型。
- en: 'In the following example, we declare the list of strings and would like to
    iterate through the list and display every item on the screen:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们声明了一个字符串列表，并希望遍历列表，在屏幕上显示每个项目：
- en: '[PRE27]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '`IEnumerator` has a property called `Current` and a method called `MoveNext`.
    As the `foreach` loop works to iterate the throw collections that implement these
    two, it keeps track of which item in the collection is currently being evaluated
    and processed. This makes sure that control is not passed through the end of the
    collection. Also, the `foreach` loop doesn''t allow the user to make changes to
    the initialized loop variable but does allow them to modify the value in the object
    that''s referred to in the variable.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`IEnumerator` 有一个名为 `Current` 的属性和一个名为 `MoveNext` 的方法。由于 `foreach` 循环旨在迭代实现这两个方法的集合，它跟踪集合中当前正在评估和处理的项目。这确保了控制不会传递到集合的末尾。此外，`foreach`
    循环不允许用户更改初始化的循环变量，但允许它们修改变量引用的对象中的值。'
- en: while
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: while
- en: 'Similar to the `for` loop, a condition is evaluated before we execute the code
    block. This means that the code block is either executed more than once or not
    executed at all. Just like any other loop, you can come out of the loop using
    the `break`, `continue`, `return`, or `throw` statements:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `for` 循环类似，在执行代码块之前会评估条件。这意味着代码块要么执行多次，要么根本不执行。就像任何其他循环一样，您可以使用 `break`、`continue`、`return`
    或 `throw` 语句退出循环：
- en: '[PRE28]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Summary
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we looked at Unary operators, relational operators, shift operators,
    and equality, conditional, and logical operators, which can be used with one or
    two operands and evaluated as boolean expressions using logical and conditional
    operators.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了算术运算符、关系运算符、移位运算符以及相等、条件和逻辑运算符，这些运算符可以与一个或两个操作数一起使用，并使用逻辑和条件运算符作为布尔表达式进行评估。
- en: We looked at conditional statements and selective statements, which help us
    make decisions. Some examples of these are the if condition, then statements,
    and else statements. Switch...case...default helps match multiple expressions
    and execute multiple switch labels.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们探讨了条件语句和选择性语句，这些语句帮助我们做出决策。这些语句的例子包括 if 条件、then 语句和 else 语句。`switch...case...default`
    帮助匹配多个表达式并执行多个 switch 标签。
- en: We also looked at iteration statements, which allow users to loop through a
    collection. When they're used with jump statements such as `goto`, `continue`,
    and so on, they can exit from the loop.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还探讨了迭代语句，它允许用户遍历一个集合。当与 `goto`、`continue` 等跳转语句一起使用时，它们可以退出循环。
- en: In the next chapter, we will look into delegates and events in detail. Delegates
    and events play a major role in C# programming. Being able to call back delegates
    for the base for events allows us to decouple our program. We will also understand
    Lambda expressions, which can be used to create delegates. These are also called
    **anonymous** methods.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将详细探讨委托和事件。委托和事件在 C# 编程中扮演着重要角色。能够为事件调用回委托使我们能够解耦我们的程序。我们还将了解 Lambda
    表达式，它可以用来创建委托。这些也被称为 **匿名** 方法。
- en: Questions
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: You have a scenario where you are evaluating a lot of conditions. In one particular
    scenario, you want both operands to be evaluated and, if true, execute the code
    block. Which one of the following statements would you use?
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你有一个评估很多条件的情况。在某个特定场景中，你想要评估两个操作数，如果为真，则执行代码块。以下哪个语句你会使用？
- en: '`&&`'
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`&&`'
- en: '`||`'
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`||`'
- en: '`&`'
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`&`'
- en: '`^`'
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`^`'
- en: You are using a `for` loop in your code and want to execute a specific code
    block if a condition is met. Which one of the following statements would you use?
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你在代码中使用`for`循环，并且想要在满足条件时执行特定的代码块。以下哪个语句你会使用？
- en: '`break;`'
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`break;`'
- en: '`continue;`'
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`continue;`'
- en: '`throw;`'
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`throw;`'
- en: '`goto;`'
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`goto;`'
- en: In your program, there is a code block that you want to execute at least once
    and execute until the condition evaluates to true. Which of the following statements
    would you use?
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的程序中，有一个你想要至少执行一次并且直到条件评估为真才停止执行的代码块。以下哪个语句你会使用？
- en: '`While;`'
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`While;`'
- en: '`Do...while;`'
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Do...while;`'
- en: '`For;`'
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`For;`'
- en: '`foreach;`'
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`foreach;`'
- en: Answers
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 答案
- en: '**c**'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**c**'
- en: '**d**'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**d**'
- en: '**b**'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**b**'
- en: Further reading
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: More information on statements, expressions, and operators can be found at [https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/statements-expressions-operators/](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/statements-expressions-operators/).
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于语句、表达式和操作符的信息可以在[https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/statements-expressions-operators/](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/statements-expressions-operators/)找到。
- en: There is a video available on the Packt Publishing site that's helpful as well.
    It's called *Programming in C# .NET* ([https://search.packtpub.com/?query=70-483&refinementList%5Breleased%5D%5B0%5D=Available](https://search.packtpub.com/?query=70-483&refinementList%5Breleased%5D%5B0%5D=Available)).
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: Packt Publishing网站上有一个有帮助的视频。它被称为*Programming in C# .NET* ([https://search.packtpub.com/?query=70-483&refinementList%5Breleased%5D%5B0%5D=Available](https://search.packtpub.com/?query=70-483&refinementList%5Breleased%5D%5B0%5D=Available))。
