- en: Chapter 11. ALM – Project and Release Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter explains the essentials of version control and automated continuous
    integration workflows. Source control options, as well as automated build strategies,
    will be demonstrated for Xamarin projects. Additional topics such as live telemetry
    collection and beta application distribution hubs will also be covered. This chapter
    is divided into the following sections:'
  prefs: []
  type: TYPE_NORMAL
- en: Source control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuous integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automated testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Beta deployment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Live telemetry
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Source control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Regardless of working as a team or as an individual, source control or version
    control remains a fundamental element of a software project development pipeline.
    Source code repository is the term used to describe the code management storage
    that deals with the versioning and consolidation of the code base. Additional
    features of source code repositories may include, but are not limited to, branching,
    reviews, shelves, and similar productivity-related capabilities. However, these
    items apply to any type of software development project and are out of the scope
    of this book.
  prefs: []
  type: TYPE_NORMAL
- en: For Xamarin projects, developers can utilize several types of repositories.
    The selection of a repository generally depends on the environment setup of choice
    (that is, operating system, development IDE, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: TFVC
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Team Foundation Version Control** (**TFVC**) is the name given to the native
    repository provided by Team Foundation Server and its cloud-based counterpart
    Visual Studio Team Services (formerly, Visual Studio Online). TFVC is a centralized
    version control system where the version history is kept in a centralized server
    repository and the clients have only one version (that is, the workspace version)
    of each file.'
  prefs: []
  type: TYPE_NORMAL
- en: TFVC provides a very familiar source code management toolset for Xamarin developers
    accustomed to the Microsoft development stack. For Xamarin developers using Windows
    and Visual Studio, TFVC is an ideal choice since it has native integration to
    Visual Studio. Source code management is implemented on the premise of "check-in"
    and "check-out" actions. Each code check-in can additionally include references
    to project metadata artifacts such as tasks, features, and bugs. Associating change
    sets (that is, a bundle of source code files to be checked-in) and project metadata
    provides an ideal development pipeline for developers working in a team.
  prefs: []
  type: TYPE_NORMAL
- en: For developers using Xamarin Studio on Windows or Mac OS, the only available
    option to use TFVC is to install Team Explorer Everywhere. Team Explorer Everywhere
    is an Eclipse plugin, which can be installed on Mac OS and employed to check in
    and check out source code items. Developers using Xamarin Studio on Windows can
    still install and use the free editions of Visual Studio to access TFS servers.
  prefs: []
  type: TYPE_NORMAL
- en: Git
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Git**, unlike TFVC, is a distributed version control system where each developer
    has a clone of the entire source repository, and each clone is managed locally
    until the changes are published to the central server. Developers are also free
    to create private local branches and switch from one branch to another without
    much hassle. Branches can be merged, published, or closed according to the requirements.'
  prefs: []
  type: TYPE_NORMAL
- en: Xamarin Studio has native support for Git and developer commands such as `pull`,
    `clone`, `commit`, and `push` can be executed within the IDE. This native support
    makes Git repositories ideal candidates for developers using a Mac-based development
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio also supports Git repositories and the classic Pull-Commit-Push
    flow. In addition to Visual Studio support, with recent updates to Visual Studio
    Team Services it is possible to create team projects using a Git repository. The
    selection of the Version Control type does not interfere with other project related
    options or the build setup. However, it is currently not possible to use the project
    management related features (for example, associating change sets with task items)
    using a Git repository.
  prefs: []
  type: TYPE_NORMAL
- en: '![Git](img/B04693_11_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1: Team Foundation Server with Git'
  prefs: []
  type: TYPE_NORMAL
- en: It is also possible to set up a team project that utilizes multiple types of
    repositories. These repositories can be accessed using only the latest version
    of Visual Studio (that is, Visual Studio 2015 Update 1) at the moment.
  prefs: []
  type: TYPE_NORMAL
- en: The next section provides additional integration options for scenarios involving
    TFS and Git repositories.
  prefs: []
  type: TYPE_NORMAL
- en: TFS/Git scenarios
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In certain scenarios, developers can choose, or are obliged to use, Git repositories
    together with a centralized TFVC repository (for example, developers with a Mac
    OS development setup do not have direct integration with TFVC). In this kind of
    a situation, there are several available utilities and implementation patterns
    that can help teams prepare their development infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Git bridge
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of the integration paths that can be employed is the Git-TF tool maintained
    on CodePlex by Microsoft. The Git-TF tool is a platform agnostic tool written
    in Java. It utilizes TFVC APIs to enable developers to use a TFS repository together
    with a local Git repository.
  prefs: []
  type: TYPE_NORMAL
- en: In this integration path, either a single member or several members of a Xamarin
    development team can use a local or shared Git repository synchronized with the
    central repository using the Git-TF tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a setup in which the individual developer uses a local Git repository in
    sync with TFVC, the TFS repository first needs to be cloned to the local machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After cloning, development can continue on the local machine using the Git
    repository. Local commit executions will not be reflected on the central repository.
    In the meantime, the central repository can be merged with the local repository
    using the `pull` command of Git-TF:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the development task is complete, the code can be checked in to TFS using
    the `checkin` command (instead of `git push`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Git-TF provides the option to associate/resolve work items on TFS and include
    check-in comments similar to a standard code check-in.
  prefs: []
  type: TYPE_NORMAL
- en: '![Git bridge](img/B04693_11_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2: Git with TFVC repository'
  prefs: []
  type: TYPE_NORMAL
- en: Another possibility would be to configure a shared Git repository for several
    team members so that each developer can clone it to their local environment and
    use it as a branch. In this setup, code merging and synchronization between the
    central repository (TFVC) and the shared Git repository would have to be handled
    by an administrator.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, the Git-TFS tool maintained on GitHub is an open-source project written
    in .NET and provides a bidirectional integration between TFS and Git repositories.
    However, this tool currently does not have a version available for Mac OS. Git-TFS
    provides support for some advanced TFS scenarios related to workspace handling
    and shelvesets.
  prefs: []
  type: TYPE_NORMAL
- en: NuGet packages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As previously discussed, NuGet packages are one of the code sharing strategies
    in cross-platform projects using Xamarin. NuGet packages can also be utilized
    to create the bridge between TFVC and Git, possibly by providing PCL libraries
    for Xamarin target platforms.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, we can consider a scenario where shared projects between Windows
    Store applications and Xamarin.iOS are implemented on a Windows-based development
    environment, whereas Xamarin.iOS development team members use a Mac OS development
    setup with Xamarin Studio. The team project in this example can include a TFVC
    repository (for shared code and Windows Store app implementation) and a Git repository
    (for Xamarin.iOS development). The synchronization between the two servers can
    be handled through NuGet packages.
  prefs: []
  type: TYPE_NORMAL
- en: NuGet packages can be built and deployed with **Continuous Integration** (**CI**)
    build processes using out-of-the-box TFS build task definitions, making the NuGet
    process part of the development pipeline and continuous integration.
  prefs: []
  type: TYPE_NORMAL
- en: '![NuGet packages](img/B04693_11_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3: Automated build for NuGet packages'
  prefs: []
  type: TYPE_NORMAL
- en: For NuGet package distribution, on top of the commercially available products
    (for example, the Artifactory server), Visual Studio Team Services can also be
    used to create NuGet source feeds and publish them privately for members of the
    development team.
  prefs: []
  type: TYPE_NORMAL
- en: Subversion (SVN)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Subversion is another source control repository type, generally referred to
    as SVN or Apache Subversion. Subversion repositories can be readily created in
    Mac OS developer environments using XCode development tools. Xamarin Studio has
    native support for SVN (version 1.6 or higher). Subversion can be an easy solution
    for individual Xamarin developers who prefer a Mac-based development environment.
    Even though there are publicly available Visual Studio extensions and integration
    tools for the Windows environment enabling the use of SVN, natively supported
    Git and TFVC are generally preferred over SVN.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Continuous integration (CI) is the name for the software practice involving
    the aforementioned source control management strategies, together with automated
    build/deploy and testing phases. Nowadays, CI generally refers to the automated
    build/deploy and testing phases of **Application Lifecycle Management** (**ALM**).
  prefs: []
  type: TYPE_NORMAL
- en: For Xamarin projects, software engineers are free to use a vast number of CI
    management tools, available both commercially and with freemium licensing (that
    is, limited features for free usage).
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio Team Services
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Visual Studio Team Services** (**VSTS**) is the cloud-based version of Team
    Foundation Server and provides convenient features for Xamarin developers. Currently
    available as a freemium subscription-based service, teams are free to manage a
    limited number projects with a limited number of team members.'
  prefs: []
  type: TYPE_NORMAL
- en: In VSTS team projects, both Git and TFVC development repositories can be managed,
    planned, automatically built, tested, and possibly deployed (see the Beta deployment
    section for VSTS integration).
  prefs: []
  type: TYPE_NORMAL
- en: '![Visual Studio Team Services](img/B04693_11_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4: TFS automated Xamarin builds'
  prefs: []
  type: TYPE_NORMAL
- en: Out-of-the-box build templates that include Xamarin.iOS and Xamarin.Android
    projects can be executed on hosted build agents. While the latter build template
    can be executed with a shared hosted build agent, Xamarin.iOS needs a specialized
    build host with Xamarin.iOS capabilities to be associated with the team project.
  prefs: []
  type: TYPE_NORMAL
- en: '![Visual Studio Team Services](img/B04693_11_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5: VSTS hosted Android build agent'
  prefs: []
  type: TYPE_NORMAL
- en: For the Xamarin.Android build template, developers are required to insert Xamarin
    license details. However the build agent does not occupy a license seat except
    for the duration of the build. The build definition template includes an activation
    step where the build agent is registered as an occupant of the Xamarin license,
    and another step after the build is complete to remove the license.
  prefs: []
  type: TYPE_NORMAL
- en: In VSTS, Xamarin Test Cloud can also be integrated to execute automated acceptance
    tests using the default build template.
  prefs: []
  type: TYPE_NORMAL
- en: TeamCity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TeamCity (JetBrains) is another CI server, which provides automated builds and
    a great number of integration scenarios for various platforms. TeamCity can be
    downloaded and installed locally on multiple operating systems (including OS X
    and Windows) and is available as a freemium product (with limited free build agent
    installations and build configurations).
  prefs: []
  type: TYPE_NORMAL
- en: For Xamarin development teams, the biggest advantage of TeamCity is the fact
    that it can be installed on Mac OS. Once the build server is configured (it can
    be on the same machine as the server running the TeamCity server), builds for
    Xamarin.Android and Xamarin.iOS can be triggered on various actions, such as repository
    changes and schedules.
  prefs: []
  type: TYPE_NORMAL
- en: '![TeamCity](img/B04693_11_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6: TeamCity with Xamarin projects'
  prefs: []
  type: TYPE_NORMAL
- en: Additional possible integration scenarios and build steps in terms of Xamarin
    projects involve the Calabash instrumentation of application packages and Xamarin
    Test Cloud submission.
  prefs: []
  type: TYPE_NORMAL
- en: Other
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Xamarin development teams have the luxury to be able to use many other online/cloud-based
    SaaS (Software-as-a-Service) providers, available for both internal and open source
    development. The most popular of these services is GitHub, which provides both
    private and public repositories as a subscription-based service. CI build providers
    such as AppVeyor and Travis CI have native integration with GitHub and can be
    readily used for various platform-specific build configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, Jenkins is another CI server which is available for free and commercial
    installations. Jenkins can be integrated with various repositories and can be
    configured to build and test Xamarin projects.
  prefs: []
  type: TYPE_NORMAL
- en: Automated testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Automated testing, in other words running the unit tests or coded UI tests established
    as part of the development effort, is a fundamental part of the continuous integration
    cycle in most development projects.
  prefs: []
  type: TYPE_NORMAL
- en: To prepare a test fixture for a Xamarin project, developers can use various
    frameworks such as Visual Studio testing suite, nUnit, and xUnit. Moreover, Xamarin
    development teams have the freedom to choose from the available list of source
    control repositories and CI platforms. Fortunately, each of these aspects of a
    CI pipeline can be integrated without much hassle, due to the fact that the aforementioned
    testing frameworks provide test adapters for various configurations (except for
    the native Visual Studio testing framework).
  prefs: []
  type: TYPE_NORMAL
- en: For instance, let us consider a Xamarin project hosted on the TFVC repository
    on Visual Studio Team Services, where the unit test fixture is written utilizing
    the xUnit framework. As a first step, in order for the TFS build agent to facilitate
    the xUnit adapter to run the unit test fixture, the test adapter has to be installed
    as a NuGet package for the solution.
  prefs: []
  type: TYPE_NORMAL
- en: '![Automated testing](img/B04693_11_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7: xUnit test adapter'
  prefs: []
  type: TYPE_NORMAL
- en: After the adapter package is deployed to the source control repository, the
    team build can now include the testing step using the custom adapter.
  prefs: []
  type: TYPE_NORMAL
- en: In Visual Studio team builds, if the custom adapter is not defined, the tests
    are run using the default adapter. The build step, in this case, would report
    that no tests could be found.
  prefs: []
  type: TYPE_NORMAL
- en: '![Automated testing](img/B04693_11_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8: xUnit test adapter setup'
  prefs: []
  type: TYPE_NORMAL
- en: In this configuration, the `packages` folder of the solution for NuGet packages
    was used as the source directory (for example, `$(Build.SourcesDirectory)\Xamarin.Master.Fibonacci\packages\<path>`).
    It is also possible to use the `binaries` folder of the test project to access
    the adapter binary. It is also important to note that the MSBuild task prior to
    the Visual Studio Test task for the test projects is essential before executing
    the actual test fixture.
  prefs: []
  type: TYPE_NORMAL
- en: Beta deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Beta testing is an essential part of a Xamarin development pipeline. Using beta
    testing distribution hubs such as HockeyApp, Crashlytics, or Testflight, application
    packages can be delivered to beta users/testers. For Windows Phone 8.1 and Android,
    the distribution of application packages using simple networking methods is also
    possible (for example, using shared network locations, download links, and so
    on).
  prefs: []
  type: TYPE_NORMAL
- en: HockeyApp
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: HockeyApp stands out as the only beta distribution hub that supports all Xamarin
    target platforms, including Windows Runtime, and has integration capabilities
    for various CI configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Initially a beta testing platform for iOS and Android, the Stuttgart-based company
    expanded their SDK to support Microsoft mobile development platforms. HockeyApp
    was ultimately acquired by Microsoft. However, it continues to support various
    mobile platforms, including Mac OS.
  prefs: []
  type: TYPE_NORMAL
- en: '![HockeyApp](img/B04693_11_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9: HockeyApp app dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: Application packages for the HockeyApp distribution hub can be uploaded directly
    from the web interface. Team members and/or beta testers should download the HockeyApp
    application to their mobile devices to be able to download the latest packages
    from the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to manual release, HockeyApp provides two public APIs: one for
    clients and one for developers. The Client API is used to communicate with the
    server to deliver application runtime-related analytics, while the Developer API
    provides developers with the necessary functionality to upload and distribute
    application packages.'
  prefs: []
  type: TYPE_NORMAL
- en: For Visual Studio Team Services (Visual Studio Online) and Jenkins, there are
    integration modules that make it possible to publish applications as part of CI
    builds.
  prefs: []
  type: TYPE_NORMAL
- en: '![HockeyApp](img/B04693_11_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10: HockeyApp TFS build step'
  prefs: []
  type: TYPE_NORMAL
- en: HockeyApp suite also includes crash analytics features that can be integrated
    into bug tracking systems such as Visual Studio Team Services, Assembla, BaseCamp,
    BitBucket, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: HockeyApp offers free and enterprise licensing options.
  prefs: []
  type: TYPE_NORMAL
- en: Crashlytics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Crashlytics is another beta analysis platform, which provides distribution and
    crash reporting features for Xamarin.iOS and Xamarin.Android applications.
  prefs: []
  type: TYPE_NORMAL
- en: Crashlytics provides integration with other collaboration tools such as PivotalTracker,
    JIRA, GitHub, and BitBucket. It also offers a public API, providing service hooks
    for various integration scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: Crashlytics was recently purchased by Twitter and continues to support the two
    Xamarin target platform applications. Crashlytics is currently part of the Twitter
    fabric development platform and is offered as a free service.
  prefs: []
  type: TYPE_NORMAL
- en: TestFlight
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: TestFlight, started as a beta testing platform for iOS and Android applications,
    immediately cancelled support for Android applications after their acquisition
    by Apple. It is now part of the Apple Developer Program and is only accessible
    through iTunes Connect.
  prefs: []
  type: TYPE_NORMAL
- en: Submissions to TestFlight are no different from actual Apple Store application
    packages. The final distributable package (`.ipa`) should be prepared for submission
    and uploaded using the Application Loader to Apple servers (see [Chapter 12](ch12.html
    "Chapter 12. ALM – App Stores and Publishing"), *ALM – App Stores and Publishing*,
    for further information).
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, this process cannot currently be automated as there are no build
    integration options and no public API.
  prefs: []
  type: TYPE_NORMAL
- en: Package distribution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In contrast to iOS devices, both Android and Windows Phone devices can install
    and run application packages that are distributed via the Internet or mobile storage.
  prefs: []
  type: TYPE_NORMAL
- en: 'For Windows Phone 8 and 8.1, the testing device should be configured as a developer
    device using the Windows Phone SDK. In order for a developer to unlock Windows
    Phone devices, a Windows developer account is necessary (this is a free subscription):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Package distribution](img/B04693_11_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11: Windows Phone developer unlock'
  prefs: []
  type: TYPE_NORMAL
- en: After the registration step, developers can install application packages either
    using the SDK tools or, if there is hardware support, using an SD card and the
    default store application.
  prefs: []
  type: TYPE_NORMAL
- en: For Android platform, there are available freeware tools that can be used to
    install `.apk` packages. The default package manager can also be used to install
    custom application packages shared as a network resource.
  prefs: []
  type: TYPE_NORMAL
- en: Live telemetry
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Live telemetry is the term used to define the analytical information collected
    from applications being used by their target audience or beta testers. These analytic
    values are invaluable for feature rich mobile applications to identify how the
    customers are actually engaging with these applications on different hardware
    configurations, since Xamarin applications may be targeting devices running iOS,
    Android, or Windows Phone with various hardware configurations and peripherals.
  prefs: []
  type: TYPE_NORMAL
- en: With telemetry, development teams can gather information about user input patterns
    in different scenarios, application utilization flows, and platform impediments/strengths.
    While statistical information such as this is essential for UX design, values
    such as crash/exception details, network connectivity, memory consumption, and
    other diagnostic data on real-world usage scenarios can be useful as health indicators
    for the application.
  prefs: []
  type: TYPE_NORMAL
- en: There are numerous telemetry providers and frameworks for Xamarin target platforms.
    These frameworks can be included in Xamarin applications through binding packages
    (for example, Google Analytics for Android applications), and telemetry platforms
    targeting Xamarin applications, such as Xamarin Insights and/or Microsoft Application
    Insights, can be included in Xamarin implementations.
  prefs: []
  type: TYPE_NORMAL
- en: Xamarin Insights
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Xamarin Insights is the analytics and crash reporting platform built specifically
    for Xamarin target platforms. Xamarin Insights implementations can be used in
    each Xamarin platform project including Xamarin.Forms applications and Windows
    Runtime. This is a subscription-based service and live telemetry can be seen on
    the web-based dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: In order to start using Xamarin Insights in a cross-platform application solution,
    Xamarin Insights NuGet package(s) should be included in platform-specific projects.
    After the framework client assemblies are introduced, Xamarin.Insights runtime
    can be initialized using the subscription key.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, if we were to include and initialize the Xamarin Insights module
    in a Xamarin.Android application using MVVMCross implementation, the initialization
    can be included in the application setup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In this implementation, the `Identify` method is an optional call. It is used
    to identify user-specific traits rather than general usage patterns.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: No matter which platform is running the Xamarin Insights content, the application
    should be enabled to use the Internet connection (that is, application manifest).
    It is also advised to enable permissions such as `BATTERY_STATS`, `READ_LOGS`,
    `ACCESS_WIFI_STATE`, and so on, on a Xamarin.Android application to collect additional
    information. Similarly, on Windows Phone 8, `ID_CAP_IDENTIFY_DEVICE` capability
    must be added to identify the specific device while recording telemetry.
  prefs: []
  type: TYPE_NORMAL
- en: Once the Xamarin Insights context is initialized, additional reporting calls
    can be executed on shared libraries (for example, ViewModel implementations).
  prefs: []
  type: TYPE_NORMAL
- en: Application Insights
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Application Insights is another subscription based service/platform that can
    be used with Xamarin applications. This cloud-based suite was initially released
    by Microsoft for web applications, but it slowly made its way into mobile applications.
    The application insights NuGet package(s) can be used with Xamarin.Android (API
    level 15 and higher) and Xamarin.iOS (version 6 and higher) applications. Application
    Insights, with a limited feature set, can be used on an unlimited number of devices
    with a limited amount of data processing for free.
  prefs: []
  type: TYPE_NORMAL
- en: 'Application Insights usage scenarios are, in essence, very similar to Xamarin
    Insights. The initial step is to use the platform-specific initializer to start
    the telemetry session. Once the telemetry context is created, an instance of a
    `TelemetryClient` can be used to either start automatic diagnostic recording or
    send manual data to the insights server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Together with crash analytics provided by HockeyApp, usage statics and server-side
    data (if any) with Application Insights for mobile application, live telemetry
    can provide valuable insights about Xamarin applications.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Application Insights is slowly being transitioned out in favor of HockeyApp.
    This transition was first announced in November 2015 during the Connect() conference.
    As of April 2016, Microsoft will stop accepting new submissions for Xamarin applications
    as well as Windows Store and Windows Phone apps. In June 2016, the application
    insights data for mobile apps is completely being migrated to the HockeyApp.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Overall, tools available for the .NET platform can be easily utilized to manage
    and streamline the development pipeline tasks. On top of the Microsoft-based offerings,
    there are a number of service providers with the freemium subscription model.
    This can create great opportunities for individual/independent developers.
  prefs: []
  type: TYPE_NORMAL
- en: For source control, the most logical choices are Git and TFVC. While TFVC is
    an ideal solution for developers with a Windows-based development environment
    setup, Git provide native integration to Xamarin Studio on both Windows and Mac
    OS environments.
  prefs: []
  type: TYPE_NORMAL
- en: Independent from the repository choice, Visual Studio Team Services or other
    CI platforms such as TeamCity can be employed to create automated testing and
    build workflows.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, beta testing and collected telemetry are fundamental elements for Xamarin
    projects. With real use-cases and analytical data on usage patterns, developers
    can fine-tune their applications and avoid problems before the actual release.
  prefs: []
  type: TYPE_NORMAL
- en: In the final chapter, we will be discussing the preparation steps for store
    submission and distribution options for Xamarin applications.
  prefs: []
  type: TYPE_NORMAL
