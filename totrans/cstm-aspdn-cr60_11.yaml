- en: '*Chapter 11*: Configuring Identity Management'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last chapter, we learned about how to add and customize the ASP.NET Core
    Identity UI to enable users to register, log in, and manage their profiles. Unfortunately,
    ASP.NET Core Identity doesn't provide identity management by default.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to learn about how to manage ASP.NET Core Identity
    by using IdentityManager2 to create users and roles for your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll cover the following sections:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing IdentityManager2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up IdentityManager2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The topics of this chapter relate to the MVC layer of the ASP.NET Core architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.1 – ASP.NET Core architecture](img/Figure_11.1_B17996.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.1 – ASP.NET Core architecture
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To follow the examples in this chapter, you will need to create an ASP.NET
    Core MVC application. Open your console, shell, or Bash terminal, and change to
    your working directory. Use the following command to create a new MVC application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, open the project in Visual Studio by double-clicking the project file,
    or in VS Code by typing the following command in the already open console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'All of the code samples of this chapter can be found in the GitHub repo for
    this book: [https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter11](https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter11).'
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: This chapter expects you to have completed the steps in the last chapter. As
    an alternative, you can reuse the project from the last chapter and might just
    need to adjust the project names.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing IdentityManager2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IdentityManager is a project that was initially created and owned by Brock Allen
    who also created IdentityServer together with Dominick Baier. Scott Brady ([https://www.scottbrady91.com/aspnet-identity](https://www.scottbrady91.com/aspnet-identity))
    and his employer took over the project, ported it to ASP.NET Core, and released
    it as IdentityManager2 ([https://brockallen.com/2018/07/09/identitymanager2/](https://brockallen.com/2018/07/09/identitymanager2/)).
  prefs: []
  type: TYPE_NORMAL
- en: It is provided via NuGet ([https://www.nuget.org/packages/identitymanager2](https://www.nuget.org/packages/identitymanager2)).
  prefs: []
  type: TYPE_NORMAL
- en: Setting up IdentityManager2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first step is to load the package. Use the already open command line or
    the terminals in VS Code or Visual Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If the package is loaded, open `Program.cs` and add IdentityManager2 to the
    service collection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Change the service registration of ASP.NET Identity from the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This adds some more relevant services to the service collection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, `DefaultTokenProvider` needs to be added:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: That's it with the services for now.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then `IdentityServer` needs to be added to the pipeline. Add it after the authentications
    and authorization middleware:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now we need to connect IdentityManager2 with the database connection that is
    already configured with ASP.NET Identity.
  prefs: []
  type: TYPE_NORMAL
- en: 'This needs the following package to be installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can connect IdentityManager2 with the already existing `ApplicationDbContext`
    that is `IdentityDbContext`, which handles `IdentityUsers` and `IdentityRoles`.
    Don''t forget to add a `using` to `IdentityManager2.AspNetIdentity`. In the code,
    the already existing `ApplicationUser` needs to be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s it to run `IdentityManager`. Type `dotnet watch` in Command Prompt
    to start the application or press *F5* in VS Code or VS. If you now call the application
    in the browser, you will see the UI to manage the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.2 ‒ IdentityManager2](img/Figure_11.2_B17996.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.2 ‒ IdentityManager2
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you can create roles and users:'
  prefs: []
  type: TYPE_NORMAL
- en: Create an **Admin** role and a **User** role. After that, create a User role
    for yourself.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After the User role is created, go to **All Users** and edit the newly created
    user. Here, you can change the user properties and assign both roles to them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.3 ‒ Editing the roles](img/Figure_11.3_B17996.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.3 ‒ Editing the roles
  prefs: []
  type: TYPE_NORMAL
- en: By using IdentityManager, you get a complete tool to manage your users and roles.
    It also works with custom users and custom user properties.
  prefs: []
  type: TYPE_NORMAL
- en: Securing IdentityManager2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I'm sure you recognized that IdentityManager2 was accessible without a login.
    This is by design. You need to restrict access to it.
  prefs: []
  type: TYPE_NORMAL
- en: Scott Brady described a way to use IdentityServer to do that ([https://www.scottbrady91.com/aspnet-identity/getting-started-with-identitymanager2](https://www.scottbrady91.com/aspnet-identity/getting-started-with-identitymanager2)).
    We would also propose doing it that way. Setting up IdentityServer isn't that
    straightforward and isn't covered in this book. Unfortunately, it is not possible
    to use the default ASP.NET Core individual authentication to protect IdentityManager2\.
    It seems the middleware that creates the IdentityManager2 UI doesn't support individual
    authentication and redirects to the ASP.NET Core Identity UI.
  prefs: []
  type: TYPE_NORMAL
- en: It would make sense to create a separate ASP.NET Core application that hosts
    IdentityManager2\. This way, this kind of administrative UI would be completely
    separated from the publicly available application, and you would be able to use
    either OAuth or Azure Active Directory authentication to protect the application.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to add a user interface to manage the users
    and roles of your application. IdentityManager2 is the best and most complete
    solution to manage your identities.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to use content negotiation to create
    different kinds of outputs with only a single HTTP endpoint.
  prefs: []
  type: TYPE_NORMAL
