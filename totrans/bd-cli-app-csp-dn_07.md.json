["```cs\ndotnet add package Spectre.Console\n```", "```cs\nvar interactiveCommand = new Command(\"interactive\", \"Manage bookmarks interactively\")\n{\n};\nrootCommand.AddCommand(interactiveCommand);\ninteractiveCommand.SetHandler(OnInteractiveCommand);\n```", "```cs\nstatic void OnInteractiveCommand()\n{\n}\n```", "```cs\nusing Spectre.Console;\n```", "```cs\nstatic void OnInteractiveCommand()\n{\n    AnsiConsole.Write(new FigletText(\"Bookmarkr\").Centered().\n    Color(Color.SteelBlue));\n}\n```", "```cs\ndotnet run -- interactive\n```", "```cs\npublic static void ShowErrorMessage(string[] errorMessages)\n{\n    Console.OutputEncoding = System.Text.Encoding.UTF8;\n    AnsiConsole.MarkupLine(\n        Emoji.Known.CrossMark + \" [bold red]ERROR[/] :cross_mark:\");\n        foreach(var message in errorMessages)\n    {\n        AnsiConsole.MarkupLineInterpolated($\"[red]{message}[/]\");\n    }\n}\n```", "```cs\npublic static void ShowWarningMessage(string[] errorMessages)\n{\n    Console.OutputEncoding = System.Text.Encoding.UTF8;\n    var m = new Markup(\n        Emoji.Known.Warning + \" [bold yellow]Warning[/] :warning:\"\n    );\n    m.Centered();\n    AnsiConsole.Write(m);\n    AnsiConsole.WriteLine();\n    foreach(var message in errorMessages)\n    {\n        AnsiConsole.MarkupLineInterpolated(\n            $\"[yellow]{message}[/]\"\n        );\n    }\n}\n```", "```cs\npublic static void ShowSuccessMessage(string[] errorMessages)\n{\n    Console.OutputEncoding = System.Text.Encoding.UTF8;\n    AnsiConsole.MarkupLine(Emoji.Known.BeatingHeart + \" [bold green]\n    SUCCESS[/] :beating_heart:\");\n    foreach(var message in errorMessages)\n    {\n        AnsiConsole.MarkupLineInterpolated($\"[green]{message}[/]\");\n    }\n}\n```", "```cs\nstatic void OnInteractiveCommand()\n{\n    bool isRunning = true;\n    while(isRunning)\n    {\n        AnsiConsole.Write(\n            new FigletText(\"Bookmarkr\")\n                .Centered()\n                .Color(Color.SteelBlue)\n        );\n        var selectedOperation = AnsiConsole.Prompt(\n            new SelectionPrompt<string>()\n                .Title(\"[blue]What do you wanna do?[/]\")\n                .AddChoices([\n                    \"Export bookmarks to file\",\n                    \"View Bookmarks\",\n                    \"Exit Program\"\n            ])\n        );\n        switch(selectedOperation)\n        {\n            case \"Export bookmarks to file\":\n                ExportBookmarks();\n                break;\n            case \"View Bookmarks\":\n                ViewBookmarks();\n                break;\n            default:\n                isRunning = false;\n                break;\n        }\n    }\n}\n```", "```cs\nstatic void ExportBookmarks()\n{\n    // ask for the outputfilePath\n    var outputfilePath = AnsiConsole.Prompt(\n          new TextPrompt<string>(\"Please provide the output file name \n          (default: 'bookmarks.json')\")\n          .DefaultValue(\"bookmarks.json\"));\n    // export the bookmarks to the specified file, while showing \n    // progress.\n    AnsiConsole.Progress()\n        .AutoRefresh(true) // Turns on auto refresh\n        .AutoClear(false)   // Avoids removing the task list when \n                            // completed\n        .HideCompleted(false)   // Avoids hiding tasks as they are \n                                // completed\n        .Columns(\n        [\n            new TaskDescriptionColumn(),    // Shows the task \n                                            // description\n            new ProgressBarColumn(),        // Shows the progress bar\n            new PercentageColumn(),         // Shows the current \n                                            // percentage\n            new RemainingTimeColumn(),      // Shows the remaining \n                                            // time\n            new SpinnerColumn(),            // Shows the spinner, \n                                            // indicating that the \n                                            // operation is ongoing\n        ])\n        .Start(ctx =>\n        {\n            // Get the list of all bookmarks\n            var bookmarks = service.GetAll();\n            // export the bookmarks to the file\n            // 1\\. Create the task\n            var task = ctx.AddTask(\"[yellow]exporting all bookmarks to \n            file...[/]\");\n            // 2\\. Set the total steps for the progress bar\n            task.MaxValue = bookmarks.Count;\n            // 3\\. Open the file for writing\n            using (StreamWriter writer = new \n            StreamWriter(outputfilePath))\n            {\n                while (!ctx.IsFinished)\n                {\n                    foreach (var bookmark in bookmarks)\n                    {\n                        // 3.1\\. Serialize the current bookmark as JSON \n                        //and write it to the file asynchronously\n                        writer.WriteLine(JsonSerializer.\n                        Serialize(bookmark));\n                        // 3.2\\. Increment the progress bar\n                        task.Increment(1);\n                        // 3.3\\. Slow down the process so we can see \n                        // the progress (since this operation is not \n                        // that much time-consuming)\n                        Thread.Sleep(1500);\n                    }\n                }\n            }\n        });\n    AnsiConsole.MarkupLine(\"[green]All bookmarks have been \n    successfully exported![/]\");\n}\n```", "```cs\nstatic void ViewBookmarks()\n{\n    // Create the tree\n    var root = new Tree(\"Bookmarks\");\n    // Add some nodes\n    var techBooksCategory = root.AddNode(\"[yellow]Tech Books[/]\");\n    var carsCategory = root.AddNode(\"[yellow]Cars[/]\");\n    var socialMediaCategory = root.AddNode(\"[yellow]Social Media[/]\");\n    var cookingCategory = root.AddNode(\"[yellow]Cooking[/]\");\n    // add bookmarks for the Tech Book category\n    var techBooks = service.GetBookmarksByCategory(\"Tech Books\");\n    foreach(var techbook in techBooks)\n    {\n        techBooksCategory.AddNode($\"{techbook.Name} | {techbook.\n        Url}\");\n    }\n    // ... do the same for the other categories ;)\n    // Render the tree\n    AnsiConsole.Write(root);\n}\n```", "```cs\nbookmarkr link show --name <name of the bookmark>\n```", "```cs\nbookmarkr category change --for-url <url of the bookmark>\n```"]