["```cs\n    <Button Content=\"Click Here\" /> \n    <Button Height=\"36\" Width=\"120\" /> \n```", "```cs\n<Button Content=\"Click Here\" /> \n<Button Content=\"Click Here\" Width=\"120\" Height=\"30\" /> \n```", "```cs\n    <Button> \n      <Button.Background> \n         <SolidColorBrush Color=\"Red\" /> \n      </Button.Background> \n    </Button> \n```", "```cs\n    <Border> \n      <Border.Child> \n        <Button Content=\"Click Here\" /> \n      </Border.Child> \n    </Border> \n```", "```cs\n    <Border> \n        <Border.Child> \n            <Button Content=\"Button One\" /> \n        </Border.Child> \n        <Border.Child> \n            <Button Content=\"Button Two\" /> \n        </Border.Child> \n    </Border> \n```", "```cs\n    <StackPanel>   \n      <StackPanel.Children> \n         <Button Content=\"Button One\" /> \n         <Button Content=\"Button Two\" /> \n      </StackPanel.Children> \n    </StackPanel> \n```", "```cs\n    <StackPanel> \n      <Button Content=\"Button One\" /> \n      <Button Content=\"Button Two\" /> \n    </StackPanel> \n```", "```cs\n    <Button Content=\"Click Here\" Click=\"OnButtonClicked\" /> \n```", "```cs\n    void OnButtonClicked (object sender, RoutedEventArgs e) \n    { \n        // event implementation \n    } \n```", "```cs\n    <?xml version=\"1.0\" encoding=\"utf-8\" ?> \n      <configuration> \n        <startup>  \n          <supportedRuntime            \n           version=\"v4.0\"sku=\".NETFramework,Version=v4.7\" /> \n        </startup> \n      </configuration> \n```", "```cs\n    <Application x:Class=\"CH01.HelloWPFDemo.App\" \n\n      StartupUri=\"MainWindow.xaml\"> \n\n    <Application.Resources> \n\n    </Application.Resources> \n    </Application> \n```", "```cs\nnamespace CH01.HelloWPFDemo \n{ \n    /// <summary> \n    /// Interaction logic for App.xaml \n    /// </summary> \n    public partial class App : Application \n    { \n    } \n} \n```", "```cs\n<Window x:Class=\"CH01.HelloWPFDemo.MainWindow\" \n  xmlns=\n   \"http://schemas.microsoft.com/winfx/2006/xaml/presentation\" \n\n   Title=\"MainWindow\" Height=\"350\" Width=\"525\"> \n  <Grid> \n\n  </Grid> \n</Window> \n```", "```cs\n<Window x:Class=\"CH01.WindowDemo.SecondWindow\" \n  xmlns=\n    \"http://schemas.microsoft.com/winfx/2006/xaml/presentation\" \n\n    Title=\"Second Window\" Height=\"200\" Width=\"300\"> \n    <Grid> \n        <TextBlock Text=\"Second Window Instance\" \n                   HorizontalAlignment=\"Center\" \n                   VerticalAlignment=\"Center\" \n                   FontSize=\"16\"/> \n    </Grid> \n</Window>\n```", "```cs\n<Grid> \n    <Button Content=\"Open Second Window\" \n            Height=\"30\" Width=\"150\" \n            Click=\"OnSecondWindowButtonClicked\"/> \n</Grid> \n```", "```cs\nprivate void OnSecondWindowButtonClicked(object sender,  \nRoutedEventArgs e) \n{ \n    var window = new SecondWindow(); \n    window.Show(); \n} \n```", "```cs\n<Grid> \n    <TextBlock Text=\"This is Page 1\" FontSize=\"20\" \n               HorizontalAlignment=\"Center\"       \n               VerticalAlignment=\"Center\"/> \n    <Button Content=\"Next\" Height=\"30\" Width=\"120\"  \n            Margin=\"20\" \n            HorizontalAlignment=\"Right\"  \n            VerticalAlignment=\"Bottom\" \n            Click=\"OnNextButtonClicked\"/> \n</Grid>\n```", "```cs\nprivate void OnNextButtonClicked(object sender,\n RoutedEventArgs e) \n{ \n  NavigationService.Navigate(new Uri(\"Page2.xaml\", \n   UriKind.Relative)); \n} \n```", "```cs\n<Grid> \n    <TextBlock Text=\"This is Page 2\" FontSize=\"20\" \n               HorizontalAlignment=\"Center\"  \n               VerticalAlignment=\"Center\"/> \n    <Button Content=\"Previous\" Height=\"30\" Width=\"120\"  \n            Margin=\"20\" \n            HorizontalAlignment=\"Right\"  \n            VerticalAlignment=\"Bottom\" \n            Click=\"OnPreviousButtonClicked\"/> \n</Grid> \n```", "```cs\nprivate void OnPreviousButtonClicked(object sender, RoutedEventArgs e) \n{ \n    if (NavigationService.CanGoBack) \n    { \n        NavigationService.GoBack(); \n    } \n} \n```", "```cs\n<NavigationWindow x:Class=\"CH01.PageDemo.MainWindow\" \n  xmlns=\n   \"http://schemas.microsoft.com/winfx/2006/xaml/presentation\" \n\n    Title=\"MainWindow\" Height=\"350\" Width=\"525\" \n    Source=\"Page1.xaml\"> \n\n</NavigationWindow>\n```", "```cs\n<Window x:Class=\"CH01.DialogBoxDemo.MessageDialog\" \n xmlns=\n   \"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n\n    ShowInTaskbar=\"False\" WindowStyle=\"SingleBorderWindow\" \n    Title=\"Message\" Height=\"150\" Width=\"400\"  \n    FontSize=\"14\" Topmost=\"True\" ResizeMode=\"NoResize\"> \n\n    <Grid> \n       <TextBlock TextWrapping=\"Wrap\" Margin=\"8\" \n        Text=\"Thank you for reading 'Windows Presentation \n        Foundation Cookbook'. Click 'OK' to continue next.\"/> \n        <StackPanel Orientation=\"Horizontal\" \n                    VerticalAlignment=\"Bottom\"  \n                    HorizontalAlignment=\"Right\" \n                    Margin=\"4\"> \n            <Button Content=\"OK\" Width=\"60\" Height=\"30\" \n                    Margin=\"4\" IsDefault=\"True\"  \n                    Click=\"OnOKClicked\"/> \n            <Button Content=\"Cancel\" Width=\"60\" Height=\"30\" \n                    Margin=\"4\" IsCancel=\"True\"  \n                    Click=\"OnCancelClicked\"/> \n        </StackPanel> \n    </Grid> \n</Window>\n```", "```cs\nprivate void OnOKClicked(object sender, RoutedEventArgs e) \n{ \n    DialogResult = true; \n} \n\nprivate void OnCancelClicked(object sender, RoutedEventArgs e) \n{ \n    DialogResult = false; \n} \n```", "```cs\n<Grid> \n    <ListBox x:Name=\"result\" Height=\"100\" Margin=\"8\" \n             HorizontalAlignment=\"Stretch\"  \n             VerticalAlignment=\"Top\" /> \n    <Button Content=\"Show Message\" Width=\"150\" Height=\"30\"  \n            VerticalAlignment=\"Bottom\" Margin=\"8\" \n            Click=\"OnShowMessageButtonClicked\"/> \n</Grid> \n```", "```cs\nprivate void OnShowMessageButtonClicked(object sender, RoutedEventArgs e) \n{ \n    var messageDialog = new MessageDialog(); \n    var dialogResult = messageDialog.ShowDialog(); \n\n    if (dialogResult == true) \n    { \n        result.Items.Add(\"You clicked 'OK' button.\"); \n    } \n    else if (dialogResult == false) \n    { \n        result.Items.Add(\"You clicked 'Cancel' button.\"); \n    } \n}\n```", "```cs\nprivate void OnOpenButtonClicked(object sender, RoutedEventArgs e) \n{ \n    var openfileDialog = new OpenFileDialog \n    { \n        Filter = \"Text documents (.txt) | *.txt | Log files (.log) | \n        *.log\" \n    }; \n\n    var dialogResult = openfileDialog.ShowDialog(); \n    if (dialogResult == true) \n    { \n        var fileName = openfileDialog.FileName; \n    } \n} \n```", "```cs\nprivate void OnSaveButtonClicked(object sender, RoutedEventArgs e) \n{ \n    var saveFileDialog = new SaveFileDialog \n    { \n        Filter = \"Text documents (.txt) | *.txt | Log files (.log) |\n         *.log\" \n    }; \n\n    var dialogResult = saveFileDialog.ShowDialog(); \n    if (dialogResult == true) \n    { \n        var fileName = saveFileDialog.FileName; \n    } \n} \n```", "```cs\nprivate void OnPrintButtonClicked(object sender, RoutedEventArgs e) \n{ \n    var printDialog = new PrintDialog(); \n    var dialogResult = printDialog.ShowDialog(); \n\n    if (dialogResult == true) \n    { \n        // perform the print operation \n    } \n} \n```", "```cs\n<Window x:Class=\"CH01.OwnershipDemo.ToolBox\" \n  xmlns=\n   \"http://schemas.microsoft.com/winfx/2006/xaml/presentation\" \n\n    SizeToContent=\"WidthAndHeight\"  \n    ResizeMode=\"NoResize\" \n    Title=\"ToolBox\"> \n    <StackPanel Margin=\"10\"> \n        <Button Content=\"Bold\" Width=\"70\" Margin=\"4\"/> \n        <Button Content=\"Italics\" Width=\"70\" Margin=\"4\"/> \n        <Button Content=\"Underlined\" Width=\"70\"  \n                Margin=\"4\"/> \n    </StackPanel> \n</Window> \n```", "```cs\nprotected override void OnStartup(StartupEventArgs e) \n{ \n    base.OnStartup(e); \n\n    var mainWindow = new MainWindow(); \n    mainWindow.Show(); // must show before setting it\n    as owner of some other window \n\n    var toolBox = new ToolBox { Owner = mainWindow }; \n    toolBox.Show(); \n} \n```", "```cs\n<Window x:Class=\"CH01.SingleInstanceDemo.MainWindow\" \n  xmlns=\n    \"http://schemas.microsoft.com/winfx/2006/xaml/presentation\" \n\n     Title=\"Single Instance Demo\"  \n     Height=\"250\" Width=\"400\"> \n    <Grid> \n\n    </Grid> \n</Window>\n```", "```cs\nprotected override void OnStartup(StartupEventArgs e) \n{ \n  base.OnStartup(e); \n\n  var mutex = new Mutex(true, \"SingleInstanceDemo\",  \n  out bool isNewInstance); \n  if (!isNewInstance) \n  { \n    MessageBox.Show(\"Application instance is  \n     already running!\"); \n    Shutdown(); \n  } \n} \n```", "```cs\n[DllImport(\"user32\", CharSet = CharSet.Unicode)] \nstatic extern IntPtr FindWindow(string cls, string win); \n\n[DllImport(\"user32\")] \nstatic extern IntPtr SetForegroundWindow(IntPtr hWnd);\n```", "```cs\nprivate static void ActivateWindow() \n{ \n    var otherWindow = FindWindow(null, \"Single Instance Demo\"); \n    if (otherWindow != IntPtr.Zero) \n    { \n        SetForegroundWindow(otherWindow); \n    } \n} \n```", "```cs\nprotected override void OnStartup(StartupEventArgs e) \n{ \n    base.OnStartup(e); \n\n    var mutex = new Mutex(true,  \n     \"SingleInstanceDemo\",  \n     out bool isNewInstance); \n    if (!isNewInstance) \n    { \n        // MessageBox.Show(\"Application instance is  \n           already running!\"); \n        ActivateWindow(); \n        Shutdown(); \n    } \n} \n```", "```cs\n<Window x:Class=\"CH01.CommandLineArgumentDemo.MainWindow\" \n  xmlns=\n   \"http://schemas.microsoft.com/winfx/2006/xaml/presentation\" \n\n    Title=\"Main Window\" Height=\"200\" Width=\"400\"> \n    <Grid> \n        <TextBlock Text=\"This is 'Main Window'\n          of the application.\" \n            HorizontalAlignment=\"Center\"  \n            VerticalAlignment=\"Center\" \n            FontSize=\"18\" /> \n    </Grid> \n</Window> \n```", "```cs\n<Window x:Class=\"CH01.CommandLineArgumentDemo.OtherWindow\" \nxmlns=\n  \"http://schemas.microsoft.com/winfx/2006/xaml/presentation\" \n\n   Title=\"Other Window\" Height=\"200\" Width=\"400\"> \n    <Grid> \n        <TextBlock Text=\"This is 'Other Window' of the  \n          application.\" \n            HorizontalAlignment=\"Center\"  \n            VerticalAlignment=\"Center\" \n            FontSize=\"18\" /> \n    </Grid> \n</Window> \n```", "```cs\nprotected override void OnStartup(StartupEventArgs e) \n{ \n    base.OnStartup(e); \n\n    var args = e.Args; \n    if (args.Contains(\"/other\"))  \n    {  \n        new OtherWindow().Show();  \n    } \n    else  \n    {  \n        new MainWindow().Show();  \n    } \n} \n```", "```cs\n CH01.CommandLineArgumentDemo.exe\n```", "```cs\n      CH01.CommandLineArgumentDemo.exe /other\n```", "```cs\n<Window x:Class=\"CH01.UnhandledExceptionDemo.MainWindow\" \n  xmlns=\n    \"http://schemas.microsoft.com/winfx/2006/xaml/presentation\" \n\n     Title=\"UnhandledException Demo\"  \n     Height=\"120\" Width=\"400\"> \n    <Grid Margin=\"10\"> \n        <StackPanel Orientation=\"Vertical\"> \n            <RadioButton x:Name=\"radioOne\" GroupName=\"type\" \n                  Content=\"Handle in Try/Catch Block\"  \n                  IsChecked=\"True\" Margin=\"4\"/> \n            <RadioButton x:Name=\"radioTwo\" GroupName=\"type\" \n                  Content=\"Handle in Unhandled Block\"  \n                  IsChecked=\"False\" Margin=\"4\"/> \n        </StackPanel> \n        <Button Content=\"Throw Exception\"  \n                Width=\"120\" Height=\"30\" \n                VerticalAlignment=\"Top\"  \n                HorizontalAlignment=\"Right\" \n                Margin=\"10\"  \n                Click=\"OnThrowExceptionClicked\"/> \n    </Grid> \n</Window> \n```", "```cs\nprivate void OnThrowExceptionClicked(object sender, RoutedEventArgs e) \n{ \n    if (radioOne.IsChecked == true) \n    { \n        try { throw new Exception(\"Demo Exception\"); } \n        catch (Exception ex) \n        { \n            MessageBox.Show(\"'\" + ex.Message +  \n                  \"' handled in Try/Catch block\"); \n        } \n    } \n    else \n    { \n        throw new Exception(\"Demo Exception\"); \n    } \n} \n```", "```cs\nprotected override void OnStartup(StartupEventArgs e) \n{ \n    base.OnStartup(e); \n\n    DispatcherUnhandledException += OnUnhandledException; \n}\n```", "```cs\nprivate void OnUnhandledException(object sender, DispatcherUnhandledExceptionEventArgs e) \n{ \n\n} \n```", "```cs\nprivate void OnUnhandledException(object sender, DispatcherUnhandledExceptionEventArgs e) \n{ \n    e.Handled = true; \n} \n```"]