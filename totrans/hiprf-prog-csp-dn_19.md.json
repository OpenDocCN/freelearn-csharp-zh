["```cs\n    public static void LengthyTask()\n    {\n         int y = 0;\n         for (int x = 0; x < 10; x++)\n              y++;\n    }\n    ```", "```cs\n    [Benchmark]\n    public void SychronousMethod()\n    {\n          LengthyTask();\n    }\n    ```", "```cs\n    [Benchmark]\n    public void TaskMethod()\n    {\n         Task.Run(new Action(LengthyTask));\n    }\n    ```", "```cs\n    [Benchmark]\n    public void AsynchronousTaskMethod()\n    {\n         var data = async () => await Task.Run(new   \n             Action(LengthyTask));\n    }\n    ```", "```cs\n    using BenchmarkDotNet.Running;\n    using CH16_AsynchronousProgramming;\n    Console.WriteLine(\"CH16 - Asynchronous Programming\");\n    var summary = BenchmarkRunner.Run<Benchmarks>();\n    Console.ReadLine();\n    ```", "```cs\n    public static int LengthyTaskReturnsInt()\n    {\n         int y = 0;\n         for (int x = 0; x < 10; x++)\n             y++;\n          return y;\n    }\n    ```", "```cs\n    [Benchmark]\n    public void GetAwaiterGetResult()\n    {\n         int value = Task.Run(() => \n             LengthyTaskReturnsInt()).GetAwaiter()\n               .GetResult();\n    }\n    ```", "```cs\n    [Benchmark]\n    public async Task Result()\n    {\n         int value = await Task.Run(() => \n           LengthyTaskReturnsInt()).ConfigureAwait(false);\n    }\n    ```", "```cs\n    [Benchmark]\n    public void Wait()\n    {\n         Task.Run(() => LengthyTask()).Wait();\n    }\n    ```", "```cs\n    [Benchmark]\n    public void GetAwaiter()\n    {\n             Task.Run(() => LengthyTask()).GetAwaiter();\n    }\n    ```", "```cs\n    private async Task<int> TaskOne()\n    {\n         await Task.Delay(300);\n         return 100;\n    }\n    ```", "```cs\n    private async Task<string> TaskTwo()\n    {\n         await Task.Delay(300);\n         return \"TaskTwo\";\n    }\n    ```", "```cs\n    [Benchmark]\n    public async Task SynchronousAwait()\n    {\n         int intValue = await TaskOne();\n         string stringValue = await TaskTwo(); \n    } \n    ```", "```cs\n    [Benchmark]\n    public async Task AsynchynchronousWhenAll()\n    {\n         var taskOne = TaskOne();\n         var taskTwo = TaskTwo();\n         await Task.WhenAll(taskOne, taskTwo);\n    }\n    ```", "```cs\n    private const string _website = \n        \"https://docs.microsoft.com\";\n    private static readonly CancellationTokenSource \n        _cancellationTokenSource = new();\n    ```", "```cs\n    private static readonly HttpClient HttpClient = new()\n    {\n         MaxResponseContentBufferSize = 1000000\n    };\n    ```", "```cs\n    private static async Task<string> \n        ReturnWebsiteTextAsync()\n    {\n         HttpResponseMessage response = await HttpClient\n                 .GetAsync(\n                 _website, \n                 _cancellationTokenSource.Token)\n               .ConfigureAwait(false);\n         byte[] contentAsByteArray = await response\n             .Content\n             .ReadAsByteArrayAsync(\n                 _cancellationTokenSource.Token)\n               .ConfigureAwait(false);\n         return Encoding.ASCII.GetString(\n             contentAsByteArray\n         );\n    }\n    ```", "```cs\n    public static async Task Start()\n    {\n         Console.WriteLine(\"Task started.\");\n         try {\n             _cancellationTokenSource.CancelAfter(3000);\n               await ReturnWebsiteTextAsync()\n                 .ConfigureAwait(false);\n         }\n         catch (OperationCanceledException) {\n           Console.WriteLine(\n           \"\\nThe task has timed out and been cancelled.\n             \\n\");\n         }\n         finally {\n             _cancellationTokenSource.Dispose();\n         }\n         Console.WriteLine(\"Task completed.\");\n    }\n    ```", "```cs\n    TaskCancellation.Start().GetAwaiter();\n    ```", "```cs\n    public static async Task WriteTextAsync()\n    {\n    string filePath = @\"C:\\Temp\\Greetings.txt\";\n    string text = \"Hello, World!\";\n    byte[] encodedText = \n         Encoding.Unicode.GetBytes(text);\n    using (FileStream fileStream = new FileStream(\n                        filePath,\n                        FileMode.Append, \n                        FileAccess.Write, \n                        FileShare.None,\n                        bufferSize: 4096, \n                        useAsync: true\n                    )\n                )\n    {\n             await fileStream.WriteAsync(\n                 encodedText, 0, encodedText.Length); \n    };\n    }\n    ```", "```cs\n    public static async Task<string> ReadTextAsync()\n    {\n         string filePath = @\"C:\\Temp\\Greetings.txt\";\n         using (FileStream fileStream = new FileStream(\n                 filePath,\n                   FileMode.Open, \n                   FileAccess.Read, \n                   FileShare.Read,\n                   bufferSize: 4096, \n                   useAsync: true\n             )\n         )\n         {\n             StringBuilder sb = new StringBuilder();\n             byte[] buffer = new byte[0x1000];\n             int numRead;\n             while (( numRead = await fileStream\n               .ReadAsync(buffer, 0, buffer.Length)) != 0\n             )\n             {\n                 string text = Encoding.Unicode\n                     .GetString(buffer, 0, numRead);\n                 sb.Append(text);\n             }\n             return sb.ToString();\n         }\n    }\n    ```", "```cs\n    //var summary = BenchmarkRunner.Run<Benchmarks>();\n    // TaskCancellation.Start().GetAwaiter();\n    ```", "```cs\n    FileReadWriteAsync.WriteTextAsync().GetAwaiter();\n    string data = FileReadWriteAsync.ReadTextAsync()\n        .GetAwaiter().GetResult();\n    Console.WriteLine(data);\n    ```"]