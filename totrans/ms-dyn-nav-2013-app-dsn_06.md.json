["```cs\nTempSalesLine := Rec;\nINIT;\nType := TempSalesLine.Type;\n\"No.\" := TempSalesLine.\"No.\";\nIF \"No.\" = '' THEN\n  EXIT;\nIF Type <> Type::\" \" THEN\n  Quantity := TempSalesLine.Quantity;\n```", "```cs\n\"Sell-to Customer No.\" := SalesHeader.\"Sell-to Customer No.\";\n\"Currency Code\" := SalesHeader.\"Currency Code\";\n...\n\n\"Promised Delivery Date\" := SalesHeader.\"Promised Delivery Date\";\n...\n\nUpdateDates;\n```", "```cs\nCASE Type OF\n  Type::\" \":\n      ...\n  Type::\"G/L Account\":\n      ...\n  Type::Item:\n      ...\n Type::Resource:\n      ...\n  Type::\"Fixed Asset\":\n      ...\n  Type::\"Charge (Item)\":\n      ...\nEND;\n```", "```cs\nIF Type <> Type::\" \" THEN BEGIN\n  IF Type <> Type::\"Fixed Asset\" THEN\n    VALIDATE(\"VAT Prod. Posting Group\");\n  VALIDATE(\"Unit of Measure Code\");\n  IF Quantity <> 0 THEN BEGIN\n    InitOutstanding;\n    IF \"Document Type\" IN [\"Document Type\"::\"Return Order\",\"Document Type\"::\"Credit Memo\"] THEN\n      InitQtyToReceive\n    ELSE\n      InitQtyToShip;\n    UpdateWithWarehouseShip;\n  END;\n UpdateUnitPrice(FIELDNO(\"No.\"));\nEND;\n```", "```cs\nIF Type = Type::Item THEN BEGIN\n UpdateUnitPrice(FIELDNO(Quantity));\n  ...\n  CheckApplFromItemLedgEntry(ItemLedgEntry);\nEND ELSE\n  VALIDATE(\"Line Discount %\");\n```", "```cs\nTestStatusOpen;\nVALIDATE(\"Line Discount %\");\n\n```", "```cs\nIF (CalledByFieldNo <> CurrFieldNo) AND (CurrFieldNo <> 0) THEN\n  EXIT;\n\nGetSalesHeader;\nTESTFIELD(\"Qty. per Unit of Measure\");\n\nCASE Type OF\n  Type::Item,Type::Resource:\n    BEGIN\n      PriceCalcMgt.FindSalesLineLineDisc(SalesHeader,Rec);\n      PriceCalcMgt.FindSalesLinePrice(SalesHeader,Rec,\n        CalledByFieldNo);\n    END;\nEND;\nVALIDATE(\"Unit Price\");\n\n```", "```cs\nTestJobPlanningLine;\nTestStatusOpen;\n\"Line Discount Amount\" :=\n  ROUND(\n    ROUND(Quantity * \"Unit Price\",Currency.\"Amount Rounding Precision\") *\n    \"Line Discount %\" / 100,Currency.\"Amount Rounding Precision\");\n\"Inv. Discount Amount\" := 0;\n\"Inv. Disc. Amount to Invoice\" := 0;\nUpdateAmounts;\n\n```", "```cs\n    TESTFIELD(\"Sell-to Customer No.\");\n    ```", "```cs\n    SalesLine.SETRANGE(\"Document Type\",\"Document Type\");\n    SalesLine.SETRANGE(\"Document No.\",\"No.\");\n    SalesLine.SETFILTER(Type,'>0');\n    SalesLine.SETFILTER(Quantity,'<>0');\n    IF NOT SalesLine.FIND('-') THEN\n      ERROR(Text001,\"Document Type\",\"No.\");\n    ```", "```cs\n    SalesSetup.GET;\n    IF SalesSetup.\"Calc. Inv. Discount\" THEN BEGIN\n      CODEUNIT.RUN(CODEUNIT::\"Sales-Calc. Discount\",SalesLine);\n      GET(\"Document Type\",\"No.\");\n    END;\n    ```", "```cs\n    SalesLine.SetSalesHeader(Rec);\n    SalesLine.CalcVATAmountLines(0,Rec,SalesLine,TempVATAmountLine0);\n    SalesLine.CalcVATAmountLines(1,Rec,SalesLine,TempVATAmountLine1);\n    SalesLine.UpdateVATOnLines(0,Rec,SalesLine,TempVATAmountLine0);\n    SalesLine.UpdateVATOnLines(1,Rec,SalesLine,TempVATAmountLine1);\n    ```", "```cs\nIF (Status = Status::Open) OR (Status = Status::\"Pending Prepayment\") THEN BEGIN\n  TempInvoice := Invoice;\n  TempShpt := Ship;\n  TempReturn := Receive;\n  GetOpenLinkedATOs(TempAsmHeader);\n  CODEUNIT.RUN(CODEUNIT::\"Release Sales Document\",SalesHeader);\n  TESTFIELD(Status,Status::Released);\n  Status := Status::Open;\n  Invoice := TempInvoice;\n  Ship := TempShpt;\n  Receive := TempReturn;\n  ReopenAsmOrders(TempAsmHeader);  \n  MODIFY;\n  COMMIT;\n  Status := Status::Released;\nEND;\n```", "```cs\nApplyItemLedgEntry\n...\n\nCLEAR(OldItemLedgEntry);\n...\nREPEAT\n  ItemJnlLine.CALCFIELDS(\"Reserved Qty. (Base)\");\n  IF ItemJnlLine.\"Assemble to Order\" THEN BEGIN\n    ItemJnlLine.TESTFIELD(\"Reserved Qty. (Base)\");\n    ItemJnlLine.TESTFIELD(\"Applies-to Entry\");\n  END ELSE\n    IF ItemJnlLine.\"Reserved Qty. (Base)\" <> 0 THEN BEGIN\n      IF ItemLedgEntry.\"Applies-to Entry\" <> 0 THEN\n        ItemLedgEntry.FIELDERROR(\n          \"Applies-to Entry\",Text99000000);\n    END;\n    ...\n  END ELSE\n    StartApplication := TRUE;\n```", "```cs\nIF StartApplication THEN BEGIN\n  ItemLedgEntry.CALCFIELDS(\"Reserved Quantity\");\n  IF ItemLedgEntry.\"Applies-to Entry\" <> 0 THEN BEGIN\n    IF FirstApplication THEN BEGIN\n      FirstApplication := FALSE;\n      OldItemLedgEntry.GET(ItemLedgEntry.\"Applies-to Entry\");\n      OldItemLedgEntry.TESTFIELD(\"Item No.\",ItemLedgEntry.\"Item No.\");\n      OldItemLedgEntry.TESTFIELD(\"Variant Code\",ItemLedgEntry.\"Variant Code\");\n\n      OldItemLedgEntry.TESTFIELD(Positive,NOT ItemLedgEntry.Positive);\n      OldItemLedgEntry.TESTFIELD(\"Location Code\",ItemLedgEntry.\"Location Code\");\n```", "```cs\nEND ELSE BEGIN\n  IF FirstApplication THEN BEGIN\n    FirstApplication := FALSE;\n    ItemLedgEntry2.SETCURRENTKEY(\"Item No.\",Open,\"Variant Code\",\n      Positive,\"Location Code\",\"Posting Date\");\n    ItemLedgEntry2.SETRANGE(\"Item No.\",ItemLedgEntry.\"Item No.\");\n    ItemLedgEntry2.SETRANGE(Open,TRUE);\n    ItemLedgEntry2.SETRANGE(\"Variant Code\",ItemLedgEntry.\n      \"Variant Code\");\n    ItemLedgEntry2.SETRANGE(Positive,NOT ItemLedgEntry.Positive);\n    ItemLedgEntry2.SETRANGE(\"Location Code\",\n      ItemLedgEntry.\"Location Code\");\n\n    IF ItemLedgEntry.\"Job Purchase\" = TRUE THEN BEGIN\n      ItemLedgEntry2.SETRANGE(\"Job No.\",ItemLedgEntry.\"Job No.\");\n      ItemLedgEntry2.SETRANGE(\"Job Task No.\",\n        ItemLedgEntry.\"Job Task No.\");\n      ...\n    END;\n    IF ItemTrackingCode.\"SN Specific Tracking\" THEN\n      ItemLedgEntry2.SETRANGE(\"Serial No.\",\n        ItemLedgEntry.\"Serial No.\");\n    IF ItemTrackingCode.\"Lot Specific Tracking\" THEN\n      ItemLedgEntry2.SETRANGE(\"Lot No.\",ItemLedgEntry.\"Lot No.\");\n\n    IF Location.GET(ItemLedgEntry.\"Location Code\") THEN\n      IF Location.\"Use As In-Transit\" THEN\n        ItemLedgEntry2.SETRANGE(\"Transfer Order No.\",\n          ItemLedgEntry.\"Transfer Order No.\");\n\n    IF Item.\"Costing Method\" = Item.\"Costing Method\"::LIFO THEN\n      EntryFindMethod := '+'\n    ELSE\n      EntryFindMethod := '-';\n    IF NOT ItemLedgEntry2.FIND(EntryFindMethod) THEN\n      EXIT;\n```", "```cs\nInitSourceDocumentLines\nWhseRcptLine2.COPY(WhseRcptLine);\nWITH WhseRcptLine2 DO BEGIN\n  CASE \"Source Type\" OF\n    DATABASE::\"Purchase Line\":\n      BEGIN\n        PurchLine.SETRANGE(\"Document Type\",\"Source Subtype\");\n        PurchLine.SETRANGE(\"Document No.\",\"Source No.\");\n        IF PurchLine.FIND('-') THEN\n          REPEAT\n              ...\n              IF PurchLine.\"Bin Code\" <> \"Bin Code\" THEN BEGIN\n                PurchLine.\"Bin Code\" := \"Bin Code\";\n                ModifyLine := TRUE;\n              END;\n              ...\n            IF ModifyLine THEN\n              PurchLine.MODIFY;\n```", "```cs\nCode()\nIF Location.\"Directed Put-away and Pick\" THEN BEGIN\n  BinType.CreateBinTypeFilter(BinTypeFilter,2);\n  REPEAT\n    QtyToPutAwayBase := RemQtyToPutAwayBase;\n    IF NOT (PutAwayTemplLine.\"Find Empty Bin\" OR \n      PutAwayTemplLine.\"Find Floating Bin\") OR\n      PutAwayTemplLine.\"Find Fixed Bin\" OR\n      PutAwayTemplLine.\"Find Same Item\" OR\n      PutAwayTemplLine.\"Find Unit of Measure Match\" OR\n      PutAwayTemplLine.\"Find Bin w. Less than Min. Qty\"\n    THEN BEGIN\n        //Calc Availability per Bin Content\n        IF FindBinContent(\"Location Code\",\"Item No.\",\n          \"Variant Code\",WarehouseClassCode) \n        THEN\n          REPEAT\n            ...\n          UNTIL (BinContent.NEXT(-1) = 0) OR EverythingHandled\n      END ELSE BEGIN\n\n        //Calc Availability per Bin\n        IF FindBin(\"Location Code\",WarehouseClassCode) THEN\n          REPEAT\n            IF Bin.Code <> \"Bin Code\" THEN BEGIN\n              ...\n            END;\n          UNTIL (Bin.NEXT(-1) = 0) OR EverythingHandled\n      END\n    UNTIL (PutAwayTemplLine.NEXT = 0) OR EverythingHandled;\n```", "```cs\nQtyAvailabletoPromise\nItem.CALCFIELDS(Inventory,\"Reserved Qty. on Inventory\");\nScheduledReceipt := CalcScheduledReceipt(Item);\nGrossRequirement := CalcGrossRequirement(Item);\n\nIF FORMAT(LookaheadDateFormula) <> '' THEN BEGIN\n  GrossRequirement :=\n    GrossRequirement +\n    CalculateLookahead(\n      Item,PeriodType,\n      AvailabilityDate + 1,\n```"]