- en: Implementing Design Patterns for Web Applications - Part 1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will continue building the **FlixOne** Inventory Management
    application (see [Chapter 3](3a038a92-9207-4232-9acd-d17cb24da6c5.xhtml), *Implementing
    Design Patterns Basics â€“ Part 1*), and we will discuss the conversion of a console
    application to a web application. The web application should be more appealing
    to users, as opposed to a console application; Here, we will also discuss why
    we are going for this change.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a .NET Core web application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Crafting a web application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing CRUD pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you have not looked at the earlier chapters yet, please note that the **FlixOne
    Inventory Management** web application is an imaginary product. We are creating
    this application to discuss the various design patterns required in web projects.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter contains various code examples to explain the concepts. The code
    is kept simple and is just for demonstration purposes. Most of the examples involve
    a **.NET Core** console application written in C#.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run and execute the code, you need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio 2019 (you can also run the application using Visual Studio 2017
    Update 3 or later)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Environment Setup for .NET Core
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQL Server (the Express edition is used in this chapter)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Visual Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To run these code examples, you need to install Visual Studio (2017), or later
    version such as 2019 (or you can use your preferred IDE). To do this, follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download Visual Studio from: [https://docs.microsoft.com/en-us/visualstudio/install/install-visual-studio](https://docs.microsoft.com/en-us/visualstudio/install/install-visual-studio).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow the installation instructions included. Multiple versions are available
    for the Visual Studio installation. In this chapter, we are using Visual Studio
    for Windows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting up .NET Core
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you do not have .NET Core installed, you need to follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download .NET Core from: [https://www.microsoft.com/net/download/windows](https://www.microsoft.com/net/download/windows).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Follow the installation instructions and follow the related library: [https://dotnet.microsoft.com/download/dotnet-core/2.2](https://dotnet.microsoft.com/download/dotnet-core/2.2).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing SQL Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you do not have SQL Server installed, you need to follow these instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download SQL Server from: [https://www.microsoft.com/en-in/download/details.aspx?id=1695](https://www.microsoft.com/en-in/download/details.aspx?id=1695).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can find the installation instructions at: [https://docs.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-2017](https://docs.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-2017).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For troubleshooting and for more information, refer to: [https://www.blackbaud.com/files/support/infinityinstaller/content/installermaster/tkinstallsqlserver2008r2.htm](https://www.blackbaud.com/files/support/infinityinstaller/content/installermaster/tkinstallsqlserver2008r2.htm).'
  prefs: []
  type: TYPE_NORMAL
- en: This section is meant to provide the prerequisite information to get started
    with web applications. We'll look at more details in the subsequent sections.
    In this chapter, we will use code examples to elaborate on various terms and sections.
  prefs: []
  type: TYPE_NORMAL
- en: 'The complete source code is available at: [https://github.com/PacktPublishing/Hands-On-Design-Patterns-with-C-and-.NET-Core/tree/master/Chapter6](https://github.com/PacktPublishing/Hands-On-Design-Patterns-with-C-and-.NET-Core/tree/master/Chapter6).'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a .Net Core web application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the beginning of this chapter, we discussed our FlixOne console-based application,
    and there are various reasons to go with a web application as identified by the
    business team. Now it's time to make changes in the application. In this section,
    we will start the creation of a new UI of our existing FlixOne application with
    a new look and feel. We will also discuss all the requirements and initialization.
  prefs: []
  type: TYPE_NORMAL
- en: Kicking off the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In continuation of our existing FlixOne console application, management has
    decided to revamp our FlixOne Inventory console application with a lot of features.
    Management came to the conclusion that we have to convert our existing console
    application into a web-based solution.
  prefs: []
  type: TYPE_NORMAL
- en: 'The tech team and the business team sat down together and identified the various
    reasons why the decision was made to scrap the current console application:'
  prefs: []
  type: TYPE_NORMAL
- en: The interface is not interactive.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The application is not available everywhere.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is complex to maintain.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The growing business needs a scalable system with higher performance and adaptability.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following list of requirements was produced as the outcome of the discussions.
    The high-level requirements identified are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Product categorization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Product addition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Product updating
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Product deletion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The actual requirements that the business demands fall on the developers. These
    technical requirements include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**A landing or home page**: This should be a dashboard that contains various
    widgets, and it should show a summary of the store.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A product page**: This should have the ability to add, update, and delete
    products and categories.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Crafting a web application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: According to the requirements just discussed, our main goal is to convert our
    existing console application to a web application. In the process of this conversion,
    we will discuss various design patterns for web applications, and the importance
    of these design patterns in the context of web applications.
  prefs: []
  type: TYPE_NORMAL
- en: Web applications and how they work
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web applications are one of the best implementations of the client-server architecture.
    A web application can be a small piece of code, a program, or a complete solution
    for a problem or a business scenario in which users interact with one another
    or with the server, using browsers. A web application serves requests and responses
    via browsers, mainly through the use of **HyperText Transfer Protocol** (**HTTP**).
  prefs: []
  type: TYPE_NORMAL
- en: 'Whenever any communication occurs between the client and the server, two things
    happen: the client initiates the request and the server generates the response.
    This communication is made up of HTTP requests and HTTP responses. For more information,
    refer to the documentation at: [https://www.w3schools.com/whatis/whatis_http.asp](https://www.w3schools.com/whatis/whatis_http.asp).'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following diagram, you can see an overview of a web application and
    how it works:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a6f3af7f-d494-4645-afd7-0f7b4f81254d.png)'
  prefs: []
  type: TYPE_IMG
- en: From this diagram, you can easily see that with the use of a browser (as a client),
    you're opening doors for millions of users who can access the website from anywhere
    in the world and can interact with you as a user. With a web application, you
    and your customers can communicate easily. Generally, effective engagement is
    only possible when you capture and store the data with all the necessary information
    required for your business and your users. This information is then processed,
    and the results are presented to your users.
  prefs: []
  type: TYPE_NORMAL
- en: In general, web applications use a combination of server-side code to handle
    the storage and retrieval of the information, and client-side scripts to present
    the information to the users.
  prefs: []
  type: TYPE_NORMAL
- en: The web application requires a web server (such as **IIS** or **Apache**) to
    manage requests coming from the client (from the browser, as can be seen in the
    previous diagram). An application server (such as IIS or Apache Tomcat) is also
    required to perform the tasks requested. A database is sometimes needed to store
    the information as well.
  prefs: []
  type: TYPE_NORMAL
- en: Put simply, both a web server and an application server are designed to serve
    HTTP content, but with certain variations. Web servers serve static HTTP content,
    such as HTML pages. Application servers can, apart from serving static HTTP content,
    also serve dynamic content, using different programming languages. For more information,
    refer to [https://stackoverflow.com/questions/936197/what-is-the-difference-between-application-server-and-web-server](https://stackoverflow.com/questions/936197/what-is-the-difference-between-application-server-and-web-server).
  prefs: []
  type: TYPE_NORMAL
- en: 'We can elaborate on the workflow of a web application as follows. These are
    known as the five-step working processes of a web application:'
  prefs: []
  type: TYPE_NORMAL
- en: A request is triggered by the client (browser) to the web server using HTTP
    (in most cases) over the internet. This usually happens through a web browser
    or the application's user interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The request arises at the web server, and the web server forwards the request
    to the application server (for different requests, there would be different application
    servers).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the application server, the requested tasks are completed. This might involve
    querying the database server, retrieving information from the database, processing
    information, and building results.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The generated results (the requested information or the processed data) are
    sent to the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, the response is sent back to the requester (the client) from the web
    server with the requested information. This appears on the user's display.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following diagram shows a pictorial overview of these five steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/195177cd-d19e-474a-a84a-242a3be32cb4.png)'
  prefs: []
  type: TYPE_IMG
- en: In the following sections, I will describe the working process of the web application
    using the **Model-View-Controller** (**MVC**) pattern.
  prefs: []
  type: TYPE_NORMAL
- en: Coding the web application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Up until now, we have gone through the requirements and looked at our aim, which
    is to convert a console application into a web-based platform or application.
    In this section, we will develop the actual web application using Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: 'Carry out the following steps to create a web application using Visual Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Visual Studio instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on File|New|Project or press *Ctrl + Shift + N*, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/111a9983-9056-44db-a155-8f0a4352373e.png)'
  prefs: []
  type: TYPE_IMG
- en: From the New Project window, select Web|.NET Core|ASP.NET Core Web Application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name it (for example, `FlixOne.Web`), select the location, and then you can
    update the solution name. By default, the solution name will be the same as the
    project name. Check the Create directory for solution checkbox. You can also choose
    to check the Create new Git repository checkbox (if you want to create a new repository
    for this, you need a valid Git account).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the creation process of a New project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d8703640-dbe5-4058-9740-1905a9b25e98.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The next step is to select the proper template for your web application and
    the .NET Core version. We are not going to enable Docker support for this project,
    as we are not going to deploy our application using Docker as the container. We
    will go with the HTTP protocol only, instead of HTTPS. Both the Enable Docker
    Support and Configure HTTPs checkboxes should, therefore, remain unchecked, as
    shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e62d22ed-9dc7-4f16-a021-994702496622.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We now have a complete project with our template and example code, using the
    MVC framework. The following screenshot shows our solution so far:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6af17baa-1c2c-4b81-8653-5bfa980d6f69.png)'
  prefs: []
  type: TYPE_IMG
- en: Architectural patterns are a way of implementing best practices within the design
    of the user interface and application itself. They provide us with reusable solutions
    to common problems. These patterns also allow us to easily implement a separation
    of concerns.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most popular architectural patterns are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Model-View-Controller** (**MVC**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Model-view-presenter** (**MVP**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Model-view-viewmodel** (**MVVM**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can try to run the application by hitting *F5*. The following screenshot
    shows the default home page of the web application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3a4a7a9a-9dd8-47c7-8ad0-f19344748448.png)'
  prefs: []
  type: TYPE_IMG
- en: In the coming sections, I will discuss MVC patterns and create **CRUD** (**Create**,
    **Update**, and **Delete**) pages to interact with the users.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing CRUD pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will start creating functional pages to create, update,
    and delete products. To get started, open your `FlixOne` solution, and add the
    following classes into the specified folders:'
  prefs: []
  type: TYPE_NORMAL
- en: '**`Models`**: Add the following files in the `Models` folder of the solution:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Product.cs`: The code snippet of the `Product` class is as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `Product` class represents almost all the elements of the product. It has
    a `Name`, a complete `Description`, an `Image`, a `Price`, and a unique `ID` so
    that our system recognizes it. The `Product` class also has a `Category ID` to
    which this product belongs. It also includes a complete definition of the `Category`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Why should we define a `virtual` property?**'
  prefs: []
  type: TYPE_NORMAL
- en: In our `Product` class, we have defined a `virtual` property. This is because,
    in the **Entity Framework** (**EF**), this property helps to create a proxy for
    the virtual property. In this way, the property can support lazy loading and more
    efficient change tracking. This means that data is available on demand. EF loads
    the data when you request to use the `Category` property.
  prefs: []
  type: TYPE_NORMAL
- en: '`Category.cs`: The code snippet of the `Category` class is as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Our `Category` class represents the actual category of the product. A category
    has a unique `ID`, a `Name`, a complete `Description`, and a collection of `Products`
    that belong to this category. Whenever we initialize our `Category` class, it
    initializes our `Product` class.
  prefs: []
  type: TYPE_NORMAL
- en: '`ProductViewModel.cs`: The code snippet of the `ProductViewModel` class is
    as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Our `ProductViewModel` class represents a complete `Product` which is having
    attributes like a unique `ProductId`, a `ProductName`, a complete `ProductDescription`,
    a `ProductImage`, a `ProductPrice`, a unique `CategoryId`, a `CategoryName`, and
    a complete `CategoryDescription`.
  prefs: []
  type: TYPE_NORMAL
- en: '`Controllers`: Add the following files to the `Controllers` folder of the solution:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ProductController` is responsible for all operations related to products.
    Let''s take a look at the code and the operations that we are trying to achieve
    in this controller:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here, we defined the `ProductController` that inherits from a `Controller` class.
    We used **dependency injection**, which is built-in support from the ASP.NET Core
    MVC framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'We discussed the inversion of control in detail in [Chapter 5](fd71001a-4673-4391-a10b-2490e07f135e.xhtml),
    *Implementing Design Patterns - .Net Core;* `Controller` is a base class for an
    MVC controller. For more information, refer to: [https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.controller](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.controller).'
  prefs: []
  type: TYPE_NORMAL
- en: We have created our main controller, `ProductController`. Let's now start adding
    functionalities for our CRUD operations.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code is simply a `Read` or `Get` operation that requests the
    repository (`_``inventoryRepository`) to list all available products, and then
    transposes this product list to the `ProductViewModel` type and returns an `Index`
    view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code snippet, the `Details` method returns the details of a
    specific `Product` based on its unique `Id`. This is also a `Get` operation that
    is similar to our `Index` method, but it provides a single object instead of a
    list.
  prefs: []
  type: TYPE_NORMAL
- en: 'The methods of the **MVC controller** are also called **action methods** and
    have the return type of `ActionResult`. In this case, we are using `IActionResult`.
    In general, you can say that `IActionResult` is an interface of the `ActionResult`
    class. It also provides us a way to return many things, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`EmptyResult`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FileResult`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HttpStatusCodeResult`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ContentResult`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`JsonResult`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RedirectToRouteResult`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RedirectResult`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We are not going to discuss all of these in detail, as these are beyond the
    scope of this book. To find out more about return types, refer to: [https://docs.microsoft.com/en-us/aspnet/core/web-api/action-return-types](https://docs.microsoft.com/en-us/aspnet/core/web-api/action-return-types).'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code, we are creating a new product. The following code snippet
    has two action methods. One has the `[HttpPost]` attribute, and the other is without
    the attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The first method simply returns a `View`. This will return a `Create.cshtml`
    page.
  prefs: []
  type: TYPE_NORMAL
- en: If any of the action methods in the **MVC framework** do not have any attribute,
    it will use the `[HttpGet]` attribute by default. In other views, by default,
    action methods are `Get` requests. Whenever a user views a page, we use `[HttpGet]`,
    or a `Get` request. Whenever a user submits a form or performs an action, we use
    `[HttpPost]`, or a `Post` request.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we did not explicitly mention the view name in our action method, then the
    MVC framework looks like a view name in this format: `actionmethodname.cshtml`
    or `actionmethodname.vbhtml`. In our case, the view name is `Create.cshtml` because
    we are using the C# language. It would be `vbhtml` if we used Visual Basic. It
    first looks in the folder that has a name that is similar to the controller''s
    folder name. If it does not find a file in this folder, it looks in the `shared`
    folder.'
  prefs: []
  type: TYPE_NORMAL
- en: The second action method in the previous code snippet uses the `[HttpPost]`
    attribute, which means it handles `Post` requests. This action method simply adds
    the product by calling the `AddProduct` method of `_repository`. In this action
    method, we have used the `[ValidateAntiForgeryToken]` attribute and `[FromBody]`,
    which is a model binder.
  prefs: []
  type: TYPE_NORMAL
- en: The MVC framework provides a lot of security to protect our application from
    **Cross-Site Scripting**/**Cross-Site Request Forgery** (**XSS/CSRF**) attacks
    by providing the `[ValidateAntiForgeryToken]` attribute. These type of attacks
    generally include some dangerous client-side script code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Model binding in MVC maps data from `HTTP` requests to action method parameters.
    Frequently used model binding attributes with action methods are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`[FromHeader]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`` `[FromQuery]` ``'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[FromRoute]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[FromForm]`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are not going to discuss these in more detail, as this is beyond the scope
    of this book. However, you can find complete details from the official documentation
    at [https://docs.microsoft.com/en-us/aspnet/core/mvc/models/model-binding](https://docs.microsoft.com/en-us/aspnet/core/mvc/models/model-binding).
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous code snippets, we discussed the `Create` and `Read` operations.
    It''s now time to write a code for the `Update` operation. In the following code,
    we have two action methods: one is `Get`, and the other is a `Post` request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The first action method of the previous code gets a `Product` based on the
    `ID` and returns a `View`. The second action method takes the data from the view
    and updates the requested `Product` based on its ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Finally, the previous code represents the `Delete` operation from our `CRUD`
    operations. It also has two action methods; one retrieves the data from the repository
    and serves it to the view, and another takes the data request and deletes the
    specific `Product` based on its ID.
  prefs: []
  type: TYPE_NORMAL
- en: '`CategoryController` is responsible for all the operations of the `Product`
    category. Add the following code to the controller, it represents the `CategoryController`,
    where we have used dependency injections to initialize our `IInventoryRepository`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code contains two action methods. The first gets a list of categories,
    and the second is a specific category based on its unique ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code is for the `Get` and the `Post` request to create a new
    category in the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following code, we are updating our existing category. The code contains
    the `Edit` action methods with `Get` and `Post` requests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we have a `Delete` action method. This is the final operation of our
    `CRUD` pages for `Category` deletion as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '`Views`: Add the following views to their respective folders:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Index.cshtml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Create.cshtml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Edit.cshtml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Delete.cshtml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Details.cshtml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Contexts`: Add the `InventoryContext.cs` file to the `Contexts` folder with
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code provides the various methods needed to interact with the
    database using EF. You might face the following exception while running the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/09846618-7502-478b-ae84-e203b2782913.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To fix this exception, you should map to the `IInventoryRepository` in the
    `Startup.cs` file, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f418bdc3-b1ce-46c5-a0b7-41d831833606.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We have now added various functionalities to our web application, and our solution
    now looks as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/73cc1b91-de98-4cbb-b856-17e25a46a91b.png)'
  prefs: []
  type: TYPE_IMG
- en: Refer to the GitHub repository for this chapter ([https://github.com/PacktPublishing/Hands-On-Design-Patterns-with-C-and-.NET-Core/tree/master/Chapter6](https://github.com/PacktPublishing/Hands-On-Design-Patterns-with-C-and-.NET-Core/tree/master/Chapter6)).
  prefs: []
  type: TYPE_NORMAL
- en: 'If we were to visualize the MVC model, then it would work as shown in the following
    diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6b34db05-1e93-4888-b96c-87eec3c74beb.png)'
  prefs: []
  type: TYPE_IMG
- en: The preceding image was adapted from [https://commons.wikimedia.org/wiki/File:MVC-Process.svg](https://commons.wikimedia.org/wiki/File:MVC-Process.svg)
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the previous diagram, whenever a user raises a request, it comes
    to the controller and triggers the action method to be further manipulated or
    updated, if required, to the model, and then serves the view to the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, whenever a user requests `/Product`, the request goes to the `Index`
    action method of `ProductController` and serves the `Index.cshtml` view after
    fetching the list of products. You will get the product listing as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2fdb3ea4-40db-49a3-852d-d682bc005bcb.png)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot is a simple product listing, and it represents the
    `Read` section of the `CRUD` operations. On this screen, the application shows
    the total available products and their categories.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram depicts how our application interacts:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d2db4ee2-a842-4379-8522-3b31f80147af.png)'
  prefs: []
  type: TYPE_IMG
- en: It shows the pictorial overview of the process of our application. The `InventoryRepository`
    depends on the `InventoryContext` for database operations and interacts with our
    model classes, `Category` and `Product`. Our controllers for `Product` and `Category`
    use the `IInventoryRepository` interface to interact with the repository for CRUD
    operations.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main goal of this chapter was to start a basic web application.
  prefs: []
  type: TYPE_NORMAL
- en: We started the chapter by discussing business requirements, why we needed a
    web application, and why we wanted to upgrade our console application. We then
    covered the step-by-step creation of a web application using Visual Studio in
    the MVC pattern. We also discussed how a web application can work as a client-server
    model, and looked at user interface patterns. We also started building CRUD pages.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will continue with the web application and discuss more
    design patterns for web applications.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following questions will allow you to consolidate the information contained
    in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: What is a web application?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Craft a web application of your choice, and depict how it works.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is inversion of control?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the architectural patterns that we've covered in this chapter? Which
    one do you like and why?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Congratulations! You''ve completed this chapter. We have covered a lot of things
    related to authentication, authorization, and testing projects. This is not the
    end of your learning; it is just the beginning, and there are more books you can
    refer to increase your understanding. The following books provide an in-depth
    look at RESTful web services and test-driven development:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Building RESTful Web services with .NET Core*, by *Gaurav Aroraa*, *Tadit
    Dash*, from *Packt Publishing*, at: [https://www.packtpub.com/application-development/building-restful-web-services-net-core](https://www.packtpub.com/application-development/building-restful-web-services-net-core)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*C# and .NET Core Test Driven Development*, by *Ayobami Adewole*, from *Packt
    Publishing*, at: [https://www.packtpub.com/application-development/c-and-net-core-test-driven-development](https://www.packtpub.com/application-development/c-and-net-core-test-driven-development)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
