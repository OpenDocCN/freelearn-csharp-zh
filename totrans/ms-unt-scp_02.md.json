["```cs\n01 using UnityEngine;\n02 using System.Collections;\n03 \n04 public class ErrorScript : MonoBehaviour \n05 {\n06 int MyNumber = 5;\n07 \n08 // Use this for initialization\n09 void Start () {\n10 \n11        mynumber = 7;\n12 }\n13 \n14 // Update is called once per frame\n15 void Update () {\n16        mynumber = 10;\n17 }\n18 }\n```", "```cs\n01 using UnityEngine;\n02 using System.Collections;\n03 \n04 public class ErrorScript : MonoBehaviour \n05 {\n06 int MyNumber = 5;\n07 \n08 // Use this for initialization\n09 void Start () {\n10 \t\n11       MyNumber = 7;\n12 }\n13 \n14 // Update is called once per frame\n15 void Update () {\n16       MyNumber = 10;\n17 }\n18 }\n```", "```cs\n01 using UnityEngine;\n02 using System.Collections;\n03 \n04 public class CubeScript : MonoBehaviour \n05 {\n06 // Use this for initialization\n07 void Start () {\n\n08        Debug.Log (\"Object created in scene at position: \" + transform.position.ToString());transform.position.ToString());\n\n09 }\n10 }\n```", "```cs\nusing UnityEngine;\nusing System.Collections;\n//--------------------------------------------\n//Sample enemy Ogre class\npublic class EnemyOgre : MonoBehaviour \n{\n//--------------------------------------------\n//Attack types for OGRE\npublic enum AttackType {PUNCH, MAGIC, SWORD, SPEAR};\n\n//Current attack type being used\npublic AttackType CurrentAttack = AttackType.PUNCH;\n\n//Health\npublic int Health = 100;\n\n//Recovery Delay (after attacking)\npublic float RecoveryTime = 1.0f;\n\n//Movement speed of Ogre - metres per second\npublic float Speed = 1.0f;\n\n//Name of Ogre\npublic string OgreName = \"Harry\";\n//--------------------------------------------\n//Override ToString method\npublic override string ToString ()\n{\n    //Return a string representing the class\n\n          return string.Format (\"***Class EnemyOgre*** OgreName: {0} | Health: {1} | Speed: {2} | CurrentAttack: {3} | RecoveryTime: {4}\", \n          OgreName, Health, Speed, CurrentAttack, RecoveryTime);\n}\n\n//--------------------------------------------\nvoid Start()\n{\n\n            Debug.Log (ToString());\n}\n   //--------------------------------------------\n}\n//--------------------------------------------\n```", "```cs\n01 using UnityEngine;\n02 using System.Collections;\n03 \n04 public class CubeScript : MonoBehaviour \n05 {\n06 // Use this for initialization\n07 void Start ()\n08 {\n09        #if SHOW_DEBUG_MESSAGES\n10        //runs ONLY if the Define SHOW_DEBUG_MESSAGES is active\n11        Debug.Log (\"Pos: \" + transform.position.ToString());\n12       #endif\n13 \n14       //runs because it's outside the #if #endif block\n15        Debug.Log (\"Start function called\");\n16 }\n17 }\n```", "```cs\nusing UnityEngine;\nusing System.Collections;\n\npublic class GizmoCube : MonoBehaviour\n{\n//Show debugging info?\n public bool DrawGizmos = true;\n\n    //Called to draw gizmos. Will always draw.\n    //If you want to draw gizmos for only selected object, then call\n\n    //OnDrawGizmosSelected\n void OnDrawGizmos() \n    {\n        if(!DrawGizmos) return;\n\n         //Set gizmo color\n         Gizmos.color = Color.blue;\n\n        //Draw front vector - show the direction I'm facing\n Gizmos.DrawRay(transform.position, transform.forward.normalized *  4.0f);\n\n          //Set gizmo color\n          //Show proximity radius around cube\n          //If cube were an enemy, they would detect the player within this radius\n\nGizmos.color = Color.red;\n Gizmos.DrawWireSphere(transform.position, 4.0f);\n\n          //Restore color back to white\n          Gizmos.color = Color.white;\n   }\n}\n```", "```cs\n 01 //------------------------------------------------\n 02 using UnityEngine;\n 03 using System.Collections;\n 04 using System.IO;\n 05 //------------------------------------------------\n 06 public class ExceptionLogger : MonoBehaviour \n 07 {\n 08      //Internal reference to stream writer object\n 09      private System.IO.StreamWriter SW;\n 10 \n 11      //Filename to assign log\n 12      public string LogFileName = \"log.txt\";\n 13 \n 14      //------------------------------------------------\n 15      // Use this for initialization\n 16      void Start () \n 17      {\n 18             //Make persistent\n 19             DontDestroyOnLoad(gameObject);\n 20 \n 21      //Create string writer object\n\n 22       SW = new System.IO.StreamWriter(Application.persistentDataPath + \"/\" + LogFileName);\n\n 23 \n 24      Debug.Log(Application.persistentDataPath + \"/\" + LogFileName);\n\n 25       }\n 26       //------------------------------------------------\n 27      //Register for exception listening, and log exceptions\n 28      void OnEnable() \n 29      {\n 30            Application.RegisterLogCallback(HandleLog);\n 31      }\n 32      //------------------------------------------------\n 33      //Unregister for exception listening\n 34      void OnDisable() \n 35      {\n 36           Application.RegisterLogCallback(null);\n 37      }\n 38       //------------------------------------------------\n 39       //Log exception to a text file\n\n 40       void HandleLog(string logString, string stackTrace, LogType type)\n\n 41      {\n 42      //If an exception or error, then log to file\n 43      if(type == LogType.Exception || type == LogType.Error)\n 44             {\n\n 45                  SW.WriteLine(\"Logged at: \" + System.DateTime.Now.ToString() + \" - Log Desc: \" + logString + \" - Trace: \" + stackTrace + \" - Type: \" + type.ToString());\n\n 46             }\n 47       }\n 48       //------------------------------------------------\n 49       //Called when object is destroyed\n 50       void OnDestroy()\n 51       {\n 52             //Close file\n 53             SW.Close();\n 54       }\n 55       //------------------------------------------------\n 56 }\n 57 //------------------------------------------------\n```", "```cs\nusing UnityEngine;\nusing System.Collections;\n//---------------------------------------------------\npublic class DelegateUsage : MonoBehaviour \n{\n //Defines delegate type: param list\n public delegate void EventHandler(int Param1, int Param2);\n//---------------------------------------------------\n//Declare array of references to functions from Delegate type - max 10 events\n\npublic EventHandler[] EH = new EventHandler[10];\n//---------------------------------------------------\n/// <summary>\n/// Awake is called before start. Will add my Delegate HandleMyEvent to list\n/// </summary>\nvoid Awake()\n{\n    //Add my event (HandleMyEvent) to delegate list\n    EH[0] = HandleMyEvent;\n}\n//---------------------------------------------------\n/// <summary>\n/// Will cycle through delegate list and call all events\n/// </summary>\n void Start()\n {\n    //Loop through all delegates in list\n    foreach(EventHandler e in EH) \n    {\n          //Call event here, if not null\n          if(e!=null)\n               e(0,0); //This calls the event\n    }\n }\n//---------------------------------------------------\n/// <summary>\n/// This is a sample delegate event. Can be referenced by Delegate Type EventHandler\n/// </summary>\n/// <param name=\"Param1\">Example param</param>\n/// <param name=\"Param2\">Example param</param>\n void HandleMyEvent (int Param1, int Param2)\n {\n    Debug.Log (\"Event Called\");\n }\n//---------------------------------------------------\n```", "```cs\nusing UnityEngine;\nusing System.Collections;\n\npublic class DebugTest : MonoBehaviour \n{\n   // Use this for initialization\nvoid Start () \n    {\n         //Get all game objects in scene\n         Transform[] Objs = Object.FindObjectsOfType<Transform>();\n\n         //Cycle through all objects\n         for(int i=0; i<Objs.Length; i++)\n         {\n               //Set object to world origin\n Objs[i].position = Vector3.zero;\n         }\n    }\n }\n```", "```cs\nusing UnityEngine;\n using System.Collections;\n\n public class DebugTest : MonoBehaviour \n {\n    // Use this for initialization\n    void Start () \n    {\n          //Get all game objects in scene\n          Transform[] Objs = Object.FindObjectsOfType<Transform>();\n\n         //Cycle through all objects\n         for(int i=0; i<Objs.Length; i++)\n         {\n                //Set object to world origin\n                Objs[i].position = Vector3.zero;\n         }\n\n         //Enter Function 01\n         Func01();\n    }\n    //-------------------------------------\n    //Function calls func2\n void Func01()\n    {\n           Func02();\n    }\n    //-------------------------------------\n    //Function calls func3\n    void Func02()\n    {\n           Func03();\n    }\n    //-------------------------------------\n    //Function prints message\n    void Func03()\n    {\n Debug.Log (\"Entered Function 3\");\n    }\n    //-------------------------------------\n }\n```"]