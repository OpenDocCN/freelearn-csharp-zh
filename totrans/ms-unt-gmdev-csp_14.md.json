["```cs\n     public class ObjectPoolManager : MonoBehaviour\n       {\n           // Static instance of the ObjectPoolManager\n           private static ObjectPoolManager instance;\n           // Property to access the ObjectPoolManager instance\n           public static ObjectPoolManager Instance\n           {\n               get\n               {\n                   if (instance == null)\n                   {\n                       instance = FindObjectOfType<ObjectPoolManager>();\n                       // If not found, create a new GameObject and add the ObjectPoolManager script to it\n                       if (instance == null)\n                       {\n                           GameObject obj = new GameObject(\"ObjectPoolManager\");\n                           instance = obj.AddComponent<ObjectPoolManager>();\n                       }\n                   }\n                   return instance;\n               }\n           }\n           private void Awake()\n           {\n               if (instance != null && instance != this)\n               {\n                   Destroy(gameObject);\n               }\n               else\n               {\n                   instance = this;\n                   DontDestroyOnLoad(gameObject);\n               }\n           }\n    ```", "```cs\n            // Define a dictionary to store object pools\n            private Dictionary<string, Queue<GameObject>> objectPools = new Dictionary<string, Queue<GameObject>>();\n            // Create or retrieve an object from the pool based on the name of it\n            public GameObject GetPooledObject(string objectName)\n            {\n                if (objectPools.ContainsKey(objectName))\n                {\n                    if (objectPools[objectName].Count > 0)\n                    {\n                        GameObject obj = objectPools[objectName].Dequeue();\n                        obj.SetActive(true);\n                        return obj;\n                    }\n                }\n                Debug.LogWarning(\"No available object in the pool with name: \" + objectName);\n                return null;\n            }\n            // Return an object to the pool\n            public void ReturnToPool(string objectName, GameObject obj)\n            {\n                obj.SetActive(false);\n                objectPools[objectName].Enqueue(obj);\n            }\n    ```", "```cs\n      // Create an object pool for a specific prefab so I can dynamically add object to the pool in runtime\n      public void CreateObjectPool(GameObject prefab, int poolSize, string objectName)\n      {\n          if (!objectPools.ContainsKey(objectName))\n          {\n              objectPools[objectName] = new Queue<GameObject>();\n              for (int i = 0; i < poolSize; i++)\n              {\n                  GameObject obj = Instantiate(prefab);\n                  obj.SetActive(false);\n                  objectPools[objectName].Enqueue(obj);\n              }\n          }\n          else\n          {\n              Debug.LogWarning(\"Object pool with name \" + objectName + \" already exists.\");\n          }\n      }\n    ```", "```cs\n    public class ExampleUsage : MonoBehaviour\n     {\n         public GameObject prefabToPool;\n         public int poolSize = 10;\n         public string objectName = \"MyTag\";\n         void Start()\n         {\n             // Create an object pool with the specified prefab, pool size, and tag\n             ObjectPoolManager.Instance.CreateObjectPool(prefabToPool, poolSize, objectName);\n             // Get an object from the pool\n             GameObject obj = ObjectPoolManager.Instance.GetPooledObject(objectName);\n             if (obj != null)\n             {\n                 // Use the object\n                 obj.transform.position = Vector3.zero;\n             }\n             // Return the object to the pool\n             ObjectPoolManager.Instance.ReturnToPool(objectName, obj);\n         }\n     }\n    ```", "```cs\n    // Define WaitForSeconds as a variable\n        private WaitForSeconds waitShort = new WaitForSeconds(2f);\n    ```", "```cs\nusing UnityEditor;\nusing UnityEngine;\npublic class CustomMeshPostprocessor : AssetPostprocessor\n{\n    void OnPreprocessModel()\n    {\n        ModelImporter importer = assetImporter as ModelImporter;\n        importer.isReadable = false; // Set Read/Write option to disabled\n        importer.meshCompression = ModelImporterMeshCompression.Medium; // Set Mesh Compression to Medium\n    }\n}\n```"]