["```cs\n    public class UsersController : Controller\n    {\n      public IActionResult Edit(int userId)\n      {\n        var usersService = new UsersService();\n        return View(usersService.GetUser(userId));\n      }\n    } \n```", "```cs\n    public class UsersService\n    {\n      private readonly UsersRepository _usersRepository;\n      public UsersService()\n      {\n        _usersRepository = new UsersRepository();\n        // Concrete Class Dependency\n      }\n      public User GetUser(int userId) => _usersRepository.GetUser(userId);\n    }\n```", "```cs\n    public class UsersRepository\n    {\n      public User GetUser(int userId) => new \n         DataContext().Users.SingleOrDefault(u => u.UserId == userId);\n      // You can just return a demo user like: \n      // new User { UserId = 1, UserName = \"Tadit\" };\n    }\n```", "```cs\n    public interface IUsersRepository\n    {\n      User GetUser(int userId);\n    }\n```", "```cs\n    public class UsersRepository : IUsersRepository\n    {\n      public User GetUser(int userId)  => new \n        DataContext().Users.SingleOrDefault(u => u.UserId == userId);\n      // You can just return a demo user like:\n      // new User { UserId = 1, UserName = \"Tadit\" }; \n    }\n```", "```cs\n  public interface IUsersService\n  {\n    User GetUser(int userId);\n  }\n```", "```cs\n    public class UsersService : IUsersService // Abstraction\n    {\n private readonly IUsersRepository _usersRepository;\n public UsersService(IUsersRepository \n         usersRepository) // Constructor Injection\n {\n _usersRepository = usersRepository;\n }\n       public User GetUser(int userId) => _usersRepository.GetUser(userId);\n    }\n```", "```cs\n    public IActionResult Edit(int userId)\n    {\n var usersService = new UsersService(new UsersRepository());\n    return View(usersService.GetUser(userId));\n    }\n```", "```cs\n    public class UsersController : Controller\n    {\n private readonly IUsersService _usersService;\n public UsersController(IUsersService usersService) // \n        Constructor Injection\n {\n _usersService = usersService;\n } \n      public IActionResult Edit(int userId)\n      {\n // We commented out the following line and used\n        // private member _usersService instead.\n        //var userService = new UsersService(new UsersRepository());\n        return View(_usersService.GetUser(userId));\n      }\n    }\n```", "```cs\n    public void ConfigureServices(IServiceCollection services)\n    {\n    services.AddTransient<IUsersService, UsersService>()\n            .AddTransient<IUsersRepository, UsersRepository>();\n    services.AddMvc();\n    }\n```", "```cs\n    services.AddTransient<IUsersService, UsersService>()\n    .AddTransient<IUsersRepository, UsersRepository>();\n```", "```cs\n    public IActionResult Edit(int userId)\n    {\n      UsersService service = new UsersService(new UsersRepository());\n      return View(service.GetUser(userId));\n    }\n```", "```cs\n    public IActionResult Edit(int userId)\n    {\n      UsersRepository repo = new UsersRepository();\n      return View(repo.GetUser(userId));\n    }\n```", "```cs\n        public IActionResult Edit(int userId)\n        {\n          return View(new DataContext()\n           .Users\n           .SingleOrDefault(u => u.UserId == userId)\n          );\n        }\n```", "```cs\n    public IUser GetUser(int userId) =>\n          _usersRepository.GetUser(userId);\n   // Return type is changed from User to IUser.\n```", "```cs\n    using Microsoft.Extensions.DependencyInjection;\n    using System;\n    namespace PacktDIExamples.Common\n    {\n      public interface IModuleRegistrar\n      {\n        void Add(Type serviceType, Type implementationType,\n           ServiceLifetime lifetime);\n      }\n    }\n```", "```cs\n    using Microsoft.Extensions.DependencyInjection;\n    using System;\n\n    namespace PacktDIExamples.Common\n    {\n      internal class ModuleRegistrar : IModuleRegistrar\n      {\n        private readonly IServiceCollection _serviceCollection;\n        public ModuleRegistrar(IServiceCollection serviceCollection)\n        {\n            this._serviceCollection = serviceCollection;\n        }\n\n        public void Add(Type serviceType, Type implementationType,\n            ServiceLifetime lifetime)\n        {\n            var descriptor = new ServiceDescriptor(serviceType, \n              implementationType, lifetime);\n this._serviceCollection.Add(descriptor);\n        }\n      }\n    }\n```", "```cs\n    namespace PacktDIExamples.Common\n    {\n      public interface IModule\n      {\n        void Initialize(IModuleRegistrar registrar);\n      }\n    }\n```", "```cs\n    using Microsoft.Extensions.DependencyInjection;\n    using PacktDIExamples.Common;\n    using System.Composition;\n\n    namespace PacktDIExamples.Business\n    {\n [Export(typeof(IModule))] // Will be used by MEF to\n         fetch the class.\n      public class ModuleInit : IModule\n      {\n        public void Initialize(IModuleRegistrar registrar) // Registrar\n            injected.\n        {\n registrar.Add(typeof(IUsersService), typeof(UsersService), ServiceLifetime.Transient);\n           // Adds the UserService instance \n           // to the container with Transient Lifetime.\n        }\n      }\n    } \n```", "```cs\n    registrar.Add(typeof(IUsersRepository), typeof(UsersRepository),\n      ServiceLifetime.Transient);\n```", "```cs\n    namespace PacktDIExamples.Common\n    {\n     public static class ModuleLoader\n     {\n        public static void LoadContainer(IServiceCollection collection,\n            string pattern)\n        {\n           // Gets the Assembly Location: The total path of the Web App\n           assembly, which in our case is \n \"C:\\\\Users\\\\taditd\\\\Desktop\\\\Packt\\\\Codes\\\\PacktDIExamples\\\\\n            PacktDIExamples\\\\bin\\\\Debug\\\\netcoreapp2.0\\\\\n            PacktDIExamples.dll\".\n            var executableLocation = Assembly.GetEntryAssembly().Location;\n\n            // Get all assemblies inside the location with a pattern\n              from \"bin\\Debug\\netcoreapp2.0\".\n            var assemblies = Directory\n                .GetFiles(Path.GetDirectoryName(executableLocation),\n                   pattern, SearchOption.AllDirectories)\n                .Select(AssemblyLoadContext.Default.LoadFromAssemblyPath)\n                .ToList();\n\n            // Composes the assemblies.\n            var configuration = new ContainerConfiguration()\n               .WithAssemblies(assemblies);\n            using (var container = configuration.CreateContainer())\n            {\n // This is important. The following line extracts\n             all the IModule implementations from the\n             assemblies we fetched.\n             IEnumerable<IModule> modules = container.GetExports<IModule&gt;();\n             var registrar = new ModuleRegistrar(collection);\n\n             foreach (IModule module in modules)\n             {\n              // Invoke Initialize for each module with the registrar\n               as a dependency.\n              module.Initialize(registrar);\n             }\n           }\n          }\n        }\n     }\n```", "```cs\n    public void ConfigureServices(IServiceCollection services)\n    {\n      // Commented out codes because we now load dependencies from\n          another layer.\n      // services.AddTransient<IUsersService, UsersService>()\n      //         .AddTransient<IUsersRepository, UsersRepository>();\n\n      ModuleLoader.LoadContainer(services, \"PacktDIExamples.*.dll\");\n      services.AddMvc();\n    }\n```"]