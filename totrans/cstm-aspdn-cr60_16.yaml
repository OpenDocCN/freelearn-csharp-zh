- en: '*Chapter 16*: Creating Custom TagHelper'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we're going to talk about `TagHelper` are pretty useful and
    make Razor much prettier and more readable. Creating custom `TagHelper` will make
    your life much easier.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing `TagHelper`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating custom `TagHelper`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The topics in this chapter refer to the MVC layer of the ASP.NET Core architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.1 – ASP.NET Core architecture'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.1_B17996.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.1 – ASP.NET Core architecture
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To follow the examples in this chapter, you will need to create an ASP.NET
    Core MVC application. Open your console, shell, or Bash terminal and change to
    your working directory. Use the following command to create a new MVC application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, open the project in Visual Studio by double-clicking the project file,
    or in Visual Studio Code by typing the following command in the already-open console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'All of the code samples in this chapter can be found in the GitHub repository
    for this book at: [https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter16](https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter16).'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing TagHelper
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With `TagHelper` are a kind of shortcut to write easier (and less) HTML or Razor
    code on the server side. `TagHelper` will be interpreted on the server and produce
    "real" HTML code for browsers.
  prefs: []
  type: TYPE_NORMAL
- en: '`TagHelper` are not a new thing in ASP.NET Core. They have been present since
    the framework''s first version. Most existing and built-in `TagHelper` are a replacement
    for the old-fashioned HTML helpers, which still exist and work in ASP.NET Core
    to keep the Razor views compatible with ASP.NET Core.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A very basic example of extending HTML tags is the built-in `AnchorTagHelper`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Many HTML developers find it a bit strange to have `HtmlHelper` between the
    HTML tags. It is hard to read and is kind of disruptive while reading the code.
    Perhaps not for ASP.NET Core developers who are used to reading that kind of code,
    but compared to `TagHelper`, it is really ugly. `TagHelper` feel more natural
    and more like HTML, even if they are not, and even if they are getting rendered
    on the server.
  prefs: []
  type: TYPE_NORMAL
- en: Many HTML helpers can be replaced with a `TagHelper`.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are also some new tags that have been built with `TagHelper`, tags that
    are not in HTML but look like HTML. One example is `EnvironmentTagHelper`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This `TagHelper` renders (or doesn't render) the contents depending on the current
    runtime environment. In this case, the target environment is the development mode.
    The first environment tag renders the contents if the current runtime environment
    is set to `Development`, and the second one renders the contents if it is *not*
    set to `Development`. This makes it a useful helper in rendering debuggable scripts
    or styles in `Development` mode and minified and optimized code in any other runtime
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: Let's now see how we can create our own custom `TagHelper`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom Tag Helpers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To use all the custom `TagHelper` that we will create in this chapter, you
    need to refer to the current assembly to tell the framework where to find the
    `TagHelper`. Open the `_ViewImports.cshtml` file in the `View/` folder and add
    the following line at the end of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s a quick example showing how to extend an existing tag using a `TagHelper`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s assume we need to have a tag configured in bold and colored in a specific
    color:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This looks like pretty old-fashioned HTML from the 90s, but this is just to
    demonstrate a simple `TagHelper`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The current method to do this task is to use a `TagHelper` to extend any tag
    that has an attribute called `strong`, as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The first line tells the tag helper to work on tags with a target attribute
    of `strong`. This `TagHelper` doesn't define its own tag, but it does provide
    an additional attribute to specify the color.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `Process` method defines how to render the HTML to the output stream. In
    this case, it adds some CSS inline styles to the current tag. It also removes
    the target attribute from the current tag. The `color` attribute won't show up.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'This will appear as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The next example shows how to define a custom tag using a `TagHelper`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create this class, called `GreeterTagHelper`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This `TagHelper` handles a `greeter` tag that has a property name. In the `Process`
    method, the current tag will be changed to a `p` tag and the new content is set
    as the current output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The result looks like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: But what if you need to do something a bit more complicated? Let's explore further.
  prefs: []
  type: TYPE_NORMAL
- en: Examining a more complex scenario
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `TagHelper` in the last section were pretty basic, simply designed to show
    how `TagHelper` work. The next example is a little more complex and shows a real
    scenario. This `TagHelper` renders a table with a list of items. This is a generic
    `TagHelper` and shows a real reason to create your own custom `TagHelper`. With
    this, you are able to reuse an isolated piece of view code. For example, you can
    wrap `div` tags. Alternatively, you can just simplify your Razor views:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by creating the `DataGridTagHelper` class. This next code snippet
    isn''t complete, but we will complete the `DataGridTagHelper` class in the following
    steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `Process` method, we call private sub-methods that do the actual work
    to make the class a little more readable.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You might need to add the following `using` statements at the beginning of
    the file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Because this is a generic `TagHelper`, incoming objects need to be analyzed.
    The `GetItemProperties` method gets the type of the property items and loads the
    `PropertyInfo` from the type. `PropertyInfo` will be used to get the table headers
    and the values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following code snippet shows the generation of the table headers. The `TableHeader`
    method writes the requisite HTML tags directly to `TagHelperOutput`. It also uses
    the list of `PropertyInfo` to get the property names that will be used as table
    header names:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using property names as table header names is not always useful. This is why
    the `GetPropertyName` method also tries to read the value from `DisplayNameAttribute`,
    which is part of the `DataAnnotation` that is heavily used in data models that
    are displayed in MVC user interfaces. Therefore, it makes sense to support this
    attribute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also, values need to be displayed. The `TableBody` method does that job:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To get the values from the actual object, the `GetPropertyValue` method is
    used:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To use this `TagHelper`, you just need to assign a list of items to this tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this case, it is a list of people, which we get in the `Persons` property
    of our current model.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The `Person` class we are using here looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Not all of the properties have `DisplayNameAttribute`, so the fallback in the
    `GetPropertyName` method is needed to get the actual property name instead of
    the `DisplayName` value.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Put the `Person` class into a `Person.cs` inside the `Models` folder.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You also need a service to load the data into the `Index` action of the `HomeController`.
    Create a `Services` folder and place a file called `PersonService.cs` into it.
    Put the following snippet inside the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here, again, we use `GenFu` to auto-generate the list of persons. If you didn''t
    already install it, you need to execute the following command to load the NuGet
    package:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If this is done you should add `PersonService` to `ServiceCollection` in the
    `Program.cs` file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And, last but not least, `PersonService` should be used in `HomeController`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This `TagHelper` needs some more checks and validations before you can use
    it in production, but it works. It displays a list of fake data that is generated
    using `GenFu` (see [*Chapter 12*](B17996_12_ePub.xhtml#_idTextAnchor172), *Content
    Negotiation Using a Custom OutputFormatter*, to learn about `GenFu`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.2 – The TagHelper sample in action'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_16.2_B17996.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 16.2 – The TagHelper sample in action
  prefs: []
  type: TYPE_NORMAL
- en: Now, you are able to extend this `TagHelper` with a lot more features, including
    sorting, filtering, and paging. Feel free to try it out in a variety of contexts.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tag Helpers are pretty useful when it comes to reusing parts of the view and
    simplifying and cleaning up your views, as in the example with `DataGridTagHelper`.
    You can also provide a library with useful view elements. There are some more
    examples of pre-existing `TagHelper` libraries and samples that you can try out
    in the *Further reading* section.
  prefs: []
  type: TYPE_NORMAL
- en: This is the last chapter of the second edition of *Customizing ASP.NET Core*.
    We're glad you read all the chapters. We hope you found the chapters useful and
    that they will help you optimize your applications.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Damian Edwards, *TagHelperPack*: [https://github.com/DamianEdwards/TagHelperPack](https://github.com/DamianEdwards/TagHelperPack)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'David Paquette, *TagHelperSamples*: [https://github.com/dpaquette/TagHelperSamples](https://github.com/dpaquette/TagHelperSamples)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*TagHelpers for Bootstrap by Teleric*: [https://www.red-gate.com/simple-talk/dotnet/asp-net/asp-net-core-tag-helpers-bootstrap/](https://www.red-gate.com/simple-talk/dotnet/asp-net/asp-net-core-tag-helpers-bootstrap/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*TagHelpers for jQuery*: [https://www.jqwidgets.com/asp.net-core-mvc-tag-helpers/](https://www.jqwidgets.com/asp.net-core-mvc-tag-helpers/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
