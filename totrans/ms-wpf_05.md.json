["```cs\nSystem.Object \n  System.Windows.Threading.DispatcherObject \n    System.Windows.DependencyObject \n      System.Windows.Media.Visual \n        System.Windows.UIElement \n          System.Windows.FrameworkElement \n            System.Windows.Controls.Control \n              System.Windows.Controls.ContentControl \n                System.Windows.Controls.Primitives.ButtonBase \n                  System.Windows.Controls.Button \n```", "```cs\n<ItemsControl ItemsSource=\"{Binding Users}\"> \n  <ItemsControl.Template> \n    <ControlTemplate TargetType=\"{x:Type ItemsControl}\"> \n      <StackPanel Orientation=\"Horizontal\" IsItemsHost=\"True\" /> \n    </ControlTemplate> \n  </ItemsControl.Template> \n</ItemsControl> \n```", "```cs\n<ItemsControl ItemsSource=\"{Binding Users}\"> \n  <ItemsControl.ItemsPanel> \n    <ItemsPanelTemplate> \n      <StackPanel Orientation=\"Horizontal\" /> \n    </ItemsPanelTemplate> \n  </ItemsControl.ItemsPanel> \n</ItemsControl> \n```", "```cs\n<Canvas Width=\"256\" Height=\"109\" Background=\"Black\"> \n  <Canvas.Resources> \n    <Style TargetType=\"{x:Type Ellipse}\"> \n      <Setter Property=\"Width\" Value=\"50\" /> \n      <Setter Property=\"Height\" Value=\"50\" /> \n      <Setter Property=\"Stroke\" Value=\"Black\" /> \n      <Setter Property=\"StrokeThickness\" Value=\"3\" /> \n    </Style> \n  </Canvas.Resources> \n  <Canvas Canvas.Left=\"3\" Canvas.Top=\"3\" Background=\"Orange\" \n    Width=\"123.5\" Height=\"50\"> \n    <Ellipse Canvas.Top=\"25\" Canvas.Left=\"25\" Fill=\"Cyan\" /> \n  </Canvas> \n  <Canvas Canvas.Left=\"129.5\" Canvas.Top=\"3\" Background=\"Orange\"  \n    Width=\"123.5\" Height=\"50\" Panel.ZIndex=\"1\" /> \n  <Canvas Canvas.Left=\"3\" Canvas.Top=\"56\" Background=\"Red\" Width=\"250\"  \n    Height=\"50\" ClipToBounds=\"True\"> \n    <Ellipse Canvas.Top=\"-25\" Canvas.Left=\"175\" Fill=\"Lime\" /> \n  </Canvas> \n  <Ellipse Canvas.Top=\"29.5\" Canvas.Left=\"103\" Fill=\"Yellow\" /> \n</Canvas> \n```", "```cs\n<DockPanel> \n  <DockPanel.Resources> \n    <Style TargetType=\"{x:Type TextBlock}\"> \n      <Setter Property=\"HorizontalAlignment\" Value=\"Center\" /> \n      <Setter Property=\"VerticalAlignment\" Value=\"Center\" /> \n      <Setter Property=\"FontSize\" Value=\"14\" /> \n    </Style> \n    <Style TargetType=\"{x:Type Border}\"> \n      <Setter Property=\"BorderBrush\" Value=\"Black\" /> \n      <Setter Property=\"BorderThickness\" Value=\"1\" /> \n    </Style> \n  </DockPanel.Resources> \n  <Border Padding=\"0,3\" DockPanel.Dock=\"Top\"> \n    <TextBlock Text=\"Menu Bar\" /> \n  </Border> \n  <Border Padding=\"0,3\" DockPanel.Dock=\"Bottom\"> \n    <TextBlock Text=\"Status Bar\" /> \n  </Border> \n  <Border Width=\"100\" DockPanel.Dock=\"Left\"> \n    <TextBlock Text=\"Context Menu\" TextWrapping=\"Wrap\" /> \n  </Border> \n  <Border> \n    <TextBlock Text=\"View\" /> \n  </Border> \n</DockPanel> \n```", "```cs\n  ...\n  <Border Padding=\"0,3\" DockPanel.Dock=\"Top\"> \n    <TextBlock Text=\"Menu Bar\" /> \n  </Border> \n  <Border Width=\"100\" DockPanel.Dock=\"Left\"> \n    <TextBlock Text=\"Context Menu\" TextWrapping=\"Wrap\" /> \n  </Border> \n  <Border Padding=\"0,3\" DockPanel.Dock=\"Bottom\"> \n    <TextBlock Text=\"Status Bar\" /> \n  </Border> \n  <Border> \n    <TextBlock Text=\"View\" /> \n  </Border> \n  ...\n```", "```cs\n<Grid TextElement.FontSize=\"14\" Width=\"300\" Margin=\"10\"> \n  <Grid.ColumnDefinitions> \n    <ColumnDefinition Width=\"2.5*\" /> \n    <ColumnDefinition /> \n    <ColumnDefinition /> \n  </Grid.ColumnDefinitions> \n  <Grid.RowDefinitions> \n    <RowDefinition /> \n    <RowDefinition Height=\"Auto\" /> \n  </Grid.RowDefinitions> \n  <TextBlock Grid.ColumnSpan=\"3\" HorizontalAlignment=\"Center\" \n    VerticalAlignment=\"Center\" Text=\"Are you sure you want to continue?\" \n    Margin=\"40\" /> \n  <Button Grid.Row=\"1\" Grid.Column=\"1\" Content=\"OK\" IsDefault=\"True\"\n Height=\"26\" Margin=\"0,0,2.5,0\" />\n <Button Grid.Row=\"1\" Grid.Column=\"2\" Content=\"Cancel\" IsCancel=\"True\"\n Height=\"26\" Margin=\"2.5,0,0,0\" />\n</Grid> \n```", "```cs\n<Grid TextElement.FontSize=\"14\" Width=\"300\" Margin=\"10\" \n  ShowGridLines=\"True\"> \n  ... \n</Grid> \n```", "```cs\n<Grid TextElement.FontSize=\"14\" Margin=\"10\" IsSharedSizeScope=\"True\"> \n  <Grid.RowDefinitions> \n    <RowDefinition Height=\"Auto\" /> \n    <RowDefinition Height=\"Auto\" /> \n    <RowDefinition /> \n  </Grid.RowDefinitions> \n  <Grid TextElement.FontWeight=\"SemiBold\" Margin=\"0,0,0,3\" \n    ShowGridLines=\"True\"> \n    <Grid.ColumnDefinitions> \n      <ColumnDefinition Width=\"Auto\" SharedSizeGroup=\"Name\" /> \n      <ColumnDefinition /> \n      <ColumnDefinition Width=\"Auto\" SharedSizeGroup=\"Age\" /> \n    </Grid.ColumnDefinitions> \n    <TextBlock Text=\"Name\" /> \n    <TextBlock Grid.Column=\"1\" Text=\"Comments\" Margin=\"10,0\" /> \n    <TextBlock Grid.Column=\"2\" Text=\"Age\" /> \n  </Grid> \n  <Separator Grid.Row=\"1\" /> \n  <ItemsControl Grid.Row=\"2\" ItemsSource=\"{Binding Users}\"> \n    <ItemsControl.ItemTemplate> \n      <DataTemplate DataType=\"{x:Type DataModels:User}\"> \n        <Grid ShowGridLines=\"True\"> \n          <Grid.ColumnDefinitions> \n            <ColumnDefinition Width=\"Auto\" SharedSizeGroup=\"Name\" /> \n            <ColumnDefinition /> \n            <ColumnDefinition Width=\"Auto\" SharedSizeGroup=\"Age\" /> \n          </Grid.ColumnDefinitions> \n          <TextBlock Text=\"{Binding Name}\" /> \n          <TextBlock Grid.Column=\"1\" Text=\"Star-sized column takes all\n            remaining space\" Margin=\"10,0\" />          \n          <TextBlock Grid.Column=\"2\" Text=\"{Binding Age}\" /> \n        </Grid> \n      </DataTemplate> \n    </ItemsControl.ItemTemplate> \n  </ItemsControl> \n</Grid> \n```", "```cs\n<ColumnDefinition SharedSizeGroup=\"Comments\" /> \n```", "```cs\n<Border Background=\"Black\" Padding=\"5\"> \n  <Border.Resources> \n    <Style TargetType=\"{x:Type TextBlock}\"> \n      <Setter Property=\"Padding\" Value=\"5\" /> \n      <Setter Property=\"Background\" Value=\"Yellow\" /> \n      <Setter Property=\"TextAlignment\" Value=\"Center\" /> \n    </Style> \n  </Border.Resources> \n  <StackPanel TextElement.FontSize=\"14\"> \n    <TextBlock Text=\"Stretched Horizontally\" /> \n    <TextBlock Text=\"With Margin\" Margin=\"20\" /> \n    <TextBlock Text=\"Centered Horizontally\" \n      HorizontalAlignment=\"Center\" /> \n    <Border BorderBrush=\"Cyan\" BorderThickness=\"1\" Margin=\"0,5,0,0\"\n      Padding=\"5\" SnapsToDevicePixels=\"True\"> \n      <StackPanel Orientation=\"Horizontal\"> \n        <TextBlock Text=\"Stretched Vertically\" /> \n        <TextBlock Text=\"With Margin\" Margin=\"20\" /> \n        <TextBlock Text=\"Centered Vertically\" \n          VerticalAlignment=\"Center\" /> \n      </StackPanel> \n    </Border> \n  </StackPanel> \n</Border> \n```", "```cs\n<StackPanel TextElement.FontSize=\"14\" Background=\"White\"> \n  <UniformGrid Columns=\"7\" Rows=\"1\"> \n    <UniformGrid.Resources> \n      <Style TargetType=\"{x:Type TextBlock}\"> \n        <Setter Property=\"Height\" Value=\"35\" /> \n        <Setter Property=\"HorizontalAlignment\" Value=\"Center\" /> \n        <Setter Property=\"Padding\" Value=\"0,5,0,0\" /> \n      </Style> \n    </UniformGrid.Resources> \n    <TextBlock Text=\"Mon\" /> \n    <TextBlock Text=\"Tue\" /> \n    <TextBlock Text=\"Wed\" /> \n    <TextBlock Text=\"Thu\" /> \n    <TextBlock Text=\"Fri\" /> \n    <TextBlock Text=\"Sat\" /> \n    <TextBlock Text=\"Sun\" /> \n  </UniformGrid> \n  <ItemsControl ItemsSource=\"{Binding Days}\" Background=\"Black\"\n    Padding=\"0,0,1,1\"> \n    <ItemsControl.ItemsPanel> \n      <ItemsPanelTemplate> \n        <UniformGrid Columns=\"7\" FirstColumn=\"2\" /> \n      </ItemsPanelTemplate> \n    </ItemsControl.ItemsPanel> \n    <ItemsControl.ItemTemplate> \n      <DataTemplate> \n        <Border BorderBrush=\"Black\" BorderThickness=\"1,1,0,0\" \n          Background=\"White\"> \n          <TextBlock Text=\"{Binding}\" Height=\"35\" \n            HorizontalAlignment=\"Center\" Padding=\"0,7.5,0,0\" /> \n        </Border> \n      </DataTemplate> \n    </ItemsControl.ItemTemplate> \n  </ItemsControl> \n</StackPanel> \n```", "```cs\nprivate List<int> days = Enumerable.Range(1, 31).ToList(); \n\n... \n\npublic List<int> Days \n{ \n  get { return days; } \n  set { days = value; NotifyPropertyChanged(); } \n} \n```", "```cs\n<WrapPanel ItemHeight=\"50\" Width=\"150\" TextElement.FontSize=\"14\"> \n  <WrapPanel.Resources> \n    <Style TargetType=\"{x:Type Button}\"> \n      <Setter Property=\"Width\" Value=\"50\" /> \n    </Style> \n  </WrapPanel.Resources> \n  <Button Content=\"7\" /> \n  <Button Content=\"8\" /> \n  <Button Content=\"9\" /> \n  <Button Content=\"4\" /> \n  <Button Content=\"5\" /> \n  <Button Content=\"6\" /> \n  <Button Content=\"1\" /> \n  <Button Content=\"2\" /> \n  <Button Content=\"3\" /> \n  <Button Content=\"0\" Width=\"100\" /> \n  <Button Content=\".\" /> \n</WrapPanel> \n```", "```cs\nusing System; \nusing System.Windows; \nusing System.Windows.Controls; \n\nnamespace CompanyName.ApplicationName.Views.Panels \n{ \n  public class CircumferencePanel : Panel \n  { \n    public Thickness Padding { get; set; } \n\n    protected override Size MeasureOverride(Size availableSize) \n    { \n      foreach (UIElement element in Children) \n      { \n        element.Measure(\n          new Size(double.PositiveInfinity, double.PositiveInfinity)); \n      } \n      return availableSize; \n    } \n\n    protected override Size ArrangeOverride(Size finalSize) \n    { \n      if (Children.Count == 0) return finalSize; \n      double currentAngle = 90 * (Math.PI / 180); \n      double radiansPerElement = \n        (360 / Children.Count) * (Math.PI / 180.0);\n      double radiusX = finalSize.Width / 2.0 - Padding.Left; \n      double radiusY = finalSize.Height / 2.0 - Padding.Top; \n      foreach (UIElement element in Children) \n      { \n        Point childPoint = new Point(Math.Cos(currentAngle) * radiusX,\n          -Math.Sin(currentAngle) * radiusY); \n        Point centeredChildPoint = new Point(childPoint.X + \n          finalSize.Width / 2 - element.DesiredSize.Width / 2, childPoint.Y\n          + finalSize.Height / 2 - element.DesiredSize.Height / 2);\n        Rect boundingBox = \n          new Rect(centeredChildPoint, element.DesiredSize); \n        element.Arrange(boundingBox); \n        currentAngle -= radiansPerElement; \n      } \n      return finalSize; \n    } \n  } \n} \n```", "```cs\n\n...\n\n<ItemsControl ItemsSource=\"{Binding Hours}\" TextElement.FontSize=\"24\"\n  Width=\"200\" Height=\"200\">\n  <ItemsControl.ItemsPanel>\n    <ItemsPanelTemplate>\n      <Panels:CircumferencePanel Padding=\"20\" />\n    </ItemsPanelTemplate>\n  </ItemsControl.ItemsPanel>\n</ItemsControl>\n```", "```cs\nprivate List<int> hours = new List<int>() { 12 }; \n\npublic List<int> Hours \n{ \n  get { return hours; } \n  set { hours = value; NotifyPropertyChanged(); } \n}\n\n...\n\nhours.AddRange(Enumerable.Range(1, 11)); \n```", "```cs\n<Button Width=\"80\" Height=\"30\" TextElement.FontSize=\"14\"> \n  <StackPanel Orientation=\"Horizontal\"> \n    <Rectangle Fill=\"Cyan\" Stroke=\"Black\" StrokeThickness=\"1\" Width=\"16\" \n      Height=\"16\" /> \n    <TextBlock Text=\"Cyan\" Margin=\"5,0,0,0\" /> \n  </StackPanel> \n</Button>\n```", "```cs\n<ControlTemplate x:Key=\"ButtonTemplate\" TargetType=\"{x:Type Button}\"> \n  <ContentPresenter Content=\"{TemplateBinding ToolTip}\" /> \n</ControlTemplate> \n```", "```cs\n<ControlTemplate x:Key=\"TabItemTemplate\" TargetType=\"{x:Type TabItem}\"> \n  <StackPanel> \n    <ContentPresenter ContentSource=\"Header\" /> \n    <ContentPresenter ContentSource=\"Content\" /> \n  </StackPanel> \n</ControlTemplate> \n```", "```cs\n<ControlTemplate x:Key=\"Template1\" TargetType=\"{x:Type ItemsControl}\"> \n  <StackPanel Orientation=\"Horizontal\" IsItemsHost=\"True\" /> \n</ControlTemplate> \n```", "```cs\n<ControlTemplate x:Key=\"Template2\" TargetType=\"{x:Type ItemsControl}\"> \n  <ItemsPresenter /> \n</ControlTemplate> \n```", "```cs\n<ListBox ItemsSource=\"{Binding Users}\" AlternationCount=\"3\"> \n  <ListBox.ItemContainerStyle> \n    <Style TargetType=\"{x:Type ListBoxItem}\"> \n      <Setter Property=\"FontSize\" Value=\"14\" /> \n      <Setter Property=\"Foreground\" Value=\"White\" /> \n      <Setter Property=\"Padding\" Value=\"5\" /> \n      <Style.Triggers> \n        <Trigger Property=\"ListBox.AlternationIndex\" Value=\"0\"> \n          <Setter Property=\"Background\" Value=\"Red\" /> \n        </Trigger> \n        <Trigger Property=\"ListBox.AlternationIndex\" Value=\"1\"> \n          <Setter Property=\"Background\" Value=\"Green\" /> \n        </Trigger> \n        <Trigger Property=\"ListBox.AlternationIndex\" Value=\"2\"> \n          <Setter Property=\"Background\" Value=\"Blue\" /> \n        </Trigger> \n      </Style.Triggers> \n    </Style> \n  </ListBox.ItemContainerStyle> \n</ListBox> \n```", "```cs\n<ListBox ItemsSource=\"{Binding Users}\" AlternationCount=\"3\"> \n  <ListBox.Resources> \n    <AlternationConverter x:Key=\"BackgroundConverter\"> \n      <SolidColorBrush>Red</SolidColorBrush> \n      <SolidColorBrush>Green</SolidColorBrush> \n      <SolidColorBrush>Blue</SolidColorBrush> \n    </AlternationConverter> \n  </ListBox.Resources> \n  <ListBox.ItemContainerStyle> \n    <Style TargetType=\"{x:Type ListBoxItem}\"> \n      <Setter Property=\"FontSize\" Value=\"14\" /> \n      <Setter Property=\"Foreground\" Value=\"White\" /> \n      <Setter Property=\"Padding\" Value=\"5\" /> \n      <Setter Property=\"Background\" \n        Value=\"{Binding (ItemsControl.AlternationIndex), \n        RelativeSource={RelativeSource Self}, \n        Converter={StaticResource BackgroundConverter}}\" /> \n    </Style> \n  </ListBox.ItemContainerStyle> \n</ListBox> \n```", "```cs\n<Converters:StringToFirstLetterConverter x:Key=\"StringToFirstLetterConverter\" />\n<CollectionViewSource x:Key=\"GroupedUsers\" Source=\"{Binding MoreUsers}\">\n  <CollectionViewSource.GroupDescriptions>\n    <PropertyGroupDescription PropertyName=\"Name\" \n      Converter=\"{StaticResource StringToFirstLetterConverter}\" />\n  </CollectionViewSource.GroupDescriptions>\n  <CollectionViewSource.SortDescriptions>\n    <ComponentModel:SortDescription PropertyName=\"Name\" />\n  </CollectionViewSource.SortDescriptions>\n</CollectionViewSource>\n```", "```cs\nusing System; \nusing System.Globalization; \nusing System.Windows; \nusing System.Windows.Data; \n\nnamespace CompanyName.ApplicationName.Converters \n{ \n  [ValueConversion(typeof(string), typeof(string))] \n  public class StringToFirstLetterConverter : IValueConverter \n  { \n    public object Convert(object value, Type targetType, object parameter,\n      CultureInfo culture) \n    { \n      if (value == null) return DependencyProperty.UnsetValue;\n      string stringValue = value.ToString();\n      if (stringValue.Length < 1) return DependencyProperty.UnsetValue;\n      return stringValue[0]; \n    } \n\n    public object ConvertBack(object value, Type targetType, \n      object parameter, CultureInfo culture) \n    { \n      return DependencyProperty.UnsetValue; \n    } \n  } \n} \n```", "```cs\n<ItemsControl ItemsSource=\"{Binding Source={StaticResource GroupedUsers}}\"  \n  Background=\"White\" FontSize=\"14\"> \n  <ItemsControl.GroupStyle> \n    <GroupStyle> \n      <GroupStyle.HeaderTemplate> \n        <DataTemplate> \n          <TextBlock Text=\"{Binding Name, \n            Converter={StaticResource StringToFirstLetterConverter}}\" \n            Background=\"Black\" Foreground=\"White\" FontWeight=\"Bold\" \n            Padding=\"5,4\" />\n        </DataTemplate> \n      </GroupStyle.HeaderTemplate> \n    </GroupStyle> \n  </ItemsControl.GroupStyle> \n  <ItemsControl.ItemTemplate> \n    <DataTemplate DataType=\"{x:Type DataModels:User}\"> \n      <TextBlock Text=\"{Binding Name}\" Foreground=\"Black\" \n        Padding=\"0,2\" />\n    </DataTemplate> \n  </ItemsControl.ItemTemplate> \n</ItemsControl> \n```", "```cs\npublic AdornerView()\n{\n  InitializeComponent();\n  Loaded += View_Loaded;\n}\n\n... \n\nprivate void View_Loaded(object sender, RoutedEventArgs e) \n{ \n  AdornerLayer adornerLayer = AdornerLayer.GetAdornerLayer(Canvas); \n  foreach (UIElement uiElement in Canvas.Children) \n  { \n    adornerLayer.Add(new ResizeAdorner(uiElement)); \n  } \n} \n```", "```cs\n<Canvas Name=\"Canvas\"> \n  <Rectangle Canvas.Top=\"50\" Canvas.Left=\"50\" Fill=\"Lime\"  \n    Stroke=\"Black\" StrokeThickness=\"3\" Width=\"150\" Height=\"50\" /> \n  <Rectangle Canvas.Top=\"25\" Canvas.Left=\"250\" Fill=\"Yellow\"  \n    Stroke=\"Black\" StrokeThickness=\"3\" Width=\"100\" Height=\"150\" /> \n</Canvas> \n```", "```cs\nusing System; \nusing System.Windows; \nusing System.Windows.Controls; \nusing System.Windows.Controls.Primitives; \nusing System.Windows.Documents; \nusing System.Windows.Input; \nusing System.Windows.Media; \n\nnamespace CompanyName.ApplicationName.Views.Adorners \n{ \n  public class ResizeAdorner : Adorner \n  { \n    private VisualCollection visualChildren; \n    private Thumb top, left, bottom, right; \n\n    public ResizeAdorner(UIElement adornedElement) : base(adornedElement) \n    { \n      visualChildren = new VisualCollection(this); \n      top = InitializeThumb(Cursors.SizeNS, Top_DragDelta); \n      left = InitializeThumb(Cursors.SizeWE, Left_DragDelta); \n      bottom = InitializeThumb(Cursors.SizeNS, Bottom_DragDelta); \n      right = InitializeThumb(Cursors.SizeWE, Right_DragDelta); \n    } \n\n    private Thumb InitializeThumb(Cursor cursor, \n      DragDeltaEventHandler eventHandler) \n    { \n      Thumb thumb = new Thumb(); \n      thumb.BorderBrush = Brushes.Black; \n      thumb.BorderThickness = new Thickness(1); \n      thumb.Cursor = cursor; \n      thumb.DragDelta += eventHandler; \n      thumb.Height = thumb.Width = 6.0; \n      visualChildren.Add(thumb); \n      return thumb; \n    } \n\n    private void Top_DragDelta(object sender, DragDeltaEventArgs e) \n    { \n      FrameworkElement adornedElement = (FrameworkElement)AdornedElement; \n      adornedElement.Height =  \n        Math.Max(adornedElement.Height - e.VerticalChange, 6); \n      Canvas.SetTop(adornedElement, \n        Canvas.GetTop(adornedElement) + e.VerticalChange); \n    } \n\n    private void Left_DragDelta(object sender, DragDeltaEventArgs e) \n    { \n      FrameworkElement adornedElement = (FrameworkElement)AdornedElement; \n      adornedElement.Width =  \n        Math.Max(adornedElement.Width - e.HorizontalChange, 6); \n      Canvas.SetLeft(adornedElement, \n        Canvas.GetLeft(adornedElement) + e.HorizontalChange); \n    } \n\n    private void Bottom_DragDelta(object sender, DragDeltaEventArgs e) \n    { \n      FrameworkElement adornedElement = (FrameworkElement)AdornedElement; \n      adornedElement.Height =  \n        Math.Max(adornedElement.Height + e.VerticalChange, 6); \n    } \n\n    private void Right_DragDelta(object sender, DragDeltaEventArgs e) \n    { \n      FrameworkElement adornedElement = (FrameworkElement)AdornedElement; \n      adornedElement.Width =  \n        Math.Max(adornedElement.Width + e.HorizontalChange, 6); \n    } \n\n    protected override void OnRender(DrawingContext drawingContext) \n    { \n      SolidColorBrush brush = new SolidColorBrush(Colors.Transparent); \n      Pen pen = new Pen(new SolidColorBrush(Colors.DeepSkyBlue), 1.0); \n      drawingContext.DrawRectangle(brush, pen,  \n        new Rect(-2, -2, AdornedElement.DesiredSize.Width + 4, \n        AdornedElement.DesiredSize.Height + 4)); \n    } \n\n    protected override Size ArrangeOverride(Size finalSize) \n    { \n      top.Arrange(\n        new Rect(AdornedElement.DesiredSize.Width / 2 - 3, -8, 6, 6)); \n      left.Arrange(\n        new Rect(-8, AdornedElement.DesiredSize.Height / 2 - 3, 6, 6)); \n      bottom.Arrange(new Rect(AdornedElement.DesiredSize.Width / 2 - 3, \n        AdornedElement.DesiredSize.Height + 2, 6, 6)); \n      right.Arrange(new Rect(AdornedElement.DesiredSize.Width + 2,  \n        AdornedElement.DesiredSize.Height / 2 - 3, 6, 6)); \n      return finalSize;\n    } \n\n    protected override int VisualChildrenCount \n    { \n      get { return visualChildren.Count; } \n    } \n\n    protected override Visual GetVisualChild(int index) \n    { \n      return visualChildren[index]; \n    } \n  } \n} \n```", "```cs\n<Button Content=\"Go\"> \n  <Button.Style> \n    <Style TargetType=\"{x:Type Button}\"> \n      <Setter Property=\"Foreground\" Value=\"Green\" /> \n      <Setter Property=\"Background\" Value=\"White\" /> \n    </Style> \n  </Button.Style> \n</Button> \n```", "```cs\n<Button Content=\"Go\"> \n  <Button.Style> \n    <Style> \n      <Setter Property=\"Button.Foreground\" Value=\"Green\" /> \n      <Setter Property=\"Button.Background\" Value=\"White\" /> \n    </Style> \n  </Button.Style> \n</Button>       \n```", "```cs\n<Style x:Key=\"TextBoxStyle\" TargetType=\"{x:Type TextBox}\"> \n  <Setter Property=\"SnapsToDevicePixels\" Value=\"True\" /> \n  <Setter Property=\"Margin\" Value=\"0,0,0,5\" /> \n  <Setter Property=\"Padding\" Value=\"1.5,2\" /> \n  <Setter Property=\"TextWrapping\" Value=\"Wrap\" /> \n</Style> \n<Style x:Key=\"ReadOnlyTextBoxStyle\" TargetType=\"{x:Type TextBox}\"  \n  BasedOn=\"{StaticResource TextBoxStyle}\"> \n  <Setter Property=\"IsReadOnly\" Value=\"True\" /> \n  <Setter Property=\"Cursor\" Value=\"Arrow\" /> \n</Style> \n```", "```cs\n<Style x:Key=\"ExtendedTextBoxStyle\" TargetType=\"{x:Type TextBox}\"  \n  BasedOn=\"{StaticResource {x:Type TextBox}}\"> \n  ... \n</Style> \n```", "```cs\n<Application.Resources> \n  <ResourceDictionary> \n    <!-- Add resources here --> \n  </ResourceDictionary> \n</Application.Resources> \n```", "```cs\n<Application.Resources> \n  <!-- Add Resources here --> \n</Application.Resources> \n```", "```cs\n<Resources> \n  <Style TargetType=\"{x:Type Button}\"> \n    <Setter Property=\"Foreground\" Value=\"Green\" /> \n    <Setter Property=\"Background\" Value=\"White\" /> \n  </Style> \n</Resources> \n```", "```cs\n<Resources> \n  <Style x:Key=\"ButtonStyle\"> \n    <Setter Property=\"Button.Foreground\" Value=\"Green\" /> \n    <Setter Property=\"Button.Background\" Value=\"White\" /> \n  </Style> \n</Resources> \n... \n<Button Style=\"{StaticResource ButtonStyle}\" Content=\"Go\" /> \n```", "```cs\n<Resources> \n  <Style x:Key=\"ButtonStyle\" TargetType=\"{x:Type Button}\"> \n    <Setter Property=\"Foreground\" Value=\"Green\" /> \n    <Setter Property=\"Background\" Value=\"White\" /> \n  </Style> \n</Resources> \n```", "```cs\n<Resources> \n  <Style> \n    <Setter Property=\"Foreground\" Value=\"Green\" /> \n    <Setter Property=\"Background\" Value=\"White\" /> \n  </Style> \n</Resources> \n```", "```cs\nThe member \"Foreground\" is not recognized or is not accessible. \nThe member \"Background\" is not recognized or is not accessible.\n```", "```cs\n<Style TargetType=\"{x:Type Button}\"> \n  <Setter Property=\"Foreground\" Value=\"{StaticResource RedBrush}\" /> \n</Style> \n<SolidColorBrush x:Key=\"RedBrush\" Color=\"Red\" /> \n```", "```cs\nThe resource \"RedBrush\" could not be resolved.\n```", "```cs\n<Style TargetType=\"{x:Type Button}\"> \n  <Setter Property=\"Foreground\" Value=\"{DynamicResource RedBrush}\" /> \n</Style> \n<SolidColorBrush x:Key=\"RedBrush\" Color=\"Red\" /> \n```", "```cs\n<ResourceDictionary  \n\n  >   \n</ResourceDictionary> \n```", "```cs\n<Application.Resources> \n  <ResourceDictionary> \n    <!-- Add Resources here... --> \n    <ResourceDictionary.MergedDictionaries> \n      <ResourceDictionary Source=\"Default Styles.xaml\" /> \n      <ResourceDictionary Source=\"Default Templates.xaml\" /> \n    </ResourceDictionary.MergedDictionaries> \n    <!-- ... or add resources here, but not in both locations --> \n  </ResourceDictionary> \n</Application.Resources> \n```", "```cs\nThe \"Key\" attribute can only be used on an element that is contained in \"IDictionary\".\n```", "```cs\npack://application:,,,/ReferencedAssembly;component/ResourceFile.xaml \n```", "```cs\n<ResourceDictionary \n  Source=\"pack://application:,,,/CompanyName.ApplicationName.Resources;\n  component/Styles/Control Styles.xaml\" />\n```", "```cs\n<SolidColorBrush x:Key=\"Brush\" Color=\"Red\" /> \n```", "```cs\n<SolidColorBrush x:Key=\"Brush\" Color=\"Blue\" /> \n```", "```cs\n<SolidColorBrush x:Key=\"Brush\" Color=\"Orange\" /> \n```", "```cs\n<Application.Resources> \n  <ResourceDictionary> \n    <ResourceDictionary.MergedDictionaries> \n      <ResourceDictionary Source=\"Default Styles.xaml\" /> \n      <ResourceDictionary Source=\"Default Styles 2.xaml\" /> \n      <ResourceDictionary Source=\"pack://application:,,,/ \n        CompanyName.ApplicationName.Resources; \n        component/Styles/Control Styles.xaml\" /> \n    </ResourceDictionary.MergedDictionaries> \n    <SolidColorBrush x:Key=\"Brush\" Color=\"Green\" /> \n    ... \n  </ResourceDictionary> \n</Application.Resources> \n```", "```cs\n<Button Content=\"Go\"> \n  <Button.Resources> \n    <SolidColorBrush x:Key=\"Brush\" Color=\"Cyan\" /> \n  </Button.Resources> \n  <Button.Style> \n    <Style TargetType=\"{x:Type Button}\"> \n      <Setter Property=\"Foreground\" Value=\"{StaticResource Brush}\" /> \n    </Style> \n  </Button.Style> \n </Button> \n```", "```cs\n<UserControl.Resources> \n  <SolidColorBrush x:Key=\"Brush\" Color=\"Purple\" /> \n</UserControl.Resources> \n```", "```cs\n<Rectangle Width=\"300\" Height=\"300\" Fill=\"Orange\"> \n  <Rectangle.Triggers> \n    <EventTrigger RoutedEvent=\"Loaded\"> \n      <BeginStoryboard> \n        <Storyboard Storyboard.TargetProperty=\"Width\"> \n          <DoubleAnimation Duration=\"0:0:1\" To=\"50\" AutoReverse=\"True\"  \n            RepeatBehavior=\"Forever\" /> \n        </Storyboard> \n      </BeginStoryboard> \n    </EventTrigger> \n  </Rectangle.Triggers> \n</Rectangle> \n```", "```cs\n<EventTrigger RoutedEvent=\"Loaded\"> \n  <EventTrigger.Actions> \n    <BeginStoryboard> \n      <Storyboard Storyboard.TargetProperty=\"Width\"> \n        <DoubleAnimation Duration=\"0:0:1\" To=\"50\" AutoReverse=\"True\"  \n          RepeatBehavior=\"Forever\" /> \n      </Storyboard> \n    </BeginStoryboard> \n  </EventTrigger.Actions> \n</EventTrigger> \n```", "```cs\n<Button Content=\"Go\"> \n  <Button.Style> \n    <Style TargetType=\"{x:Type Button}\"> \n      <Setter Property=\"Foreground\" Value=\"Black\" /> \n      <Style.Triggers> \n        <Trigger Property=\"IsMouseOver\" Value=\"True\"> \n          <Setter Property=\"Foreground\" Value=\"Red\" /> \n        </Trigger> \n      </Style.Triggers> \n    </Style> \n  </Button.Style> \n</Button> \n```", "```cs\n<Button Content=\"Go\"> \n  <Button.Style> \n    <Style TargetType=\"{x:Type Button}\"> \n      <Setter Property=\"Foreground\" Value=\"Black\" /> \n      <Style.Triggers> \n        <DataTrigger Binding=\"{Binding IsMouseOver,  \n          RelativeSource={RelativeSource Self}}\" Value=\"True\"> \n          <Setter Property=\"Foreground\" Value=\"Red\" /> \n        </DataTrigger> \n      </Style.Triggers> \n    </Style> \n  </Button.Style> \n</Button> \n```", "```cs\n<Style x:Key=\"TextBoxStyle\" TargetType=\"{x:Type TextBox}\"> \n  <Style.Triggers> \n    <DataTrigger Binding=\"{Binding DataContext.IsEditable,  \n      RelativeSource={RelativeSource AncestorType={x:Type UserControl}},\n      FallbackValue=True}\" Value=\"False\"> \n      <Setter Property=\"IsReadOnly\" Value=\"True\" /> \n    </DataTrigger> \n  </Style.Triggers> \n</Style> \n```", "```cs\n<Style x:Key=\"ButtonStyle\" TargetType=\"{x:Type Button}\"> \n  <Setter Property=\"Foreground\" Value=\"Black\" /> \n  <Style.Triggers> \n    <Trigger Property=\"IsMouseOver\" Value=\"True\"> \n      <Setter Property=\"Foreground\" Value=\"Red\" /> \n    </Trigger> \n    <MultiTrigger> \n      <MultiTrigger.Conditions> \n        <Condition Property=\"IsFocused\" Value=\"True\" /> \n        <Condition Property=\"IsMouseOver\" Value=\"True\" /> \n      </MultiTrigger.Conditions> \n      <Setter Property=\"Foreground\" Value=\"Green\" /> \n    </MultiTrigger> \n  </Style.Triggers> \n</Style> \n```", "```cs\n<StackPanel> \n  <CheckBox Name=\"ShowErrors\" Content=\"Show Errors\" Margin=\"0,0,0,10\" /> \n  <TextBlock> \n    <TextBlock.Style> \n      <Style TargetType=\"{x:Type TextBlock}\"> \n        <Setter Property=\"Text\" Value=\"No Errors\" /> \n        <Style.Triggers> \n          <MultiDataTrigger> \n            <MultiDataTrigger.Conditions> \n              <Condition Binding=\"{Binding IsValid}\" Value=\"False\" /> \n              <Condition Binding=\"{Binding IsChecked,\n                ElementName=ShowErrors}\" Value=\"True\" /> \n            </MultiDataTrigger.Conditions> \n            <MultiDataTrigger.Setters> \n              <Setter Property=\"Text\" Value=\"{Binding ErrorList}\" /> \n            </MultiDataTrigger.Setters> \n          </MultiDataTrigger> \n        </Style.Triggers> \n      </Style> \n    </TextBlock.Style> \n  </TextBlock> \n  ... \n</StackPanel> \n```", "```cs\n<TextBox Width=\"200\" Height=\"28\"> \n  <TextBox.Style> \n    <Style TargetType=\"{x:Type TextBox}\"> \n      <Setter Property=\"Opacity\" Value=\"0.25\" /> \n      <Style.Triggers> \n        <Trigger Property=\"IsMouseOver\" Value=\"True\"> \n          <Trigger.EnterActions> \n            <BeginStoryboard> \n              <Storyboard Storyboard.TargetProperty=\"Opacity\"> \n                <DoubleAnimation Duration=\"0:0:0.25\" To=\"1.0\" /> \n              </Storyboard> \n            </BeginStoryboard> \n          </Trigger.EnterActions> \n          <Trigger.ExitActions> \n            <BeginStoryboard> \n              <Storyboard Storyboard.TargetProperty=\"Opacity\"> \n                <DoubleAnimation Duration=\"0:0:0.25\" To=\"0.25\" /> \n              </Storyboard> \n            </BeginStoryboard> \n          </Trigger.ExitActions> \n        </Trigger> \n      </Style.Triggers> \n    </Style> \n  </TextBox.Style> \n</TextBox> \n```", "```cs\n<Button Content=\"Go\" Width=\"100\" HorizontalAlignment=\"Center\"> \n  <Button.Template> \n    <ControlTemplate TargetType=\"{x:Type Button}\"> \n      <Grid> \n        <Ellipse Fill=\"Orange\" Stroke=\"Black\" StrokeThickness=\"3\"  \n          Height=\"{Binding ActualWidth,  \n          RelativeSource={RelativeSource Self}}\" /> \n        <ContentPresenter HorizontalAlignment=\"Center\"  \n          VerticalAlignment=\"Center\" TextElement.FontSize=\"18\"  \n          TextElement.FontWeight=\"Bold\" /> \n      </Grid> \n    </ControlTemplate> \n  </Button.Template>   \n</Button> \n```", "```cs\nEach dictionary entry must have an associated key.\n```", "```cs\n<ControlTemplate x:Key=\"ButtonTemplate\" TargetType=\"{x:Type Button}\"> \n  ... \n</ControlTemplate> \n<Style TargetType=\"{x:Type Button}\"> \n  <Setter Property=\"Template\" Value=\"{StaticResource ButtonTemplate}\" /> \n</Style> \n```", "```cs\n<Button Content=\"Go\" Width=\"100\" HorizontalAlignment=\"Center\"  \n  Background=\"Orange\" HorizontalContentAlignment=\"Center\"  \n  VerticalContentAlignment=\"Center\" FontSize=\"18\"> \n  <Button.Template> \n    <ControlTemplate TargetType=\"{x:Type Button}\"> \n      <Grid> \n        <Ellipse Fill=\"{TemplateBinding Background}\"  \n          Stroke=\"{TemplateBinding Foreground}\" StrokeThickness=\"3\"  \n          Height=\"{Binding ActualWidth,  \n          RelativeSource={RelativeSource Self}}\" /> \n        <ContentPresenter HorizontalAlignment=\"{TemplateBinding  \n          HorizontalContentAlignment}\"  \n          VerticalAlignment=\"{TemplateBinding  \n          VerticalContentAlignment}\" \n          TextElement.FontWeight=\"{TemplateBinding FontWeight}\"\n          TextElement.FontSize=\"{TemplateBinding FontSize}\" /> \n      </Grid> \n    </ControlTemplate> \n  </Button.Template>   \n</Button> \n```", "```cs\n<Button Attached:ButtonProperties.StrokeThickness=\"3\" ... /> \n```", "```cs\n<Ellipse StrokeThickness=\n  \"{Binding (Attached:ButtonProperties.StrokeThickness)}\" ... /> \n```", "```cs\n<ControlTemplate TargetType=\"{x:Type TextBox}\"> \n  <Border Name=\"border\" BorderBrush=\"{TemplateBinding BorderBrush}\"  \n    BorderThickness=\"{TemplateBinding BorderThickness}\"  \n    Background=\"{TemplateBinding Background}\"  \n    SnapsToDevicePixels=\"True\"> \n    <ScrollViewer Name=\"PART_ContentHost\" Focusable=\"False\"  \n      HorizontalScrollBarVisibility=\"Hidden\"  \n      VerticalScrollBarVisibility=\"Hidden\" /> \n  </Border> \n  <ControlTemplate.Triggers> \n    <Trigger Property=\"IsEnabled\" Value=\"False\"> \n      <Setter Property=\"Opacity\" TargetName=\"border\" Value=\"0.56\" /> \n    </Trigger> \n    <Trigger Property=\"IsMouseOver\" Value=\"True\"> \n      <Setter Property=\"BorderBrush\" TargetName=\"border\"  \n        Value=\"#FF7EB4EA\" /> \n    </Trigger> \n    <Trigger Property=\"IsKeyboardFocused\" Value=\"True\"> \n      <Setter Property=\"BorderBrush\" TargetName=\"border\"  \n        Value=\"#FF569DE5\" /> \n    </Trigger> \n  </ControlTemplate.Triggers> \n</ControlTemplate> \n```", "```cs\n<TextBox Text=\"Hidden Text Box\"> \n  <TextBox.Template> \n    <ControlTemplate TargetType=\"{x:Type TextBox}\"> \n      <ContentPresenter Content=\"{TemplateBinding Text}\" /> \n    </ControlTemplate> \n  </TextBox.Template> \n</TextBox> \n```", "```cs\n<TextBox Name=\"Text\" Text=\"Does this work?\"> \n  <TextBox.Template> \n    <ControlTemplate TargetType=\"{x:Type TextBox}\"> \n      <ScrollViewer Margin=\"0\" Name=\"PART_ContentHost\" /> \n    </ControlTemplate> \n  </TextBox.Template> \n</TextBox> \n```", "```cs\nusing System.Windows; \nusing System.Windows.Controls; \n\nnamespace CompanyName.ApplicationName.Views.Attached \n{ \n  public class ButtonProperties : DependencyObject \n  { \n    private static readonly DependencyPropertyKey  \n      originalToolTipPropertyKey =  \n      DependencyProperty.RegisterAttachedReadOnly(\"OriginalToolTip\", \n      typeof(string), typeof(ButtonProperties),  \n      new FrameworkPropertyMetadata(default(string))); \n\n    public static readonly DependencyProperty OriginalToolTipProperty =  \n      originalToolTipPropertyKey.DependencyProperty; \n\n    public static string GetOriginalToolTip( \n      DependencyObject dependencyObject) \n    { \n      return  \n        (string)dependencyObject.GetValue(OriginalToolTipProperty); \n    } \n\n    public static DependencyProperty DisabledToolTipProperty =  \n      DependencyProperty.RegisterAttached(\"DisabledToolTip\",  \n      typeof(string), typeof(ButtonProperties),  \n      new UIPropertyMetadata(string.Empty, OnDisabledToolTipChanged)); \n\n    public static string GetDisabledToolTip(\n      DependencyObject dependencyObject) \n    { \n      return (string)dependencyObject.GetValue(  \n        DisabledToolTipProperty); \n    } \n\n    public static void SetDisabledToolTip(\n      DependencyObject dependencyObject, string value) \n    { \n      dependencyObject.SetValue(DisabledToolTipProperty, value); \n    } \n\n    private static void OnDisabledToolTipChanged(DependencyObject  \n      dependencyObject, DependencyPropertyChangedEventArgs e) \n    { \n      Button button = dependencyObject as Button;  \n      ToolTipService.SetShowOnDisabled(button, true); \n      if (e.OldValue == null && e.NewValue != null)  \n        button.IsEnabledChanged += Button_IsEnabledChanged; \n      else if (e.OldValue != null && e.NewValue == null)  \n        button.IsEnabledChanged -= Button_IsEnabledChanged; \n    } \n\n    private static void Button_IsEnabledChanged(object sender,  \n      DependencyPropertyChangedEventArgs e) \n    { \n      Button button = sender as Button; \n      if (GetOriginalToolTip(button) == null)  \n        button.SetValue(originalToolTipPropertyKey,  \n        button.ToolTip.ToString()); \n      button.ToolTip = (bool)e.NewValue ?  \n        GetOriginalToolTip(button) : GetDisabledToolTip(button); \n    } \n  } \n} \n```", "```cs\n<Button Content=\"Save\" Attached:ButtonProperties.DisabledToolTip=\"You must\n  correct validation errors before saving\" ToolTip=\"Saves the user\" /> \n```", "```cs\n<UserControl x:Class=\n  \"CompanyName.ApplicationName.Views.Controls.AddressControl\" \n\n  xmlns:Controls=\n    \"clr-namespace:CompanyName.ApplicationName.Views.Controls\"> \n  <Grid> \n    <Grid.ColumnDefinitions> \n      <ColumnDefinition Width=\"Auto\" SharedSizeGroup=\"Label\" /> \n      <ColumnDefinition /> \n    </Grid.ColumnDefinitions> \n    <Grid.RowDefinitions> \n      <RowDefinition Height=\"Auto\" /> \n      <RowDefinition Height=\"Auto\" /> \n      <RowDefinition Height=\"Auto\" /> \n      <RowDefinition Height=\"Auto\" /> \n      <RowDefinition Height=\"Auto\" /> \n    </Grid.RowDefinitions> \n    <TextBlock Text=\"House/Street\" /> \n    <TextBox Grid.Column=\"1\" Text=\"{Binding Address.HouseAndStreet,  \n      RelativeSource={RelativeSource  \n      AncestorType={x:Type Controls:AddressControl}}}\" /> \n    <TextBlock Grid.Row=\"1\" Text=\"Town\" /> \n    <TextBox Grid.Row=\"1\" Grid.Column=\"1\"  \n      Text=\"{Binding Address.Town, RelativeSource={RelativeSource  \n      AncestorType={x:Type Controls:AddressControl}}}\" /> \n    <TextBlock Grid.Row=\"2\" Text=\"City\" /> \n    <TextBox Grid.Row=\"2\" Grid.Column=\"1\"  \n      Text=\"{Binding Address.City, RelativeSource={RelativeSource  \n      AncestorType={x:Type Controls:AddressControl}}}\" /> \n    <TextBlock Grid.Row=\"3\" Text=\"Post Code\" /> \n    <TextBox Grid.Row=\"3\" Grid.Column=\"1\"  \n      Text=\"{Binding Address.PostCode, RelativeSource={RelativeSource  \n      AncestorType={x:Type Controls:AddressControl}}}\" /> \n    <TextBlock Grid.Row=\"4\" Text=\"Country\" /> \n    <TextBox Grid.Row=\"4\" Grid.Column=\"1\"  \n      Text=\"{Binding Address.Country, RelativeSource={RelativeSource  \n      AncestorType={x:Type Controls:AddressControl}}}\" /> \n  </Grid> \n</UserControl> \n```", "```cs\nusing System.Windows; \nusing System.Windows.Controls; \nusing CompanyName.ApplicationName.DataModels; \n\nnamespace CompanyName.ApplicationName.Views.Controls \n{ \n  public partial class AddressControl : UserControl \n  { \n    public AddressControl() \n    { \n      InitializeComponent(); \n    } \n\n    public static readonly DependencyProperty AddressProperty = \n      DependencyProperty.Register(nameof(Address), \n      typeof(Address), typeof(AddressControl),  \n      new PropertyMetadata(new Address())); \n\n    public Address Address \n    { \n      get { return (Address)GetValue(AddressProperty); } \n      set { SetValue(AddressProperty, value); } \n    } \n  } \n} \n```", "```cs\nnamespace CompanyName.ApplicationName.DataModels \n{ \n  public class Address : BaseDataModel \n  { \n    private string houseAndStreet, town, city, postCode, country; \n\n    public string HouseAndStreet \n    { \n      get { return houseAndStreet; } \n      set { if (houseAndStreet != value) { houseAndStreet = value;  \n        NotifyPropertyChanged(); } } \n    } \n\n    public string Town \n    { \n      get { return town; } \n      set { if (town != value) { town = value; NotifyPropertyChanged(); } }        \n    } \n\n    public string City \n    { \n      get { return city; } \n      set { if (city != value) { city = value; NotifyPropertyChanged(); } }        \n    } \n\n    public string PostCode \n    { \n      get { return postCode; } \n      set { if (postCode != value) { postCode = value;  \n        NotifyPropertyChanged(); } } \n    } \n\n    public string Country \n    { \n      get { return country; } \n      set { if (country != value) { country = value;  \n        NotifyPropertyChanged(); } } \n    } \n\n    public override string ToString() \n    { \n      return $\"{HouseAndStreet}, {Town}, {City}, {PostCode}, {Country}\";\n    } \n  } \n} \n```", "```cs\n<Grid TextElement.FontSize=\"14\" Grid.IsSharedSizeScope=\"True\" Margin=\"10\"> \n  <Grid.Resources> \n    <Style TargetType=\"{x:Type TextBlock}\"> \n      <Setter Property=\"HorizontalAlignment\" Value=\"Right\" /> \n      <Setter Property=\"VerticalAlignment\" Value=\"Center\" /> \n      <Setter Property=\"Margin\" Value=\"0,0,5,5\" /> \n    </Style> \n    <Style TargetType=\"{x:Type TextBox}\"> \n      <Setter Property=\"VerticalAlignment\" Value=\"Center\" /> \n      <Setter Property=\"Margin\" Value=\"0,0,0,5\" /> \n    </Style> \n  </Grid.Resources> \n  <Grid.ColumnDefinitions> \n    <ColumnDefinition Width=\"Auto\" SharedSizeGroup=\"Label\" /> \n    <ColumnDefinition /> \n  </Grid.ColumnDefinitions> \n  <Grid.RowDefinitions> \n    <RowDefinition Height=\"Auto\" /> \n    <RowDefinition Height=\"Auto\" /> \n    <RowDefinition Height=\"Auto\" /> \n  </Grid.RowDefinitions> \n  <TextBlock Text=\"Name\" /> \n  <TextBox Grid.Column=\"1\" Text=\"{Binding User.Name}\" /> \n  <TextBlock Grid.Row=\"1\" Text=\"Age\" /> \n  <TextBox Grid.Row=\"1\" Grid.Column=\"1\" Text=\"{Binding User.Age}\" /> \n  <Controls:AddressControl Grid.Row=\"2\" Grid.ColumnSpan=\"2\"  \n    Address=\"{Binding User.Address}\" /> \n</Grid> \n```", "```cs\nusing System; \nusing System.Windows; \nusing System.Windows.Controls; \n\nnamespace CompanyName.ApplicationName.CustomControls \n{ \n  public class Meter : Control \n  { \n    static Meter() \n    { \n      DefaultStyleKeyProperty.OverrideMetadata(typeof(Meter),  \n        new FrameworkPropertyMetadata(typeof(Meter))); \n    } \n\n    public static readonly DependencyProperty ValueProperty =  \n      DependencyProperty.Register(nameof(Value),  \n      typeof(double), typeof(Meter), \n      new PropertyMetadata(0.0, OnValueChanged, CoerceValue)); \n\n    private static object CoerceValue(DependencyObject dependencyObject,\n      object value) \n    { \n      return Math.Min(Math.Max((double)value, 0.0), 1.0); \n    } \n\n    private static void OnValueChanged(DependencyObject dependencyObject,\n      DependencyPropertyChangedEventArgs e) \n    { \n      Meter meter = (Meter)dependencyObject; \n      meter.SetClipRect(meter); \n    } \n\n    public double Value \n    { \n      get { return (double)GetValue(ValueProperty); } \n      set { SetValue(ValueProperty, value); } \n    } \n\n    public static readonly DependencyPropertyKey clipRectPropertyKey =       \n      DependencyProperty.RegisterReadOnly(nameof(ClipRect), typeof(Rect),  \n      typeof(Meter), new PropertyMetadata(new Rect())); \n\n    public static readonly DependencyProperty ClipRectProperty =  \n      clipRectPropertyKey.DependencyProperty; \n\n    public Rect ClipRect \n    { \n      get { return (Rect)GetValue(ClipRectProperty); } \n      private set { SetValue(clipRectPropertyKey, value); } \n    } \n\n    public override void OnApplyTemplate() \n    { \n      SetClipRect(this); \n    } \n\n    private void SetClipRect(Meter meter) \n    { \n      double barSize = meter.Value * meter.Height; \n      meter.ClipRect =  \n        new Rect(0, meter.Height - barSize, meter.Width, barSize); \n    } \n  } \n} \n```", "```cs\nRectangle rectangle = Template.FindName(\"PART_Rectangle\", this) as Rectangle; \nif (rectangle != null) \n{ \n  // Do something with rectangle \n} \n```", "```cs\n[TemplatePart(Name = \"PART_Rectangle\", Type = typeof(Rectangle))] \npublic class Meter : Control \n{ \n  ... \n} \n```", "```cs\n<ResourceDictionary  \n\n  xmlns:CustomControls=\n    \"clr-namespace:CompanyName.ApplicationName.CustomControls\"> \n  <Style TargetType=\"{x:Type CustomControls:Meter}\"> \n    <Setter Property=\"Template\"> \n      <Setter.Value> \n        <ControlTemplate TargetType=\"{x:Type  \n          CustomControls:Meter}\"> \n          <ControlTemplate.Resources> \n            <LinearGradientBrush x:Key=\"ScaleColors\"  \n              StartPoint=\"0,1\" EndPoint=\"0,0\"> \n              <GradientStop Color=\"LightGreen\" /> \n              <GradientStop Color=\"Yellow\" Offset=\"0.5\" /> \n              <GradientStop Color=\"Orange\" Offset=\"0.75\" />  \n              <GradientStop Color=\"Red\" Offset=\"1.0\" /> \n            </LinearGradientBrush> \n          </ControlTemplate.Resources> \n          <Border Background=\"{TemplateBinding Background}\" \n            BorderBrush=\"{TemplateBinding BorderBrush}\"  \n            BorderThickness=\"{TemplateBinding BorderThickness}\"\n            SnapsToDevicePixels=\"True\"> \n            <Border.ToolTip> \n              <TextBlock Text=\"{Binding Value, StringFormat={}{0:P0}}\" /> \n            </Border.ToolTip> \n            <Rectangle Fill=\"{StaticResource ScaleColors}\"  \n              HorizontalAlignment=\"Stretch\" VerticalAlignment=\"Stretch\"  \n              SnapsToDevicePixels=\"True\" Name=\"PART_Rectangle\"> \n              <Rectangle.Clip> \n                <RectangleGeometry Rect=\"{Binding ClipRect, \n                  RelativeSource={RelativeSource  \n                  AncestorType={x:Type CustomControls:Meter}}}\" /> \n              </Rectangle.Clip> \n            </Rectangle> \n          </Border> \n        </ControlTemplate> \n      </Setter.Value> \n    </Setter> \n  </Style> \n</ResourceDictionary> \n```", "```cs\nxmlns:CustomControls=\"clr-namespace:CompanyName.ApplicationName.  \n  CustomControls;assembly=CompanyName.ApplicationName.CustomControls\"\n```", "```cs\n<StackPanel Orientation=\"Horizontal\" HorizontalAlignment=\"Center\"> \n  <StackPanel.Resources> \n    <Style TargetType=\"{x:Type CustomControls:Meter}\"> \n      <Setter Property=\"Background\" Value=\"Black\" /> \n      <Setter Property=\"BorderBrush\" Value=\"Black\" /> \n      <Setter Property=\"BorderThickness\" Value=\"2\" /> \n      <Setter Property=\"HorizontalAlignment\" Value=\"Center\" /> \n      <Setter Property=\"Width\" Value=\"20\" /> \n      <Setter Property=\"Height\" Value=\"100\" /> \n    </Style> \n  </StackPanel.Resources> \n  <CustomControls:Meter Value=\"{Binding CpuActivity}\" /> \n  <CustomControls:Meter Value=\"{Binding DiskActivity}\" Margin=\"10,0\" /> \n  <CustomControls:Meter Value=\"{Binding NetworkActivity}\" /> \n</StackPanel> \n```"]