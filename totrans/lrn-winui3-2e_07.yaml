- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Fluent Design System for Windows Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Fluent Design System** is a set of application design principles created
    by Microsoft and implemented across multiple desktop, mobile, and web platforms.
    The Fluent Design System for Windows is a set of controls, patterns, and styles
    for applications built for Windows. In fact, it is the implicit styling for all
    WinUI controls.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to learn the tenets of Fluent Design and how to implement them
    in your WinUI applications. We will also explore the **Fluent XAML Theme Editor**
    application for Windows. This application assists developers in creating a theme
    for their applications, including color schemes and style elements such as borders
    and corners. Developers can then easily import the resources to implement the
    theme.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Learning the concepts of Fluent Design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to find the latest information about Fluent Design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Incorporating Fluent Design concepts into WinUI applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Fluent XAML Theme Editor to customize and use a UI theme
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the **Acrylic** material and the Fluent Design System
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the **Mica** material in WinUI applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will understand the Fluent Design System for
    Windows applications. You will also know how to incorporate these design standards
    into your WinUI applications.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To follow along with the examples in this chapter, the following software is
    required:'
  prefs: []
  type: TYPE_NORMAL
- en: Windows 10 version 1803 (version 17134) or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Studio 2022 or later with the .NET Desktop Development workload installed
    and configured for Windows App SDK development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The source code for this chapter is available on GitHub at this URL: [https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/master/Chapter07](https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/master/Chapter07).'
  prefs: []
  type: TYPE_NORMAL
- en: What is the Fluent Design System?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Fluent Design System is a cross-platform system that helps developers create
    beautiful, intuitive applications. The website for Fluent Design ([https://fluent1.microsoft.design/](https://fluent1.microsoft.design/))
    has dedicated pages with resources for developers on many platforms:'
  prefs: []
  type: TYPE_NORMAL
- en: Android
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: macOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cross-platform (React Native)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft has started releasing their Fluent 2 design guidance at [https://fluent2.microsoft.design/](https://fluent2.microsoft.design/).
    You can think of Fluent 1 styles as Windows 10 style, whereas Fluent 2 style is
    similar to the look and feel of Windows 11\. At the time of this writing, the
    Fluent 2 guidance has only been published for React web applications. Other platforms
    are not yet available.
  prefs: []
  type: TYPE_NORMAL
- en: 'Fluent Design aims to be simple and intuitive. While it maintains its design
    philosophy across platforms, it also adapts aspects of its design to feel native
    on every platform. In [*Chapter 1*](B20908_01.xhtml#_idTextAnchor015)*, Introduction
    to WinUI*, we discussed the origins of some of the current Fluent Design concepts
    in the **Metro** design that was introduced with Windows Phone. While the look
    and feel of Microsoft’s designs have evolved over the years, some of the principles
    remain. The three core principles of the Fluent Design System are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Natural on every device**: Software should adapt to the device where it’s
    running, whether it’s a PC, tablet, game console, phone, or AR/VR device'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Intuitive and powerful**: The UI anticipates users’ actions and pulls them
    into the experience while using the app'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Engaging and immersive**: The design pulls from real-world elements, using
    light, shadow, texture, and depth to create an immersive experience for the user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The driving philosophy behind the design is to adapt and feel natural. The device
    and the app should feel comfortable and anticipate the user’s actions.
  prefs: []
  type: TYPE_NORMAL
- en: This is a very abstract and high-level explanation so far. Let’s explore the
    specifics of Fluent Design for Windows in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring Fluent Design for Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For Windows applications, Fluent Design covers several areas. When compared
    to other design systems, Fluent is more all-encompassing. Apple’s **Human Interface
    Guidelines** ([https://developer.apple.com/design/human-interface-guidelines/](https://developer.apple.com/design/human-interface-guidelines/))
    have only been widely adopted on Apple’s platforms: iOS, iPadOS, and macOS. Google’s
    **Material Design** ([https://material.io/](https://material.io/)) system has
    seen broader adoption but only has toolkits available for Android, Flutter, and
    the web.'
  prefs: []
  type: TYPE_NORMAL
- en: Fluent Design is most often compared with Material Design as they share some
    concepts when it comes to shapes and texture, but Fluent Design uses transparency
    to much greater effect than Material Design. Fluent Design provides a rich toolset
    that you can use in WinUI and nearly any other development platform.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s explore some of these design aspects and how they apply to your WinUI
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: Controls
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A control equates to a single element of *user input* or *interaction*. We
    have already explored many of the controls available in WinUI in [*Chapter 5*](B20908_05.xhtml#_idTextAnchor114)*,
    Exploring WinUI Controls*. This is what some of the common WinUI controls look
    like in light and dark modes in Windows 11:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.1 – Some common controls in light and dark modes](img/B20908_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.1 – Some common controls in light and dark modes
  prefs: []
  type: TYPE_NORMAL
- en: By default, the WinUI controls make use of Fluent styles. We will see how to
    override the default Fluent styles in our WinUI controls later in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Patterns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Patterns are groups of related controls or a group of controls that becomes
    a single new element. This group could be added to a composite control for re-use.
    Some examples of patterns in WinUI include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Search**: In its simplest form, a search pattern needs to have controls for
    accepting input, invoking the search, and displaying the search results. An additional
    element may be added for suggesting searches before any input is received. Assistants
    such as *Amazon Alexa* do this based on a user’s calendar, contacts, news preferences,
    and so on. Adding an autosuggest list based on user input is a common feature
    of modern search controls. You could also integrate chat controls with **artificial
    intelligence** (**AI**) such as Microsoft’s **Bot Framework** or OpenAI’s **ChatGPT**
    to ask some follow-up questions based on the initial search parameters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Forms**: Forms are a very common control pattern. They consist of groups
    of related labels, input controls, and command buttons that collect a related
    set of data elements. Some common forms with potential for re-use are user account
    creation forms and forms for collecting user feedback. Forms should follow the
    Fluent Design guidelines for spacing, flexible layout, and using typography for
    creating a hierarchy (Microsoft Learn example: [https://learn.microsoft.com/windows/apps/design/controls/forms](https://learn.microsoft.com/windows/apps/design/controls/forms)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ListView` control and a `SplitView` control to separate the list from the
    selected item’s details. Depending on the width of the page, the two views can
    either be stacked vertically or displayed side by side (Microsoft Learn example:
    [https://learn.microsoft.com/windows/apps/design/controls/list-details](https://learn.microsoft.com/windows/apps/design/controls/list-details)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of these patterns encapsulates the elements of Fluent Design to create
    a composite control that can be reused across applications. You may have control
    patterns in your projects that could be added to a shared control library for
    ease of reuse. Shared libraries such as these can save time and ensure that good
    design practices are followed across teams.
  prefs: []
  type: TYPE_NORMAL
- en: Layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The layout is important to ensure that an application adapts to any screen size
    or orientation. Flexibility is a key tenet of a well-designed layout. When a window
    or page is resized, the contents can adapt by repositioning controls, adding/removing
    items, changing the flow of items, replacing controls with others that better
    fit the current available space, or simply resizing items. This is typically handled
    in XAML with `VisualState` for each size threshold to which your page must adapt,
    possibly defined as `VisualState` updates control properties to adapt to the new
    layout. Microsoft Learn has a great example of this at [https://learn.microsoft.com/windows/apps/design/layout/layouts-with-xaml](https://learn.microsoft.com/windows/apps/design/layout/layouts-with-xaml).
    WinUI includes several different layout panels that can help developers create
    the right layout for their pages and respond to changes in size, orientation,
    and resolution.
  prefs: []
  type: TYPE_NORMAL
- en: Input
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are Fluent Design recommendations for responding to user input. There
    are guidelines for reacting to the traditional mouse and keyboard input that developers
    have been handling for decades. Modern applications can do things such as pan,
    zoom, rotate, or scroll based on mouse input. A keyboard may be a physical keyboard
    or an onscreen keyboard for mobile and touch users.
  prefs: []
  type: TYPE_NORMAL
- en: 'Input can come in other forms with today’s hardware:'
  prefs: []
  type: TYPE_NORMAL
- en: Pen/stylus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Touch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Touchpad
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gamepad/controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remote control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Surface Dial (see [https://learn.microsoft.com/windows/apps/design/input/windows-wheel-interactions](https://learn.microsoft.com/windows/apps/design/input/windows-wheel-interactions))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AR/VR gestures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Voice
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'User input can also be simulated with the input injection APIs. An example
    of where this might be useful is creating a **Show Me How** or **Guided Tour**
    feature in your app. Your code can execute some pre-defined steps, guiding the
    user through performing some action on the page. This API is beyond the scope
    of this book. To read about an example of using input injection to intercept mouse
    input and turn it into touch input, read this article on Microsoft Learn: [https://learn.microsoft.com/windows/apps/design/input/input-injection](https://learn.microsoft.com/windows/apps/design/input/input-injection).'
  prefs: []
  type: TYPE_NORMAL
- en: Style
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Style encompasses multiple aspects of Fluent Design:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Icons**: Good icons should be simple and convey the application’s purpose.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Color**: The color choice is important. Allowing users to customize their
    colors is also a great way to make your app feel personal to them. WinUI makes
    it easy to adapt the user’s light or dark theme choice and the Windows highlight
    color by using theme brushes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Typography**: Microsoft recommends that Windows applications all use the
    Segoe UI font. Selecting the font size can help convey a hierarchy within the
    app, such as a book or document layout. To this end, Microsoft has defined a **type
    ramp** (available at [https://learn.microsoft.com/windows/apps/design/style/typography#type-ramp](https://learn.microsoft.com/windows/apps/design/style/typography#type-ramp)).
    A type ramp defines the increase in font size for different styled elements on
    the screen, such as *Body*, *Title*, and *Subtitle*. There are static resources
    that can be leveraged in WinUI to select the right size for a control’s intended
    use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Spacing**: Spacing between and within controls is important for readability
    and usability. WinUI controls allow a Standard or Compact density to be selected.
    More information about sizing and Fluent densities can be found here: [https://learn.microsoft.com/windows/apps/design/style/spacing](https://learn.microsoft.com/windows/apps/design/style/spacing).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reveal focus**: Drawing attention to focusable elements is important for
    larger displays, such as an Xbox or Surface Hub. This is achieved through lighting
    effects with Fluent.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Acrylic**: This is a type of WinUI brush that creates texture with transparency.
    This texture gives a feeling of depth to the user interface. We will discuss Acrylic
    in more detail later in this chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mica**: This is a dynamic material like Acrylic, but unlike Acrylic it is
    opaque, not transparent. It creates the background of the app by incorporating
    elements of the current OS theme and desktop wallpaper. We will see how to incorporate
    Mica into your own WinUI applications later in the chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Corner radius**: Fluent Design promotes the idea that rounded corners promote
    positive feelings in users. WinUI controls have a rounded corner radius consistent
    with Fluent Design recommendations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sound**: Sound can be an integral part of crafting an immersive experience
    in your apps. A subtle whooshing sound when panels slide open or closed and using
    just the right tone and volume in the sound of an alert can immerse the app’s
    users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Writing style**: Believe it or not, writing style is part of app design.
    Line-of-business applications should not have the same writing style as a casual
    consumer app or a puzzle game. Users will be pulled into the app experience if
    they don’t notice the writing style at all because it fits what they expect for
    the application type.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These are just some of the aspects of style defined by Fluent Design. You can
    read more about them on Microsoft Learn: [https://learn.microsoft.com/windows/apps/design/style/](https://learn.microsoft.com/windows/apps/design/style/).'
  prefs: []
  type: TYPE_NORMAL
- en: Many of the aspects of Fluent style are made available to our WinUI apps via
    XAML styles and other static resources. Next, we will look at how we can update
    our sample application to respond to changes in a user’s Windows theme.
  prefs: []
  type: TYPE_NORMAL
- en: Incorporating Fluent Design in WinUI applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is time to incorporate a few of the Fluent Design principles into the **My
    Media Collection** application and polish the UI a little. Most of the WinUI controls
    are already designed to meet Fluent standards, but there were a few properties
    we modified without understanding Fluent Design.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the title bar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we even get into the XAML to improve the styles, let’s fix the application’s
    title bar. Until now, the title bar always read **MyMediaCollection** without
    any spaces or indication of the current page:'
  prefs: []
  type: TYPE_NORMAL
- en: First, to fix the spacing when the app is packaged and distributed, open `Package.appmanifest`
    from the `My Media Collection`. If you like, you can also change **Description**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.2 – Updating information in Package.appmanifest](img/B20908_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.2 – Updating information in Package.appmanifest
  prefs: []
  type: TYPE_NORMAL
- en: Updating `AppWindow` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'To update the text in the app’s title bar, add the following code to `MainWindow.xaml.cs`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, add an `internal` method named `SetPageTitle` so each page can append
    its title to the main window title:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In order for each page to access `MainWindow`, expose an internal member in
    `App.xaml.cs`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, in `MainPage.xaml.cs`, add an event handler for the `Loaded` event of
    the page. In the event handler, add some code to append to the `Title` of the
    current window with the page title of `Home`. When we launch the application,
    the title bar should read **My Media Collection -** **Home**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally, make the same changes in `ItemDetailsView.xaml.cs`, but set the page
    title to `Item Details`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, when you run the application, you should see the title bar text update
    as you navigate between the list of items and the item details. Let’s make some
    changes to the styles of `MainPage` next.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the style of MainPage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Currently, the main page of our application doesn’t have many styles. We set
    the `FontWeight` of a few `TextBlock` controls to `Bold` to set them apart as
    important items, but this doesn’t follow the Fluent Design guidelines for typography.
    There is also a purple border separating the `ListView` header from its items:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.3 – The current main page of My Media Collection](img/B20908_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.3 – The current main page of My Media Collection
  prefs: []
  type: TYPE_NORMAL
- en: 'Hard-coding colors is not a good practice. Even if you were using custom colors
    as product branding, you could centralize them in `Application.Resources`. Let’s
    work our way through the `MainPage.xaml` file and make some improvements:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, update the text of the first `TextBlock` from `Media Collection` to
    `Home`, matching the text in the window’s title bar. Wrap it in a horizontally
    aligned `StackPanel` and add a preceding `SymbolIcon` control to display a `Style`
    attribute to import the `SubheaderTextBlockStyle StaticResource`. Those changes
    should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We should also remove the `FontWeight` attribute from the **Media Type** label
    and use a Fluent style resource:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, change the surrounding `Grid` to a `StackPanel` and remove the `Grid.Column``     Definition` definitions. In addition to simplifying the layout, this will allow
    the **Home** symbol and text to appear above the rest of the controls on the page,
    reinforcing the hierarchy. The full block of code will look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <ListView.HeaderTemplate>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <DataTemplate>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <Grid Margin="4,0,4,0">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <Grid.ColumnDefinitions>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <ColumnDefinition Width="120"/>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <ColumnDefinition Width="*"/>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </Grid.ColumnDefinitions>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <Border BorderBrush="{ThemeResource SystemAccentColor}"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: BorderThickness="0,0,0,1">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <TextBlock Text="Medium"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Margin="4,0,0,0"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Style="{StaticResource TitleTextBlockStyle}"/>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </Border>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <Border Grid.Column="1"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: BorderBrush="{ThemeResource SystemAccentColor}"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: BorderThickness="0,0,0,1">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <TextBlock Text="Title"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Margin="4,0,0,0"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Style="{StaticResource TitleTextBlockStyle}"/>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </Border>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </Grid>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </DataTemplate>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </ListView.HeaderTemplate>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, let’s define the end of the list area by adding a border between the
    bottom of `ListView` and the command buttons. Do this by wrapping the buttons’
    `StackPanel` with a `Border` control, again using `SystemAccentColor`. `Margin=
    "4,0"` is shorthand that is equivalent to `Margin= "4,0,4,0"`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the application and check out the restyled user interface. It looks much
    better. You can now easily see the hierarchy of data, however limited it may be
    in our simple application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.4 – The newly styled My Media Collection home page](img/B20908_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.4 – The newly styled My Media Collection home page
  prefs: []
  type: TYPE_NORMAL
- en: 'Before moving on to the details page, let’s see how the page looks if we select
    the dark mode in Windows. Open **Windows Settings**, go to **Personalization |
    Colors**, and select **Dark** from the **Choose your color** dropdown (if you
    normally use **Dark**, try changing it to **Light**):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.5 – My Media Collection running in dark mode](img/B20908_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.5 – My Media Collection running in dark mode
  prefs: []
  type: TYPE_NORMAL
- en: 'Everything on the page switches to dark mode without any code changes except
    for the title bar. To learn more about title bar customization, including changing
    colors or the icon, or even completely replacing it with a custom title bar, see
    this topic on Microsoft Learn: [https://learn.microsoft.com/windows/apps/develop/title-bar](https://learn.microsoft.com/windows/apps/develop/title-bar).'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have a good reason to keep your application in light or dark mode, you
    can update `Application.xaml` to add a single attribute to the `Application` element
    using this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This will apply the `Dark` theme to the entire application. If you have a reason
    to only force this theme on part of the application, the `RequestedTheme` attribute
    can be applied to an individual `Page` or `Control`. Now, let’s apply the same
    types of styles to the details page.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the style of ItemDetailsPage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We want to update `ItemDetailsPage.xaml` to provide it with the same overall
    look and feel as the main page:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the file and start by updating `Item Details`. Give it the same `Subheader``     TextBlockStyle` that was used on `Home` and wrap it in a horizontally aligned
    `Stack``     Panel`. Precede `TextBlock` with a `SymbolIcon`, which uses the `Edit` symbol:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, modify the `Grid` that follows the new `StackPanel` to have top and bottom
    borders. Also, modify the `Margin` to have 4 px on either side of `Grid`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'That’s all we need to change on this page. Run the application again and navigate
    to the details page to see how it looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.6 – The restyled Item Details page](img/B20908_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.6 – The restyled Item Details page
  prefs: []
  type: TYPE_NORMAL
- en: This looks great. Now the styles of the two pages match, and the added border
    lines match the color of the highlighted active input field.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now shift gears and review a tool that can help designers and developers
    when implementing Fluent Design.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Fluent XAML Theme Editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ve seen how easy it is to adopt the default color and theme resources from
    the user’s Windows settings, but what if you or your company wants to create a
    custom theme for an application? Maybe that theme needs to be shared across a
    suite of applications. You could create a XAML file with `ResourceDictionary`
    in Visual Studio and code all the markup by hand for a new style. Visual Studio’s
    **IntelliSense** will help in some regards. However, there is an easier way.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft has created an open source tool called the `ResourceDictionary` XAML
    file that you can drop into your projects.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The Fluent XAML Theme Editor was created to adjust the styles for UWP controls,
    but these same styles will also work with WinUI 3 controls.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the application, open the `fluent xaml` in the search field, and
    you will find **Fluent XAML Theme Editor** in the search results. Click it in
    the search results to view the product page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.7 – The Fluent XAML Theme Editor page in the Microsoft Store](img/B20908_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.7 – The Fluent XAML Theme Editor page in the Microsoft Store
  prefs: []
  type: TYPE_NORMAL
- en: If you have already installed the app, there will be a **Launch** button. If
    it is not installed, you can click the **Install** button. When it completes its
    installation, you will find the app in your **Start** menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you first launch the app, it will launch with the default styles for a
    UWP app, displayed in both light and dark themes. On the right-hand panel, you
    will find controls for changing the colors and shapes of UI elements. **Typography**
    is listed as **Coming Soon**, but it’s been promising this for many years:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.8 – The Fluent XAML Theme Editor for Windows](img/B20908_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.8 – The Fluent XAML Theme Editor for Windows
  prefs: []
  type: TYPE_NORMAL
- en: Colors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On the **Colors** tab, you can select one of the default profiles from the **Color
    Presets** dropdown. In addition to the default preset, there are **Lavender**,
    **Forest**, and **Nighttime** options. There are also options to load additional
    presets or to save your current color settings as a new preset. These color presets
    are saved in JSON format.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Any colors you specify here will override the Windows system accent color that
    would otherwise be picked up by WinUI applications by default. Unless your application
    has a good reason to follow another theme, it’s best to let WinUI use the user’s
    chosen accent colors. Designing a custom theme should be undertaken by an experienced
    design team.
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking on any of the colors in the current preset will launch a color picker
    window, where you can adjust the current color:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.9 – Adjusting a preset color with a color picker](img/B20908_07_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.9 – Adjusting a preset color with a color picker
  prefs: []
  type: TYPE_NORMAL
- en: The **Region**, **Base**, and **Primary** colors can each be adjusted independently
    to change their light and dark theme appearance.
  prefs: []
  type: TYPE_NORMAL
- en: Shapes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Shapes** panel provides controls to adjust the **Corner Radius** of the
    **Controls** and the **Overlay**. This is also where you can adjust the default
    **Border Thickness** for the theme.
  prefs: []
  type: TYPE_NORMAL
- en: 'Shape presets, like colors, can also be saved and loaded. The app comes with
    two presets: **Default** and **No Rounding, Thicker Borders**. The difference
    is subtle but noticeable:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.10 – Shapes with No Rounding and Thicker Borders applied](img/B20908_07_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.10 – Shapes with No Rounding and Thicker Borders applied
  prefs: []
  type: TYPE_NORMAL
- en: 'When you are done adjusting the color and shape settings, use the `ResourceDictionary`
    with your theme data. You can copy the XAML and paste it into a `Resources` section
    in your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.11 – Exporting a theme from the Fluent XAML Theme Editor](img/B20908_07_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.11 – Exporting a theme from the Fluent XAML Theme Editor
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s explore the Acrylic material, which is part of the Fluent Design
    System that we touched on earlier in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Acrylic material and the Fluent Design System
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Acrylic is a WinUI brush that, when applied in your apps, provides a translucent
    texture. The texture works in both light and dark themes in Windows, and it is
    a great way to give users the feeling of depth when using your applications. The
    `AcrylicBrush` class is part of the `Microsoft.UI.Xaml.Media` namespace in the
    Windows App SDK, where `Brush`, `SolidColorBrush`, and `GradientBrush` are also
    found.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The Acrylic material is also available to UWP applications that use WinUI 2.8.x.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to explore the `AcrylicBrush` before deciding to use it in your
    own projects, you can try it in the WinUI 3 Gallery app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.12 – Exploring AcrylicBrush in the WinUI 3 Gallery](img/B20908_07_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.12 – Exploring AcrylicBrush in the WinUI 3 Gallery
  prefs: []
  type: TYPE_NORMAL
- en: On the gallery page, you can see the default styles of `AcrylicBrush` and how
    they’ll appear in the Windows light and dark themes. Additionally, the gallery
    page provides controls to adjust the opacity and tint of the brush. You can also
    set a fallback solid color for the brush. The fallback color is used on systems
    without the resources to load an acrylic brush.
  prefs: []
  type: TYPE_NORMAL
- en: 'Depending on which brush is applied, the element will paint the acrylic brush
    based on background elements or in-app elements behind the current, overlapping
    element. The WinUI 3 Gallery has examples of how to apply either type of brush.
    This is an example of the in-app brush:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This example shows how to apply a background acrylic brush:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: When incorporated into your WinUI application, an acrylic brush gives users
    the feeling of texture and depth, which are two of the fundamental principles
    of Fluent Design. Another material you can choose to incorporate is Mica.
  prefs: []
  type: TYPE_NORMAL
- en: Use Mica in WinUI applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Mica** is another material that’s available to WinUI applications. You can
    think of Mica as an Acrylic background brush without the transparency. It creates
    the brush style based on the current desktop background color in Windows. There
    are two variants of the Mica material: **Mica** and **Mica Alt**. Mica Alt creates
    the same kind of opaque background as Mica, but it has stronger tinting.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Mica is only available in Windows 11 and later. If your app uses Mica and is
    installed on Windows 10, it will not apply the material.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you use the WinUI 3 Gallery and open the System Backdrops (Mica/Acrylic)
    page, you can launch a WinUI window and cycle through the Mica, Mica Alt, and
    Acrylic materials applied to the window background:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.13 – Viewing the same window with Mica, Mica Alt, and Acrylic](img/B20908_07_013.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.13 – Viewing the same window with Mica, Mica Alt, and Acrylic
  prefs: []
  type: TYPE_NORMAL
- en: The code to set the system backdrop for a window is more involved than just
    applying a brush to the `Fill` property of a `Rectangle` or another UI element.
    Let’s try configuring Mica Alt in the My Media Collection app.
  prefs: []
  type: TYPE_NORMAL
- en: Incorporate Mica into My Media Collection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Bringing Mica into your own apps is easy with Windows App SDK 1.3 or later.
    Let’s use the Mica Alt material in My Media Collection. It only takes a few steps:'
  prefs: []
  type: TYPE_NORMAL
- en: First, check that your project is using Windows App SDK 1.3 or later. If it’s
    not, you can use the **NuGet Package Manager** to upgrade it to the latest available
    version.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, open `MainPage.xaml` and `ItemDetailsPage.xaml` and remove the `Background`
    property for each `Page` element. If the `Page` elements (or any of their children)
    aren’t transparent, you won’t see the Mica backdrop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, open `MainWindow.xaml.cs` and add the following code to the constructor
    immediately after the call to `InitializeComponent`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'That’s it. Now run the app and see how the background looks with Mica. The
    color in the app will vary depending on your current Windows background:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.14 – Styling My Media Collection with Mica](img/B20908_07_014.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.14 – Styling My Media Collection with Mica
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that the title bar does not pick up the Mica material, just as it ignores
    theme changes. If you would like to do this on your own, you can follow the Microsoft
    Learn instructions for extending your window contents into the title bar area:
    [https://learn.microsoft.com/windows/apps/develop/title-bar?tabs=wasdk#full-customization](https://learn.microsoft.com/windows/apps/develop/title-bar?tabs=wasdk#full-customization).
    For this approach, you will need to create your own title bar control with any
    buttons and icons and update the title bar text there during page navigation.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will take a quick look at some additional Fluent Design tools geared
    toward designers.
  prefs: []
  type: TYPE_NORMAL
- en: Design resources and toolkits for Fluent Design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While a deep dive into user interface design is beyond the scope of this book,
    we will briefly review some of the Fluent Design toolkits available for popular
    design tools. Design resources and examples for several of these tools can be
    downloaded from Microsoft Learn at [https://learn.microsoft.com/windows/apps/design/downloads/](https://learn.microsoft.com/windows/apps/design/downloads/):'
  prefs: []
  type: TYPE_NORMAL
- en: '**Figma**: This is a design and prototyping tool with free and paid options,
    depending on the team and project size. You can find out more about Figma on its
    website: [https://www.figma.com/](https://www.figma.com/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sketch**: This is another popular tool for designing and prototyping applications
    individually or with teams. There is no free plan, but Sketch does have a free
    trial period. Sketch is available at [https://www.sketch.com/](https://www.sketch.com/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Adobe XD**: XD is Adobe’s design/prototype tool. Like Figma, Adobe XD has
    free and paid options for designing apps with their tool. Check out XD at [https://helpx.adobe.com/support/xd.html](https://helpx.adobe.com/support/xd.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Adobe Illustrator**: This is a powerful vector design tool from Adobe. There
    is a free trial available. Download and get started with Adobe Illustrator at
    [https://www.adobe.com/products/illustrator.html](https://www.adobe.com/products/illustrator.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Inkscape** ([https://inkscape.org/](https://inkscape.org/)) is a free vector
    image editor that can also work with **Adobe Illustrator (****AI)** files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Adobe Photoshop**: This is probably one of the best-known raster image editors.
    Adobe also has a free trial for Photoshop at [https://www.adobe.com/products/photoshop.html](https://www.adobe.com/products/photoshop.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Fluent Design toolkit for Photoshop includes several PSD files. It is also
    possible to work with PSD files in free image editors such as **GIMP** ([https://www.gimp.org/](https://www.gimp.org/))
    or **Paint.NET** ([https://www.getpaint.net/](https://www.getpaint.net/)). Paint.NET
    requires an open source plugin, available at [https://www.psdplugin.com/](https://www.psdplugin.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have learned a lot about Fluent Design, design resources, and the tools available
    to WinUI developers in this chapter. You will be able to use these tools and techniques
    in your WinUI application design or recommend them to designers at your company.
    We also updated the My Media Collection app to be more compliant with Fluent Design
    recommendations and learned how to incorporate the Acrylic and Mica materials.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will examine how to add notifications to WinUI with
    the Windows App SDK notifications system.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which platforms have Fluent Design implementations?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is a control pattern?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which font does Microsoft recommend using for Fluent Design?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which aspect of style is specific to devices with large screens?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the names of the two spacing densities available in Fluent Design?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which attribute can be set in `Application.xaml` to override a user’s light/dark
    theme selection?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which design tools have Fluent Design toolkits available?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
