- en: '*Chapter 7*: Logging in .NET 6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Logging helps you to record your application's behavior for different data at
    runtime and you can control what you want to record and where you want to record
    it. Once the development of your feature is complete, you can unit test it thoroughly
    on a development PC, deploy it in a test environment for thorough integration
    testing, then deploy it in production, and finally, open it up for many users.
    The context in which your application is running (such as servers, data, and load)
    is different in test environments and production environments when you compare
    it with the development box, and you might face unexpected issues in the test
    and production environments in the initial days.
  prefs: []
  type: TYPE_NORMAL
- en: This is where logging plays a very important role in recording what happens
    during runtime when different components in the end-to-end flow perform their
    functions and interact with each other. With the log information available, we
    can debug production issues and build very useful insights. We will learn about
    logging best practices and the different logging providers available, such as
    Azure App Service logging and Application Insights logging, and will build a reusable
    logging library that can be used in different projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Characteristics of good logging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the available logging providers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with Azure App Service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Real-time telemetry in Application Insights
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a .NET 6 logging class library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of the chapter, you'll have a good idea about logging as well as
    some of the platform-level concepts from Azure App Service and Application Insights
    that can be applied when working on deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A basic understanding of Microsoft .NET and Azure is required.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code for the chapter can be found here: [https://github.com/PacktPublishing/Enterprise-Application-Development-with-C-10-and-.NET-6-Second-Edition/tree/main/Chapter07](https://github.com/PacktPublishing/Enterprise-Application-Development-with-C-10-and-.NET-6-Second-Edition/tree/main/Chapter07).'
  prefs: []
  type: TYPE_NORMAL
- en: Characteristics of good logging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Logging is implemented but the information in the logs is not useful for building
    insights or debugging production issues. How many times have you seen this issue?
  prefs: []
  type: TYPE_NORMAL
- en: 'That''s where best practices come into the picture, to implement good logging
    in your application. Some of the characteristics of good logging are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: It should not affect the actual application performance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It should be accurate and complete.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It should be leveraged for data analytics and learning about application usages,
    such as concurrent users, peak load time, and most/least used features.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It should help us reproduce the issue reported for root cause analysis and minimize
    *unable to reproduce* instances.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It should be distributed and easily accessible by everyone – development, product
    owner, and support.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It should not contain protected or sensitive information, **personally identifiable
    information** (**PII**), or duplicate or unnecessary logs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In addition to these, it should capture some of the following key information:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Correlation ID**: A unique identifier for an issue that can be used to search
    in the log store.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Log level**: Information, warning, and error, for example.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Timestamp**: Time of the log entry (always use one agreed standard format,
    such as UTC or server time, and don''t mix both).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Message**: Message to be logged. This could be an information or custom error
    message, an actual exception message, or a combination of a custom and actual
    error message.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Machine/server/instance name**: There could be multiple servers in the load
    balancer. This would help us with finding the server where the log occurred.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Assembly**: Name of the assembly where the log occurred.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'What do you want to record? This is where log-level guidance comes into the
    picture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table 7.1'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Table_7.1.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Table 7.1
  prefs: []
  type: TYPE_NORMAL
- en: 'The log level is configurable and based on the level specified; it will be
    enabled from that specified level to all higher levels. For example, if you specify
    the log level as **Information** in your configuration, all log messages from
    **Information**, **Warning**, **Error**, and **Fatal** will be logged, and **Debug**
    and **Trace** messages will not be logged, as shown in the following table. If
    no log level is specified, logging defaults to the **Information** level:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table 7.2'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Table_7.2.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Table 7.2
  prefs: []
  type: TYPE_NORMAL
- en: Where do you want to record? This is where logging providers come into the picture.
    Let's look at them in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the available logging providers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: .NET 6 supports multiple built-in logging providers as well as several third-party
    logging providers. APIs exposed by these providers help in writing log output
    to different sources, such as a file or event log supported by the providers.
    Your code can also enable multiple providers, which is a very common scenario
    when you are moving from one provider to another, where you can keep the old one,
    monitor the new one, and once you are good, you can retire the old provider. Let's
    discuss both types of providers in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Built-in logging providers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'All built-in logging providers are supported in the `Microsoft.Extensions.Logging`
    namespace. Let''s have a look at some of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table 7.3'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Table_7.3(a).jpg)![Table 7.3'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Table_7.3(b).jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Table 7.3
  prefs: []
  type: TYPE_NORMAL
- en: Third-party logging providers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While .NET 6 provides several powerful inbuilt logging providers, it also supports
    third-party logging providers. Let''s look at them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table 7.4'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Table_7.4.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Table 7.4
  prefs: []
  type: TYPE_NORMAL
- en: Having taken a brief look at the multiple built-in and third-party providers,
    let's take a deeper look at Azure App Service and Application Insights in the
    next section.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Azure App Service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In an **Infrastructure as a Service** (**IaaS**) hosting model, you have full
    control over the operating system and software installed on the machine. It is
    very similar to the on-premises deployments that many of us are used to. You can
    access the servers via remote desktop, go through IIS logs, Windows Event Viewer,
    or files. When you move to the **Platform as a Service** (**PaaS**) hosting model,
    Azure takes care of managing the instances completely. This helps in saving a
    considerable amount of time as your engineers don't have to spend time managing
    the servers to keep up to date with respect to the operating systems, infrastructure,
    and security updates.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will see how to do extensive logging and monitoring when
    you deploy your app in an Azure App Service plan (one of the important PaaS offerings
    from Microsoft).
  prefs: []
  type: TYPE_NORMAL
- en: Enabling application logging in Azure App Service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To enable application logging, you need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '`AzureAppServices` package in any of your existing .NET 6 projects using the
    `dotnet add <.csproj>  package <Nuget package> -v <Version number>` command, as
    shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.1 – Installing a package from the CLI'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.1_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.1 – Installing a package from the CLI
  prefs: []
  type: TYPE_NORMAL
- en: You can get more details about .NET CLI commands from [https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet](https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also right-click on `Microsoft.Extensions.Logging.AzureAppServices`
    package and install it as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.2 – Installing a package from the IDE'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.2_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.2 – Installing a package from the IDE
  prefs: []
  type: TYPE_NORMAL
- en: '`Program.cs` file of your .NET 6 app, add the following highlighted code in
    the `CreateHostBuilder` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`CreateHostBuilder` does the default configuration for the app we are developing.
    Let''s add a logging configuration here, which will also dynamically inject `_logger`
    (object creation happens using **dependency injection** (**DI**), as explained
    in [*Chapter 5*](B18507_05_Epub.xhtml#_idTextAnchor445), *Dependency Injection
    in .NET 6*).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Adding logging**: Add the following highlighted logging code to your methods
    in any of the controllers where core logic resides generally to test whether logging
    works:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`TestAppServiceForLoggingDemo`. For more information on how to publish, refer
    to [https://docs.microsoft.com/en-us/visualstudio/deployment/quickstart-deploy-to-azure?view=vs-2022](https://docs.microsoft.com/en-us/visualstudio/deployment/quickstart-deploy-to-azure?view=vs-2022).
    For this example, we have leveraged the Windows-based App Service plan.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Enabling logging**: Go to the Azure portal | **Your subscription** | **Resource
    Group** | **App service** where it is deployed, and select **App Service logs**
    under **Monitoring**. You can see different logging options, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.3 – App Service logs default state'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.3_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.3 – App Service logs default state
  prefs: []
  type: TYPE_NORMAL
- en: 'All logging options are turned off by default, as shown in the previous screenshot.
    Let''s see what those options are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Application Logging (Filesystem)**: Writes log messages from the application
    to the local filesystem on the web server. This will be enabled for 12 hours once
    you turn it on and will be disabled automatically after that. Therefore, this
    option is for temporary debugging purposes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Application Logging (Blob)**: Writes log messages from the application to
    Blob storage for persistent logs for a configured retention period. Logging in
    blobs is for long-term debugging purposes. You would need a Blob storage container
    to write logs to. You can read more about Blob storage containers here: [https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blobs-introduction](https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blobs-introduction).
    Once you select **On**, you will get an option to create a new storage account
    or search for an existing storage account where you can write the logs. Click
    on **+ Storage account** and specify a name to create a new account, as shown
    in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 7.4 – Storage account configuration'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.4_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.4 – Storage account configuration
  prefs: []
  type: TYPE_NORMAL
- en: '**Web server logging**: IIS logs on servers that give diagnostic information
    such as the HTTP method, resource URI, client IP, client port, user agent, and
    response code. You can store the logs in Blob storage or on the filesystem. In
    **Retention Period (Days)**, you can configure the number of days for which the
    logs should be retained.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`400` responses from the server, which can help you determine why the server
    returned this error.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For security reasons, we don't send detailed error pages to clients in production,
    but App Service can save this error in the filesystem each time an application
    error occurs that has HTTP code `400` or greater.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Failed request tracing**: Detailed information on failed requests, including
    IIS trace and so on. For each failed request, a folder is generated that contains
    the XML log file and the XSL stylesheet to view the log file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows how it will look when you turn it on and enable
    all the log options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.5 – App Service logs enabled'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.5_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.5 – App Service logs enabled
  prefs: []
  type: TYPE_NORMAL
- en: 'You can verify logs from any of the logging options we have enabled by browsing
    the site hosted on App Service and navigating to the page that hits the controller
    where logging is done. For example, let''s check **Application Logging (Blob)**
    by accessing the Blob storage where we configured one of the logging options,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.6 – App Service logs from Blob storage'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.6_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.6 – App Service logs from Blob storage
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also see the logs in the log stream in real-time from the controller
    where we added test logs by navigating to **Log stream** under **Monitoring**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.7 – App Service logs in Log stream'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.7_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.7 – App Service logs in Log stream
  prefs: []
  type: TYPE_NORMAL
- en: We saw how to enable different logs in Azure App Service and verified logs in
    **Application Logging (Blob)** and **Log stream**. In the next section, we will
    see how we can monitor and raise alerts.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring using metrics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can monitor your App Service plan and app services using metrics in Azure
    Monitor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to your App Service plan and check the overview, as shown in the following
    screenshot. You can see standard charts for CPU, memory, data in, data out, and
    so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.8 – App Service plan overview'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.8_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.8 – App Service plan overview
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, click on any of the charts, for example, the **CPU Percentage** chart.
    You will get the view shown in the following screenshot (the default duration
    is 1 hour):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.9 – App Service metrics overview'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.9_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.9 – App Service metrics overview
  prefs: []
  type: TYPE_NORMAL
- en: 'I have highlighted three important sections in the chart shown in the previous
    screenshot. Let''s discuss them:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Local Time**: When you click on **Local Time**, you will get options as shown
    in the following screenshot. You can change the value of the time range for which
    this chart should represent:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 7.10 – App Service metrics time range'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.10_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.10 – App Service metrics time range
  prefs: []
  type: TYPE_NORMAL
- en: '**Add metric**: When you click on **Add metric**, you will get the options
    shown in the following screenshot. You can select the metric you want the chart
    to display:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 7.11 – App Service – Add metric'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.11_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.11 – App Service – Add metric
  prefs: []
  type: TYPE_NORMAL
- en: '**Pin to dashboard**: You can click on **Pin to dashboard** and add the chart
    to the dashboard so that you can see updates when you log in to the Azure portal.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When you click on the left portal menu, you can see **Dashboard**, and you
    can click on that to see all the pinned dashboards:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.12 – Left portal menu option for Dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.12_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.12 – Left portal menu option for Dashboard
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, let's see how to enable real-time telemetry in Azure Application
    insights.
  prefs: []
  type: TYPE_NORMAL
- en: Real-time telemetry in Azure Application Insights
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Application Insights is one of the best telemetry offerings provided by Microsoft
    Azure for developers and DevOps professionals as an extensible **application performance
    management** (**APM**) service to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Monitor your applications live.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatically detect performance anomalies.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Include powerful analytics tools to help you diagnose issues.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understand what users do with your app.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Help you continuously improve performance and usability.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Microsoft.Extensions.Logging.ApplicationInsights` is included as a dependency
    of `Microsoft.ApplicationInsights.AspNetCore`. The `Microsoft.ApplicationInsights.AspNetCore`
    package is used in ASP.NET Core applications for telemetry, and when you use this,
    you don''t need to install `Microsoft.Extensions.Logging.ApplicationInsights`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in the following figure, you can install this package in your application
    to enable and write telemetry:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.13 – Application Insights instrumentation for telemetry'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.13_B18507.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.13 – Application Insights instrumentation for telemetry
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: There is no impact on your app performance. Calls to Application Insights are
    non-blocking and sent in separate threads in batches.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling application logging in Application Insights
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps to enable application logging when using Application Insights are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Microsoft.ApplicationInsights.AspNetCore` package from `Install-Package <Package
    name> -version <Version number>` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.14 - Installing packages from Package Manager Console'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.14_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.14 - Installing packages from Package Manager Console
  prefs: []
  type: TYPE_NORMAL
- en: '`appsettings.json` so that all telemetry data is written to your Azure Application
    Insights resource. If you don''t have an Azure Application Insights resource,
    go ahead and create one, and then add it to `appsettings.json`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`Program.cs` file, add the highlighted code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, you can build and run the application. Out of the box, you will get a lot
    of telemetry data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to **Application Insights** | **Overview** and you can see any failed
    requests, the server response time, and server requests, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.15 – Application Insights overview'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.15_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.15 – Application Insights overview
  prefs: []
  type: TYPE_NORMAL
- en: 'You can navigate to **Application Insights** | **Live Metrics** for real-time
    performance counters, as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.16 - Application Insights live metrics'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.16_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.16 - Application Insights live metrics
  prefs: []
  type: TYPE_NORMAL
- en: 'You can navigate to **Application Insights** | **Metrics** to get different
    metrics and charts, as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.17 – Application Insights metrics'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.17_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.17 – Application Insights metrics
  prefs: []
  type: TYPE_NORMAL
- en: 'You can navigate to **Application Insights** | **Performance** and analyze
    operation duration, dependency response time, and so on, as shown in the following
    figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.18 – Application Insights performance'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.18_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.18 – Application Insights performance
  prefs: []
  type: TYPE_NORMAL
- en: 'You can navigate to **Application Insights** | **Failures** and analyze operations,
    failed requests, failed dependencies, the top three response codes, exception
    types, and dependency failures, as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.19 – Application Insights failures'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.19_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.19 – Application Insights failures
  prefs: []
  type: TYPE_NORMAL
- en: 'We have seen the telemetry and alerts available out of the box. How do we add
    logs for information, errors, or warnings? You can use the logger (object creation
    happens using DI, which was covered in [*Chapter 5*](B18507_05_Epub.xhtml#_idTextAnchor445),
    *Dependency Injection in .NET 6*). DI is enabled by the second (*App settings
    configuration*) and third (*Enabling the Application Insights telemetry*) steps
    that we saw in the preceding set of steps to enable logging in Application Insights.
    For testing purposes, to see whether it''s working, you can add the following
    code to your controller and run the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You can navigate to **Application Insights** | **Logs** and check traces, where
    you can see both the warnings and errors that were logged, as shown in the following
    figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.20 – Application Insights logs'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.20_B18507.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.20 – Application Insights logs
  prefs: []
  type: TYPE_NORMAL
- en: Application Insights is very simple to use and a very powerful log provider.
    We saw the rich telemetry it provides out-of-the-box and added our own logs. In
    the next section, we will develop a custom logging class library. The default
    logger provided in .NET 6 is more than enough for your application telemetry.
    If you need custom metrics and events to be logged on top of what's provided by
    default in .NET 6, you can leverage the following custom logger library.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a .NET 6 logging class library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will create a class library (DLL) that will support Application Insights
    logging and can be extended to support logging to other sources if needed. Perform
    the following steps for this:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new .NET 6 class library with the name `Logger`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the `Microsoft.ApplicationInsights` package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new class called `ICustomLogger.cs` and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new class called `AiLogger.cs` and add the following code to log custom
    events and metrics:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Namespaces and Constructor**:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '**Code to log warning, error, and exception**:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '**Code to log custom event, metric, information, request, and dependency**:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '`AiLogger` uses the `TelemetryClient` class, which sends telemetry to Azure
    Application Insights.'
  prefs: []
  type: TYPE_NORMAL
- en: Build the library, and your custom .NET 6 logger is ready to consume events
    in your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the upcoming chapters, we will be consuming the logging library as part of
    our enterprise application development. In the example provided for this chapter,
    you can see how we have dynamically injected this custom logger into the `LoggerDemoService`
    project.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the characteristics of good logging, the different
    logging providers available, such as the Azure App Service logging provider and
    the Azure Application Insights logging provider, and how to create a reusable
    logger library.
  prefs: []
  type: TYPE_NORMAL
- en: You now have the necessary knowledge of logging that will help you to implement
    a reusable logger or extend a current logger in your project, with the right level
    of logging and key information to debug issues and build analytics on production
    data.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about various techniques to cache data in
    .NET 6 applications, as well as various caching components and the platforms available
    that can be integrated with a .NET application.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Which logs highlight when the current flow of execution has stopped due to
    a failure? These should indicate a failure in the current activity, not an application-wide
    failure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. Warning
  prefs: []
  type: TYPE_NORMAL
- en: b. Error
  prefs: []
  type: TYPE_NORMAL
- en: c. Critical
  prefs: []
  type: TYPE_NORMAL
- en: d. Information
  prefs: []
  type: TYPE_NORMAL
- en: '**Answer : b**'
  prefs: []
  type: TYPE_NORMAL
- en: What can be leveraged by applications and components running anywhere, on Azure,
    AWS, your own on-premises servers, or a mobile platform, for logging?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. Application Insights
  prefs: []
  type: TYPE_NORMAL
- en: b. Azure App Service
  prefs: []
  type: TYPE_NORMAL
- en: c. EventLog
  prefs: []
  type: TYPE_NORMAL
- en: d. Serilog
  prefs: []
  type: TYPE_NORMAL
- en: '**Answer: a**'
  prefs: []
  type: TYPE_NORMAL
- en: What are the logging options available in Azure App Service?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. **Application Logging (Filesystem)** and **Application Logging (Blob****)**
  prefs: []
  type: TYPE_NORMAL
- en: b. **Web server logging** and **Detailed error messages**
  prefs: []
  type: TYPE_NORMAL
- en: c. **Failed request tracing**
  prefs: []
  type: TYPE_NORMAL
- en: d. All the above
  prefs: []
  type: TYPE_NORMAL
- en: '**Answer: d**'
  prefs: []
  type: TYPE_NORMAL
- en: Application Insights is an extensible APM service to do which of the following?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. Monitor your live applications.
  prefs: []
  type: TYPE_NORMAL
- en: b. Automatically detect performance anomalies.
  prefs: []
  type: TYPE_NORMAL
- en: c. Include powerful analytics tools to help you diagnose issues.
  prefs: []
  type: TYPE_NORMAL
- en: d. All the above.
  prefs: []
  type: TYPE_NORMAL
- en: '**Answer: d**'
  prefs: []
  type: TYPE_NORMAL
