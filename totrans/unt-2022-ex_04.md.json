["```cs\nusing UnityEngine;\npublic class PlayerController : MonoBehaviour\n{\n    // Start is called before the first frame update\n    void Start()\n    {\n    }\n    // Update is called once per frame\n    void Update()\n    {\n    }\n}\n```", "```cs\n    // Update is called once per frame - process input\n    void Update()\n    {\n        var keyboard = Keyboard.current;\n        // Keyboard connected?\n        if (keyboard == null)\n            return;     // No - stop running code.\n        if (keyboard.spaceKey.IsPressed())\n        {\n            // Move while holding spacebar key down.\n            …\n```", "```cs\nusing UnityEngine;\nusing UnityEngine.InputSystem;\npublic class PlayerController : MonoBehaviour\n{\n    …\n```", "```cs\n        // Keyboard connected?\n        if (keyboard == null)\n            return;     // No - stop running code.\n        …\n```", "```cs\nspaceKey – and evaluating the value returned from the IsPressed() method to see whether it is true:\n```", "```cs\n        if (keyboard.spaceKey.IsPressed())\n        {\n            // Move while holding spacebar key down.\n            …\n```", "```cs\n        if (keyboard.spaceKey.IsPressed())\n        {\n            // Move while holding spacebar key down.\n        }\n        else if (keyboard.spaceKey.wasReleasedThisFrame)\n        {\n            // The spacebar key was released – stop moving.\n        }\n```", "```cs\npublic class PlayerController : MonoBehaviour\n{\n    private bool _shouldMoveForward;\n    …\n```", "```cs\n        if (keyboard.spaceKey.IsPressed())\n        {\n            // Move while holding spacebar key down.\n            _shouldMoveForward = true;\n        }\n        else if (keyboard.spaceKey.wasReleasedThisFrame)\n        {\n            // The spacebar key was released - stop moving.\n            _shouldMoveForward = false;\n        }\n```", "```cs\n    // FixedUpdate is called every physics fixed timestep\n    private void FixedUpdate()\n    {\n        if (_shouldMoveForward)\n        {\n            // Process physics movement.\n        }\n        else\n        {\n            // Stop movement.\n        }\n    }\n```", "```cs\n    private void FixedUpdate()\n    {\n        if (_shouldMoveForward)\n        {\n            // Process physics movement.\n            // Up is the direction the object sprite\n            // is currently facing.\n            Rb.velocity = transform.up * MoveSpeed;\n        }\n        else\n        {\n            // Stop movement.\n            Rb.velocity = Vector2.zero;\n        }\n    }\n```", "```cs\npublic class PlayerController : MonoBehaviour\n{\n    public Rigidbody2D Rb;\n    public float MoveSpeed = 10f;\n```", "```cs\n    private void LookAtMousePointer()\n    {\n        var mouse = Mouse.current;\n        if (mouse == null)\n            return;\n        var mousePos = Camera.main.ScreenToWorldPoint(\n            mouse.position.ReadValue());\n        var direction = (Vector2)mousePos - Rb.position;\n        var angle = Mathf.Atan2(\n            direction.y, direction.x) * Mathf.Rad2Deg\n               + SpriteRotationOffset;\n        // Direct rotation.\n        Rb.rotation = angle;\n    }\n```", "```cs\n    void Update()\n    {\n        …\n        LookAtMousePointer();\n    }\n```", "```cs\n        // Interpolated rotation – smoothed.\n        // Forward (Z-axis) is what we want to rotate on.\n        var q = Quaternion.AngleAxis(angle,\n            Vector3.forward);\n        Rb.transform.rotation = Quaternion.Slerp(\n            Rb.transform.rotation, q, Time.deltaTime\n               * LookAtSpeed);\n```", "```cs\npublic class PlayerController: MonoBehaviour\n{\n    public Rigidbody2D Rb;\n    public float MoveSpeed = 10f;\n    public float SpriteRotationOffset = -90f;\n    public float LookAtSpeed = 2f;\n    private bool _shouldMoveForward;\n    …\n```"]