- en: AR for Automation with Vuforia and AR Glasses
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Vuforia和增强现实眼镜进行自动化增强现实
- en: In this chapter, we will go deeper into Vuforia, the SDK we introduced previously
    in [Chapter 6](3ef942da-7d11-444e-b3e9-ddbf24bb2d09.xhtml), *AR for Retail with
    Vuforia*. You will learn how to use the framework along with AR glasses, more
    specifically, the Epson Moverio BT-350 model, and you will learn how to use the
    Vuforia image recognition features to create an app to guide operators, step by
    step, in industrial works, and how to modify a scene so that you can integrate
    it into your AR glasses.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将更深入地探讨Vuforia，这是我们之前在[第6章](3ef942da-7d11-444e-b3e9-ddbf24bb2d09.xhtml)中介绍过的SDK，即*使用Vuforia的零售增强现实*。您将学习如何使用该框架以及增强现实眼镜，更具体地说，是Epson
    Moverio BT-350型号，您还将学习如何使用Vuforia图像识别功能来创建一个应用，逐步引导操作员在工业工作中，以及如何修改场景以便将其集成到您的增强现实眼镜中。
- en: It's important to note that to complete this chapter, you will need to have
    the AR glasses to build upon them. Although we have structured the content so
    that you can follow most of the process using a mobile Android device, you will
    only be able to see the final result, the differences in the mobile device view,
    and the possibilities that the AR see-through devices offer if you can launch
    the project on the real glasses.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示：为了完成本章，您将需要拥有增强现实眼镜来在此基础上构建。尽管我们已经将内容结构化，以便您可以使用移动Android设备跟随大部分过程，但您只能在能够启动真实眼镜上的项目时，才能看到最终结果、移动设备视图中的差异以及增强现实透视设备提供的可能性。
- en: 'This chapter has three main goals: first of all, to acquire a fuller understanding
    of how Vuforia works so that you can extend and improve the current example beyond
    the scope of this book. The second goal is to understand the possibilities AR
    offers in the industrial field and, specifically, in automation. You will see
    that AR is not only a visually attractive technology but that it can guide operators
    in their work, reducing training time and possible errors during operations. The
    idea is to provide you with the necessary skills to reproduce and adapt the current
    project to your needs. The final goal is to introduce an AR headset, such as the
    Epson Moverio AR glasses, to explain how they work and to easily integrate Vuforia
    with them.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章有三个主要目标：首先，为了更全面地了解Vuforia的工作原理，以便您可以在本书的范围之外扩展和改进当前示例。第二个目标是了解增强现实在工业领域，特别是在自动化方面的可能性。您将看到，增强现实不仅是一种视觉上吸引人的技术，而且它还可以在工作过程中指导操作员，减少培训时间和操作过程中的可能错误。目标是为您提供必要的技能，以复制和调整当前项目以满足您的需求。最终目标是介绍一款增强现实头戴设备，例如爱普生Moverio
    AR眼镜，解释它们的工作原理，并轻松地将Vuforia与它们集成。
- en: 'Using AR glasses instead of tablets can be a valuable asset in the industrial
    field as it allows operators to have both hands free while they are working. The
    following image shows a pair of AR glasses:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在工业领域使用增强现实眼镜而不是平板电脑可以是一个有价值的资产，因为它允许操作员在工作的同时双手空闲。以下图片展示了一副增强现实眼镜：
- en: '![](img/16d3c4e6-e5ff-4ffb-9fe7-49d9b0fd310e.jpg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/16d3c4e6-e5ff-4ffb-9fe7-49d9b0fd310e.jpg)'
- en: The Epson Moverio BT-350 AR glasses
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 爱普生Moverio BT-350增强现实眼镜
- en: 'In this chapter, we will be covering the following topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Using AR in automation
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在自动化中使用增强现实
- en: Exploring Vuforia
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索Vuforia
- en: Developing image-based AR in Vuforia
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Vuforia中开发基于图像的增强现实
- en: Creating an industrial guide for AR glasses
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为增强现实眼镜创建工业指南
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The technical requirements for this chapter are as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的技术要求如下：
- en: A Unity 3D supporting computer (see the latest requirements here: [https://unity3d.com/es/unity/system-requirements](https://unity3d.com/es/unity/system-requirements)).
    This chapter's example project has been developed on a Windows 10 x64 computer.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持Unity 3D的计算机（请参阅最新要求[https://unity3d.com/es/unity/system-requirements](https://unity3d.com/es/unity/system-requirements)）。本章的示例项目是在Windows
    10 x64计算机上开发的。
- en: Unity 3D (2019.1.2f1 in this book).
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity 3D（本书中为2019.1.2f1）。
- en: Microsoft Visual Studio Community 2017 (included in the Unity installation).
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微软Visual Studio Community 2017（包含在Unity安装中）。
- en: The latest version of Vuforia included with Unity 3D (8.3.8 in this book).
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity 3D中包含的Vuforia最新版本（本书中为8.3.8）。
- en: Epson Moverio BT-350 AR glasses.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 爱普生Moverio BT-350增强现实眼镜。
- en: The resources and code files for this chapter can be found here: [https://github.com/PacktPublishing/Enterprise-Augmented-Reality-Projects/tree/master/Chapter07](https://github.com/PacktPublishing/Enterprise-Augmented-Reality-Projects/tree/master/Chapter07).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的资源和相关代码文件可以在以下位置找到：[https://github.com/PacktPublishing/Enterprise-Augmented-Reality-Projects/tree/master/Chapter07](https://github.com/PacktPublishing/Enterprise-Augmented-Reality-Projects/tree/master/Chapter07)。
- en: Other AR glasses (from Moverio and other companies) might work with this example.
    However, some points have to be taken into account, for example, their operating
    system must be Android 4.1 or above (required by Unity 3D v2019).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 其他增强现实眼镜（来自Moverio和其他公司）可能也会与这个例子兼容。然而，需要考虑一些因素，例如，它们的操作系统必须是Android 4.1或更高版本（由Unity
    3D v2019要求）。
- en: Let's get started with AR in automation.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从自动化中的增强现实开始吧。
- en: Using AR in automation
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在自动化中使用增强现实
- en: The arrival of the fourth industrial revolution, also called **industry 4.0**,
    has boosted the use of AR in industrial environments. Industry 4.0 revolves around
    digitalization and interconnectivity, and technologies such as **Augmented Reality**
    (**AR**), **Virtual Reality** (**VR**), the **Internet of Things** (**IoT**),
    **Big Data Analytics** (**BDA**), **Additive Manufacturing** (**AM**), **Cyber-Physical
    Systems** (**CPS**), and **Artificial Intelligence** (**AI**) have become the
    base of this industrial revolution.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 第四次工业革命的到来，也被称为**工业4.0**，极大地推动了增强现实（AR）在工业环境中的应用。工业4.0的核心是数字化和互联性，而诸如**增强现实**（**AR**）、**虚拟现实**（**VR**）、**物联网**（**IoT**）、**大数据分析**（**BDA**）、**增材制造**（**AM**）、**网络物理系统**（**CPS**）和**人工智能**（**AI**）等技术已成为这次工业革命的基础。
- en: AR is the natural interface and connection to IoT and big data. It allows workers
    to visualize and interact with the data coming from the and sensors of a factory
    in an easy and attractive way, either using mobile devices or AR headsets.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 增强现实是物联网和大数据的自然接口和连接。它允许工人以简单且吸引人的方式可视化并交互工厂来自传感器和设备的数据，无论是使用移动设备还是增强现实头盔。
- en: AR use in automation can go from the facial recognition of an employee to getting
    access to a concrete machine, to real-time on-site surveillance of the production
    process or remote access to and control of the system through AR glasses.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化中增强现实的应用可以从员工的面部识别到访问具体机器，再到通过增强现实眼镜进行现场生产过程的实时监控或远程访问和控制系统。
- en: Introducing the scenario and process
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍场景和流程
- en: For this project, we will be creating a step-by-step guide that can be used
    in production, maintenance, and training. Users performing a task will receive
    guidance on how to do it correctly, as well as have access to useful information
    such as blueprints drawings, or pdf documents.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，我们将创建一个可用于生产、维护和培训的逐步指南。执行任务的用户将获得如何正确执行任务的指导，以及访问如蓝图图纸或PDF文档等有用信息。
- en: For that, we will use a Volkswagen Beetle (car) as an example. We will work
    with three pictures as targets (side, back view with the trunk closed, and back
    view with the trunk open) to simulate an operator that starts from the side of
    the car and then moves to check the state of the car engine, all while receiving
    information from the AR glasses. In a real environment, these pictures would correspond
    with the real car (or industrial equipment).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这一点，我们将以大众甲壳虫（汽车）为例。我们将使用三张图片作为目标（侧面、车尾闭合尾箱的视角，以及车尾打开尾箱的视角）来模拟一个从汽车侧面开始，然后移动到检查汽车发动机状态的操作员，同时从增强现实眼镜中接收信息。在真实环境中，这些图片将与真实的汽车（或工业设备）相对应。
- en: 'The images we are going to use in this project have been retrieved from the
    following link:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本项目中使用的图像已从以下链接获取：
- en: A 3D model of the Beetle car: [https://sketchfab.com/3d-models/beetlefusca-version-2-2f3bea70178345c8b7cc4424886f9386](https://sketchfab.com/3d-models/beetlefusca-version-2-2f3bea70178345c8b7cc4424886f9386)
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 甲壳虫汽车的3D模型：[https://sketchfab.com/3d-models/beetlefusca-version-2-2f3bea70178345c8b7cc4424886f9386](https://sketchfab.com/3d-models/beetlefusca-version-2-2f3bea70178345c8b7cc4424886f9386)
- en: A blueprint: [https://getoutlines.com/blueprints/6826/1968-volkswagen-beetle-sedan-blueprints](https://getoutlines.com/blueprints/6826/1968-volkswagen-beetle-sedan-blueprints)
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 蓝图：[https://getoutlines.com/blueprints/6826/1968-volkswagen-beetle-sedan-blueprints](https://getoutlines.com/blueprints/6826/1968-volkswagen-beetle-sedan-blueprints)
- en: An image in a PDF file: [https://getoutlines.com/blueprints/6943/1972-volkswagen-beetle-1500-sedan-blueprints](https://getoutlines.com/blueprints/6943/1972-volkswagen-beetle-1500-sedan-blueprints)
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PDF文件中的图像：[https://getoutlines.com/blueprints/6943/1972-volkswagen-beetle-1500-sedan-blueprints](https://getoutlines.com/blueprints/6943/1972-volkswagen-beetle-1500-sedan-blueprints)
- en: In the next section, we will introduce Vuforia briefly before starting to develop
    the guide project.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将简要介绍Vuforia，然后再开始开发指南项目。
- en: Exploring Vuforia
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索Vuforia
- en: As we discussed in [Chapter 6](3ef942da-7d11-444e-b3e9-ddbf24bb2d09.xhtml),
    *AR for Retail with Vuforia*, Vuforia is one of the oldest and most well-known
    AR SDKs that has been integrated in Unity since its 2017.2 version. It provides
    multiple AR features such as image recognition, ground plane recognition, model
    detection, and so on. You can find all the available features at [https://engine.vuforia.com/features.html](https://engine.vuforia.com/features.html).
    For this project, we will focus on image recognition.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第6章](3ef942da-7d11-444e-b3e9-ddbf24bb2d09.xhtml)，“使用Vuforia的零售AR”中讨论的那样，Vuforia是自2017.2版本以来集成到Unity中的最古老和最知名的AR
    SDK之一。它提供了多个AR功能，如图像识别、地面平面识别、模型检测等。您可以在[https://engine.vuforia.com/features.html](https://engine.vuforia.com/features.html)找到所有可用功能。对于这个项目，我们将专注于图像识别。
- en: 'In [Chapter 6](3ef942da-7d11-444e-b3e9-ddbf24bb2d09.xhtml), *AR for Retail
    with Vuforia*, in the *Exploring Vuforia* section,we explained the steps to integrate
    Vuforia for the first time in a Unity project. Please follow *steps 1-7* in that section
    but change the following parameters:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第6章](3ef942da-7d11-444e-b3e9-ddbf24bb2d09.xhtml)，“使用Vuforia的零售AR”，在“探索Vuforia”部分，我们解释了在Unity项目中首次集成Vuforia的步骤。请遵循该部分中的*步骤1-7*，但更改以下参数：
- en: 'Unity project name (*step 3*): `AR_Automation`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Unity项目名称（*步骤3*）: `AR_Automation`'
- en: 'Scene name (*step 4*): `ARGuide`'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '场景名称（*步骤4*）: `ARGuide`'
- en: 'Product name (*step 6*, *player settings*): `AR Guide`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '产品名称（*步骤6*，*玩家设置*）: `AR Guide`'
- en: 'Finally, set the light''s Rotation points or axes to X:`20`, Y:`0`, and Z:`0` and
    place it inside the ARCamera (as a child) to maintain its directionality:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将灯光的旋转点或轴设置为X:`20`，Y:`0`，和Z:`0`，并将其放置在ARCamera内部（作为一个子级）以保持其方向性：
- en: '![](img/032bc32d-2358-4629-8468-19fa77960aa7.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/032bc32d-2358-4629-8468-19fa77960aa7.png)'
- en: The Directional Light with its new values and child of the ARCamera
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 带有新值和ARCamera子级的方向光
- en: Now that we have the Vuforia engine ready in our project, let's start with the
    AR creation process.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在项目中准备好了Vuforia引擎，让我们开始AR创建过程。
- en: Developing image-based AR in Vuforia
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Vuforia中开发基于图像的AR
- en: One of the most powerful features of Vuforia is image recognition. The Vuforia
    engine can process any `.jpeg` or `.png` image (our AR marker or target) and extract
    its main features. It will later compare those features to the real-time images
    coming from the camera of a mobile device or AR glasses to find that marker in
    the real world and overlap the virtual elements on it to create the AR. In our
    case, we will be working with three images of a Beetle car that have been extracted
    from a 3D model. The images, however, can come from any source, such as real-life
    pictures or computer designed images.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Vuforia最强大的功能之一是图像识别。Vuforia引擎可以处理任何`.jpeg`或`.png`图像（我们的AR标记或目标）并提取其主要特征。它将稍后比较这些特征与来自移动设备或AR眼镜摄像头的实时图像，以在现实世界中找到该标记并将虚拟元素叠加在其上以创建AR。在我们的案例中，我们将使用从3D模型中提取的三张甲壳虫汽车的图像。然而，图像可以来自任何来源，例如现实生活中的图片或计算机设计的图像。
- en: The next section will show us how to create targets in Vuforia.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节将展示我们如何在Vuforia中创建目标。
- en: Creating the targets
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建目标
- en: 'Vuforia offers two different options when working with images:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当与图像一起工作时，Vuforia提供了两种不同的选项：
- en: '*Device databases* are groups of image targets that are created through the
    Vuforia Target Manager and then downloaded and included *locally* in the project.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*设备数据库*是通过对Vuforia Target Manager创建并通过本地项目下载和包含的图像目标组。'
- en: '*Cloud recognition *makes reference to the hosting and managing of the image
    targets groups directly *online*.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*云识别*指的是直接在线托管和管理图像目标组。'
- en: For this project, we will be using the first option. Databases, also known as
    **datasets** in the SDK, are groups of targets. They help with the classification
    of large amounts of targets, as well as memory and CPU usage. Databases can be
    dynamically loaded/unloaded at runtime and all the targets inside a loaded database
    will be added to the AR search. At the time of writing this book, there is no
    hard limit to the number of targets inside a database, although Vuforia recommends
    no more than 1,000 for performance reasons.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，我们将使用第一个选项。数据库，在SDK中也称为**数据集**，是一组目标。它们有助于大量目标的分类，以及内存和CPU的使用。数据库可以在运行时动态加载/卸载，并且所有加载的数据库中的目标都将添加到AR搜索中。在撰写本书时，数据库中目标数量的硬限制尚不存在，尽管Vuforia出于性能原因建议不要超过1,000。
- en: 'To create our own database and targets, we will have to log into the Vuforia
    development portal and head to the Target Manager, as shown in the following steps:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建我们自己的数据库和目标，我们必须登录到Vuforia开发门户并前往目标管理器，如下所示：
- en: Go to the Target Manager page at [https://developer.vuforia.com/vui/develop/databases](https://developer.vuforia.com/vui/develop/databases).
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往目标管理器页面[https://developer.vuforia.com/vui/develop/databases](https://developer.vuforia.com/vui/develop/databases)。
- en: 'Log In or Register (if you don''t have an account) to enter the page:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录或注册（如果您没有账户）以进入页面：
- en: '![](img/77b3402a-6465-419a-a9b6-3c4a04675d03.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/77b3402a-6465-419a-a9b6-3c4a04675d03.png)'
- en: The Target Manager page
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: “目标管理器”页面
- en: 'Click on Add Database at the top right to create a new database. Because we
    will be using the Beetle images as targets, give the database the name `Beetle`:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击右上角的“添加数据库”以创建新数据库。因为我们将使用Beetle图像作为目标，所以给数据库命名为“Beetle”：
- en: '![](img/df940284-d82b-4199-ad08-bb100bcf6545.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/df940284-d82b-4199-ad08-bb100bcf6545.png)'
- en: Creating a new database
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新数据库
- en: Now, click on the created database and click on Add Target.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击创建的数据库，然后点击添加目标。
- en: 'Click on the Browse button and select the `Side.jpg` image from the `Targets`
    folder of the project''s resources. Once it''s been uploaded, you will see that
    the Name field at the bottom will automatically be filled. Give it a Width value
    of `1` and click Add:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击浏览按钮，从项目的资源文件夹中的`Targets`文件夹选择`Side.jpg`图像。一旦上传，您将看到底部的名称字段将自动填充。给它一个宽度值为`1`并点击添加：
- en: '![](img/4863b319-ff50-4dd0-ae80-4b8c1e89d53b.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4863b319-ff50-4dd0-ae80-4b8c1e89d53b.png)'
- en: Creating a new target
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新目标
- en: The target will automatically be created, and next to it, you will see a number
    of stars, as depicted in the following screenshot. These stars indicate how recognizable
    the image will be by the AR software. Four or five stars are good targets.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目标将自动创建，旁边您将看到一些星星，如以下截图所示。这些星星表示图像将被AR软件识别的程度。四颗或五颗星星是好的目标。
- en: If you have any doubt or you want to know more about the other options that
    appear when you create a target, you can take a look at [https://library.vuforia.com/articles/Solution/How-To-Work-with-Device-Databases.html](https://library.vuforia.com/articles/Solution/How-To-Work-with-Device-Databases.html).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有任何疑问或想了解更多关于创建目标时出现的其他选项的信息，您可以查看[https://library.vuforia.com/articles/Solution/How-To-Work-with-Device-Databases.html](https://library.vuforia.com/articles/Solution/How-To-Work-with-Device-Databases.html)。
- en: 'Repeat *steps 4* and *step* *5* with the `Back_closed.jpg` and `Back_open.jpg` images
    and with the same Width of `1` so that all of them will have a similar scale in
    the Unity editor:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`Back_closed.jpg`和`Back_open.jpg`图像以及相同的宽度`1`重复*步骤4*和*步骤5*，以便它们在Unity编辑器中具有相似的缩放：
- en: '![](img/5918d141-6923-4072-bb92-8755da508942.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5918d141-6923-4072-bb92-8755da508942.png)'
- en: The Target Manager page with the Beetle database and its targets
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 带有Beetle数据库及其目标的“目标管理器”页面
- en: Once the three targets have been created, click on Download Database (All),
    select Unity Editor, and click Download. It will download a `Beetle.unitypackage`
    file that we will import into the project.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建了三个目标后，点击下载数据库（全部），选择Unity编辑器，然后点击下载。它将下载一个`Beetle.unitypackage`文件，我们将将其导入到项目中。
- en: 'Double-click on the `Beetle.unitypackage` file to import it in Unity. You can
    also import it from the Unity editor by clicking on Assets|Import Package|Custom
    Package… and selecting the file:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击`Beetle.unitypackage`文件将其导入Unity。您也可以通过点击Assets|导入包|自定义包…并选择文件来从Unity编辑器导入：
- en: '![](img/d5b4b0f4-cf56-4938-a6fb-7dee167bd536.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d5b4b0f4-cf56-4938-a6fb-7dee167bd536.png)'
- en: The target database files to be imported in Unity
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要导入到Unity中的目标数据库文件
- en: This will add the database to a newly created `StreamingAssets/Vuforia` folder
    and the compressed images of the three targets to the `Editor/Vuforia/ImageTargetTextures/Beetle`
    folder.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将把数据库添加到一个新创建的`StreamingAssets/Vuforia`文件夹中，并将三个目标的压缩图像添加到`Editor/Vuforia/ImageTargetTextures/Beetle`文件夹中。
- en: 'Now that we have the database included in our project, we are going to add
    the three targets to the scene by following these steps:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将数据库包含在我们的项目中，我们将按照以下步骤将三个目标添加到场景中：
- en: 'Right-click on the Hierarchy window and click on Vuforia Engine|Image. This
    will create an ImageTarget object in our scene:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击层次结构窗口，然后单击Vuforia Engine|Image。这将在我们场景中创建一个ImageTarget对象：
- en: '![](img/e6086d01-8591-470b-bae8-7b1e68594484.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e6086d01-8591-470b-bae8-7b1e68594484.png)'
- en: Adding a Vuforia ImageTarget to the scene
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 将Vuforia ImageTarget添加到场景中
- en: 'By default, the ARCamera and ImageTarget will be in the same position and nothing
    will appear on camera. Using the Rotation tab, rotate the camera by `90` in the
    X axis and move it upwards `3` units until the target is in view:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，ARCamera和ImageTarget将在同一位置，相机上不会显示任何内容。使用旋转选项卡，将相机在X轴上旋转`90`度，并向上移动`3`个单位，直到目标在视图中：
- en: '![](img/0534e307-2fe9-48d1-af6e-2503e69d59fd.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0534e307-2fe9-48d1-af6e-2503e69d59fd.png)'
- en: ARCamera Transform values
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: ARCamera变换值
- en: 'Create the other two ImageTargets and move them until the three are in view.
    Name them `Target_Side`, `Target_Close`, and `Target_Open` so that you can differentiate
    between them:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建其他两个ImageTargets并将它们移动到三个目标都在视图中。将它们命名为`Target_Side`、`Target_Close`和`Target_Open`，以便您可以区分它们：
- en: '![](img/4ca32c4c-5b67-4266-8a6f-9bf6ad1d69de.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4ca32c4c-5b67-4266-8a6f-9bf6ad1d69de.png)'
- en: The three targets in the scene
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 场景中的三个目标
- en: 'By default, the ImageTarget represents the first target found in the first
    database, sorted alphabetically. To change it, select the Target_Side in the Hierarchy
    window, and in the Inspector window, under the Image Target Behavior component,
    select its image. Do the same with Target_Open. If you want, scale the targets
    up/down using the scale tab and move them until they look similar and take up
    all the camera width for a better view:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，ImageTarget代表第一个数据库中找到的第一个目标，按字母顺序排序。要更改它，请选择层次结构窗口中的`Target_Side`，然后在检查器窗口中，在Image
    Target Behavior组件下选择其图像。对`Target_Open`也做同样的操作。如果您愿意，可以使用缩放选项卡调整目标的大小，并将它们移动到看起来相似并占据整个相机宽度以获得更好的视图：
- en: '![](img/5030841a-2d07-4fac-ae79-08451c58524f.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5030841a-2d07-4fac-ae79-08451c58524f.png)'
- en: Changing the image reference for the targets
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 更改目标的图像引用
- en: We'll learn how to add test cubes in the next section.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一节学习如何添加测试立方体。
- en: Adding some test cubes
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加一些测试立方体
- en: 'To quickly test our scene, let''s create three different objects to visualize
    on top of each target:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 为了快速测试我们的场景，让我们创建三个不同的对象，以便在每个目标上方进行可视化：
- en: Right-click on Target_Side and select 3D Object|Cube.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`Target_Side`并选择3D Object|Cube。
- en: Scale it down so it doesn't hide the target completely.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 缩小它，以免完全隐藏目标。
- en: For Target_Close, create a 3D Object|Sphere instead of a cube, and for Target_Open,
    create a 3D Object|Capsule.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`Target_Close`，创建一个3D Object|Sphere而不是立方体，对于`Target_Open`，创建一个3D Object|Capsule。
- en: 'Scale them down as well so that the targets are partially in view. As it''s
    only for testing purposes, we are not going to add any material or texture to
    these objects:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 也缩小它们，以便目标部分在视图中。由于这只是为了测试目的，我们不会向这些对象添加任何材质或纹理：
- en: '![](img/74c31f19-ea11-4f97-ad56-20f101af0f73.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/74c31f19-ea11-4f97-ad56-20f101af0f73.png)'
- en: Testing the 3D objects inside each target
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 测试每个目标内的3D对象
- en: Now, let's obtain our Vuforia key so that we can test the app.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们获取我们的Vuforia密钥，以便我们可以测试应用。
- en: Obtaining the key
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取密钥
- en: 'In order to test the app or run it on a device, we need to provide a license
    key in the VuforiaConfiguration object. As we already logged into the Vuforia
    page to create the targets, we are now going to obtain the required key. Let''s
    get started:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试应用或在设备上运行它，我们需要在VuforiaConfiguration对象中提供一个许可证密钥。由于我们已经登录到Vuforia页面创建目标，我们现在将获取所需的密钥。让我们开始吧：
- en: Go to the license manager page at [https://developer.vuforia.com/vui/develop/licenses](https://developer.vuforia.com/vui/develop/licenses).
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往[https://developer.vuforia.com/vui/develop/licenses](https://developer.vuforia.com/vui/develop/licenses)的许可证管理页面。
- en: On the License Manager tab, select Get Development Key to obtain a free key
    to use while developing.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在许可证管理选项卡上，选择获取开发密钥以获取在开发期间使用的免费密钥。
- en: Give it the name of your app, `AR Guide`, read and accept the terms, and press
    Confirm.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给它起一个应用的名字，`AR Guide`，阅读并接受条款，然后按确认。
- en: Select your newly created license and copy the key.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您新创建的许可证并复制密钥。
- en: Now, go to the Unity editor and select the ARCamera from the scene.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，前往Unity编辑器并从场景中选择ARCamera。
- en: 'Click on the Open Vuforia Engine configuration button in the Inspector window
    to open the general Vuforia configuration:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器窗口中点击“打开Vuforia引擎配置”按钮以打开通用Vuforia配置：
- en: '![](img/e7454376-9010-4c51-b3bc-b402a4907e29.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e7454376-9010-4c51-b3bc-b402a4907e29.png)'
- en: Opening the Vuforia Engine configuration button
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 打开Vuforia引擎配置按钮
- en: 'Paste your key into the App License Key field:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的密钥粘贴到“应用许可证密钥”字段中：
- en: '![](img/12cec8bb-19d7-4155-870f-3ac6cfc22f3a.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/12cec8bb-19d7-4155-870f-3ac6cfc22f3a.png)'
- en: Vuforia license key field in the Inspector window
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在检查器窗口中的Vuforia许可证密钥字段
- en: Now, let's test the app to check that our AR scene has been set up properly.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们测试应用以检查我们的AR场景是否已正确设置。
- en: Testing the app
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试应用
- en: Once the scene has been configured and the key has been added, click on the
    play button in the top Toolbar and point to the three target images with the webcam.
    You will see the different 3D objects appearing in each target when pointing at
    them.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦场景已配置并添加了密钥，点击顶部工具栏中的播放按钮并将摄像头指向三个目标图像。当你指向它们时，你将看到每个目标中出现的不同3D对象。
- en: You will be able to see the scene better if you select Maximize on Play in the
    Game view's top-right corner.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择在游戏视图的右上角最大化播放，你将能够更好地看到场景。
- en: 'The next image shows the cube appearing over the car side when the camera points
    at it:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个图像显示了当摄像头指向它时，汽车侧方的立方体出现：
- en: '![](img/8975d5a8-9fa7-4500-8ed6-1630ed83f790.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8975d5a8-9fa7-4500-8ed6-1630ed83f790.png)'
- en: In the Game view, the cube object appears over the Target_Side target
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在游戏视图中，立方体对象出现在目标侧目标上方
- en: You can find the pictures in the Project window inside the `Assets/ Editor/Vuforia/ImageTargetTextures/Beetle`
    folder. Double-click on them to open them in the computer, and either print them
    or directly point to them using the webcam.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在项目窗口的`Assets/ Editor/Vuforia/ImageTargetTextures/Beetle`文件夹中找到这些图片。双击它们在电脑上打开，然后打印它们或直接使用摄像头指向它们。
- en: Now that we have the basic functionality set up, let's create the full app.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了基本功能，让我们创建完整的应用。
- en: Creating an industrial guide for AR glasses
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为AR眼镜创建工业指南
- en: Now that we have the basic setup ready, we are going to create a guide that
    will instruct workers on how to proceed, step by step, with the maintenance process
    of a car. The app will show them instructions with visual aids such as colored
    pictures and arrows that mark which part of the car they have to look at. It will
    also provide a help PDF file that they will be able to open to consult if needed.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好了基本设置，我们将创建一个指南，指导工人如何逐步进行汽车维护过程。应用将显示带有彩色图片和箭头的说明，这些箭头标记了他们需要查看的汽车部件。它还将提供一个帮助PDF文件，他们可以在需要时打开查阅。
- en: 'The general working of the app will be as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 应用的一般工作方式如下：
- en: 'When the app starts, it will ask the worker to point at the car''s side to
    start the process:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当应用启动时，它将要求工人指向汽车的侧面以开始过程：
- en: '![](img/824cbc07-0b03-464d-a8e0-9608725f9ca0.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/824cbc07-0b03-464d-a8e0-9608725f9ca0.png)'
- en: The initial message
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 初始信息
- en: 'When pointing with the camera at the side of the car (Target_Side), a blueprint
    of it will appear over the top of it, indicating a problem in the engine in red:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用摄像头指向汽车侧面（目标侧）时，其蓝图将出现在其上方，用红色指示引擎中的问题：
- en: '![](img/02584604-8c51-41db-9f4c-8d657d24d0e6.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/02584604-8c51-41db-9f4c-8d657d24d0e6.png)'
- en: The blueprint over the marker with the engine in red
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 标记引擎的红色蓝图
- en: 'When the operator touches the red square, the app will instruct them to go
    to the back of the car:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当操作员触摸红色方块时，应用将指示他们前往汽车的后面：
- en: '![](img/81a7e52f-0333-4f2a-a226-2c8106de7075.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/81a7e52f-0333-4f2a-a226-2c8106de7075.png)'
- en: The message when the user touches the engine
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 用户触摸引擎时的信息
- en: 'When pointing with the camera at the back of the car (Target_Close), the app
    will indicate to open the trunk via a blinking arrow:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用摄像头指向汽车后面（目标靠近）时，应用将通过闪烁的箭头指示打开行李箱：
- en: '![](img/13eb829e-685a-4a21-9fa4-1370b8eee40c.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/13eb829e-685a-4a21-9fa4-1370b8eee40c.png)'
- en: The message to open the trunk
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 打开行李箱的信息
- en: Once the worker has opened the trunk and is pointing at the engine (Target_Open),
    the app will indicate that the user needs to remove and change the top left spark
    plug.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦工人已经打开行李箱并指向引擎（目标打开），应用将指示用户需要移除并更换左上角的火花塞。
- en: On one side of the screen, a help PDF file with the instructions will be available
    in case the worker needs them.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在屏幕的一侧，将提供带有指令的帮助PDF文件，以防工人需要它们。
- en: 'When the operator has finished replacing the piece, they will press a button
    to confirm that they''ve completed the task:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当操作员完成更换部件后，他们将按下一个按钮以确认他们已完成任务：
- en: '![](img/2f2a6144-4095-48bb-9842-eda5c1df344f.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2f2a6144-4095-48bb-9842-eda5c1df344f.png)'
- en: The arrow pointing at the spark to replace and the UI buttons of this step
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 指向火花以替换的箭头和此步骤的UI按钮
- en: 'Note: The content we are going to use is just for demonstration purposes and
    doesn''t correspond to the real instructions of this procedure.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：我们将使用的内容仅用于演示目的，并不对应此程序的真正指令。
- en: In the following section, we are going to add the required material to our project.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将向我们的项目中添加所需的内容。
- en: Preparing the material
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备材料
- en: 'For this project, we are going to use some media content that has to be imported
    into the project and customized. We have to put it inside the project and then
    use it in our scene. For that, follow these steps:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，我们将使用一些需要导入到项目中并定制的媒体内容。我们必须将其放入项目中，然后在我们的场景中使用它。为此，请按照以下步骤操作：
- en: 'Create your own folder inside the `Assets` folder on the Project window and
    name it `@MyAssets`. Then, create two other folders inside it called `Images` and `Scripts`:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目窗口的`Assets`文件夹中创建一个新文件夹，命名为`@MyAssets`。然后，在它里面创建两个其他文件夹，分别命名为`Images`和`Scripts`：
- en: '![](img/9245a600-84c8-4d4f-9bf6-e2c1e1221c66.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9245a600-84c8-4d4f-9bf6-e2c1e1221c66.png)'
- en: Creating a new folder in the Project window
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目窗口中创建新文件夹
- en: From the resources of this chapter, drag the `arrow.png`, `blueprint.png`, `icon_file.png`, and
    `icon_home.png` image files into the `Images` folder you just created.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从本章的资源中，将`arrow.png`、`blueprint.png`、`icon_file.png`和`icon_home.png`图像文件拖放到您刚刚创建的`Images`文件夹中。
- en: 'Select the images called icons and in the Inspector window, change their Texture
    Type to Sprite (2D and UI) so that we can use them inside the UI:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择名为图标的图像，在检查器窗口中，将它们的纹理类型更改为Sprite（2D和UI），这样我们就可以在UI中使用它们：
- en: '![](img/7a55925b-1421-4ac0-bba4-bb6b9f30d9c7.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7a55925b-1421-4ac0-bba4-bb6b9f30d9c7.png)'
- en: Changing the icon texture type
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 更改图标纹理类型
- en: 'Create a new folder in the `Assets/StreamingAssets` folder of the Project window,
    call it `PDF`, and drag the `WorkOrder_0021.pdf` PDF file to it:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目窗口的`Assets/StreamingAssets`文件夹中创建一个新的文件夹，命名为`PDF`，并将`WorkOrder_0021.pdf`
    PDF文件拖放到其中：
- en: '![](img/b9358354-4d5c-437f-a393-a08b39dea584.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b9358354-4d5c-437f-a393-a08b39dea584.png)'
- en: The PDF file in the StreamingAssets/PDF folder
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: StreamingAssets/PDF文件夹中的PDF文件
- en: Adding the UI
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加UI
- en: An important thing to take into account for this project is that the target
    device is not a phone or tablet, but AR glasses. When working with glasses, the
    scene view is duplicated (for each eye) and is smaller than that of a tablet or
    phone. Thus, the UI and the size of its elements have to be adapted accordingly.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目来说，一个重要的事情是目标设备不是手机或平板电脑，而是AR眼镜。当使用眼镜时，场景视图被复制（每只眼睛）并且比平板电脑或手机小。因此，UI及其元素的大小必须相应调整。
- en: 'As a summary, for this guide, we are going to need the following elements:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 作为总结，对于本指南，我们需要以下元素：
- en: '**Main message**: Some text that occupies most of the screen to provide the
    main instructions (point at the side of the car, go to the back, and so on).'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主信息**：占据屏幕大部分的文本，提供主要指令（指向汽车的侧面，前往后面等）。'
- en: '**Bottom message**: Some indication text placed at the bottom of the screen
    to give secondary instructions combined with AR elements (touch the red elements
    to see instructions, open the trunk, replace a piece, and so on).'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**底部信息**：放置在屏幕底部的指示文本，提供与AR元素结合的次要指令（触摸红色元素以查看指令，打开行李箱，更换部件等）。'
- en: '**PDF button**: A button for the extra information in PDF format.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PDF按钮**：用于PDF格式的额外信息的按钮。'
- en: '**Home button**: To return to the initial screen.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主页按钮**：返回初始屏幕。'
- en: 'Let''s create all of them step by step:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们一步步创建它们：
- en: 'Start by creating a Canvas object in the Hierarchy window:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先在层次窗口中创建一个画布对象：
- en: '![](img/a56469f7-5217-4023-b264-63b5475afe5b.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a56469f7-5217-4023-b264-63b5475afe5b.png)'
- en: Adding a Canvas to the scene
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在场景中添加画布
- en: When creating the Canvas object (parent to any other UI element), an Event System object,
    which is in charge of the user events that connect with the UI, is automatically
    created. If you try to create any UI component (for example, text, button, and
    so on) before creating the Canvas, Unity will create a Canvas element (with its
    EventSystem object) and make the new component a child of it.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建Canvas对象（任何其他UI元素的父对象）时，会自动创建一个事件系统对象，该对象负责与UI连接的用户事件。如果您在创建Canvas之前尝试创建任何UI组件（例如，文本、按钮等），Unity将创建一个Canvas元素（及其EventSystem对象），并将新组件作为其子组件。
- en: 'In the Inspector window, change the Canvas component''s Render Mode from Screen
    Space - Overlay to World Space and select the ARCamera as Event Camera. This way,
    the Canvas is placed in the 3D world instead of fixed and can be moved/scaled.
    In the Rect Transform component, enter the values of the image so that the Canvas
    is in front of the camera:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器窗口中，将画布组件的渲染模式从屏幕空间 - 覆盖更改为世界空间，并选择ARCamera作为事件相机。这样，画布就被放置在3D世界中，而不是固定，可以移动/缩放。在矩形变换组件中，输入图像的值，以便画布位于相机前面：
- en: '![](img/25726091-1150-4e7a-b5c2-d4aa48180366.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/25726091-1150-4e7a-b5c2-d4aa48180366.png)'
- en: Values of the Canvas gameobject
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: Canvas游戏对象的值
- en: 'Let''s create the main message. Right-click on the Canvas element in the Hierarchy
    window and select UI|Text. Name it `Main_message`:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建主要消息。在层次结构窗口中右键单击画布元素，并选择UI|Text。将其命名为`Main_message`：
- en: '![](img/4dfe761e-cf4a-4342-9c10-36587277316c.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4dfe761e-cf4a-4342-9c10-36587277316c.png)'
- en: Creating new text inside the Canvas element
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在画布元素内创建新文本
- en: 'In the Hierarchy window, change the values on the Rect Transform component
    to match the following screenshot. Remove the default text, change the Alignment so
    it''s centered in the screen, check the Best Fit checkbox so that the text fills
    the container, set the Max Size to `80` to ensure it''s big enough, and change
    the Color to white:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构窗口中，更改矩形变换组件的值以匹配以下截图。移除默认文本，更改对齐方式使其在屏幕中居中，勾选最佳拟合复选框以便文本填充容器，将最大尺寸设置为`80`以确保足够大，并将颜色更改为白色：
- en: '![](img/7a6e678c-160b-4cd1-8b03-011538ddda85.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7a6e678c-160b-4cd1-8b03-011538ddda85.png)'
- en: Values of the Rect Transform and Text components in the Main_message
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: Main_message中矩形变换和文本组件的值
- en: 'We are now going to create a secondary message panel. As it''s going to be
    very similar to the previous one, we can directly right-click on the previous
    and select Duplicate:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将创建一个次要信息面板。由于它与前面的面板非常相似，我们可以直接右键单击前面的面板并选择复制：
- en: '![](img/d4209f63-47bd-4f32-9c9b-aa7052873595.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d4209f63-47bd-4f32-9c9b-aa7052873595.png)'
- en: Duplicating the message
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 复制消息
- en: 'Change its name to `Bottom_message` and change its Rect Transform values so
    its place is at the bottom of the screen:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其名称更改为`Bottom_message`，并更改其矩形变换值，使其位于屏幕底部：
- en: '![](img/1fa5fbf3-4b73-4f9d-8e78-b99b8a62f641.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1fa5fbf3-4b73-4f9d-8e78-b99b8a62f641.png)'
- en: New message's values
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 新消息的值
- en: 'To create the buttons, right-click on the Canvas element and select UI|Button:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建按钮，请右键单击画布元素并选择UI|Button：
- en: '![](img/66093bf4-df8a-430e-b8cb-f9768580572d.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/66093bf4-df8a-430e-b8cb-f9768580572d.png)'
- en: Creating a button element on the Canvas
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在画布上创建按钮元素
- en: Remove the text from it and change the button name to `Home_button`.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从它上面移除文本，并将按钮名称更改为`Home_button`。
- en: On the Rect Transform, select anchoring it to the bottom left and copy the values
    from the image to place it at the bottom left of the screen with an appropriate
    size for the glasses.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在矩形变换中，选择将其锚定到左下角，并从图像中复制值以将其放置在屏幕左下角，并为其眼镜设置适当的大小：
- en: 'On the Image component, select the `icon_home` image as the Source Image, and
    on the Button component, change the Pressed Color. This way, when the button is
    clicked, it will change from white to blue:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在图像组件中，选择`icon_home`图像作为源图像，并在按钮组件中更改按下颜色。这样，当按钮被点击时，它将从白色变为蓝色：
- en: '![](img/2f224bd8-1ce3-4456-8b2a-30d6387bb2fe.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2f224bd8-1ce3-4456-8b2a-30d6387bb2fe.png)'
- en: Home_button's values on the Inspector
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: Home_button在检查器中的值
- en: 'Duplicate the button to create a copy of it and call it `File_button`. Change
    its Rect Transform so that you can locate it at the top-right corner of the screen
    and change its Source Image to icon_file, as follows:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制按钮以创建其副本，并将其命名为`File_button`。更改其矩形变换，以便您可以将其定位在屏幕右上角，并将其源图像更改为icon_file，如下所示：
- en: '![](img/4c39a164-6b4c-4373-aca9-fc5a336adff7.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4c39a164-6b4c-4373-aca9-fc5a336adff7.png)'
- en: The values of the File_button
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: File_button的值
- en: 'Now, create the last button from scratch, call it `OK_button`, and place it
    at the bottom-right corner of the screen. Change its Normal Color to light green:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，从头开始创建最后一个按钮，命名为`OK_button`，并将其放置在屏幕的右下角。将其正常颜色更改为浅绿色：
- en: '![](img/8e664f7a-b6af-4c83-be17-a5fdfd43d1ad.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8e664f7a-b6af-4c83-be17-a5fdfd43d1ad.png)'
- en: Values of the Ok_button element
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: Ok_button元素的值
- en: 'Select the Text child on the button and change the Rect Transform and Text
    component parameters so that they match what''s shown in the following screenshot:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在按钮上右键单击Text子项，并更改Rect Transform和Text组件参数，使其与以下截图中的内容匹配：
- en: '![](img/fcab318e-0d9c-4cc8-a006-f3758fe9d3e0.png)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fcab318e-0d9c-4cc8-a006-f3758fe9d3e0.png)'
- en: Values of the Text element inside the Ok_button
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: Ok_button内部Text元素的值
- en: 'Your Scene and Game views should now look like this:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的场景和游戏视图现在应该看起来像这样：
- en: '![](img/0139bb46-cee4-4242-af5f-0c740167874b.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0139bb46-cee4-4242-af5f-0c740167874b.png)'
- en: Scene and Game views with the created UI
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 带有创建的UI的场景和游戏视图
- en: Note that if you press the play button in the Toolbar, you will see that when
    the real camera feed is launched, the UI disappears. Don't worry about it at this
    point as we will be adjusting it later in this section.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果您在工具栏中按下播放按钮，您会看到当真实摄像头的视频流启动时，UI消失了。不要担心这一点，因为我们将在本节的后面调整它。
- en: Now that the UI elements are ready, we are going to add the virtual elements,
    which will appear in AR, and the logic attached to them.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 现在UI元素已经准备好了，我们将添加虚拟元素，这些元素将在AR中显示，以及与它们相关的逻辑。
- en: Mounting the AR scene
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装AR场景
- en: The first thing we are going to do is modify the `DefaultTrackableEventHandler.cs`
    script attached to each of the targets in the scene. This script determines the
    actions to perform whenever a target is found or lost in the real world; by default,
    it shows and hides the Renderer, Collider, and Canvas elements attached to any
    child of that target.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要做的第一件事是修改场景中每个目标附加的`DefaultTrackableEventHandler.cs`脚本。此脚本确定在现实世界中找到或丢失目标时要执行的操作；默认情况下，它显示和隐藏附加到该目标任何子项的Renderer、Collider和Canvas元素。
- en: For our app, we need to know whenever a target has been found, and for that,
    we are going to add a variable to the script.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的应用程序，我们需要知道何时找到目标，为此，我们将在脚本中添加一个变量。
- en: For this project, we only need to make a slight change in the script. However,
    if you want to add more code to control when targets are found or lost, it's better
    to create a new class that inherits from `ITrackableEventHandler` like `DefaultTrackableEventHandler`
    does so that you always have a reference class to come back to in case anything
    fails in your code.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，我们只需要在脚本中做一点小的修改。然而，如果您想添加更多代码来控制目标何时被找到或丢失，最好创建一个新的类，该类继承自`ITrackableEventHandler`，例如`DefaultTrackableEventHandler`，这样您就始终有一个参考类可以返回，以防代码中出现问题。
- en: 'In the Project window, double-click on this script, which you can find in Vuforia|Scripts.
    When the Visual Studio window opens, we need to add the `public bool found = false;` variable
    to the variables:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目窗口中，双击此脚本，您可以在Vuforia|Scripts中找到它。当Visual Studio窗口打开时，我们需要将`public bool found
    = false;`变量添加到变量中：
- en: Then, *inside* the `OnTrackingFound()` method, add `found = true;` at the end.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`OnTrackingFound()`方法内部，在末尾添加`found = true;`。
- en: And *inside* the `OnTrackingLost()` method, add `found = false;` at the end.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在`OnTrackingLost()`方法内部，在末尾添加`found = false;`。
- en: This way, we can use this variable from any other class to know if a target
    has been found.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们就可以从任何其他类中使用这个变量来知道是否找到了目标。
- en: Back in Unity, let's start adding the AR elements. For that, first of all, remove
    the test 3D cube, sphere, and capsule.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 回到Unity中，让我们开始添加AR元素。为此，首先，删除测试3D立方体、球体和胶囊。
- en: 'Now, we are going to look at the first target:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将查看第一个目标：
- en: 'Right-click on the Target_Side and create a 3D Object|Plane:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Target_Side上右键单击并创建一个3D Object|Plane：
- en: '![](img/faca1576-afb8-4387-9b2f-eb31dd00f713.png)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/faca1576-afb8-4387-9b2f-eb31dd00f713.png)'
- en: Creating a new plane
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的平面
- en: 'From the Project window, drag the blueprint image over the plane to make it
    its texture:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目窗口中，将蓝图图像拖到飞机上以使其成为其纹理：
- en: '![](img/6cf264ca-dec4-436c-b6db-2ec89cb7f1aa.png)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6cf264ca-dec4-436c-b6db-2ec89cb7f1aa.png)'
- en: Assigning the blueprint image as texture of the plane
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 将蓝图图像作为飞机的纹理
- en: 'In the Inspector window, change its name to `Blueprint`. On the material panel
    at the bottom, change the Rendering Mode to Fade to make it transparent and smooth.
    Now rotate, scale, and move the plane until the blueprint matches the car beneath,
    as shown in the following screenshot:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器窗口中，将其名称更改为“Blueprint”。在底部材质面板中，将渲染模式更改为淡入，使其透明且平滑。现在旋转、缩放和平移平面，直到蓝图与下面的汽车匹配，如下面的截图所示：
- en: '![](img/78c60e66-c0ac-4510-87c1-a7a81ac99a1f.png)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/78c60e66-c0ac-4510-87c1-a7a81ac99a1f.png)'
- en: The blueprint over the target and its values in the Inspector window
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 目标上方的蓝图及其在检查器窗口中的值
- en: Important! Keep the Y position value to `0.01` so the drawing is placed over
    the target but not too far away from it. This is to ensure the AR works correctly
    and the blueprint won't flicker for being too separated from the target.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 重要！保持Y位置值为`0.01`，以确保绘图位于目标上方，但不要离目标太远。这是为了确保AR正常工作，并且蓝图不会因为与目标分离太远而闪烁。
- en: 'Now, we have to create another plane that covers the engine area so that when
    the user touches it, it gives them directions. Create another plane child of the
    Blueprint and call it `Engine`. Move and resize it until it fits the engine area
    (marked in red in the blueprint):'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们必须创建另一个覆盖发动机区域的平面，以便当用户触摸它时，它为他们提供方向。创建另一个名为“Engine”的Blueprint子平面。移动和调整其大小，直到它适合发动机区域（在蓝图上用红色标记）：
- en: '**Important!** Keep it *on top* of the blueprint (Y Position `0.015` or `0.02`).'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '**重要！**将其保持在蓝图上方（Y位置`0.015`或`0.02`）。'
- en: 'The next image shows the new grey plane placed over the engine area:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个图像显示了放置在发动机区域上的新灰色平面：
- en: '![](img/74e7e747-3bd2-459f-8ad2-9bcc09e85239.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/74e7e747-3bd2-459f-8ad2-9bcc09e85239.png)'
- en: The new plane located over the engine area
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 位于发动机区域上的新平面
- en: 'Now, we have to make this plane invisible as it''s only going to act as an
    activator. In the Inspector panel, remove its Mesh Renderer component by clicking
    on the gear at the top right and selecting Remove Component. Now, you will only
    see the plane if you select it:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们必须使这个平面不可见，因为它只起激活器的作用。在检查器面板中，通过点击右上角的齿轮并选择移除组件来移除其Mesh Renderer组件。现在，只有选择它时你才能看到平面：
- en: '![](img/634c0af9-cf1d-4d1d-a74a-a429411c9c00.png)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/634c0af9-cf1d-4d1d-a74a-a429411c9c00.png)'
- en: Removing the Mesh Renderer component from the plane
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 从平面上移除Mesh Renderer组件
- en: 'Let''s move to the second target. This target will show an arrow to indicate
    to the user to open the trunk:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们转到第二个目标。这个目标将显示一个箭头，指示用户打开树干：
- en: Right-click on Target_Close, create a new 3D Object|Plane, and place it in the
    middle of the trunk.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击Target_Close，创建一个新的3D对象|平面，并将其放置在树干中间。
- en: Drag the arrow image to the plane to make it its texture.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将箭头图像拖到平面上，使其成为其纹理。
- en: 'In the Inspector window, call the plane `Arrow`. Remember to set the Y Position
    to `0.01`. In the Material field, set Rendering Mode to Fade and change the Albedo
    color to a light blue:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器窗口中，将平面命名为“Arrow”。请记住将Y位置设置为“0.01”。在材质字段中，将渲染模式设置为淡入，并将Albedo颜色更改为浅蓝色：
- en: '![](img/365b6b00-92bd-4871-94da-9947ad160de4.png)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/365b6b00-92bd-4871-94da-9947ad160de4.png)'
- en: The values of the Arrow plane
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 箭头平面的值
- en: 'To add the blinking effect of the arrow, create a new C# script in the `@MyAssets/Script`
    folder and call it `Blinking.cs`:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要添加箭头的闪烁效果，在`@MyAssets/Script`文件夹中创建一个新的C#脚本，并将其命名为`Blinking.cs`：
- en: '![](img/6cec223a-bd64-4a7e-82ef-234f8aa4fd08.png)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6cec223a-bd64-4a7e-82ef-234f8aa4fd08.png)'
- en: Adding a new script to the @MyAssets/Scripts folder
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 将新脚本添加到@MyAssets/Scripts文件夹
- en: 'Double-click on it to open it in Visual Studio:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击它以在Visual Studio中打开：
- en: '![](img/108ead84-ef53-44fe-83ae-44b90eb5aaf4.png)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/108ead84-ef53-44fe-83ae-44b90eb5aaf4.png)'
- en: Blinking script in Visual Studio
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio中的闪烁脚本
- en: 'Now, add the following lines to create the blinking effect. First, declare
    the following variables:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，添加以下行以创建闪烁效果。首先，声明以下变量：
- en: '[PRE0]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`coroutine` is a special function in Unity that pauses the execution and gives
    control back to the calling method until a certain condition is completed, and
    then resumes the execution where it left off. We will use it to blink every half
    a second.'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '`coroutine`是Unity中的一个特殊函数，它暂停执行并将控制权交回调用方法，直到满足某个条件，然后从上次停止的地方继续执行。我们将用它来每半秒闪烁一次。'
- en: 'Now, *inside* the `Start()` method, include the following initialization lines:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`Start()`方法内部，包含以下初始化行：
- en: '[PRE1]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Add the `coroutine` *after* the `Update()` method:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Update()`方法之后添加`coroutine`：
- en: '[PRE2]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The usual pausing command for a `coroutine` is `yield return null;`, which pauses
    the execution for a frame. For this `coroutine`, we have used `yield return new
    WaitForSeconds(0.5f);` to tell the `coroutine` to wait half a second before executing
    the following line. With this code, we are making the `MeshRenderer` component
    of the GameObject the script is attached to (the arrow) appear and disappear every
    half a second.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '`coroutine` 的常规暂停命令是 `yield return null;`，它暂停执行一帧。对于这个 `coroutine`，我们使用了 `yield
    return new WaitForSeconds(0.5f);` 来告诉 `coroutine` 在执行下一行之前等待半秒。使用此代码，我们使脚本附加到的
    GameObject（箭头）的 `MeshRenderer` 组件每半秒出现和消失一次。'
- en: '*Inside* the `Update()` method, we are going to use the `coroutine` so that
    the arrow blinks only while the target is being detected and is hidden otherwise.
    With the blinking Boolean, we will verify that the `coroutine` is only launched
    once:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Update()` 方法内部，我们将使用 `coroutine` 以确保箭头仅在检测到目标时闪烁，否则隐藏。使用闪烁布尔值，我们将验证 `coroutine`
    只启动一次：
- en: '[PRE3]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Back in the Unity editor, go to the Inspector window, click on Add Component,
    and add the Blinking script to the Arrow plane:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Unity 编辑器中，回到检查器窗口，点击添加组件，并将闪烁脚本添加到箭头平面上：
- en: '![](img/2774b5c1-4a02-49bd-97e1-33981c9ec254.png)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2774b5c1-4a02-49bd-97e1-33981c9ec254.png)'
- en: Adding the new script to the plane
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 将新脚本添加到平面上
- en: 'To finish, let''s go to the third target, which will have another arrow:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们转到第三个目标，它将有一个另一个箭头：
- en: Right-click on the Arrow game object and press Copy.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击箭头游戏对象并按复制。
- en: Then, right-click on the Target_Open game object and paste it.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，右键单击 Target_Open 游戏对象并粘贴它。
- en: 'Move and rotate it until it''s pointing at the top left of the trunk:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移动和旋转它，直到它指向树干的左上角：
- en: '![](img/0e20e4f3-095f-459b-83e8-e3049c1078a7.png)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0e20e4f3-095f-459b-83e8-e3049c1078a7.png)'
- en: The two arrows pointing to different places on the trunk
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 指向树干不同位置的两个箭头
- en: 'At the moment, if we press the Play button on the top Toolbar, we will see
    the blueprint and arrows appearing when we point at each marker. However, we need
    to convert them into a step-by-step guide that will only show an instruction when
    the previous one is completed. We are going to add that logic in another script:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，如果我们按下顶部工具栏上的播放按钮，当我们指向每个标记时，我们会看到蓝图和箭头出现。然而，我们需要将它们转换成逐步指南，只有当上一个步骤完成时才会显示指令。我们将在另一个脚本中添加该逻辑：
- en: In the Project window, in the `@MyAssets/Scripts` folder, right-click and create
    another C# script.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目窗口中，在 `@MyAssets/Scripts` 文件夹中，右键单击并创建另一个 C# 脚本。
- en: 'Call it `MainHandler.cs` and double-click on it to open it in Visual Studio:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其命名为 `MainHandler.cs` 并双击它以在 Visual Studio 中打开：
- en: '![](img/58656cbf-172b-480f-9415-20dd3f6f6434.png)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/58656cbf-172b-480f-9415-20dd3f6f6434.png)'
- en: MainHandler script in VisualStudio
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio 中的 MainHandler 脚本
- en: 'Start by adding Vuforia''s `UnityEngine.UI` to the libraries:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先向库中添加 Vuforia 的 `UnityEngine.UI`：
- en: '[PRE4]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, add the following variables:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，添加以下变量：
- en: '[PRE5]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: They are all `public` because we will initialize them from the Unity editor.
    They make references to the different scene elements we are going to play with,
    the targets, and the UI elements.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 它们都是 `public` 的，因为我们将从 Unity 编辑器初始化它们。它们引用了我们将要与之交互的不同场景元素，包括目标对象和 UI 元素。
- en: 'Now, add this property *after* the variables:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在变量之后添加此属性：
- en: '[PRE6]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: It's also `public` because we are going to assign it from the editor as well
    when the user presses the Done button.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 它也是 `public` 的，因为当用户按下 Done 按钮时，我们也将从编辑器分配它。
- en: 'Finally, add the following private variable, which is an enumeration to control
    each of the states of the app:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，添加以下私有变量，它是一个枚举，用于控制应用的每个状态：
- en: '[PRE7]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, let''s add some methods *after* the `Update()` method. Create a new method
    called `ShowElements()`:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们在 `Update()` 方法之后添加一些方法。创建一个名为 `ShowElements()` 的新方法：
- en: '[PRE8]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: It will be used privately inside the class to show or hide the different components,
    depending on the state the app is in. This method will also control which markers
    show information in each step.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 它将在类内部私有使用，根据应用的状态显示或隐藏不同的组件。此方法还将控制每个步骤中显示信息的标记。
- en: 'We will create a `switch` call *inside* `ShowElements()`:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在 `ShowElements()` 内部创建一个 `switch` 调用：
- en: '[PRE9]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here, we will tell the method to perform a different action, depending on which
    state the app is in at the time.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将告诉方法根据应用当前处于哪个状态执行不同的操作。
- en: 'Inside the `State.Init` case, add the following:'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `State.Init` 情况下，添加以下内容：
- en: '[PRE10]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here, we are only showing the `targetSide` target. To ensure the user will not
    be able to see the instructions for the other two, we activate only the main message
    and add the text to it.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们只显示`targetSide`目标。为了确保用户无法看到其他两个目标的说明，我们只激活主要信息并添加文本到其中。
- en: 'Inside the `State.Side` case, add the following:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`State.Side`情况中，添加以下内容：
- en: '[PRE11]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: When the user has found the `targetSide` with the camera, we enter this state,
    where we deactivate the main message and show the bottom message.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户使用相机找到`targetSide`时，我们进入此状态，在此状态下，我们停用主要信息并显示底部信息。
- en: 'Inside the `State.Engine` case, add the following:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`State.Engine`情况中，添加以下内容：
- en: '[PRE12]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If the user has touched the red component, we activate the next target and show
    the main message with instructions on how to find it.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户触摸了红色组件，我们将激活下一个目标并显示带有如何找到它的说明的主要信息。
- en: 'Inside the `State.Close` case, add the following:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`State.Close`情况中，添加以下内容：
- en: '[PRE13]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The user has found `targetClose` so we deactivate the previous one and activate
    the next one. We also add a bottom message to open the trunk.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 用户已经找到了`targetClose`，因此我们停用前一个并激活下一个。我们还在底部添加了一条信息以打开树干。
- en: 'Inside the `State.Open` case, add the following:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`State.Open`情况中，添加以下内容：
- en: '[PRE14]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Here, we activate the two buttons: `fileButton` to see the PDF, and `okButton`
    to finish the process.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们激活两个按钮：`fileButton`用于查看PDF，`okButton`用于完成流程。
- en: 'Inside the `State.Plug` case, add the following:'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`State.Plug`情况中，添加以下内容：
- en: '[PRE15]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This is the final step, so we will hide the buttons and targets and only leave
    the end message visible.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最后一步，因此我们将隐藏按钮和目标，只留下结束信息可见。
- en: 'Now, create another method called `NextStep()`:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建另一个名为`NextStep()`的方法：
- en: '[PRE16]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We will call this method to change from one step to the next one.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将调用此方法从一步转换到下一步。
- en: 'Add another method called `ResetInstructions()`:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加另一个名为`ResetInstructions()`的方法：
- en: '[PRE17]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This method is `public` because it will be called from the editor by the Home
    button. It will go to the initial state of the app.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法为`public`，因为它将由编辑器通过Home按钮调用。它将转到应用初始状态。
- en: 'Now, let''s modify the `Start()` method to convert it into a `coroutine` that
    waits until Vuforia is initialized before hiding the second and third targets
    with `ShowElements()`. Otherwise, it might not recognize them:'
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们修改`Start()`方法，将其转换为在隐藏第二个和第三个目标之前等待Vuforia初始化的`coroutine`。否则，它可能无法识别它们：
- en: '[PRE18]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Finally, inside the `Update()` method, enter the logic to change from one step
    to the next one. Thus, the app will jump from one step to the next when the following
    happens:'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在`Update()`方法中，输入从一步到下一步的逻辑转换。因此，当以下情况发生时，应用将从一个步骤跳转到下一个步骤：
- en: In the `Init`, `Engine`, and `Close` states, the app detects the corresponding
    target (side, close, open)
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`Init`、`Engine`和`Close`状态下，应用检测相应的目标（侧面、关闭、打开）
- en: In the `Side` state, the user touches the screen over the engine area of the
    car
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在“Side”状态下，用户触摸屏幕上的汽车引擎区域
- en: 'In the `Open` state, the user has touched the Done button:'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在“Open”状态下，用户触摸了完成按钮：
- en: '[PRE19]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Once we have finished with the script, go back to Unity:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们完成了脚本，回到Unity：
- en: 'Drag the script from the Project window to the ARCamera game object in the
    Hierarchy window. Alternatively, click on the ARCamera and in the Inspector window,
    click Add Component and select the script. Fill in each of the fields in the Main
    Handler script with the elements from our scene:'
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将脚本从项目窗口拖到层次结构窗口中的ARCamera游戏对象。或者，点击ARCamera，在检查器窗口中，点击添加组件并选择脚本。将场景中的元素填写到Main
    Handler脚本中的每个字段：
- en: '![](img/3d103765-8f38-47bc-b18b-10ab70a44987.png)'
  id: totrans-315
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3d103765-8f38-47bc-b18b-10ab70a44987.png)'
- en: Main Handler with its fields in the ARCamera GameObject
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 主处理程序及其在ARCamera游戏对象中的字段
- en: 'Select the Home_button. Then, in the Inspector window, in the On Click () panel,
    add a new event, select the ARCamera, and then select the ResetInstructions()
    method:'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择Home_button。然后，在检查器窗口中，在点击（OnClick）面板中添加一个新事件，选择ARCamera，然后选择ResetInstructions()方法：
- en: '![](img/81e91934-449e-4f96-95b2-186a1a58222a.png)'
  id: totrans-318
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/81e91934-449e-4f96-95b2-186a1a58222a.png)'
- en: On Click () event in the Home_button
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 在“Home_button”的点击（Click）事件中
- en: 'Select the OK_button. Then, in the Inspector window, in the On Click () panel,
    add a new event, select the ARCamera, and then the Finished property. Mark the
    checkbox so that whenever the button is pressed, the Finished property will be
    set to true:'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择OK_button。然后，在检查器窗口中，在点击（OnClick）面板中添加一个新事件，选择ARCamera，然后选择Finished属性。勾选复选框，以便每次按下按钮时，Finished属性都将设置为true：
- en: '![](img/e5e52a05-c001-4463-a6c3-fb4dbeb6dff8.png)'
  id: totrans-321
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e5e52a05-c001-4463-a6c3-fb4dbeb6dff8.png)'
- en: On Click () event in the OK_button
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 在OK_button的OnClick()事件中
- en: Now that we have the main functionalities ready, let's configure the scene so
    that we can build it in the glasses.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好了主要功能，让我们配置场景，以便我们可以在眼镜中构建它。
- en: Configuring the AR for glasses
  id: totrans-324
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置眼镜的AR
- en: This step is an important one so that we understand how the glasses work*.*
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 这个步骤非常重要，这样我们才能了解眼镜的工作原理*.*
- en: If, at this point, we compile the app in the Moverio glasses, we will see the
    video feed over the glasses screens, as if we were using a phone. This is not
    the best way of working with AR; what we want is for the background to remain
    transparent and only the UI elements and AR elements appear over the screens.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在这个时候，我们在Moverio眼镜中编译应用程序，我们将在眼镜屏幕上看到视频流，就像我们使用手机一样。这不是使用AR的最佳方式；我们希望背景保持透明，只有UI元素和AR元素出现在屏幕上。
- en: However, to see the effect and some characteristics of the AR in the glasses,
    we are going to compile the app and then make the relevant modifications.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，为了看到眼镜中AR的效果和某些特性，我们将编译应用程序，然后进行相关修改。
- en: Turn on the Moverio glasses and connect them to your computer via USB.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 打开Moverio眼镜，并通过USB将它们连接到你的电脑。
- en: As you have already defined the settings, switched the platform to Android,
    and added the current scene to the building list in the introduction, just click
    *Ctrl* + *B* or click on File|Build And Run (if you skipped any of these steps,
    or if you are not sure, go to File|Build Settings… and check if everything is
    correct). Give the `.apk` file a name and build it.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你已经定义了设置，切换到Android平台，并在介绍中将当前场景添加到建筑列表中，只需点击*Ctrl* + *B*或点击文件|构建和运行（如果你跳过了任何这些步骤，或者如果你不确定，请转到文件|构建设置…并检查是否一切正常）。给`.apk`文件命名并构建它。
- en: 'As we''ve discussed, you will see the video feed on your glasses, and the UI
    will be larger than expected. For now, forget about the UI and take a look at
    the video feed. If you compare the video feed to the real-world image behind it,
    you will see that the video feed is smaller and slightly displaced compared to
    the real world (take into account that the camera is placed on one side of the
    glasses). The following image shows this displacement (take into account the picture
    is taken only from the left screen of the glasses, so the displacement is even
    greater than when the left- and right-hand sides are combined):'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们讨论的那样，你将在眼镜上看到视频流，UI将比预期的大。现在，先忘记UI，看看视频流。如果你将视频流与背后的真实世界图像进行比较，你会发现视频流比真实世界小，并且略有偏移（考虑到相机放置在眼镜的一侧）。以下图片显示了这种偏移（考虑到图片只从眼镜的左侧屏幕拍摄，所以偏移比左右两侧结合时更大）：
- en: '![](img/e5f9d1b9-1e61-4c2d-a6c5-201fc40f9163.png)'
  id: totrans-331
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e5f9d1b9-1e61-4c2d-a6c5-201fc40f9163.png)'
- en: The AR view from the glasses
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 眼镜的AR视图
- en: We have to take this into account because when we take the video feed out, the
    AR elements will look smaller and displaced on the targets.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须考虑到这一点，因为当我们移除视频流时，AR元素在目标上看起来会更小，并且会有偏移。
- en: 'So, first of all, let''s take the video feedback. This is a very easy step
    in Vuforia as in the latest versions, they have taken it out from the code and
    placed it as a checkbox in the Vuforia Engine configuration. Follow these steps
    to do so:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，首先，让我们获取视频反馈。在Vuforia中这是一个非常简单的步骤，因为在最新版本中，他们已经将其从代码中移除，并将其放置在Vuforia引擎配置中的复选框中。按照以下步骤进行操作：
- en: Select the ARCamera and in the Inspector window, click on Open Vuforia Engine
    configuration.
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择ARCamera并在检查器窗口中点击打开Vuforia引擎配置。
- en: 'In the Video Background component, uncheck Enable video background:'
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在视频背景组件中，取消选中启用视频背景：
- en: '![](img/a7ae644c-1054-4f23-aefa-77642c3c87c2.png)'
  id: totrans-337
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a7ae644c-1054-4f23-aefa-77642c3c87c2.png)'
- en: Disabling the video feed in the Vuforia Engine configuration
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 在Vuforia引擎配置中禁用视频流
- en: And that's it! Build the app again by pressing *Ctrl* + *B* and you will see
    how the video doesn't appear this time and that when you point at the side target
    with the glasses, only the AR element is shown. You will also see how, without
    the video feed, the UI will be of the correct size.
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就这样！通过按*Ctrl* + *B*重新构建应用程序，你会看到这次视频没有出现，当你用眼镜指向侧面目标时，只会显示AR元素。你也会看到，没有视频流，UI的大小是正确的。
- en: Before the Video Background component, there is also a Digital Eyewear component.
    In the beginning, when Vuforia first enabled the AR glasses, the configuration
    of the scene went through this component. However, now, it is only valuable for
    HoloLens users to select the configuration for those glasses.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 在视频背景组件之前，还有一个数字眼镜组件。最初，当 Vuforia 首次启用 AR 眼镜时，场景的配置是通过这个组件进行的。然而，现在，它只对 HoloLens
    用户有价值，以便为这些眼镜选择配置。
- en: 'Finally, let''s make the AR elements match the real elements that can be seen
    through the glasses. Unfortunately, at the moment, there is not an exact method
    to do this. Therefore, we will take the displacement and size parameters out by
    trial and error and apply them to the rest of the elements. For this project,
    those values are as follows:'
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们使 AR 元素与眼镜可以看到的真实元素相匹配。不幸的是，目前还没有一个确切的方法来做这件事。因此，我们将通过试错法取出位移和尺寸参数，并将它们应用到其他元素上。对于这个项目，这些值如下：
- en: 'Displacement: `+0.5f` in the x axis'
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 位移：x 轴上 `+0.5f`
- en: 'Scale: `*2.5` in all axes'
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缩放：所有轴上 `*2.5`
- en: 'Instead of applying them one by one, create a new script called `GlassesHandler.cs`
    in your `@MyAssets/Scripts` folder and open it in Visual Studio. Add the following
    lines *inside* the `Start()` method:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是逐个应用它们，在您的 `@MyAssets/Scripts` 文件夹中创建一个新的脚本，命名为 `GlassesHandler.cs`，并在 Visual
    Studio 中打开它。在 `Start()` 方法内添加以下行：
- en: '[PRE20]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Position, rotation, and scale parameters can't be added directly; an intermediate
    variable has to be used instead.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 位置、旋转和缩放参数不能直接添加；必须使用一个中间变量。
- en: 'Your code should look like this:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 您的代码应该看起来像这样：
- en: '![](img/d5c93256-0063-4fd8-9ac0-35d07159fc27.png)'
  id: totrans-348
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d5c93256-0063-4fd8-9ac0-35d07159fc27.png)'
- en: GlassesHandler script in Visual Studio
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio 中的 GlassesHandler 脚本
- en: Drag this script to the three targets or add it by selecting each target, pressing
    Add Component in the Inspector window, and selecting the script.
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此脚本拖到三个目标之一，或者通过选择每个目标，在检查器窗口中按“添加组件”，然后选择脚本来添加它。
- en: Press *Ctrl* + *B* to build your app and see how the elements now appear over
    the real elements.
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Ctrl* + *B* 构建您的应用程序，并查看元素现在是如何覆盖真实元素的。
- en: To finish our app, we will add the PDF functionality to help the operator with
    their work.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成我们的应用程序，我们将添加 PDF 功能来帮助操作员完成他们的工作。
- en: Adding the PDF file
  id: totrans-353
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加 PDF 文件
- en: PDF files are a slightly difficult task; since Unity doesn't open them internally,
    an external application must be used. In this section, we are going to learn about
    a simple call that we can use for opening the PDF files but that can also be used
    for other types of extensions (such as videos) and opening server files through
    a URL.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: PDF 文件是一个稍微有些困难的任务；由于 Unity 无法内部打开它们，必须使用外部应用程序。在本节中，我们将了解一个简单的调用，我们可以用它来打开
    PDF 文件，但它也可以用于其他类型的扩展（如视频）以及通过 URL 打开服务器文件。
- en: Important! First, you must install an app in the glasses that can open PDF files,
    such as Adobe Reader. Please head to the Moverio website to learn where to find
    and how to install these kinds of applications.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 重要！首先，您必须在眼镜中安装一个可以打开 PDF 文件的程序，例如 Adobe Reader。请访问 Moverio 网站，了解如何找到和安装这些类型的应用程序。
- en: As you may remember, we have not placed the video and PDF files inside the `@MyAssets`
    folder but in the `StreamingAssets/PDF` folder. This folder is a special folder
    inside Unity, and all the files in it are copied verbatim to the destination device,
    meaning they are not processed by Unity at all. We can't load them directly from
    this path, so we will copy them to an accessible path first.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所记得，我们没有将视频和 PDF 文件放置在 `@MyAssets` 文件夹中，而是在 `StreamingAssets/PDF` 文件夹中。这个文件夹是
    Unity 中的一个特殊文件夹，其中的所有文件都将原样复制到目标设备，这意味着它们根本不会被 Unity 处理。我们不能直接从这个路径加载它们，因此我们将首先将它们复制到一个可访问的路径。
- en: 'Go to Visual Studio and in the `MainHandler.cs` script, let''s add some code
    to handle these files. Follow these steps to do so:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 前往 Visual Studio，在 `MainHandler.cs` 脚本中，让我们添加一些代码来处理这些文件。按照以下步骤进行操作：
- en: 'Add the `System.IO` library:'
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `System.IO` 库：
- en: '[PRE21]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Add the following variables at the beginning to indicate the paths of the PDF
    file inside the device:'
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在开始处添加以下变量，以指示设备内 PDF 文件的路径：
- en: '[PRE22]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Initialize them *inside* the `Start()` method:'
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Start()` 方法内初始化它们：
- en: '[PRE23]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Add the following `coroutine`, which copies the PDF file from the `StreamingAssets`
    location to an accessible path and opens it:'
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下 `coroutine`，它将 PDF 文件从 `StreamingAssets` 位置复制到可访问的路径并打开：
- en: '[PRE24]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Finally, add the following `public` method to open the PDF file:'
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，添加以下 `public` 方法来打开 PDF 文件：
- en: '[PRE25]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: If the file already exists in an accessible location, it opens it. Otherwise,
    it copies first and opens it from the coroutine.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文件已存在于可访问的位置，它将打开它。否则，它将首先复制，然后从协程中打开它。
- en: '`Application.OpenURL()` opens the given path, regardless of whether it''s a
    URL or an internal path.'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '`Application.OpenURL()`无论给定路径是URL还是内部路径，都会打开它。'
- en: 'Back in Unity editor, select the File_button, and in the Inspector window,
    add the OpenPDFfile() call to its On Click () event:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity编辑器中，选择文件按钮，然后在检查器窗口中，将OpenPDFfile()调用添加到其OnClick()事件中：
- en: '![](img/3455961d-a978-4328-99ea-d6400134df4f.png)'
  id: totrans-371
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3455961d-a978-4328-99ea-d6400134df4f.png)'
- en: On Click () event in the File_button
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 文件按钮的OnClick()事件
- en: Press *Ctrl* + *B* one last time to see the full app in the glasses.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 最后再按一次*Ctrl* + *B*，以在眼镜中查看完整的应用程序。
- en: Summary
  id: totrans-374
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you have learned about another of Vuforia's features, `ImageTargets`*,*
    and how to create your own image target and add virtual content to it. You have
    also learned about how to work with the Unity interface and scripts in order to
    create messages and buttons, as well as sequenced instructions.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了Vuforia的另一个功能，`ImageTargets`*，以及如何创建自己的图像目标并向其添加虚拟内容。你还学习了如何使用Unity界面和脚本来创建消息和按钮，以及顺序指令。
- en: With all this, you have acquired the skills you need to use Vuforia to create
    an industrial AR guide that can be implemented in mounting, maintenance, or training
    processes. You have also learned how to customize a step with extra PDF or even
    video and data files that have been taken either locally (like in this project)
    or from a remote server by using the OpenURL method with a URL inside it.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 通过所有这些，你已经掌握了使用Vuforia创建可实施于安装、维护或培训流程的工业AR指南所需的技能。你还学会了如何使用OpenURL方法，其中包含URL，通过它来定制步骤，甚至添加额外的PDF或视频和数据文件，这些文件可以是本地获取的（如本项目所示）或从远程服务器获取的。
- en: Now, you can use this knowledge to create your own guide for your processes
    and use the current project as a template for it. You can also improve and extend
    it by using real-life pictures, linking some of the steps to your instruction
    PDF files or triggering the change from one step to another using signals or information
    coming from your servers.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以利用这些知识来创建你自己的流程指南，并将当前项目作为模板。你也可以通过使用现实生活中的图片，将一些步骤链接到你的指令PDF文件，或者使用来自服务器的信号或信息触发从一步到另一步的变化来改进和扩展它。
- en: As you have seen, the project is also easily deployed in mobile devices, and
    from here, you can try to migrate it to other types of glasses and see the results.
    You have also acquired the skills to try the rest of the Vuforia examples, which
    can be found in the Unity Asset Store, which has been published by PTC: [https://assetstore.unity.com/publishers/24484](https://assetstore.unity.com/publishers/24484).
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，该项目也易于在移动设备上部署，从这里，你可以尝试将其迁移到其他类型的眼镜上，看看结果。你也已经掌握了尝试其他Vuforia示例的技能，这些示例可以在Unity
    Asset Store中找到，由PTC发布：[https://assetstore.unity.com/publishers/24484](https://assetstore.unity.com/publishers/24484)。
- en: In the next chapter, we will completely change the scope and learn how to create
    an AR portal to transport the user into a virtual 3D world with ARKit for the
    tourism sector.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将完全改变范围，学习如何使用ARKit为旅游行业创建一个AR门户，将用户带入一个虚拟的3D世界。
