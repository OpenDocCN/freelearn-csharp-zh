["```cs\ndotnet new grpc -o GrpcDemo\n```", "```cs\nsyntax = \"proto3\";option csharp_namespace = \"GrpcDemo\";\npackage greet;\n// The greeting service definition.\nservice Greeter {\n  // Sends a greeting\n  rpc SayHello (HelloRequest) returns (HelloReply);\n}\n// The request message containing the user's name.\nmessage HelloRequest {\n  string name = 1;\n}\n// The response message containing the greetings.\nmessage HelloReply {\n  string message = 1;\n}\n```", "```cs\n<ItemGroup>  <Protobuf Include=\"Protos\\greet.proto\" GrpcServices=\"Server\" />\n</ItemGroup>\n<ItemGroup>\n  <PackageReference Include=\"Grpc.AspNetCore\" Version=\"2.51.0\" />\n  <PackageReference Include=\"Google.Protobuf\" Version=\"3.22.0-rc2\" />\n</ItemGroup>\n```", "```cs\npublic class GreeterService(ILogger<GreeterService> logger) : Greeter.GreeterBase{\n    public override Task<HelloReply> SayHello(HelloRequest request, ServerCallContext context)\n    {\n        return Task.FromResult(new HelloReply\n        {\n            Message = \"Hello \" + request.Name\n        });\n    }\n}\n```", "```cs\n  #region Messages  /// <summary>\n  /// The request message containing the user's name.\n  /// </summary>\n  public sealed partial class HelloRequest : pb::IMessage<HelloRequest>\n  {\n    private static readonly pb::MessageParser<HelloRequest> _parser = new pb::MessageParser<HelloRequest>(() => new HelloRequest());\n    // Omitted for brevity\n    public HelloRequest() {\n      OnConstruction();\n    }\n    // Omitted for brevity\n    /// <summary>Field number for the \"name\" field.</summary>\n    public const int NameFieldNumber = 1;\n    private string name_ = \"\";\n    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]\n    [global::System.CodeDom.Compiler.GeneratedCode(\"protoc\", null)]\n    public string Name {\n      get { return name_; }\n      set {\n        name_ = pb::ProtoPreconditions.CheckNotNull(value, \"value\");\n      }\n    }\n    // Omitted for brevity\n  }\n```", "```cs\n/// <summary>Base class for server-side implementations of Greeter</summary>[grpc::BindServiceMethod(typeof(Greeter), \"BindService\")]\npublic abstract partial class GreeterBase\n{\n  /// <summary>\n  /// Sends a greeting\n  /// </summary>\n  /// <param name=\"request\">The request received from the client.</param>\n  /// <param name=\"context\">The context of the server-side call handler being invoked.</param>\n  /// <returns>The response to send back to the client (wrapped by a task).</returns>\n  [global::System.CodeDom.Compiler.GeneratedCode(\"grpc_csharp_plugin\", null)]\n  public virtual global::System.Threading.Tasks.Task<global::GrpcDemo.HelloReply> SayHello(global::GrpcDemo.HelloRequest request, grpc::ServerCallContext context)\n  {\n    throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, \"\"));\n  }\n}\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);// Add services to the container.\nbuilder.Services.AddGrpc();\nvar app = builder.Build();\n// Configure the HTTP request pipeline.\napp.MapGrpcService<GreeterService>();\n```", "```cs\napp.MapGet(\"/\", () => \"Communication with gRPC endpoints must be made through a gRPC client. To learn how to create a client, visit: https://go.microsoft.com/fwlink/?linkid=2086909\");\n```", "```cs\nmessage HelloRequest {  string name = 1;\n  string address = 2;\n}\n```", "```cs\n<ItemGroup>  <Protobuf Include=\"Protos\\greet.proto\" GrpcServices=\"Server\" OutputDir=\"Generated\" />\n</ItemGroup>\n```", "```cs\nsyntax = \"proto3\";option csharp_namespace = \"MyApp.Namespace\";\n```", "```cs\n<Protobuf Include=\"Protos\\invoice.proto\" GrpcServices=\"Server\"  OutputDir=\"Generated\"/>\n```", "```cs\nmessage CreateAddressRequest {  string street = 1;\n  string city = 2;\n  string state = 3;\n  string zip_code = 4;\n  string country = 5;\n}\n```", "```cs\n<address>  <street>1 Fake Street</street>\n  <city>Wellington</city>\n  <state>Wellington</state>\n  <zip_code>6011</zip_code>\n  <country>New Zealand</country>\n</address>\n```", "```cs\n{  \"street\": \"1 Fake Street\",\n  \"city\": \"Wellington\",\n  \"state\": \"Wellington\",\n  \"zip_code\": \"6011\",\n  \"country\": \"New Zealand\"\n}\n```", "```cs\nmessage CreateContactRequest {  string first_name = 1;\n  string last_name = 2;\n  string email = 3;\n  string phone = 4;\n  int32 year_of_birth = 5;\n  bool is_active = 6;\n}\n```", "```cs\npublic sealed partial class CreateContactRequest : pb::IMessage<CreateContactRequest>{\n    private string firstName_ = \"\";\n    public string FirstName {\n      get { return firstName_; }\n      set {\n        firstName_ = pb::ProtoPreconditions.CheckNotNull(value, \"value\");\n      }\n    }\n    private string lastName_ = \"\";\n    public string LastName {\n      get { return lastName_; }\n      set {\n        lastName_ = pb::ProtoPreconditions.CheckNotNull(value, \"value\");\n      }\n    }\n    private string email_ = \"\";\n    public string Email {\n      get { return email_; }\n      set {\n        email_ = pb::ProtoPreconditions.CheckNotNull(value, \"value\");\n      }\n    }\n    private string phone_ = \"\";\n    public string Phone {\n      get { return phone_; }\n      set {\n        phone_ = pb::ProtoPreconditions.CheckNotNull(value, \"value\");\n      }\n    }\n    private int yearOfBirth_;\n    public int YearOfBirth {\n      get { return yearOfBirth_; }\n      set {\n        yearOfBirth_ = value;\n      }\n    }\n    private bool isActive_;\n    public bool IsActive {\n      get { return isActive_; }\n      set {\n        isActive_ = value;\n      }\n    }\n}\n```", "```cs\nsyntax = \"proto3\";import \"google/protobuf/timestamp.proto\";\nimport \"google/protobuf/duration.proto\";\nmessage UpdateInvoiceDueDateRequest {\n  string invoice_id = 1;\n  google.protobuf.Timestamp due_date = 2;\n  google.protobuf.Duration grace_period = 3;\n}\n```", "```cs\npublic const int DueDateFieldNumber = 2;private global::Google.Protobuf.WellKnownTypes.Timestamp dueDate_;\npublic global::Google.Protobuf.WellKnownTypes.Timestamp DueDate {\n  get { return dueDate_; }\n  set {\n    dueDate_ = value;\n  }\n}\npublic const int GracePeriodFieldNumber = 3;\nprivate global::Google.Protobuf.WellKnownTypes.Duration gracePeriod_;\npublic global::Google.Protobuf.WellKnownTypes.Duration GracePeriod {\n  get { return gracePeriod_; }\n  set {\n    gracePeriod_ = value;\n  }\n}\n```", "```cs\nvar updateInvoiceDueDateRequest = new UpdateInvoiceDueDateRequest{\n    InvoiceId = Guid.Parse(\"3193C36C-2AAB-49A7-A0B1-6BDB3B69DEA1\"),\n    DueDate = Timestamp.FromDateTime(DateTime.UtcNow.AddDays(30)),\n    GracePeriod = Duration.FromTimeSpan(TimeSpan.FromDays(10))\n};\n```", "```cs\nvar dueDate = updateInvoiceDueDateRequest.DueDate.ToDateTime();var gracePeriod = updateInvoiceDueDateRequest.GracePeriod.ToTimeSpan();\n```", "```cs\n// Example: 12345.6789 -> { units = 12345, nanos = 678900000 }message DecimalValue {\n    // Whole units part of the amount\n    int64 units = 1;\n    // Nano units of the amount (10^-9)\n    // Must be same sign as units\n    sfixed32 nanos = 2;\n}\n```", "```cs\nenum InvoiceStatus {  INVOICE_STATUS_UNKNOWN = 0;\n  INVOICE_STATUS_DRAFT = 1;\n  INVOICE_STATUS_AWAIT_PAYMENT = 2;\n  INVOICE_STATUS_PAID = 3;\n  INVOICE_STATUS_OVERDUE = 4;\n  INVOICE_STATUS_CANCELLED = 5;\n}\n```", "```cs\npublic enum InvoiceStatus {  [pbr::OriginalName(\"INVOICE_STATUS_UNKNOWN\")] Unknown = 0,\n  [pbr::OriginalName(\"INVOICE_STATUS_DRAFT\")] Draft = 1,\n  [pbr::OriginalName(\"INVOICESTATUS_AWAIT_PAYMENT\")] AwaitPayment = 2,\n  [pbr::OriginalName(\"INVOICE_STATUS_PAID\")] Paid = 3,\n  [pbr::OriginalName(\"INVOICE_STATUS_OVERDUE\")] Overdue = 4,\n}\n```", "```cs\nsyntax = \"proto3\";import \"google/protobuf/wrappers.proto\";\nmessage AddInvoiceItemRequest {\n  string name = 1;\n  string description = 2;\n  google.protobuf.DoubleValue unit_price = 3;\n  google.protobuf.Int32Value quantity = 4;\n  google.protobuf.BoolValue is_taxable = 5;\n}\n```", "```cs\nprivate double? unitPrice_;public double? UnitPrice {\n  get { return unitPrice_; }\n  set {\n    unitPrice_ = value;\n  }\n}\nprivate int? quantity_;\npublic int? Quantity {\n  get { return quantity_; }\n  set {\n    quantity_ = value;\n  }\n}\nprivate bool? isTaxable_;\npublic bool? IsTaxable {\n  get { return isTaxable_; }\n  set {\n    isTaxable_ = value;\n  }\n}\n```", "```cs\nmessage UpdateBatchInvoicesStatusRequest {  repeated string invoice_ids = 1;\n  InvoiceStatus status = 2;\n}\n```", "```cs\nprivate readonly pbc::RepeatedField<string> invoiceIds_ = new pbc::RepeatedField<string>();public pbc::RepeatedField<string> InvoiceIds {\n  get { return invoiceIds_; }\n}\n```", "```cs\npublic sealed class RepeatedField<T> : IList<T>, ICollection<T>, IEnumerable<T>, IEnumerable, IList, ICollection, IDeepCloneable<RepeatedField<T>>, IEquatable<RepeatedField<T>>, IReadOnlyList<T>, IReadOnlyCollection<T>{\n  // Omitted for brevity\n}\n```", "```cs\nvar updateInvoicesStatusRequest = new UpdateBatchInvoicesStatusRequest();// Add one item\nupdateInvoicesStatusRequest.InvoiceIds.Add(\"3193C36C-2AAB-49A7-A0B1-6BDB3B69DEA1\");\n// Add multiple items\nupdateInvoicesStatusRequest.InvoiceIds.Add(new[]\n            { \"99143291-2523-4EE8-8A4D-27B09334C980\", \"BB4E6CFE-6AAE-4948-941A-26D1FBF59E8A\" });\n```", "```cs\nmessage UpdateInvoicesStatusRequest {  map<string, InvoiceStatus> invoice_status_map = 1;\n}\n```", "```cs\nprivate readonly pbc::MapField<string, global::GrpcDemo.InvoiceStatus> invoiceStatusMap_ = newpbc::MapField<string, global::GrpcDemo.InvoiceStatus>();public pbc::MapField<string, global::GrpcDemo.InvoiceStatus> InvoiceStatusMap {\n  get { return invoiceStatusMap_; }\n}\n```", "```cs\npublic sealed class MapField<TKey, TValue> : IDeepCloneable<MapField<TKey, TValue>>, IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable, IEquatable<MapField<TKey, TValue>>, IDictionary, ICollection, IReadOnlyDictionary<TKey, TValue>, IReadOnlyCollection<KeyValuePair<TKey, TValue>>{\n  // Omitted for brevity\n}\n```", "```cs\nvar updateInvoicesStatusRequest = new UpdateInvoicesStatusRequest();// Add one key-value pair\nupdateInvoicesStatusRequest.InvoiceStatusMap.Add(\"3193C36C-2AAB-49A7-A0B1-6BDB3B69DEA1\", InvoiceStatus.AwaitPayment);\n// Add multiple key-value pairs\nupdateInvoicesStatusRequest.InvoiceStatusMap.Add(new Dictionary<string, InvoiceStatus>\n{\n    { \"99143291-2523-4EE8-8A4D-27B09334C980\", InvoiceStatus.Paid },\n    { \"BB4E6CFE-6AAE-4948-941A-26D1FBF59E8A\", InvoiceStatus.Overdue }\n});\n```", "```cs\nmessage CreateContactRequest {  string first_name = 1;\n  string last_name = 2;\n  string email = 3;\n  string phone = 4;\n  int32 year_of_birth = 5;\n  bool is_active = 6;\n}\nmessage CreateContactResponse {\n  string contact_id = 1;\n}\nservice ContactService {\n  rpc CreateContact(CreateContactRequest) returns (CreateContactResponse);\n}\n```", "```cs\npublic abstract partial class ContactServiceBase{\n  public virtual global::System.Threading.Tasks.Task<global::GrpcDemo.CreateContactResponse> CreateContact(global::GrpcDemo.CreateContactRequest request, grpc::ServerCallContext context)\n  {\n    throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, \"\"));\n  }\n}\n```", "```cs\npublic class ContactService(ILogger<ContactService> logger) : Contact.ContactBase{\n    public override Task<CreateContactResponse> CreateContact(CreateContactRequest request, ServerCallContext context)\n    {\n        // TODO: Save contact to database\n        return Task.FromResult(new CreateContactResponse\n        {\n            ContactId = Guid.NewGuid().ToString()\n        });\n    }\n}\n```", "```cs\napp.MapGrpcService<ContactService>();\n```", "```cs\n    dotnet new console -o GrpcDemo.Client\n    ```", "```cs\n    dotnet new sln -n GrpcDemo\n    ```", "```cs\n    GrpcDemo.Client folder and add the Grpc.Net.Client package to the project:\n\n    ```", "```cs\n\n    ```", "```cs\n    Grpc.Tools package contains code-generation tooling for gRPC. It is a development-time dependency, which means that it is not required at runtime. So, we need to add the <PrivateAssets>all</PrivateAssets> element to the Grpc.Tools package to ensure that the package is not included in the published application.\n    ```", "```cs\n    <ItemGroup>  <Protobuf Include=\"Protos\\greet.proto\" GrpcServices=\"Client\" OutputDir=\"Generated\"/>  <Protobuf Include=\"Protos\\invoice.proto\" GrpcServices=\"Client\"  OutputDir=\"Generated\"/>  <Protobuf Include=\"Protos\\demo.proto\" GrpcServices=\"Client\"  OutputDir=\"Generated\"/></ItemGroup>\n    ```", "```cs\n    using Grpc.Net.Client;namespace GrpcDemo.Client;internal class InvoiceClient{    public async Task CreateContactAsync()    {        using var channel = GrpcChannel.ForAddress(\"http://localhost:5269\");        var client = new Contact.ContactClient(channel);        var reply = await client.CreateContactAsync(new CreateContactRequest()        {            Email = \"john.doe@abc.com\",            FirstName = \"John\",            LastName = \"Doe\",            IsActive = true,            Phone = \"1234567890\",            YearOfBirth = 1980        });        Console.WriteLine(\"Created Contact: \" + reply.ContactId);        Console.ReadKey();    }}\n    ```", "```cs\n    info: Microsoft.Hosting.Lifetime[14]      Now listening on: http://localhost:5269info: Microsoft.Hosting.Lifetime[0]      Application started. Press Ctrl+C to shut down.info: Microsoft.Hosting.Lifetime[0]      Hosting environment: Development\n    ```", "```cs\n    {  \"$schema\": \"http://json.schemastore.org/launchsettings.json\",  \"profiles\": {    \"http\": {      ...      \"applicationUrl\": \"http://localhost:5269\",      ...    },    \"https\": {      ...      \"applicationUrl\": \"https://localhost:7179;http://localhost:5269\",      ...    }  }}\n    ```", "```cs\n    dotnet run --urls=https://localhost:7179\n    ```", "```cs\n    Program.cs file, call the CreateContactAsync() method, as follows:\n\n    ```", "```cs\n\n    ```", "```cs\n    Created Contact: 3193c36c-2aab-49a7-a0b1-6bdb3b69dea1\n    ```", "```cs\nmessage GetRandomNumbersRequest {  int32 min = 1;\n  int32 max = 2;\n  int32 count = 3;\n}\nmessage GetRandomNumbersResponse {\n  int32 number = 1;\n}\nservice RandomNumbers {\n  rpc GetRandomNumbers(GetRandomNumbersRequest) returns (stream GetRandomNumbersResponse);\n}\n```", "```cs\n[grpc::BindServiceMethod(typeof(RandomNumbers), \"BindService\")]public abstract partial class RandomNumbersBase\n{\n  [global::System.CodeDom.Compiler.GeneratedCode(\"grpc_csharp_plugin\", null)]\n  public virtual global::System.Threading.Tasks.Task GetRandomNumbers(global::GrpcDemo.GetRandomNumbersRequest request, grpc::IServerStreamWriter<global::GrpcDemo.GetRandomNumbersResponse> responseStream, grpc::ServerCallContext context)\n  {\n    throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, \"\"));\n  }\n}\n```", "```cs\n    public class RandomNumbersService(ILogger<RandomNumbersService> logger) : RandomNumbers.RandomNumbersBase{    public override async Task GetRandomNumbers(GetRandomNumbersRequest request,        IServerStreamWriter<GetRandomNumbersResponse> responseStream, ServerCallContext context)    {        var random = new Random();        for (var i = 0; i < request.Count; i++)        {            await responseStream.WriteAsync(new GetRandomNumbersResponse            {                Number = random.Next(request.Min, request.Max)            });            await Task.Delay(1000);        }    }}\n    ```", "```cs\n    public override async Task GetRandomNumbers(GetRandomNumbersRequest request,    IServerStreamWriter<GetRandomNumbersResponse> responseStream, ServerCallContext context){    var random = new Random();    while (!context.CancellationToken.IsCancellationRequested)    {        await responseStream.WriteAsync(new GetRandomNumbersResponse        {            Number = random.Next(request.Min, request.Max)        });        await Task.Delay(1000, context.CancellationToken);    }}\n    ```", "```cs\n    app.MapGrpcService<RandomNumbersService>();\n    ```", "```cs\n    internal class ServerStreamingClient{    public async Task GetRandomNumbers()    {        using var channel = GrpcChannel.ForAddress(\"https://localhost:7179\");        var client = new RandomNumbers.RandomNumbersClient(channel);        var reply = client.GetRandomNumbers(new GetRandomNumbersRequest()        {            Count = 100,            Max = 100,            Min = 1        });        await foreach (var number in reply.ResponseStream.ReadAllAsync())        {            Console.WriteLine(number.Number);        }        Console.ReadKey();    }}\n    ```", "```cs\n    var serverStreamingClient = new ServerStreamingClient();await serverStreamingClient.GetRandomNumbers();\n    ```", "```cs\nmessage SendRandomNumbersRequest {  int32 number = 1;\n}\nmessage SendRandomNumbersResponse {\n  int32 count = 1;\n  int32 sum = 2;\n}\nservice RandomNumbers {\n  rpc SendRandomNumbers(stream SendRandomNumbersRequest) returns (SendRandomNumbersResponse);\n}\n```", "```cs\npublic override async Task<SendRandomNumbersResponse> SendRandomNumbers(IAsyncStreamReader<SendRandomNumbersRequest> requestStream, ServerCallContext context){\n    var count = 0;\n    var sum = 0;\n    await foreach (var request in requestStream.ReadAllAsync())\n    {\n        _logger.LogInformation($\"Received: {request.Number}\");\n        count++;\n        sum += request.Number;\n    }\n    return new SendRandomNumbersResponse\n    {\n        Count = count,\n        Sum = sum\n    };\n}\n```", "```cs\ninternal class ClientStreamingClient{\n    public async Task SendRandomNumbers()\n    {\n        using var channel = GrpcChannel.ForAddress(\"https://localhost:7179\");\n        var client = new RandomNumbers.RandomNumbersClient(channel);\n        // Create a streaming request\n        using var clientStreamingCall = client.SendRandomNumbers();\n        var random = new Random();\n        for (var i = 0; i < 20; i++)\n        {\n            await clientStreamingCall.RequestStream.WriteAsync(new SendRandomNumbersRequest\n            {\n                Number = random.Next(1, 100)\n            });\n            await Task.Delay(1000);\n        }\n        await clientStreamingCall.RequestStream.CompleteAsync();\n        // Get the response\n        var response = await clientStreamingCall;\n        Console.WriteLine($\"Count: {response.Count}, Sum: {response.Sum}\");\n        Console.ReadKey();\n    }\n}\n```", "```cs\nvar clientStreamingClient = new ClientStreamingClient();await clientStreamingClient.SendRandomNumbers();\n```", "```cs\nCount: 20, Sum: 1000\n```", "```cs\nmessage ChatMessage {  string sender = 1;\n  string message = 1;\n}\nservice Chat {\n  rpc SendMessage(stream ChatMessage) returns (stream ChatMessage);\n}\n```", "```cs\n    public class ChatService(ILogger<ChatService> logger) : Chat.ChatBase{    public override async Task SendMessage(IAsyncStreamReader<ChatMessage> requestStream, IServerStreamWriter<ChatMessage> responseStream, ServerCallContext context)    {        await foreach (var request in requestStream.ReadAllAsync())        {            logger.LogInformation($\"Received: {request.Message}\");            await responseStream.WriteAsync(new ChatMessage            {                Message = $\"You said: {request.Message.ToUpper()}\"            });        }    }}\n    ```", "```cs\n    GrpcDemo project to the GrpcDemo.Client project. Then, create a BidirectionalStreamingClient class in the GrpcDemo.Client project and add the following code:\n\n    ```", "```cs\n\n    Because we use a console application to call the bidirectional streaming service, we need to use a background task to read the stream response messages. The `ReadAllAsync()` method returns an `IAsyncEnumerable<T>` object, which can be iterated over using the `await foreach` statement. In the background task, we use the `await foreach` statement to iterate over the stream response messages and print them to the console.Additionally, we use a `while` loop to read the input from the console and send the stream request messages to the server in the main thread. The `while` loop ends when the user enters an empty string. At the end of the method, we call the `RequestStream.CompleteAsync()` method to indicate that the stream request message is complete so that the server can finish processing the stream request messages gracefully.\n    ```", "```cs\n    var bidirectionalStreamingClient = new BidirectionalStreamingClient();await bidirectionalStreamingClient.SendMessage();\n    ```", "```cs\n    Hello, World!Starting background task to receive messages...Starting to send messages...Input your message then press enter to send it.How are you?You said: HOW ARE YOU?What is ASP.NET Core?You said: WHAT IS ASP.NET CORE?Disconnecting...\n    ```", "```cs\nusing var channel = GrpcChannel.ForAddress(\"https://localhost:7179\");var client = new Contact.ContactClient(channel);\n```", "```cs\n    dotnet new webapi -o GrpcDemo.Api -controllers\n    ```", "```cs\n    Grpc.Net.ClientFactory and Grpc.Tools packages to the project:\n\n    ```", "```cs\n\n    ```", "```cs\n    <ItemGroup>  <Protobuf Include=\"Protos\\greet.proto\" GrpcServices=\"Client\" OutputDir=\"Generated\"/>  <Protobuf Include=\"Protos\\invoice.proto\" GrpcServices=\"Client\"  OutputDir=\"Generated\"/>  <Protobuf Include=\"Protos\\demo.proto\" GrpcServices=\"Client\"  OutputDir=\"Generated\"/></ItemGroup>\n    ```", "```cs\n    ContactController.cs file in the Controllers folder and add the following code:\n\n    ```", "```cs\n\n    In the `ContactController` class, we use dependency injection to inject the gRPC client, `ContactClient`, which is generated from the `demo.proto` file. Then, we create a `CreateContact` action method to call the `CreateContactAsync()` method of the `ContactClient` class. The `CreateContactAsync()` method accepts a `CreateContactRequest` object as the parameter, which is also generated from the proto file. The `CreateContactAsync()` method returns a `CreateContactResponse` object, which contains the `ContactId` value. At the end of the method, we return the `ContactId` value to the client.\n    ```", "```cs\n    {  \"firstName\": \"John\",  \"lastName\": \"Doe\",  \"email\": \"john.doe@example.com\",  \"phone\": \"1234567890\",  \"yearOfBirth\": 1980,  \"isActive\": true}\n    ```", "```cs\n    {  \"contactId\": \"8fb43c22-143f-4131-a5f5-c3700b4f3a08\"}\n    ```", "```cs\nmessage CreateContactRequest {  reserved 5, 6;\n  reserved \"year_of_birth\", \"is_active\";\n  string first_name = 1;\n  string last_name = 2;\n  string email = 3;\n  string phone = 4;\n}\n```"]