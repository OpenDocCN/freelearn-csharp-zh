- en: '*Chapter 10*: Debugging Multithreaded Applications with Visual Studio'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visual Studio 2022 is the latest version of Visual Studio on Mac and Windows.
    In this chapter, we are going to learn how to leverage the power of Visual Studio
    when debugging multithreaded .NET applications.
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio provides several extremely useful tools for developers who need
    to debug parallel and concurrent .NET applications. This chapter will explore
    the tools in detail through concrete examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing multithreaded debugging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging threads and processes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Switching and flagging threads
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging a parallel application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have the tools and knowledge you need to
    debug threading issues in your parallel and concurrent C# code.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To follow along with the examples in this chapter, the following software is
    recommended for Windows developers:'
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio 2022 version 17.2 or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: .NET 6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To complete any WinForms or WPF samples, you will need to install the .NET desktop
    development workload for Visual Studio. These projects will run only on Windows.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the code examples for this chapter can be found on GitHub at [https://github.com/PacktPublishing/Parallel-Programming-and-Concurrency-with-C-sharp-10-and-.NET-6/tree/main/chapter10](https://github.com/PacktPublishing/Parallel-Programming-and-Concurrency-with-C-sharp-10-and-.NET-6/tree/main/chapter10).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'The concepts and tools in this chapter only work with Visual Studio on Windows.
    If you are building .NET applications on a Mac, the **Rider** IDE from JetBrains
    provides several tools for multithreaded debugging – a **Threads** pane, a **Frames**
    view to view frames on a selected thread, and a **Parallel Stacks** pane. Visual
    Studio for Mac doesn’t have this kind of support for debugging multithreaded applications
    yet. You can read more about JetBrains Rider’s multithreaded debugging in their
    documentation: https://www.jetbrains.com/help/rider/Debugging_Multithreaded_Applications.xhtml.
    Debugging on a Mac is beyond the scope of this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get started by learning some basics of multithreaded debugging with Visual
    Studio 2022.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing multithreaded debugging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Debugging is a key component of every .NET developer’s skillset. Nobody ever
    writes bug-free code and introducing multithreaded constructs to your project
    only increases the chances of introducing bugs. As .NET and C# have added more
    support for parallel programming and concurrency, Visual Studio has added more
    debugging features to support those constructs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Today, Visual Studio provides the following multithreaded debugging features
    for the modern .NET developer:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Threads**: This window shows a list of the threads that are used by your
    application while debugging. It also indicates which thread is active when it
    stopped at a breakpoint in your code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Parallel Stacks**: This window allows developers to visualize the call stacks
    for each thread in their application in a single view. Selecting a thread in the
    window will display call stack information for the selected thread in the **Call
    Stack** window.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Parallel Watch**: This window works like the **Watch** window, except that
    you can see the value of a watch expression on each active thread in the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Debug Location**: This toolbar allows you to narrow your focus while debugging
    multithreaded applications. It has fields to select a **Process**, **Thread**,
    and **Stack Frame**. There are also buttons on the toolbar so that you can **Flag**
    and **Unflag** threads to be monitored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tasks**: This window displays each running task in the application and provides
    information about the thread that is running the task, the state of the task,
    and its call stack. You can also see the starting point for each task (the method
    or delegate that was passed to the task to be run).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Attach to Process**: This window allows you to attach the Visual Studio debugger
    to a process on the local machine or a remote machine. **Remote debugging** can
    be useful when working with multithreaded UI applications. It allows developers
    to debug their applications on systems with different numbers of processor cores
    than what’s on their machines. They can also attach to a remote process running
    on a system running other processes that will be present in a production environment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GPU Threads**: This window displays information about threads running on
    the GPU. This is used for C++ applications and is beyond the scope of this book.
    To learn more, you can read the documentation from Microsoft: [https://docs.microsoft.com/visualstudio/debugger/how-to-use-the-gpu-threads-window](https://docs.microsoft.com/visualstudio/debugger/how-to-use-the-gpu-threads-window).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the sections ahead, we will use these debugging tools to step through multithreaded
    code in projects from some of the previous chapters of this book. Let’s start
    by learning about the **Threads** and **Attach to Process** windows and the **Debug
    Location** toolbar.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging threads and processes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to debug **BackgroundPingConsoleApp** from [*Chapter
    1*](B18552_01_ePub.xhtml#_idTextAnchor014). You can use your completed project
    from [*Chapter 1*](B18552_01_ePub.xhtml#_idTextAnchor014) or get the project from
    this chapter’s GitHub repository: [https://github.com/PacktPublishing/Parallel-Programming-and-Concurrency-with-C-sharp-10-and-.NET-6/tree/main/chapter10](https://github.com/PacktPublishing/Parallel-Programming-and-Concurrency-with-C-sharp-10-and-.NET-6/tree/main/chapter10).
    We will debug the application and discover some of the features of the **Debug
    Location** toolbar and the **Threads** window as we go.'
  prefs: []
  type: TYPE_NORMAL
- en: Debugging a project with multiple threads
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The project we’ll be working this is a simple one that creates one background
    thread to check whether the network is available.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'The examples in this chapter will be run in the **Debug** configuration in
    Visual Studio. When you compile and run a .NET project, you can choose to run
    a **Debug** or **Release** build. While debugging, you will want to select **Debug**
    mode so that the project compiles w the symbolic debug information. This is not
    included in a **Release** build. For more information about build configurations,
    check out Microsoft Docs: https://docs.microsoft.com/visualstudio/ide/understanding-build-configurations.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s get started with our debugging example:'
  prefs: []
  type: TYPE_NORMAL
- en: Start by opening `Program.cs` in the C# editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set a breakpoint on the `Thread.Sleep(100)` statement inside the `while` loop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select **View** | **Toolbars** | **Debug Location** to display the **Debug
    Location** toolbar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.1 – The Debug Location toolbar in Visual Studio ](img/Figure_10.1_B18552.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.1 – The Debug Location toolbar in Visual Studio
  prefs: []
  type: TYPE_NORMAL
- en: We will be using this toolbar when we start debugging. All the fields are disabled
    when there is no active debugging session in Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start debugging the project. When Visual Studio breaks at your breakpoint,
    notice the state of the **Debug Location** toolbar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.2 – Debugging with the Debug Location toolbar ](img/Figure_10.2_B18552.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.2 – Debugging with the Debug Location toolbar
  prefs: []
  type: TYPE_NORMAL
- en: The toolbar provides several dropdown controls to select the **Process**, **Thread**,
    and **Stack Frame** properties in scope. The **Process** dropdown will only contain
    a single process unless you explicitly debug multiple processes with the **Attach
    to Process** window. You can also set up multiple startup projects in Visual Studio
    to achieve this.
  prefs: []
  type: TYPE_NORMAL
- en: The **Threads** dropdown contains all the threads that belong to the selected
    process. The selected thread in this control is the background thread we created
    because the breakpoint was added within the code executed by that background thread.
  prefs: []
  type: TYPE_NORMAL
- en: The **Stack Frame** dropdown contains the list of frames in the current thread’s
    call stack.
  prefs: []
  type: TYPE_NORMAL
- en: There is a **Toggle Current Thread Flagged State** button to the right of the
    **Threads** dropdown. We will learn about flagging threads later in the *Switching
    and flagging threads* section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, select **Debug** | **Windows** | **Threads** to open the **Threads**
    window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.3 – Debugging with the Threads window active ](img/Figure_10.3_B18552.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.3 – Debugging with the Threads window active
  prefs: []
  type: TYPE_NORMAL
- en: By default, the **Threads** window will open in the lower-left panel with the
    **Output**, **Locals**, and **Watch** debugging windows.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, expand the **Threads** window so that we can explore and discuss its
    features:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.4 – Taking a closer look at the Threads window ](img/Figure_10.4_B18552.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.4 – Taking a closer look at the Threads window
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the Threads window
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Threads** window provides quite a bit of useful information in a small
    window. We will start by discussing the data that’s displayed for each thread
    in the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Process ID**: By default, the list of threads is grouped by **Process ID**.
    This grouping can be controlled by the **Group by** dropdown in the window’s toolbar.
    The **Process ID** grouping also displays the number of threads in its group.
    This can be useful when working with a large number of threads.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ID**: This is the ID for each thread in the list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Thread.ManagedThreadId` property of each thread'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Category**: This describes the type of thread (**Main Thread**, **Worker
    Thread**, and so on)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Thread.Name` property of each thread. If a thread has no name, then **<No
    Name>** will be displayed in this field.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Location**: This field contains the current stack frame of each thread in
    its call stack. You can click the dropdown in this field to display the full call
    stack for the thread.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some additional fields are hidden by default. You can hide or show columns
    by selecting the **Columns** button in the **Threads** window toolbar. Select
    or unselect the columns you would like to show or hide. These are the columns
    that are hidden initially:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Priority**: This displays the priority assigned to the thread by the system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Affinity Mask**: The affinity mask determines which processors a thread can
    run on. This is determined by the system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Suspended Count**: This value is used by the system to decide whether the
    thread can be run'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Process Name**: This is the name of the process that the thread belongs to'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Process ID**: This is the ID of the process that the thread belongs to'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Transport Qualifier**: This identifies the machine that is connected to the
    debugger. This is useful for remote debugging'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let’s review the toolbar items available in the **Threads** window:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Search**: This allows you to search for threads. You can toggle the **Include
    call stacks in search** button on if you want the search results to encompass
    all call stack information'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Flag**: With this dropdown button, you can select either **Flag Just My Code**
    or **Flag Custom Module Selection**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Group by**: This dropdown allows you to group threads by different fields.
    By default, they are grouped by **Process ID**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Columns**: This opens the **Columns** selection window so that you can customize
    the columns displayed in the **Threads** window'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Expand/Collapse callstacks**: These two buttons expand or collapse the call
    stack in the **Location** column'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Expand/Collapse groups**: These two buttons expand or collapse the thread
    groupings'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Freeze Threads**: This freezes all selected threads in the window'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Thaw Threads**: This unfreezes all selected threads in the window'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s try the `Anon` in the **Search** field to find the thread whose call
    stack contains our anonymous method:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.5 – Searching in the Threads window ](img/Figure_10.5_B18552.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.5 – Searching in the Threads window
  prefs: []
  type: TYPE_NORMAL
- en: The **Threads** window should now only contain the row for our **Worker Thread**
    with the **Anon** part of **AnonymousMethod** highlighted in *yellow*.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have some familiarity with the **Threads** window, let’s learn
    how to use it to switch and flag threads.
  prefs: []
  type: TYPE_NORMAL
- en: Switching and flagging threads
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Threads** window provides so much power when debugging a multithreaded
    application. We touched on some of these features in the previous section. In
    this section, we will learn how to switch threads, flag threads, and freeze or
    thaw a thread. Let’s start by switching between threads in our **BackgroundPingConsoleApp**
    project.
  prefs: []
  type: TYPE_NORMAL
- en: Switching threads
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can switch context to a different thread by using the context menu in the
    `Console.ReadLine()` statement. This is where the main thread is waiting for the
    user to press any key in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.6 – Switching threads in the Visual Studio debugger ](img/Figure_10.6_B18552.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.6 – Switching threads in the Visual Studio debugger
  prefs: []
  type: TYPE_NORMAL
- en: You can see how this function could be extremely useful when debugging a parallel
    operation with half a dozen active threads or more. Next, we will learn how to
    keep an eye on a specific thread with the **Flag Thread** feature.
  prefs: []
  type: TYPE_NORMAL
- en: Flagging threads
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, you will learn how to narrow your field of view while debugging
    in the **Threads** window. By only flagging the threads that we care about, we
    can reduce the clutter in the window. Here’s how to flag threads:'
  prefs: []
  type: TYPE_NORMAL
- en: If you aren’t still debugging the **BackgroundPingConsoleApp** project, start
    debugging it now and wait for it to stop at the breakpoint.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: While the debugger is paused in the application, right-click the **Main Thread**
    row and select **Flag**. The flag icon should now be colored *orange* in that
    row.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do the same for the row containing **Worker Thread** with **AnonymousMethod**
    in the call stack
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, click the **Show Flagged Threads Only** button in the window’s toolbar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.7 – Showing flagged threads only in the Threads window ](img/Figure_10.7_B18552.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.7 – Showing flagged threads only in the Threads window
  prefs: []
  type: TYPE_NORMAL
- en: This makes it simpler to track only the threads that are important to our current
    debugging session. You can click the button again to toggle the button off and
    view all threads. It is also possible to flag threads in the **Parallel Watch**
    and **Parallel Stacks** windows. Their flagged state will persist across all of
    these windows and the **Debug Location** toolbar.
  prefs: []
  type: TYPE_NORMAL
- en: There’s an even easier way to flag these two threads in our application. These
    are the only two threads that are part of our application’s code. So, we can use
    the **Flag Just My Code** button in the toolbar to flag them.
  prefs: []
  type: TYPE_NORMAL
- en: Unselect the **Show Flagged Threads Only** toolbar button
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click one of the flagged rows in the window and select **Unflag All**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, click **Flag Just My Code** in the toolbar. The same two threads will
    be flagged again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.8 – Flagging only the threads that belong to our code ](img/Figure_10.8_B18552.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.8 – Flagging only the threads that belong to our code
  prefs: []
  type: TYPE_NORMAL
- en: This is much easier than selecting threads one by one in the list. It may not
    always be as obvious which threads are part of our code. In the next section,
    we will learn how to freeze a thread.
  prefs: []
  type: TYPE_NORMAL
- en: Freezing threads
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Freezing or thawing a thread in the `SuspendThread` or `ResumeThread` Windows
    functions. If a frozen thread is not executing any code yet, it will never start
    unless it is thawed. If a thread is currently executing, it will pause when the
    **Freeze** thread is called in Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s try freezing and thawing the worker thread in our **BackgroundPingConsoleApp**
    project to see what happens in the debugger:'
  prefs: []
  type: TYPE_NORMAL
- en: Before running the application, add new breakpoints at the `while` `(true)`
    and `Console.ReadKey()` statements. Keep the existing breakpoint at `Thread.Sleep(100)`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start debugging the application
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the debugger breaks on the `while (true)` line, right-click the worker
    thread that contains **AnonymousMethod** and select **Freeze**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Continue debugging; it should break on the `Console.ReadKey()` line instead
    of `Thread.Sleep(100)`. This is because the worker thread is not currently running:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.9 – Freezing a worker thread in the Threads window ](img/Figure_10.9_B18552.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.9 – Freezing a worker thread in the Threads window
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the worker thread again and select **Thaw**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, continue debugging again. Visual Studio breaks on the `Thread.Sleep(100)`
    line inside the anonymous method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This shows how the functions of the **Threads** window could be extremely useful
    while debugging a multithreaded application.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have learned how to debug our multithreaded application by switching,
    freezing, and flagging threads with the **Threads** window, let’s learn how we
    can leverage additional features such as the **Parallel Stacks** and **Parallel
    Watch** windows while debugging.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging a parallel application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visual Studio provides several windows for parallel debugging. While the `Task`
    objects in our applications.
  prefs: []
  type: TYPE_NORMAL
- en: We will start our tour of these features with the **Parallel Stacks** window.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Parallel Stacks window
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Parallel Stacks** window provides a visual representation of the threads
    or tasks in the application. These are two distinct views in the window. You can
    switch between them by selecting **Threads** or **Tasks** in the **View** dropdown
    box. The following screenshot shows an example of the **Threads** view while debugging
    the **BackgroundPingConsoleApp** project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.10 – Viewing the Parallel Stacks window in the Threads view ](img/Figure_10.10_B18552.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.10 – Viewing the Parallel Stacks window in the Threads view
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Parallel Stacks** window contains a toolbar with the following items
    from left to right. You can follow along by examining the tooltips for the toolbar
    items in the window in Visual Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Search**: This allows the same type of search functionality that is available
    in the **Threads** window. It has the **Find Previous** and **Find Next** buttons
    to the right of the **Search** field.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**View**: This dropdown switches between the **Threads** and **Tasks** views'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Show Only Flagged**: This toggle will hide any threads that are not flagged'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Toggle Method View**: This will switch to a view of the currently selected
    method and its call stack'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Auto Scroll to Current Stack Frame**: This will scroll the current stack
    frame into view in the diagram while stepping through the debugger. This option
    is toggled on by default.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Toggle Zoom Control**: This hides or shows the zoom control on the diagram’s
    surface. This option is turned on by default.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reverse Layout**: This option mirrors the layout of the current view'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.png` file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To examine the `Task` objects. Let’s work with the **Tasks** view by opening
    a project from a previous chapter in the book:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your **TaskSamples** project from [*Chapter 5*](B18552_05_ePub.xhtml#_idTextAnchor082),
    or get a copy of this project from this chapter’s source code on GitHub: [https://github.com/PacktPublishing/Parallel-Programming-and-Concurrency-with-C-sharp-10-and-.NET-6/tree/main/chapter10](https://github.com/PacktPublishing/Parallel-Programming-and-Concurrency-with-C-sharp-10-and-.NET-6/tree/main/chapter10).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open `Examples.cs` and set a breakpoint on the first line of the `ProcessOrders`
    method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start debugging. When the debugger stops on the breakpoint, select **Debug**
    | **Windows** | **Parallel Stacks**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Switch to the **Tasks** view in the **Parallel Stacks** window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.11 – The Parallel Stacks window in the Tasks view ](img/Figure_10.11_B18552.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.11 – The Parallel Stacks window in the Tasks view
  prefs: []
  type: TYPE_NORMAL
- en: No tasks have been started yet, so there isn’t much to see here. There is a
    single **Async Logical Stack** block that looks like it is ready to start analyzing
    some async work.
  prefs: []
  type: TYPE_NORMAL
- en: Add a breakpoint on the `Tasks.WaitAll` statement and click **Continue**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'It is possible to configure breakpoints in Visual Studio by right-clicking
    on the breakpoint you want to modify and clicking `ThreadId` or `ThreadName` values.
    This will ensure that the debugger will only stop on the current breakpoint when
    the desired thread(s) are executing that line of code. To read more about breakpoint
    conditions and filters, check out this article on Microsoft Docs: [https://docs.microsoft.com/visualstudio/debugger/using-breakpoints#set-a-filter-condition](https://docs.microsoft.com/visualstudio/debugger/using-breakpoints#set-a-filter-condition).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, examine the **Parallel Stacks** window again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.12 – The Parallel Stacks window while tasks are active ](img/Figure_10.12_B18552.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.12 – The Parallel Stacks window while tasks are active
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: It can be challenging to catch the tasks in this window while they are still
    executing if they are fast-running methods. You may have to run the application
    several times to hit this breakpoint if one or more of the `Task` objects has
    not been completed yet.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, the **Parallel Stacks** window has captured the execution of
    one running task and another preparing to run. There are some differences between
    this **Tasks** view and some of the thread analysis we have done in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Only actively running tasks are shown in the **Tasks** view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Tasks** view’s stack attempts to display only the relevant call stack
    information. Stack frames may be trimmed from the top and bottom if they are not
    relevant. If you need to see the entire call stack, switch back to the **Threads**
    view.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A separate block is displayed for each active task in the **Tasks** view, even
    if they are assigned to the same thread.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can hover over a line in a task’s call stack to view more information about
    its thread and stack frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.13 – Viewing more information about a call stack frame ](img/Figure_10.13_B18552.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.13 – Viewing more information about a call stack frame
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to pivot the **Tasks** view to a particular method, you can use
    the **Toggle Method View** button:'
  prefs: []
  type: TYPE_NORMAL
- en: Start a new debugging session in the **TaskSamples** project
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set a new breakpoint on the `return orders` statement in the `PrepareOrders`
    method
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click `PrepareOrders` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the `PrepareOrders` method to get more call stack and thread information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.14 – Leveraging the Method View area of the Parallel Stacks window
    ](img/Figure_10.14_B18552.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.14 – Leveraging the Method View area of the Parallel Stacks window
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will learn how to view the state of variables across different threads
    by using the **Parallel Watch** window.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Parallel Watch window
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Parallel Watch** window is similar to the **Watch** window in Visual Studio,
    but it displays additional information about the value of the watched expression
    across the threads with access to the data in the expression.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we will modify the `Examples` class in the **TaskSamples**
    project to add a state that will be available to multiple threads:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by adding a private variable to the `Examples` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a line to `ProcessOrders` to assign orders to `_sharedOrders`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Keep the breakpoints from the previous example and start debugging. Continue
    until the debugger breaks on the `return orders` statement inside `ProcessOrders`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Debug** | **Windows** | **Parallel Watch 1** to open the **Parallel
    Watch 1** window. You can open up to four **Parallel Watch** windows to separate
    your watched expressions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `_sharedOrders` private variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.15 – Adding a watched expression in Parallel Watch 1 window ](img/Figure_10.15_B18552.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.15 – Adding a watched expression in Parallel Watch 1 window
  prefs: []
  type: TYPE_NORMAL
- en: The window indicates that `_sharedOrders` in scope and that the count of orders
    in the variable is `0`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click on **Main Thread** in the **Threads** window and select **Switch
    to Thread**. In the **Parallel Watch 1** window, a task is no longer in scope,
    so the header label has changed from **Task** to **Thread**, and the **ID** property
    of **Main Thread** will be displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.16 – Viewing the watched variable on Main Thread ](img/Figure_10.16_B18552.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.16 – Viewing the watched variable on Main Thread
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, select **Debug** | **Windows** | **Tasks** to open the **Tasks** window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.17 – Viewing the Tasks window while debugging ](img/Figure_10.17_B18552.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.17 – Viewing the Tasks window while debugging
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Tasks** window will show information about the tasks in scope in the
    debugging session. The following columns are displayed in the window:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Flag**: An icon indicating whether the current task has been flagged. You
    can click this field to flag or unflag a task.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ID**: The ID of the task'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Task.Status` properties of the task'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Start Time (sec)**: This indicates how many seconds into the debugging session
    the task started'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Duration (sec)**: This indicates how long the task has been running'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Location**: This shows the call stack’s position for the task on the thread'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Task**: The initial method where the task started. Any parameters that have
    been passed will also be shown in this field.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Several other hidden fields can be shown by right-clicking in the window and
    selecting **Columns**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.18 – Adding or removing columns from the Tasks window ](img/Figure_10.18_B18552.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.18 – Adding or removing columns from the Tasks window
  prefs: []
  type: TYPE_NORMAL
- en: You can sort and group the tasks in the **Tasks** window similar to how the
    **Threads** window works. The difference is that the **Tasks** window does not
    have a toolbar. All operations are performed with the right-click context menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'The other tool you can use while debugging parallel .NET code is the **Debug
    Location** toolbar. If it is not already displayed in Visual Studio, you can open
    it by going to **View** | **Toolbars** | **Debug Location**. While you’re debugging,
    the toolbar functionality lights up:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.19 – Viewing the Debug Location toolbar while debugging  ](img/Figure_10.19_B18552.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.19 – Viewing the Debug Location toolbar while debugging
  prefs: []
  type: TYPE_NORMAL
- en: From the toolbar, you can select the active **Process**, **Thread**, and **Stack
    Frame**. It’s also easy to toggle the flagged state of the currently selected
    thread.
  prefs: []
  type: TYPE_NORMAL
- en: That completes our tour of the debug windows available to .NET parallel programmers.
    Let’s wrap up by reviewing everything we learned in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the Visual Studio features available to multithreaded
    application developers. We started by working with threads in the `Thread` objects.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we learned how to switch, flag, and freeze our threads while debugging.
    Finally, we looked at some of the advanced debugging tools for developers who
    are using `Task` objects or `async`/`await` in their code. The **Parallel Stacks**
    and **Parallel Watch** windows take task debugging to the next level. Finally,
    we took a quick look at the **Tasks** window and the **Debug Location** toolbar.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, [*Chapter 11*](B18552_11_ePub.xhtml#_idTextAnchor173),
    we will dive deeper into the different methods available to cancel concurrent
    and parallel work with .NET.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How can you debug multiple processes in Visual Studio?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the default grouping of threads in the **Threads** window?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you add more columns to the **Tasks** or **Threads** window?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which debug window displays a visual representation of the current threads or
    tasks?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What file format can you export from the **Parallel Stacks** window?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How many **Parallel Watch** windows can you open?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which Visual Studio toolbar provides information about the processes and threads
    you are currently debugging?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you filter the **Threads** window to only show the threads that have
    been created for your code?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
