["```cs\n    <compatibility xmlns=”urn:schemas-microsoft-\n        com:compatibility.v1”>\n        <application>\n          <supportedOS \n            Id=”{e2011457-1546-43c5-a5fe-008deee3d3f0}” />\n          <supportedOS \n            Id=”{35138b9a-5d96-4fbd-8e2d-a2440225f93a}” />\n          <supportedOS \n            Id=”{4a2f28e3-53b9-4441-ba9c-d69d4a4a6e38}” />\n          <supportedOS \n            Id=”{1f676c76-80e1-4239-95bb-83d0f6d0da78}” />\n          <supportedOS \n            Id=”{8e0f7a12-bfb3-4fe8-b9a5-48fd50a15a9a}” />\n        </application>\n      </compatibility>\n    ```", "```cs\n    <application xmlns=”urn:schemas-microsoft-com:asm.v3”>\n         <windowsSettings>\n              <dpiAware xmlns=””>\n                 True\n             </dpiAware>\n              <longPathAware xmlns=””>\n                 True\n             </longPathAware>\n            </windowsSettings>\n    </application>\n    ```", "```cs\n    using System;\n    using System.Collections.Generic;\n    using System.ComponentModel;\n    using System.Threading;\n    using System.Windows.Forms;\n    ```", "```cs\n    private int _clickCounter;\n        private int _operationNumber;\n            private int _offset = 0;\n        private int _pageSize = 10;\n        private int _currentPage = 1;\n    ```", "```cs\n    private void MainForm_Load(object sender, EventArgs e)\n    {\n        SplashScreenForm splashScreen = new \n            SplashScreenForm();\n         splashScreen.Show(this);\n        for (int x = 1; x <= 100; x++)\n        {\n             Thread.Sleep(500);\n            splashScreen.UpdateProgress(x, $”Progress \n               Update: Performing load operation {x}\n                   of 100...”);\n             Application.DoEvents();\n         }\n        splashScreen.Close();\n    }\n    ```", "```cs\n    public void UpdateProgress(int value, string message)\n    {\n            LoadingProgressBar.Value = value;\n            LoadingProgressLabel.Text = message;\n            Invalidate();\n    }\n    ```", "```cs\n    private void IncrementCountButton_Click(object sender, \n        EventArgs e)\n        {\n            _clickCounter++;\n            ClickCounterLabel.Text = $”You have clicked \n                the button {_clickCounter} times.”;\n    }\n    ```", "```cs\n    private void BuildCollection()\n    {\n        _products = new();\n        for (int x = 1; x <= 100; x++)\n        {\n            _products.Add(new Product { Id = x, Name = \n                $”Product {x}” });\n    }\n    }\n    ```", "```cs\n    DataTable.DataSource = PagedProducts();\n    PageTextBox.Text = $”Page {_currentPage} of \n        {PageCount()}”;\n    ```", "```cs\n    private List<Product> PagedProducts()\n        {\n            return _products.GetRange(_offset, _pageSize);\n    }\n    ```", "```cs\n    private int PageCount()\n        {\n         return _products.Count / _pageSize;\n    }\n    ```", "```cs\n    private void FirstButton_Click(object sender, \n        EventArgs e)\n        {\n            if (_currentPage > 1)\n            {\n                _offset = 0;\n                _currentPage = 1;\n                PageTextBox.Text = $”Page {_currentPage} \n                    of {PageCount()}”;\n                DataTable.DataSource = PagedProducts();\n         }\n    }\n    ```", "```cs\n        private void PreviousButton_Click(object sender, \n            EventArgs e)\n        {\n            if (_currentPage > 1)\n            {\n                _offset -= _pageSize;\n                _currentPage--;\n                PageTextBox.Text = $”Page {_currentPage} \n                     of {PageCount()}”;\n                DataTable.DataSource = PagedProducts();\n         }\n    }\n    ```", "```cs\n    private void NextButton_Click(object sender,\n        EventArgs e)\n        {\n            if (_currentPage < PageCount())\n            {\n                _offset += _pageSize;\n                _currentPage++;\n                PageTextBox.Text = $”Page {_currentPage} \n                    of {PageCount()}”;\n                DataTable.DataSource = PagedProducts();\n         }\n    }\n    ```", "```cs\n    private void LastButton_Click(object sender,\n        EventArgs e)\n        {\n            if (_currentPage < PageCount())\n            {\n                _offset = _products.Count - _pageSize;\n                _currentPage = PageCount();\n                PageTextBox.Text = $”Page {_currentPage} \n                    of {PageCount()}”;\n                DataTable.DataSource = PagedProducts();\n         }\n    }\n    ```", "```cs\n    internal class Product\n    {\n        public int Id { get; set; }\n        public string Name { get; set; }\n        public string Description { get; set; } = “It is a \n          long established fact that a reader will be \n            distracted by the readable content of a page \n              when looking at its layout.”;\n        public float Price { get; set; } = 9.99F;\n        public int Units { get; set; } = 100;\n    }\n    ```", "```cs\n    LongRunningProcessBackgroundWorker.DoWork += \n        LongRunningProcessBackgroundWorker_DoWork;\n    LongRunningProcessBackgroundWorker.ProgressChanged += \n        LongRunningProcessBackgroundWorker_ProgressChanged;\n    LongRunningProcessBackgroundWorker\n        .RunWorkerCompleted += LongRunning\n            ProcessBackgroundWorker_RunWorkerCompleted;\n    ```", "```cs\n    private void LongRunningProcess()\n        {    \n            if (LongRunningProcessBackgroundWorker.IsBusy \n                != true)\n            {                \n             LongRunningProcessBackgroundWorker\n                 .RunWorkerAsync();\n         }\n        }\n    ```", "```cs\n    private void LongRunningProcessBackgroundWorker_DoWork\n        (object sender, DoWorkEventArgs e)\n        {\n            BackgroundWorker worker = sender as \n                BackgroundWorker;\n        for (int i = 1; i <= 100; i++)\n            {\n                if (worker.CancellationPending == true)\n                {\n                    e.Cancel = true;\n                    break;\n               }\n                else\n                {\n                    _operationNumber = i;\n                    System.Threading.Thread.Sleep(100);\n                    worker.ReportProgress((i / 100)\n                        * 100);\n             }\n         }\n    }\n    ```", "```cs\n    private void LongRunningProcessBackgroundWorker\n        _ProgressChanged(object sender, ProgressChanged\n            EventArgs e)\n        {\n            StatusLabel.Text \n            = ($”Progress: {_operationNumber}%”);\n        TaskProgressBar.Value = _operationNumber;\n            if (_operationNumber == 100)\n        {\n                Thread.Sleep(100);\n                LongRunningOperationCancelButton\n                .Visible = false;\n            StatusBar.Visible = false;\n        }\n    }\n    ```", "```cs\n    private void LongRunningProcessBackgroundWorker\n        _RunWorkerCompleted(object sender, \n            RunWorkerCompletedEventArgs e)\n        {\n            if (e.Cancelled == true)\n                StatusLabel.Text = “Canceled!”;\n         else if (e.Error != null)\n                StatusLabel.Text = “Error: “ + \n                    e.Error.Message;\n         else\n                StatusLabel.Text = “Done!”;\n    }\n    ```", "```cs\n    private void LongRunningOperationCancelButton\n        _Click(object sender, EventArgs e)\n    {\n        if (LongRunningProcessBackgroundWorker\n            .WorkerSupportsCancellation == true)\n    {\n            LongRunningProcessBackgroundWorker\n                .CancelAsync();\n            LongRunningOperationCancelButton.Visible = \n                false;\n            StatusBar.Visible = false;\n         }\n    }\n    ```", "```cs\n    <Window x:Class=”CH12_ResponsiveWPF.SplashWindow”    \n           xmlns=””\n           xmlns:x=””\n           xmlns:d=””\n           xmlns:mc=””\n           xmlns:local=”clr-namespace:CH12_ResponsiveWPF”\n           mc:Ignorable=”d” \n           Background=”White”        \n           Foreground=”White” \n           WindowStyle=”None”\n           WindowStartupLocation=”CenterScreen”\n           Title=”SplashWindow” Height=”450” Width=”800”>\n        <StackPanel HorizontalAlignment=”Center” \n            VerticalAlignment=”Center”>\n            <Label TextBlock.FontSize=”32” \n                Content=”Responsive WPF Example” />\n            <Label x:Name=”LoadingProgressLabel” \n                TextBlock.FontSize=”12” \n                    Content=”Loading...” />\n            <ProgressBar x:Name=”LoadingProgressBar” \n                Minimum=”0” Maximum=”100” />\n        </StackPanel>\n    </Window>\n    ```", "```cs\n    public void UpdateProgress(int value, string message)\n    {\n        LoadingProgressBar.Value = value;\n        LoadingProgressLabel.Content = message;\n        InvalidateVisual();\n    }\n    ```", "```cs\n    <StackPanel HorizontalAlignment=”Stretch” \n        VerticalAlignment=”Stretch” Background=”Red”>\n        <Label x:Name=”CounterLabel” FontSize=”32” \n            Foreground=”Yellow” Margin=”8” Padding=”8” />\n            <Button x:Name=”IncrementCounterButton” \n            Content=”Increment Counter” \n            Click=”IncrementCounterButton_Click” \n            HorizontalAlignment=”Center” Padding=”8” \n            Margin=”0, 0, 0 , 8” />\n            <DataGrid x:Name=”DataTable” />\n            <StackPanel Orientation=”Horizontal” \n                HorizontalAlignment=”Center” Margin=”0, 4, \n                    0, 4”>\n                <Button x:Name=”FirstButton” \n                Content=”|&lt;&lt;” \n              Click=”FirstButton_Click” Margin=”4” \n              Padding=”8” />\n                <Button x:Name=”PreviousButton” \n                Content=”&lt;&lt;” \n                Click=”PreviousButton_Click” Margin=”4” \n                Padding=”8” />\n                <Label x:Name=”PageLabel” \n                Background=”White” Foreground=”Black” \n                Width=”110” Height=”32” \n                VerticalContentAlignment=”Center” />\n                <Button x:Name=”NextButton” \n                Content=”&gt;&gt;” \n                Click=”NextButton_Click” Margin=”4” \n                Padding=”8” />\n                <Button x:Name=”LastButton” \n                Content=”&gt;&gt;|” \n                Click=”LastButton_Click” Margin=”4” \n                Padding=”8” />\n            </StackPanel>\n            <StackPanel x:Name=”StatusPanel” \n            VerticalAlignment=”Bottom” \n            Orientation=”Horizontal” Background=”Yellow”>\n                <Label x:Name=”StatusLabel” \n                Content=”Progress Update: ...” />\n                <ProgressBar x:Name=”TaskProgressBar” \n                Minimum=”0” Maximum=”100” Width=”500” />\n                <Button x:Name=”CancelTaskButton” \n                Content=”Cancel Task” \n                Click=”CancelTaskButton_Click” />\n            </StackPanel>\n        </StackPanel>\n    ```", "```cs\n    using System;\n    using System.Collections;\n    using System.Collections.Generic;\n    using System.ComponentModel;\n    using System.Threading;\n    using System.Windows;\n    using System.Windows.Threading;\n    ```", "```cs\n    private int _clickCounter;\n    private int _operationNumber;\n    private List<Product> _products;\n    private int _offset = 0;\n    private int _pageSize = 10;\n    private int _currentPage = 1;\n    BackgroundWorker _worker;\n    ```", "```cs\n    public MainWindow()\n    {\n        InitializeComponent();\n        BuildCollection();\n        SplashWindow splashWindow = new SplashWindow();\n        splashWindow.Show();\n        for (int x = 1; x <= 100; x++)\n        {\n            Thread.Sleep(100);\n            splashWindow.UpdateProgress(x, $”Progress \n                Update: Performing load operation {x} of \n                    100...”);\n            DoEvents();\n    }\n        splashWindow.Close();\n        DataTable.ItemsSource = PagedData();\n        PageLabel.Content = $”Page {_currentPage} of \n            {PageCount()}”;\n         _worker = new BackgroundWorker();\n        _worker.WorkerReportsProgress = true;\n        _worker.WorkerSupportsCancellation = true;\n        _worker.DoWork += Worker_DoWork;\n        _worker.ProgressChanged += Worker_ProgressChanged;\n        _worker.RunWorkerCompleted +=\n             Worker_RunWorkerCompleted;\n        _worker.RunWorkerAsync();\n    }\n    ```", "```cs\n    private void Worker_DoWork(object sender, \n        DoWorkEventArgs e)\n    {\n        BackgroundWorker worker = sender as \n            BackgroundWorker;\n    for (int i = 1; i <= 100; i++)\n        {\n            if (worker.CancellationPending == true)\n            {\n                e.Cancel = true;\n                break;\n         }\n            else\n            {\n                _operationNumber = i;\n                System.Threading.Thread.Sleep(100);\n                 worker.ReportProgress((i / 100) * 100);\n            }\n         }\n    }\n    ```", "```cs\n    private void Worker_ProgressChanged(object sender, \n        ProgressChangedEventArgs e)\n    {\n        StatusLabel.Content = ($”Progress: \n            {_operationNumber}%”);\n        TaskProgressBar.Value = _operationNumber;\n    }\n    ```", "```cs\n    private void Worker_RunWorkerCompleted(object sender, \n        RunWorkerCompletedEventArgs e)\n    {\n        if (e.Cancelled == true)\n            StatusLabel.Content = “Cancelled!”;\n        else if (e.Error != null)\n            StatusLabel.Content = “Error: “ + e.Error.\n              Message;\n        else\n            StatusLabel.Content = “Done!”;\n    Thread.Sleep(1500);\n        StatusPanel.Visibility = Visibility.Collapsed;\n    }\n    ```", "```cs\n    private IEnumerable PagedData()\n    {\n        return _products.GetRange(_offset, _pageSize);\n    }\n    ```", "```cs\n    public static void DoEvents()\n    {\n        Application.Current.Dispatcher\n             .Invoke(DispatcherPriority.Render, \n                 new Action(delegate { \n                    // Your operation goes here.\n                }));\n    }\n    ```", "```cs\n    private void BuildCollection()\n    {\n        _products = new();\n        for (int x = 1; x <= 100; x++)\n        {\n            _products.Add(new Product { Id = x, Name = \n                $”Product {x}” });\n         }\n    }\n    ```", "```cs\n    private int PageCount()\n    {\n        return _products.Count / _pageSize;\n    }\n    ```", "```cs\n    private void FirstButton_Click(object sender, \n        RoutedEventArgs e)\n    {\n        if (_currentPage > 1)\n        {\n            _offset = 0;\n            _currentPage = 1;\n            PageLabel.Content = $”Page {_currentPage} of \n                {PageCount()}”;\n            DataTable.ItemsSource = PagedData();\n        }\n    }\n    ```", "```cs\n    private void PreviousButton_Click(object sender, \n        RoutedEventArgs e)\n    {\n        if (_currentPage > 1)\n        {\n            _offset -= _pageSize;\n            _currentPage--;\n            PageLabel.Content = $”Page {_currentPage} of \n                {PageCount()}”;\n            DataTable.ItemsSource = PagedData();\n    }\n    }\n    ```", "```cs\n    private void NextButton_Click(object sender, \n        RoutedEventArgs e)\n    {\n        if (_currentPage < PageCount())\n        {\n            _offset += _pageSize;\n            _currentPage++;\n            PageLabel.Content = $”Page {_currentPage} of \n                {PageCount()}”;\n            DataTable.ItemsSource = PagedData();\n         }\n    }\n    ```", "```cs\n    private void LastButton_Click(object sender, \n        RoutedEventArgs e)\n    {\n        if (_currentPage < PageCount())\n        {\n            _offset = _products.Count - _pageSize;\n            _currentPage = PageCount();\n            PageLabel.Content = $”Page {_currentPage} of \n                {PageCount()}”;\n            DataTable.ItemsSource = PagedData();\n    }\n    }\n    ```", "```cs\n    private void IncrementCounterButton_Click(object \n        sender, RoutedEventArgs e)\n    {\n        _clickCounter++;\n        CounterLabel.Content = $”You have clicked the \n            button {_clickCounter} times.”;\n    }\n    ```", "```cs\n    private void CancelTaskButton_Click(object sender, \n        RoutedEventArgs e)\n    {\n        if (_worker.WorkerSupportsCancellation == true)\n            _worker.CancelAsync();\n    }\n    ```", "```cs\n    Install-Package Microsoft.Extensions.Caching.Memory -\n    Version 6.0.0-preview.7.21377.19 \n    ```", "```cs\n    private readonly ILogger<HomeController> _logger;\n    private IMemoryCache _memoryCache;\n    ```", "```cs\n    public HomeController(ILogger<HomeController> logger, \n        IMemoryCache memoryCache)\n    {\n      _logger = logger;\n        _memoryCache = memoryCache;\n    }\n    ```", "```cs\n    private DateTime GetMemoryCacheTime()\n    {\n        DateTime currentTime;\n        bool alreadyExists = _memoryCache.TryGetValue\n            (“CachedTime”, out currentTime);\n        if (!alreadyExists)\n        {\n        currentTime = DateTime.UtcNow.ToLocalTime();\n        _memoryCache.Set(\n        “CachedTime”,\n        currentTime,  MemoryCacheEntryExtensions\n            .SetSlidingExpiration(\n             new MemoryCacheEntryOptions() {  \n                 SlidingExpiration\n                     = TimeSpan.FromMinutes(5) },\n                TimeSpan.FromMinutes(5)\n         ));\n        }\n        return currentTime;\n    }\n    ```", "```cs\n    [HttpGet]\n    public string Index()\n    {\n    DateTime memoryCacheTime = GetMemoryCacheTime();\n    return $”Current Time: {DateTime.UtcNow.ToLocalTime()}\n        \\nMemory Cache Time: {memoryCacheTime}”;\n    }\n    ```", "```cs\n    Install-Package Microsoft.Extensions.Caching.Redis -\n        Version 2.2.0\n    ```", "```cs\n    private IDistributedCache _distributedCache;\n    ```", "```cs\n    public HomeController(ILogger<HomeController> logger, \n        IMemoryCache memoryCache, IDistributedCache \n            distributedCache)\n    {\n        _logger = logger;\n        _memoryCache = memoryCache;\n        _distributedCache = distributedCache;\n    }\n    ```", "```cs\n    private static string Base64Encode(string text)\n    {\n        byte[] bytes = Encoding.UTF8.GetBytes(text);\n        return Convert.ToBase64String(bytes);\n    }\n    public static string Base64Decode(string text)\n    {\n        byte[] bytes = Convert.FromBase64String(text);\n        return Encoding.UTF8.GetString(bytes);\n    }\n    ```", "```cs\n    private string GetDistributedCacheString()\n    {\n      string data = _distributedCache.GetString\n          (“StringValue”);\n      if (data == null)\n      {\n         data = Base64Encode($”Hello, World! \n              {DateTime.UtcNow.ToLocalTime()}”);\n         _distributedCache.Set(“StringValue”,\n         Convert.FromBase64String(data),\n        new DistributedCacheEntryOptions()\n        {\n                 AbsoluteExpiration \n                 = DateTime.UtcNow.AddMinutes(10),\n        });\n        data = Base64Decode(data);\n      }\n    return data;\n    }\n    ```", "```cs\n    [HttpGet]\n    public string Index()\n    {\n    DateTime memoryCacheTime = GetMemoryCacheTime();\n    string data = GetDistributedCacheString();\n    return $”Current Time: {DateTime.UtcNow.ToLocalTime()}\n        \\nMemory Cache Time: {memoryCacheTime}\n            \\nDistributed Cache String: {data}”;\n    }\n    ```", "```cs\n    Current Time: 12/07/2021 21:05:59\n    Memory Cache Time: 12/07/2021 21:05:59\n    Distributed Cache String: Hello, World! 12/07/2021 \n    21:05:59\n    ```", "```cs\nCurrent Time: 12/07/2021 21:08:13\nMemory Cache Time: 12/07/2021 21:05:59\nDistributed Cache String: Hello, World! 12/07/2021 \n21:05:59\nIt is plain to see that both cached values already \nexisted in the cache, since they are older than the \ncurrent time.\n```", "```cs\n    [Route(“Ajax/Demo”)]\n    public IActionResult AjaxDemo()\n    {\n        return new JsonResult(“Ajax Demo Result”);\n    }\n    ```", "```cs\n    <!DOCTYPE html>\n    <html>\n        <head>\n            <meta name=”viewport” content=”width=device-\n                width” />\n            <title>Ajax Example</title>\n        </head>\n        <body>\n            <fieldset>\n                <legend>Ajax Demonstration</legend>\n                <form>\n                    <input type=”button” value=”Ajax \n                    Demonstration” id=”ajaxDemonstration\n                    Button” />\n                    <br />\n                    <span id=”ajaxDemoResult”></span>\n                </form>\n            </fieldset>\n            <script\n                 src=”https://code.jquery.com/jquery-\n                     3.6.0.slim.min.js”\n                integrity=”sha256-u7e5khyithlIdTpu22P\n                    HhENmPcRdFiHRjhAuHcs05RI=”\n                crossorigin=”anonymous”\n            >\n\n            </script>\n            <script>\n                $(document).ready(function( ) {\n                    $(‘#ajaxDemonstrationButton’)\n                        .click(function() {\n                        $.ajax({\n                            type: ‘GET’,\n                            url: ‘/Ajax/Demo’,\n                            success: function (result) {\n                              $(‘#ajaxDemoResult’)\n                                .html(result);\n                            }\n                        });\n                    });\n                });            \n            </script>\n        </body>\n    </html>\n    ```", "```cs\n    <script type = “text/javascript”> \n        function WebSocketExample (){\n            var socket = new WebSocket(“wss://\n                javascript.info/article/websocket/\n                    demo/hello”);\n            var messages = document.getElementById\n                (‘messages’)\n            var innerHTML = messages.innerHTML;\n            socket.onopen = function(e) {\n                innerHTML += ‘<p>[open] Connection \n                    established</p>’;\n                messages.innerHTML += innerHTML;\n                innerHTML += ‘<p>Sending to server</p>’;\n                messages.innerHTML += innerHTML;\n                socket.send(‘WebSocket message!’);\n            };\n            socket.onmessage = function(event) {\n                innerHTML += `<p>[message] Data received \n                    from server: ${event.data}</p>`;\n            };\n            socket.onclose = function(event) {  \n                if (event.wasClean) {\n                    innerHTML += `<p>[close] Connection \n                    closed cleanly, code=${event.code} \n                    reason=${event.reason}</p>`;\n                messages.innerHTML = innerHTML;\n                } else {\n             // e.g. server process killed or network down\n             // event.code is usually 1006 in this case\n            innerHTML += ‘<p>[close] Connection died</p>’;\n                    messages.innerHTML = innerHTML;\n                }\n            };\n            socket.onerror = function(error) {\n                innerHTML += `<p>[error] \n                    ${error.message}</p>`;\n                messages.innerHTML = innerHTML;\n            };\n        }\n    </script> \n    <p>Click the following button to see the function in \n        action</p>  \n    <input type = “button” onclick = “WebSocketExample()” \n        value = “Display”>  \n    <p id=”messages” onload=”WebSocketExample()”></p>\n    ```", "```cs\n    public class ChatHub : Hub\n    {\n         public async Task SendMessage(\n             string user, string message\n         )\n         {\n                 await Clients.All\n                 .SendAsync(\n                     “ReceiveMessage”, user, message\n                 );\n         }\n    }\n    ```", "```cs\n    @page\n    <div class=”container”>\n    <div class=”row”>&nbsp;</div>\n         <div class=”row”>\n             <div class=”col-2”>User</div>\n               <div class=”col-4”>\n                 <input type=”text” \n                     id=”userInput” />\n             </div>\n         </div>\n         <div class=”row”>\n             <div class=”col-2”>Message</div>\n               <div class=”col-4”>\n                 <input type=”text” \n                     id=”messageInput” />\n             </div>\n         </div>\n         <div class=”row”>&nbsp;</div>\n         <div class=”row”>\n             <div class=”col-6”>\n                  <input type=”button” \n                 id=”sendButton” value=”Send Message” />\n              </div>\n         </div>\n    </div>\n    <div class=”row”>\n    <div class=”col-12”>\n                 <hr />\n         </div>\n    </div>\n    <div class=”row”>\n    <div class=”col-6”>\n                 <ul id=”messagesList”></ul>\n         </div>\n    </div>\n    <script src=”~/js/signalr/dist/browser/signalr.js”>\n        </script>\n    <script src=”~/js/chat.js”></script>\n    ```", "```cs\n    “use strict”;\n    var connection = new signalR.HubConnectionBuilder()\n        .withUrl(“/chatHub”).build();\n    document.getElementById(“sendButton”).disabled = true;\n    connection.on(“ReceiveMessage”, function (user, \n        message) {\n            var li = document.createElement(“li”);\n         document.getElementById(“messagesList”)\n             .appendChild(li);\n         li.textContent = `${user} says ${message}`;\n    });\n    connection.start().then(function () {\n            document.getElementById(“sendButton”)\n             .disabled = false;\n    }).catch(function (err) {\n        return console.error(err.toString());\n    });\n    document.getElementById(“sendButton”)\n         .addEventListener(“click”, function (event) {\n             var user = document\n                 .getElementById(“userInput”).value;\n                 var message = document\n                 .getElementById(“messageInput”).value;\n             connection.invoke(\n                 “SendMessage”, user, message\n             ).catch(function (err) {\n                     return console.error(err.toString());\n                 });\n                 event.preventDefault();\n         });\n    ```", "```cs\n    services.AddRazorPages();\n    services.AddSignalR();\n    ```", "```cs\n    app.MapHub<ChatHub>(“/chatHub”);\n    ```", "```cs\n<ResourceDictionary>\n```", "```cs\n    <Style TargetType=”StackLayout”>\n```", "```cs\n        <Setter Property=”Spacing” Value=”8”/>\n```", "```cs\n    </Style>\n```", "```cs\n    <Style TargetType=”Grid”>\n```", "```cs\n        <Setter Property=”ColumnSpacing” Value=”8”/>\n```", "```cs\n        <Setter Property=”RowSpacing” Value=”8”/>\n```", "```cs\n    </Style>\n```", "```cs\n</ResourceDictionary>\n```", "```cs\n<VerticalStackLayout>\n```", "```cs\n    <Label\n```", "```cs\n        Text=”SemanticExtensions:”\n```", "```cs\n        TextColor=”Black”\n```", "```cs\n        FontAttributes=”Bold”\n```", "```cs\n        FontSize=”14”\n```", "```cs\n        Margin=”0,8”/>\n```", "```cs\n    <Button\n```", "```cs\n        Text=”Semantic focus is applied to the label that \n```", "```cs\n            follows upon the button being pressed.”\n```", "```cs\n        FontSize=”12”\n```", "```cs\n        Clicked=”LabelFocusButton_Clicked”/>\n```", "```cs\n    <Label\n```", "```cs\n        x:Name=”SomeLabel”\n```", "```cs\n        Text=”Hello, I am able to receive semantic focus!”\n```", "```cs\n        FontSize=”12”/>\n```", "```cs\n</VerticalStackLayout>\n```", "```cs\nprivate void LabelFocusButton_Clicked(object sender, \n```", "```cs\n    EventArgs e)\n```", "```cs\n{\n```", "```cs\n    SomeLabel.SetSemanticFocus();\n```", "```cs\n}\n```", "```cs\nSemanticScreenReader.Announce(\n```", "```cs\n    “Make your applications accessible to MAUI users!”\n```", "```cs\n);\n```", "```cs\n<BlazorWebView HostPage=”wwwroot/index.html”\n```", "```cs\n               Services=”{StaticResource Services}”>\n```", "```cs\n     <BlazorWebView.RootComponent>\n```", "```cs\n         <RootComponent Selector=”#app”\n```", "```cs\n                ComponentType=”{x:Type local:Main}” />\n```", "```cs\n     </BlazorWebView.RootComponent>\n```", "```cs\n</BlazorWebView>\n```", "```cs\n    namespace CH12_ResponsiveMAUI.Api\n    {\n        using System.ComponentModel;\n        using System.Runtime.CompilerServices;\n\n        public class PropertyChangeNotifier : \n            INotifyPropertyChanged\n        {\n            public event PropertyChangedEventHandler \n                PropertyChanged;\n\n            protected void OnPropertyChanged\n                ([CallerMemberName] string propertyName = \n                   null)\n            {\n                PropertyChanged?.Invoke(this, new \n                    PropertyChangedEventArgs\n                       (propertyName));\n            }\n        }\n    }\n    ```", "```cs\n    public int Id { get; set; }\n    public DateTime CreatedDate { get; set; }\n    public DateTime ModifiedDate { get; set; }\n    ```", "```cs\n    public interface IRepository<T> where T : BaseEntity\n    {\n            T GetById(int id);\n            T FirstOrDefault(Func<T, bool> query);\n            void Add(T entity);\n            void Update(T entity);\n            void Remove(T entity);\n            List<T> GetAll();\n            List<T> Filter(Func<T, bool> query);\n            int Count();\n            int FilteredCount(Func<T, bool> query);\n    }\n    ```", "```cs\n    public class BaseRepository<T> : IRepository<T> where \n        T : BaseEntity\n    {\n            protected ICollection<T> Context;\n            public BaseRepository(ICollection<T> context)\n            {\n                if (context == null)\n                    throw new ArgumentNullException\n                        (“context”);\n                Context = context;\n            }\n    }\n    ```", "```cs\n    public void Add(T entity)\n    {\n    Context.Add(entity);\n    }\n    ```", "```cs\n    public int Count()\n    {\n    if (Context != null)\n         return Context.Count;\n    return 0;\n    }\n    ```", "```cs\n     public List<T> Filter(Func<T, bool> query)\n    {\n    return Context.Where(query).ToList();\n    }\n    ```", "```cs\n    public int FilteredCount(Func<T, bool> query)\n    {\n        return Context.Where(query).Count();\n    }\n    ```", "```cs\n    public T FirstOrDefault(Func<T, bool> query)\n    {\n        return Context.Where(query).FirstOrDefault();\n    }\n    ```", "```cs\n    public List<T> GetAll()\n    {\n    return Context.ToList();\n    }\n    ```", "```cs\n    public T GetById(int id)\n    {\n    return Context.Where(t => t.Id == id)\n        .FirstOrDefault();\n    }\n    ```", "```cs\n    public void Remove(T entity)\n    {\n    Context.Remove(entity);\n    }\n    ```", "```cs\n    public void Update(T entity)\n    {\n    T item = Context.FirstOrDefault(t => t.Id == \n        entity.Id);\n    int index = Context.ToList().IndexOf(item);\n    if (index != -1)\n        Context.ToList()[index] = entity;\n    }\n    ```", "```cs\n    internal class PeopleRepository : BaseRepository\n        <Person>\n    {\n    public PeopleRepository(ICollection<Person> context) : \n        base(context)\n    {\n    }\n    }\n    ```", "```cs\n    public class Person : BaseEntity\n    {\n         public string FirstName { get; set; }\n                     public string LastName { get; set; }\n            }\n    ```", "```cs\n    public class ViewModelBase<T> : PropertyChangeNotifier\n    {\n    bool _isRefreshing;\n    public ObservableCollection<T> Entities { get; private \n       set; } = new ObservableCollection<T>();\n    public bool IsRefreshing\n    {\n             get { return _isRefreshing; }\n             set\n                      {\n                            _isRefreshing = value;\n                            OnPropertyChanged();\n                        }\n                }\n    }\n    ```", "```cs\n        public class PeopleViewModel : \n            ViewModelBase<Person>\n        {\n            public PeopleViewModel()\n            {\n                SeedPeopleRepository();\n            }\n\n            private void SeedPeopleRepository()\n            {\n                Entities.Add(new Person { Id = 1, \n                FirstName = “Person”, LastName = “One”, \n                CreatedDate = DateTime.Now, ModifiedDate = \n                DateTime.Now });\n                Entities.Add(new Person { Id = 2, \n                FirstName = “Person”, LastName = “Two”, \n                CreatedDate = DateTime.Now, ModifiedDate = \n                DateTime.Now });\n                Entities.Add(new Person { Id = 3, \n                FirstName = “Person”, LastName = “Three”, \n                CreatedDate = DateTime.Now, ModifiedDate = \n                DateTime.Now });\n                Entities.Add(new Person { Id = 4, \n                FirstName = “Person”, LastName = “Four”, \n                CreatedDate = DateTime.Now, ModifiedDate = \n                DateTime.Now });\n                Entities.Add(new Person { Id = 5, \n                FirstName = “Person”, LastName = “Five”, \n                CreatedDate = DateTime.Now, ModifiedDate = \n                DateTime.Now });\n                Entities.Add(new Person { Id = 6, \n                FirstName = “Person”, LastName = “Six”, \n                CreatedDate = DateTime.Now, ModifiedDate = \n                DateTime.Now });\n                Entities.Add(new Person { Id = 7, \n                FirstName = “Person”, LastName = “Seven”, \n                CreatedDate = DateTime.Now, ModifiedDate = \n                DateTime.Now });\n                Entities.Add(new Person { Id = 8, \n                FirstName = “Person”, LastName = “Eight”, \n                CreatedDate = DateTime.Now, ModifiedDate = \n                DateTime.Now });\n                Entities.Add(new Person { Id = 9, \n                FirstName = “Person”, LastName = “Nine”, \n                CreatedDate = DateTime.Now, ModifiedDate = \n                DateTime.Now });\n                Entities.Add(new Person { Id = 10, \n                FirstName = “Person”, LastName = “Ten”, \n                CreatedDate = DateTime.Now, ModifiedDate = \n                DateTime.Now });\n                Entities.Add(new Person { Id = 11, \n                FirstName = “Person”, LastName = “Eleven”, \n                CreatedDate = DateTime.Now, ModifiedDate = \n                DateTime.Now });\n                Entities.Add(new Person { Id = 12, \n                FirstName = “Person”, LastName = “Twelve”, \n                CreatedDate = DateTime.Now, ModifiedDate = \n                DateTime.Now });\n                Entities.Add(new Person { Id = 13, \n                FirstName = “Person”, LastName = \n                “Thirteen”, CreatedDate = DateTime.Now, \n                ModifiedDate = DateTime.Now });\n                Entities.Add(new Person { Id = 14, \n                FirstName = “Person”, LastName = \n                “Fourteen”, CreatedDate = DateTime.Now, \n                ModifiedDate = DateTime.Now });\n                Entities.Add(new Person { Id = 15, \n                FirstName = “Person”, LastName = \n                “Fifteen”, CreatedDate = DateTime.Now, \n                ModifiedDate = DateTime.Now });\n                Entities.Add(new Person { Id = 16, \n                FirstName = “Person”, LastName = \n                “Sixteen”, CreatedDate = DateTime.Now, \n                ModifiedDate = DateTime.Now });\n                Entities.Add(new Person { Id = 17, \n                FirstName = “Person”, LastName = \n                “Seventeen”, CreatedDate = DateTime.Now, \n                ModifiedDate = DateTime.Now });\n                Entities.Add(new Person { Id = 18, \n                FirstName = “Person”, LastName = \n                “Eighteen”, CreatedDate = DateTime.Now, \n                ModifiedDate = DateTime.Now });\n                Entities.Add(new Person { Id = 19, \n                FirstName = “Person”, LastName = \n                “Ninetenn”, CreatedDate = DateTime.Now, \n                ModifiedDate = DateTime.Now });\n                Entities.Add(new Person { Id = 20, \n                FirstName = “Person”, LastName = “Twenty”, \n                CreatedDate = DateTime.Now, ModifiedDate = \n                DateTime.Now });\n            }\n        }\n    ```", "```cs\n    public partial class SplashPage : ContentPage, \n        INotifyPropertyChanged\n    {\n        Timer _timer;\n        double _progress;\n        public event PropertyChangedEventHandler \n            PropertyChanged;\n        public SplashPage()\n        {\n            InitializeComponent();\n            _timer = new Timer(new TimerCallback((s) => \n                ReportProgress()), null, TimeSpan.Zero, \n                    TimeSpan.FromSeconds(3));\n        }\n        ~SplashPage() => _timer.Dispose();\n    }\n    ```", "```cs\n        private void ReportProgress()\n        {\n            _timer.Dispose();\n\n            Task.Run(() =>\n            {\n                // Run code here\n\n                for (int i = 0; i <= 100; i++)\n                {\n                    Thread.Sleep(250);\n                    _progress = (double)i / 100;\n                    SafeInvokeInMainThread\n                        (UpdateProgress);\n                }\n                SafeInvokeInMainThread(LoadMainPage);\n            });\n        }\n    ```", "```cs\n    private void LoadMainPage()\n    {\n    Application.Current.MainPage = new AppShell(new \n        BaseEntity() { Id = 1, CreatedDate = DateTime.Now, \n            ModifiedDate = DateTime.Now });\n    Shell.Current.GoToAsync(“//main”);\n    }\n    ```", "```cs\n    private void SafeInvokeInMainThread(Action action)\n    {\n            if (DeviceInfo.Platform == \n                DevicePlatform.WinUI)\n            {\n                Application.Current.Dispatcher\n                    .Dispatch(action);\n            }\n            else\n            {\n                MainThread.BeginInvokeOnMainThread\n                    (action);\n            }\n    }\n    ```", "```cs\n    private void UpdateProgress()\n        {\n            LoadingProgressBar.ProgressTo(_progress, 500, \n                Easing.Linear);\n            LoadingProgressLabel.Text = $”Progress Update:\n                 Performing load operation {(int)\n                     (_progress * 100)} of 100...”;\n    }\n    ```", "```cs\n    <?xml version=”1.0” encoding=”utf-8” ?>\n    <ContentPage xmlns=”\n          http://schemas.microsoft.com/dotnet/2021/maui”\n          xmlns:x=”http://schemas.microsoft.com/winfx/\n              2009/xaml”\n          x:Class=”CH12_ResponsiveMAUI.SplashPage”\n          Title=”SplashPage”>\n        <VerticalStackLayout VerticalOptions=”Center”>\n            <StackLayout HorizontalOptions=”Center” \n                VerticalOptions=”Center”>\n                <Label FontSize=”32” Text=”Responsive \n                    MAUI Example” />\n                <Label x:Name=”LoadingProgressLabel” \n                    FontSize=”12” Text=”Loading...” />\n                <ProgressBar x:Name=”LoadingProgressBar” \n                    Progress=”0” />\n            </StackLayout>\n        </VerticalStackLayout>\n    </ContentPage>\n    ```", "```cs\n    <?xml version=”1.0” encoding=”utf-8” ?>\n    <ContentPage xmlns=\n        “http://schemas.microsoft.com/dotnet/2021/maui”\n        xmlns:x=”http://schemas.microsoft.com/winfx/\n            2009/xaml”\n        x:Class=”CH12_ResponsiveMAUI.MainPage”>\n\n      <ScrollView>\n          <HorizontalStackLayout\n              Spacing=”25”\n              Padding=”30,0”\n              VerticalOptions=”Center”>\n\n              <StackLayout Margin=”20” \n                  HorizontalOptions=”Start”>\n                  <CollectionView x:Name=\n                  “collectionView” ItemsSource=”{Binding \n                    Entities}”>\n                      <CollectionView.ItemTemplate>\n                          <DataTemplate>\n                              <Grid Padding=”10”>\n                                  <Grid.RowDefinitions>\n                                      <RowDefinition \n                                      Height=”Auto” />\n                                  </Grid.RowDefinitions>\n                                  <Grid.ColumnDefinitions>\n                                      <ColumnDefinition \n                                       Width=”Auto” />\n                                        <ColumnDefinition \n                                         Width=”Auto” />\n                                        <ColumnDefinition \n                                         Width=”Auto” />\n                                        <ColumnDefinition \n                                         Width=”Auto” />\n                                        <ColumnDefinition \n                                         Width=”Auto” />\n                                 </Grid.ColumnDefinitions>\n                                 <Label Grid.Column=”1” \n                                 Text=”{Binding Id}” \n                                 FontAttributes=”Bold” />\n                                 <Label Grid.Column=”2” \n                                 Text=”{Binding \n                                 FirstName}” \n                                 FontAttributes=”Bold” />\n                                 <Label Grid.Column=”3” \n                                 Text=”{Binding LastName}” \n                                 FontAttributes=”Bold” />\n                                 <Label Grid.Column=”4” \n                                 Text=”{Binding \n                                 CreatedDate}” \n                                 FontAttributes=”Bold” />\n                                 <Label Grid.Column=”5” \n                                 Text=”{Binding \n                                 ModifiedDate}” \n                                 FontAttributes=”Bold” />\n                                </Grid>\n                            </DataTemplate>\n                        </CollectionView.ItemTemplate>\n                    </CollectionView>\n                </StackLayout>\n\n                <StackLayout HorizontalOptions=”End”>\n                    <Image\n                    Source=”dotnet_bot.png”\n                    SemanticProperties.Description=”Cute \n                        dot net bot waving hi to you!”\n                    HeightRequest=”200”\n                    HorizontalOptions=”Center” />\n\n                    <Label\n                    Text=”Hello, World!”\n                    SemanticProperties.HeadingLevel=\n                        “Level1”\n                    FontSize=”32”\n                    HorizontalOptions=”Center” />\n\n                    <Label\n                    Text=”Welcome to .NET Multi-platform \n                        App UI”\n                    SemanticProperties.HeadingLevel=\n                        “Level2”\n                    SemanticProperties.Description=\n                       “Welcome to dot net Multi platform \n                           App U I”\n                    FontSize=”18”\n                    HorizontalOptions=”Center” />\n\n                    <Button\n                    x:Name=”CounterBtn”\n                    Text=”Click me”\n                    SemanticProperties.Hint=”Counts the \n                        number of times you click”\n                    Clicked=”OnCounterClicked”\n                    HorizontalOptions=”Center” />\n                </StackLayout>\n\n            </HorizontalStackLayout>\n        </ScrollView>\n\n    </ContentPage>\n    ```", "```cs\n        PeopleRepository _peopleRepository;\n\n        public MainPage()\n        {\n            InitializeComponent();\n            BindingContext = new PeopleViewModel();\n    }\n    ```", "```cs\n    <StackPanel VerticalAlignment=”Center” \n        HorizontalAlignment=”Center”>\n        <ProgressRing x:Name=”ProgressRingIndicator1” \n            IsActive=”{x:Bind IsWorking, Mode=OneWay}” \n              Visibility=”{x:Bind IsWorking, Mode=OneWay}” \n                 />\n        <Button x:Name=”DoWorkButton” Content=”Do Work” \n           Click=”DoWorkButton_Click” />\n        <TextBlock x:Name=”MessageTextBlock” />\n    </StackPanel>\n    ```", "```cs\n    private DispatcherTimer _dispatcherTimer;\n    public event PropertyChangedEventHandler \n        PropertyChanged;\n    private bool _isWorking;\n    ```", "```cs\n    private void NotifyPropertyChanged(string property)\n    {\n    if (PropertyChanged != null)\n    {\n    PropertyChanged(this, \n        new PropertyChangedEventArgs(property));\n    }\n    }\n    ```", "```cs\n    _dispatcherTimer = new DispatcherTimer();\n    _dispatcherTimer.Interval = TimeSpan.FromSeconds(10);\n    _dispatcherTimer.Tick += DispatcherTimer_Tick;\n    ```", "```cs\n    private void DispatcherTimer_Tick(object sender, \n        object e)\n    {\n    _dispatcherTimer.Stop();\n    _dispatcherTimer.Tick -= DispatcherTimer_Tick;\n    IsWorking = false;\n    MessageTextBlock.Text = “Work completed.”;\n    }\n    ```", "```cs\n    public bool IsWorking\n    {\n    get { return _isWorking; }\n    set\n         {\n                 _isWorking = value;\n               NotifyPropertyChanged(“IsWorking”);\n    }\n    }\n    ```", "```cs\n    private void DoWorkButton_Click(object sender, \n        RoutedEventArgs e)\n    {\n    DoWorkButton.Visibility = Visibility.Collapsed;\n    IsWorking = true;\n    _dispatcherTimer.Start();\n    }\n    ```"]