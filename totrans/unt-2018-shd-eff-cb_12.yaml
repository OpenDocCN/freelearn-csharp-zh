- en: Shader Graph
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Shader Graph
- en: 'In this chapter, you will learn the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习以下配方：
- en: Creating a Shader Graph project
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 Shader Graph 项目
- en: Implementing a simple a Shader Graph
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现简单的 Shader Graph
- en: Exposing properties to the Inspector via Shader Graph
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 Shader Graph 将属性暴露给检查器
- en: Implementing a glowing highlight system
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现发光高亮系统
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: First released in Unity 2018.1, Shader Graph allows you to create shaders using
    a visual interface by connecting nodes instead of having to dive into the code.
    This will allow developers, including artists, to be able to create shaders in
    a similar manner to material editors in 3D modeling programs such as Autodesk
    Maya and Blender, or the material editor in the Unreal Engine. At the time of
    writing, Shader Graph is only supported for certain kinds of projects and doesn't
    allow the same flexibility as writing the shaders from scratch.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 首次发布于 Unity 2018.1，Shader Graph 允许您通过连接节点而不是直接编写代码来使用可视化界面创建着色器。这将使开发者，包括艺术家，能够以类似于
    3D 建模程序（如 Autodesk Maya 和 Blender）中的材质编辑器或 Unreal Engine 中的材质编辑器的方式创建着色器。在撰写本文时，Shader
    Graph 仅支持某些类型的项目，并且不像从头编写着色器那样具有相同的灵活性。
- en: Creating a Shader Graph project
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 Shader Graph 项目
- en: Unlike all of the previous shaders we have written, the Shader Graph tool requires
    users to have a project that is using the Lightweight Render Pipeline. The Lightweight
    Render Pipeline is meant for lower-end hardware, and is focused on drawing with
    a single-pass and decreasing the draw count wherever possible. For this first
    recipe, you will ensure that your project is set up correctly, by using the settings
    that Shader Graph needs.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们之前编写的所有着色器不同，Shader Graph 工具要求用户拥有一个使用轻量级渲染管道的项目。轻量级渲染管道旨在用于低端硬件，并专注于单遍绘制，尽可能减少绘制次数。对于这个第一个配方，您将通过使用
    Shader Graph 所需的设置来确保您的项目设置正确。
- en: How to do it...
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To get started, we first need to create our new project:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，我们首先需要创建我们的新项目：
- en: 'From the Unity Hub, when creating a new project, set the Template to Lightweight
    RP (Preview):'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Unity Hub 创建新项目时，将模板设置为轻量级 RP（预览）：
- en: '![](img/00235.jpeg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00235.jpeg)'
- en: Shader Graph is currently only compatible with the Lightweight Render Pipeline,
    so this ensures that the graph will work correctly.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Shader Graph 目前仅与轻量级渲染管道兼容，这确保了图将正确工作。
- en: Shader Graph is only available with Unity 2018.1 and above. If you are using
    a prior version, make sure to upgrade before continuing with this chapter.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Shader Graph 仅适用于 Unity 2018.1 及以上版本。如果您正在使用更早的版本，请确保在继续本章之前升级。
- en: 'Once selected, press the Create project button:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选中后，按创建项目按钮：
- en: '![](img/00236.jpeg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00236.jpeg)'
- en: As you can see, this project already includes a number of assets inside it.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，此项目已包含一些资产在内。
- en: When the Unity Editor opens, the Shader Graph is not included by default in
    the Unity editor. To access it, you'll need to make use of the Unity Package Manager.
    From the top menu, go to Window | Package Manager. The Package Manager will allow
    you to install or uninstall different aspects of Unity. You'll notice two buttons,
    one for packages that are in the project (In Project) and one for all the packages
    that are currently available to be downloaded (All).
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当 Unity 编辑器打开时，Shader Graph 默认不包含在 Unity 编辑器中。要访问它，您需要使用 Unity 包管理器。从顶部菜单，转到窗口
    | 包管理器。包管理器允许您安装或卸载 Unity 的不同方面。您会注意到两个按钮，一个用于项目中的包（项目内），另一个用于所有当前可下载的包（全部）。
- en: 'From the Package Manager window, hit the All button, scroll down until you
    see the Shader Graph button, and select it. From there, click on the Install 1.1.9-preview
    button, and wait for it to complete the download and import the content:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从包管理器窗口，点击全部按钮，向下滚动直到您看到 Shader Graph 按钮，然后选择它。从那里，点击安装 1.1.9-preview 按钮，等待它完成下载并导入内容：
- en: '![](img/00237.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00237.jpeg)'
- en: 'Once everything has been downloaded, go to the Project tab, select Create |
    Shader, and see if you can find the following new options:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一切下载完成后，转到项目标签页，选择创建 | 着色器，看看您是否能找到以下新选项：
- en: PBR Graph
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: PBR 图
- en: Sub Graph
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 子图
- en: Unlit Graph
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无光照图
- en: How it works...
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As we mentioned before, Shader Graph is currently only compatible with the Lightweight
    Render Pipeline. The easiest way to ensure that a project is using that pipeline
    is by selecting it as the Template when creating the project.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，着色器图目前仅与轻量级渲染管线兼容。确保项目使用该管道的最简单方法是在创建项目时将其作为模板选择。
- en: Once the project has been created, we make use of the newly added Package Manager,
    which allows you to install or uninstall different aspects of Unity. In this case,
    you have added the Shader Graph functionality.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 创建项目后，我们使用新添加的包管理器，该管理器允许你安装或卸载 Unity 的不同方面。在这种情况下，你已经添加了着色器图功能。
- en: If everything's included, Shader Graph has been installed successfully, and
    you should be able to work on the rest of the recipes for this chapter!
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切都已经包含在内，着色器图已经成功安装，你应该能够完成本章其余的食谱！
- en: Implementing a simple a Shader Graph
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现一个简单的着色器图
- en: To get acquainted with the interface of the Shader Graph, let's create something
    similar to what we have seen before by sampling a texture to create a simple shader.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了熟悉着色器图的用户界面，让我们通过采样纹理来创建一个简单的着色器，来创建一个类似之前看到的东西。
- en: Getting ready
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Ensure that you have created a project using the Lightweight Render Pipeline,
    as described in the *Create a Shader Graph project* recipe. Afterward, complete
    the following steps:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经创建了一个使用轻量级渲染管线的项目，如 *创建着色器图项目* 食谱中所述。之后，完成以下步骤：
- en: Create a new scene, if you haven't done so already, by going to File | New Scene
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你还没有这样做，通过前往文件 | 新场景来创建一个新的场景。
- en: 'Afterward, we need to have something to show our shader, so let''s create a
    new sphere by going to Game Object | 3D Object| Sphere:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们需要有一个东西来展示我们的着色器，所以让我们通过前往游戏对象 | 3D 对象 | 球体来创建一个新的球体：
- en: '![](img/00238.jpeg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00238.jpeg)'
- en: How to do it...
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: We will start off by creating a simple shader graph.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从一个简单的着色器图开始。
- en: From the Project window, create a new shader by going to Create | Shader | PBR
    Graph, and name it `SimpleGraph`.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目窗口中，通过前往创建 | 着色器 | PBR 图来创建一个新的着色器，并将其命名为 `SimpleGraph`。
- en: Afterward, create a new material by going to Create | Material (I named mine
    `SimpleGraphMat`). Next, assign the shader to the material by selecting the Material,
    then from the Inspector tab, you should select the Shader dropdown at the top
    and select graphs/SimpleGraph.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，通过前往创建 | 材质（我将其命名为 `SimpleGraphMat`）来创建一个新的材质。接下来，通过选择材质，然后在检查器选项卡中，你应该选择顶部的着色器下拉菜单并选择
    graphs/SimpleGraph 来分配着色器。
- en: As always, you can also drag and drop the shader on top of the material as well.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，你也可以将着色器拖放到材质的顶部。
- en: 'Next, drag and drop the material onto our spherical object in the scene so
    we can see our shader being used in action:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将材质拖放到场景中的球形对象上，这样我们就可以看到着色器在实际中的应用：
- en: '![](img/00239.jpeg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00239.jpeg)'
- en: 'Now that the setup is done, we can start creating the graph. If you select
    the shader, you should notice, the Inspector tab that there is a button that says
    Open Shader Editor. Click on the button and the Shader Graph Editor will open
    automatically:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在设置完成后，我们可以开始创建图表。如果你选择着色器，你应该注意到检查器选项卡中有一个按钮，上面写着打开着色器编辑器。点击该按钮，着色器图编辑器将自动打开：
- en: '![](img/00240.jpeg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00240.jpeg)'
- en: To move within the Shader Graph Editor, you can use the mouse wheel to zoom
    in and out, and you can hold the middle mouse button and drag to pan the graph.
    Alternatively, you can also use *Alt* + left mouse button.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要在着色器图编辑器内移动，你可以使用鼠标滚轮来缩放，并且你可以按住中间鼠标按钮并拖动来平移图表。或者，你也可以使用 *Alt* + 左键鼠标按钮。
- en: 'To get started, let''s add a texture. Right-click to the left of the PBR Master
    and select Create Node. From there, you''ll see a menu that allows you to either
    type in the name of a node or select from the menus. To go through the menus,
    select Input | Texture| Sample Texture 2D. Alternatively, you can type in `tex`,
    then select the Sample Texture 2D option using the arrow keys, and then press
    *Enter*:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要开始，让我们添加一个纹理。在 PBR Master 的左侧右键单击并选择创建节点。从那里，你会看到一个菜单，允许你输入节点的名称或从菜单中选择。要浏览菜单，选择输入
    | 纹理 | 样本纹理 2D。或者，你可以输入 `tex`，然后使用箭头键选择 Sample Texture 2D 选项，然后按 *Enter*：
- en: You can also create a new node by moving your mouse over where you want to create
    one and pressing the Space key.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过将鼠标移到你想创建节点的地方并按空格键来创建一个新的节点。
- en: '![](img/00241.jpeg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00241.jpeg)'
- en: Feel free to click and drag any of the nodes on the Shader Graph to make it
    easier to see.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 随意点击并拖动Shader Graph上的任何节点，使其更容易看到。
- en: 'On the left-hand side of the Sample Texture 2D node, click on the circle with
    the dot in it to assign the texture as something that we can use (I used the Ground_Albedo
    property included with the project):'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“Sample Texture 2D”节点的左侧，点击带有点的圆圈以将纹理分配为我们可以使用的东西（我使用了项目包含的Ground_Albedo属性）：
- en: '![](img/00242.jpeg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00242.jpeg)'
- en: Afterward, you should see the data from the texture given in an image under
    the node.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 此后，您应该在节点下看到来自纹理的数据图像。
- en: 'Click and drag the pink circle on the right-hand side of the Sample Texture
    2D node to the input Albedo node on the PBR Master node:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击并拖动位于“Sample Texture 2D”节点右侧的粉色圆圈到“PBR Master”节点的输入Albedo节点：
- en: '![](img/00243.jpeg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00243.jpeg)'
- en: Just like we've learned in previous chapters, we can give a `fixed4` to a `fixed3`
    and it will just disregard the fourth parameter.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的章节中学到的，我们可以将`fixed4`赋予`fixed3`，它将忽略第四个参数。
- en: If you are ever interested in what a particular node does or what the properties
    stand for, feel free to right click on it and select Open Documentation. It will
    open a window that will give you a description of what the node does.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对某个特定节点的作用或属性的含义感兴趣，请随意右键单击它并选择打开文档。它将打开一个窗口，其中将提供节点作用的描述。
- en: 'Click on the Save Asset button on the top menu and then return to the Unity
    editor:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击顶部菜单中的“保存资产”按钮，然后返回Unity编辑器：
- en: '![](img/00244.jpeg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00244.jpeg)'
- en: As you can see, the shader has now been updated to contain the information from
    the Shader Graph editor!
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，着色器现在已更新，包含来自Shader Graph编辑器的信息！
- en: How it works...
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: From Shader Graph, we are introduced to the first nodes we have encountered.
    Of note is the PBR Master section on the screen. This is where all of the information
    about the shader will go to. You may notice that the properties are very similar
    to the regular Standard Shader we've used in the past, and we can modify the properties
    in a similar manner now, but we can also create additional nodes and connect them
    together to create unique effects.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 从Shader Graph中，我们介绍了我们遇到的第一批节点。值得注意的是屏幕上的“PBR Master”部分。这就是所有关于着色器的信息将去的地方。您可能会注意到属性与过去我们使用的常规Standard
    Shader非常相似，现在我们可以以类似的方式修改属性，但我们还可以创建额外的节点并将它们连接起来以创建独特的效果。
- en: The Sample Texture2D node allows us to give the Texture property as an input
    and then give the data from it as an RGBA output on the right-hand side (things
    on the right side of a node are outputs while things on the left side are inputs,
    such as the Albedo property on the PBR Master node).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: “Sample Texture2D”节点允许我们将“Texture”属性作为输入，然后将其数据作为右侧的RGBA输出（节点右侧的东西是输出，而左侧的东西是输入，例如“PBR
    Master”节点上的Albedo属性）。
- en: Note that the color of the circle from the Texture input is red (the T stands
    for texture), the output of RGBA is pink (the 4 stands for `fixed4`), and the
    input for the Albedo input of the PBR Master node is yellow (the 3 stands for `fixed3`).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，来自“Texture”输入的圆圈颜色为红色（T代表纹理），RGBA的输出为粉色（4代表`fixed4`），而“PBR Master”节点的Albedo输入为黄色（3代表`fixed3`）。
- en: Exposing properties to the Inspector via Shader Graph
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过Shader Graph将属性公开给检查器
- en: It is great to be able to create graphs and set up their properties using the
    graph editor, but sometimes it is nice to use the same shader with a simple tweak
    in the same manner that we've used with the previous shaders we've created. To
    do this, we can make use of the blackboard panel.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 能够使用图编辑器创建图表并设置其属性真是太好了，但有时使用与之前创建的着色器相同的简单调整来使用相同的着色器也很不错。为此，我们可以使用黑板面板。
- en: Getting ready
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Ensure that you have created the SimpleGraph shader in the previous recipe.
    Afterward, complete the following steps:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您在先前的配方中创建了SimpleGraph着色器。之后，完成以下步骤：
- en: From the Project tab, select the SimpleGraph shader and duplicate it by pressing
    *Ctrl* + *D*. Once duplicated, name the newly created shader `ExposeProperty`.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从“项目”选项卡中选择SimpleGraph着色器，并按*Ctrl* + *D*进行复制。一旦复制，将新创建的着色器命名为`ExposeProperty`。
- en: Next, create a new material (`ExposePropertyMat`) and set the shader it uses
    to the graphs/ExposeProperty selection.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建一个新的材质（`ExposePropertyMat`），并将它使用的着色器设置为graphs/ExposeProperty。
- en: 'Assign the material to the sphere in our scene:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将材质分配到场景中的球体上：
- en: '![](img/00245.jpeg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00245.jpeg)'
- en: The project should look the same as what we had in the previous recipe since
    we are using a duplicate of the previous shader.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用的是前一个着色器的副本，所以项目应该看起来与上一个配方中的相同。
- en: How to do it...
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'If you look at our shader from the Inspector tab, you may notice the Texture
    property with the Ground_Albedo image we assigned in the last recipe. A property
    like this could be something we want to modify, but, by default, it is grayed
    out so that we cannot change it without going into the Shader Graph. To adjust
    this, we can expose the property using the Blackboard aspect of the Shader Graph
    Editor:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您从检查器选项卡查看我们的着色器，您可能会注意到我们上一次配方中分配的Ground_Albedo图像的Texture属性。这样的属性可能是我们想要修改的，但默认情况下，它是灰色的，所以我们不能不进入Shader
    Graph就修改它。为了调整这一点，我们可以使用Shader Graph编辑器的Blackboard方面来公开属性：
- en: 'Double-click on the ExposeProperty shader to open up the Shader Graph:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击ExposeProperty着色器以打开Shader Graph：
- en: '![](img/00246.jpeg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00246.jpeg)'
- en: Notice, on the bottom left, the graphs/ExposeProperty blackboard menu. This
    will contain a list of all the parameters we are able to modify via the Inspector.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在左下角，有graphs/ExposeProperty黑板菜单。这将包含我们可以通过检查器修改的所有参数的列表。
- en: As you may already know, Shader Graph is brand new and as such is prone to issues,
    such as the Blackboard not being visible by default. Unfortunately, at this time,
    there's no way to turn it on and off through a menu. If you do not see the Blackboard,
    you might try to save your graph and return. Alternatively, you can reset your
    layout by going into Layout | Revert Factory Settings...
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如您可能已经知道，Shader Graph是全新的，因此容易出问题，例如黑板默认不可见。遗憾的是，目前没有通过菜单开启或关闭它的方法。如果您看不到黑板，您可以尝试保存您的图并返回。或者，您可以通过进入布局
    | 恢复出厂设置来重置您的布局...
- en: 'From the blackboard panel, click on the + icon and select Texture:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从黑板面板中，点击+图标并选择Texture：
- en: '![](img/00247.jpeg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00247.jpeg)'
- en: From there, you can give the property a name (I used `TextureProperty`). Note
    that, under Default, you can assign a texture in the same way as done previously.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从那里，您可以给属性起一个名字（我使用了`TextureProperty`）。请注意，在默认情况下，您可以以与之前相同的方式分配一个纹理。
- en: 'From there, to hook the property to our current shader, drag and drop the button
    with the property name on Shader Graph. Alternatively, you can right-click and
    select Create Node. Once at the menu, you can select Properties | Property: TextureProperty.
    Afterward, connect the TextureProperty output of the Property node to the Texture
    input of the Sample Texture 2D node:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从那里，要将属性连接到我们当前的着色器，请将带有属性名称的按钮拖放到Shader Graph中。或者，您可以右键单击并选择创建节点。一旦进入菜单，您可以选择属性
    | 属性：TextureProperty。之后，将属性节点中的TextureProperty输出连接到Sample Texture 2D节点的Texture输入：
- en: '![](img/00248.jpeg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00248.jpeg)'
- en: 'Afterward, hit the Save Asset button and dive back into the Unity editor:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，点击保存资产按钮并返回Unity编辑器：
- en: '![](img/00249.jpeg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00249.jpeg)'
- en: Now, you should be able to assign the TextureProperty to whatever you want,
    through the Inspector, and you won't have to dive back into the graph to make
    those changes!
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您应该能够通过检查器将TextureProperty分配到任何您想要的地方，而且您不需要再次进入图来做出这些更改！
- en: How it works...
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The Blackboard menu allows you to create variables that are accessible from
    the Inspector. This works in a similar manner to the `Properties` block in previous
    chapters. Currently, it supports the following types:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 黑板菜单允许您创建可以从检查器访问的变量。这与前几章中的`属性`块以类似的方式工作。目前，它支持以下类型：
- en: Vector1
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vector1
- en: Vector2
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vector2
- en: Vector3
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vector3
- en: Vector4
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vector4
- en: Color
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 颜色
- en: Texture
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 纹理
- en: Cubemap
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 立方体贴图
- en: Boolean
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布尔值
- en: Properties added to the Blackboard can be reordered by dragging them around,
    and each property can be renamed by double-clicking on the name.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 添加到黑板上的属性可以通过拖动它们来重新排序，并且可以通过双击名称来重命名每个属性。
- en: For more information on the Blackboard, check out the following link: [https://github.com/Unity-Technologies/ShaderGraph/wiki/Blackboard](https://github.com/Unity-Technologies/ShaderGraph/wiki/Blackboard).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于黑板的信息，请查看以下链接：[https://github.com/Unity-Technologies/ShaderGraph/wiki/Blackboard](https://github.com/Unity-Technologies/ShaderGraph/wiki/Blackboard)。
- en: Implementing a glowing highlight system
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现发光高亮系统
- en: Now that we have some background information on how to build shaders, let's
    look at a real-world example of a shader we could potentially use. When playing
    certain kinds of games, you may notice that, when the player faces an object they
    can interact with, the object may glow such as in Dontnod Entertainment's *Life
    is Strange*, The Fullbright Company‎'s *Gone Home*, and even in recent mobile
    games such as Jam City's *Harry Potter Hogwarts Mystery*. This is something that
    we can easily do in Shader Graph, which will also allow us to see a non-trivial
    example of Shader Graph being used.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ensure that you have created a project using the Lightweight Render Pipeline,
    as described in the *Creating a Shader Graph project* recipe. Afterward, complete
    the following steps:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Create a new scene, if you haven't done so already, by going to File | New Scene
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Afterward, we need to have something to show our shader, so let's create a new
    sphere by going to Game Object | 3D Object | Sphere
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will start off by creating a simple shader graph:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: From the Project window, create a new shader by going to Create Shader PBR Graph, and
    name it `GlowGraph`.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Afterward, create a new material by going to Create | Material (I named mine `GlowGraphMat`).
    Next, assign the shader to the material by selecting the material, and then, from
    the Inspector tab, you should select the Shader dropdown at the top and select graphs/GlowGraph.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, drag and drop the material onto our sphere object in the scene, so we
    can see our shader being used in action.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that the setup is done, we can start creating the graph. If you select the
    shader, you should see that, from the Inspector tab, there will be a button that
    says Open Shader Graph. Click on the button and the Shader Graph Editor will open
    automatically.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Firstly, we will add a new node called a Fresnel (pronounced fer-nel) Effect.
    To add it, go to the left-hand side of the PBR Master node, right-click, and select
    Create Node. From there, type in `Fresnel`, and once it has been selected press
    the *Enter* key.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Fresnel Effect is often used to provide rim-lighting for objects. For more
    information on it, check out: [https://github.com/Unity-Technologies/ShaderGraph/wiki/Fresnel-Effect-Node](https://github.com/Unity-Technologies/ShaderGraph/wiki/Fresnel-Effect-Node).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: Once created, connect the Out of the Fresnel Effect node to the Emission property
    of the PBR Master node.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To make it easier to tell what each node does, click on the grey color to the
    left of the Albedo property and change it to a different color, such as a bright
    pink:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00250.jpeg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
- en: Notice how the Fresnel effect is applied on top of the Albedo color due to it
    using that value for the Emission property.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: We just want the edges of our object to glow, so change the `Power` property
    of the Fresnel Effect node to `4`. Currently, the light around our object is white,
    but we can make it a different color instead by multiplying it by a color.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To do this, go to the Blackboard and create a new color by clicking on the +
    icon and then selecting Color. Once created, give it a name (`HoverColor`) and
    then set the Default color.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要做到这一点，请转到黑板并点击 + 图标创建一个新的颜色，然后选择颜色。创建后，给它起一个名字（`HoverColor`），然后设置默认颜色。
- en: 'Once created, drag and drop the property beneath the Fresnel Effect node in
    the same way we learned in the previous recipe:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建完成后，以我们之前在配方中学习的方式，将属性拖放到 Fresnel Effect 节点下方：
- en: '![](img/00251.jpeg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00251.jpeg)'
- en: 'Now, we need to multiply these together. Create a new node between them by
    selecting Math | Basic | Multiply. Connect the Out of the Fresnel Effect node
    to the A of the Multiply node. Then, connect the HoverColor property to the B
    of the Multiply node. Afterward, connect the Out of the Multiply node to the Emission
    property:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要将它们相乘。通过选择 Math | Basic | Multiply 在它们之间创建一个新的节点。将 Fresnel Effect 节点的输出连接到乘法节点的
    A。然后，将 HoverColor 属性连接到乘法节点的 B。之后，将乘法节点的输出连接到发射属性：
- en: '![](img/00252.jpeg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00252.jpeg)'
- en: Save the graph and dive back into the Unity editor. You should notice that the
    effect is indeed working as intended.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存图并返回 Unity 编辑器。你应该会注意到效果确实按预期工作。
- en: 'From the Project tab, select the `GlowGraph` shader we''ve created. Notice
    that the Inspector tab includes information on the properties used in the shader:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目标签页中选择我们创建的 `GlowGraph` 着色器。注意，检查器标签页包含了着色器中使用的属性信息：
- en: '![](img/00253.jpeg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00253.jpeg)'
- en: Even though we are using the name HoverColor in the shader graph, throughout
    code it is referred to as `Color_AA468061`. If we wish to refer to this in the
    code, we will need to use this name latter instead.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们在着色器图中使用的是 HoverColor 这个名称，但在整个代码中它被称作 `Color_AA468061`。如果我们想在代码中引用它，就需要使用这个名称。
- en: 'Create a new C# Script called `HighlightOnHover`. Double-click on it to enter
    your IDE, and use the following code:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 C# 脚本，命名为 `HighlightOnHover`。双击它进入你的 IDE，并使用以下代码：
- en: '[PRE0]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Save your script and return to the Unity editor. From there, attach the component
    to your sphere and start the game:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存你的脚本并返回 Unity 编辑器。从那里，将组件附加到你的球体上并开始游戏：
- en: '![](img/00254.jpeg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00254.jpeg)'
- en: Now, when we highlight the object with the mouse, we will see the hover effect,
    but, otherwise, it will turn itself off!
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们用鼠标高亮对象时，我们会看到悬停效果，但除此之外，它将自动关闭！
- en: How it works...
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The Emission property is reflective of the light that an object receives. If
    the Emission is white it will be fully lit with that color. If black, it will
    act as if it doesn't exist. We make use of that by using black by default. However,
    if we do put our mouse over the object, the `OnMouseOver` function will trigger,
    causing it to use the color mentioned.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 发射属性反映了物体接收到的光线。如果发射是白色，它将以该颜色完全照亮。如果是黑色，它将表现得好像不存在。我们通过默认使用黑色来利用这一点。然而，如果我们把鼠标放在物体上，`OnMouseOver`
    函数将被触发，导致它使用提到的颜色。
- en: I could write much more on the subject of Shader Graph, but, unfortunately,
    there isn't enough space in the book. If you would like to explore Shader Graph
    even more, Andy Touch has put together a lovely group of examples of Shader Graph
    being used that could be great research material. Check it out at [https://github.com/UnityTechnologies/ShaderGraph_ExampleLibrary](https://github.com/UnityTechnologies/ShaderGraph_ExampleLibrary).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以就 Shader Graph 的话题写更多，但遗憾的是，这本书的空间不够。如果你想更深入地探索 Shader Graph，Andy Touch 已经整理了一系列
    Shader Graph 的使用示例，这些可以作为很好的研究材料。请查看[https://github.com/UnityTechnologies/ShaderGraph_ExampleLibrary](https://github.com/UnityTechnologies/ShaderGraph_ExampleLibrary)。
