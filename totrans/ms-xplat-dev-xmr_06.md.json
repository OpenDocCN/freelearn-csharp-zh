["```cs\npublic override void StartProvidingItemAtUrl (NSUrl url, Action<NSError> completionHandler)\n{\n  NSError error, fileError = null;\n  NSData fileData;\n\n  // TODO: get the file data for file at <url> from model\n  fileData = new NSData ();\n\n  FileCoordinator.CoordinateWrite (url, 0, out error, (newUrl) => fileData.Save (newUrl, 0, out fileError));\n\n  if (error != null)\n    completionHandler (error);\n  else\n    completionHandler (fileError);\n}\n```", "```cs\n[ContentProvider(new string[] { \"com.xamarin.master.traveltrace.TripProvider\" })]\npublic class TripDataProvider : ContentProvider\n```", "```cs\npublic new static class InterfaceConsts\n{\n    public const string Id = \"Id\";\n    public const string Name = \"Name\";\n    public const string Description = \"Description\";\n    public const string Date = \"Date\";\n    public const string Location = \"Location\";\n    public const string ContentPath = \"ContentPath\";\n}\n```", "```cs\nprivate UriMatcher GetUriMatcher()\n{\n    var matcher = new UriMatcher(UriMatcher.NoMatch);\n\n    // to get data...\n    matcher.AddURI(Authority, _basePath, (int) QueryType.List);\n    matcher.AddURI(Authority, _basePath + \"/#\", (int) QueryType.Single);\n\n    return matcher;\n}\n```", "```cs\npublic override global::Android.Database.ICursor Query(global::Android.Net.Uri uri, string[] projection, string selection, string[] selectionArgs, string sortOrder)\n{\n    switch ((QueryType) m_UriMatcher.Match(uri))\n    {\n        case QueryType.List:\n            // TODO:\n        case QueryType.Single:\n            // TODO:\n        default:\n            throw new Java.Lang.IllegalArgumentException(\"Unknown Uri: \" + uri);\n    }\n}\n```", "```cs\n<manifest ... >\n  <uses-permission android:name=\"android.permission.BLUETOOTH\" />\n  ...\n</manifest> \n```", "```cs\nm_LocationService = GetSystemService(LocationService) as LocationManager;\n\nif (m_LocationService != null)\n{\n    if (m_LocationService.IsProviderEnabled(LocationManager.GpsProvider))\n    {\n        // Get updates in min every 5 seconds for every minimum 2m change\n        m_LocationService.RequestLocationUpdates(LocationManager.GpsProvider, 5000, 2, m_LocationListener);\n    }\n    else if (m_LocationService.IsProviderEnabled(LocationManager.NetworkProvider))\n    {\n        // Get updates in min every 10 seconds for every minimum // 10m change\n        m_LocationService.RequestLocationUpdates(LocationManager.NetworkProvider, 10000, 10, m_LocationListener);\n    }\n}\n```", "```cs\npublic class LocationListener : Java.Lang.Object, ILocationListener\n{\n    public void OnLocationChanged(Location location)\n    {\n        Trace.WriteLine(string.Format(\"Lat:{0}, Long {1}\", location.Latitude, location.Longitude), \"OnLocationChanged\");\n    }\n\n    public void OnProviderDisabled(string provider)\n    {\n        Trace.WriteLine(string.Format(\"Location Provider '{0}' is disabled\", provider), \"OnProviderDisabled\");\n    }\n\n    public void OnProviderEnabled(string provider)\n    {\n        Trace.WriteLine(string.Format(\"Location Provider '{0}' is enabled\", provider), \"OnProviderEnabled\");\n    }\n\n    public void OnStatusChanged(string provider, Availability status, Bundle extras)\n    {\n        Trace.WriteLine(string.Format(\"Location Provider '{0}' status changed to {1}\", provider, status), \"OnStatusChanged\");\n    }\n}\n```", "```cs\nm_GoogleClient = new GoogleApiClient.Builder(this)\n        .AddApi(Gms.Location.LocationServices.API)\n        .AddConnectionCallbacks(this)\n        .AddOnConnectionFailedListener(this)\n        .Build();\n\nm_GoogleClient.Connect();\n```", "```cs\nprivate async Task RequestLocationUpdates(GoogleApiClient apiClient)\n{\n    // Describe our location request\n    var locationRequest = new Gms.Location.LocationRequest()\n        .SetInterval(5000) // Setting the interval to 5 seconds\n        .SetSmallestDisplacement(5) // Setting the smallest update delta to 5 meters\n        .SetPriority(Gms.Location.LocationRequest.PriorityHighAccuracy)\n        // Setting the priority to Fine and High Power\n        .SetExpirationDuration(20000); // Stopping the location updates after 20 seconds.\n\n    // Request updates\n    await Gms.Location.LocationServices.FusedLocationApi\n        .RequestLocationUpdates(apiClient, locationRequest, m_LocationListener);\n}\n```", "```cs\n_LocationManager = new CLLocationManager();\n\n_LocationManager.RequestWhenInUseAuthorization();\n\n_LocationManager.RequestAlwaysAuthorization();\n```", "```cs\nif (CLLocationManager.LocationServicesEnabled)\n{\n    _LocationManager.LocationsUpdated += (sender, eventArgs) =>\n    {\n        Debug.WriteLine(\n            string.Format(\"Lat:{0}, Long {1}\",\n            eventArgs.Locations[0].Coordinate.Latitude,\n            eventArgs.Locations[0].Coordinate.Longitude), \"OnLocationChanged\");\n    };\n\n    // Every ~500m an update\n    _LocationManager.StartMonitoringSignificantLocationChanges();\n\n    // Every 10m send an update event\n    _LocationManager.DistanceFilter = 10;\n    _LocationManager.StartUpdatingLocation();\n}\n```", "```cs\nif (CLLocationManager.HeadingAvailable)\n{\n    // update the heading\n    _LocationManager.StartUpdatingHeading();\n    _LocationManager.UpdatedHeading += (sender, eventArgs) =>\n    {\n        Debug.WriteLine(\"New Heading: X: {0} Y: {1} Z: {2}\", \n            eventArgs.NewHeading.X, \n            eventArgs.NewHeading.Y,\n            eventArgs.NewHeading.Z);\n    };\n}\n```", "```cs\nvar accessStatus = await Geolocator.RequestAccessAsync();\nif(accessStatus == GeolocationAccessStatus.Allowed)\n{\n    // Give update in every 5 meters\n    Geolocator geolocator = new Geolocator { DesiredAccuracyInMeters = 5 };\n\n    // Use StatusChanged event for Geolocator status change\n    geolocator.StatusChanged += OnStatusChanged;\n\n    // Use PositionChanged event for Geolocator status change\n    geolocator.PositionChanged += (sender, eventArgs) =>\n    {\n        UpdateLocationData(eventArgs.Position);\n    }\n\n    // Get the current position\n    Geoposition pos = await geolocator.GetGeopositionAsync();\n\n    UpdateLocationData(pos);\n}\n```", "```cs\nvar region = new CLCircularRegion(\nnew CLLocationCoordinate2D(43.8592, 018.4315), 600, \n\"Old Town\");\n\nif (CLLocationManager.IsMonitoringAvailable(typeof (CLCircularRegion)))\n{\n    _LocationManager.DidStartMonitoringForRegion += (sender, eventArgs) =>\n    {\n        Debug.WriteLine(string.Format(\"Starting region monitoring for {0}\",\n       eventArgs.Region.Identifier));\n    };\n\n    _LocationManager.RegionEntered += (sender, eventArgs) =>\n    {\n        CreateLocalNotification(\"Welcome to Old Town\", \n            \"Don't forget to take stroll down the Bascarsija and visit the historic national library!\");\n    };\n\n    _LocationManager.RegionLeft += (sender, eventArgs) =>\n    {\n        Debug.WriteLine(string.Format(\"User left {0}\",\n        eventArgs.Region.Identifier));\n    };\n\n    _LocationManager.StartMonitoring(region);\n}\n```", "```cs\npublic void OnConnected(Bundle connectionHint)\n{\n    var intent = new Intent(this, typeof(GeofenceListenerService));\n    var pendingIntent = PendingIntent.GetService(this, 0, intent, PendingIntentFlags.UpdateCurrent);\n\n    var geoFence =\n        new GeofenceBuilder().SetRequestId(\"OldTown\")\n            .SetTransitionTypes(Geofence.GeofenceTransitionEnter | Geofence.GeofenceTransitionExit)\n            .SetCircularRegion(43.8592, 018.4315, 600)\n            .SetExpirationDuration(200000) // Expiration Duration is obligatory\n            .Build();\n\n    var geofenceRequest = (new GeofencingRequest.Builder()).AddGeofence(geoFence).Build();\n\n    //\n    // The async version can be used instead\n    // await LocationServices.GeofencingApi.AddGeofencesAsync(m_GoogleClient, geofenceRequest, pendingIntent);\n    LocationServices.GeofencingApi.AddGeofences(m_GoogleClient, geofenceRequest, pendingIntent);\n}\n```", "```cs\n[Service(Exported = false)]\npublic class GeofenceListenerService : IntentService\n{\n    public GeofenceListenerService() : base(\"GeoFenceListenerService\")\n    {\n    }\n\n    protected override void OnHandleIntent(Intent intent)\n    {\n        var geofencingEvent = GeofencingEvent.FromIntent(intent);\n\n        if (geofencingEvent.HasError)\n        {\n            int errorCode = geofencingEvent.ErrorCode;\n            // TODO: Log Error\n        }\n        else\n        {\n            var requestId = geofencingEvent.TriggeringGeofences[0].RequestId;\n\n            switch (geofencingEvent.GeofenceTransition)\n            {\n                case Geofence.GeofenceTransitionEnter:\n                    if (requestId == \"OldTown\")\n                    {\n                        Toast.MakeText(Application.Context,\n                            \"Don't forget to take stroll down the Bascarsija and visit the historic national library!\",\n                            ToastLength.Short);\n                    }\n                    break;\n                case Geofence.GeofenceTransitionExit:\n                    Debug.WriteLine(string.Format(\"User left {0}\", requestId));\n                    break;\n            }\n        }\n\n    }\n}\n```", "```cs\nstring fenceId = \"OldTown\";\n\n// Define fence properties\nBasicGeoposition position;\nposition.Latitude = 43.8592;\nposition.Longitude = 018.4315;\nposition.Altitude = 0.0;\ndouble radius = 600; // in meters\n\nGeocircle geocircle = new Geocircle(position, radius);\n\n// Create the geofence\nGeofence geofence = new Geofence(fenceId, geocircle);\n```", "```cs\nGeofenceMonitor.Current.GeofenceStateChanged += OnGeofenceStateChanged;\nGeofenceMonitor.Current.StatusChanged += OnGeofenceStatusChanged;\n```", "```cs\nnamespace Org.Json.Simple.Parser {\n\n  // Metadata.xml XPath class reference: path=\"/api/package[@name='org.json.simple.parser']/class[@name='JSONParser']\"\n    [global::Android.Runtime.Register (\n                \"org/json/simple/parser/JSONParser\", \n                DoNotGenerateAcw=true)]\n  public partial class JSONParser : global::Java.Lang.Object {\n        ...\n```", "```cs\n<attr path=\"/api/package[@name='org.json.simple']\" name=\"managedName\">Json.Simple</attr>\n```", "```cs\n<attr path=\"/api/package[@name='org.json.simple']/class[@name='JSONParser']\" name=\"managedName\">JsonParser</attr>\n```", "```cs\nnamespace Json.Simple.Parser {\n\n  // Metadata.xml XPath class reference: path=\"/api/package[@name='org.json.simple.parser']/class[@name='JSONParser']\"\n  [global::Android.Runtime.Register (\"org/json/simple/parser/JSONParser\", DoNotGenerateAcw=true)]\n  public partial class JsonParser : global::Java.Lang.Object {\n```", "```cs\nlipo -create -output libFatBinary.a libThinBinary-i386.a libThinBinary-arm64.a libThinBinary-armv7.a\n\n```", "```cs\n-gcc_flags \"-L${ProjectDir} -lFatBinary -force_load ${ProjectDir}/libFatBinary.a\n\n```", "```cs\n[assembly: LinkWith (\"libFatBinary.a\",     \nLinkTarget.ArmV7|LinkTarget.ArmV7s|LinkTarget.Simulator|LinkTarget.Simulator64|LinkTarget.Arm64, \nForceLoad = true, \nFrameworks = \"CoreFoundation CoreData CoreLocation\", \nLinkerFlags = \"-lz -lsqlite3\", \nIsCxx = true)]\n```"]