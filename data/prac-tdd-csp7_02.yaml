- en: Setting Up the .NET Test Environment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 .NET 测试环境
- en: In this chapter, we'll explore setting up your development environment. We'll
    be covering both C# and .NET. In the following chapter, we will focus on setting
    up a JavaScript and React environment. We'll delve into more examples, starting
    with the classic code kata entitled *FizzBuzz,* and then into more real-world
    samples from the *Speaker Meet* site.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨设置你的开发环境。我们将涵盖 C# 和 .NET。在下一章中，我们将专注于设置 JavaScript 和 React 环境。我们将从经典的
    *FizzBuzz* 代码练习开始，然后深入到 *Speaker Meet* 网站的实际示例。
- en: 'In this chapter, you will gain an understanding of:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将了解以下内容：
- en: Installing your IDE
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装你的 IDE
- en: How to set up your testing framework
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何设置你的测试框架
- en: Writing your first tests in C#
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 C# 中编写你的第一个测试
- en: Installing the .NET Core SDK
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 .NET Core SDK
- en: Before you get started with the development environments, you will want to install
    the .NET Core SDK. You'll need to navigate to the .NET Core download page on the
    Microsoft website ([https://www.microsoft.com/net/download/core](https://www.microsoft.com/net/download/core)).
    Select the proper installer for your system. For Windows machines, the `.exe`
    download is recommended.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始开发环境之前，你需要安装 .NET Core SDK。你需要导航到微软网站上的 .NET Core 下载页面（[https://www.microsoft.com/net/download/core](https://www.microsoft.com/net/download/core)）。选择适合你系统的正确安装程序。对于
    Windows 计算机，推荐下载 `.exe` 文件。
- en: Follow the onscreen instructions for the install wizard to install the .NET
    Core SDK.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 按照安装向导的屏幕说明安装 .NET Core SDK。
- en: Getting set up with VS Code
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 VS Code 设置环境
- en: One benefit of choosing VS Code for your development is that it is an excellent
    IDE for both .NET and JavaScript. To get started using VS Code, you must first
    download the IDE.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 选择 VS Code 作为你的开发工具的一个好处是，它是一个优秀的 IDE，适用于 .NET 和 JavaScript。要开始使用 VS Code，你必须首先下载这个
    IDE。
- en: Downloading the IDE
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载 IDE
- en: 'Visit the VS Code website ([https://code.visualstudio.com/](https://code.visualstudio.com/))
    and choose the proper version for your operating system:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 访问 VS Code 网站（[https://code.visualstudio.com/](https://code.visualstudio.com/)）并选择适合你操作系统的版本：
- en: '![](img/00005.jpeg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00005.jpeg)'
- en: Installing the VS Code
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 VS Code
- en: 'Follow the instructions in the wizard to install the VS Code:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 按照向导中的说明安装 VS Code：
- en: '![](img/00006.jpeg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00006.jpeg)'
- en: 'Be sure to read and accept the License Agreement:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一定要阅读并接受许可协议：
- en: '![](img/00007.jpeg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00007.jpeg)'
- en: 'Choose a location on your hard drive to install VS Code. The default path is
    usually acceptable:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的硬盘上选择一个位置来安装 VS Code。默认路径通常是可接受的：
- en: '![](img/00008.jpeg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00008.jpeg)'
- en: 'Choose to create a Start menu folder for the application, select a location,
    or choose to not create a Start menu folder:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 选择为应用程序创建开始菜单文件夹，选择位置，或者选择不创建开始菜单文件夹：
- en: '![](img/00009.jpeg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00009.jpeg)'
- en: 'Select additional tasks. The default should be fine for our purposes, as shown
    in the following screenshot:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 选择额外的任务。默认设置应该适合我们的目的，如以下截图所示：
- en: '![](img/00010.jpeg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00010.jpeg)'
- en: 'Review your installation settings and click on Install:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 检查你的安装设置并点击安装：
- en: '![](img/00011.jpeg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00011.jpeg)'
- en: 'Once the install is finished, you''re OK to launch the application:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，你可以启动应用程序：
- en: '![](img/00012.jpeg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00012.jpeg)'
- en: Adding extensions
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加扩展
- en: VS Code is a fairly lightweight and bare-bones IDE. You'll need to install C#
    to get started. When you launched VS Code for the first time, your browser should
    have opened to the Getting Started page on the VS Code website. If it didn't,
    go there now ([https://code.visualstudio.com/docs](https://code.visualstudio.com/docs)).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: VS Code 是一个相对轻量级且基础简单的 IDE。要开始使用，你需要安装 C#。当你第一次启动 VS Code 时，你的浏览器应该会打开 VS Code
    网站上的入门页面。如果没有，现在就去那里（[https://code.visualstudio.com/docs](https://code.visualstudio.com/docs)）。
- en: There are a variety of useful extensions that you can install from the marketplace.
    For now, all you will need is C#. At the time of writing, C# was listed near the
    top of the Top Extensions list. Click on the C# tile (or find it by searching
    in the marketplace) to learn more about this extension.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从市场安装各种有用的扩展。目前，你只需要 C#。在撰写本文时，C# 列在顶级扩展列表的顶部。点击 C# 磁贴（或通过市场搜索）了解更多关于这个扩展的信息。
- en: 'You should see that the installation instructions direct you to launch VS Code
    Quick Open (*Ctrl*-*P*) and paste the following command:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到安装说明会指导你启动 VS Code 快速打开（*Ctrl*-*P*）并粘贴以下命令：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: From within VS Code, paste the command into the Quick Open section and press
    *Enter*. Find the C# version powered by OmniSharp and choose Install. Once the
    C# extension is installed, you will need to reload VS Code to activate the C#
    extension (choose reload).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在VS Code内部，将命令粘贴到快速打开部分并按*Enter*键。找到由OmniSharp提供的C#版本并选择安装。一旦C#扩展被安装，你需要重新加载VS
    Code以激活C#扩展（选择重新加载）。
- en: Creating a project in VS Code
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在VS Code中创建项目
- en: Now that your VS Code IDE is properly installed with the C# extension enabled,
    you are ready to create your first project.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的VS Code IDE已经正确安装，并且C#扩展已启用，你就可以创建你的第一个项目了。
- en: With VS Code open, choose Open Folder from the File menu. Choose a location
    that is easily accessible. Many developers will create a `Development` folder
    on the root of their drive. Whatever convention you're used to will be fine. You
    now need to create an *MSTest* project.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在VS Code打开的情况下，从文件菜单中选择“打开文件夹”。选择一个易于访问的位置。许多开发者会在驱动器的根目录下创建一个`Development`文件夹。无论你习惯使用什么约定，都可以。你现在需要创建一个*MSTest*项目。
- en: Create a new folder named `Sample`. Open the Integrated Terminal window from
    the View menu or by using the shortcut keys (*Ctrl* + *`*). From within the Terminal
    window, type `dotnet new mstest` and hit *Enter*. Now, you need to restore your
    packages by typing `dotnet restore` into the Terminal window and hitting *Enter*.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`Sample`的新文件夹。从视图菜单或使用快捷键（*Ctrl* + *`*）打开集成终端窗口。在终端窗口内部，输入`dotnet new
    mstest`并按*Enter*键。现在，你需要通过在终端窗口中输入`dotnet restore`并按*Enter*键来恢复你的包。
- en: 'You should now see a file named `UnitTest1.cs` within the `Sample` folder.
    If you open the file, it should look something like this:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该在`Sample`文件夹中看到一个名为`UnitTest1.cs`的文件。如果你打开该文件，它应该看起来像这样：
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Change the first test method to an `ItExists` test. Do this by changing the
    name to `ItExists` and trying to declare an instance to a class that does not
    yet exist:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 将第一个测试方法更改为`ItExists`测试。通过将名称更改为`ItExists`并尝试声明一个尚未存在的类的实例来完成此操作：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You should see that your sample application will not compile and you will have
    received the error message, `The type or namespace 'SampleClass' could not be
    found (are you missing a using directive or an assembly reference?)`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到你的示例应用程序无法编译，并且你已经收到了错误消息：“找不到类型或命名空间'SampleClass'（你是否遗漏了using指令或程序集引用？）”
- en: 'Now that you have a test failure (remember, failing to compile counts as a
    failing test in this instance), it''s safe to move on to the *Green* step in our
    *red, green, refactor* cycle. Make the test pass by creating a definition for
    `SampleClas*s*`. Feel free to create the class in the same file as your unit tests,
    just to get you started. This can always be extracted and moved to a more appropriate
    location later:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经有一个测试失败（记住，编译失败在这个例子中也被视为失败的测试），可以安全地继续到我们的*红、绿、重构*循环中的*绿*步骤。通过为`SampleClas*s*`创建一个定义来使测试通过。你可以自由地将类创建在包含你的单元测试的同一文件中，以便开始。这始终可以在稍后提取并移动到更合适的位置：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now that you''ve made the change, run the `test` command `dotnet test`and see
    the results:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经做了更改，运行`test`命令`dotnet test`并查看结果：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Continue exploring VS Code and growing your new class through tests. The C#
    and .NET examples throughout the rest of the book will be using Visual Studio
    Community. If you prefer, you may choose to stick with VS Code.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 继续探索VS Code并通过测试扩展你的新类。本书其余部分的所有C#和.NET示例都将使用Visual Studio Community。如果你愿意，你也可以选择继续使用VS
    Code。
- en: Setting up Visual Studio Community
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Visual Studio Community
- en: Most C# and .NET developers will be familiar with Visual Studio. There are a
    variety of versions available, ranging from free to many thousands of dollars
    annually. As of this writing, the Enterprise version was the most fully featured
    version, offering some of the best features for tests and testing. For our purposes,
    we'll be using Visual Studio Community. This is a free, fully featured development
    environment that should suit us well.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数C#和.NET开发者都会熟悉Visual Studio。它有多种版本可供选择，从免费版到每年数千美元不等。截至本文撰写时，企业版是最全面的功能版本，提供了测试和测试的一些最佳功能。为了我们的目的，我们将使用Visual
    Studio Community。这是一个免费且功能齐全的开发环境，应该非常适合我们。
- en: The Community edition does have some very important caveats. There are limitations
    to the software license and the use of the Community edition, based on the terms
    of the license agreement. Please make sure to read the terms before deciding to
    use Visual Studio Community edition to develop software that you intend to sell.
    The current terms can be found at [https://www.visualstudio.com/license-terms/mlt553321/](https://www.visualstudio.com/license-terms/mlt553321/).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 社区版确实有一些非常重要的注意事项。根据许可协议的条款，软件许可和社区版的用途存在一些限制。请在决定使用 Visual Studio 社区版开发您打算出售的软件之前，务必阅读这些条款。当前条款可以在[https://www.visualstudio.com/license-terms/mlt553321/](https://www.visualstudio.com/license-terms/mlt553321/)找到。
- en: Downloading Visual Studio Community
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载 Visual Studio Community
- en: 'To get started, download Visual Studio Community ([https://www.visualstudio.com/downloads/](https://www.visualstudio.com/downloads/)).
    Feel free to explore and compare the different versions of Visual Studio while
    you''re there:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用，请下载 Visual Studio Community ([https://www.visualstudio.com/downloads/](https://www.visualstudio.com/downloads/))。您可以在那里自由探索和比较不同版本的
    Visual Studio：
- en: '![](img/00013.jpeg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00013.jpeg)'
- en: Installing Visual Studio Community
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Visual Studio Community
- en: The wizard for installing Visual Studio Community is a little different from
    the install wizard for VS Code. Of course, to get started, you'll need to read
    and agree to the license agreement.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Visual Studio Community 的向导与 VS Code 的安装向导略有不同。当然，要开始使用，您需要阅读并同意许可协议。
- en: At a minimum, you'll want to choose ASP.NET and web development and .NET Core
    cross-platform development if you plan to follow along with the book. We've also
    chosen to include ASP.NET MVC 4, .NET Framework 4.6.2 development tools, and .NET
    Framework 4.7 development tools from the right pane, or from the *Individual components*
    tab*.* You might want to explore other components and/or language packs, as well.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 至少，如果您打算按照本书的内容进行，您将想要选择 ASP.NET 和 Web 开发以及 .NET Core 跨平台开发。我们还在右侧面板或“单个组件”标签*中选择了
    ASP.NET MVC 4、.NET Framework 4.6.2 开发工具和 .NET Framework 4.7 开发工具。您可能还想探索其他组件和/或语言包。
- en: Switching to xUnit
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 切换到 xUnit
- en: MSTest has long shipped with Visual Studio. There are a few other options when
    it comes to testing frameworks for C# and .NET. Many of these frameworks have
    feature parity and differ only slightly in their choices of attributes, assertions,
    and exception handling. Among the top contenders for testing frameworks is xUnit.
    Many developers actually prefer this to MSTest and would argue that it is more
    feature-rich and has stronger community support. Arguments aside, we'll be using
    xUnit for our C# and .NET tests from here on out.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: MSTest 早已与 Visual Studio 一起发货。在 C# 和 .NET 的测试框架方面，还有一些其他选择。许多这些框架具有功能一致性，只是在属性、断言和异常处理的选择上略有不同。在测试框架的顶级竞争者中，xUnit
    是其中之一。许多开发者实际上更喜欢它，并会争论说它功能更丰富，社区支持更强。不论争论如何，从现在开始，我们将使用 xUnit 进行我们的 C# 和 .NET
    测试。
- en: Feel free to stick with MSTest if you prefer. Just know that you'll need to
    account for the semantic differences (such as *TestMethod* vs *Fact*) and slight
    differences in functionality.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您更喜欢 MSTest，请随意。只需知道您需要考虑语义差异（例如 *TestMethod* 与 *Fact*）和功能上的细微差异。
- en: Code katas
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码 kata
- en: What is a code kata? Code katas are nothing more than repeatable exercises.
    Generally, these exercises are meant to take no more than 20 minutes to complete.
    Most code katas are directed at a specific classification of a problem to solve.
    We'll be utilizing the classic example, FizzBuzz, as a way to get you more comfortable
    with TDD using xUnit.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是代码 kata？代码 kata 仅仅是可重复的练习。通常，这些练习的完成时间不超过 20 分钟。大多数代码 kata 都针对解决特定分类的问题。我们将利用经典的
    FizzBuzz 示例，作为让您更熟悉使用 xUnit 进行 TDD 的方式。
- en: FizzBuzz
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FizzBuzz
- en: The rules of FizzBuzz are quite simple. If the number provided is divisible
    by 3, then you must return `Fizz`. If the number supplied is divisible by 5, then
    you must return `Buzz`. If the number is divisible by both 3 and 5, then you must
    return `FizzBuzz`. If it is divisible by neither 3 nor 5, then simply return the
    number itself.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: FizzBuzz 的规则相当简单。如果提供的数字能被 3 整除，那么您必须返回 `Fizz`。如果提供的数字能被 5 整除，那么您必须返回 `Buzz`。如果数字能同时被
    3 和 5 整除，那么您必须返回 `FizzBuzz`。如果它既不能被 3 也不能被 5 整除，那么只需返回该数字本身。
- en: There are a plethora of options in which to solve the problem. It can be solved
    in nearly every programming language, in a variety of different ways. What's important
    here is to practice the techniques of solving the problem simply and effectively.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题的选项有很多。几乎在每种编程语言中都可以以不同的方式解决。这里重要的是练习简单有效地解决问题的技巧。
- en: Let's get started.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。
- en: Creating the test project
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建测试项目
- en: Within Visual Studio Community, create an xUnit test project by choosing New
    | Project from the File menu or by using the shortcut keys (*Ctrl *- *Shift *- *N*).
    Under .NET Core, choose xUnit Test Project. Give your project the name `CodeKata`
    and click on OK. You will see a filename `UnitTest1.cs`. This file is fine to
    get you started. Let's create our first test.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Visual Studio Community 中，通过选择文件菜单中的新建 | 项目或使用快捷键 (*Ctrl* - *Shift* - *N*)
    来创建一个 xUnit 测试项目。在 .NET Core 下，选择 xUnit 测试项目。给你的项目命名为 `CodeKata` 并点击确定。你会看到一个名为
    `UnitTest1.cs` 的文件名。这个文件可以让你开始。让我们创建我们的第一个测试。
- en: The Given3ThenFizz test
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Given3ThenFizz 测试
- en: 'The first test method in the `UnitTest1.cs` file is named `Test1`. Let''s change
    the name of this method to `Given3ThenFizz` and write our first test:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`UnitTest1.cs` 文件中的第一个测试方法是 `Test1`。让我们将这个方法的名称更改为 `Given3ThenFizz` 并编写我们的第一个测试：'
- en: '[PRE5]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note that the `Fact` attribute and `Assert.Equal` assertion differ only slightly
    from our previous MSTest example. We're leaving the `Arrange`*,* `Act`*,* and
    `Assert` comments in place, and recommend you do the same. These comments will
    help you as you get started. They'll also serve to help describe the process to
    any developers that come behind you in the future.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`Fact` 属性和 `Assert.Equal` 断言与我们之前 MSTest 的例子只有细微的差别。我们保留 `Arrange`*、* `Act`*、*
    和 `Assert` 注释，并建议你也这样做。这些注释将帮助你开始，同时也会帮助未来的开发者理解这个过程。
- en: 'Now, run the test to see whether it passes by selecting Run | All Tests from
    the Test menu, or by using the shortcut keys (*Ctrl* + *R*, *A*). You should see
    a compilation error. Let''s resolve the error by creating a `FizzBuzz` method
    preceding our `test` class. Once you''ve created the `FizzBuzz` method, rerun
    your test to see it pass. Remember, based on the third law of TDD, you should
    only write enough code to make it pass:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过选择测试菜单中的运行 | 所有测试，或使用快捷键 (*Ctrl* + *R*, *A*) 来运行测试，看看它是否通过。你应该看到一个编译错误。让我们通过在
    `test` 类之前创建一个 `FizzBuzz` 方法来解决这个错误。一旦你创建了 `FizzBuzz` 方法，重新运行你的测试以查看它是否通过。记住，根据
    TDD 的第三定律，你应该只编写足够多的代码来让它通过：
- en: '[PRE6]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The Given5ThenBuzz test
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Given5ThenBuzz 测试
- en: 'Our next requirements state that we must return `Buzz` when 5 is supplied.
    Let''s write that test:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来的要求是，当提供 5 时必须返回 `Buzz`。让我们写这个测试：
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'How might we make that test pass? Perhaps a simple ternary operator? Let''s
    take a look at what that might look like:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何让这个测试通过？或许是一个简单的三元运算符？让我们看看它可能的样子：
- en: '[PRE8]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You might see a problem with our algorithm already. That's OK! We're not done
    yet. We've only gotten as far as the tests have guided us, and so far we're passing
    all of our tests. Let’s move on to the next most interesting test.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经看到了我们算法的问题。没关系！我们还没有完成。我们只走到了测试引导我们的地方，到目前为止，我们通过了所有的测试。让我们继续到下一个最有趣的测试。
- en: The Given15ThenFizzBuzz test
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Given15ThenFizzBuzz 测试
- en: 'You might want to write a test method entitled `GivenDivisibleBy3and5ThenFizzBuzz`,
    but that may be too large of a leap at this point. We know that the first such
    number divisible by 3 and 5 is 15, so it might make more sense to start with this:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想写一个名为 `GivenDivisibleBy3and5ThenFizzBuzz` 的测试方法，但在这个阶段这可能是一个太大的跳跃。我们知道第一个能被
    3 和 5 整除的数是 15，所以从这一点开始可能更有意义：
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How would you choose to make this test pass? Would you use an *if/else* statement?
    Perhaps a *switch* statement? We’ll leave this one as an exercise for the reader.
    Feel free to make this test pass in any way that you're comfortable with implementing.
    Remember to run your tests along the way to ensure you don't introduce a breaking
    change. If you do experience a test failure, feel free to ignore a test (*Ignore*
    attribute in MSTest, *Skip* parameter in xUnit), but only one test, while you
    fix your error(s).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你会如何选择让这个测试通过？你会使用一个 *if/else* 语句吗？或许是一个 *switch* 语句？我们将把这个留作读者的练习。请随意以你舒适的方式实现这个测试通过。记住，在过程中运行你的测试以确保你没有引入破坏性的更改。如果你确实遇到了测试失败，请随意忽略一个测试（MSTest
    中的 *Ignore* 属性，xUnit 中的 *Skip* 参数），但只忽略一个测试，同时你修复错误。
- en: The Given1Then1 test
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Given1Then1 测试
- en: 'We''ve covered `Fizz`. We''ve covered `Buzz`. And, we''ve covered `FizzBuzz`.
    Now we must account for numbers that are divisible by neither 3 nor 5.  Remember,
    in the event that a number is divisible by neither 3 nor 5, we simply return the
    number supplied. Let''s take a look at this test:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经涵盖了`Fizz`。我们已经涵盖了`Buzz`。而且，我们已经涵盖了`FizzBuzz`。现在我们必须考虑既不能被3也不能被5整除的数字。记住，如果数字既不能被3也不能被5整除，我们只需返回提供的数字。让我们看看这个测试：
- en: '[PRE10]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Theories
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理论
- en: This is great! Things are going quite smoothly. Hopefully, you're starting to
    get the hang of Test-Driven Development. Now, let's look into a slightly more
    advanced test method using the `Theory` and `InlineData` attributes.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这太棒了！一切都在顺利进行。希望你现在开始逐渐掌握测试驱动开发。现在，让我们看看使用`Theory`和`InlineData`属性的一个稍微高级一点的测试方法。
- en: 'Looking back at our tests, we see that we have a `test` method named `Given15ThenFizzBuzz`.
    While this is fine, it''s a little too specific. Remember, our requirement was
    that, if the number is divisible by 3 and 5, then we should return `FizzBuzz`.
    Let''s ensure we didn''t take too big a leap in logic by writing a new test. This
    time, we’ll supply a number of values, expecting the same results:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾我们的测试，我们看到我们有一个名为`Given15ThenFizzBuzz`的`test`方法。虽然这很好，但它太具体了。记住，我们的要求是，如果数字能被3和5整除，那么我们应该返回`FizzBuzz`。让我们通过编写一个新的测试来确保我们没有在逻辑上迈出太大的步子。这次，我们将提供一系列值，期望得到相同的结果：
- en: '[PRE11]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: When you run the test suite, you should now see four new passed test results.
    If you do experience a failure, the results pane in the Test Explorer window should
    provide a detailed explanation as to which test failed.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行测试套件时，你现在应该会看到四个新的通过测试结果。如果你确实遇到了失败，测试资源管理器窗口中的结果面板应该会提供关于哪个测试失败的详细解释。
- en: Now, do the same thing for `Fizz` and `Buzz` by creating two more test cases
    using `Theories` and `InlineData`. Go ahead and add `GivenDivisibleBy3ThenFizz`,
    `GivenDivisibleBy5ThenBuzz`, and `GivenNotDivisibleBy3or5ThenNumber`. Be sure
    to run your test suite after adding each test and `InlineData` value, fixing any
    failures along the way.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过创建两个使用`Theories`和`InlineData`的更多测试用例，对`Fizz`和`Buzz`做同样的事情。继续添加`GivenDivisibleBy3ThenFizz`、`GivenDivisibleBy5ThenBuzz`和`GivenNotDivisibleBy3or5ThenNumber`。确保在添加每个测试和`InlineData`值后运行你的测试套件，并在过程中修复任何失败。
- en: Solution to the FizzBuzz Problem
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FizzBuzz问题的解决方案
- en: 'What we came up with looks something like this:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想出来的东西看起来像这样：
- en: '[PRE12]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Don't worry if you chose to solve the problem a different way. The important
    thing is that you gained knowledge and understanding during this exercise. Additionally,
    you now have a comprehensive set of tests and you're comfortable refactoring and/or
    adding functionality.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您选择用不同的方式解决这个问题，请不要担心。重要的是，您在这个练习中获得了知识和理解。此外，您现在有一套全面的测试，并且您对重构和/或添加功能感到舒适。
- en: What is Speaker Meet?
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是演讲者见面？
- en: We're using the *Speaker Meet* application as a case study in Test-Driven Development.
    Speaker Meet is a website dedicated to connecting technology speakers, user groups,
    and conferences. Anyone who has helped organize a user group or tech conference
    knows it’s often difficult to find speakers. And as technology speakers, it's
    often difficult to coordinate speaking engagements outside your immediate area.
    Speaker Meet helps bring technology speakers and communities together.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用*演讲者见面*应用程序作为测试驱动开发的案例研究。演讲者见面是一个致力于连接技术演讲者、用户组和会议的网站。任何帮助组织用户组或技术会议的人都知道，通常很难找到演讲者。而对于技术演讲者来说，在您的直接区域外协调演讲活动通常也很困难。演讲者见面帮助将技术演讲者和社区聚集在一起。
- en: At the time of writing, the application is still in development, but it is a
    terrific platform to explore TDD concepts and principles as they relate to real-world
    applications. Speaker Meet consists of a RESTful API in .NET with a **Single Page
    Application** (**SPA**) in JavaScript, utilizing the React library.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，应用程序仍在开发中，但它是一个探索测试驱动开发概念和原则的绝佳平台，这些概念和原则与实际应用相关。演讲者见面会由.NET中的RESTful
    API和一个使用React库的**单页应用程序**（**SPA**）组成。
- en: Web API project
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web API项目
- en: For our first exercise, we'll be creating a new API endpoint. This new endpoint
    will return a list of speakers based on a supplied search term. We'll be utilizing
    this endpoint in our React examples in a later chapter.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的第一个练习中，我们将创建一个新的API端点。这个新的端点将根据提供的搜索词返回一个演讲者列表。我们将在后面的章节中利用这个端点在React示例中。
- en: Listing Speakers (API)
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出演讲者（API）
- en: A list of Speakers will be returned from the database by accessing the back-end
    API. Before starting on writing the code, a set of requirements must first be
    established. It's difficult to know where to begin if an agreed upon set of functionality
    hasn't been defined.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 通过访问后端 API，数据库将返回一个演讲者列表。在开始编写代码之前，必须首先确定一组要求。如果在定义功能之前没有达成一致，很难知道从哪里开始。
- en: Requirements
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 要求
- en: Below are the requirements, you might expect to receive from a business analyst
    or product owner. These are often a good starting point for a broader conversation.
    If something is not clear, it's best to resolve any ambiguity before you begin.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是可能从业务分析师或产品负责人那里收到的需求，这些通常是更广泛对话的好起点。如果某些事情不清楚，最好在开始之前解决任何歧义。
- en: '[PRE13]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Upon speaking with our product owner, we determined that by the requirement
    of *matching*, what was truly desired was a *starts-with* match. If a conference
    organizer were to search for the string "Jos," the results for *Josh*, *Joshua*,
    *Joseph*, should be returned by the search routine.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在与我们的产品负责人交谈后，我们确定，根据 *匹配* 的要求，真正期望的是一种 *以...开头* 的匹配。如果会议组织者搜索字符串 "Jos"，搜索程序应该返回
    *Josh*、*Joshua*、*Joseph* 的结果。
- en: A new test file
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个新的测试文件
- en: 'We’ll start by creating a new test file. Let''s name this file `SpeakerControllerSearchTests.cs`.
    Now, create the first test, `ItExists`:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先创建一个新的测试文件。让我们把这个文件命名为 `SpeakerControllerSearchTests.cs`。现在，创建第一个测试，`ItExists`：
- en: '[PRE14]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: To make this compile, you'll need to create a Web API controller called `SpeakerMeetController`.
    Add a new ASP.NET Core Web Application project to your solution. Give your project
    a name of `SpeakerMeet.API` and choose the Web API template to get started. Add
    a reference to this project from your test project and add the appropriate using
    statement.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这个程序编译，你需要创建一个名为 `SpeakerMeetController` 的 Web API 控制器。在你的解决方案中添加一个新的 ASP.NET
    Core Web 应用程序项目。给你的项目命名为 `SpeakerMeet.API` 并选择 Web API 模板以开始。从你的测试项目中添加对这个项目的引用，并添加适当的
    using 语句。
- en: 'Now, let''s ensure that there is a `Search` endpoint available. Let''s create
    another test:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们确保有一个可用的 `Search` 端点。让我们创建另一个测试：
- en: '[PRE15]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Make this test pass by creating a `Search` method that accepts a string.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 通过创建一个接受字符串的 `Search` 方法来使这个测试通过。
- en: 'Let''s confirm that the `Search` action result returns an `OkObjectResult`:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们确认 `Search` 动作结果返回一个 `OkObjectResult`：
- en: '[PRE16]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note the multiple `Asserts`. While we want to limit our tests to a single `Act`,
    sometimes it is acceptable, even necessary, to have multiple `Asserts`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到多个 `Asserts`。虽然我们希望将测试限制在单个 `Act` 上，但有时拥有多个 `Asserts` 是可以接受的，甚至是必要的。
- en: Once the `ItReturnsOkObjectResult` test passes, you should delete the `ItExists`
    and `ItHasSearch` tests. Remember, we want to finish the *red, green, refactor*
    cycle and keep our code neat and clean. This includes the test suite, so if you
    have tests that are no longer valid or add no value, then you should feel free
    to remove them. You don't want to have to maintain more code than is required.
    This will help your test suite stay relevant and run nice and fast.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 `ItReturnsOkObjectResult` 测试通过，你应该删除 `ItExists` 和 `ItHasSearch` 测试。记住，我们希望完成
    *红、绿、重构* 循环，并保持我们的代码整洁。这包括测试套件，所以如果你有不再有效或没有价值的测试，那么你应该感到自由地移除它们。你不想维护比所需更多的代码。这将帮助你的测试套件保持相关性并运行得很好。
- en: 'Now, let’s test that the result is a collection of speakers:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们测试结果是否是一个演讲者集合：
- en: '[PRE17]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We''re starting to get a little redundant here. Now is a good time to refactor
    our tests to make them cleaner. Let''s extract the creation of the `SpeakerController`
    and initialize this value in the constructor. Be sure to remove the creation in
    your tests and use this new instance:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里开始有点重复了。现在是重构我们的测试以使其更干净的好时机。让我们从构造函数中提取 `SpeakerController` 的创建并初始化这个值。确保在你的测试中移除创建操作并使用这个新的实例：
- en: '[PRE18]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Finally, we''re ready to start testing the value of the results. Let''s write
    a test entitled `GivenExactMatchThenOneSpeakerInCollection`:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们准备好开始测试结果值的测试。让我们写一个名为 `GivenExactMatchThenOneSpeakerInCollection` 的测试：
- en: '[PRE19]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'To get this test to work, we''ll need to hard-code some data. Don''t worry,
    we''re building this application slowly. The hard-coded data will be removed at
    a later point:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这个测试工作，我们需要硬编码一些数据。别担心，我们正在逐步构建这个应用程序。硬编码的数据将在稍后删除：
- en: '[PRE20]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Ensure that our search string is not case-sensitive:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 确保我们的搜索字符串不区分大小写：
- en: '[PRE21]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Next, we need to test to verify that, if the string provided does not match
    any of our data, then an empty collection is returned:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要测试以验证，如果提供的字符串与我们的数据不匹配，则返回一个空集合：
- en: '[PRE22]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'And finally, we''ll test that any speaker that begins with our search string
    will be returned:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将测试任何以我们的搜索字符串开头的演讲者都会被返回：
- en: '[PRE23]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Here''s what the code we came up with looks like. Your implementation may vary
    somewhat:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是我们编写出的代码的样子。你的实现可能会有所不同：
- en: '[PRE24]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Summary
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: You should now feel quite comfortable with your .NET development environment.
    The .NET Core SDK should now be installed and your IDE configured. You've had
    some exposure to unit tests and continuous test runners in Visual Studio and VS
    Code.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该对你的 .NET 开发环境感到非常熟悉。.NET Core SDK 应该已经安装，并且你的 IDE 已经配置好了。你已经接触过 Visual
    Studio 和 VS Code 中的单元测试和持续测试运行器。
- en: In [Chapter 3](part0095.html#2QJ5E0-d186949d2da74f5c95dd1712efae1195), *Setting
    Up the JavaScript Environment*, we'll focus on getting our JavaScript environment
    set up.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 3 章](part0095.html#2QJ5E0-d186949d2da74f5c95dd1712efae1195)，“设置 JavaScript
    环境”中，我们将专注于设置我们的 JavaScript 环境。
