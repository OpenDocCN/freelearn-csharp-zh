- en: '*Chapter 16*: Creating Custom TagHelper'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第16章*：创建自定义TagHelper'
- en: In this chapter, we're going to talk about `TagHelper` are pretty useful and
    make Razor much prettier and more readable. Creating custom `TagHelper` will make
    your life much easier.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论`TagHelper`非常有用，可以使Razor更加美观和易于阅读。创建自定义`TagHelper`将使您的生活更加轻松。
- en: 'In this chapter, we will be covering the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Introducing `TagHelper`
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍`TagHelper`
- en: Creating custom `TagHelper`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义`TagHelper`
- en: 'The topics in this chapter refer to the MVC layer of the ASP.NET Core architecture:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论的主题涉及ASP.NET Core架构的MVC层：
- en: '![Figure 16.1 – ASP.NET Core architecture'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '![图16.1 – ASP.NET Core架构'
- en: '](img/Figure_16.1_B17996.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_16.1_B17996.jpg)'
- en: Figure 16.1 – ASP.NET Core architecture
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.1 – ASP.NET Core架构
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow the examples in this chapter, you will need to create an ASP.NET
    Core MVC application. Open your console, shell, or Bash terminal and change to
    your working directory. Use the following command to create a new MVC application:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本章的示例，您需要创建一个ASP.NET Core MVC应用程序。打开您的控制台、shell或Bash终端，切换到您的工作目录。使用以下命令创建一个新的MVC应用程序：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, open the project in Visual Studio by double-clicking the project file,
    or in Visual Studio Code by typing the following command in the already-open console:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过双击项目文件在Visual Studio中打开项目，或在Visual Studio Code中，在已打开的控制台中输入以下命令：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'All of the code samples in this chapter can be found in the GitHub repository
    for this book at: [https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter16](https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter16).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的所有代码示例都可以在本书的GitHub存储库中找到：[https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter16](https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter16)。
- en: Introducing TagHelper
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍TagHelper
- en: With `TagHelper` are a kind of shortcut to write easier (and less) HTML or Razor
    code on the server side. `TagHelper` will be interpreted on the server and produce
    "real" HTML code for browsers.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`TagHelper`是一种在服务器端编写更简单（更少）的HTML或Razor代码的快捷方式。`TagHelper`将在服务器上被解释，并为浏览器生成“真实”的HTML代码。
- en: '`TagHelper` are not a new thing in ASP.NET Core. They have been present since
    the framework''s first version. Most existing and built-in `TagHelper` are a replacement
    for the old-fashioned HTML helpers, which still exist and work in ASP.NET Core
    to keep the Razor views compatible with ASP.NET Core.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`TagHelper`不是ASP.NET Core中的新事物。它们自从框架的第一个版本起就存在了。大多数现有的和内置的`TagHelper`是旧式HTML辅助工具的替代品，这些辅助工具仍然存在于ASP.NET
    Core中，以保持Razor视图与ASP.NET Core兼容。'
- en: 'A very basic example of extending HTML tags is the built-in `AnchorTagHelper`:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展HTML标签的一个非常基础的例子是内置的`AnchorTagHelper`：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Many HTML developers find it a bit strange to have `HtmlHelper` between the
    HTML tags. It is hard to read and is kind of disruptive while reading the code.
    Perhaps not for ASP.NET Core developers who are used to reading that kind of code,
    but compared to `TagHelper`, it is really ugly. `TagHelper` feel more natural
    and more like HTML, even if they are not, and even if they are getting rendered
    on the server.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 许多HTML开发者觉得在HTML标签之间有`HtmlHelper`有点奇怪。它难以阅读，在阅读代码时有些破坏性。也许对于习惯于阅读这种代码的ASP.NET
    Core开发者来说不是这样，但与`TagHelper`相比，它真的很丑。`TagHelper`感觉更自然，更像是HTML，即使它们不是，即使它们在服务器上被渲染。
- en: Many HTML helpers can be replaced with a `TagHelper`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 许多HTML辅助工具可以用`TagHelper`替代。
- en: 'There are also some new tags that have been built with `TagHelper`, tags that
    are not in HTML but look like HTML. One example is `EnvironmentTagHelper`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些使用`TagHelper`构建的新标签，这些标签不是HTML标签，但看起来像HTML。一个例子是`EnvironmentTagHelper`：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This `TagHelper` renders (or doesn't render) the contents depending on the current
    runtime environment. In this case, the target environment is the development mode.
    The first environment tag renders the contents if the current runtime environment
    is set to `Development`, and the second one renders the contents if it is *not*
    set to `Development`. This makes it a useful helper in rendering debuggable scripts
    or styles in `Development` mode and minified and optimized code in any other runtime
    environment.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`TagHelper`根据当前的运行时环境渲染（或不渲染）内容。在这种情况下，目标环境是开发模式。第一个环境标签如果当前运行时环境设置为`Development`，则渲染内容；第二个标签如果它`不是`设置为`Development`，则渲染内容。这使得它在`Development`模式下渲染可调试的脚本或样式以及在任何其他运行时环境中渲染最小化和优化代码时非常有用。
- en: Let's now see how we can create our own custom `TagHelper`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看我们如何创建自己的自定义 `TagHelper`。
- en: Creating custom Tag Helpers
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义 Tag Helper
- en: 'To use all the custom `TagHelper` that we will create in this chapter, you
    need to refer to the current assembly to tell the framework where to find the
    `TagHelper`. Open the `_ViewImports.cshtml` file in the `View/` folder and add
    the following line at the end of the file:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用本章中创建的所有自定义 `TagHelper`，你需要引用当前程序集，告诉框架在哪里找到 `TagHelper`。打开 `View/` 文件夹中的
    `_ViewImports.cshtml` 文件，并在文件末尾添加以下行：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here''s a quick example showing how to extend an existing tag using a `TagHelper`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个快速示例，展示了如何使用 `TagHelper` 扩展现有的标签：
- en: 'Let''s assume we need to have a tag configured in bold and colored in a specific
    color:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设我们需要一个配置为粗体并具有特定颜色的标签：
- en: '[PRE5]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This looks like pretty old-fashioned HTML from the 90s, but this is just to
    demonstrate a simple `TagHelper`.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这看起来像是90年代的过时 HTML，但这只是为了演示一个简单的 `TagHelper`。
- en: 'The current method to do this task is to use a `TagHelper` to extend any tag
    that has an attribute called `strong`, as shown in the following code snippet:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当前执行此任务的方法是使用 `TagHelper` 扩展任何具有名为 `strong` 的属性的标签，如下面的代码片段所示：
- en: '[PRE6]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The first line tells the tag helper to work on tags with a target attribute
    of `strong`. This `TagHelper` doesn't define its own tag, but it does provide
    an additional attribute to specify the color.
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第一行告诉标签助手处理具有 `strong` 目标属性的标签。这个 `TagHelper` 没有定义自己的标签，但它确实提供了一个额外的属性来指定颜色。
- en: The `Process` method defines how to render the HTML to the output stream. In
    this case, it adds some CSS inline styles to the current tag. It also removes
    the target attribute from the current tag. The `color` attribute won't show up.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Process` 方法定义了如何将 HTML 渲染到输出流中。在这种情况下，它会给当前标签添加一些内联 CSS 样式。它还会从当前标签中移除目标属性。`color`
    属性将不会显示。'
- en: 'This will appear as follows:'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将显示如下：
- en: '[PRE7]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The next example shows how to define a custom tag using a `TagHelper`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个示例展示了如何使用 `TagHelper` 定义一个自定义标签：
- en: 'Let''s create this class, called `GreeterTagHelper`:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建这个名为 `GreeterTagHelper` 的类：
- en: '[PRE8]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This `TagHelper` handles a `greeter` tag that has a property name. In the `Process`
    method, the current tag will be changed to a `p` tag and the new content is set
    as the current output:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个 `TagHelper` 处理一个具有属性名称的 `greeter` 标签。在 `Process` 方法中，当前标签将被更改为 `p` 标签，并将新内容设置为当前输出：
- en: '[PRE9]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The result looks like this:'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 结果看起来像这样：
- en: '[PRE10]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: But what if you need to do something a bit more complicated? Let's explore further.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果你需要做点更复杂的事情呢？让我们进一步探索。
- en: Examining a more complex scenario
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查更复杂的情况
- en: 'The `TagHelper` in the last section were pretty basic, simply designed to show
    how `TagHelper` work. The next example is a little more complex and shows a real
    scenario. This `TagHelper` renders a table with a list of items. This is a generic
    `TagHelper` and shows a real reason to create your own custom `TagHelper`. With
    this, you are able to reuse an isolated piece of view code. For example, you can
    wrap `div` tags. Alternatively, you can just simplify your Razor views:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个部分的 `TagHelper` 非常基础，简单设计用来展示 `TagHelper` 的工作方式。下一个示例稍微复杂一些，展示了真实场景。这个 `TagHelper`
    渲染了一个包含项目列表的表格。这是一个通用的 `TagHelper`，展示了创建自定义 `TagHelper` 的真实原因。有了这个，你可以重用独立的视图代码片段。例如，你可以包裹
    `div` 标签。或者，你也可以简化你的 Razor 视图：
- en: 'Let''s start by creating the `DataGridTagHelper` class. This next code snippet
    isn''t complete, but we will complete the `DataGridTagHelper` class in the following
    steps:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们首先创建 `DataGridTagHelper` 类。接下来的代码片段并不完整，但我们将按以下步骤完成 `DataGridTagHelper` 类：
- en: '[PRE11]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the `Process` method, we call private sub-methods that do the actual work
    to make the class a little more readable.
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 `Process` 方法中，我们调用私有子方法来完成实际工作，使类更易于阅读。
- en: 'You might need to add the following `using` statements at the beginning of
    the file:'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可能需要在文件开头添加以下 `using` 语句：
- en: '[PRE12]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Because this is a generic `TagHelper`, incoming objects need to be analyzed.
    The `GetItemProperties` method gets the type of the property items and loads the
    `PropertyInfo` from the type. `PropertyInfo` will be used to get the table headers
    and the values:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为这是一个通用的 `TagHelper`，传入的对象需要进行分析。`GetItemProperties` 方法获取属性项的类型，并从类型中加载 `PropertyInfo`。`PropertyInfo`
    将用于获取表头和值：
- en: '[PRE13]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The following code snippet shows the generation of the table headers. The `TableHeader`
    method writes the requisite HTML tags directly to `TagHelperOutput`. It also uses
    the list of `PropertyInfo` to get the property names that will be used as table
    header names:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码片段展示了表头的生成。`TableHeader`方法直接将必要的HTML标签写入`TagHelperOutput`。它还使用`PropertyInfo`列表来获取将用作表头名称的属性名：
- en: '[PRE14]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Using property names as table header names is not always useful. This is why
    the `GetPropertyName` method also tries to read the value from `DisplayNameAttribute`,
    which is part of the `DataAnnotation` that is heavily used in data models that
    are displayed in MVC user interfaces. Therefore, it makes sense to support this
    attribute:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用属性名作为表头名称并不总是有用的。这就是为什么`GetPropertyName`方法还尝试从`DisplayNameAttribute`中读取值，这是`DataAnnotation`的一部分，在MVC用户界面中广泛使用的数据模型。因此，支持这个属性是有意义的：
- en: '[PRE15]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Also, values need to be displayed. The `TableBody` method does that job:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，还需要显示值。`TableBody`方法执行这项工作：
- en: '[PRE16]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To get the values from the actual object, the `GetPropertyValue` method is
    used:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要从实际对象中获取值，使用`GetPropertyValue`方法：
- en: '[PRE17]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'To use this `TagHelper`, you just need to assign a list of items to this tag:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用这个`TagHelper`，您只需将项目列表分配给这个标签：
- en: '[PRE18]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In this case, it is a list of people, which we get in the `Persons` property
    of our current model.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种情况下，它是一个人员列表，我们通过当前模型中的`Persons`属性获取它。
- en: 'The `Person` class we are using here looks like this:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在这里使用的`Person`类看起来是这样的：
- en: '[PRE19]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Not all of the properties have `DisplayNameAttribute`, so the fallback in the
    `GetPropertyName` method is needed to get the actual property name instead of
    the `DisplayName` value.
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 并非所有属性都有`DisplayNameAttribute`，因此`GetPropertyName`方法中的回退是必要的，以获取实际的属性名而不是`DisplayName`值。
- en: Put the `Person` class into a `Person.cs` inside the `Models` folder.
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将`Person`类放入`Models`文件夹中的`Person.cs`文件。
- en: 'You also need a service to load the data into the `Index` action of the `HomeController`.
    Create a `Services` folder and place a file called `PersonService.cs` into it.
    Put the following snippet inside the file:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还需要一个服务来将数据加载到`HomeController`的`Index`动作中。创建一个`Services`文件夹，并将一个名为`PersonService.cs`的文件放入其中。将以下代码片段放入该文件中：
- en: '[PRE20]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Here, again, we use `GenFu` to auto-generate the list of persons. If you didn''t
    already install it, you need to execute the following command to load the NuGet
    package:'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，我们再次使用`GenFu`来自动生成人员列表。如果您还没有安装它，您需要执行以下命令来加载NuGet包：
- en: '[PRE21]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'If this is done you should add `PersonService` to `ServiceCollection` in the
    `Program.cs` file:'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果这样做，您应该在`Program.cs`文件中将`PersonService`添加到`ServiceCollection`中：
- en: '[PRE22]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'And, last but not least, `PersonService` should be used in `HomeController`:'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，应在`HomeController`中使用`PersonService`：
- en: '[PRE23]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This `TagHelper` needs some more checks and validations before you can use
    it in production, but it works. It displays a list of fake data that is generated
    using `GenFu` (see [*Chapter 12*](B17996_12_ePub.xhtml#_idTextAnchor172), *Content
    Negotiation Using a Custom OutputFormatter*, to learn about `GenFu`):'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个`TagHelper`在使用前需要更多的检查和验证，但它是可以工作的。它显示了一个使用`GenFu`生成的假数据列表（见[*第12章*](B17996_12_ePub.xhtml#_idTextAnchor172)，*使用自定义输出格式化程序进行内容协商*，了解`GenFu`）：
- en: '![Figure 16.2 – The TagHelper sample in action'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '![图16.2 – TagHelper示例在行动'
- en: '](img/Figure_16.2_B17996.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_16.2_B17996.jpg)'
- en: Figure 16.2 – The TagHelper sample in action
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图16.2 – TagHelper示例在行动
- en: Now, you are able to extend this `TagHelper` with a lot more features, including
    sorting, filtering, and paging. Feel free to try it out in a variety of contexts.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您能够扩展这个`TagHelper`以包含更多的功能，包括排序、过滤和分页。请随意在多种环境中尝试它。
- en: Summary
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Tag Helpers are pretty useful when it comes to reusing parts of the view and
    simplifying and cleaning up your views, as in the example with `DataGridTagHelper`.
    You can also provide a library with useful view elements. There are some more
    examples of pre-existing `TagHelper` libraries and samples that you can try out
    in the *Further reading* section.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到重用视图的某些部分并简化、清理您的视图时，标签助手非常有用，就像在`DataGridTagHelper`的例子中一样。您还可以提供一个包含有用视图元素的库。在*进一步阅读*部分有一些现有的`TagHelper`库和示例，您可以尝试使用。
- en: This is the last chapter of the second edition of *Customizing ASP.NET Core*.
    We're glad you read all the chapters. We hope you found the chapters useful and
    that they will help you optimize your applications.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这是《定制 ASP.NET Core》第二版的最后一章。很高兴您阅读了所有章节。我们希望您觉得这些章节有用，并且它们能帮助您优化您的应用程序。
- en: Further reading
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Damian Edwards, *TagHelperPack*: [https://github.com/DamianEdwards/TagHelperPack](https://github.com/DamianEdwards/TagHelperPack)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '戴米安·爱德华兹，*TagHelperPack*: [https://github.com/DamianEdwards/TagHelperPack](https://github.com/DamianEdwards/TagHelperPack)'
- en: 'David Paquette, *TagHelperSamples*: [https://github.com/dpaquette/TagHelperSamples](https://github.com/dpaquette/TagHelperSamples)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '大卫·帕奎特，*TagHelperSamples*: [https://github.com/dpaquette/TagHelperSamples](https://github.com/dpaquette/TagHelperSamples)'
- en: '*TagHelpers for Bootstrap by Teleric*: [https://www.red-gate.com/simple-talk/dotnet/asp-net/asp-net-core-tag-helpers-bootstrap/](https://www.red-gate.com/simple-talk/dotnet/asp-net/asp-net-core-tag-helpers-bootstrap/)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Teleric 开发的 Bootstrap TagHelper*: [https://www.red-gate.com/simple-talk/dotnet/asp-net/asp-net-core-tag-helpers-bootstrap/](https://www.red-gate.com/simple-talk/dotnet/asp-net/asp-net-core-tag-helpers-bootstrap/)'
- en: '*TagHelpers for jQuery*: [https://www.jqwidgets.com/asp.net-core-mvc-tag-helpers/](https://www.jqwidgets.com/asp.net-core-mvc-tag-helpers/)'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*jQuery TagHelper*: [https://www.jqwidgets.com/asp.net-core-mvc-tag-helpers/](https://www.jqwidgets.com/asp.net-core-mvc-tag-helpers/)'
