["```cs\npublic override void Inject<T>(PropagationContext context,\n  T carrier, Action<T, string, string> setter)\n{\n  if (context.ActivityContext.IsValid())\nsetter.Invoke(carrier,\n      CorrelationIdHeaderName,\n      context.ActivityContext.TraceId.ToString());\n}\n```", "```cs\npublic override PropagationContext Extract<T>(\n  PropagationContext context, T carrier,\n  Func<T, string, IEnumerable<string>> getter)\n{\n  if (context.ActivityContext.IsValid()) return context;\n  var correlationIds = getter.Invoke(carrier,\n   CorrelationIdHeaderName);\n  if (TryGetTraceId(correlationIds, out var traceId))\n  {\n    var traceContext = new ActivityContext(\n      ActivityTraceId.CreateFromString(traceId),\n      ActivitySpanId.CreateRandom(),\n      ActivityTraceFlags.Recorded,\n      isRemote: true);\n    return new PropagationContext(traceContext,\n     context.Baggage);\n  }\n  ...\n}\n```", "```cs\ntraceId = correlationId.Replace(\"-\", \"\");\nif (correlationId.Length < 32)\n  traceId = correlationId.PadRight(32, '0');\nelse if (traceId.Length > 32)\n  traceId = correlationId.Substring(0, 32);\n```", "```cs\nlegacy-service-b$ dotnet run --correlation-mode correlation-id\n```", "```cs\nprivate static readonly\n  AsyncLocal<IDictionary<string, object>> _currentContext =\n    new AsyncLocal<IDictionary<string, object>>();\npublic static IDictionary<string, object> CurrentContext =>\n  _currentContext.Value;\npublic override async Task Invoke(IOwinContext context)\n{\n  var tc = EmptyContext;\n  if (context.Request.Headers.TryGetValue(\"traceparent\",\n    out var traceparent))\n  {\n    tc = new Dictionary<string, object>\n      {{ \"traceparent\", traceparent[0] }};\n    ...\n  }\n  _currentContext.Value = tc;\n  ...\n  using (var scope = _logger.BeginScope(tc))\n  {\n    await Next.Invoke(context);\n  }\n}\n```", "```cs\nprotected override Task<HttpResponseMessage> SendAsync(\n  HttpRequestMessage request, CancellationToken token)\n{\n  foreach (var kvp in PassThroughMiddleware.CurrentContext)\n    request.Headers.Add(kvp.Key, pair.Value?.ToString());\n  return base.SendAsync(request, token);\n}\n```", "```cs\n    legacy-service-b$ dotnet run --correlation-mode pass-through\n    ```", "```cs\nfilelog:\n  include: [ /var/log/chapter15*.log ]\n  operators:\n    - type: json_parser\n      timestamp:\n        parse_from: attributes.Timestamp\n        layout: '%Y-%m-%dT%H:%M:%S.%f'\n      severity:\n        parse_from: attributes.LogLevel\n```", "```cs\nTimestamp: 2023-05-27 01:00:41.074 +0000 UTC\nSeverityText: Information\n…\nAttributes:\n     -> Scopes: Slice([{\"Message\":\"System.Collections.Generic.Dictionary`2[System.String,System.Object]\",\"traceparent\":\"00-78987df9861c2d7e46c10bd084570122-53106042475b3e32-01\"}])\n     -> Category: Str(LegacyServiceB.LoggingHandler)\n...\n     -> State: Map({\"Message\":\"Request complete. GET http://localhost:5049/c, OK\",\"method\":\"GET\",\"status\":\"OK\",\"url\":\"http://localhost:5049/c\",\"{OriginalFormat}\":\"Request complete. {method} {url}, {status}\"})\nTrace ID:\nSpan ID:\n```", "```cs\nlegacy-service-b $ dotnet run --correlation-mode pass-through > ../\ntmp/logs/chapter15.log\n```", "```cs\n    sum by (service_name, http_route)\n    ```", "```cs\n      (rate(http_server_duration_ms_count[1m]))\n    ```", "```cs\nAddHttpClientInstrumentation(options =>\n{\noptions.EnrichWithHttpRequestMessage = (act, req) =>\n{\nif (req.Options.TryGetValue(\nnew HttpRequestOptionsKey<int>(\"try\"),\nout var tryCount) && tryCount > 0)\nact.SetTag(\"http.resend_count\", tryCount);\n...\n}\n}\n```", "```cs\nfor (int i = 0; i < MaxTryCount; i++)\n{\nrequest.Options.Set(new\nHttpRequestOptionsKey<int>(\"try\"), i);\ntry\n{\nvar response = await base.SendAsync(request,\ntoken);\n...\n}\ncatch (Exception e) { ... }\nawait Task.Delay(delays[i]);\n}\n```", "```cs\nprocessors:\n...\ntail_sampling:\ndecision_wait: 2s\nexpected_new_traces_per_sec: 500\npolicies:\n[{ name: limit-rate,\ntype: rate_limiting,\nrate_limiting: {spans_per_second: 50}}]\nservice:\npipelines:\ntraces:\nreceivers: [otlp]\nprocessors: [tail_sampling, batch]\nexporters: [jaeger]\n```"]