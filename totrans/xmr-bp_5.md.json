["```cs\npublic class StockItem \n    { \n        public int Id { get; set; } \n        public string Name { get; set; } \n        public string Category { get; set; } \n        public decimal Price { get; set; } \n    } \n\n```", "```cs\npublic class StockItemsController : ApiController \n    { \n        List<StockItem> StockItems = new List<StockItem>()           { \n            new StockItem { Id = 1, Name = \"Tomato Soup\", Category = \"Groceries\", Price = 1 }, \n            new StockItem { Id = 2, Name = \"Yo-yo\", Category = \"Toys\", Price = 3.75M }, \n            new StockItem { Id = 3, Name = \"Hammer\", Category = \"Hardware\", Price = 16.99M } \n        }; \n\n        public IEnumerable<StockItem> GetAllStockItems() \n        { \n            return StockItems; \n        } \n\n        public StockItem GetStockItem(int id) \n        { \n            var stockItem = StockItems.FirstOrDefault((p) => p.Id == id); \n            if (stockItem == null) \n            { \n                return null; \n            } \n\n            return StockItem; \n        } \n    } \n\n```", "```cs\n        api/GetAllStockItems \n\n```", "```cs\n        api/GetStockItem \n\n```", "```cs\n<StackLayout x:Name=\"StackLayout\" Spacing=\"10\" Orientation=\"Vertical\" Padding=\"10, 10, 10, 10\" VerticalOptions=\"Center\"> \n        <Label x:Name=\"DesciptionLabel\" Text=\"{Binding DescriptionMessage}\" HorizontalOptions=\"Center\" Font=\"Arial, 20\"> \n            <Label.TextColor> \n                <OnPlatform x:TypeArguments=\"Color\" \n                    Android=\"Black\" \n                    WinPhone=\"Black\" \n                    iOS=\"Black\"> \n                </OnPlatform> \n            </Label.TextColor> \n        </Label> \n\n        <Button x:Name=\"StocklistButton\" Text=\"{Binding LocationTitle}\" Command=\"{Binding LocationCommand}\" BackgroundColor=\"Silver\"> \n            <Button.TextColor> \n                <OnPlatform x:TypeArguments=\"Color\" \n                    Android=\"Navy\" \n                    WinPhone=\"Blue\" \n                    iOS=\"Black\"> \n                </OnPlatform> \n            </Button.TextColor> \n        </Button> \n\n        <Button x:Name=\"ExitButton\" Text=\"{Binding ExitTitle}\" Command=\"{Binding ExitCommand}\" BackgroundColor=\"Silver\"> \n            <Button.TextColor> \n                <OnPlatform x:TypeArguments=\"Color\" \n                    Android=\"Navy\" \n                    WinPhone=\"Blue\" \n                    iOS=\"Black\"> \n                </OnPlatform> \n            </Button.TextColor> \n        </Button> \n    </StackLayout> \n\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\"?> \n<root> \n    <resheader name=\"resmimetype\"> \n        <value>text/microsoft-resx</value> \n    </resheader> \n    <resheader name=\"version\"> \n        <value>2.0</value> \n    </resheader> \n    <resheader name=\"reader\"> \n        <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value> \n    </resheader> \n    <resheader name=\"writer\"> \n        <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value> \n    </resheader> \n\n    <data name=\"DecriptionMessage\" xml:space=\"preserve\"> \n        <value>Welcome to the Grocery Store</value> \n    </data> \n</root> \n\n```", "```cs\n<ContentPage   \n\n    x:Class=\"Stocklist.XamForms.Pages.MainPage\" \n    BackgroundColor=\"White\"> \n\n```", "```cs\n<Label x:Name=\"DesciptionLabel\" HorizontalOptions=\"Center\" > \n            <Label.FormattedText> \n                <FormattedString> \n                    <Span Text=\"{x:Static resx:LabelResources.DecriptionMessage}\"  \n                        FontFamily=\"Arial\"  \n                        FontSize=\"24\"> \n                        <Span.ForegroundColor> \n                            <OnPlatform x:TypeArguments=\"Color\" \n                                Android=\"Black\" \n                                WinPhone=\"Black\" \n                                iOS=\"Black\"> \n                            </OnPlatform> \n                        </Span.ForegroundColor> \n                    </Span> \n                </FormattedString> \n            </Label.FormattedText> \n        </Label>  \n\n```", "```cs\n<data name=\"ExitTitle\" xml:space=\"preserve\"> \n        <value>Exit</value> \n    </data> \n    <data name=\"StocklistTitle\" xml:space=\"preserve\"> \n        <value>Stock list</value> \n    </data> \n\n```", "```cs\nText=\"{x:Static resx:LabelResources.StocklistTitle}\"   \nText=\"{x:Static resx:LabelResources.ExitTitle}\"  \n\n```", "```cs\n<Image x:Name=\"Image\" Source=\"stocklist.png\" IsOpaque=\"true\" HeightRequest=\"120\" WidthRequest=\"120\"/> \n\n```", "```cs\n<data name=\"WelcomeTitle\" xml:space=\"preserve\"> \n     <value>Welcome</value> \n</data> \n\n```", "```cs\nTitle=\"{x:Static resx:LabelResources.WelcomeTitle}\"  \n\n```", "```cs\n<StackLayout x:Name=\"StackLayout\" Spacing=\"10\" Orientation=\"Vertical\" Padding=\"10, 10, 10, 10\" VerticalOptions=\"Center\" HorizontalOptions=\"Center\" > \n        <Image x:Name=\"Image\" Source=\"stocklist.png\" IsOpaque=\"true\" HeightRequest=\"120\" WidthRequest=\"120\"/> \n        <Label x:Name=\"DesciptionLabel\" > \n            <Label.FormattedText> \n                <FormattedString> \n                    <Span Text=\"{x:Static resx:LabelResources.DecriptionMessage}\"  \n                        FontFamily=\"Arial\"  \n                        FontSize=\"24\"> \n                        <Span.ForegroundColor> \n                            <OnPlatform x:TypeArguments=\"Color\" \n                                Android=\"Black\" \n                                WinPhone=\"Black\" \n                                iOS=\"Black\"> \n                            </OnPlatform> \n                        </Span.ForegroundColor> \n                    </Span> \n                </FormattedString> \n            </Label.FormattedText> \n        </Label> \n\n        <Button x:Name=\"StocklistButton\" Text=\"{x:Static resx:LabelResources.StocklistTitle}\" Command=\"{Binding StocklistCommand}\" BackgroundColor=\"Silver\"> \n            <Button.TextColor> \n                <OnPlatform x:TypeArguments=\"Color\" \n                    Android=\"Navy\" \n                    WinPhone=\"Blue\" \n                    iOS=\"Black\"> \n                </OnPlatform> \n            </Button.TextColor> \n        </Button> \n\n        <Button x:Name=\"ExitButton\" Text=\"{x:Static resx:LabelResources.ExitTitle}\" Command=\"{Binding ExitCommand}\" BackgroundColor=\"Silver\"> \n            <Button.TextColor> \n                <OnPlatform x:TypeArguments=\"Color\" \n                    Android=\"Navy\" \n                    WinPhone=\"Blue\" \n                    iOS=\"Black\"> \n                </OnPlatform> \n            </Button.TextColor> \n        </Button> \n    </StackLayout> \n\n```", "```cs\n<Application \n\n    x:Class=\"Stocklist.XamForms.App\"> \n    <Application.Resources> \n        <ResourceDictionary> \n\n        </ResourceDictionary> \n    </Application.Resources> \n</Application> \n\n```", "```cs\npublic partial class App : Application \n    { \n        public App() \n        { \n            this.InitializeComponent(); \n\n// The Application ResourceDictionary is available in Xamarin.Forms 1.3 and later \n      if (Application.Current.Resources == null) \n      { \n        Application.Current.Resources = new ResourceDictionary(); \n      } \n\n            this.MainPage = IoC.Resolve<NavigationPage>(); \n        } \n\n        protected override void OnStart() \n        { \n            // Handle when your app starts \n        } \n\n        protected override void OnSleep() \n        { \n            // Handle when your app sleeps \n        } \n\n        protected override void OnResume() \n        { \n            // Handle when your app resumes \n        } \n    } \n\n```", "```cs\nprivate Page GetPage(PageNames page) \n        { \n            switch(page) \n            { \n                case PageNames.MainPage: \n                    return IoC.Resolve<MainPage> (); \n                case PageNames.StocklistPage: \n                    return IoC.Resolve<Func<StocklistPage>>()();  \n                default: \n                    return null; \n            } \n        } \n\n```", "```cs\npublic class XamFormsModule : IModule \n    { \n        public void Register(ContainerBuilder builer) \n        { \n            builer.RegisterType<MainPage> ().SingleInstance(); \n            builer.RegisterType<StocklistPage> ().SingleInstance(); \n\n            builer.RegisterType<Xamarin.Forms.Command> ().As<ICommand>().SingleInstance(); \n\n            builer.Register (x => new NavigationPage(x.Resolve<MainPage>())).AsSelf().SingleInstance(); \n\n            builer.RegisterType<NavigationService> ().As<INavigationService>().SingleInstance(); \n        } \n    } \n\n```", "```cs\n<ControlTemplate x:Key=\"MainBlackTemplate\"> \n                <StackLayout x:Name=\"StackLayout\" Spacing=\"10\" Orientation=\"Vertical\" Padding=\"10, 10, 10, 10\" BackgroundColor=\"Black\" \n            VerticalOptions=\"Center\" HorizontalOptions=\"Center\" > \n          <Image x:Name=\"Image\" Source=\"stocklist.png\" HeightRequest=\"120\" WidthRequest=\"120\"/> \n          <Label x:Name=\"DesciptionLabel\"> \n            <Label.FormattedText> \n              <FormattedString> \n                <Span Text=\"{x:Static resx:LabelResources.DecriptionMessage}\"  \n                  FontFamily=\"Arial\"  \n                  FontSize=\"24\" \n                  ForegroundColor=\"White\"/> \n              </FormattedString> \n            </Label.FormattedText> \n              </Label> \n\n          <Button x:Name=\"StocklistButton\"  \n              Text=\"{x:Static resx:LabelResources.StocklistTitle}\"  \n              Command=\"{TemplateBinding StocklistCommand}\" \n              Style=\"{StaticResource HomeButtonStyle}\" \n              BackgroundColor=\"Gray\" \n              TextColor=\"White\"/> \n\n          <Button x:Name=\"ExitButton\"  \n              Text=\"{x:Static resx:LabelResources.ExitTitle}\"  \n              Command=\"{TemplateBinding ExitCommand}\"  \n              Style=\"{StaticResource HomeButtonStyle}\" \n              BackgroundColor=\"Gray\" \n              TextColor=\"White\"/> \n\n          <ContentPresenter /> \n        </StackLayout> \n            </ControlTemplate> \n\n```", "```cs\n<ControlTemplate x:Key=\"MainWhiteTemplate\"> \n                <StackLayout x:Name=\"StackLayout\" Spacing=\"10\" Orientation=\"Vertical\" Padding=\"10, 10, 10, 10\" VerticalOptions=\"Center\" HorizontalOptions=\"Center\" > \n          <Image x:Name=\"Image\" Source=\"stocklist.png\" HeightRequest=\"120\" WidthRequest=\"120\"/> \n          <Label x:Name=\"DesciptionLabel\" > \n            <Label.FormattedText> \n              <FormattedString> \n                <Span Text=\"{x:Static resx:LabelResources.DecriptionMessage}\"  \n                  FontFamily=\"Arial\"  \n                  FontSize=\"24\" \n                  ForegroundColor=\"Black\"/> \n              </FormattedString> \n            </Label.FormattedText> \n              </Label> \n\n          <Button x:Name=\"StocklistButton\"  \n              Text=\"{x:Static resx:LabelResources.StocklistTitle}\"  \n              Command=\"{TemplateBinding StocklistCommand}\" \n              Style=\"{StaticResource HomeButtonStyle}\"/> \n\n          <Button x:Name=\"ExitButton\"  \n              Text=\"{x:Static resx:LabelResources.ExitTitle}\"  \n              Command=\"{TemplateBinding ExitCommand}\"  \n              Style=\"{StaticResource HomeButtonStyle}\"/> \n\n          <ContentPresenter /> \n        </StackLayout> \n            </ControlTemplate> \n\n```", "```cs\n<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n<ContentPage   \n\n  x:Class=\"Stocklist.XamForms.Pages.MainPage\" \n  ControlTemplate=\"{StaticResource MainBlackTemplate}\" \n  BackgroundColor=\"Black\" \n  Title=\"{x:Static resx:LabelResources.WelcomeTitle}\" \n  StocklistCommand=\"{Binding StocklistCommand}\"  \n  ExitCommand=\"{Binding ExitCommand}\"> \n  <ContentPage.Content> \n    <Button Text=\"Change Theme\" Clicked=\"ChangeThemeClicked\" /> \n  </ContentPage.Content> \n</ContentPage> \n\n```", "```cs\npublic static readonly BindableProperty StocklistCommandProperty = BindableProperty.Create(\"StocklistCommand\", typeof(ICommand), typeof(MainPage), null); \n        public static readonly BindableProperty ExitCommandProperty = BindableProperty.Create(\"ExitCommand\", typeof(ICommand), typeof(MainPage), null); \n\n        public ICommand StocklistCommand \n        { \n            get { return (ICommand)GetValue(StocklistCommandProperty); } \n        } \n\n        public ICommand ExitCommand \n        { \n            get { return (ICommand)GetValue(ExitCommandProperty); } \n        } \n\n```", "```cs\nprivate bool _originalTemplate = true; \nprivate ControlTemplate _blackTemplate; \nprivate ControlTemplate _whiteTemplate; \n\n```", "```cs\npublic MainPage() \n    { \n      InitializeComponent(); \n\n      _blackTemplate = (ControlTemplate)Application.Current.Resources[\"MainBlackTemplate\"]; \n      _whiteTemplate = (ControlTemplate)Application.Current.Resources[\"MainWhiteTemplate\"]; \n    } \n\nFinally, let's add the ChangeThemeClicked function for the button: \n\npublic void ChangeThemeClicked(object sender, EventArgs e) \n    { \n      _originalTemplate = !_originalTemplate; \n      ControlTemplate = _originalTemplate ? _blackTemplate : _whiteTemplate; \n      BackgroundColor = _originalTemplate ? Color.Black : Color.White; \n    } \n\n```", "```cs\n#region Private Properties \n\n        private readonly IMethods _methods; \n\n        private ICommand _stocklistCommand; \n\n        private ICommand _exitCommand; \n\n        #endregion \n\n```", "```cs\n public ICommand StocklistCommand \n        { \n            get \n            { \n                return stocklistCommand; \n            } \n\n            set \n            { \n                if (value.Equals(stocklistCommand)) \n                { \n                    return; \n                } \n\n                _stocklistCommand = value; \n                OnPropertyChanged(\"StocklistCommand\"); \n            } \n        } \n\n```", "```cs\n#region Constructors \n\n        public MainPageViewModel (INavigationService navigation, Func<Action, ICommand> commandFactory, \n            IMethods methods) : base (navigation) \n        { \n            this.exitCommand = commandFactory (() => methods.Exit()); \n            this.stocklistCommand = commandFactory (async () => await this.Navigation.Navigate(PageNames.StocklistPage, null)); \n        } \n\n        #endregion \n\n```", "```cs\npublic class PortableModule : IModule \n    { \n        public void Register(ContainerBuilder builer) \n        { \n            builer.RegisterType<MainPageViewModel> ().SingleInstance(); \n            builer.RegisterType<StocklistPageViewModel> ().SingleInstance(); \n        } \n    } \n\n```", "```cs\npublic sealed class StockItemContract \n    { \n        #region Public Properties \n\n        public int Id { get; set;} \n\n        public string Name { get; set; } \n\n        public string Category { get; set; } \n\n        public decimal Price { get; set; } \n\n        #endregion \n    } \n\n```", "```cs\n    public interface IStocklistWebServiceController \n    { \n        #region Methods and Operators \n\n        IObservable<StockItemContract> GetAllStockItems (); \n\n        Task<StockItemContract> GetStockItemById(int id); \n\n        #endregion \n    } \n\n```", "```cs\n    <data name=\"ApiAllItems\" xml:space=\"preserve\"> \n        <value></value> \n    </data> \n    <data name=\"GetStockItem\" xml:space=\"preserve\"> \n        <value></value> \n    </data> \n\n```", "```cs\n#region Constructors and Destructors \n\n        public StocklistWebServiceController(HttpClientHandler clientHandler) \n        { \n            _clientHandler = clientHandler; \n        } \n\n        #endregion \n\n```", "```cs\npublic IObservable<StockItemContract> GetAllStockItems () \n        { \n            var authClient = new HttpClient (this.clientHandler); \n\n            var message = new HttpRequestMessage (HttpMethod.Get, new Uri (Config.ApiAllItems)); \n\n            return Observable.FromAsync(() => authClient.SendAsync (message, new CancellationToken(false))) \n                .SelectMany(async response =>  \n                    { \n                        if (response.StatusCode != HttpStatusCode.OK) \n                        { \n                            throw new Exception(\"Respone error\"); \n                        } \n\n                        return await response.Content.ReadAsStringAsync(); \n                    }) \n                .Select(json => JsonConvert.DeserializeObject<StockItemContract>(json)); \n        } \n\n```", "```cs\npublic IObservable<StockItemContract> GetStockItem (int id) \n        { \n            var authClient = new HttpClient(this.clientHandler); \n\n            var message = new HttpRequestMessage(HttpMethod.Get, new Uri(string.Format(Config.GetStockItem, id))); \n\n            return await Observable.FromAsync(() => authClient.SendAsync(message, new CancellationToken(false))) \n                .SelectMany(async response => \n                    { \n                        if (response.StatusCode != HttpStatusCode.OK) \n                        { \n                            throw new Exception(\"Respone error\"); \n                        } \n\n                        return await response.Content.ReadAsStringAsync(); \n                    }) \n                 .Select(json => JsonConvert.DeserializeObject<StockItemContract>(json)); \n        } \n\n```", "```cs\nbuiler.RegisterType<StocklistWebServiceController> ().As<IStocklistWebServiceController>().SingleInstance(); \n\n```", "```cs\npublic class StockItemViewModel : ViewModelBase \n    { \n        #region Constructors \n\n        public StockItemViewModel (INavigationService navigation) : base (navigation) \n        { \n        } \n\n        #endregion \n    } \n\n```", "```cs\n#region Private Properties \n\nprivate int _id; \n\nprivate string _name; \n\nprivate string _category; \n\nprivate decimal _price; \n\nprivate bool _inProgress; \n\n#endregion \n\n```", "```cs\npublic int Id \n        { \n            get \n            { \n                return id; \n            } \n\n            set \n            { \n                if (value.Equals(_id)) \n                { \n                    return; \n                } \n\n                _id = value; \n                OnPropertyChanged(\"Id\"); \n            } \n        } \n\n```", "```cs\n#region Public Methods \n\npublic void Apply(StockItemContract contract) \n{ \n     Id = contract.Id; \n     Name = contract.Name; \n     Category = contract.Category; \n     Price = contract.Price; \n} \n\n#endregion \n\n```", "```cs\n#region Constructors \n\n        public StocklistPageViewModel(INavigationService navigation, IStocklistWebServiceController stocklistWebServiceController, \n            Func<StockItemViewModel> stockItemFactory) : base(navigation) \n        { \n            _stockItemFactory = stockItemFactory; \n\n            _stocklistWebServiceController = stocklistWebServiceController; \n\n            StockItems = new ObservableCollection<StockItemViewModel>(); \n        } \n\n        #endregion \n\n```", "```cs\npublic void Register(ContainerBuilder builer) \n{ \n            ... \n\n            builer.RegisterType<StockItemViewModel>().InstancePerDependency(); \n\n} \n\n```", "```cs\n        #region Private Properties \n\n        private readonly IStocklistWebServiceController _stocklistWebServiceController ; \n\n        private readonly Func<StockItemViewModel> _stockItemFactory; \n\n        #endregion \n\n        #region Public Properties \n\n        public ObservableCollection<StockItemViewModel> StockItems; \n\n        #endregion \n\n```", "```cs\n#region Methods \n\n    protected override async Task LoadAsync(IDictionary<string, object> parameters) \n    { \n      try \n      { \n        InProgress = true; \n\n        // reset the list everytime we load the page \n        StockItems.Clear(); \n\n        var stockItems = await _stocklistWebServiceController.GetAllStockItems(); \n\n        // for all contracts build stock item view model and add to the observable collection \n        foreach (var model in stockItems.Select(x => \n          { \n            var model = _stockItemFactory(); \n            model.Apply(x); \n            return model; \n          })) \n        { \n          StockItems.Add(model); \n        } \n\n        InProgress = false; \n      } \n      catch (Exception e) \n      { \n        System.Diagnostics.Debug.WriteLine(e); \n      } \n    } \n\n    #endregion \n\n```", "```cs\n<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n<ContentPage   \n\n    x:Class=\"Stocklist.XamForms.Pages.StocklistPage\"> \n    <ContentPage.Content> \n        <Grid> \n      <Grid.RowDefinitions> \n        <RowDefinition Height=\"*\"/> \n      </Grid.RowDefinitions> \n\n      <Grid.ColumnDefinitions> \n        <ColumnDefinition Width=\"*\"/> \n      </Grid.ColumnDefinitions> \n\n      <ActivityIndicator  x:Name=\"ActivityIndicator\" IsRunning=\"{Binding InProgress}\" Grid.Row=\"0\" Grid.Column=\"0\"/> \n\n      <ListView x:Name=\"StockItemsListView\" \n        IsVisible=\"{Binding InProgress, Converter={StaticResource notConverter}}\" \n        CachingStrategy=\"RecycleElement\"  \n        ItemsSource=\"{Binding StockItems}\" \n        ItemTemplate=\"{StaticResource ListItemTemplate}\" \n        SelectedItem=\"{Binding Selected, Mode=TwoWay}\" \n        RowHeight=\"100\" \n        Margin=\"10, 10, 10, 10\" \n        Grid.Row=\"0\" Grid.Column=\"0\"/> \n    </Grid> \n    </ContentPage.Content> \n</ContentPage> \n\n```", "```cs\n    public class NotConverter : IValueConverter \n    { \n        public object Convert(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture) \n        { \n            var b = value as bool?; \n\n            if (b != null) \n            { \n                return !b; \n            } \n\n            return value; \n        } \n\n        public object ConvertBack(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture) \n        { \n            throw new NotImplementedException(); \n        } \n    } \n\n```", "```cs\n    <DataTemplate x:Key=\"ListItemTemplate\"> \n        <ViewCell> \n          <StackLayout Margin=\"20, 15, 20, 5\"> \n            <Label x:Name=\"NameLabel\" Text=\"{Binding Name}\"/> \n            <Label x:Name=\"CategoryLabel\" Text=\"{Binding Category}\"/> \n            <Label x:Name=\"PriceLabel\" Text=\"{Binding Price}\"/> \n          </StackLayout> \n                </ViewCell> \n      </DataTemplate> \n\n```", "```cs\n        <ListView x:Name=\"StockItemsListView\" ItemsSource=\"{Binding StockItems}\" ItemTemplate=\"{StaticResource ListItemTemplate}\"/> \n\n```", "```cs\n<ListView x:Name=\"StockItemsListView\" ItemsSource=\"{Binding StockItems\"> \n            <ListView.ItemTemplate> \n                <DataTemplate> \n                  <ViewCell> \n          <StackLayout Margin=\"20, 15, 20, 5\"> \n            <Label x:Name=\"NameLabel\" Text=\"{Binding Name/> \n            <Label x:Name=\"CategoryLabel\" Text=\"{Binding Category}\"/> \n            <Label x:Name=\"PriceLabel\" Text=\"{Binding Price}\"/> \n          </StackLayout> \n                  </ViewCell> \n                </DataTemplate> \n          </ListView.ItemTemplate> \n        </ListView> \n\n```", "```cs\n<Style x:Key=\"TitleStyle\" TargetType=\"Label\"> \n                <Setter Property=\"TextColor\" Value=\"Black\" /> \n                <Setter Property=\"FontAttributes\" Value=\"Bold\" /> \n                <Setter Property=\"FontFamily\" Value=\"Arial\" /> \n            </Style> \n\n```", "```cs\n<Label x:Name=\"NameLabel\" Text=\"{Binding Name}\" Style=\"{StaticResource TitleStyle}\"/> \n\n```", "```cs\n<Style x:Key=\"HomeButtonStyle\" TargetType=\"Button\"> \n                <Setter Property=\"TextColor\"> \n                    <Setter.Value> \n                        <OnPlatform x:TypeArguments=\"Color\" \n                            Android=\"Navy\" \n                            WinPhone=\"Blue\" \n                            iOS=\"Black\"> \n                        </OnPlatform> \n                    </Setter.Value> \n                </Setter> \n                <Setter Property=\"BackgroundColor\" Value=\"Silver\" /> \n</Style> \n\n```", "```cs\n\n<Button x:Name=\"StocklistButton\"  \n                Text=\"{x:Static resx:LabelResources.StocklistTitle}\"  \n                Command=\"{Binding StocklistCommand}\" \n                Style=\"{StaticResource HomeButtonStyle}\"/> \n\n        <Button x:Name=\"ExitButton\" \n                Text=\"{x:Static resx:LabelResources.ExitTitle}\" \n                Command=\"{Binding ExitCommand}\" \n                Style=\"{StaticResource HomeButtonStyle}\"/> \n\n```", "```cs\n<ListView x:Name=\"StockItemsListView\" CachingStrategy=\"RecycleElement\" ItemsSource=\"{Binding StockItems}\" ItemTemplate=\"{StaticResource ListItemTemplate}\"/> \n\n```", "```cs\n[assembly: Xamarin.Forms.Xaml.XamlCompilation(Xamarin.Forms.Xaml.XamlCompilationOptions.Compile)] \n\n```", "```cs\n<ListView x:Name=\"StockItemsListView\" \n        IsVisible=\"{Binding InProgress, Converter={StaticResource notConverter}}\" \n        CachingStrategy=\"RecycleElement\"  \n        ItemsSource=\"{Binding StockItems}\" \n        ItemTemplate=\"{StaticResource ListItemTemplate}\" \n        SelectedItem=\"{Binding Selected, Mode=TwoWay}\" \n        RowHeight=\"100\" \n        Margin=\"10, 10, 10, 10\" \n        Grid.Row=\"0\" Grid.Column=\"0\"/> \n\n```", "```cs\nprivate StockItemViewModel _selected; \n.... \npublic StockItemViewModel Selected \n    { \n      get \n      { \n        return _selected; \n      } \n\n      set \n      { \n        if (value.Equals(_selected)) \n        { \n          return; \n        } \n        else \n        { \n          Navigation.Navigate(Enums.PageNames.StockItemDetailsPage, new Dictionary<string, object>() \n          { \n            {\"id\", value.Id}, \n          }).ConfigureAwait(false); \n        } \n\n        _selected = value; \n        OnPropertyChanged(\"Selected\"); \n      } \n    } \n\n```", "```cs\n<ContentPage.Content> \n    <StackLayout Margin=\"20, 20, 20, 5\"> \n      <Label x:Name=\"TitleLabel\" > \n        <Label.FormattedText> \n          <FormattedString> \n            <Span Text=\"{x:Static resx:LabelResources.StockItemDetailsTitle}\"  \n              FontFamily=\"Arial\"  \n              FontSize=\"24\"> \n              <Span.ForegroundColor> \n                        <OnPlatform x:TypeArguments=\"Color\" \n                            Android=\"Black\" \n                            WinPhone=\"Black\" \n                            iOS=\"Black\"> \n                        </OnPlatform> \n                    </Span.ForegroundColor> \n            </Span> \n          </FormattedString> \n        </Label.FormattedText> \n          </Label> \n\n      <Label x:Name=\"NameLabel\" Text=\"{Binding Name}\" Style=\"{StaticResource TitleStyle}\"/> \n      <controls:CustomLabel x:Name=\"CategoryLabel\" Text=\"{Binding Category}\" Style=\"{StaticResource CustomLabelStyle}\"/> \n            <controls:CustomLabel x:Name=\"PriceLabel\" Text=\"{Binding Price}\" Style=\"{StaticResource CustomLabelStyle}\"/> \n\n      <ActivityIndicator x:Name=\"ActivityIndicator\" IsRunning=\"{Binding InProgress}\"/> \n    </StackLayout> \n  </ContentPage.Content> \n\n```", "```cs\n <controls:CustomLabel/> \n\n```", "```cs\npublic class CustomLabel : Label \n    { \n        public static readonly BindableProperty AndroidFontStyleProperty = BindableProperty.Create<CustomLabel, string>( \n            p => p.AndroidFontStyle, default(string)); \n\n        public string AndroidFontStyle \n        { \n            get \n            { \n                return (string)GetValue(AndroidFontStyleProperty); \n            } \n            set \n            { \n                SetValue(AndroidFontStyleProperty, value); \n            } \n        } \n    } \n\n```", "```cs\n<controls:CustomLabel AndroidFontStyle=\"GraCoRg_\" /> \n\n```", "```cs\npublic class CustomLabelRenderer : LabelRenderer \n    { \n        protected override void OnElementChanged (ElementChangedEventArgs<Label> e)  \n        { \n            base.OnElementChanged (e); \n\n            if (!string.IsNullOrEmpty((e.NewElement as CustomLabel)?.AndroidFontStyle)) \n            { \n                try \n                { \n                    var font = default(Typeface); \n\n                    font = Typeface.CreateFromAsset(Forms.Context.ApplicationContext.Assets, (e.NewElement as CustomLabel)?.AndroidFontStyle + \".ttf\"); \n\n                    if (Control != null) \n                    { \n                        Control.Typeface = font; \n                        Control.TextSize = (float)e.NewElement.FontSize; \n                    } \n                } \n                catch (Exception ex) \n                { \n                    Console.WriteLine(ex); \n                } \n            } \n        } \n    } \n\n```", "```cs\n[assembly: Xamarin.Forms.ExportRenderer(typeof(Stocklist.XamForms.Controls.CustomLabel), typeof(Stocklist.Droid.Renderers.CustomLabel.CustomLabelRenderer))] \n\n```", "```cs\n<Style x:Key=\"CustomLabelStyle\" TargetType=\"controls:CustomLabel\"> \n                <Setter Property=\"TextColor\" Value=\"Black\" /> \n        <Setter Property=\"FontFamily\" Value=\"Gravur-Condensed\" /> \n        <Setter Property=\"AndroidFontStyle\" Value=\"GraCoRg_\" /> \n            </Style> \n\n```", "```cs\n#region Private Properties \n\n        private readonly IStocklistWebServiceController _stocklistWebServiceController; \n\n        private int _id; \n\n        private string _name; \n\n        private string _category; \n\n        private decimal _price; \n\n        private bool _inProgress; \n\n#endregion \n\n```", "```cs\npublic int Id \n        { \n            get \n            { \n                return _id; \n            } \n\n            set \n            { \n                if (value.Equals(_id)) \n                { \n                    return; \n                } \n\n                _id = value; \n                OnPropertyChanged(\"Id\"); \n            } \n        } \n\n```", "```cs\n#region Methods \n\n        protected override async Task LoadAsync(IDictionary<string, object> parameters) \n        { \n            InProgress = true; \n\n            if (parameters.ContainsKey(\"id\")) \n            { \n                Id = (int)parameters[\"id\"]; \n            } \n\n            var contract = await _stocklistWebServiceController.GetStockItem(Id); \n\n            if (contract != null) \n            { \n                this.Name = contract.Name; \n                this.Category = contract.Category; \n                this.Price = contract.Price; \n            } \n\n            InProgress = false; \n        } \n\n        #endregion \n\n```", "```cs\n#region Constructors \n\n        public StockItemDetailsPageViewModel(INavigationService navigation, IStocklistWebServiceController stocklistWebServiceController, \n            Func<Action, ICommand> commandFactory) : base(navigation) \n        { \n            _stocklistWebServiceController = stocklistWebServiceController; \n        } \n\n        #endregion  \n\n```", "```cs\nbuiler.RegisterType<StockItemDetailsPageViewModel>().InstancePerDependency(); \n\n```", "```cs\npublic enum PageNames \n    { \n        MainPage, \n\n        StocklistPage, \n\n        StockItemDetailsPage \n    } \n\n```", "```cs\ncase PageNames.StockItemDetailsPage: \n                    return IoC.Resolve<Func<StockItemDetailsPage>>()();  \n\n```", "```cs\nprivate void InitIoC() \n{ \n  IoC.CreateContainer(); \n  IoC.RegisterModule(new DroidModule()); \n  IoC.RegisterModule(new SharedModule(false)); \n  IoC.RegisterModule(new XamFormsModule()); \n  IoC.RegisterModule(new PortableModule()); \n  IoC.StartContainer(); \n} \n\n```", "```cs\npublic override bool FinishedLaunching(UIApplication app, NSDictionary options) \n        { \n            global::Xamarin.Forms.Forms.Init(); \n\n            InitIoC(); \n\n            LoadApplication(new App()); \n\n            return base.FinishedLaunching(app, options); \n        } \n\n```", "```cs\nprotected override void OnCreate(Bundle bundle) \n        { \n            base.OnCreate(bundle); \n\n            InitIoC(); \n\n            global::Xamarin.Forms.Forms.Init(this, bundle); \n\n            LoadApplication(new App()); \n        } \n\n```", "```cs\n\"localhost:{port}/api/StockItems\" \n\n```", "```cs\n            <site name=\"Stocklist\" id=\"43\"> \n                            <application path=\"/\"\n                            applicationPool=\"Clr4IntegratedAppPool\"> \n                                <virtualDirectory path=\"/\" \n    physicalPath=\"C:\\Users\\Michael\\Documents\\Stocklist\\Stocklist\" /> \n                            </application> \n                            <bindings> \n                                <binding protocol=\"http\" bindingInformation=\"*:\n                                {PORT}:localhost\" /> \n                            </bindings> \n            </site> \n\n    ```", "```cs\n            <binding protocol=\"http\" bindingInformation=\"*:{PORT}:{IPv4 Address}\" />  \n\n    ```", "```cs\n            > netsh http add urlacl url=http://{IPv4}:{PORT}/ user=everyone \n\n    ```", "```cs\n     > netsh advfirewall firewall add rule name=\"IISExpressWeb\"\n            dir=in protocol=tcp localport={PORT} profile=private\n            remoteip=localsubnet action=allow\n\n    ```", "```cs\n                <data name=\"ApiAllItems\" xml:space=\"preserve\"> \n                    <value>http://{IPv4}:{PORT}/api/StockItems</value> \n                </data> \n                <data name=\"GetById\" xml:space=\"preserve\"> \n                    <value>http://{IPv4}:{PORT}/api/GetItemById</value> \n                </data> \n\n    ```"]