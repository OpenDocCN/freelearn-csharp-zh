["```cs\n    Using'System;\n    namespace MeTracker.Models;\n    public class Location\n    {\n        public Location() {}\n        public Location(double latitude, double longitude)\n        {\n            Latitude = latitude;\n            Longitude = longitude;\n        }\n        public int Id { get; set; }\n        public double Latitude { get; set; }\n        public double Longitude { get; set; }\n    }\n    ```", "```cs\n    using MeTracker.Models;\n    using System;\n    using System.Threading.Tasks;\n    namespace MeTracker.Repositories;\n    public interface ILocationRepository\n    {\n        Task SaveAsync(Models.Location location);\n    }\n    ```", "```cs\n    using System;\n    using System.Threading.Tasks;\n    using MeTracker.Models;\n    namespace MeTracker.Repositories;\n    public class LocationRepository : ILocationRepository\n    {\n        public async Task SaveAsync(Models.Location location)\n        {\n        }\n    }\n    ```", "```cs\n    using SQLite;\n    namespace MeTracker.Models;\n    public class Location\n    {\n        public Location() { }\n        public Location(double latitude, double longitude)\n        {\n            Latitude = latitude;\n            Longitude = longitude;\n        }\n        [PrimaryKey]\n        [AutoIncrement]\n        public int Id { get; set; }\n        public double Latitude { get; set; }\n        public double Longitude { get; set; }\n    }\n    ```", "```cs\n    private SQLiteAsyncConnection connection;\n    private async Task CreateConnectionAsync()\n    {\n        if (connection != null)\n        {\n            return;\n        }\n        var databasePath = Path.Combine(Environment.GetFolderPath (Environment.SpecialFolder .MyDocuments), \"Locations.db\");\n        connection = new SQLiteAsyncConnection(databasePath);\n        await connection.CreateTableAsync<Location>();\n    }\n    ```", "```cs\npublic async Task SaveAsync(Models.Location location)\n{\n    await CreateConnectionAsync();\n    await connection.InsertAsync(location);\n}\n```", "```cs\n    public interface ILocationTrackingService\n    {\n        void StartTracking();\n    }\n    ```", "```cs\npublic partial class LocationTrackingService : ILocationTrackingService\n{\n    public void StartTracking()\n    {\n        StartTrackingInternal();\n    }\n    partial void StartTrackingInternal();\n}\n```", "```cs\npublic void StartTracking() {}\n```", "```cs\npublic partial void StartTracking() {}\n```", "```cs\npublic partial void StartTracking();\n```", "```cs\n    var builder = MauiApp.CreateBuilder();\n    builder\n        .UseMauiApp<App>()\n        .ConfigureFonts(fonts =>\n        {\n            fonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n            fonts.AddFont(\"OpenSans-Semibold.ttf\", \"OpenSansSemibold\");\n        })\n        .UseMauiMaps();\n        return builder.Build();\n    ```", "```cs\n    <ContentPage \n                 _idTextAnchor605\"/>om/winfx/2009/xaml\"\n        xmlns:maps=\"clr-namespace:Microsoft.Maui.Controls.Maps;assembly=Microsoft.Maui.Controls.Maps\"\n        x:Class=\"MeTracker.Views.MainView\"\n        Title=\"MainView\">\n    ```", "```cs\n    <ContentPage \n\n        x:Class=\"MeTracker.Views.MainView\"\n        Title=\"MainView\">\n        <maps:Map x:Name=\"Map\" />\n    </ContentPage>\n    ```", "```cs\n    <Shell\n        x:Class=\"MeTracker.AppShell\"\n\n        Shell.FlyoutBehavior=\"Disabled\">\n        <ShellContent\n            Title=\"Home\"\n            ContentTemplate=\"{DataTemplate views:MainView}\"\n            Route=\"MainView\" />\n    </Shell>\n    ```", "```cs\n    <key>XSAppIconAssets</key>\n    <string>Assets.xcassets/appicon.appiconset</string>\n    <key>NSLocationAlwaysAndWhenInUseUsageDescription</key>\n    <string>Can we use your location at all times?</string>\n    <key>NSLocationWhenInUseUsageDescription</key>\n    <string>Can we use your location when your app is being used?</string>\n</dict>\n</plist>\n```", "```cs\n    using Android.App;\n    using Android.Runtime;\n    [assembly: UsesPermission(Android.Manifest.Permission.AccessCoarseLocation)]\n    [assembly: UsesPermission(Android.Manifest.Permission.AccessFineLocation)]\n    [assembly: UsesPermission(Android.Manifest.Permission.AccessWifiState)]\n    [assembly: UsesPermission(Android.Manifest.Permission.ReceiveBootCompleted)]\n    namespace MeTracker;\n    ```", "```cs\n    <application android:label=\"MeTracker.Android\">\n      <meta-data android:name=\"com.google.android.geo.API_KEY\" android:value=\"{YourKeyHere}\" />\n    </application>\n    ```", "```cs\n    namespace MeTracker;\n    internal partial class AppPermissions\n    {\n        internal partial class AppPermission : Permissions.LocationWhenInUse\n        {\n        }\n        public static async Task<PermissionStatus> CheckRequiredPermissionAsync() => await Permissions.CheckStatusAsync<AppPermission>();\n        public static async Task<PermissionStatus> CheckAndRequestRequiredPermissionAsync()\n        {\n            PermissionStatus status = await Permissions.CheckStatusAsync<AppPermission>();\n            if (status == PermissionStatus.Granted)\n                return status;\n            if (status == PermissionStatus.Denied && DeviceInfo.Platform == DevicePlatform.iOS)\n            {\n                // Prompt the user to turn on in settings\n                // On iOS once a permission has been denied it may not be requested again from the application\n                await App.Current.MainPage.DisplayAlert(\"Required App Permissions\", \"Please enable all permissions in Settings for this App, it is useless without them.\", \"Ok\");\n            }\n            if (Permissions.ShouldShowRationale<AppPermission>())\n            {\n                // Prompt the user with additional information as to why the permission is needed\n                await App.Current.MainPage.DisplayAlert(\"Required App Permissions\", \"This is a location based app, without these permissions it is useless.\", \"Ok\");\n            }\n            status = await MainThread.InvokeOnMainThreadAsync(Permissions.RequestAsync<AppPermission>);\n            return status;\n        }\n    }\n    ```", "```cs\n    public MainView ()\n    {\n        InitializeComponent();\n        MainThread.BeginInvokeOnMainThread(async () =>\n        {\n            var status = await AppPermissions.CheckAndRequestRequiredPermissionAsync();\n            if (status == PermissionStatus.Granted)\n            {\n                var location = await Geolocation.GetLastKnownLocationAsync();\n                if (location == null)\n                {\n                    location = await Geolocation.GetLocationAsync();\n                }\n                Map.MoveToRegion(MapSpan.FromCenterAndRadius(\n                    location,\n                    Distance.FromKilometers(50)));\n            }\n        });\n    }\n    ```", "```cs\n    using CommunityToolkit.Mvvm.ComponentModel;\n    namespace MeTracker.ViewModels;\n    public partial class ViewModel : ObservableObject\n    {\n    }\n    ```", "```cs\n    public class MainViewModel : ViewModel\n    {\n        private readonly ILocationRepository locationRepository;\n        private readonly ILocationTrackingService locationTrackingService;\n        public MainViewModel(ILocationTrackingService locationTrackingService,\n            ILocationRepository locationRepository)\n        {\n            this.locationTrackingService = locationTrackingService;\n            this.locationRepository = locationRepository;\n        }\n    }\n    ```", "```cs\n    public MainViewModel(ILocationTrackingService locationTrackingService, ILocationRepository locationRepository)\n    {\n        this.locationTrackingService = locationTrackingService;\n        this.locationRepository = locationRepository;\n        MainThread.BeginInvokeOnMainThread(() =>\n        {\n            locationTrackingService.StartTracking();\n        });\n    }\n    ```", "```cs\n    public MainView(MainViewModel viewModel)\n    {\n        InitializeComponent();\n        BindingContext = viewModel;\n        MainThread.BeginInvokeOnMainThread(async () =>\n        {\n            var location = await Geolocation.GetLastKnownLocationAsync();\n            if(location == null)\n            {\n                location = await Geolocation.GetLocationAsync();\n            }\n            Map.MoveToRegion(MapSpan.FromCenterAndRadius(\n                location, Distance.FromKilometers(5)));\n        });\n    }\n    ```", "```cs\n    public static MauiApp CreateMauiApp()\n    {\n        var builder = MauiApp.CreateBuilder();\n        builder\n            .UseMauiApp<App>()\n            .ConfigureFonts(fonts =>\n            {\n                fonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n                fonts.AddFont(\"OpenSans-Semibold.ttf\", \"OpenSansSemibold\");\n            })\n            .UseMauiMaps(); \n    #if DEBUG\n        builder.Logging.AddDebug();\n    #endif\n        builder.Services.AddSingleton<Services.ILocationTrackingService, Services.LocationTrackingService>();\n            builder.Services.AddSingleton<Repositories.ILocationRepository, Repositories.LocationRepository>();\n            builder.Services.AddTransient(typeof(ViewModels.MainViewModel));\n            builder.Services.AddTransient(typeof(Views.MainView));\n        return builder.Build();\n    }\n    ```", "```cs\n<key>UIBackgroundModes</key>\n<array>\n<string>location</string>\n</array>\n```", "```cs\n    namespace MeTracker.Services;\n    public partial class LocationTrackingService : ILocationTrackingService\n    {\n        partial void StartTrackingInternal()\n        {\n        }\n    }\n    ```", "```cs\n    CLLocation locationManager;\n    partial void StartTrackingInternal()\n    {\n        locationManager = new CLLocationManager\n        {\n            PausesLocationUpdatesAutomatically = false,\n            DesiredAccuracy = CLLocation.AccuracyBestForNavigation,\n            AllowsBackgroundLocationUpdates = true\n        };\n        // Add code here\n    }\n    ```", "```cs\n    partial void StartTrackingInternal()\n    {\n        locationManager = new CLLocationManager\n        {\n            PausesLocationUpdatesAutomatically = false,\n            DesiredAccuracy = CLLocation.AccuracyBestForNavigation,\n            AllowsBackgroundLocationUpdates = true\n        };\n        // Add code here\n        locationManager.LocationsUpdated +=\n    async (object sender, CLLocationsUpdatedEventArgs e) =>\n        {\n            // Final block of code goes here\n        };\n    };\n    ```", "```cs\n    partial void StartTrackingInternal()\n    {\n        locationManager = new CLLocationManager\n        {\n            PausesLocationUpdatesAutomatically = false,\n            DesiredAccuracy = CLLocation.AccurracyBestForNavigation,\n            AllowsBackgroundLocationUpdates = true\n        };\n        // Add code here\n        locationManager.LocationsUpdated +=\n    async (object sender, CLLocationsUpdatedEventArgs e) =>\n        {\n            // Final block of code goes here\n        };\n        locationManager.RequestAlwaysAuthorization();\n    };\n    ```", "```cs\n    partial void StartTrackingInternal()\n    {\n        locationManager = new CLLocationManager\n        {\n            PausesLocationUpdatesAutomatically = false,\n            DesiredAccuracy = CLLocation.AccurracyBestForNavigation,\n            AllowsBackgroundLocationUpdates = true\n        };\n        // Add code here\n        locationManager.LocationsUpdated +=\n    async (object sender, CLLocationsUpdatedEventArgs e) =>\n        {\n            // Final block of code goes here\n        };\n        locationManager.RequestAlwaysAuthorization();\n        locationManager.StartUpdatingLocation();\n    };\n    ```", "```cs\n    using CoreLocation;\n    using MeTracker.Repositories;\n    namespace MeTracker.Services;\n    public partial class LocationTrackingService : ILocationTrackingService\n    {\n        CLLocationManager locationManager;\n        ILocationRepository locationRepository;\n        public LocationTrackingService(ILocationRepository locationRepository)\n        {\n            this.locationRepository = locationRepository;\n        }\n        partial void StartTrackingInternal()\n        {\n        // Remainder of code omitted for brevity\n        }\n    ```", "```cs\n    locationManager.LocationsUpdated +=\n    async (object sender, CLLocationsUpdatedEventArgs e) =>\n    {\n        // Final block of code goes here\n        var lastLocation = e.Locations.Last();\n        var newLocation = new Models.Location(lastLocation.Coordinate.Latitude, lastLocation.Coordinate.Longitude);\n         await locationRepository.SaveAsync(newLocation);\n    };\n    ```", "```cs\n    using Android.App;\n    using Android.App.Job;\n    namespace MeTracker.Platforms.Android.Services;\n    internal class LocationJobService : JobService\n    {\n        public override bool OnStartJob(JobParameters @params)\n        {\n            return true;\n        }\n        public override bool OnStopJob(JobParameters @params)\n        {\n            return true;\n        }\n    }\n    ```", "```cs\n[Service(Name = \"MeTracker.Platforms.Android.Services.LocationJobService\", Permission = \"android.permission.BIND_JOB_SERVICE\")]\ninternal class LocationJobService : JobService\n```", "```cs\n    namespace MeTracker.Services;\n    public partial class LocationTrackingService : ILocationTrackingService\n    {\n        partial void StartTrackingInternal()\n        {\n        }\n    }\n    ```", "```cs\n    using Android.App.Job;\n    using Android.Content;\n    using MeTracker.Platforms.Android.Services;\n    namespace MeTracker.Services;\n    public partial class LocationTrackingService : ILocationTrackingService\n    {\n        partial void StartTrackingInternal()\n        {\n            var javaClass = Java.Lang.Class.FromType(typeof(LocationJobService));\n            var componentName = new ComponentName(global::Android.App.Application.Context, javaClass);\n            var jobBuilder = new JobInfo.Builder(1, componentName);\n            jobBuilder.SetOverrideDeadline(1000);\n            jobBuilder.SetPersisted(true);\n            jobBuilder.SetRequiresDeviceIdle(false);\n            jobBuilder.SetRequiresBatteryNotLow(true);\n            var jobInfo = jobBuilder.Build();\n        }\n    }\n    ```", "```cs\n    var jobScheduler = (JobScheduler)global::Android.App.Application.Context.GetSystemService(Context.JobSchedulerService);\n    jobScheduler.Schedule(jobInfo);\n    ```", "```cs\n    private ILocationRepository locationRepository;\n    public LocationJobService()\n    {\n        locationRepository = MauiApplication.Current.Services.GetService<ILocationRepository>();\n    }\n    ```", "```cs\n    using Android.Content;\n    using Android.Locations;\n    using Android.OS;\n    using Android.Runtime;\n    using MeTracker.Repositories;\n    ```", "```cs\n        public override bool OnStartJob(JobParameters @params)\n        {\n            return true;\n        }\n        public void OnLocationChanged(global::Android.Locations.Location location) { }\n        public override bool OnStopJob(JobParameters @params) => true;\n        public void OnStatusChanged(string provider, [GeneratedEnum] Availability status, Bundle extras) { }\n        public void OnProviderDisabled(string provider) { }\n        public void OliknProviderEnabled(string provider) { }\n    ```", "```cs\n    public void OnLocationChanged(Android.Locations.Location location)\n    {\n    var newLocation = new Models.Location(location.Latitude, location.Longitude);\n    locationRepository.SaveAsync(newLocation);\n    }\n    ```", "```cs\n    public override bool OnStartJob(JobParameters @params)\n    {\n        PermissionStatus status = PermissionStatus.Unknown;\n        Task.Run(async ()=> status = await AppPermissions.CheckRequiredPermissionAsync()).Wait();\n        if (status == PermissionStatus.Granted)\n        {\n        }\n    }\n    ```", "```cs\n    public override bool OnStartJob(JobParameters @params)\n    {\n        PermissionStatus status = PermissionStatus.Unknown;\n        Task.Run(async ()=> status = await AppPermissions.CheckRequiredPermissionAsync()).Wait();\n        if (status == PermissionStatus.Granted)\n        {\n            locationManager = (LocationManager)ApplicationContext.GetSystemService  (Context.LocationService);\n            locationManager.RequestLocationUpdates (LocationManager.GpsProvider, 1000L, 0.1f, this);\n            return true;\n        }\n        return false;\n    }\n    ```", "```cs\n    Task<List<Models.Location>> GetAllAsync();\n    ```", "```cs\n    public async Task<List<Location>> GetAllAsync()\n    {\n        await CreateConnectionAsync();\n        var locations = await connection.Table<Location> ().ToListAsync();\n        return locations;\n    }\n    ```", "```cs\n    namespace MeTracker.Models{\n    public class Point\n    {\n        public Location Location { get; set; }\n        public int Count { get; set; } = 1;\n        public Color Heat { get; set; }\n    }\n    }\n    ```", "```cs\n    [ObservableProperty]\n    private List<Models.Point> points;\n    ```", "```cs\n    public MainViewModel(ILocationTrackingService locationTrackingService, ILocationRepository locationRepository)\n    {\n        this.locationTrackingService = locationTrackingService;\n        this.locationRepository = locationRepository;\n        MainThread.BeginInvokeOnMainThread(async() =>\n        {\n            locationTrackingService.StartTracking();\n            await LoadDataAsync();\n        });\n    }\n    ```", "```cs\nprivate async Task LoadDataAsync()\n{\n    var locations = await locationRepository.GetAll();\n    var pointList = new List<Models.Point>();\n    foreach (var location in locations)\n    {\n        //If no points exist, create a new one and continue to the next location in the list\n        if (!pointList.Any())\n        {\n            pointList.Add(new Models.Point() { Location = location });\n            continue;\n        }\n        var pointFound = false;\n        //try to find a point for the current location\n        foreach (var point in pointList)\n        {\n            var distance = Location.CalculateDistance(\n                new Location(point.Location.Latitude, point.Location.Longitude),\n                new Location(location.Latitude, location.Longitude),\n                DistanceUnits.Kilometers);\n            if (distance < 0.2)\n            {\n                pointFound = true;\n                point.Count++;\n                break;\n            }\n        }\n        //if no point is found, add a new Point to the list of points\n        if (!pointFound)\n        {\n            pointList.Add(new Models.Point() { Location = location });\n        }\n        // Next section of code goes here\n    }\n}\n```", "```cs\n    private async Task LoadDataAsync()\n    {\n        // The rest of the method has been omitted for brevity\n        // Next section of code goes here\n        if (pointList == null || !pointList.Any())\n        {\n            return;\n        }\n        var pointMax = pointList.Select(x => x.Count).Max();\n        var pointMin = pointList.Select(x => x.Count).Min();\n        var diff = (float)(pointMax - pointMin);\n        // Last section of code goes here\n    }\n    ```", "```cs\n    private async Task LoadDataAsync()\n    {\n        // The rest of the method has been omitted for brevity\n        // Next section of code goes here\n        if (pointList == null || !pointList.Any())\n        {\n            return;\n        }\n        var pointMax = pointList.Select(x => x.Count).Max();\n        var pointMin = pointList.Select(x => x.Count).Min();\n        var diff = (float)(pointMax - pointMin);\n        // Last section of code goes here\n        foreach (var point in pointList)\n        {\n            var heat = (2f / 3f) - ((float)point.Count / diff);\n            point.Heat = Color.FromHsla(heat, 1, 0.5);\n        }\n        Points = pointList;\n    }\n    ```", "```cs\n    namespace MeTracker.Controls;\n    public class CustomMap : ContentView\n    {\n        public CustomMap()\n        {\n        }\n    }\n    ```", "```cs\n    using Microsoft.Maui.Controls.Maps;\n    using Microsoft.Maui.Maps;\n    using Map = Microsoft.Maui.Controls.Maps.Map;\n    namespace MeTracker.Controls;\n    public class CustomMap : Map\n    {\n        public CustomMap()\n        {\n        }\n    }\n    ```", "```cs\n    public CustomMap()\n    {\n        IsScrollEnabled = true;\n        IsShowingUser = true;\n    }\n    ```", "```cs\n    public static BindableProperty PointsProperty = BindableProperty.Create(nameof(Points), typeof(List<Models.Point>), typeof(CustomMap), new List<Models.Point>());\n    ```", "```cs\n    public List<Models.Point> Points\n    {\n    get => GetValue(PointsProperty) as List<Models.Point>;\n    set => SetValue(PointsProperty, value);\n    }\n    ```", "```cs\npublic readonly static BindableProperty PointsProperty = BindableProperty.Create(nameof(Points), typeof(List<Models.Point>), typeof(MapView), new List<Models.Point>(), propertyChanged: OnPointsChanged);\nprivate static void OnPointsChanged(BindableObject bindable, object oldValue, object newValue)\n{\n    var map = bindable as Map;\n    if (newValue == null) return;\n    if (map == null) return;\n    foreach (var point in newValue as List<Models.Point>)\n    {\n        // Instantiate a Circle\n        Circle circle = new()\n        {\n            Center = new Location(point.Location.Latitude, point.Location.Longitude),\n            Radius = new Distance(200),\n            StrokeColor = Color.FromArgb(\"#88FF0000\"),\n            StrokeWidth = 0,\n            FillColor = point.Heat\n        };\n        // Add the Circle to the map's MapElements collection\n        map.MapElements.Add(circle);\n    }\n}\npublic List<Models.Point> Points\n{\n    get => GetValue(PointsProperty) as List<Models.Point>;\n    set => SetValue(PointsProperty, value);\n}\n```", "```cs\n    <ContentPage  \n\n    x:Class=\"MeTracker.Views.MainView\">\n    <map:CustomMap x:Name=\"Map\" Points=\"{Binding Points}\" />\n    </ContentPage>\n    ```", "```cs\nprotected override void OnResume()\n{\n    base.OnResume();\n    MainPage = new AppShell();\n}\n```"]