- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating an API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When running Blazor using WebAssembly (InteractiveWebAssembly or InteractiveAuto)
    we need to be able to retrieve data and also change our data. For that to work,
    we need an API to access the data. In this chapter, we will create a web API using
    **Minimal API**.
  prefs: []
  type: TYPE_NORMAL
- en: When using Blazor Server, the API will be secured by the page (if we add an
    **Authorize** attribute), so we get that for free. But with WebAssembly, everything
    will be executed in the browser, so we need something that WebAssembly can communicate
    with to update the data on the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, we will need to cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure you have read the previous chapters or use the `Chapter06` folder
    as a starting point.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the source code for this chapter’s end result at [https://github.com/PacktPublishing/Web-Development-with-Blazor-Third-Edition/tree/main/Chapter07](https://github.com/PacktPublishing/Web-Development-with-Blazor-Third-Edition/tree/main/Chapter07).
  prefs: []
  type: TYPE_NORMAL
- en: Creating the service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many ways to create a service, such as via REST.
  prefs: []
  type: TYPE_NORMAL
- en: For those who haven’t worked with REST before, **REST** stands for **representational
    state transfer**. Simply put, it is a way for machines to talk to other devices
    using HTTP.
  prefs: []
  type: TYPE_NORMAL
- en: 'With REST, we use different HTTP verbs for different operations. They could
    look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **URI** | **Verb** | **Action** |'
  prefs: []
  type: TYPE_TB
- en: '| `/BlogPosts` | Get | Gets a list of blog posts |'
  prefs: []
  type: TYPE_TB
- en: '| `/BlogPosts` | Post | Creates a new blog post |'
  prefs: []
  type: TYPE_TB
- en: '| `/BlogPosts/{id}` | Get | Gets a blog post with a specific ID |'
  prefs: []
  type: TYPE_TB
- en: '| `/BlogPosts/{id}` | Put | Replaces a blog post |'
  prefs: []
  type: TYPE_TB
- en: '| `/BlogPosts/{id}` | Patch | Updates a blog post |'
  prefs: []
  type: TYPE_TB
- en: '| `/BlogPosts/{id}` | Delete | Deletes a blog post |'
  prefs: []
  type: TYPE_TB
- en: 'Table 7.1: Rest calls'
  prefs: []
  type: TYPE_NORMAL
- en: We will implement an API for **Tags**, **Categories**, and **blog posts**.
  prefs: []
  type: TYPE_NORMAL
- en: Since the API takes care of whether the `Post` should be created, we’ll cheat
    and only implement `Put` (replace) because we don’t know whether we are creating
    or updating the data.
  prefs: []
  type: TYPE_NORMAL
- en: We will implement the API in the **BlazorWebApp** project.
  prefs: []
  type: TYPE_NORMAL
- en: Learning about Minimal APIs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we jump into implementing the Minimal API, let’s take a moment to learn
    about it. Back in November 2019, one of the members of the **Distributed Application
    Runtime** (**Dapr**) team wrote a couple of tutorials on how to build a distributed
    calculator using different languages.
  prefs: []
  type: TYPE_NORMAL
- en: They had examples using Go, Python, Node.js, and .NET Core. The code showed
    how much harder it was to write a distributed calculator in C# than in other languages.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft asked various non-.NET developers what their perception was of C#.
    Their response wasn’t great. Then, Microsoft asked them to complete a tutorial
    using an early version of Minimal APIs.
  prefs: []
  type: TYPE_NORMAL
- en: After the tutorial, they were asked about their perception, and their response
    had shifted and was now more positive; it felt like home.
  prefs: []
  type: TYPE_NORMAL
- en: The goal of Minimal APIs was to reduce complexity and ceremony and embrace minimalism.
    I thought that “minimal” meant that I wouldn’t be able to do everything, but digging
    deeper into the code, I soon realized that was not the case.
  prefs: []
  type: TYPE_NORMAL
- en: From my point of view, Minimal APIs are a much nicer way to code APIs. The idea
    is that if we need to, we can grow our API, and as soon as we feel like it, we
    can move our code into a controller to get more structure. At my workplace, we
    switched to Minimal APIs because we think the syntax is much nicer.
  prefs: []
  type: TYPE_NORMAL
- en: 'A very simple sample of adding a Minimal API would be just adding this line
    in `Program.cs`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We say that if we navigate to a URL without specifying any route, just `"/"`,
    we return a string with `"Hello World"`.
  prefs: []
  type: TYPE_NORMAL
- en: This is, of course, the simplest example possible, but it is possible to implement
    more complex things as well, as we will see in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the API controllers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have three data models: blog posts, Tags, and Categories.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s create three different files, one for each data model, to demonstrate
    that there are friendly ways to add more complex APIs using Minimal APIs. For
    a small project, it would probably make more sense to add everything in `Program.cs`.
  prefs: []
  type: TYPE_NORMAL
- en: Adding APIs for handling blog posts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s start by adding the API methods for handling blog posts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following steps to create the API:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `BlazorWebApp` project, add a new folder called `Endpoints`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `Endpoints` folder, create a class called `BlogPostEndpoints.cs`. The
    idea is to create an extension method we can use later in `Program.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add these `using` statements at the top of the file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace the class with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As we are creating an extension method, we must ensure the class is static.
    The `MapBlogPostApi` method uses the `this` keyword, which makes the method available
    on any `WebApplication` class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We set up the Minimal API by using `MapGet` and a path, which means that the
    method will run if we access that path with the correct parameters using a `Get`
    verb.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The method takes a couple of parameters. The first is of the `IBlogApi` type,
    which will use dependency injection to get an instance of the class we need, in
    this case, `BlogApiJsonDirectAccess`, which will access the JSON files we have
    stored.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The other parameters will use the query string (since we are using the `query`
    attribute); in most cases, a Minimal API will figure these things out, but it’s
    never wrong to nudge it in the right direction.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We have created a method that returns the data directly from the database (the
    same API the Blazor Server project is using).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We also need to make sure to call it from `Program.cs`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In `Program.cs`, add the following namespace:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also, add the following code just above `app.Run();`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It’s time to test the API; make sure to start the `BlazorWebApp` project. In
    .NET 6, the port numbers are random, so replace `{REPLACEWITHYOURPORTNUMBER}`
    with the port number for your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to the following URL: `https://localhost:{REPLACEWITHYOURPORTNUMBER}/Api/BlogPosts?numberofposts=10&startindex=0`
    (the port number might be something else). We will get some JSON back with a list
    of our blog posts.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We are off to a good start! Now, we need to implement the rest of the API as
    well.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the `Endpoints`/`BlogPostEndpoint.cs` file, in the `MapBlogPostApi` method,
    let’s add the code to get the blog post count:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We use the `Get` verb but with another route.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We also need to be able to get one blog post. Add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this case, we are using the *Get* verb but with another URL, containing the
    ID for `Post` that we want to get.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We are using a string as an ID and some databases, like RavenDB, for example,
    use an ID that looks like this: `CollectionName/IdOfThePost`; we also make sure
    to add `*` to the parameter. This way, it will use anything that comes after as
    an ID, otherwise it would interpret the slash as part of the routing and not find
    the endpoint.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, we need an API that is protected, typically the one that updates or deletes
    things.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let’s add an API that saves a blog post. Add the following code under the code
    we just added:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As I mentioned earlier in this chapter, we will only add one API for creating
    and updating blog posts, and we will use the `Put` verb (replace) to do that.
    We have added the `RequireAuthorization` method at the end, which will ensure
    that the user needs to be authenticated to call the method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next up, we add a code for deleting blog posts. To do this, add the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this case, we use the `Delete` verb, and just as with saving, we add the
    `RequireAuthorization` method at the end.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we need to do this for `Categories` and `Tags` as well.
  prefs: []
  type: TYPE_NORMAL
- en: Adding APIs for handling Categories
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let’s start with `Categories`. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Endpoints` folder, add a new class called `CategoryEndpoints.cs`. Replace
    the code with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.cs`, add the following code just above `app.Run()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: These are all the methods needed to handle `Categories`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s do the same thing with `Tags`.
  prefs: []
  type: TYPE_NORMAL
- en: Adding APIs for handling Tags
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let’s do the same things for Tags by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Endpoints` folder, add a new class called `TagEndpoints.cs`. Add the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.cs`, add the following code just above `app.Run()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: But wait! What about comments? The way we have implemented comments means that
    the component will never run as WebAssembly, so we don’t really need to implement
    it in the API. But we are not going to leave the comments hanging – let’s implement
    those as well!
  prefs: []
  type: TYPE_NORMAL
- en: Adding APIs for handling comments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let’s do the same things for comments by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Endpoints` folder, add a new class called `CommentEndpoints.cs`. Add
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.cs`, add the following code just above `app.Run()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Great! We have an API! Now, it’s time to create the client that will access
    that API.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To access the API, we need to create a client. There are many ways of doing
    this, but we will do it in the simplest way possible by writing the code ourselves.
  prefs: []
  type: TYPE_NORMAL
- en: 'The client will implement the same `IBlogApi` interface. This way, we have
    the same code regardless of which implementation we are using, and direct JSON
    access with `BlogApiJsonDirectAccess` or `BlogApiWebClient`, which we are going
    to create next:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the **Dependencies** node under `BlazorWebApp.Client` and select
    **Manage NuGet Packages**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for `Microsoft.AspNetCore.Components.WebAssembly.Authentication` and
    click **Install**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Also, search for `Microsoft.Extensions.Http` and click **Install**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `BlazorWebApp.Client` project, in the root of the project, add a new
    class and name it `BlogApiWebClient.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the newly created file and add the following namespaces:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add `IBlogApi` to the class and make it public like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Some API calls will be public (do not require authentication), but `HttpClient`
    will be configured to require a token.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The handling of tokens is handled automatically by Blazor, so we only need one
    client, and, in this case, we call it `Api`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To be able to call the API, we need to inject `HttpClient`. Add the following
    code to the class:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, it’s time to implement calls to the API. Let’s begin with the *Get* calls
    for blog posts. Add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We use the `HttpClient` we injected and then call `GetFromJsonAsync`, which
    will automatically download the JSON and convert it into the class we supply to
    the generic method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, it gets a little trickier: we need to handle authentication. Luckily,
    this is built into `HttpClient` so we only need to handle `AccessTokenNotAvailableException`.
    If a token is missing, it will automatically try and renew it, but if there is
    a problem (for example, the user is not logged in), we can redirect to the login
    page.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We will come back to tokens and how authentication works in *Chapter 8*, *Authentication
    and Authorization*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, we add the API calls that need authentication, such as saving or deleting
    a blog post.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code under the code we just added:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If the call throws `AccessTokenNotAvailableException`, that means `HttpClient`
    couldn’t get or renew a token automatically, and the user needs to log in.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This state should probably never happen because we will ensure that when the
    user navigates to that page, they will need to be logged in, but it’s better to
    be safe than sorry.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, we need to do the same for `Categories`. Add the following code to the
    `BlogApiWebClient` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next up, we will do the same for `Tags`. Add the following code just under
    the code we just added:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s not forget about our comments! Add the following code just under the
    code we just added:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Great job! Our API client is now done!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to create an API using Minimal APIs and an API
    client, which is an important part of most applications. This way, we can get
    blog posts from our database and show them when we are running on WebAssembly.
    It is worth mentioning that we can always run our applications using a web API;
    this is just to show that we can use different ways to access our data depending
    on what hosting model we are currently using.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will add the login functionality to our sites and call
    our API for the first time.
  prefs: []
  type: TYPE_NORMAL
