- en: '*Chapter 5*: Tunnels and Threads'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter begins with the concept of a **tunnel**. Created using multiple
    diverts and at least two knots (please refer to [*Chapter 2*](B17597_02_Final_PG_ePub.xhtml#_idTextAnchor031),
    *Knots, Diverts, and Looping Patterns*), tunnels serve as a faster way in which
    to create complex structures than previously discussed in the last chapters. Following
    this, we will move on to review **threads**, which is another way of using diverts
    to connect multiple parts of an ink project dynamically. Finally, we will look
    at combining tunnels and threads to make even more complex structures based on
    the simple rules of how ink understands knots and diverts within a story.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Diverting to a divert
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pulling on threads
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Combining tunnels and threads
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we will explore the various ways of using tunnels and threads
    to make more complex projects. We have already explored multiple levels of choices
    and their outcomes to create a subdivided story. Instead of diverting to one knot
    or stitch after another, we will learn how to integrate tunnels as a series of
    diverts before returning to their original location. We will also look at how
    knots can be easily combined into one by *threading* them together.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The examples used in this chapter, in the `*.ink` files, can be found on GitHub
    at [https://github.com/PacktPublishing/Dynamic-Story-Scripting-with-the-ink-Scripting-Language/tree/main/Chapter5](https://github.com/PacktPublishing/Dynamic-Story-Scripting-with-the-ink-Scripting-Language/tree/main/Chapter5).
  prefs: []
  type: TYPE_NORMAL
- en: Diverting to a divert
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 2*](B17597_02_Final_PG_ePub.xhtml#_idTextAnchor031), *Knots, Diverts,
    and Looping Patterns*, the concept of a divert was introduced alongside story
    sections called knots. Using diverts and knots, looping structures were created
    and other ink concepts were also revealed as alternatives (please refer to [*Chapter
    3*](B17597_03_Final_PG_ePub.xhtml#_idTextAnchor048), *Sequences, Cycles, and Shuffling
    Text*). The use of functions and passing values to knots were covered in [*Chapter
    4*](B17597_04_Final_PG_ePub.xhtml#_idTextAnchor062), *Variables, Lists, and Functions*.
    This section builds on those concepts by explaining how diverts can be used to
    create more advanced stories.
  prefs: []
  type: TYPE_NORMAL
- en: 'In [*Chapter 2*](B17597_02_Final_PG_ePub.xhtml#_idTextAnchor031), *Knots, Diverts,
    and Looping Patterns*, diverts appeared according to the following pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 1:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure 5.1 – Inky''s output for Example 1'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.1_B17597.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.1 – Inky's output for Example 1
  prefs: []
  type: TYPE_NORMAL
- en: A divert can also be used multiple times. In ink, this is known as the concept
    of a **tunnel**. The flow will move to a knot and then back to its original position.
    From the reader's perspective, the flow *tunnels* from one section to another.
    Tunnels are an incredibly useful concept in ink where looping structures are common.
  prefs: []
  type: TYPE_NORMAL
- en: In this topic, we will review how to make and use tunnels. Instead of needing
    to specify each location of a divert within a knot or a stitch, a tunnel allows
    an author to move the flow of a story through a series of sections and then back
    again when the tunnel finally ends.
  prefs: []
  type: TYPE_NORMAL
- en: Making tunnels
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Tunnels are created in ink by using a divert, `->`, the name of a knot or stitch,
    and then another divert, `->`. This signals to ink that the flow will move to
    the knot and then back again. In the destination knot, two diverts are then used
    together: `->->`. This creates the *tunneling* effect of the flow moving to the
    knot and then moving back again:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 2:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '*Example 2* can appear confusing if you don''t remember how the flow works
    in ink. A divert moves the flow to a destination in the story. In *Example 2*,
    the flow starts with the text of `For the reader, <>`. Then, this is diverted
    to the `next_part` knot. The start of the tunnel begins with the code of `-> next_part
    ->`, continues into the `next_part` knot, and then returns with the use of two
    diverts, `->->`. For a reader who only sees the output, it will appear as a complete
    sentence:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.2 – Inky''s output from Example 2'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.2_B17597.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.2 – Inky's output from Example 2
  prefs: []
  type: TYPE_NORMAL
- en: Reminder
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 1, Text, Flow, Choices, and Weaves*, introduced the concept of glue
    and the use of the less-than and greater-than symbols together. This concept *glues* one
    line to the end of the previous. In *Example 2*, glue is used before the start
    of the tunnel and then after it ends to create the complete sentence from the
    knot in the story.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Tunnels can connect any two points within a story. In *Example 2*, the tunnel
    started, moved to a knot, and then returned. Another use of a tunnel might be
    to create a series of story events for a player to view. You can do this by creating
    a tunnel from one knot to the next until the end of the story:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 3:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In *Example 3*, the three different knots (that is, `past`, `present`, and `future`)
    are all part of one long tunnel. The first connects to the `past` knot, the `past`
    knot is then connected to the `present` knot, the `present` knot is connected
    to the `future` knot, and, finally, the `future` knot is connected to the `DONE`
    knot to end the flow and the story. In each of these cases, the use of the two
    diverts, `->->`, points back to where the tunnel started before it continues to
    the next knot in the longer series. As with *Example 2* and its complete sentence,
    the resulting output from *Example 3* is one single flow through the sections
    to create a complete narrative experience for the reader.
  prefs: []
  type: TYPE_NORMAL
- en: Tunneling to tunnels
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Example 3* pointed towards a great use of tunnels: they can connect to other
    tunnels! It is possible to tunnel into a tunnel in ink. While linear patterns
    such as the one used in *Example 3* are common, advanced patterns reuse tunnels
    as part of larger, looping structures. Because knots that use two diverts will
    always return to where they started, it is possible to use knots to perform small
    calculations or to check values before continuing the repeating pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 4:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '*Example 4* demonstrates a more complex pattern using knots, variables, and
    tunnels. For each loop of the `kitten` knot, a tunnel is created for the `check_kitten`
    knot, which then returns to `kitten` again. In the `check_kitten` knot, two checks
    are made. The first check is to make sure the value of the `anger` variable is
    greater than or equal to `2`. If it is, the sentence is shown and then the story
    diverts to `DONE`. The second check is to make sure the `playful` variable is
    greater than or equal to `2`. If this second check is true, a different sentence
    is shown, and the story diverts to `DONE`. Inside the weave created by the two
    sticky choices, each option, either `scratch_head` or `scratch_side`. Inside each,
    the knots associated with the player''s actions increase the value of the variable.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Example 4* uses multiple tunnels to create a complex pattern. However, there
    is another concept in ink that would make the same code easier to understand:
    **threads**. As we will discuss in the next section, threads allow us to easily
    pull in knots without needing to divert to them first.'
  prefs: []
  type: TYPE_NORMAL
- en: Pulling on threads
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Diverts were introduced as *pointing* to their destination. To create a tunnel,
    a hyphen and a greater-than symbol were combined, `->`, on either side of the
    name of the knot or stitch. However, diverts can *point* inward as well. When
    a divert is created with a less-than symbol and a hyphen, `<-`, it becomes a different
    concept called a **thread**. Instead of moving the flow to the destination, ink
    *threads* the destination's text or code into another location.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will work with threads to collapse more complex weaves into
    simpler structures. Instead of multiple levels of choices and their text outcomes,
    we will use threads to achieve the same result in a more efficient way.
  prefs: []
  type: TYPE_NORMAL
- en: Making threads
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Often, threads are considered to be an inverse of diverts. Instead of the flow
    moving to the section of the story, the section of the story moves to the current
    position of the flow. Returning to the code from *Example 4*, threads can be used
    in multiple places to achieve the same result:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 5:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In *Example 5*, threads are used in place of the previous tunnels in *Example
    4*. The `scratch_head` and `scratch_side` knots are now *threaded* into the code
    of the `kitten` knot. This is also true for `check_kitten`. Instead of creating
    multiple tunnels, threads are often used to collapse an increasingly complex structure
    into sections that can be *threaded* together.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, the use of complex tunnel and thread structures can confuse Inky.
    Always double-check all of the code when using these more advanced concepts!
  prefs: []
  type: TYPE_NORMAL
- en: Using multiple threads
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Each use of a thread must be on its own line. The reason why they cannot be
    combined is that ink moves the section of the story up to the location of the
    current flow. A second thread cannot have its content moved to the previous location.
    It no longer exists! However, threads, like diverts, can also be elements within
    a set or alternative. Just as a different form of a divert can be *pointing* inward,
    threads can be used with a shuffle on a single line:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 6:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In *Example 6*, threads are used as elements of a shuffle. Each time the story
    is run, one of the two threads will be chosen and *threaded* into the story, creating
    a new experience. Combining threads with alternatives in this way is useful when
    creating *alternative* content for a story that is accessed as part of the thread
    itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'A common pattern found in many role-playing video games uses various player
    statistics to determine what content is available based on testing the value of
    a variable. If it is within a certain range, content can then be *threaded* into
    the current weave. This will add additional context for the result of an action
    for the reader:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 7:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Each of the stitches in *Example 7* holds additional text. Because the stitches
    are a part of the overall `save_or_doom` knot, they can be used as part of a thread.
    Subsections of a story are still *sections*.
  prefs: []
  type: TYPE_NORMAL
- en: '*Example 7* also uses conditional options, as covered in [*Chapter 2*](B17597_02_Final_PG_ePub.xhtml#_idTextAnchor031),
    *Knots, Diverts, and Looping Patterns*, and variables, as discussed in [*Chapter
    4*](B17597_04_Final_PG_ePub.xhtml#_idTextAnchor062), *Variables, Lists, and Functions*.
    By testing for the range of values of the `strength` and `intelligence` variables,
    the `15`, both options are shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.3 – Inky''s output from Example 7'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.3_B17597.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.3 – Inky's output from Example 7
  prefs: []
  type: TYPE_NORMAL
- en: 'A single thread can be created using the inverse action of diverting. Instead
    of moving to a location, the section moves to the current moment in the flow.
    Additionally, multiple threads can be combined to create a continuous narrative
    experience for the reader as they are pulled together. When working with threads,
    there is one more important aspect: the `DONE` keyword. In the last section of
    this topic, we will examine how threads can be closed and what this means when
    you are using threads inside each other.'
  prefs: []
  type: TYPE_NORMAL
- en: Ending threads
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `DONE` and `END` keywords were introduced in [*Chapter 2*](B17597_02_Final_PG_ePub.xhtml#_idTextAnchor031),
    *Knots, Diverts, and Looping Patterns*. The differences between the two keywords
    were explained in their usage. The `END` keyword stops the story, and the `DONE`
    keyword stops the current flow. When using threads, the flow of a story is also
    affected. In other words, the `DONE` keyword closes the *current* flow. In many
    cases, this will be the story itself. When using threads, the keyword closes the
    thread itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'When creating knots in Inky, often, authors will get a warning suggesting the
    `DONE` keyword is needed within a knot that does not contain the keyword. When
    working with threads, this warning clues the author into this important aspect
    of threads and the `DONE` keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 8:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '*Example 8* uses two instances of the `DONE` keyword. This might seem strange,
    but each use of the keyword closes its own thread. When run within Inky, the two
    choices, each within a separate thread, will be combined:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.4 – The combined thread output for Example 8'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.4_B17597.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.4 – The combined thread output for Example 8
  prefs: []
  type: TYPE_NORMAL
- en: 'In *Example 8*, the separate uses of the `DONE` keyword do not interact with
    each other. Each thread is contained within itself. This becomes evident when
    trying to move the inclusion of the second thread inside the first after the `DONE`
    keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 9:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In *Example 9*, the second thread comes after the use of the `DONE` keyword.
    Unlike *Example 8*, where both choices will be combined into a single weave, the
    story will end before the second thread occurs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.5 – Thread closing in Example 9'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.5_B17597.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.5 – Thread closing in Example 9
  prefs: []
  type: TYPE_NORMAL
- en: '*Example 9* demonstrates the interaction between the `DONE` keyword and the
    threads. The `DONE` keyword closes the current flow. In *Example 9*, the second
    thread inside the first is never reached because it is closed using the `DONE`
    keyword.'
  prefs: []
  type: TYPE_NORMAL
- en: Threads and tunnels are not separate concepts, but two different ways in which
    to achieve similar results based on the needs of the author. In the next topic,
    we will look at various ways of combining both concepts to create even more complex
    stories. We will use tunnels to move to a location in a story and examine how
    threads can be repeated instead of writing more code.
  prefs: []
  type: TYPE_NORMAL
- en: Combining tunnels and threads
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tunnels allow the flow of a story to move to a knot or a stitch and then return.
    Threads act as the inverse, moving the content from the knot or the stitch to
    the current flow position. Together, they form a powerful way in which to craft
    a story composed of different parts. Often, in advanced projects, these two concepts
    are paired together with weaves and gathering points to expand or contract the
    number of possible branches.
  prefs: []
  type: TYPE_NORMAL
- en: Tunnels can be reused, and threads can be repeated. In this topic, we will explore
    how threads and tunnels can be combined to create more complex stories using less
    overall code.
  prefs: []
  type: TYPE_NORMAL
- en: Reusing tunnels and repeating threads
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Example 4* used multiple tunnels, and *Example 5* showed the same result using
    multiple threads. It is also possible to combine multiple tunnels and threads
    by breaking up content into stitches as part of multiple knots for each part of
    a story. For example, many role-playing video games start by presenting dialogue
    from a character. Then, they provide the player with the illusion of control by
    letting them choose between various options before, finally, looping back to the
    same options until the player makes a certain selection to continue:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 10:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '*Example 10* reuses a tunnel. The first instance occurs when the reader selects
    between the `old_shrine` knot and does not have the rake (that is, if `has_rake`
    is equal to `false`), they are prompted with the **Retrieve rake** option and
    the second possible instance of the tunnel.'
  prefs: []
  type: TYPE_NORMAL
- en: Threads are used in *Example 10* to break up the text of the responses from
    the character. This creates a simplified weave with the text split into its stitches.
    For authors, this pattern allows them to change or add to the response text without
    needing to worry about the code portion of the weave.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, gathering points (as discussed in [*Chapter 1*](B17597_01_Final_PG_ePub.xhtml#_idTextAnchor014),
    *Text, Flow, Choices, and Weaves*) are used three times. The first one collapses
    the possible branches of the first weave and creates the first instance of a tunnel.
    The second occurs as part of the `rake` stitch. This gathering point is the end
    of both instances of tunnels and collapses the result of either option: `has_rake`
    is equal to `true`), the **Retrieve rake** option no longer appears, and the story
    ends with the character raking the leaves at the old shrine.'
  prefs: []
  type: TYPE_NORMAL
- en: '`"This is an example," Dan wrote`. However, in *Example 8*, the name of the
    character appears before the dialogue to signal who is saying the words. [*Chapter
    10*](B17597_10_Final_PG_ePub.xhtml#_idTextAnchor145), *Dialogue Systems with ink*,
    will revisit the use of tags and examine some approaches for writing and tagging
    dialogue appearing in a video game.'
  prefs: []
  type: TYPE_NORMAL
- en: Threads with tunnels
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Threads move a section of a story to the current flow position when moving
    through the in-memory version of the code. Internally, this does not change their
    actual location in the larger story code but their connection to the current version
    of the flow as the story is run. This means it is possible to include a tunnel
    inside a thread. In these scenarios, the flow would *thread* the knot or stitch
    and then move to another section and back again:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 11:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '*Example 11* demonstrates the basic pattern of using tunnels inside threads.
    This is safe to do in ink because of the way the flow *threads* through the knots
    or stitches. A more complicated usage might be part of a dialogue system for a
    video game, where data is passed to knots to perform different small calculations
    as part of the reaction to a player following certain branches of a conversation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 12:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '*Example 12* is a more practical example of the pattern introduced in *Example
    1*. It uses a thread to pass data to a knot as if it was a function. Additionally,
    *Example 12* uses a tunnel inside the `adjust_reputation` knot as a connection
    to the `report_reputation` knot. For each choice, the value of the `reputation`
    variable will be changed after a reader makes the selection. The new value of
    `reputation` will be shown as a result.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '*Example 12* uses a backslash, `\`, with opening, `(`, and closing, `)`, parentheses.
    These *escape* the use of the parentheses instead of creating an optional label.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned even more about how diverts work with knots and
    stitches in ink. We explored how the concept of a tunnel connects two different
    sections in ink. When a story runs, the flow moves to the knot or the stitch and
    then returns with the use of two diverts, `->->`. We also reviewed how tunnels
    can be used as part of a more complicated flow pattern of a longer series of connections
    between two sections. Next, we saw how threads, another concept in ink, act as
    the inverse of a divert, where a section is moved to the current flow location
    instead of the flow moving to its content. Finally, we examined some patterns
    of using tunnels inside threads to pass data to a knot and show the changed values
    of a variable.
  prefs: []
  type: TYPE_NORMAL
- en: Threads and tunnels, while more advanced concepts, create simpler overall code.
    Threads allow developers to separate code into different sections and then *thread*
    them back together again. Tunnels allow developers to achieve the same general
    result as threads but in a different way. Instead of pulling content together,
    a tunnel moves to a knot or a stitch and then back again, *tunneling* through
    a story to a location and then back again. Threads and tunnels have their specific
    usages, but both allow a developer to create more complex projects by using their
    different sections more efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we move on to use the ink-Unity Integration plugin. While
    Inky has been used to show the ink code output, the ink-Unity Integration plugin
    will allow us to have far more control over how an ink story runs. In the coming
    chapters, we will also learn how to use C# and the ink API to make selections,
    change the value of variables, and even access functions in ink code.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To return from a tunnel in a knot or a stitch, which ink concept must be used
    twice?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do tunnels work in ink?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How are threads different from diverts and tunnels?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can multiple threads be used on the same line?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
