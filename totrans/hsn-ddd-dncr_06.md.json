["```cs\npublic class UpdateCustomerAddressDetails\n{\n    public string BillingStreet { get; set; }\n    public string BillingCity { get; set; }\n    public string BillingPostalCode { get; set; }\n    public string BillingCountry { get; set; }\n    public string DeliveryStreet { get; set; }\n    public string DeliveryCity { get; set; }\n    public string DeliveryPostalCode { get; set; }\n    public string DeliveryCountry { get; set; }\n}\n```", "```cs\npublic class Address\n{\n    public string Street { get; set; }\n    public string City { get; set; }\n    public string PostalCode { get; set; }\n    public string Country { get; set; }\n}\n\npublic class UpdateCustomerAddressDetails\n{\n    public Address BillingAddress { get; set; }\n    public Address DeliveryAddress { get; set; }\n}\n```", "```cs\nusing System;\n\nnamespace Marketplace.Contracts\n{\n    public static class ClassifiedAds\n    {\n        public static class V1\n        {\n            public class Create\n            {\n                public Guid Id { get; set; }\n                public Guid OwnerId { get; set; }\n            }\n        }\n    }\n}\n```", "```cs\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace Marketplace.Api\n{\n    [Route(\"/ad\")]\n    public class ClassifiedAdsCommandsApi : Controller\n    {\n        [HttpPost]\n        public async Task<IActionResult> Post(\n            Contracts.ClassifiedAds.V1.Create request)\n        {\n            // handle the request here\n\n            return Ok();\n        }\n    }\n}\n```", "```cs\nusing System.IO;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing static System.Environment;\nusing static System.Reflection.Assembly;\n\nnamespace Marketplace\n{\n    public static class Program\n    {\n        static Program() => \n            CurrentDirectory = Path.GetDirectoryName(GetEntryAssembly().Location);\n\n        public static void Main(string[] args)\n        {\n            var configuration = BuildConfiguration(args);\n\n            ConfigureWebHost(configuration).Build().Run();\n        }\n\n        private static IConfiguration BuildConfiguration(string[] args)\n            => new ConfigurationBuilder()\n                .SetBasePath(CurrentDirectory)\n                .Build();\n\n        private static IWebHostBuilder ConfigureWebHost(\n            IConfiguration configuration)\n            => new WebHostBuilder()\n                .UseStartup<Startup>()\n                .UseConfiguration(configuration)\n                .ConfigureServices(services => \n                    services.AddSingleton(configuration))\n                .UseContentRoot(CurrentDirectory)\n                .UseKestrel();\n    }\n}\n```", "```cs\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\n  <PropertyGroup>\n    <TargetFramework>netcoreapp2.1</TargetFramework>\n  </PropertyGroup>\n  <ItemGroup>\n    <PackageReference Include=\"Microsoft.AspNetCore.App\" />\n    <PackageReference Include=\"Swashbuckle.AspNetCore\" Version=\"4.0.1\" />\n  </ItemGroup>\n  <ItemGroup>\n    <ProjectReference Include=\"..\\Marketplace.Domain\\Marketplace.Domain.csproj\" />\n  </ItemGroup>\n</Project>\n```", "```cs\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Swashbuckle.AspNetCore.Swagger;\nusing static System.Environment;\n// ReSharper disable UnusedMember.Global\n\nnamespace Marketplace\n{\n    public class Startup\n    {\n        public Startup(IHostingEnvironment environment, \n            IConfiguration configuration)\n        {\n            Environment = environment;\n            Configuration = configuration;\n        }\n\n        private IConfiguration Configuration { get; }\n        private IHostingEnvironment Environment { get; }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddMvc();\n            services.AddSwaggerGen(c =>\n                c.SwaggerDoc(\"v1\",\n                    new Info\n                    {\n                        Title = \"ClassifiedAds\",\n                        Version = \"v1\"\n                    }));\n        }\n\n        public void Configure(IApplicationBuilder app, \n            IHostingEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n\n            app.UseMvcWithDefaultRoute();\n            app.UseSwagger();\n            app.UseSwaggerUI(c =>\n                c.SwaggerEndpoint(\n                    \"/swagger/v1/swagger.json\", \n                    \"ClassifiedAds v1\"));\n        }\n    }\n}\n```", "```cs\nnamespace Marketplace.Api\n{\n    public class ClassifiedAdsApplicationService\n    {\n        public void Handle(Contracts.ClassifiedAds.V1.Create command)\n        {\n            // we need to create a new Classified Ad here\n        }\n    }\n}\n```", "```cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddSingleton(new ClassifiedAdsApplicationService());\n    ...\n}\n```", "```cs\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace Marketplace.Api\n{\n    [Route(\"/ad\")]\n    public class ClassifiedAdsCommandsApi : Controller\n    {\n        private readonly ClassifiedAdsApplicationService _applicationService;\n\n        public ClassifiedAdsCommandsApi(\n            ClassifiedAdsApplicationService applicationService)\n            => _applicationService = applicationService;\n\n        [HttpPost]\n        public async Task<IActionResult> Post(\n            Contracts.ClassifiedAds.V1.Create request)\n        {\n            _applicationService.Handle(request);\n\n            return Ok();\n        }\n    }\n}\n```", "```cs\npublic class CreateClassifiedAdHandler : \n    IHandleCommand<Contracts.ClassifiedAds.V1.Create>\n{\n    private readonly IEntityStore _store;\n\n    public CreateClassifiedAdHandler(IEntityStore store) \n        => _store = store;\n\n    public Task Handle(Contracts.ClassifiedAds.V1.Create command)\n    {\n        var classifiedAd = new ClassifiedAd(\n            new ClassifiedAdId(command.Id), \n            new UserId(command.OwnerId));\n\n        return _store.Save(classifiedAd);\n    }\n}\n```", "```cs\npublic interface IHandleCommand<in T>\n{\n    Task Handle(T command);\n}\n\npublic interface IEntityStore\n{\n    Task<T> Load<T>(string id);\n    Task Save<T>(T entity);\n}\n```", "```cs\nusing System.Threading.Tasks;\nusing Marketplace.Contracts;\nusing Microsoft.AspNetCore.Mvc;\nusing static Marketplace.Contracts.ClassifiedAds;\n\nnamespace Marketplace.Api\n{\n    [Route(\"/ad\")]\n    public class ClassifiedAdsCommandsApi : Controller\n    {\n        private readonly IHandleCommand<V1.Create>\n            _createAdCommandHandler;\n\n        public ClassifiedAdsCommandsApi(\n            IHandleCommand<V1.Create> \n            createAdCommandHandler\n        ) =>\n            _createAdCommandHandler = createAdCommandHandler;\n\n        [HttpPost]\n        public Task Post(V1.Create request) => \n            _createAdCommandHandler.Handle(request);\n    }\n}\n```", "```cs\nservices.AddSingleton<IEntityStore, RavenDbEntityStore>();\nservices.AddScoped<\n    IHandleCommand<Contracts.ClassifiedAds.V1.Create>,\n    CreateClassifiedAdHandler>();\n```", "```cs\npublic class RetryingCommandHandler<T> : IHandleCommand<T>\n{\n    static RetryPolicy _policy = Policy\n          .Handle<InvalidOperationException>()\n          .Retry();\n\n    private IHandleCommand<T> _next;\n\n    public RetryingCommandHandler(IHandleCommand<T> next)\n        => _next = next;\n\n    public Task Handle(T command) \n        => _policy.ExecuteAsync(() => _next.Handle(command));\n}\n```", "```cs\nservices.AddScoped<IHandleCommand<V1.Create>>(c =>\n    new RetryingCommandHandler<V1.Create>(\n        new CreateClassifiedAdHandler(c.GetService<RavenDbEntityStore>())));\n```", "```cs\nusing System;\nusing System.Threading.Tasks;\nusing Marketplace.Contracts;\nusing Microsoft.AspNetCore.Mvc;\nusing static Marketplace.Contracts.ClassifiedAds;\n\nnamespace Marketplace.Api\n{\n    [Route(\"/ad\")]\n    public class ClassifiedAdsCommandsApi : Controller\n    {\n        private readonly Func<IHandleCommand<V1.Create>>\n            _createAdCommandHandlerFactory;\n\n        public ClassifiedAdsCommandsApi(\n            Func<IHandleCommand<V1.Create>> createAdCommandHandlerFactory) \n            => _createAdCommandHandlerFactory = createAdCommandHandlerFactory;\n\n        [HttpPost]\n        public Task Post(V1.Create request) => \n            _createAdCommandHandlerFactory().Handle(request);\n    }\n}\n```", "```cs\npublic interface IPaymentApplicationService\n{\n    Guid Authorize(\n        string creditCardNumber, \n        int expiryYear,\n        int expiryMonth,\n        int cvcCode,\n        intcamount);\n    void Capture(Guid authorizationId);\n}\n```", "```cs\nservices.AddScoped<IHandleCommand<V1.Create>>(c =>\n    new RetryingCommandHandler<V1.Create>(\n        new CreateClassifiedAdHandler(c.GetService<RavenDbEntityStore>())));\nservices.AddScoped<IHandleCommand<V1.Create>>(c =>\n    new RetryingCommandHandler<V1.Rename>(\n        new RenameClassifiedAdHandler(c.GetService<RavenDbEntityStore>())));\n// more handlers need to be added with the same composition\n```", "```cs\npublic interface IApplicationService\n{\n    Task Handle(object command);\n}\n```", "```cs\nusing System;\nusing System.Threading.Tasks;\nusing Marketplace.Framework;\nusing static Marketplace.Contracts.ClassifiedAds;\n\nnamespace Marketplace.Api\n{\n    public class ClassifiedAdsApplicationService \n        : IApplicationService\n    {\n        public async Task Handle(object command)\n        {\n            switch (command)\n            {\n                case V1.Create cmd:\n                    // we need to create a new Classified Ad here\n                    break;\n\n                default:\n                    throw new InvalidOperationException(\n                        $\"Command type {command.GetType().FullName} is \n                        unknown\");\n            }\n        }\n    }\n}\n```", "```cs\nusing System;\n\nnamespace Marketplace.Contracts\n{\n    public static class ClassifiedAds\n    {\n        public static class V1\n        {\n            public class Create\n            {\n                public Guid Id { get; set; }\n                public Guid OwnerId { get; set; }\n            }\n\n            public class SetTitle\n            {\n                public Guid Id { get; set; }\n                public string Title { get; set; }\n            }\n\n            public class UpdateText\n            {\n                public Guid Id { get; set; }\n                public string Text { get; set; }\n            }\n\n            public class UpdatePrice\n            {\n                public Guid Id { get; set; }\n                public decimal Price { get; set; }\n                public string Currency { get; set; }\n            }\n\n            public class RequestToPublish\n            {\n                public Guid Id { get; set; }\n            }\n        }\n    }\n}\n```", "```cs\nusing System.Threading.Tasks;\nusing Marketplace.Contracts;\nusing Microsoft.AspNetCore.Mvc;\nusing static Marketplace.Contracts.ClassifiedAds;\n\nnamespace Marketplace.Api\n{\n    [Route(\"/ad\")]\n    public class ClassifiedAdsCommandsApi : Controller\n    {\n        private readonly ClassifiedAdsApplicationService \n        _applicationService;\n\n        public ClassifiedAdsCommandsApi(\n            ClassifiedAdsApplicationService applicationService)\n            => _applicationService = applicationService;\n\n        [HttpPost]\n        public async Task<IActionResult> Post(V1.Create request)\n        {\n            await _applicationService.Handle(request);\n            return Ok();\n        }\n\n        [Route(\"name\")]\n        [HttpPut]\n        public async Task<IActionResult> Put(V1.SetTitle request)\n        {\n            await _applicationService.Handle(request);\n            return Ok();\n        }\n\n        [Route(\"text\")]\n        [HttpPut]\n        public async Task<IActionResult> Put(V1.UpdateText request)\n        {\n            await _applicationService.Handle(request);\n            return Ok();\n        }\n\n        [Route(\"price\")]\n        [HttpPut]\n        public async Task<IActionResult> Put(V1.UpdatePrice request)\n        {\n            await _applicationService.Handle(request);\n            return Ok();\n        }\n\n        [Route(\"publish\")]\n        [HttpPut]\n        public async Task<IActionResult> Put(V1.RequestToPublish request)\n        {\n            await _applicationService.Handle(request);\n            return Ok();\n        }\n    }\n}\n```", "```cs\nusing System;\nusing System.Threading.Tasks;\nusing Marketplace.Contracts;\nusing Marketplace.Domain;\nusing Marketplace.Framework;\nusing static Marketplace.Contracts.ClassifiedAds;\n\nnamespace Marketplace.Api\n{\n    public class ClassifiedAdsApplicationService \n        : IApplicationService\n    {\n        private readonly IEntityStore _store;\n        private ICurrencyLookup _currencyLookup;\n\n        public ClassifiedAdsApplicationService(\n            IEntityStore store, ICurrencyLookup currencyLookup)\n        {\n            _store = store;\n            _currencyLookup = currencyLookup;\n        }\n\n        public async Task Handle(object command)\n        {\n            ClassifiedAd classifiedAd;\n            switch (command)\n            {\n                case V1.Create cmd:\n                    if (await _store.Exists<ClassifiedAd>(cmd.Id.ToString()))\n                        throw new InvalidOperationException(\n                            $\"Entity with id {cmd.Id} already exists\");\n\n                    classifiedAd = new ClassifiedAd(\n                        new ClassifiedAdId(cmd.Id),\n                        new UserId(cmd.OwnerId));\n\n                    await _store.Save(classifiedAd);\n                    break;\n\n                case V1.SetTitle cmd:\n                    classifiedAd = await _store.Load<ClassifiedAd>(cmd.Id.ToString());\n                    if (classifiedAd == null)\n                        throw new InvalidOperationException(\n                            $\"Entity with id {cmd.Id} cannot be found\");\n\n                    classifiedAd.SetTitle(ClassifiedAdTitle.FromString(cmd.Title));\n                    await _store.Save(classifiedAd);\n                    break;\n\n                case V1.UpdateText cmd:\n                    classifiedAd = await _store.Load<ClassifiedAd>(cmd.Id.ToString());\n                    if (classifiedAd == null)\n                        throw new InvalidOperationException(\n                            $\"Entity with id {cmd.Id} cannot be found\");\n\n                    classifiedAd.UpdateText(ClassifiedAdText.FromString(cmd.Text));\n                    await _store.Save(classifiedAd);\n                    break;\n\n                case V1.UpdatePrice cmd:\n                    classifiedAd = await _store.Load<ClassifiedAd>(cmd.Id.ToString());\n                    if (classifiedAd == null)\n                        throw new InvalidOperationException(\n                            $\"Entity with id {cmd.Id} cannot be found\");\n\n                    classifiedAd.UpdatePrice(\n                        Price.FromDecimal(cmd.Price, cmd.Currency, _currencyLookup));\n                    await _store.Save(classifiedAd);\n                    break;\n\n                case V1.RequestToPublish cmd:\n                    classifiedAd = await _store.Load<ClassifiedAd>(cmd.Id.ToString());\n                    if (classifiedAd == null)\n                        throw new InvalidOperationException(\n                            $\"Entity with id {cmd.Id} cannot be found\");\n\n                    classifiedAd.RequestToPublish();\n                    await _store.Save(classifiedAd);\n                    break;\n\n                default:\n                    throw new InvalidOperationException(\n                        $\"Command type {command.GetType().FullName} is unknown\");\n            }\n        }\n    }\n}\n```", "```cs\nusing System.Threading.Tasks;\n\nnamespace Marketplace.Framework\n{\n    public interface IEntityStore\n    {\n        /// <summary>\n        /// Loads an entity by id\n        /// </summary>\n        Task<T> Load<T>(string entityId) where T : Entity;\n\n        /// <summary>\n        /// Persists an entity\n        /// </summary>\n        Task Save<T>(T entity) where T : Entity;\n\n        /// <summary>\n        /// Check if entity with a given id already exists\n        /// <typeparam name=\"T\">Entity type</typeparam>\n        Task<bool> Exists<T>(string entityId);\n    }\n}\n```", "```cs\nusing System;\nusing System.Threading.Tasks;\nusing Marketplace.Domain;\nusing Marketplace.Framework;\nusing static Marketplace.Contracts.ClassifiedAds;\n\nnamespace Marketplace.Api\n{\n    public class ClassifiedAdsApplicationService\n        : IApplicationService\n    {\n        private readonly IClassifiedAdRepository _repository;\n        private readonly ICurrencyLookup _currencyLookup;\n\n        public ClassifiedAdsApplicationService(\n            IClassifiedAdRepository repository,\n            ICurrencyLookup currencyLookup\n        )\n        {\n            _repository = repository;\n            _currencyLookup = currencyLookup;\n        }\n\n        public Task Handle(object command) =>\n            command switch\n            {\n                V1.Create cmd =>\n                    HandleCreate(cmd),\n                V1.SetTitle cmd =>\n                    HandleUpdate(\n                        cmd.Id,\n                        c => c.SetTitle(\n                            ClassifiedAdTitle.FromString(cmd.Title)\n                        )\n                    ),\n                V1.UpdateText cmd =>\n                    HandleUpdate(\n                        cmd.Id,\n                        c => c.UpdateText(\n                            ClassifiedAdText.FromString(cmd.Text)\n                        )\n                    ),\n                V1.UpdatePrice cmd =>\n                    HandleUpdate(\n                        cmd.Id,\n                        c => c.UpdatePrice(\n                            Price.FromDecimal(\n                                cmd.Price,\n                                cmd.Currency,\n                                _currencyLookup\n                            )\n                        )\n                    ),\n                V1.RequestToPublish cmd =>\n                    HandleUpdate(\n                        cmd.Id,\n                        c => c.RequestToPublish()\n                    ),\n                _ => Task.CompletedTask\n            };\n\n        private async Task HandleCreate(V1.Create cmd)\n        {\n            if (await _repository.Exists(cmd.Id.ToString()))\n                throw new InvalidOperationException(\n                    $\"Entity with id {cmd.Id} already exists\");\n\n            var classifiedAd = new ClassifiedAd(\n                new ClassifiedAdId(cmd.Id),\n                new UserId(cmd.OwnerId)\n            );\n\n            await _repository.Save(classifiedAd);\n        }\n\n        private async Task HandleUpdate(\n            Guid classifiedAdId,\n            Action<ClassifiedAd> operation\n        )\n        {\n            var classifiedAd = await _repository.Load(\n                classifiedAdId.ToString()\n            );\n            if (classifiedAd == null)\n                throw new InvalidOperationException(\n                    $\"Entity with id {classifiedAdId} cannot be found\"\n                );\n\n            operation(classifiedAd);\n\n            await _repository.Save(classifiedAd);\n        }\n    }\n}\n```"]