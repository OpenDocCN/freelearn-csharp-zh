["```cs\nnamespace ForgetMeNotDemo.Tests\n{\n  public class UnitTest1\n  {\n    [Fact]\n    public void MustBeTrue()\n    {\n      Assert.True(true);\n    }\n  }\n}\n```", "```cs\n<TargetFrameworks>net7.0-android;net7.0-ios;net7.0-\n  maccatalyst</TargetFrameworks>\n```", "```cs\n<TargetFramework>7.0</TargetFramework>\n```", "```cs\n<TargetFrameworks>net7.0;net7.0-android;net7.0-ios;net7.0-\n  maccatalyst</TargetFrameworks>\n```", "```cs\n<OutputType Condition=\"'$(TargetFramework)' !=\n  'net7.0'\">Exe</OutputType>\n```", "```cs\n  [Fact]\n  public async void AfterCallingInitPreferencesIsNotEmpty()\n  {\n    // Arrange\n    IPreferenceService service = new PreferenceService();\n    preferencesViewModel = new PreferencesViewModel();\n    // Act\n    await preferencesViewModel.Init();\n    // Assert\n    Assert.NotEmpty(preferencesViewModel.PreferenceList);\n  }\n```", "```cs\npublic async Task<List<Preference>> GetPreferences()\n{\n  return await GetPreferencesMock();\n}\n```", "```cs\nprivate readonly PreferenceService service;\npublic PreferencesViewModel()\n{\n  service = new();\n}\n```", "```cs\npublic interface IPreferenceService\n{\n  public Task<List<Preference>> GetPreferences();\n  public Task<List<Preference>> GetPreferencesMock();\n}\n```", "```cs\npublic class PreferenceService : IPreferenceService\n```", "```cs\nPrivate readonly IPreferenceService service;   [1]\npublic PreferencesViewModel(IPreferenceService service) [2]\n{\n  this.service = service; [3]\n}\n```", "```cs\npublic static MauiApp CreateMauiApp()\n{\n    var builder = MauiApp.CreateBuilder(); [1]\n     builder\n    .UseMauiApp<App>()\n    .UseMauiCommunityToolkit()\n    .UseMauiCommunityToolkitMarkup()\n    .ConfigureFonts(fonts =>\n    {\n      fonts.AddFont(\"OpenSans-Regular.ttf\",\n        \"OpenSansRegular\");\n      fonts.AddFont(\"OpenSans-Semibold.ttf\",\n        \"OpenSansSemibold\");\n    })\n    .UseMauiMaps();\nif DEBUG\n    builder.Logging.AddDebug();\nendif\n    return builder.Build();\n}\n```", "```cs\nbuilder.Services.AddTransient<IPreferenceService,\n  PreferenceService>();\n```", "```cs\nbuilder.Services.AddTransient<AboutViewModel>();\nbuilder.Services.AddTransient<BuddiesViewModel>();\nbuilder.Services.AddTransient<BuddyDetailsViewModel>();\nbuilder.Services.AddTransient<PreferencesViewModel>();\nbuilder.Services.AddTransient<LoginViewModel>();\n```", "```cs\npublic static MauiApp CreateMauiApp()\n{\n    var builder = MauiApp.CreateBuilder();\n  builder\n    .UseMauiApp<App>()\n    .UseMauiCommunityToolkit()\n    .UseMauiCommunityToolkitMarkup()\n    .ConfigureFonts(fonts =>\n    {\n      fonts.AddFont(\"OpenSans-Regular.ttf\",\n         \"OpenSansRegular\");\n      fonts.AddFont(\"OpenSans-Semibold.ttf\",\n         \"OpenSansSemibold\");\n    })\n    .UseMauiMaps();\nif DEBUG\n    builder.Logging.AddDebug();\nendif\n  builder.Services.AddTransient<IPreferenceService,\n    PreferenceService>();\n  builder.Services.AddTransient<AboutViewModel>();\n  builder.Services.AddTransient<BuddyDetailsViewModel>();\n  builder.Services.AddTransient<PreferencesViewModel>();\n  builder.Services.AddTransient<LoginViewModel>();\n  return builder.Build();\n}\n```", "```cs\n[Fact]\npublic async void AfterCallingInitPreferencesIsNotEmpty()\n{\n  // Arrange\n  var service = Substitute.For<IPreferenceService>();   [1]\n  var = new PreferencesViewModel(service); [2]\n  // Act\n  await preferencesViewModel.Init();\n  // Assert\n  Assert.NotEmpty(preferencesViewModel.PreferenceList);\n}\n```", "```cs\npublic async void AfterCallingInitPreferencesIsNotEmpty()\n{\n  // Arrange\n  Preference pref1 = new()\n  {\n    Id = 1,\n    PreferencePrompt = \"Shirt Size\",\n    PreferenceValue = \"Large\"\n  };\n  Preference pref2 = new()\n  {\n    PreferencePrompt = \"Favorite Music Genre\",\n    PreferenceValue = \"Jazz\"\n  };\n  List<Preference> prefs = new()\n  {\n    pref1,\n    pref2\n  };\n```", "```cs\nvar serviceMock = Substitute.For<IPreferenceService>(); [1]\n  serviceMock.GetPreferences() [2]\n  .Returns(prefs); [3]\n```", "```cs\npreferencesViewModel = new PreferencesViewModel\n  (serviceMock);\n```", "```cs\n  [Fact]\n  public async void AfterCallingInitPreferencesIsEmptyButNo\n    Exception()\n  {\n    // Arrange\n    List<Preference> preferences = new(); [1]\n    var serviceMock = Substitute.For<IPreferenceService>();\n    serviceMock.GetPreferences()\n      .Returns(preferences); [2]\n    preferencesViewModel = new PreferencesViewModel\n      (serviceMock);\n    // Act\n    var exception = await Record.ExceptionAsync (async ()\n      => await preferencesViewModel.Init()); [3]\n    // Assert\n    Assert.Null(exception); [4]\n  }\n```"]