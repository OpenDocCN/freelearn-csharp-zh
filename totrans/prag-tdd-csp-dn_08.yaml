- en: '8'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Designing an Appointment Booking App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous chapters, we’ve seen sample implementations that were limited in
    scope because it would be impractical to have a full application on every covered
    topic.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the design of a barber appointment booking application,
    which will combine what we’ve learned from previous chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: Dependency injection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test doubles using mocks and fakes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DDD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying TDD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B18370_09.xhtml#_idTextAnchor226) and *10* will cover the implementation
    of this chapter. This chapter is about the business requirements and design decisions,
    not about the implementation (the code).'
  prefs: []
  type: TYPE_NORMAL
- en: Before proceeding with this chapter and the rest of *Part 2*, I would highly
    recommend that you are familiar with the topics that I’ve listed above. They are
    all covered in [*Chapter 2*](B18370_02.xhtml#_idTextAnchor037) to [*Chapter 7*](B18370_07.xhtml#_idTextAnchor183).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Business requirements to build a booking system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The design of the system DDD-style
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The implementation routes of this system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will understand better a realistic DDD analysis
    based on a life-like problem.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The code for this chapter can be found in the following GitHub repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Pragmatic-Test-Driven-Development-in-C-Sharp-and-.NET/tree/main/ch08](https://github.com/PacktPublishing/Pragmatic-Test-Driven-Development-in-C-Sharp-and-.NET/tree/main/ch08)'
  prefs: []
  type: TYPE_NORMAL
- en: Collecting business requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You work for a software consultancy called **Unicorn Quality Solutions** (**UQS**),
    which is implementing an appointment booking application for Heads Up Barbers,
    a modern barber shop with many employees.
  prefs: []
  type: TYPE_NORMAL
- en: 'The required application will comprise three applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Appointment booking website**: Where customers will book an appointment for
    hairdressing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Appointment booking mobile app**: Same as the website, but a native mobile
    app (as opposed to a website on a mobile web browser).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Back office website**: This is an internal app to be used by the owner of
    the business. It allocates shifts for barbers (employees), cancels bookings, calculates
    the barbers’ commission, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Phase 1* of the delivery is only the first application (booking website),
    which has the highest business value because it allows the users to book via desktop
    and on their mobile web browser.'
  prefs: []
  type: TYPE_NORMAL
- en: '*This is our concern for the rest of Part 2 of this book*. The following is
    a diagram showing the three phases of the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1 – The three required applications ](img/Figure_8.1_B18370.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.1 – The three required applications
  prefs: []
  type: TYPE_NORMAL
- en: Although we are only concerned with building *Phase 1*, we need to consider
    in our design that our architecture will include support for a mobile app at later
    phases.
  prefs: []
  type: TYPE_NORMAL
- en: Business goals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this day and age, most customers like to book an appointment online, especially
    since COVID-19, where shops tried to reduce the concentration of people in spaces
    via appointments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Heads Up Barbers wants a booking solution that aims to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Market the available hairdressing services.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow a customer to book an appointment with a specific or a random barber.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Give barbers a rest between appointments, usually 5 minutes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Barbers have various shifts in the shop and they are off work on different days,
    so the solution should take care of picking free slots based on the availability
    of barbers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time saving by not having to arrange appointments on the phone or in person.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stories
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After analyzing the business goals, UQS came up with more detailed requirements
    in the form of user stories and mockups. We will go through these next.
  prefs: []
  type: TYPE_NORMAL
- en: Story 1 – services selection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As a customer:'
  prefs: []
  type: TYPE_NORMAL
- en: I want to have a list of all available services and their cost.
  prefs: []
  type: TYPE_NORMAL
- en: So I can select one for booking.
  prefs: []
  type: TYPE_NORMAL
- en: And be transferred to the booking page.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.2 – The list of the available services and their prices ](img/Figure_8.2_B18370.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.2 – The list of the available services and their prices
  prefs: []
  type: TYPE_NORMAL
- en: This mockup displays all the available services with their prices and **Select**
    hyperlinks to take the user to the booking page for the selected service.
  prefs: []
  type: TYPE_NORMAL
- en: Story 2 – default options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As a customer:'
  prefs: []
  type: TYPE_NORMAL
- en: I want to have a booking page with **[Any employee]** and today’s date selected
    by default.
  prefs: []
  type: TYPE_NORMAL
- en: So I spend less time clicking and finish booking faster.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.3 – The booking page with default options already selected ](img/Figure_8.3_B18370.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.3 – The booking page with default options already selected
  prefs: []
  type: TYPE_NORMAL
- en: Notice that **[Any employee]** and the current day, **2022-04-03**, are selected
    by default.
  prefs: []
  type: TYPE_NORMAL
- en: Story 3 – select employee
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As a customer:'
  prefs: []
  type: TYPE_NORMAL
- en: I want to select any employee or a specific employee for my appointment.
  prefs: []
  type: TYPE_NORMAL
- en: So I can pick my favorite barber if I have one.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.4 – Selecting a specific employee ](img/Figure_8.4_B18370.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.4 – Selecting a specific employee
  prefs: []
  type: TYPE_NORMAL
- en: The customer will have a list of barbers working for Heads Up Barbers from which
    they can pick their favorite one.
  prefs: []
  type: TYPE_NORMAL
- en: Story 4 – appointment days
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As a business:'
  prefs: []
  type: TYPE_NORMAL
- en: We want to present the customer with a 7-day window max, including the current
    day, to pick an appointment.
  prefs: []
  type: TYPE_NORMAL
- en: And we want to reduce this window if the selected employee is not fully available.
  prefs: []
  type: TYPE_NORMAL
- en: So we can guarantee our employees’ availability for booking.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.5 – Calendar showing a 7-day window starting 2022-04-03 ](img/Figure_8.5_B18370.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.5 – Calendar showing a 7-day window starting 2022-04-03
  prefs: []
  type: TYPE_NORMAL
- en: The mockup will take into consideration the changes in the selected employee's
    schedule and show only the availability window for the selected employee.
  prefs: []
  type: TYPE_NORMAL
- en: Story 5 – time selection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As a business:'
  prefs: []
  type: TYPE_NORMAL
- en: I want to present the customer with the time slots available for the selected
    employee for the selected date.
  prefs: []
  type: TYPE_NORMAL
- en: And take into consideration existing employee appointments and the employee’s
    shifts.
  prefs: []
  type: TYPE_NORMAL
- en: And round up any appointment to the nearest 5 minutes.
  prefs: []
  type: TYPE_NORMAL
- en: And take into consideration the rest time of 5 minutes between appointments.
  prefs: []
  type: TYPE_NORMAL
- en: So I ensure the customer is selecting an employee that is already available.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.6 – Time slots available for the employee for the selected date
    ](img/Figure_8.6_B18370.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.6 – Time slots available for the employee for the selected date
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a few examples to clarify the requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that all the minutes are multiples of 5.
  prefs: []
  type: TYPE_NORMAL
- en: Example 1 – no shifts are available
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If an employee has no allocated shifts on the selected date, the list will be
    empty and the customer will be unable to book.
  prefs: []
  type: TYPE_NORMAL
- en: Example 2 – no appointments are booked
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'An employee, Tom, has a shift on 2022-10-03 from 9:00 to 11:10 and has no booked
    appointments. The customer wants to book a 30-minute-long service. The selected
    start time will have the following values: 09:00, 09:05, 09:10, …, 10:35, and
    10:40.'
  prefs: []
  type: TYPE_NORMAL
- en: Example 3 – multiple appointments booked at the end of the shift
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'An employee, Tom, has a shift on 2022-10-03 from 9:00 to 11:10, but he already
    has appointments booked from 09:35 to 11:10\. The customer wants to book a 30-minute-long
    service. The selected start time will have the following value: 09:00\. The following
    figure illustrates the time spans:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.7 – One slot with a rest gap ](img/Figure_8.7_B18370.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.7 – One slot with a rest gap
  prefs: []
  type: TYPE_NORMAL
- en: Example 4 – multiple appointments booked at the end of the shift
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Tom has a shift on 2022-10-03 from 9:00 to 11:10, but he already has appointments
    booked from 09:40 to 11:10\. The customer wants to book a 30-minute-long service.
    The selected start time will have the following values: 09:00 and 09:05.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.8 – Two slots with a rest gap ](img/Figure_8.8_B18370.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.8 – Two slots with a rest gap
  prefs: []
  type: TYPE_NORMAL
- en: Example 5 – an appointment booked in the middle of the shift
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Tom has a shift on 2022-10-03 from 9:00 to 11:10, but he already has appointments
    booked from 09:40 to 10:35\. The customer wants to book a 30-minute-long service.
    The selected start time will have the following values: 09:00, 09:05, and 10:40.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.9 – Three slots with two rest gaps ](img/Figure_8.9_B18370.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.9 – Three slots with two rest gaps
  prefs: []
  type: TYPE_NORMAL
- en: Story 6 – name filling
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As a customer:'
  prefs: []
  type: TYPE_NORMAL
- en: I have to fill in my first and last name to act as my ID when I show up at the
    barber shop.
  prefs: []
  type: TYPE_NORMAL
- en: So I am uniquely identified.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.10 – First name and last name fields ](img/Figure_8.10_B18370.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.10 – First name and last name fields
  prefs: []
  type: TYPE_NORMAL
- en: Story 7 – service display
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As a customer:'
  prefs: []
  type: TYPE_NORMAL
- en: I want a reminder of the name of the service that I picked, its price, and the
    required time.
  prefs: []
  type: TYPE_NORMAL
- en: So I can review my selection before hitting the **Book** button.
  prefs: []
  type: TYPE_NORMAL
- en: Story 8 – all fields are mandatory validation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As a customer:'
  prefs: []
  type: TYPE_NORMAL
- en: I have to select and fill in all fields before booking.
  prefs: []
  type: TYPE_NORMAL
- en: So I won’t get validation errors.
  prefs: []
  type: TYPE_NORMAL
- en: Story 9 – random selection with any employee
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As a business:'
  prefs: []
  type: TYPE_NORMAL
- en: When **[Any employee]** is selected.
  prefs: []
  type: TYPE_NORMAL
- en: And more than one employee is free at the selected slot.
  prefs: []
  type: TYPE_NORMAL
- en: And I hit **Book.**
  prefs: []
  type: TYPE_NORMAL
- en: A free employee is selected *randomly.*
  prefs: []
  type: TYPE_NORMAL
- en: So I ensure our employees are allocated to appointments fairly.
  prefs: []
  type: TYPE_NORMAL
- en: Example 1 – three employees are free at one slot
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If the customer selects **[Any employee]** and gets three employees (Thomas,
    Jane, and William) who are free at 09:00, and the customer selects **09:00** and
    hits **Book**, Thomas, Jane, or William is allocated randomly to the appointment
    without taking into consideration any other factor, and one of them is selected.
  prefs: []
  type: TYPE_NORMAL
- en: Story 10 – confirmation page
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As a customer:'
  prefs: []
  type: TYPE_NORMAL
- en: I want to see that my appointment is booked.
  prefs: []
  type: TYPE_NORMAL
- en: So I can rest assured that it is going ahead.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.11 – Confirmation page ](img/Figure_8.11_B18370.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.11 – Confirmation page
  prefs: []
  type: TYPE_NORMAL
- en: The confirmation page above is a simple static page.
  prefs: []
  type: TYPE_NORMAL
- en: You probably sensed that *Story 5* is the most demanding one from a business
    logic perspective, and this will be heavily targeted by our unit tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, the scope of the implementation is limited. In the future,
    we can extend this further with:'
  prefs: []
  type: TYPE_NORMAL
- en: Online payment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User login
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Email confirmation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And more…
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: However, the stories so far describe a robust life-like system. Some might call
    this a **minimum viable product** (**MVP**); however, I wouldn’t as it might wrongly
    imply a lower-quality system.
  prefs: []
  type: TYPE_NORMAL
- en: Now it’s time to move from the business requirements to the general guidelines
    for designing our system.
  prefs: []
  type: TYPE_NORMAL
- en: Designing with the DDD spirit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have learned in the previous chapter an overview of DDD. In our implementation,
    we will follow the spirit of DDD to design the business classes.
  prefs: []
  type: TYPE_NORMAL
- en: Domain objects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If we were to read all the stories and think of a domain model, we might come
    up with the following classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.12 – A diagram of the domain classes ](img/Figure_8.12_B18370.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.12 – A diagram of the domain classes
  prefs: []
  type: TYPE_NORMAL
- en: '`AppointmentTimeSpanInMin` being the duration of the service and `IsActive`
    being true to offer it to the client.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Customer**: Represents a customer. We are currently only interested in their
    name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Employee**: This class will expand at a later phase to have more info, but
    for now, we only need the name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Shift**: Represents a unique availability time for the barber. The back office
    application (not within scope) will allow the business owner to add shifts for
    employees on a daily basis to cover at least 7 days forward. So, whenever we present
    the customer with days selection, we have at least 7 days in the future.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Appointment**: It is clear that an appointment links a service to an employee
    and a customer. It also specifies the beginning and end times of the appointment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have a single *aggregate* in our implementation with all the previous classes,
    and our *aggregate root* is clearly the `Appointment` class.
  prefs: []
  type: TYPE_NORMAL
- en: Domain services
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Domain services contain the business logic that governs the system behavior.
    Our system will be dealing with four categories of business logic, which could
    lead to four domain services:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.13 – Domain services initial design ](img/Figure_8.13_B18370.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.13 – Domain services initial design
  prefs: []
  type: TYPE_NORMAL
- en: The services at this stage are just an initial design. You usually design services
    driven by a TDD process rather than designing the services in advance, and this
    is usually done in serial, one service after the other.
  prefs: []
  type: TYPE_NORMAL
- en: System architecture
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While we are only doing *Phase 1* of the system, our architecture should be
    ready for future phases given that a mobile app, which uses the same logic as
    the booking website, will be implemented in the next phase. With this in mind,
    the architecture in the next diagram can support all phases:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.14 – Architecture design ](img/Figure_8.14_B18370.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.14 – Architecture design
  prefs: []
  type: TYPE_NORMAL
- en: Having one backend to support all the clients would embed one business logic
    to support all clients, so all our business logic will be behind our RESTful API
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Also, this would make our backend act as a monolith application made up of a
    collection of APIs in one project and a single DB. This is alright, as this is
    a project with a limited scope, and going down the microservices route would be
    overkill.
  prefs: []
  type: TYPE_NORMAL
- en: This is a well-known architectural model where you hide the business logic behind
    web APIs to support multiple clients and make the logic centralized. There should
    be no restructuring of the architecture with the future phases when we add the
    booking mobile app and the back office web app.
  prefs: []
  type: TYPE_NORMAL
- en: Implementation routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to implement the backend in different ways. Each implementation
    will yield the same API outcome, but the point of this would be experiencing multiple
    unit tests and test double scenarios with each implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Your team might be using one of these architectural routes, as they might be
    utilizing a document DB or a relational DB as in the case of most modern apps.
  prefs: []
  type: TYPE_NORMAL
- en: Frontend
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this book, we focus more on the backend, so, implementing TDD on the frontend
    is not covered.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: There are unit testing frameworks that would test the front-end. One popular
    library for Blazor, which we will use here, is **bUnit,** which works side by
    side with xUnit.
  prefs: []
  type: TYPE_NORMAL
- en: Among all popular JavaScript **single page application** (**SPA**) platforms,
    such as React, Angular, and Vue, I decided to implement the frontend with Microsoft’s
    **Blazor**.
  prefs: []
  type: TYPE_NORMAL
- en: Blazor is a web framework that relies on C# instead of JavaScript. Simply put,
    Blazor converts C# into a low-level language called **WebAssembly** (**Wasm**)
    that is understood by the browser.
  prefs: []
  type: TYPE_NORMAL
- en: I chose Blazor as I am assuming it would be easier for a C# developer without
    SPA experience or JavaScript/TypeScript experience.
  prefs: []
  type: TYPE_NORMAL
- en: The implementation for the frontend is minimal, and the preceding mockup screenshots
    in the *Stories* section are taken from the Blazor application. You can find it
    in this chapter’s GitHub under `Uqs.AppointmentBooking.Website`.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: The implementation of this frontend is aimed at readability and minimalism,
    rather than web design, UX, robustness, and best practices.
  prefs: []
  type: TYPE_NORMAL
- en: 'To launch the website:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `UqsAppointmentBooking.sln` in VS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on `Uqs.AppointmentBooking.Website` and select **Set as a Startup
    Project**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run from VS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Feel free to run the website and click around. You will note that it is mocked,
    so it is not relying on a real DB but on sample data. The discussion about the
    frontend is limited to this section, as the focus of the book is TDD and the backend.
  prefs: []
  type: TYPE_NORMAL
- en: Relational database backend
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Usually, using a relational DB such as SQL Server and Oracle invites **Entity
    Framework** (**EF**). Having your backend relying on EF has an effect on the way
    you organize your tests and the test double types that you are going to use.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B18370_09.xhtml#_idTextAnchor226), *Building an Appointment Booking
    App with Entity Framework and Relational DB*, will be dedicated to implementing
    the requirements with a relational database (SQL Server) and with EF.'
  prefs: []
  type: TYPE_NORMAL
- en: Document DB backend
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When using a document DB such as Cosmos DB, DynamoDB, and MongoDB, you do not
    use EF. That means you will be implementing more DDD patterns such as the *Repository
    pattern*. This will make the implementation with a document DB fairly different
    than the one that uses EF from a test doubles and **dependency injection** (**DI**)
    point of view.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B18370_10.xhtml#_idTextAnchor245), *Building an App with Repositories
    and Document DB*, will be repeating the implementation of [*Chapter 9*](B18370_09.xhtml#_idTextAnchor226)
    but with around 50% different code, as it will be using a document DB.'
  prefs: []
  type: TYPE_NORMAL
- en: Presenting both versions will allow you to see the difference between the implementations
    and, hopefully, promote your understanding of test doubles and DI. However, if
    you are only interested in a particular type of DB, then you can choose [*Chapter
    9*](B18370_09.xhtml#_idTextAnchor226) or [*Chapter 10*](B18370_10.xhtml#_idTextAnchor245).
  prefs: []
  type: TYPE_NORMAL
- en: The good news is that there are repetitions between these two chapters, where
    you will be able to spot them easily and focus on the unique implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Mediator pattern
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When using the Mediator pattern, all your design changes, and your testing and
    test doubles follow suit. The Mediator pattern is a two-edged sword; it has a
    steep learning curve, but when learned and implemented, it provides a higher level
    of component separation of concern. It will also alter the structure of your unit
    tests. The Mediator pattern is outside the scope of this book, and it is mentioned
    here to point you to discover related patterns that affect your DI implementation
    and your unit tests.
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully, by the end of *Part 2*, you’ve got a real sense of how to implement
    TDD in a more realistic setting.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ve seen fairly decent user requirements and we’ve seen a potential design
    for the system. This chapter was the beginning of *putting everything together*.
  prefs: []
  type: TYPE_NORMAL
- en: You’ve also seen a design based on DDD, which will change into code in later
    chapters. We have also discussed implementation routes that will affect the way
    we do testing and test doubles.
  prefs: []
  type: TYPE_NORMAL
- en: Sophisticated and modern projects use concepts from DDD. By now, after analyzing
    a full project, I hope that the DDD terminology will start sounding familiar and
    aid you in building your next project and help you communicate with expert developers.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter is an implementation of this chapter, but with a focus on SQL
    Server and EF.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To learn more about the topics discussed in the chapter, you can refer to the
    following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Mediator NuGet popular lib in .NET*: [https://github.com/jbogard/MediatR](https://github.com/jbogard/MediatR)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
