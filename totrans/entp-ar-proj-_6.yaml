- en: AR for Retail with Vuforia
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Vuforia 的 AR 零售
- en: In this chapter, you will work with Vuforia, one of the most well-known AR SDKs
    that offers a wide variety of options (working with and without image targets,
    web and local recognition, and more), as well as examples that can be directly
    downloaded and tested. It has also the advantage of being integrated into the
    Unity editor, making it easier to develop with it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将使用 Vuforia，这是最著名的 AR SDK 之一，它提供了广泛的选择（包括与图像目标一起使用和不使用图像目标、网络和本地识别等），以及可以直接下载和测试的示例。它还具备集成到
    Unity 编辑器的优势，这使得使用它进行开发更加容易。
- en: This chapter's first main goal is to introduce you to the Vuforia SDK and how
    it works. Among its many features, you will learn how to use spatial recognition
    and augmentation to place 3D objects in the real world without the need for previously
    printed image targets. You will learn how to use Vuforia fusion with and without
    ARCore and you will acquire the skills to use Vuforia's elements in Unity. This
    chapter's second goal is to present you with an attractive use of AR in retail
    to show potential customers products such as furniture, paintings, decorations,
    and more in their own spaces. With these kinds of applications, they can decide
    on which elements they want to buy and how they will look in their own homes,
    making them more involved in the buying process.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的第一个主要目标是向你介绍 Vuforia SDK 及其工作原理。在其众多功能中，你将学习如何使用空间识别和增强现实将 3D 对象放置在现实世界中，而无需预先打印的图像目标。你将学习如何使用
    Vuforia 融合技术与 ARCore 结合或不结合使用，并掌握在 Unity 中使用 Vuforia 元素的能力。本章的第二个目标是向你展示 AR 在零售中的吸引人应用，展示潜在客户如何在自己的空间中查看家具、画作、装饰品等产品。通过这类应用，他们可以决定想要购买哪些元素，以及它们在自己家中将如何呈现，使他们更多地参与到购买过程中。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Using AR for retail
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 AR 进行零售
- en: Exploring Vuforia
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索 Vuforia
- en: AR on the go – using Ground Plane
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动中的 AR – 使用地面平面
- en: Creating an AR furniture viewer
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 AR 家具查看器
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The technical requirements for this chapter are as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的技术要求如下：
- en: A Unity 3D-supporting computer (see the latest requirements here: [https://unity3d.com/unity/system-requirements](https://unity3d.com/unity/system-requirements)). This
    chapter's example project has been developed on a Windows 10 x 64 computer.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一台支持 Unity 3D 的计算机（请参阅最新的要求：[https://unity3d.com/unity/system-requirements](https://unity3d.com/unity/system-requirements)）。本章的示例项目是在
    Windows 10 x 64 计算机上开发的。
- en: Unity 3D (2019.1.2f1 in this book).
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity 3D（本书中为 2019.1.2f1 版）。
- en: Microsoft Visual Studio Community 2017 (included in Unity installation).
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft Visual Studio Community 2017（包含在 Unity 安装中）。
- en: The latest version of Vuforia that's included with Unity 3D (8.3.8 in this book).
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity 3D 中包含的最新版本的 Vuforia（本书中为 8.3.8 版）。
- en: A mobile device supporting Vuforia Fusion (see [https://library.vuforia.com/content/vuforia-library/en/articles/Solution/ground-plane-supported-devices.html](https://library.vuforia.com/content/vuforia-library/en/articles/Solution/ground-plane-supported-devices.html)).
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一款支持 Vuforia Fusion 的移动设备（请参阅[https://library.vuforia.com/content/vuforia-library/en/articles/Solution/ground-plane-supported-devices.html](https://library.vuforia.com/content/vuforia-library/en/articles/Solution/ground-plane-supported-devices.html)）。
- en: The resources and the code files for this chapter can be found here: [https://github.com/PacktPublishing/Enterprise-Augmented-Reality-Projects/tree/master/Chapter06](https://github.com/PacktPublishing/Enterprise-Augmented-Reality-Projects/tree/master/Chapter06).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的资源和相关代码文件可以在以下位置找到：[https://github.com/PacktPublishing/Enterprise-Augmented-Reality-Projects/tree/master/Chapter06](https://github.com/PacktPublishing/Enterprise-Augmented-Reality-Projects/tree/master/Chapter06)。
- en: Using AR for retail
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 AR 进行零售
- en: 'Retail is one of the fields where AR offers a wider range of possibilities,
    from satisfying and engaging the consumer in order to reduce returned products,
    to linking products with social media or personalizing the shopping experience.
    Some examples of this are as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 零售是 AR 提供更广泛可能性之一的领域，从满足和吸引消费者以减少退货产品，到将产品与社交媒体链接或个性化购物体验。以下是一些例子：
- en: Trying products before buying them. This is where users visualize clothes, shoes,
    glasses, or even makeup before actually buying the products.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在购买之前尝试产品。这是用户在真正购买产品之前可视化衣服、鞋子、眼镜甚至化妆品的地方。
- en: Seeing how a product such as a piece of furniture, a piece of art, or even wall
    paint looks in their homes with AR.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 AR 看看家具、艺术品或甚至墙面涂料在家中的样子。
- en: At the store, seeing extra information about a product, such as comments and
    reviews, before buying it.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在商店，在购买之前查看有关产品的额外信息，例如评论和评价。
- en: In a commercial center, receiving geopositioned information and discounts from
    the stores in it.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在购物中心，接收来自其中商店的地理位置信息和折扣。
- en: In supermarkets or big stores, orienting customers through sections to the product
    they want.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在超市或大型商店中，通过区域引导客户到他们想要的产品。
- en: This field also allows us to display AR on various hardware, including customers'
    mobile devices, tactile screens, and virtual fitting rooms. Therefore, in the
    past few years, AR solutions in retail have multiplied, especially since ARKit
    (from Apple) and ARCore (from Google) appeared on the market. These two pieces
    of software allow us to easily recognize the environment using the camera and
    sensors of the mobile devices and place virtual elements over flat surfaces such
    as the ground or tables.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这个领域还允许我们在各种硬件上显示AR，包括客户的移动设备、触觉屏幕和虚拟试衣间。因此，在过去的几年里，零售业的AR解决方案数量激增，尤其是在ARKit（来自苹果）和ARCore（来自谷歌）进入市场之后。这两款软件使我们能够利用移动设备的摄像头和传感器轻松识别环境，并在地面或桌子等平坦表面上放置虚拟元素。
- en: In this chapter, we will take advantage of Vuforia Fusion, Vuforia SDK's ground
    detection features, which can also be combined with ARCore, to place virtual objects
    in our surroundings without any kind of printed target, creating an AR furniture
    viewer that customers can use to see how the furniture fits in their homes.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将利用Vuforia Fusion，Vuforia SDK的地形检测功能，该功能还可以与ARCore结合使用，在我们的周围环境中放置虚拟对象，而无需任何类型的打印目标，创建一个客户可以用来查看家具如何融入他们家庭的AR家具查看器。
- en: For our project, we will be using the real catalog pages and 3D models from
    the company Euro Seating at [https://www.euroseating.com/en/](https://www.euroseating.com/en/),
    a seating manufacturer present in more than 100 countries all over the world.
    Using their high-quality 3D models and real catalog will help us visualize this
    project as a real-life AR application that can be used in any other marketing
    context. The models and images that are used in this chapter have been handed
    over by the company for their use in the context of this book.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的项目，我们将使用来自Euro Seating公司的真实目录页面和3D模型，该公司在全球100多个国家设有业务。[https://www.euroseating.com/en/](https://www.euroseating.com/en/)，一个座椅制造商。使用他们的高质量3D模型和真实目录将帮助我们把这个项目可视化为一个真实的AR应用，可以在任何其他营销环境中使用。本章中使用的模型和图像已由该公司转让，用于本书的上下文中。
- en: We will start by exploring Vuforia and how to integrate it into our Unity project.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先探索Vuforia以及如何将其集成到我们的Unity项目中。
- en: Exploring Vuforia
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索Vuforia
- en: Initially developed by Qualcomm, and currently run by PTC, Vuforia is one of
    the oldest and most well-known AR SDKs. It's one of the most stable and best-performing
    pieces of software on the market and, along with ARKit and ARCore, one of the
    favorite choices for AR developers.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Vuforia最初由高通公司开发，目前由PTC运营，是历史最悠久且最知名的AR SDK之一。它是市场上最稳定和性能最好的软件之一，与ARKit和ARCore一起，是AR开发者的首选之一。
- en: Vuforia offers a wide variety of features, including 2D images and 3D objects
    tracking, markerless AR where there is no need for a reference image to launch
    AR content (the one we will be using in this chapter) and barcode-like markers
    called Vumarks. It provides multiple examples and extra features, such as virtual
    buttons, runtime image target creation, and background video texture manipulation.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Vuforia提供了一系列功能，包括2D图像和3D对象跟踪、无需参考图像即可启动AR内容的无标记AR（本章我们将使用）以及类似条形码的标记称为Vumarks。它提供了多个示例和额外功能，如虚拟按钮、运行时图像目标创建和背景视频纹理操作。
- en: Like other AR software, Vuforia requires a license for it to be deployed on
    mobile devices. Vuforia offers a free development key generator, which will have
    to be switched to a deployment key when the app is in the production stage. You
    can consult its pricing options on their web page: [https://developer.vuforia.com/pricing](https://developer.vuforia.com/pricing).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他AR软件一样，Vuforia需要在移动设备上部署时需要许可证。Vuforia提供免费的开发密钥生成器，当应用处于生产阶段时，必须将其切换为部署密钥。您可以在他们的网页上查看其定价选项：[https://developer.vuforia.com/pricing](https://developer.vuforia.com/pricing)。
- en: 'The Vuforia SDK can be downloaded for Android and iOS, and can also be used
    in the Unity 3D platform. Since the Unity 2017.2 version, it comes directly integrated
    into the Unity editor, just like any other main asset, and it has to be installed
    and activated inside it. Now, we''ll incorporate Vuforia into a new project and
    set it up so that we can build it on an Android device. Let''s get started:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Vuforia SDK 可以下载用于 Android 和 iOS，并且也可以在 Unity 3D 平台上使用。自 Unity 2017.2 版本以来，它直接集成到
    Unity 编辑器中，就像任何其他主要资源一样，并且必须在其中安装和激活。现在，我们将 Vuforia 集成到一个新项目中，并设置它以便可以在 Android
    设备上构建。让我们开始吧：
- en: 'When you first installed Unity on your computer (see [Chapter 2](54a1260e-a741-4eb5-9c98-01350fcba94b.xhtml),
    *Introduction to Unity for AR Development*), you should have selected the option
    of adding the Vuforia module. If you didn''t install it or you are in doubt, open
    the Unity Hub, go to the Installs tab, and check the installed modules at the
    bottom of your Unity version:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您第一次在计算机上安装 Unity 时（见 [第 2 章](54a1260e-a741-4eb5-9c98-01350fcba94b.xhtml)，*Unity
    AR 开发入门*），您应该选择了添加 Vuforia 模块选项。如果您没有安装它或者您不确定，请打开 Unity Hub，转到 安装 标签页，并检查您 Unity
    版本底部的已安装模块：
- en: '![](img/d508932b-5c92-4d39-9148-71a0b3e95384.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d508932b-5c92-4d39-9148-71a0b3e95384.png)'
- en: Current Unity installation with Vuforia support
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当前带有 Vuforia 支持的 Unity 安装
- en: 'If Vuforia is not there, click on the top-right button and click on Add Modules.
    Select Vuforia and install it:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 Vuforia 不在那里，点击右上角的按钮，然后点击 Add Modules。选择 Vuforia 并安装它：
- en: '![](img/bb80c325-c67c-4bac-b5e2-7761d88879eb.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bb80c325-c67c-4bac-b5e2-7761d88879eb.png)'
- en: Adding new modules to the current Unity installation using Unity Hub
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Unity Hub 向当前 Unity 安装添加新模块
- en: Vuforia usually comes included with stable versions; if you are trying a beta
    version or a very recent version of Unity, it's possible that Vuforia might not
    appear among the options and you will have to install a previous version to use
    it.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Vuforia 通常包含在稳定版本中；如果您正在尝试测试版或非常新的 Unity 版本，那么 Vuforia 可能不会出现在选项中，您可能需要安装一个旧版本才能使用它。
- en: 'Now, open the Unity Hub. On the Projects tab, click on NEW:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开 Unity Hub。在 项目 标签页上，点击 NEW：
- en: '![](img/bc7350e1-568b-44eb-bba2-da9e090d9c9c.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bc7350e1-568b-44eb-bba2-da9e090d9c9c.png)'
- en: Creating a new project in the Unity Hub
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Unity Hub 中创建一个新项目
- en: 'Fill in the Project Name and Location fields and click on CREATE:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写 项目名称 和 位置字段，然后点击 CREATE：
- en: '![](img/b15fd64e-6aa2-406c-8107-65cec09c7a1f.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b15fd64e-6aa2-406c-8107-65cec09c7a1f.png)'
- en: Creating a new 3D project
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的 3D 项目
- en: 'Click *Ctrl* + *N* or go to File|New Scene. Now, press *Ctrl* + *S* or go to
    File|Save. Name the file `OnTheGo` and save it in the `Scenes` folder:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 *Ctrl* + *N* 或转到 文件|新建场景。现在，按 *Ctrl* + *S* 或转到 文件|保存。将文件命名为 `OnTheGo` 并将其保存在
    `场景` 文件夹中：
- en: '![](img/36c23a34-c9a1-477e-bc02-01bbf42f016e.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/36c23a34-c9a1-477e-bc02-01bbf42f016e.png)'
- en: Creating a new scene for the current project
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 为当前项目创建一个新场景
- en: 'You can also delete the SampleScene that comes with the project from the Project
    window:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以从 项目窗口中删除项目附带的项目 SampleScene：
- en: '![](img/c6510b92-d5c7-49bd-bb29-ea3fbbbece5d.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c6510b92-d5c7-49bd-bb29-ea3fbbbece5d.png)'
- en: SampleScene is no longer needed
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: SampleScene 不再需要
- en: 'AR requires a special camera that retrieves the physical camera feed and processes
    it so that we can integrate the virtual elements into the real image stream. Vuforia
    provides an asset called AR Camera that does this for us. Delete the existing
    Unity Main Camera, right-click on the Hierarchy window, and select Vuforia Engine|AR
    Camera:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AR 需要一个特殊的相机，该相机检索物理相机流并将其处理，以便我们可以将虚拟元素集成到真实图像流中。Vuforia 提供了一个名为 AR Camera
    的资源，它可以为我们完成这项工作。删除现有的 Unity 主相机，在 Hierarchy 窗口中右键单击，并选择 Vuforia Engine|AR Camera：
- en: '![](img/74044d09-e811-45ad-8e41-db04ea5d9263.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/74044d09-e811-45ad-8e41-db04ea5d9263.png)'
- en: Adding the AR Camera to the scene
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 将 AR Camera 添加到场景中
- en: 'Since it''s the first time we''re using Vuforia in the project, a message will
    appear asking us to import Vuforia''s assets. Click Import:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于这是我们第一次在项目中使用 Vuforia，会出现一个消息提示我们导入 Vuforia 的资源。点击导入：
- en: '![](img/a4a9095b-3f7a-4fb6-81c9-ff183815f204.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a4a9095b-3f7a-4fb6-81c9-ff183815f204.png)'
- en: Message to import Vuforia and its assets into the project
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 导入 Vuforia 及其资源到项目的消息
- en: A new folder called `Vuforia` will appear in the Project window, inside the
    `Assets` folder.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在 项目窗口的 `Assets` 文件夹内，将出现一个名为 `Vuforia` 的新文件夹。
- en: Place the Directional Light inside the AR Camera so that the light moves along
    with the camera.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将方向光放置在 AR Camera 内部，以便光线随着相机移动。
- en: 'Now, we have to enable Vuforia in the Player Settings so that we can use it
    in the scene:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们必须在 Player Settings 中启用 Vuforia，以便我们可以在场景中使用它：
- en: '![](img/1b38d5ea-c50c-4bbe-b546-58cd37a078d6.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1b38d5ea-c50c-4bbe-b546-58cd37a078d6.png)'
- en: Vuforia Behaviour component detecting that Vuforia isn't enabled yet
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Vuforia 行为组件检测到 Vuforia 尚未启用
- en: Press *Ctrl* + *Shift* + *B* or go to File|Build Settings... to open the Build
    Settings window.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Ctrl* + *Shift* + *B* 或转到文件|构建设置...以打开构建设置窗口。
- en: Before anything else, click on Add Open Scenes to include our scene in the building
    scenes list.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在进行任何其他操作之前，点击“添加打开的场景”以将我们的场景包含在构建场景列表中。
- en: 'Then, switch platforms by clicking on Android and pressing Switch Platform in
    the bottom-right corner. With this, we will have configured our project so that
    it can be built on an Android device:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，通过点击 Android 并在右下角按下“切换平台”来切换平台。通过这种方式，我们将配置我们的项目，使其可以在 Android 设备上构建：
- en: '![](img/4f964b45-5803-437a-b2e5-435d4381b9b2.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4f964b45-5803-437a-b2e5-435d4381b9b2.png)'
- en: Build Settings panel, allowing us to add new scenes, switch platforms, and access
    Player Settings
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 构建设置面板，允许我们添加新场景、切换平台和访问玩家设置
- en: Now, click on Player Settings... to open a new window.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击“玩家设置...”以打开一个新窗口。
- en: Fill in the Company Name and Product Name (the name the app will have when we
    install it on a device).
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写公司名称和产品名称（当我们将应用程序安装到设备上时应用程序将拥有的名称）。
- en: 'In the last tab, XR Settings, enable Vuforia Augmented Reality Supported to
    allow the use of Vuforia in this project:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在最后一个选项卡“XR 设置”中，启用“Vuforia 增强现实支持”以允许在此项目中使用 Vuforia：
- en: '![](img/43780ea1-a74d-45fb-9c87-91415d4034da.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/43780ea1-a74d-45fb-9c87-91415d4034da.png)'
- en: Player Settings with Company Name and Product Name filled and Vuforia activated
    in the XR Settings
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 已填写公司名称和产品名称并激活 XR 设置中的 Vuforia 的玩家设置
- en: 'A new message will appear indicating that XR is not supported by the Vulkan
    graphics API. To fix this, open the Other Settings tab and remove Vulkan from
    Graphics APIs:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将会显示一条新消息，指出 Vulkan 图形 API 不支持 XR。要修复此问题，请打开“其他设置”选项卡并从图形 API 中删除 Vulkan：
- en: '![](img/579fd8a4-2d31-465f-be42-5e36ed52bbd9.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/579fd8a4-2d31-465f-be42-5e36ed52bbd9.png)'
- en: Removing Vulkan from the Graphics API under Other Settings|Rendering
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在“其他设置|渲染”下从图形 API 中删除 Vulkan
- en: 'Below this, fill in the Identification section''s Package Name and minimum
    API Level:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此之下，填写识别部分的“包名”和“最低API级别”：
- en: '![](img/dde477a2-98b0-42cb-be27-d4b364d9cd60.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/dde477a2-98b0-42cb-be27-d4b364d9cd60.png)'
- en: Updating the Package Name and Minimum API Level under Other Settings|Identification
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在“其他设置|识别”下更新包名和最低API级别
- en: 'Currently, Vuforia supports Android 4.4 and above and iOS 11 and above. However,
    we recommend setting the Minimum API Level to `5` to ensure the devices running
    the apps are powerful enough to do so. You can check the minimum requirements
    for Vuforia here: [https://library.vuforia.com/articles/Solution/Vuforia-Supported-Versions](https://library.vuforia.com/articles/Solution/Vuforia-Supported-Versions).'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，Vuforia 支持 Android 4.4 及以上版本和 iOS 11 及以上版本。然而，我们建议将最低API级别设置为 `5`，以确保运行应用程序的设备足够强大。您可以在以下位置检查
    Vuforia 的最低要求：[https://library.vuforia.com/articles/Solution/Vuforia-Supported-Versions](https://library.vuforia.com/articles/Solution/Vuforia-Supported-Versions)。
- en: 'This step is not always required but it might be the case that the Vuforia
    version that''s been installed with your Unity version is not the latest one.
    If so, when selecting the ARCamera, a message will appear on the Vuforia Behaviour
    component indicating that a new version is available:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此步骤并非总是必需，但可能的情况是，与您的 Unity 版本一起安装的 Vuforia 版本不是最新版本。如果是这样，当选择 ARCamera 时，Vuforia
    行为组件上将会出现一条消息，指出有新版本可用：
- en: '![](img/3c504aca-4367-4d4f-b50a-b7a91bf5a27c.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3c504aca-4367-4d4f-b50a-b7a91bf5a27c.png)'
- en: Link to the new Vuforia version in the Vuforia Behaviour component of the ARCamera
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ARCamera 的 Vuforia 行为组件中链接到新的 Vuforia 版本
- en: 'Click on the link to download the executable and follow the steps to install
    it:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击链接下载可执行文件，并按照步骤进行安装：
- en: '![](img/7ce54be6-2c8b-45c1-a4e0-c813926ae9a0.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7ce54be6-2c8b-45c1-a4e0-c813926ae9a0.png)'
- en: Vuforia AR Setup Wizard
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Vuforia AR 设置向导
- en: 'When updating Vuforia, make sure you install it in your Unity root folder,
    usually in `C:/Program Files/Unity/Hub/Editor/{unity_version_name}`, and close
    your currently running Unity session if asked. If a message appears asking you
    to update your project, click Update. Vuforia will now be up to date in your project:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在更新 Vuforia 时，请确保您将其安装在 Unity 根目录中，通常在 `C:/Program Files/Unity/Hub/Editor/{unity_version_name}`，并在需要时关闭当前运行的
    Unity 会话。如果出现要求您更新项目的消息，请点击“更新”。现在，Vuforia 将在您的项目中是最新的：
- en: '![](img/0daff2ee-d0b9-4f46-a802-c6dafcb306aa.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0daff2ee-d0b9-4f46-a802-c6dafcb306aa.png)'
- en: Update message from Vuforia Engine
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 来自 Vuforia 引擎的更新消息
- en: Now that we know how to integrate Vuforia into a new project, we will start
    using its Ground Plane feature to create an app that detects flat surfaces and
    places 3D content on them.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经知道了如何将 Vuforia 集成到新项目中，我们将开始使用其地面平面功能来创建一个检测平坦表面并在其上放置 3D 内容的应用。
- en: AR on the go – using Ground Plane
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行走中的 AR – 使用地面平面
- en: Vuforia's main feature that's used to place virtual objects on the user's environment
    in real time is called **Ground Plane***.* We are going to use this feature to
    create an app to place 3D content on horizontal surfaces of the real world, such
    as floors and tables.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Vuforia 的主要功能，用于在用户的环境中实时放置虚拟对象，被称为**地面平面**.* 我们将使用此功能创建一个应用，将 3D 内容放置在现实世界的水平表面上，例如地板和桌子。
- en: Starting with Vuforia 7, the SDK introduced a new capability, called **Vuforia
    Fusion**, to improve the performance of spatial recognition according to each
    device's features, including cameras, sensors, chipsets, and internal AR frameworks. Vuforia
    Fusion tries to detect integrated frameworks such as ARKit (iOS) or ARCore (Android),
    which offer the best performance. If none are found, it tries to use VISLAM and
    SLAM, respectively.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Vuforia 7 开始，SDK 引入了一种新功能，称为**Vuforia 融合**，以提高空间识别的性能，这取决于每个设备的特性，包括摄像头、传感器、芯片组和内部
    AR 框架。Vuforia 融合试图检测集成框架，如 ARKit（iOS）或 ARCore（Android），它们提供最佳性能。如果没有找到，它将尝试使用
    VISLAM 和 SLAM。
- en: '**Simultaneous localization and mapping** (**SLAM**) algorithms estimate the
    pose of an object and the map of the surrounding environment at the same time.
    **visual-inertial simultaneous localization and mapping** (**VISLAM**) is Vuforia''s
    algorithm that combines **v****isual odometry** (**VIO**) and SLAM to improve
    the latter''s performance.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**同时定位与建图**（**SLAM**）算法同时估计对象的位置和周围环境的地图。**视觉惯性同时定位与建图**（**VISLAM**）是 Vuforia
    的算法，它将**视觉里程计**（**VIO**）和 SLAM 结合起来以提高后者的性能。'
- en: Although the list increases quickly, not all devices support Vuforia's Ground
    Plane yet. In general, if the running device supports ARCore or ARKit, it will
    work. If not, it will depend on internal AR-enabling technologies. Vuforia keeps
    a list of the currently supported devices on its web page: [https://library.vuforia.com/articles/Solution/vuforia-fusion-supported-devices.html](https://library.vuforia.com/articles/Solution/vuforia-fusion-supported-devices.html).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管列表迅速增加，但并非所有设备都支持 Vuforia 的地面平面。一般来说，如果运行设备支持 ARCore 或 ARKit，它将工作。如果不支持，它将取决于内部
    AR 启用技术。Vuforia 在其网页上保留了一份当前支持的设备列表：[https://library.vuforia.com/articles/Solution/vuforia-fusion-supported-devices.html](https://library.vuforia.com/articles/Solution/vuforia-fusion-supported-devices.html)。
- en: In the next subsection, we are going to learn how to enable ARCore in Vuforia.
    If your device doesn't support ARCore, you can directly skip to the next subsection.
    If you are planning to distribute your app among ARCore-supporting and -non-supporting
    devices, and want to test Vuforia's VISLAM performance first, skip this step and
    do this after testing the final app to see the difference.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个子节中，我们将学习如何在 Vuforia 中启用 ARCore。如果你的设备不支持 ARCore，你可以直接跳到下一个子节。如果你计划将你的应用分发到支持和不支持
    ARCore 的设备上，并且想要首先测试 Vuforia 的 VISLAM 性能，请跳过此步骤，在测试最终应用后进行此操作以查看差异。
- en: Enabling ARCore in Vuforia
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Vuforia 中启用 ARCore
- en: 'In this section, we''re going to learn to enable ARCore for Vuforia; if your
    device supports ARCore, you will benefit from using it along with Vuforia, as
    the resulting app will detect flat surfaces faster and with more precision. To
    enable ARCore for Vuforia inside Unity, follow these steps:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何为 Vuforia 启用 ARCore；如果你的设备支持 ARCore，你将受益于与 Vuforia 一起使用它，因为生成的应用将更快、更精确地检测平坦表面。要在
    Unity 中为 Vuforia 启用 ARCore，请按照以下步骤操作：
- en: Download the latest version of the ARCore library from Google's repository.
    The global link is `https://dl.google.com/dl/android/maven2/com/google/ar/core/<ARCORE_VERSION>/core-<ARCORE_VERSION>.aar`.You
    can check the latest version available at [https://github.com/google-ar/arcore-unity-sdk/releases](https://github.com/google-ar/arcore-unity-sdk/releases).
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Google 的存储库下载 ARCore 库的最新版本。全局链接是 `https://dl.google.com/dl/android/maven2/com/google/ar/core/<ARCORE_VERSION>/core-<ARCORE_VERSION>.aar`。您可以在
    [https://github.com/google-ar/arcore-unity-sdk/releases](https://github.com/google-ar/arcore-unity-sdk/releases)
    检查可用的最新版本。
- en: At the time of writing this chapter, the current version is 1.9.0, so the link
    will be [https://dl.google.com/dl/android/maven2/com/google/ar/core/1.9.0/core-1.9.0.aar](https://dl.google.com/dl/android/maven2/com/google/ar/core/1.9.0/core-1.9.0.aar).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写此章节时，当前版本是 1.9.0，因此链接将是 [https://dl.google.com/dl/android/maven2/com/google/ar/core/1.9.0/core-1.9.0.aar](https://dl.google.com/dl/android/maven2/com/google/ar/core/1.9.0/core-1.9.0.aar)。
- en: 'In Unity, in the Project window, right-click on the `Assets` folder and press
    Create|Folder. Name it `Plugins` and create another one called `Android` inside
    it:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Unity 中，在项目窗口中，右键点击 `Assets` 文件夹并按 Create|Folder。将其命名为 `Plugins` 并在它里面创建另一个名为
    `Android` 的文件夹：
- en: '![](img/7ad90606-9b4f-4b74-bb94-7e0d9b438e23.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7ad90606-9b4f-4b74-bb94-7e0d9b438e23.png)'
- en: Creating a new folder inside Assets
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Assets 中创建一个新的文件夹
- en: 'Copy the downloaded `.aar` file inside the `Android` folder:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将下载的 `.aar` 文件复制到 `Android` 文件夹内：
- en: '![](img/23a90f03-0c87-46b4-b1d6-023c21f5ef15.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/23a90f03-0c87-46b4-b1d6-023c21f5ef15.png)'
- en: The ARCore plugin located inside the Android folder
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 位于 Android 文件夹内的 ARCore 插件
- en: 'Select the file and verify that Android is checked under Select platforms for
    plugin in the Inspector window:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择文件，并验证在检查器窗口中是否已选中“选择平台以用于插件”下的 Android：
- en: '![](img/b798ee63-d31a-4fbf-8848-5b125b38429d.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b798ee63-d31a-4fbf-8848-5b125b38429d.png)'
- en: ARCore library's properties in the Inspector window
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: ARCore 库在检查器窗口中的属性
- en: 'Select the ARCamera and click on the Open Vuforia Engine configuration button:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 ARCamera 并点击打开 Vuforia Engine 配置按钮：
- en: '![](img/805eb651-813f-452e-9161-4970e8768729.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/805eb651-813f-452e-9161-4970e8768729.png)'
- en: Opening Vuforia Engine configuration from the ARCamera
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 从 ARCamera 打开 Vuforia Engine 配置
- en: 'Under Device Tracker, set ARCore Requirement to Optional or Required, depending
    on your targeted user devices:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设备跟踪器下，根据目标用户设备设置 ARCore Requirement 为 Optional 或 Required：
- en: '![](img/76fcf545-0b82-4971-9b53-e7b8b1e89db2.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/76fcf545-0b82-4971-9b53-e7b8b1e89db2.png)'
- en: Setting ARCore to OPTIONAL or REQUIRED
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 将 ARCore 设置为“可选”或“必需”
- en: If set to OPTIONAL, when using Ground Plane, Vuforia will try to make use of
    ARCore, and if the device doesn't support it, it will switch to Vuforia's internal
    algorithms. If set to REQUIRED, the app won't work on devices that don't support
    ARCore.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果设置为“可选”，当使用地面平面时，Vuforia 将尝试使用 ARCore，如果设备不支持，它将切换到 Vuforia 的内部算法。如果设置为“必需”，则不支持
    ARCore 的设备上的应用将无法工作。
- en: Now that we have configured ARCore, we'll create an AR scene to test the Ground
    Plane feature.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经配置了 ARCore，我们将创建一个 AR 场景来测试地面平面功能。
- en: Creating the Ground Plane scene
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建地面平面场景
- en: 'The AR scene in this project will consist of the following elements:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目中的 AR 场景将包含以下元素：
- en: The ARCamera, which will retrieve the physical camera's feed and process each
    frame
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ARCamera，它将检索物理摄像头的视频流并处理每一帧
- en: The Ground Plane Finder, which is in charge of searching for horizontal surfaces
    and placing objects on them when users tap on the screen
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地面平面查找器，负责搜索水平表面并在用户点击屏幕时将对象放置在其上
- en: The Ground Plane Stage, which is the parent GameObject where the virtual elements
    will go
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地面平面舞台，这是虚拟元素将要放置的父 GameObject
- en: A test cube, which will appear on the ground when the user taps on the screen
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个测试立方体，当用户点击屏幕时将出现在地面上
- en: 'We created the ARCamera element when we integrated Vuforia in Unity, so let''s
    create the rest of the elements to make the Ground Plane features work:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在 Unity 中集成 Vuforia 时创建了 ARCamera 元素，所以让我们创建其余的元素以使地面平面功能正常工作：
- en: 'Right-click on the Hierarchy window and select Vuforia Engine|Ground Plane|Ground
    Plane Stage. This will create the parent GameObject for the contents we want to
    show in AR. It''s represented with a visual reference of a 100 cm square to help
    with the virtual objects'' real-world scale. This reference is only visible inside
    the Unity editor:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击层次窗口并选择 Vuforia Engine|Ground Plane|Ground Plane Stage。这将为我们想要在 AR 中显示的内容创建父
    GameObject。它用一个 100 厘米方形的视觉参考来帮助虚拟对象的现实世界比例。这个参考仅在 Unity 编辑器内可见：
- en: '![](img/36e703af-d963-496a-a503-d25139a328b8.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/36e703af-d963-496a-a503-d25139a328b8.png)'
- en: Creating a Ground Plane Stage element
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 创建地面平面舞台元素
- en: 'The Ground Plane Stage GameObject has two scripts attached to it:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 地面平面舞台 GameObject 上有两个脚本附加到它：
- en: Anchor Behaviour, which determines whether the virtual objects appear attached
    to the ground or in mid-air
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 锚点行为，它决定了虚拟对象是附着在地面上还是在空中
- en: Default Trackable Event Handler, which is Vuforia's default script to show/hide
    elements when the target is found/lost
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认可追踪事件处理器，这是 Vuforia 的默认脚本，用于在目标被找到/丢失时显示/隐藏元素
- en: 'To create a virtual object to test, right-click Ground Plane Stage and create
    a 3D Object|Cube. Make sure it appears as a child of the Ground Plane Stage so
    that it''s shown/hidden when appropriate:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建一个虚拟对象进行测试，右键单击地面平面阶段并创建3D Object|Cube。确保它作为地面平面阶段的子级出现，以便在适当的时候显示/隐藏：
- en: '![](img/3ffe14d4-b884-4d64-963a-d756307b13a7.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3ffe14d4-b884-4d64-963a-d756307b13a7.png)'
- en: Creating a cube as the child of the Ground Plane Stage
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个立方体作为地面平面阶段的子级
- en: 'Scale down the cube so that it''s smaller than the visual reference of the Ground
    Plane Stage. Make sure it''s visible from the ARCamera in the Game view (if not,
    move/rotate either the ARCamera or, preferably, the Ground Plane Stage until it''s
    in view):'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 缩小立方体，使其小于地面平面阶段的视觉参考。确保它在游戏视图中从ARCamera可见（如果不是，移动/旋转ARCamera或更理想的是地面平面阶段，直到它在视图中）：
- en: '![](img/61ba0799-3123-4c41-9a85-cc730f5dca21.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/61ba0799-3123-4c41-9a85-cc730f5dca21.png)'
- en: The cube placed over the reference grid of the Ground Plane stage
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 放置在地面平面阶段参考网格上的立方体
- en: 'Right-click outside the Hierarchy window and select Vuforia Engine|Ground Plane|Plane
    Finder:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构窗口外部右键单击，并选择Vuforia Engine|地面平面|平面查找器：
- en: '![](img/8473749c-717e-4faf-bf1e-9433c3f5d458.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8473749c-717e-4faf-bf1e-9433c3f5d458.png)'
- en: Creating the Plane Finder to detect the ground planes
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 创建平面查找器以检测地面平面
- en: 'This GameObject has three scripts attached to it:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此GameObject附有三个脚本：
- en: Anchor Input Listener Behaviour, which is in charge of listening for the user's
    input (tap on the screen)
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 锚点输入监听器行为，负责监听用户的输入（屏幕上的点击）
- en: Plane Finder Behaviour, which is used to find horizontal surfaces to place the
    content
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平面查找器行为，用于查找水平表面放置内容
- en: Content Positioning Behaviour, which is used to position the content of the
    real world
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内容定位行为，用于定位真实世界的内容
- en: 'On the Content Positioning Behaviour script, select (or drag from the Hierarchy)
    the Ground Plane Stage inside the Anchor Stage selection box:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在内容定位行为脚本中，选择（或从层次结构拖动）地面平面阶段位于锚点阶段选择框内：
- en: '![](img/8752691c-5284-4362-a87f-8272f642ce3e.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8752691c-5284-4362-a87f-8272f642ce3e.png)'
- en: Linking the Ground Plane Stage to the Plane Finder
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 将地面平面阶段链接到平面查找器
- en: Before moving on, press *Ctrl* + *S to* save the current scene.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在继续之前，按*Ctrl* + *S* 保存当前场景。
- en: Now that we have our AR scene configured, we're going to add the Vuforia key,
    a necessary step that we need to take in order to build Vuforia on mobile devices.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经配置了AR场景，我们将添加Vuforia密钥，这是在移动设备上构建Vuforia所必需的步骤。
- en: Obtaining the key
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取密钥
- en: 'Vuforia requires a development/deployment key for the app to work on a real
    device. To do this, follow these steps:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: Vuforia要求应用在真实设备上运行时需要一个开发/部署密钥。为此，请按照以下步骤操作：
- en: Go to Vuforia's developer page ([https://developer.vuforia.com/license-manager](https://developer.vuforia.com/license-manager)),
    register, and log in.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往Vuforia的开发者页面([https://developer.vuforia.com/license-manager](https://developer.vuforia.com/license-manager))，注册并登录。
- en: On the License Manager tab, select Get Development Key to obtain a free key
    to use while developing.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在许可证管理器选项卡上，选择获取开发密钥以获取开发期间使用的免费密钥。
- en: Give it the name of your app, `AR On the Go`, read and accept the terms and
    conditions, and press Confirm.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给它起一个你应用的名字，`AR On the Go`，阅读并接受条款和条件，然后按确认。
- en: Select your newly created license and copy the key numbers.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择你新创建的许可证并复制密钥数字。
- en: Go back to the Unity editor and select ARCamera from the scene.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回Unity编辑器并选择场景中的ARCamera。
- en: 'Click on Open Vuforia Engine Configuration in the Inspector window to open
    the general Vuforia configuration:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器窗口中单击打开Vuforia Engine配置以打开通用Vuforia配置：
- en: '![](img/211f4bd7-180b-4e05-b06a-c05d6da55533.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/211f4bd7-180b-4e05-b06a-c05d6da55533.png)'
- en: ARCamera GameObject in the Inspector window
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 检查器窗口中的ARCamera GameObject
- en: 'Here, paste your key into the App License Key field:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此处，将你的密钥粘贴到应用许可证密钥字段中：
- en: '![](img/8b4cdedd-5a87-442a-a28a-bdf1331678b9.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8b4cdedd-5a87-442a-a28a-bdf1331678b9.png)'
- en: Vuforia configuration options in the Inspector window
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 检查器窗口中的Vuforia配置选项
- en: Now, we have included a Vuforia development key in our project that will let
    us build and install our app on a real device.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经在项目中包含了一个Vuforia开发密钥，这将使我们能够在真实设备上构建和安装我们的应用。
- en: Keep in mind that when you want to upload an app to the store (Google or Apple),
    you will have to buy a deployment key according to Vuforia's plans. You can find
    the updated prices at [https://developer.vuforia.com/pricing](https://developer.vuforia.com/pricing).
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，当你想要将应用程序上传到商店（Google或Apple）时，你必须根据Vuforia的计划购买一个部署密钥。你可以在[https://developer.vuforia.com/pricing](https://developer.vuforia.com/pricing)找到更新的价格。
- en: In the next section, we will test our app in Unity to make sure everything works
    as it should.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将测试我们的应用程序在Unity中，以确保一切按预期工作。
- en: Testing the app
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试应用程序
- en: When developing a project in Unity, it's good practice to test it before building
    it since the building process takes time. This way, you can detect basic problems
    and errors and correct them quickly before actually trying the app on your phone.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity中开发项目时，在构建之前测试它是良好的实践，因为构建过程需要时间。这样，你可以检测基本问题和错误，并在实际尝试在手机上运行应用程序之前快速纠正它们。
- en: Vuforia can't currently be built as a standalone application, but it has a script
    integrated with the ARCamera for testing purposes. When you are testing the app
    in Unity editor, it will use the computer's camera to simulate the AR. If it doesn't
    detect a camera, it will leave the background black and play the AR directly.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: Vuforia目前不能作为一个独立的应用程序构建，但它有一个与ARCamera集成的脚本，用于测试目的。当你正在Unity编辑器中测试应用程序时，它将使用电脑的摄像头来模拟AR。如果它没有检测到摄像头，它将使背景保持黑色并直接播放AR。
- en: On the other hand, when you're working with a Ground Plane project and you want
    to test the app, Vuforia won't be able to use the device's sensors to detect a
    flat surface. Instead, it offers an image target reference to simulate Ground
    Plane recognition, and when the camera detects that image, it will behave like
    it's detecting a flat surface on the phone.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，当你使用地面平面项目并想要测试应用程序时，Vuforia无法使用设备的传感器来检测平坦的表面。相反，它提供了一个图像目标参考来模拟地面平面识别，当相机检测到该图像时，它将表现得像在手机上检测到一个平坦的表面。
- en: 'To test our app, follow these steps:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试我们的应用程序，请按照以下步骤操作：
- en: Locate the PDF called `Emulator Ground Plane.pdf` at Vuforia|Databases|ForPrint|Emulator from
    the Project window. Print it and place it on the ground (you can also open the
    PDF image directly on the computer, although the size reference might not be accurate).
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目窗口中找到名为“`Emulator Ground Plane.pdf`”的PDF文件，位于Vuforia|Databases|ForPrint|Emulator。打印它并将其放置在地面上（你也可以直接在电脑上打开PDF图像，尽管尺寸参考可能不准确）。
- en: 'Press the play button in the top Toolbar and point the webcam to the image.
    You will see a visual mark when the software detects a surface (the target, in
    this case). Before pressing the play button, you can click the Maximize on Play button
    in the Game view''s top-right corner to see the image maximized on the screen:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在顶部的工具栏中按下播放按钮，并将网络摄像头指向图像。当软件检测到表面（在这种情况下为目标）时，你会看到一个视觉标记。在按下播放按钮之前，你可以点击游戏视图右上角的“播放时最大化”按钮，以便在屏幕上最大化显示图像：
- en: '![](img/6e58c8cd-228b-460a-aeeb-07ada120aed8.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6e58c8cd-228b-460a-aeeb-07ada120aed8.png)'
- en: Game view detecting the Ground Plane Emulator image
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏视图检测地面平面模拟器图像
- en: 'Click on the computer screen over the Game view to simulate a screen touch
    on the phone. The cube will appear over the target. Its size will depend on the
    size that you gave previously in the Unity editor (the Ground Plane Stage in Unity
    is 100 cm x 100 cm, while the printed emulator is 20 cm x 20 cm):'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击游戏视图上的电脑屏幕以在手机上模拟屏幕触摸。立方体将出现在目标上方。其大小将取决于你在Unity编辑器中之前给出的尺寸（Unity中的地面平面舞台为100厘米
    x 100厘米，而打印的模拟器为20厘米 x 20厘米）：
- en: '![](img/1276a128-54ff-4fd9-89d0-63d504191a76.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1276a128-54ff-4fd9-89d0-63d504191a76.png)'
- en: The cube appears on the floor when clicking the Game view
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 点击游戏视图时，立方体出现在地板上
- en: If everything works as expected, we can change the cube and start shaping our
    AR app to show furniture in the real world.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切按预期工作，我们可以更改立方体并开始塑造我们的AR应用程序，以在现实世界中显示家具。
- en: Creating an AR furniture viewer
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建AR家具查看器
- en: 'Now that we have the main structure of the AR scene, we''ll customize the app
    to create an AR furniture viewer that allows us to place chairs in the real world.
    The app will let us do the following:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了AR场景的主结构，我们将定制应用程序以创建一个AR家具查看器，允许我们在现实世界中放置椅子。应用程序将让我们做以下事情：
- en: Place a single chair on the ground
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在地面上放置一把椅子
- en: Duplicate the chair to create a cinema-like scene
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复制椅子以创建类似电影院的场景
- en: Rotate the chair to adjust it to the environment
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 旋转椅子以调整其与环境的匹配
- en: Let's get started!
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: Adding elements to our project
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向我们的项目中添加元素
- en: 'We will start by adding new elements to our project and scene, including the
    3D model and a user interface:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先向我们的项目和场景添加新元素，包括3D模型和用户界面：
- en: 'Create your own folder inside the `Assets` folder of the Project window and
    name it `@MyAssets`. Then, create three other folders called `Images`, `Models`,
    and `Scripts` inside it:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目窗口的`Assets`文件夹中创建自己的文件夹，并将其命名为`@MyAssets`。然后，在它内部创建三个其他文件夹，分别命名为`Images`、`Models`和`Scripts`：
- en: '![](img/09188c1a-37c8-4b7e-a782-7893a8826888.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/09188c1a-37c8-4b7e-a782-7893a8826888.png)'
- en: The new folders inside @MyAssets
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '@MyAssets内部的新文件夹'
- en: Now, from the resources of the project, copy the models and images into their
    respective folders in the Project window.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，从项目的资源中，将模型和图像复制到项目窗口中相应的文件夹。
- en: 'In the Inspector window, change the `chair.png` and `cinema.png` images'' Texture
    Type to Sprite (2D and UI) and click Apply. This will allow us to use them as
    UI elements later. The others will be used as regular textures on planes:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器窗口中，将`chair.png`和`cinema.png`图像的纹理类型更改为精灵（2D和UI），然后点击应用。这将允许我们稍后将其用作UI元素。其他图像将作为常规纹理应用于平面上：
- en: '![](img/c14d5088-5a1c-45d8-8131-b37e843fb3b6.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c14d5088-5a1c-45d8-8131-b37e843fb3b6.png)'
- en: The chair.png image import settings in the Inspector window
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 检查器窗口中的chair.png图像导入设置
- en: Drag the prince model from the Assets|Models|Prince folder to the Hierarchy
    window as the child of Ground Plane Stage.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将从Assets|Models|Prince文件夹中的王子模型拖动到层次结构窗口，作为地面平面舞台的子对象。
- en: Delete the Cube since we don't need it anymore.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除立方体，因为我们不再需要它了。
- en: 'Scale it, rotate it, and move it until it''s facing forward, over the Ground
    Plane Stage at a convenient size (you can adapt this later when you test the app):'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 缩放它，旋转它，并移动它，直到它面向前方，在地面平面舞台上的合适大小（您可以在测试应用程序时稍后调整此大小）：
- en: '![](img/a8e6ba8b-af45-45c9-9aa4-8e5669deeca1.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a8e6ba8b-af45-45c9-9aa4-8e5669deeca1.png)'
- en: The prince model as the Ground Plane Stage object's child in the scene
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 场景中王子模型作为地面平面舞台对象的子对象
- en: 'To create the UI, right-click the Hierarchy window and select UI|Button. It
    will automatically encapsulate the Button in a new Canvas element and add the
    necessary Event System to the scene too:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建UI，在层次结构窗口中右键单击并选择UI|按钮。它将自动将按钮封装在新的Canvas元素中，并将必要的Event System添加到场景中：
- en: '![](img/7dbfa02f-22ae-4828-a896-a73e509e42aa.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7dbfa02f-22ae-4828-a896-a73e509e42aa.png)'
- en: Creating a button in the Hierarchy window
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在层次结构窗口中创建按钮
- en: 'Select the Canvas and change the parameters on the Canvas Scaler so that it
    scales up and down according to the device''s screen size:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择画布，并更改Canvas Scaler的参数，以便它根据设备的屏幕大小进行缩放：
- en: '![](img/e2703a80-5d9a-422b-a884-549aab5b1b42.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e2703a80-5d9a-422b-a884-549aab5b1b42.png)'
- en: New Canvas Scaler parameters to adapt the UI's size to the screen size
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 新的画布缩放器参数以适应UI的大小到屏幕大小
- en: Select the button and delete its Text GameObject.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择按钮并删除其Text GameObject。
- en: 'In the Inspector window, change its name to `chair_b` to identify it, its position,
    and size using the Rect Transform component. Add the chair image to its Source
    Image in the Image component:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器窗口中，将其名称更改为`chair_b`以进行识别，并使用Rect Transform组件来设置其位置和大小。将椅子图像添加到图像组件的源图像中：
- en: '![](img/6f897b1a-d5fb-450c-b302-cb35ad4a09fb.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6f897b1a-d5fb-450c-b302-cb35ad4a09fb.png)'
- en: Customizing the created button
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义创建的按钮
- en: 'This is the button that will switch between moving a single chair and adding
    multiple chairs to form a cinema:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 这是切换单个椅子移动和添加多个椅子以形成电影院的按钮：
- en: '![](img/a205bd30-e135-4d91-af20-233bd868c1e4.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a205bd30-e135-4d91-af20-233bd868c1e4.png)'
- en: The view of the chair and button in the Game view
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏视图中椅子和按钮的视图
- en: Now, we have to create a script that will contain the logic of the app.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们必须创建一个包含应用程序逻辑的脚本。
- en: Adding the logic of the app
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加应用程序的逻辑
- en: 'Now, let''s create the logic of the app by adding a new script to the project. This
    will be the script in charge of switching between one and multiple chairs:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过向项目中添加新脚本来创建应用程序的逻辑。这将负责在单个和多个椅子之间切换：
- en: 'In your @MyAssets|Scripts folder, in the Project window, right-click and select
    Create|C# Script. Call it `OnTheGoHandler.cs`:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目窗口的@MyAssets|Scripts文件夹中，右键单击并选择创建|C#脚本。将其命名为`OnTheGoHandler.cs`：
- en: '![](img/b4c53ee9-eb88-461e-9421-db3362b0f1ed.png)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b4c53ee9-eb88-461e-9421-db3362b0f1ed.png)'
- en: Adding a new script in the Project window
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目窗口中添加新脚本
- en: 'Double-click on it to open it in Visual Studio:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击它以在Visual Studio中打开：
- en: '![](img/eb1187f2-fedd-48e9-9c17-b32449ff3a98.png)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/eb1187f2-fedd-48e9-9c17-b32449ff3a98.png)'
- en: The OnTheGoHandler script in Visual Studio
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio中的OnTheGoHandler脚本
- en: 'Add the `Vuforia` library at the top of the script to use its features:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在脚本顶部添加 `Vuforia` 库以使用其功能：
- en: '[PRE0]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Inside the class, declare the following variables:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在类中声明以下变量：
- en: '[PRE1]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `chairButton` variable will correspond to the button we created in Unity.
    The `buttonSprites` array will contain the two background images for the button
    and we'll switch between them. The `contentPosBehaviour` variable comes from the
    `Vuforia` class, which is in charge of adding our virtual objects to the real
    world. We will use the `multipleChairs` Boolean to switch between the two states
    (one chair or multiple chairs). Public variables will be initialized in the Unity
    editor.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '`chairButton` 变量将对应我们在 Unity 中创建的按钮。`buttonSprites` 数组将包含按钮的两个背景图像，我们将在这两者之间切换。`contentPosBehaviour`
    变量来自 `Vuforia` 类，负责将我们的虚拟对象添加到现实世界中。我们将使用 `multipleChairs` 布尔值在两种状态（一把椅子或多把椅子）之间切换。公共变量将在
    Unity 编辑器中初始化。'
- en: 'Inside the `Start()` method, add the following code:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Start()` 方法中，添加以下代码：
- en: '[PRE2]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This will retrieve the `ContentPositioningBehaviour` component of the GameObject
    that contains the script.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 这将检索包含脚本的 GameObject 的 `ContentPositioningBehaviour` 组件。
- en: 'After the `Update()` method, create a new method:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Update()` 方法之后，创建一个新的方法：
- en: '[PRE3]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: When this method is called, it checks whether the current state is a single
    chair or multiple chairs. It switches the image of the UI button accordingly and
    adjusts the `DuplicateStage` parameter of the `ContentPositioningBehaviour` class
    to allow one or multiple instances of the same chair. Then, it sets `multipleChairs`
    to `true` or `false` to keep track of the current state.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 当此方法被调用时，它会检查当前状态是一把椅子还是多把椅子。相应地切换 UI 按钮的图像，并调整 `ContentPositioningBehaviour`
    类的 `DuplicateStage` 参数以允许一个或多个相同的椅子实例。然后，它将 `multipleChairs` 设置为 `true` 或 `false`
    以跟踪当前状态。
- en: 'Back in the Unity editor, drag the script over the Plane Finder. Alternatively,
    in the Inspector window, click on Add Component|On The Go Handler:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Unity 编辑器中，将脚本拖到 Plane Finder 上。或者，在检查器窗口中，点击 Add Component|On The Go Handler：
- en: '![](img/cdd4e4b9-9753-4885-860f-37b065a44126.png)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/cdd4e4b9-9753-4885-860f-37b065a44126.png)'
- en: Adding the created script to the Plane Finder GameObject
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 将创建的脚本添加到 Plane Finder GameObject
- en: In the On The Go Handler script, select or drag the button to the Chair Button
    field and select the two sprites, chair and cinema, from @MyAssets|Images in that
    order (see the following screenshot).
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 On The Go Handler 脚本中，将按钮拖到 Chair Button 字段，并从 @MyAssets|Images 中按顺序选择两个精灵，椅子和电影院（见以下截图）。
- en: 'From the Content Positioning Behaviour drop-down, uncheck Duplicate Stage so
    that it starts with a single chair:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从内容定位行为下拉菜单中取消选中 Duplicate Stage，以便它从单个椅子开始：
- en: '![](img/38598ab4-0df9-43e8-a73b-8cfa16d2dd48.png)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/38598ab4-0df9-43e8-a73b-8cfa16d2dd48.png)'
- en: Assigning the corresponding elements to the OnTheGoHandler script in the Inspector
    window
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在检查器窗口中将相应的元素分配给 OnTheGoHandler 脚本
- en: 'Finally, select the button and, in the On Click () method, at the bottom, choose
    the Plane Finder and select the On The Go Handler|SwitchMultipleChairs function:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，选择按钮，在 On Click () 方法中，在底部选择 Plane Finder 并选择 On The Go Handler|SwitchMultipleChairs
    函数：
- en: '![](img/15e51237-1b5f-45b0-b17c-5345d6302a4b.png)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/15e51237-1b5f-45b0-b17c-5345d6302a4b.png)'
- en: Selecting the OnClick() method behaviour for the button in the Inspector window
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在检查器窗口中选择按钮的 OnClick() 方法行为
- en: 'Before we add any new features, we need to build this app on a mobile device.
    Press *Ctrl* + *Shift* + *B* or go to File|Build Settings...:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在添加任何新功能之前，我们需要在移动设备上构建此应用。按 *Ctrl* + *Shift* + *B* 或转到 File|Build Settings...：
- en: '![](img/c7503e3f-d531-49c4-9774-df958b538755.png)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c7503e3f-d531-49c4-9774-df958b538755.png)'
- en: Build Settings panel to build and run the app on a mobile device
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 构建设置面板以在移动设备上构建和运行应用
- en: 'Press Build And Run, give your `.apk` file a name, and run it on the mobile
    device. Point the camera to the ground until a little icon appears, marking the
    ground level:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 Build And Run，给你的 `.apk` 文件命名，并在移动设备上运行。将相机对准地面，直到出现一个小图标，标记地面水平：
- en: '![](img/5fb64796-d4e5-4608-89f0-079e404b1b6a.png)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5fb64796-d4e5-4608-89f0-079e404b1b6a.png)'
- en: The white square shows the point of the ground where the virtual objects will
    be placed
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 白色方块显示了虚拟对象将被放置的地面上的点
- en: 'Move around and tap on the screen to place a chair. Now, you can walk around
    the virtual chair to see it from different angles:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 四处走动并在屏幕上轻触以放置一把椅子。现在，你可以绕着虚拟椅子走动，从不同的角度观看它：
- en: '![](img/95a34205-8713-4bd7-9fdf-327a6bd2255d.png)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/95a34205-8713-4bd7-9fdf-327a6bd2255d.png)'
- en: The virtual red chair placed in a real environment
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 放置在真实环境中的虚拟红色椅子
- en: 'Press the button to switch to multiple-chair mode, move the camera around,
    and place multiple chairs all over the room:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按钮切换到多椅子模式，移动相机，并将多个椅子放置在房间的各个角落：
- en: '![](img/53821359-3a01-4a75-9d12-8f8b08f31c81.png)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![](img/53821359-3a01-4a75-9d12-8f8b08f31c81.png)'
- en: Two virtual chairs, one next to the other
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 两个虚拟椅子，一个挨着一个
- en: It's probable that, on your first attempt, the chair won't have the desired
    size or the shadows won't correspond to the real ones. Furthermore, the chair
    will always be facing forward, so you'll have to move around the room before placing
    it in the desired place. Let's improve these little details to make the app more
    appealing.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 很可能，在您的第一次尝试中，椅子的大小不会如您所愿，或者阴影不会与真实情况相符。此外，椅子将始终朝前，因此您必须围绕房间移动，然后再将其放置在期望的位置。让我们改进这些小细节，使应用程序更具吸引力。
- en: Improving the app
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改进应用程序
- en: 'Now, we are going to improve the current app to make it more appealing to the
    user:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将改进当前应用程序，使其对用户更具吸引力：
- en: 'First of all, try adding a new Directional Light (right-click on the existing
    one and press Duplicate) and play with its Rotation, Intensity, and/or Shadow
    Type. In this case, we have placed two lights, with Rotation values of (`-30`,`-20`,`0`)
    and (`30`,`20`,`0`) respectively and with No Shadows, creating a lighter-colored
    chair:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，尝试添加一个新的方向光（右键单击现有的一个并按复制），然后调整其旋转、强度和/或阴影类型。在这种情况下，我们放置了两个灯，旋转值分别为 (`-30`,`-20`,`0`)
    和 (`30`,`20`,`0`)，并且没有阴影，创建了一个颜色较浅的椅子：
- en: '![](img/e76034fd-6f8b-4a57-922d-d074265cfd59.png)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e76034fd-6f8b-4a57-922d-d074265cfd59.png)'
- en: Values of one of the Directional Lights
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 一个方向光的值
- en: 'Now, let''s make the visual reference of the floor more visible: select the
    Plane Finder GameObject and, in the Inspector window, double-click on the DefaultPlaneIndicator
    element located in the Plane Finder Behaviour script. This will open the original
    element:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们使地板的视觉参考更加明显：选择 Plane Finder GameObject，并在检查器窗口中双击位于 Plane Finder Behaviour
    脚本中的 DefaultPlaneIndicator 元素。这将打开原始元素：
- en: '![](img/29249900-8077-463a-a06f-7824494a0f91.png)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![](img/29249900-8077-463a-a06f-7824494a0f91.png)'
- en: Selecting DefaultPlaneIndicator in the Inspector window
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在检查器窗口中选择 DefaultPlaneIndicator
- en: 'From the Hierarchy window, select the DefaultIndicator child. Then, in the
    Inspector window, increase its size to `0.05` and change the default image to
    reticle_ground_surface:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从层次结构窗口中选择 DefaultIndicator 子项。然后，在检查器窗口中，将其大小增加到 `0.05` 并将默认图像更改为 reticle_ground_surface：
- en: '![](img/1766c05c-071f-44a6-b473-0980c9a86c39.png)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1766c05c-071f-44a6-b473-0980c9a86c39.png)'
- en: The DefaultIndicator GameObject's components in the Inspector window
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: DefaultIndicator GameObject 的组件在检查器窗口中
- en: 'Let''s add a rotation indicator to the chair so that it appears when we use
    two fingers on the screen. Right-click on the prince GameObject in the Hierarchy
    window and select 3D Object|Quad:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在场景窗口中右键单击王子 GameObject 并选择 3D Object|Quad，给椅子添加一个旋转指示器，以便我们在屏幕上使用两个手指时它会出现：
- en: '![](img/76d89880-1dc4-4b4f-9fab-9c7729113ac1.png)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
  zh: '![](img/76d89880-1dc4-4b4f-9fab-9c7729113ac1.png)'
- en: Creating a Quad element child of the prince GameObject
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个 prince GameObject 的 Quad 元素子项
- en: 'Drag the `placement_rotate` image from the Project window over the rotate GameObject
    in the Hierarchy window to convert it into its texture and set the material''s
    Rendering Mode to Cutout:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `placement_rotate` 图像从项目窗口拖到层次结构窗口中的旋转 GameObject 上，将其转换为纹理，并将材质的渲染模式设置为 Cutout：
- en: '![](img/e0db86f6-98c3-470b-a47e-f7d7f0213715.png)'
  id: totrans-267
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e0db86f6-98c3-470b-a47e-f7d7f0213715.png)'
- en: Quad's material's properties on the Inspector
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: Quad 材料的属性在检查器中
- en: 'Adjust its position and rotation so that it appears in the middle of the Ground
    Plane Stage:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调整其位置和旋转，使其出现在地面舞台的中间：
- en: '![](img/657aacd3-f55e-45f7-b714-3836a4b86d60.png)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![](img/657aacd3-f55e-45f7-b714-3836a4b86d60.png)'
- en: The Quad in the middle of the Ground Plane around the seat
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 座位周围地面中间的 Quad
- en: 'Now, create another script in the @MyAssets|Scripts folder. Call it `ChairHandler.cs`
    and attach it to the prince GameObject:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在 @MyAssets|Scripts 文件夹中创建另一个脚本。命名为 `ChairHandler.cs` 并将其附加到王子 GameObject：
- en: '![](img/9569e497-f230-4335-8139-5944bd3c7768.png)'
  id: totrans-273
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9569e497-f230-4335-8139-5944bd3c7768.png)'
- en: The prince GameObject with the newly created script attached to it
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 将新创建的脚本附加到其上的王子 GameObject
- en: 'Double-click on the script to open it in Visual Studio:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击脚本以在 Visual Studio 中打开它：
- en: '![](img/f40008d1-57e8-4048-b542-f91166be209e.png)'
  id: totrans-276
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f40008d1-57e8-4048-b542-f91166be209e.png)'
- en: ChairHandler script in Visual Studio
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: ChairHandler 脚本在 Visual Studio 中
- en: 'At the beginning of the class, add the following variables:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在课程开始时添加以下变量：
- en: '[PRE4]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The first variable refers to the Quad GameObject we created previously (with
    the rotation arrows image). The second variable controls the rotation speed of
    the chair.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个变量指的是我们之前创建的 Quad GameObject（带有旋转箭头图像）。第二个变量控制椅子的旋转速度。
- en: 'Inside the `Start()` method, add the following code:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Start()` 方法中，添加以下代码：
- en: '[PRE5]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: With this, we are hiding the rotate arrows until the chair is actually rotating.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，我们隐藏了旋转箭头，直到椅子实际上在旋转。
- en: 'Now, inside the `Update()` method, add the following code:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在 `Update()` 方法中，添加以下代码：
- en: '[PRE6]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The preceding code retrieves the touches coming from the screen. If it''s two
    touches (two fingers touching the screen) and at least one of them is moving,
    it does the following:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码检索来自屏幕的触摸。如果是两个触摸（两个手指触摸屏幕）并且至少有一个在移动，它执行以下操作：
- en: Makes the rotation image visible.
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使旋转图像可见。
- en: Retrieves the touches' positions.
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取触摸的位置。
- en: Calculates the angle between the last finger position and the current one, and
    rotates the chair accordingly. When the user stops rotating the chair, the rotation
    image is hidden again.
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算最后手指位置和当前位置之间的角度，并相应地旋转椅子。当用户停止旋转椅子时，旋转图像再次隐藏。
- en: The final step is to drag the Quad GameObject from the Hierarchy to the ChairHandler
    script's Rotate GO field in the Inspector window.
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步是将 Quad GameObject 从 Hierarchy 拖到 Inspector 窗口中 ChairHandler 脚本的 Rotate
    GO 字段。
- en: 'Now, you can directly press *Ctrl* + *B* to build and run the project or do
    so through File|Build And Run. As you can see, the mark on the ground is much
    more visible now:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以直接按 *Ctrl* + *B* 来构建和运行项目，或者通过 File|Build And Run 来做。正如你所看到的，地面上的标记现在更加明显了：
- en: '![](img/96e707e8-567b-498b-9fac-c60af30e0e0a.png)'
  id: totrans-292
  prefs: []
  type: TYPE_IMG
  zh: '![](img/96e707e8-567b-498b-9fac-c60af30e0e0a.png)'
- en: The new ground reference mark
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 新的地面参考标记
- en: 'Now, you can also rotate the chair to see how it would look in its place:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你还可以旋转椅子，看看它放在那里的样子：
- en: '![](img/27609e39-b472-406f-a925-5161c2b9b1c1.png)'
  id: totrans-295
  prefs: []
  type: TYPE_IMG
  zh: '![](img/27609e39-b472-406f-a925-5161c2b9b1c1.png)'
- en: Rotation arrows appearing when the user rotates the chair with two fingers
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户用两只手指旋转椅子时出现的旋转箭头
- en: With that, we have completed the AR furniture viewer.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们就完成了 AR 家具查看器。
- en: Summary
  id: totrans-298
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we have learned about one of Vuforia''s features: Ground Plane.
    We created a project that places virtual chairs in real-life scenarios and lets
    us manipulate them with touchscreens (rotate them) and through a simple UI button
    (multiply them).'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了 Vuforia 的一个功能：地面平面。我们创建了一个项目，将虚拟椅子放置在现实场景中，并允许我们通过触摸屏（旋转它们）和简单的 UI
    按钮来操作它们（乘以它们）。
- en: By now, you will have a better understanding of how Vuforia works, how to create
    Vuforia elements inside Unity, and how to create a wholly functional Ground Plane
    example in it. With the skills that you've acquired through this project's development,
    you can improve it by adding new 3D models, new UI elements, or updating the current
    scripts to include more features in the app.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，你将更好地理解 Vuforia 的工作原理，如何在 Unity 中创建 Vuforia 元素，以及如何在其中创建一个完全功能的地面平面示例。通过在这个项目开发过程中获得的技术，你可以通过添加新的
    3D 模型、新的 UI 元素或更新当前脚本以在应用程序中包含更多功能来改进它。
- en: You also have better insight into how AR can work in the retail field so that
    you can adapt the current project to fill your personal or professional needs
    in this area. As we mentioned at the beginning of this chapter and seen throughout,
    the app can easily be changed to display other types of furniture, decorations,
    carpets, or any product that you want to show over a surface and observe from
    different angles.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以更好地了解 AR 在零售领域的应用，以便你可以根据个人或专业需求调整当前项目。正如我们在本章开头提到的，以及我们一直在看到的，应用程序可以很容易地更改以显示其他类型的家具、装饰、地毯或任何你想要在表面上展示并从不同角度观察的产品。
- en: In the next chapter, we will be exploring Vuforia's possibilities even further
    by looking at Image Targets and deploying the app inside Moverio AR glasses.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过查看图像目标和在 Moverio AR 眼镜中部署应用程序来进一步探索 Vuforia 的可能性。
- en: Further reading
  id: totrans-303
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: From here, you can try to use Vuforia's Mid Air option, which, instead of placing
    the objects attached to the ground, places them at a distance from it. This can
    be useful for placing objects on walls, such as frames, pictures, and so on, or
    when working with flying objects such as drones. Their use is very similar; instead
    of creating a Plane Finder and Ground Plane Stage, you create a Mid Air Positione*r* and Mid
    Air Stage.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，你可以尝试使用 Vuforia 的“空中”选项，它不是将附着在地面上的物体放置在地面上，而是将它们放置在地面的距离之外。这对于在墙上放置物体，如画框、图片等，或者当与无人机等飞行物体一起工作时非常有用。它们的使用非常相似；你不需要创建“平面查找器”和“地面平面舞台”，而是创建一个“空中位置器”和“空中舞台”。
- en: You can also download the Vuforia core samples from the Unity Asset Store ([https://assetstore.unity.com/packages/templates/packs/vuforia-core-samples-99026](https://assetstore.unity.com/packages/templates/packs/vuforia-core-samples-99026)),
    which includes a full example of the Ground Plane and its features.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以从 Unity 资产商店下载 Vuforia 核心示例（[https://assetstore.unity.com/packages/templates/packs/vuforia-core-samples-99026](https://assetstore.unity.com/packages/templates/packs/vuforia-core-samples-99026)），其中包含地面平面及其功能的完整示例。
