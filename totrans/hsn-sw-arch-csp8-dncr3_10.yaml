- en: Working with Azure Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we mentioned in [Chapter 4](049a0a4b-74b6-41a1-92db-87a4f8af9fd1.xhtml),
    *Deciding on the Best Cloud-Based Solution*, the serverless architecture is one
    of the newest ways to provide flexible software solutions. To do so, Microsoft
    Azure provides Azure Functions, an event-driven, serverless, and scalable technology
    that accelerates your project development. The main goal of this chapter is to
    inform you of Azure Functions and the best practices you can implement while using
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Azure Functions App
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Programming Azure Functions using C#
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintaining Azure Functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use case – implementing Azure Functions to send emails
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will understand how to use Azure Functions in
    C#.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter requires that you have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio 2017 or 2019 free Community Edition or better with all the database
    tools installed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A free Azure account. The *Creating an Azure* account section of [Chapter 1](14b5c5da-4042-439e-9e5a-2e19ba4c4930.xhtml),
    *Understanding the Importance of Software Architecture*, explains how to create
    one.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find the sample code for this chapter at [https://github.com/PacktPublishing/Hands-On-Software-Architecture-with-CSharp-8/tree/master/ch08](https://github.com/PacktPublishing/Hands-On-Software-Architecture-with-CSharp-8/tree/master/ch08).
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Azure Functions App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Azure Functions App is an Azure PaaS where you can build pieces of code
    (functions) and connect them to your application and use triggers to start them.
    The concept is quite simple – you build a function in the language you prefer
    and decide on the trigger that will start it. You can write as many functions
    as you want in your system. There are cases where the system is written entirely
    with functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps for creating the necessary environment are as simple as the ones
    we need to follow in order to create the function itself. The following screenshot
    shows the parameters that you have to decide on when you create the environment.
    After you select Create a Resource in Azure and filter by Function App, you will
    see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/10f24913-eea6-47e6-801c-18fcc84ee695.png)'
  prefs: []
  type: TYPE_IMG
- en: 'There are a couple of key points that you should consider while creating the
    environment. The first one is the Hosting Plan, which is where you will run your
    functions. There are two options for the Hosting Plan: Consumption Plan and App
    Service Plan. Let''s talk about these now.'
  prefs: []
  type: TYPE_NORMAL
- en: Consumption Plan
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you choose a Consumption Plan, your functions will only waste resources when
    they are executed. This means that you will only be charged while your functions
    are running. Scalability and memory resources will be automatically managed by
    Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Something we need to take note of while writing functions in this plan is the
    **timeout**. By default, after 5 minutes, the function will time out. You can
    change the timeout value using the `functionTimeout` parameter. The maximum value
    is 10 minutes.
  prefs: []
  type: TYPE_NORMAL
- en: When you choose a Consumption Plan, the way that you will be charged will depend
    on what you're executing, their execution time, and their memory usage. More information
    on this can be found at [https://azure.microsoft.com/en-us/pricing/details/functions/](https://azure.microsoft.com/en-us/pricing/details/functions/).
  prefs: []
  type: TYPE_NORMAL
- en: Note that this can be a good option when you don't have App Services in your
    environment and you are running functions with low periodicity. On the other hand,
    if you need continuous processing, you may want to consider the App Service Plan.
  prefs: []
  type: TYPE_NORMAL
- en: App Service Plan
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'App Service Plan is one of the options you can choose when you want to create
    an Azure Functions App. The following is a list of reasons (suggested by Microsoft)
    why you should use the App Service Plan instead of the Consumption Plan to maintain
    your functions:'
  prefs: []
  type: TYPE_NORMAL
- en: You can use underutilized existing App Service instances.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Function apps run continuously or nearly continuously.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need more CPU or memory options than what's provided with the Consumption
    Plan.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your code needs to run longer than 10 minutes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You require features such as VNET/VPN connectivity.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You want to run your function app on Linux or on a custom image.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the scenario of App Service Plan, the `functionTimeout` value varies according
    to the Azure Function Runtime version. However, the value is at least 30 minutes.
  prefs: []
  type: TYPE_NORMAL
- en: Programming Azure Functions using C#
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, you will learn how to create Azure Functions. It is worth
    mentioning that there are several ways to create them using C#. The first one
    is by creating the functions and developing them in the Azure Portal itself. To
    do this, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'From the Home page, go to All resources, search for the `wwtravelclub` app,
    and click it. You will see the following screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cc02e250-df6d-42f6-bc94-d4499a72b34e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on the In-portal creation option. Here, you will be prompted to decide
    on the kind of trigger that you want to use to start the execution. The most used
    ones are **HTTP Request** and **Timer Trigger**, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6e568874-17e7-461a-a28a-62e874894f58.png)'
  prefs: []
  type: TYPE_IMG
- en: When you decide on the trigger you want to use, you have to name it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Depending on the trigger you decide on, you will have to install some extensions
    and set up other parameters. For instance, HTTP trigger requires that you set
    up an authorization level. Three options are available, that is, Function, Anonymous,
    and Admin, out of which we have selected the Function option as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/df03fc3b-2b75-470a-b324-b7f3fc449d46.png)'
  prefs: []
  type: TYPE_IMG
- en: It is worth mentioning that this book doesn't cover all the options that are
    available when it comes to building functions. As a software architect, you should
    understand that Azure provides a good service for serverless architectures in
    terms of functions. This can be useful in several situations. This was discussed
    in more detail in [Chapter 4](049a0a4b-74b6-41a1-92db-87a4f8af9fd1.xhtml), *Deciding
    on the Best Cloud-Based Solution*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The result of this is as follows. Notice that Azure provides an editor that
    allows us to run the code, check logs, and test the function that we''ve created.
    This is a good interface for testing and coding basic functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d9e2bd25-f352-4a8c-84f9-17fb2e52eaf3.png)'
  prefs: []
  type: TYPE_IMG
- en: However, if you want to create more sophisticated functions, you may need a
    more sophisticated environment so that you can code and debug them more efficaciously.
    This is where the Visual Studio Azure Functions Project can help you.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Visual Studio, you are able to create a project dedicated to Azure Functions
    by going to the New Project | Cloud menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you''ve submitted your project, Visual Studio will ask you for the type
    of trigger you''re using and for the Azure version that your function will run
    on:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/28194bbf-1190-4717-bef8-f46ee96451d8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'At the time of writing, there are two versions of Azure Functions:'
  prefs: []
  type: TYPE_NORMAL
- en: In the first version, you can create functions that run on .NET Framework.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the second version, you can create functions that run on .NET Core.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As a software architect, you always have to keep code reusability in mind. In
    this case, you should pay attention to which version of Azure Functions Project
    you will decide to build your functions in.
  prefs: []
  type: TYPE_NORMAL
- en: By default, the code that's generated is similar to the code that's generated
    when you create Azure Functions in Azure Portal. The publish method follows the
    same steps as the publish procedure for web apps that we described in [Chapter
    1](14b5c5da-4042-439e-9e5a-2e19ba4c4930.xhtml), *Understanding the Importance
    of Software Architecture*.
  prefs: []
  type: TYPE_NORMAL
- en: Listing Azure Functions templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are several templates in the Azure Portal that you can use to create
    Azure Functions. The number of templates that you can choose from is updated continuously.
    The following are just a few of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Blob Storage**: You may want to process something for a file as soon as this
    file is uploaded to your blob storage. This can be a good use case for Azure functions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cosmos DB**: You may want to synchronize data that arrives in a Cosmos DB
    database with a processing method. Cosmos DB was discussed in detail in [Chapter
    7](77cdecb5-cef4-4b02-80a1-052ad366b9f3.xhtml), *How to Choose Your Data Storage
    in the Cloud*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Event Grid**: This is a good way to manage Azure events. Functions can be
    triggered so that they manage each event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Event Hubs**: These can be used with Azure Functions to manage data that
    arrives for each connected device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HTTP**: This trigger is really useful for building serverless APIs and web
    apps events.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Microsoft Graph Events**: The Graph API allows you to deliver functionality
    associated with Office 365\. For example, using this trigger, you can connect
    a calendar event to a function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Queue storage**: You can handle queue processing using a function as a service
    solution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Service Bus**: This is another messaging service that can be a trigger for
    functions. Azure Service Bus will be covered in more detail in [Chapter 9](a2d50e08-6698-47f6-a9b5-188de08134c0.xhtml),
    *Design Patterns and .NET Core Implementation*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Timer**: This is commonly used with functions and is where you specify Time
    Triggers so that you can continuously process data from your system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**WebHooks**: WebHooks is a technology that allows your application to avoid
    pooling data from an API. You can connect them to a function to learn how the
    event you''ve hooked is being processed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintaining Azure Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you've created and programmed your function, you need to monitor and maintain
    it. To do this, you can use a variety of tools – all of which you can find in
    Azure Portal. These tools will help you solve problems due to the amount of information
    you will be able to collect with them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first option when it comes to monitoring your function is using the Monitor
    menu inside of the Azure Functions interface in Azure Portal. There, you will
    be able to check all of your function executions, including successful results
    and failures:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/457f702c-541d-40fe-a83a-06726885644a.png)'
  prefs: []
  type: TYPE_IMG
- en: It will take about 5 minutes for any results to be available. The date shown
    in the grid is in UTC time.
  prefs: []
  type: TYPE_NORMAL
- en: 'The same interface allows you to connect to Application Insights. This will
    take you to a world of almost indefinite options that you can use to analyze your
    function data. Application Insights is one of the best **Application Performance
    Management** (**APM**) systems available nowadays:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dda9710f-d76d-49dd-b6d7-505cefce5689.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Beyond the query interface, you can also check all the performance issues of
    your function using the Insights interface in Azure Portal. There, you can analyze
    and filter all the requests that have been received by your solution and check
    their performance and dependencies. You can also trigger alerts when something
    abnormal happens to one of your endpoints:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/69145b32-05c8-4d37-8782-e2f68c52eebf.png)'
  prefs: []
  type: TYPE_IMG
- en: As a software architect, you will find a really good daily helper for your projects
    in this tool. It is worth mentioning that Application Insights works on several
    other Azure Services, such as web apps and virtual machines. This means you can
    monitor the health of your system and maintain it using the wonderful features
    provided by Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Use case – implementing Azure Functions to send emails
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here, we will use a subset of the Azure components we described previously.
    The use case from WWTravelClub proposes a worldwide implementation of the service,
    and there is a chance that this service will need different architecture designs
    to face all the performance key points that we described in [Chapter 1](14b5c5da-4042-439e-9e5a-2e19ba4c4930.xhtml),
    *Understanding the Importance of Software Architecture*.
  prefs: []
  type: TYPE_NORMAL
- en: If you go back to the user stories that were described in [Chapter 1](14b5c5da-4042-439e-9e5a-2e19ba4c4930.xhtml),
    *Understanding the Importance of Software Architecture*, you will find that many
    needs are related to communication. Because of this, it is really common to have
    some alerts be provided by emails in the solution. This chapter's use case will
    focus on how to send emails. The architecture will be totally serverless.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows the basic structure of the architecture. To give
    users a great experience, all the emails that are sent by the application will
    be queued asynchronously, thus avoiding high delays in the system''s responses:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3916fea9-5954-43af-926e-4156542b61ef.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that there are no servers that manage Azure Functions for inserting and
    Azure Functions for getting messages from the Queue Storage. This is exactly what
    we call serverless. It is worth mentioning that this architecture is not restricted
    to only sending emails – it can also be used to process any HTTP POST request.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will learn how to set up security in the API so that only authorized
    applications can use the given solution.
  prefs: []
  type: TYPE_NORMAL
- en: First Step – creating Azure Queue Storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It''s quite simple to create storage in Azure Portal. Let''s learn how:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you will need to create a storage account and set up its name, security,
    and network, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/44690125-2574-4cd9-a1c7-144b8c084895.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have the storage account in place, you will be able to set up a queue.
    You just need to provide the queue''s name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b50cc828-03a4-44db-ac6a-b810319c49ba.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The created queue will give you an overview of Azure Portal. There, you will
    find your queue''s URL and use the Storage Explorer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e1cd3823-bfe2-47a8-a94b-d1198341894c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Note that you will also be able to connect to this storage using Microsoft
    Azure Storage Explorer ([https://azure.microsoft.com/en-us/features/storage-explorer/](https://azure.microsoft.com/en-us/features/storage-explorer/)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1c874dcd-a218-46ba-890b-82167a3f9552.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, you can start your functional programming to inform the queue that an
    email is waiting to be sent. Here, we need to use an HTTP trigger. Note that the
    function is a static class that runs asynchronously. The following code is gathering
    the request data coming from the HTTP trigger and is inserting the data into a
    queue that will be treated later:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use a tool such as Postman to test your function by running the Azure
    Functions Emulator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e39b6278-ff70-4d79-8675-95c855e8f3d8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The result will appear in Microsoft Azure Storage Explorer and Azure Portal.
    In Azure Portal, you can manage each message and dequeue each of them or even
    clear the queue storage:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/404c9bbe-33ed-48aa-a26b-9e39cd8c13ff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After this, you can create a second function. This one will be triggered by
    data entering your queue. It is worth mentioning that, for Azure Functions v2,
    you will need to add the `Microsoft.Azure.WebJobs.Extensions.Storage` library
    as a NuGet reference:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/62b1db91-f9bd-476b-9703-a4dc9eca5b9f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you''ve set the connection string inside `local.settings.json`, you will
    be able to run both functions and test them with Postman. The difference is that,
    with the second function running, if you set a breakpoint at the start of it,
    you will check whether the message has been sent:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5b1b32ef-bf7e-4be0-bafd-aef379ccc879.png)'
  prefs: []
  type: TYPE_IMG
- en: From this point, the way to send emails will depend on the mail options you
    have. You may decide to use a proxy or may connect directly to your email server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'There are several advantages to creating an email service this way:'
  prefs: []
  type: TYPE_NORMAL
- en: Once your service has been coded and tested, you can use it to send emails from
    any of your applications. This means that your code can always be reused.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apps that use this service will not be stopped from sending emails due to the
    asynchronous advantages of posting in an HTTP service.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You don't need to pool the queue to check whether are data is ready for processing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, the queue process runs concurrently, which delivers a better experience
    in most cases. It is possible to turn it off by setting some properties in `host.json`.
    All of the options for this can be found in the *Further reading* section, at
    the end of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at some of the advantages of developing functionality
    with Serverless Azure Functions. You can use it as a guideline for checking the
    different types of triggers that are available in Azure Functions and for planning
    how to monitor them. We also saw how to program and maintain Azure functions.
    Finally, we looked at an example of an architecture where you connect multiple
    functions to avoid pooling data and to enable concurrent processing.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will analyze the concept of design patterns, learn why
    they are so useful, and learn about some of their common patterns.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are Azure Functions?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the programming options for Azure Functions?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the plans that can be used with Azure Functions?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you deploy Azure Functions with Visual Studio?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What triggers can you use to develop Azure Functions?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between Azure Functions v1 and v2?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How does Application Insights help us maintain and monitor Azure Functions?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want to learn more when it comes to creating Azure Functions, check
    out the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Azure Functions scale and hosting: [https://docs.microsoft.com/en-us/azure/azure-functions/functions-scale](https://docs.microsoft.com/en-us/azure/azure-functions/functions-scale)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Azure Functions - Essentials [Video]* by Praveen Kumar Sreeram: [https://www.packtpub.com/virtualization-and-cloud/azure-functions-essentials-video](https://www.packtpub.com/virtualization-and-cloud/azure-functions-essentials-video)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Introducing Azure Functions 2.0: [https://azure.microsoft.com/en-us/blog/introducing-azure-functions-2-0/](https://azure.microsoft.com/en-us/blog/introducing-azure-functions-2-0/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An overview of Azure Event Grid: [https://azure.microsoft.com/en-us/resources/videos/an-overview-of-azure-event-grid/](https://azure.microsoft.com/en-us/resources/videos/an-overview-of-azure-event-grid/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Timer trigger for Azure Functions: [https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-timer](https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-timer)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Application insights section from the book, *Azure for Architects* by Ritesh
    Modi: [https://subscription.packtpub.com/book/virtualization_and_cloud/9781788397391/12/ch12lvl1sec95/application-insights](https://subscription.packtpub.com/book/virtualization_and_cloud/9781788397391/12/ch12lvl1sec95/application-insights)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Monitoring Azure Functions using Application Insights section from the book, *Azure
    Serverless Computing Cookbook* by Praveen Kumar Sreeram: [https://subscription.packtpub.com/book/virtualization_and_cloud/9781788390828/6/06lvl1sec34/monitoring-azure-functions-using-application-insights](https://subscription.packtpub.com/book/virtualization_and_cloud/9781788390828/6/06lvl1sec34/monitoring-azure-functions-using-application-insights)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Get started with Azure Queue storage using .NET: [https://docs.microsoft.com/en-us/azure/storage/queues/storage-dotnet-how-to-use-queues](https://docs.microsoft.com/en-us/azure/storage/queues/storage-dotnet-how-to-use-queues)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Azure Functions triggers and bindings concepts: [https://docs.microsoft.com/en-us/azure/azure-functions/functions-triggers-bindings](https://docs.microsoft.com/en-us/azure/azure-functions/functions-triggers-bindings)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Azure Queue storage bindings for Azure Functions: [https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-storage-queue](https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-storage-queue)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
