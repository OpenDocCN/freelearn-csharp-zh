["```cs\n// code removed for brevity\nif (startupMode == \"OnPremises\")\n{\n}\nelse\n{\n  var storage = builder.AddAzureStorage(\"storage\");\n  var botQueue = storage.AddQueues(\"botqueue\");\n}\n```", "```cs\nstring botLoop =\n  builder.Configuration.GetSection(\"Bot\")[\"Loop\"] ??\n    \"false\";\nstring botDelay =\n  builder.Configuration.GetSection(\"Bot\")[\"Delay\"] ??\n    \"1000\";\n// code removed for brevity\nbuilder.AddProject<Projects.Codebreaker_BotQ>(\"bot\")\n  .WithReference(insights)\n.WithReference(botQueue)\n  .WithReference(gameAPIs)\n  .WithEnvironment(\"Bot__Loop\", botLoop)\n  .WithEnvironment(\"Bot__Delay\", botDelay);\n```", "```cs\n{\n  // configuration removed for brevity\n  \"Bot\": {\n    \"Loop\": true,\n    \"Delay\": 2000\n  }\n}\n```", "```cs\npublic record class BotMessage(\n  int Count, int Delay, int ThinkTime);\n```", "```cs\n// code removed for brevity\npublic class BotQueueClientOptions\n{\n  public bool Loop { get; set; } = false;\n  public int Delay { get; set; } = 1000;\n}\n```", "```cs\npublic class BotQueueClient(\n  QueueServiceClient client,\n  CodebreakerTimer timer,\n  ILogger<BotQueueClient> logger,\n  IOptions<BotQueueClientOptions> options)\n{\n// code removed for brevity\n```", "```cs\npublic async Task RunAsync()\n{\n  var queueClient = client.GetQueueClient(«botqueue»);\n  await queueClient.CreateIfNotExistsAsync();\n  var deadLetterClient = client.GetQueueClient(\n    «dead-letter»);\n  await deadLetterClient.CreateIfNotExistsAsync();\n  bool repeat = options.Value.Loop;\n  do\n  {\n    await ProcessMessagesAsync(\n    queueClient, deadLetterClient);\n    await Task.Delay(options.Value.Delay);\n  } while (repeat);\n}\n// code removed for brevity\n```", "```cs\nprivate async Task ProcessMessagesAsync(\n  QueueClient queueClient,\n  QueueClient deadLetterClient)\n{\n  QueueProperties properties =\n    await queueClient.GetPropertiesAsync();\n  if (properties.ApproximateMessagesCount > 0)\n  {\n    QueueMessage[] messages =\n      await queueClient.ReceiveMessagesAsync();\n    foreach (var encodedMessage in messages)\n    {\n      if (encodedMessage.DequeueCount > 3)\n      {\n        await deadLetterClient.SendMessageAsync(\n          encodedMessage.MessageText);\n        await queueClient.DeleteMessageAsync(\n          encodedMessage.MessageId,\n          encodedMessage.PopReceipt);\n        continue;\n      }\n      byte[] bytes = Convert.FromBase64String(\n        encodedMessage.MessageText);\n      string message = Encoding.UTF8.GetString(bytes);\n      var botMessage =\n        JsonSerializer.Deserialize<BotMessage>(message);\n      timer.Start(\n        botMessage.Delay,\n        botMessage.Count,\n        botMessage.ThinkTime);\n      await queueClient.DeleteMessageAsync(\n        encMessage.MessageId, encMessage.PopReceipt);\n    }\n  }\n}\n// code removed for brevity\n```", "```cs\npublic static void AddApplicationServices(this IHostApplicationBuilder builder)\n{\n  builder.AddAzureQueueClient(\"botqueue\");\n  builder.Services.AddScoped<BotQueueClient>();\n  var botConfig = builder.Configuration.GetSection(\"Bot\");\nbuilder.Services.Configure<BotQueueClientOptions>(\n    section);\n  builder.Services.AddScoped<CodebreakerTimer>();\n  builder.Services.AddScoped<CodebreakerGameRunner>();\n  builder.Services.AddSingleton<IGamesClient,\n    GrpcGamesClient>()\n    .AddGrpcClient<GrpcGame.GrpcGameClient>(\n      client =>\n      {\n        client.Address = new Uri(\"https://gameapis\");\n      });\n}\n```", "```cs\n{\n  \"Count\": 3,\n  \"Delay\": 5,\n  \"ThinkTime\": 1\n}\n```", "```cs\nvar eventHub =\n  builder.AddAzureEventHubs(\"codebreakerevents\")\n    .AddEventHub(\"games\");\n// code removed for brevity\n```", "```cs\nvar gameAPIs =\nbuilder.AddProject<Projects.Codebreaker_GameAPIs>(\n    \"gameapis\")\n    .WithExternalHttpEndpoints()\n    .WithReference(cosmos)\n    .WithReference(redis)\n    .WithReference(insights)\n    .WithReference(eventHub)\n    .WithEnvironment(\"DataStore\", dataStore);\n```", "```cs\n  builder.AddAzureEventHubProducerClient(\n    \"codebreakerevents\",settings =>\n    {\nsettings.EventHubName = \"games\";\n    });\n```", "```cs\npublic class EventHubReportProducer(\n  EventHubProducerClient producerClient,\n  ILogger<EventHubLiveReportClient> logger) :\n  IGameReport\n{\n  public async Task ReportGameEndedAsync(\n    GameSummary game,\n    CancellationToken cancellationToken = default)\n  {\n    var data = BinaryData.FromObjectAsJson(game);\n    await producerClient.SendAsync(\n      [ new EventData(data) ],\n      cancellationToken);\n    // code removed for brevity\n  }\n}\n```", "```cs\ndotnet new webapi -minimal -o Codebreaker.Ranking\n```", "```cs\nvar storage = builder.AddAzureStorage(\"storage\");\nvar blob = storage.AddBlobs(\"checkpoints\");\nvar live =\n  builder.AddProject<Projects.Codebreaker_Live>(\"live\")\n  .WithExternalHttpEndpoints()\n  .WithReference(insights)\n  .WithReference(eventHub)\n  .WithReference(signalR);\nbuilder.AddProject<Projects.Codebreaker_Ranking>(\"ranking\")\n  .WithExternalHttpEndpoints()\n  .WithReference(cosmos)\n  .WithReference(insights)\n  .WithReference(eventHub)\n  .WithReference(blob);\n// code removed for brevity\n```", "```cs\npublic static void AddApplicationServices(this IHostApplicationBuilder builder)\n{\n  builder.Services.AddSignalR()\n    .AddMessagePackProtocol()\n    .AddNamedAzureSignalR(\"signalr\");\n   builder.AddAzureEventHubConsumerClient(\"codebreakerevents\",\n  settings =>\n  {\nsettings.EventHubName = \"games\";\n  });\n}\n```", "```cs\npublic class StreamingLiveHub(\n  EventHubConsumerClient consumerClient,\n  ILogger<StreamingLiveHub> logger) : Hub\n{\n  // code removed for brevity\n```", "```cs\npublic async IAsyncEnumerable<GameSummary>\n  SubscribeToGameCompletions(\n    string gameType,\n    [EnumeratorCancellation] CancellationToken\n      cancellationToken)\n{\n  await foreach (PartitionEvent ev in\n    consumerClient.ReadEventsAsync(cancellationToken))\n  {\n    GameSummary gameSummary;\n    try\n    {\n      logger.ProcessingGameCompletionEvent();\n      gameSummary = ev.Data.EventBody\n        .ToObjectFromJson<GameSummary>();\n    }\n    catch (Exception ex)\n    {\n      logger.ErrorProcessingGameCompletionEvent(\n        ex, ex.Message);\n      continue;\n    }\n      if (gameSummary.GameType == gameType)\n      {\n        yield return gameSummary;\n      }\n      else\n      {\n        continue;\n      }\n    }\n  }\n```", "```cs\napp.MapHub<LiveHub>(\"/livesubscribe\");\napp.MapHub<StreamingLiveHub>(\"/streaminglivesubscribe\");\n```", "```cs\npublic async Task SubscribeToGame(string gameType, CancellationToken cancellationToken = default)\n{\n  if (_hubConnection is null) throw new InvalidOperationException(\"Start a connection first!\");\n  try\n  {\n    await foreach (GameSummary summary in\n      _hubConnection.StreamAsync<GameSummary>(\n        \"SubscribeToGameCompletions\",\n        gameType,\n        cancellationToken))\n    {\n      string status = summary.IsVictory ? \"won\" : \"lost\";\n      Console.WriteLine($\"Game {summary.Id} {status} \" +\n        $\"by {summary.PlayerName} after \" +\n        $\"{summary.Duration:g} with \" +\n        $\"{summary.NumberMoves} moves\");\n    }\n  }\n  catch (HubException ex)\n  {\n    logger.LogError(ex, ex.Message);\n    throw;\n  }\n  catch (OperationCanceledException ex)\n  {\n    logger.LogWarning(ex.Message);\n  }\n}\n```", "```cs\npublic static void AddApplicationServices(this IHostApplicationBuilder builder)\n{\n  // code removed for brevity\n  builder.AddKeyedAzureBlobClient(\"checkpoints\");\n  builder.AddAzureEventProcessorClient(\"codebreakerevents\",\n    settings =>\n    {\n      settings.EventHubName = \"games\";\n      settings.BlobClientServiceKey = \"checkpoints\";\n    });\n  builder.Services.AddDbContextFactory<RankingsContext>(\n    options =>\n    {\n      string connectionString =\n        builder.Configuration.GetConnectionString(\n          \"codebreakercosmos\") ??\n          throw new InvalidOperationException(\n            \"Could not read the Cosmos connection-string\");\n      options.UseCosmos(connectionString, \"codebreaker\");\n    });\n  builder.EnrichCosmosDbContext<RankingsContext>();\n  builder.Services\n    .AddSingleton<IGameSummaryEventProcessor,\n      GameSummaryEventProcessor>();}\n```", "```cs\npublic class GameSummaryEventProcessor(\n  EventProcessorClient client,\n  IDbContextFactory<RankingsContext> factory,\n  ILogger<GameSummaryEventProcessor> logger)\n{\n  public async Task StartProcessingAsync(\n    CancellationToken = default)\n  {\n    // code removed for brevity\n  }\n  public Task StopProcessingAsync(\n    CancellationToken cancellationToken = default)\n  {\n  }\n}\n```", "```cs\npublic async Task StartProcessingAsync(CancellationToken cancellationToken = default)\n{\n  // code removed for brevity\n  client.ProcessEventAsync += async (args) =>\n  {\n    GameSummary summary = args.Data.EventBody\n      .ToObjectFromJson<GameSummary1>();\n    using var context = await factory.CreateDbContextAsync(\n      cancellationToken);\n    await context.AddGameSummaryAsync(summary,\n      cancellationToken);\n    await args.UpdateCheckpointAsync(cancellationToken);\n  };\n  client.ProcessErrorAsync += (args) =>\n  {\n    logger.LogError(args.Exception,\n      \"Error processing event, {error}\",\n      args.Exception.Message);\n    return Task.CompletedTask;\n  };\n  await client.StartProcessingAsync(cancellationToken);\n}\n```", "```cs\nvar kafka = builder.AddKafka(\"kafkamessaging\");\n// code removed for brevity\nvar gameAPIs = builder.AddProject<Projects.Codebreaker_GameAPIs>(\"gameapis\")\n  .WithExternalHttpEndpoints()\n  .WithReference(sqlServer)\n  .WithReference(redis)\n  .WithReference(kafka)\n  .WithEnvironment(\"DataStore\", dataStore)\n  .WithEnvironment(\"StartupMode\", startupMode);\n  builder.AddProject<Projects.Codebreaker_Ranking>(\"ranking\")\n  .WithExternalHttpEndpoints()\n  .WithReference(cosmos)\n  .WithReference(kafka)\n  .WithEnvironment(\"StartupMode\", startupMode);\n```", "```cs\npublic class KafkaGameReportProducer(\n  IProducer<string, string> producerClient,\n  ILogger<KafkaLiveReportProducer> logger)\n  : IGameReport\n{\n  public async Task ReportGameEndedAsync(\n    GameSummary game,\n    CancellationToken cancellationToken = default)\n  {\n    Message<string, string> message = new()\n    {\n      Key = game.Id.ToString(),\n      Value = JsonSerializer.Serialize(game)\n};\n    string[] topics = [\"ranking\", \"live\"];\n    foreach (var topic in topics)\n    {\n      _ = producerClient.ProduceAsync(topic, message,\n        cancellationToken);\n    }\n    producerClient.Flush(TimeSpan.FromSeconds(5));\n    logger.GameCompletionSent(game.Id, \"Kafka\");\n    return Task.CompletedTask;\n  }\n}\n```", "```cs\n// code removed for brevity\nstring? mode = builder.Configuration[\"StartupMode\"];\nif (mode == \"OnPremises\")\n{\n  builder.AddKafkaProducer<string, string>(\n    \"kafkamessaging\", settings =>\n  {\n    settings.Config.AllowAutoCreateTopics = true;\n  });\n  builder.Services.AddSingleton<IGameReport,\n    KafkaGameReportProducer>();\n}\n```", "```cs\npublic class GameSummaryKafkaConsumer(\n  IConsumer<string, string> kafkaClient,\n  IDbContextFactory<RankingsContext> factory,\n  ILogger<GameSummaryEventProcessor> logger)\n  : IGameSummaryProcessor\n{\n  public async Task StartProcessingAsync(\n    CancellationToken cancellationToken = default)\n  {\n    kafkaClient.Subscribe(\"ranking\");\n    try\n    {\n      while (!cancellationToken.IsCancellationRequested)\n      {\n        try\n        {\n          var result = kafkaClient.Consume(\n            cancellationToken);\n          var value = result.Message.Value;\n          var summary =\n            JsonSerializer.Deserialize<GameSummary>(value);\n          // code removed for brevity\n          using var context = await\n            factory.CreateDbContextAsync(\n              cancellationToken);\n          await context.AddGameSummaryAsync(\n            summary, cancellationToken);\n        }\n        catch (ConsumeException ex) when\n          (ex.HResult == -2146233088)\n        {\n          logger.LogWarning(\"Consume exception {Message}\",\n            ex.Message);\n          await Task.Delay(TimeSpan.FromSeconds(10));\n        }\n      }\n    }\n  }\n}\n```", "```cs\nstring? mode = builder.Configuration[\"StartupMode\"];\nif (mode == \"OnPremises\")\n{\n  builder.AddKafkaConsumer<string, string>(\n    \"kafkamessaging\", settings =>\n  {\n    settings.Config.GroupId = \"Ranking\";\n  };\n  builder.Services.AddSingleton<IGameSummaryProcessor,\n    GameSummaryKafkaConsumer>();\n}\n```"]