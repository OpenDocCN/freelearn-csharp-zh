- en: Chapter 10. Working with External Resource Files and Devices
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章. 与外部资源文件和设备协同工作
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Loading external resource files – using Unity Default Resources
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载外部资源文件 - 使用Unity默认资源
- en: Loading external resource files – by downloading files from the Internet
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载外部资源文件 - 通过从互联网下载文件
- en: Loading external resource files – by manually storing files in the Unity Resources
    folder
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载外部资源文件 - 通过手动将文件存储在Unity资源文件夹中
- en: Saving and loading player data – using static properties
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保存和加载玩家数据 - 使用静态属性
- en: Saving and loading player data – using PlayerPrefs
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保存和加载玩家数据 - 使用PlayerPrefs
- en: Saving screenshots from the game
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从游戏中保存截图
- en: Setting up a leaderboard using PHP/MySQL
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用PHP/MySQL设置排行榜
- en: Loading game data from a text file map
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从文本文件地图加载游戏数据
- en: Managing Unity project code using Git version control and GitHub hosting
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Git版本控制和GitHub托管管理Unity项目代码
- en: Publishing for multiple devices via Unity Cloud
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过Unity Cloud发布到多个设备
- en: Introduction
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: For some projects, it works fine to use the **Inspector** window to manually
    assign imported assets to the component slots, and then build and play the game
    with no further changes. However, there are also many times when external data
    of some kind can add flexibility and features to a game. For example, it might
    add updateable or user-editable content; it can allow memory of user preferences
    and achievements between scenes, and even game-playing sessions. Using code to
    read local or Internet file contents at runtime can help file organization and
    separation of tasks between game programmers and the content designers. Having
    an arsenal of different assets and long-term game memory techniques means providing
    a wide range of opportunities to deliver a rich experience to players and developers
    alike.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于某些项目，使用**检查器**窗口手动将导入的资产分配到组件槽位，然后构建并播放游戏，无需进一步更改即可正常工作。然而，也有很多时候，某种外部数据可以为游戏增加灵活性和功能。例如，它可能添加可更新或用户可编辑的内容；它可以使用户偏好和成就之间的场景，甚至游戏会话的记忆；使用代码在运行时读取本地或互联网文件内容可以帮助文件组织和分离游戏程序员和内容设计师之间的任务。拥有不同类型的资产和长期游戏记忆技术意味着为玩家和开发者提供广泛的机会，以提供丰富的体验。
- en: The big picture
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 整体概念
- en: Before getting on with the recipes, let's step back and have a quick review
    of the role of the asset files and the Unity game building and running process.
    The most straightforward way to work with assets is to import them into a Unity
    project, use the **Inspector** window to assign the assets to the components in
    the **Inspector**, and then build and play the game.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续介绍食谱之前，让我们退后一步，快速回顾一下资产文件和Unity游戏构建及运行过程的作用。与资产最直接的工作方式是将它们导入Unity项目，使用**检查器**窗口将资产分配给**检查器**中的组件，然后构建并播放游戏。
- en: '![The big picture](img/1362OT_10_01.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![整体概念图](img/1362OT_10_01.jpg)'
- en: Standalone executables offer another possible workflow, which is the adding
    of files into the `Resources` folder of the game after it has been built. This
    will support game media asset developers being able to provide the final version
    of assets after development and building has been completed.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 独立的可执行文件提供另一种可能的流程，即在游戏构建完成后，将文件添加到游戏的`Resources`文件夹中。这将支持游戏媒体资产开发者能够在开发和构建完成后提供资产的最终版本。
- en: However, another option is to use the `WWW` class to dynamically read assets
    from the web at runtime; or perhaps, for communication with a high score or multiplayer
    server, and sending and receiving information and files.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，另一种选择是使用`WWW`类在运行时从网络上动态读取资产；或者，也许是为了与高分或多人游戏服务器通信，发送和接收信息和文件。
- en: '![The big picture](img/1362OT_10_02.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![整体概念图](img/1362OT_10_02.jpg)'
- en: When loading/saving data either locally or via the web interface, it is important
    to keep in mind the data types that can be used. When writing C# code, our variables
    can be of any type permitted by the language, but when communicated by the web
    interface, or to a local storage using Unity's `PlayerPrefs` class, we are restricted
    in the types of data that we can work with. Unity's `WWW` class permits three
    file types (text files, binary audio clips, and binary image textures), but, for
    example, for 2D UIs we sometimes need Sprite images and not Textures, so that
    we have provided in this chapter a C# method to create a Sprite from a Texture.
    When using the `PlayerPrefs` class, we are limited to saving and loading integers,
    floats, and strings. Similarly, when communicating with a web server using the
    URL encoded data, we are restricted to whatever we can place into strings (we
    include a PHP web-based high score recipe, where the user scores can be loaded
    and saved via such a method).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Finally, managing Unity project source code with an online **Distributed Version
    Control System** (**DVCS**) like Git and GitHub opens up new workflows for the
    continuous integration of code updates to the working builds. Unity Cloud will
    *pull* the updated source code projects from your online repository, and then
    build the game for designated versions of Unity and the deployment devices. Developers
    will get e-mails to confirm the build success, or to list the reasons for any
    build failure. The final two recipes in this chapter show you how to manage your
    code with Git and GitHub, and use Unity Cloud to build projects for multiple devices.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Acknowledgement**: Thanks to the following for publishing *Creative Commons
    (BY 3.0)* licensed icons: **Elegant Themes**, **Picol**, **Freepik**, **Yannick**,
    **Google**, [www.flaticon.com](http://www.flaticon.com).'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Loading external resource files – using Unity Default Resources
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will load an external image file, and display it on the screen,
    using the **Unity Default Resources** file (a library created at the time the
    game was compiled).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This method is perhaps the simplest way to store and read the external resource
    files. However, it is only appropriate when the contents of the resource files
    will not change after compilation, since the contents of these files are combined
    and compiled into the `resources.assets` file.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: The `resources.assets` file can be found in the `Data` folder for a compiled
    game.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '![Loading external resource files – using Unity Default Resources](img/1362OT_10_03.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the `1362_10_01` folder, we have provided an image file, a text file, and
    an audio file in the `.ogg` format for this recipe:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '`externalTexture.jpg`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cities.txt`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`soundtrack.ogg`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To load the external resources by Unity Default Resources, do the following:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Create a new 3D Unity project.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Project** window, create a new folder and rename it `Resources`.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the `externalTexture.jpg` file and place it in the `Resources` folder.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a 3D cube.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following C# Script to your cube:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Play the scene. The texture will be loaded and displayed on the screen.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you have another image file, put a copy into the `Resources` folder. Then,
    in the **Inspector** window, change the public file name to the name of your image
    file and play the scene again. The new image will now be displayed.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Resources.Load(fileName)` statement makes Unity look inside its compiled
    project data file called `resources.assets` for the contents of a file named `externalTexture`.
    The contents are returned as a texture image, which is stored into the `externalImage`
    variable. The last statement in the `Start()` method sets the texture of the GameObject
    the script has been attached to our `externalImage` variable.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Note: The filename string passed to `Resources.Load()` does *not* include the
    file extension (such as `.jpg` or `.txt`).'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are some details that you don't want to miss.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Loading text files with this method
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can load the external text files using the same approach. The private variable
    needs to be a string (to store the text file contents). The `Start()` method uses
    a temporary `TextAsset` object to receive the text file contents, and the text
    property of this object contains the string contents that are to be stored in
    the private variable `textFileContents`:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Finally, this string is displayed on the console.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '![Loading text files with this method](img/1362OT_10_04.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
- en: Loading and playing audio files with this method
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can load external audio files using the same approach. The private variable
    needs to be an `AudioClip`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: See also
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following recipes in this chapter for more information:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '*Loading external resource files – by manually storing files in Unity Resources
    folder*'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Loading external resource files – by downloading files from the Internet*'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading external resource files – by downloading files from the Internet
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One way to store and read a text file data is to store the text files on the
    Web. In this recipe, the contents of a text file for a given URL are downloaded,
    read, and then displayed.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, you need to have access to the files on a web server. If you
    run a local web server such as **Apache**, or have your own web hosting, then
    you can use the files in the `1362_10_01` folder and the corresponding URL.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: 'Otherwise, you may find the following URLs useful; since they are the web locations
    of an image file (a Packt Publishing logo) and a text file (an ASCII-art badger
    picture):'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[www.packtpub.com/sites/default/files/packt_logo.png](http://www.packtpub.com/sites/default/files/packt_logo.png)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[www.ascii-art.de/ascii/ab/badger.txt](http://www.ascii-art.de/ascii/ab/badger.txt)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To load external resources by downloading them from the Internet, do the following:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: In a 2D project, create a new `RawImage` UI GameObject.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following C# script class as a component of your image object:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下C#脚本类作为图像对象的组件添加：
- en: '[PRE3]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Play the scene. Once downloaded, the contents of the image file will be displayed:![How
    to do it...](img/1362OT_10_05.jpg)
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 播放场景。一旦下载完成，图像文件的内容将显示出来：![如何操作...](img/1362OT_10_05.jpg)
- en: How it works...
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Note the need to use the `UnityEngine.UI` package for this recipe.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 注意需要使用`UnityEngine.UI`包来执行此食谱。
- en: When the game starts, our `Start()` method starts the **coroutine** method called
    `LoadWWW()`. A coroutine is a method that can keep on running in the background
    without halting or slowing down the other parts of the game and the frame rate.
    The `yield` statement indicates that once a value can be returned for `imageFile`,
    the remainder of the method can be executed—that is, until the file has finished
    downloading, no attempt should be made to extract the texture property of the
    `WWW` object variable.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 当游戏开始时，我们的`Start()`方法启动名为`LoadWWW()`的**协程**方法。协程是一种可以在后台持续运行而不会停止或减慢游戏其他部分和帧率的函数。`yield`语句表示一旦可以为`imageFile`返回一个值，方法的其他部分就可以执行——也就是说，直到文件下载完成，不应尝试提取`WWW`对象变量的纹理属性。
- en: Once the image data has been loaded, execution will progress past the `yield`
    statement. Finally, the `texture` property of the `RawImage` GameObject, to which
    the script is attached, is changed to the image data that is downloaded from the
    Web (inside the `texture` variable of the `www` object).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦图像数据被加载，执行将超过`yield`语句。最后，附加脚本的`RawImage` GameObject的`texture`属性将更改为从Web下载的图像数据（在`www`对象的`texture`变量中）。
- en: There's more...
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There are some details that you don't want to miss.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些细节你不希望错过。
- en: Converting from Texture to Sprite
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从纹理转换为精灵
- en: 'While in the recipe we used a UI **RawImage**, and so could use the downloaded
    **Texture** directly, there may be times when we wish to work with a **Sprite**
    rather than a **Texture**. Use this method to create a **Sprite** object from
    a **Texture**:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在食谱中，我们使用了UI **RawImage**，因此可以直接使用下载的**Texture**，但在某些情况下，我们可能希望使用**Sprite**而不是**Texture**。使用此方法从**Texture**创建**Sprite**对象：
- en: '[PRE4]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Downloading a text file from the Web
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从Web下载文本文件
- en: 'Use this technique to download a text file:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此技术下载文本文件：
- en: '[PRE5]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The WWW class and the resource contents
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: WWW类和资源内容
- en: 'The `WWW` class defines several different properties and methods to allow the
    downloaded media resource file data to be extracted into appropriate variables
    for use in the game. The most useful of these include:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`WWW`类定义了几个不同的属性和方法，允许下载的媒体资源文件数据被提取到适当的变量中，以便在游戏中使用。其中最有用的包括：'
- en: '`.text`: A read-only property, returning the web data as string'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.text`：一个只读属性，返回作为字符串的Web数据'
- en: '`.texture`: A read-only property, returning the web data as a Texture2D image'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.texture`：一个只读属性，返回作为Texture2D图像的Web数据'
- en: '`.GetAudioClip()`: A method that returns the web data as an AudioClip'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.GetAudioClip()`：一个返回作为AudioClip的Web数据的方法'
- en: Note
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information about the Unity `WWW` class visit [http://docs.unity3d.com/ScriptReference/WWW.html](http://docs.unity3d.com/ScriptReference/WWW.html).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于Unity `WWW`类的信息，请访问[http://docs.unity3d.com/ScriptReference/WWW.html](http://docs.unity3d.com/ScriptReference/WWW.html)。
- en: See also
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关链接
- en: 'Refer to the following recipes in this chapter for more information:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 参考本章中的以下食谱以获取更多信息：
- en: '*Loading external resource files – by Unity Default Resources*'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*通过Unity默认资源加载外部资源文件*'
- en: '*Loading external resource files – by manually storing files in the Unity Resources
    folder*'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*加载外部资源文件 – 通过手动将文件存储在Unity资源文件夹中*'
- en: Loading external resource files – by manually storing files in the Unity Resources
    folder
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载外部资源文件 – 通过手动将文件存储在Unity资源文件夹中
- en: At times, the contents of the external resource files may need to be changed
    after the game compilation. Hosting the resource files on the web may not be an
    option. There is a method of manually storing and reading files from the `Resources`
    folder of the compiled game, which allows for those files to be changed after
    the game compilation.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，外部资源文件的内容可能需要在游戏编译后进行更改。在Web上托管资源文件可能不是一个选项。有一种手动存储和从编译后的游戏`Resources`文件夹中读取文件的方法，这使得这些文件在游戏编译后可以更改。
- en: Note
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This technique only works when you compile to a Windows or Mac stand alone executable—it
    will not work for Web Player builds, for example.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 此技术仅在将项目编译为Windows或Mac独立可执行文件时才有效——例如，对于Web Player构建，它将不起作用。
- en: Getting ready
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The `1362_10_01` folder provides the texture image that you can use for this
    recipe:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '`externalTexture.jpg`'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To load external resources by manually storing the files in the `Resources`
    folder, do the following:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: In a 2D project, create a new Image UI GameObject.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following C# script class as a component of your Image object:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Build your (Windows or Mac) standalone executable.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the `externalTexture.jpg` image to your standalone's `Resources` folder.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You will need to place the files in the `Resources` folder manually after every
    compilation.
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When you create a Windows or Linux standalone executable, there is also a _`Data`
    folder, created with the executable application file. The `Resources` folder can
    be found inside this `Data` folder.
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A Mac standalone application executable looks like a single file, but it is
    actually a MacOS `package` folder. Right-click on the executable file and select
    **Show Package Contents**. You will then find the standalone's `Resources` folder
    inside the `Contents` folder.
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run your standalone game application and the image will be displayed:![How to
    do it...](img/1362OT_10_06.jpg)
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Note the need to use the `System.IO` and `UnityEngine.UI` packages for this
    recipe.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: When the executable runs, the `WWW` object spots that the URL starts with the
    word file, and so Unity attempts to find the external resource file in its `Resources`
    folder, and then load its contents.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are some details that you don't want to miss.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding cross-platform problems with Path.Combine() rather than "/" or "\"
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The filepath folder separator character is different for Windows and Mac file
    systems (backslash (`\`) for Windows, forward slash (`/`) for the Mac). However,
    Unity knows which kind of standalone you are compiling your project into, therefore
    the `Path.Combine()` method will insert the appropriate separator slash character
    form the file URL that is required.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following recipes in this chapter for more information:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '*Loading external resource files – by Unity Default Resources*'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Loading external resource files – by downloading files from the Internet*'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving and loading player data – using static properties
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Keeping track of the player's progress and user settings during a game is vital
    to give your game a greater feel of depth and content. In this recipe, we will
    learn how to make our game remember the player's score between the different levels
    (scenes).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have included a complete project in a Unity package named `game_HigherOrLower`
    in the `1362_10_04` folder. In order to follow this recipe, we will import this
    package as the starting point.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To save and load player data, follow these steps:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: Create a new 2D project and import the `game_HigherOrLower` package.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add each of the scenes to the build in the sequence (`scene0_mainMenu`, then
    `scene1_gamePlaying`, and so on).
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make yourself familiar with the game by playing it a few times and examining
    the contents of the scenes. The game starts on the `scene0_mainMenu` scene, inside
    the `Scenes` folder.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过多次玩游戏并检查场景内容，让自己熟悉游戏。游戏从`scene0_mainMenu`场景开始，位于`Scenes`文件夹内。
- en: 'Let''s create a class to store the number of correct and incorrect guesses
    made by the user. Create a new C# script called `Player` with the following code:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个类来存储用户做出的正确和错误猜测的数量。创建一个新的C#脚本名为`Player`，代码如下：
- en: '[PRE7]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the lower-left corner of the `scene0_mainMenu` scene, create a UI Text GameObject
    named **Text – score**, containing the placeholder text **Score: 99 / 99**.![How
    to do it...](img/1362OT_10_07.jpg)'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在`scene0_mainMenu`场景的左下角，创建一个名为**Text – score**的UI Text GameObject，包含占位文本**Score:
    99 / 99**。![如何操作...](img/1362OT_10_07.jpg)'
- en: 'Next, attach the following C# script to UI GameObject **Text – score**:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将以下C#脚本附加到UI GameObject **Text – score**：
- en: '[PRE8]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the `scene2_gameWon` scene, attach the following C# script to the Main Camera:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`scene2_gameWon`场景中，将以下C#脚本附加到主相机：
- en: '[PRE9]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the `scene3_gameLost` scene, attach the following C# script to the Main
    Camera:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`scene3_gameLost`场景中，将以下C#脚本附加到主相机：
- en: '[PRE10]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Save your scripts and play the game. As you progress from level (scene) to level,
    you will find that the score and player's name are remembered, until you quit
    the application.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存你的脚本并玩游戏。当你从关卡（场景）进步到下一个关卡时，你会发现分数和玩家名称被记住，直到你退出应用程序。
- en: How it works...
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `Player` class uses static (class) properties `scoreCorrect` and `scoreIncorrect`
    to store the current total number of correct and incorrect guesses. Since these
    are public static properties, any object from any scene can access (set or get)
    these values, since the static properties are remembered from scene to scene.
    This class also provides the public static method called `ZeroTotals()` that resets
    both the values to zero.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`Player`类使用静态（类）属性`scoreCorrect`和`scoreIncorrect`来存储当前正确和错误猜测的总数。由于这些是公共静态属性，任何场景中的任何对象都可以访问（设置或获取）这些值，因为静态属性在场景之间是记忆的。此类还提供了一个名为`ZeroTotals()`的公共静态方法，可以将这两个值重置为零。'
- en: When the `scene0_mainMenu` scene is loaded, all the GameObjects with scripts
    will have their `Start()` methods executed. The UI Text GameObject called **Text
    – score** has an instance of the `UpdateScoreText` class as s script component,
    so that the scripts `Start()` method will be executed, which retrieves the correct
    and incorrect totals from the `Player` class, creates the `scoreMessage` string
    about the current score, and updates the text property so that the user sees the
    current score.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 当加载`scene0_mainMenu`场景时，所有带有脚本的GameObject将执行它们的`Start()`方法。名为**Text – score**的UI
    Text GameObject有一个`UpdateScoreText`类的实例作为脚本组件，因此脚本`Start()`方法将被执行，它从`Player`类检索正确和错误总数，创建关于当前分数的`scoreMessage`字符串，并更新文本属性，以便用户看到当前分数。
- en: When the game is running and the user guesses correctly (higher), then the `scene2_gameWon`
    scene is loaded. So the `Start()` method, of the `IncrementCorrectScore` script
    component, of the Main Camera in this scene is executed, which adds `1` to the
    `scoreCorrect` variable of the `Player` class.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 当游戏运行且用户猜对（高于）时，则加载场景`scene2_gameWon`。因此，在此场景中主相机的`IncrementCorrectScore`脚本组件的`Start()`方法被执行，它将`Player`类的`scoreCorrect`变量的值增加`1`。
- en: When the game is running and the user guesses wrongly (lower), then scene `scene3_gameLost`
    is loaded. So the `Start()` method, of the `IncrementIncorrectScore` script component,
    of the Main Camera in this scene is executed, which adds `1` to the `scoreIncorrect`
    variable of the `Player` class.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 当游戏运行且用户猜错（低于）时，则加载场景`scene3_gameLost`。因此，在此场景中主相机的`IncrementIncorrectScore`脚本组件的`Start()`方法被执行，它将`Player`类的`scoreIncorrect`变量的值增加`1`。
- en: The next time the user visits the main menu scene, the new values of the correct
    and incorrect totals will be read from the `Player` class, and the UI Text on
    the screen will inform the user of their updated total score for the game.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 下次用户访问主菜单场景时，将从`Player`类读取正确和错误总数的最新值，并且屏幕上的UI Text将通知用户他们的游戏更新总分。
- en: There's more...
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: There are some details that you don't want to miss.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些细节你不希望错过。
- en: Hiding the score before the first attempt completed
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在第一次尝试完成之前隐藏分数
- en: 'Showing a score of zero out of zero isn''t very professional. Let''s add some
    logic so that the score is only displayed (a non-empty string) if the total number
    of attempts is greater than zero:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 显示零分并不太专业。让我们添加一些逻辑，以便只有在总尝试次数大于零时才显示分数（非空字符串）：
- en: '[PRE11]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: See also
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'Refer to the following recipe in this chapter for more information:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 参考本章中的以下配方以获取更多信息：
- en: '*Saving and loading player data – using PlayerPrefs*'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用PlayerPrefs保存和加载玩家数据*'
- en: Saving and loading player data – using PlayerPrefs
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用PlayerPrefs保存和加载玩家数据
- en: While the previous recipe illustrates how the static properties allow a game
    to remember values between different scenes, these values are forgotten once the
    game application has quit. Unity provides the `PlayerPrefs` feature to allow a
    game to store and retrieve data, between the different game playing sessions.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然前面的配方说明了静态属性如何允许游戏在不同的场景之间记住值，但这些值一旦游戏应用程序退出就会被遗忘。Unity提供了`PlayerPrefs`功能，允许游戏在不同的游戏会话之间存储和检索数据。
- en: '![Saving and loading player data – using PlayerPrefs](img/1362OT_10_08.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![使用PlayerPrefs保存和加载玩家数据](img/1362OT_10_08.jpg)'
- en: Getting ready
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'This recipe builds upon the previous recipe. In case you haven''t completed
    the previous recipe, we have included a `Unity` package named `game_scoreStaticVariables`
    in the the `1362_10_05` folder. In order to follow this recipe using this package,
    you must do the following:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方基于前面的配方。如果你还没有完成前面的配方，我们在`1362_10_05`文件夹中包含了一个名为`game_scoreStaticVariables`的`Unity`包。为了使用这个包来遵循这个配方，你必须执行以下操作：
- en: Create a new 2D project and import the `game_HigherOrLower` package.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的2D项目并导入`game_HigherOrLower`包。
- en: Add each of the scenes to the build in the sequence (`scene0_mainMenu`, then
    `scene1_gamePlaying`, and so on).
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按顺序将每个场景添加到构建中（`scene0_mainMenu`，然后`scene1_gamePlaying`，依此类推）。
- en: How to do it...
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To save and load the player data using `PlayerPrefs`, follow these steps:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`PlayerPrefs`保存和加载玩家数据，请按照以下步骤操作：
- en: Delete the C# script called `Player`.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除名为`Player`的C#脚本。
- en: 'Edit the C# script called `UpdateScoreText` by replacing the `Start()` method
    with the following:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑名为`UpdateScoreText`的C#脚本，用以下代码替换`Start()`方法：
- en: '[PRE12]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, edit the C# script called `IncrementCorrectScore` by replacing the `Start()`
    method with the following code:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，编辑名为`IncrementCorrectScore`的C#脚本，用以下代码替换`Start()`方法：
- en: '[PRE13]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, edit the C# script called `IncrementIncorrectScore` by replacing the `Start()`
    method with the following code:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，编辑名为`IncrementIncorrectScore`的C#脚本，用以下代码替换`Start()`方法：
- en: '[PRE14]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Save your scripts and play the game. Quit from Unity and then restart the application.
    You will find that the player's name, level, and score are now kept between the
    game sessions.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存你的脚本并玩游戏。退出Unity然后重新启动应用程序。你会发现玩家的名字、等级和分数现在可以在游戏会话之间保持。
- en: How it works...
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: We had no need for the `Player` class, since this recipe uses the built-in runtime
    class called `PlayerPrefs`, provided by Unity.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要`Player`类，因为这个配方使用了Unity提供的内置运行时类`PlayerPrefs`。
- en: Unity's `PlayerPrefs` runtime class is capable of storing and accessing information
    (the string, int, and float variables) in the user's machine. Values are stored
    in a `plist` file (Mac) or the registry (Windows), in a similar way to web browser
    cookies, and therefore, remembered between game application sessions.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: Unity的`PlayerPrefs`运行时类能够在用户的机器上存储和访问信息（字符串、整数和浮点变量）。值存储在`plist`文件（Mac）或注册表（Windows）中，类似于网络浏览器的cookies，因此可以在游戏应用会话之间记住这些值。
- en: Values for the total correct and incorrect scores are stored by the `Start()`
    methods in the `IncrementCorrectScore` and `IncrementIncorrectScore` classes.
    These methods use the `PlayerPrefs.GetInt("<variableName>")` method to retrieve
    the old total, add `1` to it, and then store the incremented total using the `PlayerPrefs.SetInt("<variableName>")`
    method.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 总正确和错误得分的值由`IncrementCorrectScore`和`IncrementIncorrectScore`类中的`Start()`方法存储。这些方法使用`PlayerPrefs.GetInt("<variableName>")`方法检索旧的总数，将其加1，然后使用`PlayerPrefs.SetInt("<variableName>")`方法存储增加后的总数。
- en: These correct and incorrect totals are then read each time the `scene0_mainMenu`
    scene is loaded, and the score totals displayed via the UI Text object on the
    screen.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这些正确和错误的总数将在每次加载`scene0_mainMenu`场景时读取，并通过屏幕上的UI Text对象显示分数总数。
- en: Note
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information on `PlayerPrefs`, see Unity's online documentation at
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于`PlayerPrefs`的信息，请参阅Unity的在线文档：
- en: '[http://docs.unity3d.com/ScriptReference/PlayerPrefs.html](http://docs.unity3d.com/ScriptReference/PlayerPrefs.html).'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following recipe in this chapter for more information:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '*Saving and loading player data – using static properties*'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving screenshots from the game
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to take in-game snapshots, and save them in
    an external file. Better yet, we will make it possible to choose between three
    different methods.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This technique only works when you compile to a Windows or Mac standalone executable—it
    will not work for Web Player builds, for example.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to follow this recipe, please import the `screenshots` package, which
    is available in the `1362_10_06` folder, to your project. The package includes
    a basic terrain, and a camera that can be rotated via mouse.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To save the screenshots from your game, follow these steps:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: Import the `screenshots` package and open the `screenshotLevel` scene.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following C# Script to the Main Camera:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Save your script and attach it to the Main Camera GameObject, by dragging it
    from the **Project** view to the Main Camera GameObject, in the **Hierarchy**
    view.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Access the **Take Screenshot** component. Set **Capt Method** as **Capture Screenshot
    Png**. Change **Capture Screenshot Scale** to **2**.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  id: totrans-203
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want your image file's name to start with something different than `Screenshot`,
    then change it in the **Prefix** field.
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/1362OT_10_09.jpg)'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Play the scene. A new screenshot with twice the original size will be saved
    in your project folder every time you press *P*.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Start()` method creates a Rect object with the screen width and height.
    Each frame the `Update()` methods tests whether the *P* key has been pressed.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: Once the script has detected that the *P* key was pressed, the screen is captured
    and stored as an image file into the same folder where the executable is. In case
    the **Capture Screenshot Png** option is selected, the script will call a built-in
    Unity function called `CaptureScreenshot()`, which is capable of scaling up the
    original screen size (in our case, based on the `Scale` variable of our script).
    If not, the image will be captured by the `ReadPixels` function, encoded to PNG
    or JPG and finally, written via the `WriteAllBytes` function.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: In all cases the file created will have the appropriate "`.png`" or "`.jpg`"
    file extension, to match its image file format.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have included the options using the `ReadPixel` function as a demonstration
    of how to save your images to a disk without using Unity's `CaptureScreenshot()`
    function. One advantage of this method is that it can be adapted to capture and
    save only a portion of the screen. The `captureScreenshotScale` variable from
    our script will not affect screenshots created with the ReadPixel function though.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a leaderboard using PHP/MySQL
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Games are more fun when there is a leaderboard of high scores that the players
    have achieved. Even single player games can communicate to a shared web-based
    leaderboard. This recipe includes both, the client side (Unity) code, as well
    as the web-server side (PHP) scripts to set and get the player scores from a MySQL
    database.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 当玩家达到高分时，排行榜会使游戏更有趣。即使是单人游戏也可以与共享的基于网络的排行榜进行通信。本食谱包括客户端（Unity）代码以及设置和从MySQL数据库获取玩家分数的Web服务器端（PHP）脚本。
- en: '![Setting up a leaderboard using PHP/MySQL](img/1362OT_10_10.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![使用PHP/MySQL设置排行榜](img/1362OT_10_10.jpg)'
- en: Getting ready
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes that you either have your own web hosting, or are running
    a local web server and a database server, such as XAMPP or MAMP. Your web server
    needs to support PHP, and you also need to be able to create the MySQL databases.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱假设您要么有自己的网络托管，要么正在运行本地网络服务器和数据库服务器，例如XAMPP或MAMP。您的网络服务器需要支持PHP，并且您还需要能够创建MySQL数据库。
- en: All the SQL, PHP, and C# scripts for this recipe can be found in the `1362_10_07`
    folder.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱的所有SQL、PHP和C#脚本都可以在`1362_10_07`文件夹中找到。
- en: Since the scene contains several UI elements and the code of the recipe is the
    communication with the PHP scripts and SQL database, in `1362_10_07` folder, we
    have provided a `Unity` package called `PHPMySQLeaderboard`, containing a scene
    with everything set up for the Unity project.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 由于场景包含多个UI元素，而食谱的代码是与PHP脚本和SQL数据库的通信，在`1362_10_07`文件夹中，我们提供了一个名为`PHPMySQLeaderboard`的`Unity`包，其中包含一个为Unity项目设置好的场景。
- en: Note
  id: totrans-220
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you are hosting your leaderboard on a public website, you will change the
    names of the database, database user and password for reasons of security. You
    should also implement some form of secret game code, as described in the *There's
    more…* section.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在公共网站上托管排行榜，出于安全原因，您将更改数据库、数据库用户和密码的名称。您还应该实现某种形式的秘密游戏代码，如*更多内容*部分所述。
- en: How to do it...
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To set up a leaderboard using PHP and MySQL, do the following:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用PHP和MySQL设置排行榜，请执行以下操作：
- en: On your server, create a new MySQL database named `cookbook_highscores`.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的服务器上，创建一个新的MySQL数据库，命名为`cookbook_highscores`。
- en: On your server, create a new database user (username=`cookbook`, password=`cookbook`)
    with full rights to the database that you just created.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的服务器上，创建一个新的数据库用户（用户名=`cookbook`，密码=`cookbook`），并授予对该数据库的完全访问权限。
- en: 'On your server, execute the following SQL to create the database table called
    `score_list`:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的服务器上，执行以下SQL语句以创建名为`score_list`的数据库表：
- en: '[PRE16]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Copy the provided PHP script files to your web server:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将提供的PHP脚本文件复制到您的网络服务器：
- en: '`index.php`'
  id: totrans-229
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`index.php`'
- en: '`scoreFunctions.php`'
  id: totrans-230
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`scoreFunctions.php`'
- en: '`htmlMenu.php`'
  id: totrans-231
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`htmlMenu.php`'
- en: Create a new 2D Unity project and extract the Unity package called `PHPMySQLeaderboard`.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的2D Unity项目，并解压名为`PHPMySQLeaderboard`的Unity包。
- en: Run the provided scene, and click on the buttons to make Unity communicate with
    the PHP scripts that have access to the high score database.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行提供的场景，并点击按钮以使Unity与可以访问高分数据库的PHP脚本进行通信。
- en: How it works...
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The player's scores are stored in a MySQL database. Access to the database is
    facilitated through the PHP scripts provided. In our example, all the PHP scripts
    were placed in the web server root folder for a local Apache webserver. So, the
    scripts are accessed via `http://localhost:8888/`. However, since URL is a public
    string variable, this can be set before running to the location of your server
    and site code.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 玩家的分数存储在MySQL数据库中。通过提供的PHP脚本可以方便地访问数据库。在我们的示例中，所有PHP脚本都放置在本地Apache网络服务器的根目录中。因此，脚本通过`http://localhost:8888/`进行访问。然而，由于URL是一个公开的字符串变量，这可以在运行之前设置为服务器和网站代码的位置。
- en: 'All the access is through the PHP file called `index.php`. There are five actions
    implemented, and each is indicated by adding the action name at the end of the
    URL (this is the `GET HTTP` method, which is sometimes used for web forms. Take
    a look at the address bar of your browser next time you search Google for example).
    The actions and their parameters (if any) are as follows:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 所有访问都通过名为`index.php`的PHP文件进行。实现了五个操作，每个操作都通过在URL末尾添加操作名称来指示（这是`GET HTTP`方法，有时用于网页表单。例如，下次您在Google上搜索时，请查看浏览器的地址栏）。操作及其参数（如果有）如下：
- en: '`action = html`: This action asks for HTML text listing all player scores to
    be returned. This action takes no parameters. It returns: HTML text.'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`action = html`：此操作请求返回列出所有玩家分数的HTML文本。此操作不接受任何参数。它返回：HTML文本。'
- en: '`action = xml`: This action asks for XML text listing all player scores to
    be returned. This action takes no parameters. It returns: XML text.'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`action = reset`: This action asks for a set of default player name and score
    values to replace the current contents of the database table. This action takes
    no argument. It returns: the string `reset`.'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`action = get`: This action asks for the integer score of the named player
    that is to be found. It takes parameters in the form `player = matt`. It returns:
    the score integer.'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`action = set`: This action asks for the provide score of the named player
    to be stored in the database (but only if this new score is greater than the currently
    stored score). It takes parameters in the form `player = matt, score = 101`. It
    returns: the score integer (if the database update was successful), otherwise
    a negative value (to indicate that no update took place).'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are five buttons in the Unity scene (corresponding to the five actions)
    which set up the corresponding action and the parameters to be added to the URL,
    for the next call to the web server, via the `LoadWWW()` method. The `OnClick`
    actions have been set up for each button to call the corresponding methods of
    the `WebLeaderBoard` C# script of the Main Camera.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: There are also three UI Text objects. The first displays the most recent URL
    string sent to the server. The second displays the integer value that was extracted
    from the response message that was received from the server (or a message as "not
    an integer" if some other data was received). The third UI Text object is inside
    a panel, and has been made large enough to display a full, multi-line, text string,
    received from the server (which is stored inside the `textFileContents` variable).
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: The three UI Text objects have been assigned to the public variables of the
    `WebLeaderBoard` C# script for the Main Camera. When the scene first starts, the
    `Start()` method calls the `UpdateUI()` method to update the three text UI elements.
    When any of the buttons are clicked, the corresponding method of the `WebLeaderBoard`
    method is called, which builds the URL string with parameters, and then calls
    the `LoadWWW()` method. This method sends the request to the URL, and waits (by
    virtue of being a coroutine) until a response is received. It then stores the
    content, received in the `textFileContents` variable, and calls the `UpdateUI()`
    method.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following sections will fine-tune and customize this recipe for you:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: Extracting the full leaderboard data as XML for display within Unity
  id: totrans-247
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The XML text that can be retrieved from the PHP web server provides a useful
    method for allowing a Unity game to retrieve the full set of the leaderboard data
    from the database. Then, the leaderboard can be displayed to the user in the Unity
    game (perhaps, in some nice 3D fashion, or through a game-consistent GUI).
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: Using the secret game codes to secure your leaderboard scripts
  id: totrans-249
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Unity and PHP code that is presented illustrates a simple, unsecured web-based
    leaderboard. To prevent players hacking into the board with false scores, it is
    usual to encode some form of secret game code (or key) into the communications.
    Only update requests that include the correct code will actually cause a change
    to the database.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: 'The Unity code will combine the secret key (in this example, the string called
    `harrypotter`) with something related to the communication—for example, the same
    MySQL/PHP leader board may have different database records for different games
    that are identified with a game ID:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The server-side PHP code will receive both the encrypted game code, and also
    the piece of game data that is used to create that encrypted code (in this example,
    the game ID and MD5 hashing function, which is available in both, Unity and in
    PHP). The secret key (`harrypotter`) is used with the game ID to create an encrypted
    code that can be compared with the code received from the Unity game (or whatever
    user agent or browser is attempting to communicate with the leaderboard server
    scripts). The database actions will only be executed if the game code created
    on the server matches that send along with the request for a database action.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: See also
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following recipe for more Information:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: '*Preventing your game from running on unknown servers* in [Chapter 11](ch11.html
    "Chapter 11. Improving Games with Extra Features and Optimization"), *Improving
    Games With Extra Features and Optimization*'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading game data from a text file map
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Rather than, for every level of a game, having to create and place every GameObject
    on the screen by hand, a better approach can be to create the text files of rows,
    and columns of characters, where each character corresponds to the type of GameObject
    that is to be created in the corresponding location. In this recipe, we'll use
    a text file and set of prefab sprites to display a graphical version of a text-data
    file for a screen from the classic game called **NetHack**.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: '![Loading game data from a text file map](img/1362OT_10_11.jpg)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  id: totrans-261
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the `1362_10_08` folder, we have provided the following two files for this
    recipe:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: '`level1.txt` (a text file, representing a level)'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`absurd128.png` (a 128 x 128 sprite sheet for Nethack).'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The level data came from the Nethack Wikipedia page, and the sprite sheet came
    from SourceForge:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: '[http://en.wikipedia.org/wiki/NetHack](http://en.wikipedia.org/wiki/NetHack)'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://sourceforge.net/projects/noegnud/files/tilesets_nethack-3.4.1/absurd%20128x128/](http://sourceforge.net/projects/noegnud/files/tilesets_nethack-3.4.1/absurd%20128x128/)'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that we also included a Unity package with all the prefabs set up, since
    this can be a laborious task.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To load game data from a text file map, do the following:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: Import the text file called `level1.txt`, and the image file called `absurd128.png`.
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select `absurd128.png` in the Inspector, and set **Texture Type** to **Sprite
    (2D/uGUI)**, and **Sprite Mode** to **Multiple**.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit this sprite in the **Sprite Editor**, choosing **Type** as **Grid** and
    **Pixel Size** as `128` x `128`, and apply these settings.![How to do it...](img/1362OT_10_12.jpg)
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Project** panel, click on the right-facing white triangle to *explode*
    the icon, to show all the sprites in this sprite sheet individually.![How to do
    it...](img/1362OT_10_13.jpg)
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the Sprite called `absurd128_175` onto the scene.
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new **Prefab** named `corpse_175` in the **Project** panel, and drag
    onto this blank prefab Sprite `absurd128_175` from the scene. Now, delete the
    sprite instance from the scene. You have now created a prefab containing the Sprite
    `175`.
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Repeat this process for the following sprites (that is, create prefabs for
    each one):'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`floor_848`'
  id: totrans-278
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`corridor_849`'
  id: totrans-279
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`horiz_1034`'
  id: totrans-280
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`vert_1025`'
  id: totrans-281
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`door_844`'
  id: totrans-282
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`potion_675`'
  id: totrans-283
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`chest_586`'
  id: totrans-284
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`alter_583`'
  id: totrans-285
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stairs_up_994`'
  id: totrans-286
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stairs_down_993`'
  id: totrans-287
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wizard_287`'
  id: totrans-288
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Select the **Main Camera** in the Inspector, and ensure that it is set to an
    **Orthographic** camera, sized **20**, with **Clear Flags** as **Solid Color**
    and **Background** as **Black**.
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Attach the following C# code to the Main Camera as the script class called
    `LoadMapFromTextfile`:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: With the **Main Camera** selected, drag the appropriate prefabs onto the prefabs
    slots in the **Inspector**, for the `LoadMapFromTextfile` Script component.![How
    to do it...](img/1362OT_10_14.jpg)
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you run the scene, you will see that a sprite-based Nethack map will appear,
    using your prefabs.
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-294
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Sprite sheet was automatically sliced up into hundreds of 128 x 128 pixel
    Sprite squares. We created the prefab objects from some of these sprites, so that
    the copies can be created at runtime when needed.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: The text file called `level1.txt` contains the lines of text characters. Each
    non-space character represents where a sprite prefab should be instantiated (`column
    = X`, `row = Y`). A C# dictionary variable named `dictionary` is declared and
    initialized in the `Start()` method to associate specific prefab GameObjects with
    some particular characters in the text file.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: The `Awake()` method splits the string into an array using the newline character
    as a separator. So now, we have `stringArray` with an entry for each row of the
    text data. The `BuildMase(…)` method is called with the `stringArray`.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: The `BuildMaze(…)` method interrogates the array to find its length (the number
    of rows of data for this level), and sets `yOffSet` to half this value. This is
    done to allow the placing of the prefabs half above `Y = 0` and half below, so
    `(0,0,0)` is the center of the level map. A `for`-loop is used to read each row's
    string from the array. It passes it to the `CreateRow(…)` method along with the
    Y-value corresponding to the current row.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: The `CreateRow(…)` method extracts the length of the string, and sets `xOffSet`
    to half this value. This is done to allow the placing of the prefabs half to the
    left of `X = 0` and half to the right, so `(0,0,0)` is the center of the level
    map. A `for`-loop is used to read each character from the current row's string,
    and (if there is an entry in our dictionary for that character) then the `CreatePrefabIInstance
    (…)` method is called, passing the prefab reference in the dictionary for that
    character, and the *x* and *y* value.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: The `CreatePrefabInstance(…)` method instantiates the given prefab at a position
    of (*x*, *y*, *z*) where *z* is always zero, and there is no rotation (`Quarternion.identity`).
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: Managing Unity project code using Git version control and GitHub hosting
  id: totrans-301
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Distributed Version Control Systems** (**DVCS**) are becoming a bread-and-butter
    everyday tool for software developers. An issue with Unity projects can be the
    many binary files in each project. There are also many files in a local system''s
    Unity project directory that are not needed for archiving/sharing, such as OS
    specific thumbnail files, trash files, and so on. Finally, some Unity project
    folders themselves do not need to be archived, such as Temp and Library.'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: While Unity provides its own "Asset Server", many small game developers chose
    not to pay for this extra feature. Also, Git and Mercurial (the most common DVCSs)
    are free, and work with any set of documents that are to be maintained (programs
    in any programming language, text-files, and so on). So, it makes sense to learn
    how to work with a third-party, industry standard DVCS for the Unity projects.
    In fact, the documents for this very book were all archived and version-controlled
    using a private GitHub repository!
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will set up a Unity project for GIT DVCS through a combination
    of Unity Application settings and use of the GitHub GUI-client application.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-305
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We created a real project this way—a pacman-style game, which you can explore
    and download/pull from the public GitHub's URL, available at [https://github.com/dr-matt-smith/matt-mac-man](https://github.com/dr-matt-smith/matt-mac-man).
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-307
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe can be used with any Unity project. In the `1362_10_09` folder,
    we have provided a Unity package of our `matt-mac-man` game, if you wish to use
    that one - in which case create a new 2D project in Unity, and import this package.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: Since this recipe illustrates hosting code on GitHub, you'll need to create
    a (free) GitHub account at [github.com](http://github.com) if you do not already
    have one.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: Before starting this recipe you need to have installed Git and the GitHub client
    application.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: 'Learn how, and download the client from the following links:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: '[http://git-scm.com/book/en/Getting-Started-Installing-Git](http://git-scm.com/book/en/Getting-Started-Installing-Git)'
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://git-scm.com/downloads/guis](http://git-scm.com/downloads/guis)'
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-314
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To load the external resources by Unity Default Resources, do the following:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: 'In the root directory of your Unity project, add the following code into a
    file named `.gitignore` (ensure that the filename starts with the *dot*):'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Tip
  id: totrans-318
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: This special file (`.gitignore`) tells the version control system which files
    do *not* need to be archived. For example, we don't need to record the Windows
    or Mac image thumbnail files (`DS_STORE` or `Thumbs.db`).
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open **Editor Settings** in the **Inspector** by navigating to **Edit** | **Project
    Settings** | **Editor**.
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Editor Settings**, set the **Version Control Mode** to **Visible Meta
    Files**.
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Editor Settings**, set the **Asset Serialization Mode** to **Force
    Text**.![How to do it...](img/1362OT_10_15.jpg)
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save your project so that these new settings are stored. Then, close the Unity
    application.
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log on to your GitHub account.
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On your GitHub home page, click on the green **New** button to start creating
    a new repository.![How to do it...](img/1362OT_10_16.jpg)
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give your new repository a name (we chose **matt-mac-man**) and check the **Initialize
    this repository with a README** option.![How to do it...](img/1362OT_10_17.jpg)
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Startup your GitHub client application on your computer, and get a list of the
    repositories to clone to the local computer by navigating to **File** | **Clone
    Repository ..**. From the list provided, select your new repository (for us, it
    was matt-mac-man) and click on the **Clone** button to this repository.![How to
    do it...](img/1362OT_10_18.jpg)
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You'll be asked where to store this repository on your local computer (we simply
    chose our **Desktop**). You will now see a folder with the repository name on
    your computer's disk, containing a hidden `.git` folder, and a single file named
    `README.md`.![How to do it...](img/1362OT_10_19.jpg)
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, copy to this local repository folder the following files and folders from
    your Unity project:'
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`.gitignore`'
  id: totrans-330
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`/Assets`'
  id: totrans-331
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`/Library`'
  id: totrans-332
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`/ProjectSettings`'
  id: totrans-333
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/1362OT_10_20.jpg)'
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: In your GitHub client application, you will now see lots of **Uncommitted Changes**.
    Type in a short comment for your first commit (we typed our standard—`v0.1 – first
    commit`), and click on the **Commit & Sync** to push the contents of this Unity
    project folder up to your GitHub account repository.![How to do it...](img/1362OT_10_21.jpg)
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, if you visit your GitHub project page, you will see that all these Unity
    project files are available for download for people's computers either as a ZIP
    archive, or to be cloned using a Git client.![How to do it...](img/1362OT_10_22.jpg)
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-337
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The special file called `.gitngnore` lists all the files and directories that
    are *not* to be archived.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: Changing the Unity **Editor Settings** for **Version Control Mode** to **Meta
    Files** ensures that Unity stores the required housekeeping data for each asset
    in its associated meta file. Selecting **Visible** rather than **Hidden** simply
    avoids any confusion as to whether GIT will record the meta files or not—GIT will
    record them whether visible or not. So, by making them visible, it is obvious
    to the developers working with the files that they will be included.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: Changing the Unity **Editor Settings** for **Asset Serialization Mode** to **Force
    Text** attempts to solve some of the difficulties of managing changes with the
    large binary files. Unity projects tend to have quite a few binary files, such
    as the `.unity` scene files, prefabs, and so on. There seems to be some debate
    about the best setting that should be used; we have found that **Force Text**
    works fine and so, we will use this at present. You'll see two commits on GitHub,
    since the very first was when we created the new repository, and the second was
    our first commit of the repository using the GitHub client, when we added all
    of our code into the local repository and pushed (committed) it to the remote
    server.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-341
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are some details that you don't want to miss.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: Learn more about Distributed Version Control Systems (DVCS)
  id: totrans-343
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following video link is a short introduction to DVCS:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: '[http://youtu.be/1BbK9o5fQD4](http://youtu.be/1BbK9o5fQD4)'
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Note that the Fogcreek Kiln "harmony" feature now allows seamless work between
    GIT and Mercurial with the same Kiln repository:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: '[http://blog.fogcreek.com/kiln-harmony-internals-the-basics/](http://blog.fogcreek.com/kiln-harmony-internals-the-basics/)'
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Bitbucket and SourceTree
  id: totrans-348
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you prefer to use Bitbucket and SourceTree with your Unity projects, you
    can find a good tutorial at the following URL:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: '[http://yeticrabgames.blogspot.ie/2014/02/using-git-with-unity-without-using.html](http://yeticrabgames.blogspot.ie/2014/02/using-git-with-unity-without-using.html)'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the command line rather than Git-client application
  id: totrans-351
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While for many, using a GUI client, such as the GitHub application, is a gentler
    introduction to using DVCS, at some point, you'll want to learn more and get to
    grips with working in the command line.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: 'Since both Git and Mercurial are open source, there are lots of great, free
    online resources available. The following are some good sources to get started
    on:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: 'Learn all about Git, download free GUI clients, and even get free online access
    to The Pro Git book (by Scott Chacon), available through Creative Commons license
    at the following URL:'
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://git-scm.com/book](http://git-scm.com/book)'
  id: totrans-355
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You will find an online interactive Git command line to practice in:'
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://try.github.io/levels/1/challenges/1](https://try.github.io/levels/1/challenges/1)'
  id: totrans-357
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The main Mercurial website, including free online access to the *Mercurial:
    The Definitive Guide* (by Bryan O''Sullivan) book is available through the Open
    Publication License at:'
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://mercurial.selenic.com/](http://mercurial.selenic.com/)'
  id: totrans-359
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SourceTree is a free Mercurial and Git GUI client, available at:'
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.sourcetreeapp.com/](http://www.sourcetreeapp.com/)'
  id: totrans-361
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  id: totrans-362
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following recipe for more information:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: '*Publishing for multiple devices via Unity Cloud*'
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishing for multiple devices via Unity Cloud
  id: totrans-365
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One reason for the Git recipe in this chapter is to allow you to prepare your
    projects for one of the most exciting new services offered to Unity developers
    in recent years—Unity Cloud! Unity Cloud takes all the work out of building different
    versions of your project for different devices—you PUSH your updated Unity project
    to your online DVCS (such as GitHub). Then, Unity Cloud will see the update and
    PULL your new code, and build your game for the range of devices/deployment platforms
    that you have set up.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-367
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, log on to the Unity Cloud Build website and create an account at:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: '[http://unity3d.com/unity/cloud-build](http://unity3d.com/unity/cloud-build)'
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For this recipe, you need access to a project''s source code. If you don''t
    have your own (for example, you haven''t completed the Git recipe in this chapter),
    then feel free to use the matt-mac-man project available at the public GitHub
    URL at:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/dr-matt-smith/matt-mac-man](https://github.com/dr-matt-smith/matt-mac-man)'
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  id: totrans-372
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A common reason for a test project that was first built to fail is forgetting
    to add at least one scene to the build settings for the project.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-374
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To load external resources by Unity Default Resources, do the following:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: Log on to your Unity Cloud Build account.
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Projects** page, click on the **Add a New Project** button.![How to
    do it...](img/1362OT_10_23.jpg)
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, you'll need to add the URL for your source code, and the **Source Control
    Method** (**SCM**). For our project, we entered our *matt-mac-man* URL, and **GIT**
    for the SCM.![How to do it...](img/1362OT_10_24.jpg)
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, you need to enter some settings. Unity Cloud Build will choose your source
    code project name as the default application name (most times, this is fine).
    You need to enter a **Bundle ID**—commonly, the reverse of your website URL is
    used here to ensure that the **App Name** plus **Bundle ID** is unique. So, we
    entered `com.mattsmithdev`. Unless testing branches of the code, the default master
    branch is fine, and likewise, unless testing subfolders, the default (no subfolder)
    is fine. Unless you are using the latest "beta" versions, the **Unity Version**
    option should be left to the default **Always Use Latest Version**. Finally, check
    the build options that you wish to have created. Note that you'll need to have
    set up the Apple codes if building for iOS; but you will be able to build for
    Unity Web Player and Android immediately.![How to do it...](img/1362OT_10_25.jpg)
  id: totrans-379
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next are the app "credentials". Unless you have Android credentials, you can
    choose the default "development" credentials. But this means that users will be
    warned when installing the application.
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来是应用的“凭证”。除非您有 Android 凭证，否则您可以选择默认的“开发”凭证。但这意味着当用户安装应用程序时，会收到警告。
- en: Unity Cloud will then start to build your application—this will take a few minutes
    (depending on the load on their server).
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Unity Cloud 将开始构建您的应用程序——这需要几分钟时间（取决于他们服务器上的负载）。
- en: When built, you'll get an e-mail (for each deployment target—so, we got one
    for Web Player, and one for Android). If the build fails, you'll still get an
    e-mail, and you can look up the logs for the reasons why the build failed.![How
    to do it...](img/1362OT_10_26.jpg)
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建完成后，您会收到一封电子邮件（针对每个部署目标——因此，我们为 Web Player 和 Android 分别收到了一封）。如果构建失败，您仍然会收到电子邮件，并且可以查看日志以了解构建失败的原因。![如何操作...](img/1362OT_10_26.jpg)
- en: You can then play web player version immediately:![How to do it...](img/1362OT_10_27.jpg)
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以立即播放 Web Player 版本：![如何操作...](img/1362OT_10_27.jpg)
- en: To test with Android or iOS, you download it onto the device (from the Unity
    Cloud web server) and play the game:![How to do it...](img/1362OT_10_28.jpg)
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要测试 Android 或 iOS，您需要将其下载到设备上（从 Unity Cloud 网络服务器），然后玩游戏：![如何操作...](img/1362OT_10_28.jpg)
- en: How it works...
  id: totrans-385
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Unity Cloud pulls your project source code from the DVCS system (such as GitHub).
    It then compiles your code using the settings chosen for Unity version and deployment
    platforms (we chose Web Player and Android in this recipe). If the build is successful,
    Unity Cloud makes the build applications available to download and run.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: Unity Cloud 从 DVCS 系统（如 GitHub）拉取您的项目源代码。然后，它使用为 Unity 版本和部署平台选择的设置编译您的代码（在本配方中我们选择了
    Web Player 和 Android）。如果构建成功，Unity Cloud 将构建的应用程序可供下载和运行。
- en: There's more...
  id: totrans-387
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There are some details that you don't want to miss.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些细节您不想错过。
- en: Learn more about Unity Cloud
  id: totrans-389
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 了解更多关于 Unity Cloud 的信息
- en: 'Learn more in the Support section of the Unity Cloud website (after logging-in),
    and the Unity main website Cloud Build information page at:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Unity Cloud 网站的“支持”部分（登录后）和 Unity 主网站的“云构建”信息页面了解更多信息：
- en: '[https://build.cloud.unity3d.com/support/](https://build.cloud.unity3d.com/support/)'
  id: totrans-391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Unity Cloud 支持页面](https://build.cloud.unity3d.com/support/)'
- en: '[http://unity3d.com/unity/cloud-build](http://unity3d.com/unity/cloud-build)'
  id: totrans-392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Unity Cloud 云构建](http://unity3d.com/unity/cloud-build)'
- en: See also
  id: totrans-393
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: For more information refer the *Managing Unity project code using Git version
    control and GitHub hosting* recipe
  id: totrans-394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更多信息请参阅 *使用 Git 版本控制和 GitHub 托管管理 Unity 项目代码* 的配方
