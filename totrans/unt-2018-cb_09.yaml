- en: 2D Animation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2D动画
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Flipping a sprite horizontally—the Do-It-Yourself approach
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 水平翻转精灵——DIY方法
- en: Flipping a sprite horizontally—using Animator State Chart and Transitions
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 水平翻转精灵——使用动画状态图和转换
- en: Animating body parts for character movement events
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为角色移动事件动画身体部位
- en: Creating a 3-frame animation clip to make a platform continually animate
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个3帧的动画剪辑，使平台持续动画
- en: Making a platform start falling once stepped-on using a Trigger to move animation
    from one state to another
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用触发器使平台一旦被踩上就开始下落，从而将动画从一个状态转换到另一个状态
- en: Creating animation clips from sprite sheet sequences
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从精灵序列创建动画剪辑
- en: Creating a platform game with Tiles and Tilemaps
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用图块和地图创建平台游戏
- en: Creating a Scene with the 2D Gamekit
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用2D Gamekit创建场景
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Since Unity 4.6 in 2014, Unity has shipped with dedicated 2D features, and Unity
    2018 continues to build on these. In this chapter, we present a range of recipes
    to introduce the basics of 2D animation in Unity 2018, and help you understand
    the relationships between the different animation elements.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 自从2014年的Unity 4.6以来，Unity就提供了专门的2D功能，Unity 2018继续在此基础上发展。在本章中，我们提供了一系列食谱，介绍Unity
    2018中2D动画的基础知识，并帮助您了解不同动画元素之间的关系。
- en: The Big picture
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 整体概念
- en: 'In Unity 2D, animations can be created in several different ways—one way is
    to create many images, each slightly different, which frame-by-frame give the
    appearance of movement. A second way to create animations is by defining keyframe
    positions for individual parts of an object (for example, the arms, legs, feet,
    head, and eyes), and getting Unity to calculate all the in-between positions when
    the game is running:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity 2D中，可以通过几种不同的方式创建动画——一种方式是创建许多略有不同的图像，逐帧给出运动的外观。创建动画的第二种方式是为对象的各个部分定义关键帧位置（例如，手臂、腿部、脚、头部和眼睛），并在游戏运行时让Unity计算所有中间位置：
- en: '![](img/14375113-9416-4625-868a-71ac9dab7360.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/14375113-9416-4625-868a-71ac9dab7360.png)'
- en: Both sources of animations become Animation Clips in the Animation panel. Each
    Animation Clip then becomes a State in the Animator Controller State Machine.
    We can also duplicate States based on Animation Clips, or create new States, and
    add scripted Behaviors.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 动画的两类来源在动画面板中变为动画剪辑。每个动画剪辑随后成为动画控制器状态机中的一个状态。我们还可以根据动画剪辑复制状态，或者创建新的状态，并添加脚本行为。
- en: We also can define sophisticated Conditions, under which GameObject will Transition
    from one animation State to another.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以定义复杂的条件，在满足这些条件的情况下，GameObject将从一种动画状态转换到另一种状态。
- en: Grids, Tilemaps, and Tile Palettes
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网格、地图和图块调色板
- en: Unity has introduced a set of Tile features that makes creating Tile-based **Scenes**
    quick and easy. A Tile Grid GameObject acts as the parent to Tilemaps. Tilemaps
    are the GameObjects onto which Tiles are painted, from the Tile Palette panel.
    Sprites can be made into Tile assets, and a collection of Tiles can be added to
    form a Tile Palette from which to paint a Scene.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Unity引入了一套地图功能，使得创建基于地图的**场景**变得快速且简单。地图网格GameObject充当地图的父对象。地图是将图块绘制到其上的GameObject，来自图块调色板。精灵可以被制作成图块资产，并将一组图块添加到调色板中，用于绘制场景。
- en: It also offers powerful, scripted Rule Tiles that enhance the Tile brush tools,
    automatically adding top, left, right, and bottom edge Tiles as more Grid elements
    are painted with Tiles. Rule Tiles can even randomly choose from a selection of
    Tiles under defined conditions. Learn more at [https://unity3d.com/learn/tutorials/topics/2d-game-creation/using-rule-tiles-tilemap](https://unity3d.com/learn/tutorials/topics/2d-game-creation/using-rule-tiles-tilemap).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 它还提供了强大的脚本规则图块，增强了图块画笔工具，自动添加顶部、左侧、右侧和底部边缘的图块，当用图块绘制更多网格元素时。规则图块甚至可以在定义的条件下从一组图块中随机选择。更多信息请访问 [https://unity3d.com/learn/tutorials/topics/2d-game-creation/using-rule-tiles-tilemap](https://unity3d.com/learn/tutorials/topics/2d-game-creation/using-rule-tiles-tilemap)。
- en: The 2D GameKit – bringing 2D tools together
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2D GameKit – 将2D工具整合在一起
- en: 'Perhaps the most exciting 2D feature introduced by Unity is the 2D GameKit.
    This brings together several powerful Unity features for constructing 2D games,
    including:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Unity引入的最令人兴奋的2D功能可能是2D GameKit。它将构建2D游戏所需的几个强大的Unity功能汇集在一起，包括：
- en: Tilemaps and Rule Tiles
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地图和规则图块
- en: Character Controller 2D (and Input Mapper and Player Character components)
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2D角色控制器（以及输入映射器和玩家角色组件）
- en: Cinemachine intelligent camera control
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cinemachine智能相机控制
- en: The Unity event system
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 统一事件系统
- en: Many prefabricated common 2D game components, including doors, teleporters,
    dialog panels, switches, inventory, melee, collectables and inventory, damageables,
    and enemies and much more
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多预制好的常见 2D 游戏组件，包括门、传送门、对话框面板、开关、库存、近战、可收集物品和库存、可伤害物体以及敌人等等
- en: The final recipe in this chapter introduces the 2D GameKit, and the other recipes
    in this chapter, and some others, introduce some of the components individually,
    so that you'll know enough to start taking your first steps with the 2D GameKit
    and learning how to build Scenes that tightly combine core 2D game features.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的最后一个食谱介绍了 2D GameKit，而本章的其他食谱和一些其他食谱则分别介绍了某些组件，这样您就会知道足够的信息来开始使用 2D GameKit
    并学习如何构建紧密组合核心 2D 游戏功能的场景。
- en: Resources
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 资源
- en: 'In this chapter, we introduce recipes demonstrating the animation system for
    2D game elements. The PotatoMan2D character is from the Unity 2D Platformer, which
    you can download yourself from the Unity asset store. That project is a good place
    to see lots more examples of 2D game and animation techniques:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了展示 2D 游戏元素动画系统的食谱。PotatoMan2D 角色来自 Unity 2D 平台游戏，您可以从 Unity 资产商店自行下载。该项目是查看更多
    2D 游戏和动画技术示例的好地方：
- en: '![](img/3e231b01-d595-4a5b-aa74-b05da5749ac5.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3e231b01-d595-4a5b-aa74-b05da5749ac5.png)'
- en: "Here are some links for useful resources and sources of information to explore\
    \ these \Ltopics further:"
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些链接，用于探索这些主题的更多有用资源和信息来源：
- en: 'Overview of 2D features in Unity: [https://unity.com/solutions/2d](https://unity.com/solutions/2d)'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity 中 2D 功能概述：[https://unity.com/solutions/2d](https://unity.com/solutions/2d)
- en: 'Unity''s beginners walkthrough guide to 2D game development: [https://unity3d.com/learn/tutorials/topics/2d-game-creation/2d-game-development-walkthrough](https://unity3d.com/learn/tutorials/topics/2d-game-creation/2d-game-development-walkthrough)'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity 的 2D 游戏开发入门指南：[https://unity3d.com/learn/tutorials/topics/2d-game-creation/2d-game-development-walkthrough](https://unity3d.com/learn/tutorials/topics/2d-game-creation/2d-game-development-walkthrough)
- en: 'Unity''s 2D Rogue-like tutorial series: [https://unity3d.com/learn/tutorials/s/2d-roguelike-tutorial](https://unity3d.com/learn/tutorials/s/2d-roguelike-tutorial)'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity 的 2D Rogue-like 教程系列：[https://unity3d.com/learn/tutorials/s/2d-roguelike-tutorial](https://unity3d.com/learn/tutorials/s/2d-roguelike-tutorial)
- en: 'Unity 2D Platformer (where the PotatoMan character comes from): [https://www.assetstore.unity3d.com/en/#!/content/11228](https://www.assetstore.unity3d.com/en/#!/content/11228)'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity 2D 平台游戏（PotatoMan 角色来源处）：[https://www.assetstore.unity3d.com/en/#!/content/11228](https://www.assetstore.unity3d.com/en/#!/content/11228)
- en: 'The platform sprites are from Daniel Cook''s Planet Cute game resources: [http://www.lostgarden.com/2007/05/dancs-miraculously-flexible-game.html](http://www.lostgarden.com/2007/05/dancs-miraculously-flexible-game.html)'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平台精灵来自 Daniel Cook 的 Planet Cute 游戏资源：[http://www.lostgarden.com/2007/05/dancs-miraculously-flexible-game.html](http://www.lostgarden.com/2007/05/dancs-miraculously-flexible-game.html)
- en: 'Creating a basic 2D platformer game: [https://www.unity3d.com/learn/tutorials/modules/beginner/live-training-archive/creating-a-basic-platformer-game](https://www.unity3d.com/learn/tutorials/modules/beginner/live-training-archive/creating-a-basic-platformer-game)'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建基本的 2D 平台游戏：[https://www.unity3d.com/learn/tutorials/modules/beginner/live-training-archive/creating-a-basic-platformer-game](https://www.unity3d.com/learn/tutorials/modules/beginner/live-training-archive/creating-a-basic-platformer-game)
- en: 'Hat Catch 2D game tutorial: [https://www.unity3d.com/learn/tutorials/modules/beginner/live-training-archive/2d-catch-game-pt1](https://www.unity3d.com/learn/tutorials/modules/beginner/live-training-archive/2d-catch-game-pt1)'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hat Catch 2D 游戏教程：[https://www.unity3d.com/learn/tutorials/modules/beginner/live-training-archive/2d-catch-game-pt1](https://www.unity3d.com/learn/tutorials/modules/beginner/live-training-archive/2d-catch-game-pt1)
- en: 'Unity games from a 2D perspective video: [https://www.unity3d.com/learn/tutorials/modules/beginner/live-training-archive/introduction-to-unity-via-2d](https://www.unity3d.com/learn/tutorials/modules/beginner/live-training-archive/introduction-to-unity-via-2d)'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 2D 视角看 Unity 游戏视频：[https://www.unity3d.com/learn/tutorials/modules/beginner/live-training-archive/introduction-to-unity-via-2d](https://www.unity3d.com/learn/tutorials/modules/beginner/live-training-archive/introduction-to-unity-via-2d)
- en: 'A fantastic set of modular 2D characters with a free Creative Commons license
    from Kenny. These assets would be perfect for animating body parts in a similar
    way to the potato-man example in this chapter and in the Unity 2D platformer demo:
    [http://kenney.nl/assets/modular-characters](http://kenney.nl/assets/modular-characters)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自 Kenny 的免费 Creative Commons 许可证的出色模块化 2D 角色集。这些资源非常适合以类似于本章中土豆人示例和 Unity 2D
    平台游戏演示中的方式动画身体部位：[http://kenney.nl/assets/modular-characters](http://kenney.nl/assets/modular-characters)
- en: 'Joe Strout''s illuminating Gamasutra article on three approaches to 2D character
    animation with Unity''s scripting and animation states: [https://www.gamasutra.com/blogs/JoeStrout/20150807/250646/2D_Animation_Methods_in_Unity.php](https://www.gamasutra.com/blogs/JoeStrout/20150807/250646/2D_Animation_Methods_in_Unity.php)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Joe Strout 在 Gamasutra 上的关于使用 Unity 脚本和动画状态进行 2D 角色动画的三个方法的启发式文章：[https://www.gamasutra.com/blogs/JoeStrout/20150807/250646/2D_Animation_Methods_in_Unity.php](https://www.gamasutra.com/blogs/JoeStrout/20150807/250646/2D_Animation_Methods_in_Unity.php)
- en: Flipping a sprite horizontally – the DIY approach
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 水平翻转精灵 - DIY 方法
- en: 'Perhaps the simplest 2D animation is a simple flip, from facing left to facing
    right, or facing up to facing down, and so on. In this recipe, we''ll add a cute
    bug sprite to the scene, and write a short script to flip its horizontal direction
    when the *Left* and *Right* arrow keys are pressed:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 可能最简单的 2D 动画就是简单的翻转，从面向左到面向右，或者从面向上到面向下，等等。在这个菜谱中，我们将向场景添加一个可爱的虫子精灵，并编写一个简短的脚本，当按下
    *左* 和 *右* 方向键时翻转其水平方向：
- en: '![](img/d4160ed3-6d19-4451-ab9c-09534dbce803.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d4160ed3-6d19-4451-ab9c-09534dbce803.png)'
- en: Getting ready
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we have prepared the image you need in a folder named Sprites
    in folder `08_01`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，我们在名为 Sprites 的文件夹中名为 `08_01` 的文件夹中准备了所需的图像。
- en: How to do it...
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'To flip an object horizontally with arrow key presses, follow these steps:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过箭头键按下水平翻转对象，请按照以下步骤操作：
- en: Create a new Unity 2D project.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 Unity 2D 项目。
- en: 'If you are working in a project that was originally created in 3D, you can
    change the default project behavior (for example, new Sprite Textures and **Scene**
    mode) to 2D via menu: Edit | Project Settings | Editor, then choose 2D for the
    Default Behavior Mode in the Inspector.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在一个最初创建为 3D 的项目中工作，你可以通过菜单更改默认项目行为（例如，新的 Sprite Textures 和 **场景** 模式）到 2D，方法是：编辑
    | 项目设置 | 编辑器，然后在检查器中选择 2D 作为默认行为模式。
- en: '![](img/9e5f36aa-c081-4587-8f58-2eadd2776b15.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9e5f36aa-c081-4587-8f58-2eadd2776b15.png)'
- en: Import the provided image: EnemyBug.png.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入提供的图像：EnemyBug.png。
- en: Drag an instance of the red Enemy Bug image from the Project | Sprites folder
    into the **Scene**. Position this GameObject at (0, 0, 0) and scale to (2, 2,
    2).
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目 | Sprites 文件夹中将红色 Enemy Bug 图像的实例拖到 **场景** 中。将此 GameObject 定位在 (0, 0, 0)
    并缩放到 (2, 2, 2)。
- en: 'Create a C# script-class named BugFlip, and add an instance-object as a component
    to the Enemy Bug:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 BugFlip 的 C# 脚本类，并将实例对象作为组件添加到 Enemy Bug：
- en: '[PRE0]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: When you run your scene, pressing the *Left* and *Right* arrow keys should make
    the bug face left or right.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你运行场景时，按下 *左* 和 *右* 方向键应该使虫子面向左或右。
- en: How it works...
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The C# class defines a **Boolean** variable, `facingRight`, that stores a true/false
    value corresponding to whether or not the bug is facing right. Since our bug sprite
    is initially facing right, we set the initial value of `facingRight` to true to
    match this.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: C# 类定义了一个 **布尔** 变量 `facingRight`，它存储一个真/假值，对应于虫子是否面向右侧。由于我们的虫子精灵最初面向右侧，我们将
    `facingRight` 的初始值设置为 true 以匹配这一点。
- en: Every frame, the `Update()` method, checks to see whether the *Left* or *Righ*t
    arrow keys have been pressed. If the *Left* arrow key is pressed and the bug is
    facing right, then the `Flip()` method is called, likewise if the *Right* arrow
    key is pressed and the bug is facing left (that is, facing right is false), again
    the `Flip()` method is called.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 每一帧，`Update()` 方法都会检查是否按下了 *左* 或 *右* 方向键。如果按下 *左* 方向键且虫子面向右，则调用 `Flip()` 方法，同样，如果按下
    *右* 方向键且虫子面向左（即面向右为假），则再次调用 `Flip()` 方法。
- en: The `Flip()` method performs two actions; the first simply reverses the true/false
    value in variable `facingRight`. The second action changes the +/- sign of the
    X-value of the `localScale` property of the transform. Reversing the sign of the
    `localScale` results in the 2D flip that we desire. Look inside the PlayerControl
    script for the PotatoMan character in the next recipe – you'll see the same `Flip()`
    method being used.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`Flip()` 方法执行两个操作；第一个操作简单地反转变量 `facingRight` 中的真/假值。第二个操作改变变换的 `localScale`
    属性的 X 值的正负号。反转 `localScale` 的符号将导致我们想要的 2D 翻转。在下一个菜谱中，查看 PlayerControl 脚本中的 PotatoMan
    角色内部，你会看到相同的 `Flip()` 方法被使用。'
- en: Flipping a sprite horizontally – using Animator State Chart and Transitions
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 水平翻转精灵 - 使用动画状态图和转换
- en: In this recipe, we'll use (in a simple way) the Unity animation system to create
    two states corresponding to two animation clips, and a script that changes localScale
    according to which animation state is active. We'll use a second script, which
    will map the arrow keys press Horizontal input axis values to a Parameter in the
    state chart, and which will drive the transition from one state to the other.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将（以简单的方式）使用Unity动画系统创建两个状态，对应两个动画剪辑，以及一个根据哪个动画状态活动而改变localScale的脚本。我们将使用第二个脚本，它将箭头键的按下水平输入轴值映射到状态图中的参数，并驱动从一个状态到另一个状态的过渡。
- en: While it may seem like a lot of work, compared to the previous recipe, such
    an approach illustrates how we can map from input events (such as key presses
    or touch inputs), to Parameters and Triggers in a State Chart.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这可能看起来工作量很大，但与之前的配方相比，这种方法说明了我们如何将输入事件（如按键或触摸输入）映射到状态图中的参数和触发器。
- en: Getting ready
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we have prepared the image you need in a folder named Sprites
    in folder `08_02`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们在名为 Sprites 的文件夹中名为 `08_02` 的文件夹中准备了所需的图像。
- en: How to do it...
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To flip an object horizontally using Animator State Chart and Transitions,
    follow these steps:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用动画状态图和过渡水平翻转对象，请按照以下步骤操作：
- en: Create a new Unity 2D project.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的Unity 2D项目。
- en: Import the provided image: EnemyBug.png.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入提供的图像：EnemyBug.png。
- en: Drag an instance of the red Enemy Bug image from the Project | Sprites folder
    into the scene. Position this GameObject at (0, 0, 0) and scale to (2, 2, 2).
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目 | Sprites 文件夹中将红色敌人虫子图像的实例拖动到场景中。将此GameObject定位在 (0, 0, 0) 并缩放到 (2, 2, 2)。
- en: 'With the Enemy Bug GameObject selected in **Hierarchy**, open the **Animation**
    panel (menu: Window | Animation | Animation), and click the Create button to create
    a new Animation Clip asset. Save the new Animation Clip asset as beetle-right.
    You will also see that an Animator component has been added to the Enemy Bug GameObject:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**层次结构**中选择 Enemy Bug GameObject，打开**动画**面板（菜单：窗口 | 动画 | 动画），然后单击创建按钮以创建一个新的动画剪辑资产。将新的动画剪辑资产保存为
    beetle-right。你还会看到已经添加了Animator组件到 Enemy Bug GameObject：
- en: '![](img/12056ee9-9a17-40cc-9a19-abdaa840bcd8.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/12056ee9-9a17-40cc-9a19-abdaa840bcd8.png)'
- en: 'If you look at the Project panel, you''ll see two new asset files have been
    created: the beetle-right Animation Clip and an Animator Controller named Enemy
    Bug:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你查看项目面板，你会看到创建了两个新的资产文件：beetle-right动画剪辑和一个名为Enemy Bug的动画控制器：
- en: '![](img/97d8c5f0-3af0-4a8e-bac4-c8d7c22c2ce9.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/97d8c5f0-3af0-4a8e-bac4-c8d7c22c2ce9.png)'
- en: Close the **Anim****ation** panel, and double click the Enemy Bug Animator Controller
    to start editing it – it should appear in a new **Animator** panel. You should
    see four *states*, Any State and Exit are unlinked, and state Entry has a Transition
    arrow connecting to Animation Clipbeetle-right. This means that as soon as the
    Animator Controller starts to play, it will enter the beetle-right state. State
    beetle-right is tinted orange, to indicate that it is the Default state.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭**动画**面板，双击**敌人虫子动画控制器**以开始编辑它——它应该出现在一个新的**动画器**面板中。你应该看到四个**状态**，任何状态和退出都是未链接的，状态进入有一个过渡箭头连接到动画剪辑beetle-right。这意味着一旦动画控制器开始播放，它将进入beetle-right状态。状态beetle-right被着色为橙色，以表示它是默认状态。
- en: '![](img/f693e4b9-b9ea-4c36-a2f1-4f0eca72820c.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f693e4b9-b9ea-4c36-a2f1-4f0eca72820c.png)'
- en: If there is only one Animation Clip state, that will be the Default state automatically.
    Once you have other states added to the state chart, you can right-click a different
    state and use the context menu to change which state is first entered.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果只有一个动画剪辑状态，它将自动成为默认状态。一旦你在状态图中添加了其他状态，你可以右键单击不同的状态，并使用上下文菜单更改首先进入的状态。
- en: 'Select the beetle-right state and make a copy of it, renaming the copy beetle-left
    (use can use the right-mouse menu, or the *Ctrl *+ *C*/*V* keyboard shortcuts).
    It makes sense to position beetle-left to the **left** of beetle-right:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 beetle-right 状态并复制它，将副本重命名为 beetle-left（可以使用右键菜单或 *Ctrl *+ *C*/*V* 键盘快捷键）。将
    beetle-left 定位在 beetle-right 的**左侧**是有意义的：
- en: '![](img/e33b61f7-78f9-4bad-8b99-029631dba86b.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e33b61f7-78f9-4bad-8b99-029631dba86b.png)'
- en: 'Move your mouse pointer over the beetle-right state, and then in the mouse
    right-click context menu, choose Make Transition, and drag the white arrow that
    appears into the beetle-left state:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将鼠标指针移至 beetle-right 状态，然后在鼠标右键上下文菜单中选择创建过渡，并将出现的白色箭头拖动到 beetle-left 状态：
- en: '![](img/11b92799-25b0-4c1c-8a8e-e5c3cb831f7b.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/11b92799-25b0-4c1c-8a8e-e5c3cb831f7b.png)'
- en: 'Repeat this step with beetle-left, to create a Transition back from beetle-left
    to beetle-right:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用beetle-left重复此步骤，以创建从beetle-left到beetle-right的转换回：
- en: '![](img/fecdc29d-4aba-4077-9cd9-a11564a044e6.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fecdc29d-4aba-4077-9cd9-a11564a044e6.png)'
- en: 'We want an instance Transition between left- and right-facing. So for **each **Transition,
    uncheck the Has Exit Time option. Click the Transition arrow to select it (it
    should turn blue), then uncheck this option in the **Inspector**:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要一个左右面向的实例转换。因此，对于**每个**转换，取消选中“有退出时间”选项。点击转换箭头以选择它（它应该变成蓝色），然后在**检查器**中取消选中此选项：
- en: '![](img/7b6c0e69-a37b-44e4-92ce-f29079c797e9.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7b6c0e69-a37b-44e4-92ce-f29079c797e9.png)'
- en: To delete a Transition, first select it, then use the *Delete* key (**Windows**)
    or press *Fn* + *Backspace* (**macOS**).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除转换，首先选择它，然后使用*删除*键（**Windows**）或按*Fn* + *退格键*（**macOS**）。
- en: 'For our condition to decide when to change the active state, we now need to
    create a Parameter indicating whether the *Left/Right* arrow keys have been clicked.
    *Left/Right* keys presses are indicated by the Unity input system''s Horizontal
    axis value. Create a state chart float Parameter named axisHorizontal by selecting
    Parameters (rather than Layers) in the top-left of the **Animator** panel, clicking
    the plus-symbol "+" button, and choosing Float. Name your new **Parameter** axisHorizontal:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了决定何时更改活动状态，我们需要创建一个参数来指示*左/右*箭头键是否被点击。*左/右*键的按下由Unity输入系统的水平轴值表示。通过在**动画师**面板的左上角选择参数（而不是层），点击加号符号"+"按钮，并选择浮点数，创建一个名为axisHorizontal的状态图浮点参数。将你的新**参数**命名为axisHorizontal：
- en: '![](img/b355d388-26fb-4984-a403-9f2e1a622538.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b355d388-26fb-4984-a403-9f2e1a622538.png)'
- en: 'With our Parameter, we can define the conditions for changing between the left-
    and right-facing states. When the *Left* arrow key is pressed, the Unity input
    system''s Horizontal axis value is negative, so select the Transition from beetle-right
    to beetle-left, and in the **Inspector** click the plus symbol in the Conditions
    section of the Transition properties. Since there is only one Parameter, this
    will automatically be suggested, with defaults of Greater than zero. Change the
    Greater to Less, and we have our desired condition:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用我们的参数，我们可以定义在左右面向状态之间切换的条件。当按下*左箭头键*时，Unity输入系统的水平轴值是负值，因此选择从beetle-right到beetle-left的转换，并在**检查器**中点击转换属性条件部分的加号符号。由于只有一个参数，这会自动建议，默认为大于零。将大于改为小于，我们就得到了所需的条件：
- en: '![](img/ea709f84-2591-43b9-81f8-9d268d9d106f.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ea709f84-2591-43b9-81f8-9d268d9d106f.png)'
- en: Now, select the Transition from beetle-left to beetle-right, and add a Condition.
    In this case, the defaults, axisHorizontal Greater than zero, are just what we
    want (since a positive value is returned by Unity's input system Horizontal axis
    when the *Right* arrow key is pressed).
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，选择从beetle-left到beetle-right的转换，并添加一个条件。在这种情况下，默认的axisHorizontal大于零正好是我们想要的（因为当按下*右箭头键*时，Unity输入系统的水平轴返回正值）。
- en: We need a method to actually map from the Unity input system's Horizontal axis
    value (from the *Left/Right* array keys) to our Animator state chart ParameteraxisHorizontal.
    This we can do with a short script class, which we'll create in the next steps.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要一个方法来将Unity输入系统的水平轴值（来自*左/右*数组键）映射到我们的动画师状态图参数axisHorizontal。我们可以通过创建一个简短的脚本类来实现这一点，我们将在下一步中创建它。
- en: 'Create a C# script class named InputMapper, and add an instance object as a
    component to the Enemy Bug GameObject:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为InputMapper的C#脚本类，并将实例对象作为组件添加到Enemy Bug游戏对象中：
- en: '[PRE1]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now we need to actually change the local scale property of the GameObject when
    we switch to the left or right facing state. Create a C# script class named LocalScaleSetter:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要实际更改GameObject在切换到左右面向状态时的本地缩放属性。创建一个名为LocalScaleSetter的C#脚本类：
- en: '[PRE2]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the Animator panel, select the beetle-right state. In the **Inspector**,
    click the AddBehaviour button, and select LocalScaleSetter. The default public
    Vector three scale value of (1,1,1) is fine for this state.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在动画师面板中，选择beetle-right状态。在**检查器**中，点击添加行为按钮，并选择LocalScaleSetter。对于此状态，默认的公共Vector
    three缩放值(1,1,1)是合适的。
- en: 'In the Animator panel, select the beetle-left state. In the Inspector, click
    the AddBehaviour button, and select LocalScaleSetter. Change the public Vector
    three scale to a value of (-1,1,1) – that is, we need to swap the X-scaling to
    make our Sprite face to the left:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在动画师面板中，选择beetle-left状态。在**检查器**中，点击添加行为按钮，并选择LocalScaleSetter。将公共Vector three缩放值更改为(-1,1,1)
    – 即，我们需要交换X缩放以使我们的Sprite面向左侧：
- en: '![](img/dc5ab0e9-9da3-4c3e-a614-1cfb885d6f34.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dc5ab0e9-9da3-4c3e-a614-1cfb885d6f34.png)'
- en: Adding instance objects of C# script classes to Animator states is a great way
    to link the logic for actions when entering into/exiting a state with the Animator
    states themselves.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 将 C# 脚本类的实例对象添加到动画器状态中是将进入/退出状态时的逻辑与动画器状态本身链接起来的好方法。
- en: In the Animator panel, select the beetle-right state. In the Inspector, click
    the AddBehaviour button, and select InputMapper.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在动画器面板中，选择 `beetle-right` 状态。在检查器中，点击添加行为按钮，并选择 InputMapper。
- en: When you run your **Scene**, pressing the *Left* and *Right* arrow keys should
    make the bug face left or right.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你运行 **场景** 时，按下 *左* 和 *右* 方向键应该使虫子面向左边或右边。
- en: How it works...
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Each frame the `Update()` method of the `InputMapper` C# script-class reads
    the Unity input system's Horizontal axis value each frame, and sets the Animator
    state chart ParameteraxisHorizontal to this value. If the value is less than (left
    arrow) or greater than (right arrow) zero, if appropriate, the Animator state
    system will switch to the other state.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 每一帧，`InputMapper` C# 脚本类的 `Update()` 方法都会读取 Unity 输入系统的水平轴值，并将动画器状态图表参数 `axisHorizontal`
    设置为该值。如果该值小于（左箭头）或大于（右箭头）零，如果适当，动画器状态系统将切换到另一个状态。
- en: The LocalScaleSetter C# script class actually changes the localScale property
    (initial value 1,1,1, or reflect horizontally to make it face left -1,1,1). For
    each state the public **Vector3** variable can be customized to the appropriate
    values.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上改变 `LocalScaleSetter` C# 脚本类的 `localScale` 属性（初始值 1,1,1，或水平翻转使其面向左边 -1,1,1）。对于每个状态，公共
    **Vector3** 变量都可以自定义到适当的值。
- en: The `OnStateEnter(...)` method is involved each time you enter the state that
    an instance object of this C# class is attached to. You can read about the various
    event messages for the StateMachineBehaviour class at [https://docs.unity3d.com/ScriptReference/StateMachineBehaviour.html](https://docs.unity3d.com/ScriptReference/StateMachineBehaviour.html).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 每次进入此 C# 类的实例附加到的状态时，都会涉及 `OnStateEnter(...)` 方法。您可以在 [https://docs.unity3d.com/ScriptReference/StateMachineBehaviour.html](https://docs.unity3d.com/ScriptReference/StateMachineBehaviour.html)
    阅读有关 StateMachineBehaviour 类的各种事件消息。
- en: When we press the *Left*-arrow key, the value of the Unity input system's Horizontal
    axis value is negative, and this is mapped to the Animator state chart, Parameter
    axisHorizontal, causing the system to Transition to the beetle-left state, and `OnStateEnter(...)`
    of the **LocalScaleSetter** script class instance to be executed, setting the
    local scale to **(-1, 1, 1**), making the **Texture** flip **Horizontally**, so
    the beetle faces left.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们按下 *左* 方向键时，Unity 输入系统的水平轴值是负数，并将其映射到动画器状态图表，即 `Parameter axisHorizontal`，导致系统过渡到
    `beetle-left` 状态，并执行 **LocalScaleSetter** 脚本类实例的 `OnStateEnter(...)`，将局部缩放设置为
    **(-1, 1, 1**)，使 **纹理** 水平翻转，因此甲虫面向左边。
- en: There's more...
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Here are some suggestions for enhancing this recipe.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些增强此配方的建议。
- en: Instantaneous swapping
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 瞬时交换
- en: You may have noticed a delay, even though we set Exit Time to zero. This is
    because there is a default blending when Transitioning from one state to another.
    However, this can be set to zero, so that the state machine switches instantaneously
    from one state to the next.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，即使我们设置了退出时间为零，仍然存在延迟。这是因为从一个状态过渡到另一个状态时存在默认混合。但是，这可以设置为 0，以便状态机可以瞬时从一个状态切换到下一个状态。
- en: 'Do the following:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下操作：
- en: Select each Transition in the **Animator** panel.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Animator** 面板中选择每个过渡。
- en: Expand the Settings properties.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开设置属性。
- en: 'Zero both the Transition Duration and the Transition Offset:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将过渡持续时间和过渡偏移量都设置为 0：
- en: '![](img/45bbdae8-919b-4f13-aa48-3607bac471b3.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/45bbdae8-919b-4f13-aa48-3607bac471b3.png)'
- en: Now when you run the **Scene**, the bug should immediately swith left and right
    as you press the corresponding arrow keys.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当你运行 **场景** 时，当你按下相应的箭头键时，虫子应该立即左右切换。
- en: Animating body parts for character movement events
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为角色移动事件动画化身体部位
- en: In this recipe, we'll learn to animate the hat of the Unity potato-man character
    in response to a jump event.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将学习如何根据跳跃事件动画化 Unity 土豆人角色的帽子。
- en: Getting ready
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we have prepared the files you need in folder `08_03`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们在文件夹 `08_03` 中准备了所需的文件。
- en: How to do it...
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'To animate body parts for character movement events, follow these steps:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 要为角色移动事件动画化身体部位，请按照以下步骤操作：
- en: Create a new Unity 2D project.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 Unity 2D 项目。
- en: Import the provided PotatoManAssets package into your project.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将提供的 PotatoManAssets 包导入到你的项目中。
- en: Increase the size of the **Main Camera** to 10.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **主摄像机** 的尺寸增加到 10。
- en: 'Set up the 2D gravity setting for this project – we''ll use the same setting
    as from Unity''s 2D platform tutorial, a setting of Y= -30\. Set 2D gravity to
    this value by choosing menu: Edit | Project Settings | Physics 2D, and then at
    the top change the Y value to -30:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此项目设置 2D 重力设置 - 我们将使用与 Unity 2D 平台教程相同的设置，Y= -30。通过选择菜单：编辑 | 项目设置 | 物理效果 2D，将
    2D 重力设置为该值，然后在顶部将 Y 值更改为 -30：
- en: '![](img/ba39d9ba-5a93-4c0b-9694-b32511af35f4.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ba39d9ba-5a93-4c0b-9694-b32511af35f4.png)'
- en: Drag an instance of the PotatoMan hero character2D from the Project | Prefabs
    folder into the **Scene**. Position this GameObject at (0, 3, 0).
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 PotatoMan hero character2D 的实例从 Project | 预制体文件夹拖动到 **场景** 中。将此 GameObject
    定位于 (0, 3, 0)。
- en: Drag an instance of the sprite platformWallBlocks from the Project | Sprites
    folder into the **Scene**. Position this GameObject at (0, -4, 0).
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 Project | Sprites 文件夹中的 sprite platformWallBlocks 的实例拖动到 **场景** 中。将此 GameObject
    定位于 (0, -4, 0)。
- en: 'Add a Box Collider 2D component to the platformWallBlocks GameObject by choosing
    menu: Add Component | Physics 2D | Box Collider 2D.'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择菜单：添加组件 | 物理效果 2D | 矩形碰撞器 2D，将矩形碰撞器 2D 组件添加到 platformWallBlocks GameObject。
- en: 'We now have a stationary platform that the player can land upon, and walk left
    and right on. Create a new Layer named Ground, and assign the platformWallBlocks GameObject
    to this new layer, as shown in the following screenshot. Pressing the *Space*
    key when the character is on the platform will now make him jump:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们有一个静止的平台，玩家可以着陆并左右行走。创建一个名为 Ground 的新层，并将 platformWallBlocks GameObject
    分配到这个新层，如下截图所示。当角色在平台上时，按下 *空格* 键现在会使他跳跃：
- en: '![](img/52a0dd9d-ab12-491c-8e3c-c7e39e088cac.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/52a0dd9d-ab12-491c-8e3c-c7e39e088cac.png)'
- en: 'Currently the PotatoMan hero character is animated (arms and legs moving) when
    we make him jump. Let''s remove the Animation Clips and Animator Controller and
    create our own from scratch. Delete the Clips and Controllers folders from Project
    | Assets |PotatoMan2DAssets | Character2D | Animation, as shown:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目前，当我们将 PotatoMan 英雄角色设置为跳跃时，他会被动画化（手臂和腿部移动）。让我们删除动画剪辑和动画控制器，从头开始创建自己的。如以下所示，从项目
    | 资产 | PotatoMan2DAssets | Character2D | 动画中删除 Clips 和 Controllers 文件夹：
- en: '![](img/4a356702-cd72-4b17-97e4-6c4bac98c1ad.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4a356702-cd72-4b17-97e4-6c4bac98c1ad.png)'
- en: Let's create an Animation Clip (and its associated Animator Controller) for
    our hero character. In the **Hierarchy**, select GameObject hero. Ensuring GameObject
    hero character2D is selected in the **Hierarchy**, open the **Animation** panel,
    and ensure it is in Dope Sheet view (this is the default).
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们为我们的英雄角色创建一个动画剪辑（及其关联的动画控制器）。在**层次结构**中选中GameObject hero。确保在**层次结构**中选中GameObject
    hero character2D，打开**动画**面板，并确保它处于Dope Sheet视图（这是默认视图）。
- en: 'Click the **Animation** panel''s Create button, and save the new clip in the
    Character2D | Animation folder, naming it as character-potatoman-idle. You''ve
    now created an Animation Clip for the Idle character state (which is not animated):'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **动画** 面板的创建按钮，并将新剪辑保存到 Character2D | 动画文件夹中，命名为 character-potatoman-idle。你现在已为空闲角色状态（未动画）创建了一个动画剪辑：
- en: '![](img/4e49cad7-9c40-4bcc-9849-c0c4c8a9d6fa.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4e49cad7-9c40-4bcc-9849-c0c4c8a9d6fa.png)'
- en: Your final game may end up with dozens, or even hundreds, of Animation Clips.
    Make things easy to search by prefixing the names of clips with object type, name,
    and then a description of the animation clip.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 你的最终游戏可能包含数十个，甚至数百个动画剪辑。通过在剪辑名称前缀中添加对象类型、名称以及动画剪辑的描述，使搜索变得容易。
- en: 'Looking at the Character2D | Animation folder in the **Project** panel, you
    should now see both the Animation Clip you have just created (character-potatoman-idle)
    and a new Animator Controller, which has defaulted to the name of your hero character2D
    GameObject:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**项目**面板中查看 Character2D | 动画文件夹，你现在应该看到你刚刚创建的动画剪辑（character-potatoman-idle）和一个新的动画控制器，该控制器默认为你的
    hero character2D GameObject 的名称：
- en: '![](img/f6ec404d-e2f3-47f3-888b-1348065f23c9.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f6ec404d-e2f3-47f3-888b-1348065f23c9.png)'
- en: 'Ensuring the hero GameObject is selected in the **Hierarchy**, open the **Animator**
    panel and you''ll see the State Machine for controlling the animation of our character.
    Since we only have one Animation Clip (character-potatoman-idle), upon entry,
    the State Machine immediately enters this state:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在**层次结构**中选中了英雄GameObject，打开**动画**面板，你会看到控制我们角色动画的状态机。由于我们只有一个动画剪辑（character-potatoman-idle），进入时，状态机立即进入此状态：
- en: '![](img/6bf2a0d0-2e16-4052-babe-a69eb8c83a43.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6bf2a0d0-2e16-4052-babe-a69eb8c83a43.png)'
- en: Run your **Scen****e**. Since the character is always in the 'idle' state, we
    see no animation yet when we make it jump.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行你的**场景**。由于角色始终处于“空闲”状态，当我们让它跳跃时，我们还没有看到任何动画。
- en: 'Create a jump AnimationClip that animates the hat. Ensure that the hero GameObject
    is still selected in the **Hierarchy**. Click the empty drop-down menu in the
    **Animation** panel (next to the word Samples), and create a new clip in your
    Animation folder, naming it character-potatoman-jump:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个跳跃动画剪辑，使帽子动画。确保在**层次结构**中仍然选中了**英雄**GameObject。点击**动画**面板（“样本”一词旁边的）中的空下拉菜单，并在你的动画文件夹中创建一个新的剪辑，命名为character-potatoman-jump：
- en: '![](img/d6417dc5-15a6-46d2-baa3-533c91a63969.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d6417dc5-15a6-46d2-baa3-533c91a63969.png)'
- en: 'Click the Add Property button, and chose Transform | Position of the hat child
    object, by clicking its + (plus-sign) button. We are now ready to record changes
    to the (X, Y, Z) position of the hat GameObject in this animation clip:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“添加属性”按钮，通过点击其+（加号）按钮选择帽子子对象的Transform | Position。我们现在可以记录在这个动画剪辑中帽子GameObject的(X,
    Y, Z)位置的变化：
- en: '![](img/5d9d4ab2-43be-49cb-88dc-d39e2ca56d2d.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5d9d4ab2-43be-49cb-88dc-d39e2ca56d2d.png)'
- en: You should now see two keyframes at 0.0 and at 1.0\. These are indicated by
    diamonds in the **Timeline** area in the right-hand section of the **Animation**
    panel.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在应该看到在0.0和1.0处有两个关键帧。这些在**动画**面板右侧部分的**时间轴**区域用菱形表示。
- en: Click to select the first keyframe (at time 0.0) – the diamond should turn blue
    to indicate it is selected.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击选择第一个关键帧（在时间0.0处）——菱形应该变成蓝色以表示它已被选中。
- en: 'Let''s record a new position for the hat for this first frame. Click the red
    Record circle button once to start recording in the **Animation** panel. Now in
    the **Scene** panel, move the hat up and left a little, away from the head. You
    should see that all three X, Y, Z values have a red background in the **Inspector** –
    this is to inform you that the values of the Transform component are being recorded
    in the Animation Clip:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们为这个第一帧记录一个新的帽子位置。在**动画**面板中点击一次红色记录圆圈按钮开始记录。现在在**场景**面板中，将帽子向上和向左移动一点，远离头部。你应该会看到在**检查器**中所有三个X,
    Y, Z值都有红色背景——这是为了通知你Transform组件的值正在被记录在动画剪辑中：
- en: '![](img/07e649f0-b551-4634-8b86-2d0351d45280.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/07e649f0-b551-4634-8b86-2d0351d45280.png)'
- en: Click the red Record circle button again to stop recording in the **Animation**
    panel.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次点击红色记录圆圈按钮，在**动画**面板中停止记录。
- en: 'Since 1 second is perhaps too long for our jump animation, drag the second
    keyframe diamond to the left to a time of 0.5:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于1秒可能对于我们跳跃动画来说太长了，将第二个关键帧的菱形向左拖动到0.5的时间：
- en: '![](img/9f7328b1-a43a-4566-820c-ec255790a758.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9f7328b1-a43a-4566-820c-ec255790a758.png)'
- en: 'We need to define when the character should Transition from the Idle state
    to the Jump state. In the **Animator** panel, select the character-potatoman-idle state,
    and create a Transition to the character-potatoman-jump state by right-mouse-clicking
    and choosing the Make Transition menu, then drag the Transition arrow to the character-potatoman-jump state,
    as shown:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要定义角色应该从空闲状态过渡到跳跃状态的时间。在**动画器**面板中，选择character-potatoman-idle状态，通过右键单击并选择Make
    Transition菜单，然后拖动过渡箭头到character-potatoman-jump状态，如图所示：
- en: '![](img/79b2a949-b83f-4c1f-bd96-52d8d715152c.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/79b2a949-b83f-4c1f-bd96-52d8d715152c.png)'
- en: 'Let''s add a Trigger parameter named Jump, by clicking on the add parameter
    plus-sign "+" button at the top-left of the Animator panel, choosing Trigger,
    and typing the name Jump:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在动画器面板的左上角点击添加参数加号“+”按钮，选择触发器，并输入名称“Jump”来添加一个名为“Jump”的触发参数：
- en: '![](img/4d7ac701-7017-4a76-b6b4-ae97e314f7d5.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4d7ac701-7017-4a76-b6b4-ae97e314f7d5.png)'
- en: 'We can now define the properties for when our character should Transition from
    idle to jump. Click the Transition arrow to select it, set the following two properties,
    and add one condition in the **Inspector** panel:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以定义当我们的角色应该从空闲状态过渡到跳跃状态时的属性。点击过渡箭头选择它，设置以下两个属性，并在**检查器**面板中添加一个条件：
- en: 'Has Exit Time: Uncheck this option'
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已有退出时间：取消选中此选项
- en: 'Transition Duration(s): Set to 0.01'
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过渡持续时间（秒）：设置为0.01
- en: 'Conditions: Add Jump (click + button at bottom):'
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 条件：添加跳跃（点击底部的+按钮）：
- en: '![](img/6996c42d-cd4d-494a-a4a7-fba15f263697.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6996c42d-cd4d-494a-a4a7-fba15f263697.png)'
- en: Save and run your **Scene**. Once the character has landed on the platform and
    you press the *Space* key to jump, you'll see the character's hat jump away from
    his head, and slowly move back. Since we haven't added any Transition to leave
    the Jump state, this Animation Clip will loop, so the hat keeps on moving even
    when the jump is completed.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并运行你的**场景**。一旦角色在平台上着陆并按下空格键跳跃，你会看到角色的帽子从头上跳开，并慢慢移动回来。由于我们没有添加离开跳跃状态的过渡，这个动画剪辑将循环，所以即使跳跃完成，帽子也会继续移动。
- en: 'In the **Animator** panel, select the character-potatoman-jump state and add
    a new Transition back to the character-potatoman-idle state. Select this Transition
    arrow, and in the **Inspector** panel sets its properties as follows:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**动画器**面板中，选择`character-potatoman-jump`状态并添加一个新的过渡回到`character-potatoman-idle`状态。选择这个过渡箭头，并在**检查器**面板中设置其属性如下：
- en: 'Has Exit Time: (leave as checked)'
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有退出时间：（保持选中）
- en: 'Exit Time: 0.5 (this needs to be the same time value as the second keyfame
    of our Jump animation clip):'
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 退出时间：0.5（这需要与我们的跳跃动画剪辑的第二个关键帧相同的时值）：
- en: '![](img/7004e725-6b0f-4d1c-893f-20e02054d58c.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7004e725-6b0f-4d1c-893f-20e02054d58c.png)'
- en: Save and run your **Scene**. Now when you jump, the hat should animate once,
    after which the character immediately returns to its Idle state.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并运行你的**场景**。现在当你跳跃时，帽子应该动一次，然后角色立即回到空闲状态。
- en: How it works...
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: You have added an Animation Controller State Machine to the hero GameObject.
    The two Animation Clips you created (idle and jump) appear as States in the **Animator**
    panel. You created a Transition from Idle to Jump when the JumpTrigger parameter
    is received by the State Machine. You created a second Transition, which transitions
    back to the Idle state after waiting 0.5 seconds (the same duration between the
    2 key-frames in our Jump Animation Clip).
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经将动画控制器状态机添加到了英雄游戏对象中。你创建的两个动画剪辑（空闲和跳跃）在**动画器**面板中显示为状态。当状态机接收到跳跃触发参数时，你创建了一个从空闲到跳跃的过渡。你创建了第二个过渡，在等待0.5秒后（与我们的跳跃动画剪辑中的两个关键帧之间的相同持续时间）返回到空闲状态。
- en: The player makes the character jump by pressing the *Space* key. This causes code
    in the `PlayerControl` C#-scripted component of the hero GameObject to be invoked,
    that makes the sprite move upwards on screen, and also sends a `SetTrigger(...)`
    message to the Animator controller component, for the Trigger named Jump.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 玩家通过按下**空格**键使角色跳跃。这会导致英雄游戏对象的`PlayerControl` C#脚本组件中的代码被调用，使精灵在屏幕上向上移动，并给动画控制器组件发送一个名为跳跃的`SetTrigger(...)`消息。
- en: The difference between a Boolean Parameter and a Trigger is that a Trigger is
    temporality set to True and once the `SetTrigger(...)` event has been consumed
    by a state transition, it automatically returns to being False. So Triggers are
    useful for actions we wish to do once and then revert to a previous state. A Boolean
    Parameter is a variable, which can have its value set to True or False at different
    times during the game, and so different Transitions can be created to fire depending
    on the value of the variable at any time. Note that Boolean Parameters have to
    have their values explicitly set back to False with `SetBool(...)`.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔参数和触发器的区别在于，触发器被临时设置为True，一旦`SetTrigger(...)`事件被状态转换消耗，它将自动返回到False。因此，触发器适用于我们希望执行一次然后恢复到之前状态的行动。布尔参数是一个变量，可以在游戏的不同时间将其值设置为True或False，因此可以创建不同的过渡，根据变量在任何时间的值来触发。请注意，布尔参数必须使用`SetBool(...)`显式地将值设置回False。
- en: 'The following screenshot highlights the line of code that sends the `SetTrigger(...)`
    message:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图突出了发送`SetTrigger(...)`消息的代码行：
- en: '![](img/b78d2caa-e14b-4bcc-9d8d-71b1e841aa25.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b78d2caa-e14b-4bcc-9d8d-71b1e841aa25.png)'
- en: State Machines for animations of a range of motions (running/walking/jumping/falling/dying)
    will have more States and Transitions. The Unity-provided potato-man hero character
    has a more complex State Machine, and more complex animations (of hands and feet,
    and eyes and hat, and so on, for each Animation Clip), which you may find useful
    to explore.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 用于一系列动作（跑步/行走/跳跃/坠落/死亡）的动画状态机将具有更多状态和过渡。Unity提供的土豆人英雄角色具有更复杂的状态机，以及更复杂的动画（每个动画剪辑的手和脚、眼睛和帽子等），这可能对你探索这些内容很有用。
- en: Learn more about the Animation view on the Unity Manual web pages at [http://docs.unity3d.com/Manual/AnimationEditorGuide.html.](http://docs.unity3d.com/Manual/AnimationEditorGuide.html.)
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity手册网页上了解更多关于动画视图的信息：[http://docs.unity3d.com/Manual/AnimationEditorGuide.html.](http://docs.unity3d.com/Manual/AnimationEditorGuide.html.)
- en: Creating a three-frame animation clip to make a platform continually animate
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个三帧动画剪辑以使平台持续动画
- en: 'In this recipe, we''ll make a wooden-looking platform continually animate,
    moving upwards and downwards. This can be achieved with a single three-frame Animation
    Clip (starting at top, position at bottom, top position again):'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在此配方中，我们将制作一个看起来像木头的平台持续动画，上下移动。这可以通过一个三帧的动画剪辑（从顶部开始，位置到底部，然后再次回到顶部位置）来实现：
- en: '![](img/590282c7-7967-4478-8da3-285aa282d44a.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/590282c7-7967-4478-8da3-285aa282d44a.png)'
- en: Getting ready
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe builds on the previous one, so make a copy of that project, and
    work on the copy for this recipe.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方基于上一个配方，因此复制该项目，并在此配方中对其副本进行操作。
- en: How to do it...
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To create a continually-moving animated platform, follow these steps:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个持续移动的动画平台，请按照以下步骤操作：
- en: Drag an instance of the platformWoodBlocks sprite from the Project | Sprites
    folder into the **Scene**. Position this GameObject at (-4, -5, 0), so that these
    wood blocks are neatly to the left, and slightly below, the wall blocks platform.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将平台木块精灵实例从“项目 | 精灵”文件夹拖动到**场景**中。将此GameObject定位在(-4, -5, 0)，这样这些木块就整齐地位于墙块平台的左侧，并且略微低于平台。
- en: 'Add a Box Collider 2D component to the platformWoodBlocks GameObject so that
    the player''s character can stand on this platform too. Choose menu: Add Component
    | Physics 2D | Box Collider 2D.'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向**平台木块**GameObject添加一个Box Collider 2D组件，以便玩家角色也能站在这个平台上。选择菜单：添加组件 | 物理 2D |
    Box Collider 2D。
- en: Create a new folder named Animations, in which to store the Animation Clip and
    controller we'll create next.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为“动画”的新文件夹，用于存储我们将创建的动画剪辑和控制器。
- en: Ensuring the platformWoodBlocks GameObject is still selected in the **Hierarchy**,
    open an **Animation** panel, and ensure it is in Dope Sheet view (this is the
    default).
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保**平台木块**GameObject仍然被选中在**层次结构**中，打开一个**动画**面板，并确保它处于Dope Sheet视图（这是默认视图）。
- en: Click the **Animation** panel's Create button, and save the new clip in your
    new Animation folder, naming it platform-wood-moving-up-down.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**动画**面板的创建按钮，并将新剪辑保存在您的新动画文件夹中，命名为platform-wood-moving-up-down。
- en: 'Click the Add Property button, choose Transform, and the click the plus-sign
    by Position. We are now ready to record changes to the (X, Y, Z) position of the platformWoodBlocks GameObject
    in this Animation Clip:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加属性**按钮，选择Transform，然后点击位置旁边的加号。我们现在准备好记录在此动画剪辑中对**平台木块**GameObject的(X,
    Y, Z)位置所做的更改：
- en: '![](img/e77cbeb9-d991-49aa-994f-3d944fe7a227.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e77cbeb9-d991-49aa-994f-3d944fe7a227.png)'
- en: You should now see 2 keyframes at 0.0 and at 1.0\. These are indicated by diamonds
    in the Timeline area in the right-hand section of the **Animation** panel.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您现在应该看到在0.0和1.0处有两个关键帧。这些在**动画**面板右侧部分的“时间轴”区域由菱形表示。
- en: 'We need 3 keyframes, with the new one at `2:00` seconds. Click at 2:00 in the
    Timeline along the top of the Animation panel, so that the red line for the current
    playhead time is at time 2:00\. Then click the diamond + button to create a new
    keyframe at the current playhead time:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要3个关键帧，新关键帧在`2:00`秒处。在动画面板顶部的2:00处单击，以便当前播放头时间的红色线位于2:00处。然后单击菱形+按钮在当前播放头时间创建一个新的关键帧：
- en: '![](img/bc5beb79-2670-47c1-9c6e-98e6c67f2320.png)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/bc5beb79-2670-47c1-9c6e-98e6c67f2320.png)'
- en: The first and third keyframes are fine – they record the current height of the
    wood platform at Y= -5\. We need to make the middle keyframe record the height
    of the platform at the top of its motion, and Unity in-betweening will do all
    the rest of the animation work for us.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一个和第三个关键帧是好的——它们记录了木平台在Y= -5处的当前高度。我们需要使中间关键帧记录平台在运动顶部的位置，Unity将为我们完成所有其余的动画工作。
- en: Select the middle keyframe (at time 1:00), by clicking on the diamond at time
    1:00 (they should both turn blue, and the red playhead vertical line should move
    to 1:00, to indicate the middle keyframe is being edited).
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过单击时间1:00处的菱形来选择中间关键帧（在时间1:00处），它们都应该变成蓝色，并且红色播放头垂直线应移动到1:00，以指示正在编辑中间关键帧。
- en: Click the red Record cirle button to start recording changes.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击红色录音圆按钮开始记录更改。
- en: In the **Inspector**, change the Y-position of the platform to 0\. You should
    see that all three X, Y, and Z values have a red background in the **Inspector** –
    this is to inform you that the values of the Transform component are being recorded
    in the Animation Clip.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**检查器**中，将平台的Y位置更改为0。你应该会看到所有三个X、Y和Z值在**检查器**中都有红色背景——这是为了通知你Transform组件的值正在记录在动画剪辑中。
- en: Click the red Record circle button again, to finish recording changes.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次点击红色记录圆圈按钮，以完成更改的记录。
- en: Save and run your Scene. The wooden platform should now be animating continuously,
    moving smoothly up and down the positions we set up.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并运行您的场景。现在，木平台应该正在连续动画，平滑地上下移动到我们设置的位置。
- en: If you want the potatoman character to be able to jump when on the moving wooden
    block, you'll need to select the block GameObject and set its layer to Ground.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想让potatoman角色能够在移动的木块上跳跃，你需要选择该块GameObject并将其层设置为地面。
- en: How it works...
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: You have added an animation to the platformWoodBlocks GameObject. This animation
    contains three keyframes. A keyframe represents the values of properties of the
    object at a point in time. The first keyframe stores a Y-value of -4, the second
    keyframe a Y-value of 0, and the final keyframe -4 again. Unity calculates all
    the in-between values for us, and the result is a smooth animation of the Y-position
    of the platform.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 您已将动画添加到platformWoodBlocks GameObject。此动画包含三个关键帧。关键帧表示对象在某一时间点的属性值。第一个关键帧存储Y值为-4，第二个关键帧Y值为0，最后一个关键帧再次为-4。Unity为我们计算所有中间值，结果是平台Y位置的平滑动画。
- en: There's more...
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多...
- en: Here are some suggestions for enhancing this recipe.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些增强此配方的建议。
- en: Copy animation relative to a new parent GameObject
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将动画相对于新的父GameObject进行复制
- en: If we wanted to duplicate the moving platform, simply duplicating the platformWoodBlocks
    GameObject in the **Hierarchy** and moving the copy won't work – since when you
    run the **Scene** each duplicate would be animated back to the location of the
    original animation frames (that is, all copies would be positioned and moving
    in the original location).
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要复制移动平台，简单地复制platformWoodBlocks GameObject在**层次结构**中并移动副本将不起作用——因为当你运行**场景**时，每个副本都会被动画回原始动画帧的位置（即，所有副本都会定位并移动到原始位置）。
- en: The solution is first to create a new, empty GameObject (named movingBlockParent),
    and then a platformWoodBlocks parent to this GameObject. Now we can duplicate
    the movingBlockParent GameObject (and its platformWoodBlocks child) to create
    more moving blocks in our scene that each move relative to where the parent GameObject
    is located at **Design-Time**.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案是首先创建一个新的空GameObject（命名为movingBlockParent），然后创建一个platformWoodBlocks父GameObject。现在我们可以复制movingBlockParent
    GameObject（及其platformWoodBlocks子GameObject）来创建更多移动的方块，这些方块在场景中相对于父GameObject的位置**设计时**移动。
- en: Making a platform start falling once stepped on using a Trigger to move animation
    from one state to another
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用触发器将动画从一个状态移动到另一个状态，使平台一旦被踩到就开始下落
- en: In many cases, we don't want an animation to begin until some condition has
    been met, or some event has occurred. In these cases, a good way to organize the
    Animator Controller is to have two animation states (clips) and a Trigger on the
    Transition between the clips. We use code to detect when we want the animation
    to start playing, and at that time we send the Trigger message to the Animation
    Controller, causing the Transition to start.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，我们不想在满足某些条件或发生某些事件之前开始动画。在这些情况下，组织Animator Controller的一个好方法是在两个动画状态（剪辑）之间设置一个触发器。我们使用代码检测何时想要动画开始播放，并在那时向动画控制器发送触发器消息，从而开始过渡。
- en: 'In this recipe, we''ll create a water platform block in our 2D platform game;
    such blocks will begin to slowly fall down the screen as soon as they have been
    stepped on, and so the player must keep on moving otherwise they''ll fall down
    the screen with the blocks too! It looks as follows:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在此配方中，我们将在我们的2D平台游戏中创建一个水平台方块；这些方块一旦被踩到，就会开始慢慢向下屏幕落下，因此玩家必须继续移动，否则他们也会随着方块一起掉落屏幕！它看起来如下：
- en: '![](img/0263dd00-96dd-4c36-96e0-ff5cfcb501c3.png)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0263dd00-96dd-4c36-96e0-ff5cfcb501c3.png)'
- en: Getting ready
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe builds on the previous one, so make a copy of that project, and
    work on the copy for this recipe.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方基于之前的配方，因此复制该项目，并在副本上工作以进行此配方。
- en: How to do it...
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To construct an animation that only plays once a Trigger has been received,
    follow these steps:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建一个只有在接收到触发器后才会播放的动画，请遵循以下步骤：
- en: In the **Hierarchy**, create an Empty GameObject named water-block-container,
    positioned at (2.5, -4, 0). This empty GameObject will allow us to make duplicates
    of animated Water Blocks that will animate relative to their parent GameObject
    position.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**层次结构**中创建一个名为water-block-container的空GameObject，位置在(2.5, -4, 0)。这个空GameObject将允许我们制作动画Water
    Block的副本，这些副本将相对于其父GameObject的位置进行动画。
- en: 'Drag an instance of the Water Block sprite from the Project | Sprites folder
    into the scene and child it to the water-block-container GameObject. Ensure the
    position of your new child Water Block GameObject is (0, 0, 0), so that it appears
    neatly to right of the wall blocks platform:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Project | Sprites文件夹中的Water Block精灵实例拖动到场景中，并将其子对象设置为water-block-container
    GameObject。确保你的新子Water Block GameObject的位置是(0, 0, 0)，这样它就会整齐地出现在墙块平台右侧：
- en: '![](img/00271829-245c-4049-8d08-667da1aaf94e.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00271829-245c-4049-8d08-667da1aaf94e.png)'
- en: Add a Box Collider 2D component to the child Water Block GameObject, and set
    the layer of this GameObject to Ground, so that the player's character can stand
    and jump on this water block platform.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向child Water Block GameObject添加一个Box Collider 2D组件，并将此GameObject的层设置为Ground，以便玩家的角色可以站在这个水块平台上跳跃。
- en: Ensuring the child Water Block GameObject is selected in the **Hierarchy**,
    open an **Animation** panel, then create a new clip named platform-water-up, saving
    it in your Animations folder.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在**层次结构**中选择child Water Block GameObject，打开**动画**面板，然后创建一个名为platform-water-up的新剪辑，并将其保存在你的动画文件夹中。
- en: 'Create a second Animation Clip, named platform-water-down. Again, click the      Add Property button, chose Transform and Position, and delete the second keyframe
    at 1:00.'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建第二个动画剪辑，命名为platform-water-down。再次点击“添加属性”按钮，选择变换和位置，并删除1:00处的第二个关键帧。
- en: With the first keyframe at 0:00 selected, click the red Record button once to
    start recording changes, and set the Y-value of the GameObject's Transform Position
    to -5\. Press the red Record button again to stop recording changes. You have
    now completed the creation of the water-block-down Animation Clip, so you can
    click the red Record button to stop recording.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择0:00的第一个关键帧，点击一次红色记录按钮开始记录更改，并将GameObject的变换位置Y值设置为-5。再次按下红色记录按钮停止记录更改。你现在已经完成了water-block-down动画剪辑的创建，因此可以点击红色记录按钮停止记录。
- en: 'You may have noticed that as well as the up/down Animation Clips that you created,
    another file was created in your Animations folder, an Animator Controller named
    Water Block. Select this file and open the Animator panel, to see and edit the
    State Machine diagram:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可能已经注意到，除了你创建的上下动画剪辑外，在动画文件夹中还创建了一个名为Water Block的动画控制器文件。选择此文件并打开动画器面板，以查看和编辑状态机图：
- en: '![](img/358a7bc4-2f68-4a2d-9d1e-308c7507c1d4.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![](img/358a7bc4-2f68-4a2d-9d1e-308c7507c1d4.png)'
- en: Currently, although we created 2 Animation Clips (states), only the Up state
    is ever active. This is because when the scene begins (Entry), the object will
    immediately go in the platform-water-up state, but since there are no Transition
    arrows from this state to platform-water-down, at present the Water Block GameObject
    will always be in its Up state.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目前，尽管我们创建了2个动画剪辑（状态），但只有Up状态始终处于活动状态。这是因为当场景开始时（入口），对象将立即进入platform-water-up状态，但由于没有从这个状态到platform-water-down的过渡箭头，目前Water
    Block GameObject将始终处于其Up状态。
- en: Ensure the platform-water-up state is selected (it will have a blue border around
    it), and create a Transition (arrow) to the platform-water-down state by choosing
    Make Transition from the mouse-right-click menu.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保选择platform-water-up状态（它周围将有一个蓝色边框），然后通过鼠标右键点击菜单中的Make Transition选项创建一个到platform-water-down状态的过渡（箭头）。
- en: If you run the Scene now, the default Transition settings are that after 0.75
    seconds (default Exit Time), the Water Block will Transition into their Down state.
    We don't want this – we only want them to animate downwards after the player has
    walked onto them.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你现在运行场景，默认的过渡设置是在0.75秒（默认退出时间）后，Water Block将过渡到其下状态。我们不想这样——我们只想在玩家走上它们之后让它们向下动画。
- en: Create a Trigger named Fall, by choosing the Parameters tab in the **Animator**
    panel, clicking the + button and selecting Trigger, and then selecting Fall.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在**动画器**面板中选择参数选项卡，点击+按钮并选择触发器，然后选择Fall来创建一个名为Fall的触发器。
- en: 'Do the following to create the transition to wait for our Trigger:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按以下步骤创建等待触发器的过渡：
- en: In the **Animator** panel, select the Transition
  id: totrans-232
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**动画**面板中，选择过渡
- en: In the **Inspector** panel, uncheck the Has Exit Time option
  id: totrans-233
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**检查器**面板中，取消选中Has Exit Time选项
- en: Set Transition Duration to 3.0 (so the Water Block slowly Transitions to its
    Down state over a period of 2 seconds)
  id: totrans-234
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将过渡持续时间设置为3.0（这样水块将在2秒内缓慢过渡到其下状态）
- en: 'In the **Inspector** panel, click the + button to add a Condition, which should
    automatically suggest the only possible Condition Parameter, which is our Trigger
    Fall:'
  id: totrans-235
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**检查器**面板中，点击+按钮添加一个条件，它应该自动建议唯一的可能条件参数，即我们的触发下落：
- en: '![](img/54ab75e5-9694-401e-9f4d-09b2ad981672.png)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/54ab75e5-9694-401e-9f4d-09b2ad981672.png)'
- en: An alternative to setting the Transition Duration numerically is to drag the
    Transition end time to 3:00 seconds in the Animation Timeline offered under the
    Transition Settings in the **Inspector.**
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 设置过渡持续时间的另一种方法是，在**检查器**中过渡设置提供的动画时间轴上拖动过渡结束时间到3:00秒。
- en: We need to add a Collider trigger just above the Water Block, and a C# script
    class behavior to send the Animator Controller Trigger when the player enters
    the collider.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要在水块上方添加一个Collider触发器，并为玩家进入Collider时发送Animator Controller触发器消息添加一个C#脚本类行为。
- en: 'Ensure the child Water Block GameObject is selected, add a (second) 2D Box
    Collider, with a Y-Offset of 1, and tick its Is Trigger checkbox:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保选中子Water Block GameObject，添加一个（第二个）2D Box Collider，Y偏移量为1，并勾选其Is Trigger复选框：
- en: '![](img/de60ef89-cf02-4cf5-96b1-ff5241ea0328.png)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/de60ef89-cf02-4cf5-96b1-ff5241ea0328.png)'
- en: 'Create a C# script class named WaterBlock, and add an instance object as a
    component to the child Water Block GameObject:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为WaterBlock的C#脚本类，并将实例对象作为组件添加到子Water Block GameObject：
- en: '[PRE3]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Make 6 more copies of water-block-container GameObject, with X positions increasing
    by 1 each time, that is, 3.5, 4.5, 5.5, and so on.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将water-block-container GameObject复制6次，每次X位置增加1，即3.5、4.5、5.5等等。
- en: Run the **Scene**, and as the player's character runs across each water block
    they will start falling down, so he had better keep running!
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行**场景**，当玩家的角色跑过每个水块时，它们将开始下落，所以他最好继续跑！
- en: How it works...
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: You created a two-state Animator Controller state machine. Each state was an
    Animation Clip. You created a Transition from the Water Block Up state to its
    Down state that will take place when the Animator Controller received a Fall Trigger
    message. You created a Box Collider 2D with a Trigger, so that the scripted WaterBlock component
    could be detected when the player (tagged Player) enters its collider, and at
    that point send the Fall Trigger message to make the Water Block GameObject start
    gently Transitioning into its Down state further down the screen.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 您创建了一个两状态Animator Controller状态机。每个状态都是一个动画剪辑。您创建了一个从水块上状态到其下状态的过渡，当Animator
    Controller接收到下落触发器消息时将发生此过渡。您创建了一个带有触发器的Box Collider 2D，以便当玩家（标记为Player）进入其Collider时，可以检测到脚本WaterBlock组件，并在此点发送下落触发器消息，使水块GameObject开始逐渐过渡到屏幕下方的下状态。
- en: Learn more about the Animator Controllers on the Unity Manual web pages at [http://docs.unity3d.com/Manual/class-AnimatorController.html](http://docs.unity3d.com/Manual/class-AnimatorController.html).
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity Manual网页上了解更多关于Animator Controllers的信息：[http://docs.unity3d.com/Manual/class-AnimatorController.html](http://docs.unity3d.com/Manual/class-AnimatorController.html)。
- en: Creating animation clips from sprite sheet sequences
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从精灵图集序列创建动画剪辑
- en: 'The traditional method of animation involved hand-drawing many images, each
    slightly different, which displayed quickly frame-by-frame to give the appearance
    of movement. For computer game animation, the term Sprite Sheet is given to the
    image file that contains one or more sequences of sprite frames. Unity provides
    tools to break up individual sprite images into large Sprite Sheet files, so that
    individual frames, or sub-sequences of frames, can be used to create Animation
    Clips that can become States in Animator Controller State Machines. In this recipe,
    we''ll import and break up an open source monster sprite sheet into three animation
    clips for Idle, Attack, and Death, which looks as shown:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的动画方法涉及手工绘制许多略有不同的图像，这些图像快速逐帧显示，以产生运动的外观。对于计算机游戏动画，Sprite Sheet这个术语用于包含一个或多个精灵帧序列的图像文件。Unity提供工具将单个精灵图像拆分成大型的Sprite
    Sheet文件，以便可以使用单个帧或帧的子序列来创建动画剪辑，这些动画剪辑可以成为Animator Controller状态机中的状态。在这个菜谱中，我们将导入并拆分一个开源怪物精灵图集到三个动画剪辑中，用于空闲、攻击和死亡，看起来如下所示：
- en: '![](img/2588e576-d7f4-4d23-aa4a-d1cca4439016.png)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2588e576-d7f4-4d23-aa4a-d1cca4439016.png)'
- en: Getting ready
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备中
- en: For all the recipes in this chapter, we have prepared the sprite images you
    need in folder `08_04`. Many thanks to Rosswet Mobile for making these Sprites
    available as **Open Source** at [http://www.rosswet.com/wp/?p=156](http://www.rosswet.com/wp/?p=156).
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章中的所有食谱，我们已经在文件夹 `08_04` 中准备了所需的精灵图像。感谢 Rosswet Mobile 使这些精灵以 **开源** 的形式在
    [http://www.rosswet.com/wp/?p=156](http://www.rosswet.com/wp/?p=156) 可用。
- en: How to do it...
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'To create an animation from a sprite sheet of frame-by-frame animation images,
    follow these steps:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 要从逐帧动画图像的精灵图中创建动画，请按照以下步骤操作：
- en: Create a new Unity 2D project.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 Unity 2D 项目。
- en: Import the provided image: monster1.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入提供的图像：monster1。
- en: 'With the monster1 image selected in the **Project** panel, change its Sprite
    mode to Multiple in the **Inspector**, the click the Apply button at the bottom
    of the panel:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **项目** 面板中选中 monster1 图像，在 **检查器** 中将其 Sprite 模式更改为 Multiple，然后点击面板底部的 Apply
    按钮：
- en: '![](img/22010931-5a11-4c12-9251-5f8080a62e71.png)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![](img/22010931-5a11-4c12-9251-5f8080a62e71.png)'
- en: In the **Inspector**, open the Sprite Editor panel by clicking the Sprite Editor button.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **检查器** 中，通过点击 Sprite Editor 按钮打开 Sprite 编辑器面板。
- en: 'In the Sprite Editor, open the Slice drop-down dialog, set the Type to Grid,
    set the grid PixelSize to 64x64, and then click the Slice button. For Type, choose
    the drop-down option Grid by CellSize, and set X and Y to 64\. Click the Slice
    button, and then the Apply button in the bar at the top right of the Sprite Editor
    panel:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Sprite 编辑器中，打开 Slice 下拉对话框，将类型设置为 Grid，将网格像素大小设置为 64x64，然后点击 Slice 按钮。对于类型，选择
    Grid by CellSize，并将 X 和 Y 设置为 64。点击 Slice 按钮，然后在 Sprite 编辑器面板右上方的栏中点击 Apply 按钮：
- en: '![](img/2b65dbf0-5aca-4d64-b266-ee38dcd0fb3b.png)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2b65dbf0-5aca-4d64-b266-ee38dcd0fb3b.png)'
- en: 'In the **Proje****ct** panel, you can now click the expand triangle button
    on the right-hand side of the sprite, and you''ll see all the different child
    frames for this sprite (as highlighted in the following screenshot):'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **项目** 面板中，你现在可以点击精灵右侧的展开三角形按钮，你会看到这个精灵的所有不同子帧（如下面的截图所示）：
- en: '![](img/d58f545f-6bdc-4ff2-a792-777c5fa68c1b.png)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d58f545f-6bdc-4ff2-a792-777c5fa68c1b.png)'
- en: Create a folder named Animations.
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 Animations 的文件夹。
- en: 'In your new folder, create an Animator Controller asset file named monster-animator,
    choose **Project** panel menu: Create | Animator Controller.'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的新文件夹中，创建一个名为 monster-animator 的动画控制器资产文件，选择 **项目** 面板菜单：创建 | 动画控制器。
- en: In the scene, create a new Empty GameObject named monster1 (at position 0, 0,
    0), and drag your monster-animator into this GameObject.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在场景中，创建一个名为 monster1（位置为 0, 0, 0）的新空 GameObject，并将你的怪物动画器拖拽到这个 GameObject 上。
- en: With the monster1 GameObject selected in the **Hierarchy**, open up the **Animation**
    panel, and create a new Animation Clip named monster1-idle.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **层次结构** 中选中 monster1 GameObject，打开 **动画** 面板，创建一个名为 monster1-idle 的新动画剪辑。
- en: 'Select the monster1 image in the **Project** panel (in its expanded view),
    and select and drag the first 5 frames (frames monster1_0 .. monster1_4) into
    the **Animation** panel. Change the sample rate to 12 (since this animation was
    created to run at 12 frames per second):'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **项目** 面板中选中 monster1 图像（在其展开视图中），选择并拖动前 5 帧（monster1_0 到 monster1_4）到 **动画**
    面板。将样本率更改为 12（因为此动画是为每秒 12 帧而创建的）：
- en: '![](img/9958ebe0-5ffe-468f-bbe9-d153fb499d45.png)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9958ebe0-5ffe-468f-bbe9-d153fb499d45.png)'
- en: If you look at the State Chart for monster-animator, you'll see it has a default
    state (clip) named monster-idle.
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你查看 monster-animator 的状态图，你会看到它有一个默认状态（剪辑）名为 monster-idle。
- en: 'When you run your **Scene**, you should now see the monster1 GameObject animating
    in its monster-idle state. You may wish to make the **Main Camera** size a bit
    smaller (size 1), since these are quite small sprites:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你运行你的 **场景** 时，你现在应该看到 monster1 GameObject 在其 monster-idle 状态中动画。你可能希望将 **主摄像机**
    的大小缩小一点（大小 1），因为这些精灵相当小：
- en: '![](img/2b4426f7-8de1-46c0-b82a-50f988d0d64a.png)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2b4426f7-8de1-46c0-b82a-50f988d0d64a.png)'
- en: How it works...
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Unity's Sprite Editor knows about Sprite Sheets, and once the correct grid size
    has been entered, it treats the items in each grid square inside the Sprite Sheet
    image as an individual image, or frame, of the animation. You selected sub-sequences
    of sprite animation frames and added them into several Animation Clips. You added
    an Animation Controller to your GameObject, and so each Animation Clip appears
    as a state in the Animation Controller State Machine.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: Unity的Sprite编辑器了解Sprite Sheets，一旦输入了正确的网格大小，它就会将Sprite Sheet图像中每个网格方格内的项目视为单个图像或动画的帧。您选择了精灵动画帧的子序列，并将它们添加到几个动画剪辑中。您为您的人物对象添加了动画控制器，因此每个动画剪辑都作为动画控制器状态机中的一个状态出现。
- en: You can now repeat the process, creating an Animation Clipmonster-attack with
    frames 8-12, and a third clip monster-death with frames 15-21\. You would then
    create Triggers and Transitions to make the monster GameObject transition into
    the appropriate states as the game is played.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以重复此过程，创建一个动画Clipmonster-attack，包含帧8-12，以及第三个动画clip monster-death，包含帧15-21。然后，您将创建触发器和转换，使怪物GameObject在游戏进行时过渡到适当的状态。
- en: Learn more about the Unity Sprite Editor from the Unity video tutorials at [https://unity3d.com/learn/tutorials/modules/beginner/2d/sprite-editor](https://unity3d.com/learn/tutorials/modules/beginner/2d/sprite-editor).
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity视频教程中了解更多关于Unity Sprite编辑器的信息：[https://unity3d.com/learn/tutorials/modules/beginner/2d/sprite-editor](https://unity3d.com/learn/tutorials/modules/beginner/2d/sprite-editor)。
- en: 'Learn more about 2D animation with Sprite Sheets in an article by John Horton
    on GameCodeOldSchool.com: [http://gamecodeschool.com/unity/simple-2d-sprite-sheet-animations-in-unity/](http://gamecodeschool.com/unity/simple-2d-sprite-sheet-animations-in-unity/).'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在John Horton在GameCodeOldSchool.com上的一篇文章中了解更多关于使用Sprite Sheets进行2D动画的信息：[http://gamecodeschool.com/unity/simple-2d-sprite-sheet-animations-in-unity/](http://gamecodeschool.com/unity/simple-2d-sprite-sheet-animations-in-unity/)。
- en: Creating a platform game with Tiles and Tilemaps
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Tile和Tilemaps创建平台游戏
- en: 'One of the powerful 2D tools introduced by Unity is the Tilemapper. In this
    recipe, we''ll create a simple 2D platformer, building a grid-based **Scene**
    using some free Tile **Sprite** images:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: Unity引入的强大2D工具之一是Tilemapper。在这个菜谱中，我们将创建一个简单的2D平台游戏，使用一些免费的Tile **Sprite**图像构建基于网格的**场景**：
- en: '![](img/6430c93a-ac65-40d5-b1d5-1e94da59a96f.png)'
  id: totrans-280
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6430c93a-ac65-40d5-b1d5-1e94da59a96f.png)'
- en: Getting ready
  id: totrans-281
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we have prepared the Unity package and images you need in folder
    `08_07`.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，我们在文件夹`08_07`中准备了所需的Unity包和图像。
- en: 'Special thanks to GameArt2D.com for publishing the Desert image Sprites with
    the Creative Commons Zero licence: [https://www.gameart2d.com/free-desert-platformer-tileset.html](https://www.gameart2d.com/free-desert-platformer-tileset.html).'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 特别感谢GameArt2D.com发布带有Creative Commons Zero许可的Desert图像Sprites：[https://www.gameart2d.com/free-desert-platformer-tileset.html](https://www.gameart2d.com/free-desert-platformer-tileset.html)。
- en: How to do it...
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'To create a platform game with Tiles and Tilemaps, follow these steps:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Tile和Tilemaps创建平台游戏，请按照以下步骤操作：
- en: Create a new Unity 2D project.
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的Unity 2D项目。
- en: Import the provided images.
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入提供的图像。
- en: 'The tile Sprites we''ve using for this recipe are 128 x 128 pixels. It''s important
    to ensure that we set the pixels per unit to 128, so that our Sprite images will
    map to a grid of 1 x 1 Unity units. Select all the Sprites in the Project | DesertTilePack
    | Tile folder, and in the **Inspector** set Pixels per Unit to 128:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在这个菜谱中使用的Tile Sprites大小为128 x 128像素。确保我们将每单位像素设置为128，这样我们的Sprite图像就会映射到1 x
    1 Unity单位的网格。选择Project | DesertTilePack | Tile文件夹中的所有Sprites，并在**检查器**中将每单位像素设置为128：
- en: '![](img/cbb2b25b-09b7-4d37-b74e-3a00243319fd.png)'
  id: totrans-289
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/cbb2b25b-09b7-4d37-b74e-3a00243319fd.png)'
- en: 'Display the **Til****e Palette** panel, by choosing menu: Window | 2D | Tile
    Palette.'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示**Til****e Palette**面板，通过选择菜单：窗口 | 2D | Tile Palette。
- en: In the **Project** panel, create a new folder named Palettes (this is where
    you'll save your TilePalette assets).
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**项目**面板中，创建一个名为Palettes的新文件夹（这是保存你的TilePalette资产的地方）。
- en: 'Click the Create New Palette button in the Tile Palette panel, and create a
    new Tile Palette named DesertPalette:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Tile Palette面板中点击创建新调色板按钮，并创建一个名为DesertPalette的新Tile Palette：
- en: '![](img/3e89f6c6-fd1c-4184-b5ad-65c4141b3ebb.png)'
  id: totrans-293
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3e89f6c6-fd1c-4184-b5ad-65c4141b3ebb.png)'
- en: In the **Proje****ct** panel, create a new folder named Tiles (this is where
    to save your Tile assets).
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**项目**面板中，创建一个名为Tiles的新文件夹（这是保存你的Tile资产的地方）。
- en: 'Ensure Tile Palette DesertPalette is selected in the Tile Palette panel, select
    all the Sprites in the Project | DesertTilePack | Tile folder, and drag them into
    the Tile Palette panel. When asked where to save these new Tile asset files, select
    your new Assets | Tiles folder. You should now have 16 Tile assets in your Tiles
    folder, and these Tiles should be available to work with in your DesertPalette
    in the **Tile Palette** panel:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在Tile Palette面板中选择了Tile Palette DesertPalette，选择Project | DesertTilePack |
    Tile文件夹中的所有Sprite，并将它们拖动到Tile Palette面板中。当被问及保存这些新的Tile资产文件的位置时，选择你的新Assets |
    Tiles文件夹。现在你应该在你的Tiles文件夹中有16个Tile资产，并且这些Tile应该在**Tile Palette**面板中的DesertPalette中可用：
- en: '![](img/b87af5f6-b6ba-475c-add2-a16f3fd630e3.png)'
  id: totrans-296
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b87af5f6-b6ba-475c-add2-a16f3fd630e3.png)'
- en: Drag Sprite BG from the Project panel, DesertTilePack, into the Scene. Resize
    the **Main Camera** (it should be Orthographic since this is a 2D project), so
    that the desert background fills the entire **Game** panel.
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目面板拖动Sprite BG到场景中，DesertTilePack，然后调整**主摄像机**的大小（由于这是一个2D项目，它应该是正交的），以便沙漠背景填满整个**游戏**面板。
- en: 'Add a Tilemap GameObject to the **Scene**, choose the create menu: 2D Object
    | Tilemap. You''ll see a Grid GameObject added, and as a child of that, you''ll
    see a Tilemap GameObject. Rename the Tilemap GameObject to Tilemap-platforms:'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向**场景**中添加一个Tilemap GameObject，选择创建菜单：2D Object | Tilemap。你会看到一个Grid GameObject被添加，并且作为它的子对象，你会看到一个Tilemap
    GameObject。将Tilemap GameObject重命名为Tilemap-platforms：
- en: '![](img/e702ff8a-6a6a-42d4-8482-db94fd7bd8b6.png)'
  id: totrans-299
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e702ff8a-6a6a-42d4-8482-db94fd7bd8b6.png)'
- en: Just as UI GameObjects are children of a Canvas, Tilemap GameObjects are children
    of a Grid.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 正如UI GameObjects是Canvas的子对象一样，Tilemap GameObjects是Grid的子对象。
- en: 'We can now start *painting *Tiles onto our Tilemap. Ensure Tilemap-platforms
    is selected in the **Hierarchy**, and that you can see the Tile Palette panel.
    In the Tile Palette panel, select the Paint with active brush tool (the *paintbrush*
    icon). Now click on a Tile in the Tile Palette panel, and then in the **Scene**
    panel, each time you click the mouse button you''ll be adding a Tile to Tilemap-platforms,
    automatically aligned with the grid:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以开始在Tilemap上*绘制*Tile了。确保在**层次结构**中选择Tilemap-platforms，并且你可以看到Tile Palette面板。在Tile
    Palette面板中，选择使用活动刷子工具（*画笔*图标）。现在点击Tile Palette面板中的一个Tile，然后在**场景**面板中，每次点击鼠标按钮你都会向Tilemap-platforms添加一个Tile，并自动与网格对齐：
- en: '![](img/01b27ea1-6df9-4c49-85f1-f8e8da10d2b4.png)'
  id: totrans-302
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/01b27ea1-6df9-4c49-85f1-f8e8da10d2b4.png)'
- en: If you want to delete a Tile, use Shift-Click over that grid position.
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想要删除一个Tile，使用Shift-Click在该网格位置上。
- en: Use the Tile Palette brush to paint two or three platforms.
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Tile Palette刷子绘制两个或三个平台。
- en: Add a suitable Collider to the Tilemap-platforms GameObject. Select the Tilemap-platforms GameObject
    in the **Hierarchy**, and in the **Inspector** add a Tilemap Collider 2D. Click
    Add Component then choose Tilemap | Tilemap Collider 2D.
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向Tilemap-platforms GameObject添加一个合适的Collider。在**层次结构**中选择Tilemap-platforms GameObject，在**检查器**中添加一个Tilemap
    Collider 2D。点击添加组件，然后选择Tilemap | Tilemap Collider 2D。
- en: Create a new Layer named Ground, and set the Tilemap-platforms GameObject to
    be on this Layer (this will allow characters to jump when standing on a platform).
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为Ground的新层，并将Tilemap-platforms GameObject设置在这个层上（这将允许角色在平台上站立时跳跃）。
- en: Let's test our platform **Scene** with a 2D character – we can reuse the potatoman
    character from Unity's free tutorials. Import the provided PotatoManAssets package
    into your project.
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们用二维角色来测试我们的**场景**平台——我们可以重用Unity免费教程中的potatoman角色。将提供的PotatoManAssets包导入到你的项目中。
- en: 'Let''s set up the 2D gravity setting for this project since the size of the
    potatoman character is big with respect to the platforms. We''ll make the character
    move slowly by having a heavy gravity setting of Y= -60\. Set 2D gravity to this
    value by choosing menu: Edit | Project Settings | Physics 2D, and then at the
    top change the Y value to -60.'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于potatoman角色的尺寸相对于平台较大，我们需要为这个项目设置2D重力设置。我们将通过设置Y= -60的重力设置来使角色移动缓慢。通过选择菜单：编辑
    | 项目设置 | 物理设置 2D，然后在顶部将Y值更改为-60来设置2D重力。
- en: Drag an instance of the potatoman hero character2D from the Project | Prefabs
    folder into the **Scene**. Position him somewhere above one of your platforms.
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目 | 预制体文件夹中将potatoman英雄角色2D的一个实例拖动到**场景**中。将他定位在你其中一个平台上方。
- en: Play the **Scene**. The 2D hero character should fall down and land on the platform.
    You should be able to move the character left and right, and make him jump using
    the *Space* key.
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 播放**场景**。2D英雄角色应该会掉落并落在平台上。你应该能够左右移动角色，并使用*空格*键使他跳跃。
- en: You may wish to decorate the scene by dragging some of the Objects Sprites onto
    the **Scene** (in the **Project** panel folder, Project | DesertTilePack | Object).
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可能希望通过将一些对象精灵拖放到**场景**（在**项目**面板文件夹中，项目 | DesertTilePack | 对象）来装饰场景。
- en: How it works...
  id: totrans-312
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: By having a set of platform Sprites that are all a regular size (128 x 128),
    it is straightforward to create a Tile Palette from those Sprites, and then to
    add a Grid and Tilemap to the **Scene**, allowing the Tile Palette brush to paint Tiles
    into the **Scene**.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 通过拥有一组所有都是常规大小（128 x 128）的平台精灵，可以直接从这些精灵中创建一个Tile调色板，然后添加一个网格和Tilemap到**场景**中，使得Tile调色板笔可以绘制Tile到**场景**中。
- en: You had to set the Sprite pixels per unit to 128, so each Tile maps to a 1 x
    1 Unity grid unit.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要将精灵的像素每单位设置为128，这样每个Tile就映射到1 x 1的Unity网格单位。
- en: You added a Tilemap Collider 2D to the Tilemap GameObject, so that characters
    (such as the potatoman) can interact with the platforms. By adding a Layer Ground,
    and setting the Tilemap GameObject to this Layer, jumping code in the potatoman
    character-controller script can test the Layer of the object being stood above,
    so that the jump action will only be possible when standing on a platform Tile.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 您已将Tilemap Collider 2D添加到Tilemap GameObject中，以便角色（如potatoman）可以与平台交互。通过添加一个Layer
    Ground，并将Tilemap GameObject设置为这个层，potatoman角色控制器脚本中的跳跃代码可以测试被站立在上面的对象的层，这样跳跃动作只有在站在平台Tile上时才可能发生。
- en: There's more...
  id: totrans-316
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多内容...
- en: Here are some suggestions for enhancing this recipe.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些增强这个食谱的建议。
- en: Tile Palettes for objects and walls
  id: totrans-318
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对象和墙壁的Tile调色板
- en: The object Sprites in the Desert free pack are all different sizes, and certainly
    not consistent with the 128 x 128 Sprite size for the platform Tiles.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 在沙漠免费包中的对象精灵大小各不相同，并且肯定与平台Tile的128 x 128精灵大小不一致。
- en: However, if the Sprites for the objects and walls in your game *are* the same
    size as your platform Sprites, you can create a Tile Palette for your objects,
    and paint them into the **Scene** using the Tile Palette brush.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果您的游戏中的对象和墙壁精灵与平台精灵大小相同，您可以为您的对象创建一个Tile调色板，并使用Tile调色板笔将它们绘制到**场景**中。
- en: Rule Tiles for intelligent Tile selection
  id: totrans-321
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 智能Tile选择规则Tile
- en: If you explore the 2D Extras Pack, or the 2D GameKit (see next recipe), you'll
    learn about Rule Tiles. These allow you to define rules about the choice of a
    Tile based on its neighbors. For example, you wouldn't put a platform top Tile
    immediately on top of another one, so Rule Tiles would place some kind of ground
    tile to be the Tile under the platform top tile. Rules can ensure the leftmost
    and rightmost tiles in a group select the Tiles with artwork for the edges, and
    so on.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您探索2D Extras Pack或2D GameKit（见下一个食谱），您将了解规则Tile。这些允许您根据Tile的邻居定义关于Tile选择的规定。例如，您不会立即在另一个平台Tile的顶部放置一个平台顶Tile，因此规则Tile会在平台顶Tile下方放置某种地面Tile。规则可以确保组中最左端和最右端的Tile选择边缘的艺术品Tile，等等。
- en: 'A good introduction to Rule Times can be found in this Unity live training
    video session: [https://unity3d.com/learn/tutorials/topics/2d-game-creation/using-rule-tiles-tilemap](https://unity3d.com/learn/tutorials/topics/2d-game-creation/using-rule-tiles-tilemap).'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个Unity现场培训视频会议中可以找到关于Rule Times的良好介绍：[https://unity3d.com/learn/tutorials/topics/2d-game-creation/using-rule-tiles-tilemap](https://unity3d.com/learn/tutorials/topics/2d-game-creation/using-rule-tiles-tilemap)。
- en: Learning more
  id: totrans-324
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习更多
- en: 'Here are some learning resources about Tilemapping:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些关于Tilemapping的学习资源：
- en: 'Unity TileMap tutorial: [https://unity3d.com/learn/tutorials/topics/2d-game-creation/intro-2d-world-building-w-tilemap](https://unity3d.com/learn/tutorials/topics/2d-game-creation/intro-2d-world-building-w-tilemap)'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity TileMap教程：[https://unity3d.com/learn/tutorials/topics/2d-game-creation/intro-2d-world-building-w-tilemap](https://unity3d.com/learn/tutorials/topics/2d-game-creation/intro-2d-world-building-w-tilemap)
- en: 'Unity tutorial TileMap assets: [https://oc.unity3d.com/index.php/s/VzImolXrvp3K2Q5/download](https://oc.unity3d.com/index.php/s/VzImolXrvp3K2Q5/download)'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity教程TileMap资源：[https://oc.unity3d.com/index.php/s/VzImolXrvp3K2Q5/download](https://oc.unity3d.com/index.php/s/VzImolXrvp3K2Q5/download)
- en: 'Lots of 2D Extra resources, free from Unity Technologies: [https://github.com/Unity-Technologies/2d-extras](https://github.com/Unity-Technologies/2d-extras)'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多来自Unity Technologies的2D额外资源：[https://github.com/Unity-Technologies/2d-extras](https://github.com/Unity-Technologies/2d-extras)
- en: 'Sean Duffy''s great tutorial on Tilemapping on the Ray Wenderlich site: [https://www.raywenderlich.com/188105/introduction-to-the-new-unity-2d-tilemap-system](https://www.raywenderlich.com/188105/introduction-to-the-new-unity-2d-tilemap-system)'
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sean Duffy 在 Ray Wenderlich 网站上的优秀 Tilemapping 教程：[https://www.raywenderlich.com/188105/introduction-to-the-new-unity-2d-tilemap-system](https://www.raywenderlich.com/188105/introduction-to-the-new-unity-2d-tilemap-system)
- en: Creating a game with the 2D Gamekit
  id: totrans-330
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 2D Gamekit 创建游戏
- en: 'A collection of Unity 2D tools has been combined to become the Unity 2D GameKit.
    In this recipe, we''ll create a simple 2D-platformer to explore some of the features
    offered by the 2D GameKit, including pressure plates, doors, and falling objects
    damaging enemies:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 将一系列 Unity 2D 工具组合在一起，成为 Unity 2D GameKit。在本食谱中，我们将创建一个简单的 2D 平台游戏，以探索 2D GameKit
    提供的一些功能，包括压力板、门和掉落物体伤害敌人：
- en: '![](img/46809072-b6bd-4e96-b122-6b5f504cb7cf.png)'
  id: totrans-332
  prefs: []
  type: TYPE_IMG
  zh: '![](img/46809072-b6bd-4e96-b122-6b5f504cb7cf.png)'
- en: Getting ready
  id: totrans-333
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe uses the free Unity Asset Store and Package Manager packages.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱使用免费的 Unity Asset Store 和包管理器包。
- en: How to do it...
  id: totrans-335
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To create a game with the **2D GameKit**, follow these steps:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用**2D GameKit**创建游戏，请按照以下步骤操作：
- en: Create a new Unity 2D project.
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 Unity 2D 项目。
- en: Use the Package Manager to install the Cinemachine and Post Processing packages
    (if these are installed, you'll get errors when downloading the 2D GameKit).
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用包管理器安装 Cinemachine 和后处理包（如果已安装，下载 2D GameKit 时会出现错误）。
- en: Import 2D GameKit (free from Unity Technologies) from the Asset Store.
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从资产商店导入 2D GameKit（免费来自 Unity Technologies）。
- en: Close and then re-open the Unity Editor.
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭并重新打开 Unity 编辑器。
- en: 'Create a new 2D GameKit**Scene**, by choosing menu: Kit Tools | Create New
    Scene. You''ll then be asked to name the **Scene**, and a new **Scene** asset
    file will be created in your Project | Assets folder. You''ll see there are quite
    a few special GameObjects in the **Hierarchy** of your new **Scene**:'
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择菜单：工具套件 | 创建新场景 创建一个新的 2D GameKit**场景**。然后您将被要求命名**场景**，并在您的项目 | 资产文件夹中创建一个新的**场景**资产文件。您会看到在您新**场景**的**层次结构**中有很多特殊游戏对象：
- en: '![](img/a0a8d52f-4abb-411a-8e38-e5a665a0d5de.png)'
  id: totrans-342
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a0a8d52f-4abb-411a-8e38-e5a665a0d5de.png)'
- en: As you can see, the new **Scene** starts off containing an animated 2D character
    (Ellen), and a small platform.
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如您所见，新的**场景**一开始包含一个动画 2D 角色（艾伦），以及一个小平台。
- en: In the **Inspector**, select the Tilemap child of the TilemapGrid GameObject –  we
    are getting ready to paint some Tiles onto this Tilemap GameObject.
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**检查器**中，选择 TilemapGrid 游戏对象的 Tilemap 子对象——我们正在为这个 Tilemap 游戏对象绘制一些瓦片。
- en: 'Display the Tile Palette, choose menu: Window | 2D | Tile Palette. Select TilesetGameKit,
    and click on the green-topped grass platform Tile. Select the Paint with active
    Brush tool (the *paintbrush* icon).'
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示瓦片调色板，选择菜单：窗口 | 2D | 瓦片调色板。选择 TilesetGameKit，然后点击绿色顶部的草地平台瓦片。选择使用活动画笔工具（*画笔*图标）进行绘制。
- en: Start painting grass-topped platforms onto the **Scene**. This is a Rule Tile,
    so it cleverly ensures that only the top Tiles in a touching group are painted
    with the grass-topped Tile. The other touching tiles (left/right/below) are painted
    with a brown, earthy Tile.
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始在**场景**上绘制草地顶部的平台。这是一个规则瓦片，因此它巧妙地确保只有接触组中顶部的瓦片被绘制为草地顶部的瓦片。其他接触的瓦片（左/右/下）被绘制为棕色、土质的瓦片。
- en: Create a wide, flat area, and then to the right of where Ellen starts, create
    a very tall wall of earth, too tall for Ellen to jump over.
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个宽阔平坦的区域，然后在艾伦开始的地方右边，创建一个非常高的土墙，对于艾伦来说太高了，跳不过去。
- en: Add four Spikes between Ellen and the earth wall, so she would get hurt trying
    to jump over them. Drag instances of the Spikes Prefab from  the 2DGameKit | Prefabs
    | Environment Project folder.
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在艾伦和地球墙壁之间添加四个尖刺，这样她尝试跳过它们时会受伤。从 2DGameKit | 预制件 | 环境 项目文件夹中拖动尖刺预制件的实例。
- en: 'To make things even harder, add a Chomper enemy between the Spikes and the
    earth wall! Drag an instance of the Chomper Prefab from the 2DGameKit | Prefabs
    | Enemies Project folder:'
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使事情更加困难，在尖刺和土墙之间添加一个 Chomper 敌人！从 2DGameKit | 预制件 | 敌人 项目文件夹中拖动 Chomper 预制件的实例：
- en: '![](img/2c611415-5bd6-4620-a10d-79892271ca6c.png)'
  id: totrans-350
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c611415-5bd6-4620-a10d-79892271ca6c.png)'
- en: We have to give Ellen some way to get past the earth wall that avoids the Spikes
    and Chomper obstacles. Let's add a Teleporter, to the left of where Ellen starts.
    Drag an instance of the Teleporter Prefab from the 2DGameKit | Prefabs | Interactables Project
    folder.
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们必须给艾伦一些绕过土墙的方法，避免尖刺和 Chomper 障碍物。让我们在艾伦开始的地方左边添加一个传送门。从 2DGameKit | 预制件 |
    交互式 项目文件夹中拖动传送门预制件的实例。
- en: Let's create a destination point for the Teleporter using a custom Sprite. Import
    the EnemyBug Sprite into this project, and drag an instance from the **Project**
    panel into the Scene – somewhere to the right of the earth wall.
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用自定义Sprite创建一个传送器的目的地点。将敌人虫子Sprite导入此项目，并将实例从**项目**面板拖入场景——在地球墙的右侧某个位置。
- en: Teleporters require a Transition Point component in the GameObject that is to
    be the destination of the teleportation. Add a Collider 2D to Enemy Bug, choose
    Add Component | Physics 2D | Box Collider 2D. Check its Is Trigger option.
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 传送器需要在目标GameObject中有一个**转换点组件**。向敌人虫子添加一个Collider 2D，选择添加组件 | 物理引擎 2D | 矩形碰撞器
    2D。检查其**触发器**选项。
- en: Add a Transition Point component to Enemy Bug, choose Add Component, search
    for Transition, and then add Transition Point.
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向敌人虫子添加一个转换点组件，选择添加组件，搜索转换，然后添加转换点。
- en: 'We can now set up the Teleporter. With the Teleporter selected in the **Hierarchy**,
    in the **Inspector** for the Transition Point (Script) component, do the following:'
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以设置传送器。在**层次结构**中选择传送器，在**检查器**的转换点（脚本）组件中，执行以下操作：
- en: 'Transitioning Game Object: Drag Ellen into this slot'
  id: totrans-356
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转换游戏对象：将艾伦拖入此槽位
- en: 'Transition Type: Choose Same Scene from the drop-down menu'
  id: totrans-357
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转换类型：从下拉菜单中选择**同一场景**
- en: 'Destination Transform: Drag Enemy Bug into this Transition Point slot'
  id: totrans-358
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目的地变换：将敌人虫子拖入此转换点槽位
- en: 'Transition When: Choose On Trigger Enter from the drop-down menu:'
  id: totrans-359
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转换时机：从下拉菜单中选择**触发器进入时**：
- en: '![](img/e4ca9c51-468f-49e7-802a-a2fbf1e431c0.png)'
  id: totrans-360
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e4ca9c51-468f-49e7-802a-a2fbf1e431c0.png)'
- en: Run the **Scene**. Ellen can safetly avoid the Spikes and Chomper by using the
    Teleporter.
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行**场景**。艾伦可以通过使用传送器安全地避开尖刺和咬合者。
- en: Let's make it a bit more interesting – having the Teleporter GameObject initially
    inactive (not visible or able to be interacted with), and adding a switch that
    Ellen has to hit to make the Teleporter active.
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们让它更有趣一些——让传送器GameObject最初处于非活动状态（不可见或无法交互），并添加一个艾伦必须按下的开关来激活传送器。
- en: Select the Teleporter GameObject in the **Hierarchy**, and uncheck its active
    box at the top-left of the **Inspector** – the GameObject should be invisible,
    and appear greyed out in the **Hierarchy**.
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**层次结构**中选择传送器GameObject，并在**检查器**的左上角取消其活动框——GameObject应该是不可见的，并在**层次结构**中显示为灰色。
- en: Add a single-use switch to the game, to the left of where Ellen starts. Drag
    an instance of the Single Use Switch from the 2DGameKit | Prefabs | Interactables Project
    folder.
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在游戏中添加一个单次使用的开关，位于艾伦开始的地方左侧。从2DGameKit | Prefabs | 交互式项目文件夹中拖动单次使用开关的一个实例。
- en: 'With the Single Use Switch selected in the **Hierarchy**, in the **Inspector**
    set the following:'
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**层次结构**中选择**单次使用开关**，在**检查器**中设置以下内容：
- en: Layers: Add Layer Player to the Interactable Layers (so the switch can be enabled
    by the Player colliding or firing a bullet)
  id: totrans-366
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 层：将**玩家层**添加到可交互层（这样开关可以通过玩家碰撞或射击子弹来启用）
- en: 'On Enter: Drag Teleporter into a free RunTime Only GameObject Slot, and change
    the action drop-down menu from No Function to GameObject | Set Active (bool),
    and then check the checkbox that appears.'
  id: totrans-367
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进入时：将传送器拖入一个仅运行时GameObject槽位，并将动作下拉菜单从无功能更改为GameObject | 设置活动（布尔值），然后检查出现的复选框。
- en: Run the **Scene**. Ellen now has to travel over to the switch, to reveal the
    Teleporter, which then leads her to safely transport to the Enemy Bug location,
    beyond the earth wall and away from danger.
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行**场景**。艾伦现在必须走到开关那里，以揭示传送器，然后它将她安全地运输到敌人虫子位置，越过地球墙，远离危险。
- en: How it works...
  id: totrans-369
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We have dipped our toes into the wide range of features of the 2D GameKit. Hopefully
    this recipe gives you an idea of how to work with the provided Prefabs, and also
    how to explore how custom artwork can be used, with appropriately-added components
    to create your own GameObjects using the features of the 2D GameKit.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经涉猎了2D GameKit广泛的功能范围。希望这个配方能给你一个如何使用提供的Prefab以及如何探索如何使用适当添加的组件来创建自己的GameObject使用2D
    GameKit功能的想法。
- en: 'If you look at the Ellen 2D character, you''ll see some scripted components
    that manage the character''s interaction with the 2D GameKit. These include:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看看艾伦2D角色，你会看到一些脚本组件，它们管理着角色与2D GameKit的交互。这些包括：
- en: 'CharacterController 2D: Movement and physics interactions'
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2D角色控制器：移动和物理交互
- en: 'Player Input: Keyboard/input control mapping, so you can change which keys/controller
    buttons control movement, jumping, and so on'
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 玩家输入：键盘/输入控制映射，以便您可以更改哪些键/控制器按钮控制移动、跳跃等
- en: 'Player Character: How characters interact with the 2D GameKit, including fighting
    (melee), damage, and bullet pool'
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 玩家角色：角色如何与2D游戏工具包交互，包括战斗（近战）、伤害和子弹池
- en: 'Learn more about Ellen and her component in the reference guide: [https://unity3d.com/learn/tutorials/projects/2d-game-kit/ellen?playlist=49633](https://unity3d.com/learn/tutorials/projects/2d-game-kit/ellen?playlist=49633).'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 在参考指南中了解更多关于艾伦及其组件的信息：[https://unity3d.com/learn/tutorials/projects/2d-game-kit/ellen?playlist=49633](https://unity3d.com/learn/tutorials/projects/2d-game-kit/ellen?playlist=49633).
- en: There's more...
  id: totrans-376
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Here are some learning resources about the Unity 2D GameKit:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些关于Unity 2D游戏工具包的学习资源：
- en: 'Unity''s 2D GameKit online tutorials/Reference guide/Advanced topics: [https://unity3d.com/learn/tutorials/s/2d-game-kit](https://unity3d.com/learn/tutorials/s/2d-game-kit)'
  id: totrans-378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity的2D游戏工具包在线教程/参考指南/高级主题：[https://unity3d.com/learn/tutorials/s/2d-game-kit](https://unity3d.com/learn/tutorials/s/2d-game-kit)
- en: 'Unity ''s official 2D GameKit forum: [https://forum.unity.com/threads/2d-game-kit-official-thread.517249/](https://forum.unity.com/threads/2d-game-kit-official-thread.517249/)'
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity官方2D游戏工具包论坛：[https://forum.unity.com/threads/2d-game-kit-official-thread.517249/](https://forum.unity.com/threads/2d-game-kit-official-thread.517249/)
- en: 'Asset Store 2D GameKit tutorial project: [https://assetstore.unity.com/packages/essentials/tutorial-projects/2d-game-kit-107098](https://assetstore.unity.com/packages/essentials/tutorial-projects/2d-game-kit-107098)'
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Asset Store 2D游戏工具包教程项目：[https://assetstore.unity.com/packages/essentials/tutorial-projects/2d-game-kit-107098](https://assetstore.unity.com/packages/essentials/tutorial-projects/2d-game-kit-107098)
- en: 'Series of YouTube video tutorials from Unity Technologies entitled Getting
    Started with 2D Game Kits:'
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity Technologies制作的系列YouTube视频教程，标题为“2D游戏工具包入门”：
- en: 'Overview and Goals [1/8]: [https://www.youtube.com/watch?v=cgqIOWu8W1c](https://www.youtube.com/watch?v=cgqIOWu8W1c)'
  id: totrans-382
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 概述和目标 [1/8]：[https://www.youtube.com/watch?v=cgqIOWu8W1c](https://www.youtube.com/watch?v=cgqIOWu8W1c)
- en: 'Ellen and Placing Hazards [2/8] Live 2018/2/21: [https://www.youtube.com/watch?v=V2_vj_bbB4M](https://www.youtube.com/watch?v=V2_vj_bbB4M)'
  id: totrans-383
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 艾伦和放置危险物 [2/8] 2018/2/21：[https://www.youtube.com/watch?v=V2_vj_bbB4M](https://www.youtube.com/watch?v=V2_vj_bbB4M)
- en: 'Adding Moving Platforms [3/8]: [https://www.youtube.com/watch?v=SfC3qYz4gAI](https://www.youtube.com/watch?v=SfC3qYz4gAI)'
  id: totrans-384
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加移动平台 [3/8]：[https://www.youtube.com/watch?v=SfC3qYz4gAI](https://www.youtube.com/watch?v=SfC3qYz4gAI)
- en: 'Doors and Destructible Objects [4/8]: [https://www.youtube.com/watch?v=-hj6HnbI7PE](https://www.youtube.com/watch?v=-hj6HnbI7PE)'
  id: totrans-385
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 门窗和可破坏物体 [4/8]：[https://www.youtube.com/watch?v=-hj6HnbI7PE](https://www.youtube.com/watch?v=-hj6HnbI7PE)
- en: 'Adding and Squishing Enemies [5/8]: [https://www.youtube.com/watch?v=WRKG_DDlUnQ](https://www.youtube.com/watch?v=WRKG_DDlUnQ)'
  id: totrans-386
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加并挤压敌人 [5/8]：[https://www.youtube.com/watch?v=WRKG_DDlUnQ](https://www.youtube.com/watch?v=WRKG_DDlUnQ)
- en: 'Using The Inventory System [7/8]: [https://youtu.be/LYQz-mtr90U](https://youtu.be/LYQz-mtr90U)'
  id: totrans-387
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用物品系统 [7/8]：[https://youtu.be/LYQz-mtr90U](https://youtu.be/LYQz-mtr90U)
- en: 'Teleporting and Dialog Boxes [8/8]: [https://www.youtube.com/watch?v=gZ_OZL57c0g](https://www.youtube.com/watch?v=gZ_OZL57c0g)'
  id: totrans-388
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传送和对话框 [8/8]：[https://www.youtube.com/watch?v=gZ_OZL57c0g](https://www.youtube.com/watch?v=gZ_OZL57c0g)
