["```cs\n    dotnet new classlib -o Uqs.Customer -f net6.0\n    dotnet new xunit -o Uqs.Customer.Tests.Unit -f net6.0\n    ```", "```cs\n    dotnet new sln\n    dotnet sln add Uqs.Customer\n    dotnet sln add Uqs.Customer.Tests.Unit\n    ```", "```cs\n    dotnet add Uqs.Customer.Tests.Unit reference Uqs.Customer\n    ```", "```cs\nnamespace Uqs.Customer.Tests.Unit;\npublic class ProfileServiceTests\n{\n    [Fact]\n    public void\n       ChangeUsername_NullUsername_ArgumentNullException()\n    {\n        // Arrange\n        var sut = new ProfileService();\n        // Act\n        var e = Record.Exception(() => \n            sut.ChangeUsername(null!));\n        // Assert\n        var ex = Assert.IsType<ArgumentNullException>(e);\n        Assert.Equal(\"username\", ex.ParamName);\n        Assert.StartsWith(\"Null\", ex.Message);\n    }\n}\n```", "```cs\nnamespace Uqs.Customer;\npublic class ProfileService\n{\n}\n```", "```cs\npublic void ChangeUsername(string username)\n{\n    throw new NotImplementedException();\n}\n```", "```cs\npublic void ChangeUsername(string username)\n{\n    if (username is null)\n    {\n       throw new ArgumentNullException(\"username\", \"Null\");\n    }\n}\n```", "```cs\nthrow new ArgumentNullException(nameof(username), \"Null\");\n```", "```cs\n[Theory]\n[InlineData(\"AnameOf8\", true)]\n[InlineData(\"NameOfChar12\", true)]\n[InlineData(\"AnameOfChar13\", false)]\n[InlineData(\"NameOf7\", false)]\n[InlineData(\"\", false)]\npublic void ChangeUsername_VariousLengthUsernames_\n    ArgumentOutOfRangeExceptionIfInvalid\n   (string username, bool isValid)\n{\n    // Arrange\n    var sut = new ProfileService();\n    // Act\n    var e = Record.Exception(() =>\n        sut.ChangeUsernam(username));\n    // Assert\n    if (isValid)\n    {\n        Assert.NullI;\n    }\n    else\n    {\n        var ex =    \n        Assert.IsType<ArgumentOutOfRangeException>(e);\n        Assert.Equal(\"username\", ex.ParamName);\n        Assert.StartsWith(\"Length\", ex.Message);\n    }\n}\n```", "```cs\nif (username.Length < 8 || username.Length > 12) \n{\n    throw new ArgumentOutOfRangeException\n        (\"username\",\"Length\");\n}\n```", "```cs\nif (username.Length is < 8 or > 12)\n{\n  throw new ArgumentOutOfRangeException(\n    nameof(username), \"Length\");\n}\n```", "```cs\n[Theory]\n[InlineData(\"Letter_123\", true)]\n[InlineData(\"!The_Start\", false)]\n[InlineData(\"InThe@Middle\", false)]\n[InlineData(\"WithDollar$\", false)]\n[InlineData(\"Space 123\", false)]\npublic void\n    ChangeUsername_InvalidCharValidation_\n        ArgumentOutOfRangeException\n       (string username, bool isValid)\n{\n    // Arrange\n    var sut = new ProfileService();\n    // Act\n    var e = Record.Exception(() => \n        sut.ChangeUsername(username));\n    // Assert\n    if (isValid)\n    {\n        Assert.Null(e);\n    }\n    else\n    {\n        var ex = \n            Assert.IsType<ArgumentOutOfRangeException>(e);\n        Assert.Equal(\"username\", ex.ParamName);\n        Assert.StartsWith(\"InvalidChar\", ex.Message);\n    }\n}\n```", "```cs\nif (!Regex.Match(username, @\"^[a-zA-Z0-9_]+$\").Success)\n{\n    throw new ArgumentOutOfRangeException(nameof(username),\n        \"InvalidChar\");\n}\n```", "```cs\nusing System.Text.RegularExpressions;\nnamespace Uqs.Customer;\npublic class ProfileService\n{\n    private const string ALPHANUMERIC_UNDERSCORE_REGEX = \n        @\"^[a-zA-Z0-9_]+$\";\n    private static readonly Regex _formatRegex = new\n    (ALPHANUMERIC_UNDERSCORE_REGEX, RegexOptions.Compiled);\n\n    public void ChangeUsername(string username)\n    {\n        if (username is null)\n        {\n          throw new ArgumentNullException(nameof(username),\n          \"Null\");\n        }\n        if (username.Length is < 8 or > 12) \n        {\n          throw new ArgumentOutOfRangeException(\n            nameof(username), \"Length\");\n        }\n        if (!_formatRegex.Match(username).Success)\n        {\n          throw new ArgumentOutOfRangeException(\n            nameof(username), \"InvalidChar\");\n        }\n    }\n}\n```", "```cs\npublic string LoadTextFile(string path){…}\n```"]