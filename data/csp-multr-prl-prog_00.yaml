- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前言
- en: Welcome to *C# Multithreaded and Parallel Programming*. This book will take
    you through all of the ways to perform multithreaded and concurrent programming
    using the C# programming language and the .NET Framework. We will start with a
    description of what concurrent and parallel programming is, why it is important,
    and when you should implement it. We will then go through the different classes
    provided by the .NET Framework and the different design patterns commonly used
    when developing multithreaded applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到*C#多线程与并行编程*。本书将带您了解使用C#编程语言和.NET Framework执行多线程和并发编程的所有方法。我们将从描述并发和并行编程是什么、为什么它很重要以及何时应该实现它开始。然后，我们将介绍.NET
    Framework提供的不同类以及在开发多线程应用程序时常用的不同设计模式。
- en: Most modern machines have dual-core processors. This means that the present-day
    computer has the ability to multitask. Using multiple cores means your applications
    can process data faster and be more responsive to users. However, to fully exploit
    this in your applications, you need to write multithreaded code.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数现代机器都配备了双核处理器。这意味着现在的计算机具有多任务处理的能力。使用多个核心意味着您的应用程序可以更快地处理数据，并对用户更加响应。然而，要完全利用这一点，您需要在应用程序中编写多线程代码。
- en: This will take us on a journey from the BackgroundWorker component, the Thread
    class, the Task Parallel Library, to the async and await keywords. We will also
    explore common design patterns such as Pipelining, producer-consumer, and the
    IAsyncResult interface.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这将带我们踏上从BackgroundWorker组件、Thread类、Task Parallel Library到async和await关键字的旅程。我们还将探讨常见的模式，如管道化、生产者-消费者模式和IAsyncResult接口。
- en: Using the concurrent and parallel classes provided by .NET allows you to easily
    write powerful multithreaded applications. In the latest version of .NET, Microsoft
    has added the Task Parallel Library and the async keyword to make concurrent programming
    functionality much easier than using threads.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 使用.NET提供的并发和并行类，您可以轻松编写强大的多线程应用程序。在.NET的最新版本中，微软增加了Task Parallel Library和async关键字，使得并发编程功能比使用线程更容易。
- en: We will cover all aspects of developing multithreaded applications using the
    latest version of .NET in this book.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将涵盖使用.NET最新版本开发多线程应用程序的所有方面。
- en: What this book covers
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书涵盖的内容
- en: '[Chapter 1](ch01.html "Chapter 1. Understanding Multiprocessing and Multiple
    Cores"), *Understanding Multiprocessing and Multiple Cores*, covers the evolution
    of computer hardware from single-processor systems to multiprocessor and multiple-core
    systems. It will also discuss how the Windows Scheduler allots time to threads.
    This chapter then discusses design considerations for concurrency, how to take
    advantage of multiprocessor/multiple core systems, and the expected performance
    improvements these designs can realize. During this chapter, we will walk through
    a simple single-threaded and then multithreaded example to show how performance
    is improved.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[第1章](ch01.html "第1章. 理解多处理和多核心")，*理解多处理和多核心*，涵盖了计算机硬件从单处理器系统到多处理器和多核心系统的演变。它还将讨论Windows调度器如何分配时间给线程。然后，本章将讨论并发的设计考虑因素，如何利用多处理器/多核心系统，以及这些设计可以实现预期的性能改进。在本章中，我们将通过一个简单的单线程示例和一个多线程示例来展示性能是如何得到提升的。'
- en: '[Chapter 2](ch02.html "Chapter 2. Looking at Multithreaded Classes – BackgroundWorker"),
    *Looking at Multithreaded Classes – BackgroundWorker*, enables us to examine the
    basics of multithreaded programming with the BackgroundWorker class. We will go
    through a WPF example showing how we can update a UI while processing is going
    on in the background. This chapter will discuss the basics of coordinating work
    between multiple processes and the concept of concurrency.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[第2章](ch02.html "第2章. 查看多线程类 – BackgroundWorker")，*查看多线程类 – BackgroundWorker*，使我们能够检查使用BackgroundWorker类进行多线程编程的基础。我们将通过一个WPF示例展示如何在后台处理的同时更新UI。本章将讨论在多个进程之间协调工作的基础知识以及并发概念。'
- en: '[Chapter 3](ch03.html "Chapter 3. Thread Class – Heavyweight Concurrency in
    C#"), *Thread Class – Heavyweight Concurrency in C#*, allows us to examine and
    work with the Thread class and namespace. We will learn how to create threads,
    coordinate between threads, share data between threads, and stop threads. This
    chapter will explore the idea of heavyweight concurrency versus lightweight concurrency,
    which will be explained in detail later in the book. We will focus on manually
    using and coordinating multiple threads in an application.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[第3章](ch03.html "第3章。Thread类 – C#中的重量级并发"), *Thread类 – C#中的重量级并发*，使我们能够检查并使用Thread类和命名空间。我们将学习如何创建线程、在线程之间进行协调、在线程之间共享数据以及停止线程。本章将探讨重量级并发与轻量级并发的概念，这将在本书的后面部分进行详细解释。我们将专注于在应用程序中手动使用和协调多个线程。'
- en: '[Chapter 4](ch04.html "Chapter 4. Advanced Thread Processing"), *Advanced Thread
    Processing*, explains in detail the concept of heavyweight concurrency and working
    with multiple threads using the Thread class. This chapter will further expand
    the image processing application to demonstrate how to coordinate between threads
    and wait on threads to complete by avoiding deadlocks, locking, and error handling.
    This chapter will leave the reader with a clear understanding of how to develop
    applications with multiple threads and have complete control over their execution
    and interaction.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[第4章](ch04.html "第4章。高级线程处理"), *高级线程处理*，详细解释了重量级并发的概念以及使用Thread类进行多线程操作。本章将进一步扩展图像处理应用程序，演示如何通过避免死锁、锁定和错误处理来协调线程并等待线程完成。本章将使读者对如何开发多线程应用程序并完全控制其执行和交互有一个清晰的理解。'
- en: '[Chapter 5](ch05.html "Chapter 5. Lightweight Concurrency – Task Parallel Library
    (TPL)"), *Lightweight Concurrency – Task Parallel Library (TPL)*, introduces the
    Task Parallel Library and the next evolution of multithreaded programming in C#/.NET.
    Now that we have a full understanding of how to develop, manage, and control applications
    with many threads, we will learn how to take advantage of the Parallel namespace
    in .NET to do a lot of the heavy lifting for us. We will introduce the idea of
    lightweight concurrency by leveraging the Parallel classes that .NET now provides.
    This will allow us to focus more on designing an efficient and powerful application
    and less on coordinating individual threads.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[第5章](ch05.html "第5章。轻量级并发 – 任务并行库 (TPL)"), *轻量级并发 – 任务并行库 (TPL)*，介绍了任务并行库以及C#/.NET中多线程编程的下一阶段进化。现在我们已经完全理解了如何开发、管理和控制多线程应用程序，我们将学习如何利用.NET中的Parallel命名空间来为我们做很多繁重的工作。我们将通过利用.NET现在提供的Parallel类来介绍轻量级并发的概念。这将使我们能够更多地关注设计高效且强大的应用程序，而较少关注协调单个线程。'
- en: '[Chapter 6](ch06.html "Chapter 6. Task-based Parallelism"), *Task-based Parallelism*,
    enables us to examine the Task Parallel Library and task parallelism. A task is
    an asynchronous set of operations that can be run concurrently with other tasks.
    We will examine designing an application as a series of tasks that can be performed
    in parallel. With the help of examples, we will demonstrate how to create, manage,
    and coordinate tasks. We will further examine additional topics with the Task
    Parallel Library and task parallelism. We will learn how to perform exception
    handling when running multiple tasks, how to schedule tasks under certain conditions,
    and how to cancel running tasks before they complete when needed.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[第6章](ch06.html "第6章。基于任务的并行性"), *基于任务的并行性*，使我们能够检查任务并行库和任务并行性。任务是一组可以与其他任务并发运行的异步操作。我们将检查将应用程序设计为一系列可以并行执行的任务。通过示例，我们将演示如何创建、管理和协调任务。我们将进一步检查任务并行库和任务并行性的其他主题。我们将学习如何在运行多个任务时进行异常处理，如何在特定条件下调度任务，以及当需要时如何在任务完成之前取消正在运行的任务。'
- en: '[Chapter 7](ch07.html "Chapter 7. Data Parallelism"), *Data Parallelism*, explores
    the concept of data parallelism. We will see how to perform the same operations
    on elements of a collection concurrently using the Task Parallel Library. The
    Parallel class has the For and ForEach loops, and we will show examples of each
    to demonstrate how they handle concurrent data processing. We will convert our
    image processing application from heavyweight to lightweight concurrency using
    the Task Parallel Library instead of the Thread class.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[第7章](ch07.html "第7章。数据并行")，*数据并行*，探讨了数据并行的概念。我们将看到如何使用任务并行库（TPL）在集合的元素上并发执行相同的操作。Parallel类有For和ForEach循环，我们将展示每个的示例来演示它们如何处理并发数据处理。我们将使用任务并行库而不是Thread类，将我们的图像处理应用程序从重量级转换为轻量级并发。'
- en: '[Chapter 8](ch08.html "Chapter 8. Debugging Multithreaded Applications with
    Visual Studio"), *Debugging Multithreaded Applications with Visual Studio*, teaches
    us how to take full advantage of Visual Studio 2012 to debug our multithreaded
    applications. We will demonstrate using the Threads view, and the Tasks, Parallel
    Stacks, and Parallel Watch windows. We will finish with debugging our image processing
    application.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[第8章](ch08.html "第8章。使用Visual Studio调试多线程应用程序")，*使用Visual Studio调试多线程应用程序*，教我们如何充分利用Visual
    Studio 2012来调试我们的多线程应用程序。我们将演示使用线程视图、任务、并行堆栈和并行监视窗口。我们将以调试我们的图像处理应用程序结束。'
- en: '[Chapter 9](ch09.html "Chapter 9. Pipeline and Producer-consumer Design Patterns"),
    *Pipeline and Producer-consumer Design Patterns*, helps us explore two of the
    most popular parallel patterns for development—Pipelining and producer-consumer.
    In Pipelining, we will see how to accomplish a parallel task where a simple parallel
    loop will not work due to data dependencies. The producer-consumer pattern allows
    a producer, which is generating results, to run along with the consumer so that
    the consumer can consume the results concurrently. We will expand our image processing
    application to implement these two patterns in combination.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[第9章](ch09.html "第9章。管道和生产者-消费者设计模式")，*管道和生产者-消费者设计模式*，帮助我们探索两个最流行的并行开发模式——管道和生产者-消费者。在管道中，我们将看到如何完成一个简单的并行循环由于数据依赖性而无法工作的并行任务。生产者-消费者模式允许生产者（生成结果）与消费者一起运行，以便消费者可以并发地消费结果。我们将扩展我们的图像处理应用程序，以组合实现这两个模式。'
- en: '[Chapter 10](ch10.html "Chapter 10. Parallel LINQ – PLINQ"), *Parallel LINQ
    – PLINQ*, details the benefits and functionality provided by Parallel LINQ (PLINQ).
    We will see how PLINQ speeds up traditional LINQs by separating the data source
    into sections and executing the query on each section. We will also discuss what
    kind of queries to use PLINQ for because not all queries will run faster using
    PLINQ.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[第10章](ch10.html "第10章。并行LINQ – PLINQ")，*并行LINQ – PLINQ*，详细介绍了并行LINQ（PLINQ）提供的优势和功能。我们将看到PLINQ如何通过将数据源分割成部分并在每个部分上执行查询来加速传统的LINQ。我们还将讨论适用于PLINQ的查询类型，因为并非所有查询使用PLINQ都会运行得更快。'
- en: '[Chapter 11](ch11.html "Chapter 11. The Asynchronous Programming Model"), *The
    Asynchronous Programming Model*, explains the Asynchronous Programming Model (APM),
    which is a design pattern that is based on classes implementing the IAsyncResult
    interface. We will see how to begin and end asynchronous operations and use delegates
    to call methods asynchronously. This chapter will also cover the new async and
    await keywords and how to use them to implement an asynchronous design in your
    custom classes.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[第11章](ch11.html "第11章。异步编程模型")，*异步编程模型*，解释了异步编程模型（APM），这是一个基于实现IAsyncResult接口的类的设计模式。我们将了解如何开始和结束异步操作，以及如何使用委托异步调用方法。本章还将涵盖新的async和await关键字，以及如何使用它们在自定义类中实现异步设计。'
- en: What you need for this book
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你需要为这本书准备什么
- en: For this book, you will need a working knowledge of C#, .NET, and Visual Studio,
    and a desire to learn all of the different methods and techniques .NET provides
    to improve application performance through parallel multithreaded techniques.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了阅读这本书，你需要具备C#、.NET和Visual Studio的实际操作知识，以及学习.NET提供的所有不同方法和技术以通过并行多线程技术提高应用程序性能的愿望。
- en: Who this book is for
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书面向对象
- en: This book is intended for developers who have a working knowledge of C# and
    the .NET Framework. We assume that you understand the basics of C# programming
    and the Visual Studio development environment.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 本书面向那些对C#和.NET框架有实际操作知识的开发者。我们假设你理解C#编程的基础和Visual Studio开发环境的基本知识。
- en: This book is for developers looking to expand their toolbox with all of the
    techniques and methods available in .NET to develop and transition the existing
    code into multithreaded and concurrent programs. If you are looking for ways to
    increase the performance and scalability of your applications using today's multiple
    CPU and multicore processors, then this is the book for you.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 本书是为希望使用 .NET 中所有可用技术和方法来扩展他们的工具箱，并将现有代码转换为多线程和并发程序的开发者而编写的。如果您正在寻找使用当今的多 CPU
    和多核处理器来提高应用程序性能和可伸缩性的方法，那么这本书就是为您而写的。
- en: This book is also designed for developers with knowledge of the original multithreaded
    techniques used in the earlier versions of .NET and who want to update their knowledge
    with all of the new classes that the latest versions of .NET provide, most notably
    the Task Parallel Library and the async and await keywords. If you need to update
    older applications with today's latest .NET parallel techniques, then this is
    a good guide for you.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 本书还专为那些了解 .NET 早期版本中使用的原始多线程技术，并希望使用 .NET 最新版本提供的新类（特别是任务并行库和 async 和 await
    关键字）来更新他们的知识而设计。如果您需要使用当今最新的 .NET 并行技术来更新旧应用程序，那么这是一本很好的指南。
- en: Conventions
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 约定
- en: In this book, you will find a number of styles of text that distinguish between
    different kinds of information. Here are some examples of these styles, and an
    explanation of their meaning.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，您将找到多种文本样式，用于区分不同类型的信息。以下是一些这些样式的示例及其含义的解释。
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "This
    will require us to work with the `BackgroundWorker` component."'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 文本中的代码单词、数据库表名、文件夹名、文件名、文件扩展名、路径名、虚拟 URL、用户输入和 Twitter 处理程序如下所示：“这将要求我们与 `BackgroundWorker`
    组件合作。”
- en: 'A block of code is set as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 代码块设置如下：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, in menus or dialog boxes for example, appear in the text like this:
    "Create a new WPF application C# project in Visual Studio (**File** | **New**
    | **Project** | **Visual C#** | **WPF Application**)."'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**新术语**和**重要单词**以粗体显示。您在屏幕上看到的单词，例如在菜单或对话框中，在文本中显示如下：“在 Visual Studio 中创建一个新的
    WPF 应用程序 C# 项目（**文件** | **新建** | **项目** | **Visual C#** | **WPF 应用程序**）。”'
- en: Note
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Warnings or important notes appear in a box like this.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 警告或重要注意事项以如下框中的形式出现。
- en: Tip
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 技巧
- en: Tips and tricks appear like this.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 技巧和窍门看起来像这样。
- en: Reader feedback
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读者反馈
- en: Feedback from our readers is always welcome. Let us know what you think about
    this book—what you liked or may have disliked. Reader feedback is important for
    us to develop titles that you really get the most out of.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们始终欢迎读者的反馈。请告诉我们您对这本书的看法——您喜欢什么或可能不喜欢什么。读者反馈对我们开发您真正从中受益的标题非常重要。
- en: To send us general feedback, simply send an e-mail to `<[feedback@packtpub.com](mailto:feedback@packtpub.com)>`,
    and mention the book title via the subject of your message.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要向我们发送一般反馈，只需发送一封电子邮件到 `<[feedback@packtpub.com](mailto:feedback@packtpub.com)>`，并在邮件主题中提及书名。
- en: If there is a topic that you have expertise in and you are interested in either
    writing or contributing to a book, see our author guide on [www.packtpub.com/authors](http://www.packtpub.com/authors).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在某个主题上具有专业知识，并且您对撰写或为书籍做出贡献感兴趣，请参阅我们的作者指南[www.packtpub.com/authors](http://www.packtpub.com/authors)。
- en: Customer support
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户支持
- en: Now that you are the proud owner of a Packt book, we have a number of things
    to help you to get the most from your purchase.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已成为 Packt 书籍的骄傲拥有者，我们有一些事情可以帮助您从购买中获得最大收益。
- en: Downloading the example code
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下载示例代码
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在 [http://www.packtpub.com](http://www.packtpub.com) 的账户下载您购买的所有 Packt
    书籍的示例代码文件。如果您在其他地方购买了这本书，您可以访问 [http://www.packtpub.com/support](http://www.packtpub.com/support)
    并注册，以便将文件直接通过电子邮件发送给您。
- en: Errata
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 错误清单
- en: Although we have taken every care to ensure the accuracy of our content, mistakes
    do happen. If you find a mistake in one of our books—maybe a mistake in the text
    or the code—we would be grateful if you could report this to us. By doing so,
    you can save other readers from frustration and help us improve subsequent versions
    of this book. If you find any errata, please report them by visiting [http://www.packtpub.com/submit-errata](http://www.packtpub.com/submit-errata),
    selecting your book, clicking on the **Errata Submission Form** link, and entering
    the details of your errata. Once your errata are verified, your submission will
    be accepted and the errata will be uploaded to our website or added to any list
    of existing errata under the Errata section of that title.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们已经尽一切努力确保内容的准确性，但错误仍然可能发生。如果你在我们的书中发现错误——可能是文本或代码中的错误——如果你能向我们报告这个问题，我们将不胜感激。通过这样做，你可以帮助其他读者避免挫败感，并帮助我们改进本书的后续版本。如果你发现任何勘误，请通过访问
    [http://www.packtpub.com/submit-errata](http://www.packtpub.com/submit-errata)，选择你的书，点击
    **勘误提交表单** 链接，并输入你的勘误详情。一旦你的勘误得到验证，你的提交将被接受，勘误将被上传到我们的网站或添加到该标题的勘误部分下的现有勘误列表中。
- en: To view the previously submitted errata, go to [https://www.packtpub.com/books/content/support](https://www.packtpub.com/books/content/support)
    and enter the name of the book in the search field. The required information will
    appear under the **Errata** section.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看之前提交的勘误表，请访问 [https://www.packtpub.com/books/content/support](https://www.packtpub.com/books/content/support)，并在搜索字段中输入书名。所需信息将在
    **勘误** 部分显示。
- en: Piracy
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 盗版
- en: Piracy of copyright material on the Internet is an ongoing problem across all
    media. At Packt, we take the protection of our copyright and licenses very seriously.
    If you come across any illegal copies of our works, in any form, on the Internet,
    please provide us with the location address or website name immediately so that
    we can pursue a remedy.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在互联网上盗版版权材料是一个跨所有媒体持续存在的问题。在Packt，我们非常重视保护我们的版权和许可证。如果你在互联网上发现任何形式的我们作品的非法副本，请立即提供位置地址或网站名称，以便我们可以寻求补救措施。
- en: Please contact us at `<[copyright@packtpub.com](mailto:copyright@packtpub.com)>`
    with a link to the suspected pirated material.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 请通过 `<[copyright@packtpub.com](mailto:copyright@packtpub.com)>` 联系我们，并提供涉嫌盗版材料的链接。
- en: We appreciate your help in protecting our authors, and our ability to bring
    you valuable content.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们感谢你在保护我们作者和我们提供有价值内容的能力方面的帮助。
- en: Questions
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: You can contact us at `<[questions@packtpub.com](mailto:questions@packtpub.com)>`
    if you are having a problem with any aspect of the book, and we will do our best
    to address it.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在本书的任何方面遇到问题，可以通过 `<[questions@packtpub.com](mailto:questions@packtpub.com)>`
    联系我们，我们将尽力解决。
