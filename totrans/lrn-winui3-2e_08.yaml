- en: '8'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adding Windows Notifications to WinUI Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Windows App SDK provides developers with the ability to implement **raw
    push notifications** and **app notifications** in their WinUI apps. It’s important
    to understand the use case for each of these notification types. They have different
    implementations, and each has its own set of advantages and limitations. Push
    notifications can be surfaced to the user or received by the app to perform internal
    operations. App notifications, on the other hand, are used to communicate with
    the user. We’ll cover examples of when you would want to use a particular notification
    type and add an app notification to the **My Media Collection** sample application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the different notification types in the Windows App SDK and the
    use case for each type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering how to leverage push notifications in a WinUI application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring how to use app notifications with WinUI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will understand the differences between push
    notifications and other app notifications exposed by the Windows App SDK. You
    will understand when to choose each notification type and how they are handled
    in a WinUI 3 project.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To follow along with the examples in this chapter, the following software is
    required:'
  prefs: []
  type: TYPE_NORMAL
- en: Windows 10 version 1809 (build 17763) or newer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Studio 2022 or later with the .NET Desktop Development workload configured
    for Windows App SDK development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The source code for this chapter is available on GitHub at this URL: [https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/master/Chapter08](https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/master/Chapter08).'
  prefs: []
  type: TYPE_NORMAL
- en: Overview of push notifications in the Windows App SDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: WinUI applications can leverage different types of notifications in the Windows
    App SDK. The notifications APIs were added in Windows App SDK 1.3 and can be either
    sent locally or through a cloud service, depending on the notification type. We
    most often associate notifications with the small, pop-up windows in the corner
    of the screen, called **toast notifications**, in Windows. However, a visual indicator
    isn’t required for all notifications. They can also be used to signal your app
    to activate and perform an action or sync data from a remote service without relying
    on a timer in the app.
  prefs: []
  type: TYPE_NORMAL
- en: Raw push notifications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These internal notifications are known as **raw push notifications**. They require
    no user interaction and don’t signal the user with a **toast notification**. Push
    notifications leverage the **Windows Push Notification Services** (**WNS**), which
    is part of the **Microsoft Store** services. To publish an application in the
    Store or leverage any of its services, a Store account is required, and your app
    must be registered in the Store’s dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: We will discuss publishing apps to the Microsoft Store in [*Chapter 14*](B20908_14.xhtml#_idTextAnchor582),
    *Packaging and Deploying WinUI Applications*. We won’t cover the Store registration
    process in this chapter, but you can skip ahead to review the process in [*Chapter
    14*](B20908_14.xhtml#_idTextAnchor582) if it’s new to you.
  prefs: []
  type: TYPE_NORMAL
- en: Push notifications from WNS can be received directly by the app to signal the
    app to perform some action. In fact, your app doesn’t need to be active to receive
    a notification. Windows will activate the app so it can process the notification
    and perform the requested action. Using notifications saves device resources and
    can reduce or eliminate the need for polling and timers.
  prefs: []
  type: TYPE_NORMAL
- en: Notifications from WNS may also notify the user. This is one type of app notification.
  prefs: []
  type: TYPE_NORMAL
- en: Cloud-based app notifications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: App notifications involve notifying the user that some event has occurred or
    action is required. App notifications can be local or originate from the cloud.
    The cloud-based notifications, like raw notifications, leverage WNS.
  prefs: []
  type: TYPE_NORMAL
- en: The process for creating and sending these app notifications is similar to creating
    raw push notifications. The header and content types will distinguish the app
    notifications and signal Windows to display a visible, transient notification.
    Any notifications that haven’t been dismissed or cleared by the user can be viewed
    in Windows settings in **Notification Center**.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Certain types of self-contained apps or apps running with admin privileges
    may not be eligible to receive notifications. To view more information about these
    limitations, you can review this section of the push notifications documentation
    on Microsoft Learn: [https://learn.microsoft.com/windows/apps/windows-app-sdk/notifications/push-notifications/#limitations](https://learn.microsoft.com/windows/apps/windows-app-sdk/notifications/push-notifications/#limitations).'
  prefs: []
  type: TYPE_NORMAL
- en: App notifications can also be local to the user’s PC. Let’s discuss this type
    of notification next.
  prefs: []
  type: TYPE_NORMAL
- en: Local app notifications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Local app notifications do not involve the cloud and WNS is not involved in
    sending the notification. They originate from your app, are displayed to the user,
    and are handled by your app when the user acts on the toast notification. Users
    are familiar with these types of notifications from using Microsoft apps such
    as Outlook, Teams, and even the Microsoft Store app.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, these notifications are informational, such as when the Store app
    displays a message after an app has been updated. The notifications can also prompt
    the user to take an action, such as snoozing an Outlook calendar reminder. In
    this case, the notification window contains a drop-down control that allows the
    user to select the snooze duration.
  prefs: []
  type: TYPE_NORMAL
- en: Later in this chapter, we’ll add a local app notification to the **My Media
    Collection** app to prompt our users to add a new book to their collection. Now,
    we’ll dive a little deeper into the implementation of raw push notifications and
    how they can be used to quietly receive a notification from the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Using raw push notifications in WinUI applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we discussed in the previous section, push notifications that are handled
    by the app without notifying the user are generated through WNS and Azure. In
    this section, we will briefly examine how these notifications can be leveraged
    in WinUI applications. The Azure configuration needed to get started is somewhat
    lengthy and not very interesting. Because the Azure Notification Hubs configuration
    for WNS is already well documented in the Azure docs on Microsoft Learn, you should
    review them before we get started: [https://learn.microsoft.com/azure/notification-hubs/notification-hubs-windows-store-dotnet-get-started-wns-push-notification](https://learn.microsoft.com/azure/notification-hubs/notification-hubs-windows-store-dotnet-get-started-wns-push-notification).
    It’s also a good idea to familiarize yourself with the WNS overview in the Windows
    design documentation on Microsoft Learn: [https://learn.microsoft.com/windows/apps/design/shell/tiles-and-notifications/windows-push-notification-services--wns--overview](https://learn.microsoft.com/windows/apps/design/shell/tiles-and-notifications/windows-push-notification-services--wns--overview).'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The Azure documentation was written for UWP apps, but the configuration instructions
    work just as well for a WinUI 3 application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the Azure configuration is complete, the steps to use notifications in
    a WinUI 3 app are similar to UWP but not exactly the same. For a detailed example
    of working with push notifications from the cloud, you can read this Microsoft
    Learn article: [https://learn.microsoft.com/windows/apps/windows-app-sdk/notifications/push-notifications/push-quickstart](https://learn.microsoft.com/windows/apps/windows-app-sdk/notifications/push-notifications/push-quickstart).
    In this chapter, we are focusing on app notifications, and will add those to our
    sample app in the next section. The high-level steps you will need to complete
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the COM activation information to your `Package.appxmanifest` file. Here’s
    an example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Register with `PushNotificationManager` in the `Microsoft.Windows.Push``     Notifications` namespace and subscribe to `PushNotificationChannel` for the notification
    type.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add code to the `App` class to check whether the application was launched or
    activated from the background as a result of a push notification.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a WNS channel and register that channel with the WNS service. These are
    the HTTP endpoints that will receive the notification data to be pushed to your
    app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use a tool such as `POST` request with the push notification data. You will
    need to get an access token for the request with your Azure tenant ID, app ID,
    and client secret. For more information, see this page: [https://learn.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal#get-tenant-and-app-id-values-for-signing-in](https://learn.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal#get-tenant-and-app-id-values-for-signing-in).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Those are the basic steps, but there’s much more to be learned. Make sure you
    read all of the articles linked in this section to learn about the nuances of
    using raw push notifications in a WinUI application.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s learn more about app notifications and adding send-and-receive capabilities
    to our sample application.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Windows app notifications with the Windows App SDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we’re going to add some local app notifications to the **My
    Media Collection** project. The code we’ll add to the project is based on the
    Windows App SDK local app notification sample app created by the Microsoft Learn
    team. You can download the code for that project on GitHub: [https://github.com/microsoft/WindowsAppSDK-Samples/tree/main/Samples/Notifications/App/CsUnpackagedAppNotifications](https://github.com/microsoft/WindowsAppSDK-Samples/tree/main/Samples/Notifications/App/CsUnpackagedAppNotifications).'
  prefs: []
  type: TYPE_NORMAL
- en: We are adding two buttons to the MainPage in the app to trigger two types of
    notifications. One will have an image and some text. The second will add a text
    entry field to demonstrate how we can receive input from a user in the notification
    toast and act on it within our application.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a lot of configuration and code required to implement notification
    handling. If you would like to open the completed solution and follow along, the
    code is available on GitHub: [https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/main/Chapter08/Complete](https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/main/Chapter08/Complete).'
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, open your **MyMediaCollection** solution from the previous
    chapter or the starter solution for [*Chapter 8*](B20908_08.xhtml#_idTextAnchor197)
    on GitHub: [https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/main/Chapter08/Start](https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/main/Chapter08/Start):'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to add some configuration to the `Package.appxmanifest` file
    to enable notification handling in the app. Start by adding two namespace declarations
    to the `Package` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add an `Extensions` section inside the `Application` node, immediately
    after the `uap:VisualElements` section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Generate a new `Helpers`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now create a new class named `NotificationShared` in the `Helpers` folder.
    Start by adding a constant and a struct to this class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `Notification` struct will represent the data received in an app notification.
    `scenarioTag` is a constant that will be needed when each notification to send
    is being constructed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, add the following static methods to the `NotificationShared` class. These
    will be used by the app to notify the UI when notifications are sent or received:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`MainPage` doesn’t have a `Current` property, so this code won’t compile yet.
    We’ll take care of that soon. If Visual Studio didn’t add the necessary `using`
    statements, make sure these are present in `NotificationShared`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we are going to create two classes to represent the two types of notifications
    that the app will send and receive. First, create a new class named `ToastWithAvatar`
    and start by adding two constants to the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add a method named `SendToast` to the class. This method will construct
    and show a Windows notification toast containing some text, an avatar image, and
    a button to display our app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now add a `NotificationReceived` method, which will be invoked when this type
    of notification is received from Windows by our app. This method creates a `Notification`
    struct and calls a `NotificationReceived` method on `MainPage`, which we will
    create later in this section. We will also create the `ToForeground` method to
    bring our app to the front if it’s hidden behind other windows or minimized:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `ToastWithText` class will be similar to `ToastWithAvatar`, but it will
    add a call to `AddTextBox` in `AppNotificationBuilder` to create the input field
    in the Windows toast. It also adds the result of that user input to the `Notification`
    class created in `NotificationReceived`. To view the full code for this class,
    check out the completed solution on GitHub: [https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/main/Chapter08/Complete/MyMediaCollection/Helpers/ToastWithText.cs](https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/main/Chapter08/Complete/MyMediaCollection/Helpers/ToastWithText.cs).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now it’s time to create the `NotificationManager` class. This class will do
    exactly that – manage notifications. It will initialize and unregister notification
    receiving. It will do the actual sending and receiving of notifications. Create
    the `NotificationManager` class in the `Helpers` folder and start by adding the
    constructor and finalization code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add the `Init` method that we’ll call from the `App` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`OnNotificationInvoked` is hooked up in the `Init` method. This will fire when
    notifications are received by the app. It makes different calls to `NotificationShared`,
    depending on whether the notification is recognized or not:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you have any unhandled exceptions in your code that process incoming notifications,
    they will also trigger this call to `NotificationShared.UnrecognizedToastOriginator`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, create the `ProcessLaunchActivationArgs` and `DispatchNotification`
    methods in `NotificationManager`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now let’s add the code to `App.xaml.cs` to initialize `NotificationManager`
    and handle some of the common calls. Let’s start by adding the `using` statements
    that we’ll need for the new code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add a private `notificationManager` object, add `DllImport` to help bring
    the window to the foreground, and make `m_window` static:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Be careful when choosing which Win32 APIs to use in your production WinUI applications.
    The `SwitchToThisWindow` API is documented as “*not suitable for general use*,”
    but it works for our purposes in a sample app. There are other APIs you can explore,
    including `ShowWindow`: [https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-showwindow](https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-showwindow).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, add the following code to `OnLaunched` right before calling `m_window.Activate`.
    This gets the arguments passed to the app from the Windows notification:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add some code to the `App` constructor to initialize `NotificationManager`
    and handle the `AppDomain.CurrentDomain.ProcessExit` event to unregister the manager
    when the app closes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The final items to be added to the `App` class are three static helper methods
    to get some application-related paths and the `ToForeground` method to bring the
    app to the front when it’s hidden or minimized:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now let’s work on `MainPage`. Start in `MainPage.xaml`. We’re going to add
    two buttons to send notifications and an `InfoBar` control to display messages
    at the bottom of the page when notifications are sent or received. Add another
    `RowDefinition` to the outermost `Grid` control:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add two buttons to the beginning of `StackPanel` that contains the existing
    `Button` controls:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add an `InfoBar` control just before the closing tag for the outer `Grid`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, open the `MainPage.xaml.cs` file, in which we need to add some code to
    handle the incoming notifications. The first thing we’ll do is add a `using` statement
    for `MyMediaCollection.Helpers`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, add the code to expose the current instance of `MainPage` so the notifications
    can be routed properly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add some code to update `InfoBar` whenever notifications are sent or
    received. This is the code that will be called by the methods in the `NotificationShared`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `DispatcherQueue` methods check whether the code has access to the UI thread.
    If not, `TryEnqueue` is used to queue the work to be performed when the UI thread
    is available. Otherwise, errors will be encountered when accessing UI elements
    from a background thread.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a `NotificationReceived` method to handle incoming notification information.
    This method parses through the incoming data and builds a message string to display:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The final code to add to `MainPage` is a simple method to display `ContentDialog`
    with the notification data:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`MainViewModel` is the final class to be updated. We need to create two command
    methods for the new buttons to invoke when sending app notifications. Create two
    methods named `SendToast` and `SendToastWithText`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Don’t forget to add `using MyMediaCollection.Helpers;` to the list of using
    statements in `MainViewModel`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We’re ready to run the app and test the notifications. Start debugging and
    click the **Send Notification** button. You should see a toast appear in the lower-right
    portion of the main screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1 – A Windows toast notification](img/B20908_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.1 – A Windows toast notification
  prefs: []
  type: TYPE_NORMAL
- en: 'Bring another window in front of **My Media Collection** and then click **Open
    App** on the toast. The app should be brought back to the front of the screen
    and **ContentDialog** will display a message with information about the notification
    received:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.2 – Receiving an app notification](img/B20908_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.2 – Receiving an app notification
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you click one of the buttons to send a notification multiple times without
    acknowledging the toast window, the toasts will not stack. The subsequent toasts
    will go straight to Windows’ **Notifications Center**. Once they go there, it’s
    not possible to use interactive fields such as a text box. In addition, if the
    user has *Do Not Disturb* or *Focus* mode enabled, all notifications will be suppressed
    and sent directly to **Notifications Center**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now click the **Send Notification with Text** button. When this toast appears,
    it will have a text box where you can **Enter** **a reply**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.3 – Displaying a toast window with a text box](img/B20908_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.3 – Displaying a toast window with a text box
  prefs: []
  type: TYPE_NORMAL
- en: 'Type `Hello world` and click the **Reply** button. Now, when **My Media Collection**
    displays **ContentDialog**, it will include the reply that was entered in the
    toast window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.4 – Displaying the reply text from the toast window in our app](img/B20908_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.4 – Displaying the reply text from the toast window in our app
  prefs: []
  type: TYPE_NORMAL
- en: Now you’re ready to start building notifications into your own WinUI applications.
    Let’s wrap up the chapter and discuss what we’ve learned.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the types of Windows notifications available
    to WinUI developers in the Windows App SDK. We discussed how notifications can
    be used to save Windows resources, reduce the need for timers, and prompt users
    to act. We explored how to configure raw push notifications and added a local
    app notification to the **My Media Collection** sample app. You should now feel
    prepared to add any of these types of notifications to your own WinUI applications.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll explore the **Windows Community Toolkit** (**WCT**)
    and learn how, together with the .NET Community Toolkit, you can save development
    time by leveraging existing helpers, styles, and controls.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What type of Windows notification can be used to initiate a data sync from the
    cloud?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which type of notification doesn’t rely on WNS?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Where do you register your app before configuring notification services in Azure?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which Windows App SDK namespace contains the objects for working with app notifications?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which class has methods to register and unregister your app for handling app
    notifications?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which property can be set if you would like notifications from your app to disappear
    after a system reboot?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can notifications from WNS prompt the user with a toast notification?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
