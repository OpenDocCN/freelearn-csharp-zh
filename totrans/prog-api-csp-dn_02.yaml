- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: What We’ll Build
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们将构建什么
- en: In this chapter, we will provide a context for the rest of the book. That context
    is a simple application for buying and selling cars. We will not build out this
    application but, in fact, we’ll have only one type of object ( **Car** ) and one
    table in our database. This will allow us to focus on the API rather than getting
    hung up on database design.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将为本书的其余部分提供一个背景。这个背景是一个简单的买卖汽车的示例应用程序。我们不会构建这个应用程序，实际上，我们将在数据库中只有一个对象类型（**Car**）和一个表。这将使我们能够专注于API，而不是陷入数据库设计的困境。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: What an API is and what it is for
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API是什么以及它的用途是什么
- en: The backend database that we will use throughout the book
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本书将使用的后端数据库
- en: The application that we will build throughout the book
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本书将构建的应用程序
- en: The **Car** object that we will use to demonstrate CRUD operations
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将使用**Car**对象来演示CRUD操作
- en: We will use only free software, as shown in the *Technical requirements* section,
    and we will take advantage of open source utilities such as Dapper and AutoMapper,
    both introduced in [*Chapter 1*](B21998_01.xhtml#_idTextAnchor013) .
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将仅使用免费软件，如*技术要求*部分所示，并将利用Dapper和AutoMapper等开源实用程序，这两者都在[*第1章*](B21998_01.xhtml#_idTextAnchor013)中介绍。
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: For this chapter, you’ll need **Visual Studio** and **SQL Server Management
    Studio** ( **SSMS** ), as well as **Postman** . Remember that SSMS was installed
    with Visual Studio.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，您需要**Visual Studio**、**SQL Server Management Studio**（**SSMS**）以及**Postman**。请记住，SSMS是与Visual
    Studio一起安装的。
- en: Note that you can also manage your database from within Visual Studio using
    the Server Explorer and the SQL Server Object Explorer.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，您还可以使用Visual Studio中的Server Explorer和SQL Server Object Explorer在内部管理您的数据库。
- en: 'The code files for this book are available in the book’s GitHub repository
    : [https://github.com/PacktPublishing/Programming-APIs-with-C-Sharp-and-.NET/tree/main/Chapter02](https://github.com/PacktPublishing/Programming-APIs-with-C-Sharp-and-.NET/tree/main/Chapter02)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的相关代码文件可在本书的GitHub仓库中找到：[https://github.com/PacktPublishing/Programming-APIs-with-C-Sharp-and-.NET/tree/main/Chapter02](https://github.com/PacktPublishing/Programming-APIs-with-C-Sharp-and-.NET/tree/main/Chapter02)
- en: What is an API and what is it for?
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是API以及它的用途是什么？
- en: The purpose of an API is to decouple the backend of an application (e.g., a
    database) from the frontend (e.g., a web application or mobile application), as
    illustrated in *Figure 2* *.1* .
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: API的目的是将应用程序的后端（例如，数据库）与前端（例如，Web应用程序或移动应用程序）解耦，如图*2*.*1*所示。
- en: '![Figure 2.1 – Separation of concerns](img/B21988_02_1.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![图2.1 – 关注点分离](img/B21988_02_1.jpg)'
- en: Figure 2.1 – Separation of concerns
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.1 – 关注点分离
- en: The client does not talk directly to the database but rather talks to the API,
    which, in turn, talks to the database. The huge advantage of this approach is
    that you can modify the database and the client does not have to change. Alternatively,
    you can modify the front end (for example, a website) without changing the database.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端不直接与数据库通信，而是与API通信，而API反过来又与数据库通信。这种方法的巨大优势在于，您可以修改数据库，而客户端无需更改。或者，您可以在不更改数据库的情况下修改前端（例如，一个网站）。
- en: These modifications take place throughout the development of a large project
    and continue after delivery. It is imperative, especially with a mobile application,
    that you can modify the backend without forcing the user to update the application.
    Even with web applications, however, this can be critical, as the team maintaining
    the database may well not be the team maintaining the client.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这些修改发生在大型项目开发过程中，并在交付后继续进行。对于移动应用程序来说，能够在不强制用户更新应用程序的情况下修改后端至关重要。即使对于Web应用程序，这也可能是关键的，因为维护数据库的团队可能不是维护客户端的团队。
- en: Creating the database
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建数据库
- en: To illustrate all the aspects of an API, we will create an incredibly simple
    database and we’ll use Postman to stand in for our client. Postman lets you call
    into the API and see what the client would get back. Actually, it can do a lot
    more, but that is the principal way we’ll use it.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明API的所有方面，我们将创建一个非常简单的数据库，并使用Postman来代表我们的客户端。Postman允许您调用API并查看客户端会得到什么响应。实际上，它可以做更多的事情，但这是我们主要使用它的方式。
- en: We’ll keep both the backend and the frontend as simple as we can so that we
    can focus on the API.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将尽可能简化后端和前端，以便我们可以专注于API。
- en: The application
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序
- en: The database we’ll be creating will be used in a simple (fictional) application
    for buying and selling cars. The database will keep a list of automobiles along
    with details of their engine, performance, and so on. A short example of this
    data is shown in *Figure 2* *.2* .
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要创建的数据库将用于一个简单的（虚构的）买卖汽车应用程序。数据库将保存汽车列表及其发动机、性能等详细信息。此数据的简短示例如图 *图 2*.2 所示。
- en: '![Figure 2.2 – A subset of the data table we’ll be using](img/B21988_02_2.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.2 – 我们将要使用的数据表子集](img/B21988_02_2.jpg)'
- en: Figure 2.2 – A subset of the data table we’ll be using
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.2 – 我们将要使用的数据表子集
- en: Creating the Car Table
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建汽车表
- en: The data for the **Car** table is from the free *Automobile* dataset at [https://kaggle.com](https://kaggle.com)
    . Download the data and import it into a database named **Cars** and a table named
    **Car** . The columns should take care of themselves.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**Car** 表的数据来自 Kaggle 的免费 *Automobile* 数据集 [https://kaggle.com](https://kaggle.com)。下载数据并将其导入名为
    **Cars** 的数据库和名为 **Car** 的表中。列应该会自动处理。'
- en: 'The datasets on Kaggle change frequently, so your list of cars may look a bit
    different. All the datasets are all presented as **.csv** files, so just download
    one and open **SSMS** in order to do the import. Here are the steps:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Kaggle 上的数据集经常变化，因此您的汽车列表可能看起来略有不同。所有数据集都作为 **.csv** 文件呈现，因此只需下载一个，然后在 **SSMS**
    中打开以进行导入。以下是步骤：
- en: Log into SSMS and create a database.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到 SSMS 并创建一个数据库。
- en: Create a table named **CARS** .
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 **CARS** 的表。
- en: Start the **Import Data Wizard** . To do so, right-click on the table, and from
    the context menu select **Import Data** .
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 **导入数据向导**。为此，右键单击表，然后从上下文菜单中选择 **导入数据**。
- en: The **Choose a Data Source** dialog will appear. Select **Flat File Source**
    and click on **Browse** to find and select the CSV you got from Kaggle.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将会弹出 **选择数据源** 对话框。选择 **平面文件源** 并点击 **浏览** 以找到并选择您从 Kaggle 获取的 CSV 文件。
- en: You will be asked for the destination. Choose **SQL Server** **Native Client**
    .
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将被要求输入目的地。选择 **SQL Server** **原生客户端**。
- en: Review your settings and click **Save** .
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查您的设置并点击 **保存**。
- en: 'After you complete the import, you will need to add two columns: **is_deleted**
    (initialize all rows to **0** ) and **id** , which should be your primary key
    and which should increment automatically.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 完成导入后，您需要添加两个列：**is_deleted**（所有行初始化为 **0**）和 **id**，它应该是您的主键，并且应该自动递增。
- en: We’re ready to write a small application that will support the basic CRUD operations
    against our shiny new database.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们准备好编写一个小应用程序，该程序将支持对我们的闪亮新数据库的基本 CRUD 操作。
- en: 'If you run into a crisis and can’t get it to work, try one of the following
    two options to get you up and running fast:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果遇到危机并且无法使其工作，请尝试以下两种选项之一以快速启动：
- en: Go to stackoverflow.com and look for importing csv into flat database or
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 stackoverflow.com 并查找将 csv 导入平面数据库的方法，或者
- en: Grab the code from the [*Chapter 3*](B21998_03.xhtml#_idTextAnchor038) folder
    of this book’s repository, which will have the database already set up
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从本书存储库的 [*第 3 章*](B21998_03.xhtml#_idTextAnchor038) 文件夹中获取代码，该代码已设置好数据库。
- en: The problem with the second alternative is that you’ll have code we won’t yet
    have explained. But not to worry, if you follow the steps above all should be
    fine. (“ *Open the pod bay* *doors Hal.* ”)
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种替代方案的问题是您将拥有我们尚未解释的代码。但不用担心，如果您遵循上述步骤，一切应该都会顺利。（“*打开舱门* *哈罗，哈尔。*”）
- en: Note
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '**CRUD** is an acronym for **Create, Read, Update, and Delete** . That is,
    create new records, read the records that match criteria, update records, and
    mark records as deleted.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**CRUD** 是 **Create, Read, Update, and Delete** 的缩写。也就是说，创建新记录、读取符合标准的记录、更新记录和标记记录为已删除。'
- en: Database structure
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库结构
- en: 'Our database consists of just one table: **Car** . As shown in *Figure 2* *.2*
    , that table must store various attributes of each car (name, miles per gallon,
    number of cylinders, and so on). *Figure 2* *.3* shows the table:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的数据库仅由一个表组成：**Car**。如图 *图 2*.2 所示，该表必须存储每辆车的各种属性（名称、每加仑英里数、汽缸数等）。*图 2*.3 展示了该表：
- en: '![Figure 2.3 – Car table columns](img/B21988_02_3.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.3 – 汽车表列](img/B21988_02_3.jpg)'
- en: Figure 2.3 – Car table columns
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.3 – 汽车表列
- en: Notice the **is_deleted** column. We’ll be using “soft delete” – that is, rather
    than removing a row on deletion we’ll just set **is_deleted** to true ( **1**
    ). That allows us to easily restore that column just by changing that value back
    to **0** (false).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 **is_deleted** 列。我们将使用“软删除”——也就是说，在删除时，我们不会删除行，而是将 **is_deleted** 设置为 true（**1**）。这允许我们只需将此值改回
    **0**（false）即可轻松恢复该列。
- en: Other than **id** , all of the columns are strings, which will make working
    with them easier.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 除了**id**之外，所有列都是字符串，这将使处理它们更容易。
- en: Car object
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 车对象
- en: 'Corresponding to the **Car** table, our code has a **Car** entity ( **Cars/Data/Entities/Car.cs**
    ):'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 对应于**Car**表，我们的代码有一个**Car**实体（**Cars/Data/Entities/Car.cs**）：
- en: '[PRE0]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We won’t bother with **Data Transfer Objects** ( **DTOs** ) in this example,
    if only to keep things simple, though we will use them later in the book.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们不会使用**数据传输对象**（**DTOs**），只是为了保持简单，尽管我们会在本书的后面使用它们。
- en: The ASP.NET application
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ASP.NET应用程序
- en: To get started, create a new ASP.NET project using the ASP.NET Core Web API
    template. Put the files wherever is convenient for you and choose the latest version
    of .NET (this book was written with . NET 8).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请使用ASP.NET Core Web API模板创建一个新的ASP.NET项目。将文件放在您方便的地方，并选择.NET的最新版本（本书是用.NET
    8编写的）。
- en: 'The basic structure of our application will be as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序的基本结构将如下所示：
- en: Controllers with endpoints
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带端点的控制器
- en: Services
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务**'
- en: Repositories
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仓库
- en: We’ll review endpoints and all the rest of this as we go.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在继续阅读时回顾端点和所有其他内容。
- en: Program.cs
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Program.cs
- en: 'You won’t have to edit **Program.cs** for this application but it is worth
    a few minutes of your time to review it:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 您不需要为此应用程序编辑**Program.cs**，但花几分钟时间查看它是值得的：
- en: '[PRE1]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: One thing to notice right away is the references to Swagger. We’ll be using
    Swagger to automatically generate documentation for our project, as you’ll see
    as we go.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 立即要注意的是对Swagger的引用。我们将使用Swagger自动为我们的项目生成文档，正如您在继续阅读时将看到的。
- en: Connecting to the database
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接到数据库
- en: The out-of-the-box project cannot know how to connect to your database. This
    information is contained in **appsettings.json** and in **appsettings.Development.json**
    (to get to the latter, expand the former).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 默认项目无法知道如何连接到您的数据库。此信息包含在**appsettings.json**和**appsettings.Development.json**中（要访问后者，请展开前者）。
- en: '**appsettings.json** is pretty simple:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**appsettings.json**相当简单：'
- en: '[PRE2]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The key here is the **DefaultConnection** string, which sets up using the **Cars**
    database in the localhost.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 关键在于**DefaultConnection**字符串，它设置使用localhost上的**Cars**数据库。
- en: 'The actual connection string is in **appsettings.Development.json** :'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 实际的连接字符串在**appsettings.Development.json**中：
- en: '[PRE3]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The two other files you’ll need to complete this connection are **DatabaseConnectionFactory**
    and **DbSettings** . These are provided for you.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此连接所需的其他两个文件是**DatabaseConnectionFactory**和**DbSettings**。这些文件为您提供了。
- en: 'The following refers to objects in **DbSettings.cs** :'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 以下指的是**DbSettings.cs**中的对象：
- en: '[PRE4]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Finally, under **Properties** , you’ll find the **launchsettings.json** file:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在**属性**下，您将找到**launchsettings.json**文件：
- en: '[PRE5]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: All of this is worth a look but don’t fret about it; almost all of it is supplied
    for you, and all of it is in the sample code in our repository.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都值得一看，但不必担心；几乎所有的内容都为您提供了，所有内容都在我们的仓库中的示例代码中。
- en: Folders
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件夹
- en: 'To organize our application, we will create the following folders:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为了组织我们的应用程序，我们将创建以下文件夹：
- en: '**Controllers**'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制器**'
- en: '**Data**'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据**'
- en: '**Interfaces**'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**接口**'
- en: '**Repositories**'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仓库**'
- en: '**Services**'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务**'
- en: 'Let’s briefly explain what these are:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简要解释一下这些内容：
- en: The *client* is the application calling the API (for example, the website or
    mobile application). The **Controllers** folder will hold methods that act as
    *endpoints* (an endpoint is what the client connects to via a URL).
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户端**是调用API的应用程序（例如，网站或移动应用程序）。**控制器**文件夹将包含作为**端点**的方法（端点是客户端通过URL连接到的）。'
- en: The **Data** folder will hold the definition of our *entities* – in our case,
    the **Car** object shown earlier.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据**文件夹将包含我们*实体*的定义——在我们的案例中，是之前显示的**Car**对象。'
- en: 'The **Interfaces** folder is just what it sounds like: it will hold the interfaces
    to our C# objects.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**接口**文件夹正如其名：它将包含我们C#对象的接口。'
- en: The **Repositories** folder will hold the code between our methods and the database
    calls.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仓库**文件夹将包含我们的方法与数据库调用之间的代码。'
- en: The **Services** folder will hold supporting code.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务**文件夹将包含支持代码。'
- en: 'The flow will be as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 流程将如下所示：
- en: The client calls a method in a controller.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 客户端调用控制器中的方法。
- en: The method calls a service to handle the business logic.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该方法调用一个服务来处理业务逻辑。
- en: The service calls a method in the repository, which, in turn, calls into the
    database.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务调用仓库中的方法，然后反过来调用数据库。
- en: Again, we’ll examine the details as we go, starting in the next chapter.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一章开始时，逐步检查细节。
- en: Summary
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you saw what an API is and how it is used to separate the front
    end (e.g., a web site) from the backend (e.g., a database). We also looked at
    the simple database and application that we’ll use throughout the book.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了API是什么以及它是如何用来将前端（例如，一个网站）与后端（例如，一个数据库）分离的。我们还研究了我们将贯穿整本书使用的简单数据库和应用程序。
- en: In order to demonstrate CRUD operations, we’ll build a simple application focused
    on a **Car** object as if we were working with an inventory of cars. We imported
    it from [https://kaggle.com](https://kaggle.com) .
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示CRUD操作，我们将构建一个以**汽车**对象为中心的简单应用程序，就像我们正在处理汽车库存一样。我们从[https://kaggle.com](https://kaggle.com)导入它。
- en: This lays the groundwork for the rest of the chapters and for the simple application
    that we will build. Our focus will be strictly on creating APIs, so we will spend
    little time on database technology or even on the frontend.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这为后续章节以及我们将要构建的简单应用程序奠定了基础。我们的重点将严格放在创建API上，因此我们将花费很少的时间在数据库技术甚至前端上。
- en: You try it
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您试试看
- en: This is a good time to create your application and the database. If you are
    adventurous, create a similar but different application, database, and data entity.
    This will ensure that you cement the elements we’ll be using.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是创建您的应用程序和数据库的好时机。如果您喜欢冒险，可以创建一个类似但不同的应用程序、数据库和数据实体。这将确保您巩固我们将要使用的元素。
