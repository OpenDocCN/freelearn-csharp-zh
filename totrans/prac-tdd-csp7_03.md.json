["```cs\n$ sudo apt-get update\n$ sudo apt-get install nodejs\n```", "```cs\nruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```", "```cs\n$ brew install node\n```", "```cs\n$ brew update\n$ brew upgrade node\n```", "```cs\n@\"%SystemRoot%\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -NoProfile -ExecutionPolicy Bypass -Command \"iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\" && SET \"PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin\"\n```", "```cs\nC:\\>choco install nodejs\nC:\\>refreshenv\n```", "```cs\nC:\\>choco upgrade nodejs\n```", "```cs\n>npm install -g npm\n```", "```cs\nsudo apt-get update\nsudo apt-get install code # or code-insiders\n```", "```cs\nC:\\> choco install visualstudiocode\n```", "```cs\nmv jetbrains-toolbox-<version>.tar.gz <application directory root>/jetbrains-toolbox-<version>.tar.gz\ncd <application directory root>\ntar –xj jetbrains-toolbox-<version>.tar.gz\nchmod –R 777 jetbrains-toolbox-<version>\ncd jetbrains-toolbox-<version>\n./jetbrains-toolbox \n```", "```cs\nbrew cask install jetbrains-toolbox\n```", "```cs\nchoco install jetbrainstoolbox\n```", "```cs\n>npm install -g create-react-app\n```", "```cs\n\\projects>create-react-app <projectName>\n```", "```cs\n\\projects>create-react-app speakermeet-spa\n```", "```cs\n>npm start\n```", "```cs\n>npm install mocha\n```", "```cs\n>npm install chai\n```", "```cs\nimport { expect } from ‘chai’;\n```", "```cs\n>npm install sinon\n```", "```cs\nimport sinon from ‘sinon’;\n```", "```cs\n>npm install enzyme react-test-renderer react-dom\n```", "```cs\nimport React from 'react';\nimport { expect } from 'chai';\nimport { render } from 'enzyme';\nimport Foo from './Foo';\n\ndescribe('<Foo />', () => {\n  it('renders three `.foo-bar`s', () => {\n    const wrapper = render(<Foo />);\n\n    expect(wrapper.find('.foo-bar').length).to.equal(3);\n   });\n\n   it('renders the title', () => {\n      const wrapper = render(<Foo title=\"unique\" />);\n\n      expect(wrapper.text()).to.contain('unique');\n   });}); \n```", "```cs\n>npm run eject\n```", "```cs\n>npm start\n```", "```cs\n>npm run build\n```", "```cs\n>npm test\n```", "```cs\n>npm install mocha chai sinon enzyme\n```", "```cs\n\"babel\": {\n   \"presets\": [\n     \"react-app\"\n   ]\n },\n```", "```cs\n\"babel\": {\n   \"presets\": [\n     \"react\",\n     \"es2015\"\n   ]\n },\n```", "```cs\n>npm install babel-preset-es2015\n```", "```cs\n\"test\": \"node scripts/test.js --env=jsdom\"\n```", "```cs\n\"test\": \"mocha --require babel-core/register ./scripts/test.js --require babel-core/register ./src/**/*.spec.js\"\n```", "```cs\n\"test:watch\": \"npm test -- -w\"\n```", "```cs\n'use strict';\n\nimport jsdom from 'jsdom';\n\nglobal.document = jsdom.jsdom('<html><body></body></html>');\nglobal.window = document.defaultView;\nglobal.navigator = window.navigator;\n\nfunction noop() {\n  return {};\n}\n\n// prevent mocha tests from breaking when trying to require a css file\nrequire.extensions['.css'] = noop;\nrequire.extensions['.svg'] = noop;\n```", "```cs\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { expect } from 'chai';\n\nimport App from './App';\n\ndescribe('(Component) App', () => {\n  it('renders without crashing', () => {\n    const div = document.createElement('div');\n    ReactDOM.render(<App />, div);\n  });\n});\n```", "```cs\nGiven a string value\n And Given the provided string is not a palindrome\n When checked\n Then return false\n\nGiven a string value\n And Given the provided string is a palindrome\n When checked\n Then return true\n```", "```cs\nimport { expect } from 'chai';\n\ndescribe('Test Framework', () =>  {\n  it('is configured correctly', () => {\n    expect(1).to.equal(0);\n  }\n}\n```", "```cs\ndescribe('Is Palindrome', () => {\n  it('exists', () => {\n    expect(isPalindrome).to.exist;\n  });\n});\n```", "```cs\nfunction isPalindrome() {\n}\n```", "```cs\nit('a single letter is a palindrome', () => {\n  // arrange\n  const value = 'a';\n\n  // act\n  const result = isPalindrome(value);\n\n```", "```cs\n  // assert\n  expect(result).to.be.true;\n});\n```", "```cs\nfunction isPalindrome() {\n  return true;\n}\n```", "```cs\nit('two non-matching letters is not a palindrome', () => {\n  // arrange\n  const value = 'at';\n\n  // act\n  const result = isPalindrome(value);\n\n  // assert\n  expect(result).to.be.false;\n});\n```", "```cs\nfunction isPalindrome(value) {\n  if(value.length === 1) {\n    return true;\n  }\n\n  return false;\n}\n```", "```cs\nit('two matching letters are a palindrome', () => {\n  // arrange\n  const value = 'oo';\n\n  // act\n  const result = isPalindrome(value);\n\n  // assert\n  expect(result).to.be.true;\n});\n```", "```cs\nfunction isPalindrome(value) {\n  if(value.length === 1) {\n    return true;\n  }\n\n  if(value.length === 2 && value[0] === value[1]) {\n    return true;\n  }\n\n  return false;\n}\n```", "```cs\nit('three letter palindrome', () => {\n  // arrange\n  const value = 'mom';\n\n  // act\n  const result = isPalindrome(value);\n\n  // assert\n  expect(result).to.be.true;\n});\n```", "```cs\nfunction isPalindrome(value) {\n  if(value.length === 1) {\n    return true;\n  }\n\n  if(value.length === 2 && value[0] === value[1]) {\n    return true;\n  }\n\n  if(value[0] === value[value.length -1]) {\n    return isPalindrome(value.substring(1, value.length - 1));\n  }\n\n  return false;\n}\n```", "```cs\nit('four letter palindrome', () => {\n  // arrange\n  const value = 'abba';\n\n  // act\n  const result = isPalindrome(value);\n\n  // assert\n  expect(result).to.be.true;\n});\n```"]