["```cs\n<?xml version=\"1.0\"?>\n<xs:schema id=\"sample\" targetNamespace=\"http://tempuri.org/sample.xsd\" elementFormDefault=\"qualified\" xmlns=\"http://tempuri.org/sample.xsd\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n<xs:element name='mySample'>\n<xs:complexType>\n<xs:simpleContent>\n<xs:extension base='xs:decimal'>\n<xs:attribute name='sizing' type='xs:string' />\n</xs:extension>\n</xs:simpleContent>\n</xs:complexType>\n</xs:element>\n</xs:schema> \n```", "```cs\n{\n    Name: string,\n    Surname: string,\n    Address: string\n} \n```", "```cs\n{\n    Name: string,\n    Surname: string,\n} \n```", "```cs\n{\n    Name: string,\n    Surname: string,\n    Address:\n        {\n            Country: string,\n            Town: string,\n            Location: string\n        }\n} \n```", "```cs\nAuthorization: Api-Key <string known by both server and client> \n```", "```cs\nX-API-Key: <string known by both server and client> \n```", "```cs\nAuthorization: Bearer <bearer token string> \n```", "```cs\n{\n  \"alg\": \"RS256\",\n  \"typ\": \"JWT\"\n} \n```", "```cs\n{\n  \"iss\": \"wwtravelclub.com\"\n\"sub\": \"example\",\n  \"aud\": [\"S1\", \"S2\"],\n  \"roles\": [\n    \"ADMIN\",\n    \"USER\"\n  ],\n  \"exp\": 1512975450,\n  \"iat\": 1512968250230\n} \n```", "```cs\n<header BASE64 string>.<payload base64 string> \n```", "```cs\n<header BASE64 string>.<payload base64 string>.<signature string> \n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\n// Add services to the container.\nbuilder.Services.AddControllers();\n// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\nvar app = builder.Build();\n// Configure the HTTP request pipeline.\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\napp.UseHttpsRedirection();\napp.UseAuthorization();\napp.MapControllers();\napp.Run(); \n```", "```cs\n{\n\"iisSettings\": {\n\"windowsAuthentication\": false,\n\"anonymousAuthentication\": true,\n\"iisExpress\": {\n\"applicationUrl\": \"http://localhost:48638\",\n\"sslPort\": 44367\n}\n},\n\"profiles\": {\n\"http\": {\n\"commandName\": \"Project\",\n\"dotnetRunMessages\": true,\n\"launchBrowser\": true,\n\"launchUrl\": \"swagger\",\n\"applicationUrl\": \"http://localhost:5085\",\n\"environmentVariables\": {\n\"ASPNETCORE_ENVIRONMENT\": \"Development\"\n}\n},\n\"https\": {\n\"commandName\": \"Project\",\n\"dotnetRunMessages\": true,\n\"launchBrowser\": true,\n\"launchUrl\": \"swagger\",\n\"applicationUrl\": \"https://localhost:7214;http://localhost:5085\",\n\"environmentVariables\": {\n\"ASPNETCORE_ENVIRONMENT\": \"Development\"\n}\n},\n\"IIS Express\": {\n\"commandName\": \"IISExpress\",\n\"launchBrowser\": true,\n\"launchUrl\": \"swagger\",\n\"environmentVariables\": {\n\"ASPNETCORE_ENVIRONMENT\": \"Development\"\n}\n}\n}\n} \n```", "```cs\n<PropertyGroup>\n<EnvironmentName>Staging</EnvironmentName>\n</PropertyGroup> \n```", "```cs\n[Route(\"api/[controller]\")]\n[ApiController]\npublic class ValuesController : ControllerBase\n{\n    // GET api/values/5\n    [HttpGet(\"{id}\")]\n    public ActionResult<string> Get(int id)\n    {\n        ... \n```", "```cs\n[HttpGet]\npublic ... Get() \n```", "```cs\n...MyActionMethod(....[FromHeader] string myHeader....)\n// x is taken from a request header named myHeader\n...MyActionMethod(....[FromServices] MyType x....)\n// x is filled with an instance of MyType through dependency injection \n```", "```cs\nTask ExecuteResultAsync(ActionContext context); \n```", "```cs\npublic record MyType\n{\n   [Required]\n    public string Name{get; set;}\n    ...\n    [MaxLength(64)]\n    public string Description{get; set;}\n} \n```", "```cs\npublic async Task<IActionResult>MyMethod(......)\n{\n    await MyBusinessObject.MyBusinessMethod();\n    ...\n}\npublic async Task<ActionResult<MyType>>MyMethod(......)\n{\n    ... \n```", "```cs\nIf(User.IsInRole(\"Administrators\") || User.IsInRole(\"SuperUsers\"))\n{\n    ...\n}\nelse return Forbid(); \n```", "```cs\n[Authorize(Roles = \"Administrators,SuperUsers\")] \n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\n// Add services to the container.\nbuilder.Services.AddControllers();\n...\nbuilder.Services.AddAuthorization(options =>\n{\n    options.AddPolicy(\"CanDrive\", policy =>\n       policy.RequireAssertion(context =>\n       context.User.HasClaim(c => c.Type == \"HasDrivingLicense\")));\n}); \n```", "```cs\nvar app = builder.Build();\n...\napp.UseAuthorization();\napp.MapControllers();\napp.Run(); \n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\n// Add services to the container.\nbuilder.Services.AddControllers();\n...\nbuilder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\n    .AddJwtBearer(options => {\n        options.TokenValidationParameters =\n          new TokenValidationParameters\n          {\n              ValidateIssuer = true,\n              ValidateAudience = true,\n              ValidateLifetime = true,\n              ValidateIssuerSigningKey = true,\n              ValidIssuer = \"My.Issuer\",\n              ValidAudience = \"This.Website.Audience\",\n              IssuerSigningKey = new\n                  SymmetricSecurityKey(Encoding.ASCII.GetBytes(\"MySecret\"))\n          };\n    }); \n```", "```cs\n.AddJwtBearer(options => {\noptions.Authority = \"https://www.MyAuthorizationserver.com\";\noptions.TokenValidationParameters =...\n        ... \n```", "```cs\nvar claims = new List<Claim>\n{\n   new Claim(...),\n   new Claim(...) ,\n   ...\n};\nvar token = new JwtSecurityToken(\n          issuer: \"MyIssuer\",\n          audience: ...,\n          claims: claims,\n          expires: DateTime.UtcNow.AddMinutes(expiryInMinutes),\n          signingCredentials:\n          new SymmetricSecurityKey(Encoding.ASCII.GetBytes(\"MySecret\"));\n          return OK(new JwtSecurityTokenHandler().WriteToken(token)); \n```", "```cs\n[HttpGet(\"{id}\")]\n[ProducesResponseType(typeof(MyReturnType), StatusCodes.Status200OK)]\n[ProducesResponseType(typeof(MyErrorReturnType), StatusCodes.Status404NotFound)]\npublic IActionResult GetById(int id)... \n```", "```cs\n [ProducesResponseType(StatusCodes.Status403Forbidden)] \n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\n...\n//open api middleware\nbuilder.Services.AddSwaggerGen(c =>\n{\n    c.SwaggerDoc(\"v1\", new() { Title = \"WWTravelClubREST60\", Version = \"v1\" });\n});\nvar app = builder.Build();\n...\napp.UseSwagger();\napp.UseSwaggerUI(c => c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"WWTravelClubREST60 v1\"));\n...\napp.Run(); \n```", "```cs\nvar security = new Dictionary<string, IEnumerable<string>>\n{\n    {\"Bearer\", new string[] { }},\n};\nc.AddSecurityDefinition(\"Bearer\", new ApiKeyScheme\n{\n    Description = \"JWT Authorization header using the Bearer scheme.\n    Example: \\\"Authorization: Bearer {token}\\\"\",\n    Name = \"Authorization\",\n    In = \"header\",\n    Type = \"apiKey\"\n});\nc.AddSecurityRequirement(security); \n```", "```cs\n/// <summary>\n/// Deletes a specific TodoItem.\n/// </summary>\n/// <param name=\"id\">id to delete</param>\n[HttpDelete(\"{id}\")]\npublic IActionResultDelete(long id) \n we can add an example of usage:\n```", "```cs\n/// <summary>\n/// Creates an item.\n/// </summary>\n/// <remarks>\n/// Sample request:\n///\n/// POST /MyItem\n/// {\n/// \"id\": 1,\n/// \"name\": \"Item1\"\n/// }\n///\n/// </remarks> \n```", "```cs\n/// <param name=\"item\">item to be created</param>\n/// <returns>A newly created TodoItem</returns>\n/// <response code=\"201\">Returns the newly created item</response>\n/// <response code=\"400\">If the item is null</response> \n```", "```cs\n<PropertyGroup>\n<GenerateDocumentationFile>true</GenerateDocumentationFile>\n<NoWarn>$(NoWarn);1591</NoWarn>\n</PropertyGroup> \n```", "```cs\nvar xmlFile = $\"{Assembly.GetExecutingAssembly().GetName().Name}.xml\";\nvar xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);\nc.IncludeXmlComments(xmlPath); \n```", "```cs\napp.UseSwaggerUI(c =>\n{\n    c.SwaggerEndpoint(\"/swagger/<documentation name>/swagger.json\", \"\n    <api name that appears in dropdown>\");\n}); \n```", "```cs\nbuilder.Services.AddHttpClient<IMyProxy, MyProxy>() \n```", "```cs\n//Add a bearer token to authenticate the call\nwebClient.DefaultRequestHeaders.Add(\"Authorization\", \"Bearer \" + token);\n...\n//Call service method with a POST verb and get response\nvar response = await webClient.PostAsJsonAsync<MyPostModel>(\"my/method/relative/path\",\n    new MyPostModel\n    {\n        //fill model here\n        ...\n    });\n//extract response status code\nvar status = response.StatusCode;\n...\n//extract body content from response\nstring stringResult = await response.Content.ReadAsStringAsync(); \n```", "```cs\nvar result =\n  JsonSerializer.Deserialize<MyResultClass>(stringResult); \n```", "```cs\nvar response =\n  await webClient.GetAsync(\"my/getmethod/relative/path\"); \n```"]