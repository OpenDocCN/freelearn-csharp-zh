["```cs\nusing System;\nusing Catalog.Domain.Entities;\n\nnamespace Catalog.Domain.Requests.Item\n{\n    public class AddItemRequest \n    {\n        public string Name { get; set; }\n        public string Description { get; set; }\n        public string LabelName { get; set; }\n        public Price Price { get; set; }\n        public string PictureUri { get; set; }\n        public DateTimeOffset ReleaseDate { get; set; }\n        public string Format { get; set; }\n        public int AvailableStock { get; set; }\n        public Guid GenreId { get; set; }\n        public Guid ArtistId { get; set; }\n    } \n}\n```", "```cs\nusing System;\nusing Catalog.Domain.Entities;\n\nnamespace Catalog.Domain.Requests.Item\n{\n    public class EditItemRequest\n    {\n        public Guid Id { get; set; }\n        public string Name { get; set; }\n        public string Description { get; set; }\n        public string LabelName { get; set; }\n        public Price Price { get; set; }\n        public string PictureUri { get; set; }\n        public DateTimeOffset ReleaseDate { get; set; }\n        public string Format { get; set; }\n        public int AvailableStock { get; set; }\n        public Guid GenreId { get; set; }\n        public Guid ArtistId { get; set; }\n    }\n}\n```", "```cs\nusing System;\n\nnamespace Catalog.Domain.Requests.Item\n{\n    public class GetItemRequest\n    {\n        public Guid Id { get; set; }\n    }\n}\n\n```", "```cs\n// /Responses/Item/PriceResponse.cs\nnamespace Catalog.Domain.Responses\n{\n    public class PriceResponse\n    {\n        public decimal Amount { get; set; }\n        public string Currency { get; set; }\n    }\n}\n\n// /Response/Item/ArtistResponse.cs\nusing System;\n\nnamespace Catalog.Domain.Responses\n{\n    public class ArtistResponse\n    {\n        public Guid ArtistId { get; set; }\n        public string ArtistName { get; set; }\n    }\n}\n\n// /Response/Item/GenreResponse.cs\nusing System;\n\nnamespace Catalog.Domain.Responses\n{\n    public class GenreResponse\n    {\n        public Guid GenreId { get; set; }\n        public string GenreDescription { get; set; }\n    }\n}\n\n```", "```cs\nusing System;\n\nnamespace Catalog.Domain.Responses\n{\n    public class ItemResponse\n    {\n        public Guid Id { get; set; }\n        public string Name { get; set; }\n        public string Description { get; set; }\n        public string LabelName { get; set; }\n        public PriceResponse Price { get; set; }\n        public string PictureUri { get; set; }\n        public DateTimeOffset ReleaseDate { get; set; }\n        public string Format { get; set; }\n        public int AvailableStock { get; set; }\n        public Guid GenreId { get; set; }\n        public GenreResponse Genre { get; set; }\n        public Guid ArtistId { get; set; }\n        public ArtistResponse Artist { get; set; }\n    }\n}\n```", "```cs\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Catalog.Domain.Requests.Item;\nusing Catalog.Domain.Responses;\n\nnamespace Catalog.Domain.Services\n{\n    public interface IItemService\n    {\n        Task<IEnumerable<ItemResponse>> GetItemsAsync();\n        Task<ItemResponse> GetItemAsync(GetItemRequest request);\n        Task<ItemResponse> AddItemAsync(AddItemRequest request);\n        Task<ItemResponse> EditItemAsync(EditItemRequest request);\n        Task<ItemResponse> DeleteItemAsync(DeleteItemRequest request);\n    }\n}\n```", "```cs\nusing Catalog.Domain.Entities;\nusing Catalog.Domain.Requests.Item;\nusing Catalog.Domain.Responses;\n\nnamespace Catalog.Domain.Mappers\n{\n    public interface IItemMapper\n    {\n        Item Map(AddItemRequest request);\n        Item Map(EditItemRequest request);\n        ItemResponse Map(Item item);\n    }\n}\n```", "```cs\nusing Catalog.Domain.Entities;\nusing Catalog.Domain.Requests.Item;\n\nnamespace Catalog.Domain.Mappers\n{\n    public class ItemMapper : IItemMapper\n    {\n        public Item Map(AddItemRequest request)\n        {\n            if (request == null) return null;\n\n            var item = new Item\n            {\n                Name = request.Name,\n                Description = request.Description,\n                LabelName = request.LabelName,\n                PictureUri = request.PictureUri,\n                ReleaseDate = request.ReleaseDate,\n                Format = request.Format,\n                AvailableStock = request.AvailableStock,\n                GenreId = request.GenreId,\n                ArtistId = request.ArtistId,\n            };\n\n            if (request.Price != null)\n            {\n                item.Price = new Price { Currency = request.Price.Currency, \n                 Amount = request.Price.Amount };\n            }\n\n            return item;\n        }\n\n        public Item Map(EditItemRequest request)\n        {\n            if (request == null) return null;\n\n            var item = new Item\n            {\n                Id = request.Id,\n                Name = request.Name,\n                ...\n                Format = request.Format,\n                AvailableStock = request.AvailableStock,\n                GenreId = request.GenreId,\n                ArtistId = request.ArtistId,\n            };\n\n            if (request.Price != null)\n            {\n                item.Price = new Price { Currency = request.Price.Currency, \n                 Amount = request.Price.Amount };\n            }\n\n            return item;\n        }\n    }\n}\n```", "```cs\nusing Catalog.Domain.Entities;\nusing Catalog.Domain.Responses;\n\nnamespace Catalog.Domain.Mappers\n{\n    public interface IArtistMapper\n    {\n        ArtistResponse Map(Artist artist);\n    }\n\n    public class ArtistMapper : IArtistMapper\n    {\n        public ArtistResponse Map(Artist artist)\n {\n           if (artist == null) return null; return new ArtistResponse\n            {\n ArtistId = artist.ArtistId,\n ArtistName = artist.ArtistName\n            };\n }\n    }\n}\n```", "```cs\nusing Catalog.Domain.Entities;\nusing Catalog.Domain.Responses;\n\nnamespace Catalog.Domain.Mappers\n{\n    public interface IGenreMapper\n    {\n        GenreResponse Map(Genre genre);\n    }\n\n    public class GenreMapper : IGenreMapper\n    {\n        public GenreResponse Map(Genre genre)\n {\n           if (genre == null) return null; return new GenreResponse\n            {\n GenreId = genre.GenreId,\n GenreDescription = genre.GenreDescription\n            };\n }\n    }\n}\n```", "```cs\nusing Catalog.Domain.Entities;\nusing Catalog.Domain.Responses;\n\nnamespace Catalog.Domain.Mappers\n{\n    public class ItemMapper : IItemMapper\n    {\n        private readonly IArtistMapper _artistMapper;\n private readonly IGenreMapper _genreMapper; \n        public ItemMapper(IArtistMapper artistMapper, IGenreMapper \n            genreMapper)\n        {\n            _artistMapper = artistMapper;\n _genreMapper = genreMapper;\n        }\n\n        ...\n\n      public ItemResponse Map(Item item)\n {\n            if (request == null) return null;\n            var response = new ItemResponse\n            {\n                Id = request.Id,\n                Name = request.Name,\n                ...\n                GenreId = request.GenreId,\n                Genre = _genreMapper.Map(request.Genre),\n                ArtistId = request.ArtistId,\n                Artist = _artistMapper.Map(request.Artist),\n            };\n\n            if (request.Price != null)\n            {\n                response.Price = new PriceResponse { Currency = \n                 request.Price.Currency, Amount = request.Price.Amount };\n            }\n\n            return response;\n        }\n   }\n}\n```", "```cs\npublic static class MappingExtensions\n{\n    public static ArtistResponse MapToResponse(this Artist artist)\n    {\n        return new ArtistResponse\n        {\n            ArtistId = artist.ArtistId,\n            ArtistName = artist.ArtistName\n        };\n    }\n}\n\n```", "```cs\nArtistResponse artistResponse = artistEntity.MapToResponse();\n```", "```cs\ndotnet add package Automapper\n```", "```cs\nusing AutoMapper;\nusing Catalog.Domain.Entities;\nusing Catalog.Domain.Requests.Item;\nusing Catalog.Domain.Responses.Item;\n\nnamespace Catalog.Domain.Mapper\n{\n    public class CatalogProfile : Profile\n    {\n        public CatalogProfile()\n        {\n            CreateMap<ItemResponse, Item>().ReverseMap();\n            CreateMap<GenreResponse, Genre>().ReverseMap();\n            CreateMap<ArtistResponse, Artist>().ReverseMap();\n            CreateMap<Price, PriceResponse>().ReverseMap();\n            CreateMap<AddItemRequest, Item>().ReverseMap();\n            CreateMap<EditItemRequest, Item>().ReverseMap();\n        }\n    }\n}\n```", "```cs\n_mapper.Map<ItemResponse>(new Item());\n```", "```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Catalog.Domain.Mappers;\nusing Catalog.Domain.Repositories;\nusing Catalog.Domain.Requests.Item;\nusing Catalog.Domain.Responses;\n\nnamespace Catalog.Domain.Services\n{\n    public class ItemService : IItemService\n    {\n        private readonly IItemRepository _itemRepository;\n        private readonly IItemMapper _itemMapper;\n\n        public ItemService(IItemRepository itemRepository, \n IItemMapper itemMapper)\n        {\n _itemRepository = itemRepository;\n _itemMapper = itemMapper;\n        }\n\n        public async Task<IEnumerable<ItemResponse>> GetItemsAsync()\n        {\n            var result = await _itemRepository.GetAsync();\n\n            return result.Select(x => _itemMapper.Map(x));\n        }\n\n        public async Task<ItemResponse> GetItemAsync(GetItemRequest \n         request)\n        {\n            if (request?.Id == null) throw new ArgumentNullException();\n\n            var entity = await _itemRepository.GetAsync(request.Id);\n\n            return _itemMapper.Map(entity);\n        }\n    }\n}\n```", "```cs\n\nnamespace Catalog.Domain.Services\n{\n    public class ItemService : IItemService\n    {\n        ...\n\n        public async Task<ItemResponse> AddItemAsync(AddItemRequest \n         request)\n        {\n            var item = _itemMapper.Map(request);\n            var result = _itemRepository.Add(item);\n\n            await _itemRepository.UnitOfWork.SaveChangesAsync();\n\n            return _itemMapper.Map(result);\n        }\n\n        public async Task<ItemResponse> EditItemAsync(EditItemRequest \n         request)\n        {\n            var existingRecord = await \n             _itemRepository.GetAsync(request.Id);\n\n            if (existingRecord == null)\n            {\n                throw new ArgumentException($\"Entity with {request.Id} \n                 is not present\");\n            }\n\n            var entity = _itemMapper.Map(request);\n            var result = _itemRepository.Update(entity);\n\n            await _itemRepository.UnitOfWork.SaveChangesAsync();\n\n            return _itemMapper.Map(result);\n        }\n    }\n}\n```", "```cs\n... \n  var options = new DbContextOptionsBuilder<CatalogContext>()\n                .UseInMemoryDatabase(databaseName: \"should_get_data\")\n                .Options;\n\n            await using var context = new TestCatalogContext(options);\n            context.Database.EnsureCreated();\n\n            var sut = new ItemRepository(context);\n\n...\n```", "```cs\ndotnet new xunit -n Catalog.Fixtures -f netcoreapp3.1\n\ndotnet sln ../Catalog.API.sln add  ./Catalog.Fixtures/Catalog.Fixtures.csproj\n```", "```cs\ndotnet add ./Catalog.Fixtures reference ../src/Catalog.Domain/ dotnet add ./Catalog.Fixtures reference ../src/Catalog.Infrastructure/\n\n```", "```cs\nusing System;\nusing Catalog.Domain.Mappers;\nusing Catalog.Infrastructure;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace Catalog.Fixtures\n{\n    public class CatalogContextFactory\n    {\n        public readonly TestCatalogContext ContextInstance;\n        public readonly IGenreMapper GenreMapper;\n        public readonly IArtistMapper ArtistMapper;\n        public readonly IItemMapper ItemMapper;\n\n        public CatalogContextFactory()\n        {\n            var contextOptions = new \n                DbContextOptionsBuilder<CatalogContext>()\n                .UseInMemoryDatabase(Guid.NewGuid().ToString())\n                .EnableSensitiveDataLogging()\n                .Options;\n\n            EnsureCreation(contextOptions);\n            ContextInstance = new TestCatalogContext(contextOptions);\n\n            GenreMapper = new GenreMapper();\n            ArtistMapper = new ArtistMapper();\n            ItemMapper = new ItemMapper(ArtistMapper, GenreMapper);\n        }\n\n        private void EnsureCreation(DbContextOptions<CatalogContext> \n         contextOptions)\n        {\n            using var context = new TestCatalogContext(contextOptions);\n            context.Database.EnsureCreated();\n        }\n    }\n}\n```", "```cs\nusing System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Catalog.Domain.Entities;\nusing Catalog.Fixtures;\nusing Catalog.Infrastructure.Repositories;\nusing Newtonsoft.Json;\nusing Shouldly;\nusing Xunit;\n\nnamespace Catalog.Infrastructure.Tests\n{\n    public class ItemRepositoryTests :\n        IClassFixture<CatalogContextFactory>\n    {\n        private readonly ItemRepository _sut;\n private readonly TestCatalogContext _context;\n\n        public ItemRepositoryTests(CatalogContextFactory catalogContextFactory)\n        {\n            _context = catalogContextFactory.ContextInstance;\n _sut = new ItemRepository(_context);\n        }\n...\n```", "```cs\n\n    public class ItemRepositoryTests : IClassFixture<CatalogContextFactory>\n    {\n        private readonly ItemRepository _sut;\n private readonly TestCatalogContext _context;\n\n public ItemRepositoryTests(CatalogContextFactory \n            catalogContextFactory)\n {\n _context = catalogContextFactory.ContextInstance;\n _sut = new ItemRepository(_context);\n }\n\n        [Fact]\n        public async Task should_add_new_item()\n        {\n            var testItem = new Item\n            {\n                Name = \"Test album\",\n                Price = new Price { Amount = 13, Currency = \"EUR\" },\n                GenreId = new Guid(\"c04f05c0-f6ad-44d1-a400-\n                    3375bfb5dfd6\"),\n                ArtistId = new Guid(\"f08a333d-30db-4dd1-b8ba-\n                    3b0473c7cdab\"),\n                ...\n            };\n\n            _sut.Add(testItem);\n            await _sut.UnitOfWork.SaveEntitiesAsync();\n\n            _context.Items\n                .FirstOrDefault(item => item.Id == testItem.Id)\n                .ShouldNotBeNull();\n        }\n    }\n```", "```cs\ndotnet new xunit -n Catalog.Domain.Tests -f netcoreapp3.1\n```", "```cs\ndotnet sln ../Catalog.API.sln add Catalog.Domain.Tests \n```", "```cs\ndotnet add reference ../Catalog.Fixtures\ndotnet add reference ../../src/Catalog.Domain\ndotnet add package Shouldly\n```", "```cs\nusing System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Catalog.Domain.Entities;\nusing Catalog.Domain.Mappers;\nusing Catalog.Domain.Requests.Item;\nusing Catalog.Domain.Services;\nusing Catalog.Fixtures;\nusing Catalog.Infrastructure.Repositories;\nusing Shouldly;\nusing Xunit;\n\nnamespace Catalog.Domain.Tests.Services\n{\n    public class ItemServiceTests : \n        IClassFixture<CatalogContextFactory>\n    {\n private readonly ItemRepository _itemRepository;\n private readonly IItemMapper _mapper;\n\n public ItemServiceTests(CatalogContextFactory catalogContextFactory)\n {\n _itemRepository = new ItemRepository(catalogContextFactory.ContextInstance);\n _mapper = catalogContextFactory.ItemMapper;\n }\n\n        [Fact]\n        public async Task getitems_should_return_right_data()\n        {\n            ItemService sut = new ItemService(_itemRepository, _mapper);\n\n            var result = await sut.GetItemsAsync();\n            result.ShouldNotBeNull();\n        }\n\n        [Theory]\n        [InlineData(\"b5b05534-9263-448c-a69e-0bbd8b3eb90e\")]\n        public async Task getitem_should_return_right_data(string guid)\n        {\n            ItemService sut = new ItemService(_itemRepository, _mapper);\n\n            var result = await sut.GetItemAsync(new GetItemRequest { Id = new Guid(guid) });\n\n            result.Id.ShouldBe(new Guid(guid));\n        }\n\n        [Fact]\n        public void getitem_should_thrown_exception_with_null_id()\n        {\n            ItemService sut = new ItemService(_itemRepository, _mapper);\n\n            sut.GetItemAsync(null).ShouldThrow<ArgumentNullException>();\n        }\n    }\n}\n```", "```cs\n\n    public class ItemServiceTests : \n        IClassFixture<CatalogContextFactory>\n    {\n        private readonly ItemRepository _itemRepository;\n        private readonly IItemMapper _mapper;\n\n        public ItemServiceTests(CatalogContextFactory catalogContextFactory)\n        {\n            _itemRepository = new ItemRepository(catalogContextFactory.ContextInstance);\n            _mapper = catalogContextFactory.ItemMapper;\n        }\n\n        ...\n\n        [Fact]\n public async Task additem_should_add_right_entity()\n        {\n            var testItem = new AddItemRequest\n            {\n                Name = \"Test album\",\n                GenreId = new Guid(\"c04f05c0-f6ad-44d1-a400-3375bfb5dfd6\"),\n                ArtistId = new Guid(\"f08a333d-30db-4dd1-b8ba-3b0473c7cdab\"),\n                Price = new Price { Amount = 13, Currency = \"EUR\" }\n                ...\n            };\n\n            IItemService sut = new ItemService(_itemRepository, _mapper);\n\n            var result = await sut.AddItemAsync(testItem);\n\n            result.Name.ShouldBe(testItem.Name);\n            result.Description.ShouldBe(testItem.Description);\n            result.GenreId.ShouldBe(testItem.GenreId);\n            result.ArtistId.ShouldBe(testItem.ArtistId);\n            result.Price.Amount.ShouldBe(testItem.Price.Amount);\n            result.Price.Currency.ShouldBe(testItem.Price.Currency);\n        }\n\n        [Fact]\n public async Task edititem_should_add_right_entity()\n        {\n            var testItem = new EditItemRequest\n            {\n                Id = new Guid(\"b5b05534-9263-448c-a69e-0bbd8b3eb90e\"),\n                Name = \"Test album\",\n                GenreId = new Guid(\"c04f05c0-f6ad-44d1-a400-3375bfb5dfd6\"),\n                ArtistId = new Guid(\"f08a333d-30db-4dd1-b8ba-3b0473c7cdab\"),\n                Price = new Price { Amount = 13, Currency = \"EUR\" }\n                ...\n            };\n\n            ItemService sut = new ItemService(_itemRepository, _mapper);\n\n            var result = await sut.EditItemAsync(testItem);\n\n            result.Name.ShouldBe(testItem.Name);\n            result.Description.ShouldBe(testItem.Description);\n            result.GenreId.ShouldBe(testItem.GenreId);\n            result.ArtistId.ShouldBe(testItem.ArtistId);\n            result.Price.Amount.ShouldBe(testItem.Price.Amount);\n            result.Price.Currency.ShouldBe(testItem.Price.Currency);\n        }\n    }\n}\n```", "```cs\ndotnet add package FluentValidation\ndotnet add package FluentValidation.AspNetCore\n\n```", "```cs\n//Requests/Item/Validators/AddItemRequestValidator.cs using FluentValidation;\n\nnamespace Catalog.Domain.Requests.Item.Validators\n{\n    public class AddItemRequestValidator : AbstractValidator<AddItemRequest>\n    {\n        public AddItemRequestValidator()\n        {\n            RuleFor(x => x.GenreId).NotEmpty();\n            RuleFor(x => x.ArtistId).NotEmpty();\n            RuleFor(x => x.Price).NotEmpty();\n            RuleFor(x => x.ReleaseDate).NotEmpty();\n            RuleFor(x => x.Name).NotEmpty();\n            RuleFor(x => x.Price).Must(x => x?.Amount > 0);\n            RuleFor(x => x.AvailableStock).Must(x => x > 0);\n        }\n    }\n}\n//Requests/Item/Validators/EditItemRequestValidator.cs\n\nusing FluentValidation;\n\nnamespace Catalog.Domain.Requests.Item.Validators\n{\n    public class EditItemRequestValidator : AbstractValidator<EditItemRequest>\n    {\n        public EditItemRequestValidator()\n        {\n            RuleFor(x => x.Id).NotEmpty();\n            RuleFor(x => x.GenreId).NotEmpty();\n            RuleFor(x => x.ArtistId).NotEmpty();\n            RuleFor(x => x.Price).NotEmpty();\n            RuleFor(x => x.Price).Must(x => x?.Amount > 0);\n            RuleFor(x => x.ReleaseDate).NotEmpty();\n            RuleFor(x => x.Name).NotEmpty();\n        }\n    }\n}\n```", "```cs\nusing Catalog.Domain.Entities;\nusing Catalog.Domain.Requests.Item;\nusing Catalog.Domain.Requests.Item.Validators;\nusing FluentValidation.TestHelper;\nusing Xunit;\n\nnamespace Catalog.Domain.Tests.Requests.Item.Validators\n{\n    public class AddItemRequestValidatorTests\n    {\n        private readonly AddItemRequestValidator _validator;\n\n        public AddItemRequestValidatorTests()\n        {\n            _validator = new AddItemRequestValidator();\n        }\n\n        [Fact]\n        public void should_have_error_when_ArtistId_is_null()\n        {\n            var addItemRequest = new AddItemRequest { Price = new Price() };\n            _validator.ShouldHaveValidationErrorFor(x => x.ArtistId, addItemRequest);\n        }\n\n        [Fact]\n        public void should_have_error_when_GenreId_is_null()\n        {\n            var addItemRequest = new AddItemRequest { Price = new Price() };\n            _validator.ShouldHaveValidationErrorFor(x => x.GenreId, addItemRequest);\n        }\n    }\n}\n```", "```cs\nusing System.Reflection;\nusing Catalog.Domain.Mappers;\nusing Catalog.Domain.Services;\nusing FluentValidation.AspNetCore;\nusing Microsoft.Extensions.DependencyInjection;\n\nnamespace Catalog.Domain.Extensions\n{\n    public static class DependenciesRegistration\n    {\n        public static IServiceCollection AddMappers(this IServiceCollection services)\n        {\n            services\n                .AddSingleton<IArtistMapper, ArtistMapper>()\n                .AddSingleton<IGenreMapper, GenreMapper>()\n                .AddSingleton<IItemMapper, ItemMapper>();\n\n            return services;\n        }\n\n        public static IServiceCollection AddServices(this IServiceCollection services)\n        {\n            services\n                .AddScoped<IItemService, ItemService>();\n\n            return services;\n        }\n\n        public static IMvcBuilder AddValidation(this IMvcBuilder builder)\n        {\n            builder\n                .AddFluentValidation(configuration =>\n                    configuration.RegisterValidatorsFromAssembly\n                        (Assembly.GetExecutingAssembly()));\n\n            return builder;\n        }\n    }\n}\n```", "```cs\nusing Catalog.API.Extensions;\n...\n\nnamespace Catalog.API\n{\n    public class Startup\n    {\n        ...\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services\n                .AddCatalogContext(Configuration.GetSection(\"DataSource:ConnectionString\").Value)\n                .AddScoped<IItemRepository, ItemRepository>()\n                .AddMappers()\n .AddServices()\n .AddControllers()\n .AddValidation();\n        }\n...\n```"]