["```cs\n    var builder = WebApplication.CreateBuilder(args);\n    // Add services to the container.\n    // Learn more about configuring Swagger/OpenAPI at\n       https://aka.ms/aspnetcore/swashbuckle\n    builder.Services.AddEndpointsApiExplorer();\n    builder.Services.AddSwaggerGen();\n    var app = builder.Build();\n    // Configure the HTTP request pipeline.\n    if (app.Environment.IsDevelopment())\n    {\n        app.UseSwagger();\n        app.UseSwaggerUI();\n    }\n    app.UseHttpsRedirection();\n    var summaries = new[]\n    {\n        \"Freezing\", \"Bracing\", \"Chilly\", \"Cool\", \"Mild\",\n        \"Warm\", \"Balmy\", \"Hot\", \"Sweltering\", \"Scorching\"\n    };\n    app.MapGet(\"/weatherforecast\", () =>\n    {\n        var forecast = Enumerable.Range(1, 5).Select(index\n        =>\n            new WeatherForecast\n            (\n                DateOnly.FromDateTime(DateTime.Now.AddDays\n                    (index)),\n                Random.Shared.Next(-20, 55),\n                summaries[Random.Shared.Next(\n                    summaries.Length)]\n            ))\n            .ToArray();\n        return forecast;\n    })\n    .WithName(\"GetWeatherForecast\")\n    .WithOpenApi();\n    app.Run();\n    internal record WeatherForecast(DateOnly Date,\n    int TemperatureC, string? Summary)\n    {\n        public int TemperatureF => 32 +\n            (int)(TemperatureC / 0.5556);\n    }\n    ```", "```cs\nusing System.Data.Common;\nusing Microsoft.AspNetCore.Mvc.Testing;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Storage;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.DependencyInjection.Extensions;\nusing Microsoft.Extensions.Hosting;\nusing ThemePark.Data.DataContext;\nnamespace ThemePark.Api.Tests;\npublic class TestThemeParkApiApplication :\nWebApplicationFactory<Program>\n{\n    protected override IHost CreateHost(\n    IHostBuilder builder)\n    {\n        var root = new InMemoryDatabaseRoot();\n        builder.ConfigureServices(services =>\n        {\n            services.RemoveAll(typeof(\n                DbContextOptionsBuilder<ThemeParkDbContext>\n                ));\n            services.AddScoped(sp => new\n            DbContextOptionsBuilder<ThemeParkDbContext>()\n                .UseInMemoryDatabase(\"TestApi\", root)\n                .UseApplicationServiceProvider(sp)\n                .Options);\n            services.AddDbContext<ThemeParkDbContext>(\n            (container, options) =>\n            {\n                var connection = container\n                    .GetRequiredService<DbConnection>();\n                options.UseSqlite(connection);\n            });\n            services.AddTransient<IThemeParkDbContext,\n                ThemeParkDbContext>();\n        });\n        return base.CreateHost(builder);\n    }\n}\n```", "```cs\nusing Microsoft.Extensions.DependencyInjection;\nusing ThemePark.Data.DataContext;\nnamespace ThemePark.Api.Tests;\n[TestClass]\npublic class ApiTests\n{\n    private TestThemeParkApiApplication _app;\n    [TestInitialize]\n    public void Setup()\n    {\n        _app = new TestThemeParkApiApplication();\n        using (var scoped = _app.Services.CreateScope())\n        {\n            var context = scoped.ServiceProvider\n                .GetService<IThemeParkDbContext>();\n            context?.Database.EnsureCreated();\n        }\n    }\n    [TestMethod]\n    [TestCategory(\"Integration\")]\n    public async Task GetAllAttractions()\n    {\n        // Arrange\n        var client = _app.CreateClient();\n        var expected = TestData.ExpectedAttractionData;\n        // Act\n        var response = await\n            client.GetAsync(\"/attractions\");\n        var actual = await response.Content\n            .ReadAsStringAsync();\n        // Assert\n        Assert.AreEqual(expected, actual);\n    }\n}\n```", "```cs\n{\n    \"total\": 7,\n    \"pageSize\": 7,\n    \"currentPage\": 1,\n    \"next\": false,\n    \"previous\": false,\n    \"results\": [\n        {\n            \"id\": 1,\n            \"name\": \"Twirly Ride\",\n            \"locationId\": 2,\n            \"locationName\": \"Fantasy\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"Mine car Coaster\",\n            \"locationId\": 5,\n.\n.\n```", "```cs\n    GET /users\n    Custom-Header: api-version=1\n    ```", "```cs\npublic static class AttractionExtensions\n{\n    public static AttractionDto ToDto(\n    this Attraction attraction)\n    {\n        return new AttractionDto\n        {\n            Id = attraction.Id,\n            Name = attraction.Name,\n            LocationId = attraction.LocationId,\n            LocationName = attraction.Location == null\n                ? string.Empty\n                : attraction.Location.Name\n        };\n    }\n}\n```", "```cs\n// Bad use of HttpClient\nvar client = new HttpClient();\n```", "```cs\n// Still not good\nusing (var client = new HttpClient())\n{\n    .\n    .\n}\n```", "```cs\npublic class IndexModel : PageModel\n{\n    private readonly ILogger<IndexModel> _logger;\n    private readonly IHttpClientFactory _factory;\n    public IndexModel(\n        ILogger<IndexModel> logger,\n        IHttpClientFactory factory)\n    {\n        _logger = logger;\n        _factory = factory;\n    }\n    public async Task OnGet()\n    {\n        // Bad use of HttpClient\n        // var client = new HttpClient();\n        // Still not good\n        //using (var client = new HttpClient())\n        //{\n        //    .\n        //    .\n        //}\n        // Best way to use HttpClient\n        var client = _factory.CreateClient();\n        // use client.GetAsync(\"https://www.google.com\") to\n           grab HTML\n    }\n}\n```", "```cs\nprivate static HttpClient _client { get; set; }\npublic HttpClient CreateClient()\n{\n    if (_client == null)\n    {\n        _client = new HttpClient();\n    }\n    return _client;\n}\n```"]