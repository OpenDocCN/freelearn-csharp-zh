- en: Scripting Our Points System
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last chapter, we designed, developed, and incorporated a **Heads-Up Display**
    (**HUD**) in our game. We used a canvas game object to create text and graphics
    that provide visual indicators of points, health, and additional information to
    help the player maintain situational awareness during game play. In addition,
    we wrote scripts to update key components of the HUD. We also implemented a mini-map
    using a second camera in our game scene.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will design, script, and implement our game's point system.
    This will include providing frame-by-frame updates to key on-screen components
    of the game's HUD.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, we will write scripts for the following in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Collecting cherries from trees
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the cherry-throwing capability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding points based on cherry collection and combat hits
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collecting cherries from trees
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will make the necessary adjustments to our game objects
    and script functionality that enable the collection of cherries from cherry trees.
    More specifically, we will create the following gameplay:'
  prefs: []
  type: TYPE_NORMAL
- en: Detect collisions of Cucumber Man and cherry trees
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simulate collection of cherries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update inventory and HUD with cherry count
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before we get started, you should open your Unity game project. Alternatively,
    you can download the Starting-Chapter-10 Unity project available from the publisher's
    companion site.
  prefs: []
  type: TYPE_NORMAL
- en: Detecting collisions of Cucumber Man and cherry trees
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will enable and test collisions between the Cucumber Man
    and cherry trees. Our first step is to ensure the cherry trees in our sandbox
    area all have the `CherryTree` tag. We previously created the tag name, so we
    only need to apply it to the trees in our sandbox. Here are the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Hierarchy panel, select a Cherry Tree that is inside your sandbox area
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Inspector panel, click the drop-down box to the left of the Tag label
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the CherryTree tag
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat steps 1 through 3 for each Cherry Tree GameObject in your sandbox area
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Optionally, repeat steps 1 through 3 for all the Cherry Tree GameObjects in
    the Hierarchy view, not just the ones in your sandbox area
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we will create a `CucumberManManager` script to handle the collisions
    with the cherry trees. Here are the steps to create that script:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Hierarchy panel, select the CumcuberMan player character
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Inspector panel, scroll to the bottom and click the Add Component button
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select New Script
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the script `CucumberManManager`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the Create and Add button
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Project panel, click Favorites | All Scripts
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the `CucumberManManager` script to the `Assets` | `Custom Scripts` folder
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click the `CucumberManManager` script to open it in an editor
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit the script so that it matches the code provided here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The preceding script is a C# script with an `OnTriggerEnter()` method. As you
    can see, we check the tag of what the Cucumber Man collided with to see if that
    game object has a tag of `CherryTree`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we need to do something when that collision is detected. We will handle
    that in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Simulating the collection of cherries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will continue working on the `CucumberManManager` script
    to simulate the collection of cherries.
  prefs: []
  type: TYPE_NORMAL
- en: If you do not already have the script open, open it now in an editor. We will
    review the updated code in five sequential sections.
  prefs: []
  type: TYPE_NORMAL
- en: Our first section, shown here, imports the three necessary namespaces.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The fourth line of code is the class declaration statement. The last three
    lines of code in this section are the class variables. Here is a brief description
    of each:'
  prefs: []
  type: TYPE_NORMAL
- en: '`currentCherryCount`: Keep the current number of cherries in the Cucumber Man''s
    inventory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tempCurrentCherryCount`: Used to limit cherry collection to one per second'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`collectingCherries`: Used to determine whether the inventory counter should
    be active'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Our second section, shown as follows, features the `Awake()` method. This method
    is used to initialize our variables at the start of the game:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Our third section, shown here, features the `Update()` method. This method is
    executed once per frame. We have an if/else statement nested in an outer if statement.
    This outer statement checks to see whether the `collectingCherries` Boolean value
    is true. If it is, the inner if/else statement block is evaluated.
  prefs: []
  type: TYPE_NORMAL
- en: 'The inner if/else block checks to see whether the `tempCurrentCherryCount`
    variable''s value is greater than or equal to `60`. If it is, then the `currentCherryCount`
    value is incremented by one; otherwise, the `tempCurrentCherryCount` value is
    incremented by one. The `Update()` method is called once per frame and frame rates
    can vary. So, we are essentially adding one cherry to the Cucumber Man''s inventory
    every 60 frames:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Our fourth section, shown in the following code block, contains the `OnTriggerEnter()`
    method we started in the last section. We edited this method to include an if
    statement that checks to see whether the Cucumber Man has entered a collision
    with a cherry tree. If so, the `collectingCherries` Boolean variable is set to
    `true` and one cherry is added to the inventory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Our fifth section, shown as follows, has the `OnTriggerExit()` method. This
    event is fired when the Cucumber Man stops colliding with the cherry trees. When
    this occurs, we set the `collectingCherries` Boolean value to `false`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Updating the inventory and HUD with cherry count
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We now have a system in place for adding cherries to the Cucumber Man's inventory
    based on his collision with cherry trees. Next, we need to update the appropriate
    UI text component with the current inventory amount. We will take care of this
    important task in this section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the steps to create that script:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Hierarchy panel, select the `HUD_Canvas` | `Cherries_Count` UI text component
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Inspector panel, scroll to the bottom and click the Add Component button
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select New Script
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the script `CherryManager`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the Create and Add button
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Project panel, click Favorites | All Scripts
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the `CherryManager` script to the `Assets` | `Custom Scripts` folder
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click the `CherryManager` script to open it in an editor
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit the script so that it matches the code provided here
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'An explanation of this code is provided immediately following the code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The first four lines of code import the appropriate namespaces.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next line of code is the class declaration: `public class CherryManager
    : MonoBehaviour {`.'
  prefs: []
  type: TYPE_NORMAL
- en: Next is the single class variable, a `text` object named `Cherries_Count`.
  prefs: []
  type: TYPE_NORMAL
- en: The first method in the class is the `Awake()` method. We use this method to
    create a reference to the `Cherries_Count` UI text component.
  prefs: []
  type: TYPE_NORMAL
- en: The last section of our `CherryManager` class is the `Update()` method. That
    method has a single statement used to convert the `currentCherryCount` from an
    `int` to a string and update the HUD.
  prefs: []
  type: TYPE_NORMAL
- en: You can play-test the game to validate the functionality. Simply navigate the
    Cucumber Man to a cherry tree and watch the inventory of cherries increase. It
    is important for us to have a method of collecting cherries because the player
    can press the *E* key on the keyboard to throw a cherry. We will program that
    functionality in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Now is a great time to save your scene and project.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the cherry-throwing capability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 7](6a3fb463-b0c2-4145-9096-bc52d55cf905.xhtml), *Implementing our
    Player Character*, we demonstrated the Cucumber Man's throw animation using the
    *E* keyboard key. In this section, we will make the necessary changes to instantiate
    a cherry in the Cucumber Man's right hand when the *E* keyboard key is pressed
    and then allow it to be launched. We will check to ensure the Cucumber Man has
    at least one cherry in his inventory so we know whether a cherry should be instantiated
    or not. Okay, let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a spot for the cherry
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following steps demonstrate how to create a spot for the cherry on the Cucumber
    Man's right hand.
  prefs: []
  type: TYPE_NORMAL
- en: In the Hierarchy panel, expand the `CucumberMan` object until you see `Character1_RightHand`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click `Character1_RightHand` and select Create Empty.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the new GameObject to `cherrySpot`. This will be the spot where we render
    the cherry.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your `CucumberMan` object''s hierarchy should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/86af7308-f77d-4295-b9a5-b8bdd514e8b3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Using the transform tools, move the `cherrySpot` GameObject so that it is inside
    the Cucumber Man''s right hand. Your placement should be similar to what is displayed
    here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/138608f2-0cc2-439e-b244-d9f329a84c23.png)'
  prefs: []
  type: TYPE_IMG
- en: We will need to add a `Rigidbody` to the `Cherry` prefab so we can instantiate
    and throw it during runtime.
  prefs: []
  type: TYPE_NORMAL
- en: In the Project panel, select Assets | Cherry | `Cherry.Prefab`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Inspector panel, click the Add Component button
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Physics | Rigidbody
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncheck the Use Gravity option
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand the Constraints section of the Rigidbody component
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check all Freeze Position and Freeze Rotation boxes
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we will add the `Cherry` prefab to our scene.
  prefs: []
  type: TYPE_NORMAL
- en: Drag the Cherry prefab from the Project panel to the Hierarchy panel, making
    it subordinate to the cherrySpot game object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In Scene view, zoom in and adjust the location of the cherrySpot so the cherry
    looks as if the Cucumber Man is holding it. A suggested placement is shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f2146f28-d1c8-4e6c-b615-06a5b2d39e9c.png)'
  prefs: []
  type: TYPE_IMG
- en: Writing a CherryControl script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, we will add a script to the cherry prefab to support the creation and
    release of the cherry with respect to the Cucumber Man's hand.
  prefs: []
  type: TYPE_NORMAL
- en: In the Project panel, select Assets | Cherry | `Cherry.Prefab`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Inspector panel, click the Add Component button
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select New Script and name the script CherryControl
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the Create and Add button
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Project panel, drag the new script into the `Assets` | `Custom Scripts`
    folder
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit the script so that it matches what is provided in the following code block
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The first part of the script consists of the namespace import statements and
    the class declaration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The next section contains the class variables. We have one `Rigidbody`, two
    floats, and a `GameObject`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Update()` method, shown here, checks to see whether the *E* keyboard key
    is pressed and whether the Cucumber Man has at least one cherry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The last section of the code is the `ThrowACherry()` method. As you can see,
    we clone the cherry at the Cucumber Man''s hand, turn gravity on, release the
    constraints, and push it forward using the `AddForce()` method. Next, we use the
    `Destroy()` method to destroy the cloned cherry in four seconds. The last statement
    decrements the Cucumber Man''s cherry inventory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Adding points based on cherry collection and combat hits
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will edit the appropriate scripts so that the Cucumber
    Man can earn points, related to cherries, based on the following criteria:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **In-game event** | **Points** |'
  prefs: []
  type: TYPE_TB
- en: '| Cucumber Man picks cherry | + 5 |'
  prefs: []
  type: TYPE_TB
- en: '| Cucumber Man hits beetle with cherry | + 10 |'
  prefs: []
  type: TYPE_TB
- en: Creating a points manager script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will create and edit a script to manage our points and
    to display them on our game''s HUD. Here are the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Hierarchy panel, select the HUD_Canvas | Score_Value
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Inspector panel, click the Add Component button
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select New Script and name the script `PointsManager`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Project panel, click Favorites | All Scripts
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the PointsManager script to the Assets | `Custom Scripts` folder
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click the PointsManager script to open it in an editor
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit the script so that it matches the following code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The first section of the code contains the namespace import statements and
    the `PointsManager` class declaration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The next section of the script declares two class variables; one for the current
    score and the other is a reference to the `Text` UI component that displays the
    score during game play:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The first method in our class is the `Awake()` method. We use this method to
    initialize our variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The last section of our class is the `Update()` method. Here, we have a single
    statement that converts the current score to a string and then updates the HUD:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Adding points for each cherry picked
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will edit the appropriate script to add five points for
    each cherry picked. Here are the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Project panel, select the Custom Scripts | CucumberManManager
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit the script
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following class variable: public `PointsManager _ptsManager;`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following lines of code inside the nested if statement in the `Update()`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The two lines of preceding code create a reference to the `PointsManager` script
    and, on the second line, increments the `currentScore` by 5.
  prefs: []
  type: TYPE_NORMAL
- en: 'The updated `CucumberManManager` script should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Adding points for hitting a beetle with a cherry
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our last points-related task is to update the BeetleNPC script so that appropriate
    points are added when a cherry hits a cucumber beetle. Here are the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Project panel, select the Custom Scripts | BeetleNPC
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit the script
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the following class variable:  `public PointsManager _ptsManager;`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following lines of code inside the nested else if statement in the
    `OnTriggerEnter()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The two preceding lines of code create a reference to the `PointsManager` script
    and, on the second line, increment the `currentScore` by `10`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The updated `BeetleNPC` script''s `OnTriggerEnter()` method should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we designed, scripted, and implemented our game's point system.
    This included providing frame-by-frame updates to key on-screen components of
    the game's HUD. Our scripts enabled the collection of cherries from cherry trees,
    adding the cherry-throwing capability for our Cucumber Man. We also added points
    based on the collection of cherries and combat hits.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 11](7098e2ac-1871-4cb2-98ba-36f3acdb0515.xhtml), *Scripting Victory
    and Defeat*, we will design and script our game's victory and defeat conditions.
    This will include managing the Cucumber Man's health, lives remaining, and respawning
    the player character.
  prefs: []
  type: TYPE_NORMAL
