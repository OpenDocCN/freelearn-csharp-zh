["```cs\n    using System;\n    using System.Linq;\n    using System.Threading;\n    using System.Threading.Tasks;\n    using static System.Console;\n    using static System.Threading.Thread;\n    ```", "```cs\n    static string EmulateProcessing(string taskName)\n    {\n      Sleep(TimeSpan.FromMilliseconds(\n        new Random(DateTime.Now.Millisecond).Next(250, 350)));\n      WriteLine($\"{taskName} task was processed on a \" +\n                      $\"thread id {CurrentThread.ManagedThreadId}\");\n      return taskName;\n    }\n    ```", "```cs\n    Parallel.Invoke(\n      () => EmulateProcessing(\"Task1\"),\n      () => EmulateProcessing(\"Task2\"),\n      () => EmulateProcessing(\"Task3\")\n    );\n\n    var cts = new CancellationTokenSource();\n\n    var result = Parallel.ForEach(\n      Enumerable.Range(1, 30),\n      new ParallelOptions\n      {\n        CancellationToken = cts.Token,\n        MaxDegreeOfParallelism = Environment.ProcessorCount,\n        TaskScheduler = TaskScheduler.Default\n      },\n      (i, state) =>\n      {\n        WriteLine(i);\n        if (i == 20)\n        {\n          state.Break();\n          WriteLine($\"Loop is stopped: {state.IsStopped}\");\n        }\n      });\n\n    WriteLine(\"---\");\n    WriteLine($\"IsCompleted: {result.IsCompleted}\");\n    WriteLine($\"Lowest break iteration: {result.LowestBreakIteration}\");\n    ```", "```cs\n    using System;\n    using System.Collections.Generic;\n    using System.Diagnostics;\n    using System.Linq;\n    using static System.Console;\n    using static System.Threading.Thread;\n    ```", "```cs\n    static void PrintInfo(string typeName)\n    {\n      Sleep(TimeSpan.FromMilliseconds(150));\n      WriteLine($\"{typeName} type was printed on a thread \" +\n              $\"id {CurrentThread.ManagedThreadId}\");\n    }\n\n    static string EmulateProcessing(string typeName)\n    {\n      Sleep(TimeSpan.FromMilliseconds(150));\n      WriteLine($\"{typeName} type was processed on a thread \" +\n              $\"id {CurrentThread.ManagedThreadId}\");\n      return typeName;\n    }\n\n    static IEnumerable<string> GetTypes()\n    {\n      return from assembly in AppDomain.CurrentDomain.GetAssemblies()\n              from type in assembly.GetExportedTypes()\n              where type.Name.StartsWith(\"Web\")\n              select type.Name;\n\n    }\n    ```", "```cs\n    var sw = new Stopwatch();\n    sw.Start();\n    var query = from t in GetTypes()\n      select EmulateProcessing(t);\n\n    foreach (string typeName in query)\n    {\n      PrintInfo(typeName);\n    }\n    sw.Stop();\n    WriteLine(\"---\");\n    WriteLine(\"Sequential LINQ query.\");\n    WriteLine($\"Time elapsed: {sw.Elapsed}\");\n    WriteLine(\"Press ENTER to continue....\");\n    ReadLine();\n    Clear();\n    sw.Reset();\n\n    sw.Start();\n    var parallelQuery = from t in GetTypes().AsParallel()\n            select EmulateProcessing(t);\n\n    foreach (var typeName in parallelQuery)\n    {\n      PrintInfo(typeName);\n    }\n    sw.Stop();\n    WriteLine(\"---\");\n    WriteLine(\"Parallel LINQ query. The results are being merged on a single thread\");\n    WriteLine($\"Time elapsed: {sw.Elapsed}\");\n    WriteLine(\"Press ENTER to continue....\");\n    ReadLine();\n    Clear();\n    sw.Reset();\n\n    sw.Start();\n    parallelQuery = from t in GetTypes().AsParallel()\n            select EmulateProcessing(t);\n\n    parallelQuery.ForAll(PrintInfo);\n\n    sw.Stop();\n    WriteLine(\"---\");\n    WriteLine(\"Parallel LINQ query. The results are being processed in parallel\");\n    WriteLine($\"Time elapsed: {sw.Elapsed}\");\n    WriteLine(\"Press ENTER to continue....\");\n    ReadLine();\n    Clear();\n    sw.Reset();\n\n    sw.Start();\n    query = from t in GetTypes().AsParallel().AsSequential()\n        select EmulateProcessing(t);\n\n    foreach (string typeName in query)\n    {\n      PrintInfo(typeName);\n    }\n\n    sw.Stop();\n    WriteLine(\"---\");\n    WriteLine(\"Parallel LINQ query, transformed into sequential.\");\n    WriteLine($\"Time elapsed: {sw.Elapsed}\");\n    WriteLine(\"Press ENTER to continue....\");\n    ReadLine();\n    Clear();\n    ```", "```cs\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using System.Threading;\n    using static System.Console;\n    using static System.Threading.Thread;\n    ```", "```cs\n    static string EmulateProcessing(string typeName)\n    {\n      Sleep(TimeSpan.FromMilliseconds(\n        new Random(DateTime.Now.Millisecond).Next(250,350)));\n      WriteLine($\"{typeName} type was processed on a thread \" +\n        $\"id {CurrentThread.ManagedThreadId}\");\n      return typeName;\n    }\n\n    static IEnumerable<string> GetTypes()\n    {\n      return from assembly in AppDomain.CurrentDomain.GetAssemblies()\n        from type in assembly.GetExportedTypes()\n        where type.Name.StartsWith(\"Web\")\n        orderby type.Name.Length\n        select type.Name;\n    }\n    ```", "```cs\n    var parallelQuery = from t in GetTypes().AsParallel()\n            select EmulateProcessing(t);\n\n    var cts = new CancellationTokenSource();\n    cts.CancelAfter(TimeSpan.FromSeconds(3));\n\n    try\n    {\n      parallelQuery\n        .WithDegreeOfParallelism(Environment.ProcessorCount)\n        .WithExecutionMode(ParallelExecutionMode.ForceParallelism)\n        .WithMergeOptions(ParallelMergeOptions.Default)\n        .WithCancellation(cts.Token)\n        .ForAll(WriteLine);\n    }\n    catch (OperationCanceledException)\n    {\n      WriteLine(\"---\");\n      WriteLine(\"Operation has been canceled!\");\n    }\n\n    WriteLine(\"---\");\n    WriteLine(\"Unordered PLINQ query execution\");\n    var unorderedQuery = from i in ParallelEnumerable.Range(1, 30)\n           select i;\n\n    foreach (var i in unorderedQuery)\n    {\n      WriteLine(i);\n    }\n\n    WriteLine(\"---\");\n    WriteLine(\"Ordered PLINQ query execution\");\n    var orderedQuery = from i in ParallelEnumerable.Range(1, 30).AsOrdered()\n         select i;\n\n    foreach (var i in orderedQuery)\n    {\n      WriteLine(i);\n    }\n    ```", "```cs\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    using static System.Console;\n    ```", "```cs\n    IEnumerable<int> numbers = Enumerable.Range(-5, 10);\n\n    var query = from number in numbers\n        select 100 / number;\n\n    try\n    {\n      foreach(var n in query)\n        WriteLine(n);\n    }\n    catch (DivideByZeroException)\n    {\n      WriteLine(\"Divided by zero!\");\n    }\n\n    WriteLine(\"---\");\n    WriteLine(\"Sequential LINQ query processing\");\n    WriteLine();\n\n    var parallelQuery = from number in numbers.AsParallel()\n            select 100 / number;\n\n    try\n    {\n      parallelQuery.ForAll(WriteLine);\n    }\n    catch (DivideByZeroException)\n    {\n      WriteLine(\"Divided by zero - usual exception handler!\");\n    }\n    catch (AggregateException e)\n    {\n      e.Flatten().Handle(ex =>\n      {\n        if (ex is DivideByZeroException)\n        {\n          WriteLine(\"Divided by zero - aggregate exception handler!\");\n          return true;\n        }\n\n        return false;\n      });\n    }\n\n    WriteLine(\"---\");\n    WriteLine(\"Parallel LINQ query processing and results merging\");\n    ```", "```cs\n    using System;\n    using System.Collections.Concurrent;\n    using System.Collections.Generic;\n    using System.Diagnostics;\n    using System.Linq;\n    using static System.Console;\n    using static System.Threading.Thread;\n    ```", "```cs\n    static void PrintInfo(string typeName)\n    {\n      Sleep(TimeSpan.FromMilliseconds(150));\n      WriteLine($\"{typeName} type was printed on a thread \" +\n    $\"id {CurrentThread.ManagedThreadId}\");\n    }\n\n    static string EmulateProcessing(string typeName)\n    {\n      Sleep(TimeSpan.FromMilliseconds(150));\n      WriteLine($\"{typeName} type was processed on a thread \" +\n      $\"id { CurrentThread.ManagedThreadId}. Has \" +\n      $\"{(typeName.Length % 2 == 0 ? \"even\" : \"odd\")} length.\");\n\n      return typeName;\n    }\n\n    static IEnumerable<string> GetTypes()\n    {\n      var types = AppDomain.CurrentDomain\n        .GetAssemblies()\n        .SelectMany(a => a.GetExportedTypes());\n\n      return from type in types\n        where type.Name.StartsWith(\"Web\")\n        select type.Name;\n    }\n\n    public class StringPartitioner : Partitioner<string>\n    {\n      private readonly IEnumerable<string> _data;\n\n      public StringPartitioner(IEnumerable<string> data)\n      {\n        _data = data;\n      }\n\n      public override bool SupportsDynamicPartitions => false;\n\n      public override IList<IEnumerator<string>>GetPartitions(\n    int partitionCount)\n      {\n        var result = new List<IEnumerator<string>>(\n    partitionCount);\n\n        for (int i = 1; i <= partitionCount; i++)\n        {\n          result.Add(CreateEnumerator(i, partitionCount));\n        }\n\n        return result;\n      }\n\n      IEnumerator<string> CreateEnumerator(int partitionNumber, int partitionCount)\n      {\n        int evenPartitions = partitionCount / 2;\n        bool isEven = partitionNumber % 2 == 0;\n        int step = isEven ? evenPartitions : \n    partitionCount - evenPartitions;\n\n        int startIndex = partitionNumber / 2 +\n        partitionNumber % 2;\n\n        var q = _data\n          .Where(v => !(v.Length % 2 == 0 ^ isEven)\n    || partitionCount == 1)\n          .Skip(startIndex - 1);\n\n        return q\n          .Where((x, i) => i % step == 0)\n          .GetEnumerator();\n\n      }\n    }\n    ```", "```cs\n    var timer = Stopwatch.StartNew();\n    var partitioner = new StringPartitioner(GetTypes());\n    var parallelQuery = from t in partitioner.AsParallel()\n    //      .WithDegreeOfParallelism(1)\n          select EmulateProcessing(t);\n\n    parallelQuery.ForAll(PrintInfo);\n    int count = parallelQuery.Count();\n    timer.Stop();\n    WriteLine(\" ----------------------- \");\n    WriteLine($\"Total items processed: {count}\");\n    WriteLine($\"Time elapsesd: {timer.Elapsed}\");\n    ```", "```cs\n    using System;\n    using System.Collections.Concurrent;\n    using System.Collections.Generic;\n    using System.Linq;\n    using static System.Console;\n    using static System.Threading.Thread;\n    ```", "```cs\n    static ConcurrentDictionary<char, int> AccumulateLettersInformation(\n        ConcurrentDictionary<char, int> taskTotal , string item)\n    {\n      foreach (var c in item)\n      {\n        if (taskTotal.ContainsKey(c))\n        {\n          taskTotal[c] = taskTotal[c] + 1;\n        }\n        else\n        {\n          taskTotal[c] = 1;\n        }\n      }\n      WriteLine($\"{item} type was aggregated on a thread \" +\n              $\"id {CurrentThread.ManagedThreadId}\");\n      return taskTotal;\n    }\n\n    static ConcurrentDictionary<char, int> MergeAccumulators(\n        ConcurrentDictionary<char, int> total, ConcurrentDictionary<char, int> taskTotal)\n    {\n      foreach (var key in taskTotal.Keys)\n      {\n        if (total.ContainsKey(key))\n        {\n          total[key] = total[key] + taskTotal[key];\n        }\n        else\n        {\n          total[key] = taskTotal[key];\n        }\n      }\n      WriteLine(\"---\");\n      WriteLine($\"Total aggregate value was calculated on a thread \" +\n              $\"id {CurrentThread.ManagedThreadId}\");\n      return total;\n    }\n\n    static IEnumerable<string> GetTypes()\n    {\n      var types = AppDomain.CurrentDomain\n        .GetAssemblies()\n        .SelectMany(a => a.GetExportedTypes());\n\n      return from type in types\n             where type.Name.StartsWith(\"Web\")\n             select type.Name;\n    }\n    ```", "```cs\n    var parallelQuery = from t in GetTypes().AsParallel()\n                        select t;\n\n    var parallelAggregator = parallelQuery.Aggregate(\n      () => new ConcurrentDictionary<char, int>(),\n      (taskTotal, item) => AccumulateLettersInformation(taskTotal, item), \n      (total, taskTotal) => MergeAccumulators(total, taskTotal),\n      total => total);\n\n    WriteLine();\n    WriteLine(\"There were the following letters in type names:\");\n    var orderedKeys = from k in parallelAggregator.Keys\n              orderby parallelAggregator[k] descending\n              select k;\n\n    foreach (var c in orderedKeys)\n    {\n      WriteLine($\"Letter '{c}' ---- {parallelAggregator[c]} times\");\n    }\n    ```"]