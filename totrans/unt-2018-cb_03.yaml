- en: Inventory UIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a simple 2-D mini-game - SpaceGirl
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying single object pickups with carrying and not-carrying text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying single object pickups with carrying and not-carrying icons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying multiple pickups of the same object with multiple status icons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using panels to visually outline the inventory UI area and individual items
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a C# inventory slot display UI scripted component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generalizing multiple icon displays using UI Grid Layout Groups (with scrollbars!)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying multiple pickups of different objects as a list of text via a dynamic
    `List<>` of scripted PickUp objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying multiple pickups of different objects as text totals via a dynamic
    `Dictionary<>` of PickUp objects and enum pickup types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many games involve the player collecting items or choosing from a selection
    of items. Examples are collecting keys to open doors, collecting ammo for weapons,
    and choosing from a collection of spells to cast.
  prefs: []
  type: TYPE_NORMAL
- en: The recipes in this chapter provide a range of solutions for displaying to the
    player whether they are carrying an item or not, whether they are allowed more
    than one of an item, and how many they have.
  prefs: []
  type: TYPE_NORMAL
- en: The big picture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The two parts of software design for implementing inventories relate to, first,
    how we choose to represent the data about inventory items (that is, the data types
    and structures to store the data) and, second, how we choose to display information
    about inventory items to the player (the UI).
  prefs: []
  type: TYPE_NORMAL
- en: Also, whilst not strictly inventory items, player properties such as lives left,
    health, and time remaining can also be designed around the same concepts that
    we present in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to first think about the nature of different inventory items for any
    particular game:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Single items:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Examples: the only key for a level, our suit of magic armor'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Data type: `bool` (Boolean – `true`/`false`)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'UI: nothing (if not carried) or text/image to show being carried'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Or perhaps, if we wish to highlight to the player that there is an **option**
    to carry this item, then we could display a text `string` saying `no key`/`key`,
    or two images, one showing an empty key outline and the second showing a full-color
    key.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Continuous item:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Examples: time left, health, shield strength'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Data type: `float` (for example, 0.00-1.00) or `int` (Integer) scale'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: (for example, 0% to 100%)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'UI: text number or image progress bar/pie chart'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Two or more of same item
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Examples: lives left, or number of arrows or bullets left'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Data type: `int` (Integer – whole numbers)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'UI: text count or images'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Collection of related items
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Examples: keys of different colors to open correspondingly colored doors, potions
    of different strength with different titles'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Data structure: a `struct` or `class` for the general item type (for example,
    class `Key` (color/cost/doorOpenTagString), stored as an array or `List<>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'UI: text list or list/grid arrangement of icons'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Collection of different items
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Examples: keys, potions, weapons, tools, all in the same inventory system'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Data structure: `List<>` or `Dictionary<>` or array of objects, which can be
    instances of different class for each item type'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of the preceding representations and UI display methods are illustrated
    by the recipes in this chapter. In addition, in the chapter we'll learn how to
    create and use custom Sorting Layers in order to have complete control over which
    objects appear on top of or below other objects – something that is pretty important
    when scene content can contain background images, pickups, player characters,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'These recipes demonstrate a range of C# data representations for inventory
    items and a range of Unity UI interface components for displaying the status and
    contents of player inventories at runtime. Inventory UI needs good quality graphical
    assets for a high-quality result. Some sources of assets that you might wish to
    explore include the following sites:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The graphics for our SpaceGirl mini-game are from Space Cute art by Daniel
    Cook; he generously publishes lots of 2D art for game developers to use:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.lostgarden.com/](http://www.lostgarden.com/)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.lostgarden.com/search?q=planet+cute](http://www.lostgarden.com/search?q=planet+cute)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sethbyrd-lots of fun 2D graphics:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.sethbyrd.com/](http://www.sethbyrd.com/)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Royalty-free art for 2D games:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.gameart2d.com/freebies.html](http://www.gameart2d.com/freebies.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a simple 2D mini-game – SpaceGirl
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows how to create the 2D Space Girl mini-game, on which all the
    recipes of this chapter are based.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0fb94072-acb7-423d-871d-da25d88ec6f4.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we have prepared the images you need in a folder named Sprites
    in the `03_01` folder. We have also provided the completed game as a Unity package
    in this folder, named `Simple2DGame_SpaceGirl`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create the simple 2D Space Girl mini-game, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new, empty 2D project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the supplied folder `Sprites` into your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since it's a 2D project, each sprite image should be of type **Sprite (2D and
    UI)**. Check this by selecting the sprite in the Project panel, then, in the **Inspector**,
    check property **Texture** Type. If you need to change the type, change it from
    this drop-down menu, then click the **Apply** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set the Unity Player screen size to `800 x 600`: choose this resolution from
    the drop-down menu on the Game panel. If `800 x 600` isn''t an offered resolution,
    the click the plus sign **+** button and create this as a new resolution for the
    panel.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Display the **Tags** and **Layers** properties for the current Unity project.
    Choose menu Edit | Project Settings | Tags and Layers. Alternatively, if you are
    already editing a GameObject, then you can select the **Add Layer...** menu from
    the Layer drop-down menu at the top of the Inspector panel, next to the Static
    `true`/`false` toggle.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the expand/contract triangle tools to contract **Tags and Layers**, and
    to expand **Sorting Layers**. Use the plus sign + button to add two new sorting
    layers, as shown in the screenshot: first, add one named `Background`, and next,
    add one named `Foreground`. The sequence is important since Unity will draw items
    in layers'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'further down this list on top of items earlier in the list. You can rearrange
    the layer sequence by clicking and dragging the position control: the wide equals
    sign (=) icon to the left of the word Layer in each row:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/163362cf-7579-4d18-aaeb-1ee90007781f.png)'
  prefs: []
  type: TYPE_IMG
- en: Drag the `background_blue` sprite from the Project panel (in the `Sprites` folder)
    into either the **Game** or **Hierarchy** panel to create a GameObject for the
    current scene. Set the `Position` of this GameObject to (`0`,`0`,`0`). It should
    completely cover the Game panel (at resolution `800 x 600`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set the **Sorting Layer** of GameObject background-blue to **Background** (in
    the **Sprite Renderer** component):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b621c9a4-4585-4ce1-91e8-606e55b7fcb5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Drag sprite star from the **Project** panel (in the `Sprites` folder) into
    either the **Game** or **Hierarchy** panel to create a GameObject for the current
    scene:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new tag, Star, and assign this tag to GameObject star (tags are created
    in the same way we created sorting layers).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Set the Sorting Layer of GameObject star to Foreground (in the Sprite Renderer
    component).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add to GameObject star a Box Collider 2D (Add Component | Physics 2D | Box
    Collider 2D) and check Is Trigger, as shown in the screenshot:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/ee263562-8258-4402-b467-879532053a6a.png)'
  prefs: []
  type: TYPE_IMG
- en: Drag the girl1 sprite from the **Project** panel (in the `Sprites` folder) into
    either the **Game** or **Hierarchy** panel to create a GameObject for the player's
    character in the current scene. Rename this GameObject `player-girl1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the Sorting Layer of GameObject `player-girl1` to Foreground.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a Physics | Box Collider 2D component to GameObject `player-girl1` .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a Physics 2D | Rigid Body 2D component to GameObject `player-girl1` . Set
    its Gravity Scale to zero (so it isn''t falling down the screen due to simulated
    gravity), as shown in the screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/464d268b-9a25-45cf-9ba0-4742586b04d3.png)'
  prefs: []
  type: TYPE_IMG
- en: Create a new folder for your scripts named `_Scripts`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the following C# Script PlayerMove (in the `_Scripts` folder) and add
    an instance as a component to GameObject player-girl1 in the **Hierarchy**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Save the scene (name it Main Scene and save it into a new folder named _Scenes).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have created a player character in the scene using the girl1 sprite, and
    added a scripted component instance of class `PlayerMove`. You have also created
    a star GameObject (a pickup), tagged Star and with a 2D box collider that will
    trigger a collision when the player's character hits it. When you run the game,
    the `player-girl1` character should move around using `W A S D`, the arrow keys,
    or joystick. There is a `newVelocity` variable, which is updated each frame in
    the `Update()` method based on the inputs. This `Vector2` value is then applied
    in the `FixedUpdate()` method to become the new velocity for the GameObject.
  prefs: []
  type: TYPE_NORMAL
- en: Unity maps user inputs such as key presses, arrow keys, and game controller
    controls to its `Input` class. Two special properties of the Input class are the
    Horizontal and Vertical axes – accessed via the `Input.GetAxis`("`Horizontal`")
    and `Input.GetAxis`("`Vertical`") methods.
  prefs: []
  type: TYPE_NORMAL
- en: '**Managing your input mapping:** You can manage the mapping from different
    user input methods (keys, mouse, controllers, and so on) to the axes through menu: **Edit**
    | **Project Settings** | **Input**'
  prefs: []
  type: TYPE_NORMAL
- en: Currently, nothing will happen if the `player-SpaceGirl` character hits a star
    because that has yet to be scripted.
  prefs: []
  type: TYPE_NORMAL
- en: You have added a background (GameObject background-blue) to the scene, which
    will be behind everything since it is in the rearmost sorting layer, **Background**.
    Items you want to appear in front of the background (the player character and
    the star, so far) are placed on the **Foreground** sorting layer.
  prefs: []
  type: TYPE_NORMAL
- en: We can learn more about Unity tags and layers at [http://docs.unity3d.com/Manual/class-TagManager.html](http://docs.unity3d.com/Manual/class-TagManager.html).
  prefs: []
  type: TYPE_NORMAL
- en: Displaying single object pickups with carrying and not-carrying text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Often the simplest inventory situation is to display text to tell players whether
    they are carrying a single item (or not). We''ll add the ability to detect collisions
    with GameObject tagged **Star** to the SpaceGirl mini-game, and display an on-screen
    message stating whether a star has been collected or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/47cd6ba6-5511-4d54-bcc3-8b980049f26c.png)'
  prefs: []
  type: TYPE_IMG
- en: At the end of the recipe, in the *There's more...* section, we'll learn to adapt
    this recipe to maintain an **Integer** total of how many stars have been collected,
    for a version of the game with lots of stars to collect.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we have prepared a folder named Fonts in the `03_02` folder.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe assumes that you are starting with the `Simple2Dgame_SpaceGirl`
    project that was set up from the first recipe in this chapter. So, make a copy
    of that project, and work on this copy.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To display text to inform the user about the status of carrying a single object
    pickup, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Start with a new copy of the `Simple2Dgame_SpaceGirl` mini-game.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a UI Text object (**Create** | **UI** | **Text**). Rename it Text-carrying-star.
    Change its text to Carrying star: false.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the provided Fonts folder into your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Inspector** panel, set the font of Text-carrying-star to **Xolonium-Bold**,
    and set its color to yellow. Center the text horizontally and vertically, set
    its **Height** to `50`, and set the **Font Size** to `32`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit its Rect Transform, and while holding down *Shift* + *Alt* (to set pivot
    and position), choose the top-stretch box:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/93d7b082-58ea-4ac2-b06c-417d0d24aec4.png)'
  prefs: []
  type: TYPE_IMG
- en: Your text should now be positioned at the middle top of the **Game** panel,
    and its width should stretch to match that of the whole panel, as shown in the
    screenshot in the introduction to this recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the following C# script class `PlayerInventory` in the `_Scripts` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the following C# script class `PlayerInventoryDisplay` in the `_Scripts` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Add an instance of script-class `PlayerInventoryDisplay` to the player-SpaceGirl
    GameObject in the **Hierarchy**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note, since the `PlayerInventoryDisplay` class contains `RequireComponent(),`
    then an instance of script class `PlayerInventory` will be automatically added
    to GameObject `player-SpaceGirl.`
  prefs: []
  type: TYPE_NORMAL
- en: From the **Hierarchy** view, select the `player-SpaceGirl` GameObject. Then,
    from the **Inspector**, access the Player Inventory Display (Script) component
    and populate the **Star Text** public field with GameObject Text-carrying-star,
    as shown in the screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4cc4e685-d15a-4492-a65b-abf72bd68271.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you play the scene, after moving the character into the star, the star
    should disappear, and the onscreen **UI Text** message should change to Carrying
    star :-):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8914a461-ea47-40b9-a487-b01e209ea333.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You created a **UI Text** GameObject Text-carrying-star to display to the player
    a text message stating whether or not a star is being carried. You created two
    script classes, and an instance of each was added as a component to the player''s
    `player-SpaceGirl` character GameObject:'
  prefs: []
  type: TYPE_NORMAL
- en: Script-class `PlayerInventory` detects player-star collisions, updates internal
    variables saying whether a star is carried, and asks for the UI display to be
    updated each time a collision is detected.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Script-class `PlayerInventoryDisplay` handles the communication to the user
    by updating the text message displayed by the Text-carrying-star UI Text GameObject.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A game design pattern (best practice approach) called the **Model-View-Controller
    pattern** (**MVC**) separates the code that updates the UI from the code that
    changes player and game variables such as score and inventory item lists. Although
    this recipe has only one variable and one method for updating the UI, well-structured
    game architectures scale up to cope with more complex games, so it is often worth
    the effort of a little more code and an extra script class, even at this game-beginning
    stage, if we want our final game architecture to be well structured and maintainable.
  prefs: []
  type: TYPE_NORMAL
- en: One additional advantage of this design pattern is that the method in which
    the information is communicated to the user via the UI can be changed (for example,
    from text to an icon – see the next recipe!), without any change to the code in
    script class `PlayerInventory`.
  prefs: []
  type: TYPE_NORMAL
- en: The PlayerInventory script class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `playerInventoryDisplay` variable is a reference to an instance object of
    class `PlayerInventoryDisplay`.
  prefs: []
  type: TYPE_NORMAL
- en: The bool variable carryingStar represents whether or not the player is carrying
    the star at any point in time; it is initialized to false.
  prefs: []
  type: TYPE_NORMAL
- en: '`Method Awake()` caches a reference to the sibling component `playerInventoryDisplay`.'
  prefs: []
  type: TYPE_NORMAL
- en: When the scene begins, via the `Start()` method, we call the `OnChangeCarryingStar(...)` method
    of script component `playerInventoryDisplay`, passing in the initial value of
    `carryingStar` (which is false). This ensures that we are not relying on text
    typed into the **UI Text** object Text-carrying-star at **Design-Time**, so that
    the UI seen by the user is always set by our **Run-Time** methods. This avoids
    problems where the words to be displayed to the user are changed in code and not
    in the **Inspector** panel – which leads to a mismatch between the onscreen text
    when the scene first runs and after it has been updated from a script.
  prefs: []
  type: TYPE_NORMAL
- en: A golden rule in Unity game design is to avoid duplicating content in more than
    one place, and, therefore, we avoid having to maintain two or more copies of the
    same content. Each duplicate is an opportunity for maintenance issues when some,
    but not all, copies of a value are changed.
  prefs: []
  type: TYPE_NORMAL
- en: Maximizing use of prefabs is another example of this principle in action. This
    is also know as the DRY principal – don't repeat yourself.
  prefs: []
  type: TYPE_NORMAL
- en: Each time the player's character collides with any object that has its Is **Trigger**
    set to true, an `OnTriggerEnter2D()` event message is sent to both objects involved
    in the collision. The `OnTriggerEnter2D()` message is passed as a parameter that
    is a reference to the `Collider2D` component inside the object just collided with.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our player''s `OnTriggerEnter2D()` method tests the tag string of the object
    collided with to see whether it has the **Star** value. Since the GameObject star
    we created has its trigger set, and has the tag **Star**, the if statement inside
    this method will detect a collision with the star and complete the following three
    actions:'
  prefs: []
  type: TYPE_NORMAL
- en: The Boolean (flag) variable `carryingStar` is set to true
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The method **OnChangeCarryingStar(...)** of script component **playerInventoryDisplay**
    is called, passing in the updated value of **carryingStar**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The GameObject just collided with is destroyed – that is, the star
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Boolean variables are often referred to as flags.
  prefs: []
  type: TYPE_NORMAL
- en: The use of a bool (true/false) variable to represent whether some feature of
    the game state is true or false is very common. Programmers often refer to these
    variables as flags. So, programmers might refer to the carryingStar variable as
    the star-carrying flag.
  prefs: []
  type: TYPE_NORMAL
- en: The PlayerInventoryDisplay script class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The public `Text` variable `starText` is a reference to the **UI Text** object
    Text-carrying-star. Its value has been set via drag-and-drop at design time.
  prefs: []
  type: TYPE_NORMAL
- en: The `OnChangeCarryingStar`(carryingStar) method updates the text property of
    starText with the value of string variable `starMessage`. This method takes an
    input bool argument `carryingStar`. The default value of string `starMessage`
    tells the user that the player is not carrying the star, but an if statement tests
    the value of `carryingStar`, and, if that is true, then the message is changed
    to inform the player that they are carrying the star.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here are some details you won't want to miss.
  prefs: []
  type: TYPE_NORMAL
- en: Collecting multiple items and display total number carried
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Often there are pickups that the player can collect more than one of. In such
    situations, we can use an Integer to represent the total number collected, and
    use a UI Text object to display this total to the user. Let's modify the recipe
    to allow SpaceGirl to collect lots of stars!
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8897c7a4-4a47-4947-ba46-a95155071af0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To convert this recipe to one that shows the total number of stars collected,
    do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Make three or four more copies of the **star** GameObject and spread them around
    the scene. This gives the player several stars to collect rather than just one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use keyboard shortcut *Ctrl* + *D* (Windows) or *CMD* + *D* (Mac) to quickly
    duplicate GameObjects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the contents of the C# script class `PlayerInventory` to contain the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Change the contents of C# script class `PlayerInventoryDisplay` to contain
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, in `PlayerInventory` we now increment totalStars by 1 each time
    a star GameObject is collided with. In `PlayerInventoryDisplay` we display on
    screen a simple text message of "total stars = " followed by the integer total
    received by the method `OnChangeStarTotal(...)./`
  prefs: []
  type: TYPE_NORMAL
- en: Now when you run the game you should see the total stars start at zero, and
    increase by 1 each time the player's character hits a star.
  prefs: []
  type: TYPE_NORMAL
- en: Alternative – combining all the responsibilities into a single script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The separation of the player inventory (what they are carrying) and how to display
    the inventory to the user is an example of a game design pattern (best practice
    approach) called the **Model-View-Controller** (**MVC**) whereby we separate the
    code that updates the UI from the code that changes player and game variables
    such as score and inventory item lists. Although this recipe has only one variable
    and one method to update the UI, well-structured game architectures scale up to
    cope with more complex games, so it is often worth the effort of a little more
    code and an extra script class, even at this game's development, if we want our
    final game architecture to be well structured and maintainable.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, for *very simple games* we may choose to combine both status and display
    of that status in a single script class. For an example of this approach for this
    recipe, remove script components `PlayerInventory` and `PlayerInventoryDisplay`
    and create the following C# script class `PlayerInventoryCombined` and add an
    instance to GameObject `player-SpaceGirl` in the **Hierarchy**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: There is no difference in the experience of the player, and the change is simply
    in the architectural structure of our game code.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying single object pickups with carrying and not-carrying icons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Graphic icons are an effective way to inform the player that they are carrying
    an item. In this recipe, if no star is being carried, a gray-filled icon in a
    blocked-off circle is displayed in the top-left of the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8325bea3-24c1-47ee-bf4c-acff231a4674.png)'
  prefs: []
  type: TYPE_IMG
- en: Then, after a star has been picked up, a yellow-filled star icon is displayed.
    In many cases, icons are clearer (they don't require reading and thinking about)
    and can also be smaller onscreen than text messages that indicate player status
    and inventory items.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe also illustrates the benefits of the MVC design pattern described
    in the previous recipe – we are changing how to communicate to the user (using
    the **View** via icons rather than text), but we can use, with no changes required,
    script class PlayerInventory (the **Model-Controller**), which detects player-star
    collisions and maintains the Boolean flag that tells us whether a star is being
    carried or not.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes that you are starting with the Simple2Dgame_SpaceGirl project set
    up in the first recipe in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: For this recipe, we have prepared a folder named `_Scripts` in the `03_03` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To toggle carrying and not-carrying icons for a single object pickup, follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Start with a new copy of the `Simple2Dgame_SpaceGirl` mini-game.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the `_Scripts` folder from the provided files (this contains a copy of
    the script class `PlayerInventory` from the previous recipe, which we can use
    unchanged for this recipe).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add to the scene a **UI Image** object (**Create** | **UI** | **Image**). Rename
    it `Image-star-icon`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With Image-star-icon selected in the **Hierarchy**, drag the `icon_nostar_100`
    sprite (in the `Sprites` folder) from the **Project** panel into the **Source
    Image** field in the **Inspector** (in the Image (Script) component).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Click on the **Set Native Size** button for the **Image** component. This will
    resize the **UI Image** to fit the physical pixel width and height of the `icon_nostar_100`
    sprite file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/eb577c82-34fe-48a1-8ca4-bb647df529bb.png)'
  prefs: []
  type: TYPE_IMG
- en: Position the image icon at the top and left of the Game panel, in Rect Transform.
    Choose the top-left box component while holding down *SHIFT* and *ALT* (to set
    pivot and position).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the following C# Script class PlayerInventoryDisplay and add an instance
    to GameObject player-SpaceGirl in the Hierarchy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: From the Hierarchy view, select the GameObject player-SpaceGirl. Then, from
    the Inspector, access the PlayerInventoryDisplay (Script) component and populate
    the Star Image public field with UI Image object Image-star-icon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Populate the Icon No Star public field from the Project panel with the `icon_nostar_100` sprite,
    and then populate the Icon Star public field from the Project panel with the `icon_star_100`
    sprite, as shown in the screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/60355ab6-8a60-44ee-be1f-69d1b0ed20d8.png)'
  prefs: []
  type: TYPE_IMG
- en: Play the scene. You should see the no star icon (a gray-filled icon in a blocked-off
    circle) in the top left until you pick up the star, at which point it will change
    to show the carrying star icon (yellow-filled star).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the script class `PlayerInventoryDisplay` the Image variable `imageStarGO`
    is a reference to the UI Image object `Image-star-icon`. The sprite variables
    `iconStar` and `iconNoStar` are references to the Sprite files in the Project
    panel - the sprites to tell the player whether or not a star is being carried.
  prefs: []
  type: TYPE_NORMAL
- en: Each time method `OnChangeCarryingStar(carryingStar)` is invoked by the `PlayerInventory`
    object, this method uses an `if` statement to set the **UI Image** to the sprite
    that corresponds to the value of the bool argument received.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying multiple pickups of the same object with multiple status icons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If there is a small, fixed total number of an item to be collected rather than
    text totals, an effective UI approach is to display placeholder icons (empty or
    grayed out pictures) to show the user how many of the item remain to be collected,
    and each time an item is picked up, a placeholder icon is replaced by a full color
    collected icon.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, we use gray-filled star icons as the placeholders and yellow-filled
    star icons to indicate each collected star, as shown in the screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/458361ac-c050-4586-969e-e298a1fd8d5c.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes that you are starting with the `Simple2Dgame_SpaceGirl`
    project set up in the first recipe in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To display multiple inventory icons for multiple pickups of same type of object,
    follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Start with a new copy of the `Simple2Dgame_SpaceGirl` mini-game.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create C# Script class `PlayerInventory` in the `_Scripts` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Select the GameObject star in the **Hierarchy** panel and make three more copies
    of this GameObject. There are now four star GameObjects in the scene. Move these
    new star GameObjects to different parts of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following C# Script `PlayerInventoryDisplay` to the GameObject `player-SpaceGirl`
    in the **Hierarchy**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Select the Canvas in the Hierarchy panel and add a new UI Image object (Create
    | UI | Image). Rename it Image-star0.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Image-star0 in the Hierarchy panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the Project panel, drag the sprite `icon_star_grey_100` (in the Sprites
    folder) into the Source Image field in the Inspector for the Image (Script) component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Set Native Size button for this for the Image (Script) component.
    This will resize the UI Image to fit the physical pixel width and height of sprite
    file `icon_star_grey_100`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we will position our icon at the top-left of the Game panel. Edit the UI
    Image's Rect Transform component, and while holding down *Shift* + *Alt* (to set
    pivot and position), choose the top-left box. The UI Image should now be positioned
    at the top left of the Game panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make three more copies of Image-star0 in the Hierarchy panel, naming them Image-star1,
    Image-star2, and Image-star3.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Inspector panel, change the Pos X position (in the Rect Transform component)
    of Image-star1 to `100`, of Image-star2 to `200`, and of Image-star3 to `300`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1aae7d83-99c9-4d6b-81b8-8072835d454e.png)'
  prefs: []
  type: TYPE_IMG
- en: In the **Hierarchy**, select the GameObject player-SpaceGirl. Then, from the
    **Inspector**, access the **Player Inventory Display** (Script) component and
    set the Size property of the public field Star Placeholders to `4`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, populate the Element 0/1/2/3 array values of public field **Star Placeholders**
    with **UI Image** objects Image-star0/1/2/3.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, populate the Icon **Star Yellow** and **Icon Star Grey** public fields
    from the Project panel with sprite `icon_star_100` and `icon_star_grey_100`, as
    shown in the screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3265c7b4-d3d7-423f-b3c8-7db0511c8d5c.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, when you play the scene, you should see the sequence of four gray placeholder
    star icons initially, and each time you collide with a star, the next icon at
    the top should turn yellow.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Four **UI Image** objects Image-star0/1/2/3 have been created at the top of
    the screen — initialized with the gray placeholder icon. The gray and yellow icon
    sprite files have been resized to be 100 x 100 pixels, making their horizontal
    arrangement positioning at design time easier, since their positions are (0,0),
    (100,0), (200,0), and (300,0). In a more complicated game screen, or one where
    real estate is precious, the actual size of the icons would probably be smaller
    – a decision to be made by the game graphic designer.
  prefs: []
  type: TYPE_NORMAL
- en: In script class `PlayerInventory`, the int variable `totalStars` represents
    how many stars have been collected so far; it is initialized to zero. The variable
    `playerInventoryDisplay` is a reference to the scripted component that manages
    our inventory display – this variable is cached before the scene begins in the
    `Awake()` method.
  prefs: []
  type: TYPE_NORMAL
- en: The `Start()` method that runs at the beginning of the scene, calls the `OnChangeStarTotal(...)`
    method of the `PlayerInventoryDisplay` component to ensure that the icons on screen
    are displayed to match the starting value of totalStars.
  prefs: []
  type: TYPE_NORMAL
- en: In the `OnTriggerEnter2D()` method, the totalStars counter is incremented by
    1 each time the player's character hits an object tagged Star. As well as destroying
    the hit GameObject, the `OnChangeStarTotal(...)` method of the `PlayerInventoryDisplay`
    component is called, passing the new star total integer.
  prefs: []
  type: TYPE_NORMAL
- en: The `OnChangeStarTotal(...)` method of script class `PlayerInventoryDisplay`
    has references to the four **UI Images**, and loops through each item in the array
    of Image references, setting the given number of images to yellow, and the remaining
    to gray. This method is public, allowing it to be called from an instance of script
    class `PlayerInventory`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some details you don''t want to miss:'
  prefs: []
  type: TYPE_NORMAL
- en: Revealing icons for multiple object pickups by changing the size of a tiled
    image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another approach that could be taken to show increasing numbers of images is
    to make use of tiled images. The same visual effect as in the previous recipe
    can also be achieved by making use of a tiled gray star image of width 400 (showing
    four copies of the gray star icon), behind a tiled yellow star image, whose width
    is 100 times the number of stars collected.
  prefs: []
  type: TYPE_NORMAL
- en: If the yellow-starred image is less wide that the gray starred imaged beneath
    then we'll see gray stars for any remaining locations. For example, if we are
    carrying 3 stars, we'll make the width of the yellow-starred image 3 x 100 = 300
    pixels wide. This will show 3 yellow stars and reveal 100 pixels, that is, 1 gray
    star, from the gray starred image beneath it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To display grey and yellow star icons for multiple object pickups using tiled
    images, let''s adapt our recipe to illustrate this technique by following these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the **Hierarchy** panel, delete the entire **Canvas** GameObject (and therefore
    delete all four **UI Images**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add to your scene a new **UI Image** object (**Create** | **UI** | **Image**).
    Rename the GameObject Image-stars-gray.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure Image-stars-gray is selected in the **Hierarchy**. From the **Project**
    panel, drag sprite `icon_star_grey_100` (in the Sprites folder) into the **Source
    Image** field in the **Inspector** (in the **Image (Script)** component).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Set Native Size** button for this for the Image (Script) component.
    This will resize the **UI Image** to fit the physical pixel width and height of
    sprite file `icon_star_grey_100`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now position the icon at the **top** and **left** of the screen. Edit the **UI
    Image's** **Rect** **Transform** component, and while holding down *Shift* + *Alt* (to
    set pivot and position), choose the top-left box. The UI Image should now be positioned
    at the top left of the **Game** panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Inspector panel, change the **Width** (in the Rect Transform component)
    of Image-stars-grey to `400`. Also, set the **Image Type** (in the **Image (Script)**
    component) to **Tiled**, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6007c4cf-2c62-4bbc-824a-dcd34e83b481.png)'
  prefs: []
  type: TYPE_IMG
- en: For a simple game like this, we are choosing simplicity over memory efficiency.
    You'll see a notice suggesting using an advanced texture with Wrap mode repeat
    and a cleared packing tag. While more memory efficient, it's more complicated
    to do for small, simple tiling such as in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Make a copy of Image-stars-grey in the **Hierarchy** panel, naming the copy
    **Image-stars-yellow**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With Image-stars-yellow selected in Hierarchy panel, from the **Project** panel,
    drag the sprite `icon_star_100` (in the `Sprites` folder) into the **Source Image**
    field in the Inspector (in the **Image (Script)** component).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the width of Image-stars-yellow to 0 (in the **Rect Transform** component).
    So, now we have the yellow stars tiled image above the grey tiled image, but since
    its width is zero, we don't see any of the yellow stars yet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the existing C# script `PlayerInventoryDisplay` with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: From the **Hierarchy** view, select the GameObject player-SpaceGirl. Then, from
    the **Inspector**, access the **Player Inventory Display** **(Script)** component
    and populate the Icons Stars Yellow public field with UI Image object Image-stars-yellow.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: UI Image Image-stars-gray is a tiled image, wide enough (`400px`) for the gray
    sprite `icon_star_grey_100` to be shown four times. UI Image Image-stars-yellow
    is a tiled image, above the grey one, initially with width set to zero, so no
    yellow stars can be seen.
  prefs: []
  type: TYPE_NORMAL
- en: Each time a star is picked up, a call is made from the `PlayerInventory` scripted
    object to the `OnChangeStarTotal()` method of the script component `PlayerInventoryDisplay`,
    passing the new integer number of stars collected. By multiplying this by the
    width of the yellow sprite image (100 px), we get the correct width to set for
    **UI Image** Image-stars-yellow so that the corresponding number of yellow stars
    will now be seen by the user. Any stars that remain to be collected will still
    be seen as the grey stars that are not yet covered up.
  prefs: []
  type: TYPE_NORMAL
- en: The actual task of changing the width of UI Image Image-stars-yellow is completed
    by calling the `SetSizeWithCurrentAnchors(...)` method. The first parameter is
    the axis, so we pass the constant `RectTransform.Axis.Horizontal` so that it will
    be the width that is changed. The second parameter is the new size for that axis,
    so we pass a value that is 100 times the number of stars collected so far (the
    variable `newWidth`).
  prefs: []
  type: TYPE_NORMAL
- en: Using panels to visually outline the inventory UI area and individual items
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We see four kinds of objects when playing a game:'
  prefs: []
  type: TYPE_NORMAL
- en: GameObjects that have some visual elements, such as 2D and 3D objects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UI elements located in **World Space**, so they appear next to GameObjects in
    the scene.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UI elements located in **Screen Space** - **Camera**, so they appear at a fixed
    distance from the camera (but can be obscured by GameObjects closer to the camera
    than these UI elements).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UI elements located in **Screen Space** - **Overlay**. These always appear above
    the other three kinds of visual element, and are perfect for **Head Up Display**
    (**HUD**) elements, such as inventories.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sometimes we want to visually make it clear which elements are part of the UI
    HUD and which are visual objects in the scene. Unity **UI Panels** with an opaque
    or translucent background image are a simple and effective way to achieve this.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/63f5bed4-4c57-4ebc-b0a7-e53313067b05.png)'
  prefs: []
  type: TYPE_IMG
- en: Panels can also be used to display locations (slots) with shaped or colored
    backgrounds indicating where items may be placed, or how many may be collected.
    As shown in the screenshot, in this recipe we'll create a panel with some title
    text, and three inventory slots, two of which will be filled with star icons,
    communicating to the player that there is one more star that could be collected/carried.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes that you are starting with the `Simple2Dgame_SpaceGirl`
    project set up in the first recipe in this chapter. The font you need can be found
    in the `03_02` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To use panels to visually outline the inventory area and individual items,
    follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Start with a new copy of the `Simple2Dgame_SpaceGirl` mini-game.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Hierarchy** panel, create a **UI Panel** (**Create** | **UI** | **Panel**)
    and rename it Panel-background.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's now position Panel-background at the top of the Game panel, stretching
    the horizontal width of the canvas. Edit the UI **Image's Rect Transform** component,
    and while holding down *Shift* + *Alt* (to set pivot and position), choose the
    top-stretch box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The panel will still be taking up the whole game window. Now, in the **Inspector**,
    change the **Height** (in the **Rect Transform** component) of Panel-background
    to 100.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a UI Text object (**Create** | **UI** | **Text**), rename it **Text-inventory**.
    For its Text (Script) component, change the text to Inventory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Hierarchy panel, child **UI Text** object **Text-inventory** to panel
    Panel-background.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Inspector panel**, also set the font of Text-inventory to Xolonium-Bold
    (the Fonts folder). Center the text horizontally, for Alignment choose vertical
    center, set its **Height** to 50, and set the **Font Size** to 23.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit the **Rect Transform** of Text-inventory, and while holding down *Shift* + *Alt* (to
    set pivot and position), choose the top-stretch box. The text should now be positioned
    at the top-center of the UI Panel object Panel-background, and its width should
    stretch to match that of the whole panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The text should now be positioned at the top-center of the UI Panel object Panel-background
    and its width should stretch to match that of the whole panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new UI Panel (**Create** | **UI** | **Panel**) and rename it Panel-inventory-slot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit the Rect Transform of Panel-inventory-slot, and while holding down *Shift* + *Alt* (to
    set pivot and position), choose the top-center box. Set both the Width and Height
    to `70`, and the Pos Y to `-30`. See the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b23be950-c43f-4e56-bbab-fe05e6f2afaa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Ensure GameObject Panel-inventory-slot is selected in the Hierarchy. In the
    Image (Script) component change the Source Image from the **UI Panel** default
    of Background to the circular **Knob** image (this is one of the built-in images
    that come as part of the Unity UI system). As shown in the following screenshot,
    you should now see a circle centered below the title text in our inventory HUD
    rectangle. This circle visually tells the user that there is space in the inventory
    for an item to be collected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5f4728fd-bf47-449b-8682-12ab388f57e3.png)'
  prefs: []
  type: TYPE_IMG
- en: Imagine the player has collected a star. Let's now add (inside our inventory
    slot circle panel) a yellow star icon image. Add to the scene a UI Image object
    (**Create** | **UI** | **Image**). Rename it Image-icon. Child GameObject **Image-icon**
    to the panel Panel-inventory-slot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Child GameObjects can be hidden making the GameObject **inactive**. By creating
    a new **UI Image** GameObject for our star icon, and adding it as a child of our
    Panel-inventory-slot GameObject, we can now display the star icon when the **Image**
    is enabled and hide it by making it inactive. This is a general approach, which
    means as long as we have a reference to the **Image** GameObject, we don't have
    to do extra work swapping images as we had to do in some of the previous recipes.
    This means we can begin to write more general-purpose code that will work with
    different inventory panels for keys, stars, money, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: With Image-icon selected in the **Hierarchy**, drag the sprite `icon_star_100`
    (in the `Sprites` folder) from the **Project** panel into the **Source Image**
    field in the Inspector (in the **Image (Script**) component).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit the **Rect Transform** of Image-icon, and while holding down *Shift* + *Alt* (to
    set pivot and position), choose the stretch-stretch box. The star icon should
    now be stretched the perfect size to fit inside the `70x70` parent panel, so we
    see a star inside the circle.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f48f5552-6b5b-4003-9eee-087f33cab456.png)'
  prefs: []
  type: TYPE_IMG
- en: Save and run the scene and play the game. You should see a clearly defined rectangle
    at the top of the screen, with the title text Inventory. Inside the inventory
    rectangular area you can see a circular slot, currently showing a star.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's display 3 slots to the player. First, change the Pos X horizontal position
    of panel Panel-inventory-slot to -70\. This moves it left of center, making space
    for the next one, and allowing us to center the three slots when we've finished.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Duplicate panel Panel-inventory-slot, renaming (if necessary) the copy to panel
    Panel-inventory-slot (1). Set the Pos X of this copy to 0.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Duplicate panel Panel-inventory-slot again, renaming (if necessary) the copy
    to panel Panel-inventory-slot (2). Set the Pos X of this copy to 70\. Now select
    the child Image-star-icon of this third panel and make it inactive (at the top
    of the **Inspector** uncheck its active checkbox, to the left of the GameObject
    name) . The star for this panel should now be hidden, and only the circle background
    of the slot's panel is visible.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have created one simple panel (Panel-background) with title UI Text as a
    child GameObject at the top of the game canvas, which shows a grayish background
    rectangle and the title text Inventory. This indicates to the player that this
    part of the screen is where the inventory HUD will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: To illustrate how this might be used to indicate a player carrying stars, we
    added a smaller panel for one slot in the inventory with a circular background
    image, and in that added a star icon a child GameObject. We then duplicated the
    slot panel two more times, positioning them 70 pixels apart. We then disabled
    (make inactive) the star icon of the third slot, so that the an empty slot circle
    is shown.
  prefs: []
  type: TYPE_NORMAL
- en: Our scene presents to the user a display indicating two out of a possible three
    stars are being carried. This recipe is a good start for a more general-purpose
    approach to creating inventory UIs in Unity, and we'll build from it in some of
    the following recipes in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: We'll learn how to limit the player's movement to prevent their character moving
    into the rectangle of HUD items like this in [Chapter 12](eb0ea442-6350-4a86-9e16-708b80d8762f.xhtml),
    Controlling and Choosing Positions.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a C# inventory slot UI display scripted component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we started to work with UI panels and images to create
    a more general-purpose GameObject for displaying inventory slots, and images to
    indicate what is stored in them. In this recipe, we look at taking things a little
    further with the graphics, and also create a C# script class to work with each
    inventory slot object.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/459b3abb-fd0c-4247-8bc3-772238db3426.png)'
  prefs: []
  type: TYPE_IMG
- en: As we can see in the screenshot, in this recipe we'll create the UI (and scripts)
    for an inventory that has three locations for stars, and three more for keys,
    using colored and gray icons to indicate how many have been collected.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe adapts the previous one. So, make a copy of the project for the
    previous recipe and work on this copy.
  prefs: []
  type: TYPE_NORMAL
- en: For this recipe, we have prepared a folder named `_Scripts` in the `03_06` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a C# inventory slot display script component, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Import the `_Scripts` folder from the provided files (this contains a copy of
    the script class `PlayerInventory` from one of the previous recipes, which we
    can use unchanged for this recipe).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Delete two of the three inventory slot GameObjects: Panel-inventory-slot (1)
    and (2). So, only Panel-inventory-slot remains.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: First we'll create a panel for three star slots. In the **Hierarchy** panel,
    create a UI Panel (**Create** | **UI** | **Panel**) and rename it Panel-stars.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We'll now position Panel-stars at the top-left of the **Game** panel, and make
    it fit within the left side of our general inventory rectangle. Edit the UI **Image's
    Rect Transform** component, and while holding down *SHIFT* and *ALT* (to set pivot
    and position), choose the top-left box. Now set the Height to 60 and the Width
    to 300\. We'll now nudge this away from the top-left corner by setting Pos X to
    10 and Pos Y to -30.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a **UI Text** object (**Create** | **UI** | **Text**) and rename it Text-title.
    For its **Text** **(Script)** component, change the text to Stars. Child this
    UI Text object to the panel Panel-stars.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit the **Rect Transform** of Text-title, and while holding down *Shift* + *Alt* (to
    set pivot and position), choose the left-middle box. The text should now be positioned
    at the left-middle of the **UI Panel** object Panel-stars.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Inspector** panel, also set the font of Text-title to **Xolonium-Bold**
    (the `Fonts` folder). Center the text horizontally, center-align the text vertically,
    set its **Height** to `50`, and set the **Font Size** to `32`. Choose a yellow
    text color. Set **Vertical-overflow** to Overflow, and set **Alignment** vertical
    to center. We'll now nudge this away from the very left edge by setting Pos X
    to 10.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Child the existing GameObject Panel-inventory-slot to Panel-stars. Edit its
    **Rect Transform**, and while holding down *Shift* + *Alt* (to set pivot and position),
    choose the left-middle box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Resize Panel-inventory-slot to Width and Height `50 x 50` pixels. Set its Pos
    X to 140\. It should now appear to the right of the yellow Stars text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/771c225c-f450-410d-9ca0-69e8e0bbb1d6.png)'
  prefs: []
  type: TYPE_IMG
- en: Rename GameObject Image-icon as Image-icon-grey. Then duplicate this GameObject,
    naming the copy Image-icon-color. Both should be child GameObjects of Panel-inventory-slot.
    In the Hierarchy the sequence should be that the first child is Image-icon-grey
    and the second child is Image-icon-color. If this isn't the order, then swap them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Image-icon-grey, and drag the sprite `icon_star_grey_100` (in the `Sprites`
    folder) from the **Project** panel into the **Source Image** field in the **Inspector**
    (in the **Image (Script)** component). Now, if you disable GameObject **Image-icon-color**
    you should see the grey star icon inside the slot panel circle.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the following C# Script `PickupUI` (in the `_Scripts` folder) and add
    an instance as a component to GameObject of Panel-inventory-slot in the **Hierarchy**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Select Panel-inventory-slot in the **Hierarchy**. In the Inspector, for the
    Pickup UI (Script) component, populate the **Icon Color** public field by dragging
    Image-icon-color from the Hierarchy. Likewise, populate the Icon Grey public field
    by dragging Image-icon-grey from the Hierarchy. Now the scripted component **PickupUI**
    in Panel-inventory-slot has references to the colored and grey icons for this
    inventory slot GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Duplicate GameObject Panel-inventory-slot and for the new duplicate GameObject
    set its Pos X to 190.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Duplicate GameObject Panel-inventory-slot second time and for the new duplicate
    GameObject, set its Pos X to 240\. You should now see all three star inventory
    icons lined up nicely spaced to the right of the yellow Stars title text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/09799173-3394-4936-9deb-7fa15d9db835.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Add the following C# Script PlayerInventoryDisplay to the GameObject player-SpaceGirl
    in the **Hierarchy**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'From the **Hierarchy**, select the GameObject player-SpaceGirl. Then do the
    following in the **Inspector** for the **Player Inventory Display (Script)** component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the Size of public array slots to 3.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Populate the **Element** **0** public field with the GameObject Panel-inventory-slot.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Populate the **Element 1** public field with the GameObject Panel-inventory-slot
    (1).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Populate the **Element 2** public field with the GameObject Panel-inventory-slot
    (2):'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/a27617fe-ad95-4be5-a3cb-da340e4b4b39.png)'
  prefs: []
  type: TYPE_IMG
- en: Finally, make two more copies of GameObject star in the scene and move them
    around. So, there are now three GameObjects tagged Star for the player to collect.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you run the game and the player's character hits each star GameObject,
    it should be removed from the scene, and the next free inventory star icon should
    change from grey to yellow.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have created a panel (Panel-stars) in which to display the large title text
    Stars and three inventory slot panels to show how many stars can be collected,
    and how many have been collected at any point in the game. Each star panel-slot
    is a **UI Panel** with a circular Knob background image, and then two children,
    one showing a grey icon image and a second showing a colored icon image. When
    the colored icon image GameObject is disabled it will be hidden, and so reveal
    the grey icon. When both colored and grey images are disabled, then an empty circle
    will be shown, which could, perhaps, be used to indicate to the user that a general-purpose
    location is empty and available in the inventory.
  prefs: []
  type: TYPE_NORMAL
- en: The script class `PickupUI` has two public variables that are references to
    the grey and colored icon for the GameObject it relates to. Before the scene starts
    (method `Awake()`), the script hides the grey and colored icons and displays an
    empty circle. This script class declares three public methods (public so that
    they can be invoked from another scripted object when the game is running). These
    methods hide/reveal the appropriate icons to display the related inventory panel
    UI object as either empty, grey, or colored. The methods are clearly named `DisplayEmpty()`,
    `DisplayGreyIcon(`), and `DisplayColorIcon()`.
  prefs: []
  type: TYPE_NORMAL
- en: The script class `PlayerInventory` maintains an integer total `starTotal` of
    how many stars have been collected (initialized to zero). Each time the player
    character collides with an object, then if that object is tagged Star, the method
    `AddStar()` is invoked. This method increments the total and sends a message passing
    the new total to method `OnChangeStarTotal(...)` of its sibling scripted component
    `PlayerInventoryDisplay` .
  prefs: []
  type: TYPE_NORMAL
- en: The script-class `PlayerInventoryDisplay` has a public array of references to
    PickupUI objects, and the single public method `OnChangeStarTotal(...)`. This
    method loops through its array of PickupUI scripted objects, setting them to display
    color icons while the loop counter is less than the number of stars carried, and
    thereafter setting them to display grey icons. This results in the color icons
    being displayed to match the number of stars being carried.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: It might seem that we could make our code simpler by assuming that slots
    are always displaying grey (no star) and just changing one slot to yellow each
    time a yellow star is picked up. But this would lead to problems if something
    happens in the game (for example, hitting a black hole or being shot by an alien)
    that makes us drop one or more stars. The C# script class PlayerInventoryDisplay
    makes no assumptions about which slots may or may not have been displayed grey
    or yellow or empty previously. Each time it is called, it ensures that an appropriate
    number of yellow stars are displayed, and all other slots are displayed with grey
    stars.'
  prefs: []
  type: TYPE_NORMAL
- en: The UI Panel GameObjects slots for the three stars have a PickupUI scripted
    component added, and each is linked to its grey and colored icons.
  prefs: []
  type: TYPE_NORMAL
- en: Several star GameObjects are added to the scene (all tagged Star). The array
    of PickupUI object references in the `PlayerInventoryDisplay` scripted component
    in GameObject player-SpaceGirl is populated with references to the PickupUI scripted
    components in the three the UI Panels for each star.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here are some details you won't want to miss.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the game for a second inventory panel for keys
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have created a great display panel for the collection of star objects. Now
    we can reuse that work, to create a second panel to display the collection of
    key objects in the game.
  prefs: []
  type: TYPE_NORMAL
- en: 'To modify the game to make a second inventory panel for key collection, do
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Duplicate GameObject Panel-stars, naming the copy Panel-keys.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With Panel-keys selected in the Hierarchy, do the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the **Text (Script)** of child **Text-title** from Stars to Keys.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In the **Rect Transform**, choose top-right, set Pos X to -10 (to move away
    from the right edge) and Pos Y to -30 (to vertically align with Panel-keys).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For each Image-icon-grey GameObject that is a child of all three panel-inventory-slots,
    change the **Image (Script)** Source Image to: icon_key_grey_100.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For each Image-icon-color GameObject that is a child of all three panel-inventory-slots,
    change the **Image (Script)** Source Image to: icon_key_green_100.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For all of the **Image-icon-grey** GameObjects and the Image-icon-color GameObjects
    that are children of all three panel-inventory-slots, in the **Rect Transform**
    set the Scale to (0.75, 0.75, 1). This is to make the key images fit fully inside
    the background panel circle images.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Remove from GameObject player-SpaceGirl script components: PlayerInventory
    and PlayerInventoryDisplay.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the following C# Script PlayerInventoryKeys in the `_Scripts` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following C# script `PlayerInventoryDisplayKeys` to GameObject player-SpaceGirl
    in the **Hierarchy**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: With the GameObject player-SpaceGirl selected in the **Hierarchy**, for its
    PlayerInventoryDisplayKeys scripted component, set both slotsKeys and slotsStars
    to 3 (making the size of each of these arrays 3). Then drag the corresponding
    inventory-slot GameObjects from the Hierarchy to populate these arrays.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new GameObject key by dragging a copy of the sprite image icon-key-green-100 from
    the **Project** panel into the scene. Then add a **Box Collider** component (**Physics
    2D**) and tick its Is Trigger setting. In its **Sprite Renderer** component, set
    the Sorting Layer to Foreground. Create a new **Tag**: Key, and add this tag to
    this GameObject.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make two duplicates of GameObject key, moving them to different locations in
    the scene (so the player can see all three stars and all three keys).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you can see, we have duplicated and adjusted the visual UI Panel and components
    of for star carrying inventory to give us a second one for key carrying inventory.
    Likewise, we have added code to detect collisions with objects tagged Key, and
    added to the inventory display script to update the UI Panel for keys when notified
    that a change has occurred in the number of keys being carried.
  prefs: []
  type: TYPE_NORMAL
- en: Using UI Grid Layout Groups to automatically populate a panel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The recipes in this chapter up to this point have been hand-crafted for each
    situation. While this is fine, more general and automated approaches to inventory
    UIs can sometimes save time and effort but still achieve visual and usability
    results of equal quality.
  prefs: []
  type: TYPE_NORMAL
- en: There can be a lot of dragging slots from the **Hierarchy** panel into arrays,
    such as in the previous recipe for the scripted component `PlayerInventoryDisplay`.
    This takes a bit of work (and mistakes might be made when dragging items in the
    wrong order or the same item twice). Also, if we change the number of slots, then
    we may have to do this all over again or try to remember to drag more slots if
    we increase the number. A better way of doing things is to make the first task
    of the script class `PlayerInventoryDisplay` when the scene begins to create at
    **Run-Time** as many as required of the panels for grey-color star (or key or
    whatever) icon GameObjects as children of Panel-slot-grid, and then populate the
    array of the display scripted component at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a6686d9a-4236-4253-9ef5-006f2b585f64.png)'
  prefs: []
  type: TYPE_IMG
- en: In this recipe, we will begin to explore a more engineered approach to inventory
    UIs by exploiting the automated sizing and layouts offered by Unity's Grid Layout
    Group component. Some enhancements at the end of this recipe include adding an
    interactive scrollbar, as show in the screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe adapts the previous one. So, make a copy of the project for the
    previous recipe, and work on this copy.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To automatically populate a panel using UI Grid Layout Groups to follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new folder named Prefabs. In this folder, create a new empty prefab
    named panel-inventory-slot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Hierarchy** panel, drag the GameObject Panel-inventory-slot into
    your new empty prefab named panel-inventory-slot. This prefab should now turn
    blue, showing it is populated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Hierarchy** panel, delete the three GameObjects Panel-inventory-slot
    / (1) / (2).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Un-child Text-title from Panel-stars. Set the Pos-X position of **Panel-stars**.
    To 130 - so that the panel is now to the right of the text Stars.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With the panel Panel-stars selected in the Hierarchy panel, add a grid layout
    group component (**Add Component** | **Layout** | **Grid Layout Group**). Set **Cell
    Size** to `50 x 50` and Spacing to `5 x 5`. Also, set the **Child Alignment**
    to Middle Center (so our icons will have even spacing at the far left and right),
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2e21a36d-acf0-42c1-b3e4-ddd7eddde586.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Replace the C# script `PlayerInventoryDisplay` in GameObject player-SpaceGirl
    with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Ensure GameObject **player-girl1 **is selected in the **Hierarchy.** Then drag
    from the **Project** panel GameObject **Panel-stars** into the **Player Inventory
    Display (Script)** variable **Panel-slot-grid**, in the **Inspector**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With GameObject player-girl1 selected in the **Hierarchy**, drag from the **Project**
    panel prefab panel-inventory-slot into **Player Inventory Display (Script)** the
    variable Star Slot Prefab, in the Inspector. Steps 7 and 8 are illustrated in
    this screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b8eacab9-2256-4253-86be-776158d1e19b.png)'
  prefs: []
  type: TYPE_IMG
- en: Edit the script class `PlayerInventoryDisplay` to set the constant `NUM_INVENTORY_SLOTS`
    to have 10 or 15 slots. So some can only be seen when using the horizontal scroll
    bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the scene and play the game. As you pick up stars, you should see more
    of the grey stars change to yellow in the inventory display.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We took one of the panels that contained the Knob circle background, and children
    GameObjects of grey and colored star images, and used it to create a **Prefab**
    panel-inventory-slot. We then removed the star panel GameObjects from the scene
    since our script class PlayerInventoryDisplay will create as many of these as
    needed when the scene begins. This approach saves a lot of drag and dropping,
    saving **Design-Time** effort, and eliminating one possible source of sequence/object
    reference errors when the design of a scene is changed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The C# script class `PlayerInventoryDisplay` has two properties:'
  prefs: []
  type: TYPE_NORMAL
- en: A constant integer (`NUM_INVENTORY_SLOTS`) defining the number of slots in our
    inventory, which for this game we set to 5.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `(slots)` array of references to `PickupUI` scripted components. Each of these
    will become a reference to the scripted component in each of the five `Panel-inventory-slot`
    GameObjects in our `Panel-stars`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Awake()` method is used to create instances of the prefab in `PlayerInventoryDispay`
    so that we know this will be executed before the `Start()` method in `PlayerInventory` since
    no `Start()` method is executed in a scene until all `Awake()` methods for all
    GameObjects in the scene have been completed. The `Awake()` method first calculates
    the width of the Panel-stars (50 + (50 * number of inventory slots)). Next, the
    panel is resized to have that width, using the `SetSizeWithCurrentAnchors()` method.
    Then a loop runs for the number of slots in the inventory, each time creating
    a new star slot GameObject from the prefab, childing the new GameObject to Panel-stars,
    and adding a reference to the icon slot GameObject in array slots. When the `OnChangeStarTotal(...)`
    method is passed the number of stars we are carrying, it loops through each of
    the five slots. While the current slot is less than our star total, a yellow star
    is displayed by the calling of the `DisplayYellow()` method of the current slot
    (PickupUI scripted component). Once the loop counter is equal to or larger than
    our star total, then all remaining slots are made to display a grey star via the
    method `DisplayGrey()`.
  prefs: []
  type: TYPE_NORMAL
- en: Our player character GameObject, player-girl1, has a very simple basic `PlayerInventory`
    script. This just detects collisions with objects tagged Star, and when this happens,
    it removes the star GameObject collided with and calls its `AddStar()` method
    of its `playerInventoryMode`l scripted component. Each time the `AddStar()` method
    is called, it increments (adds 1) to the total umber of stars being carried, and
    then calls the `OnChangeStarTotal(...)` method of the scripted component `playerInventoryDisplay`.
    Also, when the scene starts, an initial call is made to the `OnChangeStarTotal(...)`
    method so that the UI display for the inventory is set up to show that we are
    initially carrying no stars.
  prefs: []
  type: TYPE_NORMAL
- en: The public array has been made private and no longer needs to be populated through
    manual drag-and-drop. When you run the game, it will play just the same as before,
    with the population of the array of images in our inventory grid panel now automated.
    The `Awake()` method creates new instances of the prefab (as many as defined by
    constant `NUM_INVENTORY_SLOTS`) and immediately childed them to Panel-slot-grid.
    Since we have a grid layout group component, their placement is automatically
    neat and tidy in our panel.
  prefs: []
  type: TYPE_NORMAL
- en: The scale property of the transform component of GameObjects is reset when a
    GameObject changes its parent (to keep the child size to relative to the parent
    size). So, it is a good idea to always reset the local scale of GameObjects to
    (1,1,1) immediately after they have been childed to another GameObject. We do
    this in the for loop of starSlotGO immediately following the `SetParent(...)`
    statement.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here are some details you won't want to miss.
  prefs: []
  type: TYPE_NORMAL
- en: Automatically infer number of inventory slots based on number of GameObjects
    tagged Star
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Rather than having to manually change Integer constant `NUM_INVENTORY_SLOTS`
    in the script class PlayerInventoryDisplay to match the number of GameObjects
    created in the scene for the player to collect, let's have our script count how
    many GameObjects are tagged Star, and use this to size and populate our array
    of references to inventory UI panel slots.
  prefs: []
  type: TYPE_NORMAL
- en: 'We just need to change from a constant to a variable for our array size, and
    set that variable before anything else in our `Awake()` method. The statement
    `GameObject.FindGameObjectsWithTag("Star")` gets an array of references to all
    GameObjects with tag Star, and its length is the array size we want:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the C# Script `PlayerInventoryDisplay` in the GameObject player-SpaceGirl
    with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Add or remove some of the duplicates of GameObject star so the total is no longer
    5.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the scene. You should see the size and contents of Panel-star change to
    match the number of GameObjects tagged Star when the scene begins.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a horizontal scrollbar to the inventory slot display
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How could we cope with many inventory slots, more than fit in the space provided?
    One solution is to add a scroll bar so that the user can scroll left and right,
    viewing five at a time, say, as shown in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bd08f7cb-d510-4704-a666-ae4c35851bf4.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's add a horizontal scroll bar to our game. This can be achieved without
    any C# code changes, all through the Unity 5 UI system.
  prefs: []
  type: TYPE_NORMAL
- en: 'To implement a horizontal scrollbar for our inventory display, we need to do
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Increase the height of Panel-background to 110 pixels.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Inspector p**anel, set the **Child Alignment** property of component
    **Grid Layout** **Group (Script)** of `Panel-slot-grid` to Upper Left. Then, move
    this panel to the right a little so that the inventory icons are centered on screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a **UI Panel** to the **Canvas** and name it `Panel-scroll-container`, and
    tint it red by setting the Color property of its **Image (Script)** component
    to red.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Hierarchy** panel, drag `Panel-slot-grid` so that it is now childed
    to `Panel-scroll-container`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Size and position Panel-scroll-container so that it is just behind our Panel-slot-grid.
    Set its **Rect Transform** to top-left, **Pos X** to 130, **Pos Y** to -30, **Width**
    to 300 and **Height** to 60\. So, you should now see a red rectangle behind the
    `Panel-slot-grid` inventory panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a **UI Mask** to `Panel-scroll-container` so now you should only be able
    to see the parts of `Panel-slot-grid` that fit within the rectangle of this red-tinted
    panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: One workflow is to to temporarily set this mask component as inactive so that
    you can see and work on the unseen parts of Panel-slot-grid if required.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a **UI Scrollbar** to the **Canvas** and name it Scrollbar-horizontal.
    Move it to be just below the red-tinted `Panel-scroll-container`, and resize it
    to be the same width as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/182db6c2-84fe-4f49-8d34-059a66ab1206.png)'
  prefs: []
  type: TYPE_IMG
- en: Add a UI **Scroll Rect** component to Panel-scroll-container. Uncheck the **Vertical**
    property of this **Scroll Rect** component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Inspector** panel, drag Scrolbar-horizontal to the Horizontal Scrollbar
    property of the Scroll Rect component of Panel-scroll-container.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Inspector** panel, drag Panel-slot-grid to the **Content** property
    of the **Scroll Rect** component of Panel-scroll-container, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0933e74d-c4e7-4adc-8fc0-3c74e413459d.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, ensure the mask component of Panel-scroll-container is set as active so
    that we don't see the overflow of Panel-slot-grid and uncheck this mask components
    option to **Show Mask Graphic** (so that we don't see the red rectangle any more).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should now have a working scrollable inventory system.
  prefs: []
  type: TYPE_NORMAL
- en: Automatically changing the grid cell size based on the number of slots in the
    inventory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Consider a situation where we wish to change the number of slots. An alternative
    to using something like scrollbars is to change the cell size in the **Grid Layout
    Group** component. We can automate this through code so that the cell size is
    changed to ensure that `NUM_INVENTORY_SLOTS` will fit along the width of our panel
    at the top of the canvas.
  prefs: []
  type: TYPE_NORMAL
- en: 'To implement the automated resizing of the **Grid Layout Group** cell size
    for this recipe, we need to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Comment-out the third statement in method `Awake()`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following method Start() to the C# Script PlayerInventoryDisplay in
    GameObject player-SpaceGirl with the following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: We write our code in the `Start()` method, rather than adding to code in the
    Awake() method, to ensure that the `RectTransform` of GameObject Panel-slot-grid
    has finished sizing (in this recipe, it stretches based on the width of the Game
    panel). While we can't know the sequence in which **Hierarchy** GameObjects are
    created when a scene begins, we can rely on the Unity behavior that every GameObject
    sends the `Awake()` message, and only after all corresponding `Awake()` methods
    have finished executing all objects, and then sends the Start() message. So, any
    code in the `Start()` method can safely assume that every GameObject has been
    initialized.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6e42b39d-5b56-4795-ba2b-11d31af8a0a9.png)'
  prefs: []
  type: TYPE_IMG
- en: The screenshot above shows the value of `NUM_INVENTORY_SLOTS` having been changed
    to 15, and the cell size, having been corresponding, changed, so that all 15 now
    fit horizontally in our panel. Note that the spacing between cells is subtracted
    from the calculated available with divided by the number of slots `(xCellSize
    -= gridLayoutGroup.spacing.x`) since that spacing is needed between each item
    displayed as well.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying multiple pickups of different objects as a list of text via a dynamic
    List<> of scripted PickUp objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with different kinds of pickups, one approach is to use a C# List
    to maintain a flexible-length data structure of the items currently in the inventory.
    In this recipe, we will show you how, each time an item is picked up, a new object
    is added to such a List collection. An iteration through the List is how the text
    display of items is generated each time the inventory changes. We introduce a
    very simple PickUp script class, demonstrating how information about a pickup
    can be stored in a scripted component, extracted upon collision, and stored in
    our List.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5509c6f0-ae2d-43c5-843f-983801722e55.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes that you are starting with the `Simple2Dgame_SpaceGirl`
    project we set up in the first recipe in this chapter. The font you need can be
    found in the `03_02` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To display inventory total text for multiple pickups of different object types,
    follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Start with a new copy of the `Simple2Dgame_SpaceGirl mini-game`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit the tags, changing Star to Pickup. Ensure that the star GameObject now
    has the Pickup tag.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/04aa78bc-5251-4ad1-b83d-4f02763715c0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Add the following C# Script **PickUp** to the GameObject star in the Hierarchy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'In the Inspector, change the description property of component Pick Up (Script)
    of GameObject star to the text `star`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/550c9efa-2e77-4c2f-b811-f2f922175e86.png)'
  prefs: []
  type: TYPE_IMG
- en: Select the GameObject star in the Hierarchy panel and make a copy of this GameObject,
    renaming the copy heart.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Inspector, change the description property of component `Pick Up` (Script)
    of GameObject heart to the text heart. Also, drag the health heart image from
    the Project panel (in the Sprites folder) into the Sprite property of GameObject
    heart. The player should now see the heart image on screen for this pickup item.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the GameObject star in the **Hierarchy** panel and make a copy of this
    GameObject, renaming the copy key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Inspector, change the description property of component Pick Up (Script)
    of GameObject key to the text key. Also, drag the `icon_key_green_100` image from the
    Project panel (in the Sprites folder) into the Sprite property of GameObject key.
    The player should now see the key image on screen for this pickup item.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make another one or two copies of each pickup GameObject and arrange them around
    the screen, so there are two or three each of star, heart, and key pickup GameObjects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the following C# Script `PlayerInventory` in the `_Scripts` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Add a UI Text object (**Create** | **UI** | **Text**). Rename it Text-inventory-list.
    Change its text to the quick brown fox jumped over the lazy dog the quick brown
    fox jumped over the lazy dog, or another long list of nonsense words, to test
    the overflow settings you'll change in the next step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Text (Script) component, ensure that **Horizontal Overflow** is set to
    Wrap, and set **Vertical Overflow** to **Overflow**. This will ensure that the
    text will wrap onto a second or third line (if needed) and not be hidden if there
    are lots of pickups.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Inspector** panel, set its font to **Xolonium-Bold** (folder Fonts)
    and set its color to yellow. For the **Alignment** property, center the text horizontally
    and ensure that the text is top aligned vertically, set the **Font Size** to `28`,
    and choose a yellow text Color.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit its **Rect Transform** and set its **Height** to 50\. Then, while holding
    down *Shift* + *Alt* (to set pivot and position), choose the top-stretch box.
    The text should now be positioned at the middle top of the **Game** panel, and
    its width should stretch to match that of the whole panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your text should now appear at the top of the game panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following C# Script `PlayerInventoryDisplay` to GameObject player-girl1
    in the **Hierarchy**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: From the **Hierarchy**, select the GameObject player-girl1\. Then, from the
    **Inspector**, access the **Player Inventory Display (Script)** component and
    populate the **Inventory Text** public field with the **UI Text** object Text-inventory-list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Play the game. Each time you pick up a star or key or heart, the updated list
    of what you are carrying should be displayed in the form carrying [key] [heart].
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...k
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the script class `PlayerInventory`, the variable inventory is a C# List<>.
    This is a flexible data structure that can be sorted, searched, and dynamically
    (at runtime, when the game is being played) have items added to and removed from
    it. The `<PickUp>` in pointy brackets means that variable inventory will contain
    a list of `PickUp` objects. For this recipe, our `PickUp` class just has a single
    field, a string description, but we'll add more sophisticated data items in `PickUp`
    classes in later recipes. This variable inventory is initialized to be a new,
    empty C# List of `PickUp` objects.
  prefs: []
  type: TYPE_NORMAL
- en: Before the scene starts, the `Awake()` method of script class Player caches
    a reference to the `PlayerInventoryDisplay` scripted component.
  prefs: []
  type: TYPE_NORMAL
- en: When the scene starts the `Start()` method invokes the `OnChangeInventory(...)`
    method of the `PlayerInventoryDisplay` scripted component. This is so the text
    displayed to the user at the beginning of the scene corresponds to the initial
    value of the variable inventory (which might, for some games, not be empty. For
    example, a player might start a game with some money, or a basic weapon, or a
    map).
  prefs: []
  type: TYPE_NORMAL
- en: When the `OnTriggerEnter2D(...)` method detects collisions with items tagged
    Pickup, the `PickUp` object component of the item hit is added to our inventory
    list. A call is also made to the `OnChangeInventory(...)` method of `playerInventoryDisplay`
    to update out inventory display to the player, passing the updated inventory List
    as a parameter.
  prefs: []
  type: TYPE_NORMAL
- en: The script class `playerInventoryDisplay` has a public variable, linked to the
    UI Text object Text-inventory-list. The `OnChangeInventory(...)` method first
    sets the UI text to empty, and then loops through the inventory list, building
    up a string of each items description in square brackets ([key], [heart], and
    so on). If there were no items in the list, then the string is set to the text
    (empty inventory). Finally, the text property of the **UI Text** object Text-inventory-list
    is set to the value of this string representation of what is inside the variable
    inventory.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here are some details you won't want to miss.
  prefs: []
  type: TYPE_NORMAL
- en: Order items in the inventory list alphabetically
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It would be nice to alphabetically sort the words in the inventory list, both
    for neatness and consistency (so, in a game, if we pick up a key and a heart,
    it will look the same regardless of the order they are picked up in), but also
    so that items of the same type will be listed together so that we can easily see
    how many of each item we are carrying.
  prefs: []
  type: TYPE_NORMAL
- en: 'To implement alphabetical sorting of the items in the inventory list, we need
    to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following C# code to the beginning of method `OnChangeInventory(...)`
    in the script class `PlayerInventoryDisplay`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: You should now see all the items listed in alphabetic sequence.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This C# code takes advantage of the C# List.Sort(...) method, a feature of collections
    whereby each item can be compared to the next, and they are swapped if in the
    wrong order (if the CompareTo(...) methods returns false). Learn more at[ https://msdn.microsoft.com/en-us/library/3da4abas(v=vs.110).aspx](https://msdn.microsoft.com/en-us/library/3da4abas(v=vs.110).aspx).
  prefs: []
  type: TYPE_NORMAL
- en: Displaying multiple pickups of different objects as text totals via a dynamic
    Dictionary<> of PickUp objects and enum pickup types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While the previous recipe worked fine, any old text might have been typed into
    the description for a pickup or perhaps mistyped (star, Sstar, starr, and so on).
    A much better way of restricting game properties to one of a predefined (enumerated)
    list of possible values is to use C# enums. As well as removing the chance of
    mistyping a string, it also means that we can write code to appropriately deal
    with the predefined set of possible values. In this recipe, we will improve our
    general purpose `PickUp` class by introducing three possible pickup types (Star,
    Heart, and Key), and write inventory display code that counts the number of each
    type of pickup being carried and displays these totals via a **UI Text** object
    on screen. We also switch from using a **List** to using a **Dictionary**, since
    the Dictionary data structure is designed specifically for key-value pairs, perfect
    for associating a numeric total with an enumerated pickup type.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/19a086e7-1556-47f7-b1f6-2bf25d6e5daf.png)'
  prefs: []
  type: TYPE_IMG
- en: In this recipe, we will also manage the additional complexity by separating
    the controller (user collection event) logic from the stored inventory data, by
    introducing an inventory manager scripted class. Our player controller is then
    simplified to just two methods (Awake, getting a reference to the inventory manager,
    and `OnTriggerEnter2D`, responding to collisions by communicating with the inventory
    manager).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe adapts the previous one. So, make a copy of the project for the
    previous recipe, and work on this copy.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To display multiple pickups of different objects as text totals via a dynamic
    Dictionary, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the content of the script class `PickUp` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Remove the instance of the script class `PlayerInventory` from the GameObject
    `player-SpaceGirl`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new C# script class `PlayerController` containing the following code,
    and add an instance as a component to GameObject `player-girl1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '`PickUp item = hit.GetComponent<PickUp> ();`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the content of script class `PlayerInventoryDisplay` with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Add an instance of the following C# Script `InventoryManager` to the GameObject
    `player-SpaceGirl` in the Hierarchy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: In the **Hierarchy** (or **Scene**) panel, select *each pickup* GameObject in
    turn, and choose from the drop-down menu its corresponding **Type** in the **Inspector**
    panel. As you can see, public variables that are of an enum type are automatically
    restricted to the set of possible values as a combo-box drop-down menu in the
    **Inspector** panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5bc6bcee-c71a-4fcf-b13e-46beb373366f.png)'
  prefs: []
  type: TYPE_IMG
- en: Play the game. First, you should see a message on screen stating the inventory
    is empty, and then as you pick up one or more items of each pickup type, you'll
    see text totals of each type you have collected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each pickup GameObject in the scene has a scripted component of the class `PickUp`.
    The `PickUp` object for each `Pickup` GameObject has a single property, a pickup
    type, which has to be one of the enumerated set of `Star`, `Key`, or `Heart`.
    The use of an enumerated type means that the value has to be one of these three
    listed values, so there can be no misspelling/mistyping errors that could have
    happened with a general text string type, as in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Previously, the script class `PlayerInventory` script had two sets of responsibilities:'
  prefs: []
  type: TYPE_NORMAL
- en: Maintain the internal record of items being carried
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detect collisions, update the state, and ask the display class to inform the
    player visually of the changed items being carried
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this recipe, we separate these two set of responsibilities into separate
    script classes:'
  prefs: []
  type: TYPE_NORMAL
- en: The script class InventoryManager will maintain the internal record of items
    being carried (and ask the display class to inform the player visually each time
    there is a change to the items being carried).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The script class `Player` will detect collisions, and ask the `InventoryManager` to
    update what is being carried.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The addition of this extra software layer both separates the player collision
    detection behavior from how the inventory is internally stored, and also prevents
    any single script class from becoming too complex by attempting to handle too
    many different responsibilities. This recipe is an example of the low coupling
    of the **Model-View-Controller** (**MVC**) design pattern. We have designed our
    code to not rely on or make too many assumptions about other parts of the game
    so that the likelihood of a change in some other part of our game breaking our
    inventory display code is reduced. The display (view) is separated from the logical
    representation of what we are carrying (inventory manager model), and changes
    to the model are made by public methods called from the player (controller).
  prefs: []
  type: TYPE_NORMAL
- en: The Player script class gets a reference to the `InventoryManager` component
    via its Awake() method, and each time the player's character collides with a pickup
    GameObject, it calls the `Add(...)` method of the inventory manager, passing the
    PickUp object of the object collided with.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the script class `InventoryManager`, the inventory being carried by the
    player is being represented by a C# **Dictionary**. A Dictionary is made up of
    a sequence of *key-value pairs*, where the key is one of the possible `PickUp.PickUpType`
    enumerated **values**, and the value is an integer total of how many of that type
    of pickup is being carried. The Dictionary is declared stating what type will
    be used for a key, and then what type (or script class) will be stored as the
    value for that key. Here is the statement declaring our Dictionary variable items:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: C# dictionaries provide a `TryGetValue(...)` method, which receives parameters
    of a key and is passed a reference to a variable the same data type as the value
    for the Dictionary. When the `Add(...)` method of the inventory manager is called,
    the type of the PickUp object is tested to see if a total for this type is already
    in Dictionary items. If an item total is found inside the Dictionary for the given
    type, then the value for this item in the Dictionary is incremented. If no entry
    is found for the given type, then a new element is added to the Dictionary with
    a total of 1.
  prefs: []
  type: TYPE_NORMAL
- en: '**TryGetValue call-by-reference parameter** Note the use of the C# `out` keyword before
    the parameter `oldTotal` in this statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '`items.TryGetValue(type, out oldTotal)`'
  prefs: []
  type: TYPE_NORMAL
- en: indicates that a reference to the actual variable oldTotal is being passed to
    method `TryGetValue(...)`, not just a copy of its value. This means that the method
    can change the value of the variable.
  prefs: []
  type: TYPE_NORMAL
- en: The method returns true if an entry is found in the Dictionary for the given
    type, and if so, sets the value of oldTotal to the value against this key.
  prefs: []
  type: TYPE_NORMAL
- en: The last action of the `Add(...)` method is to call the `OnChangeInventory(...)`
    method of the `PlayerInventoryDisplay` scripted component of the player GameObject
    to update the text totals displayed on screen.
  prefs: []
  type: TYPE_NORMAL
- en: The method `OnChangeInventory(...)` of the script class `PlayerInventoryDisplay`
    first initializes the string variable `newInventoryText`, and then iterates through
    each item in the Dictionary, appending to `newInventoryText` a string of the type
    name and total for the current item. Finally, the text property of the UI Text
    object is updated with the completed text inside `newInventoryText`, showing the
    pickup totals to the player.
  prefs: []
  type: TYPE_NORMAL
- en: Learn more about using C# lists and dictionaries in Unity in the Unity Technologies
    tutorial at [https://unity3d.com/learn/tutorials/modules/intermediate/scripting/lists-and-dictionaries](https://unity3d.com/learn/tutorials/modules/intermediate/scripting/lists-and-dictionaries).
  prefs: []
  type: TYPE_NORMAL
