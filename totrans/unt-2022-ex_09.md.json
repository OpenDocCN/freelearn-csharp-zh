["```cs\nprivate void Start()\n{\n    _poolProjectiles = new ObjectPool<ProjectileBase>(\n        CreatePooledItem, OnGetFromPool,\n        OnReturnToPool, OnDestroyPoolItem,\n        collectionCheck: false,\n        defaultCapacity: 10,\n        maxSize: 25);\n    ProjectileBase CreatePooledItem() =>\n        Instantiate(_weapon1.BulletPrefab);\n    void OnGetFromPool(ProjectileBase projectile) =>\n        projectile.gameObject.SetActive(true);\n    void OnReturnToPool (ProjectileBase projectile) =>\n        projectile.gameObject.SetActive(false);\n    void OnDestroyPoolItem(ProjectileBase projectile) =>\n        Destroy(projectile.gameObject);\n}\n```", "```cs\nusing UnityEngine.Pool;\npublic class PlayerShootingPooled : MonoBehaviour\n{\n    [SerializeField] private WeaponRanged _weapon1;\n    public int PoolDefaultCapacity = 10;\n    public int PoolMaxSize = 25;\n    private ObjectPool<ProjectileBase> _poolProjectiles;\n    private void Start() {}    // new ObjectPool<>();\n    private void OnFire() =>\n        _weapon1.Shoot(_poolProjectiles.Get(),\n            ReturnProjectile);\n    private void ReturnProjectile(\n        ProjectileBase projectile) =>\n            _poolProjectiles.Release(projectile);\n}\n```", "```cs\nusing UnityEngine.Events;\npublic class WeaponRanged : MonoBehaviour, IWeapon\n{\n    [SerializeField] private ProjectileBase _bulletPrefab;\n    public ProjectileBase BulletPrefab => _bulletPrefab;\n    [SerializeField] private Transform _projectileSpawn;\n    public void Shoot(ProjectileBase projectile,\n        UnityAction<ProjectileBase> poolingReturnCallback)\n    {\n        projectile.transform.position =\n            _projectileSpawn.position;\n       projectile.Init(_projectileSpawn.right\n            * transform.root.localScale.x,\n                poolingReturnCallback);\n    }\n}\n```", "```cs\nusing UnityEngine.Events;\ninternal interface IWeapon\n{\n    ProjectileBase BulletPrefab { get; }\n    void Shoot(ProjectileBase projectile,\n        UnityAction<ProjectileBase>\n            poolingReleaseCallback);\n}\n```", "```cs\npublic class Bullet : ProjectileBase\n{\n    [SerializeField] private LayerMask CollideWith;\n    protected override void\n        OnTriggerEnter2D(Collider2D collision)\n    {\n        if ((CollideWith\n            & (1 << collision.gameObject.layer)) != 0)\n                base.Collided();\n    }\n    protected override void LifetimeExpired()\n        => base.Collided();\n}\n```", "```cs\nusing UnityEngine.Events;\npublic abstract class ProjectileBase : MonoBehaviour\n{\n    [SerializeField] private Rigidbody2D _rb;\n    [SerializeField] private float _velocity = 30f;\n    [SerializeField] private float _lifetime = 2f;\n    private event\n        UnityAction<ProjectileBase> _onCollisionAction;\n    public virtual void Init(Vector2 direction,\n        UnityAction<ProjectileBase> collisionCallback)\n    {\n        _onCollisionAction = collisionCallback;\n        _rb.velocity = direction * _velocity;\n        Invoke(nameof(LifetimeExpired), _lifetime);\n    }\n    protected abstract void\n        OnTriggerEnter2D(Collider2D collision);\n    protected abstract void LifetimeExpired();\n    protected virtual void Collided()\n    {\n        CancelInvoke();\n        _onCollisionAction?.Invoke(this);\n    }\n}\n```"]