- en: Using Tools to Write Better Code
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用工具编写更好的代码
- en: As we saw in [Chapter 14](82dfe57b-5fe6-4c71-9fa9-b4526a2c6f3e.xhtml), *Best
    Practices in Coding C# 8*, coding can be considered an art, but writing understandable
    code is surely more like philosophy. In the aforementioned chapter, we discussed
    practices that you, as a software architect, need for your developers. In this
    chapter, we will describe the techniques and tools for code analysis, so you have
    well-written code for your project.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第14章](82dfe57b-5fe6-4c71-9fa9-b4526a2c6f3e.xhtml)中看到的，*C# 8编码的最佳实践*，编码可以被认为是一门艺术，但编写可理解的代码更像是哲学。在前述章节中，我们讨论了作为软件架构师，你需要为你的开发者提供的实践。在本章中，我们将描述代码分析的技术和工具，以便你为你的项目编写高质量的代码。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Identifying well-written code
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别写得好的代码
- en: Understanding the tools that can be used in the process to make things easier
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解在过程中可以使用哪些工具来使事情变得更简单
- en: A book use case—implementing code inspection before publishing the application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一本书的使用案例——在发布应用程序之前实施代码审查
- en: By the end of the chapter, you will be able to define which tools you are going
    to incorporate into your software development life cycle to enable code analysis.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将能够定义你打算将哪些工具纳入你的软件开发生命周期以实现代码分析。
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter requires Visual Studio 2017 or the 2019 free Community Edition
    or better. You will find the sample code for this chapter at [https://github.com/PacktPublishing/Hands-On-Software-Architecture-with-CSharp-8/tree/master/ch16](https://github.com/PacktPublishing/Hands-On-Software-Architecture-with-CSharp-8/tree/master/ch16).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章需要Visual Studio 2017或2019免费社区版或更高版本。您可以在[https://github.com/PacktPublishing/Hands-On-Software-Architecture-with-CSharp-8/tree/master/ch16](https://github.com/PacktPublishing/Hands-On-Software-Architecture-with-CSharp-8/tree/master/ch16)找到本章的示例代码。
- en: Identifying a well-written code
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 识别写得好的代码
- en: It is not easy to define whether a code is well-written or not. The best practices
    described in [Chapter 14](82dfe57b-5fe6-4c71-9fa9-b4526a2c6f3e.xhtml), *Best Practices
    in Coding C# 8*, can certainly guide you as a software architect to define a standard
    for your team. But even with a standard, mistakes will happen and you will probably
    find them only after the code is in production. The decision to refactor code
    in production just because it does not follow all the standards you define is
    not an easy one to take, especially if this code is working properly. Some people
    conclude that a well-written code is one that works well in production. However,
    this surely can cause damage to the software's life, since developers can be inspired
    by that not-standard code.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 定义代码是否写得好的标准并不容易。在[第14章](82dfe57b-5fe6-4c71-9fa9-b4526a2c6f3e.xhtml)中描述的最佳实践，*C#
    8编码的最佳实践*，当然可以指导你作为软件架构师为你的团队定义一个标准。但是，即使有了标准，错误仍然会发生，你可能会在生产代码中才发现它们。仅仅因为代码没有遵循你定义的所有标准就决定在生产中重构代码，这是一个不容易做出的决定，尤其是如果这段代码运行正常的话。有些人认为，写得好的代码是那些在生产中运行良好的代码。然而，这无疑会损害软件的生命周期，因为开发者可能会受到那些非标准代码的启发。
- en: For this reason, you—as a software architect—need to find ways to anticipate
    the lack of application of the coding standard you defined. Luckily, nowadays,
    we have many options for tools that can help us with this task. They are considered the
    automation of static code analysis; this technique is seen as a great opportunity
    to improve the software developed and to help the developers.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，作为软件架构师的你，需要找到方法来预测你定义的编码标准可能不会被应用的情况。幸运的是，如今我们有许多工具选项可以帮助我们完成这项任务。它们被认为是静态代码分析的自动化；这项技术被视为提高开发的软件和帮助开发者的一个巨大机会。
- en: The reason your developers will evolve with code analysis is that you start
    to disseminate knowledge between them during code inspections. The tools that
    we have now have the same purpose. Better than that, with Roslyn they do this
    task while you are writing the code. Roslyn is the compiler platform for .NET,
    and it enables you to develop some tools for analyzing code. These analyzers can
    check style, quality, design, and other issues.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你的开发者将通过代码分析而不断进步的原因是，你在代码审查过程中开始在他们之间传播知识。我们现在拥有的工具具有相同的目的。而且，有了Roslyn，它们在你编写代码的同时完成这项任务。Roslyn是.NET的编译器平台，它使你能够开发一些用于分析代码的工具。这些分析器可以检查样式、质量、设计和其他问题。
- en: 'For instance, look at the following code. It does not make any sense, but you
    can see that there are some mistakes:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，看看以下代码。它没有任何意义，但你可以看到有一些错误：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The idea of this code is to show you the power of some tools to improve the
    code you are delivering. Let's check each of them in the next topic, including
    how to set up them.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的目的是展示一些工具的强大功能，以改善您交付的代码。让我们在下一个主题中逐一检查它们，包括如何设置它们。
- en: Understanding and applying tools that can evaluate C# code
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解和应用可以评估 C# 代码的工具
- en: The evolution of code analysis in Visual Studio is continuous. This means that
    Visual Studio 2019 certainly has more tools for this purpose than Visual Studio
    2017, and so on.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio 中代码分析的发展是持续的。这意味着 Visual Studio 2019 确实比 Visual Studio 2017 等提供了更多此类目的的工具。
- en: 'One of the issues that you (as a software architect) need to deal with is the
    *coding style of the team*. This certainly results in a better understanding of
    the code. For instance, if you go to *Visual Studio Menu | Tools | Options*, you
    will find ways to set up how to deal with different code style patterns, and it
    even indicates a bad coding style as an error in the Code Style option, as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 作为软件架构师，您需要处理的一个问题是团队的**编码风格**。这当然有助于更好地理解代码。例如，如果您转到 *Visual Studio 菜单 | 工具
    | 选项*，您将找到设置不同代码风格模式的方法，并且它甚至将不良编码风格作为“代码风格”选项中的错误指示，如下所示：
- en: '![](img/48eb0404-e3c0-4b69-9b57-66271bda3e5b.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/48eb0404-e3c0-4b69-9b57-66271bda3e5b.png)'
- en: 'For instance, the preceding screenshot suggests that Avoid unused parameters
    were considered an error. After this change, the result of the compilation of
    the same code presented at the beginning of the chapter was different, as you
    can see in the following screenshot:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，前面的屏幕截图表明“避免未使用参数”被视为错误。在此更改之后，本章开头展示的相同代码的编译结果不同，如以下屏幕截图所示：
- en: '![](img/3ea8d20a-4244-4630-bd72-3b963c7a8866.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3ea8d20a-4244-4630-bd72-3b963c7a8866.png)'
- en: You can export your coding style configuration and attach it to your project
    so it will follow the rules you have defined.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将您的编码风格配置导出并附加到项目中，这样它就会遵循您定义的规则。
- en: 'Another good tool that Visual Studio 2019 provides is **Analyze and Code Cleanup**.
    In this tool, you are able to set up some code standards that can be cleaned from
    your code using the tool. For instance, in the following screenshot, it was set
    to remove unnecessary code:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio 2019 提供的另一个好工具是**分析和代码清理**。在这个工具中，您可以设置一些可以从代码中清理出来的代码标准。例如，在以下屏幕截图中，它被设置为删除不必要的代码：
- en: '![](img/12335399-998f-491a-8ad6-1a19fb2a9753.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/12335399-998f-491a-8ad6-1a19fb2a9753.png)'
- en: 'The way you run the code cleanup is by selecting it in the Solution Explorer
    area, as you can see in the following screenshot. This process will run in all
    the code files you have:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在解决方案资源管理器区域中选择代码清理的方式，正如您在下面的屏幕截图中所见。这个过程将在您所有的代码文件中运行：
- en: '![](img/d7becc52-bd75-441d-9830-4ac3e6abe935.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d7becc52-bd75-441d-9830-4ac3e6abe935.png)'
- en: 'After solving the errors indicated by the Code Style and Code Cleanup tools,
    the sample code we are working on has some minimal simplifications, as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 解决了代码风格和代码清理工具指示的错误后，我们正在处理的示例代码有一些最小化简化，如下所示：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: It is worth mentioning that the preceding code has many improvements that need
    to be. Beyond that, Visual Studio enables additional tools for the IDE by installing
    extensions to it. These tools can help you to improve your code quality since
    some of them were built to do code analysis. This section will list some free
    options so that you can decide the one that best fits your needs. There are certainly
    other options and even paid ones. The idea here is not to indicate a specific
    tool but to give you an idea of their abilities.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，前面的代码有许多需要改进的地方。除此之外，Visual Studio 通过安装扩展到 IDE 中来启用额外的工具。这些工具可以帮助您提高代码质量，因为其中一些工具是专门用于代码分析的。本节将列出一些免费选项，以便您可以选择最适合您需求的选项。当然，还有其他选项，甚至付费选项。这里的想法不是指出一个特定的工具，而是给您一个它们能力的大致了解。
- en: 'To install these extensions, you will need to find the menu on Visual Studio.
    Here, you have a screenshot of the Extension Manager:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装这些扩展，您需要在 Visual Studio 中找到菜单。这里有一个扩展管理器的屏幕截图：
- en: '![](img/8599d004-6a0f-4dd5-9df4-8b67cb8f7c9e.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8599d004-6a0f-4dd5-9df4-8b67cb8f7c9e.png)'
- en: There are many other cool extensions that can improve the productivity and quality
    of your code and solution. Do a search for them in this manager.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多其他酷炫的扩展可以提高您代码和解决方案的生产力和质量。您可以在该管理器中搜索它们。
- en: After you select the extension that will be installed, you will need to restart
    Visual Studio. Most of them are easy to identify after installation since they
    modify the behavior of the IDE.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在你选择要安装的扩展之后，你需要重新启动 Visual Studio。大多数扩展在安装后都很容易识别，因为它们会修改 IDE 的行为。
- en: Applying extension tools to analyze code
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用扩展工具分析代码
- en: 'Although the sample code delivered after the Code Style and Code Cleanup tools
    is better than the one we presented at the beginning of the chapter, it is clearly
    far from the best practices discussed in [Chapter 14](82dfe57b-5fe6-4c71-9fa9-b4526a2c6f3e.xhtml), *Best
    Practices in Coding C# 8*. In the next sections, you will be able to check the
    behavior of three extensions that can help you evolve this code: Microsoft Code
    Analysis 2019, SonarLint for Visual Studio 2019, and Code Cracker for Visual Studio
    2017.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在代码样式和代码清理工具之后提供的示例代码比我们在本章开头展示的要好，但它显然远未达到[第 14 章](82dfe57b-5fe6-4c71-9fa9-b4526a2c6f3e.xhtml)中讨论的最佳实践，即*C#
    8 编码最佳实践*。在接下来的几节中，你将能够检查三个可以帮助你改进代码的扩展的行为：Microsoft Code Analysis 2019、SonarLint
    for Visual Studio 2019 和 Code Cracker for Visual Studio 2017。
- en: Using Microsoft Code Analysis 2019
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Microsoft Code Analysis 2019
- en: This extension is provided by Microsoft DevLabs and is an upgrade for the FxCop
    rules that we used to automate in the past. Basically, it has more than 100 rules
    for detecting problems in the code as you type it.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这个扩展由 Microsoft DevLabs 提供，是对我们过去用来自动化的 FxCop 规则的升级。基本上，它有超过 100 条规则用于在编写代码时检测问题。
- en: 'For instance, just by enabling the extension and rebuilding the small sample
    we are using in this chapter, Code Analysis found a new issue to solve, as you
    can see in the following screenshot:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，只需启用扩展并重新构建我们在本章中使用的这个小示例，代码分析就找到了一个新的问题需要解决，如下面的截图所示：
- en: '![](img/1dbc1824-4293-436f-8684-e25bbdd53f00.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1dbc1824-4293-436f-8684-e25bbdd53f00.png)'
- en: It is worth mentioning that we discussed the usage of empty `try-catch` statements
    as an anti-pattern in [Chapter 14](82dfe57b-5fe6-4c71-9fa9-b4526a2c6f3e.xhtml), *Best
    Practices in Coding C# 8*. So, it would be really good for the health of the code
    if this kind of problem could be exposed like this.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，我们在[第 14 章](82dfe57b-5fe6-4c71-9fa9-b4526a2c6f3e.xhtml)中讨论了空`try-catch`语句作为反模式的使用。因此，如果能够像这样暴露这类问题，对代码的健康状况将大有裨益。
- en: Applying SonarLint for Visual Studio 2019
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Visual Studio 2019 中应用 SonarLint
- en: 'SonarLint is an open source initiative from the Sonar Source community to detect
    bugs and quality issues while you code. There is support for C#, VB .NET, C, C++,
    and JavaScript. The great thing about this extension is that it comes with explanations
    to resolve detected issues, and that is why we say developers learn how to code
    well while using these tools. Check out the following screenshot with the analysis
    made in the sample code:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: SonarLint 是 Sonar Source 社区发起的一个开源项目，旨在你在编码时检测错误和质量问题。它支持 C#、VB .NET、C、C++ 和
    JavaScript。这个扩展的伟大之处在于它附带了解决检测到的问题的解释，这就是为什么我们说开发者在使用这些工具的同时学会了如何编写良好的代码。查看以下截图，其中展示了在示例代码中进行的分析：
- en: '![](img/4ea4fa63-d881-422b-b74d-3890dd2583f3.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4ea4fa63-d881-422b-b74d-3890dd2583f3.png)'
- en: We can check that this extension was able to point other mistakes and, as they
    promise, there is an explanation for each warning. This is really useful not only
    for detecting problems but for training developers in good coding practices.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以验证这个扩展能够指出其他错误，并且正如它们承诺的那样，每个警告都有解释。这不仅仅对于检测问题很有用，而且对于培养开发者的良好编码实践也很有帮助。
- en: Getting Code Cracker for Visual Studio 2017 as a helper to write better code
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Code Cracker 用于 Visual Studio 2017，作为编写更好代码的辅助工具
- en: 'Code Cracker is another tool with the same idea of analyzing code using Roslyn.
    It is an initiative of some Microsoft MVPs and it is open source, too. According
    to Visual Studio Marketplace, more people are using this tool than any other:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Code Cracker 是另一个使用 Roslyn 分析代码的工具，它是由一些 Microsoft MVP 发起的，也是开源的。根据 Visual Studio
    Marketplace，使用这个工具的人比使用其他任何工具的人都要多：
- en: '![](img/f8461715-bc09-4a45-b7ee-aaf9f85e0edf.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f8461715-bc09-4a45-b7ee-aaf9f85e0edf.png)'
- en: It is worth mentioning that there are new rules detected in this tool that were
    not found in the other tools. The reason why there are differences between the
    code analysis from one extension to others is that probably the rules programmed
    were not the same.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，这个工具中检测到了其他工具中没有发现的新规则。一个扩展到另一个扩展之间的代码分析差异的原因可能是编程的规则并不相同。
- en: Checking the final code after analysis
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在分析后检查最终代码
- en: 'After the analysis of the three extensions, we have finally solved all the
    issues presented. We can check the final code, as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在分析三个扩展之后，我们最终解决了所有提出的问题。我们可以检查最终的代码，如下所示：
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you can see, the preceding code is not only easier to understand, it is safer
    and is enabled to consider different paths of programming since the default for
    the `switch-case` was programmed. This pattern was discussed in [Chapter 14](82dfe57b-5fe6-4c71-9fa9-b4526a2c6f3e.xhtml), *Best
    Practices in Coding C# 8*, too, which concludes that best practices can be easily
    followed using one (or all) of the extensions mentioned in this chapter.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，前面的代码不仅更容易理解，而且更安全，并且能够考虑编程的不同路径，因为`switch-case`的默认值已经编程。这种模式在第14章[编码C#
    8的最佳实践](82dfe57b-5fe6-4c71-9fa9-b4526a2c6f3e.xhtml)中也进行了讨论，该章节总结说，最佳实践可以很容易地通过使用本章中提到的（或所有）扩展之一（或全部）来遵循。
- en: Use case – evaluating the C# code before publishing the application
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用例 - 在发布应用程序之前评估C#代码
- en: In [Chapter 3](bc26065f-b001-4123-9524-3bbfa87bfadd.xhtml), *Documenting Requirements
    with Azure DevOps*, we created the WWTravelClub repository in the platform. As
    we saw there, Azure DevOps enables continuous integration, and this can be really
    useful. In this section, we will discuss more reasons why the DevOps concept and
    the Azure DevOps platform are so useful.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](bc26065f-b001-4123-9524-3bbfa87bfadd.xhtml)，“使用Azure DevOps记录需求”，我们在平台上创建了WWTravelClub仓库。正如我们看到的，Azure
    DevOps支持持续集成，这非常有用。在本节中，我们将讨论更多关于DevOps概念和Azure DevOps平台为何如此有用的原因。
- en: For now, the only thing we would like to introduce is the possibility of analyzing
    code after it is committed by the developers but has not yet been published. Nowadays,
    in a SaaS world for application life cycle tools, this is only possible thanks
    to some of the SaaS code analysis platforms that we have. The use case will use
    Sonar Cloud.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们想要介绍的唯一事情是分析开发者在提交代码后但尚未发布之前代码的可能性。在当今的SaaS应用程序生命周期工具领域，这仅得益于我们拥有的一些SaaS代码分析平台。用例将使用Sonar
    Cloud。
- en: 'Sonar Cloud is free for open source code and can analyze code stored in GitHub,
    Bitbucket, and Azure DevOps. The registration needs a user for these platforms.
    As soon as you log in, you can follow the steps described in the following article
    to create the connection between your Azure DevOps and Sonar Cloud: [https://sonarcloud.io/documentation/analysis/scan/sonarscanner-for-azure-devops/](https://sonarcloud.io/documentation/analysis/scan/sonarscanner-for-azure-devops/).'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Sonar Cloud对开源代码是免费的，并且可以分析存储在GitHub、Bitbucket和Azure DevOps中的代码。注册需要这些平台的一个用户。一旦您登录，您就可以按照以下文章中描述的步骤创建Azure
    DevOps和Sonar Cloud之间的连接：[https://sonarcloud.io/documentation/analysis/scan/sonarscanner-for-azure-devops/](https://sonarcloud.io/documentation/analysis/scan/sonarscanner-for-azure-devops/)。
- en: 'By setting up the connection between your project in Azure DevOps and Sonar
    Cloud, you will have a build pipeline like the one that follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在Azure DevOps项目和Sonar Cloud之间建立连接，您将拥有以下所示的构建管道：
- en: '![](img/a8f416cf-5b49-4049-86a7-3d3473ea33c0.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/a8f416cf-5b49-4049-86a7-3d3473ea33c0.png)'
- en: 'It is worth mentioning that C# projects do not have a GUID number, and this
    is required by Sonar Cloud. You can easily generate one using this link ([https://www.guidgenerator.com/](https://www.guidgenerator.com/)),
    and it will need to be placed as in the following screenshot:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，C#项目没有GUID编号，而Sonar Cloud需要这个编号。您可以使用此链接（[https://www.guidgenerator.com/](https://www.guidgenerator.com/)）轻松生成一个，并将其放置如下截图所示：
- en: '![](img/d65f12f2-601a-47fb-9fae-b3f63380b166.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/d65f12f2-601a-47fb-9fae-b3f63380b166.png)'
- en: 'As soon as you finish the build, the result of code analysis will be presented
    in Sonar Cloud, as you can see in the next screenshot. If you want to navigate
    down to this project, you can visit: [https://sonarcloud.io/dashboard?id=WWWTravelClub](https://sonarcloud.io/dashboard?id=WWWTravelClub):'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您完成构建，代码分析的结果将在Sonar Cloud中展示，如下一截图所示。如果您想导航到该项目，可以访问：[https://sonarcloud.io/dashboard?id=WWWTravelClub](https://sonarcloud.io/dashboard?id=WWWTravelClub)：
- en: '![](img/e05a3661-fb2d-48c8-a8f5-1a239b7557c0.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/e05a3661-fb2d-48c8-a8f5-1a239b7557c0.png)'
- en: Also, by this time, the code analyzed is not in the release yet. So this can
    be really useful for getting the next step of quality before releasing your system.
    You can use this approach as a reference for automating code analysis during committal.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，到这个时候，已经分析的代码还没有发布。因此，这可以在发布系统之前获得下一步的质量提升非常有用。您可以将这种方法作为在提交代码时自动进行代码分析的参考。
- en: Summary
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter presented tools that can be used to apply the best practices of
    coding described in [Chapter 14](82dfe57b-5fe6-4c71-9fa9-b4526a2c6f3e.xhtml), *Best
    Practices in Coding C# 8*. We looked at the Roslyn compiler, which enables code
    analysis at the same time the developer is coding, and we looked at the use case—evaluating
    the C# code before publishing the application, which implements code analysis
    during the Azure DevOps building process using Sonar Cloud.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了可以用来应用[第14章](82dfe57b-5fe6-4c71-9fa9-b4526a2c6f3e.xhtml)中描述的编码最佳实践的工具体现，即《C#
    8编码最佳实践》。我们探讨了Roslyn编译器，它允许在开发者编码的同时进行代码分析，并探讨了用例——在发布应用程序之前评估C#代码，这在使用Sonar Cloud的Azure
    DevOps构建过程中实现了代码分析。
- en: As soon as you apply to your projects everything you have learned in this chapter,
    the code analysis will give you the opportunity to improve the quality of the
    code you are delivering to your customer. This is a very important role of a software
    architect.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦将本章所学的一切应用到你的项目中，代码分析将为你提供改进交付给客户代码质量的机会。这是软件架构师的一个非常重要的角色。
- en: In the next chapter, we will be deploying your application with Azure DevOps.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用Azure DevOps部署你的应用程序。
- en: Questions
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: How can software be described as well-written code?
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何描述软件为编写良好的代码？
- en: What is Roslyn?
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Roslyn是什么？
- en: What is code analysis?
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码分析是什么？
- en: What is the importance of code analysis?
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码分析的重要性是什么？
- en: How does Roslyn help in code analysis?
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Roslyn如何帮助进行代码分析？
- en: What are Visual Studio extensions?
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是Visual Studio扩展？
- en: What are the extension tools presented for code analysis?
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展示的代码分析扩展工具是什么？
- en: Further reading
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'These are some websites where you will find more information on the topics
    in this chapter:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是一些你可以找到本章主题更多信息的网站：
- en: '[https://marketplace.visualstudio.com/items?itemName=VisualStudioPlatformTeam.MicrosoftCodeAnalysis2019](https://marketplace.visualstudio.com/items?itemName=VisualStudioPlatformTeam.MicrosoftCodeAnalysis2019)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Microsoft Code Analysis 2019](https://marketplace.visualstudio.com/items?itemName=VisualStudioPlatformTeam.MicrosoftCodeAnalysis2019)'
- en: '[https://marketplace.visualstudio.com/items?itemName=SonarSource.SonarLintforVisualStudio2019](https://marketplace.visualstudio.com/items?itemName=SonarSource.SonarLintforVisualStudio2019)'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SonarLint for Visual Studio 2019](https://marketplace.visualstudio.com/items?itemName=SonarSource.SonarLintforVisualStudio2019)'
- en: '[https://marketplace.visualstudio.com/items?itemName=GiovanniBassi-MVP.CodeCrackerforC](https://marketplace.visualstudio.com/items?itemName=GiovanniBassi-MVP.CodeCrackerforC)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[CodeCracker for C](https://marketplace.visualstudio.com/items?itemName=GiovanniBassi-MVP.CodeCrackerforC)'
- en: '[https://github.com/dotnet/roslyn-analyzers](https://github.com/dotnet/roslyn-analyzers)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Roslyn分析器](https://github.com/dotnet/roslyn-analyzers)'
- en: '[https://docs.microsoft.com/en-us/visualstudio/ide/code-styles-and-code-cleanup](https://docs.microsoft.com/en-us/visualstudio/ide/code-styles-and-code-cleanup)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Visual Studio代码样式和代码清理](https://docs.microsoft.com/en-us/visualstudio/ide/code-styles-and-code-cleanup)'
- en: '[https://sonarcloud.io/documentation/analysis/scan/sonarscanner-for-azure-devops/](https://sonarcloud.io/documentation/analysis/scan/sonarscanner-for-azure-devops/)'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Sonar Scanner for Azure DevOps](https://sonarcloud.io/documentation/analysis/scan/sonarscanner-for-azure-devops/)'
- en: '[https://www.guidgenerator.com/](https://www.guidgenerator.com/)'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GUID生成器](https://www.guidgenerator.com/)'
