["```cs\ngameObject.transform.position += new Vector3(0, 0, 1);\n```", "```cs\ngameObject.transform.Rotate(0, 90, 0);\n```", "```cs\ngameObject.transform.localScale *= 2;\n```", "```cs\nRenderer renderer = gameObject.GetComponent<Renderer>();\nrenderer.material.color = Color.red;\n```", "```cs\nTexture newTexture = ...;\n     // Assume this is obtained or loaded elsewhere\nRenderer renderer = gameObject.GetComponent<Renderer>();\nrenderer.material.mainTexture = newTexture;\n```", "```cs\nusing UnityEngine;\npublic class PlayerJump : MonoBehaviour\n{\n    public float jumpForce = 5f;\n    private Rigidbody2D rb;\n    private bool isGrounded;\n```", "```cs\n    void Start()\n    {\n        rb = GetComponent<Rigidbody2D>();\n    }\n```", "```cs\n    void Update()\n    {\n        if (Input.GetKeyDown(KeyCode.Space) && isGrounded)\n        {\n            rb.AddForce(new Vector2(0, jumpForce),\n            ForceMode2D.Impulse);\n        }\n    }\n```", "```cs\n    // Check if the player is touching the ground\n    void OnCollisionEnter2D(Collision2D collision)\n    {\n        if (collision.gameObject.tag == \"Ground\")\n        {\n            isGrounded = true;\n        }\n    }\n    void OnCollisionExit2D(Collision2D collision)\n    {\n        if (collision.gameObject.tag == \"Ground\")\n        {\n            isGrounded = false;\n        }\n    }\n}\n```", "```cs\nusing UnityEngine;\npublic class LaunchProjectile : MonoBehaviour\n{\n    public Rigidbody2D projectile;\n    public float launchAngle = 45f;\n    public float launchForce = 10f;\n    void Start()\n    {\n        Vector2 launchDirection = Quaternion.Euler(0, 0, launchAngle)\n              * Vector2.right;\n        projectile.AddForce(launchDirection * launchForce,\n              ForceMode2D.Impulse);\n    }\n}\n```", "```cs\nvoid OnTriggerEnter2D(Collider2D other)\n{\n    if (other.gameObject.CompareTag(\"Collectible\"))\n    {\n        Destroy(other.gameObject);\n        // Remove the collectible from the scene\n        // Increment the player's score or perform\n        // other actions\n    }\n}\n```", "```cs\nvoid Update() {\n    if (Input.GetButtonDown(\"Fire1\")) {\n        // Assuming \"Fire1\" is your input for firing\n        RaycastHit hit;\n        Ray ray =\n        Camera.main.ScreenPointToRay(Input.mousePosition);\n        if (Physics.Raycast(ray, out hit, 100.0f)) {\n            // 100.0f is the max distance of the ray\n            Debug.Log(\"Hit: \" + hit.collider.name);\n            // Optionally, apply damage to the hit object\n            // if it has a health component\n            Health health =\n            hit.collider.GetComponent<Health>();\n            if (health != null) {\n                health.TakeDamage(10);\n                // Assuming TakeDamage is a method in\n                // your Health script\n            }\n        }\n   }\n}\n```", "```cs\nusing UnityEngine;\nusing UnityEngine.SceneManagement;\npublic class SceneLoader : MonoBehaviour\n{\n    public void LoadGameLevel()\n    {\n        SceneManager.LoadScene(\"GameLevel\");\n    }\n}\n```", "```cs\nIEnumerator LoadYourAsyncScene(string sceneName)\n{\n    AsyncOperation asyncLoad =\n         SceneManager.LoadSceneAsync(sceneName);\n    // While the asynchronous operation to load the new\n    // scene is not yet complete, continue waiting until\n    // it's done.\n    while (!asyncLoad.isDone)\n    {\n        // Here, you can also update the loading screen\n        // progress bar or any loading indicators you have.\n        yield return null;\n    }\n}\n```", "```cs\npublic class GameManager : MonoBehaviour\n{\n    public static GameManager Instance;\n    void Awake()\n    {\n        if (Instance == null)\n        {\n            Instance = this;\n            DontDestroyOnLoad(gameObject);\n        }\n        else if (Instance != this)\n        {\n            Destroy(gameObject);\n        }\n    }\n    // Your game state data and methods here\n}\n```", "```cs\nusing UnityEngine;\npublic class DayNightCycle : MonoBehaviour\n{\n    public Light directionalLight;\n    public float dayLength;\n    private float timeCounter = 0;\n    void Update()\n    {\n        timeCounter += Time.deltaTime / dayLength;\n        // Change light intensity and color based on\n           timeCounter\n        directionalLight.intensity = Mathf.Lerp(0.1f, 1f,\n            Mathf.Abs(Mathf.Cos(timeCounter * Mathf.PI *\n            2f)));\n        directionalLight.color = Color.Lerp(new Color(0.3f,\n        0.4f, 0.6f), Color.white,\n        directionalLight.intensity);\n    }\n}\n```", "```cs\nusing UnityEngine;\npublic class TerrainDeformer : MonoBehaviour\n{\n    public Terrain terrain;\n    private TerrainData terrainData;\n    private float[,] originalHeightMap;\n```", "```cs\n    void Start()\n    {\n        terrainData = terrain.terrainData;\n        originalHeightMap = terrainData.GetHeights(0, 0,\n           terrainData.heightmapResolution,\n           terrainData.heightmapResolution);\n    }\n```", "```cs\n    void Update()\n    {\n        Vector3 playerPosition = transform.position;\n        Vector3Int terrainPosition = new Vector3Int(\n            Mathf.RoundToInt(playerPosition.x),\n            Mathf.RoundToInt(playerPosition.y),\n            Mathf.RoundToInt(playerPosition.z)\n        );\n        // Deform terrain under player\n        // Note: This is a simplified example. In practice,\n        // you'll need to convert the player's position to\n        // terrain's local space and modify a range of\n        // heights around the player.\n        terrainData.SetHeights(terrainPosition.x,\n            terrainPosition.z,\n            new float[,] { { 0.5f } });\n    }\n```", "```cs\n    void OnDestroy()\n    {\n        // Restore the original terrain heights when the\n        // script is destroyed\n        terrainData.SetHeights(0, 0, originalHeightMap);\n    }\n}\n```", "```cs\nusing UnityEngine;\nusing UnityEngine.Netcode;\npublic class PlayerMovement : NetworkBehaviour\n{\n    public float speed = 10f;\n    void Update()\n    {\n        if (!isLocalPlayer) return;\n        float x = Input.GetAxis(\"Horizontal\") * speed *\n            Time.deltaTime;\n        float z = Input.GetAxis(\"Vertical\") * speed *\n            Time.deltaTime;\n        transform.Translate(x, 0, z);\n    }\n}\n```", "```cs\nusing UnityEngine;\nusing UnityEngine.AI;\npublic class EnemyAI : MonoBehaviour\n{\n    public NavMeshAgent agent;\n    public Transform player;\n    void Update()\n    {\n        agent.SetDestination(player.position);\n    }\n}\n```", "```cs\nusing System.Collections.Generic;\nusing UnityEngine;\npublic class Inventory : MonoBehaviour\n{\n    public List<Item> items = new List<Item>();\n    public void AddItem(Item item)\n    {\n        items.Add(item);\n    }\n}\n```", "```cs\nusing UnityEngine;\nusing UnityEngine.Netcode;\npublic class MyNetworkManager : NetworkManager\n{\n    public override void\n    OnServerAddPlayer(NetworkConnection conn,\n        short playerControllerId)\n    {\n        GameObject player = Instantiate(playerPrefab,\n            Vector3.zero,\n            Quaternion.identity);\n        NetworkServer.AddPlayerForConnection(conn, player,\n            playerControllerId);\n    }\n}\n```", "```cs\nusing UnityEngine;\nusing UnityEngine.AI;\npublic class EnemyPatrolController : MonoBehaviour\n{\n    public NavMeshAgent agent;\n    public Transform[] patrolPoints;\n    private int currentPatrolIndex;\n    void Start()\n    {\n        // Start patrolling from the first point\n        if (patrolPoints.Length > 0)\n        {\n            agent.SetDestination(patrolPoints[0].position);\n            currentPatrolIndex = 0;\n        }\n    }\n    void Update()\n    {\n        // If the agent reaches the current patrol point,\n        // move to the next one\n        if (!agent.pathPending && agent.remainingDistance\n             < 0.5f)\n        {\n            currentPatrolIndex = (currentPatrolIndex + 1)\n                 % patrolPoints.Length;\n            agent.SetDestination(patrolPoints\n                 [currentPatrolIndex].position);\n        }\n    }\n}\n```", "```cs\nusing UnityEngine;\npublic class ApplyForce : MonoBehaviour\n{\n    public Rigidbody rb;\n    public Vector3 forceDirection;\n    public float forceMagnitude;\n    void Start()\n    {\n        rb.AddForce(forceDirection.normalized *\n          forceMagnitude);\n    }\n}\n```"]