["```cs\n\"ConnectionStrings\": {\n  \"AppointmentBooking\": \"Data \n    Source=(localdb)\\\\ProjectModels;Initial     \n    Catalog=AppointmentBooking;Integrated Security=True;…\"\n},\n```", "```cs\nbuilder.Services\n    .AddDbContext<ApplicationContext>(options =>\n    options.UseSqlServer(\n        builder.Configuration\n          .GetConnectionString(\"AppointmentBooking\")\n    ));\n```", "```cs\n    md UqsAppointmentBooking\n    cd UqsAppointmentBooking\n    dotnet new sln\n    ```", "```cs\n    dotnet new blazorwasm -n Uqs.AppointmentBooking.Website\n    dotnet new webapi -n Uqs.AppointmentBooking.WebApi\n    dotnet new classlib -n Uqs.AppointmentBooking.Contract\n    dotnet new classlib -n Uqs.AppointmentBooking.Domain\n    dotnet new xunit -n \n      Uqs.AppointmentBooking.Domain.Tests.Unit\n    ```", "```cs\n    dotnet sln add Uqs.AppointmentBooking.Website\n    dotnet sln add Uqs.AppointmentBooking.WebApi\n    dotnet sln add Uqs.AppointmentBooking.Contract\n    dotnet sln add Uqs.AppointmentBooking.Domain\n    dotnet sln add Uqs.AppointmentBooking.Domain.Tests.Unit\n    ```", "```cs\n    dotnet add Uqs.AppointmentBooking.Website reference\n      Uqs.AppointmentBooking.Contract\n    dotnet add Uqs.AppointmentBooking.WebApi reference\n      Uqs.AppointmentBooking.Contract\n    dotnet add Uqs.AppointmentBooking.Domain reference\n      Uqs.AppointmentBooking.Contract\n    dotnet add Uqs.AppointmentBooking.WebApi reference\n      Uqs.AppointmentBooking.Domain\n    dotnet add Uqs.AppointmentBooking.Domain.Tests.Unit \n      reference Uqs.AppointmentBooking.Domain\n    ```", "```cs\ndotnet add Uqs.AppointmentBooking.Domain package \n    Microsoft.EntityFrameworkCore.SqlServer\n```", "```cs\n    dotnet add Uqs.AppointmentBooking.Domain.Tests.Unit \n        package NSubstitute\n    ```", "```cs\n    dotnet add Uqs.AppointmentBooking.Domain.Tests.Unit\n        package Microsoft.EntityFrameworkCore.InMemory\n    ```", "```cs\nnamespace Uqs.AppointmentBooking.Domain.DomainObjects;\npublic class Customer\n{\n    public int Id { get; set; }\n    public string? FirstName { get; set; }\n    public string? LastName { get; set; }\n}\n```", "```cs\npublic class ApplicationContext : DbContext\n{\n    public ApplicationContext(\n      DbContextOptions<ApplicationContext> options) :      \n      base(options){}\n    public DbSet<Appointment>? Appointments { get; set; }\n    public DbSet<Customer>? Customers { get; set; }\n    public DbSet<Employee>? Employees { get; set; }\n    public DbSet<Service>? Services { get; set; }\n    public DbSet<Shift>? Shifts { get; set; }\n}\n```", "```cs\n\"ConnectionStrings\": {\n  \"AppointmentBooking\": \"Data   \n    Source=(localdb)\\\\ProjectModels;Initial    \n    Catalog=AppointmentBooking;(…)\"\n},\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddDbContext<ApplicationContext>(o =>   \n  o.UseSqlServer(builder.Configuration.GetConnectionString\n    (\"AppointmentBooking\")));\n```", "```cs\npublic class ApplicationContextFake : ApplicationContext\n{\n    public ApplicationContextFake() : base(new \n        DbContextOptionsBuilder<ApplicationContext>()\n        .UseInMemoryDatabase(databaseName:\n        $\"AppointmentBookingTest-{Guid.NewGuid()}\")\n        .Options) {}\n}\n```", "```cs\npublic class ApplicationContextFakeBuilder\n{\n    private readonly ApplicationContextFake _ctx = new();\n    private EntityEntry<Employee> _tomEmp;\n    private EntityEntry<Employee> _janeEmp;\n    …\n    private EntityEntry<Customer> _paulCust;\n    private EntityEntry<Service> _mensCut;\n    private EntityEntry<Appointment> _aptPaulWithTom;\n    …\n    public ApplicationContextFakeBuilder WithSingleEmpTom()\n    {\n        _tomEmp = _ctx.Add(new Employee { \n            Name = \"Thomas Fringe\" });\n        return this;\n    }\n    …\n    public ApplicationContextFake Build()\n    {\n        _ctx.SaveChanges();\n        return _ctx;\n    }\n}\n```", "```cs\nGET https://webapidomain/services\n```", "```cs\n{    \n    \"ServiceId\": 2,\n    \"Name\": \"Men - Clipper & Scissor Cut\",\n    \"Duration\": 30,\n    \"Price\": 23.0\n}\n```", "```cs\nnamespace Uqs.AppointmentBooking.Contract;\npublic record Service(int ServiceId, string Name, \n    int Duration, float Price);\n```", "```cs\nnamespace Uqs.AppointmentBooking.Contract;\npublic record AvailableServices(Service[] Services);\n```", "```cs\npublic class ServicesService\n{\n}\n```", "```cs\npublic class ServicesServiceTests : IDisposable\n{\n    private readonly ApplicationContextFakeBuilder _ctxBldr\n        = new();\n    private ServicesService? _sut;\n    public void Dispose()\n    {\n        _ctxBldr.Dispose();\n    }\n}\n```", "```cs\n[Fact]\npublic async Task\nGetActiveServices_NoServiceInTheSystem_NoServices()\n{\n    // Arrange\n    var ctx = _ctxBldr.Build();\n    _sut = new ServicesService(ctx);\n    // Act\n    var actual = await _sut.GetActiveServices();\n    // Assert\n    Assert.True(!actual.Any());\n}\n```", "```cs\npublic class ServicesService\n{\n    private readonly ApplicationContext _context;\n    public ServicesService(ApplicationContext context)\n    {\n        _context = context;\n    }\n    public async Task<IEnumerable<Service>> \n        GetActiveServices()\n          => await _context.Services!.ToArrayAsync();\n}\n```", "```cs\n[Fact]\npublic async Task \n  GetActiveServices_TwoActiveOneInactiveService_TwoServices()\n{\n    // Arrange\n    var ctx = _ctxBldr\n        .WithSingleService(true)\n        .WithSingleService(true)\n        .WithSingleService(false)\n        .Build();\n    _sut = new ServicesService(ctx);\n    var expected = 2;\n    // Act\n    var actual = await _sut.GetActiveServices();\n    // Assert\n    Assert.Equal(expected, actual.Count());\n}\n```", "```cs\npublic ApplicationContextFakeBuilder WithSingleService\n    (bool isActive)\n{\n    _context.Add(new Service{ IsActive = isActive });\n    return this;\n}\n```", "```cs\npublic async Task<IEnumerable<Service>> GetActiveServices()\n    => await _context.Services!.Where(x => x.IsActive)\n                               .ToArrayAsync();\n```", "```cs\n[Fact]\npublic async Task \n  GetAvailableSlotsForEmployee_ServiceIdNoFound_\n    ArgumentException()\n{\n    // Arrange\n    var ctx = _contextBuilder\n        .Build();\n    _sut = new SlotsService(ctx, _nowService, _settings);\n    // Act\n    var exception = await \n        Assert.ThrowsAsync<ArgumentException>(\n        () => _sut.GetAvailableSlotsForEmployee(-1));\n    // Assert\n    Assert.IsType<ArgumentException>(exception);\n}\n```", "```cs\npublic async Task<Slots> GetAvailableSlotsForEmployee(\n    int serviceId)\n{\n    var service = await _context.Services!\n        .SingleOrDefaultAsync(x => x.Id == serviceId);\n    if (service is null)\n    {\n        throw new ArgumentException(\"Record not found\",\n        nameof(serviceId));\n    }\n    return null;\n}\n```", "```cs\n[Fact]\npublic async Task GetAvailableSlotsForEmployee_\n  NoShiftsForTomAndNoAppointmentsInSystem_NoSlots()\n{\n    // Arrange\n    var appointmentFrom = \n        new DateTime(2022, 10, 3, 7, 0, 0);\n    _nowService.Now.Returns(appointmentFrom);\n    var ctx = _contextBuilder\n        .WithSingleService(30)\n        .WithSingleEmployeeTom()\n        .Build();\n    _sut = new SlotsService(ctx, _nowService, _settings);\n    var tom = context.Employees!.Single();\n    var mensCut30Min = context.Services!.Single();\n    // Act\n    var slots = await \n        _sut.GetAvailableSlotsForEmployee(\n        mensCut30Min.Id, tom.Id);\n    // Assert\n    var times = slots.DaysSlots.SelectMany(x => x.Times);\n    Assert.Empty(times);\n}\n```", "```cs\n…\nvar shifts = _context.Shifts!.Where(\n    x => x.EmployeeId == employeeId);\nif (!shifts.Any())\n{\n    return new Slots(Array.Empty<DaySlots>());\n}\nreturn null;\n```", "```cs\n[Theory]\n[InlineData(5, 0)]\n[InlineData(25, 0)]\n[InlineData(30, 1, \"2022-10-03 09:00:00\")]\n[InlineData(35, 2, \"2022-10-03 09:00:00\", \n  \"2022-10-03 09:05:00\")]\npublic async Task GetAvailableSlotsForEmployee_\nOneShiftAndNoExistingAppointments_VaryingSlots(\n    int serviceDuration, int totalSlots, \n      params string[] expectedTimes)\n{\n…\n```", "```cs\npublic async Task GetAvailableSlotsForEmployee_\n  OneShiftWithVaryingAppointments_VaryingSlots(\n    string appointmentStartStr, string appointmentEndStr, \n    int totalSlots, params string[] expectedTimes)\n{\n…\n```"]