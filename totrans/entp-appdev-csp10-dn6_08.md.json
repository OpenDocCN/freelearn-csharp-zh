["```cs\nvar builder = WebApplication.CreateBuilder(args);\n```", "```cs\n// Add services to the container.\n```", "```cs\nbuilder.Services.AddControllers();\n```", "```cs\nbuilder.Services.AddEndpointsApiExplorer();\n```", "```cs\nbuilder.Services.AddSwaggerGen();\n```", "```cs\nvar app = builder.Build();\n```", "```cs\n// Configure the HTTP request pipeline.\n```", "```cs\nif (app.Environment.IsDevelopment())\n```", "```cs\n{\n```", "```cs\n    app.UseSwagger();\n```", "```cs\n    app.UseSwaggerUI();\n```", "```cs\n}\n```", "```cs\napp.UseHttpsRedirection();\n```", "```cs\napp.UseAuthorization();\n```", "```cs\napp.MapControllers();\n```", "```cs\napp.Run();\n```", "```cs\n\"ApplicationInsights\": {\n```", "```cs\n    \"InstrumentationKey\": \"<Your instrumentation key>\"\n```", "```cs\n  }\n```", "```cs\n\"ApiConfigs\": {\n```", "```cs\n    \"Service 1\": {\n```", "```cs\n      \"Name\": \"<Your dependent service name 1>\",\n```", "```cs\n      \"BaseUri\": \"<Service base uri>\",\n```", "```cs\n      \"HttpTimeOutInSeconds\": \"<Time out value in\n```", "```cs\n        seconds>\",      \n```", "```cs\n      \"ApiURLs\": [\n```", "```cs\n        {\n```", "```cs\n          \"EndpointName\": \"<End point 1>\"\n```", "```cs\n        },\n```", "```cs\n        {\n```", "```cs\n          \"EndpointName\": \"<End point 2>\"\n```", "```cs\n        }\n```", "```cs\n      ]\n```", "```cs\n    },\n```", "```cs\n    \"Service 2\": {\n```", "```cs\n      \"Name\": \"<Your dependent service name 2>\",\n```", "```cs\n      \"BaseUri\": \"<Service base uri>\",\n```", "```cs\n      \"HttpTimeOutInSeconds\": \"<Time out value in\n```", "```cs\n       seconds>\",      \n```", "```cs\n      \"ApiURLs\": [\n```", "```cs\n        {\n```", "```cs\n          \"EndpointName\": \"<End point 1>\"\n```", "```cs\n        },\n```", "```cs\n        {\n```", "```cs\n          \"EndpointName\": \"<End point 2>\"\n```", "```cs\n        }\n```", "```cs\n      ]\n```", "```cs\n    }\n```", "```cs\n}\n```", "```cs\n         // Summary:\n```", "```cs\n        //     Gets or sets a configuration value.\n```", "```cs\n        // Parameters:\n```", "```cs\n        //   key:\n```", "```cs\n        //     The configuration key.\n```", "```cs\n        // Returns:\n```", "```cs\n        //     The configuration value.\n```", "```cs\n        string this[string key] { get; set; }\n```", "```cs\n        // Summary:\n```", "```cs\n        //Gets the immediate descendant configuration sub-\n```", "```cs\n        //sections.\n```", "```cs\n        // Returns:\n```", "```cs\n        //     The configuration sub-sections.\n```", "```cs\n        IEnumerable<IConfigurationSection> GetChildren();\n```", "```cs\n        // Summary:\n```", "```cs\n        //     Gets a configuration sub-section with the \n```", "```cs\n        //     specified key.\n```", "```cs\n        // Parameters:\n```", "```cs\n        //   key:\n```", "```cs\n        //     The key of the configuration section.\n```", "```cs\n        // Returns:\n```", "```cs\n        //The Microsoft.Extensions.Configuration\n```", "```cs\n        //.IConfigurationSection.\n```", "```cs\n        // Remarks:\n```", "```cs\n        //     This method will never return null. If \n```", "```cs\n         // no matching sub-section is found with\n```", "```cs\n        //     the specified key, an empty\n```", "```cs\n        //Microsoft.Extensions.Configuration.IConfiguration\n```", "```cs\n        //     Section will be returned.\n```", "```cs\n        IConfigurationSection GetSection(string key);\n```", "```cs\nbuilder.Configuration[\"ApplicationInsights:InstrumentationKey\"];\n```", "```cs\nbuilder.Configuration[\"ApiConfigs:Service 1:Name\"];\n```", "```cs\npublic class ApiConfig\n```", "```cs\n{      \n```", "```cs\n    public string Name { get; set; }\n```", "```cs\n    public string BaseUri { get; set; }\n```", "```cs\n    public int HttpTimeOutInSeconds { get; set; }\n```", "```cs\n    public List<ApiUrl> ApiUrls { get; set; }\n```", "```cs\n}\n```", "```cs\npublic class ApiUrl\n```", "```cs\n{        \n```", "```cs\n    public string EndpointName { get; set; }      \n```", "```cs\n}\n```", "```cs\nList<ApiConfig> apiConfigs = new List<ApiConfig>();\n```", "```cs\nbuilder.Configuration.GetSection(\"ApiConfigs\").Bind(apiConfigs);\n```", "```cs\n    az group create --name \"{RESOURCE GROUP NAME}\" --location {LOCATION}\n    ```", "```cs\naz group create --name \"ConfigurationDemoVaultRG\" --location \"East US\"\n```", "```cs\n    az keyvault create --name {KEY VAULT NAME} --resource-group \"{RESOURCE GROUP NAME}\" --location {LOCATION}\n    ```", "```cs\naz keyvault create --name \"TestKeyVaultForConfig\" --resource-group \"ConfigurationDemoVaultRG\" --location \"East US\"\n```", "```cs\n    az keyvault secret set --vault-name {KEY VAULT NAME} --name \"SecretName\" --value \"SecretValue\"\n    ```", "```cs\naz keyvault secret set --vault-name \"TestKeyVaultForConfig\" --name \"TestKey\" --value \"TestValue\"\n```", "```cs\n    using TestConfiguration;\n    var builder = WebApplication.CreateBuilder(args);\n    // Add services to the container.\n    builder.Services.AddControllers();\n    //Removed code for brevity\n    builder.Configuration.AddAzureKeyVault($\"https://{builder.Configuration[\"KeyVault:Name\"]}.vault.azure.net/\",\n    builder.Configuration[\"KeyVault:AppClientId\"],\n    builder.Configuration[\"KeyVault:AppClientSecret\"]);\n    var app = builder.Build();\n    //Removed code for brevity \n    ```", "```cs\n    [ApiController]\n    [Route(\"[controller]\")]\n    public class WeatherForecastController : ControllerBase\n    {\n        private readonly ILogger<WeatherForecastController> _logger;\n        private readonly IConfiguration _configuration;\n        public WeatherForecastController(ILogger<Weather\n    ForecastController> logger, IConfiguration configuration)\n        {\n            _logger = logger;\n            _configuration = configuration;\n        }  \n        [HttpGet]\n        public IEnumerable<string> Get()\n        {\n            return new string[] { \"TestKey\", \n             _configuration[\"TestKey\"] };\n        }      \n    }\n    ```", "```cs\n//Removed code for brevity\n```", "```cs\nbuilder.Configuration.AddJsonFile(\"AdditionalConfig.json\",\n```", "```cs\n                optional: true,\n```", "```cs\n                reloadOnChange: true); \n```", "```cs\n//Removed code for brevity               \n```", "```cs\n{  \"TestKeyFromAdditionalConfigJSON\":\"TestValueFromAdditional ConfigJSON\"}\n```", "```cs\n//Removed code for brevity  \n```", "```cs\n    [HttpGet]\n```", "```cs\n    public Ienumerable<string> Get()\n```", "```cs\n    {\n```", "```cs\n        return new string[] { \n```", "```cs\n\" TestKeyFromAdditionalConfigJSON\", \n```", "```cs\n          _configuration[\"TestKeyFromAdditionalConfigJSON\"] };\n```", "```cs\n    }      \n```", "```cs\n//Removed code for brevity\n```", "```cs\n//Removed code for brevity\n```", "```cs\nbuilder.Configuration.AddXmlFile(\"AdditionalXMLConfig.xml\",\n```", "```cs\n                optional: true,\n```", "```cs\n                reloadOnChange: true);\n```", "```cs\n//Removed code for brevity\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n```", "```cs\n<configuration>\n```", "```cs\n  <TestKeyFromAdditionalXMLConfig>TestValueFrom\n```", "```cs\nAdditionalXMLConfig</TestKeyFromAdditionalXMLConfig>\n```", "```cs\n</configuration>\n```", "```cs\n   [HttpGet]\n```", "```cs\n    public Ienumerable<string> Get()\n```", "```cs\n    {\n```", "```cs\n        return new string[] { \n```", "```cs\n\"TestKeyFromAdditionalXMLConfig\", \n```", "```cs\n          _configuration[\"TestKeyFromAdditionalXMLConfig\"] };\n```", "```cs\n    }      \n```", "```cs\npublic class SqlConfigurationSource : IConfigurationSource\n```", "```cs\n    {\n```", "```cs\n        public string ConnectionString { get; set; }\n```", "```cs\n        public string Query { get; set; }\n```", "```cs\n        public SqlConfigurationSource(string\n```", "```cs\n          connectionString, string query)\n```", "```cs\n        {\n```", "```cs\n            ConnectionString = connectionString;\n```", "```cs\n            Query = query;\n```", "```cs\n        }\n```", "```cs\n        public IConfigurationProvider\n```", "```cs\n         Build(IConfigurationBuilder builder)\n```", "```cs\n        {\n```", "```cs\n            return new SqlConfigurationProvider(this);\n```", "```cs\n        }\n```", "```cs\n    }  \n```", "```cs\npublic class SqlConfigurationProvider : ConfigurationProvider\n```", "```cs\n    {\n```", "```cs\n        public SqlConfigurationSource Source { get; }\n```", "```cs\n        public SqlConfigurationProvider\n```", "```cs\n         (SqlConfigurationSource source)\n```", "```cs\n        {\n```", "```cs\n            Source = source;\n```", "```cs\n        }\n```", "```cs\n        public override void Load()\n```", "```cs\n        {\n```", "```cs\n            try\n```", "```cs\n            {    \n```", "```cs\n                // create a connection object  \n```", "```cs\n                SqlConnection sqlConnection = new\n```", "```cs\n                 SqlConnection(Source.ConnectionString);\n```", "```cs\n                // Create a command object  \n```", "```cs\n                SqlCommand sqlCommand = new\n```", "```cs\n                 SqlCommand(Source.Query, sqlConnection);\n```", "```cs\n                sqlConnection.Open();\n```", "```cs\n                // Call ExecuteReader to return a \n```", "```cs\n                // DataReader  \n```", "```cs\n                SqlDataReader salDataReader =\n```", "```cs\n                 sqlCommand.ExecuteReader();\n```", "```cs\n                while (salDataReader.Read())\n```", "```cs\n                {\n```", "```cs\n                    Data.Add(salDataReader.GetString(0),\n```", "```cs\n                     salDataReader.GetString(1));\n```", "```cs\n                }\n```", "```cs\n                salDataReader.Close();\n```", "```cs\n                sqlCommand.Dispose();\n```", "```cs\n                sqlConnection.Close();\n```", "```cs\n            }            \n```", "```cs\n        }\n```", "```cs\n    }\n```", "```cs\npublic static class SqlConfigurationExtensions\n```", "```cs\n    {\n```", "```cs\n        public static IConfigurationBuilder\n```", "```cs\n         AddSql(this IConfigurationBuilder\n```", "```cs\n         configuration, string connectionString,\n```", "```cs\n         string query)\n```", "```cs\n        {\n```", "```cs\n            configuration.Add(new\n```", "```cs\n             SqlConfigurationSource(connectionString,\n```", "```cs\n             query));\n```", "```cs\n            return configuration;\n```", "```cs\n        }\n```", "```cs\n    }\n```", "```cs\nbuilder.Configuration.AddSql(\"Connectionstring\",\"Query\"); \n```", "```cs\n    [HttpGet]\n```", "```cs\n    public IEnumerable<string> Get()\n```", "```cs\n    {\n```", "```cs\n        return new string[] { \"TestSqlKey\", \n```", "```cs\n         _configuration[\"TestSqlKey\"] };\n```", "```cs\n    }      \n```", "```cs\n}\n```"]