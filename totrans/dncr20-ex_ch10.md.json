["```cs\nPublic int sum(x)\n{\nx = x + 20 ;\nreturn x;\n}\n```", "```cs\nPublic int sum(x)\n{\nreturn x + 20 ;\n}\n```", "```cs\nopen System\nlet sum y = x+x\nlet divide y = x/x\nLet ComplexCalc func = (func 2)\nPrintfn(ComplexCalc sum) // 4\nPrintfn(ComplexCalc divide) //1\n```", "```cs\nPublic int sum(int x)\n{\nreturn x+x; \n}\n```", "```cs\nPublic void verifyData()\n{\n  Employee emp = OrgQueue.getEmp();\n  If(emp != null)\n  {\n    ProcessForm(emp);\n  }\n}\n```", "```cs\nlet rec summation x = if x = 0 then 0 else x + summation(x-1)\nprintfn \"The summation of first 10 integers is- %A\" (summation 10)\n```", "```cs\nint sum = (a,b) => a+b\nint sumcurry = (a) =>(b) => a+b\nsumcurry(5)(6) // 11\nint sum8 = sumcurry(8) // b=> 8+b\nsum8(5) // 13\n```", "```cs\nint add = x=> y=> x+y\nint addTen = add(10)\naddTen(5) // this will return 15\n\n```", "```cs\ntype [access-modifier] type-name [type-params] [access-modifier] (parameter-list) [ as identifier ] =\n[ class ]\n[ inherit base-type-name(base-constructor-args) ]\n[ let-bindings ]\n[ do-bindings ]\nmember-list\n [ end ]\n\n// Mutually recursive class definitions:\n\ntype [access-modifier] type-name1 ...\nand [access-modifier] type-name2 ...\n```", "```cs\ntype StudentName(firstName,lastName) = \nmember this.FirstName = firstName\nmember this.LastName = lastName\n```", "```cs\ntype StudentName(firstName:string,lastName:string) = \nmember this.FirstName = firstName\nmember this.LastName = lastName\n```", "```cs\nnew (argument-list) = constructor-body\n```", "```cs\ntype StudentDetail(x: int, y: int) =\ndo printfn \"%d %d\" x y\nnew() = StudentDetail(0, 0)\n```", "```cs\ntype Student(name) as self =\n    let data = name\n    do\n        self.PrintMessage()\n        member this.PrintMessage() = printf \" Student name is %s\" data\n```", "```cs\ntype MyGenericClassExample<'a> (x: 'a) =\n   do printfn \"%A\" x\n```", "```cs\nlet g1 = MyGenericClassExample( seq { for i in 1 .. 10 -> (i, i*i) } )\n```", "```cs\n// Property that has both get and set defined.\n\n[ attributes ]\n[ static ] member [accessibility-modifier] [self-  identifier.]PropertyName\n    with [accessibility-modifier] get() =\n    get-function-body\n    and [accessibility-modifier] set parameter =\n    set-function-body\n\n// Alternative syntax for a property that has get and set.\n\n[ attributes-for-get ]\n[ static ] member [accessibility-modifier-for-get] [self-identifier.]PropertyName =\n    get-function-body\n    [ attributes-for-set ]\n    [ static ] member [accessibility-modifier-for-set] [self-   \n    identifier.]PropertyName\n    with set parameter =\n    set-function-body\n\n```", "```cs\n// A read-only property.\nmember this.MyReadOnlyProperty = myInternalValue\n// A write-only property.\nmember this.MyWriteOnlyProperty with set (value) = myInternalValue <- value\n// A read-write property.\nmember this.MyReadWriteProperty\n    with get () = myInternalValue\n    and set (value) = myInternalValue <- value\n```", "```cs\ntype MyClassExample(propExample1 : int) =\nmember val propExample1 = property1\nmember val propExample2 = \".Net Core 2.0\" with get, set\n```", "```cs\nstatic member MyStaticProperty\n    with get() = myStaticValue\n    and set(value) = myStaticValue <- value\n```", "```cs\n// Abstract property in abstract class.\n// The property is an int type that has a get and\n// set method\n[<AbstractClass>]\ntype AbstractBase() =\n   abstract Property1 : int with get, set\n\n// Implementation of the abstract property\ntype Derived1() =\n   inherit AbstractBase()\n   let mutable value = 10\n   override this.Property1 with get() = value and set(v : int) = value \n   <- v\n\n// A type with a \"virtual\" property.\ntype Base1() =\n   let mutable value = 10\n   abstract Property1 : int with get, set\n   default this.Property1 with get() = value and set(v : int) = value \n   <- v\n\n// A derived type that overrides the virtual property\ntype Derived2() =\n   inherit Base1()\n   let mutable value2 = 11\n   override this.Property1 with get() = value2 and set(v) = value2 <- v\n```", "```cs\ntype MyDerived(...) = inherit MyBase(...) \n```", "```cs\ntype MyClassExampleBase() =\n   let mutable x = 0\n   abstract member virtualMethodExample : int -> int\n   default u. virtualMethodExample (a : int) = x <- x + a; x\n\ntype MyClassExampleDerived() =\n   inherit MyClassExampleBase ()\n   override u. virtualMethodExample (a: int) = a + 1\n```", "```cs\ntype MyClassBase2(x: int) =\n   let mutable z = x * x\n   do for i in 1..z do printf \"%d \" i\n\ntype MyClassDerived2(y: int) =\n   inherit MyClassBase2(y * 2)\n   do for i in 1..y do printf \"%d \" i\n```", "```cs\ntype BaseClass =\n    val string1 : string\n    new (str) = { string1 = str }\n    new () = { string1 = \"\" }\n\ntype DerivedClass =\n    inherit BaseClass\n\n    val string2 : string\n    new (str1, str2) = { inherit BaseClass(str1); string2 = str2 }\n    new (str2) = { inherit BaseClass(); string2 = str2 }\n\nlet obj1 = DerivedClass(\"A\", \"B\")\nlet obj2 = DerivedClass(\"A\")\n```", "```cs\n// Normal F# function\nlet addNumbers a b = a+b\n// Evaluating values\nlet sumResult = addNumbers 5 6 \n// Lambda function and evaluating values\nlet sumResult = (fun (a:int) (b:int) -> a+b) 5 6\n// Both the function will return value sumResult = 11\n```", "```cs\nlet tuple1 = 1,2,3\n\n// assigning values to variables , v1=1, v2= 2, v3=3\n\nlet v1,v2,v3 = tuple1\n\n// if we want to assign only two values out of three, use “_” to skip the value. Assigned values: v1=1, //v3=3\n\nlet v1,_,v3 = tuple\n```", "```cs\nlet empty = [] // This is an empty list of untyped type or we can say     //generic type. Here type is: 'a list\nlet intList = [10;20;30;40] // this is an integer type list\n```", "```cs\n// prepend item x into a list\nlet addItem xs x = x :: xs \nlet newIntList = addItem intList 50 // add item 50 in above list //“intlist”, final result would be- [50;10;20;30;40]\n\n// using @ to append two list\nprintfn \"%A\" ([\"hi\"; \"team\"] @ [\"how\";\"are\";\"you\"])\n// result – [\"hi\"; \"team\"; \"how\";\"are\";\"you\"]\n```", "```cs\nprintfn \"%A\" newIntList.Head\nprintfn \"%A\" newIntList.Tail\nprintfn \"%A\" newIntList.Tail.Tail.Head\nlet rec listLength (l: 'a list) =\n    if l.IsEmpty then 0\n        else 1 + (listLength l.Tail)\nprintfn \"%d\" (listLength newIntList)\n```", "```cs\ntype Box = {width: float ; height:int }\nlet giftbox = {width = 6.2 ; height = 3 }\n```", "```cs\nlet giftbox = {Box.width = 6.2 ; Box.height = 3 }\n```", "```cs\nlet giftbox : Box = {width = 6.2 ; height = 3 }\n```", "```cs\ntype IExampleInterface = \n    abstract member IntValue: int with get\n    abstract member HelloString: unit -> string\n\ntype PrintValues() = \n    interface IExampleInterface with\n        member x.IntValue = 15\n        member x.HelloString() = sprintf \"Hello friends %d\" (x :> \n        IExampleInterface).IntValue\n\nlet example = \n    let varValue = PrintValues() :> IExampleInterface\n    { new IExampleInterface with\n        member x.IntValue = varValue.IntValue\n        member x.HelloString() = sprintf \"<b>%s</b>\" \n        (varValue.HelloString()) }\n\nprintfn \"%A\" (example.HelloString())\n```", "```cs\nexception MyCustomExceptionExample of int * string\n   raise (MyCustomExceptionExample(10, \"Error!\"))\n```", "```cs\nexception MyCustomExceptionExample of int * string\n with\n        override x.Message = \n            let (MyCustomExceptionExample(i, s)) = upcast x\n            sprintf \"Int: %d Str: %s\" i s\n\n raise (MyCustomExceptionExample(20, \"MyCustomErrorMessage!\"))\n```", "```cs\nfailwith \"An error has occurred\"\n```", "```cs\nlet rec factorial x = \n    if x < 0 then invalidArg \"x\" \"Value should be greater than zero\"\n    match x with \n    | 0 -> 1\n    | _ -> x * (factorial (x - 1))\n```", "```cs\nopen FSharp.Data\n\n  type Books = CsvProvider<\"..\\ExampleCSV.csv\">\n  let Saleitems = Books.Load(\"..\\ExampleCSV-2.csv\")\n  let firstRow = Saleitems.Rows |> Seq.head\n```", "```cs\nInstall -Package Newtonsoft.Json\n```", "```cs\nopen FSharp.Data\nlet resultsDocument = HtmlDocument.Load(\"http://www.google.co.in/search?q=.NET Core\")\n```", "```cs\nlet x =\n    resultsDocument.Descendants [\"a\"]\n    |> Seq.choose (fun x ->\n           x.TryGetAttribute(\"href\")\n           |> Option.map (fun a -> x.InnerText(), a.Value())\n    )\nlet Z =\n    x\n    |> Seq.filter (fun (name, url) -> \n                    name <> \"Cached\" && name <> \"Similar\" &&  \n                    url.StartsWith(\"/url?\"))\n    |> Seq.map (fun (name, url) -> name, url.Substring(0, \n    url.IndexOf(\"&sa=\")).Replace(\"/url?q=\", \"\"))\n    |> Seq.toArray\n```", "```cs\nopen FSharp.Data\nlet empInfo =\n  JsonValue.Parse(\"\"\" \n    { \"name\": \"Neha\", \"Company\": \"Microsoft\",\"Projects\": [ \"Proj1\",    \n    \"Proj2\" ] } \"\"\")\n```", "```cs\nopen FSharp.Data\nHttp.RequestString(\"http://rishabhverma.net \")\n\n// Download web site asynchronously\nasync { let! html = Http.AsyncRequestString(\"http://rishabhverma.net \")\n        printfn \"%d\" html.Length }\n        |> Async.Start\n\n// Verifying the response:\nlet response = Http.Request(\"http://rishabhverma.net/algorithmics-science-and-art/\", silentHttpErrors = true)\n\n// Examine information about the response\nresponse.Headers\nresponse.Cookies\nresponse.ResponseUrl\nresponse.StatusCode\n```", "```cs\nPM> Install-Package FSharp.Data.SqlClient\n```", "```cs\nPM> Install-Package SQLProvider\n```", "```cs\ntype dbSchemaExample = SqlDataConnection<\"Data Source=SERVER\\INSTANCENAME;Initial Catalog=MyDatabase;Integrated Security=SSPI;\">\n\nlet db = dbSchemaExample.GetDataContext()\n```", "```cs\ntype private EntityConnectionExample = SqlEntityConnection<ConnectionString=\"Server=SERVER\\InstanceName;Initial Catalog=microsoft;Integrated Security=SSPI;MultipleActiveResultSets=true\",Pluralize = true>\n```", "```cs\nopen FSharp.Data\nopen System.Data.SqlClient\n\ntype SqlQueryExample =\n    {\n        Query : string\n        Parameters : (string * obj) list\n    }\n```", "```cs\nmodule QueryHelpersForFsharp =\n\n    let param name value =\n        ( name, value )\n\n    let sqlFunction query parameters =\n        {\n            Query = query\n            Parameters = parameters\n        }\n```", "```cs\nopen QueryHelpersForFsharp\n\nlet employeeDetail empId empName =\n    sqlFunction\n        \"\"\"\n        SELECT empId, empName\n          FROM Employee\n        OFFSET @EmpId ROWS\n         FETCH\n          NEXT @EmpName ROWS ONLY\n        ;\n        \"\"\"\n        [\n            param \"EmpId\" empId\n            param \"EmpName\" empName\n\ntype employeeDetail =\n    {\n        EmpId : int\n        EmpName : string\n    }\n\nlet query = employeeDetail request.EmpId request.EmpName\nlet EmployeeAsync = Sql.query<employeeDetail> connectString query\n```", "```cs\nopen FSharp.Data\nopen System.Data.SqlClient\nopen System\n\ntype Employee() =\n    member val Id = 0 with get,set\n\n    member val EmpId = Guid.Empty with get,set\n    member val JoiningDate = DateTimeOffset.MinValue with get,set\n    member val LeftOrganizationOn = DateTimeOffset.MinValue with  \n    get,set\n    member val Name = string with get,set\n    member val ReportingTo = string with get,set\n    member val Salary = 0.0m with get,set\n```", "```cs\ntype changeQueryObject =\n{\n    query : string;\n    parameters : Sql.Parameter list;\n}\nlet private insert (employee : Employee ) =\n{\n    query = \"INSERT INTO \\\"intersect\\\".\\\"Employee\\\"(\n                         empId, joiningDate, leftOrganizationOn, name,   \n                         reportingTo, salary)\n             VALUES (@empId, @joiningDate, @leftOrganizationOn, @name,     \n             @reportingTo, @salary);\n             RETURNING id;\";\n    parameters = [\n                 P(\"@empId\", employee.EmpId);\n                 P(\"@joiningDate\", employee.JoiningDate);\n                 P(\"@leftOrganizationOn\", employee.LeftOrganizationOn);\n                 P(\"@name\", employee.Name);\n                 P(\"@reportingTo\", employee.ReportingTo);\n                 P(\"@salary\", employee.Salary);\n             ]\n}\n```", "```cs\nlet executeScalar (queryObj : changeQueryObject) = sql.ExecScalar queryObj.query queryObj.parameters\n```"]