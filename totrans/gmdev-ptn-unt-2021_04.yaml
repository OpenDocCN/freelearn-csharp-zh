- en: A Short Primer to Programming in Unity
  prefs: []
  type: TYPE_NORMAL
- en: This chapter is a short primer to help you get familiar with advanced C# language
    and Unity engine features. I'm not going to attempt to explain in depth any of
    the subject matter presented here because it's beyond the scope of this book.
    Still, I will at least introduce you to some core concepts to avoid confusion
    when they are referenced in the upcoming chapters. I encourage those that have
    advanced knowledge of C# and Unity programming to skip this chapter. But I recommend
    beginners and intermediate developers take the time to review the content of this
    chapter to get a general idea of the language and engine features we will use
    to implement and design our game systems.
  prefs: []
  type: TYPE_NORMAL
- en: In all cases, complete mastery over C# and Unity is not needed to comprehend
    this book, just general awareness and familiarity with some advanced critical
    concepts.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will go through the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What you should already know
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: C# language features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unity engine features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code showcased in this chapter is for educational purposes only. It has
    not been optimized and is not meant to be used in production code.
  prefs: []
  type: TYPE_NORMAL
- en: What you should already know
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, I'm listing some core C# language and Unity engine features
    that you should already be familiar with before continuing to more advanced parts
    of this book.
  prefs: []
  type: TYPE_NORMAL
- en: '**The following are some core features of C#**:'
  prefs: []
  type: TYPE_NORMAL
- en: Familiarity with class access modifiers such as public and private
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fundamental knowledge of basic primitive data types (int, string, bool, float,
    and arrays)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A conceptual understanding of inheritance and the relation between a base class
    and a derived class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The following are some core features of Unity**:'
  prefs: []
  type: TYPE_NORMAL
- en: A basic understanding of how to write a `MonoBehaviour` script and attach it
    to a `GameObject` as a component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ability to create a new Unity Scene from scratch and manipulate GameObjects
    inside the editor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Familiarity with Unity's basic event functions (`Awake`, `Start`, `Update`)
    and their sequence of execution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are not familiar with the concepts listed previously, I would recommend
    reading the books and documentation that are listed in the *Further reading* section
    of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: C# language features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Languages features such as events and delegates might be too advanced for beginners,
    so if you consider yourself in that category, don't worry; you can still enjoy
    this book. Just read the beginner-level chapters such as the ones that explain
    patterns such as Singleton, State, Facade, and Adapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following C# advanced language features are fundamental to the optimal
    implementation of some design patterns that we will be implementing in the upcoming
    chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Static**: Methods and members of a class with the `static` keyword can be
    accessed directly with its name and without initializing an instance. Static methods
    and members are helpful because they are easily accessible from anywhere in your
    code. The following example showcases a class that uses the keyword to establish
    a globally accessible event bus:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Events**: An event permits an object that acts as a publisher to send out
    a signal that other objects can receive; these objects that listen for a particular
    event are called subscribers. Events are useful when you want to build an event-driven
    architecture. The following is an example of a class that publishes events:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Delegates**: The concept behind delegates is simple when you understand their
    underlying low-level mechanism. A high-level definition of delegates is that they
    hold references to functions. But this is a very abstract definition of what delegates
    actually do behind the scenes. They''re function pointers, which means that they
    hold the memory address to other functions. So, we could visualize them as an
    address book that contains a list of locations of functions. That is why a delegate
    can hold multiple of them and call them all at once. The following is an example
    of a class that subscribes to events triggered by a publisher class by assigning
    specific local functions to the publisher''s delegates:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Generics**: A relevant C# feature that permits the deferred specification
    of a type until the class is declared and instantiated by the client. When we
    say a class is generic, it doesn''t have a defined object type. The following
    is an example of a generic class and can act as a template:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Serialization**:Serialization is the process of converting an instance of
    an object into a binary or textual form. This mechanism permits us to preserve
    the state of an object in a file. The following is an example of a function that
    serializes an instance of an object and saves it as a file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: C# is a programming language with a lot of depth so it would be impossible for
    me to explain each of its core features within the scope of this book. Those presented
    in this section of this book are very useful and will help us implement the game
    systems and patterns described in the upcoming chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Unity engine features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Unity is a fully featured engine, including a comprehensive scripting API,
    an animation system, and many additional features for game development. We can''t
    cover them all in this book, so I will only list the core Unity components that
    we will be using in the upcoming design pattern chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Prefabs**: A prefab is a prefabricated container of assembled GameObjects
    and components. For example, you can have individual prefabs for each type of
    vehicle in your game and dynamically load them in your scene. Prefabs permit you
    to construct and organize reusable game entities as building blocks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unity Events and Actions**: Unity has a native event system; it''s very similar
    to the C# event system but with extra engine-specific features, such as the ability
    to view and configure them in the Inspector.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ScriptableObjects**: A class that derives from the `ScriptableObject` base
    class can act as a data container. The other native Unity base class, named MonoBehaviour,
    is used to implement behaviors. Therefore, it''s recommended to use MonoBehaviours
    to contain your logic and ScriptableObjects to contain your data. An instance
    of a `ScriptableObject` can be saved as an asset and is often used for authoring
    workflows. It permits non-programmers to create new variations of a specific type
    of entity without a single line of code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is an example of a simple `ScriptableObject` that permits creating
    new configurable `Sword` instances:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Coroutines**: The concept of coroutines is not limited to Unity but is an
    essential tool of the Unity API. The typical behavior of a function is to execute
    itself from start to finish. But a coroutine is a function with the extra ability
    of waiting, timing, and even pausing its execution process. These additional features
    permit us to implement complex behaviors that are not easy to do with conventional
    functions. Coroutines are similar to threads but provide concurrency instead of
    parallelism. The following code example showcases the implementation of a countdown
    timer using coroutines:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, Unity has some rich but straightforward features that permit
    us to implement systems and organize data. We can't cover in depth each of Unity's
    core features because it's beyond the intended scope of the book. If you feel
    that you need more information about the engine before moving along, I recommend
    reviewing the material linked under the *Further reading* section.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is intended to be used as a primer to set up a shared knowledge
    base before moving along to the book's hands-on section. But mastery over the
    features presented in the previous sections is not required to start using design
    patterns in Unity. We will review some of them again in more detail in upcoming
    chapters, this time in a practical context.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to review our first pattern, the infamous
    Singleton. We will use it to implement a Game Manager class responsible for initializing
    the game.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For more information, you can refer to the following material:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Learning C# by Developing Games with Unity 2020 *by Harrison Ferrone'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Unity User Manual* by Unity Technologies: [https://docs.unity3d.com/Manual/index.html](https://docs.unity3d.com/2021.1/Documentation/Manual/UnityManual.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
