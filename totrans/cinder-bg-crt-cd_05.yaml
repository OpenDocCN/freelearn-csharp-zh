- en: Chapter 5. Making Use of Images – Loading and Displaying
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 5 章：利用图片 – 加载和显示
- en: 'In this chapter we will learn the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下内容：
- en: How to load an image
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何加载图片
- en: How to display it on the screen
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在屏幕上显示它
- en: About general asset handling in Cinder
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 Cinder 中的通用资产处理
- en: You might make use of photographs, illustrations, or different image databases
    in your applications. To do so, you will need a way to load an image into your
    application and most importantly, to display it on the screen.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的应用程序中使用照片、插图或不同的图像数据库。为此，你需要一种将图片加载到你的应用程序中的方法，最重要的是，在屏幕上显示它。
- en: In this chapter we will learn the basics of Cinder file loading features and
    learn to load an image from the Web and local storage.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习 Cinder 文件加载功能的基础，并学习从网络和本地存储加载图片。
- en: Loading an image
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载图片
- en: Open TinderBox and create a new project with the name `BasicImages`. Open `xcode/BasicImages.xcodeproj`
    project file. Windows users should open the project file `vc10\BasicImages.sln`.
    Open `BasicImagesApp.cpp` in the editor.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 TinderBox 并创建一个名为 `BasicImages` 的新项目。打开 `xcode/BasicImages.xcodeproj` 项目文件。Windows
    用户应打开项目文件 `vc10\BasicImages.sln`。在编辑器中打开 `BasicImagesApp.cpp` 文件。
- en: First we are going to include some header files that declare functionality that
    is required to perform the things we want to get done.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将包含一些头文件，这些头文件声明了执行我们想要完成的事情所需的功能。
- en: 'Navigate to a point in the code where there are `#include` statements and add
    the following lines of code just after `#include "cinder/gl/gl.h"`:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到代码中包含 `#include` 语句的位置，并在 `#include "cinder/gl/gl.h"` 之后添加以下代码行：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The first include statement loads code header that is responsible for the Cinder
    image input/output functionality, the second code header include allows us to
    use OpenGL textures for drawing images on the screen.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个包含语句加载了负责 Cinder 图像输入/输出功能的代码头文件，第二个代码头文件包含语句允许我们使用 OpenGL 纹理在屏幕上绘制图片。
- en: 'Next we need to declare a variable of type `gl::Texture` that will contain
    the actual image data. You can chose your own name for that, but I will call it
    `imgTexture`:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要声明一个类型为 `gl::Texture` 的变量，它将包含实际的图像数据。你可以为它选择自己的名字，但我会称它为 `imgTexture`：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Add the highlighted line of code just after `void draw();` in the `BasicImagesApp`
    class declaration:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `BasicImagesApp` 类声明中 `void draw();` 之后添加高亮显示的代码行：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Next, we need to select an image to be loaded into the application. So we are
    going to use some random image from the internet as it is the fastest way to get
    a visible image on the screen if you have an internet connection.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要选择一个要加载到应用程序中的图片。因此，我们将使用互联网上的某些随机图片，因为如果你有网络连接，这是在屏幕上快速获取可见图片的最快方式。
- en: Note
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Before compiling and running the following example, try to open this URL [http://rijnieks.lv/projects/cinder_begin_creative_coding/images/image.png](http://rijnieks.lv/projects/cinder_begin_creative_coding/images/image.png)
    in your browser. If you do not see an image, please find any other `*.png` or
    `*.jpg` image on the internet.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在编译和运行以下示例之前，请尝试在你的浏览器中打开此 URL [http://rijnieks.lv/projects/cinder_begin_creative_coding/images/image.png](http://rijnieks.lv/projects/cinder_begin_creative_coding/images/image.png)。如果你看不到图片，请在互联网上找到任何其他
    `*.png` 或 `*.jpg` 图片。
- en: 'Add the following highlighted line of code in the setup method declaration:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置方法声明中添加以下高亮显示的代码行：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The reason why we load it in the `setup()` is that we need to load the image
    just once. As loading images from the net takes some time, we don't want to delay
    our `draw()` or `update()` operations because the image is still loading. Cinder
    is about speed and we don't want to sacrifice it.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 `setup()` 中加载它的原因是因为我们只需要加载一次图片。由于从网络上加载图片需要一些时间，我们不希望因为图片还在加载而延迟我们的 `draw()`
    或 `update()` 操作。Cinder 专注于速度，我们不想牺牲它。
- en: 'Now we need to add some code that will take care of displaying the image. Go
    to the implementation of the `draw()` method and add this code just after the
    `gl::clear( Color( 0, 0, 0 ) );` function:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要添加一些代码来处理图片的显示。转到 `draw()` 方法的实现，并在 `gl::clear( Color( 0, 0, 0 ) );`
    函数之后添加以下代码：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here we tell Cinder that we want to draw our `imgTexture` within the application
    window bounds (the image will be stretched so its width equals the window's width
    and its height equals the window's height). Try to compile and run the application.
    After a short delay an image should appear. If you try to resize the window, you
    can see that the image is being resized with it.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们告诉Cinder我们想在应用程序窗口边界内绘制我们的`imgTexture`（图片将被拉伸，使其宽度等于窗口的宽度，高度等于窗口的高度）。尝试编译并运行应用程序。经过短暂的延迟后，应该会出现一个图片。如果你尝试调整窗口大小，你可以看到图片也在调整大小。
- en: 'The member function `getWindowBounds()` returns an `Area` object and instead
    of using this function we can define the drawing area by ourselves. Try this:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 成员函数`getWindowBounds()`返回一个`Area`对象，我们不需要使用这个函数，可以自己定义绘图区域。尝试以下操作：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If you try to resize the window now, you will see that it does not affect the
    image as now it's display position and size is hardcoded in `Area(100,100,540,380)`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在尝试调整窗口大小，你会看到它不会影响图片，因为现在它的显示位置和大小是硬编码在`Area(100,100,540,380)`中的。
- en: Handling assets
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理资产
- en: Now let's see what we need to create an application that will be used on a computer
    without an internet connection. We have to store our image somewhere on the computer.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看我们需要创建一个将在没有互联网连接的计算机上使用的应用程序需要什么。我们必须在计算机的某个地方存储我们的图片。
- en: Cinder has a predefined way of handling images and similar assets. If you created
    your project with TinderBox, you may have noticed that you have an **assets**
    directory in your project folder. If not, create one.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Cinder有预定义的处理图片和类似资产的方式。如果你使用TinderBox创建项目，你可能已经注意到在你的项目文件夹中有一个**资产**目录。如果没有，创建一个。
- en: '![Handling assets](img/9564_05_01.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![处理资产](img/9564_05_01.jpg)'
- en: 'Now copy your image file into the assets directory and change the `loadImage`
    code in the `setup()` implementation to the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将你的图片文件复制到资产目录中，并将`setup()`实现中的`loadImage`代码更改为以下内容：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As you can see we changed `loadUrl()` to `loadAsset()` and it actually seems
    simpler than the `loadUrl( Url( "http://..." ) )` approach. It's just that we
    do need to take care of our assets by ourselves.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们将`loadUrl()`更改为`loadAsset()`，实际上它似乎比`loadUrl(Url("http://..."))`方法简单。只是我们确实需要自己处理我们的资产。
- en: 'Now try to move the assets directory one level up in the filesystem so it is
    next to the `BasicImages` folder as shown in the following screenshot:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在尝试将资产目录在文件系统中向上移动一个级别，使其紧邻`BasicImages`文件夹，如下截图所示：
- en: '![Handling assets](img/9564_05_02.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![处理资产](img/9564_05_02.jpg)'
- en: Try to compile and run our project and you will be surprised that the image
    still loads! Some people may think that this is the magic of caching or something
    similar but no, Cinder just automatically searches for the `assets` directory
    up to five levels above the executable. So you can choose at what level you want
    to store your assets, but in a way the default way may be the best as it allows
    you to use the same assets for your Mac OS X and Windows projects. If you are
    working on more than one project with the same assets, then you may move your
    `assets` directory to the projects folder level as we just did.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试编译并运行我们的项目，你会惊讶地发现图片仍然可以加载！有些人可能会认为这是缓存的魔法或类似的东西，但不是，Cinder只是自动搜索可执行文件上方最多五级的`assets`目录。因此，你可以选择在哪个级别存储你的资产，但以某种方式，默认方式可能是最好的，因为它允许你为Mac
    OS X和Windows项目使用相同的资产。如果你在多个使用相同资产的项目上工作，那么你可以将你的`assets`目录移动到项目文件夹级别，就像我们刚才做的那样。
- en: 'There is one small detail to it—if your image uses alpha transparency, you
    might get strange results. To draw images with alpha transparency, we have to
    enable alpha blending before drawing the image and disable it after it is drawn
    by adding the following code snippet:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 其中有一点需要注意——如果你的图片使用alpha透明度，你可能会得到奇怪的结果。要绘制具有alpha透明度的图片，我们必须在绘制图片之前启用alpha混合，并在绘制后通过添加以下代码片段来禁用它：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'There is also a way of adding additional asset directories in case you have
    more than one group of projects using the same assets. The following line of code
    takes care of that:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有多个项目组使用相同的资产，也有一种方法添加额外的资产目录。以下代码行负责处理这一点：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Note that you have to use an absolute path here, so this is not too good for
    cross-platform projects. In windows you might write something similar to the following:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这里你必须使用绝对路径，所以这对跨平台项目来说不是很好。在Windows上，你可能写成以下类似的内容：
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If you use assets, you have to remember to deploy the assets directory with
    your application.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用资产，你必须记得将资产目录与应用程序一起部署。
- en: There is a way that tells you how to include assets inside the application,
    but this topic is a bit outside the scope of this book. You should search the
    Internet for "Cinder resource management" if you want to know more about it.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种方法可以告诉你如何在应用程序中包含资源，但这个主题略超出了本书的范围。如果你想了解更多关于这个话题的信息，你应该在互联网上搜索“Cinder资源管理”。
- en: 'The following is the full code of the application that we made in this chapter:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们在本章中制作的应用程序的完整代码：
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Not a lot of code!
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 代码并不多！
- en: Summary
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter we learned how to load an image from the Internet as well as
    from local storage, assign it to an OpenGL texture, and draw it on the screen.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何从互联网以及本地存储加载图像，将其分配给OpenGL纹理，并在屏幕上绘制它。
- en: We gained a basic understanding on how asset management works in Cinder and
    that we don't have to worry about the location of the `assets` directory as long
    as it is less than five levels up from our application.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对Cinder中资源管理的工作原理有了基本的了解，并且只要`assets`目录位于我们的应用程序上方不超过五级，我们就不必担心其位置。
- en: We also understood that we can use the `loadUrl()` and `loadAsset()` functions
    in the same way on Mac OS X and Windows.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还了解到，在Mac OS X和Windows上，我们可以以相同的方式使用`loadUrl()`和`loadAsset()`函数。
