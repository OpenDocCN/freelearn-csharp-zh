- en: Chapter 9. Playing and Manipulating Sounds
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章.播放和操作声音
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Matching the audio pitch to the animation speed
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将音频音调与动画速度匹配
- en: Simulating acoustic environments with Reverb Zones
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Reverb Zones 模拟声学环境
- en: Preventing an Audio Clip from restarting if it is already playing
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防止音频剪辑在播放时重新启动
- en: Waiting for audio to finish playing before auto-destructing an object
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在对象自动销毁前等待音频播放完成
- en: Adding volume control with Audio Mixers
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用音频混音器添加音量控制
- en: Making a dynamic soundtrack with Snapshots
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用快照制作动态配乐
- en: Balancing in-game audio with Ducking
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在游戏中平衡音频与 Ducking
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Sound is a very important part of the gaming experience. In fact, we can't stress
    enough how crucial it is to the player's immersion in a virtual environment. Just
    think of the engine running in your favorite racing game, the distant urban buzz
    in a simulator game, or the creeping noises in horror games. Think of how these
    sounds transport you *into* the game.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 声音是游戏体验中非常重要的一个部分。实际上，我们无法强调其对玩家沉浸于虚拟环境中的重要性。只需想想你在最喜欢的赛车游戏中引擎的轰鸣声，模拟游戏中的遥远城市嘈杂声，或者恐怖游戏中的缓慢声音。想想这些声音是如何将你*带入*游戏的。
- en: The big picture
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 整体概念
- en: Before getting on with the recipes, let's step back and have a quick review
    on how sound works on Unity 5.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续介绍食谱之前，让我们退后一步，快速回顾一下在 Unity 5 中声音是如何工作的。
- en: Audio files can be embedded into GameObjects through the **Audio Source** component.
    Unity supports **3D sounds**, which means that the location and distance between
    the audio sources and **Audio Listener** matter in the way the sound is perceived
    in terms of loudness and the left/right balance. This is unless the audio source
    is specified as **2D sound** (which is usually the case for the background soundtrack
    music).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 音频文件可以通过**音频源**组件嵌入到 GameObject 中。Unity 支持**3D声音**，这意味着音频源和**音频监听器**之间的位置和距离会影响声音在响度和左右平衡方面的感知。这除非音频源被指定为**2D声音**（这通常是背景配乐音乐的情况）。
- en: 'Although all sound is sent to the scene''s **Audio** **Listener** (a component
    that is usually attached to the **Main Camera**, and that shouldn''t be attached
    simultaneously on more than one object), Unity 5 brings a new player to the audio
    scene: the **Audio Mixer**. The Audio mixer radically changes the way in which
    sound elements can be experienced and worked with. It allows developers to mix
    and arrange audio pretty much in the same way that musicians and producers do
    in their **Digital Audio Workstations** (**D.A.W**), such as **GarageBand** or
    **ProTools**. It allows you to route audio source clips into specific channels
    that can have their volumes individually adjusted and processed by customized
    effects and filters. You can work with multiple Audio Mixers, send a mixer''s
    output to a parent mixer, and save mix preferences as **Snapshots**. Also, you
    can access mixer parameters from scripting. The following figure represents the
    main Unity 5 audio mixing concepts and their relationships:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管所有声音都发送到场景的**音频监听器**（通常附加到**主相机**上，并且不应同时附加到多个对象上），Unity 5 为音频场景带来了一个新的玩家：**音频混音器**。音频混音器彻底改变了声音元素可以体验和操作的方式。它允许开发者以与音乐家和制作人他们在他们的**数字音频工作站**（**D.A.W**）中（如**GarageBand**或**ProTools**）相同的方式混合和排列音频。它允许你将音频源剪辑路由到特定的通道，这些通道可以单独调整音量并经过定制效果和过滤器的处理。你可以使用多个音频混音器，将混音器的输出发送到父混音器，并将混音器偏好保存为**快照**。此外，你还可以从脚本中访问混音器参数。以下图表示了
    Unity 5 主要音频混音概念及其关系：
- en: '![The big picture](img/1362_09_01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![整体概念](img/1362_09_01.jpg)'
- en: Taking advantage of the new Audio Mixer feature in many example projects, this
    chapter is filled with recipes that will hopefully help you implement a better
    and more efficient sound design for your projects, augmenting the player's sense
    of immersion, transporting him or her into the game environment, and even improving
    the gameplay.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 利用许多示例项目中的新音频混音器功能，本章充满了希望帮助你实现更好的、更有效的声音设计，增强玩家的沉浸感，将他或她带入游戏环境，甚至改善游戏玩法。
- en: Matching the audio pitch to the animation speed
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将音频音调与动画速度匹配
- en: Many artifacts sound higher in pitch when accelerated and lower when slowed
    down. Car engines, fan coolers, Vinyl—a record player… the list goes on. If you
    want to simulate this kind of sound effect in an animated object that can have
    its speed changed dynamically, follow this recipe.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 许多在加速时音调更高，在减速时音调更低的文物。汽车引擎、风扇冷却器、黑胶唱片机……等等。如果您想在可以动态改变速度的动画对象中模拟这种音效，请遵循此食谱。
- en: Getting ready
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, you'll need an animated 3D object and an audio clip. Please
    use the files `animatedRocket.fbx` and `engineSound.wav`, available in the `1362_09_01`
    folder of the code bundle.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个食谱，您需要一个动画3D对象和一个音频剪辑。请使用代码包中`1362_09_01`文件夹中可用的文件`animatedRocket.fbx`和`engineSound.wav`。
- en: How to do it...
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To change the pitch of an audio clip according to the speed of an animated
    object, please follow these steps:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要根据动画对象的速率更改音频剪辑的音调，请按照以下步骤操作：
- en: Import the `animatedRocket.fbx` file into your **Project**.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`animatedRocket.fbx`文件导入到您的**项目**中。
- en: Select the `animatedRocket` file in the **Project** view. Then, from the **Inspector**
    view, check its **Import Settings**. Select **Animations**, then select the clip
    **Take 001**, and make sure to check the **Loop Time** option. Click on the **Apply**
    button, shown as follows, to save the changes:![How to do it...](img/1362_09_02.jpg)
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**项目**视图中选择`animatedRocket`文件。然后，从**检查器**视图中检查其**导入设置**。选择**动画**，然后选择剪辑**Take
    001**，并确保勾选**循环时间**选项。单击以下所示的**应用**按钮以保存更改：![如何操作...](img/1362_09_02.jpg)
- en: Tip
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The reason why we didn't need to check **Loop Pose** option is because our animation
    already loops in a seamless fashion. If it didn't, we could have checked that
    option to automatically create a seamless transition from the last to the first
    frame of the animation.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们不需要勾选**循环姿态**选项的原因是因为我们的动画已经无缝循环。如果它没有，我们可以勾选该选项以自动创建从动画最后一帧到第一帧的无缝过渡。
- en: Add the **animatedRocket** GameObject to the scene by dragging it from the **Project**
    view into the **Hierarchy** view.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过从**项目**视图拖动到**层次结构**视图，将**animatedRocket** GameObject添加到场景中。
- en: Import the `engineSound.wav` audio clip.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`engineSound.wav`音频剪辑。
- en: Select the **animatedRocket** GameObject. Then, drag **engineSound** from the
    **Project** view into the **Inspector** view, adding it as an **Audio Source**
    for that object.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**animatedRocket** GameObject。然后，从**项目**视图拖动**engineSound**到**检查器**视图，将其添加为该对象的**音频源**。
- en: In the **Audio Source** component of **animatedRocket**, check the box for the
    **Loop** option, as shown in the following screenshot:![How to do it...](img/1362_09_03.jpg)
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**animatedRocket**的**音频源**组件中，勾选**循环**选项，如图以下截图所示：![如何操作...](img/1362_09_03.jpg)
- en: We need to create a **Controller** for our object. In the **Project** view,
    click **Create** and select **Animator Controller**. Name it as `rocketlController`.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要为我们对象创建一个**控制器**。在**项目**视图中，点击**创建**并选择**动画控制器**。将其命名为`rocketlController`。
- en: Double-click on **rocketController** object to open the **Animator** window,
    as shown. Then, right-click on the gridded area and select the **Create State**
    | **Empty** option, from the contextual menu:![How to do it...](img/1362_09_04.jpg)
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击**rocketController**对象以打开**动画器**窗口，如图所示。然后，在网格区域右键单击并从上下文菜单中选择**创建状态** | **空**选项：![如何操作...](img/1362_09_04.jpg)
- en: Name the new state `spin` and set **Take 001** as its motion in the **Motion**
    field:![How to do it...](img/1362_09_05.jpg)
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新状态命名为`spin`，并在**运动**字段中将**Take 001**设置为它的动作：![如何操作...](img/1362_09_05.jpg)
- en: From the **Hierarchy** view, select **animatedRocket**. Then, in the **Animator**
    component (in the **Inspector** view), set **rocketController** as its **Controller**
    and make sure that the **Apply Root Motion** option is unchecked as shown:![How
    to do it...](img/1362_09_06.jpg)
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**层次结构**视图中选择**animatedRocket**。然后，在**动画器**组件（在**检查器**视图中），将**rocketController**设置为它的**控制器**，并确保**应用根运动**选项未勾选，如图所示：![如何操作...](img/1362_09_06.jpg)
- en: In the **Project** view, create a new **C# Script** and rename it to `ChangePitch`.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**项目**视图中创建一个新的**C# 脚本**，并将其重命名为`ChangePitch`。
- en: 'Open the script in your editor and replace everything with the following code:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的编辑器中打开脚本，并将所有内容替换为以下代码：
- en: '[PRE0]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Save your script and add it as a component to **animatedRocket** GameObject.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存您的脚本并将其作为组件添加到**animatedRocket** GameObject。
- en: Play the scene and change the animation speed by pressing key *1* (accelerate)
    and *2* (decelerate) on your alphanumeric keyboard. The audio pitch will change
    accordingly.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 播放场景，并通过按数字键盘上的 *1* 键（加速）和 *2* 键（减速）来更改动画速度。音频音高将相应地改变。
- en: How it works...
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: At the `Start()` method, besides storing the **Animator** and **AudioSource**
    components in variables, we'll get the initial `speed` from the **Animator**,
    and we'll call the `AccelRocket()` function by passing `0` as an argument, only
    for that function to calculate the resulting pitch for the **Audio Source**. During
    `Update()` function, the lines of the `if(Input.GetKey (KeyCode.Alpha1))` and
    `if(Input.GetKey (KeyCode.Alpha2))` code detect whenever the *1* or *2* keys are
    being pressed on the alphanumeric keyboard to call the `AccelRocket()` function,
    passing a `accel` float variable as an argument. The `AccelRocket()` function,
    in its turn, increments `speed` with the received argument (the `accel` float
    variable). However, it uses the `Mathf.Clamp()`command to limit the new speed
    value between the minimum and maximum speed as set by the user. Then, it changes
    the **Animator** speed and **Audio Source** pitch according to the new `speed`
    absolute value. The value is clamped a second time to avoid negative numbers.
    Should you reverse the animation, check out a solution in the completed project
    included with the code files. Also, please note that setting the animation speed
    and therefore, the sound pitch to `0` will cause the sound to stop, making it
    clear that stopping the object's animation also prevents the engine sound from
    playing.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Start()` 方法中，除了将 **Animator** 和 **AudioSource** 组件存储在变量中，我们还会从 **Animator**
    中获取初始的 `speed`，并通过传递 `0` 作为参数调用 `AccelRocket()` 函数，仅为此函数计算 **Audio Source** 的结果音高。在
    `Update()` 函数中，`if(Input.GetKey(KeyCode.Alpha1))` 和 `if(Input.GetKey(KeyCode.Alpha2))`
    代码行检测数字键盘上的 *1* 或 *2* 键是否被按下，以调用 `AccelRocket()` 函数，并传递一个 `accel` 浮点变量作为参数。`AccelRocket()`
    函数反过来，通过接收到的参数（`accel` 浮点变量）增加 `speed`。然而，它使用 `Mathf.Clamp()` 命令将新的速度值限制在用户设置的最低和最高速度之间。然后，它根据新的
    `speed` 绝对值更改 **Animator** 速度和 **Audio Source** 音高。该值被第二次限制以避免出现负数。如果您想反转动画，请查看代码文件中包含的完成项目的解决方案。另外，请注意，将动画速度以及因此声音音高设置为
    `0` 将导致声音停止，这清楚地表明停止对象的动画也会阻止引擎声音播放。
- en: There's more...
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Here is some information on how to fine-tune and customize this recipe.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些关于如何微调和自定义这个菜谱的信息。
- en: Changing the Animation/Sound Ratio
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 改变动画/声音比率
- en: If you want the audio clip pitch to be more or less affected by the animation
    speed, change the value of the **Animation/Sound Ratio** parameter.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想使音频剪辑的音高更多地或更少地受动画速度的影响，请更改 **动画/声音比率** 参数的值。
- en: Accessing the function from other scripts
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从其他脚本访问函数
- en: The `AccelRocket()` function was made public so that it can be accessed from
    other scripts. As an example, we have included the `ExtChangePitch.cs` script
    in `1362_09_01` folder. Try attaching this script to the **Main Camera** object
    and use it to control the speed by clicking on the left and right mouse buttons.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`AccelRocket()` 函数被设置为公共的，以便可以从其他脚本中访问。例如，我们在 `1362_09_01` 文件夹中包含了 `ExtChangePitch.cs`
    脚本。尝试将此脚本附加到 **主摄像机** 对象上，并通过点击左右鼠标按钮来控制速度。'
- en: Simulating acoustic environments with Reverb Zones
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用混响区域模拟声学环境
- en: Once you have created your level's geometry and the scene is looking just the
    way you want it to, you might want your sound effects to correspond to that look.
    Sound behaves differently depending upon the environment in which it is projected,
    so it can be a good idea to make it reverberate accordingly. In this recipe, we
    will address this acoustic effect by using **Reverb Zones**.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您创建了您级别的几何形状，并且场景看起来正是您想要的样子，您可能希望您的声音效果与这种外观相匹配。声音的行为取决于其被投射的环境，因此使其产生混响可能是一个好主意。在这个菜谱中，我们将通过使用
    **混响区域** 来处理这种声学效果。
- en: Getting ready
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we have prepared the `ReverbZone.unitypackage` file, containing
    a basic level named `reverbScene` and the `Signal` prefab. The package is in the
    `1362_09_02` folder in the code bundle.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，我们准备了 `ReverbZone.unitypackage` 文件，其中包含一个名为 `reverbScene` 的基本级别和 `Signal`
    预制体。该包位于代码包中的 `1362_09_02` 文件夹。
- en: How to do it...
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'Follow these steps to simulate the sonic landscape of a tunnel:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤模拟隧道的声学景观：
- en: Import the `ReverbZone` package into your Unity Project.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `ReverbZone` 包导入到您的 Unity 项目中。
- en: In the **Project** view, open the **reverbScene** level, inside the `ReverbZones`
    folder. This is a basic scene, featuring a controllable character and a tunnel.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**项目**视图中，打开**reverbScene**级别，位于`ReverbZones`文件夹内。这是一个基本场景，包括一个可控制的角色和一个隧道。
- en: Now, drag the **Signal** prefab from the **Project** view into **Hierarchy**,
    as shown in the following screenshot. This will add a sound-emitting object to
    the scene. Place it in the center of the tunnel.![How to do it...](img/1362_09_07.jpg)
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将**信号**预制体从**项目**视图拖动到**层次结构**中，如图所示。这将向场景添加一个发声对象。将其放置在隧道的中心。![如何操作...](img/1362_09_07.jpg)
- en: Make five copies of the **Signal** GameObject and distribute them across the
    tunnel (leaving a copy just outside each entrance):![How to do it...](img/1362_09_08.jpg)
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**信号**GameObject复制五次，并将它们分布在隧道中（在每个入口外留一个副本）：![如何操作...](img/1362_09_08.jpg)
- en: In in the **Hierarchy** view, navigate to **Create** | **Audio** | **Audio Reverb
    Zone** to add a **Reverb Zone** to the scene. Then, place it in the center of
    the tunnel.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**层次结构**视图中，导航到**创建** | **音频** | **音频混响区域**以向场景添加**混响区域**。然后，将其放置在隧道的中心。
- en: 'Select the **Reverb Zone** GameObject. In the **Inspector** view, change the
    **Reverb Zone** component parameters to these values: **Min Distance**: `6`; **Max
    Distance**: `18`; and **Preset**: `StoneCorridor` as shown in the following screenshot:![How
    to do it...](img/1362_09_09.jpg)'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**混响区域**GameObject。在**检查器**视图中，将**混响区域**组件参数更改为以下值：**最小距离**：`6`；**最大距离**：`18`；以及**预设**：`StoneCorridor`，如图所示：![如何操作...](img/1362_09_09.jpg)
- en: Play the scene and walk through the tunnel using the *W A S D* keys ( and pressing
    *Shift* to run). You will hear the audio reverberate when inside the **Reverb
    Zone** area.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 播放场景，并使用*W A S D*键（按住*Shift*键以跑步）穿过隧道。当您在**混响区域**区域内时，您将听到音频混响。
- en: How it works...
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Once positioned, the **Audio Reverb Zone** applies an audio filter to all audio
    sources within its radius.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦定位，**音频混响区域**将对其半径内的所有音频源应用音频过滤器。
- en: There's more...
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: Here are more options for you to try.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些选项供您尝试。
- en: Attaching the Audio Reverb Zone component to Audio Sources
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将音频混响区域组件附加到音频源
- en: Instead of creating an **Audio Reverb Zone** GameObject, you can attach it to
    the sound emitting object (in our case, **Signal**) as a component through the
    **Component** | **Audio** | **Audio Reverb Zone** menu. In this case, the **Reverb
    Zone** will be individually set up around the object.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 您不必创建**音频混响区域**GameObject，您可以通过**组件** | **音频** | **音频混响区域**菜单将其附加到声音发出对象（在我们的例子中，**信号**）作为组件。在这种情况下，**混响区域**将围绕对象单独设置。
- en: Making your own Reverb settings
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自定义混响设置
- en: Unity comes with several **Reverb Presets**. We have used **StoneCorridor**,
    but your scene can ask for something less intense (such as **Room**) or more radical
    (such as **Psychotic**). If these presets still won't be able to recreate the
    effect that you have in mind, change it to **User** and edit its parameters as
    you wish.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Unity自带几个**混响预设**。我们使用了**StoneCorridor**，但您的场景可以要求更不强烈（例如**Room**）或更激进（例如**Psychotic**）的东西。如果这些预设仍然无法重现您心中的效果，将其更改为**用户**并按您希望的参数进行编辑。
- en: Preventing an Audio Clip from restarting if it is already playing
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 防止正在播放的音频剪辑重新开始
- en: In a game, there may be several different events that cause a sound to start
    playing. If the sound is already playing, then in almost all cases, we won't wish
    to restart the sound. This recipe includes a test, so that an **Audio Source**
    component is only sent a `Play()` message if it is currently not playing.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在游戏中，可能有几个不同的事件会导致声音开始播放。如果声音已经在播放，那么在几乎所有情况下，我们都不希望重新开始播放声音。这个配方包括一个测试，以确保只有当**音频源**组件当前未播放时，才会发送`Play()`消息。
- en: Getting ready
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Try this with any audio clip that is one second or longer in duration. We have
    included the `engineSound` audio clip inside the `1362_09_03` folder.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试任何持续一秒或更长的音频剪辑。我们在`1362_09_03`文件夹中包含了`engineSound`音频剪辑。
- en: How to do it...
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To prevent an **Audio Clip** from restarting, follow these steps:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 要防止**音频剪辑**重新开始，请按照以下步骤操作：
- en: Create an **Empty** GameObject and rename it to **AudioObject**. Then, add an
    **Audio Source** component to this object (in the **Component** | **Audio** |
    **Audio Source** menu).
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个**空**GameObject并将其重命名为**音频对象**。然后，向此对象添加**音频源**组件（在**组件** | **音频** | **音频源**菜单中）。
- en: Import the `engineSound` audio clip and drag it from the **Project** view to
    populate the **Audio Clip** parameter of the **Audio Source** component of **AudioObject**:![How
    to do it...](img/1362_09_10.jpg)
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`engineSound`音频片段，并将其从**项目**视图拖动到**音频对象**组件的**音频片段**参数中：![如何操作...](img/1362_09_10.jpg)
- en: 'Create a UI button named **PlaySoundButton** on the screen and attach the following
    script to this button:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在屏幕上创建一个名为**PlaySoundButton**的UI按钮，并将以下脚本附加到该按钮：
- en: '[PRE1]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: With **PlaySoundButton** selected in the **Hierarchy** panel, drag **AudioObject**
    into the **Inspector** view for the public **Audio Source** variable, and drag
    the **Text** child of **PlaySoundButton** for the public **ButtonText**:![How
    to do it...](img/1362_09_11.jpg)
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**层次结构**面板中选择**PlaySoundButton**，将其拖动到**检查器**视图中公共**音频源**变量，并将**PlaySoundButton**的**Text**子项拖动到公共**ButtonText**：![如何操作...](img/1362_09_11.jpg)
- en: With **PlaySoundButton** selected in the **Hierarchy** panel, create a new on-click
    event handler, dragging the **PlaySoundButton** into the **Object** slot, and
    selecting the **PlaySoundIfNotPlaying()** function.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**层次结构**面板中选择**PlaySoundButton**，创建一个新的点击事件处理程序，将**PlaySoundButton**拖入**对象**槽，并选择**PlaySoundIfNotPlaying()**函数。
- en: How it works...
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The **Audio Source** components have a public readable property **isPlaying**,
    which is a Boolean true/false flag, indicating if the sound is currently playing.
    The text of the button is set to display `Play Sound` when the sound is not playing,
    and (`sound playing`) when it is. When the button is clicked, the `PlaySoundIfNotPlaying()`
    method is called. This method uses an `if` statement, ensuring that a `Play()`
    message is only sent to the Audio Source component if its **isPlaying** is false.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**音频源**组件具有一个公共可读属性**isPlaying**，它是一个布尔值，表示声音是否正在播放。当声音未播放时，按钮文本设置为显示`播放声音`，当正在播放时显示（`声音播放`）。当按钮被点击时，会调用`PlaySoundIfNotPlaying()`方法。此方法使用`if`语句，确保只有当**isPlaying**为`false`时，才会向音频源组件发送`Play()`消息。'
- en: See also
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Waiting for the audio to finish before auto-destructing an object* recipe
    in this chapter.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中关于**等待音频播放完成后再自动销毁对象**的配方。
- en: Waiting for audio to finish playing before auto-destructing an object
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在对象自动销毁前等待音频播放完成
- en: An event may occur (such as an object pickup or the killing of an enemy) that
    we wish to notify to the player by playing an audio clip, and an associated visual
    object (such as an explosion particle system, or a temporary object in the location
    of the event). However, as soon as the clip has finished playing, we will wish
    for the visual object to be removed from the scene. This recipe provides a simple
    way to link the ending of a playing audio clip with the automatic destruction
    of its containing object.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会发生某些事件（例如拾取对象或击败敌人），我们希望通过播放音频片段并关联一个视觉对象（例如爆炸粒子系统或事件位置的临时对象）来通知玩家。然而，一旦音频片段播放完毕，我们希望将视觉对象从场景中移除。本配方提供了一种简单的方法，将播放音频片段的结束与包含对象的自动销毁联系起来。
- en: Getting ready
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Try this with any audio clip that is a second or more in duration. We have included
    the `engineSound` audio clip inside the `1362_09_04` folder.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试使用任何时长为一秒或更长的音频片段。我们已在`1362_09_04`文件夹中包含了`engineSound`音频片段。
- en: How to do it...
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To wait for audio to finish playing before destroying a GameObject, follow
    these steps:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 要在销毁GameObject之前等待音频播放完成，请按照以下步骤操作：
- en: Create an **Empty** GameObject and rename it to **AudioObject**. Then, add an
    **Audio Source** component to this object (in the **Component** | **Audio** |
    **Audio Source** menu).
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个**空**GameObject，并将其重命名为**音频对象**。然后，向该对象添加一个**音频源**组件（在**组件** | **音频** |
    **音频源**菜单中）。
- en: Import the `engineSound` audio clip and drag it from the **Project** view to
    populate the **Audio Clip** parameter of the **Audio Source** component of **AudioObject**,
    and deselect the component's **Play On Awake** checkbox:![How to do it...](img/1362_09_12.jpg)
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`engineSound`音频片段，并将其从**项目**视图拖动到**音频对象**组件的**音频片段**参数中，并取消选中组件的**播放于唤醒**复选框：![如何操作...](img/1362_09_12.jpg)
- en: 'Add the following script class to **AudioObject**:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下脚本类添加到**音频对象**：
- en: '[PRE2]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In **Inspector** view, disable (un-check) the `AudioDestructBehaviour` scripted
    component of **AudioObject** (when needed, it will be re-enabled via C# code):![How
    to do it...](img/1362_09_13.jpg)
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**检查器**视图中，禁用（取消选中）**音频对象**的`AudioDestructBehaviour`脚本组件（当需要时，将通过C#代码重新启用）：![如何操作...](img/1362_09_13.jpg)
- en: 'Create a new C# file named **ButtonActions**, containing the following code:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为**ButtonActions**的新C#文件，包含以下代码：
- en: '[PRE3]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Create a UI button named **PlaySoundButton** on the screen with a button `Play
    Sound` text, and attach the **ButtonActions** script to this button.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在屏幕上创建一个带有按钮文本`Play Sound`的UI按钮**PlaySoundButton**，并将**ButtonActions**脚本附加到该按钮。
- en: With **PlaySoundButton** selected in the **Hierarchy**, create a new on-click
    event handler, dragging **PlaySoundButton** into the **Object** slot, and selecting
    the **PlaySound()** function.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**层次**中选择**PlaySoundButton**，创建一个新的点击事件处理程序，将**PlaySoundButton**拖动到**对象**槽中，并选择**PlaySound()**函数。
- en: With the **PlaySoundButton** selected in the **Hierarchy** panel, drag **AudioObject**
    into the **Inspector** view for the public **Audio Source** variable **AudioObject**.
    Also, drag **AudioObject** into the **Inspector** view for the public **Script**
    variable **AudioDestructScriptedObject**, shown as follows:![How to do it...](img/1362_09_14.jpg)
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**层次**面板中选择**PlaySoundButton**，将**AudioObject**拖动到**检查器**视图中，以设置公共**音频源**变量**AudioObject**。同时，将**AudioObject**拖动到**检查器**视图中，以设置公共**脚本**变量**AudioDestructScriptedObject**，如下所示：![如何操作...](img/1362_09_14.jpg)
- en: Create a second UI button named **DestoryWhenSoundFinishedButton** on screen,
    with the button text `Destroy When Sound Finished`, and attach the **ButtonActions**
    script to this button.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在屏幕上创建一个名为**DestoryWhenSoundFinishedButton**的第二个UI按钮，按钮文本为`Destroy When Sound
    Finished`，并将**ButtonActions**脚本附加到该按钮。
- en: With **DestoryWhenSoundFinishedButton** selected in the **Hierarchy** panel,
    create a new on-click event handler, dragging **PlaySoundButton** into the **GO**
    slot, and then selecting the **DestroyAfterSoundStops()** function.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**层次**面板中选择**DestoryWhenSoundFinishedButton**，创建一个新的点击事件处理程序，将**PlaySoundButton**拖动到**GO**槽中，然后选择**DestroyAfterSoundStops()**函数。
- en: Just as you did with the other button, now the **DestoryWhenSoundFinishedButton**
    selected in the **Hierarchy** panel, drag **AudioObject** into the **Inspector**
    view for the public **Script** variable **MyAudioDestructObect**.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就像处理其他按钮一样，现在在**层次**面板中选择**DestoryWhenSoundFinishedButton**，将**AudioObject**拖动到**检查器**视图中，以设置公共**脚本**变量**MyAudioDestructObect**。
- en: How it works...
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The GameObject named **AudioObject** contains an Audio Source component, which
    stores and manages the playing of the audio clip. **AudioObject** also contains
    a scripted component, which is an instance of the **AudioDestructBehaviour** class.
    This script is initially disabled. When enabled, every frame this object (via
    its `Update()` method) tests whether the audio source is not playing (`!audio.isPlaying`).
    As soon as the audio is found to be not playing, the GameObject is destroyed.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 名称称为**AudioObject**的GameObject包含一个音频源组件，用于存储和管理音频剪辑的播放。**AudioObject**还包含一个脚本组件，它是**AudioDestructBehaviour**类的实例。此脚本最初是禁用的。当启用时，每帧此对象（通过其`Update()`方法）都会测试音频源是否未播放（`!audio.isPlaying`）。一旦发现音频未播放，GameObject将被销毁。
- en: There are two UI buttons created. Button **PlaySoundButton** calls the `PlaySound()`
    method. This method will start playing the audio clip, if it is not already playing.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 已创建了两个UI按钮。按钮**PlaySoundButton**调用`PlaySound()`方法。如果音频剪辑尚未播放，此方法将开始播放音频剪辑。
- en: The second button called **DestoryWhenSoundFinishedButton** calls the `DestoryAfterSoundStops()`
    method. This method enables the scripted component **AudioDestructBehaviour**
    in GameObject **AudioObject**—so that that GameObject will be destroyed, once
    the sound has finished playing.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个按钮**DestoryWhenSoundFinishedButton**调用`DestoryAfterSoundStops()`方法。此方法在GameObject
    **AudioObject**中启用脚本组件**AudioDestructBehaviour**——这样，当声音播放完毕后，该GameObject将被销毁。
- en: See also
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Preventing an Audio Clip from restarting if it is already playing* recipe
    in this chapter
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中*防止音频剪辑在已播放时重新启动*的菜谱
- en: Adding volume control with Audio Mixers
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用音频混音器添加音量控制
- en: Sound volume adjustment can be a very important feature, especially if your
    game is a standalone. After all, it can be very frustrating to access the operational
    system volume control. In this recipe, we will use the new **Audio Mixer** feature
    to create independent volume controls for Music and Sound FX.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 音量调整可能是一个非常重要的功能，尤其是如果你的游戏是独立的。毕竟，访问操作系统的音量控制可能会非常令人沮丧。在这个菜谱中，我们将使用新的**音频混音器**功能为音乐和声音效果创建独立的音量控制。
- en: Getting ready
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we have provided a Unity package named `Volume.unitypackage`,
    containing an initial scene featuring soundtrack music and sound effects. The
    file is available inside the `1362_09_05` folder.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们提供了一个名为`Volume.unitypackage`的Unity包，其中包含一个初始场景，包含配乐音乐和音效。文件位于`1362_09_05`文件夹中。
- en: How to do it...
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To add volume control sliders to your scene, follow these steps:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 要将音量控制滑块添加到您的场景中，请按照以下步骤操作：
- en: Import `Volume.unitypackage` into your project.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Volume.unitypackage`导入到您的项目中。
- en: 'Open the **Volume** scene (available in the **Assets** | **Volume** folder).
    Play the scene and walk towards the semitransparent green wall in the tunnel,
    using the *W A S D* keys (while pressing the *Shift* key to run). You will be
    able to listen to:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**Volume**场景（位于**资产** | **Volume**文件夹中）。播放场景，并使用*W A S D*键（按住*Shift*键以跑步）走向隧道中的半透明绿色墙。您将能够听到：
- en: A looping soundtrack music
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个循环的配乐音乐
- en: Bells ringing
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 钟声响起
- en: A robotic speech whenever the character collides with the wall
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当角色与墙碰撞时，机器人语音
- en: From the **Project** view, use the **Create** drop-down menu to add **Audio
    Mixer** to the project. Name it **MainMixer**. Double-click on it to open the
    **Audio Mixer** window.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目**视图中，使用**创建**下拉菜单将**音频混音器**添加到项目中。将其命名为**MainMixer**。双击它以打开**音频混音器**窗口。
- en: From the **Groups** view, highlight **Master** and click the **+** sign to add
    a child to the **Master** group. Name it **Music**. Then, highlight **Master**
    again and add a new child group named **FX**, as shown in the following screenshot:![How
    to do it...](img/1362_09_15.jpg)
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**组**视图中，突出显示**主**并单击**+**号以向**主**组添加一个子项。将其命名为**音乐**。然后，再次突出显示**主**并添加一个新的子组**FX**，如图所示：![如何操作...](img/1362_09_15.jpg)
- en: From the **Mixers** view, highlight **MainMixer** and click the **+** sign to
    add a new **Mixer** to the project. Name it **MusicMixer**. Then, drag it into
    the **MainMixer** and select the **Music** group as its **Output**. Repeat the
    operation to add a mixer named **FxMixer** to the project by selecting the **FX**
    group as its output:![How to do it...](img/1362_09_16.jpg)
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**混音器**视图中，突出显示**MainMixer**并单击**+**号以向项目中添加一个新的**混音器**。将其命名为**MusicMixer**。然后，将其拖入**MainMixer**并选择**音乐**组作为其**输出**。重复此操作，通过选择**效果**组作为输出，将一个名为**FxMixer**的混音器添加到项目中：![如何操作...](img/1362_09_16.jpg)
- en: 'Now, select **MusicMixer**. Select its **Master** group and add a child named
    **Soundtrack**. Then, select **FxMixer** and add two children to its **Master**
    group: one named **Speech**, and another named **Bells**, as shown:![How to do
    it...](img/1362_09_17.jpg)'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，选择**MusicMixer**。选择其**主**组并添加一个名为**Soundtrack**的子项。然后，选择**FxMixer**并为其**主**组添加两个子项：一个名为**Speech**，另一个名为**Bells**，如图所示：![如何操作...](img/1362_09_17.jpg)
- en: From the **Hierarchy** view, select the **DialogueTrigger** object. Then, in
    the **Inspector** view, change its **Output** track to **FxMixer** | **Speech**
    in the **Audio Source** component:![How to do it...](img/1362_09_18.jpg)
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**层次**视图中，选择**DialogueTrigger**对象。然后，在**检查器**视图中，将**输出**轨道更改为**Audio Source**组件中的**FxMixer**
    | **Speech**：![如何操作...](img/1362_09_18.jpg)
- en: Now, select the **Soundtrack** GameObject. From the **Inspector** view, find
    the **Audio Source** component and change its **Output** track to **MusicMixer**
    | **Soundtrack**:![How to do it...](img/1362_09_19.jpg)
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，选择**Soundtrack**游戏对象。从**检查器**视图中，找到**Audio Source**组件并将其**输出**轨道更改为**MusicMixer**
    | **Soundtrack**：![如何操作...](img/1362_09_19.jpg)
- en: Finally, from the **Assets** folder in the **Project** view, select the **Signal**
    prefab . From the **Inspector** view, access its **Audio Source** component and
    change its **Output** to **FxMixer** | **Bells**:![How to do it...](img/1362_09_20.jpg)
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，从**项目**视图中的**资产**文件夹，选择**信号**预制体。从**检查器**视图中，访问其**Audio Source**组件并将其**输出**更改为**FxMixer**
    | **Bells**：![如何操作...](img/1362_09_20.jpg)
- en: From the **Audio Mixer** window, choose **MainMixer** and select its **Master**
    track. Then, from the **Inspector** view, right-click on **Volume** in the **Attenuation**
    component. From the context menu, select **Expose 'Volume (of Master) to script**
    as shown in the following screenshot. Repeat the operation for the **Music and
    FX** tracks:![How to do it...](img/1362_09_21.jpg)
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**音频混音器**窗口，选择**MainMixer**并选择其**主**轨道。然后，从**检查器**视图中，在**衰减**组件中的**音量**上右键单击。从上下文菜单中，选择如图所示的**将“音量（主音量）暴露给脚本**”。为**音乐和效果**轨道重复此操作：![如何操作...](img/1362_09_21.jpg)
- en: From the top of the **Audio Mixer** with the **MainMixer** selected, access
    the **Exposed Parameters** drop-down menu. Then, right-click on **MyExposedParam**
    and rename it to `OverallVolume`. Then, rename **MyExposedParam1** as `MusicVolume`
    and **MyExposedParam2** as `FxVolume`.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从顶部选择**主混音器**的**音频混音器**，访问**暴露参数**下拉菜单。然后，右键单击**我的暴露参数**并重命名为`总体音量`。接着，将**我的暴露参数1**重命名为`音乐音量`，将**我的暴露参数2**重命名为`效果音量`。
- en: From the **Project** view, create a new **C# Script** and rename it to `VolumeControl`.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**项目**视图中，创建一个新的**C# 脚本**并将其重命名为`音量控制`。
- en: 'Open the script in your editor and replace everything with the following code:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的编辑器中打开脚本，并用以下代码替换所有内容：
- en: '[PRE4]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: From the **Hierarchy** view, use the **Create** dropdown menu to add a **Panel**
    to the scene (**Create** | **UI** | **Panel**). Note that it will automatically
    add a **Canvas** to the scene.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**层次结构**视图中，使用**创建**下拉菜单向场景添加一个**面板**（**创建** | **UI** | **面板**）。请注意，它将自动向场景添加一个**Canvas**。
- en: From the **Hierarchy** view, use the **Create** dropdown menu to add a **Slider**
    to the scene (**Create** | **UI** | **Slider**). Make it a child of the **Panel**
    object.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**层次结构**视图中，使用**创建**下拉菜单向场景添加一个**滑块**（**创建** | **UI** | **滑块**）。将其设置为**面板**对象的子对象。
- en: Rename the slider as **OverallSlider**. Duplicate it and rename the new copy
    to **MusicSlider**. Then, in the **Inspector** view, **Rect Transform** component,
    change its **Pos Y** parameter to `-40`.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将滑块重命名为**总体滑块**。复制它，并将新副本重命名为**音乐滑块**。然后在**检查器**视图中，**矩形变换**组件，将**Pos Y**参数更改为`-40`。
- en: Duplicate **MusicSlider** and rename the new copy to **FxSlider**. Then, change
    its **Pos Y** parameter to `-70`:![How to do it...](img/1362_09_22.jpg)
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制**音乐滑块**，并将新副本重命名为**效果滑块**。然后，将其**Pos Y**参数更改为`-70`：![如何操作...](img/1362_09_22.jpg)
- en: Select the **Canvas** GameObject and add the **VolumeControl** script to it.
    Then, populate the **MyMixer** field of **Volume Control** with **MainMixer**:![How
    to do it...](img/1362_09_23.jpg)
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Canvas**游戏对象，并向其添加**音量控制**脚本。然后，将**音量控制**的**MyMixer**字段填充为**MainMixer**：![如何操作...](img/1362_09_23.jpg)
- en: Select the **OverallSlider** component. From the **Inspector** view at the **Slider**
    component, change **Min Value** to `0.000025` (or **2.5e-05**). Then, below the
    **On Value Changed** list, click the **+** sign to add an action. From **Hierarchy**
    panel, drag **Canvas** into the **Object** slot and using the drop-down menu,
    choose **VolumeControl** | **ChangeOverallVol** option, as shown in the following
    screenshot, For testing purposes, change the appropriate selector from **Runtime
    Only** to **Editor and Runtime**.![How to do it...](img/1362_09_24.jpg)
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**总体滑块**组件。在**滑块**组件的**检查器**视图中，将**最小值**更改为`0.000025`（或**2.5e-05**）。然后，在**值改变时**列表下方，点击**+**符号添加一个动作。从**层次结构**面板中，将**Canvas**拖入**对象**槽，并使用下拉菜单选择**VolumeControl**
    | **ChangeOverallVol**选项，如图所示。为了测试目的，将适当的选择器从**仅运行时**更改为**编辑器和运行时**。![如何操作...](img/1362_09_24.jpg)
- en: Repeat the previous step with **MusicSlider** and **FxSlider**, but this time,
    choose **ChangeMusicVol** and **ChangeFxVol** options respectively from the drop-down
    menu.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复前面的步骤，使用**音乐滑块**和**效果滑块**，但这次分别从下拉菜单中选择**更改音乐音量**和**更改效果音量**选项。
- en: Play the scene. You will be able to access the sliders when pressing *Escape*
    on your keyboard and adjust volume settings from there.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 播放场景。您可以在按下键盘上的*Escape*键时访问滑块，并从那里调整音量设置。
- en: How it works...
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The new **Audio Mixer** feature works in a similar fashion to Digital Audio
    Workstations, such as Logic and Sonar. Through **Audio Mixers**, you can organize
    and manage audio elements by routing them into specific groups that can have individual
    audio tracks to be tweaked around, allowing for adjustments in volume level and
    sound effects.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 新的**音频混音器**功能与数字音频工作站（如Logic和Sonar）类似工作。通过**音频混音器**，您可以通过将它们路由到具有单独音频轨道的特定组来组织和管理工作音频元素，从而调整音量级别和音效。
- en: By organizing and routing our audio clips into two groups (**Music** and **FX**),
    we established the **MainMixer** as a unified controller for volume. Then, we
    have used the **Audio Mixer** to expose the volume levels for each track of the
    **MainMixer**, making them accessible to our script.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将我们的音频剪辑组织到两个组（**音乐**和**效果**）中，我们将**主混音器**建立为一个统一的音量控制器。然后，我们使用**音频混音器**暴露了**主混音器**每个轨道的音量级别，使它们可以通过我们的脚本访问。
- en: 'Also, we have set up a basic GUI featuring three sliders that, when in use,
    will pass their float values (between `0.000025` and `1`) as arguments to three
    specific functions in our script: `ChangeMusicVol`, `ChangeFxVol`, and `ChangeOverallVol`.
    These functions, on their turn, use the `SetFloat` command to effectively change
    the volume levels at runtime. However, before passing on the new volume levels,
    the script converts linear values (between `0.000025` and `1`) to the decibel
    levels that are used by the **Audio Mixer**. This conversion is calculated through
    the *log(x) * 20* mathematical function.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们设置了一个基本的GUI，包含三个滑块，当使用时，将它们的浮点值（在`0.000025`和`1`之间）作为参数传递给脚本中的三个特定函数：`ChangeMusicVol`、`ChangeFxVol`和`ChangeOverallVol`。这些函数反过来使用`SetFloat`命令在运行时有效地更改音量级别。然而，在传递新的音量级别之前，脚本将线性值（在`0.000025`和`1`之间）转换为**音频混音器**使用的分贝级别。这种转换是通过`log(x)
    * 20`数学函数计算的。
- en: Note
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For a full explanation on issues regarding the conversion of linear values to
    decibel levels and vice-versa, check out Aaron Brown's excellent article at [http://www.playdotsound.com/portfolio-item/decibel-db-to-float-value-calculator-making-sense-of-linear-values-in-audio-tools/](http://www.playdotsound.com/portfolio-item/decibel-db-to-float-value-calculator-making-sense-of-linear-values-in-audio-tools/).
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 对于有关将线性值转换为分贝级别以及相反的问题的完整解释，请查看Aaron Brown在[http://www.playdotsound.com/portfolio-item/decibel-db-to-float-value-calculator-making-sense-of-linear-values-in-audio-tools/](http://www.playdotsound.com/portfolio-item/decibel-db-to-float-value-calculator-making-sense-of-linear-values-in-audio-tools/)的优秀文章。
- en: It's worth mentioning that the `VolumeControl` script also includes code to
    enable and disable the **GUI** and the **EventSystem**, depending upon if the
    player hits the Escape key to activate/deactivate the volume control sliders.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，`VolumeControl`脚本还包括代码来启用和禁用**GUI**和**EventSystem**，这取决于玩家是否按下Escape键来激活/禁用音量控制滑块。
- en: A very important note—do not change the volume of any **MainMixer'**s tracks;
    leave them at `0` dB. The reason is that our `VolumeControl` script sets their
    maximum volume level. For general adjustments, use the secondary Mixers **MusicMixer**
    and **FxMixer**.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 一个非常重要的注意事项——不要更改任何**MainMixer**的音轨音量；请将它们保持在`0` dB。原因是我们的`VolumeControl`脚本设置了它们的最大音量级别。对于一般调整，请使用辅助混音器**MusicMixer**和**FxMixer**。
- en: There's more...
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Here is some extra information on Audio Mixers.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些关于音频混音器的额外信息。
- en: Playing with Audio Production
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 音频制作中的玩耍
- en: There are many creative uses for exposed parameters. We can, for instance, add
    effects such as **Distortion**, **Flange**, and **Chorus** to audio channels,
    allowing users to operate virtual sound tables/mixing boards.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 对于暴露的参数有许多创意用途。例如，我们可以向音频通道添加如**失真**、**镶边**和**合唱**等效果，使用户能够操作虚拟音表/混音板。
- en: See also
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Making a dynamic soundtrack with Snapshots* recipe in this chapter
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的*使用快照制作动态配乐*配方
- en: The *Balancing the in-game audio with Ducking* in this chapter
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中关于*平衡游戏内音频与 ducking*的内容
- en: Making a dynamic soundtrack with Snapshots
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用快照制作动态配乐
- en: Dynamic soundtracks are the ones that change according to what is happening
    to the player in the game, musically reflecting that place or moment of the character's
    adventure. In this recipe, we will implement a soundtrack that changes twice;
    the first time when entering a tunnel, and the second time when coming out of
    its end. To achieve this, we will use the new **Snapshot** feature of the **Audio
    Mixer**.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 动态配乐是根据游戏中玩家的行为而变化的，音乐上反映了角色的冒险地点或时刻。在本配方中，我们将实现一个配乐，它将改变两次；第一次是在进入隧道时，第二次是在从隧道末端出来时。为了实现这一点，我们将使用**音频混音器**的新**快照**功能。
- en: Snapshots are a way of saving the state of your **Audio Mixer**, keeping your
    preferences for volume levels, audio effects, and more. We can access these states
    through script, creating transitions between mixes, and by bringing up the desired
    sonic ambience for each moment of the player's journey.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 快照是一种保存**音频混音器**状态的方法，保留音量级别、音频效果等偏好。我们可以通过脚本访问这些状态，创建混音之间的过渡，并为玩家旅程的每个时刻提供所需的音效氛围。
- en: Getting ready
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For this recipe, we have prepared a basic game level, contained inside the
    Unity package named `DynamicSoundtrack`, and two soundtrack audio clips in `.ogg`
    format: `Theme01_Percussion` and `Theme01_Synths`. All these files can be found
    in the `1362_09_06` folder.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个食谱，我们准备了一个基本的游戏关卡，包含在名为`DynamicSoundtrack`的Unity包中，以及两个`.ogg`格式的音轨音频剪辑：`Theme01_Percussion`和`Theme01_Synths`。所有这些文件都可以在`1362_09_06`文件夹中找到。
- en: How to do it...
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To make a dynamic soundtrack, follow these steps:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 要制作动态音轨，请按照以下步骤操作：
- en: Import the `DynamicSoundtrack` package and both `.ogg` files to your Unity Project.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`DynamicSoundtrack`包和两个`.ogg`文件导入到您的Unity项目中。
- en: Open the level named **Dynamic**.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开名为**动态**的场景。
- en: From the **Project** view, use the **Create** drop-down menu to add **Audio
    Mixer** to the project. Name it **MusicMixer**. Double-click on it to open the
    **Audio Mixer** window.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目**视图，使用**创建**下拉菜单将**音频混音器**添加到项目中。将其命名为**MusicMixer**。双击它以打开**音频混音器**窗口。
- en: 'From the **Groups** view, highlight **Master** and click the **+** sign to
    add a child to the **Master** group. Name it as **Music**. Then, add two child
    groups to **Music**: **Percussion** and **Synths**:![How to do it...](img/1362_09_25.jpg)'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**组**视图，高亮显示**主**并点击**+**符号向**主**组添加一个子组。将其命名为**音乐**。然后，向**音乐**添加两个子组：**打击乐器**和**合成器**：![如何操作...](img/1362_09_25.jpg)
- en: From the **Hierarchy** view, create a new **Empty** GameObject. Name it **Music**.
    Then, add two **Empty Child** GameObjects to it. Name them as **Percussion** and
    **Synth**.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**层次结构**视图，创建一个新的**空**GameObject。将其命名为**音乐**。然后，向其添加两个**空子GameObject**。将它们命名为**打击乐器**和**合成器**。
- en: From the **Project** view, drag the **Audio Clip** named **Theme01_Percussion**
    into the **Percussion** GameObject in **Hierarchy**. Select **Percussion** and
    in the **Inspector** view, access the **Audio Source** component. Change its **Output**
    to **Percussion (MusicMixer)**, make sure the **Play On Awake** option is checked,
    check the **Loop** option, and make sure its **Spatial Blend** is set to **2D**,
    as shown in the following screenshot:![How to do it...](img/1362_09_26.jpg)
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目**视图，将名为**Theme01_Percussion**的**音频剪辑**拖动到**层次结构**中的**打击乐器**GameObject。选择**打击乐器**，在**检查器**视图中，访问**音频源**组件。将其**输出**更改为**打击乐器
    (MusicMixer)**，确保**播放于唤醒**选项被勾选，勾选**循环**选项，并确保其**空间混合**设置为**2D**，如图所示：![如何操作...](img/1362_09_26.jpg)
- en: Now, drag the **Theme01_Synths** audio file into the **Synths** GameObject.
    From the **Inspector** view, change its **Output** to **Synths (MusicMixer)**,
    make sure the **Play On Awake** option is checked, check the **Loop** option,
    and make sure its **Spatial Blend** is set to **2D**, as shown:![How to do it...](img/1362_09_27.jpg)
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将**Theme01_Synths**音频文件拖动到**合成器**GameObject。从**检查器**视图，将其**输出**更改为**合成器 (MusicMixer)**，确保**播放于唤醒**选项被勾选，勾选**循环**选项，并确保其**空间混合**设置为**2D**，如图所示：![如何操作...](img/1362_09_27.jpg)
- en: Open the **Audio Mixer** and play the scene. We will now use the mixer to set
    the soundtrack for the start of the scene. With the scene playing, click on the
    **Edit in Play Mode** button, as shown in the screenshot, at the top of the **Audio
    Mixer**. Then, drop the volume on the **Synths** track down to **-30 dB**:![How
    to do it...](img/1362_09_28.jpg)
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**音频混音器**并播放场景。我们现在将使用混音器为场景的开始设置音轨。当场景播放时，点击**音频混音器**顶部的**在播放模式下编辑**按钮，如图所示。然后，将**合成器**轨道的音量降低到**-30
    dB**：![如何操作...](img/1362_09_28.jpg)
- en: Now, select the **Percussion** track. Right-click on **Attenuation** and add
    the **High-pass** effect before it:![How to do it...](img/1362_09_29.jpg)
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，选择**打击乐器**轨道。右键点击**衰减**并在其之前添加**高通**效果：![如何操作...](img/1362_09_29.jpg)
- en: From the **Inspector** view, change the **Cutoff frequency** of the **High-pass**
    effect to **544.00 Hz**:![How to do it...](img/1362_09_30.jpg)
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**检查器**视图，将**高通**效果的**截止频率**更改为**544.00 Hz**：![如何操作...](img/1362_09_30.jpg)
- en: Every change, so far, has been assigned to the current **Snapshot**. From the
    **Snaphots** view, right-click on the current **Snapshot** and rename it to **Start**.
    Then, right-click on **Start** and select the **Duplicate** option. Rename the
    new snapshot as **Tunnel**, as shown:![How to do it...](img/1362_09_31.jpg)
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 到目前为止，每一次变化都分配给了当前的**快照**。从**快照**视图，右键点击当前的**快照**并将其重命名为**开始**。然后，右键点击**开始**并选择**复制**选项。将新的快照重命名为**隧道**，如图所示：![如何操作...](img/1362_09_31.jpg)
- en: Select the **Tunnel** snapshot. Then, from the **Inspector** view, change the
    **Cutoff frequency** of the **Highpass** effect to **10.00 Hz**:![How to do it...](img/1362_09_32.jpg)
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**隧道**快照。然后，从**检查器**视图中，将**高通**效果的**截止频率**更改为**10.00 Hz**：![如何操作...](img/1362_09_32.jpg)
- en: Switch between the **Tunnel** and **Start** snapshots. You'll be able to hear
    the difference.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**隧道**和**开始**快照之间切换。你将能够听到区别。
- en: Duplicate the **Tunnel** snapshot, rename it as **OtherSide**, and select it.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制**隧道**快照，将其重命名为**另一侧**并选择它。
- en: Raise the volume of the **Synths** track up to **0 dB**:![How to do it...](img/1362_09_33.jpg)
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**合成器**音轨的音量提升到**0 dB**：![如何操作...](img/1362_09_33.jpg)
- en: Now that we have our three **Snapshots**, it's time to create triggers to make
    transitions among them. From the **Hierarchy** view, use the **Create** drop-down
    menu to add a **Cube** to the scene (**Create** | **3D Object** | **Cube**).
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们有了三个**快照**，是时候创建触发器以在它们之间进行转换了。从**层次结构**视图中，使用**创建**下拉菜单向场景添加一个**立方体**（**创建**
    | **3D 对象** | **立方体**）。
- en: Select the new **Cube** and rename it `SnapshotTriggerTunnel`. Then, from the
    **Inspector** view, access the **Box Collider** component and check the **Is Trigger**
    option, as shown in the following screenshot. Also, uncheck its **Mesh Renderer**
    component. Finally, adjust its size and position to the scene tunnel's interior:![How
    to do it...](img/1362_09_34.jpg)
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择新的**立方体**并将其重命名为`SnapshotTriggerTunnel`。然后，从**检查器**视图中访问**盒子碰撞器**组件并勾选**是触发器**选项，如图所示。同时，取消勾选其**网格渲染器**组件。最后，调整其大小和位置以适应场景隧道内部：![如何操作...](img/1362_09_34.jpg)
- en: Make two copies of `SnapshotTriggerTunnel` and rename them to `SnapshotTriggerStart`
    and `SnapshotTriggerOtherSide`. Then, adjust their size and position, so that
    they occupy the areas before the tunnel's entrance (where the character is) and
    after its other end, as shown in the following screenshot:![How to do it...](img/1362_09_35.jpg)
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制`SnapshotTriggerTunnel`两次，并将它们重命名为`SnapshotTriggerStart`和`SnapshotTriggerOtherSide`。然后调整它们的大小和位置，使它们占据隧道入口前（角色所在的位置）和另一端之后，如图所示：![如何操作...](img/1362_09_35.jpg)
- en: In the **Project** view, create a new **C# Script** file and rename it to `SnapshotTrigger`.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**项目**视图中创建一个新的**C# 脚本**文件并将其重命名为`SnapshotTrigger`。
- en: 'Open the script in your editor and replace everything with the following code:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的编辑器中打开脚本并将所有内容替换为以下代码：
- en: '[PRE5]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Save your script and attach it to `SnapshotTriggerTunnel`, `SnapshotTriggerStart`,
    and `SnapshotTriggerOtherSide` objects.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存您的脚本并将其附加到`SnapshotTriggerTunnel`、`SnapshotTriggerStart`和`SnapshotTriggerOtherSide`对象。
- en: Select `SnapshotTriggerTunnel`. Then, from the **Inspector** view, access the
    **Snapshot Trigger** component, setting **Snapshot** as **Tunnel**, and **Crossfade**
    as `2`, as shown in the following screenshot:![How to do it...](img/1362_09_36.jpg)
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`SnapshotTriggerTunnel`。然后，从**检查器**视图中访问**快照触发器**组件，将**快照**设置为**隧道**，并将**淡入淡出**设置为`2`，如图所示：![如何操作...](img/1362_09_36.jpg)
- en: Make changes to `SnapshotTriggerStart` and `SnapshotTriggerOtherSide` by setting
    their **Snapshots** to **Start** and **OtherSide** respectively.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将它们的**快照**分别设置为**开始**和**另一侧**来修改`SnapshotTriggerStart`和`SnapshotTriggerOtherSide`。
- en: Test the scene. The background music will change as the character moves from
    its starting point, through the tunnel, and into the other side.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试场景。背景音乐将在角色从起点移动到隧道，然后进入另一侧时改变。
- en: How it works...
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The **Snapshot** feature allows you to save **Audio Mixer** states (including
    all volume levels, every filter setting, and so on) so that you can change those
    mixing preferences at runtime, making the audio design more suitable for specific
    locations or gameplay settings. For this recipe, we have created three **Snapshots**
    for different moments in the player''s journey: before entering the tunnel, inside
    the tunnel, and outside the tunnel. We have used the **Highpass** filter to make
    the initial Snapshot less intense. We have also turned the **Synths** track volume
    up to emphasize the open environment outside the tunnel. Hopefully, changes in
    the audio mix will collaborate with setting the right mood for the game.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '**快照**功能允许您保存**音频混合器**状态（包括所有音量级别、每个过滤器设置等），以便您可以在运行时更改这些混音偏好，使音频设计更适合特定位置或游戏设置。对于这个配方，我们为玩家旅程中的不同时刻创建了三个**快照**：进入隧道前、隧道内和隧道外。我们使用了**高通**过滤器来使初始快照不那么强烈。我们还提高了**合成器**音轨的音量，以强调隧道外的开阔环境。希望音频混音的变化将与设置游戏正确氛围相协作。'
- en: To activate our snapshots, we have placed **trigger colliders**, featuring our
    **Snapshot Trigger** component in which we set the desired Snapshot and the time
    in seconds, that it takes to make the transition (a crossfade) between the previous
    Snapshot and the next. In fact, the function in our script is really this straightforward—the
    line of `snapshot.TransitionTo (crossfade)` code simply starts a transition lasting
    `crossfade` seconds to the desired `Snapshot`.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 为了激活我们的快照，我们在其中放置了**触发碰撞体**，并配备了我们的**快照触发器**组件，在其中我们设置了所需的快照和过渡（交叉淡入）到下一个快照所需的时间（秒）。实际上，我们脚本中的功能非常直接——`snapshot.TransitionTo(crossfade)`代码行简单地开始一个持续`crossfade`秒的过渡到所需的`Snapshot`。
- en: There's more...
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Here is some information on how to fine-tune and customize this recipe.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些关于如何微调和自定义此配方的信息。
- en: Reducing the need for multiple audio clips
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 减少对多个音频剪辑的需求
- en: You might have noticed how different the `Theme01_Percussion` audio clip sounds
    when the **Cutoff frequency** of the **High-pass** filter is set as `10.00 Hz`.
    The reason for this is that the high-pass filter, as its name suggests, cuts off
    lower frequencies of the audio signal. In this case, it attenuated the bass drum
    down to inaudible levels while keeping the shakers audible. The opposite effect
    can be achieved through the **Lowpass** filter. A major benefit is the opportunity
    of virtually having two separate tracks into the same audio clip.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，当**高通滤波器的截止频率**设置为`10.00 Hz`时，`Theme01_Percussion`音频剪辑听起来有多么不同。这是因为高通滤波器，正如其名称所暗示的，切断了音频信号的较低频率。在这种情况下，它将低音鼓衰减到听不见的水平，同时保持摇铃的声音。通过**低通滤波器**可以达到相反的效果。一个主要的好处是几乎可以在同一个音频剪辑中拥有两个独立的轨道。
- en: Dealing with audio file formats and compression rates
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理音频文件格式和压缩率
- en: To avoid loss of audio quality, you should import your sound clips using the
    appropriate file format, depending upon your target platform. If you are not sure
    which format to use, please check out Unity's documentation on the subject at
    [http://docs.unity3d.com/Manual/AudioFiles.html](http://docs.unity3d.com/Manual/AudioFiles.html).
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免音频质量损失，您应该根据目标平台使用适当的文件格式导入您的音频剪辑。如果您不确定使用哪种格式，请查看Unity关于此主题的文档，链接为[http://docs.unity3d.com/Manual/AudioFiles.html](http://docs.unity3d.com/Manual/AudioFiles.html)。
- en: Applying Snapshots to background noise
  id: totrans-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将快照应用于背景噪音
- en: Although we have applied Snapshots to our music soundtrack, background noise
    can also benefit immensely. If your character travels across places that are significantly
    different, transitioning from open spaces to indoor environments, you should consider
    applying snapshots to your environment audio mix. Be careful, however, to create
    separate Audio Mixers for Music and Environment—unless you don't mind having musical
    and ambient sound tied to the same Snapshot.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们已经将快照应用于我们的音乐音轨，背景噪音也可以受益匪浅。如果您的角色穿越了显著不同的地方，从开阔空间过渡到室内环境，您应该考虑将快照应用于您的环境音频混合。但是，请注意为音乐和环境创建单独的音频混合器——除非您不介意音乐和环绕声音绑定到同一个快照。
- en: Getting creative with effects
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用效果来发挥创意
- en: In this recipe, we have mentioned the High-pass and Low-pass filters. However,
    there are many effects that can make audio clips sound radically different. Experiment!
    Try applying effects such as Distortion, Flange, and Chorus. In fact, we encourage
    you to try every effect, playing with their settings. The creative use of these
    effects can bring out different expressions to a single audio clip.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们提到了高通和低通滤波器。然而，有许多效果可以使音频剪辑听起来截然不同。尝试一下！尝试应用如失真、镶边和合唱等效果。实际上，我们鼓励您尝试每一个效果，并玩转它们的设置。这些效果的创意使用可以为单个音频剪辑带来不同的表现。
- en: See also
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Adding volume control with Audio Mixers* recipe in this chapter
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中关于*使用音频混合器添加音量控制*的配方
- en: The *Balancing soundtrack volume with Ducking* recipe in this chapter
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中关于*平衡音轨音量与 ducking*的配方
- en: Balancing in-game audio with Ducking
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在游戏中平衡音频与 ducking
- en: As much as the background music can be important in establishing the right atmosphere,
    there will be times when other audio clips should be emphasized, and the music
    volume turned down for the duration of that clip. This effect is known as **Ducking**.
    Maybe you will need it for dramatic effect (simulating hearing loss after an explosion
    took place), or maybe you want to make sure that the player listens to a specific
    bit of information. In this recipe, we will learn how to emphasize a piece of
    dialog by ducking the audio whenever a specific sound message is played. For that
    effect, we will use the new **Audio Mixer** to send information between tracks.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 背景音乐在建立正确氛围方面可能很重要，但有时其他音频剪辑应该被强调，并且在该剪辑期间降低音乐音量。这种效果被称为** ducking**。你可能需要它来产生戏剧效果（模拟爆炸发生后听力受损），或者你可能想确保玩家听到特定的信息。在这个食谱中，我们将学习如何在播放特定声音消息时通过降低音频来强调一段对话。为此效果，我们将使用新的**音频混音器**在轨道之间传递信息。
- en: Getting ready
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we have provided the `soundtrack.mp3` audio clip and a Unity
    package named `Ducking.unitypackage`, containing an initial scene. All these files
    are available inside the `1362_09_07` folder.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个食谱，我们提供了`soundtrack.mp3`音频剪辑和一个名为`Ducking.unitypackage`的Unity包，其中包含一个初始场景。所有这些文件都位于`1362_09_07`文件夹内。
- en: How to do it...
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To apply Audio Ducking to your soundtrack, follow these steps:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 要将音频ducking应用到你的配乐中，请按照以下步骤操作：
- en: Import `Ducking.unitypackage` and `soundtrack.mp3` into your project.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Ducking.unitypackage`和`soundtrack.mp3`导入到你的项目中。
- en: Open the **Ducking** scene (available in the **Assets** | **Ducking** folder).
    Play the scene and walk towards the semitransparent green wall in the tunnel,
    using the *W A S D* keys (by pressing *Shift* to run). You will hear the **robotDucking**
    audio clip play as the character collides with the wall.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**Ducking**场景（位于**资产** | **Ducking**文件夹）。播放场景，并使用*W A S D*键（按*Shift*键跑步）走向隧道中的半透明绿色墙。你会听到**robotDucking**音频剪辑在角色与墙碰撞时播放。
- en: From the **Create** drop-down at the top of the **Hierarchy** view, choose **Create
    Empty** to add a new GameObject to the scene. Name it **Soundtrack**.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**层次结构**视图顶部的**创建**下拉菜单，选择**创建空对象**将新GameObject添加到场景中。命名为**Soundtrack**。
- en: Drag the **soundtrack** audio clip you have imported into the **Soundtrack**
    GameObject. Then, select the **Soundtrack** object and from the **Inspector**
    view, **Audio Source** component, check the **Loop** option. Make sure the **Play
    On Awake** option is checked and **Spatial Blend** set to **2D**, as shown in
    the following in the following screenshot:![How to do it...](img/1362_09_37.jpg)
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你导入的**soundtrack**音频剪辑拖放到**Soundtrack**GameObject中。然后，选择**Soundtrack**对象，从**检查器**视图，**音频源**组件，勾选**循环**选项。确保**唤醒时播放**选项被勾选，并将**空间混合**设置为**2D**，如图所示：![如何操作...](img/1362_09_37.jpg)
- en: Test the scene again. The soundtrack music should be playing.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次测试场景。配乐音乐应该正在播放。
- en: From the **Project** view, use the **Create** drop-down menu to add an **Audio
    Mixer** to the project. Name it **MainMixer**. Double-click on it to open the
    **Audio Mixer** window.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目**视图，使用**创建**下拉菜单将**音频混音器**添加到项目中。命名为**MainMixer**。双击它以打开**音频混音器**窗口。
- en: From the **Groups** view, highlight **Master** and click the **+** sign to add
    a child to the **Master** group. Name it **Music**. Then, highlight **Master**
    again and add a new child group named **FX**, as shown in the following screenshot.
    Finally, add a third child to the **Master** group, named **Input**:![How to do
    it...](img/1362_09_38.jpg)
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**组**视图，高亮显示**主**并点击**+**号向**主**组添加一个子项。命名为**音乐**。然后，再次高亮显示**主**并添加一个名为**效果**的新子组，如图所示。最后，向**主**组添加第三个子项，命名为**输入**：![如何操作...](img/1362_09_38.jpg)
- en: From the **Mixers** view, highlight **MainMixer** and click the **+** sign to
    add a new **Mixer** to the project. Name it **MusicMixer**. Then, drag it into
    the **MainMixer** and select the group **Music** as its **Output**. Repeat the
    operation to add a mixer named **FxMixer** to the project, selecting the **FX**
    group as the output:![How to do it...](img/1362_09_39.jpg)
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**混音器**视图，高亮显示**MainMixer**并点击**+**号向项目中添加一个新的**混音器**。命名为**MusicMixer**。然后，将其拖入**MainMixer**并将组**音乐**作为其**输出**。重复此操作，将名为**FxMixer**的混音器添加到项目中，选择**效果**组作为输出：![如何操作...](img/1362_09_39.jpg)
- en: Now, select **MusicMixer**. Select its **Master** group and add a child named
    **Soundtrack**. Then, select **FxMixer** and add a child named **Bells**, as shown:![How
    to do it...](img/1362_09_40.jpg)
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，选择**MusicMixer**。选择其**主**（**Master**）组，并添加一个名为**Soundtrack**的子组。然后，选择**FxMixer**并添加一个名为**Bells**的子组，如图所示：![如何操作...](img/1362_09_40.jpg)
- en: From the **Hierarchy** view, select the **DialogueTrigger** object. Then, in
    the **Inspector** view, **Audio Source** component, Change its **Output** track
    to **MainMixer** | **Input**:![How to do it...](img/1362_09_41.jpg)
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**层次结构**（**Hierarchy**）视图，选择**DialogueTrigger**对象。然后，在**检查器**（**Inspector**）视图，**音频源**（**Audio
    Source**）组件中，将**输出**（**Output**）轨道更改为**MainMixer** | **Input**：![如何操作...](img/1362_09_41.jpg)
- en: Now, select the **Soundtrack** GameObject and in the **Inspector** view, in
    the **Audio Source** component, change its **Output** track to **MusicMixer**
    | **Soundtrack**:![How to do it...](img/1362_09_42.jpg)
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，选择**Soundtrack**游戏对象，并在**检查器**（**Inspector**）视图中，在**音频源**（**Audio Source**）组件中，将**输出**（**Output**）轨道更改为**MusicMixer**
    | **Soundtrack**：![如何操作...](img/1362_09_42.jpg)
- en: Finally, from the **Assets** folder in the **Project** view, select the **Signal**
    prefab. From the **Inspector** view, access its the **Audio Source** component
    and change its **Output** to **FxMixer** | **Bells**:![How to do it...](img/1362_09_43.jpg)
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，从**项目**（**Project**）视图中的**资产**（**Assets**）文件夹，选择**信号**（**Signal**）预制体。从**检查器**（**Inspector**）视图，访问其**音频源**（**Audio
    Source**）组件，并将**输出**（**Output**）更改为**FxMixer** | **Bells**：![如何操作...](img/1362_09_43.jpg)
- en: Open the **Audio Mixer** window. Choose **MainMixer**, select the **Music**
    track controller, right-click on **Attenuation**, and using the context menu,
    add the **Duck Volume** effect before **Attenuation**:![How to do it...](img/1362_09_44.jpg)
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**音频混音器**（**Audio Mixer**）窗口。选择**MainMixer**，选择**音乐**（**Music**）轨道控制器，右键单击**衰减**，并使用上下文菜单，在**衰减**前添加**Duck
    Volume**效果：![如何操作...](img/1362_09_44.jpg)
- en: Now, select the **Input** track, right-click on **Attenuation**, and using the
    context menu, add **Send** after **Attenuation**:![How to do it...](img/1362_09_45.jpg)
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，选择**输入**轨道，右键单击**衰减**（**Attenuation**），并使用上下文菜单，在**衰减**后添加**发送**（**Send**）![如何操作...](img/1362_09_45.jpg)
- en: With **Input** track still selected, go to the **Inspector** view and change
    the **Receive** setting in **Send** to **Music\Duck Volume** and its **Send**
    level to `0.00 db`, as shown:![How to do it...](img/1362_09_46.jpg)
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在仍然选择**输入**轨道的情况下，转到**检查器**视图，并将**发送**中的**接收**（**Receive**）设置更改为**音乐\Duck Volume**，并设置其**发送**级别为`0.00
    db`，如图所示：![如何操作...](img/1362_09_46.jpg)
- en: 'Select the **Music** track. From the **Inspector** view, change the settings
    on the **Duck Volume** as follows: **Threshold**: -`40.00 db`; **Ratio**: `300.00
    %`; **Attack Time**: `100.00 ms`; **Release Time**: `2000.00 ms`, as shown in
    the following screenshot:![How to do it...](img/1362_09_47.jpg)'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**音乐**（**Music**）轨道。从**检查器**（**Inspector**）视图，按照以下方式更改**Duck Volume**的设置：**阈值**：-`40.00
    db`；**比率**：`300.00 %`；**攻击时间**：`100.00 ms`；**释放时间**：`2000.00 ms`，如图所示：![如何操作...](img/1362_09_47.jpg)
- en: Test the scene again. Entering the trigger object will cause the soundtrack
    volume to drop considerably, recovering the original volume in 2 seconds.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次测试场景。进入触发对象将导致音轨音量显著降低，2秒后恢复到原始音量。
- en: How it works...
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In this recipe, we have created, in addition to Music and Sound FX, a group
    named **Input**, to which we have routed the audio clip that triggers the **Duck
    Volume** effect attached to our music track. The **Duck Volume** effect changes
    the track's volume whenever it receives an input that is louder than indicated
    in its **Threshold** setting. In our case, we have sent the **Input** track as
    input, and adjusted the settings so the volume will be reduced as soon as 0.1
    seconds after the input had been received, turning back to its original value
    of 2 seconds after the input has ceased. The amount of volume reduction was determined
    by our **Ratio** of **300.00 %**. Playing around with the setting values will
    give you a better idea on how each parameter affects the final result. Also, make
    sure to visualize the graphic as the trigger sound is played. You will be able
    to see how the **Input** sound passes the threshold, triggering the effect.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，除了音乐和声音效果（Sound FX），我们还创建了一个名为**输入**（**Input**）的组，我们将触发我们音乐轨道上附加的**Duck
    Volume**效果的音频剪辑路由到这个组。**Duck Volume**效果会在接收到比其**阈值**设置中指示的更响亮的输入时改变轨道的音量。在我们的例子中，我们将**输入**轨道作为输入发送，并调整设置，使得在接收到输入后的0.1秒内音量降低，输入停止后2秒恢复到原始值。音量降低的量由我们的**比率**（**Ratio**）**300.00
    %**决定。调整设置值将更好地了解每个参数如何影响最终结果。此外，确保在触发声音播放时可视化图形。您将能够看到**输入**声音如何通过阈值，触发效果。
- en: '![How it works...](img/1362_09_48.jpg)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/1362_09_48.jpg)'
- en: Duck Volume
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: Duck Volume
- en: Also, please note that we have organized our tracks so that the other sound
    clips (other than speech) will not affect the volume of the music—but every music
    clip will be affected by audio clips sent to the input track.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请注意我们已经组织了我们的音轨，以便其他声音剪辑（除了语音）不会影响音乐的音量——但是每个音乐剪辑都会受到发送到输入音轨的音频剪辑的影响。
- en: See also
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Adding volume control with Audio Mixers* recipe in this chapter
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的 *使用音频混音器添加音量控制* 菜单
- en: The *Making a dynamic soundtrack with Snapshots* recipe in this chapter
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的 *使用快照制作动态音轨* 菜单
