- en: Exploring Threading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will be looking at these recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a library that can perform several things at once
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a .NET Core console application to use the library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an async method with tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a WPF application to use the library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a thread pool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a .NET console application to use the library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Readers should have a basic knowledge of C#. They should also have a basic knowledge
    of using Visual Studio, installing packages using NuGet, and referencing libraries
    within projects from other projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code files for this chapter can be found on GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/DotNET-Standard-2-Cookbook/tree/master/Chapter06](https://github.com/PacktPublishing/DotNET-Standard-2-Cookbook/tree/master/Chapter06)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://goo.gl/BhsEpf](https://goo.gl/BhsEpf)'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Threading enables your C# application to do more than one operation at a time.
    Simply put, you can allow a user to input their personal information and monitor
    it while doing a background process. As an example, in strategy games, a character
    might be fetching some wood from a forest. At the same time, another one could
    be building a wall and another shooting at the enemy. Let's have a look at how
    threading works inside a .NET Standard 2.0 library.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a library that can perform several things at once
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will be looking at the basics of threading and we will make
    use of the `System.Threading` namespace inside a .NET Standard 2.0 library.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's make sure we have the latest Visual Studio 2017 installed and configured
    for creating a .NET Standard 2.0 library before we get started building our library.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Visual Studio 2017.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click File | New | Projectto create a project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the New Project dialog box, expand the Other Project Types node in the left-hand
    pane and select Visual Studio Solutions. In the right-hand pane, select Blank
    Solution**.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Name: textbox, type `Chapter6.Threads` and, in the Location: textbox,
    select a path from the drop-down box or click on the Browse... button to locate
    a path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2880e605-1be4-47f5-81aa-b81f8ccdcd88.png)'
  prefs: []
  type: TYPE_IMG
- en: Click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, the Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/25fb32f2-0873-4565-8ef6-622f55b7782d.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, right-click on the `Chapter6.Threads` label in the Solution Explorer and
    select Add | New Project**.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the New Project dialog box, expand the Visual C# node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select .NET Standard in the left-hand pane and Class Library (.NET Standard)
    in the right-hand pane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00db53de-12e7-4ba6-aa18-8a3bcde8596f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, in the Name: textbox, type `Chapter6.Threads.ThreadLib`. Leave the other
    defaults as they are and click OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9ef38dd6-bab0-4a9e-a2d3-be6c956b4087.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, the Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3e5438cc-4c10-4eac-b598-4d096a7f572d.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, select `Class1.cs` in the Solution Explorer and press *F2* to rename the
    file `ThreadGenerator.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Answer Yes in the confirmation dialog box that asks to rename the class name
    as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, double-click on the `ThreadGenerator.cs` label in the Solution Explorer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s scroll up in the code window and add the following `using` directive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s add this class-level variable to store our text messages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Create this method inside the `ThreadGenerator` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, create this support method for the main `StartThreads()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Let's perform a quick build by pressing *Ctrl* + *Shift* + *B* to check the
    syntax.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In steps 1 to 14, we created a new blank solution and added a .NET Standard
    2.0 class library. Then we gave the default template class a proper name. In step
    15, we added the `using` directive required for threading support, which is `System.Threading`,
    and we have used the `System.Text` namespace to get the  `StringBuilder` class
    to store our messages.
  prefs: []
  type: TYPE_NORMAL
- en: We have used `StringBuilder` over `String`. If you are wondering why, it is
    because `StringBuilder` is mutable. When you perform operations such as insert,
    replace, or append, a `StringBuilder` object doesn't create a new instance every
    time. It will update one space in the memory without creating a new space in the
    memory. However, `String` is immutable, which means that if you create a `String`
    object, then you cannot modify it and it always creates a new `String` object
    in the memory.
  prefs: []
  type: TYPE_NORMAL
- en: In step 16, we created an instance of the `StringBuilder` class, which will
    handle all the messages and store them. Then, we created a method that returns
    a `StringBuilder`. This `StringBuilder` will contain all the messages generated
    during execution of the `StartThreads()` methods created in step 17.
  prefs: []
  type: TYPE_NORMAL
- en: 'In these three lines, we picked up the current running thread, which is the
    main thread, and gave it a name. Then, we stored a message in the `StringBuilder`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In these lines, we created another new thread and used the `helper` method
    created in step 18 to execute the thread. This `private helper` method loops through
    100 steps, adds a message to the string builder, and sleeps for 100 milliseconds
    at each step:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'It also stores the relevant message inside the `StringBuilder` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In the final lines of code, we executed another loop in the main thread and
    stored messages inside the `StringBuilder` to identify which threads are being
    executed. Finally, we performed a quick build to check the syntax.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a .NET Core console application to use the library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will be building a .NET Core console application. This application
    will use the library we built in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure you have completed the previous recipe and it builds correctly. Let's
    get started on the application to use the library.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Visual Studio 2017.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, open the solution from the previous recipe. Click File | Open | Open Project/Solution, or
    press *Ctrl* + *Shift* + *O*, and select the `Chapter6.Threads` solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Ctrl* + *Shift* + *B* for a quick build to check that everything is fine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the `Chapter6.Threads` solution label. Click File | Add | New Project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Add New Project template dialog box, expand the Visual C# node in the
    left-hand pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select .NET Core and select Console App (.NET Core) in the right-hand pane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/359af982-84dd-4ed7-a770-f7a0382aad2f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, in the Name: textbox, type `Chapter6.Threads.ThreadsCore` as the name
    of the project. The rest of the fields should be left as they are:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f1f06b36-005a-457e-8c2b-4153b9c2de72.png)'
  prefs: []
  type: TYPE_IMG
- en: Click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, the Solution Explorer (press *Ctrl* + *Alt* + *L*) should display like
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/eb2e5d2b-7213-4736-a51c-58226db82457.png)'
  prefs: []
  type: TYPE_IMG
- en: Right-click on the Dependencies label in the `Chapter6.Threads.ThreadsCore`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Add Reference.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Reference Manager, click on the Projects label in the right-hand pane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/792d0cbe-5cf1-4beb-aea8-3779b0f870b8.png)'
  prefs: []
  type: TYPE_IMG
- en: Check the `Chapter6.Threads.ThreadLib`project in the left-hand pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, double-click on the `Program.cs` label in the Solution Explorer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Scroll up in the code window and add the following `using` directive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, delete any existing code generated by Visual Studio in the `Main()` method
    and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Press *F5* to execute the app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see output like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e1df3453-705d-4118-bb2e-1d6075ba3f03.png)'
  prefs: []
  type: TYPE_IMG
- en: Press *Enter* to exit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In steps 1 to 9, we opened an existing solution with a .NET Standard 2.0 library
    project. Then, we added a .NET Core console application to that solution. In steps
    10 to 14, we added the .NET Standard 2.0 library project as a dependency to the
    console application. Then, in step 16, we used the `using` directive to reference
    the class library. This will allow us to access the available functionality from
    the library.
  prefs: []
  type: TYPE_NORMAL
- en: In step 17, we created an instance of the `ThreadGenerator` class available
    in the class library. Then, we used its `StartThreads()` method and stored the
    returned `StringBuilder` in a variable. Finally, we displayed the output using
    `Console.WriteLine` and waited for a key press by the user in the last line. In
    steps 18 to 20, we executed the application and saw the output.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an async method with tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will be looking at the asynchronous programming capabilities
    found in the C# language. C# has language-level asynchronous capabilities, and
    therefore you don't have to rely on a third-party library. If you have I/O operations,
    such as reading data from a network or from a database, you can utilize asynchronous
    programming. You can also use asynchronous programming for CPU-bound, expensive
    calculations.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure you have Visual Studio 2017 updated. It is also assumed that you have
    prior experience in asynchronous programming and what it means.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Visual Studio 2017.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click File | New | Projectto create a project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the New Project dialog box, expand the Other Project Types node in the left-hand
    pane and select Visual Studio Solutions. In the right-hand pane, select Blank
    Solution**.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Name: textbox, type `Chapter6.AsyncTasks` and, in the Location: textbox,
    select a path from the drop-down box or click on the Browse... button to locate
    a path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1420cdf5-3731-4e51-9d79-704bab1a5435.png)'
  prefs: []
  type: TYPE_IMG
- en: Click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, the Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2a4f681f-46f2-4851-9371-ac7109934dbf.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, right-click on the `Chapter6.AsyncTasks` label in the Solution Explorer
    and select Add | New Project**.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the New Project dialog box, expand the Visual C# node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select .NET Standard in the left-hand pane and Class Library (.NET Standard)
    in the right-hand pane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fbce3b1b-3d8b-4cad-b90a-2992c2deeddc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, in the Name: textbox, type `Chapter6.AsyncTasks.AsyncLib`. Leave the other
    defaults as they are and click OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f3f1fc01-8569-47f5-adc1-1db6e1daaf8e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, the Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/47c2d979-d33d-4e7c-83fd-4e6cf4684d07.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, select `Class1.cs` in the Solution Explorer and press *F2* to rename the
    file `SiteReader.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Answer Yes in the confirmation dialog box that asks to rename the class name
    as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, double-click on the `SiteReader.cs` label in the Solution Explorer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s scroll up in the code window and add the following using directive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s add this class-level variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following method inside the open and closed curly brackets of the `SiteReader`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Press *Ctrl* + *Shift* + *B* for a quick build.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In steps 1 to 12, we added a blank solution and then we added a .NET Standard
    2.0 class library to the solution. In these steps, we assigned proper names to
    the solution and the project. In steps 13 and 14, we renamed the default class
    template to something more meaningful. You can also delete this class and create
    a new one.
  prefs: []
  type: TYPE_NORMAL
- en: In step 15, we added two namespaces to the code. In step 16, we created a class-level
    variable and created an instance of the `HttpClient` class. In step 17, we created
    an asynchronous public method that reads the given site content as a `string`
    and returns the read content.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we performed a quick build to check the syntax.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a WPF application to use the library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will be creating a Windows Presentation Foundation application
    to use the library. A basic user interface will be created to show the content.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure you have opened the .NET Standard 2.0 class library we built in the
    previous recipe. If not, make sure you complete the previous recipe before we
    dive into this one.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Visual Studio 2017.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, open the solution from the previous recipe. Click File | Open | Open Project/Solution, or
    press *Ctrl* + *Shift* + *O*, and select the `Chapter6.AsyncTasks` solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Ctrl* + *Shift* + *B* for a quick build to check that everything is fine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the `Chapter6.AsyncTasks` solution label. Click File | Add | New Project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Add New Project template dialog box, expand the Visual C# node in the
    left-hand pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select Windows Classic Desktop and select WPF App (.NET Framework) in the right-hand
    pane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3db8aeb7-f568-469e-94c7-e3abe4c01430.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, in the Name: textbox, type `Chapter6.AsyncTasks.WPFSiteContent` as the
    name of the project. The rest of the fields can be left as they are:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dc1166bc-207b-4165-974a-3bd72617fbc0.png)'
  prefs: []
  type: TYPE_IMG
- en: Click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, the Solution Explorer (press *Ctrl* + *Alt* + *L*) should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/570b9caf-66a4-464a-83a7-9389b27249bf.png)'
  prefs: []
  type: TYPE_IMG
- en: Right-click on the References label in the `Chapter6.AsyncTasks.WPFSiteContent`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Add Reference.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Reference Manager, click on the Projects label in the right-hand pane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c0134b69-9335-480a-b832-2066baff73b9.png)'
  prefs: []
  type: TYPE_IMG
- en: Check the `Chapter6.AsyncTasks.AsyncLib`project in the left-hand pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, click on the `MainWindow.xaml` tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the toolbox, add a TextBox control, a Button control, and a WebBrowser
    control to the MainWindow form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/47d81c33-d66d-4244-8859-661712286c41.png)'
  prefs: []
  type: TYPE_IMG
- en: Select the TextBox and press *F4* to load the Properties window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the following properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **Control** | **Property** | **Value** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| TextBox | Name | `UrlTextBox` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| TextBox | Text | `Delete existing text and leave blank` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Button | Name | `GoButton` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Button | Content | `Go` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| WebBrowser | Name | `ContentBrowser` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Double-click on the Go button to reach the code window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll up till you reach the `using` directives.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following `using` directive to the last line of the directives:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Scroll down and add the following code inside the `GoButton_Click()` event.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the `GoButton_Click` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Add this code inside the `GoButton_Click()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Press *F5* to execute the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type a URL inside the textbox and click on the Go button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see output similar to this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ebdcc10c-e474-471c-88b4-d58bfe0e8167.png)'
  prefs: []
  type: TYPE_IMG
- en: Close the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In steps 1 to 10, we opened the existing solution for the .NET Standard 2.0
    library project. Then we added a WPF Project to the solution. In steps 11 to 14,
    we added a reference to the class library we built in the previous recipe. In
    steps 16 to 18, we added controls to the `MainWindow` of the WPF application and
    then we changed a few properties.
  prefs: []
  type: TYPE_NORMAL
- en: In step 21, we referenced the class library using a `using` directive. In step
    23, we decorated the `GoButton_Click()` method with an `async` keyword. In step
    24, the first three lines of code demonstrate that we have created a variable
    to store the URL from the TextBox after it created an instance of the `SiteReader`
    class. Then, we used the `ReadSiteConent()` asynchronous method to read the content
    of a given URL. Finally, we displayed that content in the `WebBrowser` control.
  prefs: []
  type: TYPE_NORMAL
- en: In steps 25 to 27, we tested the application.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a thread pool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will be looking at thread pools in C#. Basically, a thread
    pool is a collection of threads that can be used to perform tasks in the background.
    Once a thread completes its task, then it is sent to a pool of waiting threads,
    where it can be reused. Let's create a .NET Standard 2.0 library that uses thread
    pools.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure you have the latest version of Visual Studio 2017 up and running.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Visual Studio 2017.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click File | New | Projectto create a project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the New Project dialog box, expand the Other Project Types node in the left-hand
    pane and select Visual Studio Solutions. In the right-hand pane, select Blank
    Solution**.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Name: textbox, type `Chapter6.ThreadPools` and, in the Location: textbox,
    select a path from the drop-down box or click on the Browse... button to locate
    a path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1e853955-d4b0-4b88-bc19-dd8629fe4c6e.png)'
  prefs: []
  type: TYPE_IMG
- en: Click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, the Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ec77958d-bbfa-42ce-88f8-b81d5464ea23.png)'
  prefs: []
  type: TYPE_IMG
- en: Right-click on the `Chapter6.ThreadPools` label in the Solution Explorer and
    select Add | New Project**.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the New Project dialog box, expand the Visual C# node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select .NET Standard in the left-hand pane and Class Library (.NET Standard)
    in the right-hand pane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00b25aa5-02d0-4a4d-a786-410d907d5c73.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Name: textbox, type `Chapter6.ThreadPools.PoolLib`. Leave the other
    defaults as they are and click OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9bb4070b-d2be-4ae0-95b5-5cbc28093b2d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, the Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/19ad79e3-3945-44b9-8cfd-590fdc5cac38.png)'
  prefs: []
  type: TYPE_IMG
- en: Select `Class1.cs` in the Solution Explorer and press *F2* to rename the file
    `ThreadList.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Answer Yes in the confirmation dialog box that asks to rename the class name
    as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the `ThreadList.cs` label in the Solution Explorer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s scroll up in the code window and add the following using directive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add a class-level variable that holds a `StringBuilder`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a main `ProcessPool()` method to the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let''s add the helper method to process the thread:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Let's perform a quick build by pressing *Ctrl* + *Shift* + *B*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In steps 1 to 10, we created a blank solution and added a .NET Standard 2.0
    library to the project. In between, we assigned meaningful names to the project
    and to the solution. In step 12, we renamed the default class created by Visual
    Studio. In step 15, we added the namespaces required to build the library.
  prefs: []
  type: TYPE_NORMAL
- en: In step 16, we created a variable to hold the messages using the `StringBuilder`
    class. This is a class-level variable that is shared across methods inside the
    class. In step 17, we created a method that creates a thread pool using a helper
    method in step 18\. Inside that method, we use the `messages` variable to store
    the messages during the process.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, in step 19, we performed a quick build to check for the correct syntax.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a .NET console application to use the library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will be looking at a .NET console-based application to use
    the library. This console app will reference the library created in the previous
    recipe and use it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure you have completed the previous recipe. If you have completed it,
    open it using Visual Studio 2017 and perform a quick build to check that everything
    is fine.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Visual Studio 2017.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, open the solution from the previous recipe. Click File | Open | Open Project/Solution, or
    press *Ctrl* + *Shift* + *O*, and select the `Chapter6.ThreadPools` solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Ctrl* + *Shift* + *B* for a quick build to check that everything is fine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the `Chapter6.ThreadPools` solution label. Click File | Add | New Project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Add New Project template dialog box, expand the Visual C# node in the
    left-hand pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select Windows Classic Desktop and select Console App (.NET Framework) in the
    right-hand pane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/60ec763e-38da-4eb1-97cd-58217b461a73.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Name: textbox, type `Chapter6.ThreadPools.PoolConsole` as the name of
    the project. The rest of the fields can be left as they are:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/295b12fa-c00f-4e0f-b878-3a5ff500fe12.png)'
  prefs: []
  type: TYPE_IMG
- en: Click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, the Solution Explorer (press *Ctrl* + *Alt* + *L*) should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a2f3caf7-9a7d-4cb6-85cd-ea169ac486af.png)'
  prefs: []
  type: TYPE_IMG
- en: Right-click on the References label in the `Chapter6.ThreadPools.PoolConsole`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Add Reference.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Reference Manager, click on the Projects label in the right-hand pane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/21689d31-89ff-4731-ab0e-3bbf3806fa2c.png)'
  prefs: []
  type: TYPE_IMG
- en: Check `Chapter6.ThreadPools.PoolLib`project in the left-hand pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the `Program.cs` label in the Solution Explorer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Scroll up in the code window and add the following `using` directive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add the code inside the `Main()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, press *F5* to test our application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cba65b5b-f6d9-42a5-859c-6c5f83119d7d.png)'
  prefs: []
  type: TYPE_IMG
- en: Press *Enter* to exit the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In steps 1 to 9, we opened the solution created in the previous recipe. Then,
    we added a .NET console application to the project. In steps 10 to 14, we added
    a reference to the library we created in the previous recipe. In step 16, we created
    the reference in the code for the library. In step 17, we  added code to create
    an instance of the `ThreadList` class. We called the `ProcessPool()` and stored
    the return value in a variable.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we displayed the output in the console window and, in steps 18 and
    19, we tested the application.
  prefs: []
  type: TYPE_NORMAL
