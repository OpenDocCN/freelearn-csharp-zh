- en: '14'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building Web User Interfaces Using ASP.NET Core
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is about building web user interfaces with ASP.NET Core. You will
    learn about ASP.NET Core MVC views, Razor syntax, HTML and Tag Helpers, internationalizing
    your website, and how to use Bootstrap for quick user interface prototyping.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up an ASP.NET Core MVC website
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining web user interfaces with Razor views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Localizing and globalizing with ASP.NET Core
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining web user interfaces with Tag Helpers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Output caching
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up an ASP.NET Core MVC website
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The **Model-View-Controller** (**MVC**) design pattern allows a clean separation
    between technical concerns, as shown in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Models**: Classes that represent the data entities and view models used on
    the website.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Views**: Razor files, that is, `.cshtml` files, that render data in view
    models into HTML web pages. Blazor uses the `.razor` file extension, but do not
    confuse them with Razor files!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Controllers**: Classes that execute code when an HTTP request arrives at
    the web server. The controller methods usually create a view model that may contain
    entity models and pass it to a view to generate an HTTP response to send back
    to the web browser or other client.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ASP.NET Core has many Razor file types, which can be confusing because they
    all use the term “Razor”, so I will now remind you of them and highlight the important
    similarities and differences, as shown in *Table 14.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Technology** | **Special filename** | **File extension** | **Directive**
    |'
  prefs: []
  type: TYPE_TB
- en: '| Razor Component (for Blazor) |  | `.razor` |  |'
  prefs: []
  type: TYPE_TB
- en: '| Razor Component (for Blazor with page routing) |  | `.razor` | `@page` |'
  prefs: []
  type: TYPE_TB
- en: '| Razor Page |  | `.cshtml` | `@page` |'
  prefs: []
  type: TYPE_TB
- en: '| Razor View (for MVC) |  | `.cshtml` |  |'
  prefs: []
  type: TYPE_TB
- en: '| Razor Layout | `_{customname}` | `.cshtml` |  |'
  prefs: []
  type: TYPE_TB
- en: '| Razor View (partial) | `_{customname}` | `.cshtml` |  |'
  prefs: []
  type: TYPE_TB
- en: '| Razor View Start | `_ViewStart` | `.cshtml` |  |'
  prefs: []
  type: TYPE_TB
- en: '| Razor View Imports | `_ViewImports` | `.cshtml` |  |'
  prefs: []
  type: TYPE_TB
- en: 'Table 14.1: Important similarities and differences between Razor files'
  prefs: []
  type: TYPE_NORMAL
- en: '**Warning!** Be careful to use the correct file extension and directive at
    the top of the file or you will get unexpected behavior.'
  prefs: []
  type: TYPE_NORMAL
- en: A Razor View file is technically identical to a Razor Layout or a Razor View
    (partial). That is why it is so important to follow the convention of prefixing
    a layout or partial view with an underscore.
  prefs: []
  type: TYPE_NORMAL
- en: 'What turns a Razor View into a Razor Layout is the name of the Razor file being
    set as the `Layout` property of another Razor file or the default layout in the
    `_ViewStart.cshtml` file, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'What turns a Razor View into a Razor View (partial) is the Razor View name
    being used in a `<partial>` component on a page, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Good Practice**: The naming convention for special and shared Razor files
    like layouts and partial views is to prefix them with an underscore `_`, for example,
    `_ViewStart.cshtml`, `_Layout.cshtml`, or `_Product.cshtml` (this might be a partial
    view for rendering a product).'
  prefs: []
  type: TYPE_NORMAL
- en: Creating an ASP.NET Core MVC website
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will use a project template to create an ASP.NET Core MVC website project
    that has a local database for authenticating and authorizing users.
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio 2022 defaults to using SQL Server LocalDB for the accounts database.
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio Code (or more accurately the `dotnet` CLI tool) uses SQLite by
    default and you can specify a switch to use SQL Server LocalDB instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see it in action:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use your preferred code editor to create an ASP.NET Core MVC website project
    with authentication accounts stored in a database, as defined in the following
    list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Project template: **ASP.NET Core Web App (Model-View-Controller) [C#]** / `mvc`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Project file and folder: `Northwind.Mvc`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Solution file and folder: `Chapter14`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Authentication type: **Individual Accounts** / `--auth Individual`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Configure for HTTPS: Selected.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Enable Docker: Cleared.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Do not use top-level statements: Cleared.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Build the `Northwind.Mvc` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you created the MVC project using Visual Studio 2022, then the database
    for authentication and authorization will be stored in SQL Server LocalDB. But
    the database does not yet exist. At a command prompt or terminal, in the `Northwind.Mvc`
    folder, enter the command to run database migrations so that the database used
    to store credentials for authentication is created, as shown in the following
    command:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: If you created the MVC project using `dotnet new`, then the database for authentication
    and authorization will be stored in SQLite and the file has already been created,
    named `app.db`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the root folder for the MVC website project, in the `appsettings.json` file,
    note the connection string for the authentication database named `DefaultConnection`,
    as shown in the following configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Using SQL Server LocalDB:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Using SQLite:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Exploring the default ASP.NET Core MVC website
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s review the behavior of the default ASP.NET Core MVC website project template:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Northwind.Mvc` project, expand the `Properties` folder, open the `launchSettings.json`
    file, and for the `https` profile, for its `applicationUrl` setting, change the
    port numbers to `5141` for `https` and `5142` for `http`, as shown in the following
    setting:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the changes to the `launchSettings.json` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In your preferred code editor or at the command line, start the `Northwind.Mvc`
    project with the `https` profile and using Chrome as the browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are using Visual Studio 2022, then select the `https` profile as the
    **Startup Project**, and **Google Chrome** as the **Web Browser**, then start
    the `Northind.Mvc` website project without debugging.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you are using Visual Studio Code, then at the command prompt or terminal,
    enter the following command: `dotnet run --launch-profile https`. Start Chrome
    and navigate to: `https://localhost:5141/`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: On Windows, if the **Windows Defender Firewall** displays a **Windows Security
    Alert** because it “has blocked some features of this app,” then click **Allow
    access**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In Chrome, open **Developer Tools**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Refresh the home page and note the following, as shown in *Figure 14.1*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The top navigation menu with links to **Home**, **Privacy**, **Register**, and
    **Login**. If the viewport width is 575 pixels or less, then the navigation collapses
    into a hamburger menu.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The title of the website, **Northwind.Mvc**, shown in the header and footer.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B19587_14_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.1: The ASP.NET Core MVC project template website home page'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding visitor registration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default, passwords must have at least one non-alphanumeric character, at
    least one digit (0-9), and at least one uppercase letter (A-Z). I use `Pa$$w0rd`
    in scenarios like this when I am just exploring.
  prefs: []
  type: TYPE_NORMAL
- en: The MVC project template follows best practices for **double-opt-in** (**DOI**),
    meaning that after filling in an email address and password to register, an email
    is sent to the email address, and the visitor must click a link in that email
    to confirm that they want to register.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have not yet configured an email provider to send that email, so we must
    simulate that step:'
  prefs: []
  type: TYPE_NORMAL
- en: Close the **Developer Tools** pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the top navigation menu, click **Register**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter an email and password, and then click the **Register** button. (I used
    `test@example.com` and `Pa$$w0rd`.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the link with the text **Click here to confirm your account** and note
    that you are redirected to a **Confirm email** web page that you could customize.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the top navigation menu, click **Login**, enter your email address and password
    (note that there is an optional checkbox to remember you, and there are links
    if the visitor has forgotten their password or they want to register as a new
    visitor), and then click the **Log in** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click your email address in the top navigation menu. This will navigate to an
    account management page. Note that you can set a phone number, change your email
    address, change your password, enable two-factor authentication (if you add an
    authenticator app), and download and delete your personal data. This last feature
    is good for compliance with legal regulations like the European GDPR.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close Chrome, and then at the command prompt or terminal for the MVC website,
    press *Ctrl* + *C* to cleanly shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reviewing an MVC website project structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In your code editor, in Visual Studio 2022 **Solution Explorer** (toggle on
    **Show All Files**) or Visual Studio Code **EXPLORER – SOLUTION EXPLORER**, review
    the structure of an MVC website project, as shown in *Figure 14.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19587_14_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.2: VS Code and VS 2022 Solution Explorers for an ASP.NET Core MVC
    project'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will look in more detail at some of these parts later, but for now, note
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Areas`: This folder contains nested folders and a file needed to integrate
    your website project with ASP.NET Core Identity, which is used for authentication.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bin`, `obj`: These folders contain temporary files needed during the build
    process and the compiled assemblies for the project. Solution Explorer for Visual
    Studio Code + C# Dev Kit does not show hidden folders like these, but you can
    see them in the folder view (labeled **CHAPTER14** in *Figure 14.2*).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Controllers`: This folder contains C# classes that have methods (known as
    actions) that fetch a model and pass it to a view, for example, `HomeController.cs`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Data`: This folder contains Entity Framework Core migration classes used by
    the ASP.NET Core Identity system to provide data storage for authentication and
    authorization, for example, `ApplicationDbContext.cs`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Models`: This folder contains C# classes that represent all the data gathered
    together by a controller and passed to a view, for example, `ErrorViewModel.cs`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Properties`: This folder contains a configuration file for Kestrel (or IIS
    or IIS Express on Windows) named `launchSettings.json`, for launching the website
    during development. This file is only used on the local development machine and
    is not deployed to your production website.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Views`: This folder contains the `.cshtml` Razor files that combine HTML and
    C# code to dynamically generate HTML responses. The `_ViewStart.cshtml` file sets
    the default layout and `_ViewImports.cshtml` imports common namespaces used in
    all views like Tag Helpers:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Home`: This subfolder contains Razor files for the home and privacy pages.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Shared`: This subfolder contains Razor files for the shared layout, an error
    page, and two partial views for logging- in and validation scripts.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wwwroot`: This folder contains static content used by the website, such as
    CSS for styling, libraries of JavaScript, JavaScript for this website project,
    and a `favicon.ico` file. You also put images and other static file resources
    like PDF documents in here. The project template includes Bootstrap and jQuery
    libraries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`appsettings.json` and `appsettings.Development.json`: These files contain
    settings that your website can load at runtime, for example, the database connection
    string for the ASP.NET Core Identity system and logging levels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Northwind.Mvc.csproj`: This file contains project settings like the use of
    the Web .NET SDK, an entry for SQLite to ensure that the `app.db` file is copied
    to the website’s output folder, and a list of NuGet packages that your project
    requires such as EF Core for your chosen database provider, including:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Microsoft.AspNetCore.Identity.EntityFrameworkCore`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Microsoft.AspNetCore.Identity.UI`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Microsoft.EntityFrameworkCore.Sqlite` or `Microsoft.EntityFrameworkCore.SqlServer`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Microsoft.EntityFrameworkCore.Tools`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Program.cs`: This file defines an auto-generated `Program` class that contains
    the `<Main>$` entry point. It builds a pipeline for processing incoming HTTP requests
    and hosts the website using default options, like configuring the Kestrel web
    server and loading `appsettings`. It adds and configures services that your website
    needs, for example, ASP.NET Core Identity for authentication, SQLite or SQL Server
    for identity data storage, and so on, and routes for your application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you choose to use SQLite instead of SQL Server for the ASP.NET Core Identity
    database, then you will also see a file named `app.db`. This is the SQLite database
    that stores registered visitors.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Referencing an EF Core class library and registering a data context
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will reference the EF Core model that you created in *Chapter 3*, *Building
    Entity Models for SQL Server Using EF Core*:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Northwind.Mvc.csproj` project file, treat warnings as errors and add
    a project reference to the Northwind database context project, as shown in the
    following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `Include` path must not have a line break.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'At the command prompt or terminal, build the `Northwind.Mvc` project, as shown
    in the following command: `dotnet build`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `Program.cs`, import the namespace to use the `AddNorthwindContext` extension
    method, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the section that adds services to the container, add a statement that registers
    `NorthwindContext` as a service, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Defining web user interfaces with Razor views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s review how we can build the user interface of a web page in a modern ASP.NET
    Core MVC website.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Razor views
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In MVC, the V stands for *view*. The responsibility of a view is to transform
    a model into HTML or other formats.
  prefs: []
  type: TYPE_NORMAL
- en: There are multiple **view engines** that could be used to do this. The default
    view engine is called **Razor**, and it uses the `@` symbol to indicate server-side
    code execution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s review the home page view and how it uses a shared layout:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Views/Home` folder, open the `Index.cshtml` file and note the block
    of C# code wrapped in `@{ }`. This will execute first and can be used to store
    data that needs to be passed into a shared layout file, like the title of the
    web page, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Note the static HTML content in the `<div>` element that uses Bootstrap classes
    like `text-center` and `display-4` for styling, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Views` folder, open the `_ViewImports.cshtml` file and note that it
    imports the namespace for the project and the namespace for the `Models` folder
    in the project, and then adds the ASP.NET Core Tag Helpers, which we will learn
    more about later in this chapter, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Views` folder, open the `_ViewStart.cshtml` file. It gets executed
    when the `View` method is called in a controller class. It is used to set defaults
    that apply to all views. For example, note that it sets the `Layout` property
    of all views to a shared layout file (without its file extension), as shown in
    the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This file is not executed when a partial view is rendered, for example, when
    you call the `PartialView` method instead of the `View` method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the `Shared` folder, open the `_Layout.cshtml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Note that `<title>` is being set from the `ViewData` dictionary that was set
    earlier in the `Index.cshtml` view, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The title is shown in the browser tab for the current page or the browser window.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Note the rendering of links to support Bootstrap and a site stylesheet, where
    `~` means the `wwwroot` folder in the project, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Note the rendering of a navigation bar in the header, as shown in the following
    markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Note the rendering of a collapsible `<div>` containing a partial view named
    `_LoginPartial` for logging in, and hyperlinks to allow users to navigate between
    pages using ASP.NET Core Tag Helpers with attributes like `asp-controller` and
    `asp-action`, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `<a>` elements use Tag Helper attributes named `asp-controller` and `asp-action`
    to specify the controller name and action name that will execute when the link
    is clicked on. The `asp-area` attribute can be used to organize and group pages
    within large, complex MVC websites. If you want to navigate to a feature in a
    Razor Class Library, then you can also use `asp-area` to specify the feature name.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Note the rendering of the body inside the `<main>` element, as shown in the
    following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `RenderBody` method injects the contents of a specific Razor view for a
    page like the `Index.cshtml` file at that point in the shared layout.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Note the rendering of `<script>` elements at the bottom of the page so that
    it does not slow down the display of the page, and that you can add your own script
    blocks into an optional defined section named `Scripts`, as shown in the following
    markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `Shared` folder, open the `_LoginPartial.cshtml` file, and note the `if`
    statement, which if the visitor is logged in renders links to their account and
    to log out, or if they are not logged in, renders links to register or log in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Shared` folder, open the `_ValidationScriptsPartial.cshtml` file, and
    note it contains two script blocks for adding validation to the client-side browser
    using JavaScript, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Good Practice**: You need to add this partial view to the `Scripts` section
    if you want to enable validation in a Razor View like `Index.cshtml`, as shown
    in the following markup:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `Shared` folder, open the `Error.cshtml` file, and note it contains markup
    to render an exception.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Prototyping with Bootstrap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Bootstrap is the world’s most popular framework for building responsive, mobile-first
    websites. It combines CSS stylesheets with JavaScript libraries to implement its
    functionality.
  prefs: []
  type: TYPE_NORMAL
- en: It is a good choice for prototyping a website user interface, although before
    going public you might want to hire a web designer to build a custom Bootstrap
    theme or replace it with a completely custom set of CSS stylesheets to give your
    website a distinct brand.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap is like Marmite. Some developers love it; some hate it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Good reasons to use Bootstrap include:'
  prefs: []
  type: TYPE_NORMAL
- en: It saves time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is customizable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is open-source.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is well documented officially and has lots of answers about it on sites like
    Stack Overflow.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'But implementing Bootstrap without care has the following negatives:'
  prefs: []
  type: TYPE_NORMAL
- en: Your website will look generic.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bootstrap themes do not work well with the default views built-in with ASP.NET
    Core Identity.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is heavy compared to a hand-crafted solution.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the previous edition of this book, I included about five pages reviewing
    some of the features of Bootstrap that are most used. But Bootstrap is not .NET,
    and the second edition is already crammed with content, so I have moved the Bootstrap
    content to an online-only resource section. You can read it at the following link:
    [https://github.com/markjprice/apps-services-net8/blob/main/docs/ch14-bootstrap.md](https://github.com/markjprice/apps-services-net8/blob/main/docs/ch14-bootstrap.md).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Good Practice**: As well as defining your own styles, base your styles on
    a common library, such as Bootstrap, that implements responsive design. However,
    if you are building a website that needs a distinct identity or brand, make sure
    you use Bootstrap’s theming support. Do not just accept the defaults.'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Razor syntax and expressions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we customize the home page view, let’s review an example Razor file.
    The file has an initial Razor code block that instantiates an order with price
    and quantity and then outputs information about the order on the web page, as
    shown in the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding Razor file would result in the following incorrect output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Although Razor markup can include the value of any single property using the
    `@object.property` syntax, you should wrap expressions in parentheses, as shown
    in the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding Razor expression results in the following correct output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Understanding HTML Helper methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When creating a view for ASP.NET Core MVC, you can use the `Html` object and
    its methods to generate markup. When Microsoft first introduced ASP.NET MVC in
    2009, these HTML Helper methods were the way to programmatically render HTML.
  prefs: []
  type: TYPE_NORMAL
- en: Modern ASP.NET Core retains these HTML Helper methods for backward compatibility
    and provides Tag Helpers, which are usually easier to read and write in most scenarios.
    But there are notable situations where Tag Helpers cannot be used, like in Razor
    components.
  prefs: []
  type: TYPE_NORMAL
- en: You will learn about Tag Helpers later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some useful `Html` object methods include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ActionLink`: Use this to generate an anchor `<a>` element that contains a
    URL path to the specified controller and action. For example, `Html.ActionLink(linkText:
    "Binding", actionName: "ModelBinding", controllerName: "Home")` would generate
    `<a href="/home/modelbinding">Binding</a>`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AntiForgeryToken`: Use this inside a `<form>` to insert a `<hidden>` element
    containing an anti-forgery token that can be validated when the form is submitted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Display` and `DisplayFor`: Use this to generate HTML markup for the expression
    relative to the current model using a display template. There are built-in display
    templates for .NET types and custom templates can be created in the `DisplayTemplates`
    folder. The folder name is case-sensitive on case-sensitive filesystems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DisplayForModel`: Use this to generate HTML markup for an entire model instead
    of a single expression.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Editor` and `EditorFor`: Use this to generate HTML markup for the expression
    relative to the current model using an editor template. There are built-in editor
    templates for .NET types that use `<label>` and `<input>` elements, and custom
    templates can be created in the `EditorTemplates` folder. The folder name is case-sensitive
    on case-sensitive filesystems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EditorForModel`: Use this to generate HTML markup for an entire model instead
    of a single expression.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Encode`: Use this to safely encode an object or string into HTML. For example,
    the string value `"<script>"` would be encoded as `"&lt;script&gt;"`. This is
    not normally necessary since the Razor `@` symbol encodes string values by default.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Raw`: Use this to render a string value *without* encoding as HTML.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PartialAsync` and `RenderPartialAsync`: Use these to generate HTML markup
    for a partial view. You can optionally pass a model and view data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining a strongly-typed Razor view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To improve the IntelliSense when writing a view, you can define what type the
    view can expect using an `@model` directive at the top. Let’s modify the home
    page to display a table of orders from the Northwind database:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Controllers` folder, in `HomeController.cs`, import the namespace for
    the Northwind entity models and EF Core features, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the controller class, define a field to store the Northwind data context
    and set it in the constructor, as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Index` action method, add statements to create a view model containing
    all the orders and their related order details, as shown highlighted in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Views` folder, in `_ViewImports.cshtml`, add a statement to import
    the EF Core entity models for all Razor views and pages, as shown in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Views\Home` folder, in `Index.cshtml`, at the top of the file, add
    a statement to set the model type to use a collection of orders, as shown in the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, whenever we type `Model` in this view, our code editor will know the correct
    type for the model and will provide IntelliSense for it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'While entering code in a view, remember the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Declare the type for the model using `@model` (with a lowercase `m`).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Interact with the instance of the model using `@Model` (with an uppercase `M`).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In `Index.cshtml`, in the initial Razor code block, replace the existing content
    with an HTML table of the orders, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s see the result of our customized home page:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If your database server is not running, for example, because you are hosting
    it in Docker, a virtual machine, or in the cloud, then make sure to start it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the `Northwind.Mvc` website project without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that the home page now shows a table of orders with the highest-value order
    displayed first, as shown in *Figure 14.3*:![](img/B19587_14_03.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 14.3: The updated Northwind MVC website home page'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: I am running my web server on my local laptop, and its operating system, Windows
    11, is configured to use United Kingdom culture for date, time, and currency values.
    Next, we will see how to localize the web page for the preferred culture of the
    visitor.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that you’ve been reminded of how to build a basic MVC website that displays
    data, let’s look at an important intermediate-level topic that is often overlooked
    when building websites for the World Wide Web: supporting all the world’s languages
    and cultures.'
  prefs: []
  type: TYPE_NORMAL
- en: Localizing and globalizing with ASP.NET Core
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In *Chapter 7*, *Handling Dates, Times, and Internationalization*, you learned
    about working with dates, times, and time zones, and how to globalize and localize
    a .NET codebase.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will look specifically at how to localize a website that
    uses ASP.NET Core.
  prefs: []
  type: TYPE_NORMAL
- en: As well as localizing `string` values into languages like French and Spanish
    using `IStringLocalizer`, you can localize HTML content using `IHtmlLocalizer`,
    but this should be used with care. Usually, HTML markup should be the same for
    all locales. For views, you can use `IViewLocalizer`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Request localization** means that the browser can request what culture it
    prefers in the following ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a query string parameter, for example, `?culture=en-US&ui-culture=en-US`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Send a cookie with the request, for example, `c=en-US|uic=en-US`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Set an HTTP header, for example, `Accept-Language: en-US,en;q=0.9,fr-FR;q=0.8,fr;q=0.7,en-GB;q=0.6`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To enable request localization, call the `UseRequestLocalization` method when
    you configure the HTTP request pipeline in `Program.cs`. This tells ASP.NET Core
    to look for these requests and to automatically change the current thread that
    is processing that request (and only that request, no one else’s requests) to
    use the appropriate culture to format data and load resource values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create some resource files to localize the web user interface into American
    English, British English, and French, and then globalize the data like dates and
    currency values:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Northwind.Mvc` project, add a new folder named `Resources`. This is
    the default name for the folder that localizer services look in for `*.resx` resource
    files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `Resources`, add a new folder named `Views`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `Views`, add a new folder named `Home`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating resource files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: How you create resource files (`*.resx`) depends on your code editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'To save time, you can just copy the `.resx` files from the GitHub repository
    found in the folder at the following link: [https://github.com/markjprice/apps-services-net8/tree/main/code/Chapter14/Northwind.Mvc/Resources/Views/Home](https://github.com/markjprice/apps-services-net8/tree/main/code/Chapter14/Northwind.Mvc/Resources/Views/Home).'
  prefs: []
  type: TYPE_NORMAL
- en: If you are using Visual Studio 2022
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can use a special project item type and editor:'
  prefs: []
  type: TYPE_NORMAL
- en: In `Home`, add a file type of **Resources File** named `Index.en-US.resx`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the editor to define names and values, as shown in *Figure 14.4*:![](img/B19587_14_04.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 14.4: Using the Resources File editor to define the localized labels'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: JetBrains Rider has its own resource file editor that combines all `.resx` files
    in one experience as a grid. Each language has its own column, side-by-side. It’s
    much more useful than having to edit each file individually as in Visual Studio
    2022.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Close the editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy and paste the file and rename it `Index.en-GB.resx`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Warning!** You must not change any of the entries in the **Name** column
    because these are used to look up localized values for all languages! You can
    only change the entries in the **Value** or **Comment** columns.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In `Index.en-GB.resx`, modify `Orders (USA)` to `Orders (UK)`. This is so we
    can see a difference.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy and paste the file and rename it as `Index.fr-FR.resx`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `Index.fr-FR.resx`, modify the `value` column to use French. (See the step-by-step
    instructions in the next section for Visual Studio Code for the translations.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy and paste the file and rename it `Index.fr.resx`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `Index.fr.resx`, modify the last value to be `Commandes (Neutral French)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are using Visual Studio Code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You will have to edit the file without a special editor:'
  prefs: []
  type: TYPE_NORMAL
- en: In `Home`, add a new file named `Index.en-US.resx`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the contents to contain American English language resources, as shown
    in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Copy and paste the file and rename it `Index.en-GB.resx`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `Index.en-GB.resx`, modify `Orders (USA)` to `Orders (UK)`. This is so we
    can see a difference.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy and paste the file and rename it `Index.fr-FR.resx`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `Index.fr-FR.resx`, modify the `value` column to use French:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Copy and paste the file and rename it `Index.fr.resx`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `Index.fr.resx`, modify the last value to be `Commandes (Neutral French)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Localizing Razor views with an injected view localizer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we can continue with these steps for both code editors:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Views/Home` folder, in `Index.cshtml`, import the namespace for working
    with localization, inject the `IViewLocalizer` service, and make changes to use
    the labels in the view model, as shown highlighted in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Good Practice**: The key values like `"Order ID"` are used to look up the
    localized values. If a value is missing, then it returns the key as a default.
    It is good practice to therefore use keys that also work as a good fallback, which
    is why I used US English proper titles with spaces as the keys above and in the
    `.resx` files.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In `Program.cs`, before the call to `AddControllersWithViews`, add a statement
    to add localization and set the path to find resource files to the `Resources`
    folder, and after the call to `AddControllersWithViews`, append a call to add
    view localization, as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.cs`, after the call to `Build` the `app` object, add statements
    to declare four cultures that we will support: US English, British English, neutral
    French, and French in France. Then, create a new localization options object and
    add those cultures as supported for both localization of user interfaces (`UICultures`)
    and globalization of data values like dates and currency (`Cultures`), as shown
    in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the `Northwind.Mvc` website project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Chrome, navigate to **Settings**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Search settings** box, type `lang`, and note you will find the **Preferred
    languages** section, as shown in *Figure 14.5*:![](img/B19587_14_05.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 14.5: Searching Chrome Settings for the Preferred languages section'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Warning!** If you are using a localized version of Chrome, in other words,
    its user interface is in your local language, like French, then you will need
    to search for the word “language” in your own language. (Although “language” in
    French is “langue”, so entering “lang” will still work. But in Spanish you would
    need to search for “idioma”.)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Add languages**, search for `french`, select both **French - francais**
    and **French (France) – francais (France)**, and then click **Add**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Warning!** If you are using a localized version of Chrome, then you will
    need to search for the word “French” in your own language. For example, in Spanish,
    it would be “Francés,” and in Welsh, it would be “Ffrangeg.”'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Add **English (United States)** and **English (United Kingdom)** if you do not
    have them in the list already.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the dots **…** menu to the right of **French (France)**, click **Move to
    the top**, and confirm that it is at the top of your list of languages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the **Settings** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In Chrome, perform a hard reload/refresh (for example, hold down *Ctrl* and
    click the **Refresh** button), and note the home page now uses localized labels
    and French formats for dates and currency, as shown in *Figure 14.6*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_14_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.6: The Orders table localized and globalized into French in France'
  prefs: []
  type: TYPE_NORMAL
- en: Repeat the above steps for the other languages, for example, **English (United
    Kingdom)**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'View **Developer Tools**, and note the request headers have been set with British
    English (`en-GB`) first, as shown in *Figure 14.7*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_14_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.7: Orders localized and globalized into British English due to the
    Accept-Language: en-GB header'
  prefs: []
  type: TYPE_NORMAL
- en: Close the browser and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Understanding the Accept-Language header
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You might wonder how the `Accept-Language` header works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Accept-Language` header uses commas as separators between culture codes.
    Each culture code can be neutral (just a language) or specific (language and region),
    and each can have a **quality value** (`q`) between 0.0 and 1.0 (default). The
    preceding `Accept-Language` header example should therefore be read as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`en-US`: English language in the United States ranked highest at 1.0 (if `q`
    not explicitly set).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`en;q=0.9`: English language anywhere in the world ranked at 0.9.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fr-FR;q=0.8`: French language in France ranked at 0.8.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fr;q=0.7`: French language anywhere in the world ranked at 0.7.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`en-GB;q=0.6`: English language in United Kingdom ranked lowest at 0.6.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining web user interfaces with Tag Helpers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Tag Helpers** make it easier to make HTML elements dynamic. The markup is
    cleaner and easier to read, edit, and maintain than if you use HTML Helpers.'
  prefs: []
  type: TYPE_NORMAL
- en: However, Tag Helpers do not completely replace HTML Helpers because there are
    some things that can only be achieved with HTML Helpers, like rendering output
    that contains multiple nested tags. Tag Helpers also cannot be used in Razor components.
    So, you must learn HTML Helpers and treat Tag Helpers as an optional choice that
    is better in some scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: Tag Helpers are especially useful for **Front End** (**FE**) developers who
    primarily work with HTML, CSS, and JavaScript because the FE developer does not
    have to learn C# syntax. Tag Helpers just use what look like normal HTML attributes
    on elements. The attribute names and values can also be selected from IntelliSense
    if your code editor supports that; both Visual Studio 2022 and Visual Studio Code
    do.
  prefs: []
  type: TYPE_NORMAL
- en: Comparing HTML Helpers and Tag Helpers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For example, to render a linkable hyperlink to a controller action, you could
    use an HTML Helper method, as shown in the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'To make it clearer how it works, you could use named parameters, as shown in
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'But using a Tag Helper would be even clearer and cleaner for someone who works
    more with HTML than C#, as shown in the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'All three examples above generate the same rendered HTML element, as shown
    in the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'In the next few sections, we will review some of the more common Tag Helpers:'
  prefs: []
  type: TYPE_NORMAL
- en: Anchor Tag Helper
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cache Tag Helper
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Environment Tag Helper
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Image Tag Helper
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Forms-related Tag Helpers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the Anchor Tag Helper
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we will create three clickable hyperlinks styled as buttons to view the
    home page with all orders, the orders for a single customer, and the orders in
    a single country. This will allow us to see the basics of creating links to controllers
    and actions, as well as passing parameters using a route parameter and arbitrary
    query string parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s explore these examples of the Anchor Tag Helper:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Views` folder, in `_ViewImports.cshtml`, note the `@addTagHelper` directive,
    which adds the ASP.NET Core Tag Helpers, as shown highlighted in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You could create your own Tag Helpers and you would have to register them in
    the same way. But that is beyond the scope of this book. If you want to learn
    how, you can read the following documentation: [https://learn.microsoft.com/en-us/aspnet/core/mvc/views/tag-helpers/authoring](https://learn.microsoft.com/en-us/aspnet/core/mvc/views/tag-helpers/authoring).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the `Views/Home` folder, in `Privacy.cshtml`, add markup to define a paragraph
    with clickable hyperlinks styled as buttons using the `<a>` tag, as shown in the
    following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you set a controller name without an action name, then it defaults to the
    current action, in this case, `Privacy`. The `asp-route-{parametername}` attribute
    can use any arbitrary parameter name. In the code example above, we used `id`
    and `country`. `id` will map to the route parameter with the same name. `country`
    is not a route parameter, so it will be passed as a query string.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the `Controllers` folder, in `HomeController.cs`, modify the `Index` action
    method to define two optional parameters to pass a customer ID and the name of
    a country, and then modify the LINQ query to use them to filter the orders if
    they are set, as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the `Northwind.Mvc` website project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: View **Developer Tools** and click the **Elements** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the home page, click **Privacy** to navigate to that page, and note the
    buttons, including their raw HTML, which shows the `href` attribute paths that
    were generated by the Anchor Tag Helper, as shown in Figure *14.8*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_14_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.8: Three hyperlinks styled as buttons generated by Anchor Tag Helper'
  prefs: []
  type: TYPE_NORMAL
- en: Click each button and then come back to the **Privacy Policy** page to make
    sure they work correctly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the browser and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Views/Home` folder, in `Index.cshtml`, at the end of the table of orders,
    add an anchor tag to indicate the end of the orders table, as shown highlighted
    in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Views/Home` folder, in `Privacy.cshtml`, after the existing anchor
    tags, add another one to link to the anchor with an `id` of `endOfTable` by setting
    the `asp-fragment` attribute, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the second anchor tag to explicitly set the protocol to use `https`,
    as shown highlighted in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Controllers` folder, in `HomeController.cs`, add an action method named
    `Shipper`. Give it a parameter to receive a shipper entity and then pass it to
    the view, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This action method can respond to any method of request, for example, `GET`
    or `POST`. With a `GET` request, the shipper entity would be passed as query string
    key-value pairs. With a `POST` request, the shipper entity would be passed in
    the body.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the `Views/Home` folder, add an empty Razor view named `Shipper.cshtml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the contents, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Views/Home` folder, in `Privacy.cshtml`, at the top of the file, add
    code and markup to inject the Northwind database context. Then, use it to define
    a Razor function to create a dictionary with string values for both the key and
    value populated from the shippers table, as shown highlighted in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After the existing anchor tags, add another one to pass the dictionary to the
    current page, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Passing a complex object as a query string like this quickly hits the limit
    of about 1,000 characters for a URL. To send larger objects, you should use `POST`
    instead of `GET` by using a `<form>` element instead of an anchor tag `<a>`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If your database server is not running, for example, because you are hosting
    it in Docker, a virtual machine, or the cloud, then make sure to start it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the `Northwind.Mvc` website project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: View **Developer Tools** and click **Elements**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the home page, click **Privacy** to navigate to that page and note the buttons,
    including their raw HTML, which shows the `href` attribute paths that were generated
    by the Anchor Tag Helper, as shown in Figure *14.9*:![](img/B19587_14_09.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 14.9: Using a fragment and passing a complex object using query string
    parameters'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A side benefit of specifying the protocol is that the generated URL must include
    the protocol, domain, and any port number, as well as the relative path, so it
    is a convenient way to get an absolute URL instead of the default relative path
    URL, as shown in the second link above.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Orders (end of table)** button and note the browser navigates to
    the home page and then jumps to the end of the orders table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go back to the **Privacy** page, click the **Shipper** button, and note the
    shipper details are pre-entered into the shipper form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the browser and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exploring the Cache Tag Helpers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Cache and Distributed Cache Tag Helpers improve the performance of your
    web pages by caching their content using the in-memory or registered distributed
    cache providers respectively. We covered reading and writing objects to these
    caches in *Chapter 9*, *Caching, Queuing, and Resilient Background Services*.
    Now we will see how to store fragments of HTML for a view in them.
  prefs: []
  type: TYPE_NORMAL
- en: As a reminder, an in-memory cache is best for a single web server or a web server
    farm with session affinity enabled. Session affinity means that subsequent requests
    from the same browser are served by the same web server. A distributed cache is
    best for a web server farm or in a cloud provider like Azure. You can register
    providers for SQL Server, Redis, or NCache, or create your own custom provider.
  prefs: []
  type: TYPE_NORMAL
- en: 'Attributes that can be applied to the Cache Tag Helper include:'
  prefs: []
  type: TYPE_NORMAL
- en: '`enabled`: Default value is `true`. This exists so that you can include the
    `<cache>` element in the markup but decide at runtime if it should be enabled
    or not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`expires-after`: A `TimeSpan` value to expire after. The default is `00:20:00`,
    meaning 20 minutes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`expires-on`: A `DateTimeOffset` value to expire at. No default.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`expires-sliding`: A `TimeSpan` value to expire after if the value has not
    been accessed during that time. This is useful when storing database entities
    that cost a lot to create and have varied popularity. The popular entities will
    stay cached if they continue to be accessed. Less popular entities will drop out.
    No default.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vary-by-{type}`: These attributes allow multiple different cached versions
    based on differences in an HTTP `header` value, a `user`, a `route`, `cookie`,
    or `query` string value, or a custom value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s see an example of the Cache Tag Helper:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Views/Home` folder, in `Index.cshtml`, between the heading and the
    table, add `<div>` elements to define a Bootstrap row with two columns that show
    the current UTC date and time twice, once live and then once cached, as shown
    in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the `Northwind.Mvc` website project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Refresh the home page several times over several seconds and note the left-hand
    time is always refreshed to show the live time, and the right-hand time is cached
    (for 20 minutes by default), as shown in *Figure 14.10*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_14_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.10: Live and cached UTC times'
  prefs: []
  type: TYPE_NORMAL
- en: Close the browser and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Views/Home` folder, in `Index.cshtml`, modify the `<cache>` element
    to expire after 10 seconds, as shown highlighted in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the `Northwind.Mvc` website project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Refresh the home page several times over several seconds and note the left-hand
    time is always refreshed to show the live time, and the right-hand time is cached
    for 10 seconds before it then refreshes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the browser and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exploring the Environment Tag Helper
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Environment Tag Helper renders its content only if the current environment
    matches one of the values in a comma-separated list of names. This is useful if
    you want to render some content like instructions to a tester when hosted in a
    staging environment, or content like customer-specific information that developers
    and testers do not need to see while hosted in the production environment.
  prefs: []
  type: TYPE_NORMAL
- en: As well as a `names` attribute to set the comma-separated list of environments,
    you can also use `include` (works the same as `names`) and `exclude` (renders
    for all environments *except* the ones in the list).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see an example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Views/Home` folder, in `Privacy.cshtml`, inject the dependency service
    for the web host environment, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After the heading, add two `<environment>` elements, the first to show output
    only for developers and testers, and the second to show output only for product
    visitors, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the `Northwind.Mvc` website project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to the **Privacy** page, and note the message for developers and testers,
    as shown in *Figure 14.11*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_14_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.11: The Privacy page in the Development environment'
  prefs: []
  type: TYPE_NORMAL
- en: Close the browser and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Properties` folder, in `launchSettings.json`, for the `https` profile,
    change the environment setting to `Production`, as shown highlighted in the following
    JSON:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the `Northwind.Mvc` website project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to the **Privacy** page, and note the message for public visitors,
    as shown in *Figure 14.12*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_14_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.12: The Privacy page in the Production environment'
  prefs: []
  type: TYPE_NORMAL
- en: Close the browser and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `Properties` folder, in `launchSettings.json`, for the `https` profile,
    change the environment setting back to `Development`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Understanding how cache busting with Tag Helpers works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When `asp-append-version` is specified with a `true` value in a `<link>`, `<img>`,
    or `<script>` element, the Tag Helper for that tag type is invoked.
  prefs: []
  type: TYPE_NORMAL
- en: 'They work by automatically appending a query string value named `v` that is
    generated from a SHA256 hash of the referenced source file, as shown in the following
    example generated output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: You can see this for yourself in the current project because the `_Layout.cshtml`
    file has the `<script src="img/site.js" asp-append-version="true"></script>` element.
  prefs: []
  type: TYPE_NORMAL
- en: If even a single byte within the `site.js` file changes, then its hash value
    will be different, and therefore if a browser or CDN is caching the script file,
    then it will bust the cached copy and replace it with the new version.
  prefs: []
  type: TYPE_NORMAL
- en: The `src` attribute must be set to a static file stored on the local web server,
    usually in the `wwwroot` folder, but you can configure additional locations. Remote
    references are not supported.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring Forms-related Tag Helpers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Form Tag Helper generates the `<form>` elements `action` attribute for an
    MVC controller action or named route. Like the Anchor Tag Helper, you can pass
    parameters using the `asp-route-<parametername>` attribute. It also generates
    a hidden verification token to prevent cross-site request forgery. You must apply
    the `[ValidateAntiForgeryToken]` attribute to the HTTP `POST` action method to
    properly use this feature.
  prefs: []
  type: TYPE_NORMAL
- en: The Label and Input Tag Helpers bind labels and inputs to properties on a model.
    They can then generate the `id`, `name`, and `for` attributes automatically, as
    well as add validation attributes and messages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see an example of a form for entering shipper information:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Views/Home` folder, in `Shipper.cshtml`, duplicate the existing markup
    that outputs shipper details, wrap it in a `<form>` element that uses the Form
    Tag Helper, and modify the `<label>` and `<input>` elements to use the Label and
    Input Tag Helpers, as shown highlighted in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Controllers` folder, in `HomeController.cs`, add an action method named
    `ProcessShipper`. Give it a parameter to receive a shipper entity and then return
    it as a JSON document using the `Json` method, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the `Northwind.Mvc` website project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the **Privacy** page, and then click the **Shipper** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the **Shipper** page, right-click, select **View page source**, and note
    the different HTML output for the form generated by the Form, Input, and Label
    Tag Helpers, including a hidden element named `__RequestVerificationToken`, as
    shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the form, change the shipper ID and company name, noting that attributes
    like `maxlength="40"` prevent a company name longer than 40 characters, and `type="number"`
    only allows numbers for the shipper ID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the **Submit** button and note the JSON document returned, as shown in
    the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Close the browser and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Output caching
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In some ways, output caching is like response caching, which we covered in *Chapter
    9*, *Caching, Queuing, and Resilient Background Services*. Output caching can
    store dynamically generated responses on the server so that they do not have to
    be regenerated again for another request. This can improve performance. Unlike
    response caching, output caching does not rely on clients and intermediaries doing
    what they are told by the HTTP response headers.
  prefs: []
  type: TYPE_NORMAL
- en: Output caching endpoints
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s see it in action with a really simple example of applying output caching
    to some endpoints to make sure it is working properly:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Northwind.Mvc` project, in `Program.cs`, after the call to `AddNorthwindContext`,
    add a statement to add the output cache middleware and override the default expiration
    timespan to make it only 10 seconds, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Good Practice**: The default expiration time span is one minute. Think carefully
    about what the duration should be.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In `Program.cs`, before the call to map controller routes, add a statement
    to use output cache, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.cs`, after the call to map Razor Pages, add statements to create
    two simple endpoints that respond with plain text, one that is not cached and
    one that uses the output cache, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `appsettings.Development.json`, add a log level of `Information` for the
    output caching middleware, as shown highlighted in the following configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the `Northwind.Mvc` website project and arrange the browser window and
    command prompt or terminal window so that you can see both.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the browser, navigate to `https://localhost:5141/notcached`, and note nothing
    is written to the command prompt or terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the browser, click the **Refresh** button several times and note that the
    time is always updated because it is not served from the output cache.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the browser, navigate to `https://localhost:5141/cached`, and note that
    messages are written to the command prompt or terminal to tell you that you have
    made a request for a cached resource but it does not have anything in the output
    cache so it has now cached the output, as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the browser, click the **Refresh** button several times and note that the
    time is not updated, and an output caching message tells you that the value was
    served from the cache, as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Continue refreshing until 10 seconds have passed and note that messages are
    written to the command line or terminal to tell you that the cached output has
    been updated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the browser and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Output caching MVC views
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now let’s see how we can output cache an MVC view:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Program.cs`, at the end of the call to map controllers, add a call to the
    `CacheOutput` method, as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the `Northwind.Mvc` website project and arrange the browser window and
    command prompt or terminal window so that you can see both.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the command prompt or terminal, note that the home page with its table of
    orders is not in the output cache, so SQL commands are executed to get the data,
    and then once the Razor view generates the page, it is stored in the cache, as
    shown highlighted in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On the home page, note the current time, and then refresh the page and note
    that the whole page, including the time and orders table, is served from the output
    cache, as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Keep refreshing until 10 seconds have passed and note that the page is then
    regenerated from the database and the current time is shown.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the browser and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are many other ways to vary the cached results for output caching and
    the ASP.NET Core team intends to add more capabilities in the future.
  prefs: []
  type: TYPE_NORMAL
- en: Practicing and exploring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Test your knowledge and understanding by answering some questions, getting some
    hands-on practice, and exploring this chapter’s topics with deeper research.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 14.1 – Test your knowledge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Answer the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: What is the advantage of declaring a strongly typed Razor view and how do you
    do it?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you enable Tag Helpers in a view?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the pros and cons of HTML Helper methods compared to Tag Helpers?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can a browser request a preferred language for localization?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you localize text in a view?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the prefix for attributes recognized by Tag Helpers?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you pass a complex object as a query string parameter?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you control how long the contents of the `<cache>` element are cached
    for?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the `<environment>` element used for?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How does cache busting with Tag Helpers work?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exercise 14.2 – Practice building user interfaces with Boostrap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new ASP.NET Core MVC project named `Ch14Ex02_ExploringBootstrap`.
    Add views that implement the following Bootstrap features:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Accordion: [https://getbootstrap.com/docs/5.3/components/accordion/](https://getbootstrap.com/docs/5.3/components/accordion/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cards: [https://getbootstrap.com/docs/5.3/components/card/](https://getbootstrap.com/docs/5.3/components/card/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Carousel: [https://getbootstrap.com/docs/5.3/components/carousel/](https://getbootstrap.com/docs/5.3/components/carousel/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'NavBar: [https://getbootstrap.com/docs/5.3/components/navbar/](https://getbootstrap.com/docs/5.3/components/navbar/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Popovers: [https://getbootstrap.com/docs/5.3/components/popovers/](https://getbootstrap.com/docs/5.3/components/popovers/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Toast: [https://getbootstrap.com/docs/5.3/components/toasts/](https://getbootstrap.com/docs/5.3/components/toasts/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Tooltips: [https://getbootstrap.com/docs/5.3/components/tooltips/](https://getbootstrap.com/docs/5.3/components/tooltips/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exercise 14.3 – Explore topics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the links on the following page to learn more about the topics covered
    in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-14---building-web-user-interfaces-using-aspnet-core](https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-14---building-web-user-interfaces-using-aspnet-core)'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you learned how to build user interfaces using ASP.NET Core
    MVC. You learned about:'
  prefs: []
  type: TYPE_NORMAL
- en: ASP.NET Core Razor views and Razor syntax
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some common Bootstrap styles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Localizing and globalizing an ASP.NET Core website
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTML Helpers and Tag Helpers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Output caching endpoints and views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to build web user interface components
    using Blazor.
  prefs: []
  type: TYPE_NORMAL
