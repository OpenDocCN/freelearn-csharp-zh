- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: What Is Multi-Tenancy, and Why Is It Important in SaaS Applications?
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是多租户，为什么它在SaaS应用程序中很重要？
- en: Multi-tenancy has become a critical architectural pattern in modern **Software
    as a Service** (**SaaS**) applications, enabling providers to serve multiple customers
    (tenants) from a single instance of their software.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 多租户已成为现代**软件即服务**（**SaaS**）应用程序中的关键架构模式，使提供商能够从他们软件的单个实例为多个客户（租户）提供服务。
- en: This chapter will delve into this very important part of building SaaS applications
    –termed *multi-tenancy* – whereby multiple tenants can use the *same instance*
    of a deployed application and still keep their data private and segregated.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将深入探讨构建SaaS应用程序的这部分非常重要的内容——称为*多租户*——其中多个租户可以使用部署应用程序的*同一实例*，同时仍然保持他们的数据私密和隔离。
- en: Under a multi-tenancy system, multiple customers of the SaaS application can
    use the same instance of the application and also optionally use the same database,
    but their data is segregated, such that no other tenant can see the data – unless
    it is explicitly shared. This obviously raises a number of concerns about security
    and data privacy. For a company building a multi-tenant SaaS application, it is
    extremely important to ensure that any given customer is only ever able to see
    their own data and never anyone else’s!
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在多租户系统中，SaaS应用程序的多个客户可以使用应用程序的同一实例，并且也可以选择使用相同的数据库，但他们的数据是隔离的，这样其他租户就无法看到数据——除非它们被明确共享。这显然引发了许多关于安全和数据隐私的问题。对于正在构建多租户SaaS应用程序的公司来说，确保任何客户只能看到自己的数据，永远看不到任何其他人的数据，这一点至关重要！
- en: Many strategies, patterns, utilities, and technologies can be leveraged to ensure
    that an individual tenant’s data remains segregated, but the first line of defense
    is – as always –a sound technical understanding of the underlying concepts. It
    is particularly important that the development team appreciates this when the
    application is being crafted. Multi-tenancy is essential for any SaaS application
    that will scale, which almost all of them will aim to do!
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 可以利用许多策略、模式、实用工具和技术来确保单个租户的数据保持隔离，但第一道防线始终是对底层概念有良好的技术理解。当应用程序正在构建时，开发团队理解这一点尤为重要。对于任何希望扩展的SaaS应用程序（几乎所有应用程序都会这样做）来说，多租户是必不可少的！
- en: The privacy and security of data in a SaaS multi-tenant application are paramount.
    It’s hard to think of any instance where a multi-tenant SaaS application is built
    that did not require at least some of the tenants’ and users’ data to remain private.
    Robust data security and segregation of data are, therefore, key considerations
    when setting out to build a SaaS application.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: SaaS多租户应用程序中的数据隐私和安全至关重要。很难想象一个多租户SaaS应用程序的实例，它不需要至少保留一些租户和用户的数据保持私密。因此，在构建SaaS应用程序时，强大的数据安全和数据隔离是关键考虑因素。
- en: When starting out on the development cycle for a new application, it is considerably
    easier to build robust security into the application at the very start of the
    project than it is to retrospectively add it in later! It is also much less risky
    to get the security and segregation working correctly from the start – once the
    inevitable application sprawl and feature creep start, it is considerably harder
    to convince yourself that everything really is locked down as tightly as it should
    be.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始开发新应用程序的周期时，在项目一开始就将强大的安全性构建到应用程序中要比在以后追加上去容易得多！从一开始就正确地实现安全和隔离也要安全得多——一旦不可避免的应用程序蔓延和功能蔓延开始，就相当难以说服自己一切真的像应该的那样被严格锁定。
- en: We are covering this topic early in this book so that, as we build out our demo
    application, you will have a solid understanding of multi-tenancy and how it impacts
    future design choices. I strongly encourage you to take the same approach when
    building a SaaS application, taking the time at the start of the project to plan
    a strategy for multi-tenancy and the security considerations that will arise.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本书中较早地介绍这个主题，以便在我们构建演示应用程序时，您将对多租户及其对未来设计选择的影响有一个扎实的理解。我强烈建议您在构建SaaS应用程序时采取相同的方法，在项目开始时花时间制定多租户策略和将出现的安全考虑。
- en: 'During this chapter, we will cover the following main topics:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要内容：
- en: Gaining an understanding of what multi-tenancy is
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解什么是多租户
- en: Considering the options for data storage with multi-tenant applications
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑多租户应用程序的数据存储选项
- en: Understanding the design considerations through the application layers
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过应用层理解设计考虑因素
- en: Discussing security considerations
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 讨论安全考虑因素
- en: By the end of the chapter, you’ll have a good understanding of multi-tenancy,
    multi-tenant applications, and the specific security considerations that will
    arise when working on SaaS and, specifically, multi-tenant software applications.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将很好地理解多租户、多租户应用以及在工作于SaaS和特别是多租户软件应用时可能出现的具体安全考虑因素。
- en: Technical requirements
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: All code from this chapter can be found at [https://github.com/PacktPublishing/Building-Modern-SaaS-Applications-with-C-and-.NET/tree/main/Chapter-3](https://github.com/PacktPublishing/Building-Modern-SaaS-Applications-with-C-and-.NET/tree/main/Chapter-3).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的所有代码都可以在[https://github.com/PacktPublishing/Building-Modern-SaaS-Applications-with-C-and-.NET/tree/main/Chapter-3](https://github.com/PacktPublishing/Building-Modern-SaaS-Applications-with-C-and-.NET/tree/main/Chapter-3)找到。
- en: What is multi-tenancy?
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是多租户？
- en: Multi-tenancy is a software architecture pattern commonly used in SaaS applications,
    wherein a single application instance serves multiple customer groups or organizations,
    known as tenants. Each tenant shares the same underlying infrastructure and resources,
    such as servers, databases, and application logic, but maintains its own isolated
    data and configurations. This approach allows for optimized resource usage, streamlined
    maintenance, and reduced operational costs. The primary challenge in a multi-tenant
    architecture is to ensure data isolation, security, and performance for each tenant,
    while also offering customization and scalability. In essence, multi-tenancy enables
    SaaS providers to deliver a cost-effective, secure, and customizable solution
    to a diverse range of customers, using a shared application instance.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 多租户是一种在SaaS应用中常用的软件架构模式，其中单个应用实例为多个客户群体或组织（称为租户）提供服务。每个租户共享相同的基础基础设施和资源，如服务器、数据库和应用逻辑，但保持其自己的独立数据和配置。这种方法可以实现资源使用优化、维护流程简化以及运营成本降低。在多租户架构中的主要挑战是确保每个租户的数据隔离、安全和性能，同时提供定制和可扩展性。本质上，多租户使SaaS提供商能够通过共享应用实例向多样化的客户提供经济高效、安全且可定制的解决方案。
- en: Disambiguating customers, tenants, and users
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 区分客户、租户和用户
- en: 'When talking about multi-tenancy, is it important to disambiguate the related
    but distinct concepts:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当谈论多租户时，区分相关但不同的概念是否重要：
- en: '**Customers**: Customers refer to the organizations or individuals who purchase
    or subscribe to a software product or service. In the context of SaaS applications,
    customers may be represented as one or more tenants, with each customer group
    having access to its own isolated environment within the shared application instance.
    The term “customer” generally emphasizes the business relationship and financial
    aspect of using a software product or service.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户**: 客户指的是购买或订阅软件产品或服务的组织或个人。在SaaS应用的情况下，客户可能被表示为一个或多个租户，每个客户群体都可以访问共享应用实例中的自己的独立环境。术语“客户”通常强调使用软件产品或服务的商业关系和财务方面。'
- en: '**Tenants**: Tenants represent separate organizations, companies, or groups
    that use a shared instance of a SaaS application in a multi-tenant architecture.
    Each tenant has its own isolated data, configurations, and customizations while
    sharing the same software infrastructure and resources with other tenants. A key
    aspect of a multi-tenant system is that each tenant can have multiple users associated
    with it, enabling individual access and personalized experiences within the shared
    application instance.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**租户**: 租户代表使用多租户架构中共享的SaaS应用实例的独立组织、公司或群体。每个租户都有其自己的独立数据、配置和定制，同时与其他租户共享相同的软件基础设施和资源。多租户系统的一个关键方面是每个租户都可以有多个与其关联的用户，从而在共享的应用实例中实现个人访问和个性化体验。'
- en: '**Users**: Users are the individual people who interact with a software system
    or application, often with unique login credentials and personalized settings.
    Users belong to a specific tenant, organization, or group, and their actions and
    access within the system can be managed with role-based permissions or access
    control. Users represent the actual individuals using the software, carrying out
    various tasks and activities within the application.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户**：用户是与软件系统或应用程序交互的个体人员，通常具有独特的登录凭证和个性化设置。用户属于特定的租户、组织或组，他们的操作和系统内的访问可以通过基于角色的权限或访问控制进行管理。用户代表实际使用软件的个人，在应用程序内执行各种任务和活动。'
- en: Let’s consider an example where two large companies use a SaaS application.
    The companies are customers, and to keep this example simple, each will have a
    single tenant in the application. Each company could have hundreds or thousands
    of employees who use the system. It would be typical for both companies to want
    to customize the app in some way for their own employees. For example, they may
    want to display their logo when a user logs in. This would be achieved by having
    two *tenants* in the application, each configured to show the correct logo to
    the users who belong to that company.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个例子，其中两家大型公司使用一个 SaaS 应用程序。这些公司是客户，为了使这个例子简单，每个公司将在应用程序中有一个单租户。每个公司可能有数百或数千名员工使用该系统。对于这两家公司来说，通常都会希望以某种方式为他们的员工定制应用程序。例如，他们可能希望在用户登录时显示他们的标志。这可以通过在应用程序中设置两个
    *租户* 来实现，每个租户都配置为向属于该公司的用户显示正确的标志。
- en: There will be two levels of data segregation. The individual tenant configuration
    (the logo, for example) will be separate, and any user operating within that tenant
    must always see the correct logo. There will be a further level of segregation,
    keeping each individual user’s data private.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 将有两个级别的数据隔离。单个租户配置（例如标志）将是分开的，并且在该租户内操作的用户必须始终看到正确的标志。将有一个进一步的隔离级别，以保持每个个别用户的隐私数据。
- en: Users with elevated permissions within a tenant (admin users) may be able to
    modify details for other users within that same tenant, but never for any other
    tenants.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在租户内具有高级权限的用户（管理员用户）可能能够修改同一租户内其他用户的详细信息，但永远不能是任何其他租户。
- en: 'It is very important to keep this in mind as we progress through this chapter
    – make sure that you understand the difference between users and tenants before
    moving on:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续本章内容时，这一点非常重要——在继续之前，请确保您理解用户和租户之间的区别：
- en: A customer can have one or more tenants in an application, often one, meaning
    that the terms *customer* and *tenant* can be used interchangeably
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个客户可以在一个应用程序中有一个或多个租户，通常是一个，这意味着术语“客户”和“租户”可以互换使用。
- en: A tenant can have one or more users under it, most often more than one, meaning
    that the terms should not be used interchangeably
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个租户下可以有一个或多个用户，通常不止一个，这意味着这两个术语不应互换使用。
- en: What are the alternatives to multi-tenancy?
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多租户的替代方案有哪些？
- en: While SaaS applications are largely synonymous with multi-tenant applications,
    it is technically possible to deliver a SaaS application as a single-tenant application.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 SaaS 应用程序在很大程度上等同于多租户应用程序，但从技术上讲，将 SaaS 应用程序作为单租户应用程序提供是可能的。
- en: If a single-tenant approach is followed, then every time a new tenant is onboarded,
    there is an entirely new application stack and a new database deployed for that
    specific tenant. There *could* be some very specific and limited shared services,
    such as a shared login page that redirects the customer to their own instance
    of the application, but in general, this will be a completely unique and isolated
    deployment of the software on a per-customer basis.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果遵循单租户方法，那么每次有新的租户加入时，都会为该特定租户部署一个全新的应用程序堆栈和新的数据库。可能会有一些非常具体且有限的共享服务，例如一个共享登录页面，该页面将客户重定向到他们自己的应用程序实例，但通常，这将是基于每个客户的完全独特和隔离的软件部署。
- en: A single-tenant application is generally considered to be the most secure method
    and could be considered the most reliable method to deliver an application to
    a single customer. However, it is significantly most expensive to do this for
    each and every customer, and the costs to scale such an architecture quickly become
    unmanageable.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 单租户应用程序通常被认为是最高安全性的方法，并且可以被认为是向单个客户提供应用程序的最可靠方法。然而，为每个客户这样做成本非常高，并且快速扩展这种架构的成本很快就会变得难以管理。
- en: The resources required to maintain, support, upgrade, and customize such an
    application are very high, meaning that the price to the end user is also high,
    and would typically restrict your customer base to the enterprise. If your end
    goal is to attract non-enterprise customers, this single-tenant approach is very
    unlikely to be successful.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 维护、支持、升级和定制此类应用程序所需的资源非常高，这意味着最终用户的成本也很高，通常会将您的客户群限制在企业用户。如果您的最终目标是吸引非企业客户，这种单租户方法很可能不会成功。
- en: It is also somewhat stretching the definition of SaaS. If each customer simply
    gets a unique installation of the software, albeit in the cloud, then it is much
    closer to the traditional method of delivering software – on a CD with a unique
    key printed on it!
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这也在一定程度上拉伸了SaaS的定义。如果每个客户只是获得一个独特的软件安装，尽管是在云中，那么它就与传统软件交付方式——带有唯一密钥的CD——非常接近了！
- en: Single tenancy in a SaaS application would really only be done for a very small
    subset of use cases. For this book, we will not consider this any further, other
    than to mention that it is technically possible to build a SaaS application without
    making use of a multi-tenant architecture!
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在SaaS应用程序中，单租户模式实际上仅适用于非常小的一部分用例。对于本书，我们将不再进一步考虑这一点，除了提到在技术上可以构建一个不使用多租户架构的SaaS应用程序！
- en: The advantages and disadvantages of multi-tenancy
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多租户的优缺点
- en: 'Some of the advantages of using a multi-tenant architecture are as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用多租户架构的一些优点如下：
- en: '**Cost**: Multi-tenancy is typically a very cost-efficient way to deliver an
    application from the point of view of provisioning resources (app servers, databases,
    and so on). Multi-tenancy also tends to be very cost-efficient when considering
    ongoing support and maintenance costs. The marginal cost for every additional
    tenant, and each additional user within that tenant, will typically not add much
    to the overall cost once the application has gone live.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**成本**：从资源分配（应用服务器、数据库等）的角度来看，多租户通常是一种非常经济高效的方式来交付应用程序。在考虑持续支持和维护成本时，多租户也往往非常经济高效。一旦应用程序上线，每个额外租户和该租户内每个额外用户的边际成本通常不会对总成本产生太大影响。'
- en: '**Tiered pricing**: Customers can be offered a range of pricing options to
    suit them and their organization specifically. The pricing can scale linearly
    as new tenants are added and users are introduced from the new tenant’s organization.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分层定价**：可以为客户提供一系列定价选项，以适应他们及其组织的需求。随着新租户的加入和来自新租户组织的新用户的引入，定价可以线性扩展。'
- en: '**Easy to update**: With only one instance of the application being accessed
    by many tenants, a single update can be performed that will get every user across
    all tenants on the latest and greatest version. Note that it is also possible,
    if more complex, to configure this using **Continuous Deployment** (**CD**) **pipelines**
    under a single-tenant model.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**易于更新**：由于应用程序只有一个实例被多个租户访问，因此只需进行一次更新，就可以让所有租户的用户都升级到最新和最好的版本。请注意，如果更复杂的话，也可以在单租户模式下使用**持续部署**（**CD**）**管道**来配置这一点。'
- en: '**Scalability**: A SaaS application using a multi-tenant architecture will
    typically scale up very easily as the number of tenants and users increases. Assuming
    that a cloud provider is used, this can happen literally effortlessly on the part
    of the development team. A cloud service can be configured so that as additional
    demand is placed on the system by the growing user base, additional resources
    are deployed automatically.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性**：使用多租户架构的SaaS应用程序通常会随着租户和用户数量的增加而非常容易扩展。假设使用云提供商，这可以在开发团队方面几乎毫不费力地发生。可以将云服务配置为，随着用户基础的不断增长，系统面临更多需求时，自动部署更多资源。'
- en: 'It’s not all good, though – there are a few disadvantages that should also
    be considered:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，并非全是优点——也有一些缺点也应当考虑：
- en: '**Increased complexity**: From a software architecture point of view, a multi-tenant
    application is almost by definition more challenging to build. There are additional
    complexities throughout the application stack, starting with the database requiring
    some form of segmentation by tenant all the way up the stack to the user interface,
    where each user must be securely authenticated and authorized to access only certain
    parts of the system.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**复杂性增加**：从软件架构的角度来看，多租户应用程序几乎可以说是构建起来更具挑战性的。在整个应用程序堆栈中存在额外的复杂性，从数据库需要通过租户进行某种形式的分割开始，一直到用户界面，每个用户都必须安全地认证和授权，才能访问系统的特定部分。'
- en: '**Increased security requirements**: The fact that multiple tenants share a
    single application instance necessitates a much more thorough approach to user
    security. It is typically an absolute disaster scenario for a business if one
    of their user’s private data is leaked to another user through their application,
    and doubly so if that user belonged to a different tenant organization.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**增加的安全要求**：多个租户共享单个应用程序实例的事实需要采取更加彻底的用户安全方法。如果他们的用户私数据通过应用程序泄露给另一个用户，对业务来说通常是一个绝对的灾难场景，如果那个用户属于不同的租户组织，那么情况更是如此。'
- en: '**Downtime is a disaster**: If a multi-tenant SaaS system goes down for any
    reason, then typically, every single customer will have no access to the application.
    This obviously makes reducing downtime absolutely critical.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**停机是灾难**：如果多租户SaaS系统因任何原因而停机，那么通常，每个客户都将无法访问应用程序。这显然使得减少停机时间变得绝对关键。'
- en: '**Noisy neighbors**: Given that each tenant shares an application, they are,
    therefore, also sharing resources, such as the compute time of the cluster or
    the servers on which the application is deployed. One particularly compute-hungry
    user could have a knock-on effect on every other user of a system.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**嘈杂的邻居**：鉴于每个租户共享一个应用程序，因此他们也在共享资源，例如集群的计算时间或应用程序部署的服务器。一个特别计算密集型的用户可能会对系统中的其他每个用户产生连锁反应。'
- en: An observation from the preceding lists is that the advantages provided are
    significant and cannot really be worked around if using a single-tenant architecture.
    However, the disadvantages of a multi-tenant system can usually be mitigated by
    simply taking more time upfront to design the system well. Of course, there is
    a cost in doing so, which must be balanced carefully when choosing the application
    architecture and making decisions about system design.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的列表中可以观察到，提供的优势是显著的，如果使用单租户架构，这些优势是无法真正规避的。然而，多租户系统的缺点通常可以通过在系统设计初期投入更多时间来缓解。当然，这样做是有成本的，这在选择应用程序架构和做出系统设计决策时必须仔细权衡。
- en: In general, though, the higher upfront cost will be returned many times over
    as the number of tenants and the user base starts to grow and the power of the
    SaaS/multi-tenant application is realized!
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，一般来说，随着租户数量和用户基础的开始增长，SaaS/多租户应用程序的力量得到体现，前期的高成本将会得到多倍的回报！
- en: I hope that with the preceding discussion, I have convinced you of the benefits
    of multi-tenant architecture and encouraged you to consider this at the very start
    of your project. We can now move on to discuss the specifics of designing for
    multi-tenancy, starting with the most important – data storage!
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望前面的讨论已经说服了你多租户架构的好处，并鼓励你在项目一开始就考虑这一点。我们现在可以继续讨论多租户设计的具体细节，从最重要的——数据存储！
- en: Options for data storage with multi-tenant applications
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多租户应用程序的数据存储选项
- en: A database in any application is typically the foundation upon which the rest
    of the application is built. The decisions that are taken when selecting and designing
    the database will have significant knock-on effects on the data access/API layer
    and probably some impact on the user interface as well.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何应用程序中，数据库通常是构建其余应用程序的基础。在选择和设计数据库时所做的决策将对数据访问/API层产生重大影响，并可能对用户界面产生一定的影响。
- en: Additionally, the data stored in an application will represent your customers’
    business information. Often, this information will be incredibly valuable to them,
    and by entrusting it to you – as a developer working on a SaaS application – they
    are showing significant trust that you can keep this valuable asset safe. The
    database underpinning a SaaS application should be like a bank vault where your
    customers are happy to deposit their data!
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，应用程序中存储的数据将代表客户的业务信息。通常，这些信息对他们来说极其宝贵，并且通过将其托付给你——作为一个在SaaS应用程序上工作的开发者——他们向你展示了显著的信任，相信你能安全地保管这个宝贵的资产。支撑SaaS应用程序的数据库应该像银行保险库一样，让客户愿意将他们的数据存入其中！
- en: Therefore, making the correct choices in database design is extremely important
    for the rest of the application development, and also for the tenants and individual
    users of the application.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在数据库设计上做出正确的选择对于整个应用程序的开发至关重要，同样对于应用程序的租户和单个用户也是如此。
- en: While this section is focused on the database, its role as the foundation for
    the rest of the application will necessitate some discussion about how the choices
    made will impact other layers and parts of the application.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然本节主要关注数据库，但其作为整个应用程序基础的作用将需要讨论所做出的选择将如何影响其他层和应用程序的其他部分。
- en: Key considerations
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关键考虑因素
- en: The approach taken for data storage is very important, with a few key areas
    to consider before you start building.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 数据存储采用的方法非常重要，在开始构建之前，有几个关键领域需要考虑。
- en: Design complexity
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设计复杂性
- en: Generally, when starting to build a new application, it is a good idea to focus
    on simplicity in design, and only add complexity when it is required. Building
    in multi-tenancy does add significant complexity to the application, so it is
    very important that the level of complexity is considered and the solution is
    sized accordingly.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在开始构建新的应用程序时，关注设计上的简洁性是一个好主意，只有在需要时才增加复杂性。在应用程序中内置多租户确实会增加应用程序的复杂性，因此考虑复杂性的水平并相应地调整解决方案非常重要。
- en: Consider how many tenants you expect to have, and pick a solution that matches
    that. Consider also how important data isolation is, and pick a solution that
    matches that.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑你预计会有多少租户，并选择一个与之匹配的解决方案。同时也要考虑数据隔离的重要性，并选择一个与之匹配的解决方案。
- en: You should also keep in mind that some customers – particularly large corporate
    customers – may expect some degree of customization. Allowing per-customer customizations
    can start to exponentially increase the complexity of a design. While it is generally
    preferred to avoid any kind of customization, this may not be possible. If it
    is felt that this will be a requirement, then some consideration for this eventuality
    should be taken into account at the design stage.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你还应该记住，一些客户——尤其是大型企业客户——可能期望一定程度的定制化。允许每个客户的定制可能会开始指数级地增加设计的复杂性。虽然通常更喜欢避免任何形式的定制，但这可能并不总是可能的。如果觉得这将是一个要求，那么在设计阶段应该考虑到这种可能性。
- en: Support complexity
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 支持复杂性
- en: While the process of developing the application is, of course, costly for the
    company that is funding the undertaking, it is important to consider the ongoing
    cost of actually running the application. This is the period in the application
    life cycle where it is expected to generate revenue, and that will not be possible
    if there are huge ongoing support and maintenance costs.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，开发应用程序的过程对公司来说成本是高昂的，但考虑应用程序实际运行的成本同样重要。这是应用程序生命周期中预期产生收入的阶段，如果存在巨大的持续支持和维护成本，这是不可能实现的。
- en: One very important aspect of ongoing maintenance is monitoring your tenants’
    usage. The “80–20” principle will most likely apply, and you need to know which
    of your tenants are the most profitable… and which are the most problematic!
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 持续维护的一个非常重要的方面是监控租户的使用情况。“80-20”原则很可能会适用，你需要知道哪些租户是最有利可图的……以及哪些是最有问题的！
- en: You need to consider that some of your tenants will have higher availability
    requirements than others. Will you be able to support a tenant with a 99.99% uptime
    requirement? And do you understand the additional costs and technical trade-offs
    in offering this level of service?
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要考虑，一些租户可能对可用性的要求比其他租户更高。你能否支持一个要求99.99%正常运行时间的租户？并且你是否理解提供这一水平服务所涉及的成本和技术权衡？
- en: Support and maintenance can quickly become a technical and financial nightmare
    if they are not considered early on in the project life cycle.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在项目生命周期的早期没有考虑，支持和维护可能会迅速变成一个技术和财务上的噩梦。
- en: Scale
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 规模
- en: No application ever launched with a billion users – they all started with one!
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 没有任何应用程序是带着十亿用户启动的——它们都是从一个人开始的！
- en: When planning a SaaS application, you need to have at least some idea of the
    scale that you expect to operate at over the short, medium, and long term. With
    this understanding, you can make smart decisions that suit the individual users
    and the tenants from launch day through to platform maturity.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在规划SaaS应用程序时，你需要至少对短期、中期和长期预期运营的规模有一个大致的了解。有了这个理解，你可以做出适合从启动日到平台成熟的个人用户和租户的明智决策。
- en: There is no point in wasting effort and resources to build for a billion users
    on day one. Similarly, there is no way to get to a billion users if there is no
    plan in place to adequately service that number of users.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一天就浪费精力和资源去为十亿用户构建是没有意义的。同样，如果没有适当的计划来服务这么多的用户，那么达到十亿用户的目标也是不可能的。
- en: Performance
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 性能
- en: Under a multi-tenant system, many users will be sharing – and, therefore, competing
    for access to – resources. This includes users under separate tenants, who would
    typically work for different organizations.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在多租户系统中，许多用户将共享资源——因此，他们将竞争访问这些资源。这包括属于不同租户的用户，他们通常为不同的组织工作。
- en: You need to consider how a typical tenant and a typical user will use the system.
    For example, if you are building an enterprise system and focusing on a single
    time zone, you should expect to see almost all the usage during business hours.
    You will need to size your resources to meet this demand, even though they will
    be idle out of business hours.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要考虑典型租户和典型用户将如何使用系统。例如，如果你正在构建一个企业系统并专注于单一时区，你应该预计几乎所有的使用都将在工作时间进行。你需要调整资源以满足这种需求，尽管它们在工作时间之外将是闲置的。
- en: You may face a similar problem with – for example – a streaming service that
    will spike in usage in the evening.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会遇到类似的问题，比如一个在晚上使用量激增的流媒体服务。
- en: Note that this scenario would offer a considerable advantage to a company offering
    its services across multiple time zones, where the usage spikes could be flattened
    out.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这种场景将为在多个时区提供服务的公司提供相当大的优势，其中使用量激增可以被平缓。
- en: 'Users in a multi-tenant system competing for shared resources is known as the
    “noisy neighbor” problem. This phenomenon is where one tenant or user is exhibiting
    particularly heavy resource usage and, by doing so, degrades the system performance
    for its other users. This problem is inevitable to a certain extent when building
    a multi-tenant system, but there are ways it can be mitigated, such as the following:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在多租户系统中，用户为了争夺共享资源而被称为“嘈杂邻居”问题。这种现象是指一个租户或用户表现出特别重的资源使用，通过这样做，降低了其他用户的系统性能。在构建多租户系统时，这个问题在一定程度上是不可避免的，但有一些方法可以减轻这个问题，例如以下方法：
- en: Implementing throttling to prevent a single tenant or user from consuming a
    disproportionate amount of resources.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施节流措施以防止单个租户或用户消耗不成比例的资源。
- en: Monitoring how the tenants and users interact with the system and working around
    the more resource-intensive examples. For example, they could be moved to a separate
    cluster.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控租户和用户如何与系统交互，并针对更资源密集型的示例进行调整。例如，它们可以被移动到单独的集群。
- en: Purchasing additional cloud resources. This is something of a blunt instrument,
    but it is effective.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 购买额外的云资源。这是一种相当直接的工具，但它是有效的。
- en: Isolation
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 隔离
- en: 'As we h discussed previously, it is of the utmost importance that data that
    relates to one tenant is invisible to another tenant, and each of the users within
    those tenants. An individual tenant’s data must be isolated. There are a few ways
    this can be achieved:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前讨论的，确保与一个租户相关的数据对其他租户以及这些租户中的每个用户都是不可见的，这一点至关重要。单个租户的数据必须被隔离。有几种方法可以实现这一点：
- en: Containers can be used on a one-container-per-tenant basis. This can be a very
    effective method to compartmentalize tenants of a system, but there would be scaling
    concerns should the application turn into the next Facebook.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以按一个容器一个租户的方式使用容器。这可以是一个非常有效的系统租户隔离方法，但如果应用程序变成下一个Facebook，那么就会存在扩展问题。
- en: Separate tables can be used per tenant in the same database. This provides a
    good degree of assurance that data cannot “leak,” but again, this would not scale
    efficiently to hundreds of tenants and millions of users.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在同一数据库中可以为每个租户使用单独的表。这提供了很好的保证，确保数据不会“泄露”，但再次强调，这不会高效地扩展到数百个租户和数百万用户。
- en: Tenant ID-based isolation, where data in the database is all in one table, with
    a `tenant_id` column. This scales very well but could be considered to be less
    secure than the previous options.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于租户ID的隔离，其中数据库中的数据都在一个表中，有一个`tenant_id`列。这扩展得非常好，但可能被认为比之前的选择不太安全。
- en: There is no “one-size-fits-all” approach to this problem. The level of isolation
    required will depend on the type of customers and the type of data being stored.
    This should be carefully considered at the start of a project, as changing the
    approach to data isolation later in the project life cycle can be extremely challenging.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个问题，没有“一刀切”的方法。所需的隔离级别将取决于客户类型和存储的数据类型。这应该在项目开始时仔细考虑，因为项目生命周期后期更改数据隔离的方法可能极具挑战性。
- en: Cost
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 成本
- en: Of course, we would like the most secure, performant, and easy-to-maintain application
    possible, but as application developers, we must always operate within the confines
    of the economic realities that are faced by the company building the application.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们希望拥有最安全、性能最佳且易于维护的应用程序，但作为应用程序开发者，我们必须始终在公司构建应用程序所面临的经济现实范围内运作。
- en: Even with matters as important as data security, there is always a cost trade-off
    to be made.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是像数据安全这样重要的问题，也总是需要做出成本权衡。
- en: It is extremely helpful if these are understood at the start of a project so
    that there are no nasty surprises later!
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在项目开始时就理解这些，那么以后就不会有令人不快的惊喜了！
- en: A database is foundational to the rest of an application, and making the correct
    choices regarding the aforementioned considerations is extremely important. The
    choices that are made at this stage will significantly impact the rest of the
    application. We will consider this in the next section.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库是整个应用程序的基础，关于上述考虑的正确选择至关重要。在这个阶段做出的选择将显著影响应用程序的其余部分。我们将在下一节中考虑这一点。
- en: Design considerations through the application layers
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过应用程序层的设计考虑
- en: The approach that will be taken to solve a multi-tenancy problem is probably
    one of the most important decisions to take in the early stages of a project.
    It can be one of the most expensive and technically challenging aspects to make
    a change to later in the project life cycle. The planning and the design of a
    solution for the multi-tenant problem must start in the very early phases and
    will influence all of the various layers in the application.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 解决多租户问题的方法可能是项目早期需要做出的最重要的决策之一。这可能是项目生命周期后期进行更改时最昂贵和最具技术挑战性的方面之一。针对多租户问题的解决方案规划和设计必须从非常早期阶段开始，并将影响应用程序的所有各个层次。
- en: The core reason for multi-tenancy is to segregate data that one customer stores
    such that it is not visible to a user under a different tenant.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 多租户的核心原因是为了隔离客户存储的数据，使得在另一个租户下用户无法看到这些数据。
- en: 'The key decision to make is where the data will be segregated, and this primarily
    affects the design of the database. The decision driver for this will have to
    be related to the users of a system. To make this decision, it is vital to understand
    the following:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 关键的决策是要确定数据将被隔离在哪里，这主要影响数据库的设计。这个决策的驱动因素必须与系统的用户相关。为了做出这个决定，了解以下内容至关重要：
- en: Who your tenants will be.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的租户将是谁。
- en: How your users will use a system.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的用户将如何使用系统。
- en: What the consequences of a data breach are to your customers.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据泄露对您的客户可能造成的后果。
- en: What the customers’ tolerance for risk versus cost is. Would they prefer a more
    costly but more secure solution or a cheaper solution?
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户对风险与成本的容忍度。他们更倾向于更昂贵但更安全的解决方案，还是更便宜的解决方案？
- en: What the consequences of a data leak are to a business
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据泄露对业务可能造成的后果
- en: Users of social media sites do not seem overly concerned for their privacy,
    and so will likely tolerate a less security-conscious approach to data segregation.
    Also, users of social media are often not prepared to pay anything for the system,
    so they are very price-conscious and not at all data privacy-conscious. Indeed,
    the business model of a social network is often to sell users’ data to the highest
    bidder!
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 社交媒体网站的用户似乎并不过于关心他们的隐私，因此可能会容忍对数据隔离不那么谨慎的方法。此外，社交媒体用户通常不愿意为系统支付任何费用，所以他们非常注重价格，根本不关心数据隐私。事实上，社交网络的业务模式通常是向出价最高者出售用户数据！
- en: Enterprise customers will almost never tolerate a social media-esque approach
    to data and will always prefer a more secure regime. Some enterprise customers
    will not accept a multi-tenant system at all. Military or government customers,
    for example, would almost certainly consider the risks too high and would insist
    on a single-tenant solution.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 企业客户几乎永远不会容忍类似社交媒体的数据处理方法，他们总是更喜欢更安全的制度。一些企业客户甚至完全不会接受多租户系统。例如，军事或政府客户几乎肯定会认为风险太高，并坚持使用单租户解决方案。
- en: If the customers of an application are likely to be primarily motivated by security,
    and in particular, rigorous data segregation and an absolute guarantee that there
    will be no slip-ups, then the best solution is to not design a multi-tenant application
    and, therefore, not build a SaaS application! Given that this book is about developing
    SaaS applications, we will discount this customer class entirely. However, it
    is important to be aware of the limitation of the technique. A customer base that
    is primarily motivated by absolute data security over all other considerations
    is very unlikely to accept an app that is delivered via SaaS. These users will
    most likely require on-premises solutions hosted inside their own network, with
    full control over the data retained by the users’ organization.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个应用程序的客户主要受安全性驱动，特别是严格的数据隔离和绝对保证不会出现任何疏漏，那么最好的解决方案就是不要设计多租户应用程序，因此也不构建SaaS应用程序！鉴于这本书是关于开发SaaS应用程序的，我们将完全排除这一客户类别。然而，了解这项技术的局限性是很重要的。一个主要受绝对数据安全驱动的客户群不太可能接受通过SaaS提供的应用程序。这些用户更有可能需要在其自己的网络内部署本地解决方案，并保留用户组织对数据的完全控制。
- en: Given that we are building for customers that we feel will buy a SaaS application,
    let’s consider those!
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们是为那些我们认为会购买SaaS应用程序的客户构建的，让我们考虑一下这些客户吧！
- en: One database per tenant
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 每个租户一个数据库
- en: The most secure way to segregate one tenant’s data from another is to store
    the data in completely separate databases. This has a considerable overhead in
    terms of maintaining and updating the multiple databases (one per customer) that
    are required under this scheme. This approach all but guarantees there will be
    no data leaks, but the additional overheads are considerable. An application that
    uses this scheme will also present challenges in scaling, and it may lead to spiraling
    costs if there is a per-instance license for the database platform that is selected.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个租户的数据与另一个租户的数据完全隔离的最安全方式是将数据存储在完全独立的数据库中。这种方案在维护和更新多个数据库（每个客户一个）方面会产生相当大的开销。这种方法几乎可以保证不会发生数据泄露，但额外的开销是相当大的。使用这种方案的应用程序在扩展方面也会面临挑战，如果选择的数据库平台有按实例许可的费用，可能会导致成本螺旋上升。
- en: The issue of scaling does present a hard cap on the number of tenants that a
    system could be designed for. There is no way that Microsoft could make their
    DevOps platform work if every tenant organization had a unique and segregated
    database – there are simply too many customers for that to be feasible.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 规模化问题确实对系统设计可容纳的租户数量设定了一个硬性上限。如果每个租户组织都拥有独特且独立的数据库，微软是无法让他们的DevOps平台工作的——因为客户数量太多，这样做根本不可行。
- en: Aside from security, one other benefit of this scheme is that the number of
    rows of data stored in the individual database will be lower than in a shared
    database, so there may be a slight performance boost possible in the database
    layer. Note that this may be offset in the application layers.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 除了安全性之外，这种方案的一个其他好处是，存储在单个数据库中的数据行数将低于共享数据库，因此在数据库层可能会有轻微的性能提升。请注意，这可能在应用层中被抵消。
- en: This type of scheme would be used only if the number of customers was quite
    small and were hugely security-conscious. There would be an argument in these
    cases to build single-tenant, on-premises systems.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方案只有在客户数量非常少且对安全性极为重视的情况下才会使用。在这种情况下，可能会有人提出构建单租户、本地系统的论点。
- en: Shared schema
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 共享模式
- en: This is the most common solution that is used for the vast majority of commonly
    used SaaS applications that you may encounter in day-to-day use. Even some potentially
    sensitive applications, such as a system that hosts financial and taxation information,
    may make use of a shared schema.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最常见的解决方案，用于大多数日常使用中可能遇到的常用SaaS应用程序。甚至一些可能敏感的应用程序，如托管财务和税务信息的系统，也可能使用共享模式。
- en: Under this regime, a single database is used, with tables containing data from
    multiple tenants. The data is protected from being shared using some form of identification
    in the database.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种制度下，使用单个数据库，其中包含来自多个租户的数据表。数据通过数据库中的某种形式的标识来保护，防止共享。
- en: Using this scheme significantly boosts the benefits that are derived from using
    the SaaS paradigm in the first place. These days, there are plenty of well-understood
    and well-used ways of keeping data secure under such a scheme. There may also
    be an argument to be made that having only one database and one schema to keep
    on top of actually makes it easy to secure a system.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种方案显著提高了最初使用SaaS范式所获得的益处。如今，有许多被广泛理解和使用的方案可以在这种方案下确保数据安全。也可能有人提出，只有一个数据库和一个模式需要管理，实际上使得系统更容易得到保护。
- en: One schema per tenant
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 每个租户一个模式
- en: This is the halfway house between the two aforementioned options. Under this
    method, a single database is used, but the same schema is deployed to the database
    multiple times, once per customer. Each schema is isolated, and there are no connections
    or relations between the individual customers’ schema.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在上述两种方案之间的折中方案。按照这种方法，使用单个数据库，但相同的模式被部署到数据库中多次，每次针对一个客户。每个模式都是隔离的，并且各个客户的模式之间没有连接或关系。
- en: In some ways, this is the best of both worlds, and in other ways, it’s the worst.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些方面，这是两全其美的方案，而在其他方面，则是最糟糕的。
- en: There is still a significant additional overhead in managing the many schemas,
    and there is still a hard cap on the number of individual tenants that this could
    be scaled up to. Particularly security-conscious customers may still be turned
    off by this, considering it too much of a risk to even share a database.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 管理众多模式仍然存在显著额外的开销，并且对可以扩展的个别租户数量仍然有一个硬性上限。尤其是一些对安全性极为重视的客户可能会因此感到不安，认为即使是共享数据库也是一种风险。
- en: One table per tenant
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 每个租户一个表
- en: This is very closely related to the aforementioned *one schema per tenant* method.
    Under this paradigm, every tenant in the system has a table added to the database
    that pertains only to them.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这与前面提到的“每个租户一个模式”方法非常相似。在这种范式下，系统中的每个租户都会在数据库中添加一个仅与他们相关的表。
- en: The pros and cons of the previous method also apply here.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 之前方法的优势和劣势也适用于此处。
- en: Examples
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例
- en: To illustrate these points, I’ll build an example that demonstrates the two
    preceding segregations.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这些观点，我将构建一个示例，演示前面提到的两种隔离方法。
- en: 'We will imagine there are four tenant organizations of the `GoodHabits` app.
    These tenants are as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将设想有四个`GoodHabits`应用程序的租户组织。这些租户如下：
- en: AscendTech, who is very security-conscious and wants a private database
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AscendTech，一个非常重视安全性和希望拥有私有数据库的组织
- en: Bluewave, who is also security-minded and also wants a private database
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bluewave，也是一个重视安全性和希望拥有私有数据库的组织
- en: CloudSphere, who is a price-conscious customer and takes the cheaper option
    to have a shared database
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CloudSphere，一个价格敏感的客户，选择更便宜的共享数据库方案
- en: DataStream, who will also use the shared database and share it with CloudSphere
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DataStream，也将使用共享数据库并与CloudSphere共享
- en: With these four example organizations, we can demonstrate how a multi-tenant
    database can work. This example will not be exhaustive but will provide a solid
    foundational understanding.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这四个示例组织，我们可以展示多租户数据库是如何工作的。这个示例不会详尽无遗，但将提供一个坚实的基础理解。
- en: In this section, we will build on the `GoodHabits` database and API project
    that we created in the previous chapter.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将基于我们在上一章中创建的`GoodHabits`数据库和API项目进行构建。
- en: Adding the required packages
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加所需的包
- en: 'We only need to add one nuget package to the `HabitService` project for this
    chapter. Navigate to the project folder in a terminal, and enter the following:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要为这一章的`HabitService`项目添加一个nuget包。在终端中导航到项目文件夹，并输入以下内容：
- en: '[PRE0]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Modifying the entity
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改实体
- en: 'Many of the tables in the database will require a column that identifies the
    owner of the data – the tenant! To facilitate this, we can start by creating an
    interface called `I``H``asTenant`. Create the file with the following commands:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库中的许多表将需要一个标识数据所有者（即租户）的列！为了便于此操作，我们可以先创建一个名为`IHasTenant`的接口。使用以下命令创建文件：
- en: '[PRE1]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, copy the following code into the file:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将以下代码复制到文件中：
- en: '[PRE2]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You will recall that we previously created an entity class called `Habit` that
    defined the data structure for the database. This entity will need to have a `TenantName`
    value, so it should implement the `IHasTenant` interface. Modify the class that
    we created in [*Chapter 2*](B19343_02.xhtml#_idTextAnchor056) such that it looks
    like this:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 你会记得我们之前创建了一个名为`Habit`的实体类，该类定义了数据库的数据结构。这个实体将需要一个`TenantName`值，因此它应该实现`IHasTenant`接口。修改我们在[*第二章*](B19343_02.xhtml#_idTextAnchor056)中创建的类，使其看起来像这样：
- en: '[PRE3]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Creating the tenant configuration
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建租户配置
- en: 'The configuration for the tenants in a live system would typically be stored
    in a separate database somewhere – a client portal application or similar. However,
    for the purposes of this demo, we will just use the `appsettings.json` file. Add
    the following to the `appsettings.json` file in the `Goodhabits.HabitService`
    project:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际系统中，租户的配置通常会存储在某个单独的数据库中——例如客户端门户应用程序等。然而，为了演示目的，我们只需使用`appsettings.json`文件。在`Goodhabits.HabitService`项目的`appsettings.json`文件中添加以下内容：
- en: '[PRE4]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The preceding configuration has defined four tenants:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 上述配置已定义了四个租户：
- en: The first two, AscendTech and Bluewave, want fully segregated databases and
    have had connection strings specified that are unique to them
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前两个，AscendTech和Bluewave，希望有完全隔离的数据库，并且已经指定了仅针对它们的唯一连接字符串
- en: The second two, CloudSphere and Datastream, do not have a unique connection
    string, so they are considered to be happy to use the shared database
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后两个，CloudSphere和Datastream，没有唯一的连接字符串，因此它们被认为是乐意使用共享数据库的
- en: 'In the `GoodHabits.Database` project, add a class that matches the structure
    of the config that we added into `appsettings.json` previously. The config will
    be loaded into this at startup. Call the class `TenantSettings`, and then paste
    in the following:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在`GoodHabits.Database`项目中，添加一个与之前添加到`appsettings.json`中的配置结构相匹配的类。该配置将在启动时加载到这个类中。将类命名为`TenantSettings`，然后粘贴以下内容：
- en: '[PRE5]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Creating a tenant service
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建租户服务
- en: Next, we will create a service that can provide details about the tenants to
    other parts of the application that may be interested.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个服务，它可以向可能感兴趣的应用程序的其他部分提供有关租户的详细信息。
- en: 'Start in the `GoodHabits.Database` project by adding an interface called `ITenantService`,
    and then add the following code:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 从`GoodHabits.Database`项目开始，添加一个名为`ITenantService`的接口，然后添加以下代码：
- en: '[PRE6]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, we need to implement this service. This is done in the HabitService project
    and should look like this. Double-check that you are adding this to the HabitService
    project and not the Database project:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要实现这个服务。这是在HabitService项目中完成的，应该看起来像这样。请务必确认您是将此添加到HabitService项目而不是Database项目中：
- en: '[PRE7]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The primary function of the preceding code block is to intercept incoming HTTP
    requests, check that there is a tenant named in the header, and match that name
    with a known tenant.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码块的主要功能是拦截传入的HTTP请求，检查头部中是否有名为租户的条目，并将该名称与已知的租户进行匹配。
- en: Modifying the SeedData and AppDbContext classes
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改SeedData和AppDbContext类
- en: 'You will remember that in [*Chapter 2*](B19343_02.xhtml#_idTextAnchor056),
    we added some seed data. As we now require a tenant name to be present in the
    database, we will have to update the seed data. Copy in the following, or just
    add the `TenantName`:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 你会记得在[*第二章*](B19343_02.xhtml#_idTextAnchor056)中，我们添加了一些种子数据。由于我们现在要求数据库中必须有租户名称，因此我们必须更新种子数据。复制以下内容，或者只需添加`TenantName`：
- en: '[PRE8]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `GoodHabitsDbContext` class that was created previously had a single hardcoded
    database connection string. We will replace this and make use of the multiple
    database connections that we defined in the preceding config.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 之前创建的`GoodHabitsDbContext`类有一个硬编码的单个数据库连接字符串。我们将替换它并使用之前配置中定义的多个数据库连接。
- en: 'Replace the `GoodHabitsDbContext` class entirely with the following:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 完全用以下内容替换`GoodHabitsDbContext`类：
- en: '[PRE9]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The main change in the preceding code is that the connection string is now read
    from the `TenantService` class that we created previously. This is far more dynamic
    and allows us to create new databases for new tenants on the fly as we build the
    app. This is also far more secure than having a connection string hardcoded in
    the source code and checked into the repository.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 前面代码的主要变化是现在连接字符串是从我们之前创建的`TenantService`类中读取的。这更加动态，允许我们在构建应用程序时即时为新的租户创建新的数据库。这也比在源代码中硬编码连接字符串并将其提交到存储库更加安全。
- en: Another important change to note is that we add a query filter at the context
    level. This ensures that only the correct tenant can read their data, which is
    a very important security consideration.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个需要注意的重要变化是我们添加了一个在上下文级别的查询过滤器。这确保只有正确的租户可以读取他们的数据，这是一个非常重要的安全考虑。
- en: Finally, we have overridden the `SaveChangesAsync` method. This allows us to
    set the tenant name here and not have to consider it in any of our other implementation
    code. This cleans up the rest of our code considerably.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们已经重写了`SaveChangesAsync`方法。这允许我们在这里设置租户名称，而无需在我们的其他实现代码中考虑它。这大大简化了我们的其余代码。
- en: Writing a service layer
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写服务层
- en: We have now configured the `Habit` service and the database to work in a multi-tenant
    way, enforcing the presence of a tenant ID in every request. This is a good start
    to provide good security and separation between tenants.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经配置了`Habit`服务以及数据库以多租户方式工作，强制在每个请求中包含租户ID。这是提供良好安全和租户之间分离的良好开端。
- en: Next, we’ll demonstrate what we did by hooking up the database and the service
    and placing some test calls to the Habit service, showing how the tenancy is enforced.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将通过连接数据库和服务，并对Habit服务进行一些测试调用，展示如何强制执行租户。
- en: 'We will start by writing a service layer. Open a terminal in the `HabitService`
    folder and run the following script:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先编写服务层。在`HabitService`文件夹中打开一个终端并运行以下脚本：
- en: '[PRE10]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Populate the interface with the following:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下内容填充接口：
- en: '[PRE11]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then, populate the class with the following:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用以下内容填充该类：
- en: '[PRE12]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This service is just a simple wrapper around some of the calls to the database.
    We could add a lot more functionality, but this will serve to demonstrate how
    multi-tenancy works in practice.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 此服务只是围绕对数据库的一些调用的一些简单包装。我们可以添加更多功能，但这将有助于展示多租户在实际中的工作方式。
- en: Writing the controller
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写控制器
- en: With the service created, we’ll now add a controller that makes the data from
    the service available over HTTP.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 服务创建后，我们现在将添加一个控制器，使其可以通过HTTP提供来自服务的数据。
- en: 'Run the following script in the `HabitService` folder to set up the required
    files:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在`HabitService`文件夹中运行以下脚本以设置所需的文件：
- en: '[PRE13]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then, add the code for the controller, as shown here:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，添加控制器的代码，如下所示：
- en: '[PRE14]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This controller simply gives us two endpoints to create and read a habit from
    the database, via the service layer that we created previously.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 此控制器仅提供了两个端点，通过我们之前创建的服务层创建和读取数据库中的习惯。
- en: 'Finally, add the following code to the `CreateHabitDto` file:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将以下代码添加到`CreateHabitDto`文件中：
- en: '[PRE15]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Adding a service extension
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加服务扩展
- en: Now that we are potentially dealing with many instances of the database, we
    need to add the ability to create and update all of the databases when the application
    starts up. We will create an extension to the service collection to facilitate
    this.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可能正在处理许多数据库实例，我们需要在应用程序启动时添加创建和更新所有数据库的能力。我们将创建一个服务集合的扩展来简化这一过程。
- en: 'Add a class to the HabitService project called `ServiceCollectionExtensions`,
    and then add the following code:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在HabitService项目中添加一个名为`ServiceCollectionExtensions`的类，然后添加以下代码：
- en: '[PRE16]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The key point to understand from the preceding code is that the database connection
    string is set on a per-tenant basis, and that the tenants’ database is updated
    per the latest migrations when that tenant logs in to the app.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的代码中理解的关键点是数据库连接字符串是基于租户设置的，并且当租户登录到应用程序时，租户的数据库将根据最新的迁移进行更新。
- en: This system takes much of the overhead of maintaining many databases away from
    the administrators. It is all handled automatically!
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 该系统将维护多个数据库的大部分开销从管理员那里移除。所有这些操作都是自动完成的！
- en: Application plumbing
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用程序管道
- en: 'Finally, we need to wire up all these new services. This is done in the `Program.cs`
    file in the `GoodHabits.HabitService` project. In this file, paste the following:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要连接所有这些新服务。这需要在 `GoodHabits.HabitService` 项目的 `Program.cs` 文件中完成。在这个文件中，粘贴以下内容：
- en: '[PRE17]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In this code, you can see that we add the two new services that we created.
    We also make use of the service extension created previously and configure the
    Swagger endpoints.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码中，你可以看到我们添加了我们创建的两个新服务。我们还使用了之前创建的服务扩展并配置了 Swagger 端点。
- en: Testing
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: With the previous configurations in place, we can now run the application and
    see how the changes we made have affected the operation of the controllers.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的配置到位后，我们现在可以运行应用程序并查看我们所做的更改如何影响了控制器的操作。
- en: 'Because we have made some changes to the database (by adding the `TenantName`
    column to the `Habit` table), we will need to create a new migration with Entity
    Framework. Create the migration by navigating to the database project and running
    the following:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们对数据库进行了一些更改（通过在 `Habit` 表中添加 `TenantName` 列），我们需要使用 Entity Framework 创建一个新的迁移。通过导航到数据库项目并运行以下命令来创建迁移：
- en: '[PRE18]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Start the application with `dotnet run` and check that the API runs correctly.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `dotnet run` 启动应用程序并检查 API 是否运行正确。
- en: You can look at the API in Swagger, but if you try to hit one of the endpoints,
    you will see an invalid tenant exception. This is expected, as we now have to
    add a header to every request to identify which tenant the request is for.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 Swagger 中查看 API，但如果尝试访问其中一个端点，你会看到一个无效租户异常。这是预期的，因为我们现在必须为每个请求添加一个头，以标识请求是为哪个租户。
- en: '![Figure 3.1 – The Swagger error](img/B19343_03_01.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.1 – Swagger 错误](img/B19343_03_01.jpg)'
- en: Figure 3.1 – The Swagger error
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1 – Swagger 错误
- en: If all has gone well, the API will start, and you can view it in Swagger to
    see the preceding available endpoints!
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，API 将会启动，你可以在 Swagger 中查看之前可用的端点！
- en: In order to test `HabitService`, we will use the `ThunderClient` extension that
    we installed in [*Chapter 2*](B19343_02.xhtml#_idTextAnchor056).
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试 `HabitService`，我们将使用我们在 [*第 2 章*](B19343_02.xhtml#_idTextAnchor056) 中安装的
    `ThunderClient` 扩展。
- en: Open the `ThunderClient` extension, click on `CloudSphere`.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `ThunderClient` 扩展，点击 `CloudSphere`。
- en: '![Figure 3.2 – The ThunderClient request](img/B19343_03_02.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.2 – ThunderClient 请求](img/B19343_03_02.jpg)'
- en: Figure 3.2 – The ThunderClient request
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.2 – ThunderClient 请求
- en: 'The preceding is a properly configured request with the tenant added. Hitting
    **Send** will issue the response, and if everything has worked, you should see
    the following response:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 上述是一个正确配置的请求，其中已添加租户。点击 **发送** 将会发出响应，如果一切顺利，你应该看到以下响应：
- en: '![Figure 3.3 – The ThunderClient response](img/B19343_03_03.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.3 – ThunderClient 响应](img/B19343_03_03.jpg)'
- en: Figure 3.3 – The ThunderClient response
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.3 – ThunderClient 响应
- en: The preceding shows that we have successfully returned the data for the `CloudSphere`
    tenant.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 上述内容显示，我们已经成功返回了 `CloudSphere` 租户的数据。
- en: You should take some time now to do some more investigations with this and convince
    yourself that we have correctly limited access to data on a per-tenant basis!
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该花些时间进行更多调查，并确信我们已经正确地按租户限制了数据访问！
- en: That is the end of the practical part of this chapter. We’ll now move on to
    consider the security implications of what we have done.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是本章实践部分的结束。我们现在将转向考虑我们所做事情的安全影响。
- en: Security considerations
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全性考虑
- en: I think that it should go without saying that multi-tenancy significantly affects
    the security landscape of a SaaS application.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为不用说，多租户显著影响了 SaaS 应用程序的安全格局。
- en: There are many aspects to security, ranging from simple (or at least standard)
    considerations, such as authenticating users to the ability of the application,
    to withstanding very rare events, such as a natural disaster taking out a crucial
    data center or a vital internet backbone.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性有许多方面，从简单的（或至少标准的）考虑，例如验证用户，到能够抵御非常罕见的事件，例如自然灾害导致关键数据中心或重要互联网骨干网络中断。
- en: The word “security” in this context refers to the overall ability of an application
    to withstand anything that the world may throw at it – and continue to keep the
    tenants’ and users’ data correct, accessible, and private! This can include hacks,
    attacks, natural disasters, coding errors leaking data, or even regulatory issues,
    such as the **General Data Protection** **Regulation** (**GDPR**).
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个语境中，“安全”一词指的是应用程序抵御外界一切可能抛来的挑战的整体能力——并且继续确保租户和用户的数据正确、可访问和私密！这可以包括黑客攻击、攻击、自然灾害、代码错误导致数据泄露，甚至监管问题，如**通用数据保护条例**（**GDPR**）。
- en: Potential security pitfalls
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可能的安全陷阱
- en: Developers of every type of application will face a broad range of potential
    security issues. It is an unfortunate reality of SaaS applications and, particularly,
    multi-tenant applications that the developers of such will have to consider nearly
    all possible security threats!
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 每种类型的应用程序的开发者都将面临广泛的安全问题。不幸的是，SaaS应用程序，尤其是多租户应用程序的现实是，这类应用程序的开发者必须考虑几乎所有可能的安全威胁！
- en: SaaS applications are typically layered, with at least a database, an API, and
    a user interface. Each of these layers presents an attack vector. SaaS applications
    are also often hosted on a cloud service. Hosting in the cloud is generally more
    secure than hosting on-premises, but there are a number of additional attack vectors
    that must be considered. Most importantly, the user accounts of the administrators
    can be compromised and the admin pages accessed remotely. This is generally less
    of a concern with on-prem solutions, which may have no remote access at all.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: SaaS应用程序通常是分层的，至少包括数据库、API和用户界面。每一层都提供了一个攻击向量。SaaS应用程序也经常托管在云服务上。与本地托管相比，在云中托管通常更安全，但必须考虑许多额外的攻击向量。最重要的是，管理员的用户账户可能会被攻破，并且远程访问管理页面。这在本地解决方案中通常不是一个大问题，因为可能完全没有远程访问。
- en: This section will list some of the security considerations that you will have
    to take into account as a developer of SaaS applications.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将列出作为SaaS应用程序开发者你必须考虑的一些安全考虑因素。
- en: Resource access management
  id: totrans-219
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 资源访问管理
- en: First, and most obviously, access to the resources in a system must be limited
    to only those with permission to see those resources.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，最明显的是，一个系统中资源的访问权限必须限制只授予那些有权查看这些资源的人。
- en: For example, and rather obviously, data pertaining to one tenant should never
    be visible to a user on another tenant, unless there is a case where data is deliberately
    shared. When developing a SaaS application, it’s important to understand that
    an attacker will target the user interface, the API, and also the database in
    an effort to gain access to the data.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，很明显，一个租户的数据永远不应该对另一个租户的用户可见，除非有故意共享数据的情况。在开发SaaS应用程序时，重要的是要理解攻击者会针对用户界面、API以及数据库进行攻击，以获取数据访问权限。
- en: An attacker will also attempt to intercept data when it is “in flight.” When
    data moves from the database to the API, or from the API to the user interface,
    it is vulnerable.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者还会尝试在数据“在传输中”时拦截数据。当数据从数据库移动到API，或从API移动到用户界面时，它就处于易受攻击的状态。
- en: As well as individual user data, it is likely that there will be sections of
    an application that are only accessible by users in a certain *role*, such as
    administrators.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 除了个人用户数据外，很可能应用程序中会有一些只有特定*角色*的用户才能访问的部分，例如管理员。
- en: Any SaaS system that fails to control resource access will very quickly be compromised,
    and an application with a reputation for losing customers’ data will quickly cease
    to attract customers. Failures in this area can be catastrophic to an application
    and, indeed, a company’s reputation.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 任何未能控制资源访问的SaaS系统都将很快被攻破，一个因丢失客户数据而声誉受损的应用程序将很快失去客户。在这个领域的失败可能对应用程序和公司的声誉造成灾难性的影响。
- en: This is a very important consideration in a SaaS application, particularly a
    multi-tenant application where tenants will share access to certain resources
    (such as the database), and access to these resources must be managed very carefully.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 这在SaaS应用程序中是一个非常重要的考虑因素，尤其是在多租户应用程序中，租户将共享对某些资源（如数据库）的访问权限，而这些资源的访问必须非常谨慎地管理。
- en: Data leaks
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据泄露
- en: Similar to the aforementioned, data leaks can prove very costly in terms of
    reputation, and they can also have hugely significant financial implications for
    the business that owns the application!
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 与上述类似，数据泄露在声誉方面可能代价高昂，而且它们也可能对拥有应用程序的企业产生巨大的财务影响！
- en: 'While a data leak is, in some ways, a failure of resource access, it is normally
    a more general problem. Some examples to consider are as follows:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然数据泄露在某种程度上是资源访问失败，但它通常是一个更普遍的问题。以下是一些可以考虑的例子：
- en: A user interface that transmits credit card details from the client to the server
    in plain text, allowing a **man-in-the-middle** (**MitM**) attack that gathers
    the credit card information from all users. As stated previously, data “in flight”
    tends to be vulnerable.
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用户界面将信用卡详情以纯文本形式从客户端传输到服务器，这允许进行**中间人攻击**（**MitM**），从而从所有用户那里收集信用卡信息。如前所述，数据“在传输中”往往容易受到攻击。
- en: An API endpoint that misses the authentication attribute, thus rendering it
    accessible by anyone, whether they are authenticated or not. Similarly, an API
    endpoint may have an incorrect authentication attribute. This is extremely important,
    and measures should be put in place to automatically test that the API is appropriately
    secured.
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个缺少认证属性的API端点，因此任何人都可以访问，无论他们是否经过认证。同样，API端点可能有一个错误的认证属性。这一点非常重要，应该采取措施自动测试API是否得到了适当的保护。
- en: A database with poor security that allows an attacker to access, download, or
    delete the data in the database.
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个安全性差的数据库允许攻击者访问、下载或删除数据库中的数据。
- en: A server or a VM that has been improperly configured and can be accessed remotely
    by a malicious user.
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个配置不当的服务器或虚拟机，可以被恶意用户远程访问。
- en: Poor password hygiene that allows attackers to *guess* the passwords of users,
    either by brute force, rainbow tables, or similar *blunt-force* attacks.
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 糟糕的密码卫生习惯允许攻击者通过暴力破解、彩虹表或类似的*暴力*攻击来*猜测*用户的密码。
- en: Very often these days, data breaches can come with a very large financial penalty
    for a company that has operated an insecure application. In 2018, the **British
    Airways** (**BA**) website leaked the credit card data of 380,000 customers –
    one of whom would go on to write this book! The financial cost to BA was £183
    million ($244 million at the time of writing the book). It would have been considerably
    cheaper for BA to hire a team of developers and security specialists to secure
    its website in the first place!
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，数据泄露可能给运营不安全应用程序的公司带来非常高的财务罚款。2018年，**英国航空公司**（**BA**）的网站泄露了38万名客户的信用卡数据——其中一人后来写了这本书！对BA的财务成本是1.83亿英镑（在撰写本书时为2.44亿美元）。对于BA来说，最初雇佣一支开发人员和安全专家团队来保护其网站要便宜得多！
- en: There is an additional consideration when building a SaaS application, in particular
    an application with a multi-tenant database. A large risk vector for these types
    of applications in terms of data leaks is that one tenant’s data will accidentally
    be revealed to a user belonging to a different tenant when those two tenants share
    a storage resource, an app server, a database, or similar. As discussed in this
    chapter, a rigorous approach to designing a multi-tenant solution when the app
    is in the concept stage is needed!
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建SaaS应用程序时，特别是具有多租户数据库的应用程序时，需要考虑一个额外的因素。就数据泄露而言，这些类型的应用程序存在一个很大的风险因素，即当两个租户共享存储资源、应用服务器、数据库或类似资源时，一个租户的数据可能会意外地泄露给属于不同租户的用户。正如本章所讨论的，当应用程序处于概念阶段时，需要采取严格的方法来设计多租户解决方案！
- en: Data corruptions
  id: totrans-236
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据损坏
- en: The various users and tenants in a multi-tenant application are separated from
    each other in one of the ways described previously, but the reality is that they
    are often sharing some (or many) of the same resources. They may be sharing a
    database, an app server, a user authentication system, and so on. Should one of
    these systems be corrupted by one user, there may be some contagion, and the corruption
    may spread and subsequently impact another user. This is rare in the modern era
    where cloud resources are typically used, and the big cloud providers should have
    a handle on these types of issues.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在多租户应用程序中，各种用户和租户以之前描述的一种方式相互隔离，但现实情况是，他们经常共享一些（或许多）相同的资源。他们可能共享数据库、应用服务器、用户认证系统等。如果其中一个系统被一个用户破坏，可能会出现一些传染，破坏可能会传播并随后影响另一个用户。在通常使用云资源的现代时代，这种情况很少见，大型云服务提供商应该能够处理这些问题。
- en: The primary mitigation for this is to be very careful when segregating individual
    tenant’s concerns and to use a reputable cloud provider.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 针对此问题的主要缓解措施是在隔离单个租户的关注点时非常小心，并使用信誉良好的云服务提供商。
- en: It goes without saying that you should back up your data regularly and also
    check that an application can be recovered from said backups!
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 毫无疑问，你应该定期备份你的数据，并检查应用程序是否可以从这些备份中恢复！
- en: Hacks and attacks
  id: totrans-240
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 漏洞和攻击
- en: While some of the aforementioned data leaks could be classed as hacks or attacks,
    a data leak is typically more *passive* – like a pipe that is leaking water. A
    hack is more active – like a pipe that someone has hit with an axe!
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然上述一些数据泄露可能被视为漏洞或攻击，但数据泄露通常是更“被动”的——就像漏水的水管。漏洞则更为主动——就像有人用斧头砍过的水管！
- en: There is a huge range of attacks that the operators of SaaS applications may
    face, but deep-diving security concerns are out of the scope of this chapter and,
    indeed, this book.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: SaaS应用程序的运营商可能会面临广泛的攻击，但深入的安全问题超出了本章的范围，实际上也超出了本书的范围。
- en: However, it is worth considering the possibility of a co-tenant attack, as they
    are specific to a multi-tenant application. While an external attacker will typically
    have some access to the application, assuming that, as a minimum, the login page
    is available over the public internet, a fully paid-up user will by definition
    have more access to more parts of the system; therefore, they will be in a better
    position to mount an attack. This attack could be against the infrastructure or
    other users.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，值得考虑的是共租户攻击的可能性，因为这种攻击是特定于多租户应用程序的。虽然外部攻击者通常可以访问应用程序，假设至少登录页面可以通过公共互联网访问，那么付费用户将定义上能够访问系统中的更多部分；因此，他们将处于更好的位置发起攻击。这种攻击可能针对基础设施或其他用户。
- en: Configuration
  id: totrans-244
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置
- en: SaaS applications add a degree of complexity, and with this complexity will
    come a certain amount of configuration overhead.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: SaaS应用程序增加了复杂性，而随着这种复杂性，配置开销也会随之而来。
- en: A configuration error could, for example, accidentally leak a production password
    or access to a database or other resource.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，配置错误可能会意外泄露生产密码或对数据库或其他资源的访问权限。
- en: It is very easy to overlook configuration parameters, but this can be a costly
    mistake. Everything should be stored in as secure a way as possible, making use
    of key vaults and secret managers as much as possible.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易忽略配置参数，但这可能是一个代价高昂的错误。一切应尽可能以最安全的方式存储，尽可能多地使用密钥保管库和密钥管理器。
- en: Care should also be taken when it comes to checking configuration files in the
    source code repository, as this is unfortunately a common way to leak passwords
    and the like.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在检查源代码仓库中的配置文件时也应格外小心，因为不幸的是，这是泄露密码等信息的常见方式。
- en: Storage
  id: totrans-249
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 存储
- en: Every SaaS application will have some form of data stored, and that data presents
    an attack vector that can be utilized to compromise the application.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 每个SaaS应用程序都将以某种形式存储数据，而这些数据构成了一个攻击向量，可以利用它来损害应用程序。
- en: Data retention and deletion
  id: totrans-251
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据保留和删除
- en: Similar to the aforementioned, a SaaS application will retain sensitive data.
    It is vitally important that this is secured. Another key consideration with data
    retention is that in many jurisdictions, individuals have the “right to be forgotten,”
    where all of the data relating to that individual must be anonymized.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 与上述类似，SaaS应用程序将保留敏感数据。确保这些数据的安全性至关重要。在数据保留方面，另一个关键考虑因素是，在许多司法管辖区，个人拥有“被遗忘的权利”，即与该个人相关的所有数据都必须匿名化。
- en: 'This can be very challenging in the context of a SaaS application for the following
    reasons:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在SaaS应用程序的背景下，这可能非常具有挑战性，原因如下：
- en: The database will typically be multi-tenant. How easy is it to completely wipe
    out all of the information relating to one tenant without orphaning other records?
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库通常是多租户的。在不孤立其他记录的情况下，完全清除与单个租户相关的所有信息有多容易？
- en: Logging will most likely be performed across all layers – user interface, API,
    and database. How sure can you be that there is no sensitive customer data in
    those logs?
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录很可能会在所有层——用户界面、API和数据库——上执行。你有多确定那些日志中没有敏感的客户数据？
- en: Backups are obviously a very important part of the security of a system, but
    should you have to do a restoration at any point, how can you be sure that previously
    deleted data has not now been restored?
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 备份显然是系统安全的重要组成部分，但如果你需要在任何时候进行恢复，你如何确保之前删除的数据现在没有被恢复？
- en: All of the aforementioned require a meticulous approach to data retention and
    deletion in order to guarantee your customers that their data is secure.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 所有上述内容都需要对数据保留和删除进行细致入微的处理，以确保你的客户知道他们的数据是安全的。
- en: Regulations
  id: totrans-258
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 规章制度
- en: A huge part of data security when building a modern SaaS application is to understand
    the regulatory frameworks that you must comply with. The internet offers a truly
    global reach for your application, but that global reach means that you may have
    to consider a huge array of regulatory frameworks, of which the consequences for
    breaching are often astronomically high fines and penalties.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建现代SaaS应用程序时，数据安全的一个重要部分是理解你必须遵守的监管框架。互联网为你的应用程序提供了真正全球的覆盖范围，但这种全球覆盖范围意味着你可能必须考虑大量的监管框架，违反这些框架的后果通常是天文数字般的罚款和处罚。
- en: The European Union’s GDPR law stipulates rules for how organizations must use
    personal data, and the penalties for breaching these regulations can be incredibly
    harsh – 10 million euros, or 2% of a firm’s entire annual global turnover. These
    kinds of laws are becoming increasingly common in many jurisdictions.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 欧洲联盟的GDPR法律规定了组织必须如何使用个人数据，违反这些规定的处罚可能非常严厉——1000万欧元，或公司全年全球营业额的2%。这类法律在许多司法管辖区变得越来越普遍。
- en: 'Key questions to ask yourself in this regard are as follows:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在这方面，你应该问自己的关键问题是：
- en: What jurisdictions govern the data that will be stored in this application?
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哪些司法管辖区管理将存储在此应用程序中的数据？
- en: Do your applications adhere to these requirements?
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的应用程序是否遵守这些要求？
- en: Do the partners and third parties that you are working with adhere to these
    regulations?
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与你合作的合作伙伴和第三方是否遵守这些规定？
- en: Good security practices for multi-tenant applications
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多租户应用程序的良好安全实践
- en: I hope that the preceding set of potential horror stories hasn’t put you off!
    In this section, I’ll list some of the mitigations that should be considered.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望前面提到的潜在恐怖故事没有让你感到沮丧！在本节中，我将列出一些应该考虑的缓解措施。
- en: Governance, risk, and compliance (GRC) protocols
  id: totrans-267
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 治理、风险和合规性（GRC）协议
- en: 'GRC is a set of processes and procedures that a business will put in place
    for many reasons, such as for meeting objectives, maintaining regulatory compliance,
    or adequately securing a SaaS application! These could be as follows:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: GRC是一套业务出于多种原因（如满足目标、维护监管合规性或充分保护SaaS应用程序）将实施的流程和程序！以下是一些可能的例子：
- en: Procedures that detail how an application upgrade should be performed and a
    list of pre-release checks.
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 详细说明应用程序升级应如何执行以及预发布检查清单。
- en: Procedures that manage and control access to your customers’ private data or
    IPs.
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理和控制对客户私有数据或IP访问的流程。
- en: Restrictions on which members of staff have access to production databases.
    Note that, ideally, no one should!
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对哪些员工有权访问生产数据库的限制。请注意，理想情况下，没有人应该有权限！
- en: Isolation of assets and resources
  id: totrans-272
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 资产和资源的隔离
- en: As much as is practically possible, resources should be isolated from each other.
    Obviously, the app layer will need some access to the database; otherwise, how
    will it access data? However, it is good practice to run the database and the
    application on different servers or VMs. Note that isolation can bring in performance
    issues if not done correctly – this is a delicate balance!
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际可能的情况下，资源应该相互隔离。显然，应用层需要访问数据库；否则，它如何访问数据？然而，将数据库和应用运行在不同的服务器或虚拟机上是一种良好的实践。请注意，如果做得不正确，隔离可能会带来性能问题——这是一个微妙的平衡！
- en: With multi-tenant applications, individual users’ and tenants’ data should also
    be isolated as much as possible from other users and tenants. Ideally, all user
    data should be encrypted such that only the owner of the data can make sense of
    it. In this way, even if a data leak does occur, it’s not possible to infer anything
    of value from the data leak.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 对于多租户应用程序，应尽可能将单个用户和租户的数据与其他用户和租户隔离。理想情况下，所有用户数据都应该加密，以便只有数据所有者才能理解其含义。这样，即使发生数据泄露，也无法从数据泄露中推断出有价值的信息。
- en: Auditing
  id: totrans-275
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 审计
- en: This is good practice for all applications, not just SaaS/multi-tenant. Independent
    third parties should be consulted to audit the security and compliance of all
    IT systems and also your tenants’ data.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 这是对所有应用程序的良好实践，而不仅仅是SaaS/多租户。应咨询独立第三方对所有IT系统和租户数据进行安全性和合规性审计。
- en: As well as checking that data is physically secure, auditors should also confirm
    that industry standards are being followed and that any regulatory frameworks
    are adhered to.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 除了检查数据是否物理安全外，审计员还应确认是否遵循行业标准，以及是否遵守任何监管框架。
- en: Using Data Loss Prevention (DLP) software
  id: totrans-278
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用数据泄露防护（DLP）软件
- en: There are many commercial DLP solutions available. It is worth considering delegating
    this complex and extremely important to a specialist provider.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 现在有许多商业数据泄露防护（DLP）解决方案可供选择。值得考虑将这个复杂且极其重要的任务委托给专业提供商。
- en: Managing access carefully
  id: totrans-280
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 仔细管理访问权限
- en: A SaaS/multi-tenant application is particularly susceptible to security issues
    arising from improperly allocated access to a resource. This is true from a company
    point of view – developers should not have access to production databases. This
    is also true from a user point of view.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: SaaS/多租户应用程序特别容易受到由于资源分配不当而引发的安全问题的影响。从公司角度来看，这是正确的——开发者不应有权访问生产数据库。从用户的角度来看，这也是正确的。
- en: User access should be managed based on identities (who are the individual users?)
    and also through roles (what types of user classes do the individuals fall into?).
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 应根据身份（谁是个人用户？）和角色（个人属于哪些用户类别？）来管理用户访问权限。
- en: Being very careful with collaborative tools
  id: totrans-283
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对协作工具非常小心
- en: Often, a SaaS application will allow users to choose to share certain resources
    with other selected users within the same tenant, and less commonly with users
    in a different tenant. This can be an incredibly effective addition to a SaaS
    app and is indeed a massive advantage to using a multi-tenant solution. However,
    this introduces a security risk whereby the application itself can programmatically
    leak data. Significant additional care should be taken when building collaborative
    elements in a SaaS app, as these will be the first place a bad actor will look
    to exploit access to another user’s data.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，SaaS应用程序会允许用户选择与同一租户内的其他选定用户共享某些资源，而较少与不同租户的用户共享。这可以是一个极其有效的SaaS应用程序的补充，并且确实使用多租户解决方案的一个巨大优势。然而，这也引入了一个安全风险，即应用程序本身可能会以编程方式泄露数据。在构建SaaS应用程序中的协作元素时，应该采取重大的额外谨慎，因为这些将是恶意行为者首先试图利用以访问其他用户数据的地方。
- en: Good security is hard in any application, and doubly so when dealing with multi-tenant
    applications. As ever, it is much easier to start a project with good practices
    in place than it is to add them later!
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何应用程序中，良好的安全性都是困难的，尤其是在处理多租户应用程序时。一如既往，在项目开始时就实施良好的实践要比后来添加它们容易得多！
- en: Summary
  id: totrans-286
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: As we can see, multi-tenancy is a large and complex topic but one that is absolutely
    core to understanding when building a SaaS application.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，多租户是一个庞大且复杂的话题，但它是理解构建SaaS应用程序时绝对核心的。
- en: The decisions that are made on how a database is segregated will have the largest
    impact on the rest of an application, but it is very important to consider how
    the presence of multiple tenants will affect the API and the user interface layers
    as well.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 关于如何隔离数据库所做的决策将对应用程序的其余部分产生最大的影响，但考虑多个租户的存在如何影响API和用户界面层也非常重要。
- en: Multi-tenancy introduces considerable additional security considerations. These
    should be thought of upfront and kept in mind throughout the development process.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 多租户引入了相当多的额外安全考虑。这些应该在开发过程一开始就考虑，并始终牢记在心。
- en: Having said this, the additional challenges of implementing a multi-tenant solution
    provide *massive* potential upsides! The reach of an application can be truly
    global, and the scalability is unmatched by any other paradigm. Consider the biggest
    tech companies in the world – Google, Meta, Netflix, and so on. Every one of these
    companies has embraced the idea of SaaS and multi-tenancy, and they have done
    so for a good reason!
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 说到这里，实施多租户解决方案的额外挑战提供了**巨大**的潜在优势！应用程序的覆盖范围可以真正实现全球化，其可扩展性是任何其他范式都无法比拟的。考虑一下世界上最大的科技公司——谷歌、Meta、Netflix等等。这些公司中的每一个都接受了SaaS和多租户的概念，而且他们这么做是有充分理由的！
- en: In the next chapter, we will build on what we have learned about multi-tenancy
    and learn about how to build databases and plan for data-rich applications.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将基于我们对多租户的了解，学习如何构建数据库并为数据丰富的应用程序进行规划。
- en: Further reading
  id: totrans-292
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Single Tenant vs Multi Tenant: SaaS Architecture:[https://www.clickittech.com/aws/single-tenant-multi-tenant/](https://www.clickittech.com/aws/single-tenant-multi-tenant/)'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单租户与多租户：SaaS 架构：[https://www.clickittech.com/aws/single-tenant-multi-tenant/](https://www.clickittech.com/aws/single-tenant-multi-tenant/)
- en: 'Multi-tenancy strategies: [https://www.linkedin.com/pulse/effective-multi-tenancy-strategies-saas-applications-kulkarni/](https://www.linkedin.com/pulse/effective-multi-tenancy-strategies-saas-applications-kulkarni/)'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多租户策略：[https://www.linkedin.com/pulse/effective-multi-tenancy-strategies-saas-applications-kulkarni/](https://www.linkedin.com/pulse/effective-multi-tenancy-strategies-saas-applications-kulkarni/)
- en: 'Strategies to build a scalable multi-tenant SaaS solution: [https://aws.amazon.com/blogs/apn/in-depth-strategies-for-building-a-scalable-multi-tenant-saas-solution-with-amazon-redshift/](https://aws.amazon.com/blogs/apn/in-depth-strategies-for-building-a-scalable-multi-tenant-saas-solution-with-amazon-redshift/)'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建可扩展的多租户 SaaS 解决方案的战略：[https://aws.amazon.com/blogs/apn/in-depth-strategies-for-building-a-scalable-multi-tenant-saas-solution-with-amazon-redshift/](https://aws.amazon.com/blogs/apn/in-depth-strategies-for-building-a-scalable-multi-tenant-saas-solution-with-amazon-redshift/)
- en: 'Implementing multi-tenancy SaaS apps: [https://developers.redhat.com/articles/2022/05/09/approaches-implementing-multi-tenancy-saas-applications](https://developers.redhat.com/articles/2022/05/09/approaches-implementing-multi-tenancy-saas-applications)'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现多租户 SaaS 应用：[https://developers.redhat.com/articles/2022/05/09/approaches-implementing-multi-tenancy-saas-applications](https://developers.redhat.com/articles/2022/05/09/approaches-implementing-multi-tenancy-saas-applications)
- en: 'A definition of multi-tenancy: [https://www.techtarget.com/whatis/definition/multi-tenancy](https://www.techtarget.com/whatis/definition/multi-tenancy)'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多租户的定义：[https://www.techtarget.com/whatis/definition/multi-tenancy](https://www.techtarget.com/whatis/definition/multi-tenancy)
- en: 'How multi-tenancy affects embedded analysis: [https://yurbi.com/blog/what-is-multi-tenancy-security-and-how-does-it-impact-embedded-analytics/](https://yurbi.com/blog/what-is-multi-tenancy-security-and-how-does-it-impact-embedded-analytics/)'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多租户如何影响嵌入式分析：[https://yurbi.com/blog/what-is-multi-tenancy-security-and-how-does-it-impact-embedded-analytics/](https://yurbi.com/blog/what-is-multi-tenancy-security-and-how-does-it-impact-embedded-analytics/)
- en: 'DLP definition: [https://digitalguardian.com/blog/what-data-loss-prevention-dlp-definition-data-loss-prevention](https://digitalguardian.com/blog/what-data-loss-prevention-dlp-definition-data-loss-prevention)'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DLP 定义：[https://digitalguardian.com/blog/what-data-loss-prevention-dlp-definition-data-loss-prevention](https://digitalguardian.com/blog/what-data-loss-prevention-dlp-definition-data-loss-prevention)
