- en: Functional Programming
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数式编程
- en: 'In this chapter, we will be looking at these recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下菜谱：
- en: Creating a .NET Standard 2.0 library
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 .NET Standard 2.0 库
- en: Creating a .NET Core console application to use the library
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个用于库的 .NET Core console 应用程序
- en: Creating a .NET Standard 2.0 library that uses tuples
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个使用元组的 .NET Standard 2.0 库
- en: Creating a Razor Pages web application to use the library
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个用于库的 Razor Pages 网络应用程序
- en: Creating a .NET Standard 2.0 library that uses delegates and lambda expressions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个使用代理和 lambda 表达式的 .NET Standard 2.0 库
- en: Creating a .NET console application to use the library
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个用于库的 .NET console 应用程序
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Readers should have a basic knowledge of C#. They should also have a basic knowledge
    of using Visual Studio, installing packages using NuGet, and referencing libraries
    within projects from other projects.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 读者应具备 C# 的基本知识。他们还应具备使用 Visual Studio、使用 NuGet 安装包以及在其他项目中引用库的基本知识。
- en: 'The code files for this chapter can be found on GitHub:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在 GitHub 上找到：
- en: '[https://github.com/PacktPublishing/DotNET-Standard-2-Cookbook/tree/master/Chapter04](https://github.com/PacktPublishing/DotNET-Standard-2-Cookbook/tree/master/Chapter04)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/DotNET-Standard-2-Cookbook/tree/master/Chapter04](https://github.com/PacktPublishing/DotNET-Standard-2-Cookbook/tree/master/Chapter04)'
- en: 'Check out the following video to see the code in action:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频，以查看代码的实际运行情况：
- en: '[https://goo.gl/yeUdkd](https://goo.gl/yeUdkd)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://goo.gl/yeUdkd](https://goo.gl/yeUdkd)'
- en: Introduction
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: 'This chapter talks about the functional programming capabilities of C# and
    how to use them for a .NET Standard 2.0 library. Let''s look at a definition of
    functional programming:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论了 C# 的函数式编程功能以及如何为 .NET Standard 2.0 库使用它们。让我们看看函数式编程的定义：
- en: <q>"Functional programming is a style that treats computation as the evaluation
    of mathematical functions and avoids changing state and mutable data."</q>
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: <q>"函数式编程是一种将计算视为数学函数的评估，并避免改变状态和可变数据的风格。"</q>
- en: 'Simply put, it means you will be able to use functions as inputs and outputs
    for other functions. You can also assign them to variables and store them in collections.
    Have a look at the following code, which explains what we just talked about:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，这意味着你将能够将函数用作其他函数的输入和输出。你还可以将它们分配给变量并将它们存储在集合中。看看以下代码，它解释了我们刚才讨论的内容：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Again, when we follow the functional paradigm, we must avoid state mutation.
    This means that when an object is created, it never changes; variables should
    never be reassigned. Functional programming has been around for quite a while
    and C# supports it very well. Although, if you are looking at functional programming,
    F# is also a good choice.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，当我们遵循函数范式时，我们必须避免状态突变。这意味着当一个对象被创建时，它永远不会改变；变量不应被重新分配。函数式编程已经存在了一段时间，C# 对其支持得很好。尽管如此，如果你正在考虑函数式编程，F#
    也是一个不错的选择。
- en: Creating a .NET Standard 2.0 library
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 .NET Standard 2.0 库
- en: In this recipe, we will be looking at the basics of functional programming using
    C# inside a .NET Standard 2.0 library.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将探讨在 .NET Standard 2.0 库中使用 C# 进行函数式编程的基础。
- en: Getting ready
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Let's get ready and open Visual Studio 2017\. You should also check to see whether
    it's updated to the latest version.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们做好准备并打开 Visual Studio 2017。你还应该检查它是否已更新到最新版本。
- en: How to do it...
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做这件事...
- en: Open Visual Studio 2017.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio 2017。
- en: Click File | New | Project to create a project.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“文件”|“新建”|“项目”来创建一个项目。
- en: In the New Project dialog box, expand the Other Project Types node in the left-hand
    pane and select Visual Studio Solutions. In the right-hand pane, select Blank
    Solution**.**
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“新建项目”对话框中，在左侧窗格中展开“其他项目类型”节点并选择“Visual Studio 解决方案”。在右侧窗格中，选择“空白解决方案**”。**
- en: 'In the Name: textbox, type `Chapter4.Functions` and, in the Location: textbox,
    select a path from the drop-down box or click on the Browse... button to locate
    a path:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“名称：”文本框中，键入 `Chapter4.Functions`，并在“位置：”文本框中，从下拉框中选择一个路径或点击“浏览...”按钮来定位路径：
- en: '![](img/df12a8b7-e54b-47d9-b334-ec3f7871e555.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/df12a8b7-e54b-47d9-b334-ec3f7871e555.png)'
- en: Click OK.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“确定”。
- en: 'Now, your Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你的解决方案资源管理器 (*Ctrl* + *Alt* + *L*) 应该看起来像这样：
- en: '![](img/4b394f95-c5b0-419e-a5dd-0206b9f30d2f.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4b394f95-c5b0-419e-a5dd-0206b9f30d2f.png)'
- en: Now, right-click on the `Chapter4.Functions` label in the Solution Explorer
    and select Add  | New Project**.**
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在解决方案资源管理器中的 `Chapter4.Functions` 标签上右键单击，然后选择“添加”|“新建项目**”。**
- en: In the New Project dialog box, expand the Visual C# node.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“新建项目”对话框中，展开“Visual C#”节点。
- en: 'Select .NET Standard in the left-hand pane and Class Library (.NET Standard)
    in the right-hand pane:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧窗格中选择.NET Standard，在右侧窗格中选择类库 (.NET Standard)：
- en: '![](img/3cc92569-210f-4dc1-b96c-d4c3efc24a03.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3cc92569-210f-4dc1-b96c-d4c3efc24a03.png)'
- en: 'Now, in the Name: textbox, type `Chapter4.Functions.FuncLib`. Leave the other
    defaults as they are and click OK:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在名称：文本框中，输入`Chapter4.Functions.FuncLib`。保留其他默认设置，然后点击确定：
- en: '![](img/650f77a2-9643-42e1-8953-2f35241d01ea.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/650f77a2-9643-42e1-8953-2f35241d01ea.png)'
- en: 'Now, the Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，解决方案资源管理器（*Ctrl* + *Alt* + *L*）应该看起来像这样：
- en: '![](img/b9dd5e0e-7d25-42c5-bfd4-d696a32b1e94.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b9dd5e0e-7d25-42c5-bfd4-d696a32b1e94.png)'
- en: Now, select `Class1.cs` in the Solution Explorer and press *F2* to rename the
    file `Helper.cs`.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在解决方案资源管理器中选择`Class1.cs`，然后按*F2*重命名文件为`Helper.cs`。
- en: Answer Yes in the confirmation dialog box that asks to rename the class name
    as well.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在询问是否重命名类名的确认对话框中回答“是”。
- en: Now, double-click on the `Helper.cs` label in the Solution Explorer.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在解决方案资源管理器中双击`Helper.cs`标签。
- en: 'In the code window for `Helper.cs`, type the following code in between the
    curly brackets of the class:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Helper.cs`的代码窗口中，在类的花括号内输入以下代码：
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Let's press *Ctrl* + *Shift* + *B* for a quick build to check that all the syntax
    is correct.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们按*Ctrl* + *Shift* + *B*进行快速构建，以检查语法是否正确。
- en: How it works...
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In steps 1 to 5, we added a blank solution. This is the base of the coding we
    are adding in this recipe and the next. After that, we added a .NET Standard 2.0
    library in steps 7 to 11\. In steps 12 and 13, we renamed the default class generated
    by the template. You can always delete this default class template and add a new
    class to the project with the new name.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤1到5中，我们添加了一个空白解决方案。这是我们在本菜谱和下一个菜谱中添加编码的基础。之后，我们在步骤7到11中添加了一个.NET Standard
    2.0库。在步骤12和13中，我们将模板生成的默认类重命名了。你总是可以删除这个默认类模板，并使用新名称向项目中添加一个新类。
- en: 'In step 15, we added code to the `Helper` class. In the first line, we created
    a function that takes a number as an integer and returns an integer as the output.
    Before the output, we added 1 to the input. `Func<>`  is used to create the function.
    The first `int` is taken as the input and the last one as the output. You can
    add many parameters to this, but the last one is always taken as the output type.
    For example:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在第15步中，我们向`Helper`类中添加了代码。在第一行，我们创建了一个函数，该函数接受一个整数作为输入并返回一个整数作为输出。在输出之前，我们给输入加上了1。使用`Func<>`来创建函数。第一个`int`被视为输入，最后一个被视为输出。你可以添加很多参数，但最后一个总是被视为输出类型。例如：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The preceding function takes two `string` inputs and returns an `int` as the
    output. And in the step 15, the second line of code checks whether the input number
    is zero and returns a Boolean value as the output. If the number is zero, it always
    returns `true`, or else it returns `false`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的函数接受两个`string`输入并返回一个`int`作为输出。在第15步中，代码的第二行检查输入数字是否为零，并返回一个布尔值作为输出。如果数字为零，它总是返回`true`，否则返回`false`。
- en: Creating a .NET Core console application to use the library
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个.NET Core控制台应用程序以使用库
- en: In this recipe, we will be creating a .NET Core 2.0 console application to use
    the library we built in the previous recipe.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将创建一个.NET Core 2.0控制台应用程序来使用我们在上一个菜谱中构建的库。
- en: Getting ready
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure you have completed the previous recipe that built the .NET Standard
    2.0 library. If you have completed it, locate it, and open it using Visual Studio
    2017\. Perform a quick build to check for the syntax using *Ctrl* + *Shift* +
    *B*.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经完成了上一个菜谱中构建的.NET Standard 2.0库。如果你已经完成了，找到它，并使用Visual Studio 2017打开它。使用*Ctrl*
    + *Shift* + *B*进行快速构建以检查语法。
- en: How to do it...
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open Visual Studio 2017.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio 2017。
- en: Now open the solution that we built from the previous recipe.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开我们之前构建的解决方案。
- en: 'The Solution Explorer should look like this:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解决方案资源管理器应该看起来像这样：
- en: '![](img/761cb57a-41cb-429f-a655-cf3c1b0080e1.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/761cb57a-41cb-429f-a655-cf3c1b0080e1.png)'
- en: Press *Ctrl* + *Shift* + *B* for a quick build to check the syntax.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Ctrl* + *Shift* + *B*进行快速构建以检查语法。
- en: Now, let's select the solution name and right-click.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们选择解决方案名称并右键单击。
- en: From the menu, select Add | New Project.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从菜单中选择添加 | 新项目。
- en: In the New Project dialog box, expand the Visual C# node and select .NET Core
    in the left-hand pane.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新建项目对话框中，展开Visual C#节点，并在左侧窗格中选择.NET Core。
- en: 'In the right-hand pane, select Console App (.NET Core):'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在右侧窗格中，选择控制台应用程序 (.NET Core):'
- en: '![](img/4a680020-6fa9-4d11-9f8f-ff9854711b8d.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4a680020-6fa9-4d11-9f8f-ff9854711b8d.png)'
- en: 'In the Name: textbox, type `Chapter4.Functions.CoreConsoleApp` and leave the
    defaults as they are:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在名称：文本框中，键入`Chapter4.Functions.CoreConsoleApp`并保留默认值：
- en: '![](img/f5fc2991-5dd5-45ef-902e-54a455812e45.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f5fc2991-5dd5-45ef-902e-54a455812e45.png)'
- en: 'Now, the Solution Explorer should look like this:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，解决方案资源管理器应该看起来像这样：
- en: '![](img/67176e37-d2f9-4d6b-aedd-1cc7cf960dda.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/67176e37-d2f9-4d6b-aedd-1cc7cf960dda.png)'
- en: Now, select the `Chapter4.Functions.CoreConsoleApp` label in the Solution Explorer.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在解决方案资源管理器中，选择`Chapter4.Functions.CoreConsoleApp`标签。
- en: Right-click on the Dependencies label and select Add Reference.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击依赖项标签并选择添加引用。
- en: In the Reference Manager dialog box, in the left-hand pane, select Projects.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在参考管理器对话框中，在左侧窗格中，选择项目。
- en: 'In the right-hand pane, check `Chapter4.Functions.Funclib` in the list:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右侧窗格中，检查列表中的`Chapter4.Functions.Funclib`：
- en: '![](img/3fd74c7b-ea5e-4805-a1f2-bb296a3f87fc.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3fd74c7b-ea5e-4805-a1f2-bb296a3f87fc.png)'
- en: Click OK.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击确定。
- en: Now, double-click on the `Program.cs` label to open the code window.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，双击`Program.cs`标签以打开代码窗口。
- en: In the code window, scroll up till you see the `using` directives.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码窗口中，向上滚动直到看到`using`指令。
- en: 'Add the following `using` directive at the end of all the `using` directives:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在所有`using`指令的末尾添加以下`using`指令：
- en: '[PRE3]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, scroll down to the main method and replace the default code that was generated
    from the template with the following:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，向下滚动到主方法，将模板生成的默认代码替换为以下内容：
- en: '[PRE4]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now, make sure the `Chapter4.Functions.CoreConsoleApp` project is set as the
    start up project and then press *F5* to execute.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，确保`Chapter4.Functions.CoreConsoleApp`项目设置为启动项目，然后按*F5*执行。
- en: 'You should see output like this:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到如下输出：
- en: '![](img/64568cb1-970c-44c9-bd2c-83fa9f2f64ef.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/64568cb1-970c-44c9-bd2c-83fa9f2f64ef.png)'
- en: How it works...
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In steps 1 to 5, we opened the previous solution from the recipe that built
    the .NET Standard 2.0 library. Then, we performed a quick build to check for syntax
    errors. This is very good practice; check for syntax on previously built code
    before we go further. Then, in steps 6 to 10, we added a .NET Core 2.0 console
    application to the project. In steps 12 to 14, we added the library we built as
    a dependency to the .NET Core 2.0 console application.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤1到5中，我们打开了之前构建.NET Standard 2.0库的食谱中的解决方案。然后，我们进行了快速构建以检查语法错误。这是一个非常好的实践；在我们进一步之前，检查之前构建的代码的语法。然后，在步骤6到10中，我们将.NET
    Core 2.0控制台应用程序添加到项目中。在步骤12到14中，我们将构建的库作为依赖项添加到.NET Core 2.0控制台应用程序中。
- en: You must add this reference to use the library's functionality in the console
    application. Then, we added two `using` statements in step 18\. The first one
    will allow you to use LINQ capabilities in the code and the second one will allow
    you to use the available methods from the library.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须添加此引用才能在控制台应用程序中使用库的功能。然后，我们在第18步中添加了两个`using`语句。第一个将允许你在代码中使用LINQ功能，第二个将允许你使用库中可用的方法。
- en: Then, in step 19, we added code to use the methods from the library. In the
    first line, we created an instance of the `Helper` class and stored it in a variable.
    Then, we used the `AddOne` function and wrote the output to the console. In the
    third line, we created an integer array and stored a few numbers. Finally, we
    used the count function available in LINQ to use the function we created. The
    count function will go through each number in the array, pass it to our `IsZero`
    function, and return the output.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在第19步中，我们添加了使用库中方法的代码。在第一行，我们创建了一个`Helper`类的实例并将其存储在一个变量中。然后，我们使用了`AddOne`函数并将输出写入控制台。在第三行，我们创建了一个整数数组并存储了一些数字。最后，我们使用了LINQ中可用的count函数来使用我们创建的函数。count函数将遍历数组中的每个数字，将其传递给我们的`IsZero`函数，并返回输出。
- en: At the end, in step 21, we executed the application to see the output.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在第21步中，我们执行了应用程序以查看输出。
- en: Creating a .NET Standard 2.0 library that uses tuples
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个使用元组的.NET Standard 2.0库
- en: 'In this recipe, we will be using C# tuples with our library. Tuples allow you
    to combine the assignment of multiple variables of varying types in a single statement.
    For example, you can do this in a single line of code:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将使用C#元组与我们的库。元组允许你在单个语句中将多个不同类型的变量赋值组合在一起。例如，你可以在一行代码中这样做：
- en: '[PRE5]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Let's have a look at using tuples in a .NET Standard 2.0 library.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何在.NET Standard 2.0库中使用元组。
- en: Getting ready
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Let's launch Visual Studio 2017 and make sure it's updated to the latest version.
    We will require C# 7.0 to complete this recipe.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们启动 Visual Studio 2017 并确保它已更新到最新版本。我们完成此食谱需要 C# 7.0。
- en: How to do it...
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open Visual Studio 2017.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio 2017。
- en: Click File | New | Projectto create a project.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击文件 | 新 | 项目以创建一个项目。
- en: In the New Project dialog box, expand the Other Project Types node in the left-hand
    pane and select Visual Studio Solutions. In the right-hand pane, select Blank
    Solution**.**
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新项目对话框中，展开左侧窗格中的其他项目类型节点，并选择 Visual Studio 解决方案。在右侧窗格中，选择空白解决方案****。
- en: 'In the Name: textbox, type `Chapter4.Tuples` and, in the Location: textbox,
    select a path from the drop-down box or click on the Browse... button to locate
    a path:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在名称：文本框中，键入 `Chapter4.Tuples`，并在位置：文本框中，从下拉框中选择路径或点击浏览...按钮定位路径：
- en: '![](img/b3f541e2-3dad-4fa8-8bc3-2655eb663fe3.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b3f541e2-3dad-4fa8-8bc3-2655eb663fe3.png)'
- en: Click OK.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击确定。
- en: 'Now, your Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您的解决方案资源管理器 (*Ctrl* + *Alt* + *L*) 应该看起来像这样：
- en: '![](img/a0b6f493-e522-49cc-ab25-9f4ed0466b0f.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a0b6f493-e522-49cc-ab25-9f4ed0466b0f.png)'
- en: Now, right-click on the `Chapter4.Tuples` label in the Solution Explorer and
    select Add | New Project**.**
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在解决方案资源管理器中右键单击 `Chapter4.Tuples` 标签，并选择添加 | 新项目****。
- en: In the New Project dialog box, expand the Visual C# node.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新项目对话框中，展开左侧窗格中的 Visual C# 节点。
- en: 'Select .NET Standard in the left-hand pane and Class Library (.NET Standard)
    in the right-hand pane:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧窗格中选择 .NET Standard，在右侧窗格中选择类库 (.NET Standard)：
- en: '![](img/4199963e-871c-4e27-9ecb-2c051bc3afe5.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4199963e-871c-4e27-9ecb-2c051bc3afe5.png)'
- en: 'Now, in the Name: textbox, type `Chapter4.Tuples.TupleLib`, leave the other
    defaults as they are, and click OK:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在名称：文本框中，键入 `Chapter4.Tuples.TupleLib`，保留其他默认设置，然后点击确定：
- en: '![](img/713fc22a-2a69-4810-8385-71c507b1579e.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/713fc22a-2a69-4810-8385-71c507b1579e.png)'
- en: 'Now, the Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，解决方案资源管理器 (*Ctrl* + *Alt* + *L*) 应该看起来像这样：
- en: '![](img/9024199f-b49e-48c8-933a-9d4f7cf03449.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9024199f-b49e-48c8-933a-9d4f7cf03449.png)'
- en: Now, select `Class1.cs` in the Solution Explorer and press *F2* to rename the
    file `Employee.cs`.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在解决方案资源管理器中选择 `Class1.cs` 并按 *F2* 重命名文件为 `Employee.cs`。
- en: Answer Yes in the confirmation dialog box that asks to rename the class name
    as well.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在询问是否重命名类名的确认对话框中回答是。
- en: Now, double-click on the `Employee.cs` label in the Solution Explorer.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在解决方案资源管理器中双击 `Employee.cs` 标签。
- en: 'In the code window, add the following code in between the curly brackets of
    the `Employee` class:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码窗口中，在 `Employee` 类的大括号内添加以下代码：
- en: '[PRE6]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Press *Ctrl* + *Shift* + *B* for a quick build to check syntax.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Ctrl* + *Shift* + *B* 进行快速构建以检查语法。
- en: How it works...
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: We have created a blank solution in steps 1 to 5 and assigned it a proper name.
    In steps 6 to 10, we added a new project to the solution. We selected a .NET Standard
    2.0 library template as the starting point of the project and then we gave it
    a proper name. In steps 11 and 12, we renamed the default `Class1.cs` to something
    more meaningful. This class was generated from the template itself. You can rename
    it or you can delete that file and add a new one.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在步骤 1 到 5 中创建了一个空白解决方案，并为其指定了合适的名称。在步骤 6 到 10 中，我们将一个新项目添加到解决方案中。我们选择 .NET
    Standard 2.0 库模板作为项目的起点，并给它指定了合适的名称。在步骤 11 和 12 中，我们将默认的 `Class1.cs` 重命名为更有意义的东西。这个类是由模板本身生成的。您可以重命名它，或者您可以删除该文件并添加一个新的文件。
- en: In step 15, we created a method that returns two string types and an integer
    type. This was possible because of tuples. In that method, we assigned the variables
    and returned them in a sequence to match the return type of the method. Finally,
    we performed a quick build to confirm the syntax was correct.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤 15 中，我们创建了一个返回两种字符串类型和一个整型类型的方法。这是由于元组的存在才成为可能。在那个方法中，我们分配了变量，并按顺序返回它们以匹配方法的返回类型。最后，我们进行了快速构建以确认语法正确。
- en: Creating a Razor Pages web application to use the library
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个用于使用库的 Razor Pages 网络应用程序
- en: In this recipe, we will be building a Razor Pages web application to use the
    .NET Standard 2.0 library created in the previous recipe. A Razor Pages web application
    is a slimmer version of the MVC framework. You can tell it's the successor to
    good old `.aspx` web form pages. This was an addition after .NET Core 2.0.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将构建一个 Razor Pages 网络应用程序来使用上一食谱中创建的 .NET Standard 2.0 库。Razor Pages
    网络应用程序是 MVC 框架的一个更精简版本。您可以知道它是老式 `.aspx` 网络表单页面的继任者。这是在 .NET Core 2.0 之后的一个补充。
- en: Getting ready
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure you have the latest version of Visual Studio 2017 and .NET Core 2.0
    installed, and that you have access to the solution we built in the previous recipe.
    Do a quick *Ctrl* + *Shift* + *B* to check that everything is intact and working.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您已安装最新版本的Visual Studio 2017和.NET Core 2.0，并且您有权访问我们之前菜谱中构建的解决方案。进行快速*Ctrl*
    + *Shift* + *B*以检查一切是否完好无损且正常工作。
- en: How to do it...
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open Visual Studio 2017.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio 2017。
- en: Now open the solution that we built from the previous recipe.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开我们之前菜谱中构建的解决方案。
- en: 'The Solution Explorer should look like this:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解决方案资源管理器应如下所示：
- en: '![](img/f677fce4-2d25-4260-ba5a-e2a40a112821.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f677fce4-2d25-4260-ba5a-e2a40a112821.png)'
- en: Press *Ctrl* + *Shift* + *B* for a quick build to check the syntax.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Ctrl* + *Shift* + *B*进行快速构建以检查语法。
- en: Now, let's select the solution name and right-click.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们选择解决方案名称并右键单击。
- en: From the menu, select Add | New Project.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从菜单中选择“添加 | 新建项目”。
- en: In the New Project dialog box, expand the Visual C# node and select .NET Core
    in the left-hand pane.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“新建项目”对话框中，展开Visual C#节点，并在左侧窗格中选择.NET Core。
- en: 'In the right-hand pane, select ASP.NET Core Web Application:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右侧窗格中，选择ASP.NET Core Web应用程序：
- en: '![](img/940630cc-e081-43c9-94c6-7084983d27b4.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/940630cc-e081-43c9-94c6-7084983d27b4.png)'
- en: 'In the Name: textbox, type `Chapter4.Tuples.CoreRazorWebApp` and leave the
    defaults as they are:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“名称：”文本框中键入`Chapter4.Tuples.CoreRazorWebApp`并保持默认设置：
- en: '![](img/791921f9-dd98-4170-8a0a-3c7e07320a1a.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/791921f9-dd98-4170-8a0a-3c7e07320a1a.png)'
- en: Click OK.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“确定”。
- en: 'Now, in the New ASP.NET Core Web Application dialog box, select Web Application
    in the templates list (make sure you have selected .NET Core and ASP.NET Core
    2.0 from the drop-down lists):'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在“新建ASP.NET Core Web应用程序”对话框中，从模板列表中选择Web应用程序（确保您已从下拉列表中选择.NET Core和ASP.NET
    Core 2.0）：
- en: '![](img/eb316942-5828-433f-aa7e-03f81bc732e7.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/eb316942-5828-433f-aa7e-03f81bc732e7.png)'
- en: Leave the defaults as they are and click OK.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持默认设置并点击“确定”。
- en: 'Now, the Solution Explorer should look like this:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，解决方案资源管理器应如下所示：
- en: '![](img/33848027-4921-43ca-8d71-f61081f360ff.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/33848027-4921-43ca-8d71-f61081f360ff.png)'
- en: Now, select the `Chapter4.Tuples.CoreRazorWebApp` label in the Solution Explorer.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在解决方案资源管理器中选择`Chapter4.Tuples.CoreRazorWebApp`标签。
- en: Right-click on the Dependencies label and select Add Reference.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击“依赖项”标签并选择“添加引用”。
- en: In the Reference Manager dialog box, in the left-hand pane, select Projects.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“引用管理器”对话框的左侧窗格中，选择“项目”。
- en: 'In the right-hand pane, check `Chapter4.Tuples.TupleLib` in the list:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右侧窗格中，在列表中检查`Chapter4.Tuples.TupleLib`：
- en: '![](img/8c62794d-fde2-4e3a-8ef8-5c026df1824b.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8c62794d-fde2-4e3a-8ef8-5c026df1824b.png)'
- en: Click OK.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“确定”。
- en: Now expand the Pages node.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，展开“页面”节点。
- en: Right-click on the Pages label and select Add | Razor Page.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击“页面”标签，然后选择“添加 | Razor页面”。
- en: 'In the Add Scaffold dialog box, select Razor Page from the template list:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“添加模板”对话框中，从模板列表中选择Razor页面：
- en: '![](img/1435bdca-0a84-43b6-bf2d-206ee1831830.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1435bdca-0a84-43b6-bf2d-206ee1831830.png)'
- en: Click Add.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“添加”。
- en: 'In the Add Razor Page dialog box, type `Employee` in the Razor Page name: textbox:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“添加Razor页面”对话框中，在Razor页面名称：文本框中键入`Employee`：
- en: '![](img/ef52928d-995f-4e16-ace1-09270ddd2f0a.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ef52928d-995f-4e16-ace1-09270ddd2f0a.png)'
- en: Click Add.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“添加”。
- en: By default, Visual Studio will present you with the `Employee.chtml.cs` file.
    If not, you can always expand the node for the `Employee.chtml` file and double-click
    on the `Employee.chtml.cs` label.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，Visual Studio将向您展示`Employee.chtml.cs`文件。如果没有，您始终可以展开`Employee.chtml`文件的节点，然后双击`Employee.chtml.cs`标签。
- en: Now scroll up till you reach the `using` directives.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，向上滚动直到到达`using`指令。
- en: 'At the end of the `using` directive, add the reference to our library:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`using`指令的末尾，添加对我们库的引用：
- en: '[PRE7]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now scroll down till you reach the `OnGet()` method.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，向下滚动直到到达`OnGet()`方法。
- en: 'Add the following code in between the curly brackets of the `OnGet()` method:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`OnGet()`方法的括号内添加以下代码：
- en: '[PRE8]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now click on the `Employee.cshtml` tab to enter the Razor Page.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，单击`Employee.cshtml`选项卡以进入Razor页面。
- en: 'Add the following code at the end of the page:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在页面末尾添加以下代码：
- en: '[PRE9]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now save your work.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，保存您的作品。
- en: Press *F5* to execute the application.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*F5*执行应用程序。
- en: 'The browser will display the default index page as follows:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览器将显示默认的索引页面如下：
- en: '![](img/98dd83f3-b9a9-4229-b777-546628725f0a.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/98dd83f3-b9a9-4229-b777-546628725f0a.png)'
- en: 'Click on the address bar. At the end of the URL, type `Employee` and press
    *Enter*. (The entire URL should look like this: `localhost:<yourportnumber>/Employee`):'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击地址栏。在URL的末尾键入`Employee`并按*Enter*键。（整个URL应如下所示：`localhost:<yourportnumber>/Employee`）：
- en: '![](img/f46c6a0f-6d6f-4235-9da7-1a7b058df6cd.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f46c6a0f-6d6f-4235-9da7-1a7b058df6cd.png)'
- en: Now close the browser.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，关闭浏览器。
- en: How it works...
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In steps 1 to 5, we opened the solution from the previous recipe. We also performed
    a quick build to check for syntax. Then, in steps 6 to 13, we added an ASP.NET
    Core Web application to the solution. In steps 14 to 16, we added the reference
    to the library we built in the previous recipe. This will allow you to use the
    available functionality from the library in your ASP.NET Core Web application
    project.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤 1 到 5 中，我们打开了前一个菜谱中的解决方案。我们还执行了快速构建以检查语法。然后，在步骤 6 到 13 中，我们将 ASP.NET Core
    Web 应用程序添加到解决方案中。在步骤 14 到 16 中，我们将前一个菜谱中构建的库的引用添加到解决方案中。这将允许你在 ASP.NET Core Web
    应用程序项目中使用库中的可用功能。
- en: In steps 20 to 24, we added a new Razor Page to the project. A Razor Page contains
    two files. One is a `.chtml` file, which contains the look and feel, and the other
    file contains the code for that Razor file. This is similar to an `.aspx` page
    and the code behind the file in an ASP.NET Web Forms application.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤 20 到 24 中，我们向项目中添加了一个新的 Razor 页面。Razor 页面包含两个文件。一个是 `.chtml` 文件，它包含外观和感觉，另一个文件包含该
    Razor 文件的代码。这与 ASP.NET Web Forms 应用程序中的 `.aspx` 页面及其代码隐藏文件类似。
- en: In step 27, we added reference code to our library. Then, in step 29, we added
    code to use the functionality from the library. In the first line of code, we
    created an instance of the `Employee` class and stored it in a variable. Then,
    in the second line, we used the `GetBasicDetails()` method to access employee
    details using tuples. Finally, we stored those values in the `ViewData` helper
    class.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤 27 中，我们将引用代码添加到我们的库中。然后，在步骤 29 中，我们添加了使用库功能的代码。在代码的第一行中，我们创建了一个 `Employee`
    类的实例并将其存储在一个变量中。然后，在第二行中，我们使用 `GetBasicDetails()` 方法通过元组访问员工详细信息。最后，我们将这些值存储在
    `ViewData` 辅助类中。
- en: In step 31, we used the `ViewData` helper class to display the values to the
    user. In this step, we used HTML markup and Razor syntax to display the information.
    Finally, in steps 33 to 36, we executed the application and tested it in the default
    browser.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤 31 中，我们使用了 `ViewData` 辅助类来向用户显示值。在这个步骤中，我们使用了 HTML 标记和 Razor 语法来显示信息。最后，在步骤
    33 到 36 中，我们执行了应用程序并在默认浏览器中进行了测试。
- en: Creating a .NET Standard 2.0 library that uses delegates and lambda expressions
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个使用委托和 lambda 表达式的 .NET Standard 2.0 库
- en: 'In this recipe, we will be using another functionality available in C#. These
    are called delegates and lambda expressions. What is a delegate in C#? As per
    the Microsoft documentation, it says:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将使用 C# 中可用的另一个功能。这些被称为委托和 lambda 表达式。C# 中的委托是什么？根据微软文档，它说：
- en: <q>"A delegate is a type that represents references to methods with a particular
    parameter list and return type."</q>
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: <q>"委托是一种表示具有特定参数列表和返回类型的方法引用的类型。"</q>
- en: Simply put, delegates are used to pass methods as arguments to other methods,
    and a lambda expression is an anonymous function that you can use to create delegates
    or expression tree types.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，委托用于将方法作为参数传递给其他方法，而 lambda 表达式是一个匿名函数，你可以用它来创建委托或表达式树类型。
- en: Getting ready
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure Visual Studio 2017 is installed and updated to the latest version.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 确保已安装并更新到最新版本的 Visual Studio 2017。
- en: How to do it...
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open Visual Studio 2017.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio 2017。
- en: Click File | New | Projectto create a project.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击文件 | 新建 | 项目以创建一个项目。
- en: In the New Project dialog box, expand the Other Project Types node in the left-hand
    pane and select Visual Studio Solutions. In the right-hand pane, select Blank
    Solution**.**
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“新建项目”对话框中，展开左侧窗格中的“其他项目类型”节点，并选择 Visual Studio 解决方案。在右侧窗格中，选择空白解决方案**。**
- en: 'In the Name: textbox, type `Chapter4.Delegates` and, in the Location: textbox,
    select a path from the drop-down box or click on the Browse... button to locate
    a path:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“名称”文本框中，键入 `Chapter4.Delegates`，并在“位置”文本框中，从下拉框中选择一个路径或点击浏览...按钮定位路径：
- en: '![](img/8313c0ba-8270-4ed8-9d1f-3fdca77f9032.png)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8313c0ba-8270-4ed8-9d1f-3fdca77f9032.png)'
- en: Click OK.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击确定。
- en: 'Now, your Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你的解决方案资源管理器 (*Ctrl* + *Alt* + *L*) 应该看起来像这样：
- en: '![](img/1eb9e934-c032-4e77-8d90-877fc8e64800.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1eb9e934-c032-4e77-8d90-877fc8e64800.png)'
- en: Now, right-click on the `Chapter4.Delegates` label in the Solution Explorer
    and select Add | New Project**.**
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在解决方案资源管理器中的 `Chapter4.Delegates` 标签上右键单击，并选择添加 | 新项目**。**
- en: In the New Project dialog box, expand the Visual C# node.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“新建项目”对话框中，展开 Visual C# 节点。
- en: 'Select .NET Standard in the left-hand pane and Class Library (.NET Standard)
    in the right-hand pane:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧窗格中选择.NET Standard，在右侧窗格中选择类库 (.NET Standard)：
- en: '![](img/0cd7d6ae-bd4f-4923-a150-b2725bfc2577.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0cd7d6ae-bd4f-4923-a150-b2725bfc2577.png)'
- en: 'Now, in the Name: textbox, type `Chapter4.Delegates.DelegateLib`. Leave the
    other defaults as they are and click OK:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在“名称：”文本框中，键入`Chapter4.Delegates.DelegateLib`。保留其他默认设置，然后点击“确定”：
- en: '![](img/d14e3acc-9a71-44bf-b314-0770de567fd8.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d14e3acc-9a71-44bf-b314-0770de567fd8.png)'
- en: 'Now, the Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，解决方案资源管理器 (*Ctrl* + *Alt* + *L*) 应该看起来像这样：
- en: '![](img/cba687dc-513d-47fd-8a5f-ca424807dd5b.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/cba687dc-513d-47fd-8a5f-ca424807dd5b.png)'
- en: Now, select `Class1.cs` in the Solution Explorer and press *F2* to rename the
    file `Calculator.cs`.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在解决方案资源管理器中选择`Class1.cs`，并按*F2*重命名文件为`Calculator.cs`。
- en: Answer Yes in the confirmation dialog box that asks to rename the class name
    as well.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在询问是否重命名类名的确认对话框中回答“是”。
- en: Now, select the `Calculators.cs` label and double-click on it to open the code
    window.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，选择`Calculators.cs`标签，双击它以打开代码窗口。
- en: 'Add the following `using` directive to the top of the code:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下`using`指令添加到代码顶部：
- en: '[PRE10]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, scroll down in between the curly brackets of the `Calculator` class and
    add the following code:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`Calculator`类的花括号之间向下滚动，并添加以下代码：
- en: '[PRE11]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, next to the end curly bracket of the `AddTwoNumbers()` method, add the
    following code:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`AddTwoNumbers()`方法的末尾花括号旁边添加以下代码：
- en: '[PRE12]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Perform a quick build by pressing *Ctrl* + *Shift* + *B* and confirm that all
    the syntax is correct.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过按*Ctrl* + *Shift* + *B*进行快速构建，并确认所有语法都正确。
- en: How it works...
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We created a blank solution in steps 1 to 5\. In steps 7 to 10, we added a .NET
    Standard 2.0 Class Library project to the solution. We have given a meaningful
    name to the project in these steps. We renamed the default class name generated
    from the template in steps 12 and 13\. We added a `using` statement for LINQ in
    step 14\. This is necessary to explain the lambda expressions using LINQ.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在步骤1到5中创建了一个空白解决方案。在步骤7到10中，我们将.NET Standard 2.0类库项目添加到解决方案中。在这些步骤中，我们为项目赋予了有意义的名称。我们在步骤12和13中重命名了模板生成的默认类名。我们在步骤14中添加了LINQ的`using`语句。这是必要的，以便解释使用LINQ的lambda表达式。
- en: In step 16, we added code to create a delegate and a method to use that delegate
    as a parameter. The delegate `Message` takes a parameter as a `string` and returns
    the output as a `string`. Then, we added a method to add two numbers and return
    the answer as a string with a message. As you can see, there are three parameters
    for the `AddTwoNumbers()` method. The first two are integers and the last parameter
    is the delegate we created.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤16中，我们添加了代码来创建一个委托和一个方法，以便将委托作为参数使用。委托`Message`接受一个`string`类型的参数，并返回一个`string`类型的输出。然后，我们添加了一个方法来添加两个数字，并以消息的形式返回答案作为字符串。正如你所看到的，`AddTwoNumbers()`方法有三个参数。前两个是整数，最后一个参数是我们创建的委托。
- en: In step 17, we created another method to count the occurrences of numbers in
    an array of integers. In the first line of the `CountScoresMoreThan80()` method,
    we used the `Where()` method that comes with LINQ. Inside the `Where()` method,
    we used a lambda expression to check for numbers that are greater than `80`. We
    then used the `Count()` method to count the occurrences filtered with the `Where()`
    method and returned the answer as a `string`.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤17中，我们创建了一个新方法来计算整数数组中数字的出现次数。在`CountScoresMoreThan80()`方法的第1行，我们使用了LINQ提供的`Where()`方法。在`Where()`方法内部，我们使用lambda表达式检查大于`80`的数字。然后，我们使用`Count()`方法来计算通过`Where()`方法过滤后的出现次数，并将答案作为`string`返回。
- en: Finally, we performed a quick build to confirm the syntax is correct.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们执行了快速构建以确认语法正确。
- en: Creating a .NET console application to use the library
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个.NET控制台应用程序以使用库
- en: In this recipe, we will be building a .NET console-based application to test
    our library. We will be using the full .NET Framework, which is available for
    Windows only.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将构建一个基于.NET控制台的应用程序来测试我们的库。我们将使用完整的.NET Framework，它仅适用于Windows。
- en: Getting ready
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure you have located the solution built in the previous recipe and done
    a quick *Ctrl* + *Shift* + *B* to build the solution. We are all set to test the
    library, so let's get started.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经找到了之前菜谱中构建的解决方案，并且快速执行了*Ctrl* + *Shift* + *B*来构建解决方案。我们现在已经准备好测试库，让我们开始吧。
- en: How to do it...
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Open Visual Studio 2017.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio 2017。
- en: Now, open the solution that we built from the previous recipe.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开之前菜谱中构建的解决方案。
- en: 'The Solution Explorer should look like this:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解决方案资源管理器应该看起来像这样：
- en: '![](img/0b218e00-6639-45a5-b2ff-4fd982785b19.png)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0b218e00-6639-45a5-b2ff-4fd982785b19.png)'
- en: Press *Ctrl* + *Shift* + *B* for a quick build to check the syntax.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Ctrl* + *Shift* + *B* 快速构建以检查语法。
- en: Now, let's select the solution name and right-click.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们选择解决方案名称并右键单击。
- en: From the menu, select Add | New Project.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从菜单中选择“添加 | 新项目”。
- en: In the New Project dialog box, expand the Visual C# node and select Windows
    Classic Desktop in the left-hand pane.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“新建项目”对话框中，展开“Visual C#”节点，并在左侧窗格中选择“Windows Classic Desktop”。
- en: 'In the right-hand pane, select Console App (.NET Framework):'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右侧窗格中，选择“控制台应用程序 (.NET Framework)”。
- en: '![](img/743786fa-77b3-4bdd-85bd-97ee65353f39.png)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/743786fa-77b3-4bdd-85bd-97ee65353f39.png)'
- en: 'In the Name: textbox, type `Chapter4.Delegates.ConsoleApp` and leave the defaults
    as they are:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“名称：”文本框中，键入`Chapter4.Delegates.ConsoleApp`并保留默认设置：
- en: '![](img/ce9e1137-9891-4f69-96b3-4b61e53ade81.png)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ce9e1137-9891-4f69-96b3-4b61e53ade81.png)'
- en: 'Now, the Solution Explorer should look like this:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，解决方案资源管理器应该看起来像这样：
- en: '![](img/02bd0871-6722-47ce-97e7-19e2ad2ac6d7.png)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/02bd0871-6722-47ce-97e7-19e2ad2ac6d7.png)'
- en: Now, select the `Chapter4.Delegates.ConsoleApp` label in the Solution Explorer.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在“解决方案资源管理器”中，选择`Chapter4.Delegates.ConsoleApp`标签。
- en: Right-click on the References label and select Add Reference.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击“引用”标签并选择“添加引用”。
- en: In the Reference Manager dialog box, in the left-hand pane, select Projects.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“引用管理器”对话框中，在左侧窗格中，选择“项目”。
- en: 'In the right-hand pane, check `Chapter4.Delegates.DelegateLib` in the list:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右侧窗格中，检查列表中的`Chapter4.Delegates.DelegateLib`。
- en: '![](img/c94b548e-792e-44b6-9605-615a3a386bdb.png)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c94b548e-792e-44b6-9605-615a3a386bdb.png)'
- en: Click OK.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“确定”。
- en: Now double-click on the `Program.cs` label to open the code window.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，双击`Program.cs`标签以打开代码窗口。
- en: In the code window, scroll up till you see the `using` directives.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码窗口中，向上滚动直到看到`using`指令。
- en: 'Add the following `using` directive at the end of all the `using` directives:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在所有`using`指令的末尾添加以下`using`指令：
- en: '[PRE13]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, next to the end curly bracket of the `Main()` method, add the following
    code:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`Main()`方法的末尾花括号旁边，添加以下代码：
- en: '[PRE14]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, scroll down to the `Main()` method and add the following code in between
    the curly brackets of the `Main()` method:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，向下滚动到`Main()`方法，并在`Main()`方法的括号之间添加以下代码：
- en: '[PRE15]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Let's press *F5* to execute the program.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们按 *F5* 执行程序。
- en: 'You should see output similar to this:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到类似以下输出：
- en: '![](img/b1c6b6d1-9842-4c3e-8877-31bf3a43aa82.png)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b1c6b6d1-9842-4c3e-8877-31bf3a43aa82.png)'
- en: Press *Enter* to close the console window.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下 *Enter* 键关闭控制台窗口。
- en: How it works...
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In steps 1 to 5, we opened the solution from the previous recipe and perform
    a quick build. This will make sure the code syntax is correct. If the build fails,
    you might have to check for any typos and correct them. This is always a good
    practice to make sure your code builds successfully before you close a solution
    or send it to source control. In steps 6 to 10, we added a new project to the
    solution. We have selected a console application template, which supports the
    full .NET Framework under Windows.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤1到5中，我们从上一个菜谱中打开了解决方案并进行了快速构建。这将确保代码语法正确。如果构建失败，你可能需要检查任何拼写错误并更正它们。在关闭解决方案或将其发送到源代码控制之前确保代码成功构建总是一个好习惯。在步骤6到10中，我们在解决方案中添加了一个新项目。我们选择了控制台应用程序模板，该模板在Windows下支持完整的.NET
    Framework。
- en: Then, in steps 12 to 15, we added the reference to the .NET Standard 2.0 library
    from our console application. This will allow you to access all the available
    functionality in the library for the console application. In step 18, we added
    the reference to the library. We have used a `using` statement for it. Then, in
    step 19, we added a method to use with the delegate in the library.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在步骤12到15中，我们将.NET Standard 2.0库的引用添加到我们的控制台应用程序中。这将允许你访问库中所有可用的功能。在步骤18中，我们添加了对库的引用。我们使用了`using`语句。然后，在步骤19中，我们添加了一个用于库中委托的方法。
- en: In step 20, in the first line, we created an instance of the Calculator class
    and stored it in a variable, and then, in the second line, used the delegate inside
    the class and assigned it from the method created in step 19\. Then, we used the
    `AddTwoNumbers()` method with two integer values and the delegate variable as
    the parameters and printed the output to the console window. In the fourth line,
    we created an integer array, stored a few values, used the `CountScoresMoreThan80()`
    method, passed the integer array as the parameter, and printed the output to the
    console.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤20中，第一行我们创建了一个Calculator类的实例并将其存储在一个变量中，然后，在第二行中，我们在类内部使用了代理，并将其从步骤19中创建的方法中赋值。接着，我们使用`AddTwoNumbers()`方法，传入两个整数值和代理变量作为参数，并将输出打印到控制台窗口。在第四行，我们创建了一个整数数组，存储了一些值，使用`CountScoresMoreThan80()`方法，将整数数组作为参数传递，并将输出打印到控制台。
- en: Finally, in steps 21 and 22, we executed the code and checked the output.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在步骤21和22中，我们执行了代码并检查了输出结果。
