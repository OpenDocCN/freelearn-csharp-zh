- en: Chapter 10. ALM – Developers and QA
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。ALM – 开发者和QA
- en: 'This chapter provides an introduction to **Application Lifecycle Management**
    (**ALM**) and continuous integration methodologies on Xamarin cross-platform applications.
    As the part of the ALM process that is most relevant for developers, unit test
    strategies will be discussed and demonstrated, as well as automated UI testing.
    This chapter is divided into the following sections:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了在Xamarin跨平台应用程序中**应用生命周期管理（ALM**）和持续集成方法。作为ALM过程中对开发者最相关的部分，本章将讨论并演示单元测试策略，以及自动化的UI测试。本章分为以下几部分：
- en: Development pipeline
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发流程
- en: Troubleshooting
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 故障排除
- en: Unit testing
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试
- en: UI testing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UI测试
- en: Development pipeline
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发流程
- en: The development pipeline can be described as the virtual production line that
    steers a project from a mere bundle of business requirements to the consumers.
    Stakeholders that are part of this pipeline include, but are not limited to, business
    proxies, developers, the QA team, the release and configuration team, and finally
    the consumers themselves. Each stakeholder in this production line assumes different
    responsibilities, and they should all function in harmony. Hence, having an efficient,
    healthy, and preferably automated pipeline that is going to provide the communication
    and transfer of deliverables between units is vital for the success of a project.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 开发流程可以被描述为一条虚拟的生产线，它将一个项目从仅仅是一堆业务需求引导到消费者手中。这个流程中的利益相关者包括但不限于业务代理、开发者、质量保证团队、发布和配置团队，以及最终的用户。在这个生产线上，每个利益相关者都承担着不同的责任，并且他们应该协同工作。因此，拥有一个高效、健康且最好是自动化的流程，该流程能够提供单元之间的沟通和交付成果的传递，对于项目的成功至关重要。
- en: In the Agile project management framework, the development pipeline is cyclical
    rather than a linear delivery queue. In the application life cycle, requirements
    are inserted continuously into a backlog. The backlog leads to a planning and
    development phase, which is followed by testing and QA. Once the production-ready
    application is released, consumers can be made part of this cycle using live application
    telemetry instrumentation.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在敏捷项目管理框架中，开发流程是循环的，而不是线性的交付队列。在应用程序生命周期中，需求持续地插入到待办事项列表中。待办事项列表导致规划和开发阶段，随后是测试和质量保证。一旦生产就绪的应用程序发布，消费者可以通过实时应用程序遥测仪器成为这个周期的一部分。
- en: '![Development pipeline](img/B04693_10_01.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![开发流程](img/B04693_10_01.jpg)'
- en: 'Figure 1: Application life cycle management'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 图1：应用生命周期管理
- en: In Xamarin cross-platform application projects, development teams are blessed
    with various tools and frameworks that can ease the execution of ALM strategies.
    From sketching and mock-up tools available for early prototyping and design to
    source control and project management tools that make up the backbone of ALM,
    Xamarin projects can utilize various tools to automate and systematically analyze
    project timeline.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在Xamarin跨平台应用程序项目中，开发团队有幸拥有各种工具和框架，这些工具和框架可以简化ALM策略的执行。从可用于早期原型设计和设计的草图和模拟工具，到构成ALM骨干的源代码控制和项目管理工具，Xamarin项目可以利用各种工具来自动化和系统地分析项目时间线。
- en: The following sections of this chapter concentrate mainly on the lines of defense
    that protect the health and stability of a Xamarin cross-platform project in the
    timeline between the assignment of tasks to developers to the point at which the
    task or bug is completed/resolved and checked into a source control repository.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的以下部分主要集中讨论在将任务分配给开发者到任务或错误完成/解决并检查到源代码控制仓库之间的时间线上，保护Xamarin跨平台项目健康和稳定性的防御线。
- en: Troubleshooting and diagnostics
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 故障排除和诊断
- en: SDKs associated with Xamarin target platforms and development IDEs are equipped
    with comprehensive analytic tools. Utilizing these tools, developers can identify
    issues causing app freezes, crashes, slow response time, and other resource-related
    problems (for example, excessive battery usage).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 与Xamarin目标平台和开发IDE关联的SDK配备了全面的分析工具。利用这些工具，开发者可以识别导致应用冻结、崩溃、响应时间慢以及其他与资源相关的问题（例如，过度使用电池）的原因。
- en: Xamarin.iOS applications are analyzed using the XCode Instruments toolset. In
    this toolset, there are a number of profiling templates, each used to analyze
    a certain perspective of application execution (such as the allocations template
    that was used in [Chapter 2](ch02.html "Chapter 2. Memory Management"), *Memory
    Management*, for memory profiling). Instrument templates can be executed on an
    application running on the iOS simulator or on an actual device.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 XCode Instruments 工具集分析 Xamarin.iOS 应用程序。在此工具集中，有多个分析模板，每个模板用于分析应用程序执行的某个特定方面（例如，在[第
    2 章](ch02.html "第 2 章。内存管理")中使用的分配模板，用于内存分析）。可以在运行在 iOS 模拟器或实际设备上的应用程序上执行工具模板。
- en: '![Troubleshooting and diagnostics](img/B04693_10_02.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![故障排除和诊断](img/B04693_10_02.jpg)'
- en: 'Figure 2: XCode Instruments'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2：XCode Instruments
- en: Similarly, Android applications can be analyzed using the device monitor provided
    by the Android SDK. Using Android Monitor, memory profile, CPU/GPU utilization,
    and network usage can also be analyzed, and application-provided diagnostic information
    can be gathered. **Android Debug Bridge** (**ADB**) is a command-line tool that
    allows various manual or automated device-related operations.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，可以使用 Android SDK 提供的设备监控器分析 Android 应用程序。使用 Android Monitor，还可以分析内存配置文件、CPU/GPU
    利用率和网络使用情况，并收集应用程序提供的诊断信息。**Android 调试桥接器**（**ADB**）是一个命令行工具，允许执行各种手动或自动的设备相关操作。
- en: 'For Windows Phone applications, Visual Studio provides a number of analysis
    tools for profiling CPU usage, energy consumption, memory usage, and XAML UI responsiveness.
    XAML diagnostic sessions in particular can provide valuable information on problematic
    sections of view implementation and pinpoint possible visual and performance issues:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Windows Phone 应用程序，Visual Studio 提供了多种分析工具，用于分析 CPU 使用率、能耗、内存使用率和 XAML UI
    响应性。特别是 XAML 诊断会话可以提供有关视图实现中问题部分的宝贵信息，并确定可能的视觉和性能问题：
- en: '![Troubleshooting and diagnostics](img/B04693_10_03.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![故障排除和诊断](img/B04693_10_03.jpg)'
- en: 'Figure 3: Visual Studio XAML analyses'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3：Visual Studio XAML 分析
- en: Finally, Xamarin Profiler, as a maturing application (currently in preview release),
    can help analyze memory allocations and execution time. Xamarin Profiler can be
    used with iOS and Android applications.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Xamarin Profiler 作为成熟的应用程序（目前处于预览发布状态），可以帮助分析内存分配和执行时间。Xamarin Profiler 可以与
    iOS 和 Android 应用程序一起使用。
- en: Unit testing
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试
- en: The **test-driven development** (**TDD**) pattern dictates that the business
    requirements and the granular use-cases defined by these requirements should be
    initially reflected on unit test fixtures. This allows a mobile application to
    grow/evolve within the defined borders of these assertive unit test models. Whether
    following a TDD strategy or implementing tests to ensure the stability of the
    development pipeline, unit tests are fundamental components of a development project.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试驱动开发**（**TDD**）模式规定，业务需求和由这些需求定义的细粒度用例应首先反映在单元测试用例中。这允许移动应用程序在定义的断言单元测试模型范围内增长/发展。无论遵循
    TDD 策略还是实施测试以确保开发管道的稳定性，单元测试都是开发项目的根本组成部分。'
- en: '![Unit testing](img/B04693_10_04.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![单元测试](img/B04693_10_04.jpg)'
- en: 'Figure 4: Unit test project templates'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4：单元测试项目模板
- en: 'Xamarin Studio and Visual Studio both provide a number of test project templates
    targeting different areas of a cross-platform project. In Xamarin cross-platform
    projects, unit tests can be categorized into two groups: platform-agnostic and
    platform-specific testing.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin Studio 和 Visual Studio 都提供了一系列针对跨平台项目不同领域的测试项目模板。在 Xamarin 跨平台项目中，单元测试可以分为两组：平台无关和平台特定测试。
- en: Platform-agnostic unit tests
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 平台无关单元测试
- en: Platform-agnostic components, such as portable class libraries containing shared
    logic for Xamarin applications, can be tested using the common unit test projects
    targeting the .NET framework. Visual Studio Test Tools or the NUnit test framework
    can be used according to the development environment of choice. It is also important
    to note that shared projects used to create shared logic containers for Xamarin
    projects cannot be tested with .NET unit test fixtures. For shared projects and
    the referencing platform-specific projects, platform-specific unit test fixtures
    should be prepared.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 平台无关的组件，例如包含Xamarin应用程序共享逻辑的可移植类库，可以使用针对.NET框架的通用单元测试项目进行测试。可以根据选择的开发环境使用Visual
    Studio测试工具或NUnit测试框架。还应注意，用于为Xamarin项目创建共享逻辑容器的共享项目不能使用.NET单元测试固定装置进行测试。对于共享项目和引用特定平台的项目，应准备特定平台的单元测试固定装置。
- en: When following an MVVM pattern, view models are the focus of unit test fixtures
    since, as previously explained, view models can be perceived as a finite state
    machine where the bindable properties are used to create a certain state on which
    the commands are executed, simulating a specific use-case to be tested. This approach
    is the most convenient way to test the UI behavior of a Xamarin application without
    having to implement and configure automated UI tests.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在遵循MVVM模式时，视图模型是单元测试固定装置的重点，因为，如前所述，视图模型可以被视为一个有限状态机，其中可绑定属性用于创建一个特定的状态，在该状态下执行命令，模拟要测试的特定用例。这种方法是测试Xamarin应用程序UI行为最方便的方法，而无需实现和配置自动化的UI测试。
- en: While implementing unit tests for such projects, a mocking framework is generally
    used to replace the platform-dependent sections of the business logic. Loosely
    coupling these dependent components (see [Chapter 8](ch08.html "Chapter 8. Xamarin.Forms"),
    *Xamarin.Forms*) makes it easier for developers to inject mocked interface implementations
    and increases the testability of these modules. The most popular mocking frameworks
    for unit testing are Moq and RhinoMocks.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在为这类项目实现单元测试时，通常使用模拟框架来替换业务逻辑中依赖平台的部分。松散耦合这些依赖组件（参见[第8章](ch08.html "第8章. Xamarin.Forms")，*Xamarin.Forms*），使得开发者更容易注入模拟接口实现，并增加了这些模块的可测试性。最流行的单元测试模拟框架是Moq和RhinoMocks。
- en: Note
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Both Moq and RhinoMocks utilize reflection and, more specifically, the Reflection.Emit
    namespace, which is used to generate types, methods, events, and other artifacts
    in the runtime. Aforementioned iOS restrictions on code generation make these
    libraries inapplicable for platform-specific testing, but they can still be included
    in unit test fixtures targeting the .NET framework. For platform-specific implementation,
    the True Fakes library provides compile time code generation and mocking features.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Moq和RhinoMocks都使用反射，特别是Reflection.Emit命名空间，用于在运行时生成类型、方法、事件和其他资源。之前提到的iOS代码生成限制使得这些库在特定平台测试中不适用，但它们仍然可以包含在针对.NET框架的单元测试固定装置中。对于特定平台的实现，True
    Fakes库提供了编译时代码生成和模拟功能。
- en: Depending on the implementation specifics (such as namespaces used, network
    communication, multithreading, and so on), in some scenarios it is imperative
    to test the common logic implementation on specific platforms as well. For instance,
    some multithreading and parallel task implementations give different results on
    Windows Runtime, Xamarin.Android, and Xamarin.iOS. These variations generally
    occur because of the underlying platform's mechanism or slight differences between
    the .NET and Mono implementation logic. In order to ensure the integrity of these
    components, common unit test fixtures can be added as linked/referenced files
    to platform-specific test projects and executed on the test harness.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 根据实现的具体细节（如使用的命名空间、网络通信、多线程等），在某些场景下，测试特定平台上的通用逻辑实现是强制性的。例如，某些多线程和并行任务实现在Windows
    Runtime、Xamarin.Android和Xamarin.iOS上给出不同的结果。这些变化通常是由于底层平台的机制或.NET和Mono实现逻辑之间的细微差异造成的。为了确保这些组件的完整性，可以将通用单元测试固定装置作为链接/引用文件添加到特定平台的测试项目中，并在测试平台上执行。
- en: Platform-specific unit tests
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特定平台单元测试
- en: In a Xamarin project, platform-dependent features cannot be unit tested using
    the conventional unit test runners available in Visual Studio Test Suite and NUnit
    frameworks. Platform-dependent tests are executed on empty platform-specific projects
    that serve as a harness for unit tests for that specific platform.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Xamarin 项目中，无法使用 Visual Studio 测试套件和 NUnit 框架中提供的传统单元测试运行器对平台相关的功能进行单元测试。平台相关的测试是在空白的特定平台项目上执行的，这些项目作为该特定平台单元测试的框架。
- en: Windows Runtime application projects can be tested using the Visual Studio Test
    Suite. However, for Android and iOS, the NUnit testing framework should be used,
    since Visual Studio Test Tools are not available for the Xamarin.Android and Xamarin.iOS
    platforms.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 Visual Studio 测试套件测试 Windows 运行时应用程序项目。然而，对于 Android 和 iOS，应使用 NUnit 测试框架，因为
    Visual Studio 测试工具在 Xamarin.Android 和 Xamarin.iOS 平台上不可用。
- en: '![Platform-specific unit tests](img/B04693_10_05.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![特定平台的单元测试](img/B04693_10_05.jpg)'
- en: 'Figure 5: Test harnesses'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5：测试框架
- en: The unit test runner for Windows Phone (Silverlight) and Windows Phone 8.1 applications
    uses a test harness integrated with the Visual Studio test explorer. The unit
    tests can be executed and debugged from within Visual Studio.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Windows Phone（Silverlight）和 Windows Phone 8.1 应用程序的单元测试运行器使用与 Visual Studio
    测试资源管理器集成的测试框架。可以在 Visual Studio 内部执行和调试单元测试。
- en: Xamarin.Android and Xamarin.iOS test project templates use NUnitLite implementation
    for the respective platforms. In order to run these tests, the test application
    should be deployed on the simulator (or the testing device) and the application
    has to be manually executed.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin.Android 和 Xamarin.iOS 测试项目模板分别使用 NUnitLite 实现对应平台的功能。为了运行这些测试，测试应用程序应该部署在模拟器（或测试设备）上，并且必须手动执行应用程序。
- en: Tip
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: It is possible to automate the unit tests on Android and iOS platforms through
    instrumentation; however, these methods will be discussed in the next chapter.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 通过仪器化，可以在 Android 和 iOS 平台上自动化单元测试；然而，这些方法将在下一章中讨论。
- en: 'In each Xamarin target platform, the initial application lifetime event is
    used to add the necessary unit tests:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个 Xamarin 目标平台上，初始应用程序生命周期事件用于添加必要的单元测试：
- en: '[PRE0]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the Xamarin.Android implementation, the `MainActivity` class derives from
    the `TestSuiteActivity`, which implements the necessary infrastructure to run
    the unit tests and the UI elements to visualize the test results. On the Xamarin.iOS
    platform, the test application uses the default `UIApplicationDelegate`, and generally,
    the `FinishedLaunching` event delegate is used to create the `ViewController`
    for the unit test run fixture:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Xamarin.Android 实现中，`MainActivity` 类继承自 `TestSuiteActivity`，该类实现了运行单元测试所需的基础设施以及用于可视化测试结果的
    UI 元素。在 Xamarin.iOS 平台上，测试应用程序使用默认的 `UIApplicationDelegate`，通常使用 `FinishedLaunching`
    事件代理来创建单元测试运行固定程序的 `ViewController`：
- en: '[PRE1]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The main shortcoming of executing unit tests this way is the fact that it is
    not easy to generate a code coverage report and archive the test results.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式执行单元测试的主要缺点是难以生成代码覆盖率报告并归档测试结果。
- en: Neither of these testing methods provide the ability to test the UI layer. They
    are simply used to test platform-dependent implementations. In order to test the
    interactive layer, platform-specific or cross-platform (Xamarin.Forms) coded UI
    tests need to be implemented.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种测试方法都不提供测试 UI 层的能力。它们只是用来测试平台相关的实现。为了测试交互层，需要实现特定平台或跨平台（Xamarin.Forms）的编码
    UI 测试。
- en: UI testing
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UI 测试
- en: 'In general terms, the code coverage of the unit tests directly correlates with
    the amount of shared code which amounts to, at the very least, 70-80 percent of
    the code base in a mundane Xamarin project. As explained in the previous chapters,
    one of the main driving factors of architectural patterns was to decrease the
    amount of logic and code in the view layer so that the testability of the project
    utilizing conventional unit tests reaches a satisfactory level. Coded UI (or automated
    UI acceptance) tests are used to test the uppermost layer of the cross-platform
    solution: the views.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一般而言，单元测试的代码覆盖率与共享代码的数量直接相关，这至少相当于普通 Xamarin 项目代码库的 70-80%。正如前几章所述，架构模式的主要驱动因素之一是减少视图层中的逻辑和代码量，以便使用传统单元测试的项目可测试性达到令人满意的水平。编码
    UI（或自动 UI 接受）测试用于测试跨平台解决方案的最高层：视图。
- en: Xamarin.UITests and Xamarin Test Cloud
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Xamarin.UITests 和 Xamarin Test Cloud
- en: The main UI testing framework used for Xamarin projects is the Xamarin.UITests
    testing framework. This testing component can be used on various platform-specific
    projects, varying from native mobile applications to Xamarin.Forms implementations,
    except for the Windows Phone platform and applications. Xamarin.UITests is an
    implementation based on the Calabash framework, which is an automated UI acceptance
    testing framework targeting mobile applications.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 用于Xamarin项目的UI测试主要框架是Xamarin.UITests测试框架。此测试组件可用于各种平台特定项目，从原生移动应用程序到Xamarin.Forms实现，但Windows
    Phone平台和应用程序除外。Xamarin.UITests是基于Calabash框架的实现，Calabash框架是一个针对移动应用程序的自动化UI验收测试框架。
- en: Xamarin.UITests is introduced to the Xamarin.iOS or Xamarin.Android applications
    using the publicly available NuGet packages. The included framework components
    are used to provide an entry point to the native applications. The entry point
    is the Xamarin Test Cloud Agent, which is embedded into the native application
    during the compilation. The cloud agent is similar to a local server that allows
    either the Xamarin Test Cloud or the test runner to communicate with the app infrastructure
    and simulate user interaction with the application.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin.UITests是通过公开可用的NuGet包引入到Xamarin.iOS或Xamarin.Android应用程序中的。包含的框架组件用于提供进入原生应用程序的入口点。入口点是Xamarin测试云代理，它在编译过程中嵌入到原生应用程序中。云代理类似于本地服务器，允许Xamarin测试云或测试运行器与应用程序基础设施通信并模拟与应用程序的用户交互。
- en: Note
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Xamarin Test Cloud is a subscription-based service allowing Xamarin applications
    to be tested on real mobile devices using UI tests implemented via Xamarin.UITests.
    Xamarin Test Cloud not only provides a powerful testing infrastructure for Xamarin.iOS
    and Xamarin.Android applications with an abundant amount of mobile devices but
    can also be integrated into Continuous Integration workflows.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin测试云是一个基于订阅的服务，允许使用通过Xamarin.UITests实现的UI测试在真实移动设备上进行测试。Xamarin测试云不仅为Xamarin.iOS和Xamarin.Android应用程序提供了强大的测试基础设施和大量的移动设备，还可以集成到持续集成工作流程中。
- en: 'After installing the appropriate NuGet package, the UI tests can be initialized
    for a specific application on a specific device. In order to initialize the interaction
    adapter for the application, the app package and the device should be configured.
    On Android, the APK package path and the device serial can be used for the initialization:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 安装适当的NuGet包后，可以在特定设备上的特定应用程序中初始化UI测试。为了初始化应用程序的交互适配器，需要配置应用程序包和设备。在Android上，可以使用APK包路径和设备序列号进行初始化：
- en: '[PRE2]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'For an iOS application, the procedure is similar:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 对于iOS应用程序，流程类似：
- en: '[PRE3]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Once the `App` handle has been created, each test written using NUnit should
    first create the pre-conditions for the tests, simulate the interaction, and finally
    test the outcome.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了`App`句柄，使用NUnit编写的每个测试都应该首先创建测试的前置条件，模拟交互，并最终测试结果。
- en: The `IApp` interface provides a set of methods to select elements on the visual
    tree and simulate certain interactions, such as text entry and tapping. On top
    of the main testing functionality, screenshots can be taken to document test steps
    and possible bugs.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`IApp`接口提供了一套方法来选择视觉树上的元素并模拟某些交互，例如文本输入和点击。除了主要的测试功能外，还可以拍摄截图以记录测试步骤和可能的错误。'
- en: Both Visual Studio and Xamarin Studio provide project templates for Xamarin.UITests.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio和Xamarin Studio都为Xamarin.UITests提供了项目模板。
- en: Xamarin Test Recorder
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Xamarin测试记录器
- en: Xamarin Test Recorder is an application that can ease the creation of automated
    UI tests. It is currently in its preview version and is only available for the
    Mac OS platform.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin测试记录器是一个可以简化自动化UI测试创建的应用程序。它目前处于预览版本，并且仅适用于Mac OS平台。
- en: '![Xamarin Test Recorder](img/B04693_10_06.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![Xamarin测试记录器](img/B04693_10_06.jpg)'
- en: 'Figure 6: Xamarin Test Recorder'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图6：Xamarin测试记录器
- en: Using this application, developers can select the application in need of testing
    and the device/simulator that is going to run the application. Once the recording
    session starts, each interaction on the screen is recorded as execution steps
    on a separate screen, and these steps can be used to generate the preparation
    or testing steps for the Xamarin.UITests implementation.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此应用程序，开发者可以选择需要测试的应用程序以及将要运行应用程序的设备/模拟器。一旦开始录制会话，屏幕上的每个交互都会作为单独屏幕上的执行步骤被记录下来，这些步骤可以用来生成Xamarin.UITests实现的准备或测试步骤。
- en: Coded UI tests (Windows Phone)
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编码UI测试（Windows Phone）
- en: Coded UI tests are used for automated UI testing on the Windows Phone platform.
    Coded UI Tests for Windows Phone and Windows Store applications are not any different
    than their counterparts for other .NET platforms such as Windows Forms, WPF, or
    ASP.Net. It is also important to note that only XAML applications support Coded
    UI tests.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 编码 UI 测试用于在 Windows Phone 平台上进行自动化 UI 测试。Windows Phone 和 Windows Store 应用程序的编码
    UI 测试与其他 .NET 平台（如 Windows Forms、WPF 或 ASP.Net）的对应版本没有区别。还应注意，只有 XAML 应用程序支持编码
    UI 测试。
- en: 'Coded UI tests are generated on a simulator and written on an Automation ID
    premise. The Automation ID property is an automatically generated or manually
    configured identifier for Windows Phone applications (only in XAML) and the UI
    controls used in the application. Coded UI tests depend on the UIMap created for
    each control on a specific screen using the Automation IDs. While creating the
    UIMap, a crosshair tool can be used to select the application and the controls
    on the simulator screen to define the interactive elements:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 编码 UI 测试是在模拟器上生成的，基于 Automation ID 原则编写的。Automation ID 属性是 Windows Phone 应用程序（仅在
    XAML 中）以及应用程序中使用的 UI 控件的自动生成或手动配置的标识符。编码 UI 测试依赖于为特定屏幕上的每个控件使用 Automation IDs
    创建的 UIMap。在创建 UIMap 时，可以使用准星工具选择模拟器屏幕上的应用程序和控件来定义交互元素：
- en: '![Coded UI tests (Windows Phone)](img/B04693_10_07.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![编码 UI 测试（Windows Phone）](img/B04693_10_07.jpg)'
- en: Figure 7:- Generating coded UI accessors and tests
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7：生成编码 UI 访问器和测试
- en: Once the UIMap has been created and the designer files have been generated,
    gestures and the generated XAML accessors can be used to create testing pre-conditions
    and assertions.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了 UIMap 并生成了设计器文件，就可以使用手势和生成的 XAML 访问器来创建测试前提条件和断言。
- en: 'For Coded UI tests, multiple scenario-specific input values can be used and
    tested on a single assertion. Using the `DataRow` attribute, unit tests can be
    expanded to test multiple data-driven scenarios. The code snippet below uses multiple
    input values to test different incorrect input values:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 对于编码 UI 测试，可以在单个断言上使用和测试多个特定场景的输入值。使用 `DataRow` 属性，单元测试可以扩展以测试多个数据驱动场景。下面的代码片段使用多个输入值来测试不同的错误输入值：
- en: '[PRE4]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Automated tests can run on available simulators and/or a real device. They can
    also be included in CI build workflows and made part of the automated development
    pipeline.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 自动测试可以在可用的模拟器和/或真实设备上运行。它们也可以包含在 CI 构建工作流程中，并成为自动化开发流程的一部分。
- en: Calabash
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Calabash
- en: Calabash is an automated UI acceptance testing framework used to execute Cucumber
    tests. Cucumber tests provide an assertion strategy similar to coded UI tests,
    only broader and behavior oriented. The Cucumber test framework supports tests
    written in the Gherkin language (a human-readable programming grammar description
    for behavior definitions). Calabash makes up the necessary infrastructure to execute
    these tests on various platforms and application runtimes.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Calabash 是一个用于执行 Cucumber 测试的自动化 UI 接受测试框架。Cucumber 测试提供了一种类似于编码 UI 测试的断言策略，但更广泛且以行为为导向。Cucumber
    测试框架支持用 Gherkin 语言（一种用于行为定义的人类可读编程语法描述）编写的测试。Calabash 提供了必要的基础设施，以在各个平台和应用运行时上执行这些测试。
- en: 'A simple declaration of the feature and the scenario that is previously tested
    on Coded UI using the data-driven model would look similar to the excerpt below.
    Only two of the possible test scenarios are declared in this feature for demonstration;
    the feature can be extended:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 使用数据驱动模型在 Coded UI 上先前测试的功能和场景的简单声明将类似于以下摘录。在此功能中仅声明了两个可能的测试场景以供演示；功能可以扩展：
- en: '[PRE5]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Calabash test execution is possible on Xamarin target platforms since the Ruby
    API exposed by the Calabash framework has a bidirectional communication line with
    the Xamarin Test Cloud Agent embedded in Xamarin applications with NuGet packages.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Calabash 框架公开的 Ruby API 与嵌入在具有 NuGet 包的 Xamarin 应用程序中的 Xamarin Test Cloud
    Agent 具有双向通信线路，因此 Calabash 测试执行在 Xamarin 目标平台上是可能的。
- en: Calabash/Cucumber tests can be executed on Xamarin Test Cloud on real devices
    since the communication between the application runtime and Calabash framework
    is maintained by Xamarin Test Cloud Agent, the same as Xamarin.UI tests.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Calabash/Cucumber 测试可以在 Xamarin Test Cloud 上针对真实设备执行，因为应用程序运行时与 Calabash 框架之间的通信由
    Xamarin Test Cloud Agent 维护，这与 Xamarin.UI 测试相同。
- en: Summary
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Xamarin projects can benefit from a properly established development pipeline
    and the use of ALM principles. This type of approach makes it easier for teams
    to share responsibilities and work out business requirements in an iterative manner.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin项目可以从一个正确建立的开发管道和ALM原则的使用中受益。这种类型的做法使得团队更容易分担责任，并以迭代的方式解决业务需求。
- en: In the ALM timeline, the development phase is the main domain in which most
    of the concrete implementation takes place. In order for the development team
    to provide quality code that can survive the ALM cycle, it is highly advised to
    analyze and test native applications using the available tooling in Xamarin development
    IDEs.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在ALM时间线中，开发阶段是大多数具体实现发生的主要领域。为了使开发团队能够提供能够在ALM周期中存活的优质代码，强烈建议使用Xamarin开发IDE中的可用工具对原生应用程序进行分析和测试。
- en: While the common codebase for a target platform in a Xamarin project can be
    treated and tested as a .NET implementation using the conventional unit tests,
    platform-specific implementations require more particular handling. Platform-specific
    parts of the application need to be tested on empty shell applications, called
    test harnesses, on the respective platform simulators or devices.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在Xamarin项目中，针对目标平台的通用代码库可以使用传统的单元测试来处理和测试，如同.NET实现一样，但平台特定的实现需要更特别的处理。应用程序的平台特定部分需要在相应的平台模拟器或设备上的空壳应用程序，即测试框架中测试。
- en: To test views, available frameworks such as Coded UI tests (for Windows Phone)
    and Xamarin.UITests (for Xamarin.Android and Xamarin.iOS) can be utilized to increase
    the test code coverage and create a stable foundation for the delivery pipeline.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试视图，可以使用如Coded UI tests（适用于Windows Phone）和Xamarin.UITests（适用于Xamarin.Android和Xamarin.iOS）等可用的框架，以增加测试代码覆盖率并为交付管道创建一个稳定的基石。
- en: Most tests and analysis tools discussed in this chapter can be integrated into
    automated continuous integration processes. The infrastructure used for source
    control and continuous integration build and testing processes will be the topic
    of the next chapter.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中讨论的大多数测试和分析工具都可以集成到自动化的持续集成过程中。用于源代码控制和持续集成构建及测试过程的基础设施将是下一章的主题。
