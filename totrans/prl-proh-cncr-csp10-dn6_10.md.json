["```cs\ninternal void QueryCities(List<string> cities)\n```", "```cs\n{\n```", "```cs\n    // Query is executed with ToList call\n```", "```cs\n    List<string> citiesWithS = cities.Where(s => \n```", "```cs\n        s.StartsWith('S')).ToList();\n```", "```cs\n    // Query is not executed here\n```", "```cs\n    IEnumerable<string> citiesWithT = cities.Where(s => \n```", "```cs\n        s.StartsWith('T'));\n```", "```cs\n    // Query is executed here when enumerating\n```", "```cs\n    foreach (string city in citiesWithT)\n```", "```cs\n    {\n```", "```cs\n        // Do something with citiesWithT\n```", "```cs\n    }\n```", "```cs\n}\n```", "```cs\ninternal class Person\n```", "```cs\n{\n```", "```cs\n    public string FirstName { get; set; } = \"\";\n```", "```cs\n    public string LastName { get; set; } = \"\";\n```", "```cs\n    public int Age { get; set; }\n```", "```cs\n}\n```", "```cs\ninternal void QueryAndGroupPeople(List<Person> people)\n```", "```cs\n{\n```", "```cs\n    var results = people.AsParallel().Where(p => p.Age > 17)\n```", "```cs\n        .AsSequential().GroupBy(p => p.LastName);\n```", "```cs\n    foreach (var group in results)\n```", "```cs\n    {\n```", "```cs\n        Console.WriteLine($\"Last name {group.Key} has \n```", "```cs\n            {group.Count()} people.\");\n```", "```cs\n    }\n```", "```cs\n    // Sample output:\n```", "```cs\n    // Last name Jones has 4220 people.\n```", "```cs\n    // Last name Xu has 3434 people.\n```", "```cs\n    // Last name Patel has 4798 people.\n```", "```cs\n    // Last name Smith has 3051 people.\n```", "```cs\n    // Last name Sanchez has 3811 people.\n```", "```cs\n    // ...\n```", "```cs\n}\n```", "```cs\nvar peopleQuery1 = people.AsParallel().Where(p => p.Age > 17);\n```", "```cs\nvar peopleQuery2 = from person in people.AsParallel()\n```", "```cs\n                    where person.Age > 17\n```", "```cs\n                    select person;\n```", "```cs\nvar results = people.AsParallel().AsOrdered()\n```", "```cs\n    .Where(p => p.LastName.StartsWith(\"H\"));\n```", "```cs\nvar results = people.AsParallel().AsUnordered()\n```", "```cs\n    .Where(p => p.LastName.StartsWith(\"H\"));\n```", "```cs\ninternal void ProcessAdultsWhoVote(List<Person> people)\n```", "```cs\n{\n```", "```cs\n    foreach (var person in people)\n```", "```cs\n    {\n```", "```cs\n        if (person.Age < 18) continue;\n```", "```cs\n        ProcessVoterActions(person);\n```", "```cs\n    }\n```", "```cs\n}\n```", "```cs\nprivate void ProcessVoterActions(Person adult)\n```", "```cs\n{\n```", "```cs\n    // Add adult to a voter database and process their \n```", "```cs\n        data.\n```", "```cs\n}\n```", "```cs\ninternal void ProcessAdultsWhoVoteInParallel(List<Person> \n```", "```cs\n    people)\n```", "```cs\n{\n```", "```cs\n    var adults = people.Where(p => p.Age > 17);\n```", "```cs\n    Parallel.ForEach(adults, ProcessVoterActions);\n```", "```cs\n}\n```", "```cs\ninternal void ProcessAdultsWhoVoteWithPlinq(List<Person> \n```", "```cs\n    people)\n```", "```cs\n{\n```", "```cs\n    var adults = people.AsParallel().Where(p => p.Age > 17);\n```", "```cs\n    adults.ForAll(ProcessVoterActions);\n```", "```cs\n}\n```", "```cs\n    internal class Person\n    {\n        public string FirstName { get; set; } = \"\";\n        public string LastName { get; set; } = \"\";\n        public int Age { get; set; }\n    }\n    ```", "```cs\n    private void ProcessVoterActions(Person adult)\n    {\n        if (adult.Age > 120)\n        {\n            throw new ArgumentException(\"This person is \n                too old!\", nameof(adult));\n        }\n        // Add adult to a voter database and process their \n    data.\n    }\n    ```", "```cs\n    internal void ProcessAdultsWhoVoteWithPlinq\n        (List<Person> people)\n    {\n        try\n        {\n            var adults = people.AsParallel().Where(p => \n                p.Age > 17);\n            adults.ForAll(ProcessVoterActions);\n        }\n        catch (AggregateException ae)\n        {\n            foreach (var ex in ae.InnerExceptions)\n            {\n                Console.WriteLine($\"Exception encountered \n                    while processing voters. Message: \n                        {ex.Message}\");\n            }\n        }\n    }\n    ```", "```cs\n    using LINQandPLINQsnippets;\n    var exceptionExample = new PlinqExceptionsExample();\n    exceptionExample.ProcessAdultsWhoVoteWithPlinq\n        (GetPeople());\n    Console.ReadLine();\n    static List<Person> GetPeople()\n    {\n        return new List<Person>\n        {\n            new Person { FirstName = \"Bob\", LastName = \n                \"Jones\", Age = 23 },\n            new Person { FirstName = \"Sally\", LastName = \n                \"Shen\", Age = 2 },\n            new Person { FirstName = \"Joe\", LastName = \n                \"Smith\", Age = 45 },\n            new Person { FirstName = \"Lisa\", LastName = \n                \"Samson\", Age = 98 },\n            new Person { FirstName = \"Norman\", LastName = \n                \"Patterson\", Age = 121 },\n            new Person { FirstName = \"Steve\", LastName = \n                \"Gates\", Age = 40 },\n            new Person { FirstName = \"Richard\", LastName = \n                \"Ng\", Age = 18 }\n        };\n    }\n    ```", "```cs\n    internal class Person\n    {\n        public string FirstName { get; set; } = \"\";\n        public string LastName { get; set; } = \"\";\n        public int Age { get; set; }\n        public bool IsImportant { get; set; }\n    }\n    ```", "```cs\n    internal IEnumerable<Person> \n        GetImportantChildrenNoOrder(List<Person> people)\n    {\n        return people.AsParallel()\n            .Where(p => p.IsImportant && p.Age < 18);\n    }\n    ```", "```cs\n    internal IEnumerable<Person> \n        GetImportantChildrenUnordered(List<Person> people)\n    {\n        return people.AsParallel().AsUnordered()\n            .Where(p => p.IsImportant && p.Age < 18);\n    }\n    ```", "```cs\n    internal IEnumerable<Person> \n        GetImportantChildrenUnknownOrder(List<Person> \n            people)\n    {\n        return people.AsParallel().Where(p => \n            p.IsImportant)\n            .AsSequential().Where(p => p.Age < 18);\n    }\n    ```", "```cs\n    internal IEnumerable<Person> \n        GetImportantChildrenPreserveOrder(List<Person> \n            people)\n    {\n        return people.AsParallel().AsOrdered()\n            .Where(p => p.IsImportant && p.Age < 18);\n    }\n    ```", "```cs\n    internal IEnumerable<Person> \n        GetImportantChildrenReverseOrder(List<Person> \n            people)\n    {\n        return people.AsParallel().AsOrdered().Reverse()\n            .Where(p => p.IsImportant && p.Age < 18);\n    }\n    ```", "```cs\n    static List<Person> GetYoungPeople()\n    {\n        return new List<Person>\n        {\n            new Person { FirstName = \"Bob\", LastName = \n                \"Jones\", Age = 23 },\n            new Person { FirstName = \"Sally\", LastName = \n                \"Shen\", Age = 2, IsImportant = true },\n            new Person { FirstName = \"Joe\", LastName = \n                \"Smith\", Age = 5, IsImportant = true },\n            new Person { FirstName = \"Lisa\", LastName = \n                \"Samson\", Age = 9, IsImportant = true },\n            new Person { FirstName = \"Norman\", LastName = \n                \"Patterson\", Age = 17 },\n            new Person { FirstName = \"Steve\", LastName = \n                \"Gates\", Age = 20 },\n            new Person { FirstName = \"Richard\", LastName = \n                \"Ng\", Age = 16, IsImportant = true }\n        };\n    }\n    static void OutputListToConsole(List<Person> list)\n    {\n        foreach (var item in list)\n        {\n            Console.WriteLine(item.FirstName);\n        }\n    }\n    ```", "```cs\n    using LINQandPLINQsnippets;\n    var timeFmt = \"hh:mm:ss.fff tt\";\n    var orderExample = new OrderSamples();\n    Console.WriteLine($\"Start time: {DateTime.Now.ToString\n        (timeFmt)}. AsParallel children:\");\n    OutputListToConsole(orderExample.GetImportantChildrenN\n        oOrder(GetYoungPeople()).ToList());\n    Console.WriteLine($\"Start time: {DateTime.Now\n        .ToString(timeFmt)}. AsUnordered children:\");\n    OutputListToConsole(orderExample.GetImportantChildrenU\n        nordered(GetYoungPeople()).ToList());\n    Console.WriteLine($\"Start time: {DateTime.Now\n        .ToString(timeFmt)}. Sequential after Where \n            children:\");\n    OutputListToConsole(orderExample.GetImportantChildren\n        UnknownOrder(GetYoungPeople()).ToList());\n    Console.WriteLine($\"Start time: {DateTime.Now\n        .ToString(timeFmt)}. AsOrdered children:\");\n    OutputListToConsole(orderExample.GetImportantChildrenP\n        reserveOrder(GetYoungPeople()).ToList());\n    Console.WriteLine($\"Start time: {DateTime.Now\n        .ToString(timeFmt)}. Reverse order children:\");\n    OutputListToConsole(orderExample.GetImportantChildrenR\n        everseOrder(GetYoungPeople()).ToList());\n    Console.WriteLine($\"Finish time: {DateTime.Now\n        .ToString(timeFmt)}\");\n    Console.ReadLine();\n    ```", "```cs\n    internal IEnumerable<Person> \n        GetImportantChildrenNoMergeSpecified(List<Person> \n            people)\n    {\n        return people.AsParallel()\n            .Where(p => p.IsImportant && p.Age < 18)\n                .Take(3);\n    }\n    internal IEnumerable<Person> GetImportantChildren\n        DefaultMerge(List<Person> people)\n    {\n        return people.AsParallel().WithMergeOptions\n             (ParallelMergeOptions.Default)\n                 .Where(p => p.IsImportant && p.Age < \n                     18).Take(3);\n    }\n    internal IEnumerable<Person> GetImportant\n        ChildrenAutoBuffered(List<Person> people)\n    {\n        return people.AsParallel().WithMergeOptions\n           (ParallelMergeOptions.AutoBuffered).Where(p => \n               p.IsImportant && p.Age < 18).Take(3);\n    }\n    ```", "```cs\n    internal IEnumerable<Person> GetImportant\n        ChildrenNotBuffered(List<Person> people)\n    {\n        return people.AsParallel().WithMergeOptions\n            (ParallelMergeOptions.NotBuffered)\n                .Where(p => p.IsImportant && p.Age < \n                    18).Take(3);\n    }\n    internal IEnumerable<Person> GetImportantChildren\n        FullyBuffered(List<Person> people)\n    {\n        return people.AsParallel().WithMergeOptions\n           (ParallelMergeOptions.FullyBuffered).Where(p => \n               p.IsImportant && p.Age < 18).Take(3);\n    }\n    ```", "```cs\n    using LINQandPLINQsnippets;\n    var timeFmt = \"hh:mm:ss.fff tt\";\n    var mergeExample = new MergeSamples();\n    Console.WriteLine($\"Start time: {DateTime.Now.ToString\n        (timeFmt)}. NoMerge children:\");\n    OutputListToConsole(mergeExample.GetImportantChildrenN\n        oMergeSpecified(GetYoungPeople()).ToList());\n    Console.WriteLine($\"Start time: \n        {DateTime.Now.ToString(timeFmt)}. DefaultMerge \n            children:\");\n    OutputListToConsole(mergeExample.GetImportantChildren\n        DefaultMerge(GetYoungPeople()).ToList());\n    Console.WriteLine($\"Start time: {DateTime.Now.ToString\n        (timeFmt)}. AutoBuffered children:\");\n    OutputListToConsole(mergeExample.GetImportantChildren\n       AutoBuffered(GetYoungPeople()).ToList());\n    Console.WriteLine($\"Start time: \n        {DateTime.Now.ToString(timeFmt)}. NotBuffered \n            children:\");\n    OutputListToConsole(mergeExample.GetImportantChildren\n        NotBuffered(GetYoungPeople()).ToList());\n    Console.WriteLine($\"Start time: \n        {DateTime.Now.ToString(timeFmt)}. FullyBuffered \n            children:\");\n    OutputListToConsole(mergeExample.GetImportantChildren\n        FullyBuffered(GetYoungPeople()).ToList());\n    Console.WriteLine($\"Finish time: {\n            DateTime.Now.ToString(timeFmt)}\");\n    Console.ReadLine();\n    ```", "```cs\nprivate SpinLock _spinLock = new SpinLock();\n```", "```cs\ninternal void ProcessAdultsWhoVoteWithPlinq2(List<Person> \n```", "```cs\n    people)\n```", "```cs\n{\n```", "```cs\n    var adults = people.AsParallel().Where(p => p.Age > 17);\n```", "```cs\n    adults.ForAll(ProcessVoterActions2);\n```", "```cs\n}\n```", "```cs\nprivate void ProcessVoterActions2(Person adult)\n```", "```cs\n{\n```", "```cs\n    var hasLock = false;\n```", "```cs\n    if (adult.Age > 120)\n```", "```cs\n    {\n```", "```cs\n        try\n```", "```cs\n        {\n```", "```cs\n            _spinLock.Enter(hasLock);\n```", "```cs\n            adult.Age = 120;\n```", "```cs\n        }\n```", "```cs\n        finally\n```", "```cs\n        {\n```", "```cs\n            if (hasLock) _spinLock.Exit();\n```", "```cs\n        }\n```", "```cs\n    }\n```", "```cs\n}\n```"]