- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Advanced Cloud Integration and Services
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级云集成和服务
- en: In this chapter, we will delve into the advanced realm of cloud integration
    and services, highlighting how Visual Studio 2022 serves as a powerful tool to
    develop and manage cloud-based applications. In today’s digital ecosystem, cloud
    computing has become a cornerstone, enabling scalable, resilient, and highly available
    applications. To stay ahead, developers must not only build robust applications
    but also seamlessly integrate them with various cloud platforms.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入探讨云集成和服务的先进领域，强调 Visual Studio 2022 如何作为一个强大的工具来开发和管理工作负载应用。在今天的数字生态系统中，云计算已成为基石，它使可扩展、弹性高和高度可用的应用成为可能。为了保持领先，开发者不仅要构建健壮的应用程序，还要将它们无缝集成到各种云平台中。
- en: Throughout this chapter, we’ll learn how to harness the power of various cloud
    services, streamline our development workflows, and ensure that our applications
    are optimized for cloud environments. Whether it’s deploying serverless functions
    on Azure, integrating Google Cloud services, or leveraging the extensive tools
    provided by AWS, this chapter will equip you with the knowledge and skills needed
    to excel in advanced cloud development.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何利用各种云服务的力量，简化我们的开发工作流程，并确保我们的应用程序针对云环境进行了优化。无论是将无服务器函数部署到 Azure，还是集成
    Google Cloud 服务，或者利用 AWS 提供的丰富工具，本章都将为您提供在高级云开发中取得卓越成就所需的知识和技能。
- en: 'Key topics covered in this chapter include the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的关键主题包括以下内容：
- en: Exploring . NET Aspire
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索 .NET Aspire
- en: Exploring Azure Functions development in Visual Studio 2022
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索 Visual Studio 2022 中的 Azure Functions 开发
- en: Exploring Google Cloud Tools for Visual Studio
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索 Google Cloud Tools for Visual Studio
- en: Exploring the AWS Toolkit
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索 AWS 工具包
- en: Let’s begin our journey toward mastering cloud integration and building cutting-edge
    cloud-based applications together.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始我们的旅程，共同掌握云集成和构建前沿的云应用。
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'While writing this chapter, I used the following version of Visual Studio:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写本章时，我使用了以下版本的 Visual Studio：
- en: Visual Studio Enterprise 2022 Version 17.12.0
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Enterprise 2022 版本 17.12.0
- en: Preview 1.0
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预览 1.0
- en: 'For an optimal experience, consider having the following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获得最佳体验，请考虑以下内容：
- en: An Azure subscription
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 订阅
- en: A Google Cloud Platform subscription
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google Cloud Platform 订阅
- en: An AWS subscription
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS 订阅
- en: The code files for this chapter can be found at [https://github.com/PacktPublishing/Mastering-Visual-Studio-2022/tree/main/ch08](https://github.com/PacktPublishing/Mastering-Visual-Studio-2022/tree/main/ch08)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在[https://github.com/PacktPublishing/Mastering-Visual-Studio-2022/tree/main/ch08](https://github.com/PacktPublishing/Mastering-Visual-Studio-2022/tree/main/ch08)找到
- en: Exploring .NET Aspire
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 .NET Aspire
- en: In November 2023, as part of .NET 8, Microsoft introduced .NET Aspire. The motivation
    of Microsoft is to make .NET one of the most productive platforms for building
    cloud-native applications. This technology seamlessly integrates with popular
    containerization platforms such as Docker and Kubernetes, facilitating the management
    of applications and their deployment in cloud-native environments. In this section,
    we will explore what .NET Aspire is and how Visual Studio guides us through its
    development process.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 2023 年 11 月，作为 .NET 8 的一部分，微软推出了 .NET Aspire。微软的动机是将 .NET 打造成为构建云原生应用最富有生产力的平台之一。这项技术可以无缝集成到流行的容器化平台，如
    Docker 和 Kubernetes，从而简化应用程序及其在云原生环境中的管理和部署。在本节中，我们将探讨 .NET Aspire 是什么，以及 Visual
    Studio 如何引导我们完成其开发过程。
- en: '.NET Aspire represents a sophisticated suite of tools engineered to facilitate
    the construction of observable, robust, and scalable applications tailored for
    cloud environments. Designed with a focus on cloud-specific requirements, this
    cohesive framework seeks to ease the process of developing cloud-native solutions
    by offering a coherent array of utilities and methodologies. Central aspects of
    .NET Aspire encompass the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Aspire 代表一套复杂的工具集，旨在简化在云环境中构建可观察、健壮和可扩展的应用程序。该框架在设计上侧重于云特定需求，旨在通过提供一系列连贯的实用工具和方法，简化开发云原生解决方案的过程。.NET
    Aspire 的核心方面包括以下内容：
- en: '**A cloud-specific framework** : Tailored to address the unique hurdles encountered
    during cloud application development, .NET Aspire underscores the importance of
    being easily observable, ready for deployment, and capable of operating across
    distributed systems.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**针对云的框架**：专门针对在云应用程序开发过程中遇到的独特挑战，.NET Aspire 强调易于观察、易于部署以及能够在分布式系统中运行的重要性。'
- en: '**Component-based design** : Presented as a series of NuGet packages, these
    components cater to distinct needs within cloud computing, allowing developers
    to incorporate only those elements essential for their projects. This modular
    structure not only enhances adaptability but also boosts productivity.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于组件的设计**：作为一系列 NuGet 包呈现，这些组件满足云计算中的不同需求，允许开发者仅包含他们项目所必需的元素。这种模块化结构不仅提高了适应性，还提高了生产力。'
- en: '**A streamlined development workflow** : By introducing a uniform set of tools
    and practices, .NET Aspire simplifies the assembly of .NET applications suited
    for the cloud. It features pre-configured modules for databases such as Redis
    and PostgreSQL, thereby easing their integration into projects.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简化的开发工作流程**：通过引入一套统一的工具和实践，.NET Aspire 简化了适用于云的 .NET 应用程序的组装。它为数据库如 Redis
    和 PostgreSQL 等提供了预配置的模块，从而简化了它们与项目的集成。'
- en: '**Enhanced developer tools** : The toolkit enriches the development life cycle
    through project templates and integrations with Visual Studio and the .NET CLI,
    making the initiation and administration of applications more straightforward.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**增强的开发工具**：通过项目模板和与 Visual Studio 以及 .NET CLI 的集成，工具包丰富了开发周期，使得应用程序的启动和管理更加直接。'
- en: .NET Aspire allows us to manage the organization and linkage of different parts
    of an application, making the assembly of interconnected services and the identification
    of available resources less cumbersome. It provides standardized components by
    delivering NuGet packages that resolve common issues associated with cloud deployments,
    offering predefined setups for tasks such as monitoring, diagnostics, and data
    transmission.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Aspire 允许我们管理应用程序不同部分的组织和链接，使得组装相互连接的服务和识别可用资源变得更加简便。它通过提供解决与云部署相关常见问题的
    NuGet 包，提供标准化的组件，为诸如监控、诊断和数据传输等任务提供预定义的设置。
- en: By introducing well-structured project templates to enhance the organization
    of applications and expedite the setup phase, and featuring pivotal projects such
    as Application Host and Default Services, .NET Aspire caters to professionals
    looking to construct applications that are scalable, fault-tolerant, and maintainable
    within cloud infrastructures.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 通过引入结构良好的项目模板以增强应用程序的组织并加快设置阶段，以及提供关键项目如应用程序主机和默认服务，.NET Aspire 满足那些希望在云基础设施中构建可扩展、容错和可维护的应用程序的专业人士。
- en: Its dedication to cloud-centric development positions it as a significant asset
    within the .NET community, empowering developers to harness the full potential
    of cloud technologies for their software solutions.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 它对以云为中心的开发的关注使其成为 .NET 社区中的一个重要资产，使开发者能够充分利用云技术为他们的软件解决方案。
- en: Let’s explore what Visual Studio has prepared for us regarding .NET Aspire.
    To do this, we will create a new project with the **.NET Aspire Starter Application**
    template. For this example, we will name it **SampleAspireProject** .
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索 Visual Studio 为我们准备的 .NET Aspire 相关内容。为此，我们将使用 **.NET Aspire 启动应用程序**
    模板创建一个新的项目。在这个例子中，我们将将其命名为 **SampleAspireProject**。
- en: "![Figure 8.1 – The .NET Aspire Starter Application \uFEFFtemplate](img/B22218_08_1.jpg)"
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.1 – .NET Aspire 启动应用程序模板](img/B22218_08_1.jpg)'
- en: Figure 8.1 – The .NET Aspire Starter Application template
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.1 – .NET Aspire 启动应用程序模板
- en: 'When you create a new project, Visual Studio will open an **Overview** page,
    providing links to Microsoft documentation about building and deploying our app
    and service discovery:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个新的项目时，Visual Studio 将打开一个 **概览** 页面，提供有关构建和部署我们的应用程序以及服务发现的 Microsoft
    文档链接：
- en: '![Figure 8.2 – The Aspire Overview page](img/B22218_08_2.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.2 – Aspire 概览页面](img/B22218_08_2.jpg)'
- en: Figure 8.2 – The Aspire Overview page
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.2 – Aspire 概览页面
- en: On the same page, we can find more tabs; the second one is **Connected Services**
    . By clicking on this option, we can access two options that allow us to add service
    dependencies and service references.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一页面上，我们可以找到更多标签页；第二个是 **连接服务**。通过点击此选项，我们可以访问两个选项，允许我们添加服务依赖项和服务引用。
- en: '![Figure 8.3 – Connected Services](img/B22218_08_3.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图8.3 – 连接的服务](img/B22218_08_3.jpg)'
- en: Figure 8.3 – Connected Services
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.3 – 连接的服务
- en: Upon clicking the **Add a service dependency** link, a window opens up that
    allows us to select an Azure service to add to our solution.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**添加服务依赖**链接后，会弹出一个窗口，允许我们选择要添加到解决方案中的Azure服务。
- en: '![Figure 8.4 – Adding a dependency](img/B22218_08_4.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图8.4 – 添加依赖](img/B22218_08_4.jpg)'
- en: Figure 8.4 – Adding a dependency
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.4 – 添加依赖
- en: Note that to be able to complete the process of adding a dependency, we need
    a valid Azure subscription.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，为了能够完成添加依赖的过程，我们需要一个有效的Azure订阅。
- en: Go back to the **Connected Service** , and click on the **Add a service reference**
    link. This will give us access to a window that enables us to select between three
    API specifications – **OpenAPI** , **gRPC** , and **WCF** **Web Service** .
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到**连接的服务**，然后点击**添加服务引用**链接。这将为我们提供一个窗口，使我们能够选择三种API规范之间的选择 – **OpenAPI**、**gRPC**和**WCF
    Web Service**。
- en: '![Figure 8.5 – Adding a service reference](img/B22218_08_5.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图8.5 – 添加服务引用](img/B22218_08_5.jpg)'
- en: Figure 8.5 – Adding a service reference
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.5 – 添加服务引用
- en: 'The template we have used sets up four projects for our solution:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的模板为我们的解决方案设置了四个项目：
- en: '**ApiService** : ASP.NET Core minimal APIs, serving as the backend logic layer'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ApiService**：ASP.NET Core最小API，作为后端逻辑层'
- en: '**AppHost** : This is the project that hosts the configuration of our solution'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AppHost**：这是我们托管解决方案配置的项目'
- en: '**ServiceDefaults** : Represents the shared project that contains default configurations
    and potential objects used across multiple services in the solutions'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ServiceDefaults**：表示包含默认配置和跨多个服务在解决方案中使用的潜在对象的共享项目'
- en: '**Web** : This Blazor project is dedicated to frontend development.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Web**：这是一个Blazor项目，专注于前端开发。'
- en: '![Figure 8.6 – Starter application components](img/B22218_08_6.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图8.6 – 启动应用程序组件](img/B22218_08_6.jpg)'
- en: Figure 8.6 – Starter application components
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.6 – 启动应用程序组件
- en: The **AppHost** project is set as the starring project by default. So, when
    we launch the solution, the .NET Aspire template opens the **SampleAspireApp**
    **dashboard** window.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，**AppHost**项目被设置为启动项目。因此，当我们启动解决方案时，.NET Aspire模板会打开**SampleAspireApp**
    **仪表板**窗口。
- en: '![Figure 8.7 – The .NET Aspire dashboard](img/B22218_08_7.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图8.7 – .NET Aspire仪表板](img/B22218_08_7.jpg)'
- en: Figure 8.7 – The .NET Aspire dashboard
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.7 – .NET Aspire仪表板
- en: The dashboard provides crucial information about our solution through different
    metrics, such as logs, traces, and environment configuration. In the **Resources**
    panel, we can access each endpoint of our solution. In this template project,
    we retrieve **apiservice** and **webfrontend** in the dashboard.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 仪表板通过不同的指标，如日志、跟踪和环境配置，提供了关于我们解决方案的关键信息。在**资源**面板中，我们可以访问我们解决方案的每个端点。在这个模板项目中，我们在仪表板中检索了**apiservice**和**webfrontend**。
- en: After the local development of our cloud-native solution, we can directly publish
    it to our Azure platform. Note that we need an Azure Developer CLI installed.
    To create a publish profile, we can reopen the **Overview** window from the top
    bar menu ( **Project** | **Overview** ).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们云原生解决方案的本地开发完成后，我们可以直接将其发布到我们的Azure平台。请注意，我们需要安装Azure Developer CLI。要创建发布配置文件，我们可以从顶部菜单重新打开**概览**窗口（**项目**
    | **概览**）。
- en: '![Figure 8.8 – Publish profiles](img/B22218_08_8.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图8.8 – 发布配置文件](img/B22218_08_8.jpg)'
- en: Figure 8.8 – Publish profiles
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.8 – 发布配置文件
- en: By using Visual Studio through .NET Aspire, we have set up a cloud-native application
    ready to be deployed. In the next section, we will explore Azure Functions development
    in Visual Studio.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用.NET Aspire中的Visual Studio，我们已经设置了一个准备部署的云原生应用程序。在下一节中，我们将探讨在Visual Studio中开发Azure
    Functions。
- en: Exploring Azure Functions development in Visual Studio
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索在Visual Studio中开发Azure Functions
- en: Visual Studio provides several built-in templates for the Azure platform. As
    Azure Functions is the most popular cloud-native feature of Microsoft, we will
    focus on it in this section.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio为Azure平台提供了几个内置模板。由于Azure Functions是微软最受欢迎的云原生功能，我们将在本节中重点介绍它。
- en: Put simply, Azure Functions is a serverless computing service offered by Microsoft
    Azure that allows developers to run small pieces of code without worrying about
    the underlying infrastructure.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，Azure Functions是微软Azure提供的一种无服务器计算服务，允许开发者运行小块代码，无需担心底层基础设施。
- en: Azure Functions is designed to respond to events from a variety of sources,
    including HTTP requests, timers, database changes, and many other Azure services.
    This event-driven model enables us to build applications that react to real-time
    data changes, automate tasks, and integrate with other systems seamlessly.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Functions 设计用于响应来自各种来源的事件，包括 HTTP 请求、计时器、数据库更改以及许多其他 Azure 服务。这种事件驱动模型使我们能够构建能够对实时数据更改做出反应、自动化任务以及与其他系统无缝集成的应用程序。
- en: First, we need to ensure that the Azure development workload is installed on
    our Visual Studio instance by navigating to the Visual Studio Installer.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要确保 Azure 开发工作负载已安装在我们的 Visual Studio 实例中，方法是导航到 Visual Studio 安装程序。
- en: '![Figure 8.9 – An Azure development workload](img/B22218_08_9.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.9 – Azure 开发工作负载](img/B22218_08_9.jpg)'
- en: Figure 8.9 – An Azure development workload
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.9 – Azure 开发工作负载
- en: Once the workload is installed, we can start by creating a new Azure Functions
    project, and for this example, we will name it **SampleAzureFunction** .
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 工作负载安装完成后，我们可以开始创建一个新的 Azure Functions 项目，在这个例子中，我们将将其命名为 **SampleAzureFunction**。
- en: '![Figure 8.10 – An Azure Function project](img/B22218_08_10.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.10 – Azure Function 项目](img/B22218_08_10.jpg)'
- en: Figure 8.10 – An Azure Function project
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.10 – Azure Function 项目
- en: For the next step, Visual Studio will lead us to an **Additional information**
    window, where we are asked to configure the worker, trigger, and authorization
    to use.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一步中，Visual Studio 将引导我们到一个 **附加信息** 窗口，在那里我们被要求配置工作进程、触发器和授权使用。
- en: '![Figure 8.11 – Choosing an Azure Functions trigger](img/B22218_08_11.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.11 – 选择 Azure Functions 触发器](img/B22218_08_11.jpg)'
- en: Figure 8.11 – Choosing an Azure Functions trigger
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.11 – 选择 Azure Functions 触发器
- en: 'Let’s explore and understand the different trigger options offered by Azure
    Functions:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索和理解 Azure Functions 提供的不同触发器选项：
- en: '**Http trigger** : Allows you to create an HTTP endpoint that can be called
    to execute the function. This is useful for creating RESTful APIs.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HTTP 触发器**：允许您创建一个可以调用来执行函数的 HTTP 端点。这对于创建 RESTful API 很有用。'
- en: '**Http trigger with OpenAPI** : Similar to the HTTP trigger but includes built-in
    support for OpenAPI (formerly Swagger), making it easier to design and document
    APIs.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**带有 OpenAPI 的 HTTP 触发器**：类似于 HTTP 触发器，但包括对 OpenAPI（以前称为 Swagger）的内置支持，这使得设计和记录
    API 更容易。'
- en: '**IoT Hub trigger** : Enables functions to respond to events sent to an IoT
    Hub event stream. Useful for processing telemetry data from IoT devices.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IoT Hub 触发器**：使函数能够响应发送到 IoT Hub 事件流的的事件。适用于处理来自 IoT 设备的遥测数据。'
- en: '**Kafka output** : Writes a message to a Kafka topic. This is used when you
    want to publish messages to a Kafka topic from an Azure Functions.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kafka 输出**：将消息写入 Kafka 主题。当您想从 Azure Function 发布消息到 Kafka 主题时使用。'
- en: '**Kafka trigger** : Consumes messages from a Kafka topic. This is useful for
    processing incoming messages from Kafka topics within an Azure Function.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kafka 触发器**：从 Kafka 主题消费消息。这对于在 Azure Function 内部处理来自 Kafka 主题的传入消息很有用。'
- en: '**Queue trigger** : Executes a function whenever a new message is added to
    an Azure Queue Storage queue. Ideal for processing queued tasks.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**队列触发器**：每当有新消息添加到 Azure Queue Storage 队列时，执行函数。适用于处理队列任务。'
- en: '**RabbitMQ trigger** : Consumes messages from a RabbitMQ queue. This is useful
    for integrating with RabbitMQ-based applications.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RabbitMQ 触发器**：从 RabbitMQ 队列消费消息。这对于与基于 RabbitMQ 的应用程序集成很有用。'
- en: '**SendGrid** : Allows you to send emails directly from an Azure Function using
    SendGrid’s email service. This is particularly useful for sending notifications
    or alerts via email.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SendGrid**：允许您使用 SendGrid 的电子邮件服务直接从 Azure Function 发送电子邮件。这对于通过电子邮件发送通知或警报特别有用。'
- en: '**Service Bus Queue trigger** : Responds to messages from a Service Bus queue.
    This is ideal for processing messages asynchronously.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Service Bus 队列触发器**：响应来自 Service Bus 队列的消息。这对于异步处理消息来说非常理想。'
- en: '**Service Bus Topic trigger** : Responds to messages published to a Service
    Bus topic. This is useful for implementing pub/sub patterns.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Service Bus 主题触发器**：响应发布到 Service Bus 主题的消息。这对于实现发布/订阅模式很有用。'
- en: '**SignalR** : Enables running real-time messaging web apps in a serverless
    environment. It’s great for scenarios requiring real-time updates to clients.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SignalR**：使您能够在无服务器环境中运行实时消息传递 Web 应用程序。对于需要向客户端实时更新数据的场景来说非常好。'
- en: '**SQL input binding** : Retrieves data from a SQL database and passes it to
    a function’s input parameters. This is useful for querying databases and processing
    the results.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SQL 输入绑定**：从 SQL 数据库检索数据并将其传递给函数的输入参数。这对于查询数据库和处理结果很有用。'
- en: '**SQL output binding** : Writes data to a SQL database. This is useful for
    updating databases based on a function’s execution logic.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SQL 输出绑定**：将数据写入 SQL 数据库。这对于根据函数的执行逻辑更新数据库很有用。'
- en: '**Timer trigger** : Runs a function on a schedule, such as every minute, hour,
    or day. This is perfect for periodic tasks such as backups or reports.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定时器触发器**：按照计划运行函数，例如每分钟、每小时或每天。这对于定期任务，如备份或报告，非常合适。'
- en: 'Once we have chosen the function type, we have to select the level of authorization
    to rule our Azure Function. The three types are as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们选择了函数类型，我们必须选择授权级别以控制我们的 Azure 函数。这三种类型如下：
- en: '**Function** : This level restricts access to only those users who have been
    granted specific permissions to invoke a function. It’s typically used when we
    want to control access to our function more granularly than what’s provided by
    the other two levels.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**函数**：此级别限制访问权限仅限于那些已被授予调用函数的特定权限的用户。通常在我们想要比其他两个级别更细致地控制对函数的访问时使用。'
- en: '**Anonymous** : This level allows any client (authenticated or not) to call
    a function without needing to provide credentials. It’s useful for public APIs
    or functions that don’t require authentication.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**匿名**：此级别允许任何客户端（认证或不认证）调用函数，而无需提供凭证。这对于公共 API 或不需要认证的函数很有用。'
- en: '**Admin** : This level grants full administrative privileges to the function,
    allowing it to perform actions on behalf of the caller as if they were logged
    in as an administrator. It should be used cautiously due to its broad permissions.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理员**：此级别授予函数完全管理权限，允许它代表调用者执行操作，就像它们以管理员身份登录一样。由于其广泛的权限，应谨慎使用。'
- en: 'Once we are all set, we can develop the logic of our function, and to respond
    to our stakeholders, the next step is to publish it to our Azure subscription:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们设置完毕，我们就可以开发函数的逻辑，并且为了回应我们的利益相关者，下一步是将它发布到我们的 Azure 订阅中：
- en: Right-click on the project in **Solution Explorer** and select **Publish** .
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **解决方案资源管理器** 中右键单击项目并选择 **发布**。
- en: Then, choose **Azure** as the target and click **Next** . Finally, select **Azure
    Function App (Windows)** for the specific target.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，选择 **Azure** 作为目标并点击 **下一步**。最后，选择 **Azure 函数应用（Windows）** 作为特定目标。
- en: '![Figure 8.12 – Publishing a specific target](img/B22218_08_12.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.12 – 发布特定目标](img/B22218_08_12.jpg)'
- en: Figure 8.12 – Publishing a specific target
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.12 – 发布特定目标
- en: Then, we need to choose a unique name for our function app to ensure that it
    doesn’t duplicate any existing names globally.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要为我们的函数应用选择一个独特的名称，以确保它不会在全球范围内重复任何现有名称。
- en: Next, we’ll select our Azure subscription from the available options. We can
    either pick an existing resource group or create a new one. For the plan type,
    we’ll opt for the **Consumption** plan to guarantee cost-effective execution based
    on actual usage.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将从可用选项中选择我们的 Azure 订阅。我们可以选择一个现有的资源组或创建一个新的资源组。对于计划类型，我们将选择 **消费** 计划，以确保基于实际使用的成本效益执行。
- en: We will choose a region that is geographically close to our users or services
    for better performance. If required, we will set up a general-purpose storage
    account. We’ll also enable **Application Insights** to monitor and diagnose our
    function app.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将选择一个地理位置靠近我们的用户或服务的区域，以获得更好的性能。如果需要，我们将设置一个通用存储账户。我们还将启用 **应用程序洞察** 以监控和诊断我们的函数应用。
- en: During deployment, we need to make sure to select the **Run from package** option.
    This allows our function app to execute directly from the deployment package,
    enhancing performance and simplifying the deployment process. After reviewing
    all our settings, we’ll click **Publish** to begin the deployment. A success message
    will appear once the deployment is completed successfully.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在部署期间，我们需要确保选择 **从包运行** 选项。这允许我们的函数应用直接从部署包中执行，从而提高性能并简化部署过程。在审查完所有设置后，我们将点击
    **发布** 以开始部署。一旦部署成功完成，将显示一条成功消息。
- en: Finally, we will go to the Azure portal and navigate to our function app to
    ensure that it is running correctly. Through the portal, we can monitor logs,
    test endpoints, and manage our function.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将前往 Azure 门户并导航到我们的函数应用，以确保它正在正确运行。通过门户，我们可以监控日志、测试端点并管理我们的函数。
- en: As Azure is part of the Microsoft ecosystem, other cloud platforms can be used
    in our overall enterprise solution. Next, let’s begin to explore how we can enhance
    our Google Cloud Platform development with Visual Studio.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Azure 是微软生态系统的一部分，我们可以在整体企业解决方案中使用其他云平台。接下来，让我们开始探索如何使用 Visual Studio 增强我们的
    Google Cloud Platform 开发。
- en: Exploring Google Cloud Tools for Visual Studio 2022
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索适用于 Visual Studio 2022 的 Google Cloud 工具
- en: '**Google Cloud Platform** ( **GCP** ) is a public cloud computing service developed
    by Google, offering a variety of cloud-based solutions. Just like other cloud
    platforms, these include services for computing, storage, networking, big data,
    machine learning, and the **Internet of Things** ( **IoT** ). GCP allows us and
    businesses to create and deploy applications and services using Google’s robust
    infrastructure, benefiting from the scalability, flexibility, and security of
    Google’s worldwide network. In this section, we will explore the GCP extension
    for Visual Studio 2022.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**Google Cloud Platform**（**GCP**）是 Google 开发的一种公共云计算服务，提供各种基于云的解决方案。就像其他云平台一样，这些包括计算、存储、网络、大数据、机器学习和**物联网**（**IoT**）等服务。GCP
    允许我们和企业使用 Google 的强大基础设施创建和部署应用程序和服务，并从 Google 全球网络的扩展性、灵活性和安全性中受益。在本节中，我们将探讨
    Visual Studio 2022 的 GCP 扩展。'
- en: 'First, we need to install the extension by going to **Extension Manager** through
    the top-bar menu ( **Extension** | **Manage extensions…** ) and searching for
    **Google** **Cloud Tools** :'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要通过顶栏菜单中的**扩展管理器**（**扩展** | **管理扩展…**）安装扩展，并搜索**Google Cloud Tools**：
- en: '![Figure 8.13 – Extension Manager | Google Cloud Tools](img/B22218_08_13.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.13 – 扩展管理器 | Google Cloud Tools](img/B22218_08_13.jpg)'
- en: Figure 8.13 – Extension Manager | Google Cloud Tools
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.13 – 扩展管理器 | Google Cloud Tools
- en: As with each installation of new Visual Studio extensions, we need to close
    our instance after we have clicked on the **Install** button to launch the beginning
    of the modification.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 就像安装每个新的 Visual Studio 扩展一样，我们在点击**安装**按钮启动修改的开始后，需要关闭我们的实例。
- en: 'Since we have installed the Google Cloud Tools extension, we can connect to
    our Google account to deploy our project to App Engine. We achieve that by launching
    Google Cloud Explorer through the top-bar menu ( **Tools** | **Google Cloud Tools**
    | **Show Google** **Cloud Explorer** ):'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经安装了 Google Cloud Tools 扩展，我们可以通过连接到我们的 Google 账户来将我们的项目部署到 App Engine。我们通过在顶栏菜单中启动
    Google Cloud Explorer 来实现这一点（**工具** | **Google Cloud Tools** | **显示 Google Cloud
    Explorer**）：
- en: '![Figure 8.14 – Show Google Cloud Explorer](img/B22218_08_14.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.14 – 显示 Google Cloud Explorer](img/B22218_08_14.jpg)'
- en: Figure 8.14 – Show Google Cloud Explorer
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.14 – 显示 Google Cloud Explorer
- en: That opens up a new window to enter the information for our valid Google account.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开一个新窗口，用于输入我们有效 Google 账户的信息。
- en: '![Figure 8.15 – Add a new account](img/B22218_08_15.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.15 – 添加新账户](img/B22218_08_15.jpg)'
- en: Figure 8.15 – Add a new account
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.15 – 添加新账户
- en: 'We now have an integrated deployment assistant within the extension that deploys
    your application to the following compatible targets:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在在扩展中拥有一个集成的部署助手，可以将您的应用程序部署到以下兼容目标：
- en: Compute Engine for ASP.NET applications
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于 ASP.NET 应用程序的 Compute Engine
- en: Flexible App Engine and Google Kubernetes Engine for ASP.NET Core applications
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 适用于 ASP.NET Core 应用程序的灵活 App Engine 和 Google Kubernetes Engine
- en: The deployment assistant automatically detects compatible targets for our project
    and guides us through the deployment process.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 部署助手会自动检测与我们的项目兼容的兼容目标，并引导我们完成部署过程。
- en: The deployment assistant can be called by selecting **Tools** | **Google Cloud
    Tools** | **Publish [PROJECT-NAME] to Google Cloud** , or by right-clicking on
    the project node in **Solution Explorer** and clicking on **Publish [PROJECT-NAME]**
    **to Google** .
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过选择**工具** | **Google Cloud Tools** | **将 [项目名称] 发布到 Google Cloud**，或者在**解决方案资源管理器**中的项目节点上右键单击并点击**将
    [项目名称] 发布到 Google**，或者通过选择**工具** | **Google Cloud Tools** | **发布 [项目名称]** **到
    Google** 来调用部署助手。
- en: Note that the **Publish [PROJECT-NAME] to Google Cloud** menu item will only
    be enabled if the start-up project of the solution is compatible with Google Cloud.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果解决方案的启动项目与 Google Cloud 兼容，则**将 [项目名称] 发布到 Google Cloud** 菜单项才会启用。
- en: The deployment assistant displays the deployment targets on Google Cloud that
    are compatible with the selected project.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 部署助手显示与所选项目兼容的 Google Cloud 部署目标。
- en: If we wish to change the project, we can open Cloud Explorer by clicking on
    **Tools** | **Google Cloud Tools** | **Open Cloud Explorer** and select the project
    we want to deploy.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想更改项目，可以通过点击**工具** | **Google Cloud Tools** | **打开云资源管理器**来打开云资源管理器，并选择我们想要部署的项目。
- en: '![Figure 8.16 – Choosing a product to publish](img/B22218_08_16.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图8.16 – 选择要发布的产品](img/B22218_08_16.jpg)'
- en: Figure 8.16 – Choosing a product to publish
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.16 – 选择要发布的产品
- en: 'Note that ASP.NET 4.x applications only run on Windows VMs on Compute Engine.
    To deploy our ASP.NET 4.x application on Compute Engine, follow these steps:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，ASP.NET 4.x应用程序仅在Compute Engine上的Windows VM上运行。要将我们的ASP.NET 4.x应用程序部署到Compute
    Engine，请按照以下步骤操作：
- en: Open the deployment assistant by clicking on **Tools** | **Google Cloud Tools**
    | **Publish [PROJECT-NAME] to** **Google Cloud** .
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击**工具** | **Google Cloud Tools** | **将[项目名称]发布到** **Google Cloud** 来打开部署助手。
- en: Select **Compute Engine** .
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**计算引擎**。
- en: Select the **Windows VM** instance and deployment credentials. The **Windows
    VM** must run **Internet Information Services** ( **IIS** )and be able to run
    ASP.NET 4.x applications, such as a VM ASP.NET created by the deployment manager.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Windows VM**实例和部署凭据。**Windows VM**必须运行**互联网信息服务**（**IIS**）并能运行ASP.NET 4.x应用程序，例如由部署管理器创建的VM
    ASP.NET。
- en: Select the credentials for deployment. To create Windows credentials, click
    on **Manage Credentials** .
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择部署的凭据。要创建Windows凭据，请点击**管理凭据**。
- en: Click on **Publish** to create our application and deploy it to the selected
    VM.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**发布**以创建我们的应用程序并将其部署到所选的虚拟机。
- en: The deployment progress is displayed in the Visual Studio output window, and
    a progress indicator is shown in the system tray status bar of Visual Studio.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 部署进度在Visual Studio输出窗口中显示，并在Visual Studio的系统托盘状态栏中显示进度指示器。
- en: The Deployment of ASP.NET Core applications can be run in a Docker container
    so that your application can be deployed in the flexible App Engine and **Google
    Kubernetes Engine** ( **GKE** ) environments.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core应用程序的部署可以在Docker容器中运行，这样您的应用程序就可以在灵活的App Engine和**Google Kubernetes
    Engine**（**GKE**）环境中部署。
- en: 'To deploy to the flexible environment, follow these steps:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 要部署到灵活环境，请按照以下步骤操作：
- en: Open the deployment assistant by clicking on **Tools** | **Google Cloud Tools**
    | **Publish [PROJECT-NAME] to** **Google Cloud** .
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击**工具** | **Google Cloud Tools** | **将[项目名称]发布到** **Google Cloud** 来打开部署助手。
- en: Select **App Engine Flex** to deploy the app to App Engine.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**App Engine Flex**以将应用程序部署到App Engine。
- en: Enter the name of our application’s version and traffic management choice.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入我们应用程序版本的名称和流量管理选择。
- en: '![Figure 8.17 – Publishing AspNetCore to App Engine](img/B22218_08_17.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![图8.17 – 将AspNetCore发布到App Engine](img/B22218_08_17.jpg)'
- en: Figure 8.17 – Publishing AspNetCore to App Engine
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.17 – 将AspNetCore发布到App Engine
- en: The default version name is based on the current system time. We can specify
    another name. Note that, if we specify an existing version name, the previous
    version will be overwritten. The **Promoting version** checkbox allows us to choose
    whether this application version should receive 100% of the traffic. If this box
    is checked, the new application will receive all the traffic immediately after
    deployment.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 默认版本名称基于当前系统时间。我们可以指定另一个名称。请注意，如果我们指定了一个已存在的版本名称，之前的版本将被覆盖。**推广版本**复选框允许我们选择是否让这个应用程序版本接收100%的流量。如果此框被勾选，新应用程序将在部署后立即接收所有流量。
- en: Click on **Publish** to create your application and deploy it to the flexible
    App Engine environment.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**发布**以创建您的应用程序并将其部署到灵活的App Engine环境。
- en: And there we go – our application is deployed, and the progress is displayed
    in the Visual Studio output window.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样 – 我们的应用程序已部署，进度在Visual Studio输出窗口中显示。
- en: 'To deploy to **GKE** , follow these steps:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 要部署到**GKE**，请按照以下步骤操作：
- en: Open the deployment assistant by clicking on **Tools** | **Google Cloud Tools**
    | **Publish [PROJECT-NAME] to** **Google Cloud** .
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击**工具** | **Google Cloud Tools** | **将[项目名称]发布到** **Google Cloud** 来打开部署助手。
- en: Select **Container Engine** to deploy our app.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**容器引擎**以部署我们的应用程序。
- en: Select a cluster for deployment, and enter the deployment name of your application,
    its version, and the number of replicated instances.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择部署的集群，并输入您应用程序的部署名称、版本和副本实例数量。
- en: '![Figure 8.18 – Publishing AspNetCore to Kubernetes Engine](img/B22218_08_18.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![图8.18 – 将AspNetCore发布到Kubernetes引擎](img/B22218_08_18.jpg)'
- en: Figure 8.18 – Publishing AspNetCore to Kubernetes Engine
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.18 – 将AspNetCore发布到Kubernetes引擎
- en: 'Note the three checkboxes allowing us to fine-tune our service:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 注意三个复选框，允许我们微调我们的服务：
- en: The **Expose a service** option refers to the ability to make our application
    accessible from outside the Kubernetes cluster. Essentially, it creates a Kubernetes
    service that exposes our application to external traffic.
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**暴露服务**选项指的是使我们的应用可以从 Kubernetes 集群外部访问的能力。本质上，它创建了一个 Kubernetes 服务，将我们的应用暴露给外部流量。'
- en: The **Make service public** option is closely related to **Expose a service**
    and specifically refers to making the exposed service publicly accessible on the
    internet. When we choose to expose our application as a service and make it public,
    GKE assigns a public IP address to your service, allowing external clients to
    access it.
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使服务公开**选项与**暴露服务**密切相关，具体指的是使公开的服务在互联网上公开可访问。当我们选择将应用作为服务公开并使其公开时，GKE 为我们的服务分配一个公共
    IP 地址，允许外部客户端访问它。'
- en: Selecting **Open site after publishing** will automatically open a web browser
    window pointing to the URL of our newly deployed application.
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择**发布后打开站点**将自动打开一个指向我们新部署的应用程序 URL 的网页浏览器窗口。
- en: 'To create a cluster, follow these steps:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建集群，请按照以下步骤操作：
- en: Click on **Create new cluster** . We will be redirected to the cluster creation
    page in the Google Cloud console.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建新集群**。我们将被重定向到 Google Cloud 控制台中集群创建页面。
- en: To display the cluster in Visual Studio, click on **Refresh clusters** .
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在 Visual Studio 中显示集群，请点击**刷新集群**。
- en: The deployment name is used when creating the Kubernetes deployment or, if selected,
    the name of the Kubernetes service that will run our application on the cluster.
    We can modify the name to make it more descriptive.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 部署名称用于创建 Kubernetes 部署，或者如果选中，将是运行在集群上应用的服务名称。我们可以修改名称使其更具描述性。
- en: Note that if we use a name that already exists, the old deployment will be updated
    instead of creating a new one. The default version name is based on the current
    system time. We can specify another name.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果我们使用一个已存在的名称，旧部署将被更新而不是创建一个新的。默认版本名称基于当前系统时间。我们可以指定另一个名称。
- en: We can choose to expose a Kubernetes service on the internet. By exposing a
    public service on the internet, we get a public IP address that we can use to
    access our service outside of our cluster.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以选择将 Kubernetes 服务暴露在互联网上。通过在互联网上公开一个服务，我们获得一个公共 IP 地址，我们可以使用它来访问集群外的服务。
- en: Click on **Publish** .
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**发布**。
- en: And there we go – our application is containerized in a Docker image and deployed
    within our container. If our application is an exposed service, Visual Studio
    will wait for the service’s IP address to become available.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们的应用就被容器化在 Docker 镜像中，并在我们的容器中部署。如果我们的应用是一个公开的服务，Visual Studio 将等待服务的 IP
    地址变得可用。
- en: Now that we have seen how easy it is to deploy our applications to Google Cloud
    Platform gracefully with Google Cloud Tools, we will move on to the cloud platform
    of Amazon through the AWS Toolkit in the next section.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到使用 Google Cloud Tools 将我们的应用程序优雅地部署到 Google Cloud Platform 是多么容易，我们将继续下一节，通过
    AWS Toolkit 探索 Amazon 的云平台。
- en: Exploring the AWS Toolkit
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 AWS Toolkit
- en: The AWS Toolkit for Visual Studio is an extension designed to enhance the development
    experience for creating, testing, and deploying .NET applications on **WS** .
    In this section, we will explore how this extension simplifies working with AWS
    services within Visual Studio.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio 的 AWS Toolkit 是一个扩展，旨在增强在 **WS** 上创建、测试和部署 .NET 应用程序的开发体验。在本节中，我们将探讨该扩展如何简化在
    Visual Studio 中与 AWS 服务一起工作。
- en: First, we need to install the extension by going to **Extension Manager** through
    the top-bar menu ( **Extension** | **Manage extensions…** ) and searching for
    **AWS Toolkit with** **Amazon Q** .
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要通过顶部菜单中的**扩展管理器**（**扩展** | **管理扩展…**）安装扩展，并搜索**AWS Toolkit with Amazon
    Q**。
- en: '![Figure 8.19 – AWS Toolkit with Amazon Q](img/B22218_08_19.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.19 – AWS Toolkit with Amazon Q](img/B22218_08_19.jpg)'
- en: Figure 8.19 – AWS Toolkit with Amazon Q
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.19 – AWS Toolkit with Amazon Q
- en: As with each installation of new Visual Studio extensions, we need to close
    our instance after we have clicked on the **Install** button to launch the begin
    the modification.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 就像安装每个新的 Visual Studio 扩展一样，我们在点击**安装**按钮以启动修改后需要关闭实例。
- en: Key AWS services that are integrated through the toolkit include **Amazon Simple
    Storage Service** ( **S3** ), **Amazone Elastic Compute Cloud** ( **EC2** ), AWS
    Elastic Beanstalk, and Amazon DynamoDB.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 通过工具集集成的关键 AWS 服务包括 **Amazon Simple Storage Service**（**S3**）、**Amazon Elastic
    Compute Cloud**（**EC2**）、AWS Elastic Beanstalk 和 Amazon DynamoDB。
- en: Once the extension is installed, we can start to configure it through the top-bar
    menu – **Extensions** | **AWS Toolkit** | **Getting Started** .
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了扩展，我们就可以通过顶栏菜单开始配置它 – **扩展** | **AWS Toolkit** | **入门**。
- en: '![Figure 8.20 – AWS Toolkit | Getting Started](img/B22218_08_20.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.20 – AWS Toolkit | 入门](img/B22218_08_20.jpg)'
- en: Figure 8.20 – AWS Toolkit | Getting Started
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.20 – AWS Toolkit | 入门
- en: 'That will allow us to connect to our AWS subscription to set up both of the
    main features of the AWS Toolkit:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使我们能够连接到我们的 AWS 订阅，设置 AWS Toolkit 的两个主要功能：
- en: '**AWS Explorer** : A central hub for navigating through AWS services, monitoring
    storage, and managing resources directly from Visual Studio.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS Explorer**：一个用于导航 AWS 服务、监控存储和管理资源的中心枢纽，可以直接从 Visual Studio 进行操作。'
- en: '**Amazon Q** : Represents a comprehensive suite of AI-powered tools designed
    to facilitate better decision-making, increase productivity, and streamline operations
    across various domains within an organization, leveraging the power of generative
    AI and deep integration with AWS services.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Amazon Q**：代表一套综合的 AI 工具集，旨在通过利用生成式 AI 的力量和与 AWS 服务的深度集成，在组织内部的各种领域内促进更好的决策、提高生产力和简化操作。'
- en: '![Figure 8.21 – AWS Getting Started](img/B22218_08_21.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.21 – AWS 入门](img/B22218_08_21.jpg)'
- en: Figure 8.21 – AWS Getting Started
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.21 – AWS 入门
- en: 'AWS Explorer is designed to provide us with a seamless way to interact with
    various AWS services directly from our development environment. It acts as a bridge
    between the local development environment and the cloud, allowing us to perform
    tasks such as the following:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Explorer 设计用于为我们提供一个无缝的方式，直接从我们的开发环境中与各种 AWS 服务进行交互。它充当本地开发环境和云之间的桥梁，使我们能够执行以下任务：
- en: '**Creating and managing AWS resources** : It allows us to easily create new
    instances on Amazon EC2, manage storage buckets in Amazon S3, and configure settings
    without leaving Visual Studio. We can now retrieve four project templates about
    AWS by adding a new project to our solution.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建和管理 AWS 资源**：它允许我们轻松地在 Amazon EC2 上创建新实例，在 Amazon S3 中管理存储桶，并配置设置而无需离开
    Visual Studio。现在，通过向我们的解决方案添加一个新项目，我们可以检索有关 AWS 的四个项目模板。'
- en: '![Figure 8.22 – An AWS project template](img/B22218_08_22.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.22 – AWS 项目模板](img/B22218_08_22.jpg)'
- en: Figure 8.22 – An AWS project template
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.22 – AWS 项目模板
- en: '**Deploying applications** : With support for AWS Lambda, we can deploy functions
    and applications to our AWS subscription.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署应用程序**：通过支持 AWS Lambda，我们可以将函数和应用程序部署到我们的 AWS 订阅。'
- en: '**Monitoring and management** : Through integration with AWS CloudFormation,
    we can manage infrastructure as code, ensuring consistency, repeatability, and
    version control over our AWS deployments.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控和管理**：通过与 AWS CloudFormation 的集成，我们可以以代码的形式管理基础设施，确保 AWS 部署的一致性、可重复性和版本控制。'
- en: 'Let’s consider a scenario where we want to deploy a simple serverless function
    using AWS Lambda with this toolset. Here’s how we might do it:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个场景，其中我们想使用这个工具集通过 AWS Lambda 部署一个简单的无服务器函数。以下是我们可以如何操作：
- en: '**Write the function locally** : First, we write a.NET Core function locally,
    testing it thoroughly to ensure that it works as expected.'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**本地编写函数**：首先，我们在本地编写一个.NET Core 函数，彻底测试以确保其按预期工作。'
- en: '**Configure the deployment settings** : Using AWS Explorer, we configure the
    deployment settings, including selecting the appropriate runtime (.NET Core),
    setting up any necessary environment variables, and specifying the IAM role that
    will execute the function.'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**配置部署设置**：使用 AWS Explorer，我们配置部署设置，包括选择适当的运行时 (.NET Core)、设置任何必要的环境变量，并指定将执行函数的
    IAM 角色。'
- en: '**Deploy the function** : With just a few clicks or commands, we deploy the
    function to AWS Lambda. The AWS Explorer handles the packaging of the function
    code, uploading it to AWS, and configuring the necessary triggers or event sources.'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**部署函数**：只需点击几下或执行一些命令，我们就可以将函数部署到 AWS Lambda。AWS Explorer 负责打包函数代码，将其上传到 AWS，并配置必要的触发器或事件源。'
- en: '**Monitor and manage** : Post-deployment, we can use the AWS Explorer to monitor
    the function’s performance, view logs, and make updates or changes as needed,
    all from within our development environment.'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**监控和管理**：部署后，我们可以使用AWS Explorer来监控函数的性能，查看日志，并根据需要执行更新或更改，所有这些都可以在我们的开发环境中完成。'
- en: This example illustrates how the AWS Explorer integrates with AWS services to
    simplify the development life cycle for .NET Core applications on AWS, providing
    a unified interface to create, deploy, and manage cloud resources.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例说明了AWS Explorer如何与AWS服务集成，简化在AWS上运行的.NET Core应用程序的开发生命周期，提供了一个统一的界面来创建、部署和管理云资源。
- en: Summary
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored the advanced aspects of cloud integration and services
    using Visual Studio 2022. Emphasizing the importance of cloud computing in modern
    application development, we provided a detailed guide on leveraging Visual Studio’s
    powerful tools and extensions to build and manage cloud-based applications directly
    through the IDE.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了使用Visual Studio 2022进行云集成和服务的先进方面。强调云计算在现代应用程序开发中的重要性，我们提供了详细的指南，说明如何利用Visual
    Studio的强大工具和扩展直接通过IDE构建和管理基于云的应用程序。
- en: As we conclude this chapter, we mark the end of the second part of our journey
    in mastering core development skills. From advanced web development to multi-platform,
    machine learning, and now the advanced cloud, we have covered how Visual Studio
    enhances our cutting-edge development.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 随着本章的结束，我们标志着掌握核心开发技能旅程的第二部分的结束。从高级Web开发到多平台、机器学习，再到现在的先进云技术，我们探讨了Visual Studio如何增强我们的前沿开发能力。
- en: In the upcoming chapter, we’ll continue to expand our horizons, delving into
    the world of DevOps, starting by handling advanced Git Workflow directly within
    Visual Studio.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在即将到来的章节中，我们将继续拓展我们的视野，深入DevOps的世界，首先直接在Visual Studio中处理高级Git工作流程。
- en: 'Part 3: Streamlining Collaborative Development with DevOps Practices'
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三部分：通过DevOps实践简化协作开发
- en: In this third part, we focus on how Visual Studio streamlines modern DevOps
    workflows. You’ll explore how Visual Studio simplifies advanced Git workflows,
    automates continuous integration with GitHub Actions, and facilitates seamless
    collaboration through Azure DevOps. Additionally, you’ll leverage Visual Studio’s
    container tools for Docker, empowering you to optimize development, testing, and
    deployment within a unified DevOps environment.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在本第三部分中，我们关注Visual Studio如何简化现代DevOps工作流程。您将了解Visual Studio如何简化高级Git工作流程，通过GitHub
    Actions自动化持续集成，并通过Azure DevOps促进无缝协作。此外，您将利用Visual Studio的Docker容器工具，使您能够在统一的DevOps环境中优化开发、测试和部署。
- en: 'This part has the following chapters:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包含以下章节：
- en: '[*Chapter 9*](B22218_09.xhtml#_idTextAnchor141) , *Handling Advanced Git Workflows*'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第9章*](B22218_09.xhtml#_idTextAnchor141) ，*处理高级Git工作流程*'
- en: '[*Chapter 10*](B22218_10.xhtml#_idTextAnchor152) , *Continuous Integration
    with GitHub Actions*'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第10章*](B22218_10.xhtml#_idTextAnchor152) ，*使用GitHub Actions进行持续集成*'
- en: '[*Chapter 11*](B22218_11.xhtml#_idTextAnchor159) , *Collaborative Development
    with Azure DevOps*'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第11章*](B22218_11.xhtml#_idTextAnchor159) ，*使用Azure DevOps进行协作开发*'
- en: '[*Chapter 12*](B22218_12.xhtml#_idTextAnchor169) , *Visual Studio Container
    Tools for Docker*'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第12章*](B22218_12.xhtml#_idTextAnchor169) ，*Visual Studio Docker容器工具*'
