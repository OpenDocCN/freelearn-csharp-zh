["```cs\nusing System;\nusing System.Collections.Generic;\n\nnamespace Cart.Domain.Entities\n{\n    public class CartSession\n    {\n        public string Id { get; set; }\n        public IList<CartItem> Items { get; set; }\n        public CartUser User { get; set; }\n        public DateTimeOffset ValidityDate { get; set; }\n    }\n}\n```", "```cs\nusing System;\n\nnamespace Cart.Domain.Entities\n{\n    public class CartItem\n    {\n        public Guid CartItemId { get; set; }\n\n        public int Quantity { get; set; }\n\n        public void IncreaseQuantity()\n        {\n            Quantity = Quantity + 1;\n        }\n\n        public void DecreaseQuantity()\n        {\n            Quantity = Quantity - 1;\n        }\n    }\n}\n```", "```cs\nnamespace Cart.Domain.Entities\n{\n    public class CartUser\n    {\n        public string Email { get; set; }\n    }\n}\n```", "```cs\n// src/Cart.Domain/Repositories/ICartRepository.cs\n\nusing System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Cart.Domain.Entities;\n\nnamespace Cart.Domain.Repositories\n{\n    public interface ICartRepository\n    {\n        IEnumerable<string> GetCarts();\n        Task<CartSession> GetAsync(Guid id);\n        Task<CartSession> AddOrUpdateAsync(CartSession item);\n    }\n}\n```", "```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Cart.Domain.Entities;\nusing StackExchange.Redis;\nusing Cart.Domain.Repositories;\nusing Cart.Infrastructure.Configurations;\nusing Microsoft.Extensions.Options;\nusing Newtonsoft.Json;\n\nnamespace Cart.Infrastructure.Repositories\n{\n    public class CartRepository : ICartRepository\n    {\n        private readonly IDatabase _database;\n        private readonly CartDataSourceSettings _settings;\n\n        public CartRepository(IOptions<CartDataSourceSettings> options)\n        {\n            _settings = options.Value;\n\n            var configuration = ConfigurationOptions\n                .Parse(_settings.RedisConnectionString);\n\n            try\n            {\n                _database = ConnectionMultiplexer\n                    .Connect(configuration).GetDatabase();\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(e.ToString());\n            }\n        }\n        ...\n    }\n}\n```", "```cs\n...\n\n        public IEnumerable<string> GetCarts()\n        {\n            var keys = _database.Multiplexer.GetServer\n                (_settings.RedisConnectionString).Keys();\n\n            return keys?.Select(k => k.ToString());\n        }\n\n        public async Task<CartSession> GetAsync(Guid id)\n        {\n            var data = await _database.StringGetAsync(id.ToString());\n\n            return data.IsNullOrEmpty\n                ? null\n                : JsonConvert.DeserializeObject\n                   <Domain.Entities.CartSession>(data);\n        }\n\n        public async Task<CartSession> AddOrUpdateAsync(CartSession \n            item)\n        {\n            var created = await _database.StringSetAsync(item.Id, \n                JsonConvert.SerializeObject(item));\n\n            if (!created) return null;\n\n            return await GetAsync(new Guid(item.Id));\n        }\n..\n```", "```cs\n//Handlers/Cart/CreateCartHandler.cs \nusing System;\n...\n\nnamespace Cart.Domain.Handlers.Cart\n{\n    public class CreateCartHandler : IRequestHandler<CreateCartCommand, CartExtendedResponse>\n    {\n        private readonly ICatalogService _catalogService;\n        private readonly IMapper _mapper;\n        private readonly ICartRepository _repository;\n\n        public CreateCartHandler(ICartRepository repository, IMapper \n            mapper, ICatalogService catalogService)\n        {\n            _repository = repository;\n            _mapper = mapper;\n            _catalogService = catalogService;\n        }\n\n        public async Task<CartExtendedResponse> Handle\n            (CreateCartCommand command, CancellationToken \n            cancellationToken)\n        {\n            var entity = new CartSession\n            {\n                Items = command.ItemsIds.Select(x => new CartItem { \n                  CartItemId = new Guid(x), Quantity = 1 }).ToList(),\n                  User = new CartUser { Email = command.UserEmail },\n                  ValidityDate = DateTimeOffset.Now.AddMonths(2),\n                  Id = Guid.NewGuid().ToString()\n            };\n\n            var result = await _repository.AddOrUpdateAsync(entity);\n\n            var response = _mapper.Map<CartExtendedResponse>(result);\n\n            var tasks = response.Items\n                .Select(async x => await _catalogService\n                .EnrichCartItem(x, cancellationToken));\n\n            response.Items = await Task.WhenAll(tasks);\n\n            return response;\n        }\n    }\n}\n```", "```cs\nusing System.Threading;\n...\n\nnamespace Cart.Domain.Handlers.Cart\n{\n    public class GetCartHandler : IRequestHandler<GetCartCommand, \n        CartExtendedResponse>\n    {\n        private readonly ICatalogService _catalogService;\n        private readonly IMapper _mapper;\n        private readonly ICartRepository _repository;\n\n        public GetCartHandler(ICartRepository repository, IMapper \n            mapper, ICatalogService catalogService)\n        {\n            _repository = repository;\n            _mapper = mapper;\n            _catalogService = catalogService;\n        }\n\n        public async Task<CartExtendedResponse> Handle(GetCartCommand \n            command, CancellationToken cancellationToken)\n        {\n            var result = await _repository.GetAsync(command.Id);\n            var extendedResponse = _mapper.Map<CartExtendedResponse>\n                (result);\n\n            var tasks = extendedResponse.Items\n                .Select(async x => await _catalogService\n                .EnrichCartItem(x, cancellationToken));\n\n            extendedResponse.Items = await Task.WhenAll(tasks);\n            return extendedResponse;\n        }\n    }\n}\n```", "```cs\nusing System.Linq;\n...\n\nnamespace Cart.Domain.Handlers.Cart\n{\n    public class UpdateCartItemQuantity : IRequestHandler\n        <UpdateCartItemQuantityCommand, CartExtendedResponse>\n    {\n        private readonly ICatalogService _catalogService;\n        private readonly IMapper _mapper;\n        private readonly ICartRepository _repository;\n\n        public UpdateCartItemQuantity(ICartRepository repository, \n            IMapper mapper, ICatalogService catalogService)\n        {\n            _repository = repository;\n            _mapper = mapper;\n            _catalogService = catalogService;\n        }\n\n        public async Task<CartExtendedResponse> Handle(UpdateCartItemQuantityCommand command, CancellationToken cancellationToken)\n        {\n            var cartDetail = await \n                _repository.GetAsync(command.CartId);\n\n            if (command.IsAddOperation)\n                cartDetail.Items.FirstOrDefault(x => x.CartItemId == \n                command.CartItemId)?.IncreaseQuantity();\n            else\n                cartDetail.Items.FirstOrDefault(x => x.CartItemId == \n                command.CartItemId)?.DecreaseQuantity();\n\n            var cartItemsList = cartDetail.Items.ToList();\n\n            cartItemsList.RemoveAll(x => x.Quantity <= 0);\n\n            cartDetail.Items = cartItemsList;\n\n            await _repository.AddOrUpdateAsync(cartDetail);\n\n            var response = _mapper.Map<CartExtendedResponse>\n                (cartDetail);\n            var tasks = response.Items\n                .Select(async x => await \n                _catalogService.EnrichCartItem(x, cancellationToken));\n\n            response.Items = await Task.WhenAll(tasks);\n\n            return response;\n        }\n    }\n}\n```", "```cs\nusing System;\nusing System.Threading.Tasks;\nusing MediatR;\nusing Microsoft.AspNetCore.Mvc;\nusing Cart.API.Infrastructure.Filters;\nusing Cart.Domain.Commands.Cart;\n\nnamespace Cart.API.Controllers\n{\n\n    [Route(\"api/cart\")]\n    [ApiController]\n    [JsonException]\n    public class CartController : ControllerBase\n    {\n        private readonly IMediator _mediator;\n\n        public CartController(IMediator mediator)\n        {\n\n            _mediator = mediator;\n        }\n\n          [HttpGet(\"{id:guid}\")]\n        public async Task<IActionResult> GetById(Guid id)\n        {\n            var result = await _mediator.Send(new GetCartCommand { Id = \n                id });\n            return Ok(result);\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> Post(CreateCartCommand \n            request)\n        {\n            var result = await _mediator.Send(request);\n            return CreatedAtAction(nameof(GetById), new { id = \n                result.Id }, null);\n        }\n..\n```", "```cs\n...\n\n    [HttpPut(\"{cartId:guid}/items/{id:guid}\")]\n        public async Task<IActionResult> Put(Guid cartId, Guid id)\n        {\n            var result = await _mediator.Send(new \n                UpdateCartItemQuantityCommand\n            {\n                CartId = cartId,\n                CartItemId = id,\n                IsAddOperation = true\n            });\n            return Ok(result);\n        }\n        [HttpDelete(\"{cartId:guid}/items/{id:guid}\")]\n        public async Task<IActionResult> Delete(Guid cartId, Guid id)\n        {\n            var result = await _mediator.Send(new \n                UpdateCartItemQuantityCommand\n            {\n                CartId = cartId,\n                CartItemId = id,\n                IsAddOperation = false\n            });\n\n            return Ok(result);\n        }\n}\n```", "```cs\nnamespace Cart.Domain.Entities\n{\n    public class CartItem\n    {\n        public string CartItemId { get; set; }\n\n        public int Quantity { get; set; }\n\n        ...\n    }\n}\n```", "```cs\nnamespace Cart.Domain.Responses.Cart\n{\n    public class CartItemResponse\n    {\n        public string CartItemId { get; set; }\n\n        public string Name { get; set; }\n\n        public string Description { get; set; }\n\n        public string LabelName { get; set; }\n\n        public string Price { get; set; }\n\n        public string PictureUri { get; set; }\n\n        public string GenreDescription { get; set; }\n\n        public string ArtistName { get; set; }\n\n        public int Quantity { get; set; }\n    }\n}\n```", "```cs\ndotnet new classlib -n Catalog.API.Client -f netstandard2.1\ndotnet sln ../Catalog.API.sln add Catalog.API.Client \ndotnet new classlib -n Catalog.API.Contract -f netstandard2.1\ndotnet sln ../Catalog.API.sln add Catalog.API.Contract\n\ndotnet add Catalog.API.Client reference Catalog.API.Contract\n```", "```cs\n.\n├── Item\n│   ├── ArtistResponse.cs\n│   ├── GenreResponse.cs\n│   ├── ItemResponse.cs\n│   └── PriceResponse.cs\n├── Catalog.API.Contract.csproj\n├── bin\n└── obj\n```", "```cs\n// /Base/IBaseClient.cs\n\nusing System;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace Catalog.API.Client.Base\n{\n        public interface IBaseClient\n        {\n            Task<T> GetAsync<T>(Uri uri, CancellationToken \n                cancellationToken);\n            Uri BuildUri(string format);\n        }\n}\n\n```", "```cs\n// Resources/ICatalogItemResource.cs\n\nusing System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Catalog.Contract.Item;\n\nnamespace Catalog.API.Client.Resources\n{\n    public interface ICatalogItemResource\n    {\n        Task<ItemResponse> Get(Guid id, CancellationToken \n            cancellationToken = default);\n    }\n}\n\n```", "```cs\n// Resources/CatalogItemResource.cs\n\nusing System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Catalog.API.Client.Base;\nusing Catalog.Domain.Responses;\n\nnamespace Catalog.API.Client.Resources\n{\n    public class CatalogItemResource : ICatalogItemResource\n    {\n        private readonly IBaseClient _client;\n\n        public CatalogItemResource(IBaseClient client)\n        {\n            _client = client;\n        }\n\n        private Uri BuildUri(Guid id, string path = \"\")\n        {\n            return _client.BuildUri(string.Format(\"api/items/{0}\", id, \n                path));\n        }\n\n        public async Task<ItemResponse> Get(Guid id, CancellationToken \n            cancellationToken)\n        {\n            var uri = BuildUri(id);\n            return await _client.GetAsync<ItemResponse>(uri, \n                cancellationToken);\n        }\n    }\n}\n```", "```cs\n// /Base/BaseClient.cs\n\nusing System;\nusing System.Net.Http;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Newtonsoft.Json;\n\nnamespace Catalog.API.Client.Base\n{\n    public class BaseClient : IBaseClient\n    {\n        private readonly HttpClient _client;\n        private readonly string _baseUri;\n\n        public BaseClient(HttpClient client, string baseUri)\n        {\n            _client = client;\n            _baseUri = baseUri;\n        }\n\n        public async Task<T> GetAsync<T>(Uri uri, CancellationToken \n            cancellationToken)\n        {\n            var result = await _client.GetAsync(uri, \n            cancellationToken);\n            result.EnsureSuccessStatusCode();\n\n            return JsonConvert.DeserializeObject<T>(await \n            result.Content.ReadAsStringAsync());\n        }\n\n        public Uri BuildUri(string format)\n        {\n            return new UriBuilder(_baseUri)\n            {\n                Path = format\n            }.Uri;\n        }\n    }\n}\n```", "```cs\n// ICatalogClient.cs\n\nusing Catalog.API.Client.Resources;\n\nnamespace Catalog.API.Client\n{\n    public interface ICatalogClient\n    {\n        ICatalogItemResource Item { get; }\n    }\n}\n\n// CatalogClient.cs\n\nusing System.Net.Http;\nusing Catalog.API.Client.Base;\nusing Catalog.API.Client.Resources;\n\nnamespace Catalog.API.Client\n{\n    public class CatalogClient : ICatalogClient\n    {\n        public ICatalogItemResource Item { get; }\n\n        public CatalogClient(HttpClient client)\n        {\n            Item = new CatalogItemResource(new BaseClient(client, \n            client.BaseAddress.ToString()));\n        }\n    }\n}\n\n```", "```cs\nvar catalogClient = new CatalogClient(new HttpClient());\nvar result = await catalogClient.Item.Get(new Guid(item.CartItemId), cancellationToken);\n```", "```cs\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Cart.Domain.Responses.Cart;\n\nnamespace Cart.Domain.Services\n{\n    public interface ICatalogService\n    {\n        Task<CartItemResponse> EnrichCartItem(CartItemResponse item, \n            CancellationToken cancellationToken);\n    }\n}\n```", "```cs\n<Project Sdk=\"Microsoft.NET.Sdk\">\n\n    <PropertyGroup>\n        <TargetFramework>netcoreapp3.1</TargetFramework>\n    </PropertyGroup>\n\n ...\n\n    <ItemGroup>\n <Reference Include=\"Catalog.API.Client, Version=1.0.0.0, \n        Culture=neutral, PublicKeyToken=null\">\n        <HintPath>ExternalDll\\Catalog.API.Client.dll</HintPath>\n      </Reference>\n      <Reference Include=\"Catalog.API.Contract, Version=1.0.0.0, \n       Culture=neutral, PublicKeyToken=null\">\n        <HintPath>ExternalDll\\Catalog.API.Contract.dll</HintPath> </Reference>\n    </ItemGroup>\n</Project>\n\n```", "```cs\nusing System;\nusing System.Globalization;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Cart.Domain.Responses.Cart;\nusing Cart.Domain.Services;\nusing Catalog.API.Client;\nusing Catalog.API.Contract.Item;\n\nnamespace Cart.Infrastructure.Services\n{\n    public class CatalogService : ICatalogService\n    {\n        private readonly ICatalogClient _catalogClient;\n\n        public CatalogService(ICatalogClient catalogClient)\n        {\n            _catalogClient = catalogClient;\n        }\n\n        public async Task<CartItemResponse> EnrichCartItem\n        (CartItemResponse item, CancellationToken cancellationToken)\n        {\n            try\n            {\n                var result = await _catalogClient.Item.Get(new \n                    Guid(item.CartItemId), cancellationToken);\n                return Map(item, result);\n            }\n            catch (Exception)\n            {\n                return item;\n            }\n        }\n\n        private static CartItemResponse Map(CartItemResponse item, \n            ItemResponse result)\n        {\n            item.Description = result.Description;\n            item.LabelName = result.LabelName;\n            item.Name = result.Name;\n            item.Price = result.Price.Amount.ToString\n                (CultureInfo.InvariantCulture);\n            item.ArtistName = result.Artist.ArtistName;\n            item.GenreDescription = result.Genre.GenreDescription;\n            item.PictureUri = result.PictureUri;\n\n            return item;\n        }\n    }\n}\n```", "```cs\nvar result = await _catalogClient.Item.Get(new Guid(item.CartItemId), cancellationToken);\n```", "```cs\nusing System.Linq;\n...\n\nnamespace Cart.Domain.Handlers.Cart\n{\n    public class GetCartHandler : IRequestHandler<GetCartCommand, \n        CartExtendedResponse>\n    {\n        private readonly ICatalogService _catalogService;\n        private readonly IMapper _mapper;\n        private readonly ICartRepository _repository;\n\n        public GetCartHandler( ICartRepository repository, IMapper \n            mapper, ICatalogService catalogService)\n        {\n            _repository = repository;\n            _mapper = mapper;\n            _catalogService = catalogService;\n        }\n\n        public async Task<CartExtendedResponse> Handle(GetCartCommand \n        command, CancellationToken cancellationToken)\n        {\n            var result = await _repository.GetAsync(command.Id);\n            var extendedResponse = _mapper.Map<CartExtendedResponse>\n                (result);\n\n            var tasks = extendedResponse.Items\n                .Select(async x => await \n                _catalogService.EnrichCartItem(x, cancellationToken));\n\n            extendedResponse.Items = await Task.WhenAll(tasks);\n            return extendedResponse;\n        }\n    }\n}\n```", "```cs\nusing System;\nusing Microsoft.Extensions.DependencyInjection;\nusing Cart.Domain.Services;\nusing Cart.Services;\nusing Catalog.API.Client;\n\nnamespace Cart.Infrastructure\n{\n    public static class CatalogServiceExtensions\n    {\n        public static IServiceCollection AddCatalogService(this \n        IServiceCollection services, Uri uri)\n        {\n           services.AddScoped<ICatalogClient>(x => new \n                CatalogClient(uri));\n services.AddScoped<ICatalogService, CatalogService>();\n\n            return services;\n        }\n    }\n```", "```cs\n...\n\n    services.AddHttpClient<IMyService, MyService>()\n        .AddPolicyHandler(RetryPolicy());\n\n...\n\nstatic IAsyncPolicy<HttpResponseMessage> RetryPolicy()\n{\n    return HttpPolicyExtensions\n        .HandleTransientHttpError()\n .OrResult(msg => msg.StatusCode == \n           System.Net.HttpStatusCode.NotFound)\n .WaitAndRetryAsync(6, retryAttempt =>             \n            TimeSpan.FromSeconds(Math.Pow(2,retryAttempt)));\n}\n\n```", "```cs\ndotnet add package Polly\n```", "```cs\nusing System;\nusing System.Net;\nusing System.Net.Http;\nusing Polly;\nusing Polly.Extensions.Http;\n\nnamespace Cart.Infrastructure.Extensions.Policies\n{\n    public static class CatalogServicePolicies\n    {\n        public static IAsyncPolicy<HttpResponseMessage> RetryPolicy()\n        {\n            return HttpPolicyExtensions\n                .HandleTransientHttpError()\n                .OrResult(msg => msg.StatusCode == \n                    HttpStatusCode.NotFound)\n                .WaitAndRetryAsync(3, retryAttempt => \n                  TimeSpan.FromSeconds(Math.Pow(2, retryAttempt)));\n        }\n\n        public static IAsyncPolicy<HttpResponseMessage> \n        CircuitBreakerPolicy()\n        {\n            return HttpPolicyExtensions\n                .HandleTransientHttpError()\n                .CircuitBreakerAsync(3, TimeSpan.FromMinutes(1));\n        }\n    }\n} \n```", "```cs\npublic static class CatalogServiceExtensions\n{\n    public static IServiceCollection AddCatalogService(this \n    IServiceCollection services, Uri uri)\n    {\n        services.AddScoped<ICatalogService, CatalogService>();\n\n        services.AddHttpClient<ICatalogClient, CatalogClient>(client =>\n            {\n                client.BaseAddress = uri;\n            })\n            .SetHandlerLifetime(TimeSpan.FromMinutes(2)) \n            .AddPolicyHandler(CatalogServicePolicies.RetryPolicy())\n .AddPolicyHandler(CatalogServicePolicies.\n             CircuitBreakerPolicy());\n\n        return services;\n    }\n}\n```", "```cs\nversion: \"3.7\"\nservices:\n    ...        \n catalog_esb:\n    container_name: catalog_esb\n    image: rabbitmq:3-management-alpine\n    ports:\n      - 5672:5672\n      - 15672:15672\n    networks:\n      - my_network\n    ...\nnetworks:\n    my_network:\n        driver: bridge\n```", "```cs\ndotnet add package RabbitMQ.Client \n```", "```cs\nnamespace Catalog.Domain.Events\n{\n    public class ItemSoldOutEvent\n    {\n        public string Id { get; set; }\n    }\n}\n```", "```cs\nnamespace Catalog.Domain.Configurations\n{\n    public class EventBusSettings\n    {\n        public string HostName { get; set; }\n        public string User { get; set; }\n        public string Password { get; set; }\n        public string EventQueue { get; set; }\n    }\n}\n```", "```cs\nusing Catalog.Domain.Configurations;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing RabbitMQ.Client;\n\nnamespace Catalog.Infrastructure.Extensions\n{\n    public static class EventsExtensions\n    {\n        public static IServiceCollection AddEventBus(this \n            IServiceCollection services, IConfiguration configuration)\n        {\n            var config = new EventBusSettings();\n            configuration.Bind(\"EventBus\", config);\n            services.AddSingleton(config);\n\n            ConnectionFactory factory = new ConnectionFactory\n            {\n                HostName = config.HostName,\n                UserName = config.User,\n                Password = config.Password\n            };\n\n            services.AddSingleton(factory);\n            return services;\n        }\n    }\n}\n```", "```cs\nusing Catalog.Domain.Events;\nusing RabbitMQ.Client;\n\nnamespace Catalog.Domain.Services\n{\n    public class ItemService : IItemService\n    {\n        private readonly IItemMapper _itemMapper;\n        private readonly IItemRepository _itemRepository;\n private readonly ConnectionFactory _eventBusConnectionFactory;\n private readonly ILogger<ItemService> _logger;\n        private readonly EventBusSettings _settings;\n\n        public ItemService(IItemRepository itemRepository, IItemMapper \n            itemMapper,\n            ConnectionFactory eventBusConnectionFactory, \n            ILogger<ItemService> logger, EventBusSettings settings)\n        {\n            _itemRepository = itemRepository;\n            _itemMapper = itemMapper;\n _eventBusConnectionFactory = eventBusConnectionFactory;\n            _logger = logger;\n            _settings = settings;\n        }\n\n        ...\n\n        public async Task<ItemResponse> DeleteItemAsync(DeleteItemRequest request,\n            CancellationToken cancellationToken = default)\n        {\n            if (request?.Id == null) throw new ArgumentNullException();\n\n            var result = await _itemRepository.GetAsync(request.Id);\n            result.IsInactive = false;\n\n            _itemRepository.Update(result);\n            await _itemRepository.UnitOfWork.\n                SaveChangesAsync(cancellationToken);\n\n            SendDeleteMessage(new ItemSoldOutEvent { Id = request.Id.ToString() });\n            return _itemMapper.Map(result);\n        }\n\n private void SendDeleteMessage(ItemSoldOutEvent message)\n        {\n            try\n            {\n                var connection = _eventBusConnectionFactory.\n                  CreateConnection();\n\n                using var channel = connection.CreateModel();\n                channel.QueueDeclare(queue: _settings.EventQueue, true, \n                    false);\n\n                var body = Encoding.UTF8.GetBytes\n                    (JsonSerializer.Serialize(message));\n\n                channel.ConfirmSelect();\n                channel.BasicPublish(exchange: \"\", routingKey: \n                    _settings.EventQueue, body: body);\n                channel.WaitForConfirmsOrDie();\n            }\n            catch (Exception e)\n            {\n                _logger.LogWarning(\"Unable to initialize the event bus: \n                    {message}\", e.Message);\n            }\n        }\n    }\n}\n```", "```cs\npublic void ConfigureServices(IServiceCollection services)\n{\n        ... \n        services.AddEventBus(Configuration);\n}\n```", "```cs\n...   \n \"EventBus\": {\n        \"HostName\": \"catalog_esb\",\n        \"User\": \"guest\",\n        \"Password\": \"guest\",\n        \"EventQueue\": \"ItemSoldOut\"\n    }\n...\n```", "```cs\nversion: \"3.7\"\nservices:\n    cart_api:\n        container_name: cart_api\n        build:\n            context: .\n        env_file:\n            - .env\n        networks:\n            - my_network\n        ports:\n            - 5002:5002\n        depends_on:\n            - cart_db\n\n    cart_db:\n        container_name: cart_db\n        networks:\n            - my_network\n        env_file:\n            - .env\n        ports:\n            - 6378:6378\n        image: redis:alpine\n\nnetworks:\n    my_network:\n        driver: bridge\n```", "```cs\nFROM mcr.microsoft.com/dotnet/core/aspnet:3.1 AS base\nWORKDIR /app\nEXPOSE 5002\n\nFROM mcr.microsoft.com/dotnet/core/sdk:3.1 AS build\nWORKDIR /project\n\nCOPY [\"/src/Cart.API/Cart.API.csproj\", \"/src/Cart.API/\"]\nRUN dotnet restore \"/src/Cart.API/Cart.API.csproj\"\n\nCOPY . .\nWORKDIR \"/project/src/Cart.API\"\nRUN dotnet build \"Cart.API.csproj\" -c Release -o /app/build\n\nFROM build AS publish\nRUN dotnet publish \"Cart.API.csproj\" -c Release -o /app/publish\n\nFROM base AS final\nWORKDIR /app\n\nCOPY --from=publish /app/publish .\nENTRYPOINT [\"dotnet\", \"Cart.API.dll\"]\n```", "```cs\nCOMPOSE_PROJECT_NAME=store\nASPNETCORE_URLS=http://*:5002\nASPNETCORE_ENVIRONMENT=Integration\n```", "```cs\nPOST /api/genre HTTP/1.1\nHost: localhost:5000\nContent-Type: application/json\n{\n \"genreDescription\": \"R&B\"\n}\n\nPOST /api/artist HTTP/1.1\nHost: localhost:5000\nContent-Type: application/json\n{\n    \"artistName\": \"Anderson .Paak\"\n}\n```", "```cs\nPOST /api/items HTTP/1.1\nHost: localhost:5000\nContent-Type: application/json\n{\n \"name\": \"Test\",\n \"description\": \"Description\",\n \"labelName\": \"Label\",\n \"price\": {\n \"currency\": \"EUR\",\n \"amount\": 34.3\n },\n \"pictureUri\": \"\",\n \"releaseDate\": \"2019-11-21T16:18:42+00:00\",\n \"format\": \"\",\n \"availableStock\": 4,\n \"genreId\":\"<genre_id>\",\n \"artistId\":\"<artist_id>\"\n}\n```", "```cs\nPOST /api/cart/ HTTP/1.1\nHost: localhost:5002\nContent-Type: application/json\n{\n \"ItemsIds\": [\"<item_id>\"],\n \"UserEmail\":\"youremail@gmail.com\"\n}\n```", "```cs\nGET /api/cart/<cart_id> HTTP/1.1\nHost: localhost:5002\ncache-control: no-cache\n```"]