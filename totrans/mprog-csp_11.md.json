["```cs\npublic interface IImplementationsOf<T> : IEnumerable<Type>\n    where T : class\n{\n}\n```", "```cs\npublic class ImplementationsOf<T> : IImplementationsOf<T>\n    where T : class\n{\n    readonly IEnumerable<Type> _types;\n    public ImplementationsOf(ITypes types)\n    {\n        _types = types.FindMultiple<T>();\n    }\n    public IEnumerator<Type> GetEnumerator()\n    {\n        return _types.GetEnumerator();\n    }\n    IEnumerator IEnumerable.GetEnumerator()\n    {\n        return _types.GetEnumerator();\n    }\n}\n```", "```cs\npublic interface IInstancesOf<T> : IEnumerable<T>\n    where T : class\n{\n}\n```", "```cs\npublic class InstancesOf<T> : IInstancesOf<T>\n    where T : class\n{\n    readonly IEnumerable<Type> _types;\n    readonly IServiceProvider _serviceProvider;\n    public InstancesOf(ITypes types,\n      IServiceProvider serviceProvider)\n    {\n        _types = types.FindMultiple<T>();\n        _serviceProvider = serviceProvider;\n    }\n    public IEnumerator<T> GetEnumerator()\n    {\n        foreach (var type in _types) yield return\n          (T)_serviceProvider.GetService(type)!;\n    }\n    IEnumerator IEnumerable.GetEnumerator()\n    {\n        foreach (var type in _types) yield return\n          _serviceProvider.GetService(type);\n    }\n}\n```", "```cs\npublic static IServiceCollection AddSelfBinding(this IServiceCollection services, ITypes types)\n{\n    const TypeAttributes staticType =\n      TypeAttributes.Abstract | TypeAttributes.Sealed;\n    types.All.Where(_ =>\n        (_.Attributes & staticType) != staticType &&\n        !_.IsInterface &&\n        !_.IsAbstract &&\n        services.Any(s => s.ServiceType !=\n          _)).ToList().ForEach(_ =>\n    {\n        var __ = _.HasAttribute<SingletonAttribute>() ?\n            services.AddSingleton(_, _) :\n            services.AddTransient(_, _);\n    });\n    return services;\n}\n```", "```cs\nnamespace Fundamentals.Compliance;\npublic record ComplianceMetadataType(Guid Value) : ConceptAs<Guid>(Value)\n{\n    public static readonly ComplianceMetadataType PII = new(Guid.Parse(\"cae5580e-83d6-44dc-9d7a-a72e8a2f17d7\"));\n    public static implicit operator\n      ComplianceMetadataType(string value) =>\n      new(Guid.Parse(value));\n    public static implicit operator\n      ComplianceMetadataType(Guid value) => new(value);\n}\n```", "```cs\nnamespace Fundamentals.Compliance;\npublic record ComplianceMetadata(ComplianceMetadataType MetadataType, string Details);\n```", "```cs\nnamespace Fundamentals.Compliance;\npublic interface ICanProvideComplianceMetadataForType\n{\n    bool CanProvide(Type type);\n    ComplianceMetadata Provide(Type type);\n}\n```", "```cs\nnamespace Fundamentals.Compliance;\npublic interface ICanProvideComplianceMetadataForProperty\n{\n    bool CanProvide(PropertyInfo property);\n    ComplianceMetadata Provide(PropertyInfo property);\n}\n```", "```cs\nnamespace Fundamentals.Compliance;\npublic interface IComplianceMetadataResolver\n{\n    bool HasMetadataFor(Type type);\n    bool HasMetadataFor(PropertyInfo property);\n    IEnumerable<ComplianceMetadata> GetMetadataFor(Type\n      type);\n    IEnumerable<ComplianceMetadata>\n      GetMetadataFor(PropertyInfo property);\n}\n```", "```cs\nnamespace Fundamentals.Compliance;\npublic class NoComplianceMetadataForType : Exception\n{\n    public NoComplianceMetadataForType(Type type)\n        : base($\"Types '{type.FullName}'  does not have any\n        compliance metadata.\")\n    {\n    }\n}\n```", "```cs\nnamespace Fundamentals.Compliance;\npublic class NoComplianceMetadataForProperty : Exception\n{\n    public NoComplianceMetadataForProperty(PropertyInfo\n      property)\n        : base($\"Property '{property.Name}' on type\n          '{property.DeclaringType?.FullName}' does not\n          have any compliance metadata.\")\n    {\n    }\n}\n```", "```cs\nnamespace Fundamentals.Compliance;\npublic class ComplianceMetadataResolver : IComplianceMetadataResolver\n{\n    readonly IEnumerable<\n      ICanProvideComplianceMetadataForType> _typeProviders;\n    readonly IEnumerable<\n      ICanProvideComplianceMetadataForProperty>\n      _propertyProviders;\n    public ComplianceMetadataResolver(\n        IInstancesOf<ICanProvideComplianceMetadataForType>\n          typeProviders,\n        IInstancesOf<\n          ICanProvideComplianceMetadataForProperty>\n          propertyProviders)\n    {\n        _typeProviders = typeProviders.ToArray();\n        _propertyProviders = propertyProviders.ToArray();\n    }\n}\n```", "```cs\npublic bool HasMetadataFor(Type type) => _typeProviders.Any(_ => _.CanProvide(type));\npublic IEnumerable<ComplianceMetadata> GetMetadataFor(Type type)\n{\n    ThrowIfNoComplianceMetadataForType(type);\n    return _typeProviders\n        .Where(_ => _.CanProvide(type))\n        .Select(_ => _.Provide(type))\n        .ToArray();\n}\nvoid ThrowIfNoComplianceMetadataForType(Type type)\n{\n    if (!HasMetadataFor(type))\n    {\n        throw new NoComplianceMetadataForType(type);\n    }\n}\n```", "```cs\npublic bool HasMetadataFor(PropertyInfo property) => _propertyProviders.Any(_ => _.CanProvide(property));\npublic IEnumerable<ComplianceMetadata> GetMetadataFor(PropertyInfo property)\n{\n    ThrowIfNoComplianceMetadataForProperty(property);\n    return _propertyProviders\n        .Where(_ => _.CanProvide(property))\n        .Select(_ => _.Provide(property))\n        .ToArray();\n}\nvoid ThrowIfNoComplianceMetadataForProperty(PropertyInfo property)\n{\n    if (!HasMetadataFor(property))\n    {\n        throw new\n          NoComplianceMetadataForProperty(property);\n    }\n}\n```", "```cs\nnamespace Fundamentals.Compliance.GDPR;\npublic class PersonalIdentifiableInformationMetadataProvider :  ICanProvideComplianceMetadataForProperty\n{\n    public bool CanProvide(PropertyInfo property) =>\n        property.GetCustomAttribute<PersonalIdentifiableInformationAttribute>() != default ||\n        property.DeclaringType?.GetCustomAttribute<PersonalIdentifiableInformationAttribute>() != default;\n    public ComplianceMetadata Provide(PropertyInfo\n      property)\n    {\n        if (!CanProvide(property))\n        {\n            throw new\n              NoComplianceMetadataForProperty(property);\n        }\n        var details = property.GetCustomAttribute<\n          PersonalIdentifiableInformationAttribute>()!\n          .ReasonForCollecting;\n        return new\n          ComplianceMetadata(ComplianceMetadataType.PII,\n          details);\n    }\n}\n```", "```cs\ndotnet new console\n```", "```cs\ndotnet add package Microsoft.Extensions.Hosting\n```", "```cs\ndotnet add reference ../Fundamentals/Fundamentals.csproj\n```", "```cs\nnamespace Chapter11;\npublic class JournalEntry\n{\n    public string Title { get; set; } = string.Empty;\n    public string Content { get; set; } = string.Empty;\n}\n```", "```cs\nusing Fundamentals.Compliance.GDPR;\nnamespace Chapter11;\npublic class Patient\n{\n    [PersonalIdentifiableInformation(\"Employment records\")]\n    public string FirstName { get; set; } = string.Empty;\n    [PersonalIdentifiableInformation(\"Employment records\")]\n    public string LastName { get; set; } = string.Empty;\n    [PersonalIdentifiableInformation(\"Uniquely identifies\n      the employee\")]\n    public string SocialSecurityNumber { get; set; } =\n      string.Empty;\n    public IEnumerable<JournalEntry> JournalEntries { get;\n      set; } = Enumerable.Empty<JournalEntry>();\n}\n```", "```cs\nusing Chapter11;\nusing Fundamentals;\nusing Fundamentals.Compliance;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nvar host = Host.CreateDefaultBuilder()\n    .ConfigureServices((context, services) =>\n    {\n        var types = new Types();\n        services.AddSingleton<ITypes>(types);\n        services.AddBindingsByConvention(types);\n        services.AddSelfBinding(types);\n    })\n    .Build();\n```", "```cs\nvar complianceMetadataResolver = host.Services.\n  GetRequiredService<IComplianceMetadataResolver>();\nvar typeToCheck = typeof(Patient);\nConsole.WriteLine($\"Checking type for compliance rules: {typeToCheck.\n  FullName}\");\nif (complianceMetadataResolver.HasMetadataFor(typeToCheck))\n{\n    var metadata =\n      complianceMetadataResolver.GetMetadataFor(\n      typeToCheck);\n    foreach (var item in metadata)\n    {\n        Console.WriteLine($\"Type level - {item.Details}\");\n    }\n}\n```", "```cs\nforeach (var property in typeToCheck.GetProperties())\n{\n    if (complianceMetadataResolver\n      .HasMetadataFor(property))\n    {\n        var metadata = complianceMetadataResolver\n          .GetMetadataFor(property);\n        foreach (var item in metadata)\n        {\n            Console.WriteLine($\"Property: {property.Name} –\n              {item.Details}\");\n        }\n    }\n    else if (property.PropertyType.IsGenericType &&\n      property.PropertyType.GetGenericTypeDefinition()\n      .IsAssignableTo(typeof(IEnumerable<>)))\n    {\n        var type = property.PropertyType\n          .GetGenericArguments().First();\n        if (complianceMetadataResolver\n          .HasMetadataFor(type))\n        {\n            Console.WriteLine($\"\\nProperty {property.Name}\n              is a collection of type {type.FullName} with\n              type level metadata\");\n            var metadata = complianceMetadataResolver.\n               GetMetadataFor(type);\n            foreach (var item in metadata)\n            {\n                Console.WriteLine($\"{property.Name} –\n                  {item.Details}\");\n            }\n        }\n    }\n}\n```", "```cs\nChecking type for compliance rules: Chapter11.Patient\nProperty: FirstName - Employment records\nProperty: LastName - Employment records\nProperty: SocialSecurityNumber - Uniquely identifies the employee\nProperty JournalEntries is a collection of type Chapter11.JournalEntry with type level metadata\n```", "```cs\nusing Fundamentals.Compliance;\nnamespace Chapter11;\npublic class JournalEntryMetadataProvider : ICanProvideComplianceMetadataForType\n{\n    public bool CanProvide(Type type) => type == typeof(JournalEntry);\n    public ComplianceMetadata Provide(Type type) => new(\"7242aed8-\n          8d70-49df-8713-eea45e2764d4\", \"Journal entry\");\n}\n```", "```cs\nChecking type for compliance rules: Chapter11.Patient\nProperty: FirstName - Employment records\nProperty: LastName - Employment records\nProperty: SocialSecurityNumber - Uniquely identifies the employee\nProperty JournalEntries is a collection of type Chapter11.JournalEntry\n  with type level metadata\nJournalEntries - Journal entry\n```", "```cs\nnamespace Chapter11;\n[AttributeUsage(AttributeTargets.Class, AllowMultiple = false,\n  Inherited = true)]\npublic sealed class ConfidentialAttribute : Attribute\n{\n}\n```", "```cs\nusing System.Reflection;\nusing Fundamentals.Compliance;\nnamespace Chapter11;\npublic class ConfidentialMetadataProvider :\n  ICanProvideComplianceMetadataForType\n{\n    public bool CanProvide(Type type) =>\n      type.GetCustomAttribute<ConfidentialAttribute>() !=\n      null;\n    public ComplianceMetadata Provide(Type type) =>\n      new(\"8dd1709a-bbe1-4b98-84e1-9e7be2fd4912\", \"The data\n      is confidential\");\n}\n```", "```cs\nusing Fundamentals.Compliance.GDPR;\nnamespace Chapter11;\n[Confidential]\npublic class Patient\n{\n    [PersonalIdentifiableInformation(\"Employment records\")]\n    public string FirstName { get; set; } = string.Empty;\n    [PersonalIdentifiableInformation(\"Employment records\")]\n    public string LastName { get; set; } = string.Empty;\n    [PersonalIdentifiableInformation(\"Uniquely identifies\n      the employee\")]\n    public string SocialSecurityNumber { get; set; } =\n      string.Empty;\n    public IEnumerable<JournalEntry> JournalEntries { get;\n      set; } = Enumerable.Empty<JournalEntry>();\n}\n```", "```cs\nChecking type for compliance rules: Chapter11.Patient\nType level - The data is confidential\nProperty: FirstName - Employment records\nProperty: LastName - Employment records\nProperty: SocialSecurityNumber - Uniquely identifies the employee\nProperty JournalEntries is a collection of type Chapter11.JournalEntry with type level metadata\nJournalEntries - Journal entry\n```"]