["```cs\n    <ItemGroup>\n      <ProjectReference Include=\"..\\..\\Chapter03\\Northwind.Common.DataContext\n    .SqlServer\\Northwind.Common.DataContext.SqlServer.csproj\" />\n    </ItemGroup> \n    ```", "```cs\n    <Project Sdk=\"Microsoft.NET.Sdk.Web\">\n      <PropertyGroup>\n        <TargetFramework>net8.0</TargetFramework>\n        <Nullable>enable</Nullable>\n        <ImplicitUsings>enable</ImplicitUsings>\n        <InvariantGlobalization>**false**</InvariantGlobalization>\n     **<TreatWarningsAsErrors>****true****</TreatWarningsAsErrors>**\n      </PropertyGroup> \n    ```", "```cs\n    dotnet build \n    ```", "```cs\n    \"profiles\": {\n      ...\n    **\"****https\"****:****{**\n        \"commandName\": \"Project\",\n        \"dotnetRunMessages\": true,\n        \"launchBrowser\": true,\n        \"launchUrl\": \"swagger\",\n    **\"applicationUrl\"****:****\"https://localhost:5091;http://localhost:5092\"****,**\n        \"environmentVariables\": {\n          \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n        } \n    ```", "```cs\n    **using** **Northwind.EntityModels;** **// To use the AddNorthwindContext method.**\n    var builder = WebApplication.CreateBuilder(args);\n    // Add services to the container.\n    **builder.Services.AddNorthwindContext();**\n    builder.Services.AddControllers(); \n    ```", "```cs\n    using Microsoft.AspNetCore.Mvc; // To use [HttpGet] and so on.\n    using Northwind.EntityModels; // To use NorthwindContext, Product.\n    namespace Northwind.WebApi.Service.Controllers;\n    [Route(\"api/products\")]\n    [ApiController]\n    public class ProductsController : ControllerBase\n    {\n      private int pageSize = 10;\n      private readonly ILogger<ProductsController> _logger;\n      private readonly NorthwindContext _db;\n      public ProductsController(ILogger<ProductsController> logger, \n        NorthwindContext context)\n      {\n        _logger = logger;\n        _db = context;\n      }\n      // GET: api/products\n      [HttpGet]\n      [Produces(typeof(Product[]))]\n      public IEnumerable<Product> Get(int? page)\n      {\n        return _db.Products\n          .Where(p => p.UnitsInStock > 0 && !p.Discontinued)\n          .OrderBy(product => product.ProductId)\n          .Skip(((page ?? 1) - 1) * pageSize)\n          .Take(pageSize);\n      }\n      // GET: api/products/outofstock\n      [HttpGet]\n      [Route(\"outofstock\")]\n      [Produces(typeof(Product[]))]\n      public IEnumerable<Product> GetOutOfStockProducts()\n      {\n        return _db.Products\n          .Where(p => p.UnitsInStock == 0 && !p.Discontinued);\n      }\n      // GET: api/products/discontinued\n      [HttpGet]\n      [Route(\"discontinued\")]\n      [Produces(typeof(Product[]))]\n      public IEnumerable<Product> GetDiscontinuedProducts()\n      {\n        return _db.Products\n          .Where(product => product.Discontinued);\n      }\n      // GET api/products/5\n      [HttpGet(\"{id:int}\")]\n      public async ValueTask<Product?> Get(int id)\n      {\n        return await _db.Products.FindAsync(id);\n      }\n      // GET api/products/cha\n      [HttpGet(\"{name}\")]\n      public IEnumerable<Product> Get(string name)\n      {\n        return _db.Products.Where(p => p.ProductName.Contains(name));\n      }\n      // POST api/products\n      [HttpPost]\n      public async Task<IActionResult> Post([FromBody] Product product)\n      {\n        _db.Products.Add(product);\n        await _db.SaveChangesAsync();\n        return Created($\"api/products/{product.ProductId}\", product);\n      }\n      // PUT api/products/5\n      [HttpPut(\"{id}\")]\n      public async Task<IActionResult> Put(int id, [FromBody] Product product)\n      {\n        Product? foundProduct = await _db.Products.FindAsync(id);\n        if (foundProduct is null) return NotFound();\n        foundProduct.ProductName = product.ProductName;\n        foundProduct.CategoryId = product.CategoryId;\n        foundProduct.SupplierId = product.SupplierId;\n        foundProduct.QuantityPerUnit = product.QuantityPerUnit;\n        foundProduct.UnitsInStock = product.UnitsInStock;\n        foundProduct.UnitsOnOrder = product.UnitsOnOrder;\n        foundProduct.ReorderLevel = product.ReorderLevel;\n        foundProduct.UnitPrice = product.UnitPrice;\n        foundProduct.Discontinued = product.Discontinued;\n        await _db.SaveChangesAsync();\n        return NoContent();\n      }\n      // DELETE api/products/5\n      [HttpDelete(\"{id}\")]\n      public async Task<IActionResult> Delete(int id)\n      {\n        if (await _db.Products.FindAsync(id) is Product product)\n        {\n          _db.Products.Remove(product);\n          await _db.SaveChangesAsync();\n          return NoContent();\n        }\n        return NotFound();\n      }\n    } \n    ```", "```cs\n    using Microsoft.Extensions.Caching.Memory; // To use IMemoryCache and so on. \n    ```", "```cs\n    builder.Services.AddSingleton<IMemoryCache>(new MemoryCache(\n      new MemoryCacheOptions\n      {\n        TrackStatistics = true,\n        SizeLimit = 50 // Products.\n      })); \n    ```", "```cs\n    using Microsoft.Extensions.Caching.Memory; // To use IMemoryCache. \n    ```", "```cs\n    **private****readonly** **IMemoryCache _memoryCache;**\n    **private****const****string** **OutOfStockProductsKey =** **\"OOSP\"****;**\n    public ProductsController(ILogger<ProductsController> logger, \n      NorthwindContext context**,**\n     **IMemoryCache memoryCache**)\n    {\n      _logger = logger;\n      _db = context;\n     **_memoryCache = memoryCache;**\n    } \n    ```", "```cs\n    // GET: api/products/outofstock\n    [HttpGet]\n    [Route(\"outofstock\")]\n    [Produces(typeof(Product[]))]\n    public IEnumerable<Product> GetOutOfStockProducts()\n    {\n    **// Try to get the cached value.**\n    **if** **(!_memoryCache.TryGetValue(OutOfStockProductsKey,**\n    **out** **Product[]? cachedValue))**\n     **{**\n    **// If the cached value is not found, get the value from the database.**\n     **cachedValue = _db.Products**\n     **.Where(p => p.UnitsInStock ==** **0** **&& !p.Discontinued)**\n     **.ToArray();**\n     **MemoryCacheEntryOptions cacheEntryOptions =** **new****()**\n     **{**\n     **SlidingExpiration = TimeSpan.FromSeconds(****5****),**\n     **Size = cachedValue?.Length**\n     **};**\n     **_memoryCache.Set(OutOfStockProductsKey, cachedValue, cacheEntryOptions);**\n     **}**\n     **MemoryCacheStatistics? stats = _memoryCache.GetCurrentStatistics();**\n     **_logger.LogInformation(****\"Memory cache. Total hits: {stats?**\n     **.TotalHits}. Estimated size: {stats?.CurrentEstimatedSize}.\"****);**\n    **return** **cachedValue ?? Enumerable.Empty<Product>();**\n    } \n    ```", "```cs\n    info: Northwind.WebApi.Service.Controllers.ProductsController[0]\n          Memory cache. Total hits: 0\\. Estimated size: 1. \n    ```", "```cs\n        info: Northwind.WebApi.Service.Controllers.ProductsController[0]\n              Memory cache. Total hits: 1\\. Estimated size: 1.\n        info: Northwind.WebApi.Service.Controllers.ProductsController[0]\n              Memory cache. Total hits: 2\\. Estimated size: 1.\n        info: Northwind.WebApi.Service.Controllers.ProductsController[0]\n              Memory cache. Total hits: 3\\. Estimated size: 1. \n        ```", "```cs\n    builder.Services.AddDistributedMemoryCache(); \n    ```", "```cs\n    using Microsoft.Extensions.Caching.Distributed; // To use IDistributedCache.\n    using System.Text.Json; // To use JsonSerializer. \n    ```", "```cs\n    private readonly IMemoryCache _memoryCache;\n    private const string OutOfStockProductsKey = \"OOSP\";\n    **private****readonly** **IDistributedCache _distributedCache;**\n    **private****const****string** **DiscontinuedProductsKey =** **\"DISCP\"****;**\n    public ProductsController(ILogger<ProductsController> logger,\n      NorthwindContext context,\n      IMemoryCache memoryCache**,**\n     **IDistributedCache distributedCache****)**\n    {\n      _logger = logger;\n      _db = context;\n      _memoryCache = memoryCache;\n     **_distributedCache = distributedCache;**\n    } \n    ```", "```cs\n    private Product[]? GetDiscontinuedProductsFromDatabase()\n    {\n      Product[]? cachedValue = _db.Products\n        .Where(product => product.Discontinued)\n        .ToArray();\n      DistributedCacheEntryOptions cacheEntryOptions = new()\n      {\n        // Allow readers to reset the cache entry's lifetime.\n        SlidingExpiration = TimeSpan.FromSeconds(5),\n        // Set an absolute expiration time for the cache entry.\n        AbsoluteExpirationRelativeToNow = TimeSpan.FromSeconds(20),\n      };\n      byte[]? cachedValueBytes = \n        JsonSerializer.SerializeToUtf8Bytes(cachedValue);\n      _distributedCache.Set(DiscontinuedProductsKey,\n        cachedValueBytes, cacheEntryOptions);\n      return cachedValue;\n    } \n    ```", "```cs\n    // GET: api/products/discontinued\n    [HttpGet]\n    [Route(\"discontinued\")]\n    [Produces(typeof(Product[]))]\n    public IEnumerable<Product> GetDiscontinuedProducts()\n    {\n    **// Try to get the cached value.**\n    **byte****[]? cachedValueBytes = _distributedCache.Get(DiscontinuedProductsKey);**\n     **Product[]? cachedValue =** **null****;**\n    **if** **(cachedValueBytes** **is****null****)**\n     **{**\n     **cachedValue = GetDiscontinuedProductsFromDatabase();**\n     **}**\n    **else**\n     **{**\n     **cachedValue = JsonSerializer**\n     **.Deserialize<Product[]?>(cachedValueBytes);**\n    **if** **(cachedValue** **is****null****)**\n     **{**\n     **cachedValue = GetDiscontinuedProductsFromDatabase();**\n     **}**\n     **}**\n    **return** **cachedValue ?? Enumerable.Empty<Product>();**\n    } \n    ```", "```cs\n// IDistributedCache methods.\nobjectFromDatabase = GetFromDatabase(...);\ncache.Set(key: \"ITEM_KEY\", value: objectFromDatabase, options: ...);\ndataFromCache = cache.Get(key: \"ITEM_KEY\");\n// New extension methods.\ndataFromCache = await cache.GetAsync(key: \"ITEM_KEY\",\n  getMethod: GetFromDatabase(...), options: ..., cancellation: ...); \n```", "```cs\nGET api/products/discontinued\nCache-Control: no-cache \n```", "```cs\ncontent-type: application/json; charset=utf-8 \ndate: Fri,09 Jun 2023 06:05:13 GMT \nserver: Kestrel \ncache-control: private\n[\n  {\n    \"productId\": 5,\n    \"productName\": \"Chef Anton's Gumbo Mix\",\n    ... \n```", "```cs\n    builder.Services.AddResponseCaching(); \n    ```", "```cs\n    app.UseResponseCaching(); \n    ```", "```cs\n    // GET api/products/5\n    [HttpGet(\"{id:int}\")]\n    **[****ResponseCache(Duration = 5, // Cache-Control: max-age=5**\n     **Location = ResponseCacheLocation.Any, // Cache-Control: public**\n     **VaryByHeader =** **\"User-Agent\"** **// Vary: User-Agent**\n     **)****]**\n    public async ValueTask<Product?> Get(int id)\n    {\n      return await _db.Products.FindAsync(id);\n    } \n    ```", "```cs\n    GET {{base_address}}77 \n    ```", "```cs\n    Response time: 89 ms\n    Status code: OK (200)\n    Alt-Svc: h3=\":5091\"; ma=86400\n    Transfer-Encoding: chunked\n    **Vary: User-Agent**\n    **Cache-Control: public, max-age=5**\n    Date: Fri, 09 Jun 2023 06:26:45 GMT\n    Server: Kestrel\n    Content-Type: application/json; charset=utf-8\n    Content-Length: 270\n    ------------------------------------------------\n    Content:\n    {\n      \"productId\": 77,\n      \"productName\": \"Original Frankfurter grüne Soße\",\n      \"supplierId\": 12,\n      \"categoryId\": 2,\n      \"quantityPerUnit\": \"12 boxes\",\n      \"unitPrice\": 85.0,\n      \"unitsInStock\": 32,\n      \"unitsOnOrder\": 0,\n      \"reorderLevel\": 15,\n      \"discontinued\": false,\n      \"category\": null,\n      \"orderDetails\": [],\n      \"supplier\": null\n    } \n    ```", "```cs\nRetryPolicy policy = Policy\n  .Handle<CustomException>().Or<ArithmeticException>()\n  .Retry(3); \n```", "```cs\npolicy.Execute(() => GetProducts());\npolicy.Execute(() => GetCustomers()); \n```", "```cs\nRetryPolicy policy = Policy\n  .Handle<CustomException>().Or<ArithmeticException>()\n  .Retry(3, onRetry: (exception, retryCount) =>\n  {\n      // Log the current retry count and exception information.\n  }); \n```", "```cs\nRetryPolicy policy = Policy\n  .Handle<CustomException>().Or<ArithmeticException>()\n  .WaitAndRetry(new[]\n  {\n    TimeSpan.FromSeconds(1), // 1 second between 1st and 2nd try.\n    TimeSpan.FromSeconds(2), // 2 seconds between 2nd and 3rd try.\n    TimeSpan.FromSeconds(5) // 5 seconds between 3rd and 4th try.\n  }); \n```", "```cs\nRetryPolicy policy = Policy\n  .Handle<CustomException>().Or<ArithmeticException>()\n  .WaitAndRetry(3, retryAttempt => \n    TimeSpan.FromSeconds(Math.Pow(2, retryAttempt)));\n//  2 ^ 1 = 2 seconds then\n//  2 ^ 2 = 4 seconds then\n//  2 ^ 3 = 8 seconds then \n```", "```cs\nAsyncRetryPolicy<HttpResponseMessage> retryPolicy = HttpPolicyExtensions\n  // Handle network failures, 408 and 5xx status codes.\n  .HandleTransientHttpError()\n  // Define the policy using all the same options as before.\n  .RetryAsync(3); \n```", "```cs\n    // GET api/products/cha\n    [HttpGet(\"{name}\")]\n    public IEnumerable<Product> Get(string name)\n    {\n    **// Works correctly 1 out of 3 times.**\n    **if** **(Random.Shared.Next(****1****,** **4****) ==** **1****)**\n     **{**\n        return _db.Products.Where(p => p.ProductName.Contains(name));\n     **}**\n    **// Throws an exception at all other times.**\n    **throw****new** **Exception(****\"Randomized fault.\"****);**\n    } \n    ```", "```cs\n    \"applicationUrl\": \"https://localhost:5093;http://localhost:5094\", \n    ```", "```cs\n    <ItemGroup>\n      <ProjectReference Include=\"..\\..\\Chapter03\\Northwind.Common.EntityModels .SqlServer\\Northwind.Common.EntityModels.SqlServer.csproj\" />\n    </ItemGroup> \n    ```", "```cs\n    using System.Net.Http.Headers; // To use MediaTypeWithQualityHeaderValue. \n    ```", "```cs\n    builder.Services.AddHttpClient(name: \"Northwind.WebApi.Service\",\n      configureClient: options =>\n      {\n        options.BaseAddress = new(\"https://localhost:5091/\");\n        options.DefaultRequestHeaders.Accept.Add(\n          new MediaTypeWithQualityHeaderValue(\n            \"application/json\", 1.0));\n      }); \n    ```", "```cs\n    using Northwind.EntityModels; // To use Product.\n    namespace Northwind.WebApi.Client.Mvc.Models;\n    public class HomeProductsViewModel\n    {\n      public string? NameContains { get; set; }\n      public Uri? BaseAddress { get; set; }\n      public IEnumerable<Product>? Products { get; set; }\n      public string? ErrorMessage { get; set; }\n    } \n    ```", "```cs\n    using Northwind.EntityModels; // To use Product. \n    ```", "```cs\n    private readonly ILogger<HomeController> _logger;\n    **private****readonly** **IHttpClientFactory _httpClientFactory;**\n    public HomeController(ILogger<HomeController> logger,\n      **IHttpClientFactory httpClientFactory**)\n    {\n      _logger = logger;\n     **_httpClientFactory = httpClientFactory;**\n    } \n    ```", "```cs\n    [Route(\"home/products/{name?}\")]\n    public async Task<IActionResult> Products(string? name = \"cha\")\n    {\n      HomeProductsViewModel model = new();\n      HttpClient client = _httpClientFactory.CreateClient(\n        name: \"Northwind.WebApi.Service\");\n      model.NameContains = name;\n      model.BaseAddress = client.BaseAddress;\n      HttpRequestMessage request = new(\n        method: HttpMethod.Get, \n        requestUri: $\"api/products/{name}\");\n      HttpResponseMessage response = await client.SendAsync(request);\n      if (response.IsSuccessStatusCode)\n      {\n        model.Products = await response.Content\n          .ReadFromJsonAsync<IEnumerable<Product>>();\n      }\n      else\n      {\n        model.Products = Enumerable.Empty<Product>();\n        string content = await response.Content.ReadAsStringAsync();\n        // Use the range operator .. to start from zero and \n        // go to the first carriage return.\n        string exceptionMessage = content[..content.IndexOf(\"\\r\")];\n        model.ErrorMessage = string.Format(\"{0}: {1}:\",\n          response.ReasonPhrase, exceptionMessage);\n      }\n      return View(model);\n    } \n    ```", "```cs\n    @using Northwind.EntityModels\n    @model HomeProductsViewModel\n    @{\n      ViewData[\"Title\"] = \"Products using Polly\";\n    }\n    <div class=\"text-center\">\n      <h1 class=\"display-4\">@ViewData[\"Title\"]</h1>\n      <div class=\"alert alert-info\">\n        <p>\n          This page calls a web service endpoint that will randomly fail two out of three times. It will use Polly to retry the call automatically.\n        </p>\n      </div>\n      @if (Model is not null)\n      {\n        if (!string.IsNullOrWhiteSpace(Model.ErrorMessage))\n        {\n          <div class=\"alert alert-danger\">\n            @Model.ErrorMessage\n          </div>\n        }\n        <form action=\"/home/products\">\n          <input name=\"name\" placeholder=\"Enter part of a product name\" \n            value=\"@Model.NameContains\" />\n          <input type=\"submit\" value=\"Get Products\" />\n          @if (!string.IsNullOrWhiteSpace(Model.NameContains))\n          {\n          <p>\n            Searched for product names that start with:\n            <span class=\"badge bg-primary rounded-pill\">\n              @Model.NameContains</span>\n          </p>\n          }\n        </form>\n        <div>\n          @if (Model.Products is not null)\n          {\n            <table class=\"table\">\n              <thead>\n                <tr>\n                  <th scope=\"col\">Product Name</th>\n                </tr>\n              </thead>\n              <tbody>\n                @if (Model.Products.Any())\n                {\n                  @foreach (Product p in Model.Products)\n                  {\n                    <tr>\n                      <td>\n                        <a href=\n    \"@(Model.BaseAddress)api/products/@p.ProductId\">\n    @p.ProductName</a>\n                      </td>\n                    </tr>\n                  }\n                }\n                else\n                {\n                  <tr><td>0 products found.</td></tr>\n                }\n              </tbody>\n            </table>\n          }\n        </div>\n      }\n    </div> \n    ```", "```cs\n    <p><a href=\"home/products\">Search for products by name</a></p> \n    ```", "```cs\n    fail: Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware[1]\n          An unhandled exception has occurred while executing the request.\n          System.Exception: Randomized fault. \n    ```", "```cs\n    <ItemGroup>\n      <PackageReference Include=\"Microsoft.Extensions.Http.Polly\" \n                        Version=\"8.0.0\" />\n      <PackageReference Include=\"Polly.Contrib.WaitAndRetry\" \n                        Version=\"1.1.1\" />\n    </ItemGroup> \n    ```", "```cs\n    using Polly; // To use AddTransientHttpErrorPolicy method.\n    using Polly.Contrib.WaitAndRetry; // To use Backoff.\n    using Polly.Extensions.Http; // To use HttpPolicyExtensions.\n    using Polly.Retry; // To use AsyncRetryPolicy<T> \n    ```", "```cs\n    **// Create five jittered delays, starting with about 1 second.**\n    **IEnumerable<TimeSpan> delays = Backoff.DecorrelatedJitterBackoffV2(**\n     **medianFirstRetryDelay: TimeSpan.FromSeconds(****1****), retryCount:** **5****);**\n    **WriteLine(****\"Jittered delays for Polly retries:\"****);**\n    **foreach** **(TimeSpan item** **in** **delays)**\n    **{**\n     **WriteLine(****$\"** **{item.TotalSeconds:N2}** **seconds.\"****);**\n    **}**\n    **AsyncRetryPolicy<HttpResponseMessage> retryPolicy = HttpPolicyExtensions**\n    **// Handle network failures, 408 and 5xx status codes.**\n     **.HandleTransientHttpError().WaitAndRetryAsync(delays);**\n    builder.Services.AddHttpClient(name: \"Northwind.WebApi.Service\",\n      configureClient: options =>\n      {\n        options.BaseAddress = new(\"https://localhost:5091/\");\n        options.DefaultRequestHeaders.Accept.Add(\n          new MediaTypeWithQualityHeaderValue(\n            \"application/json\", 1.0));\n      })\n      **.AddPolicyHandler(retryPolicy)**; \n    ```", "```cs\n    Jittered delays for Polly retries:\n      1.38 seconds.\n      0.15 seconds.\n      2.65 seconds.\n      3.06 seconds.\n      6.46 seconds. \n    ```", "```cs\n    docker run -it --rm --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3.12-management \n    ```", "```cs\n    Unable to find image 'rabbitmq:3.12-management' locally \n    ```", "```cs\n    3.12-management: Pulling from library/rabbitmq\n    99803d4b97f3: Pull complete\n    8fb904ec525a: Pull complete\n    ba4d114a87c0: Pull complete\n    c869b027f1e1: Pull complete\n    729c8b3166a8: Pull complete\n    7de098b90abf: Pull complete\n    4f206ad5199f: Pull complete\n    1f40437d763f: Pull complete\n    f4cbf27a2d68: Pull complete\n    5a4db5ea38b2: Pull complete\n    99886074092c: Pull complete\n    Digest: sha256:da98d468cf2236171da94e34953619ddd01b5db155ee326b653675d1e5017f0f\n    Status: Downloaded newer image for rabbitmq:3.12-management \n    ```", "```cs\n    2023-06-11 14:03:22.785019+00:00 [info] <0.230.0>  Starting RabbitMQ 3.12.0 on Erlang 25.3.2.2 [jit]\n    2023-06-11 14:03:22.785019+00:00 [info] <0.230.0>  Copyright (c) 2007-2023 VMware, Inc. or its affiliates.\n    2023-06-11 14:03:22.785019+00:00 [info] <0.230.0>  Licensed under the MPL 2.0\\. Website: https://rabbitmq.com\n      ##  ##      RabbitMQ 3.12.0\n      ##  ##\n      ##########  Copyright (c) 2007-2023 VMware, Inc. or its affiliates.\n      ######  ##\n      ##########  Licensed under the MPL 2.0\\. Website: https://rabbitmq.com \n    ```", "```cs\n    2023-06-11 14:03:27.574844+00:00 [info] <0.744.0> started TCP listener on [::]:5672\n     completed with 4 plugins.\n    2023-06-11 14:03:27.659139+00:00 [info] <0.599.0> Server startup complete; 4 plugins started.\n    2023-06-11 14:03:27.659139+00:00 [info] <0.599.0>  * rabbitmq_prometheus\n    2023-06-11 14:03:27.659139+00:00 [info] <0.599.0>  * rabbitmq_management\n    2023-06-11 14:03:27.659139+00:00 [info] <0.599.0>  * rabbitmq_web_dispatch\n    2023-06-11 14:03:27.659139+00:00 [info] <0.599.0>  * rabbitmq_management_agent \n    ```", "```cs\n    <ItemGroup>\n      <ProjectReference Include=\"..\\..\\Chapter03\\Northwind.Common.EntityModels\n    .SqlServer\\Northwind.Common.EntityModels.SqlServer.csproj\" />\n    </ItemGroup> \n    ```", "```cs\n    dotnet build \n    ```", "```cs\n    using Northwind.EntityModels; // To use Product.\n    namespace Northwind.Queue.Models;\n    public class ProductQueueMessage\n    {\n      public string? Text { get; set; }\n      public Product Product { get; set; } = null!;\n    } \n    ```", "```cs\n    <ItemGroup>\n      <ProjectReference Include=\n      \"..\\Northwind.Queue.Models\\Northwind.Queue.Models.csproj\" />\n    </ItemGroup> \n    ```", "```cs\n    <PackageReference Include=\"RabbitMQ.Client\" Version=\"6.7.0\" /> \n    ```", "```cs\n    using Northwind.Queue.Models; // To use ProductQueueMessage.\n    namespace Northwind.WebApi.Client.Mvc.Models;\n    public class HomeSendMessageViewModel\n    {\n      public string? Info { get; set; }\n      public string? Error { get; set; }\n      public ProductQueueMessage? Message { get; set; }\n    } \n    ```", "```cs\n    <p><a href=\"home/sendmessage\">Send a message</a></p> \n    ```", "```cs\n    using RabbitMQ.Client; // To use ConnectionFactory and so on.\n    using System.Text.Json; // To use JsonSerializer. \n    ```", "```cs\n    public IActionResult SendMessage()\n    {\n      return View();\n    } \n    ```", "```cs\n    // POST: home/sendmessage\n    // Body: message=Hello&productId=1\n    [HttpPost]\n    public async Task<IActionResult> SendMessage(\n      string? message, int? productId)\n    {\n      HomeSendMessageViewModel model = new();\n      model.Message = new();\n      if (message is null || productId is null)\n      {\n        model.Error = \"Please enter a message and a product ID.\";\n        return View(model);\n      }\n      model.Message.Text = message;\n      model.Message.Product = new() { ProductId = productId.Value };\n      HttpClient client = _httpClientFactory.CreateClient(\n        name: \"Northwind.WebApi.Service\");\n      HttpRequestMessage request = new(\n        method: HttpMethod.Get,\n        requestUri: $\"api/products/{productId}\");\n      HttpResponseMessage response = await client.SendAsync(request);\n      if (response.IsSuccessStatusCode)\n      {\n        Product? product = await response.Content.ReadFromJsonAsync<Product>();\n        if (product is not null)\n        {\n          model.Message.Product = product;\n        }\n      }\n      // Create a RabbitMQ factory.\n      ConnectionFactory factory = new() { HostName = \"localhost\" };\n      using IConnection connection = factory.CreateConnection();\n      using IModel channel = connection.CreateModel();\n      string queueNameAndRoutingKey = \"product\";\n      // If the queue does not exist, it will be created.\n      // If the Docker container is restarted, the queue will be lost.\n      // The queue can be shared with multiple consumers.\n      // The queue will not be deleted when the last message is consumer.\n      channel.QueueDeclare(queue: queueNameAndRoutingKey, durable: false, \n        exclusive: false, autoDelete: false, arguments: null);\n      byte[] body = JsonSerializer.SerializeToUtf8Bytes(model.Message);\n      // The exchange is empty because we are using the default exchange.\n      channel.BasicPublish(exchange: string.Empty, \n        routingKey: queueNameAndRoutingKey, \n        basicProperties: null, body: body);\n      model.Info = \"Message sent to queue successfully.\";\n      return View(model);\n    } \n    ```", "```cs\n    @model HomeSendMessageViewModel\n    @{\n      ViewData[\"Title\"] = \"Send a Message\";\n    }\n    <div class=\"text-center\">\n      <h1 class=\"display-4\">@ViewData[\"Title\"]</h1>\n      @if (Model is not null)\n      {\n        if (Model.Error is not null)\n        {\n          <div class=\"alert alert-danger\">\n            <h2>Error</h2>\n            <p>@Model.Error</p>\n          </div>\n        }\n        if (Model.Info is not null)\n        {\n          <div class=\"alert alert-info\">\n            <h2>Information</h2>\n            <p>@Model.Info</p>\n          </div>\n        }\n      }\n      <form asp-controller=\"Home\" asp-action=\"SendMessage\" method=\"post\">\n        <div>\n          <label for=\"message\">Message</label>\n          <input id=\"message\" name=\"message\" />\n        </div>\n        <div>\n          <label for=\"productId\">Product ID</label>\n          <input id=\"productId\" name=\"productId\" />\n        </div>\n        <input type=\"submit\" value=\"Send\" />\"\n      </form>\n    </div> \n    ```", "```cs\n    <Project Sdk=\"Microsoft.NET.Sdk\">\n      <PropertyGroup>\n        <OutputType>Exe</OutputType>\n        <TargetFramework>net8.0</TargetFramework>\n        <ImplicitUsings>enable</ImplicitUsings>\n        <Nullable>enable</Nullable>\n     **<TreatWarningsAsErrors>****true****</TreatWarningsAsErrors>**\n      </PropertyGroup>\n     **<ItemGroup>**\n     **<PackageReference Include=****\"RabbitMQ.Client\"** **Version=****\"6.7.0\"** **/>**\n     **</ItemGroup>**\n     **<ItemGroup>**\n     **<ProjectReference Include=**\n    **\"..\\..\\Chapter03\\Northwind.Common.EntityModels.SqlServer\\**\n     **Northwind.Common.EntityModels.SqlServer.csproj\"** **/>**\n     **<ProjectReference Include=**\n    **\"..\\Northwind.Queue.Models\\Northwind.Queue.Models.csproj\"** **/>**\n     **</ItemGroup>**\n     **<ItemGroup>**\n     **<Using Include=****\"System.Console\"** **Static=****\"true\"** **/>**\n     **</ItemGroup>**\n    </Project> \n    ```", "```cs\n    dotnet build \n    ```", "```cs\n    using Northwind.Queue.Models; // To use ProductQueueMessage.\n    using RabbitMQ.Client; // To use ConnectionFactory.\n    using RabbitMQ.Client.Events; // To use EventingBasicConsumer.\n    using System.Text.Json; // To use JsonSerializer.\n    string queueName = \"product\";\n    ConnectionFactory factory = new () { HostName = \"localhost\" };\n    using IConnection connection = factory.CreateConnection();\n    using IModel channel = connection.CreateModel();\n    WriteLine(\"Declaring queue...\");\n    QueueDeclareOk response = channel.QueueDeclare(\n      queue: queueName,\n      durable: false,\n      exclusive: false,\n      autoDelete: false,\n      arguments: null);\n    WriteLine(\"Queue name: {response.QueueName}, Message count: {\n      response.MessageCount}, Consumer count: {response.ConsumerCount}.\");\n    WriteLine(\"Waiting for messages...\");\n    EventingBasicConsumer consumer = new(channel);\n    consumer.Received += (model, args) =>\n    {\n      byte[] body = args.Body.ToArray();\n      ProductQueueMessage? message = JsonSerializer\n        .Deserialize<ProductQueueMessage>(body);\n      if (message is not null)\n      {\n        WriteLine(\"Received product. Id: {message.Product.ProductId\n          }, Name: { message.Product.ProductName}, Message: {\n          message.Text}\");\n      }\n      else\n      {\n        WriteLine($\"Received unknown: {args.Body.ToArray()}.\");\n      }\n    };\n    // Start consuming as messages arrive in the queue.\n    channel.BasicConsume(queue: queueName,\n      autoAck: true,\n      consumer: consumer);\n    WriteLine(\">>> Press Enter to stop consuming and quit. <<<\");\n    ReadLine(); \n    ```", "```cs\n    2023-06-11 17:42:31.006172+00:00 [info] <0.744.0> stopped TCP listener on [::]:5672\n    2023-06-11 17:42:31.008574+00:00 [info] <0.1552.0> Closing all connections in vhost '/' on node 'rabbit@e9014dbbe5f5' because the vhost is stopping\n    2023-06-11 17:42:31.017407+00:00 [info] <0.557.0> Stopping message store for directory '/var/lib/rabbitmq/mnesia/rabbit@e9014dbbe5f5/msg_stores/vhosts/628WB79CIFDYO9LJI6DKMI09L/msg_store_persistent'\n    2023-06-11 17:42:31.024661+00:00 [info] <0.557.0> Message store for directory '/var/lib/rabbitmq/mnesia/rabbit@e9014dbbe5f5/msg_stores/vhosts/628WB79CIFDYO9LJI6DKMI09L/msg_store_persistent' is stopped\n    2023-06-11 17:42:31.024937+00:00 [info] <0.553.0> Stopping message store for directory '/var/lib/rabbitmq/mnesia/rabbit@e9014dbbe5f5/msg_stores/vhosts/628WB79CIFDYO9LJI6DKMI09L/msg_store_transient'\n    2023-06-11 17:42:31.031218+00:00 [info] <0.553.0> Message store for directory '/var/lib/rabbitmq/mnesia/rabbit@e9014dbbe5f5/msg_stores/vhosts/628WB79CIFDYO9LJI6DKMI09L/msg_store_transient' is stopped\n    2023-06-11 17:42:31.037584+00:00 [info] <0.489.0> Management plugin: to stop collect_statistics. \n    ```", "```cs\n        <Project Sdk=\"**Microsoft.NET.Sdk.Worker**\">\n          <PropertyGroup>\n            <TargetFramework>net8.0</TargetFramework>\n            <Nullable>enable</Nullable>\n            <ImplicitUsings>enable</ImplicitUsings>\n            <UserSecretsId>dotnet-Northwind.Background.Workers-66434cdf-0fdd-4993-a399-ec9581b4b914</UserSecretsId>\n         **<TreatWarningsAsErrors>****true****</TreatWarningsAsErrors>**\n          </PropertyGroup>\n          <ItemGroup>\n            <PackageReference Include=\"Microsoft.Extensions.Hosting\" \n                              Version=\"8.0.0\" />\n         **<PackageReference Include=****\"RabbitMQ.Client\"** **Version=****\"6.7.0\"** **/>**\n          </ItemGroup>\n         **<ItemGroup>**\n         **<ProjectReference Include=**\n        **\"..\\..\\Chapter03\\Northwind.Common.EntityModels**\n        **.SqlServer\\Northwind.Common.EntityModels.SqlServer.csproj\"** **/>**\n         **<ProjectReference Include=**\n        **\"..\\Northwind.Queue.Models\\Northwind.Queue.Models.csproj\"** **/>**\n         **</ItemGroup>**\n        </Project> \n        ```", "```cs\n    using Northwind.Background.Workers;\n    var builder = Host.CreateApplicationBuilder(args);\n    builder.Services.AddHostedService<Worker>();\n    var host = builder.Build();\n    host.Run(); \n    ```", "```cs\n    namespace Northwind.Background.Workers\n    {\n      public class Worker : BackgroundService\n      {\n        private readonly ILogger<Worker> _logger;\n        public Worker(ILogger<Worker> logger)\n        {\n          _logger = logger;\n        }\n        protected override async Task ExecuteAsync(\n          CancellationToken stoppingToken)\n        {\n          while (!stoppingToken.IsCancellationRequested)\n          {\n            _logger.LogInformation(\"Worker running at: {time}\", \n              DateTimeOffset.Now);\n            await Task.Delay(1000, stoppingToken);\n          }\n        }\n      }\n    } \n    ```", "```cs\n    info: Northwind.Queue.Worker.Worker[0]\n          Worker running at: 06/12/2023 08:25:02 +01:00\n    info: Microsoft.Hosting.Lifetime[0]\n          Application started. Press Ctrl+C to shut down.\n    info: Microsoft.Hosting.Lifetime[0]\n          Hosting environment: Development\n    info: Microsoft.Hosting.Lifetime[0]\n          Content root path: C:\\apps-services-net8\\Chapter09\\Northwind.Queue.Worker\n    info: Northwind.Queue.Worker.Worker[0]\n          Worker running at: 06/12/2023 08:25:03 +01:00\n    info: Northwind.Queue.Worker.Worker[0]\n          Worker running at: 06/12/2023 08:25:04 +01:00\n    info: Northwind.Queue.Worker.Worker[0]\n          Worker running at: 06/12/2023 08:25:05 +01:00\n    info: Microsoft.Hosting.Lifetime[0]\n          Application is shutting down... \n    ```", "```cs\n    builder.Services.AddHostedService<QueueWorker>(); \n    ```", "```cs\n    **using** **Northwind.Queue.Models;** **// To use ProductQueueMessage.**\n    **using** **RabbitMQ.Client;** **// To use ConnectionFactory.**\n    **using** **RabbitMQ.Client.Events;** **// To use EventingBasicConsumer.**\n    **using** **System.Text.Json;** **// To use JsonSerializer.**\n    namespace Northwind.Background.Workers;\n    public class **Queue**Worker : BackgroundService\n    {\n      private readonly ILogger<QueueWorker> _logger;\n    **// RabbitMQ objects.**\n    **private****const****string** **queueNameAndRoutingKey =** **\"product\"****;**\n    **private****readonly** **ConnectionFactory _factory;**\n    **private****readonly** **IConnection _connection;**\n    **private****readonly** **IModel _channel;**\n    **private****readonly** **EventingBasicConsumer _consumer;**\n      public QueueWorker(ILogger<QueueWorker> logger)\n      {\n        _logger = logger;\n     **_factory =** **new****() { HostName =** **\"localhost\"** **};**\n     **_connection = _factory.CreateConnection();**\n     **_channel = _connection.CreateModel();**\n     **_consumer =** **new****(_channel);**\n     **_channel.QueueDeclare(queue: queueNameAndRoutingKey, durable:** **false****,** \n     **exclusive:** **false****, autoDelete:** **false****, arguments:** **null****);**\n     **_consumer =** **new****(_channel);**\n     **_consumer.Received += (model, args) =>**\n     **{**\n    **byte****[] body = args.Body.ToArray();**\n     **ProductQueueMessage? message = JsonSerializer**\n     **.Deserialize<ProductQueueMessage>(body);**\n    **if** **(message** **is****not****null****)**\n     **{**\n     **_logger.LogInformation(****$\"Received product. Id:** **{**\n     **message.Product.ProductId}****, Name:** **{message.Product**\n     **.ProductName}****, Message:** **{message.Text}****\"****);**\n     **}**\n    **else**\n     **{**\n     **_logger.LogInformation(****\"Received unknown: {0}.\"****,** \n     **args.Body.ToArray());**\n     **}**\n     **};**\n    **// Start consuming as messages arrive in the queue.**\n     **_channel.BasicConsume(queue: queueNameAndRoutingKey,**\n     **autoAck:** **true****, consumer: _consumer);**\n      }\n      protected override async Task ExecuteAsync(\n        CancellationToken stoppingToken)\n      {\n        while (!stoppingToken.IsCancellationRequested)\n        {\n          _logger.LogInformation(\"Worker running at: {time}\", \n            DateTimeOffset.Now);\n          await Task.Delay(3000, stoppingToken);\n        }\n      }\n    } \n    ```", "```cs\n    docker run -it --rm --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3.12-management \n    ```", "```cs\n    2023-06-12 08:50:16.591574+00:00 [info] <0.599.0> Ready to start client connection listeners\n    2023-06-12 08:50:16.593090+00:00 [info] <0.744.0> started TCP listener on [::]:5672 \n    ```", "```cs\n    info: Northwind.Background.Workers.QueueWorker[0]\n          Queue product is waiting for messages.\n    info: Northwind.Background.Workers.QueueWorker[0]\n          Worker running at: 06/12/2023 09:58:59 +01:00\n    info: Microsoft.Hosting.Lifetime[0]\n          Application started. Press Ctrl+C to shut down.\n    info: Microsoft.Hosting.Lifetime[0]\n          Hosting environment: Development\n    info: Microsoft.Hosting.Lifetime[0]\n          Content root path: C:\\apps-services-net8\\Chapter09\\Northwind.Queue.Worker\n    info: Northwind.Background.Workers.QueueWorker[0]\n          Received product. Id: 1, Name: Chai, Message: apples\n    info: Northwind.Background.Workers.QueueWorker[0]\n          Received product. Id: 2, Name: Chang, Message: bananas\n    info: Northwind.Background.Workers.QueueWorker [0]\n          Received product. Id: 3, Name: Aniseed Syrup, Message: cherries \n    ```", "```cs\n    namespace Northwind.Background.Workers;\n    public class TimerWorker : IHostedService, IAsyncDisposable\n    {\n      private readonly ILogger<TimerWorker> _logger;\n      private int _executionCount = 0;\n      private Timer? _timer;\n      private int _seconds = 5;\n      public TimerWorker(ILogger<TimerWorker> logger)\n      {\n        _logger = logger;\n      }\n      private void DoWork(object? state)\n      {\n        int count = Interlocked.Increment(ref _executionCount);\n        _logger.LogInformation(\n            \"{0} is working, execution count: {1:#,0}\",\n            nameof(TimerWorker), count);\n      }\n      public Task StartAsync(CancellationToken cancellationToken)\n      {\n        _logger.LogInformation(\"{0} is running.\", nameof(TimerWorker));\n        _timer = new Timer(callback: DoWork, state: null, \n          dueTime: TimeSpan.Zero, \n          period: TimeSpan.FromSeconds(_seconds));\n        return Task.CompletedTask;\n      }\n      public Task StopAsync(CancellationToken cancellationToken)\n      {\n        _logger.LogInformation(\"{0} is stopping.\", nameof(TimerWorker));\n        _timer?.Change(dueTime: Timeout.Infinite, period: 0);\n        return Task.CompletedTask;\n      }\n      public async ValueTask DisposeAsync()\n      {\n        if (_timer is IAsyncDisposable asyncTimer)\n        {\n          await asyncTimer.DisposeAsync();\n        }\n        _timer = null;\n      }\n    } \n    ```", "```cs\n    builder.Services.AddHostedService<TimerWorker>(); \n    ```", "```cs\n    info: Northwind.Background.Workers.QueueWorker[0]\n          Worker running at: 06/12/2023 12:58:25 +01:00\n    info: Northwind.Background.Workers.TimerWorker[0]\n          TimerWorker is running.\n    info: Microsoft.Hosting.Lifetime[0]\n          Application started. Press Ctrl+C to shut down.\n    info: Microsoft.Hosting.Lifetime[0]\n          Hosting environment: Development\n    info: Microsoft.Hosting.Lifetime[0]\n          Content root path: C:\\apps-services-net8\\Chapter09\\Northwind.Background.Workers \n    ```", "```cs\n    info: Northwind.Background.Workers.TimerWorker[0]\n          TimerWorker is working, execution count: 1\n    info: Northwind.Background.Workers.QueueWorker[0]\n          Worker running at: 06/12/2023 12:58:26 +01:00\n    info: Northwind.Background.Workers.QueueWorker[0]\n          Worker running at: 06/12/2023 12:58:27 +01:00\n    info: Northwind.Background.Workers.QueueWorker[0]\n          Worker running at: 06/12/2023 12:58:28 +01:00\n    info: Northwind.Background.Workers.QueueWorker[0]\n          Worker running at: 06/12/2023 12:58:29 +01:00\n    info: Northwind.Background.Workers.TimerWorker[0]\n          TimerWorker is working, execution count: 2 \n    ```", "```cs\n    info: Microsoft.Hosting.Lifetime[0]\n          Application is shutting down...\n    info: Northwind.Background.Workers.TimerWorker[0]\n          TimerWorker is stopping. \n    ```", "```cs\n    <ItemGroup>\n      <PackageReference Include=\"Hangfire.Core\" Version=\"1.8.6\" />\n      <PackageReference Include=\"Hangfire.SqlServer\" Version=\"1.8.6\" />\n      <PackageReference Include=\"Hangfire.AspNetCore\" Version=\"1.8.6\" />\n      <PackageReference Include=\"Microsoft.Data.SqlClient\" Version=\"5.1.2\" />\n    </ItemGroup> \n    ```", "```cs\n    \"profiles\": {\n      ...\n    **\"https\"****:****{**\n        \"commandName\": \"Project\",\n        \"dotnetRunMessages\": true,\n        \"launchBrowser\": true,\n        \"launchUrl\": \"swagger\",\n    **\"applicationUrl\"****:****\"https://localhost:5095;http://localhost:5096\"****,**\n        \"environmentVariables\": {\n          \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n        } \n    ```", "```cs\n    {\n      \"Logging\": {\n        \"LogLevel\": {\n          \"Default\": \"Information\",\n          \"Microsoft.AspNetCore\": \"Warning\"**,**\n    **\"Hangfire\"****:****\"****Information\"**\n        }\n      }\n    } \n    ```", "```cs\n        USE master\n        GO\n        CREATE DATABASE [Northwind.HangfireDb]\n        GO \n        ```", "```cs\n    using Microsoft.Data.SqlClient; // To use SqlConnectionStringBuilder.\n    using Hangfire; // To use GlobalConfiguration.\n    SqlConnectionStringBuilder connection = new();\n    connection.InitialCatalog = \"Northwind.HangfireDb\";\n    connection.MultipleActiveResultSets = true;\n    connection.Encrypt = true;\n    connection.TrustServerCertificate = true;\n    connection.ConnectTimeout = 5; // Default is 30 seconds.\n    connection.DataSource = \".\"; // To use local SQL Server.\n    // To use Windows Integrated authentication.\n    connection.IntegratedSecurity = true;\n    /*\n    // To use SQL Server authentication.\n    builder.UserID = \"sa\";\n    builder.Password = \"123456\";\n    builder.PersistSecurityInfo = false;\n    */\n    var builder = WebApplication.CreateBuilder(args);\n    builder.Services.AddHangfire(config => config\n      .SetDataCompatibilityLevel(CompatibilityLevel.Version_180)\n      .UseSimpleAssemblyNameTypeSerializer()\n      .UseRecommendedSerializerSettings()\n      .UseSqlServerStorage(connection.ConnectionString));\n    builder.Services.AddHangfireServer();\n    var app = builder.Build();\n    app.UseHangfireDashboard();\n    app.MapGet(\"/\", () => \n      \"Navigate to /hangfire to see the Hangfire Dashboard.\");\n    app.MapHangfireDashboard();\n    app.Run(); \n    ```", "```cs\n    info: Hangfire.SqlServer.SqlServerObjectsInstaller[0]\n          Start installing Hangfire SQL objects...\n    info: Hangfire.SqlServer.SqlServerObjectsInstaller[0]\n          Hangfire SQL objects installed.\n    info: Microsoft.Hosting.Lifetime[14]\n          Now listening on: https://localhost:5095\n    info: Microsoft.Hosting.Lifetime[14]\n          Now listening on: http://localhost:5096\n    info: Hangfire.BackgroundJobServer[0]\n          Starting Hangfire Server using job storage: 'SQL Server: .@Northwind.HangfireDb'\n    info: Hangfire.BackgroundJobServer[0]\n          Using the following options for SQL Server job storage: Queue poll interval: 00:00:00.\n    info: Hangfire.BackgroundJobServer[0]\n          Using the following options for Hangfire Server:\n              Worker count: 20\n              Listening queues: 'default'\n              Shutdown timeout: 00:00:15\n              Schedule polling interval: 00:00:15\n    info: Microsoft.Hosting.Lifetime[0]\n          Application started. Press Ctrl+C to shut down.\n    info: Microsoft.Hosting.Lifetime[0]\n          Hosting environment: Development\n    info: Microsoft.Hosting.Lifetime[0]\n          Content root path: C:\\apps-services-net8\\Chapter09\\Northwind.Background.Hangfire\n    info: Hangfire.Server.BackgroundServerProcess[0]\n          Server desktop-j1pqhr7:14120:c8ea792b successfully announced in 140.4628 ms\n    info: Hangfire.Server.BackgroundServerProcess[0]\n          Server desktop-j1pqhr7:14120:c8ea792b is starting the registered dispatchers: ServerWatchdog, ServerJobCancellationWatcher, ExpirationManager, CountersAggregator, SqlServerHeartbeatProcess, Worker, DelayedJobScheduler, RecurringJobScheduler...\n    info: Hangfire.Server.BackgroundServerProcess[0]\n          Server desktop-j1pqhr7:14120:c8ea792b all the dispatchers started \n    ```", "```cs\n    info: Microsoft.Hosting.Lifetime[0]\n          Application is shutting down...\n    info: Hangfire.Server.BackgroundServerProcess[0]\n          Server desktop-j1pqhr7:14120:c8ea792b caught stopping signal...\n    info: Hangfire.Server.BackgroundServerProcess[0]\n          Server desktop-j1pqhr7:14120:c8ea792b All dispatchers stopped\n    info: Hangfire.Server.BackgroundServerProcess[0]\n          Server desktop-j1pqhr7:14120:c8ea792b successfully reported itself as stopped in 2.8874 ms\n    info: Hangfire.Server.BackgroundServerProcess[0]\n          Server desktop-j1pqhr7:14120:c8ea792b has been stopped in total 19.6204 ms \n    ```", "```cs\n    namespace Northwind.Background.Models;\n    public class WriteMessageJobDetail\n    {\n      public string? Message { get; set; }\n      public int Seconds { get; set; }\n    } \n    ```", "```cs\n    using static System.Console;\n    partial class Program\n    {\n      public static void WriteMessage(string? message)\n      {\n        ConsoleColor previousColor = ForegroundColor;\n        ForegroundColor = ConsoleColor.Green;\n        WriteLine(message);\n        ForegroundColor = previousColor;\n      }\n    } \n    ```", "```cs\n    using Northwind.Background.Models; // To use WriteMessageJobDetail.\n    using Microsoft.AspNetCore.Mvc; // To use [FromBody]. \n    ```", "```cs\n    app.MapPost(\"/schedulejob\", ([FromBody] WriteMessageJobDetail job) =>\n      {\n        BackgroundJob.Schedule(\n          methodCall: () => WriteMessage(job.Message),\n          enqueueAt: DateTimeOffset.UtcNow + \n            TimeSpan.FromSeconds(job.Seconds));\n      }); \n    ```", "```cs\n    info: Hangfire.Server.BackgroundServerProcess[0]\n          Server desktop-j1pqhr7:13916:9f1851b5 all the dispatchers started \n    ```", "```cs\n    ### Configure a variable for the Hangfire web service base address.\n    @base_address = https://localhost:5095/\n    POST {{base_address}}schedulejob\n    Content-Type: application/json\n    {\n      \"message\": \"Hangfire is awesome!\",\n      \"seconds\": 30\n    } \n    ```", "```cs\n    HTTP/1.1 200 OK\n    Content-Length: 0\n    Connection: close\n    Date: Mon, 12 Jun 2023 16:04:20 GMT\n    Server: Kestrel\n    Alt-Svc: h3=\":5095\"; ma=86400 \n    ```", "```cs\n    Hangfire is awesome! \n    ```", "```cs\n    MemoryCacheStatistics? stats = _memoryCache.GetCurrentStatistics(); \n    ```", "```cs\n// builder.Services.AddDistributedMemoryCache();\nbuilder.Services.AddStackExchangeRedisCache(options =>\n{\n  options.Configuration = builder.Configuration\n    .GetConnectionString(\"MyRedisConStr\");\n  options.InstanceName = \"SampleInstance\";\n}); \n```"]