["```cs\n[HttpGet]\npublic async Task<IEnumerable<Car>> Get([FromRoute] bool showDeleted, int pageNumber, int pageSize )\n```", "```cs\npublic class Car\n{\n    public int id { get; set; }\n    public string name { get; set; }\n    public string mpg { get; set; }\n    public string cylinders { get; set; }\n    public string displacement { get; set; }\n    public string horsepower { get; set; }\n    public string weight { get; set; }\n    public string acceleration { get; set; }\n    public string model_year { get; set; }\n    public string origin { get; set; }\n    public string? is_deleted { get; set;}\n}\n```", "```cs\nUsing FluentValidation\n```", "```cs\npublic class CarDtoValidator : AbstractValidator<Car>\n```", "```cs\nusing Cars.Data.DTOs;\nusing FluentValidation;\nnamespace Cars.Validators\n{\n    public class CarDtoValidator : AbstractValidator<CarDto>\n    {\n        public CarDtoValidator()\n        {\n            RuleFor(x => x.Is_Deleted).Equal(\"0\");\n        }\n    }\n}\n```", "```cs\nCarDto car = new CarDto();\nCarDtoValidator carDtoValidator = new CarDtoValidator ();\ncarDtoValidator.Validate(car);\n```", "```cs\n[HttpPost]\n public async Task<ActionResult<Car>> Insert([FromBody] CarDto \n carAsDto)\n {\n     try\n     {\n         if (carAsDto == null)\n         {\n             return BadRequest(\"No car was provided\");\n         }\n         CarDtoValidator validator = new CarDtoValidator();\n         var result = validator.Validate(carAsDto);\n         if (!result.IsValid)\n         {\n             return BadRequest(result.Errors);\n         }\n         var carToInsert = _mapper.Map<Car>(carAsDto);\n         var insertedCar = await _carService.Insert(carToInsert);\n         var insertedCarDto = _mapper.Map<CarDto>(insertedCar);\n         var location = $\"https://localhost:5001/car/\n         {insertedCarDto.Id}\";\n         return Created(location, insertedCarDto);\n     }\n     catch (Exception e)\n     {\n         return StatusCode(StatusCodes.Status500InternalServerError);\n     }\n }\n```", "```cs\nRuleFor(x => x.Is_Deleted).Equal(\"0\").WithMessage(\"Car must not be deleted\");\n```", "```cs\nRuleFor(x=> x.Is_Deleted).NotEmpty().Equal(\"0\").WithMessage(\"Car must not be deleted\");\n```", "```cs\nRuleFor(x=> x.Is_Deleted).Cascade(CascadeMode.Stop).NotEmpty().Equal(\"0\").WithMessage(\"Car must not be deleted\");\n```", "```cs\nCarDtoValidator validator = new CarDtoValidator();\n//var result = validator.Validate(carAsDto);\n//if (!result.IsValid)\n//{\n//    return BadRequest(result.Errors);\n//}\nvalidator.ValidateAndThrow(carAsDto);\n```", "```cs\ntry\n{\n    if (carAsDto == null)\n    {\n        return BadRequest(\"No car was provided\");\n    }\n    CarDtoValidator validator = new CarDtoValidator();\n    validator.ValidateAndThrow(carAsDto);\n   //…\n}\ncatch(ValidationException e)\n{\n    IEnumerable<ValidationFailure> errors = e.Errors;\n    return BadRequest(errors);\n}\ncatch (Exception e)\n{\n    return StatusCode(StatusCodes.Status500InternalServerError);\n}\n```", "```cs\nRuleFor(car => car.Is_Deleted).Must(isDeleted => isDeleted == \"0\").WithMessage(\"Car must have value zero\");\n```", "```cs\nRuleFor(cc => cc.CreditCard).CreditCard();\n```"]