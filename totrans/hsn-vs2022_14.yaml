- en: 'Chapter 11: Implementing Git Integration'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having a change control platform for the development of a software project is
    essential for good control of the project. There are many different versioning
    systems, but **Git** is the most widely used system today, which is why more and
    more IDEs are including tools for managing repositories based on this technology
    natively.
  prefs: []
  type: TYPE_NORMAL
- en: This has precisely happened with Visual Studio, which integrates a series of
    options to allow us to work with Git-based repositories.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you are going to learn how to work with Git repositories based
    on **GitHub**, which is the most popular repository-hosting platform today.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main topics we will see in the chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with Git settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Git repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloning a Git repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fetching, pulling, and pushing Git repositories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing branches
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewing changes in repositories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To follow along in the chapter, you must have installed Visual Studio with the
    workload set from [*Chapter 1*](B17873_01_ePub.xhtml#_idTextAnchor013), *Getting
    Started with Visual Studio 2022*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the projects hosted in the main repository of the previous chapters already
    have a GitHub configuration, we will create a new project throughout the chapter
    to do the exercises. Therefore, a GitHub account is required, which can be created
    at the following link: [https://github.com/signup](https://github.com/signup).'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with Git settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Starting to work with Git tools is very easy in Visual Studio 2022, since they
    are included as part of the installation itself, so you can install Visual Studio
    and start working on your projects as soon as possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'To access the management of code projects hosted on GitHub, you must first
    sign in with a Microsoft account, as explained in [*Chapter 1*](B17873_01_ePub.xhtml#_idTextAnchor013),
    *Getting Started with Visual Studio 2022*. Once logged in, click on the account
    profile icon and select the **Account settings…** option, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.1 – Accessing the account settings'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.01_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.1 – Accessing the account settings
  prefs: []
  type: TYPE_NORMAL
- en: 'This will open an account customization window, where we can add a GitHub account
    via the **+Add** button, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.2 – The button to add a GitHub account'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.02_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.2 – The button to add a GitHub account
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we press the button, we will be redirected to the GitHub authentication
    portal, where we can log in with an existing GitHub account or create an account
    if we don''t have one. After successful authentication, we will be asked to authorize
    Visual Studio to interact with GitHub services, so it is essential to press the
    button that says **Authorize github**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.3 – The authorization button to connect Visual Studio and GitHub'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.3_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.3 – The authorization button to connect Visual Studio and GitHub
  prefs: []
  type: TYPE_NORMAL
- en: 'After this step, the GitHub account will have been added as part of the accounts
    associated with the main Visual Studio account, so we can start working with the
    repositories of the GitHub account, as shown in *Figure 11.4*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.4 – The GitHub account added to the account listing'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.04_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.4 – The GitHub account added to the account listing
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have associated a GitHub account, let's learn how to create Git
    repositories in GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Git repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating a repository in GitHub from a Visual Studio project is very easy to
    do. In this section, you will have to test your knowledge by creating a new `GitDemo`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the new repository in GitHub from the project you have created, just
    select the **Git** | **Create Git Repository** menu option and fill in the repository
    information, according to the data shown in *Figure 11.5*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.5 – Filling in the information for a new repository on GitHub](img/Figure_11.05_B17873.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.5 – Filling in the information for a new repository on GitHub
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s briefly explain each option:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Local path**: This sets the path on the local machine where the source code
    is hosted (usually the path where you created the project).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**.gitignore template**: This allows you to select a template that establishes
    a set of files that will not be uploaded to the repository – for example, files
    that are generated after a compilation and can be regenerated on a different computer
    are selected by the selected template.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**License template**: This allows you to choose a license for the repository
    code, which indicates what users can and cannot do with the project code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`readme` file that describes the purpose of the repository.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Account**: This allows you to select the GitHub account to which the repository
    will be published. It is possible to associate an account from here if one has
    not been associated before.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Owner**: This allows you to set which GitHub account will be the owner of
    the repository if the account belongs to several work teams.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Repository name**: This allows you to set the name of the repository, although
    the project''s own name is normally used. This will affect the URL of the final
    repository.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description**: This allows you to enter a description of the repository created.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Private repository**: This allows you to set whether the repository will
    be public or private.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once these values are set, just click on the **Create and Push** button to start
    the repository creation process. It is important that you follow this step in
    your GitHub account so that you can carry out the activities in the following
    sections.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several signs to identify whether a project belongs to a Git repository,
    as shown in *Figure 11.6*, such as lock icons on the left side of source files,
    which indicate that they are the original repository files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.6 – Signs to identify a versioned project with Git'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.06_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.6 – Signs to identify a versioned project with Git
  prefs: []
  type: TYPE_NORMAL
- en: Another sign to identify whether a project belongs to a Git repository is that
    (as shown in *Figure 11.6*) at the bottom, there is a branch icon, indicating
    which branch we are working on. In our case, the branch is **master**.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know how to create a new repository, let's see how to clone a repository
    to our local machine.
  prefs: []
  type: TYPE_NORMAL
- en: Cloning a Git repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It may be the case that you want to clone an existing repository and not start
    from scratch because you need to work in a team, or simply while browsing the
    GitHub site, you came across a repository that caught your attention.
  prefs: []
  type: TYPE_NORMAL
- en: 'The easiest way to clone a repository is from the initial window of Visual
    Studio, which can be reached by either starting a new instance of Visual Studio,
    closing an open project, or from the **File** | **Start Window** menu. In this
    window, the first option is the **Clone a repository** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.7 – The Clone a repository option from the startup window'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.07_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.7 – The Clone a repository option from the startup window
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we press this button, a new window (shown in *Figure 11.8*) will open,
    asking us to indicate the URL of the remote repository and the local path where
    the source code files will be stored:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.8 – The window for cloning a repository'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.08_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.8 – The window for cloning a repository
  prefs: []
  type: TYPE_NORMAL
- en: 'For the purposes of this demonstration, we will use the URL of the repository
    created in the *Creating a Git repository* section, which should look like this:
    `https://github.com/{your-github-username-here}/GitDemo`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Because we previously created a project with the same name in the *Creating
    a Git repository* section, we have to indicate a different path for the project.
    For simplicity, we will change the name of the folder to `GitDemo2`, as shown
    in *Figure 11.8*:'
  prefs: []
  type: TYPE_NORMAL
- en: 'After filling in the information in the window, we will proceed to click on
    the **Clone** button, which will start the process of cloning the repository locally.
    Once the process is finished, the **Solution Explorer** window will show you a
    folder view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.9 – The folder view on the Solution Explorer window'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.09_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.9 – The folder view on the Solution Explorer window
  prefs: []
  type: TYPE_NORMAL
- en: To switch from the folder view to the solution view, and to be able to work
    with the source files, you must open the solution by clicking on the `GitDemo.sln`
    file. This will open the solution and all its files, allowing us to work on the
    source files, as we have done so far.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to change the default folder view to the solution view by selecting
    the option located at **Git** | **Settings** | **Git Global Settings** | **Automatically
    load the solution when opening a Git repository**.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have learned how to clone repositories, let's see how we can perform
    pushing and pulling actions on repositories.
  prefs: []
  type: TYPE_NORMAL
- en: Fetching, pulling, and pushing Git repositories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The most important commands when working with Git repositories have to do with
    fetching, pulling, and pushing operations. There are two main ways to execute
    these operations:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first way is by accessing through the **Git** menu, as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 11.10 – Accessing the Fetch, Pull, and Push operations from the menu'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.10_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.10 – Accessing the Fetch, Pull, and Push operations from the menu
  prefs: []
  type: TYPE_NORMAL
- en: 'The second is to enable the **Git Changes** window, which you can open through
    the **View** | **Git Changes** menu, as shown in *Figure 11.11*:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 11.11 – Accessing the Fetch, Pull, and Push operations from the Git
    Changes window'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.11_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.11 – Accessing the Fetch, Pull, and Push operations from the Git Changes
    window
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you may be wondering what each of these operations is for. So,
    let's now explain them briefly.
  prefs: []
  type: TYPE_NORMAL
- en: Fetching repositories
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The fetch operation allows you to check whether there are remote commits that
    should be incorporated into the local repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run this example, go to the GitHub portal, log in if you are not already
    logged in, and open the repository we created in the *Creating a Git repository*
    section called `GitDemo`. Once you are in the repository, go to the `Program.cs`
    file and click on the pencil icon, which will allow you to edit the file, as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.12 – The button to edit a repository file'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.12_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.12 – The button to edit a repository file
  prefs: []
  type: TYPE_NORMAL
- en: 'We will make a very simple change by adding a pair of exclamation marks at
    the end of the string in line four:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once this change has been made, go to the bottom of the page and click on the
    green button to commit the changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.13 – The button to commit changes on the repository'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.13_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.13 – The button to commit changes on the repository
  prefs: []
  type: TYPE_NORMAL
- en: 'If we now go to Visual Studio and click on the **Fetch** button, as shown in
    *Figure 11.14*, we can see a **0 outgoing / 1 incoming** message, indicating that
    there is a change in the repository that has not been applied to the local project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.14 – The button for fetching from the repository'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.14_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.14 – The button for fetching from the repository
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, if we click on this message, a new window will open, which will
    show us the version history of the project, showing us which changes we have not
    been applied locally:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.15 – The window showing the pending changes to be applied to the
    local repository'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.15_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.15 – The window showing the pending changes to be applied to the local
    repository
  prefs: []
  type: TYPE_NORMAL
- en: It should be noted that the fetch operation does not make any changes locally
    or in the remote repository, which the pull and push operations do. We will discuss
    these operations next.
  prefs: []
  type: TYPE_NORMAL
- en: Pulling repositories
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A pull operation refers to the act of downloading the latest changes from the
    repository to our local project. In the *Fetching repositories* section, we saw
    that we have a pending change to apply. So, we will proceed to click on the **Pull**
    button, as shown in *Figure 11.16*, to apply it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.16 – The button for pulling changes'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.16_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.16 – The button for pulling changes
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the changes have been downloaded, a message will appear, indicating which
    commit has been applied to the current project, as shown in *Figure 11.17*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.17 – The window showing the applied commit and the changes in it'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.17_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.17 – The window showing the applied commit and the changes in it
  prefs: []
  type: TYPE_NORMAL
- en: If we click on the name of the commit, a window will appear, showing the changes
    that have been applied to the project, as shown in *Figure 11.17*.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, although we have made a change in the remote repository from
    the main GitHub site, the most common way to do it is from Visual Studio itself.
    That is why, in the next section, we will analyze how to perform push operations
    to the repositories.
  prefs: []
  type: TYPE_NORMAL
- en: Pushing to repositories
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A push operation refers to uploading changes to a repository. To demonstrate
    how this operation works, let''s open the `Program.cs` file and modify line four,
    changing the `Hello World` string to `Hello Git`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Immediately, you will see that the file icon in the **Solution Explorer** changes
    to a red checkmark, indicating that there has been a change in the local repository,
    which we can upload to the repository on GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.18 – The checkmark indicating that the original file has been modified'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.18_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.18 – The checkmark indicating that the original file has been modified
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, in the **Git Changes** window, you will see a list of those files
    that have changes and can be uploaded to the repository, as shown in *Figure 11.19*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.19 – The list of files with changes that can be uploaded to the
    remote repository'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.19_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.19 – The list of files with changes that can be uploaded to the remote
    repository
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding figure, we can also see a button with the **Commit All** legend.
    This button is used to create a commit locally, without affecting the remote repository.
    This is a drop-down button that contains more options we can use, such as the
    **Commit All and Push** option. This option will push the changes to the remote
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'For our demonstration, we will add the **Modified Program.cs** message, as
    shown in *Figure 11.20*, and click on the **Commit All and Push** option, to apply
    the changes on the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.20 – The message added and the Commit All and Push option'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.20_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.20 – The message added and the Commit All and Push option
  prefs: []
  type: TYPE_NORMAL
- en: If you go to the online repository in your GitHub account, you will see that
    the changes have been applied successfully.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: It is recommended that before executing a push operation, you always perform
    a pull operation to avoid merge conflicts as much as possible. You can use the
    **Sync (Pull then Push)** button to perform both actions one after another.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have analyzed how to execute the most common operations in GitHub,
    let's see how to work with branches in Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Managing branches
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have been working with the main branch of our project called **master**.
    Imagine this branch as a timeline, where each event is performed by a commit.
    This is very useful when there is some conflict and you need to go back to a previous
    version, undoing the changes of a specific commit.
  prefs: []
  type: TYPE_NORMAL
- en: However, if you are working in a team, it is common that you will need to add
    a functionality in some kind of sandbox, before merging this functionality into
    the master branch. It is in this sort of scenario where Git branches will help
    us, allowing us to create a new project branch from an existing repository branch
    and work on it without affecting the functionality of the main repository.
  prefs: []
  type: TYPE_NORMAL
- en: To create a new branch, just go to the **Git** | **New Branch** menu. This will
    open a new window that asks for the branch name, the branch on which the new branch
    will be based, and a checkbox labeled **Checkout branch**, which, if checked,
    will transition to the new branch once it is created.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this demonstration, let''s use `branch01` as the name of the branch, which
    will be based on the **master** branch, and leave the checkbox selected, as shown
    in *Figure 11.21*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.21 – Creating a new branch'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.21_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.21 – Creating a new branch
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the new branch has been created, we can apply as many changes as we need.
    In our example, we will open the `Program.cs` file and modify line four again,
    with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Once this change has been made, we will push the code as shown in the *Pushing
    to repositories* section, making sure to apply the change to **branch01**, as
    shown in *Figure 11.22*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.22 – Pushing changes to the new branch'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.22_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.22 – Pushing changes to the new branch
  prefs: []
  type: TYPE_NORMAL
- en: This allows us to add functionality on an isolated remote repository without
    affecting the operation of the **master** branch.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have your code tested, you will probably want to integrate it back
    into the **master** branch. This can be done from the **View** | **Git Repository**
    window. In this window, we will have a section called **Branches**, where we will
    see the list of the different branches in our project. Just right-click on the
    **master** branch and click on the **Checkout** option to switch to the master
    branch, which is where we will add the **branch01** changes. Then, right-click
    on the **branch01** branch and select the **Merge ''branch01'' into ''master''**
    option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.23 – Merging branches'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.23_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.23 – Merging branches
  prefs: []
  type: TYPE_NORMAL
- en: This will cause the **branch01** branch to be merged with the **master** branch,
    which means that the new functionality will be integrated into the project.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have seen how to create branches and merge them, it is time to see
    how Visual Studio allows us to visualize the changes while editing the source
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing changes in repositories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are several ways in which Visual Studio helps us to visualize the changes
    in the repositories. The first one is through the **Git Repository** window, as
    shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.24 – The Git Repository window'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.24_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.24 – The Git Repository window
  prefs: []
  type: TYPE_NORMAL
- en: This window allows us to visualize whether there are versions that have not
    been applied in our local repository through **Incoming**, whether there are commits
    made locally but not pushed to the server through **Outgoing**, and also **Local
    History**.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we want to visualize the changes that have occurred between different commits,
    just right-click on two or more commits and select the **Compare Commits…** option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.25 – The Compare Commits… option'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.25_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.25 – The Compare Commits… option
  prefs: []
  type: TYPE_NORMAL
- en: This will display a new window with the changes that occurred between the different
    source files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another way to view changes to a single file is to right-click on a file in
    the **Solution Explorer** and then select the **Git** | **View History** option,
    which will open the changes window for the selected file only, as shown in *Figure
    11.26*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.26 – The option to view the history of changes to a specific file'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.26_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.26 – The option to view the history of changes to a specific file
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we already discussed the CodeLens functionality in [*Chapter 7*](B17873_07_ePub.xhtml#_idTextAnchor088),
    *Coding Efficiently with AI and Code Views*, which also contains functionality
    to view changes to the members of a class, such as the history of changes and
    who made modifications to a member.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned how Visual Studio integrates tools so that
    we can easily manage projects using Git and GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: Knowing how to work with Git-based projects is indispensable for all developers
    who want to manage their projects in a more controlled way, with the purpose of
    having an overview of a project structure in previous versions.
  prefs: []
  type: TYPE_NORMAL
- en: Likewise, if you work with other developers, you will be able to share project
    tasks, test them independently, and merge them when the code is reliable, in order
    not to damage the source code that has already been tested.
  prefs: []
  type: TYPE_NORMAL
- en: That is why we have learned how to set up a GitHub account in Visual Studio,
    how to create and clone repositories, how to perform fetch, pull, and push operations,
    how to manage branches in our projects, and finally, how to visualize changes
    in repositories.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, [*Chapter 12*](B17873_12_ePub.xhtml#_idTextAnchor142),
    *Sharing Code with Live Share*, you will learn how to work collaboratively with
    a development team on the same project in real time, thanks to the use of Live
    Share.
  prefs: []
  type: TYPE_NORMAL
