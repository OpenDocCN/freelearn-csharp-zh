["```cs\ndotnet new console\n```", "```cs\ndotnet add package Castle.Windsor\n```", "```cs\nusing System.Reflection;\nusing Castle.Windsor;\nusing Castle.Windsor.Installer;\nvar container = new WindsorContainer();\ncontainer.Install(FromAssembly.InThisApplication(Assembly.\n  GetEntryAssembly()));\n```", "```cs\nusing System.Reflection;\nusing Castle.MicroKernel.Registration;\nusing Castle.MicroKernel.SubSystems.Configuration;\nusing Castle.Windsor;\nnamespace Chapter14;\npublic class DefaultInstaller : IWindsorInstaller\n{\n    public void Install(IWindsorContainer container,\n      IConfigurationStore store)\n    {\n        container.Register(Classes\n          .FromAssemblyInThisApplication(Assembly\n          .GetEntryAssembly())\n            .Pick()\n            .WithService.DefaultInterfaces()\n            .LifestyleTransient());\n    }\n}\n```", "```cs\ndotnet add package Microsoft.Extensions.Logging\ndotnet add package Microsoft.Extensions.Logging.Console\n```", "```cs\nvar loggerFactory = LoggerFactory.Create(builder => builder.\n  AddConsole());\ncontainer.Register(Component.For<ILoggerFactory>().\n  Instance(loggerFactory));\n```", "```cs\nvar createLoggerMethod = typeof(LoggerFactoryExtensions)\n    .GetMethods(BindingFlags.Public | BindingFlags.Static)\n    .First(_ => _.Name == nameof(\n      LoggerFactory.CreateLogger) && _.IsGenericMethod);\ncontainer.Register(Component.For<ILogger>().\n  UsingFactoryMethod((kernel, context) =>\n{\n    var loggerFactory = kernel.Resolve<ILoggerFactory>();\n    return loggerFactory.CreateLogger(\n      context.Handler.ComponentModel.Implementation);\n}).LifestyleTransient());\ncontainer.Register(Component.For(typeof(ILogger<>)).\n  UsingFactoryMethod((kernel, context) =>\n{\n    var loggerFactory = kernel.Resolve<ILoggerFactory>();\n    var logger = createLoggerMethod\n      .MakeGenericMethod(context.RequestedType\n      .GenericTypeArguments[0]).Invoke(null, new[] {\n      loggerFactory });\n    return logger;\n}));\n```", "```cs\nusing Castle.DynamicProxy;\nnamespace Chapter14;\npublic class LoggingInterceptor : IInterceptor\n{\n    public void Intercept(IInvocation invocation)\n    {\n        // Do something before\n        invocation.Proceed();\n        // Do something after\n    }\n}\n```", "```cs\nusing Microsoft.Extensions.Logging;\nnamespace Chapter14;\ninternal static partial class LoggingInterceptorLogMessages\n{\n    [LoggerMessage(1, LogLevel.Information, \"Before\n      invoking {Method}\", EventName = \"BeforeInvocation\")]\n    internal static partial void BeforeInvocation(this\n      ILogger logger, string method);\n    [LoggerMessage(2, LogLevel.Error, \"Error invoking\n      {Method}\", EventName = \"InvocationError\")]\n    internal static partial void InvocationError(this\n      ILogger logger, string method, Exception exception);\n    [LoggerMessage(3, LogLevel.Information, \"Before\n      invoking {Method}\", EventName = \"AfterInvocation\")]\n    internal static partial void AfterInvocation(this\n      ILogger logger, string method);\n}\n```", "```cs\nusing Castle.DynamicProxy;\nusing Microsoft.Extensions.Logging;\nnamespace Chapter14;\npublic class LoggingInterceptor : IInterceptor\n{\n    readonly ILoggerFactory _loggerFactory;\n    public LoggingInterceptor(ILoggerFactory loggerFactory)\n    {\n        _loggerFactory = loggerFactory;\n    }\n    public void Intercept(IInvocation invocation)\n    {\n        var logger = _loggerFactory.CreateLogger(\n          invocation.TargetType)!;\n        logger.BeforeInvocation(invocation.Method.Name);\n        invocation.Proceed();\n        logger.AfterInvocation(invocation.Method.Name);\n    }\n}\n```", "```cs\nusing System.Reflection;\nusing Castle.MicroKernel.Registration;\nusing Castle.MicroKernel.SubSystems.Configuration;\nusing Castle.Windsor;\nnamespace Chapter14;\npublic class DefaultInstaller : IWindsorInstaller\n{\n    public void Install(IWindsorContainer container,\n      IConfigurationStore store)\n    {\n        // Added\n        container.Register(Component.For<\n          LoggingInterceptor>());\n        container.Register(Classes\n          .FromAssemblyInThisApplication(Assembly\n          .GetEntryAssembly())\n            .Pick()\n            .WithService.DefaultInterfaces()\n            // Added\n            .Configure(_ =>\n              _.Interceptors<LoggingInterceptor>())\n            .LifestyleTransient());\n    }\n}\n```", "```cs\nnamespace Chapter14;\npublic interface IUsersService\n{\n    Task<Guid> Register(string userName, string password);\n}\n```", "```cs\nusing Microsoft.Extensions.Logging;\nnamespace Chapter14;\npublic class UsersService : IUsersService\n{\n    readonly ILogger<UsersService> _logger;\n    public UsersService(ILogger<UsersService> logger)\n    {\n        _logger = logger;\n    }\n    public Task<Guid> Register(string userName,\n      string password)\n    {\n        _logger.LogInformation(\"Inside register method\");\n        var id = Guid.NewGuid();\n        return Task.FromResult(id);\n    }\n}\n```", "```cs\nvar usersService = container.Resolve<IUsersService>();\nvar result = await usersService.Register(\"jane@doe.io\", \"Password1\");\nConsole.ReadLine();\n```", "```cs\ninfo: Chapter14.UsersService[1]\n      Before invoking Register\ninfo: Chapter14.UsersService[0]\n      Inside register method\ninfo: Chapter14.UsersService[3]\n      Before invoking Register\n```", "```cs\npublic void Intercept(IInvocation invocation)\n{\n    var logger = _loggerFactory\n      .CreateLogger(invocation.TargetType)!;\n    logger.BeforeInvocation(invocation.Method.Name);\n    try\n    {\n        invocation.Proceed();\n        if (invocation.ReturnValue is Task task)\n        {\n            task.ContinueWith(t =>\n            {\n                if (t.IsFaulted)\n                {\n                    logger.InvocationError(\n                      invocation.Method.Name,\n                      t.Exception!);\n                }\n                else\n                {\n                    logger.AfterInvocation(\n                      invocation.Method.Name);\n                }\n            });\n        }\n        else\n        {\n            logger.AfterInvocation(invocation.Method.Name);\n        }\n    }\n    catch (Exception ex)\n    {\n        logger.InvocationError(invocation.Method.Name, ex);\n        throw;\n    }\n}\n```", "```cs\nnamespace Chapter14;\npublic interface IAuthenticator\n{\n    bool Authenticate(string username, string password);\n}\n```", "```cs\nnamespace Chapter14;\npublic class Authenticator : IAuthenticator\n{\n    public bool Authenticate(string username, string password)\n    {\n        return true;\n    }\n}\n```", "```cs\nnamespace Chapter14;\npublic interface IAuthorizer\n{\n    bool IsAuthorized(string username, string action);\n}\n```", "```cs\nnamespace Chapter14;\npublic class Authorizer : IAuthorizer\n{\n    public bool IsAuthorized(string username, string action)\n    {\n        return true;\n    }\n}\n```", "```cs\ncontainer.Register(\n    Component.For<IAuthenticator>()\n        .ImplementedBy<Authenticator>()\n        .LifestyleTransient());\ncontainer.Register(\n    Component.For<IAuthorizer>()\n        .ImplementedBy<Authorizer>()\n        .LifestyleTransient());\n```", "```cs\ncontainer.Register(\n    Component.For<IUsersService>()\n        .ImplementedBy<UsersService>()\n        .Proxy.AdditionalInterfaces(typeof(IAuthorizer),\n          typeof(IAuthenticator))\n        .Proxy.MixIns(_ => _\n            .Component<Authorizer>()\n            .Component<Authenticator>())\n        .Interceptors<LoggingInterceptor>()\n        .LifestyleTransient());\n```", "```cs\nusersService.GetType().GetInterfaces()\n```", "```cs\nvar authenticated = (usersService as IAuthenticator)!.\n  Authenticate(\"jane@doe.io\", \"Password1\");\nvar authorized = (usersService as IAuthorizer)!.IsAuthorized(\"jane@\n  doe.io\", \"Some Action\");\nConsole.WriteLine($\"Authenticated: {authenticated}\");\nConsole.WriteLine($\"Authorized: {authorized}\");\n```", "```cs\ninfo: Chapter14.UsersService[1]\n      Before invoking Register\ninfo: Chapter14.UsersService[0]\n      Inside register method\ninfo: Chapter14.Authenticator[1]\n      Before invoking Authenticate\ninfo: Chapter14.UsersService[3]\n      Before invoking Register\ninfo: Chapter14.Authenticator[3]\n      Before invoking Authenticate\ninfo: Chapter14.Authorizer[1]\n      Before invoking IsAuthorized\ninfo: Chapter14.Authorizer[3]\n      Before invoking IsAuthorized\nAuthenticated: True\nAuthorized: True\n```", "```cs\npublic interface IUsersServiceComposition : IUsersService, IAuthenticator, IAuthorizer\n{\n}\n```", "```cs\ncontainer.Register(\n    Component.For<IUsersServiceComposition>()\n        .UsingFactoryMethod((kernel, context) =>\n        {\n            var proxyGenerator = new ProxyGenerator();\n            var proxyGenerationOptions = new ProxyGenerationOptions();\n            proxyGenerationOptions.AddMixinInstance(container.\n            Resolve<IAuthorizer>());\n            proxyGenerationOptions.AddMixinInstance(container.\n            Resolve<IAuthenticator>());\n            var logger = container.Resolve<ILogger<UsersService>>();\n            proxyGenerationOptions.AddMixinInstance(new\n            UsersService(logger));\n            var usersServiceComposition = (proxyGenerator.\n            CreateClassProxyWithTarget(\n                typeof(object),\n                new[] { typeof(IUsersServiceComposition) },\n                new object(),\n                proxyGenerationOptions) as IUsersServiceComposition)!;\n            return usersServiceComposition;\n        }));a\n```", "```cs\nvar composition = container.Resolve<IUsersServiceComposition>();\nauthenticated = composition.Authenticate(\"jane@doe.io\", \"Password1\");\nauthorized = composition.IsAuthorized(\"jane@doe.io\", \"Some Action\");\nConsole.WriteLine($\"Authenticated: {authenticated}\");\nConsole.WriteLine($\"Authorized: {authorized}\");\n```", "```cs\ninfo: Chapter14.UsersService[1]\n      Before invoking Register\ninfo: Chapter14.UsersService[0]\n      Inside register method\ninfo: Chapter14.Authenticator[1]\n      Before invoking Authenticate\ninfo: Chapter14.UsersService[3]\n      Before invoking Register\ninfo: Chapter14.Authenticator[3]\n      Before invoking Authenticate\ninfo: Chapter14.Authorizer[1]\n      Before invoking IsAuthorized\ninfo: Chapter14.Authorizer[3]\n      Before invoking IsAuthorized\nAuthenticated: True\nAuthorized: True\nAuthenticated: True\nAuthorized: True\n```", "```cs\nnamespace Chapter14.Todo;\npublic interface ITodoService\n{\n    void Add(string item);\n}\n```", "```cs\nnamespace Chapter14.Todo;\npublic class TodoService : ITodoService\n{\n    public void Add(string item)\n    {\n        Console.WriteLine($\"Adding '{item}' to the todo list\");\n    }\n}\n```", "```cs\nusing Castle.DynamicProxy;\nnamespace Chapter14;\npublic class AuthorizationInterceptor : IInterceptor\n{\n    readonly IUsersServiceComposition _usersService;\n    public AuthorizationInterceptor(IUsersServiceComposition\n      usersService)\n    {\n        _usersService = usersService;\n    }\n    public void Intercept(IInvocation invocation)\n    {\n        if (_usersService.IsAuthorized(\"jane@doe.io\", invocation.\n          Method.Name))\n        {\n            invocation.Proceed();\n        }\n    }\n}\n```", "```cs\nusing System.Reflection;\nusing Castle.DynamicProxy;\nnamespace Chapter14;\npublic class InterceptorSelector : IinterceptorSelector\n{\n    public Iinterceptor[] SelectInterceptors(Type type, MethodInfo\n      method, Iinterceptor[] interceptors)\n    {\n        if (type.Namespace?.StartsWith(\"Chapter14.Todo\",          StringComparison.InvariantCulture) ?? false)\n        {\n            return interceptors;\n        }\n        return interceptors.Where(_ => _.GetType() !=\n        typeof(AuthorizationInterceptor)).ToArray();\n    }\n}\n```", "```cs\ncontainer.Register(Component.For<InterceptorSelector>());\ncontainer.Register(Component.For<AuthorizationInterceptor>());\n```", "```cs\n.Interceptors<AuthorizationInterceptor>()\n.SelectInterceptorsWith(s => s.Service<InterceptorSelector>())\n```", "```cs\ncontainer.Register(\n    Component.For<IUsersService>()\n        .ImplementedBy<UsersService>()\n        .Proxy.AdditionalInterfaces(typeof(IAuthorizer),        typeof(IAuthenticator))\n        .Proxy.MixIns(_ => _\n            .Component<Authorizer>()\n            .Component<Authenticator>())\n        .Interceptors<LoggingInterceptor>()\n        // Add the interceptor and the selector\n        .Interceptors<AuthorizationInterceptor>()\n        .SelectInterceptorsWith(s => s.Service<InterceptorSelector>())\n        .LifestyleTransient());\n```", "```cs\ncontainer.Register(Classes.FromAssemblyInThisApplication(Assembly.\n  GetEntryAssembly())\n    .Pick()\n    .WithService.DefaultInterfaces()\n    .Configure(_ => _\n        .Interceptors<LoggingInterceptor>()\n        .Interceptors<AuthorizationInterceptor>()\n        // Add the interceptor and the selector\n        .Interceptors<AuthorizationInterceptor>()\n        .SelectInterceptorsWith(s =>\n          s.Service<InterceptorSelector>()))\n    .LifestyleTransient());\n```", "```cs\nvar todo = container.Resolve<ITodoService>();\ntodo.Add(\"Buy milk\");\n```", "```cs\ninfo: Chapter14.UsersService[1]\n      Before invoking Register\ninfo: Chapter14.UsersService[0]\n      Inside register method\ninfo: Chapter14.UsersService[3]\n      Before invoking Register\ninfo: Chapter14.Authenticator[1]\n      Before invoking Authenticate\ninfo: Chapter14.Authenticator[3]\n      Before invoking Authenticate\ninfo: Chapter14.Authorizer[1]\n      Before invoking IsAuthorized\ninfo: Chapter14.Authorizer[3]\n      Before invoking IsAuthorized\nAuthenticated: True\nAuthorized: True\nAuthenticated: True\nAuthorized: True\ninfo: Chapter14.Todo.TodoService[1]\n      Before invoking Add\nAdding 'Buy milk' to the todo list\ninfo: Chapter14.Todo.TodoService[3]\n      Before invoking Add\n```", "```cs\nnamespace Chapter14;\npublic class Authorizer : IAuthorizer\n{\n    public bool IsAuthorized(string username, string action)\n    {\n        return false;\n    }\n}\n```", "```cs\ninfo: Chapter14.UsersService[1]\n      Before invoking Register\ninfo: Chapter14.UsersService[0]\n      Inside register method\nAuthenticated: True\ninfo: Chapter14.UsersService[3]\n      Before invoking Register\nAuthorized: False\ninfo: Chapter14.Authenticator[1]\n      Before invoking Authenticate\ninfo: Chapter14.Authenticator[3]\n      Before invoking Authenticate\ninfo: Chapter14.Authorizer[1]\n      Before invoking IsAuthorized\ninfo: Chapter14.Authorizer[3]\n      Before invoking IsAuthorized\nAuthenticated: True\nAuthorized: False\ninfo: Chapter14.Todo.TodoService[1]\n      Before invoking Add\ninfo: Chapter14.Todo.TodoService[3]\n      Before invoking Add\n```"]