["```cs\npublic class AuthorizationServerProvider : OAuthAuthorizationServerProvider \n    { \n        public override async Task ValidateClientAuthentication(OAuthValidateClientAuthenticationContext context) \n        { \n            context.Validated(); \n        } \n\n        public override async Task GrantResourceOwnerCredentials(OAuthGrantResourceOwnerCredentialsContext context) \n        { \n            context.OwinContext.Response.Headers.Add(\"Access-Control-Allow-Origin\", new[] { \"*\" }); \n            string userName = null; \n\n            using (AuthenticationRepository authenticationRepository = new AuthenticationRepository()) \n            { \n                IdentityUser user = await authenticationRepository.FindUser(context.UserName, context.Password); \n\n                if (user == null) \n                { \n                    context.SetError(\"invalid_grant\", \"Incorrect user name or password\"); \n                    return; \n                } \n\n                userName = user.UserName; \n            } \n\n            var identity = new ClaimsIdentity(context.Options.AuthenticationType); \n            identity.AddClaim(new Claim(\"Role\", \"User\")); \n            identity.AddClaim(new Claim(\"UserName\", userName)); \n\n            context.Validated(identity); \n        } \n    }   \n\n```", "```cs\npublic class OAuthBearerTokenAuthenticationProvider : OAuthBearerAuthenticationProvider \n    { \n        public override Task RequestToken(OAuthRequestTokenContext context) \n        { \n            string cookieToken = null; \n            string queryStringToken = null; \n            string headerToken = null; \n\n            try \n            { \n                cookieToken = context.OwinContext.Request.Cookies[\"BearerToken\"]; \n            } \n            catch (NullReferenceException) \n            { \n                System.Diagnostics.Debug.WriteLine(\"The cookie does not contain the bearer token\"); \n            } \n\n            try \n            { \n                queryStringToken = context.OwinContext.Request.Query[\"BearerToken\"].ToString(); \n            } \n            catch (NullReferenceException) \n            { \n                System.Diagnostics.Debug.WriteLine(\"The query string does not contain the bearer token\"); \n            } \n\n            try \n            { \n                headerToken = context.OwinContext.Request.Headers[\"BearerToken\"]; \n            } \n            catch (NullReferenceException) \n            { \n                System.Diagnostics.Debug.WriteLine(\"The connection header does not contain the bearer token\"); \n            } \n\n            if (!String.IsNullOrEmpty(cookieToken)) \n                context.Token = cookieToken; \n\n            else if (!String.IsNullOrEmpty(queryStringToken)) \n                context.Token = queryStringToken; \n\n            else if (!String.IsNullOrEmpty(headerToken)) \n                context.Token = headerToken; \n\n            return Task.FromResult<object>(null); \n        } \n    } \n\n```", "```cs\npublic class AuthenticationRepository : IDisposable \n    { \n        private AuthenticationContext authenticationContext; \n        private UserManager<IdentityUser> userManager; \n\n        public AuthenticationRepository() \n        { \n            authenticationContext = new AuthenticationContext(); \n            userManager = new UserManager<IdentityUser>(new UserStore<IdentityUser>(authenticationContext)); \n        } \n\n        public async Task<IdentityResult> RegisterUser(UserModel userModel) \n        { \n            IdentityUser newUser = new IdentityUser() \n            { \n                UserName = userModel.Username \n            }; \n\n            var foundUser = await userManager.FindByNameAsync(newUser.UserName); \n            if (foundUser != null) \n            { \n                await userManager.RemovePasswordAsync(foundUser.Id); \n                return await userManager.AddPasswordAsync(foundUser.Id, userModel.Password); \n            } \n            else \n            { \n                return await userManager.CreateAsync(newUser, userModel.Password); \n            } \n        } \n\n        public async Task<IdentityUser> FindUser(string userName, string password) \n        { \n            return await userManager.FindAsync(userName, password); \n        } \n\n        public void Dispose() \n        { \n            authenticationContext.Dispose(); \n            userManager.Dispose(); \n        } \n    } \n\n```", "```cs\npublic class AuthenticationContext : IdentityDbContext<IdentityUser> \n    { \n        public AuthenticationContext() \n            : base(\"AuthenticationContext\") \n        { \n        } \n    }  \n\n```", "```cs\npublic static class WebApiConfig \n    { \n        public static void Register(HttpConfiguration config) \n        { \n            config.Routes.MapHttpRoute( \n                name: \"DefaultApi\", \n                routeTemplate: \"api/{controller}/{action}/{id}\", \n                defaults: new { id = RouteParameter.Optional } \n            ); \n        } \n    } \n\n```", "```cs\nActionName(\"Register\") = http://{IP Address}:{Port}/Register \n\n```", "```cs\npublic class Startup \n    { \n        public void Configuration(IAppBuilder app) \n        {  \n            HttpConfiguration config = new HttpConfiguration(); \n            WebApiConfig.Register(config); \n\n            app.UseWebApi(config); \n        } \n    } \n\n```", "```cs\npublic class UserModel { \n\n        [Required] \n        public string Username { get; set; } \n\n        [Required] \n        public string Password { get; set; } \n    } \n\n```", "```cs\npublic class AccountController : ApiController \n    { \n        private AuthenticationRepository authenticationRepository; \n\n        public AccountController() \n        { \n            authenticationRepository = new AuthenticationRepository(); \n        } \n\n        [HttpPost] \n        [AllowAnonymous] \n        [ActionName(\"Register\")] \n        public async Task<IHttpActionResult> Register(UserModel userModel) \n        { \n            if (!ModelState.IsValid) \n            { \n                return BadRequest(ModelState); \n            } \n\n            var result = await authenticationRepository.RegisterUser(userModel); \n            return Ok(); \n        } \n    } \n\n```", "```cs\n[HttpPost] \n        [AllowAnonymous] \n        [ActionName(\"Login\")] \n        public async Task<bool> Login(UserModel userModel) \n        { \n            if (!ModelState.IsValid) \n            { \n                return false; \n            } \n            var result = await \n            authenticationRepository.FindUser(userModel.Username, \n            userModel.Password); \n            return (result != null); \n        } \n\n```", "```cs\n         protected override void Dispose(bool disposing) \n        { \n            if (disposing) \n                authenticationRepository.Dispose(); \n\n            base.Dispose(disposing); \n        } \n\n```", "```cs\npublic class Startup \n    { \n        ... \n\npublic void ConfigureOAuth(IAppBuilder app) \n        { \n            OAuthAuthorizationServerOptions OAuthServerOptions = new OAuthAuthorizationServerOptions() \n            { \n                AllowInsecureHttp = true, \n                TokenEndpointPath = new PathString(\"/token\"), \n                AccessTokenExpireTimeSpan = TimeSpan.FromDays(1), \n                Provider = new AuthorizationServerProvider() \n            }; \n\n            app.UseOAuthAuthorizationServer(OAuthServerOptions); \n            app.UseOAuthBearerAuthentication(new OAuthBearerAuthenticationOptions() \n            { \n                Provider = new OAuthBearerTokenAuthenticationProvider() \n            }); \n\n        } \n\n   ... \n} \n\n```", "```cs\n[Authorize] \n    public class ChatHub : Hub \n    { \n        public static readonly ConcurrentDictionary<string, SigRUser> Users \n            = new ConcurrentDictionary<string, SigRUser>(StringComparer.InvariantCultureIgnoreCase); \n\n  public override Task OnConnected() \n        { \n            var userName = (Context.User.Identity as ClaimsIdentity).Claims.FirstOrDefault(claim => claim.Type == \"UserName\").Value; \n            string connectionId = Context.ConnectionId; \n\n            var user = Users.GetOrAdd(userName, _ => new SigRUser \n            { \n                Name = userName, \n                ConnectionIds = new HashSet<string>() \n            }); \n\n            lock (user.ConnectionIds) \n            { \n\n                user.ConnectionIds.Add(connectionId); \n                NotifyOtherConnectedUsers(userName); \n            } \n\n            return base.OnConnected(); \n        } \n\n        public override Task OnDisconnected(bool stopCalled) \n        { \n            var userName = (Context.User.Identity as ClaimsIdentity).Claims.FirstOrDefault(claim => claim.Type == \"UserName\").Value; \n            string connectionId = Context.ConnectionId; \n\n            SigRUser user; \n            Users.TryGetValue(userName, out user); \n\n            if (user != null) \n            { \n                lock (user.ConnectionIds) \n                { \n                    SigRUser removedUser; \n                    Users.TryRemove(userName, out removedUser); \n\n                    NotifyOtherConnectedUsers(userName); \n                } \n            } \n\n            return base.OnDisconnected(stopCalled); \n        } \n    } \n\n```", "```cs\npublic void NotifyOtherConnectedUsers(string userName) \n        { \n            var connectionIds = Users.Where(x => !x.Key.Contains(userName)) \n            .SelectMany(x => x.Value.ConnectionIds) \n            .Distinct(); \n\n            foreach (var cid in connectionIds) \n            { \n                Clients.Client(cid).displayMessage(\"clients\", JsonConvert.SerializeObject(Users.Select(x => x.Key))); \n            } \n        } \n\n```", "```cs\npublic void Send(string message, string to) \n        { \n            SigRUser receiver; \n\n            if (Users.TryGetValue(to, out receiver)) \n            { \n                var userName = (Context.User.Identity as ClaimsIdentity).Claims.FirstOrDefault(claim => claim.Type == \"UserName\").Value; \n\n                SigRUser sender; \n                Users.TryGetValue(userName, out sender); \n\n                lock (receiver.ConnectionIds) \n                { \n                    foreach (var cid in receiver.ConnectionIds) \n                    { \n                        Clients.Client(cid).displayMessage(\"chat\", message); \n                    } \n                } \n            } \n        } \n\n```", "```cs\npublic class SignalRClient\n     {\n         private readonly HubConnection _connection;\n         private readonly IHubProxy _proxy;\n         public event EventHandler<Tuple<string, string>> OnDataReceived;\n         public SignalRClient()\n         {\n             _connection = new HubConnection(\"http://{IP Address}:{Port}/\");\n             _proxy = _connection.CreateHubProxy(\"ChatHub\");\n         }\n }  \n\n```", "```cs\npublic async Task<bool> Connect(string accessToken)\n         {\n             try\n             {\n                 _connection.Headers.Add(\"Authorization\",\n                 string.Format(\"Bearer {0}\", accessToken));\n                 await _connection.Start();\n                 _proxy.On<string, string>(\"displayMessage\", (id, data) =>\n                 {\n                     if (OnDataReceived != null)\n                     {\n                         OnDataReceived(this, new Tuple<string,\n                         string>(id, data));\n                     }\n                 });\n                 return true;\n             }\n             catch (Exception e)\n             {\n                 Console.WriteLine(e);\n             }\n             return false;\n         }\n         public void Disconnect()\n         {\n             _connection.Stop();\n             _connection.Dispose();\n         }\n```", "```cs\npublic async Task SendMessageToClient(string user, string message)\n{\n    await _proxy.Invoke(\"Send\", new object[]\n    {\n        message,\n        user\n    });\n}\n```", "```cs\n\npublic class WebApiAccess\n     {\n         private string _baseAddress = \"http://{IP Address}:{Port}/\";\n         public async Task<bool> LoginAsync(string name, string password,\n         CancellationToken? cancellationToken = null)\n         {\n             var httpMessage = new HttpRequestMessage(HttpMethod.Post,\n             new Uri(_baseAddress + \"api/Account/Login\"))\n             {\n                 Content = new StringContent(string.Format\n                 (\"Username={0}&Password={1}\", name, password), Encoding.UTF8,\n                  \"application/x-www-form-urlencoded\"),\n             };\n             var client = new HttpClient();\n             var response = await client.SendAsync(httpMessage,\n             cancellationToken ?? new CancellationToken(false));\n             switch (response.StatusCode)\n             {\n                 case HttpStatusCode.NotFound:\n                     throw new Exception(string.Empty);\n             }\n             var responseContent = await response.Content.ReadAsStringAsync();\n             var loginSuccess = false;\n             bool.TryParse(responseContent, out loginSuccess);\n             return loginSuccess;\n         }\n     }  \n\n```", "```cs\npublic async Task<bool> RegisterAsync(string name, string password, CancellationToken? cancellationToken = null)\n         {\n             var httpMessage = new HttpRequestMessage(HttpMethod.Post,\n             new Uri(_baseAddress + \"api/Account/Register\"))\n             {\n                 Content = new StringContent(string.Format\n                 (\"Username={0}&Password={1}\", name, password), Encoding.UTF8,\n                 \"application/x-www-form-urlencoded\"),\n             };\n             var client = new HttpClient();\n             var response = await client.SendAsync(httpMessage,\n             cancellationToken ?? new CancellationToken(false));\n             return response.StatusCode == HttpStatusCode.OK;\n         } \n\n```", "```cs\npublic async Task<TokenContract> GetTokenAsync(string name, string password, CancellationToken? cancellationToken = null)\n         {\n             var httpMessage = new HttpRequestMessage(HttpMethod.Post,\n             new Uri(_baseAddress + \"token\"))\n             {\n                 Content = new StringContent(string.Format\n                 (\"Username={0}&Password={1}&grant_type=password\", name,\n                 password), Encoding.UTF8, \"application/x-www-form-urlencoded\"),\n             };\n             var client = new HttpClient();\n             var response = await client.SendAsync(httpMessage,\n             cancellationToken ?? new CancellationToken(false));\n             switch (response.StatusCode)\n             {\n                 case HttpStatusCode.NotFound:\n                     throw new Exception(string.Empty);\n             }\n             var tokenJson = await response.Content.ReadAsStringAsync();\n             return JsonConvert.DeserializeObject<TokenContract>(tokenJson);\n            }\n```", "```cs\npublic class TokenContract\n     {\n         [JsonProperty(\"access_token\")]\n         public string AccessToken { get; set; }\n         [JsonProperty(\"token_type\")]\n         public string TokenType { get; set; }\n         [JsonProperty(\"expires_in\")]\n         public int ExpiresIn { get; set; }\n         [JsonProperty(\"userName\")]\n         public string Username { get; set; }\n         [JsonProperty(\".issued\")]\n         public string IssuedAt { get; set; }\n         [JsonProperty(\".expires\")]\n         public string ExpiresAt { get; set; }\n     }  \n\n```", "```cs\npublic async Task<IEnumerable<string>>\n GetAllConnectedUsersAsync(CancellationToken? cancellationToken = null)\n         {\n             var httpMessage = new HttpRequestMessage(HttpMethod.Get,\n             new Uri(_baseAddress + \"api/Account/GetAllConnectedUsers\"));\n             var client = new HttpClient();\n             var response = await client.SendAsync(httpMessage,\n             cancellationToken ?? new CancellationToken(false));\n             switch (response.StatusCode)\n             {\n                 case HttpStatusCode.NotFound:\n                     throw new Exception(string.Empty);\n             }\n             var responseContent = await response.Content.ReadAsStringAsync();\n             return JsonConvert.DeserializeObject<IEnumerable<string>>\n(responseContent);\n         }  \n\n```", "```cs\npublic class ApplicationState\n     {\n         #region Public Properties\n         public string AccessToken { get; set; }\n         public string Username { get; set; }\n         #endregion\n     } \n\n```", "```cs\npublic interface INavigationService { void PushPresenter(BasePresenter presenter); } \n\n```", "```cs\npublic class NavigationService : INavigationService\n    {\n         #region Private Properties\n         private UINavigationController _navigationController;\n         #endregion\n         #region Constructors\n         public NavigationService(UINavigationController navigationController)\n         {\n             _navigationController = navigationController;\n         }\n         #endregion\n         #region INavigationService implementation\n         public void PushPresenter(BasePresenter presenter)\n         {\n             if (presenter is LoginPresenter)\n             {\n                 var viewController = new LoginViewController\n                 (presenter as LoginPresenter);\n                 _navigationController.PushViewController(viewController, true);\n             }\n\n        }\n\n        public void PopPresenter(bool animated)\n         {\n           _navigationController.PopViewController(animated);\n         }\n\n         #endregion\n     }  \n\n```", "```cs\n[Application]\n     public class ChatApplication : Application\n     {\n         #region Public Properties\n         public object Presenter\n         {\n             get;\n             set;\n         }\n         public Activity CurrentActivity\n         {\n             get;\n             set;\n         }\n         #endregion\n         #region Constructors\n         public ChatApplication()\n             : base()\n         {\n         }\n         public ChatApplication(IntPtr javaReference,\n         JniHandleOwnership transfer)\n             : base(javaReference, transfer)\n         {\n         }\n         #endregion\n         #region Public Methods\n         public static ChatApplication GetApplication(Context context)\n         {\n             return (ChatApplication)context.ApplicationContext;\n         }\n         #endregion\n     }  \n\n```", "```cs\npublic class NavigationService : INavigationService\n     {\n         private ChatApplication _application;\n         public NavigationService(ChatApplication application)\n         {\n             _application = application;\n         }\n         public void PushPresenter(BasePresenter presenter)\n         {\n             var oldPresenter = _application.Presenter as BasePresenter;\n             if (presenter != oldPresenter)\n             {\n                 _application.Presenter = presenter;\n                 Intent intent = null;\n                 if (presenter is LoginPresenter)\n                 {\n                     intent = new Intent(_application.CurrentActivity,\n                     typeof(LoginActivity));\n                 }\n                 if (intent != null)\n                 {\n                     _application.CurrentActivity.StartActivity(intent);\n                 }\n             }\n         }\n         public void PopPresenter(bool animated)\n         {\n             _application.CurrentActivity.Finish();\n         }  \n    }  \n\n```", "```cs\npublic interface IView\n  {\n    void SetMessage(string message);\n    bool IsInProgress\n      {\n         get;\n         set;\n      }\n  } \n\n```", "```cs\npublic abstract class BasePresenter\n     {\n         #region Private Properties\n         private IDictionary<string, Action<string>> _signalREvents;\n         #endregion\n         #region Protected Properties\n         protected INavigationService _navigationService;\n         protected ApplicationState _state;\n         protected SignalRClient _signalRClient;\n         protected WebApiAccess _webApiAccess;\n         protected string _accessToken;\n         #endregion\n\n         #region Events\n         public event EventHandler<ConnectedClientsUpdatedEventArgs>\n         ConnectedClientsUpdated;\n         public event EventHandler<ChatEventArgs> ChatReceived;\n         #endregion \n } \n\n```", "```cs\n         #region Constructors\n         public BasePresenter()\n         {\n             _webApiAccess = new WebApiAccess();\n             _signalREvents = new Dictionary<string, Action<string>>()\n             {\n                 {\"clients\", (data) =>\n                      {\n                         var list = JsonConvert.DeserializeObject<IEnumerable<string>>(data);\n                         if (ConnectedClientsUpdated != null)\n                         {\n                             ConnectedClientsUpdated(this, new ConnectedClientsUpdatedEventArgs(list.Select(x => new Client\n                             {\n                                 Username = x,\n                             })));\n                         }\n                     }\n                 },\n                 {\"chat\", (data) =>\n                      {\n                         if (ChatReceived != null)\n                         {\n                             ChatReceived(this, new ChatEventArgs(data));\n                         }\n                     }\n                 },\n             };\n         }\n         #endregion  \n         #region Protected Methods\n         protected void HandleSignalRDataReceived(object sender, Tuple<string, string> e)\n         {\n             _signalREvents[e.Item1](e.Item2);\n         }\n         #endregion\n```", "```cs\npublic class ConnectedClientsUpdatedEventArgs : EventArgs\n     {\n         public IList<Client> ConnectedClients { private set; get;\n     }\n         public ConnectedClientsUpdatedEventArgs(IEnumerable<Client> connectedClients)\n         {\n             ConnectedClients = new List<Client>();\n             foreach (var client in connectedClients)\n             {\n                 ConnectedClients.Add(client);\n             }\n         }\n     } \n\n```", "```cs\npublic class ChatEventArgs : EventArgs\n     {\n         public string Message { private set; get;\n     }\n         public ChatEventArgs(string message)\n         {\n             Message = message;\n         }\n     } \n\n```", "```cs\npublic class LoginPresenter : BasePresenter\n     {\n         #region Private Properties\n         private ILoginView _view;\n         #endregion\n         #region IClientsListView\n         public interface ILoginView : IView\n         {\n             event EventHandler<Tuple<string, string>> Login;\n             event EventHandler<Tuple<string, string>> Register;\n         }\n         #endregion\n         #region Constructors\n         public LoginPresenter(ApplicationState state, INavigationService navigationService)\n         {\n             _navigationService = navigationService;\n             _state = state;\n             _webApiAccess = new WebApiAccess();\n         }\n         #endregion\n\n#region Public Methods\n         public void SetView(ILoginView view)\n         {\n             _view = view;\n             _view.Login -= HandleLogin;\n             _view.Login += HandleLogin;\n             _view.Register -= HandleRegister;\n             _view.Register += HandleRegister;\n         }\n         #endregion\n     }  \n```", "```cs\n         #region Private Methods\n         private async void HandleLogin(object sender, Tuple<string, string> user)\n         {\n             if (!_view.IsInProgress)\n             {\n                 _state.Username = user.Item1;\n                 _view.IsInProgress = true;\n                 if (user.Item2.Length >= 6)\n                 {\n                     var loggedIn = await _webApiAccess.LoginAsync(user.Item1, user.Item2, CancellationToken.None);\n                     if (loggedIn)\n                     {\n                         var tokenContract = await _webApiAccess.GetTokenAsync(user.Item1, user.Item2, CancellationToken.None);\n                         if (!string.IsNullOrEmpty(tokenContract.AccessToken))\n                         {\n                             var presenter = new ClientsListPresenter(_state, _navigationService, tokenContract.AccessToken);\n                             _navigationService.PushPresenter(presenter);\n                         }\n                         else\n                         {\n                             _view.SetErrorMessage(\"Failed to register user.\");\n                         }\n                     }\n                     else\n                     {\n                         _view.SetErrorMessage(\"Invalid username or password.\");\n                     }\n                 }\n                 else\n                 {\n                     _view.SetErrorMessage(\"Password must be at least 6 characters.\");\n                 }\n                 _view.IsInProgress = false;\n             }\n         } \n\n```", "```cs\nprivate async void HandleRegister(object sender, Tuple<string, string> user)\n         {\n             // make sure only once can we be registering at any one time\n             if (!_view.IsInProgress)\n             {\n                 _state.Username = user.Item1;\n                 _view.IsInProgress = true;\n                 if (user.Item2.Length >= 6)\n                 {\n                     var registerSuccess = await _webApiAccess.RegisterAsync(user.Item1, user.Item2, CancellationToken.None);\n                     if (registerSuccess)\n                     {\n                         _view.SetErrorMessage(\"User successfully registered.\");\n                     }\n                 }\n                 else\n                 {\n                     _view.SetErrorMessage(\"Password must be at least 6 characters.\");\n                 }\n                 _view.IsInProgress = false;\n             }\n         }\n         #endregion\n```", "```cs\npublic class LoginViewController : UIViewController, LoginPresenter.ILoginView\n     {\n         #region Private Properties\n         private bool _isInProgress = false;\n         private LoginPresenter _presenter;\n         private UITextField _loginTextField;\n         private UITextField _passwordTextField;\n         private UIActivityIndicatorView _activityIndicatorView;\n         #endregion\n         #region Constructors\n         public LoginViewController(LoginPresenter presenter)\n         {\n             _presenter = presenter;\n         }\n         #endregion\n    } \n\n```", "```cs\n#region Public Methods\n         public override void ViewDidLoad()\n         {\n             base.ViewDidLoad();\n             View.BackgroundColor = UIColor.White;\n             _presenter.SetView(this);\n             var width = View.Bounds.Width;\n             var height = View.Bounds.Height;\n             Title = \"Welcome\";\n             var titleLabel = new UILabel()\n             {\n                 TranslatesAutoresizingMaskIntoConstraints = false,\n                 Text = \"Chat\",\n                 Font = UIFont.FromName(\"Helvetica-Bold\", 22),\n                 TextAlignment = UITextAlignment.Center\n             };\n             _activityIndicatorView = new UIActivityIndicatorView()\n             {\n                 TranslatesAutoresizingMaskIntoConstraints = false,\n                 Color = UIColor.Black\n             };\n             var descriptionLabel = new UILabel()\n             {\n                 TranslatesAutoresizingMaskIntoConstraints = false,\n                 Text = \"Enter your login name to join the chat room.\",\n                 Font = UIFont.FromName(\"Helvetica\", 18),\n                 TextAlignment = UITextAlignment.Center\n             };\n             _loginTextField = new UITextField()\n             {\n                 TranslatesAutoresizingMaskIntoConstraints = false,\n                 Placeholder = \"Username\",\n                 Font = UIFont.FromName(\"Helvetica\", 18),\n                 BackgroundColor = UIColor.Clear.FromHex(\"#DFE4E6\"),\n                 TextAlignment = UITextAlignment.Center\n             };\n             _passwordTextField = new UITextField()\n             {\n                 TranslatesAutoresizingMaskIntoConstraints = false,\n                 Placeholder = \"Password\",\n                 Font = UIFont.FromName(\"Helvetica\", 18),\n                 BackgroundColor = UIColor.Clear.FromHex(\"#DFE4E6\"),\n                 TextAlignment = UITextAlignment.Center\n             };\n             var buttonView = new UIView()\n             {\n                 TranslatesAutoresizingMaskIntoConstraints = false\n             };\n             var loginButton = new UIButton(UIButtonType.RoundedRect)\n             {\n                 TranslatesAutoresizingMaskIntoConstraints = false\n             };\n             loginButton.SetTitle(\"Login\", UIControlState.Normal);\n             loginButton.TouchUpInside += (sender, e) =>\n                  Login(this, new Tuple<string, string>(_loginTextField.Text, _passwordTextField.Text));\n             var registerButton = new UIButton(UIButtonType.RoundedRect)\n             {\n                 TranslatesAutoresizingMaskIntoConstraints = false\n             };\n             registerButton.SetTitle(\"Register\", UIControlState.Normal);\n             registerButton.TouchUpInside += (sender, e) =>\n                 Register(this, new Tuple<string, string>(_loginTextField?.Text, _passwordTextField?.Text));\n             Add(titleLabel);\n             Add(descriptionLabel);\n             Add(_activityIndicatorView);\n             Add(_loginTextField);\n             Add(_passwordTextField);\n             Add(buttonView);\n             buttonView.Add(loginButton);\n             buttonView.Add(registerButton);\n         }\n         #endregion \n\n```", "```cs\nvar views = new DictionaryViews()\n             {\n                 {\"titleLabel\", titleLabel},\n                 {\"descriptionLabel\", descriptionLabel},\n                 {\"loginTextField\", _loginTextField},\n                 {\"passwordTextField\", _passwordTextField},\n                 {\"loginButton\", loginButton},\n                 {\"registerButton\", registerButton},\n                 {\"activityIndicatorView\", _activityIndicatorView},\n                 {\"buttonView\", buttonView}\n             };\n             buttonView.AddConstraints(\n                 NSLayoutConstraint.FromVisualFormat(\"V:|-[registerButton]-|\", NSLayoutFormatOptions.DirectionLeftToRight, null, views)\n                 .Concat(NSLayoutConstraint.FromVisualFormat(\"V:|-[loginButton]-|\", NSLayoutFormatOptions.DirectionLeftToRight, null, views))\n                 .Concat(NSLayoutConstraint.FromVisualFormat(\"H:|-[registerButton]-30-[loginButton]-|\", NSLayoutFormatOptions.DirectionLeftToRight, null, views))\n                 .ToArray());\n             View.AddConstraints(\n                 NSLayoutConstraint.FromVisualFormat(\"V:|-100-[titleLabel(50)]-[descriptionLabel(30)]-10-[loginTextField(30)]-10-[passwordTextField(30)]-10-[buttonView]\", NSLayoutFormatOptions.DirectionLeftToRight, null, views)\n                 .Concat(NSLayoutConstraint.FromVisualFormat(\"V:|-100-[activityIndicatorView(50)]-[descriptionLabel(30)]-10-[loginTextField(30)]-10-[passwordTextField(30)]-10-[buttonView]\", NSLayoutFormatOptions.DirectionLeftToRight, null, views))\n                 .Concat(NSLayoutConstraint.FromVisualFormat(\"H:|-10-[titleLabel]-10-|\", NSLayoutFormatOptions.AlignAllTop, null, views))\n                 .Concat(NSLayoutConstraint.FromVisualFormat(\"H:[activityIndicatorView(30)]-10-|\", NSLayoutFormatOptions.AlignAllTop, null, views))\n                 .Concat(NSLayoutConstraint.FromVisualFormat(\"H:|-10-[descriptionLabel]-10-|\", NSLayoutFormatOptions.AlignAllTop, null, views))\n                 .Concat(NSLayoutConstraint.FromVisualFormat(\"H:|-30-[loginTextField]-30-|\", NSLayoutFormatOptions.AlignAllTop, null, views))\n                 .Concat(NSLayoutConstraint.FromVisualFormat(\"H:|-30-[passwordTextField]-30-|\", NSLayoutFormatOptions.AlignAllTop, null, views))\n                 .Concat(new[] { NSLayoutConstraint.Create(buttonView, NSLayoutAttribute.CenterX, NSLayoutRelation.Equal, View, NSLayoutAttribute.CenterX, 1, 1)\n })\n                 .ToArray());\n```", "```cs\n         #region ILoginView implementation\n         public event EventHandler<Tuple<string, string>> Login;\n         public event EventHandler<Tuple<string, string>> Register;\n         #endregion\n         #region IView implementation\n\n         public void SetErrorMessage(string message)\n         {\n             var alert = new UIAlertView()\n             {\n                 Title = \"Chat\",\n                 Message = message\n             };\n             alert.AddButton(\"OK\");\n             alert.Show();\n         }\n         public bool IsInProgress\n          {\n              get\n             {\n                 return _isInProgress;\n             }\n             set\n             {\n                 if (value == _isInProgress)\n                 {\n                     return;\n                 }\n                 // we control the activity view when we set 'IsInProgress'\n                 if (value)\n                 {\n                     _activityIndicatorView.StartAnimating();\n                 }\n                 else\n                 {\n                     _activityIndicatorView.StopAnimating();\n                 }\n                 _isInProgress = value;\n             }\n         }\n         #endregion \n\n```", "```cs\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n <LinearLayout \n     android:id=\"@+id/tableLayout\"\n     android:layout_width=\"fill_parent\"\n     android:layout_height=\"fill_parent\"\n     android:orientation=\"vertical\"\n     android:gravity=\"center\"\n     android:background=\"#FFFFFF\">\n     <TextView\n         android:id=\"@+id/titleTextView\"\n         android:text=\"Chat\"\n         android:fontFamily=\"helvetica\"\n         android:textStyle=\"bold\"\n         android:textSize=\"22dp\"\n         android:textColor=\"#000000\"\n         android:paddingBottom=\"20dp\"\n         android:layout_width=\"wrap_content\"\n         android:layout_height=\"wrap_content\" />\n     <TextView\n         android:id=\"@+id/descriptionTextView\"\n         android:text=\"Enter your login name to join the chat room.\"\n         android:fontFamily=\"helvetica\"\n         android:textColor=\"#000000\"\n         android:paddingBottom=\"20dp\"\n         android:layout_centerInParent=\"true\"\n         android:layout_width=\"wrap_content\"\n         android:layout_height=\"wrap_content\" />\n     <EditText\n         android:id=\"@+id/usernameField\"\n         android:textColor=\"#000000\"\n         android:layout_width=\"fill_parent\"\n         android:layout_height=\"50dp\"\n         android:paddingBottom=\"20dp\"\n         android:hint=\"Enter Username\" />\n     <EditText\n         android:id=\"@+id/passwordField\"\n         android:textColor=\"#000000\"\n         android:layout_width=\"fill_parent\"\n         android:layout_height=\"50dp\"\n         android:hint=\"Enter Password\" />\n     <LinearLayout\n         android:id=\"@+id/tableLayout\"\n         android:gravity=\"center\"\n         android:layout_width=\"fill_parent\"\n         android:layout_height=\"150dp\"\n         android:orientation=\"horizontal\"\n         android:background=\"#FFFFFF\">\n         <Button\n             android:id=\"@+id/registerButton\"\n             android:text=\"Register\"\n             android:textColor=\"#417BB5\"\n             android:background=\"@android:color/transparent\"\n             android:layout_height=\"50dp\"\n             android:layout_width=\"100dp\" />\n         <Button\n             android:id=\"@+id/loginButton\"\n             android:text=\"Login\"\n             android:textColor=\"#417BB5\"\n             android:background=\"@android:color/transparent\"\n             android:paddingLeft=\"20dp\"\n             android:layout_height=\"50dp\"\n             android:layout_width=\"100dp\" />\n     </LinearLayout>\n </LinearLayout> \n\n```", "```cs\n\n[Activity(MainLauncher = true, Label = \"Chat\", ScreenOrientation = ScreenOrientation.Portrait)]\n     public class LoginActivity : Activity, LoginPresenter.ILoginView\n     {\n         #region Private Properties\n         private bool _isInProgress = false;\n         private bool _dialogShown = false;\n         private LoginPresenter _presenter;\n         private EditText _loginField;\n         private EditText _passwordField;\n         private ProgressDialog progressDialog;\n         #endregion\n         #region Protected Methods\n         protected override void OnCreate(Bundle bundle)\n         {\n             base.OnCreate(bundle);\n             SetContentView(Resource.Layout.LoginView);\n             progressDialog = new ProgressDialog(this);\n             progressDialog.SetMessage(\"Loading...\");\n             progressDialog.SetCancelable(false);\n             _loginField = FindViewById<EditText>(Resource.Id.usernameField);\n             _passwordField = FindViewById<EditText>(Resource.Id.passwordField);\n             var registerButton = FindViewById<Button>(Resource.Id.registerButton);\n             registerButton.Touch += (sender, e) =>\n                 Register(this, new Tuple<string, string>(_loginField.Text, _passwordField.Text));\n             var loginButton = FindViewById<Button>(Resource.Id.loginButton);\n             loginButton.Touch += (sender, e) =>\n                 Login(this, new Tuple<string, string>(_loginField.Text, _passwordField.Text));\n             var app = ChatApplication.GetApplication(this);\n             var state = new ApplicationState();\n             _presenter = new LoginPresenter(state, new NavigationService(app));\n             _presenter.SetView(this);\n             app.CurrentActivity = this;\n         }\n     #endregion \n\n```", "```cs\n         #region ILoginView implementation\n         public event EventHandler<Tuple<string, string>> Login;\n         public event EventHandler<Tuple<string, string>> Register;\n         #endregion\n         #region IView implementation\n         public void SetErrorMessage(string message)\n         {\n             if (!_dialogShown)\n             {\n                 _dialogShown = true;\n                 AlertDialog.Builder builder = new AlertDialog.Builder(this);\n                 builder\n                     .SetTitle(\"Chat\")\n                     .SetMessage(message)\n                     .SetNeutralButton(\"Ok\", (sender, e) => { _dialogShown = false ;})\n                     .Show();\n             }\n         }\n         public bool IsInProgress\n         {\n             get\n             {\n                 return _isInProgress;\n             }\n             set\n             {\n                 if (value == _isInProgress)\n                 {\n                     return;\n                 }\n                 // we control the activity view when we set 'IsInProgress'\n                 if (value)\n                 {\n                     progressDialog.Show();\n                 }\n                 else\n                 {\n                     progressDialog.Dismiss();\n                 }\n                 _isInProgress = value;\n             }\n         }\n         #endregion\n     } \n\n```", "```cs\nprotected override void OnResume()\n         {\n             base.OnResume();\n             var app = ChatApplication.GetApplication(this);\n             app.CurrentActivity = this;\n             if (_presenter != null)\n             {\n                 _presenter.SetView(this);\n             }\n         }\n         #endregion\n```", "```cs\n\npublic class ClientsListPresenter : BasePresenter\n     {\n         #region Private Properties\n         private IClientsListView _view;\n         #endregion\n         #region IClientsListView\n         public interface IClientsListView : IView\n         {\n             event EventHandler<ClientSelectedEventArgs> ClientSelected;\n             void NotifyConnectedClientsUpdated(IEnumerable<Client> clients);\n         }\n         #endregion\n         #region Constructors\n         public ClientsListPresenter(ApplicationState state, INavigationService navigationService,\n                                      string accessToken)\n         {\n             _navigationService = navigationService;\n             _state = state;\n             _state.AccessToken = accessToken;\n             InitSignalR(accessToken).ConfigureAwait(false);\n         }\n         #endregion\n\n }  \n\n```", "```cs\n#region Public Methods public void SetView(IClientsListView view)\n         {\n             _view = view;\n             _signalRClient.OnDataReceived -= HandleSignalRDataReceived;\n             _signalRClient.OnDataReceived += HandleSignalRDataReceived;\n             _view.ClientSelected -= HandleClientSelected;\n             _view.ClientSelected += HandleClientSelected;\n             ConnectedClientsUpdated -= HandleConnectedClientsUpdated;\n             ConnectedClientsUpdated += HandleConnectedClientsUpdated;\n             GetAllConnectedClients().ConfigureAwait(false);\n         }\n\n #endregion \n\n```", "```cs\n\npublic void ReleaseView()\n         {\n             _signalRClient.OnDataReceived -= HandleSignalRDataReceived;\n         } \n\n```", "```cs\npublic void Signout()\n         {\n             _signalRClient.Disconnect();\n             _navigationService.PopPresenter(true);\n         } \n\n```", "```cs\n#region Private Methods\n         private void HandleClientSelected(object sender, ClientSelectedEventArgs e)\n         {\n             var presenter = new ChatPresenter(_state, _navigationService, e.Client, _signalRClient);\n             _navigationService.PushPresenter(presenter);\n         }\n         private void HandleConnectedClientsUpdated(object sender,\n         ConnectedClientsUpdatedEventArgs e)\n         {\n             _view.NotifyConnectedClientsUpdated(e.ConnectedClients\n                                                 .Where(x => !x.Username.ToLower()\n                                                 .Contains(_state.Username.ToLower())));\n         }\n         #endregion \n\n```", "```cs\npublic class Client { public string Username; }  \n\n```", "```cs\n\npublic class ClientsTableSource : UITableViewSource  \n{ \n         #region Public Properties \n\n         public event EventHandler<Client> ItemSelected; \n\n         #endregion \n\n         #region Private Properties \n\n         private List<Client> _clients; \n\n         string CellIdentifier = \"ClientCell\"; \n\n         #endregion \n\n         #region Constructors \n\n         public ClientsTableSource () \n         { \n               _clients = new List<Client> (); \n         } \n\n         #endregion \n} \n\n```", "```cs\n#region Methods\n         public void UpdateClients(IEnumerable<Client> clients)\n         {\n             foreach (var client in clients)\n             {\n                 _clients.Add (client);\n             }\n         }\n         public override nint NumberOfSections (UITableView tableView)\n         {\n             return 1;\n         }\n         public override nint RowsInSection (UITableView tableview, nint section)\n         {\n             return _clients.Count;\n         }\n         public override void RowSelected (UITableView tableView, NSIndexPath indexPath)\n         {\n             if (ItemSelected != null)\n             {\n                 ItemSelected (this, _clients[indexPath.Row]);\n             }\n             tableView.DeselectRow (indexPath, true);\n         }\n         public override nfloat GetHeightForRow (UITableView tableView, NSIndexPath indexPath)\n         {\n             return 80;\n         }\n         public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)\n         {\n             UITableViewCell cell = tableView.DequeueReusableCell(CellIdentifier);\n             var client = _clients[indexPath.Row];\n             if (cell == null)\n             {\n                  cell = new UITableViewCell(UITableViewCellStyle.Default, CellIdentifier);\n              }\n             cell.TextLabel.Text = client.Ip;\n             return cell;\n         }\n #endregion  \n\n```", "```cs\npublic class ClientsListViewController : UIViewController, ClientsListPresenter.IClientsListView\n     {\n         #region Private Properties\n         private UITableView _tableView;\n         private ClientsTableSource _source;\n         private ClientsListPresenter _presenter;\n         private UIActivityIndicatorView _activityIndicatorView;\n         #endregion\n         #region Constructors\n         public ClientsListViewController(ClientsListPresenter presenter)\n         {\n             _presenter = presenter;\n             _source = new ClientsTableSource();\n             _source.ItemSelected += (sender, e) =>\n             {\n                 if (ClientSelected != null)\n                 {\n                     ClientSelected(this, new ClientSelectedEventArgs(e));\n                 }\n             };\n         }\n         #endregion\n\n   } \n\n```", "```cs\n\n#region Public Methods\n         public override void ViewDidLoad()\n         {\n             base.ViewDidLoad();\n             // Perform any additional set up after loading the view, typically from a nib.\n             UIBarButtonItem backButton = new UIBarButtonItem(\"< Back\", UIBarButtonItemStyle.Bordered, HandleSignout);\n             NavigationItem.SetLeftBarButtonItem(backButton, false);\n             View.BackgroundColor = UIColor.White;\n             _presenter.SetView(this);\n             var width = View.Bounds.Width;\n             var height = View.Bounds.Height;\n             Title = \"Clients\";\n             var titleLabel = new UILabel()\n             {\n                 TranslatesAutoresizingMaskIntoConstraints = false,\n                 Text = \"Connected Clients\",\n                 Font = UIFont.FromName(\"Helvetica-Bold\", 22),\n                 TextAlignment = UITextAlignment.Center\n             };\n             var descriptionLabel = new UILabel()\n             {\n                 TranslatesAutoresizingMaskIntoConstraints = false,\n                 Text = \"Select a client you would like to chat with\",\n                 Font = UIFont.FromName(\"Helvetica\", 18),\n                 TextAlignment = UITextAlignment.Center\n             };\n             _tableView = new UITableView(new CGRect(0, 0, width, height))\n             {\n                 TranslatesAutoresizingMaskIntoConstraints = false\n             };\n             _tableView.AutoresizingMask = UIViewAutoresizing.All;\n             _tableView.Source = _source;\n             Add(titleLabel);\n             Add(descriptionLabel);\n             Add(_tableView);\n             var views = new DictionaryViews()\n             {\n                 {\"titleLabel\", titleLabel},\n                 {\"descriptionLabel\", descriptionLabel},\n                 {\"tableView\", _tableView},\n             };\n             View.AddConstraints(\n                 NSLayoutConstraint.FromVisualFormat(\"V:|-100-[titleLabel(30)]-[descriptionLabel(30)]-[tableView]|\", NSLayoutFormatOptions.DirectionLeftToRight, null, views)\n                 .Concat(NSLayoutConstraint.FromVisualFormat(\"H:|[tableView]|\", NSLayoutFormatOptions.AlignAllTop, null, views))\n                 .Concat(NSLayoutConstraint.FromVisualFormat(\"H:|-10-[titleLabel]-10-|\", NSLayoutFormatOptions.AlignAllTop, null, views))\n                 .Concat(NSLayoutConstraint.FromVisualFormat(\"H:|-10-[descriptionLabel]-10-|\", NSLayoutFormatOptions.AlignAllTop, null, views))                 .ToArray());\n         }  \n\n#endregion \n\n```", "```cs\npublic async void HandleSignout(object sender, EventArgs e)\n         {\n             bool accepted = await ShowAlert(\"Chat\", \"Would you like to signout?\");\n             if (accepted)\n             {\n                 _presenter.Signout();\n             }\n         }\n```", "```cs\n         public Task<bool> ShowAlert(string title, string message)\n         {\n             var tcs = new TaskCompletionSource<bool>();\n             UIApplication.SharedApplication.InvokeOnMainThread(new Action(() =>\n             {\n                 UIAlertView alert = new UIAlertView(title, message, null, NSBundle.MainBundle.LocalizedString(\"Cancel\", \"Cancel\"),\n                                     NSBundle.MainBundle.LocalizedString(\"OK\", \"OK\"));\n                 alert.Clicked += (sender, buttonArgs) =>\n tcs.SetResult(buttonArgs.ButtonIndex != alert.CancelButtonIndex);\n                 alert.Show();\n             }));\n             return tcs.Task;\n         }\n\n```", "```cs\nView.AddConstraints(NSLayoutConstraint.FromVisualFormat(\"V:|-100-[titleLabel(30)]-[descriptionLabel(30)]-[tableView]|\", NSLayoutFormatOptions.DirectionLeftToRight, null, views)\n                 .Concat(NSLayoutConstraint.FromVisualFormat(\"H:|[tableView]|\", NSLayoutFormatOptions.AlignAllTop, null, views)) \n                .Concat(NSLayoutConstraint.FromVisualFormat(\"H:|-10-[titleLabel]-10-|\", NSLayoutFormatOptions.AlignAllTop, null, views)) \n                .Concat(NSLayoutConstraint.FromVisualFormat(\"H:|-10-[descriptionLabel]-10-|\", NSLayoutFormatOptions.AlignAllTop, null, views))\n                 .ToArray());  \n\n```", "```cs\npublic override void ViewDidUnload()\n         {\n             base.ViewDidUnload();\n             _presenter.ReleaseView();\n         } \n\n```", "```cs\n[Activity(Label = \"Chat Room\", Icon = \"@drawable/icon\", ScreenOrientation = ScreenOrientation.Portrait)]\n     public class ClientsListActivity : ListActivity, ClientsListPresenter.IClientsListView\n     {\n         #region Private Properties\n         private ClientsListPresenter _presenter;\n         private ClientsListAdapter _adapter;\n         private bool _dialogShown = false;\n         #endregion\n         #region Protected Methods\n         protected override void OnCreate(Bundle bundle)\n         {\n             base.OnCreate(bundle);\n             ListView.SetBackgroundColor(Color.White);\n              var app = ChatApplication.GetApplication(this);\n             app.CurrentActivity = this;\n             _presenter = app.Presenter as ClientsListPresenter;\n             _presenter.SetView(this);\n             _adapter = new ClientsListAdapter(this);\n             ListAdapter = _adapter;\n         }\n         protected override void OnResume()\n         {\n             base.OnResume();\n             var app = ChatApplication.GetApplication(this);\n             app.CurrentActivity = this;\n             if (_presenter != null)\n             {\n                 _presenter.SetView(this);\n             }\n         }    \n\n  #endregion\n  }  \n\n```", "```cs\nprotected override void OnPause()\n         {\n             base.OnPause();\n             if (_presenter != null)\n             {\n                 _presenter.ReleaseView();\n             }\n         }  \n\n```", "```cs\n#region IClientsListView implementation\n         public event EventHandler<ClientSelectedEventArgs> ClientSelected;\n         public void NotifyConnectedClientsUpdated(IEnumerable<Client> clients)\n         {\n             if (_adapter != null)\n             {\n                 _adapter.UpdateClients(clients);\n                 // perform action on UI thread\n                 Application.SynchronizationContext.Post(state =>\n                  {\n                      _adapter.NotifyDataSetChanged();\n                  }, null);\n             }\n         }\n         #endregion\n         #region IView implementation\n         public void SetErrorMessage(string message)\n         {\n             if (!_dialogShown)\n             {\n                 _dialogShown = true;\n                 AlertDialog.Builder builder = new AlertDialog.Builder(this);\n                 builder\n                     .SetTitle(\"Chat\")\n                     .SetMessage(message)\n                     .SetNeutralButton(\"Ok\", (sender, e) => { _dialogShown = false; })\n                     .Show();\n             }         }\n         public bool IsInProgress { get; set;\n }\n         #endregion\n```", "```cs\npublic override void OnBackPressed()\n         {\n             //Put up the Yes/No message box\n             AlertDialog.Builder builder = new AlertDialog.Builder(this);\n             builder\n                 .SetTitle(\"Chat\")\n                 .SetMessage(\"Would you like to signout?\")\n                 .SetNegativeButton(\"No\", (sender, e) => { })\n                 .SetPositiveButton(\"Yes\", (sender, e) =>\n                      {\n                          _presenter.Signout();\n                     })\n                 .Show();\n         }\n```", "```cs\n         protected override void OnListItemClick(ListView l, Android.Views.View v, int position, long id)\n         {\n             var item = _adapter[position];\n             if (ClientSelected != null)\n             {\n                 ClientSelected(this, new ClientSelectedEventArgs(item));\n             }\n         }\n         #endregion  \n\n```", "```cs\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?> <LinearLayout \n     android:orientation=\"horizontal\"\n     android:layout_width=\"match_parent\"\n     android:layout_height=\"match_parent\"\n     android:weightSum=\"4\">\n     <TextView\n         android:id=\"@+id/username\"\n         android:layout_width=\"wrap_content\"\n         android:layout_height=\"wrap_content\"\n         android:layout_weight=\"1\" />\n </LinearLayout> \n\n```", "```cs\npublic class ClientsListAdapter : BaseAdapter<Client>\n     {\n         private List<Client> _clients;\n         private Activity _context;\n         public ClientsListAdapter(Activity context) : base()\n         {\n             _context = context;\n             _clients = new List<Client>();\n         } \n    } \n\n```", "```cs\npublic override Client this[int position]\n         {\n             get\n             {\n                 return _clients[position];\n             }\n         }\n         public override Java.Lang.Object GetItem (int position)\n         {\n             return null;\n         }\n\n         public override long GetItemId(int position)\n         {\n             return position;\n         }\n         public override int Count\n         {\n             get\n              {\n                  return _clients.Count;\n              }\n          }\n\n         public override View GetView(int position, View convertView, ViewGroup parent)\n         {\n             View view = convertView; // re-use an existing view, if one is available\n             if (view == null)\n             {\n                  // otherwise create a new one\n                 view = _context.LayoutInflater.Inflate(Resource.Layout.CustomCell, null);\n             }\n             // set labels\n             var connectionIdTextView = view.FindViewById<TextView>\n (Resource.Id.username);\n             connectionIdTextView.Text = _clients[position].Username;\n             return view;\n         }  \n\n```", "```cs\npublic void UpdateClients(IEnumerable<Client> clients)\n         {\n             foreach (var client in clients)\n             {\n                 _clients.Add(client);\n             }\n         }  \n\n```", "```cs\npublic class ChatPresenter : BasePresenter\n     {\n         #region Private Properties\n         private Client _client;\n         private IChatView _view;\n         #endregion\n         #region IChatView\n         public interface IChatView : IView\n         {\n             void NotifyChatMessageReceived(string message);\n         }\n         #endregion\n     } \n\n```", "```cs\n#region Constructors\n         public ChatPresenter(ApplicationState state, INavigationService navigationService, Client client)\n         {\n             _navigationService = navigationService;\n             _state = state;\n             _client = client;\n         }\n         #endregion\n         #region Public Methods\n         public void SetView(IChatView view)\n         {\n             _view = view;\n             ChatReceived -= HandleChatReceived;\n             ChatReceived += HandleChatReceived;\n         }\n         public async Task SendChat(string message)\n         {\n             await _signalRClient.SendMessageToClient(_client.ConnectedId, message);\n         }\n\n         #endregion\n         #region Private Methods\n         private void HandleChatReceived(object sender, ChatEventArgs e)\n         {\n             _view.NotifyChatMessageReceived(e.Message);\n         }\n         #endregion \n\n```", "```cs\npublic void ReleaseView()\n         {\n             _signalRClient.OnDataReceived -= HandleSignalRDataReceived;\n         } \n\n```", "```cs\nif (presenter is LoginPresenter)\n                 {\n                     intent = new Intent(_application.CurrentActivity, typeof(LoginActivity));\n                 }\n                 else if (presenter is ClientsListPresenter)\n                 {\n                     intent = new Intent(_application.CurrentActivity, typeof(ClientsListActivity));\n                 }\n                 else if (presenter is ChatPresenter)\n                 {\n                     intent = new Intent(_application.CurrentActivity, typeof(ChatActivity));\n                 }  \n\n```", "```cs\nif (presenter is LoginPresenter)\n             {\n                 var viewController = new LoginViewController(presenter as LoginPresenter);\n                 _navigationController.PushViewController(viewController, true);\n             }\n             else if (presenter is ClientsListPresenter)\n             {\n                 var viewController = new ClientsListViewController(presenter as ClientsListPresenter);\n                 _navigationController.PushViewController(viewController, true);\n             }\n             else if (presenter is ChatPresenter)\n             {\n                 var viewController = new ChatViewController(presenter as ChatPresenter);\n                 _navigationController.PushViewController(viewController, true);\n             } \n\n```", "```cs\n\npublic class ChatViewController : UIViewController, ChatPresenter.IChatView {\n         #region Private Properties\n         private ChatPresenter _presenter;\n         private UITextField _chatField;\n         private UIScrollView _scrollView;\n         private int _currentTop = 20;\n         private nfloat _width;\n         #endregion\n\n         #region Constructors\n         public ChatViewController(ChatPresenter presenter)\n         {\n             _presenter = presenter;\n         }\n         #endregion\n\n} \n\n```", "```cs\n#region Public Methods\n         public override void ViewDidLoad()\n         {\n             base.ViewDidLoad();\n             Title = \"Chat Room\";\n             _presenter.SetView(this);\n             View.BackgroundColor = UIColor.White;\n             _width = View.Bounds.Width;\n             var _sendButton = new UIButton(UIButtonType.RoundedRect)\n             {\n                 TranslatesAutoresizingMaskIntoConstraints = false\n             };\n             _sendButton.SetTitle(\"Send\", UIControlState.Normal);\n             _sendButton.TouchUpInside += HandleSendButton;\n             _chatField = new UITextField()\n             {\n                 TranslatesAutoresizingMaskIntoConstraints = false,\n                 BackgroundColor = UIColor.Clear.FromHex(\"#DFE4E6\"),\n                 Placeholder = \"Enter message\"\n             };\n             _scrollView = new UIScrollView()\n             {\n                 TranslatesAutoresizingMaskIntoConstraints = false,\n             };\n             Add(_chatField);\n             Add(_sendButton);\n             Add(_scrollView);\n             var views = new DictionaryViews()\n             {\n                 {\"sendButton\", _sendButton},\n                 {\"chatField\", _chatField},\n                 {\"scrollView\", _scrollView},\n             };\n             this.View.AddConstraints(\n                 NSLayoutConstraint.FromVisualFormat(\"V:|-68-[chatField(60)]\", NSLayoutFormatOptions.DirectionLeftToRight, null, views)\n                 .Concat(NSLayoutConstraint.FromVisualFormat(\"V:|-62-[sendButton(60)]-20-[scrollView]|\", NSLayoutFormatOptions.DirectionLeftToRight, null, views))\n                 .Concat(NSLayoutConstraint.FromVisualFormat(\"H:|-5-[chatField]-[sendButton(60)]-5-|\", NSLayoutFormatOptions.AlignAllTop, null, views))\n                 .Concat(NSLayoutConstraint.FromVisualFormat(\"H:|[scrollView]|\", NSLayoutFormatOptions.AlignAllTop, null, views))\n                 .ToArray());\n         }  \n         #endregion  \n\n```", "```cs\npublic override void ViewDidUnload()\n         {\n             base.ViewDidUnload();\n             _presenter.ReleaseView();\n         } \n\n```", "```cs\n#region IView implementation\n         public void SetMessage(string message)\n         {\n             var alert = new UIAlertView()\n             {\n                 Title = \"Chat\",\n                 Message = message\n             };\n             alert.AddButton(\"OK\");\n             alert.Show();\n         }\n         public bool IsInProgress { get; set; } #endregion  \n\n```", "```cs\npublic class ChatBoxView : UIView\n     {\n         private UILabel messageLabel;\n         public ChatBoxView(string message)\n         {\n             Layer.CornerRadius = 10;\n             messageLabel = new UILabel()\n             {\n                 TranslatesAutoresizingMaskIntoConstraints = false,\n                 Text = message\n             };\n             Add(messageLabel);\n             var views = new DictionaryViews()\n             {\n                 {\"messageLabel\", messageLabel},\n             };\n             AddConstraints(NSLayoutConstraint.FromVisualFormat(\"V:|[messageLabel]|\", NSLayoutFormatOptions.AlignAllTop, null, views)\n                 .Concat(NSLayoutConstraint.FromVisualFormat(\"H:|-5-[messageLabel]-5-|\", NSLayoutFormatOptions.AlignAllTop, null, views))\n                 .ToArray());\n         }\n     }  \n\n```", "```cs\npublic static class UIColorExtensions\n     {\n         public static UIColor FromHex(this UIColor color, string hexValue, float alpha = 1.0f)\n         {\n             var colorString = hexValue.Replace(\"#\", \"\");\n             if (alpha > 1.0f)\n             {\n                 alpha = 1.0f;\n             }\n             else if (alpha < 0.0f)\n             {\n                 alpha = 0.0f;\n             }\n             float red, green, blue;\n             switch (colorString.Length)\n             {\n                 case 3: // #RGB\n                     {\n                         red = Convert.ToInt32(string.Format(\"{0}{0}\",\n                         colorString.Substring(0, 1)), 16) / 255f;\n                         green = Convert.ToInt32(string.Format(\"{0}{0}\",\n                         colorString.Substring(1, 1)), 16) / 255f;\n                         blue = Convert.ToInt32(string.Format(\"{0}{0}\",\n                         colorString.Substring(2, 1)), 16) / 255f;\n                         return UIColor.FromRGBA(red, green, blue, alpha);\n                     }\n                 case 6: // #RRGGBB\n                     {\n                         red = Convert.ToInt32(colorString.Substring(0, 2), 16) / 255f;\n                         green = Convert.ToInt32(colorString.Substring(2, 2), 16) / 255f;\n                         blue = Convert.ToInt32(colorString.Substring(4, 2), 16) / 255f;\n                         return UIColor.FromRGBA(red, green, blue, alpha);\n                     }\n                 default:\n                     throw new ArgumentOutOfRangeException(string.Format(\"Invalid color value {0} is invalid. It should be a hex value of the form #RBG, #RRGGBB\", hexValue));\n             }\n         }\n     }   \n\n```", "```cs\nUIColor.Clear.FromHex(\"#FFFFFF\"); \n\n```", "```cs\n         public void CreateChatBox(bool received, string message)\n         {\n             _scrollView.ContentSize = new CGSize(_width, _currentTop);\n             _scrollView.AddSubview(new ChatBoxView(message)\n             {\n                 Frame = new CGRect(received ? _width - 120 : 20, _currentTop, 100, 60),\n                 BackgroundColor = UIColor.Clear.FromHex(received ? \"#4CD964\" : \"#5AC8FA\")\n             });\n             _currentTop += 80;\n         } \n\n```", "```cs\n #region Private Properties private void HandleSendButton(object sender, EventArgs e)\n         {\n             _presenter.SendChat(_chatField.Text).ConfigureAwait(false);\n             CreateChatBox(false, _chatField.Text);\n         }\n  #endregion  \n\n```", "```cs\n#region IChatView implementation\n         public void NotifyChatMessageReceived(string message)\n         {\n             InvokeOnMainThread(() => CreateChatBox(true, message));\n         }\n         #endregion  \n\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n <TableLayout \n     android:id=\"@+id/tableLayout\"\n     android:layout_width=\"fill_parent\"\n     android:layout_height=\"fill_parent\"\n     android:background=\"#FFFFFF\">\n     <TableRow\n         android:id=\"@+id/tableRow1\"\n         android:layout_width=\"fill_parent\"\n         android:layout_height=\"100dp\"\n         android:padding=\"5dip\">\n         <EditText\n             android:id=\"@+id/chatField\"\n             android:hint=\"Enter message\"\n             android:textColor=\"#000000\"\n             android:layout_weight=\"2\"\n             android:layout_column=\"1\" />\n         <Button\n             android:id=\"@+id/sendButton\"\n             android:text=\"Send\"\n             android:textColor=\"#417BB5\"\n             android:background=\"@android:color/transparent\"\n             android:focusableInTouchMode=\"false\"\n             android:layout_weight=\"1\"\n             android:layout_column=\"3\" />\n     </TableRow>\n     <TableRow\n         android:id=\"@+id/tableRow2\"\n         android:layout_width=\"fill_parent\"\n         android:layout_weight=\"1\"\n         android:padding=\"5dip\">\n         <ScrollView\n             android:id=\"@+id/scrollView\"\n             android:layout_width=\"match_parent\"\n             android:layout_height=\"match_parent\"\n             android:fillViewport=\"true\"\n             android:layout_weight=\"2\"\n             android:layout_span=\"4\">\n             <LinearLayout\n                 android:id=\"@+id/scrollViewInnerLayout\"\n                 android:layout_width=\"match_parent\"\n                 android:layout_height=\"wrap_content\"\n                 android:orientation=\"vertical\" />\n         </ScrollView>\n     </TableRow>\n </TableLayout> \n\n```", "```cs\n[Activity(Label = \"Chat\", ScreenOrientation = ScreenOrientation.Portrait)]\n     public class ChatView : ListActivity, ChatPresenter.IChatView\n     {\n         #region Private Properties\n         private ChatPresenter _presenter;\n         private LinearLayout _scrollViewInnerLayout;\n         private EditText _editText;\n         private long _lastSendClick = 0;\n         private int _width;\n         private float _currentTop;\n         private bool _dialogShown = false;  \n       #endregion  \n         #region Protected Methods\n         protected override void OnCreate(Bundle bundle)\n         {\n             base.OnCreate(bundle);\n             SetContentView(Resource.Layout.ChatView);\n             var metrics = Resources.DisplayMetrics;\n             _width = (int)(( metrics.WidthPixels) /\n             Resources.DisplayMetrics.Density);\n             _scrollViewInnerLayout = FindViewById<LinearLayout>\n             (Resource.Id.scrollViewInnerLayout);\n             _editText = FindViewById<EditText>(Resource.Id.chatField);\n             var sendButton = FindViewById<Button>(Resource.Id.sendButton);\n             sendButton.Touch += HandleSendButton;\n             var app = ChatApplication.GetApplication(this);\n             app.CurrentActivity = this;\n             _presenter = app.Presenter as ChatPresenter;\n             _presenter.SetView(this);\n             app.CurrentActivity = this;\n         }\n         #endregion \n\n    }  \n\n```", "```cs\nprotected override void OnPause()\n         {\n             base.OnPause();\n             if (_presenter != null)\n             {\n                 _presenter.ReleaseView();\n             }\n         } \n\n```", "```cs\n#region IChatView implementation\n         public void NotifyChatMessageReceived(string message)\n         {\n             // perform action on UI thread\n             Application.SynchronizationContext.Post(state =>\n             {\n                 CreateChatBox(true, message);\n             }, null);\n         }\n         #endregion \n\n```", "```cs\n#region IView implementation\n         public void SetErrorMessage(string message)\n         {\n             if (!_dialogShown)\n             {\n                 _dialogShown = true;\n                 AlertDialog.Builder builder = new AlertDialog.Builder(this);\n                 builder\n                     .SetTitle(\"Chat\")\n                     .SetMessage(message)\n                     .SetNeutralButton(\"Ok\", (sender, e) => { _dialogShown = false; })\n                     .Show();\n             }\n         }\n         public bool IsInProgress { get; set; }\n         #endregion  \n\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n <LinearLayout\n\n     android:orientation=\"horizontal\"\n     android:layout_width=\"match_parent\"\n     android:layout_height=\"match_parent\"\n     android:weightSum=\"4\">\n     <TextView\n         android:id=\"@+id/messageTextView\"\n         android:layout_width=\"wrap_content\"\n         android:layout_height=\"wrap_content\"\n         android:layout_weight=\"1\" />\n </LinearLayout>  \n\n```", "```cs\n#region Private Methods\n         private void HandleSendButton(object sender, View.TouchEventArgs e)\n         { \n            // multiple-clicking prevention using a threshold of 1000 ms\n             if (SystemClock.ElapsedRealtime() - _lastSendClick < 1000)\n             {\n                 return;\n             }\n             _lastSendClick = SystemClock.ElapsedRealtime();\n             _presenter.SendChat(_editText.Text).ConfigureAwait(false);\n             CreateChatBox(false, _editText.Text);\n         }\n         #endregion\n         #region Public Methods\n         public void CreateChatBox(bool received, string message)\n         {\n             var view = LayoutInflater.Inflate(Resource.Layout.ChatBoxView, null);\n             view.SetX(received ? _width : 0);\n             view.SetY(_currentTop);\n             var messageTextView = view.FindViewById<TextView>\n             (Resource.Id.messageTextView);\n             messageTextView.Text = message;\n             var color = Color.ParseColor(received ? \"#4CD964\" : \"#5AC8FA\");\n             messageTextView.SetBackgroundColor(color);\n             _scrollViewInnerLayout.AddView(view);\n             _currentTop += 60;\n         }\n         #endregion  \n\n```"]