["```cs\nvar resultOfOperation = firstOperand operator secondOperand; \n```", "```cs\nint x = 5;\nint y = 3;\nint resultOfAdding = x + y;\nint resultOfMultiplying = x * y; \n```", "```cs\nvar resultOfOperationAfter = onlyOperand operator;\nvar resultOfOperationBefore = operator onlyOperand; \n```", "```cs\nint x = 5;\nint postfixIncrement = x++;\nint prefixIncrement = ++x;\nType theTypeOfAnInteger = typeof(int);\nstring nameOfVariable = nameof(x);\nint howManyBytesInAnInteger = sizeof(int); \n```", "```cs\nvar resultOfOperation = firstOperand firstOperator\n  secondOperand secondOperator thirdOperand; \n```", "```cs\n// Syntax of conditional operator.\nvar result = boolean_expression ? value_if_true : value_if_false;\n// Example of conditional operator.\nstring result = x > 3 ? \"Greater than 3\" : \"Less than or equal to 3\";\n// Equivalent using an if statement.\nstring result;\nif (x > 3)\n{\n  result = \"Greater than 3\";\n}\nelse\n{\n  result = \"Less than or equal to 3\";\n} \n```", "```cs\n    <ItemGroup>\n      <Using Include=\"System.Console\" Static=\"true\" />\n    </ItemGroup> \n    ```", "```cs\n    #region Exploring unary operators\n    int a = 3;\n    int b = a++;\n    WriteLine($\"a is {a}, b is {b}\");\n    #endregion \n    ```", "```cs\n    a is 4, b is 3 \n    ```", "```cs\n    int c = 3;\n    int d = ++c; // Prefix means increment c before assigning it.\n    WriteLine($\"c is {c}, d is {d}\"); \n    ```", "```cs\n    a is 4, b is 3\n    c is 4, d is 4 \n    ```", "```cs\n    int e = 11;\n    int f = 3;\n    WriteLine($\"e is {e}, f is {f}\");\n    WriteLine($\"e + f = {e + f}\");\n    WriteLine($\"e - f = {e - f}\");\n    WriteLine($\"e * f = {e * f}\");\n    WriteLine($\"e / f = {e / f}\");\n    WriteLine($\"e % f = {e % f}\"); \n    ```", "```cs\n    e is 11, f is 3\n    e + f = 14\n    e - f = 8\n    e * f = 33\n    e / f = 3\n    e % f = 2 \n    ```", "```cs\n    double g = 11.0;\n    WriteLine($\"g is {g:N1}, f is {f}\");\n    WriteLine($\"g / f = {g / f}\"); \n    ```", "```cs\n    g is 11.0, f is 3\n    g / f = 3.6666666666666665 \n    ```", "```cs\nint p = 6;\np += 3; // Equivalent to: p = p + 3;\np -= 3; // Equivalent to: p = p - 3;\np *= 3; // Equivalent to: p = p * 3;\np /= 3; // Equivalent to: p = p / 3; \n```", "```cs\nstring? authorName = GetAuthorName(); // A fictional function.\n// The maxLength variable will be the length of authorName if it is\n// not null, or 30 if authorName is null.\nint maxLength = authorName?.Length ?? 30;\n// The authorName variable will be \"unknown\" if authorName was null.\nauthorName ??= \"unknown\"; \n```", "```cs\n    bool p = true;\n    bool q = false;\n    WriteLine($\"AND  | p     | q    \");\n    WriteLine($\"p    | {p & p,-5} | {p & q,-5} \");\n    WriteLine($\"q    | {q & p,-5} | {q & q,-5} \");\n    WriteLine();\n    WriteLine($\"OR   | p     | q    \");\n    WriteLine($\"p    | {p | p,-5} | {p | q,-5} \");\n    WriteLine($\"q    | {q | p,-5} | {q | q,-5} \");\n    WriteLine();\n    WriteLine($\"XOR  | p     | q    \");\n    WriteLine($\"p    | {p ^ p,-5} | {p ^ q,-5} \");\n    WriteLine($\"q    | {q ^ p,-5} | {q ^ q,-5} \"); \n    ```", "```cs\n    AND  | p     | q\n    p    | True  | False\n    q    | False | False\n    OR   | p     | q\n    p    | True  | True\n    q    | True  | False\n    XOR  | p     | q\n    p    | False | True\n    q    | True  | False \n    ```", "```cs\n    static bool DoStuff()\n    {\n      WriteLine(\"I am doing some stuff.\");\n      return true;\n    } \n    ```", "```cs\n    WriteLine();\n    // Note that DoStuff() returns true.\n    WriteLine($\"p & DoStuff() = {p & DoStuff()}\");\n    WriteLine($\"q & DoStuff() = {q & DoStuff()}\"); \n    ```", "```cs\n    I am doing some stuff.\n    p & DoStuff() = True\n    I am doing some stuff.\n    q & DoStuff() = False \n    ```", "```cs\n    WriteLine();\n    WriteLine($\"p && DoStuff() = {p && DoStuff()}\");\n    WriteLine($\"q && DoStuff() = {q && DoStuff()}\"); \n    ```", "```cs\n    I am doing some stuff.\n    p && DoStuff() = True\n    q && DoStuff() = False // DoStuff function was not executed! \n    ```", "```cs\n    WriteLine();\n    int x = 10;\n    int y = 6;\n    WriteLine($\"Expression | Decimal |   Binary\");\n    WriteLine($\"-------------------------------\");\n    WriteLine($\"x          | {x,7} | {x:B8}\");\n    WriteLine($\"y          | {y,7} | {y:B8}\");\n    WriteLine($\"x & y      | {x & y,7} | {x & y:B8}\");\n    WriteLine($\"x | y      | {x | y,7} | {x | y:B8}\");\n    WriteLine($\"x ^ y      | {x ^ y,7} | {x ^ y:B8}\"); \n    ```", "```cs\n    Expression | Decimal |   Binary\n    -------------------------------\n    x          |      10 | 00001010\n    y          |       6 | 00000110\n    x & y      |       2 | 00000010\n    x | y      |      14 | 00001110\n    x ^ y      |      12 | 00001100 \n    ```", "```cs\n    // Left-shift x by three bit columns.\n    WriteLine($\"x << 3     | {x << 3,7} | {x << 3:B8}\");\n    // Multiply x by 8.\n    WriteLine($\"x * 8      | {x * 8,7} | {x * 8:B8}\");\n    // Right-shift y by one bit column.\n    WriteLine($\"y >> 1     | {y >> 1,7} | {y >> 1:B8}\"); \n    ```", "```cs\n    x << 3     |      80 | 01010000\n    x * 8      |      80 | 01010000\n    y >> 1     |       3 | 00000011 \n    ```", "```cs\nint age = 50;\nWriteLine($\"The {nameof(age)} variable uses {sizeof(int)} bytes of memory.\"); \n```", "```cs\nint age = 50;\n// How many operators in the following statement?\nchar firstDigit = age.ToString()[0];\n// There are four operators:\n// = is the assignment operator\n// . is the member access operator\n// () is the invocation operator\n// [] is the indexer access operator \n```", "```cs\nif (expression1)\n{\n  // Executes if expression1 is true.\n}\nelse if (expression2)\n{\n  // Executes if expression1 is false and expression2 is true.\n}\nelse if (expression3)\n{\n  // Executes if expression1 and expression2 are false\n  // and expression3 is true.\n}\nelse\n{\n  // Executes if all expressions are false.\n} \n```", "```cs\n    string password = \"ninja\";\n    if (password.Length < 8)\n    {\n      WriteLine(\"Your password is too short. Use at least 8 chars.\");\n    }\n    else\n    {\n      WriteLine(\"Your password is strong.\");\n    } \n    ```", "```cs\n    Your password is too short. Use at least 8 chars. \n    ```", "```cs\nif (password.Length < 8)\n  WriteLine(\"Your password is too short. Use at least 8 chars.\");\nelse\n  WriteLine(\"Your password is strong.\"); \n```", "```cs\n    // Add and remove the \"\" to change between string and int.\n    object o = \"3\";\n    int j = 4;\n    if (o is int i)\n    {\n      WriteLine($\"{i} x {j} = {i * j}\");\n    }\n    else\n    {\n      WriteLine(\"o is not an int so it cannot multiply!\");\n    } \n    ```", "```cs\n    o is not an int so it cannot multiply! \n    ```", "```cs\n    3 x 4 = 12 \n    ```", "```cs\n    // Inclusive lower bound but exclusive upper bound.\n    int number = Random.Shared.Next(minValue: 1, maxValue: 7);\n    WriteLine($\"My random number is {number}\");\n    switch (number)\n    {\n      case 1:\n        WriteLine(\"One\");\n        break; // Jumps to end of switch statement.\n      case 2:\n        WriteLine(\"Two\");\n        goto case 1;\n      case 3: // Multiple case section.\n      case 4:\n        WriteLine(\"Three or four\");\n        goto case 1;\n      case 5:\n        goto A_label;\n      default:\n        WriteLine(\"Default\");\n        break;\n    } // End of switch statement.\n    WriteLine(\"After end of switch\");\n    A_label:\n    WriteLine($\"After A_label\"); \n    ```", "```cs\n    // First random run.\n    My random number is 4\n    Three or four\n    One\n    After end of switch\n    After A_label\n    // Second random run.\n    My random number is 2\n    Two\n    One\n    After end of switch\n    After A_label\n    // Third random run.\n    My random number is 6\n    Default\n    After end of switch\n    After A_label\n    // Fourth random run.\n    My random number is 1\n    One\n    After end of switch\n    After A_label\n    // Fifth random run.\n    My random number is 5\n    After A_label \n    ```", "```cs\n    class Animal // This is the base type for all animals.\n    {\n      public string? Name;\n      public DateTime Born;\n      public byte Legs;\n    }\n    class Cat : Animal // This is a subtype of animal.\n    {\n      public bool IsDomestic;\n    }\n    class Spider : Animal // This is another subtype of animal.\n    {\n      public bool IsVenomous;\n    } \n    ```", "```cs\n    var animals = new Animal?[]\n    {\n      new Cat { Name = \"Karen\", Born = new(year: 2022, month: 8,\n        day: 23), Legs = 4, IsDomestic = true },\n      null,\n      new Cat { Name = \"Mufasa\", Born = new(year: 1994, month: 6,\n        day: 12) },\n      new Spider { Name = \"Sid Vicious\", Born = DateTime.Today,\n        IsVenomous = true},\n      new Spider { Name = \"Captain Furry\", Born = DateTime.Today }\n    };\n    foreach (Animal? animal in animals)\n    {\n      string message;\n      switch (animal)\n      {\n        case Cat fourLeggedCat when fourLeggedCat.Legs == 4:\n          message = $\"The cat named {fourLeggedCat.Name} has four legs.\";\n          break;\n        case Cat wildCat when wildCat.IsDomestic == false:\n          message = $\"The non-domestic cat is named {wildCat.Name}.\";\n          break;\n        case Cat cat:\n          message = $\"The cat is named {cat.Name}.\";\n          break;\n        default: // default is always evaluated last.\n          message = $\"{animal.Name} is a {animal.GetType().Name}.\";\n          break;\n        case Spider spider when spider.IsVenomous:\n          message = $\"The {spider.Name} spider is venomous. Run!\";\n          break;\n        case null:\n          message = \"The animal is null.\";\n          break;\n      }\n      WriteLine($\"switch statement: {message}\");\n    } \n    ```", "```cs\n    switch statement: The cat named Karen has four legs.\n    switch statement: The animal is null.\n    switch statement: The non-domestic cat is named Mufasa.\n    switch statement: The Sid Vicious spider is venomous. Run!\n    switch statement: Captain Furry is a Spider. \n    ```", "```cs\n    message = animal switch\n    {\n      Cat fourLeggedCat when fourLeggedCat.Legs == 4\n        => $\"The cat named {fourLeggedCat.Name} has four legs.\",\n      Cat wildCat when wildCat.IsDomestic == false\n        => $\"The non-domestic cat is named {wildCat.Name}.\",\n      Cat cat\n        => $\"The cat is named {cat.Name}.\",\n      Spider spider when spider.IsVenomous\n        => $\"The {spider.Name} spider is venomous. Run!\",\n      null\n        => \"The animal is null.\",\n      _\n        => $\"{animal.Name} is a {animal.GetType().Name}.\"\n    };\n    WriteLine($\"switch expression: {message}\"); \n    ```", "```cs\n    switch statement: The cat named Karen has four legs.\n    switch expression: The cat named Karen has four legs.\n    switch statement: The animal is null.\n    switch expression: The animal is null.\n    switch statement: The non-domestic cat is named Mufasa.\n    switch expression: The non-domestic cat is named Mufasa.\n    switch statement: The Sid Vicious spider is venomous. Run!\n    switch expression: The Sid Vicious spider is venomous. Run!\n    switch statement: Captain Furry is a Spider.\n    switch expression: Captain Furry is a Spider. \n    ```", "```cs\n    int x = 0;\n    while (x < 10)\n    {\n      WriteLine(x);\n      x++;\n    } \n    ```", "```cs\n    0\n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9 \n    ```", "```cs\n    string? actualPassword = \"Pa$$w0rd\";\n    string? password;\n    do\n    {\n      Write(\"Enter your password: \");\n      password = ReadLine();\n    }\n    while (password != actualPassword);\n    WriteLine(\"Correct!\"); \n    ```", "```cs\n    Enter your password: password\n    Enter your password: 12345678\n    Enter your password: ninja\n    Enter your password: correct horse battery staple\n    Enter your password: Pa$$w0rd\n    Correct! \n    ```", "```cs\n    for (int y = 1; y <= 10; y++)\n    {\n      WriteLine(y);\n    } \n    ```", "```cs\n    for (int y = 0; y <= 10; y += 3)\n    {\n      WriteLine(y);\n    } \n    ```", "```cs\n    string[] names = { \"Adam\", \"Barry\", \"Charlie\" };\n    foreach (string name in names)\n    {\n      WriteLine($\"{name} has {name.Length} characters.\");\n    } \n    ```", "```cs\n    Adam has 4 characters.\n    Barry has 5 characters.\n    Charlie has 7 characters. \n    ```", "```cs\nIEnumerator e = names.GetEnumerator();\nwhile (e.MoveNext())\n{\n  string name = (string)e.Current; // Current is read-only!\n  WriteLine($\"{name} has {name.Length} characters.\");\n} \n```", "```cs\n    string[] names; // This can reference any size array of strings.\n    // Allocate memory for four strings in an array.\n    names = new string[4];\n    // Store items at these index positions.\n    names[0] = \"Kate\";\n    names[1] = \"Jack\";\n    names[2] = \"Rebecca\";\n    names[3] = \"Tom\";\n    // Loop through the names.\n    for (int i = 0; i < names.Length; i++)\n    {\n      // Output the item at index position i.\n      WriteLine($\"{names[i]} is at position {i}.\");\n    } \n    ```", "```cs\n    Kate is at position 0.\n    Jack is at position 1.\n    Rebecca is at position 2.\n    Tom is at position 3. \n    ```", "```cs\n    // Alternative syntax for creating and initializing an array.\n    string[] names2 = { \"Kate\", \"Jack\", \"Rebecca\", \"Tom\" }; \n    ```", "```cs\n    string[,] grid1 = // Two dimensional array.\n    {\n      { \"Alpha\", \"Beta\", \"Gamma\", \"Delta\" },\n      { \"Anne\", \"Ben\", \"Charlie\", \"Doug\" },\n      { \"Aardvark\", \"Bear\", \"Cat\", \"Dog\" }\n    }; \n    ```", "```cs\n    WriteLine($\"1st dimension, lower bound: {grid1.GetLowerBound(0)}\");\n    WriteLine($\"1st dimension, upper bound: {grid1.GetUpperBound(0)}\");\n    WriteLine($\"2nd dimension, lower bound: {grid1.GetLowerBound(1)}\");\n    WriteLine($\"2nd dimension, upper bound: {grid1.GetUpperBound(1)}\"); \n    ```", "```cs\n    1st dimension, lower bound: 0\n    1st dimension, upper bound: 2\n    2nd dimension, lower bound: 0\n    2nd dimension, upper bound: 3 \n    ```", "```cs\n    for (int row = 0; row <= grid1.GetUpperBound(0); row++)\n    {\n      for (int col = 0; col <= grid1.GetUpperBound(1); col++)\n      {\n        WriteLine($\"Row {row}, Column {col}: {grid1[row, col]}\");\n      }\n    } \n    ```", "```cs\n    Row 0, Column 0: Alpha\n    Row 0, Column 1: Beta\n    Row 0, Column 2: Gamma\n    Row 0, Column 3: Delta\n    Row 1, Column 0: Anne\n    Row 1, Column 1: Ben\n    Row 1, Column 2: Charlie\n    Row 1, Column 3: Doug\n    Row 2, Column 0: Aardvark\n    Row 2, Column 1: Bear\n    Row 2, Column 2: Cat\n    Row 2, Column 3: Dog \n    ```", "```cs\n// Alternative syntax for declaring and allocating memory\n// for a multi-dimensional array.\nstring[,] grid2 = new string[3,4]; // Allocate memory.\ngrid2[0, 0] = \"Alpha\"; // Assign values.\ngrid2[0, 1] = \"Beta\";\n// And so on.\ngrid2[2, 3] = \"Dog\"; \n```", "```cs\n    string[][] jagged = // An array of string arrays.\n    {\n      new[] { \"Alpha\", \"Beta\", \"Gamma\" },\n      new[] { \"Anne\", \"Ben\", \"Charlie\", \"Doug\" },\n      new[] { \"Aardvark\", \"Bear\" }\n    }; \n    ```", "```cs\n    WriteLine(\"Upper bound of the array of arrays is: {0}\",\n      jagged.GetUpperBound(0));\n    for (int array = 0; array <= jagged.GetUpperBound(0); array++)\n    {\n      WriteLine(\"Upper bound of array {0} is: {1}\",\n        arg0: array,\n        arg1: jagged[array].GetUpperBound(0));\n    } \n    ```", "```cs\n    Upper bound of the array of arrays is: 2\n    Upper bound of array 0 is: 2\n    Upper bound of array 1 is: 3\n    Upper bound of array 2 is: 1 \n    ```", "```cs\n    for (int row = 0; row <= jagged.GetUpperBound(0); row++)\n    {\n      for (int col = 0; col <= jagged[row].GetUpperBound(0); col++)\n      {\n        WriteLine($\"Row {row}, Column {col}: {jagged[row][col]}\");\n      }\n    } \n    ```", "```cs\n    Row 0, Column 0: Alpha\n    Row 0, Column 1: Beta\n    Row 0, Column 2: Gamma\n    Row 1, Column 0: Anne\n    Row 1, Column 1: Ben\n    Row 1, Column 2: Charlie\n    Row 1, Column 3: Doug\n    Row 2, Column 0: Aardvark\n    Row 2, Column 1: Bear \n    ```", "```cs\n    int[] sequentialNumbers = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\n    int[] oneTwoNumbers = { 1, 2 };\n    int[] oneTwoTenNumbers = { 1, 2, 10 };\n    int[] oneTwoThreeTenNumbers = { 1, 2, 3, 10 };\n    int[] primeNumbers = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29 };\n    int[] fibonacciNumbers = { 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89 };\n    int[] emptyNumbers = { }; // Or use Array.Empty<int>()\n    int[] threeNumbers = { 9, 7, 5 };\n    int[] sixNumbers = { 9, 7, 5, 4, 2, 10 };\n    WriteLine($\"{nameof(sequentialNumbers)}: {CheckSwitch(sequentialNumbers)}\");\n    WriteLine($\"{nameof(oneTwoNumbers)}: {CheckSwitch(oneTwoNumbers)}\");\n    WriteLine($\"{nameof(oneTwoTenNumbers)}: {CheckSwitch(oneTwoTenNumbers)}\");\n    WriteLine($\"{nameof(oneTwoThreeTenNumbers)}: {CheckSwitch(oneTwoThreeTenNumbers)}\");\n    WriteLine($\"{nameof(primeNumbers)}: {CheckSwitch(primeNumbers)}\");\n    WriteLine($\"{nameof(fibonacciNumbers)}: {CheckSwitch(fibonacciNumbers)}\");\n    WriteLine($\"{nameof(emptyNumbers)}: {CheckSwitch(emptyNumbers)}\");\n    WriteLine($\"{nameof(threeNumbers)}: {CheckSwitch(threeNumbers)}\");\n    WriteLine($\"{nameof(sixNumbers)}: {CheckSwitch(sixNumbers)}\");\n    static string CheckSwitch(int[] values) => values switch\n    {\n      [] => \"Empty array\",\n      [1, 2, _, 10] => \"Contains 1, 2, any single number, 10.\",\n      [1, 2, .., 10] => \"Contains 1, 2, any range including empty, 10.\",\n      [1, 2] => \"Contains 1 then 2.\",\n      [int item1, int item2, int item3] =>\n        $\"Contains {item1} then {item2} then {item3}.\",\n      [0, _] => \"Starts with 0, then one other number.\",\n      [0, ..] => \"Starts with 0, then any range of numbers.\",\n      [2, .. int[] others] => $\"Starts with 2, then {others.Length} more numbers.\",\n      [..] => \"Any items in any order.\", // <-- Note the trailing comma for easier re-ordering.\n      // Use Alt + Up or Down arrow to move statements.\n    }; \n    ```", "```cs\n    sequentialNumbers: Contains 1, 2, any range including empty, 10.\n    oneTwoNumbers: Contains 1 then 2.\n    oneTwoTenNumbers: Contains 1, 2, any range including empty, 10.\n    oneTwoThreeTenNumbers: Contains 1, 2, any single number, 10.\n    primeNumbers: Starts with 2, then 9 more numbers.\n    fibonacciNumbers: Starts with 0, then any range of numbers.\n    emptyNumbers: Empty array\n    threeNumbers: Contains 9 then 7 then 5.\n    sixNumbers: Any items in any order. \n    ```", "```cs\n    int a = 10;\n    double b = a; // An int can be safely cast into a double.\n    WriteLine($\"a is {a}, b is {b}\"); \n    ```", "```cs\n    double c = 9.8;\n    int d = c; // Compiler gives an error if you do not explicitly cast.\n    WriteLine($\"c is {c}, d is {d}\"); \n    ```", "```cs\n    Error: (6,9): error CS0266: Cannot implicitly convert type 'double' to 'int'. An explicit conversion exists (are you missing a cast?) \n    ```", "```cs\n    double c = 9.8;\n    int d = (int)c; // Compiler gives an error if you do not explicitly cast.\n    WriteLine($\"c is {c}, d is {d}\"); **// d loses the .8 part.** \n    ```", "```cs\n    a is 10, b is 10\n    c is 9.8, d is 9 \n    ```", "```cs\n    long e = 10;\n    int f = (int)e;\n    WriteLine($\"e is {e:N0}, f is {f:N0}\");\n    e = long.MaxValue;\n    f = (int)e;\n    WriteLine($\"e is {e:N0}, f is {f:N0}\"); \n    ```", "```cs\n    e is 10, f is 10\n    e is 9,223,372,036,854,775,807, f is -1 \n    ```", "```cs\n    e = 5_000_000_000; \n    ```", "```cs\n    e is 5,000,000,000, f is 705,032,704 \n    ```", "```cs\n    WriteLine(\"{0,12} {1,34}\", \"Decimal\", \"Binary\");\n    WriteLine(\"{0,12} {0,34:B32}\", int.MaxValue);\n    for (int i = 8; i >= -8; i--)\n    {\n      WriteLine(\"{0,12} {0,34:B32}\", i);\n    }\n    WriteLine(\"{0,12} {0,34:B32}\", int.MinValue); \n    ```", "```cs\n     Decimal                             Binary\n      2147483647   01111111111111111111111111111111\n               8   00000000000000000000000000001000\n               7   00000000000000000000000000000111\n               6   00000000000000000000000000000110\n               5   00000000000000000000000000000101\n               4   00000000000000000000000000000100\n               3   00000000000000000000000000000011\n               2   00000000000000000000000000000010\n               1   00000000000000000000000000000001\n               0   00000000000000000000000000000000\n              -1   11111111111111111111111111111111\n              -2   11111111111111111111111111111110\n              -3   11111111111111111111111111111101\n              -4   11111111111111111111111111111100\n              -5   11111111111111111111111111111011\n              -6   11111111111111111111111111111010\n              -7   11111111111111111111111111111001\n              -8   11111111111111111111111111111000\n     -2147483648   10000000000000000000000000000000 \n    ```", "```cs\n    long r = 0b_101000101010001100100111010100101010;\n    int s = (int) r;\n    Console.WriteLine($\"{r,38:B38} = {r}\");\n    Console.WriteLine($\"{s,38:B32} = {s}\"); \n    ```", "```cs\n    00101000101010001100100111010100101010 = 43657622826\n          00101010001100100111010100101010 = 707949866 \n    ```", "```cs\n    using static System.Convert; // To use the ToInt32 method. \n    ```", "```cs\n    double g = 9.8;\n    int h = ToInt32(g); // A method of System.Convert.\n    WriteLine($\"g is {g}, h is {h}\"); \n    ```", "```cs\n    g is 9.8, h is 10 \n    ```", "```cs\n    double[,] doubles = {\n      { 9.49, 9.5, 9.51 },\n      { 10.49, 10.5, 10.51 },\n      { 11.49, 11.5, 11.51 },\n      { 12.49, 12.5, 12.51 } ,\n      { -12.49, -12.5, -12.51 },\n      { -11.49, -11.5, -11.51 },\n      { -10.49, -10.5, -10.51 },\n      { -9.49, -9.5, -9.51 }\n    };\n    WriteLine($\"| double | ToInt32 | double | ToInt32 | double | ToInt32 |\");\n    for (int x = 0; x < 8; x++)\n    {\n      for (int y = 0; y < 3; y++)\n      {\n        Write($\"| {doubles[x, y],6} | {ToInt32(doubles[x, y]),7} \");\n      }\n      WriteLine(\"|\");\n    }\n    WriteLine(); \n    ```", "```cs\n    | double | ToInt32 | double | ToInt32 | double | ToInt32 |\n    |   9.49 |       9 |    9.5 |      10 |   9.51 |      10 |\n    |  10.49 |      10 |   10.5 |      10 |  10.51 |      11 |\n    |  11.49 |      11 |   11.5 |      12 |  11.51 |      12 |\n    |  12.49 |      12 |   12.5 |      12 |  12.51 |      13 |\n    | -12.49 |     -12 |  -12.5 |     -12 | -12.51 |     -13 |\n    | -11.49 |     -11 |  -11.5 |     -12 | -11.51 |     -12 |\n    | -10.49 |     -10 |  -10.5 |     -10 | -10.51 |     -11 |\n    |  -9.49 |      -9 |   -9.5 |     -10 |  -9.51 |     -10 | \n    ```", "```cs\n    foreach (double n in doubles)\n    {\n      WriteLine(format:\n        \"Math.Round({0}, 0, MidpointRounding.AwayFromZero) is {1}\",\n        arg0: n,\n        arg1: Math.Round(value: n, digits: 0,\n                mode: MidpointRounding.AwayFromZero));\n    } \n    ```", "```cs\n    Math.Round(9.49, 0, MidpointRounding.AwayFromZero) is 9\n    Math.Round(9.5, 0, MidpointRounding.AwayFromZero) is 10\n    Math.Round(9.51, 0, MidpointRounding.AwayFromZero) is 10\n    Math.Round(10.49, 0, MidpointRounding.AwayFromZero) is 10\n    Math.Round(10.5, 0, MidpointRounding.AwayFromZero) is 11\n    Math.Round(10.51, 0, MidpointRounding.AwayFromZero) is 11\n    ... \n    ```", "```cs\n    int number = 12;\n    WriteLine(number.ToString());\n    bool boolean = true;\n    WriteLine(boolean.ToString());\n    DateTime now = DateTime.Now;\n    WriteLine(now.ToString());\n    object me = new();\n    WriteLine(me.ToString()); \n    ```", "```cs\n    12\n    True\n    08/28/2024 17:33:54\n    System.Object \n    ```", "```cs\n    // Allocate an array of 128 bytes.\n    byte[] binaryObject = new byte[128];\n    // Populate the array with random bytes.\n    Random.Shared.NextBytes(binaryObject);\n    WriteLine(\"Binary Object as bytes:\");\n    for (int index = 0; index < binaryObject.Length; index++)\n    {\n      Write($\"{binaryObject[index]:X2} \");\n    }\n    WriteLine();\n    // Convert the array to Base64 string and output as text.\n    string encoded = ToBase64String(binaryObject);\n    WriteLine($\"Binary Object as Base64: {encoded}\"); \n    ```", "```cs\n    Binary Object as bytes:\n    EB 53 8B 11 9D 83 E6 4D 45 85 F4 68 F8 18 55 E5 B8 33 C9 B6 F4 00 10 7F CB 59 23 7B 26 18 16 30 00 23 E6 8F A9 10 B0 A9 E6 EC 54 FB 4D 33 E1 68 50 46 C4 1D 5F B1 57 A1 DB D0 60 34 D2 16 93 39 3E FA 0B 08 08 E9 96 5D 64 CF E5 CD C5 64 33 DD 48 4F E8 B0 B4 19 51 CA 03 6F F4 18 E3 E5 C7 0C 11 C7 93 BE 03 35 44 D1 6F AA B0 2F A9 CE D5 03 A8 00 AC 28 8F A5 12 8B 2E BE 40 C4 31 A8 A4 1A\n    Binary Object as Base64: 61OLEZ2D5k1FhfRo+BhV5bgzybb0ABB/y1kjeyYYFjAAI+aPqRCwqebsVPtNM+FoUEbEHV+xV6Hb0GA00haTOT76CwgI6ZZdZM/lzcVkM91IT+iwtBlRygNv9Bjj5ccMEceTvgM1RNFvqrAvqc7VA6gArCiPpRKLLr5AxDGopBo= \n    ```", "```cs\nReadOnlySpan<byte> bytes = ...;\nstring encoded = Base64Url.EncodeToString(bytes); \n```", "```cs\n    using System.Globalization; // To use CultureInfo. \n    ```", "```cs\n    // Set the current culture to make sure date parsing works.\n    CultureInfo.CurrentCulture = CultureInfo.GetCultureInfo(\"en-US\");\n    int friends = int.Parse(\"27\");\n    DateTime birthday = DateTime.Parse(\"4 June 1980\");\n    WriteLine($\"I have {friends} friends to invite to my party.\");\n    WriteLine($\"My birthday is {birthday}.\");\n    WriteLine($\"My birthday is {birthday:D}.\"); \n    ```", "```cs\n    I have 27 friends to invite to my party.\n    My birthday is 6/4/1980 12:00:00 AM.\n    My birthday is Wednesday, June 4, 1980. \n    ```", "```cs\n    int count = int.Parse(\"abc\"); \n    ```", "```cs\n    Unhandled Exception: System.FormatException: Input string was not in a correct format. \n    ```", "```cs\n    Write(\"How many eggs are there? \");\n    string? input = ReadLine();\n    if (int.TryParse(input, out int count))\n    {\n      WriteLine($\"There are {count} eggs.\");\n    }\n    else\n    {\n      WriteLine(\"I could not parse the input.\");\n    } \n    ```", "```cs\n    How many eggs are there? 12\n    There are 12 eggs. \n    ```", "```cs\n    How many eggs are there? twelve\n    I could not parse the input. \n    ```", "```cs\n// A method that might throw an exception.\nint number = int.Parse(\"123\");\n// The Try equivalent of the method.\nbool success = int.TryParse(\"123\", out int number);\n// Trying to create a Uri for a Web API.\nbool success = Uri.TryCreate(\"https://localhost:5000/api/customers\",\n  UriKind.Absolute, out Uri serviceUrl); \n```", "```cs\n    WriteLine(\"Before parsing\");\n    Write(\"What is your age? \");\n    string? input = ReadLine();\n    try\n    {\n      int age = int.Parse(input);\n      WriteLine($\"You are {age} years old.\");\n    }\n    catch\n    {\n    }\n    WriteLine(\"After parsing\"); \n    ```", "```cs\nif (input is null)\n{\n  WriteLine(\"You did not enter a value so the app has ended.\");\n  return; // Exit the app.\n} \n```", "```cs\n    int age = int.Parse(input**!**); \n    ```", "```cs\n    Before parsing\n    What is your age? 49\n    You are 49 years old.\n    After parsing \n    ```", "```cs\n    Before parsing\n    What is your age? Kermit\n    After parsing \n    ```", "```cs\n    catch (Exception ex)\n    {\n      WriteLine($\"{ex.GetType()} says {ex.Message}\");\n    } \n    ```", "```cs\n    Before parsing\n    What is your age? Kermit\n    System.FormatException says Input string was not in a correct format.\n    After parsing \n    ```", "```cs\n    **catch** **(FormatException)**\n    **{**\n     **WriteLine(****\"****The age you entered is not a valid number format.\"****);**\n    **}**\n    catch (Exception ex)\n    {\n      WriteLine($\"{ex.GetType()} says {ex.Message}\");\n    } \n    ```", "```cs\n    Before parsing\n    What is your age? Kermit\n    The age you entered is not a valid number format.\n    After parsing \n    ```", "```cs\n    Before parsing\n    What is your age? 9876543210\n    System.OverflowException says Value was either too large or too small for an Int32.\n    After parsing \n    ```", "```cs\n    **catch** **(OverflowException)**\n    **{**\n     **WriteLine(****\"Your age is a valid number format but it is either too big or small.\"****);**\n    **}**\n    catch (FormatException)\n    {\n      WriteLine(\"The age you entered is not a valid number format.\");\n    } \n    ```", "```cs\n    Before parsing\n    What is your age? 9876543210\n    Your age is a valid number format but it is either too big or small.\n    After parsing \n    ```", "```cs\nWrite(\"Enter an amount: \");\nstring amount = ReadLine()!;\nif (string.IsNullOrEmpty(amount)) return;\ntry\n{\n  decimal amountValue = decimal.Parse(amount);\n  WriteLine($\"Amount formatted as currency: {amountValue:C}\");\n}\ncatch (FormatException) when (amount.Contains('$'))\n{\n  WriteLine(\"Amounts cannot use the dollar sign!\");\n}\ncatch (FormatException)\n{\n  WriteLine(\"Amounts must only contain digits!\");\n} \n```", "```cs\n    int x = int.MaxValue - 1;\n    WriteLine($\"Initial value: {x}\");\n    x++;\n    WriteLine($\"After incrementing: {x}\");\n    x++;\n    WriteLine($\"After incrementing: {x}\");\n    x++;\n    WriteLine($\"After incrementing: {x}\"); \n    ```", "```cs\n    Initial value: 2147483646\n    After incrementing: 2147483647\n    After incrementing: -2147483648\n    After incrementing: -2147483647 \n    ```", "```cs\n    **checked**\n    **{**\n      int x = int.MaxValue - 1;\n      WriteLine($\"Initial value: {x}\");\n      x++;\n      WriteLine($\"After incrementing: {x}\");\n      x++;\n      WriteLine($\"After incrementing: {x}\");\n      x++;\n      WriteLine($\"After incrementing: {x}\");\n    **}** \n    ```", "```cs\n    Initial value: 2147483646\n    After incrementing: 2147483647\n    Unhandled Exception: System.OverflowException: Arithmetic operation resulted in an overflow. \n    ```", "```cs\n    try\n    {\n      // previous code goes here\n    }\n    catch (OverflowException)\n    {\n      WriteLine(\"The code overflowed but I caught the exception.\");\n    } \n    ```", "```cs\n    Initial value: 2147483646\n    After incrementing: 2147483647\n    The code overflowed but I caught the exception. \n    ```", "```cs\n    int y = int.MaxValue + 1; \n    ```", "```cs\n    **unchecked**\n    **{**\n      int y = int.MaxValue + 1;\n     **WriteLine(****$\"Initial value:** **{y}****\"****);**\n     **y--;**\n     **WriteLine(****$\"After decrementing:** **{y}****\"****);**\n     **y--;**\n     **WriteLine(****$\"After decrementing:** **{y}****\"****);**\n    **}** \n    ```", "```cs\n    Initial value: -2147483648\n    After decrementing: 2147483647\n    After decrementing: 2147483646 \n    ```", "```cs\nint max = 500;\nfor (byte i = 0; i < max; i++)\n{\n  WriteLine(i);\n} \n```", "```cs\nEnter a number between 0 and 255: 100\nEnter another number between 0 and 255: 8\n100 divided by 8 is 12 \n```", "```cs\nEnter a number between 0 and 255: apples\nEnter another number between 0 and 255: bananas\nFormatException: Input string was not in a correct format. \n```", "```cs\n    for ( ; ; ) ; \n    ```", "```cs\n    x = 3;\n    y = 2 + ++x; \n    ```", "```cs\n    x = 3 << 2;\n    y = 10 >> 1; \n    ```", "```cs\n    x = 10 & 8;\n    y = 10 | 7; \n    ```"]