["```cs\ndotnet new mvc -n RoutingSample -o RoutingSample \n```", "```cs\ncd RoutingSample\ncode .\n```", "```cs\napp.UseRouting();\napp.UseAuthorization();\napp.UseEndpoints(endpoints =>\n{\n    endpoints.MapControllerRoute(\n        name: \"default\",\n        pattern: \"{controller=Home}/{action=Index}/{id?}\");\n});\n```", "```cs\napp.Map(\"/map\", async context =>\n{\n    await context.Response.WriteAsync(\"OK\");\n});\n```", "```cs\napp.MapGet(\"/mapget\", async context =>\n{\n    await context.Response.WriteAsync(\"Map GET\");\n});\napp.MapPost(\"/mappost\", async context =>\n{\n    await context.Response.WriteAsync(\"Map POST\");\n});\n```", "```cs\napp.MapMethods(\n    \"/mapmethods\", \n    new[] { \"DELETE\", \"PUT\" }, \n    async context =>\n{\n    await context.Response.WriteAsync(\"Map Methods\");\n});\n```", "```cs\napp.Map(\"/map\", mapped =>\n{\n    // some more Middlewares\n});\n```", "```cs\n    // the new endpoint\n    app.MapMyHealthChecks(\"/myhealth\");\n\n    app.MapControllerRoute(\n        name: \"default\",\n        pattern: \n            \"{controller=Home}/{action=Index}/{id?}\");\n    ```", "```cs\n    namespace RoutingSample;\n    public static class MapMyHealthChecksExtensions\n    {\n        public static IEndpointConventionBuilder \n          MapMyHealthChecks (\n            this IEndpointRouteBuilder endpoints, \n            string pattern = \"/myhealth\")\n        {\n            // ...\n        }\n    }\n    ```", "```cs\n    namespace RoutingSample;\n    public class MyHealthChecksMiddleware\n    {\n        private readonly ILogger<MyHealthChecksMiddleware> \n          _logger;\n        public MyHealthChecksMiddleware (\n            RequestDelegate next, \n            ILogger<MyHealthChecksMiddleware> logger)\n        {\n            _logger = logger;\n        }\n        public async Task Invoke(HttpContext context)\n        {\n            // add some checks here... \n            context.Response.StatusCode = 200;\n            context.Response.ContentType = \"text/plain\";\n            await context.Response.WriteAsync(\"OK\");\n        }\n    }\n    ```", "```cs\n    var pipeline = endpoints\n        .CreateApplicationBuilder()\n        .UseMiddleware<MyHealthChecksMiddleware>()\n        .Build();\n    return endpoints.Map(pattern, pipeline)\n        .WithDisplayName(\"My custom health checks\");\n    ```"]