["```cs\n    //Removed code for brevity\n    builder.Logging.AddAzureWebAppDiagnostics();\n    //Removed code for brevity               \n    ```", "```cs\n    [ApiController]\n    [Route(\"[controller]\")]\n    public class WeatherForecastController : ControllerBase\n     {\n            private static readonly string[] Summaries = new[]\n            {\n                \"Freezing\", \"Bracing\", \"Chilly\", \"Cool\", \"Mild\", \"Warm\", \"Balmy\", \"Hot\", \"Sweltering\", \"Scorching\"\n            };\n            private readonly ILogger<WeatherForecast Controller> _logger;\n            public WeatherForecastController(ILogger<WeatherForecast Controller> logger)\n            {\n                _logger = logger;\n            }\n            [HttpGet]\n            public IEnumerable<WeatherForecast> Get()\n            {\n                _logger.LogInformation(\"Logging Information for testing\");\n                _logger.LogWarning(\"Logging Warning for testing\");\n                _logger.LogError(\"Logging Error for testing\");\n                var rng = new Random();\n                return Enumerable.Range(1, 5).Select(index => new WeatherForecast\n                {\n                    Date = DateTime.Now.AddDays(index),\n                    TemperatureC = rng.Next(-20, 55),\n                    Summary = Summaries[rng.Next(Summaries.Length)]\n                })\n                .ToArray();\n            }\n    }\n    ```", "```cs\n    {\n      \"Logging\": {\n        \"LogLevel\": {\n          \"Default\": \"Information\",\n          \"Microsoft\": \"Warning\",\n          \"Microsoft.Hosting.Lifetime\": \"Information\"\n        }\n      },\n      \"Telemetry\": {\n        \"InstrumentationKey\": \"Your AppInsights Instrumentation Key \"\n      }\n    ```", "```cs\n    string InstrumentationKey = builder.Configuration[\"Telemetry:InstrumentationKey\"];\n    // The following line enables Application Insights telemetry collection.\n    builder.Services.AddApplicationInsightsTelemetry(InstrumentationKey);         \n    ```", "```cs\n[HttpGet]\n```", "```cs\n        public IEnumerable<WeatherForecast> Get()\n```", "```cs\n        {\n```", "```cs\n    //Removed code for brevity\n```", "```cs\n            _logger.LogWarning(\"Logging Warning for\n```", "```cs\n               testing\");\n```", "```cs\n            _logger.LogError(\"Logging Error for testing\");\n```", "```cs\n            //Removed code for brevity\n```", "```cs\n    using System;\n    using System.Collections.Generic;\n    namespace Logger\n    {\n        public interface ICustomLogger\n        {\n            void Dependency(string dependencyTypeName,\n             string dependencyName, string data,\n             DateTimeOffset startTime, TimeSpan duration,\n             bool success);\n            void Error(string message, IDictionary<string,\n              string> properties = null);\n            void Event(string eventName,\n            IDictionary<string, string> properties = null,\n            IDictionary<string, double> metrics = null);\n            void Metric(string name, long value,\n             IDictionary<string, string> properties =\n             null);\n            void Exception(Exception exception,\n             IDictionary<string, string> properties =\n             null);\n            void Information(string message,\n             IDictionary<string, string> properties =\n             null);\n            void Request(string name, DateTimeOffset\n             startTime, TimeSpan duration, string\n             responseCode, bool success);\n            void Verbose(string message,\n             IDictionary<string, string> properties =\n             null);\n            void Warning(string message,\n             IDictionary<string, string> properties =\n             null);\n        }\n    }\n    ```", "```cs\n        using Microsoft.ApplicationInsights;\n        using Microsoft.ApplicationInsights.DataContracts;\n        using System;\n        using System.Collections.Generic;\n        namespace Logger\n        {\n            public class AiLogger : ICustomLogger\n            {\n                private TelemetryClient client;\n\n                public AiLogger(TelemetryClient client)\n                {\n                    if (client is null)\n                    {\n                        throw new ArgumentNullException(nameof(client));\n                    }\n                    this.client = client;\n                }\n        ```", "```cs\n                public void Warning(string message, IDictionary<string, string> properties = null)\n                {\n                    this.client.TrackTrace(message, SeverityLevel.Warning, properties);\n                }\n                public void Error(string message, IDictionary<string, string> properties = null)\n                {\n                    this.client.TrackTrace(message, SeverityLevel.Error, properties);\n                }\n                public void Exception(Exception exception, IDictionary<string, string> properties = null)\n                {\n                    this.client.TrackException(exception, properties);\n                }        \n        ```", "```cs\n        public void Event(string eventName, IDictionary<string, string> properties = null, IDictionary<string, double> metrics = null)\n                {\n                    this.client.TrackEvent(eventName, properties, metrics);\n                }\n                public void Metric(string name, long value, IDictionary<string, string> properties = null)\n                {\n                    this.client.TrackMetric(name, value, properties);\n                }\n                public void Information(string message, IDictionary<string, string> properties = null)\n                {\n                    this.client.TrackTrace(message, SeverityLevel.Information, properties);\n                }\n                public void Request(string name, DateTimeOffset startTime, TimeSpan duration, string responseCode, bool success)\n                {\n                    this.client.TrackRequest(name, startTime, duration, responseCode, success);\n                }        \n            }\n        public void Dependency(string dependencyTypeName, string dependencyName, string data, DateTimeOffset startTime, TimeSpan duration, bool success)\n                {            this.client.TrackDependency(dependencyTypeName, dependencyName, data, startTime, duration, success);\n                }\n        ```"]