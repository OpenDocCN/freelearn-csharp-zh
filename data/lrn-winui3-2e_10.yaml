- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Accelerating App Development with Template Studio
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Template Studio 加速应用开发
- en: Starting a new project from scratch can be daunting. What are the best practices
    for application architecture and project layout? **Template Studio for WinUI**
    is an open source project that began as **Windows Template Studio** for UWP and
    WPF applications. Each version of Template Studio is an extension for Visual Studio.
    It now supports WinUI, and variations have been created that will also generate
    **.NET MAUI** and **Uno** **Platform** projects.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 从零开始启动新项目可能会令人望而却步。应用架构和项目布局的最佳实践是什么？**Template Studio for WinUI** 是一个开源项目，最初是为
    UWP 和 WPF 应用程序开发的 **Windows Template Studio**。Template Studio 的每个版本都是 Visual Studio
    的扩展。现在它支持 WinUI，并创建了将生成 **.NET MAUI** 和 **Uno Platform** 项目的变体。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Discover what Template Studio is and how it can help developers create new WinUI
    projects while following best patterns and practices
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解 Template Studio 是什么以及它如何帮助开发者遵循最佳模式和规范创建新的 WinUI 项目
- en: Review the history of Windows Template Studio and UWP applications
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看 Windows Template Studio 和 UWP 应用程序的历史
- en: Create a new project with Template Studio for WinUI and the MVVM Toolkit
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Template Studio for WinUI 和 MVVM Toolkit 创建一个新项目
- en: Learn about other variations of Template Studio
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解 Template Studio 的其他变体
- en: By the end of this chapter, you will understand the origins of the current Template
    Studio extensions for Visual Studio. You’ll also have enough familiarity with
    Template Studio for WinUI to choose it when starting your next WinUI 3 project.
    You will also know where you can go to suggest enhancements, submit issues, or
    improve the project by submitting your own changes to the open source project.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您将了解当前 Visual Studio 的 Template Studio 扩展的起源。您还将对 Template Studio for
    WinUI 有足够的了解，以便在开始您的下一个 WinUI 3 项目时选择它。您还将知道您可以去哪里提出改进建议、提交问题或通过向开源项目提交自己的更改来改进项目。
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To follow along with the examples in this chapter, please refer to the *Technical
    requirements* section of [*Chapter 2*](B20908_02.xhtml#_idTextAnchor044), *Configuring
    the Development Environment and Creating* *the Project*.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本章中的示例，请参阅 [*第 2 章*](B20908_02.xhtml#_idTextAnchor044) 的 *技术要求* 部分，*配置开发环境和创建项目*。
- en: 'The source code for this chapter is available on GitHub here: [https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/master/Chapter10](https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/master/Chapter10)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可在 GitHub 上找到：[https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/master/Chapter10](https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/master/Chapter10)
- en: Overview of Template Studio for WinUI
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Template Studio for WinUI 概述
- en: 'Template Studio for WinUI is an open source extension for Visual Studio that
    enhances the experience of creating a new WinUI 3 project. Microsoft currently
    has three versions of the Template Studio extension available:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Template Studio for WinUI 是一个 Visual Studio 的开源扩展，它增强了创建新 WinUI 3 项目的体验。目前，Microsoft
    提供了三个版本的 Template Studio 扩展：
- en: '**Template Studio for WinUI (C#)** – This is the extension we will use in this
    chapter. There are also plans for a C++ version of Template Studio for WinUI.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Template Studio for WinUI (C#)** – 这是本章我们将使用的扩展。也计划为 Template Studio for
    WinUI 开发 C++ 版本。'
- en: '**Template Studio for WPF** – The WPF version of Template Studio is similar
    to the WinUI extension. It creates a .NET WPF project.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Template Studio for WPF** – Template Studio 的 WPF 版本与 WinUI 扩展类似。它创建一个 .NET
    WPF 项目。'
- en: '**Template Studio for UWP** – This version is the updated extension that was
    originally named Windows Template Studio.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Template Studio for UWP** – 这个版本是最初命名为 Windows Template Studio 的更新扩展。'
- en: 'The code and documentation for the Template Studio projects are available on
    GitHub: [https://github.com/microsoft/TemplateStudio](https://github.com/microsoft/TemplateStudio).
    The team also maintains a release roadmap on GitHub that you can monitor: [https://github.com/microsoft/TemplateStudio/blob/main/docs/roadmap.md](https://github.com/microsoft/TemplateStudio/blob/main/docs/roadmap.md).'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Template Studio 项目的代码和文档可在 GitHub 上找到：[https://github.com/microsoft/TemplateStudio](https://github.com/microsoft/TemplateStudio)。团队还在
    GitHub 上维护一个发布路线图，您可以进行监控：[https://github.com/microsoft/TemplateStudio/blob/main/docs/roadmap.md](https://github.com/microsoft/TemplateStudio/blob/main/docs/roadmap.md)。
- en: Creating a new project with one of the Template Studio extensions launches an
    enhanced wizard-style experience where you can select the type of project you
    want to create and the design pattern to follow (such as MVVM). You can also select
    some pre-defined pages and other features to include in your project, as well
    as a unit test project. We will step through the full experience and discuss the
    options in the next section.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Template Studio扩展之一创建新项目将启动一个增强的向导式体验，您可以在其中选择要创建的项目类型和要遵循的设计模式（例如MVVM）。您还可以选择一些预定义的页面和其他要包含在项目中的功能，以及一个单元测试项目。我们将在下一节中逐步介绍整个体验，并讨论选项。
- en: Template Studio for WinUI is installed like any other Visual Studio extension.
    If you aren’t familiar with the process, you can either download the **VSIX**
    package from the Visual Studio Marketplace ([https://marketplace.visualstudio.com/items?itemName=TemplateStudio.TemplateStudioForWinUICs](https://marketplace.visualstudio.com/items?itemName=TemplateStudio.TemplateStudioForWinUICs))
    or you can search for and add it in the **Manage Extensions** dialog box in Visual
    Studio.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Template Studio for WinUI的安装方式与其他Visual Studio扩展相同。如果您不熟悉这个过程，您可以从Visual Studio
    Marketplace下载**VSIX**包（[https://marketplace.visualstudio.com/items?itemName=TemplateStudio.TemplateStudioForWinUICs](https://marketplace.visualstudio.com/items?itemName=TemplateStudio.TemplateStudioForWinUICs)）或您可以在Visual
    Studio的**管理扩展**对话框中搜索并添加它。
- en: '![Figure 10.1 – Template Studio for WinUI in Visual Studio Marketplace](img/B20908_10_01.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图10.1 – Visual Studio Marketplace中的Template Studio for WinUI](img/B20908_10_01.jpg)'
- en: Figure 10.1 – Template Studio for WinUI in Visual Studio Marketplace
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.1 – Visual Studio Marketplace中的Template Studio for WinUI
- en: 'We’ll be using the **Manage Extensions** dialog to install the extension in
    this chapter. For detailed information on managing extensions in Visual Studio,
    see this documentation on Microsoft Learn: [https://learn.microsoft.com/visualstudio/ide/finding-and-using-visual-studio-extensions](https://learn.microsoft.com/visualstudio/ide/finding-and-using-visual-studio-extensions).'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章中使用**管理扩展**对话框来安装扩展。有关在Visual Studio中管理扩展的详细信息，请参阅Microsoft Learn上的此文档：[https://learn.microsoft.com/visualstudio/ide/finding-and-using-visual-studio-extensions](https://learn.microsoft.com/visualstudio/ide/finding-and-using-visual-studio-extensions)。
- en: Note
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you’re curious about the inner workings of a Visual Studio extension package,
    or VSIX, you can read more about them on Microsoft Learn: [https://learn.microsoft.com/visualstudio/extensibility/anatomy-of-a-vsix-package](https://learn.microsoft.com/visualstudio/extensibility/anatomy-of-a-vsix-package)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对Visual Studio扩展包或VSIX的内部工作原理感兴趣，您可以在Microsoft Learn上了解更多信息：[https://learn.microsoft.com/visualstudio/extensibility/anatomy-of-a-vsix-package](https://learn.microsoft.com/visualstudio/extensibility/anatomy-of-a-vsix-package)
- en: The code that is generated by the extension continues to guide you as you proceed
    to build out the newly created project. There are *TODO* comments with guidance
    about where you add your own code and helpful links to documentation that explains
    the concepts and controls used in the code. The extension is updated frequently
    to reflect the latest WinUI features, practices, and recommendations for Windows
    developers.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展生成的代码将继续在您构建新创建的项目时引导您。其中包含带有指导的 *TODO* 注释，说明您在哪里添加自己的代码，以及指向解释代码中使用的概念和控制方式的文档的有用链接。该扩展会频繁更新，以反映最新的WinUI功能、实践和针对Windows开发者的建议。
- en: Contributions to the Template Studio projects on GitHub are all reviewed to
    ensure they follow good coding style, fluent design, and helpful comments throughout.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 对GitHub上Template Studio项目的贡献都将经过审查，以确保它们遵循良好的编码风格、流畅的设计和全过程的帮助性注释。
- en: Now that we have reviewed some basics of Template Studio for WinUI, let’s dive
    right in and create a new project with the extension.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经回顾了WinUI Template Studio的一些基础知识，让我们直接使用扩展创建一个新项目。
- en: Starting a new WinUI project with Template Studio
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Template Studio开始新的WinUI项目
- en: 'In this section, we are going to create a new WinUI project with Template Studio
    for WinUI. We’ll install the extension, create the project with several pages
    and features selected, and then run the project to explore what is provided before
    we add any of our own code. In the next section, we’ll dive a little deeper into
    the generated code to see where we would start extending and enhancing the project
    if we were building a production application:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用Template Studio for WinUI创建一个新的WinUI项目。我们将安装扩展，创建具有多个页面和功能的 projek，然后运行项目以探索在添加任何自己的代码之前提供的内容。在下一节中，我们将更深入地研究生成的代码，看看如果我们正在构建一个生产应用程序，我们将从哪里开始扩展和增强项目：
- en: 'To start, open Visual Studio and select **Continue without code** to open the
    IDE without loading a solution:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要开始，打开 Visual Studio 并选择 **无代码继续** 以打开 IDE 而不加载解决方案：
- en: '![Figure 10.2 – The Visual Studio 2022 launch dialog](img/B20908_10_02.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.2 – Visual Studio 2022 启动对话框](img/B20908_10_02.jpg)'
- en: Figure 10.2 – The Visual Studio 2022 launch dialog
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.2 – Visual Studio 2022 启动对话框
- en: 'In the menu, select **Extensions** | **Manage Extensions** to open the **Manage**
    **Extensions** dialog:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在菜单中，选择 **扩展** | **管理扩展** 以打开 **管理扩展** 对话框：
- en: '![Figure 10.3 – The Manage Extensions dialog in Visual Studio](img/B20908_10_03.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.3 – Visual Studio 中的管理扩展对话框](img/B20908_10_03.jpg)'
- en: Figure 10.3 – The Manage Extensions dialog in Visual Studio
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.3 – Visual Studio 中的管理扩展对话框
- en: 'In the `template studio`. In the list of search results, select **Download**
    on **Template Studio for** **WinUI (C#)**:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `template studio`。在搜索结果列表中，选择 **下载** **WinUI (C#) 的模板工作室**：
- en: '![Figure 10.4 – Installing Template Studio for WinUI from Manage Extensions](img/B20908_10_04.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.4 – 从管理扩展安装模板工作室 for WinUI](img/B20908_10_04.jpg)'
- en: Figure 10.4 – Installing Template Studio for WinUI from Manage Extensions
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.4 – 从管理扩展安装模板工作室 for WinUI
- en: You will need to restart Visual Studio to complete the extension’s installation.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要重新启动 Visual Studio 以完成扩展的安装。
- en: After the installation completes, launch Visual Studio and select **Create a**
    **new project**.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，启动 Visual Studio 并选择 **创建新项目**。
- en: 'On the `template studio`. The new project template should appear first in the
    list of results:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `template studio`。新项目模板应首先出现在结果列表中：
- en: '![Figure 10.5 – Selecting Template Studio for WinUI to create a new project](img/B20908_10_05.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.5 – 选择 WinUI 的模板工作室以创建新项目](img/B20908_10_05.jpg)'
- en: Figure 10.5 – Selecting Template Studio for WinUI to create a new project
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.5 – 选择 WinUI 的模板工作室以创建新项目
- en: Select `TemplateStudioSampleApp`.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 `TemplateStudioSampleApp`。
- en: 'Click **Create** to continue. Instead of the Visual Studio IDE immediately
    loading, you will be presented with the Template Studio wizard:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **创建** 继续操作。Visual Studio IDE 不会立即加载，而是会显示模板工作室向导：
- en: '![Figure 10.6 – The first page of the Template Studio for WinUI wizard](img/B20908_10_06.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.6 – 模板工作室 for WinUI 的第一页](img/B20908_10_06.jpg)'
- en: Figure 10.6 – The first page of the Template Studio for WinUI wizard
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.6 – 模板工作室 for WinUI 的第一页
- en: The first page of the wizard prompts you to select a project type. The choices
    are `NavigationView` control that we discussed in [*Chapter 5*](B20908_05.xhtml#_idTextAnchor114),
    *Exploring WinUI Controls*. It’s also the navigation method used in the WinUI
    3 Gallery app.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 向导的第一页会提示您选择项目类型。选项包括我们在[*第 5 章*](B20908_05.xhtml#_idTextAnchor114)“探索 WinUI
    控件”中讨论的 `NavigationView` 控件。它也是 WinUI 3 画廊应用中使用的导航方法。
- en: 'Select **Next** to continue. On the **Design pattern** screen, the only available
    option is **MVVM Toolkit**. Some versions of Template Studio offer other MVVM
    frameworks or a **Code Behind** option. For WinUI 3, we only have one choice:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **下一步** 继续操作。在设计模式屏幕上，唯一可用的选项是 **MVVM Toolkit**。一些版本的模板工作室提供其他 MVVM 框架或 **后置代码**
    选项。对于 WinUI 3，我们只有一个选择：
- en: '![Figure 10.7 – The Design pattern screen](img/B20908_10_07.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.7 – 设计模式屏幕](img/B20908_10_07.jpg)'
- en: Figure 10.7 – The Design pattern screen
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.7 – 设计模式屏幕
- en: You’ll also notice that the right pane contains the **Your project details**
    heading and the options that have been selected so far. When you’re more familiar
    with Template Studio, you will be able to review these options and click **Create**
    to finish the wizard without visiting each screen if you’re satisfied with the
    default selections.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您还会注意到右侧面板包含 **您的项目详细信息** 标题以及迄今为止已选择的选项。当您更熟悉模板工作室时，您将能够审查这些选项，并在对默认选择满意的情况下，点击
    **创建** 完成向导，而无需访问每个屏幕。
- en: 'Click **Next** and review the **Pages** screen:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **下一步** 并查看 **页面** 屏幕：
- en: '![Figure 10.8 – The Pages screen in Template Studio for WinUI](img/B20908_10_08.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.8 – 模板工作室 for WinUI 的页面屏幕](img/B20908_10_08.jpg)'
- en: Figure 10.8 – The Pages screen in Template Studio for WinUI
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.8 – 模板工作室 for WinUI 的页面屏幕
- en: By default, one **Blank** page has been selected. The default name of this page
    is **Main**. You can change the names of any pages in the **Your project** **details**
    panel.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，已选择一个 **空白** 页面。此页面的默认名称为 **Main**。您可以在 **您的项目详细信息** 面板中更改任何页面的名称。
- en: 'Let’s select several other page types to review in the next section. Select
    **Data Grid**, **List Details**, **Web View**, and **Settings**. You can select
    more if you like:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在下一节中选取几个其他页面类型进行审查。选择**数据网格**、**列表详情**、**网页视图**和**设置**。如果您喜欢，还可以选择更多：
- en: '![Figure 10.9 – Selecting several additional pages for our project](img/B20908_10_09.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图10.9 – 为我们的项目选择几个附加页面](img/B20908_10_09.jpg)'
- en: Figure 10.9 – Selecting several additional pages for our project
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.9 – 为我们的项目选择几个附加页面
- en: Any of the pages can be renamed except for **Settings**. We’ll leave the default
    names.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 除了**设置**之外，任何页面都可以重命名。我们将保留默认名称。
- en: 'Click **Next** to move on to the **Features** screen:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**继续到**功能**屏幕：
- en: '![Figure 10.10 – Exploring the Features screen of Template Studio for WinUI](img/B20908_10_010.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图10.10 – 探索WinUI的Template Studio功能屏幕](img/B20908_10_010.jpg)'
- en: Figure 10.10 – Exploring the Features screen of Template Studio for WinUI
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.10 – 探索WinUI的Template Studio功能屏幕
- en: The default selections on the **Features** screen are **Settings Storage**,
    **MSIX Packaging**, and **Theme Selection**. We’ll leave those defaults selected.
    If you want to include the Windows App SDK dependencies with your project, you
    can select **Self-Contained**. This is useful if you are going to distribute your
    app manually with an **xcopy deployment**. We’ll discuss deployment options in
    [*Chapter 14*](B20908_14.xhtml#_idTextAnchor582), *Packaging and Deploying WinUI
    Applications*. The other unselected option is **App Notifications**. We have already
    explored notifications in [*Chapter 8*](B20908_08.xhtml#_idTextAnchor197), *Add**ing*
    *Windows Notifications to WinUI Applications*. If you want to learn more about
    any of the features, select **Details**.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**功能**屏幕上的默认选择是**设置存储**、**MSIX打包**和**主题选择**。我们将保留这些默认选择。如果您想将Windows App SDK依赖项包含到您的项目中，可以选择**自包含**。如果您打算手动使用**xcopy部署**分发您的应用程序，这将很有用。我们将在[*第14章*](B20908_14.xhtml#_idTextAnchor582)中讨论部署选项，*打包和部署WinUI应用程序*。另一个未选择的选项是**应用通知**。我们已经在[*第8章*](B20908_08.xhtml#_idTextAnchor197)中探讨了通知，*向WinUI应用程序添加Windows通知*。如果您想了解更多关于任何功能的信息，请选择**详细信息**。'
- en: 'Click **Next** to move on to the final step of the wizard, **Testing**:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**继续到向导的最终步骤，**测试**：
- en: '![Figure 10.11 – The Testing screen of the Template Studio for WinUI wizard](img/B20908_10_011.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图10.11 – WinUI的Template Studio向导的测试屏幕](img/B20908_10_011.jpg)'
- en: Figure 10.11 – The Testing screen of the Template Studio for WinUI wizard
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.11 – WinUI的Template Studio向导的测试屏幕
- en: The only option on the **Testing** screen is **MSTest**. Select it to add a
    unit test project to your solution.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**测试**屏幕上唯一的选项是**MSTest**。选择它以将单元测试项目添加到您的解决方案中。
- en: 'We’ve reached the end of the wizard. Select **Create** to create the solution
    and launch the Visual Studio IDE:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经到达了向导的末尾。选择**创建**以创建解决方案并启动Visual Studio IDE：
- en: '![Figure 10.12 – Visual Studio with our new solution loaded](img/B20908_10_012.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图10.12 – 加载了我们的新解决方案的Visual Studio](img/B20908_10_012.jpg)'
- en: Figure 10.12 – Visual Studio with our new solution loaded
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.12 – 加载了我们的新解决方案的Visual Studio
- en: 'The markdown file named `README.md` will be opened by default. If you want
    to view a formatted preview of the markdown, you can select the **Preview** button
    at the top of the editor window:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，将打开名为`README.md`的Markdown文件。如果您想查看Markdown的格式化预览，可以在编辑器窗口的顶部选择**预览**按钮：
- en: '![Figure 10.13 – Viewing the formatted README file](img/B20908_10_013.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图10.13 – 查看格式化的README文件](img/B20908_10_013.jpg)'
- en: Figure 10.13 – Viewing the formatted README file
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.13 – 查看格式化的README文件
- en: 'The solution contains three projects: **TemplateStudioSampleApp**, **TemplateStudioSampleApp.Core**,
    and **TemplateStudioSampleApp.Tests.MSTest**. We’ll discuss the purpose and contents
    of each of these projects in the next section:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 该解决方案包含三个项目：**TemplateStudioSampleApp**、**TemplateStudioSampleApp.Core**和**TemplateStudioSampleApp.Tests.MSTest**。我们将在下一节中讨论这些项目的目的和内容：
- en: '![Figure 10.14 – Viewing the projects in Solution Explorer](img/B20908_10_14.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图10.14 – 在解决方案资源管理器中查看项目](img/B20908_10_14.jpg)'
- en: Figure 10.14 – Viewing the projects in Solution Explorer
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.14 – 在解决方案资源管理器中查看项目
- en: 'It’s finally time to run the application. Start debugging and ensure that there
    are no compile-time or runtime errors when launching it:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是运行应用程序的时候了。开始调试并确保在启动时没有编译时或运行时错误：
- en: '![Figure 10.15 – Running the TemplateStudioSampleApp solution](img/B20908_10_15.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图10.15 – 运行TemplateStudioSampleApp解决方案](img/B20908_10_15.jpg)'
- en: Figure 10.15 – Running the TemplateStudioSampleApp solution
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.15 – 运行TemplateStudioSampleApp解决方案
- en: Everything should run as expected, and you can try navigating to each page with
    the `NavigationView` controls on the left. The **Settings** button will always
    appear at the bottom of the navigation bar.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的内容都应该按预期运行，你可以尝试使用左侧的 `NavigationView` 控件导航到每个页面。**设置**按钮将始终出现在导航栏的底部。
- en: Now that we have a working application, let’s take some time to understand what’s
    been generated for us.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有一个可工作的应用程序，让我们花些时间来了解为我们生成的内容。
- en: Exploring the code generated by Template Studio
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索由 Template Studio 生成的代码
- en: It’s time to review the contents of the newly generated `README.md` file with
    an overview of the project and its purpose.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候回顾新生成的 `README.md` 文件的内容了，其中包括项目概述及其目的。
- en: Exploring the Core project
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索核心项目
- en: 'The **TemplateStudioSampleApp.Core** project is a class library project targeting
    .NET 7\. This is where you would place any code that is intended to be shared
    across projects. The project contains four folders:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**TemplateStudioSampleApp.Core** 项目是一个针对 .NET 7 的类库项目。这是放置任何打算在项目间共享的代码的地方。该项目包含四个文件夹：'
- en: '`Contracts`: Interfaces for the services in the project are kept here in a
    `Services` subfolder. Any new interfaces needed in this project should be created
    here.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Contracts`：项目中服务的接口保存在 `Services` 子文件夹中。任何在这个项目中需要的新的接口都应该在这里创建。'
- en: '`Helpers`: This folder contains a `Json` helper class with methods to convert
    between **JSON** strings and .NET objects. Add your own common helper classes
    to this folder.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Helpers`：这个文件夹包含一个 `Json` 辅助类，其中包含将 **JSON** 字符串和 .NET 对象之间进行转换的方法。将你自己的常用辅助类添加到这个文件夹中。'
- en: '`Models`: There are some sample model classes in this folder that are used
    to populate company and order data on the `DataGridPage` and `ListDetailPage`
    views.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Models`：这个文件夹中有一些用于在 `DataGridPage` 和 `ListDetailPage` 视图中填充公司和订单数据的示例模型类。'
- en: '`Services`: This folder contains `FileService` and `SampleDataService` classes.
    The `FileService` class reads and writes files with classes in the .NET `System.IO`
    and `System.Text` namespaces. The `SampleDataService` creates static data to populate
    the model classes for the UI. Any other shared services can be added here.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Services`：这个文件夹包含 `FileService` 和 `SampleDataService` 类。`FileService` 类使用
    .NET 的 `System.IO` 和 `System.Text` 命名空间中的类读取和写入文件。`SampleDataService` 创建静态数据以填充
    UI 的模型类。任何其他共享服务都可以添加到这里。'
- en: Note
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It’s possible that the Template Studio extensions may be updated to create .NET
    8 libraries by the time this book is published.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 当这本书出版时，Template Studio 扩展可能已经更新，可以创建 .NET 8 库。
- en: Next, let’s explore the largest project in the solution, **TemplateStudioSampleApp**.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们探索解决方案中最大的项目 **TemplateStudioSampleApp**。
- en: Exploring the main project
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索主要项目
- en: The main project, **TemplateStudioSampleApp**, is the largest of the three projects
    in the solution. It contains all the user interface markup and logic. You will
    probably recognize the files in the root of the project, after working with other
    WinUI projects. **App.xaml**, **MainWindow.xaml**, and **Package.appxmanifest**
    are all there, along with C# code-behind files for each XAML file.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 主要项目 **TemplateStudioSampleApp** 是解决方案中三个项目里最大的一个。它包含了所有的用户界面标记和逻辑。在与其他 WinUI
    项目合作后，你可能会在项目的根目录中认出这些文件。**App.xaml**、**MainWindow.xaml** 和 **Package.appxmanifest**
    都在那里，还有每个 XAML 文件的 C# 代码后文件。
- en: The contents of the `Page` and `ViewModel` class for each page that we selected
    when configuring the project with the Template Studio wizard. There are also `ShellPage`
    and `ShellViewModel` classes for handling the navigation between child pages.
    `NavigationView` control and is the direct child of `MainWindow`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在用 Template Studio 向导配置项目时选择的每个页面的 `Page` 和 `ViewModel` 类的内容。还有处理子页面之间导航的
    `ShellPage` 和 `ShellViewModel` 类。`NavigationView` 控件是 `MainWindow` 的直接子项。
- en: 'Next, let’s go through the contents of the remaining folders:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们浏览剩余文件夹的内容：
- en: '`Activation`: This folder contains the `ActivationHandler`, `DefaultActivation``     Handler`, and `IActivationHandler` classes. They are helpers that use the `INavigationService`
    to navigate to the selected page inside the `Frame` hosted within `ShellPage`.
    If you needed to change the default activation behavior, you would create a new
    handler that inherits from `ActivationHandler`.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Activation`：这个文件夹包含 `ActivationHandler`、`DefaultActivation` 和 `IActivationHandler`
    类。它们是使用 `INavigationService` 在 `ShellPage` 内部 `Frame` 中导航到所选页面的辅助类。如果你需要更改默认激活行为，你会创建一个新的继承自
    `ActivationHandler` 的处理程序。'
- en: '`Assets`: This contains the graphical assets for the project. The `Assets`
    folder is present in every WinUI project.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Assets`: 这包含项目的图形资产。`Assets` 文件夹存在于每个 WinUI 项目中。'
- en: '`Behaviors`: This folder contains an enum named `NavigationViewHeaderMode`,
    which specifies the appearance of the navigation bar, and `NavigationViewHeaderBehavior`,
    which contains the logic to implement these modes. The behavior class inherits
    from `Behavior<NavigationView>`. Any other custom WinUI behaviors would be added
    here.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Behaviors`: 此文件夹包含一个名为 `NavigationViewHeaderMode` 的枚举，它指定了导航栏的外观，以及包含实现这些模式的逻辑的
    `NavigationViewHeaderBehavior`。行为类从 `Behavior<NavigationView>` 继承。任何其他自定义 WinUI
    行为都将添加到这里。'
- en: '`Contracts`: This is where you keep your interfaces for the project. The two
    subfolders, `Services` and `ViewModels`, contain interfaces for eight existing
    classes in those corresponding project folders.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Contracts`: 这是您保存项目接口的地方。两个子文件夹 `Services` 和 `ViewModels` 包含对应项目文件夹中八个现有类的接口。'
- en: '`Helpers`: Any helper classes specific to this project are kept here. Some
    of the helpers provided by default include `NavigationHelper`, `SettingsStorageExtensions`,
    and `TitleBarHelper`. The `SettingsStorageExtensions` helper class leverages members
    of the `Windows.Storage` and `Windows.Storage.Streams` namespaces to read and
    write user settings.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Helpers`: 任何特定于此项目的辅助类都保存在这里。默认提供的辅助类包括 `NavigationHelper`、`SettingsStorageExtensions`
    和 `TitleBarHelper`。`SettingsStorageExtensions` 辅助类利用 `Windows.Storage` 和 `Windows.Storage.Streams`
    命名空间中的成员来读取和写入用户设置。'
- en: '`Models`: The sample data models are kept in the `LocalSettingsOptions` class
    stores the name and location of the settings file. Any other UI-specific model
    classes would be added here.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Models`: 示例数据模型保存在 `LocalSettingsOptions` 类中，该类存储设置文件的名称和位置。任何其他与 UI 相关的模型类都将添加到这里。'
- en: '`Services`: There are seven service classes in the `Services` folder. You can
    probably determine the purpose of each by its name: `ActivationService`, `LocalSettings``     Service`, `NavigationService`, `NavigationViewService`, `PageService`, `ThemeSelectorService`,
    and `WebViewService`. You should take some time to review the code in these services.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Services`: `Services` 文件夹中有七个服务类。您可能可以通过其名称确定每个类的用途：`ActivationService`、`LocalSettings`
    服务、`NavigationService`、`NavigationViewService`、`PageService`、`ThemeSelectorService`
    和 `WebViewService`。您应该花些时间审查这些服务中的代码。'
- en: '`Strings`: This folder holds language-specific `Resources.resw` files to localize
    any string values displayed in your application. The English language resource
    file can be found in the `en-us` folder. For more information about localization,
    you should read *Localize your WinUI 3 app* on Microsoft Learn: [https://learn.microsoft.com/windows/apps/winui/winui3/localize-winui3-app](https://learn.microsoft.com/windows/apps/winui/winui3/localize-winui3-app).'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Strings`: 此文件夹包含特定语言的 `Resources.resw` 文件，用于本地化应用程序中显示的任何字符串值。英语语言资源文件可在 `en-us`
    文件夹中找到。有关本地化的更多信息，您应该在 Microsoft Learn 上阅读 *本地化您的 WinUI 3 应用程序*：[https://learn.microsoft.com/windows/apps/winui/winui3/localize-winui3-app](https://learn.microsoft.com/windows/apps/winui/winui3/localize-winui3-app)。'
- en: '`Styles`: This folder contains three files with XAML `ResourceDictionary` elements:
    `FontSizes.xaml`, `TextBlock.xaml`, and `Thickness.xaml`. Let’s look at the contents
    of `FontSizes.xaml` as an example:'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Styles`: 此文件夹包含三个包含 XAML `ResourceDictionary` 元素的文件：`FontSizes.xaml`、`TextBlock.xaml`
    和 `Thickness.xaml`。以下以 `FontSizes.xaml` 的内容为例：'
- en: '[PRE0]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'By centralizing how your app defines a large or medium font size, you can change
    this later without having to modify multiple XAML views. If you are using a `TextBlock`
    or `RichTextBlock`, the other option for font sizing is to use the **XAML type
    ramp** (discussed in [*Chapter 7*](B20908_07.xhtml#_idTextAnchor152), *Fluent
    Design System for Windows Applications*) defined in the XAML theme resources:
    [https://learn.microsoft.com/windows/apps/design/style/xaml-theme-resources#the-xaml-type-ramp](https://learn.microsoft.com/windows/apps/design/style/xaml-theme-resources#the-xaml-type-ramp).'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过集中定义应用程序的大或中号字体大小，您可以在以后更改它而无需修改多个 XAML 视图。如果您正在使用 `TextBlock` 或 `RichTextBlock`，字体大小设置的另一种选择是使用在
    XAML 主题资源中定义的 **XAML 类型渐变**（在 [*第 7 章*](B20908_07.xhtml#_idTextAnchor152)，*Windows
    应用程序的流畅设计系统）中讨论过）：[https://learn.microsoft.com/windows/apps/design/style/xaml-theme-resources#the-xaml-type-ramp](https://learn.microsoft.com/windows/apps/design/style/xaml-theme-resources#the-xaml-type-ramp)。
- en: Before we move on to explore the `App.xaml.cs` file. Everything in here should
    look familiar to you. The project is using the `IHostBuilder.ConfigureServices`
    method to add the `ActivationHandler` and all services, views, and ViewModel classes
    to the DI container. The services and core services are added as singleton objects
    while all the other classes are added with `AddTransient`.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续探索 `App.xaml.cs` 文件之前。这里的一切都应该对您来说都很熟悉。项目使用 `IHostBuilder.ConfigureServices`
    方法添加 `ActivationHandler` 以及所有服务、视图和 ViewModel 类到 DI 容器中。服务和核心服务作为单例对象添加，而所有其他类都使用
    `AddTransient` 添加。
- en: 'The `App` class also has a handy helper method to fetch an instance from the
    DI container:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`App` 类还有一个方便的辅助方法，可以从 DI 容器中获取实例：'
- en: '[PRE1]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This encapsulates some exception-handling logic in case the requested type cannot
    be found, reducing the need to repeat this code throughout the application.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这封装了一些异常处理逻辑，以防请求的类型找不到，从而减少了在整个应用程序中重复此代码的需要。
- en: Notice how each class has helpful comments with links to Microsoft Learn resources
    for any related APIs or other topics. The `App` class has links to .NET dependency
    injection, logging, and other learning resources.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 注意每个类都有有用的注释，其中包含指向 Microsoft Learn 资源的相关 API 或其他主题的链接。`App` 类包含指向 .NET 依赖注入、日志记录和其他学习资源的链接。
- en: Let’s finish this section with a quick look at the **MSTest** project that was
    created by Template Studio.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过快速查看由 Template Studio 创建的 **MSTest** 项目来结束本节。
- en: Exploring the MSTest project
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索 MSTest 项目
- en: The `TestClass`, a `README.md` file, and `Initialize` and `Usings` classes.
    You should read the `README.md` file carefully. It contains information about
    the project, testing UI elements, dependency injection, and mocking. There are
    examples of how to leverage DI and mocks to test the `SettingsViewModel` without
    actually reading or writing any settings to the filesystem.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`TestClass`、一个 `README.md` 文件，以及 `Initialize` 和 `Usings` 类。您应该仔细阅读 `README.md`
    文件。它包含有关项目、测试 UI 元素、依赖注入和模拟的信息。其中包含如何利用 DI 和模拟来测试 `SettingsViewModel` 的示例，而无需实际读取或写入文件系统中的任何设置。'
- en: 'The `TestClass` contains examples of test initialization and cleanup at the
    class and test level, as well as two sample test methods: `TestMethod` and `UITestMethod`:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`TestClass` 包含了在类和测试级别进行测试初始化和清理的示例，以及两个示例测试方法：`TestMethod` 和 `UITestMethod`：'
- en: '[PRE2]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Any test method decorated with the `UITestMethod` attribute will run on the
    UI thread. The generated code does not test any members of the **TemplateStudioSampleApp**
    or **TemplateStudioSampleApp.Core** projects yet. It’s up to you to add your own
    test methods to do that. You can get started by reading the Visual Studio unit
    testing documentation on Microsoft Learn: [https://learn.microsoft.com/visualstudio/test/getting-started-with-unit-testing](https://learn.microsoft.com/visualstudio/test/getting-started-with-unit-testing).'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 任何带有 `UITestMethod` 属性装饰的测试方法都会在 UI 线程上运行。生成的代码尚未测试 `TemplateStudioSampleApp`
    或 `TemplateStudioSampleApp.Core` 项目中的任何成员。添加您自己的测试方法来执行此操作取决于您。您可以通过阅读 Microsoft
    Learn 上的 Visual Studio 单元测试文档开始：[https://learn.microsoft.com/visualstudio/test/getting-started-with-unit-testing](https://learn.microsoft.com/visualstudio/test/getting-started-with-unit-testing)。
- en: In the next section, we will discuss some other Template Studio extensions created
    by Microsoft and one from a third party.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论由 Microsoft 和第三方创建的一些其他 Template Studio 扩展。
- en: Template Studio extensions for other UI frameworks
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Template Studio 为其他 UI 框架提供的扩展
- en: 'We’ve taken a deep dive into the Template Studio for WinUI extension, but what
    about the UI frameworks? As we mentioned earlier in the chapter, Microsoft also
    maintains extensions for Template Studio for WPF and Template Studio for UWP.
    In fact, they even have a **Microsoft Web Template Studio** available: [https://github.com/microsoft/WebTemplateStudio](https://github.com/microsoft/WebTemplateStudio).
    It supports **React**, **Angular**, or **Vue.js** for the frontend and **Node.js**,
    **Flask**, **Molecular**, and **ASP.NET Core** as backend frameworks. If you’re
    interested in web development, you should check it out.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经深入探讨了 Template Studio for WinUI 扩展，但关于 UI 框架呢？正如我们在本章前面提到的，Microsoft 还维护了
    Template Studio for WPF 和 Template Studio for UWP 的扩展。实际上，他们甚至有一个 **Microsoft
    Web Template Studio** 可用：[https://github.com/microsoft/WebTemplateStudio](https://github.com/microsoft/WebTemplateStudio)。它支持前端使用
    **React**、**Angular** 或 **Vue.js**，以及后端框架使用 **Node.js**、**Flask**、**Molecular**
    和 **ASP.NET Core**。如果您对 Web 开发感兴趣，您应该去看看。
- en: There is also an extension called **MAUI App Accelerator** ([https://marketplace.visualstudio.com/items?itemName=MattLaceyLtd.MauiAppAccelerator](https://marketplace.visualstudio.com/items?itemName=MattLaceyLtd.MauiAppAccelerator)),
    which is a Template Studio version for .NET MAUI. We’ll remain focused on WinUI
    and WPF templates in this chapter. The final two we’ll review are Template Studio
    for WPF and the Template Studio-style wizard that comes with the Uno Platform
    extension for Visual Studio. Let’s start with WPF.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有一个名为**MAUI 应用加速器**的扩展（[https://marketplace.visualstudio.com/items?itemName=MattLaceyLtd.MauiAppAccelerator](https://marketplace.visualstudio.com/items?itemName=MattLaceyLtd.MauiAppAccelerator)），这是
    Template Studio 的 .NET MAUI 版本。在本章中，我们将继续关注 WinUI 和 WPF 模板。我们将最后审查的两个是 Template
    Studio for WPF 和与 Visual Studio 的 Uno Platform 扩展一起提供的 Template Studio 风格向导。让我们从
    WPF 开始。
- en: Template Studio for WPF
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Template Studio for WPF
- en: The Template Studio for WPF extension ([https://marketplace.visualstudio.com/items?itemName=TemplateStudio.TemplateStudioForWPF](https://marketplace.visualstudio.com/items?itemName=TemplateStudio.TemplateStudioForWPF))
    is similar to its WinUI counterpart. It has one additional step in the wizard
    (**Services**), and there are a few different options on some of the pages. One
    of the project types available to WPF developers is the **Ribbon** type. This
    creates a shell with a Microsoft Office-style ribbon control at the top in place
    of the standard menu control you would get in a **MenuBar**-type project.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Template Studio for WPF 扩展（[https://marketplace.visualstudio.com/items?itemName=TemplateStudio.TemplateStudioForWPF](https://marketplace.visualstudio.com/items?itemName=TemplateStudio.TemplateStudioForWPF)）与其
    WinUI 对应版本类似。向导中有一个额外的步骤（**服务**），并且在一些页面上有一些不同的选项。WPF 开发者可用的项目类型之一是**功能区**类型。这将在标准菜单控件的位置创建一个带有
    Microsoft Office 风格功能区控件的壳。
- en: 'The **Design pattern** screen allows you to select **Code Behind** or **Prism**,
    in addition to the **MVVM Toolkit** option. While the **Page** options are the
    same as WinUI, the **Features** screen has an option with the ability to show
    multiple views in separate windows. The **Services** screen has two identity-related
    options: **Forced Login** and **Optional Login**. Finally, the **Testing** screen
    has seven different options, rather than just **MSTest**. The additional testing
    frameworks provided are **NUnit**, **xUnit**, and **Appium** (for UI tests), and
    there are options to add test projects for the main project and the **Core** library
    project.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '**设计模式**界面允许您选择**代码后置**或**Prism**，除了**MVVM 工具包**选项。虽然**页面**选项与 WinUI 相同，但**功能**界面有一个可以在单独窗口中显示多个视图的选项。**服务**界面有两个与身份相关的选项：**强制登录**和**可选登录**。最后，**测试**界面有七个不同的选项，而不仅仅是**MSTest**。提供的附加测试框架包括
    **NUnit**、**xUnit** 和 **Appium**（用于 UI 测试），并且有为主项目和**核心**库项目添加测试项目的选项。'
- en: 'The generated projects have the same folder structure as the WinUI projects.
    Here’s an example of a generated WPF project with an empty ribbon control:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的项目结构与 WinUI 项目相同。以下是一个包含空功能区控件的生成 WPF 项目的示例：
- en: '![Figure 10.16 – A WPF project created by Template Studio](img/B20908_10_16.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.16 – 由 Template Studio 创建的 WPF 项目](img/B20908_10_16.jpg)'
- en: Figure 10.16 – A WPF project created by Template Studio
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.16 – 由 Template Studio 创建的 WPF 项目
- en: Let’s finish up by taking a look at the Template Studio wizard provided by the
    Uno Platform extension.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过查看 Uno Platform 扩展提供的 Template Studio 向导来完成。
- en: Template Studio for Uno Platform
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Template Studio for Uno Platform
- en: '**Uno Platform** ([https://platform.uno/](https://platform.uno/)) is a UI framework
    that uses WinUI XAML and .NET code, and it can create applications to target virtually
    every available device platform today: Windows, iOS, Android, macOS, Tizen, web
    (with **WebAssembly**), and even Linux. The Uno Platform extension for Visual
    Studio ([https://marketplace.visualstudio.com/items?itemName=unoplatform.uno-platform-addin-2022](https://marketplace.visualstudio.com/items?itemName=unoplatform.uno-platform-addin-2022))
    includes a new project wizard that is based on the Template Studio code.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**Uno Platform** ([https://platform.uno/](https://platform.uno/)) 是一个使用 WinUI
    XAML 和 .NET 代码的 UI 框架，它可以创建针对今天几乎每个可用设备平台的程序：Windows、iOS、Android、macOS、Tizen、Web（使用
    **WebAssembly**），甚至 Linux。Visual Studio 的 Uno Platform 扩展（[https://marketplace.visualstudio.com/items?itemName=unoplatform.uno-platform-addin-2022](https://marketplace.visualstudio.com/items?itemName=unoplatform.uno-platform-addin-2022)）包括一个基于
    Template Studio 代码的新项目向导。'
- en: 'If you install the extension in Visual Studio and create a new project with
    the **Uno Platform App** template, clicking the **Create** button from the **Configure
    your new project** screen will launch the wizard:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在 Visual Studio 中安装扩展并使用 **Uno Platform App** 模板创建新项目，从 **配置您的项目** 屏幕中点击
    **创建** 按钮将启动向导：
- en: '![Figure 10.17 – The Uno Platform new project screen](img/B20908_10_17.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.17 – Uno Platform 新项目屏幕](img/B20908_10_17.jpg)'
- en: Figure 10.17 – The Uno Platform new project screen
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.17 – Uno Platform 新项目屏幕
- en: 'From here, you can simply select **Create** to accept all the defaults and
    generate a new solution. However, if you select the **Customize** button on the
    **Default** startup type, you will get the full wizard experience:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，您可以简单地选择 **创建** 以接受所有默认设置并生成新解决方案。但是，如果您选择 **默认** 启动类型中的 **自定义** 按钮，您将获得完整的向导体验：
- en: '![Figure 10.18 – The Uno Platform new project wizard](img/B20908_10_18.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.18 – Uno Platform 新项目向导](img/B20908_10_18.jpg)'
- en: Figure 10.18 – The Uno Platform new project wizard
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.18 – Uno Platform 新项目向导
- en: 'From here, you can select from options in 10 different categories. Even though
    the wizard is styled a bit differently, you can see that it has the same origins
    as the Template Studio extensions. We will get into the details of each step of
    the wizard when we build an Uno Platform app in [*Chapter 13*](B20908_13.xhtml#_idTextAnchor570),
    *Take Your App Cross-Platform with Uno Platform*. If you create a new Uno Platform
    project with the defaults and run the **UnoApp1.Wasm** project, you’ll see your
    app running in the browser by leveraging WebAssembly:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，您可以从 10 个不同类别的选项中进行选择。尽管向导的样式略有不同，但您可以看到它与 Template Studio 扩展有相同的起源。当我们在
    [*第 13 章*](B20908_13.xhtml#_idTextAnchor570)，*使用 Uno Platform 将您的应用程序跨平台化* 中构建
    Uno Platform 应用程序时，我们将详细介绍向导的每个步骤。如果您使用默认设置创建新的 Uno Platform 项目并运行 **UnoApp1.Wasm**
    项目，您将看到您的应用程序通过利用 WebAssembly 在浏览器中运行：
- en: '![Figure 10.19 – Running an Uno Platform app in the browser](img/B20908_10_19.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.19 – 在浏览器中运行 Uno Platform 应用程序](img/B20908_10_19.jpg)'
- en: Figure 10.19 – Running an Uno Platform app in the browser
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.19 – 在浏览器中运行 Uno Platform 应用程序
- en: That’s very cool! Now let’s wrap up and review what we’ve learned in this chapter.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常酷！现在让我们总结并回顾本章所学的内容。
- en: Summary
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how the Template Studio for WinUI extension can
    save time and promote good patterns and practices when starting a new WinUI project.
    We stepped through the creation of a new WinUI project with the wizard and explored
    the generated code in the new solution. Understanding the structure and purpose
    of the solution’s components will make it easier to extend it for your own projects.
    We wrapped things up by discussing the Template Studio extensions that are available
    for other UI frameworks such as WPF and Uno Platform.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了 Template Studio for WinUI 扩展如何在新开始 WinUI 项目时节省时间并推广良好的模式和习惯。我们通过向导创建了一个新的
    WinUI 项目，并探索了新解决方案中生成的代码。理解解决方案组件的结构和目的将使您更容易将其扩展到自己的项目中。我们通过讨论可用于其他 UI 框架（如 WPF
    和 Uno Platform）的 Template Studio 扩展来结束讨论。
- en: In the next chapter, [*Chapter 11*](B20908_11.xhtml#_idTextAnchor330), *Debugging
    WinUI Apps with Visual Studio*, we will explore the tools and options provided
    by Visual Studio to make .NET and XAML developers’ lives easier.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，[*第 11 章*](B20908_11.xhtml#_idTextAnchor330)，*使用 Visual Studio 调试 WinUI
    应用程序*，我们将探讨 Visual Studio 提供的工具和选项，以使 .NET 和 XAML 开发者的生活更加轻松。
- en: Questions
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Which unit test framework is used when creating a test project in Template Studio
    for WinUI?
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Template Studio for WinUI 中创建测试项目时使用哪种单元测试框架？
- en: Which project type in Template Studio for WinUI implements a `NavigationView`
    control?
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Template Studio for WinUI 中哪种项目类型实现了 `NavigationView` 控件？
- en: What was the previous name of Template Studio for UWP?
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Template Studio for UWP 的之前名称是什么？
- en: Which MVVM framework is used by Template Studio for WinUI when generating a
    project?
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Template Studio for WinUI 在生成项目时使用哪种 MVVM 框架？
- en: What file format is used for Visual Studio extensions?
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Visual Studio 扩展使用哪种文件格式？
- en: Which Template Studio extension could you use to create a new project if you
    needed to include Linux as one of your target platforms?
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您需要将 Linux 作为目标平台之一，可以使用哪个 Template Studio 扩展来创建新项目？
- en: Which folder contains all the interfaces for the main project generated by Template
    Studio for WinUI?
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个文件夹包含由 Template Studio for WinUI 生成的主项目所有接口？
- en: Part 3:Build and Deploy on Windows and Beyond
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 3 部分：在 Windows 上构建和部署以及更多
- en: This part rounds out your WinUI knowledge by exploring techniques to debug,
    build, and deploy WinUI 3 applications. You will explore the extensive debugging
    tools Visual Studio has to offer WinUI developers. Then, you will see how you
    can host a web application inside a WinUI application, leveraging Blazor, Visual
    Studio Code, GitHub Actions, and the WebView2 control. We’ll also learn how to
    migrate a WinUI project to Uno Platform to run on multiple platforms, including
    Android and the web with WebAssembly. Finally, you’ll learn about the options
    to build and deploy WinUI applications with Visual Studio, the Microsoft Store,
    and Microsoft’s command-line installer, Windows Package Manager (WinGet).
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分通过探索调试、构建和部署WinUI 3应用程序的技术来完善您的WinUI知识。您将了解Visual Studio为WinUI开发者提供的丰富调试工具。然后，您将看到如何利用Blazor、Visual
    Studio Code、GitHub Actions和WebView2控件在WinUI应用程序内托管Web应用程序。我们还将学习如何将WinUI项目迁移到Uno
    Platform以在多个平台上运行，包括Android和WebAssembly。最后，您将了解使用Visual Studio、Microsoft Store和Microsoft的命令行安装程序Windows
    Package Manager (WinGet)构建和部署WinUI应用程序的选项。
- en: 'This part has the following chapters:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包含以下章节：
- en: '[*Chapter 11*](B20908_11.xhtml#_idTextAnchor330), *Debugging WinUI Applications
    with Visual Studio*'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第11章*](B20908_11.xhtml#_idTextAnchor330), *使用Visual Studio调试WinUI应用程序*'
- en: '[*Chapter 12*](B20908_12.xhtml#_idTextAnchor454), *Hosting a Blazor Application
    in WinUI*'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第12章*](B20908_12.xhtml#_idTextAnchor454), *在WinUI中托管Blazor应用程序*'
- en: '[*Chapter 13*](B20908_13.xhtml#_idTextAnchor570), *Take Your App Cross-Platform
    with Uno Platform*'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第13章*](B20908_13.xhtml#_idTextAnchor570), *使用Uno Platform实现应用程序跨平台*'
- en: '[*Chapter 14*](B20908_14.xhtml#_idTextAnchor582), *Packaging and Deploying
    WinUI Applications*'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第14章*](B20908_14.xhtml#_idTextAnchor582), *打包和部署WinUI应用程序*'
