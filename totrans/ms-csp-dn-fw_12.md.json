["```cs\nprivate static void ReadFiles(string path)\n{\n    DirectoryInfo di = new DirectoryInfo(path);\n    var files = di.EnumerateFiles(\"*.jpg\", \n        SearchOption.AllDirectories).ToArray<FileInfo>();\n    var filesWoSpaces = RemoveInvalidNames(files);\n    //var filesWoSpaces = RemoveInvalidNamesParallel(files);\n    foreach (var item in filesWoSpaces)\n    {\n        Console.WriteLine(item.FullName);\n    }\n}\n```", "```cs\nprivate static bool CheckFile(string fileName)\n{\n    return (fileName.Contains(\" \")) ? true : false;\n}\nprivate static List<FileInfo> RemoveInvalidNames(FileInfo[] files)\n{\n    var validNames = new List<FileInfo>();\n    foreach (var item in files)\n    {\n        if (CheckFile(item.Name)==true) {\n            validNames.Add(item);\n        }\n    }\n    return validNames;\n}\n```", "```cs\nConsole.WriteLine(\"Largest number of Window Rows: \" + Console.LargestWindowHeight);\nConsole.WriteLine(\"Largest number of Window Columns: \" + Console.LargestWindowWidth);\nConsole.Read();\n```", "```cs\nprivate static void RunANewTask()\n{\n    Task task = Task.Run(() =>\n    {\n        Console.WriteLine(\"Task started at: \" + \n            DateTime.Now.ToLongTimeString());\n        Thread.Sleep(1500);\n        Console.WriteLine(\"Task ended at: \" + \n            DateTime.Now.ToLongTimeString());\n    });\n    Console.WriteLine(\"Task finished: \" + task.IsCompleted);\n    task.Wait();  // Blocked until the task finishes\n}\n```", "```cs\nvar resolution = Stopwatch.IsHighResolution;\nvar frequency = Stopwatch.Frequency;\nConsole.WriteLine(\"Stopwatch initial use showing basic properties\");\nConsole.WriteLine(\"----------------------------------------------\");\nConsole.WriteLine(\"High resolution: \" + resolution);\nConsole.WriteLine(\"Frequency: \" + frequency);\nStopwatch timer = new Stopwatch();\ntimer.Start();\nReadFiles(pathImages);\ntimer.Stop();\nConsole.WriteLine(\"Elapsed time: \" + timer.Elapsed);\n```", "```cs\nstatic void Main(string[] args)\n{\n    //BasicMeasure();\n    for (int i = 1; i < 9; i++)\n    {\n        PreciseMeasure(i);\n        Console.WriteLine(Environment.NewLine);\n    }\n    Console.ReadLine();\n}\nprivate static void PreciseMeasure(int step)\n{\n    Console.WriteLine(\"Stopwatch precise measuring (Step \" + step +\")\");\n    Console.WriteLine(\"------------------------------------\");\n    Int64 nanoSecPerTick = (1000L * 1000L * 1000L) / Stopwatch.Frequency;\n    Stopwatch timer = Stopwatch.StartNew();\n    ReadFiles(pathImages);\n    timer.Stop();\n    var milliSec = timer.ElapsedMilliseconds;\n    var nanoSec = timer.ElapsedTicks / nanoSecPerTick;\n    Console.WriteLine(\"Elapsed time (standard): \" + timer.Elapsed);\n    Console.WriteLine(\"Elapsed time (millisenconds): \" + milliSec + \"ms\");\n    Console.WriteLine(\"Elapsed time (nanoseconds): \" + nanoSec + \"ns\");\n}\n```", "```cs\n        HttpApplication httpApps = HttpContext.ApplicationInstance;\n        //Loads a list with active modules in the ViewBag\n        HttpModuleCollection httpModuleCollections = httpApps.Modules;\n        ViewBag.modules = httpModuleCollections;\n        ViewBag.NumberOfLoadedModules = httpModuleCollections.Count;\n        ```", "```cs\n        <system.webServer>\n          <modules>\n            <removename=\"FormsAuthentication\" />\n            <removename=\"DefaultAuthentication\" />\n            <removename=\"AnonymousIdentification\" />\n            <removename=\"RoleManager\" />\n          </modules>\n        </system.webServer>\n        ```", "```cs\n        // Removes view engines\n        ViewEngines.Engines.Clear();\n        //Add Razor Engine\n        ViewEngines.Engines.Add(newRazorViewEngine());\n        ```", "```cs\n        <modulesrunAllManagedModulesForAllRequests=\"false\">\n        ```", "```cs\n    <urlCompression doDynamicCompression=\"true\" doStaticCompression=\"true\" dynamicCompressionBeforeCache=\"true\"/>\n    ```", "```cs\n    <system.webServer>\n      <staticContent>\n        <clientCachecacheControlMode=\"UseMaxAge\"cacheControlMaxAge=\"1.00:00:00\" />\n      </staticContent>\n    </system.webServer>\n    ```", "```cs\n        [OutputCache(Duration=10, VaryByParam=\"none\")]\n        public ActionResult Index()\n        {\n          return View();\n        }\n        ```", "```cs\npublic async Task<ActionResult>GizmosAsync()\n{\n  var gizmoService = newGizmoService();\n  returnView(\"Gizmos\", await gizmoService.GetGizmosAsync());\n}\n```"]