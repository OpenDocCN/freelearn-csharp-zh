["```cs\nversion: \"3.7\"\nservices:\n  catalog_api:\n    container_name: catalog_api\n    build:\n      context: .\n      dockerfile: containers/api/Dockerfile\n    env_file:\n      - containers/api/api.env\n    networks:\n      - my_network\n    ports:\n      - 5000:5000\n      - 5001:5001\n    depends_on:\n      - catalog_db\n\n  catalog_db:\n    image: microsoft/mssql-server-linux\n    container_name: catalog_db\n    ports:\n      - 1433:1433\n    env_file:\n      - containers/db/db.env\n    networks:\n      - my_network\n\nnetworks:\n  my_network:\n    driver: bridge\n```", "```cs\nmkdir containers\nmkdir containers/api\nmkdir containers/db\n```", "```cs\n  catalog_api:\n    container_name: catalog_api\n build: \n      context: .\n dockerfile: containers/api/Dockerfile\n```", "```cs\n...\n  env_file:\n      - containers/api/api.env\n...\n```", "```cs\nASPNETCORE_URLS=http://*:5000;https://*:5001\nASPNETCORE_ENVIRONMENT=Integration\n```", "```cs\nSA_PASSWORD=P@ssw0rd\nACCEPT_EULA=\"Y\"\n```", "```cs\nCOMPOSE_PROJECT_NAME=store\n```", "```cs\nFROM mcr.microsoft.com/dotnet/core/sdk:3.1.100\nCOPY . /app\nWORKDIR /app\nRUN dotnet restore\nRUN dotnet build\nRUN dotnet tool install --global dotnet-ef\nENV PATH=\"${PATH}:/root/.dotnet/tools\"\nRUN chmod +x containers/api/entrypoint.sh\nCMD /bin/bash containers/api/entrypoint.sh\n```", "```cs\n#!/bin/bash\nset -e\nrun_cmd=\"dotnet run --verbose --project ./src/Catalog.API/Catalog.API.csproj\"\nuntil dotnet-ef database update --verbose --project ./src/Catalog.API/Catalog.API.csproj ; do\n>&2 echo \"SQL Server is starting up\"\nsleep 1\ndone\n>&2 echo \"SQL Server is up - executing command\"\nexec $run_cmd\n```", "```cs\ndocker-compose up --build\n```", "```cs\nFROM microsoft/dotnet\nCOPY . /app\nWORKDIR /app\nRUN dotnet restore\nRUN dotnet build\nRUN chmod +x ./entrypoint.sh\nCMD /bin/bash ./entrypoint.sh\n```", "```cs\nFROM mcr.microsoft.com/dotnet/core/aspnet:3.1 AS base\nWORKDIR /app\n\nFROM mcr.microsoft.com/dotnet/core/sdk:3.1 AS build\nWORKDIR /project\nCOPY [\"src/Catalog.API/Catalog.API.csproj\", \"src/Catalog.API/\"]\nCOPY . .\nWORKDIR \"/project/src/Catalog.API\"\nRUN dotnet build \"Catalog.API.csproj\" -c Release -o /app/build\n\nFROM build AS publish\nRUN dotnet publish \"Catalog.API.csproj\" -c Release -o /app/publish\n\nFROM base AS final\nWORKDIR /app\nCOPY --from=publish /app/publish .\nENTRYPOINT [\"dotnet\", \"Catalog.API.dll\"]\n```", "```cs\nusing Polly;\nusing Microsoft.Data.SqlClient;\n...\n    public class Startup\n    {\n        ...\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment()) app.UseDeveloperExceptionPage();\n\n            ExecuteMigrations(app, env);\n            ...\n        }\n\n        private void ExecuteMigrations(IApplicationBuilder app, \n         IWebHostEnvironment env)\n        {\n            if (env.EnvironmentName == \"Testing\") return;\n\n            var retry = Policy.Handle<SqlException>()\n                .WaitAndRetry(new TimeSpan[]\n                {\n                    TimeSpan.FromSeconds(2),\n                    TimeSpan.FromSeconds(6),\n                    TimeSpan.FromSeconds(12)\n                });\n\n            retry.Execute(() => \n                app.ApplicationServices.GetService<CatalogContext>().Database.Migrate());\n        }\n    }\n}\n```", "```cs\ndotnet add package Polly\n```"]