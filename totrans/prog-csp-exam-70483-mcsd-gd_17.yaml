- en: Mock Test 1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have a class called `LogException`. The class implements a `CaptureException`
    method using the following code segment: `public static void CaptureException(Exception
    ex)`. Pick one of the following syntaxes to make sure all exceptions in the class
    are captured and rethrow the original exception, including the stack:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`catch (Exception ex)`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`{`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`LogException.CaptureException(ex);`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`throw;`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`}`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`catch (Exception ex)`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`{`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`LogException.CaptureException(ex);`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`throw ex;`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`}`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`catch`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`{`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`LogException(new Exception());`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`}`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`catch`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`{`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`var ex = new Exception();`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`throw ex;`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`}`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You are creating a class named `Store`, which should have a `Store Type` member
    that meets the following requirements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The member must be accessible publicly.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The member must only acquire a restricted set of values.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: While setting the value, the member must ensure that it validates the input
    set in the member.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In which form should you implement the score member?
  prefs: []
  type: TYPE_NORMAL
- en: '`public string storeType;`'
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: '`protected String StoreType` `{` `get{}` `set{}` `}`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`private enum StoreType { Department, Store, Warehouse}`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`public StoreType StoreTypeProperty`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`{`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`get{}`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`set{}`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`}`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`private enum StoreType { Department, Store, Warehouse}`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`private StoreType StoreTypeProperty`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`{`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`get{}`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`set{}`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`` `}` ``'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Write an extension method for a string; it should have an `IsEmail` method
    . The method should check whether the string is a valid email. Select the syntax
    and map it to the places where it should be placed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '`protected static class StringExtensions`'
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '`public static class StringExtensions`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`public static bool IsEmail(this String str)`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`public static bool IsEmail(String str)`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`public class StringExtensions`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You need to write an application in which we ensure that the garbage collector
    does not release an object's resources until the process completes. Which of the
    following syntaxes would you use?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`WaitForFullGCComplete()`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`RemoveMemoryPressure()`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`SuppressFinalize()`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`collect()`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For a list collection, someone has written the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Which of the following code segments is the correct representation of the corresponding
    Lambda expression?
  prefs: []
  type: TYPE_NORMAL
- en: '`var findState = states.First(x => x == stateName);`'
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: '`var findState = states.Where(x => x == stateName);`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`var findState = states.Exists(x => x.Equals(stateName));`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`` `var findState = states.Where(x => x.Equals(stateName));` ``'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following collection objects would fulfill the following requirements?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It must internally store a key and value pair for each item.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: It must allow us to iterate over the collection in order of the key.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: It allows us to access the objects using the key.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The collection objects are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Dictionary
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: Stack
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: List
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: SortedList
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You are creating an application that has a `Student` class. The application
    must have a `Save` method that should satisfy the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It must be strongly typed.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The method must only accept types inherited from the `Animal` class that use
    a constructor that accepts no parameters.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The options are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`public static void Save(Student target)`'
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: '`{`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`}`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`public static void Save<T>(T target) where T : Student , new()`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`{`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`}`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`public static void Save<T>(T target) where T : new(), Student`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`{`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`}`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`public static void Save<T>(T target) where T : Student`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`{`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`` `}` ``'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We are writing an application that is receives a JSON input from another application
    in the following format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We have written the following code in our application to process the input.
    What would be the correct syntax in the `ConvertFromJSON` method to ensure that
    we convert the input to its equivalent student format?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The options are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Return ser.Desenalize (json, typeof(Student));`'
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Return ser.ConvertToType<Student>(json);`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Return ser.Deserialize<Student>(json);`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Return ser.ConvertToType (json, typeof (Student));`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You have an array of integers with `studentId` values in them. Which code logic
    would you use to do the following?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Only select the unique `studentID`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove a particular `studentID` from the array
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Sort the result in descending order into another array
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Your options are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`int[] filteredStudentIDs = studentIDs.Distinct().Where(value => value != studentIDToRemove).OrderByDescending(x
    => x).ToArray();`'
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: '`int[] filteredStudentIDs = studentIDs.Where(value => value != studentIDToRemove).OrderBy(x
    => x).ToArray();`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`int[] filteredStudentIDs = studentIDs.Where(value => value != studentIDToRemove).OrderByDescending(x
    => x).ToArray();`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`int[] filteredStudentIDs = studentIDs.Distinct().OrderByDescending(x => x).ToArray();`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Identify the missing line in the following line of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '`while (reader.Read())`'
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: '`while (reader.NextResult())`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`while (reader.Being())`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`` `while (reader.Exists())` ``'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Write the following `StudentCollection` class in such a way that you can process
    each object in the collection using a `foreach` loop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '`: IComparable`'
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: '`: IEnumerable`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`: IDisposable`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`public void Dispose()`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`return students.GetEnumerator();`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`return obj == null ? 1: students.Length;`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`` `public IEnumerator GetEnumerator()` ``'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following lines of code would you use if you are writing code to
    open a file in line with the following conditions?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No changes should be made to the file.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The application should throw an error if the file does not exist.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: No other processes should be allowed to update this file while the operation
    is in progress.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`var fs = File.Open(Filename, FileMode.OpenOrCreate, FileAccess.Read, FileShare.ReadWrite);`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`var fs = File.Open(Filename, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`var fs = File.Open(Filename, FileMode.Open, FileAccess.Read, FileShare.Read);`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`var fs = File.Open(Filename, FileMode.Open, FileAccess.ReadWrite, FileShare.Read);`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Which of the following lines of code would you use while converting a float
    to an int? You need to ensure that the conversion will not throw the `Float floatPercentage;`
    exception:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`int roundPercentage = (int)floatPercentage;`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`int roundPercentage = (int)(double)floatPercentage;`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`int roundPercentage = floatPercentage;`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`int roundPercentage = (int)(float)floatPercentage;`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Which of the following lines of code would you use while converting a float
    to an int? You need to ensure that the conversion will not throw the `Float floatPercentage;`
    exception:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`int roundPercentage = (int)floatPercentage;`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`int roundPercentage = (int)(double)floatPercentage;`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`int roundPercentage = floatPercentage;`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`int roundPercentage = (int)(float)floatPercentage;`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: We are creating a `Student` class with a `StudentType` attribute. We need to
    ensure that the `StudentType` property can only be accessed within the `Student`
    class or by a class inheriting from the the `Student` class. Which of the following
    implementations would you use?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`public class Student`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`{`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`protected string StudentType`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`{`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`get;`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`set;`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`}`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`}`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`public class Student`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`{`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`internal string StudentType`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`{`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`get;`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`set;`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`}`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`}`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`public class Student`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`{`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`private string StudentType`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`{`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`get;`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`set;`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`}`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`}`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`public class Student`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`{`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`public string StudentType`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`{`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`get;`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`set;`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`}`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`}`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We are writing an application in which we have declared a `Car` class that
    has two attributes, `CarCategory` and `CarName`. In the execution, we need to
    convert the class to its JSON string representation. Refer to the following code
    snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Which of the following lines of code would you use to get the correct structure
    for the JSON representation?
  prefs: []
  type: TYPE_NORMAL
- en: '`new DataContractSerializer(typeof(Car))`'
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: '`new XmlSerializer(typeof(Car))`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`new NetDataContractSerializer()`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`new DataContractJsonSerializer(typeof(Car))`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We are writing an application for a bank in which we use the following code
    to find out the interest amount for a specified number of months, and the initial
    amount deposited in the bank:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We've learned that the application is calculating incorrect interest amounts
    if the number of months is 6\. If the number of months is 6, the interest rate
    should be 6.2%. Which of the lines of code would you change?
  prefs: []
  type: TYPE_NORMAL
- en: Replace line 7 with `interest = 0.062m`
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: Replace line 11 with `interest = 0.06m`
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Replace line 4 with `decimal interest = 0.062m`
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Replace line 15 with `interest = 0.062m`
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We are writing an application in which we are making asynchronous calls to
    three different services, as described in the following example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Which of the following lines would you insert if you need to wait for the results
    from all three preceding services before control can be transferred back to the
    calling function?
  prefs: []
  type: TYPE_NORMAL
- en: '`await Task.Yield();`'
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: '`await Task.WhenAll(task1, task2, task3);`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`await Task.WaitForCompletion(task1, task2, task3);`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`await Task.WaitAll();`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: We are writing an application in which we are executing multiple operations,
    such as assigning, modifying, and replacing on string variables. Which of the
    following keywords would you use to make sure the operations consume as little
    memory as possible?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`String.Concat`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`+ operator`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`StringBuilder`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`` `String.Add` ``'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: We are writing an application in which we are maintaining students scores in
    a list, as shown in the following code block. We need to write a statement to
    filter out scores greater that 75\. Which of the statements would you use?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '`var filteredScores = scores.Skip(75);`'
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: '`var filteredScores = scores.Where(i => i > 75);`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`var filteredScores = scores.Take(75);`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`var filteredScores = from i in scores`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`groupby i into tempList`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`where tempList.Key > 75`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`select i;`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
