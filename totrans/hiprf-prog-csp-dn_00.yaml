- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Writing high-performance code while building an application is crucial, and
    over the years, Microsoft has focused on delivering various performance-related
    improvements within the .NET ecosystem. This book will help you understand the
    aspects involved in designing responsive, resilient, and high-performance applications
    with the new versions of C# and .NET.
  prefs: []
  type: TYPE_NORMAL
- en: You will start by understanding the foundation of high-performance code and
    the latest performance-related improvements in C# 10.0 and .NET 6\. Next, you’ll
    learn how to use tracing and diagnostics to track down performance issues and
    the cause of memory leaks. The chapters that follow then show you how to enhance
    the performance of your networked applications and various ways to improve directory
    tasks, file tasks, and more. You’ll go on to improve data querying performance
    and write responsive user interfaces. You’ll also discover how you can use cloud
    providers such as Microsoft Azure to build scalable distributed solutions. Finally,
    you’ll explore various ways to process code synchronously, asynchronously, and
    in parallel to reduce the time it takes to process a series of tasks.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this C# programming book, you’ll have the confidence you need
    to build highly resilient, high-performance applications that meet your customer’s
    demands.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is for software engineers, professional software developers, performance
    engineers, and application profilers looking to improve the speed of their code
    or take their skills to the next level to gain a competitive advantage. You should
    be a proficient C# programmer who can already put the language to good use and
    is also comfortable using Microsoft Visual Studio 2022.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B16617_01_Final_SB_Epub.xhtml#_idTextAnchor014), *Introducing
    C# 10.0 and .NET 6*, talks about the **Common Language Runtime** (**CLR**). You
    will start by learning about what’s new in C# 10.0 and .NET 6\. Then you will
    learn about the .NET native runtime and CoreCLR. Next, you will learn about the
    unified BCL followed by Windows Store performance. Finally, you will learn about
    ASP.NET 5 performance.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B16617_02_Final_SB_Epub.xhtml#_idTextAnchor040), *Implementing
    C# Interoperability*, introduces Microsoft .NET interoperability. You will learn
    how to call and dispose of unsafe code. You will also learn how to migrate legacy
    COM programs to .NET using COM interoperability. In this chapter, you will learn
    how to create .NET libraries and components and use them in legacy COM applications.
    By the end of the chapter, you will have learned how to consume COM components
    in .NET and how to consume .NET applications in COM components. This will help
    you to migrate COM applications over to the .NET platform.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B16617_03_Final_SB_Epub.xhtml#_idTextAnchor053), *Predefined
    Data Types and Memory Allocations*, explores C# primitive types and C# object
    types. You will learn about the stack and the heap and about passing data by reference
    and by value. Then you will learn about boxing and unboxing and their implications
    on application performance. You will also be refreshed on the C# primitive type,
    and how to build objects that perform well.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B16617_04_Final_SB_Epub.xhtml#_idTextAnchor072), *Memory Management*,
    talks about the garbage collector. You will learn how to use tracing and diagnostics
    to track down performance issues and the cause of memory leaks. Then you will
    learn about object generations and how the garbage collector decides what to dispose
    of. You will also learn about weak references and how to correctly dispose of
    objects in order to prevent memory leaks.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B16617_05_Final_SB_Epub.xhtml#_idTextAnchor085), *Application
    Profiling and Tracing*, teaches you how to profile your applications to identify
    poor areas of performance. You will learn about code metrics and how to perform
    static code analysis. In your drive to write code that is more performant, you
    will learn to make use of memory dumps, the loaded modules viewer, debugging,
    tracing, and dotnet-counters. By the time you have completed this chapter, you
    will have the skills and experience you need to profile your own applications.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B16617_06_Final_SB_Epub.xhtml#_idTextAnchor117), *The .NET Collections*,
    explores the collections framework. You will learn about the different collections
    and how to best use them to get maximum performance from them. You will access
    the various collections in the `System.Collection`, `System.Collection.Concurrent`,
    and `System.Collections.Generic` namespaces. You will also create your own custom
    exceptions and learn how to query collections using LINQ.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B16617_07_Final_SB_Epub.xhtml#_idTextAnchor139), *LINQ Performance*,
    explains how to perform LINQ queries with performance in mind. Depending on how
    you use LINQ, different methods that return the same result can behave and perform
    differently. And so, in this chapter, you will learn how best to perform queries
    on LINQ to improve the performance of your applications.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B16617_08_Final_SB_Epub.xhtml#_idTextAnchor152), *File and Stream
    I/O*, explains how to improve file and directory performance. You will learn ways
    to improve directory tasks, file tasks, memory tasks, and isolated storage tasks.
    In this book, you will learn how to write to files asynchronously and read from
    files asynchronously.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B16617_09_Final_SB_Epub.xhtml#_idTextAnchor168), *Enhancing the
    Performance of Networked Applications*, breaks down how to speed up the performance
    of network applications. You will learn how to communicate over a network using
    the TCP and UDP network protocols. Then you will learn how to perform network
    tracing processes with the OSI Network Layer Reference Model and a selection of
    TCP and UDP networking protocols. Cache management will also be covered so that
    you can improve the efficiency of resource retrieval.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B16617_10_Final_SB_Epub.xhtml#_idTextAnchor189)*, Setting Up
    Our Database Project*, sets up the Northwind database project on SQL Server as
    we will be using this database in the next section to benchmark data access methods.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B16617_11_Final_SB_Epub.xhtml#_idTextAnchor205), *Benchmarking
    Relational Data Access Frameworks*, benchmarks three different ways to manipulate
    SQL Server database data. We will be performing a side-by-side comparison of Entity
    Framework, ADO.NET, and Dapper.NET. After running the benchmarks for each of these
    data access and object mappers, you will be able to make an educated judgment
    call on the best form of data access and object mapping for your projects.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B16617_12_Final_SB_Epub.xhtml#_idTextAnchor215), *Responsive
    User Interfaces*, explains how to write responsive user interfaces. You will write
    responsive **Windows Forms** (**WinForms**), **Windows Presentation Foundation**
    (**WPF**), ASP.NET, .NET MAUI, and WinUI applications. Using background worker
    threads, you will see how you can update and work with the user interface in real
    time by running long-running tasks in the background.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 13*](B16617_13_Final_SB_Epub.xhtml#_idTextAnchor239), *Distributed
    Systems*, describes distributed applications and explains how to improve their
    performance. You will learn how to build performant distributed applications using
    the **Command Query Responsibility Separation** (**CQRS**) software design pattern,
    event sourcing, and microservices. You will see how to use cloud providers such
    as Microsoft Azure to build scalable distributed solutions using Cosmos DB, Azure
    Functions, and the open source Pulumi infrastructure tool.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 14*](B16617_14_Final_SB_Epub.xhtml#_idTextAnchor254), *Multi-Threaded
    Programming*, explores what threads and threading are and discusses background
    and foreground threads. Then you will learn how to pass data into threads before
    you run them. You will also learn how to pause, interrupt, destroy, schedule,
    and cancel threads.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 15*](B16617_15_Final_SB_Epub.xhtml#_idTextAnchor266), *Parallel Programming*,
    explains how to take advantage of the multiple CPU cores that are available in
    today’s modern computers. You will learn how to process your code by distributing
    the work between processes concurrently.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 16*](B16617_16_Final_SB_Epub.xhtml#_idTextAnchor280), *Asynchronous
    Programming*, demystifies the `async`, `await`, and `WhenAll`. You will also look
    at different return types, how to extract the required results, and how to correctly
    cancel asynchronous operations and perform asynchronous file reading and writing.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to be proficient in C# and know how to use Visual Studio 2022
    to create, run, and debug C# programs and install NuGet packages. You will get
    the most from this book if you follow along, write the code, and use the tools
    specified. But if you are too busy, follow Microsoft’s guidance for obtaining
    and installing the following software.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Preface_Table.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**If you are using the digital version of this book, we advise you to type
    the code yourself or access the code from the book’s GitHub repository (a link
    is available in the next section). Doing so will help you avoid any potential
    errors related to the copying and pasting of code.**'
  prefs: []
  type: TYPE_NORMAL
- en: Please try and answer the questions, read the external resources provided at
    the end of each chapter, and put what you have learned into action in your own
    programming and performance training exercises. This will help to reinforce what
    you have learned throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from GitHub at [https://github.com/PacktPublishing/High-Performance-Programming-in-CSharp-and-.NET](https://github.com/PacktPublishing/High-Performance-Programming-in-CSharp-and-.NET).
    If there’s an update to the code, it will be updated in the GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Download the color images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We also provide a PDF file that has color images of the screenshots and diagrams
    used in this book. You can download it here: [https://packt.link/hQmsb](https://packt.link/hQmsb).'
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`Code in text`: Indicates code words in text, database table names, folder
    names, filenames, file extensions, pathnames, dummy URLs, user input, and Twitter
    handles. Here is an example: “The `enum` data type is 4 bytes (32 bits) in size,
    nullable, and has a minimum value of 0\. You can measure the size of a value type
    using `sizeof(Type type)`.”'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.
    For instance, words in menus or dialog boxes appear in **bold**. Here is an example:
    “Make sure the project is set to **Debug** mode, and then step through the code.”'
  prefs: []
  type: TYPE_NORMAL
- en: Tips or important notes
  prefs: []
  type: TYPE_NORMAL
- en: Appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '**General feedback**: If you have questions about any aspect of this book,
    email us at [customercare@packtpub.com](mailto:customercare@packtpub.com) and
    mention the book title in the subject of your message.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/support/errata](http://www.packtpub.com/support/errata)
    and fill in the form.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at [copyright@packt.com](mailto:copyright@packt.com)
    with a link to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com).'
  prefs: []
  type: TYPE_NORMAL
- en: Share Your Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now you’ve finished *High-Performance Programming in C# and .NET*, we’d love
    to hear your thoughts! If you purchased the book from Amazon, please [click here
    to go straight to the Amazon review page](https://packt.link/r/1-800-56471-6)
    for this book and share your feedback or leave a review on the site that you purchased
    it from.
  prefs: []
  type: TYPE_NORMAL
- en: Your review is important to us and the tech community and will help us make
    sure we’re delivering excellent quality content.
  prefs: []
  type: TYPE_NORMAL
