["```cs\nvar myConcreteClass = new ConcreteObjectThingy();\n```", "```cs\nconst int FULLSUSPENSION = 0; \nconst int FRONTSUSPENSION = 1; \nconst int SEATPOSTSUSPENSION = 2; \nconst int HARDTAIL = 3;\n```", "```cs\npublic enum BicycleGeometries \n{ \n  Upright, Recumbent \n}\n```", "```cs\npublic enum SuspensionTypes \n{ \n  Full, Front, Hardtail  \n}\n```", "```cs\npublic enum BicyclePaintColors \n{ \n  Black, Red, White, Blue \n}\n```", "```cs\npublic enum ManufacturingStatus \n{ \n  Specified, FrameManufactured, Painted, SuspensionMounted,\n   Complete \n}\n```", "```cs\npublic abstract class Bicycle \n{ \n  protected string ModelName { get; init; } \n  private int Year { get; set; } \n  private string SerialNumber { get; } \n  protected BicyclePaintColors Color { get; init; } \n  protected BicycleGeometries Geometry { get; init; } \n  protected SuspensionTypes Suspension { get; init; } \n  private ManufacturingStatus BuildStatus { get; set; }\n```", "```cs\n  public Bicycle() \n  { \n    ModelName = string.Empty; \n    SerialNumber = Guid.NewGuid().ToString(); \n    Year = DateTime.Now.Year; \n    BuildStatus = ManufacturingStatus.Specified; \n  }\n```", "```cs\n  public void Build() \n  { \n    Console.WriteLine($\"Manufacturing a {Geometry.ToString()} frame...\"); \n    BuildStatus = ManufacturingStatus.FrameManufactured; \n    PrintBuildStatus(); \n\n    Console.WriteLine($\"Painting the frame {Color.ToString()}\"); \n    BuildStatus = ManufacturingStatus.Painted; \n    PrintBuildStatus(); \n\n    if (Suspension != SuspensionTypes.Hardtail) \n    { \n      Console.WriteLine($\"Mounting the {Suspension.ToString()} suspension.\"); \n      BuildStatus = ManufacturingStatus.SuspensionMounted; \n      PrintBuildStatus(); \n    } \n    Console.WriteLine(\"{0} {1} Bicycle serial number {2} manufacturing complete!\", Year, ModelName, SerialNumber); \n    BuildStatus = ManufacturingStatus.Complete; \n    PrintBuildStatus(); \n  }\n```", "```cs\npublic class RoadBike : Bicycle \n{ \n  public RoadBike() \n  { \n    ModelName = \"Hillcrest\"; \n    Suspension = SuspensionTypes.Hardtail; \n    Color = BicyclePaintColors.Blue; \n    Geometry = BicycleGeometries.Upright; \n\n  }   \n}\n```", "```cs\npublic class MountainBike : Bicycle \n{ \n  public MountainBike() \n  { \n    ModelName = \"Palo Duro Canyon Ranger\"; \n    Suspension = SuspensionTypes.Full; \n    Color = BicyclePaintColors.Black; \n    Geometry = BicycleGeometries.Upright; \n  } \n\n}\n```", "```cs\npublic class Recumbent : Bicycle \n{ \n  public Recumbent() \n  { \n    ModelName = \"Big Bend\"; \n    Suspension = SuspensionTypes.Front; \n    Color = BicyclePaintColors.White; \n    Geometry = BicycleGeometries.Recumbent; \n  }   \n}\n```", "```cs\npublic class Cruiser : Bicycle\n{\n    public Cruiser()\n    {\n        ModelName = \"Galveston Cruiser\";\n        Suspension = SuspensionTypes.Hardtail;\n        Color = BicyclePaintColors.Red;\n        Geometry = BicycleGeometries.Upright;\n    }\n}\n```", "```cs\nusing BumbleBikesLibrary; \nconst string errorText = \"You must pass in mountainbike, cruiser, recumbent, or roadbike\"; \n```", "```cs\nif(args.Length > 0) \n{ \n```", "```cs\n  var bicycleType = args[0].Trim().ToLower(); \n  Bicycle bikeToBuild; \n```", "```cs\n  switch (bicycleType) \n  { \n    case \"mountainbike\": \n      bikeToBuild = new MountainBike(); \n      break; \n    case \"cruiser\": \n      bikeToBuild = new Cruiser(); \n      break; \n    case \"recumbent\": \n      bikeToBuild = new Recumbent(); \n      break; \n    case \"roadbike\": \n      bikeToBuild = new RoadBike(); \n      break; \n```", "```cs\n    default: \n      Console.WriteLine(errorText); \n      throw new Exception(\"Unknown bicycle type: \" +       bicycleType); \n  } \n\n  bikeToBuild.Build(); \n}  \n```", "```cs\nelse \n{ \n  Console.WriteLine(errorText); \n}\n```", "```cs\npublic class SimpleBicycleFactory \n{ \n  public Bicycle CreateBicycle(string bicycleType) \n  { \n    Bicycle bikeToBuild; \n    switch (bicycleType) \n    { \n      case \"mountainbike\": \n        bikeToBuild = new MountainBike(); \n        break; \n      case \"cruiser\": \n        bikeToBuild = new Cruiser(); \n        break; \n      case \"recumbent\": \n        bikeToBuild = new Recumbent(); \n        break; \n      case \"roadbike\": \n        bikeToBuild = new RoadBike(); \n        break; \n      default: \n        throw new Exception(\"Unknown bicycle type: \" +         bicycleType); \n    } \n    return bikeToBuild; \n  } \n} \n```", "```cs\nusing SimpleFactoryExample; \n\nconst string errorText = \"You must pass in mountainbike, cruiser, recumbent, or roadbike\"; \n\nif (args.Length > 0) \n{ \n  var bicycleType = args[0].Trim().ToLower(); \n```", "```cs\n  var bicycleFactory = new SimpleBicycleFactory(); \n  var bikeToBuild = bicycleFactory.CreateBicycle(bicycleType); \n  bikeToBuild.Build(); \n} \nelse \n{ \n  Console.WriteLine(errorText); \n}\n```", "```cs\nConsole.WriteLine(\"Hello, World!\");\n```", "```cs\npublic interface IBicycle \n{ \n  public string ModelName { get; set; } \n  public int Year { get; } \n  public string SerialNumber { get; } \n  public BicycleGeometries Geometry { get; set; } \n  public BicyclePaintColors Color { get; set; } \n  public SuspensionTypes Suspension { get; set; } \n  public ManufacturingStatus BuildStatus { get; set; } \n  public void Build(); \n}\n```", "```cs\npublic abstract class Bicycle : IBicycle \n{ \n  protected Bicycle() \n  { \n    ModelName = string.Empty; // will be filled in subclass                               // constructor \n    SerialNumber = new Guid().ToString(); \n    Year = DateTime.Now.Year; \n    BuildStatus = ManufacturingStatus.Specified; \n  } \n\n  public string ModelName { get; set; } \n  public int Year { get; } \n  public string SerialNumber { get; } \n  public BicyclePaintColors Color { get; set; } \n  public BicycleGeometries Geometry { get; set; } \n  public SuspensionTypes Suspension { get; set; } \n  public ManufacturingStatus BuildStatus { get; set; }\n```", "```cs\nusing BumbleBikesLibrary;\nnamespace FactoryMethodExample;\npublic abstract class BicycleCreator\n{\n    public abstract IBicycle CreateProduct(string modelName);\n}\n```", "```cs\nusing BumbleBikesLibrary;\nnamespace FactoryMethodExample;\npublic class DallasCreator : BicycleCreator\n{\n    public override IBicycle CreateProduct(string modelName)\n    {\n        return modelName.ToLower() switch\n        {\n            \"hillcrest\" => new RoadBike(),\n            \"big bend\" => new Recumbent(),\n            _ => throw new Exception(\"Invalid bicycle model\")\n        };\n    }\n}\n```", "```cs\nusing BumbleBikesLibrary;\nnamespace FactoryMethodExample;\npublic class AlpineCreator : BicycleCreator\n{\n    public override IBicycle CreateProduct(string modelName)\n    {\n        return modelName.ToLower() switch\n        {\n            \"palo duro canyon ranger\" => new MountainBike(),\n            \"galveston cruiser\" => new Cruiser(),\n            _ => throw new Exception(\"Invalid bicycle model\")\n        };\n    }\n}\n```", "```cs\nusing FactoryMethodExample;\nConsole.WriteLine(\"Let's make some bicycles\"); \n\nvar dallasBicycleFactory = new DallasCreator();\nvar phoebesBike = dallasBicycleFactory.CreateProduct(\"HILLCREST\"); \nphoebesBike.Build(); \n\nvar alpineBicycleFactory = new AlpineCreator(); \nvar kittysBike = alpineBicycleFactory.CreateProduct(\"PALO DURO CANYON RANGER\"); \nkittysBike.Build();\n```", "```cs\nusing BumbleBikesLibrary.BicycleComponents.BicycleFrame;\nusing BumbleBikesLibrary.BicycleComponents.Handlebars;\n\nnamespace BicycleAbstractFactoryExample;\n\npublic interface IBicycleFactory\n{\n  public IFrame CreateBicycleFrame();\n  public IHandlebars CreateBicycleHandleBars();\n}\n```", "```cs\nusing BumbleBikesLibrary.BicycleComponents.BicycleFrame;\nusing BumbleBikesLibrary.BicycleComponents.Handlebars;\n\nnamespace BicycleAbstractFactoryExample;\n\npublic class MountainBicycleFactory : IBicycleFactory\n{\n  public IFrame CreateBicycleFrame()\n  {\n    return new MountainBikeFrame();\n  }\n\n  public IHandlebars CreateBicycleHandleBars()\n  {\n    return new MountainBikeHandlebars();\n  }\n}\n```", "```cs\nusing BumbleBikesLibrary.BicycleComponents.BicycleFrame;\nusing BumbleBikesLibrary.BicycleComponents.Handlebars;\nnamespace BicycleAbstractFactoryExample;\npublic class RoadBicycleFactory : IBicycleFactory\n{\n  public IFrame CreateBicycleFrame()\n  {\n    return new RoadBikeFrame();\n  }\n\n  public IHandlebars CreateBicycleHandleBars()\n  {\n    return new RoadBikeHandlebars();\n  }\n}\n```", "```cs\nusing BicycleAbstractFactoryExample;\n\nConsole.WriteLine(\"Let's make some bicycles!\");\n\nIBicycleFactory roadBikeFactory = new RoadBicycleFactory();\n\nvar frame = roadBikeFactory.CreateBicycleFrame();\nvar handlebars = roadBikeFactory.CreateBicycleHandleBars();\n\nConsole.WriteLine(\"We just made a road bike!\");\nConsole.WriteLine(frame.ToString());\nConsole.WriteLine(handlebars.ToString());\n```", "```cs\nIBicycleFactory mountainBikeFactory = new MountainBicycleFactory();\nframe = mountainBikeFactory.CreateBicycleFrame();\nhandlebars = mountainBikeFactory.CreateBicycleHandleBars();\nConsole.WriteLine(\"We just made a mountain bike!\");\nConsole.WriteLine(frame.ToString());\nConsole.WriteLine(handlebars.ToString());\n```", "```cs\npublic interface IBicycleProduct\n{\n  public IFrame Frame { get; set; }\n  public ISuspension Suspension { get; set; }\n  public IHandlebars Handlebars { get; set; }\n  public IDrivetrain Drivetrain { get; set; }\n  public ISeat Seat { get; set; }\n  public IBrakes Brakes { get; set; }\n}\n```", "```cs\npublic class BicycleProduct : IBicycleProduct\n{\n  public IFrame Frame { get; set; }\n  public ISuspension Suspension { get; set; }\n  public IHandlebars Handlebars { get; set; }\n  public IDrivetrain Drivetrain { get; set; }\n  public ISeat Seat { get; set; }\n  public IBrakes Brakes { get; set; }\n\n  public override string ToString()\n  {\n    var fullDescription = new StringBuilder(\"Here's your new bicycle:\");\n    fullDescription.AppendLine(Frame.ToString());\n    fullDescription.AppendLine(Suspension.ToString());\n    fullDescription.AppendLine(Handlebars.ToString());\n    fullDescription.AppendLine(Drivetrain.ToString());\n    fullDescription.AppendLine(Seat.ToString());\n    fullDescription.AppendLine(Brakes.ToString());\n\n    return fullDescription.ToString();\n  }\n}\n```", "```cs\nnamespace BicycleBuilderExample;\n\npublic interface IBicycleBuilder\n{\n  public void Reset();\n  public void BuildFrame();\n  public void BuildHandleBars();\n\n  public void BuildSeat();\n  public void BuildSuspension();\n  public void BuildDriveTrain();\n  public void BuildBrakes();\n\n  public IBicycleProduct GetProduct();\n}\n```", "```cs\npublic class Director\n{\n  public Director(IBicycleBuilder builder)\n  {\n    Builder = builder;\n  }\n  private IBicycleBuilder Builder { get; set; }\n```", "```cs\n  public void ChangeBuilder(IBicycleBuilder builder)\n  {\n    Builder = builder;\n  }\n```", "```cs\n  public IBicycleProduct Make()\n  {\n    Builder.BuildFrame();\n    Builder.BuildHandleBars();\n    Builder.BuildSeat();\n    Builder.BuildSuspension();\n    Builder.BuildDriveTrain();\n    Builder.BuildBrakes();\n\n    return Builder.GetProduct();\n  }\n}\n```", "```cs\npublic class RoadBikeBuilder : IBicycleBuilder\n{\n  private BicycleProduct _bicycle;\n\n  public RoadBikeBuilder()\n  {\n    Reset();\n  }\n\n  public void Reset()\n  {\n    _bicycle = new BicycleProduct();\n  }\n```", "```cs\n  public void BuildFrame()\n  {\n    _bicycle.Frame = new RoadBikeFrame();\n  }\n  public void BuildHandleBars()\n  {\n    _bicycle.Handlebars = new RoadBikeHandlebars();\n  }\n  public void BuildSeat()\n  {\n    _bicycle.Seat = new GenericSeat();\n  }\n  public void BuildSuspension()\n  {\n    _bicycle.Suspension = new HardTailSuspension();\n  }\n  public void BuildDriveTrain()\n  {\n    _bicycle.Drivetrain = new RoadDrivetrain();\n  }\n  public void BuildBrakes()\n  {\n    _bicycle.Brakes = new CaliperBrakes();\n  }\n  public IBicycleProduct GetProduct()\n  {\n    return _bicycle;\n  }\n}\n```", "```cs\nusing BicycleBuilderExample;\n\nConsole.WriteLine(\"Let's make some bikes with the builder pattern!\");\n```", "```cs\nvar roadBikeBuilder = new RoadBikeBuilder();\nvar director = new Director(roadBikeBuilder);\n\nvar roadBike = director.Make();\nConsole.WriteLine(roadBike.ToString());\n```", "```cs\nvar mountainBikeBuilder = new MountainBikeBuilder();\ndirector.ChangeBuilder(mountainBikeBuilder);\n\nvar mountainBike = director.Make();\nConsole.WriteLine(mountainBike.ToString());\n```", "```cs\npublic class WeldingArmPool\n{\n  private int _maxSize = 10;\n```", "```cs\n  public WeldingArmPool()\n  {\n    Reset();\n  }\n```", "```cs\n  private List<WeldingArm> Pool { get; set; }\n```", "```cs\n  public int MaxSize\n  {\n    get => _maxSize;\n    set\n    {\n      _maxSize = value;\n      Reset();\n    }\n  }\n```", "```cs\n  public int ArmsAvailable => Pool.Count;\n```", "```cs\n  public void Reset()\n  {\n    Pool = new List<WeldingArm>();\n    for (var i = 0; i < MaxSize; i++) Pool.Add(new WeldingArm());\n  }\n```", "```cs\npublic WeldingArm GetArmFromPool()\n  {\n    if (ArmsAvailable > 0)\n    {\n      var returnArm = Pool[0];\n      Pool.RemoveAt(0);\n      return returnArm;\n    }\n\n    throw new Exception(\"You are out of arms. Return some to                        the pool and try again.\");\n  }\n```", "```cs\n  public void ReturnArmToPool(WeldingArm arm)\n  {\n    arm.CurrentPosition = 0; //not at any station\n    Pool.Add(arm);\n  }\n}\n```", "```cs\nConsole.WriteLine(\"Here's a program that controls some welding                  robots from a pool of 10.\");\n\nvar armPool = new WeldingArmPool\n{\n  MaxSize = 10\n};\n\nvar arm01 = armPool.GetArmFromPool();\narm01.MoveToStation(1);\nif (arm01.DoWeld()) armPool.ReturnArmToPool(arm01);\n```", "```cs\npublic sealed class WeldingArmPoolSingleton\n{\n```", "```cs\n  private static WeldingArmPoolSingleton _instance;\n  private int _maxSize = 10;\n```", "```cs\n  private WeldingArmPoolSingleton()\n  {\n    Reset();\n  }\n```", "```cs\n  public static WeldingArmPoolSingleton Instance\n  {\n    get\n    {\n      if (_instance == null) _instance = new       WeldingArmPoolSingleton();\n      return _instance;\n    }\n  }\n```"]