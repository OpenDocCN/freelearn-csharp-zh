- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Introduction to Minimal APIs
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最小API简介
- en: In this chapter of the book, we will introduce some basic themes related to
    minimal APIs in .NET 6.0, showing how to set up a development environment for
    .NET 6 and more specifically for developing minimal APIs with ASP.NET Core.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的这一章中，我们将介绍一些与.NET 6.0中的最小API相关的基本主题，展示如何设置.NET 6的开发环境，以及更具体地，如何使用ASP.NET
    Core开发最小API。
- en: We will first begin with a brief history of minimal APIs. Then, we will create
    a new minimal API project with Visual Studio 2022 and Visual Code Studio. At the
    end, we will take a look at the structure of our project.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先简要介绍最小API的历史。然后，我们将使用Visual Studio 2022和Visual Code Studio创建一个新的最小API项目。最后，我们将查看我们的项目结构。
- en: By the end of this chapter, you will be able to create a new minimal API project
    and start to work with this new template for a REST API.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将能够创建一个新的最小API项目，并开始使用这个新的REST API模板进行工作。
- en: 'In this chapter, we will be covering the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: A brief history of the Microsoft Web API
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微软Web API的简要历史
- en: Creating a new minimal API project
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个新的最小API项目
- en: Looking at the structure of the project
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看项目结构
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To work with the ASP.NET Core 6 minimal APIs you need to install, first of all,
    .NET 6 on your development environment.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用ASP.NET Core 6最小API，首先需要在你的开发环境中安装.NET 6。
- en: 'If you have not already installed it, let’s do that now:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有安装它，我们现在就安装：
- en: 'Navigate to the following link: [https://dotnet.microsoft.com](https://dotnet.microsoft.com).'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到以下链接：[https://dotnet.microsoft.com](https://dotnet.microsoft.com)。
- en: Click on the **Download** button.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下载**按钮。
- en: By default, the browser chooses the right operating system for you, but if not,
    select your operating system at the top of the page.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，浏览器会为你选择正确的操作系统，但如果不是，请在页面顶部选择你的操作系统。
- en: Download the LTS version of the .NET 6.0 SDK.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载.NET 6.0 SDK的LTS版本。
- en: Start the installer.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动安装程序。
- en: Reboot the machine (this is not mandatory).
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动机器（这不是强制性的）。
- en: 'You can see which SDKs are installed on your development machine using the
    following command in a terminal:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下命令在终端中查看你的开发机器上安装的SDK：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Before you start coding, you will need a code editor or an **Integrated Development
    Environment** (**IDE**). You can choose your favorite from the following list:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始编码之前，你需要一个代码编辑器或一个**集成开发环境**（**IDE**）。你可以从以下列表中选择你喜欢的：
- en: Visual Studio Code for Windows, Mac, or Linux
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Code for Windows、Mac或Linux
- en: Visual Studio 2022
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio 2022
- en: Visual Studio 2022 for Mac
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio 2022 for Mac
- en: In the last few years, Visual Studio Code has become very popular not only in
    the developer community but also in the Microsoft community. Even if you use Visual
    Studio 2022 for your day-to-day work, we recommend downloading and installing
    Visual Studio Code and giving it a try.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去几年中，Visual Studio Code不仅在开发者社区中，而且在微软社区中都非常受欢迎。即使你使用Visual Studio 2022进行日常工作，我们也建议下载并安装Visual
    Studio Code并尝试使用它。
- en: 'Let’s download and install Visual Studio Code and some extensions:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们下载并安装Visual Studio Code和一些扩展：
- en: Navigate to [https://code.visualstudio.com](https://code.visualstudio.com).
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到[https://code.visualstudio.com](https://code.visualstudio.com)。
- en: Download the **Stable** or the **Insiders** edition.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载**稳定版**或**内部预览版**。
- en: Start the installer.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动安装程序。
- en: Launch Visual Studio Code.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Visual Studio Code。
- en: Click on the **Extensions** icon.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**扩展**图标。
- en: You will see the C# extension at the top of the list.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在列表顶部看到C#扩展。
- en: Click on the **Install** button and wait.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**安装**按钮并等待。
- en: 'You can install other recommended extensions for developing with C# and ASP.NET
    Core. If you want to install them, you see our recommendations in the following
    table:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以安装其他推荐的用于C#和ASP.NET Core开发的扩展。如果你想安装它们，请查看以下表格中的我们的建议：
- en: '![](img/Table_1.01_B17902.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Table_1.01_B17902.jpg)'
- en: Additionally, if you want to proceed with the IDE that’s most widely used by
    .NET developers, you can download and install Visual Studio 2022.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果你想使用最广泛使用的.NET开发者的IDE，你可以下载并安装Visual Studio 2022。
- en: 'If you don’t have a license, check if you can use the Community Edition. There
    are a few restrictions on getting a license, but you can use it if you are a student,
    have open source projects, or want to use it as an individual. Here’s how to download
    and install Visual Studio 2022:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有许可证，请检查您是否可以使用社区版。获取许可证有一些限制，但如果您是学生、拥有开源项目或想作为个人使用，则可以使用它。以下是下载和安装Visual
    Studio 2022的步骤：
- en: Navigate to [https://visualstudio.microsoft.com/downloads/](https://visualstudio.microsoft.com/downloads/).
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到[https://visualstudio.microsoft.com/downloads/](https://visualstudio.microsoft.com/downloads/)。
- en: Select Visual Studio 2022 version 17.0 or later and download it.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择Visual Studio 2022版本17.0或更高版本并下载。
- en: Start the installer.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动安装程序。
- en: 'On the **Workloads** tab, select the following:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**工作负载**选项卡上，选择以下内容：
- en: '**ASP.NET and web development**'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ASP.NET和Web开发**'
- en: '**Azure Development**'
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure开发**'
- en: 'On the **Individual Components** tab, select the following:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**单独组件**选项卡上，选择以下内容：
- en: '**Git for Windows**'
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Git for Windows**'
- en: All the code samples in this chapter can be found in the GitHub repository for
    this book at [https://github.com/PacktPublishing/Minimal-APIs-in-ASP.NET-Core-6/tree/main/Chapter01](https://github.com/PacktPublishing/Minimal-APIs-in-ASP.NET-Core-6/tree/main/Chapter01).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的所有代码示例都可以在本书的GitHub存储库中找到，网址为[https://github.com/PacktPublishing/Minimal-APIs-in-ASP.NET-Core-6/tree/main/Chapter01](https://github.com/PacktPublishing/Minimal-APIs-in-ASP.NET-Core-6/tree/main/Chapter01)。
- en: Now, you have an environment in which you can follow and try the code used in
    this book.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您有一个环境，可以跟随并尝试本书中使用的代码。
- en: A brief history of the Microsoft Web API
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微软Web API简史
- en: A few years ago in 2007, .NET web applications went through an evolution with
    the introduction of ASP.NET MVC. Since then, .NET has provided native support
    for the Model-View-Controller pattern that was common in other languages.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 几年前，在2007年，随着ASP.NET MVC的引入，.NET Web应用程序经历了一次演变。从那时起，.NET为在其他语言中常见的模型-视图-控制器模式提供了原生支持。
- en: 'Five years later, in 2012, RESTful APIs were the new trend on the internet
    and .NET responded to this with a new approach for developing APIs, called ASP.NET
    Web API. It was a significant improvement over **Windows Communication Foundation**
    (**WCF**) because it was easier to develop services for the web. Later, in ASP.NET
    Core these frameworks were unified under the name ASP.NET Core MVC: one single
    framework with which to develop web applications and APIs.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 五年后，在2012年，RESTful API成为了互联网上的新趋势，.NET通过一种名为ASP.NET Web API的新方法来响应这一趋势，这种方法比**Windows
    Communication Foundation**（**WCF**）更容易开发面向Web的服务。后来，在ASP.NET Core中，这些框架在ASP.NET
    Core MVC的名称下统一：一个用于开发Web应用程序和API的单个框架。
- en: In ASP.NET Core MVC applications, the controller is responsible for accepting
    inputs, orchestrating operations, and at the end, returning a response. A developer
    can extend the entire pipeline with filters, binding, validation, and much more.
    It’s a fully featured framework for building modern web applications.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在ASP.NET Core MVC应用程序中，控制器负责接受输入、协调操作，并在最后返回响应。开发者可以通过过滤器、绑定、验证等功能扩展整个管道。这是一个功能齐全的框架，用于构建现代Web应用程序。
- en: But in the real world, there are also scenarios and use cases where you don’t
    need all the features of the MVC framework or you have to factor in a constraint
    on performance. ASP.NET Core implements a lot of middleware that you can remove
    from or add to your applications at will, but there are a lot of common features
    that you would need to implement by yourself in this scenario.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 但在现实世界中，也存在一些场景和用例，您不需要MVC框架的所有功能，或者您必须考虑性能限制。ASP.NET Core实现了很多中间件，您可以随意从您的应用程序中删除或添加，但在这个场景中，您需要自己实现许多常见功能。
- en: At last, ASP.NET Core 6.0 has filled these gaps with minimal APIs.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，ASP.NET Core 6.0通过最小API填补了这些空白。
- en: Now that we have covered a brief history of minimal APIs, we will start creating
    a new minimal API project in the next section.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经概述了最小API的简史，接下来我们将开始创建一个新的最小API项目。
- en: Creating a new minimal API project
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新的最小API项目
- en: Let’s start with our first project and try to analyze the new template for the
    minimal API approach when writing a RESTful API.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从我们的第一个项目开始，尝试分析在编写RESTful API时的新模板。
- en: In this section, we will create our first minimal API project. We will start
    by using Visual Studio 2022 and then we will show how you can also create the
    project with Visual Studio Code and the .NET CLI.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: Creating the project with Visual Studio 2022
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to create a new project in Visual Studio 2022:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Visual Studio 2022 and on the main screen, click on **Create a new project**:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.1 – Visual Studio 2022 splash screen ](img/Figure_1.01_B17902.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
- en: Figure 1.1 – Visual Studio 2022 splash screen
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: 'On the next screen, write `API` in the textbox at the top of the window and
    select the template called **ASP.NET Core Web API**:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.2 – Create a new project screen ](img/Figure_1.02_B17902.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
- en: Figure 1.2 – Create a new project screen
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Next, on the **Configure your new project** screen, insert a name for the new
    project and select the root folder for your new solution:![Figure 1.3 – Configure
    your new project screen ](img/Figure_1.03_B17902.jpg)
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 1.3 – Configure your new project screen
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: For this example we will use the name `Chapter01`, but you can choose any name
    that appeals to you.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: On the following **Additional information** screen, make sure to select **.NET
    6.0 (Long-term-support)** from the **Framework** dropdown. And most important
    of all, uncheck the **Use controllers (uncheck to use minimal APIs)** option.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.4 – Additional information screen ](img/Figure_1.04_B17902.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
- en: Figure 1.4 – Additional information screen
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Click **Create** and, after a few seconds, you will see the code of your new
    minimal API project.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we are going to show how to create the same project using Visual Studio
    Code and the .NET CLI.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: Creating the project with Visual Studio Code
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Creating a project with Visual Studio Code is easier and faster than with Visual
    Studio 2022 because you don’t have to use a UI or wizard, rather just a terminal
    and the .NET CLI.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: 'You don’t need to install anything new for this because the .NET CLI is included
    with the .NET 6 installation (as in the previous versions of the .NET SDKs). Follow
    these steps to create a project using Visual Studio Code:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Open your console, shell, or Bash terminal, and switch to your working directory.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the following command to create a new Web API application:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you can see, we have inserted the `-minimal` parameter in the preceding command
    to use the minimal API project template instead of the ASP.NET Core template with
    the controllers.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: 'Now open the new project with Visual Studio Code using the following commands:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now that we know how to create a new minimal API project, we are going to have
    a quick look at the structure of this new template.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Looking at the structure of the project
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Whether you are using Visual Studio or Visual Studio Code, you should see the
    following code in the `Program.cs` file:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: First of all, with the minimal API approach, all of your code will be inside
    the `Program.cs` file. If you are a seasoned .NET developer, it’s easy to understand
    the preceding code, and you’ll find it similar to some of the things you’ve always
    used with the controller approach.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，使用最小 API 方法，所有代码都将位于 `Program.cs` 文件中。如果你是一位资深的 .NET 开发者，理解前面的代码很容易，你会发现它与使用控制器方法时使用的一些东西很相似。
- en: At the end of the day, it’s another way to write an API, but it’s based on ASP.NET
    Core.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，它只是另一种编写 API 的方式，但基于 ASP.NET Core。
- en: However, if you are new to ASP.NET, this single file approach is easy to understand.
    It’s easy to understand how to extend the code in the template and add more features
    to this API.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你是 ASP.NET 的新手，这种单文件方法很容易理解。它很容易理解如何在模板中扩展代码并添加更多功能到这个 API 中。
- en: Don’t forget that minimal means that it contains the minimum set of components
    needed to build an HTTP API but it doesn’t mean that the application you are going
    to build will be simple. It will require a good design like any other .NET application.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记，最小意味着它包含构建 HTTP API 所需的最小组件集，但这并不意味着你将要构建的应用程序将是简单的。它将需要一个良好的设计，就像任何其他
    .NET 应用程序一样。
- en: As a final point, the minimal API approach is not a replacement for the MVC
    approach. It’s just another way to write the same thing.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一点，最小 API 方法不是 MVC 方法的替代品。它只是另一种编写相同内容的方式。
- en: Let’s go back to the code.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到代码。
- en: 'Even the template of the minimal API uses the new approach of .NET 6 web applications:
    a top-level statement.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是最小 API 的模板也使用了 .NET 6 网络应用程序的新方法：顶级语句。
- en: It means that the project has a `Program.cs` file only instead of using two
    files to configure an application.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着项目只有一个 `Program.cs` 文件，而不是使用两个文件来配置应用程序。
- en: If you don’t like this style of coding, you can convert your application to
    the old template for ASP.NET Core 3.x/5\. This approach still continues to work
    in .NET as well.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不喜欢这种编码风格，你可以将你的应用程序转换为 ASP.NET Core 3.x/5. 的旧模板。这种方法在 .NET 中仍然有效。
- en: Important note
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: We can find more information about the `.NET 6 top-level statements` template
    at [https://docs.microsoft.com/dotnet/core/tutorials/top-level-templates](https://docs.microsoft.com/dotnet/core/tutorials/top-level-templates).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在 [https://docs.microsoft.com/dotnet/core/tutorials/top-level-templates](https://docs.microsoft.com/dotnet/core/tutorials/top-level-templates)
    找到更多关于 `.NET 6 顶级语句` 模板的信息。
- en: By default, the new template includes support for the OpenAPI Specification
    and more specifically, Swagger.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，新模板包括对 OpenAPI 规范的支持，特别是 Swagger。
- en: Let’s say that we have our documentation and playground for the endpoints working
    out of the box without any additional configuration needed.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们的端点文档和游乐场已经设置好，无需任何额外配置即可直接使用。
- en: 'You can see the default configuration for Swagger in the following two lines
    of codes:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下两行代码中看到 Swagger 的默认配置：
- en: '[PRE4]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Very often, you don’t want to expose Swagger and all the endpoints to the production
    or staging environments. The default template enables Swagger out of the box only
    in the development environment with the following lines of code:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 很常见，你不想将 Swagger 和所有端点暴露给生产或预发布环境。默认模板仅通过以下代码在开发环境中启用 Swagger：
- en: '[PRE5]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If the application is running on the dev elopment environment, you must also
    include the Swagger documentation, but otherwise not.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用程序正在开发环境中运行，你必须包括 Swagger 文档，否则则不需要。
- en: Note
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We’ll talk in detail about Swagger in [*Chapter 3*](B17902_03.xhtml#_idTextAnchor038),
    *Working with Minimal APIs*.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 [*第 3 章*](B17902_03.xhtml#_idTextAnchor038) *使用最小 API* 中详细讨论 Swagger。
- en: 'In these last few lines of code in the template, we are introducing another
    generic concept for .NET 6 web applications: environments.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在模板的最后几行代码中，我们为 .NET 6 网络应用程序引入了另一个通用概念：环境。
- en: Typically, when we develop a professional application, there are a lot of phases
    through which an application is developed, tested, and finally published to the
    end users.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，当我们开发一个专业应用程序时，应用程序会经历许多阶段，包括开发、测试，最终发布给最终用户。
- en: By convention, these phases are regulated and called development, staging, and
    production. As developers, we might like to change the behavior of the application
    based on the current environment.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 按照惯例，这些阶段被规范为开发、预发布和发布。作为开发者，我们可能希望根据当前环境改变应用程序的行为。
- en: There are several ways to access this information but the typical way to retrieve
    the actual environment in modern .NET 6 applications is to use environment variables.
    You can access the environment variables directly from the `app` variable in the
    `Program.cs` file.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以访问这些信息，但在现代 .NET 6 应用程序中检索实际环境的最典型方法是使用环境变量。您可以直接从 `Program.cs` 文件中的
    `app` 变量访问环境变量。
- en: 'The following code block shows how to retrieve all the information about the
    environments directly from the startup point of the application:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码块展示了如何直接从应用程序的启动点检索所有关于环境的信息：
- en: '[PRE6]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In many cases, you can define additional environments, and you can check your
    custom environment with the following code:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，您可以定义额外的环境，并且您可以使用以下代码检查您的自定义环境：
- en: '[PRE7]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: To define routes and handlers in minimal APIs, we use the `MapGet`, `MapPost`,
    `MapPut`, and `MapDelete` methods. If you are used to using HTTP verbs, you will
    have noticed that the verb `Patch` is not present, but you can define any set
    of verbs using `MapMethods`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在最小 API 中定义路由和处理程序时，我们使用 `MapGet`、`MapPost`、`MapPut` 和 `MapDelete` 方法。如果您习惯于使用
    HTTP 动词，您会注意到动词 `Patch` 不存在，但您可以使用 `MapMethods` 定义任何一组动词。
- en: 'For instance, if you want to create a new endpoint to post some data to the
    API, you can write the following code:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您想创建一个新的端点将一些数据发送到 API，您可以编写以下代码：
- en: '[PRE8]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As you can see in the short preceding code, it’s very easy to add a new endpoint
    with the new minimal API template.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在前面简短的代码中看到的，使用新的最小 API 模板添加新的端点非常容易。
- en: It was more difficult previously, especially for a new developer, to code a
    new endpoint with binding parameters and use dependency injection.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 以前这更加困难，尤其是对于一个新开发者来说，要编码一个新的端点并使用绑定参数以及依赖注入，这更加困难。
- en: Important note
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 重要注意事项
- en: We’ll talk in detail about routing in [*Chapter 2*](B17902_02.xhtml#_idTextAnchor023),
    *Exploring Minimal APIs and Their Advantages*, and about dependency injection
    in [*Chapter 4*](B17902_04.xhtml#_idTextAnchor061), *Dependency Injection in a
    Minimal API Project*.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 [*第 2 章*](B17902_02.xhtml#_idTextAnchor023) *探索最小 API 及其优势* 和 [*第 4 章*](B17902_04.xhtml#_idTextAnchor061)
    *最小 API 项目中的依赖注入* 中详细讨论路由和依赖注入。
- en: Summary
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we first started with a brief history of minimal APIs. Next,
    we saw how to create a project with Visual Studio 2022 as well as Visual Studio
    Code and the .NET CLI. After that, we examined the structure of the new template,
    how to access different environments, and how to start interacting with REST endpoints.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们首先简要介绍了最小 API 的历史。接下来，我们看到了如何使用 Visual Studio 2022 以及 Visual Studio Code
    和 .NET CLI 创建项目。然后，我们检查了新模板的结构，如何访问不同的环境，以及如何开始与 REST 端点交互。
- en: In the next chapter, we will see how to bind parameters, the new routing configuration,
    and how to customize a response.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到如何绑定参数、新的路由配置以及如何自定义响应。
