["```cs\n<InputFile OnChange=\"OnChangeHandler\" \n           accept=\"image/png, image/jpeg\" /> \n```", "```cs\n<input accept=\"image/png, image/jpeg\" type=\"file\" _bl_2=\"\"> \n```", "```cs\nIBrowserFile? selectedFile;\nprivate void OnChangeHandler(InputFileChangeEventArgs e)\n{\n    selectedFile = e.File;\n} \n```", "```cs\nvar stream = await file.OpenReadStream(MAXFILESIZE); \n```", "```cs\n@page \"/uploadImage\"\n@using Microsoft.AspNetCore.Components.Forms\n<PageTitle>Upload Image</PageTitle>\n<h1>Upload Image</h1>\n<InputFile OnChange=\"OnChangeHandler\" \n    accept=\"image/png, image/jpeg\" />\n@if (@image != null)\n{\n    <p>Old file size: @uploadedFile!.Size.ToString(\"N0\") bytes</p>\n    <p>New file size: @resizedFile!.Size.ToString(\"N0\") bytes</p>\n    <img src=\"img/data:@uploadedFile.ContentType;base64,@image\" />\n}\n@code {\n    IBrowserFile? uploadedFile;\n    IBrowserFile? resizedFile;\n    string? image;\n    async Task OnChangeHandler(InputFileChangeEventArgs e)\n    {\n        uploadedFile = e.File;\n        resizedFile = await uploadedFile.RequestImageFileAsync(\n               uploadedFile.ContentType, \n               100, \n               100\n        );\n        var buffer = new byte[resizedFile.Size]; \n        var stream = await resizedFile.OpenReadStream()\n                                      .ReadAsync(buffer);\n        image = Convert.ToBase64String(buffer);\n    }\n} \n```", "```cs\n<InputFile OnChange=\"OnChange\" multiple /> \n```", "```cs\nasync Task OnChange(InputFileChangeEventArgs e)\n{\n   var files = e.GetMultipleFiles(); \n   foreach (var file in files)\n   {\n   // do something\n   }\n} \n```", "```cs\npublic class Weather\n{\n    public DateTime Date { get; set; }\n    public int Temperature { get; set; }\n    public int Humidity { get; set; }\n} \n```", "```cs\n@using Microsoft.AspNetCore.Components.Web.Virtualization\n<div style=\"height:200px;overflow-y:scroll\">\n    @foreach (Weather weather in weatherHistory)\n    {\n        <p>\n            @weather.Date.ToShortTimeString():\n            Temp:@weather.Temperature\n            Humidity:@weather.Humidity\n        </p>\n    }\n</div> \n```", "```cs\n<div style=\"height:200px;overflow-y:scroll\">\n    <Virtualize Items=\"@weatherHistory\" Context=\"weather\">\n        <p>\n            @weather.Date.ToShortTimeString():\n            Temp:@weather.Temperature\n            Humidity:@weather.Humidity\n        </p>\n    </Virtualize>\n</div> \n```", "```cs\n<div style=\"height:200px;overflow-y:scroll\">\n    <Virtualize ItemsProvider=\"@LoadWeather\" \n                Context=\"weather\" \n                ItemSize=\"10\" \n                OverscanCount=\"2\">\n        <ItemContent>\n            <p>\n                @weather.Date.ToShortTimeString():\n                Temp:@weather.Temperature\n                Humidity:@weather.Humidity\n            </p>\n        </ItemContent>\n        <Placeholder>\n            <p><em>Loading  Weather...</em></p>\n        </Placeholder>\n    </Virtualize>\n</div> \n```", "```cs\nprivate async ValueTask<ItemsProviderResult<Weather>> \n     LoadWeather(ItemsProviderRequest request)\n{\n    return new ItemsProviderResult<Weather>(\n        await FetchWeather(request.StartIndex, request.Count), \n        totalCount);\n} \nprivate async Task<IEnumerable<Weather>> \n    FetchWeather(int start, int count)\n{\n    // call a service\n} \n```", "```cs\n<sheets>\n    <sheet name=\"Numbers\" sheetId=\"1\" r:id=\"rId1\"/>\n    <sheet name=\"Welcome\" sheetId=\"2\" r:id=\"rId2\"/>\n</sheets> \n```", "```cs\nprivate List<string> ReadSheetList(SpreadsheetDocument doc)\n{\n    List<string> mySheets = new();\n    WorkbookPart wbPart = doc.WorkbookPart;\n    Sheets sheets = wbPart.Workbook.Sheets;\n    foreach (Sheet item in sheets)\n    {\n        mySheets.Add(item.Name);\n    }\n    return mySheets;\n} \n```", "```cs\n<sheetData>\n   <row r=\"1\" spans=\"1:3\" x14ac:dyDescent=\"0.25\">\n      <c r=\"A1\"><v>1</v></c>\n      <c r=\"B1\"><v>2</v></c>\n      <c r=\"C1\"><v>3</v></c>\n   </row>\n   <row r=\"2\" spans=\"1:3\" x14ac:dyDescent=\"0.25\">\n      <c r=\"A2\"><v>4</v></c>\n      <c r=\"B2\"><v>5</v></c>\n      <c r=\"C2\"><v>6</v></c>\n   </row>\n</sheetData> \n```", "```cs\n<sheetData>\n   <row r=\"1\" spans=\"1:1\" x14ac:dyDescent=\"0.25\">\n      <c r=\"A1\" t=\"s\"><v>0</v></c>\n   </row>\n</sheetData> \n```", "```cs\n<sst count=\"1\" uniqueCount=\"1\">\n   <si><t>Helllo World</t></si>\n</sst> \n```", "```cs\nprivate List<string> ReadFirstCell(SpreadsheetDocument doc)\n{\n    List<string> A1Value = new();\n    WorkbookPart wbPart = doc.WorkbookPart;\n    var stringTable = wbPart\n        .GetPartsOfType<SharedStringTablePart>()\n        .FirstOrDefault();\n    Sheets sheets = wbPart.Workbook.Sheets;\n    foreach (Sheet item in sheets)\n    {\n        WorksheetPart wsPart = \n            (WorksheetPart)(wbPart.GetPartById(item.Id));\n        SheetData sheetData = wsPart\n            .Worksheet.Elements<SheetData>().First();\n        Row row = sheetData.Elements<Row>().First();\n        Cell cell = row.Elements<Cell>().First();\n        string value = cell.CellValue.Text;\n        if (cell.DataType != null)\n        {\n            if (cell.DataType.Value == CellValues.SharedString)\n            {\n                value = stringTable\n                    .SharedStringTable\n                    .ElementAt(int.Parse(value)).InnerText;\n            }\n        }\n        A1Value.Add(value);\n    }\n    return A1Value;\n} \n```", "```cs\n    Install-Package DocumentFormat.OpenXml \n    ```", "```cs\n    public int Year { get; set; }\n    public string? Country { get; set; }\n    public int Gold { get; set; }\n    public int Silver { get; set; }\n    public int Bronze { get; set; } \n    ```", "```cs\n    @using Microsoft.AspNetCore.Components.Forms; \n    ```", "```cs\n    <PageTitle>Excel Reader</PageTitle>\n    <InputFile OnChange=\"@SelectFile\" accept=\".xlsx\" />\n    @if (file != null)\n    {\n        if (errorMessage == null)\n        {\n            <p>\n                <div>File Name: @file.Name</div>\n                <div>\n                   File Size: @file.Size.ToString(\"N0\") bytes\n                </div>\n                <div>Content type: @file.ContentType</div>\n            </p>\n            <button type=\"button\">Read file</button>\n        }\n        <p>@errorMessage</p>\n    }\n    @code {\n    } \n    ```", "```cs\n    IBrowserFile? file;\n    int MAXFILESIZE = 50000;\n    string? errorMessage;\n    private void SelectFile(InputFileChangeEventArgs e)\n    {\n        file = e.File;\n        errorMessage = null;\n        if ((file.Size >= MAXFILESIZE) ||\n        (file.ContentType != \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"))\n        {\n            errorMessage = \"Invalid file\";\n        }\n    } \n    ```", "```cs\n    @using DocumentFormat.OpenXml;\n    @using DocumentFormat.OpenXml.Packaging;\n    @using DocumentFormat.OpenXml.Spreadsheet; \n    ```", "```cs\n    bool loaded;\n    int rowCount; \n    ```", "```cs\n    private async Task ReadFile()\n    {\n        try\n        {\n            var stream = new MemoryStream();\n            await file.OpenReadStream(MAXFILESIZE)\n                      .CopyToAsync(stream);\n            SpreadsheetDocument doc = \n                 SpreadsheetDocument.Open(stream, false);\n            WorkbookPart wbPart = doc.WorkbookPart;\n            var sheet = wbPart.Workbook\n                 .Descendants<Sheet>()\n                 .Where(s => s.Name == \"olympic_medals\")\n                 .FirstOrDefault();\n            WorksheetPart wsPart = \n                 (WorksheetPart)(wbPart.GetPartById(sheet.Id));\n            SheetData sheetData =\n                wsPart.Worksheet.Elements<SheetData>().First();\n            rowCount = sheetData.Elements<Row>().Count();\n            loaded = true;\n        }\n        catch (Exception)\n        {\n            errorMessage = \"Invalid Excel file\";\n        }\n    } \n    ```", "```cs\n    <button type=\"button\" @onclick=\"ReadFile\">\n        Read file\n    </button> \n    ```", "```cs\n    if (!loaded)\n    {\n        <p><em>Loading...</em></p>\n    }\n    else\n    {\n        <p>Rows: @rowCount</p>\n    } \n    ```", "```cs\n    @using ExcelReader.Models;\n    @using System.Collections.ObjectModel; \n    ```", "```cs\n    Collection<Medals> allMedals = new(); \n    ```", "```cs\n    var stringTable = wbPart\n        .GetPartsOfType<SharedStringTablePart>()\n        .FirstOrDefault();\n    foreach (Row r in sheetData.Elements<Row>())\n    {\n        if (r.RowIndex! == 1)\n        {\n            continue;\n        };\n        int col = 1;\n        var medals = new Medals();\n        foreach (Cell c in r.Elements<Cell>())\n        {\n            string value = c.InnerText;\n            if (c.DataType != null)\n            {\n                if (c.DataType.Value == \n                    CellValues.SharedString)\n                {\n                    value = stringTable.SharedStringTable\n                        .ElementAt(int.Parse(value))\n                        .InnerText;\n                }\n            }\n            switch (col)\n            {\n                case 1:\n                    medals.Year = int.Parse(value);\n                    break;\n                case 2:\n                    medals.Country = value;\n                    break;\n                case 3:\n                    medals.Gold = int.Parse(value);\n                    break;\n                case 4:\n                    medals.Silver = int.Parse(value);\n                    break;\n                case 5:\n                    medals.Bronze = int.Parse(value);\n                    break;\n                default:\n                    break;\n            }\n            col = col + 1;\n        }\n        allMedals.Add(medals);\n    } \n    ```", "```cs\n    @using Microsoft.AspNetCore.Components.Web.Virtualization \n    ```", "```cs\n    <div style=\"height:200px;overflow-y:scroll\" tabindex=\"-1\">\n        <table width=\"450\">\n            <thead style=\"position: sticky; top: 0; background-color: silver\">\n                <tr>\n                    <th>Year</th>\n                    <th width=\"255\">Country</th>\n                    <th>Gold</th>\n                    <th>Silver</th>\n                    <th>Bronze</th>\n                </tr>\n            </thead>\n            <tbody>\n                <Virtualize Items=\"@allMedals\"  \n                            SpacerElement=\"tr\">\n                    <tr>\n                        <td align=\"center\">@context.Year</td>\n                        <td>@context.Country</td>\n                        <td align=\"center\">@context.Gold</td>\n                        <td align=\"center\"> \n                            @context.Silver\n                        </td>\n                        <td align=\"center\"> \n                            @context.Bronze\n                        </td>\n                    </tr>\n                </Virtualize>\n            </tbody>\n        </table>\n    </div> \n    ```"]