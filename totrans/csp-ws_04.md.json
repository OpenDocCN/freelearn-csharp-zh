["```cs\n    source\\Chapter04>dotnet new console -o Chapter04\n    The template \"Console Application\" was created successfully.\n    ```", "```cs\n    using System;\n    using System.Collections.Generic;\n    namespace Chapter04.Examples\n    {\n        class ListExamples\n        {     \n            public static void Main()\n            {\n                var colors = new List<string> {\"red\", \"green\"};\n                colors.Add(\"orange\");\n    ```", "```cs\n                colors.AddRange(new [] {\"yellow\", \"pink\"});\n    ```", "```cs\n                Console.WriteLine($\"Colors has {colors.Count} items\");\n                Console.WriteLine($\"Item at index 1 is {colors[1]}\");\n    ```", "```cs\nColors has 5 items\nItem at index 1 is green\n```", "```cs\n                Console.WriteLine(\"Inserting blue at 0\");\n                colors.Insert(0, \"blue\");\n                Console.WriteLine($\"Item at index 1 is now {colors[1]}\");\n    ```", "```cs\nInserting blue at 0\nItem at index 1 is now red\n```", "```cs\n                Console.WriteLine(\"foreach\");\n                foreach (var color in colors)\n                    Console.Write($\"{color}|\");\n                Console.WriteLine();\n    ```", "```cs\nforeach\nblue|red|green|orange|yellow|pink|\n```", "```cs\n                Console.WriteLine(\"ForEach Action:\");\n                colors.ForEach(color =>\n                {\n                    var characters = color.ToCharArray();\n                    Array.Reverse(characters);\n                    var reversed = new string(characters);\n                    Console.Write($\"{reversed}|\");\n                });\n                Console.WriteLine();\n    ```", "```cs\n    ForEach Action:\n    eulb|der|neerg|egnaro|wolley|knip|\n    ```", "```cs\n                var backupColors = new List<string>(colors);\n                backupColors.Sort();\n    ```", "```cs\n                Console.WriteLine(\"Foreach before clearing:\");\n                foreach (var color in colors)\n                    Console.Write($\"{color}|\");\n                Console.WriteLine();\n                colors.Clear();\n                Console.WriteLine($\"Colors has {colors.Count} items\");\n    ```", "```cs\nForeach before clearing:\nblue|red|green|orange|yellow|pink|\nColors has 0 items\n```", "```cs\n                colors.AddRange(backupColors);\n                Console.WriteLine(\"foreach after addrange (sorted items):\");\n                foreach (var color in colors)\n                    Console.Write($\"{color}|\");\n                Console.WriteLine();\n    ```", "```cs\nforeach after addrange (sorted items):\nblue|green|orange|pink|red|yellow|\n```", "```cs\n                var indexes = colors.ConvertAll(color =>                      $\"{color} is at index {colors.IndexOf(color)}\");\n                Console.WriteLine(\"ConvertAll:\");\n                Console.WriteLine(string.Join(Environment.NewLine, indexes));\n    ```", "```cs\nConvertAll:\nblue is at index 0\ngreen is at index 1\norange is at index 2\npink is at index 3\nred is at index 4\nyellow is at index 5\n```", "```cs\n                Console.WriteLine($\"Contains RED: {colors.Contains(\"RED\")}\");\n                Console.WriteLine($\"Contains red: {colors.Contains(\"red\")}\");\n    ```", "```cs\nContains RED: False\nContains red: True\n```", "```cs\n                var existsInk = colors.Exists(color => color.EndsWith(\"ink\"));\n                Console.WriteLine($\"Exists *ink: {existsInk}\");\n    ```", "```cs\nExists *ink: True\n```", "```cs\n                Console.WriteLine(\"Inserting reds\");\n                colors.InsertRange(0, new [] {\"red\", \"red\"});\n                foreach (var color in colors)\n                    Console.Write($\"{color}|\");\n                Console.WriteLine();\n    ```", "```cs\nInserting reds\nred|red|blue|green|orange|pink|red|yellow|\n```", "```cs\n                var allReds = colors.FindAll(color => color == \"red\");\n                Console.WriteLine($\"Found {allReds.Count} red\");\n    ```", "```cs\nFound 3 red\n```", "```cs\n                colors.Remove(\"red\");\n                var lastRedIndex = colors.FindLastIndex(color => color == \"red\");\n                Console.WriteLine($\"Last red found at index {lastRedIndex}\");\n                Console.ReadLine();\n            }\n        }\n    }\n    ```", "```cs\nLast red found at index 5\n```", "```cs\n    using System;\n    using System.Collections;\n    using System.Collections.Generic;\n    namespace Chapter04.Exercises.Exercise01\n    {\n        public class Tab \n        {\n            public Tab()\n            {}\n            public Tab(string url) => (Url) = (url);\n            public string Url { get; set; }\n            public override string ToString() => Url;\n        }   \n    ```", "```cs\n        public class TabController : IEnumerable<Tab>\n        {\n            private readonly List<Tab> _tabs = new();\n    ```", "```cs\n            public Tab OpenNew(string url)\n            {\n                var tab = new Tab(url);\n                _tabs.Add(tab);\n                Console.WriteLine($\"OpenNew {tab}\");\n                return tab;\n            }\n    ```", "```cs\n            public void Close(Tab tab)\n            {\n                if (_tabs.Remove(tab))\n                {\n                    Console.WriteLine($\"Removed {tab}\");\n                }\n            }\n    ```", "```cs\n            public void MoveToStart(Tab tab)\n            {\n                if (_tabs.Remove(tab))\n                {\n                    _tabs.Insert(0, tab);\n                    Console.WriteLine($\"Moved {tab} to start\");\n                }\n    ```", "```cs\n            public void MoveToEnd(Tab tab)\n            {\n                if (_tabs.Remove(tab))\n                {\n                    _tabs.Add(tab);\n                    Console.WriteLine($\"Moved {tab} to end. Index={_tabs.IndexOf(tab)}\");\n                }\n            }\n    ```", "```cs\n            public IEnumerator<Tab> GetEnumerator() => _tabs.GetEnumerator();\n            IEnumerator IEnumerable.GetEnumerator() => _tabs.GetEnumerator();\n        }\n    ```", "```cs\n        static class Program\n        {\n            public static void Main()\n            {\n                var controller = new TabController();\n                Console.WriteLine(\"Opening tabs...\");\n                var packt = controller.OpenNew(\"packtpub.com\");\n                var msoft = controller.OpenNew(\"microsoft.com\");\n                var amazon = controller.OpenNew(\"amazon.com\");\n                controller.LogTabs();\n    ```", "```cs\n                Console.WriteLine(\"Moving...\");\n                controller.MoveToStart(amazon);\n                controller.MoveToEnd(packt);\n                controller.LogTabs();\n    ```", "```cs\n                Console.WriteLine(\"Closing tab...\");\n                controller.Close(msoft);\n                controller.LogTabs();\n                Console.ReadLine();\n            }\n    ```", "```cs\n            private static void LogTabs(this IEnumerable<Tab> tabs)\n            {\n                Console.Write(\"TABS: |\");\n                foreach(var tab in tabs)\n                    Console.Write($\"{tab.Url.PadRight(15)}|\");\n                Console.WriteLine();\n            }    \n       } \n    }\n    ```", "```cs\n    Opening tabs...\n    OpenNew packtpub.com\n    OpenNew microsoft.com\n    OpenNew amazon.com\n    TABS: |packtpub.com   |microsoft.com  |amazon.com     |\n    Moving...\n    Moved amazon.com to start\n    Moved packtpub.com to end. Index=2\n    TABS: |amazon.com     |microsoft.com  |packtpub.com   |\n    Closing tab...\n    Removed microsoft.com\n    TABS: |amazon.com     |packtpub.com   |\n    ```", "```cs\n    using System;\n    using System.Collections.Generic;\n    namespace Chapter04.Examples\n    {\n        class QueueExamples\n        {      \n            record CustomerOrder (string Name, int TicketsRequested)\n            {}\n            public static void Main()\n            {\n                var ticketsAvailable = 10;\n                var customers = new Queue<CustomerOrder>();\n    ```", "```cs\n                customers.Enqueue(new CustomerOrder(\"Dave\", 2));\n                customers.Enqueue(new CustomerOrder(\"Siva\", 4));\n                customers.Enqueue(new CustomerOrder(\"Julien\", 3));\n                customers.Enqueue(new CustomerOrder(\"Kane\", 2));\n                customers.Enqueue(new CustomerOrder(\"Ann\", 1));\n    ```", "```cs\n                // Start processing orders...\n                while(customers.TryDequeue(out CustomerOrder nextOrder))\n                {\n                    if (nextOrder.TicketsRequested <= ticketsAvailable)\n                    {\n                        ticketsAvailable -= nextOrder.TicketsRequested;   \n                        Console.WriteLine($\"Congratulations {nextOrder.Name}, you've purchased {nextOrder.TicketsRequested} ticket(s)\");\n                    }\n                    else\n                    {\n                        Console.WriteLine($\"Sorry {nextOrder.Name}, cannot fulfil {nextOrder.TicketsRequested} ticket(s)\");\n                    }\n                }\n                Console.WriteLine($\"Finished. Available={ticketsAvailable}\");\n                Console.ReadLine();\n            }\n        }\n    }\n    ```", "```cs\n    Congratulations Dave, you've purchased 2 ticket(s)\n    Congratulations Siva, you've purchased 4 ticket(s)\n    Congratulations Julien, you've purchased 3 ticket(s)\n    Sorry Kane, cannot fulfil 2 ticket(s)\n    Congratulations Ann, you've purchased 1 ticket(s)\n    Finished. Available=0\n    ```", "```cs\n    using System;\n    using System.Collections.Generic;\n    namespace Chapter04.Examples\n    {\n        class UndoStack\n        {\n            private readonly Stack<Action> _undoStack = new Stack<Action>();\n    ```", "```cs\n            public void Do(Action action)\n            {\n                _undoStack.Push(action);\n            }\n    ```", "```cs\n            public void Undo()\n            {\n                if (_undoStack.Count > 0)\n                {\n                    var undo = _undoStack.Pop();\n                    undo?.Invoke();\n                }\n            }\n        }\n    ```", "```cs\n        class TextEditor\n        {\n            private readonly UndoStack _undoStack;\n            public TextEditor(UndoStack undoStack)\n            {\n                _undoStack = undoStack;\n            }\n            public string Text {get; private set; }\n    ```", "```cs\n            public void EditText(string newText)\n            {\n                var previousText = Text;\n                _undoStack.Do( () =>\n                {\n                    Text = previousText;\n                    Console.Write($\"Undo:'{newText}'\".PadRight(40));\n                    Console.WriteLine($\"Text='{Text}'\");\n                });\n    ```", "```cs\n                Text += newText;\n                Console.Write($\"Edit:'{newText}'\".PadRight(40));\n                Console.WriteLine($\"Text='{Text}'\");\n            }\n        }\n    ```", "```cs\n        class StackExamples\n        {\n\n            public static void Main()\n            {\n                var undoStack = new UndoStack();\n                var editor = new TextEditor(undoStack);\n                editor.EditText(\"One day, \");\n                editor.EditText(\"in a \");\n                editor.EditText(\"city \");\n                editor.EditText(\"near by \");\n                undoStack.Undo(); // remove 'near by'\n                undoStack.Undo(); // remove 'city'\n                editor.EditText(\"land \");\n                editor.EditText(\"far far away \");\n                Console.ReadLine();\n            }\n        }    \n    }\n    ```", "```cs\n    Edit:'One day, '                        Text='One day, '\n    Edit:'in a '                            Text='One day, in a '\n    Edit:'city '                            Text='One day, in a city '\n    Edit:'near by '                         Text='One day, in a city near by '\n    Undo:'near by '                         Text='One day, in a city '\n    Undo:'city '                            Text='One day, in a '\n    Edit:'land '                            Text='One day, in a land '\n    Edit:'far far away '                    Text='One day, in a land far far away '\n    ```", "```cs\n    using System;\n    using System.Collections.Generic;\n    namespace Chapter04.Examples\n    {\n        class HashSetExamples\n        {\n            public static void Main()\n            {\n                var actors = new List<string> {\"Harrison Ford\", \"Will Smith\", \n                                               \"Sigourney Weaver\"};\n                var singers = new List<string> {\"Will Smith\", \"Adele\"};\n    ```", "```cs\n                var actingOrSinging = new HashSet<string>(singers);\n                actingOrSinging.UnionWith(actors);\n                Console.WriteLine($\"Acting or Singing: {string.Join(\", \", \n                                  actingOrSinging)}\");\n    ```", "```cs\n                var actingAndSinging = new HashSet<string>(singers);\n                actingAndSinging.IntersectWith(actors);\n                Console.WriteLine($\"Acting and Singing: {string.Join(\", \", \n                                  actingAndSinging)}\");\n    ```", "```cs\n                var actingOnly = new HashSet<string>(actors);\n                actingOnly.ExceptWith(singers);\n                Console.WriteLine($\"Acting Only: {string.Join(\", \", actingOnly)}\");\n                Console.ReadLine();\n            }\n        }\n    }\n    ```", "```cs\n    Acting or Singing: Will Smith, Adele, Harrison Ford, Sigourney Weaver\n    Acting and Singing: Will Smith\n    Acting Only: Harrison Ford, Sigourney Weaver\n    ```", "```cs\n    using System;\n    using System.Collections.Generic;\n    namespace Chapter04.Examples\n    {\n        public record Country(string Name)\n        {}\n        class DictionaryExamples\n        {\n            public static void Main()\n            {\n    ```", "```cs\n                var countries = new Dictionary<string, Country>\n                {\n                    {\"AFG\", new Country(\"Afghanistan\")},\n                    {\"ALB\", new Country(\"Albania\")},\n                    {\"DZA\", new Country(\"Algeria\")},\n                    {\"ASM\", new Country(\"American Samoa\")},\n                    {\"AND\", new Country(\"Andorra\")}\n                };\n    ```", "```cs\n                Console.WriteLine(\"Enumerate foreach KeyValuePair\");\n                foreach (var kvp in countries)\n                {\n                    Console.WriteLine($\"\\t{kvp.Key} = {kvp.Value.Name}\");\n                }\n    ```", "```cs\n    Enumerate foreach KeyValuePair\n            AFG = Afghanistan\n            ALB = Albania\n            DZA = Algeria\n            ASM = American Samoa\n            AND = Andorra\n    ```", "```cs\n                Console.WriteLine(\"set indexor AFG to new value\");\n                countries[\"AFG\"] = new Country(\"AFGHANISTAN\");\n                Console.WriteLine($\"get indexor AFG: {countries[\"AFG\"].Name}\");\n    ```", "```cs\n    set indexor AFG to new value\n    get indexor AFG: AFGHANISTAN\n    ContainsKey AGO: False\n    ContainsKey and: False\n    ```", "```cs\n                Console.WriteLine($\"ContainsKey {\"AGO\"}:                          {countries.ContainsKey(\"AGO\")}\");\n                Console.WriteLine($\"ContainsKey {\"and\"}:                          {countries.ContainsKey(\"and\")}\"); // Case sensitive\n    ```", "```cs\n                var anguilla = new Country(\"Anguilla\");\n                Console.WriteLine($\"Add {anguilla}...\");\n                countries.Add(\"AIA\", anguilla);\n                try\n                {\n                    var anguillaCopy = new Country(\"Anguilla\");\n                    Console.WriteLine($\"Adding {anguillaCopy}...\");\n                    countries.Add(\"AIA\", anguillaCopy);\n                }\n                catch (Exception e)\n                {\n                    Console.WriteLine($\"Caught {e.Message}\");\n                }\n    ```", "```cs\n                var addedAIA = countries.TryAdd(\"AIA\", new Country(\"Anguilla\"));\n                Console.WriteLine($\"TryAdd AIA: {addedAIA}\");\n    ```", "```cs\n    Add Country { Name = Anguilla }...\n    Adding Country { Name = Anguilla }...\n    Caught An item with the same key has already been added. Key: AIA\n    TryAdd AIA: False\n    ```", "```cs\n                var tryGet = countries.TryGetValue(\"ALB\", out Country albania1);\n                Console.WriteLine($\"TryGetValue for ALB: {albania1}                              Result={tryGet}\");\n                countries.TryGetValue(\"alb\", out Country albania2);\n                Console.WriteLine($\"TryGetValue for ALB: {albania2}\");\n            }\n        }\n    }\n    ```", "```cs\n    TryGetValue for ALB: Country { Name = Albania } Result=True\n    TryGetValue for ALB:\n    ```", "```cs\n    using System;\n    using System.Collections.Generic;\n    namespace Chapter04.Exercises.Exercise02\n    {\n        static class WordCounter \n        {\n    ```", "```cs\n            public static IEnumerable<KeyValuePair<string, int>> Process(            string phrase)\n            {\n                var wordCounts = new Dictionary<string, int>();\n    ```", "```cs\n                 var words = phrase.ToLower().Split(' ',                        StringSplitOptions.RemoveEmptyEntries);\n    ```", "```cs\n                foreach(var word in words)\n                {\n                    var key = word;\n                    if (char.IsPunctuation(key[key.Length-1]))\n                    {\n                        key = key.Remove(key.Length-1);\n                    }\n    ```", "```cs\n                    if (wordCounts.TryGetValue(key, out var count))\n                    {\n                        wordCounts[key] = count + 1;\n                    }\n                    else\n                    {\n                        wordCounts.Add(key, 1);\n                    }\n                }\n    ```", "```cs\n                return wordCounts;\n            }\n        }\n    ```", "```cs\n        class Program\n        {\n            public static void Main()\n            {\n                string input;\n                do\n                {\n                    Console.Write(\"Enter a phrase:\");\n                    input = Console.ReadLine();\n    ```", "```cs\n                    if (!string.IsNullOrEmpty(input))\n                    {\n                        var countsByWord = WordCounter.Process(input);\n                        var i = 0;\n                        foreach (var (key, value) in countsByWord)\n                        {\n                            Console.Write($\"{key.PadLeft(20)}={value}\\t\");\n                            i++;\n                            if (i % 3 == 0)\n                            {\n                                Console.WriteLine();\n                            }\n                        }\n                        Console.WriteLine();\n    ```", "```cs\n                        }\n                } while (input != string.Empty);\n            }\n        }\n    }\n    ```", "```cs\n    Enter a phrase: Four score and seven years ago our fathers brought forth, upon this continent, a new nation, conceived in liberty, and dedicated to the proposition that all men are created equal. Now we are engaged in a great civil war, testing whether that nation, or any nation so conceived, and so dedicated, can long endure.\n                    four=1                 score=1                 and=3\n                   seven=1                 years=1                 ago=1\n                     our=1               fathers=1             brought=1\n                   forth=1                  upon=1                this=1\n               continent=1                     a=2                 new=1\n                  nation=3             conceived=2                  in=2\n                 liberty=1             dedicated=2                  to=1\n                     the=1           proposition=1                that=2\n                     all=1                   men=1                 are=2\n                 created=1                 equal=1                 now=1\n                      we=1               engaged=1               great=1\n                   civil=1                   war=1             testing=1\n                 whether=1                    or=1                 any=1\n                      so=2                   can=1                 long=1\n                  endure=1\n    ```", "```cs\nbooks.Where(book => book.Price > 10)\n     .OrderBy(book => book.Price)\n     .Select(book => book.Name)\n```", "```cs\nfrom book in books where book.Price > 10 orderby book.Price select book.Name\n```", "```cs\nvar letters = new List<string> { \"a\", \"b\"}\nvar query = letters.Select(w => w.ToUpper());\nletters.Add(\"z\");\nforeach(var l in query) \n  Console.Write(l);\n```", "```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nnamespace Chapter04.Examples\n{\n    class LinqSelectExamples\n    {\n        public static void Main()\n        {\n            var days = new List<string> { \"Mon\", \"Tues\", \"Wednes\" };\n            var query1 = days.Select(d => d + \"day\");\n            foreach(var day in query1)\n                Console.WriteLine($\"Query1: {day}\");         \n```", "```cs\nd => d + \"day\"\n```", "```cs\n            var query2 = days.Select((d, i) => $\"{i} : {d}day\");\n            foreach (var day in query2)\n                Console.WriteLine($\"Query2: {day}\");\n```", "```cs\n            var query3 = days.Select((d, i) => new\n            {\n                Index = i, \n                UpperCaseName = $\"{d.ToUpper()}DAY\"\n            });\n            foreach (var day in query3)\n                Console.WriteLine($\"Query3: Index={day.Index},                                             UpperCaseDay={day.UpperCaseName}\");\n```", "```cs\nIndex=0, UpperCaseDay=MONDAY\n```", "```cs\n            var query4 = from day in days\n                         select day + \"day\";\n            foreach (var day in query4)\n                Console.WriteLine($\"Query4: {day}\");\n```", "```cs\n                       var query5 = from dayIndex in \n                         days.Select( (d, i) => new {Name = d, Index = i})\n                         select dayIndex;\n            foreach (var day in query5)\n                Console.WriteLine($\"Query5: Index={day.Index} : {day.Name}\");\n            Console.ReadLine();\n        }\n    }\n}\n```", "```cs\nQuery1: Monday\nQuery1: Tuesday\nQuery1: Wednesday\nQuery2: 0 : Monday\nQuery2: 1 : Tuesday\nQuery2: 2 : Wednesday\nQuery3: Index=0, UpperCaseDay=MONDAY\nQuery3: Index=1, UpperCaseDay=TUESDAY\nQuery3: Index=2, UpperCaseDay=WEDNESDAY\nQuery4: Monday\nQuery4: Tuesday\nQuery4: Wednesday\nQuery5: Index=0 : Mon\nQuery5: Index=1 : Tues\nQuery5: Index=2 : Wednes\n```", "```cs\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    namespace Chapter04.Examples\n    {\n        record City (string Name, IEnumerable<string> Stations);\n        class LinqSelectManyExamples\n        {\n            public static void Main()\n            {\n                var cities = new List<City>\n                {\n                    new City(\"London\", new[] {\"Kings Cross KGX\",                                           \"Liverpool Street LVS\",                                           \"Euston EUS\"}),\n                    new City(\"Birmingham\", new[] {\"New Street NST\"})\n                };\n                Console.WriteLine(\"All Stations: \");\n                foreach (var station in cities.SelectMany(city => city.Stations))\n                {\n                    Console.WriteLine(station);\n                }\n    ```", "```cs\n    All Stations:\n    Kings Cross KGX\n    Liverpool Street LVS\n    Euston EUS\n    New Street NST\n    ```", "```cs\n                Console.Write(\"All Station Codes: \");\n                var stations = cities\n                    .SelectMany(city => city.Stations.Select(s => s[^3..]));\n                foreach (var station in stations)\n                {\n                    Console.Write($\"{station} \");\n                }\n                Console.WriteLine();\n                Console.ReadLine();\n            }\n        }\n    }\n    ```", "```cs\n    All Station Codes: KGX LVS EUS NST\n    ```", "```cs\n    LinqWhereExamples.cs\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    namespace Chapter04.Examples\n    {\n        record Order (string Product, int Quantity, double Price);\n        class LinqWhereExamples\n        {\n            public static void Main()\n            {\n                var orders = new List<Order>\n                {\n                    new Order(\"Pen\", 2, 1.99),\n                    new Order(\"Pencil\", 5, 1.50),\n                    new Order(\"Note Pad\", 1, 2.99),\n    ```", "```cs\nYou can find the complete code here: https://packt.link/ZJpb5.\n```", "```cs\n                Console.WriteLine(\"Orders with quantity over 5:\");\n                foreach (var order in orders.Where(o => o.Quantity > 5))\n                {\n                    Console.WriteLine(order);\n                }\n    ```", "```cs\n                Console.WriteLine(\"Pens or Pencils:\");\n                foreach (var orderValue in orders\n                    .Where(o => o.Product == \"Pen\"  || o.Product == \"Pencil\")\n                    .Select( o => o.Quantity * o.Price))\n                {\n                    Console.WriteLine(orderValue);\n                }\n    ```", "```cs\n                var query = from order in orders\n                   where order.Price <= 3.99\n                   select new {Name=order.Product, Value=order.Quantity*order.Price};\n                Console.WriteLine(\"Cheapest Orders:\");\n                foreach(var order in query)\n                {\n                    Console.WriteLine($\"{order.Name}: {order.Value}\");\n                }\n            }\n        }\n    }\n    ```", "```cs\n    Orders with quantity over 5:\n    Order { Product = Ruler, Quantity = 10, Price = 0.5 }\n    Order { Product = USB Memory Stick, Quantity = 6, Price = 20 }\n    Pens or Pencils:\n    3.98\n    7.5\n    Cheapest Orders:\n    Pen: 3.98\n    Pencil: 7.5\n    Note Pad: 2.99\n    Stapler: 3.99\n    Ruler: 5\n    ```", "```cs\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    namespace Chapter04.Examples\n    {\n        record TravelLog (string Name, int Distance, int Duration)\n        {\n            public double AverageSpeed()\n            {\n                Console.WriteLine($\"AverageSpeed() called for '{Name}'\");\n                return Distance / Duration;\n            }\n        }\n        class LinqMultipleEnumerationExample\n        {\n    ```", "```cs\n            public static void Main()\n            {\n                var travelLogs = new List<TravelLog>\n                {\n                    new TravelLog(\"London to Brighton\", 50, 4),\n                    new TravelLog(\"Newcastle to London\", 300, 24),\n                    new TravelLog(\"New York to Florida\", 1146, 19),\n                    new TravelLog(\"Paris to Berlin\", 546, 10)\n                };\n    ```", "```cs\n                var fastestJourneys = travelLogs.Where(tl => tl.AverageSpeed() > 50);\n                Console.WriteLine(\"Fastest Distances:\");\n                foreach (var item in fastestJourneys)\n                {\n                    Console.WriteLine($\"{item.Name}: {item.Distance} miles\");\n                }\n                Console.WriteLine();\n    ```", "```cs\n    Fastest Distances:\n    AverageSpeed() called for 'London to Brighton'\n    AverageSpeed() called for 'Newcastle to London'\n    AverageSpeed() called for 'New York to Florida'\n    New York to Florida: 1146 miles\n    AverageSpeed() called for 'Paris to Berlin'\n    Paris to Berlin: 546 miles\n    ```", "```cs\n                Console.WriteLine(\"Fastest Duration:\");\n                foreach (var item in fastestJourneys)\n                {\n                    Console.WriteLine($\"{item.Name}: {item.Duration} hours\");\n                }\n                Console.WriteLine();\n    ```", "```cs\n    Fastest Duration:\n    AverageSpeed() called for 'London to Brighton'\n    AverageSpeed() called for 'Newcastle to London'\n    AverageSpeed() called for 'New York to Florida'\n    New York to Florida: 19 hours\n    AverageSpeed() called for 'Paris to Berlin'\n    Paris to Berlin: 10 hours\n    ```", "```cs\n                Console.WriteLine(\"Fastest Duration Multiple loops:\");\n                var fastestJourneysList = travelLogs\n                      .Where(tl => tl.AverageSpeed() > 50)\n                      .ToList();\n                for (var i = 0; i < 2; i++)\n                {\n                    Console.WriteLine($\"Fastest Duration Multiple loop iteration {i+1}:\");\n                    foreach (var item in fastestJourneysList)\n                    {\n                        Console.WriteLine($\"{item.Name}: {item.Distance} in {item.Duration} hours\");\n                    }\n                }\n            }\n        }\n    }\n    ```", "```cs\n    Fastest Duration Multiple loops:\n    AverageSpeed() called for 'London to Brighton'\n    AverageSpeed() called for 'Newcastle to London'\n    AverageSpeed() called for 'New York to Florida'\n    AverageSpeed() called for 'Paris to Berlin'\n    Fastest Duration Multiple loop iteration 1:\n    New York to Florida: 1146 in 19 hours\n    Paris to Berlin: 546 in 10 hours\n    Fastest Duration Multiple loop iteration 2:\n    New York to Florida: 1146 in 19 hours\n    Paris to Berlin: 546 in 10 hours\n    ```", "```cs\n    using System;\n    using System.IO;\n    using System.Linq;\n    namespace Chapter04.Examples\n    {\n        class LinqOrderByExamples\n        {\n            public static void Main()\n            {\n    ```", "```cs\n                var fileInfos = Directory.EnumerateFiles(Path.GetTempPath(), \"*.tmp\")\n                    .Select(filename => new FileInfo(filename))\n                    .ToList();\n    ```", "```cs\n                Console.WriteLine(\"Earliest Files\");\n                foreach (var fileInfo in fileInfos.OrderBy(fi => fi.CreationTime))\n                {\n                    Console.WriteLine($\"{fileInfo.CreationTime:dd MMM yy}: {fileInfo.Name}\");\n                }\n    ```", "```cs\n                Console.WriteLine(\"Largest Files\");\n                foreach (var fileInfo in fileInfos                                        .OrderByDescending(fi => fi.Length))\n                {\n                    Console.WriteLine($\"{fileInfo.Length:N0} bytes: \\t{fileInfo.Name}\");\n                }\n    ```", "```cs\n                Console.WriteLine(\"Largest smaller files\");\n                foreach (var fileInfo in\n                    from fi in fileInfos\n                    where fi.Length < 1000\n                    orderby fi.Length descending\n                    select fi)\n                {\n                    Console.WriteLine($\"{fileInfo.Length:N0} bytes: \\t{fileInfo.Name}\");\n                }\n                Console.ReadLine();\n            }\n        }\n    }\n    ```", "```cs\n    Earliest Files\n    05 Jan 21: wct63C3.tmp\n    05 Jan 21: wctD308.tmp\n    05 Jan 21: wctFE7.tmp\n    04 Feb 21: wctE092.tmp\n    Largest Files\n    38,997,896 bytes:       wctE092.tmp\n    4,824,572 bytes:        cb6dfb76-4dc9-494d-9683-ce31eab43612.tmp\n    4,014,036 bytes:        492f224c-c811-41d6-8c5d-371359d520db.tmp\n    Largest smaller files\n    726 bytes:      wct38BC.tmp\n    726 bytes:      wctE239.tmp\n    512 bytes:      ~DF8CE3ED20D298A9EC.TMP\n    416 bytes:      TFR14D8.tmp\n    ```", "```cs\nusing System;\nusing System.IO;\nusing System.Linq;\nnamespace Chapter04.Examples\n{\n    class LinqThenByExamples\n    {\n        public static void Main()\n        {\n```", "```cs\n            var quotes = new[]\n            {\n                \"Love for all hatred for none\",\n                \"Change the world by being yourself\",\n                \"Every moment is a fresh beginning\",\n                \"Never regret anything that made you smile\",\n                \"Die with memories not dreams\",\n                \"Aspire to inspire before we expire\"\n            };\n```", "```cs\n            foreach (var item in quotes\n                .Select(q => new {Quote = q, Words = q.Split(\" \").Length})\n                .OrderByDescending(q => q.Words)\n                .ThenBy(q => q.Quote))\n            {\n                Console.WriteLine($\"{item.Words}: {item.Quote}\");\n            }\n            Console.ReadLine();\n        }\n    }\n}\n```", "```cs\n7: Never regret anything that made you smile\n6: Aspire to inspire before we expire\n6: Change the world by being yourself\n6: Every moment is a fresh beginning\n6: Love for all hatred for none\n5: Die with memories not dreams\n```", "```cs\nvar query = from quote in \n            (quotes.Select(q => new {Quote = q, Words = q.Split(\" \").Length}))\norderby quote.Words descending, quote.Words ascending \n            select quote;\nforeach(var item in query)        \n            {\n                Console.WriteLine($\"{item.Words}: {item.Quote}\");\n            }\n            Console.ReadLine();\n        }\n    }\n}\n```", "```cs\n    using System;\n    using System.Linq;\n    namespace Chapter04.Exercises.Exercise03\n    {\n        class Program\n        {\n            record Country (string Name, string Continent, int Area);\n            public static void Main()\n            {\n    ```", "```cs\n                var countries = new[]\n                {\n                    new Country(\"Seychelles\", \"Africa\", 176),\n                    new Country(\"India\", \"Asia\", 1_269_219),\n                    new Country(\"Brazil\", \"South America\",3_287_956),\n                    new Country(\"Argentina\", \"South America\", 1_073_500),\n                    new Country(\"Mexico\", \"South America\",750_561),\n                    new Country(\"Peru\", \"South America\",494_209),\n                    new Country(\"Algeria\", \"Africa\", 919_595),\n                    new Country(\"Sudan\", \"Africa\", 668_602)\n                };\n    ```", "```cs\n                var requiredContinents = new[] {\"South America\", \"Africa\"};\n    ```", "```cs\n                var filteredCountries = countries\n                    .Where(c => requiredContinents.Contains(c.Continent))\n                    .OrderBy(c => c.Continent)\n                    .ThenByDescending(c => c.Area)\n                    .Select( (cty, i) => new {Index = i, Country = cty});\n\n                foreach(var item in filteredCountries)\n                    Console.WriteLine($\"{item.Index+1}: {item.Country.Continent}, {item.Country.Name} = {item.Country.Area:N0} sq mi\");\n            }\n        }\n    }\n    ```", "```cs\n    1: Africa, Algeria = 919,595 sq mi\n    2: Africa, Sudan = 668,602 sq mi\n    3: Africa, Seychelles = 176 sq mi\n    4: South America, Brazil = 3,287,956 sq mi\n    5: South America, Argentina = 1,073,500 sq mi\n    6: South America, Mexico = 750,561 sq mi\n    7: South America, Peru = 494,209 sq mi\n    ```", "```cs\n    using System;\n    using System.Linq;\n    namespace Chapter04.Examples\n    {\n        class LinqSkipTakeExamples\n        {\n            public static void Main()\n            {\n                var grades = new[] {25, 95, 75, 40, 54, 9, 99};\n                Console.Write(\"Skip: Highest Grades (skipping first):\");\n                foreach (var grade in grades\n                    .OrderByDescending(g => g)\n                    .Skip(1))\n                {\n                    Console.Write($\"{grade} \");\n                }\n                Console.WriteLine();\n    ```", "```cs\n                Console.Write(\"SkipWhile@ Middle Grades (excluding 25 or 75):\");\n                foreach (var grade in grades\n                    .OrderByDescending(g => g)\n                    .SkipWhile(g => g is <= 25 or >=75))\n                {\n                    Console.Write($\"{grade} \");\n                }\n                Console.WriteLine();\n    ```", "```cs\n                Console.Write(\"SkipLast: Bottom Half Grades:\");\n                foreach (var grade in grades\n                    .OrderBy(g => g)\n                    .SkipLast(grades.Length / 2))\n                {\n                    Console.Write($\"{grade} \");\n                }\n                Console.WriteLine();\n    ```", "```cs\n                Console.Write(\"Take: Two Highest Grades:\");\n                foreach (var grade in grades\n                    .OrderByDescending(g => g)\n                    .Take(2))\n                {\n                    Console.Write($\"{grade} \");\n                }\n            }\n        }\n    }\n    ```", "```cs\n    Skip: Highest Grades (skipping first):95 75 54 40 25 9\n    SkipWhile Middle Grades (excluding 25 or 75):54 40 25 9\n    SkipLast: Bottom Half Grades:9 25 40 54\n    Take: Two Highest Grades:99 95\n    ```", "```cs\nLinqGroupByExamples.cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nnamespace Chapter04.Examples\n{\n    record CustomerOrder(string Name, string Product, int Quantity);\n    class LinqGroupByExamples\n    {\n        public static void Main()\n        {\n            var orders = new List<CustomerOrder>\n            {\n                new CustomerOrder(\"Mr Green\", \"LED TV\", 4),\n                new CustomerOrder(\"Mr Smith\", \"iPhone\", 2),\n                new CustomerOrder(\"Mrs Jones\", \"Printer\", 1),\nYou can find the complete code here: https://packt.link/GbwF2.\n```", "```cs\n                foreach (var item in grouping.OrderByDescending(i => i.Quantity))\n                {\n                    Console.WriteLine($\"\\t{item.Product} * {item.Quantity}\");\n                }\n            }\n            Console.ReadLine();\n        }\n    }\n}\n```", "```cs\nCustomer Mr Green:\n        LED TV * 4\n        MP3 Player * 1\n        Microwave Oven * 1\nCustomer Mr Smith:\n        PC * 5\n        iPhone * 2\n        Printer * 2\nCustomer Mrs Jones:\n        Printer * 1\n```", "```cs\n            var query = from order in orders\n                        group order by order.Name;\n            foreach (var grouping in query)\n            {\n                Console.WriteLine($\"Customer {grouping.Key}:\");\n                foreach (var item in from item in grouping \n                                     orderby item.Quantity descending \n                                     select item)\n                {\n                    Console.WriteLine($\"\\t{item.Product} * {item.Quantity}\");\n                }\n            }\n```", "```cs\n    using System;\n    using System.Collections.Generic;\n    using System.IO;\n    using System.Linq;\n    using System.Net;\n    using System.Text;\n    using System.Text.RegularExpressions;\n    namespace Chapter04.Exercises.Exercise04\n    {\n        class TextCounter\n        {\n            private readonly HashSet<string> _stopWords;\n            public TextCounter(string stopWordPath)\n            {\n                Console.WriteLine($\"Reading stop word file: {stopWordPath}\");\n    ```", "```cs\n              _stopWords = new HashSet<string>(File.ReadAllLines(stopWordPath));\n            }\n    ```", "```cs\n            public IEnumerable<Tuple<string, int>> Process(string text,                                                        int maximumWords)\n            {\n    ```", "```cs\n                var words = Regex.Split(text.ToLower(), @\"\\s+\")\n                    .Where(t => !_stopWords.Contains(t))\n                    .GroupBy(t => t)\n                    .Select(grp => Tuple.Create(grp.Key, grp.Count()))\n                    .OrderByDescending(tup => tup.Item2) //int\n                    .Take(maximumWords);\n                return words;\n            }\n        }\n    ```", "```cs\n        class Program\n        {\n            public static void Main()\n            {\n    ```", "```cs\n                const string StopWordFile = \"StopWords.txt\";\n                var counter = new TextCounter(StopWordFile);\n    ```", "```cs\n                string address;\n                do\n                {\n                    //https://www.gutenberg.org/files/64333/64333-0.txt\n                    Console.Write(\"Enter a Gutenberg book URL: \");\n                    address = Console.ReadLine();\n                    if (string.IsNullOrEmpty(address)) \n                        continue;\n    ```", "```cs\n                    using var client = new WebClient();\n                    var tempFile = Path.GetTempFileName();\n                    Console.WriteLine(\"Downloading...\");\n                    client.DownloadFile(address, tempFile);\n    ```", "```cs\n                Console.WriteLine($\"Processing file {tempFile}\");\n                const string StartIndicator = \"*** START OF THE PROJECT GUTENBERG EBOOK\";\n                //Title: The Little Review, October 1914(Vol. 1, No. 7)\n                //Author: Various\n                var title = string.Empty;\n                var author = string.Empty;\n```", "```cs\n                    var bookText = new StringBuilder();\n                    var isReadingBookText = false;\n                    var bookTextLineCount = 0;\n    ```", "```cs\n                    foreach (var line in File.ReadAllLines(tempFile))\n                    {\n                        if (line.StartsWith(\"Title\"))\n                        {\n                            title = line;\n                        }\n                        else if (line.StartsWith(\"Author\"))\n                        {\n                            author = line;\n                        }\n                        else if (line.StartsWith(StartIndicator))\n                        {\n                            isReadingBookText = true;\n                        }\n                        else if (isReadingBookText)\n                        {\n                            bookText.Append(line);\n                            bookTextLineCount++;\n                        }\n                    }\n    ```", "```cs\n                    if (bookTextLineCount > 0)\n                    {\n                        Console.WriteLine($\"Processing {bookTextLineCount:N0} lines ({bookText.Length:N0} characters)..\");\n                      var wordCounts = counter.Process(bookText.ToString(), 50);\n                      Console.WriteLine(title);\n                      Console.WriteLine(author);\n    ```", "```cs\n                        var i = 0;\n                        //deconstruction\n                        foreach (var (word, count) in wordCounts)\n                        {\n                            Console.Write($\"'{word}'={count}\\t\\t\");\n                            i++;\n                            if (i % 3 == 0)\n                            {\n                                Console.WriteLine();\n                            }\n                        }\n                        Console.WriteLine();\n                    }\n                    else\n                    {\n    ```", "```cs\n    Reading stop word file: StopWords.txt\n    Enter a Gutenberg book URL: https://www.gutenberg.org/files/64333/64333-0.txt\n    Downloading...\n    Processing file C:\\Temp\\tmpB0A3.tmp\n    Processing 4,063 lines (201,216 characters)..\n    Title: The Little Review, October 1914 (Vol. 1, No. 7)\n    Author: Various\n    'one'=108               'new'=95                'project'=62\n    'man'=56                'little'=54             'life'=52\n    'would'=51              'work'=50               'book'=42\n    'must'=42               'people'=39             'great'=37\n    'love'=37               'like'=36               'gutenberg-tm'=36\n    'may'=35                'men'=35                'us'=32\n    'could'=30              'every'=30              'first'=29\n    'full'=29               'world'=28              'mr.'=28\n    'old'=27                'never'=26              'without'=26\n    'make'=26               'young'=24              'among'=24\n    'modern'=23             'good'=23               'it.'=23\n    'even'=22               'war'=22                'might'=22\n    'long'=22               'cannot'=22             '_the'=22\n    'many'=21               'works'=21              'electronic'=21\n    'always'=20             'way'=20                'thing'=20\n    'day'=20                'upon'=20               'art'=20\n    'terms'=20              'made'=19\n    ```", "```cs\nusing System;\nusing System.Diagnostics;\nusing System.Linq;\nnamespace Chapter04.Examples\n{\n    class LinqAggregationExamples\n    {\n        public static void Main()\n        {\n```", "```cs\n            var processes = Process.GetProcesses().ToList();\n```", "```cs\n            var allProcesses = processes.Count;\n            var smallProcesses = processes.Count(proc =>                                        proc.PrivateMemorySize64 < 1_000_000);\n```", "```cs\n            var average = processes.Average(p => p.PrivateMemorySize64);\n```", "```cs\n            var max = processes.Max(p => p.PrivateMemorySize64);\n            var min = processes.Min(p => p.PrivateMemorySize64);\n            var sum = processes.Sum(p => p.PrivateMemorySize64);\n```", "```cs\n            Console.WriteLine(\"Process Memory Details\");\n            Console.WriteLine($\"  All Count: {allProcesses}\");\n            Console.WriteLine($\"Small Count: {smallProcesses}\");\n            Console.WriteLine($\"    Average: {FormatBytes(average)}\");\n            Console.WriteLine($\"    Maximum: {FormatBytes(max)}\");\n            Console.WriteLine($\"    Minimum: {FormatBytes(min)}\");\n            Console.WriteLine($\"      Total: {FormatBytes(sum)}\");\n        }\n```", "```cs\n        private static string FormatBytes(double bytes)\n        {\n            return $\"{bytes / Math.Pow(1024, 2):N2} MB\";\n        }\n    }\n}\n```", "```cs\nProcess Memory Details\n  All Count: 305\nSmall Count: 5\n    Average: 38.10 MB\n    Maximum: 1,320.16 MB\n    Minimum: 0.06 MB\n      Total: 11,620.03 MB\n```", "```cs\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    namespace Chapter04.Examples\n    {\n        enum PlayingCardSuit\n        {\n            Hearts,\n            Clubs,\n            Spades,\n            Diamonds\n        }\n        record PlayingCard (int Number, PlayingCardSuit Suit)\n        {\n    ```", "```cs\n            public override string ToString()\n            {\n                return $\"{Number} of {Suit}\";\n            }\n        }\n    ```", "```cs\n        class Deck\n        {\n            private readonly List<PlayingCard> _cards = new();\n            private readonly Random _random = new();\n            public Deck()\n            {\n                for (var i = 1; i <= 10; i++)\n                {\n                    _cards.Add(new PlayingCard(i, PlayingCardSuit.Hearts));\n                    _cards.Add(new PlayingCard(i, PlayingCardSuit.Clubs));\n                    _cards.Add(new PlayingCard(i, PlayingCardSuit.Spades));\n                    _cards.Add(new PlayingCard(i, PlayingCardSuit.Diamonds));\n                }\n            }\n    ```", "```cs\n            public PlayingCard Draw()\n            {\n                var index = _random.Next(_cards.Count);\n                var drawnCard = _cards.ElementAt(index);\n                _cards.Remove(drawnCard);\n                return drawnCard;\n            }\n        }\n    ```", "```cs\n        class LinqAllAnyExamples\n        {\n            public static void Main()\n            {\n                var deck = new Deck();\n                var hand = new List<PlayingCard>();\n\n                for (var i = 0; i < 3; i++)\n                {\n                    hand.Add(deck.Draw());\n                }\n    ```", "```cs\n                var summary = string.Join(\" | \", \n                    hand.OrderByDescending(c => c.Number)\n                        .Select(c => c.ToString()));\n                Console.WriteLine($\"Hand: {summary}\");\n    ```", "```cs\n                Console.WriteLine($\"Any Clubs: {hand.Any(card => card.Suit == PlayingCardSuit.Clubs)}\");\n    ```", "```cs\n                Console.WriteLine($\"Any Red: {hand.Any(card => card.Suit == PlayingCardSuit.Hearts || card.Suit == PlayingCardSuit.Diamonds)}\");\n    ```", "```cs\n                Console.WriteLine($\"All Diamonds: {hand.All(card => card.Suit == PlayingCardSuit.Diamonds)}\");\n    ```", "```cs\n                Console.WriteLine($\"All Even: {hand.All(card => card.Number % 2 == 0)}\");\n    ```", "```cs\n                Console.WriteLine($\"Score :{hand.Sum(card => card.Number)}\");\n            }\n        }\n    }\n    ```", "```cs\n    Hand: 8 of Spades | 7 of Diamonds | 6 of Diamonds\n    Any Clubs: False\n    Any Red: True\n    All Diamonds: False\n    All Even: False\n    Score :21\n    ```", "```cs\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n    namespace Chapter04.Examples\n    {\n        record Manufacturer(int ManufacturerId, string Name);\n        record Car (string Name, int ManufacturerId);\n    ```", "```cs\n    LinqJoinExamples.cs\n        class LinqJoinExamples\n        {\n            public static void Main()\n            {\n                var manufacturers = new List<Manufacturer>\n                {\n                    new(1, \"Ford\"),\n                    new(2, \"BMW\"),\n                    new(3, \"VW\")\n                };\n                var cars = new List<Car>\n                {\n                    new(\"Focus\", 1),\n                    new(\"Galaxy\", 1),\n                    new(\"GT40\", 1),\n    ```", "```cs\nYou can find the complete code here: https://packt.link/Ue7Fj.\n```", "```cs\n                var joinedQuery = manufacturers.Join(\n                    cars,\n                    manufacturer => manufacturer.ManufacturerId,\n                    car => car.ManufacturerId,\n                    (manufacturer, car) => new                        {ManufacturerName = manufacturer.Name,                         CarName = car.Name});\n                foreach (var item in joinedQuery)\n                {\n                    Console.WriteLine($\"{item}\");\n                }\n            }\n        }\n    }\n    ```", "```cs\n    { ManufacturerName = Ford, CarName = Focus }\n    { ManufacturerName = Ford, CarName = Galaxy }\n    { ManufacturerName = Ford, CarName = GT40 }\n    { ManufacturerName = BMW, CarName = 1 Series }\n    { ManufacturerName = BMW, CarName = 2 Series }\n    { ManufacturerName = VW, CarName = Golf }\n    { ManufacturerName = VW, CarName = Polo }\n    ```", "```cs\n    var query = from manufacturer in manufacturers\n                join car in cars\n                  on manufacturer.ManufacturerId equals car.ManufacturerId\n                  select new\n                  {\n                    ManufacturerName = manufacturer.Name, CarName = car.Name\n                  };\n    foreach (var item in query)\n    {\n      Console.WriteLine($\"{item}\");\n    }\n    ```", "```cs\nvar stations = new List<string>\n{\n    \"Kings Cross KGX\", \n    \"Liverpool Street LVS\", \n    \"Euston EUS\", \n    \"New Street NST\"\n};\nvar query1 = from station in stations\n             where station[^3..] == \"LVS\" || station[^3..] == \"EUS\" || \n                   station[0..^3].Trim().ToUpper().EndsWith(\"CROSS\")\n             select new { code= station[^3..],                           name= station[0..^3].Trim().ToUpper()};\n```", "```cs\nvar query2 = from station in stations\n             let code = station[^3..]\n             let name = station[0..^3].Trim().ToUpper()\n             where code == \"LVS\" || code == \"EUS\" || \n                   name.EndsWith(\"CROSS\") \n             select new {code, name};\n```", "```cs\nStation Codes: \nKGX : KINGS CROSS\nLVS : LIVERPOOL STREET\nEUS : EUSTON\nStation Codes (2):\nKGX : KINGS CROSS\nLVS : LIVERPOOL STREET\nEUS : EUSTON\n```", "```cs\nenum FilterCriteriaType {Class, Origin, Destination}\n```", "```cs\nrecord FilterCriteria(FilterCriteriaType Filter, string Operand)\n```", "```cs\n    public const int Agency = 0;\n    public const int PaidFare = 1; \n    ```", "```cs\nCommands: go | clear | class value | origin value | destination value\n```", "```cs\n    Enter a command:class economy\n    Added filter: Class=economy\n    Enter a command:class Business Class\n    Added filter: Class=business class\n    ```", "```cs\n    Enter a command:origin london\n    Added filter: Origin=london\n    ```", "```cs\n    Enter a command:destination zurich\n    Added filter: Destination=zurich\n    ```", "```cs\n    Enter a command:go\n    Classes: economy OR business class\n    Destinations: zurich\n    Origins: london\n    Results: Count=16, Avg=266.92, Min=-74.71, Max=443.49\n    ```"]