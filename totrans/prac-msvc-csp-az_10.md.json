["```cs\npublic abstract class GameGuessAnalyzer<TField, TResult> :\n  IGameGuessAnalyzer<TResult>\n  where TResult : struct\n{\n  protected readonly IGame _game;\n  private readonly int _moveNumber;\n  protected TField[] Guesses { get; private set; }\n  protected GameGuessAnalyzer(IGame game, TField[] guesses, int moveNumber)\n  {\n    _game = game;\n    Guesses = guesses;\n    _moveNumber = moveNumber;\n  }\n  protected abstract TResult GetCoreResult();\n  private void ValidateGuess()\n  {\n    // code removed for brevity\n  }\n  protected abstract void SetGameEndInformation(TResult result);\n  public TResult GetResult()\n  {\n    ValidateGuess();\n    TResult result = GetCoreResult();\n    SetGameEndInformation(result);\n    return result;\n  }\n}\n```", "```cs\npublic class ColorGameGuessAnalyzer(\n  IGame game, ColorField[] guesses, int moveNumber) :\n  GameGuessAnalyzer<ColorField, ColorResult>(game, guesses, moveNumber)\n{\n  protected override ValidateGuessValues()\n  {\n    // code removed for brevity\n  }\n  protected override ColorResult GetCoreResult()\n  {\n    // code removed for brevity\n  }\n}\n```", "```cs\ndotnet new xunit -o Codebreaker.Analyzers.Tests\ncd Codebreaker.Analyzers.Tests\ndotnet add reference ..\\Codebreaker.Analyzers\n```", "```cs\npublic class MockColorGame : IGame\n{\n  public Guid Id { get; init; }\n  public int NumberCodes { get; init; }\n  public int MaxMoves { get; init; }\n  public DateTime? EndTime { get; set; }\n  public bool IsVictory { get; set; }\n  // code removed for brevity\n}\n```", "```cs\nprivate static MockColorGame CreateGame(string[] codes) => new()\n{\n  GameType = GameTypes.Game6x4,\n  NumberCodes = 4,\n  MaxMoves = 12,\n  IsVictory = false,\n  FieldValues = new Dictionary<string, IEnumerable<string>>()\n  {\n    [FieldCategories.Colors] = [.. TestData6x4.Colors6]\n  },\n  Codes = codes\n};\nprivate static ColorResult AnalyzeGame(\n  string[] codes,\n  string[] guesses,\n  int moveNumber = 1)\n{\n  MockColorGame game = CreateGame(codes);\n  ColorGameGuessAnalyzer analyzer = new(game, [.. guesses.\n    ToPegs<ColorField>()], moveNumber);\n  return analyzer.GetResult();\n}\n```", "```cs\n[Fact]\npublic void GetResult_Should_ReturnThreeWhite()\n{\n  ColorResult expectedKeyPegs = new(0, 3);\n  ColorResult? resultKeyPegs = AnalyzeGame(\n    [Green, Yellow, Green, Black],\n    [Yellow, Green, Black, Blue]\n  );\n  Assert.Equal(expectedKeyPegs, resultKeyPegs);\n}\n```", "```cs\n[InlineData(1, 2, Red, Yellow, Red, Blue)]\n[InlineData(2, 0, White, White, Blue, Red)]\n[Theory]\npublic void GetResult_ShouldReturn_InlineDataResults(\n  int expectedBlack, int expectedWhite,\n  params string[] guessValues)\n{\n  string[] code = [Red, Green, Blue, Red];\n  ColorResult expectedKeyPegs = new (expectedBlack, expectedWhite);\n  ColorResult resultKeyPegs = AnalyzeGame(code, guessValues);\n  Assert.Equal(expectedKeyPegs, resultKeyPegs);\n}\n```", "```cs\npublic class TestData6x4 : IEnumerable<object[]>\n{\n  public static readonly string[] Colors6 = [Red, Green, Blue, Yellow,\n    Black, White];\n  public IEnumerator<object[]> GetEnumerator()\n  {\n    yield return new object[]\n    {\n      new string[] { Green, Blue,  Green, Yellow },\n      new string[] { Green, Green, Black, White },\n      new ColorResult(1, 1) // expected\n    };\n    yield return new object[]\n    {\n      new string[] { Red,   Blue,  Black, White },\n      new string[] { Black, Black, Red,   Yellow },\n      new ColorResult(0, 2)\n    };\n    // code removed for brevity – more test cases here\n  }\n  IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();\n}\n```", "```cs\n[Theory]\n[ClassData(typeof(TestData6x4))]\npublic void GetResult_ShouldReturn_UsingClassdata(\n  string[] code,\n  string[] guess,\n  ColorResult expectedKeyPegs)\n{\n  ColorResult actualKeyPegs = AnalyzeGame(code, guess);\n  Assert.Equal(expectedKeyPegs, actualKeyPegs);\n}\n```", "```cs\n[Fact]\npublic void GetResult_Should_ThrowOnInvalidGuessValues()\n{\n  Assert.Throws<ArgumentException>(() =>\n    AnalyzeGame(\n      [\"Black\", \"Black\", \"Black\", \"Black\"],\n      [\"Black\", \"Der\", \"Blue\", \"Yellow\"] // \"Der\" is wrong\n  ));\n}\n```", "```cs\npublic class GamesService(IGamesRepository dataRepository) : IGamesService\n{\n  public async Task<(Game Game, Move Move)> SetMoveAsync(\n    Guid id, string gameType, string[] guesses,\n    int moveNumber,\n    CancellationToken cancellationToken = default)\n  {\nGame? game = await dataRepository.GetGameAsync(id, \n    cancellationToken);\n    CodebreakerException.ThrowIfNull(game);\n    CodebreakerException.ThrowIfEnded(game);\n    CodebreakerException.ThrowIfUnexpectedGameType(game, gameType);\n    Move move = game.ApplyMove(guesses, moveNumber);\n    await dataRepository.AddMoveAsync(game, move, cancellationToken);\n    return (game, move);\n  }\n  // code removed for brevity\n}\n```", "```cs\npublic class GamesServiceTests\n{\n  private readonly Mock<IGamesRepository> _gamesRepositoryMock = new();\n  private readonly Guid _endedGameId = Guid.Parse(\"4786C27B-3F9A-4C47-9947-F983CF7053E6\");\n  private readonly Game _endedGame;\n  private readonly Guid _running6x4GameId = Guid.Parse(\"4786C27B-3F9A-4C47-9947-F983CF7053E7\");\n  private readonly Game _running6x4Game;\n  private readonly Guid _notFoundGameId = Guid.Parse(\"4786C27B-3F9A-4C47-9947-F983CF7053E8\");\n  private readonly Guid _running6x4MoveId1 = Guid.Parse(\"4786C27B-3F9A-4C47-9947-F983CF7053E9\");\n  private readonly string[] _guessesMove1 = [\"Red\", \"Green\", \"Blue\", \"Yellow\"];\n```", "```cs\npublic GamesServiceTests()\n{\n  _endedGame = new(_endedGameId, \"Game6x4\", \"Test\", DateTime.Now, 4, 12)\n  {\n    Codes = [\"Red\", \"Green\", \"Blue\", \"Yellow\"],\n    FieldValues = new Dictionary<string, IEnumerable<string>>()\n    {\n      { FieldCategories.Colors, [\"Red\", \"Green\", \"Blue\", \"Yellow\", \n\"Purple\", \"Orange\"] }\n    },\n    EndTime = DateTime.Now.AddMinutes(3)\n  };\n  // code removed for brevity\n  _gamesRepositoryMock.Setup(repo => repo.GetGameAsync(_endedGameId, \n     CancellationToken.None)).ReturnsAsync(_endedGame);\n  _gamesRepositoryMock.Setup(repo => repo.GetGameAsync\n  (_running6x4GameId, CancellationToken.None)).ReturnsAsync\n  (_running6x4Game);\n  _gamesRepositoryMock.Setup(repo => repo.AddMoveAsync\n  (_running6x4Game, It.IsAny<Move>(), CancellationToken.None));\n}\n```", "```cs\n[Fact]\npublic async Task SetMoveAsync_Should_ThrowWithEndedGame()\n{\n  GamesService gamesService = new(_gamesRepositoryMock.Object);\n  await Assert.ThrowsAsync<CodebreakerException>(async () =>\n  {\nawait gamesService.SetMoveAsync(_endedGameId, \"Game6x4\", [\"Red\", \n    \"Green\", \"Blue\", \"Yellow\"], 1, CancellationToken.None);\n  });\n  _gamesRepositoryMock.Verify(repo => repo.GetGameAsync(_endedGameId, \nCancellationToken.None), Times.Once);\n}\n```", "```cs\n[Fact]\npublic async Task SetMoveAsync_Should_UpdateGameAndAddMove()\n{\n  GamesService gamesService = new(_gamesRepositoryMock.Object);\n  var result = await gamesService.SetMoveAsync(_running6x4GameId, \n\"Game6x4\", [\"Red\", \"Green\", \"Blue\", \"Yellow\"], 1, \nCancellationToken.None);\n  Assert.Equal(_running6x4Game, result.Game);\n  Assert.Single(result.Game.Moves);\n  _gamesRepositoryMock.Verify(repo => repo.GetGameAsync\n  (_running6x4GameId, CancellationToken.None), Times.Once);\n  _gamesRepositoryMock.Verify(repo => repo.AddMoveAsync\n  (_running6x4Game, It.IsAny<Move>(), CancellationToken.None), Times.\n  Once);\n}\n```", "```cs\ndotnet new aspire-xunit -o Codebreaker.IntegrationTests\n```", "```cs\npublic class GameAPIsTests : IAsyncLifetime\n{\n  private DistributedApplication? _app;\n  private HttpClient? _client;\n  public async Task InitializeAsync()\n  {\n    // code removed for brevity\n  }\n  public async Task DisposeAsync()\n  {\n    if (_app is null) throw new InvalidOperationException();\n    await _app.DisposeAsync();\n  }\n  // code removed for brevity\n```", "```cs\npublic async Task InitializeAsync()\n{\n  var appHost = await DistributedApplicationTestingBuilder.\n    CreateAsync<Projects.Codebreaker_AppHost>();\n  _app = await appHost.BuildAsync();\n  await _app.StartAsync();\n_client = _app.CreateHttpClient(\"gameapis\");\n}\n```", "```cs\n[Fact]\npublic async Task SetMove_Should_ReturnBadRequest_WithInvalidMoveNumber()\n{\n  if (_client is null) throw new InvalidOperationException();\n  CreateGameRequest request = new(GameType.Game6x4, \"test\");\n  var response = await _client.PostAsJsonAsync(\"/games\", request);\n  var gameResponse = await response.Content.\n    ReadFromJsonAsync<CreateGameResponse>();\n  Assert.NotNull(gameResponse);\n  // code removed for brevity\n```", "```cs\n[Fact]\npublic async Task SetMove_Should_ReturnBadRequest_WithInvalidMoveNumber()\n{\n  // code removed for brevity\n  int moveNumber = 0;\nUpdateGameRequest updateGameRequest = new(gameResponse.Id, \n  gameResponse.GameType, gameResponse.PlayerName, moveNumber)\n  {\n    GuessPegs = [\"Red\", \"Red\", \"Red\", \"Red\"]\n  };\n  string uri = $\"/games/{updateGameRequest.Id}\";\nvar updateGameResponse = await _client.PatchAsJsonAsync(uri, \n    updateGameRequest);\n  Assert.Equal(HttpStatusCode.BadRequest, updateGameResponse.\n    StatusCode);\n}\n```", "```cs\n[Fact]\npublic async Task SetMoves_Should_WinAGame()\n{\n  // code removed for brevity\n  int moveNumber = 1;\n  UpdateGameRequest updateGameRequest = new(gameResponse.Id, \ngameResponse.GameType, gameResponse.PlayerName, moveNumber)\n  {\n    GuessPegs = [\"Red\", \"Red\", \"Red\", \"Red\"]\n  };\n  string uri = $\"/games/{updateGameRequest.Id}\";\n  response = await _client.PatchAsJsonAsync(uri, updateGameRequest);\n  var updateGameResponse = await response.Content.\nReadFromJsonAsync<UpdateGameResponse>();\n  Assert.NotNull(updateGameResponse);\n  // code removed for brevity\n```", "```cs\n  // code remove for brevity\n  if (!updateGameResponse.IsVictory)\n  {\n    Game? game = await _client.GetFromJsonAsync<Game?>(uri);\n    Assert.NotNull(game);\n    moveNumber = 2;\nupdateGameRequest = new UpdateGameRequest(gameResponse.Id, \n      gameResponse.GameType, gameResponse.PlayerName, moveNumber)\n    {\n      GuessPegs = game.Codes\n    };\n    response = await _client.PatchAsJsonAsync(uri, updateGameRequest);\n```", "```cs\n    // code removed for brevity\n    Assert.True(response.IsSuccessStatusCode);\n    updateGameResponse = await response.Content.\nReadFromJsonAsync<UpdateGameResponse>();\n    Assert.NotNull(updateGameResponse);\n    Assert.True(updateGameResponse.Ended);\n    Assert.True(updateGameResponse.IsVictory);\n  }\n  // delete the game\n  response = await _client.DeleteAsync(uri);\n  Assert.True(response.IsSuccessStatusCode);\n}\n```", "```cs\ndotnet new nunit -o Codebreaker.GameAPIs.Playwright\ncd Codebreaker.GameAPIs.Playwright\ndotnet add package Microsoft.Playwright.NUnit\ndotnet build\n```", "```cs\npwsh bin/debug/net8.0/playwright.ps1 install\n```", "```cs\n[assembly: Category(\"SkipWhenLiveUnitTesting\")]\nnamespace Codebreaker.APIs.PlaywrightTests;\n[Parallelizable(ParallelScope.Self)]\npublic class GamesApiTests : PlaywrightTest\n{\n  private IAPIRequestContext? _requestContext;\n```", "```cs\n[SetUp]\npublic async Task SetupApiTesting()\n{\n  ConfigurationBuilder configurationBuilder = new();\n  configurationBuilder.SetBasePath(\n    Directory.GetCurrentDirectory());\n  configurationBuilder.AddJsonFile(\"appsettings.json\");\n  var config = configurationBuilder.Build();\n  if (!int.TryParse(config[\"ThinkTimeMS\"], out _thinkTimeMS))\n  {\n    _thinkTimeMS = 1000;\n  }\n  Dictionary<string, string> headers = new()\n  {\n    { \"Accept\", \"application/json\" }\n  };\n  _requestContext = await Playwright.APIRequest.NewContextAsync(new()\n  {\n    BaseURL = config[\"BaseUrl\"] ?? \"http://localhost\",\n    ExtraHTTPHeaders = headers\n  });\n}\n```", "```cs\n[TearDown]\npublic async Task TearDownAPITesting()\n{\n  if (_requestContext != null)\n  {\n    await _requestContext.DisposeAsync();\n  }\n}\n```", "```cs\n[Test]\n[Repeat(20)]\npublic async Task PlayTheGameToWinAsync()\n{\n  // code removed for brevity\n  string playerName = \"test\";\n  (Guid id, string[] colors) = await CreateGameAsync(playerName);\n  int moveNumber = 1;\n  bool gameEnded = false;\n  while (moveNumber < 10 && !gameEnded)\n  {\n    await Task.Delay(_thinkTimeMS);\n    string[] guesses = [.. Random.Shared.GetItems<string>(colors, 4)];\n    gameEnded = await SetMoveAsync(id, playerName, moveNumber++, \n    guesses);\n  }\n  if (!gameEnded)\n  {\n    await Task.Delay(_thinkTimeMS);\n    string[] correctCodes = await GetGameAsync(id, moveNumber – 1);\n    gameEnded = await SetMoveAsync(id, playerName, moveNumber++, \n      correctCodes);\n  }\n  Assert.That(gameEnded, Is.True);\n}\n```", "```cs\nprivate async Task<bool> SetMoveAsync(Guid id, string playerName, int moveNumber, string[] guesses)\n{\n  Dictionary<string, object> request = new()\n  {\n    [\"id\"] = id.ToString(),\n    [\"gameType\"] = \"Game6x4\",\n    [\"playerName\"] = playerName,\n    [\"moveNumber\"] = moveNumber,\n    [\"guessPegs\"] = guesses\n  };\nvar response = await _requestContext.PatchAsync($\"/games/{id}\", new()\n{\n    DataObject = request\n  });\n  Assert.That(response.Ok, Is.True);\n  var json = await response.JsonAsync();\n  JsonElement results = json.Value.GetProperty(\"results\");\n  Assert.Multiple(() =>\n  {\nAssert.That(results.EnumerateArray().Count(), \n      Is.LessThanOrEqualTo(4));\nAssert.That(results.EnumerateArray().All(x => x.ToString() is \n      \"Black\" or \"White\"));\n  });\n  bool hasEnded = bool.Parse(json.Value.GetProperty(\"ended\").\nToString());\n  return hasEnded;\n}\n```"]