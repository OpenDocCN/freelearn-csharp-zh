- en: The Final 10%
  prefs: []
  type: TYPE_NORMAL
- en: Have you ever heard of the 80/20 rule?
  prefs: []
  type: TYPE_NORMAL
- en: It states that 80% of most effects are caused by just 20% of the possible causes.
  prefs: []
  type: TYPE_NORMAL
- en: It is known as the Pareto Principle, named after Vilfredo Pareto, an Italian
    scientist who postulated a mathematical distribution to describe many social and
    natural phenomena.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: 20% of the clients of a company account for 80% of its revenues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 80% of a company's sales come from 20% of its products
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 80% of global world wealth is owned by 20% of the population
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 80% of crimes are committed by 20% of criminals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 20% of the posts on social networks generate 80% of traffic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is obviously a rule of thumb, but you'd be surprised how accurate it can
    be!
  prefs: []
  type: TYPE_NORMAL
- en: 'In fact, we can safely state that:'
  prefs: []
  type: TYPE_NORMAL
- en: '"80% of a game is made in the final 20% of the time"'
  prefs: []
  type: TYPE_NORMAL
- en: I know, the chapter is called The Final 10%. Based on what we've just said,
    it should have been called The Final 80%. But that wouldn't really help with the
    point we're trying to make here.
  prefs: []
  type: TYPE_NORMAL
- en: The problem with the so-called final 10% is that it often takes much longer
    than the final 10% of budgeted development time. When the game finally comes together,
    not only will bugs and technical problems with the software inevitably emerge,
    but some of the systems might prove to be not working as expected. Some design
    flaws might lie hidden in the game and become evident only at this stage.
  prefs: []
  type: TYPE_NORMAL
- en: This is the reason why so many games' release dates are delayed and so many
    budgets are burned before the project is done. This is why the dreaded crunch
    time practice exists in our industry.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also the reason why so many games projects fail:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00086.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Wrap-Up, Test and Polishing phase usually takes much longer than what was
    originally planned, causing great delays in the final release. The purpose of
    this diagram is to give you an idea of what could go wrong in the game development
    process
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to discuss the activities and issues that make
    that final 10% so challenging, focusing on those that put the game designer at
    the center of the action.
  prefs: []
  type: TYPE_NORMAL
- en: This is not a book for project managers or producers (although they would certainly
    benefit from some game design knowledge), therefore this chapter won't be focused
    around how to avoid crunch time or meet deadlines.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter is about the activities that must be done in that last 10%. As
    a designer is your duty to know them and enter the final stage of production confident
    and ready for the final push before release!
  prefs: []
  type: TYPE_NORMAL
- en: It is important to keep in mind that, in the real world, no project schedule
    contemplates assigning 80% of the time available to just the final part. The ability
    and the challenge for the producers and project managers are to make sure that
    the final stage can be wrapped up in a reasonable amount of time, which is always
    going to be shorter than the production time.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: This is one of the biggest challenges of producing a game, but as a game designer,
    you should stay focused on doing your part and making sure everything you have
    to do is done in time. We don't live in an ideal world, so be prepared to confront
    the final 10% with no more than just 10% of the time...or less!
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Usually, the final stage of the production begins with the Alpha release. Here
    follows a list of the activities commonly associated with this final stage:'
  prefs: []
  type: TYPE_NORMAL
- en: Putting the pieces together
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Polishing
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Quality Assurance
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Putting the pieces together
  prefs: []
  type: TYPE_NORMAL
- en: It's very unlikely that a game would take its final shape by linearly expanding
    from its narrative beginning to its ultimate ending. During the development, some
    pieces of the game are developed as modules and all these modules are put together
    when a playable of some sort is required. But maybe after the Alpha is out, some
    extra iteration is required to sort out problems and those pieces need to be re-shuffled
    for the Beta or the next version. Again, it is possible that this task would come
    at the last moment.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on the size of the project, the designer might have a big responsibility
    in putting everything together. Usually, the designers are in charge of setting
    up the whole game content. Maybe the beta version included only a single level
    or mission, and that one was put together as best as possible for the Beta phase.
    Now it is time to create and introduce the rest of those missions, quest, dialogs,
    characters, and levels.
  prefs: []
  type: TYPE_NORMAL
- en: Feature creep
  prefs: []
  type: TYPE_NORMAL
- en: Once the game is finished, or almost finished, it's really easy to see what
    might be missing. The team, with a clearer picture of a semi-finished product,
    might come up with fresh new ideas, different solutions, or new content. The feeling
    is that, with these kinds of additions, it would be a much better game. And you
    and the team are almost there if only there was a bit more time. Or maybe, while
    putting the pieces together, it starts to feel like it is not enough. It is not
    as fun as you thought it would be.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the moment where a project might face a dangerous problem: feature
    creep, the constant addition of features and functionality to a product. Instead
    of putting together what''s already been developed in the best way possible and
    focusing on increasing its quality, the team makes the collective mistake to think
    that more new features would make a better game.'
  prefs: []
  type: TYPE_NORMAL
- en: An interesting example of deliberate feature creep is the practice of promising
    stretch goals that we have seen in recent years on Kickstarter. Kickstarter is
    a crowd-funding platform where creators can pitch their projects directly to the
    final user, and ask them for money to make those projects come to life. The idea
    behind stretch-goals is to promise users more stuff upon reaching extra funding
    goals after the initial goal is achieved.
  prefs: []
  type: TYPE_NORMAL
- en: So, an original idea is pitched, people love it and back it with their money.
    The funding goal is achieved and now the developers start adding (promise to add)
    features to an original design that was already great. There is a great opportunity
    to make a bigger and better game (and also to raise more money)...but there's
    also a huge risk of drifting away from the original idea by adding the unnecessary.
    Of course, the good news for these Kickstarter projects is that feature creep
    in the design and concept phase of a project is not as bad as coming up with new
    things when a game is almost completed.
  prefs: []
  type: TYPE_NORMAL
- en: A classic real-life example is adding a multiplayer mode to a single player
    game. Many game development teams have been almost destroyed by a sudden change
    in the original plans. To make the game more appealing, a multiplayer mode is
    announced. Maybe during a big conference or convention. The game is almost finished,
    and the multiplayer feature is used to increase the hype or attract further investments.
    Or maybe the team itself think that, now that the game is completed, a multiplayer
    mode can really be the icing on the cake. When something like this happens and
    it wasn't planned since the beginning, only bad things can happen.
  prefs: []
  type: TYPE_NORMAL
- en: 'What a game designer can do to avoid this danger is to find what can be cut,
    instead of adding more: Less is more.'
  prefs: []
  type: TYPE_NORMAL
- en: We already discussed this when we spoke about the initial design of a game,
    now we're going to use it again in the final stage.
  prefs: []
  type: TYPE_NORMAL
- en: Less is more
  prefs: []
  type: TYPE_NORMAL
- en: 'You should always be on the lookout for features that could be cut from your
    game. There are three main properties you can look for in features that might
    make them good candidates for removal from a game:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Unintuitive mechanics: Unintuitive mechanics are always a warning. If players
    struggle to understand why or how a mechanic works, it might be a good idea to
    remove it altogether or to strip it down to a much simpler version.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Mechanics that don''t really appeal to the audience: Mechanics that don''t
    appeal your audience are a common mistake. A complex crafting system in a casual
    match-3 game might not be a great idea. Make sure that every mechanic will reinforce
    and support your design pillars.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Unnecessary features: What might have sounded like a great idea on paper may
    turn out to be unnecessarily complex in the final game. Maybe you designed multiple
    different upgrade paths for the character and, during playtesting, some of them
    simply turned out to be not meaningful enough to be engaging and compelling.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Polish
  prefs: []
  type: TYPE_NORMAL
- en: What is polish?
  prefs: []
  type: TYPE_NORMAL
- en: This is another concept that many developers have tried to nail with a formal
    definition. As you know by now, we don't like formal definitions, so be warned
    that the notion of what polish is might vary from developer to developer, but
    most importantly from game to game! To polish a game, basically, means to raise
    the standard of its quality.
  prefs: []
  type: TYPE_NORMAL
- en: Why and how would you polish a pair of shoes or a plank of wood?
  prefs: []
  type: TYPE_NORMAL
- en: You don't change the shoes or the shape of the plank. Polishing a pair of walking
    boots won’t turn them into a pair of patent leather formal shoes to go with your
    tuxedo. The goal of polishing is to smoothen the game and the experience. To tweak
    its values and refine its details until it really feels great and immediately
    pleasing on an aesthetic and gameplay level.
  prefs: []
  type: TYPE_NORMAL
- en: The (in)famous scenario where the game designer finally plays the Alpha of the
    game and comes up with a brilliant idea to make things even better...usually is
    not polishing. It is the dreaded wouldn't be cool to add this? scenario. Polishing
    should not be about adding anything. If a feature is finished or supposed to be
    finished, and the team feels the necessity to add something on top of it to make
    it really work, that's a sign that the feature might be broken at its core.
  prefs: []
  type: TYPE_NORMAL
- en: How to polish
  prefs: []
  type: TYPE_NORMAL
- en: Polishing a game is not a game design job only. Actually, most of the polishing
    work would be carried out by artists, animators, and programmers. The game designer
    has a crucial role in this phase nonetheless. Entering the final stage of a game
    production means that the game designer will have to put himself in the shoes
    of the player and play the game like it is his favorite game of all time. This
    is the stage where the game designer has to become an expert gamer of their own
    game.
  prefs: []
  type: TYPE_NORMAL
- en: Most gamers would probably be surprised how little playing of the game happens
    by most people in game development. Most programmers and artists usually ship
    games that they have never actually played the whole way through, except those
    particular moments or scenes here and there where their work was focused.
  prefs: []
  type: TYPE_NORMAL
- en: That’s perfectly fine for them, but unacceptable for game designers.
  prefs: []
  type: TYPE_NORMAL
- en: Game designers, along with game directors and the QA department, are the ones
    that have to keep engineers and artists informed of the final product's quality
    and determine which areas are in critical need of polish or further attention.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s have a look at the most common tasks for polishing a game:'
  prefs: []
  type: TYPE_NORMAL
- en: Stability and performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Audio and visual
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Design polish
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the following paragraphs, we're going to briefly mention technical tasks
    and focus more on the tasks specific to the game designer.
  prefs: []
  type: TYPE_NORMAL
- en: Stability and performance
  prefs: []
  type: TYPE_NORMAL
- en: Stability and performance are the first two things to be looked at during polishing.
    It involves many procedures and techniques that might keep the engineers busy
    for a while, but the designers can spot moments or parts of the game that runs
    a bit too slow or have glitches. Polishing stability and performance means avoiding
    crashes, glitches, improving and stabilizing the FPS (frames per second), and
    reducing the functional bugs (even the smallest ones) to zero or as close to zero
    as possible. It also includes monitoring and optimizing the use of CPU and GPU
    and the memory usage.
  prefs: []
  type: TYPE_NORMAL
- en: It is worth noting that, even if this sounds like a very technical activity
    for engineers, sometimes it could take only a designer to solve a performance
    issue. If a designer has requested features that are within the limits of what
    can be technically achieved, then the design might have to be reworked, numbers
    scaled back, the number of enemies reduced, attacks per second changed, visual
    effects tuned down, or the limits on the number of players in a multiplayer game
    might have to be enforced.
  prefs: []
  type: TYPE_NORMAL
- en: One way designers can definitely help the engineers solve performance issue
    is by offering solutions like the above. While an engineer might happily/frustratedly
    bang their head against a wall of code for a week trying to squeeze another 5%
    of performance out of a tight section of code, perhaps a simpler solution could
    be just a designer lowering a number to relieve some strain on the engine. It's
    worth being vigilant as a designer and involved in knowing the performance bottlenecks
    of the engines you are most likely making content for; you can save the engineering
    team potentially days of time and help get the game shipped in time.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Perceived performance
  prefs: []
  type: TYPE_NORMAL
- en: Perceived performance is as important as actual performance. We are talking
    here about a few minor tweaks that can help give the impression of overall better
    performance to players. Lowering the max FPS is another common trick, a game capped
    at 30 FPS might look more fluid than a game that struggles to maintain consistently
    60 FPS.
  prefs: []
  type: TYPE_NORMAL
- en: Another common way to improve perceived performance is to enhance the player
    experience during loading screens.
  prefs: []
  type: TYPE_NORMAL
- en: 'Loading screens are obviously one of the most obvious and direct feedbacks
    of a game technical''s performance. The bigger the game, the better the graphics,
    the longer the loading times. Same with online multiplayer games: finding matches
    or connecting to servers might take a while - even worse, it might all depend
    from the player''s internet connection, and there''s very little the engineers
    can do about that.'
  prefs: []
  type: TYPE_NORMAL
- en: 'During waiting times, there is a multitude of ways to give the player the impression
    that the game experience is not blocked by the loading screen: tips, the game''s
    lore, and tutorials are extremely common, giving the player something to read
    while waiting.'
  prefs: []
  type: TYPE_NORMAL
- en: Some games even feature a mini-game during the loading times, such as The Sims
    3's hidden object mini-game.
  prefs: []
  type: TYPE_NORMAL
- en: 'The art of interactive loading screens reached new heights with titles such
    as Bayonetta or Fifa, where the player is able to practice with the mechanics
    of the game:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00164.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The tutorial feature during loading screens was so great in Bayonetta that many
    players started requesting online whether there was a way to stay on the loading
    screen and keep practicing!
  prefs: []
  type: TYPE_NORMAL
- en: Audio and visual
  prefs: []
  type: TYPE_NORMAL
- en: Audio and visual factors are very important in terms of polishing. Stability
    and performance remain the top priority, as a fantastic game that crashes or freezes
    is always worse than a mediocre game that always runs smoothly. Nonetheless, audio
    and visual are the player-facing layer and every polishing effort will have a
    tremendous impact on the player experience and enjoyment of the game.
  prefs: []
  type: TYPE_NORMAL
- en: The list of improvements and polishing that can be done with audio, animations,
    colors, environments, and character design is huge, but we can summarize it in
    one simple word—details. The attention to detail, especially in audio, environments,
    and animations is what usually takes a game to the next level of quality.
  prefs: []
  type: TYPE_NORMAL
- en: To have an idea of how a polished game looks like, just think about any of the
    latest Zelda or Mario games. The graphics, sound effects, animations, response
    to every player input...they are as great as they can be. It's a pleasure not
    only to play them but just watching them. Or compare the latest Call of Duty to
    a lower budget indie FPS such as Insurgency (far be it from any judgment of the
    latter, we're comparing two games with a very different budget and audiences here,
    and that's exactly why the polishing gap is so big).
  prefs: []
  type: TYPE_NORMAL
- en: 'Another great way to get an idea of how polishing looks like is to compare
    the various stages of a game, such as alpha, beta, and release:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00020.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Pay attention to details such as lighting, particle effects, the lava texture,
    the user interface on the bottom right part of the screen, and the UI elements
    for the trigger and the indicator in the upper part of the screen
  prefs: []
  type: TYPE_NORMAL
- en: On mobiles, companies such as Supercell or Zynga are famous for delivering games
    with an incredible level of polishing, which is undoubtedly one of the reasons
    for their success. Polished games are more captivating; just by looking better,
    they give the feeling to players that the game experience and gameplay are going
    to be just as smooth as the visual. Beware though, technical and visual polish
    might be enough to get players to try the game out, but if the design and the
    gameplay don't live up to the expectations, I doubt any player is going to stick
    around!
  prefs: []
  type: TYPE_NORMAL
- en: Design polish
  prefs: []
  type: TYPE_NORMAL
- en: Design polish includes a huge variety of activities. Every aspect of the game
    over which the game designer has direct control can be tweaked and polished. Most
    likely, we're talking about balancing, especially difficult.
  prefs: []
  type: TYPE_NORMAL
- en: Once the designer finally has the chance to play the game in its entirety, it
    is possible to go fine-tune values that might have been pre-determined only by
    data and numeric models. We have seen in the chapter about balancing how a game
    system is also made of numbers. This is the time to put them to test and tweak
    them to perfection.
  prefs: []
  type: TYPE_NORMAL
- en: The more time designers have to work and fine-tune all these values, the smoother
    the player's final experience will be. This is definitely something to think about
    during planning.
  prefs: []
  type: TYPE_NORMAL
- en: Play
  prefs: []
  type: TYPE_NORMAL
- en: Obviously, the first step in polishing the design of a game is to play it. The
    designers need to sit down with as many people as possible and play the game with
    them. We've said this already; this is the moment when the designer becomes the
    most passionate player of their own game.
  prefs: []
  type: TYPE_NORMAL
- en: This phase might be neglected by the team. Maybe everyone is exhausted at this
    point and the idea of playing hours of a game you've been working on for months
    or even years is daunting. Keep up your team morale! Make the playing activity
    fun for the team and for yourself. Organize tournaments or challenge with the
    game and learn from what you see!
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Talk
  prefs: []
  type: TYPE_NORMAL
- en: Talk to the team or anyone might be playing the game. Compare different points
    of view, and note down what doesn't really work or what you feel might be swiftly
    improved. Take on every criticism and do your best to make every adjustment you
    can.
  prefs: []
  type: TYPE_NORMAL
- en: There are designers who are very good at taking criticism and some that are
    not comfortable with it. It's vital to remain open-minded. If you close down and
    get defensive, you risk losing a channel of feedback as your colleagues don't
    want to hurt your feelings. Be thankful of all feedback you receive- even if it
    hurts, try not to show it, because then you will be open to more opinions and
    the chance to make the game better for all.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Make a checklist of all these little things and then take a significant amount
    of your daily time to work on improving them, one by one. For bigger games, a
    producer might help you in this task, organizing and prioritizing each activity.
  prefs: []
  type: TYPE_NORMAL
- en: Show the game to people that have never seen it before and listen carefully
    to their opinions. Some obvious problems might be invisible to you or others from
    the team. When you work on a game for a long time, it's very easy to miss those.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Consider a game that you like and you think has been somehow polished:'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- Identify at least three features that have been visually polished to make
    the game “feel” better, without having any impact on its core gameplay.'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- Do the same, but focusing on design polish, compare similar mechanics for
    different games and focus on how some of them are more polished than the others.'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- Can you spot some technical polishing? Any particular technique to improve
    the perceived performance?'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Quality assurance
  prefs: []
  type: TYPE_NORMAL
- en: 'There are different methods for game testing, and most methodologies are developed
    by individual video game developers and publishers. Methodologies are continuously
    refined and may differ for different types of games (for example, the methodology
    for testing an MMORPG will be different from testing a casual game). Many methods
    are borrowed directly from general software testing techniques. Outlined below
    are the most important methodologies for video games:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Functionality testing: Most commonly associated with the phrase game testing,
    as it entails playing the game in some form. Functionality testing does not require
    extensive technical knowledge. Functionality testers look for general problems
    within the game itself or its User Interfaces, such as stability issues, game
    mechanic issues, and game asset integrity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Compliance testing: First-party licensors for console platforms have strict
    technical requirements for titles licensed for their platforms. For example, Sony
    publishes a Technical Requirements Checklist (TRC), Microsoft publishes Xbox Requirements
    (XR), and Nintendo publishes a set of guidelines (Lotcheck)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Compatibility testing: Compatibility testing teams test the major functionality
    of the game on various configurations of hardware. This is mostly done for PC
    or mobile games, as console platforms are more standardized.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Localization testing: Ensures the accuracy and quality of game''s localization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Soak testing: Involves leaving the game running for prolonged periods time
    in various modes of operation, such as idling, paused, or at the title screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Regression testing: QA checks to see whether the bug is still there (regression)
    and then runs similar tests to see whether the fix broke something else.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All these testings are done following a test plan. A test plan documents the
    strategy that will be used to verify and ensure that a game or feature meets its
    design specifications. It tells the tester what to test and look for in every
    piece of the game.
  prefs: []
  type: TYPE_NORMAL
- en: Game designers and QA
  prefs: []
  type: TYPE_NORMAL
- en: The relationship between a game designer and QA is very important. Game documentation
    might (and will) be used by QA as a reference for writing and running their test
    plans. Some specific documentation might be needed for testing specific features.
  prefs: []
  type: TYPE_NORMAL
- en: The more custom documentation the designers are able to provide to QA, the easier
    and more effective the QA work will be. For example, whenever I design a new batch
    of cards for Battlehand, I create an ad hoc document for the QA where I include
    every card's render with a description of what the card effects are and what numbers
    are expected to appear on it. This document is quite different from the actual
    design documentation of each card, which consists of a line in a huge spreadsheet
    that contains the design of every card in the game. By creating this ad hoc document,
    I make sure the QA department knows only what it needs to look for, in a more
    accessible format that includes details that are irrelevant in the design phase
    (like the card artwork and final appearance).
  prefs: []
  type: TYPE_NORMAL
- en: Remember that QA is your last chance, as a designer, to ship content of the
    highest quality. Making mistakes is only natural; you will make mistakes. A solid
    testing is the only way to avoid those mistakes going out to the public, who are
    going to notice them and who might be pretty unforgiving.
  prefs: []
  type: TYPE_NORMAL
- en: A great way to make the most out of QA is to get your designs reviewed by either
    a QA manager or the tester that will be assigned to the feature. This way, you
    will get feedback on your features well before the official QA stage even starts.
    Getting this kind of thing done before entering the final 10% is a nice way to
    avoid accumulating too much work in that final stage, and will definitely help
    to reduce the risk of accumulating delays and falling out of track.
  prefs: []
  type: TYPE_NORMAL
- en: QA might provide game designers some insights about gameplay that goes beyond
    the actual testing. In the end, we're talking of people that are going to play
    your game, or parts of it, hundreds of times, and they often have a level of expertise
    or feeling of the overall balancing that no developer or designer would be able
    to get in the same time window. Use that knowledge to keep improving the game!
  prefs: []
  type: TYPE_NORMAL
- en: Tips for closing a game project
  prefs: []
  type: TYPE_NORMAL
- en: As we have seen, in an ideal world, the closing phase of a game project should
    take more time than the sum of each of the previous stages. But that's unlikely
    to happen in the real world - on the contrary, it is highly probable that you'll
    find yourself with much less time than expected to wrap everything up.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a list of tips and practices to avoid sacrificing polishing, proper
    user testing and, in the worst cases, procrastinating a game''s release:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Review the game concept and game design pillars: Cut anything that doesn''t
    reflect them. The sooner this review is done, the better it is, but don''t be
    afraid to cut a feature that appears to be in contrast with the original concept,
    even if it has been partially or fully developed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Have a UX review: Let a professional UX researcher study your game. A UX review
    will provide you with extremely useful insights and a lot of actionable points
    to improve the quality of your game.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Get the game out there: Let other professional game developers try your game,
    and listen to their feedback. If you can, showcase your game at consumer fairs
    and show and pay attention to their reactions and feedback. There is a lot that
    can be learned by watching a real player trying your game.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Release as soon as possible: This is not always possible, but if you can take
    advantage of an early access version or a soft launch, go for it and test the
    game with a sensible amount of players.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test and iterate early on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Keep track of your decisions and don''t change them: If you, or someone else,
    take the decision of cutting a feature, or adjust a design based on some compromise,
    note down why and when these decisions were taken. It might not make sense some
    months down the line and you might be tempted to revisit or reconsider some old
    decision...only to end up in the same problematic situation of months before.
    If you know and clearly remember what the reasoning behind a decision was, you
    are more likely to save time by not reconsidering and overthinking.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Stick to the plan: This is a very simple, but effective, advice. Anything that
    wasn''t part of the original plan should be a red flag. What is the reason it
    was not part of the plan? Are you slipping into feature creeping?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Don''t aim for absolute perfection: Polishing is great, but it can really go
    on forever and nothing (and no one) is perfect. You should do the best work possible
    in the time you have.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Don''t procrastinate: Fixing bugs and starting polishing during production
    is the best way to save time when it''s time to close the project and ship the
    game. Whenever you see a bug, if you have time to take care of it, just do it!
    There will be a final QA phase, but that''s when the unexpected bug and problems
    should be addressed. Postponing every bug to the final QA, even those you were
    aware of and able to fix early on, is a mistake that will take a lot of your time
    when you will have very little available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Don''t be too passionate about your work, let a project manager decide: Sometimes
    you can get stuck with design decisions. Two solutions might be both worth doing
    or trying. Don''t let these moments of indecision block the development process.
    When in doubt, especially in bigger teams, ask and trust a lead, a producer, or
    a project manager. The reason to go for one solution rather than the other might
    be beyond your skills and just a matter of production requirements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Be ready to accept and embrace failure: Making games is not an exact science;
    it is also an art. You might follow every step by the book and do everything you
    are supposed to do and still fail. These moments are hard hits for teams and entire
    game companies, but there is more to learn from failure than from success. Treasure
    these experiences and analyze everything that went wrong. This experience is what
    will make you a veteran game designer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The screenshots used in this chapter are for illustrative purposes only. We
    do not recommend that you to misuse these in any way. For more information please
    consult the terms and conditions of the publishers mentioned in the Disclaimer
    section of this book.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Summary
  prefs: []
  type: TYPE_NORMAL
- en: You now know how to successfully close and ship a game. We have seen that you
    need to be conscious about the time required for the final stage in every game's
    development. We have learned the risks of putting a game together and how to avoid
    the feature creep danger. We have seen what polish is and how the team and the
    designers can polish their game to improve the quality of the game.
  prefs: []
  type: TYPE_NORMAL
- en: We had a quick look at the Quality Assurance process and went through a list
    of useful tips and suggestions for you to keep in mind when the time will come
    to close your project and finally enjoy shipping your game! The journey's not
    over yet. In the next chapter, you're going to learn about games as a service,
    a huge topic which is really dear to us.
  prefs: []
  type: TYPE_NORMAL
