["```cs\n// Removed code for brevity.\n// Add health check services to the container.\nbuilder.Services.AddHealthChecks();\n```", "```cs\n    // Removed code for brevity.\n    app.UseEndpoints(endpoints =>\n    {\n        endpoints.MapControllerRoute(\n             name: \"default\",\n             pattern: \n            \"{controller=Products}/{action=Index}/{id?}\");\n        endpoints.MapHealthChecks(\"/health\");\n    });\n    ```", "```cs\n    // Add health check services to the container.\n    services.AddHealthChecks()\n    .AddUrlGroup(new Uri(this.Configuration.GetValue<string>(\"ApplicationSettings:ProductsApiEndpoint \")), name: \"Product Service\")\n    .AddUrlGroup(new Uri(this.Configuration.GetValue<string>(\"ApplicationSettings:OrdersApiEndpoint \")), name: \"Order Service\");\n    ```", "```cs\n    // Removed code for brevity.\n    app.UseEndpoints(endpoints =>\n    {\n       endpoints.MapControllerRoute(\n            name: \"default\",\n            pattern: \"{controller=Products}/{action=Index}/{id?}\");\n    endpoints.MapHealthChecks(\"/health\", new \n              HealthCheckOptions\n            {\n              ResponseWriter = async (context, report) =>\n              {\n    context.Response.ContentType = \n                   \"application/json\";\n                 var response = new\n          {\n             Status = report.Status.ToString(),\n             HealthChecks = report.Entries.Select(x => new\n             {\n                Component = x.Key,\n                Status = x.Value.Status.ToString(),\n                Description = x.Value.Description,\n              }),\n              HealthCheckDuration = report.TotalDuration,\n          };\n          await context.Response.WriteAsync(\n            JsonConvert.SerializeObject(response))\n            .ConfigureAwait(false);\n        },\n       });\n    });\n    ```", "```cs\n    public class ProcessMonitorHealthCheck : IHealthCheck\n    {\n       private readonly string processName;\n       public ProcessMonitorHealthCheck(string \n         processName) => this.processName = processName;\n       public Task<HealthCheckResult> \n         CheckHealthAsync(HealthCheckContext context, \n         CancellationToken cancellationToken = default)\n        {\n            Process[] pname = \n             Process.GetProcessesByName(this.processName);\n            if (pname.Length == 0)\n            {\n                return Task.FromResult(new \n                  HealthCheckResult(context.Registration\n                 .FailureStatus, description: $\"Process \n                  with the name {this.processName} is not \n                  running.\"));\n            }\n            else\n            {\n                return Task.FromResult(\n                  HealthCheckResult.Healthy());\n            }\n        }\n    }\n    ```", "```cs\n    public static class ProcessMonitorHealthCheckBuilderExtensions\n        {\n            public static IHealthChecksBuilder \n              AddProcessMonitorHealthCheck(\n                this IHealthChecksBuilder builder,\n                string processName = default,\n                string name = default,\n                HealthStatus? failureStatus = default,\n                IEnumerable<string> tags = default)\n            {\n                return builder.Add(new \n                  HealthCheckRegistration(\n                   name ?? \"ProcessMonitor\",\n                   sp => new \n                   ProcessMonitorHealthCheck(processName),\n                   failureStatus,\n                   tags));\n            }\n        }\n    ```", "```cs\n    // Add health check services to the container.\n    Builder.Services.AddHealthChecks()\n    .AddUrlGroup(new Uri(this.Configuration.GetValue<string>(\"ApplicationSettings :ProductsApiEndpoint\")), name: \"Product Service\")\n    .AddUrlGroup(new Uri(this.Configuration.GetValue<string>(\"ApplicationSettings :OrdersApiEndpoint\")), name: \"Order Service\")\n    .AddProcessMonitorHealthCheck(\"notepad\", name: \"Notepad monitor\");\n    ```", "```cs\nthis.telemetry.TrackEvent(\"Create Order\");\n```", "```cs\nthis.telemetry.TrackEvent(\"Add Item To Cart\");\n```", "```cs\nrequests\n```", "```cs\n| summarize 95percentile=percentile(duration, 0.95) by client_City\n```", "```cs\n| render barchart\n```", "```cs\nrequests\n```", "```cs\n| join kind= inner (\n```", "```cs\nexceptions\n```", "```cs\n) on operation_Id\n```", "```cs\n| project requestName = name, exceptionType = type\n```", "```cs\n| summarize count=sum(1)  by requestName, exceptionType\n```", "```cs\n    using Microsoft.ApplicationInsights.SnapshotCollector;\n    ```", "```cs\n    services.AddApplicationInsightsTelemetry(this.Configuration[\"ApplicationInsights:InstrumentationKey\"]);\n    builder.Services.AddSnapshotCollector((configuration) => this.Configuration.Bind(nameof(SnapshotCollectorConfiguration), configuration));\n    ```", "```cs\n    public async Task<IEnumerable<ProductListViewModel>> GetProductsAsync(string filterCriteria = null)\n    {        \n                // Code removed for brevity\n                if (products.Any())\n                {\n                    throw new InvalidOperationException();\n                }\n                return products;\n    }\n    ```"]