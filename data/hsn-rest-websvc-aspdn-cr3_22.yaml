- en: Deploying Services on Azure
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Azure 上部署服务
- en: 'In this chapter, you will learn how to deploy the catalog web service on Microsoft
    Azure. Although we will be focusing on the Microsoft Azure cloud provider and
    most of the instructions will be strongly linked to that platform, some of the
    concepts can be applied to multiple cloud providers: containers are becoming a
    common way to build and run applications and web services on the cloud, therefore,
    every cloud provider offers slightly different services and products to host containers.
    This chapter will not go too deeply into Microsoft Azure; it will provide an overview
    of **Azure Container Instances** (**ACI**) and Azure App Service features of the
    Azure cloud.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何在 Microsoft Azure 上部署目录 Web 服务。尽管我们将重点关注 Microsoft Azure 云提供商，并且大部分说明将紧密关联该平台，但一些概念可以应用于多个云提供商：容器正在成为在云上构建和运行应用程序和
    Web 服务的常见方式，因此，每个云提供商都提供略微不同的服务和产品来托管容器。本章不会深入探讨 Microsoft Azure；它将概述 Azure 云的**Azure
    容器实例**（**ACI**）和 Azure 应用服务功能。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Getting started with Azure
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 入门
- en: Pushing containers into Azure Container Registry
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将容器推送到 Azure 容器注册库
- en: Configuring ACI
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 ACI
- en: Configuring app services
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置应用服务
- en: Getting started with Azure
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure 入门
- en: As we mentioned previously, Microsoft Azure is the cloud platform built by Microsoft.
    Azure offers a wide range of IT products, technologies, and integration tools.
    Virtual machines, serverless technologies, databases, and machine learning pipelines
    are just some of the products that it provides. In this chapter, we will focus
    on a few of the services that are presented by Azure, such as**Container Instances**,
    **App Service**, and **Azure SQL Databases**.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前提到的，Microsoft Azure 是由微软构建的云平台。Azure 提供了广泛的 IT 产品、技术和集成工具。虚拟机、无服务器技术、数据库和机器学习管道只是它提供的产品中的一部分。在本章中，我们将重点关注
    Azure 提供的一些服务，例如**容器实例**、**应用服务**和**Azure SQL 数据库**。
- en: Let's start by creating a subscription. Microsoft allows us to try Azure services
    out when a new user creates an Azure account for the first time. It is possible
    to register for a new Microsoft Azure account at [https://azure.microsoft.com/free/](https://azure.microsoft.com/free/).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建订阅开始。当新用户首次创建 Azure 账户时，微软允许我们尝试 Azure 服务。您可以在 [https://azure.microsoft.com/free/](https://azure.microsoft.com/free/)
    注册新的 Microsoft Azure 账户。
- en: The signup process will ask you for some personal details, as well as a valid
    phone number and valid credit card. By default, Microsoft provides 12 months of
    popular free services, plus €170 of Azure services for 30 days and 25+ services
    that are always free. This makes it easy for a new developer or engineer to test/learn
    how to use some of Azure's new services.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 注册过程将要求您提供一些个人详细信息，以及有效的电话号码和有效的信用卡。默认情况下，微软提供 12 个月的流行免费服务，加上 30 天的 170 欧元
    Azure 服务和 25+ 永久免费的服务。这使得新开发者或工程师能够轻松测试/学习如何使用 Azure 的一些新服务。
- en: Once you've completed the signup process, you will be able to log in to the
    Azure portal ([https://portal.azure.com](https://portal.azure.com/)) using the
    account you just created.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 完成注册过程后，您将能够使用您刚刚创建的账户登录到 Azure 门户 ([https://portal.azure.com](https://portal.azure.com/))。
- en: 'The Azure CLI is Microsoft''s official CLI for managing Azure resources; it
    is available for almost all OSes and is part of the Azure SDK. The Azure SDK is
    cross-platform; therefore, it is possible to install it on Windows, macOS, or
    Linux in three different ways:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Azure CLI 是微软官方用于管理 Azure 资源的 CLI；它几乎适用于所有操作系统，并且是 Azure SDK 的一部分。Azure SDK
    是跨平台的；因此，您可以通过三种不同的方式在 Windows、macOS 或 Linux 上安装它：
- en: '| **Platform** | **Command** | **Requirements** |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| **平台** | **命令** | **要求** |'
- en: '| Linux | `curl -L https://aka.ms/InstallAzureCli &#124; bash` | You will require
    some preinstalled software, that is, Python 2.7 or Python 3.x ([https://www.python.org/downloads/](https://www.python.org/downloads/)),libffi
    ([https://sourceware.org/libffi/](https://sourceware.org/libffi/)), and OpenSSL
    1.0.2 ([https://www.openssl.org/source/](https://www.openssl.org/source/)). For
    more information, please go to[https://docs.microsoft.com/en-us/cli/azure/install-azure-cli-linux?view=azure-cli-latest](https://docs.microsoft.com/en-us/cli/azure/install-azure-cli-linux?view=azure-cli-latest).
    |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| Linux | `curl -L https://aka.ms/InstallAzureCli &#124; bash` | 您需要一些预先安装的软件，即Python
    2.7或Python 3.x([https://www.python.org/downloads/](https://www.python.org/downloads/))、libffi([https://sourceware.org/libffi/](https://sourceware.org/libffi/))和OpenSSL
    1.0.2([https://www.openssl.org/source/](https://www.openssl.org/source/))。有关更多信息，请访问[https://docs.microsoft.com/en-us/cli/azure/install-azure-cli-linux?view=azure-cli-latest](https://docs.microsoft.com/en-us/cli/azure/install-azure-cli-linux?view=azure-cli-latest)。
    |'
- en: '| macOS | `brew update && brew install azure-cli` | You will need `brew`, which
    should already be installed on your machine. For more information about `brew`,
    please go to [https://brew.sh/](https://brew.sh/). |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| macOS | `brew update && brew install azure-cli` | 您需要`brew`，它应该已经安装到您的机器上。有关`brew`的更多信息，请访问[https://brew.sh/](https://brew.sh/)。
    |'
- en: '| Windows | [https://aka.ms/installazurecliwindows](https://aka.ms/installazurecliwindows)
    | Microsoft provides an MSI for the Windows platform. |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| Windows | [https://aka.ms/installazurecliwindows](https://aka.ms/installazurecliwindows)
    | Microsoft为Windows平台提供了一个MSI。 |'
- en: 'The Azure SDK and its CLI provide all of the command-line tools you''ll need
    to manage Azure services. Let''s start by signing in using the CLI. We can do
    this by executing the following command:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Azure SDK及其CLI提供了您管理Azure服务所需的所有命令行工具。让我们首先使用CLI进行登录。我们可以通过执行以下命令来完成此操作：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding command will open a browser window and send you to the sign-in
    page for the Microsoft Azure portal and save the session into your local environment.
    In the next section, we will see how to use the CLI to push the container images
    we built in the previous chapters into the container registry service of Azure.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将打开浏览器窗口，并将您带到Microsoft Azure门户的登录页面，并将会话保存到您的本地环境中。在下一节中，我们将看到如何使用CLI将我们在前几章中构建的容器镜像推送到Azure的容器注册表服务。
- en: Pushing containers into Azure Container Registry
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将容器推送到Azure容器注册表
- en: 'In this section, we will focus on deploying our containers into Microsoft Azure.
    This process involves some resources and services that are provided out of the
    box by the cloud provider. The following diagram is an overview of the architecture
    schema that we are going to build:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将专注于将我们的容器部署到Microsoft Azure。这个过程涉及到一些云提供商提供的开箱即用的资源和服务。以下是我们将要构建的架构方案的概述图：
- en: '![](img/d32f4269-5723-4e15-92fc-fa0b1d67eddc.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d32f4269-5723-4e15-92fc-fa0b1d67eddc.png)'
- en: 'Let''s take a look at the different components that are involved in this schema:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看参与此架构的不同组件：
- en: '**Azure Container Registry** is a managed Docker Registry service ([https://docs.docker.com/registry/](https://docs.docker.com/registry/))
    based on the open source Docker Registry 2.0\. It is possible to use Azure Container
    Registry to store, manage, and use your private Docker container images. We will
    use it to save images related to our custom images, such as the `catalog_api`
    image, and make them available to other cloud services.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure容器注册表**是一个基于开源Docker Registry 2.0的托管Docker注册表服务([https://docs.docker.com/registry/](https://docs.docker.com/registry/))。您可以使用Azure容器注册表来存储、管理和使用您的私有Docker容器镜像。我们将使用它来保存与我们的自定义镜像相关的图像，例如`catalog_api`镜像，并使它们可供其他云服务使用。'
- en: The web app for containers allows us to use our containers and deploy them to
    **App Service** as a web app. Furthermore, it eliminates time-consuming infrastructure
    management tasks such as updating, scaling, and in general, managing the infrastructure.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器Web应用允许我们使用我们的容器，并将它们作为Web应用部署到**App Service**。此外，它消除了耗时的基础设施管理任务，如更新、扩展以及在一般情况下管理基础设施。
- en: The other dependencies of the application, such as `catalog_esb` and `catalog_cache`,
    will take the image from the public Docker Hub *(*[https://hub.docker.com](https://hub.docker.com))*.*
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序的其他依赖项，如`catalog_esb`和`catalog_cache`，将从公共Docker Hub(*[https://hub.docker.com](https://hub.docker.com))*获取镜像。
- en: Let's continue by creating an Azure Container Registry. The registry will be
    used further in this chapter to push and pull the image of `catalog_api`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续创建一个Azure容器注册表。在本章的后续内容中，我们将使用该注册表来推送和拉取`catalog_api`的镜像。
- en: Creating an Azure Container Registry
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 Azure 容器注册表
- en: 'To create a new Azure Container Registry, we should start by creating a new
    resource group. Resource groups are a fundamental concept in Azure resource management:
    they allow us to group a collection of resources for management, deployment, and
    billing reasons. In general, all of the resources that have the same life cycle
    should be grouped into the same resource group. Let''s get started:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的 Azure 容器注册表，我们应该首先创建一个新的资源组。资源组是 Azure 资源管理中的一个基本概念：它们允许我们根据管理、部署和计费原因将一组资源分组在一起。一般来说，所有具有相同生命周期的资源都应该被分组到同一个资源组中。让我们开始吧：
- en: 'First, create a resource group by using the following command on the Azure
    CLI:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在 Azure CLI 中使用以下命令创建一个资源组：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding command creates a new resource group called `handsOn` in our account
    stored in the West Europe region.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的命令在我们的账户中创建了一个名为 `handsOn` 的新资源组，该资源组存储在西欧地区。
- en: 'Next, we will create the Azure Container Registry by executing the following
    command:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将通过执行以下命令来创建 Azure 容器注册表：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The preceding command creates a new Azure Container Registry under the `handsOn`
    resource group with the name we have chosen. It also defines the **Stock-Keeping
    Unit** (**SKU**) for this resource—in our case, the basic one.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的命令在名为 `handsOn` 的资源组下创建了一个新的 Azure 容器注册表，并使用了我们选择的名称。它还定义了该资源的 **库存单位** (**SKU**)——在我们的例子中，是基本版本。
- en: SKU usually refers to a specific variant of a product and all of the attributes
    that identify that type of product. In the same way, Microsoft Azure uses this
    term to identify a specific purchasable good or service.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: SKU 通常指代产品的特定变体以及识别该类型产品的所有属性。同样，Microsoft Azure 使用这个术语来识别特定的可购买商品或服务。
- en: 'Now that we have created an Azure Container Registry, let''s push the `catalog_api`
    image into the registry. To solve the other dependencies of our container, we
    will create another `appsettings.json` file dedicated to a `Stage` environment.
    Therefore, we will set the `ASPNETCORE_ENVIRONMENT` variable to `Stage` to apply
    the connection string needed by the container. We can proceed by creating the
    `appsettings.Stage.json` file in the following way:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了一个 Azure 容器注册表，让我们将 `catalog_api` 镜像推送到注册表中。为了解决我们容器的其他依赖项，我们将创建另一个
    `appsettings.json` 文件，专门用于 `Stage` 环境。因此，我们将设置 `ASPNETCORE_ENVIRONMENT` 变量为 `Stage`
    以应用容器所需的连接字符串。我们可以通过以下方式创建 `appsettings.Stage.json` 文件：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The preceding `appsettings.json` file definition declares the endpoints for
    the `catalog_db`, `catalog-esb`, and `catalog-cache` containers. Every endpoint
    is composed of the name of the container we are going to create, followed by the
    syntax—`<region_name>.azurecontainer.io`. The first part represents the region,
    followed by the subdomain of the service we are using, in our case, `azurecontainer.io`.
    Let''s continue by defining the steps to push our local image into the container
    registry previously created:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的 `appsettings.json` 文件定义了 `catalog_db`、`catalog-esb` 和 `catalog-cache` 容器的端点。每个端点都由我们将要创建的容器的名称，后跟语法——`<region_name>.azurecontainer.io`
    组成。第一部分代表地区，接着是使用服务的子域，在我们的例子中是 `azurecontainer.io`。让我们继续定义将我们的本地镜像推送到之前创建的容器注册表的步骤：
- en: 'Let''s start by authenticating the Azure CLI in the container registry using
    the following command:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们先使用以下命令在容器注册表中验证 Azure CLI：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This should return a Login Succeeded message to the CLI.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该在 CLI 中返回一个登录成功的消息。
- en: 'After that, we can proceed by preparing the Docker image of our service and
    build the image by triggering the following command in the `Catalog.API` folder:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，我们可以通过准备我们的服务 Docker 镜像并触发以下命令在 `Catalog.API` 文件夹中构建镜像来继续：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This instruction creates a new Docker image based on the Dockerfile we already
    have in the project folder. The name of the image will depend on the name specified
    on the `docker-compose.yml` file and `COMPOSE_PROJECT_NAME` specified in the `.env`
    file: if the `COMPOSE_PROJECT_NAME` is `store`, then the command will create an
    image with the `store_catalog_api` name.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这个指令基于我们在项目文件夹中已有的 Dockerfile 创建一个新的 Docker 镜像。镜像的名称将取决于 `docker-compose.yml`
    文件中指定的名称以及 `.env` 文件中指定的 `COMPOSE_PROJECT_NAME`：如果 `COMPOSE_PROJECT_NAME` 是 `store`，那么命令将创建一个名为
    `store_catalog_api` 的镜像。
- en: 'It is possible to verify the resulting image by executing the `docker images`
    command:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以通过执行 `docker images` 命令来验证生成的镜像：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'It is necessary to get the Azure Container Registry server address so that
    we can push the local image to the registry. We can proceed by tagging the container
    that we just created with the server address of the Azure Container Registry we
    created previously:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 必须获取Azure容器注册表服务器的地址，以便我们可以将本地镜像推送到注册表。我们可以通过将我们刚刚创建的容器标记为之前创建的Azure容器注册表的地址来继续操作：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'After tagging the image and using the `docker push` command, Docker will start
    uploading the container into our Azure container repository. Hence, we will be
    able to use our container image in all of the services provided by Azure. This
    upload usually takes some time, depending on the size of the image and the quality
    of your internet connection. When the upload is completed, it is possible to check
    the result by browsing the Container registries section of the Azure portal ([https://portal.azure.com/](https://portal.azure.com/)):'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在标记镜像并使用`docker push`命令后，Docker将开始将容器上传到我们的Azure容器存储库。因此，我们可以在Azure提供的所有服务中使用我们的容器镜像。此上传通常需要一些时间，具体取决于镜像的大小和您的互联网连接质量。上传完成后，可以通过浏览Azure门户的容器注册表部分来检查结果（[https://portal.azure.com/](https://portal.azure.com/))：
- en: '![](img/4ddbea9e-5b47-42b7-81ef-2d5ba99cd8df.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4ddbea9e-5b47-42b7-81ef-2d5ba99cd8df.png)'
- en: In this case, we can see that we have created a container registry called `handsonaspnetcoreacr`
    under the `handsOn` resource group. Eventually, we can choose to create or manage
    the container registry directly from the portal. Now that we've pushed the container,
    we can proceed by configuring ACI.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们可以看到，在`handsOn`资源组下创建了一个名为`handsonaspnetcoreacr`的容器注册表。最终，我们可以选择直接从门户创建或管理容器注册表。现在我们已经推送了容器，我们可以继续配置ACI。
- en: Configuring Azure Container Instances
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Azure容器实例
- en: 'The ACI service by Microsoft Azure provides us with a fast and easy way to
    run containers in the cloud without worrying about the management part of virtual
    machines or having to learn about new tools. This service is designed to be as
    quick as possible and ease the process of getting a container up and running in
    the cloud. Furthermore, it is possible to launch a container by executing a simple
    Azure CLI command, such as the following:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 微软Azure的ACI服务为我们提供了一种快速简便的方式在云中运行容器，无需担心虚拟机的管理部分，也不必学习新的工具。此服务旨在尽可能快速，简化在云中启动和运行容器的过程。此外，可以通过执行简单的Azure
    CLI命令来启动容器，例如以下命令：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The ACI service is the ideal service for testing and running containers in Azure.
    Hence, the ACI service allows us to lower our infrastructure costs by taking advantage
    of *per-second billing*. For that reason, the ACI service is also the favorite
    service for continuous integration and continuous pipeline purposes. The following
    steps show you how to deploy the catalog service on ACI*:*
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: ACI服务是测试和运行Azure中容器的理想服务。因此，ACI服务允许我们通过利用每秒计费来降低基础设施成本。因此，ACI服务也是持续集成和持续管道目的的首选服务。以下步骤显示了如何在ACI上部署目录服务*：
- en: 'Let''s start by creating a new resource group so that we can group our containers.
    Use the following command to do so:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们先创建一个新的资源组，以便我们可以分组我们的容器。使用以下命令来完成此操作：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can proceed by getting the registry username and password of the service
    account of the container registry using the following command:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过以下命令获取容器注册表的注册表用户名和密码，以继续操作：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'After creating the group, we will need to execute the Azure CLI command using
    a Bash script from the GitHub repository called `aci-deploy.sh`:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建组后，我们需要使用GitHub仓库中名为`aci-deploy.sh`的Bash脚本来执行Azure CLI命令：
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The script mostly runs five different instructions for the creation of new
    instances of these containers:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本主要运行五个不同的指令来创建这些容器的新的实例：
- en: It declares information regarding the containers, such as the resource group,
    the names to assign to the containers, and some additional environment variables.
  id: totrans-64
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它声明有关容器的信息，例如资源组、分配给容器的名称以及一些额外的环境变量。
- en: It executes the `az container create` command to create and run `microsoft/mssql-server-linux`.
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它执行`az container create`命令来创建和运行`microsoft/mssql-server-linux`。
- en: It executes the `az container create` instruction to create and run the `rabbitmq:3-management-alpine`
    image, and it uses the `rabbitmq_user` and `rabbitmq_pass` environment variables
    to set the default user for the RabbitMQ instance.
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它执行 `az container create` 指令来创建和运行 `rabbitmq:3-management-alpine` 镜像，并使用 `rabbitmq_user`
    和 `rabbitmq_pass` 环境变量来设置 RabbitMQ 实例的默认用户。
- en: It deploys the Redis cache instance using `redis:alpine`.
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用 `redis:alpine` 部署 Redis 缓存实例。
- en: Finally, it executes `az container create` to create and deploy the `catalog_api`
    image that's already present in the Azure Container Registry repository by specifying
    the registry URL.
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，它通过指定注册表 URL 来创建和部署已存在于 Azure 容器注册表存储库中的 `catalog_api` 镜像。
- en: Please note that the execution order follows the same logic of the dependencies
    of these containers; therefore, the API container is run last.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，执行顺序遵循这些容器依赖项的逻辑；因此，API 容器是最后一个运行的。
- en: Note that, to keep the demo as simple as possible, the `aci-deploy.sh` script
    creates the catalog service container using `--ip-address public`, which means
    that our container can be accessed by anyone. Directly exposing an API without
    any reverse proxy and an API gateway is strongly discouraged in a production environment
    so that you avoid exposing your containers to the outside world.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，为了使演示尽可能简单，`aci-deploy.sh` 脚本使用 `--ip-address public` 创建目录服务容器，这意味着任何人都可以访问我们的容器。在生产环境中，强烈不建议直接暴露
    API 而没有任何反向代理和 API 网关，以避免将容器暴露给外部世界。
- en: 'Now that we''ve executed the script, we can see the result by signing into
    the Azure portal ([https://portal.azure.com/#](https://portal.azure.com/#)) and
    checking our container in the Container instances section:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经执行了脚本，我们可以通过登录到 Azure 门户 ([https://portal.azure.com/#](https://portal.azure.com/#))
    并在容器实例部分检查我们的容器来查看结果：
- en: '![](img/69924149-046e-4903-b729-14b57491cd2b.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/69924149-046e-4903-b729-14b57491cd2b.png)'
- en: 'As you can see, there are four container instances up and running. All of them
    are running on DNS using the `--dns-name-label` parameter and can access each
    other through their addresses. Hence, it is possible to call the container API
    using the address that was generated by our shell script. We can also check the
    statistics and the properties associated with the container by clicking on the
    name of the container:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，有四个容器实例正在运行。它们都在使用 `--dns-name-label` 参数在 DNS 上运行，并且可以通过它们的地址相互访问。因此，可以使用由我们的
    shell 脚本生成的地址调用容器 API。我们还可以通过单击容器的名称来检查与容器相关的统计信息和属性：
- en: '![](img/4a71ce45-9376-4faf-be99-ef3ee41a0a4b.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4a71ce45-9376-4faf-be99-ef3ee41a0a4b.png)'
- en: 'Finally, we can call the health check HTTP route from our browser to verify
    that all of the dependencies are correct:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以从浏览器中调用健康检查的 HTTP 路由来验证所有依赖项是否正确：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The preceding process describes how to deploy the catalog service into the ACI
    product. Although ACI are powerful and easy to deploy, they lack some minimal
    out-of-the-box features, such as SSH, monitoring, and configuration management.
    Therefore, it becomes hard to manage container instances in a production environment.
    In the next section, we will focus on a different hosting process that uses app
    service technologies to host the application called app services. This way of
    working is more focused on the hosting of web applications and web services; therefore,
    it provides a set of tools and features for the monitoring and the configuration
    of the application.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的过程描述了如何将目录服务部署到 ACI 产品中。尽管 ACI 功能强大且易于部署，但它们缺少一些最小化的开箱即用功能，例如 SSH、监控和配置管理。因此，在生产环境中管理容器实例变得困难。在下一节中，我们将关注不同的托管过程，该过程使用应用服务技术来托管名为应用服务的应用程序。这种方式更专注于
    Web 应用程序和 Web 服务的托管；因此，它提供了一套用于监控和配置应用程序的工具和功能。
- en: Configuring app services
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置应用服务
- en: An alternative to ACI is app services. Microsoft Azure recently released a new
    feature so that we can deploy Docker images using **app services**. This kind
    of approach is useful when you want to keep the same environment for your development
    machine and production environment. In contrast to ACI*,* app services provides
    us with a managed way to run our containers. It comes with some out-of-the-box
    features, such as SSL encryption, monitoring, configuration management, remote
    debugging, and application scaling settings. On top of that, app services is strongly
    integrated with other Azure products. Therefore, it is possible to plug other
    services into `catalog-srv` easily. For example, we may choose to run our Azure
    SQL Database solution to set up a fully-managed SQL database for the catalog service.
    Azure SQL provides the broadest SQL Server engine compatibility; it simplifies
    the maintenance process using the SQL tools you prefer.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: ACI的替代方案是应用服务。微软Azure最近发布了一个新功能，使我们能够使用**应用服务**部署Docker镜像。当你想要保持开发机器和生产环境相同的运行环境时，这种方法非常有用。与ACI*相比，应用服务为我们提供了一个管理容器运行的方式。它自带一些开箱即用的功能，例如SSL加密、监控、配置管理、远程调试以及应用扩展设置。除此之外，应用服务与Azure的其他产品紧密集成。因此，将其他服务轻松地连接到`catalog-srv`成为可能。例如，我们可能会选择运行我们的Azure
    SQL数据库解决方案，为目录服务设置一个完全管理的SQL数据库。Azure SQL提供了最广泛的SQL Server引擎兼容性；它使用你偏好的SQL工具简化了维护过程。
- en: As we mentioned previously, it is not easy to integrate persistence data storage
    using Docker without using persistent volumes. For that reason, in this section,
    we will look at an alternative way to store data.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，在不使用持久卷的情况下使用Docker集成持久数据存储并不容易。因此，在本节中，我们将探讨一种存储数据的替代方法。
- en: 'Let''s proceed by creating a new Azure SQL database by using the `azuresql-deploy.sh`
    script in the root folder of the project:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过使用项目根目录中的`azuresql-deploy.sh`脚本创建一个新的Azure SQL数据库来继续操作：
- en: '[PRE13]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the preceding script, the `azuresql-deploy.sh` file creates the logical server
    that hosts the `store` database and the effective database that contains the catalog
    information. First of all, the script proceeds by creating the resource group;
    then, it continues by creating the Azure SQL elements. Since `start-ip` and `end-ip`,
    which are specified in the firewall rules, are both `0.0.0.0`, all of the Azure
    services that are part of that account can connect to the database.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的脚本中，`azuresql-deploy.sh`文件创建了托管`store`数据库和包含目录信息的有效数据库的逻辑服务器。首先，脚本通过创建资源组开始；然后继续创建Azure
    SQL元素。由于防火墙规则中指定的`start-ip`和`end-ip`都是`0.0.0.0`，因此该账户的所有Azure服务都可以连接到数据库。
- en: By doing this, it is possible to connect the previously created `catalog-srv`
    app service to the database.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，可以将之前创建的`catalog-srv`应用服务连接到数据库。
- en: Creating an app service using a container image
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用容器镜像创建应用服务
- en: 'Let''s walk through how to create an app service using the previously published
    image, which is already present in Azure Container Registry, that is, `<registry_name>.azurecr.io/catalog_api:v1`.
    As a first step, we need to create an app service plan using the following command:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步了解如何使用已发布并存在于Azure容器注册表中的镜像创建应用服务，即`<registry_name>.azurecr.io/catalog_api:v1`。作为第一步，我们需要使用以下命令创建一个应用服务计划：
- en: '[PRE14]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The app service plan is required for the creation of the app service: it defines
    a set of computing resources that are used to run all of the app services that
    are part of the same plan. For this example, we will use the most basic service
    plan, which can be specified using the following flag: `--sku FREE`. This plan
    supports up to 10 instances and it does not provide any additional autoscale capability.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 创建应用服务需要应用服务计划：它定义了一组用于运行同一计划中所有应用服务的计算资源。在这个例子中，我们将使用最基本的服务计划，可以使用以下标志指定：`--sku
    FREE`。此计划支持最多10个实例，并且不提供任何额外的自动扩展功能。
- en: 'Now that we''ve created all of the requirements, we can proceed by executing
    the `appservice-deploy.sh` file, which is located in the root of the project:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了所有必需的要求，我们可以通过执行位于项目根目录的`appservice-deploy.sh`文件来继续操作：
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The preceding script creates the web app using the `az webapp create` instruction,
    and after the creation of the app service, it proceeds by executing the `az webapp
    config appsettings set` command to set the right ASP.NET Core environment value.
    Once the script has been executed, we can continue by checking the status of the
    app service in the portal:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的脚本使用 `az webapp create` 指令创建了 Web 应用，并在应用服务创建完成后，通过执行 `az webapp config appsettings
    set` 命令来设置正确的 ASP.NET Core 环境值。一旦脚本执行完毕，我们可以在门户中检查应用服务的状态：
- en: '![](img/59b4576b-52d0-43ac-94ab-20c0bd57bd3a.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/59b4576b-52d0-43ac-94ab-20c0bd57bd3a.png)'
- en: 'Furthermore, we can verify the status of the service by calling the health
    check URL: `http://catalog-api.westeurope.azurecontainer.io/health`.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还可以通过调用健康检查 URL 来验证服务状态：`http://catalog-api.westeurope.azurecontainer.io/health`。
- en: Summary
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we have seen how we can host and run the catalog service project
    in Microsoft Azure. We also learned how to create a private Azure Container Registry
    and how to store the Docker image of the catalog service. Then, we showed you
    some of the patterns you can use to get a custom container into the cloud and
    how to run them using different services offered by the Microsoft Azure cloud
    provider. Finally, we looked at two different approaches to hosting the catalog
    service: using the ACI product and Azure App Service and storing the data using
    the Azure SQL service.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了如何在 Microsoft Azure 中托管和运行目录服务项目。我们还学习了如何创建私有 Azure 容器注册库以及如何存储目录服务的
    Docker 镜像。然后，我们向您展示了您可以使用的一些模式将自定义容器部署到云端，以及如何使用 Microsoft Azure 云提供商提供的服务来运行它们。最后，我们探讨了两种托管目录服务的方法：使用
    ACI 产品和 Azure App Service，以及使用 Azure SQL 服务来存储数据。
- en: In the next chapter, we will learn how to document APIs using the OpenAPI Specification
    by implementing the Swagger framework.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何通过实现 Swagger 框架来使用 OpenAPI 规范来记录 API。
