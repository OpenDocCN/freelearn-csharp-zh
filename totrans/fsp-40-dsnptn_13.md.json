["```cs\nlet f a b = \n    if a < b then \n        a \n    else \n        b \n\n```", "```cs\nlet f' a b = \n    if a < b then \n        a \n\n```", "```cs\nlet f'' (a:'a) b = \n    if a < b then \n        a \n\n```", "```cs\nlet f''' (a:int) b = \n    if a < b then \n        a \n\n```", "```cs\nlet allEmpty  = List.forall ((=) []) \n\n```", "```cs\nlet gr<'a> : 'a list ref = ref [] \ngr := [\"a\"] \nlet x: string list = !gr \nprintfn \"%A\" x \n\n```", "```cs\nlet cr = gr<string> \ncr := [\"a\"] \nlet y = !cr \nprintfn \"%A\" y \n\n```", "```cs\nlet allEmpty xs = List.forall ((=) []) xs // remedy 1 \nlet allEmpty : int list list -> bool  = List.forall ((=) []) \n// remedy 2 \nlet allEmpty = fun x -> List.forall ((=) []) x // remedy 3 \n\n```", "```cs\nlet positive = function \n| x when x > 0 -> true \n| x when x <= 0 -> false \n\n```", "```cs\nlet positive' = function \n| x when x > 0 -> true \n| _ -> false \n\n```", "```cs\ntype TickTack = Tick | Tack \n\nlet ticker x = \n    match x with \n    | Tick -> printfn \"Tick\" \n    | Tock -> printfn \"Tock\" \n    | Tack -> printfn \"Tack\" \nticker Tick \nticker Tack \n\n```", "```cs\nopen System \nopen System.Collections.Generic \nlet size = 1000 \nlet keys = Array.zeroCreate<Guid> size \nlet mutable dictionary : IDictionary<Guid,int> = \n    Unchecked.defaultof<IDictionary<Guid,int>> \nlet generate () = \n    for i in 0..(size-1) do \n        keys.[i] <- Guid.NewGuid() \n    dictionary <- seq { for i in 0..(size-1) -> (keys.[i],i) } |> dict \ngenerate() \nlet trials = 10000000 \nlet rg = Random() \nlet mutable result = 0 \nfor i in 0..trials-1 do \n    result <- dictionary.Item(keys.[rg.Next(size-1)]) \n\n```", "```cs\nlet keys' = Array.zeroCreate<string> size \nlet mutable dictionary' : IDictionary<string,int> = \n    Unchecked.defaultof<IDictionary<string,int>> \nlet generate' () = \n    for i in 0..(size-1) do \n        keys'.[i] <- keys.[i].ToString(\"N\") \n    dictionary' <- seq { for i in 0..(size-1) -> (keys'.[i],i) } |> dict \ngenerate'() \nfor i in 0..trials-1 do \n    result <- dictionary'.Item(keys'.[rg.Next(size-1)]) \n\n```"]