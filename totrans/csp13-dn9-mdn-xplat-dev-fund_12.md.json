["```cs\n@{\n  Layout = \"_MyCustomLayout\"; // File extension is not needed.\n} \n```", "```cs\n    <Project>\n      <PropertyGroup>\n        <ManagePackageVersionsCentrally>true</Man\n    agePackageVersionsCentrally>\n      </PropertyGroup>\n      <ItemGroup Label=\"For EF Core 9.\" >\n        <PackageVersion\n          Include=\"Microsoft.EntityFrameworkCore.Sqlite\"\n          Version=\"9.0.0\" />\n        <PackageVersion\n          Include=\"Microsoft.EntityFrameworkCore.Design\"\n          Version=\"9.0.0\" />\n      </ItemGroup>\n      <ItemGroup Label=\"For unit testing.\">\n        <PackageVersion Include=\"coverlet.collector\"\n          Version=\"6.0.2\" />\n        <PackageVersion Include=\"Microsoft.NET.Test.Sdk\"\n          Version=\"17.12.0\" />\n        <PackageVersion Include=\"xunit\"\n          Version=\"2.9.0\" />\n        <PackageVersion\n          Include=\"xunit.runner.visualstudio\"\n          Version=\"3.0.0\" />\n      </ItemGroup>\n      <ItemGroup Label=\"For Blazor.\">\n        <PackageVersion Include=\n          \"Microsoft.AspNetCore.Components.WebAssembly.Server\"\n          Version=\"9.0.0\" />\n        <PackageVersion Include=\n          \"Microsoft.AspNetCore.Components.WebAssembly\"\n          Version=\"9.0.0\" />\n        <PackageVersion Include=\n    \"Microsoft.AspNetCore.Components.WebAssembly.DevServer\"\n          Version=\"9.0.0\" />\n      </ItemGroup>\n      <ItemGroup Label=\"For web services.\">\n        <PackageVersion\n          Include=\"Microsoft.AspNetCore.OpenApi\"\n          Version=\"9.0.0\" />\n        <PackageVersion\n          Include=\"Microsoft.Extensions.Caching.Hybrid\"\n          Version=\"9.0.0\" />\n      </ItemGroup>\n    </Project> \n    ```", "```cs\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.EntityFrameworkCore.Sqlite\" />\n  <PackageReference Include=\"Microsoft.EntityFrameworkCore.Design\" />\n</ItemGroup> \n```", "```cs\n<ItemGroup>\n  <PackageVersion\n    Include=\"Microsoft.EntityFrameworkCore.Sqlite\"\n    Version=\"9.0.1\" />\n  <PackageVersion\n    Include=\"Microsoft.EntityFrameworkCore.Design\"\n    Version=\"9.0.1\" />\n</ItemGroup> \n```", "```cs\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.EntityFrameworkCore.Sqlite\" />\n  <PackageReference Include=\"Microsoft.EntityFrameworkCore.Design\"\n    VersionOverride=\"9.0.0\" />\n</ItemGroup> \n```", "```cs\n    <ItemGroup>\n      <PackageReference\n        Include=\"Microsoft.EntityFrameworkCore.Sqlite\" />\n      <PackageReference\n        Include=\"Microsoft.EntityFrameworkCore.Design\">\n        <PrivateAssets>all</PrivateAssets>\n        <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n      </PackageReference>\n    </ItemGroup> \n    ```", "```cs\n    sqlite3 Northwind.db -init Northwind4SQLite.sql \n    ```", "```cs\n    dir \n    ```", "```cs\n     Directory: C:\\cs13net9\\ModernWeb\n    Length Name\n    ------ ----\n           Northwind.EntityModels.Sqlite\n       382 Directory.Packages.props\n      1193 ModernWeb.sln\n    557056 Northwind.db\n    480790 Northwind4SQLite.sql \n    ```", "```cs\n    cd Northwind.EntityModels.Sqlite \n    ```", "```cs\n    dotnet ef dbcontext scaffold \"Data Source=../Northwind.db\" Microsoft.EntityFrameworkCore.Sqlite --namespace Northwind.EntityModels --data-annotations \n    ```", "```cs\n    <ItemGroup Label=\"To simplify use of WriteLine.\">\n      <Using Include=\"System.Console\" Static=\"true\" />\n    </ItemGroup>\n    <ItemGroup Label=\"Versions are set at solution-level.\">\n      <PackageReference\n        Include=\"Microsoft.EntityFrameworkCore.Sqlite\" />\n    </ItemGroup>\n    <ItemGroup>\n      <ProjectReference Include=\n        \"..\\Northwind.EntityModels.Sqlite\n    \\Northwind.EntityModels.Sqlite.csproj\" />\n    </ItemGroup> \n    ```", "```cs\n    using static System.Environment;\n    namespace Northwind.EntityModels;\n    public class NorthwindContextLogger\n    {\n      public static void WriteLine(string message)\n      {\n        string folder = Path.Combine(GetFolderPath(\n          SpecialFolder.DesktopDirectory), \"book-logs\");\n        if (!Directory.Exists(folder))\n          Directory.CreateDirectory(folder);\n        string dateTimeStamp = DateTime.Now.ToString(\n          \"yyyyMMdd_HHmmss\");\n        string path = Path.Combine(folder,\n          $\"northwindlog-{dateTimeStamp}.txt\");\n        StreamWriter textFile = File.AppendText(path);\n        textFile.WriteLine(message);\n        textFile.Close();\n      }\n    } \n    ```", "```cs\n    public NorthwindContext(DbContextOptions<NorthwindContext> options)\n      : base(options)\n    {\n    } \n    ```", "```cs\n    protected override void OnConfiguring(\n      DbContextOptionsBuilder optionsBuilder)\n    {\n      if (!optionsBuilder.IsConfigured)\n      {\n        string database = \"Northwind.db\";\n        string dir = Environment.CurrentDirectory;\n        string path = string.Empty;\n        if (dir.EndsWith(\"net9.0\"))\n        {\n          // In the <project>\\bin\\<Debug|Release>\\net9.0 directory.\n          path = Path.Combine(\"..\", \"..\", \"..\", \"..\", database);\n        }\n        else\n        {\n          // In the <project> directory.\n          path = Path.Combine(\"..\", database);\n        }\n        path = Path.GetFullPath(path); // Convert to absolute path.\n        try\n        {\n          NorthwindContextLogger.WriteLine($\"Database path: {path}\");\n        }\n        catch (Exception ex)\n        {\n          WriteLine(ex.Message);\n        }\n        if (!File.Exists(path))\n        {\n          throw new FileNotFoundException(\n            message: $\"{path} not found.\", fileName: path);\n        }\n        optionsBuilder.UseSqlite($\"Data Source={path}\");\n        optionsBuilder.LogTo(NorthwindContextLogger.WriteLine,\n          new[] { Microsoft.EntityFrameworkCore\n            .Diagnostics.RelationalEventId.CommandExecuting });\n      }\n    } \n    ```", "```cs\n    modelBuilder.Entity<Category>(entity =>\n    {\n      entity.Property(e => e. CategoryId).ValueGeneratedNever();\n    }); \n    ```", "```cs\n    entity.Property(product => product.UnitPrice)\n      .HasConversion<double>(); \n    ```", "```cs\n    modelBuilder.Entity<Order>(entity =>\n    {\n      entity.Property(e => e.Freight).HasDefaultValue(0.0M);\n    }); \n    ```", "```cs\n    modelBuilder.Entity<Product>(entity =>\n    {\n      ...\n      entity.Property(e => e.UnitPrice).HasDefaultValue(0.0M); \n    ```", "```cs\n    protected override void OnModelCreating(\n      ModelBuilder modelBuilder)\n    {\n      modelBuilder.Entity<Order>(entity =>\n      {\n        entity.Property(e => e.Freight).HasDefaultValue(0.0M);\n      });\n      modelBuilder.Entity<OrderDetail>(entity =>\n      {\n        entity.Property(e =>\n          e.Quantity).HasDefaultValue((short)1);\n        entity.HasOne(d => d.Order)\n          .WithMany(p => p.OrderDetails)\n          .OnDelete(DeleteBehavior.ClientSetNull);\n        entity.HasOne(d => d.Product)\n          .WithMany(p => p.OrderDetails)\n          .OnDelete(DeleteBehavior.ClientSetNull);\n      });\n      modelBuilder.Entity<Product>(entity =>\n      {\n        entity.Property(e => e.Discontinued)\n          .HasDefaultValue((short)0);\n        entity.Property(e => e.ReorderLevel)\n          .HasDefaultValue((short)0);\n        entity.Property(e => e.UnitPrice)\n          .HasDefaultValue(0.0M);\n        entity.Property(e => e.UnitsInStock)\n          .HasDefaultValue((short)0);\n        entity.Property(e => e.UnitsOnOrder)\n          .HasDefaultValue((short)0);\n        entity.Property(product => product.UnitPrice)\n          .HasConversion<double>();\n      });\n      OnModelCreatingPartial(modelBuilder);\n    } \n    ```", "```cs\n    using Microsoft.EntityFrameworkCore; // To use UseSqlite.\n    using Microsoft.Extensions.DependencyInjection; // To use IServiceCollection.\n    namespace Northwind.EntityModels;\n    public static class NorthwindContextExtensions\n    {\n      /// <summary>\n      /// Adds NorthwindContext to the specified IServiceCollection. Uses the Sqlite database provider.\n      /// </summary>\n      /// <param name=\"services\">The service collection.</param>\n      /// <param name=\"relativePath\">Default is \"..\"</param>\n      /// <param name=\"databaseName\">Default is \"Northwind.db\"</param>\n      /// <returns>An IServiceCollection that can be used to add more services.</returns>\n      public static IServiceCollection AddNorthwindContext(\n        this IServiceCollection services, // The type to extend.\n        string relativePath = \"..\",\n        string databaseName = \"Northwind.db\")\n      {\n        string path = Path.Combine(relativePath, databaseName);\n        path = Path.GetFullPath(path);\n        NorthwindContextLogger.WriteLine($\"Database path: {path}\");\n        if (!File.Exists(path))\n        {\n          throw new FileNotFoundException(\n            message: $\"{path} not found.\", fileName: path);\n        }\n        services.AddDbContext<NorthwindContext>(options =>\n        {\n          // Data Source is the modern equivalent of Filename.\n          options.UseSqlite($\"Data Source={path}\");\n          options.LogTo(NorthwindContextLogger.WriteLine,\n            new[] { Microsoft.EntityFrameworkCore\n              .Diagnostics.RelationalEventId.CommandExecuting });\n        },\n        // Register with a transient lifetime to avoid concurrency\n        // issues in Blazor server-side projects.\n        contextLifetime: ServiceLifetime.Transient,\n        optionsLifetime: ServiceLifetime.Transient);\n        return services;\n      }\n    } \n    ```", "```cs\n`CREATE TABLE \"Orders\" ( ... \"Freight\" \"money\" NULL CONSTRAINT \"DF_Orders_Freight\" DEFAULT (0), ... );` \n```", "```cs\n// SQLite database provider-generated code.\n[Column(TypeName = \"nvarchar (15)\")]\npublic string CategoryName { get; set; } = null!;\n// SQL Server database provider-generated code.\n[StringLength(15)]\npublic string CategoryName { get; set; } = null!; \n```", "```cs\n    \\[Column\\(TypeName = \"(nchar|nvarchar) \\((.*)\\)\"\\)\\] \n    ```", "```cs\n    $0\\n    [StringLength($2)] \n    ```", "```cs\n    // Before:\n    [Column(TypeName = \"datetime\")]\n    public string? BirthDate { get; set; }\n    // After:\n    [Column(TypeName = \"datetime\")]\n    public DateTime? BirthDate { get; set; } \n    ```", "```cs\n    // Before:\n    [Column(TypeName =  \"money\")]\n    public double? Freight { get; set; }\n    // After:\n    [Column(TypeName = \"money\")]\n    public decimal? Freight { get; set; } \n    ```", "```cs\n    **[****Required****]**\n    [Column(TypeName = \"nvarchar (15)\")]\n    [StringLength(15)]\n    public string CategoryName { get; set; } \n    ```", "```cs\n    [Key]\n    [Column(TypeName = \"nchar (5)\")]\n    [StringLength(5)]\n    **[****RegularExpression(****\"[A-Z]{5}\"****)****]**\n    public string CustomerId { get; set; } = null!;\n    **[****Required****]**\n    [Column(TypeName = \"nvarchar (40)\")]\n    [StringLength(40)]\n    public string CompanyName { get; set; } \n    ```", "```cs\n    <ItemGroup>\n     **<!-- change Sqlite to SqlServer** **if** **you prefer -->**\n     **<ProjectReference Include=****\"..\\Northwind.DataContext**\n    **.Sqlite\\Northwind.DataContext.Sqlite.csproj\"** **/>**\n    </ItemGroup> \n    ```", "```cs\n    using Northwind.EntityModels; // To use NorthwindContext.\n    namespace Northwind.UnitTests\n    {\n      public class EntityModelTests\n      {\n        [Fact]\n        public void DatabaseConnectTest()\n        {\n          using NorthwindContext db = new();\n          Assert.True(db.Database.CanConnect());\n        }\n        [Fact]\n        public void CategoryCountTest()\n        {\n          using NorthwindContext db = new();\n          int expected = 8;\n          int actual = db.Categories.Count();\n          Assert.Equal(expected, actual);\n        }\n        [Fact]\n        public void ProductId1IsChaiTest()\n        {\n          using NorthwindContext db = new();\n          string expected = \"Chai\";\n          Product? product = db.Products.Find(keyValues: 1);\n          string actual = product?.ProductName ?? string.Empty;\n          Assert.Equal(expected, actual);\n        }\n      }\n    } \n    ```", "```cs\nDatabase path: C:\\cs13net9\\ModernWeb\\Northwind.db\nDatabase path: C:\\cs13net9\\ModernWeb\\Northwind.db\ndbug: 18/09/2024 14:20:16.712 RelationalEventId.CommandExecuting[20100] (Microsoft.EntityFrameworkCore.Database.Command)\n      Executing DbCommand [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']\n      SELECT \"p\".\"ProductId\", \"p\".\"CategoryId\", \"p\".\"Discontinued\", \"p\".\"ProductName\", \"p\".\"QuantityPerUnit\", \"p\".\"ReorderLevel\", \"p\".\"SupplierId\", \"p\".\"UnitPrice\", \"p\".\"UnitsInStock\", \"p\".\"UnitsOnOrder\"\n      FROM \"Products\" AS \"p\"\n      WHERE \"p\".\"ProductId\" = @__p_0\n      LIMIT 1\nDatabase path: C:\\cs13net9\\ModernWeb\\Northwind.db\ndbug: 18/09/2024 14:20:16.832 RelationalEventId.CommandExecuting[20100] (Microsoft.EntityFrameworkCore.Database.Command)\n      Executing DbCommand [Parameters=[], CommandType='Text', CommandTimeout='30']\n      SELECT COUNT(*)\n      FROM \"Categories\" AS \"c\" \n```"]