["```cs\nint firstvalue = 5; \nint secondvalue = 6;\nstring firststring = \"Hello \";\nstring secondstring = \"World\";\n```", "```cs\n//'+' operator\nConsole.WriteLine(+firstvalue); // output: 5\nConsole.WriteLine(firstvalue + secondvalue); // output: 11\nConsole.WriteLine(firststring + secondstring); // output: Hello World\n//'-' operator\nConsole.WriteLine(-firstvalue); // output: -5\nConsole.WriteLine(firstvalue - secondvalue); // output = -1\n```", "```cs\n//'!' operator\nConsole.WriteLine(!true); \n\n//output : false\n\n//'~' operator\nConsole.WriteLine(\"'~' operator\");\nint digit = 60;\nConsole.WriteLine(\"Number is : {0} and binary form is {1}:\", digit, IntToBinaryString(digit));\nint digit1 = ~digit;\nConsole.WriteLine(\"Number is : {0} and binary form is {1}:\", digit1, Convert.ToString(digit1, 2));\n\n//Output: \nNumber is : 60 and binary form is 111100:\nNumber is : -61 and binary form is 11111111111111111111111111000011\n```", "```cs\n// '++' Operator\nConsole.WriteLine(++firstvalue); // output: 6\n// '--' Operator\nConsole.WriteLine(--firstvalue); // output: 5\n// '++' Operator\nConsole.WriteLine(firstvalue++); // output: 5\nConsole.WriteLine(firstvalue--); // output: 6\n```", "```cs\n// '<' Operator\nConsole.WriteLine(firstvalue < secondvalue); \n// output = true\n\n// '>' Operator\nConsole.WriteLine(firstvalue > secondvalue); \n// output = false\n\n// '>=' Operator\nConsole.WriteLine(secondvalue >= firstvalue); \n// output = true\n\n// '<=' Operator\nConsole.WriteLine(firstvalue <= secondvalue); \n// output = true\n```", "```cs\n//using variables created earlier.\n// '==' Operator\nConsole.WriteLine(secondvalue == firstvalue); // output = false\n// '!=' Operator\nConsole.WriteLine(firstvalue != secondvalue); // output = true\n```", "```cs\npublic static string IntToBinaryString(int number)\n{\n    const int mask = 1;\n    var binary = string.Empty;\n    while (number > 0)\n    {\n        // Logical AND the number and prepend it to the result string\n        binary = (number & mask) + binary;\n        number = number >> 1;\n    }\n    return binary;\n}\n\n// '>>' Operator\nConsole.WriteLine(\"'>>' operator\");\nint number = 9;\nConsole.WriteLine(\"Number is : {0} and binary form is {1}:\", number, IntToBinaryString(number));\nnumber = number >> 1;\nConsole.WriteLine(\"Number is : {0} and binary form is {1}:\", number, IntToBinaryString(number));\n\n//Output: \n//Number is : 9 and binary form is 1001\n//Number is : 4 and binary form is 100\n\n// '<<' Operator\nConsole.WriteLine(\"'<<' operator\");\nConsole.WriteLine(\"Number is : {0} and binary form is {1}:\", number, IntToBinaryString(number));\nnumber = number << 1;\nConsole.WriteLine(\"Number is : {0} and binary form is {1}:\", number, IntToBinaryString(number));\n\n//Output: \n//Number is : 4 and binary form is 100\n//Number is : 8 and binary form is 1000\n```", "```cs\nint firstvalue = 5; \nint secondvalue = 6;\nint? nullvalue = null;\nprivate bool SecondOperand(bool result)\n{\n    Console.WriteLine(\"SecondOperand computed\");\n    return result;\n}\nprivate bool FirstOperand(bool result)\n{\n    Console.WriteLine(\"FirstOperand computed\");\n    return result;\n}\n```", "```cs\n//LOGICAL OR (|)\nConsole.WriteLine((firstvalue > secondvalue) | (firstvalue < secondvalue)); \n// output : true\nConsole.WriteLine((firstvalue < secondvalue) | (firstvalue < secondvalue)); \n// output : true\nConsole.WriteLine((firstvalue < secondvalue) | (firstvalue > secondvalue)); \n// output : true\nConsole.WriteLine((firstvalue > secondvalue) | (firstvalue > secondvalue)); \n// output : false\n```", "```cs\n//LOGICAL AND (&)\nConsole.WriteLine(FirstOperand(true) & SecondOperand(true)); \n// output : FirstOperand computed, SecondOperand computed, true\nConsole.WriteLine(FirstOperand(false) & SecondOperand(true)); \n// output : FirstOperand computed, SecondOperand computed, false\nConsole.WriteLine(FirstOperand(true) & SecondOperand(false)); \n// output : FirstOperand computed, SecondOperand computed, false\nConsole.WriteLine(FirstOperand(false) & SecondOperand(false)); \n// output : FirstOperand computed, SecondOperand computed, false\n```", "```cs\n//CONDITIONAL AND (&&)\nConsole.WriteLine(FirstOperand(true) && SecondOperand(true)); \n// output = FirstOperand computed, SecondOperand computed, true\nConsole.WriteLine(FirstOperand(false) && SecondOperand(true)); \n// output = FirstOperand computed, false\nConsole.WriteLine(FirstOperand(true) && SecondOperand(false)); \n// output = FirstOperand computed, false\nConsole.WriteLine(FirstOperand(false) && SecondOperand(false)); \n// output = FirstOperand computed, false\n```", "```cs\n//CONDITIONAL OR (||)\nConsole.WriteLine(FirstOperand(true) || SecondOperand(true)); \n// output = FirstOperand computed, true\nConsole.WriteLine(FirstOperand(false) || SecondOperand(true)); \n// output = FirstOperand computed, SecondOperand computed, true\nConsole.WriteLine(FirstOperand(true) || SecondOperand(false)); \n// output = FirstOperand computed, true\nConsole.WriteLine(FirstOperand(false) || SecondOperand(false)); \n// output = FirstOperand computed, SecondOperand computed, false \n```", "```cs\n//LOGICAL XOR (^)\nConsole.WriteLine(FirstOperand(true) ^ SecondOperand(true)); \n// output = FirstOperand computed, SecondOperand computed, false\nConsole.WriteLine(FirstOperand(false) ^ SecondOperand(true)); \n// output = FirstOperand computed, SecondOperand computed,true\nConsole.WriteLine(FirstOperand(true) ^ SecondOperand(false)); \n// output = FirstOperand computed, SecondOperand computed,true\nConsole.WriteLine(FirstOperand(false) ^ SecondOperand(false)); \n// output = FirstOperand computed, SecondOperand computed,false\n```", "```cs\n//Null Coalescing (??)\nConsole.WriteLine(nullvalue ?? firstvalue);// output : 5\n\n//Ternary Operator (? :)\nConsole.WriteLine((firstvalue > secondvalue) ? firstvalue : secondvalue);// output : 6\nConsole.WriteLine((firstvalue < secondvalue) ? firstvalue : secondvalue);// output : 5\n```", "```cs\nIf(Boolean expression)\n{\n    Then statements;  //these are executed when Boolean expression is true\n}\nElse\n{\n    Else statements; //these are executed when Boolean expression is false\n}\n```", "```cs\nbool condition = true;\nif (condition) \n{\n    Console.WriteLine(\"Then-Statement executed\");\n}\nelse\n{\n    Console.WriteLine(\"Else-Statement executed\");\n}\n//output: Then-Statement executed\n```", "```cs\nif (condition) \n{\n    Console.WriteLine(\"Then-Statement without an Else executed\");\n}\n//output: Then-Statement without an Else executed\n```", "```cs\nint variable1 = 15;\nint variable2 = 10;\n\nif (variable1 > 10)//Condition 1\n{\n    Console.WriteLine(\"Then-Statement of condition 1 executed\");\n     if (variable2 < 15) //Condition 2\n     {\n          Console.WriteLine(\"Then-Statement of condition 2 executed\");\n     }\n     else\n     {\n          Console.WriteLine(\"Else-Statement of condition 2 executed\");\n     }\n}\nelse\n{\n    Console.WriteLine(\"Then-Statement condition 1 executed\");\n}\n//Output: \nThen-Statement of condition 1 executed\nThen-Statement of condition 2 executed\n```", "```cs\nConsole.Write(\"Enter a character: \");\nchar ch = (char)Console.Read();\nif (ch.Equals('a'))\n{\n    Console.WriteLine(\"The character entered is a vowel and it is 'a'.\");\n}\nelse if (ch.Equals('e'))\n{\n    Console.WriteLine(\"The character entered is a vowel and it is 'e'.\");\n}\nelse if (ch.Equals('i'))\n{\n    Console.WriteLine(\"The character entered is a vowel and it is 'i'.\");\n}\nelse if (ch.Equals('o'))\n{\n    Console.WriteLine(\"The character entered is a vowel and it is 'o'.\");\n}\nelse if (ch.Equals('u'))\n{\n    Console.WriteLine(\"The character entered is a vowel and it is 'u'.\");\n}\nelse\n{\n    Console.WriteLine(\"The character entered is not vowel. It is:\" + ch );\n}\n```", "```cs\nConsole.Write(\"Enter a character: \");\nchar ch1 = (char)Console.Read();\nswitch (ch1)\n{\n    case 'a' :\n    case 'e':\n    case 'i' :\n    case 'o' :\n    case 'u':\n     Console.WriteLine(\"The character entered is a vowel and it is: \" + ch1);\n        break;\n    default:\n        Console.WriteLine(\"The character entered is not vowel and it is: \" + ch1);\n        break;\n}\n```", "```cs\nfor (int i = 1; i <= 10; i++)\n{\n    if (i == 5)\n    {\n        break;\n    }\n    Console.WriteLine(i);\n}\n\n//output:\n1\n2\n3\n4\n```", "```cs\nfor (int i = 1; i <= 10; i++)\n{\n    if (i == 5)\n    {\n        goto  number5;\n    }\n    Console.WriteLine(i);\n}\nnumber5:\n    Console.WriteLine(\"You are here because of Goto Label\");\n//Output\n1\n2\n3\n4\nYou are here because of Goto Label\n\n```", "```cs\nfor (int i = 1; i <= 10; i++)\n{\n    if (i <= 5)\n    {\n        continue;\n    }\n    Console.WriteLine(i);\n}\n//output\n6\n7\n8\n9\n10\n\n```", "```cs\nint intvariable = 0;\n do\n {\n     Console.WriteLine(\"Number is :\" + intvariable);\n     intvariable++;\n\n } while (intvariable < 5);\n\n//Output\nNumber is :0\nNumber is :1\nNumber is :2\nNumber is :3\nNumber is :4\n\n```", "```cs\nfor (initializer; condition; iterator) \n{\n    body\n}\n```", "```cs\nfor (int i = 0; i <= 5; i++)\n{\n    Console.WriteLine(\"Number is :\" + i);\n}\n\n//output\nNumber is :0\nNumber is :1\nNumber is :2\nNumber is :3\nNumber is :4\nNumber is :5\n```", "```cs\nint k;\nint j = 10;\nfor (k = 0, Console.WriteLine(\"Start: j={j}\"); k < j; k++, j--, Console.WriteLine(\"Step: k={k}, j={j}\"))\n{\n    // Body of the loop.\n}\nfor (; ; )\n{\n    // Body of the loop.\n}\n```", "```cs\nList<string> stringlist = new List<string>() { \"One\", \"Two\", \"Three\" };\nforeach (string str in stringlist)\n{\n    Console.WriteLine(\"Element #\"+ str);\n}\n\n//Output:\nElement #One\nElement #Two\nElement #Three\n```", "```cs\nint n = 0;\nwhile (n < 5)\n{\n    Console.WriteLine(n);\n    n++;\n}\n//output\n0\n1\n2\n3\n4\n```"]