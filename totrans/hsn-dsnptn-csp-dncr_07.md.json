["```cs\npublic class InventoryContext : IInventoryContext\n{\n    public InventoryContext()\n    {\n       _books = new ConcurrentDictionary<string, Book>();\n    }\n\n    private readonly static object _lock = new object(); \n\n    private readonly IDictionary<string, Book> _books;\n\n    public Book[] GetBooks()\n    {\n        return _books.Values.ToArray();\n    }\n\n    ...\n}\n```", "```cs\npublic bool AddBook(string name)\n{\n    _books.Add(name, new Book {Name = name});\n    return true;\n}\n\npublic bool UpdateQuantity(string name, int quantity)\n{\n    lock (_lock)\n    {\n        _books[name].Quantity += quantity;\n    }\n\n    return true;\n}\n```", "```cs\npublic class InventoryCommandFactory : IInventoryCommandFactory\n{\n    private readonly IUserInterface _userInterface;\n    private readonly IInventoryContext _context;\n\n    public InventoryCommandFactory(IUserInterface userInterface, IInventoryContext context)\n    {\n        _userInterface = userInterface;\n        _context = context;\n    }\n\n    // GetCommand()\n    ...\n}\n```", "```cs\npublic InventoryCommand GetCommand(string input)\n{\n    switch (input.ToLower())\n    {\n        case \"q\":\n        case \"quit\":\n            return new QuitCommand(_userInterface);\n        case \"a\":\n        case \"addinventory\":\n            return new AddInventoryCommand(_userInterface, _context);\n        case \"g\":\n        case \"getinventory\":\n            return new GetInventoryCommand(_userInterface, _context);\n        case \"u\":\n        case \"updatequantity\":\n            return new UpdateQuantityCommand(_userInterface, _context);\n        case \"?\":\n            return new HelpCommand(_userInterface);\n        default:\n            return new UnknownCommand(_userInterface);\n    }\n}\n```", "```cs\nclass Program\n{\n    private static void Main(string[] args)\n    {\n        IServiceCollection services = new ServiceCollection();\n        ConfigureServices(services);\n        IServiceProvider serviceProvider = services.BuildServiceProvider();\n\n        var service = serviceProvider.GetService<ICatalogService>();\n        service.Run();\n\n        Console.WriteLine(\"CatalogService has completed.\");\n        Console.ReadLine();\n    }\n\n    private static void ConfigureServices(IServiceCollection services)\n    {\n        // Add application services.\n        services.AddTransient<IUserInterface, ConsoleUserInterface>(); \n        services.AddTransient<ICatalogService, CatalogService>();\n        services.AddTransient<IInventoryCommandFactory, InventoryCommandFactory>();\n\n services.AddSingleton<IInventoryContext, InventoryContext>();\n    }\n}\n```", "```cs\nprivate IInventoryContext GetInventoryContext()\n{\n    return new InventoryContext();\n}\n```", "```cs\nprivate IInventoryContext GetInventoryContext()\n{\n    IServiceCollection services = new ServiceCollection();\n    services.AddSingleton<IInventoryContext, InventoryContext>();\n    var provider = services.BuildServiceProvider();\n\n    return provider.GetService<IInventoryContext>();\n}\n```", "```cs\nServiceProvider Services { get; set; }\n\n[TestInitialize]\npublic void Startup()\n{\n    IServiceCollection services = new ServiceCollection();\n    services.AddSingleton<IInventoryContext, InventoryContext>();\n    Services = services.BuildServiceProvider();\n}\n```", "```cs\npublic Task AddBook(string book)\n{\n    return Task.Run(() =>\n    {\n        Assert.IsTrue(Services.GetService<IInventoryContext>().AddBook(book));\n    });\n}\n```", "```cs\npublic static IServiceCollection AddSingleton<TService, TImplementation>(this IServiceCollection services,     Func<IServiceProvider, TImplementation> implementationFactory)\n                where TService : class\n                where TImplementation : class, TService;\n```", "```cs\nusing FlixOne.InventoryManagement.Models;\n\nnamespace FlixOne.InventoryManagement.Repository\n{\n    public interface IInventoryContext : IInventoryReadContext, IInventoryWriteContext { }\n\n    public interface IInventoryReadContext\n    {\n        Book[] GetBooks();\n    }\n\n    public interface IInventoryWriteContext\n    {\n        bool AddBook(string name);\n        bool UpdateQuantity(string name, int quantity);\n    }\n}\n```", "```cs\ninternal class GetInventoryCommand : NonTerminatingCommand\n{\n    private readonly IInventoryReadContext _context;\n    internal GetInventoryCommand(IUserInterface userInterface, IInventoryReadContext context) : base(userInterface)\n    {\n        _context = context;\n    }\n\n    protected override bool InternalCommand()\n    {\n        foreach (var book in _context.GetBooks())\n        {\n            Interface.WriteMessage($\"{book.Name,-30}\\tQuantity:{book.Quantity}\"); \n        }\n\n        return true;\n    }\n}\n```", "```cs\ninternal class AddInventoryCommand : NonTerminatingCommand, IParameterisedCommand\n{\n    private readonly IInventoryWriteContext _context;\n\n    internal AddInventoryCommand(IUserInterface userInterface, IInventoryWriteContext context) : base(userInterface)\n    {\n        _context = context;\n    }\n\n    public string InventoryName { get; private set; }\n\n    ...\n}\n```", "```cs\n/// <summary>\n/// AddInventoryCommand requires name\n/// </summary>\n/// <returns></returns>\npublic bool GetParameters()\n{\n    if (string.IsNullOrWhiteSpace(InventoryName))\n        InventoryName = GetParameter(\"name\");\n    return !string.IsNullOrWhiteSpace(InventoryName);\n}\n\nprotected override bool InternalCommand()\n{\n    return _context.AddBook(InventoryName); \n}\n```", "```cs\npublic class InventoryCommandFactory : IInventoryCommandFactory\n{\n    private readonly IUserInterface _userInterface;\n    private readonly IInventoryContext _context; \n\n    public InventoryCommandFactory(IUserInterface userInterface, IInventoryContext context)\n    {\n        _userInterface = userInterface;\n        _context = context; \n    }\n\n    public InventoryCommand GetCommand(string input)\n    {\n        switch (input.ToLower())\n        {\n            case \"q\":\n            case \"quit\":\n                return new QuitCommand(_userInterface);\n            case \"a\":\n            case \"addinventory\":\n                return new AddInventoryCommand(_userInterface, _context);\n            case \"g\":\n            case \"getinventory\":\n                return new GetInventoryCommand(_userInterface, _context);\n            case \"u\":\n            case \"updatequantity\":\n                return new UpdateQuantityCommand(_userInterface, _context);\n            case \"?\":\n                return new HelpCommand(_userInterface);\n            default:\n                return new UnknownCommand(_userInterface);\n        }\n    }\n}\n```", "```cs\nprivate static void ConfigureServices(IServiceCollection services)\n{\n    // Add application services.\n    ...            \n\n    var context = new InventoryContext();\n services.AddSingleton<IInventoryReadContext, InventoryContext>(p => context);\n services.AddSingleton<IInventoryWriteContext, InventoryContext>(p => context);\n services.AddSingleton<IInventoryContext, InventoryContext>(p => context);\n}\n```", "```cs\npublic static Func<IServiceProvider, Func<string, InventoryCommand>> GetInventoryCommand => \n                                                                            provider => input =>\n{\n    switch (input.ToLower())\n    {\n        case \"q\":\n        case \"quit\":\n            return new QuitCommand(provider.GetService<IUserInterface>());\n        case \"a\":\n        case \"addinventory\":\n            return new AddInventoryCommand(provider.GetService<IUserInterface>(), provider.GetService<IInventoryWriteContext>());\n        case \"g\":\n        case \"getinventory\":\n            return new GetInventoryCommand(provider.GetService<IUserInterface>(), provider.GetService<IInventoryReadContext>());\n        case \"u\":\n        case \"updatequantity\":\n            return new UpdateQuantityCommand(provider.GetService<IUserInterface>(), provider.GetService<IInventoryWriteContext>());\n        case \"?\":\n            return new HelpCommand(provider.GetService<IUserInterface>());\n        default:\n            return new UnknownCommand(provider.GetService<IUserInterface>());\n    }\n};\n```", "```cs\npublic static IServiceCollection AddSingleton<TService, TImplementation>(this IServiceCollection services, Func<IServiceProvider, TImplementation> implementationFactory)\n            where TService : class\n            where TImplementation : class, TService;\n```", "```cs\nFunc<IServiceProvider, TImplementation> implementationFactory\n```", "```cs\nservices.AddSingleton<IInventoryContext, InventoryContext>(provider => new InventoryContext());\n\nservices.AddSingleton<IInventoryContext, InventoryContext>(GetInventoryContext);\n```", "```cs\nstatic Func<IServiceProvider, InventoryContext> GetInventoryContext => provider =>\n{\n    return new InventoryContext();\n};\n```", "```cs\nFunc<IServiceProvider, Func<string, InventoryCommand>>\n```", "```cs\npublic CatalogService(IUserInterface userInterface, Func<string, InventoryCommand> commandFactory)\n{\n    _userInterface = userInterface;\n    _commandFactory = commandFactory;\n}\n```", "```cs\nwhile (!response.shouldQuit)\n{\n    // look at this mistake with the ToLower()\n    var input = _userInterface.ReadValue(\"> \").ToLower();\n    var command = _commandFactory(input);\n\n    response = command.RunCommand();\n\n    if (!response.wasSuccessful)\n    {\n        _userInterface.WriteMessage(\"Enter ? to view options.\");\n    }\n}\n```", "```cs\nServiceProvider Services { get; set; }\n\n[TestInitialize]\npublic void Startup()\n{\n    var expectedInterface = new Helpers.TestUserInterface(\n        new List<Tuple<string, string>>(),\n        new List<string>(),\n        new List<string>()\n    );\n\n    IServiceCollection services = new ServiceCollection();\n    services.AddSingleton<IInventoryContext, InventoryContext>();\n services.AddTransient<Func<string, InventoryCommand>>(InventoryCommand.GetInventoryCommand);\n\n    Services = services.BuildServiceProvider();\n}\n```", "```cs\n[TestMethod]\npublic void QuitCommand_Successful()\n{\n    Assert.IsInstanceOfType(Services.GetService<Func<string, InventoryCommand>>().Invoke(\"q\"),             \n                            typeof(QuitCommand), \n                            \"q should be QuitCommand\");\n\n    Assert.IsInstanceOfType(Services.GetService<Func<string, InventoryCommand>>().Invoke(\"quit\"),\n                            typeof(QuitCommand), \n                            \"quit should be QuitCommand\");\n}\n```", "```cs\npublic abstract class InventoryCommand\n{\n    protected abstract string[] CommandStrings { get; }\n    public virtual bool IsCommandFor(string input)\n    {\n        return CommandStrings.Contains(input.ToLower());\n    } \n}\n```", "```cs\npublic class QuitCommand : InventoryCommand\n{\n    protected override string[] CommandStrings => new[] { \"q\", \"quit\" };\n}\n```", "```cs\npublic class GetInventoryCommand : InventoryCommand\n{\n    protected override string[] CommandStrings => new[] { \"g\", \"getinventory\" };\n}\n\npublic class AddInventoryCommand : InventoryCommand\n{\n    protected override string[] CommandStrings => new[] { \"a\", \"addinventory\" };\n}\n\npublic class UpdateQuantityCommand : InventoryCommand\n{\n    protected override string[] CommandStrings => new[] { \"u\", \"updatequantity\" };\n}\n\npublic class HelpCommand : InventoryCommand\n{\n    protected override string[] CommandStrings => new[] { \"?\" };\n}\n```", "```cs\npublic class UnknownCommand : InventoryCommand\n{\n    protected override string[] CommandStrings => new string[0];\n\n    public override bool IsCommandFor(string input)\n    {\n        return true;\n    }\n}\n```", "```cs\n[TestInitialize]\npublic void Startup()\n{\n    var expectedInterface = new Helpers.TestUserInterface(\n        new List<Tuple<string, string>>(),\n        new List<string>(),\n        new List<string>()\n    );\n\n    IServiceCollection services = new ServiceCollection(); \n    services.AddTransient<InventoryCommand, QuitCommand>();\n    services.AddTransient<InventoryCommand, HelpCommand>(); \n    services.AddTransient<InventoryCommand, AddInventoryCommand>();\n    services.AddTransient<InventoryCommand, GetInventoryCommand>();\n    services.AddTransient<InventoryCommand, UpdateQuantityCommand>();\n    // UnknownCommand should be the last registered\n services.AddTransient<InventoryCommand, UnknownCommand>();\n\n    Services = services.BuildServiceProvider();\n}\n```", "```cs\npublic InventoryCommand GetCommand(string input)\n{\n    return Services.GetServices<InventoryCommand>().First(svc => svc.IsCommandFor(input));\n}\n```", "```cs\n[TestMethod]\npublic void UpdateQuantityCommand_Successful()\n{\n    Assert.IsInstanceOfType(GetCommand(\"u\"), \n                            typeof(UpdateQuantityCommand), \n                            \"u should be UpdateQuantityCommand\");\n\n    Assert.IsInstanceOfType(GetCommand(\"updatequantity\"), \n                            typeof(UpdateQuantityCommand), \n                            \"updatequantity should be UpdateQuantityCommand\");\n\n    Assert.IsInstanceOfType(GetCommand(\"UpdaTEQuantity\"), \n                            typeof(UpdateQuantityCommand), \n                            \"UpdaTEQuantity should be UpdateQuantityCommand\");\n}\n```", "```cs\ninstall-package autofac\n```", "```cs\n[TestInitialize]\npublic void Startup()\n{\n    IServiceCollection services = new ServiceCollection();\n\n    var builder = new ContainerBuilder(); \n\n    // commands\n    ...\n\n    Container = builder.Build(); \n}\n```", "```cs\n// commands\nbuilder.RegisterType<QuitCommand>().Named<InventoryCommand>(\"q\");\nbuilder.RegisterType<QuitCommand>().Named<InventoryCommand>(\"quit\");\nbuilder.RegisterType<UpdateQuantityCommand>().Named<InventoryCommand>(\"u\");\nbuilder.RegisterType<UpdateQuantityCommand>().Named<InventoryCommand>(\"updatequantity\");\nbuilder.RegisterType<HelpCommand>().Named<InventoryCommand>(\"?\");\nbuilder.RegisterType<AddInventoryCommand>().Named<InventoryCommand>(\"a\");\nbuilder.RegisterType<AddInventoryCommand>().Named<InventoryCommand>(\"addinventory\");\nbuilder.RegisterType<GetInventoryCommand>().Named<InventoryCommand>(\"g\");\nbuilder.RegisterType<GetInventoryCommand>().Named<InventoryCommand>(\"getinventory\");\nbuilder.RegisterType<UpdateQuantityCommand>().Named<InventoryCommand>(\"u\");\nbuilder.RegisterType<UpdateQuantityCommand>().Named<InventoryCommand>(\"u\");\nbuilder.RegisterType<UnknownCommand>().As<InventoryCommand>();\n```", "```cs\npublic InventoryCommand GetCommand(string input)\n{\n    return Container.ResolveOptionalNamed<InventoryCommand>(input.ToLower()) ?? \n           Container.Resolve<InventoryCommand>();\n}\n```", "```cs\n[TestMethod]\npublic void QuitCommand_Successful()\n{\n    Assert.IsInstanceOfType(GetCommand(\"q\"), typeof(QuitCommand), \"q should be QuitCommand\");\n    Assert.IsInstanceOfType(GetCommand(\"quit\"), typeof(QuitCommand), \"quit should be QuitCommand\");\n}\n```"]