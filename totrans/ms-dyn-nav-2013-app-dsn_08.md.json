["```cs\nSum(\"Job Planning Line\".\"Quantity (Base)\" \n  WHERE (Job No. = FIELD(Job No.),\n         Job Task No. = FIELD(Job Task No.),\n Job Task No. = FIELD(FILTER(Totaling)),\n         Contract Line = CONST(Yes),\n         Planning Date = FIELD(Planning Date Filter)))\n```", "```cs\nAdd-on No. - OnValidate()\nCASE \"Add-on Type\" OF\n  \"Add-on Type\"::Resource, \"Add-on Type\"::Item, \"Add-on Type\"::\"G/L Account\", \"Add-on Type\"::Text:\n    BEGIN\n      VALIDATE(Type, \"Add-on Type\");\n      VALIDATE(\"No.\", \"Add-on No.\");\n    END;\n  \"Add-on Type\"::\"Resource Group\":\n    BEGIN\n      TESTFIELD(\"Line Type\", \"Line Type\"::Schedule);\n      VALIDATE(Type, Type::Text);\n      VALIDATE(\"No.\", '');\n      ResGroup.GET(\"Add-on No.\");\n      Description := ResGroup.Name;\n      \"Resource Group No.\" := ResGroup.\"No.\";\n      GetJob;\n      ResCost.SETRANGE(Type, \n        ResPrice.Type::\"Group(Resource)\");\n      ResCost.SETRANGE(Code, ResGroup.\"No.\");\n      IF ResCost.FINDFIRST THEN BEGIN\n        \"Unit Cost\" := ROUND(\n            CurrExchRate.ExchangeAmtLCYToFCY(\n              \"Currency Date\",\"Currency Code\",\n              ResCost.\"Unit Cost\",\"Currency Factor\"),\n            UnitAmountRoundingPrecision);\n```", "```cs\nOnInsert()\nCalcSetup.GET;\n\nIF \"No.\" = '' THEN BEGIN\n  CalcSetup.TESTFIELD(\"Calculation Nos.\");\n  NoSeriesMgt.InitSeries(CalcSetup.\"Calculation Nos.\",xRec.\"No. Series\",0D,\"No.\",\"No. Series\");\nEND;\n\n\"Unit Price Hours (LCY)\" := CalcSetup.\"Unit Price Hours\";\nInitLines;\n```", "```cs\nInitLines()\nCalcLn.RESET;\n\ni := 0;\nItem.SETRANGE(\"Calculation Item\", TRUE);\nIF Item.FINDSET THEN REPEAT\n  i += 10000;\n  CalcLn.\"Calculation No.\" := \"No.\";\n  CalcLn.\"Line No.\" := i;\n  CalcLn.VALIDATE(\"Item No.\", Item.\"No.\");\n  CalcLn.INSERT;\nUNTIL Item.NEXT = 0;\n```", "```cs\nCalculate()\nCalcLn.RESET;\nCalcLn.SETRANGE(\"Calculation No.\",\"No.\");\nCalcLn.CALCSUMS(\"Unit Cost\", \"Unit Price\", Profit, Hours);\nCalcLn.FIND('-');\nCalcLn.MODIFYALL(Changed,Calculated::Calculated);\n\nCalcLn.CALCSUMS(\"Unit Cost\", \"Unit Price\", Hours);\n\n\"Unit Cost\" := CalcLn.\"Unit Cost\";\n\"Unit Price\" := CalcLn.\"Unit Price\";\nProfit := \"Unit Price\" - \"Unit Cost\";\nHours := CalcLn.Hours;\n\nCorrect;\n\"Total Price Hours (LCY)\" := \"Hours (After Correction)\" * \"Unit Price Hours (LCY)\";\n\"Total Price\" := \"Total Price Hours (LCY)\" + \n  \"Unit Price (After Correction)\";\nCalculated := Calculated::Calculated;\nMODIFY;\n\nCorrect()\n\"Unit Price (After Correction)\" := \"Unit Price\" + (\"Unit Price\" * (\"Correction % Items\" / 100));\n\"Profit (After Correction)\" := \n  \"Unit Price (After Correction)\" - \"Unit Cost\";\n\"Hours (After Correction)\" := \n  Hours + (Hours * (\"Correction % Hours\" / 100));\n```", "```cs\nAdd-on No. - OnValidate()\nCASE \"Add-on Type\" OF\n  \"Add-on Type\"::Resource ... \"Add-on Type\"::Text:\n      ...\n  \"Add-on Type\"::\"Resource Group\":  \n      ...\n  \"Add-on Type\"::Calculation:\n    BEGIN\n      Calc.GET(\"Add-on No.\");\n      IF Calc.\"Turnover Account No.\" = '' THEN BEGIN\n        TESTFIELD(\"Line Type\", \"Line Type\"::Schedule);\n        VALIDATE(Type, Type::Text);\n        VALIDATE(\"No.\", '');\n      END ELSE BEGIN\n        TESTFIELD(\"Line Type\", \n          \"Line Type\"::\"Both Schedule and Contract\");\n        VALIDATE(Type, Type::\"G/L Account\");\n        VALIDATE(\"No.\", Calc.\"Turnover Account No.\");\n\n      END;\n      Description := Calc.Description;\n      GetJob;\n```", "```cs\nCreateJobTask()\nTESTFIELD(\"Job No.\");\nTESTFIELD(\"Job Task No.\", '');\n\nOldJobTask.SETRANGE(\"Job No.\", \"Job No.\");\nOldJobTask.SETRANGE(\"Job Task Type\", \n  OldJobTask.\"Job Task Type\"::Posting);\nIF OldJobTask.ISEMPTY THEN\n  OldJobTask.SETRANGE(\"Job Task Type\",\n    OldJobTask.\"Job Task Type\"::\"Begin-Total\");\nOldJobTask.FINDLAST;\n\nJobTask.\"Job No.\" := \"Job No.\";\nJobTask.\"Job Task No.\" := INCSTR(OldJobTask.\"Job Task No.\");\nJobTask.Description := Description;\nJobTask.\"Job Task Type\" := JobTask.\"Job Task Type\"::Posting;\nJobTask.INSERT(TRUE);\nCODEUNIT.RUN(CODEUNIT::\"Job Task-Indent Direct\", JobTask);\n\n\"Job Task No.\" := JobTask.\"Job Task No.\";\n```"]