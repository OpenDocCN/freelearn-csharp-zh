["```cs\nusing System;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace Chapter11\n{\n    public class Student\n    {\n        [Required(ErrorMessage = \"Fullname of the student is \n         mandatory\")]\n        [StringLength(100,MinimumLength =5,ErrorMessage =\"Name should \n         have minimum of 5 characters\")]\n        [DataType(DataType.Text)]\n        public string FullName { get; set; }\n\n        [DataType(DataType.EmailAddress)]\n        [EmailAddress]\n        public string EmailAddress { get; set; }\n\n        [DataType(DataType.Date)]\n       [Display(Name =\"Date of Birth\")]\n        public DateTime DOB { get; set; }\n    }\n}\n```", "```cs\nStudent st = new Student();\nst.FullName = \"st1\";\nst.EmailAddress = \"st@st\";\nst.DOB = DateTime.Now;\n\nValidationContext context = new ValidationContext(st, null, null);\nList<ValidationResult> results = new List<ValidationResult>();\nbool valid = Validator.TryValidateObject(st, context, results, true);\nif (!valid)\n{\n    foreach (ValidationResult vr in results)\n    {\n        Console.Write(\"Student class Property Name :{0}\", \n         vr.MemberNames.First());\n        Console.Write(\" :: {0}{1}\", vr.ErrorMessage, \n         Environment.NewLine);\n    }\n}\n```", "```cs\nStudent class Property Name :FullName :: Name should have minimum of 5 characters\nStudent class Property Name :EmailAddress :: The EmailAddress field is not a valid e-mail address.\nPress any key to exit.\n```", "```cs\ninternal class ParseSamples\n    {\n        internal void ProcessBool(string boolValue)\n        {\n            if (bool.Parse(boolValue))\n            {\n                Console.WriteLine($\"Parsed bool value is : \n                 {bool.Parse(boolValue)}\");\n            }\n        }\n\n        internal void ProcessInteger(string intValue)\n        {\n\n            int processedValue =int.MinValue;\n            if (int.TryParse(intValue, out processedValue))\n            {\n                Console.WriteLine($\"Parsed int value is : \n                 {processedValue}\");\n            }\n            else\n            {\n                Console.WriteLine(\"Parsed value is not an integer\");\n            }\n            Console.WriteLine($\"Parsed int value is : \n             {int.Parse(intValue)}\");\n\n```", "```cs\n static void Main(string[] args)\n        {\n            ParseSamples ps = new ParseSamples();\n            switch (args.Length)\n            {\n                case 1:\n                    ps.ProcessBools(args[0]);\n                    break;\n                case 2:\n                    ps.ProcessBools(args[0]);\n                    ps.ProcessIntegers(args[1]);\n                    break;\n                default:\n                    Console.WriteLine(\"Please provide one or two \n                     command line arguments\");\n                    break;\n            }\n\n            // Keep the console window open in debug mode.\n            System.Console.WriteLine(\"Press any key to exit.\");\n            System.Console.ReadKey();\n        }\n```", "```cs\n//Command line argument true\nParsed bool value is : True\nPress any key to exit.\n\n//Command line argument true 11\nParsed bool value is : True\nParsed int value is : 11\nParsed int value is : 11\nPress any key to exit.\n\n//Command line arguments true Madhav\nParsed bool value is : True\nParsed value is not an integer \n```", "```cs\ninternal void ConvertSample()\n{\n    try\n    {\n        string svalue =string.Empty; \n        Console.WriteLine(Convert.ToInt32(svalue));\n    }\n    catch (FormatException fx)\n    {\n        Console.WriteLine(\"Format Exception : \"+fx.Message);\n    }\n    try\n    {\n        double dvalue = 1212121212121212.12;\n        Console.WriteLine(Convert.ToInt32(dvalue));\n    }\n    catch (OverflowException ox)\n    {\n        Console.WriteLine(\"OverFlow Exception : \" + ox.Message);\n    }\n    try\n    {\n        DateTime date= DateTime.Now;\n        Console.WriteLine(Convert.ToDouble(date));\n    }\n    catch (InvalidCastException ix)\n    {\n        Console.WriteLine(\"Invalid cast Exception : \" + ix.Message);\n    }\n    double dvalue1 = 12.22;\n    Console.WriteLine(\"Converted Value : \" + Convert.ToInt32(dvalue1));\n}\n```", "```cs\nFormat Exception : Input string was not in a correct format.\nOverFlow Exception : Value was either too large or too small for an Int32.\nInvalid cast Exception : Invalid cast from 'DateTime' to 'Double'.\nConverted Value : 12\nPress any key to exit.\n```", "```cs\npublic void ReplacePatternText()\n{\n    string pattern = \"(FIRSTNAME\\\\.? |LASTNAME\\\\.?)\";\n\n    string[] names = { \"FIRSTNAME. MOHAN\", \"LASTNAME. KARTHIK\" };\n    foreach(string str in names)\n    {\n        Console.WriteLine(Regex.Replace(str, pattern, String.Empty));\n    }\n\n}\n\npublic void MatchPatternText()\n{\n    string pattern = \"(Madhav\\\\.?)\";\n\n    string names = \"Srinivas Madhav. and Madhav. Gorthi are same\";\n    MatchCollection matColl = Regex.Matches(names, pattern);\n    foreach (Match m in matColl)\n    {\n        Console.WriteLine(m);\n    }\n}\n\npublic void IsMatchPattern()\n{\n    string pattern = @\"^c\\w+\";\n\n    string str = \"this sample is done as part of chapter 11\";\n    string[] items = str.Split(' ');\n    foreach (string s in items)\n    {\n        if (Regex.IsMatch(s, pattern))\n        {\n            Console.WriteLine(\"chapter exists in string str\");\n        }\n    }\n}\n```", "```cs\n//ReplacePatternText method\nMOHAN\n KARTHIK\n\n//MatchPatternText method\nMadhav.\nMadhav.\n\n//IsMatchPattern method\nchapter exists in string str\nPress any key to exit.\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<Students>\n  <student>\n    <FirstName>Student1</FirstName>\n    <LastName>Slast</LastName>\n    <School>School1</School>\n    <DOB>23/10/1988</DOB>\n  </student>\n</Students>\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" >\n  <xs:element name=\"Students\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element name=\"student\">\n          <xs:complexType>\n            <xs:sequence>\n              <xs:element name=\"FirstName\" type=\"xs:string\" />\n              <xs:element name=\"LastName\" type=\"xs:string\" />\n              <xs:element name=\"School\" type=\"xs:string\" />\n              <xs:element name=\"DOB\" type=\"xs:string\" />\n            </xs:sequence>\n          </xs:complexType>\n        </xs:element>\n      </xs:sequence>\n    </xs:complexType>\n  </xs:element>\n</xs:schema>\n```", "```cs\nstatic void LoadXML()\n{\n    var path = new Uri(Path.GetDirectoryName(System.\n     Reflection.Assembly.\n     GetExecutingAssembly().CodeBase)).LocalPath;\n    XmlSchemaSet schema = new XmlSchemaSet();\n    schema.Add(\"\", path + \"\\\\sample.xsd\");\n    XmlReader rd = XmlReader.Create(path + \"\\\\sample.xml\");\n    XDocument doc = XDocument.Load(rd);\n    Console.WriteLine(\"Validating XML\");\n    doc.Validate(schema, ValidationEventHandler);\n    Console.WriteLine(\"Validating XML Completed\");\n}\nstatic void ValidationEventHandler(object sender, \n ValidationEventArgs e)\n{\n    XmlSeverityType type;\n    if (Enum.TryParse<XmlSeverityType>(e.Severity.ToString(), out \n     type))\n    {\n        if (type == XmlSeverityType.Error) throw new \n         Exception(e.Message);\n    }\n}\n```", "```cs\nValidating XML\nValidating XML Completed\nPress any key to exit.\n```", "```cs\npublic class Authors\n{\n   public string AuthorName { get; set; }\n    public string Skills { get; set; }\n    public DateTime DOB { get; set; }\n}\n```", "```cs\nstatic string GetJson()\n{\n    string result = string.Empty;\n    Authors aclass = new Authors() { AuthorName = \"Author1\", Skills = \n     \"C#,Java,SQL\", DOB = DateTime.Now.Date };\n    result = JsonConvert.SerializeObject(aclass);\n    Console.WriteLine($\"JSON object : {result}\");\n    return result;\n}\n```", "```cs\nstatic Authors GetObject(string result)\n{\n    Authors aresult = JsonConvert.DeserializeObject<Authors>(result);\n    Console.WriteLine($\"Name: {aresult.AuthorName}, Skills = \n     {aresult.Skills}, \n    DOB = {aresult.DOB}\");\n    return aresult;\n}\n```", "```cs\nstring result = GetJson();\nAuthors a = GetObject(result);\nstring result1 = string.Concat(result, \"Test\");\nConsole.ReadLine();\nAuthors a1 = GetObject(result1);\n```", "```cs\nJSON object : {\"AuthorName\":\"Author1\",\"Skills\":\"C#,Java,SQL\",\"DOB\":\"2019-03-31T00:00:00+11:00\"}\nName: Author1, Skills = C#,Java,SQL, DOB = 3/31/2019 12:00:00 AM\nPress any key to exit.\n```"]