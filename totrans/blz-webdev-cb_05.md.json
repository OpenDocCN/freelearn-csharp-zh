["```cs\n    builder.Services.AddScoped<Api>();\n    ```", "```cs\n    @page \"/ch05r01/events\"\n    @page \"/ch05r01/events/{eventId:guid}\"\n    ```", "```cs\n    [Inject] private Api Api { get; init; }\n    [Parameter] public Guid EventId { get; set; }\n    ```", "```cs\n    protected IList<Event> Collection = [];\n    protected Event Event;\n    ```", "```cs\n    protected override async Task OnParametersSetAsync()\n    {\n        if (EventId != Guid.Empty)\n        {\n            Event = await Api\n                .GetEventAsync(EventId, default);\n            return;\n        }\n        Collection = await Api.GetEventsAsync(default);\n    }\n    ```", "```cs\n    @if (Event is not null)\n    {\n        <p>Viewing: @Event.Id</p>\n        return;\n    }\n    ```", "```cs\n    @foreach (var item in Collection)\n    {\n        <div class=\"w-100\">\n            <a href=\"/ch05r01/events/@item.Id\">\n                @item.Id\n            </a>\n        </div>\n    }\n    ```", "```cs\n    public class StateContainer<T> { }\n    ```", "```cs\n    private readonly Dictionary<Guid, T> _container = [];\n    ```", "```cs\n    public void Persist(Guid key, T value)\n        => _container.TryAdd(key, value);\n    public T Resolve(Guid key) => _container[key];\n    ```", "```cs\n    builder.Services.AddScoped<StateContainer<Event>>();\n    ```", "```cs\n    internal static class Config\n    {\n        public static readonly IComponentRenderMode\n            PrerenderDisabled = new\n                InteractiveWebAssemblyRenderMode(\n                    prerender: false);\n    }\n    ```", "```cs\n    @page \"/ch05r02\"\n    @rendermode Config.PrerenderDisabled\n    ```", "```cs\n    [Inject]\n    private StateContainer<Event> Container { get; init; }\n    [Inject]\n    private NavigationManager Navigation { get; init; }\n    [Inject]\n    private Api Api { get; init; }\n    ```", "```cs\n    protected IList<Event> Data = [];\n    protected override async Task OnInitializedAsync()\n        => Data = await Api.GetEventsAsync(default);\n    ```", "```cs\n    public void ShowDetails(Event @event)\n    {\n        Container.Persist(@event.Id, @event);\n        Navigation.NavigateTo(\n            $\"/ch05r02/events/{@event.Id}\"\n        );\n    }\n    ```", "```cs\n    @foreach (var item in Data)\n    {\n        <div class=\"row w-50 m-1\">\n            <button @onclick=\"@(() => ShowDetails(item))\">\n                @item.Id\n            </button>\n        </div>\n    }\n    ```", "```cs\n    @page \"/ch05r02/events/{eventId:guid}\"\n    @rendermode Config.PrerenderDisabled\n    ```", "```cs\n    [Inject]\n    private StateContainer<Event> Container { get; init; }\n    [Parameter]\n    public Guid EventId { get; set; }\n    ```", "```cs\n    protected Event Model;\n    protected override void OnParametersSet()\n        => Model = Container.Resolve(EventId);\n    ```", "```cs\n    @if (Model is null) return;\n    It has @Model.Capacity spots left!\n    ```", "```cs\n    public abstract record StateArgs;\n    public record SuccessArgs : StateArgs;\n    public record FailureArgs : StateArgs;\n    ```", "```cs\n    public sealed class StoreState\n    {\n        public event Func<StateArgs, Task> OnChanged;\n        public Task Notify(StateArgs args)\n            => OnChanged?.Invoke(args);\n    }\n    ```", "```cs\n    builder.Services.AddScoped<StoreState>();\n    ```", "```cs\n    @page \"/ch05r03\"\n    @rendermode Config.PrerenderDisabled\n    @implements IDisposable\n    ```", "```cs\n    [Inject] private StoreState State { get; init; }\n    protected string Message = string.Empty;\n    ```", "```cs\n    private Task ReactAsync(StateArgs args)\n    {\n        Message = args is SuccessArgs\n            ? \"Success\"\n            : \"Failure\";\n        return InvokeAsync(StateHasChanged);\n    }\n    ```", "```cs\n    protected override void OnInitialized()\n        => State.OnChanged += ReactAsync;\n    ```", "```cs\n    public void Dispose()\n        => State.OnChanged -= ReactAsync;\n    ```", "```cs\n    <button @onclick=\"@(() =>\n            State.Notify(new SuccessArgs()))\">\n        Buy!\n    </button>\n    <button @onclick=\"@(() =>\n            State.Notify(new FailureArgs()))\">\n        Buy!\n    </button>\n    <p>@Message</p>\n    ```", "```cs\n    public class OverlayState\n    {\n        public event Func<bool, Task> OnChanged;\n        public async Task ExecuteAsync(Func<Task> job)\n        {\n            await OnChanged.Invoke(true);\n            await job.Invoke();\n            await OnChanged.Invoke(false);\n        }\n    }\n    ```", "```cs\n    builder.Services.AddScoped<OverlayState>();\n    ```", "```cs\n    @inject\n        BlazorCookbook.App.Client.Chapters.Chapter05\n        .Recipe04.OverlayState OverlayState\n    ```", "```cs\n    @implements IDisposable\n    ```", "```cs\n    protected bool IsVisible;\n    public Task ReactAsync(bool isVisible)\n    {\n        IsVisible = isVisible;\n        return InvokeAsync(StateHasChanged);\n    }\n    ```", "```cs\n    protected override void OnInitialized()\n        => OverlayState.OnChanged += ReactAsync;\n    ```", "```cs\n    public void Dispose()\n        => OverlayState.OnChanged -= ReactAsync;\n    ```", "```cs\n    <overlay class=\"@(IsVisible ? \"visible\" : \"\")\">\n        Loading...\n    </overlay>\n    ```", "```cs\n    @page \"/ch05r04\"\n    @rendermode InteractiveWebAssembly\n    ```", "```cs\n    [Inject] private Api Api { get; init; }\n    private Task SyncAsync()\n        => OverlayState.ExecuteAsync(()\n            => Api.SynchronizeAsync(default));\n    ```", "```cs\n    <Overlay />\n    <button @onclick=\"@SyncAsync\">\n        Synchronize data\n    </button>\n    ```", "```cs\n@inherits LayoutComponentBase\n<Overlay />\n<main>\n    @Body\n</main>\n```", "```cs\n    window.browserStorage = {\n        set: function (type, key, value) {\n            if (type === 'sessionStorage') {\n                sessionStorage.setItem(key, value);\n            }\n            if (type == 'localStorage') {\n                localStorage.setItem(key, value);\n            }\n        }\n    };\n    ```", "```cs\n    public abstract record StorageValue<T>\n    {\n        public string Key { get; init; }\n        public T Value { get; init; }\n    }\n    ```", "```cs\n    public record LocalStorageValue<T> : StorageValue<T>;\n    public record SessionStorageValue<T> :\n        StorageValue<T>;\n    ```", "```cs\n    public class BrowserStorage\n    {\n        private readonly IJSRuntime _js;\n        public BrowserStorage(IJSRuntime js)\n        {\n            _js = js;\n        }\n    }\n    ```", "```cs\n        private const string\n            _setFunc = \"browserStorage.set\",\n            _local = \"localStorage\",\n            _session = \"sessionStorage\";\n        ```", "```cs\n    public ValueTask PersistAsync<T>(\n        StorageValue<T> @object)\n    {\n        var json = JsonSerializer\n            .Serialize(@object.Value);\n        var storage = @object is LocalStorageValue<T>\n            ? _local : _session;\n        return _js.InvokeVoidAsync(_setFunc,\n            storage, @object.Key, json);\n    }\n    ```", "```cs\n    builder.Services.AddTransient<BrowserStorage>();\n    ```", "```cs\n    @page \"/ch05r05\"\n    @rendermode InteractiveWebAssembly\n    ```", "```cs\n    [Inject] private BrowserStorage Storage { get; init; }\n    private const string _key = \"viewMode\",\n                         _light = \"lightMode\",\n                         _dark = \"darkMode\";\n    ```", "```cs\n    public async Task SetViewModeAsync(string mode)\n    {\n        var value = new LocalStorageValue<string>\n        {\n            Key = _key,\n            Value = mode\n        };\n        await Storage.PersistAsync(value);\n    }\n    ```", "```cs\n    <button @onclick=\"@(() => SetViewModeAsync(_light))\">\n        Turn the light on!\n    </button>\n    <button @onclick=\"@(() => SetViewModeAsync(_dark))\">\n        Turn the light off!\n    </button>\n    ```", "```cs\n    get: function (type, key) {\n        if (type === 'sessionStorage') {\n            return sessionStorage.getItem(key);\n        }\n        if (type === 'localStorage') {\n            return localStorage.getItem(key);\n        }\n        return '';\n    },\n    ```", "```cs\n    private const string _getFunc = \"browserStorage.get\";\n    ```", "```cs\n    public async ValueTask<T> ResolveAsync<T>(\n        StorageValue<T> @object)\n    {\n        var storage = @object is LocalStorageValue<T>\n            ? _local : _session;\n        var value = await _js.InvokeAsync<string>(\n            _getFunc, storage, @object.Key);\n        return JsonSerializer.Deserialize<T>(value);\n    }\n    ```", "```cs\n    protected string ViewMode = string.Empty;\n    protected override async Task\n        OnAfterRenderAsync(bool firstRender)\n    {\n        if (!firstRender) return;\n        var value = new LocalStorageValue<string>\n        {\n            Key = _key\n        };\n        ViewMode = await Storage.ResolveAsync(value);\n        StateHasChanged();\n    }\n    ```", "```cs\n    <p>@ViewMode</p>\n    ```", "```cs\n    public sealed class CartState\n    {\n        public DateTime UpdateTime { get; set; }\n        public void Add() => UpdateTime = DateTime.UtcNow;\n    }\n    ```", "```cs\n    builder.Services\n        .AddCascadingValue(it => new CartState());\n    ```", "```cs\n    @implements IAsyncDisposable\n    @typeparam T\n    ```", "```cs\n    private const string _key = \"state\";\n    [Inject] private BrowserStorage Storage { get; init; }\n    [CascadingParameter] public T State { get; set; }\n    ```", "```cs\n    protected override async Task\n        OnAfterRenderAsync(bool firstRender)\n    {\n        if (!firstRender) return;\n        var value = new SessionStorageValue<T>\n        {\n            Key = $\"{_key}_{State.GetType()}\"\n        };\n        try\n        {\n            State = await Storage.ResolveAsync(value);\n            StateHasChanged();\n        }\n        catch { }\n    }\n    ```", "```cs\n    public ValueTask DisposeAsync()\n    {\n        var value = new SessionStorageValue<T>\n        {\n            Key = $\"{_key}_{State.GetType()}\", \n            Value = State\n        };\n        return Storage.PersistAsync(value);\n    }\n    ```", "```cs\n    @page \"/ch05r07\"\n    @rendermode InteractiveAuto\n    @inherits CrossingInteractiveBoundary<CartState>\n    ```", "```cs\n    <button @onclick=\"@(() => State.Add())\">\n        Add to cart\n    </button>\n    <p>Last cart change: @State.UpdateTime</p>\n    ```"]