["```cs\nAs an IT administrator, I would like to be able to easily review weblog traffic by running a command that takes in the location on my computer of a log file from a server running NGINX. I would also like to store the data in a relational database table for future analysis.\nGIVEN: I have a log file from NGINX on my computer at c:\\temp\\nginx-sample.log AND\nGIVEN: I have opened a PowerShell terminal window in Windows 10 or later AND\nGIVEN: The WebLogReporter program is listed within my computer's PATH environment variable.\nTHEN: I can run the WebLogReporter command, pass the location of the weblog and the path for the output HTML file.\nGIVEN: The program runs without errors.\nTHEN: I am able to view the output HTML file in my favorite browser.\nAcceptance Criteria:\n* It's done when I can run the WebLogReporter program with no arguments and receive instructions.\n* It's done when I can run the WebLogReporter program with two arguments, consisting of the first being a full path to the NGINX log file I wish to analyze and the second being the full path to the output HTML file I would like the program to produce, and I am able to view the output HTML file within my browser.\n* It's done when all the log data are stored in a relational database table so I can query and analyze the data later.\n```", "```cs\n127.0.0.1 - - [16/Jan/2022:04:09:51 +0000] \"GET /api/get_pricing_info/B641F364-DB29-4241-A45B-7AF6146BC HTTP/1.1\" 200 5442 \"-\" \"python-requests/2.25.0\"\n127.0.0.1 - - [16/Jan/2022:04:09:52 +0000] \"GET /api/get_inventory/B641F364-DB29-4241-A45B-7AF6146BC HTTP/1.1\" 200 3007 \"-\" \"python-requests/2.25.0\"\n127.0.0.1 - - [16/Jan/2022:04:09:52 +0000] \"GET /api/get_product_details/B641F364-DB29-4241-A45B-7AF6146BC HTTP/1.1\" 200 3572 \"-\" \"python-requests/2.25.0\"\n```", "```cs\nusing System.Globalization;\nnamespace WebLogReporter\n{\n  public class NginxLogEntry\n  {\n     //TODO:  the rest of the code will go here\n  }\n}\n```", "```cs\n    public enum HTTPVerbs { GET, POST, PUT, DELETE }\n    public string ServerIPAddress { get; set; }\n    public DateTime RequestDateTime { get; set; }\n    public HTTPVerbs Verb { get; set; }\n    public string Route { get; set; }\n    public int ResponseCode { get; set; }\n    public int SizeInBytes { get; set; }\n    public string RequestingAgent { get; set; }\n```", "```cs\n    public NginxLogEntry(String LogLine)\n    {\n```", "```cs\n      var parts = LogLine.Split(' ');\n```", "```cs\n      if(parts.Length < 12)\n      {\n        Console.WriteLine(LogLine);\n      }\n```", "```cs\n      ServerIPAddress = parts[0];\n```", "```cs\n      var rawDateTime = parts[3].Split(' ')[0].Substring(1).Trim();\n      RequestDateTime = DateTime.ParseExact(rawDateTime, \"dd/MMM/yyyy:HH:mm:ss\", CultureInfo.InvariantCulture);\n```", "```cs\n      var rawVerb = parts[5].Trim().Substring(1); \n      Verb = (HTTPVerbs)Enum.Parse(typeof(HTTPVerbs), rawVerb); \n```", "```cs\n      Route = parts[6].Trim();\n      ResponseCode = int.Parse(parts[8].Trim());\n      SizeInBytes = int.Parse(parts[9].Trim());\n```", "```cs\n      RequestingAgent = parts[11].Replace(\"\\\"\", null);\n    }\n```", "```cs\n    public NginxLogEntry(string serverIPAddress, DateTime \n    requestDateTime, string verb, string route, int \n    responseCode, int sizeInBytes, string requestingAgent)\n    {\n      RequestDateTime = requestDateTime;\n      Verb = (HTTPVerbs)Enum.Parse(typeof(HTTPVerbs), \n              verb);\n      Route = route;\n      ResponseCode = responseCode;\n      SizeInBytes = sizeInBytes;\n      RequestingAgent = requestingAgent;\n    }\n  }\n}\n```", "```cs\nCREATE TABLE [dbo].[WebLogEntries](\n    [id] [int] IDENTITY(1,1) NOT NULL,\n    [ServerIPAddress] [varchar](15) NULL,\n    [RequestDateTime] [datetime] NULL,\n    [Verb] [varchar](10) NULL,\n    [Route] [varchar](255) NULL,\n    [ResponseCode] [int] NULL,\n    [SizeInBytes] [int] NULL,\n    [RequestingAgent] [varchar](255) NULL,\n    [DateEntered] [datetime] NOT NULL,\n    CONSTRAINT [PK_WebLogEntries] PRIMARY KEY CLUSTERED \n(\n    [id] ASC\n)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, \n      IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, \n      ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = \n      OFF) ON [PRIMARY]\n) ON [PRIMARY]\n```", "```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\nusing System.Data.SqlClient;\n```", "```cs\nnamespace WebLogReporter\n{\n  public class SQLServerStorage\n  {\n      //TODO:  the rest of the code goes here\n  }\n}\n```", "```cs\n    public void StoreLogLine(NginxLogEntry entry)\n    {\n```", "```cs\n      using (SqlConnection con = new \n             SqlConnection(\"Server=Localhost;Database=\n                           WebLogReporter;User \n                           Id=SA;Password=P@ssw0rd;\"))\n      {\n```", "```cs\n       var sql = new StringBuilder(\"INSERT INTO \n                [dbo].[WebLogEntries] (ServerIPAddress, \n                RequestDateTime, Verb, Route, ResponseCode, \n                SizeInBytes, RequestingAgent) VALUES (\");\n        sql.Append(\"'\" + entry.ServerIPAddress + \"',\");\n        sql.Append(\"'\" + entry.RequestDateTime + \"', \");\n        sql.Append(\"'\" + entry.Verb + \"', \");\n        sql.Append(\"'\" + entry.Route + \"', \");\n        sql.Append(entry.ResponseCode.ToString() + \", \");\n        sql.Append(entry.SizeInBytes.ToString() + \", \");\n        sql.Append(\"'\" + entry.RequestingAgent + \"')\");\n```", "```cs\n        con.Open();\n\n        using(SqlCommand cmd = con.CreateCommand())\n        {\n          cmd.CommandText = sql.ToString();\n          cmd.CommandType = System.Data.CommandType.Text;\n          cmd.ExecuteNonQuery();\n        }\n\n      }\n    }\n```", "```cs\n    public List<NginxLogEntry> RetrieveLogLines()\n    {\n```", "```cs\n      var logLines = new List<NginxLogEntry>();\n      var sql = \"SELECT * FROM WebLogEntries\";\n```", "```cs\n      using (SqlConnection con = new \n            SqlConnection(\"Server=Localhost;Database=\n            WebLogReporter;User Id=SA;Password=P@ssw0rd;\"))\n      {\n        SqlCommand cmd = new SqlCommand(sql, con);\n        con.Open();\n        SqlDataReader reader = cmd.ExecuteReader();\n```", "```cs\n        while (reader.Read())\n        {\n          var serverIPAddress = reader.GetString(1);\n          var requestDateTime = reader.GetDateTime(2);\n          var verb = reader.GetString(3);\n          var route = reader.GetString(4);\n          var responseCode = reader.GetInt32(5);\n          var sizeInBytes = reader.GetInt32(6);\n          var requestingAgent = reader.GetString(7);\n          var line = new NginxLogEntry(serverIPAddress, \n                     requestDateTime, verb, route, \n                     responseCode, sizeInBytes, \n                     requestingAgent);\n```", "```cs\n          logLines.Add(line);\n        }\n      }\n      return logLines;\n    }\n  }\n}\n```", "```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nnamespace WebLogReporter\n{\n  public class Report\n  {\n      //TODO: the rest of your code goes here\n  }\n```", "```cs\n    public void GenerateReport(string OutputPath)\n    {\n```", "```cs\nvar database = new SQLServerStorage();\nvar logLines = database.RetrieveLogLines();\n```", "```cs\n      var output = new \n                   StringBuilder(\"<html><head><title>Web \n                   Log Report</title></head><body>\");\n      output.Append(\"<table><tr><th>Request \n                     Date</th><th>Verb</th><th>Route</th>\n                     <th>Code</th><th>Size</th><th>Agent\n                     </th></tr>\");\n      foreach (var logLine in logLines)\n      {\n        output.Append(\"<tr>\");\n        output.Append(\"<td>\" + \n            logLine.RequestDateTime.ToString() + \"</td>\");\n        output.Append(\"<td>\" + logLine.Verb + \"</td>\");\n        output.Append(\"<td>\" + logLine.Route + \"</td>\");\n        output.Append(\"<td>\" + \n            logLine.ResponseCode.ToString() + \"</td>\");\n        output.Append(\"<td>\" + \n            logLine.SizeInBytes.ToString() + \"</td>\");\n        output.Append(\"<td>\" + \n            logLine.RequestingAgent.ToString() + \"</td>\");\n        output.Append(\"</tr>\");\n      }\n      output.Append(\"</table></body></html>\");\n```", "```cs\n     File.WriteAllText(OutputPath, output.ToString());\n    }\n  }\n}\n```", "```cs\nusing WebLogReporter;\n```", "```cs\nif (args.Length < 2)\n{\n  Console.WriteLine(\"You must supply a path to the log file \n    you want to parse as well as a path for the output.\");\n  Console.WriteLine(@\"For example: WebLogReporter \n    c:\\temp\\nginx-sample.log c:\\temp\\report.xhtml\");\n  Environment.Exit(1);\n}\n```", "```cs\nif (!File.Exists(args[0]))\n{\n  Console.WriteLine(\"The path \" + args[0] + \" is not a \n    valid log file.\");\n  Environment.Exit(1);\n}\n```", "```cs\nvar logFileName = args[0];\nvar outputFile = args[1];\nConsole.WriteLine(\"Processing log: \" + logFileName);\nint lineCounter = 0;\n```", "```cs\nvar database = new SQLServerStorage();\n```", "```cs\nforeach(string line in \n        System.IO.File.ReadLines(logFileName))\n{\n  lineCounter++;\n  try\n  {\n    var logLine = new NginxLogEntry(line);\n    database.StoreLogLine(logLine);\n  }\n  catch \n  { \n    Console.WriteLine(\"Problem on line \" + lineCounter); \n  }\n}\n```", "```cs\nvar report = new Report();\nreport.GenerateReport(outputFile);\nConsole.WriteLine(\"Processed \" + lineCounter + \" log \n                  lines.\");\n```"]