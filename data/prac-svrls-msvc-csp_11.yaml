- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: The Car Sharing App
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 汽车共享应用
- en: The Car Sharing app was introduced in [*Chapter 2*](Chapter_2.xhtml#_idTextAnchor038),
    *Demystifying Microservices Applications*. Regardless of the technology used to
    implement it, any microservice is either processing a user interface request,
    processing a message from another microservice, or streaming a result to the communication
    bus defined for the solution. Therefore, we decided to dedicate a chapter to provide
    you with more details about it. The idea of putting the description of the entire
    solution into one chapter is to help you better understand the principles that
    we have covered throughout the book. Let’s now understand the general architecture
    of the app.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 汽车共享应用在[*第 2 章*](Chapter_2.xhtml#_idTextAnchor038)，“揭秘微服务应用”中介绍。无论使用什么技术实现，任何微服务要么处理用户界面请求，要么处理来自其他微服务的消息，或者将结果流式传输到为解决方案定义的通信总线。因此，我们决定用一章来提供更多关于它的详细信息。将整个解决方案的描述放入一章的目的是帮助您更好地理解我们在整本书中涵盖的原则。现在让我们了解应用的一般架构。
- en: General architecture description
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一般架构描述
- en: 'The application that we will describe in more detail in this chapter is the
    Car Sharing app. The following figure presents the entire solution and the microservices
    involved in enabling the solution:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将更详细地描述的应用是汽车共享应用。以下图展示了整个解决方案以及实现该解决方案所涉及的微服务：
- en: '![Figure 11.1: Car Sharing app](img/B31916_11_1.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.1：汽车共享应用](img/B31916_11_1.png)'
- en: 'Figure 11.1: Car Sharing app'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.1：汽车共享应用
- en: In [*Chapter 7*](Chapter_7.xhtml#_idTextAnchor151), *Microservices in Practice*,
    we described some messages of this demo that are exchanged between the microservices.
    All classes that implement these messages are included in the `SharedMessages`
    library project presented in the demo code. It is important to mention that all
    microservices must add this library to facilitate communication between the services.
    It is also worth noting that RabbitMQ is the message broker defined for this demonstration,
    which has already been presented in the book.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第 7 章*](Chapter_7.xhtml#_idTextAnchor151)，“微服务实践”中，我们描述了此演示中微服务之间交换的一些消息。实现这些消息的所有类都包含在演示代码中展示的
    `SharedMessages` 库项目中。重要的是要提到，所有微服务都必须添加此库以方便服务之间的通信。还值得注意的是，RabbitMQ 是为此次演示定义的消息代理，这已在书中介绍过。
- en: Microservices involved
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 涉及的微服务
- en: As you can see in the preceding figure, there are five microservices designed
    to demonstrate the solution. There is also a service that simply deploys the user
    interface using Blazor as the basis (Blazor UI). Its purpose is to host the user
    interface that interacts with the following microservices via HTTP and RabbitMQ
    where applicable.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如前图所示，有五个微服务旨在演示该解决方案。还有一个服务仅使用 Blazor 作为基础（Blazor UI）部署用户界面。其目的是托管与以下微服务通过
    HTTP 和 RabbitMQ（如有适用）交互的用户界面。
- en: Authorization microservice
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 授权微服务
- en: In [*Chapter 10*](Chapter_10.xhtml#_idTextAnchor297), *Security and Observability
    for Serverless and Microservices Applications*, we discussed the importance of
    implementing security with different layers of protection. The **Authorization**
    microservice is one of these layers, and it handles user logins and bearer token
    emissions. It also contains user information. It intercepts the route extension-accepted
    message of each car sharer and allows the users whose requests were accepted to
    access the car-sharer profile. The user who needs to car share can access the
    user profile of a car sharer who accepted their request by providing the route
    ID of the route it was accepted in.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第 10 章*](Chapter_10.xhtml#_idTextAnchor297)，“无服务器和微服务应用的安全和可观察性”，我们讨论了实施具有不同保护层的安全性的重要性。**授权**微服务是这些层之一，它处理用户登录和承载令牌的发放。它还包含用户信息。它拦截每个汽车共享者的路由扩展-接受消息，并允许请求被接受的用户访问汽车共享者资料。需要汽车共享的用户可以通过提供接受该请求的路由
    ID 来访问接受其请求的汽车共享者的用户资料。
- en: 'To implement this, the ASP.NET Core Web API was used. The same bearer token
    will be required for all endpoints. These are the endpoints proposed for this
    microservice:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，使用了 ASP.NET Core Web API。所有端点都需要相同的承载令牌。以下是为此微服务提出的端点：
- en: '**Login** – Accepts credentials and returns a JWT'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**登录** – 接受凭据并返回 JWT'
- en: '**Renew** – Accepts a token and returns a renewed JWT'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**续订** – 接受令牌并返回更新的 JWT'
- en: '**Change Password** – Accepts current and new passwords to update user credentials'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更改密码** – 接受当前密码和新密码以更新用户凭据'
- en: '**Reset Password** – Sends a temporary password to the user’s email'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重置密码** – 向用户的电子邮件发送临时密码'
- en: '**Add User** – Registers a new user'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**添加用户** – 注册新用户'
- en: '**User Profile** – Provides user’s email and name for matched car-sharing trips'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户资料** – 为匹配的共享汽车行程提供用户的电子邮件和姓名'
- en: The purpose of managing user login, password updates, and token generation is
    common to all applications. It is worth noting that, in the real world, many solutions
    will decide to have this service done by **identity providers** from Microsoft,
    Google, or Meta.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 管理用户登录、密码更新和令牌生成的目的是所有应用程序的共同点。值得注意的是，在现实世界中，许多解决方案将决定由 Microsoft、Google 或 Meta
    的身份提供者来完成这项服务。
- en: CarSharer microservice
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CarSharer 微服务
- en: The **CarSharer** microservice interacts with the Blazor UI and contains the
    web API that implements all car-sharer operations. The car sharer inserts an initial
    route containing their departure and destination towns and possible intermediary
    towns.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**CarSharer** 微服务与 Blazor UI 交互，并包含实现所有共享汽车操作的 Web API。共享汽车者插入一个包含他们的出发地和目的地城镇以及可能的中间城镇的初始路线。'
- en: 'Then, they receive possible matchings with car-sharing requests by the `RoutesPlanning`
    microservice. Accordingly, it shows all possible extensions, and the car sharer
    can reject or accept each extension. They can also close the route, meaning they
    reach an acceptable number of people for the trip. Here, you have the routes imagined
    for the scenario of this sample:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，他们通过 `RoutesPlanning` 微服务接收可能的共享汽车请求匹配。相应地，它显示了所有可能的扩展，共享汽车者可以拒绝或接受每个扩展。他们还可以关闭路线，这意味着他们达到了可接受的旅行人数。在这里，您可以看到为这个示例场景想象的路线：
- en: '**Create Route** – Creates a new route with the date and all towns’ milestones'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建路线** – 使用日期和所有城镇的里程碑创建新的路线'
- en: '**Delete Route** – Removes a specific route'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**删除路线** – 删除特定的路线'
- en: '**Close Route** – Closes a route to prevent further matching'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关闭路线** – 关闭路线以防止进一步的匹配'
- en: '**Extend Route** – Accepts user requests to an existing route'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**扩展路线** – 接受对现有路线的用户请求'
- en: '**Get Suggested Extensions** – Lists compatible ride requests for a route'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**获取建议的扩展** – 列出与路线兼容的行程请求'
- en: '**Get Active Routes** – Lists all active (not expired or deleted) routes for
    a specific user'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**获取活跃路线** – 列出特定用户的全部活跃（未过期或删除）路线'
- en: Considering this is essentially a CRUD operation, this microservice can be implemented
    using Azure Functions, as we discussed in [*Chapter 4*](Chapter_4.xhtml#_idTextAnchor105),
    *Azure Functions and Triggers Available*.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这本质上是一个 CRUD 操作，这个微服务可以使用 Azure Functions 实现，正如我们在 [*第 4 章*](Chapter_4.xhtml#_idTextAnchor105)
    中讨论的，*可用的 Azure Functions 和触发器*。
- en: CarRequests microservice
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CarRequests 微服务
- en: 'The **CarRequests** microservice also interacts with the Blazor UI. It contains
    the web API that implements all car ride request operations. Requests to go from
    a source to a destination are inserted by the user. Then, the user can verify
    whether a car sharer inserted their request in their request. When a car sharer
    accepts the request, no other car sharer can select it, so just one option is
    handled. We assume that the user automatically accepts the car-sharer proposal.
    Here, we have the endpoints for this implementation:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**CarRequests** 微服务也与 Blazor UI 交互。它包含实现所有汽车行程请求操作的 Web API。用户插入从起点到目的地的请求。然后，用户可以验证共享汽车者是否在他们的请求中插入了请求。当共享汽车者接受请求时，其他共享汽车者无法选择它，因此只处理一个选项。我们假设用户自动接受共享汽车者的提议。在这里，我们有这个实现的端点：'
- en: '**Add New Request** – Inserts a ride request with source, destination, and
    date. It is important to have confirmation of whether the request has been registered
    or not.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**添加新请求** – 插入一个包含起点、目的地和日期的行程请求。确认请求是否已注册非常重要。'
- en: '**Get My Requests** – Lists active requests with matching car-sharer options.
    Matching routes also contain the car owner’s details, which can be used to get
    user information from the authentication server.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**获取我的请求** – 列出带有匹配共享汽车选项的活跃请求。匹配的路线还包含车主的详细信息，可用于从身份验证服务器获取用户信息。'
- en: The Azure Functions technology here is, again, a good option.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，Azure Functions 技术再次是一个不错的选择。
- en: RoutesPlanning microservice
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: RoutesPlanning 微服务
- en: The **RoutesPlanning** microservice matches car-sharer routes with car requests
    according to a distance minimization criterion. Its behavior is fully described
    in [*Chapter 7*](Chapter_7.xhtml#_idTextAnchor151), *Microservices in Practice*,
    and the technology used here is the ASP.NET Core Web API. To facilitate the understanding,
    the code that implements it is also available in this chapter.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**RoutesPlanning** 微服务根据最小化距离标准将拼车者的路线与车辆请求相匹配。其行为在 [*第7章*](Chapter_7.xhtml#_idTextAnchor151)
    的 *实践中的微服务* 中完全描述，这里使用的技术是 ASP.NET Core Web API。为了便于理解，实现它的代码也包含在本章中。'
- en: Email microservice
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 电子邮件微服务
- en: 'To finish, the **Email** microserviceintercepts the route extension-accepted
    event emitted by a car sharer and informs all users included in the route that
    they were included via email. It works in the background, as we checked some implementations
    in [*Chapter 5*](Chapter_5.xhtml#_idTextAnchor122), *Background Functions in Practice*.
    The route extension-accepted event emitted contains `UserBasicInfoMessage`, where
    the user’s `DisplayName` in the example is supposed to be the email. These are
    the functions that will be executed in this microservice:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，**Email** 微服务拦截由拼车者发出的路线扩展接受事件，并通过电子邮件通知路线中包含的所有用户。它作为后台工作，正如我们在 [*第5章*](Chapter_5.xhtml#_idTextAnchor122)
    中检查的一些实现，*实践中的后台函数*。发出的路线扩展接受事件包含 `UserBasicInfoMessage`，其中示例中的用户 `DisplayName`
    应该是电子邮件。这些是在此微服务中将要执行的功能：
- en: Listen to the `RouteExtensionAccepted` event and enqueue a request for sending
    an email
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 监听 `RouteExtensionAccepted` 事件并将请求入队以发送电子邮件
- en: Process email, which is the routine that will dequeue the requests and send
    the email
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 处理电子邮件，这是将请求出队并发送电子邮件的常规操作
- en: The Azure Functions technology will be also used in this case. The idea of the
    microservice is not to have the processing of the emails attached directly to
    the listening event. That is why a queue is being used.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Functions 技术也将用于此案例。微服务的理念不是将电子邮件处理直接附加到监听事件上。这就是为什么使用队列的原因。
- en: The demonstration code
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 演示代码
- en: You can find the sample code for this chapter at [https://github.com/PacktPublishing/Practical-Serverless-and-Microservices-with-Csharp/tree/main/ch11](https://github.com/PacktPublishing/Practical-Serverless-and-Microservices-with-Csharp/tree/main/ch11).
    This chapter will require, at least, the Visual Studio 2022 free *Community Edition*.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此章节的示例代码在 [https://github.com/PacktPublishing/Practical-Serverless-and-Microservices-with-Csharp/tree/main/ch11](https://github.com/PacktPublishing/Practical-Serverless-and-Microservices-with-Csharp/tree/main/ch11)。此章节至少需要
    Visual Studio 2022 的免费 *Community Edition*。
- en: Please note that the provided code is not fully functional. You, as the reader,
    are encouraged to further develop it. Its main purpose is to offer a foundation
    for implementing different microservice approaches in a specific use case.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，提供的代码并非完全功能。作为读者的您被鼓励进一步开发它。其主要目的是为在特定用例中实现不同的微服务方法提供一个基础。
- en: 'The following table summarizes the list of microservices proposed:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格总结了提出的微服务列表：
- en: '| **Microservice** | **Technology** | **Key Responsibility** | **API/Event
    Highlights** |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| **微服务** | **技术** | **主要责任** | **API/事件亮点** |'
- en: '| --- | --- | --- | --- |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `Authorization` | ASP.NET Core Web API | Manage user auth and profiles |
    `Login`, `Renew`, `AddUser`, `GetProfile` |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `Authorization` | ASP.NET Core Web API | 管理用户认证和配置文件 | `Login`, `Renew`,
    `AddUser`, `GetProfile` |'
- en: '| `CarSharer` | Azure Functions | Manage car owner routes | `CreateRoute`,
    `ExtendRoute`, `GetSuggestions` |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `CarSharer` | Azure Functions | 管理车主路线 | `CreateRoute`, `ExtendRoute`, `GetSuggestions`
    |'
- en: '| `CarRequest` | Azure Functions | Manage ride requests from users | `AddRequest`,
    `GetRequests` |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `CarRequest` | Azure Functions | 管理用户出行请求 | `AddRequest`, `GetRequests` |'
- en: '| `RoutesPlanning` | ASP.NET Core Web API | Suggest optimal route-request matches
    | Event-driven logic, covered in [*Chapter 7*](Chapter_7.xhtml#_idTextAnchor151)
    |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `RoutesPlanning` | ASP.NET Core Web API | 建议最佳路线请求匹配 | 事件驱动逻辑，见 [*第7章*](Chapter_7.xhtml#_idTextAnchor151)
    |'
- en: '| `Email` | Azure Functions | Notify users via email | `RouteExtensionAccepted`
    → Queue → Email |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `Email` | Azure Functions | 通过电子邮件通知用户 | `RouteExtensionAccepted` → 队列 →
    电子邮件 |'
- en: 'A SQL instance accepts TCP/IP requests and user/password authentication since
    it must communicate with clients running inside Docker containers. Please note
    that the SQL instance that comes with the Visual Studio installation doesn’t support
    TCP/IP, so you need either to install SQL Server Express or use a cloud instance.
    For local installation, both the installer and instructions are available here:
    [https://www.microsoft.com/en-US/download/details.aspx?id=104781](https://www.microsoft.com/en-US/download/details.aspx?id=104781).
    You may also run the SQL Server development edition as a Docker image with the
    following:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 SQL 实例必须与运行在 Docker 容器内的客户端进行通信，因此它接受 TCP/IP 请求和用户/密码认证。请注意，随 Visual Studio
    安装提供的 SQL 实例不支持 TCP/IP，因此您需要安装 SQL Server Express 或使用云实例。对于本地安装，安装程序和说明文档都可在以下链接找到：[https://www.microsoft.com/en-US/download/details.aspx?id=104781](https://www.microsoft.com/en-US/download/details.aspx?id=104781)。您还可以使用以下命令将
    SQL Server 开发版作为 Docker 镜像运行：
- en: '[PRE0]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The username corresponding to the chosen password will be `sa`.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对应于所选密码的用户名将是 `sa`。
- en: To run Docker, use **Docker Desktop** for Windows ([https://www.docker.com/products/docker-desktop](https://www.docker.com/products/docker-desktop)).
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行 Docker，请使用 Windows 的 **Docker Desktop** ([https://www.docker.com/products/docker-desktop](https://www.docker.com/products/docker-desktop))。
- en: '**Docker Desktop**, in turn, requires **Windows Subsystem for Linux** (**WSL**),
    which can be installed by following these steps:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Docker Desktop** 又需要 **Windows Subsystem for Linux** (**WSL**)，可以通过以下步骤安装：'
- en: Type `powershell` in the Windows 10/11 search bar.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Windows 10/11 的搜索栏中输入 `powershell`。
- en: When Windows PowerShell is proposed as a search result, click on **Run as an
    administrator**.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当 Windows PowerShell 作为搜索结果出现时，点击 **以管理员身份运行**。
- en: In the Windows PowerShell administrative console that appears, run the `wsl
    --install` command.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在出现的 Windows PowerShell 管理控制台中，运行 `wsl --install` 命令。
- en: 'The following figure shows how the code structure is organized:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了代码结构的组织方式：
- en: '![Figure 11.2: Car Sharing app code structure](img/B31916_11_2.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.2：汽车共享应用代码结构](img/B31916_11_2.png)'
- en: 'Figure 11.2: Car Sharing app code structure'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.2：汽车共享应用代码结构
- en: As you can see, there is a `Common` library that shares messages that will be
    transferred between the microservices. `Authorization` and `RoutesPlanning` were
    written using web API microservices while `CarRequests`, `CarSharer`, and `Email`
    were written using Azure Functions as the basis. That is why we showed both possibilities
    during the presentation of the book. According to what we have presented, depending
    on the complexity of the microservices and the real need of the business rules,
    we can choose between one of these alternatives for creating distributed applications.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，存在一个 `Common` 库，它将共享将在微服务之间传输的消息。`Authorization` 和 `RoutesPlanning` 是使用
    Web API 微服务编写的，而 `CarRequests`、`CarSharer` 和 `Email` 是基于 Azure Functions 编写的。这就是为什么我们在本书的演示中展示了这两种可能性。根据我们所展示的，根据微服务的复杂性和业务规则的实际需求，我们可以选择以下这些替代方案之一来创建分布式应用程序。
- en: Summary
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have presented a detailed demonstration of an event-driven
    application using microservices as the basis for connecting each message that
    is transferred from frontend to backend. We hope that this demo will help you
    better understand all the principles that we have presented throughout the book.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们详细演示了使用微服务作为连接从前端到后端传输的每条消息的基础的事件驱动应用程序。我们希望这个演示能帮助您更好地理解本书中提出的所有原则。
- en: Further reading
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Cloud design patterns: [https://learn.microsoft.com/en-us/azure/architecture/patterns/](https://learn.microsoft.com/en-us/azure/architecture/patterns/)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云设计模式：[https://learn.microsoft.com/en-us/azure/architecture/patterns/](https://learn.microsoft.com/en-us/azure/architecture/patterns/)
- en: 'Event-driven application: [https://learn.microsoft.com/en-us/azure/architecture/guide/architecture-styles/event-driven](https://learn.microsoft.com/en-us/azure/architecture/guide/architecture-styles/event-driven)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件驱动应用程序：[https://learn.microsoft.com/en-us/azure/architecture/guide/architecture-styles/event-driven](https://learn.microsoft.com/en-us/azure/architecture/guide/architecture-styles/event-driven)
- en: Join our community on Discord
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的 Discord 社区
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们社区的 Discord 空间，与作者和其他读者进行讨论：
- en: '[https://packt.link/PSMCSharp](https://packt.link/PSMCSharp)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/PSMCSharp](https://packt.link/PSMCSharp)'
- en: '![A qr code with black squares  AI-generated content may be incorrect.](img/B31916_Discord-QR-Code.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![带有黑色方块的二维码 AI 生成的内容可能不正确。](img/B31916_Discord-QR-Code.png)'
