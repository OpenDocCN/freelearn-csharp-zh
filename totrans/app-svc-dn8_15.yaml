- en: '15'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '15'
- en: Building Web Components Using Blazor
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Blazor构建Web组件
- en: This chapter is about building web components using Blazor. These can be rich
    and interactive user interfaces that render as HTML and CSS to provide cross-platform
    browser support.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了使用Blazor构建Web组件。这些可以是丰富且交互式的用户界面，它们以HTML和CSS的形式渲染，以提供跨平台的浏览器支持。
- en: There are many advantages to using .NET for client-side web development. You
    can write 99% of your code using C# instead of JavaScript and interop with JavaScript
    modules for the other 1%. You can share business logic between the server and
    the client. Blazor implements .NET Standard as well as the latest .NET 8 libraries,
    so you can use the extensive older .NET libraries, both from Microsoft and third
    parties.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 使用.NET进行客户端Web开发有许多优势。你可以用99%的代码使用C#而不是JavaScript，并且可以通过JavaScript模块与JavaScript进行交互，其余1%。你可以在服务器和客户端之间共享业务逻辑。Blazor实现了.NET
    Standard以及最新的.NET 8库，因此你可以使用广泛的旧版.NET库，包括来自Microsoft和第三方的库。
- en: In the previous edition of this book, this chapter covered **Blazor WebAssembly**,
    a hosting model where the entire Blazor app and the .NET runtime were downloaded
    to the browser and executed there. One of the problems with Blazor WebAssembly
    is a slow initial startup experience for the visitor because a lot needs to be
    downloaded and executed on the client.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的前一版中，本章介绍了**Blazor WebAssembly**，这是一种托管模型，其中整个Blazor应用程序和.NET运行时都下载到浏览器并执行。Blazor
    WebAssembly的一个问题是访客的初始启动体验较慢，因为需要下载和执行大量内容。
- en: Many .NET developers were frustrated with having to choose between different
    technologies to build web apps, because none of them are perfect and all have
    pros and cons.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 许多.NET开发者在不得不在构建Web应用程序的不同技术之间进行选择时感到沮丧，因为它们都不完美，都有优点和缺点。
- en: 'In this edition of the book, this chapter covers the new unified Blazor Full
    Stack model introduced with .NET 8\. This enables you to mix the best of all worlds
    in a single project, including the following:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的这一版中，本章涵盖了随着.NET 8引入的新统一Blazor Full Stack模型。这使得你可以在单个项目中混合所有最佳功能，包括以下内容：
- en: Blazor components that execute on the client-side using WebAssembly. This replaces
    what is possible with a Blazor WebAssembly project.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用WebAssembly在客户端执行的Blazor组件。这取代了Blazor WebAssembly项目所能实现的功能。
- en: Blazor components that execute on the server-side and communicate live with
    the **Document Object Model** (**DOM**) in the browser, using SignalR to perform
    updates. This replaces what is possible with a Blazor Server project.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在服务器端执行并与浏览器中的**文档对象模型**（**DOM**）实时通信的Blazor组件，使用SignalR进行更新。这取代了Blazor Server项目所能实现的功能。
- en: Blazor components that provide **static server rendering** (**SSR**) and return
    an HTTP response, with static content that does not interact live with the server.
    This replaces what is possible with Razor Pages or Razor Views used in traditional
    ASP.NET Core websites.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供**静态服务器渲染**（**SSR**）并返回HTTP响应的Blazor组件，其中静态内容不与服务器进行实时交互。这取代了在传统ASP.NET Core网站中使用Razor
    Pages或Razor Views所能实现的功能。
- en: Blazor components that provide server-side streaming so that some content is
    shown to the visitor as soon as possible, while the rest streams to the browser
    in the background. This is a brand-new feature.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供服务器端流式的Blazor组件，以便尽快向访客展示部分内容，其余内容则在后台流式传输到浏览器。这是一个全新的功能。
- en: A future release will enable Blazor to execute in any .NET process, like a console
    app, so that it can be used as a **static site generator** (**SSG**).
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未来版本将使Blazor能够在任何.NET进程中执行，如控制台应用程序，因此它可以作为一个**静态网站生成器**（**SSG**）使用。
- en: 'This chapter will cover the following topics:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Understanding Blazor
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Blazor
- en: Building Blazor components
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建Blazor组件
- en: Building a Blazor data component
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建Blazor数据组件
- en: Implementing caching using local storage
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用本地存储实现缓存
- en: Understanding Blazor
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Blazor
- en: Blazor is Microsoft’s framework for web component development built on .NET.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor是建立在.NET之上的Microsoft的Web组件开发框架。
- en: Blazor hosting models
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Blazor托管模型
- en: 'Blazor has multiple hosting models to choose from:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor提供了多种托管模型可供选择：
- en: '**Blazor Server**: All the components execute on the web server and user interface
    updates are sent to the browser using SignalR. The nature of Blazor Server provides
    some key benefits, including complete .NET API support, direct access to all server-side
    resources like databases, fast initial load time, and your code is protected because
    it never leaves the server. This hosting model was introduced with .NET Core 3.0
    in November 2019.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Blazor Server**: 所有组件都在 Web 服务器上执行，用户界面更新通过 SignalR 发送到浏览器。Blazor Server
    的特性提供了一些关键优势，包括完整的 .NET API 支持、直接访问所有服务器端资源（如数据库）、快速初始加载时间，以及您的代码受到保护，因为它永远不会离开服务器。这种托管模型是在
    2019 年 11 月的 .NET Core 3.0 中引入的。'
- en: '**Blazor WebAssembly**: All the components execute in the web browser like
    other **single page application** (**SPA**) frameworks, for example, React and
    Angular. Your .NET assemblies and the .NET runtime are downloaded to the browser
    and cached for future use. The nature of Blazor WebAssembly provides some key
    benefits, including the ability to run the app offline when not connected to the
    network, to host the app on a static website or serve it from a **content delivery
    network** (**CDN**), and to offload processing to the client, which increases
    scalability. This hosting model was introduced as an extension to .NET Core 3.1
    in May 2020 and was built-in with .NET 5 in November 2020.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Blazor WebAssembly**: 所有组件都在 Web 浏览器中执行，就像其他 **单页应用程序**（SPA）框架一样，例如 React
    和 Angular。您的 .NET 程序集和 .NET 运行时会被下载到浏览器并缓存以供将来使用。Blazor WebAssembly 的特性提供了一些关键优势，包括在网络断开连接时能够离线运行应用程序、在静态网站上托管应用程序或从
    **内容分发网络**（CDN）提供应用程序，以及将处理任务卸载到客户端，从而提高可扩展性。这种托管模型是在 2020 年 5 月作为 .NET Core 3.1
    的扩展引入的，并在 2020 年 11 月的 .NET 5 中内置。'
- en: '**Blazor Hybrid/.NET MAUI Blazor App**: All the components execute in a local
    web view hosted in a native client app. The app can be built using .NET MAUI if
    the app needs to be cross-platform, or using Windows Presentation Foundation or
    Windows Forms if you are only targeting Windows. The main benefit of Blazor Hybrid
    compared to the first two hosting models is access to native client capabilities
    that can provide a better user experience. This hosting model was introduced with
    .NET 7 in November 2022.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Blazor Hybrid/.NET MAUI Blazor App**: 所有组件都在本地 Web 视图中执行，该视图由原生客户端应用程序托管。如果应用程序需要跨平台，可以使用
    .NET MAUI 构建，或者如果您仅针对 Windows，则可以使用 Windows Presentation Foundation 或 Windows
    Forms。与前面两种托管模型相比，Blazor Hybrid 的主要优势是访问原生客户端功能，这可以提供更好的用户体验。这种托管模型是在 2022 年 11
    月的 .NET 7 中引入的。'
- en: '**Blazor Full Stack**: Components can execute on the server and generate static
    markup, but each individual component can be switched to any of the following:
    streaming rendering, interactive server-side with live updates of the COM using
    SignalR, or interactive client-side with WebAssembly. This new hosting model was
    formerly known as Blazor United during .NET 8 previews. It was introduced as Blazor
    Full Stack with .NET 8 in November 2023\. In future versions, I expect it to be
    simply known as Blazor.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Blazor Full Stack**: 组件可以在服务器上执行并生成静态标记，但每个单独的组件可以被切换到以下任何一种：流式渲染、交互式服务器端使用
    SignalR 进行 COM 的实时更新，或者交互式客户端使用 WebAssembly。这种新的托管模型在 .NET 8 预览期间被称为 Blazor United。它在
    2023 年 11 月的 .NET 8 中以 Blazor Full Stack 的形式引入。在未来版本中，我预计它将简单地被称为 Blazor。'
- en: '**Good Practice**: For new projects, **Blazor Web App** should be your choice
    of project template. If you need a pure SPA project that can be hosted on Azure
    Static Web Apps or a CDN, then **Blazor WebAssembly** **Standalone App** will
    be your best choice because Blazor Web App requires a web server. For static websites,
    Blazor WebAssembly is still the right solution rather than the new Blazor Full
    Stack.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：对于新项目，**Blazor Web App** 应该是您选择的项目模板。如果您需要一个可以托管在 Azure Static Web
    Apps 或 CDN 上的纯 SPA 项目，那么 **Blazor WebAssembly Standalone App** 将是您的最佳选择，因为 Blazor
    Web App 需要一个 Web 服务器。对于静态网站，Blazor WebAssembly 仍然是正确的解决方案，而不是新的 Blazor Full Stack。'
- en: Instead of multiple *hosting models*, Blazor Full Stack has multiple equivalent
    *rendering modes*. The Blazor Server project template that hosted and executed
    its code on the server-side is now replaced by the *interactive server rendering
    mode*. The Blazor WebAssembly project templates that could be hosted even on a
    static website and execute their code on the client-side can now be replaced by
    the *interactive WebAssembly rendering mode*.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 与多个**托管模型**不同，Blazor Full Stack具有多个等效的**渲染模式**。托管并执行其代码在服务器端的Blazor Server项目模板现在被**交互式服务器渲染模式**所取代。可以在静态网站上托管并执行其代码在客户端的Blazor
    WebAssembly项目模板现在可以被**交互式WebAssembly渲染模式**所取代。
- en: Blazor supports the latest version of all four major web browsers – Chrome,
    Firefox, Edge, and Safari, on mobile and desktop platforms. Blazor Hybrid supports
    the latest web view components on the three major platforms – Chrome on Android,
    Safari on iOS and macOS, and Edge WebView2 on Windows.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor支持所有四个主要网络浏览器的最新版本——Chrome、Firefox、Edge和Safari，在移动和桌面平台上。Blazor Hybrid支持三个主要平台上的最新WebView组件——Android上的Chrome、iOS和macOS上的Safari以及Windows上的Edge
    WebView2。
- en: '**More Information**: The official Blazor documentation has a useful table
    to help you choose between the hosting models. You can find it at the following
    link: [https://learn.microsoft.com/en-us/aspnet/core/blazor/hosting-models#which-blazor-hosting-model-should-i-choose](https://learn.microsoft.com/en-us/aspnet/core/blazor/hosting-models#which-blazor-hosting-model-should-i-choose).'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**更多信息**：官方Blazor文档提供了一个有用的表格，可以帮助您在托管模型之间进行选择。您可以在以下链接中找到它：[https://learn.microsoft.com/en-us/aspnet/core/blazor/hosting-models#which-blazor-hosting-model-should-i-choose](https://learn.microsoft.com/en-us/aspnet/core/blazor/hosting-models#which-blazor-hosting-model-should-i-choose)。'
- en: Blazor components
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Blazor组件
- en: Blazor is all about **components**. A component is a part of a web app, like
    a button, a grid, a form for gathering input from the visitor, or even a whole
    page. Components can be reused and nested to build more complex components.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor的一切都是关于**组件**。组件是Web应用的一部分，如按钮、网格、用于收集访客输入的表单，甚至是一个完整的页面。组件可以被重用和嵌套以构建更复杂的组件。
- en: A Blazor component usually consists of a Razor file with the file extension
    `.razor`. Like Razor views in ASP.NET Core MVC or Razor Pages, Razor files used
    by Blazor components easily mix HTML and C# code. As well as the HTML elements
    that make up the user interface parts, and the CSS used to style them, the Razor
    file also has a code block to implement event handling, properties, and other
    statements to provide the functionality of the component.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor组件通常由一个具有`.razor`文件扩展名的Razor文件组成。与ASP.NET Core MVC或Razor Pages中的Razor视图一样，Blazor组件使用的Razor文件可以轻松混合HTML和C#代码。除了构成用户界面部分的HTML元素和用于样式的CSS之外，Razor文件还有一个代码块来实现事件处理、属性和其他语句，以提供组件的功能。
- en: 'For example, a Blazor component named `ProgressBar.razor` could implement a
    progress bar using Bootstrap. It might define parameters for a minimum, maximum,
    and the current value of the progress bar, and have Boolean parameters to enable
    animation style and show the current value as text, as shown in the following
    markup:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，一个名为`ProgressBar.razor`的Blazor组件可以使用Bootstrap实现进度条。它可能定义了进度条的最小值、最大值和当前值参数，并具有布尔参数以启用动画样式和将当前值以文本形式显示，如下面的标记所示：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To embed an instance of the component on a page, you use the component name
    as if it were an HTML element and set its parameters using HTML attributes, as
    shown in the following markup:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要在页面上嵌入组件实例，您可以使用组件名称，就像它是HTML元素一样，并使用HTML属性设置其参数，如下面的标记所示：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Blazor routing to page components
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Blazor路由到页面组件
- en: 'The `Router` component in the `App.razor` file enables routing to components,
    as shown in the following markup:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`App.razor`文件中的`Router`组件使路由到组件成为可能，如下面的标记所示：'
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `Router` component scans the assembly specifically in its `AppAssembly`
    parameter for components decorated with the `[Route]` attribute, registering their
    URL paths.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`Router`组件在其`AppAssembly`参数中特别扫描带有`[Route]`属性的组件，注册它们的URL路径。'
- en: If a route match is found, then the context of the request is stored in a variable
    named `routeData` and passed to the matching Razor file. The default layout is
    set to use a class defined in the file named `MainLayout.razor`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果找到路由匹配项，则请求的上下文将存储在名为`routeData`的变量中，并将其传递给匹配的Razor文件。默认布局设置为使用名为`MainLayout.razor`的文件中定义的类。
- en: The `FocusOnNavigate` component has a `Selector` property that must be set to
    a valid CSS selector. This could be a tag selector like the default `h1`, or a
    more specific CSS selector that uses a CSS class or an ID. The setting is common
    across all components in your app, so you will need to set one that works across
    all your components. In the Razor file, the focus is set to the first `<h1>` element.
    If the Razor file contains a form, then you might want to set the first form input
    element like a text box to have the focus.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`FocusOnNavigate` 组件有一个 `Selector` 属性，必须设置为有效的 CSS 选择器。这可以是一个标签选择器，如默认的 `h1`，或者一个更具体的
    CSS 选择器，它使用 CSS 类或 ID。该设置适用于您应用中的所有组件，因此您需要设置一个适用于所有组件的选择器。在 Razor 文件中，焦点设置在第一个
    `<h1>` 元素上。如果 Razor 文件包含表单，那么您可能希望将第一个表单输入元素（如文本框）设置为具有焦点。'
- en: 'For example, in a typical ASP.NET Core MVC project, an MVC controller could
    be decorated with the `[Route]` attribute, as shown in the following code:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在一个典型的 ASP.NET Core MVC 项目中，MVC 控制器可以装饰 `[Route]` 属性，如下面的代码所示：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: An HTTP `GET` request to the relative path `/customers` would be matched to
    the route.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对相对路径 `/customers` 的 HTTP `GET` 请求将与该路由匹配。
- en: 'To create an equivalent routable page component, add the `@page` directive
    to the top of a component’s `.razor` file, as shown in the following markup:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个等效的路由页面组件，将 `@page` 指令添加到组件的 `.razor` 文件顶部，如下所示，高亮显示的标记：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: A page component can have multiple `@page` directives to register multiple routes.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 页面组件可以包含多个 `@page` 指令以注册多个路由。
- en: If you were to write code that uses reflection to find the `component` class
    generated for you from the Razor markup file, then you would discover that it
    is decorated with the `[Route]` attribute due to the `@page` directive.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您编写使用反射来查找从 Razor 标记文件为您生成的 `component` 类的代码，那么您会发现它由于 `@page` 指令而被 `[Route]`
    属性装饰。
- en: At runtime, the page component is merged with any specific layout that you have
    specified, just like an MVC view or Razor Page would be. By default, Blazor project
    templates define a file named `MainLayout.razor` as the layout for page components.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行时，页面组件将与您指定的任何特定布局合并，就像 MVC 视图或 Razor 页面一样。默认情况下，Blazor 项目模板定义一个名为 `MainLayout.razor`
    的文件作为页面组件的布局。
- en: '**Good Practice**: By convention, put routable page Blazor components in the
    `Components\Pages` folder and non-page components in the `Components` folder.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：按照惯例，将可路由的页面 Blazor 组件放在 `Components\Pages` 文件夹中，将非页面组件放在 `Components`
    文件夹中。'
- en: How to pass route parameters
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何传递路由参数
- en: 'Blazor routes can include case-insensitive named parameters, and your code
    can most easily access the passed values by binding the parameter to a property
    in the code block, using the `[Parameter]` attribute, as shown in the following
    markup:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor 路由可以包含不区分大小写的命名参数，并且您可以通过将参数绑定到代码块中的属性，使用 `[Parameter]` 属性最轻松地访问传递的值，如下面的标记所示：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The recommended way to handle a parameter that should have a default value
    when it is missing is to suffix the parameter in the route with `?`, using the
    `null` coalescing operator in the `OnParametersSet` method, as shown highlighted
    in the following markup:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 处理缺失默认值的参数的推荐方法是，在路由参数后缀加上 `?`，在 `OnParametersSet` 方法中使用空合并运算符，如下所示，高亮显示的标记：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Setting parameters from a query string
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从查询字符串设置参数
- en: 'You can also set component properties using parameters from a query string,
    as shown in the following code:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用查询字符串中的参数设置组件属性，如下面的代码所示：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Route constraints for parameters
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参数的路由约束
- en: Route constraints validate that the data type is correct for a passed parameter.
    If a potential request with a parameter value violates the constraint, then a
    match for that route is not made, and other routes will be evaluated instead.
    If no routes match, then a `404` status code is returned.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 路由约束验证传递的参数的数据类型是否正确。如果具有参数值的潜在请求违反了约束，则不会对该路由进行匹配，而是评估其他路由。如果没有路由匹配，则返回 `404`
    状态码。
- en: 'If you do not set constraints, then any value is acceptable as a route match,
    but a data type conversion exception may result when the value is converted into
    the C# method’s expected data type. Some route constraint examples are shown in
    *Table 15.1*:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不设置约束，则任何值都可作为路由匹配接受，但在将值转换为 C# 方法的预期数据类型时可能会引发数据类型转换异常。一些路由约束示例在 *表 15.1*
    中显示：
- en: '| **Constraint example** | **Description** |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| **约束示例** | **描述** |'
- en: '| `{isanimated:bool}` | The `IsAnimated` property must be set to a valid Boolean
    value, for example, `TRUE` or `true`. |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| `{isanimated:bool}` | `IsAnimated`属性必须设置为有效的布尔值，例如，`TRUE`或`true`。 |'
- en: '| `{hiredate:datetime}` | The `HireDate` property must be a valid date/time
    value. |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| `{hiredate:datetime}` | `HireDate`属性必须是一个有效的日期/时间值。 |'
- en: '| `{price:decimal}` | The `UnitPrice` property must be a valid `decimal` value.
    |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `{price:decimal}` | `UnitPrice`属性必须是一个有效的`decimal`值。 |'
- en: '| `{shipweight:double}` | The `ShipWeight` property must be a valid `double`
    value. |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `{shipweight:double}` | `ShipWeight`属性必须是一个有效的`double`值。 |'
- en: '| `{shipwidth:float}` | The `ShipWidth` property must be a valid `float` value.
    |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `{shipwidth:float}` | `ShipWidth`属性必须是一个有效的`float`值。 |'
- en: '| `{orderid:guid}` | The `OrderId` property must be a valid `Guid` value. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `{orderid:guid}` | `OrderId`属性必须是一个有效的`Guid`值。 |'
- en: '| `{categoryid:int}` | The `CategoryId` property must be a valid `int` value.
    |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `{categoryid:int}` | `CategoryId`属性必须是一个有效的`int`值。 |'
- en: '| `{nanoseconds:long}` | The `Nanoseconds` property must be a valid `long`
    value. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `{nanoseconds:long}` | `Nanoseconds`属性必须是一个有效的`long`值。 |'
- en: 'Table 15.1: Route constraint examples'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 表15.1：路由约束示例
- en: '**Good Practice**: Route constraints assume invariant culture, so your URLs
    must not be localized. For example, always use invariant culture formats to pass
    date and time parameter values.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：路由约束假设文化不变，因此你的URL不得本地化。例如，始终使用不变文化格式传递日期和时间参数值。'
- en: Base component classes
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基组件类
- en: 'The `OnParametersSet` method is defined by the base class that components inherit
    from by default, named `ComponentBase`, as shown in the following code:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 基类定义了`OnParametersSet`方法，这是组件默认继承的，名为`ComponentBase`，如下面的代码所示：
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`ComponentBase` has some useful methods that you can call and override, as
    shown in *Table 15.2*:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`ComponentBase` 包含一些你可以调用和重写的有用方法，如*表15.2*所示：'
- en: '| **Method(s)** | **Description** |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| **方法(s)** | **描述** |'
- en: '| `InvokeAsync` | Call this method to execute a function on the associated
    renderer’s synchronization context. This avoids the requirement to write thread-synchronizing
    code when accessing shared resources. Multiple threads are not allowed to access
    the rendering process at the same time. The use of `InvokeAsync` means that only
    one thread will access components at any given moment, which eliminates the need
    to write thread-locking and synchronization code for shared state. |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `InvokeAsync` | 调用此方法在关联渲染器的同步上下文中执行函数。这避免了在访问共享资源时编写线程同步代码的需求。不允许多个线程同时访问渲染过程。使用`InvokeAsync`意味着在任何给定时刻只有一个线程将访问组件，这消除了编写线程锁定和同步代码以共享状态的需求。'
- en: '| `OnAfterRender`,`OnAfterRenderAsync` | Override these methods to invoke code
    each time the component has been rendered. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `OnAfterRender`,`OnAfterRenderAsync` | 重写这些方法以在组件每次渲染时执行代码。 |'
- en: '| `OnInitialized`,`OnInitializedAsync` | Override these methods to invoke code
    after the component has received its initial parameters from its parent in the
    render tree. |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `OnInitialized`,`OnInitializedAsync` | 重写这些方法以在组件从渲染树中的父组件接收其初始参数后执行代码。 |'
- en: '| `OnParametersSet`,`OnParametersSetAsync` | Override these methods to invoke
    code after the component has received parameters and the values have been assigned
    to properties. |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `OnParametersSet`,`OnParametersSetAsync` | 重写这些方法以在组件收到参数并将值分配给属性后执行代码。 |'
- en: '| `ShouldRender` | Override this method to indicate if the component should
    render. |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `ShouldRender` | 重写此方法以指示组件是否应该渲染。 |'
- en: '| `StateHasChanged` | Call this method to cause the component to re-render.
    |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `StateHasChanged` | 调用此方法使组件重新渲染。 |'
- en: 'Table 15.2: Useful methods of ComponentBase'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 表15.2：ComponentBase的有用方法
- en: Blazor layouts
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Blazor布局
- en: 'Blazor components can have shared layouts in a similar way to MVC views and
    Razor Pages. You would create a `.razor` component file and make it explicitly
    inherit from `LayoutComponentBase`, as shown in the following markup:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor组件可以像MVC视图和Razor页面一样拥有共享布局。你需要创建一个`.razor`组件文件，并显式地从`LayoutComponentBase`继承，如下面的标记所示：
- en: '[PRE9]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The base class has a property named `Body` that you can render in the markup
    at the correct place within the layout.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 基类有一个名为`Body`的属性，你可以在布局的适当位置渲染它。
- en: 'You can set a default layout for components in the `App.razor` file and its
    `Router` component. To explicitly set a layout for a component, use the `@layout`
    directive, as shown in the following markup:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在`App.razor`文件及其`Router`组件中为组件设置默认布局。要为组件显式设置布局，请使用`@layout`指令，如下面的标记所示：
- en: '[PRE10]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How to navigate Blazor routes to page components
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何导航 Blazor 路由到页面组件
- en: Microsoft provides a dependency service named `NavigationManager` that understands
    Blazor routing and the `NavLink` component. The `NavigateTo` method is used to
    go to the specified URL.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 微软提供了一个名为 `NavigationManager` 的依赖服务，它理解 Blazor 路由和 `NavLink` 组件。`NavigateTo`
    方法用于跳转到指定的 URL。
- en: 'In HTML, you use the `<a>` element to define navigation links, as shown in
    the following markup:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在 HTML 中，您使用 `<a>` 元素来定义导航链接，如下面的标记所示：
- en: '[PRE11]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In Blazor, use the `<NavLink>` component, as shown in the following markup:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Blazor 中，使用 `<NavLink>` 组件，如下面的标记所示：
- en: '[PRE12]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `NavLink` component is better than an anchor element because it automatically
    sets its class to `active` if its `href` is a match on the current location URL.
    If your CSS uses a different class name, then you can set the class name in the
    `NavLink.ActiveClass` property.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`NavLink` 组件比锚点元素更好，因为它会自动将其类设置为 `active`，如果其 `href` 与当前位置 URL 匹配。如果您的 CSS
    使用不同的类名，则可以在 `NavLink.ActiveClass` 属性中设置类名。'
- en: 'By default, in the matching algorithm, the `href` is a path *prefix*, so if
    `NavLink` has an `href` of `/employees`, as shown in the preceding code example,
    then it would match all the following paths and set them all to have the `active`
    class style:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，在匹配算法中，`href` 是路径 **前缀**，因此如果 `NavLink` 的 `href` 为 `/employees`，如前面的代码示例所示，则它将匹配以下所有路径并将它们全部设置为具有
    `active` 类样式：
- en: '[PRE13]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To ensure that the matching algorithm only performs matches on *all* of the
    text in the path, (in other words, there is only a match when the whole complete
    text matches and not when just part of the path matches), then set the `Match`
    parameter to `NavLinkMatch.All`, as shown in the following code:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保匹配算法只对路径中的**所有**文本进行匹配（换句话说，只有当整个完整文本匹配时才进行匹配，而不是路径的任何部分匹配时），请将 `Match`
    参数设置为 `NavLinkMatch.All`，如下面的代码所示：
- en: '[PRE14]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: If you set other attributes such as `target`, they are passed through to the
    underlying `<a>` element that is generated.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您设置了其他属性，例如 `target`，它们将被传递到生成的底层 `<a>` 元素。
- en: CSS and JavaScript isolation
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CSS 和 JavaScript 隔离
- en: Blazor components often need to provide their own CSS to apply styling or JavaScript
    for activities that cannot be performed purely in C#, like access to browser APIs.
    To ensure this does not conflict with site-level CSS and JavaScript, Blazor supports
    CSS and JavaScript isolation.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor 组件通常需要提供自己的 CSS 以应用样式或 JavaScript 以执行纯 C# 无法执行的活动，例如访问浏览器 API。为了确保这不会与站点级别的
    CSS 和 JavaScript 冲突，Blazor 支持CSS 和 JavaScript 隔离。
- en: If you have a component named `Home.razor`, simply create a CSS file named `Home.razor.css`.
    The styles defined within this file will override any other styles in the project
    for this component, but not for the rest of the website.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有一个名为 `Home.razor` 的组件，只需创建一个名为 `Home.razor.css` 的 CSS 文件。在此文件中定义的样式将覆盖项目中此组件的所有其他样式，但不会覆盖网站的其他部分。
- en: For JavaScript isolation, you do not use a naming convention in the same way
    as with CSS. Instead, Blazor enables JavaScript isolation using JavaScript modules,
    imported using the JavaScript interop feature of Blazor, as you will see later
    in this chapter.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 JavaScript 隔离，您不使用与 CSS 相同的命名约定。相反，Blazor 通过使用 JavaScript 模块启用 JavaScript
    隔离，这些模块通过 Blazor 的 JavaScript 互操作功能导入，您将在本章后面看到。
- en: 'You can read more about JavaScript isolation at the following link: [https://learn.microsoft.com/en-us/aspnet/core/blazor/javascript-interoperability/call-javascript-from-dotnet#javascript-isolation-in-javascript-modules](https://learn.microsoft.com/en-us/aspnet/core/blazor/javascript-interoperability/call-javascript-from-dotnet#javascript-isolation-in-javascript-modules).'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接中了解更多关于 JavaScript 隔离的信息：[https://learn.microsoft.com/en-us/aspnet/core/blazor/javascript-interoperability/call-javascript-from-dotnet#javascript-isolation-in-javascript-modules](https://learn.microsoft.com/en-us/aspnet/core/blazor/javascript-interoperability/call-javascript-from-dotnet#javascript-isolation-in-javascript-modules)。
- en: Building Blazor components
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建 Blazor 组件
- en: With ASP.NET Core 8, Blazor introduced a new project template to start a project
    that supports the most flexible hosting model and all rendering modes. It provides
    a basic template to run, and a `Weather` component, which shows a table with five
    rows of random temperatures that uses streaming rendering.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 ASP.NET Core 8，Blazor 引入了一个新的项目模板，以启动一个支持最灵活托管模型和所有渲染模式的程序。它提供了一个基本模板以运行，以及一个
    `Weather` 组件，该组件显示一个包含五行随机温度的表格，使用流式渲染。
- en: Reviewing the new Blazor project template
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查新的 Blazor 项目模板
- en: 'First, we will create a Blazor Web App project and review its important parts:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个 Blazor Web App 项目并回顾其重要部分：
- en: 'Use your preferred code editor to create a new project and solution, using
    the Blazor Web App project template, as defined in the following list:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你喜欢的代码编辑器创建一个新的项目和解决方案，使用 Blazor Web App 项目模板，如下列表所示：
- en: 'Project template: **Blazor Web App** / `blazor --interactivity None`'
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目模板：**Blazor Web App** / `blazor --interactivity None`
- en: 'Project file and folder: `Northwind.Blazor`'
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目文件和文件夹：`Northwind.Blazor`
- en: 'Solution file and folder: `Chapter15`'
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决方案文件和文件夹：`Chapter15`
- en: '**Authentication type**: None'
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**身份验证类型**：无'
- en: '**Configure for HTTPS**: Selected'
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置 HTTPS**：已选中'
- en: '**Interactive render mode**: None'
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**交互式渲染模式**：无'
- en: '**Interactivity location**: Per page/component'
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**交互位置**：每页/组件'
- en: '**Include sample pages**: Selected'
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**包含示例页面**：已选中'
- en: '**Do not use top-level statements**: Cleared'
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不使用顶级语句**：已清除'
- en: 'If you are using Visual Studio Code or JetBrains Rider, then enter the following
    command at the command prompt or terminal in the `Chapter15` folder: `dotnet new
    blazor --interactivity None -o Northwind.Blazor`.'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你正在使用 Visual Studio Code 或 JetBrains Rider，请在 `Chapter15` 文件夹中的命令提示符或终端中输入以下命令：`dotnet
    new blazor --interactivity None -o Northwind.Blazor`。
- en: '**Good Practice**: We have not selected the options to use interactive WebAssembly
    or server components so that we can build up your knowledge about how Blazor works
    step by step. In real-world projects, you are likely to want to select these options
    from the start. We have also selected sample pages, which you would likely want
    to clear in a real-world project.'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**良好实践**：我们没有选择使用交互式 WebAssembly 或服务器组件的选项，以便我们可以逐步构建你对 Blazor 的工作原理的知识。在实际项目中，你可能会从一开始就选择这些选项。我们还选择了示例页面，你可能会在实际项目中清除这些页面。'
- en: Build the `Northwind.Blazor` project.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建 `Northwind.Blazor` 项目。
- en: In `Northwind.Blazor.csproj`, note that it is identical to an ASP.NET Core project
    that uses the Web SDK and targets .NET 8.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Blazor.csproj` 中，请注意它与使用 Web SDK 并针对 .NET 8 的 ASP.NET Core 项目相同。
- en: 'In the `Northwind.Blazor` project, in `Program.cs`, note that the statements
    enable the ASP.NET Core service collection and HTTP pipeline, with Blazor-specific
    statements to add Razor components and then use them, as shown highlighted in
    the following code:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Blazor` 项目中，在 `Program.cs` 中，请注意这些语句启用了 ASP.NET Core 服务集合和 HTTP
    管道，并添加了具有 Blazor 特定语句的 Razor 组件，然后使用它们，如下所示（代码高亮）：
- en: '[PRE15]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In the `Northwind.Blazor` project, expand the `Properties` folder, open the
    `launchSettings.json` file, and for the `applicationUrl` setting of the `https`
    profile, change the port numbers to `5151` for `https` and `5152` for `http`,
    as shown in the following setting:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Blazor` 项目中，展开 `Properties` 文件夹，打开 `launchSettings.json` 文件，并将
    `https` 配置的 `applicationUrl` 设置的端口号更改为 `5151` 用于 `https` 和 `5152` 用于 `http`，如下所示（设置）：
- en: '[PRE16]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Save the changes to the `launchSettings.json` file.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将更改保存到 `launchSettings.json` 文件。
- en: 'In the `Northwind.Blazor` project, in the `Components` folder, open `App.razor`,
    as shown in the following markup:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Blazor` 项目中，在 `Components` 文件夹中打开 `App.razor`，如下所示：
- en: '[PRE17]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Note the following:'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意以下内容：
- en: A `<HeadOutlet />` Blazor component to inject additional content into the `<head>`
    section. This is one of the built-in components available in all Blazor projects.
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 `<HeadOutlet />` Blazor 组件，用于将额外内容注入 `<head>` 部分。这是所有 Blazor 项目中可用的内置组件之一。
- en: A `<Routes />` Blazor component to define the custom routes in this project.
    This component can be completely customized by the developer because it is part
    of the current project, in a file named `Routes.razor`.
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 `<Routes />` Blazor 组件，用于定义此项目中的自定义路由。此组件可以完全由开发者自定义，因为它当前项目的一部分，在名为 `Routes.razor`
    的文件中。
- en: A script block for `blazor.web.js` that manages communication back to the server
    for Blazor’s dynamic features, like downloading WebAssembly components in the
    background and later switching from server-side to client-side component execution.
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于 `blazor.web.js` 的脚本块，该脚本块管理 Blazor 的动态功能与服务器之间的通信，例如在后台下载 WebAssembly 组件，并在稍后从服务器端组件执行切换到客户端组件执行。
- en: 'In the `Components` folder, in `Routes.razor`, note that a `<Router>` enables
    routing for all Blazor components found in the current assembly, and that if a
    matching route is found, then `RouteView` is executed, which sets the default
    layout for the component to `MainLayout` and passes any route data parameters
    to the component. For that component, the first `<h1>` element in it will get
    the focus, as shown in the following code:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Components` 文件夹中，在 `Routes.razor` 文件中，注意 `<Router>` 为当前程序集中找到的所有 Blazor 组件启用路由，如果找到匹配的路由，则执行
    `RouteView`，这将设置组件的默认布局为 `MainLayout` 并将任何路由数据参数传递给组件。对于该组件，第一个 `<h1>` 元素将获得焦点，如下所示代码：
- en: '[PRE18]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In the `Components` folder, in `_Imports.razor`, note that this file imports
    some useful namespaces for use in all your custom Blazor components.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Components` 文件夹中，在 `_Imports.razor` 文件中，注意该文件导入了一些有用的命名空间，以便在所有自定义 Blazor
    组件中使用。
- en: 'In the `Components\Layout` folder, note that `MainLayout.razor` defines `<div>`
    for a sidebar, containing a navigation menu that is implemented by the `NavMenu.razor`
    component file in this project, and HTML5 elements like `<main>` and `<article>`
    for the content, as shown in the following markup:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Components\Layout` 文件夹中，注意 `MainLayout.razor` 定义了用于侧边栏的 `<div>`，其中包含一个由本项目的
    `NavMenu.razor` 组件文件实现的导航菜单，以及 `<main>` 和 `<article>` 等HTML5元素用于内容，如下所示标记：
- en: '[PRE19]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In the `Components\Layout` folder, open `NavMenu.razor`, as shown in the following
    markup:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Components\Layout` 文件夹中，打开 `NavMenu.razor`，如下所示标记：
- en: '[PRE20]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Note the following:'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意以下事项：
- en: The `NavMenu` component does not have a `@page` directive because it does not
    use a shared layout or render as a page.
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NavMenu` 组件没有 `@page` 指令，因为它不使用共享布局或作为页面渲染。'
- en: It uses Bootstrap to provide a menu of choices that responsively adapts to the
    width of the viewport. It will collapse into a hamburger menu when there is not
    enough horizontal space, and then the visitor can toggle the navigation on and
    off.
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用 Bootstrap 提供一个选择菜单，该菜单能够响应式地适应视口的宽度。当没有足够的水平空间时，它将折叠成汉堡菜单，然后访客可以切换导航的开启和关闭。
- en: 'There are currently two menu items: **Home** and **Weather**. We will add more
    throughout this chapter.'
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目前有两个菜单项：**首页**和**天气**。在本章中我们将添加更多。
- en: 'In the `Components\Pages` folder, in `Home.razor`, note the `@page` directive
    that configures a route for the root path to go to this page component, and then
    change the heading from `world` to `Blazor Full Stack`, as shown highlighted in
    the following markup:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Components\Pages` 文件夹中，在 `Home.razor` 文件中，注意 `@page` 指令配置了根路径的路由以跳转到此页面组件，然后将标题从
    `world` 更改为 `Blazor Full Stack`，如下所示高亮标记：
- en: '[PRE21]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Start the `Northwind.Blazor` project, using its `https` profile without debugging:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 `Northwind.Blazor` 项目，使用其 `https` 配置文件且不进行调试：
- en: If you are using Visual Studio 2022, then in **Solution Explorer**, select the
    `Northwind.Blazor` project to make it active. In the Visual Studio 2022 toolbar,
    select the `https` profile as the **Startup Project**, and **Google Chrome** as
    the **Web Browser**.
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你正在使用 Visual Studio 2022，那么在 **解决方案资源管理器** 中，选择 `Northwind.Blazor` 项目以使其处于活动状态。在
    Visual Studio 2022 工具栏中，选择 `https` 配置文件作为 **启动项目**，并选择 **Google Chrome** 作为 **Web
    浏览器**。
- en: 'If you are using Visual Studio Code, then at the command line or terminal,
    enter the following command:'
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你正在使用 Visual Studio Code，那么在命令行或终端中，输入以下命令：
- en: '[PRE22]'
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In Chrome, note the left-side navigation and the home page component, as shown
    in *Figure 15.1*:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Chrome 中，注意左侧导航和主页组件，如图 *图15.1* 所示：
- en: '![](img/B19587_15_01.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19587_15_01.png)'
- en: 'Figure 15.1: A simple web page implemented as a Blazor page component'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.1：作为 Blazor 页面组件实现的简单网页
- en: Finally, close the browser and shut down the web server.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，关闭浏览器并关闭 web 服务器。
- en: Using Bootstrap icons
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Bootstrap 图标
- en: 'The older Blazor project templates included all the Bootstrap icons. In the
    new project template, only three icons are defined using **Scalable Vector Graphics**
    (**SVG**). Let’s see how the team defined those icons, and then add some more
    for our own use:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 较旧的 Blazor 项目模板包含了所有 Bootstrap 图标。在新的项目模板中，仅使用 **可缩放矢量图形** (**SVG**) 定义了三个图标。让我们看看团队是如何定义这些图标的，然后添加一些供我们使用：
- en: 'In the `Components\Layout` folder, in the CSS stylesheet file named `NavMenu.razor.css`,
    find the text `bi-house`, and note the three icons defined using SVG, as partially
    shown in the following code:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Components\Layout` 文件夹中，在名为 `NavMenu.razor.css` 的 CSS 样式表文件中，找到文本 `bi-house`，并注意使用
    SVG 定义的三个图标，如下所示代码部分显示：
- en: '[PRE23]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In your favorite browser, navigate to: [https://icon-sets.iconify.design/bi/](https://icon-sets.iconify.design/bi/),
    and note that **Bootstrap Icons** have an MIT license and contain more than 2,000
    icons.'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您喜欢的浏览器中，导航到：[https://icon-sets.iconify.design/bi/](https://icon-sets.iconify.design/bi/)，并注意
    **Bootstrap 图标** 拥有 MIT 许可证，并包含超过 2,000 个图标。
- en: In the **Search Bootstrap Icons** box, enter `globe`, and note that six globe
    icons are found.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **搜索 Bootstrap 图标** 框中输入 `globe`，并注意找到了六个地球图标。
- en: 'Click the first globe, scroll down the page, and click the **SVG as data: URI**
    button. Note that you could copy and paste the definition of this icon for use
    in the CSS stylesheet, but you do not need to because I have already created a
    CSS file for you to use, with five icons defined for you to use in your Blazor
    project.'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击第一个地球图标，滚动到页面底部，并点击 **SVG 作为数据：URI** 按钮。注意，您可以复制并粘贴此图标的定义以在 CSS 样式表中使用，但您不需要这样做，因为我已经为您创建了一个包含五个图标定义的
    CSS 文件，您可以在您的 Blazor 项目中使用这些图标。
- en: 'In your favorite browser, navigate to: [https://github.com/markjprice/apps-services-net8/blob/main/code/Chapter15/Northwind.Blazor/wwwroot/icons.css](https://github.com/markjprice/apps-services-net8/blob/main/code/Chapter15/Northwind.Blazor/wwwroot/icons.css),
    download the file, and save it in your own project in its `wwwroot` folder.'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您喜欢的浏览器中，导航到：[https://github.com/markjprice/apps-services-net8/blob/main/code/Chapter15/Northwind.Blazor/wwwroot/icons.css](https://github.com/markjprice/apps-services-net8/blob/main/code/Chapter15/Northwind.Blazor/wwwroot/icons.css)，下载文件，并将其保存在您自己的项目的
    `wwwroot` 文件夹中。
- en: 'In the `Components` folder, in the `App.razor` component, in the `<head>`,
    add a `<link>` element to reference the `icons.css` stylesheet, as shown in the
    following markup:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Components` 文件夹中，在 `App.razor` 组件中，在 `<head>` 中，添加一个 `<link>` 元素以引用 `icons.css`
    样式表，如下面的标记所示：
- en: '[PRE24]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Save and close the file.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭文件。
- en: Referencing an EF Core class library and registering a data context
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引用 EF Core 类库并注册数据上下文
- en: 'We will reference the EF Core model that you created in *Chapter 3*, *Building
    Entity Models for SQL Server Using EF Core*:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将引用您在 *第 3 章* 中创建的 EF Core 模型，*使用 EF Core 为 SQL Server 构建实体模型*：
- en: 'In the `Northwind.Blazor.csproj` project file, treat warnings as errors, and
    add a project reference to the Northwind database context project, as shown in
    the following markup:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Blazor.csproj` 项目文件中，将警告视为错误，并将 Northwind 数据库上下文项目添加为项目引用，如下面的标记所示：
- en: '[PRE25]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The `Include` path must not have a line break.
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Include` 路径不得有换行符。'
- en: At the command prompt or terminal, build the `Northwind.Blazor` project using
    the `dotnet build` command.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符或终端中，使用 `dotnet build` 命令构建 `Northwind.Blazor` 项目。
- en: 'In the `Components` folder, in `_Imports.razor`, import the namspaces to use
    asynchronous methods with EF Core and to with the Northwind entity models, as
    shown in the following code:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Components` 文件夹中，在 `_Imports.razor` 中，导入命名空间以使用 EF Core 的异步方法以及与 Northwind
    实体模型一起使用，如下面的代码所示：
- en: '[PRE26]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Importing the namespaces here means we do not have to import them at the top
    of `.razor` files. The `_Imports.razor` file only applies to `.razor` files. If
    you use code-behind `.cs` files to implement component code, then they must have
    namespaces imported separately, or use global usings to implicitly import the
    namespace. Note the statement to statically import the render mode type: `@using
    static Microsoft.AspNetCore.Components.Web.RenderMode`.'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此处导入命名空间意味着我们不需要在 `.razor` 文件顶部导入它们。`_Imports.razor` 文件仅适用于 `.razor` 文件。如果您使用代码背后的
    `.cs` 文件来实现组件代码，那么它们必须单独导入命名空间，或者使用全局使用来隐式导入命名空间。注意静态导入渲染模式类型的语句：`@using static
    Microsoft.AspNetCore.Components.Web.RenderMode`。
- en: 'In `Program.cs`, import the namespace to use the `AddNorthwindContext` extension
    method, as shown in the following code:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，导入命名空间以使用 `AddNorthwindContext` 扩展方法，如下面的代码所示：
- en: '[PRE27]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In the section that adds services to the container, add a statement that registers
    `NorthwindContext` as a service, as shown in the following code:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在添加服务到容器部分的区域，添加一个语句将 `NorthwindContext` 注册为服务，如下面的代码所示：
- en: '[PRE28]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Building a static server rendered component for data
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建用于数据的静态服务器端渲染组件
- en: Next, we will add a component that can do the same job as a Razor Page or Razor
    View in a traditional ASP.NET Core website. It will not have any interactivity
    that requires the component to execute on the server or client.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将添加一个组件，它可以完成与传统 ASP.NET Core 网站中的 Razor 页面或 Razor 视图相同的工作。它不会有任何需要组件在服务器或客户端上执行的交互性。
- en: 'It will allow the visitor to see a table of products from the Northwind database:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许访问者查看来自 Northwind 数据库的产品表：
- en: In the `Components\Pages` folder, add a new file named `Products.razor`. In
    Visual Studio 2022, the project item template is named **Razor Component**. In
    JetBrains Rider, the project item template is named **Blazor Component**.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Components\Pages`文件夹中，添加一个名为`Products.razor`的新文件。在Visual Studio 2022中，项目项模板命名为**Razor
    Component**。在JetBrains Rider中，项目项模板命名为**Blazor Component**。
- en: '**Good Practice**: Component filenames must start with an uppercase letter,
    or you will have compile errors!'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**良好实践**：组件文件名必须以大写字母开头，否则将出现编译错误！'
- en: 'In `Products.razor`, set the route to `/products`, inject a Northwind data
    context, define a table to render products, and write a code block to get the
    products when the page has initialized, as shown in the following markup:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Products.razor`中，设置路由到`/products`，注入Northwind数据上下文，定义一个表格以渲染产品，并编写代码块以在页面初始化时获取产品，如下所示，代码标记：
- en: '[PRE29]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In the `Components\Layout` folder, in `NavMenu.razor`, after the menu item
    to navigate to the home page, add a menu item to navigate to the products page,
    as shown in the following markup:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Components\Layout`文件夹中的`NavMenu.razor`，在导航到主页的菜单项之后，添加一个导航到产品页面的菜单项，如下所示，代码标记：
- en: '[PRE30]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: If your database server is not running, (for example, because you are hosting
    it in Docker, a virtual machine, or the cloud), then make sure to start it.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您的数据库服务器没有运行（例如，因为您正在Docker、虚拟机或云中托管它），那么请确保启动它。
- en: Start the `Northwind.Blazor` project, using its `https` profile without debugging.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用不带调试的`https`配置启动`Northwind.Blazor`项目。
- en: In the left-side navigation, click **Products**, and note the table of products.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧导航中点击**Products**，并注意产品表。
- en: Close the browser and shut down the web server.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭浏览器并关闭Web服务器。
- en: Building a component with server interactivity
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建具有服务器交互性的组件
- en: 'Next, we will add a component that requires some interactivity, so we will
    enable Blazer with SignalR to dynamically update the browser DOM live at runtime:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将添加一个需要一些交互性的组件，因此我们将启用Blazer与SignalR一起动态更新浏览器DOM，实时运行时：
- en: In the `Components` folder, add a new file named `Counter.razor`.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Components`文件夹中，添加一个名为`Counter.razor`的新文件。
- en: 'In `Counter.razor`, define a label to render the current value of the counter
    number, and a button to increment it, and a code block to store the current counter
    value with a click event handler, to increment the number, as shown in the following
    markup:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Counter.razor`中，定义一个标签以渲染计数器数字的当前值，一个按钮以增加它，以及一个代码块以存储当前计数器值和点击事件处理程序，以增加数字，如下所示，代码标记：
- en: '[PRE31]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Note that this component will not act as a page, so we do not decorate it with
    the `@page` directive or define a route to the component. It will only be used
    embedded in some other component.
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，此组件不会作为页面使用，因此我们不会用`@page`指令装饰它或定义组件的路由。它将仅用于嵌入到其他组件中。
- en: 'In the `Components\Pages` folder, in `Home.razor`, at the bottom of the page,
    render the counter component, as shown in the following markup:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Components\Pages`文件夹中的`Home.razor`，在页面底部，渲染计数器组件，如下所示，代码标记：
- en: '[PRE32]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Start the `Northwind.Blazor` project, using its `https` profile without debugging.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用不带调试的`https`配置启动`Northwind.Blazor`项目。
- en: On the home page, click the button, and note that nothing happens. When you
    create a project using the Blazor Web App template with the `--interactivity None`
    switch or the **Interactive render mode** set to **None**, no component interactivity
    is enabled in a Blazor Web App project.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主页上点击按钮，注意没有任何操作。当您使用带有`--interactivity None`开关的Blazor Web App模板创建项目或将**交互渲染模式**设置为**None**时，在Blazor
    Web App项目中不会启用组件交互性。
- en: Close the browser and shut down the web server.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭浏览器并关闭Web服务器。
- en: 'In `Program.cs`, at the end of the statement that adds Razor components, add
    a call to a method to add interactive server components, as shown highlighted
    in the following code:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，在添加Razor组件的语句末尾，添加一个调用方法以添加交互式服务器组件的调用，如下所示，代码中高亮显示：
- en: '[PRE33]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'In `Program.cs`, at the end of the statement that maps Razor components, add
    a call to a method to add interactive server render mode, as shown highlighted
    in the following code:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，在映射Razor组件的语句末尾，添加一个调用方法以添加交互式服务器渲染模式，如下所示，代码中高亮显示：
- en: '[PRE34]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'In the `Components` folder, in `Counter.razor`, at the top of the file, add
    a directive to set render mode to interactive server, as shown in the following
    markup:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Components`文件夹中的`Counter.razor`，在文件顶部，添加一个指令以设置渲染模式为交互式服务器，如下所示，代码标记：
- en: '[PRE35]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Start the `Northwind.Blazor` project, using its `https` profile without debugging.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用不带调试的`https`配置启动`Northwind.Blazor`项目。
- en: 'In **Developer Tools**, click the **Console** tab, and note the `blazor.web.js`
    files establishes a WebSocket connection, as shown in the following output:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **开发者工具** 中，点击 **控制台** 选项卡，并注意 `blazor.web.js` 文件建立了一个 WebSocket 连接，如下面的输出所示：
- en: '[PRE36]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: In **Developer Tools**, click the **Network** tab, click **WS** to filter by
    WebSockets, and refresh the home page.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **开发者工具** 中，点击 **网络** 选项卡，点击 **WS** 以通过 WebSockets 过滤，然后刷新主页。
- en: 'On the home page, click the **Increment** button, note the counter increments,
    note the **_blazor?id=...** request, select the request for **_blazor?id=...**,
    and click the **Initiator** tab, and note that the initiator was the `blazor.web.js`
    file that is added to all pages by the `App.razor` file, as shown in *Figure*
    *15.2*:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主页上，点击 **Increment** 按钮，注意计数器的增加，注意 **_blazor?id=...** 请求，选择该请求的 **_blazor?id=...**，然后点击
    **Initiator** 选项卡，并注意发起者是添加到所有页面中的 `blazor.web.js` 文件，如图 *15.2* 所示：
- en: '![](img/B19587_15_02.png)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19587_15_02.png)'
- en: 'Figure 15.2: Blazor.web.js requests to SignalR on the server to update the
    DOM for live interactivity'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.2：Blazor.web.js 向服务器上的 SignalR 发送请求以更新 DOM 以实现实时交互
- en: Close the browser and shut down the web server.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭浏览器并关闭 web 服务器。
- en: Building a Blazor progress bar component
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建 Blazor 进度条组件
- en: 'In this section, we will build a component to provide a progress bar. It will
    use Bootstrap classes to set a stripped light blue color, with options to animate
    the bar and show the current value of the progress as a percentage:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将构建一个组件以提供进度条。它将使用 Bootstrap 类设置浅蓝色调，并提供选项来动画化进度条并显示进度值的当前百分比：
- en: In the `Northwind.Blazor` project, in the `Components` folder, add a new file
    named `ProgressBar.razor`.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Blazor` 项目的 `Components` 文件夹中，添加一个名为 `ProgressBar.razor` 的新文件。
- en: 'In `ProgressBar.razor`, add statements to render `<div>` elements that use
    Bootstrap classes to define a progress bar with bindable parameters, setting various
    properties, as shown in the following markup:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `ProgressBar.razor` 中，添加语句以渲染使用 Bootstrap 类定义的进度条 `<div>` 元素，这些元素具有可绑定参数，设置各种属性，如下所示的高亮标记：
- en: '[PRE37]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'In the `Components\Pages` folder, in `Home.razor`, at the bottom of the file,
    add statements to define a Bootstrap row with two equal columns, and add a `<ProgressBar>`
    component set to 25%, as shown in the following markup:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Components\Pages` 文件夹中，在 `Home.razor` 文件的底部，添加语句以定义一个 Bootstrap 行，包含两个等宽的列，并添加一个设置为
    25% 的 `<ProgressBar>` 组件，如下所示的高亮标记：
- en: '[PRE38]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Start the `Northind.Blazor` project, using its `https` profile without debugging.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `Northind.Blazor` 项目的 `https` 配置文件启动项目，不进行调试。
- en: Note the progress bar that shows the progress of the (simulated!) database deletion.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意显示（模拟！）数据库删除进度的进度条。
- en: Close the browser and shut down the web server.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭浏览器并关闭 web 服务器。
- en: Building a Blazor dialog box component
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建 Blazor 对话框组件
- en: In this section, we will build a component to provide a popup dialog box for
    interaction with the website visitor. It will use Bootstrap classes to define
    a button that, when clicked, shows a dialog box with two buttons with configurable
    labels.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将构建一个组件，为与网站访客的交互提供一个弹出对话框。它将使用 Bootstrap 类来定义一个按钮，当点击时，会显示一个带有可配置标签的两个按钮的对话框。
- en: By default, the Blazor Web App project template uses a local copy of Bootstrap
    5.1 but only the CSS part. We will need to add a script tag to add the JavaScript
    parts of Bootstrap. We may as well upgrade to the latest version of Bootstrap
    and use the CDN version too.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Blazor Web App 项目模板使用 Bootstrap 5.1 的本地副本，但仅包含 CSS 部分。我们需要添加一个脚本标签来添加
    Bootstrap 的 JavaScript 部分。我们也可以升级到 Bootstrap 的最新版本并使用 CDN 版本。
- en: 'You can find the latest CDN links at the following link: [https://getbootstrap.com/docs/5.3/getting-started/introduction/#cdn-links](https://getbootstrap.com/docs/5.3/getting-started/introduction/#cdn-links).'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接中找到最新的 CDN 链接：[https://getbootstrap.com/docs/5.3/getting-started/introduction/#cdn-links](https://getbootstrap.com/docs/5.3/getting-started/introduction/#cdn-links)。
- en: The component will also define two event callbacks that can be handled by the
    parent to customize what code executes when the two buttons are clicked.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 该组件还将定义两个事件回调，父组件可以处理这些回调以自定义在两个按钮被点击时执行的代码。
- en: 'In `App.razor`, comment out the `<link>` to the local CSS file and add a reference
    to the latest CDN version, as shown highlighted in the following markup:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `App.razor` 中，注释掉指向本地 CSS 文件的 `<link>`，并添加对最新 CDN 版本的引用，如下所示的高亮标记：
- en: '[PRE39]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'In `App.razor`, after the `<script>` tag for Blazor, add a `<script>` to the
    latest CDN version, and suppress error `RZ/BL9992`, as shown in the following
    markup:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `App.razor` 中，在 Blazor 的 `<script>` 标签之后，添加一个指向最新 CDN 版本的 `<script>`，并抑制错误
    `RZ/BL9992`，如下所示：
- en: '[PRE40]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: We suppress the error BL9992 (also referred to as RZ9992), which warns that,
    “Script tags should not be placed inside components because they cannot be updated
    dynamically.” For more information, see [https://aka.ms/AAe3qu3](https://aka.ms/AAe3qu3).
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们抑制了错误 BL9992（也称为 RZ9992），该错误警告说：“脚本标签不应放置在组件内部，因为它们无法动态更新。” 更多信息，请参阅 [https://aka.ms/AAe3qu3](https://aka.ms/AAe3qu3)。
- en: In the `Northwind.Blazor` project, in the `Components` folder, add a new file
    named `DialogBox.razor`.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Blazor` 项目中，在 `Components` 文件夹中，添加一个名为 `DialogBox.razor` 的新文件。
- en: 'In `DialogBox.razor`, add statements to render `<div>` elements that use Bootstrap
    classes to define a button and modal dialog box with bindable parameters, setting
    various properties, as shown in the following markup:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `DialogBox.razor` 文件中，添加语句以渲染使用 Bootstrap 类定义按钮和模态对话框的 `<div>` 元素，并设置可绑定参数，以及各种属性，如下所示：
- en: '[PRE41]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Note that the two buttons have default text values of `OK` and `Cancel`, and
    they both have event callback parameters that will have information about the
    mouse pointer passed as event arguments. Also, note the button with `class="btn-close"`
    that visually appears as the **X** button in the top-right corner to close the
    dialog.
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意到两个按钮的默认文本值为 `OK` 和 `Cancel`，它们都有事件回调参数，这些参数将包含作为事件参数传递的鼠标指针信息。此外，注意具有 `class="btn-close"`
    的按钮，它在右上角以 **X** 按钮的形式视觉上出现，用于关闭对话框。
- en: 'In the `Components\Pages` folder, in `Home.razor`, at the top of the file,
    add statements to set render mode as the interactive server, as shown in the following
    markup:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Components\Pages` 文件夹中，在 `Home.razor` 文件中，靠近文件顶部，添加语句以设置渲染模式为交互式服务器，如下所示：
- en: '[PRE42]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'In the `Components\Pages` folder, in `Home.razor`, near the bottom of the file,
    replace the text `More components coming soon` with statements to add a `<DialogBox>`
    component that sets the two button labels to `Yes` and `No`, and then at the bottom
    of the file, add a Razor code block to define event handlers for the two click
    events that output which button was clicked and the current position of the mouse
    pointer, as shown highlighted in the following markup:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Components\Pages` 文件夹中，在 `Home.razor` 文件中，靠近文件底部，将文本 `更多组件即将推出` 替换为添加 `<DialogBox>`
    组件的语句，设置两个按钮标签为 `是` 和 `否`，然后在文件底部，添加一个 Razor 代码块以定义两个点击事件的处理器，输出被点击的按钮和鼠标指针的当前位置，如下所示：
- en: '[PRE43]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Any content between the `<DialogBox>` and `</DialogBox>` elements is automatically
    set as the `ChildContent` property.
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 `<DialogBox>` 和 `</DialogBox>` 元素之间的任何内容都将自动设置为 `ChildContent` 属性。
- en: Start the `Northwind.Blazor` project, using its `https` profile without debugging.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用其 `https` 配置文件启动 `Northwind.Blazor` 项目，不进行调试。
- en: 'Click the **Delete Database** button, and note the modal dialog box that pops
    up, as shown in *Figure 15.3*:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **删除数据库** 按钮，并注意弹出的模态对话框，如图 *15.3* 所示：
- en: '![](img/B19587_15_03.png)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19587_15_03.png)'
- en: 'Figure 15.3: A pop-up modal dialog box that a Blazor component built using
    Bootstrap'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.3：使用 Bootstrap 构建的 Blazor 组件的弹出模态对话框
- en: Arrange the command prompt or terminal and the browser window so that you can
    see both.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将命令提示符或终端窗口和浏览器窗口排列，以便您可以看到两者。
- en: In the **Delete Database** dialog box, click the **Yes** button and **No** button
    a few times (clicking the **No** button or the **x** button will close the dialog,
    so click the **Delete Database** button again to reshow the dialog box), and note
    the messages written to the console, as shown in *Figure 15.4*:![](img/B19587_15_04.png)
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **删除数据库** 对话框中，点击 **是** 按钮和 **否** 按钮几次（点击 **否** 按钮或 **x** 按钮将关闭对话框，因此再次点击
    **删除数据库** 按钮以重新显示对话框），并注意写入控制台的消息，如图 *15.4* 所示：![](img/B19587_15_04.png)
- en: 'Figure 15.4: The dialog box component writing to the server console'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 15.4：写入服务器控制台的对话框组件
- en: JavaScript in the client displays the Bootstrap dialog box. Clicks on the buttons
    trigger the SignalR connection over WebSockets to execute the component event
    handling code, executing on the server.
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 客户端的 JavaScript 显示 Bootstrap 对话框。按钮点击将触发通过 WebSocket 的 SignalR 连接以执行服务器端组件事件处理代码。
- en: Close the browser, and shut down the web server.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭浏览器，并关闭 web 服务器。
- en: 'You can read more about the supported event arguments at the following link:
    [https://learn.microsoft.com/en-us/aspnet/core/blazor/components/event-handling#event-arguments](https://learn.microsoft.com/en-us/aspnet/core/blazor/components/event-handling#event-arguments).'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下链接中了解更多关于支持的事件参数：[https://learn.microsoft.com/en-us/aspnet/core/blazor/components/event-handling#event-arguments](https://learn.microsoft.com/en-us/aspnet/core/blazor/components/event-handling#event-arguments)。
- en: Building a Blazor alert component
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建 Blazor 警报组件
- en: 'In this section, we will build a component to provide alerts to show messages
    to the website visitor. It will use Bootstrap classes to define a colorful area
    for the message, which can be dismissed. The message, title, icon, and color theme
    can be configured:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将构建一个组件，用于向网站访客显示消息警报。它将使用 Bootstrap 类定义一个多彩的区域来显示消息，可以取消显示。消息、标题、图标和颜色主题可以配置：
- en: In the `Northwind.Blazor` project, in the `Components` folder, add a new file
    named the `Bootstrap.Constants.cs` file.
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Blazor` 项目中，在 `Components` 文件夹中，添加一个名为 `Bootstrap.Constants.cs`
    的新文件。
- en: 'In `Bootstrap.Constants.cs`, add statements to define some static classes with
    `string` constant values for common Bootstrap color themes and icons, as shown
    in the following code:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Bootstrap.Constants.cs` 文件中，添加语句以定义一些具有 `string` 常量值的静态类，用于常见的 Bootstrap
    颜色主题和图标，如下所示，高亮显示的以下代码：
- en: '[PRE44]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: In the `Components` folder, add a new file named `Alert.razor`.
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Components` 文件夹中，添加一个名为 `Alert.razor` 的新文件。
- en: 'In `Alert.razor`, add statements to render `<div>` elements that use Bootstrap
    classes to define a `<div>` with bindable parameters, setting various properties,
    as shown in the following markup:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Alert.razor` 文件中，添加语句以渲染使用 Bootstrap 类定义的 `<div>` 元素，这些元素具有可绑定参数，设置各种属性，如下所示，高亮显示的以下标记：
- en: '[PRE45]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'In the `Components\Pages` folder, in `Home.razor`, add an `Alert` element below
    the `<DialogBox>` element, as shown in the following markup:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Components\Pages` 文件夹中，在 `Home.razor` 文件中，在 `<DialogBox>` 元素下方添加一个 `Alert`
    元素，如下所示，高亮显示的以下标记：
- en: '[PRE46]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Start the `Northwind.Blazor` project, using its `https` profile without debugging.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 `Northwind.Blazor` 项目，使用其 `https` 配置文件，不进行调试。
- en: 'On the home page, note the warning alert, as shown in *Figure 15.5*:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主页上，注意警告警报，如图 *15.5* 所示：
- en: '![](img/B19587_15_05.png)'
  id: totrans-271
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19587_15_05.png)'
- en: 'Figure 15.5: The alert component with a dismiss button'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 图 *15.5*：具有取消按钮的警报组件
- en: Click the close button to dismiss the warning.
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击关闭按钮以取消警告。
- en: Close the browser, and shut down the web server.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭浏览器，并关闭网络服务器。
- en: Building a Blazor data component
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建 Blazor 数据组件
- en: In this section, we will build a component that will list, create, and edit
    employees in the Northwind database.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将构建一个组件，该组件将列出、创建和编辑 Northwind 数据库中的员工。
- en: 'We will build it over several steps:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将分几个步骤来构建它：
- en: Make a Blazor component that renders the name of an employee, set as a parameter.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 Blazor 组件，用于渲染作为参数设置的员工名称。
- en: Make it work as a routable page as well as a component.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使其既作为一个可路由页面，也作为一个组件。
- en: Build and call an ASP.NET Core Minimal APIs web service.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建并调用 ASP.NET Core 最小 API 网络服务。
- en: Call the web service in the component.
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在组件中调用网络服务。
- en: Making the component
  id: totrans-282
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 制作组件
- en: 'We will add the new component to the existing Blazor project:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向现有的 Blazor 项目添加新组件：
- en: In the `Northwind.Blazor` project, in the `Components\Pages` folder, add a new
    file named `Employees.razor`.
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Blazor` 项目中，在 `Components\Pages` 文件夹中，添加一个名为 `Employees.razor`
    的新文件。
- en: 'Add statements to output a heading for the `Employees` component and define
    a code block, defining a property to store the name of a country, as shown highlighted
    in the following markup:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加语句以输出 `Employees` 组件的标题并定义一个代码块，定义一个属性来存储国家名称，如下所示，高亮显示的以下标记：
- en: '[PRE47]'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'In the `Components\Pages` folder, in `Home.razor`, after the welcome message,
    instantiate the `Employees` component twice: once setting `USA` as the `Country`
    parameter, and once without setting the country, as shown highlighted in the following
    markup:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Components\Pages` 文件夹中，在 `Home.razor` 文件中，在欢迎信息之后，实例化 `Employees` 组件两次：一次将
    `USA` 设置为 `Country` 参数，一次不设置国家，如下所示，高亮显示的以下标记：
- en: '[PRE48]'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Start the `Northwind.Blazor` project, using its `https` profile without debugging.
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 `Northwind.Blazor` 项目，使用其 `https` 配置文件，不进行调试。
- en: 'Start Chrome, navigate to `https://localhost:5151/`, and note the `Employees`
    components, as shown in *Figure 15.6*:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Chrome，导航到 `https://localhost:5151/`，并注意 `Employees` 组件，如图 *15.6* 所示：
- en: '![](img/B19587_15_06.png)'
  id: totrans-291
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19587_15_06.png)'
- en: 'Figure 15.6: The Employees component, with the Country parameter set to USA
    and without parameters set'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 图 *15.6*：设置国家参数为 USA 和未设置参数的 Employees 组件
- en: Close the browser, and shut down the web server.
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭浏览器，并关闭Web服务器。
- en: Making the component a routable page component
  id: totrans-294
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将组件转换为可路由页面组件
- en: 'It is simple to turn this component into a routable page component with a route
    parameter for the country:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 将此组件转换为具有国家路由参数的可路由页面组件很简单：
- en: In the `Components\Pages` folder, in the `Home.razor` component, remove the
    two `<Employee>` elements because we will now use them as pages.
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Components\Pages`文件夹中的`Home.razor`组件中，删除两个`<Employee>`元素，因为我们现在将它们用作页面。
- en: 'In the `Components\Pages` folder, in the `Employees.razor` component, add a
    statement at the top of the file to register `/employees` as its route, with an
    optional country route parameter, as shown highlighted in the following markup:'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Components\Pages`文件夹中的`Employees.razor`组件中，在文件顶部添加一个语句将`/employees`注册为其路由，带有可选的国家路由参数，如下所示：
- en: '[PRE49]'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'In the `Components\Layout` folder, in `NavMenu.razor`, add list item elements
    after **Products** to navigate to show employees worldwide and in the USA or UK,
    as shown in the following markup:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Components\Layout`文件夹中的`NavMenu.razor`中，在**Products**之后添加列表项元素以导航显示全球员工以及在美国或英国，如下所示：
- en: '[PRE50]'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Start the `Northwind.Blazor` project, using its `https` profile without debugging.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动`Northwind.Blazor`项目，使用其`https`配置文件且不进行调试。
- en: Start Chrome and navigate to `https://localhost:5151/`.
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Chrome并导航到`https://localhost:5151/`。
- en: 'In the left navigation menu, click **Employees in USA**. Note that the country
    name is correctly passed to the page component and that the component uses the
    same shared layout as the other page components, like `Home.razor`. Also note
    the URL: `https://localhost:5151/employees/USA`.'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧导航菜单中，点击**Employees in USA**。注意国家名称正确传递给了页面组件，并且该组件使用与其他页面组件相同的共享布局，如`Home.razor`。还要注意URL：`https://localhost:5151/employees/USA`。
- en: Close Chrome, and shut down the web server.
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭Chrome，并关闭Web服务器。
- en: Getting entities into a component by building a web service
  id: totrans-305
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过构建Web服务将实体放入组件中
- en: 'Now that you have seen the minimum implementation of an entity component, we
    can add the functionality to get entities from the server. In this case, we will
    use the Northwind database context to get employees from the database and expose
    it as an ASP.NET Core Minimal APIs web service:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经看到了实体组件的最小实现，我们可以添加从服务器获取实体功能。在这种情况下，我们将使用Northwind数据库上下文从数据库中获取员工并将其作为ASP.NET
    Core Minimal APIs Web服务公开：
- en: 'Use your preferred code editor to add a project to the `Chapter15` solution,
    as defined in the following list:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的代码编辑器将项目添加到`Chapter15`解决方案中，如下列表所示：
- en: 'Project template: **ASP.NET Core Web API** / web`api`'
  id: totrans-308
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '项目模板: **ASP.NET Core Web API** / web`api`'
- en: 'Solution file and folder: `Chapter15`'
  id: totrans-309
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '解决方案文件和文件夹: `Chapter15`'
- en: 'Project file and folder: `Northwind.MinimalApi.Service`'
  id: totrans-310
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '项目文件和文件夹: `Northwind.MinimalApi.Service`'
- en: '**Authentication type**: None'
  id: totrans-311
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**认证类型**: 无'
- en: '**Configure for HTTPS**: Selected'
  id: totrans-312
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置为HTTPS**: 已选择'
- en: '**Enable Docker**: Cleared'
  id: totrans-313
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启用Docker**: 已清除'
- en: '**Enable OpenAPI support**: Selected'
  id: totrans-314
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启用OpenAPI支持**: 已选择'
- en: '**Do not use top-level statements**: Cleared'
  id: totrans-315
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不要使用顶级语句**: 已清除'
- en: '**Use controllers**: Cleared'
  id: totrans-316
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用控制器**: 已清除'
- en: 'Add a project reference to the Northwind database context project for SQL Server
    that you created in *Chapter 3*, *Building Entity Models for SQL Server Using
    EF Core*, as shown in the following markup:'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将项目引用添加到您在*第3章*中创建的Northwind数据库上下文项目，用于SQL Server，如下所示：
- en: '[PRE51]'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The path cannot have a line break. If you did not complete the task of creating
    the class libraries in *Chapter 3*, then download the solution projects from the
    GitHub repository.
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 路径不能有换行符。如果您没有完成*第3章*中创建类库的任务，请从GitHub存储库下载解决方案项目。
- en: 'In the project file, change invariant globalization to `false`, and treat warnings
    as errors, as shown in the following markup:'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目文件中，将不变全球化设置为`false`，并将警告视为错误，如下所示：
- en: '[PRE52]'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'At the command prompt or terminal, build the `Northwind.MinimalApi.Service`
    project to make sure the entity model class library projects outside the current
    solution are properly compiled, as shown in the following command:'
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符或终端中，构建`Northwind.MinimalApi.Service`项目以确保当前解决方案之外的实体模型类库项目被正确编译，如下所示：
- en: '[PRE53]'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'In the `Properties` folder, in `launchSettings.json`, modify the `applicationUrl`
    of the profile named `https` to use port `5153` and `http` to use port `5154`,
    as shown highlighted in the following configuration:'
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Properties`文件夹中的`launchSettings.json`中，将名为`https`的配置文件的`applicationUrl`修改为使用端口`5153`，将`http`修改为使用端口`5154`，如下配置中高亮显示：
- en: '[PRE54]'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'In `Program.cs`, import namespaces to work with Minimal APIs attributes, registering
    the Northwind database context extension method, and serialize JSON, as shown
    in the following code:'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 文件中，导入用于处理 Minimal APIs 属性的命名空间，注册 Northwind 数据库上下文扩展方法，并序列化
    JSON，如下面的代码所示：
- en: '[PRE55]'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'In `Program.cs`, at the end of the section to configure services, before the
    call to `Build`, add a statement to configure the Northwind database context and
    the registered dependency service for JSON options, setting its reference handler
    to preserve references, so that the reference between an employee and their manager
    does not cause a runtime exception due to circular references, as shown in the
    following code:'
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 文件中，在配置服务的部分末尾，在调用 `Build` 之前，添加一条语句来配置 Northwind 数据库上下文和已注册的依赖服务
    JSON 选项，设置其引用处理器以保留引用，这样就不会因为循环引用而导致运行时异常，如下面的代码所示：
- en: '[PRE56]'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Be careful to configure `Microsoft.AspNetCore.Http.Json.JsonOptions` and not
    `Microsoft.AspNetCore.Mvc.JsonOptions`! I have created an alias to make this explicit,
    since we need to import the `Microsoft.AspNetCore.Mvc` namespace of other types.
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意配置 `Microsoft.AspNetCore.Http.Json.JsonOptions` 而不是 `Microsoft.AspNetCore.Mvc.JsonOptions`！我已经创建了一个别名来明确这一点，因为我们还需要导入其他类型的
    `Microsoft.AspNetCore.Mvc` 命名空间。
- en: 'In `Program.cs`, before the call to the `app.Run()` method, add statements
    to define some endpoints to `GET` and `POST` employees, as shown in the following
    code:'
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 文件中，在调用 `app.Run()` 方法之前，添加语句来定义一些用于 `GET` 和 `POST` 员工的端点，如下面的代码所示：
- en: '[PRE57]'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Optionally, delete the statements to set up the `weather` endpoint.
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地，删除设置 `weather` 端点的语句。
- en: Due to the `{id:int}` constraint, a `GET` request to a path like `api/employees/3`
    will map to the `GetEmployeesById` endpoint, and a `GET` request to a path like
    `api/employess/USA` will map to the `GetEmployeesByCountry` endpoint. When `POST`-ing
    to the `api/employees` endpoint, the response includes a URL to the newly created
    employee with its database-assigned ID.
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于 `{id:int}` 约束，对类似 `api/employees/3` 的路径的 `GET` 请求将映射到 `GetEmployeesById`
    端点，而对类似 `api/employess/USA` 的路径的 `GET` 请求将映射到 `GetEmployeesByCountry` 端点。当向 `api/employees`
    端点 `POST` 时，响应将包括一个指向新创建的员工及其数据库分配的 ID 的 URL。
- en: Getting entities into a component by calling the web service
  id: totrans-335
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过调用 web 服务将实体获取到组件中
- en: 'Now, we can add the functionality to the entity component to call the web service:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以向实体组件添加功能以调用 web 服务：
- en: 'In the `Northwind.Blazor` project, in its project file, add a package reference
    for QuickGrid, as shown in the following markup:'
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Blazor` 项目的项目文件中，添加一个对 QuickGrid 的包引用，如下面的标记所示：
- en: '[PRE58]'
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Build the project to restore packages.
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建项目以还原包。
- en: 'In `Program.cs`, import the namespace to work with HTTP headers, as shown in
    the following code:'
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 文件中，导入用于处理 HTTP 标头的命名空间，如下面的代码所示：
- en: '[PRE59]'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'In the `Northwind.Blazor` project, in `Program.cs`, before the call to the
    `builder.Build()`, add statements to configure an HTTP client factory to call
    the web service, as shown in the following code:'
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Blazor` 项目中，在 `Program.cs` 文件中，在调用 `builder.Build()` 之前，添加语句来配置一个
    HTTP 客户端工厂以调用 web 服务，如下面的代码所示：
- en: '[PRE60]'
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'In the `Components` folder, in `_Imports.razor`, import the namespaces to work
    with QuickGrid and serialize JSON, ensuring that the Blazor components we build
    do not need to import the namespaces individually, as shown in the following markup:'
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Components` 文件夹中，在 `_Imports.razor` 文件中，导入与 QuickGrid 和序列化 JSON 相关的命名空间，确保我们构建的
    Blazor 组件不需要单独导入这些命名空间，如下面的标记所示：
- en: '[PRE61]'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'In the `Components\Pages` folder, in `Employees.razor`, add statements to inject
    the HTTP client factory, and then use it to output a grid of either all employees
    or employees in the specific country, as shown highlighted in the following code:'
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Components\Pages` 文件夹中，在 `Employees.razor` 文件中，添加语句以注入 HTTP 客户端工厂，然后使用它来输出所有员工或特定国家的员工网格，如下面高亮显示的代码所示：
- en: '[PRE62]'
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Although the web service has an endpoint that allows you to return only employees
    in a specified country, later we will add caching for employees, so in this implementation
    we will request all employees and use client-side filtering for the bound data
    grid.
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 虽然web服务有一个端点允许你只返回指定国家的员工，但稍后我们将为员工添加缓存，因此在这个实现中，我们将请求所有员工并使用客户端过滤来处理绑定的数据网格。
- en: If your database server is not running, (for example, because you are hosting
    it in Docker, a virtual machine, or in the cloud), then make sure to start it.
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你的数据库服务器没有运行（例如，因为你正在 Docker、虚拟机或云中托管它），那么请确保启动它。
- en: Start the `Northwind.MinimalApi.Service` project, using its `https` profile
    without debugging.
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用不带调试的 `https` 配置启动 `Northwind.MinimalApi.Service` 项目。
- en: Start the `Northwind.Blazor` project, using its `https` profile without debugging.
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用不带调试的 `https` 配置启动 `Northwind.Blazor` 项目。
- en: Start Chrome, and navigate to `https://localhost:5151/`.
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Chrome，并导航到 `https://localhost:5151/`。
- en: 'In the left navigation menu, click **Employees in USA**, and note that the
    grid of employees loads from the web service and renders in the web page, as shown
    in *Figure 15.7*:'
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧导航菜单中，点击 **美国员工**，并注意员工网格是从网络服务加载并在网页中渲染的，如图 *图 15.7* 所示：
- en: '![](img/B19587_15_07.png)'
  id: totrans-354
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19587_15_07.png)'
- en: 'Figure 15.7: The grid of employees in the USA'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.7：美国员工网格
- en: In the left navigation menu, click **Employees in UK**, and note that the grid
    of employees is filtered to only show employees in the UK.
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧导航菜单中，点击 **英国员工**，并注意员工网格被过滤以仅显示英国员工。
- en: Close Chrome, and shut down the web server.
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭 Chrome，并关闭网络服务器。
- en: Practicing and exploring
  id: totrans-358
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习和探索
- en: Test your knowledge and understanding by answering some questions, getting some
    hands-on practice, and exploring this chapter’s topics with deeper research.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 通过回答一些问题、进行一些动手实践，以及更深入地研究本章主题来测试你的知识和理解。
- en: Exercise 15.1 – Test your knowledge
  id: totrans-360
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 15.1 – 测试你的知识
- en: 'Answer the following questions:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 回答以下问题：
- en: What is the benefit of the new Blazor Full Stack hosting model in .NET 8 compared
    to the legacy hosting models like Blazor Server?
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与 Blazor Server 等传统托管模型相比，.NET 8 中的新 Blazor 全栈托管模型有什么好处？
- en: Does Blazor WebAssembly support all features of the latest .NET APIs?
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Blazor WebAssembly 是否支持最新 .NET API 的所有功能？
- en: What is the file extension for Blazor components?
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Blazor 组件的文件扩展名是什么？
- en: How do you set the default layout for all Blazor page components?
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何设置所有 Blazor 页面组件的默认布局？
- en: How do you register a route for a Blazor page component?
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何为 Blazor 页面组件注册路由？
- en: When would you set the `Match` property of a `<NavLink>` component to `NavLinkMatch.All`?
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会在什么情况下将 `<NavLink>` 组件的 `Match` 属性设置为 `NavLinkMatch.All`？
- en: You have imported a custom namespace in the `_Imports.razor` file, but when
    you try to use a class in that namespace in a code-behind file for the Blazor
    component, the class is not found. Why? How can you fix the issue?
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你在 `_Imports.razor` 文件中导入了一个自定义命名空间，但当你尝试在 Blazor 组件的后台代码文件中使用该命名空间中的类时，找不到该类。为什么？如何修复这个问题？
- en: What must you do to a property in a component class to have it set to a query
    string parameter automatically?
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你必须对组件类中的属性执行什么操作才能使其自动设置为查询字符串参数？
- en: What is QuickGrid?
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是 QuickGrid？
- en: How can a Blazor component access browser features like local storage?
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Blazor 组件如何访问浏览器功能，如本地存储？
- en: Exercise 15.2 – Practice building Blazor components
  id: totrans-372
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 15.2 – 练习构建 Blazor 组件
- en: Create a Blazor component named `Carousel` that wraps the Bootstrap classes
    to work with carousels as a component, and then use it to show the eight categories
    in the Northwind database, including images.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `Carousel` 的 Blazor 组件，它包装 Bootstrap 类以作为组件使用轮播图，然后使用它来显示 Northwind 数据库中的八个类别，包括图片。
- en: 'You can learn about the Bootstrap carousel at the following link: [https://getbootstrap.com/docs/5.3/components/carousel/](https://getbootstrap.com/docs/5.3/components/carousel/).'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下链接中了解有关 Bootstrap 轮播图的更多信息：[https://getbootstrap.com/docs/5.3/components/carousel/](https://getbootstrap.com/docs/5.3/components/carousel/)。
- en: Exercise 15.3 – Practice building an IndexedDB interop service
  id: totrans-375
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 15.3 – 练习构建 IndexedDB 互操作服务
- en: Browser local and session storage its okay for storing small amounts of data,
    but if you need a more robust and capable storage in the browser, then you can
    use the IndexedDB API.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器本地和会话存储适用于存储少量数据，但如果你需要在浏览器中拥有更强大和功能丰富的存储，则可以使用 IndexedDB API。
- en: Create a Blazor service named `IndexedDbService`, with a JavaScript module for
    interop, with the IndexedDB API, and then use it to cache the employees.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `IndexedDbService` 的 Blazor 服务，使用 JavaScript 模块进行互操作，使用 IndexedDB API，然后使用它来缓存员工。
- en: 'You can learn more about the methods of the `window.indexedDB` object at the
    following link: [https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API).'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下链接中了解更多关于 `window.indexedDB` 对象的方法：[https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API)。
- en: Exercise 15.4 – Explore topics
  id: totrans-379
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 15.4 – 探索主题
- en: 'Use the links on the following page to learn more details about the topics
    covered in this chapter:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下页面上的链接了解更多关于本章涵盖主题的详细信息：
- en: '[https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-15---building-web-components-using-blazor](https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-15---building-web-components-using-blazor)'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-15---building-web-components-using-blazor](https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-15---building-web-components-using-blazor)'
- en: Exercise 15.5 – Explore Blazor WebAssembly topics
  id: totrans-382
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 15.5 – 探索 Blazor WebAssembly 主题
- en: 'To read more about topics related specifically to Blazor WebAssembly projects,
    I have written an online-only section, found at the following link: [https://github.com/markjprice/apps-services-net8/blob/main/docs/ch15-blazor-webassembly.md](https://github.com/markjprice/apps-services-net8/blob/main/docs/ch15-blazor-webassembly.md).'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于特定于 Blazor WebAssembly 项目的主题，我已编写了一个仅在网络上可用的部分，可在以下链接找到：[https://github.com/markjprice/apps-services-net8/blob/main/docs/ch15-blazor-webassembly.md](https://github.com/markjprice/apps-services-net8/blob/main/docs/ch15-blazor-webassembly.md).
- en: Exercise 15.6 – Explore Progressive Web Apps with Blazor
  id: totrans-384
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 15.6 – 使用 Blazor 探索渐进式 Web 应用
- en: 'To read more about topics related specifically to Blazor PWA support, I have
    written an online-only section, found at the following link: [https://github.com/markjprice/apps-services-net8/blob/main/docs/ch15-blazor-pwa.md](https://github.com/markjprice/apps-services-net8/blob/main/docs/ch15-blazor-pwa.md).'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于特定于 Blazor PWA 支持的主题，我已编写了一个仅在网络上可用的部分，可在以下链接找到：[https://github.com/markjprice/apps-services-net8/blob/main/docs/ch15-blazor-pwa.md](https://github.com/markjprice/apps-services-net8/blob/main/docs/ch15-blazor-pwa.md).
- en: Exercise 15.7 – Leveraging Open Source Blazor Component Libraries
  id: totrans-386
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 15.7 – 利用开源 Blazor 组件库
- en: 'To learn how to use some common Blazor open-source components, I have written
    an online-only section, found at the following link: [https://github.com/markjprice/apps-services-net8/blob/main/docs/ch15-blazor-libraries.md](https://github.com/markjprice/apps-services-net8/blob/main/docs/ch15-blazor-libraries.md).'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何使用一些常见的 Blazor 开源组件，我已编写了一个仅在网络上可用的部分，可在以下链接找到：[https://github.com/markjprice/apps-services-net8/blob/main/docs/ch15-blazor-libraries.md](https://github.com/markjprice/apps-services-net8/blob/main/docs/ch15-blazor-libraries.md).
- en: Summary
  id: totrans-388
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, you learned:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了：
- en: About some important concepts surrounding Blazor, like hosting models, components,
    routing, and how to pass parameters.
  id: totrans-390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 Blazor 的一些重要概念，如托管模型、组件、路由以及如何传递参数。
- en: How to build Blazor components with settable parameters, child content, and
    custom events.
  id: totrans-391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用可设置参数、子内容和自定义事件构建 Blazor 组件。
- en: How to build Blazor components that get data from a web service.
  id: totrans-392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何构建从网络服务获取数据的 Blazor 组件。
- en: In the next chapter, you will learn how to build cross-platform apps for mobile
    and desktop devices, using .NET MAUI.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何使用 .NET MAUI 为移动和桌面设备构建跨平台应用。
- en: Learn more on Discord
  id: totrans-394
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Discord 上了解更多
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the author, and learn about new releases – follow the QR code
    below:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 要加入本书的 Discord 社区 – 在那里你可以分享反馈、向作者提问，并了解新版本 – 请扫描下面的二维码：
- en: '[https://packt.link/apps_and_services_dotnet8](https://packt.link/apps_and_services_dotnet8)'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/apps_and_services_dotnet8](https://packt.link/apps_and_services_dotnet8)'
- en: '![](img/QR_Code3048220001028652625.png)'
  id: totrans-397
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code3048220001028652625.png)'
