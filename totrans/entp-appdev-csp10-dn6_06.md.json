["```cs\nThread loadFileFromDisk = new Thread(LoadFileFromDisk);\n```", "```cs\nvoid LoadFileFromDisk(object? obj)\n```", "```cs\n{\n```", "```cs\n    Thread.Sleep(2000);\n```", "```cs\n    Console.WriteLine(\"data returned from API\");\n```", "```cs\n}\n```", "```cs\nloadFileFromDisk.Start();\n```", "```cs\nThread fetchDataFromAPI = new Thread(FetchDataFromAPI);\n```", "```cs\nvoid FetchDataFromAPI(object? obj)\n```", "```cs\n{\n```", "```cs\n    Thread.Sleep(2000);\n```", "```cs\n    Console.WriteLine(\"File loaded from disk\");\n```", "```cs\n}\n```", "```cs\nfetchDataFromAPI.Start(\"https://dummy/v1/api\"); //Parameterized method\n```", "```cs\nConsole.ReadLine();\n```", "```cs\nThreadPool.QueueUserWorkItem(FetchDataFromAPI);\n```", "```cs\n        public class ImageFile\n```", "```cs\n        {\n```", "```cs\n            string fileName;\n```", "```cs\n            object loadImage;\n```", "```cs\n            public ImageFile(string fileName)\n```", "```cs\n            {\n```", "```cs\n                this.fileName = fileName;\n```", "```cs\n            }\n```", "```cs\n            public object GetImage()\n```", "```cs\n            {\n```", "```cs\n                if (loadImage == null)\n```", "```cs\n                {\n```", "```cs\n                    loadImage = File.ReadAllText(fileName);\n```", "```cs\n                }\n```", "```cs\n                return loadImage;\n```", "```cs\n            }\n```", "```cs\n        }\n```", "```cs\n        object loadImage;\n```", "```cs\n        public object LoadImage\n```", "```cs\n        {\n```", "```cs\n            get\n```", "```cs\n            {\n```", "```cs\n                if (loadImage == null)\n```", "```cs\n                {\n```", "```cs\n                    loadImage = File.ReadAllText(fileName);\n```", "```cs\n                }\n```", "```cs\n                return loadImage;\n```", "```cs\n            }\n```", "```cs\n        }\n```", "```cs\n            public class ImageFile\n            {\n                string fileName;\n                public object LoadImage { get; set; }\n                public ImageFile(string fileName)\n                {\n                    this.fileName = fileName;\n                    this.LoadImage = $\"File {fileName}\n                     loaded from disk\";\n                }\n            }\n    ```", "```cs\n        Lazy<ImageFile> imageFile = new\n         Lazy<ImageFile>(() => new ImageFile(\"test\"));\n        var image = imageFile.Value.LoadImage;\n```", "```cs\n            public class ImageFile\n            {\n                string fileName;\n                public object LoadImage { get; set; }\n                public ImageFile(string fileName)\n                {\n                    this.fileName = fileName;\n                }\n                public object LoadImageFromDisk()\n                {\n                    this.LoadImage = $\"File\n                     {this.fileName} loaded from disk\";\n                    return LoadImage;\n                }\n            }\n    ```", "```cs\n        Func<object> imageFile = new Func<object>(()\n         => { var obj = new ImageFile(\"test\");\n        return obj.LoadImageFromDisk(); });\n        Lazy<object> lazyImage = new\n         Lazy<object>(imageFile);\n        var image = lazyImage.Value;\n```", "```cs\n        object image = null;\n```", "```cs\n        LazyInitializer.EnsureInitialized(ref image, () =>\n```", "```cs\n            {\n```", "```cs\n                var obj = new ImageFile(\"test\");\n```", "```cs\n                return obj.LoadImageFromDisk();\n```", "```cs\n            });\n```", "```cs\n            object locker = new object();\n```", "```cs\n            lock (locker)\n```", "```cs\n            {\n```", "```cs\n                quantity--;\n```", "```cs\n            }\n```", "```cs\nSemaphore quantity = new Semaphore(0, 10);\n```", "```cs\n                Task dataTask = new Task(() =>\n                 FetchDataFromAPI(\"https://foo.com/api\"));\n                dataTask.Start();\n    ```", "```cs\n    Task dataTask = Task.Run(() => FetchDataFromAPI (\"https://foo.com/api\"));\n    ```", "```cs\n    Task dataTask = Task.Factory.StartNew(() => FetchDataFromAPI(\"https://foo.com/api\"));\n    ```", "```cs\nTask t = Task.Factory.StartNew(() =>\n```", "```cs\n             FetchDataFromAPI(\"https://foo.com\"));\n```", "```cs\nt.Wait();\n```", "```cs\nvoid FetchDataFromAPI(string apiURL)\n```", "```cs\n{\n```", "```cs\n     Thread.Sleep(2000);\n```", "```cs\n     Console.WriteLine(\"data returned from API\");\n```", "```cs\n}\n```", "```cs\nTask t = Task.Factory.StartNew(delegate { FetchDataFromAPI(\"https://foo.com\");});\n```", "```cs\n            Task<string> t =\n```", "```cs\n             Task.Factory.StartNew<string>(()\n```", "```cs\n             => FetchDataFromAPI(\"\"));\n```", "```cs\n            t.Wait();\n```", "```cs\n            Console.WriteLine(t.Result);\n```", "```cs\nTask<string> t = Task.Factory.StartNew<string>(() => FetchDataFromAPI(\"\"), TaskCreationOptions.LongRunning);\n```", "```cs\n            try\n```", "```cs\n            {\n```", "```cs\n                Task<string> t =\n```", "```cs\n                 Task.Factory.StartNew<string>(()\n```", "```cs\n                 => FetchDataFromAPI(\"\"));\n```", "```cs\n                t.Wait();\n```", "```cs\n            }\n```", "```cs\n            catch (AggregateException agex)\n```", "```cs\n            {\n```", "```cs\n                //Handle exception\n```", "```cs\n                Console.WriteLine(\n```", "```cs\n                  agex.InnerException.Message);\n```", "```cs\n            }\n```", "```cs\n            cts = new CancellationTokenSource();\n```", "```cs\n            CancellationToken token = cts.Token;\n```", "```cs\n            Task dataFromAPI = Task.Factory.StartNew(()\n```", "```cs\n             => FetchDataFromAPI(new List<string> {\n```", "```cs\n                \"https://foo.com\",\n```", "```cs\n                \"https://foo1.com\",}), token);\n```", "```cs\n            cts.Cancel();\n```", "```cs\n        static string FetchDataFromAPI(List<string>\n```", "```cs\n         apiURL, CancellationToken token)\n```", "```cs\n        {\n```", "```cs\n            Console.WriteLine(\"Task started\");\n```", "```cs\n            int counter = 0;\n```", "```cs\n            foreach (string url in apiURL)\n```", "```cs\n            {\n```", "```cs\n                if (token.IsCancellationRequested)\n```", "```cs\n                {\n```", "```cs\n                    throw new TaskCanceledException($\"data\n```", "```cs\n                     from API returned up to iteration\n```", "```cs\n                       {counter}\");\n```", "```cs\n                    //throw new \n```", "```cs\n                    //OperationCanceledException($\"data \n```", "```cs\n                    //from API returned up to iteration \n```", "```cs\n                    //{counter}\"); \n```", "```cs\n                    // Alternate exception with same result\n```", "```cs\n                    //break; // To handle manually\n```", "```cs\n                }\n```", "```cs\n                Thread.Sleep(1000);\n```", "```cs\n                Console.WriteLine($\"data retrieved from\n```", "```cs\n                 {url} for iteration {counter}\");\n```", "```cs\n                counter++;\n```", "```cs\n            }\n```", "```cs\n            return $\"data from API returned up to iteration\n```", "```cs\n             {counter}\";\n```", "```cs\n        }\n```", "```cs\nCancellationTokenSource cts = new CancellationTokenSource();\n```", "```cs\nCancellationToken token = cts.Token;\n```", "```cs\nTask<string> dataFromAPI;\n```", "```cs\ntry\n```", "```cs\n{\n```", "```cs\n    dataFromAPI = Task.Factory.StartNew<string>(() =>\n```", "```cs\n     FetchDataFromAPI(new List<string> {\n```", "```cs\n    \"https://foo.com\",\"https://foo1.com\",\"https://foo2.com\"\n```", "```cs\n      ,\"https://foo3.com\", \"https://foo4.com\", }, token));\n```", "```cs\n    Thread.Sleep(3000);\n```", "```cs\n    cts.Cancel(); //Trigger cancel notification to \n```", "```cs\n                  //cancellation token\n```", "```cs\n    dataFromAPI.Wait(); // Wait for task completion\n```", "```cs\n    Console.WriteLine(dataFromAPI.Result); // If task is \n```", "```cs\n      //completed display message accordingly\n```", "```cs\n}\n```", "```cs\ncatch (AggregateException agex)\n```", "```cs\n{// Handle exception}\n```", "```cs\n        static Task<string>\n```", "```cs\n         FetchDataFromAPIWithCancellation(List<string>\n```", "```cs\n         apiURL, CancellationToken cancellationToken)\n```", "```cs\n        {\n```", "```cs\n            var tcs = new TaskCompletionSource<string>();\n```", "```cs\n            tcs.TrySetCanceled(cancellationToken);\n```", "```cs\n            // calling overload of long running operation \n```", "```cs\n            // that doesn't support cancellation token\n```", "```cs\n            var dataFromAPI = Task.Factory.StartNew(() =>\n```", "```cs\n             FetchDataFromAPI(apiURL));\n```", "```cs\n            // Wait for the first task to complete\n```", "```cs\n            var outputTask = Task.WhenAny(dataFromAPI,\n```", "```cs\n             tcs.Task);\n```", "```cs\n            return outputTask.Result;\n```", "```cs\n        }\n```", "```cs\n            dataFromAPI = Task.Factory.StartNew(() =>\n```", "```cs\n             FetchDataFromAPIWithCancellation(new\n```", "```cs\n             List<string>\n```", "```cs\n                {\n```", "```cs\n                        \"https://foo.com\",\n```", "```cs\n                        \"https://foo1.com\",\n```", "```cs\n                        \"https://foo2.com\",\n```", "```cs\n                        \"https://foo3.com\",\n```", "```cs\n                        \"https://foo4.com\",\n```", "```cs\n                    }, token)).Result;\n```", "```cs\nTask.Factory.StartNew(() => Task1(1)) // 1+2 = 3\n```", "```cs\n                .ContinueWith(a => Task2(a.Result)) // 3*2 = 6\n```", "```cs\n                    .ContinueWith(b => Task3(b.Result))// 6-2=4\n```", "```cs\n                        .ContinueWith(c => Console.WriteLine(c.Result));\n```", "```cs\nConsole.ReadLine();\n```", "```cs\nstatic int Task1(int a) => a + 2;\n```", "```cs\nstatic int Task2(int a) => a * 2;\n```", "```cs\nstatic int Task3(int a) => a - 2;\n```", "```cs\n            List<int> numbers = Enumerable.Range(1,\n```", "```cs\n             100000).ToList();\n```", "```cs\n            Parallel.For(numbers.First(), numbers.Last(), x\n```", "```cs\n             => CalculatePrime(x));\n```", "```cs\nParallel.ForEach(numbers, x => CalculatePrime(x));\n```", "```cs\nList<int> numbers = Enumerable.Range(1, 1000).ToList();\n```", "```cs\nvar resultList = numbers.AsParallel().Where(I => CalculatePrime\n```", "```cs\n(i)).ToList();\n```", "```cs\nvar primeNumbers = (from i in numbers.AsParallel()where CalculatePrime(i) select i).ToList();\n```", "```cs\nbool CalculatePrime(int num)\n```", "```cs\n{\n```", "```cs\n    bool isDivisible = false;\n```", "```cs\n    for (int i = 2; i <= num / 2; i++)\n```", "```cs\n    {\n```", "```cs\n        if (num % i == 0)\n```", "```cs\n        {\n```", "```cs\n            isDivisible = true;\n```", "```cs\n            break;\n```", "```cs\n        }\n```", "```cs\n    }\n```", "```cs\n    if (!isDivisible && num != 1)\n```", "```cs\n        return true;\n```", "```cs\n    else\n```", "```cs\n        return false;\n```", "```cs\n}\n```", "```cs\nList<int> numbers = Enumerable.Range(1, 100).ToList();\n```", "```cs\ntry\n```", "```cs\n{\n```", "```cs\n       var primeNumbers = (from number in \n```", "```cs\n       numbers.AsParallel() where CalculatePrime(number) == \n```", "```cs\n       true select number).ToList();\n```", "```cs\n  Parallel.ForEach(primeNumbers, (primeNumber) =>\n```", "```cs\n  {\n```", "```cs\n    Console.WriteLine(primeNumber);\n```", "```cs\n  });\n```", "```cs\n}\n```", "```cs\ncatch (AggregateException ex)\n```", "```cs\n{\n```", "```cs\n  Console.WriteLine(ex.InnerException.Message);\n```", "```cs\n}\n```", "```cs\n            (from i in numbers.AsParallel()\n```", "```cs\n             where CalculatePrime(i) == true\n```", "```cs\n             select i).ForAll((primeNumber) =>\n```", "```cs\n               Console.WriteLine(primeNumber));\n```", "```cs\n        private void Button_Click(object sender,\n```", "```cs\n         RoutedEventArgs e)\n```", "```cs\n        {\n```", "```cs\n            var task = \n```", "```cs\n            DownloadFileAsync(\"https://github.com/Ravindra-\n```", "```cs\n            a/largefile/blob/master/README.md\", @$\"{System.IO.Directory.GetCurrentDirectory()}\\download.txt\");\n```", "```cs\n            bool fileDownload = task.Result; // Or \n```", "```cs\n                            //task.GetAwaiter().GetResult()\n```", "```cs\n            if (fileDownload)\n```", "```cs\n            {\n```", "```cs\n                MessageBox.Show(\"file downloaded\");\n```", "```cs\n            }\n```", "```cs\n        }\n```", "```cs\n        private async Task<bool> DownloadFileAsync(string\n```", "```cs\n         url, string path)\n```", "```cs\n        {\n```", "```cs\n            // Create a new web client object\n```", "```cs\n            using WebClient webClient = new WebClient();\n```", "```cs\n            // Add user-agent header to avoid forbidden \n```", "```cs\n            // errors.\n```", "```cs\n            webClient.Headers.Add(\"user-agent\",\n```", "```cs\n              \"Mozilla/5.0 (Windows NT 10.0; WOW64)\");\n```", "```cs\n            byte[] data = await\n```", "```cs\n              webClient.DownloadDataTaskAsync(url);\n```", "```cs\n            // Write data in file.\n```", "```cs\n            Using var fileStream = File.OpenWrite(path);\n```", "```cs\n            {\n```", "```cs\n                await fileStream.WriteAsync(data, 0,\n```", "```cs\n                 data.Length);\n```", "```cs\n            }\n```", "```cs\n            return true;\n```", "```cs\n        }\n```", "```cs\n        private void Button_Click(object sender, RoutedEventArgs e)\n```", "```cs\n        {\n```", "```cs\n            string output = GetAsync().Result; //Blocking \n```", "```cs\n              //code, ideally should cause deadlock.\n```", "```cs\n            MessageBox.Show(output);\n```", "```cs\n        }\n```", "```cs\n        //  Library code        \n```", "```cs\n        public async Task<string> GetAsync()\n```", "```cs\n        {\n```", "```cs\n            var uri = new Uri(\"http://www.google.com\");\n```", "```cs\n            return await new HttpClient().\n```", "```cs\n             GetStringAsync(uri).ConfigureAwait(false);\n```", "```cs\n        }\n```", "```cs\n        private async Task CPUIOResult()\n```", "```cs\n        {\n```", "```cs\n            var doExpensiveCalculationTask = Task.Run(() => \n```", "```cs\n              DoExpensiveCalculation()); //Call a method \n```", "```cs\n              //that does CPU intense operation        \n```", "```cs\n           var downloadFileAsyncTask = DownloadFileAsync();\n```", "```cs\n            await Task.WhenAll(doExpensiveCalculationTask,\n```", "```cs\n             downloadFileAsyncTask);\n```", "```cs\n        }\n```", "```cs\nprivate async Task DownloadFileAsync(string url, string path)\n```", "```cs\n        {\n```", "```cs\n            // Implementation\n```", "```cs\n        }\n```", "```cs\n        private float DoExpensiveCalculation()\n```", "```cs\n        {\n```", "```cs\n            //Implementation\n```", "```cs\n        }\n```", "```cs\nlong elapsedTime = AsyncLambda(async() =>\n```", "```cs\n{\n```", "```cs\n    await Task.Delay(1000);\n```", "```cs\n});\n```", "```cs\nConsole.WriteLine(elapsedTime);\n```", "```cs\nConsole.ReadLine();\n```", "```cs\nstatic long AsyncLambda(Action a)\n```", "```cs\n{\n```", "```cs\n    Stopwatch sw = new Stopwatch();\n```", "```cs\n    sw.Start();\n```", "```cs\n    for (int i = 0; i < 10; i++)\n```", "```cs\n    {\n```", "```cs\n        a();\n```", "```cs\n    }\n```", "```cs\n    return sw.ElapsedMilliseconds;\n```", "```cs\n}\n```", "```cs\n        async static Task<long> AsyncLambda(Func<Task> a)\n```", "```cs\n        {\n```", "```cs\n            Stopwatch sw = new Stopwatch();\n```", "```cs\n            sw.Start();\n```", "```cs\n            for (int i = 0; i < 10; i++)\n```", "```cs\n            {\n```", "```cs\n                await a();\n```", "```cs\n            }\n```", "```cs\n            return sw.ElapsedMilliseconds;\n```", "```cs\n        }\n```", "```cs\n        static async Task Main(string[] args)\n```", "```cs\n        {\n```", "```cs\n            var employeeTotal = await\n```", "```cs\n             GetEmployeeIDAsync(5);\n```", "```cs\n            foreach (int i in employeeTotal)\n```", "```cs\n            {\n```", "```cs\n                Console.WriteLine(i);\n```", "```cs\n            }\n```", "```cs\n        }\n```", "```cs\n        static async Task<IEnumerable<int>>\n```", "```cs\n         GetEmployeeIDAsync(int input)\n```", "```cs\n        {\n```", "```cs\n            int id = 0;\n```", "```cs\n            List<int> tempID = new List<int>();\n```", "```cs\n            for (int i = 0; i < input; i++) //Some async DB \n```", "```cs\n              //iterator method like ReadNextAsync\n```", "```cs\n            {\n```", "```cs\n                await Task.Delay(1000); // simulate async\n```", "```cs\n                id += i; // Hypothetically calculation\n```", "```cs\n                tempID.Add(id);\n```", "```cs\n            }\n```", "```cs\n            return tempID;\n```", "```cs\n        }\n```", "```cs\nyield return id;\n```", "```cs\nThe body of 'Program.GetEmployeeIDAsync(int)' cannot be an iterator block because 'Task<IEnumerable<int>>' is not an iterator interface type\n```", "```cs\nawait foreach (int i in GetEmployeeIDAsync(5))\n```", "```cs\n    {\n```", "```cs\n        Console.WriteLine(i);\n```", "```cs\n    }       \n```", "```cs\nstatic async IAsyncEnumerable<int>\n```", "```cs\n GetEmployeeIDAsync(int input)\n```", "```cs\n{\n```", "```cs\n    int id = 0;\n```", "```cs\n    List<int> tempID = new List<int>();\n```", "```cs\n    for (int i = 0; i < input; i++)\n```", "```cs\n    {\n```", "```cs\n        await Task.Delay(1000);\n```", "```cs\n        id += i; // Hypothetically calculation\n```", "```cs\n        yield return id;\n```", "```cs\n    }\n```", "```cs\n}\n```", "```cs\n// Task t1 as one operation from a client who is adding to the dictionary.\n```", "```cs\nDictionary<int, string> employeeDictionary = new Dictionary<int, string>();            \n```", "```cs\n            Task t1 = Task.Factory.StartNew(() =>\n```", "```cs\n            {\n```", "```cs\n                for (int i = 0; i < 100; ++i)\n```", "```cs\n                {\n```", "```cs\n                    employeeDictionary.TryAdd(i, \"Employee\"\n```", "```cs\n                     + i.ToString());\n```", "```cs\n                    Thread.Sleep(100);\n```", "```cs\n                }\n```", "```cs\n            });\n```", "```cs\n            Task t2 = Task.Factory.StartNew(() =>\n```", "```cs\n            {\n```", "```cs\n                Thread.Sleep(500);\n```", "```cs\n                foreach (var item in employeeDictionary)\n```", "```cs\n                {\n```", "```cs\n                    Console.WriteLine(item.Key + \"-\" +\n```", "```cs\n                      item.Value);\n```", "```cs\n                    Thread.Sleep(100);\n```", "```cs\n                }\n```", "```cs\n            });\n```", "```cs\ntry\n```", "```cs\n            {\n```", "```cs\n                Task.WaitAll(t1, t2); // Not recommended to \n```", "```cs\n                  //use in production application.\n```", "```cs\n            }\n```", "```cs\n            catch (AggregateException ex)\n```", "```cs\n            {\n```", "```cs\n                Console.WriteLine(ex.Flatten().Message);\n```", "```cs\n            }\n```", "```cs\n            Console.ReadLine();\n```", "```cs\n    Dictionary<int, string> employeeDictionary = new Dictionary<int, string>();            \n                Task t1 = Task.Factory.StartNew(() =>\n                {\n                    for (int i = 0; i < 100; ++i)\n                    {\n                        //Lock the shared data\n                        lock (syncObject)\n                        {\n                            employeeDictionary.TryAdd(i,\n                              \"Employee\" + i.ToString());\n                        }\n                        Thread.Sleep(100);\n\n                    }\n                });\n    ```", "```cs\n                Task t2 = Task.Factory.StartNew(() =>\n                {\n                    Thread.Sleep(500);\n                    //Lock the shared data\n                    lock (syncObject)\n                    {\n                        foreach (var item in\n                         employeeDictionary)\n                        {\n                            Console.WriteLine(item.Key + \n                              \"-\" + item.Value);\n                            Thread.Sleep(100);\n                        }\n                    }\n                });\n    ```", "```cs\n    try\n                {\n                    Task.WaitAll(t1, t2); // Not \n                      //recommended to use in production \n                      //application.\n                }\n                catch (AggregateException ex)\n                {\n                    Console.WriteLine(ex.Flatten()\n                      .Message);\n                }\n                Console.ReadLine();\n    ```", "```cs\nConcurrentDictionary<int, string> employeeDictionary = new ConcurrentDictionary<int, string>();\n            Task t1 = Task.Factory.StartNew(() =>\n            {\n                for (int i = 0; i < 100; ++i)\n                {\n                    employeeDictionary.TryAdd(i, \n                      \"Employee\"\n                      + i.ToString());\n                    Thread.Sleep(100);\n\n                }\n            });\n```", "```cs\n                Task t2 = Task.Factory.StartNew(() =>\n                {\n                    Thread.Sleep(500);\n                    foreach (var item in \n                      employeeDictionary)\n                    {\n                        Console.WriteLine(item.Key + \"-\" +\n                           item.Value);\n                        Thread.Sleep(100);\n                    }\n                });\n    ```", "```cs\n    try\n                {\n                    Task.WaitAll(t1, t2);\n                }\n                catch (AggregateException ex) // You will \n                  //not get Exception\n                {\n                    Console.WriteLine(ex.Flatten()\n                      .Message);\n                }\n                Console.ReadLine();\n    ```", "```cs\n// Returns: true if the object was added successfully; otherwise, false.        \n```", "```cs\nbool TryAdd(T item);\n```", "```cs\n// Returns true if an object was removed and returned successfully; otherwise, false.\n```", "```cs\nbool TryTake([MaybeNullWhen(false)] out T item);\n```", "```cs\n//Producer: Client sending request to web service and server storing the request in queue.\n```", "```cs\nConcurrentQueue<string> concurrentQueue = new ConcurrentQueue<string>();            \n```", "```cs\n            Task t1 = Task.Factory.StartNew(() =>\n```", "```cs\n            {\n```", "```cs\n                for (int i = 0; i < 10; ++i)\n```", "```cs\n                {\n```", "```cs\n                    concurrentQueue.Enqueue(\"Web request \" \n```", "```cs\n                      + i);\n```", "```cs\n                    Console.WriteLine(\"Sending \"+ \"Web \n```", "```cs\n                      request \" + i);\n```", "```cs\n                    Thread.Sleep(100);\n```", "```cs\n                }\n```", "```cs\n            });\n```", "```cs\n            Task t2 = Task.Factory.StartNew(() =>\n```", "```cs\n            {\n```", "```cs\n                while (true)\n```", "```cs\n                {\n```", "```cs\n                    if (concurrentQueue.TryDequeue(out\n```", "```cs\n                     string request))\n```", "```cs\n                    {\n```", "```cs\n                        Console.WriteLine(\"Processing \"+\n```", "```cs\n                         request);\n```", "```cs\n                    }\n```", "```cs\n                    else\n```", "```cs\n                    {\n```", "```cs\n                        Console.WriteLine(\"No request\");\n```", "```cs\n                    }\n```", "```cs\n                }\n```", "```cs\n            });\n```", "```cs\ntry\n```", "```cs\n            {                \n```", "```cs\n                Task.WaitAll(new Task[] { t1, t2 }, 1000);\n```", "```cs\n            }\n```", "```cs\n            catch (AggregateException ex) // No exception\n```", "```cs\n            {\n```", "```cs\n                Console.WriteLine(ex.Flatten().Message);\n```", "```cs\n            }\n```", "```cs\nIProducerConsumerCollection<string> concurrentQueue = new ConcurrentQueue<string>();\n```", "```cs\n//Removed code for brevity.\n```", "```cs\nTask t1 = Task.Factory.StartNew(() =>\n```", "```cs\n            {\n```", "```cs\n                for (int i = 0; i < 10; ++i)\n```", "```cs\n                {\n```", "```cs\n                    concurrentQueue.TryAdd(\"Web request \" + \n```", "```cs\n                      i);\n```", "```cs\n//Removed code for brevity.\n```", "```cs\nTask t2 = Task.Factory.StartNew(() =>\n```", "```cs\n            {\n```", "```cs\n                while (true)\n```", "```cs\n                {\n```", "```cs\n                    if (concurrentQueue.TryTake(out string\n```", "```cs\n                     request))\n```", "```cs\n//Removed code for brevity.\n```", "```cs\nBlockingCollection<string> blockingCollection = new BlockingCollection<string>(new ConcurrentQueue<string>(),5);    \n```", "```cs\n            Task t1 = Task.Factory.StartNew(() =>\n```", "```cs\n            {\n```", "```cs\n                for (int i = 0; i < 10; ++i)\n```", "```cs\n                {\n```", "```cs\n                    blockingCollection.TryAdd(\"Web request\n```", "```cs\n                     \" + i);\n```", "```cs\n                    Console.WriteLine(\"Sending \" + \"Web\n```", "```cs\n                      request \" + i);\n```", "```cs\n                    Thread.Sleep(100);\n```", "```cs\n                }\n```", "```cs\n                blockingCollection.CompleteAdding();\n```", "```cs\n            });\n```", "```cs\n            Task t2 = Task.Factory.StartNew(() =>\n```", "```cs\n            {\n```", "```cs\n                while (!blockingCollection.IsCompleted)\n```", "```cs\n                {\n```", "```cs\n                    if (blockingCollection.TryTake(out\n```", "```cs\n                     string request,100))\n```", "```cs\n                    {\n```", "```cs\n                        Console.WriteLine(\"Processing \" +\n```", "```cs\n                         request);\n```", "```cs\n                    }\n```", "```cs\n                    else\n```", "```cs\n                    {\n```", "```cs\n                        Console.WriteLine(\"No request\");\n```", "```cs\n                    }\n```", "```cs\n                }\n```", "```cs\n            });\n```"]