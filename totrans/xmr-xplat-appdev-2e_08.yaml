- en: Chapter 8. Web Services with Push Notifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modern mobile applications are defined by their network connectivity. A mobile
    app that does not interact with a web server is both a rare find and not as interactive
    or social as it would otherwise be. In this book, we'll use the **Windows Azure**
    cloud platform to implement a server-side backend for our XamChat application.
    We'll use a feature called **Azure Mobile Services**, which is an excellent fit
    for our application and has the benefit of built-in push notifications. Once we
    are done with this chapter, our XamChat sample application will be much closer
    to being a real application and will allow its users to interact with one another.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The services offered by Windows Azure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up your Azure account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Mobile Services as a backend for XamChat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating tables and scripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing a real web service for XamChat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Apple Push Notification service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending notifications with Google Cloud Messaging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning Windows Azure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Windows Azure is an excellent cloud platform released by Microsoft in 2010\.
    Azure provides both **Infrastructure as a Service** (**IaaS**) and **Platform
    as a Service** (**PaaS**) for building modern web applications and services. This
    means that it provides you with access to direct virtual machines within which
    you can deploy any operating system or software of your choice. This is known
    as IaaS. Azure also provides multiple platforms for building applications such
    as **Azure Websites** or **SQL Azure**. These platforms are known as PaaS since
    you deploy your software at a high level and do not have to deal directly with
    virtual machines or manage software upgrades.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go through the following more common services provided by Windows Azure:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Virtual machines**: Azure provides you with access to virtual machines of
    all sizes. You can install practically any operating system of your choice. There
    are many premade distributions to choose from within Azure''s gallery.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Websites**: You can deploy any type of website that will run in Microsoft
    IIS from ASP.NET sites to **PHP** or **Node.js**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SQL Azure**: This is a cloud-based version of Microsoft SQL Server, which
    is a full-featured **Relational Database Management System** (**RDMS**) for storing
    data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mobile Services**: This is a simple platform for building web services for
    mobile apps. It uses **SQL Azure** for backend storage and a simple JavaScript
    scripting system based on Node.js for adding business logic. In the latest version
    of Azure Mobile Services, you can also use C# and the ASP.NET Web API for developing
    server-side code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Storage**: Azure provides **Blob storage**, a method for storing binary files,
    and **Table storage**, which is a **NoSQL** solution for persisting data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Service bus**: This is a cloud-based solution for creating queues to facilitate
    communication between other cloud services. It also includes notification hubs
    as a simple way of providing push notifications to mobile apps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Worker roles**: A simple way to run a custom process in the cloud can be
    a plain Windows executable or a .NET worker role project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Media services**: A mechanism for providing streaming audio or video to nearly
    any device. It handles both encoding and delivery and can scale to support a large
    volume of users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HDInsight**: A version of Apache Hadoop running in Windows Azure for managing
    extremely large databases, also called big data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cloud services**: This is a conglomeration of other services. Cloud services
    allow you to bundle multiple services together and create staging and production
    environments. It is a great tool for deployment; you can deploy changes to staging
    and swap staging and production to preserve uptime for your users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apart from these services, there are many more, and new ones are added pretty
    regularly. We will use **Azure Mobile Services**, which leverages SQL Azure, to
    build our web service for XamChat. You can visit [http://windowsazure.com](http://windowsazure.com)
    for a full rundown of pricing and services offered.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we chose to demonstrate a solution using Windows Azure as a web
    service backend for XamChat, since it is very easy to use with Xamarin applications
    because of the fantastic library found in the Xamarin Component Store. However,
    there are many more choices out there besides Azure that you might want to look
    at. Using Xamarin's development platform does not limit the types of web services
    your applications can interact with.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few more common ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Parse**: This service provides a product similar to that of Azure Mobile
    Services, complete with data storage and push notifications. This is a popular
    service among many mobile developers, even those not using Xamarin. You can get
    more information at [http://parse.com](http://parse.com).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Urban Airship**: This service provides push notifications for mobile apps
    across multiple platforms. You can get more information at [http://urbanairship.com](http://urbanairship.com).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon Web Services**: This service is a complete cloud solution that is
    equivalent to Windows Azure. It has everything that you need to deploy applications
    in the cloud with total virtual machine support. The main difference is that Azure
    is very C# focused and built for .NET developers. There are also not as many PaaS
    options on Amazon. You can get more information at [http://aws.amazon.com](http://aws.amazon.com).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additionally, you can develop your own web services with on-premises web servers
    or inexpensive hosting services using the languages and technologies of your choice.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up your Azure account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To start developing with Windows Azure, you can subscribe to a free one-month
    trial along with free credits worth $200\. You can get even more perks if you
    have an MSDN subscription. To go along with this, many of Azure's services have
    free tiers that give you lower performance versions. So if your trial expires,
    you can continue your development at little or no cost, depending on the services
    you are using.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s begin by navigating to [http://windowsazure.com/en-us/pricing/free-trial](http://windowsazure.com/en-us/pricing/free-trial)
    and performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Try it now** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sign in with a Windows Live ID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For security purposes, verify your account via phone or text message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the payment information. This is only used if you exceed your spending
    limits. You won't accidentally spend beyond budget by developing your app—it is
    fairly difficult to accidentally spend money until real users are interacting
    with your services.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check **I agree** to the policies and click on **Sign Up**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Review the final setting and click on **Submit**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If all the required information is entered correctly, you will now finally
    have access to the Azure subscription page. Your subscription page will look similar
    to the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Setting up your Azure account](img/00059.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can click on the **Portal** link in the top-right corner of the page to
    access your account. In future, you can manage your Azure services at: [http://manage.windowsazure.com](http://manage.windowsazure.com).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Complete the Windows Azure tour to get a quick rundown of the management portal''s
    features. You can then access the main menu to create new Azure services, virtual
    machines, and so on. The main menu looks similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up your Azure account](img/00060.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This concludes the sign-up process for Windows Azure. It is pretty simple compared
    to the Apple and Google Play developer programs. Feel free to play around, but
    don't be too worried about spending money. Azure has free versions of most services
    and also delivers a good amount of bandwidth for free. You can get more information
    on pricing at [http://windowsazure.com/en-us/pricing/overview](http://windowsazure.com/en-us/pricing/overview).
  prefs: []
  type: TYPE_NORMAL
- en: Note that there are a lot of misconceptions about Windows Azure being expensive.
    You can do all of your development for an application on the free tier without
    spending a dime. When putting applications into production, you can easily scale
    up or down on the number of VM instances to keep your costs under control. In
    general, you will not be spending much money if you do not have a lot of users.
    Likewise, you should be earning plenty of revenue if you happen to have lots of
    users.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring Azure Mobile Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the server side of XamChat, we'll use Azure Mobile Services to provide backend
    storage to the application. A mobile service is a neat solution to accelerate
    development for mobile applications that provide data storage and a **REST-based**
    API, which is a standards-based way of communicating with a web service over HTTP.
    Azure Mobile Services also includes a .NET client library for interacting with
    the service from C#.
  prefs: []
  type: TYPE_NORMAL
- en: 'A few nice features of Azure Mobile Services are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Storage of data in the cloud with SQL Azure or other Azure data services such
    as Blob or Table storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Easy authentication with Windows Live ID, Facebook, Google, and Twitter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Push notifications with iOS, Android, and Windows devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code the server side with JavaScript and Node.js or C#
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An easy-to-use .NET library for client-side development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scale Azure Mobile Services to accommodate high volumes of data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can see why using Azure is a good choice for simple mobile applications.
    The benefits of accelerated development and the many features it provides are
    a great fit for our XamChat sample application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s navigate to your account at [http://manage.windowsazure.com](http://manage.windowsazure.com)
    and perform the following steps to create a mobile service:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the plus button in the bottom-left corner of the window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Compute** | **Mobile Service** | **Create** through the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a domain URL of your choice such as `yourname-xamchat`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We use the free database option for now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a data center near your location in the **Region** dropdown.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the **Backend** dropdown, leave the selection on **JavaScript** for this
    book. It will be simpler to set up the backend since we are focusing more on the
    client side. Feel free to use C# as an alternative, but keep in mind the examples
    in this book will be written in JavaScript.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the default database name and choose **New SQL database server**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a login name and password for the SQL server, and keep this information
    in a safe place.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure the region is the same as that of your mobile service to ensure good
    performance between your mobile service and its database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Review your final settings and hit the **Finish** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The management portal will display the progress, and it will take several seconds
    to create your mobile service and SQL Server instances. Remember that Azure is
    creating and starting new virtual machines for you under the hood, so it is really
    doing a decent amount of work to accommodate your request.
  prefs: []
  type: TYPE_NORMAL
- en: 'When completed, your account will have one **Mobile Service** and one **SQL
    database** in addition to the **Default Directory** that is included in all the
    accounts, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploring Azure Mobile Services](img/00061.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If you take a look at the **Scale** tab for your mobile service, you'll notice
    that it is running under the **Free** tier by default. This is a great place for
    development. At the time of writing this book, it accommodates 500 devices. When
    deploying your applications to production, you might consider the **Basic** or
    **Standard** tiers, which also give you the option to add multiple instances.
  prefs: []
  type: TYPE_NORMAL
- en: Creating tables and scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step to implement something in Azure Mobile Services is to create
    a new table. By default, Azure Mobile Services uses a feature called **dynamic
    schemas** with its SQL database. When you insert a row from the client, new columns
    are dynamically added to the table. This prevents you from having to create the
    database schema manually and is a neat code-first approach to develop your backend
    database. You can always connect to the SQL database manually to fine tune things
    or make manual changes to the schema.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return to the management portal, select your mobile services instance, and
    perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Data** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Create** button found at the bottom center of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `User` as the table name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Leave everything else at its default value and click on the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat this process to create three more tables named `Friend`, `Message`, and
    `Conversation`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have our four tables, we need to create a script to facilitate the
    login process for the users of our app. Azure Mobile Services allows you to add
    custom logic to your tables by creating scripts that run in Node.js, a framework
    for developing web services with JavaScript. You can override what happens to
    each table during the `insert`, `read`, `update`, or `delete` operations. In addition
    to this, you can also create scripts that are completely customized if you need
    other functionalities.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the `User` table and then click on the **Script** tab. Make sure you
    are viewing the `insert` operation. By default, your script will be very simple,
    as shown in the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Scripts in Azure Mobile Services have three parameters, which are stated as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`item`: This parameter is the object that the client sends to the service.
    In our case, it will be the `User` object we created in the previous chapters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`user`: This parameter includes information about the authenticated user. We
    won''t be using this in our examples.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`request`: This parameter is an object used to run the `table` operation and
    send a response back to the client. Calling `execute` will complete the operation
    and return a successful response to the client.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We need to modify the preceding script to only insert a new user when that
    user does not already exist. If the user does exist, we need to make sure that
    the password matches the username. Let''s make a few changes to the script, as
    shown in the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s summarize what we did in the preceding JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we grabbed the `user` table. Note that you can reference the name of
    the table using lowercase.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we ran a query to pull out any existing users with the `where` function.
    We used `item.Username` since this matches our `User` object in C#. Notice how
    this method is similar to `Linq` in C#.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If there are no results, we let the request execute normally.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Otherwise, we compare the passwords and return `statusCodes.OK` if they match.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the passwords do not match, we return `statusCodes.UNAUTHORIZED`. This will
    cause the client to receive an error.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For a complete list of available functions and methods, make sure you check
    out the server script reference on MSDN at [http://tinyurl.com/AzureMobileServices](http://tinyurl.com/AzureMobileServices).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From here, just make sure that you click on the **Save** button to apply your
    changes. Azure Mobile Services also has the option of providing source control
    for your scripts via **Git**. Feel free to take advantage of this feature if you
    want to make changes to the script in your favorite editor locally instead of
    the website editor.
  prefs: []
  type: TYPE_NORMAL
- en: After this, we need to create one more script. The way XamChat was implemented
    earlier in the book allows, users to add friends by entering their friends' usernames.
    So, in order to insert into the `Friend` table, we will need to modify the `insert`
    script to look up users by their usernames.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s modify the `insert` script for the `Friends` table as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This is pretty similar to what we did before; we ran a simple query to load
    the `user` table based on the `Username` value. We merely have to set the `UserId`
    value on the new `friend` table prior to the execution of the request.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a backend to XamChat
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With our server-side changes complete, the next step is to implement our new
    service in our XamChat iOS and Android applications. Luckily, as we used an interface
    named `IWebService`, all we need to do is implement this interface to get it working
    in our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can start setting up our service in our iOS application by performing
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `XamChat.Core` project that we created in [Chapter 4](part0036_split_000.html#page
    "Chapter 4. XamChat – a Cross-platform App"), *XamChat – a Cross-platform App*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an `Azure` folder within the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new class named `AzureWebService.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the `public` class and implement `IWebService`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on `IWebService` in your code and navigate to **Refactor** | **Implement
    Interface**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A line will appear; press *Enter* to insert the method stubs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When this setup is complete, your class will look something similar to the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Adding the Azure Mobile Services NuGet package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To make development with Azure Mobile Services much easier, we need to add
    a reference to the .NET client library. To do this, we will use NuGet to add the
    library:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `XamChat.Core` project and navigate to **Add** | **Add Packages**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for `Azure Mobile Services` using the search box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `Azure Mobile Services` package, which at the time of writing this
    book was version 1.2.5.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Add Package**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat this process for the `XamChat.iOS` and `XamChat.Android` projects. There
    is some platform-specific setup for each platform.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can also get the Azure Mobile Services library from the Xamarin Component
    Store if you like. It is very similar to using NuGet.
  prefs: []
  type: TYPE_NORMAL
- en: This will download the library and automatically add references to it in your
    projects. The NuGet package manager might complain of warnings, which can be ignored.
    NuGet was originally developed for Visual Studio on Windows, so any packages that
    contain PowerShell scripts or prompt for a license agreement might give you a
    warning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s modify our `AzureWebService.cs` file. Add `using Microsoft.WindowsAzure.MobileServices`
    to the top of the file, and then make the following changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Make sure you fill in your mobile service name and application key. You can
    find your key on the **Dashboard** tab of the Azure Management Portal under the
    **Manage Keys** section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s implement our first method, `Login`, in the following manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This is fairly straightforward, because of how nice this library is to use.
    The `GetTable<T>` method knows how to use a table named `User` based on the C#
    class name. Upon the first call, the dynamic schema feature will create two new
    columns named `Username` and `Password` based on the C# properties of our class.
    Note that the `InsertAsync` method will also fill in the user's `Id` property
    for later use in our application since we will need the `Id` for future calls
    to the mobile service.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, open the `AppDelegate.cs` file to set up our new service and add the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, you will need to add some platform-specific setup for Azure Mobile
    Services. Add `using Microsoft.WindowsAzure.MobileServices` to the top of the
    file and add the following line of code to the bottom of `FinishedLaunching` in
    your `AppDelegate.cs` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if you compile and run your application after you log in, your app should
    successfully call Azure Mobile Services and insert a new user. Navigate to the
    **Data** tab of your Azure Mobile Service in the Azure Management Portal, and
    select the `User` table. You will see the user you just inserted, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the Azure Mobile Services NuGet package](img/00062.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is generally a bad idea to store passwords in plain text in your database.
    A simple approach to make things a bit more secure would be to store them as an
    MD5 hash. You should be able to make this change in the custom JavaScript that
    we are using to insert the password on the `User` table. A complete guide to securing
    Windows Azure applications can be found at [http://msdn.microsoft.com/en-us/library/windowsazure/hh696898.aspx](http://msdn.microsoft.com/en-us/library/windowsazure/hh696898.aspx).
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s make a new class named `Friend.cs`. Add it to the `Azure` folder
    that is next to the other class specific to Azure as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We'll use this class to store the friends information about each user. Note
    that we also have an `Id` property, and all the classes saved in Azure Mobile
    Services should have a `string` property named `Id`. This will be the table's
    primary key in the SQL database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s modify the `Message` and `Conversation` classes to prepare for
    push notifications down the road. Add a new property to the `Message` class as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add the following new property to `Conversation.cs`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we''ll need to insert or seed some test data for our application to function
    correctly. The easiest way to insert data would be from C#, so let''s implement
    the following simple method on our service to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s add the following method to `AppDelegate.cs` and call it from
    within `FinishedLaunching`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'If you run your application at this point, it will insert two users and make
    them friends with one another. Before doing so, let''s add some more code to the
    `LoadData` method in `AzureWebService.cs` to insert conversations and messages
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Now, if you run the application, it will seed the database with some good data
    to work with. I'd recommend that you remove the call to `LoadData` once it is
    successful the first time, and perhaps remove the method entirely when the development
    is complete.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before going further, let''s implement the rest of our `IWebService` interface.
    It can be done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Each method here is pretty simple. `Register` is very similar to `Login`, but
    the main complication for the other methods is the need to convert a `Friend`
    object to `User`. We used the `ToListAsync` method from the Azure library to get
    `List<T>`; however, since our interface uses arrays, we quickly converted the
    list to an array. We also utilized a couple of basic `Linq` operators such as
    `Where` and `Select` to accomplish our implementation of `IWebService`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s complete the methods related to conversations and messages, which
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This completes our implementation of `IWebService`. If you run the application
    at this point, it will function exactly as before with the exception that the
    app is actually talking to a real web server. New messages will get persisted
    in the SQL database, and our custom scripts will handle the custom logic that
    we need. Feel free to play around with our implementation; you might discover
    some features of Azure Mobile Services that will work great with your own applications.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, another good exercise would be to set up Azure Mobile Services
    in our Android application. To do so, you will merely need to add the Azure Mobile
    Services NuGet package. After that, you should be able to swap out the `ServiceContainer.Register`
    call in your `Application` class and call `CurrentPlatform.Init()`. Everything
    will function exactly like on iOS. Isn't cross-platform development great?
  prefs: []
  type: TYPE_NORMAL
- en: Using the Apple Push Notification service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Implementing push notifications with Azure Mobile Services on iOS is very simple
    to set up from an Azure backend perspective. The most complicated part is working
    through Apple's process of creating certificates and provisioning profiles in
    order to configure your iOS application. Before we continue, make sure you have
    a valid iOS Developer Program account, as you will not be able to send push notifications
    without one. If you are unfamiliar with the concept of push notifications, take
    a look at Apple's documentation at [http://tinyurl.com/XamarinAPNS](http://tinyurl.com/XamarinAPNS).
  prefs: []
  type: TYPE_NORMAL
- en: 'To send push notifications, you need to set up the following:'
  prefs: []
  type: TYPE_NORMAL
- en: An explicit App ID registered with Apple
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A provisioning profile targeting that App ID
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A certificate for your server to trigger the push notification
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apple provides both a development and production certificate that you can use
    to send push notifications from your server.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up proper provisioning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s begin by navigating to [http://developer.apple.com/account](http://developer.apple.com/account)
    and performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Identifiers** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the plus button in the top-right corner of the window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a description, such as `XamChat`, for the bundle ID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter your bundle ID under the **Explicit App ID** section. This should match
    the bundle ID you set up in your `Info.plist` file, for example, `com.yourcompanyname.xamchat`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **App Services**, make sure you check **Push Notifications**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, click on **Continue**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Review your final settings and hit **Submit**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This will create an explicit App ID similar to what you can see in the following
    screenshot, which we can use for sending push notifications:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up proper provisioning](img/00063.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Setting up your provisioning profile
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For push notifications, we have to use a profile with an explicit App ID that
    is not a development certificate. Now let''s set up a provisioning profile:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Development** link under **Provisioning Profiles** in the right-hand
    side pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the plus button in the top-right corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check **iOS App Development** and click on **Continue**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the App ID we just created and click on **Continue**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the developer and click on **Continue**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the devices you will be using and click on **Continue**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a name for the profile and click on **Generate**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the profile and install it, or open **XCode** and use the sync button
    by navigating to **Preferences** | **Accounts**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When finished, you should arrive at a success web page that looks similar to
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up your provisioning profile](img/00064.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Setting up a certificate signing request
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, we perform the following steps to set up the certificate our server needs:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Development** link under **Certificates** in the right-hand side
    pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the plus button in the top-right corner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable **Apple Push Notifications service SSL (Sandbox)** and click on **Continue**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select your App ID as before and click on **Continue**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new certificate signing request as per Apple's instructions. You can
    also refer to [Chapter 7](part0056_split_000.html#page "Chapter 7. Deploying and
    Testing on Devices"), *Deploying and Testing on Devices*, or locate the `*.certSigningRequest`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on **Continue**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Upload the signing request file and click on **Generate**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on **Download**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the file to import the certificate into **Keychain**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locate the certificate in **Keychain**. It will be titled **Apple Development
    iOS Push Services** and will contain your bundle ID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the certificate and export it somewhere on your filesystem. Enter
    a password that you will remember.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This will create the certificate that we need to send push notifications to
    our users from Azure Mobile Services. All that remains is to return to the Azure
    Management Portal and upload the certificate from the **Push** tab under **Apple
    Push Notification Settings**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a certificate signing request](img/00065.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This upload concludes the configuration we need from Apple's side.
  prefs: []
  type: TYPE_NORMAL
- en: Making client-side changes for push notifications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, let's return to our `XamChat.iOS` project in Xamarin Studio to make the
    necessary changes on the client side for push notifications. We will need to add
    a few new classes to our shared code to start with.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `IWebService.cs` and add the following new method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s implement this method in `FakeWebService.cs` (just so it compiles)
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s add a new class named `Device.cs` in the `Core`/`Azure` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we can implement the real method in `AzureWebService.cs` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'As for ViewModels, we need to add one more new method to `LoginViewModel.cs`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we need to add a small modification to `MessageViewModel.cs`. Add the
    following line when creating a new `Message` object in the `SendMessage` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This modification concludes what we need to add to our shared code. We will
    reuse this new functionality when we add push notifications to Android, so go
    ahead and take the time to link in the new `Device.cs` file in your `XamChat.Droid`
    project to build your entire solution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s add the iOS platform-specific code we need. Add the following methods
    to your `AppDelegate.cs` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'One last thing to do is to actually make a call to register for remote notifications.
    Open `LoginController.cs` and add the following line of code directly after the
    successful call to log in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: You can also call the method on startup; however, in our situation, we need
    a valid user ID to store in the `Device` table in Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's switch to the Azure Management Portal and make the remaining changes
    in JavaScript on the server side. Under the **Data** tab, create a new table named
    `Device` with the default settings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to modify the `insert` script so that the duplicate device tokens
    are not inserted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Last but not least, we need to modify the `insert` script for the `Message`
    table to send push notifications to the user. The message was sent as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'After executing the request, we retrieve a list of devices from the database
    and send out a push notification for each one. To test push notifications, deploy
    the application and log in with the secondary user (if using our examples: `chucknorris`).
    After logging in, you can just background the app with the home button. Next,
    log in with the primary user on your iOS simulator and send a message. You should
    receive a push notification, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making client-side changes for push notifications](img/00066.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Implementing Google Cloud Messaging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since we have already set up everything we need in the shared code and on Azure,
    setting up push notifications for Android will be a lot less work at this point
    of time. To continue, you will need a Google account with a verified e-mail address;
    however, I would recommend that you use an account registered with **Google Play**
    if you have one. You can refer to the full documentation on **Google Cloud Messaging**
    (**GCM**) at [http://developer.android.com/google/gcm](http://developer.android.com/google/gcm).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that Google Cloud Messaging requires that Google Play be installed on the
    Android device and that the Android OS be at least version 2.2.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s begin by navigating to [http://cloud.google.com/console](http://cloud.google.com/console)
    and performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Create Project** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter an appropriate project name such as `XamChat`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a project ID; you can use the generated one. I prefer to use my application's
    bundle ID and replace the periods with hyphens.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Agree to the **Terms of Service**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When creating your first project, you might have to verify the mobile number
    associated with your account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note the **Project Number** field on the **Overview** page. We will need this
    number later.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the **Overview** tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing Google Cloud Messaging](img/00067.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we can continue with our setup as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on **APIs & auth** in the left-hand side pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down and click on **Google Cloud Messaging for Android**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **OFF** button at the top to enable the service. You might have
    to accept another agreement.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Registered Apps** in the left-hand side pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Register App** button at the top.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `XamChat` in the **App Name** field and click on **Register**. You can
    leave the **Platform** selection on **Web Application** at its default value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand the **Server Key** section and copy the **API Key** value to your clipboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch to the Azure Management Portal and navigate to the **Push** tab in your
    Azure Mobile Service instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Paste the API key in the **google cloud messaging settings** section and click
    on **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Implementing Google Cloud Messaging](img/00068.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, let''s modify our `insert` script for the `Message` table to support
    Android as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Basically, we send any `deviceToken` values that are longer than 72 characters
    to GCM. This is one simple way to do it, but you can also add a value to the `Device`
    table that indicates whether the device is Android or iOS. GCM also supports sending
    custom values to be displayed in the notification area, so we send an actual title
    along with the message.
  prefs: []
  type: TYPE_NORMAL
- en: This completes our setup on Azure's side. Setting up the next part in our Android
    application can be a bit difficult, so we will use a library called **PushSharp**
    to simplify our implementation.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, navigate to [http://github.com/Redth/PushSharp](http://github.com/Redth/PushSharp)
    and perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the project and place it in the same folder as your XamChat solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the `PushSharp.Client.MonoForAndroid.Gcm` project to your solution. You
    can locate the project in the `PushSharp.Client` subdirectory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reference the new project from your `XamChat.Droid` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If it's not already installed, you will need to install the **Android SDK Platform**
    for Android 2.2 (API 8). You can install this from the Android SDK manager that
    can be launched from the **Tools** menu in Xamarin Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, create a new class called `PushConstants.cs` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Fill out the `BundleId` value with your application's bundle ID and the `ProjectNumber`
    value with the project number found on the **Overview** page of your Google Cloud
    Console.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to set up some permissions to support push notifications in our
    application. Above the namespace declaration in this file, add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: You can also make these changes in our `AndroidManifest.xml` file; however,
    using C# attributes can be better since it gives you the ability to use code completion
    while typing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, create another new class named `PushReceiver.cs` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The `PushReceiver.cs` class sets up `BroadcastReceiver`, which is Android's
    native way for different applications to talk with one another. For more information
    on this topic, check out the Android documentation at [http://developer.android.com/reference/android/content/BroadcastReceiver.html](http://developer.android.com/reference/android/content/BroadcastReceiver.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, create one last class named `PushService.cs` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, right-click on `PushHandlerServiceBase` and navigate to **Refactor** |
    **Implement abstract members**. Next, let''s implement each member one by one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code is very similar to what we did on iOS. We merely have to
    send the `registrationId` value to `loginViewModel`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we have to write the following code when the message is received:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: This code will actually pull out the values from the notification and display
    them in the notification center of the Android device. We used the built-in resource
    for `SymActionEmail` to display an e-mail icon in the notification.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we just need to implement two more abstract methods. For now, let''s
    just use `Console.WriteLine` to report these events as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Down the road, you should consider removing registrations from the `Device`
    table in Azure when `OnUnRegistered` is called. Occasionally, a user's `registrationId`
    will change, so this is the place where your application is notified of this change.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, open `Application.cs` and add the following lines to the end of `OnCreate`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, open `LoginActivity.cs` and add the following line after a successful
    login:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Now if you repeat the steps for testing push notifications on iOS, you should
    be able to send a push notification to our Android app. Even better, you should
    be able to send push notifications across platforms, since an iOS user can send
    a message to an Android user.
  prefs: []
  type: TYPE_NORMAL
- en: '![Implementing Google Cloud Messaging](img/00069.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we went through what Windows Azure provides: Infrastructure
    as a Service and Platform as a Service. We set up a free Windows Azure account
    and set up an Azure Mobile Services instance. Next, we created all the tables
    we needed to store our data and wrote a few scripts to add the business logic
    to the web service. We implemented the client-side code for making requests against
    Azure Mobile Services. Lastly, we implemented push notifications for iOS using
    the Apple Push Notification Service and for Android using Google Cloud Messaging.'
  prefs: []
  type: TYPE_NORMAL
- en: Using Azure Mobile Services, we were able to get by without writing much of
    the server-side code—mainly a few simple scripts. It would be pretty challenging
    to implement push notifications yourself instead of leveraging Azure's functionality
    for this. In the next chapter, we'll explore how to use third-party libraries
    with Xamarin. This includes everything from the Xamarin Component Store to using
    native Objective-C or Java libraries.
  prefs: []
  type: TYPE_NORMAL
