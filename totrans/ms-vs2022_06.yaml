- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Advanced Web Development Tools
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级网络开发工具
- en: In this chapter, we will embark upon an advanced exploration of web development
    tools within the robust environment of Visual Studio 2022. Our exploration will
    begin with an examination of a web form designer powered by Web Live Preview,
    which offers us a way to visualize and iterate on our designs while working on
    legacy ASP.NET web form applications. Next, we will turn our attention to the
    dynamic capabilities of Visual Studio’s API Exploration and Dev Tunnel functionalities,
    enhancing our API development experience. Further enriching our toolkit, we will
    investigate the Node.js workload of Visual Studio.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将开始对 Visual Studio 2022 强大环境中的网络开发工具进行高级探索。我们的探索将从检查由 Web Live Preview
    驱动的网络表单设计器开始，它为我们提供了一个在处理遗留 ASP.NET 网页表单应用程序时可视化和迭代设计的方法。接下来，我们将关注 Visual Studio
    的 API 探索和 Dev Tunnel 功能的动态能力，增强我们的 API 开发体验。进一步丰富我们的工具集，我们将研究 Visual Studio 的
    Node.js 工作负载。
- en: 'In this chapter, we’ll cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Real-time web previews powered by Web Live Preview
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由 Web Live Preview 提供的实时网页预览
- en: API Exploration and Dev Tunnel with Visual Studio
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Visual Studio 的 API 探索和 Dev Tunnel
- en: Node.js integration with Visual Studio
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio 与 Node.js 的集成
- en: By the end of this chapter, armed with these advanced web development tools
    and techniques, we will be equipped to elevate our productivity for our web projects
    to new heights.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，凭借这些高级网络开发工具和技术，我们将能够将我们的网络项目生产力提升到新的高度。
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'While writing this chapter, I used the following version of Visual Studio:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写本章时，我使用了以下版本的 Visual Studio：
- en: Visual Studio Enterprise 2022 version 17.12.0
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Enterprise 2022 版本 17.12.0
- en: Preview 1.0
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预览 1.0
- en: The code files for this chapter can be found at [https://github.com/PacktPublishing/Mastering-Visual-Studio-2022/tree/main/ch06](https://github.com/PacktPublishing/Mastering-Visual-Studio-2022/tree/main/ch06)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在 [https://github.com/PacktPublishing/Mastering-Visual-Studio-2022/tree/main/ch06](https://github.com/PacktPublishing/Mastering-Visual-Studio-2022/tree/main/ch06)
    找到
- en: Real-time web previews powered by Web Live Preview
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 由 Web Live Preview 提供的实时网页预览
- en: Microsoft announced that ASP.NET, when used with old frameworks, including web
    form applications, will continue to support old .NET Framework versions. Following
    that, Visual Studio 2022 has introduced a designer for Web Forms projects that
    are powered by Web Live Preview. In this section, we will explore how to utilize
    the new Web Forms designer along with additional features offered by Web Live
    Preview. This feature is specifically tailored for teams handling legacy projects.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 微软宣布，当与旧框架（包括网页表单应用程序）一起使用时，ASP.NET 将继续支持旧的 .NET Framework 版本。随后，Visual Studio
    2022 引入了一个由 Web Live Preview 驱动的 Web 表单项目设计器。在本节中，我们将探讨如何利用新的 Web 表单设计器以及 Web
    Live Preview 提供的附加功能。此功能专门针对处理遗留项目的团队。
- en: As this feature is currently dedicated only to Web Forms in .NET Framework,
    if you are using MVC and .NET Core, there is no forms designer available. To stay
    up to date with the latest web standards and browser support, Web Live Preview
    in Visual Studio uses WebView2, which is powered by Microsoft Edge.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 由于此功能目前仅针对 .NET Framework 中的 Web 表单，如果您正在使用 MVC 和 .NET Core，则没有可用的表单设计器。为了保持对最新网络标准和浏览器支持的最新了解，Visual
    Studio 中的 Web Live Preview 使用 WebView2，它由 Microsoft Edge 驱动。
- en: To illustrate our examples, we will create a project using *ASP.NET (.* *NET
    Framework)* .
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明我们的示例，我们将创建一个使用 *ASP.NET (.NET Framework)* 的项目。
- en: 'If we open the **default.aspx** file or any other **.aspx** file, we’ll notice
    two buttons at the bottom left:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们打开 **default.aspx** 文件或任何其他 **.aspx** 文件，我们会在左下角注意到两个按钮：
- en: '![Figure 6.1 – The Design and Split buttons](img/B22218_06_1.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.1 – 设计和分割按钮](img/B22218_06_1.jpg)'
- en: Figure 6.1 – The Design and Split buttons
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.1 – 设计和分割按钮](img/B22218_06_1.jpg)'
- en: 'These buttons allow us to display the designer, powered by Web Live Preview,
    in two different ways: full-size or split next to the code. We will click on the
    **Split** button to observe the impact the designer has on our code base:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这些按钮允许我们以两种不同的方式显示由 Web Live Preview 驱动的设计器：全尺寸或分割在代码旁边。我们将点击 **分割** 按钮来观察设计器对我们代码库的影响：
- en: '![Figure 6.2 – The Split view](img/B22218_06_2.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.2 – 分割视图](img/B22218_06_2.jpg)'
- en: Figure 6.2 – The Split view
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.2 – 分割视图
- en: By clicking on the component, we can edit the label. Additionally, like in the
    designer for WinForm, we can drag and drop items in the toolbox to place them
    in the designer.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 通过单击组件，我们可以编辑标签。此外，就像在WinForm设计器中一样，我们可以在工具箱中拖放项目，将它们放置在设计器中。
- en: 'The following options are offered by this toolbox:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 此工具箱提供了以下选项：
- en: '**Refresh** : Updates the live preview of your web application to reflect any
    changes made in the editor'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**刷新**：更新您的Web应用程序的实时预览，以反映在编辑器中做出的任何更改'
- en: '**Toggle design mode** : Activates or deactivates the visual designer interface,
    allowing us to switch between designing our UI visually and editing the code directly'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**切换设计模式**：激活或停用可视化设计器界面，使我们能够在设计UI和直接编辑代码之间切换'
- en: '**Show empty element** : Displays an empty UI component on the page, ready
    for us to configure its properties and add content'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**显示空元素**：在页面上显示一个空的UI组件，以便我们配置其属性并添加内容'
- en: '**Use live data** : Binds our application’s UI elements to data sources dynamically,
    enabling us to see how our application interacts with data in real-time during
    development'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用实时数据**：将我们的应用程序的UI元素动态绑定到数据源，使我们能够在开发过程中实时查看我们的应用程序如何与数据交互'
- en: '**Show source view** : Opens the code-behind file associated with the selected
    UI element or control, allowing us to view or edit the source code directly:'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**显示源视图**：打开与所选UI元素或控件关联的代码后置文件，使我们能够直接查看或编辑源代码：'
- en: '![Figure 6.3 – Designer web toolbox](img/B22218_06_3.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图6.3 – 设计器Web工具箱](img/B22218_06_3.jpg)'
- en: Figure 6.3 – Designer web toolbox
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.3 – 设计器Web工具箱
- en: As shown in *Figure 6* *.2* , the designer displays live data by default to
    provide a valuable preview. In some cases, it could be valuable to show a placeholder.
    That’s why the designer tools offer the **Use live data** toggle option.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如*图6.2*所示，设计者默认显示实时数据以提供有价值的预览。在某些情况下，显示占位符可能很有价值。这就是为什么设计工具提供了**使用实时数据**切换选项。
- en: In this section, we saw how Visual Studio 2022 can enhance our experience working
    with the legacy web framework. Now, let’s discover what Visual Studio 2022 brings
    for cutting-edge API development.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们了解了Visual Studio 2022如何增强我们使用遗留Web框架的工作体验。现在，让我们来看看Visual Studio 2022为前沿API开发带来了什么。
- en: Using API Explorer and Dev Tunnel with Visual Studio
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用API资源管理器和Dev Tunnel与Visual Studio
- en: When we talk about web development, APIs come to mind for handling communication
    regarding each component. In this section, we will explore new Visual Studio features
    to enhance our experience during API development. First, we will learn how to
    use HTTP files to explore our endpoint, after which we will configure Dev Tunnel
    so that we can share our in-development APIs with clients, managers, and colleagues.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们谈论Web开发时，API会浮现在脑海中，用于处理每个组件的通信。在本节中，我们将探索新的Visual Studio功能，以增强我们在API开发过程中的体验。首先，我们将学习如何使用HTTP文件来探索我们的端点，之后我们将配置Dev
    Tunnel，以便我们可以与客户、经理和同事共享我们正在开发的API。
- en: Generating .http files with Endpoints Explorer
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用端点资源管理器生成 .http 文件
- en: Using **.http** files to test and document API endpoints is incredibly convenient
    and efficient. This approach allows us to streamline API testing and development
    directly within our **integrated development environment** ( **IDE** ) – for example,
    Visual Studio, Visual Studio Code, or IntelliJ.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**.http**文件测试和记录API端点非常方便和高效。这种方法允许我们在**集成开发环境**（**IDE**）中直接简化API测试和开发，例如Visual
    Studio、Visual Studio Code或IntelliJ。
- en: With **.http** files, we can write HTTP requests directly within our IDE and
    execute them without switching to a separate tool or browser. This integration
    keeps our development workflow within the IDE, enabling quick iterations and debugging,
    which ultimately boosts productivity.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**.http**文件，我们可以在我们的IDE中直接编写HTTP请求并执行它们，而无需切换到单独的工具或浏览器。这种集成使我们的开发工作流程保持在IDE中，从而实现快速迭代和调试，最终提高生产力。
- en: 'These **.http** files adhere to the standards of RFC 9110 HTTP Semantics (the
    last version of the document, which establishes a solid foundation for understanding
    and implementing the protocol: [https://www.rfc-editor.org/rfc/rfc9110.html](https://www.rfc-editor.org/rfc/rfc9110.html)
    ), ensuring that our requests are correctly formatted and understood by the HTTP
    clients that are integrated into our IDEs. This standardization also makes the
    files portable and easily shareable among team members, and they can be seamlessly
    integrated into our CI/CD pipelines for efficient development.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这些 **.http** 文件遵循 RFC 9110 HTTP 语义标准（文档的最新版本，为理解和实现协议奠定了坚实的基础：[https://www.rfc-editor.org/rfc/rfc9110.html](https://www.rfc-editor.org/rfc/rfc9110.html)），确保我们的请求格式正确且被集成到我们
    IDE 中的 HTTP 客户端正确理解。这种标准化也使得文件易于携带和共享，并且可以无缝集成到我们的 CI/CD 管道中，以实现高效开发。
- en: Furthermore, integrating **.http** files into our existing development processes,
    including version control and code reviews, simplifies the management of API testing
    code, making it more maintainable and readable. The support for various HTTP methods,
    headers, and authentication mechanisms provides us with flexibility and power
    in terms of API testing.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，将 **.http** 文件集成到我们现有的开发流程中，包括版本控制和代码审查，简化了 API 测试代码的管理，使其更易于维护和阅读。对各种 HTTP
    方法、头和身份验证机制的支持为我们提供了在 API 测试方面的灵活性和强大功能。
- en: Regarding Visual Studio, the support for **.http** files has significantly simplified
    the API testing process. We can create and execute HTTP requests directly within
    Visual Studio, eliminating the need to recreate requests for testing purposes,
    which makes the whole process more efficient and user-friendly.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 Visual Studio，对 **.http** 文件的支持显著简化了 API 测试过程。我们可以在 Visual Studio 中直接创建和执行
    HTTP 请求，从而消除了为测试目的重新创建请求的需要，这使得整个过程更加高效和用户友好。
- en: 'First, we can list all the endpoints of our application with the **Endpoint
    Explorer** view. To open it, we can use the top bar menu and go to **View** |
    **Other** **Windows** | **Endpoints Explorer** :'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们可以使用 **Endpoint Explorer** 视图列出我们应用程序的所有端点。要打开它，我们可以使用顶部菜单栏，转到 **视图** |
    **其他** **窗口** | **端点探索器**：
- en: '![Figure 6.4 – Endpoints Explorer](img/B22218_06_4.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.4 – 端点探索器](img/B22218_06_4.jpg)'
- en: Figure 6.4 – Endpoints Explorer
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.4 – 端点探索器
- en: 'This view shows us a list of all the endpoints we’ve built in our application.
    Here, we can right-click on an endpoint, and it will show us the following two
    options:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 此视图显示我们在应用程序中构建的所有端点的列表。在这里，我们可以右键单击一个端点，它将显示以下两个选项：
- en: '**Open in the editor** : To jump to the code where the endpoint is defined'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在编辑器中打开**：跳转到定义端点的代码'
- en: '**Generate Request** : To write the necessary code in the **.** **http** file:'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生成请求**：在 **.** **http** 文件中编写必要的代码：'
- en: '![Figure 6.5 – Generate Request](img/B22218_06_5.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.5 – 生成请求](img/B22218_06_5.jpg)'
- en: Figure 6.5 – Generate Request
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.5 – 生成请求
- en: 'In this example ( *Figure 6* *.5* ), we’re generating the request for the **/**
    **api/cars** endpoint:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例（ *图 6* *.5* ）中，我们正在生成 **/** **api/cars** 端点的请求：
- en: '![Figure 6.6 – Generated .http request](img/B22218_06_6.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.6 – 生成的 .http 请求](img/B22218_06_6.jpg)'
- en: Figure 6.6 – Generated .http request
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.6 – 生成的 .http 请求
- en: 'Now, we have at least one request in the **.http** file and we can use it to
    test and debug our endpoint. Visual Studio offers a built-in interface to explore
    the response of the sent request:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们在 **.http** 文件中至少有一个请求，我们可以用它来测试和调试我们的端点。Visual Studio 提供了一个内置的界面来探索发送请求的响应：
- en: '![Figure 6.7 – .http file response](img/B22218_06_7.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.7 – .http 文件响应](img/B22218_06_7.jpg)'
- en: Figure 6.7 – .http file response
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.7 – .http 文件响应
- en: 'When testing APIs, we’ll want to use a different environment. HTTP files allow
    us to define environment variables in an external file. For this, we can create
    a file named **http-client.env.json** . This file must be placed in the same folder
    as the **.http** file or a parent folder. We must set the different environments
    in the JSON file like so:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试 API 时，我们可能想要使用不同的环境。HTTP 文件允许我们在外部文件中定义环境变量。为此，我们可以创建一个名为 **http-client.env.json**
    的文件。此文件必须放置在 **.http** 文件所在的同一文件夹或父文件夹中。我们必须在 JSON 文件中设置不同的环境，如下所示：
- en: '[PRE0]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, we can select the environment where we want to send the request from the
    top-right corner of the file:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以从文件的右上角选择我们想要发送请求的环境：
- en: '![Figure 6.8 – Selecting an environment](img/B22218_06_8.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.8 – 选择环境](img/B22218_06_8.jpg)'
- en: Figure 6.8 – Selecting an environment
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.8 – 选择环境
- en: Now, we can build a file that we can share with teams or clients to test and
    document our API. In some scenarios, we may want to debug our API through another
    device. Visual Studio 2022 provides a feature named **Dev Tunnel** that allows
    us to do this.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以构建一个可以与团队或客户共享以测试和记录我们的 API 的文件。在某些场景中，我们可能希望通过另一台设备调试我们的 API。Visual
    Studio 2022 提供了一个名为 **Dev Tunnel** 的功能，允许我们这样做。
- en: Configuring Dev Tunnel
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置 Dev Tunnel
- en: In Visual Studio 2022, Dev Tunnel allows developers to create temporary connections
    between machines that can’t connect directly. This feature is great for debugging
    and testing web APIs and ASP.NET Core applications, especially when these applications
    need to be accessed from various devices, such as mobile emulators or physical
    devices. It’s a valuable tool for us when we’re working on applications that require
    testing across different machines or devices.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Visual Studio 2022 中，Dev Tunnel 允许开发者创建无法直接连接的机器之间的临时连接。这个特性非常适合调试和测试 Web
    API 和 ASP.NET Core 应用程序，尤其是在这些应用程序需要从各种设备（如移动模拟器或物理设备）访问时。当我们正在开发需要跨不同机器或设备测试的应用程序时，这是一个非常有价值的工具。
- en: 'Here are some use cases where Dev Tunnel could be useful:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些 Dev Tunnel 可能有用的用例：
- en: Communication between web apps and mobile phones or tablets
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web 应用程序与手机或平板电脑之间的通信
- en: Port-forwarding solutions
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端口转发解决方案
- en: Communication with external services (for example, Twilio webhooks)
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与外部服务（例如，Twilio webhooks）的通信
- en: 'We can create a Dev Tunnel by clicking on the debug mode button and selecting
    **Dev Tunnels (no active tunnel)** | **Create** **a Tunnel…** :'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过点击调试模式按钮并选择 **Dev Tunnels（无活动隧道）** | **创建** **隧道…** 来创建一个 Dev Tunnel：
- en: '![Figure 6.9 – Create a Tunnel…](img/B22218_06_9.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.9 – 创建隧道…](img/B22218_06_9.jpg)'
- en: Figure 6.9 – Create a Tunnel…
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.9 – 创建隧道…
- en: 'After that, we get access to the configure window for our Dev Tunnel:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们就可以访问 Dev Tunnel 的配置窗口：
- en: '![Figure 6.10 – Configuring our Dev Tunnel](img/B22218_06_10.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.10 – 配置我们的 Dev Tunnel](img/B22218_06_10.jpg)'
- en: Figure 6.10 – Configuring our Dev Tunnel
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.10 – 配置我们的 Dev Tunnel
- en: 'In this window, we can set the following parameters:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在此窗口中，我们可以设置以下参数：
- en: '**Account** : We need to select an account to create the Dev Tunnel. This could
    be Azure, Microsoft Account (MSA), or GitHub.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**账户**：我们需要选择一个账户来创建 Dev Tunnel。这可能是 Azure、Microsoft Account（MSA）或 GitHub。'
- en: '**Name** : The name that will be used to identify the Dev Tunnel in Visual
    Studio.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**：在 Visual Studio 中用于识别 Dev Tunnel 的名称。'
- en: '**Tunnel Type** : Here, we can choose between two types – **Temporary** or
    **Persistent** :'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**隧道类型**：在这里，我们可以选择两种类型 – **临时**或**持久**：'
- en: '**Temporary** : A new URL is generated every time Visual Studio is started'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**临时**：每次启动 Visual Studio 时都会生成一个新的 URL'
- en: '**Persistent** : The same URL will be presented every time Visual Studio is
    started'
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持久**：每次启动 Visual Studio 时都会显示相同的 URL'
- en: '**Access** : This allows us to set the level of access. Here, we have three
    options:'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**访问**：这允许我们设置访问级别。在这里，我们有三个选项：'
- en: '**Private** : Accessible only by the creator'
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**私有**：只有创建者可以访问'
- en: '**Organization** : Accessible by all users from the same organization'
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组织**：同一组织内的所有用户均可访问'
- en: '**Public** : Free and can be used by anyone'
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**公共**：免费且任何人都可以使用'
- en: Now, we can get a URL from our local host up and ready to be shared on any device.
    For instance, we can use the URL API in a mobile to test our application, and
    during this time we can debug the API call using Visual Studio 2022.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以从本地主机获取一个 URL，并准备好在任何设备上共享。例如，我们可以在移动设备上使用 URL API 测试我们的应用程序，在此期间，我们可以使用
    Visual Studio 2022 调试 API 调用。
- en: When we talk about advanced web development these days, modern JavaScript frameworks
    are at the top of the list of frontend tools. Let’s see how we can leverage Visual
    Studio for Node.js development.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们谈论现代高级 Web 开发时，现代 JavaScript 框架是前端工具列表中的首选。让我们看看我们如何利用 Visual Studio 进行 Node.js
    开发。
- en: Node.js integration with Visual Studio
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Node.js 与 Visual Studio 的集成
- en: To develop a modern JavaScript frontend and backend, we must explore some features
    offered by Visual Studio. In this section, we will dive into how to create a JavaScript
    project with a Visual Studio workload. Then, we will learn how to manage the **npm**
    package so that we can debug our JavaScript application directly through Visual
    Studio.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开发现代 JavaScript 前端和后端，我们必须探索 Visual Studio 提供的一些功能。在本节中，我们将深入了解如何使用 Visual
    Studio 工作负载创建 JavaScript 项目。然后，我们将学习如何管理 **npm** 包，以便我们可以直接通过 Visual Studio 调试我们的
    JavaScript 应用程序。
- en: Exploring JavaScript project templates
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索 JavaScript 项目模板
- en: In Visual Studio 2022, a new project type called **JavaScript Project System**
    ( **JSPS** ) has been introduced that utilizes the **.esproj** file format. This
    system allows us to create independent Angular, React, and Vue projects directly
    within Visual Studio. These frontend projects leverage the CLI tools of the respective
    frameworks that are installed on our machine, allowing us to choose the template
    version we prefer.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Visual Studio 2022 中，引入了一种新的项目类型，称为 **JavaScript 项目系统**（**JSPS**），它使用 **.esproj**
    文件格式。这个系统允许我们在 Visual Studio 中直接创建独立的 Angular、React 和 Vue 项目。这些前端项目利用了我们机器上安装的相应框架的
    CLI 工具，使我们能够选择我们偏好的模板版本。
- en: 'First, we need to verify whether the Node.js workload has been installed properly
    in our Visual Studio instance. To do this, open the Visual Studio Installer and
    check the installed workloads (see *Figure 6* *.11* ) by clicking on the **Update**
    button for your desired Visual Studio instance:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要验证 Node.js workload 是否已正确安装在我们的 Visual Studio 实例中。为此，打开 Visual Studio
    安装程序，通过单击所需 Visual Studio 实例的 **更新** 按钮来检查已安装的工作负载（见 *图 6* *.11* ）：
- en: '![Figure 6.11 – Node.js development workload](img/B22218_06_11.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.11 – Node.js 开发 workload](img/B22218_06_11.jpg)'
- en: Figure 6.11 – Node.js development workload
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.11 – Node.js 开发 workload
- en: 'Having ensured that we have the necessary workload installed, we can explore
    the template offered by Visual Studio 2022 for JavaScript development. For that,
    we will create a new project and select **JavaScript** in the **Language combo**
    box. Once you’ve done that, you will be presented with the following screen:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 确保我们安装了必要的 workload 后，我们可以探索 Visual Studio 2022 为 JavaScript 开发提供的模板。为此，我们将创建一个新的项目，并在
    **语言组合框** 中选择 **JavaScript**。一旦你这样做，你将看到以下屏幕：
- en: '![Figure 6.12 – JavaScript template](img/B22218_06_12.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.12 – JavaScript 模板](img/B22218_06_12.jpg)'
- en: Figure 6.12 – JavaScript template
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.12 – JavaScript 模板
- en: 'Here, we can see that Visual Studio offers several JavaScript base templates
    that we can split into three categories:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到 Visual Studio 提供了几个 JavaScript 基础模板，这些模板可以分为三类：
- en: ASP.NET Core combines with the modern JavaScript framework
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ASP.NET Core 与现代 JavaScript 框架结合
- en: Standalone JavaScript project (client-side)
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 独立 JavaScript 项目（客户端）
- en: Backend Node.js project
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后端 Node.js 项目
- en: For our example, we will pick the **ReactApp** template as standalone JavaScript
    project .
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的示例，我们将选择 **ReactApp** 模板作为独立的 JavaScript 项目。
- en: 'When creating the project, we’ll see that Visual Studio launches a console
    prompting for the **npm cli** command so that it can create the application:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建项目时，我们会看到 Visual Studio 启动一个控制台，提示输入 **npm cli** 命令，以便它可以创建应用程序：
- en: '![Figure 6.13 – npm CLI](img/B22218_06_13.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.13 – npm CLI](img/B22218_06_13.jpg)'
- en: Figure 6.13 – npm CLI
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.13 – npm CLI
- en: Once we’ve set up the project, we can develop our application while adhering
    to React or other modern JavaScript frameworks. One of the initial steps involves
    installing the necessary npm packages. While we can certainly do this directly
    using the npm CLI, let’s explore how Visual Studio can assist us in this process.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们设置了项目，我们就可以在遵循 React 或其他现代 JavaScript 框架的同时开发我们的应用程序。其中一个初始步骤是安装必要的 npm
    包。虽然我们可以直接使用 npm CLI 来做这件事，但让我们看看 Visual Studio 如何帮助我们完成这个过程。
- en: Managing npm packages
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理npm包
- en: Managing npm packages in Visual Studio 2022 involves using the npm package manager.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Visual Studio 2022 中管理 npm 包涉及使用 npm 包管理器。
- en: Beginning with Visual Studio 2022, we have access to the npm package manager
    for CLI-based projects. This means that we can now download npm modules like how
    we can download NuGet packages for ASP.NET Core projects. We can then utilize
    the **package.json** file to make modifications to packages and remove them as
    needed.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Visual Studio 2022 开始，我们可以访问基于 CLI 的项目的 npm 包管理器。这意味着我们现在可以像下载 ASP.NET Core
    项目的 NuGet 包一样下载 npm 模块。然后，我们可以利用 **package.json** 文件对包进行修改，并在需要时将其删除。
- en: 'We can access the npm package manager by right-clicking on the **npm** node
    of the folder structure:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过右键单击文件夹结构中的 **npm** 节点来访问 npm 包管理器：
- en: '![Figure 6.14 – Debugging a JavaScript application](img/B22218_06_14.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.14 – 调试 JavaScript 应用程序](img/B22218_06_14.jpg)'
- en: Figure 6.14 – Debugging a JavaScript application
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.14 – 调试 JavaScript 应用程序
- en: 'Then, we can select **Install New npm Packages…** , which will open the manager:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以选择 **安装新的 npm 包…**，这将打开管理器：
- en: '![Figure 6.15 – Install New npm Packages](img/B22218_06_15.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.15 – 安装新的 npm 包](img/B22218_06_15.jpg)'
- en: Figure 6.15 – Install New npm Packages
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.15 – 安装新的 npm 包
- en: In this window, we can find all the packages we need to build our modern JavaScript
    application. As with any application development process, there comes a time when
    we need to debug. Let’s explore how Visual Studio can enhance our experience of
    debugging modern JavaScript applications.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在此窗口中，我们可以找到构建现代 JavaScript 应用程序所需的所有包。与任何应用程序开发过程一样，总有需要调试的时候。让我们来探讨 Visual
    Studio 如何增强我们调试现代 JavaScript 应用程序的经验。
- en: Debugging JavaScript applications
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试 JavaScript 应用程序
- en: 'Working with server-side JavaScript allows us to debug our application similarly
    to debugging a C# application. To do so, we must follow these steps:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 使用服务器端 JavaScript 可以使我们以类似于调试 C# 应用程序的方式调试我们的应用程序。为此，我们必须遵循以下步骤：
- en: '**Set breakpoints** : Open your server-side JavaScript file (for example, **server.js**
    ) in Visual Studio and click in the gutter area to set a breakpoint.'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**设置断点**：在 Visual Studio 中打开您的服务器端 JavaScript 文件（例如，**server.js**），然后在空白区域单击以设置断点。'
- en: '**Run the application in debug mode** : Press *F5* or go to **Debug** | **Start
    Debugging** to run our application in debug mode. Visual Studio will pause execution
    at the breakpoint we set.'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**以调试模式运行应用程序**：按 *F5* 或转到 **调试** | **开始调试** 以在调试模式下运行我们的应用程序。Visual Studio
    将在设置的断点处暂停执行。'
- en: '**Inspect the application’s state** : While paused at the breakpoint, we can
    inspect our application’s state by hovering over variables in scope or using debugger
    windows such as **Locals** and **Watch** .'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**检查应用程序的状态**：在断点暂停时，我们可以通过悬停在作用域内的变量上或使用如 **局部变量** 和 **监视** 等调试窗口来检查应用程序的状态。'
- en: '**Continue execution** : To continue running our application after inspecting
    it, press *F5* again.'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**继续执行**：在检查完应用程序后，再次按 *F5* 以继续运行我们的应用程序。'
- en: As you can see, debugging server-side JavaScript applications is straightforward.
    Now, let’s explore debugging client-side scripts.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，调试服务器端 JavaScript 应用程序非常简单。现在，让我们来探讨如何调试客户端脚本。
- en: Debugging client-side scripts
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调试客户端脚本
- en: In Visual Studio, we have debugging support specifically for Chrome and Microsoft
    Edge (Chromium) when it comes to client-side debugging. Sometimes, our debugger
    will automatically stop at breakpoints in JavaScript, TypeScript, and embedded
    scripts within HTML files.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中，当涉及到客户端调试时，我们为 Chrome 和 Microsoft Edge（Chromium）提供了专门的调试支持。有时，我们的调试器会自动在
    JavaScript、TypeScript 以及 HTML 文件中嵌入的脚本断点处停止。
- en: 'To debug JavaScript within ASP.NET using Chrome, Edge (Chromium), and Internet
    Explorer, we need to navigate to the debugging option by selecting **Tools** |
    **Options** | **Debugging** | **General** , and then check the **Enable JavaScript
    debugging for ASP.NET (Chrome, Edge, and** **IE)** box:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Chrome、Edge（Chromium）和 Internet Explorer 调试 ASP.NET 中的 JavaScript，我们需要通过选择
    **工具** | **选项** | **调试** | **常规** 来导航到调试选项，然后勾选 **为 ASP.NET（Chrome、Edge 和 IE）启用
    JavaScript 调试** 复选框：
- en: '![Figure 6.16 – Debugging options](img/B22218_06_16.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.16 – 调试选项](img/B22218_06_16.jpg)'
- en: Figure 6.16 – Debugging options
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.16 – 调试选项
- en: Enabling this option ensures that Visual Studio supports debugging client-side
    code effectively within ASP.NET projects.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 启用此选项确保 Visual Studio 在 ASP.NET 项目中有效地支持客户端代码的调试。
- en: In our previous example, we created a standalone React application that required
    our source code to be transpiled by tools such as TypeScript or Babel. Utilizing
    source maps during debugging ensures an optimal experience by bridging the gap
    between minified or transpiled code and its original, human-readable form. This
    facilitates debugging by allowing developers to set breakpoints and inspect variables
    in their original state within the browser’s developer tools or Visual Studio’s
    debugging environment.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的示例中，我们创建了一个独立的 React 应用程序，它需要我们的源代码通过 TypeScript 或 Babel 等工具进行转换。在调试期间使用源映射通过连接压缩或转换代码与其原始的、可读的格式，确保了最佳体验。这通过允许开发者在浏览器开发者工具或
    Visual Studio 的调试环境中设置断点并检查其原始状态下的变量，从而简化了调试过程。
- en: 'Visual Studio automatically generates source maps for TypeScript projects.
    However, for JavaScript projects, we need to configure build tools such as webpack
    to produce source maps. For TypeScript projects, include a **tsconfig.json** file
    with the **sourceMap** compiler option set to true. For JavaScript projects using
    webpack, configure it with **devtool: "source-map"** .'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 'Visual Studio 自动为 TypeScript 项目生成源映射。然而，对于 JavaScript 项目，我们需要配置构建工具，如 webpack，以生成源映射。对于
    TypeScript 项目，包含一个设置 **sourceMap** 编译器选项为 true 的 **tsconfig.json** 文件。对于使用 webpack
    的 JavaScript 项目，配置它为 **devtool: "source-map"**。'
- en: Next, ensure that Visual Studio is properly configured to use source maps. This
    may involve adjusting paths within generated source map files to accurately reference
    source files. For webpack users, remove the **webpack:///** prefix from source
    map paths.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，确保 Visual Studio 正确配置以使用源映射。这可能涉及调整生成的源映射文件中的路径，以准确引用源文件。对于 webpack 用户，从源映射路径中移除
    **webpack:///** 前缀。
- en: Once source maps have been set up, debugging a React project in Visual Studio
    becomes straightforward. Simply attach the debugger to the running application
    – this allows you to set breakpoints and step through the code as if it were running
    in its original, un-minified form. This streamlined approach helps with quickly
    identifying and fixing issues.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦设置了源映射，在 Visual Studio 中调试 React 项目就变得简单直接。只需将调试器附加到正在运行的应用程序上——这允许你设置断点并像代码以原始、未压缩的形式运行时一样逐步执行代码。这种简化的方法有助于快速识别和修复问题。
- en: For more complex debugging scenarios, additional adjustments to the project
    configuration or the use of supplementary tools may be necessary. Ensure that
    webpack is configured properly to generate source maps. Additionally, enable JavaScript
    source maps in your browser’s Developer Tools settings to fully utilize source
    maps during debugging.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更复杂的调试场景，可能需要对项目配置进行额外调整或使用辅助工具。确保 webpack 正确配置以生成源映射。此外，在浏览器开发者工具设置中启用 JavaScript
    源映射，以便在调试期间充分利用源映射。
- en: Summary
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we embarked on an advanced exploration of web development tools
    within the robust environment of Visual Studio 2022. Our journey began with an
    in-depth look at Web Live Preview, a cutting-edge tool enabling real-time web
    previews to streamline design visualization and iteration for Web Forms projects.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们开始了对 Visual Studio 2022 强大环境中网络开发工具的高级探索。我们的旅程从对 Web Live Preview 的深入分析开始，这是一个前沿工具，能够实现实时网络预览，从而简化
    Web Forms 项目的可视化设计和迭代。
- en: We then delved into the dynamic capabilities of Visual Studio’s API Exploration
    and Dev Tunnel functionalities, empowering developers to gain insights into service
    endpoints and seamlessly integrate with external APIs for interactive development
    and testing.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们深入研究了 Visual Studio 的 API 探索和 Dev Tunnel 功能的动态能力，使开发者能够深入了解服务端点，并能够无缝集成外部
    API 进行交互式开发和测试。
- en: Furthermore, we explored Node.js integration with Visual Studio, uncovering
    JavaScript project templates, effective npm package management techniques, and
    the intricacies of debugging JavaScript applications within the Visual Studio
    ecosystem.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们探讨了 Node.js 与 Visual Studio 的集成，揭示了 JavaScript 项目模板、有效的 npm 包管理技巧以及 Visual
    Studio 生态系统内调试 JavaScript 应用程序的复杂性。
- en: In the next chapter, we will delve into machine learning integration with Visual
    Studio 2022, exploring how to leverage the latest features to seamlessly integrate
    machine learning models into applications.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨 Visual Studio 2022 与机器学习的集成，探索如何利用最新功能无缝地将机器学习模型集成到应用程序中。
