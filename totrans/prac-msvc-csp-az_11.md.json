["```cs\n{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft.AspNetCore\": \"Warning\",\n      \"Microsoft.EntityFrameworkCore\": \"Warning\",\n      \"Codebreaker\": \"Trace\"\n    },\n    \"EventSource\": {\n      \"LogLevel\": {\n        \"Default\": \"Warning\"\n      }\n    }\n  }\n}\n```", "```cs\npublic static partial class Log\n{\n  [LoggerMessage(\n    EventId = 3001,\n    Level = LogLevel.Warning,\n    Message = \"Game {GameId} not found\")]\npublic static partial void GameNotFound(this ILogger logger, \n    Guid gameId);\n  // code removed for brevity\n  [LoggerMessage(\n    EventId = 4001,\n    Level = LogLevel.Information,\n    Message = \"The move {Move} was set for {GameId} with result {Result}\")]\n  public static partial void SendMove(this ILogger logger, string \n    move, Guid gameId, string result);\n  // code removed for brevity\n}\n```", "```cs\n[LoggerMessage(\n  EventId = 4003,\n  Level = LogLevel.Information,\n  Message = \"Game lost after {Seconds} seconds with game {Gameid}\")]\nprivate static partial void GameLost(this ILogger logger, int seconds, Guid gameid);\npublic static void GameEnded(this ILogger logger, Game game)\n{\n  if (logger.IsEnabled(LogLevel.Information))\n  {\n    if (game.IsVictory)\n    {\nlogger.GameWon(game.Moves.Count, game.Duration?.Seconds ?? 0, \n        game.Id);\n    }\n    else\n    {\n      logger.GameLost(game.Duration?.Seconds ?? 0, game.Id);\n    }\n  }\n}\n```", "```cs\npublic class GamesService(\n  IGamesRepository dataRepository,\n  ILogger<GamesService> logger) : IGamesService\n{\n  // code removed for brevity\n}\n```", "```cs\npublic async Task<Game> StartGameAsync(\n  string gameType,\n  string playerName,\n  CancellationToken cancellationToken = default)\n{\n  Game game;\n  try\n  {\n    game = GamesFactory.CreateGame(gameType, playerName);\n    await dataRepository.AddGameAsync(game, cancellationToken);\nlogger.GameStarted(game.Id);\n  }\ncatch (CodebreakerException ex) when (ex.Code is \n    CodebreakerExceptionCodes.InvalidGameType)\n  {\n    logger.InvalidGameType(gameType);\n    throw;\n  }\n  catch (Exception ex)\n  {\n    logger.Error(ex, ex.Message);\n    throw;\n  }\n  return game;\n}\n```", "```cs\npublic static IHostApplicationBuilder ConfigureOpenTelemetry(this IHostApplicationBuilder builder)\n{\n  builder.Logging.AddOpenTelemetry(logging =>\n  {\n    logging.IncludeFormattedMessage = true;\n    logging.IncludeScopes = true;\n  });\n  // code removed for brevity\n}\n```", "```cs\npublic sealed class GamesMetrics : IDisposable\n{\n  public const string MeterName = \"Codebreaker.Games\";\n  public const string Version = \"1.0\";\n  private readonly Meter _meter;\n  private readonly UpDownCounter<long> _activeGamesCounter;\n  private readonly Histogram<double> _gameDuration;\n  private readonly Histogram<double> _moveThinkTime;\n  private readonly Histogram<int> _movesPerGameWin;\n  private readonly Counter<long> _invalidMoveCounter;\n  private readonly Counter<long> _gamesWonCounter;\n  private readonly Counter<long> _gamesLostCounter;\n  private readonly ConcurrentDictionary<Guid, DateTime> _moveTimes = new();\n```", "```cs\npublic GamesMetrics(IMeterFactory meterFactory)\n{\n  _meter = meterFactory.Create(MeterName, Version);\n  _activeGamesCounter = _meter.CreateUpDownCounter<long>(\n    \"codebreaker.active_games\",\n    unit: \"{games}\",\ndescription: \"Number of games that are currently active on the \n      server.\");\n  _gameDuration = _meter.CreateHistogram<double>(\n\"codebreaker.game_duration\",\n    unit: \"s\",\n    description: \"Duration of a game in seconds.\");\n  // code removed for brevity\n}\n```", "```cs\nprivate static KeyValuePair<string, object?> CreateGameTypeTag(string gameType) =>\n  KeyValuePair.Create<string, object?>(\"GameType\", gameType);\nprivate static KeyValuePair<string, object?> CreateGameIdTag(Guid id) =>\n  KeyValuePair.Create<string, object?>(\"GameId\", id.ToString());\n```", "```cs\npublic void GameStarted(Game game)\n{\n  if (_moveThinkTime.Enabled)\n  {\n     _moveTimes.TryAdd(game.Id, game.StartTime);\n  }\n  if (_activeGamesCounter.Enabled)\n  {\n_activeGamesCounter.Add(1, CreateGameTypeTag(game.GameType));\n  }\n}\n```", "```cs\npublic void MoveSet(Guid id, DateTime moveTime, string gameType)\n{\n  if (_moveThinkTime.Enabled)\n  {\n    _moveTimes.AddOrUpdate(id, moveTime, (id1, prevTime) =>\n    {\n      _moveThinkTime.Record((moveTime - prevTime).TotalSeconds, \n        [CreateGameIdTag(id1), CreateGameTypeTag(gameType)]);\n      return moveTime;\n    });\n  }\n}\n```", "```cs\npublic class GamesService(\n  IGamesRepository dataRepository,\n  ILogger<GamesService> logger,\n  GamesMetrics metrics) : IGamesService\n{\n  public async Task<Game> StartGameAsync(\n    string gameType,\n    string playerName,\n    CancellationToken cancellationToken = default)\n  {\n    Game game;\n    try\n    {\n      game = GamesFactory.CreateGame(gameType, playerName);\n      await dataRepository.AddGameAsync(game, cancellationToken);\n            metrics.GameStarted(game);\n            logger.GameStarted(game.Id);\n        }\n      // code removed for brevity\n  return game;\n}\n```", "```cs\nbuilder.Services.AddMetrics();\nbuilder.Services.AddSingleton<GamesMetrics>();\nbuilder.Services.AddOpenTelemetry()\n  .WithMetrics(m => m.AddMeter(GamesMetrics.MeterName));\n```", "```cs\ninternal sealed class TestMeterFactory : IMeterFactory\n{\n  public List<Meter> Meters { get; } = [];\n  public Meter Create(MeterOptions options)\n  {\n    Meter meter = new(options.Name, options.Version, Array.\nEmpty<KeyValuePair<string, object?>>(), scope: this);\n    Meters.Add(meter);\n    return meter;\n  }\n  public void Dispose()\n  {\n    foreach (var meter in Meters)\n    {\n      meter.Dispose();\n    }\n    Meters.Clear();\n  }\n}\n```", "```cs\nprivate GamesService GetGamesService()\n{\n  IMeterFactory meterFactory = new TestMeterFactory();\n  GamesMetrics metrics = new(meterFactory);\n  return new GamesService(\n    _gamesRepositoryMock.Object,\n    NullLogger<GamesService>.Instance,\n    metrics);\n}\n```", "```cs\nprivate static IServiceProvider CreateServiceProvider()\n{\n  ServiceCollection services = new();\n  service.AddMetrics();\n  services.AddSingleton<GamesMetrics>();\n  return serviceCollection.BuildServiceProvider();\n}\nprivate static (IMeterFactory MeterFactory, GamesMetrics Metrics) CreateMeterFactorySkeleton()\n{\n  var container = CreateServiceProvider();\n  GamesMetrics metrics = container.GetRequiredService<GamesMetrics>();\n  IMeterFactory meterFactory = container.GetRequiredService<IMeterFactory>();\n  return (meterFactory, metrics);\n}\n```", "```cs\npublic class GamesMetricsTests\n{\n  private Guid _gameId = Guid.Parse(\"DBDF4DD9-3A02-4B2A-87F6-FFE4BA1DCE52\");\n  private DateTime _gameStartTime = new DateTime(2024, 1, 1, 12, 10, 5);\n  private DateTime _gameMove1Time = new DateTime(2024, 1, 1, 12, 10, 15);\n  [Fact]\n  public void MoveSet_Should_Record_ThinkTime()\n  {\n    // arrange\n    (IMeterFactory meterFactory, GamesMetrics metrics) = \nCreateMeterFactorySkeleton();\n    MetricCollector<double> collector = new(meterFactory, \nGamesMetrics.MeterName, \"codebreaker.move_think_time\");\n    var game = GetGame();\n    metrics.GameStarted(game);\n    // act\n    metrics.MoveSet(game.Id, _gameMove1Time, \"Game6x4\");\n    // assert\n    var measurements = collector.GetMeasurementSnapshot();\n    Assert.Single(measurements);\nAssert.Equal(10, measurements[0].Value);\n  }\n  // code removed for brevity\n```", "```cs\npublic static void AddApplicationTelemetry(this IhostApplicationBuilder builder)\n{\n  // code removed for brevity\n  const string ActivitySourceName = \"Codebreaker.GameAPIs\";\n  const string ActivitySourceVersion = \"1.0.0\";\nbuilder.Services.AddKeyedSingleton(ActivitySourceName, (services, _) \n  =>\n    new ActivitySource(ActivitySourceName,\nActivitySourceVersion));\n```", "```cs\npublic class GamesService(\n  IGamesRepository dataRepository,\n  ILogger<GamesService> logger,\n  GamesMetrics metrics,\n[FromKeyedServices(\"Codebreaker.GameAPIs\")] ActivitySource \n    activitySource) :\n    IGamesService\n{\n  // code removed for brevity\n```", "```cs\npublic async Task<Game> StartGameAsync(string gameType, string playerName, CancellationToken cancellationToken = default)\n{\n  Game game;\nusing var activity = activitySource.CreateActivity(\"StartGame\", \n    ActivityKind.Server);\n  try\n  {\n    game = GamesFactory.CreateGame(gameType, playerName);\n    activity?.AddTag(GameTypeTagName, game.GameType)\n.AddTag(GameIdTagName, game.Id.ToString())\n      .Start();\n    await dataRepository.AddGameAsync(game, cancellationToken);\n    metrics.GameStarted(game);\n    logger.GameStarted(game.Id);\n    activity?.SetStatus(ActivityStatusCode.Ok);\n  }\n  catch (CodebreakerException ex) when (ex.Code is CodebreakerExceptionCodes.InvalidGameType)\n  {\n    logger.InvalidGameType(gameType);\n    activity?.SetStatus(ActivityStatusCode.Error, ex.Message);\n    throw;\n  }\n  catch (Exception ex)\n  {\n    logger.Error(ex, ex.Message);\n    activity?.SetStatus(ActivityStatusCode.Error, ex.Message);\n    throw;\n  }\n  return game;\n}\n```", "```cs\npublic static IHostApplicationBuilder ConfigureOpenTelemetry(this IHostApplicationBuilder builder)\n{\n  // code removed for brevity\n  builder.Services.AddOpenTelemetry()\n    .WithTracing(tracing =>\n    {\n      if (builder.Environment.IsDevelopment())\n      {\n        tracing.SetSampler(new AlaysOnSampler());\n      }\n      tracing.AddSource(\n        \"Codebreaker.GameAPIs.Client\",\n        \"Codebreaker.GameAPIs\")\n        .AddAspNetCoreInstrumentation()\n        .AddGrpcClientInstrumentation()\n        .AddHttpClientInstrumentation();\n```", "```cs\nvar builder = DistributedApplication.CreateBuilder(args);\n// code removed for brevity\nvar logs = builder.AddAzureLogAnalyticsWorkspace(\"logs\");\nvar appInsights = builder.AddAzureApplicationInsights(\"insights\", logs);\nvar cosmos = builder.AddAzureCosmosDB(\"codebreakercosmos\")\n  .AddDatabase(\"codebreaker\");\nvar gameAPIs = builder.AddProject<Projects.Codebreaker_GameAPIs>(\"gameapis\")\n    .WithReference(cosmos)\n    .WithReference(appInsights);\nvar bot = builder.AddProject<Projects.CodeBreaker_Bot>(\"bot\")\n    .WithReference(gameAPIs)\n.WithReference(appInsights);\nbuilder.Build().Run();\n// code removed for brevity\n```", "```cs\nprivate static IHostApplicationBuilder AddOpenTelemetryExporters(\n  this IHostApplicationBuilder builder)\n{\n  builder.Services.AddOpenTelemetry()\n    .UseAzureMonitor(options =>\n    {\n      options.ConnectionString = builder.Configuration[\n        \"APPLICATIONINSIGHTS_CONNECTION_STRING\"];\n    });\n  // code removed for brevity\n  return builder;\n}\n```", "```cs\ncustomMetrics\n| where name == \"ec.Microsoft.EntityFrameworkCore.queries-per-second\"\n| summarize avg(value) by bin(timestamp, 5min)\n| render timechart\n```", "```cs\ndotnet run --project Codebreaker.AppHost.csproj --launch-profile OnPremises\n```", "```cs\nvar builder = DistributedApplication.CreateBuilder(args);\nvar sqlServer = builder.AddSqlServer(\"sql\")\n  .WithDataVolume()\n  .PublishAsContainer()\n  .AddDatabase(\"CodebreakerSql\");\nvar prometheus = builder.AddContainer(\"prometheus\", \"prom/prometheus\")\n  .WithBindMount(\"../prometheus\", \"/etc/prometheus\", isReadOnly: true)\n  .WithHttpEndpoint(9090, hostPort: 9090);\n// code removed for brevity\n```", "```cs\nvar grafana = builder.AddContainer(\"grafana\", \"grafana/grafana\")\n  .WithBindMount(\"../grafana/config\", \"/etc/grafana\",\n    isReadOnly: true)\n  .WithBindMount(\"../grafana/dashboards\",\n    \"/var/lib/grafana/dashboards\", isReadOnly: true)\n  .WithHttpEndpoint(containerPort: 3000, hostPort: 3000,\n    name: \"grafana-http\");\nvar gameAPIs = builder.AddProject<Projects.Codebreaker_GameAPIs>(\"gameapis\")\n  .WithReference(sqlServer)\n  .WithEnvironment(\"DataStore\", dataStore)\n  .WithEnvironment(\"GRAFANA_URL\",\n    grafana.GetEndpoint(\"grafana-http\"));\n  .WithEnvironment(\"StartupMode\", startupMode);\n  builder.AddProject<Projects.CodeBreaker_Bot>(\"bot\")\n    .WithReference(gameAPIs);\n    .WithEnvironment(\"StartupMode\", startupMode);\n// code removed for brevity\n```", "```cs\nglobal:\n  scrape_interval: 1s\nscrape_configs:\n  - job_name: 'codebreakergames'\n    static_configs:\n      - targets: ['host.docker.internal:9400']\n  - job_name: 'codebreakerbot'\n    static_configs:\n- targets: ['host.docker.internal:5141']\n```", "```cs\npublic static WebApplication MapDefaultEndpoints(this WebApplication app)\n{\n  if (Environment.GetEnvironmentVariable(\"StartupMode\") == \"OnPremises\")\n  {\n    app.MapPrometheusScrapingEndpoint();\n  }\n// code removed for brevity\n  return app;\n}\n```", "```cs\nprivate static IHostApplicationBuilder AddOpenTelemetryExporters(this IHostApplicationBuilder builder)\n{\n  // code removed for brevity\n  builder.Services.AddOpenTelemetry()\n    .WithMetrics(metrics => metrics.AddPrometheusExporter());\n  return builder;\n}\n```", "```cs\n[auth.anonymous]\nenabled = true\norg_name = Main Org.\norg_role = Admin\nhide_version = false\n[dashboards]\ndefault_home_dashboard_path = /var/lib/grafana/dashboards/aspnetcore.json\nmin_refresh_interval = 1s\n```", "```cs\napiVersion: 1\ndatasources:\n  - name: Prometheus\n    type: prometheus\n    access: proxy\nurl: http://host.docker.internal:9090\n    uid: PBFA97CFB590B2093\n```", "```cs\napiVersion: 1\nproviders:\n  - name: Default\n    folder: .NET\n    type: file\n    options:\n      path:\n        /var/lib/grafana/dashboards\n```"]