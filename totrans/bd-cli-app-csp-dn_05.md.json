["```cs\nnameOption.IsRequired = true;\nurlOption.IsRequired = true;\n```", "```cs\npublic class Bookmark\n{\n    public required string Name { get; set; }\n    public required string Url { get; set; }\n    public required string Category { get; set; }\n}\n```", "```cs\nvar categoryOption = new Option<string>(\n     [\"--category\", \"-c\"],\n     \"The category to which the bookmark is associated\"\n);\nvar addLinkCommand = new Command(\"add\", \"Add a new bookmark link\")\n{\n     nameOption,\n     urlOption,\n     categoryOption\n};\n```", "```cs\naddLinkCommand.SetHandler(OnHandleAddLinkCommand, nameOption, urlOption, categoryOption);\nstatic void OnHandleAddLinkCommand(string name, string url, string category)\n{\n     service.AddLink(name, url, category);\n}\n```", "```cs\n$ bookmarkr link add 'Packt Publishing' 'https://packtpub.com' 'Great tech books'\n```", "```cs\ncategoryOption.SetDefaultValue(\"Read later\");\n```", "```cs\ncategoryOption.FromAmong(\"Read later\", \"Tech books\", \"Cooking\", \"Social media\");\n```", "```cs\nurlOption.AddValidator(result =>\n{\n    if (result.Tokens.Count == 0)\n    {\n        result.ErrorMessage = \"The URL is required\";\n    }\n    else if (!Uri.TryCreate(result.Tokens[0].Value, UriKind.Absolute, \n    out _))\n    {\n        result.ErrorMessage = \"The URL is invalid\";\n    }\n});\n```", "```cs\ndotnet run link add --name 'Packt Publishing' --url 'https://packtpub.com/' --name 'Audi cars' --url 'https://audi.ca'\n```", "```cs\n--force\n-- force true\n```", "```cs\nnameOption.Arity = ArgumentArity.OneOrMore;\n```", "```cs\nnameOption.AllowMultipleArgumentsPerToken = true;\n```", "```cs\nvar nameOption = new Option<string[]>(\n    [\"--name\", \"-n\"], // equivalent to new string[] { \"--name\", \"-n\" }\n     \"The name of the bookmark\"\n);\nnameOption.IsRequired = true;\nnameOption.Arity = ArgumentArity.OneOrMore;\nnameOption.AllowMultipleArgumentsPerToken = true;\nvar urlOption = new Option<string[]>(\n    [\"--url\", \"-u\"],\n    \"The URL of the bookmark\"\n);\nurlOption.IsRequired = true;\nurlOption.Arity = ArgumentArity.OneOrMore;\nurlOption.AllowMultipleArgumentsPerToken = true;\nurlOption.AddValidator(result =>\n{\n    foreach (var token in result.Tokens)\n    {\n        if (string.IsNullOrWhiteSpace(token.Value))\n        {\n            result.ErrorMessage = \"URL cannot be empty\";\n            break;\n        }\n        else if (!Uri.TryCreate(token.Value, UriKind.Absolute, out _))\n        {\n            result.ErrorMessage = $\"Invalid URL: {token.Value}\";\n            break;\n        }\n    }\n});\nvar categoryOption = new Option<string[]>(\n    [\"--category\", \"-c\"],\n    \"The category to which the bookmark is associated\"\n);\ncategoryOption.Arity = ArgumentArity.OneOrMore;\ncategoryOption.AllowMultipleArgumentsPerToken = true;\ncategoryOption.SetDefaultValue(\"Read later\");\ncategoryOption.FromAmong(\"Read later\", \"Tech books\", \"Cooking\", \"Social media\");\ncategoryOption.AddCompletions(\"Read later\", \"Tech books\", \"Cooking\", \"Social media\");\nstatic void OnHandleAddLinkCommand(string[] names, string[] urls, string[] categories)\n{\n    service.AddLinks(names, urls, categories);\n    service.ListAll();\n}\n```", "```cs\n$ dotnet run link add --name 'Packt Publishing' --url 'https://packtpub.com/' --category 'Tech books' --name 'Audi cars' --url 'https://audi.ca' --category 'Read later'\n```", "```cs\n$ dotnet run link add --name 'Packt Publishing' 'Audi cars' --url 'https://packtpub.com/' 'https://audi.ca' --category 'Tech books' 'Read later'\n```", "```cs\nvar outputfileOption = new Option<FileInfo>(\n    [\"--file\", \"-f\"],\n    \"The output file that will store the bookmarks\"\n)\n{\n    IsRequired = true\n};\n```", "```cs\nvar exportCommand = new Command(\"export\", \"Exports all bookmarks to a file\")\n{\n    outputfileOption\n};\nrootCommand.AddCommand(exportCommand);\n```", "```cs\nexportCommand.SetHandler(OnExportCommand, outputfileOption);\nstatic void OnExportCommand(FileInfo outputfile)\n{\n    var bookmarks = service.GetAll();\n    string json = JsonSerializer.Serialize(bookmarks, new \n    JsonSerializerOptions { WriteIndented = true });\n    File.WriteAllText(outputfile.FullName, json);\n}\n```", "```cs\nusing System.Text.Json;\n```", "```cs\noutputfileOption.LegalFileNamesOnly();\n```", "```cs\n$ bookmarkr import --file <path to the input file>\n```", "```cs\nvar inputfileOption = new Option<FileInfo>(\n    [\"--file\", \"-f\"],\n    \"The input file that contains the bookmarks to be imported\"\n)\n{\n    IsRequired = true\n};\ninputfileOption.LegalFileNamesOnly();\ninputfileOption.ExistingOnly();\nvar importCommand = new Command(\"import\", \"Imports all bookmarks from a file\")\n{\n    inputfileOption\n};\nrootCommand.AddCommand(importCommand);\nimportCommand.SetHandler(OnImportCommand, inputfileOption);\nstatic void OnImportCommand(FileInfo inputfile)\n{\n    string json = File.ReadAllText(inputfile.FullName);\n    List<Bookmark> bookmarks = JsonSerializer.\n    Deserialize<List<Bookmark>>(json) ?? new List<Bookmark>();\n    service.Import(bookmarks);\n}\n```", "```cs\n$ bookmarkr import --file <path to the input file>\n```", "```cs\n$ bookmarkr import --file <path to the input file> --merge\n```"]