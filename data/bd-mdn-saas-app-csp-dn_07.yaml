- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Building a User Interface
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建用户界面
- en: In this chapter, we will be exploring how to build a web-based frontend using
    Blazor, a client-side web framework that interfaces with the .NET web API backend
    that we built up in previous chapters. Blazor is a powerful and flexible framework
    that allows us to write C# code that runs in the browser, enabling us to create
    rich and interactive web applications with a single code base.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨如何使用Blazor构建基于Web的前端，Blazor是一个客户端Web框架，它与我们之前章节中构建的.NET Web API后端进行交互。Blazor是一个强大且灵活的框架，它允许我们编写在浏览器中运行的C#代码，使我们能够使用单个代码库创建丰富和交互式的Web应用程序。
- en: We will start by looking at the many important techniques that you will have
    to understand before building a user interface. These will be tasks such as generating
    user personas, building user journeys, wireframing, and creating tickets.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先探讨在构建用户界面之前你必须理解的重要技术。这些任务包括生成用户画像、构建用户旅程、线框图和创建票据。
- en: After we have covered the background work, we will start by modifying the Dockerized
    development environment to facilitate frontend development and creating a new
    Blazor project. We will also explore the basic structure of a Blazor application,
    including the components, pages, and layouts.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们完成背景工作之后，我们将开始修改Docker化的开发环境，以方便前端开发并创建一个新的Blazor项目。我们还将探索Blazor应用程序的基本结构，包括组件、页面和布局。
- en: Next, we will cover how to connect to a .NET web API backend. We will show how
    to consume data from the web API, using the client code to call the API endpoints
    and retrieve the data, and display it in the user interface.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将介绍如何连接到.NET Web API后端。我们将展示如何从Web API中获取数据，使用客户端代码调用API端点并检索数据，然后在用户界面中显示它。
- en: We will then dive into the details of designing the user interface, including
    creating the layout, designing the components, and adding the necessary controls
    and elements to create a responsive and visually appealing user interface.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将深入了解设计用户界面的细节，包括创建布局、设计组件以及添加必要的控件和元素，以创建一个响应式且视觉上吸引人的用户界面。
- en: By the end of this chapter, you will have a comprehensive understanding of how
    to build a Blazor frontend that connects to a .NET web API backend, and how to
    create a responsive and scalable web application that provides a seamless UX for
    your customers.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将全面了解如何构建一个连接到.NET Web API后端的Blazor前端，以及如何创建一个响应式且可扩展的Web应用程序，为你的客户提供无缝的用户体验。
- en: 'The main topics covered in this chapter are as follows:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主要主题如下：
- en: A general introduction to the tech stack
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 技术栈的一般介绍
- en: How to make sure your app serves your customers
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何确保你的应用程序满足客户需求
- en: Some practical examples of how to build a UI with Blazor
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些使用Blazor构建UI的实用示例
- en: How to interact with the backend
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何与后端交互
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: All code from this chapter can be found at [https://github.com/PacktPublishing/Building-Modern-SaaS-Applications-with-C-and-.NET/tree/main/Chapter-7](https://github.com/PacktPublishing/Building-Modern-SaaS-Applications-with-C-and-.NET/tree/main/Chapter-7).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的所有代码都可以在[https://github.com/PacktPublishing/Building-Modern-SaaS-Applications-with-C-and-.NET/tree/main/Chapter-7](https://github.com/PacktPublishing/Building-Modern-SaaS-Applications-with-C-and-.NET/tree/main/Chapter-7)找到。
- en: Introduction to the tech stack
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术栈介绍
- en: There are many options available to build a frontend for a SaaS application.
    Angular and React are popular JavaScript-based frameworks that are commonly used
    and are as good a choice as any to build a frontend for a SaaS application. However,
    as this is a .NET-focused book, we will stick to .NET technology and use Blazor.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 构建SaaS应用程序的前端有许多可用的选项。Angular和React是流行的基于JavaScript的框架，它们被广泛使用，并且是构建SaaS应用程序前端的良好选择。然而，鉴于这是一本以.NET为重点的书籍，我们将坚持使用.NET技术并使用Blazor。
- en: Blazor is a modern web application framework developed by Microsoft that allows
    developers to build client-side web applications, using C# and .NET instead of
    JavaScript. Blazor was first introduced as an experimental project in 2018 and
    was later released as part of .NET Core 3.0 in 2019\. The main goal of Blazor
    is to enable developers to write full-stack web applications entirely in C# and
    .NET, providing a more familiar and productive development experience.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor是由微软开发的一个现代Web应用程序框架，它允许开发者使用C#和.NET而不是JavaScript来构建客户端Web应用程序。Blazor最初于2018年作为一个实验性项目推出，后来在2019年作为.NET
    Core 3.0的一部分发布。Blazor的主要目标是使开发者能够完全使用C#和.NET编写全栈Web应用程序，从而提供一个更加熟悉和高效的开发体验。
- en: Blazor is designed to solve the problem of developing and maintaining complex,
    data-driven web applications that require a lot of client-side interactivity,
    such as a SaaS application. With Blazor, developers can write code that runs in
    a browser using WebAssembly, enabling them to create rich and interactive user
    interfaces without relying on JavaScript. Blazor also provides a wide range of
    built-in features and tools, such as routing, data binding, and form validation,
    which can help developers to build complex web applications more quickly and easily.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor 设计用于解决开发和管理复杂、数据驱动的 Web 应用程序的问题，这些应用程序需要大量的客户端交互性，例如 SaaS 应用程序。使用 Blazor，开发者可以编写在浏览器中运行的代码，使用
    WebAssembly，使他们能够创建丰富的交互式用户界面，而无需依赖 JavaScript。Blazor 还提供了一系列内置的功能和工具，如路由、数据绑定和表单验证，这些可以帮助开发者更快、更轻松地构建复杂的
    Web 应用程序。
- en: Blazor has become popular in recent years due to its ease of use, flexibility,
    and productivity. By allowing developers to use C# and .NET on the client side,
    Blazor provides a more consistent and familiar development experience, reducing
    the learning curve and enabling developers to be more productive. Additionally,
    Blazor’s tight integration with .NET provides a seamless development experience,
    with built-in debugging, testing, and deployment tools.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 由于其易用性、灵活性和生产力，Blazor 近年来变得流行。通过允许开发者在使用客户端时使用 C# 和 .NET，Blazor 提供了一种更一致、更熟悉的开发体验，降低了学习曲线，并使开发者能够更加高效。此外，Blazor
    与 .NET 的紧密集成提供了一个无缝的开发体验，包括内置的调试、测试和部署工具。
- en: Blazor is particularly suitable to build SaaS applications because it provides
    a scalable and reliable development platform that can handle a large number of
    users and data. Blazor’s ability to interface with .NET web API backends makes
    it a powerful tool to create a complete end-to-end solution, with a robust backend
    and a responsive frontend. Additionally, Blazor’s built-in features and tools
    to handle user input, data validation, and security make it an ideal choice to
    build complex and secure SaaS applications.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor 特别适合构建 SaaS 应用程序，因为它提供了一个可扩展且可靠的开发平台，能够处理大量用户和数据。Blazor 与 .NET 网络API后端的接口能力使其成为创建完整端到端解决方案的强大工具，具有强大的后端和响应式的前端。此外，Blazor
    内置的用于处理用户输入、数据验证和安全的特性和工具使其成为构建复杂和安全 SaaS 应用程序的理想选择。
- en: What is WebAssembly?
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是 WebAssembly？
- en: WebAssembly is a low-level binary format that enables the execution of code
    in a web browser. It is a portable, stack-based virtual machine that runs alongside
    JavaScript and provides a faster and more efficient way to execute code in the
    browser. WebAssembly is designed to work in conjunction with HTML, CSS, and JavaScript,
    allowing developers to write web applications using a variety of programming languages,
    including C, C++, Rust, and AssemblyScript.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: WebAssembly 是一种低级二进制格式，它使得代码能够在网页浏览器中执行。它是一个可移植的、基于栈的虚拟机，与 JavaScript 并行运行，为在浏览器中执行代码提供了一种更快、更高效的方式。WebAssembly
    设计用于与 HTML、CSS 和 JavaScript 协同工作，允许开发者使用包括 C、C++、Rust 和 AssemblyScript 在内的多种编程语言编写
    Web 应用程序。
- en: WebAssembly is different from JavaScript in that it is a compiled language,
    whereas JavaScript is an interpreted language. This means that code written in
    WebAssembly can be precompiled, making it faster to load and execute in the browser.
    Additionally, WebAssembly provides a more secure and sandboxed execution environment,
    which can help prevent security vulnerabilities and improve the reliability of
    web applications.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: WebAssembly 与 JavaScript 不同，因为它是一种编译型语言，而 JavaScript 是一种解释型语言。这意味着在 WebAssembly
    中编写的代码可以预先编译，使其在浏览器中加载和执行更快。此外，WebAssembly 提供了一个更安全、更沙箱化的执行环境，这有助于防止安全漏洞并提高 Web
    应用程序的可靠性。
- en: WebAssembly is becoming increasingly popular as a way to build web applications,
    especially for performance-intensive tasks such as gaming, image and video processing,
    and scientific simulations. With the increasing popularity of tools and frameworks
    such as Blazor, WebAssembly is also used more frequently in the context of building
    client-side web applications using languages other than JavaScript. Overall, WebAssembly
    is an exciting and powerful technology that changes the way we think about building
    web applications and enables a new era of innovation on the web.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: WebAssembly作为构建Web应用程序的方式越来越受欢迎，尤其是在游戏、图像和视频处理以及科学模拟等性能密集型任务中。随着Blazor等工具和框架的日益流行，WebAssembly在构建使用JavaScript以外的语言编写的客户端Web应用程序的背景下也被更频繁地使用。总的来说，WebAssembly是一项令人兴奋且强大的技术，它改变了我们构建Web应用程序的方式，并使Web上的创新进入了一个新的时代。
- en: The development environment
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发环境
- en: So far, we have done all of our work in Visual Studio Code. We have added extensions
    that allow us to manipulate .NET projects, host and interact with databases, and
    also execute tests on an API.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们所有的工 作都是在Visual Studio Code中完成的。我们添加了扩展，使我们能够操作.NET项目、托管和交互数据库，以及执行API上的测试。
- en: I selected Visual Studio Code for the examples in this book because it is free,
    cross-platform, and allows us to do all sorts of things without requiring lots
    of tools to be installed. Furthermore, I have used dev containers to try to ensure
    that everything will “just work,” regardless of what computer you are running
    on.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择Visual Studio Code作为本书的示例，因为它免费、跨平台，并且允许我们做各种事情，而无需安装大量工具。此外，我使用了dev容器来尝试确保无论你在什么电脑上运行，一切都将“正常工作”。
- en: I think this is really cool and also very practical when putting together a
    demo app in a book. I will continue this philosophy for this chapter on building
    a UI, but I need to acknowledge at this point that the development environment
    in the “main” Visual Studio application is superior to Blazor. I hope this will
    change in the near future and that this chapter will stand the test of time.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为这真的很酷，而且在将演示应用程序组合到书中时也非常实用。我将继续在这一章中构建UI时采用这种理念，但在此处需要承认的是，“主要”的Visual Studio应用程序的开发环境优于Blazor。我希望这将在不久的将来改变，并且这一章能够经受住时间的考验。
- en: For the purposes of the simple example that I present here, Visual Studio Code
    is fine. If you are building a more complex real-world project, then you may want
    to invest in Visual Studio.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我这里提供的简单示例，Visual Studio Code是足够的。如果你正在构建一个更复杂的现实世界项目，那么你可能需要投资Visual Studio。
- en: UX considerations – knowing your customer
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UX考虑因素——了解你的客户
- en: '**User experience** (**UX**) is of paramount importance in modern application
    development. How a user interacts with your SaaS application is crucial, as poor
    UX can result in user frustration and abandonment. Therefore, considering the
    user’s experience should be the most important part of the process when designing
    a UI.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**用户体验**（**UX**）在现代应用程序开发中至关重要。用户如何与你的SaaS应用程序互动至关重要，因为糟糕的UX可能导致用户感到沮丧和放弃。因此，在设计UI时，考虑用户体验应该是过程中的最重要部分。'
- en: At its core, UX is the practice of designing digital products, services, and
    systems that are useful, usable, and enjoyable for the people who use them. In
    today’s digital age, where people interact with technology on a daily basis, UX
    has become increasingly important to create successful products and services.
    Good UX can enhance a user’s satisfaction, engagement, and loyalty, while bad
    UX can result in frustration, confusion, and abandonment. UX design involves understanding
    user needs, goals, and behaviors, and using that knowledge to inform the design
    of UIs and interactions. It encompasses a range of disciplines, including visual
    design, interaction design, information architecture, and user research, among
    others. As digital products and services continue to play an increasingly important
    role in our daily lives, UX will continue to be a critical factor in their success.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: UX的核心是设计对用户来说有用、易用且令人愉悦的数字产品、服务和系统。在当今这个人们每天都要与技术互动的数字时代，UX在创造成功的产品和服务方面变得越来越重要。良好的UX可以提升用户的满意度、参与度和忠诚度，而糟糕的UX则可能导致用户感到沮丧、困惑和放弃。UX设计涉及理解用户的需求、目标和行为，并利用这些知识来指导UI设计和交互。它包括视觉设计、交互设计、信息架构和用户研究等多个学科。随着数字产品和服务的日益重要，UX将继续成为其成功的关键因素。
- en: UX is important, but it is also a complex and multifaceted field that can be
    challenging to master. While there are some scientific methods and principles
    that can be applied to UX design, such as user research, usability testing, and
    data analysis, the process of creating a great UX often involves a significant
    amount of artistry and creativity. Unlike some other fields, there are no absolute
    right or wrong answers in UX design, and what works for one user or product may
    not work for another. UX designers must balance a wide range of considerations,
    including user needs, business goals, technical constraints, and visual aesthetics,
    among others. This requires a combination of analytical skills, design skills,
    and intuition to create a UX that is both effective and aesthetically pleasing.
    In short, while there are scientific methods and principles that can help guide
    UX design, there is still a significant amount of artistry involved in creating
    great UXs.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 用户体验很重要，但它也是一个复杂且多面的领域，可能难以掌握。虽然有一些科学方法和原则可以应用于用户体验设计，例如用户研究、可用性测试和数据分析，但创建出色的用户体验的过程通常需要大量的艺术性和创造性。与一些其他领域不同，用户体验设计中没有绝对的对或错，对某个用户或产品有效的方法可能对另一个用户或产品无效。用户体验设计师必须平衡广泛的考虑因素，包括用户需求、业务目标、技术限制和视觉美学等。这需要结合分析技能、设计技能和直觉来创建既有效又美观的用户体验。简而言之，虽然有一些科学方法和原则可以帮助指导用户体验设计，但在创建出色的用户体验中仍然涉及大量的艺术性。
- en: In the context of SaaS applications, UX is even more important than it is in
    other types of software. SaaS applications are typically subscription-based, meaning
    that users pay for access to the software on an ongoing basis. This means that
    they have the option to switch to a competitor at any time if they are not satisfied
    with the service they are receiving. In other words, SaaS companies are in a constant
    battle to retain their users, and poor UX can be the deciding factor in whether
    a user stays or goes. Additionally, SaaS applications are often complex and feature-rich,
    with a wide range of options and settings. This can make the UX even more challenging
    to design, as users need to be able to find what they are looking for quickly
    and easily. As a result, designing a great UX is crucial to the success of a SaaS
    application, as it can help to increase user satisfaction, reduce churn, and ultimately
    drive the success of the business.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在SaaS应用的背景下，用户体验（UX）甚至比其他类型的软件更重要。SaaS应用通常是基于订阅的，这意味着用户需要持续支付以获取软件的访问权限。这意味着如果他们对所获得的服务不满意，他们可以随时切换到竞争对手。换句话说，SaaS公司始终在与用户保持关系上处于一场持续的战斗中，而糟糕的用户体验可能是用户留下或离开的决定性因素。此外，SaaS应用通常复杂且功能丰富，具有广泛的选择和设置。这可能会使得用户体验设计变得更加具有挑战性，因为用户需要能够快速且轻松地找到他们需要的东西。因此，设计出色的用户体验对于SaaS应用的成功至关重要，因为它可以帮助提高用户满意度，减少流失率，并最终推动业务的成功。
- en: In this section, I’ll give some general pointers that may be useful to consider
    when you build a SaaS application.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我将提供一些在构建SaaS应用时可能有用的通用指南。
- en: User personas
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户画像
- en: User personas are fictional characters that represent different types of users
    who may interact with an application. They are developed by gathering information
    about real users through surveys, interviews, and other forms of research. UX
    designers use this information to create a set of user personas that represent
    the different needs, behaviors, and motivations of their target users. User personas
    are important in the UX design process because they help to create a clear understanding
    of the people who will be using the application. By understanding the characteristics
    of the different personas, designers can make informed decisions about how to
    structure the UI, what features to include, and how to prioritize different aspects
    of the UX. For example, if the target audience includes some individuals who are
    tech-savvy individuals and some less technically proficient, the designer may
    need to create a UI that is both intuitive and easy to navigate. By creating user
    personas, UX designers can ensure that the design of the application is centered
    around the needs and expectations of its users, which can ultimately lead to a
    better UX and greater user satisfaction.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 用户画像是一系列虚构的角色，代表可能与应用程序互动的不同类型的用户。它们通过调查、访谈和其他研究形式收集关于真实用户的信息来开发。用户体验设计师使用这些信息创建一组代表目标用户不同需求、行为和动机的用户画像。用户画像在用户体验设计过程中非常重要，因为它们有助于对将使用应用程序的人有一个清晰的理解。通过了解不同角色的特征，设计师可以做出明智的决定，关于如何构建用户界面，包含哪些功能，以及如何优先考虑用户体验的不同方面。例如，如果目标受众包括一些技术熟练的个人和一些技术不太熟练的个人，设计师可能需要创建一个既直观又易于导航的用户界面。通过创建用户画像，用户体验设计师可以确保应用程序的设计围绕用户的需要和期望，这最终可能导致更好的用户体验和更高的用户满意度。
- en: 'Here is an example of a possible fictional tech-savvy user called “Sara”:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个可能的虚构技术熟练用户“萨拉”的例子：
- en: '*Sara is a tech-savvy user who uses multiple devices and is comfortable with
    technology. She has a good understanding of technology trends and new applications
    and enjoys exploring new features and settings in an application. Sara prefers
    to use the latest technology and applications and may be interested in using keyboard
    shortcuts and other power-user features in an application. She is comfortable
    with troubleshooting issues and finding solutions independently, and may have
    a lower tolerance for slow load times or other technical issues. If an application
    does not meet her expectations, she may be more likely to abandon it. Overall,
    Sara is a user who is comfortable with technology and has high expectations for
    the applications she uses, and the design of the application should reflect her
    needs* *and expectations.*'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '*萨拉是一个技术熟练的用户，使用多个设备，并且对技术感到舒适。她对技术趋势和新应用有很好的理解，并喜欢探索应用程序中的新功能和设置。萨拉更喜欢使用最新的技术和应用，可能对在应用程序中使用快捷键和其他高级用户功能感兴趣。她能够舒适地处理问题并独立寻找解决方案，可能对加载时间慢或其他技术问题有较低的容忍度。如果一个应用程序不符合她的期望，她可能会更倾向于放弃它。总的来说，萨拉是一个对技术感到舒适并且对她使用的应用程序有高期望的用户，应用程序的设计应该反映她的需求和期望*
    *。*'
- en: Creating an avatar for a user persona is useful for designers and developers
    because it helps to create empathy and a better understanding of the user’s needs,
    goals, and behaviors. We have created the following avatar for Sara!
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为用户画像创建一个头像对设计师和开发者来说很有用，因为它有助于产生同理心，并更好地理解用户的需求、目标和行为。我们为萨拉创建以下头像！
- en: '![Figure 7.1 – An avatar for Sara](img/B19343_07_1.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图7.1 – 萨拉的头像](img/B19343_07_1.jpg)'
- en: Figure 7.1 – An avatar for Sara
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.1 – 萨拉的头像
- en: User journey mapping
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户旅程映射
- en: User journey mapping is a visual representation of the steps a user takes to
    complete a task within an application, from the initial point of contact through
    to the completion of the task. User journey mapping is important because it helps
    to identify pain points and areas of frustration in the UX, as well as opportunities
    for improvement. By mapping the user journey, designers can get a clear picture
    of how users interact with the application and where they may encounter issues.
    This information can then be used to refine the design and make the UX more streamlined
    and intuitive. User journey mapping is related to user personas because it helps
    to create a more detailed understanding of how different personas interact with
    the application. By mapping the user journey for different personas, designers
    can identify how the UX differs between different types of users and make design
    decisions that are tailored to the needs of each persona. Ultimately, user journey
    mapping is a valuable tool to create a user-centered design that meets the needs
    of all users.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 用户旅程映射是用户在应用程序中完成任务所采取步骤的视觉表示，从初始接触点直至任务完成。用户旅程映射很重要，因为它有助于识别用户体验中的痛点、挫败感区域以及改进机会。通过绘制用户旅程，设计师可以清楚地了解用户如何与应用程序互动以及他们可能遇到的问题。然后，这些信息可以用来完善设计，使用户体验更加流畅和直观。用户旅程映射与用户画像相关，因为它有助于更详细地了解不同画像如何与应用程序互动。通过为不同画像绘制用户旅程，设计师可以确定不同类型用户之间的用户体验差异，并做出针对每个画像需求的设计决策。最终，用户旅程映射是创建以用户为中心的设计的有价值工具，以满足所有用户的需求。
- en: 'Here’s an example of a user journey for Sara, a tech-savvy user of the `GoodHabit`
    database:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是Sara，一个技术熟练的`GoodHabit`数据库用户的用户旅程示例：
- en: Sara navigates to the `GoodHabits` app and logs in.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Sara导航到`GoodHabits`应用程序并登录。
- en: The app displays a page with a list of Sara’s existing habits on the left side
    of the screen and an empty add/edit form on the right side of the screen.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序在屏幕左侧显示Sara现有习惯的列表，并在右侧显示一个空的添加/编辑表单。
- en: Sara clicks on the **Add New** button under the list of habits.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Sara点击习惯列表下的**添加新内容**按钮。
- en: The app populates the form with default values and changes the button text to
    **Save New**.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序使用默认值填充表单，并将按钮文本更改为**保存新内容**。
- en: Sara fills out the form and clicks on the **Save** **New** button.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Sara填写表格并点击**保存新内容**按钮。
- en: The app validates the form data and creates the new habit, associating it with
    Sara’s user account.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序验证表单数据，创建新习惯，并将其与Sara的用户账户关联。
- en: The app adds the new habit to the list on the left side of the screen, and the
    habit is automatically selected.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序将新习惯添加到屏幕左侧的列表中，并自动选中该习惯。
- en: The app updates the form on the right side of the screen with the new habit’s
    data and changes the button text to **Save Changes**.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序在屏幕右侧更新表格，显示新习惯的数据，并将按钮文本更改为**保存更改**。
- en: Sara can make further changes to the habit if desired, and then she clicks on
    the **Save** **Changes** button.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果需要，Sara可以对习惯进行进一步修改，然后点击**保存更改**按钮。
- en: The app validates the form data and updates the habit with the new data.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序验证表单数据，并使用新数据更新习惯。
- en: The app highlights the updated habit on the list on the left side of the screen
    to indicate that it has been modified.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序在屏幕左侧的列表中突出显示更新的习惯，以表明它已被修改。
- en: Sara verifies that the new habit has been added or updated successfully and
    is displayed correctly on the list.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Sara确认新习惯已成功添加或更新，并且正确显示在列表中。
- en: Writing out these user journeys can be very useful for the design team, and
    also for the dev team, to better understand how users will interact with a system.
    A good understanding of these interactions will result in a better experience
    for the users, which will generally lead to the SaaS app generating more revenue!
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 将这些用户旅程写出来对于设计团队和开发团队来说非常有用，可以帮助他们更好地理解用户将如何与系统互动。对这些互动的良好理解将使用户体验得到改善，这通常会导致SaaS应用程序产生更多收入！
- en: It should not be assumed that everyone who uses your SaaS app will have the
    same level of abilities, and it is also very important to consider accessibility.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 不应假设使用您的SaaS应用程序的每个人都具有相同的能力水平，并且考虑可访问性也非常重要。
- en: Accessibility
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可访问性
- en: Accessibility refers to the practice of designing digital products and content
    in a way that ensures that they are usable by people with disabilities. This includes
    people with visual, auditory, motor, and cognitive impairments, among others.
    Accessibility is important because it helps to ensure that all users, regardless
    of their abilities, can access and use digital products and content. This not
    only benefits individuals with disabilities but also has broader social and economic
    benefits, as it helps to create a more inclusive society.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 可访问性是指以确保残疾人士可以使用的方式设计和制作数字产品和内容。这包括视力、听力、肢体和认知障碍的人士，以及其他人士。可访问性很重要，因为它有助于确保所有用户，无论其能力如何，都能访问和使用数字产品和内容。这不仅有利于残疾人士，而且具有更广泛的社会和经济利益，因为它有助于创建一个更加包容的社会。
- en: 'Here are some tips and things to consider when designing for accessibility:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在为可访问性设计时，以下是一些提示和需要考虑的事项：
- en: Providing alternative text for images so that users with visual impairments
    can understand the content of an image
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为图像提供替代文本，以便视力障碍用户能够理解图像的内容
- en: Ensuring that the color contrast between text and the background is sufficient
    so that users with visual impairments can read the text easily
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保文本和背景之间的颜色对比度足够，以便视力障碍用户能够轻松阅读文本
- en: Providing closed captions or transcripts for videos and audio content so that
    users with auditory impairments can understand the content
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为视频和音频内容提供字幕或文本记录，以便听力障碍用户能够理解内容
- en: Using semantic HTML to ensure that assistive technologies can accurately parse
    and interpret the content of a web page
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用语义HTML以确保辅助技术可以准确解析和解释网页的内容
- en: Ensuring that an application is operable using keyboard-only navigation so that
    users with motor impairments can use an application easily
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保应用程序仅使用键盘导航即可操作，以便肢体障碍用户能够轻松使用应用程序
- en: Providing clear and concise instructions and feedback so that users with cognitive
    impairments can understand and use an application effectively
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供清晰简洁的说明和反馈，以便认知障碍用户能够有效理解和使用应用程序
- en: It may be helpful to create some user personas to represent users who will benefit
    from these accessibility considerations, building some user journeys specifically
    for them.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一些用户画像来代表将从这些可访问性考虑中受益的用户可能是有帮助的，为特定用户构建一些用户旅程。
- en: Designing for accessibility is an important consideration for any digital product
    or content, helping to create a more inclusive and accessible society.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为可访问性进行设计是任何数字产品或内容的重要考虑因素，有助于创建一个更加包容和可访问的社会。
- en: Visually appealing design
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视觉吸引力的设计
- en: While UX always blends art and science to some extent, creating a visually appealing
    design leans much more on artistic creativity. It is easy to overlook this when
    building an application and focus on the more technical aspects. However, having
    a visually appealing design is an important aspect of UX and can have a significant
    impact on how users perceive and interact with digital products and content. A
    well-designed UI can make it easier for users to understand and navigate an application,
    and it can create a sense of trust and credibility that is important to build
    a strong brand. A visually appealing design should be aesthetically pleasing and
    engaging, while also being functional and usable. This means using a consistent
    color scheme, typography, and layout that is easy on the eyes and provides a clear
    visual hierarchy. It also means using appropriate imagery and graphics that enhance
    content and support the overall UX. Ultimately, a visually appealing design should
    be intuitive, easy to use, and engaging, helping to create a positive UX for all
    users.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然用户体验（UX）总是在某种程度上融合了艺术和科学，但创建视觉吸引力的设计更多地依赖于艺术创造力。在构建应用程序时，很容易忽视这一点，而专注于更技术性的方面。然而，具有视觉吸引力的设计是用户体验的重要方面，并且可以对用户如何看待和交互数字产品产生影响。一个精心设计的用户界面可以使用户更容易理解和导航应用程序，并创造一种对建立强大品牌至关重要的信任感和信誉感。视觉吸引力的设计应该是美观的、引人入胜的，同时也要实用和易用。这意味着使用一致的颜色方案、字体和布局，这些对眼睛友好，并提供清晰的视觉层次。这也意味着使用适当的图像和图形来增强内容并支持整体用户体验。最终，视觉吸引力的设计应该是直观的、易于使用的、引人入胜的，有助于为所有用户创造积极的用户体验。
- en: Navigation and information architecture
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导航和信息架构
- en: UX design should strive to make the navigation of an application simple and
    intuitive for users. This means designing a clear and consistent menu structure,
    as well as providing helpful labels and descriptions for each menu item. The navigation
    should be easily accessible from any page within the application and enable users
    to quickly and easily move between different areas of it.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 用户体验设计应努力使应用程序的导航对用户简单直观。这意味着设计清晰一致的下拉菜单结构，并为每个菜单项提供有用的标签和描述。导航应从应用程序中的任何页面都容易访问，并使用户能够快速轻松地在应用程序的不同区域之间移动。
- en: In a SaaS app, users often try to accomplish a specific task or goal, and they
    need to be able to easily find the content and features they need to accomplish
    that task. Effective navigation can help users quickly and easily move between
    different areas of an app, without getting lost or confused.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在SaaS应用程序中，用户通常试图完成特定的任务或目标，他们需要能够轻松地找到完成任务所需的内容和功能。有效的导航可以帮助用户快速轻松地在应用程序的不同区域之间移动，而不会迷路或困惑。
- en: Information architecture is the process of organizing and structuring the content
    within an application in a logical and meaningful way. It involves grouping related
    content together, creating hierarchies of information, and establishing clear
    relationships between different pieces of content. A well-designed information
    architecture can make it easier for users to find the information they need, and
    it can also help to provide context and meaning for the content within the application.
    When designing the information architecture, it is important to consider the needs
    and goals of the users, as well as the content that is being presented, in order
    to create a structure that is clear, intuitive, and effective.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 信息架构是将应用程序内的内容以逻辑和有意义的方式组织和结构化的过程。它包括将相关内容分组在一起，创建信息层次结构，并建立不同内容之间的清晰关系。一个设计良好的信息架构可以更容易地帮助用户找到所需的信息，并且还可以为应用程序内的内容提供上下文和意义。在设计信息架构时，重要的是要考虑用户的需要和目标，以及正在呈现的内容，以便创建一个清晰、直观和有效的结构。
- en: Information architecture is important for a SaaS app because it can help to
    ensure that the content within the app is organized in a way that is intuitive
    and meaningful for users. This can help users to better understand and engage
    with the content, and it can also make it easier for them to find the information
    they need. By designing a clear and effective information architecture, SaaS app
    designers can create an experience that is both functional and enjoyable for users,
    helping to build brand loyalty and customer satisfaction.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 信息架构对于SaaS应用程序非常重要，因为它可以帮助确保应用程序内的内容以直观和有意义的方式组织。这可以帮助用户更好地理解和参与内容，同时也可以使他们更容易找到所需的信息。通过设计清晰有效的信息架构，SaaS应用程序设计师可以创建一个既实用又愉悦的用户体验，有助于建立品牌忠诚度和客户满意度。
- en: Responsive design
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 响应式设计
- en: Responsive design is a design approach that aims to create digital products
    that adapt and respond to different screen sizes and device types. This has become
    increasingly popular as more and more users access websites and applications on
    a wide variety of devices, including desktops, laptops, tablets, and smartphones.
    With responsive design, the layout, content, and functionality of a website or
    application are optimized for each device type, allowing users to have a consistent
    and seamless experience, regardless of the device they use.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式设计是一种旨在创建能够适应和响应不同屏幕尺寸和设备类型的数字产品的设计方法。随着越来越多的用户在包括台式机、笔记本电脑、平板电脑和智能手机在内的各种设备上访问网站和应用，这种方法变得越来越流行。响应式设计使得网站或应用程序的布局、内容和功能针对每种设备类型进行了优化，使用户无论使用哪种设备都能获得一致无缝的体验。
- en: To achieve responsive design, UX designers typically use a combination of flexible
    layouts, fluid images, and media queries, which allow the design to adapt to different
    screen sizes and resolutions. This means that elements of the design, such as
    the navigation, content, and images, will adjust and reposition themselves based
    on the size of the screen, in order to provide the best UX possible.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现响应式设计，用户体验设计师通常使用灵活布局、流动图像和媒体查询的组合，这使得设计能够适应不同的屏幕尺寸和分辨率。这意味着设计的元素，如导航、内容和图像，将根据屏幕大小进行调整和重新定位，以提供最佳的UX体验。
- en: Responsive design helps to create a positive UX, as it ensures that users can
    access and use digital products on any device, at any time. With more and more
    users accessing the web and applications on mobile devices, responsive design
    has become a key consideration for UX designers and is essential to create a successful
    and accessible digital product.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式设计有助于创建积极的用户体验，因为它确保用户可以在任何设备、任何时间访问和使用数字产品。随着越来越多的用户在移动设备上访问网页和应用，响应式设计已成为用户体验设计师的关键考虑因素，对于创建成功且易于访问的数字产品至关重要。
- en: When considering a SaaS application, this becomes even more important, as customers
    of the application will often require that they can access the app at any time,
    and on any device.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 当考虑SaaS应用程序时，这一点变得更加重要，因为应用程序的客户通常需要能够在任何时间、任何设备上访问应用程序。
- en: Feedback and user testing
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 反馈和用户测试
- en: Feedback and user testing are essential to create a successful UX, as they allow
    designers to gather insights and information from real users about the usability,
    functionality, and effectiveness of their designs. This feedback can be used to
    identify areas of the design that work well, as well as areas that need improvement,
    helping designers to refine and optimize the UX.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 反馈和用户测试对于创建成功的用户体验至关重要，因为它们允许设计师从真实用户那里收集关于其设计的可用性、功能和有效性的见解和信息。这些反馈可用于识别设计中的有效区域以及需要改进的区域，帮助设计师完善和优化用户体验。
- en: To collect feedback and user testing data, UX designers use a variety of techniques,
    including surveys, interviews, usability testing, and user analytics. Surveys
    and interviews can help designers to collect qualitative feedback about the UX,
    including likes, dislikes, and pain points. Usability testing, on the other hand,
    involves observing users as they interact with the design, providing valuable
    insights into how users use an application, as well as areas of the design that
    may be causing confusion or frustration. User analytics can also be used to gather
    data about user behavior, such as how often users access certain features, or
    where they drop off in the user journey.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 为了收集反馈和用户测试数据，用户体验设计师使用各种技术，包括调查、访谈、可用性测试和用户分析。调查和访谈可以帮助设计师收集关于用户体验的定性反馈，包括喜好、不喜欢和痛点。另一方面，可用性测试涉及观察用户如何与设计互动，提供了关于用户如何使用应用程序以及可能导致困惑或挫败感的可能设计区域的宝贵见解。用户分析也可以用来收集关于用户行为的数据，例如用户多久访问一次某些功能，或者他们在用户旅程中的哪个环节放弃。
- en: Once feedback and user testing data have been collected, designers can use them
    to inform and guide their design decisions, making changes and optimizations based
    on the insights gathered from real users. By incorporating feedback and user testing
    into the design process, UX designers can create a more user-centric and effective
    UX, leading to higher engagement, satisfaction, and customer loyalty.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦收集到反馈和用户测试数据，设计师可以使用它们来指导他们的设计决策，根据从真实用户那里收集到的见解进行更改和优化。通过将反馈和用户测试纳入设计过程，用户体验设计师可以创建更以用户为中心且有效的用户体验，从而提高参与度、满意度和客户忠诚度。
- en: Building a simple UI
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建简单的用户界面
- en: You may recall that way back in [*Chapter 2*](B19343_02.xhtml#_idTextAnchor056),
    we created a Blazor application. We will now start to build this out.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还记得，在[*第二章*](B19343_02.xhtml#_idTextAnchor056)中，我们创建了一个Blazor应用程序。现在，我们将开始构建这个应用程序。
- en: Earlier in this chapter, we imagined a user persona called Sara, and we described
    a user journey where Sara adds a new good habit to her database. In this section,
    we will build out that user journey!
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的早期，我们想象了一个名为Sara的用户角色，并描述了Sara向她的数据库添加新习惯的用户旅程。在本节中，我们将构建这个用户旅程！
- en: Planning the UI
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 规划用户界面
- en: Building a good UI is a complex process that involves careful planning and thoughtful
    execution. Before starting to create the UI, it’s essential to take the time to
    plan out the layout, design, and functionality of an application. This planning
    should encompass everything, from the UX to user interviews, wireframing, and
    prototyping.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 构建良好的用户界面是一个复杂的过程，涉及周密的规划和深思熟虑的执行。在开始创建用户界面之前，花时间规划应用程序的布局、设计和功能至关重要。这项规划应涵盖从用户体验到用户访谈、线框图和原型设计的一切。
- en: The first step in planning a UI is to define the user personas and UX. Understanding
    a user’s needs and the goals of an application is essential to create an interface
    that is both usable and engaging. One way to accomplish this is by conducting
    user interviews, which can help to identify pain points and opportunities for
    improvement. This feedback can then be used to shape the design and functionality
    of the UI.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 规划 UI 的第一步是定义用户角色和用户体验。理解用户的需求和应用程序的目标对于创建既可用又吸引人的界面至关重要。实现这一目标的一种方法是通过进行用户访谈，这有助于识别痛点并找到改进的机会。然后，可以将这些反馈用于塑造
    UI 的设计和功能。
- en: Once the user personas and UX are defined, it’s time to start thinking about
    the layout of the UI. Wireframing and prototyping are useful techniques to visualize
    the layout and design of the interface. These techniques allow designers to experiment
    with different ideas and make sure the application is intuitive and easy to navigate.
    Wireframes are basic sketches of the interface that help to establish the overall
    layout, while prototypes are interactive mock-ups that allow users to interact
    with the UI and give feedback.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦定义了用户角色和用户体验，就到了开始考虑 UI 布局的时候了。线框图和原型设计是可视化界面布局和设计的有用技术。这些技术允许设计师尝试不同的想法，并确保应用程序直观且易于导航。线框图是界面的基本草图，有助于建立整体布局，而原型是交互式模拟，允许用户与
    UI 交互并提供反馈。
- en: In addition to wireframing and prototyping, it’s important to consider the technical
    aspects of the application. This includes choosing the right technology stack,
    such as the appropriate framework and tools. For instance, Blazor is a popular
    framework to create UIs using C# and .NET, and it is an excellent choice to build
    a SaaS application.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 除了线框图和原型设计，考虑应用程序的技术方面也很重要。这包括选择合适的技术栈，例如适当的框架和工具。例如，Blazor 是一个流行的框架，用于使用 C#
    和 .NET 创建 UI，并且是构建 SaaS 应用程序的一个优秀选择。
- en: Overall, planning the UI is a crucial step in creating a simple yet effective
    interface for a SaaS application. It involves considering the UX, conducting user
    interviews, wireframing and prototyping, and choosing the appropriate technology
    stack. With careful planning, it’s possible to create a UI that is both functional
    and aesthetically pleasing, which will ultimately help to improve user engagement
    and satisfaction.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，规划 UI 是创建简单而有效的 SaaS 应用程序界面的关键步骤。它涉及考虑用户体验、进行用户访谈、线框图和原型设计，以及选择合适的技术栈。经过仔细规划，可以创建一个既功能性强又美观的
    UI，这最终有助于提高用户参与度和满意度。
- en: So that we can make progress, let’s assume that I have done all of the preceding
    and decided that the following represents the ideal UI for the Good Habits SaaS
    application.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 为了我们能够取得进展，让我们假设我已经完成了所有前面的工作，并决定以下内容代表 Good Habits SaaS 应用程序的理想 UI。
- en: "![Figure 7.2 – A mock\uFEFF-up \uFEFFof the Good Habits app](img/B19343_07_2.jpg)"
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.2 – Good Habits 应用程序的模拟图](img/B19343_07_2.jpg)'
- en: Figure 7.2 – A mock-up of the Good Habits app
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.2 – Good Habits 应用程序的模拟图
- en: The preceding screenshot represents a very basic UI that allows a user to see
    a list of their habits, add a new one, and edit or delete existing habits. This
    is basically just a simple **Create, Read, Update, Delete** (**CRUD**) implementation
    that would probably make a UX designer cry, but it will suffice for this demo!
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 上述截图代表一个非常基本的 UI，允许用户查看他们的习惯列表，添加新的习惯，以及编辑或删除现有习惯。这基本上只是一个简单的 **创建、读取、更新、删除**（**CRUD**）实现，可能会让用户体验设计师感到沮丧，但这对这个演示来说已经足够了！
- en: Configuring the environment
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置环境
- en: 'As we will stick to Visual Studio Code to build the UI, we will add some extensions
    to make our lives a bit easier. As always, we’ll do this by modifying `devcontainer.json`
    and add to the extensions array. Add the following extensions:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将坚持使用 Visual Studio Code 来构建 UI，我们将添加一些扩展来使我们的工作更加轻松。一如既往，我们将通过修改 `devcontainer.json`
    并添加到扩展数组中来实现这一点。添加以下扩展：
- en: '[PRE0]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: These extensions will make our lives much easier as we build out this UI!
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这些扩展将使我们在构建这个 UI 时的工作变得更加轻松！
- en: You will need to exit and re-enter the dev container environment so that the
    changes can be applied.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要退出并重新进入开发容器环境，以便应用更改。
- en: Writing a ticket
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写工单
- en: In software development, a “ticket” is a term used to describe a unit of work
    that needs to be done on a project. Tickets are usually created to track bugs,
    feature requests, and any other tasks that need to be completed by the development
    team. They provide a way for project managers and developers to keep track of
    what needs to be done, who is responsible for completing a task, and the status
    of the work. Tickets can be as simple as a bug report or feature request, or they
    can be very detailed and include requirements, designs, and other documentation.
    The use of tickets helps to keep the development process organized and efficient,
    ensuring that everyone on a team is working toward the same goals.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件开发中，“工单”是一个术语，用来描述项目上需要完成的工作单元。工单通常被创建来跟踪错误、功能请求以及开发团队需要完成的任何其他任务。它们为项目经理和开发者提供了一种跟踪需要做什么、谁负责完成一项任务以及工作状态的方法。工单可以是简单的错误报告或功能请求，也可以非常详细，包括需求、设计和其他文档。使用工单有助于保持开发过程的有序和高效，确保团队中的每个人都朝着相同的目标努力。
- en: Gherkin is a language that is often used to write specifications for software
    development projects, and it can be used when creating tickets. It is designed
    to be easy to understand by both technical and non-technical stakeholders, and
    it helps to ensure that everyone is on the same page when it comes to what needs
    to be done. Gherkin specifications are written in a specific format that is easy
    to read and understand, and they can be used to create automated tests that ensure
    that the software meets the requirements that have been specified. By using Gherkin
    to write tickets, developers can ensure that the work they do is directly tied
    to the needs of a project and that everyone on a team understands what needs to
    be done and why. This can help to reduce confusion and misunderstandings, leading
    to a more efficient and effective development process.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Gherkin 是一种常用于编写软件开发项目规格说明的语言，它也可以在创建工单时使用。它旨在让技术和非技术利益相关者都易于理解，并有助于确保在需要做什么方面，每个人都处于同一页面上。Gherkin
    规格说明采用了一种易于阅读和理解的特定格式，并且可以用来创建确保软件满足已指定要求的自动化测试。通过使用 Gherkin 编写工单，开发者可以确保他们所做的工作直接与项目的需求相关联，并且团队中的每个人都理解需要做什么以及为什么这么做。这有助于减少混淆和误解，从而提高开发过程的效率和效果。
- en: Gherkin is a plain-text, domain-specific language that is commonly used to assist
    in the writing of automated acceptance tests for software applications. It is
    designed to be human-readable and easy to understand by stakeholders, developers,
    and testers alike. Gherkin provides a simple syntax to define the behavior of
    an application in a structured and organized way, using a set of keywords and
    phrases.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Gherkin 是一种纯文本、领域特定的语言，通常用于协助编写软件应用的自动化验收测试。它旨在让利益相关者、开发者和测试人员都能易于阅读和理解。Gherkin
    提供了一种简单的语法，以结构化和组织的方式定义应用程序的行为，使用一组关键词和短语。
- en: One of the key benefits of using Gherkin to write UI tickets is that it helps
    to ensure clarity and consistency across the development team. By using a standardized
    format to describe the desired behavior of a UI, everyone involved in the development
    process can understand what is expected and how to implement it. Gherkin also
    provides a common language that can be used to communicate between team members
    with different backgrounds and expertise.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Gherkin 编写 UI 工单的一个关键好处是，它有助于确保开发团队之间的清晰性和一致性。通过使用标准化的格式来描述所需的 UI 行为，参与开发过程的所有人都可以理解期望的内容以及如何实现它。Gherkin
    还提供了一种通用语言，可以用于不同背景和专长的团队成员之间的沟通。
- en: Another advantage of using Gherkin for UI tickets is that it promotes a user-centric
    approach to software development. By focusing on the desired user behavior and
    experience, Gherkin encourages developers to build applications that are intuitive,
    easy to use, and meet the needs of the end user. This approach can lead to more
    effective testing and a better overall UX.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Gherkin 为 UI 工单带来的另一个优点是，它促进了以用户为中心的软件开发方法。通过关注期望的用户行为和体验，Gherkin 鼓励开发者构建直观、易于使用且满足最终用户需求的软件。这种方法可以导致更有效的测试和更好的整体用户体验。
- en: Gherkin is a powerful tool to write UI tickets that can help to promote clarity,
    consistency, and user-centered design in software development. By providing a
    common language and structured format to describe behavior, Gherkin can help to
    ensure that everyone involved in the development process understands what is expected
    and how to achieve it. Additionally, by enabling automated testing, Gherkin can
    help to catch issues early and ensure a high-quality end product.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Gherkin 是一个强大的工具，可以用来编写 UI 票据，有助于在软件开发中促进清晰性、一致性和以用户为中心的设计。通过提供一种共同的语言和结构化的格式来描述行为，Gherkin
    可以帮助确保所有参与开发过程的人都能理解预期的内容和如何实现它。此外，通过启用自动化测试，Gherkin 可以帮助早期发现问题并确保最终产品的质量。
- en: 'Here is an example of a ticket that could be used to describe the user journey
    that we defined for Sara previously. We will use this ticket to guide us in the
    development of the UI:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个可以用来描述我们之前为萨拉定义的用户旅程的票据示例。我们将使用这个票据来指导我们开发 UI：
- en: '[PRE1]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding ticket gives us a roadmap to follow to develop the UI. Coupled
    with the wireframe that we have created previously, it should be easy to build
    this simple UI!
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 上述票据为我们提供了开发 UI 的路线图。结合我们之前创建的线框图，构建这个简单的 UI 应该很容易！
- en: But before we get started building, let’s take a quick look at the technology
    that we will use!
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 但在我们开始构建之前，让我们快速了解一下我们将要使用的技术！
- en: What is Blazor?
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是 Blazor？
- en: Blazor is a modern web framework to build interactive web UIs using C# and .NET.
    It allows developers to write web applications using the same familiar language
    and tools that are used for desktop and mobile applications, as well as for RESTful
    APIs. Blazor supports two models to build web applications – Blazor WebAssembly
    and Blazor Server.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor 是一个使用 C# 和 .NET 构建交互式 Web UI 的现代 Web 框架。它允许开发者使用与桌面和移动应用程序以及 RESTful
    API 相同的熟悉语言和工具来编写 Web 应用程序。Blazor 支持两种构建 Web 应用程序的模式——Blazor WebAssembly 和 Blazor
    Server。
- en: Blazor WebAssembly is a client-side model that allows developers to build web
    applications entirely in C# and run them in any modern web browser, without the
    need for any server-side code. The application is loaded and executed directly
    in the browser, and any communication with the server is performed using standard
    web technologies such as HTTP and WebSockets – frequently using a WebAPI backend,
    which we used in previous chapters. Blazor WebAssembly applications can run both
    online and offline, making them suitable to build progressive web applications.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor WebAssembly 是一种客户端模型，允许开发者完全使用 C# 构建 Web 应用程序，并在任何现代 Web 浏览器中运行，无需任何服务器端代码。应用程序直接在浏览器中加载和执行，与服务器之间的任何通信都使用标准
    Web 技术，如 HTTP 和 WebSockets——通常使用我们在前几章中使用的 WebAPI 后端。Blazor WebAssembly 应用程序可以在线和离线运行，这使得它们适合构建渐进式
    Web 应用程序。
- en: Blazor Server is a server-side model that allows developers to build web applications,
    using a similar programming model to client-side Blazor but with the server running
    the application code and rendering the UI in the browser. In this model, the application
    code runs on the server, and the UI is streamed to the client as HTML and JavaScript.
    This allows Blazor Server applications to have the same rich interactive features
    as client-side applications but with a higher degree of control over the UX.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor Server 是一种服务器端模型，允许开发者使用与客户端 Blazor 相似的编程模型来构建 Web 应用程序，但服务器运行应用程序代码并在浏览器中渲染
    UI。在这个模型中，应用程序代码在服务器上运行，UI 以 HTML 和 JavaScript 的形式流式传输到客户端。这使得 Blazor Server 应用程序能够拥有与客户端应用程序相同的丰富交互功能，同时具有对用户体验的更高控制度。
- en: Both models of Blazor provide developers with a powerful and modern way to build
    web applications, with the choice between client-side and server-side, depending
    on the specific requirements of a project. Blazor’s use of C# and .NET makes it
    a compelling option for developers who are already familiar with these technologies,
    and the ability to share code between the web and other types of applications
    can lead to greater efficiency and productivity. Additionally, Blazor’s support
    for Razor syntax and integration with Visual Studio and other development tools
    makes it a familiar and comfortable environment for developers to work in.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor 的两种模型都为开发者提供了构建 Web 应用程序强大且现代的方法，开发者可以根据项目的具体需求在客户端和服务器端之间进行选择。Blazor
    使用 C# 和 .NET，这使得它成为熟悉这些技术的开发者极具吸引力的选择，而能够在 Web 和其他类型的应用程序之间共享代码可以提高效率和生产力。此外，Blazor
    对 Razor 语法和与 Visual Studio 及其他开发工具的集成支持，使得开发者能够在熟悉且舒适的环境中工作。
- en: 'For this example, we will use Blazor WebAssembly (Wasm). This is a good choice
    when building a SaaS application with a RESTful API backend for a few reasons,
    some of which are stated here:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们将使用Blazor WebAssembly (Wasm)。当使用具有RESTful API后端的SaaS应用程序构建时，这是一个不错的选择，原因如下：
- en: Wasm runs entirely in the browser, which means that a user does not need to
    wait for server responses to load the application. This can result in faster load
    times, better UX, and reduced server load.
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Wasm完全在浏览器中运行，这意味着用户不需要等待服务器响应来加载应用程序。这可以导致加载时间更快，用户体验更好，并且减少服务器负载。
- en: Because the application runs entirely in the browser, it can be made available
    offline. This is particularly useful for users who are on the go and do not have
    access to reliable internet connections.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于应用程序完全在浏览器中运行，它可以离线使用。这对于那些在移动中且没有可靠互联网连接的用户特别有用。
- en: Wasm allows more efficient processing of complex computations and graphics-intensive
    applications, which is particularly relevant for SaaS applications that may require
    a lot of data processing or advanced graphics.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Wasm允许更有效地处理复杂计算和图形密集型应用程序，这对于可能需要大量数据处理或高级图形的SaaS应用程序尤其相关。
- en: By offloading more of the processing to the client side, a Wasm-based SaaS application
    can reduce the amount of data that needs to be sent back and forth between a server
    and a client. This can result in reduced bandwidth requirements, faster load times,
    and reduced server load.
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过将更多处理任务卸载到客户端，基于Wasm的SaaS应用程序可以减少服务器和客户端之间需要传输的数据量。这可能导致带宽需求减少，加载时间更快，并减少服务器负载。
- en: Wasm can provide better security for SaaS applications, as it runs in a sandboxed
    environment, which makes it more difficult for malicious actors to exploit vulnerabilities
    in the application.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Wasm可以为SaaS应用程序提供更好的安全性，因为它在沙盒环境中运行，这使得恶意行为者更难利用应用程序中的漏洞。
- en: Because Wasm is platform-agnostic, SaaS applications built using Wasm can be
    run on a variety of devices, including desktops, laptops, tablets, and smartphones.
    This can help to increase the reach of the application and make it more accessible
    to users.
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于Wasm是平台无关的，使用Wasm构建的SaaS应用程序可以在各种设备上运行，包括桌面、笔记本电脑、平板电脑和智能手机。这可以帮助增加应用程序的覆盖范围，并使其对用户更加易于访问。
- en: Setting up the Blazor project
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置Blazor项目
- en: 'We already set up a Blazor project in [*Chapter 2*](B19343_02.xhtml#_idTextAnchor056),
    but I’ll recap the steps here. Open a console and type in the following:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在[*第2章*](B19343_02.xhtml#_idTextAnchor056)中设置了一个Blazor项目，但我会在这里回顾一下步骤。打开控制台并输入以下内容：
- en: '[PRE2]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Great! You can now start the client by typing `dotnet run` into the console.
    You’ll see the following in the browser:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！您现在可以在控制台中输入`dotnet run`来启动客户端。您将在浏览器中看到以下内容：
- en: '![Figure 7.3 – The Hello, world! Blazor app](img/B19343_07_3.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图7.3 – “Hello, world!” Blazor应用程序](img/B19343_07_3.jpg)'
- en: Figure 7.3 – The Hello, world! Blazor app
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.3 – “Hello, world!” Blazor应用程序
- en: We’ll start with this template and make it look a bit more like the mock-up.
    Initially, we will use dummy data, but we will connect the frontend up to the
    API – by the end of this chapter, we will have a full stack SaaS application!
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从这个模板开始，并使其看起来更接近原型。最初，我们将使用虚拟数据，但我们将连接前端到API – 到本章结束时，我们将有一个完整的栈SaaS应用程序！
- en: Building the UI
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建用户界面
- en: 'First, there is a small amount of config required in `Program.cs` in the client
    application. Make the class look like the following:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在客户端应用程序的`Program.cs`中需要少量配置。使类看起来如下所示：
- en: '[PRE3]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note that the preceding base address connects to the API gateway that we configured
    in [*Chapter 6*](B19343_06.xhtml#_idTextAnchor140).
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，前面的基本地址连接到我们在[*第6章*](B19343_06.xhtml#_idTextAnchor140)中配置的API网关。
- en: With that small piece of config done, we can get started with the functionality
    by adding a new page that will display the information we built up in the database
    in the previous chapters. We will also modify the navigation menu to link to this
    new page, removing the sample pages.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成这个小配置后，我们可以通过添加一个新页面来开始功能，该页面将显示我们在前几章中构建的数据库中的信息。我们还将修改导航菜单，将其链接到这个新页面，并删除示例页面。
- en: 'In the `Pages` folder, you can delete the `Counter.razor` and `FetchData.razor`
    files and add a new file called `Habits.razor`. Your `Pages` folder should look
    like this:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Pages`文件夹中，您可以删除`Counter.razor`和`FetchData.razor`文件，并添加一个名为`Habits.razor`的新文件。您的`Pages`文件夹应如下所示：
- en: '![Figure 7.4 – The Pages folder](img/B19343_07_4.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![图7.4 – Pages文件夹](img/B19343_07_4.jpg)'
- en: Figure 7.4 – The Pages folder
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.4 – 页面文件夹
- en: 'With the preceding configured, we can add some basic setup on the `Habits.razor`
    page. Open the file and copy in the following:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 配置好上述内容后，我们可以在`Habits.razor`页面上添加一些基本设置。打开文件并复制以下内容：
- en: '[PRE4]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The preceding code will give us an outline that we can start to build upon.
    However, before we can see this in the app, we need to modify the navigation menu
    to link to this new page.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将为我们提供一个可以开始构建的概要。然而，在我们能够在应用中看到这些内容之前，我们需要修改导航菜单以链接到这个新页面。
- en: 'Open the `Shared` folder and locate the `NavMenu.razor` file. Change the navigation
    menu code to match the following. Note that the `href` property matches what we
    set in the `@page` attribute on the `Habits.razor` page:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`Shared`文件夹并定位到`NavMenu.razor`文件。将导航菜单代码更改为以下内容。注意，`href`属性与我们在`Habits.razor`页面上的`@page`属性中设置的内容相匹配：
- en: '[PRE5]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: With the menu configured, we can now run the application with `dotnet run` and
    see the changes we have made.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 配置菜单后，我们可以使用`dotnet run`运行应用程序并查看我们所做的更改。
- en: '![Figure 7.5 – Starting to build the GoodHabits page](img/B19343_07_5.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![图7.5 – 开始构建GoodHabits页面](img/B19343_07_5.jpg)'
- en: Figure 7.5 – Starting to build the GoodHabits page
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.5 – 开始构建GoodHabits页面
- en: In the preceding screenshot, we can see that we have successfully added the
    navigation and sketched out the GoodHabits page! Let’s add some more functionality.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，我们可以看到我们已经成功添加了导航并勾勒出了GoodHabits页面！让我们添加一些更多功能。
- en: We will start by modifying the code in the code block to allow us to view, add,
    edit, and delete the habits. We will shortly bind these functions to UI controls
    so that we can manipulate the habits in the list.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先修改代码块中的代码，以便我们可以查看、添加、编辑和删除习惯。我们将很快将这些函数绑定到UI控件，以便我们可以操作列表中的习惯。
- en: 'In the `@code` block, start by adding some class-level variables:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在`@code`块中，首先添加一些类级别变量：
- en: '[PRE6]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This will allow us to select a habit out of the list, edit that habit, and store
    a state variable that tells the view when we are editing.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许我们从列表中选择一个习惯，编辑该习惯，并存储一个状态变量，告诉视图我们正在编辑。
- en: 'Next, add a function that allows us to select a habit:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，添加一个允许我们选择一个习惯的函数：
- en: '[PRE7]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Add a function that will allow us to add a new habit with some default properties
    to the list:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个函数，允许我们将具有一些默认属性的新习惯添加到列表中：
- en: '[PRE8]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Add a function that will allow us to edit a habit:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个函数，允许我们编辑一个习惯：
- en: '[PRE9]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Add a function that will allow us to delete a habit from the list:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个函数，允许我们从列表中删除一个习惯：
- en: '[PRE10]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Add a function that will allow us to edit a habit from the list:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个函数，允许我们从列表中编辑一个习惯：
- en: '[PRE11]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Add a function that will allow us to save a habit that we have been editing:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个函数，允许我们保存我们正在编辑的习惯：
- en: '[PRE12]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Finally, add a function that will allow us to cancel any edits that we made,
    should we change our minds:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，添加一个函数，允许我们在改变主意时取消我们所做的任何编辑：
- en: '[PRE13]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: That should allow us to manipulate the habits in the list! Now, we will add
    the UI and bind the elements to the functions that we just created!
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该允许我们操作列表中的习惯！现在，我们将添加UI并将元素绑定到我们刚刚创建的函数！
- en: 'We’ll start by adding the list of habits to the left-hand pane. Copy the following
    HTML in directly under the `<h3>Good Habits</h3>` line in the HTML:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将习惯列表添加到左侧面板。直接在HTML中的`<h3>Good Habits</h3>`行下方复制以下HTML：
- en: '[PRE14]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You can see that we loop over the list of dummy habits that we included in the
    code block, binding these habits to the functions that we added to the `@code`
    block. We have added buttons to add, edit, and delete the habits in the list.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，我们遍历了代码块中包含的虚拟习惯列表，将这些习惯绑定到我们添加到`@code`块中的函数。我们已添加按钮来添加、编辑和删除列表中的习惯。
- en: 'Finally, we need to add the HTML to display or edit the habit on the right-hand
    side of the screen. Add the following HTML directly under the `<h3>Habit` `Details</h3>`
    element:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要添加HTML以在屏幕右侧显示或编辑习惯。直接在`<h3>Habit Details</h3>`元素下方添加以下HTML：
- en: '[PRE15]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: There is quite a lot going on here. We have added two forms, one that is shown
    if the `IsEditing` property is set to `true` and one that is shown if it is not,
    allowing us to view or edit the habits.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有很多事情在进行。我们添加了两个表单，一个在`IsEditing`属性设置为`true`时显示，另一个在它不是时显示，这样我们就可以查看或编辑习惯。
- en: The best way to understand what is happening is to start the project and see
    what we have created!
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 理解正在发生的事情的最好方法是启动项目并查看我们创建的内容！
- en: 'Type `dotnet run` into the console and go to the site in a browser. Then, navigate
    to the GoodHabits page, and you should see the following:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制台中输入`dotnet run`，然后在浏览器中访问网站。然后，导航到GoodHabits页面，你应该看到以下内容：
- en: '![ Figure 7.6 – The Good Habits UI](img/B19343_07_6.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![图7.6 – 好习惯UI](img/B19343_07_6.jpg)'
- en: Figure 7.6 – The Good Habits UI
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.6 – 好习惯UI
- en: As you can see in the preceding screenshot, we have a list of habits, and clicking
    on the name of any of these will bring up the “view” form.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个截图所示，我们有一个习惯列表，点击任何这些习惯的名称将弹出“查看”表单。
- en: The UI should be fairly intuitive, if not very pretty! I think it is a very
    useful exercise to play with this UI and look at how the various functions and
    elements we added to the Razor file interact.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: UI应该相当直观，如果不是非常漂亮！我认为玩这个UI并查看我们添加到Razor文件中的各种功能和元素是一个非常有用的练习。
- en: So far, we have a functional UI, but there is no connection to that backend
    yet. Let’s work on that now!
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们有一个功能性的UI，但还没有连接到后端。现在让我们着手解决这个问题！
- en: Connecting the UI to the backend
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将UI连接到后端
- en: Previously, we built the UI and added the functionality to add, delete, view,
    and update the habits. However, currently, there is no connection to the API that
    we have built up. Let’s remedy that now!
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们构建了UI并添加了添加、删除、查看和更新习惯的功能。然而，目前，我们的UI还没有连接到我们构建的API。现在让我们解决这个问题！
- en: Dealing with CORS issues
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理CORS问题
- en: '**CORS** stands for **Cross-Origin Resource Sharing**. It’s a mechanism that
    allows web pages to make requests to a different domain than the one that served
    the web page. CORS is a security feature that helps to prevent unauthorized access
    to web servers. When a web page attempts to make a cross-origin request, the server
    it makes the request to must respond with specific headers that allow the request
    to go through. If the server does not send these headers, the browser will block
    the request.'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '**CORS**代表**跨源资源共享**。这是一种允许网页向服务网页的不同域名发送请求的机制。CORS是一个安全功能，有助于防止未经授权访问Web服务器。当网页尝试进行跨源请求时，它所请求的服务器必须以允许请求通过的特定头信息响应。如果服务器没有发送这些头信息，浏览器将阻止请求。'
- en: We need to configure the API gateway project to accept connections from any
    origin when in development mode. Please note that this represents a security risk
    and should not be replicated in production.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发模式下，我们需要配置API网关项目以接受来自任何来源的连接。请注意，这代表了一个安全风险，不应在生产环境中复制。
- en: 'Open up `Program.cs` in the `API Gateway` project (*not in the Blazor project
    – make sure you are in the correct* `Program.cs` *file!!*). Locate the development
    settings:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在`API Gateway`项目中打开`Program.cs`文件（*不是在Blazor项目中 – 确保你是在正确的* `Program.cs` *文件中*）。定位到开发设置：
- en: '[PRE16]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, make sure that the following code is included:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，确保包含以下代码：
- en: '[PRE17]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This will ensure that the API will accept requests, but again, this is only
    suitable in development and not suitable for a production environment!
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 这将确保API将接受请求，但再次强调，这仅适用于开发环境，不适用于生产环境！
- en: Logic, including calling the API
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 逻辑，包括调用API
- en: We will modify the code that we built previously to connect to the API. If we
    did our jobs well, and correctly separated the UI elements from the logic, we
    should be able to make this change by only modifying the code. Let’s see how we
    did!
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将修改之前构建的代码以连接到API。如果我们做得好，并且正确地将UI元素与逻辑分离，我们只需修改代码就可以进行此更改。让我们看看我们做得怎么样！
- en: 'Start by adding a string constant that points to the API URL:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 首先添加一个指向API URL的字符串常量：
- en: '[PRE18]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Make sure to set the port correctly. Also, note that hardcoding a URL is not
    really good practice, but it will suffice for this demo.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 确保正确设置端口号。此外，请注意，硬编码URL并不是一个好的实践，但在这个演示中足够了。
- en: 'Next, comment out or delete the three dummy habits that we added. From now
    on, we will get the habits that we stored in our database:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，注释掉或删除我们添加的三个虚拟习惯。从现在起，我们将获取我们存储在数据库中的习惯：
- en: '[PRE19]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We need to add a hook to fetch the habits from the database. We will tap into
    the initialization hooks and add the following method:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要添加一个钩子来从数据库获取习惯。我们将利用初始化钩子并添加以下方法：
- en: '[PRE20]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This uses `httpClient` to call the API endpoint, which will return the list
    of habits that are stored in the database.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 这使用`httpClient`来调用API端点，该端点将返回存储在数据库中的习惯列表。
- en: 'Before we can add the calls to interact with the add and edit endpoints, we
    will need to create some classes. Add two private classes as follows:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们可以添加与添加和编辑端点交互的调用之前，我们需要创建一些类。添加两个私有类，如下所示：
- en: '[PRE21]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Next, modify the `AddHabit` method to interact with the API:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，修改`AddHabit`方法以与API交互：
- en: '[PRE22]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Add a line to the `DeleteHabit` method:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在`DeleteHabit`方法中添加一行：
- en: '[PRE23]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'And finally, modify the `SaveHabit` method to include the required interactions:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，修改`SaveHabit`方法以包含所需的交互：
- en: '[PRE24]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: That’s done! With just a few small changes, we are now hooked up to the API
    and the database. We have now created the outline of a fully functioning SaaS
    application!
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 完成了！仅仅通过一些小的改动，我们现在已经连接到了API和数据库。现在我们已经创建了一个完全功能SaaS应用程序的轮廓！
- en: To prove this, go into the **Run and Debug** menu and execute the **Run All**
    compound task that we created in [*Chapter 6*](B19343_06.xhtml#_idTextAnchor140).
    This will start both the microservice projects, the API gateway, and the client
    project. Then, navigate to the client in the browser. You should see the contents
    of your habits database on the screen! We are much closer to completing our SaaS
    application!
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 为了证明这一点，进入**运行和调试**菜单并执行我们在[*第6章*](B19343_06.xhtml#_idTextAnchor140)中创建的**运行所有**复合任务。这将启动微服务项目、API网关和客户端项目。然后，在浏览器中导航到客户端。你应该能在屏幕上看到你的习惯数据库内容！我们离完成我们的SaaS应用程序又近了一步！
- en: '![Figure 7.7 – The Good Habits UI, connected to the gateway API](img/B19343_07_7.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![图7.7 – 好习惯UI，连接到网关API](img/B19343_07_7.jpg)'
- en: Figure 7.7 – The Good Habits UI, connected to the gateway API
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.7 – 好习惯UI，连接到网关API
- en: Building usable UIs
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建可用的UI
- en: The example that we have built here is a good technical demonstration of the
    essential techniques to incorporate the SaaS backend with a UI, but I think it’s
    safe to say that it lacks a bit of flair. These days, the average consumer expectations
    of a UI for a SaaS app are very high – essentially, customers will demand a very
    similar experience to a native application but running in a browser.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里构建的示例是结合SaaS后端和UI的基本技术的良好技术演示，但我认为可以安全地说，它缺少一点风格。如今，普通消费者对SaaS应用程序UI的期望非常高——基本上，客户将要求与原生应用程序非常相似但运行在浏览器中的体验。
- en: To make a UI look more modern and responsive, we would typically use an off-the-shelf
    responsive UI framework. In addition to expecting the UI to perform like a desktop
    app, there is generally also an expectation that the UI should work on a tablet
    and a phone. Finally, not everyone shares the same abilities, and there are standard
    methods to endure that your UI is accessible to differently abled persons. In
    this section, we will look into all this, starting with responsive UI frameworks.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使UI看起来更加现代和响应，我们通常会使用现成的响应式UI框架。除了期望UI表现得像桌面应用程序一样，通常还期望UI能够在平板电脑和手机上运行。最后，并非每个人都有相同的技能，而且有一些标准方法来确保您的UI对不同能力的人都是可访问的。在本节中，我们将探讨所有这些内容，从响应式UI框架开始。
- en: Responsive UI frameworks
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 响应式UI框架
- en: Responsive UI frameworks are a collection of pre-built components, styles, and
    scripts designed to help developers create responsive and adaptive web applications
    with ease. These frameworks provide developers with a set of tools that can be
    used to build UIs that automatically adjust to different devices and screen sizes,
    ensuring a consistent and enjoyable UX across various platforms.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式UI框架是一组预构建的组件、样式和脚本，旨在帮助开发者轻松创建响应式和自适应的Web应用程序。这些框架为开发者提供了一套工具，可用于构建能够自动调整到不同设备和屏幕大小的UI，确保在各种平台上提供一致且愉悦的UX。
- en: The use of responsive UI frameworks can significantly streamline the development
    process by providing ready-to-use components and a cohesive design system. This
    enables developers to focus more on an application’s functionality and less on
    the complexities of building responsive layouts from scratch. Additionally, these
    frameworks typically adhere to well-established design principles and best practices,
    ensuring that the final product is not only visually appealing but also accessible
    and user-friendly.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 使用响应式UI框架可以通过提供现成的组件和一致的设计系统来显著简化开发过程。这使得开发者可以更多地关注应用程序的功能性，而不是从头开始构建响应式布局的复杂性。此外，这些框架通常遵循已建立的设计原则和最佳实践，确保最终产品不仅视觉上吸引人，而且易于访问和用户友好。
- en: Bootstrap is an open source and widely used CSS framework developed by Twitter.
    It simplifies the process of creating responsive and mobile-first websites by
    providing a comprehensive set of reusable components, such as buttons, forms,
    and navigation elements. Bootstrap also includes a responsive grid system based
    on the **Flexible Box Layout Module** (**Flexbox**), making it easy to create
    fluid layouts that adapt to different screen sizes. With its extensive documentation
    and large community, Bootstrap remains a popular choice among developers.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 是由 Twitter 开发的一个开源且广泛使用的 CSS 框架。它通过提供一套全面的可重用组件，如按钮、表单和导航元素，简化了创建响应式和移动优先网站的过程。Bootstrap
    还包括一个基于 **弹性盒布局模块**（**Flexbox**）的响应式网格系统，这使得创建适应不同屏幕尺寸的流畅布局变得容易。凭借其广泛的文档和庞大的社区，Bootstrap
    仍然是开发者中的热门选择。
- en: Foundation, created by ZURB, is another popular responsive frontend framework
    that focuses on providing a robust and flexible foundation to build custom web
    applications. It offers various pre-built components, a responsive grid system,
    and a modular architecture that enables developers to use only the components
    they need for their projects. Foundation is known for its performance optimizations
    and compatibility with a wide range of devices, making it a suitable choice for
    complex projects that require advanced customization and performance.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 由 ZURB 创建的 Foundation 是另一个流行的响应式前端框架，它专注于提供强大的灵活基础来构建自定义网络应用程序。它提供各种预构建组件、一个响应式网格系统和模块化架构，使开发者能够仅使用他们项目所需的组件。Foundation
    以其性能优化和与广泛设备的兼容性而闻名，使其成为需要高级定制和性能的复杂项目的合适选择。
- en: Material-UI is a popular React-based UI framework that implements Google’s Material
    Design guidelines. Material-UI provides a consistent and modern look and feel
    for web applications, ensuring that UIs are both visually appealing and easy to
    navigate. It includes a set of pre-built components, a responsive layout system,
    and a theming system that allows for easy customization. By following Material
    Design principles, Material-UI helps developers create UIs that adhere to established
    usability standards.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: Material-UI 是一个基于 React 的流行 UI 框架，它实现了谷歌的 Material Design 指南。Material-UI 为网络应用程序提供了统一且现代的外观和感觉，确保
    UI 既有视觉吸引力又易于导航。它包括一组预构建的组件、一个响应式布局系统以及一个主题系统，允许轻松定制。通过遵循 Material Design 原则，Material-UI
    帮助开发者创建符合既定可用性标准的 UI。
- en: While Flexbox is a powerful CSS layout module that simplifies the design of
    flexible and responsive layouts for web pages, it is not a full-fledged responsive
    UI framework. Instead, it is a valuable tool that can be used in conjunction with
    other frameworks to create adaptive layouts. Many responsive UI frameworks, such
    as Bootstrap and Foundation, incorporate Flexbox as part of their grid systems,
    leveraging its capabilities to create versatile and fluid layouts for their components.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Flexbox 是一个强大的 CSS 布局模块，它简化了网页中灵活和响应式布局的设计，但它并不是一个完整的响应式 UI 框架。相反，它是一个非常有价值的工具，可以与其他框架结合使用来创建自适应布局。许多响应式
    UI 框架，如 Bootstrap 和 Foundation，将 Flexbox 作为其网格系统的一部分，利用其功能来为组件创建多用途和流畅的布局。
- en: It is definitely recommended to choose one of these to integrate with your project.
    It would be an excellent learning exercise to apply one of these frameworks to
    the demo UI that we created previously!
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 肯定推荐选择其中之一与你的项目集成。将其中一个框架应用于我们之前创建的演示 UI 将是一个极好的学习练习！
- en: Responsive design techniques
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 响应式设计技术
- en: Simply installing one of the responsive frameworks described previously is not
    quite enough. You will need to master some of the techniques to get the most out
    of them.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 简单地安装之前描述的任何响应式框架还远远不够。你需要掌握一些技术，才能充分利用它们。
- en: In this section, we will quickly explore the fundamental responsive design techniques,
    including fluid grids, flexible images, and media queries. By understanding and
    applying these techniques in conjunction with responsive UI frameworks, you can
    build usable UIs that provide a consistent and enjoyable experience across various
    platforms.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将快速探讨基本的响应式设计技术，包括流体网格、灵活图像和媒体查询。通过理解和应用这些技术与响应式 UI 框架相结合，你可以构建可用的 UI，在各种平台上提供一致且愉快的体验。
- en: Fluid grids form the backbone of responsive design by enabling flexible layouts
    that adjust dynamically, based on screen size. Instead of using fixed-width units
    such as pixels, fluid grids use relative units such as percentages to define the
    width of elements. This ensures that the layout automatically scales and reflows
    as the viewport changes. For example, when working with Bootstrap, you can create
    a fluid grid by utilizing its predefined grid classes, such as `.container`, `.row`,
    and `.col`. These classes enable you to define a responsive grid structure that
    adapts to different screen sizes.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 流体网格是响应式设计的核心，它通过允许根据屏幕尺寸动态调整的灵活布局来实现。而不是使用像素这样的固定宽度单位，流体网格使用百分比这样的相对单位来定义元素的宽度。这确保了布局会随着视口的变化自动缩放和重新排列。例如，当使用Bootstrap时，您可以通过利用其预定义的网格类，如`.container`、`.row`和`.col`，来创建流体网格。这些类使您能够定义一个响应式网格结构，该结构可以适应不同的屏幕尺寸。
- en: Flexible images ensure that media content, such as images and videos, also scales
    and adapts to different screen sizes. By setting the max-width property of images
    to 100%, images will automatically scale down to fit the width of their containing
    element, preventing them from overflowing and disrupting the layout. When working
    with frameworks such as Foundation or Material-UI, you can use their built-in
    classes or components to handle image scaling, ensuring that your media content
    remains responsive across various devices.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 弹性图像确保媒体内容（如图像和视频）也能根据不同的屏幕尺寸进行缩放和适应。通过将图像的最大宽度属性设置为100%，图像将自动缩放到适合其包含元素的宽度，防止其溢出并破坏布局。当使用Foundation或Material-UI等框架时，您可以使用它们内置的类或组件来处理图像缩放，确保您的媒体内容在各种设备上保持响应式。
- en: Media queries are a powerful CSS feature that allows you to apply different
    styles based on the characteristics of a user’s device, such as screen size, resolution,
    or orientation. By using media queries, you can define breakpoints at which your
    layout and styles change, ensuring that your UI remains usable and visually appealing
    at different screen sizes. Most responsive UI frameworks, such as Bootstrap and
    Material-UI, provide predefined media queries and breakpoints that you can use
    or customize to suit your specific needs.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 媒体查询是一个强大的CSS功能，它允许您根据用户设备的特征（如屏幕尺寸、分辨率或方向）应用不同的样式。通过使用媒体查询，您可以在布局和样式发生变化的断点定义，确保您的UI在不同屏幕尺寸下保持可用性和视觉吸引力。大多数响应式UI框架，如Bootstrap和Material-UI，都提供了预定义的媒体查询和断点，您可以使用或自定义以满足您的特定需求。
- en: By combining these core responsive design techniques with the features provided
    by responsive UI frameworks, you can create web applications that are not only
    visually appealing but also highly functional and adaptable to various devices
    and screen sizes. This ultimately contributes to building usable UIs that enhance
    the overall UX and cater to diverse user needs and preferences.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 通过结合这些核心响应式设计技术与响应式UI框架提供的功能，您可以创建既美观又高度功能性强、适应各种设备和屏幕尺寸的Web应用程序。这最终有助于构建可用的UI，从而提升整体UX，满足多样化的用户需求和偏好。
- en: Designing for different screen sizes
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为不同屏幕尺寸设计
- en: These days, it is impossible to predict what device a user will choose to use
    to access your SaaS application. As a result, it’s crucial to consider different
    screen sizes and resolutions when designing responsive web applications. By doing
    so, you can ensure that your UIs look and function well across different devices,
    providing a consistent and enjoyable UX.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，预测用户将选择哪种设备来访问您的SaaS应用程序是不可能的。因此，在设计响应式Web应用程序时，考虑不同的屏幕尺寸和分辨率至关重要。这样做可以确保您的UI在不同设备上看起来和运行良好，提供一致且愉悦的UX。
- en: 'When designing for different screen sizes, it’s essential to follow a few key
    guidelines and best practices:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 当为不同屏幕尺寸设计时，遵循一些关键指南和最佳实践是至关重要的：
- en: It can be very helpful to take a mobile-first approach. Start by designing your
    layout and UI for smaller screens, such as smartphones, and then progressively
    enhance the design for larger screens. This approach ensures that your application
    remains functional and visually appealing on smaller devices, while taking advantage
    of the additional screen real estate on larger ones.
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 采用移动优先的方法可能非常有帮助。首先为较小的屏幕（如智能手机）设计布局和UI，然后逐步增强对较大屏幕的设计。这种方法确保了您的应用程序在小设备上保持功能性和视觉吸引力，同时利用较大屏幕的额外显示空间。
- en: As mentioned earlier, responsive UI frameworks such as Bootstrap, Foundation,
    and Material-UI provide pre-built components, grid systems, and predefined media
    queries that make it easier to create adaptive layouts for various screen sizes.
    Leveraging these frameworks can significantly streamline the development process
    and ensure that your UIs remain consistent and functional across different devices.
    Remember to apply best practices and use good responsive design techniques!
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如前所述，响应式UI框架，如Bootstrap、Foundation和Material-UI，提供了预构建的组件、网格系统和预定义的媒体查询，这使得为各种屏幕尺寸创建自适应布局变得更加容易。利用这些框架可以显著简化开发过程，并确保你的UI在不同设备上保持一致和功能。记住要应用最佳实践并使用良好的响应式设计技术！
- en: Always test on multiple devices and screen sizes. During the development process,
    test your application on a variety of devices and screen sizes to identify potential
    issues and ensure a consistent UX. You can use device emulators, browser developer
    tools, or physical devices to test your application’s responsiveness and make
    any necessary adjustments.
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总是在多种设备和屏幕尺寸上进行测试。在开发过程中，使用各种设备和屏幕尺寸测试你的应用，以识别潜在问题并确保一致的UX。你可以使用设备模拟器、浏览器开发者工具或物理设备来测试应用的响应性并进行必要的调整。
- en: Optimize your application’s performance for different devices, as slower load
    times and inefficient resource usage can significantly impact the UX, especially
    on mobile devices. Consider factors such as image optimization, code minification,
    and lazy loading to improve the performance of your application across different
    screen sizes.
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优化你的应用性能以适应不同设备，因为较慢的加载时间和低效的资源使用可以显著影响用户体验，尤其是在移动设备上。考虑诸如图像优化、代码最小化和懒加载等因素，以改善应用在不同屏幕尺寸下的性能。
- en: By following these guidelines and best practices, you can create responsive
    web applications that provide a consistent and enjoyable UX across various devices
    and screen sizes. Utilizing responsive UI frameworks and responsive design techniques
    will ensure that your UIs adapt seamlessly, catering to the diverse needs and
    preferences of your users.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循这些指南和最佳实践，你可以创建响应式网络应用，这些应用在各种设备和屏幕尺寸上提供一致且愉悦的用户体验。利用响应式UI框架和响应式设计技术将确保你的UI能够无缝适应，满足用户多样化的需求和偏好。
- en: Accessibility
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 易于访问性
- en: Creating accessible and inclusive web applications is an essential aspect of
    responsible and empathetic design. By considering the needs of differently abled
    users, you ensure that your SaaS applications provide equal access and opportunities
    for everyone, fostering a more inclusive online environment.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 创建易于访问和包容性的网络应用是负责任和富有同理心的设计的一个基本方面。通过考虑不同能力用户的需要，你确保了你的SaaS应用为每个人提供平等访问和机会，从而营造一个更加包容的在线环境。
- en: Embracing accessibility and inclusivity in your web applications is really important
    for a few reasons. Doing so gives a wider audience reach. By making your application
    accessible, you cater to a larger audience, including differently abled users,
    who might otherwise face barriers when interacting with your application.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的网络应用中拥抱易于访问性和包容性非常重要，原因有几个。这样做可以扩大受众范围。通过使你的应用易于访问，你可以满足更广泛的受众，包括可能在与你的应用互动时遇到障碍的不同能力用户。
- en: Generally speaking, a UI that is designed to be accessible will result in a
    better overall experience in general. Accessible design principles often result
    in better usability for all users, as they promote clear and intuitive interfaces
    that are easy to navigate and understand.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 通常来说，设计得易于访问的用户界面将导致整体体验更加出色。易于访问的设计原则通常会使所有用户都能获得更好的可用性，因为它们促进了清晰直观的界面，这些界面易于导航和理解。
- en: Finally, it is the right thing to do. We should strive to make the internet,
    and indeed the world, a more inclusive place. If we can make a very tiny difference
    by taking the time to make our applications accessible, then we should!
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这是正确的事情。我们应该努力使互联网，以及世界，成为一个更加包容的地方。如果我们能通过花时间使我们的应用易于访问来做出非常微小的贡献，那么我们就应该这样做！
- en: To create more accessible web applications, it’s important to follow established
    accessibility standards and guidelines, such as the **Web Content Accessibility
    Guidelines** (**WCAG**) and the **Americans with Disabilities Act** (**ADA**)
    Standards for Accessible Design. These guidelines provide a framework to ensure
    that your application is usable and accessible for differently abled users.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建更可访问的网络应用程序，遵循既定的可访问性标准和指南非常重要，例如**网络内容可访问性指南（WCAG）**和**美国残疾人法案（ADA）可访问性设计标准**。这些指南提供了一个框架，以确保您的应用程序对有不同能力用户是可用的和可访问的。
- en: 'There are several tools and techniques available to address common accessibility
    challenges and improve the UX for differently abled users:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种工具和技术可用于解决常见的可访问性挑战，并改善不同能力用户的用户体验：
- en: '**Screen readers**: These assistive technologies convert text and other onscreen
    content into speech or braille, helping visually impaired users to access and
    navigate web applications. Ensure that your application’s content is structured
    semantically, with proper use of headings, landmarks, and alternative text for
    images to support screen reader users.'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**屏幕阅读器**：这些辅助技术将文本和其他屏幕内容转换为语音或盲文，帮助视力受损用户访问和导航网络应用程序。确保您的应用程序内容在语义上结构良好，正确使用标题、地标和图像的替代文本，以支持屏幕阅读器用户。'
- en: '**Keyboard navigation**: Some users may rely solely on a keyboard to navigate
    web applications. Ensure that your application supports keyboard navigation by
    providing visible focus indicators, logical tab order, and keyboard-accessible
    interactive elements.'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**键盘导航**：一些用户可能完全依赖键盘来导航网络应用程序。确保您的应用程序通过提供可见的焦点指示器、逻辑的标签顺序和可键盘访问的交互元素来支持键盘导航。'
- en: '**Color contrast**: Users with visual impairments or color blindness may have
    difficulty perceiving content with low contrast. Ensure that your application’s
    color scheme and design elements adhere to the recommended contrast ratios, as
    specified by the WCAG.'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**颜色对比度**：视力受损或色盲的用户可能难以感知对比度低的内容。确保您的应用程序的色彩方案和设计元素遵循 WCAG 规定的推荐对比度比率。'
- en: '**Accessible forms**: Users with cognitive or motor impairments may struggle
    with complex forms and input fields. Simplify forms, provide clear labels, and
    use proper input types to make it easier for all users to interact with your application.'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可访问的表单**：认知或运动障碍的用户可能难以处理复杂的表单和输入字段。简化表单，提供清晰的标签，并使用适当的输入类型，以便所有用户都能轻松与您的应用程序交互。'
- en: '**Accessible Rich Internet Applications (ARIA)**: This set of attributes helps
    enhance the accessibility of dynamic content and advanced UI controls. Use ARIA
    attributes to provide additional information about the structure and functionality
    of your application, ensuring that assistive technologies can interpret and interact
    with it correctly.'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可访问的富互联网应用（ARIA）**：这组属性有助于增强动态内容和高级用户界面控件的可访问性。使用 ARIA 属性提供有关您应用程序结构和功能的信息，确保辅助技术可以正确解释和与之交互。'
- en: By considering the needs of differently abled users and implementing these tools
    and techniques, you can create web applications that are more accessible, inclusive,
    and user-friendly. This not only benefits your users but also contributes to the
    overall success of your application.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 通过考虑不同能力用户的需求并实施这些工具和技术，您可以创建更可访问、包容和用户友好的网络应用程序。这不仅有利于您的用户，也有助于您应用程序的整体成功。
- en: Summary
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we’ve covered a lot of ground in terms of designing and building
    a UI for a SaaS application. We’ve talked about the importance of UX and how to
    design for user personas, plan user journeys, and create visually appealing and
    responsive designs. We’ve also discussed the importance of UI testing and how
    to build a simple UI using Blazor.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了为 SaaS 应用程序设计和构建用户界面的大量内容。我们讨论了用户体验的重要性以及如何为用户画像设计、规划用户旅程以及创建视觉吸引力和响应式设计。我们还讨论了
    UI 测试的重要性以及如何使用 Blazor 构建简单的 UI。
- en: One of the key takeaways from this chapter is the importance of UX in the development
    of a SaaS application. A well-designed and intuitive UI can make all the difference
    in terms of user adoption, retention, and satisfaction. By planning for user personas
    and user journeys, we can ensure that we’re building an interface that meets the
    needs and expectations of our target audience.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的一个重要收获是用户体验（UX）在SaaS应用程序开发中的重要性。一个设计良好且直观的UI可以在用户采用、保留和满意度方面产生重大差异。通过规划用户角色和用户旅程，我们可以确保我们构建的界面符合目标受众的需求和期望。
- en: Another important takeaway is the value of using a modern UI framework such
    as Blazor. By using Blazor, we can take advantage of the power and flexibility
    of .NET to build rich, interactive, and responsive UIs that can communicate effectively
    with backend APIs. Blazor allows us to use C# and .NET skills to build web applications
    that run in a browser, using WebAssembly to execute .NET code on the client side.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要收获是使用现代UI框架（如Blazor）的价值。通过使用Blazor，我们可以利用.NET的强大功能和灵活性来构建丰富、交互式且响应迅速的UI，这些UI可以有效地与后端API通信。Blazor允许我们使用C#和.NET技能构建在浏览器中运行的Web应用程序，使用WebAssembly在客户端执行.NET代码。
- en: We’ve also covered some key best practices to build a UI, including designing
    for accessibility, using responsive design, optimizing performance and load times,
    and providing feedback and testing for users. These are all essential elements
    of a well-designed and user-friendly UI.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还介绍了一些构建UI的关键最佳实践，包括设计可访问性、使用响应式设计、优化性能和加载时间，以及为用户提供反馈和测试。这些都是设计良好且用户友好的UI的基本要素。
- en: In the second part of the chapter, we delved into how to connect a Blazor UI
    to a backend API. We discussed how to configure the Blazor client to communicate
    with the API, how to define data models, and how to retrieve and update data.
    We also talked about the importance of error handling, testing, and debugging,
    ensuring that our application is robust and reliable.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的第二部分，我们深入探讨了如何将Blazor UI连接到后端API。我们讨论了如何配置Blazor客户端以与API通信，如何定义数据模型，以及如何检索和更新数据。我们还讨论了错误处理、测试和调试的重要性，确保我们的应用程序健壮且可靠。
- en: By following the steps outlined in this chapter, you will have a good understanding
    of how to design and build a UI for a SaaS application and how to connect that
    interface to a backend API. You will be equipped with the tools and knowledge
    needed to build an intuitive, visually appealing, and responsive UI that meets
    the needs of your target audience, while also being performant and reliable.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循本章中概述的步骤，你将深入了解如何为SaaS应用程序设计和构建UI，以及如何将界面连接到后端API。你将具备构建直观、视觉吸引力强且响应迅速的UI所需的工具和知识，同时确保应用程序性能和可靠性。
- en: In conclusion, the UI is a critical component of any SaaS application, and designing
    and building a great UI requires a combination of technical and creative skills.
    By following the best practices and guidelines covered in this chapter, you will
    be well on your way to building a UI that is intuitive, engaging, and effective,
    helping you to achieve your business goals.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，UI是任何SaaS应用程序的关键组件，设计和构建一个优秀的UI需要技术能力和创造力的结合。通过遵循本章中涵盖的最佳实践和指南，你将朝着构建直观、吸引人且有效的UI迈进，这有助于你实现业务目标。
- en: In the next chapter, we will talk about authentication and authorization, with
    specific reference to how this will affect a multi-tenant, microservice SaaS application!
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论身份验证和授权，具体参考这将如何影响多租户、微服务SaaS应用程序！
- en: Further reading
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Build beautiful web apps with Blazor: [https://dotnet.microsoft.com/en-us/apps/aspnet/web-apps/blazor](https://dotnet.microsoft.com/en-us/apps/aspnet/web-apps/blazor)'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Blazor构建美丽的Web应用程序：[https://dotnet.microsoft.com/en-us/apps/aspnet/web-apps/blazor](https://dotnet.microsoft.com/en-us/apps/aspnet/web-apps/blazor)
- en: 'VS Code and Blazor WASM: [https://dev.to/sacantrell/vs-code-and-blazor-wasm-debug-with-hot-reload-5317](https://dev.to/sacantrell/vs-code-and-blazor-wasm-debug-with-hot-reload-5317)'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VS Code和Blazor WASM：[https://dev.to/sacantrell/vs-code-and-blazor-wasm-debug-with-hot-reload-5317](https://dev.to/sacantrell/vs-code-and-blazor-wasm-debug-with-hot-reload-5317)
- en: 'Call a web API from ASP.NET Core Blazor: [https://learn.microsoft.com/en-us/aspnet/core/blazor/call-web-api?view=aspnetcore-7.0&pivots=server](https://learn.microsoft.com/en-us/aspnet/core/blazor/call-web-api?view=aspnetcore-7.0&pivots=server)'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从ASP.NET Core Blazor调用Web API：[https://learn.microsoft.com/en-us/aspnet/core/blazor/call-web-api?view=aspnetcore-7.0&pivots=server](https://learn.microsoft.com/en-us/aspnet/core/blazor/call-web-api?view=aspnetcore-7.0&pivots=server)
- en: 'Blazor WebAssembly HttpClient: [https://code-maze.com/blazor-webassembly-httpclient/](https://code-maze.com/blazor-webassembly-httpclient/)'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Blazor WebAssembly HttpClient: [https://code-maze.com/blazor-webassembly-httpclient/](https://code-maze.com/blazor-webassembly-httpclient/)'
- en: Questions
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is Blazor, and how does it allow us to create web applications using C#
    and .NET?
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是 Blazor，以及它是如何让我们使用 C# 和 .NET 创建 Web 应用的？
- en: How can we automatically generate a client that connects to a .NET web API from
    a Blazor application?
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何自动从 Blazor 应用生成一个连接到 .NET Web API 的客户端？
- en: How can we consume data from a .NET web API in a Blazor application, and what
    are some best practices to handle errors and exceptions?
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何在 Blazor 应用中消费来自 .NET Web API 的数据，以及处理错误和异常的一些最佳实践是什么？
- en: What is a user persona?
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户画像是什么？
- en: Why is it important to map a user journey before starting to build a UI?
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么在开始构建 UI 之前映射用户旅程很重要？
