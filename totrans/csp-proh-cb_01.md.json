["```cs\n    namespace Chapter1\n    {\n        public static class Recipe1StringInterpolation\n        {\n\n        }\n    }\n    ```", "```cs\n    public static string BaseCurrency { get; private set; }\n    ```", "```cs\n    private static decimal PreformConversion(string toCurrency)\n    {\n        decimal rate = 0.0m;\n\n        if (BaseCurrency.Equals(\"ZAR\"))\n        {\n            switch (toCurrency)\n            {\n                case \"USD\":\n                    rate = 16.3040m;\n                    break;\n                default:\n                    rate = 1.0m;\n                    break;\n            }\n        }\n\n        return rate;\n    }\n    ```", "```cs\n    public static string ReadExchangeRate(string fromCurrencyCode, string toCurrencyCode)\n    {\n        BaseCurrency = fromCurrencyCode;\n        decimal conversion = PreformConversion(toCurrencyCode);\n        return $\"1 {toCurrencyCode} = {conversion} {fromCurrencyCode} \";\n    }\n    ```", "```cs\n    string RandDollarExchangeRate = Chapter1.Recipe1StringInterpolation.ReadExchangeRate(\"ZAR\", \"USD\");\n    Console.WriteLine(\"The current Rand / Dollar exchange rate is:\");\n    Console.WriteLine(RandDollarExchangeRate);\n    Console.Read();\n    ```", "```cs\n$\"The year {DateTime.Now.Year} {(DateTime.IsLeapYear(DateTime.Now.Year) ? \" is \" : \" is not \")} a leap year.\";\n```", "```cs\n$\"There {(StudentCount > 1 ? \"are \" : \"is \")}{StudentCount} student{(StudentCount > 1 ? \"s\" : \"\")} in the list.\"\n```", "```cs\n    public static class Recipe2NullConditionalOperator\n    {\n\n    }\n    ```", "```cs\n    public static int GetStudents()\n    {\n        List<Student> students = new List<Student>(); \n        Student st = new Student();\n\n        st.FirstName = \"Dirk\";\n        st.LastName = \"Strauss\";\n        st.JobTitle = \"\";\n        st.Age = 19;\n        st.StudentNumber = \"20323742\";\n        students.Add(st);\n\n        st.FirstName = \"Bob\";\n        st.LastName = \"Healey\";\n        st.JobTitle = \"Lab Assistant\";\n        st.Age = 21;\n        st.StudentNumber = \"21457896\";\n        students.Add(st);\n\n        return students?.Count() ?? 0;            \n    }\n    ```", "```cs\n    public class Student\n    {\n        public string StudentNumber { get; set; }\n        public string FirstName { get; set; }\n        public string LastName { get; set; }\n        public int Age { get; set; }\n        public string JobTitle { get; set; }\n    }\n    ```", "```cs\n    int StudentCount = Chapter1.Recipe2NullConditionalOperator.GetStudents();\n                if (StudentCount >= 1)\n                    Console.WriteLine($\"There {(StudentCount > 1 ? \"are \" : \"is \")}{StudentCount} student{(StudentCount > 1 ? \"s\" : \"\")} in the list.\");\n                else\n                    Console.WriteLine($\"There were {StudentCount} students contained in the list.\");\n                Console.Read();\n    ```", "```cs\n    public static int GetStudents()\n    {\n        List<Student> students = new List<Student>(); \n        Student st = new Student();\n\n        st.FirstName = \"Dirk\";\n        st.LastName = \"Strauss\";\n        st.JobTitle = \"\";\n        st.Age = 19;\n        st.StudentNumber = \"20323742\";\n        students.Add(st);\n\n        st.FirstName = \"Bob\";\n        st.LastName = \"Healey\";\n        st.JobTitle = \"Lab Assistant\";\n        st.Age = 21;\n        st.StudentNumber = \"21457896\";\n        students.Add(st);\n\n        students = null;\n        return students?.Count() ?? 0;            \n    }\n    ```", "```cs\nreturn students?.Count() ?? 0;\n```", "```cs\nreturn students.Count();\n```", "```cs\n    public static class Recipe3AutoImplementedProperties\n    {\n        public enum DiscountType { Sale, Clearout, None }\n        private static int SaleDiscountPercent { get; } = 20;\n        private static int ClearoutDiscountPercent { get; } = 35;\n        public static decimal ShelfPrice { get; set; } = 100;\n        public static decimal SalePrice { get; set; } = 100;\n    }\n    ```", "```cs\n    public static void CalculateSalePrice(string barCode, DiscountType discount)\n    {\n      decimal shelfPrice = GetPriceFromBarcode(barCode);\n\n      if (discount == DiscountType.Sale)\n        SalePrice = (shelfPrice == 0 ? ShelfPrice.CalculateSalePrice(SaleDiscountPercent) : shelfPrice.CalculateSalePrice(SaleDiscountPercent));\n\n      if (discount == DiscountType.Clearout)\n       SalePrice = (shelfPrice == 0 ? ShelfPrice.CalculateSalePrice(ClearoutDiscountPercent): shelfPrice.CalculateSalePrice(ClearoutDiscountPercent));\n\n      if (discount == DiscountType.None)\n        SalePrice = (shelfPrice == 0 ? ShelfPrice :shelfPrice);\n    }\n    ```", "```cs\n    private static decimal GetPriceFromBarcode(string barCode)\n    {            \n        switch (barCode)\n        {\n            case \"123450\":\n                return 19.95m;                    \n            case \"123451\":\n                return 7.55m;\n            case \"123452\":\n                return 59.99m;\n            case \"123453\":\n                return 93.99m;\n            default:\n                return 0;\n        }\n    }\n    ```", "```cs\n    public static class ExtensionMethods\n    {\n        public static decimal CalculateSalePrice(this decimal shelfPrice, int discountPercent)\n        {\n            decimal discountValue = (shelfPrice / 100) * discountPercent;\n            return shelfPrice - discountValue;\n        }\n    }\n    ```", "```cs\n    string BarCode = String.Empty;\n\n    BarCode = \"123450\";\n    Chapter1.Recipe3AutoImplementedProperties.CalculateSalePric e(BarCode, Chapter1.Recipe3AutoImplementedProperties.DiscountType.Sale );\n    Console.WriteLine(Chapter1.Recipe3AutoImplementedProperties .SalePrice);\n    ```", "```cs\n    public static class Recipe4IndexInitializers\n    {\n\n    }\n\n    public class Month\n    {\n        public int StartFinancialYearMonth { get; set; } = 2;\n        public int SalaryIncreaseMonth { get; set; } = 3;\n    }\n    ```", "```cs\n    public static string ReturnWeekDay(int dayNumber)\n    {\n        Dictionary<int, string> day = new Dictionary<int, string>\n        {\n            [1] = \"Monday\",\n            [2] = \"Tuesday\",\n            [3] = \"Wednesday\",\n            [4] = \"Thursday\",\n            [5] = \"Friday\",\n            [6] = \"Saturday\",\n            [7] = \"Sunday\"\n        };\n\n        return day[dayNumber];\n    }\n    ```", "```cs\n    public static List<int> ReturnFinancialAndBonusMonth()\n    {\n        Month currentMonth = new Month();\n        int[] array = new[] { currentMonth.StartFinancialYearMonth, currentMonth.SalaryIncreaseMonth };\n        return new List<int>(array) { [1] = 2 };  \n    }\n    ```", "```cs\n    public static string Human { get; set; } = \"Homo sapiens\";\n    public static string Sloth { get; set; } = \"Choloepus hoffmanni\";\n    public static string Rabbit { get; set; } = \"Oryctolagus cuniculus\";\n    public static string Mouse { get; set; } = \"Mus musculus\";\n    public static string Hedgehog { get; set; } = \"Erinaceus europaeus\";\n    public static string Dolphin { get; set; } = \"Tursiops truncatus\";\n    public static string Dog { get; set; } = \"Canis lupus familiaris\";\n\n    public static void DetermineSpecies()\n    {\n        Dictionary<string, string> Species =  new Dictionary<string, string>\n        {\n            [Human] = Human + \" : Additional species information\",\n            [Rabbit] = Rabbit + \" : Additional species information\",\n            [Sloth] = Sloth + \" : Additional species information\",\n            [Mouse] = Mouse + \" : Additional species information\",\n            [Hedgehog] = Hedgehog + \" : Additional species information\",\n            [Dolphin] = Dolphin + \" : Additional species information\",\n            [Dog] = Dog + \" : Additional species information\"\n        };\n\n        Console.WriteLine(Species[Human]);            \n    }\n    ```", "```cs\n    int DayNumber = 3;\n    string DayOfWeek = Chapter1.Recipe4IndexInitializers.ReturnWeekDay(DayNumber);\n    Console.WriteLine($\"Day {DayNumber} is {DayOfWeek}\");\n\n    List<int> FinancialAndBonusMonth = Chapter1.Recipe4IndexInitializers.ReturnFinancialAndBonusMo nth();\n    Console.WriteLine(\"Financial Year Start month and Salary Increase Months are:\");\n    for (int i = 0; i < FinancialAndBonusMonth.Count(); i++)\n    {\n        Console.Write(i == 0 ? FinancialAndBonusMonth[i].ToString() + \" and \" : FinancialAndBonusMonth[i].ToString());\n    }\n\n    Console.WriteLine();\n    Chapter1.Recipe4IndexInitializers.DetermineSpecies();\n    Console.Read();\n    ```", "```cs\nreturn new List<int>(array) { [1] = 2 };\n```", "```cs\n    public static class Recipe5NameofExpression\n    {\n        public static int StudentCount { get; set; } = 0;\n    }\n    ```", "```cs\n    public static List<Student> GetStudents()\n    {\n        List<Student> students = new List<Student>();\n        try\n        {                \n            Student st = new Student();\n\n            st.FirstName = \"Dirk\";\n            st.LastName = \"Strauss\";\n            st.JobTitle = \"\";\n            st.Age = 19;\n            st.StudentNumber = \"20323742\";\n            students.Add(st);\n\n            st.FirstName = \"Bob\";\n            st.LastName = \"Healey\";\n            st.JobTitle = \"Lab Assistant\";\n            st.Age = 21;\n            st.StudentNumber = \"21457896\";\n            students.Add(st);\n\n            //students = null;\n\n            StudentCount = students.Count();\n\n            return students;\n        }\n        catch (Exception ex)\n        {\n            throw new ArgumentNullException(nameof(students));\n        }\n    }\n    ```", "```cs\n    try\n    {\n        List<Chapter1.Student> StudentList = Chapter1.Recipe5NameofExpression.GetStudents();\n        Console.WriteLine($\"There are {Chapter1.Recipe5NameofExpression.StudentCount} students\");                \n    }\n    catch (Exception ex)\n    {\n        Console.WriteLine(ex.Message);\n    }\n    finally\n    {\n        Console.Read();\n    }\n    ```", "```cs\nList<Chapter1.Student> StudentList = Chapter1.Recipe5NameofExpression.GetStudents();\n\nint iStudentCount = Chapter1.Recipe5NameofExpression.StudentCount;\nConsole.WriteLine($\"The value of the { nameof(Chapter1.Recipe5NameofExpression.StudentCount)} property is {iStudentCount}\");\n```", "```cs\npublic enum Course { InformationTechnology = 1, Statistics = 2, AppliedSciences = 3 }\npublic static string SelectedCourse { get; set; }\npublic static void SetCourse(int iCourseID)\n{\n    Course course = (Course)iCourseID;\n    switch (course)\n    {\n        case Course.InformationTechnology:\n            SelectedCourse = nameof(Course.InformationTechnology);\n            break;\n        case Course.Statistics:\n            SelectedCourse = nameof(Course.InformationTechnology);\n            break;\n        case Course.AppliedSciences:\n            SelectedCourse = nameof(Course.InformationTechnology);\n            break;\n        default:\n            SelectedCourse = \"InvalidCourse\";\n           break;\n   }            \n}\n```", "```cs\nChapter1.Recipe5NameofExpression.SetCourse(1);\nConsole.WriteLine($\"The selected course is { Chapter1.Recipe5NameofExpression.SelectedCourse}\");\n```", "```cs\n    public static class Recipe6ExpressionBodiedFunctionMembers\n    {\n        private static int SaleDiscountPercent { get; } = 20;\n        private static decimal ShelfPrice { get; set; } = 100;\n    }\n    ```", "```cs\n    public static class ExtensionMethods\n    {\n        public static decimal CalculateSalePrice(this decimal shelfPrice, int discountPercent)\n        {\n            decimal discountValue = (shelfPrice / 100) * discountPercent;\n            return shelfPrice - discountValue;\n        }\n    }\n    ```", "```cs\n    private static decimal GetCalculatedSalePrice\n    {\n        get { return Math.Round(ShelfPrice.CalculateSalePrice(SaleDiscountPercen t) ,2); } \n    }\n    ```", "```cs\n    public static void SetShelfPrice(decimal shelfPrice)\n    {\n        ShelfPrice = shelfPrice;\n    }                \n\n    public static string ReturnMessage(string barCode)\n    {\n        return $\"The sale price for barcode {barCode} is {GetCalculatedSalePrice}\";\n    }\n    ```", "```cs\n    string BarCode = \"12345113\";\n    decimal ShelfPrice = 56.99m;\n    Chapter1.Recipe6ExpressionBodiedFunctionMembers.SetShelfPri ce(ShelfPrice);            Console.WriteLine(Chapter1.Recipe6ExpressionBodiedFunctionM embers.ReturnMessage(BarCode));\n    Console.Read();\n    ```", "```cs\npublic static class Recipe6ExpressionBodiedFunctionMembers\n{\n    private static int SaleDiscountPercent { get; } = 20;\n    private static decimal ShelfPrice { get; set; } = 100;\n\n    private static decimal GetCalculatedSalePrice => Math.Round(ShelfPrice.CalculateSalePrice(SaleDiscountPercent));\n\n    public static void SetShelfPrice(decimal shelfPrice) => ShelfPrice = shelfPrice;\n\n    public static string ReturnMessage(string barCode) => $\"The sale price for barcode {barCode} is {GetCalculatedSalePrice}\";        \n}\n```", "```cs\n    public static class Recipe7UsingStatic\n    {\n        public enum TheDayOfWeek\n        {\n            Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday\n        }\n\n        private static int SaleDiscountPercent { get; } = 20;\n        private static decimal ShelfPrice { get; set; } = 100;        \n    }\n    ```", "```cs\n    private static decimal GetCalculatedSalePrice\n    {\n        get { return Math.Round(ShelfPrice.CalculateSalePrice (SaleDiscountPercen t), 2); }\n    }        \n\n    public static void SetShelfPrice(decimal shelfPrice)\n    {\n        ShelfPrice = shelfPrice;\n    }\n\n    public static decimal GetSalePrice(TheDayOfWeek dayOfWeek)\n    {\n        return dayOfWeek == TheDayOfWeek.Friday ? GetCalculatedSalePrice : ShelfPrice;\n    }\n    ```", "```cs\n    decimal ShelfPrice = 56.99m;\n\n    Chapter1.Recipe7UsingStatic.TheDayOfWeek weekday = Chapter1.Recipe7UsingStatic.TheDayOfWeek.Friday;\n    Chapter1.Recipe7UsingStatic.SetShelfPrice(ShelfPrice);\n    Console.WriteLine(Chapter1.Recipe7UsingStatic.GetSalePrice( weekday));\n    Console.Read();\n    ```", "```cs\nprivate static decimal GetCalculatedSalePrice\n{\n    get { return Math.Round(ShelfPrice.CalculateSalePrice (SaleDiscountPercent), 2); }\n}\n```", "```cs\nusing static System.Math;\n```", "```cs\nprivate static decimal GetCalculatedSalePrice\n{\n    get { return Round(ShelfPrice.CalculateSalePrice(SaleDiscountPercent), 2); }\n}\n```", "```cs\nMath.Sqrt(64);\nMath.Tan(64);\nMath.Pow(8, 2);\n```", "```cs\nSqrt(64);\nTan(64);\nPow(8, 2);\n```", "```cs\nusing static Chapter1.Recipe7UsingStatic;\nusing static Chapter1.Recipe7UsingStatic.TheDayOfWeek;\nusing static System.Console;\n```", "```cs\nTheDayOfWeek weekday = Friday;\nSetShelfPrice(ShelfPrice);\nWriteLine(GetSalePrice(weekday));\nRead();\n```", "```cs\n    public static class Recipe8ExceptionFilters\n    {\n        public static void ReadXMLFile(string fileName)\n        {\n            try\n            {\n                bool blnReadFileFlag = true;\n                if (blnReadFileFlag)\n                {\n                    File.ReadAllLines(fileName);\n                }\n            }\n            catch (Exception ex)\n            {\n                Log(ex);\n                throw;\n            }\n        }\n\n        private static void Log(Exception e)\n        {\n            /* Log the error */            \n        }\n    }\n    ```", "```cs\n    string File = @\"c:\\temp\\XmlFile.xml\";\n    Chapter1.Recipe8ExceptionFilters.ReadXMLFile(File);\n    ```", "```cs\npublic static void ReadXMLFile(string fileName)\n{\n    try\n    {\n        bool blnReadFileFlag = true;\n        if (blnReadFileFlag)\n        {\n            File.ReadAllLines(fileName);\n        }\n    }\n    catch (Exception ex) when (Log(ex))\n    {\n\n    }\n}\n\nprivate static bool Log(Exception e)\n{\n    /* Log the error */\n    return false;\n}\n```", "```cs\ncatch (Exception ex) \n{\n\n}\ncatch (FileNotFoundException ex)\n{\n\n}\n```", "```cs\ncatch (Exception ex) when (Log(ex))\n{\n\n}\ncatch (FileNotFoundException ex)\n{\n\n}\n```", "```cs\npublic static void TryReadXMLFile(string fileName)\n{\n    bool blnFileRead = false;\n    do\n    {\n        int iTryCount = 0;\n        try\n        {\n            bool blnReadFileFlag = true;\n            if (blnReadFileFlag)                    \n                File.ReadAllLines(fileName);                    \n        }\n        catch (Exception ex) when (RetryRead(ex, iTryCount++) == true)\n        {\n\n        }                \n    } while (!blnFileRead);\n}\n\nprivate static bool RetryRead(Exception e, int tryCount)\n{\n    bool blnThrowEx = tryCount <= 10 ? blnThrowEx = false : blnThrowEx = true;\n    /* Log the error if blnThrowEx = false */\n    return blnThrowEx;\n}\n```", "```cs\n    public static class Recipe9AwaitInCatchFinally\n    {\n        public static void FileRunAsync()\n        {\n            string filePath = @\"c:\\temp\\XmlFile.xml\";\n            RemoveFileAcync(filePath);\n            ReadLine();\n        }\n    }\n    ```", "```cs\n    public static async void RemoveFileAcync(string filepath)\n    {\n        try\n        {\n            WriteLine(\"Read file\");\n            File.ReadAllLines(filepath);\n        }\n        catch (Exception ex)\n        {\n\n        }\n        finally\n        {        \n\n        }\n    }\n    ```", "```cs\n    WriteLine($\"Exception - wait 3 seconds {DateTime.Now.ToString(\"hh:MM:ss tt\")}\");\n    await Task.Delay(3000);\n    WriteLine($\"Exception - Print {DateTime.Now.ToString(\"hh:MM:ss tt\")}\");\n    WriteLine(ex.Message);\n    ```", "```cs\n    WriteLine($\"Finally - wait 3 seconds {DateTime.Now.ToString(\"hh:MM:ss tt\")}\");\n    await Task.Delay(3000);\n    WriteLine($\"Finally - completed {DateTime.Now.ToString(\"hh:MM:ss tt\")}\");\n    ```", "```cs\n    Chapter1.Recipe9AwaitInCatchFinally.FileRunAsync();\n    ```"]