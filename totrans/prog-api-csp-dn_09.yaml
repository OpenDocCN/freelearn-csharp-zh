- en: '9'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Authentication and Authorization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we reviewed a number of advanced API topics. In this
    chapter, you will learn how to add authentication (which answers questions such
    as “is this user who they say they are?”) and authorization (“is this user allowed
    to take this action?”). We will use the Azure function from [*Chapter 6*](B21998_06.xhtml#_idTextAnchor077)
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Differences between authentication and authorization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Definitions of authentication and authorization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A walkthrough of authentication – proving who you are
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A walkthrough of authorization – testing if you can take a specific action
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this chapter, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An Azure Account (you can get a free starter account at [https://azure.mcrosoft.com](https://azure.mcrosoft.com)
    )
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Note that much of this chapter relies on the code and action from [*Chapter
    6*](B21998_06.xhtml#_idTextAnchor077) . If you don’t have the code, you can download
    it from the repository: [https://github.com/PacktPublishing/Programming-APIs-with-C-Sharp-and-.NET/tree/main/Chapter06](https://github.com/PacktPublishing/Programming-APIs-with-C-Sharp-and-.NET/tree/main/Chapter06)'
  prefs: []
  type: TYPE_NORMAL
- en: The code for this chapter is available at [https://github.com/PacktPublishing/Programming-APIs-with-C-Sharp-and-.NET/tree/main/Chapter09](https://github.com/PacktPublishing/Programming-APIs-with-C-Sharp-and-.NET/tree/main/Chapter09)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to authentication and authorization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The vast majority of applications will need some form of **authentication and
    authorization** ( **A&A** ). Authentication is the process of proving who you
    are, while authorization is the process of determining whether you have permission
    to do what you are trying to do. Typically, you authenticate first, perhaps once
    per session, and then authorization is checked for each action you attempt.
  prefs: []
  type: TYPE_NORMAL
- en: There are many different types of A&A, but since we’re focusing mostly on Azure,
    we’ll use their built-in feature set colloquially known as **Easy Auth** .
  prefs: []
  type: TYPE_NORMAL
- en: Overview of A&A
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Though there are many kinds of A&A, including many nuances such as the authentication
    of services, users, and so on, we’ll focus on A&A for a single user in an Azure
    Tenant. That will usually be an employee during debugging (you!). This will then
    allow you to extend these concepts so that other services you create can be authorized
    in the same way.
  prefs: []
  type: TYPE_NORMAL
- en: Tenant
  prefs: []
  type: TYPE_NORMAL
- en: A tenant in Azure is a Guid that specifies all the content of a single organization.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling authentication on existing functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s begin by adding authentication to an existing Azure function. To do so,
    follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your Azure Function resource from [*Chapter 6*](B21998_06.xhtml#_idTextAnchor077)
    and navigate to the **Authentication** section, as shown in *Figure 9* *.1* .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.1 – Selecting Authentication](img/B21998_09_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.1 – Selecting Authentication
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Add Identity Provider** , and then select **Microsoft** . Use the following
    configuration options (they are almost all default):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Choose** **a tenant**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Workforce** **configuration** (default)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**App registration**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**App registration type** : **Create new app** **registration** (default)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Name** : The default is likely the name of your existing Function App resource;
    in this case, it is **Functions** .'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Client secret expiration** : **Recommended: 180** **days** (default)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Supported account types** : **Current tenant – Single** **tenant** (default)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Additional** **checks** (default)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Client application requirement** : **Allow requests only from this application**
    **itself** (default)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Identity requirement** : **Allow requests from any** **identity** (default)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tenant requirement** : **Allow requests only from the issuer tenant** (your
    tenant GUID goes here)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**App Service authentication** **settings** (default)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Restrict access** : **Require** **authentication** (default)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unauthenticated requests** : **HTTP 401 Unauthorized: recommended for** **APIs**
    (default)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Token** **Store** : **Checked**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: To put this all together, see *Figure 9* *.2* .
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.2 – Adding an identity provider](img/B21998_09_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.2 – Adding an identity provider
  prefs: []
  type: TYPE_NORMAL
- en: We can skip **Permissions** for now, so click **Add** .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be returned to your **Authentication** blade, showing your new Microsoft
    Identity provider.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the name of your Identity provider or navigate back to the main Azure
    portal. Click on **Microsoft Entra ID** , select **App registrations** , then
    your app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is your configuration area to manage various things about the app’s authentication.
    We’ll be editing this in a bit but try to run or navigate to your existing Function
    app’s HTTP trigger like you did in [*Chapter 6*](B21998_06.xhtml#_idTextAnchor077)
    . You should see that it now shows **401** **error (Unauthorized)** .
  prefs: []
  type: TYPE_NORMAL
- en: Next, we’ll authenticate to the new Identity Provider in two ways to give you
    an idea of different use cases.
  prefs: []
  type: TYPE_NORMAL
- en: Programmatically accessing your API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open your Function in Visual Studio from [*Chapter 6*](B21998_06.xhtml#_idTextAnchor077)
    . Right-click on the solution in **Solution Explorer** and click on **Add New
    Project... Add a .NET Console app** . Add the **Azure.Identity** NuGet package,
    and then create a **DefaultAzureCredential** instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many different credential classes that inherit from a **TokenCredential**
    base class implementing different use cases, but the **DefaultAzureCredential**
    tries a number of different credentials in order so that it can easily be used
    in several different scenarios. Use the following boilerplate code to securely
    call your Function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Try to run it now, and it should throw an error on **resp.EnsureSuccessStatusCode();**
    . This is because we have not told our API that you as a user (via Visual Studio’s
    helper authentication client) are allowed to make calls to your API.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a development environment, we can authorize the well-known client ID to
    the API. To do so, in the Azure Portal, navigate to your Function resource again:'
  prefs: []
  type: TYPE_NORMAL
- en: In the **Authentication** blade, click the pencil icon under the **Edit** heading.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Allow Requests From Specific Client Applications** if it isn’t already
    selected, and then add **04f0c124-f2bc-4f59-8241-bf6df9866bbd** . Click **OK**
    and then **Save** .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We’ll be doing this again later in this chapter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Go back to Visual Studio and run the console application again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The call to your API should now succeed and will print out the data you configured
    in your API’s Environment variables blade in [*Chapter 6*](B21998_06.xhtml#_idTextAnchor077)
    .
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we’ll try to use **ClientSecretCredential** . To do so, follow these
    instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the **Certificates & Secrets** blade in the app registration and
    click **New** **Client Secret** .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a description and expiration time, and click **Add** .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the value somewhere (e.g., Notepad), as you will not be able to access
    it again. Modify the code by adding a new **ClientSecretCredential** instance
    instead of the existing credentials you might already have. You’ll need the Tenant
    ID and Client ID available in the **Overview** blade:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The existing call to **GetTokenAsync** should work without changes. The rest
    of the code including the HTTP call itself should run successfully as is, and
    you should again see your configured API string.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: All of the preceding strings are available in the code from [*Chapter 6*](B21998_06.xhtml#_idTextAnchor077)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Authorizing additional Azure Resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You’ll almost certainly need additional Azure services to complement your cloud
    solution, so let’s try to authorize one to call your API. To do so, follow these
    instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the Azure portal, and then your existing Resource group. Create a new
    Logic app, and select **Consumption** for hosting.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give it a name and select the same **Region** that your other Resources are
    in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When it completes deployment, select the **Identity blade** , change the **Status**
    to **On** , and click **Save** and then **Yes** .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Logic app designer blade. Add a new HTTP trigger, enter your deployed
    Function URI (likely https://<my **resource name>.azurewebsites.net/api/Function1**
    ), and the **GET** method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Show All** for **Advanced parameters** and select **Managed Identity**
    under **Authentication Type** . It should resemble *Figure 9* *.3* .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.3 – Advanced Parameters](img/B21998_09_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.3 – Advanced Parameters
  prefs: []
  type: TYPE_NORMAL
- en: Click **Save** . Go back to the **Overview** blade and click **Run** .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Trigger history** tab and notice that it is red, indicating a
    failure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the failed trigger, and then click the **Outputs** link. It should
    show **403 error (Forbidden)** , indicating that the service authenticated you
    correctly, but you were not authorized.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To authorize this Logic app to call your Function API, we need to add its client
    ID to the list of authorized clients that can call your API.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Go back to **Azure Portal Home** and click on **Microsoft Entra ID** . Search
    for your Logic app’s name in the **Search Your Tenant** text box. It should have
    an entry under the **Enterprise** **Applications** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on that and then copy the GUID under **Application ID** .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.4 – Authorization](img/B21998_09_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.4 – Authorization
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Some of the fields in *Figure 9* *.4* have been obscured as a security measure.
  prefs: []
  type: TYPE_NORMAL
- en: Navigate back to your Function app. Find the **Authentication** blade, and then
    click on the pencil as we did before. Next, click the other pencil icon next to
    **Allowed client applications** , and add a new entry with the GUID you just copied,
    as shown in *Figure 9* *.5* .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.5 – Adding allowed client applications](img/B21998_09_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.5 – Adding allowed client applications
  prefs: []
  type: TYPE_NORMAL
- en: Click **OK** and then **Save** .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate back to the Logic app, and then click on **Run** | **Run** . This should
    immediately start another run of your Logic app calling your API.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Trigger history** tab on the **Overview** blade. You should see
    that the latest one has a green status, indicating success, as shown in *Figure
    9* *.6* .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.6 – Success!](img/B21998_09_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.6 – Success!
  prefs: []
  type: TYPE_NORMAL
- en: If the start time does not match up to what you are expecting, you may have
    to click **Refresh** at the top of the blade. Click the green success indicator
    and click on **Outputs** again. The **statusCode** should now be **200 (OK)**
    , and you should once again see the text you configured in the **Function Environment**
    variables blade.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned the difference between A&A. You then saw how to
    use the Azure controls to establish authentication and authorization for a specific
    Azure resource. In the next chapter, we will learn about **Continuous Integration
    and Continuous Deployment** ( **CI/CD** ) on Azure.
  prefs: []
  type: TYPE_NORMAL
- en: You try it
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the deployed function from [*Chapter 6*](B21998_06.xhtml#_idTextAnchor077)
    , authenticate yourself and give yourself authorization. Ensure this succeeds
    by creating a console app. Then create a Logic app and then authorize it to call
    your API.
  prefs: []
  type: TYPE_NORMAL
