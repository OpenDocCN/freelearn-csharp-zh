- en: '*Chapter 14*: Creating a Custom ActionFilter'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 14 章*：创建自定义操作过滤器'
- en: We will keep on customizing on the controller level in this chapter. We'll have
    a look into action filters and how to create your own `ActionFilter` class to
    keep your Actions small and readable.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将继续在控制器级别进行自定义。我们将探讨操作过滤器以及如何创建自己的 `ActionFilter` 类以保持操作小而可读。
- en: 'This chapter will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Introducing `ActionFilter`
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍 `ActionFilter`
- en: Using `ActionFilter`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `ActionFilter`
- en: 'The topics of this chapter belong to the **Model-View-Controller** (**MVC**)
    layer of the ASP.NET Core architecture, depicted here:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主题属于 ASP.NET Core 架构的 **模型-视图-控制器**（**MVC**）层，如图所示：
- en: '![Figure 14.1 – ASP.NET Core architecture](img/Figure_14.1_B17996.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.1 – ASP.NET Core 架构](img/Figure_14.1_B17996.jpg)'
- en: Figure 14.1 – ASP.NET Core architecture
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.1 – ASP.NET Core 架构
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow the exercises in this chapter, you will need to create an ASP.NET
    Core MVC application. Open your console, shell, or Bash terminal and change to
    your working directory. Use the following command to create a new MVC application:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本章的练习，您需要创建一个 ASP.NET Core MVC 应用程序。打开您的控制台、shell 或 Bash 终端，切换到您的工作目录。使用以下命令创建一个新的
    MVC 应用程序：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, open the project in Visual Studio by double-clicking the project file
    or in **Visual Studio Code** (**VS Code**) by typing the following command in
    the already open console:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过双击项目文件或在**Visual Studio Code**（**VS Code**）中在已打开的控制台中输入以下命令来在 Visual Studio
    中打开项目：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'All of the code samples in this chapter can be found in the GitHub repository
    for this book at: [https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter14](https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter14).'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的所有代码示例都可以在本书的 GitHub 仓库中找到：[https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter14](https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter14)。
- en: Introducing ActionFilter
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 `ActionFilter`
- en: 'Action filters are a little bit like middleware because they can manipulate
    the input and the output but are executed immediately on a specific action or
    on all actions of a specific controller on the MVC layer, and MiddleWare works
    directly on the request object on the hosting layer. An `ActionFilter` class is
    created to execute code right before or after an action is executed. They are
    introduced to execute aspects that are not part of the actual action logic: `AuthorizeAttribute`
    is used to allow users or groups to access specific Actions or Controllers. `AuthorizeAttribute`
    is an `ActionFilter`. It checks whether the logged-on user is authorized or not.
    If not, it redirects to the login page.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 操作过滤器有点像中间件，因为它们可以操作输入和输出，但它们会在 MVC 层上的特定操作或特定控制器上的所有操作上立即执行。中间件直接在托管层上的请求对象上工作。创建
    `ActionFilter` 类是为了在操作执行之前或之后执行代码。它们被引入来执行不属于实际操作逻辑的方面：`AuthorizeAttribute` 用于允许用户或组访问特定的操作或控制器。`AuthorizeAttribute`
    是一个 `ActionFilter`。它检查登录用户是否有权限。如果没有，则重定向到登录页面。
- en: Note
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you apply an `ActionFilter` globally, it executes on all actions in your
    application.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您全局应用 `ActionFilter`，它将在您的应用程序中的所有操作上执行。
- en: 'The next code sample shows the skeletons of a normal action filter and an async
    `ActionFilter`:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个代码示例显示了普通操作过滤器和异步 `ActionFilter` 的骨架：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As you can see here, there are always two methods to place code to execute
    before and after the target action is executed. These action filters cannot be
    used as attributes. If you want to use action filters as attributes in your Controllers,
    you need to derive them from `Attribute` or from `ActionFilterAttribute`, as shown
    in the following code snippet:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，始终有两种方法可以将代码放置在目标操作执行之前和之后。这些操作过滤器不能用作属性。如果您想在控制器中使用操作过滤器作为属性，您需要从 `Attribute`
    或从 `ActionFilterAttribute` 派生它们，如下面的代码片段所示：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The preceding code snippet shows a simple `ActionFilter` that always returns
    `BadRequestObjectResult` if `ModelState` is not valid. This may be useful within
    a web `POST`, `PUT`, and `PATCH` requests. This could be extended with a lot more
    validation logic. We'll see how to use it later on.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码片段显示了一个简单的 `ActionFilter`，如果 `ModelState` 无效，则始终返回 `BadRequestObjectResult`。这在
    Web 的 `POST`、`PUT` 和 `PATCH` 请求中可能很有用。这可以通过更多的验证逻辑进行扩展。我们将在稍后看到如何使用它。
- en: 'Another possible use case for an `ActionFilter` is logging. You don''t need
    to log in controller actions directly. You can do this in an action filter to
    keep your actions readable with relevant code, as illustrated in the following
    snippet:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`ActionFilter` 的另一个可能的用途是记录日志。你不需要直接在控制器操作中记录日志。你可以在动作过滤器中这样做，以保持你的操作可读性并包含相关代码，如下面的代码片段所示：'
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This logs an informational message out to the console. You can get more information
    about the current action out of `ActionExecutingContext` or `ActionExecutedContext`—for
    example, the arguments, the argument values, and so on. This makes action filters
    pretty useful.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这会在控制台输出一条信息性消息。你可以从 `ActionExecutingContext` 或 `ActionExecutedContext` 中获取更多关于当前操作的信息——例如，参数、参数值等。这使得动作过滤器非常有用。
- en: Let's see how action filters work in practice.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看动作过滤器在实际中是如何工作的。
- en: Using ActionFilter
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 ActionFilter
- en: 'Action filters that are actually attributes can be registered as an attribute
    of an Action or a Controller, as illustrated in the following code snippet:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上是属性的过滤器可以注册为操作或控制器的一个属性，如下面的代码片段所示：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here, we use `ValidateModel` attribute that checks the `ModelState` and returns
    `BadRequestObjectResult` in case the `ModelState` is invalid; we don't need to
    check the `ModelState` in the actual Action.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用 `ValidateModel` 属性来检查 `ModelState`，如果 `ModelState` 无效则返回 `BadRequestObjectResult`；我们不需要在实际操作中检查
    `ModelState`。
- en: 'To register action filters globally, you need to extend the MVC registration
    in the `ConfigureServices` method of the `Startup.cs` file, as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要全局注册动作过滤器，你需要扩展 `Startup.cs` 文件中的 `ConfigureServices` 方法中的 MVC 注册，如下所示：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Action filters registered like this will be executed on every action. This way,
    you are able to use action filters that don't derive from an attribute.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式注册的动作过滤器将在每个操作上执行。这样，你就可以使用不继承自属性的过滤器。
- en: The `LoggingActionFilter` we created previously is a little more special. It
    is dependent on an instance of `ILoggerFactory`, which needs to be passed into
    the constructor. This won't work well as an attribute, because `Attributes` don't
    support `ILoggerFactory` is registered in the ASP.NET Core DI container and needs
    to be injected into `LoggingActionFilter`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前创建的 `LoggingActionFilter` 稍微特殊一些。它依赖于 `ILoggerFactory` 的一个实例，这个实例需要传递给构造函数。因为它作为属性使用时不会很好地工作，因为
    `Attributes` 不支持 `ILoggerFactory` 在 ASP.NET Core 依赖注入容器中注册，并且需要将其注入到 `LoggingActionFilter`
    中。
- en: 'Because of this, there are some more ways to register action filters. Globally,
    we are able to register them as a type that gets instantiated by the DI container,
    and the dependencies can be solved by the container, as illustrated in the following
    code snippet:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个原因，还有更多注册动作过滤器的方法。全局上，我们能够将它们注册为依赖注入容器实例化的类型，并且依赖关系可以由容器解决，如下面的代码片段所示：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This works well. We now have `ILoggerFactory` in the filter.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这工作得很好。我们现在在过滤器中有 `ILoggerFactory`。
- en: 'To support automatic resolution in `Attributes`, you need to use the `ServiceFilter`
    attribute on the Controller or Action level, as illustrated here:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为了支持在 `Attributes` 中的自动解析，你需要在控制器或操作级别使用 `ServiceFilter` 属性，如下所示：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In addition to the global filter registration, `ActionFilter` needs to be registered
    in `ServiceCollection` before we can use it with `ServiceFilter` attribute, as
    follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 除了全局过滤器注册之外，`ActionFilter` 需要在使用 `ServiceFilter` 属性之前在 `ServiceCollection` 中注册，如下所示：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: To be complete, there is another way to use action filters that needs arguments
    passed into the constructor. You can use the `TypeFilter` attribute to automatically
    instantiate the filter. But using this attribute, the filter *isn't* instantiated
    by the DI container; the arguments need to be specified as arguments of the `TypeFilter`
    attribute.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完整，还有另一种使用动作过滤器的方法，它需要将参数传递给构造函数。你可以使用 `TypeFilter` 属性来自动实例化过滤器。但是，使用这个属性，过滤器**不是**由依赖注入容器实例化的；参数需要作为
    `TypeFilter` 属性的参数指定。
- en: 'See the next snippet from the official documentation:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅官方文档中的下一个代码片段：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The type of the filter and the arguments are specified with the `TypeFilter`
    attribute.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤器的类型和参数通过 `TypeFilter` 属性指定。
- en: Summary
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Action filters give us an easy way to keep actions clean. If we find repeating
    tasks inside our Actions that are not really relevant to the actual responsibility
    of the Action, we can move those tasks out to an `ActionFilter`, or maybe a `ModelBinder`
    or some MiddleWare, depending on how it needs to work globally. The more relevant
    it is to an Action, the more appropriate it is to use an `ActionFilter`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 动作过滤器为我们提供了一个简单的方式来保持动作的整洁。如果我们发现动作内部有重复的任务，而这些任务实际上并不与动作的实际责任相关，我们可以将这些任务移动到
    `ActionFilter` 中，或者可能是一个 `ModelBinder` 或某些 MiddleWare，具体取决于它需要如何全局工作。它与动作的相关性越强，使用
    `ActionFilter` 就越合适。
- en: There are more kinds of filters, all of which work in a similar fashion. To
    learn more about the different kinds of filters, reading the documentation is
    definitely recommended.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 有更多种类的过滤器，它们都以类似的方式工作。要了解更多关于不同种类的过滤器，阅读文档绝对是推荐的。
- en: In the next chapter, we speed up your web application by using caches.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过使用缓存来加速您的 Web 应用程序。
- en: Further reading
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Microsoft ASP.NET Core filters: [https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/filters](https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/filters)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微软 ASP.NET Core 过滤器：[https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/filters](https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/filters)
