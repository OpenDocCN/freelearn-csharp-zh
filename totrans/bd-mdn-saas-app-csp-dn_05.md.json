["```cs\n{\n    \"name\": \"Roger Waters\",\n    \"age\": 79,\n    \"isBassist\": true,\n    \"numbers\": [90, 80, 85, 95],\n    \"address\": {\n        \"street\": \"123 Main St\",\n        \"city\": \"A Town\",\n    }\n}\n```", "```cs\n[Index(nameof(Id), nameof(UserId))]\npublic class GoodHabit : IHasTenant\n{\n    public int Id { get; set; }\n    public string Name { get; set; } = default!;\n    public int UserId { get; set; }\n    public virtual User User { get; set; } = default!;\n    public virtual ICollection<Progress> ProgressUpdates {\n      get; set; } = default!;\n    public virtual ICollection<Reminder> Reminders { get;\n      set; } = default!;\n    public virtual Goal Goal { get; set; } = default!;\n    public Duration Duration { get; set; }\n    public string TenantName { get; set; } = default!;\n}\n```", "```cs\n    public class CreateHabitDto {\n        public string Name { get; set; }\n        public int UserId { get; set; }\n    }\n```", "```cs\n    public class GetGoodHabitDto {\n        public int Id { get; set; }\n        public string Name { get; set; }\n    }\n```", "```cs\n    public class GetGoodHabitDetailDto {\n        public int Id { get; set; }\n        public string Name { get; set; }\n        public string UserName { get; set; }\n        public string GoalName { get; set; }\n        public string Duration { get; set; }\n    }\n```", "```cs\npublic async Task<IActionResult> GetAsync(int id) => Ok(await _habitService.GetById(id));\n```", "```cs\npublic async Task<IActionResult> GetAsync() => Ok(await _habitService.GetAll());\n```", "```cs\npublic async Task<IActionResult> CreateAsync(CreateHabitDto request) => Ok(await _habitService.Create(request.Name, request.Description));\n```", "```cs\ncd GoodHabits.HabitService/Dtos; \\\ntouch HabitDetailDto.cs; \\\ntouch HabitDto.cs; \\\ntouch UpdateHabitDto.cs; \\\ncd ..;\n```", "```cs\nnamespace GoodHabits.HabitService.Dtos;\npublic class HabitDetailDto {\n    public int Id { get; set; }\n    public string Name { get; set; } = default!;\n    public string UserName { get; set; } = default!;\n    public string GoalName { get; set; } = default!;\n    public string Duration { get; set; } = default!;\n}\n```", "```cs\nnamespace GoodHabits.HabitService.Dtos;\npublic class HabitDto\n{\n    public int Id { get; set; } = default!;\n    public string Name { get; set; } = default!;\n    public string Description { get; set; } = default!;\n}\n```", "```cs\nnamespace GoodHabits.HabitService.Dtos;\npublic class UpdateHabitDto\n{\n    public string Name { get; set; } = default!;\n    public string Description { get; set; } = default!;\n}\n```", "```cs\ndotnet add package AutoMapper.Extensions.Microsoft.DependencyInjection\n```", "```cs\nnamespace GoodHabits.HabitService.Dtos;\npublic class HabitDto\n{\n    public int Id { get; set; } = default!;\n    public string Name { get; set; } = default!;\n    public string Description { get; set; } = default!;\n}\n```", "```cs\nbuilder.Services.AddAutoMapper(AppDomain.CurrentDomain.GetAssemblies());\n```", "```cs\nprivate readonly IMapper _mapper;\n```", "```cs\nusing AutoMapper;\n```", "```cs\n    public HabitsController(\n        ILogger<HabitsController> logger,\n        IHabitService goodHabitsService,\n        IMapper mapper\n        )\n    {\n        _logger = logger;\n        _habitService = goodHabitsService;\n        _mapper = mapper;\n    }\n```", "```cs\n    [HttpGet(\"{id}\")]\n    public async Task<IActionResult> GetAsync(int id) =>\n      Ok(_mapper.Map<HabitDto>(await\n      _habitService.GetById(id)));\n    [HttpGet]\n    public async Task<IActionResult> GetAsync() =>\n      Ok(_mapper.Map<ICollection<HabitDto>>(await\n      _habitService.GetAll()));\n```", "```cs\nmkdir Mappers; \\\ncd Mappers; \\\ntouch HabitMapper.cs; \\\ncd ..;\n```", "```cs\nusing AutoMapper;\nusing GoodHabits.HabitService.Dtos;\nusing GoodHabits.Database.Entities;\nnamespace GoodHabits.HabitService.Mappers;\npublic class HabitMapper : Profile\n{\n    public HabitMapper()\n    {\n        CreateMap<Habit, HabitDto>();\n    }\n}\n```", "```cs\nusing GoodHabits.Database.Entities;\nusing GoodHabits.HabitService.Dtos;\nnamespace GoodHabits.HabitService;\npublic interface IHabitService\n{\nTask<Habit> Create(string name, string description);\nTask<Habit> GetById(int id);\nTask<IReadOnlyList<Habit>> GetAll();\nTask DeleteById(int id);\nTask<Habit?> UpdateById(int id, UpdateHabitDto request);\n}\n```", "```cs\n    public async Task DeleteById(int id)\n    {\n        var habit = await _dbContext.Habits!.FindAsync(id)\n          ?? throw new ArgumentException(\"User not found\");\n        _dbContext.Habits.Remove(habit);\n        await _dbContext.SaveChangesAsync();\n    }\n    public async Task<Habit?> UpdateById(int id,\n      UpdateHabitDto request)\n    {\n        var habit = await _dbContext.Habits!.FindAsync(id);\n        if (habit == null) return null;\n        habit.Name = request.Name;\n        habit.Description = request.Description;\n        await _dbContext.SaveChangesAsync();\n        return habit;\n    }\n```", "```cs\nusing GoodHabits.HabitService.Dtos;\n```", "```cs\n    [HttpDelete(\"{id}\")]\n    public async Task<IActionResult> DeleteAsync(int id)\n    {\n        await _habitService.DeleteById(id);\n        return NoContent();\n    }\n```", "```cs\n    [HttpPut(\"{id}\")]\n    public async Task<IActionResult> UpdateAsync(int id,\n      UpdateHabitDto request)\n    {\n        var habit = await _habitService.UpdateById(id,\n          request);\n        if (habit == null)\n        {\n            return NotFound();\n        }\n        return Ok(habit);\n    }\n```", "```cs\n    [HttpPatch(\"{id}\")]\n    public async Task<IActionResult> UpdateAsync(int id,\n      [FromBody] JsonPatchDocument<UpdateHabitDto> patch)\n    {\n        var habit = await _goodHabitsService.GetById(id);\n        if (habit == null) return NotFound();\n        var updateHabitDto = new UpdateHabitDto { Name =\n          habit.Name, Description = habit.Description };\n        try\n        {\n            patch.ApplyTo(updateHabitDto, ModelState);\n            if (!TryValidateModel(updateHabitDto)) return\n              ValidationProblem(ModelState);\n            await _goodHabitsService.UpdateById(id,\n              updateHabitDto);\n            return NoContent();\n        }\n        catch (JsonPatchException ex)\n        {\n            return BadRequest(new { error = ex.Message });\n        }\n    }\n```", "```cs\nusing Microsoft.AspNetCore.JsonPatch;\nusing Microsoft.AspNetCore.JsonPatch.Exceptions;\n```", "```cs\ndotnet run\n```", "```cs\n[\n    {\n        \"op\": \"replace\",\n        \"path\": \"/Name\",\n        \"value\": \"A New Name\"\n    }\n]\n```", "```cs\n    [HttpGet(\"{id}\")]\n    public async Task<IActionResult> GetAsync(int id)\n    {\n        var habit = await _habitService.GetById(id);\n        if (habit == null) return NotFound();\n        return Ok(_mapper.Map<HabitDto>(await\n          _habitService.GetById(id)));\n    }\n```", "```cs\n    [HttpPost]\n    public async Task<IActionResult>\n      CreateAsync(CreateHabitDto request)\n    {\n        var habit = await _habitService\n          .Create(request.Name, request.Description);\n        var habitDto = _mapper.Map<HabitDto>(habit);\n       return CreatedAtAction(\"Get\", \"Habits\", new { id =\n         habitDto.Id }, habitDto);\n    }\n```", "```cs\nhttps://api.example.com/v1/resources\n```", "```cs\nhttps://api.example.com/v2/resources\n```", "```cs\nhttp://localhost:5100/api/habits\n```", "```cs\ndotnet add package Microsoft.AspNetCore.Mvc.Versioning\n```", "```cs\nusing Microsoft.AspNetCore.Mvc.Versioning;\n```", "```cs\nbuilder.Services.AddApiVersioning(opt =>\n    {\n        opt.DefaultApiVersion = new\n          Microsoft.AspNetCore.Mvc.ApiVersion(1,0);\n        opt.AssumeDefaultVersionWhenUnspecified = true;\n        opt.ReportApiVersions = true;\n        opt.ApiVersionReader = ApiVersionReader.Combine(new\n          UrlSegmentApiVersionReader(),\n          new HeaderApiVersionReader(\"x-api-version\"),\n          new MediaTypeApiVersionReader(\"x-api-version\"));\n    });\n```", "```cs\n[ApiController]\n[Route(\"api/[controller]\")]\n[Route(\"api/v{version:apiVersion}/[controller]\")]\n[ApiVersion(\"1.0\")]\n```", "```cs\n    [MapToApiVersion(\"1.0\")]\n    [HttpGet(\"version\")]\n    public virtual async Task<IActionResult> GetVersion()\n    {\n        return Ok(\"Response from version 1.0\");\n    }\n```", "```cs\nusing Microsoft.AspNetCore.Mvc;\nnamespace GoodHabits.HabitService.Controllers.v2;\n[ApiController]\n[Route(\"api/[controller]\")]\n[Route(\"api/v{version:apiVersion}/[controller]\")]\n[ApiVersion(\"2.0\")]\npublic class HabitsController : ControllerBase\n{\n    [MapToApiVersion(\"2.0\")]\n    [HttpGet(\"version\")]\n    public virtual IActionResult GetVersion()\n    {\n        return Ok(\"Response from version 2.0\");\n    }\n}\n```"]