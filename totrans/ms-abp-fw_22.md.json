["```cs\npublic class EventUrlHelper_Tests\n{\n    [Fact]\n    public void Should_Convert_Title_To_Proper_Urls()\n    {\n        var url = EventUrlHelper.ConvertTitleToUrlPart(\n                  \"Introducing ABP Framework!\");\n        Assert.Equal(\"introducing-abp-framework\", url);\n    }\n}\n```", "```cs\npublic class EventUrlHelper_Tests\n{\n    [Theory]\n    [InlineData(\"Introducing ABP Framework!\",\n                \"introducing-abp-framework\")]\n    [InlineData(\"Blazor: UI Messages\", \n                \"blazor-ui-messages\")]\n    [InlineData(\"What's new in .NET 6\", \n                \"whats-new-in-net-6\")]\n    public void Should_Convert_Title_To_Proper_Urls(\n        string title, string url)\n    {\n        var result = \n            EventUrlHelper.ConvertTitleToUrlPart(title);\n        result.ShouldBe(url);\n    }\n}\n```", "```cs\npublic class Event_Tests\n{\n    [Fact]\n    public void Should_Create_A_Valid_Event()\n    {\n        new Event(\n            Guid.NewGuid(),\n            Guid.NewGuid(),\n            \"1a8j3v0d\",\n            \"Introduction to the ABP Framework\",\n            DateTime.Now,\n            DateTime.Now.AddHours(2),\n            \"In this event, we will introduce the ABP \n             Framework...\"\n        );\n    }\n}\n```", "```cs\n[Fact]\npublic void \n    Should_Not_Allow_End_Time_Earlier_Than_Start_Time()\n{\n    var exception = Assert.Throws<BusinessException>(() =>\n    {\n        new Event(\n            Guid.NewGuid(),\n            Guid.NewGuid(),\n            \"1a8j3v0d\",\n            \"Introduction to the ABP Framework\",\n            DateTime.Now, // Start time\n            DateTime.Now.AddDays(-2), // End time\n            \"In this event, we will introduce the ABP\n             Framework...\"\n        );\n    });\n    exception.Code.ShouldBe(EventHubErrorCodes\n        .EventEndTimeCantBeEarlierThanStartTime);\n}\n```", "```cs\n[Fact]\npublic void Should_Update_Event_Time()\n{\n    // ARRANGE\n    var evnt = new Event(\n        Guid.NewGuid(),\n        Guid.NewGuid(),\n        \"1a8j3v0d\",\n        \"Introduction to the ABP Framework\",\n        DateTime.Now,\n        DateTime.Now.AddHours(2),\n        \"In this event, we will introduce the ABP\n         Framework...\"\n    );\n    var newStartTime = DateTime.Now.AddHours(1);\n    var newEndTime = DateTime.Now.AddHours(2);\n    //ACT\n    evnt.SetTime(newStartTime, newEndTime);\n    //ASSERT\n    evnt.StartTime.ShouldBe(newStartTime);\n    evnt.EndTime.ShouldBe(newEndTime);\n    evnt.GetLocalEvents()\n        .ShouldContain(x => x.EventData\n                       is EventTimeChangingEventData);\n}\n```", "```cs\npublic class EventRegistrationManager : IDomainService\n{\n    ...\n    public EventRegistrationManager(\n        IEventRegistrationRepository \n            eventRegistrationRepository,\n        IGuidGenerator guidGenerator,\n        IClock clock)\n    {\n        _eventRegistrationRepository = \n            eventRegistrationRepository;\n        _guidGenerator = guidGenerator;\n        _clock = clock;\n    }\n    public bool IsPastEvent(Event @event)\n    {\n        return _clock.Now > @event.EndTime;\n    }\n}\n```", "```cs\npublic class EventRegistrationManager_UnitTests\n{\n    [Fact]\n    public void IsPastEvent()\n    {\n        var clock = Substitute.For<IClock>();\n        clock.Now.Returns(DateTime.Now);\n        var registrationManager = new \n            EventRegistrationManager(null, null, clock\n        );\n        var evnt = new Event(\n            Guid.NewGuid(),\n            Guid.NewGuid(),\n            \"1a8j3v0d\",\n            \"Introduction to the ABP Framework\",\n            DateTime.Now.AddDays(-10), // Start time\n            DateTime.Now.AddDays(-9), // End time\n            \"In this event, we will introduce the ABP\n             Framework...\"\n        );\n        registrationManager.IsPastEvent(evnt)\n            .ShouldBeTrue();\n    }\n}\n```", "```cs\n[Fact]\npublic async Task \n    Valid_Registrations_Should_Be_Inserted_To_Db()\n{\n    var evnt = new Event(/* some valid arguments */);\n    var user = new IdentityUser(/* some valid arguments \n                                */);\n    var repository =\n        Substitute.For<IEventRegistrationRepository>();\n    repository\n        .ExistsAsync(evnt.Id, user.Id)\n        .Returns(Task.FromResult(false));\n    var clock = Substitute.For<IClock>();\n    clock.Now.Returns(DateTime.Now);\n    var guidGenerator = SimpleGuidGenerator.Instance;\n    var registrationManager = new EventRegistrationManager(\n        repository, guidGenerator, clock\n    );\n    await registrationManager.RegisterAsync(evnt, user);\n    await repository\n        .Received()\n        .InsertAsync(\n            Arg.Is<EventRegistration>(\n            er => er.EventId == evnt.Id && er.UserId == \n                user.Id)\n    );\n}\n```", "```cs\npublic class SampleTestClass\n    : AbpIntegratedTest<MyTestModule>\n{\n    private IMyService _myService;\n    public SampleTestClass()\n    {\n        _myService = GetRequiredService<IMyService>();\n    }\n\n    [Fact]\n    public async Task TestMethod()\n    {\n        await _myService.DoItAsync();\n    }\n}\n```", "```cs\n[DependsOn(typeof(AbpTestBaseModule))]\npublic class MyTestModule : AbpModule\n{\n}\n```", "```cs\npublic class EventRegistrationRepository_Tests\n    : EventHubDomainTestBase\n{\n    private readonly IEventRegistrationRepository \n        _repository;\n    private readonly EventHubTestData _testData;\n    public EventRegistrationRepository_Tests()\n    {\n        _repository = GetRequiredService<\n                      IEventRegistrationRepository>();\n        _testData = GetRequiredService<EventHubTestData>();\n    }\n    // TODO: Test methods come here...\n}\n```", "```cs\n[Fact]\npublic async Task\n    Exists_Should_Return_False_If_Not_Registered()\n{\n    var exists = await _repository.ExistsAsync(\n        _testData.AbpMicroservicesFutureEventId, \n        _testData.UserJohnId);\n    exists.ShouldBeFalse();\n}\n```", "```cs\n[Fact]\npublic async Task Exists_Should_Return_True_If_Registered()\n{\n    await _repository.InsertAsync(\n        new EventRegistration(\n            Guid.NewGuid(),\n            _testData.AbpMicroservicesFutureEventId,\n            _testData.UserJohnId));\n\n    var exists = await _repository.ExistsAsync(\n        _testData.AbpMicroservicesFutureEventId, \n        _testData.UserJohnId);\n    exists.ShouldBeTrue();\n}\n```", "```cs\n[Fact]\npublic async Task Test_Querying()\n{\n    var queryable = await _repository.GetQueryableAsync();\n    var exists = await queryable.Where(\n        x => x.EventId ==\n             _testData.AbpMicroservicesFutureEventId &&\n             x.UserId == _testData.UserJohnId\n        ).FirstOrDefaultAsync();\n    exists.ShouldBeNull();\n}\n```", "```cs\n[Fact]\npublic async Task Test_Querying_With_Uow()\n{\n    await WithUnitOfWorkAsync(async () =>\n    {\n        var queryable = \n            await _repository.GetQueryableAsync();\n        var exists = await queryable.Where(\n            x => x.EventId ==\n                 _testData.AbpMicroservicesFutureEventId &&\n                 x.UserId == _testData.UserJohnId\n        ).FirstOrDefaultAsync();\n        exists.ShouldBeNull();\n    });\n}\n```", "```cs\n[Fact]\npublic async Task Should_Update_The_Event_Capacity()\n{\n    const int newCapacity = 42;\n    await WithUnitOfWorkAsync(async () =>\n    {\n        var @event = await _eventRepository.GetAsync(\n            _testData.AbpMicroservicesFutureEventId);\n        await _eventManager.SetCapacityAsync(\n            @event,\n            newCapacity\n        );\n    });\n\n    var @event = await _eventRepository.GetAsync(\n        _testData.AbpMicroservicesFutureEventId);\n    @event.Capacity.ShouldBe(newCapacity);\n}\n```", "```cs\n[Fact]\npublic async Task Should_Register_To_An_Event()\n{\n    Login(_testData.UserAdminId);\n    await _eventRegistrationAppService.RegisterAsync(\n        _testData.AbpMicroservicesFutureEventId\n    );\n    var registration = await GetRegistrationOrNull(\n        _testData.AbpMicroservicesFutureEventId,\n        _currentUser.GetId()\n    );    \n    registration.ShouldNotBeNull();\n}\n```", "```cs\nprivate void Login(Guid userId)\n{\n    _currentUser.Id.Returns(userId);\n    _currentUser.IsAuthenticated.Returns(true);\n}\n```", "```cs\nprotected override void AfterAddApplication(\n    IServiceCollection services)\n{\n    _currentUser = Substitute.For<ICurrentUser>();\n    services.AddSingleton(_currentUser);\n}\n```", "```cs\nprivate async Task<EventRegistration>\n    GetRegistrationOrNull(Guid eventId, Guid userId)\n{\n    return await WithUnitOfWorkAsync(async () =>\n    {\n        return await _eventRegistrationRepository\n           .FirstOrDefaultAsync(\n                x => x.EventId == eventId && x.UserId == \n                    userId\n        );\n    });\n}\n```"]