["```cs\nnamespace CompositionRoot.ControlFreak;\npublic class Consumer\n{\n    public void Do()\n    {\n        var dependency = new Dependency();\n        dependency.Operation();\n    }\n}\npublic class Dependency\n{\n    public void Operation()\n        => throw new NotImplementedException();\n}\n```", "```cs\npublic class Consumer\n{\n    private readonly Dependency _dependency;\n    public DIEnabledConsumer(Dependency dependency)\n    {\n        _dependency = dependency;\n    }\n    public void Do()\n    {\n        _dependency.Operation();\n    }\n}\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\n// Register dependencies\nvar app = builder.Build();\n// The IoC container is now available\napp.Run();\n```", "```cs\nbuilder.Services.AddSingleton<Dependency1>();\nbuilder.Services.AddSingleton<Dependency2>();\nbuilder.Services.AddSingleton<Dependency3>();\n```", "```cs\nnamespace CompositionRoot.DemoFeature;\npublic class MyFeature\n{\n    private readonly IMyFeatureDependency _myFeatureDependency;\n    public MyFeature(IMyFeatureDependency myFeatureDependency)\n    {\n        _myFeatureDependency = myFeatureDependency;\n    }\n    public void Operation()\n    {\n        // use _myFeatureDependency\n    }\n}\npublic interface IMyFeatureDependency { }\npublic class MyFeatureDependency : IMyFeatureDependency { }\n```", "```cs\nbuilder.Services.AddSingleton<MyFeature>();\nbuilder.Services.AddSingleton<IMyFeatureDependency, MyFeatureDependency>();\n```", "```cs\nbuilder.Services\n    .AddSingleton<MyFeature>()\n    .AddSingleton<IMyFeatureDependency, MyFeatureDependency>()\n;\n```", "```cs\nbuilder.Services.AddDemoFeature();\n```", "```cs\nusing CompositionRoot.DemoFeature;\nnamespace Microsoft.Extensions.DependencyInjection;\npublic static class DemoFeatureExtensions\n{\n    public static IServiceCollection AddDemoFeature(this IServiceCollection services)\n    {\n        return services\n            .AddSingleton<MyFeature>()\n            .AddSingleton<IMyFeatureDependency, MyFeatureDependency>()\n        ;\n    }\n}\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Host.UseServiceProviderFactory<ContainerBuilder>(new ContainerBuilderFactory());\n```", "```cs\nbuilder.Host.ConfigureContainer<ContainerBuilder>((context, builder) =>\n{\n    builder.Services.AddSingleton<Dependency1>();\n    builder.Services.AddSingleton<Dependency2>();\n    builder.Services.AddSingleton<Dependency3>();\n});\n```", "```cs\nnamespace CompositionRoot.ManualMethodInjection;\npublic class Subject\n{\n    public int Operation(Context context)\n    {\n        // ...\n        return context.Number;\n    }\n}\npublic class Context\n{\n    public required int Number { get; init; }\n}\n```", "```cs\n[Fact]\npublic void Should_return_the_value_of_the_Context_Number_property()\n{\n    // Arrange\n    var subject = new Subject();\n    var context = new Context { Number = 44 };\n    // Act\n    var result = subject.Operation(context);\n    // Assert\n    Assert.Equal(44, result);\n}\n```", "```cs\n[Theory]\n[MemberData(nameof(GetData))]\npublic void Showcase_manual_method_injection(\n    Subject subject, Context context, int expectedNumber)\n{\n    // Manually injecting the context into the\n    // Operation method of the subject.\n    var number = subject.Operation(context);\n    // Validate that we got the specified context.\n    Assert.Equal(expectedNumber, number);\n}\n```", "```cs\nnamespace Strategy.Models;\npublic record class Location(int Id, string Name, string CountryCode);\n```", "```cs\nnamespace Strategy.Controllers;\npublic record class LocationSummary(int Id, string Name);\n```", "```cs\nusing Strategy.Models;\nnamespace Strategy.Services;\npublic interface ILocationService\n{\n    Task<IEnumerable<Location>> FetchAllAsync(CancellationToken cancellationToken);\n}\n```", "```cs\nusing Strategy.Models;\nnamespace Strategy.Services;\npublic class InMemoryLocationService : ILocationService\n{\n    public async Task<IEnumerable<Location>> FetchAllAsync(CancellationToken cancellationToken)\n    {\n        await Task.Delay(Random.Shared.Next(1, 100), cancellationToken);\n        return new Location[] {\n            new Location(1, \"Paris\", \"FR\"),\n            new Location(2, \"New York City\", \"US\"),\n            new Location(3, \"Tokyo\", \"JP\"),\n            new Location(4, \"Rome\", \"IT\"),\n            new Location(5, \"Sydney\", \"AU\"),\n            new Location(6, \"Cape Town\", \"ZA\"),\n            new Location(7, \"Istanbul\", \"TR\"),\n            new Location(8, \"Bangkok\", \"TH\"),\n            new Location(9, \"Rio de Janeiro\", \"BR\"),\n            new Location(10, \"Toronto\", \"CA\"),\n        };\n    }\n}\n```", "```cs\nusing Strategy.Data;\nusing Strategy.Models;\nnamespace Strategy.Services;\npublic class SqlLocationService : ILocationService\n{\n    private readonly IDatabase _database;\n    public SqlLocationService(IDatabase database) {\n        _database = database;\n    }\n    public Task<IEnumerable<Location>> FetchAllAsync(CancellationToken cancellationToken) {\n        return _database.ReadManyAsync<Location>(\n            \"SELECT * FROM Location\",\n            cancellationToken\n        );\n    }\n}\n```", "```cs\nnamespace Strategy.Data;\npublic interface IDatabase\n{\n    Task<IEnumerable<T>> ReadManyAsync<T>(string sql, CancellationToken cancellationToken);\n}\n```", "```cs\nnamespace Strategy.Data;\npublic class NotImplementedDatabase : IDatabase\n{\n    public Task<IEnumerable<T>> ReadManyAsync<T>(string sql, CancellationToken cancellationToken)\n        => throw new NotImplementedException();\n}\n```", "```cs\nusing Microsoft.AspNetCore.Mvc;\nusing Strategy.Services;\nnamespace Strategy.Controllers;\n[Route(\"travel/[controller]\")]\n[ApiController]\npublic class ControlFreakLocationsController : ControllerBase\n{\n    [HttpGet]\n    public async Task<IEnumerable<LocationSummary>> GetAsync(CancellationToken cancellationToken)\n    {\n        var locationService = new InMemoryLocationService();\n        var locations = await locationService\n            .FetchAllAsync(cancellationToken);\n        return locations\n            .Select(l => new LocationSummary(l.Id, l.Name));\n    }\n}\n```", "```cs\npublic class ControlFreakUpdatedLocationsController : ControllerBase\n{\n    [HttpGet]\n    public async Task<IEnumerable<LocationSummary>> GetAsync(CancellationToken cancellationToken)\n    {\n        var database = new NotImplementedDatabase();\n        var locationService = new SqlLocationService(database);\n        var locations = await locationService.FetchAllAsync(cancellationToken);\n        return locations.Select(l => new LocationSummary(l.Id, l.Name));\n    }\n}\n```", "```cs\nusing Microsoft.AspNetCore.Mvc;\nusing Strategy.Services;\nnamespace Strategy.Controllers;\n[Route(\"travel/[controller]\")]\n[ApiController]\npublic class InjectImplementationLocationsController : ControllerBase\n{\n    private readonly InMemoryLocationService _locationService;\n    public InjectImplementationLocationsController(\n        InMemoryLocationService locationService)\n    {\n        _locationService = locationService;\n    }\n    [HttpGet]\n    public async Task<IEnumerable<LocationSummary>> GetAsync(CancellationToken cancellationToken)\n    {\n        var locations = await _locationService.FetchAllAsync(cancellationToken);\n        return locations.Select(l => new LocationSummary(l.Id, l.Name));\n    }\n}\n```", "```cs\nbuilder.Services.AddSingleton<InMemoryLocationService>();\n```", "```cs\npublic class InjectImplementationUpdatedLocationsController : ControllerBase\n{\n    private readonly SqlLocationService _locationService;\n    public InjectImplementationUpdatedLocationsController(SqlLocationService locationService)\n    {\n        _locationService = locationService;\n    }\n    // ...\n}\n```", "```cs\nusing Microsoft.AspNetCore.Mvc;\nusing Strategy.Services;\nnamespace Strategy.Controllers;\n[Route(\"travel/[controller]\")]\n[ApiController]\npublic class InjectAbstractionLocationsController : ControllerBase\n{\n    private readonly ILocationService _locationService;\n    public InjectAbstractionLocationsController(ILocationService locationService)\n    {\n        _locationService = locationService;\n    }\n    [HttpGet]\n    public async Task<IEnumerable<LocationSummary>> GetAsync(CancellationToken cancellationToken)\n    {\n        var locations = await _locationService.FetchAllAsync(cancellationToken);\n        return locations.Select(l => new LocationSummary(l.Id, l.Name));\n    }\n}\n```", "```cs\npublic static Location ExpectedLocation { get; }\n    = new Location(11, \"Montr√©al\", \"CA\");\n```", "```cs\nvar databaseMock = new Mock<IDatabase>();\ndatabaseMock.Setup(x => x.ReadManyAsync<Location>(It.IsAny<string>(), It.IsAny<CancellationToken>()))\n    .ReturnsAsync(() => new Location[] { ExpectedLocation })\n;\nvar sqlLocationService = new SqlLocationService(\n    databaseMock.Object);\nvar sqlController = new InjectAbstractionLocationsController(\n    sqlLocationService);\n```", "```cs\nvar result = await sqlController.GetAsync(CancellationToken.None);\n```", "```cs\nAssert.Collection(result,\n    location =>\n    {\n        Assert.Equal(ExpectedLocation.Id, location.Id);\n        Assert.Equal(ExpectedLocation.Name, location.Name);\n    }\n);\n```", "```cs\ndatabaseMock.Verify(x => x\n    .ReadManyAsync<Location>(\n        It.IsAny<string>(),\n        It.IsAny<CancellationToken>()\n    ),\n    Times.Once()\n);\n```", "```cs\nvar inMemoryLocationService = new InMemoryLocationService();\nvar devController = new InjectAbstractionLocationsController(\n    inMemoryLocationService);\n```", "```cs\nvar locationServiceMock = new Mock<ILocationService>();\nlocationServiceMock.Setup(x => x.FetchAllAsync(It.IsAny<CancellationToken>())).ReturnsAsync(() => new Location[] { ExpectedLocation });\nvar testController = new InjectAbstractionLocationsController(\n    locationServiceMock.Object);\n```", "```cs\nAssert.Collection(result,\n    location =>\n    {\n        Assert.Equal(ExpectedLocation.Id, location.Id);\n        Assert.Equal(ExpectedLocation.Name, location.Name);\n    }\n);\n```", "```cs\nlocationServiceMock.Verify(x => x\n    .FetchAllAsync(It.IsAny<CancellationToken>()),\n    Times.Once()\n);\n```", "```cs\n_locationService = locationService;\n```", "```cs\n_locationService = locationService ?? throw new ArgumentNullException(nameof(locationService));\n```", "```cs\nArgumentNullException.ThrowIfNull(locationService);\n```", "```cs\npublic interface IApplicationState\n{\n    TItem? Get<TItem>(string key);\n    bool Has<TItem>(string key);\n    void Set<TItem>(string key, TItem value) where TItem : notnull;\n} \n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\n#if USE_MEMORY_CACHE\n        builder.Services.AddMemoryCache();\n        builder.Services.AddSingleton<IApplicationState, ApplicationMemoryCache>();\n#else\n        builder.Services.AddSingleton<IApplicationState,\nApplicationDictionary>();\n#endif\nvar app = builder.Build();\napp.MapGet(\"/\", (IApplicationState myAppState, string key) =>\n{\n    var value = myAppState.Get<string>(key);\n    return $\"{key} = {value ?? \"null\"}\";\n});\napp.MapPost(\"/\", (IApplicationState myAppState, SetAppState dto) =>\n{\n    myAppState.Set(dto.Key, dto.Value);\n    return $\"{dto.Key} = {dto.Value}\";\n});\napp.Run();\npublic record class SetAppState(string Key, string Value);\n```", "```cs\npublic class ApplicationMemoryCache : IApplicationState\n{\n    private readonly IMemoryCache _memoryCache;\n    public ApplicationMemoryCache(IMemoryCache memoryCache)\n    {\n        _memoryCache = memoryCache ?? throw new ArgumentNullException(nameof(memoryCache));\n    }\n    public TItem Get<TItem>(string key)\n    {\n        return _memoryCache.Get<TItem>(key);\n    }\n    public bool Has<TItem>(string key)\n    {\n        return _memoryCache.TryGetValue<TItem>(key, out _);\n    }\n    public void Set<TItem>(string key, TItem value)\n    {\n        _memoryCache.Set(key, value);\n    }\n}\n```", "```cs\nusing System.Collections.Concurrent;\nnamespace ApplicationState;\npublic class ApplicationDictionary : IApplicationState\n{\n    private readonly ConcurrentDictionary<string, object> _memoryCache = new();\n    public TItem? Get<TItem>(string key)\n    {\n        return _memoryCache.TryGetValue(key, out var item)\n            ? (TItem)item\n            : default;\n    }\n    public bool Has<TItem>(string key)\n    {\n        return _memoryCache.TryGetValue(key, out var item) && item is TItem;\n    }\n    public void Set<TItem>(string key, TItem value)\n        where TItem : notnull\n    {\n        _memoryCache.AddOrUpdate(key, value, (k, v) => value);\n    }\n}\n```", "```cs\nnamespace ApplicationState;\npublic class SomeConsumer\n{\n    private readonly IApplicationState _myApplicationWideService;\n    public SomeConsumer(IapplicationState myApplicationWideService)\n    {\n        _myApplicationWideService = myApplicationWideService ?? throw new ArgumentNullException(nameof(myApplicationWideService));\n    }\n    public void Execute()\n    {\n        if (_myApplicationWideService.Has<string>(\"some-key\"))\n        {\n            var someValue = _myApplicationWideService.Get<string>(\"some-key\");\n            // Do something with someValue\n        }\n        // Do something else like:\n        _myApplicationWideService.Set(\"some-key\", \"some-value\");\n        // More logic here\n    }\n}\n```", "```cs\n// Arrange\nvar sp = new ServiceCollection()\n    .AddSingleton<IApplicationState, ApplicationDictionary>()\n    .BuildServiceProvider()\n;\n// Step 1: Consumer A sets a string\nvar consumerA = sp.GetRequiredService<IApplicationState>();\nconsumerA.Set(\"K\", \"A\");\nAssert.True(consumerA.Has<string>(\"K\")); // true\n// Step 2: Consumer B overrides the value with an int\nvar consumerB = sp.GetRequiredService<IApplicationState>();\nif (!consumerB.Has<int>(\"K\")) // Oops, key K exists but it's of type string, not int\n{\n    consumerB.Set(\"K\", 123);\n}\nAssert.True(consumerB.Has<int>(\"K\")); // true\n// Consumer A is broken!\nAssert.False(consumerA.Has<string>(\"K\")); // false\n```", "```cs\npublic interface IWishList\n{\n    Task<WishListItem> AddOrRefreshAsync(string itemName);\n    Task<IEnumerable<WishListItem>> AllAsync();\n}\npublic record class WishListItem(string Name, int Count, DateTimeOffset Expiration);\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services\n    .ConfigureOptions<InMemoryWishListOptions>()\n    .AddTransient<IValidateOptions<InMemoryWishListOptions>, InMemoryWishListOptions>()\n    .AddSingleton(serviceProvider => serviceProvider.GetRequiredService<IOptions<InMemoryWishListOptions>>().Value)\n    // The singleton registration\n    .AddSingleton<IWishList, InMemoryWishList>() \n;\n```", "```cs\nvar app = builder.Build();\napp.MapGet(\"/\", async (IWishList wishList) => \n    await wishList.AllAsync());\napp.MapPost(\"/\", async (IWishList wishList, CreateItem? newItem) =>\n{\n    if (newItem?.Name == null)\n    {\n        return Results.BadRequest();\n    }\n    var item = await wishList.AddOrRefreshAsync(newItem.Name);\n    return Results.Created(\"/\", item);\n});\napp.Run();\npublic record class CreateItem(string? Name);\n```", "```cs\nnamespace Wishlist.Internal;\npublic interface ISystemClock\n{\n    DateTimeOffset UtcNow { get; }\n}\npublic class SystemClock : ISystemClock\n{\n    public DateTimeOffset UtcNow => DateTimeOffset.UtcNow;\n}\n```", "```cs\npublic class CustomClock : ISystemClock\n{\n    private readonly TimeProvider _timeProvider;\n    public CustomClock(TimeProvider timeProvider)\n    {\n        _timeProvider = timeProvider ?? throw new ArgumentNullException(nameof(timeProvider));\n    }\n    public DateTimeOffset UtcNow => _timeProvider.GetUtcNow();\n}\n```", "```cs\nnamespace Wishlist;\npublic class InMemoryWishListTest\n{\n    // Constructor and private fields omitted\n    public class AddOrRefreshAsync : InMemoryWishListTest\n    {\n        [Fact]\n        public async Task Should_create_new_item();\n        [Fact]\n        public async Task Should_increment_Count_of_an_existing_item();\n        [Fact]\n        public async Task Should_set_the_new_Expiration_date_of_an_existing_item();\n        [Fact]\n        public async Task Should_set_the_Count_of_expired_items_to_1();\n        [Fact]\n        public async Task Should_remove_expired_items();\n    }\n    public class AllAsync : InMemoryWishListTest\n    {\n        [Fact]\n        public async Task Should_return_items_ordered_by_Count_Descending();\n        [Fact]\n        public async Task Should_not_return_expired_items();\n    }\n    // Private helper methods omitted\n}\n```", "```cs\nprivate readonly Mock<ISystemClock> _systemClockMock = new();\n```", "```cs\nprivate (DateTimeOffset UtcNow, DateTimeOffset ExpectedExpiryTime) SetUtcNow()\n{\n    var utcNow = DateTimeOffset.UtcNow;\n    _systemClockMock.Setup(x => x.UtcNow).Returns(utcNow);\n    var expectedExpiryTime = utcNow.AddSeconds(_options.ExpirationInSeconds);\n    return (utcNow, expectedExpiryTime);\n}\n```", "```cs\nprivate (DateTimeOffset UtcNow, DateTimeOffset ExpectedExpiryTime) SetUtcNowToExpired()\n{\n    var delay = -(_options.ExpirationInSeconds * 2);\n    var utcNow = DateTimeOffset.UtcNow.AddSeconds(delay);\n    _systemClockMock.Setup(x => x.UtcNow).Returns(utcNow);\n    var expectedExpiryTime = utcNow.AddSeconds(_options.ExpirationInSeconds);\n    return (utcNow, expectedExpiryTime);\n}\n```", "```cs\nnamespace Wishlist;\npublic class InMemoryWishList : IWishList\n{\n    private readonly InMemoryWishListOptions _options;\n    private readonly ConcurrentDictionary<string, InternalItem> _items = new();\n    public InMemoryWishList(InMemoryWishListOptions options)\n    {\n        _options = options ?? throw new ArgumentNullException(nameof(options));\n    }\n    public Task<WishListItem> AddOrRefreshAsync(string itemName)\n    {\n        var expirationTime = _options.SystemClock.UtcNow.AddSeconds(_options.ExpirationInSeconds);\n        _items\n            .Where(x => x.Value.Expiration < _options.SystemClock.UtcNow)\n            .Select(x => x.Key)\n            .ToList()\n            .ForEach(key => _items.Remove(key, out _))\n        ;\n        var item = _items.AddOrUpdate(\n            itemName,\n            new InternalItem(Count: 1, Expiration: expirationTime),\n            (string key, InternalItem item) => item with {\n                Count = item.Count + 1,\n                Expiration = expirationTime\n            }            \n        );\n        var wishlistItem = new WishListItem(\n            Name: itemName,\n            Count: item.Count,\n            Expiration: item.Expiration\n        );\n        return Task.FromResult(wishlistItem);\n    }\n    public Task<IEnumerable<WishListItem>> AllAsync()\n    {\n        var items = _items\n            .Where(x => x.Value.Expiration >= _options.SystemClock.UtcNow)\n            .Select(x => new WishListItem(\n                Name: x.Key,\n                Count: x.Value.Count,\n                Expiration: x.Value.Expiration\n            ))\n            .OrderByDescending(x => x.Count)\n            .AsEnumerable()\n        ;\n        return Task.FromResult(items);\n    }\n    private record class InternalItem(int Count, DateTimeOffset Expiration);\n}\n```", "```cs\nbuilder.Services.AddSingleton<IWishList, InMemoryWishList>();\n```", "```cs\nnamespace ServiceLocator;\npublic interface IMyService : IDisposable\n{\n    void Execute();\n}\n```", "```cs\nnamespace ServiceLocator;\npublic class MyServiceImplementation : IMyService\n{\n    private bool _isDisposed = false;\n    public void Dispose() => _isDisposed = true;\n    public void Execute()\n    {\n        if (_isDisposed)\n        {\n            throw new NullReferenceException(\"Some dependencies have been disposed.\");\n        }\n    }\n}\n```", "```cs\nnamespace ServiceLocator;\npublic class MyController : ControllerBase\n{\n    private readonly IServiceProvider _serviceProvider;\n    public MyController(IServiceProvider serviceProvider)\n    {\n        _serviceProvider = serviceProvider ?? throw new ArgumentNullException(nameof(serviceProvider));\n    }\n    [Route(\"/service-locator\")]\n    public IActionResult Get()\n    {\n        using var myService = _serviceProvider\n            .GetRequiredService<IMyService>();\n        myService.Execute();\n        return Ok(\"Success!\");\n    }\n}\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services\n    .AddSingleton<IMyService, MyServiceImplementation>()\n    .AddControllers()\n;\nvar app = builder.Build();\napp.MapControllers();\napp.Run();\n```", "```cs\npublic class MethodInjectionController : ControllerBase\n{\n    [Route(\"/method-injection\")]\n    public IActionResult GetUsingMethodInjection([FromServices] IMyService myService)\n    {\n        ArgumentNullException.ThrowIfNull(myService, nameof(myService));\n        myService.Execute();\n        return Ok(\"Success!\");\n    }\n}\n```", "```cs\nnamespace ServiceLocator;\npublic class ConstructorInjectionController : ControllerBase\n{\n    private readonly IMyService _myService;\n    public ConstructorInjectionController(IMyService myService)\n    {\n        _myService = myService ?? throw new ArgumentNullException(nameof(myService));\n    }\n    [Route(\"/constructor-injection\")]\n    public IActionResult GetUsingConstructorInjection()\n    {\n        _myService.Execute();\n        return Ok(\"Success!\");\n    }\n} \n```", "```cs\napp.MapGet(\"/minimal-api\", (IMyService myService) =>\n{\n    myService.Execute();\n    return \"Success!\";\n});\n```", "```cs\nusing Factory.Data;\nusing Factory.Services;\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddControllers();\nbuilder.Services.AddSingleton<ILocationService>(sp =>\n{\n    if (builder.Environment.IsDevelopment())\n    {\n        return new InMemoryLocationService();\n    }\n    return new SqlLocationService(new NotImplementedDatabase());\n});\nvar app = builder.Build();\napp.MapControllers();\napp.Run();\n```"]