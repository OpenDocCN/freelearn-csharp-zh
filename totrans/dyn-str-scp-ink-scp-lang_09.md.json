["```cs\n    using System.Collections;\n    using System.Collections.Generic;\n    using UnityEngine;\n    using keyword tells Unity to include the Ink.Runtime namespace and allow its classes to be used as part of this file.\n    ```", "```cs\n    public class InkLoader: MonoBehaviour\n    {\n        InkJSONAsset field with the public keyword will allow this value to be changed inside the Unity editor. The addition of the Story class creates a new ink story as part of the Runtime namespace. This is known as the *Story API* because multiple methods will be used as part of the Story class.\n    ```", "```cs\nThis is the start.\nAnd then this happens.\n```", "```cs\n    void Start()\n    {\n    Story exampleStory = new Story(InkJSONAsset.text);\n      Debug.Log(exampleStory.Continue());\n    }\n    ```", "```cs\n    void Start()\n    {\n    Story exampleStory = new Story(InkJSONAsset.text);\n    Debug.Log(exampleStory.Continue());\n    Debug.Log(exampleStory.Continue());\n    }\n    ```", "```cs\n    void Start()\n    {\n    Story exampleStory = new Story(InkJSONAsset.text);\n    Debug.Log(exampleStory.Continue());\n    Debug.Log(exampleStory.Continue());\n    Debug.Log(exampleStory.Continue());\n    }\n    ```", "```cs\n    void Start()\n    {\n    Story exampleStory = new Story(InkJSONAsset.text);\n    while(exampleStory.canContinue)\n          {\n              Debug.Log(exampleStory.Continue());\n          }\n    }\n    ```", "```cs\n    using System.Collections;\n    using System.Collections.Generic;\n    using UnityEngine;\n    using Ink.Runtime;\n    public class LoadingChoices : MonoBehaviour\n    {\n        public TextAsset InkJSONAsset;\n        void Start()\n        {\n            Story InkStory = new Story(InkJSONAsset.text);\n            InkStory.Continue();\n            foreach (Choice c in InkStory.currentChoices)\n            {\n                Debug.Log(c.text);\n            }\n        }\n    }\n    ```", "```cs\n    Sam reached out, not quite touching Juan.\n    * \"Are you just going to leave me?\"\n    * \"He didn't mean anything to me!\"\n    * \"Can't we just start again?\"\n    ```", "```cs\n    void Start()\n    {\n    Story InkStory = new Story(InkJSONAsset.text);\n    InkStory.Continue();\n    Choice exampleChoice = InkStory.currentChoices[0];\n    InkStory.ChooseChoiceIndex(exampleChoice.index);\n    Debug.Log(InkStory.Continue());\n    }\n    ```", "```cs\n    You read all the books and convinced your parents into going to the zoo. You just had to know. \n    You enter the area containing the snakes and walk up to the glass.\n    -> snake_house\n    == snake_house\n    + (tap){tap < 2}[Tap the glass and say something {tap > 0: again}]\n        {tap <= 1: You tap on the glass in front of you.\n          The snake turns slightly toward the noise and\n          sticks out its tongue.}\n        {tap > 1: No, you finally decide. You cannot talk\n          to snakes.}\n        -> snake_house\n    + [Ignore the snake]\n        You regard the coiled snake and then walk out.\n        {tap > 1: What were you thinking? Talking to\n          snakes is fictional.}\n        -> DONE\n    ```", "```cs\n    using System.Collections;\n    using System.Collections.Generic;\n    using UnityEngine;\n    using Ink.Runtime;\n    public class LoadingChoices : MonoBehaviour\n    {\n        public TextAsset InkJSONAsset;\n        void Start()\n        {\n            Story InkStory = new Story(InkJSONAsset.text);\n            Debug.Log(InkStory.ContinueMaximally());\n            Choice exampleChoice =\n            InkStory.currentChoices[0];\n            Debug.Log(exampleChoice.text);\n            InkStory.ChooseChoiceIndex\n              (exampleChoice.index);\n            Debug.Log(InkStory.ContinueMaximally());\n        }\n    }\n    ```", "```cs\n    using System.Collections;\n    using System.Collections.Generic;\n    using UnityEngine;\n    using Ink.Runtime;\n    public class InkStory : MonoBehaviour\n    {\n        public TextAsset InkJSONAsset;\n        public GameObject prefabButton;\n    }\n    ```", "```cs\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing Ink.Runtime;\npublic class InkStory : MonoBehaviour\n{\n    public TextAsset InkJSONAsset;\n    public GameObject prefabButton;\n    private Story inkStory;\n    private Text currentLinesText;\n}\n```", "```cs\nvoid Start()\n{\ninkStory = new Story(InkJSONAsset.text);\ncurrentLinesText = GetComponentInChildren<Text>();\n}\n```", "```cs\nvoid LoadTextAndWeave()\n{\nif (inkStory.canContinue)\n{\ncurrentLinesText.text = inkStory.ContinueMaximally();\nforeach (Choice c in inkStory.currentChoices)\n{\nGameObject cloneButtonGameObject = \n  Instantiate(prefabButton, this.transform);\nButton cloneButtonButton =\n  cloneButtonGameObject.GetComponent<Button>();\ncloneButtonButton.onClick.AddListener(delegate\n{\ninkStory.ChooseChoiceIndex(c.index);\nLoadTextAndWeave();\n                });\nText cloneButtonText = cloneButtonButton.\n  GetComponentInChildren<Text>();\ncloneButtonText.text = c.text;\n}\n}\n}\n```", "```cs\n    void Start()\n    {\n    inkStory = new Story(InkJSONAsset.text);\n    currentLinesText = GetComponentInChildren<Text>();\n    LoadTextAndWeave();\n    }\n    ```", "```cs\n    DestroyButtonChildren() method needs to be called as part of the delegate method. Before the content is refreshed, the current buttons need to be destroyed:\n\n    ```", "```cs\n\n    ```"]