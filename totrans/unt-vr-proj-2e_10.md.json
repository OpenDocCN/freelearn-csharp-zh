["```cs\nusing UnityEngine;\n\npublic class Rotator : MonoBehaviour\n{\n    [Tooltip(\"Rotation rate in degrees per second\")]\n    public Vector3 rate;\n\n    void Update()\n    {\n        transform.Rotate(rate * Time.deltaTime);\n    }\n}\n```", "```cs\n    ...\n    Tags { \"RenderType\"=\"Opaque\" }\n    Cull Front\n    ...\n```", "```cs\nShader \"MyInwardNormalsShader\" {\n    Properties {\n        _MainTex (\"Base (RGB)\", 2D) = \"white\" {}\n    }\n    SubShader {\n        Tags { \"RenderType\" = \"Opaque\" }\n        Cull Off\n\n        CGPROGRAM\n        #pragma surface surf Lambert vertex:vert\n        sampler2D _MainTex;\n\n        struct Input {\n            float2 uv_MainTex;\n            float4 color : COLOR;\n        };\n\n        void vert(inout appdata_full v) {\n            v.normal.xyz = v.normal * -1;\n        }\n\n        void surf (Input IN, inout SurfaceOutput o) {\n             fixed3 result = tex2D(_MainTex, IN.uv_MainTex);\n             o.Albedo = result.rgb;\n             o.Alpha = 1;\n        }\n        ENDCG\n    }\n      Fallback \"Diffuse\"\n}\n```", "```cs\npublic class DisablePositionalTracking : MonoBehaviour\n{\n    void Start()\n    {\n        UnityEngine.XR.InputTracking.disablePositionalTracking = true;\n    }\n} \n```", "```cs\nusing UnityEngine;\nusing UnityEngine.Video;\n\npublic class PlayPause : MonoBehaviour {\n    private VideoPlayer player;\n\n    void Start() {\n        player = GetComponent<VideoPlayer>();\n    }\n\n    void Update() {\n        if (Input.GetButtonDown(\"Fire1\"))\n        {\n            if (player.isPlaying)\n            {\n                player.Pause();\n            }\n            else\n            {\n                player.Play();\n            }\n        }\n    }\n}\n```", "```cs\nusing UnityEngine;\nusing UnityEditor;\nusing System.Collections;\n\npublic class RenderCubemapWizard : ScriptableWizard\n{\n    public Transform renderFromPosition;\n    public Cubemap cubemap;\n\n    void OnWizardUpdate()\n    {\n        string helpString = \"Select transform to render from and cubemap to render into\";\n        bool isValid = (renderFromPosition != null) && (cubemap != null);\n    }\n\n    void OnWizardCreate()\n    {\n        // create temporary camera for rendering\n        GameObject go = new GameObject(\"CubemapCamera\");\n        go.AddComponent<Camera>();\n        // place it on the object\n        go.transform.position = renderFromPosition.position;\n        go.transform.rotation = Quaternion.identity;\n        // render into cubemap\n        go.GetComponent<Camera>().RenderToCubemap(cubemap);\n\n        // destroy temporary camera\n        DestroyImmediate(go);\n    }\n\n    [MenuItem(\"GameObject/Render into Cubemap\")]\n    static void RenderCubemap()\n    {\n        ScriptableWizard.DisplayWizard<RenderCubemapWizard>(\n            \"Render cubemap\", \"Render!\");\n    }\n}\n```", "```cs\ncamera.stereoSeparation = 0.064; // Eye separation (IPD) of 64mm.\ncamera.RenderToCubemap(cubemapLeftEye, 63, \n        Camera.MonoOrStereoscopicEye.Left);\ncamera.RenderToCubemap(cubemapRightEye, 63,\n        Camera.MonoOrStereoscopicEye.Right);\n```", "```cs\ncubemapLeftEye.ConvertToEquirect(equirect, \n        Camera.MonoOrStereoscopicEye.Left);\ncubemapRightEye.ConvertToEquirect(equirect, \n        Camera.MonoOrStereoscopicEye.Right);\n```"]