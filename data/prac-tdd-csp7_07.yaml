- en: Test-Driving C# Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试驱动C#应用程序
- en: The two most important features for the Speaker Meet application were determined
    to be the speaker listing and the ability to see an individual speaker's details.
    The speaker listing and speaker details will deliver the most value for our Minimum
    Viable Product.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Speaker Meet应用来说，最重要的两个功能被确定为演讲者列表和查看单个演讲者详情的能力。演讲者列表和演讲者详情将为我们的最小可行产品带来最大的价值。
- en: Conference organizers, user group administrators, and the general public would
    likely care most about finding information on speakers. With that in mind, the
    speakers epic is where development for the Speaker Meet application begins.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 会议组织者、用户组管理员以及公众最可能关心的是找到关于演讲者的信息。考虑到这一点，演讲者史诗是演讲者见面应用开发的起点。
- en: 'In this chapter, we cover:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涵盖了以下内容：
- en: Speaker Meet requirements
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Speaker Meet需求
- en: API, service, and repository tests
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API、服务和存储库测试
- en: The speaker detail and speaker listing APIs
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 演讲者详情和演讲者列表API
- en: Reviewing the requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 审查需求
- en: In order to get started, the foundation of the speaker section of the Speaker
    Meet application is laid by defining the initial set of requirements. These will
    help eliminate ambiguity and develop a common understanding of the requirements,
    as well as defining a common vocabulary used throughout the project.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始，通过定义初始需求集，为Speaker Meet应用中的演讲者部分打下基础。这些需求将有助于消除歧义，并发展对需求的共同理解，以及定义在整个项目中使用的共同词汇。
- en: The abstract is where a projects, purpose and value can be presented. Any project,
    before it can be approved to be worked on, must prove the value that it can provide
    to the company. This is true whether you are working for a Fortune 500 company
    or a startup with two people.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 摘要是展示项目目的和价值的地方。任何项目在获得批准进行工作之前，都必须证明它能为公司提供的价值。无论你是为财富500强公司工作还是为只有两个人的初创公司工作，这都是正确的。
- en: A data dictionary is important because it provides a common, ubiquitous language
    for the project. The term, ubiquitous language, is from Domain Driven Design and
    denotes *a shared or common language*. The idea is that the shared jargon of the
    business and development team is solidified in a codex that can be viewed and
    used by all.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 数据字典很重要，因为它为项目提供了一个通用、无处不在的语言。这个术语“无处不在的语言”来自领域驱动设计，表示一种**共享或通用的语言**。这个想法是，业务和开发团队的共享术语被固定在一个法典中，可以被所有人查看和使用。
- en: Last, and certainly not least, the requirements must be presented in an agreed
    upon format. The specific format is less important than the format agreement.
    Regardless of the format, good requirements provide a context of interaction,
    the interaction taking place, and the expected results given the context and specific
    action.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，但同样重要的是，需求必须以商定的格式呈现。具体的格式不如格式协议重要。无论格式如何，良好的需求都提供了交互的背景、正在进行的交互以及根据背景和特定操作预期的结果。
- en: Speaker listing
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 演讲者列表
- en: The speakers section of the Speaker Meet website contains a listing of all speakers
    in the system. The listing of speakers will present value to multiple groups including
    conference and user group organizers as well as conference and user group attendees.
    From a user interaction perspective, the speaker listing allows entry to the speaker
    details. The speaker details are where the real value is delivered in the form
    of availability, upcoming engagements, and contact information for a given speaker.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Speaker Meet网站上的演讲者部分包含系统中所有演讲者的列表。演讲者列表将为多个群体带来价值，包括会议和用户组组织者以及会议和用户组参与者。从用户交互的角度来看，演讲者列表允许进入演讲者详情。演讲者详情是真正提供价值的部分，以可用性、即将到来的活动和特定演讲者的联系信息的形式呈现。
- en: Initially, the speaker listing will aid organizers by providing quick access
    to speaker discovery. Organizers will be able to find speakers they know of and
    discover speakers of whom they are unaware. Once found or discovered, the organizer
    will be able to view details for specific speakers and, eventually, organizers
    will be able to contact the speakers using the available contact information.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 初始时，演讲者列表将帮助组织者快速访问演讲者发现。组织者将能够找到他们所知道的演讲者，并发现他们不知道的演讲者。一旦找到或发现，组织者将能够查看特定演讲者的详细信息，最终，组织者将能够使用可用的联系信息联系演讲者。
- en: 'Attendees will benefit from the speaker list in a similar fashion to the organizers.
    Attendees have one important difference, however: they are looking for the events
    a speaker is already attached to as a presenter. This information, similar to
    the contact information, will be available in the speaker details.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 参与者将从演讲者列表中受益，类似于组织者。然而，参与者有一个重要区别：他们正在寻找演讲者已经作为演讲者附加的事件。类似地，这种信息，类似于联系信息，将在演讲者详情中可用。
- en: API
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API
- en: The API is the main gateway into the core system of the Speaker Meet application.
    The speaker listing API should return a listing of speaker summary ViewModels.
    These ViewModels contain only the information necessary for this portion of the
    application. The ViewModels represent the speaker, but should not necessarily
    be direct copies of the speaker objects persisted to a database.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: API 是进入演讲者Meet应用程序核心系统的主要入口。演讲者列表API应返回演讲者摘要ViewModel的列表。这些ViewModel只包含应用程序这部分所需的信息。ViewModel代表演讲者，但不一定是直接复制到数据库中的演讲者对象。
- en: The `SpeakerSummary` ViewModel will be defined based on the requirements of
    the system. This ViewModel will grow to contain only the properties required for
    its limited use.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`SpeakerSummary` ViewModel 将根据系统的需求进行定义。这个 ViewModel 将逐渐增长，只包含其有限用途所需的属性。'
- en: To get started, a new method will need to be added to an API. For the first
    new piece of functionality to be added, a new method `GetAll` will need to be
    created in the `SpeakerController`. But first, a test must be created.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，需要向API添加一个新方法。对于要添加的第一个新功能，需要在 `SpeakerController` 中创建一个新的 `GetAll` 方法。但首先，必须创建一个测试。
- en: API tests
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API 测试
- en: To revisit, code in the `SpeakerController` may not be written without a failing
    unit test. To begin, a new test file should be created named `GetAll`. This is
    where all the tests associated with the `GetAll` method of the `SpeakerController`
    will be contained.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾一下，`SpeakerController` 中的代码在没有失败的单元测试的情况下可能不会被编写。首先，应该创建一个名为 `GetAll` 的新测试文件。这里将包含与
    `SpeakerController` 的 `GetAll` 方法相关联的所有测试。
- en: There is duplication in how testing the `SpeakerController` is set up. Try to
    come up with ways that this duplication can be minimized.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置 `SpeakerController` 测试时存在重复。尝试想出可以最小化这种重复的方法。
- en: The first such test should be the standard `ItExists` test. Building on the
    example from previous chapters, the `SpeakerController` accepts an `ISpeakerService` in
    the constructor. The same method of providing a `Moq` object can be applied here
    as well.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的第一个测试应该是标准的 `ItExists` 测试。基于前几章的示例，`SpeakerController` 在构造函数中接受一个 `ISpeakerService`。同样可以应用提供
    `Moq` 对象的方法。
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Comparing this first test with the first test written for the `Search` method
    in the `SpeakerController`, you may notice there's a bit of duplication happening
    already. Remember, duplication should be avoided. Don't forget the acronym, **DRY**
    (**Don't Repeat Yourself**).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 将这次测试与为 `SpeakerController` 中的 `Search` 方法编写的第一次测试进行比较，你可能已经注意到已经发生了一些重复。记住，应该避免重复。不要忘记这个缩写，**DRY**（**不要重复自己**）。
- en: In order to make this first test pass, a void `GetAll` method should be added
    to the `SpeakerController`. This will allow the application to compile, thereby
    passing this test. Remember, a failure to compile is a failing test.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这次测试通过，需要在 `SpeakerController` 中添加一个空的 `GetAll` 方法。这将允许应用程序编译，从而通过这次测试。记住，编译失败即测试失败。
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Next, ensure that the `GetAll` method of `SpeakerController` returns an `OkObjectResult`
    by creating a new test. Don't worry about the type of the result itself. That
    will be covered by the next test.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过创建一个新的测试来确保 `SpeakerController` 的 `GetAll` 方法返回一个 `OkObjectResult`。不要担心结果本身的类型。这将在下一个测试中解决。
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In order to get this test to pass, the method should return an `IActionResult`
    instead of `void`. The method should also be changed to return `Ok()` in order
    to make the test pass. The method does not need to return anything else in order
    to make the test pass as written. Do not write more code than is required to make
    the test pass.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这个测试通过，方法应该返回 `IActionResult` 而不是 `void`。方法还应更改为返回 `Ok()` 以使测试通过。为了使测试按编写的方式通过，方法不需要返回任何其他内容。不要编写比使测试通过所需的代码更多的代码。
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now, determine that the method returns a collection of `SpeakerSummary`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，确定该方法返回一个 `SpeakerSummary` 集合。
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Create a `SpeakerSummary` class to fulfill the requirement defined by this test.
    Give some thought to where the new `SpeakerSummary` lives. This is a ViewModel
    that will need to be accessed by the tests, but should not be available to the
    other layers of the application. More about proper separation in a future chapter.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个`SpeakerSummary`类来满足这个测试定义的要求。考虑一下新的`SpeakerSummary`应该放在哪里。这是一个ViewModel，它将需要被测试访问，但不应该对应用程序的其他层可用。关于适当分离的更多内容将在未来的章节中介绍。
- en: Modify the `GetAll` method of the `SpeakerController` to return a set of `SpeakerSummary`
    objects as the return value.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 修改`SpeakerController`的`GetAll`方法，使其返回一组`SpeakerSummary`对象作为返回值。
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Moq
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Moq
- en: In previous chapters, Moq was used to provide a stand-in set of functionalities
    for the item under test. The results provided for the mocked instance were required,
    but the implementation was not vital to what was being tested.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，Moq被用来为被测试的项目提供一组替代功能。对于模拟实例提供的结果是必需的，但实现对于测试的内容并不重要。
- en: Like the examples in previous chapters, the logic for `GetAll` should not be
    found in the controller itself. Instead, the logic will be contained within the
    business layer, specifically the `SpeakerService` implementation of `ISpeakerService`.
    When the `GetAll` method in `SpeakerController` is called it is expected that
    the `GetAll` method of the `SpeakerService` will be called.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如前几章中的示例，`GetAll`的逻辑不应该在控制器本身中找到。相反，逻辑将包含在业务层中，特别是`ISpeakerService`的`SpeakerService`实现。当在`SpeakerController`中调用`GetAll`方法时，预期将调用`SpeakerService`的`GetAll`方法。
- en: The `GetAll` method does not exist within the `SpeakerService`, so the following
    test should fail.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`SpeakerService`中不存在`GetAll`方法，因此下面的测试应该会失败。'
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Creating the previous test has forced the creation of a new method signature
    in the `ISpeakerService` interface. The following method signature should be added
    to the `ISpeakerService` interface.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 创建之前的测试强制在`ISpeakerService`接口中创建一个新的方法签名。以下方法签名应添加到`ISpeakerService`接口中。
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: To get the application to compile, `GetAll` will also need to be added to the
    `SpeakerService` class. For now, this should throw an exception.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使应用程序能够编译，`GetAll`也需要添加到`SpeakerService`类中。目前，这应该抛出一个异常。
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: To get the `ItCallsGetAllServiceOnce` test to pass, make sure that the `GetAll`
    method of the `SpeakerService` is called. The return value from the call is not
    yet needed for the test to pass, so simply calling the method is all that is required.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使`ItCallsGetAllServiceOnce`测试通过，确保调用`SpeakerService`的`GetAll`方法。对于测试通过，调用方法本身就足够了，不需要返回值。
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note that this will make the test pass, but it is not exactly the correct solution
    yet. A new test is required to force the code to do something with the return
    value of the service. Moving on, it's time to do something with the result of
    the `SpeakerService.GetAll` call.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这将使测试通过，但这还不是完全正确的解决方案。需要一个新的测试来强制代码对服务返回值进行操作。继续前进，现在是时候对`SpeakerService.GetAll`调用的结果进行处理了。
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Don't forget to refactor the tests as well as the code. For readability, the
    `Arrange` methods have been included in the previous examples. Likely, these would
    be extracted and defined as *fields* and assigned in the constructor.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记重构测试和代码。为了提高可读性，`Arrange`方法已被包含在之前的示例中。很可能，这些方法将被提取并定义为*字段*，并在构造函数中分配。
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Testing exception cases
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试异常情况
- en: In the event that a speaker is requested that does not exist, it would be best
    to return a friendly error message to the consumer of the API.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果请求的演讲者不存在，最好向API的消费者返回一个友好的错误信息。
- en: '[PRE12]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Create a new exception class named `SpeakerNotFoundException`. This will be
    the specific exception returned by the `Moq` call below. Like the `SpeakerSummary`
    class file before, give some thought to where the `SpeakerNotFoundException` class
    file should be saved.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的异常类，命名为`SpeakerNotFoundException`。这将是由下面的`Moq`调用返回的特定异常。像之前的`SpeakerSummary`类文件一样，考虑一下`SpeakerNotFoundException`类文件应该保存的位置。
- en: '[PRE13]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '"Throwing" a new exception when a specific ID is supplied requires a little
    bit of setup in `Moq`. This is similar to what was already defined by the `x.Get(It.IsAny<int>)`
    definition.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当提供一个特定ID时，在`Moq`中“抛出”一个新的异常需要一点设置。这类似于之前由`x.Get(It.IsAny<int>)`定义的。
- en: '[PRE14]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Make sure this is added after the previous setup, as `Moq` will process the
    last value first. Avoid a false positive by understanding how `Moq` will evaluate
    what has been set up within its context.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在之前的设置之后添加此操作，因为`Moq`将首先处理最后一个值。通过理解`Moq`将如何评估其上下文中设置的内容，避免出现假阳性。
- en: Next, modify the `Get` method of the controller to catch the exception and return
    the proper response code.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，修改控制器中的`Get`方法以捕获异常并返回适当的响应代码。
- en: '[PRE15]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The initial requirements stated that a friendly error message be returned to
    the client. Create a test that ensures a friendly message is returned to the consumer
    in the event a speaker is not found with the supplied ID.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 初始要求指出，应向客户端返回一个友好的错误消息。创建一个测试以确保在找不到具有提供的ID的演讲者时，向消费者返回一个友好的消息。
- en: '[PRE16]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In order to make this test pass, the `SpeakerNotFoundException` class must be
    modified in order to return a friendly error message.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这个测试通过，必须修改`SpeakerNotFoundException`类以返回一个友好的错误信息。
- en: '[PRE17]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: And finally, modify the `Get` method in the controller to return the message.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，修改控制器中的`Get`方法以返回消息。
- en: '[PRE18]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Service
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务
- en: The business logic for the `GetAll` method should be housed in the `SpeakerService`.
    As before, in order to write a line of code a test must first be written.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`GetAll`方法的业务逻辑应放在`SpeakerService`中。和之前一样，为了编写一行代码，必须首先编写一个测试。'
- en: Service tests
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务测试
- en: To build on the previous example, start with an `ItExists` test.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个示例的基础上，从`ItExists`测试开始。
- en: '[PRE19]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Since this method was previously added to the `SpeakerService`, although with
    a `NotImplementedException`, it would be best to see this test fail for the proper
    reason. Delete the `GetAll` method from the `SpeakerService` so that the application
    will fail to compile. Now, add the method back to see that the application once
    again compiles, and therefore this test passes. This time, have the method return
    `null` instead of throwing a new `NotImplementedException`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 由于此方法之前已添加到`SpeakerService`中，尽管使用了`NotImplementedException`，但最好看到这个测试因为正确的原因而失败。从`SpeakerService`中删除`GetAll`方法，以便应用程序无法编译。现在，将方法添加回来，以查看应用程序再次编译，因此这个测试通过。这次，让该方法返回`null`而不是抛出一个新的`NotImplementedException`。
- en: '[PRE20]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Now, ensure that the `GetAll` method returns a collection of `SpeakerSummary`
    by creating a new test.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，确保`GetAll`方法通过创建一个新的测试来返回一个`SpeakerSummary`对象的集合。
- en: '[PRE21]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Modify the `GetAll` method of the `SpeakerService` in order to make this test
    pass. The minimum amount of code required to make this test pass involves returning
    a `new List` of `SpeakerSummary` objects. Do not add more code than is required
    to make this test pass.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 修改`SpeakerService`中的`GetAll`方法以使这个测试通过。使这个测试通过所需的最小代码量是返回一个`SpeakerSummary`对象的新`List`。不要添加超过使这个测试通过所需的代码。
- en: '[PRE22]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Building on the examples from a previous chapter, use the hardcoded data from
    before. Extract `hardCodedSpeakers` into a field in order to use the data in both
    the `Search` method as well as the `GetAll` method:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章的示例的基础上，使用之前硬编码的数据。将`hardCodedSpeakers`提取到一个字段中，以便在`Search`方法和`GetAll`方法中使用这些数据：
- en: '[PRE23]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Note that the field was made public. This will allow tests to use this data
    for comparison for *Asserts*. Don’t worry, this field and the hardcoded data contained
    therein will be short-lived. Once these are no longer needed they can be safely
    deleted.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，该字段已被公开。这将允许测试使用这些数据来比较*断言*。不用担心，这个字段以及其中包含的硬编码数据将不会长期存在。一旦这些不再需要，它们可以安全地被删除。
- en: Now, create a test to ensure that all of the data contained in `HardCodedSpeakers`
    is returned by the `GetAll` method in the `SpeakerService`. Start by verifying
    that the same number of speakers in the hardcoded data is returned by the method.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，创建一个测试以确保`SpeakerService`中的`GetAll`方法返回了`HardCodedSpeakers`中包含的所有数据。首先，验证方法返回的硬编码数据中的演讲者数量是否相同。
- en: '[PRE24]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: To get this to pass, simply iterate over the hardcoded values and return a new
    `SpeakerSummary` for each entry. As the test is not yet checking the values of
    the speakers returned, all that is required is that the proper count of `SpeakerSummary`
    objects is returned.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这个测试通过，只需遍历硬编码的值，并为每个条目返回一个新的`SpeakerSummary`。由于测试尚未检查返回的演讲者的值，所以只需要返回正确的`SpeakerSummary`对象数量。
- en: '[PRE25]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Now, ensure that the speakers are properly converted to `SpeakerSummary` objects.
    First, check that the `Name` properties are the same.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，确保演讲者被正确地转换为`SpeakerSummary`对象。首先，检查`Name`属性是否相同。
- en: '[PRE26]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: And now, make this test pass by assigning the `Name` within the `GetAll` method.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过在 `GetAll` 方法中分配 `Name` 来使这个测试通过。
- en: '[PRE27]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Continue to build up the `SpeakerSummary` object with the required properties.
    The `Name` property has been added. Now, add an ID and ensure that it is being
    assigned and returned properly.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 继续构建具有所需属性的 `SpeakerSummary` 对象。已添加 `Name` 属性。现在，添加一个 ID 并确保它被正确分配和返回。
- en: '[PRE28]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: In order to make this pass, an ID will need to be mapped in the `GetAll` method
    of the `SpeakerService`, and an ID property added to the` Speaker` and `SpeakerSummary`
    objects.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这个通过，需要在 `SpeakerService` 的 `GetAll` 方法中映射一个 ID，并添加一个 ID 属性到 `Speaker` 和
    `SpeakerSummary` 对象中。
- en: '[PRE29]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Next, add a `Location` to be returned by the `GetAll` method. This, too, will
    require the `Speaker` and `SpeakerSummary` objects to be modified. Give the new
    Location property in the `HardCodedSpeakers` collection distinct values to ensure
    that the values are being returned properly.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，添加一个 `Location` 供 `GetAll` 方法返回。这也需要修改 `Speaker` 和 `SpeakerSummary` 对象。在
    `HardCodedSpeakers` 集合中为新位置属性提供独特的值，以确保值被正确返回。
- en: '[PRE30]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Add some locations to the hardcoded data.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 将一些位置添加到硬编码的数据中。
- en: '[PRE31]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Finally, map the location to the `SpeakerSummary` ViewModel.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将位置映射到 `SpeakerSummary` 视图模型。
- en: '[PRE32]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: As has been discussed before, tests should have a single action. That does not
    preclude them from having multiple asserts. In order to minimize duplication,
    the property tests should be collapsed.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，测试应该有一个单一的操作。这并不排除它们可以有多个断言。为了最小化重复，应该合并属性测试。
- en: Clean tests
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 清洁测试
- en: A test suite should be well maintained. This is the first consumer of the application
    and provides the most comprehensive documentation of the functionality of the
    system. To clean up the tests that were just created, it is time to do some refactoring.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 测试套件应该得到良好的维护。这是应用程序的第一个消费者，并为系统的功能提供了最全面的文档。为了清理刚刚创建的测试，是时候进行一些重构了。
- en: Collapse the `SpeakerSummary` properties into single act, with multiple asserts.
    This will help to make the test suite smaller, easier to read and maintain, and
    quite possibly it will execute execute more quickly. A test suite that executes
    quickly is far more likely to be run often by the developers.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `SpeakerSummary` 属性合并为单个动作，包含多个断言。这将有助于使测试套件更小、更易于阅读和维护，并且可能会更快地执行。一个执行快速的测试套件更有可能被开发者频繁运行。
- en: Rename `ItReturnsAllSpeakersWithName` to `ItReturnsAllSpeakersWithProperties`
    and collapse the `ID` and `Location` tests into this one.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `ItReturnsAllSpeakersWithName` 重命名为 `ItReturnsAllSpeakersWithProperties` 并将
    `ID` 和 `Location` 测试合并到这个测试中。
- en: '[PRE33]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Repository
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存储
- en: In a previous chapter, the data was hard-coded within the `SpeakerController`
    class. The data has since moved to a hardcoded collection in the `SpeakerService`.
    Ultimately the data will be persisted in a database. For now, moving the data
    out of the `SpeakerService` will be enough.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章中，数据是在 `SpeakerController` 类中硬编码的。数据随后被移动到 `SpeakerService` 中的硬编码集合中。最终，数据将持久化到数据库中。目前，将数据从
    `SpeakerService` 中移除就足够了。
- en: A repository layer will be used to separate the data access layer from the rest
    of the application. To achieve this, a repository must be introduced. In order
    for a repository to be created, a need must be established. Start slowly by requiring
    the `SpeakerService` to accept an `IRepository`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 将使用存储库层来将数据访问层与其他应用程序部分分离。为了实现这一点，必须引入一个存储库。为了创建存储库，必须建立需求。通过要求 `SpeakerService`
    接受一个 `IRepository` 来缓慢开始。
- en: '[PRE34]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: This, of course, will cause the application to fail to compile. Create an `IRepository`
    interface, a `FakeRepository` class, and modify the `SpeakerService` to accept
    an `IRepository`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这将导致应用程序无法编译。创建一个 `IRepository` 接口，一个 `FakeRepository` 类，并修改 `SpeakerService`
    以接受一个 `IRepository`。
- en: '[PRE35]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The IRepository interface
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`IRepository` 接口'
- en: The `IRepository` interface will be where the method signatures for interacting
    with the data access layer will be defined. This interface will be grown slowly,
    guided by tests. In [Chapter 8](part0277.html#885BQ0-d186949d2da74f5c95dd1712efae1195),
    *Abstract Away Problems*, more details will be provided and additional concepts
    will be introduced. For now, the interface will merely be a contract for the `FakeRepository`
    used for the `SpeakerService` tests.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`IRepository` 接口将定义与数据访问层交互的方法签名。这个接口将缓慢增长，由测试指导。在 [第8章](part0277.html#885BQ0-d186949d2da74f5c95dd1712efae1195)
    的 *抽象问题* 中，将提供更多细节并引入更多概念。目前，这个接口将仅仅是用于 `SpeakerService` 测试的 `FakeRepository`
    的一个合同。'
- en: FakeRepository
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FakeRepository
- en: Now that the `FakeRepository` has been created, the `HardCodedSpeakers` can
    be moved into the `FakeRepository`. First, several iterative tests need to be
    created.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`FakeRepository`已经创建，可以将`HardCodedSpeakers`移动到`FakeRepository`中。首先，需要创建几个迭代测试。
- en: Interacting with a `FakeRepository` of your own creation allows you to substitute
    values and create additional functionality for testing purposes.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 与你自己创建的`FakeRepository`交互允许你替换值并为测试目的创建额外的功能。
- en: '[PRE36]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: By introducing a public field, the same functionality seen with `Moq` can be
    applied here in the `FakeRepository`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 通过引入一个公共字段，可以在`FakeRepository`中应用与`Moq`相同的功能。
- en: '[PRE37]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Now ensure that the `FakeRepository` returns the `HardCodedSpeakers` when `GetAll`
    is called by modifying the existing tests for `ItReturnsAllSpeakers` and `ItReturnsAllSpeakersWithProperties`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过修改现有的`ItReturnsAllSpeakers`和`ItReturnsAllSpeakersWithProperties`测试，确保当调用`GetAll`时`FakeRepository`返回`HardCodedSpeakers`。
- en: '[PRE38]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: It may seem like a lot of effort has been expended to just kick the can down
    the road. This has all been necessary effort to successfully work towards a truly
    functional and maintainable application. However, there's still more work to be
    done.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 可能看起来已经付出了很多努力，只是为了把问题推到一边。所有这些都是为了成功地向一个真正功能性和可维护的应用程序迈进所必需的努力。然而，还有更多的工作要做。
- en: Using factories with the FakeRepository
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用工厂与`FakeRepository`交互
- en: So far this has been a relatively straight-forward exercise. The `Speaker` class
    represents the shape of the object that will be persisted to the database. The
    `HardCodedSpeakers` collection represents the entire set of *speakers* from a
    database.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，这已经是一个相对直接的练习。`Speaker`类代表了将被持久化到数据库的对象的形状。`HardCodedSpeakers`集合代表了数据库中所有的*演讲者*。
- en: It's not entirely ideal to have or maintain a set of hardcoded data, whether
    it's in a test file or not. It would be far more flexible to provide a way for
    the test writer to define the data with which to test.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是在测试文件中还是在其他地方，拥有或维护一组硬编码的数据都不是完全理想的。为测试编写者提供一种定义测试数据的方式将更加灵活。
- en: Using a factory to create speakers and add them to the `FakeRepository` provides
    a much cleaner and easier-to-maintain way of managing the state of the tests that
    require specific data scenarios.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 使用工厂创建演讲者并将其添加到`FakeRepository`提供了一种更干净、更易于维护的方式来管理需要特定数据场景的测试的状态。
- en: '[PRE40]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Note that default values defined for id, name, and location have been provided.
    This allows the user to supply specific values if they want, or proceed without
    the need for supplying them.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，已为id、name和location定义了默认值。这允许用户在需要时提供特定值，或者在没有提供它们的情况下继续操作。
- en: The `FakeRepository` must also be modified to remove the `HardCodedSpeakers`
    and expose a public collection of speakers.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`FakeRepository`还必须进行修改，以删除`HardCodedSpeakers`并公开一个演讲者集合。'
- en: '[PRE41]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Now, for each test a specific set of data can be provided with which to test.
    All that is required is that the factory be called to create one or more speakers
    to add to the `FakeRepository`.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，对于每个测试，可以提供一组特定的数据来进行测试。所需的所有操作只是调用工厂来创建一个或多个演讲者并将其添加到`FakeRepository`中。
- en: '[PRE42]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: If you have been following along with the same solution from previous chapters,
    you may need to modify the Search tests as well.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你一直在跟随前几章中的相同解决方案，你可能需要修改搜索测试。
- en: '[PRE43]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Soft delete
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软删除
- en: It was decided that it would be useful to be able to "soft delete" a speaker
    from the system. A "soft delete" allows for the record to be marked as deleted
    without physically deleting the record.  This will help maintain referential integrity
    while achieving the desired result.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 决定能够从系统中“软删除”一个演讲者将是有用的。一个“软删除”允许记录被标记为已删除，而不需要物理删除记录。这将有助于维护引用完整性，同时实现预期的结果。
- en: First, add an extension method to the SpeakerFactory called `IsDeleted` that
    will set the speaker to be deleted.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，向`SpeakerFactory`添加一个扩展方法`IsDeleted`，该方法将设置演讲者以供删除。
- en: '[PRE44]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Now, create a test to ensure that this speaker is not returned when `GetAll`
    is called.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，创建一个测试以确保当调用`GetAll`时不会返回这个演讲者。
- en: '[PRE45]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Finally, modify the code to guarantee the "deleted" speaker is not returned.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，修改代码以确保不会返回“已删除”的演讲者。
- en: '[PRE46]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Speaker details
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 演讲者详细信息
- en: Next up we come to the speaker details. We've chosen to continue in the back-end
    application as we'll tie the entire program together in up coming chapters.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将讨论演讲者详细信息。我们选择在后端应用程序中继续，因为我们将在接下来的章节中将整个程序结合起来。
- en: As stated earlier, this is where the real value is delivered for the first set
    of requirements. User groups and conference organizers will be able to contact
    a speaker using the information provided in the details view.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，这是第一组需求真正价值所在的地方。用户组和会议组织者将能够使用详细信息视图中的信息联系演讲者。
- en: API
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API
- en: To return the details of an individual speaker, a new endpoint is needed. A
    new method `Get` is required which will take an integer ID and return a `SpeakerDetail`
    ViewModel.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 为了返回单个演讲者的详细信息，需要一个新端点。需要一个名为`Get`的新方法，它将接受一个整数ID并返回一个`SpeakerDetail` ViewModel。
- en: API tests
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API测试
- en: To get started, add a new test class named `Get`. Now, add a test to check that
    the `Get` method exists.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始，添加一个名为`Get`的新测试类。现在，添加一个测试来检查`Get`方法是否存在。
- en: '[PRE47]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Make this test pass by adding a `Get` method to the `SpeakerController`. Note
    that, in the following example, the `Arrange` test setup has been moved to the
    constructor of the test class.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 通过向`SpeakerController`添加`Get`方法来使这个测试通过。注意，在以下示例中，`Arrange`测试设置已经被移动到测试类的构造函数中。
- en: '[PRE48]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Next, ensure that the `Get` method accepts an integer.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，确保`Get`方法接受一个整数。
- en: '[PRE49]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: In order to make this test pass, an integer parameter will need to be added
    to the `Get` method. At this time, it is safe to delete the `ItExists` method.
    This test would need to be modified to accommodate the change, and its existence
    would be verified with the new test.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这个测试通过，需要在`Get`方法中添加一个整数参数。此时，可以安全地删除`ItExists`方法。这个测试需要修改以适应这个变化，并且其存在性将通过新的测试来验证。
- en: '[PRE50]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Now that the tests confirm that the `Get` method accepts an integer, now confirm
    that it returns an `Ok` result.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 现在测试已经确认`Get`方法接受一个整数，现在确认它返回一个`Ok`结果。
- en: '[PRE51]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Now, ensure that the result is a `SpeakerDetail`.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，确保结果是`SpeakerDetail`类型。
- en: '[PRE52]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: In order to get this test to pass, a `SpeakerDetail` object is required. Create
    an empty object with no properties, as none are yet required by the tests.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这个测试通过，需要一个`SpeakerDetail`对象。创建一个没有任何属性的空对象，因为测试目前还没有要求任何属性。
- en: '[PRE53]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Just like with the `GetAll` method, the logic for this action should reside
    in the *Service.* Create a test to check that the `Get` method in the `SpeakerService`
    is called using `Moq`.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 就像`GetAll`方法一样，这个操作的逻辑应该位于*Service*中。创建一个测试来检查`SpeakerService`中的`Get`方法是否使用`Moq`被调用。
- en: '[PRE54]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: To get the application to compile a `Get` method, a signature will need to be
    added to the `IService` interface.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使应用程序能够编译，需要在`IService`接口中添加一个`Get`方法的签名。
- en: '[PRE55]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: The `SpeakerService` will need to be modified in order to get the application
    to compile.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使应用程序能够编译，需要修改`SpeakerService`。
- en: '[PRE56]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: To make this test pass, simply call the `Get` method of the `SpeakerService`.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这个测试通过，只需调用`SpeakerService`的`Get`方法。
- en: '[PRE57]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: The method signature of the `Get` method in the `ISpeakerService` will need
    to be modified to return a `SpeakerDetail` instead of `void`.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`ISpeakerService`中`Get`方法的签名需要修改为返回`SpeakerDetail`而不是`void`。'
- en: '[PRE58]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Now ensure that the ID passed into the `Get` method in the `SpeakerController`
    is what is provided to the `Get` method in the `SpeakerService`.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 现在确保传递给`SpeakerController`中的`Get`方法的ID与传递给`SpeakerService`中的`Get`方法的ID相同。
- en: '[PRE59]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: This will require modifications to the `ISpeakerService` interface as well as
    the `SpeakerService` class.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这将需要对`ISpeakerService`接口以及`SpeakerService`类进行修改。
- en: '[PRE60]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Now return the result of the `Get` method of the `SpeakerService`.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 现在返回`SpeakerService`的`Get`方法的返回结果。
- en: '[PRE61]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: In order to make this test pass, simply return the result of the `Get` method.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这个测试通过，只需返回`Get`方法的返回结果。
- en: '[PRE62]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Here is what the final results of the `SpeakerController` currently look like:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`SpeakerController`当前最终结果的样子：
- en: '[PRE63]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Service
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务
- en: Now that the controller is calling the `Get` method of the `Moq` service, it's
    time to implement this method in the `SpeakerService`.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 现在控制器正在调用`Moq`服务的`Get`方法，现在是时候在`SpeakerService`中实现这个方法了。
- en: Service tests
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务测试
- en: The `Get` method was declared as a result of previous tests. Create a new `ItExists`
    test and delete the implementation to see it fail.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '`Get`方法是由于之前的测试声明的。创建一个新的`ItExists`测试并删除实现以查看它失败。'
- en: '[PRE64]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Make this test pass by implementing the `Get` method.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 通过实现`Get`方法来使这个测试通过。
- en: '[PRE65]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Now ensure the `Get` method accepts an integer.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 现在确保`Get`方法接受一个整数。
- en: '[PRE66]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Modify the `Get` method to accept an integer.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 修改`Get`方法以接受一个整数。
- en: '[PRE67]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Test that the `Get` method returns a `SpeakerDetail` object.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 测试`Get`方法返回一个`SpeakerDetail`对象。
- en: '[PRE68]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: To make this test pass, simply return a new `SpeakerDetail` object.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这个测试通过，只需返回一个新的`SpeakerDetail`对象。
- en: '[PRE69]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Verify that the `SpeakerDetail` returned contains an ID.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 验证返回的`SpeakerDetail`包含一个ID。
- en: '[PRE70]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Now make the test pass.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 现在使测试通过。
- en: '[PRE71]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Confirm that the `SpeakerDetail` contains a name.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 确认`SpeakerDetail`包含一个名字。
- en: '[PRE72]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: And make the test pass.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 并使测试通过。
- en: '[PRE73]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Finally, ensure that `Location` is returned.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，确保返回`Location`。
- en: '[PRE74]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: And make the test pass by returning the location.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 通过返回位置来使测试通过。
- en: '[PRE75]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Clean the tests
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 清理测试
- en: Don’t forget to clean and refactor the tests. Collapse the property tests.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记清理和重构测试。折叠属性测试。
- en: '[PRE76]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: More from the repository
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多来自存储库的信息
- en: Now, verify that the repository is called.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，验证存储库是否被调用。
- en: '[PRE77]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: Now ensure the test passes by implementing the necessary modification.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过实现必要的修改来确保测试通过。
- en: '[PRE78]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Additional factory work
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 额外的工厂工作
- en: As before, it would be ideal if the values weren't hardcoded. Use the factory
    to create a speaker and have the repository return the designated speaker.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，如果值不是硬编码的，那就很理想了。使用工厂创建一个说话者，并让存储库返回指定的说话者。
- en: '[PRE79]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: To get this to pass requires a modification to `IRepository`, `FakeRepository`,
    and `Service`.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 要使这个测试通过，需要对`IRepository`、`FakeRepository`和`Service`进行修改。
- en: '`IRepository`:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '`IRepository`:'
- en: '[PRE80]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '`FakeRepository`:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '`FakeRepository`:'
- en: '[PRE81]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '`Service`:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '`Service`:'
- en: '[PRE82]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: All previous tests to `ItReturnsSpeakerFromRepository` can now be deleted. These
    were all yak shaving in order to get to this point.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 所有之前的`ItReturnsSpeakerFromRepository`测试现在都可以删除。这些都是为了达到这个目的而进行的繁琐工作。
- en: Now, to ensure that this will work with numerous values, convert the last test
    to a set of theories.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了确保这可以与多个值一起工作，将最后一个测试转换为理论集。
- en: '[PRE83]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: All the tests should pass. If for some reason a failing test is encountered,
    do not proceed until the failing test is resolved.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 所有测试都应该通过。如果由于某种原因遇到失败的测试，不要继续，直到失败的测试得到解决。
- en: Testing exception cases
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试异常情况
- en: Testing exception cases is a very important step. In this case, the business
    has defined a case where we will return a SPEAKER NOT FOUND error if the speaker
    does not exist. It is also important for the developer to consider any significant
    edge cases the business has missed. Discuss them with the business if you can
    and get them added to the spec.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 测试异常情况是一个非常重要的步骤。在这种情况下，业务已经定义了一个情况，即如果说话者不存在，我们将返回SPEAKER NOT FOUND错误。对于开发者来说，考虑业务可能遗漏的任何重大边缘情况也很重要。如果可能的话，与业务讨论它们，并将它们添加到规范中。
- en: Now test that the speaker must exist.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 现在测试说话者必须存在。
- en: '[PRE84]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: And make it pass.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 并使其通过。
- en: '[PRE85]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Now, verify that the speaker is not deleted. If it is deleted, throw the same
    `SpeakerNotFoundException`*.*
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，验证说话者没有被删除。如果被删除，则抛出相同的`SpeakerNotFoundException`*.*
- en: '[PRE86]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: The simplest, most effective way to make this test pass is to throw an exception
    if the speaker found has been deleted. Make the necessary change to the `Get`
    method.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 使这个测试通过的最简单、最有效的方法是在找到的说话者已被删除时抛出异常。对`Get`方法进行必要的更改。
- en: '[PRE87]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: Summary
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Now, you should feel fairly comfortable with the requirements surrounding the Speaker
    Meet application and have had a decent introduction to the API, Service, and Repository
    layers for the Speaker section of the back-end application. Mocks and Fakes continue
    to play a role in the Test-Driving of the program.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该对围绕“说话者见面”应用的要求感到相当舒适，并且已经对后端应用说话者部分的API、Service和Repository层有了良好的介绍。Mocks和Fakes在程序的测试驱动中继续发挥作用。
- en: In [Chapter 8](part0277.html#885BQ0-d186949d2da74f5c95dd1712efae1195), *Abstract
    Away Problems*, more will be discussed with respect to abstractions. The models
    for `SpeakerSummary` and `SpeakerDetail` will be grown to include more properties.
    Additional details will be provided on how best to increase the functionality,
    and with it the complexity, of the application.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第8章](part0277.html#885BQ0-d186949d2da74f5c95dd1712efae1195)“抽象问题”中，将讨论更多关于抽象的内容。`SpeakerSummary`和`SpeakerDetail`的模型将扩展以包含更多属性。将提供更多关于如何最佳地增加应用程序的功能和复杂性的详细信息。
