- en: AR for Marketing with EasyAR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will introduce you to EasyAR, an easy and intuitive AR SDK with
    multiple functionalities that can be used alone or, like in this chapter, integrated
    into Unity 3D. You will learn what image-based AR is and how it works with EasyAR by
    using your own images as markers. You will also learn how to import a custom 3D
    model into Unity to display it using AR over an image marker. Finally, you will
    create an augmented catalog where your furniture will come to life.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter has two main goals: to learn EasyAR and its features and to understand
    the possibilities of AR as a marketing tool. Nowadays, EasyAR is, along with Vuforia,
    one of the most versatile AR SDKs that can be used for many purposes. By the end
    of this chapter, you will have the basic skills to continue improving the current
    project or create new and improved ones by exploring the rest of the functionalities EasyAR has
    to offer. As you will see, AR is a very powerful marketing tool for different
    purposes, such as impacting the user, presenting the product in a more visual
    and appealing way, and offering discounts and prizes that are integrated into
    the AR experience. The idea of this chapter is that, by the end of it, you will
    understand the basic use of AR in this field so that you can explore its possibilities
    afterward.'
  prefs: []
  type: TYPE_NORMAL
- en: Important! In this chapter, we will be using Unity 3D, so if you haven't done
    it already, we recommend that you read [Chapter 2](54a1260e-a741-4eb5-9c98-01350fcba94b.xhtml),
    *Introduction to Unity for AR Development*, first to familiarize yourself with
    its layout, nomenclature, and features.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using AR for marketing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding EasyAR
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building image-based AR
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with custom 3D models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an AR catalog
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The technical requirements for this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: A Unity 3D-supporting computer (see the latest requirements here: [https://unity3d.com/es/unity/system-requirements](https://unity3d.com/es/unity/system-requirements)). This
    chapter's example project has been developed on a Windows 10 x 64 computer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unity 3D (2019.1.2f1 in this book).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft Visual Studio Community 2017 (included in the Unity installation).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EasyAR SDK (3.0.1 in this book).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A mobile device with Android 4.2 and above, or iOS 8.0 and above (EasyAR requirements: [https://www.easyar.com/doc/EasyAR%20SDK/Getting%20Started/3.0/Platform-Requirements.html](https://www.easyar.com/doc/EasyAR%20SDK/Getting%20Started/3.0/Platform-Requirements.html)). The
    project has been tested on a Samsung Galaxy A5 (2017) and a Pocophone F1.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The resources and code files for this chapter can be found here: [https://github.com/PacktPublishing/Enterprise-Augmented-Reality-Projects/tree/master/Chapter05](https://github.com/PacktPublishing/Enterprise-Augmented-Reality-Projects/tree/master/Chapter05).
  prefs: []
  type: TYPE_NORMAL
- en: The project in this chapter has been tested using a Windows 10 PC, and a Samsung
    Galaxy A5 (2017) and Pocophone F1 Android devices. For iOS development, you will
    also need to develop using an Apple computer because Unity will build an Xcode
    project.
  prefs: []
  type: TYPE_NORMAL
- en: Using AR for marketing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Marketing is one of the first fields where AR landed when it first began. The
    visual impact of this technology makes it very attractive to potential customers,
    and it can be used from generating a *wow effect* to explaining the qualities
    of the products.
  prefs: []
  type: TYPE_NORMAL
- en: 'When it began, AR was mainly used to impact users. A new technology, close
    to the concept of holography, that let us see ourselves and others surrounded
    by virtual elements and characters, was a good enticement. Big brands started
    using it in commercial centers where people could see themselves on a big screen
    next to virtual animals, dinosaurs, or famous characters. With mobile devices
    being widespread, AR marketing techniques have changed: the user is now in charge
    of the experience and can interact with it. Brands could now go beyond the *wow*
    effect and create functional experiences to promote and sell their products. Examples
    of this include augmented catalogs that show the products in 3D over their flat
    images, virtual mirrors where you can buy the glasses that you are trying on in
    AR, packages that come to life to explain the elements inside the fabrication
    process, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: The main idea behind AR's marketing success is that it has to be meaningful
    and engaging to make sure that users will want to download the app and use it
    and, after the experience, they will remember your brand, will return to you,
    or will have purchased from you.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to use AR to create a furniture catalog where
    chairs will come to life from its pages. We will also give users the possibility
    to change these chairs' colors.
  prefs: []
  type: TYPE_NORMAL
- en: When focusing on using mobile devices to view the catalog's pages, we want our
    potential customers to see the product from all its angles so that they can get
    a better idea of what they are buying and feel more attached to the product. The
    possibility of customizing certain aspects of the product, such as its color,
    in real-time can help spark an interest in it.
  prefs: []
  type: TYPE_NORMAL
- en: For our project, we will be using the real catalog pages and 3D models from
    the company Euro Seating ([https://www.euroseating.com/en/](https://www.euroseating.com/en/)),
    a seating manufacturer that's present in more than 100 countries all over the
    world. Using their high-quality 3D models and real catalog will help us visualize
    this project as a real-life AR application that can be used in any other marketing
    context.
  prefs: []
  type: TYPE_NORMAL
- en: The models and images that will be used in this chapter have been released by
    the company for their use in the context of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Before we start working on this project, let's have a quick look at what EasyAR
    is and how to integrate it into Unity.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding EasyAR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'EasyAR is a multiplatform augmented reality SDK for Android, iOS, UWP, Windows,
    Mac, and Unity editor. An AR engine allows us to create AR solutions in an easy
    way and offers multiple AR features, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Planar image tracking**: A technology that recognizes and tracks the position,
    rotation, and scale of a previously selected image in the real world, such as
    a book cover, photograph, or a business card.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Surface tracking (SLAM)**: A technology to detect surfaces and keep track
    of the objects within it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**3D object tracking**: A technology to localize and track the position and
    orientation of real 3D objects instead of flat images.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Screen recording**: A feature that allows us to take videos of the AR scene
    while we are playing it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some of the main features of EasyAR are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: It has an intuitive target management interface so that targets can be generated
    at runtime without us having to upload or download anything from their website,
    such as other tools.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It supports both local and cloud recognition.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It supports multitracking (simultaneous multiple target tracking) of different
    targets and the same targets.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It supports 3D tracking to detect and track 3D objects with rich textures in
    real environments.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'EasyAR has a web-based platform through which users can register their projects
    and obtain the licenses that they need in order to test and release their applications.
    EasyAR SDK is available in two different kinds of editions:'
  prefs: []
  type: TYPE_NORMAL
- en: EasyAR SDK Basic is free for commercial use without any kind of limitations
    or watermarks. It offers AR capacities based on image targets, it can load and
    recognize up to 1,000 offline targets, and it supports multi-target tracking,
    surface recognition, transparent and streaming video playback, and QR recognition.
    We need to make it known that the app has been developed with EasyAR.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EasyAR SDK Pro includes all the features of the Basic edition, plus 3D object
    tracking, multi-type target detection, and screen recording. The Pro edition costs
    $499.00 per license key, but offers a free trial version with limited uses (up
    to 100 per day). A feature comparison, pricing, and payment details are listed
    on the EasyAR SDK product page [https://www.easyar.com/view/sdk.html](https://www.easyar.com/view/sdk.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For our project, the functionalities from the basic license will be enough.
    Let's get started with EasyAR.
  prefs: []
  type: TYPE_NORMAL
- en: Before we start using EasyAR SDK, we need to integrate it into Unity (take a
    look at [Chapter 2](54a1260e-a741-4eb5-9c98-01350fcba94b.xhtml), *Introduction
    to Unity for AR Development*, *Preparing your system for Unity* section to learn
    how to install and use Unity for the first time).
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to download and import EasyAR SDK into Unity, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create an account by navigating to EasyAR's web page at [https://www.easyar.com/view/signUp.html](https://www.easyar.com/view/signUp.html).
    You will need to accept the developer agreement to create one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After creating your account, you will receive a confirmation email so that you
    can activate it and log in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you're logged in, go to the EasyAR download page ([https://www.easyar.com/view/download.html](https://www.easyar.com/view/download.html))
    and, in the right-hand column, in the Unity Packages section, select EasyARSense_3.0.1-final_Basic_Unity.zip to
    download it. This package contains the engine and the basic examples for the different
    uses of the tool. Unzip it to obtain the `.unitypackage` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we can create the Unity project. Open the Unity Hub and, from the top
    bar, click on NEW:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/546df083-c1ad-4a74-b857-0145b74ede9e.png)'
  prefs: []
  type: TYPE_IMG
- en: Opening Unity Hub to create a new project
  prefs: []
  type: TYPE_NORMAL
- en: 'Give the project a Name and a Location and click on CREATE:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/647581e8-eb46-4b3d-8151-3ac4e8bba705.png)'
  prefs: []
  type: TYPE_IMG
- en: Giving the project a name and location
  prefs: []
  type: TYPE_NORMAL
- en: Once the project has been created, import the EasyAR package into Unity. To
    do so, once you've unzipped the compressed file, you can either double-click on
    the resultant `.unitypackage` file (the quickest way) or, from inside Unity, you
    can click on Assets|Import Package|Custom Package... and select the `.unitypackage`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A new window will appear with all the files inside the EasyAR package. Click
    on Import:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f680ba2a-dbd5-40c1-893b-3b8b419a1ec3.png)'
  prefs: []
  type: TYPE_IMG
- en: Importing EasyAR SDK into Unity
  prefs: []
  type: TYPE_NORMAL
- en: 'As you will see, four new folders will appear on your Project window: EasyAR
    and Plugins, which include the main resources and code to build EasyAR for different
    platforms, and Samples and StreamingAssets, which contain the sample resources
    and code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8a9d3cba-5468-4922-9551-9a273418fd4c.png)'
  prefs: []
  type: TYPE_IMG
- en: Four new folders have been added to the project
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we have a new clean project with the EasyAR engine and samples
    included. In the next section, we will learn how to use it to build an app that
    detects a real image and displays a virtual cube on it.
  prefs: []
  type: TYPE_NORMAL
- en: Building image-based AR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can build AR using different techniques; the most common one is image-based
    AR, which consists of tracking a previously selected image (target) and superposing
    the virtual content to it while taking into account the image's position, rotation,
    and size. This kind of tracking requires the use of different algorithms that
    differentiate images one from another through characteristic points of the design,
    and position the image in three dimensions on the camera feed. Don't worry—EasyAR
    will do this work for you. All you will need to do is decide which images will
    act as the targets and what virtual content will go on top of them.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create this project, we will use EasyAR''s ImageTarget sample project as
    a reference since it already has all the components we need for our app. But before
    we start with the AR elements, we will set up our project folders:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we are going to do is create our personal `Assets` folder,
    `@MyAssets`, to differentiate it from the rest of the assets we''ve imported into Unity.
    Here, we will add all the external resources, such as marker images and 3D models.
    For that, right-click on the Project window and select Create|Folder. Name it
    `@MyAssets`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7ebc128e-cb27-40e2-be32-afff6c5c28f5.png)'
  prefs: []
  type: TYPE_IMG
- en: Create a new folder under the main Assets folder and call it @MyAssets
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside this, create three other folders called `Images`, `Models`, and `Scripts`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/684d9859-15d8-4541-9820-b68a13f362d8.png)'
  prefs: []
  type: TYPE_IMG
- en: '@MyAssets folder with the three folders inside it'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: This project currently has six folders under the `Assets` folder. As
    you can see, projects tend to increase in size quickly and before we realize it,
    our resources are lost in the chaos of folders and files. Taking a couple of minutes
    to create a basic structure for our project folders is always good practice.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can create our AR scene. As we mentioned earlier, we will use EasyAR''s
    sample scene as a reference. To do that, from the Project window, double-click
    on the HelloAR_ImageTarget scene located at Assets|Samples|Scenes to open it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2e6487aa-aac0-408f-994b-050f7267160a.png)'
  prefs: []
  type: TYPE_IMG
- en: The HelloAR_ImageTarget sample scene
  prefs: []
  type: TYPE_NORMAL
- en: Here, we have all the elements we need to replicate our own AR project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, click on File|Save As... and save the scene inside the Assets|Scenes folder
    with the name `ARScene`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6b673900-3aac-4055-a0f7-94c165d30f8b.png)'
  prefs: []
  type: TYPE_IMG
- en: Saving the scene with another name
  prefs: []
  type: TYPE_NORMAL
- en: By doing this, we've created a duplicate of the sample scene. If anything happens
    to our scene, we can always go back to the original one.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the initial scene, we can take a look at each component and
    customize them for our needs.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding our AR scene
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An AR scene has two main components that are common to any image-based AR SDK:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The ARCamera**: The camera object that will receive the feed from the camera
    device and process those frames in search of the selected image (target).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The ImageTarget**: The representation of the real image where we will put
    the virtual elements. When the camera finds this ImageTarget in the real world,
    it shows the virtual elements attached to it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In EasyAR, we have three main elements (apart from the Directional Light):'
  prefs: []
  type: TYPE_NORMAL
- en: The Main Camera, which is the element that will render the image coming from
    our mobile device.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'EasyAR_Setup, which is in charge of the main operations of the app, such as
    initializing and handling the EasyAR engine, attaching the physical camera device
    to the Main Camera element of the scene, or implementing the image target detection
    and tracking through the ImageTracker:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/edc5513f-49fb-456d-8600-6a001f9df4e5.png)'
  prefs: []
  type: TYPE_IMG
- en: The EasyAR_Setup element and its elements
  prefs: []
  type: TYPE_NORMAL
- en: 'ImageTarget, which is the representation of the image we want to recognize.
    It contains the virtual elements that will appear and disappear when the image
    is detected/lost in the real world. In this case, the ImageTarget already comes
    with two children: a Quad, which represents the image we will track, and a Cube,
    which we will use to initially test the scene. The values of the image to recognize
    appear in the Inspector window in the Image Target Controller, as shown in the
    following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/fb508f0f-c89e-4172-9f69-fb16572479cd.png)'
  prefs: []
  type: TYPE_IMG
- en: ImageTarget with its children on the left and the component values on the right
  prefs: []
  type: TYPE_NORMAL
- en: 'The parameters in the Image Target Controller are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Target Name: The target''s name. This doesn''t have to be the image''s name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Target Path: This is the full path to the image we want to use as a target.
    It's directly related to the Type option.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Target Size: Size of the target. We will usually leave it at `1`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Type: Whether the image of the target will be stored inside the assets of the
    project (specifically, the `StreamingAssets` folder, which we already have in
    our Project window) or if the Target Path is absolute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Image Tracker: This is the ImageTracker that will search for this ImageTarget
    in the camera feed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Target Type: Here, we will be using the first option, Local Image, since our
    image will be included locally inside the project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have seen the main elements of the scene, the next thing we need
    to do is create our own target.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the target
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create our target. We''ll start by adding the necessary images and resources
    to our project. Follow these steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Drag the `Target_Maia.jpg` image located in the `Images` folder from the project
    resources provided to the `StreamingAssets` folder, and the `Target_Maia_texture.jpg` image to
    our`@MyAssets/Images` folder, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5346fd8d-a2d6-487d-a10e-1e00c026d635.png)'
  prefs: []
  type: TYPE_IMG
- en: Target_Maia.jpg and Target_Maia_texture.jpg images in their respective folders
  prefs: []
  type: TYPE_NORMAL
- en: The first image will be our target. We will use the second image, which is smaller
    than the first one, to guide us on the target's size in the editor.
  prefs: []
  type: TYPE_NORMAL
- en: We can't reuse the image from the `StreamingAssets` folder because the files
    in this folder are not processed by the Unity editor, so they can't be used inside
    the scene directly like regular files.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Hierarchy window, select the ImageTarget and change the Name and Path
    values in the Inspector window, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1181f49f-436f-4c7f-86e5-2ed936290923.png)'
  prefs: []
  type: TYPE_IMG
- en: Image Target Behaviour parameters
  prefs: []
  type: TYPE_NORMAL
- en: With these parameters, we are telling ImageTracker to find the target called `Target_Maia.jpg` inside
    the streaming assets of the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: You can use the folders inside the `StreamingAssets` folder to organize
    your targets. In that case, you will have to add the folder to the Target Path
    property (for example, `MyFolder/Target_Maia.jpg`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The ImageTarget doesn''t have an image associated with it, meaning that we
    can''t actually see it in the editor. To visualize how our target will look, and
    especially to see how the virtual content will look over the real image (size,
    position), we will use the Quad element we already have as a child of the ImageTarget.
    By the end of the project, when we no longer need it, we will delete this Quad
    element. Drag the `@MyAssets/Images/Target_Maia_texture` image from the Project
    window to the Quad to make it its texture:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d3edb798-81ec-4c2d-bdd3-fd881800b87c.png)'
  prefs: []
  type: TYPE_IMG
- en: Target_Maia_texture being dragged to the Quad
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we have to adjust the aspect ratio of the Quad so that it matches our
    image''s aspect ratio. We''ll do that by setting the Y scale to `0.7`, as shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/23f61534-7e0a-43e2-87d9-89a84944fa1e.png)'
  prefs: []
  type: TYPE_IMG
- en: The Quad's Transform component and its values
  prefs: []
  type: TYPE_NORMAL
- en: Our scene is ready. We have the Main Camera, the EasyAR_Setup, our ImageTarget has
    the path to the image we want to recognize in it, and the Quad and a Cube are
    children so that they will appear when the marker is recognized. The next thing
    we need to do is get the EasyAR key to test the scene.
  prefs: []
  type: TYPE_NORMAL
- en: Obtaining the key
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To test the current scene, we need to add the key to the EasyAR GameObject.
    This key is generated by EasyAR to license the app:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the EasyAR develop center ([https://www.easyar.com/view/developCenter.html#license](https://www.easyar.com/view/developCenter.html#license)),
    log in if you aren't already, and click on Add SDK License Key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'There, select EasyAR SDK Basic and provide the following details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'App Name: `AR Catalogue`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bundle ID (iOS): `com.banana.arcatalogue` (you only need to fill this in if
    you are going to build your app on iOS)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Package Name (Android): `com.banana.arcatalogue` (you only need to fill this
    in if you are going to build your app on Android)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These names correspond to the app name and bundles (*com.companyname.productname*)
    in Unity.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to change these names in the future, you will have to make sure
    to change them in the key generation panel and copy/paste the resulting key into
    Unity again.
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the created key in the panel and copy the SDK License Key (valid for EasyAR
    SDK 3.x) into the Easy AR Key element located in Assets|EasyAR|Common|Resources:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/02201c86-3071-426a-8a91-bb036b0df763.png)'
  prefs: []
  type: TYPE_IMG
- en: EasyARKey settings script
  prefs: []
  type: TYPE_NORMAL
- en: Once we have the key, we are ready to test the scene.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the scene
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s test the scene: press *Ctrl* + *S* to save everything again, make
    sure you have a webcam connected to your computer and hit the play button at the
    top of the Toolbar. The system should launch the webcam automatically. If you
    point at the marker (either printed or displayed in the screen), you should see
    the quad in the background and the cube popping from it in the Game view:'
  prefs: []
  type: TYPE_NORMAL
- en: To view the scene in full-screen mode, you can press Maximize on Play in the
    top right of the Game view before pressing play.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4889b53e-6ea7-4868-9637-b753ac862afb.png)'
  prefs: []
  type: TYPE_IMG
- en: The Game window maximized, showing the cube appearing in AR over the target
  prefs: []
  type: TYPE_NORMAL
- en: Hit the play button again to stop the simulation.
  prefs: []
  type: TYPE_NORMAL
- en: '**Important!** Remember that to hit the play button to stop the simulation
    or any changes that are made in the scene afterward while you''re still in simulation
    mode won''t be saved.'
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you can't see the AR scene correctly, you can go to the Console tab (it's
    in the bottom bar or the tab next to the Game view) and look at the information
    there.
  prefs: []
  type: TYPE_NORMAL
- en: 'If everything worked correctly, it should show only information messages, namely
    the successful initialization of EasyAR, its version, and so on. However, if there
    is an error message of 404 Not Found, this means that the target has not been
    set up properly. Please review all the steps, especially the Path parameter in
    the ImageTarget to make sure it''s pointing to the correct file. In the following
    screenshot, the target name is `Target_Maia2.jpg` instead of `Target_Maia.jpg`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/45350b9c-c471-4d95-bf2d-7a2937ba699f.png)'
  prefs: []
  type: TYPE_IMG
- en: The console showing common information messages and an error
  prefs: []
  type: TYPE_NORMAL
- en: In any case, you can try to troubleshoot the errors either in the Unity forums
    ([https://forum.unity.com/](https://forum.unity.com/)) or in the EasyAR forums
    ([https://forum-test.easyar.com/](https://forum-test.easyar.com/)).
  prefs: []
  type: TYPE_NORMAL
- en: This step of testing the scene is not necessary, although it's highly recommended.
    Building an app into a device takes time, so it's advisable to test it first and
    make sure it works as you want it to.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's build the app.
  prefs: []
  type: TYPE_NORMAL
- en: Building the app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To build a new Android app, there are some steps you will always have to follow:'
  prefs: []
  type: TYPE_NORMAL
- en: The first thing you need to do is select the platform. For that, click on File|Build
    Settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Add Open Scenes to add our current scene to the (empty) list of scenes
    that will be built in the app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Under Platform, select Android and click on Switch Platform. Wait until Unity
    recompiles the resources for the selected platform:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00344579-73e2-4330-ab0d-bc617b599db0.png)'
  prefs: []
  type: TYPE_IMG
- en: The Build Settings window with the current scene added and the Android platform
    selected
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, click on Player Settings... to configure the app settings. In the pop-up
    window, we are going to change a few things for the time being:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Company Name: `Banana`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Product Name: `AR Catalogue`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These names are the same ones we used in the generation of the EasyAR key code.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following image shows the Project Settings window with the newly added
    Company Name and Product Name fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d4378309-a5cd-40c0-8221-6f819e827595.png)'
  prefs: []
  type: TYPE_IMG
- en: Filling in the company and product names in Project Settings
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, on Other Settings|Identification, set the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Package name: `com.banana.arcatalogue` (make sure it matches the name from
    the EasyAR key generation, otherwise the app will launch an error on its initialization
    saying the package name doesn''t match the key)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Version: `1.0`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Minimum API Level: `Android 5.0 ''Lollipop'' (API level 21)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Target API Level: `Automatic (highest installed):`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: According to EasyAR's documentation, the SDK is compatible with Android 4.2
    and above, but for performance reasons, and in order to have a fluid AR experience
    on users' devices, we recommend setting the minimum API level to 5.0.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/50277197-413b-4e50-a372-2fa284426ea4.png)'
  prefs: []
  type: TYPE_IMG
- en: Identification section inside the Other Settings tab
  prefs: []
  type: TYPE_NORMAL
- en: 'In case you have Android SDK installed outside Unity, before opening the Player
    Settings, Unity will most likely tell you it found an Android SDK and whether
    you want to use it. If that''s the case, click Yes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/70cf358f-00ee-43b5-a7c6-f1646b4cf6d1.png)'
  prefs: []
  type: TYPE_IMG
- en: Using the installed SDK if we already have it installed
  prefs: []
  type: TYPE_NORMAL
- en: 'Close the Player Settings window, connect your mobile device to the computer
    with a USB cable, and make sure your device has USB debugging activated in order
    to deploy the app directly into it from Unity. To activate this option, the general
    steps are as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable Developer Mode by going to Settings|About Device.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, tap seven times on the build number until a notification appears stating
    that the Developer Options are available.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Go to the Developer Options and activate USB Debugging to allow the computer
    to install and start the app on it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Important!** As we mentioned earlier, these steps are general. If you have
    any doubts, please try to find the specific case for your device as the names
    of the options may vary from one manufacturer to another.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, click on Build And Run in the Build Settings window, call your APK `arcatalogue.apk`,
    and hit Save. Unity will immediately start the compilation by looking for the
    Android SDK *(*if it doesn't detect it, it will ask you to select the folder where
    it's installed*)* and searching for a suitable device (if the device isn't plugged
    in correctly or USB Debugging isn't activated, it will tell you it can't find
    the device). Then, it will start the building process until it copies the APK
    into the device and launches it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once the app has launched, point the camera to the target in order to see the
    cube:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/ca8a9d00-c772-4f0c-a530-61f0701208fa.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot of the cube over the target on a mobile device
  prefs: []
  type: TYPE_NORMAL
- en: If for any reason, you don't want/can't build the APK into the mobile device,
    you can use Build instead of Build And Run to create the APK without installing
    it.
  prefs: []
  type: TYPE_NORMAL
- en: When the compilation process finishes, you will have to manually copy the resulting
    APK into your device and install it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: This process is for Android devices only. To compile the app on an iOS
    device, you have to build and run the Unity project from an Apple computer and,
    when the building process finishes, it will automatically launch Xcode where the
    building will end up (you will have to assign your Apple ID in order to play the
    app on an iOS device, just like you need to with any other iOS app developed in
    Xcode).'
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you have learned how to use EasyAR to detect an image and display
    a virtual cube on it. Now, we will substitute the test cube for an external 3D
    model we will import into our project.
  prefs: []
  type: TYPE_NORMAL
- en: Working with custom 3D models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we learned how to create a simple AR app with EasyAR
    to display a cube. In this section, we are going to import our own 3D model into
    Unity to visualize over the target and play with its materials and textures.
  prefs: []
  type: TYPE_NORMAL
- en: For this project, we are going to work with `fbx`, an exported format that allows
    us to include materials, textures, and animations. To see a list of all the exported
    and native 3D formats Unity accepts, please visit [https://docs.unity3d.com/Manual/3D-formats.html](https://docs.unity3d.com/Manual/3D-formats.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Before including the models in our project, we will make a few changes to our
    scene to improve it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select Directional Light in the Hierarchy window. Then, in the Inspector window,
    set the Shadow Type to No Shadows. Shadows are quite resource-consuming  and,
    in this case, the AR experience will benefit from not having shadows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b1f4166a-3e06-4ed8-9d30-652a141d1f92.png)'
  prefs: []
  type: TYPE_IMG
- en: Directional Light properties in the Inspector window
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, select ImageTarget and change its Transform values so it rotates on the
    x axis. This way, in the scene, the objects will appear to be popping up from
    the ground:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/503818a1-c5f2-45c8-b015-5b17070e6254.png)'
  prefs: []
  type: TYPE_IMG
- en: ImageTarget Transform values
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, select Main Camera and rotate and move it so that it''s pointing at
    the target:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/89e3c519-631f-409c-8b6f-c4205535a693.png)'
  prefs: []
  type: TYPE_IMG
- en: Main Camera Transform values
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, it''s time to include the 3D models. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Delete the Cube from inside ImageTarget in the Hierarchy window by right-clicking
    on it and selecting Delete, or just by selecting it and pressing *Delete* on your
    keyboard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0346646c-90bc-43bf-b231-81eff556c250.png)'
  prefs: []
  type: TYPE_IMG
- en: Deleting the Cube model
  prefs: []
  type: TYPE_NORMAL
- en: Drag the `Models/Maia` folder from the code resources provided into the Project window
    on `@MyAssets/Models`. This will import the `.fbx` mesh object and its texture
    files inside the `textures` folder, as shown in the following screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Drag the `maia.fbx` file inside ImageTarget. Remember to make sure it''s inside
    ImageTarget so that it appears/disappears when the target does. Move, rotate,
    and scale the model until it looks good over the target:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/27013ab8-85e0-43d6-af18-e5ed143ccfd2.png)'
  prefs: []
  type: TYPE_IMG
- en: The maia model inside the target
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, hit the play button at the top of the Toolbar to test the current scene.
    The moment the target is detected, the seat will appear:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3ade5339-d007-4126-ae38-b243d3ed9f31.png)'
  prefs: []
  type: TYPE_IMG
- en: The seat appears when the target is detected
  prefs: []
  type: TYPE_NORMAL
- en: Hit the play button once more to stop the simulation and then save the scene
    (*Ctrl* + *S*). Connect the mobile device to your computer and press *Ctrl* +
    *B*, or go to File|Build Settings|Build And Run, to build the app into your device.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have our basic AR scene, in the next section, we will create our
    AR catalog by adding another chair and creating the UI to allow users to interact
    with our furniture.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an AR catalog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have created the basic scene, we will create a small AR catalog:'
  prefs: []
  type: TYPE_NORMAL
- en: We will use two ImageTargets to show two different chairs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will allow users to change the color of the chairs while they are looking
    at them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying the AR scene
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to modify the current AR scene by adding a new
    ImageTarget. To do this, we will follow the same steps that we followed in the
    previous section:'
  prefs: []
  type: TYPE_NORMAL
- en: From the resources of the project, drag the `Target_Prince.jpg` image into the `Assets/StreamingAssets` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, drag the `Target_Prince_texture.jpg` image into the `Assets/@MyAssets/Images` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8b300b54-127d-4ee8-9207-ad98d9999abc.png)'
  prefs: []
  type: TYPE_IMG
- en: Target_Prince and Target_Prince_texture in their respective folders
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, drag the `Prince` folder, which contains the model, into `Assets/@MyAssets/Models`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d8f05a51-3720-49ce-955e-d7a0c49cc1a1.png)'
  prefs: []
  type: TYPE_IMG
- en: The prince model
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click the ImageTarget and select Duplicate so that we can use it as template
    for the new ImageTarget:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cb18f1ae-ed52-4350-946d-96402a4551bb.png)'
  prefs: []
  type: TYPE_IMG
- en: Duplicating the ImageTarget
  prefs: []
  type: TYPE_NORMAL
- en: Rename the first ImageTarget to `ImageTargetMaia` and the current one to `ImageTargetPrince`
    so that you can distinguish between them. Move them on the scene so that they
    don't overlap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the following Target Name and Path parameters into the Image Target Controller of
    our ImageTargetPrince in the Inspector window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f7873427-c8f0-4ca2-903d-d700e781c817.png)'
  prefs: []
  type: TYPE_IMG
- en: Image Target Controller parameters
  prefs: []
  type: TYPE_NORMAL
- en: Drag the `Target_Prince_texture.jpg` image from the `Assets/@MyAssets/Images`
    folder onto the Project window to the Quad of ImageTargetPrince in the Hierarchy
    window in order to apply it as a texture.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the maia model from ImageTargetPrince (right-click and Delete) and drag
    the prince model there instead.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move, rotate, and scale the prince model until it's in the middle of the marker
    and looks good.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows our scene with the two ImageTargets and their
    respective seats:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/75853f8e-0e7a-4017-980b-c00cff999ccd.png)'
  prefs: []
  type: TYPE_IMG
- en: The scene with the two targets and models
  prefs: []
  type: TYPE_NORMAL
- en: 'Before testing our scene, let''s hide the Quad objects so that they don''t
    appear in AR and we only see the chairs. For that, select both Quad GameObjects
    (*Ctrl *+left click for multiple selection) and uncheck their Mesh Renderer components:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/06fb0be6-e507-4416-aea6-a9438a8ce752.png)'
  prefs: []
  type: TYPE_IMG
- en: Hiding the Quad GameObjects
  prefs: []
  type: TYPE_NORMAL
- en: Now, hit play to test that everything is set up correctly. Point with the camera
    to one of the targets and then to the other to see the chairs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hit play again to stop the simulation and continue making changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the moment, ImageTracker of the EasyAR_Setup GameObject has been set to
    detect only one marker at a time. Let''s increase this value to `2` so that our
    users can see both chairs together:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/75c3f7ed-b9bf-44be-8383-6717b9f8006c.png)'
  prefs: []
  type: TYPE_IMG
- en: Changing the number of simultaneous targets
  prefs: []
  type: TYPE_NORMAL
- en: Now, test this out—you should see both chairs appear at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: The next thing we need to do is create the script that will let the user change
    the textures of the seats.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the controller script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to create a script that will control the scene
    and allow our users to change the textures of the seats. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In @MyAssets|Scripts, create a new C# script by right-clicking and selecting
    Create|New C# Script. Call it `MainController` and double-click on it to open
    it in Visual Studio:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8368436e-b918-4df8-b93b-e0fff782e303.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a new C# Script in the @MyAssets/Scripts folder
  prefs: []
  type: TYPE_NORMAL
- en: 'If you installed Unity by following the steps in [Chapter 2](54a1260e-a741-4eb5-9c98-01350fcba94b.xhtml),
    *Introduction to Unity for AR Development*, you will already have Visual Studio
    installed and configured, and it will open the script with the default code, as
    shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a97b27f0-f8e0-4f09-a9b5-ac875a3d9d83.png)'
  prefs: []
  type: TYPE_IMG
- en: MainController script in Visual Studio
  prefs: []
  type: TYPE_NORMAL
- en: 'If you installed Visual Studio prior to Unity or used another program such
    as MonoDevelop, you can configure Unity to open scripts with it by clicking on Edit|Preferences|External
    Tools|External Script Editor, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c00fba1d-773d-4505-bf86-8ed2d6f6cf71.png)'
  prefs: []
  type: TYPE_IMG
- en: Preferences window with Visual Studio assigned as the External Script Editor
  prefs: []
  type: TYPE_NORMAL
- en: 'In the script, start by adding the following lines after the class declaration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are declaring the `materials` array, which is where we will store the
    materials of both chairs. We will use it to change those materials' texture properties. The
    `textures` array will contain the actual images (red and blue) that we will apply
    to those materials. Both variables are public because we will initialize them
    from the Unity editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `Start()` method, add the following loop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: With this loop, we are assigning each material inside the `materials` array
    to the first image of the `textures` array.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the `Update()` method, we are going to create a new method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This method changes the texture (red or blue) of the materials of the chairs.
    It checks which texture is selected and assigns the other one to both chairs.
  prefs: []
  type: TYPE_NORMAL
- en: Now, go back to the Unity editor and drag the script to the EasyAR_Setup GameObject
    so that the script will affect the current scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remember that a script will only be executed if it's attached to one GameObject
    (or more) of the scene. Otherwise, it will only exist in the Projects window but
    not in the actual scene.
  prefs: []
  type: TYPE_NORMAL
- en: Since this script doesn't make direct reference to the element it's attached
    to, it could go on any element that is active in the scene all the time (so it's
    always available). We have put it in EasyAR_Setup because it's a root element
    that fulfills this rule.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unfold the two variables of the script, that is, Materials and Textures, and,
    in Materials, set Size to `2` and select tela and Material #5\. These are the
    materials that correspond to the fabric in each model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d12450a8-01ca-4493-8049-6b986ed1772c.png)'
  prefs: []
  type: TYPE_IMG
- en: Assigning the materials to the variables
  prefs: []
  type: TYPE_NORMAL
- en: 'In Textures, set Size to `2` and select the red and the blue elements, that
    is, Acapulco 3011 and Acapulco PANTONE 2935 C:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/029cd049-d80b-4809-a93a-714bf5a8fe1c.png)'
  prefs: []
  type: TYPE_IMG
- en: Assigning the textures to the variables
  prefs: []
  type: TYPE_NORMAL
- en: The Controller script is ready. Now, we have to create the user interface and
    the button that will trigger the color change through the `ChangeColor()` method
    we have just created.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create a simple interface to allow our users to change the features
    of the AR objects they are seeing. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, right-click on the Hierarchy window and select UI|Canvas. The Canvas
    element is the main element on the Unity interface and contains all the other
    elements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fec51d15-663b-43bf-9a39-32b4780fb0f2.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a Canvas element on the scene
  prefs: []
  type: TYPE_NORMAL
- en: By default, the Canvas is located in the (0,0) point, facing back, overlaying
    the whole 3D scene, and with the current screen size. Double-click on its name
    in the Hierarchy window so that the scene focuses on it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Inspector window, include the following values for Canvas Scaler:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'UI Scale Mode: Scale With Screen Size. With this parameter, we are telling
    the canvas to adapt itself to the different screen sizes (useful when compiling
    for different mobile devices).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For Reference Resolution, we will use `1280` x `720`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Screen Match Mode allows us to adapt the UI elements to the width and/or height
    of the screen. A value of `0.5` tells it to adapt to both:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/2cf66ef6-f684-4ebd-a239-6b6dafaa8929.png)'
  prefs: []
  type: TYPE_IMG
- en: Canvas Scaler values on the Inspector window
  prefs: []
  type: TYPE_NORMAL
- en: 'To manipulate the UI elements (move, scale, and so on), select their specific
    tool in the toolbar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3c51c2b7-b993-4d5e-ae82-452a53d4e3ef.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We are going to use an icon for our color button. For that, import the `circle_icon.png`
    image into `Assets/@MyAssets/Images`. Select it in the Project window. Then, in
    the Inspector window, modify its Texture Type so that it''s Sprite (2D and UI)
    in order to use it in the UI. Then press Apply to save this change:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a12b98da-01de-4613-9c26-fc90666bbd29.png)'
  prefs: []
  type: TYPE_IMG
- en: Converting circle_icon into a sprite image
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, right-click on Canvas in the Hierarchy window and select UI/Button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/29595d2f-5fc3-40a9-9849-e317fbb0d271.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a button inside the canvas element
  prefs: []
  type: TYPE_NORMAL
- en: 'We don''t need the text component that comes with the Button, so right-click
    on it and Delete it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4b02d15e-62a6-459c-a0f5-9d6eb551bcd6.png)'
  prefs: []
  type: TYPE_IMG
- en: Deleting the text component of the button
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the button''s name to `Color_button` and assign the icon we previously
    imported into its Image component to Source Image. Click on the Preserve Aspect checkbox
    to make sure it''s always round:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1f01c16b-e9b8-438e-9463-5f610fc46714.png)'
  prefs: []
  type: TYPE_IMG
- en: The Color_button image component in the Inspector window
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s place the button in the top-right corner of the screen. For the
    Rect Transform component, click on the square and select the top-right option
    to move the button''s anchors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b08afc56-276f-4671-a3b0-e590a0cd7969.png)'
  prefs: []
  type: TYPE_IMG
- en: Selecting the top-right anchor for the button
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, change the PosX, PosY, Width, and Height values to adjust the button''s
    position and scale, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ee2401cb-7b7e-4d72-aef9-671e0dd857df.png)'
  prefs: []
  type: TYPE_IMG
- en: The button's new Rect Transform values
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, with the button selected, under the Button component on the Inspector
    window, go to the `On Click ()` method and press the + symbol to create a new
    action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8ff41c9a-10aa-4c62-8795-e2f6d7898095.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a new action in the On Click() method
  prefs: []
  type: TYPE_NORMAL
- en: 'Drag the EasyAR_Setup element from the Hierarchy window to the None (Object)
    box and, from the drop-down menu on the right, select MainController|ChangeColor.
    With this, we are telling the UI that whenever the Color_button is pressed, the
    `ChangeColor()` method from the `MainController` class that''s attached to the
    EasyAR_Setup GameObject will be executed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dd26cb74-1cc4-4e0d-af5d-67a415f5cc51.png)'
  prefs: []
  type: TYPE_IMG
- en: Selecting the ChangeColor() method for the Color_button
  prefs: []
  type: TYPE_NORMAL
- en: 'Play the scene to test it. You will see that when you click on Color_button,
    the texture of the chairs changes. However, there is still a small detail: the
    button is not intuitive because it doesn''t change its own color. To solve this,
    we are going to add a few lines to our code in Visual Studio.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go back to Visual Studio and in the `MainController` script import the `UnityEngine`
    `UI` library at the beginning of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following variables *before* the `Start()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We'll use the first one to assign the button in Unity editor (that's why it's
    `public`) and the two colors as reference.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following line inside the `Start()` method, after the loop segment,
    to initialize the button to `red`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following lines *inside* the `ChangeColor()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are telling the button to evaluate the current color and, if it's `red`,
    to change it to `blue` and vice versa. This way, the button will change its color
    at the same time as the textures of the seats do.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, in the Unity editor, drag the Color_button GameObject to the Color_button
    variable on the `EasyAR_Setup` GameObject to assign it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0566cae6-2bd5-499e-bc09-3784bbf0d2d7.png)'
  prefs: []
  type: TYPE_IMG
- en: The Color_button GameObject dragged to the last variable of the Main Controller
  prefs: []
  type: TYPE_NORMAL
- en: Save and test the scene in the editor to see how the button changes color initially
    and whenever it's pressed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, Build And Run the app in your mobile device and enjoy seeing how the seats
    come to life in AR:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1af10cc5-713d-4bd7-809b-78abf4b16a82.png)'
  prefs: []
  type: TYPE_IMG
- en: Mobile phone screenshot with both seats in red
  prefs: []
  type: TYPE_NORMAL
- en: You can move the camera around the seats, get close to them, or move the targets
    to see them in detail. You can press the color button to switch their texture
    color. Now that the app is complete, you can even delete the Quad planes from
    the scene since they are no longer needed. With this, your project is ready.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to create an AR catalog using the EasyAR SDK.
    You learned how to import the SDK into Unity and create a scene showing a cube
    on an ImageTarget. Then, you learned how to import models from outside Unity and
    modify some of their features, such as materials and textures. Then, you merged
    the models into the initial scene to make a seat come to life from its catalog.
    Finally, you added a script and UI elements to control the color of the models.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you have acquired the basic skills to continue developing
    with EasyAR and try out some of its other features. For that, we recommend opening
    the rest of the sample scenes located at Assets | Samples | Scenes and try them
    out to understand how they work. You have also acquired an understanding of how
    AR can be used to create a catalog, magazine, or similar product for marketing.
    You can now improve this project in order to, for example, link the products with
    e-commerce, offering the consumer the full experience and attracting them to buy
    your products. You can now use basic tools to create your own AR experiences in
    marketing.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to use another SDK, Vuforia, to place
    the same seat models in a real environment, instead of using ImageTargets. You
    will learn how to use Vuforia's Ground Plane features to place and manipulate
    3D models on flat surfaces, such as tables or on the ground, to create an interactive
    retail experience.
  prefs: []
  type: TYPE_NORMAL
