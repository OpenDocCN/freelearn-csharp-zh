["```cs\nconst { series } = require('gulp');\n// Packages defined at the top\nconst gulp = require('gulp');\n// Tasks (no cleanup for Hello World) ;-)\nfunction testTask(done) {\n    console.log('Hello World! We finished a task!');\n    done();\n}\n// Global default and cleanup tasks\nexports.build = series(\n    testTask\n);\n```", "```cs\n/// <binding BeforeBuild='build' />\n```", "```cs\n// Packages defined at the top\nconst gulp = require('gulp'),\n      path = require('path');\n// define our paths for our app\nconst basePath = path.resolve(__dirname, \"wwwroot\");\n```", "```cs\n    const gulp = require('gulp'),\n          path = require('path'),\n          tsConfig = require(\"gulp-typescript\");\n    ```", "```cs\n    // define our paths for our app\n    const basePath = path.resolve(__dirname, \"wwwroot\");\n    const tsProject = tsConfig.createProject(path.resolve(basePath, 'tsconfig.json'));\n    ```", "```cs\n    const tsSource = path.resolve(basePath, \"src\");\n    ```", "```cs\n    const srcPaths = {\n        js: [\n            path.resolve(tsSource, '**/*.js')\n        ]\n    };\n    ```", "```cs\n    function ts_transpile(done) {\n        tsProject\n            .src()\n            .pipe(tsProject()).js\n            .pipe(gulp.dest(tsSource));\n        done();\n    }\n    function ts_clean(done) {\n        gulp.src(srcPaths.js, {allowEmpty: true})\n            .pipe(clean({ force: true }));\n        done();\n    }\n    ```", "```cs\n    // Global default and cleanup tasks\n    exports.build = series(\n        ts_clean,\n        ts_transpile\n    );\n    ```", "```cs\n    const srcPaths = {\n        js: [\n            path.resolve(tsSource, '**/*.js') // all *.js in every                                              folder\n        ],\n        jsBundles: [\n            path.resolve(tsSource, 'site.js') // specific files to                                              bundle/minify\n        ]\n    };\n    ```", "```cs\n    const destPaths = {\n        jsFolder: path.resolve(basePath, 'js') // wwwroot/js\n    };\n    ```", "```cs\n    /* JavaScript */\n    function js_bundle_min(done) {\n        srcPaths.jsBundles.forEach(file => {\n            const b = browserify({\n                entries: file, // Only need initial file, browserify                               finds the deps\n                transform: [['babelify', { 'presets': [\"es2015\"] }]]\n            });\n            b.bundle()\n                .pipe(source(path.basename(file)))\n                .pipe(rename(path => {\n                    path.basename += \".min\";\n                    path.extname = \".js\";\n                }))\n                .pipe(buffer())\n                .pipe(uglify())\n                .pipe(gulp.dest(destPaths.jsFolder));\n            done();\n        });\n    }\n    function js_clean(done) {\n        gulp.src(path.resolve(destPaths.jsFolder, '**/*.js'), { read: false })\n            .pipe(gp_clean({ force: true }));\n        done();\n    }\n    ```", "```cs\n    // Global default and cleanup tasks\n    exports.build = series(\n        ts_clean,\n        js_clean,\n        ts_transpile,\n        js_bundle_min\n    );\n    ```", "```cs\n<a asp-page=\"Index\">Go to Main Page</a>\n```", "```cs\n    Public static class SiteLinkExtensions\n    {\n        public static string HomeUrl(this UrlHelper helper) =>\n            helper.RouteUrl(new UrlRouteContext\n            {\n                RouteName = \"Default\",\n                Values = new\n                {\n                    Controller=\"Home\",\n                    Action =\"Index\"\n                }\n            });\n    }\n```", "```cs\nPublic static string DetailsUrl(this IurlHelper helper, string blogId) =>\n    helper.PageLink(\"Detail\", values: new { Id = blogId, area = \"admin\" });\n```", "```cs\n<a href=\"@Url.HomeUrl()\">Go to Main Page</a>\n```", "```cs\n    gp_sass = require('gulp-sass')(require(\"sass\"));\n    ```", "```cs\n    const sassSource = path.resolve(basePath, \"scss\");\n    ```", "```cs\n    const srcPaths = {\n        js: [\n            path.resolve(tsSource, '**/*.js') // all *.js in every                                              folder\n        ],\n        jsBundles: [\n            path.resolve(tsSource, 'site.js') // specific files to                                              bundle/minify\n        ],\n        sassSrc: [\n            path.resolve(sassSource, 'site.scss')\n        ]\n    }\n    ```", "```cs\n    const destPaths = {\n        jsFolder: path.resolve(basePath, 'js'), // wwwroot/js\n        cssFolder: path.resolve(basePath, 'css') // wwwroot/css\n    };\n    ```", "```cs\n    /* SASS/CSS */\n    function sass_clean(done) {\n        gulp.src(destPaths.cssFolder + \"*.*\", { read: false })\n            .pipe(gp_clean({ force: true }));\n        done();\n    }\n    function sass(done) {\n        gulp.src(srcPaths.sassSrc)\n            .pipe(gp_sass({ outputStyle: 'compressed' }))\n            .pipe(rename({\n                suffix: '.min'\n            }))\n            .pipe(gulp.dest(destPaths.cssFolder));\n        done();\n    }\n    ```", "```cs\n    // Global default and cleanup tasks\n    exports.build = series(\n        ts_clean,\n        js_clean,\n        sass_clean,\n        ts_transpile,\n        js_bundle_min,\n        sass\n    );\n    ```", "```cs\n    const moduleSource = path.resolve(__dirname, \"node_modules\");\n    ```", "```cs\n    const libSource = path.resolve(basePath, \"lib\");\n    ```", "```cs\n    const srcPaths = {\n        js: [\n            path.resolve(tsSource, '**/*.js') // all *.js in every                                              folder\n        ],\n        jsBundles: [\n            path.resolve(tsSource, 'site.js') // specific files to                                              bundle/minify\n        ],\n        sassSrc: [\n            path.resolve(sassSource, 'site.scss')\n        ],\n        // local dev (copy dist into lib)\n        lib: [\n            {\n                src: path.resolve(moduleSource, 'bootstrap/                dist/**/*'),\n                dest: path.resolve(libSource, 'bootstrap/')\n            },\n            {\n                src: path.resolve(moduleSource, '@fortawesome/                fontawesome-free/**/*'),\n                dest: path.resolve(libSource, 'fontawesome/')\n            }\n        ]\n    };\n    ```", "```cs\n    /* Copy Libraries to their location */\n    function copyLibraries(done) {\n        srcPaths.lib.forEach(item => {\n            return gulp.src(item.src)\n                .pipe(gulp.dest(item.dest));\n        });\n        done();\n    }\n    function cleanLibraries(done) {\n        srcPaths.lib.forEach(item => {\n            return gulp.src(item.dest + \"/*.*\")\n                .pipe(gp_clean({ force: true }));\n        });\n        done();\n    }\n    ```", "```cs\n    // Global default and cleanup tasks\n    exports.build = series(\n        cleanLibraries,\n        copyLibraries,\n        ts_clean,\n        js_clean,\n        sass_clean,\n        ts_transpile,\n        js_bundle_min,\n        sass\n    );\n    ```", "```cs\npublic static class BucksUrlExtensions\n{\n    public static string HomeUrl(this IUrlHelper helper) =>\n        helper.PageLink(\"/Index\")!;\n    public static string PrivacyUrl(this IUrlHelper helper) =>\n        helper.PageLink(\"/Privacy\")!;\n}\n```", "```cs\n    <footer class=\"border-top footer text-muted\">\n        <div class=\"container\">\n            &copy; 2023 - Buck's Coffee Shop - <a href=\"@Url.PrivacyUrl()\">Privacy</a>\n        </div>\n    </footer>\n```", "```cs\n<ul class=\"navbar-nav flex-grow-1\">\n    <li class=\"nav-item\">\n        <a class=\"nav-link text-dark\" href=\"@Url.HomeUrl()\">Home</a>\n    </li>\n    <li class=\"nav-item\">\n        <a class=\"nav-link text-dark\" href=\"@Url.PrivacyUrl()\">Privacy</a>\n    </li>\n</ul>\n```", "```cs\npublic IActionResult OnGet()\n{\n    return Redirect(Url.HomeUrl());\n}\n```", "```cs\n[HtmlTargetElement(\"offcanvas\")]\npublic class OffCanvasTagHelper: TagHelper\n{\n    [HtmlAttributeName(\"id\")]\n    public string Id { get; set; }\n    [HtmlAttributeName(\"tabindex\")]\n    public string TabIndex { get; set; }\n    public override async Task ProcessAsync(TagHelperContext context,\n        TagHelperOutput output)\n    {\n        var childData = (await output.GetChildContentAsync()).GetContent();\n        output.Attributes.Clear();\n        output.TagName = \"div\";\n        output.Attributes.Add(\"class\", \"offcanvas offcanvas-start\");\n        if (!string.IsNullOrEmpty(Id))\n        {\n            output.Attributes.Add(\"id \", Id);\n        }\n        if (!string.IsNullOrEmpty(TabIndex))\n        {\n            output.Attributes.Add(\"tabindex\", TabIndex);\n        }\n        output.Content.SetHtmlContent(childData);\n    }\n}\n```", "```cs\n[HtmlTargetElement(\"header\", ParentTag = \"offcanvas\")]\npublic class OffCanvasHeaderTagHelper: TagHelper\n{\n    public override async Task ProcessAsync(TagHelperContext context,\n        TagHelperOutput output)\n    {\n        var childData = (await output.GetChildContentAsync()).GetContent();\n        output.TagName = \"div\";\n        output.Attributes.Add(\"class\", \"offcanvas-header\");\n        var header = new TagBuilder(\"h5\")\n        {\n            TagRenderMode = TagRenderMode.Normal\n        };\n        header.Attributes.Add(\"id\", \"offcanvasLabel\");\n        header.AddCssClass(\"offcanvas-title\");\n        header.InnerHtml.Append(childData);\n        var button = new TagBuilder(\"button\")\n        {\n            TagRenderMode = TagRenderMode.Normal\n        };\n        button.AddCssClass(\"btn-close\");\n        button.Attributes.Add(\"type\",\"button\");\n        button.Attributes.Add(\"data-bs-dismiss\",\"offcanvas\");\n        button.Attributes.Add(\"aria-label\",\"Close\");\n        output.Content.AppendHtml(header);\n        output.Content.AppendHtml(button);\n    }\n}\n```", "```cs\n[HtmlTargetElement(\"body\", ParentTag = \"offcanvas\")]\npublic class OffCanvasBodyTagHelper: TagHelper\n{\n    public override async Task ProcessAsync(TagHelperContext context,\n        TagHelperOutput output)\n    {\n        var childData = (await output.GetChildContentAsync()).            GetContent();\n        output.TagName = \"div\";\n        output.Attributes.Add(\"class\", \"offcanvas-body\");\n        output.Content.SetHtmlContent(childData);\n    }\n}\n```", "```cs\n@addTagHelper *, BucksCoffeeShop\n```", "```cs\n<button class=\"btn btn-primary btn-sm\" type=\"button\" data-bs-toggle=\"offcanvas\" data-bs-target=\"#offcanvasExample\" aria-controls=\"offcanvasExample\">\n    Open\n</button>\n```", "```cs\n<offcanvas id=\"offcanvasExample\" tabindex=\"-1\">\n    <header>Buck's Coffee Shop</header>\n    <body>\n        <p>\n            Content for the offcanvas goes here.\n            You can place just about any Bootstrap\n            component or custom elements here.\n        </p>\n    </body>\n</offcanvas>\n```"]