["```cs\nusing System.Collections.Immutable;\nusing Microsoft.CodeAnalysis;\nusing Microsoft.CodeAnalysis.CSharp;\nusing Microsoft.CodeAnalysis.CSharp.Syntax;\nusing Microsoft.CodeAnalysis.Diagnostics;\nnamespace Roslyn.Extensions.CodeAnalysis\n  .ExceptionShouldNotBeSuffixed;\n[DiagnosticAnalyzer(LanguageNames.CSharp)]\npublic class Analyzer : DiagnosticAnalyzer\n{\n}\n```", "```cs\npublic override void Initialize(AnalysisContext context)\n{\n    context.EnableConcurrentExecution();\n    context.ConfigureGeneratedCodeAnalysis\n      (GeneratedCodeAnalysisFlags.None);\n    context.RegisterSyntaxNodeAction(\n        HandleClassDeclaration,\n        ImmutableArray.Create(\n            SyntaxKind.ClassDeclaration));\n}\n```", "```cs\npublic const string DiagnosticId = \"PP0001\";\npublic static readonly DiagnosticDescriptor BrokenRule =\n  new(\n        id: DiagnosticId,\n        title: \"ExceptionShouldNotBeSuffixed\",\n        messageFormat: \"The use of the word 'Exception'\n        should not be added as a suffix - create a well\n        understood and self explanatory name for the\n        exception\",\n        category: \"Naming\",\n        defaultSeverity: DiagnosticSeverity.Error,\n        isEnabledByDefault: true,\n        description: null,\n        helpLinkUri: string.Empty,\n        customTags: Array.Empty<string>());\npublic override ImmutableArray<DiagnosticDescriptor>\n  SupportedDiagnostics => ImmutableArray.Create\n    (BrokenRule);\n```", "```cs\n    void HandleClassDeclaration(SyntaxNodeAnalysisContext\n      context)\n    {\n        var classDeclaration = context.Node as\n          ClassDeclarationSyntax;\n        if (classDeclaration?.BaseList == null ||\n          classDeclaration?.BaseList?.Types == null)\n            return;\n        var classSymbol = context.SemanticModel\n          .GetDeclaredSymbol(classDeclaration);\n        if (classSymbol?.BaseType is null) return;\n        var exceptionType = context.Compilation\n          .GetTypeByMetadataName(\"System.Exception\");\n        if (SymbolEqualityComparer.Default.Equals\n          (classSymbol?.BaseType, exceptionType) &&\n            classDeclaration.Identifier.Text\n              .EndsWith(\"Exception\", StringComparison\n               .InvariantCulture))\n        {\n            var diagnostic = Diagnostic.Create(BrokenRule,\n              classDeclaration.Identifier.GetLocation());\n            context.ReportDiagnostic(diagnostic);\n        }\n    }\n```", "```cs\nMSBuild version 17.5.1+f6fdcf537 for .NET\n  Determining projects to restore...\n  All projects are up-to-date for restore.\n/Users/einari/Projects/Metaprogramming-in-C/\nRoslyn.Extensions/CodeAnalysis/ExceptionShouldNotBeSuffixed\n/Analyzer.cs(15,10): warning RS2008: Enable analyzer\nrelease tracking for the analyzer project containing rule\n'PP0001' [/Users/einari/Projects/Metaprogramming-in-C/\nRoslyn.Extensions/Roslyn.Extensions.csproj]\n  Roslyn.Extensions -> /Users/einari/Projects/\nMetaprogramming-in-C/Roslyn.Extensions/bin/\nDebug/netstandard2.0/Roslyn.Extensions.dll\nBuild succeeded.\n/Users/einari/Projects/Metaprogramming-in-C/\nRoslyn.Extensions/CodeAnalysis/ExceptionShouldNotBeSuffixed\n/Analyzer.cs(15,10): warning RS2008: Enable analyzer\nrelease tracking for the analyzer project containing rule\n'PP0001' [/Users/einari/Projects/Metaprogramming-in-\nC/Roslyn.Extensions/Roslyn.Extensions.csproj]\n    1 Warning(s)\n    0 Error(s)\nTime Elapsed 00:00:00.52\n```", "```cs\n## Release 1.0\n### New Rules\nRule ID | Category | Severity | Notes\n--------|----------|----------|--------------------\nPP0001  |  Naming  |  Error   |\n```", "```cs\n<ItemGroup>\n    <AdditionalFiles Include=\"AnalyzerReleases.Shipped.md\" />\n    <AdditionalFiles Include=\"\n      AnalyzerReleases.Unshipped.md\" />\n</ItemGroup>\n```", "```cs\n    dotnet new console\n    ```", "```cs\n    <ItemGroup>\n        <ProjectReference Include=\"..\\Roslyn.Extensions\\\n          Roslyn.Extensions.csproj\" OutputItemType=\n            \"Analyzer\" ReferenceOutputAssembly=\"false\" />\n    </ItemGroup>\n    ```", "```cs\n    <GDPRReport>$(MSBuildThisFileDirectory)GDPRReport.txt\n      </GDPRReport>\n    ```", "```cs\n    <Import Project=\"$(MSBuildThisFileDirectory)\n      ../Roslyn.Extensions/Roslyn.Extensions.props\"/>\n    ```", "```cs\n    namespace Chapter17;\n    public class MyException : Exception\n    {\n    }\n    ```", "```cs\n    MSBuild version 17.5.1+f6fdcf537 for .NET\n      Determining projects to restore...\n      All projects are up-to-date for restore.\n      Roslyn.Extensions -> /Users/einari/Projects/\n    Metaprogramming-in-C/Roslyn.Extensions/bin/Debug/\n    netstandard2.0/Roslyn.Extensions.dll\n    /Users/einari/Projects/Metaprogramming-in-C/\n    Chapter17/MyException.cs(3,14): error PP0001: The use\n    of the word 'Exception' should not be added as a\n    suffix - create a well understood and self explanatory\n    name for the exception [/Users/einari/Projects/\n    Metaprogramming-in-C/Chapter17/Chapter17.csproj]\n    Build FAILED.\n    /Users/einari/Projects/Metaprogramming-in-C/\n    Chapter17/MyException.cs(3,14): error PP0001: The use\n    of the word 'Exception' should not be added as a\n    suffix - create a well understood and self explanatory\n    name for the exception [/Users/einari/Projects/\n    Metaprogramming-in-C/Chapter17/Chapter17.csproj]\n        0 Warning(s)\n        1 Error(s)\n    Time Elapsed 00:00:01.81\n    ```", "```cs\ndotnet add package Microsoft.CodeAnalysis.CSharp.Workspaces\n```", "```cs\n    using System.Collections.Immutable;\n    using System.Composition;\n    using Microsoft.CodeAnalysis;\n    using Microsoft.CodeAnalysis.CodeActions;\n    using Microsoft.CodeAnalysis.CodeFixes;\n    using Microsoft.CodeAnalysis.CSharp;\n    using Microsoft.CodeAnalysis.CSharp.Syntax;\n    namespace Roslyn.Extensions.CodeAnalysis\n      .ExceptionShouldNotBeSuffixed;\n    [ExportCodeFixProvider(LanguageNames.CSharp, Name =\n      nameof(CodeFix))]\n    [Shared]\n    public class CodeFix : CodeFixProvider\n    {\n    }\n    ```", "```cs\n    public override ImmutableArray<string>\n      FixableDiagnosticIds => ImmutableArray.Create\n        (Analyzer.DiagnosticId);\n    ```", "```cs\n    public override Task RegisterCodeFixesAsync\n      (CodeFixContext context)\n    {\n        var diagnostic = context.Diagnostics[0];\n        context.RegisterCodeFix(\n            CodeAction.Create(\n                title: \"Remove Exception suffix\",\n                createChangedDocument: c =>\n                  RemoveSuffix(context.Document,\n                    diagnostic, c)),\n            diagnostic);\n        return Task.CompletedTask;\n    }\n    ```", "```cs\n    public override FixAllProvider?\n      GetFixAllProvider() => WellKnownFixAllProviders\n        .BatchFixer;\n```", "```cs\n    async Task<Document> RemoveSuffix(Document document,\n      Diagnostic diagnostic, CancellationToken c)\n    {\n        var root = await document.GetSyntaxRootAsync(c);\n        if (!(root!.FindNode(diagnostic.Location\n          .SourceSpan) is ClassDeclarationSyntax node))\n            return document;\n        var newName = node.Identifier.Text.Replace\n          (\"Exception\", string.Empty);\n        var newRoot = root.ReplaceNode(node,\n          node.WithIdentifier(SyntaxFactory.Identifier\n            (newName)));\n        return document.WithSyntaxRoot(newRoot);\n    }\n    ```", "```cs\nImportant note\n```", "```cs\n    dotnet new xunit\n    ```", "```cs\n    dotnet add reference ../Roslyn.Extensions\n    ```", "```cs\nnamespace Roslyn.Extensions.CodeAnalysis\n  .ExceptionShouldNotBeSuffixed;\nusing Xunit;\nusing Verify = Microsoft.CodeAnalysis.CSharp.Testing\n  .XUnit.AnalyzerVerifier<Analyzer>;\npublic class AnalyzerTests\n{\n}\n```", "```cs\n[Fact]\npublic async Task WithoutSuffix()\n{\n    const string content = @\"\n            using System;\n            namespace MyNamespace;\n            public class SomethingWentWrong : Exception\n            {\n            }\n        \";\n    await Verify.VerifyAnalyzerAsync(content);\n}\n```", "```cs\n[Fact]\npublic async Task WithSuffix()\n{\n    const string content = @\"\n            using System;\n            namespace MyNamespace;\n            public class MyException : Exception\n            {\n            }\n        \";\n    var expected = Verify.Diagnostic().WithLocation(5,\n      30).WithArguments(\"MyException\");\n    await Verify.VerifyAnalyzerAsync(content, expected);\n}\n```", "```cs\n    namespace Roslyn.Extensions.CodeAnalysis\n      .ExceptionShouldNotBeSuffixed;\n    using Xunit;\n    using Verify = Microsoft.CodeAnalysis.Csharp\n      .Testing.XUnit.CodeFixVerifier<Analyzer, CodeFix>;\n    public class CodeFixTests\n    {\n    }\n    ```", "```cs\n    [Fact]\n    public async Task WithoutSuffix()\n    {\n        const string content = @\"\n                using System;\n                namespace MyNamespace;\n                public class SomethingWentWrong :\n                  Exception\n                {\n                }\n            \";\n        await Verify.VerifyCodeFixAsync(content, content);\n    }\n    ```", "```cs\n    [Fact]\n    public async Task WithSuffix()\n    {\n        const string content = @\"\n                using System;\n                namespace MyNamespace;\n                public class MyException : Exception\n                {\n                }\n            \";\n        var expected = Verify.Diagnostic().WithLocation(5,\n          30).WithArguments(\"MyException\");\n        await Verify.VerifyCodeFixAsync(content, expected,\n           content.Replace(\"MyException\", \"My\"));\n    }\n    ```", "```cs\n    dotnet test\n    ```", "```cs\nMicrosoft (R) Test Execution Command Line Tool Version\n17.5.0 (arm64)\nCopyright (c) Microsoft Corporation.  All rights\nreserved.\nStarting test execution, please wait...\nA total of 1 test files matched the specified pattern.\nPassed!  - Failed:     0, Passed:     4, Skipped:\n0, Total:     4, Duration: 522 ms - Roslyn.Extensions\n.Tests.dll (net7.0)\n```"]