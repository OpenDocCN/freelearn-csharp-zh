- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: A Primer to the Third Dimension
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三维度的入门指南
- en: Welcome!
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎加入！
- en: It’s a pleasure to have you join us on this journey to learn the fundamentals
    of 3D game development. Firstly, we will introduce you to the team who wrote this
    book.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 很高兴您能加入我们，一起学习3D游戏开发的基础知识之旅。首先，我们将向您介绍编写这本书的团队。
- en: '**Travis Bapiste** (3D Artist) directed the art, modeled every model in the
    game, rigged the character, and helped define the design of the story.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**特拉维斯·巴皮斯特**（3D艺术家）负责艺术指导，为游戏中的每个模型建模，为角色绑定，并帮助定义故事的设计。'
- en: '**Russell Craig** (Sr. Software Engineer) created the scripts for the mechanics.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拉塞尔·克雷格**（高级软件工程师）负责编写游戏机制脚本。'
- en: '**Ryan Stunkel** (Sound designer) created and implemented all the sounds throughout
    the project.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**瑞安·斯图克尔**（声音设计师）在整个项目中创建并实现了所有声音。'
- en: '**Anthony Davis** (Sr. Technical Artist) wrote the book, managed the project,
    built effects and shaders, and polished the project.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安东尼·戴维斯**（高级技术艺术家）撰写了本书，管理了项目，构建了效果和着色器，并完善了项目。'
- en: Ensuring we brought out the best of our collective experience of over 50 years
    (with 4 brains behind every page in this book) was a roller-coaster (and too much
    fun!) each day. We’ve spent over six months and two revisions to the entire book
    (as well as hundreds of GIFs that we have exchanged during the process) to include
    the most suitable use-cases that explain new concepts and, most importantly, offer
    a teaching approach that works. In the end, we believe we’ve successfully created
    a book that would have shaped the trajectory of our careers in game development
    and pushed us ahead by at least 3-5 years.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 确保我们能够发挥我们50多年集体经验的最佳水平（这本书每一页背后都有4个大脑），每一天都是过山车般的体验（而且非常有趣！）我们花了超过六个月的时间，对整本书进行了两次修订（以及在这个过程中交换的数百个GIF），以包含最合适的用例来解释新概念，最重要的是，提供一种有效的教学方法。最终，我们相信我们成功地创造了一本书，这本书将塑造我们在游戏开发领域的职业轨迹，并至少推动我们前进3-5年。
- en: This book will equip you with all the tools you’ll need to start building; however,
    you might need more support and advice en-route to turn your ideas into creations.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将为您提供开始构建所需的所有工具；然而，在将您的想法转化为作品的过程中，您可能需要更多的支持和建议。
- en: That’s where our Discord server comes into play. It introduces the element of
    interactivity for us to connect, read the book together and have a conversation
    about your 3D game projects. I am available on Discord more than ever to ensure
    you get through with the book with ease, so please feel free to come say hi and
    ask any questions!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们的Discord服务器发挥作用的地方。它为我们引入了互动元素，让我们能够一起阅读本书，并就您的3D游戏项目进行讨论。我在Discord上的时间比以往任何时候都要多，以确保您能够轻松地完成本书，所以请随时过来打个招呼，提出任何问题！
- en: 'Don’t forget to drop in your quick intro in the channel *#introduce-yourself*
    when you join in: [https://packt.link/unity3dgamedev](https://packt.link/unity3dgamedev)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 加入时，别忘了在*#introduce-yourself*频道中发个简短的自我介绍：[https://packt.link/unity3dgamedev](https://packt.link/unity3dgamedev)
- en: '![](img/QR_Code89002272-1876859406.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code89002272-1876859406.png)'
- en: Well, let’s get started!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，让我们开始吧！
- en: Goal of this book
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书的目标
- en: Our goal with this book is to enable every reader to build the right mindset
    to think about 3D games, and then show them all the steps we took to create ours.
    An absolute beginner is welcome to work through this book, however the topics
    may ramp up in difficulty quite quickly. Though difficult, if you stick with it,
    you will have taken multiple steps towards mastery in game development. The main
    target audience for this book is those with some prior knowledge in game development,
    though regardless of your experience, we hope to create an enjoyable learning
    journey for you. The concepts we will cover soon become complex with characters,
    programming, design patterns, and more that we’ll learn.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编写本书的目标是使每位读者都能够建立正确的思维方式来思考3D游戏，然后展示我们创建游戏所采取的所有步骤。即使是游戏开发领域的绝对初学者也可以通过这本书，尽管主题的难度可能会迅速增加。虽然困难，但如果您坚持下去，您将朝着游戏开发精通迈出多个步骤。本书的主要目标受众是那些在游戏开发方面有一定知识的人，尽管无论您的经验如何，我们都希望为您创造一个愉快的学习之旅。我们将涵盖的概念很快就会变得复杂，包括角色、编程、设计模式等，我们将学习这些内容。
- en: 'To make the best use of the book, I’d recommend you follow the approach below:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了最大限度地利用本书，我建议您遵循以下方法：
- en: Read through the chapters, deliberately taking breaks to think about the concepts.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仔细阅读章节，故意停下来思考这些概念。
- en: When something is brand new, check our project in GitHub to see if viewing it
    in action can help explain it further. If it doesn’t, take to Google to do your
    own research on it.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当某件事物全新时，检查我们的GitHub项目，看看观看它的实际操作是否能进一步解释它。如果不行，就去Google上自己研究。
- en: If something isn’t available in the project, send me a message over Discord
    or seek help from peers in the community server—the link is shared above.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果项目中没有提供某些内容，请通过Discord发消息给我，或在社区服务器中寻求同伴的帮助——链接已在上文分享。
- en: Move on to the next section and repeat!
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进入下一节并重复！
- en: This approach will allow you to take ownership over the areas you struggle with;
    once you have gone through the process, you can seek help from peers. The problems
    that you encounter may also be encountered by others. Solving them and bringing
    them to the Discord or having your peers help with the solution emboldens the
    overall knowledge of the community.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法将使你能够掌握你感到困难的部分；一旦你完成了这个过程，你可以向同伴寻求帮助。你遇到的问题也可能被其他人遇到。解决这些问题并将它们带到Discord或让同伴帮助解决问题，可以增强整个社区的知识。
- en: This book is designed for you to read through our approach and then look into
    the project to understand all the underpinnings. It’s more important to understand
    the design of why we did what we did first. We take time to go over fundamentals
    of the Unity interface as well, but tech can be learned over time with plenty
    of resources online.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书是为了让你阅读我们的方法，然后查看项目以了解所有的基础。首先理解我们为什么这样做的设计是非常重要的。我们也花时间讲解Unity界面的基础知识，但技术可以通过在线的大量资源随着时间的推移而学习。
- en: Some things you will not find in here are how to model characters, rig, or animate
    them. We speak very little about this process as that is its own training. We
    *do* go over why we designed our character the way we did, to help you on your
    journey to do the same. The project has all the animations and cinematics in it,
    so the final products are available to see the results of our work. This approach
    is a strong way to learn, and we teach you why things are done the way that they
    are. This way, you get to see the end result, and you’re allowed to be creative
    and give your own thought to design, as well as work through the process on your
    own with new tools while working your way through the chapters.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里你找不到的一些内容是如何建模角色、绑定或动画化它们。我们对这个过程讲得很少，因为那需要单独的训练。我们**确实**会解释为什么我们以这种方式设计角色，以帮助你走上同样的道路。项目包含了所有的动画和电影特效，所以最终产品可以让你看到我们工作的成果。这种方法是学习的一个强有力的方式，我们教你为什么事情会以这种方式完成。这样，你可以看到最终的结果，并且允许你发挥创意，对设计提出自己的想法，同时在工作过程中独立使用新工具，逐步通过章节。
- en: Lastly, before we sink our teeth into the content, we’d like to advise you to
    open the GitHub repo, navigate to the `Builds` folder, and play it for yourself.
    This will help you to see what our small team put together in its complete form.
    After playing it through, you can visualize what we went through while building
    this project from the start.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在我们深入内容之前，我们想建议你打开GitHub仓库，导航到`Builds`文件夹，亲自试玩。这将帮助你看到我们的小团队完整构建的内容。试玩后，你可以想象我们在构建这个项目的过程中经历了什么。
- en: 'Let’s dive into what topics we will cover in this chapter:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入探讨本章我们将涵盖哪些主题：
- en: Coming around to 3D
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进入3D世界
- en: Essential Unity concepts
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必要的Unity概念
- en: The Unity interface
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity界面
- en: Let’s get started by familiarizing ourselves with the basic components of 3D
    game development.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从熟悉3D游戏开发的基本组件开始。
- en: Coming around to 3D
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进入3D世界
- en: We will be going over a basic understanding of 3D work within this section.
    From coordinate systems to the makeup of how the 3D model is rendered, we will
    only go surface-level to ensure that you fully understand the foundations as you
    progress through this journey. By reading through this, you will gain a strong
    understanding of how Unity displays items.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨3D工作的基本理解。从坐标系统到3D模型的渲染构成，我们只会进行表面层的讲解，以确保你在这一旅程中完全理解基础。通过阅读这些内容，你将获得Unity如何显示物品的强烈理解。
- en: Coordinate systems
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 坐标系统
- en: 3D coordinate systems are not all the same in each 3D application! As is demonstrated
    in *Figure 1.1*, Unity is a left-handed world coordinate system with *+y* facing
    upward. Looking at *Figure 1.1,* you can visualize the difference between left-handed
    and right-handed systems.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 3D坐标系在每种3D应用程序中并不完全相同！如 *图1.1* 所示，Unity 是一个左手坐标系，*+y* 方向向上。看着 *图1.1*，你可以可视化左手系和右手系之间的差异。
- en: '![](img/B17304_01_01.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B17304_01_01.png)'
- en: 'Figure 1.1: Coordinate systems'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1：坐标系
- en: 'While we work within these coordinate systems, you will see the positions of
    objects represented in an array of three values within parentheses as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在这些坐标系中工作时，你会看到物体的位置以括号内的三个值组成的数组形式表示，如下所示：
- en: '*(0, 100, 0)*'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*(0, 100, 0)*'
- en: This represents (*x, y, z*) respectively. This is a good habit to get into as
    programming utilizes very similar syntax when writing positions within scripts.
    When we talk about position, it is commonly referred to as the `transform` inside
    whichever **Digital Content Creator** (**DCC**) you’re using. In Unity, the transform
    holds position, rotation, and scale.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这分别代表 (*x, y, z*)。这是一个好习惯，因为编程在脚本中编写位置时使用非常相似的语法。当我们谈论位置时，通常指的是你使用的任何 **数字内容创建者**
    (**DCC**) 中的 `transform`。在 Unity 中，`transform` 包含位置、旋转和缩放。
- en: Now we understand the world coordinates, *(x, y, z)*, and that those coordinates
    each start at 0, represented by *(0, 0, 0)*. In *Figure 1.2* below, where the
    colored lines meet is *(0, 0, 0)* in the world. The cube has its own `transform`,
    which encompasses that object’s `transform`, rotation, and scale. Keep in mind
    that `transform` holds the local position, rotation, and scale. World `transforms`
    are calculated from this following their hierarchy.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们理解了世界坐标 *(x, y, z)*，以及这些坐标每个都是从 0 开始，由 *(0, 0, 0)* 表示。在下面的 *图1.2* 中，彩色线条相交的地方在世界上是
    *(0, 0, 0)*。立方体有自己的 `transform`，它包含该对象的位置、旋转和缩放。记住，`transform` 包含局部位置、旋转和缩放。世界
    `transform` 是从这个基础上根据其层次结构计算出来的。
- en: '![](img/B17304_01_02.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B17304_01_02.png)'
- en: 'Figure 1.2: 3D coordinate system'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2：3D坐标系
- en: The cube in *Figure 1.2* is at *(1, 1.5, 2)*. This is called **world space**
    as the item’s `transform` is being represented through the world’s coordinates
    starting from *(0, 0, 0)*.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1.2* 中的立方体位于 *(1, 1.5, 2)*。这被称为 **世界空间**，因为项目的 `transform` 是通过从 *(0, 0, 0)*
    开始的世界坐标来表示的。'
- en: '![](img/B17304_01_03.png)Figure 1.3: World space vs local space'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/B17304_01_03.png)图1.3：世界空间与局部空间'
- en: Now that we know the cube’s `transform` is in relation to the world *(0, 0,
    0)*, we will go over the parent-child relationship that describes the local space.
    In *Figure 1.3* above, the sphere is a child of the cube. The sphere’s local position
    is *(0, 1, 0)* in relation to the cube. Interestingly, if you now move the cube,
    the sphere will follow as it’s only offset from the cube and its `transforms`
    will remain *(0, 1, 0)* in relation to the cube.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道立方体的 `transform` 是相对于世界 *(0, 0, 0)* 的，我们将讨论描述局部空间的父子关系。在上面的 *图1.3* 中，球体是立方体的子项。球体的局部位置是相对于立方体的
    *(0, 1, 0)*。有趣的是，如果你现在移动立方体，球体将跟随，因为它只是从立方体偏移，并且其 `transform` 将相对于立方体保持 *(0, 1,
    0)*。
- en: Vectors
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向量
- en: Traditionally, a vector is a unit that has more than one element with a direction.
    In a 3D setting, a `Vector3` will look very similar to what we’ve worked with
    so far. *(0, 0, 0)* is a `Vector3`! Vectors are used in very many solutions for
    game elements and logic. Usually, the developer will normalize vectors so, that
    way, the magnitude will always equal 1\. This allows the developer to work with
    the data very easily as 0 is the start, 0.5 is halfway, and 1 is the end of the
    vector.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，向量是一个具有多个元素和方向的单位。在3D环境中，`Vector3` 将与我们迄今为止所使用的内容非常相似。*(0, 0, 0)* 就是一个 `Vector3`！向量被用于许多游戏元素和逻辑的解决方案中。通常，开发者会规范化向量，这样其大小始终等于
    1。这允许开发者轻松地处理数据，因为 0 是起点，0.5 是中间点，1 是向量的终点。
- en: Cameras
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摄像机
- en: Cameras are incredibly useful components! They humbly show us their perspective,
    which allows our players to experience what we are trying to convey to them. As
    you may have guessed, a camera also has a `transform`, just like all GameObjects
    (which we will describe later in the chapter) in the hierarchy. Cameras also have
    several parameters that can be changed to obtain different visual effects.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 摄像机是极其有用的组件！它们谦逊地展示它们的视角，这允许我们的玩家体验我们试图传达给他们的内容。正如你可能已经猜到的，摄像机也像所有 GameObject（我们将在本章后面描述）一样有一个
    `transform`。摄像机还有几个可以更改的参数，以获得不同的视觉效果。
- en: Different game elements and genres use cameras in different ways. For example,
    the game *Resident Evil* uses static cameras to give a sense of tension, not knowing
    what’s outside the window or around the corner, while *Tomb Raider* pulls the
    camera in close while the player character Lara goes through caverns, giving a
    sense of intimacy and emotional understanding, with her face looking uncomfortable
    in tight spaces.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的游戏元素和类型使用相机的方式不同。例如，游戏 *生化危机* 使用静态相机来营造紧张感，不知道窗外或拐角处有什么，而 *古墓丽影* 在玩家角色劳拉穿过洞穴时将相机拉近，给人一种亲密感和情感理解，她的脸在狭窄的空间中显得不舒服。
- en: Cameras are essential to the experience you will be creating for your users.
    Take time to play with them and learn compositional concepts to maximize the push
    of emotions in the player’s experience.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 相机对于你将为用户创建的体验至关重要。花时间玩弄它们，并学习构图概念，以最大化玩家体验中的情感推动。
- en: Faces, edges, vertices, and meshes
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 面、边、顶点和网格
- en: 3D objects are made up of multiple parts, as seen in *Figure 1.4*. Vertices,
    represented by the green circles, are points in space relative to the world *(0,
    0, 0)*. Each object has a list of these vertices and their corresponding connections.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 3D对象由多个部分组成，如 *图1.4* 所示。顶点，用绿色圆圈表示，是相对于世界 *(0, 0, 0)* 的空间中的点。每个对象都有一个顶点的列表及其相应的连接。
- en: Two vertices connected make an edge, represented by a red line. A face is made
    when either three or four edges connect to make a triangle or a quad. Sometimes
    quads are called a plane when not connected to any other faces. When all of these
    parts are together, you have a mesh.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 两个顶点相连形成一个边，用红线表示。当三个或四个边连接形成一个三角形或四边形时，就形成了一个面。有时当四边形没有连接到其他任何面时，它们被称为平面。当所有这些部分组合在一起时，你就有了网格。
- en: '![](img/B17304_01_04.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B17304_01_04.png)'
- en: 'Figure 1.4: Vertices, edges, faces, and meshes'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.4：顶点、边、面和网格
- en: Materials, textures, and shaders
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 材料、纹理和着色器
- en: Now that you know what a mesh is comprised of in all DCC tools, let’s look into
    how Unity displays that mesh to you. At the base level is a shader. Shaders can
    be thought of as small programs, which have their own language and run on the
    GPU, so Unity can render the objects in your scene on your screen. You can think
    of the shader as a large template for materials to be created.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道了在所有DCC工具中网格由什么组成，让我们来看看Unity如何将网格显示给你。在基础级别是着色器。着色器可以被视为小程序，它们有自己的语言并在GPU上运行，因此Unity可以在你的屏幕上渲染场景中的对象。你可以把着色器想象成创建材料的模板。
- en: 'The next level up is materials. A material is a set of attributes that are
    defined by the shader to be manipulated, which helps show what the object looks
    like. Each rendering pipeline will have separate shaders: **Built-in**, **Universal
    Rendering Pipeline** (**URP**), or **High Definition Rendering Pipeline**. For
    this book, we are using the second option, which is also the most widely used:
    URP.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 更高级的是材料。材料是一组由着色器定义的属性，用于操作，有助于展示对象的外观。每个渲染管线都将有单独的着色器：**内置**、**通用渲染管线**（**URP**）或**高清渲染管线**。对于这本书，我们使用第二种选项，也是最广泛使用的：URP。
- en: '*Figure 1.5* shows an example of a material using the URP’s **Standard Lit**
    shader. This allows us to manipulate surface options, inputs for that surface,
    and some advanced options. For now, let’s just talk about **Base Map**, the first
    item in the **Surface Inputs** section. The term **Base Map** is being used here
    as a combination of the **Diffuse/Albedo** and **Tint**. **Diffuse/Albedo** is
    used to define the base color (red) that will be applied to the surface—in this
    case, white.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1.5* 展示了使用URP的 **标准光照** 着色器的材料示例。这允许我们操作表面选项、该表面的输入以及一些高级选项。现在，让我们只谈谈 **基础图**，这是
    **表面输入** 部分中的第一个项目。在这里使用 **基础图** 是将 **漫反射/阿尔贝托** 和 **着色** 结合起来。**漫反射/阿尔贝托** 用于定义将应用于表面的基础颜色（红色）——在这种情况下，白色。'
- en: If you placed a texture into this map by either dragging a texture onto the
    square (green) to the left of the base map or clicking on the circle (blue) in
    between the box and the name, after that, you can tint the surface with the color
    if there need to be any adjustments.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你通过将纹理拖放到基础地图（绿色）左侧的方块或点击方块和名称之间的圆形（蓝色）将纹理放入此图，之后，你可以根据需要调整颜色来着色表面。
- en: '![](img/B17304_01_05.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B17304_01_05.png)'
- en: 'Figure 1.5: Base material attributes'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.5：基础材料属性
- en: '*Figure 1.6* shows a simple example of what a cube would look like with a tint,
    texture, and the same texture with the tint changed. As we progress through the
    book, we will unlock more and more functions of materials, shaders, and textures.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1.6* 展示了一个简单的例子，展示了立方体在着色、纹理以及纹理着色改变后的样子。随着我们阅读本书的深入，我们将解锁更多关于材质、着色器和纹理的功能。'
- en: '![](img/B17304_01_06.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17304_01_06.png)'
- en: 'Figure 1.6: Tint and texture base color'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.6：着色和纹理基础颜色
- en: Textures can provide incredible detail for your 3D model.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 纹理可以为你的 3D 模型提供惊人的细节。
- en: 'When creating a texture, the resolution is an important consideration. The
    first part of the resolution that needs to be understood is “power of 2” sizes.
    Powers of 2 are as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建纹理时，分辨率是一个重要的考虑因素。需要理解分辨率的第一部分是“2 的幂”大小。2 的幂如下所示：
- en: 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, etc.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096 等。
- en: 'These numbers represent the pixel size for both width and height. There are
    cases where you may need to mix the sizes as long as they fit the power of 2 scale.
    Examples are:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这些数字代表宽度和高度的像素大小。在某些情况下，你可能需要混合大小，只要它们符合 2 的幂比例即可。例如：
- en: 256×256
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 256×256
- en: 1024×1024
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1024×1024
- en: 256×1024 (this is less common to see, but is valid)
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 256×1024（这种情况较少见，但也是有效的）
- en: The second consideration regarding resolution is the size itself. The easiest
    way to work through this consideration is by thinking about how large the 3D object
    will be on your screen. If you have a 1920x1080 screen resolution, that is 1920
    pixels wide by 1080 pixels tall. If the object in question is only going to take
    up 10% of the screen and will rarely be seen any closer, you may consider a 256x256
    texture. By contrast, if you are making an emotional, character-driven game where
    emotions and facial expressions matter, you may want a 4096x4096 or 4K texture
    on just the face during those cutscenes.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 关于分辨率的第二个考虑因素是大小本身。处理这个考虑因素的最简单方法是考虑 3D 对象在你的屏幕上的大小。如果你有一个 1920x1080 的屏幕分辨率，那么它有
    1920 像素宽和 1080 像素高。如果所讨论的对象只占据屏幕的 10%，并且很少被看到更近的距离，你可能考虑一个 256x256 的纹理。相比之下，如果你正在制作一个情感驱动、以角色为中心的游戏，其中情感和面部表情很重要，那么在这些场景中，你可能想在面部使用
    4096x4096 或 4K 纹理。
- en: Rigidbody physics
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚体物理
- en: Unity assumes that every GameObject does not need to be evaluated every frame
    for physics. Unity uses Nvidia’s PhysX engine for its physics simulations. To
    get any calculated physics responses, the GameObject needs a Rigidbody component
    added.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Unity 假设每个 GameObject 不需要在每一帧都进行物理评估。Unity 使用 Nvidia 的 PhysX 引擎进行物理模拟。为了获得任何计算出的物理响应，GameObject
    需要添加刚体组件。
- en: By adding the Rigidbody component to the GameObject, you are then adding some
    properties to the GameObject seen in the inspector in *Figure 1.7* below.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将刚体组件添加到 GameObject 中，你将在下面的 *图 1.7* 中看到的一些 GameObject 属性将出现在检查器中。
- en: '![](img/B17304_01_07.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17304_01_07.png)'
- en: 'Figure 1.7: Rigidbody'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.7：刚体
- en: One Unity unit of mass is equal to 1 kg of mass. This affects the physics decisions
    upon collisions. **Drag** units add friction, reducing the velocity over time.
    **Angular drag** is similar but constrained to only rotation speed. **Use Gravity**
    either turns gravity on or off, equal to standard Earth gravity *(0, -9.81, 0)*
    so the mass makes sense! Sometimes you may not want to use Earth gravity, so you
    can change the physics settings to make the gravity what you would like.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 Unity 单位的质量等于 1 千克的质量。这会影响碰撞时的物理决策。**阻力** 单位增加摩擦，随着时间的推移减少速度。**角阻力** 类似，但仅限于旋转速度。**使用重力**
    可以打开或关闭重力，等于标准地球重力 *(0, -9.81, 0)*，这样质量才有意义！有时你可能不想使用地球重力，因此你可以更改物理设置以使重力符合你的需求。
- en: A thorough explanation of Rigidbody will be worked through in *Chapter 7*, *Rigidbodies
    and Physics Interaction*. We will be using Rigidbodies in the creation of characters
    as well as environments and interactive gameplay.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *第 7 章*，*刚体和物理交互* 中，我们将详细解释刚体的概念。我们将在创建角色、环境以及交互式游戏玩法时使用刚体。
- en: Collision detection
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 碰撞检测
- en: A GameObject with a Rigidbody without any colliders will not fully utilize the
    physics and with gravity turned on will just fall through the world. There are
    quite a few colliders to play with to best suit your games’ needs. In *Figure
    1.8* below, you can see that there are separate colliders for 2D. These use a
    different physics system from 3D. If you are using 2D only for your game, make
    sure to run with the 2D colliders.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 没有任何碰撞器的Rigidbody GameObject将无法充分利用物理特性，当开启重力时，它将直接穿过世界。有相当多的碰撞器可供选择，以最好地满足您游戏的需求。在下面的*图1.8*中，您可以看到为2D提供的独立碰撞器。这些使用与3D不同的物理系统。如果您只为游戏使用2D，请确保使用2D碰撞器。
- en: '![](img/B17304_01_08.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B17304_01_08.png)'
- en: 'Figure 1.8: Collider component options'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.8：碰撞器组件选项
- en: You are also welcome to add multiple colliders—with the basic options seen in
    *Figure 1.8* above—to an object to best suit the shape of the GameObject. It is
    very common to see colliders on empty GameObjects that are children of the primary
    object, to allow the easy transformation of the colliders. We will see this in
    practice in *Chapter 4*, *Characters*, and *Chapter 5*, *Environment*.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以添加多个碰撞器——如上图中*图1.8*所示的基本选项——以最好地适应GameObject的形状。在空GameObject上看到碰撞器是很常见的，这些GameObject是主对象的子对象，以便于轻松变换碰撞器。我们将在*第4章*，*角色*和*第5章*，*环境*中看到这一点。
- en: The Unity interface
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unity界面
- en: The interface for Unity is separated into several major components. In *Figure
    1.9* below, we will go over the scene (red) and the items within its interface
    as well as how to manipulate their properties in the inspector (orange). Then
    we will go into items that aren’t active in the scene but are available to add
    in the project window (yellow). Finally, we will go over the game view (green)
    and the package manager (separate from *Figure 1.9*).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Unity的界面被分为几个主要组件。在下图的*图1.9*中，我们将介绍场景（红色）及其界面中的项目，以及如何在检查器（橙色）中操纵它们的属性。然后我们将讨论场景中未激活但可在项目窗口中添加的项目（黄色）。最后，我们将介绍游戏视图（绿色）和包管理器（与*图1.9*分开）。
- en: '![](img/B17304_01_11.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B17304_01_11.png)'
- en: 'Figure 1.9: Overall interface'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.9：整体界面
- en: Scene view and hierarchy
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 场景视图和层次结构
- en: The scene view and hierarchy work in tandem. The hierarchy is how the scene
    will be rendered when the game is played. The scene view allows you to manipulate
    the GameObjects and their values in real time. Furthermore, when the editor is
    in **Play** mode, the game can make changes to the GameObjects in the hierarchy.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 场景视图和层次结构协同工作。层次结构是游戏运行时场景的渲染方式。场景视图允许您实时操纵GameObject及其值。此外，当编辑器处于**播放**模式时，游戏可以对层次结构中的GameObject进行更改。
- en: When the GameObjects are being manipulated in **Play** mode, to include if you
    change them yourself in the scene view, after you stop the game, the GameObjects
    will revert to their original state before play has started.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 当GameObject在**播放**模式下被操纵时，包括您在场景视图中自行更改它们，在停止游戏后，GameObject将恢复到游戏开始前的原始状态。
- en: '![](img/B17304_01_12.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B17304_01_12.png)'
- en: 'Figure 1.10: Scene and hierarchy'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.10：场景和层次结构
- en: In *Figure 1.10* above, there is a lot of information that can be seen right
    away. On the left, in the hierarchy, you can see that there are objects in the
    scene. These objects all have a `transform`, which places them in the world. If
    you double-click on an item or click on an item, put your mouse in the scene view,
    and then press *f*, you will then focus on that GameObject, which puts the item
    centered on the scene’s viewport.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在上图的*图1.10*中，您可以立即看到很多信息。在左侧的层次结构中，您可以看到场景中的对象。这些对象都有一个`transform`，它们将对象放置在世界上。如果您双击一个项目或单击一个项目，将鼠标放在场景视图中，然后按*f*，您将聚焦于那个GameObject，这将使项目在场景视口的中心。
- en: When you have an item selected, you can see that at the object’s pivot point—usually
    the center of the object—there is a tool showing colored arrows. The tool allows
    you to position the GameObject in space. You can also position the object on a
    plane by selecting the little square in between two axes.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当您选择一个项目时，您可以看到在对象的旋转中心点——通常是对象的中心——有一个显示彩色箭头的工具。该工具允许您在空间中定位GameObject。您还可以通过选择两个轴之间的一个小正方形来在平面上定位对象。
- en: In the upper right of *Figure 1.10*, you will see a camera gizmo. This little
    gizmo will allow you easily orient the viewport camera to the front, sides, top,
    bottom, or change it to an isometric camera or perspective with a single click.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图1.10*的右上角，你会看到一个相机 Gizmo。这个小Gizmo将允许你通过单次点击轻松地将视口相机定位到前面、侧面、顶部、底部，或者将其更改为等轴测相机或透视视图。
- en: Now that you have seen the item in the scene, selected by left-clicking in the
    scene or the hierarchy, you may want to change some properties or add components
    to that GameObject. This is where the inspector comes into play.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经看到了场景中的项目，通过在场景或层次结构中左键单击选择，你可能想要更改一些属性或向该GameObject添加组件。这就是检查器发挥作用的地方。
- en: Inspector
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查器
- en: To manipulate a GameObject’s value, when you select the GameObject in the scene
    or hierarchy, the inspector will update to show you the viable options to change
    per GameObject.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 要操纵GameObject的值，当你选择场景或层次结构中的GameObject时，检查器将更新以显示每个GameObject可用的更改选项。
- en: '![](img/B17304_01_13.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![img/B17304_01_13.png]'
- en: 'Figure 1.11: Inspector window'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.11：检查器窗口
- en: The inspector window in *Figure 1.11* shows that a good amount of this item
    has been chosen. At the top, the name is **Cube** and the blue cube to the left
    denotes a prefab data type. You are able to make changes to the prefab itself
    by clicking the **Open** button just below the name. This will create a new scene
    view that shows the prefab only. When you make changes to the prefab, it will
    make a change to all instanced prefabs in any scene that is referencing it.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1.11*中的检查器窗口显示已经选择了大量此类项目。在顶部，名称是**Cube**，左侧的蓝色立方体表示预制件数据类型。你可以通过点击名称下方仅有的**打开**按钮来更改预制件本身。这将创建一个新的场景视图，仅显示预制件。当你更改预制件时，它将更改任何引用它的场景中所有实例化预制件的设置。'
- en: The **transform** component shows the position, rotation, and scale of the prefab
    in the scene.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**变换**组件显示了场景中预制件的位置、旋转和缩放。'
- en: The **mesh filter** shows the vertices, edges, and faces that make up that polygon.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**网格过滤器**显示了构成该多边形的顶点、边和面。'
- en: Below that is the **mesh renderer**. This component will allow the rendering
    of the mesh rendered in the mesh filter component. We can set the material here
    and other options that pertain to this item’s specific lighting and probes, which
    we will cover in *Chapter 12*, *Final Touches*.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面是**网格渲染器**。此组件将允许渲染网格过滤器组件中渲染的网格。我们可以在这里设置材质以及其他与该项目的特定光照和探针相关的选项，这些将在*第12章*，*最终润色*中介绍。
- en: Now, below this is a collider and a Rigidbody. These work in tandem and help
    this object to react to physics in real time, according to the settings on the
    components.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，下面是一个碰撞器和Rigidbody。这些组件协同工作，帮助该对象根据组件上的设置实时响应物理效果。
- en: We’ve talked a lot about items in the scene and their properties, but where
    are they housed outside of the scene if they’re only referenced items? The **Project**
    window will answer this question.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了很多场景中的项目及其属性，但它们如果只是引用项目，那么在场景之外它们存储在哪里？**项目**窗口将回答这个问题。
- en: The Project window
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目窗口
- en: Here you will find assets that will be instanced in the scene or used as a component
    to fully realize the game you are building.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以找到将在场景中实例化或在游戏中作为组件使用以完全实现你正在构建的游戏的资产。
- en: '![](img/B17304_01_14.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![img/B17304_01_14.png]'
- en: 'Figure 1.12: Project window'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.12：项目窗口
- en: This window is the physical representation of the GameObjects that are referenced.
    All of the items in the assets folder seen in *Figure 1.12* are physically on
    your hard drive. Unity makes meta files that house all of the properties of the
    items.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 此窗口是引用的GameObject的物理表示。在*图1.12*中看到的资产文件夹中的所有项目都物理地存储在你的硬盘上。Unity会创建元文件来存储这些项目的所有属性。
- en: The interesting thing about having the raw files in the **P****roject** window
    is that you can make changes to the items and when you focus on the Unity project
    (click on the Unity app), it will readjust the meta files and reload the items
    in the scene. This makes it so that, you can iterate on scripts and art faster!
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在**项目**窗口中保留原始文件的好处是，你可以更改项目，并且当你聚焦于Unity项目（点击Unity应用）时，它将重新调整元文件并重新加载场景中的项目。这使得你可以更快地迭代脚本和艺术作品！
- en: We’ve looked at the GameObjects in the scene, placed them by manipulating the
    transforms, and know where the GameObjects were referenced from. Now we should
    look at the game view to know how the game itself looks.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经查看场景中的GameObject，通过操作变换来放置它们，并知道GameObject的引用位置。现在我们应该查看游戏视图，以了解游戏本身的外观。
- en: Game view
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 游戏视图
- en: The game view is similar to the scene view; however, it follows the rules that
    are built in the scene view. The game will automatically render scene content
    through the main camera unless you define a different camera to render through.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏视图类似于场景视图；然而，它遵循场景视图内构建的规则。除非您定义了一个不同的相机进行渲染，否则游戏将通过主相机自动渲染场景内容。
- en: '![](img/B17304_01_15.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17304_01_15.png)'
- en: 'Figure 1.13: Game view'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.13：游戏视图
- en: You can see that this looks very similar to the scene window, but the top has
    different options. At the top left, we can see the **Display** dropdown. This
    allows us to change cameras if we have multiple in the scene. The ratio is to
    the right of that, which is helpful to look at so you can target certain devices.
    **Scale**, to the right of the screen ratio, is helpful to quickly make the window
    larger or zoom in for debugging. **Maximize On Play** will maximize the screen
    on play to take advantage of the full screen. **Mute Audio** mutes the game’s
    audio. **Stats** will give a small overview of the stats in the game view.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到这看起来非常类似于场景窗口，但顶部有不同的选项。在左上角，我们可以看到**显示**下拉菜单。这允许我们在场景中有多个相机时更改相机。比例位于其右侧，这有助于查看以针对特定设备。屏幕比例右侧的**缩放**有助于快速调整窗口大小或放大以进行调试。**播放时最大化**将在播放时最大化屏幕以充分利用全屏。**静音音频**将静音游戏音频。**统计信息**将在游戏视图中提供一个小概览。
- en: Later on in this project, during optimization, we will go through profiling
    for a much more in-depth way to look at what may be causing issues within the
    gameplay in terms of memory usage and other optimization opportunities.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本项目的后期，在优化过程中，我们将通过更深入的分析来查看可能影响游戏玩法中内存使用和其他优化机会的问题。
- en: '![](img/B17304_01_16.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17304_01_16.png)'
- en: 'Figure 1.14: Game statistics'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.14：游戏统计信息
- en: Continuing on to the right is **Gizmos**. This is a set of items that show in
    the game view in *Figure 1.14*, which you might now want to see. In this menu,
    you are able to turn them off or on depending on your needs.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 继续向右是**Gizmos**。这是一组在*图 1.14*中游戏视图中显示的项目。根据您的需求，您可以在该菜单中打开或关闭它们。
- en: Package Manager
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 包管理器
- en: Your Unity ID will house the packages you’ve bought from the Unity Asset Store
    as well as the packages you may have on your hard drive or GitHub! You can use
    the package manager to import the packages into your project.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 您的 Unity ID 将存储您从 Unity 资产商店购买的包以及您可能已在硬盘或 GitHub 上的包！您可以使用包管理器将包导入到项目中。
- en: You can get to these packages under **Window > Package Manager** as seen in
    *Figure 1.15* below.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在**窗口 > 包管理器**下找到这些包，如下面的*图 1.15*所示。
- en: '![](img/B17304_01_17.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17304_01_17.png)'
- en: 'Figure 1.15: Package Manager path'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.15：包管理器路径
- en: After you open the package manager, you will initially be shown what packages
    are in the project. You can change the top-left dropdown to see what is standard
    in Unity or what packages you have bought in the Unity Asset Store.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 打开包管理器后，您最初会看到项目中包含哪些包。您可以通过更改左上角的下拉菜单来查看 Unity 中的标准内容或您在 Unity 资产商店购买的包。
- en: '![](img/B17304_01_18.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17304_01_18.png)'
- en: 'Figure 1.16: Package Manager'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.16：包管理器
- en: By choosing **Unity Registry**, you’ll see a list of the Unity tested packages
    that come free and are part of the Unity platform, available if you need them.
    You can read up on every package in the documents that are provided via the link
    on the right-hand side labeled **View documentation** when you click on a package
    on the left.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 通过选择**Unity 注册表**，您将看到一系列由 Unity 测试的免费包，它们是 Unity 平台的一部分，如果您需要它们，则可用。您可以通过点击左侧的包并查看右侧带有**查看文档**标签的链接提供的文档来了解每个包。
- en: If you select **In Project**, it will show you what packages are already installed
    with the current project that is loaded. This is helpful when you want to uninstall
    a package that may not be needed.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您选择**项目内**，它将显示当前加载的项目中已安装的包。当您想要卸载可能不需要的包时，这很有帮助。
- en: '**My Assets** are the assets that you’ve bought or the project you are on and
    those associated with your Unity ID as paid for previously.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**我的资产**是您购买或正在进行的项目的资产以及与您的 Unity ID 相关的之前付费的资产。'
- en: '**Built-in** is standard with any project. You may need to enable or disable
    a built-in package depending on what your needs are. Explore them and disable
    what is not needed; a tidy project now leads to less optimization later.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '**内置**是任何项目的标准配置。您可能需要根据您的需求启用或禁用内置包。探索它们并禁用不需要的包；一个整洁的项目现在将导致以后的优化更少。'
- en: Essential Unity concepts
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 必要的Unity概念
- en: In the first section, we already went over some Unity concepts. We will go over
    them in a bit more detail here as you’ve read previously where several of these
    might be used. Unity houses a very modular focus on the items that are housed
    within the game development environment.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一部分，我们已经介绍了一些Unity的概念。在这里，我们将更详细地讲解它们，因为您之前已经阅读过，其中一些可能会被用到。Unity对游戏开发环境中的项目有着非常模块化的关注。
- en: Assets
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 资产
- en: Unity treats every file as an asset; everything including a 3D model, a texture
    file, a sprite, a particle system, and so on. In your project, you will have an
    **Assets** folder as the base folder to house all of your project items. These
    could be textures, 3D models, particle systems, materials, shaders, animations,
    sprites, and the list goes on. As we add more to our project, the **Assets** folder
    should be organized and ready to grow. It is strongly recommended to keep your
    folder structure organized so that you or your team aren’t wasting time trying
    to find that one texture item that was left in a random folder by accident.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: Unity将每个文件都视为一个资产；包括3D模型、纹理文件、精灵、粒子系统等等。在您的项目中，您将有一个**Assets**文件夹作为基础文件夹来存放所有项目项。这些可能包括纹理、3D模型、粒子系统、材质、着色器、动画、精灵等等。随着我们向项目中添加更多内容，**Assets**文件夹应该是有序的，并准备好扩展。强烈建议您保持文件夹结构有序，这样您或您的团队就不会浪费时间试图找到那个不小心被遗留在随机文件夹中的纹理项。
- en: Scenes
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 场景
- en: A scene houses all of the gameplay logic, GameObjects, cinematics, and everything
    else that your game will reference to render or interact with.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 一个场景包含了所有的游戏逻辑、游戏对象、电影场景以及游戏中将引用以渲染或与之交互的所有其他内容。
- en: Scenes are also used to cut up gameplay sections to bring down the load times.
    If you imagine trying to load every single asset on a modern game every time you
    loaded it up, it would take way too much precious gaming time.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 场景也被用来分割游戏部分以降低加载时间。如果您想象一下每次加载现代游戏时都要加载所有单个资产，这将占用太多的宝贵游戏时间。
- en: GameObjects
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 游戏对象
- en: Most assets that are referenced in a scene will be a **GameObject** (**GO**).
    There are some instances in which an asset can only be a component of a GO. The
    one common factor that you will see with all GOs is that they have the **Transform**
    component. As we read at the beginning of this chapter, a `transform` holds the
    local position, rotation, and scale. World transforms are calculated from this
    following their hierarchy. GOs can have a long list of components connected to
    give functionality or data to be used in scripts for mechanics to grow.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在场景中引用的大多数资产都将是一个**GameObject**（**GO**）。在某些情况下，一个资产只能是一个GO的组件。所有GO的共同因素是它们都有**Transform**组件。正如我们在本章开头所读到的，`transform`包含局部位置、旋转和缩放。世界变换是从这个基础上根据它们的层次结构计算出来的。GOs可以连接一个长长的组件列表，以提供功能或数据，用于在脚本中实现机制的增长。
- en: Components
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组件
- en: GOs have the ability to house multiple pieces of functionality attached as “components.”
    Each component has its own unique properties. The entire list of components you
    can add is fairly extensive, as you can see in *Figure 1.17* below.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: GOs（游戏对象）能够容纳多个附加的功能组件。每个组件都有其独特的属性。您可以在下面的*图1.17*中看到，您可以添加的组件列表相当广泛。
- en: '![](img/B17304_01_09.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17304_01_09.png)'
- en: 'Figure 1.17: Component list'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.17：组件列表
- en: Each of these sections has smaller subsections. We will go over quite a few
    of them in this book. When you add an asset to the scene hierarchy that requires
    components, Unity will add them by default. An example of this default action
    happening is when you drag a 3D mesh into the hierarchy, the GOs will have a mesh
    renderer component attached to the object automatically.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这些每个部分都有更小的子部分。在这本书中，我们将详细讲解其中的一些。当您向场景层次结构中添加需要组件的资产时，Unity会默认添加它们。一个这种默认操作发生的例子是，当您将一个3D网格拖入层次结构时，GOs会自动附加一个网格渲染器组件。
- en: Scripts
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 脚本
- en: One component that is often used on a GameObject is a script. This is where
    all of the logic and mechanics will be built onto your GameObjects. Whether you
    want to change the color, jump, change the time of day, or collect an item, you
    will need to add that logic in a script on the object.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在GameObject上经常使用的一个组件是脚本。这是所有逻辑和机制将被构建到您的GameObject上的地方。无论您是想改变颜色、跳跃、改变白天的时间，还是收集物品，您都需要在对象上的脚本中添加该逻辑。
- en: In Unity, the primary language is **C#** (pronounced “C sharp”). This is a strongly
    typed programming language, meaning that there must be a type assigned to any
    variable that is being manipulated.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity中，主要使用的语言是**C#**（发音为“C sharp”）。这是一种强类型编程语言，意味着任何被操作的变量都必须有一个类型分配。
- en: We will be using scripts in a multitude of ways and I know you are excited to
    get right into coding, but first, we need to get into other Unity standard processes.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将以多种方式使用脚本，我知道你迫不及待地想要开始编码，但首先，我们需要了解其他Unity标准流程。
- en: Prefabs
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预制件
- en: Utilizing the modular and strong object-oriented nature of Unity, we can put
    together a grouping of items with default values set on their components, which
    can be instanced in the scene at any time and house their own values.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 利用Unity模块化和强面向对象的特点，我们可以将一组具有默认组件值的物品组合在一起，这些物品可以在场景中的任何时间实例化，并拥有它们自己的值。
- en: To make a prefab, you drag a GameObject from the hierarchy in the scene to the
    asset browser. It will create a new prefab as well as turning that GameObject
    into the newly created prefab. It will also turn blue by default in the hierarchy
    as seen in *Figure 1.18*.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个预制件，你只需将场景中的GameObject从层次结构拖动到资产浏览器中。它将创建一个新的预制件，并将该GameObject转换为新创建的预制件。默认情况下，它将在层次结构中变为蓝色，如图*1.18*所示。
- en: '![](img/B17304_01_10.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B17304_01_10.png)'
- en: 'Figure 1.18: Prefab in hierarchy'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.18：层次结构中的预制件
- en: Packages
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 包
- en: To take the modular components to a whole new level, Unity can take a package
    with all of its dependencies and export them out so you can bring them into other
    projects! Even better, you can sell your packages to other game developers from
    the Unity Asset Store!
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将模块化组件提升到全新的水平，Unity可以将包含所有依赖关系的包导出，以便你将其带入其他项目中！更好的是，你还可以通过Unity Asset Store将你的包卖给其他游戏开发者！
- en: Now that you have a solid foundation in 3D and Unity terms, let’s open it up
    and go over the interface itself. The next section will be a look into all of
    the most common interface pieces of Unity.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经对3D和Unity术语有了坚实的基础，让我们打开它并回顾界面本身。下一节将探讨Unity所有最常见界面组件。
- en: Summary
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: Together, we went over several key areas to begin your journey in game development.
    In this chapter, we laid the foundation for what is to come by going over some
    fundamental features of three primary topics. For the third dimension, we went
    over the coordinate system, vectors, cameras, 3D meshes, and the basics of Rigidbody
    physics and collision detection. This was enough of the basics to allow us to
    get into Unity concepts, such as assets and GameObjects, followed by scripting
    in C# and prefab basics. To end this chapter, we went through a virtual tour of
    the Unity interface—scenes, the hierarchy, inspectors, and the package manager.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们一起回顾了几个关键领域，以开始你的游戏开发之旅。在本章中，我们通过探讨三个主要主题的一些基本特性，为即将到来的内容奠定了基础。对于三维空间，我们回顾了坐标系、向量、摄像机、3D网格以及Rigidbody物理和碰撞检测的基础。这些基础知识足以让我们进入Unity的概念，例如资源和GameObject，然后是C#脚本编写和预制件基础。为了结束本章，我们进行了一次Unity界面的虚拟游览——场景、层次结构、检查器和包管理器。
- en: In the next chapter, we will be going over design and prototyping fundamentals.
    This will allow you to follow along while we describe our thought processes for
    the project being created throughout this book. It will also lay the foundational
    knowledge for you to follow when you make your own projects, following your completion
    of this book.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨设计和原型设计的基础知识。这将使我们能够在描述本书中创建的项目时，跟随我们的思维过程。它还将为你创建自己的项目奠定基础知识，在你完成本书后继续使用。
