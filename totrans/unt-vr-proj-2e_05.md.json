["```cs\npublic class MyInputController : MonoBehaviour \n{\n  void Update () \n  {\n    ButtonTest();\n  }\n\n  private void ButtonTest()\n  {\n    string msg = null;\n\n    if (Input.GetButtonDown(\"Fire1\"))\n      msg = \"Fire1 down\";\n\n    if (Input.GetButtonUp(\"Fire1\"))\n       msg = \"Fire1 up\";\n\n    if (msg != null)\n      Debug.Log(\"Input: \" + msg);\n  }\n}\n```", "```cs\npublic class MyInputController : MonoBehaviour \n{\n  public SteamVR_TrackedObject rightHand;\n\n  private SteamVR_Controller.Device device;\n\n  void Update () \n  {\n    ButtonTest();\n  }\n\n  private void ButtonTest()\n  {\n    string msg = null;\n\n    // SteamVR\n    device = SteamVR_Controller.Input((int)rightHand.index);\n    if (device != null &&  \n      device.GetPressDown(SteamVR_Controller.ButtonMask.Trigger))\n    {\n      msg = \"Trigger press\";\n      device.TriggerHapticPulse(700);\n    }\n    if (device != null &&  \n      device.GetPressUp(SteamVR_Controller.ButtonMask.Trigger)) \n    {\n      msg = \"Trigger release\";\n    }\n\n    if (msg != null)\n      Debug.Log(\"Input: \" + msg);\n  }\n}\n```", "```cs\n  private void ButtonTest()\n  {\n    string msg = null;\n\n    if (GvrControllerInput.ClickButtonDown)\n      msg = \"Button down\";\n    if (GvrControllerInput.ClickButtonUp)\n      msg = \"Button up\";\n\n    if (msg != null)\n      Debug.Log(\"Input: \" + msg);\n  }\n}\n```", "```cs\npublic bool ButtonDown()\n{\n  return Input.GetButtonDown(\"Fire1\");\n}\n\npublic bool ButtonUp()\n{\n  return Input.GetButtonUp(\"Fire1\");\n}\n```", "```cs\npublic bool ButtonDown()\n{\n  return GvrControllerInput.ClickButtonDown;\n}\n\npublic bool ButtonUp()\n{\n  return GvrControllerInput.ClickButtonUp;\n}\n```", "```cs\npublic class BalloonController : MonoBehaviour \n{\n  public GameObject meMyselfEye;\n\n  private MyInputController inputController;\n\n  void Start () \n  {\n    inputController = meMyselfEye.GetComponent<MyInputController>();\n  }\n\n  void Update () \n  {\n    if (inputController.ButtonDown())\n    {\n      NewBalloon()\n    }\n    else if (inputController.ButtonUp())\n    {\n      ReleaseBalloon();\n    }\n    // else while button is still pressed, grow it\n }\n```", "```cs\n public GameObject balloonPrefab;\n```", "```cs\n private GameObject balloon;\n```", "```cs\n private void NewBalloon()\n {\n   balloon = Instantiate(balloonPrefab);\n }\n```", "```cs\n public float floatStrength = 20f;\n```", "```cs\nprivate void ReleaseBalloon()\n{\n  balloon.GetComponent<Rigidbody>().AddForce(Vector3.up * floatStrength);\n  balloon = null;\n}\n```", "```cs\npublic float growRate = 1.5f;\n```", "```cs\n  else if (balloon != null)\n  {\n    GrowBalloon();\n  }\n```", "```cs\n private void GrowBalloon()\n {\n   balloon.transform.localScale += balloon.transform.localScale * growRate * Time.deltaTime;\n }\n```", "```cs\n[CreateAssetMenu(menuName = \"My Objects/Input Action\")]\npublic class MyInputAction : ScriptableObject {\n  public enum ButtonAction { None, PressedDown, ReleasedUp };\n  public ButtonAction buttonAction;\n}\n```", "```cs\npublic MyInputAction myInput;\n\nvoid Update () \n{\n  if (ButtonDown())\n  {\n    myInput.buttonAction = MyInputAction.ButtonAction.PressedDown;\n  } else if (ButtonUp())\n  {\n    myInput.buttonAction = MyInputAction.ButtonAction.ReleasedUp;\n  } else\n  {\n    myInput.buttonAction = MyInputAction.ButtonAction.None;\n  }\n}\n```", "```cs\npublic MyInputAction myInput;\n```", "```cs\nvoid Update()\n{\n  if (myInput.buttonAction == MyInputAction.ButtonAction.PressedDown)\n  {\n    NewBalloon();\n  }\n  else if (myInput.buttonAction == MyInputAction.ButtonAction.ReleasedUp)\n  {\n    ReleaseBalloon();\n  }\n  else if (balloon != null)\n  {\n   GrowBalloon();\n  }\n}\n```", "```cs\nusing UnityEngine;\nusing UnityEngine.Events;\n\npublic class MyInputController : MonoBehaviour \n{\n public UnityEvent ButtonDownEvent;\n public UnityEvent ButtonUpEvent;\n\n void Update()\n {\n   if (ButtonDown())\n     ButtonDownEvent.Invoke();\n   else if (ButtonUp())\n     ButtonUpEvent.Invoke();\n }\n\n private bool ButtonDown()\n {\n   return Input.GetButtonDown(\"Fire1\");\n }\n\n private bool ButtonUp()\n {\n   return Input.GetButtonUp(\"Fire1\");\n }\n}\n```", "```cs\npublic class BalloonController : MonoBehaviour\n{\n  public GameObject balloonPrefab;\n  public float floatStrength = 20f;\n  public float growRate = 1.5f;\n\n  private GameObject balloon;\n\n void Update()\n {\n   if (balloon != null)\n     GrowBalloon();\n }\n\n public void NewBalloon()\n {\n   balloon = Instantiate(balloonPrefab);\n }\n\n public void ReleaseBalloon()\n {\n   balloon.GetComponent<Rigidbody>().AddForce(Vector3.up * floatStrength);\n   balloon = null;\n }\n\n private void GrowBalloon()\n {\n   balloon.transform.localScale += balloon.transform.localScale * growRate * Time.deltaTime;\n }\n}\n```", "```cs\npublic void NewBalloon(GameObject parentHand)\n{\n  if (balloon == null)\n  {\n    balloon = Instantiate(balloonPrefab);\n    balloon.transform.SetParent(parentHand.transform);\n    balloon.transform.localPosition = Vector3.zero;\n  }\n}\n```", "```cs\n public void ReleaseBalloon()\n {\n   if (balloon != null)\n   {\n     balloon.transform.parent = null;\n     balloon.GetComponent<Rigidbody>().AddForce(Vector3.up * floatStrength);\n   }\n   balloon = null;\n }\n```", "```cs\npublic class Poppable : MonoBehaviour\n{\n public GameObject popEffect;\n\n void OnCollisionEnter(Collision collision)\n {\n   PopBalloon();\n }\n\n private void PopBalloon()\n {\n   Instantiate(popEffect, transform.position, transform.rotation);\n   Destroy(gameObject);\n }\n}\n```"]