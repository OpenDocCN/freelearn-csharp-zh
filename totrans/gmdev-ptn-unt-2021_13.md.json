["```cs\nnamespace Chapter.Strategy\n{\n    public interface IManeuverBehaviour\n    {\n        void Maneuver(Drone drone);\n    }\n}\n```", "```cs\nusing UnityEngine;\n\nnamespace Chapter.Strategy {\n    public class Drone : MonoBehaviour {\n\n        // Ray parameters\n        private RaycastHit _hit;\n        private Vector3 _rayDirection;\n        private float _rayAngle = -45.0f;\n        private float _rayDistance = 15.0f;\n\n        // Movement parameters\n        public float speed = 1.0f;\n        public float maxHeight = 5.0f;\n        public float weavingDistance = 1.5f;\n        public float fallbackDistance = 20.0f;\n\n        void Start() {\n            _rayDirection = \n                transform.TransformDirection(Vector3.back) \n                * _rayDistance;\n\n            _rayDirection = \n                Quaternion.Euler(_rayAngle, 0.0f, 0f) \n                * _rayDirection;\n        }\n\n        public void ApplyStrategy(IManeuverBehaviour strategy) {\n            strategy.Maneuver(this);\n        }\n\n        void Update() {\n            Debug.DrawRay(transform.position, \n                _rayDirection, Color.blue);\n\n            if (Physics.Raycast(\n                transform.position,\n                _rayDirection, out _hit, _rayDistance)) {\n\n                if (_hit.collider) {\n                    Debug.DrawRay(\n                        transform.position, \n                        _rayDirection, Color.green);\n                }\n            }\n        }\n    }\n}\n```", "```cs\npublic void ApplyStrategy(IManeuverBehaviour strategy)\n{\n    strategy.Maneuver(this);\n}\n```", "```cs\nusing UnityEngine;\nusing System.Collections;\n\nnamespace Chapter.Strategy {\n    public class BoppingManeuver : \n        MonoBehaviour, IManeuverBehaviour { \n\n        public void Maneuver(Drone drone) {\n            StartCoroutine(Bopple(drone));\n        }\n\n        IEnumerator Bopple(Drone drone)\n        {\n            float time;\n            bool isReverse = false;\n            float speed = drone.speed;\n            Vector3 startPosition = drone.transform.position;\n            Vector3 endPosition = startPosition;\n            endPosition.y = drone.maxHeight;\n\n            while (true) {\n                time = 0;\n                Vector3 start = drone.transform.position;\n                Vector3 end = \n                    (isReverse) ? startPosition : endPosition;\n\n                while (time < speed) {\n                    drone.transform.position = \n                        Vector3.Lerp(start, end, time / speed);\n                    time += Time.deltaTime;\n                    yield return null;\n                }\n\n                yield return new WaitForSeconds(1);\n                isReverse = !isReverse;\n            }\n        }\n    }\n}\n```", "```cs\nusing UnityEngine;\nusing System.Collections;\n\nnamespace Chapter.Strategy {\n    public class WeavingManeuver : \n        MonoBehaviour, IManeuverBehaviour {\n\n        public void Maneuver(Drone drone) {\n            StartCoroutine(Weave(drone));\n        }\n\n        IEnumerator Weave(Drone drone) {\n            float time;\n            bool isReverse = false;\n            float speed = drone.speed;\n            Vector3 startPosition = drone.transform.position;\n            Vector3 endPosition = startPosition;\n            endPosition.x = drone.weavingDistance;\n\n            while (true) {\n                time = 0;\n                Vector3 start = drone.transform.position;\n                Vector3 end = \n                    (isReverse) ? startPosition : endPosition;\n\n                while (time < speed) {\n                    drone.transform.position = \n                        Vector3.Lerp(start, end, time / speed);\n\n                    time += Time.deltaTime;\n\n                    yield return null;\n                }\n\n                yield return new WaitForSeconds(1);\n                isReverse = !isReverse;\n            }\n        }\n    }\n}\n```", "```cs\nusing UnityEngine;\nusing System.Collections;\n\nnamespace Chapter.Strategy\n{\n    public class FallbackManeuver : \n        MonoBehaviour, IManeuverBehaviour {\n\n        public void Maneuver(Drone drone) {\n            StartCoroutine(Fallback(drone));\n        }\n\n        IEnumerator Fallback(Drone drone)\n        {\n            float time = 0;\n            float speed = drone.speed;\n            Vector3 startPosition = drone.transform.position;\n            Vector3 endPosition = startPosition;\n            endPosition.z = drone.fallbackDistance;\n\n            while (time < speed)\n            {\n                drone.transform.position = \n                    Vector3.Lerp(\n                        startPosition, endPosition, time / speed);\n\n                time += Time.deltaTime;\n\n                yield return null;\n            }\n        }\n    }\n}\n```", "```cs\nusing UnityEngine;\nusing System.Collections.Generic;\n\nnamespace Chapter.Strategy {\n    public class ClientStrategy : MonoBehaviour {\n\n        private GameObject _drone;\n\n        private List<IManeuverBehaviour> \n            _components = new List<IManeuverBehaviour>();\n\n        private void SpawnDrone() {\n            _drone = \n                GameObject.CreatePrimitive(PrimitiveType.Cube);\n\n            _drone.AddComponent<Drone>();\n\n            _drone.transform.position = \n                Random.insideUnitSphere * 10;\n\n            ApplyRandomStrategies();\n        }\n\n        private void ApplyRandomStrategies() {\n            _components.Add(\n                _drone.AddComponent<WeavingManeuver>());\n            _components.Add(\n                _drone.AddComponent<BoppingManeuver>());\n            _components.Add(\n                _drone.AddComponent<FallbackManeuver>());\n\n            int index = Random.Range(0, _components.Count);\n\n            _drone.GetComponent<Drone>().\n                ApplyStrategy(_components[index]);\n        }\n\n        void OnGUI() {\n            if (GUILayout.Button(\"Spawn Drone\")) {\n                SpawnDrone();\n            }\n        }\n    }\n}\n```"]