["```cs\n<StackLayout Orientation=\"Vertical\" Padding=\"10,20,10,10\"> <Label Text=\"My Label\" XAlign=\"Center\" /> <Button Text=\"My Button\" /> <Entry Text=\"My Entry\" /> <Image Source=\"xamagon.png\" /> <Switch IsToggled=\"true\" /> <Stepper Value=\"10\" /> </StackLayout>\n```", "```cs\npublic class UIDemoPageFromCode : ContentPage\n{\n  public UIDemoPageFromCode()\n  {\n    var layout = new StackLayout \n    {\n      Orientation = StackOrientation.Vertical,\n      Padding = new Thickness(10, 20, 10, 10),\n    };\n\n    layout.Children.Add(new Label \n    {\n      Text = \"My Label\",\n      XAlign = TextAlignment.Center,\n    });\n\n    layout.Children.Add(new Button \n    {\n      Text =\"My Button\",\n    });\n\n    layout.Children.Add(new Image \n    {\n      Source = \"xamagon.png\",\n    });\n\n    layout.Children.Add(new Switch \n    {\n      IsToggled = true,\n    });\n\n    layout.Children.Add(new Stepper \n    {\n      Value = 10,\n    });\n\n    Content = layout;\n  }\n}\n```", "```cs\npublic class BaseViewModel : BindableObject\n{\n  protected readonly IWebService service = DependencyService.Get<IWebService>();\n  protected readonly ISettings settings = DependencyService.Get<ISettings>();\n\n  private bool isBusy = false;\n  public bool IsBusy\n  {get {return isBusy;}\n      set {isBusy = value; OnPropertyChanged();}}\n}\n```", "```cs\n[assembly: Dependency(typeof(XamChat.Core.FakeWebService))]\n[assembly: Dependency(typeof(XamChat.Core.FakeSettings))]\n```", "```cs\npublic Command LoginCommand { get; set; }\n```", "```cs\nConversation[] conversations;\n\npublic Conversation[] Conversations\n{get {return conversations; }\n  set {conversations = value; OnPropertyChanged();}\n}\n```", "```cs\npublic partial class LoginPage : ContentPage\n{\n  readonly LoginViewModel loginViewModel = new LoginViewModel();\n\n  public LoginPage()\n  {\n    Title = \"XamChat\";\n    BindingContext = loginViewModel;\n\n    loginViewModel.LoginCommand = new Command(async () =>\n    {\n      try\n      {\n        await loginViewModel.Login();\n\n        await Navigation.PushAsync(new ConversationsPage());\n      }\n      catch (Exception exc)\n      {\n        await DisplayAlert(\"Oops!\", exc.Message, \"Ok\");\n      }\n    });\n\n    InitializeComponent();\n  }\n}\n```", "```cs\n<StackLayout Orientation=\"Vertical\" Padding=\"10,10,10,10\">\n  <Entry Placeholder=\"Username\" Text=\"{Binding Username}\" />\n  <Entry Placeholder=\"Password\" Text=\"{Binding Password}\" IsPassword=\"true\" />\n  <Button Text=\"Login\" Command=\"{Binding LoginCommand}\" />\n  <ActivityIndicator IsVisible=\"{Binding IsBusy}\" IsRunning=\"true\" />\n</StackLayout>\n```", "```cs\npublic partial class ConversationsPage : ContentPage\n{\n  readonly MessageViewModel messageViewModel = new MessageViewModel();\n\n  public ConversationsPage()\n  {\n    Title = \"Conversations\";\n    BindingContext = messageViewModel;\n\n    InitializeComponent ();\n\n    Appearing += async (sender, e) => \n    {\n      try\n      {\n        await messageViewModel.GetConversations();\n      }\n      catch (Exception exc)\n      {\n        await DisplayAlert(\"Oops!\", exc.Message, \"Ok\");\n      }\n    };\n  }\n}\n```", "```cs\n<ListView ItemsSource=\"{Binding Conversations}\">\n  <ListView.ItemTemplate>\n    <DataTemplate>\n      <TextCell Text=\"{Binding Username}\" />\n    </DataTemplate>\n  </ListView.ItemTemplate>\n</ListView>\n```", "```cs\npublic static Page GetMainPage()\n{\n  return new NavigationPage(new LoginPage());\n}\n```"]