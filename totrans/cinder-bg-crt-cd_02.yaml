- en: Chapter 2. Know What is Possible – The Cinder Toolset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter introduces various basic tasks that can be performed with Cinder
    through compiling, running, changing, and discussing some of the sample applications.
  prefs: []
  type: TYPE_NORMAL
- en: We have already tested our setup by compiling and running the QuickTime sample
    application. Now, we are going to see what is possible with Cinder by compiling
    other samples and discussing what is so special about them.
  prefs: []
  type: TYPE_NORMAL
- en: We will go through samples that show most of the functionalities that will be
    discussed throughout this book. There will be many parts that are not clear and
    not easy to explain yet, but do not worry, we will try to understand them during
    the following chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Here is a list of some of the examples that we are going to discuss. Go to your
    Cinder samples folder `(/Users/You/cinder/samples/` on Mac OS X and `C:\cinder\samples\`
    on Windows, if you have followed the tutorial in the previous chapter).
  prefs: []
  type: TYPE_NORMAL
- en: BasicApp (`samples/basicApp`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BezierPath (`samples/bezierPath`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CairoBasic (`samples/CairoBasic`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CaptureTest (`samples/captureTest`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EaseGallery (`samples/EaseGallery`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TextBox (`samples/TextBox`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ArcballDemo (`samples/ArcballDemo`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Earthquake (`samples/Earthquake`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AudioGenerative (`samples/AudioGenerative`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BasicApp
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Go to your Cinder samples folder (`/Users/You/cinder/samples/` on MAC and `C:\cinder\samples\`
    on Windows, if you have followed the tutorial in the previous chapter).
  prefs: []
  type: TYPE_NORMAL
- en: There will be a folder with the name `BasicApp`. Take a look at what's there
    inside. If you are a Mac OS X user, open the project file at `xcode/basicApp.xcodeproj`.
    Windows users should open the project file from `vc10\basicApp.sln`. Compile and
    run the project.
  prefs: []
  type: TYPE_NORMAL
- en: '![BasicApp](img/9781849519564_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As we can see, a window with a black background appears. It seems that there
    is nothing there except pure blackness and an infinite void. But that's not true!
    Grab your mouse and try to fill the void by pointing and clicking-and-dragging
    anywhere on the black surface of the application window. An Orange line appears.
    Yes, it is a very basic drawing program that allows you to draw a continuous line.
    Line is one of the basic 2D geometric shapes that can be created with Cinder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try to change the color of the line. Close the window and click on the
    `basicApp.cpp` file located in the Source directory of the sample project found
    in the project navigator or project file tree browser of the chosen IDE. Navigate
    to a place in the code where you can see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the place where the actual drawing procedures of the program are defined.
    Go to the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This is the place where the color of the line can be changed. It is done by
    using a function called `glColor3f`. From the name of the function it is possible
    to tell that it uses OpenGL, changes color, and uses three `float` values for
    that. It is known that RGB color values consist of three components that are R
    (red), G (green), and B (blue). In this function, `0.0` is the minimal possible
    value for each component and `1.0` is the maximum.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s change the color of the line to red. We will need to set the red component
    of the color to maximum (`1.0`) and all others to minimum (`0.0`). So it will
    look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The reason why we use the *dot-zero-f* notation is that we want to tell the
    compiler that we are passing floating-point constants to the function. I will
    not dig into this here, as there are a lot of online resources about that on the
    Internet.
  prefs: []
  type: TYPE_NORMAL
- en: Now save, compile, run, and draw. Well done! You made your first custom line
    of code with Cinder! Let's continue with another example right away!
  prefs: []
  type: TYPE_NORMAL
- en: BezierPath
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we are ready for a little bit more of a complicated example that will allow
    you to draw a continuous Bézier curve. Bézier curves are called so because of
    a french engineer Pierre Bézier who actually patented and made them popular by
    applying them in designs. Bézier curves are widely used in computer graphics,
    animations, and other fields. The concept of Bézier curves allows us to create
    parametric curved lines by using the Cartesian coordinate system and numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Go to your Cinder samples folder (`/Users/You/cinder/samples/` on Mac OS X and
    `C:\cinder\samples\` if you use Windows).
  prefs: []
  type: TYPE_NORMAL
- en: Go to the folder named `bezierPath`. Open `xcode/bezierPath.xcodeproj`, if you
    are a Mac OS X user (`vc10\bezierPath.sln`, if you are using Windows). Compile
    and run the project.
  prefs: []
  type: TYPE_NORMAL
- en: '![BezierPath](img/9781849519564_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Click-and-drag to place points on the surface of the window. You will start
    to see the line after the second click. By moving the mouse while you hold it
    down, you can control the curvature of the line segment that is being drawn. Play
    around a bit to get a better understanding about how Bézier curves work.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add some extra geek-fun to the process, let''s change something as we did
    in the previous example. Close the application window and open the file `bezierPathApp.cpp`
    in the editor. Let''s assume that we don''t like the circles that are drawn on
    the screen to indicate the points that form the path—we want to draw rectangles
    instead. Navigate to a block of code that looks like the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see in the comment in the preceding block, this block is responsible
    for drawing the control points. It sets the color of the next thing to be drawn
    (or circle in this case) with the help of the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This uses a `for` loop to iterate through all the data in the `mPath` object.
    Circles are drawn with the help of the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Just by looking at the function name we can tell that it draws circles. `gl::`
    tells us that this function resides in the Cinder OpenGL namespace (Cinder uses
    namespaces a lot, and that makes its code more readable indeed), `draw` tells
    us that it draws something, `solid` means that this function draws something solid,
    and `circle` concludes this by making it clear that with the help of OpenGL a
    solid circle will be drawn.
  prefs: []
  type: TYPE_NORMAL
- en: Two parameters are passed to the function. The first one is a point object that
    holds x and y coordinate values and the other one defines the radius of the circle
    being drawn in pixels.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by changing the radius of the circle. Change `2.5f` to `10.0f`
    so that it looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Build and run the project to see the change! Hmm, interesting! It is indeed!
    But let''s not celebrate yet, remember, we wanted to change the circle into a
    rectangle. We will use a function defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'As the name of the function tells us, this function draws a solid rectangle.
    We have to provide a parameter to the function though. Just one parameter is required
    (the other one is optional and set to `false` by default) and that has to be of
    the type `Rectf`. A `Rectf` consisting of four values. The first two values define
    the upper-right corner of the rectangle and the other two define the location
    of the bottom-right corner. It is a bit different in most drawing APIs, as usually
    this kind of object is defined by passing in the x and y coordinates of the top-left
    corner and the width and height of the rectangle. Not this time. So we have to
    pass something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Where `x1` is the x coordinate of the top-left corner, `y1` is the y coordinate
    of the top-left corner, and `x2` and `y2` define where the bottom-right corner
    should be on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is just one of the five `Rectf` (or `RectT`) constructors in Cinder. If
    you want to see other ones, take a look in the Cinder online reference at [http://libcinder.org/docs/v0.8.4/classcinder_1_1_rect_t.html](http://libcinder.org/docs/v0.8.4/classcinder_1_1_rect_t.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'By analyzing the point drawing function (`gl::drawSolidCircle( mPath.getPoint(
    p ), 10.0f );`), we get a piece of code that represents an object that holds the
    x and y coordinates of the current control point:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We can access the x and y coordinates by writing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: And
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s construct our rectangle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![BezierPath](img/9781849519564_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The number constant `10.0f` in the preceding piece of code represents the width
    and height of the rectangle. As we want the width and height to be equal, we use
    equal values here. The following is the final code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Build and run the project. What you will see is that rectangles are drawn next
    to the actual control points, not on them as it should be. Let''s fix that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we changed all the `10.0f`' values to `5.0f` and subtracted
    `5.0f` from the first two parameters of the rectangle constructor. By doing that
    we moved the top-left corner of the rectangle to left by the half of its width
    and up by the half of its height (5 pixels), while keeping the same width and
    height (10 pixels).
  prefs: []
  type: TYPE_NORMAL
- en: Build and run the project, and as you can see, now the rectangle is in its right
    place.
  prefs: []
  type: TYPE_NORMAL
- en: Maybe this is a bit too complicated in the beginning, but the more you do these
    kind of adjustments the more you learn. We won't be making any more changes during
    the rest of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: CairoBasic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Have you ever dreamt of creating generative print artwork that could be printed
    in any size without losing quality? Meet Cairo.
  prefs: []
  type: TYPE_NORMAL
- en: Cairo is a vector-graphics software library that allows you to draw all the
    crazy vector stuff that can be done in software, such as Illustrator, and it allows
    us to save it as a separate vector-graphics file. If you want to know more about
    Cairo itself, visit it website ([http://cairographics.org/](http://cairographics.org/)).
  prefs: []
  type: TYPE_NORMAL
- en: Let's try this out! Search for the `CairoBasic` folder in the `samples` directory.
    Open `xcode/CairoBasic.xcodeproj` (`vc10\CairoBasic.sln`, if you're on Windows).
    Build and run the project. Nothing special seems to be there except a radial gradient
    background. But try to click on it! A flower. Click again! Random flowers. Try
    to fill the entire screen with them—you can smell the aroma, right?
  prefs: []
  type: TYPE_NORMAL
- en: '![CairoBasic](img/9781849519564_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Ok, that''s enough. Close the application window. So, what did just happen?
    To understand this open the file `CairoBasicApp.cpp` in your code editor. I won''t
    explain it yet, but it is possible to see that there is not very much code in
    it. Go to a block of code that looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This is a method of the main application class that does something when we press
    a key on the keyboard. We can see that it is possible to make the application
    fullscreen, if we press *F*, and then there is something defined for letters *S*,
    *E*, *P*, and *D*—what is it? If you press one of these buttons, you save the
    ready image in a file, but the file format of this file will be a vector one.
    As you can see, if you press *S*, you get a SVG file, for *E* you get an EPS,
    for *P* you get a PS or PostScript file, and for *D* you get a PDF.
  prefs: []
  type: TYPE_NORMAL
- en: 'Try it out! Build and run the application again, create your artwork, and press
    *S*, *E*, *P*, and *D* one after another. Then go to your home folder (`/Users/You/`
    on MAC and `C:\Users\You` on Windows) and you will see that there are four new
    files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`CairoBasicShot.svg`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CairoBasicShot.eps`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CairoBasicShot.ps`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CairoBasicShot.pdf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try to open one of these files with your favorite vector-graphics software.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can open the `CairoBasicShot.svg` file with your web browser as well. That
    means you do not need to convert vector-graphics to a format such as JPG or PNG,
    if you want to use it on the web—you can use it in the SVG vector file format
    right away.
  prefs: []
  type: TYPE_NORMAL
- en: Yes, it is true, you can zoom in to infinity and the details remain crisp and
    clear. That is the power of vector-graphics! Now you can post-process and print
    that 1 m x 1 m generative flower poster in 300 dpi without losing any detail.
    Cool, isn't it? And you can do so much more except just printing your artwork—you
    can use it as a base for physical objects to be made with a laser cutter or a
    CNC mill, for example.
  prefs: []
  type: TYPE_NORMAL
- en: CaptureTest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the first chapter, we saw that Cinder is capable of loading and playing back
    video files. So, how about using real-time footage? This sample application shows
    that it is possible to access video from a webcam that is connected to your computer.
  prefs: []
  type: TYPE_NORMAL
- en: Go search for a folder called `captureTest` (`CaptureBasic` in Cinder 0.8.5)
    in the `samples` directory. Open `xcode/captureTest.xcodeproj` (`vc10\captureTest.sln`,
    if you're using Windows). Build and run the project. Wait a bit, you should see
    the moving image from your camera.
  prefs: []
  type: TYPE_NORMAL
- en: '![CaptureTest](img/9781849519564_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There is nothing much more about this sample, it just captures and displays
    the image of the webcam. You can use this real-time data in many different ways
    later.
  prefs: []
  type: TYPE_NORMAL
- en: EaseGallery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we are going to do some animation with Cinder, it would be nice to just see
    some of the possibilities Cinder provides us for that. Go on and open up the folder
    named `EaseGallery` in the `samples` directory. Open `xcode/EaseGallery.xcodeproj`
    (`vc10\EaseGallery.sln`, if you are a Windows user). Build and run the project.
  prefs: []
  type: TYPE_NORMAL
- en: '![EaseGallery](img/9781849519564_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you are familiar with some kind of animation software or the TweenLite ActionScript
    library, you might remember a term called *easing*. This is what the EaseGallery
    example is about. Here you can see all the different animation easing algorithms
    that Cinder provides. We will dig a bit deeper into this later, but for now you
    just have to remember that there are such functions and you won't have to search
    for them in the darkest places of the Internet or implement them by yourself.
  prefs: []
  type: TYPE_NORMAL
- en: TextBox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cinder has a very good text support—even for those whose native language alphabets
    consist of non-English alphabet characters.
  prefs: []
  type: TYPE_NORMAL
- en: '![TextBox](img/9781849519564_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Let's search for a folder named `TextBox` in the `samples` directory. Open `xcode/TextBox.xcodeproj`
    (`vc10\TextBox.sln`, if you are a Windows user). Build and run the project. Click
    anywhere in the window. When you click-and-drag, the text box changes its width.
    Even more, the text inside it wraps accordingly. A rectangle that represents the
    full width and height of the space the text occupies is being drawn behind it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s close the window and try to make some changes (yes I lied, we are making
    changes again) to the application. Open `TextBoxApp.cpp` and find a block of code
    that looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Try to change the text within the quotes (don''t be afraid to use unicode characters):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Save the file, and build and run the project again. If you used unicode characters,
    you will be positively surprised—all the characters are there!
  prefs: []
  type: TYPE_NORMAL
- en: ArcballDemo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This sample demonstrates the basic 3D capabilities of Cinder. Go to the `ArcballDemo`
    directory in the `samples` folder and open `xcode/ArcballDemo.xcodeproj` (`vc10\ArcBallDemo.sln`,
    if you are using Windows).
  prefs: []
  type: TYPE_NORMAL
- en: '![ArcballDemo](img/9781849519564_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A strange image appears within the application window. Don't worry, just click-and-drag.
    You will notice that it is a 3D cube. I won't explain other things that were meant
    to demonstrate through this demo, but the important thing to know is that rendering
    (of the default Open GL render mode) in Cinder is done by using Open GL and that
    means that you can render 2D images, as well as 3D space.
  prefs: []
  type: TYPE_NORMAL
- en: Earthquake
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you open up this example, you will see how much detail you can get with real-time
    3D graphics in Cinder. Find the `Earthquake` directory in the `samples` folder,
    open `xcode/Earthquake.xcodeproj` (`vc10\Earthquake.sln`, if you are using Windows).
    Build and run the application.
  prefs: []
  type: TYPE_NORMAL
- en: '![Earthquake](img/9781849519564_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What you should see is a 3D model of the earth and red cones with numbers on
    them. You can rotate it by moving your mouse and zooming in and out by using your
    mousewheel.
  prefs: []
  type: TYPE_NORMAL
- en: Real-time interactive 3D application, isn't it awesome?
  prefs: []
  type: TYPE_NORMAL
- en: AudioGenerative
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to the world of generative audio! This application sample will show
    you some possibilities of real-time audio-visual world.
  prefs: []
  type: TYPE_NORMAL
- en: Find the folder named `AudioGenerative` in the Cinder `samples` directory. Open
    up the project file `xcode/AudioGenerative.xcodeproj` (`vc10\AudioGenerative.sln`,
    if you are using Windows). Build and run the application. Turn up the volume,
    but don't be afraid! It's just a sine wave. Try to move your mouse up and down
    above the application window—you will change the frequency of the sound by doing
    that.
  prefs: []
  type: TYPE_NORMAL
- en: '![AudioGenerative](img/9781849519564_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So we went through just a couple of samples that are included in the Cinder
    samples package. There are more, and one of the best ways you can learn about
    Cinder is to go through all the examples, try to change some parts of them, and
    try to understand how that works.
  prefs: []
  type: TYPE_NORMAL
- en: The discussion about the examples here was meant to be as an intro to the Cinder
    features that will be discussed in the next chapters. I recommend trying to compile
    and run all the samples so that you get as broad understanding about Cinder features
    as possible.
  prefs: []
  type: TYPE_NORMAL
