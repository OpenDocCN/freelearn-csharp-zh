["```cs\nbuilder.Services.AddMassTransit(x =>\n{\n    x.UsingRabbitMq();\n});\n```", "```cs\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class AppointmentsController : ControllerBase\n{\n    private readonly IPublishEndpoint _publishEndpoint;\n    private readonly IAppointmentRepository\n        _appointmentRepository;\n    public AppointmentsController (IAppointmentRepository\n        appointmentRepository, IPublishEndpoint\n            publishEndpoint)\n    {\n        _publishEndpoint = publishEndpoint;\n        _appointmentRepository = appointmentRepository;\n    }\n[HttpPost]\npublic async Task<IActionResult> CreateAppointment\n    (AppointmentDto appointment)\n{\n       var appointment = new Appointment()\n       {\n         CustomerId = AppointmentDto.CustomerId,\n         DoctorId = AppointmentDto.DoctorId,\n         Date = AppointmentDto.Date\n       });\n       await _appointmentRepository.Create(appointment);\n      var appointmentMessage = new AppointmentMessage()\n       {\n        Id = appointment.Id\n         CustomerId = appointment.CustomerId,\n         DoctorId = appointment.DoctorId,\n         Date = appointment.Date\n       });\n       await _publishEndpoint.Publish(appointmentMessage);\n       return Ok();\n  }\n}\n```", "```cs\npublic class AppointmentCreatedConsumer :\n    IConsumer<AppointmentMessage>\n{\npublic async Task Consume(ConsumeContext<Appointment\n    Message> context)\n{\n   // Code to extract the message from the context and\n     complete processing – like forming email, etc…\n        var jsonMessage =\n            JsonConvert.SerializeObject(context.Message);\n        Console.WriteLine($\"ApoointmentCreated message:\n            {jsonMessage}\");\n      }\n}\n```", "```cs\nvar busControl = Bus.Factory.CreateUsingRabbitMq(cfg =>\n{\n    cfg.ReceiveEndpoint(\"appointment-created-event\", e =>\n    {\n        e.Consumer<AppointmentCreatedConsumer>();\n    });\n});\nawait busControl.StartAsync(new CancellationToken());\ntry\n{\n    Console.WriteLine(\"Press enter to exit\");\n    await Task.Run(() => Console.ReadLine());\n}\nfinally\n{\n    await busControl.StopAsync();\n}\n```", "```cs\npublic interface IMessagePublisher {\n    Task PublisherAsync<T> (T data);\n}\npublic class MessagePublisher: IMessagePublisher {\n    public async Task PublishMessage<T> (T data, string\n       topicName) {\n         await using var client = new ServiceBusClient\n             (configuration[\"AzureServiceBusConnection\"]);\n        ServiceBusSender sender = client.CreateSender\n            (topicName);\n        var jsonMessage =\n            JsonConvert.SerializeObject(data);\n        ServiceBusMessage finalMessage = new\n            ServiceBusMessage(Encoding.UTF8.GetBytes\n                (jsonMessage))\n        {\n            CorrelationId = Guid.NewGuid().ToString()\n        };\n        await sender.SendMessageAsync(finalMessage);\n        await client.DisposeAsync();\n}\n```", "```cs\nservices.AddScoped<IMessagePublisher, MessagePublisher>();\n```", "```cs\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class AppointmentsController : ControllerBase\n{\n    private readonly IMessageBus _messageBus;\n    private readonly IAppointmentRepository\n        _appointmentRepository;\n    public AppointmentsController (IAppointmentRepository\n        appointmentRepository, IMessageBus messageBus)\n    {\n      _appointmentRepository = appointmentRepository;\n      _messageBus = messageBus;\n    }\n[HttpPost]\npublic async Task<IActionResult> CreateAppointment\n    (AppointmentDto appointment)\n{\n       var appointment = new Appointment()\n       {\n         CustomerId = AppointmentDto.CustomerId,\n         DoctorId = AppointmentDto.DoctorId,\n         Date = AppointmentDto.Date\n       });\n       await _appointmentRepository.Create(appointment);\n      var appointmentMessage = new AppointmentMessage()\n       {\n        Id = appointment.Id\n         CustomerId = appointment.CustomerId,\n         DoctorId = appointment.DoctorId,\n         Date = appointment.Date\n       });\n       await _messageBus.PublishMessage(appointmentMessage,\n           \"appointments\");\n       return Ok();\n  }\n}\n```", "```cs\npublic interface IAzureServiceBusConsumer\n    {\n        Task Start();\n        Task Stop();\n    }\n```", "```cs\n    public class AzureServiceBusConsumer :\n        IAzureServiceBusConsumer\n    {\n        private readonly ServiceBusProcessor\n            appointmentProcessor;\n        private readonly string appointmentSubscription;\n        private readonly IConfiguration _configuration;\n        public AzureServiceBusConsumer(IConfiguration\n            configuration)\n        {\n           _configuration = configuration;\n            string appointmentSubscription =\n              _configuration.GetValue<string>\n                (\"AppointmentProcessSubscription\")\n            var client = new ServiceBusClient\n                (serviceBusConnectionString);\n            appointmentProcessor = client.CreateProcessor\n                (\"appointments\", appointmentSubscription);\n        }\n        public async Task Start()\n        {\n            appointmentProcessor.ProcessMessageAsync +=\n                ProcessAppointment;\n            appointmentProcessor.ProcessErrorAsync +=\n                ErrorHandler;\n            await appointmentProcessor\n                .StartProcessingAsync();\n        }\n        public async Task Stop()\n        {\n            await appointmentProcessor\n                .StopProcessingAsync();\n            await appointmentProcessor.DisposeAsync();\n        }\n        Task ErrorHandler(ProcessErrorEventArgs args)\n        {\n            Console.WriteLine(args.Exception.ToString());\n            return Task.CompletedTask;\n        }\n        private async Task ProcessAppointment\n            (ProcessMessageEventArgs args)\n        {\n            // Code to extract the message from the args,\n            parse to a concrete type, and complete \n            processing – like\nforming email, etc…\n           await args.CompleteMessageAsync(args.Message);\n        }\n    }\n```"]