["```cs\nusing UnityEngine;\n\npublic class GameManager: MonoBehaviour \n{\n    public static GameManager instance;\n\n    void Awake()\n    {\n        instance = this;\n    }\n\n    public void InitializeScene()\n    {\n        // Load persistent game state variables from the save system.\n        // Load game systems and dependencies.\n    }\n}\n```", "```cs\nusing UnityEngine;\n\npublic class Client: MonoBehaviour\n{\n    void Start()\n    {\n        GameManager.instance.InitializeScene();\n    }\n}\n```", "```cs\nusing UnityEngine;\n\npublic class GameManager: MonoBehaviour \n{\n    public static GameManager _instance;\n\n    void Awake()\n    {\n        if (_instance == null)\n        {\n            // Assigning only if there's no other instances in memory.\n            _instance = this; \n        }\n        else if (_instance != null)\n        {\n            // Destroying itself if detects duplication.\n            Destroy(gameObject) \n        }\n    }\n}\n```", "```cs\nusing UnityEngine;\n\n// <T> can be any type.\npublic class Singleton<T> : MonoBehaviour where T : Component\n{\n    // The instance is accessible only by the getter.\n    private static T m_Instance; \n    public static bool m_isQuitting;\n\n    public static T Instance\n    {\n        get\n        {\n            if (m_Instance == null)\n            {\n                // Making sure that there's not other instances \n                // of the same type in memory. \n                m_Instance = FindObjectOfType<T>();\n\n                if (m_Instance == null)\n                {\n                    // Making sure that there's not other instances \n                    // of the same type in memory.\n                    GameObject obj = new GameObject();\n                    obj.name = typeof(T).Name;\n                    m_Instance = obj.AddComponent<T>();\n                }\n            }\n            return m_Instance;\n        }\n    }\n\n    // Virtual Awake() that can be overridden in a derived class.\n    public virtual void Awake()\n    {\n        if (m_Instance == null)\n        {\n            // If null, this instance is now the Singleton instance \n            // of the assigned type. \n            m_Instance = this as T;\n\n            // Making sure that my Singleton instance \n            // will persist in memory across every scene.\n            DontDestroyOnLoad(this.gameObject);\n        }\n        else\n        {\n            // Destroy current instance because it must be a duplicate.\n            Destroy(gameObject);\n        }\n    }\n}\n```", "```cs\nusing UnityEngine;\n\n// Inheriting Singleton and specifying the type.\npublic class GameManager : Singleton<GameManager>\n{\n    public void InitializeGame()\n    {\n        Debug.Log(\"Initializing the game.\");\n    }\n}\n```", "```cs\nusing UnityEngine;\n\n// Inheriting the Singleton and specifying it's type.\npublic class InventoryManager : Singleton<InventoryManager> \n{\n    public void AddItem(int itemID)\n    {\n        Debug.Log(\"Adding item to the inventory.\");\n    }\n\n    public void RemoveItem(int itemID)\n    {\n        Debug.Log(\"Removing item to the inventory.\");\n    }\n}\n```", "```cs\nusing UnityEngine;\n\npublic class Client : MonoBehaviour\n{\n    void Update()\n    {\n        if (Input.GetKeyDown(KeyCode.I))\n        {\n            GameManager.Instance.InitializeGame();\n        }\n\n        if (Input.GetKeyDown(KeyCode.A))\n        {\n            InventoryManager.Instance.AddItem(001);\n        }\n\n        if (Input.GetKeyDown(KeyCode.R))\n        {\n            InventoryManager.Instance.RemoveItem(023);\n        }\n    }\n}\n```"]