["```cs\n> using System.Threading.Tasks;\n> await Task.Delay(10000)\n>\n\n```", "```cs\nclass C\n{\n  public void M()\n  {\n    Console.WriteLine(\"C.M invoked\");\n  }\n}\n\n```", "```cs\n#r \"<%YOUR_TEMP_DIRECTORY%>\\Newtonsoft.Json.dll\"\n\n```", "```cs\nusing Newtonsoft.Json.Linq;\nJArray array = new JArray();\narray.Add(\"Manual text\");\narray.Add(new DateTime(2000, 5, 23));\n\nJObject o = new JObject();\no[\"MyArray\"] = array;\n\no.ToString()\n\n```", "```cs\n#load \"<%YOUR_TEMP_DIRECTORY%>\\MyScript.csx\"\n\n```", "```cs\npublic void M()\n{\n  Console.WriteLine(\"Executing ClassLibrary.Class1.M()\");\n}\n\n```", "```cs\n> Console.WriteLine(x);\n(1,19): error CS0103: The name 'x' does not exist in the current context\n\n```", "```cs\nvar t = System.Environment.GetCommandLineArgs();\n\nforeach (var i in t)\n{\n  System.Console.WriteLine(i);\n}\n\n```", "```cs\nc:\\>csi MyScript.csx 1 2 3\ncsi\nMyScript.csx\n1\n2\n3\n\n```", "```cs\nc:\\>csi -i MyScript.csx 1 2 3\ncsi\n-i\nMyScript.csx\n1\n2\n3\n>\n\n```", "```cs\nc:\\>csi.exe 1\nerror CS2001: Source file 'c:\\1' could not be found.\n\n```", "```cs\nExecuting EvaluateSimpleAsync...\n3\n\n```", "```cs\nExecuting EvaluateWithReferencesAsync...\n<%your_machine_name%>\n\n```", "```cs\nExecuting EvaluateWithImportsAsync...\n1.4142135623731\n\n```", "```cs\nExecuting EvaluateParameterizedScriptInLoopAsync...\n0\n1\n4\n9\n16\n25\n36\n49\n64\n81\nPress any key to continue . . .\n\n```", "```cs\npublic static void Main(string[] args)\n{\n  EvaluateSimpleAsync().Wait();\n\n  Console.ReadKey();\n  EvaluateWithReferencesAsync().Wait();\n\n  Console.ReadKey();\n  EvaluateWithImportsAsync().Wait();\n\n  Console.ReadKey();\n  EvaluateParameterizedScriptInLoopAsync().Wait();\n}\n\n```", "```cs\nprivate static async Task EvaluateSimpleAsync()\n{\n  Console.WriteLine(\"Executing EvaluateSimpleAsync...\");\n  object result = await CSharpScript.EvaluateAsync(\"1 + 2\");\n  Console.WriteLine(result);\n}\n\n```", "```cs\nprivate static async Task EvaluateWithReferencesAsync()\n{\n  Console.WriteLine(\"Executing EvaluateWithReferencesAsync...\");\n  var result = await CSharpScript.EvaluateAsync(\"System.Net.Dns.GetHostName()\",\n  ScriptOptions.Default.WithReferences(typeof(System.Net.Dns).Assembly));\n  Console.WriteLine(result);\n}\n\n```", "```cs\nprivate static async Task EvaluateWithReferencesAsync()\n{\n  Console.WriteLine(\"Executing EvaluateWithReferencesAsync...\");\n  var result = await CSharpScript.EvaluateAsync(\"System.Net.Dns.GetHostName()\",\n  ScriptOptions.Default.WithReferences(typeof(System.Net.Dns).Assembly));\n  Console.WriteLine(result);\n}\n\n```", "```cs\nprivate static async Task EvaluateParameterizedScriptInLoopAsync()\n{\n  Console.WriteLine(\"Executing EvaluateParameterizedScriptInLoopAsync...\");\n  var script = CSharpScript.Create<int>(\"X*Y\", globalsType: typeof(Globals));\n  script.Compile();\n  for (int i = 0; i < 10; i++)\n  {\n    Console.WriteLine((await script.RunAsync(new Globals { X = i, Y = i })).ReturnValue);\n  }\n}\n\n```"]