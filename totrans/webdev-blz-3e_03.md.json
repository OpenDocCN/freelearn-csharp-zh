["```cs\n    dotnet new classlib -o Data \n    ```", "```cs\n    dotnet new classlib -o Data.Models \n    ```", "```cs\n    dotnet sln add Data\n    dotnet sln add Data.Models \n    ```", "```cs\n    namespace Data.Models;\n    public class Category\n    {\n    \tpublic string? Id { get; set; }\n    \tpublic string Name { get; set; } = string.Empty;\n    } \n    ```", "```cs\n    namespace Data.Models;\n    public class Tag\n    {\n        public string? Id { get; set; }\n        public string Name { get; set; } = string.Empty;\n    } \n    ```", "```cs\n    namespace Data.Models;\n    public class Comment\n    {\n        public string? Id { get; set; }\n        public required string BlogPostId { get; set; }\n        public DateTime Date { get; set; }\n        public string Text { get; set; } = string.Empty;\n        public string Name { get; set; } = string.Empty;\n    } \n    ```", "```cs\n    namespace Data.Models;\n    public class BlogPost\n    {\n        public string? Id { get; set; }\n        public string Title { get; set; } = string.Empty;\n        public string Text { get; set; } = string.Empty;\n        public DateTime PublishDate { get; set; }\n        public Category? Category { get; set; }\n        public List<Tag> Tags { get; set; } = new();\n    } \n    ```", "```cs\n    namespace Data.Models.Interfaces;\n    public interface IBlogApi\n    {\n        Task<int> GetBlogPostCountAsync();\n        Task<List<BlogPost>> GetBlogPostsAsync(int numberofposts, int startindex);\n        Task<List<Category>> GetCategoriesAsync();\n        Task<List<Tag>> GetTagsAsync();\n        Task<List<Comment>> GetCommentsAsync(string blogPostId);\n        Task<BlogPost?> GetBlogPostAsync(string id);\n        Task<Category?> GetCategoryAsync(string id);\n        Task<Tag?> GetTagAsync(string id);\n        Task<BlogPost?> SaveBlogPostAsync(BlogPost item);\n        Task<Category?> SaveCategoryAsync(Category item);\n        Task<Tag?> SaveTagAsync(Tag item);\n        Task<Comment?> SaveCommentAsync(Comment item);\n        Task DeleteBlogPostAsync(string id);\n        Task DeleteCategoryAsync(string id);\n        Task DeleteTagAsync(string id);\n        Task DeleteCommentAsync(string id);\n    } \n    ```", "```cs\n    namespace Data;\n    public class BlogApiJsonDirectAccessSetting\n    {\n        public string BlogPostsFolder { get; set; } = string.Empty;\n        public string CategoriesFolder { get; set; } = string.Empty;\n        public string TagsFolder { get; set; } = string.Empty;\n        public string CommentsFolder { get; set; } = string.Empty;\n        public string DataPath { get; set; } = string.Empty;\n    } \n    ```", "```cs\n    using Data.Models.Interfaces;\n    using Microsoft.Extensions.Options;\n    using System.Text.Json;\n    using Data.Models;\n    namespace Data;\n    public class BlogApiJsonDirectAccess: IBlogApi\n    {\n    } \n    ```", "```cs\n     BlogApiJsonDirectAccessSetting _settings;\n        public BlogApiJsonDirectAccess( IOptions<BlogApiJsonDirectAccessSetting> option)\n        {\n            _settings = option.Value;\n            ManageDataPaths();\n        }\n        private void ManageDataPaths()\n        {\n            CreateDirectoryIfNotExists(_settings.DataPath);\n            CreateDirectoryIfNotExists($@\"{_settings.DataPath}\\{_settings.BlogPostsFolder}\");\n            CreateDirectoryIfNotExists($@\"{_settings.DataPath}\\{_settings.CategoriesFolder}\");\n            CreateDirectoryIfNotExists($@\"{_settings.DataPath}\\{_settings.TagsFolder}\");\n            CreateDirectoryIfNotExists($@\"{_settings.DataPath}\\{_settings.CommentsFolder}\");\n        }\n        private static void CreateDirectoryIfNotExists(string path)\n        {\n            if (!Directory.Exists(path))\n            {\n                Directory.CreateDirectory(path);\n            }\n        } \n    ```", "```cs\n    private async Task<List<T>> LoadAsync<T>(string folder)\n    {\n        var list = new List<T>();\n        foreach (var f in Directory.GetFiles($@\"{_settings.DataPath}\\{folder}\"))\n        {\n            var json = await File.ReadAllTextAsync(f);\n            var blogPost = JsonSerializer.Deserialize<T>(json);\n            if (blogPost is not null)\n            {\n                list.Add(blogPost);\n            }\n        }\n        return list;\n    } \n    ```", "```cs\n    private async Task SaveAsync<T>(string folder, string filename, T item)\n    {\n        var filepath = $@\"{_settings.DataPath}\\{folder}\\{filename}.json\";\n        await File.WriteAllTextAsync(filepath, JsonSerializer.Serialize<T>(item));\n    }\n    private Task DeleteAsync(string folder, string filename)\n     {\n         var filepath = $@\"{_settings.DataPath}\\{folder}\\{filename}.json\";\n         if (File.Exists(filepath))\n         {\n             File.Delete(filepath);\n         }\n         return Task.CompletedTask;\n     } \n    ```", "```cs\n    public async Task<int> GetBlogPostCountAsync()\n     {\n         var list = await LoadAsync<BlogPost>(_settings.BlogPostsFolder);\n         return list.Count;\n     }\n     public async Task<List<BlogPost>> GetBlogPostsAsync(int numberofposts, int startindex)\n     {\n         var list = await LoadAsync<BlogPost>(_settings.BlogPostsFolder);\n         return list.Skip(startindex).Take(numberofposts).ToList();\n     } \n    public async Task<BlogPost?> GetBlogPostAsync(string id)\n        {\n            var list = await LoadAsync<BlogPost>(_settings.BlogPostsFolder);\n            return list.FirstOrDefault(bp => bp.Id == id);\n        } \n    ```", "```cs\n     public async Task<List<Category>> GetCategoriesAsync()\n        {\n            return await LoadAsync<Category>(_settings.CategoriesFolder);\n        }\n        public async Task<Category?> GetCategoryAsync(string id)\n        {\n            var list = await LoadAsync<Category>(_settings.CategoriesFolder);\n            return list.FirstOrDefault(c => c.Id == id);\n        } \n    ```", "```cs\n     public async Task<List<Tag>> GetTagsAsync()\n        {\n            return await LoadAsync<Tag>(_settings.TagsFolder);\n        }\n        public async Task<Tag?> GetTagAsync(string id)\n        {\n            var list = await LoadAsync<Tag>(_settings.TagsFolder);\n            return list.FirstOrDefault(t => t.Id == id);\n        } \n    ```", "```cs\n     public async Task<List<Comment>> GetCommentsAsync(string blogPostId)\n        {\n            var list = await LoadAsync<Comment>(_settings.\n    CommentsFolder);\n            return list.Where(t => t.BlogPostId == blogPostId).ToList();\n        } \n    ```", "```cs\n    public async Task<BlogPost?> SaveBlogPostAsync(BlogPost item)\n    {\n        item.Id ??= Guid.NewGuid().ToString();\n        await SaveAsync(_settings.BlogPostsFolder, item.Id, item);\n        return item;\n    }\n    public async Task<Category?> SaveCategoryAsync(Category item)\n    {\n        item.Id ??= Guid.NewGuid().ToString();\n        await SaveAsync(_settings.CategoriesFolder, item.Id, item);\n        return item;\n    }\n    public async Task<Tag?> SaveTagAsync(Tag item)\n    {\n        item.Id ??= Guid.NewGuid().ToString();\n        await SaveAsync(_settings.TagsFolder, item.Id, item);\n        return item;\n    }\n    public async Task<Comment?> SaveCommentAsync(Comment item)\n    {\n        item.Id ??= Guid.NewGuid().ToString();\n        await SaveAsync(_settings.CommentsFolder, item.Id, item);\n        return item;\n    } \n    ```", "```cs\n     public async Task DeleteBlogPostAsync(string id)\n        {\n            await DeleteAsync(_settings.BlogPostsFolder, id);\n\n            var comments = await GetCommentsAsync(id);\n            foreach (var comment in comments)\n            {\n                if (comment.Id != null)\n                {\n                    await DeleteAsync(_settings.CommentsFolder, comment.Id);\n                }\n            }\n        }\n        public async Task DeleteCategoryAsync(string id)\n        {\n            await DeleteAsync(_settings.CategoriesFolder, id);\n        }\n        public async Task DeleteTagAsync(string id)\n        {\n            await DeleteAsync(_settings.TagsFolder, id);\n        }\n        public async Task DeleteCommentAsync(string id)\n        {\n            await DeleteAsync(_settings.CommentsFolder, id);\n        } \n    ```", "```cs\n    using Data;\n    using Data.Models.Interfaces; \n    ```", "```cs\n    builder.Services.AddOptions<BlogApiJsonDirectAccessSetting>().Configure(options =>\n    {\n        options.DataPath = @\"..\\..\\..\\Data\\\";\n        options.BlogPostsFolder = \"Blogposts\";\n        options.TagsFolder = \"Tags\";\n        options.CategoriesFolder = \"Categories\";\n        options.CommentsFolder = \"Comments\";\n    });\n    builder.Services.AddScoped<IBlogApi, BlogApiJsonDirectAccess>(); \n    ```", "```cs\nIOptions<BlogApiJsonDirectAccessSetting>, the dependency injection will return an object populated with the information we have supplied above. This is an excellent place to load configuration from our .NET configuration, a key vault, or a database.\n```"]