- en: Chapter 10. Contacts, Camera, and Location
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章. 联系人、相机和位置
- en: Some of the most vital features used by mobile applications today are based
    on the new types of data that can be collected by our devices. Features such as
    GPS location and camera are staples in modern applications such as Instagram or
    Twitter. It's difficult to develop an application and not use some of these native
    features. So, let's explore our options to take advantage of this functionality
    with Xamarin.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当今移动应用程序中使用的许多关键功能都基于我们设备可以收集的新类型数据。例如，GPS位置和相机是Instagram或Twitter等现代应用程序的必备功能。开发一个应用程序而不使用这些原生功能是很困难的。因此，让我们探索使用Xamarin利用这些功能的方法。
- en: 'In this chapter, we will do the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将做以下事情：
- en: Introduce the Xamarin.Mobile library
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍Xamarin.Mobile库
- en: Read the address book on Android and iOS
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Android和iOS上读取通讯录
- en: Retrieve the GPS location of our device
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取我们设备的GPS位置
- en: Pull photos from the camera and photo library
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从相机和照片库中拉取照片
- en: Introducing Xamarin.Mobile
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Xamarin.Mobile
- en: To simplify the development of these features across multiple platforms, Xamarin
    has developed a library called **Xamarin.Mobile**. It delivers a single API to
    access the contacts, GPS location, heading of the screen, camera, and photo library
    for iOS, Android, and even Windows platforms. It also takes advantage of the **Task
    Parallel Libraries** (**TPL**) to deliver a modern C# API that will make our developers
    more productive than what their native alternatives would. This gives you the
    ability to write nice, clean, asynchronous code using the `async` and `await`
    keywords in C#. You can also reuse the same code in iOS and Android, minus a few
    differences that are required by the Android platform.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化跨多个平台开发这些功能，Xamarin开发了一个名为**Xamarin.Mobile**的库。它提供了一个单一的API来访问iOS、Android甚至Windows平台上的联系人、GPS位置、屏幕航向、相机和照片库。它还利用**任务并行库**（**TPL**）来提供一个现代的C#
    API，这将使我们的开发者比他们的本地替代品更有效率。这使您能够使用C#中的`async`和`await`关键字编写优雅、干净的异步代码。您还可以在iOS和Android上重用相同的代码，除了Android平台所需的少数差异。
- en: 'To install Xamarin.Mobile, open the **Xamarin Component Store** in **Xamarin
    Studio**, and add the **Xamarin.Mobile** component to a project as shown in the
    following screenshot. You''re going to use the following features (of the component):'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Xamarin.Mobile，请打开**Xamarin组件商店**，并在**Xamarin Studio**中添加**Xamarin.Mobile**组件，如图所示。您将使用以下功能（组件的功能）：
- en: '![Introducing Xamarin.Mobile](img/00077.jpeg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![介绍Xamarin.Mobile](img/00077.jpeg)'
- en: 'Before we dig further into using Xamarin.Mobile, let''s review the namespaces
    and functionality available with the library:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进一步探讨使用Xamarin.Mobile之前，让我们回顾一下库中可用的命名空间和功能：
- en: '`Xamarin.Contacts`: This contains classes that enable you to interact with
    the full address book. It includes everything from the contact''s photo, phone
    numbers, address, e-mail, website, and so on.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Xamarin.Contacts`：这个库包含了一些类，使您能够与完整的通讯录进行交互。它包括联系人的照片、电话号码、地址、电子邮件、网站等内容。'
- en: '`Xamarin.Geolocation`: This combined with the accelerometer gives you access
    to the device''s GPS location, including the altitude, heading, longitude, latitude,
    and speed. You can track the device''s position explicitly or listen for GPS position
    changes over time.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Xamarin.Geolocation`：结合加速度计，它为您提供设备GPS位置的信息，包括海拔、航向、经度、纬度和速度。您可以显式跟踪设备的位置，或者监听GPS位置随时间的变化。'
- en: '`Xamarin.Media`: This grants access to the device''s cameras (if there is more
    than one) and built-in photo library. This is an easy way to add photo selection
    capabilities to any application.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Xamarin.Media`：这个库允许访问设备的相机（如果有多个的话）和内置的照片库。这是向任何应用程序添加照片选择功能的一种简单方法。'
- en: For the full documentation of Xamarin.Mobile, visit the API documentation with
    the Component Store at [http://componentsapi.xamarin.com](http://componentsapi.xamarin.com).
    You can also view it in the native Mono documentation browser by clicking on **Open
    API Documentation** when viewing the component in Xamarin Studio.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取Xamarin.Mobile的完整文档，请访问包含组件商店的API文档，网址为[http://componentsapi.xamarin.com](http://componentsapi.xamarin.com)。您也可以在Xamarin
    Studio中查看它，通过在查看组件时点击**打开API文档**。
- en: Xamarin.Mobile is also an open source project with the standard Apache 2.0 license.
    You can contribute to the project or submit issues to the GitHub page at [https://github.com/xamarin/Xamarin.Mobile](https://github.com/xamarin/Xamarin.Mobile).
    Feel free to use Xamarin.Mobile in your applications or fork, and modify it for
    your own purposes.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin.Mobile也是一个开源项目，拥有标准的Apache 2.0许可证。您可以为项目做出贡献或向GitHub页面[https://github.com/xamarin/Xamarin.Mobile](https://github.com/xamarin/Xamarin.Mobile)提交问题。您可以在您的应用程序中使用Xamarin.Mobile，也可以将其分叉，并根据自己的需求进行修改。
- en: Accessing contacts
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问联系人
- en: To begin our exploration of what Xamarin.Mobile offers, let's access the address
    book within a Xamarin application. For iOS, the first step is to make a **Single
    View Application** project by navigating to **iOS** | **iPhone Storyboard**. Make
    sure you add Xamarin.Mobile to the project from the Component Store.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始探索Xamarin.Mobile提供的内容，让我们在Xamarin应用程序中访问地址簿。对于iOS，第一步是通过导航到**iOS** | **iPhone
    Storyboard**来创建一个**单视图应用程序**项目。确保您从组件商店将Xamarin.Mobile添加到项目中。
- en: 'Now, let''s implement a simple `UITableView` with a list of contacts:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们实现一个简单的`UITableView`，其中包含联系人列表：
- en: Open the `MainStoryboard.storyboard` file. Delete any existing controllers created
    by the project template.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`MainStoryboard.storyboard`文件。删除由项目模板创建的任何现有控制器。
- en: Create `UINavigationController` with a `UITableViewController` as its root child
    controller.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个以`UITableViewController`作为其根子控制器的`UINavigationController`。
- en: Set the **Class** of `UITableViewController` to `ContactsController` by navigating
    to **Properties** | **Widget** in the iOS designer.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在iOS设计器中导航到**属性** | **小部件**，将`UITableViewController`的**类**设置为`ContactsController`。
- en: Save the storyboard file and return to Xamarin Studio.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存故事板文件并返回到Xamarin Studio。
- en: 'Open the automatically generated `ContactsController.cs` and start implementing
    the table view. Add `using Xamarin.Contacts;` to the top of the file and make
    the following changes to the controller:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 打开自动生成的`ContactsController.cs`文件，并开始实现表格视图。在文件顶部添加`using Xamarin.Contacts;`，并对控制器进行以下更改：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We filled out the title for the navigation bar, `"Contacts"`, and set the class
    to implement `IUITableViewDataSource`. This is a new type of interface that Xamarin
    has created to simplify using Objective-C protocols from C#. It is exactly the
    same as creating a class that inherits from `UITableViewSource`, as we did in
    the earlier chapters, but you can do it from your controller as well. Xamarin
    has done some tricks here. They created an interface with the methods that can
    be optionally implemented, which isn't something that C# supports. This type of
    interface can make your code a bit cleaner by reducing the need for a new class,
    which is great for very simple controllers.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们填写了导航栏的标题`"Contacts"`，并将其类设置为实现`IUITableViewDataSource`。这是Xamarin创建的一种新类型接口，用于简化从C#使用Objective-C协议。这与我们在前面的章节中创建继承自`UITableViewSource`的类完全相同，但您也可以从控制器中完成。Xamarin在这里做了一些技巧。他们创建了一个具有可选实现方法的接口，这是C#不支持的功能。这种类型的接口可以通过减少对新类的需求来使您的代码更加简洁，这对于非常简单的控制器来说是非常好的。
- en: 'Next, let''s add some code to load the contacts:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们添加一些代码来加载联系人：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: To use Xamarin.Mobile for loading contacts, you must first create an `AddressBook`
    object. Next, we have to call `RequestPermissions` in order to ask the user for
    permission to access the address book. This is an important step since it is required
    by iOS devices before an application can access the user's contacts. This prevents
    potentially nefarious applications from retrieving contacts without the user's
    knowledge. Android, on the other hand, only presents these permissions before
    installing an application.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Xamarin.Mobile加载联系人，您必须首先创建一个`AddressBook`对象。接下来，我们必须调用`RequestPermissions`来请求用户允许访问地址簿。这是一个重要的步骤，因为iOS设备在应用程序可以访问用户的联系人之前需要这一步骤。这防止了恶意应用程序在用户不知情的情况下检索联系人。另一方面，Android设备只在安装应用程序之前展示这些权限。
- en: Next, we used the `System.Linq` extension method `ToArray` to enumerate over
    the address book and store it in a member variable named contacts. You can also
    use `foreach` over the `AddressBook` object depending on your needs.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用了`System.Linq`扩展方法`ToArray`来遍历地址簿，并将其存储在名为`contacts`的成员变量中。根据您的需求，您也可以在`AddressBook`对象上使用`foreach`。
- en: 'If you were to compile and run the application at this point, you would be
    greeted by the standard iOS pop up requesting access to contacts, as shown in
    the following screenshot:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您现在编译并运行应用程序，您将看到一个标准的iOS弹出窗口请求访问联系人，如下面的截图所示：
- en: '![Accessing contacts](img/00078.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![访问联系人](img/00078.jpeg)'
- en: If you accidentally hit **Don't Allow**, you can change this setting by navigating
    to **Settings** | **Privacy** | **Contacts** on the device. In the iOS Simulator,
    you can also reset all the privacy prompts in the simulator by closing the application
    and navigating to **Settings** | **General** | **Reset** | **Reset Location &
    Privacy**. This is a good tip to know whether you need to retest during development.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你意外地点击了**不允许**，你可以通过在设备上导航到**设置** | **隐私** | **联系人**来更改此设置。在iOS模拟器中，你还可以通过关闭应用程序并导航到**设置**
    | **通用** | **重置** | **重置位置与隐私**来重置模拟器中的所有隐私提示。这是一个在开发过程中需要重新测试时的好提示。
- en: 'So, for the next step, we''ll need to implement the `IUITableViewDataSource`
    interface so that we can work with the array of contacts and display them on the
    screen. Add the following methods to the controller just like you would to `UITableViewSource`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对于下一步，我们需要实现`IUITableViewDataSource`接口，以便我们可以处理联系人数组并在屏幕上显示它们。就像添加到`UITableViewSource`一样，在控制器中添加以下方法：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Also, add a `CellName` constant string to the class by selecting a string identifier
    such as `ContactCell`. Now, if you compile and run the program, you''ll be able
    to see the list of contacts on the device. The following screenshot shows the
    default list of contacts in the iOS Simulator:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，通过选择一个字符串标识符，如`ContactCell`，向类中添加一个`CellName`常量字符串。现在，如果你编译并运行程序，你将能够在设备上看到联系人列表。以下截图显示了iOS模拟器中的默认联系人列表：
- en: '![Accessing contacts](img/00079.jpeg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![访问联系人](img/00079.jpeg)'
- en: Retrieving contacts on Android
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Android中检索联系人
- en: In a very similar fashion, we can retrieve a list of contacts in Android with
    Xamarin.Mobile. All of the APIs in Xamarin.Mobile are identical in Android with
    the exception of the requirement of `Android.Content.Context` to be passed in
    a few places. This is because many native Android APIs require a reference to
    the current activity (or to the other context such as `Application`) in order
    to function properly. To begin, create a standard Android application project
    by navigating to **Android** | **Android Application** in Xamarin Studio. Make
    sure you add Xamarin.Mobile to the project from the Component Store.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以非常相似的方式，我们可以使用Xamarin.Mobile在Android中检索联系人列表。Xamarin.Mobile中的所有API在Android中都是相同的，除了需要在几个地方传递`Android.Content.Context`的要求。这是因为许多原生Android
    API需要当前活动（或到其他上下文，如`Application`）的引用才能正常工作。首先，通过在Xamarin Studio中导航到**Android**
    | **Android Application**来创建一个标准的Android应用程序项目。确保您从组件存储库中将Xamarin.Mobile添加到项目中。
- en: 'In a parallel iOS, let''s create a simple `ListView` to display a list of contacts
    as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在并行iOS中，让我们创建一个简单的`ListView`来显示联系人列表，如下所示：
- en: Open the `Main.axml` file from the `layout` folder in the `Resources` directory
    in the Android designer.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`Resources`目录中的`layout`文件夹打开`Main.axml`文件。
- en: Remove the default button from the project template and add **ListView** to
    the layout.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目模板中删除默认按钮，并将**ListView**添加到布局中。
- en: Set its **Id** to `@+id/contacts`.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其**Id**设置为`@+id/contacts`。
- en: Save the file and open `MainActivity.cs` so that we can make some changes to
    the code.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件并打开`MainActivity.cs`，以便我们可以对代码进行一些修改。
- en: 'Let''s begin by removing most of the code; we don''t need the code that came
    from the project template. You will also need to add a `using` statement for `Xamarin.Contacts`.
    Next, let''s implement a simple `BaseAdapter<Contact>` class inside the `MainActivity`
    class as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从删除大部分代码开始；我们不需要来自项目模板的代码。您还需要添加一个`using`语句用于`Xamarin.Contacts`。接下来，让我们在`MainActivity`类中实现一个简单的`BaseAdapter<Contact>`类，如下所示：
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This will display each contact in `TextView` for each row in `ListView`. One
    thing that we've done here in order to simplify things is add a property for the
    array of contacts. This should be pretty straightforward and similar to what we
    did in the previous chapters.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在`ListView`的每一行中显示一个`TextView`来显示每个联系人。我们在这里为了简化事情所做的另一件事是为联系人数组添加一个属性。这应该相当直接，类似于我们在前面的章节中所做的。
- en: 'Now, let''s set up the adapter in `OnCreate` as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在`OnCreate`中设置适配器，如下所示：
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This code calls Xamarin.Mobile that is identical to what we did on the code
    for iOS except that here, `this` had to be passed for the Android `Context` in
    the constructor for `AddressBook`. Our code changes are complete; however, if
    you run the application right now, an exception would be thrown. Android requires
    permission in the manifest file, which will notify the user of its access to the
    address book when downloaded from Google Play.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码调用Xamarin.Mobile，与我们在iOS代码中所做的一样，只是在这里，`this`必须传递给`AddressBook`构造函数中的Android
    `Context`。我们的代码更改已完成；然而，如果您现在运行应用程序，将会抛出异常。Android需要在清单文件中请求权限，这将通知用户在从Google
    Play下载时其访问地址簿的权限。
- en: 'We must create an `AndroidManifest.xml` file and declare a permission as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须创建一个`AndroidManifest.xml`文件并声明一个权限，如下所示：
- en: Open the project options for the Android project.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Android项目的项目选项。
- en: Select the **Android Application** tab under **Build**.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**构建**下选择**Android应用程序**选项卡。
- en: Click on **Add Android manifest**.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加Android清单**。
- en: Under the **Required permissions** section, check **ReadContacts**.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**必需权限**部分下，勾选**读取联系人**。
- en: Click on **OK** to save your changes.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**确定**保存您的更改。
- en: 'Now, if you run the application, you will get a list of all the contacts on
    the device, as shown in the following screenshot:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你运行应用程序，你将得到设备上所有联系人的列表，如下面的截图所示：
- en: '![Retrieving contacts on Android](img/00080.jpeg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![在Android上检索联系人](img/00080.jpeg)'
- en: Looking up GPS location
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找GPS位置
- en: Using Xamarin.Mobile to track a user's GPS location is as simple as accessing
    their contacts. There is a similar process for setting up access on iOS and Android,
    but in the case of location, you don't have to request permission from code. iOS
    will automatically show the standard alert requesting the permission. Android,
    on the other hand, merely requires a manifest setting.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Xamarin.Mobile跟踪用户的GPS位置就像访问他们的联系人一样简单。iOS和Android的设置过程类似，但在位置方面，您不需要在代码中请求权限。iOS会自动显示标准警报请求权限。另一方面，Android只需在清单中设置一个设置。
- en: As an example, let's create an application that displays a list of GPS location
    updates over time. Let's begin with an iOS example by creating a Single View Application
    project. This can be done by navigating to **iOS** | **iPhone Storyboard** and
    clicking on **Single View Application**, just like we did in the previous section.
    Make sure you add Xamarin.Mobile to the project from the Component Store.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们创建一个显示GPS位置随时间更新的应用程序。让我们从一个iOS示例开始，创建一个单视图应用程序项目。这可以通过导航到**iOS** | **iPhone
    Storyboard**并点击**Single View Application**来完成，就像我们在上一节中所做的那样。确保您从组件存储库中将Xamarin.Mobile添加到项目中。
- en: 'Now, let''s implement a simple `UITableView` to display a list of GPS updates
    as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们实现一个简单的`UITableView`来显示GPS更新的列表，如下所示：
- en: Open the `MainStoryboard.storyboard` file. Delete any existing controllers created
    by the project template.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`MainStoryboard.storyboard`文件。删除由项目模板创建的任何现有控制器。
- en: Create `UINavigationController` with `UITableViewController` as its root child
    controller.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`UITableViewController`创建`UINavigationController`作为其根子控制器。
- en: Set the class of `UITableViewController` to `LocationController` by navigating
    to **Properties** | **Widget** in the iOS designer.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在iOS设计器中导航到**属性** | **小部件**，将`UITableViewController`的类设置为`LocationController`。
- en: Save the storyboard file and return to Xamarin Studio.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存故事板文件并返回到Xamarin Studio。
- en: 'Open `LocationController.cs` and let''s start by setting up our GPS to update
    a table view over time. Add `using Xamarin.Geolocation;` to the top of the file.
    We can set up some member variables and create our `Geolocator` object in the
    controller''s constructor as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`LocationController.cs`文件，我们首先设置GPS以在一段时间内更新表格视图。将`using Xamarin.Geolocation;`添加到文件顶部。我们可以在控制器的构造函数中设置一些成员变量并创建我们的`Geolocator`对象，如下所示：
- en: '[PRE5]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, we can set up our event handlers as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以设置如下的事件处理程序：
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: These will add a message to the list when there is an error or a location change.
    We used `string.Format` to only display the longitude and latitude up to two decimal
    places.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当出现错误或位置变化时，这些会向列表中添加一条消息。我们使用了`string.Format`来仅显示经纬度到小数点后两位。
- en: 'Next, we have to actually tell `Geolocator` to start listening for GPS updates.
    We can do this in `ViewDidLoad` as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们必须实际告诉`Geolocator`开始监听GPS更新。我们可以在`ViewDidLoad`中这样做：
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the preceding code, `1000` is a hint for the minimum time to update the GPS
    location, and the value `50` is a hint for the number of meters that will trigger
    a position update.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，`1000`是更新GPS位置的最小时间提示，而`50`是触发位置更新的米数提示。
- en: 'Last but not least, we need to set up the table view. Set up `LocationController`
    to implement `IUITableViewDataSource` and add the following methods to the controller:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，我们需要设置表格视图。将`LocationController`设置为实现`IUITableViewDataSource`，并将以下方法添加到控制器中：
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If you compile and run the application, you should see an iOS permission prompt
    followed by the longitude and latitude in the table view over time, as shown in
    the following screenshot:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您编译并运行应用程序，您应该会看到iOS权限提示，随后在表格视图中随着时间的推移显示经纬度，如下面的截图所示：
- en: '![Looking up GPS location](img/00081.jpeg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![查找GPS位置](img/00081.jpeg)'
- en: Implementing GPS location on Android
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Android上实现GPS位置
- en: Just as in the previous section, using Xamarin.Mobile for GPS location is almost
    identical to the APIs we used in iOS. To begin with our Android example, go to
    **Android** | **Android Application** in Xamarin Studio. Make sure you add Xamarin.Mobile
    to the project from the Component Store.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在上一节中一样，使用Xamarin.Mobile进行GPS定位几乎与我们在iOS中使用的API相同。首先，在我们的Android示例中，转到Xamarin
    Studio中的**Android** | **Android Application**。确保您从组件商店将Xamarin.Mobile添加到项目中。
- en: 'Let''s create `ListView` to display a list of messages of the GPS location
    updates as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建`ListView`以显示GPS位置更新的消息列表，如下所示：
- en: Open the `Main.axml` file from the `layout` folder under the `Resources` directory
    in the Android designer.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Android设计师中，从`Resources`目录下的`layout`文件夹中打开`Main.axml`文件。
- en: Remove the default button from the project template and add `ListView` to the
    layout.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目模板中删除默认按钮，并将`ListView`添加到布局中。
- en: Set its **Id** to `@+id/locations`.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其**Id**设置为`@+id/locations`。
- en: Save the file and open `MainActivity.cs` so that we can make some code changes.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件并打开`MainActivity.cs`，以便我们可以进行一些代码更改。
- en: 'As usual, remove any extra code that was created by the project template. Next,
    add a `using` statement for `Xamarin.Geolocation`. Then, add a simple `BaseAdapter<string>`
    to the `MainActivity` class as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 与往常一样，删除由项目模板创建的任何额外代码。接下来，添加`Xamarin.Geolocation`的`using`语句。然后，将一个简单的`BaseAdapter<string>`添加到`MainActivity`类中，如下所示：
- en: '[PRE9]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This is similar to other Android adapters we have set up in the past. One difference
    here is that we made a member variable that contains a `List<string>` of messages
    and a method to add the new messages to the list.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这与其他我们过去设置的Android适配器类似。这里的一个区别是我们创建了一个包含消息`List<string>`的成员变量和一个将新消息添加到列表中的方法。
- en: 'Now, let''s add a few methods to the `MainActivity` class in order to set up
    the GPS location updates as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们向`MainActivity`类中添加一些方法，以便设置GPS位置更新，如下所示：
- en: '[PRE10]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Again, this looks identical to the code for iOS except for the constructor for
    `Geolocator`. If you run the application at this point, it would start with no
    errors. However, no events will be fired from the `Geolocator` object. We first
    need to add a permission to access the location from the Android Manifest file.
    It is also a good idea to start the locator in `OnResume` and stop it in `OnPause`.
    This will conserve the battery by stopping GPS location when this activity is
    no longer on the screen.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，这看起来与iOS的代码相同，只是`Geolocator`的构造函数不同。如果您此时运行应用程序，它将无错误启动。然而，`Geolocator`对象不会触发任何事件。我们首先需要从Android
    Manifest文件中添加一个权限来访问位置。在`OnResume`中启动定位器并在`OnPause`中停止定位器也是一个好主意。这将通过在活动不在屏幕上时停止GPS位置来节省电池。
- en: 'Let''s create an `AndroidManifest.xml` file and declare two permissions as
    follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个`AndroidManifest.xml`文件，并声明以下两个权限：
- en: Open the project options for the Android project.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Android项目的项目选项。
- en: Select the **Android Application** tab under **Build**.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**构建**下选择**Android Application**选项卡。
- en: Click on **Add Android manifest**.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加Android清单**。
- en: Under the **Required permissions** section, check **AccessCoarseLocation** and
    **AccessFineLocation**.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**必需权限**部分，勾选**AccessCoarseLocation**和**AccessFineLocation**。
- en: Click on **OK** to save your changes.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**确定**以保存您的更改。
- en: 'Now, if you compile and run the application, you will get the GPS location
    updates over time, as shown in the following screenshot:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您编译并运行应用程序，您将随着时间的推移获得GPS位置更新，如下面的截图所示：
- en: '![Implementing GPS location on Android](img/00082.jpeg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![在Android上实现GPS位置](img/00082.jpeg)'
- en: Accessing the photo library and camera
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问照片库和相机
- en: The last major feature of Xamarin.Mobile is the ability to access photos in
    order to give users the ability to add their own content to your applications.
    Using a class called `MediaPicker`, you can pull photos from the device's camera
    or photo library and optionally display your own UI for the operation.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin.Mobile的最后一个主要功能是访问照片，以便用户能够将他们自己的内容添加到你的应用程序中。使用名为`MediaPicker`的类，你可以从设备的相机或照片库中提取照片，并可选择显示自己的UI进行操作。
- en: Let's create an application that loads an image from the camera or photo library
    on the press of a button and displays it on the screen. To begin with, create
    a Single View Application project by going to **iOS** | **iPhone Storyboard**
    | **Single View Application** in Xamarin Studio. Make sure to add Xamarin.Mobile
    to the project from the Component Store.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个应用程序，该应用程序在按钮按下时从相机或照片库加载图像，并在屏幕上显示。首先，通过在Xamarin Studio中转到**iOS** |
    **iPhone Storyboard** | **Single View Application**来创建一个单视图应用程序项目。确保从组件商店将Xamarin.Mobile添加到项目中。
- en: 'Now, let''s implement a screen with two `UIButton` and a `UIImageView` as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们实现一个包含两个`UIButton`和一个`UIImageView`的屏幕，如下所示：
- en: Open the `MainStoryboard.storyboard` file. Delete any existing controllers created
    by the project template.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`MainStoryboard.storyboard`文件。删除由项目模板创建的任何现有控制器。
- en: Create `UIViewController` with one `UIImageView` and two `UIButton` named `Library`
    and `Camera`.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含一个`UIImageView`和两个名为`Library`和`Camera`的`UIButton`的`UIViewController`。
- en: Set the class of `UITableViewController` to `ContactsController` by navigating
    to **Properties** | **Widget** in the iOS designer.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在iOS设计器中导航到**属性** | **小部件**，将`UITableViewController`的类设置为`ContactsController`。
- en: Create the **Name** field for each view in the controller named `imageView`,
    `library`, and `camera` respectively.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在名为`imageView`、`library`和`camera`的控制器中分别为每个视图创建**名称**字段。
- en: Save the storyboard file and return to Xamarin Studio.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存故事板文件并返回到Xamarin Studio。
- en: 'Now, open `PhotoController.cs` and add the following code in `ViewDidLoad`:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开`PhotoController.cs`文件，并在`ViewDidLoad`中添加以下代码：
- en: '[PRE11]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note that we have to check `IsCameraAvailable` and disable the `camera` button.
    There are iOS devices such as the first generation iPad that could possibly not
    have a camera. Besides this, we just need to create an instance of `MediaPicker`
    that can be used when you click on each button.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们必须检查`IsCameraAvailable`并禁用`camera`按钮。有些iOS设备，如第一代iPad，可能没有摄像头。除此之外，我们只需要创建一个`MediaPicker`实例，以便在点击每个按钮时使用。
- en: 'Now, let''s add a method for each button''s `TouchUpInside` event and a couple
    of other helper methods as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们为每个按钮的`TouchUpInside`事件添加一个方法，以及几个其他辅助方法，如下所示：
- en: '[PRE12]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Using `MediaPIcker` is pretty straightforward; you merely have to call `TakePhotoAsync`
    or `PickPhotoAsync` to retrieve a `MediaFile` instance. Then, you can call `GetStream`
    to do what you want with the image data. In our case, we created `UIImage` to
    display directly in `UIImageView`. It is also necessary to use a `try-catch` block
    in case something unexpected happens or the user cancels.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`MediaPicker`相当简单；你只需调用`TakePhotoAsync`或`PickPhotoAsync`来检索`MediaFile`实例。然后，你可以调用`GetStream`来对图像数据进行操作。在我们的例子中，我们创建了`UIImage`以直接在`UIImageView`中显示。如果发生意外情况或用户取消，还需要使用`try-catch`块。
- en: 'You should now be able to run the app and select a photo to be viewed on the
    screen. The following screenshot shows a nice default photo from the iOS simulator
    that I selected from the photo library:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该能够运行应用程序并选择一张要在屏幕上查看的照片。以下截图显示了从照片库中选择的iOS模拟器中的默认照片：
- en: '![Accessing the photo library and camera](img/00083.jpeg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![访问照片库和相机](img/00083.jpeg)'
- en: Accessing photos on Android
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Android上访问照片
- en: In comparison to iOS, we have to use a slightly different pattern on Android
    to retrieve photos from the camera or photo library. A common pattern in Android
    is that it calls `StartActivityForResult` to launch an activity from another application.
    When this activity is completed, `OnActivityResult` will be called from your activity.
    Because of this, Xamarin.Mobile could not use the same APIs on Android as the
    other platforms. To start our example, create an Android Application project by
    going to **Android** | **Android Application** in Xamarin Studio. Make sure you
    add Xamarin.Mobile to the project from the Component Store.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 与 iOS 相比，在 Android 上检索相机或照片库中的照片时，我们必须使用稍微不同的模式。Android 中的一种常见模式是它调用 `StartActivityForResult`
    从另一个应用程序启动活动。当此活动完成时，`OnActivityResult` 将从您的活动中被调用。正因为如此，Xamarin.Mobile 无法在 Android
    上使用与其他平台相同的 API。为了开始我们的示例，请通过在 Xamarin Studio 中转到 **Android** | **Android Application**
    创建一个 Android 应用程序项目。确保您从组件商店将 Xamarin.Mobile 添加到项目中。
- en: 'Let''s create two **Buttons** and an **ImageView** to mimic our UI on iOS as
    follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建两个 **按钮** 和一个 **ImageView** 来模拟我们的 iOS UI，如下所示：
- en: Open the `Main.axml` file from the `layout` folder under the `Resources` directory
    in the Android designer.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Android 设计器中，从 `Resources` 目录下的 `layout` 文件夹中打开 `Main.axml` 文件。
- en: Remove the default button from the project template, and add two new `Button`
    named `Library` and `Camera`.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目模板中删除默认按钮，并添加两个新的 `Button`，分别命名为 `Library` 和 `Camera`。
- en: Set their **Id** to `@+id/library` and `@+id/camera`, respectively.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将它们的 **Id** 分别设置为 `@+id/library` 和 `@+id/camera`。
- en: Create an `ImageView` with an **Id** of `@+id/imageView`.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个具有 **Id** 为 `@+id/imageView` 的 `ImageView`。
- en: Save the file and open `MainActivity.cs` so that we can make changes to our
    code.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件并打开 `MainActivity.cs`，以便我们可以修改我们的代码。
- en: 'As usual, remove any extra code that was created by the project template. Next,
    add a `using` statement for `Xamarin.Media`. Then, we can add a new `OnCreate`
    method and some member variables for our activity as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如同往常，删除由项目模板创建的任何额外代码。接下来，添加一个 `using` 语句用于 `Xamarin.Media`。然后，我们可以添加一个新的 `OnCreate`
    方法以及一些用于我们活动的成员变量，如下所示：
- en: '[PRE13]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We retrieved the instance of our views and created a new `MediaPicker` by passing
    our activity as `Context` to its constructor. We hooked up some `Click` event
    handlers, and disabled the `camera` button since a camera is not available.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们检索了视图的实例，并通过将活动作为 `Context` 传递给其构造函数创建了一个新的 `MediaPicker`。我们连接了一些 `Click`
    事件处理程序，并禁用了 `camera` 按钮，因为相机不可用。
- en: 'Next, let''s implement the two `Click` event handlers as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们实现两个 `Click` 事件处理程序，如下所示：
- en: '[PRE14]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In each case, we make a call to `GetPickPhotoUI` or `GetTakePhotoUI` in order
    to get an instance of an Android `Intent` object. This object is used to start
    the new activities within an application. `StartActivityForResult` will also start
    the `Intent` object, expecting a result to be returned from the new activity.
    We also set some values with `StoreCameraMediaOptions` to specify a filename and
    temporary directory to store the photo.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在每种情况下，我们都会调用 `GetPickPhotoUI` 或 `GetTakePhotoUI` 来获取一个 Android `Intent` 对象的实例。此对象用于在应用程序内启动新的活动。`StartActivityForResult`
    也会启动 `Intent` 对象，并期望从新活动返回结果。我们还使用 `StoreCameraMediaOptions` 设置一些值，以指定存储照片的文件名和临时目录。
- en: 'Next, we need to implement `OnActivityResult` in order to handle what will
    happen when the new activity is completed:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要在 Android 中实现 `OnActivityResult` 以处理新活动完成时会发生的情况：
- en: '[PRE15]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: If this is successful, we retrieve `MediaFile` and load a new `Bitmap` with
    the returned `Stream`. Next, all that is needed is to call `SetImageBitmap` to
    display the image on the screen.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这成功，我们将检索 `MediaFile` 并使用返回的 `Stream` 加载一个新的 `Bitmap`。接下来，所需做的就是调用 `SetImageBitmap`
    在屏幕上显示图像。
- en: 'Let''s create an `AndroidManifest.xml` file and declare two permissions as
    follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个 `AndroidManifest.xml` 文件并声明两个权限，如下所示：
- en: Open the project options for the Android project.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Android 项目的项目选项。
- en: Select the **Android Application** tab under **Build**.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **构建** 下的 **Android 应用程序** 选项卡下选择。
- en: Click on **Add Android manifest**.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **添加 Android 清单**。
- en: Under the **Required permissions** section, check **Camera** and **WriteExternalStorage**.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **必需权限** 部分下，勾选 **Camera** 和 **WriteExternalStorage**。
- en: Click on **OK** to save your changes.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **确定** 保存您的更改。
- en: 'You should now be able to run the application and load photos to be displayed
    on the screen, as shown in the following screenshot:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在应该能够运行应用程序并将照片加载到屏幕上显示，如下面的截图所示：
- en: '![Accessing photos on Android](img/00084.jpeg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![在 Android 上访问照片](img/00084.jpeg)'
- en: Summary
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discovered the Xamarin.Mobile library and how it can accelerate
    common native tasks in a cross-platform way. We retrieved the contacts from the
    address book and set up GPS location updates over time. Lastly, we loaded photos
    from the camera and photo library. Using the native APIs directly would mean twice
    as much code on each platform, so we saw how the Xamarin.Mobile library is a useful
    abstraction that can reduce some development time.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们发现了Xamarin.Mobile库以及它是如何以跨平台的方式加速常见原生任务的。我们从地址簿中检索了联系人，并设置了随时间推移的GPS位置更新。最后，我们从相机和照片库中加载了照片。直接使用原生API意味着每个平台上的代码量将是两倍，因此我们看到了Xamarin.Mobile库是如何作为一个有用的抽象，可以减少一些开发时间。
- en: After completing this chapter, you should have a complete grasp of the Xamarin.Mobile
    library and the common functionality it provides for cross-platform development.
    It gives clean, modern APIs that offer the `async`/`await` functionality that
    can be accessed across iOS, Android, and Windows Phone. Accessing contacts, GPS,
    and photos across platforms is very straightforward with Xamarin.Mobile.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章后，你应该对Xamarin.Mobile库及其为跨平台开发提供的常用功能有全面的理解。它提供了干净、现代的API，这些API提供了跨iOS、Android和Windows
    Phone访问的`async`/`await`功能。使用Xamarin.Mobile跨平台访问联系人、GPS和照片非常直接。
- en: In the next chapter, we will cover the steps of how to submit applications to
    the iOS App Store and Google Play. This will include how to prepare your app to
    pass the iOS guidelines as well as properly signing up your app for Google Play.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍如何将应用程序提交到iOS App Store和Google Play的步骤。这包括如何准备您的应用程序以通过iOS指南，以及如何正确注册您的应用程序以供Google
    Play使用。
