- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: SaaS – the Modern Distribution Model that We All Need
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SaaS – 我们所有人都需要的现代分销模式
- en: This book will take you, the reader, through the full process of building a
    **software-as-a-service** (**SaaS**) application. But before we get our hands
    dirty, we’ll start with an introduction to the broad concepts of SaaS. The history
    of application development is not particularly long, but it has been eventful!
    We will look at the last 40 years of software engineering to see how we have arrived
    at this point, with SaaS emerging as the dominant paradigm, and we will consider
    why SaaS has emerged as such. There are benefits to businesses and teams of all
    sizes in utilizing SaaS.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将带您，读者，了解构建一个**软件即服务**（**SaaS**）应用程序的全过程。但在我们动手之前，我们将从SaaS的广泛概念介绍开始。应用程序开发的历史并不特别长，但它充满了事件！我们将回顾过去40年的软件工程，看看我们是如何到达这个点的，SaaS作为主导范式出现，并考虑为什么SaaS会如此出现。利用SaaS对各种规模的企业和团队都有好处。
- en: Finally, we will cover the tools and techniques that you as a developer will
    learn to enable you to confidently solve real-world problems by building applications
    using the SaaS paradigm. This chapter will form an introduction to the topic.
    We’ll not deep dive into any specific skills (that will come later!). Rather,
    we will set the scene for the rest of this book, in which we will learn how to
    build, test, and release modern SaaS applications using the Microsoft tech stack.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将介绍您作为开发者将学习的工具和技术，使您能够自信地通过构建使用SaaS范式的应用程序来解决现实世界的问题。本章将为该主题提供一个介绍。我们不会深入探讨任何特定技能（那将在以后进行！）。相反，我们将为本书的其余部分设定场景，在本书中，我们将学习如何使用Microsoft技术堆栈构建、测试和发布现代SaaS应用程序。
- en: 'This chapter covers the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了以下主要主题：
- en: What is SaaS?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是SaaS？
- en: What other types of applications are there?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有哪些其他类型的应用程序？
- en: Where did it all begin?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一切从何开始？
- en: Why is SaaS a popular choice for businesses large and small?
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么SaaS成为大小企业的热门选择？
- en: Which tools are required to build SaaS apps?
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建SaaS应用程序需要哪些工具？
- en: Which techniques will be used to build SaaS apps?
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将使用哪些技术来构建SaaS应用程序？
- en: How does this affect the development process?
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这如何影响开发过程？
- en: What to expect from this book
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以期待从本书中获得什么
- en: How to assess and pay off technical debt
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何评估和偿还技术债务
- en: By the end of this chapter, you’ll have learned the definition of SaaS. You’ll
    have covered a brief history of application development, and you’ll have learned
    the tools and techniques that we will see as we progress through this book!
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将了解SaaS的定义。您将了解应用程序开发简短的历史，您将学习我们在本书的后续内容中将要看到的工具和技术！
- en: What is SaaS?
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是SaaS？
- en: SaaS has become the dominant paradigm in delivering an application to users.
    But what *is* SaaS?
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: SaaS已经成为向用户交付应用程序的主导范式。但SaaS究竟是什么？
- en: You could say that SaaS applications are software applications that are delivered
    to their users over the internet and in a browser, often paid for by way of a
    monthly subscription fee.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以说，SaaS应用程序是通过互联网和浏览器向用户提供的软件应用程序，通常通过每月订阅费来支付。
- en: And while that is technically correct, that single-sentence definition glosses
    over a *lot* of complexity! A lot of complexity for the user, the vendor, and
    most certainly for you—the developer of such applications!
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然从技术上讲这是正确的，但这个单句定义忽略了*很多*复杂性！对用户、供应商，当然还有您——这些应用程序的开发者来说，有很多复杂性！
- en: In this chapter, we will start to build an understanding of SaaS, with a basic
    understanding of the technical, operational, and functional knowledge required
    to build a SaaS application from the ground up using Microsoft technologies. We
    will expand on that previous definition to the point that you—the reader, and
    soon-to-be SaaS developer—can confidently approach and solve problems by delivering
    SaaS-based solutions!
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将开始构建对SaaS的理解，包括构建一个从头开始的SaaS应用程序所需的技术、运营和功能知识，我们将使用Microsoft技术。我们将扩展之前的定义，直到您——读者，以及即将成为SaaS开发者的人——可以自信地通过提供基于SaaS的解决方案来解决问题！
- en: Let’s start by expanding on that definition a little.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从扩展那个定义开始。
- en: SaaS is typically understood to be applications that are delivered and interacted
    with through a browser. The software is not purchased or “owned” by the user and
    installed on their computer. Instead (typically), a monthly *membership* fee is
    paid, which grants the user access to the *service*.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: SaaS通常被理解为通过浏览器交付和交互的应用程序。软件不是由用户购买或“拥有”并在他们的电脑上安装的。相反（通常是），用户需要支付每月的*会员费*，这赋予了用户访问*服务*的权限。
- en: From the user’s point of view, the benefit of this is that they can access the
    application anywhere, at any time, on any device. They do not have to worry about
    installing the application or keeping the app up to date. All of that is *just
    part of* *the service*.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 从用户的角度来看，这种做法的好处是他们可以在任何地方、任何时间、任何设备上访问应用程序。他们不必担心安装应用程序或保持应用程序更新。所有这些只是*服务的一部分*。
- en: Many of the biggest tech companies in the world provide SaaS applications, and
    there is a good chance that you are using at least one of them!
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 世界上许多最大的科技公司都提供SaaS应用，你很可能至少在使用其中之一！
- en: Gmail is a great example of a SaaS application that is provided by Google. While
    it is free to most users, there is a fee for corporate or professional users who
    must pay for access to the G Suite tools. As well as a SaaS mail client, Google
    also offers a calendar application and a contact management application, as well
    as Office tools for authoring documents, building spreadsheets, or creating slides
    for a presentation.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Gmail是谷歌提供的SaaS应用的绝佳例子。虽然对大多数用户来说它是免费的，但对于必须付费使用G Suite工具的企业或专业用户来说，则需要支付费用。除了SaaS邮件客户端，谷歌还提供日历应用和联系人管理应用，以及用于创建文档、构建电子表格或为演示创建幻灯片的办公工具。
- en: For a small monthly fee, you can use your browser to access the Shopify application,
    which is—of course—a SaaS application.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 只需支付小额月费，您就可以使用浏览器访问Shopify应用程序，当然，它也是一个SaaS应用。
- en: All social media sites are also examples of SaaS applications, and while they
    may be free to use for the vast majority of the user base, there is a cost to
    the businesses that use the platforms to advertise their products.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 所有社交媒体网站也都是SaaS应用的例子，尽管对于大多数用户来说它们可能免费使用，但使用这些平台来推广产品的企业却需要付出代价。
- en: As well as the examples given previously featuring enormous, multinational,
    billion-dollar corporations, there are many more examples of businesses that are
    supplying their software using the SaaS paradigm. There are software vendors—and
    from the vendors’ point of view, there are many benefits to delivering software
    in this way. The primary and most obvious benefit of this is that they have a
    huge market reach—a truly global market that they can tap into, with multiple
    very high ceilings on the revenues that are available. In addition, the tech team
    needs only support one version of the application, and the support team also only
    has one version to support. The vendor can push out updates, and all users will
    instantly be on the latest (and hopefully greatest) version of the application.
    In theory, at least, SaaS is a clear choice in almost every instance. However…
    SaaS is hard!
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 除了之前提到的那些拥有巨额、跨国、百亿美元企业的例子，还有许多其他企业正在使用SaaS模式提供他们的软件。有软件供应商——从供应商的角度来看，以这种方式提供软件有许多好处。最主要和最明显的好处是他们拥有巨大的市场覆盖范围——一个真正全球的市场，他们可以从中挖掘，并且有多个非常高的收入上限。此外，技术团队只需要支持一个应用程序版本，支持团队也只需要支持一个版本。供应商可以推出更新，所有用户将立即使用最新（并且希望是最好）的应用程序版本。理论上至少，SaaS在几乎所有情况下都是一个明确的选择。然而……SaaS很难！
- en: While the benefits to the business are many, the challenges that the team tasked
    with building the application will face are also many. And from the technologist’s
    point of view, this is where things get interesting!
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然对企业的益处很多，但负责构建应用程序的团队将面临的挑战也很多。从技术人员的角度来看，这正是事情变得有趣的地方！
- en: But before we dive into the details of SaaS applications, let’s first consider
    what the alternatives are!
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 但在我们深入探讨SaaS应用程序的细节之前，让我们首先考虑一下替代方案！
- en: What other types of applications are there?
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有其他哪些类型的应用程序？
- en: This book will describe SaaS, but while discussing what SaaS is and why it is
    a good choice in many instances, it will be contrasted with other types of delivery
    mechanisms for other types of applications. Some of the other *traditional* delivery
    mechanisms are discussed in the following sections.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将描述SaaS，但在讨论SaaS是什么以及为什么在许多情况下它是一个好的选择的同时，它将与其他类型应用程序的其他交付机制进行对比。以下几节将讨论一些其他*传统*的交付机制。
- en: Desktop application
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 桌面应用程序
- en: This is the traditional type of application that was the major paradigm for
    many years. The software is packaged up into an *installer* and is somehow distributed
    to the end user. The distribution mechanism could be on a floppy disk or a CD
    or downloaded directly from the internet.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种传统的应用程序类型，多年来一直是许多人的主要范式。软件被打包成*安装程序*，并以某种方式分发给最终用户。分发机制可以是软盘、CD，或者直接从互联网上下载。
- en: The application stores all of its files and data on the user’s machine.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序将所有文件和数据存储在用户的机器上。
- en: Typically, these types of applications are supplied with a product key that
    *activates* the software. Alternatively, licensing servers could be installed,
    allowing companies to more easily license the product on multiple computers.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，这些类型的应用程序会附带一个产品密钥来*激活*软件。或者，可以安装许可服务器，使公司能够更容易地在多台计算机上许可产品。
- en: On-premises web application
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本地部署的Web应用程序
- en: This type of application has largely been completely replaced with SaaS systems,
    but it was common for a while to develop a web application that could then be
    sold to multiple customers and installed on a server on the premises of the customer’s
    organization.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的应用程序在很大程度上已被SaaS系统完全取代，但曾经有一段时间，开发一个可以随后出售给多个客户并安装在客户组织场所的服务器上的Web应用程序是很常见的。
- en: This provided some of the benefits of SaaS but came with a lot of the baggage
    of a desktop delivery model.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这提供了一些SaaS的好处，但同时也带来了桌面交付模型的大量负担。
- en: The main benefit of an on-premises web application is that the purchasing company
    retains full control of the application. This means that they can choose to install
    an update—or not—based on an internal assessment of the costs and benefits of
    an updated version.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 本地部署的Web应用程序的主要好处是购买公司可以完全控制该应用程序。这意味着他们可以根据对更新版本的成本和收益的内部评估来选择是否安装更新。
- en: Another big plus of this delivery mechanism is that any data either stored in
    the database or transferred between the clients (web browsers) and the server
    can be retained entirely within the company’s internal network infrastructure
    and need not ever touch the wider public internet. In theory, this does allow
    for additional data security.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这种交付机制的另一个重大优势是，存储在数据库中的任何数据或客户端（Web浏览器）和服务器之间的传输数据都可以完全保留在公司内部网络基础设施中，无需触及更广泛的公共互联网。从理论上讲，这确实允许额外的数据安全。
- en: 'A counterpoint to the aforementioned points: while it may seem more secure
    for a company to keep its data inside its own network, cloud services such as
    **Amazon Web Services** (**AWS**) from Amazon or Azure from Microsoft have put
    an incredible amount of resources into ensuring that stored data and data in motion
    is secure—indeed, their businesses depend on it. It is not guaranteed that a company’s
    internal network is more secure.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 与上述观点形成对比的是：虽然将数据保留在公司自己的网络中可能看起来更安全，但亚马逊的**Amazon Web Services**（**AWS**）或微软的Azure等云服务已经投入了大量的资源来确保存储的数据和流动中的数据是安全的——实际上，他们的业务就依赖于这一点。并不能保证公司的内部网络就更加安全。
- en: While the ability to pick and choose versions and deploy updates at a time of
    the purchasing company’s choosing may seem beneficial, this requires that the
    buyer employ people to install and manage the application, as well as to support
    their users.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在购买公司选择的时间点挑选版本和部署更新可能看起来是有益的，但这要求买家雇佣人员来安装和管理应用程序，以及支持他们的用户。
- en: What is “the cloud”?
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是“云”？
- en: Core to SaaS and delivering applications in the browser is the concept of *the
    cloud*. At its most basic, the cloud is just someone else’s computer… but while
    accurate, that doesn’t really quite do it justice. The cloud enables applications
    to run with very high levels of availability, and with essentially infinite—and
    instant—scalability.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: SaaS和通过浏览器交付应用程序的核心是*云*的概念。在最基本的意义上，云只是别人的电脑……但尽管这个说法准确，但它并没有真正公正地体现其价值。云使得应用程序能够以非常高的可用性运行，并且具有几乎无限且即时的可扩展性。
- en: For a SaaS app, the cloud is absolutely crucial. In almost every case, every
    component (database, **application programming interface** (**API**), and **user
    interface** (**UI)**) will be hosted using a cloud provider. The most commonly
    used cloud providers are Microsoft Azure, Google Cloud, and Amazon AWS.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 对于SaaS应用程序来说，云服务绝对是至关重要的。在几乎所有情况下，每个组件（数据库、**应用程序编程接口**（**API**）和**用户界面**（**UI**））都将通过云服务提供商托管。最常用的云服务提供商是Microsoft
    Azure、Google Cloud和Amazon AWS。
- en: The large cloud providers are essentially just providing access to an enormous
    amount of computing power, for a cost. This is termed **infrastructure as a service**
    (**IaaS**) and is a very important pillar of SaaS.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 大型云服务提供商本质上只是在提供大量计算能力，并以此收费。这被称为**基础设施即服务**（**IaaS**），它是SaaS的一个重要支柱。
- en: Where did it all begin?
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 所有这一切都是从哪里开始的？
- en: While this is not a history of programming book, I think that it’s worth taking
    a short look at the last 60-ish years of application development to see how we
    have arrived at the place that we have.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这不是一本编程史书，但我认为简要回顾一下过去60年左右的应用程序开发历程，看看我们是如何到达现在的位置，是值得的。
- en: 'My first introduction to professional programming was visiting my father’s
    office sometime in the late 1980s when I was around 6\. I was shown the computer
    room, which contained an enormous VAX “mainframe” machine that did all the thinking.
    I was then shown around the offices where workers had terminals on their desks
    (complete with green text, just like in *The Matrix*) that connected back to the
    mainframe. The cost of the actual computer was such that there could be only one,
    and everyone simply got dumb terminals on their desks that looked something like
    this:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我第一次接触专业编程是在20世纪80年代末，当时我大约6岁。我被带到了父亲的办公室，参观了计算机室，里面有一台巨大的VAX“主机”机器，负责所有思考工作。然后我被带到了办公室，那里的工作人员在他们的桌子上配备了终端（带有绿色的文本，就像在*《黑客帝国》*中一样），这些终端连接回主机。实际计算机的成本如此之高，以至于只能有一台，每个人只是简单地在自己的桌子上配备了类似这样的哑终端：
- en: '![Figure 1.1 – A VAX terminal](img/B19343_01_01.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图1.1 – VAX终端](img/B19343_01_01.jpg)'
- en: Figure 1.1 – A VAX terminal
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1 – VAX终端
- en: Despite the simplicity of the preceding display, I was instantly captivated,
    and this experience clearly resonated with me as I followed in my father’s footsteps
    and became an application developer myself, albeit working with very different
    tools!
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管前面的展示很简单，但我立刻被吸引住了，当我跟随父亲的脚步成为一名应用程序开发者时，这种经历显然与我产生了共鸣，尽管我使用的工具与当时截然不同！
- en: We were a long way off SaaS in the 1980s (although the “mainframe” and “terminal”
    configuration was perhaps instructive in some of the thinking that came later)!
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在20世纪80年代，我们离SaaS还非常遥远（尽管“主机”和“终端”配置可能在后来的某些思考中具有指导意义）！
- en: While internet technology has existed since the 1960s, it has not done so in
    a way that is recognizable to the current generation of TikTok-addicted teenagers.
    The internet was little more than a technical curiosity until deep into the 90s
    and was far from the bedrock for delivering applications that it now is.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管互联网技术自20世纪60年代以来就存在，但它并没有以当前一代抖音上瘾的青少年能够识别的方式存在。直到90年代后期，互联网才仅仅是一个技术上的好奇，而且它远未成为现在交付应用程序的基础。
- en: A huge technical pillar required to build a SaaS application was achieved in
    August 1994, when Daniel Kohn made the first secure credit card transaction. He
    bought a Sting CD—there is no accounting for taste! In November of the same year,
    Netscape Navigator introduced the **Secure Sockets Layer** (**SSL**) protocol,
    making it technically possible for anyone to transact over the internet without
    fear of having their information stolen.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在1994年8月，丹尼尔·科恩完成了第一次安全的信用卡交易，这是构建SaaS应用程序所需的一个巨大的技术里程碑。他购买了一张Sting的CD——品味这东西真是无法解释！同年11月，Netscape
    Navigator引入了**安全套接字层**（**SSL**）协议，使得任何人都可以在互联网上交易，而不必担心他们的信息被盗。
- en: Almost immediately building upon this new payment tech, Amazon launched the
    following year and was joined shortly by eBay. This was the very beginning of
    people willingly typing their credit card details into the internet with some
    degree of trust, but this practice was so far from mainstream at this point. (Sidenote—I
    made my first online purchase on Amazon in June 2001, buying *Happy Gilmore* on
    DVD; there is no accounting for taste!)
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在此基础上，亚马逊在第二年立即推出了这项新的支付技术，随后不久eBay也加入了进来。这是人们愿意在互联网上输入他们的信用卡详细信息并有一定信任度的开始，但在这个时候，这种做法还远未成为主流。（旁白——我在2001年6月第一次在亚马逊上进行了在线购买，购买的是DVD版的*《幸福高尔夫球手》*；品味这东西真是无法解释！）
- en: The first true SaaS app did not take long to emerge. Salesforce released what
    is considered to be the first true SaaS app, with its CRM platform launching in
    1999.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个真正的SaaS应用程序出现得并不慢。Salesforce发布了被认为是第一个真正的SaaS应用程序，其CRM平台于1999年推出。
- en: However, to say that SaaS *started* in 1999 is not really giving the full picture.
    Sure—Salesforce was miles ahead of the curve, and its investment in its SaaS app
    has surely done wonders for the company (and its balance sheet) over the following
    decades. But the internet was still a curiosity to the vast majority of the population
    in 1999\. While Salesforce could lean on its corporate clients with (relatively)
    fast internet connections, the reach of a SaaS app was tiny. Relatively few households
    had the internet, and none had broadband connections. The huge majority of the
    population would never consider putting their real name on the internet, never
    mind their credit card details! The era of SaaS ubiquity was still some time off.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，说SaaS在1999年开始并不完全准确。当然——Salesforce在曲线上领先了数英里，其对SaaS应用程序的投资无疑在接下来的几十年里为公司（及其资产负债表）带来了奇迹。但1999年，互联网对绝大多数人来说仍然是个好奇的事物。尽管Salesforce可以依赖其拥有（相对）快速互联网连接的企业客户，但SaaS应用程序的覆盖范围仍然很小。相对较少的家庭拥有互联网，更不用说宽带连接了。绝大多数人永远不会考虑在互联网上使用他们的真实姓名，更不用说他们的信用卡信息了！SaaS普及的时代还远未到来。
- en: By the time I started my career as a developer in the early 2000s and entered
    a corporate programming environment for the first time since the 80s, things had
    moved on considerably. There were no more VAX mainframes. By now, we all had blazing
    fast (by comparison) computers on our actual desks, so there was no need to delegate
    the computations to a centralized mainframe computer anymore. You could do the
    computations right there on your own computer. And so, we did! Throughout the
    90s, thousands of developers churned out millions of “gray box” desktop applications,
    often written in VB6 with arcane installation guides that (hopefully) covered
    any and all eventualities. This was not really a high point for application development,
    certainly not enterprise applications, which constituted the vast majority at
    the time.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 到了2000年代初，我开始作为开发者职业生涯，并第一次进入自80年代以来的企业编程环境时，事情已经发生了相当大的变化。不再有VAX大型机。现在，我们都在自己的桌子上有了非常快的（相比之下）电脑，因此不再需要将计算委托给集中的大型机了。你可以在自己的电脑上直接进行计算。于是，我们就这么做了！在整个90年代，成千上万的开发者制作了数百万个“灰色盒子”桌面应用程序，通常使用VB6编写，带有（希望）涵盖任何可能情况的古怪安装指南。这并不是应用开发的巅峰，当然也不是企业应用，这在当时构成了绝大多数。
- en: Round about this time, the internet was starting to mature to the point that
    it was a day-to-day business tool and was rapidly becoming as common as running
    water in the typical household. But even in the mid-2000s, the concept of “web
    apps” or Web 2.0 was still to emerge into the mainstream. Sure—there was PHP and
    ASP, and you could use those technologies to build web-delivered applications.
    But these were often more akin to clever websites, rather than what we would currently
    consider a fully-fledged “web application” these days. Despite the fact that online
    payments were becoming very common, there was still not really the concept of
    paying a monthly fee for a “service.” The expectation was still that you would
    “buy” and therefore “own” and subsequently “install” software yourself.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 大约在这个时候，互联网开始成熟，成为日常的商业工具，并迅速成为典型家庭中像自来水一样普遍。但即使到了2005年中期，"网络应用程序"或Web 2.0的概念仍然尚未进入主流。当然——有PHP和ASP，你可以使用这些技术来构建网络交付的应用程序。但这些通常更像是聪明的网站，而不是我们现在所认为的完整的“网络应用程序”。尽管在线支付变得越来越普遍，但真正支付月费以获得“服务”的概念仍然没有。人们的预期仍然是“购买”并因此“拥有”和随后“安装”软件。
- en: This would, of course, change over the following two decades.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，在接下来的二十年里，这一切都会改变。
- en: ASP.NET took what had been started with “classic” ASP and really ran with it.
    WYSIWYG editors were provided with Visual Studio, making the workflows very familiar
    for anyone who had been building the now old-fashioned “gray boxes” with VB6\.
    “The Enterprise” almost immediately embraced “web apps” to replace the gray-box
    apps that had become typical and often universally hated.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET将“经典”ASP所开始的东西推向了高潮。Visual Studio提供了所见即所得的编辑器，使得对于任何曾经使用VB6构建现在过时的“灰色盒子”的人来说，工作流程非常熟悉。“企业”几乎立即接受了“网络应用程序”来取代已经变得典型并且通常普遍不受欢迎的灰色盒子应用程序。
- en: This move from the enterprise to deliver software in the browser taught a generation
    of office workers about the benefit of web-delivered software, and before too
    long, they would start demanding that for all applications, even ones used in
    their personal life.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这种从企业到通过浏览器提供软件的转变，让一代办公室工作人员了解了Web交付软件的好处，不久之后，他们就会开始要求所有应用程序，甚至包括他们个人生活中使用的应用程序，都采用这种方式。
- en: Email was most likely the first service catering to an individual that went
    fully web-based. The Gmail beta launched in 2004 with a then huge storage capacity
    of 1 GB for free… with more available for a cost! The monthly “subscription” for
    consumer-grade software was born.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 电子邮件很可能是第一个完全基于Web的服务，面向个人用户。Gmail测试版于2004年推出，当时免费提供1 GB的巨大存储空间……而且还有更多可供付费使用！消费者级软件的“订阅”模式由此诞生。
- en: These days the consumer market for SaaS applications is huge, with a multitude
    of task-list, note-taking, journaling, and email services provided. Not to mention
    that entertainment is now supplied “as a service” with monthly subscriptions to
    Netflix, Spotify, and many others now in many—if not most—households.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这些天，SaaS应用的市场对消费者来说非常庞大，提供了众多任务列表、笔记、日记和电子邮件服务。更不用说娱乐现在也以“服务”的形式提供，许多家庭——如果不是大多数家庭——都通过Netflix、Spotify等每月订阅服务来享受。
- en: There are no residual concerns about entering payment information on the internet.
    There are barely any homes not serviced by broadband internet, and even developing
    countries often have robust mobile data networks and smartphones in the hands
    of many. There are no longer any barriers in place to delivering cloud-based applications
    over the web, for a monthly subscription.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 关于在互联网上输入支付信息没有残留的担忧。几乎没有任何家庭没有宽带互联网服务，即使是发展中国家也经常拥有强大的移动数据网络和许多人的智能手机。现在不再有任何障碍来阻止通过互联网提供基于云的应用程序，以每月订阅的形式。
- en: It is clearly apparent that SaaS has eaten the world and taken over as the dominant
    method of delivering software! The era of SaaS is upon us!
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，SaaS已经吞噬了世界，并成为提供软件的主导方法！SaaS时代已经到来！
- en: Why is SaaS a popular choice for businesses large and small?
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么SaaS成为大小企业都喜爱的选择？
- en: SaaS is becoming an increasingly popular choice across many different industries
    and many different sizes of enterprises. It is becoming ubiquitous across all
    manner of business models. There are a number of reasons for this, but for the
    most part, this is derived from the ability to add value to the user and revenue
    to the vendor. It is a win-win paradigm.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: SaaS正在成为许多不同行业和不同规模企业的越来越受欢迎的选择。它正在各种商业模式中无处不在。这有几个原因，但大部分原因来自于为用户增加价值以及为供应商增加收入的能力。这是一个双赢的范式。
- en: All manner of different applications can be developed and delivered over the
    internet and in the browser. The same tech stack—and, therefore, the same development
    team—can be used to deliver essentially any kind of application that the business
    can dream up. This makes it almost equally appealing to a start-up as it does
    a multi-national.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过互联网和浏览器开发并交付各种不同的应用程序。相同的技术堆栈——因此，相同的发展团队——可以用来交付企业能想到的几乎所有类型的应用程序。这使得它对初创公司和跨国公司都具有几乎相同的吸引力。
- en: Using a traditional desktop application model or on-prem web app, the business
    needs to have a direct line to all of its customers for invoicing, providing updates,
    and so on. Acquiring new customers requires a sales team, and deploying new instances
    for new users requires a tech team. Given that each install is in a different
    environment, it is very likely that a sizable support team is also required to
    help with a myriad of different installations.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用传统的桌面应用程序模型或本地化Web应用，企业需要直接与所有客户保持联系，以便进行发票开具、提供更新等。获取新客户需要销售团队，为新用户部署新实例则需要技术团队。鉴于每个安装都在不同的环境中，很可能还需要一个庞大的支持团队来帮助处理各种不同的安装。
- en: All of this melts away with SaaS. The only scaling consideration is the availability
    of virtual servers, which are near infinite in the era of Azure and AWS.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些在SaaS中都消失了。唯一的扩展考虑因素是虚拟服务器的可用性，在Azure和AWS的时代，这些服务器几乎是无限的。
- en: Because SaaS adds value for both the user and the vendor, it has become an obvious
    choice for businesses of all sizes.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 由于SaaS为用户和供应商都增加了价值，因此它已成为所有规模企业的明显选择。
- en: Which tools are required to build SaaS apps?
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 建立SaaS应用需要哪些工具？
- en: The range of tools that could be used to develop a SaaS application is huge.
    The nature of developing a SaaS application is such that specific tools will be
    needed to build and test databases, APIs, and frontends, as well as many auxiliary
    tools such as static analysis, build pipelines, source control, and containerization
    tools, to name but a few.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 可用于开发SaaS应用程序的工具种类繁多。开发SaaS应用程序的性质意味着需要特定的工具来构建和测试数据库、API和前端，以及许多辅助工具，如静态分析、构建管道、源控制和容器化工具等，仅举几例。
- en: This book will focus on the Microsoft tech stack, and as such will primarily
    use tools from Microsoft. But we will use a lot of them—such is the nature of
    building a SaaS app.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将专注于微软技术栈，因此将主要使用微软的工具。但我们会使用很多工具——这是构建SaaS应用程序的本质。
- en: Database development
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据库开发
- en: Starting at the bottom of the tech stack, we will use SQL Server Express for
    all database work. This can either be installed directly onto your developer machine
    or run in a container using Docker. Both methods will be described in detail in
    this book, although we will generally prefer containerized solutions.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术栈的底层开始，我们将使用SQL Server Express进行所有数据库工作。这可以直接安装到您的开发机器上，或者使用Docker在容器中运行。本书将详细描述这两种方法，尽管我们通常更倾向于容器化解决方案。
- en: API development
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API开发
- en: An API is a set of rules and protocols that specifies how two systems should
    communicate with each other. It is a way for one system to access the functionality
    of another system, such as a web-based software application or a server. APIs
    allow different software systems to interact with each other and share data and
    functionality. They are often used to enable integration between different systems,
    such as a mobile app and a backend server, or a website and a database. The API
    will be developed using C# and .NET 7\. Sticking with all things Microsoft, we
    will use Visual Studio Community Edition. This is a free and extremely powerful
    IDE that makes developing the C# application very straightforward.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: API是一套规则和协议，它指定了两个系统应该如何相互通信。它是让一个系统访问另一个系统功能的一种方式，例如基于Web的软件应用程序或服务器。API允许不同的软件系统相互交互并共享数据和功能。它们通常用于实现不同系统之间的集成，例如移动应用程序和后端服务器，或网站和数据库。API将使用C#和.NET
    7进行开发。坚持使用所有微软技术，我们将使用Visual Studio Community Edition。这是一个免费且功能强大的IDE，使得开发C#应用程序变得非常简单。
- en: Frontend development
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 前端开发
- en: There are a plethora of good options with which to build the frontend for a
    SaaS application. The selection will largely come down to personal choice or the
    availability of developers on the market.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 构建SaaS应用程序的前端有很多好的选择。选择将主要取决于个人喜好或市场上开发者的可用性。
- en: At the time of writing, by far the most commonly used frontend technologies
    are JavaScript-based—typically, Angular or React. However, the future is WebAssembly,
    and Microsoft has recently released Blazor using this technology, which allows
    the frontend to be built using familiar .NET languages, such as C#. This book
    will demonstrate a frontend using Blazor, but given that the JavaScript frameworks
    are (for now) more popular, I will take care to keep the explanations generic
    enough that the learnings with Blazor can be applied to any other frontend framework.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，最常用的前端技术是基于JavaScript的——通常是Angular或React。然而，未来是WebAssembly，微软最近发布了使用这项技术的Blazor，它允许使用熟悉的.NET语言，如C#来构建前端。本书将演示使用Blazor的前端，但鉴于JavaScript框架（目前）更受欢迎，我将确保解释足够通用，以便Blazor的学习成果可以应用于任何其他前端框架。
- en: Authentication and authorization
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 认证和授权
- en: Regardless of which frontend technology is used, it is of vital importance to
    get the authentication and authorization correct. We have dedicated an entire
    chapter to this later in this book. We will use an implementation of the OAuth
    2.0 protocol, and will demonstrate how to secure your SaaS application from the
    UI all the way through to the database, and back again!
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 无论使用哪种前端技术，确保认证和授权正确都是至关重要的。我们将在本书的后面章节中专门讨论这一点。我们将使用OAuth 2.0协议的实现，并演示如何从UI到数据库，再到UI，确保您的SaaS应用程序的安全性！
- en: Hosting
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主机托管
- en: Every SaaS application needs somewhere to live, and that will typically be in
    the cloud. While the bulk of this book will focus on developing on a local developer
    machine, we will also investigate how to build a deployment pipeline, and show
    your app “going live.” We will use the Azure portal for all application and database
    hosting.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 每个SaaS应用程序都需要一个存放的地方，通常是在云端。虽然本书的大部分内容将专注于在本地开发者机器上开发，但我们也会探讨如何构建部署管道，并展示您的应用程序“上线”。我们将使用Azure门户来托管所有应用程序和数据库。
- en: Docker
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker
- en: Developing a SaaS application really is the epitome of “full stack.” We will
    be working with a wide array of tools, from databases to the frontend, not to
    mention many different testing frameworks to test all of these components. Accordingly,
    we will lean on Docker a lot to wrap up all of these dependencies and simplify
    the development process. Docker is a truly huge topic on its own, and it is outside
    the scope of this book to fully explain what Docker is and what Docker does. Put
    simply, Docker allows all sorts of complexity to be wrapped up in a very simple-to-use
    container.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 开发SaaS应用程序真的是“全栈”的典范。我们将使用从数据库到前端的各种工具，不用说还要使用许多不同的测试框架来测试所有这些组件。因此，我们将大量依赖Docker来封装所有这些依赖关系并简化开发过程。Docker是一个真正巨大的主题，本书的范围不包括全面解释Docker是什么以及Docker做什么。简单来说，Docker允许各种复杂性封装在一个非常易于使用的容器中。
- en: For example, consider executing a few thousand unit tests against a UI and an
    API, and maybe a few integration and **end-to-end** (**E2E**) tests as well. There
    can be many dependencies involved in running these tests locally, and it can often
    take some time to configure a developer machine to successfully execute the test
    suite.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑执行针对UI和API的几千个单元测试，也许还有几个集成和**端到端**（**E2E**）测试。运行这些测试可能涉及许多依赖项，并且通常需要一些时间来配置开发机器以成功执行测试套件。
- en: With Docker, it is possible to encapsulate a full testing suite within a Docker
    container to run the tests with a very simple Docker command. Further, these tests
    will run identically on any machine with the Docker client running. So, the Dockerized
    test suite will run just as happily on a Mac, Windows, or Linux, as well as in
    a pipeline on a cloud server.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Docker，可以在Docker容器中封装完整的测试套件，通过一个简单的Docker命令运行测试。此外，这些测试将在任何运行Docker客户端的机器上以相同的方式运行。因此，Docker化的测试套件在Mac、Windows、Linux上以及云服务器上的管道中都能愉快地运行。
- en: In a nutshell, Docker wraps up complexity and facilitates simple interactions
    with complex systems.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，Docker封装了复杂性，并简化了与复杂系统的交互。
- en: Which techniques will be used to build SaaS apps?
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将使用哪些技术来构建SaaS应用程序？
- en: Really, there will be no specific techniques that we will use that are not used
    in developing any other type of software application. However, I will briefly
    mention the techniques that I will use in this book.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们将使用的所有技术都不是在开发任何其他类型的软件应用程序时不会使用的。然而，我将简要提及我在本书中将使用的技术。
- en: Test-driven development (TDD)
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试驱动开发（TDD）
- en: One of the huge benefits of SaaS is that the application can be updated very
    quickly and essentially rolled out to each and every user at the click of a button.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: SaaS的一个巨大好处是应用程序可以非常快速地更新，并且基本上可以一键推出给每个用户。
- en: This is great assuming that everything works as expected, but it is much less
    good if there is a bug in the code. Of course, we could build an extensive set
    of manual regression tests and build business processes into the release pipeline…
    but in doing so, you are losing a lot of the supposed advantages of SaaS—the ability
    to release often and early.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 假设一切按预期工作，这当然很好，但如果代码中存在错误，那就好多了。当然，我们可以构建一套广泛的手动回归测试，并将业务流程构建到发布管道中……但这样做，你将失去SaaS的一些所谓优势——能够频繁和早期发布。
- en: The only way to facilitate rapid deployments with some level of confidence that
    they will work is to build automated tests. And really, the best way to build
    an automated test suite is to do it as you go along, by following a TDD approach.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 要以一定程度的信心快速部署并确保其工作，唯一的方法是构建自动化测试。实际上，构建自动化测试套件的最佳方式是在进行中完成，遵循TDD（测试驱动开发）方法。
- en: I am aware that TDD has a somewhat mixed reputation in the industry at present.
    In my opinion, that is because TDD done wrong is a nightmare, and TDD is done
    wrong very often. I will present a variety of TDD that I feel is an excellent
    support structure when developing SaaS apps.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道目前 TDD 在业界有一定的争议。在我看来，这是因为错误的 TDD 是一场噩梦，而且错误的 TDD 非常常见。我将介绍多种我认为在开发 SaaS
    应用时是优秀支持结构的 TDD。
- en: Domain-driven design (DDD)
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 领域驱动设计 (DDD)
- en: DDD is defined as an approach to software development where the problem is specified
    by domain experts and not by middle management.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: DDD 被定义为一种软件开发方法，其中问题由领域专家指定，而不是由中层管理指定。
- en: DDD is a software development approach that concentrates on understanding and
    modeling the business domain of an application in order to improve the design
    and implementation of the software. It emphasizes the importance of domain knowledge
    in software development and encourages the use of domain-specific language in
    the design and implementation of software systems.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: DDD 是一种软件开发方法，它专注于理解和建模应用程序的业务域，以提高软件的设计和实现。它强调领域知识在软件开发中的重要性，并鼓励在软件系统的设计和实现中使用领域特定语言。
- en: In DDD, the business domain is understood as the core area of expertise or focus
    of an organization, and the software being developed is viewed as a tool to support
    and enhance the work being done in that domain. The goal of DDD is to create software
    that is aligned with the business needs and goals of an organization and that
    accurately reflects the complexity and nuance of the business domain.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DDD 中，业务域被理解为组织的核心专业领域或关注点，而正在开发的软件被视为支持并增强该领域工作的工具。DDD 的目标是创建与组织的业务需求和目标一致的软件，并准确反映业务域的复杂性和细微差别。
- en: SaaS products are often simply made available to anyone with a web connection,
    and there is no dedicated sales team individually approaching every customer and
    actively selling the product. Therefore, the product must sell itself, and so
    it must be useful. In order for this to be true, it is essential that the product
    is meeting a specific user need and addressing a particular problem domain.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: SaaS 产品通常只是简单地提供给任何有网络连接的人，没有专门的销售团队分别接近每一位客户并积极销售产品。因此，产品必须能够自我销售，因此它必须是实用的。为了使这一点成为现实，产品必须满足特定的用户需求并解决特定的问题域。
- en: Microservices
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 微服务
- en: SaaS projects need to be flexible so that the product can evolve with the market
    and with customers’ demands. It is very important that the product is architected
    in such a way that allows the straightforward addition of new features, with a
    minimal impact on existing features. A microservice-based architecture fits this
    requirement.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: SaaS 项目需要具备灵活性，以便产品能够随着市场和客户需求的变化而发展。产品架构必须以允许直接添加新功能，同时对现有功能影响最小的方式进行设计。基于微服务的架构符合这一要求。
- en: Multi-tenancy
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多租户
- en: Because every user is a tenant in the same deployed version of the application,
    the users’ data must be kept separate in the data storage and retrieval systems.
    There are a number of ways to approach this, which are discussed in a subsequent
    chapter of this book.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 由于每个用户都是同一部署版本的应用程序中的租户，因此用户数据必须在数据存储和检索系统中保持分离。有几种方法可以解决这个问题，这些方法将在本书的后续章节中讨论。
- en: Reactive design
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 响应式设计
- en: A SaaS application lives online and is accessed through a browser. In the modern
    era of smartphones and tablets, there is no way to know what type of device will
    be used to access your application. The frontend really needs to work on any type
    of device, or at the very least “fail gracefully” if it cannot operate on any
    given device.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: SaaS 应用程序在线运行，并通过浏览器访问。在智能手机和平板电脑的现代时代，无法知道将使用哪种类型的设备来访问您的应用程序。前端真的需要在任何类型的设备上工作，或者至少在无法在任何特定设备上运行时“优雅地失败”。
- en: Accordingly, the design of the UI must be “reactive,” meaning that it can be
    rendered in a way that is befitting the device that it is being displayed on.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，UI 的设计必须是“响应式的”，这意味着它可以以适合其显示的设备的方式进行渲染。
- en: Progressive web apps (PWAs)
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 渐进式网络应用 (PWAs)
- en: Something “nice to have,” but I feel it is worth considering. When we are building
    SaaS apps, we really want the user to feel that they are using a full-blown “application”
    and not a glorified website. However, by definition, a website cannot be shown
    if there is no available internet… PWA-based designs work around this by allowing
    limited functionality to work where there is little or no internet available.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: “想要有”的东西，但我认为值得考虑。当我们构建 SaaS 应用程序时，我们真的希望用户感觉到他们正在使用一个完整的“应用程序”，而不仅仅是被美化的网站。然而，根据定义，如果没有可用的互联网，网站是无法显示的……基于
    PWA 的设计通过允许在互联网可用性较低或没有互联网的情况下运行有限的功能来解决这个问题。
- en: Of course, with no access to the backend, many of the functions of the site
    will be unavailable. There is no way around that, but PWAs can be used to make
    that a little less painful for the user, and so it is an important technique that
    authors of SaaS applications should be aware of.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果没有访问后端，网站上的许多功能将不可用。这是无法避免的，但 PWA 可以让用户体验稍微好一些，因此这是 SaaS 应用程序作者应该了解的重要技术。
- en: We will demonstrate a PWA using Blazor for the frontend technology.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将演示使用 Blazor 作为前端技术的一个 PWA（渐进式网页应用）。
- en: 'Reasons for choosing SaaS as the go-to paradigm for all manner of businesses,
    large and small, old and new: as we have highlighted previously, much—if not most—of
    the population is using some form of SaaS application, from Gmail to Netflix.
    If SaaS is really eating the world, there must be a reason for that.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 选择 SaaS 作为所有大小、新旧企业的首选范式的原因：正如我们之前所强调的，大多数人口都在使用某种形式的 SaaS 应用程序，从 Gmail 到 Netflix。如果
    SaaS 真的在吞噬世界，那肯定有原因。
- en: No installations needed
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 无需安装
- en: This is the biggest and most important thing that drives businesses toward a
    SaaS-based solution.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这是推动企业转向基于 SaaS 的解决方案的最大、最重要的因素。
- en: Using a traditional application model, a new customer will often have to contact
    a sales team and sometimes also a tech support team to get the software installed
    on-premises and appropriately licensed.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 使用传统的应用程序模型，新客户通常需要联系销售团队，有时还需要联系技术支持团队，以便在本地安装软件并获得适当的许可。
- en: With SaaS, a new customer can discover the app and sign up for an account in
    seconds without needing any contact from the company that is providing the application.
    This is a significant saving for the company that has developed the application
    in that no additional sales or support teams are required to onboard the new customer.
    This also prevents a time lag from discovery to installation, during which the
    customer could change their mind or discover a competitor.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 SaaS，新客户可以在几秒钟内发现应用程序并注册账户，而无需与提供应用程序的公司有任何联系。这对开发应用程序的公司来说是一个巨大的节省，因为不需要额外的销售或支持团队来
    onboard 新客户。这也防止了从发现到安装的时间滞后，在此期间客户可能会改变主意或发现竞争对手。
- en: Browser-based delivery
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于浏览器的交付
- en: The users of a SaaS application are not limited to accessing the application
    on a specific computer or in a specific network environment where the license
    server resides. The users can have access to the application from any internet-connected
    machine anywhere in the world. In the modern era of smartphones and tablets, the
    user of a SaaS application may not even need a computer to take full advantage
    of the provided service.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: SaaS 应用的用户不仅限于在特定计算机或位于许可证服务器所在特定网络环境中访问应用程序。用户可以从世界各地的任何互联网连接的机器上访问该应用程序。在智能手机和平板电脑的现代时代，SaaS
    应用的用户甚至可能不需要电脑就能充分利用提供的服务。
- en: Scalability
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可扩展性
- en: In a traditional model, this is simply not possible. Convincing people to install
    any application on their computer is hard. Convincing companies to do so is doubly
    hard. Scaling up the user base of a desktop application requires a dedicated sales
    team and also a dedicated support team to first make the application, and then
    hand-hold people through the installation process. With a SaaS app, users simply
    sign up on an online form.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统模型中，这是不可能的。说服人们在自己的电脑上安装任何应用程序都很困难。说服公司这样做则更加困难。扩大桌面应用程序的用户群需要专门的销售团队和专门的客户支持团队，首先制作应用程序，然后引导人们完成安装过程。使用
    SaaS 应用程序，用户只需在在线表单上注册即可。
- en: Because the SaaS application is hosted in the cloud (Azure, **Google Cloud Platform**
    (**GCP**), or AWS), near-instant scale-up of the infrastructure is possible should
    a sudden spike in demand occur. There is no other software delivery paradigm that
    could face an overnight 10 times increase in demand and not leave the vendor floundering!
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 由于SaaS应用托管在云端（Azure、**Google Cloud Platform**（**GCP**）或AWS），如果需求突然激增，基础设施可以实现近乎瞬间的扩展。没有其他软件交付模式能够面对一夜之间需求增加10倍的情况，而供应商不会陷入困境！
- en: Upgradability
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可升级性
- en: Under the “legacy” methods of delivering applications, upgrading the apps tended
    to become nightmarishly complex and expensive for the vendors of the apps.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在“传统”的应用交付方法下，应用升级往往对应用供应商来说变得极其复杂和昂贵。
- en: If you consider a traditional desktop application, the same application could
    be installed on hundreds of machines across hundreds of different businesses.
    No two businesses will be running the same hardware or OS versions, and so it
    is impossible to keep everyone on the same version of your software. It is similarly
    completely impossible to roll out an upgrade to a new version. At best, you can
    withdraw support for a particular version at a particular time and hope that everyone
    stops using it (note—they will not stop using it).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你考虑传统的桌面应用，同一个应用可能被安装在成百上千台机器上，遍布成百上千个不同的企业。没有任何两家企业会运行相同的硬件或操作系统版本，因此不可能让所有人都使用你的软件的同一版本。同样，推出新版本的升级也是完全不可能的。最好的办法是在特定时间停止支持特定版本，并希望所有人都停止使用它（注意——他们不会停止使用）。
- en: This is a similar problem for an on-premises web application. While there are
    fewer induvial installations, there will still be many different versions out
    there, servicing specific business requirements.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本地部署的Web应用来说，这也是一个类似的问题。虽然安装数量较少，但仍然会有许多不同的版本存在，以满足特定的业务需求。
- en: This problem completely melts away when you move to a SaaS paradigm. The vendor
    has full control of the upgrades and can roll them out to all customers all at
    once at the click of a button.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 当你转向SaaS模式时，这个问题完全消失。供应商可以完全控制升级，并且可以一键将它们推出给所有客户。
- en: Only having one version of an app to support is a *huge* saving for the vendor
    and also a huge advantage for the development team.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 只支持一个版本的app对于供应商来说是一项巨大的节省，同时也为开发团队带来了巨大的优势。
- en: Iterate quickly
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速迭代
- en: An emergent property of the upgradability advantage of a SaaS app is the ability
    to iterate on the solution extremely rapidly. Feedback about new features can
    be incorporated and pushed out to all users in very quick cycles. This allows
    for a very fast turnaround from a developer writing a feature to that feature
    providing value to the users and revenue to the vendor.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: SaaS应用升级优势的一个新兴特性是能够极快地迭代解决方案。关于新特性的反馈可以在非常快的周期内被整合并推送给所有用户。这允许开发者从编写功能到该功能为用户提供价值以及为供应商带来收入之间实现非常快的周转。
- en: Consider how long it takes for that value to be realized in a traditional app.
    The code may well sit in a Git repo for many months before it is even included
    in the “annual release,” and then, the users may choose not to upgrade immediately.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一下在传统应用中实现这一价值需要多长时间。代码可能已经在Git仓库中存放了好几个月，才被包括在“年度发布”中，然后，用户可能选择不立即升级。
- en: Analytics
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分析
- en: Because the users are all funneled through a single web application, it is extremely
    easy to analyze *how* the application is being used. This can guide the business
    to make smart decisions to upgrade the most used parts of the application and
    defer working on less well-used parts. Couple this with the ease of upgrading
    and the fast iterations, and this can provide a huge boost in value to the users
    and should come with a boost in revenue to the vendor.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 由于所有用户都通过单个Web应用进行操作，分析应用是如何被使用的变得极其容易。这可以引导企业做出明智的决策，升级应用中最常用的部分，并推迟对不太常用的部分的工作。结合升级的便利性和快速迭代，这可以为用户提供巨大的价值提升，并应该为供应商带来收入的提升。
- en: Global market
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 全球市场
- en: With SaaS, the ability to reach customers anywhere is a massive boost for the
    business supplying the product. There is no case where a sale is missed due to
    time-zone issues or a sales rep failing to reply to an email.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 使用SaaS，能够随时随地接触到客户对提供产品的企业来说是一个巨大的提升。不存在因为时区问题或销售代表未能回复电子邮件而错失销售的情况。
- en: The ability to gain access to a truly global audience has allowed some companies
    to become the biggest companies in the world—bigger than banks and oil and gas
    majors. This access to a market also allows thousands of smaller companies to
    thrive in a truly global environment.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 能够接触到真正全球的受众，使一些公司成为世界上最大的公司——比银行和石油天然气巨头还要大。这种市场准入也允许成千上万的较小公司在真正全球化的环境中蓬勃发展。
- en: Flexible payment model
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 灵活的支付模式
- en: 'There are many different payment models available to a business offering SaaS.
    This allows it to capture customers large and small and derive the most value
    possible from each tier or size of the customer. Some types of payment models
    follow:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 对于提供SaaS服务的公司来说，有许多不同的支付模式可供选择。这使得它能够吸引大小客户，并从每个客户层或规模中获取最大价值。以下是一些支付模式的类型：
- en: Tiered pricing
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分级定价
- en: Freemium
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 免费增值
- en: Free trial periods
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 免费试用期
- en: Per-user pricing
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按用户定价
- en: Security
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安全性
- en: Access to the SaaS application will be through a user login that protects sensitive
    data and files, which are securely stored in a cloud system. This is (in most
    cases) far more secure than storing data on a server on-premises—or on a local
    user machine, in the case of a desktop application. While it may seem that keeping
    all of the data locally or within a local network is more secure than sending
    the data to a server on the cloud over the internet, this is often not the case.
    A huge amount of effort goes into securing the cloud services that are typically
    used to host SaaS applications, and often that effort cannot be replicated on
    a site-by-site basis, whether that be securing an on-premises web app or individually
    securing the data on desktop-installed applications.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 访问SaaS应用程序将通过用户登录进行，这可以保护敏感数据和文件，这些数据和文件被安全地存储在云系统中。这在大多数情况下比在本地服务器上存储数据或桌面应用程序的本地用户机器上存储数据要安全得多。虽然看起来将所有数据保留在本地或本地网络中似乎比通过互联网将数据发送到云服务器上更安全，但这通常并非如此。为通常用于托管SaaS应用程序的云服务投入了大量的精力来确保安全，而这种努力通常无法逐个站点复制，无论是保护本地Web应用程序还是单独保护桌面安装应用程序上的数据。
- en: How does this affect the development process?
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这如何影响开发过程？
- en: In theory, the development process for building a SaaS app is rather similar
    to any other type of application, but in practice, there are nuances and considerations
    that you must note as a developer working on a SaaS project.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 理论上，构建SaaS应用程序的开发过程与其他类型的应用程序相当相似，但在实践中，作为SaaS项目开发人员，你必须注意一些细微差别和考虑因素。
- en: Release often, release early
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 经常发布，尽早发布
- en: There is no “annual release cycle” for a SaaS app. The expectation is that functionality
    will be broken down into manageable slices, developed, and then pushed out as
    soon as they are ready. This requires a bit of a mindset shift if coming from
    a more traditional release cycle. All changes have to be incremental, generally
    contained to a small part of the applications, and ready for release ASAP.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: SaaS应用程序没有“年度发布周期”。预期功能将被分解成可管理的部分，开发完成后，一旦准备好就立即推出。如果是从更传统的发布周期转变过来，这需要一些思维方式的转变。所有更改都必须是增量式的，通常仅限于应用程序的小部分，并且要尽快准备好发布。
- en: This mindset of getting the code into the hands of the users will have to be
    backed up by automated pipelines that build and release the new code without much
    manual intervention.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这种将代码交到用户手中的思维方式需要由自动化管道来支持，这些管道可以构建和发布新代码，而无需太多人工干预。
- en: While it is possible to roll out the updates to sections of the audience to
    make sure there is nothing catastrophic in there, it is much more typical for
    a small-to-medium-sized SaaS application to simply push the updates out to all
    of the users all at once. For this to be successful…
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然有可能向部分受众推出更新以确保其中没有灾难性的内容，但对于中小型SaaS应用程序来说，更典型的情况是一次性将更新推送给所有用户。为了使这成功……
- en: Testing, testing, testing
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试，测试，测试
- en: If the code is released to the entire user base in one go, and often with no
    real way of rolling back the change, you had better hope that it works!
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如果代码一次性发布给整个用户群，而且通常没有真正的方法可以回滚更改，你最好希望它能正常工作！
- en: The only way to build any sort of trust that the code will operate as advertised
    is to test it, and in a “release often, release early” mindset, this means automated
    testing. While this doesn’t necessarily mean adhering to a TDD mentality, this
    can certainly be useful.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一能够建立代码按广告宣传的方式运行的信任的方式是测试它，而在“频繁发布，尽早发布”的心态下，这意味着自动化测试。虽然这并不一定意味着遵循TDD（测试驱动开发）的心态，但这肯定是有用的。
- en: You’d better be full stack
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你最好全栈
- en: Okay—this is not absolutely required. I’m sure that the larger SaaS applications
    are worked on by specialists in the database/backend/frontend disciplines. But
    it will certainly help to have a good knowledge across the different application
    layers.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧——这并不是绝对必要的。我相信大型SaaS应用程序是由数据库/后端/前端学科的专家开发的。但当然，对不同的应用程序层次有良好的知识将大有裨益。
- en: The way that SaaS applications “grow” in an almost organic way through the fast
    cycles and near-instant releases means an understanding at least across the layers,
    and an understanding of how a decision in the database *may* affect the frontend
    is invaluable.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: SaaS应用程序以几乎有机的方式通过快速周期和近乎即时的发布“增长”，这意味着至少需要对各个层次有所理解，并且理解数据库中的决策*可能*如何影响前端是非常宝贵的。
- en: Know thy user
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解你的用户
- en: While this may not be required for each developer in the team, it is absolutely
    essential that the team as a whole understands who is using its product, why they
    are using it, and where the value is. This knowledge and understanding will come
    from assessing the analytics and also from “softer” approaches, such as focus
    groups and interviews with users.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这可能不是团队中每个开发者的要求，但整个团队理解其产品的使用者、他们为什么使用它以及价值在哪里是绝对必要的。这种知识和理解将来自评估分析，以及“更软”的方法，如焦点小组和与用户的访谈。
- en: This understanding should flow down into the development process through user
    stories. From the developers’ point of view, this may manifest in seemingly sudden
    shifts in direction, if a particular feature has not landed well with a focus
    group or user interviews have shown that a particular path is the wrong one. The
    ability to pivot quickly is important across the team.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这种理解应该通过用户故事流入开发过程。从开发者的角度来看，如果某个特定功能没有在焦点小组中取得良好效果，或者用户访谈表明某个路径是错误的，这可能会导致方向上的突然转变。快速调整方向的能力对整个团队来说都很重要。
- en: What to expect from this book
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从这本书中你可以期待什么
- en: This chapter has served as an introduction to what SaaS is, where it has come
    from, why businesses and users love it, and finally what is required of you as
    a developer to effectively build a SaaS application.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 本章已作为SaaS是什么、它从何而来、为什么企业和用户喜欢它，以及最后作为开发者，你需要有效地构建SaaS应用程序的介绍。
- en: In the coming chapters, we will deep dive into all of the aforementioned areas,
    but with a focus on building the tools and understanding required as developers
    to build great SaaS applications that your users will love to use, and that (hopefully)
    you will love to build!
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将深入探讨所有上述领域，但重点是构建作为开发者构建用户喜爱并希望构建的出色SaaS应用程序所需的工具和理解。
- en: To illustrate the technical points and understanding required, we will build,
    test, and deploy a full stack SaaS application!
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明所需的技术点和理解，我们将构建、测试和部署一个全栈SaaS应用程序！
- en: I have approached the writing of this book with the same mindset as I do when
    I am building an application. I aim to make this an engaging, interesting, and
    maybe even “delightful” experience for the user—which is you in this case!
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我在撰写这本书时，采取了与构建应用程序时相同的心态。我的目标是让这本书成为一个引人入胜、有趣，甚至可能是“令人愉悦”的体验——在这种情况下，就是你！
- en: Let’s get going!
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: How to assess and pay off technical debt
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何评估和偿还技术债务
- en: 'What is technical debt anyway? Let’s start with a definition:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 技术债务究竟是什么？让我们从定义开始：
- en: '*Technical debt accumulates as features are added to a project. It is inevitable
    that as complexity is added to certain areas of a project, some of the other parts
    of that project will no longer fit quite as well and will at some point have to
    be worked on. However, the realities of life as a developer are that products
    must be shipped and that bills must be paid, and therefore the time is not always
    allocated to tidy up every last corner, and over time, technical debt starts*
    *to accumulate.*'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '*技术债务随着项目功能的增加而累积。随着项目某些区域复杂性的增加，该项目的一些其他部分将不再完全适合，并在某个时候必须进行工作。然而，作为开发者的生活现实是，产品必须发货，账单必须支付，因此，并不总是有足够的时间来整理每一个角落，随着时间的推移，技术债务开始*
    *累积* *。'
- en: Another source of technical debt that all projects will experience occurs when
    the underlying frameworks and technologies are updated. It is often not straightforward
    to update a major release, and sadly it is common for projects to languish in
    outdated versions—which represents a technical debt.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个所有项目都会遇到的技术债务来源是在底层框架和技术更新时。更新一个主要版本通常并不简单，遗憾的是，项目滞留在过时版本中——这代表了一种技术债务。
- en: One final common source of technical debt is when users’ habits change. In the
    era before the iPhone, very few people accessed a website through a mobile device.
    That very quickly changed, leaving many teams scrambling to update their websites
    so that they functioned correctly when accessed through a mobile device.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个常见的技术债务来源是当用户习惯改变时。在iPhone时代之前，很少有人通过移动设备访问网站。这种情况很快发生了变化，导致许多团队急忙更新他们的网站，以便通过移动设备访问时能够正常工作。
- en: All technical projects have some technical debt—there is no getting away from
    that fact, and it is important for all projects to keep on top of this. However,
    there are a few considerations specific to developing SaaS applications that must
    be taken into account.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 所有技术项目都有一些技术债务——这是无法避免的事实，并且对于所有项目来说，保持对技术债务的控制非常重要。然而，在开发SaaS应用程序时，有一些特定的考虑因素必须加以考虑。
- en: The philosophy with most SaaS applications is to get the development work into
    the hands of the customers as quickly as possible. This is usually achieved through
    extensive automated test suites, coupled with build and release pipelines to push
    the code out to the production environments as soon as possible.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数SaaS应用程序，其哲学是尽可能快地将开发工作交给客户。这通常是通过广泛的自动化测试套件，以及构建和发布管道来实现的，以便尽可能快地将代码推送到生产环境。
- en: Contrast this with traditional release and delivery mechanisms, where there
    will be a year gap between releases, and (hopefully) some time in that year allocated
    to paying off technical debt.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 与传统的发布和交付机制相比，传统的发布和交付机制在发布之间会有一个年度间隔，并且在那一年的某个时间点可能会分配一些时间来偿还技术债务。
- en: With the constant develop-release-repeat cycle that is common to SaaS development,
    it is important that technical debt is kept on top of.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在SaaS开发中常见的持续开发-发布-重复周期中，保持对技术债务的控制非常重要。
- en: The first and most important way to assess and pay off technical debt is to
    allow the development team some time each week (or each sprint cycle) to do “chores.”
    These would be small housekeeping tasks that might otherwise be left to grow into
    serious technical debt issues. The development team are *always* the people who
    know best where the technical debt is. After all, they created it in the first
    place!
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 评估和偿还技术债务的第一种也是最重要的方式是允许开发团队每周（或每个冲刺周期）留出一些时间来做“杂事”。这些可能是其他情况下可能会被忽视的小型维护任务，否则它们可能会发展成为严重的技术债务问题。开发团队*总是*最清楚技术债务在哪里。毕竟，是他们最初创造了它！
- en: Static analysis is another extremely powerful tool to keep on top of technical
    debt. Static analysis is used to check the quality of the code when it is not
    running (when it is static!) and can check that standards are adhered to and the
    latest best practices are being implemented.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 静态分析是另一种保持技术债务在控制之下的极其强大的工具。静态分析用于在代码未运行时（当它是静态的！）检查代码的质量，并可以检查是否遵守了标准以及是否正在实施最新的最佳实践。
- en: Similar to static analysis, linting should also always be performed to ensure
    that the code is formatted according to the agreed coding standards.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 与静态分析类似，也应该始终执行代码检查，以确保代码格式符合约定的编码标准。
- en: As mentioned previously, out-of-date packages can become a major source of technical
    debt. While being on the absolute cutting edge can be risky, there is rarely a
    benefit in being significantly out of date. There should be regular housekeeping
    done to ensure that any packages and frameworks that are being used are sufficiently
    up to date.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，过时的包可能成为技术债务的主要来源。虽然保持绝对的前沿可能存在风险，但严重过时通常没有好处。应该定期进行清理，以确保所使用的任何包和框架都足够更新。
- en: Finally, automatic performance testing should be carried out to ensure that
    there are no regressions in the performance of the application as it grows and
    changes over time.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，应该进行自动性能测试，以确保随着应用的增长和随时间的变化，其性能没有出现退化。
- en: Even if all of the aforementioned points are strictly adhered to, a project
    will still accumulate technical debt over time. There is very little that can
    be done about this. But with the preceding considerations and mitigations in place,
    the impact that technical debt has on the project—and, ultimately, the profitability
    of the company building the project—can be minimized.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 即使严格遵守上述所有要点，项目随着时间的推移仍然会积累技术债务。对此几乎无能为力。但是，在实施上述考虑和缓解措施的情况下，技术债务对项目的影响——以及最终构建项目的公司的盈利能力——可以最小化。
- en: Summary
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter has given a broad introduction to the concept of SaaS. We have
    covered a brief history of application development and looked at the paradigms
    that were prevalent in the pre-SaaS days. We have considered why SaaS is becoming
    so popular and looked at the technical, business, and user-centric reasons for
    its adoption. Finally, we have considered which tools and techniques you as a
    developer need to be effective as a SaaS developer.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 本章对SaaS的概念进行了广泛的介绍。我们回顾了应用开发的历史，并探讨了SaaS出现之前盛行的范式。我们考虑了为什么SaaS变得如此受欢迎，并分析了其采用的技术、商业和以用户为中心的原因。最后，我们考虑了作为开发者，你需要哪些工具和技术才能成为一个有效的SaaS开发者。
- en: Hopefully, this chapter has given you a strong foundational understanding of
    SaaS, which we will now start to expand on as we move through this book!
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 希望本章已经为你提供了对SaaS的坚实基础理解，我们将从现在开始，随着本书的进展对其进行扩展！
- en: Building SaaS applications is challenging, but by far the best way to make progress
    is to start building and get your hands dirty! In the next chapter, we will get
    straight into the tools, tooling, and techniques that will be used throughout
    this book to build a demo of a SaaS application!
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 构建SaaS应用具有挑战性，但迄今为止，最好的进步方式就是开始构建，并亲自动手！在下一章中，我们将直接介绍本书将使用的工具、工具集和技术，以构建一个SaaS应用的演示！
- en: Further reading
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'For current business trends: [https://www.datapine.com/blog/saas-trends/](https://www.datapine.com/blog/saas-trends/)'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于当前的商业趋势：[https://www.datapine.com/blog/saas-trends/](https://www.datapine.com/blog/saas-trends/)
- en: 'For some SaaS development tricks and tips: [https://www.rswebsols.com/tutorials/software-tutorials/saas-application-development-tips-tricks](https://www.rswebsols.com/tutorials/software-tutorials/saas-application-development-tips-tricks)'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于一些SaaS开发的技巧和提示：[https://www.rswebsols.com/tutorials/software-tutorials/saas-application-development-tips-tricks](https://www.rswebsols.com/tutorials/software-tutorials/saas-application-development-tips-tricks)
- en: 'For further information on scaling SaaS applications: [https://medium.com/@mikesparr/things-i-wish-i-knew-when-starting-software-programming-3508aef0b257](https://medium.com/@mikesparr/things-i-wish-i-knew-when-starting-software-programming-3508aef0b257)'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于扩展SaaS应用的更多信息：[https://medium.com/@mikesparr/things-i-wish-i-knew-when-starting-software-programming-3508aef0b257](https://medium.com/@mikesparr/things-i-wish-i-knew-when-starting-software-programming-3508aef0b257)
