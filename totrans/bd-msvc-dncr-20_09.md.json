["```cs\nnamespace FlixOne.BookStore.ProductService.Models\n{\n  public class Product\n  {\n    public Guid Id { get; set; }\n    public string Name { get; set; }\n    public string Description { get; set; }\n    public string Image { get; set; }\n    public decimal Price { get; set; }\n    public Guid CategoryId { get; set; }\n    public virtual Category Category { get; set; }\n  }\n}\n```", "```cs\nnamespace FlixOne.BookStore.ProductService.Models\n{\n  public class Category\n  {\n    public Category() => Products = new List<Product>();\n    public Guid Id { get; set; }\n    public string Name { get; set; }\n    public string Description { get; set; }\n    public IEnumerable<Product> Products { get; set; }\n  }\n}\n```", "```cs\nnamespace FlixOne.BookStore.ProductService.Contexts\n{\n  public class ProductContext : DbContext\n  {\n    public ProductContext(DbContextOptions<ProductContext> options)\n    : base(options)\n    { }\n    public ProductContext()\n    { }\n    public DbSet<Product> Products { get; set; }\n    public DbSet<Category> Categories { get; set; }\n  }\n}\n//Persistence or repositories, following is the interface\nnamespace FlixOne.BookStore.ProductService.Persistence\n{\n  public interface IProductRepository\n  {\n    IObservable<IEnumerable<Product>> GetAll();\n    IObservable<IEnumerable<Product>> GetAll(IScheduler scheduler);\n    IObservable<Unit> Remove(Guid productId);\n    IObservable<Unit> Remove(Guid productId, IScheduler scheduler);\n  }\n}\n//ProductRepository class that implements the IProductRepository interface\nnamespace FlixOne.BookStore.ProductService.Persistence\n{\n  public class ProductRepository : IProductRepository\n  {\n    private readonly ProductContext _context;\n    public ProductRepository(ProductContext context)\n    => _context = context;\n    public IObservable<IEnumerable<Product>> \n    GetAll() => Observable.Return(GetProducts());\n    public IObservable<IEnumerable<Product>>\n    GetAll(IScheduler scheduler) => \n    Observable.Return(GetProducts(), scheduler);\n    public IObservable<Unit> Remove(Guid productId) =>\n    Remove(productId, null);\n    public IObservable<Unit> Remove(Guid productId,\n    IScheduler scheduler)\n    {\n      DeleteProduct(productId);\n      return scheduler != null\n      ? Observable.Return(new Unit(), scheduler)\n      : Observable.Return(new Unit());\n    }\n    private IEnumerable<Product> GetProducts()\n    {\n      var products = (from p in _context.Products.\n      Include(p => p.Category)\n      orderby p.Name\n      select p).ToList();\n      return products;\n    }\n    private Product GetBy(Guid id) => GetProducts().\n    FirstOrDefault(x => x.Id == id);\n    private void DeleteProduct(Guid productId)\n    {\n      var product = GetBy(productId);\n      _context.Entry(product).State = EntityState.Deleted;\n      _context.SaveChanges();\n    }\n  }\n}\n```", "```cs\n \"ConnectionStrings\": \n {\n   \"ProductConnection\": \"Data Source=.;Initial\n   Catalog=ProductsDB;Integrated  \n   Security=True;MultipleActiveResultSets=True\"\n }\n```", "```cs\n return Observable.Return(GetProducts());\n```", "```cs\nnamespace FlixOne.BookStore.ProductService.Controllers\n{\n  [Route(\"api/[controller]\")]\n  public class ProductController : Controller\n  {\n    private readonly IProductRepository _productRepository;\n    public ProductController() => _productRepository =\n    new ProductRepository(new ProductContext());\n    public ProductController(IProductRepository \n    productRepository) => _productRepository = \n    productRepository;\n    [HttpGet]\n    public async Task<IEnumerable<Product>> Get() =>\n    await _productRepository.GetAll().SelectMany(p => p).ToArray();\n  }\n}\n```", "```cs\n static void Main(string[] args)\n {\n   var client = new ProductServiceClient {BaseUri = \n   new Uri(\"http://localhost:22651/\")};\n   var products = client.Product.Get();\n   Console.WriteLine($\"Total count {products.Count}\");\n   foreach (var product in products)\n   {\n     Console.WriteLine($\"ProductId:{product.Id},Name:\n     {product.Name}\");\n   }\n   Console.Write(\"Press any key to continue ....\");\n   Console.ReadLine();\n }  \n```"]