- en: '16'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Utilizing World Space UI
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 6*](B18327_06.xhtml#_idTextAnchor085), we discussed the three different
    Render Modes you can assign to a Canvas. We’ve used Screen Space-Overlay and Screen
    Space-Camera but haven’t used World Space yet. As described in [*Chapter 2*](B18327_02.xhtml#_idTextAnchor024),
    UI rendered in World Space is placed directly in the scene. We’ve already discussed
    the properties of World Space Canvas rendering, so this chapter will just look
    at when to use it and examples of implementation.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: When to use World Space UI
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: General techniques to consider when working with World Space UI
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using World Space Canvases in a 2D game to create status indicators positioned
    relative to characters
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using World Space Canvases to create health bars that hover over enemies’ heads
    in a 3D game
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can find the relevant codes and asset files of this chapter here: [https://github.com/PacktPublishing/Mastering-UI-Development-with-Unity-2nd-Edition/tree/main/Chapter%2016](https://github.com/PacktPublishing/Mastering-UI-Development-with-Unity-2nd-Edition/tree/main/Chapter%2016)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: When to use World Space UI
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are many reasons you may want to use a World Space Canvas. The most common
    reasons for using this render mode are the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: To have better control of individual UI objects’ positions in relation to objects
    in the scene
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To rotate or curve UI elements
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, the game *Mojikara: Japanese Trainer* uses World Space Canvases
    to have rotated Panels and keep UI objects, such as Text, attached to 3D objects.
    As you can see from the following screenshot, the Panel on the left is rotated
    just slightly in 3D space, because it is on a World Space Canvas:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.1: Mojikara: Japanese Trainer (image provided by Lisa Walkosz-Migliacio,
    Intropy Games)](img/B18327_16_01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.1: Mojikara: Japanese Trainer (image provided by Lisa Walkosz-Migliacio,
    Intropy Games)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Another example of rotated UI can be found in the game *Cloudbase Prime*, as
    shown in the following screenshot. It also used World Space rendering to create
    indicators that hover over objects and characters.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.2: Cloudbase Prime (image provided by Tyrus Peace, Floating Island
    Games)](img/B18327_16_02.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.2: Cloudbase Prime (image provided by Tyrus Peace, Floating Island
    Games)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: 'All the UI in *Cloudbase Prime* was done on World Space Canvases. This allowed
    the developer to create cool curving UI, as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.3: Cloudbase Prime (image provided by Tyrus Peace, Floating Island
    Games)](img/B18327_16_03.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.3: Cloudbase Prime (image provided by Tyrus Peace, Floating Island
    Games)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, you can see how the UI looks in the Editor versus how it looks to the
    player. This gives a nice peek at how the UI was built:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.4: Cloudbase Prime (image provided by Tyrus Peace, Floating Island
    Games)](img/B18327_16_04.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.4: Cloudbase Prime (image provided by Tyrus Peace, Floating Island
    Games)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: 'I recommend checking out the following site to see more ways in which *Cloudbase
    Prime* has implemented World Space UI, as they are truly beautiful: [https://imgur.com/a/hxNgL](https://imgur.com/a/hxNgL).'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Another common usage of World Space UI is simulating computer screens and monitors
    within a scene. For example, I built the following UI for a friend’s VR game named
    *Cloud Rise*. The monitor was simulated by placing a World Space Canvas right
    on top of the in-game screen. I was then able to easily anchor and animate the
    UI; in the same way, I rendered the UI in Screen Space.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.5: Cloud Rise (image provided by Meredith Wilson, Bedhouse Games)](img/B18327_16_05.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.5: Cloud Rise (image provided by Meredith Wilson, Bedhouse Games)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: In general, the interactive UIs of VR games are on World Space Canvases since
    the player cannot interact with *the screen*. Common usages of VR UI are flat
    floating Panels or wrapping Panels.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: 'Hovering indicators are by far the most common use of World Space UI; they
    are specifically used for health bars over the heads of in-game characters, as
    shown in the following screenshot of *Iris Burning*:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.6: Iris Burning (image provided by William Preston, DCM Studios)](img/B18327_16_06.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.6: Iris Burning (image provided by William Preston, DCM Studios)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Most people think of 3D games when they think of World Space UI because they
    think of UI that appears *far away*, but it is commonly used in 2D games as well!
    Management and RTS games use UI quite frequently to create buttons and progress
    bars, and other UI elements maintain their position with the object they interact
    with. The World Space UI can be on one Canvas that encompasses all items on the
    screen, with individual UI items matching the 2D World Space coordinates of the
    items they represent, or they can be on individual Canvases of their respective
    items. We will cover how to create a 2D game using World Space UI in an example
    at the end of the chapter.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s explore how to use World Space UI.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Appropriately scaling text in the Canvas
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whenever a Canvas is created, it is initialized with **Screen Space - Overlay**
    as its **Render Mode**. Therefore, when you change the **Render Mode** property
    to **World Space**, the Canvas will be huge in your scene.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: 'When you scale down the Canvas to the appropriate size in the scene, the text
    will likely be super blurry or not visible at all. Let’s say we created the following
    Canvas in **Screen Space - Overlay** but decided to put it in **World Space**:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.7: A Canvas in Screen Space - Overlay](img/B18327_16_07.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.7: A Canvas in Screen Space - Overlay'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Converting it to `4` and `3` (since it was initially created with a 4:3 aspect
    ratio screen), the text will disappear!
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.8: A Canvas in Screen Space - Overlay](img/B18327_16_08.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.8: A Canvas in Screen Space - Overlay'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: 'If I set the **Text** to allow **Horizontal Overflow** and **Vertical Overflow**
    you’ll see that it is huge when compared to the Canvas! In the following screenshot,
    the tiny rectangle in the middle is the Canvas:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.9: World Space Canvas with huge overflowing text example](img/B18327_16_09.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.9: World Space Canvas with huge overflowing text example'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: To fix this, and to get it looking the way we want, we need to adjust the `1`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Usually, to determine the new `905`, divide it by the new `4`, and enter that
    division in my `905/4` in the box will perform the calculation.)
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.10: Dynamic Pixels Per Unit property adjusted](img/B18327_16_10.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.10: Dynamic Pixels Per Unit property adjusted'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: 'However, that calculation didn’t get the exact look I was looking for. So,
    I increased the size until it looked right:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.11: Dynamic Pixels Per Unit property example in the Chapter16 scene](img/B18327_16_11.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.11: Dynamic Pixels Per Unit property example in the Chapter16 scene'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Every time you change the **Width** and **Height** of the Canvas, you will have
    to adjust the **Dynamic Pixels Per Unit** property. Decreasing the size of the
    Canvas will mean increasing the **Dynamic Pixels Per Unit** property, and increasing
    the size of the Canvas will mean decreasing the size of the **Dynamic Pixels Per**
    **Unit** property.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are two Canvases, both one-fourth the size of the one from the previous
    figure. In the top Canvas, I changed the `1` and `.75`. In the bottom Canvas,
    I changed the `0.25`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.12: Width and Height change examples](img/B18327_16_12.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.12: Width and Height change examples'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: In the first example, since I changed the `350*4` in the `1400` for me (I love
    that Unity performs calculations in the boxes).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: However, in the second Canvas, I did not have to change the **Dynamic Pixels
    Per Unit** size, because scaling with the **Scale** property in this way does
    not require me to change it.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: The takeaway from this is that if your text isn’t displaying or looks incredibly
    blurry, adjust the **Dynamic Pixels Per Unit** property until it looks the way
    it should, or scale your Canvas by adjusting its **Scale** and not its **Width**
    and **Height**.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Text scaling will be the most important consideration with using World Space
    UI, but let’s review some other important topics.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Other considerations when working in World Space
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the most part, working with UI in World Space isn’t much different than
    working with UI in Screen or Camera Space. There are a few things you have to
    keep in mind, though.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: 'When working with 3D scenes, you may want your UI to always face the player,
    regardless of how the player turns the camera—this is known as a *billboard effect*.
    You can achieve this with a simple `LookAt()` function on the transform of the
    object in the `Update()` function:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You can use a variation of the preceding code, depending on how you want the
    rotation to behave.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Another consideration with 3D World Space UI is the distance it is away from
    the camera. You may want to have UI only render when it is a specific distance
    from the camera as it may be difficult to see when it is too far away.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Depending on your project, using World Space Canvases may cause difficulties
    with Raycasting, making interacting with UI a problem. Tyrus Peace of Floating
    Island Games recommends creating your own physics layer if you end up having to
    create your own Raycasting system, as he did with *Cloudbase Prime*, shown earlier
    in the chapter.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Working with World Space Canvases isn’t significantly different than working
    with Canvases in Screen and Camera Space. World Space Canvases offer many benefits.
    If you have an object that exists within your scene that has UI specifically tied
    to its location, it is helpful to use a World Space Canvas so that the UI follows
    it wherever it is. This removes the necessity of trying to convert the object’s
    World Space coordinates to Screen coordinates to ensure that the UI always lines
    up with the object. It also guarantees that the UI object will always display
    correctly with respect to the object’s location, even when the screen’s resolution
    changes. In this chapter, I will cover two common uses of World Space Canvases:
    one in 2D space and another in 3D space. Let’s begin with 2D space.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: 2D World Space status indicators
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this example, we will start a new scene. For you to not have to build out
    the scene, we will start with an Asset package that includes all the required
    items.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: We’ll create UI that allows a character to have a status indicator pop up above
    his head. After the scene has played for 3 seconds, a status-indicating button
    will appear over the character’s head. Once the player clicks on the status indicator,
    a dialog will appear. After 5 seconds, the dialog will disappear. The status indicator
    will re-appear 10 seconds later.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.13: 2D World Space UI example](img/B18327_16_13.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.13: 2D World Space UI example'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: The art used in this example was accessed from [https://opengameart.org/content/medieval-rts-120](https://opengameart.org/content/medieval-rts-120).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the status-indicating UI demonstrated by the previous example, complete
    the following steps:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: Import the `Chapter 16` `- Example 1-Start.unitypackage` package. This package
    contains a scene with a background image and a 2D sprite named `Mage`. The `Assets/Scripts/MageInteractions.cs`
    script included with the package controls the timers on the appearance of the
    status indicator. This script requires two Canvas Group items—`theExclamationPoint`
    and `theDialogBox`—and contains a function, `ShowTheDialogBox()`, that can be
    called via a button’s `On` `Click()` event.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We want the status indicator and the dialog to be tied to the position of the
    `Mage` within the scene. Therefore, we will create a Canvas that is a child of
    the `Mage` in `Mage` in the Hierarchy and add a UI Canvas as a child of the `Mage`.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the newly created `Canvas`. Change the **Render Mode** on the **Canvas**
    component to **World Space**.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assign the `Main Camera` to the **Event** **Camera** slot.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since this `Canvas` is a child of `Mage`, its coordinate system is relative
    to the `Mage`. To have it perfectly positioned over the `Mage`, change the `0`.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `Canvas` is significantly bigger than the `Mage`. Make the size more reasonable
    by changing the `1`.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have the `Canvas` scaled and positioned in the scene around the
    `Mage`, we can add UI elements to it. Right-click on `Canvas` in the Hierarchy
    and create a UI Button. Name the new Button `Alert`.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Resize `Alert` to match the `Canvas` by setting its **Rect Transform** component’s
    stretch and anchor to stretch fully across the Canvas.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the `Alert` Button’s `Knob` image. It looks better as a circle than
    as the default button sprite:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.14: Selecting the UI Knob image](img/B18327_16_14.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.14: Selecting the UI Knob image'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: Change the `Text` child of `Alert` to display an exclamation point instead of
    `Button`.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Button’s text is not currently visible. To fix this, change the `1000`.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move the `Alert` Button so that it is positioned over the `Mage`’s head.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.15: Moving the exclamation point over the Mage’s head](img/B18327_16_15.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.15: Moving the exclamation point over the Mage’s head'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: Add a `Alert` Button.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the `0` and set both the `False`.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Give the `Alert` Button an `ShowTheDialogBox()` function on the `MageInteractions`
    script attached to the `Mage`:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.16: The On Click() event of the Alert Button](img/B18327_16_16.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.16: The On Click() event of the Alert Button'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on `Canvas` in the Hierarchy and create a UI Text object. Name the
    new Text object `Dialog`.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Resize the `Dialog` object to match the `Canvas` by setting its `Canvas`.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the `Dialog` object to say `Thanks!!!`. Also, center-align the text and
    set the **Horizontal Overflow** property to **Overflow**.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Move the `Dialog` object so that it is positioned above the head of the `Mage`,
    like so:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.17: The Dialog box](img/B18327_16_17.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.17: The Dialog box'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: Add a `Dialog` Text object.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the `0` and set both the `False`.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `Mage` and add `Alert` to the `Dialog` to the **The Dialog** **Box**
    property.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you play the game, you’ll see the exclamation point Button appear after 3
    seconds. Clicking on the Button will make the Text appear. Try moving the Mage
    character around in the scene. You’ll see that no matter where he is, the exclamation
    point Button and Text appear over his head. This is a really helpful technique
    for creating UI elements that stay with moving characters.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: I know that the example is a bit boring the way it is now, but I recommend using
    some of the techniques discussed in the previous two chapters to add a nice bouncy
    animation to the exclamation point and have the Text fade in and out.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: 3D hovering health bars
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Making World Space UI in a 3D scene takes a little more work than making World
    Space UI in a 2D scene if the camera can be rotated and moved throughout the 3D
    space. If the camera can move and rotate, the UI likely needs to constantly *face*
    the camera. Otherwise, the player will not be able to see the UI elements.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: For this example, we will once again create a new scene. For you to not have
    to build the scene from scratch, we will start with an Asset package that includes
    all the required items.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll create a simple hovering health bar that constantly faces the camera.
    It will also receive clicks so that we can watch the health bar reduce:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.18: Astronaut with a hovering health bar](img/B18327_16_18.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.18: Astronaut with a hovering health bar'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: The art used in this example was accessed from [https://opengameart.org/content/space-kit](https://opengameart.org/content/space-kit).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a health bar that always faces the camera and receives player-click
    input, complete the following steps:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: Import the `Chapter 16` `– Example 2 - Start.unitypackage` package. This package
    contains a scene with a 3D character facing the camera. The camera has a simple
    `RotatingCamera` script attached to it that rotates the camera around the astronaut
    with the mouse. The package also contains a `ReduceHealth` script that is attached
    to the `astronaut` character. This script has a function, `ReduceHealthBar`, that
    we will call when the health bar above the character’s head is clicked on.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We want the health bar to be tied to the position of the astronaut within the
    scene. Therefore, we will create a Canvas that is a child of the astronaut in
    World Space.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the `astronaut` in the Hierarchy and add a UI Canvas as a child
    of the `astronaut`.
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select the newly created `Canvas` and change the **Render Mode** on the **Canvas**
    component to **World Space**.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assign the `Camera` to the **Event** **Camera** slot.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since this `Canvas` is a child of `astronaut`, its coordinate system is relative
    to `astronaut`. To have it perfectly positioned over the `astronaut`, change the
    `0`.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `Canvas` is significantly bigger than the `astronaut`. Make the size more
    reasonable by changing the `10` and the `1`.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Position the Canvas so that it is above the head of the astronaut:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.19: Scaling the Canvas over the astronaut](img/B18327_16_19.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.19: Scaling the Canvas over the astronaut'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the `Canvas` scaled and positioned in the scene around the
    astronaut, we can add UI elements to it. Right-click on `Canvas` in the Hierarchy
    and create a UI Button. Name the new button `Health Bar`.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Resize the `Health Bar` to match the `Canvas` by setting its `Canvas`.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the `Health Bar` to **None** to give it a white rectangle as an image.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.20: Adding a blank image to the Button](img/B18327_16_20.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.20: Adding a blank image to the Button'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: Change the `Text` child of `Health Bar` to say `Click to reduce` `my health`.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set both the `Text` child to **Overflow**. This will allow you to see the size
    the text is currently rendering at in the scene:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.21: The oversized text of the Health Bar](img/B18327_16_21.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.21: The oversized text of the Health Bar'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: Set the `10` and deselect **Raycast Target** on the **Text** component.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the `Canvas` and hover over the **Dynamic Pixels Per Unit** property
    in the **Canvas Scaler** component until you see two arrows appear around your
    mouse cursor. Once you see those arrows, click, and drag to the right. This makes
    the property work like a slider, allowing you to see how increasing the **Dynamic
    Pixels Per Unit** property continuously changes the way the text renders in the
    scene. Do this until the text fits within the Canvas:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.22: The oversized text of the Health Bar](img/B18327_16_22.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.22: The oversized text of the Health Bar'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: When trying to get the text to look nice in 3D space, if only changing the **Dynamic
    Pixels Per Unit Size** results in *choppy* text, change the property until the
    text looks perfectly crisp in the scene. Then, use a combination of changing the
    **Rect Transform** component’s **Scale** and **Font Size** of the Text object
    to find the *sweet spot*.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `Health Bar` Button and add a UI Image as a child. Name the
    new Image `Health Fill`.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Resize `Health Fill` to match the Canvas `Health Bar` by setting its `Health
    Bar`.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, change the anchor and pivot to **left** **stretch** so that it will scale
    *leftward*.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.23: Left-stretching anchor](img/B18327_16_23.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.23: Left-stretching anchor'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: Reposition the `Health Bar` in the Hierarchy so that it is above `Text`. This
    will have the fill render behind the `Text` object.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.24: The Hierarchy of GameObjects](img/B18327_16_24.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.24: The Hierarchy of GameObjects'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: On the `Health Fill`, change the **Color** property to red and deselect the
    **Raycast** **Target** property.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the astronaut and assign the `Health Fill` object to the `ReduceHealth`
    component.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add an `Health Bar` Button that calls the `ReduceHealthBar` function of the
    `ReduceHealth` script on the astronaut:![Figure 16.25: The OnClick() event of
    the Health Bar](img/B18327_16_25.jpg)'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 16.25: The OnClick() event of the Health Bar'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Playing the game now should result in the `Health Fill` reducing its fill value
    when you click on the `Health` `Bar` Button:'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 16.26: The Health Bar button reducing](img/B18327_16_26.jpg)'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 16.26: The Health Bar button reducing'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, we just need to add a billboard effect to the `Canvas`. Create a new script
    called `BillboardPlane` in the `Assets/Scripts` folder.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the script of the `BillboardPlane` class to the following:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Attach the `BillboardPlane` script to the Canvas.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assign the `Camera` to the `BillboardPlane` component.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you play the game now, you’ll see that as you move the camera around, the
    health bar always faces the `Camera`. Try changing the `LookAt()` function work
    more drastically.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您现在玩游戏，您会看到当您移动相机时，生命条总是面向`Camera`。尝试更改`LookAt()`函数以产生更剧烈的效果。
- en: Summary
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: '**World Space** UI is not significantly different in its implementation than
    UI that renders in the Camera or Screen Space. Adding UI to your World Space gives
    you the ability to create cool effects and gives you more control over your UI’s
    position relative to objects in the scene.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '**世界空间** UI在实现上与在相机或屏幕空间中渲染的UI没有显著区别。将UI添加到世界空间中，您将能够创建酷炫的效果，并让您对UI相对于场景中对象的定位有更多控制。'
- en: In the next chapter, we will discuss how to optimize Unity UI.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论如何优化Unity UI。
