["```cs\n    using UnityEngine;\n     using System.Collections;\n\n     public class BasicController: MonoBehaviour {\n       private Animator anim;\n       private CharacterController controller;\n       public float transitionTime = .25f;\n       private float speedLimit = 1.0f;\n       public bool moveDiagonally = true;\n       public bool mouseRotate = true;\n       public bool keyboardRotate = false;\n\n       void Start () {\n         controller = GetComponent<CharacterController>();\n         anim = GetComponent<Animator>();\n       }\n\n       void Update () {\n         if(controller.isGrounded){\n           if (Input.GetKey (KeyCode.RightShift) ||Input.GetKey (KeyCode.LeftShift))\n             speedLimit = 0.5f;\n           else\n             speedLimit = 1.0f;\n\n           float h = Input.GetAxis(\"Horizontal\");\n           float v = Input.GetAxis(\"Vertical\");\n           float xSpeed = h * speedLimit;\n           float zSpeed = v * speedLimit;\n           float speed = Mathf.Sqrt(h*h+v*v);\n\n           if(v!=0 && !moveDiagonally)\n             xSpeed = 0;\n\n           if(v!=0 && keyboardRotate)\n             this.transform.Rotate(Vector3.up * h, Space.World);\n\n           if(mouseRotate)\n             this.transform.Rotate(Vector3.up * (Input.GetAxis(\"Mouse X\")) * Mathf.Sign(v), \n                                                                             Space.World);\n\n           anim.SetFloat(\"zSpeed\", zSpeed, transitionTime, Time.deltaTime);\n           anim.SetFloat(\"xSpeed\", xSpeed, transitionTime, Time.deltaTime);\n           anim.SetFloat(\"Speed\", speed, transitionTime, Time.deltaTime);\n         }\n       }\n     }\n```", "```cs\nif(Input.GetKeyDown(KeyCode.F)){\n    anim.SetBool(\"Grenade\", true);\n} else {\n    anim.SetBool(\"Grenade\", false);\n}\n\nif(Input.GetButtonDown(\"Fire1\")){\n    anim.SetBool(\"Fire\", true);\n}\n\nif(Input.GetButtonUp(\"Fire1\")){\n    anim.SetBool(\"Fire\", false);\n}\n```", "```cs\nif(Input.GetKey(KeyCode.Q)){\n    anim.SetBool(\"TurnLeft\", true);\n    transform.Rotate(Vector3.up * (Time.deltaTime * -45.0f),  Space.World);\n} else {\n    anim.SetBool(\"TurnLeft\", false);\n}\n\nif(Input.GetKey(KeyCode.E)){\n    anim.SetBool(\"TurnRight\", true);\n    transform.Rotate(Vector3.up * (Time.deltaTime * 45.0f), Space.World);\n} else {\n    anim.SetBool(\"TurnRight\", false);\n}\n```", "```cs\npublic float jumpHeight = 3f;\nprivate float verticalSpeed = 0f;\nprivate float xVelocity = 0f;\nprivate float zVelocity = 0f;\n```", "```cs\nif (Input.GetKey (KeyCode.Space)) {\n   anim.SetTrigger(\"Jump\");\n   verticalSpeed = jumpHeight;\n}\n```", "```cs\n      void OnAnimatorMove(){\n         Vector3 deltaPosition = anim.deltaPosition;\n         if (controller.isGrounded) {\n           xVelocity = controller.velocity.x;\n           zVelocity = controller.velocity.z;\n         } else {\n           deltaPosition.x = xVelocity * Time.deltaTime;\n           deltaPosition.z = zVelocity * Time.deltaTime;\n           anim.SetBool (\"Jump\", false);\n         }\n         deltaPosition.y = verticalSpeed * Time.deltaTime;\n         controller.Move (deltaPosition);\n         verticalSpeed += Physics.gravity.y * Time.deltaTime;\n         if ((controller.collisionFlags & CollisionFlags.Below)  != 0) {\n           verticalSpeed = 0;\n         }\n       }\n```", "```cs\n    using UnityEngine;\n     using System.Collections;\n\n     public class PropManager : MonoBehaviour  {\n         public GameObject prop;\n         public Transform targetBone;\n         public Vector3 positionOffset;\n         public Vector3 rotationOffset;\n         public bool destroyTrigger = true;\n\n         void OnTriggerEnter(Collider collision) {\n             bool addPropCondition = targetBone.IsChildOf(collision.transform) & !AlreadyHalreadyHasChildObject();\n\n             if (addPropCondition)\n                 AddProp();\n         }\n\n         private void AddProp() {\n             GameObject newprop;\n             newprop = Instantiate(prop, targetBone.position,  \n             targetBone.rotation) as GameObject;\n             newprop.name = prop.name;\n             newprop.transform.parent = targetBone;\n             newprop.transform.localPosition += positionOffset;\n             newprop.transform.localEulerAngles += rotationOffset;\n\n             if(destroyTrigger)\n                 Destroy(gameObject);\n         }\n\n         private bool AlreadyHalreadyHasChildObject() {\n             string propName = prop.name;\n\n             foreach(Transform child in targetBone){\n                 if (child.name == propName)\n                     return true;\n             }\n\n             return false;\n         }\n     }\n```", "```cs\n    private void RemoveProp() {\n         string propName = prop.name;\n\n         foreach(Transform child in targetBone){\n             if (child.name == propName)\n                 Destroy (child.gameObject);\n         }\n     }\n```", "```cs\nusing UnityEngine;\n\n public class PropManager : MonoBehaviour {\n      public GameObject propObject;\n\n     void OnTriggerEnter(Collider hit) {\n         if (hit.CompareTag(\"Player\")) {\n             propObject.SetActive(true);\n             Destroy(gameObject);\n         }\n     }\n }\n```", "```cs\n    using UnityEngine;\n     using System.Collections;\n\n     public class ThrowObject : MonoBehaviour {\n       public GameObject prop;\n       private GameObject proj;\n       public Vector3 posOffset;\n       public Vector3 force;\n       public Transform hand;\n       public float compensationYAngle = 0f;\n\n       public void Prepare () {\n\n         proj = Instantiate(prop, hand.position, hand.rotation) as GameObject;\n         if(proj.GetComponent<Rigidbody>())\n           Destroy(proj.GetComponent<Rigidbody>());\n         proj.GetComponent<SphereCollider>().enabled = false;\n         proj.name = \"projectile\";\n         proj.transform.parent = hand;\n         proj.transform.localPosition = posOffset;\n         proj.transform.localEulerAngles = Vector3.zero;\n       }\n\n       public void Throw () {\n\n         Vector3 dir = transform.rotation.eulerAngles;\n         dir.y += compensationYAngle;\n         proj.transform.rotation = Quaternion.Euler(dir);\n         proj.transform.parent = null;\n         proj.GetComponent<SphereCollider>().enabled = true;\n         Rigidbody rig = proj.AddComponent<Rigidbody>();\n         Collider projCollider = proj.GetComponent<Collider> ();\n         Collider col = GetComponent<Collider> ();\n         Physics.IgnoreCollision(projCollider, col);\n         rig.AddRelativeForce(force);\n       }\n     }\n```", "```cs\n    using UnityEngine;\n     using System.Collections;\n\n     public class RagdollCharacter : MonoBehaviour {\n         private Transform spawnPoint;\n\n         void Start () {\n             spawnPoint = GameObject.Find(\"Spawnpoint\").transform;\n             DeactivateRagdoll();\n         }\n\n         public void ActivateRagdoll() {\n             gameObject.GetComponent<CharacterController> ().enabled = false;\n             SetActiveRagdoll(true);\n             StartCoroutine (Restore ());\n         }\n\n         public void DeactivateRagdoll() {\n             SetActiveRagdoll(false);\n             RespawnPlayer();\n             gameObject.GetComponent<CharacterController>().enabled = true;\n         }\n\n         IEnumerator Restore() {\n             yield return new WaitForSeconds(5);\n             DeactivateRagdoll();\n         }\n\n         public void SetActiveRagdoll(bool isActive) {\n             gameObject.GetComponent<CharacterController> ().enabled = !isActive;\n             gameObject.GetComponent<BasicController> ().enabled = !isActive;\n             gameObject.GetComponent<Animator> ().enabled = !isActive;\n\n             foreach (Rigidbody bone in GetComponentsInChildren<Rigidbody>()) {\n                 bone.isKinematic = !isActive;\n                 bone.detectCollisions = isActive;\n             }\n\n             foreach (CharacterJoint joint in GetComponentsInChildren<CharacterJoint>()) {\n                 joint.enableProjection = isActive;\n             }\n\n             foreach (Collider col in GetComponentsInChildren<Collider>()) {\n                 col.enabled = isActive;\n             }\n         }\n\n         private void RespawnPlayer() {\n             transform.position = spawnPoint.position;\n             transform.rotation = spawnPoint.rotation;\n         }\n     }\n```", "```cs\n    using UnityEngine;\n\n     public class DeadlyObject : MonoBehaviour {\n         public float range = 2f;\n         public float force = 2f;\n         public float up = 4f;\n\n         void OnTriggerEnter(Collider hit) {\n             if (hit.CompareTag(\"Player\")) {\n                 RagdollCharacter ragdollCharacter = hit.gameObject.GetComponent<RagdollCharacter>();\n                 ExplodePlayer(ragdollCharacter);\n                 Destroy(gameObject);\n             }\n         }\n\n         private void ExplodePlayer(RagdollCharacter ragdollCharacter) {\n             ragdollCharacter.ActivateRagdoll();\n             Vector3 explosionPos = transform.position;\n             Collider[] colliders = Physics.OverlapSphere(explosionPos, range);\n\n             foreach (Collider collider in colliders) {\n                 if (collider.GetComponent<Rigidbody>())\n                     collider.GetComponent<Rigidbody>().AddExplosionForce(force, explosionPos, range, up);\n             }\n         }\n     }\n```", "```cs\n    using UnityEngine;\n     using System.Collections;\n\n     public class MouseAim: MonoBehaviour  {\n         public Transform spine;\n         public Transform weapon;\n         public GameObject crosshairImage;\n         public Vector2 xLimit = new Vector2(-30f, 30f);\n         public Vector2 yLimit= new Vector2(-30f, 30f);\n         private float xAxis = 0f;\n         private float yAxis = 0f;\n\n         public void LateUpdate() {\n             RotateSpine();\n             ShowCrosshairIfRaycastHit();\n         }\n\n         private void RotateSpine() {\n             yAxis += Input.GetAxis(\"Mouse X\");\n             yAxis = Mathf.Clamp(yAxis, yLimit.x, yLimit.y);\n             xAxis -= Input.GetAxis(\"Mouse Y\");\n             xAxis = Mathf.Clamp(xAxis, xLimit.x, xLimit.y);\n             Vector3 newSpineRotation = new Vector3(xAxis, yAxis, spine.localEulerAngles.z);\n             spine.localEulerAngles = newSpineRotation;\n         }\n\n         private void ShowCrosshairIfRaycastHit() {\n             Vector3 weaponForwardDirection = weapon.TransformDirection(Vector3.forward);\n             RaycastHit hit;\n             Vector3 fromPosition = weapon.position + Vector3.one;\n             if (Physics.Raycast (fromPosition, weaponForwardDirection, out hit)) {\n                 Vector3 hitLocation =  Camera.main.WorldToScreenPoint(hit.point);\n                 DisplayPointerImage(hitLocation);\n             } else\n                 crosshairImage.SetActive(false);\n         }\n\n         private void DisplayPointerImage(Vector3 hitLocation) {\n             crosshairImage.transform.position = hitLocation;\n             crosshairImage.SetActive(true);\n         }\n     }\n```"]