- en: Chapter 3. Initial Setup – Creating the BaseApp
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 3 章。初始设置——创建 BaseApp
- en: In this chapter, we are going to create a Hello World application from scratch.
    The application will be called BaseApp and we will use it's structure as a starting
    point in further chapters.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将从头开始创建一个 Hello World 应用程序。该应用程序将被命名为 BaseApp，我们将在后续章节中使用其结构作为起点。
- en: 'This chapter will cover the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下内容：
- en: Setting up a project with TinderBox
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 TinderBox 设置项目
- en: Setting up a project from scratch on Mac OS X (Xcode 3 and 4+)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Mac OS X（Xcode 3 和 4+）上从头开始设置项目
- en: Setting up a project from scratch on Windows
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Windows 上从头开始设置项目
- en: It does not have much in common with the BasicApp from the previous chapter
    except the basic structure, which will be common to all Cinder projects.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 它与上一章的 BasicApp 没有多少共同之处，除了基本结构，这将是所有 Cinder 项目的共同点。
- en: TinderBox
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TinderBox
- en: The easiest way to create a Cinder project is to use its integrated tool called
    **TinderBox**. You can find it in the `cinder/tools/` directory. This will work
    with both Mac OS X and Windows.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 Cinder 项目的最简单方法是使用其集成工具 **TinderBox**。你可以在 `cinder/tools/` 目录中找到它。这将与 Mac
    OS X 和 Windows 一起工作。
- en: Let's give it a try. Open TinderBox application. If you are doing it for the
    first time, you will have to point to your Cinder directory.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试一试。打开 TinderBox 应用程序。如果你是第一次做，你将需要指向你的 Cinder 目录。
- en: '![TinderBox](img/9564_03_01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![TinderBox](img/9564_03_01.jpg)'
- en: When you've done that, the TinderBox project setup window will appear. Choose
    **Basic App** from the **Target** and **OpenGL** from the **Template** drop-down
    lists. Enter `BaseApp` in the **Project Name** field. Make sure that you have
    **Base** in the **Naming Prefix** field.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些后，TinderBox 项目设置窗口将出现。从 **Target** 列表中选择 **Basic App**，从 **Template** 下拉列表中选择
    **OpenGL**。在 **Project Name** 字段中输入 `BaseApp`。确保你在 **Naming Prefix** 字段中有 **Base**。
- en: Note
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For those who use Cinder 0.8.5, there is no **Target** list in the new TinderBox.
    You have to choose the **Basic OpenGL** template. Also, there is no **Naming Prefix**
    field in the new TinderBox, so just ignore it.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用 Cinder 0.8.5 的人来说，在新的 TinderBox 中没有 **Target** 列表。你必须选择 **Basic OpenGL**
    模板。此外，在新的 TinderBox 中没有 **Naming Prefix** 字段，所以请忽略它。
- en: Choose a directory where you will store your Cinder projects in the **Location**
    field. Mine is `/Users/kr15h/Documents/CinderProjects/` (`C:\Users\kr15h\Documents\CinderProjects\`
    on Windows).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **Location** 字段中选择一个目录，用于存储你的 Cinder 项目。我的目录是 `/Users/kr15h/Documents/CinderProjects/`（在
    Windows 上为 `C:\Users\kr15h\Documents\CinderProjects\`）。
- en: Leave **HEAD** in the **Cinder Version** field and choose **Xcode** in the **Compilers**
    section. Choose **Visual C++ 2010** if you're using Windows or both if you plan
    to develop using both operating systems.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **Cinder Version** 字段中保留 **HEAD**，并在 **Compilers** 部分选择 **Xcode**。如果你使用 Windows
    或计划在两个操作系统上开发，请选择 **Visual C++ 2010**。
- en: Click on **Create**!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **Create**！
- en: Your project is ready! Navigate to your Cinder project's folder that you specified
    in the **Location** field and you'll find a folder called `BaseApp` there. You
    will find an Xcode project file in the `xcode` directory (Visual C++ 2010 project
    file in the `vc10` directory on Windows).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你的项目已经准备好了！导航到你在 **Location** 字段中指定的 Cinder 项目文件夹，你将找到一个名为 `BaseApp` 的文件夹。你将在
    `xcode` 目录中找到一个 Xcode 项目文件（在 Windows 的 `vc10` 目录中为 Visual C++ 2010 项目文件）。
- en: Open `BaseApp.xcodeproj` (`BaseApp.sln` on Windows).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `BaseApp.xcodeproj`（在 Windows 上为 `BaseApp.sln`）。
- en: 'Try to build and run it. You should see the output as shown in the following
    screenshot:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试构建并运行它。你应该看到以下截图所示的结果：
- en: '![TinderBox](img/9564_03_02.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![TinderBox](img/9564_03_02.jpg)'
- en: Nothing interesting is drawn in the window yet. We will make some changes a
    bit later, but if you are able to compile, run, and see this, you are the master!
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 窗口中还没有绘制出任何有趣的内容。我们稍后会做一些更改，但如果你能够编译、运行并看到这个，你就是大师了！
- en: Creating a project from scratch (Mac OS X)
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Mac OS X 上从头创建项目
- en: Some of us just want to do it the difficult way, which is not so difficult actually,
    but involves certain steps that have to be remembered and understood. What if
    there was no TinderBox? No problem!
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们中的一些人只想用困难的方式来做，实际上并不难，但涉及一些必须记住和理解的操作步骤。如果没有 TinderBox 会怎样？没问题！
- en: Here we will split up in two groups again—this time depending on the version
    of Xcode we are using. There is the old way (Xcode 3) and the new way (Xcode 4+).
    You can check the version by opening the Xcode and selecting **AboutXcode** from
    the **Xcode** menu.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们将再次分成两组——这次是根据我们使用的 Xcode 版本来分。有旧的方式（Xcode 3）和新方式（Xcode 4+）。你可以通过打开 Xcode
    并从 **Xcode** 菜单中选择 **AboutXcode** 来检查版本。
- en: Note
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you are using Cinder 0.8.5, be aware of the fact that the minimum required
    Mac OS X version is 10.7 and you do need Xcode 4.4+.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用Cinder 0.8.5，请注意最低要求的Mac OS X版本是10.7，并且你需要Xcode 4.4+。
- en: Basic project setup (Xcode 3)
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本项目设置（Xcode 3）
- en: 'Go to your Cinder project''s directory, which in my case is `/Users/kr15h/Documents/CinderProjects/`.
    Create an empty directory for our new project and name it `BaseApp`. Create another
    directory inside it and call it `src`. It should look like the one shown in the
    following screenshot:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 前往你的Cinder项目目录，在我的例子中是`/Users/kr15h/Documents/CinderProjects/`。为我们的新项目创建一个空目录并命名为`BaseApp`。在其内部创建另一个目录并命名为`src`。它应该看起来像以下截图所示：
- en: '![Basic project setup (Xcode 3)](img/9564_03_03.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![基本项目设置（Xcode 3）](img/9564_03_03.jpg)'
- en: Open up the Xcode and select **New Project** from the **File** menu. Select
    the **Mac OS X Application** category and choose **Cocoa Application**. Click
    on **Choose**, browse to the directory we created earlier (`CinderProjects/BaseApp`),
    and then click on **Save**.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 打开Xcode并从**文件**菜单中选择**新建项目**。选择**Mac OS X应用程序**类别并选择**Cocoa应用程序**。点击**选择**，浏览到我们之前创建的目录（`CinderProjects/BaseApp`），然后点击**保存**。
- en: Now it is recommended to close the Xcode, browse to your newly created project
    directory, and rename the Xcode project folder (`BaseApp` inside BaseApp—the one
    that is parent to the .`xcodeproj` file) to `xcode`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在建议关闭Xcode，浏览到你的新创建的项目目录，并将Xcode项目文件夹（BaseApp中的BaseApp——即`.xcodeproj`文件的父文件夹）重命名为`xcode`。
- en: '![Basic project setup (Xcode 3)](img/9564_03_04.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![基本项目设置（Xcode 3）](img/9564_03_04.jpg)'
- en: Now open up the `BaseApp.xcodeproj` file. We have to remove some files that
    we won't need. These files include `main.m`, `InfoPlist.strings`, `MainMenu.xib`
    as well as `BaseAppAppDelegate.m` and `BaseAppAppDelegate.h`. Click on **Also
    Move to Trash** when prompted.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在打开`BaseApp.xcodeproj`文件。我们必须删除我们不需要的一些文件。这些文件包括`main.m`、`InfoPlist.strings`、`MainMenu.xib`以及`BaseAppAppDelegate.m`和`BaseAppAppDelegate.h`。当被提示时，点击**也移动到废纸篓**。
- en: Let's create our first source file. Right-click on the **Classes** folder in
    the **Xcode Project Navigator** pane and select **Add** | **New File**. Choose
    **C++ File** from the **C and C++** category. Name it `BaseApp` and uncheck the
    **Also create "BaseApp.h"** option. For the location, choose the `BaseApp/src`
    folder that we created earlier and click on **Finish**.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建我们的第一个源文件。在**Xcode项目导航器**面板中右键点击**Classes**文件夹，然后选择**添加** | **新建文件**。从**C和C++**类别中选择**C++文件**。将其命名为`BaseApp`并取消选择**也创建"BaseApp.h"**选项。对于位置，选择我们之前创建的`BaseApp/src`文件夹，然后点击**完成**。
- en: Basic project setup (Xcode 4+)
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本项目设置（Xcode 4+）
- en: Open up Xcode and select **New** | **New Project** from the **File** menu. Select
    the **Application** item under the **Mac OS X** category and choose **Cocoa Application**.
    Click on **Next**. Enter `BaseApp` as **Product Name** and something, for example,
    `com.mycompany` as **Company Identifier**. Click on **Next** again and you will
    be prompted to choose the location for your project. Browse to the directory we
    created earlier (`CinderProjects/BaseApp`) and click on **Create**.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 打开Xcode并从**文件**菜单中选择**新建** | **新建项目**。在**Mac OS X**类别下选择**应用程序**项并选择**Cocoa应用程序**。点击**下一步**。将**产品名称**输入为`BaseApp`，例如，将**公司标识符**输入为`com.mycompany`。再次点击**下一步**，你将被提示选择项目位置。浏览到我们之前创建的目录（`CinderProjects/BaseApp`）并点击**创建**。
- en: Close the Xcode (completely by pressing *Cmd* + *Q*) and navigate yourself to
    the BaseApp project directory. You can see two folders there, `BaseApp` and `src`.
    Rename `BaseApp` to `xcode`—all the Xcode-relevant stuff will be stored there
    and all the code that will be stored in the `src` directory is meant to be used
    in every other IDE. This is not a law, it is just how Cinder sample projects are
    being organized and that's a good way of keeping a cross-platform code project
    well organized. This is done to avoid the need to create a separate version of
    the source files for each platform and IDE.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭Xcode（通过按*Cmd* + *Q*完全关闭）并导航到BaseApp项目目录。你可以看到那里有两个文件夹，`BaseApp`和`src`。将`BaseApp`重命名为`xcode`——所有与Xcode相关的文件都将存储在那里，而所有存储在`src`目录中的代码都打算在其他任何IDE中使用。这不是法律，这只是Cinder示例项目的组织方式，这也是保持跨平台代码项目良好组织的好方法。这样做是为了避免为每个平台和IDE创建源文件的单独版本。
- en: Open the `BaseApp.xcodeproj` Xcode project file. We are going to remove some
    files that we won't need. In the Project Navigator, under the **BaseApp** folder,
    select and delete `AppDelegate.h`, `AppDelegate.m`, and `MainMenu.xib`. Click
    on **Delete** when prompted to remove the actual files, not just the references.
    Under the **Supporting files** folder, select and remove `main.m` and `BaseApp-Prefix.pch`.
    Click on **Delete** again when prompted.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `BaseApp.xcodeproj` Xcode 项目文件。我们将移除一些我们不需要的文件。在项目导航器中，在 **BaseApp** 文件夹下，选择并删除
    `AppDelegate.h`、`AppDelegate.m` 和 `MainMenu.xib`。当提示删除实际文件时，点击 **删除**，而不是仅仅删除引用。在
    **支持文件** 文件夹下，选择并删除 `main.m` 和 `BaseApp-Prefix.pch`。当提示时，再次点击 **删除**。
- en: Let's create our first C++ source file. Right-click on the **BaseApp** folder
    in the Project Navigator and choose the **New File** option. Select **C++ File**
    under the **Mac OS X** and **C and C++** categories. A **Save As** dialog will
    appear. Navigate to the `src` directory of our `BaseApp` project (`BaseApp/src`).
    Name the file as `BaseApp` and click on **Create**.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建我们的第一个 C++ 源文件。在项目导航器中的 **BaseApp** 文件夹上右键单击，并选择 **新建文件** 选项。在 **Mac OS
    X** 和 **C 和 C++** 类别下选择 **C++ 文件**。将出现一个 **另存为** 对话框。导航到我们 `BaseApp` 项目的 `src`
    目录 (`BaseApp/src`)。将文件命名为 `BaseApp` 并点击 **创建**。
- en: Adding code (Xcode 3 and 4+)
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加代码 (Xcode 3 和 4+)
- en: 'Open the file we just created (`BaseApp.cpp`) in the editor and enter the following
    piece of code:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在编辑器中打开我们刚刚创建的文件 (`BaseApp.cpp`) 并输入以下代码：
- en: '[PRE0]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you try to compile and run the application, you will see that it is not possible.
    Some things are still missing and those are the connections with Cinder libraries
    and headers.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尝试编译和运行应用程序，您将看到这是不可能的。还有一些东西仍然缺失，那就是与 Cinder 库和头文件的连接。
- en: Connecting to Cinder (Xcode 3)
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接到 Cinder (Xcode 3)
- en: Under the **Project** menu, select **Edit Project Settings**. Go to the **Build**
    tab and in the **Configuration** select field, choose **All Configurations**.
    Let's add a user-defined build setting that will prove itself useful in a moment.
    This user-defined setting will store the location of the Cinder directory relative
    to our project. Click on the little gear button at the bottom-left corner of the
    **Project Settings** window and choose **Add User-Defined Setting**.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **项目** 菜单下，选择 **编辑项目设置**。转到 **构建** 选项卡，在 **配置** 选择字段中，选择 **所有配置**。让我们添加一个用户定义的构建设置，这将很快证明其有用。这个用户定义的设置将存储
    Cinder 目录相对于我们项目的位置。点击 **项目设置** 窗口左下角的齿轮按钮，并选择 **添加用户定义设置**。
- en: '![Connecting to Cinder (Xcode 3)](img/9564_03_06.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![连接到 Cinder (Xcode 3)](img/9564_03_06.jpg)'
- en: Name it as `CINDER_PATH` and set the value to the location of Cinder directory
    /`Users/You/cinder` (replace `You` with your username).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 将其命名为 `CINDER_PATH` 并将其值设置为 Cinder 目录的位置 /`Users/You/cinder`（将 `You` 替换为您的用户名）。
- en: Now we have to make use of this newly created variable. Scroll to the **Search
    Paths** section and modify the **User Header Search Paths** setting. Set the value
    to `$(CINDER_PATH)/include`. With that done, go to **Header Search Paths** (notice
    that there is no user in front of it) and set it to `$(CINDER_PATH)/boost`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们必须利用这个新创建的变量。滚动到 **搜索路径** 部分，并修改 **用户头文件搜索路径** 设置。将值设置为 `$(CINDER_PATH)/include`。完成此操作后，转到
    **头文件搜索路径**（注意其前面没有用户），并将其设置为 `$(CINDER_PATH)/boost`。
- en: Then go to the **Architectures** section and set the **Architectures** variable
    to `i386`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 然后转到 **架构** 部分，将 **架构** 变量设置为 `i386`。
- en: Next, we have to tell Xcode where to find Cinder libraries for linking. Find
    the **Linking** section and change the **Debug** field under **Other Linker Flags**
    to `$(CINDER_PATH)/lib/libcinder_d.a` and the **Release** field to `$(CINDER_PATH)/lib/libcinder.a`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们必须告诉 Xcode Cinder 库的位置以便链接。找到 **链接** 部分，并将 **其他链接器标志** 下的 **调试** 字段更改为
    `$(CINDER_PATH)/lib/libcinder_d.a`，并将 **发布** 字段更改为 `$(CINDER_PATH)/lib/libcinder.a`。
- en: 'Now for the final thing. We need to add Mac OS X frameworks that are needed
    for our Cinder applications. Close the **Project Settings** panel and right-click
    on the **Frameworks** folder in the Xcode Project Navigator and go to **Add**
    | **Existing Frameworks**. Then, select the following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是最后一件事。我们需要添加 Mac OS X 框架，这些框架对于我们的 Cinder 应用程序是必需的。关闭 **项目设置** 面板，在 Xcode
    项目导航器中的 **框架** 文件夹上右键单击，选择 **添加** | **现有框架**。然后，选择以下内容：
- en: '`Accelerate.framework`'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Accelerate.framework`'
- en: '`AudioToolbox.framework`'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AudioToolbox.framework`'
- en: '`AudioUnit.framework`'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AudioUnit.framework`'
- en: '`CoreAudio.framework`'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CoreAudio.framework`'
- en: '`CoreVideo.framework`'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CoreVideo.framework`'
- en: '`OpenGL.framework`'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OpenGL.framework`'
- en: '`QTKit.framework`'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QTKit.framework`'
- en: '`QuickTime.framework`'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QuickTime.framework`'
- en: Compile and run the project. Success! Now, you are ready to go to the *Final
    Adjustments* section of this chapter.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 编译并运行项目。成功！现在，你可以前往本章的*最终调整*部分。
- en: Connecting to Cinder (Xcode 4+)
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接到Cinder（Xcode 4+）
- en: 'Follow these steps to create a user-defined variable with the path to our main
    Cinder location:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建一个带有我们主Cinder位置路径的用户定义变量：
- en: Select the **BaseApp** project icon in the Xcode Project Navigator pane.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Xcode项目导航器面板中选择**BaseApp**项目图标。
- en: Choose the **BaseApp** target under the **Targets** category.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**目标**类别下选择**BaseApp**目标。
- en: Make sure that we are making changes to all configurations (select **All** and
    **Combined**).
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保我们对所有配置都进行了更改（选择**所有**和**组合**）。
- en: Click on the **Add Build Setting** button and select **Add User-Defined Setting**
    from the menu.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加构建设置**按钮，然后从菜单中选择**添加用户定义设置**。
- en: Call it `CINDER_PATH` and enter the path to the place you copied your Cinder
    files.![Connecting to Cinder (Xcode 4+)](img/9564_03_07.jpg)
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 呼叫它`CINDER_PATH`，并输入你复制Cinder文件的位置的路径。![连接到Cinder（Xcode 4+）](img/9564_03_07.jpg)
- en: Now we have to make use of this newly created variable. Scroll to the **Search
    Paths** section and modify the **User Header Search Paths** setting. Set the value
    to `$(CINDER_PATH)/include`. With that done, go to **Header Search Paths** (notice
    that there is no user in front of it) and set it to `$(CINDER_PATH)/boost`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们必须使用这个新创建的变量。滚动到**搜索路径**部分，并修改**用户头文件搜索路径**设置。将值设置为`$(CINDER_PATH)/include`。完成此操作后，转到**头文件搜索路径**（注意其前面没有用户），并将其设置为`$(CINDER_PATH)/boost`。
- en: Then go to the **Architectures** section and set the **Architectures** variable
    to `i386`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 然后转到**架构**部分，并将**架构**变量设置为`i386`。
- en: Next, we have to tell Xcode where to find Cinder libraries for linking. Find
    the **Linking** section, and change the **Debug** field under **Other Linker Flags**
    to `$(CINDER_PATH)/lib/libcinder_d.a` and the **Release** field to `$(CINDER_PATH)/lib/libcinder.a`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们必须告诉Xcode在哪里可以找到用于链接的Cinder库。找到**链接**部分，并将**其他链接器标志**下的**调试**字段更改为`$(CINDER_PATH)/lib/libcinder_d.a`，将**发布**字段更改为`$(CINDER_PATH)/lib/libcinder.a`。
- en: There is another thing that Xcode added automatically for us, a link to the
    prefix header file that we deleted earlier. This will throw an error while compiling
    because the compiler won't be able to find the prefix header file. Go to the **Apple
    LLVM compiler 3.0 – Language** tab and clear out the **Prefix Header** field for
    both **Debug** and **Release**.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode还为我们自动添加了另一件事，一个链接到我们之前删除的前缀头文件。这将在编译时引发错误，因为编译器将无法找到前缀头文件。转到**Apple LLVM编译器3.0
    – 语言**选项卡，并为**调试**和**发布**清除**前缀头**字段。
- en: 'Finally, we have to link our application to the Mac OS X framework libraries.
    To do that, follow these steps:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们必须将我们的应用程序链接到Mac OS X框架库。为此，请按照以下步骤操作：
- en: Go to the **Build Phases** tab.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**构建阶段**选项卡。
- en: Expand the **Link Binary With Libraries** section.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开**链接二进制与库**部分。
- en: Click on the **Add Items** button to choose frameworks.![Connecting to Cinder
    (Xcode 4+)](img/9564_03_08.jpg)
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加项目**按钮以选择框架。![连接到Cinder（Xcode 4+）](img/9564_03_08.jpg)
- en: 'Select the following frameworks and click on **Add**:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 选择以下框架，然后点击**添加**：
- en: '`Accelerate.framework`'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Accelerate.framework`'
- en: '`AudioToolbox.framework`'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AudioToolbox.framework`'
- en: '`AudioUnit.framework`'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AudioUnit.framework`'
- en: '`CoreAudio.framework`'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CoreAudio.framework`'
- en: '`CoreVideo.framework`'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CoreVideo.framework`'
- en: '`OpenGL.framework`'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OpenGL.framework`'
- en: '`QTKit.framework`'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QTKit.framework`'
- en: '`QuickTime.framework`'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QuickTime.framework`'
- en: That's it! Compile and run the project. Success! Now, you are ready to go to
    the **Final Adjustments** section of this chapter.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！编译并运行项目。成功！现在，你可以前往本章的**最终调整**部分。
- en: Creating a project from scratch (Windows)
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从头创建项目（Windows）
- en: So you are on Windows, right? Let's create an empty project in Visual C++. We
    will link it to all the necessary libraries and make sure that it is possible
    to compile the project before we move on.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你是在Windows系统上，对吧？让我们在Visual C++中创建一个空项目。我们将将其链接到所有必要的库，并确保在继续之前可以编译该项目。
- en: Go to your Cinder project directory (which in my case is `C:\Users\kr15h\Documents\CinderProjects\`)
    and create a new directory `BaseApp` there.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 前往你的Cinder项目目录（在我的情况下是`C:\Users\kr15h\Documents\CinderProjects\`），并在其中创建一个新的目录`BaseApp`。
- en: Open Microsoft Visual C++ 2010 and go to **File** | **New** | **Project**. Choose
    **Win32 Project** from the **Win32** category. Enter the name `BaseApp` in the
    **Name** field and your BaseApp project directory that we just created in the
    **Location** field. Make sure that the **Create directory for solution** checkbox
    is not checked and the solution name is `BaseApp`—the same as the name of the
    project.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 打开Microsoft Visual C++ 2010，前往**文件** | **新建** | **项目**。从**Win32**类别中选择**Win32项目**。在**名称**字段中输入`BaseApp`，在**位置**字段中输入我们刚刚创建的BaseApp项目目录。确保**创建解决方案目录**复选框未选中，并且解决方案名称为`BaseApp`——与项目名称相同。
- en: In the **Application Settings** dialog, check the **Empty project** checkbox
    and make sure that you choose **Windows application** as the **Application** type.
    Click on **Finish**.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在**应用程序设置**对话框中，选中**空项目**复选框，并确保您选择**Windows应用程序**作为**应用程序**类型。点击**完成**。
- en: Close Visual C++ and go to the `BaseApp` project directory. You will see another
    directory with a name `BaseApp` inside it—rename it to `vc10`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭Visual C++并转到`BaseApp`项目目录。您将看到一个名为`BaseApp`的文件夹——将其重命名为`vc10`。
- en: 'Create a new directory in the same level where the `vc10` folder is and rename
    it to `src`. Open the `BaseApp.sln` file in the `vc10` folder. Create a new C++
    file. Choose **File** | **New** **File**. In the dialog box, choose the **Visual
    C++** template category and select **C++ File**. Click on **Open**. A blank file
    will open in the editor. Enter the following piece of code there:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在与`vc10`文件夹同一级别的目录中创建一个新的目录，并将其重命名为`src`。在`vc10`文件夹中打开`BaseApp.sln`文件。创建一个新的C++文件。选择**文件**
    | **新建文件**。在对话框中，选择**Visual C++**模板类别，并选择**C++文件**。点击**打开**。编辑器中将打开一个空白文件。在那里输入以下代码片段：
- en: '[PRE1]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Go to **File** | **Save As**, navigate to the `BaseApp\src` directory, and save
    the file with the name `BaseApp.cpp`. To keep things organized, navigate to the
    **BaseApp** folder in the Explorer and click-and-drag it to the **Source Files**
    directory in the Visual C++ 2010 Solution Explorer.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 前往**文件** | **另存为**，导航到`BaseApp\src`目录，并将文件命名为`BaseApp.cpp`。为了保持整洁，导航到资源管理器中的**BaseApp**文件夹，并将其拖放到Visual
    C++ 2010解决方案资源管理器中的**源文件**目录。
- en: You won't be able to compile and run it yet. There are some more things to do.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在还不能编译和运行它。还有一些其他事情要做。
- en: Go to **Project** | **BaseApp Properties**. Choose **All Configurations** in
    the **Configurations** select field.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 前往**项目** | **BaseApp属性**。在**配置**选择字段中选择**所有配置**。
- en: 'Click on the **C/C++** category in the left column and find the **Additional
    Include Directories** field in the right column. Add the following paths there:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧列中点击**C/C++**类别，然后在右侧列中找到**附加包含目录**字段。将以下路径添加到那里：
- en: '`C:\cinder\include`'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`C:\cinder\include`'
- en: '`C:\cinder\boost`'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`C:\cinder\boost`'
- en: 'Click on **Linker** in the left column and edit value of the **Additional Library
    Directories** field. You have to enter the following two paths there:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧列中点击**链接器**，并编辑**附加库目录**字段的值。您必须输入以下两个路径：
- en: '`C:\cinder\lib`'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`C:\cinder\lib`'
- en: '`C:\cinder\lib\msw`'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`C:\cinder\lib\msw`'
- en: Click on **OK**. Now select the **Debug** configuration and click on **Input**
    under **Linker** in the left column of the **Project Properties** window. Add
    `cinder_d.lib` to the **Additional Dependencies** field and `LIBCMT` in the **Ignore
    Specific Default Libraries** field.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**确定**。现在选择**调试**配置，并在**项目属性**窗口的左侧列中点击**链接器**下的**输入**。将`cinder_d.lib`添加到**附加依赖项**字段，并将`LIBCMT`添加到**忽略特定默认库**字段。
- en: With that done, select the **Release** configuration and add `cinder.lib` to
    the **Additional Dependencies** field.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些操作后，选择**发布**配置，并将`cinder.lib`添加到**附加依赖项**字段。
- en: Click on **OK**. Build and run the application. A window with a black background
    should appear. If so, you are the master and we may continue with the next section.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**确定**。构建并运行应用程序。一个黑色背景的窗口应该会出现。如果是这样，你就是大师，我们可以继续下一部分。
- en: Final adjustments
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最终调整
- en: No matter what kind of setup you choose, you'll have to edit one single file
    that is located in the same place relative to the project directory and whose
    name is the same in all configurations, `src/BaseApp.cpp`. Open it. We will try
    to understand what the different lines of code mean.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您选择哪种设置，您都必须编辑一个位于项目目录相同位置且在所有配置中名称相同的单个文件，即`src/BaseApp.cpp`。打开它。我们将尝试理解不同代码行的含义。
- en: '[PRE2]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: These are the initial `include` statements that are responsible for including
    all the necessary Cinder stuff before we start to write our actual Cinder code.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是初始的 `include` 语句，负责在我们开始编写实际的 Cinder 代码之前包含所有必要的 Cinder 内容。
- en: '[PRE3]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here we tell the compiler that we are going to use some namespaces. We do that
    to avoid writing the namespace names before the variables and methods that are
    defined in those namespaces in our code. So, these lines are here just to make
    our code more readable and our creative lives easier. We are not adding the `gl`
    namespace here, because we want to keep the OpenGL drawing code distinguishable
    from all other code in the file.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们告诉编译器我们将要使用一些命名空间。我们这样做是为了避免在我们的代码中在定义在这些命名空间中的变量和方法之前写上命名空间名称。因此，这些行只是为了让我们的代码更易于阅读，让我们的创意生活更轻松。我们在这里没有添加
    `gl` 命名空间，因为我们希望将 OpenGL 绘图代码与文件中的所有其他代码区分开来。
- en: '[PRE4]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is the definition of our base application class. It extends Cinder AppBasic—it
    is a super class that contains all the basic functionality that we would need
    to code ourselves if there was no Cinder.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的基础应用程序类的定义。它扩展了 Cinder AppBasic——这是一个包含所有我们需要自己编写的必要功能的高级类。
- en: '[PRE5]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: These are the methods that we are going to override in this class. These methods
    can be considered the most important in Cinder, because here you can define what
    will be done in the main run loop of the program.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是我们将在该类中重写的函数。这些函数可以被认为是 Cinder 中最重要的，因为在这里你可以定义程序主运行循环中将要执行的操作。
- en: '`setup()` is for setting up your program and it is executed just once at the
    beginning.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`setup()` 用于设置你的程序，并且它只在程序开始时执行一次。'
- en: '`update()` is called for every frame before the `draw()` function (the default
    Cinder frame rate is 30 fps) and here you should put all your calculations, data
    retrieval, and analysis code.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`update()` 在 `draw()` 函数（默认 Cinder 帧率为 30 fps）之前为每一帧调用，并且你应该在这里放置所有的计算、数据检索和分析代码。'
- en: '`draw()` is for drawing things on the screen. As `update()` takes care of all
    the calculations, you can use the results here in order to draw something on the
    screen. It can be 2D or 3D text, 2D or 3D shapes—a certain point in a movie file.
    Choose whatever you want, but try to use this method just for drawing.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`draw()` 用于在屏幕上绘制东西。由于 `update()` 负责所有计算，你可以在这里使用结果来在屏幕上绘制东西。可以是 2D 或 3D 文本、2D
    或 3D 形状——电影文件中的某个点。选择你想要的，但尽量只使用这个方法进行绘图。'
- en: 'Then there are implementations of the methods (after the class declaration
    that starts with the class `BaseApp : public AppBasic {` and ends with a closing
    bracket `}`) and a line of code that is responsible for launching your program
    is as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '然后是方法的实现（在以 `BaseApp : public AppBasic {` 开始的类声明之后和以关闭括号 `}` 结束的类声明之间）以及负责启动你的程序的一行代码如下：'
- en: '[PRE6]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This tells Cinder that it has to run your program (`BaseApp`) with the help
    of `RendererGl`. `RendererGl`, one of the available renderers in Cinder. It uses
    OpenGL for rendering and that lets you use the classes and functions defined in
    the `gl::` namespace as well as pure OpenGL functions.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉 Cinder 使用 `RendererGl` 来运行你的程序（`BaseApp`）。`RendererGl` 是 Cinder 中可用的渲染器之一。它使用
    OpenGL 进行渲染，这让你可以使用 `gl::` 命名空间中定义的类和函数，以及纯 OpenGL 函数。
- en: There are some other renderers available in Cinder, for example, `Renderer2d`
    that can be used in combination with Cairo vector-graphics Cinder namespace. It
    uses the `Cairo::createWindowSurface()` function for drawing and it may be not
    so fast as when using OpenGL.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Cinder 中还有一些其他可用的渲染器，例如 `Renderer2d`，它可以与 Cairo 向量图形 Cinder 命名空间结合使用。它使用 `Cairo::createWindowSurface()`
    函数进行绘图，可能不如使用 OpenGL 那样快。
- en: OK, now we are ready to add some visual feedback to our program. We do it inside
    the implementation of the `draw()` method.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在我们准备给我们的程序添加一些视觉反馈。我们在 `draw()` 方法的实现中这样做。
- en: 'Let''s draw some lines. Edit the `draw()` method implementation as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们画一些线条。按照以下方式编辑 `draw()` 方法的实现：
- en: '[PRE7]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Before we begin writing the actual drawing code, let me explain to you the difference
    between Cinder and OpenGL coordinate space.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始编写实际的绘图代码之前，让我向你解释一下 Cinder 和 OpenGL 坐标空间之间的区别。
- en: In Cinder (as in many other creative coding frameworks and 2D graphics software),
    we make use of the so called fourth quadrant of the 2D Cartesian coordinate system.
    That means that the point (0, 0) is located at the top-left corner of the screen.
    To the right from that point all the x values go positive, and downwards from
    it all the y values go positive.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在Cinder（以及许多其他创意编码框架和2D图形软件中），我们利用了所谓的二维笛卡尔坐标系中的第四象限。这意味着点（0，0）位于屏幕的左上角。你可能还记得在学校数学课上学到的这一点——从（0，0）点左侧，x值变为负，右侧变为正。从（0，0）点向下，y值变为负，向上变为正。
- en: It is different with OpenGL. All four quadrants are used and the point (0, 0)
    is located in the center of the screen. You might remember this from math classes
    at school—to the left from the (0, 0) point x values go negative, to the right
    they go positive. Downwards from the (0, 0) point, the y values go negative, and
    upwards they go positive.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 与OpenGL不同。所有四个象限都被使用，点（0，0）位于屏幕中心。你可能还记得这一点是从学校的数学课上学到的——从（0，0）点左侧，x值变为负，右侧变为正。从（0，0）点向下，y值变为负，向上变为正。
- en: '![Final adjustments](img/9564_03_09.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![最终调整](img/9564_03_09.jpg)'
- en: 'The Cinder `gl` namespace methods does the conversion from the "top-left-centered"
    coordinate system to the "actually-centered" for us. So let''s draw:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Cinder的`gl`命名空间方法为我们完成了从“左上角居中”坐标系到“实际居中”坐标系的转换。所以让我们来画一下：
- en: '[PRE8]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Compile and run the project. You should see the following output:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 编译并运行项目。你应该会看到以下输出：
- en: '![Final adjustments](img/9564_03_05.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![最终调整](img/9564_03_05.jpg)'
- en: That's it! We've created a great base for our future applications! We are going
    to re-use it's structure while going through the next chapters.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！我们已经为我们的未来应用程序创建了一个很好的基础！在接下来的章节中，我们将重用它的结构。
- en: Summary
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to create a base application. We used two different
    approaches—a simple (by using TinderBox) and a difficult one (by creating a project
    from scratch). The former lets you do it fast, but the latter gives you a deeper
    insight into how things work.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何创建一个基础应用程序。我们使用了两种不同的方法——一种简单的方法（通过使用TinderBox）和一种困难的方法（从头创建项目）。前者让你可以快速完成，但后者让你对事物的工作原理有更深入的了解。
