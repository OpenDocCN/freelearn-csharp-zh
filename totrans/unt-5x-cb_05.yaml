- en: Chapter 5. Using Cameras
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。使用相机
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Creating a picture-in-picture effect
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建画中画效果
- en: Switching between multiple cameras
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在多个相机之间切换
- en: Making textures from screen content
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从屏幕内容创建纹理
- en: Zooming a telescopic camera
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调整望远镜相机的缩放
- en: Displaying a mini-map
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示迷你地图
- en: Creating an in-game surveillance camera
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建游戏中的监控相机
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: As developers, we should never forget to pay attention to the cameras. After
    all, they are the windows through which our players see our games. In this chapter,
    we will take a look at interesting ways of using cameras that enhance the player's
    experience.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发者，我们永远不应该忘记关注相机。毕竟，它们是我们玩家看到我们游戏窗口。在本章中，我们将探讨一些有趣的使用相机的方法，这些方法可以增强玩家的体验。
- en: The big picture
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 整体情况
- en: 'Cameras can be customized in many ways:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 相机可以通过多种方式自定义：
- en: They can exclude objects on specific layers from rendering
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们可以排除特定图层上的对象以进行渲染
- en: They can be set to render in **Orthographic** mode (that is, without perspective)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们可以被设置为以**正交**模式（即没有透视）进行渲染
- en: They can have their **Field of View** (**FOV**) manipulated to simulate a wide
    angle lens
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们的**视野**（**FOV**）可以被操作以模拟广角镜头
- en: They can be rendered on top of other cameras or within specific areas of the
    screen
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们可以渲染在其他相机之上或屏幕的特定区域
- en: They can be rendered onto Textures
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们可以被渲染到纹理上
- en: The list goes on.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 列表还在继续。
- en: '![The big picture](img/1362OT_05_00.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![整体情况](img/1362OT_05_00.jpg)'
- en: Two simultaneous camera views
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 两个同时的相机视图
- en: Note that throughout this chapter you will notice that some recipes feature
    a camera rig that follows the player's third-person character. That rig is the
    **Multipurpose Camera Rig**, originally available from Unity's sample assets,
    which can be imported into your projects by navigating to **Assets** | **Import
    Package** | **Camera**. To make things easier, we organized the `MultipurposeCamera`
    Unity Package containing it as a prefab, which can be found in the `1362_05_codes`
    folder.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在本章中，您将注意到一些配方具有一个跟随玩家第三人称角色的相机装置。这个装置是**多功能相机装置**，最初来自 Unity 的示例资产，可以通过导航到**资产**
    | **导入包** | **相机**将其导入到项目中。为了使事情更容易，我们将包含它的 `MultipurposeCamera` Unity 包作为一个预制件组织起来，该预制件可以在
    `1362_05_codes` 文件夹中找到。
- en: Creating a picture-in-picture effect
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建画中画效果
- en: Having more than one viewport displayed can be useful in many situations. For
    example, you may want to show simultaneous events going on in different locations,
    or you may want to have a separate window for hot-seat multiplayer games. Although
    you can do this manually by adjusting the **Normalized Viewport Rect** parameters
    on your camera, this recipe includes a series of extra preferences to make it
    more independent from the user's display configuration.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，显示多个视口可能很有用。例如，您可能希望显示在不同位置同时发生的事件，或者您可能希望为热座多人游戏设置一个单独的窗口。虽然您可以通过调整相机上的**归一化视口矩形**参数手动完成此操作，但此配方包含一系列额外的首选项，使其更多地独立于用户的显示配置。
- en: Getting ready
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we have prepared the `BasicScene` Unity package, containing
    a scene named `BasicScene`. The package is in the `1362_05_codes` folder.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们已准备了 `BasicScene` Unity 包，其中包含一个名为 `BasicScene` 的场景。该包位于 `1362_05_codes`
    文件夹中。
- en: How to do it...
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To create a picture-in-picture display, just follow these steps:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建画中画显示，只需按照以下步骤操作：
- en: Import the `BasicScene` package into your Unity Project.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `BasicScene` 包导入到您的 Unity 项目中。
- en: From the **Project** view, open the **BasicScene** level. This is a basic scene
    featuring an animated character and some extra geometry.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目**视图打开**BasicScene**级别。这是一个包含动画角色和一些额外几何形状的基本场景。
- en: Add a new **Camera** to the scene through the **Create** drop-down menu on top
    of the **Hierarchy** view (**Create** | **Camera**).
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在**层次**视图顶部的**创建**下拉菜单中添加一个新的**相机**（**创建** | **相机**）来将场景中的新相机。
- en: Select the camera you have created and, from the **Inspector** view, change
    its **Depth** to **1**, as shown in the following screenshot:![How to do it...](img/1362OT_05_01.jpg)
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您创建的相机，从**检查器**视图，将其**深度**更改为**1**，如图下截图所示：![如何操作...](img/1362OT_05_01.jpg)
- en: From the **Project** view, create a new **C# Script** file and rename it `PictureInPicture`.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目**视图创建一个新的**C# 脚本**文件，并将其重命名为 `PictureInPicture`。
- en: 'Open your script and replace everything with the following code:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的脚本，并用以下代码替换所有内容：
- en: '[PRE0]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In case you haven't noticed, we are not achieving percentages by dividing numbers
    by 100, but rather multiplying them by 0.01\. The reason behind this is that computer
    processors are faster at multiplying than dividing.
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你没有注意到，我们不是通过将数字除以100来获得百分比，而是将它们乘以0.01。这样做的原因是计算机处理器在乘法上比除法更快。
- en: Save your script and attach it to the camera you previously created.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存你的脚本并将其附加到之前创建的相机上。
- en: 'Uncheck the new camera''s **Audio Listener** component and change some of the
    **PictureInPicture** parameters: change **Hor Align** to `right`, **Ver Align**
    to `top`, and **Unit** to `pixels`. Leave **XOffset** and **YOffset** as `0`,
    change **Width** to `400` and **Height** to `200`, as shown here:![How to do it...](img/1362OT_05_02.jpg)'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消选中新相机的**音频监听器**组件，并更改一些**画中画**参数：将**水平对齐**改为`right`，**垂直对齐**改为`top`，并将**单位**改为`pixels`。将**X偏移**和**Y偏移**保留为`0`，将**宽度**改为`400`，将**高度**改为`200`，如下所示：![如何操作...](img/1362OT_05_02.jpg)
- en: Play your scene. The new camera's viewport should be visible in the top-right
    corner of the screen, as shown below:![How to do it...](img/1362OT_05_03.jpg)
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 播放你的场景。新的相机的视口应该显示在屏幕的右上角，如下所示：![如何操作...](img/1362OT_05_03.jpg)
- en: How it works...
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this example, we added a second camera in order to display the scene from
    a different point of view. The second camera's relative viewport was originally
    placed on top of the **Main Camera**'s viewport, hence taking up all of the screen
    space.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们添加了第二个相机，以便从不同的视角显示场景。第二个相机的相对视口最初放置在**主相机**视口的上方，因此占据了整个屏幕空间。
- en: The `PictureInPicture` script changes the camera's **Normalized Viewport Rect**,
    thus resizing and positioning the viewport according to the user's preferences.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`PictureInPicture`脚本更改相机的**标准化视口矩形**，从而根据用户的偏好调整视口的大小和位置。'
- en: First, it reads user preferences for the component (dimensions, alignment, and
    offset for the PiP viewport) and converts dimensions in screen percentage to pixels.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，它读取组件的用户偏好设置（PiP视口的尺寸、对齐和偏移）并将屏幕百分比的尺寸转换为像素。
- en: Later, from the `if(unit == UnitsIn.screen_percentage){` conditional, the script
    calculates two of the viewport Rect parameters (width and height) according to
    the user's selection.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 后来，从`if(unit == UnitsIn.screen_percentage){`条件语句中，脚本根据用户的选取计算两个视口矩形参数（宽度和高度）。
- en: Later on, to **switch** statements to adjust the other two viewport Rect parameters
    (horizontal and vertical location) according to the total screen dimensions, PiP
    viewport dimension, vertical/horizontal alignment, and offset.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，使用**switch**语句调整其他两个视口矩形参数（水平和垂直位置）根据总屏幕尺寸、PiP视口尺寸、垂直/水平对齐和偏移。
- en: 'Finally, a line of code tells the camera to change the location and dimensions
    of the camera''s **Viewport Rect**:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，一行代码告诉相机更改相机的**视口矩形**的位置和尺寸：
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: There's more...
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The following are some aspects of your picture-in-picture that you could change:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是你可能想要更改的画中画的一些方面：
- en: Making the picture-in-picture proportional to the screen's size
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使画中画与屏幕大小成比例
- en: If you change the **Unit** option to `screen_percentage`, the viewport size
    will be based on the actual screen's dimensions instead of pixels.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将**单位**选项更改为`screen_percentage`，视口大小将基于实际屏幕的尺寸而不是像素。
- en: Changing the position of the picture-in-picture
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更改画中画的位置
- en: The **Ver Align** and **Hor Align** options can be used to change the viewport's
    vertical and horizontal alignment. Use them to place it where you wish.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**垂直对齐**和**水平对齐**选项可以用来更改视口的垂直和水平对齐。使用它们将其放置到你希望的位置。'
- en: Preventing the picture-in-picture from updating on every frame
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 防止画中画在每一帧更新
- en: Leave the **Update** option unchecked if you don't plan to change the viewport
    position in running mode. Also, it's a good idea to leave it checked when testing
    and uncheck it once the position has been decided and set up.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你计划在运行模式下不更改视口位置，请取消选中**更新**选项。同时，在测试时保留选中状态，一旦位置确定并设置好，再取消选中。
- en: See also
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Displaying a mini-map* recipe in this chapter
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中显示*迷你地图*的配方
- en: Switching between multiple cameras
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在多个相机之间切换
- en: 'Choosing from a variety of cameras is a common feature in many genres: racing,
    sports, tycoon/strategy, and many others. In this recipe, you will learn how to
    give players the ability to choose from many cameras by using their keyboards.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在多种摄像机中选择是许多流派中常见的功能：赛车、体育、大亨/策略，等等。在这个菜谱中，你将学习如何通过使用键盘让玩家能够从许多摄像机中选择。
- en: Getting ready
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we have prepared the `BasicScene` Unity package containing
    a scene named `BasicScene`. The package is in the `1362_05_codes` folder.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，我们准备了一个包含名为`BasicScene`的场景的`BasicScene` Unity包。该包位于`1362_05_codes`文件夹中。
- en: How to do it...
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'To implement switchable cameras, follow these steps:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现可切换的摄像机，请按照以下步骤操作：
- en: Import the `BasicScene` package into a new **Project**.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`BasicScene`包导入新的**项目**。
- en: From the **Project** view, open the **BasicScene** level. This is a basic scene
    featuring an animated character and some extra geometry.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目**视图，打开**BasicScene**级别。这是一个包含动画角色和一些额外几何形状的基本场景。
- en: Add two more cameras to the scene through the **Create** drop-down menu on top
    of the **Hierarchy** view (**Create** | **Camera**). Rename them `cam1` and `cam2`.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过**层次**视图顶部的**创建**下拉菜单（**创建** | **摄像机**）向场景添加两个更多摄像机。将它们重命名为`cam1`和`cam2`。
- en: Change the `cam2` camera's position and rotation so that it won't be identical
    to `cam1`.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`cam2`摄像机的位置和旋转，使其不会与`cam1`完全相同。
- en: Create an **Empty** GameObject by navigating to the **Create** drop-down menu
    on top of the **Hierarchy** view (**Create** | **Create Empty**). Then, rename
    it `Switchboard`.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到**层次**视图顶部的**创建**下拉菜单（**创建** | **创建空对象**）创建一个**空对象**。然后，将其重命名为`Switchboard`。
- en: From the **Inspector** view, disable the **Camera** and **Audio Listener** components
    of both `cam1` and `cam2`. Also, set their **Tags** as **MainCamera**, as shown:![How
    to do it...](img/1362OT_05_04.jpg)
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**检查器**视图，禁用`cam1`和`cam2`的**摄像机**和**音频监听器**组件。同时，将它们的**标签**设置为**主摄像机**，如图所示：![如何做到这一点...](img/1362OT_05_04.jpg)
- en: From the **Project** view, create a new **C# Script** file. Rename it `CameraSwitch`
    and open it in your editor.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目**视图，创建一个新的**C# 脚本**文件。将其重命名为`CameraSwitch`并在你的编辑器中打开它。
- en: 'Open your script and replace everything with the following code:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的脚本，将所有内容替换为以下代码：
- en: '[PRE2]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Attach `CameraSwitch` to the `Switchboard` GameObject.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`CameraSwitch`附加到`Switchboard`游戏对象。
- en: From the **Inspector** view, set both the **Cameras** and **Shortcuts** sizes
    to `3`. Then, drag and populate the **Cameras** slots with the cameras from the
    scene (including the **Main Camera**, within the **Multipurpose Camera Rig** |
    **Pivot** GameObject) Then, type `1`, `2`, and `3` into the **Shortcuts** text
    fields, as shown in the next screenshot:![How to do it...](img/1362OT_05_05.jpg)
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**检查器**视图，将**摄像机**和**快捷方式**的大小设置为`3`。然后，将场景中的摄像机（包括**多功能摄像机装置**中的**主摄像机** |
    **枢轴**游戏对象）拖放到**摄像机**插槽中。然后，在**快捷方式**文本字段中输入`1`、`2`和`3`，如图所示：![如何做到这一点...](img/1362OT_05_05.jpg)
- en: Play your scene and test your cameras by pressing *1*, *2*, and *3* on the keyboard.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 播放你的场景，并通过按键盘上的*1*、*2*和*3*来测试你的摄像机。
- en: How it works...
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The script is very straightforward. First, it compares the key being pressed
    to the list of shortcuts. If the key is indeed included on a list of shortcuts,
    it is passed on to the `SwitchCamera` function, which, in turn, goes through a
    list of cameras, enables the one associated with the shortcut that was received,
    and also enables its **Audio Listener**, in case the **Change Audio Listener**
    option is checked.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本非常简单。首先，它将按下的键与快捷方式列表进行比较。如果键确实包含在快捷方式列表中，它将被传递到`SwitchCamera`函数，该函数随后遍历摄像机列表，启用与接收到的快捷方式关联的摄像机，并启用其**音频监听器**，如果已勾选**更改音频监听器**选项。
- en: There's more...
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Here are some ideas about how you could try twisting this recipe a bit.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些关于你可以如何尝试稍微改变这个菜谱的想法。
- en: Using a single-enabled camera
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用单启用摄像机
- en: A different approach to the problem would be keeping all secondary cameras disabled
    and assigning their position and rotation to the main camera via a script (you
    would need to make a copy of the main camera and add it to the list, in case you
    wanted to save its **Transform** settings).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题的另一种方法是将所有辅助摄像机保持禁用状态，并通过脚本将它们的位置和旋转分配给主摄像机（如果你想要保存其**变换**设置，你需要复制主摄像机并将其添加到列表中）。
- en: Triggering the switch from other events
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过其他事件触发开关
- en: 'Also, you can change your camera from other GameObjects'' scripts by using
    a line of code such as the one given here:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您可以通过使用如下所示的代码行从其他GameObject的脚本中更改您的相机：
- en: '[PRE3]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: See also
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating an in-game surveillance camera* recipe in this chapter
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中关于**创建游戏内监控摄像头**的配方
- en: Making textures from screen content
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从屏幕内容创建纹理
- en: If you want your game or player to take in-game snapshots and apply them as
    textures, this recipe will show you how. This can be very useful if you plan to
    implement an in-game photo gallery or display a snapshot of a past key moment
    at the end of a level (racing games and stunt simulations use this feature a lot).
    For this particular example, we will take a snapshot from within a framed region
    of the screen and print it on the top-right corner of the display.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想让您的游戏或玩家在游戏中捕捉快照并将其作为纹理应用，这个配方将向您展示如何操作。如果您计划实现游戏中的照片库或在关卡结束时显示过去关键时刻的快照（赛车游戏和特技模拟大量使用此功能），这将非常有用。对于这个特定的例子，我们将从屏幕的框架区域内捕捉快照，并将其打印在显示器的右上角。
- en: Getting ready
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we have prepared the `BasicScene` Unity package, containing
    a scene named `BasicScene`. The package is in the `1362_05_codes` folder.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们已准备了`BasicScene`Unity包，其中包含一个名为`BasicScene`的场景。该包位于`1362_05_codes`文件夹中。
- en: How to do it...
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To create textures from screen content, follow these steps:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要从屏幕内容创建纹理，请按照以下步骤操作：
- en: Import the `BasicScene` package into a new **Project**.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`BasicScene`包导入一个新的**项目**。
- en: From the **Project** view, open the **BasicScene** level. This is a basic scene
    featuring an animated character and some extra geometry. It also features a **Canvas**
    for UI elements.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目**视图，打开**BasicScene**关卡。这是一个包含动画角色和一些额外几何形状的基本场景。它还包含用于UI元素的**Canvas**。
- en: Create an **UI Image** GameObject from the **Create** drop-down menu on top
    of the **Hierarchy** view (**Create** | **UI** | **Image**). Please note that
    it will be created as a child of the **Canvas** GameObject. Then, rename it `frame`.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**创建**下拉菜单中的**层次结构**视图（**创建** | **UI** | **图像**）创建一个**UI 图像**GameObject。请注意，它将作为**Canvas**GameObject的子项创建。然后，将其重命名为`frame`。
- en: From the **Inspector** view, find the **Image (Script)** component of the **frame**
    GameObject and set `InputFieldBackground` as its **Source Image**. This is a sprite
    that comes bundled with Unity, and it's already sliced for resizing purposes.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**检查器**视图，找到**frame**GameObject的**图像（脚本）**组件，并将其**源图像**设置为`InputFieldBackground`。这是一个与Unity捆绑的精灵，并且已经切片以进行缩放。
- en: 'Now, from the **Inspector** view, change **Rect Transform** to the following
    values: **Anchors** | **Min** | **X**: `0.25`, **Y**: `0.25`; **Anchors** | **Max**
    | **X**: `0.75`, **Y**: `0.75`; **Pivot** | **X**: `0.5`, **Y**: `0.5;` **Left**:
    `0`; **Top**: `0`; **Pos Z**: `0`; **Right**: `0`; **Bottom**: `0`.'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，从**检查器**视图，将**矩形变换**更改为以下值：**锚点** | **最小值** | **X**：`0.25`，**Y**：`0.25`；**锚点**
    | **最大值** | **X**：`0.75`，**Y**：`0.75`；**锚点** | **X**：`0.5`，**Y**：`0.5`；**左**：`0`；**上**：`0`；**位置
    Z**：`0`；**右**：`0`；**下**：`0`。
- en: From the **Image (Script)** component, uncheck the **Fill Center** option, as
    shown below:![How to do it...](img/1362OT_05_06.jpg)
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**图像（脚本）**组件中，取消选中**填充中心**选项，如下所示：![如何操作...](img/1362OT_05_06.jpg)
- en: Create an **UI Raw Image** GameObject from the **Create** drop-down menu on
    top of the **Hierarchy** view (**Create** | **UI** | **RawImage**). Please note
    that it will be created as a child of the **Canvas** GameObject. Then, rename
    it `Photo`.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**创建**下拉菜单中的**层次结构**视图（**创建** | **UI** | **原始图像**）创建一个**UI 原始图像**GameObject。请注意，它将作为**Canvas**GameObject的子项创建。然后，将其重命名为`Photo`。
- en: From the **Inspector** view, find the **Raw Image (Script)** component of the
    **Photo** GameObject and set `None` as its **Texture**. Also, from the top of
    the **Inspector** view, disable the **Photo** GameObject by unchecking the box
    on the side of its name.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**检查器**视图，找到**Photo**GameObject的**原始图像（脚本）**组件，并将其**纹理**设置为`None`。同时，从**检查器**视图的顶部，通过取消选中其名称旁边的框来禁用**Photo**GameObject。
- en: 'Now, from the **Inspector** view, change the **Rect Transform** to the following
    values: **Width**: `1`; **Height**: `1`; **Anchors** | **Min** | **X**: `0`, **Y**:
    `1`; **Anchors** | **Max** | **X**: `0`, **Y**: `1`; **Pivot** | **X**: `0`, **Y**:
    `1`; **Pos X**: `0`; **Pos Y**: `0`; **Pos Z**: `0` as shown in the following
    screenshot:![How to do it...](img/1362OT_05_07.jpg)'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，从**检查器**视图，将**矩形变换**更改为以下值：**宽度**：`1`；**高度**：`1`；**锚点** | **最小值** | **X**：`0`，**Y**：`1`；**锚点**
    | **最大值** | **X**：`0`，**Y**：`1`；**锚点** | **X**：`0`，**Y**：`1`；**Pivot** | **X**：`0`，**Y**：`1`；**位置
    X**：`0`；**位置 Y**：`0`；**位置 Z**：`0`，如下截图所示：![如何操作...](img/1362OT_05_07.jpg)
- en: We need to create a script. In the **Project** view, click on the **Create**
    drop-down menu and choose **C# Script**. Rename it `ScreenTexture` and open it
    in your editor.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要创建一个脚本。在**项目**视图中，点击**创建**下拉菜单并选择**C# 脚本**。将其重命名为`ScreenTexture`并在您的编辑器中打开它。
- en: 'Open your script and replace everything with the following code:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的脚本并替换以下代码：
- en: '[PRE4]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Save your script and apply it to the **Main Camera** GameObject within the **Multipurpose
    Camera Rig** | **Pivot** GameObject.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存您的脚本并将其应用到**主相机**GameObject中的**多功能相机装置** | **枢轴**GameObject。
- en: In the **Inspector** view, find the **Screen Texture** component and populate
    the fields **Photo GUI** and **Frame GUI** with the GameObjects **Photo** and
    **frame** respectively:![How to do it...](img/1362OT_05_08.jpg)
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**检查器**视图中，找到**屏幕纹理**组件，并将**Photo GUI**和**Frame GUI**字段分别填充为**Photo**和**frame**
    GameObject：![如何操作...](img/1362OT_05_08.jpg)
- en: Play the scene. You will be able to take a snapshot of the screen (and have
    it displayed in the top-left corner at a quarter of the original size) by clicking
    the mouse button, as shown in the following screenshot:![How to do it...](img/1362OT_05_09.jpg)
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 播放场景。您可以通过单击鼠标按钮来捕获屏幕截图（并将其显示在左上角，大小为原始大小的四分之一），如图下所示：![如何操作...](img/1362OT_05_09.jpg)
- en: How it works...
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: First, we created a GUI frame from which to take a snapshot and a GUI element
    onto which to apply the texture. Then, we applied a script to the **Main Camera**
    to capture the screen content and apply a new texture to it.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建了一个GUI框架来截图，以及一个GUI元素来应用纹理。然后，我们将脚本应用于**主相机**以捕获屏幕内容并应用新的纹理。
- en: The script creates a new texture and captures the left mouse button being pressed,
    whereupon it starts a coroutine to calculate a Rect area, copy screen pixels from
    that area, and apply them to a texture to be displayed by the **photo** GUI element,
    which is also resized to fit the texture.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本创建了一个新的纹理，并捕获了左鼠标按钮被按下，随后它启动一个协程来计算一个Rect区域，从该区域复制屏幕像素，并将它们应用到要由**photo**
    GUI元素显示的纹理上，该元素的大小也调整为适合纹理。
- en: The size of the Rect is calculated from the screen's dimensions and the frame's
    **Rect Transform** settings, particularly its Pivot, Anchors, Width, and Height.
    The screen pixels are then captured by the `ReadPixels()` command, and applied
    to the texture, which is then applied to the **Raw Image** photo, which is resized
    to meet the desired ratio between the photo size and the original pixels.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Rect的大小是根据屏幕的尺寸和框架的**Rect Transform**设置计算的，特别是其枢轴、锚点、宽度和高度。然后，通过`ReadPixels()`命令捕获屏幕像素，并将其应用到纹理上，然后将该纹理应用到**原始图像**photo上，该photo的大小调整为满足照片大小与原始像素之间的期望比例。
- en: There's more...
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: Apart from displaying the texture as a GUI element, you can use it in other
    ways.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 除了将纹理作为GUI元素显示外，您还可以以其他方式使用它。
- en: Applying your texture to a material
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将您的纹理应用到材质上
- en: You can apply your texture to an existing object's material by adding a line
    similar to `GameObject.Find("MyObject").renderer.material.mainTexture = texture;`
    to the end of the `CaptureScreen` function.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在`CaptureScreen`函数末尾添加类似`GameObject.Find("MyObject").renderer.material.mainTexture
    = texture;`的行，将您的纹理应用到现有对象的材质上。
- en: Using your texture as a screenshot
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用您的纹理作为截图
- en: You can encode your texture as a PNG image file and save it. Check out Unity's
    documentation on this feature at [http://docs.unity3d.com/Documentation/ScriptReference/Texture2D.EncodeToPNG.html](http://docs.unity3d.com/Documentation/ScriptReference/Texture2D.EncodeToPNG.html).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将您的纹理编码为PNG图像文件并保存。请查看Unity关于此功能的文档[http://docs.unity3d.com/Documentation/ScriptReference/Texture2D.EncodeToPNG.html](http://docs.unity3d.com/Documentation/ScriptReference/Texture2D.EncodeToPNG.html)。
- en: See also
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The Saving screenshots from the game recipe in Chapter 10, Working with the
    External Resource Files and Devices
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第10章，使用外部资源文件和设备中的游戏截图配方
- en: Zooming a telescopic camera
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缩放望远镜相机
- en: In this recipe, we will create a telescopic camera that zooms in whenever the
    left mouse button is pressed. This can be very useful, for instance, if we have
    a sniper in our game.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将创建一个在按下左鼠标按钮时缩放的望远镜相机。这非常有用，例如，如果我们游戏中有一个狙击手。
- en: Getting ready...
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作...
- en: For this recipe, we have prepared the `BasicScene` Unity package, containing
    a scene named `BasicScene`. The package is in the `1362_05_codes` folder.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本配方，我们已准备了`BasicScene` Unity包，其中包含一个名为`BasicScene`的场景。该包位于`1362_05_codes`文件夹中。
- en: How to do it...
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To create a telescopic camera, follow these steps:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个望远镜相机，请按照以下步骤操作：
- en: Import the `BasicScene` package into a new **Project**.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`BasicScene`包导入一个新的**项目**。
- en: From the **Project** view, open the **BasicScene** level. This is a basic scene
    featuring an animated character and some extra geometry.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目**视图中打开**BasicScene**级别。这是一个包含动画角色和一些额外几何形状的基本场景。
- en: Import Unity's **Effects** package by navigating to **Assets** | **Import Package**
    | **Effects.**
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到**资产** | **导入包** | **Effects**导入Unity的**效果**包。
- en: Select the **Main Camera** GameObject within the **Multipurpose Camera Rig**
    | **Pivot** GameObject and apply the **Vignette** image effect (by navigating
    to **Component** | **Image Effects** | **Camera** | **Vignette and Chromatic Aberration**).
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**多功能相机装置** | **枢轴**游戏对象内选择**主摄像机**游戏对象，并应用**Vignette**图像效果（通过导航到**组件** | **图像效果**
    | **摄像机** | **Vignette and Chromatic Aberration**）。
- en: We need to create a script. In the **Project** view, click on the **Create**
    drop-down menu and choose **C# Script**. Rename it `TelescopicView` and open it
    in your editor.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要创建一个脚本。在**项目**视图中，点击**创建**下拉菜单并选择**C# 脚本**。将其重命名为`TelescopicView`并在您的编辑器中打开它。
- en: 'Open your script and replace everything with the following code:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的脚本，并用以下代码替换所有内容：
- en: '[PRE5]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Save your script and apply it to the **Main Camera** GameObject within the **Multipurpose
    Camera Rig** | **Pivot** GameObject.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存您的脚本并将其应用到**多功能相机装置** | **枢轴**游戏对象内的**主摄像机**游戏对象。
- en: Play the level. You should see an animated vignette effect in addition to the
    zooming:![How to do it...](img/1362OT_05_10.jpg)
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 播放级别。您应该会看到一个动画的晕影效果以及缩放效果：![如何做...](img/1362OT_05_10.jpg)
- en: How it works...
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The zooming effect is actually caused by changes to the value of the camera's
    **Field Of View** (**FOV**) property; small values result in closer views of a
    smaller area, while high values enlarge the FOV.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 缩放效果实际上是由摄像机**视野**（**FOV**）属性值的改变引起的；较小的值会导致较小区域的更近距离视图，而较大的值会扩大FOV。
- en: The `TelescopicView` script changes the camera's field of view by subtracting
    from it whenever the left mouse button is pressed. It also adds to the FOV value
    when the mouse button is *not* being held, until it reaches its original value.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 当按下鼠标左键时，`TelescopicView`脚本会通过从它减去值来改变摄像机的视野。当鼠标按钮没有被按下时，它会将值添加到FOV中，直到达到原始值。
- en: 'The zoom limit of the FOV can be deduced from the code `minFov = initFov /
    zoom;`. This means that the minimum value of the FOV is equal to its original
    value divided by the zoom amount. For instance, if our camera features, originally,
    a FOV of `60`, and we set the **Telescopic View Zoom** amount to `2.0`, the minimum
    FOV allowed will be `60/2 = 30`. The difference is shown in the following two
    screenshots:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: FOV的缩放限制可以从代码`minFov = initFov / zoom;`中推断出来。这意味着FOV的最小值等于其原始值除以缩放量。例如，如果我们的摄像机原本的FOV为`60`，我们将**望远镜视图缩放**设置为`2.0`，则允许的最小FOV将是`60/2
    = 30`。差异在以下两个屏幕截图中显示：
- en: '![How it works...](img/1362OT_05_11.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/1362OT_05_11.jpg)'
- en: There's more...
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: You can also add a variable to control the **Blur Vignette** level of the **Vignette**
    image effect.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以添加一个变量来控制**Vignette**图像效果的**模糊晕影**级别。
- en: Displaying a mini-map
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示迷你地图
- en: In many games, a broader view of the scene can be invaluable for navigation
    and information. Mini-maps are great for giving players that extra perspective
    that they may need when in first- or third-person mode.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多游戏中，更宽的视野对于导航和信息非常有价值。迷你地图对于在第一人称或第三人称模式下提供玩家所需的额外视角非常有用。
- en: Getting ready...
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作...
- en: For this recipe, we have prepared the `BasicScene` Unity Package, containing
    a scene named `BasicScene`. You will also need to import three image files named
    `Compass.png, compassMarker.png`, and `compassMask.png`. All files are available
    in the `1362_05_05` folder.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个食谱，我们准备了`BasicScene` Unity 包，其中包含一个名为`BasicScene`的场景。您还需要导入三个名为`Compass.png,
    compassMarker.png`和`compassMask.png`的图像文件。所有文件都位于`1362_05_05`文件夹中。
- en: How to do it...
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To create a mini-map, follow these steps:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建迷你地图，请按照以下步骤操作：
- en: Import the `BasicScene` package into a new **Project**. Also, import the provided
    `png` files. Open the **BasicScene** level.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`BasicScene`包导入一个新的**项目**。同时，导入提供的`png`文件。打开**BasicScene**级别。
- en: From the **Project** view, select the `Compass`, `compassMarker`, and `compassMask`
    texture files. Then, from the **Inspector**, change their **Texture Type** to
    **Sprite (2D and UI)**, leaving the **Sprite Mode** as **Single** and the **Pivot**
    at **Center**. Click on **Apply** to confirm the changes, as shown in the following
    screenshot:![How to do it...](img/1362OT_05_12.jpg)
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目**视图中，选择`Compass`、`compassMarker`和`compassMask`纹理文件。然后，从**检查器**中，将它们的**纹理类型**更改为**精灵（2D和UI）**，保留**精灵模式**为**单个**，并将**锚点**设置为**中心**。单击**应用**以确认更改，如图所示：![如何操作...](img/1362OT_05_12.jpg)
- en: From the **Hierarchy** view, create a new **UI Panel** object (**Create** |
    **UI** | **Panel**). It will be created as a child of the UI **Canvas** GameObject.
    Rename it `MiniMap`. Then, from the **Inspector** view, set its alignment to **Top/Right**,
    change both the **Width** and **Height** to `256`, and its **Pos X** and **Pos
    Y** fields to `-128`. Also, populate the **Source Image** field, within the **Image**
    component, with the **compassMask** sprite, adjusting the **Color** field by bringing
    **Alpha** up to `255`, as shown in the following screenshot:![How to do it...](img/1362OT_05_13.jpg)
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**层次**视图中创建一个新的**UI面板**对象（**创建** | **UI** | **面板**）。它将作为UI **Canvas**游戏对象的子对象创建。将其重命名为`MiniMap`。然后，从**检查器**视图中，将其对齐设置为**顶部/右侧**，将**宽度**和**高度**都更改为`256`，并将其**X位置**和**Y位置**字段设置为`-128`。此外，在**图像**组件中，将**compassMask**精灵填充到**源图像**字段中，通过将**Alpha**值提高到`255`来调整**颜色**字段，如图所示：![如何操作...](img/1362OT_05_13.jpg)
- en: Add a **Mask** component to **MiniMap** (from the main menu, select **Component**
    | **UI** | **Mask**). Then, from the **Inspector** view, find the **Mask** component
    and uncheck **Show Mask Graphic** (it will become invisible, serving as a mask
    for the mini-map).
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向**MiniMap**添加一个**遮罩**组件（从主菜单中选择**组件** | **UI** | **遮罩**）。然后，从**检查器**视图中，找到**遮罩**组件并取消选中**显示遮罩图形**（它将变为不可见，作为迷你地图的遮罩使用）。
- en: Select the **MsLaser** GameObject (which is the player's character), and, from
    the top of the **Inspector** view, access the **Layer** drop-down menu. Select
    **Add Layer…** and then name a **User Layer** `Player`, as shown in the following
    screenshot:![How to do it...](img/1362OT_05_14.jpg)
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**MsLaser**游戏对象（即玩家的角色），然后从**检查器**视图的顶部访问**层**下拉菜单。选择**添加层…**然后命名一个**用户层**`Player`，如图所示：![如何操作...](img/1362OT_05_14.jpg)
- en: Select the **MsLaser** character again, and, from the **Layer** drop-down menu,
    select **Player**:![How to do it...](img/1362OT_05_15.jpg)
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次选择**MsLaser**角色，然后从**层**下拉菜单中选择**玩家**：![如何操作...](img/1362OT_05_15.jpg)
- en: From the **Project** view, create a new **Render Texture** and name it `Map_Render`.
    Then, from **Inspector**, change its size to `256 x 256`.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目**视图中创建一个新的**渲染纹理**并将其命名为`Map_Render`。然后，从**检查器**中，将其大小更改为`256 x 256`。
- en: 'From the **Hierarchy** view, create a new camera (**Create** | **Camera**)
    and rename it `MapCamera`. From the **Inspector** view, change its parameters
    as follows (shown in the screenshot that will follow):'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**层次**视图中创建一个新的相机（**创建** | **相机**）并将其重命名为`MapCamera`。从**检查器**视图中，按照以下参数更改其设置（如图所示）：
- en: '**Clear Flags**: `Depth Only`'
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**清除标志**：`仅深度`'
- en: '**Culling Mask**: `Mixed…` (unselect **Player**)'
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**剔除遮罩**：`混合…`（取消选择**玩家**）'
- en: '**Projection**: `Orthographic`'
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**投影**：`正交`'
- en: '**Depth**: `1` (or higher)'
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**深度**：`1`（或更高）'
- en: '**Target Texture**: `Map_Render`'
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标纹理**：`Map_Render`'
- en: Also, uncheck the camera's **Audio Listener** component
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此外，取消选中相机的**音频监听器**组件
- en: '![How to do it...](img/1362OT_05_16.jpg)'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/1362OT_05_16.jpg)'
- en: From the **Hierarchy** view, right-click on **MiniMap** and navigate to **UI**
    | **Raw Image** to create a child UI element. Name it `MapTexture`. Then, from
    the **Inspector** view, populate the **Texture** field with the `Map_Render` texture
    and click on the **Set Native Size** button, as shown in the following screenshot:![How
    to do it...](img/1362OT_05_17.jpg)
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**层次**视图中，右键单击**MiniMap**并导航到**UI** | **原始图像**以创建一个子UI元素。将其命名为`MapTexture`。然后，从**检查器**视图中，将`Map_Render`纹理填充到**纹理**字段中，并单击**设置原生大小**按钮，如图所示：![如何操作...](img/1362OT_05_17.jpg)
- en: Now, right-click on **MiniMap** and navigate to **UI** | **Image** to create
    another child element. Name it `Compass`. Then, from the **Inspector** view, populate
    the **Source Image** field with the `Compass` image and click on the **Set Native
    Size** button.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，右键单击**MiniMap**并导航到**UI** | **图像**以创建另一个子元素。将其命名为`Compass`。然后，从**检查器**视图中，将`Compass`图像填充到**源图像**字段中，并单击**设置原生大小**按钮。
- en: Once again, right-click on **MiniMap** and navigate to **UI** | **Image** to
    add another child element. Name it `Marker`. Then, from the **Inspector** view,
    populate the **Source Image** field with the `compassMarker` image and click on
    the **Set Native Size** button.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次右键单击**迷你地图**并导航到**UI** | **图像**以添加另一个子元素。将其命名为`Marker`。然后，从**检查器**视图，将**源图像**字段填充为`compassMarker`图像，并单击**设置原生大小**按钮。
- en: 'From the **Project** view, create a new **C# Script** and name it `MiniMap`.
    Open it and replace everything with the following code:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目**视图，创建一个新的**C# 脚本**并将其命名为`MiniMap`。打开它并将所有内容替换为以下代码：
- en: '[PRE6]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Save the script and attach it to **MapCamera**. Then, from the **Inspector**
    view, change the parameters of the **Mini Map** component as follows (shown in
    the screenshot that will follow):'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存脚本并将其附加到**MapCamera**。然后，从**检查器**视图，按照以下方式更改**迷你地图**组件的参数（如随后的截图所示）：
- en: '**Target**: `MsLaser`'
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标**：`MsLaser`'
- en: '**Marker**: `Marker` (the UI element previously created)'
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标记**：`Marker`（之前创建的UI元素）'
- en: '**Map GUI**: `MiniMap` (the UI panel previously created)'
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**地图GUI**：`MiniMap`（之前创建的UI面板）'
- en: '**Height**: `10`'
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高度**：`10`'
- en: '**Distance**: `10`'
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**距离**：`10`'
- en: '**Rotate**: Checked'
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**旋转**：勾选'
- en: '![How to do it...](img/1362OT_05_18.jpg)'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/1362OT_05_18.jpg)'
- en: Play the scene. You should be able to see the mini-map functioning in the top-right
    corner of the screen:![How to do it...](img/1362OT_05_19.jpg)
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 播放场景。您应该能够在屏幕右上角看到迷你地图正在工作：![如何操作...](img/1362OT_05_19.jpg)
- en: How it works...
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The main element of the mini-map is a texture, used as a GUI element, rendered
    from an orthographic camera that follows the player from a top-down perspective.
    Some necessary adjustments were made to **MapCamera**:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 迷你地图的主要元素是一个纹理，用作GUI元素，从正交相机渲染，从俯视角度跟随玩家。对**MapCamera**进行了一些必要的调整：
- en: Changing its **Projection** mode to **Orthographic** (to make it two-dimensional)
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将其**投影**模式更改为**正交**（以使其成为二维）
- en: Excluding the **Player** tag from its **Culling Mask** (to make the character's
    model invisible to the camera)
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从其**剔除遮罩**中排除**玩家**标签（以使角色模型对相机不可见）
- en: Disabling its **Audio Listener** (so it won't conflict with the main camera)
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 禁用其**音频监听器**（以免与主相机冲突）
- en: 'The mini-map was embellished with a compass frame and a marker indicating the
    player''s position. All these GUI elements were parented by a **Panel** that also
    functioned as a **Mask** to the visual elements. Finally, a script was created,
    serving three purposes: configuring preferences for the **Camera** (such as the
    area covered), repositioning the **Camera** at runtime according to the player''s
    transform settings, and rotating the appropriate UI elements.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 迷你地图装饰了一个指南针框架和一个指示玩家位置的标记。所有这些GUI元素都由一个**面板**作为父元素，该面板还充当视觉元素的**遮罩**。最后，创建了一个脚本，具有三个作用：配置**相机**（如覆盖区域）的偏好设置，在运行时根据玩家的变换设置重新定位**相机**，并旋转适当的UI元素。
- en: There's more...
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: If you want to experiment more with your mini-map, read on.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想对您的迷你地图进行更多实验，请继续阅读。
- en: Covering a wider or narrower area
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 覆盖更宽或更窄的区域
- en: The range of the mini-map is given by the **Distance** parameter. A higher value
    will result in coverage of a wider area, as the **MiniMap** class uses the same
    value as the viewport size of the orthographic camera.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 迷你地图的范围由**距离**参数给出。更高的值将导致更广泛的区域覆盖，因为**迷你地图**类使用与正交相机视口大小相同的值。
- en: Changing the map's orientation
  id: totrans-186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 改变地图的方向
- en: The mini-map, by default, is set to rotate as the player changes direction.
    Should you want it to be static, uncheck the **Rotate** option to make the **Marker**
    rotate instead.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，迷你地图设置为随着玩家改变方向而旋转。如果您希望它保持静态，取消勾选**旋转**选项，使**标记**旋转。
- en: Adapting your mini-map to other styles
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将您的迷你地图适配到其他风格
- en: You can easily modify this recipe to make a top or isometric view of a racing
    game circuit map. Just position the camera manually and prevent it from following
    the character.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以轻松修改此配方以制作赛车游戏电路地图的俯视图或等距视图。只需手动定位相机并防止其跟随角色。
- en: Creating an in-game surveillance camera
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建游戏中的监控摄像头
- en: Although using a second viewport can be useful in many situations, there will
    be times when you need to output the image rendered from a camera to a texture
    at runtime. To illustrate this point, in this recipe, we will make use of **Render
    Texture** to create an in-game surveillance camera that transmits its video to
    a monitor.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在许多情况下使用第二个视口可能很有用，但有时您需要在运行时将摄像头渲染的图像输出到纹理。为了说明这一点，在这个食谱中，我们将使用**渲染纹理**创建一个将视频传输到监视器的游戏内监控摄像头。
- en: '![Creating an in-game surveillance camera](img/1362OT_05_24.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![创建游戏内监控摄像头](img/1362OT_05_24.jpg)'
- en: In-game surveillance cameras
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏内监控摄像头
- en: Getting ready
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we have prepared the `BasicScene` Unity package, containing
    a scene named `BasicScene`, and also two FBX 3D models for the monitor and camera
    objects. The package is in the `1362_05_codes` folder, and the 3D models are in
    the `1362_05_06` folder.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个食谱，我们已准备好`BasicScene`Unity包，其中包含一个名为`BasicScene`的场景，以及两个用于监视器和摄像头对象的FBX
    3D模型。该包位于`1362_05_codes`文件夹中，3D模型位于`1362_05_06`文件夹中。
- en: How to do it...
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To create a picture-in-picture display, just follow these steps:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建画中画显示，只需按照以下步骤操作：
- en: Import the `BasicScene` package and the `monitor` and `camera` models into your
    Unity Project.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`BasicScene`包和`monitor`以及`camera`模型导入到您的Unity项目中。
- en: From the **Project** view, open the **BasicScene** level. This is a basic scene
    featuring an animated character and some extra geometry.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目**视图，打开**BasicScene**级别。这是一个包含动画角色和一些额外几何形状的基本场景。
- en: 'From the **Project** view, place the **monitor** and **camera** objects into
    the scene by dragging them into the **Hierarchy** panel. Their **Transform** settings
    should be (shown in the following screenshot): **monitor**: **Position**: **X**:
    `0`; **Y**: `0.09`; **Z**: `4`. **Rotation**: **X**: `0`; **Y**: `180`; **Z**:
    `0`. **camera**: **Position**: **X**: `-3`; **Y**: `0.06`; **Z**: `4`. **Rotation**:
    **X**: `0`; **Y**: `90`; **Z**: `0`:![How to do it...](img/1362OT_05_20.jpg)'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目**视图，通过将它们拖入**层次结构**面板将**监视器**和**摄像头**对象放置到场景中。它们的**变换**设置应如下（如图下截图所示）：**监视器**：**位置**：**X**：`0`；**Y**：`0.09`；**Z**：`4`。**旋转**：**X**：`0`；**Y**：`180`；**Z**：`0`。**摄像头**：**位置**：**X**：`-3`；**Y**：`0.06`；**Z**：`4`。**旋转**：**X**：`0`；**Y**：`90`；**Z**：`0`：![如何操作...](img/1362OT_05_20.jpg)
- en: Create, from the **Project** view, a new **Render Texture**, and rename it `screen`.
    Then, from the **Inspector** view, change its **Size** to `512` x `512`.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目**视图创建一个新的**渲染纹理**，并将其重命名为`screen`。然后，从**检查器**视图，将其**大小**更改为`512` x `512`。
- en: 'Add a new **Camera** to the scene through the **Create** drop-down menu on
    top of the **Hierarchy** view (**Create** | **Camera**). Then, from the **Inspector**
    view, name it `Surveillance` and make it a child of the **camera** GameObject.
    Then, change its **Transform** settings to the following: **Position**: **X**:
    `0`; **Y**: `2`; **Z**: `0`, and **Rotation**: **X**: `0`; **Y**: `0`; **Z**:
    `0`.'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过**层次结构**视图顶部的**创建**下拉菜单（**创建** | **摄像头**）向场景中添加一个新的**摄像头**。然后，从**检查器**视图，将其命名为`Surveillance`并使其成为**摄像头**GameObject的子对象。然后，将其**变换**设置更改为以下内容：**位置**：**X**：`0`；**Y**：`2`；**Z**：`0`，和**旋转**：**X**：`0`；**Y**：`0`；**Z**：`0`。
- en: Select the `Surveillance` camera you have created, and, from the **Inspector**
    view, change its **Clipping Planes** | **Near** to `0.6`. Also, populate the **Target
    Texture** slot with the **Render Texture** screen and disable the camera's **Audio
    Listener** component, as shown in the following screenshot:![How to do it...](img/1362OT_05_21.jpg)
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您创建的`Surveillance`摄像头，并从**检查器**视图，将其**裁剪平面** | **近面**更改为`0.6`。同时，将**目标纹理**槽位填充为**渲染纹理**屏幕，并禁用摄像头的**音频监听器**组件，如图下截图所示：![如何操作...](img/1362OT_05_21.jpg)
- en: From the **Hierarchy** view, expand the **monitor** object and select its **screen**
    child. Then, from the **Inspector**, find its material (named **Desert**), and,
    from the **Shader** drop-down menu, change itto **Unlit/Texture**. Finally, set
    the **screen** texture as its base texture, as shown in the following screenshot:![How
    to do it...](img/1362OT_05_22.jpg)
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**层次结构**视图，展开**监视器**对象并选择其**屏幕**子对象。然后，从**检查器**中找到其材质（命名为**Desert**），并在**着色器**下拉菜单中将其更改为**Unlit/Texture**。最后，将**屏幕**纹理设置为基本纹理，如图下截图所示：![如何操作...](img/1362OT_05_22.jpg)
- en: Now it's time to add some post-processing to the texture. From the main menu,
    import the **Effects** package (**Assets** | **Import Package** | **Effects**).
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是时候向纹理添加一些后期处理效果了。从主菜单，导入**效果**包（**资产** | **导入包** | **效果**）。
- en: From the **Hierarchy** view, select the `Surveillance` camera. Then, from the
    main menu, add the **Grayscale** image effect component (**Component** | **Image
    Effects** | **Color Adjustments** | **Grayscale**). Also, add the **Noise And
    Grain** image effect (**Component** | **Image Effects** | **Noise** | **Noise
    and Grain (Filmic)**). Finally, from the **Inspector** view, set the **Intensity
    Multiplier** of the **Noise And Grain** to `4`.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**层次结构**视图中选择`Surveillance`摄像头。然后，从主菜单中，添加**灰度**图像效果组件（**组件** | **图像效果** |
    **颜色调整** | **灰度**）。同时，添加**噪点和颗粒**图像效果（**组件** | **图像效果** | **噪声** | **噪点和颗粒（电影风格）**）。最后，从**检查器**视图中，将**噪点和颗粒**的**强度乘数**设置为`4`。
- en: Play your scene. You should be able to see your actions in real time on the
    monitor's screen, as shown here:![How to do it...](img/1362OT_05_23.jpg)
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 播放你的场景。你应该能够在监视器的屏幕上实时看到你的操作，如图所示：![如何操作...](img/1362OT_05_23.jpg)
- en: How it works...
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We achieved the final result by using the surveillance camera as source for
    the **Render Texture** applied to the **screen**. The camera was made a child
    of the camera's 3D model for easier relocation. Also, its **Near Clipping** plane
    was readjusted in order to avoid displaying parts of the camera's 3D model geometry,
    and its **Audio Source** component was disabled so that it wouldn't clash with
    the main camera's component.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过将监控摄像头作为应用到**屏幕**上的**渲染纹理**的来源，实现了最终效果。为了便于重新定位，摄像头被设置为摄像头的3D模型的子对象。此外，其**近裁剪面**被重新调整，以避免显示摄像头3D模型几何形状的一部分，并且禁用了其**音频源**组件，以免与主摄像头的组件冲突。
- en: 'In addition to setting up the surveillance camera, two **Image Effects** were
    added to it: **Noise And Grain** and **Greyscale**. Together, these effects should
    make **Render Texture** look more like a cheap monitor''s screen.'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 除了设置监控摄像头外，还向其中添加了两个**图像效果**：**噪点和颗粒**和**灰度**。这些效果共同作用，应该使**渲染纹理**看起来更像廉价显示器的屏幕。
- en: Finally, our **screen** render texture was applied to the screen's 3D object's
    material (which had its shader changed to **Unlit/texture** so it could be seen
    in low/no light conditions, like a real monitor).
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们的**屏幕**渲染纹理被应用到屏幕的3D对象的材质上（其着色器被更改为**Unlit/texture**，以便在低/无光条件下可见，就像真实的显示器一样）。
