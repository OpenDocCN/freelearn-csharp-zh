["```cs\n[Theory]\n[InlineData(19)]\n[InlineData(20)]\n[InlineData(21)]\n[InlineData(22)]\n[InlineData(23)]\npublic void GivenEvening_ThenEveningMessage(int hour)\n{\n  // Arrange  \n  var eveningTime = new TestTimeManager();\n  eveningTime.SetDateTime(new DateTime(2017, 7, 13, hour, 0, 0));\n  var messageUtility = new MessageUtility(eveningTime);\n\n  // Act\n  var message = messageUtility.GetMessage();\n\n  // Assert\n  Assert.Equal(\"Good evening\", message);\n}\n```", "```cs\npublic string GetMessage()\n{\n  if (_timeManager.Now.Hour < 12)\n    return \"Good morning\";\n  if (_timeManager.Now.Hour <= 18)\n    return \"Good afternoon\";\n  return \"Good evening\";\n}\n```", "```cs\n[Fact]\npublic void GivenNonDivisibleGreaterThan1ThenNumberNotFound()\n{\n  // Arrange\n  // Act\n  var result = FizzBuzz(2);\n  // Assert\n  Assert.Equal(\"Number not found\", result);\n}\n```", "```cs\nprivate object FizzBuzz(int value)\n{\n  if (value % 15 == 0)\n    return \"FizzBuzz\";\n  if (value % 5 == 0)\n    return \"Buzz\";\n  if (value % 3 == 0)\n    return \"Fizz\";\n  if (value == 2)\n    return \"Number not found\";\n}\n```", "```cs\n[Theory]\n[InlineData(2)]\n[InlineData(4)]\n[InlineData(7)]\n[InlineData(8)]\npublic void GivenNonDivisibleGreaterThan1ThenNumberNotFound(int number)\n{\n  // Arrange\n  // Act\n  var result = FizzBuzz(number);\n  // Assert\n  Assert.Equal(\"Number not found\", result);\n}\n```", "```cs\nprivate object FizzBuzz(int value)\n{\n  if (value % 15 == 0)\n    return \"FizzBuzz\";\n  if (value % 5 == 0)\n    return \"Buzz\";\n  if (value % 3 == 0)\n    return \"Fizz\";\n  return value == 1 ? (object)value : \"Number not found\";\n}\n```", "```cs\n[Fact(Skip = \"Yak shaving - no longer needed\")]\npublic void CompleteTodoExists()\n{\n  // Arrange\n  var todo = new TodoList();\n  var item = new Todo();\n\n  todo.AddTodo(item);\n\n  // Act\n  todo.Complete(item);\n}\n```", "```cs\npublic class TodoListCompleteTests\n{\n  [Fact]\n  public void ItRemovesAnItemFromTheList()\n  {\n    // Arrange\n    var todo = new TodoList();\n    var item = new Todo();\n\n    todo.AddTodo(item);\n    // Act\n    todo.Complete(item);\n    // Assert\n    Assert.Equal(0, todo.Items.Count());\n  }\n}\n```", "```cs\npublic void Complete(Todo item)\n{\n  _items.Remove(item);\n}\n```", "```cs\npublic class TodoListCompleteTests\n{\n  [Fact]\n  public void ItHidesAnItemFromTheList()\n  {\n    // Arrange\n    var todo = new TodoList();\n    var item = new Todo { Description = \"Test Todo\" };\n\n    todo.AddTodo(item);\n\n    // Act\n    todo.Complete(item);\n\n    // Assert\n    Assert.Equal(0, todo.Items.Count());\n  }\n\n  [Fact]\n  public void ItMarksAnItemComplete()\n  {\n    // Arrange\n    var todo = new TodoList();\n    var item = new Todo { Description = \"Test Todo\" };\n\n    todo.AddTodo(item);\n\n    // Act\n    todo.Complete(item);\n\n    // Assert\n    Assert.True(item.IsComplete);\n  }\n\n  [Fact]\n  public void ItShowsCompletedItems()\n  {\n    // Arrange\n    var todo = new TodoList();\n    var item = new Todo { Description = \"Test Todo\" };\n\n    todo.ShowCompleted = true;\n    todo.AddTodo(item);\n\n    // Act\n    todo.Complete(item);\n\n    // Assert\n    Assert.Equal(1, todo.Items.Count());\n  }\n}\n```", "```cs\n[Fact(Skip = \"Yak shaving - no longer needed\")]\npublic void ShowCompletedExists()\n{\n  // Arrange\n  var todo = new TodoList();\n\n  // Act\n  todo.ShowCompleted = true;\n}\n```", "```cs\n[Fact]\npublic void ItHasIsComplete()\n{\n  // Arrange\n  var todo = new Todo();\n\n  // Act\n  todo.IsComplete = true;\n}\n```", "```cs\ninternal class Todo\n{\n  public bool IsComplete { get; set; }\n  public string Description { get; set; }\n\n  internal void Validate()\n  {\n    Description = Description ?? throw new DescriptionRequiredException();\n  }\n}\n```", "```cs\ninternal class TodoList\n{\n  private readonly List<Todo> _items = new List<Todo>();\n\n  public IEnumerable<Todo> Items => _items.Where(t => !t.IsComplete || ShowCompleted);\n\n  public bool ShowCompleted { get; set; }\n\n  public void AddTodo(Todo item)\n  {\n    item = item ?? throw new ArgumentNullException();\n    item.Validate();\n    _items.Add(item);\n  }\n\n  public void Complete(Todo item)\n  {\n    item.IsComplete = true;            \n  }        \n}\n```", "```cs\npublic Models.SpeakerDetail Get(int id)\n{\n  var speaker = _repository.Get(id);\n\n  if (speaker == null || speaker.IsDeleted || speaker.IsActive)\n  {\n    throw new SpeakerNotFoundException(id);\n  }\n\n  var gravatar = _gravatarService.GetGravatar(speaker.EmailAddress);\n\n  return new Models.SpeakerDetail\n  {\n    Id = speaker.Id,\n    Name = speaker.Name,\n    Location = speaker.Location,\n    Gravatar = gravatar\n  };\n}\n```", "```cs\npublic class Speaker\n{\n  public int Id { get; set; }\n\n  [Required]\n  [StringLength(50)]\n  public string Name { get; set; }\n\n  [Required]\n  [StringLength(50)]\n  public string Location { get; set; }\n\n  [Required]\n  [StringLength(255)]\n  public string EmailAddress { get; set; }\n\n  public bool IsDeleted { get; set; }\n\n  public bool IsActive { get; set; }\n}\n```", "```cs\n[Fact]\npublic void GivenSpeakerIsNotActiveThenSpeakerNotFoundException()\n{\n  // Arrange\n  var expectedSpeaker = SpeakerFactory.Create(_fakeRepository);\n  expectedSpeaker.IsActive = false;\n  var service = new SpeakerService(_fakeRepository, _fakeGravatarService);\n  // Act\n  var exception = Record.Exception(() => service.Get(expectedSpeaker.Id));\n  // Assert\n  Assert.IsAssignableFrom<SpeakerNotFoundException>(exception);\n}\n```", "```cs\npublic Models.SpeakerDetail Get(int id)\n{\n  var speaker = _repository.Get(id);\n\n  if (speaker == null || speaker.IsDeleted || !speaker.IsActive)\n  {\n    throw new SpeakerNotFoundException(id);\n  }\n\n  var gravatar = _gravatarService.GetGravatar(speaker.EmailAddress);\n\n  return new Models.SpeakerDetail\n  {\n    Id = speaker.Id,\n    Name = speaker.Name,\n    Location = speaker.Location,\n    Gravatar = gravatar\n  };\n}\n```", "```cs\npublic bool IsActive { get; set; } = true;\n```", "```cs\nit('sorts speakers by rank', () => {\n   // Arrange\n   const initialState = [];\n   const speaker1 = { id: 'test-speaker-1', firstName: 'Test 1', lastName: 'Speaker', rank: 1};\n   const speaker2 = { id: 'test-speaker-2', firstName: 'Test 2', lastName: 'Speaker', rank: 2};\n   const action = actions.getSpeakersSuccess([speaker1, speaker2]);\n\n   // Act\n   const newState = speakersReducer(initialState, action);\n\n   // Assert\n   expect(newState).to.have.lengthOf(2);\n   expect(newState[0]).to.deep.equal(speaker2);\n });\n```", "```cs\nexport function speakersReducer(state = [], action) {\n   switch(action.type) {\n     case types.GET_SPEAKERS_SUCCESS:\n       return action.speakers.sort((a, b) => {\n         return b.rank > a.rank;\n       });\n     default:\n       return state;\n   }\n }\n```"]