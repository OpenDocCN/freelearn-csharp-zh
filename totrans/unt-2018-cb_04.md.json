["```cs\nusing UnityEngine; \n\n[RequireComponent(typeof(AudioSource))] \npublic class PlaySounds : MonoBehaviour  \n{ \n    public AudioClip clipEatCherry; \n    public AudioClip clipExtraLife; \n\n    private AudioSource audioAudioSource; \n\n    void Awake() { \n        audioAudioSource = GetComponent<AudioSource>(); \n    } \n\n    void Update() { \n        if (Input.GetKey(KeyCode.UpArrow))\n            audioAudioSource.PlayOneShot(clipEatCherry); \n\n        if (Input.GetKey(KeyCode.DownArrow)) \n            audioAudioSource.PlayOneShot(clipExtraLife); \n    } \n}\n```", "```cs\nVector3 location = new Vector3(10, 10, 10); \nAudioSource.PlayClipAtPoint(soundClipToPlay, location); \n```", "```cs\nusing UnityEngine; \n\npublic class MusicManager : MonoBehaviour  { \n    public AudioSource audioSourceMedieval; \n    public AudioSource audioSourceArcade; \n\n    void Update() { \n        if (Input.GetKey(KeyCode.RightArrow)){ \n            if (audioSourceMedieval.time > 0) \n                audioSourceMedieval.UnPause(); \n            else \n                audioSourceMedieval.Play(); \n        } \n\n        if (Input.GetKey(KeyCode.LeftArrow)) \n            audioSourceMedieval.Pause(); \n\n        if (Input.GetKey(KeyCode.UpArrow)){ \n            if (audioSourceArcade.time > 0) \n                audioSourceArcade.UnPause(); \n            else \n                audioSourceArcade.Play(); \n        } \n\n        if (Input.GetKey(KeyCode.DownArrow)) \n            audioSourceArcade.Pause(); \n    } \n} \n```", "```cs\nusing UnityEngine; \n\npublic class MusicManager : MonoBehaviour { \n    public AudioClip clipMedieval; \n    public AudioClip clipArcade; \n\n    private AudioSource audioSourceMedieval; \n    private AudioSource audioSourceArcade; \n\n    void Awake() { \n        audioSourceMedieval = CreateAudioSource(clipMedieval, true); \n        audioSourceArcade = CreateAudioSource(clipArcade, false); \n    } \n\n    private AudioSource CreateAudioSource(AudioClip audioClip, bool startPlayingImmediately) { \n        GameObject audioSourceGO = new GameObject(); \n           audioSourceGO.transform.parent = transform; \n        audioSourceGO.transform.position = transform.position; \n        AudioSource newAudioSource = audioSourceGO.AddComponent<AudioSource>() as AudioSource; \n        newAudioSource.clip = audioClip; \n        if(startPlayingImmediately) \n            newAudioSource.Play(); \n\n        return newAudioSource; \n    } \n\n    void Update(){ \n        if (Input.GetKey(KeyCode.RightArrow)){ \n            if (audioSourceMedieval.time > 0) \n                audioSourceMedieval.UnPause(); \n            else \n                audioSourceMedieval.Play(); \n        } \n\n        if (Input.GetKey(KeyCode.LeftArrow)) \n            audioSourceMedieval.Pause(); \n\n        if (Input.GetKey(KeyCode.UpArrow)){ \n            if (audioSourceArcade.time > 0) \n                audioSourceArcade.UnPause(); \n            else \n                audioSourceArcade.Play();             \n        } \n\n        if (Input.GetKey(KeyCode.DownArrow)) \n            audioSourceArcade.Pause(); \n   } \n} \n```", "```cs\nusing UnityEngine; \n\npublic static class ExtensionMethods { \n    public static AudioSource CreateAudioSource(this MonoBehaviour parent, AudioClip audioClip, bool startPlayingImmediately) \n    { \n         GameObject audioSourceGO = new GameObject(\"music-player\"); \n         audioSourceGO.transform.parent = parent.transform; \n         audioSourceGO.transform.position = parent.transform.position; \n         AudioSource newAudioSource = audioSourceGO.AddComponent<AudioSource>() as AudioSource; \n         newAudioSource.clip = audioClip; \n\n         if (startPlayingImmediately) \n               newAudioSource.Play(); \n\n         return newAudioSource; \n    } \n} \n```", "```cs\nvoid Awake() { \n   audioSourceMedieval = this.CreateAudioSource(clipMedieval, true); \n   audioSourceArcade = this.CreateAudioSource(clipArcade, false); \n} \n```", "```cs\nusing UnityEngine; \n\npublic class DelayedSoundManager : MonoBehaviour { \n    public AudioSource audioSourcePacmandMusic; \n    public AudioSource audioSourceDies; \n\n    public void ACTION_PlayMusicNow() { \n        audioSourcePacmandMusic.Play(); \n    } \n\n    public void ACTION_PlayDiesSoundAfterDelay() { \n        float delay = 1.0F; \n        audioSourceDies.PlayDelayed(delay); \n    } \n} \n```", "```cs\nusing UnityEngine; \nusing UnityEngine.UI; \n\npublic class WaitToFinishBeforePlaying : MonoBehaviour  { \n   public AudioSource audioSource; \n   public Text buttonText; \n\n   void Update() { \n         string statusMessage = \"Play sound\"; \n         if(audioSource.isPlaying ) \n               statusMessage = \"(sound playing)\"; \n\n         buttonText.text = statusMessage; \n   } \n\n   public void ACTION_PlaySoundIfNotPlaying() { \n         if( !audioSource.isPlaying ) \n               audioSource.Play(); \n   } \n} \n```", "```cs\nusing UnityEngine; \nusing UnityEngine; \n\npublic class AudioDestructBehaviour : MonoBehaviour { \n   private AudioSource audioSource; \n\n   void Awake() { \n         audioSource = GetComponent<AudioSource>(); \n   } \n\n   private void Update() { \n         if( !audioSource.isPlaying ) \n               Destroy(gameObject); \n   } \n} \n```", "```cs\nusing UnityEngine; \n\npublic class ButtonActions : MonoBehaviour { \n   public AudioSource audioSource; \n\n   public AudioDestructBehaviour audioDestructScriptedObject; \n\n   public void ACTION_PlaySound() { \n         if( !audioSource.isPlaying ) \n               audioSource.Play(); \n   } \n\n   public void ACTION_DestroyAfterSoundStops(){ \n         audioDestructScriptedObject.enabled = true; \n   } \n} \n```", "```cs\nusing UnityEngine; \n\npublic class Metronome : MonoBehaviour { \n    public AudioSource audioSourceTickBasic; \n    public AudioSource audioSourceTickAccent; \n\n    public double bpm = 140.0F; \n    public int beatsPerMeasure = 4; \n\n    private double nextTickTime = 0.0F; \n    private int beatCount; \n    private double beatDuration; \n\n    void Start() { \n        beatDuration = 60.0F / bpm; \n        beatCount = beatsPerMeasure; // so about to do a beat \n        double startTick = AudioSettings.dspTime; \n        nextTickTime = startTick; \n    } \n\n    void Update() { \n        if (IsNearlyTimeForNextTick()) \n            BeatAction(); \n    } \n\n    private bool IsNearlyTimeForNextTick() { \n        float lookAhead = 0.1F; \n        if ((AudioSettings.dspTime + lookAhead) >= nextTickTime) \n            return true; \n        else \n            return false; \n    } \n\n    private void BeatAction() { \n        beatCount++; \n        string accentMessage = \"\"; \n\n        if (beatCount > beatsPerMeasure) \n            accentMessage = AccentBeatAction(); \n        else \n            audioSourceTickBasic.PlayScheduled(nextTickTime); \n\n        nextTickTime += beatDuration; \n        print(\"Tick: \" + beatCount + \"/\" + signatureHi + accentMessage); \n    } \n\n    private string AccentBeatAction() { \n        audioSourceTickAccent.PlayScheduled(nextTickTime); \n        beatCount = 1; \n        return \" -- ACCENT ---\"; \n    } \n} \n```", "```cs\nvoid Awake() { \n   audioSourceTickBasic = this.CreateAudioSource(clipTickBasic, false); \n   audioSourceTickBasic.volume = 0.5F; \n\n   audioSourceTickAccent = this.CreateAudioSource(clipTickAccent, false); \n   audioSourceTickAccent.volume = 1.00F; \n} \n```", "```cs\nusing UnityEngine; \n\npublic class ChangePitch : MonoBehaviour{ \n   public float acceleration = 0.05f; \n   public float minSpeed = 0.0f; \n   public float maxSpeed = 2.0f; \n   public float animationSoundRatio = 1.0f; \n\n   private float speed = 0.0f; \n   private Animator animator; \n   private AudioSource audioSource; \n\n    private void Awake() { \n        animator = GetComponent<Animator>(); \n        audioSource = GetComponent<AudioSource>(); \n    } \n\n    void Start() { \n         speed = animator.speed; \n        AccelerateRocket (0); \n   }      \n\n   void Update() { \n         if (Input.GetKey (KeyCode.Alpha1)) \n            AccelerateRocket(acceleration); \n\n         if (Input.GetKey (KeyCode.Alpha2)) \n            AccelerateRocket(-acceleration); \n   } \n\n   public void AccelerateRocket(float acceleration) { \n         speed += acceleration; \n         speed = Mathf.Clamp(speed,minSpeed,maxSpeed); \n         animator.speed = speed; \n         float soundPitch = animator.speed * animationSoundRatio; \n         audioSource.pitch = Mathf.Abs(soundPitch); \n   } \n} \n```", "```cs\npublic void AccelerateRocket(float acceleration) { \n   speed += acceleration;  \n   speed = Mathf.Clamp(speed, minSpeed, maxSpeed); \n\n   animator.SetFloat(\"Speed\", speed); \n   float soundPitch = speed * animationSoundRatio; \n   audioSource.pitch = Mathf.Abs(soundPitch); \n} \n```", "```cs\nusing UnityEngine; \nusing UnityEngine.Audio; \n\npublic class VolumeControl : MonoBehaviour { \n    public GameObject panel; \n   public AudioMixer myMixer; \n   private bool isPaused = false; \n\n   void Start(){ \n        panel.SetActive(false); \n\n        ON_CHANGE_OverallVol(0.01F); \n        ON_CHANGE_MusicVol(0.01F); \n        ON_CHANGE_FxVol(0.01F); \n   } \n\n   void Update() { \n         if (Input.GetKeyUp (KeyCode.Escape)) { \n               panel.SetActive(!panel.activeInHierarchy); \n\n               if(isPaused) \n                     Time.timeScale = 1.0f; \n               else \n                     Time.timeScale = 0.0f; \n\n               isPaused = !isPaused; \n         }            \n   }      \n\n    public void ON_CHANGE_OverallVol(float vol) { \n        myMixer.SetFloat(\"OverallVolume\", Mathf.Log10(vol) * 20f); \n    } \n\n   public void ON_CHANGE_MusicVol(float vol) { \n         myMixer.SetFloat (\"MusicVolume\", Mathf.Log10(vol) * 20f); \n   } \n\n   public void ON_CHANGE_FxVol(float vol) { \n         myMixer.SetFloat (\"FxVolume\", Mathf.Log10(vol) * 20f); \n   } \n} \n```", "```cs\nmyMixer.SetFloat (\"OverallVolume \", Mathf.Log10(vol) * 20f); \n```", "```cs\nusing UnityEngine; \nusing UnityEngine.Audio; \n\npublic class SnapshotTrigger : MonoBehaviour { \n   public AudioMixerSnapshot snapshot; \n   public float crossfade; \n\n   private void OnTriggerEnter(Collider other) { \n         snapshot.TransitionTo (crossfade); \n   } \n} \n```", "```cs\nusing UnityEngine; \n\npublic class SpectrumCubes : MonoBehaviour  \n{ \n    const int NUM_SAMPLES = 512; \n    public Color displayColor; \n    public float multiplier = 5000; \n    public float startY; \n    public float maxHeight = 50; \n    private AudioSource audioSource; \n    private float[] spectrum = new float[NUM_SAMPLES]; \n    private GameObject[] cubes = new GameObject[NUM_SAMPLES]; \n\n    void Awake() { \n        audioSource = GetComponent<AudioSource>(); \n        CreateCubes(); \n    } \n\n    void Update() { \n        audioSource.GetSpectrumData(spectrum, 0, FFTWindow.BlackmanHarris); \n        UpdateCubeHeights(); \n    } \n\n    private void UpdateCubeHeights() { \n        for (int i = 0; i < NUM_SAMPLES; i++) \n        { \n            Vector3 oldScale = cubes[i].transform.localScale; \n            Vector3 scaler = new Vector3(oldScale.x, HeightFromSample(spectrum[i]), oldScale.z); \n            cubes[i].transform.localScale = scaler; \n            Vector3 oldPosition = cubes[i].transform.position; \n            float newY = startY + cubes[i].transform.localScale.y / 2; \n            Vector3 newPosition = new Vector3(oldPosition.x, newY, oldPosition.z); \n            cubes[i].transform.position = newPosition; \n        } \n    } \n\n    private float HeightFromSample(float sample) { \n        float height = 2 + (sample * multiplier); \n        return Mathf.Clamp(height, 0, maxHeight); \n    } \n\n    private void CreateCubes() { \n        for (int i = 0; i < NUM_SAMPLES; i++) { \n            GameObject cube = GameObject.CreatePrimitive(PrimitiveType.Cube); \n            cube.transform.parent = transform; \n            cube.name = \"SampleCube\" + i; \n\n            Renderer cubeRenderer = cube.GetComponent<Renderer>(); \n            cubeRenderer.material = new Material(Shader.Find(\"Specular\")); \n            cubeRenderer.sharedMaterial.color = displayColor; \n\n            float x = 0.9f * i; \n            float y = startY; \n            float z = 0; \n            cube.transform.position = new Vector3(x, y, z); \n\n            cubes[i] = cube; \n        } \n    } \n\n} \n```", "```cs\nusing UnityEngine; \n\npublic class LoopScheduler : MonoBehaviour { \n    public float bpm = 140.0F; \n    public int numBeatsPerSegment = 16; \n    public AudioSource[] audioSources = new AudioSource[4]; \n    private double nextEventTime; \n    private int nextLoopIndex = 0; \n    private int numLoops; \n    private float numSecondsPerMinute = 60F; \n    private float timeBetweenPlays; \n\n    void Start() { \n        numLoops = audioSources.Length; \ntimeBetweenPlays = numSecondsPerMinute / bpm * numBeatsPerSegment; \n        nextEventTime = AudioSettings.dspTime; \n    } \n\n    void Update() { \n        double lookAhead = AudioSettings.dspTime + 1.0F; \n        if (lookAhead > nextEventTime) \n            StartNextLoop(); \n\n        PrintLoopPlayingStatus(); \n    } \n\n    private void StartNextLoop() { \n        audioSources[nextLoopIndex].PlayScheduled(nextEventTime); \n        nextEventTime += timeBetweenPlays; \n\n        nextLoopIndex++; \n        if (nextLoopIndex >= numLoops) \n            nextLoopIndex = 0; \n    } \n\n    private void PrintLoopPlayingStatus(){ \n        string statusMessage = \"Sounds playing: \"; \n        int i = 0; \n\n        while (i < numLoops) { \n            statusMessage += audioSources[i].isPlaying + \" \"; \n            i++; \n        } \n\n        print(statusMessage); \n    } \n} \n```"]