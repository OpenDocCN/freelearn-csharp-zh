- en: Chapter 2. Using Different Colliders for Interaction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As mentioned in the previous chapter, colliders are among one of the main components
    of Unity3D. Using colliders, we define a shape for the object that helps in collision
    detection. In this chapter, we will learn about colliders. We will learn about
    the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Primitive colliders and their implementation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nonprimitive colliders and their implementations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uses of Trigger Colliders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Editing Polygon Collider 2D
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's have a look at the primitive and nonprimitive colliders in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Primitive colliders
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Primitive colliders are basic colliders or, in other words, we can say that
    these colliders are the earliest of their kind. There are three primitive colliders
    in Unity3D, and apart from these three colliders, Unity also provides Mesh Collider,
    which helps us when we need to provide a collision shape for a complex shape.
  prefs: []
  type: TYPE_NORMAL
- en: Types of primitive colliders
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As shown in the following figure, there are three primitive colliders: Box
    Collider, Sphere Collider, and Capsule Collider.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Types of primitive colliders](img/00009.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We will learn the uses and types of primitive colliders in detail with examples.
  prefs: []
  type: TYPE_NORMAL
- en: Box Collider 3D
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Box Collider contains the cube shape and can be implemented for cube-shaped
    game objects, such as boxes, walls, and doors, that resemble the shape of a cube.
  prefs: []
  type: TYPE_NORMAL
- en: Example – implementation of Box Collider
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here, we will see how we can implement Box Collider in the following scene
    by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Let's create a new scene as shown in the following screenshot:![Example – implementation
    of Box Collider](img/00010.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Cube** option by navigating to **GameObject** | **Create Other**
    as shown in the following screenshot, and then open the **Inspector** panel:![Example
    – implementation of Box Collider](img/00011.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the following screenshot, you will see the **Box Collider** checkbox inside
    the **Inspector** panel; make sure it is checked:![Example – implementation of
    Box Collider](img/00012.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Inspector** panel, select the **Is Trigger** checkbox to make it trigger
    the collider and fire trigger events.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can decide its shape and size using the dimension here; it should be relative
    to the game object transform and size.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Material**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Box Collider has the Material property that determines the friction and bounciness
    of the game object, but it is irrelevant if we choose the Trigger Collider.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the previous example, we learned how we can implement Box Collider for cube-shaped
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: Box Collider 2D
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a 2D game object, Unity provides Box Collider 2D to handle the collision.
    This collider is of the rectangle shape and can be implemented on a sprite with
    given dimensions and coordinates. Like the 3D Box Collider, this collider too
    possesses the Is Trigger and Material properties along with the Size and Center
    properties.
  prefs: []
  type: TYPE_NORMAL
- en: Sphere Collider 3D
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For game objects that have the shape of a sphere, we use Unity3D's Sphere Collider.
  prefs: []
  type: TYPE_NORMAL
- en: Example – implementation of Sphere Collider
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here, we will see how we can implement Sphere Collider in the scene using the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As shown in the following screenshot, go to **GameObject** and select **Create
    Other** where you will get a drop-down list; now, select a **Sphere** game object
    and open the **Inspector** panel:![Example – implementation of Sphere Collider](img/00013.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the **Inspector** panel, you will see **Sphere Collider**; make sure
    **Sphere Collider** is checked:![Example – implementation of Sphere Collider](img/00014.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Inspector** panel, check **Is Trigger** to make it trigger a collider
    and fire trigger events.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can decide its shape and size using the dimension and radius; here, it should
    be relative to the game object transform and size.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Circle Collider 2D
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For 2D objects, we implement Circle Collider instead of Sphere Collider for
    circle-shaped game object with a given dimension and coordinate. It has all properties
    which are in Sphere Collider such as Is Trigger and Radius.
  prefs: []
  type: TYPE_NORMAL
- en: Capsule Collider 3D
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Capsule Collider is used for capsule-shaped game objects. This is commonly used
    for creating a character game object.
  prefs: []
  type: TYPE_NORMAL
- en: Example – implementation of Capsule Collider
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here, we will see how we can implement Capsule Collider in the scene using
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As shown in the following screenshot, select the **Capsule** game object and
    then open the **Inspector** panel:![Example – implementation of Capsule Collider](img/00015.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the **Inspector** panel, you will see **Capsule Collider**; make sure
    that it is checked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Inspector** panel, check **Is Trigger** to make game object trigger
    a collider and fire trigger events.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Our capsule object will look as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Example – implementation of Capsule Collider](img/00016.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: As shown in the following screenshot, we can decide its shape and size using
    the dimension and radius; here, it should be relative to game object transform
    and size:![Example – implementation of Capsule Collider](img/00017.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Height** as the length of the capsule body.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As shown in the following screenshot, give a direction relative to the game
    object:![Example – implementation of Capsule Collider](img/00018.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By choosing **X-Axis**, **Y-Axis**, or **Z-Axis**, we give a direction to the
    game object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Mesh Collider
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using mesh, Mesh Collider defines the shape of a collision. Although we use
    it for accurate shape definition for collision, this is expensive in terms of
    performance. We should avoid the use of Mesh Collider, and wherever we can, use
    primitive collider (Box, Sphere, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Mesh Collider should be avoided wherever possible by using complex colliders
    in order to optimize the performance.
  prefs: []
  type: TYPE_NORMAL
- en: Example – implementation of Mesh Collider
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here, we will see how we can implement Mesh Collider in the scene using the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download or use any existing assets you have. I have downloaded a free spider
    asset from Unity3D's assets store.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the assets in the scene; and you will see them appear in the scene. As
    shown in the following screenshot, you can see your spider:![Example – implementation
    of Mesh Collider](img/00019.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, as shown in the following screenshot, we will apply Mesh Collider. Navigate
    to **Component** | **Physics** | **Mesh Collider**:![Example – implementation
    of Mesh Collider](img/00020.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As shown in the screenshot, select the mesh where we have to implement Mesh
    Collider:![Example – implementation of Mesh Collider](img/00021.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As shown in the following screenshot, in the **Inspector** panel, you will see
    a Is **Trigger** checkbox, which is unchecked by default. Check **Is Trigger**
    to make it trigger a collider and fire trigger events:![Example – implementation
    of Mesh Collider](img/00022.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can mark **Convex** as true if we want this game object to collide with another
    Mesh Collider.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give a direction relative to the game object:![Example – implementation of Mesh
    Collider](img/00023.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As shown in the preceding screenshot, by selecting the game object, we open
    the **Inspector** panel and we can give a direction.
  prefs: []
  type: TYPE_NORMAL
- en: Polygon Collider 2D
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For 2D objects where the shape of the game object is irregular, Polygon Collider
    2D is used. To edit the collider shape, drag the sprite asset onto the Polygon
    Collider 2D component in the **Inspector** panel, hold the *shift* key and try
    to edit the vertex or edges.
  prefs: []
  type: TYPE_NORMAL
- en: Example – implementation of Polygon Collider 2D
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The following steps will guide you through to implement Polygon Collider 2D:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new scene and name it `Polygon Collider 2D example`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Hierarchy** pane, click on **Create** and select **Sprite** from the
    drop-down list to create an empty sprite renderer. Name this sprite renderer `Rock`
    in the **Inspector** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By default, it will be represented by a box that is not appropriate, so we will
    create a Polygon Collider instead.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Sprite collection** and click on **Open Editor**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Rock Sprite** option in the **Sprite Collection** editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Collider Type** as **Polygon**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch the **Sprite view** option to collider edit mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on an edge to add a control point. Click and drag this to position
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: We can edit the polygon's shape directly by holding down the *shift* key as
    you move the mouse over an edge or vertex in the **Scene** view. You can move
    an existing vertex by shift-dragging when the mouse is over that vertex. If you
    shift-drag while the mouse is over an edge, a new vertex will be created at the
    pointer's location. You can remove a vertex by holding down the *control*/*command*
    key while clicking on it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Edit the collider until you get desired result.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edge Collider 2D
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This 2D collider is used where the collision shape for a 2D game object requires
    precision. Using this collider, a shape is made of line segments. Using the *shift*
    and *control* keys, we can edit the shape of the collider. We can edit Edge Collider
    2D in a similar way as shown in the preceding section on Polygon Collider 2D.
  prefs: []
  type: TYPE_NORMAL
- en: Nonprimitive colliders
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nonprimitive colliders originated from primitive colliders. Especially for vehicles,
    Unity provides Wheel Collider, and for terrains, a Terrain Collider component.
    By combining various primitive colliders, we create compound colliders.
  prefs: []
  type: TYPE_NORMAL
- en: Types of nonprimitive colliders
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As shown in the following figure, nonprimitive colliders are specific for wheel
    objects and terrains. Using a Wheel Collider, we can easily provide a collision
    shape for vehicles. Similarly, using Terrain Collider collision implementation
    for different shapes becomes easy.
  prefs: []
  type: TYPE_NORMAL
- en: '![Types of nonprimitive colliders](img/00024.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Wheel Collider
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is a nonprimitive collider used for wheels of a vehicle. Wheel Colliders
    have motorTorque, brakeTorque, radius, and steerAngle properties. Using a friction
    model, Wheel Colliders are able to give a realistic effect.
  prefs: []
  type: TYPE_NORMAL
- en: Example – implementation of Wheel Colliders
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here, we will see how we can implement a compound collider in the scene using
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Hierarchy** pane, click on **Create** and select the **Cylinder** game
    object. Open the **Inspector** panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add **Wheel Collider** from **Component**, as shown in the following screenshot:![Example
    – implementation of Wheel Colliders](img/00025.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Play with the properties to give a realistic effect.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s open the **Inspector** panel. We will see some different properties;
    here, using **Mass**, we decide the mass of the wheel game object, which must
    be greater than 0\. In this example, I have used `1`. We can set the radius by
    using the **Radius** property that defines the radius of the wheel, measured in
    local space. Have a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Example – implementation of Wheel Colliders](img/00026.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As shown in the preceding screenshot, there are other properties that are also
    used to give a realistic wheel effect; for example, the wheel's collision detection
    is performed by casting a ray from the center ([http://docs.unity3d.com/ScriptReference/WheelCollider-center.html](http://docs.unity3d.com/ScriptReference/WheelCollider-center.html))
    down the local *y* axis for which we use the Center property. We can extend the
    wheel's radius downwards by the `suspensionDistance` ([http://docs.unity3d.com/ScriptReference/WheelCollider-suspensionDistance.html](http://docs.unity3d.com/ScriptReference/WheelCollider-suspensionDistance.html))
    amount. By changing `forwardFriction` ([http://docs.unity3d.com/ScriptReference/WheelCollider-forwardFriction.html](http://docs.unity3d.com/ScriptReference/WheelCollider-forwardFriction.html))
    and `sidewaysFriction` ([http://docs.unity3d.com/ScriptReference/WheelCollider-sidewaysFriction.html](http://docs.unity3d.com/ScriptReference/WheelCollider-sidewaysFriction.html))
    based on what material the wheel is hitting, we simulate different road materials.
  prefs: []
  type: TYPE_NORMAL
- en: Static collider
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Static collider is used wherein a collision movement is not required. A static
    collider contains a nontrigger collider without a Rigidbody. This type of game
    object that does not have any Rigidbody will not get affected by Physics. Static
    colliders are mostly used to create boundaries or blockages.
  prefs: []
  type: TYPE_NORMAL
- en: Rigidbody Collider
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Rigidbody Collider is exactly the opposite of a static collider; it is a
    collider with Rigidbody components. Rigidbody Collider will collide with a static
    collider to create collision events and will get influenced by Physics.
  prefs: []
  type: TYPE_NORMAL
- en: Kinematic Rigidbody Collider
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A Kinematic Rigidbody Collider is a collider that has the **Is Kinematic** flag
    `true`. Mostly, it is used where animation is required. Also, the Kinematic Rigidbody
    Collider is not influenced by the script.
  prefs: []
  type: TYPE_NORMAL
- en: Trigger Collider
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Trigger Collider is an invisible collider that fires events without any
    physical interaction. We can define nonphysical area where Trigger Collider will
    fire event on interaction with game object.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Triggers should be used where a quick response is required. For games such as
    *Tower Defense* where a quick response is required, Trigger Colliders are very
    useful.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following events are called:'
  prefs: []
  type: TYPE_NORMAL
- en: '`OnTriggerEnter`: This event is called when the object just enters'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OnTriggerStay`: This event is called when the object is inside the trigger'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OnTriggerExit`: This event is called when the object leaves the trigger'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When do we use Trigger Collider? As shown in the following figure, mainly,
    we use Trigger Collider for two scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Trigger Collider](img/00027.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: An example of proximity triggers
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'During the development of one of my games, I had to create a game play where
    when a player reaches the door, the door should open. In this case, I needed to
    put a Trigger Collider in front of the door. When the player reaches the door,
    it fires the `OnTriggerEnter` event where I was executing game logic accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, we can use `OnTriggerStay` and `OnTriggerExit`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: An example of radius triggers
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In some games such as *Tower Defense*, we are required to spawn troops or shoot
    enemies in a range; hence, we create a radius. When the game object enters within
    the defined radius, `OnTriggerEnter` events get fired:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, we can use `OnTriggerStay` and `OnTriggerExit`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Warning**'
  prefs: []
  type: TYPE_NORMAL
- en: Trigger Colliders respond to raycasts. Make sure your triggers are set to the
    Ignore Raycasts layer.
  prefs: []
  type: TYPE_NORMAL
- en: Compound colliders
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Instead of using Mesh Collider, sometimes it is better to use combined primitive
    colliders. For this, we create a parent-child hierarchy of colliders. Let's see
    this in the following example.
  prefs: []
  type: TYPE_NORMAL
- en: Example – implementation of compound colliders
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here, we will see how we can implement a compound collider in the following
    scene:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As shown in the following screenshot, select the **Capsule** and **Sphere**
    game objects and create a character shape:![Example – implementation of compound
    colliders](img/00028.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the **Inspector** panel, you will see **Sphere Collider** and **Capsule
    Collider**. Check the **Is Trigger** option for both to make it trigger a collider
    and fire trigger events.![Example – implementation of compound colliders](img/00029.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this section, we learned how we can use primitive colliders for a complex
    game object. We will learn more about animation and compound colliders in later
    chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We learned about the different types of colliders and their implementations,
    how we can implement primitive and nonprimitive colliders, and what their uses
    are. We also learned the use of Trigger Colliders. In the next chapter, we will
    learn about the Collision Matrix of colliders. We will see how we can implement
    the Collision Matrix with nonscript-based and script-based examples. We will also
    learn about layer-based collision.
  prefs: []
  type: TYPE_NORMAL
