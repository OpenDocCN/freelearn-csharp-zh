- en: GameMaster and Game Mechanics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In chapters 1 through 4, we learned how to make some of the necessary components
    needed for the design and implementation of our RPG. For instance, you should
    have a good understanding of how to organize and arrange your player character
    and non-player character assets and components.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a breakdown of the chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: GameMaster
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing game settings and scenes
  id: totrans-4
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing scenes
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Improving GameMaster
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Level controller
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Audio controller
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Player data management
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PC class enhancements
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Character customization class update
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes to the UI controller
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we are going to make more adjustments and updates to everything
    we have done so far.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: GameMaster
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even though we have created a `GameMaster.cs` script, we have not really utilized
    it to manage our game. We have created bits and pieces of our game assets and
    used them to do quick testing. Now is the time to start looking at how to combine
    everything together and create a better game manager for our RPG.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few things that I want `GameMaster.cs` to perform. These are as
    follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Having a reference to the UI controller for each particular scene
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Having a reference to the player character in the scene
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Having a reference to the non-player character(s) in the scene
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Having a reference to the audio source for control
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There should always be one instance of the `GameMaster` class available
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we create our GameMaster, we will add or subtract some of the elements as
    we see fit. Let's start by integrating the User Interface with the GameMaster.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up your Main Menu scene. It should look something like the following screenshot:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00107.jpeg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshots display the main menu we have designed for our RPG:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00108.jpeg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
- en: It is pretty simple, just to illustrate the concept. When the player clicks
    the Options button, they will get the Options window, where they will have the
    ability to adjust the volume within the game. When they are done, they will click
    the close button and go back to the main menu.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a screenshot of the Hierarchy window for the Main Menu scene:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00109.jpeg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
- en: Managing game settings and audio
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Create an `Empty` GameObject and name it `uiController`. We now need to create
    a UI Controller script that will handle the user interaction. Create a new C#
    script and name it `UiController.cs`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: The scripts in this chapter will be updated and modified as we progress.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: 'A listing of the UI controller is as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Currently, we have just a few functions defined: `DisplaySettings()` and `MainVolume()`.
    The functions are really simple; they are referencing the UI components needed
    to display the settings panel, as well as to retrieve the value of the volume
    control slider. The information is then passed to the `GameMaster.cs` script for
    further processing.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to make several changes to the `GameMaster.cs` script. A listing of
    the code is as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This code needs a little bit of explanation. The first and most important concept
    to take away is the concept of a Singleton. This is done by first defining a static
    variable, which will be used to hold our `GameMaster` instance:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, in our `Awake()` function, we need the following code:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the `Awake()` function, we are checking to see if the `instance` variable
    has been initialized. It sets the `instance` variable once. The next check ensures
    that we always have one instance. In other words, if the `GameMaster` object gets
    instantiated a second time by mistake, it will destroy it. The last line of code, `DotDestroyOnLoad()`,
    will ensure that the GameObject does not get destroyed when we move from one scene
    to the next.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: In the `Start()` function, we are checking to see if `uiController` is present,
    and if it is, we get a reference to it. Once we have a reference to `uiController`,
    we make sure that the Settings panel is disabled by default, that is, hidden.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: The `MasterVolume()` function gets called from the `UIController.cs` script,
    which then passes the actual value from the slider defined to control the volume
    of the background music.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Managing scenes
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next item I want to make is to have the `GameMaster` control loading the
    different scenes for the game. Let''s look at how `GameMaster.cs` will look with
    the new addition of scene management:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We have already discussed what the `Awake()` function is doing, so let''s take
    a look at the next important function, `OnLevelWasLoaded()`. Take a look at the
    following code:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `OnLevelWasLoaded()` function is called by Unity after the scene was loaded.
    We are using this function in the `GameMaster` script to perform a few tasks.
    The first thing we do is get the current scene we are in. This information will
    be used later to determine what `GameMaster` will do.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: We check to see if we are in the character customization scene. This is where
    the player can customize the PC before they start playing the game. If we are
    in the character customization scene, we want to get a reference to the `Base`
    GameObject in the scene. If you recall, the `Base` GameObject has the `CharacterCutomization.cs`
    script attached to it, which is used to, well, customize the character.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: If we are in any other scene, then we want to get a reference to the player
    character, as well as the starting position of the player character at the beginning
    of the scene, if there is one.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: We then use the `DetermineLevel()` function to determine the level we are currently
    on, to make some more configurations.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: The two functions currently implemented for starting the game and loading the
    levels are handled by the `StartGame()` function and the `LoadLevel()` function.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `SceneName` class is designed to make it easier to refer to the scene names
    in the C# code. This makes it easier to chance the actual scene name within the
    project, but have a consistent call name in the code.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: This is all good so far, but we can try to make it better.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Improving GameMaster
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code we have so far works, but it is not very clean. Let's go ahead and
    structure the code a little better. Let's create a new script, called `GameLevelController.cs`.
    This new script will be handling the logic for our level management.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Level controller
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A listing of `GameLevelController.cs` is as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: What I have done is basically move all of the code that deals with level management
    into `GameLevelController.cs`. Our `GameMaster` script drives the LevelController
    class. We will see this a bit later.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Audio controller
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next code clean-up I want to do is for the audio. Let''s create a new script,
    called `GameAudioController.cs`. The code for the new script is as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The code is pretty straightforward. Now, let''s take a look at how `GameMaster.cs`
    looks:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As you can see, the code is easier to read, and it is also structured better.
    GameMaster is using the controllers to perform each specific task. This also makes
    it easier to maintain code for different tasks within our game. For instance,
    all of the audio-related code can be now implemented in the controller, and so
    on.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: 'For all this to work, you have to make sure that you have properly hooked up
    your `uiController` GameObject to communicate with the `UiController.cs` class
    when the user interacts with the Options/Settings menu, as shown in the following
    screenshot:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00110.jpeg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
- en: UI element events
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: 'Your project should also have the following Tags defined by now:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00111.jpeg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
- en: These are used within the C# code to identify GameObjects at runtime.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: Player data management
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have not saved the actual data representing the customization of our player.
    The next step is to enhance our `PlayerCharacter.cs` and `BarbarianCharacterCustomization.cs`
    scripts to actually save the selected data in our PC object.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: PC class enhancements
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To do this, we need to modify our `PlayerCharacter.cs` code. The new listing
    is as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We have defined several enumeration types that describe the different parts
    of the player character's customization. There are several advantages to using
    enumeration in our code, a few of them being named constants, the name describes
    what they are for, type safety, and it is easier to change the value of the enumeration
    without having to check a hundred different places within your code.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: As stated in previous chapters, the character customization code is heavily
    related to your character model and how you have rigged up your character model
    to be used in the game.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: You will need to modify the name of your UI elements to match the new code.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the following screenshot:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00112.jpeg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
- en: Hooking up UI element events
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: There are a few things you will need to configure to make sure the code works
    properly. First, you will need to name your UI elements properly to match the
    enumeration. The preceding screenshot illustrates one of the UI elements representing
    a shoulder pad.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: Character customization class update
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The events that drive character customization are attached to the `Base` prefab,
    which has the `CharacterCustomization.cs` script as a component. The `CharacterCustomization.cs`
    script is as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In the code listed, what we have done is add a new variable of type `PlayerCharacter`
    named `PlayerCharacterData`. The `PlayerCharacter` class is the player character
    class we have defined and enhanced to contain the data for our player character
    as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The next logic we need to implement is to detect which option the player has
    selected through the character customization UI, and appropriately set the data
    in the `PlayerCharacter` object. See the following code:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The implementation concept is the same for all the different parts of the player
    character that can be customized. One of them is as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The preceding code is for the customization of the body type of the player character.
    The first thing it tries to do is to parse and convert the value passed to the
    function by the UI component. Next it sets the `selectedClothing` variable in
    the `PlayerCharacter` object. If, for some reason, the value passed does not exist
    in the enumeration, we will assign the default value to the `selectedClothing`
    variable. There are also debug statements to give you feedback about the current
    value.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: Changes to the game level controller
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The game level controller will also need to be updated now, to make the necessary
    changes to the `GameMaster` object. We will need to update the `LoadLevel()` function
    as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This will make sure that GameMaster is updated with the proper player character
    data. Let's go ahead and test the code.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Testing
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Starting from the `Main Menu` scene, make sure that you have the following
    GameObjects in the scene: `uiController` and `_GameMaster`. The `uiController`
    GameObject should have `UiController.cs` attached, and `_GameMaster` should have
    the following components attached: `GameMaster.cs` and an `AudioSource` component
    that will be used for the background music.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: 'Have the `_GameMaster` GameObject selected in the Hierarchy window, and run
    the game. Select the Start Game button. This will load the character customization
    scene. The `_GameMaster` GameObject should still be selected. If not, go ahead
    and select it from the Hierarchy window, do some of the character customization,
    and click the Save button. Refer to the following screenshot:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00113.jpeg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
- en: The first level should have been loaded with your character and the customization
    you have made to your character in the previous step. So visually, your character
    has retained all of the customization you have done, and from a data point of
    view, when you look at the `_GameMaster` GameObject in the Inspector window, you
    will notice that the data has been saved properly, as shown in the preceding screenshot.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter was mostly code. We enhanced the `GameMaster` class to handle the
    game settings and scene management. We began the chapter by making `GameMaster`
    handle the user interface, the player character data, and the game settings, which
    currently is just the volume for the background music.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: We added a new UI element that displays the settings panel for the game. At
    the moment, it only contains the main volume control. Next, we added the necessary
    code in the `UiController` class and the `GameMaster` class to handle the display
    of the settings window, as well as the slider value passed from the UI component
    to `UiController` to the `GameMaster` class.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: We also made the `GameMaster` class into a singleton. A singleton in software
    engineering is a design pattern that restricts the instantiation of a class to
    one object. This pattern fits perfectly for `GameMaster`, as we only need to have
    one instance of it active at any given time throughout the lifespan of the game.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: We also looked at how to perform scene management. We defined a static class
    named `SceneName` that contains constant string variables identifying the scene
    references in our game.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: We then took the next step to improve `GameMaster` and the internal structure
    for our code. We created a new class, called `GameLevelController.cs` that handles
    the scene management, which in turn is driven by `GameMaster`. We practically
    took the logic for level handling from within the `GameMaster` class, and reworked
    and improved it in the `GameLevelController` class.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: Next we developed an `AudioController` class that basically manages the audio
    for our game. This class is also driven by `GameMaster`. By this time, `GameMaster`
    is a lean script that manages all of the other components.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: The next big challenge was how to handle the player character data. Specifically,
    how to save the character customization data for the player character internally,
    after the player has customized the character. In order to save the data, we had
    to modify the `PlayerCharacter.cs` class.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: We created several enumerations representing each part of the character that
    could be customized, such as the shoulder pad, the body type, the weapon type,
    the helmet type and so on. We used enumeration to make it easier to reference
    them within the code.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: This approach forced us to make some modifications to the existing character
    customization setup that we implemented previously. We had to update the UI components
    to reflect the enumeration defined for each customizable type, and we also had
    to modify the `BarbarianCharacterCustomization.cs` class to handle the new changes.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: The `BarbarianCharacterCustomization` class implemented a PC type variable to
    keep track of the customizations and finally pass the data along to `GameMaster`.
    During the process, we also improved the case handling of the `BarbarianCharacterCustomization`
    class for default values and so on.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we did a test run of the game to double-check everything worked as
    designed and implemented.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们对游戏进行了测试运行，以确保一切按设计实施的方式正常工作。
- en: We have created a lot of code in this chapter. In the next chapter, we will
    start building our inventory system, and yes, that is going to involve more code!
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们编写了大量的代码。在下一章，我们将开始构建我们的库存系统，是的，这将涉及更多的代码！
