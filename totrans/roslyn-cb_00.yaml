- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Software developers deal with source code on a day-to-day basis. Regardless
    of the technology or the programming language that they work on, there are a bunch
    of routine tasks that they must perform on their code:'
  prefs: []
  type: TYPE_NORMAL
- en: Compile source code into the runtime-specific binary format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyze source code to identify issues in the source code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edit source code to fix issues or refactor to improve maintenance, understandability,
    performance, security, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigate source code to search patterns, references, definitions, and relationships
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debug source code to observe and fix runtime behavior for functionality, performances,
    security, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualize collections of source components (projects), their properties, configuration,
    and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The .NET Compiler Platform (code named *Roslyn*) is a platform for .NET programming
    languages, C# and Visual Basic, to enable building tools and extensions to perform
    these routine programming tasks. Notably, this platform is shared between Microsoft
    s .NET compilers and the Visual Studio IDE for .NET development.
  prefs: []
  type: TYPE_NORMAL
- en: 'Roslyn is divided into multiple programming layers, with each layer exposing
    public APIs to write customized tools and extensions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**CodeAnalysis** layer: Core syntax and semantic representation layer of source
    code. C# and Visual Basic compilers (*csc.exe* and *vbc.exe*) are written on top
    of this layer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Workspaces** layer: Project and solution layer that collects a set of logically
    related source files. These are not coupled to any specific host, such as Visual
    Studio.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Features** layer: Set of IDE features built on top of the CodeAnalysis and
    Workspaces API such as code fixes, refactorings, IntelliSense, completion, finding
    references, and navigating to definition and so on. These are not coupled to any
    specific host, such as Visual Studio.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Visual Studio** layer: Visual Studio workspace and project system that brings
    together and lights up all the compiler and IDE features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Roslyn is essentially a stack of services that has been written with two core
    design principles: **Extensibility** (for layers above and third-party plugins)
    and **Maintainability** (it has well-documented and supported public APIs across
    these layers). External developers or third parties can do bunch of cool stuff
    on top of these services:'
  prefs: []
  type: TYPE_NORMAL
- en: Write their own tools for any specific programming layer to accomplish any of
    the programming tasks noted previously.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write simple plugins (for example diagnostic analyzers, code fixes and refactorings,
    completion and IntelliSense providers) for specific layers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perform advanced scenarios at any specific layer, such as implementing their
    own compiler, Workspace, IDE, or project system, and all the other functionality
    across the stack lights up automagically.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](9928750a-c427-42e6-b8a2-cf67eb5465af.xhtml), *Writing Diagnostic
    Analyzers*, enables developers to write diagnostic analyzer extensions to the
    C# compiler and Visual Studio IDE to analyze source code and report warnings and
    errors. End users will see these diagnostics on building the project from the
    command line or Visual Studio and see them live while editing the source code
    in the Visual Studio IDE.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](8e0229af-657f-4306-96b5-40511d1fe7b2.xhtml), *Consuming Diagnostic
    Analyzers in .NET Projects*, enables developers in the C# community to harness
    third-party Roslyn diagnostic analyzers for their C# projects. You will learn
    how to search, install, view, and configure diagnostic analyzers in Visual Studio.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](b14c99a8-f390-4888-a441-54ebfb46d0c7.xhtml), *Writing IDE Code
    Fixes, Refactorings, and IntelliSense Completion Providers*, enables developers
    to write code fix and code refactoring extensions to the Visual Studio IDE to
    edit C# source code to fix compiler/analyzer diagnostics and refactor source code,
    respectively. It also enables developers to write completion provider extensions
    to the C# IntelliSense in the Visual Studio IDE for an enhanced code editing experience.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](c7e00388-a611-4b33-b936-d48b97eed68e.xhtml), *Improving Code Maintenance
    of C# Code Base*, enables developers in the C# community to improve the code maintenance
    and readability of their source code by using the analyzers and code fixes that
    are built into the Visual Studio IDE, as well as some popular third-party implementations.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](b6442ef2-39fd-405f-8f54-232395d9dc0d.xhtml), *Catch Security Vulnerabilities
    and Performance Issues in C# Code*, enables C# community developers to catch security
    and performance issues in their C# code base by using popular third-party analyzers
    such as PUMA scan analyzers and FxCop analyers.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](eb1b605b-117f-4adf-a111-cfb686799929.xhtml), *Live Unit Testing
    in Visual Studio Enterprise*, enables developers to use the new Roslyn-based feature
    in the Visual Studio 2017 Enterprise edition that enables smart live unit test
    (LUT) execution in the background. LUT automatically runs the impacted unit tests
    in the background as you edit code, and visualizes the results and code coverage
    live, in the editor, in real-time.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](76314e87-290f-4dec-859e-9f7e657fc597.xhtml), *C# Interactive and
    Scripting*, enables developers to use C# interactive and scripting features in
    Visual Studio. C# scripting is a tool for quickly testing out C# and .NET snippets
    using a REPL (read-evaluate-print-loop), without the effort of creating multiple
    unit testing or console projects.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](a7277d51-330b-45f3-aa10-5a9453afe569.xhtml), *Contribute Simple
    Functionality to Roslyn C# Compiler Open Source Code*, enables developers to add
    new functionality to the open source Roslyn C# compiler. You will learn how to
    implement new C# compiler errors, add unit tests for them, and then send a pull
    request for your code changes to the Roslyn repo to incorporate them in the next
    version of the C# compiler.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](75869bd0-0b22-459d-939e-cd4a5684cbda.xhtml), *Design and Implement
    a New C# Language Feature*, enables developers to design a new C# language feature
    and implement various compiler phases for this feature in the open source Roslyn
    C# compiler. You will learn the following aspects of compiler design and implementation:
    language design, parsing, semantic analysis and binding, and code generation,
    with suitable code examples.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](10128345-e272-48c9-a710-eb927d2c7764.xhtml), *Command-Line Tools
    Based on Roslyn API*, enables developers to write command-line tools using the
    Roslyn Compiler and Workspaces API to analyze and/or edit C# code.'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You require Visual Studio 2017 Community/Enterprise edition to execute the recipes
    in this book. You can install Visual Studio 2017 from [https://www.visualstudio.com/downloads/](https://www.visualstudio.com/downloads/).
    Additionally, there are some chapters that require you to install GitHub for desktop
    tooling from [https://desktop.github.com/](https://desktop.github.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The .NET developers and architects, who are interested in taking full advantage
    of the Roslyn-based extensions and tools to improve the development processes,
    will find this book useful. Roslyn contributors, that is the producers and C#
    community developers, will also find this book useful.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of styles of text that distinguish between
    different kinds of information. Here are some examples of these styles, and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, and user input are shown as follows: "Additionally, the `.editorconfig`
    files can be checked into the repo alongside the sources, so that the rules are
    enforced for every user that contributes to the repo."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'New terms and important words are shown in bold. Words that you see on the
    screen, in menus or dialog boxes for example, appear in the text like this: "Start
    Visual Studio, click File | New | Project..., create a new C# class library project,
    and replace the code in `Class1.cs` with code from the code sample at `ClassLibrary/Class1.cs`."'
  prefs: []
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Reader feedback
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome. Let us know what you think about
    this book-what you liked or disliked. Reader feedback is important for us as it
    helps us develop titles that you will really get the most out of.
  prefs: []
  type: TYPE_NORMAL
- en: To send us general feedback, simply e-mail `feedback@packtpub.com`, and mention
    the book's title in the subject of your message.
  prefs: []
  type: TYPE_NORMAL
- en: If there is a topic that you have expertise in and you are interested in either
    writing or contributing to a book, see our author guide at [www.packtpub.com/authors](http://www.packtpub.com/authors).
  prefs: []
  type: TYPE_NORMAL
- en: Customer support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you are the proud owner of a Packt book, we have a number of things
    to help you to get the most from your purchase.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the example code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from your account at [http://www.packtpub.com](http://www.packtpub.com).
    If you purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the code files by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in or register to our website using your e-mail address and password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hover the mouse pointer on the SUPPORT tab at the top.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Code Downloads & Errata.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name of the book in the Search box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the book for which you're looking to download the code files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose from the drop-down menu where you purchased this book from.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Code Download.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  prefs: []
  type: TYPE_NORMAL
- en: WinRAR / 7-Zip for Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zipeg / iZip / UnRarX for Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7-Zip / PeaZip for Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code bundle for the book is also hosted on GitHub at [https://github.com/PacktPublishing/Roslyn-Cookbook](https://github.com/PacktPublishing/Roslyn-Cookbook).
    We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the color images of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We also provide you with a PDF file that has color images of the screenshots/diagrams
    used in this book. The color images will help you better understand the changes
    in the output. You can download this file from [https://www.packtpub.com/sites/default/files/downloads/RoslynCookbook_ColorImages.pdf](https://www.packtpub.com/sites/default/files/downloads/RoslynCookbook_ColorImages.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: Errata
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although we have taken every care to ensure the accuracy of our content, mistakes
    do happen. If you find a mistake in one of our books-maybe a mistake in the text
    or the code-we would be grateful if you could report this to us. By doing so,
    you can save other readers from frustration and help us improve subsequent versions
    of this book. If you find any errata, please report them by visiting [http://www.packtpub.com/submit-errata](http://www.packtpub.com/submit-errata),
    selecting your book, clicking on the Errata Submission Form link, and entering
    the details of your errata. Once your errata are verified, your submission will
    be accepted and the errata will be uploaded to our website or added to any list
    of existing errata under the Errata section of that title.
  prefs: []
  type: TYPE_NORMAL
- en: To view the previously submitted errata, go to [https://www.packtpub.com/books/content/support](https://www.packtpub.com/books/content/support)
    and enter the name of the book in the search field. The required information will
    appear under the Errata section.
  prefs: []
  type: TYPE_NORMAL
- en: Piracy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Piracy of copyrighted material on the Internet is an ongoing problem across
    all media. At Packt, we take the protection of our copyright and licenses very
    seriously. If you come across any illegal copies of our works in any form on the
    Internet, please provide us with the location address or website name immediately
    so that we can pursue a remedy.
  prefs: []
  type: TYPE_NORMAL
- en: Please contact us at `copyright@packtpub.com` with a link to the suspected pirated
    material.
  prefs: []
  type: TYPE_NORMAL
- en: We appreciate your help in protecting our authors and our ability to bring you
    valuable content.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have a problem with any aspect of this book, you can contact us at `questions@packtpub.com`,
    and we will do our best to address the problem.
  prefs: []
  type: TYPE_NORMAL
