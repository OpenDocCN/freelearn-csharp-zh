["```cs\npublic class Product { \n  public int ProductId { get; set; } \n  public string Name { get; set; } \n  public decimal Price { get; set; } \n} \n\n```", "```cs\npublic IActionResult Index() { \n  /* Build the products model. It is NOT RECOMMENDED to build    models in Controller action methods  like this. In real world appication, these models and the    respective Data Access Layer(DAL) would  be in separate projects. We are creating it here to make things    simpler to explain */ \n  List<Product> Products = new List<Product> { \n    new Product { \n      Name = \"Mobile Phone\", \n      Price = 300 \n    }, \n    new Product { \n      Name = \"Laptop\", \n      Price = 1000 \n    }, \n    new Product { \n      Name = \"Tablet\", \n      Price = 600 \n    } \n  }; \n  return View(Products); \n} \n\n```", "```cs\n@model List<Chapter5.Models.Product> \n\n<ul> \n  @foreach (var Product in Model) { \n    <li>@Product.Name</li> \n  } \n</ul> \n\n```", "```cs\npublic class Order { \n  public int OrderId { get; set; } \n  public List<Product> Products { get; set; } \n  public decimal Total { get; set; } \n} \n\n```", "```cs\npublic IActionResult Index() { \n  /* Build the products model. It is NOT RECOMMENDED to build    models in Controller action methods  like this. In real world appication, these models and the    respective Data Access Layer(DAL) would  be in separate projects. We are creating it here to make things    simpler to explain   */ \n  List<Product> Products = new List<Product> { \n    new Product { \n      Name = \"Mobile Phone\", \n      Price = 300 \n    }, \n    new Product { \n      Name = \"Laptop\", \n      Price = 1000 \n    }, \n    new Product { \n      Name = \"Tablet\", \n      Price = 600 \n    } \n  }; \n\n Order order = new Order(); \n  order.Products = Products; \n  order.Total = Products.Sum(product => product.Price); \n\n  return View(order);\n\n} \n\n```", "```cs\n@model Chapter5.Models.Order \n\n<table border=\"1\"> \n\n  <tr> \n    <th>Product Name</th> \n    <th>Price</th> \n  </tr> \n\n  @foreach (var Product in Model.Products){ \n    <tr> \n      <td>@Product.Name</td> \n      <td>@Product.Price</td> \n    </tr> \n  } \n  <tr> \n    <td><b>Total</b></td> \n    <td><b>@Model.Total</b></td> \n  </tr> \n</table> \n\n```", "```cs\npublic class Person { \n  public string Name { get; set; } \n  public string EmailID { get; set; } \n} \n\n```", "```cs\npublic ActionResult Add(Person p) { \n  return View(); \n} \n\n```", "```cs\npublic class Employee { \n  public int EmployeeId { get; set; } \n  public string Name { get; set; } \n  public decimal Salary { get; set; } \n  public string Designation { get; set; } \n} \n\n```", "```cs\nusing Microsoft.Data.Entity; \nusing System.Configuration; \n\nnamespace ConsoleEF7 { \n  public class EmployeeDbContext : DbContext{ \n    public DbSet<Employee> Employees {get; set;} \n\n    protected override void OnConfiguring(DbContextOptionsBuilder      optionsBuilder) {string connectionString =        ConfigurationManager.ConnectionStrings       [\"SqlServerExpress\"].ConnectionString; \n      optionsBuilder.UseSqlServer(connectionString); \n      base.OnConfiguring(optionsBuilder); \n    } \n  } \n} \n\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\" ?> \n<configuration> \n  <startup> \n    <supportedRuntime version=\"v4.0\"  \n    sku=\".NETFramework,Version=v4.6.1\" /> \n  </startup> \n  <connectionStrings> \n    <add name=\"SqlServerExpress\" connectionString=\"Data Source=     MUGIL-PC\\SQLEXPRESS;Initial Catalog=EF7Console;Integrated      Security=True\"/> \n  </connectionStrings> \n</configuration> \n\n```", "```cs\nclass Program { \n  static void Main(string[] args) { \n    AddEmployee(); \n  } \n\n  static void AddEmployee() { \n    using (var db = new EmployeeDbContext()) { \n      Employee employee= new Employee { \n        Designation = \"Software Engineer\", \n        Name = \"Scott\", \n        Salary = 5600 \n      }; \n\n      db.Employees.Add(employee); \n      int recordsInserted = db.SaveChanges(); \n      Console.WriteLine(\"Number of records inserted:\" +        recordsInserted); \n      Console.ReadLine();\n    } \n  } \n} \n\n```", "```cs\ndb.Employees.Add(employee); \n\n```", "```cs\nstatic void UpdateSalary() { \n  using (var db = new EmployeeDbContext()){ \n    Employee employee = db.Employees.Where(emp => emp.EmployeeId      == 1).FirstOrDefault(); \n    if(employee!=null){\n      employee.Salary = 6500; \n      int recordsUpdated = db.SaveChanges(); \n      Console.WriteLine(\"Records updated:\" + recordsUpdated); \n      Console.ReadLine(); \n    }\n  } \n} \n\n```", "```cs\nstatic void Main(string[] args){\n  UpdateSalary(); \n} \n\n```", "```cs\nstatic void DeleteEmployee() { \n  using (var db = new EmployeeDbContext()) { \n    Employee employeeToBeDeleted = db.Employees.Where(emp =>      emp.EmployeeId == 1).FirstOrDefault(); \n    if (employeeToBeDeleted != null) { \n      db.Entry(employeeToBeDeleted).State =        Microsoft.Data.Entity.EntityState.Deleted; \n      int recordsDeleted = db.SaveChanges(); \n      Console.WriteLine(\"Number of records deleted:\" +        recordsDeleted); \n      Console.ReadLine(); \n    } \n  } \n} \n\nstatic void Main(string[] args) { \n  DeleteEmployee(); \n} \n\n```", "```cs\n    { \n      \"Data\": { \n        \"DefaultConnection\": { \n          \"ConnectionString\": \"Data Source=MUGIL-PC\\\\SQLEXPRESS;Initial Catalog=Validation;Integrated Security=True\" \n        } \n      } \n    } \n\n    ```", "```cs\n    { \n      \"version\": \"1.0.0-*\", \n      \"compilationOptions\":{ \n        \"emitEntryPoint\": true \n      }, \n\n      \"dependencies\": { \n        \"Microsoft.AspNet.IISPlatformHandler\":      \"1.0.0-rc1-final\", \n        \"Microsoft.AspNet.Mvc\": \"6.0.0-rc1-final\", \n        \"Microsoft.AspNet.Server.Kestrel\": \"1.0.0-rc1-final\", \n\n    \"EntityFramework.MicrosoftSqlServer\":      \"7.0.0-rc1-final\", \n        \"EntityFramework.Commands\": \"7.0.0-rc1-final\"\n\n      }, \n\n      \"commands\": { \n        \"web\": \"Microsoft.AspNet.Server.Kestrel\", \n\n    \"ef\": \"EntityFramework.Commands\"\n\n      }, \n\n      \"frameworks\": { \n        \"dnx451\": { }, \n        \"dnxcore50\": { } \n      }, \n\n      \"exclude\": [ \n        \"wwwroot\", \n        \"node_modules\" \n      ], \n      \"publishExclude\": [ \n        \"**.user\", \n        \"**.vspscc\" \n      ] \n    } \n\n    ```", "```cs\n        using Microsoft.AspNet.Builder;\n        using Microsoft.AspNet.Hosting;\n        using Microsoft.AspNet.Http;\n        using Microsoft.Extensions.DependencyInjection;\n        using Microsoft.Extensions.Configuration;\n        using Validation.Models;\n        using Microsoft.Data.Entity;\n        using Microsoft.Extensions.PlatformAbstractions;\n\n        namespace Validation {\n         public class Startup {\n         public IConfigurationRoot Configuration { get; set; }\n\n        public Startup(IHostingEnvironment env, IApplicationEnvironment appEnv) {\n         var builder = new ConfigurationBuilder()\n         .AddJsonFile(\"config.json\")\n         .AddEnvironmentVariables();\n         Configuration = builder.Build();\n         }\n\n        // This method gets called by the runtime. Use this method to add services to the container. \n        // For more information on how to configure your application, visit http\n        ://go.microsoft.com/fwlink/?LinkID=398940 \n\n        public void ConfigureServices(IServiceCollection services) {\n        services.AddEntityFramework()\n         .AddSqlServer()\n         .AddDbContext<EmployeeDbContext>(options => {\n         options.UseSqlServer(Configuration.Get<string> (\"Data:DefaultConnection:ConnectionString\"));\n         });\n         services.AddMvc();\n         }\n        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\n\n        public void Configure(IApplicationBuilder app) {\n         app.UseIISPlatformHandler();\n         app.UseMvc(routes => {\n         routes.MapRoute(\n         name: \"default\",\n         template: \"{controller=Employee}/ {action=Index}/{id?}\");\n         });\n         }\n        // Entry point for the application.\n         public static void Main(string[] args) => WebApplication.Run<Startup>(args);\n         }\n         }\n        ```", "```cs\n    public class Employee { \n      public int EmployeeId { get; set; } \n      public string Name { get; set; } \n      public string Designation { get; set; } \n      public decimal Salary { get; set; } \n    } \n\n    ```", "```cs\n    using Microsoft.Data.Entity; \n    using Microsoft.Extensions.Configuration; \n\n    namespace Validation.Models { \n      public class EmployeeDbContext : DbContext { \n\n        public IConfigurationRoot Configuration { get; set; } \n\n        public DbSet<Employee> Employees { get; set; } \n\n        public EmployeeDbContext() { \n          var builder = new ConfigurationBuilder() \n          .AddJsonFile(\"config.json\") \n          .AddEnvironmentVariables(); \n          Configuration = builder.Build(); \n        } \n\n        protected override void OnConfiguring     (DbContextOptionsBuilder optionsBuilder) {      optionsBuilder.UseSqlServer       (Configuration.Get<string>       (\"Data:DefaultConnection:ConnectionString\")); \n          base.OnConfiguring(optionsBuilder); \n        } \n      } \n    } \n\n    ```", "```cs\n    using MVCEF7.Models; \n\n    namespace MVCEF7.ViewModels { \n      public class EmployeeAddViewModel { \n        public List<Employee> EmployeesList { get; set; } \n        public Employee NewEmployee { get; set; } \n      } \n    } \n\n    ```", "```cs\n        public IActionResult Index() { \n          EmployeeAddViewModel employeeAddViewModel = new    EmployeeAddViewModel(); \n          using (var db = new EmployeeDbContext()) { \n            employeeAddViewModel.EmployeesList =      db.Employees.ToList(); \n            employeeAddViewModel.NewEmployee = new Employee(); \n\n          } \n          return View(employeeAddViewModel); \n        } \n\n        ```", "```cs\n        [HttpPost] \n        public IActionResult Index(EmployeeAddViewModel  employeeAddViewModel) { \n\n          using (var db = new EmployeeDbContext()) { \n            db.Employees.Add(employeeAddViewModel.NewEmployee); \n            db.SaveChanges(); \n            //Redirect to get Index GET method \n            return RedirectToAction(\"Index\"); \n          } \n\n        } \n\n        ```", "```cs\n        @{ \n          Layout = \"_Layout\"; \n        } \n\n        ```", "```cs\n        <!DOCTYPE html> \n\n        <html> \n          <head> \n            <meta name=\"viewport\" content=\"width=device-width\" /> \n            <title>@ViewBag.Title</title> \n          </head> \n          <body> \n            <div> \n              @RenderBody() \n            </div> \n          </body> \n        </html> \n\n        ```", "```cs\n        @model MVCEF.ViewModels.EmployeeAddViewModel \n        @* \n        //For more information on enabling MVC for empty projects,  visit http://go.microsoft.com/fwlink/?LinkID=397860 \n        *@ \n        @{ \n        } \n\n        <div> \n          @using (Html.BeginForm(\"Index\", \"Employee\",    FormMethod.Post)) { \n            <table> \n              <tr> \n                <td>@Html.LabelFor(Model =>          Model.NewEmployee.Name)</td> \n                <td>@Html.TextBoxFor(Model =>          Model.NewEmployee.Name)</td> \n              </tr> \n              <tr> \n                <td>@Html.LabelFor(Model =>          Model.NewEmployee.Designation)</td> \n                <td>@Html.TextBoxFor(Model =>          Model.NewEmployee.Designation)</td> \n              </tr> \n              <tr> \n                <td>@Html.LabelFor(Model =>          Model.NewEmployee.Salary)</td> \n                <td>@Html.TextBoxFor(Model =>          Model.NewEmployee.Salary)</td> \n              </tr> \n              <tr> \n                <td colspan=\"2\"><input type=\"submit\"          value=\"Submit\"/> \n                </td> \n              </tr> \n            </table> \n\n          } \n        </div> \n\n        <br/><br/> <br/> \n\n        <b> List of employees:</b> <br/> \n        <div> \n          <table border=\"1\"> \n            <tr> \n              <th> ID </th> \n              <th> Name </th> \n              <th> Designation </th> \n              <th> Salary </th> \n            </tr> \n            @foreach(var employee in Model.EmployeesList) { \n              <tr> \n                <td>@employee.EmployeeId</td> \n                <td>@employee.Name</td> \n                <td>@employee.Designation</td> \n                <td>@employee.Salary</td> \n              </tr> \n            } \n          </table> \n        </div> \n\n        ```", "```cs\n\ndnx ef migrations add InitialMigration\n\n```"]