["```cs\naccessModifier returnType MethodName(parameterList)\n{\n    // Method body\n}\n```", "```cs\nPublic class MyClass\n{\n  private int classLevelVariable;\n  // Accessible by any method in MyClass\n  Public void MyMethod()\n  {\n    //Method body can access classLevelVariable\n  }\n}\n```", "```cs\n  Public void MyMethod()\n  {\n    int methodVariable = 0; // Only accessible within MyMethod\n  }\n```", "```cs\n  Enum Day {Monday, Tuesday, Wednesday, Thursday, Friday,\n  Saturday, Sunday};\nDay meetingDay = Day.Monday;\n```", "```cs\n  StringBuilder sb = new StringBuilder();\n  sb.Append(\"Hello\");\n  sb.Append(\" \");\n  sb.Append(\"World\");\n  sb.Append(\"!\");\n```", "```cs\n  int[] numbers = new int[5];\n  // After initializing, set the first element equal to 1\n  numbers[0] = 1;\n```", "```cs\n  for(int i=0; i<numbers.Length; i++)\n  {\n      Debug.Log(numbers[i]);\n  }\n  foreach(int number in numbers){Debug.Log(number);};\n```", "```cs\nusing System;\nusing UnityEngine;\npublic class DelegateExample\n{\n  // Declare the delegate\n  delegate int MathOperation(int a, int b);\n  public static void Main()\n  {\n      // Instantiate the delegate with the Add method\n      MathOperation op = Add;\n      // Use the delegate to invoke the Add method;\n      int result = op(10, 5);\n      Debug.Log($\"10 + 5 = {result}\");\n  }\n  // Method matching the delegate signature\n  static int Add( int x, int y)\n  {\n      return x + y;\n  }\n}\n```", "```cs\nint number = 10;\nif (number > 5)\n{\n  Debug.Log(\"The number is greater than 5.\");\n}\n```", "```cs\nfor (initialization; condition; iteration);\n{\n  // Block of code to be executed\n}\n```", "```cs\nint[] numbers = {1,2,3,4,5};\nint sum = 0;\nfor (int i = 0; i < numbers.Length; i++)\n{\n  sum += numbers[i]; // Adds each array element to sum\n}\n```", "```cs\nwhile (condition)\n{\n  // Block of code to be executed as long as the condition\n     is true\n}\n```", "```cs\nbool awaitingInput = true;\nwhile (awaitingInput)\n{\n  // Debug.Log is used for logging messages to the Unity\n     Console\n  Debug.Log(\"Waiting for 'exit' input to proceed.\");\n  // Imagine this is a method that checks for specific\n      player\n  // input in Unity\n  if (CheckForExitInput())\n  {\n      awaitingInput = false;\n  }\n  // It's vital to yield within a while loop to avoid\n  // blocking the main thread in Unity\n  yield return null;\n}\n```", "```cs\ndo\n{\n  // Block of code to be executed\n} while (condition);\n```", "```cs\nbool validChoiceMade = false;\ndo\n{\n  // Debug.Log is used for logging messages to the Unity\n     Console\n  Debug.Log(\"Please make your choice. Enter 'Y' for yes\n    or 'N' for no.\");\n  // Simulate checking for player's choice in Unity\n  // This could be a method that returns true if a valid\n  // choice is made\n  validChoiceMade = CheckPlayerChoice();\n  //Important to yield in Unity's do-while loop to prevent\n  // blocking the main thread\n  yield return null;\n} while (!validChoiceMade);\n```", "```cs\nforeach (var item in collection)\n{\n  // Block of code to be executed for each item\n}\n```", "```cs\nList<GameObject> gameObjects = GetAllGameObjects();\n// Assume this gets all relevant game objects\nforeach (GameObject obj in gameObjects)\n{\n  // Debug.Log to output the name of each game object to\n     the\n  // Unity Console\n  Debug.Log(\"Resetting position for: \" + obj.name);\n  // Reset the position of each game object, for example,\n  // to the origin\n  obj.transform.position = Vector3.zero;\n}\n```", "```cs\nList<string> items = new List<string> { \"sword\", \"shield\",\n  \"potion\", \"map\" };\nstring targetItem = \"potion\";\nforeach (string item in items)\n{\n  if (item == targetItem)\n  {\n      // Code to process the found item\n      Debug.Log($\"Item {item} found and processed.\");\n      break; // Exit the loop once the target item is found\n  }\n}\n```", "```cs\nList<GameEntity> entities = GetAllGameEntities();\n// Assume this method retrieves all game entities\nforeach (GameEntity entity in entities)\n{\n  if (!entity.IsEligibleForUpdate())\n  {\n      continue; // Skip the remaining code in this iteration\n  }\n  // Code to update the eligible entity\n  entity.Update();\n}\n```", "```cs\nbool FindValue(List<int> values, int target)\n{\n  foreach (int value in values)\n  {\n      if (value == target)\n      {\n        Debug.Log($\"Value {target} found.\");\n        return true; // Exit the method and return true\n      }\n  }\n  return false; // Value not found after completing the loop\n}\n```", "```cs\nbool found = false;\nfor (int i = 0; i < matrix.Length && !found; i++)\n{\n  for (int j = 0; j < matrix[i].Length; j++)\n  {\n      if (matrix[i][j] == target)\n      {\n        found = true;\n        // Instead of using goto, we use a flag to exit\n        // the outer loop\n        break;\n      }\n  }\n}\n```", "```cs\nbool WhoWinsBattle(int player, int enemy)\n{\n  if (player > enemy) return true;\n  return false;\n}\n```", "```cs\nbool IsGrounded(float floorElevation, float\n                  playerElevation)\n{\n  if (floorElevation == playerElevation) return true;\n  return false;\n}\n```", "```cs\nvoid UpdateStarMessage(int numberOfStars)\n{\n  starMessage = \"Total Stars =\" + numberOfStars;\n}\n```", "```cs\nvoid UpdateScore(ref int score)\n{\n  score += 10;\n  // Directly modifies the original variable passed\n  // as an argument\n}\n```", "```cs\nvoid CalculateStats(int[] numbers, out int sum, out float average)\n{\n  sum = numbers.Sum();;\n  average = sum / (float)numbers.Length;\n  // Assigns values to both output parameters\n}\n```", "```cs\n    int GetPlayerScore()\n    {\n      return 100; // Returns an integer value\n    }\n    ```", "```cs\n    Player GetPlayerDetails()\n    {\n      return new Player(\"Alex\", 25);\n      // Returns an instance of the Player class\n    }\n    ```", "```cs\n    void LogPlayerEntry()\n    {\n      Debug.Log(\"A player has entered the game.\"); // No\n        return value\n    }\n    ```", "```cs\n    string[] GetPlayerAbilities()\n    {\n      return new string[] { \"Speed\", \"Agility\",\n        \"Strength\" };\n      // Returns an array of strings\n    }\n    ```", "```cs\nvoid Print(int value)\n{\n   Debug.Log(value);\n}\nvoid Print(string value)\n{\n   Debug.Log(value);\n}\nvoid Print(double value)\n{\n   Debug.Log(value);\n}\n```", "```cs\nvoid UpdatePlayerHealth(int damage)\n{\n  playerHealth -= damage;\n  if (playerHealth <= 0)\n  {\n      Debug.Log(\"Player defeated\");\n  }\n}\n```", "```cs\nvoid Update()\n{\n  if (playerHit)\n  {\n      UpdatePlayerHealth(damageReceived);\n  }\n}\n```", "```cs\nvoid TraverseTransformHierarchy(Transform currentTransform)\n{\n    // Print the current transform's name\n    Debug.Log(currentTransform.name);\n  // Recursively call the function for each child transform\n    foreach (Transform child in currentTransform)\n    {\n        TraverseTransformHierarchy(child);\n    }\n}\n```", "```cs\nint square = x => x * x;\n```", "```cs\npublic class Player\n{\n  public delegate void HealthChangedDelegate(int\n    currentHealth);\n  public event HealthChangedDelegate OnHealthChanged;\n  private int health;\n  public void TakeDamage(int damageAmount)\n  {\n      health -= damageAmount;\n      OnHealthChanged?.Invoke(health); // Raise the event\n  }\n}\n```"]