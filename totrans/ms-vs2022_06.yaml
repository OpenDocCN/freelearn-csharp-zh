- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Advanced Web Development Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will embark upon an advanced exploration of web development
    tools within the robust environment of Visual Studio 2022. Our exploration will
    begin with an examination of a web form designer powered by Web Live Preview,
    which offers us a way to visualize and iterate on our designs while working on
    legacy ASP.NET web form applications. Next, we will turn our attention to the
    dynamic capabilities of Visual Studio’s API Exploration and Dev Tunnel functionalities,
    enhancing our API development experience. Further enriching our toolkit, we will
    investigate the Node.js workload of Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Real-time web previews powered by Web Live Preview
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API Exploration and Dev Tunnel with Visual Studio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node.js integration with Visual Studio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, armed with these advanced web development tools
    and techniques, we will be equipped to elevate our productivity for our web projects
    to new heights.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While writing this chapter, I used the following version of Visual Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio Enterprise 2022 version 17.12.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preview 1.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code files for this chapter can be found at [https://github.com/PacktPublishing/Mastering-Visual-Studio-2022/tree/main/ch06](https://github.com/PacktPublishing/Mastering-Visual-Studio-2022/tree/main/ch06)
  prefs: []
  type: TYPE_NORMAL
- en: Real-time web previews powered by Web Live Preview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Microsoft announced that ASP.NET, when used with old frameworks, including web
    form applications, will continue to support old .NET Framework versions. Following
    that, Visual Studio 2022 has introduced a designer for Web Forms projects that
    are powered by Web Live Preview. In this section, we will explore how to utilize
    the new Web Forms designer along with additional features offered by Web Live
    Preview. This feature is specifically tailored for teams handling legacy projects.
  prefs: []
  type: TYPE_NORMAL
- en: As this feature is currently dedicated only to Web Forms in .NET Framework,
    if you are using MVC and .NET Core, there is no forms designer available. To stay
    up to date with the latest web standards and browser support, Web Live Preview
    in Visual Studio uses WebView2, which is powered by Microsoft Edge.
  prefs: []
  type: TYPE_NORMAL
- en: To illustrate our examples, we will create a project using *ASP.NET (.* *NET
    Framework)* .
  prefs: []
  type: TYPE_NORMAL
- en: 'If we open the **default.aspx** file or any other **.aspx** file, we’ll notice
    two buttons at the bottom left:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1 – The Design and Split buttons](img/B22218_06_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.1 – The Design and Split buttons
  prefs: []
  type: TYPE_NORMAL
- en: 'These buttons allow us to display the designer, powered by Web Live Preview,
    in two different ways: full-size or split next to the code. We will click on the
    **Split** button to observe the impact the designer has on our code base:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2 – The Split view](img/B22218_06_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.2 – The Split view
  prefs: []
  type: TYPE_NORMAL
- en: By clicking on the component, we can edit the label. Additionally, like in the
    designer for WinForm, we can drag and drop items in the toolbox to place them
    in the designer.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following options are offered by this toolbox:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Refresh** : Updates the live preview of your web application to reflect any
    changes made in the editor'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Toggle design mode** : Activates or deactivates the visual designer interface,
    allowing us to switch between designing our UI visually and editing the code directly'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Show empty element** : Displays an empty UI component on the page, ready
    for us to configure its properties and add content'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use live data** : Binds our application’s UI elements to data sources dynamically,
    enabling us to see how our application interacts with data in real-time during
    development'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Show source view** : Opens the code-behind file associated with the selected
    UI element or control, allowing us to view or edit the source code directly:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 6.3 – Designer web toolbox](img/B22218_06_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.3 – Designer web toolbox
  prefs: []
  type: TYPE_NORMAL
- en: As shown in *Figure 6* *.2* , the designer displays live data by default to
    provide a valuable preview. In some cases, it could be valuable to show a placeholder.
    That’s why the designer tools offer the **Use live data** toggle option.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we saw how Visual Studio 2022 can enhance our experience working
    with the legacy web framework. Now, let’s discover what Visual Studio 2022 brings
    for cutting-edge API development.
  prefs: []
  type: TYPE_NORMAL
- en: Using API Explorer and Dev Tunnel with Visual Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we talk about web development, APIs come to mind for handling communication
    regarding each component. In this section, we will explore new Visual Studio features
    to enhance our experience during API development. First, we will learn how to
    use HTTP files to explore our endpoint, after which we will configure Dev Tunnel
    so that we can share our in-development APIs with clients, managers, and colleagues.
  prefs: []
  type: TYPE_NORMAL
- en: Generating .http files with Endpoints Explorer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using **.http** files to test and document API endpoints is incredibly convenient
    and efficient. This approach allows us to streamline API testing and development
    directly within our **integrated development environment** ( **IDE** ) – for example,
    Visual Studio, Visual Studio Code, or IntelliJ.
  prefs: []
  type: TYPE_NORMAL
- en: With **.http** files, we can write HTTP requests directly within our IDE and
    execute them without switching to a separate tool or browser. This integration
    keeps our development workflow within the IDE, enabling quick iterations and debugging,
    which ultimately boosts productivity.
  prefs: []
  type: TYPE_NORMAL
- en: 'These **.http** files adhere to the standards of RFC 9110 HTTP Semantics (the
    last version of the document, which establishes a solid foundation for understanding
    and implementing the protocol: [https://www.rfc-editor.org/rfc/rfc9110.html](https://www.rfc-editor.org/rfc/rfc9110.html)
    ), ensuring that our requests are correctly formatted and understood by the HTTP
    clients that are integrated into our IDEs. This standardization also makes the
    files portable and easily shareable among team members, and they can be seamlessly
    integrated into our CI/CD pipelines for efficient development.'
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, integrating **.http** files into our existing development processes,
    including version control and code reviews, simplifies the management of API testing
    code, making it more maintainable and readable. The support for various HTTP methods,
    headers, and authentication mechanisms provides us with flexibility and power
    in terms of API testing.
  prefs: []
  type: TYPE_NORMAL
- en: Regarding Visual Studio, the support for **.http** files has significantly simplified
    the API testing process. We can create and execute HTTP requests directly within
    Visual Studio, eliminating the need to recreate requests for testing purposes,
    which makes the whole process more efficient and user-friendly.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we can list all the endpoints of our application with the **Endpoint
    Explorer** view. To open it, we can use the top bar menu and go to **View** |
    **Other** **Windows** | **Endpoints Explorer** :'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.4 – Endpoints Explorer](img/B22218_06_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.4 – Endpoints Explorer
  prefs: []
  type: TYPE_NORMAL
- en: 'This view shows us a list of all the endpoints we’ve built in our application.
    Here, we can right-click on an endpoint, and it will show us the following two
    options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Open in the editor** : To jump to the code where the endpoint is defined'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Generate Request** : To write the necessary code in the **.** **http** file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 6.5 – Generate Request](img/B22218_06_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.5 – Generate Request
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example ( *Figure 6* *.5* ), we’re generating the request for the **/**
    **api/cars** endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.6 – Generated .http request](img/B22218_06_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.6 – Generated .http request
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we have at least one request in the **.http** file and we can use it to
    test and debug our endpoint. Visual Studio offers a built-in interface to explore
    the response of the sent request:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.7 – .http file response](img/B22218_06_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.7 – .http file response
  prefs: []
  type: TYPE_NORMAL
- en: 'When testing APIs, we’ll want to use a different environment. HTTP files allow
    us to define environment variables in an external file. For this, we can create
    a file named **http-client.env.json** . This file must be placed in the same folder
    as the **.http** file or a parent folder. We must set the different environments
    in the JSON file like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can select the environment where we want to send the request from the
    top-right corner of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.8 – Selecting an environment](img/B22218_06_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.8 – Selecting an environment
  prefs: []
  type: TYPE_NORMAL
- en: Now, we can build a file that we can share with teams or clients to test and
    document our API. In some scenarios, we may want to debug our API through another
    device. Visual Studio 2022 provides a feature named **Dev Tunnel** that allows
    us to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Dev Tunnel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Visual Studio 2022, Dev Tunnel allows developers to create temporary connections
    between machines that can’t connect directly. This feature is great for debugging
    and testing web APIs and ASP.NET Core applications, especially when these applications
    need to be accessed from various devices, such as mobile emulators or physical
    devices. It’s a valuable tool for us when we’re working on applications that require
    testing across different machines or devices.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some use cases where Dev Tunnel could be useful:'
  prefs: []
  type: TYPE_NORMAL
- en: Communication between web apps and mobile phones or tablets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Port-forwarding solutions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Communication with external services (for example, Twilio webhooks)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can create a Dev Tunnel by clicking on the debug mode button and selecting
    **Dev Tunnels (no active tunnel)** | **Create** **a Tunnel…** :'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.9 – Create a Tunnel…](img/B22218_06_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.9 – Create a Tunnel…
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, we get access to the configure window for our Dev Tunnel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.10 – Configuring our Dev Tunnel](img/B22218_06_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.10 – Configuring our Dev Tunnel
  prefs: []
  type: TYPE_NORMAL
- en: 'In this window, we can set the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Account** : We need to select an account to create the Dev Tunnel. This could
    be Azure, Microsoft Account (MSA), or GitHub.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Name** : The name that will be used to identify the Dev Tunnel in Visual
    Studio.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tunnel Type** : Here, we can choose between two types – **Temporary** or
    **Persistent** :'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Temporary** : A new URL is generated every time Visual Studio is started'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Persistent** : The same URL will be presented every time Visual Studio is
    started'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Access** : This allows us to set the level of access. Here, we have three
    options:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Private** : Accessible only by the creator'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Organization** : Accessible by all users from the same organization'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Public** : Free and can be used by anyone'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, we can get a URL from our local host up and ready to be shared on any device.
    For instance, we can use the URL API in a mobile to test our application, and
    during this time we can debug the API call using Visual Studio 2022.
  prefs: []
  type: TYPE_NORMAL
- en: When we talk about advanced web development these days, modern JavaScript frameworks
    are at the top of the list of frontend tools. Let’s see how we can leverage Visual
    Studio for Node.js development.
  prefs: []
  type: TYPE_NORMAL
- en: Node.js integration with Visual Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To develop a modern JavaScript frontend and backend, we must explore some features
    offered by Visual Studio. In this section, we will dive into how to create a JavaScript
    project with a Visual Studio workload. Then, we will learn how to manage the **npm**
    package so that we can debug our JavaScript application directly through Visual
    Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring JavaScript project templates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Visual Studio 2022, a new project type called **JavaScript Project System**
    ( **JSPS** ) has been introduced that utilizes the **.esproj** file format. This
    system allows us to create independent Angular, React, and Vue projects directly
    within Visual Studio. These frontend projects leverage the CLI tools of the respective
    frameworks that are installed on our machine, allowing us to choose the template
    version we prefer.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to verify whether the Node.js workload has been installed properly
    in our Visual Studio instance. To do this, open the Visual Studio Installer and
    check the installed workloads (see *Figure 6* *.11* ) by clicking on the **Update**
    button for your desired Visual Studio instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.11 – Node.js development workload](img/B22218_06_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.11 – Node.js development workload
  prefs: []
  type: TYPE_NORMAL
- en: 'Having ensured that we have the necessary workload installed, we can explore
    the template offered by Visual Studio 2022 for JavaScript development. For that,
    we will create a new project and select **JavaScript** in the **Language combo**
    box. Once you’ve done that, you will be presented with the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.12 – JavaScript template](img/B22218_06_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.12 – JavaScript template
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we can see that Visual Studio offers several JavaScript base templates
    that we can split into three categories:'
  prefs: []
  type: TYPE_NORMAL
- en: ASP.NET Core combines with the modern JavaScript framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Standalone JavaScript project (client-side)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backend Node.js project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For our example, we will pick the **ReactApp** template as standalone JavaScript
    project .
  prefs: []
  type: TYPE_NORMAL
- en: 'When creating the project, we’ll see that Visual Studio launches a console
    prompting for the **npm cli** command so that it can create the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.13 – npm CLI](img/B22218_06_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.13 – npm CLI
  prefs: []
  type: TYPE_NORMAL
- en: Once we’ve set up the project, we can develop our application while adhering
    to React or other modern JavaScript frameworks. One of the initial steps involves
    installing the necessary npm packages. While we can certainly do this directly
    using the npm CLI, let’s explore how Visual Studio can assist us in this process.
  prefs: []
  type: TYPE_NORMAL
- en: Managing npm packages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Managing npm packages in Visual Studio 2022 involves using the npm package manager.
  prefs: []
  type: TYPE_NORMAL
- en: Beginning with Visual Studio 2022, we have access to the npm package manager
    for CLI-based projects. This means that we can now download npm modules like how
    we can download NuGet packages for ASP.NET Core projects. We can then utilize
    the **package.json** file to make modifications to packages and remove them as
    needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can access the npm package manager by right-clicking on the **npm** node
    of the folder structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.14 – Debugging a JavaScript application](img/B22218_06_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.14 – Debugging a JavaScript application
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we can select **Install New npm Packages…** , which will open the manager:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.15 – Install New npm Packages](img/B22218_06_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.15 – Install New npm Packages
  prefs: []
  type: TYPE_NORMAL
- en: In this window, we can find all the packages we need to build our modern JavaScript
    application. As with any application development process, there comes a time when
    we need to debug. Let’s explore how Visual Studio can enhance our experience of
    debugging modern JavaScript applications.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging JavaScript applications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Working with server-side JavaScript allows us to debug our application similarly
    to debugging a C# application. To do so, we must follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Set breakpoints** : Open your server-side JavaScript file (for example, **server.js**
    ) in Visual Studio and click in the gutter area to set a breakpoint.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Run the application in debug mode** : Press *F5* or go to **Debug** | **Start
    Debugging** to run our application in debug mode. Visual Studio will pause execution
    at the breakpoint we set.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Inspect the application’s state** : While paused at the breakpoint, we can
    inspect our application’s state by hovering over variables in scope or using debugger
    windows such as **Locals** and **Watch** .'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Continue execution** : To continue running our application after inspecting
    it, press *F5* again.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you can see, debugging server-side JavaScript applications is straightforward.
    Now, let’s explore debugging client-side scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging client-side scripts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Visual Studio, we have debugging support specifically for Chrome and Microsoft
    Edge (Chromium) when it comes to client-side debugging. Sometimes, our debugger
    will automatically stop at breakpoints in JavaScript, TypeScript, and embedded
    scripts within HTML files.
  prefs: []
  type: TYPE_NORMAL
- en: 'To debug JavaScript within ASP.NET using Chrome, Edge (Chromium), and Internet
    Explorer, we need to navigate to the debugging option by selecting **Tools** |
    **Options** | **Debugging** | **General** , and then check the **Enable JavaScript
    debugging for ASP.NET (Chrome, Edge, and** **IE)** box:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.16 – Debugging options](img/B22218_06_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.16 – Debugging options
  prefs: []
  type: TYPE_NORMAL
- en: Enabling this option ensures that Visual Studio supports debugging client-side
    code effectively within ASP.NET projects.
  prefs: []
  type: TYPE_NORMAL
- en: In our previous example, we created a standalone React application that required
    our source code to be transpiled by tools such as TypeScript or Babel. Utilizing
    source maps during debugging ensures an optimal experience by bridging the gap
    between minified or transpiled code and its original, human-readable form. This
    facilitates debugging by allowing developers to set breakpoints and inspect variables
    in their original state within the browser’s developer tools or Visual Studio’s
    debugging environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Visual Studio automatically generates source maps for TypeScript projects.
    However, for JavaScript projects, we need to configure build tools such as webpack
    to produce source maps. For TypeScript projects, include a **tsconfig.json** file
    with the **sourceMap** compiler option set to true. For JavaScript projects using
    webpack, configure it with **devtool: "source-map"** .'
  prefs: []
  type: TYPE_NORMAL
- en: Next, ensure that Visual Studio is properly configured to use source maps. This
    may involve adjusting paths within generated source map files to accurately reference
    source files. For webpack users, remove the **webpack:///** prefix from source
    map paths.
  prefs: []
  type: TYPE_NORMAL
- en: Once source maps have been set up, debugging a React project in Visual Studio
    becomes straightforward. Simply attach the debugger to the running application
    – this allows you to set breakpoints and step through the code as if it were running
    in its original, un-minified form. This streamlined approach helps with quickly
    identifying and fixing issues.
  prefs: []
  type: TYPE_NORMAL
- en: For more complex debugging scenarios, additional adjustments to the project
    configuration or the use of supplementary tools may be necessary. Ensure that
    webpack is configured properly to generate source maps. Additionally, enable JavaScript
    source maps in your browser’s Developer Tools settings to fully utilize source
    maps during debugging.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we embarked on an advanced exploration of web development tools
    within the robust environment of Visual Studio 2022. Our journey began with an
    in-depth look at Web Live Preview, a cutting-edge tool enabling real-time web
    previews to streamline design visualization and iteration for Web Forms projects.
  prefs: []
  type: TYPE_NORMAL
- en: We then delved into the dynamic capabilities of Visual Studio’s API Exploration
    and Dev Tunnel functionalities, empowering developers to gain insights into service
    endpoints and seamlessly integrate with external APIs for interactive development
    and testing.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, we explored Node.js integration with Visual Studio, uncovering
    JavaScript project templates, effective npm package management techniques, and
    the intricacies of debugging JavaScript applications within the Visual Studio
    ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will delve into machine learning integration with Visual
    Studio 2022, exploring how to leverage the latest features to seamlessly integrate
    machine learning models into applications.
  prefs: []
  type: TYPE_NORMAL
