["```cs\npublic class User\n{\n  public string Id { get; set; }\n  public string Username { get; set; }\n  public string Password { get; set; }\n}\n```", "```cs\npublic class Conversation\n{\n  public string Id { get; set; }\n  public string UserId { get; set; } \n  public string Username { get; set; }\n}\npublic class Message\n{\n  public string Id { get; set; }\n  public string ConversationId { get; set; }\n  public string UserId { get; set; } \n  public string Username { get; set; }\n  public string Text { get; set; }\n}\n```", "```cs\npublic interface IWebService\n{\n  Task<User> Login(string username, string password);\n  Task<User> Register(User user);\n  Task<User[]> GetFriends(string userId);\n  Task<User> AddFriend(string userId, string username);\n  Task<Conversation[]> GetConversations(string userId);\n  Task<Message[]> GetMessages(string conversationId);\n  Task<Message> SendMessage(Message message);\n}\n```", "```cs\npublic class FakeWebService\n{\n  public int SleepDuration { get; set; }\n\n  public FakeWebService()\n  {\n    SleepDuration = 1;\n  }\n  private Task Sleep()\n  {\n    return Task.Delay(SleepDuration);\n  }\n  public async Task<User> Login(string username, string password)\n  {\n    await Sleep();\n    return new User { Id = \"1\", Username = username };\n  }\n}\n```", "```cs\npublic async Task<User> Register(User user)\n{\n  await Sleep();\n\n  return user;\n}\npublic async Task<User[]> GetFriends(string userId)\n{\n  await Sleep();\n\n  return new[]\n  {\n    new User { Id = \"2\", Username = \"bobama\" },\n    new User { Id = \"3\", Username = \"bobloblaw\" },\n    new User { Id = \"4\", Username = \"gmichael\" },\n  };\n}\npublic async Task<User> AddFriend(string userId, string username)\n{\n  await Sleep();\n  return new User { Id = \"5\", Username = username };\n}\n```", "```cs\npublic async Task<Conversation[]> GetConversations(string userId)\n{\n  await Sleep();\n\n  return new[]\n  {\n    new Conversation { Id = \"1\", UserId = \"2\" },\n    new Conversation { Id = \"2\", UserId = \"3\" },\n    new Conversation { Id = \"3\", UserId = \"4\" },\n  };\n}\n```", "```cs\npublic async Task<Message[]> GetMessages(int conversationId)\n{\n  await Sleep();\n\n  return new[]\n  {\n    new Message\n    {\n      Id = \"1\",\n      ConversationId = conversationId,\n      UserId = \"2\",\n      Text = \"Hey\",\n    },\n    new Message\n    {\n      Id = \"2\",\n      ConversationId = conversationId,\n      UserId = \"1\",\n      Text = \"What's Up?\",\n    },\n    new Message\n    {\n      Id = \"3\",\n      ConversationId = conversationId,\n      UserId = \"2\",\n      Text = \"Have you seen that new movie?\",\n    },\n    new Message\n    {\n      Id = \"4\",\n      ConversationId = conversationId,\n      UserId = \"1\",\n      Text = \"It's great!\",\n    },\n  };\n}\n```", "```cs\npublic async Task<Message> SendMessage(Message message)\n{\n  await Sleep();\n\n  return message;\n}\n```", "```cs\npublic interface ISettings\n{\n  User User { get; set; }\n  void Save();\n}\n```", "```cs\npublic class FakeSettings : ISettings\n{\n  public User User { get; set; }\n  public void Save() { }\n}\n```", "```cs\nViewModels folder within your project:\n```", "```cs\npublic class BaseViewModel\n{\n  protected readonly IWebService service = ServiceContainer.Resolve<IWebService>();\n  protected readonly ISettings settings = ServiceContainer.Resolve<ISettings>();\n\n  public event EventHandler IsBusyChanged = delegate { };\n\n  private bool isBusy = false;\n  public bool IsBusy\n  {\n    get { return isBusy; }\n    set\n    {\n      isBusy = value;\n      IsBusyChanged(this, EventArgs.Empty);\n    }\n  }\n}\n```", "```cs\npublic class LoginViewModel : BaseViewModel\n{\n  public string Username { get; set; }\n  public string Password { get; set; }\n  public async Task Login()\n  {\n    if (string.IsNullOrEmpty(Username))\n      throw new Exception(\"Username is blank.\");\n\n    if (string.IsNullOrEmpty(Password))\n      throw new Exception(\"Password is blank.\");\n\n    IsBusy = true;\n    try\n    {\n      settings.User = await service.Login(Username, Password);\n      settings.Save();\n    }\n    finally\n    {\n      IsBusy = false;\n    }\n  }\n}\n```", "```cs\npublic class RegisterViewModel : BaseViewModel\n{\n  public string Username { get; set; }\n  public string Password { get; set; }\n  public string ConfirmPassword { get; set; }\n}\n```", "```cs\npublic async Task Register()\n{\n  if (string.IsNullOrEmpty(Username))\n    throw new Exception(\"Username is blank.\");\n  if (string.IsNullOrEmpty(Password))\n    throw new Exception(\"Password is blank.\");\n  if (Password != ConfirmPassword)\n    throw new Exception(\"Passwords don't match.\");\n  IsBusy = true;\n  try\n  {\n    settings.User = await service.Register(new User { Username = Username, Password = Password, });\n    settings.Save();\n  }\n  finally\n  {\n    IsBusy = false;\n  }\n}\n```", "```cs\npublic class FriendViewModel : BaseViewModel\n{\n  public User[] Friends { get; private set; }\n  public string Username { get; set; }\n}\n```", "```cs\npublic async Task GetFriends()\n{\n  if (settings.User == null)\n    throw new Exception(\"Not logged in.\");\n\n  IsBusy = true;\n  try\n  {\n    Friends = await service.GetFriends(settings.User.Id);\n  }\n  finally\n  {\n    IsBusy = false;\n  }\n}\n```", "```cs\npublic async Task AddFriend()\n{\n  if (settings.User == null)\n    throw new Exception(\"Not logged in.\");\n\n  if (string.IsNullOrEmpty(Username))\n    throw new Exception(\"Username is blank.\");\n\n  IsBusy = true;\n  try\n  {\n    var friend = await service.AddFriend(settings.User.Id, Username);\n\n    //Update our local list of friends\n    var friends = new List<User>();\n    if (Friends != null)\n      friends.AddRange(Friends);\n    friends.Add(friend);\n\n    Friends = friends.OrderBy(f => f.Username).ToArray();\n  }\n  finally\n  {\n    IsBusy = false;\n  }\n}\n```", "```cs\npublic class MessageViewModel : BaseViewModel\n{\n  public Conversation[] Conversations { get; private set; }\n  public Conversation Conversation { get; set; }\n  public Message[] Messages { get; private set; }\n  public string Text { get; set; }\n}\n```", "```cs\npublic async Task GetConversations()\n{\n  if (settings.User == null)\n    throw new Exception(\"Not logged in.\");\n\n  IsBusy = true;\n  try\n  {\n    Conversations = await service.GetConversations(settings.User.Id);\n  }\n  finally\n  {\n    IsBusy = false;\n  }\n}\n```", "```cs\npublic async Task GetMessages()\n{\n  if (Conversation == null)\n    throw new Exception(\"No conversation.\");\n\n  IsBusy = true;\n  try\n  {\n    Messages = await service.GetMessages(Conversation.Id);\n  }\n  finally\n  {\n    IsBusy = false;\n  }\n}\n```", "```cs\npublic async Task SendMessage()\n{\n  if (settings.User == null)\n    throw new Exception(\"Not logged in.\");\n\n  if (Conversation == null)\n    throw new Exception(\"No conversation.\");\n\n  if (string.IsNullOrEmpty (Text))\n    throw new Exception(\"Message is blank.\");\n\n  IsBusy = true;\n  try\n  {\n    var message = await service.SendMessage(new Message \n    {\n      UserId = settings.User.Id,ConversationId = Conversation.Id, \n      Text = Text\n    });\n    //Update our local list of messages\n    var messages = new List<Message>();\n    if (Messages != null)\n      messages.AddRange(Messages);\n    messages.Add(message);\n\n    Messages = messages.ToArray();\n  }\n  finally\n  {IsBusy = false;\n  }\n}\n```", "```cs\nAssert.That(myVariable, Is.EqualTo(0));\n```", "```cs\nAssert.That(myVariable, Is.Not.EqualTo(0));\n```", "```cs\npublic static class Test\n{\n  public static void SetUp()\n  {\n    ServiceContainer.Register<IWebService>(() =>new FakeWebService { SleepDuration = 0 });\n    ServiceContainer.Register<ISettings>(() =>new FakeSettings());\n  }\n}\n```", "```cs\n[TestFixture]\npublic class LoginViewModelTests\n{\n  LoginViewModel loginViewModel;\n  ISettings settings;\n  [SetUp]\n  public void SetUp()\n  {\n    Test.SetUp();\n    settings = ServiceContainer.Resolve<ISettings>();\n    loginViewModel = new LoginViewModel();\n  }\n  [Test]\n  public async Task LoginSuccessfully()\n  {\n    loginViewModel.Username = \"testuser\";\n    loginViewModel.Password = \"password\";\n    await loginViewModel.Login();\n    Assert.That(settings.User, Is.Not.Null);\n  }\n}\n```", "```cs\n//Change Is.Not.Null to Is.Null\nAssert.That(settings.User, Is.Null);\n```", "```cs\n[Test]\npublic async Task LoginWithNoUsernameOrPassword()\n{\n  //Throws an exception\n  await loginViewModel.Login();\n}\n```", "```cs\n[Test, \n  ExpectedException(typeof(Exception), \n  ExpectedMessage = \"Username is blank.\")]\n```"]