["```cs\npublic partial class ContactsController :UITableViewController, IUITableViewDataSource\n{\n  public ContactsController (IntPtr handle) : base (handle)\n  {\n    Title = \"Contacts\";\n  }\n}\n```", "```cs\nContact[] contacts;\n\npublic async override void ViewDidLoad()\n{\n  base.ViewDidLoad();\n  try\n  {\n    var book = new AddressBook();\n    await book.RequestPermission();\n    contacts = book.ToArray();\n  }\n  catch\n  {\n    new UIAlertView(\"Oops!\",\"Something went wrong, try again later.\",null, \"Ok\").Show();\n  }\n}\n```", "```cs\npublic override int RowsInSection(UITableView tableview, int section)\n{\n  return contacts != null ? contacts.Length : 0;\n}\npublic override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)\n{\n  var contact = contacts [indexPath.Row];\n  var cell = tableView.DequeueReusableCell(CellName);\n  if (cell == null)\n    cell = new UITableViewCell(UITableViewCellStyle.Default, CellName);\n  cell.TextLabel.Text =contact.LastName + \", \" + contact.FirstName;\n  return cell;\n}\n```", "```cs\nclass ContactsAdapter : BaseAdapter<Contact>\n{\n  public Contact[] Contacts { get; set; }\n\n  public override long GetItemId(int position)\n  {\n    return position;\n  }\n  public override View GetView(int position, View convertView, ViewGroup parent)\n  {\n    var contact = this [position];\n    var textView = convertView as TextView;\n    if (textView == null)\n    {\n      textView = new TextView(parent.Context);\n    }\n    textView.Text = contact.LastName + \", \" + contact.FirstName;\n    return textView;\n  }\n  public override int Count\n  {\n    get { return Contacts == null ? 0 : Contacts.Length; }\n  }\n  public override Contact this[int index]\n  {\n    get { return Contacts [index]; }\n  }\n}\n```", "```cs\nprotected async override void OnCreate(Bundle bundle)\n{\n  base.OnCreate(bundle);\n\n  SetContentView(Resource.Layout.Main);\n  var listView = FindViewById<ListView>(Resource.Id.contacts);\n  var adapter = new ContactsAdapter();\n  listView.Adapter = adapter;\n  try\n  {\n    var book = new AddressBook(this);\n    await book.RequestPermission();\n    adapter.Contacts = book.ToArray();\n    adapter.NotifyDataSetChanged();\n  }\n  catch\n  {\n    new AlertDialog.Builder(this).SetTitle(\"Oops\").SetMessage(\"Something went wrong, try again later.\").SetPositiveButton(\"Ok\", delegate { }).Show();\n  }\n}\n```", "```cs\nGeolocator locator;\nList<string> messages = new List<string>();\npublic LocationController (IntPtr handle) : base (handle)\n{\n  Title = \"GPS\";\n  locator = new Geolocator();\n  locator.PositionChanged += OnPositionChanged;\n  locator.PositionError += OnPositionError;\n}\n```", "```cs\nvoid OnPositionChanged (object sender, PositionEventArgs e)\n{\n  messages.Add(string.Format(\"Long: {0:0.##} Lat: {1:0.##}\",e.Position.Longitude, e.Position.Latitude));\n  TableView.ReloadData();\n}\nvoid OnPositionError (object sender, PositionErrorEventArgs e)\n{\n  messages.Add(e.Error.ToString());\n  TableView.ReloadData();\n}\n```", "```cs\npublic override void ViewDidLoad()\n{\n  base.ViewDidLoad();\n  locator.StartListening(1000, 50);\n}\n```", "```cs\npublic override int RowsInSection(UITableView tableview, int section)\n{\n  return messages.Count;\n}\npublic override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)\n{\n  var cell = tableView.DequeueReusableCell(CellName);\n  if (cell == null)\n    cell = new UITableViewCell(UITableViewCellStyle.Default, CellName);\n  cell.TextLabel.Text = messages [indexPath.Row];\n  return cell;\n}\n```", "```cs\nclass Adapter : BaseAdapter<string>\n{\n  List<string> messages = new List<string>();\n\n  public void Add(string message)\n  {\n    messages.Add(message);\n    NotifyDataSetChanged();\n  }\n  public override long GetItemId(int position)\n  {\n    return position;\n  }\n  public override View GetView(int position, View convertView, ViewGroup parent)\n  {\n    var textView = convertView as TextView;\n    if (textView == null)\n      textView = new TextView(parent.Context);\n    textView.Text = messages [position];\n    return textView;\n  }\n  public override int Count\n  {\n    get { return messages.Count; }\n  }\n  public override string this[int index]\n  {\n    get { return messages [index]; }\n  }\n}\n```", "```cs\nGeolocator locator;\nAdapter adapter;\n\nprotected override void OnCreate(Bundle bundle)\n{\n  base.OnCreate(bundle);\n  SetContentView(Resource.Layout.Main);\n  var listView = FindViewById<ListView>(Resource.Id.locations);\n  listView.Adapter = adapter = new Adapter();\n  locator = new Geolocator(this);\n  locator.PositionChanged += OnPositionChanged;\n  locator.PositionError += OnPositionError;\n}\nprotected override void OnResume()\n{\n  base.OnResume();\n  locator.StartListening(1000, 50);\n}\nprotected override void OnPause()\n{\n  base.OnPause();\n  locator.StopListening();\n}\nvoid OnPositionChanged (object sender, PositionEventArgs e)\n{\n  adapter.Add(string.Format(\"Long: {0:0.##} Lat: {1:0.##}\",e.Position.Longitude, e.Position.Latitude));\n}\nvoid OnPositionError (object sender, PositionErrorEventArgs e)\n{\n  adapter.Add(e.Error.ToString());\n}\n```", "```cs\nMediaPicker picker;\npublic override void ViewDidLoad()\n{\n  base.ViewDidLoad();\n\n  picker = new MediaPicker();\n  if (!picker.IsCameraAvailable)\n    camera.Enabled = false;\n  camera.TouchUpInside += OnCamera;\n  library.TouchUpInside += OnLibrary;\n}\n```", "```cs\nasync void OnCamera (object sender, EventArgs e)\n{\n  try\n  {\n    var file = await picker.TakePhotoAsync(new StoreCameraMediaOptions());\n    imageView.Image = ToImage(file);\n  }\n  catch\n  {\n    ShowError();\n  }\n}\nasync void OnLibrary (object sender, EventArgs e)\n{\n  try\n  {\n    var file = await picker.PickPhotoAsync();\n    imageView.Image = ToImage(file);\n  }\n  catch\n  {\n      ShowError();\n  }\n}\nUIImage ToImage(MediaFile file)\n{\n  using (var stream = file.GetStream())\n  {\n    using (var data = NSData.FromStream(stream))\n    {\n      return UIImage.LoadFromData(data);\n    }\n  }\n}\nvoid ShowError()\n{\n  new UIAlertView(\"Oops!\", \"Something went wrong, try again later.\", null, \"Ok\").Show();\n}\n```", "```cs\nMediaPicker picker;\nImageView imageView;\n\nprotected override void OnCreate(Bundle bundle)\n{\n  base.OnCreate(bundle);\n  SetContentView(Resource.Layout.Main);\n  var library = FindViewById<Button>(Resource.Id.library);\n  var camera = FindViewById<Button>(Resource.Id.camera);\n  imageView = FindViewById<ImageView>(Resource.Id.imageView);\n  picker = new MediaPicker(this);\n  library.Click += OnLibrary;\n  camera.Click += OnCamera;\n  if (!picker.IsCameraAvailable)\n    camera.Enabled = false;\n}\n```", "```cs\nvoid OnLibrary (object sender, EventArgs e)\n{\n  var intent = picker.GetPickPhotoUI();\n  StartActivityForResult (intent, 1);\n}\nvoid OnCamera (object sender, EventArgs e)\n{\n  var intent = picker.GetTakePhotoUI(new StoreCameraMediaOptions\n  {\n    Name = \"test.jpg\", Directory = \"PhotoPicker\"\n  });\n  StartActivityForResult (intent, 1);\n}\n```", "```cs\nprotected async override void OnActivityResult(\n  int requestCode, Result resultCode, Intent data)\n{\n  if (resultCode == Result.Canceled)\n  return;\n  var file = await data.GetMediaFileExtraAsync(this);\n  using (var stream = file.GetStream())\n  {\n    imageView.SetImageBitmap(await\n      BitmapFactory.DecodeStreamAsync(stream));\n  }\n}\n```"]