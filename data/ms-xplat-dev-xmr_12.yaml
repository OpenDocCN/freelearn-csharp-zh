- en: Chapter 12. ALM – App Stores and Publishing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章。ALM – 应用商店和发布
- en: 'This chapter explains the processes related to app package preparation and
    release, which constitutes the last step of the application lifecycle. General
    information about application packages and bundles is followed by information
    about different release channels and release management tools. The chapter is
    divided into the following sections:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章解释了与应用程序包准备和发布相关的流程，这构成了应用程序生命周期的最后一步。关于应用程序包和包的一般信息之后，接着是关于不同发布渠道和发布管理工具的信息。本章分为以下部分：
- en: Release packages
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布包
- en: Distribution options
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分发选项
- en: Line of business apps
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 商业应用程序
- en: Release packages
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布包
- en: On each Xamarin target platform, release packages differ in several ways from
    the development packages prepared during the development and testing phases. Release
    packages are optimized to take up less space and consume less resources in the
    runtime (both processing time and memory resources). They also do not contain
    symbol files or inter-process communication channels (such as **Java Debug Wire
    Protocol** (**JDWP**)) required for **just-in-time** (**JIT**) debugging. It is
    also important to mention that Xamarin.iOS and Xamarin.Android projects, once
    built for release, are virtually no different from applications built with native
    development tools.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个Xamarin目标平台上，发布包与开发阶段和测试阶段准备的开发包在几个方面有所不同。发布包经过优化，以占用更少的空间并在运行时消耗更少的资源（包括处理时间和内存资源）。它们也不包含用于**即时**（**JIT**）调试所需的符号文件或进程间通信通道（例如**Java调试线协议**（**JDWP**））。还重要的是要提到，一旦Xamarin.iOS和Xamarin.Android项目构建用于发布，它们实际上与使用原生开发工具构建的应用程序没有太大区别。
- en: In order to prepare the application for release, developers need to take several
    preparation steps before actually building the application. These steps differ
    slightly on each platform.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为了准备应用程序发布，开发者在实际构建应用程序之前需要采取几个准备步骤。这些步骤在每个平台上略有不同。
- en: Xamarin.Android app package (.apk)
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Xamarin.Android应用程序包（.apk）
- en: Developers preparing Xamarin.Android application release packages should follow
    a certain checklist to create an optimized package for release.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 准备Xamarin.Android应用程序发布包的开发者应遵循一定的清单来创建一个优化的发布包。
- en: Disabling debugging
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 禁用调试
- en: The initial step of preparing a Xamarin.Android application for release is to
    disable the debugging channel, called Java Debug Wire Protocol, used by Xamarin
    tools or `adb` to communicate with the **Java Virtual Machine** (**JVM**). If
    not disabled, this channel can pose a security risk.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 准备Xamarin.Android应用程序发布的初始步骤是禁用Xamarin工具或`adb`用于与**Java虚拟机**（**JVM**）通信的Java调试线协议（**JDWP**）调试通道。如果不禁用，此通道可能会造成安全风险。
- en: 'JDWP can be disabled by using either the application manifest or the `AssemblyInfo.cs`
    file. In order to disable debugging using the application manifest, the `android:debuggable`
    attribute needs to be set to `false` on the application node:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过应用程序清单或`AssemblyInfo.cs`文件来禁用JDWP。为了通过应用程序清单禁用调试，需要在应用程序节点上设置`android:debuggable`属性为`false`：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The entry in the `AssemblyInfo.cs` looks similar:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`AssemblyInfo.cs`中的条目看起来类似：'
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Note that debug builds contain certain permissions, such as storage access and
    Internet usage, automatically enabled. Once the application is built with a release
    configuration, it is a good idea to run the application through another round
    of regression testing and, if necessary, modify the explicit permission declarations
    in the application manifest.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，调试构建包含某些权限，如存储访问和互联网使用，会自动启用。一旦应用程序使用发布配置构建，运行应用程序进行另一轮回归测试是一个好主意，如果需要，修改应用程序清单中的显式权限声明。
- en: Linking
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 链接
- en: During the development phase, application deployments generally contain the
    whole set of Xamarin.Android runtime assemblies (no linking). Linking is the process
    where only the required components are introduced into the application package
    to reduce the application package's size. A static analysis algorithm (that is,
    ahead-of-time compilation) is used during the linking process, in which the dependencies
    are identified and included in the bundle.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发阶段，应用程序部署通常包含整个Xamarin.Android运行时程序集集（无链接）。链接是一个过程，其中只将所需的组件引入到应用程序包中，以减小应用程序包的大小。在链接过程中使用了一个静态分析算法（即编译前编译），在这个过程中，会识别依赖关系并将其包含在包中。
- en: 'There are three available options that define which assemblies will be put
    through the process of linking:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 有三个可用的选项定义了哪些组件将经过链接过程：
- en: '**None**: This is the default configuration value for debug builds. No linking
    is performed.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**None**: 这是调试构建的默认配置值。不执行链接操作。'
- en: '**Sdk Assemblies Only**: Only Xamarin.Android runtime assemblies are linked.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仅Sdk组件**：仅链接Xamarin.Android运行时组件。'
- en: '**Sdk and User Assemblies**: Both Xamarin.Android runtime assemblies and the
    application libraries are statically analyzed for code reach.![Linking](img/B04693_12_01.jpg)'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Sdk和用户组件**：对Xamarin.Android运行时组件和应用程序库进行静态分析以确定代码可达性。![链接](img/B04693_12_01.jpg)'
- en: 'Figure 1: Linker options'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图1：链接器选项
- en: 'In order to ensure that certain types and namespaces are included in the final
    package, even though they are not statically reachable, a simple public class
    declaration with public methods using the required types as parameters can create
    the necessary code reachability (see `LinkerPleaseInclude.cs`):'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保某些类型和命名空间包含在最终包中，即使它们不是静态可访问的，也可以通过使用所需类型作为参数的公共类声明和公共方法创建必要的代码可达性（参见`LinkerPleaseInclude.cs`）：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Linking certain types and methods can also be achieved using a link description
    file. In order to create a link description file, an XML file with the build action
    set to `LinkDescription` should be created in the Xamarin.Android project. The
    file schema for `LinkDescription` uses a simple declarative structure:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 使用链接描述文件也可以实现链接特定类型和方法。为了创建链接描述文件，应在Xamarin.Android项目中创建一个设置构建操作为`LinkDescription`的XML文件。`LinkDescription`的文件架构使用简单的声明性结构：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Once the application is built and the package is exported, comparing the size
    of the signed `apk` packages for `None`, `Sdk`, and `All` assemblies shows a noticeable
    reduction in size:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用程序构建完成并且包已导出，比较`None`、`Sdk`和`All`组件的签名`apk`包的大小，会发现明显的尺寸减少：
- en: '![Linking](img/B04693_12_02.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![链接](img/B04693_12_02.jpg)'
- en: 'Figure 2: Android linker results'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图2：Android链接器结果
- en: Just like the release build, after the linking step, it is highly advised to
    run another setup regression test to see if the application features are functioning
    as expected.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 就像发布构建一样，在链接步骤之后，强烈建议运行另一个设置回归测试，以查看应用程序功能是否按预期工作。
- en: Packing options
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 打包选项
- en: Important application package-related configuration values can be found in the
    **Packaging** section of the **Android Options** tab of the **Project Properties**
    page. In spite of the fact that most of the configuration values are disabled
    by default in a normal release build, they might be used for optimizing the release
    package in certain scenarios. **Use Shared Runtime** and **Use Fast Deployment**
    are, under normal circumstances, intended for debug builds and are used to increase
    the productivity of developers.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 重要应用程序包相关配置值可以在**项目属性**页的**Android选项**标签页的**打包**部分找到。尽管在正常发布构建中，大多数配置值默认禁用，但在某些场景下，它们可能用于优化发布包。**使用共享运行时**和**使用快速部署**在正常情况下是针对调试构建的，用于提高开发者的生产力。
- en: '**Bundle assemblies into native code**: This option instructs the mono compiler
    to bundle the application assemblies into a native shared library as a security
    measure (only available with an Enterprise license).'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将组件打包成原生代码**：此选项指示Mono编译器将应用程序组件打包成一个原生共享库，作为安全措施（仅适用于企业许可证）。'
- en: '**Generate one package (.apk) per selected ABI**: Each selected **Application
    Binary Interface** (**ABI**) will cause the compiler to generate a separate package.
    For instance, if armeabi-v7a and x86 CPU architectures are selected, two application
    packages will be generated.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**为每个选定的ABI生成一个包（.apk）**：每个选定的**应用程序二进制接口（ABI**）将导致编译器生成一个单独的包。例如，如果选择了armeabi-v7a和x86
    CPU架构，将生成两个应用程序包。'
- en: '**AOT Compilation** (experimental): Ahead-of-time compilation converts the
    application assemblies into native code to decrease the initialization time for
    the application while increasing the application package size (only available
    with Business or Enterprise licenses).'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AOT编译**（实验性）：提前编译将应用程序组件转换为原生代码，以减少应用程序的初始化时间，同时增加应用程序包的大小（仅适用于商业或企业许可证）。'
- en: '**Enable Multi-Dex**: In order to work around the DEX method count limit, the
    Multi-Dex feature was introduced in the Android Lollipop (API 21) release and
    a retroactive support library was released for API levels 4 through 20\. This
    option enables the use of multiple DEX files.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启用多DEX**：为了绕过DEX方法计数限制，Android Lollipop（API 21）版本中引入了多DEX功能，并为API级别4到20发布了回溯支持库。此选项启用使用多个DEX文件。'
- en: Note
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Android application packages contain an executable bytecode file called the
    Dalvik Executable file (DEX). This file contains the compiled code used in the
    application runtime and has a limit of 64*210 (65536) methods referenced (including
    Android framework methods, library methods, and custom code introduced by the
    application).
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Android应用程序包包含一个名为Dalvik可执行文件（DEX）的可执行字节码文件。此文件包含应用程序运行时使用的编译代码，并且引用的方法数量有限制，为64*210（65536）个（包括Android框架方法、库方法和应用程序引入的自定义代码）。
- en: '**Enable ProGuard**: ProGuard is another option that can help reduce the size
    of the application and the DEX declarations. For applications developed with a
    native toolset, ProGuard can also obfuscate the application code, but this option
    is currently not available for Xamarin.Android applications.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启用ProGuard**：ProGuard是另一个可以帮助减小应用程序和DEX声明的选项。对于使用原生工具集开发的应用程序，ProGuard还可以混淆应用程序代码，但此选项目前不可用于Xamarin.Android应用程序。'
- en: Packaging
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 打包
- en: Once the preparation steps are complete, Xamarin.Android application packages
    can be created either with Visual Studio or Xamarin Studio. Xamarin Studio offers
    the option of archiving the builds so that they can be easily signed and pushed
    to available channels.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 准备步骤完成后，可以使用Visual Studio或Xamarin Studio创建Xamarin.Android应用程序包。Xamarin Studio提供归档构建的选项，以便它们可以轻松签名并推送到可用渠道。
- en: The application package can be archived using the **Archive for Publishing**
    option in the project context menu. (Similarly, the **View Archives** button can
    be used to access previous archives.) In the archives view, the selected application
    package can be signed and ready for store submission or ad-hoc (see *Distribution
    options*) distribution.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用项目上下文菜单中的**归档以发布**选项来归档应用程序包。（同样，可以使用**查看归档**按钮访问以前的归档。）在归档视图中，所选的应用程序包可以签名并准备好提交到商店或临时（参见*分发选项*）分发。
- en: '![Packaging](img/B04693_12_03.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![打包](img/B04693_12_03.jpg)'
- en: 'Figure 3: Xamarin Studio package archives'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图3：Xamarin Studio包归档
- en: Packages created with the `Export Android Package` option using Visual Studio
    are signed with the debug key. These packages should not, and in most cases cannot,
    be distributed through normal channels. In order to create the release-ready package,
    the unsigned package from the build directory should be located and the package
    should be signed using the `jarsigner` utility from Java SDK.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Visual Studio的`导出Android包`选项创建的包使用调试密钥签名。这些包不应，并且在大多数情况下不能，通过正常渠道分发。为了创建发布就绪的包，应定位构建目录中的未签名包，并使用Java
    SDK中的`jarsigner`实用程序对包进行签名。
- en: Xamarin.iOS app bundle (.ipa)
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Xamarin.iOS应用程序包（.ipa）
- en: Before any iOS application can be published to the App Store, there are several
    configuration values that need to be configured and revised. More importantly,
    the build process should be configured as a release build and the package should
    be signed with a proper identity before it can be submitted through iTunes Connect.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何iOS应用程序可以发布到App Store之前，需要配置和修改几个配置值。更重要的是，构建过程应配置为发布构建，并且在提交到iTunes Connect之前，包应使用适当的身份进行签名。
- en: Build options
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建选项
- en: For a release build (ad-hoc or app-store), once the active build configuration
    is set, some of the values are automatically adjusted to the developers' convenience.
    For instance, options related to debugging such as **Enable Profiling** and **Enable
    incremental builds** are automatically disabled. These options, together with
    the **Enable Debugging** option, produce larger application packages that are
    not valid for store submission.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 对于发布构建（临时或应用商店），一旦设置了活动构建配置，一些值会自动调整为开发者的便利性。例如，与调试相关的选项，如**启用性能分析**和**启用增量构建**，会自动禁用。这些选项，连同**启用调试**选项一起，会产生较大的应用程序包，这些包对于商店提交无效。
- en: Other than the debugging options, the supported CPU architectures must be carefully
    configured. While it is possible to combine the selections (such as ARMv7 + ARM64,
    as seen in the figure below), each architecture targets a certain iPhone or iPad
    model. ARMv6 was the initial CPU architecture that was used in iPhone 3G. This
    architecture is no longer supported by iOS compilers. Starting with iPhone 3GS,
    up until iPhone 5, including iPads, the CPU architecture used was ARMv7\. ARMv7s
    and ARM64 were used in iPhone 5 and iPhone 5s respectively. iPhone 6 uses ARMv8,
    which is another 64-bit processor (that is, the build requirement would be ARM64).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 除了调试选项之外，必须仔细配置支持的 CPU 架构。虽然可以组合选择（如图下所示的 ARMv7 + ARM64），但每个架构针对特定的 iPhone 或
    iPad 模型。ARMv6 是 iPhone 3G 最初使用的 CPU 架构。这个架构不再被 iOS 编译器支持。从 iPhone 3GS 开始，直到 iPhone
    5，包括 iPad，使用的 CPU 架构是 ARMv7。ARMv7s 和 ARM64 分别用于 iPhone 5 和 iPhone 5s。iPhone 6
    使用 ARMv8，这是一种另一款 64 位处理器（即，构建要求将是 ARM64）。
- en: '![Build options](img/B04693_12_04.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![构建选项](img/B04693_12_04.jpg)'
- en: 'Figure 4: iOS build configuration'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4：iOS 构建配置
- en: '**Low Level Virtual Machine** (**LLVM**) is the name of the set of tools/libraries
    designed for the compile-time optimization of programs written in various programming
    languages. It was released under an open source license. During the development
    phase, Xamarin tools only utilize mono compiler (`mtouch`). Mono compiler produces
    less optimized but more "accessible" binaries that make them possible to debug
    and diagnose. However, for release builds using LLVM, it can generate much more
    optimized results.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**低级虚拟机**（**LLVM**）是一组工具/库的名称，旨在为各种编程语言编写的程序进行编译时优化。它是在开源许可下发布的。在开发阶段，Xamarin
    工具仅使用 mono 编译器（`mtouch`）。Mono 编译器生成的二进制文件优化程度较低但“可访问性”更高，这使得它们可以调试和诊断。然而，对于使用
    LLVM 的发布构建，它可以生成更多优化的结果。'
- en: While LLVM provides both package size and runtime enhancements, the Thumb-2
    instruction set is simply an executable size improvement. ARMv7 and ARMv7s processors
    use this compact instruction set. It can provide a significant reduction in the
    package size at the expense of slower execution time.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 LLVM 提供了包大小和运行时增强，但 Thumb-2 指令集仅仅是可执行大小的改进。ARMv7 和 ARMv7s 处理器使用这个紧凑的指令集。它可以在牺牲较慢的执行时间的情况下显著减少包大小。
- en: Linking
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 链接
- en: Linking works in a similar way as in Xamarin.Android platform. In addition to
    arbitrary class creation with public methods to avoid certain classes being linked
    out, on Xamarin.iOS, `Preserve` attribute can be used on class declarations to
    inform the compiler about the necessity of a certain class and its members (such
    as `[Preserve(AllMembers = true)]`).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 链接的工作方式与 Xamarin.Android 平台类似。除了使用公共方法创建任意类以避免某些类被链接出来之外，在 Xamarin.iOS 上，可以在类声明上使用
    `Preserve` 属性来通知编译器有关某个类及其成员（如 `[Preserve(AllMembers = true)]`）的必要性。
- en: Provisioning profile
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置文件
- en: Provisioning profiles are used to set up the entitlements and package signing
    information for iOS applications. In order to create a publishing-ready iOS package,
    users first need to create the application metadata on Apple's iOS provisioning
    portal.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件用于设置 iOS 应用程序的权限和包签名信息。为了创建一个可发布的 iOS 包，用户首先需要在苹果的 iOS 配置文件门户上创建应用程序元数据。
- en: On the provisioning portal, developers should first choose a unique application
    name and a bundle ID. These will be used to identify the application once it is
    published. Additionally, the App Services that are required by the application
    should be selected.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置文件门户上，开发者应首先选择一个独特的应用程序名称和捆绑 ID。一旦发布，这些将用于识别应用程序。此外，还需要选择应用程序所需的应用程序服务。
- en: Other than the App ID, a distribution profile should be created for the application.
    In order to create the distribution profile, one would need to select the Provision->Distribution
    node on the application portal navigation tree. Using the **+** button, a new
    distribution profile can be created. In the distribution profile wizard, the user
    need to select the distribution type (that is, **App Store** or **Ad Hoc**), select
    the App ID that was previously created, possible deployment devices, and a signing
    certificate (a signing certificate can be requested from Apple's Members Center).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 除了App ID之外，还应为应用程序创建分发配置文件。为了创建分发配置文件，需要在应用程序门户导航树中选择Provision->Distribution节点。使用**+**按钮可以创建一个新的分发配置文件。在分发配置文件向导中，用户需要选择分发类型（即，**App
    Store**或**Ad Hoc**），选择之前创建的App ID，可能的部署设备和签名证书（可以从苹果的会员中心请求签名证书）。
- en: Once the App ID and provisioning profile are created, the application metadata
    should be set up in the Xamarin.iOS project settings in the iOS **Application
    Settings** section (`Info.plist` and `Entitlements.plist` files can also be directly
    configured).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了App ID和配置文件，应在Xamarin.iOS项目的iOS**应用设置**部分设置应用程序元数据（`Info.plist`和`Entitlements.plist`文件也可以直接配置）。
- en: Finally, the **Archive for Publishing** button can be used to create the release
    package. Once the build is complete, the new package will be shown in the archives
    window. Selecting the correct application and using the **Sign and Distribute**
    option will open the publishing wizard where the previously configured provisioning
    profile can be selected and applied to the current build package.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，可以使用**发布存档**按钮来创建发布包。一旦构建完成，新的包将在存档窗口中显示。选择正确的应用程序并使用**签名和分发**选项将打开发布向导，在此向导中可以选择并应用之前配置的配置文件到当前构建包。
- en: Windows Phone app package (.appx)
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Windows Phone应用程序包 (.appx)
- en: Windows Phone and Windows Store application packages are prepared using the
    available toolset for Windows app developers in Visual Studio. In the release
    preparation phase, Windows Phone applications do not require or interact with
    any Xamarin components.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Visual Studio中为Windows应用程序开发者提供的工具集准备Windows Phone和Windows Store应用程序包。在发布准备阶段，Windows
    Phone应用程序不需要或与任何Xamarin组件交互。
- en: Distribution options
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分发选项
- en: Just like the beta builds, there are different distribution options for the
    release versions of Xamarin applications. Public app stores are the easiest and
    the most convenient way to distribute mobile applications, targeting the general
    public. On the other hand, private application distribution channels may be needed
    for enterprise application distribution scenarios.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 与测试版构建一样，Xamarin应用程序的发布版本也有不同的分发选项。公共应用商店是分发移动应用程序最简单、最方便的方式，面向大众。另一方面，对于企业应用程序的分发场景，可能需要私有应用程序分发渠道。
- en: App store(s)
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用商店
- en: For Xamarin.iOS and Windows Phone applications, the only official distribution
    stores are application stores maintained by Apple and Microsoft respectively.
    Each of these application stores has a well-defined submission flow involving
    both content validation (that is, whether the application meet the content guidelines)
    and technical validation (that is, does the application meets the quality criteria).
    It is highly advisable to read the appropriate application certification guidelines
    before submitting the release-ready package to either of these stores. In order
    to distribute applications using iTunes Connect tools and Apple App Store, developers
    need to apply for a developer account and pay an annual subscription fee. Windows
    App Store requires a developer account subscription, which at the moment is free
    of charge.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Xamarin.iOS和Windows Phone应用程序，唯一的官方分发商店分别是苹果和微软分别维护的应用商店。这些应用商店都有明确的提交流程，包括内容验证（即，应用程序是否符合内容指南）和技术验证（即，应用程序是否符合质量标准）。在将发布包提交给这些商店之前，强烈建议阅读适当的应用程序认证指南。为了使用iTunes
    Connect工具和Apple App Store分发应用程序，开发者需要申请开发者账户并支付年度订阅费。Windows App Store需要开发者账户订阅，目前是免费的。
- en: On the other hand, Android developers have a big pool of options as public app
    distribution channels. The most popular stores are the Google Play and Amazon
    App stores. Both of these stores allow developers to publish both paid and free
    applications.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，Android 开发者有大量的公共应用程序分发渠道可供选择。最受欢迎的商店是 Google Play 和 Amazon 应用商店。这两个商店都允许开发者发布付费和免费的应用程序。
- en: The Google Play store serves as the official app store for the Android operating
    system. It was originally called the Android Market and later on merged with two
    other Google products, namely Google Music and Google eBookstore. The Google Play
    store requires developers to sign up with a small subscription fee before they
    can distribute applications. Security and quality testing is one of the most essential
    steps of the app certification process, which makes this store the most trusted
    among Android users.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Google Play 商店是 Android 操作系统的官方应用程序商店。它最初被称为 Android Market，后来与另外两个 Google 产品合并，即
    Google 音乐和 Google 电子书商店。Google Play 商店要求开发者支付小额订阅费才能分发应用程序。安全和质量测试是应用程序认证过程中最重要的步骤之一，这使得该商店在
    Android 用户中最为可信。
- en: On the other hand, the Amazon App store was initially created for Amazon Kindle
    Fire devices specifically, and yet it became the second biggest store for Android
    applications. Developers can sign up for a free developer account, and the revenue
    share model is the same as other popular stores (that is, 70% developer/30% store).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，Amazon 应用商店最初是为 Amazon Kindle Fire 设备专门创建的，但后来成为 Android 应用程序的第二大商店。开发者可以免费注册开发者账户，并且收入分成模式与其他流行商店相同（即，70%
    开发者/30% 商店）。
- en: Other than the two biggest stores, there are other application stores for Android
    applications. The most intriguing app store provider is the F-Droid store, which
    focuses on free and open source software (FOSS) for the Android operating system.
    This store attracts many users since the store policy dictates that there is no
    tracking, advertising, or dependencies in distributed applications.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 除了两个最大的商店外，还有其他 Android 应用程序商店。最引人注目的应用程序商店提供商是 F-Droid 商店，它专注于 Android 操作系统的免费和开源软件（FOSS）。由于商店政策规定分发应用程序中不包含跟踪、广告或依赖项，因此该商店吸引了众多用户。
- en: Ad-hoc
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 临时分发
- en: Ad-hoc distribution is the name given to the process by which application packages
    are distributed to users for testing or private use through various communication
    channels (such as shared storage, online sharing, e-mail, and so on).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 临时分发是指通过各种通信渠道（如共享存储、在线分享、电子邮件等）将应用程序包分发给用户进行测试或私人使用的过程的名称。
- en: This type of distribution was mentioned in the beta testing part of the previous
    chapter, but at times, applications built only for internal use can be distributed
    in this manner.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这种分发方式在前一章的测试部分中提到过，但有时仅用于内部使用构建的应用程序也可以以这种方式分发。
- en: 'The ad-hoc distribution concept can be divided into two categories: signed
    and unsigned distribution. The official way of distributing application packages
    over the air is to digitally sign the application packages with a trusted certificate
    (that is, the signing identity should be created using the official channels such
    as signing certificate providers). Once the application package is digitally signed
    with a certificate from a trusted provider, the app can be sideloaded to mobile
    devices. Sideloading is the process of installing an app without using a public
    or private store.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 临时分发概念可以分为两大类：签名分发和无签名分发。在空中分发应用程序包的官方方式是使用受信任的证书对应用程序包进行数字签名（即，签名身份应使用官方渠道创建，例如签名证书提供商）。一旦应用程序包使用受信任提供商的证书进行了数字签名，该应用程序就可以侧载到移动设备上。侧载是指在不使用公共或私人商店的情况下安装应用程序的过程。
- en: If the application is signed by a self-signed certificate, the application publisher
    would simply be unidentifiable. In this type of scenario, either the owner of
    the device should allow applications to be installed from unknown sources (on
    Android and Windows 10 mobile devices) or the device should be developer unlocked
    (on Windows Phone) or jailbroken (on iOS). While unlocking a device is an official
    process on Windows Phone devices, jailbreaking violates the end-user license agreement
    for iOS.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用程序使用自签名证书进行签名，应用程序发布者将无法识别。在这种情况下，设备所有者应允许从未知来源安装应用程序（在 Android 和 Windows
    10 移动设备上），或者设备应解锁为开发者模式（在 Windows Phone 上）或越狱（在 iOS 上）。虽然在 Windows Phone 设备上解锁设备是官方流程，但越狱违反了
    iOS 的最终用户许可协议。
- en: Line of Business apps
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 商业线应用程序
- en: Line of Business applications, or LOB apps, is a term generally used synonymously
    with enterprise applications. These applications are either developed in-house,
    or outsourced for the specific needs of a company. In other words, LOB apps can
    be categorized as business rather than consumer applications. They are generally
    domain-specific and target a small group with a specific need.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 商业线应用程序，或LOB应用程序，是一个通常与企业应用程序同义的术语。这些应用程序要么是内部开发的，要么是针对公司特定需求外包的。换句话说，LOB应用程序可以归类为商业而非消费应用程序。它们通常是特定领域的，针对具有特定需求的小组。
- en: Private channel distribution (Android)
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 私有渠道分发（Android）
- en: One way of distributing LOB applications built for Android platform is to use
    the Google Play private channels. Applications distributed through these channels
    are restricted to users of a specific domain. In order to use private channels,
    one needs to have a subscription to either Google Play for Work, Google Apps for
    Business, Education, or Government.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 分发为Android平台构建的LOB应用程序的一种方式是使用Google Play私有渠道。通过这些渠道分发的应用程序仅限于特定域的用户。为了使用私有渠道，需要订阅Google
    Play for Work、Google Apps for Business、教育或政府。
- en: While app pricing and other distribution settings may still apply to these private
    apps, the testing and validation steps are skipped in the store submission process.
    App submissions can either be done by the owner of the channel or the permissions
    can be delegated to another user in the same domain.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然应用定价和其他分发设置可能仍然适用于这些私有应用程序，但在商店提交过程中会跳过测试和验证步骤。应用提交可以由渠道所有者完成，或者权限可以委派给同一域内的其他用户。
- en: Apple Developer Enterprise Program
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 苹果开发者企业计划
- en: The Apple Developer Enterprise Program is Apple's initiative to support companies
    to develop and distribute in-house applications. This program is only available
    for companies that exist as a legal entity (the D-U-N-S number is required). Once
    the organization is enrolled in the Enterprise Program, development and release
    management team members can be assigned roles, as well as digital certificates
    and provisioning profiles. However, these provisioning profiles cannot contain
    the App Store distribution method (that is, the only available provisioning profiles
    are in-house and ad-hoc).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 苹果开发者企业计划是苹果支持公司开发和分发内部应用程序的举措。此计划仅适用于作为法律实体存在的公司（需要D-U-N-S号码）。一旦组织注册了企业计划，开发和管理团队成员可以分配角色，以及数字证书和配置文件。然而，这些配置文件不能包含App
    Store分发方法（即，唯一可用的配置文件是内部和临时的）。
- en: '![Apple Developer Enterprise Program](img/B04693_12_05.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![苹果开发者企业计划](img/B04693_12_05.jpg)'
- en: 'Figure 5: Provisioning profile for Apple Developer Enterprise Program'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图5：苹果开发者企业计划的配置文件
- en: The applications built under the enterprise program can be distributed through
    native or third-party **Mobile Device Management** (**MDM**) solutions, as well
    as ad-hoc packages.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在企业计划下构建的应用程序可以通过原生或第三方**移动设备管理（MDM**）解决方案以及临时包进行分发。
- en: Windows Phone private distribution
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Windows Phone私有分发
- en: Windows Phone applications can be developed and distributed for in-house utilization,
    using the application signing certificate purchased from Symantec (Symantec is
    currently the only provider of this type of certificate). Using the mobile signing
    certificate, application packages can signed and distributed through MDMs or sideloaded
    into company devices.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Windows Phone应用程序可以用于内部使用进行开发和分发，使用从赛门铁克（Symantec）购买的签名证书（赛门铁克目前是此类证书的唯一提供者）。使用移动签名证书，应用程序包可以签名并通过MDM分发，或者侧载到公司设备中。
- en: Most MDM providers, such as Microsoft Intune, come equipped with a company store
    application that can be used to provide applications for company devices. Device
    management systems also make it possible to install the company applications directly
    for domain users.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数MDM提供商，如Microsoft Intune，都配备了公司商店应用程序，可用于为公司设备提供应用程序。设备管理系统还使直接为域用户安装公司应用程序成为可能。
- en: It is also possible to install the signing certificate on devices, which will
    benefit from in-house applications and distribute applications through custom
    company hub applications.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以在设备上安装签名证书，这将使内部应用程序受益，并通过定制的公司中心应用程序分发应用程序。
- en: Summary
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we briefly went over the package preparation process for Xamarin.Android
    and Xamarin.iOS applications (and also Windows Phone). As you can see, preparing
    the release package is a little more complicated then pressing the **Debug** button
    on the development IDE of choice. However, each of these platforms have well-defined
    application certification guidelines and online resources.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们简要介绍了Xamarin.Android和Xamarin.iOS应用（以及Windows Phone）的发布包准备过程。正如您所看到的，准备发布包比在所选的开发IDE上按下**调试**按钮要复杂一些。然而，每个平台都有明确的应用认证指南和在线资源。
- en: Once the release packages are prepared, it is up to the developer to choose
    between different distribution options, including but not limited to, the public
    and private stores that can be used to publish the release packages. Public store
    applications can be delivered to the general public, while private distribution
    channels or ad-hoc deployments, involving sideloading and MDMs, can be used for
    LOB applications.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦准备完成发布包，开发者需要从不同的分发选项中进行选择，包括但不限于可以用来发布发布包的公共和私有存储库。公共存储库应用可以交付给公众，而私有分发渠道或临时部署，涉及侧载和MDMs，可以用于LOB应用。
