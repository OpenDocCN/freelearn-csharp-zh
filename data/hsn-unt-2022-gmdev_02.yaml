- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Editing Scenes and Game Objects
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑场景和游戏对象
- en: In this chapter, we will develop some base knowledge of Unity in order to edit
    a project, and learn how to use several Unity editor windows to manipulate our
    first scene and its objects. We will also learn how an object, or GameObject,
    is created and composed, and how to manage complex scenes with multiple objects
    using Hierarchies and Prefabs. Finally, we will review how we can properly save
    all our work to continue working on it later.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习一些Unity的基础知识，以便编辑项目，并学习如何使用几个Unity编辑器窗口来操作我们的第一个场景及其对象。我们还将了解一个对象，或称为GameObject，是如何创建和组成的，以及如何使用层级和预制件来管理包含多个对象的复杂场景。最后，我们将回顾如何正确保存所有工作以便稍后继续工作。
- en: 'Specifically, we will examine the following concepts in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，在本章中，我们将探讨以下概念：
- en: Manipulating scenes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作场景
- en: GameObjects and components
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GameObjects和组件
- en: Object Hierarchies
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象层级
- en: Prefabs
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预制件
- en: Saving scenes and projects
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保存场景和项目
- en: Manipulating scenes
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作场景
- en: 'A **scene** is one of the several types of files (also known as **assets**)
    in our project. A “scene” can be used for different things according to the type
    of project, but the most common use case is to separate your game into whole sections,
    the most common ones being the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**场景**是我们项目中几种类型的文件（也称为**资产**）之一。根据项目的类型，“场景”可以用于不同的目的，但最常见的情况是将游戏分成整个部分，最常见的是以下几种：'
- en: Main menu
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主菜单
- en: Level 1, Level 2, Level 3, etc.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第1级，第2级，第3级等。
- en: Victory screen and lose screen
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 胜利画面和失败画面
- en: Splash screen and loading screen
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动画面和加载画面
- en: 'In this section, we will cover the following concepts related to scenes:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍与场景相关的以下概念：
- en: The purpose of a scene
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 场景的目的
- en: The Scene View
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 场景视图
- en: Adding our first GameObject to the scene
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将我们的第一个GameObject添加到场景中
- en: Navigating the Scene View
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导航场景视图
- en: Manipulating GameObjects
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作游戏对象
- en: So, let’s take a look at each of these concepts.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们逐一看看这些概念。
- en: The purpose of a scene
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 场景的目的
- en: The idea of separating your game into scenes is so that Unity can process and
    load just the data needed for the scene. Let’s say you are in the main menu; in
    such a case, you will have only the textures, music, and objects that the main
    menu needs loaded in **random-access memory** (**RAM**), the device’s main memory.
    In that case, there’s no need for your game to have loaded the Level 10 boss if
    you don’t need it right now. That’s why loading screens exist, just to fill the
    time between unloading the assets needed in one scene and loading the assets needed
    in another. Maybe you are thinking that open-world games such as *Grand Theft
    Auto* don’t have loading screens while you roam around in the world, but they
    are actually loading and unloading chunks of the world in the background as you
    move, and those chunks are different scenes that are designed to be connected
    to each other.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 将游戏分成场景的想法是为了让Unity只处理和加载场景所需的数据。假设你处于主菜单；在这种情况下，你将只有主菜单需要的纹理、音乐和对象被加载到**随机存取存储器**（**RAM**），即设备的主要内存。在这种情况下，如果你的游戏不需要加载第10关的Boss，就没有必要加载它。这就是为什么存在加载画面，只是为了填补在卸载一个场景所需的资产和加载另一个场景所需的资产之间的时间。也许你认为像*侠盗猎车手*这样的开放世界游戏在你四处游荡时没有加载画面，但实际上，当你移动时，它们在后台加载和卸载世界的一部分，这些部分是设计成可以相互连接的不同场景。
- en: The difference between the Main Menu and a regular level scene is the objects
    (also known as **GameObjects** in the Unity lingo) they have. In a menu, you will
    find objects such as backgrounds, music, buttons, and logos, and in a level, you
    will have the player, enemies, platforms, health boxes, and so on. So, the meaning
    of your scene depends on what GameObjects are put into it. But how can we create
    a scene? Let’s start with the Scene View.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 主菜单和普通关卡场景之间的区别在于它们所拥有的对象（在Unity术语中也称为**GameObject**）。在菜单中，你会找到背景、音乐、按钮和标志等对象，而在关卡中，你将拥有玩家、敌人、平台、生命值箱等等。因此，场景的意义取决于其中放置了哪些GameObject。但我们如何创建一个场景呢？让我们从场景视图开始。
- en: The Scene View
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 场景视图
- en: 'When you open a Unity project, you will see the Unity editor. It will be composed
    of several windows or **panels**, each one helping you to change different aspects
    of your game. In this chapter, we will be looking at the windows that help you
    create scenes. The Unity editor is shown in the following screenshot:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当你打开Unity项目时，你会看到Unity编辑器。它将由几个窗口或**面板**组成，每个面板都帮助你改变游戏的不同方面。在本章中，我们将查看帮助你创建场景的窗口。以下截图展示了Unity编辑器：
- en: '![](img/B18585_02_01.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B18585_02_01.png)'
- en: 'Figure 2.1: The Unity editor'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.1：Unity编辑器
- en: 'If you have ever programmed any kind of application before, you are probably
    used to having a starting function such as **Main**, where you start writing code
    to create several objects needed for your app. If we are talking about games,
    you probably create all the objects for the scene there. The problem with this
    approach is that in order to ensure all objects are created properly, you will
    need to run the program to see the results, and if something is misplaced, you
    will need to manually change the coordinates of the object, which is a slow and
    painful process. Luckily, in Unity, we have the Scene View, an example of which
    is shown in the following screenshot:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你之前编程过任何类型的应用程序，你可能已经习惯了有一个起始函数，比如**Main**，在那里你开始编写代码来创建应用程序所需的几个对象。如果我们谈论游戏，你可能在那里创建场景中的所有对象。这种方法的缺点是，为了确保所有对象都正确创建，你需要运行程序来查看结果，如果某个对象放置不当，你需要手动更改对象的坐标，这是一个缓慢且痛苦的过程。幸运的是，在Unity中，我们有场景视图，以下截图展示了其示例：
- en: '![](img/B18585_02_02.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B18585_02_02.png)'
- en: 'Figure 2.2: The Scene View'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.2：场景视图
- en: This window is an implementation of the classic **WYSIWYG (What You See Is What
    You Get)** concept. Here, you can create objects and place them all over the scene,
    all through a scene previsualization where you can see how the scene will look
    when you hit **Play**. But before learning how to use this scene, we need to have
    an object in the scene, so let’s create our first object.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这个窗口是经典**所见即所得 (WYSIWYG)**概念的实现。在这里，你可以创建对象并将它们放置在场景的各个位置，所有这些操作都通过场景预览来完成，你可以看到当你点击**播放**时场景将如何呈现。但在学习如何使用这个场景之前，我们需要在场景中有一个对象，所以让我们创建我们的第一个对象。
- en: Adding our first GameObject to the scene
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将我们的第一个GameObject添加到场景中
- en: 'The project template we chose when creating the project comes with a blank
    scene ready to work with, but let’s create our own empty scene to see how to do
    it ourselves. To do that, you can simply use the **File** | **New Scene** menu
    to create an empty new scene, as illustrated in the following screenshot:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建项目时我们选择的模板项目附带了一个空白场景，可以开始工作，但让我们创建一个自己的空场景来看看如何自己完成。为此，你可以简单地使用**文件** |
    **新建场景**菜单来创建一个空的新场景，如下截图所示：
- en: '![](img/B18585_02_03.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B18585_02_03.png)'
- en: 'Figure 2.3: Creating a new scene'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.3：创建新场景
- en: 'After clicking **New Scene**, you will see a window to pick a scene template;
    here, select the **Basic (URP)** template. A template defines which objects the
    new scene will have, and in this case, our template will come with a basic light
    and a camera, which will be useful for the scene we want to create. Once selected,
    just click the **Create** button:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**新建场景**后，你会看到一个窗口来选择场景模板；在这里，选择**基本（URP）**模板。模板定义了新场景将包含哪些对象，在这种情况下，我们的模板将附带一个基本光源和一个相机，这对我们想要创建的场景将很有用。一旦选择，只需点击**创建**按钮：
- en: '![](img/B18585_02_04.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B18585_02_04.png)'
- en: 'Figure 2.4: Selecting the scene template'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.4：选择场景模板
- en: 'Now that we have our empty scene, let’s add GameObjects to it. We will learn
    several ways of creating GameObjects throughout the book, but for now, let’s start
    using some basic templates Unity provides us. In order to create them, we will
    need to open the **GameObject** menu at the top of the Unity window, and it will
    show us several template categories, such as **3D Object**, **2D Object**, **Effects**,
    and so on, as illustrated in the following screenshot:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了空场景，让我们向其中添加GameObject。我们将在整本书中学习创建GameObject的几种方法，但就现在而言，让我们开始使用Unity为我们提供的几个基本模板。为了创建它们，我们需要打开Unity窗口顶部的**GameObject**菜单，它将显示几个模板类别，如**3D对象**、**2D对象**、**效果**等，如下截图所示：
- en: '![](img/B18585_02_05.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B18585_02_05.png)'
- en: 'Figure 2.5: Creating a cube'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.5：创建一个立方体
- en: Under the **3D Object** category, we will see several 3D primitives such as
    **Cube**, **Sphere**, **Cylinder**, and so on, and while using them is not as
    exciting as using beautiful, downloaded 3D models, remember that we are only prototyping
    our level at the moment. This is called **gray-boxing**, which means that we will
    use lots of prototyping primitive shapes to model our level so that we can quickly
    test it and see if our idea is good enough to start the complex work of converting
    it to a final version.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在**3D对象**类别下，我们将看到几个3D基本形状，如**立方体**、**球体**、**圆柱体**等，虽然使用它们不如使用漂亮的下载3D模型那么令人兴奋，但请记住，我们目前只是在原型化我们的关卡。这被称为**灰盒测试**，意味着我们将使用大量的原型基本形状来建模我们的关卡，以便我们可以快速测试它，看看我们的想法是否足够好，可以开始将其转换为最终版本的工作。
- en: I recommend you pick the **Cube** object to start because it is a versatile
    shape that can represent lots of objects. So, now that we have a scene with an
    object to edit, the first thing we need to learn to do with the Scene View is
    to navigate through the scene.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议您选择**立方体**对象开始，因为它是一个多功能的形状，可以代表许多对象。所以，现在我们有一个可以编辑的场景对象，我们需要学习使用场景视图在场景中导航的第一件事。
- en: Navigating the Scene View
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在场景视图中导航
- en: 'In order to manipulate a scene, we need to learn how to move through it to
    view the results from different perspectives. There are several ways to navigate
    the scene, so let’s start with the most common one, the first-person view. This
    view allows you to move through the scene using a first-person-shooter-like navigation,
    using the mouse and the *WASD* keys. To navigate like this, you will need to press
    and hold the right mouse button, and while doing so, you can:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了操作场景，我们需要学习如何在其中移动以从不同角度查看结果。有几种导航场景的方法，所以让我们从最常见的一种开始，即第一人称视角。这种视角允许您使用类似第一人称射击游戏的导航方式在场景中移动，使用鼠标和*WASD*键。要这样导航，您需要按下并保持鼠标右键，在此过程中，您可以：
- en: Move the mouse to rotate the camera around its current position
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将鼠标移动到当前相机位置周围旋转相机
- en: Press the *WASD* keys to move the position of the camera, always holding the
    right click
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按下*WASD*键来移动相机位置，始终保持右键点击
- en: You can also press *Shift* to move faster
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您也可以按*Shift*键来加快移动速度
- en: Press the *Q* and *E* keys to move up and down
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按下*Q*和*E*键来上下移动
- en: 'Another common way of moving is to click an object to select it (the selected
    object will have an orange outline), and then press the *F* key to focus on it,
    making the Scene View camera immediately move into a position where we can look
    at that object more closely. After that, we can press and hold the left *Alt*key
    on Windows, or *Option* on Mac, along with the left mouse click, to finally start
    moving the mouse and “orbit” around the object. This will allow you to see the
    focused object from different angles to check every part of it is properly placed,
    as demonstrated in the following screenshot:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种常见的移动方式是点击一个对象来选择它（选中的对象将有一个橙色的轮廓），然后按下*F*键来聚焦于它，使场景视图相机立即移动到一个可以更仔细观察该对象的位置。之后，我们可以在Windows上按下并保持左*Alt*键，或在Mac上按下*Option*键，同时与左鼠标点击一起，最终开始移动鼠标并“环绕”对象。这将允许您从不同的角度查看聚焦的对象，以检查它的每个部分是否都正确放置，如下面的截图所示：
- en: '![](img/B18585_02_06.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B18585_02_06.png)'
- en: 'Figure 2.6: Selecting an object'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.6：选择对象
- en: Now that we can move freely through the scene, we can start using the Scene
    View to manipulate GameObjects.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在场景中自由移动，我们可以开始使用场景视图来操作游戏对象。
- en: Manipulating GameObjects
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作游戏对象
- en: 'Another use of the **Scene** view is to manipulate the locations of the objects.
    In order to do so, we first need to select an object, and then press the **Transform**
    tool in the top-left corner of the Scene View. You can also press the *Y* key
    on the keyboard once an object is selected to do the same:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**场景**视图的另一个用途是操纵对象的位置。为了做到这一点，我们首先需要选择一个对象，然后按下场景视图左上角的**变换**工具。一旦选择了对象，您也可以按键盘上的*Y*键来完成同样的操作：'
- en: '![](img/B18585_02_07.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B18585_02_07.png)'
- en: 'Figure 2.7: The transformation tool'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.7：变换工具
- en: 'This will show what is called the **Transform** gizmo over the selected object.
    A **gizmo** is a visual tool overlaid on top of the selected object, used to modify
    different aspects of it. In the case of the **Transform Gizmo,** it allows us
    to change the position, rotation, and scale of the object, as illustrated in *Figure
    2.8*. Don’t worry if you don’t see the cube-shaped arrows outside the sphere—we
    will be enabling them in a moment:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示所选对象上所谓的**变换**辅助工具。**辅助工具**是叠加在所选对象之上的视觉工具，用于修改其不同方面。在**变换辅助工具**的情况下，它允许我们改变对象的位置、旋转和缩放，如图2.8所示。如果你没有看到球体外的立方形箭头，不要担心——我们很快就会启用它们：
- en: '![](img/B18585_02_08.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B18585_02_08.png)'
- en: 'Figure 2.8: The Transform gizmo'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.8：变换辅助工具
- en: 'Let’s start translating the object, which is accomplished by dragging the red,
    green, and blue arrows inside the gizmo’s sphere. While you do this, the object
    will be moving along the selected axis. An interesting concept to explore here
    is the meaning of the colors of these arrows. If you pay attention to the top-right
    area of the Scene View, you will see an axis gizmo that serves as a reminder of
    those colors’ meaning, as illustrated in the following screenshot:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始翻译对象，这是通过在辅助工具的球体内拖动红色、绿色和蓝色箭头来完成的。当你这样做的时候，对象将沿着所选轴移动。这里一个值得探索的有趣概念是这些箭头颜色的含义。如果你注意观察场景视图右上角，你会看到一个轴辅助工具，它作为这些颜色含义的提醒，如下面的截图所示：
- en: '![](img/B18585_02_09.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B18585_02_09.png)'
- en: 'Figure 2.9: The axis gizmo'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.9：轴辅助工具
- en: Computer graphics use the classic 3D **Cartesian coordinate system** to represent
    objects’ locations. The red color is associated with the *x* axis of the object,
    green with the *y* axis, and blue with the *z* axis.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机图形学使用经典的3D**笛卡尔坐标系**来表示对象的定位。红色与对象的*x*轴相关联，绿色与*y*轴相关联，蓝色与*z*轴相关联。
- en: But what does each axis mean? If you are used to another 3D authoring program,
    this can be different, but in Unity, the *z* axis represents the **Forward Vector**,
    which means that the arrow is pointing along the front of the object; the *x*
    axis is the **Right Vector**, and the *y* axis represents the **Up Vector**.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 但每个轴代表什么意思呢？如果你习惯了另一个3D创作程序，这可能会不同，但在Unity中，*z*轴代表**前向向量**，这意味着箭头指向对象的正面；*x*轴是**右向量**，而*y*轴代表**向上向量**。
- en: These directions are known as **local** coordinates, and that’s because every
    object can be rotated differently, meaning each object can be pointing its forward,
    up, and right vectors elsewhere according to its orientation. The local coordinates
    will make more sense when used later in the *Object Hierarchies* section of the
    chapter, so bear with me on that, but it’s worth discussing **global** coordinates
    now. The idea is to have a single origin point (the zero point) with a single
    set of forward, right, and up axes that are common across the scene. This way,
    when we say the object has a global position of `5`,`0`,`0`, we know that we are
    referring to a position 5 meters along the global *x*-axis, starting from the
    global zero position. The global axes are the ones you see in the top-right axis
    gizmos previously mentioned.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方向被称为**局部**坐标，这是因为每个对象都可以以不同的方式旋转，这意味着每个对象可以根据其方向将其前向、向上和向右的向量指向其他地方。当在章节的“对象层次结构”部分后面使用时，局部坐标将更有意义，所以请耐心等待，但现在讨论**全局**坐标是值得的。想法是有一个单一的起点（零点）和一组共同的向前、向右和向上轴，这些轴在场景中是通用的。这样，当我们说对象的全局位置为`5`,`0`,`0`时，我们知道我们指的是从全局零位置沿全局*x*轴延伸5米的坐标。全局轴就是你在前面提到的右上角轴辅助工具中看到的那一组。
- en: 'In order to be sure that we are working with local coordinates, meaning we
    will move the object along its local axes, make sure the **Local** mode is activated
    in the Scene View, as shown in the following screenshot:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保我们正在使用局部坐标，即我们将沿着对象的局部轴移动对象，请确保在场景视图中激活了**局部**模式，如下面的截图所示：
- en: '![](img/B18585_02_10.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B18585_02_10.png)'
- en: 'Figure 2.10: Switching pivot and local coordinates'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.10：切换轴心点和局部坐标
- en: If the right button says **Global** instead of **Local**, just click it and
    select **Local** from the dropdown options. By the way, try to keep the left button
    as **Pivot**. If it says **Center**, click and select **Pivot**. The pivot of
    the object is not necessarily its center, and that depends entirely on the 3D
    model we are using, where the author of it will specify where the object rotation
    center is located. For example, a car could have its pivot in the middle of its
    back wheels, so when we rotate, it will respect the real car’s rotation center.
    Editing based on the object’s pivot will simplify our understanding of how rotating
    via C# scripts will work later in *Chapter 6*, *Implementing Movement and Spawning*.
    Also, now that we have enabled **Local** coordinates, you should see the cube-shaped
    arrows seen in *Figure 2.8*; we will use them in a moment to scale the cube.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果正确的按钮显示的是**全局**而不是**本地**，只需点击它，然后从下拉选项中选择**本地**。顺便说一句，尽量保持左侧按钮为**枢轴**。如果它显示为**中心**，点击并选择**枢轴**。物体的枢轴不一定是它的中心，这完全取决于我们使用的3D模型，其作者将指定物体旋转中心的位置。例如，一辆车可能其枢轴位于后轮中间，因此当我们旋转时，它将尊重真实汽车的旋转中心。基于物体的枢轴进行编辑将简化我们理解如何在*第6章*，*实现移动和生成*中通过C#脚本旋转的方式。现在，既然我们已经启用了**本地**坐标，你应该能看到*图2.8*中看到的立方形箭头；我们稍后将会使用它们来缩放立方体。
- en: I know—we are editing a cube, so there is no clear front or right side, but
    when you work with real 3D models such as cars and characters, they will certainly
    have those sides, and they must be properly aligned with those axes. If by any
    chance in the future you import a car into Unity and the front of the car is pointing
    along the *x* axis, you will need to make that model aligned along the *z* axis
    because the code that we will create to move our object will rely on that convention
    (but let’s keep that for later).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道——我们正在编辑一个立方体，所以没有明显的正面或右侧，但当你与真实的3D模型如汽车和角色一起工作时，它们肯定会有那些面，并且它们必须与那些轴正确对齐。如果将来你将一辆汽车导入Unity，并且汽车的前端指向*x*轴，你需要将模型沿*z*轴对齐，因为我们将要创建的用于移动对象的代码将依赖于这个约定（但让我们稍后再说）。
- en: 'Now, let’s use this **Transform** gizmo to rotate the object using the three
    colored circles around it. If you click and drag, for example, the red circle,
    you will rotate the object along the *x* axis. If you want to rotate the object
    horizontally, based on the color-coding we previously discussed, you will probably
    pick the *x* axis—the one that is used to move horizontally—but, sadly, that’s
    wrong. A good way to look at the rotation is like the accelerator of a motorcycle:
    you need to take it and roll it. If you rotate the *x* axis like this, you will
    rotate the object up and down. So, in order to rotate horizontally, you would
    need to use the green circle or the *y* axis. The process is illustrated in the
    following screenshot:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用这个**变换**辅助工具来通过围绕它的三个彩色圆圈旋转物体。例如，如果你点击并拖动红色圆圈，你将沿着*x*轴旋转物体。如果你想水平旋转物体，根据我们之前讨论的颜色编码，你可能会选择*x*轴——用于水平移动的那个轴——但遗憾的是，这是错误的。看待旋转的一个好方法是像摩托车油门一样：你需要拿起它并转动它。如果你这样旋转*x*轴，你将使物体上下旋转。所以，为了水平旋转，你需要使用绿色圆圈或*y*轴。这个过程在下图中得到了说明：
- en: '![](img/B18585_02_11.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B18585_02_11.png)'
- en: 'Figure 2.11: Rotating an object'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.11：旋转物体
- en: Finally, we have scaling, and we have two ways to accomplish that, one of them
    being through the gray cube at the center of the **Transform** gizmo shown in
    *Figure 2.8*. This allows us to change the size of the object by clicking and
    dragging that cube. Now, as we want to prototype a simple level, sometimes we
    want to stretch the cube to create, for example, a column, or a flat floor, and
    here’s where the second way comes in.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有缩放，我们有两种方法可以实现这一点，其中一种是通过*图2.8*中显示的**变换**辅助工具中心的灰色立方体。这允许我们通过点击并拖动该立方体来改变物体的大小。现在，由于我们想要原型化一个简单的关卡，有时我们想要拉伸立方体来创建，例如，一列柱子或一个平坦的地板，这就是第二种方法发挥作用的地方。
- en: If you click and drag the colored cubes in front of the translation arrows instead
    of the gray one in the center, you will see how our cube is stretched over those
    axes, allowing you to change the shape of the object. If you don’t see those cube-shaped
    arrows, remember to enable **Local** coordinates as stated earlier in this section.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你点击并拖动位于平移箭头前面的彩色立方体，而不是中心的那灰色立方体，你会看到我们的立方体是如何沿着这些轴拉伸的，这允许你改变物体的形状。如果你没有看到那些立方形箭头，请记住按照本节前面所述启用**本地**坐标。
- en: 'The process to stretch is illustrated in the following screenshot:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 拉伸的过程在下一张屏幕截图中进行说明：
- en: '![](img/B18585_02_12.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18585_02_12.png)'
- en: 'Figure 2.12: Scaling an object'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.12：缩放对象
- en: Remember you can also use the gray cube in the middle to scale all axes at the
    same time if desired, also known as **uniform scaling**, the same gray cube we
    had in the **Transform** gizmo.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，如果你想要，你也可以使用中间的灰色立方体同时缩放所有轴，这被称为**均匀缩放**，与我们在**变换**gizmo中遇到的相同的灰色立方体。
- en: Finally, something to consider here is that several objects can have the same
    scale values but have different sizes, given how they were originally designed.
    **Scale** is a multiplier we can apply to the original size of the object, so
    a building and a car both with scale 1 makes perfect sense; the relative size
    of one against the other seems correct. The main takeaway here is that scale is
    not size, but a way to multiply it.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在这里需要考虑的是，由于它们最初的设计方式，几个对象可以有相同的缩放值，但大小不同。**缩放**是我们可以应用于对象原始大小的乘数，因此一个建筑和一个汽车都具有缩放1是完全有意义的；一个相对于另一个的相对大小看起来是正确的。这里的主要启示是，缩放不是大小，而是一种乘以它的方式。
- en: Consider that scaling objects is usually a bad practice in many cases. In the
    final versions of your scene, you will use models with the proper size and scale,
    and they will be designed in a modular way so that you can plug them one next
    to the other. If you scale them, several bad things can happen, such as textures
    being stretched and becoming pixelated, and modules that no longer plug properly.
    There are some exceptions to this rule, such as placing lots of instances of the
    same tree in a forest and changing its scale slightly to simulate variation. Also,
    in the case of gray-boxing, it is perfectly fine to take cubes and change the
    scale to create floors, walls, ceilings, columns, and so on, because in the end,
    those cubes will be replaced with real 3D models.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到在许多情况下缩放对象通常是一种不良做法。在你的场景最终版本中，你将使用适当大小和比例的模型，并且它们将以模块化的方式设计，以便你可以将它们一个接一个地插入。如果你对它们进行缩放，可能会发生一些不好的事情，比如纹理被拉伸并变得像素化，以及不再能够正确插入的模块。这个规则有一些例外，比如在森林中放置大量相同树木的实例，并稍微改变其比例以模拟变化。此外，在灰色盒子的案例中，将立方体进行缩放以创建地板、墙壁、天花板、柱子等是完全可行的，因为最终，那些立方体将被真实的3D模型所取代。
- en: 'Here’s a challenge! Create a room composed of a floor, three regular walls,
    and the fourth wall with a hole for a door (three cubes), and no need for a roof.
    In the next image you can see how it should look:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个挑战！创建一个由地板、三面普通墙壁和一面有门洞的第四面墙壁（三个立方体）组成的房间，不需要屋顶。在下一张图片中，你可以看到它应该看起来是什么样子：
- en: '![](img/B18585_02_13.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18585_02_13.png)'
- en: 'Figure 2.13: Room task finished'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.13：房间任务完成
- en: Now that we can edit an object’s location, let’s see how we can edit all its
    other aspects.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们能够编辑对象的位置了，让我们看看我们如何编辑它的其他所有方面。
- en: GameObjects and components
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GameObjects和components
- en: We talked about our project being composed of **assets** (the project’s files),
    and that a scene (which is a specific type of asset) is composed of GameObjects;
    so, how can we create an object? Through a composition of **components**.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了我们的项目由**资产**（项目的文件）组成，以及一个场景（它是一种特定的资产）由GameObject组成；那么，我们如何创建一个对象呢？通过**组件**的组合。
- en: 'In this section, we will cover the following concepts related to components:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍与组件相关的以下概念：
- en: Understanding components
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解组件
- en: Manipulating components
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作组件
- en: Let’s start by discussing what a component is.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先来讨论一下什么是组件。
- en: Understanding components
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解组件
- en: A **component** is one of several pieces that make up a GameObject; each one
    is in charge of different features of the object. There are several components
    that Unity already includes that solve different tasks, such as playing a sound,
    rendering a mesh, applying physics, and so on; however, even though Unity has
    a large number of components, we will eventually need to create custom components
    sooner or later.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**组件**是构成GameObject的几个部分之一；每个组件负责对象的不同功能。Unity已经包含了一些解决不同任务的组件，例如播放声音、渲染网格、应用物理等；然而，尽管Unity有大量的组件，我们最终迟早需要创建自定义组件。'
- en: 'In the next image you can see what Unity shows us when we select a GameObject:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一张图片中，你可以看到当我们选择GameObject时Unity向我们展示的内容：
- en: '![](img/B18585_02_14.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18585_02_14.png)'
- en: 'Figure 2.14: The Inspector panel'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.14：检查器面板
- en: 'In the previous screenshot, we can see the **Inspector** panel. If we needed
    to guess what it does right now, we could say it shows all the properties of objects
    selected either via the Hierarchy or the Scene View, and allows us to configure
    those options to change the behavior of the object (i.e. the position and rotation,
    if it will project shadows or not, and so on). That is true, but we are missing
    a key element: those properties don’t belong to the object; they belong to the
    components of the object. We can see some titles in bold before a group of properties,
    such as **Transform** and **Box Collider**, and so on. Those are the components
    of the object.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，我们可以看到**检查器**面板。如果我们现在需要猜测它做什么，我们可以说它显示了通过层次结构或场景视图选择的对象的所有属性，并允许我们配置这些选项以更改对象的行为（例如，位置和旋转，是否投射阴影等）。这是真的，但我们遗漏了一个关键元素：这些属性不属于对象；它们属于对象的组件。我们可以在一组属性之前看到一些加粗的标题，例如**变换**和**盒子碰撞器**等。这些都是对象的组件。
- en: In this case, our object has a **Transform**, a **Mesh Filter**, a **Mesh Renderer**,
    and a **Box Collider** component, so let’s review each one of those.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们的对象有一个**变换**、一个**网格过滤器**、一个**网格渲染器**和一个**盒子碰撞器**组件，因此让我们回顾一下这些组件。
- en: '**Transform** just holds the position, rotation, and scale of the object, and
    by itself it does nothing—it’s just a point in our game—but as we add components
    to the object, that position starts to have more meaning. That’s because some
    components will interact with **Transform** and other components, each one affecting
    the other.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**变换**仅包含对象的位置、旋转和缩放，它本身并不做任何事情——它只是游戏中的一个点——但当我们向对象添加组件时，这个位置开始具有更多的意义。这是因为一些组件将与**变换**和其他组件交互，每个组件都会影响另一个组件。'
- en: An example of that would be the case of **Mesh Filter** and **Mesh Renderer**,
    both of those being in charge of rendering a 3D model. **Mesh Renderer** will
    render the 3D model, also known as mesh, specified by the **Mesh Filter** in the
    position specified in the **Transform** component, so **Mesh Renderer** needs
    to get data from those other components and can’t work without them.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这方面的一个例子是**网格过滤器**和**网格渲染器**，这两个组件都负责渲染3D模型。**网格渲染器**将渲染由**网格过滤器**指定的3D模型，也称为网格，在**变换**组件指定的位置进行渲染，因此**网格渲染器**需要从其他组件获取数据，没有它们无法工作。
- en: Another example would be the **Box Collider**. This represents the physics shape
    of the object, so when the physics calculates collisions between objects, it checks
    if that shape is colliding with other shapes based on the position specified in
    the **Transform** component.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个例子是**盒子碰撞器**。这表示对象的物理形状，因此当物理计算对象之间的碰撞时，它会检查该形状是否根据**变换**组件指定的位置与其他形状发生碰撞。
- en: We will explore rendering and physics later in the book, but the takeaway from
    this section is that a GameObject is a collection of components, each component
    adding a specific behavior to our object, and each one interacting with the others
    to accomplish the desired task. To further reinforce this, let’s see how we can
    convert a cube into a sphere that will fall due to gravity applied via physics.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本书的后面部分探讨渲染和物理，但本节的要点是GameObject是一个组件的集合，每个组件都为我们的对象添加特定的行为，并且每个组件都与其他组件交互以完成所需的任务。为了进一步强化这一点，让我们看看如何将一个立方体转换为在物理作用下会下落的球体。
- en: Manipulating components
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作组件
- en: The tool to edit an object’s components is the **Inspector**. It not only allows
    us to change the properties of our components but also lets us add and remove
    components. In this case, we want to convert a cube to a sphere, so we need to
    change several aspects of those components.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑对象组件的工具是**检查器**。它不仅允许我们更改组件的属性，还让我们可以添加和删除组件。在这种情况下，我们想要将一个立方体转换为球体，因此我们需要更改这些组件的几个方面。
- en: 'We can start by changing the visual shape of the object, so we need to change
    the rendered model or **mesh**. The component that specifies the mesh to be rendered
    is the **Mesh Filter** component. If we look at it, we can see a **Mesh** property
    that says **Cube**, with a little circle and a dot on its right:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以先从更改对象的视觉形状开始，因此我们需要更改渲染的模型或**网格**。指定要渲染的网格的组件是**网格过滤器**组件。如果我们查看它，我们可以看到一个名为**网格**的属性，它说**立方体**，在其右侧有一个小圆圈和一个小点：
- en: '![](img/B18585_02_15.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B18585_02_15.png)'
- en: 'Figure 2.15: The Mesh filter component'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.15：网格过滤器组件
- en: If you don’t see a particular property, such as the **Mesh** we just mentioned,
    try to click the triangle at the left of the component’s name. Doing this will
    expand and collapse all the component’s properties.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有看到特定的属性，例如我们刚才提到的**网格**，尝试点击组件名称左侧的三角形。这样做将会展开和折叠所有组件的属性。
- en: If we click the button with a circle and a dot inside, the one at the right
    of the **Mesh** property, the **Select Mesh** window will pop up, allowing us
    to pick several **mesh** options. In this case, select the **Sphere** mesh. In
    the future, we will add more 3D models to our project so that the window will
    have more options.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们点击带有圆圈和点的按钮，即**网格**属性右侧的按钮，将弹出**选择网格**窗口，允许我们选择几个**网格**选项。在这种情况下，选择**球体**网格。将来，我们将向我们的项目添加更多3D模型，这样窗口将会有更多选项。
- en: 'The mesh selector is shown in the following screenshot:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 网格选择器在以下屏幕截图中显示：
- en: '![](img/B18585_02_16.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图2.16](img/B18585_02_16.png)'
- en: 'Figure 2.16: The Mesh selector'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.16：网格选择器
- en: Okay—the object now looks like a sphere, but will it behave like a sphere? Let’s
    find out. In order to do so, we can add a component named **Rigidbody** to our
    sphere, which will add physics to it. We will talk more about Rigidbody and physics
    later in *Chapter 7*, *Physics Collisions and Health System*, but for now, let’s
    stick to the basics.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 好的——现在对象看起来像一个球体，但它会像球体一样表现吗？让我们来找出答案。为了做到这一点，我们可以在我们的球体上添加一个名为**刚体**的组件，这将给它添加物理属性。我们将在第7章*物理碰撞和健康系统*中更详细地讨论刚体和物理，但现在让我们专注于基础知识。
- en: 'In order to do so, we need to click the **Add Component** button at the bottom
    of the Inspector. It will show a **Component Selector** window with lots of categories;
    in this case, we need to click on the **Physics** category. The window will show
    all the **Physics** components, and there we can find the **Rigidbody**. Another
    option would be to type `Rigidbody` in the search box at the top of the window.
    The following screenshot illustrates how to add a component:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们需要点击检查器底部的**添加组件**按钮。它将显示一个**组件选择器**窗口，其中包含许多类别；在这种情况下，我们需要点击**物理**类别。窗口将显示所有**物理**组件，在那里我们可以找到**刚体**。另一个选项是在窗口顶部的搜索框中输入`刚体`。以下屏幕截图说明了如何添加组件：
- en: '![](img/B18585_02_17.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图2.20](img/B18585_02_17.png)'
- en: 'Figure 2.17: Adding components'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.17：添加组件
- en: 'If you hit the **Play** button in the top-middle part of the editor, you can
    test your sphere physics using the **Game** panel. That panel will be automatically
    focused when you hit **Play** and will show you how the player will see the game.
    The playback controls are shown in the following screenshot:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你点击编辑器顶部中间的**播放**按钮，你可以使用**游戏**面板测试你的球体物理。当你点击**播放**时，该面板将自动聚焦，并显示玩家将如何看到游戏。回放控制如图所示：
- en: '![](img/B18585_02_18.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![图2.18](img/B18585_02_18.png)'
- en: 'Figure 2.18: Playback controls'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.18：回放控制
- en: 'Here, you can just use the **Transform** gizmo to rotate and position your
    camera in such a way that it looks at our sphere. This is important as one problem
    that can happen is that maybe you won’t see anything during **Play** mode, and
    that can happen if the game camera is not pointing to where our sphere is located.
    While you are moving, you can check the little preview in the bottom-right part
    of the scene window to check out the new camera perspective. Another alternative
    would be to select the camera in the **Hierarchy** and use the shortcut *Ctrl*
    + *Shift* + *F* (or *Command* + *Shift* + *F* on a Mac). The camera preview is
    shown in the following screenshot:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以只用**变换**工具来旋转和定位你的相机，使其朝向我们的球体。这很重要，因为可能会出现的一个问题是，在**播放**模式下可能什么也看不到，这可能是因为游戏相机没有指向我们的球体所在的位置。当你移动时，你可以检查场景窗口右下角的小预览来查看新的相机视角。另一个选择是选择**层次结构**中的相机，并使用快捷键*Ctrl*
    + *Shift* + *F*（或在Mac上为*Command* + *Shift* + *F*）。相机预览在以下屏幕截图中显示：
- en: '![](img/B18585_02_19.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图2.19](img/B18585_02_19.png)'
- en: 'Figure 2.19: The camera preview'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.19：相机预览
- en: 'Now, to test if physics collisions are executing properly, let’s create a cube,
    scale it until it has the shape of a ramp, and put that ramp below our sphere,
    as shown here:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了测试物理碰撞是否执行正确，让我们创建一个立方体，将其缩放成斜坡的形状，并将这个斜坡放在我们的球体下方，如图所示：
- en: '![](img/B18585_02_20.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图2.20](img/B18585_02_20.png)'
- en: 'Figure 2.20: Ball and ramp objects'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.20：球体和斜坡对象
- en: 'If you hit **Play** now, you will see the sphere colliding with our ramp, but
    in a strange way. It looks like it’s bouncing, but that’s not the case. If you
    expand the **Box Collider** component of our sphere, you will see that even if
    our object looks like a sphere, the green box gizmo is showing us that our sphere
    is actually a box in the physics world, as illustrated in the following screenshot:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在点击**播放**，你会看到球体与我们的斜坡发生碰撞，但方式很奇怪。它看起来像是在弹跳，但实际上并不是这样。如果你展开球体的**盒子碰撞器**组件，你会看到即使我们的对象看起来像一个球体，绿色的盒子辅助工具显示我们的球体在物理世界中实际上是一个盒子，如下面的截图所示：
- en: '![](img/B18585_02_21.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B18585_02_21.png)'
- en: 'Figure 2.21: Object with sphere graphic and box collider'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.21：具有球体图形和盒子碰撞器的对象
- en: Nowadays, video cards (GPUs) can handle rendering highly detailed models (models
    with a high polygon count), but the physics system is executed in the **central
    processing unit** (**CPU**) and it needs to do complex calculations in order to
    detect collisions. To get a decent performance in our game, it needs to run at
    least 30 **frames per second** (**FPS**), the minimum accepted by the industry
    to provide a smooth experience. The physics system considers that, and hence it
    works using simplified collision shapes that may differ from the actual shape
    the player sees on the screen.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，显卡（GPU）可以处理渲染高度详细的三维模型（具有高多边形计数的模型），但物理系统是在**中央处理器**（**CPU**）中执行的，并且它需要进行复杂的计算以检测碰撞。为了在我们的游戏中获得良好的性能，它至少需要以每秒30**帧**（**FPS**）的速度运行，这是行业接受的最低标准，以提供流畅的体验。物理系统考虑到了这一点，因此它使用简化的碰撞形状，这些形状可能与玩家在屏幕上看到的实际形状不同。
- en: That’s why we have **Mesh Filter** and the different types of **Collider** components
    separated—one handles the visual shape and the other the physics shape.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 正因如此，我们才将**网格过滤器**和不同类型的**碰撞器**组件分开——一个处理视觉形状，另一个处理物理形状。
- en: 'Again, the idea of this section is not to deep-dive into those Unity systems,
    so let’s just move on for now. How can we solve our sphere actually being a box?
    Simple: by modifying our components! In this case, the **Box Collider** component
    already present in our cube GameObject can just represent a box physics shape,
    unlike **Mesh Filter**, which supports any rendering shape. So, first, we need
    to remove it by right-clicking the component’s title and selecting the **Remove
    Component** option, as illustrated in the following screenshot:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，本节的想法不是深入研究那些Unity系统，所以我们现在就继续前进。我们如何解决我们的球体实际上是一个盒子的问题？简单：通过修改我们的组件！在这种情况下，已经存在于我们的立方体GameObject中的**盒子碰撞器**组件可以仅表示一个物理形状，与**网格过滤器**不同，它支持任何渲染形状。因此，首先，我们需要通过右键单击组件的标题并选择**移除组件**选项来将其移除，如下面的截图所示：
- en: '![](img/B18585_02_22.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B18585_02_22.png)'
- en: 'Figure 2.22: Removing components'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.22：移除组件
- en: 'Now, we can again use the **Add Component** menu to select a **Physics** component,
    this time selecting the **Sphere Collider** component. If you look at the **Physics**
    components, you will see other types of colliders that can be used to represent
    other shapes, but we will look at them later in *Chapter 7*, *Physics Collisions
    and Health System*. The **Sphere Collider** component can be seen in the following
    screenshot:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们再次使用**添加组件**菜单来选择一个**物理**组件，这次选择**球体碰撞**组件。如果你查看**物理**组件，你会看到其他可以用来表示其他形状的碰撞器类型，但我们将在第7章*物理碰撞和健康系统*中稍后讨论它们。以下截图显示了**球体碰撞**组件：
- en: '![](img/B18585_02_23.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B18585_02_23.png)'
- en: 'Figure 2.23: Adding a Sphere Collider component'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.23：添加球体碰撞组件
- en: 'So, if you hit **Play** now, you will see that our sphere not only looks like
    a sphere but also behaves like one. Remember: the main idea of this section of
    the book is understanding that in Unity you can create whatever object you want
    just by adding, removing, and modifying components, and we will be doing a lot
    of this throughout the book.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果你现在点击**播放**，你会看到我们的球体不仅看起来像一个球体，而且表现得像一个球体。记住：本书这一部分的主要思想是理解在Unity中，你可以通过添加、删除和修改组件来创建任何你想要的对象，而且我们将在整本书中做很多这样的事情。
- en: Now, components are not the only thing needed in order to create objects. Complex
    objects may be composed of several sub-objects, so let’s see how that works.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，创建对象所需的不仅仅是组件。复杂对象可能由几个子对象组成，所以让我们看看这是如何工作的。
- en: Object Hierarchies
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对象层次结构
- en: Some complex objects may need to be separated into sub-objects, each one with
    its own components. Those sub-objects need to be somehow attached to the main
    object and work together to create the necessary object behavior.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 一些复杂对象可能需要分解成子对象，每个子对象都有自己的组件。这些子对象需要以某种方式附着到主对象上，并协同工作以创建必要的对象行为。
- en: 'In this section, we will cover the following concepts related to objects:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍与对象相关的以下概念：
- en: Parenting of objects
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象的关联
- en: Possible uses
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能的用途
- en: Let’s start by discovering how to create a parent-child relationship between
    objects.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先来了解如何创建对象之间的父子关系。
- en: Parenting of objects
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对象的关联
- en: '**Parenting** consists of making an object the child of another, meaning that
    those objects will be related to each other. One type of relationship that happens
    is a **Transform relationship**, meaning that a child object will be affected
    by the parent’s Transform. In simple terms, the child object will follow the parent,
    as if it is attached to it. For example, imagine a player with a hat on their
    head. The hat can be a child of the player’s head, making the hat follow the head
    while they are attached.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '**关联**是指将一个对象作为另一个对象的子对象，这意味着这些对象将相互关联。发生的一种关系是**变换关系**，意味着子对象将受到父对象变换的影响。简单来说，子对象将跟随父对象，就像它被附着在上面一样。例如，想象一个头上戴着帽子的玩家。帽子可以是玩家头部的子对象，使帽子在它们附着时跟随头部。'
- en: 'In order to try this, let’s create a capsule that represents an enemy and a
    cube that represents the weapon of the enemy. Remember that in order to do so,
    you can use the **GameObject** | **3D Object** | **Capsule** and **Cube** options
    and then use the **Transform** tool to modify them. An example of a capsule and
    a cube can be seen in the following screenshot:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 为了尝试这个功能，让我们创建一个代表敌人的胶囊和一个代表敌人武器的立方体。记住，为了做到这一点，你可以使用**GameObject** | **3D Object**
    | **Capsule**和**Cube**选项，然后使用**Transform**工具来修改它们。以下截图显示了胶囊和立方体的示例：
- en: '![](img/B18585_02_24.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B18585_02_24.png)'
- en: 'Figure 2.24: A capsule and a cube representing an enemy and a weapon'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.24：代表敌人和武器的胶囊和立方体
- en: 'If you move the enemy object (the capsule), the weapon (the cube) will keep
    its position, not following our enemy. So, to prevent that, we can simply drag
    the weapon to the enemy object in the **Hierarchy** window, as illustrated in
    the following screenshot:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你移动敌人对象（胶囊），武器（立方体）将保持其位置，不会跟随我们的敌人。因此，为了防止这种情况，我们可以在**Hierarchy**窗口中简单地拖动武器到敌人对象，如下面的截图所示：
- en: '![](img/B18585_02_25.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B18585_02_25.png)'
- en: 'Figure 2.25: Parenting the cube weapon to the capsule character'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.25：将立方体武器与胶囊角色关联
- en: Now, if you move the enemy, you will see the gun moving, rotating, and being
    scaled along with it. So, basically, the gun Transform also has the effects of
    the enemy Transform component.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你移动敌人，你会看到枪随着移动、旋转和缩放。所以，基本上，枪的变换也具有敌人变换组件的效果。
- en: Now that we have done some basic parenting, let’s explore other possible uses.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经进行了一些基本的育儿工作，让我们来探索其他可能的用途。
- en: Possible uses
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可能的用途
- en: There are some other uses of parenting aside from creating complex objects.
    Another common usage for it is to organize the project Hierarchy. Right now, our
    scene is simple, but in time it will grow, so keeping track of all the objects
    will become difficult. To prevent this, we can create empty GameObjects (in **GameObject**
    | **Create Empty**) that only have the Transform component to act as containers,
    putting objects into them just to organize our scene. Try to use this with caution
    because this has a performance cost if you abuse it. Generally, having one or
    two levels of parenting when organizing a scene is fine, but more than that can
    have a performance hit. Consider that you can—and will—have deeper parenting for
    the creation of complex objects; the proposed limit is just for scene organization.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 除了创建复杂对象之外，关联还有一些其他用途。它的另一个常见用途是组织项目层次结构。目前，我们的场景很简单，但随着时间的推移，它将增长，因此跟踪所有对象将变得困难。为了避免这种情况，我们可以创建空的GameObject（在**GameObject**
    | **Create Empty**），它们只包含变换组件，作为容器使用，将对象放入其中以组织场景。请谨慎使用，因为过度使用会有性能成本。通常，在组织场景时，有一到两个层次的关联是合适的，但超过这个层次可能会影响性能。考虑到你可以——并且将会——为创建复杂对象进行更深层次的关联；所提出的限制只是针对场景组织。
- en: 'To keep improving on our previous example, duplicate the enemy a couple of
    times all around the scene, create an empty GameObject and name it `Enemies`,
    and drag all the enemies into it so that it will act as a container. This is illustrated
    in the following screenshot:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 为了继续改进我们之前的例子，在场景周围复制敌人几次，创建一个空的GameObject并将其命名为`Enemies`，然后将所有敌人拖入其中，使其充当容器。这在上面的屏幕截图中有说明。
- en: '![](img/B18585_02_26.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B18585_02_26.png)'
- en: 'Figure 2.26: Grouping enemies in a parent object'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.26：将敌人分组到父对象中
- en: Another common usage of parenting is to change the **pivot** (or center) of
    an object. Right now, if we try to rotate our gun with the **Transform** gizmo,
    it will rotate around its center because the creator of that cube decided to put
    the center there. Normally, that’s okay, but let’s consider the case where we
    need to make the weapon aim at the point where our enemy is looking. In this case,
    we need to rotate the weapon around the weapon handle; so, in the case of this
    cube weapon, it would be the closest end to the enemy. The problem here is that
    we cannot change the center of an object, so one solution would be to create another
    “weapon” 3D model or mesh with another center, which will lead to lots of duplicated
    versions of the weapon if we consider other possible gameplay requirements such
    as a rotating weapon pickup. We can fix this easily using parenting.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 父对象的一个常见用法是改变对象的**旋转中心**（或中心）。目前，如果我们尝试使用**变换**工具旋转我们的枪，它将围绕其中心旋转，因为那个立方体的创建者决定将中心放在那里。通常情况下，这是可以的，但让我们考虑这样一个情况，我们需要让武器瞄准敌人正在看的点。在这种情况下，我们需要围绕武器手柄旋转武器；因此，对于这个立方体武器来说，它将是离敌人最近的一端。这里的问题是，我们无法改变对象的中心，所以一个解决方案是创建另一个具有不同中心的“武器”3D模型或网格，如果我们考虑其他可能的游戏玩法要求，如旋转武器拾取，这将导致大量武器的重复版本。我们可以通过使用父对象关系轻松解决这个问题。
- en: The idea is to create an empty GameObject and place it where we want the new
    pivot of our object to be. After that, we can simply drag our weapon inside this
    empty GameObject, and, from now on, consider the empty object as the actual weapon.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 策略是创建一个空的GameObject并将其放置在我们想要对象新旋转中心的位置。之后，我们可以简单地拖动我们的武器到这个空的GameObject中，从现在起，将这个空对象视为实际的武器。
- en: 'If you rotate or scale this weapon container, you will see that the weapon
    mesh will apply those transformations around this container, so we can say the
    pivot of the weapon has changed (actually, it hasn’t, but our container simulates
    the change). The process is illustrated in the following screenshot:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你旋转或缩放这个武器容器，你会看到武器网格将应用这些变换到这个容器上，所以我们可以说武器的旋转中心已经改变（实际上并没有，但我们的容器模拟了这种变化）。这个过程在下面的屏幕截图中有说明：
- en: '![](img/B18585_02_27.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B18585_02_27.png)'
- en: 'Figure 2.27: Changing the weapon pivot'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.27：改变武器旋转中心
- en: Now, let’s continue seeing different ways of managing GameObjects, using Prefabs
    this time.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续探讨使用预制件管理GameObject的不同方法。
- en: Prefabs
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预制件
- en: In the previous example, we created lots of copies of our enemy around the scene,
    but in doing so, we have created a new problem. Let’s imagine we need to change
    our enemy and add a **Rigidbody** component to it, but because we have several
    copies of the same object, we need to take them one by one and add the same component
    to all of them. Maybe later, we will need to change the mass of each enemy, so
    again, we need to go over each one of the enemies and make the change, and here
    we can start to see a pattern. One solution could be to select all the enemies
    using the *Ctrl* key (*Command* on a Mac) and modify all of them at once, but
    that solution won’t be of any use if we have enemy copies in other scenes. So,
    here is where Prefabs come in.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的例子中，我们在场景周围创建了敌人的许多副本，但在这样做的同时，我们创建了一个新的问题。让我们想象我们需要更改我们的敌人并为其添加一个**刚体**组件，但由于我们有相同对象的多个副本，我们需要逐个添加相同的组件到所有副本上。也许以后，我们需要更改每个敌人的质量，所以同样，我们需要逐一检查每个敌人并做出更改，从这里我们可以开始看到一种模式。一个解决方案可能是使用*Ctrl*键（在Mac上为*Command*）选择所有敌人并一次性修改它们，但如果我们在其他场景中有敌人的副本，这个解决方案将没有任何用处。所以，这就是预制件发挥作用的地方。
- en: 'In this section, we will cover the following concepts related to Prefabs:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍与预制件相关的以下概念：
- en: Creating Prefabs
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建预制件
- en: Prefab-instance relationship
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预制件实例关系
- en: Prefab variants
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预制件变体
- en: Let’s start by discussing how to create and use Prefabs.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从讨论如何创建和使用预制件开始。
- en: Creating Prefabs
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建预制件
- en: '**Prefabs** are a Unity tool that allows us to convert custom-made objects,
    such as our enemy, into an asset that defines how they can be created. We can
    use them to create new copies of our custom object easily, without needing to
    create its components and sub-objects all over again.'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '**预制件**是Unity的一个工具，它允许我们将自定义对象，如我们的敌人，转换为一个定义它们如何创建的资产。我们可以使用它们轻松地创建自定义对象的副本，而无需再次创建其组件和子对象。'
- en: 'In order to create a Prefab, we can simply drag our custom object from the
    Hierarchy window to the projectwindow, and after doing that you will see a new
    asset in your project files. The project window is where you can navigate and
    explore all your project files; so, in this case, our Prefab is the first Asset
    we ever created. Now, you can simply drag the Prefab from the project window into
    the scene to easily create new Prefab copies, as illustrated in the following
    screenshot:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建预制件，我们可以简单地从层次窗口将我们的自定义对象拖动到项目窗口中，完成之后你将在项目文件中看到一个新资产。项目窗口是你可以导航和探索所有项目文件的地方；因此，在这种情况下，我们的预制件是我们创建的第一个资产。现在，你可以简单地从项目窗口中将预制件拖动到场景中，以便轻松创建新的预制件副本，如以下截图所示：
- en: '![](img/B18585_02_28.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18585_02_28.png)'
- en: 'Figure 2.28: Creating a Prefab'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.28：创建预制件
- en: 'Now, we have a little problem here. If you pay attention to the Hierarchy window,
    you will see the original Prefab objects and all the new copies with their names
    in the color blue, while the enemies created before the Prefab will have their
    names in black. The blue color in a name means that the object is an i**nstance**
    of a prefab, meaning that the object was created based on a Prefab. We can select
    those blue-named objects and click the **Select** button in the **Inspector**
    to select the original Prefab that created that object. This is illustrated in
    the following screenshot:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们这里有一个小问题。如果你注意查看层次窗口，你会看到原始的预制件对象以及所有带有蓝色名称的新副本，而之前创建的敌人将会有黑色名称。名称中的蓝色表示该对象是预制件的**实例**，意味着该对象是基于预制件创建的。我们可以选择那些带有蓝色名称的对象，然后点击**检查器**中的**选择**按钮来选择创建该对象的原始预制件。这在上面的截图中有说明：
- en: '![](img/B18585_02_29.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18585_02_29.png)'
- en: 'Figure 2.29: Detecting prefabs in the Hierarchy'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.29：在层次窗口中检测预制件
- en: So, the problem here is that the previous copies of the Prefab are not instances
    of the Prefab we just created, and sadly there’s no way to connect them to it.
    So, in order to make that happen, we need to simply destroy the old copies and
    replace them with copies created with the Prefab. At first, not having all copies
    as instances doesn’t seem to be a problem, but it will be in the next section
    of this chapter, where we will explore the relationship between the Prefabs and
    their instances.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这里的问题是之前的预制件副本不是我们刚刚创建的预制件的实例，而且很遗憾没有方法将它们连接到它。所以，为了实现这一点，我们需要简单地销毁旧副本，并用带有预制件的副本替换它们。起初，不是所有副本都是实例似乎没有问题，但在本章的下一节中，我们将探讨预制件与其实例之间的关系时，这将会成为一个问题。
- en: Prefab-instance relationship
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预制件-实例关系
- en: An instance of a Prefab, the GameObject created when dragging the Prefab to
    the scene, has a binding to it that helps to revert and apply changes easily between
    the prefab and the instance. If you take a Prefab and make some modifications
    to it, those changes will be automatically applied to all instances across all
    the scenes in the project, so we can easily create a first version of the Prefab,
    use it all around the project, and then experiment with changes.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 当将预制件拖动到场景中创建GameObject时，预制件的实例将有一个与之绑定的引用，这有助于在预制件和实例之间轻松地回滚和应用更改。如果你对预制件进行一些修改，这些更改将自动应用到项目中的所有场景中的所有实例上，因此我们可以轻松地创建预制件的第一版，在整个项目中使用它，然后进行实验。
- en: To practice this, let’s say we want to add a **Rigidbody** component to the
    enemies so that they can fall. In order to do so, we can simply double-click the
    Prefab file in the **Project** panel and we will enter the **Prefab Edit Mode**,
    where we can edit the Prefab isolated from the rest of the scene.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 为了练习这个，假设我们想要给敌人添加一个**刚体**组件，以便它们可以下落。为了做到这一点，我们可以在**项目**面板中双击预制件文件，我们将进入**预制件编辑模式**，在那里我们可以独立于场景的其余部分编辑预制件。
- en: 'Here, we can simply take the Prefab root object (**Enemy** in our case) and
    add the **Rigidbody** component to it. After that, we can simply click on the
    **Scenes** button in the top-left part of the scene window to get back to the
    scene we were editing, and now, we can see that all the Prefab instances of the
    enemy have a **Rigidbody** component, as illustrated in the following screenshot:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以简单地取预制件根对象（在我们的例子中是**敌人**）并为其添加**刚体**组件。之后，我们只需点击场景窗口左上角的**场景**按钮，就可以回到我们正在编辑的场景，现在我们可以看到所有敌人的预制实例都有一个**刚体**组件，如以下屏幕截图所示：
- en: '![](img/B18585_02_30.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18585_02_30.png)'
- en: 'Figure 2.30: Prefab edit mode'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.30：预制件编辑模式
- en: 'Now, what happens if we change a Prefab instance (the one in the scene) instead?
    Let’s say we want one specific enemy to fly, so they won’t suffer the effect of
    gravity. We can do that by simply selecting the specific Prefab and unchecking
    the **Use Gravity** checkbox in the **Rigidbody** component. After doing that,
    if we play the game, we will see that only that specific instance will float.
    That’s because changes to an instance of a Prefab become an **override**, a set
    of differences the instance has compared to the original prefab. We can see how
    the **Use** **Gravity** property is bold in the Inspector, and also has a blue
    bar displayed to its left, meaning it’s an override of the original Prefab value.
    Let’s take another object and change its **Scale** property to make it bigger.
    Again, we will see how the **Scale** property becomes bold and the blue bar at
    its left will appear. The **Use Gravity** checkbox can be seen in the following
    screenshot:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们改变一个预制实例（场景中的那个）会发生什么呢？假设我们想让一个特定的敌人飞起来，这样它们就不会受到重力的影响。我们可以通过简单地选择特定的预制实例，并在**刚体**组件中取消勾选**使用重力**复选框来实现这一点。完成之后，如果我们玩游戏，我们会看到只有那个特定的实例会漂浮。这是因为预制实例的变化会成为一个**覆盖**，即实例与原始预制件相比的差异集合。我们可以在检查器中看到**使用重力**属性被加粗，并且在其左侧显示一个蓝色条，这意味着它是原始预制件值的覆盖。让我们再取另一个对象，将其**缩放**属性更改为使其变大。同样，我们会看到**缩放**属性变为加粗，其左侧的蓝色条也会出现。**使用重力**复选框可以在以下屏幕截图中看到：
- en: '![](img/B18585_02_31.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18585_02_31.png)'
- en: 'Figure 2.31: Use Gravity being highlighted as an override'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.31：使用重力作为覆盖被突出显示
- en: 'The overrides have precedence over the Prefab, so if we change the scale of
    the original Prefab, the one that has a scale override won’t change, keeping its
    own version of the scale, as illustrated in the following screenshot:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖优先于预制件，所以如果我们更改原始预制件的缩放比例，具有缩放覆盖的那个实例不会改变，保持其自己的缩放版本，如以下屏幕截图所示：
- en: '![](img/B18585_02_32.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18585_02_32.png)'
- en: 'Figure 2.32: One Prefab instance with a scale override'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.32：具有缩放覆盖的单个预制实例
- en: 'We can easily locate all overrides of an instance using the **Overrides** dropdown
    in the Inspector after selecting the Prefab instance (the one in the scene, outside
    **Prefab Edit Mode**) in the Hierarchy, locating all changes our object has. It
    not only allows us to see all the overrides but also reverts any override we don’t
    want and applies the ones we do want. Let’s say we regretted the lack of gravity
    of that specific Prefab—no problem! We can just locate the override and revert
    it using the **Revert** button after clicking on the component with the override.
    The process is illustrated in the following screenshot:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在层次结构中选择预制实例（场景中的，在**预制件编辑模式**外）后，在检查器中使用**覆盖**下拉菜单轻松地定位实例的所有覆盖，找到我们的对象所做的所有更改。它不仅允许我们查看所有覆盖，还可以撤销我们不需要的覆盖，并应用我们想要的覆盖。比如说我们后悔了那个特定预制件缺少重力的设置——没问题！我们只需定位覆盖，并在点击具有覆盖的组件后使用**撤销**按钮来撤销它。这个过程在以下屏幕截图中得到了说明：
- en: '![](img/B18585_02_33.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18585_02_33.png)'
- en: 'Figure 2.33: Reverting a single override'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.33：撤销单个覆盖
- en: 'Also, let’s imagine that we really liked the new scale of that instance, so
    we want all instances to have that scale—great! We can simply select the specific
    override, hit the **Apply** button, and then the **Apply to Prefab** option; now,
    all instances will have that scale (except the ones with an override), as illustrated
    in the following screenshot:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，让我们想象我们真的很喜欢那个实例的新缩放比例，所以想让所有实例都具有那个缩放比例——太好了！我们可以简单地选择特定的覆盖，点击**应用**按钮，然后选择**应用到预制件**选项；现在，所有实例都将具有那个缩放比例（除了具有覆盖的实例），如以下屏幕截图所示：
- en: '![](img/B18585_02_34.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18585_02_34.png)'
- en: 'Figure 2.34: The Apply button'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.34：应用按钮
- en: Also, we have the **Revert All** and **Apply All** buttons, but use them with
    caution, because you can easily revert and apply changes that you are not aware
    of.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还有**全部还原**和**全部应用**按钮，但使用时要小心，因为你可以很容易地还原和应用你未意识到的更改。
- en: So, as you can see, Prefabs are a really useful Unity tool to keep track of
    all similar objects and apply changes to all of them, and also have specific instances
    with few variations. Talking about variations, there are other cases where you
    will want to have several instances of a Prefab with the same set of variations—for
    example, flying enemies and grounded enemies—but if you think about that, we will
    have the same problem we had when we didn’t use Prefabs, so we need to manually
    update those varied versions one by one.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，正如你所看到的，预制体是Unity中一个非常有用的工具，可以跟踪所有类似的对象，并将更改应用到所有对象上，同时还可以有少量变体的特定实例。谈到变体，还有其他情况下你将想要有具有相同变体集的多个预制体实例——例如，飞行敌人和地面敌人——但如果你考虑一下，我们会遇到我们之前没有使用预制体时遇到的问题，所以我们需要逐个手动更新这些变体版本。
- en: 'Here, we have two options: one is to create a brand new Prefab just to have
    another version with that variation. This leads to the problem that if we want
    all types of enemies to undergo changes, we need to manually apply the changes
    to each possible Prefab. The second option is to create a Prefab variant. Let’s
    review the latter.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们有两种选择：一种是为拥有另一个带有该变体的版本而创建一个全新的预制体。这会导致一个问题，即如果我们想让所有类型的敌人都经历变化，我们需要手动将更改应用到每个可能的预制体上。第二种选择是创建一个预制体变体。让我们回顾一下后者。
- en: Prefab variants
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预制体变体
- en: A **Prefab variant** is a new Prefab created based on an existing one, so the
    new one **inherits** the features of the base Prefab. This means that our new
    Prefab can have differences from the base one, but the features that they have
    in common are still connected.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '**预制体变体**是基于现有预制体创建的新预制体，因此新预制体**继承**了基础预制体的特性。这意味着我们的新预制体可以与基础预制体有所不同，但它们共有的特性仍然相连。'
- en: 'To illustrate this, let’s create a variation of the enemy Prefab that can fly:
    the flying enemy Prefab. In order to do that, we can select an existing enemy
    Prefab instance in the Hierarchy window, name it `Flying Enemy`, and drag it again
    to the project window, and this time we will see a prompt, asking which kind of
    Prefab we want to create. This time, we need to choose **Prefab Variant**, as
    illustrated in the following screenshot:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这一点，让我们创建一个可以飞行的敌人预制体的变体：飞行敌人预制体。为了做到这一点，我们可以在层次窗口中选择一个现有的敌人预制体实例，将其命名为`飞行敌人`，并将其再次拖动到项目窗口中，这次我们会看到一个提示，询问我们想要创建哪种类型的预制体。这次，我们需要选择**预制体变体**，如下面的截图所示：
- en: '![](img/B18585_02_35.png)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/B18585_02_35.png)'
- en: 'Figure 2.35: Creating Prefab Variants'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.35：创建预制体变体
- en: 'Now, we can enter the Prefab Edit Mode of the variant by double-clicking the
    new Prefab file created in the project panel, and then add a cube as the jetpack
    of our enemy, and also uncheck the **Use Gravity** property for the enemy. If
    we get back to the scene, we will see the variant instance being changed, and
    the base enemies aren’t changed. You can see this in the following screenshot:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以通过双击项目面板中创建的新预制体文件进入变体的预制体编辑模式，然后添加一个立方体作为敌人的喷气背包，并取消选中敌人的**使用重力**属性。如果我们回到场景，我们会看到变体实例被更改，而基础敌人没有改变。你可以在下面的截图中看到这一点：
- en: '![](img/B18585_02_36.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/B18585_02_36.png)'
- en: 'Figure 2.36: A Prefab variant instance'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.36：预制体变体实例
- en: 'Now, imagine you want to add a hat to all our types of enemies. We can simply
    enter the **Prefab Edit Mode** of the base enemy Prefab by double-clicking it
    and adding a cube as a hat. Now, we will see that change applied to all the enemies,
    because remember: the **Flying Enemy** Prefab is a variant of the base enemy Prefab,
    meaning that it will inherit all the changes of that one.'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设你想要给所有类型的敌人都加上一顶帽子。我们可以简单地通过双击基础敌人预制体进入**预制体编辑模式**，并添加一个立方体作为帽子。现在，我们将看到这个更改应用到所有敌人身上，因为记住：**飞行敌人**预制体是基础敌人预制体的一个变体，这意味着它将继承所有这些更改。
- en: We have created lots of content so far, but if our PC turns off for some reason,
    we will certainly lose it all, so let’s see how we can save our progress.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经创建了大量的内容，但如果我们的电脑因为某种原因关闭，我们肯定会丢失所有内容，所以让我们看看我们如何可以保存我们的进度。
- en: Saving scenes and projects
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保存场景和项目
- en: As in any other program, we need to save our progress. The difference here is
    that we don’t have just one giant file with all the project assets, but several
    files for each asset.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 就像任何其他程序一样，我们需要保存我们的进度。这里的区别在于，我们不仅仅有一个包含所有项目资源的巨大文件，而是每个资源都有几个文件。
- en: 'Let’s start saving our progress by saving the scene, which is pretty straightforward.
    We can simply go to **File** | **Save** or press *Ctrl* + *S* (*Command* + *S*
    on a Mac). The first time we save our scene, a window will ask us where we want
    to save our file, and you can save it wherever you want inside the `Assets` folder
    of our project, but never outside that folder; otherwise, Unity will not be capable
    of finding it as an asset in the project. That will generate a new asset in the
    project window: a scene file. In the following screenshot you can see how I saved
    the scene, naming it `test`, and now it shows up in the **Project** panel:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过保存场景来开始保存我们的进度，这相当直接。我们可以简单地转到**文件** | **保存**或按*Ctrl* + *S*（在Mac上为*Command*
    + *S*）。我们第一次保存场景时，会弹出一个窗口询问我们想要将文件保存到何处，你可以在我们项目的`Assets`文件夹内部保存它，但永远不要在文件夹外部保存；否则，Unity将无法将其作为项目中的资源找到。这将在项目窗口中生成一个新的资源：场景文件。在下面的屏幕截图中，你可以看到我如何保存场景，将其命名为`test`，现在它显示在**项目**面板中：
- en: '![](img/B18585_02_37.png)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B18585_02_37.png)'
- en: 'Figure 2.37: Scene files'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.37：场景文件
- en: We can create a folder to save our scene in the save dialog, or, if you already
    saved the scene, you can create a folder using the **plus (+)** icon in the project
    window and then click the **Folder** option. Finally, drag the created scene to
    that folder. Now, if you create another scene with the **File** | **New Scene**
    menu option, you can get back to the previous scene just by double-clicking the
    scene asset in the project window. Try it!
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在保存对话框中创建一个文件夹来保存我们的场景，或者，如果你已经保存了场景，你可以使用项目窗口中的**加号 (+)** 图标创建一个文件夹，然后点击**文件夹**选项。最后，将创建的场景拖到该文件夹中。现在，如果你通过**文件**
    | **新建场景**菜单选项创建另一个场景，只需双击项目窗口中的场景资源即可回到上一个场景。试试看！
- en: This only saved the scene, but any change in Prefabs and other kinds of assets
    are not saved with that option. Instead, if you want to save every change of the
    assets except scenes, you can use the **File** | **Save Project** option. It can
    be a little bit confusing, but if you want to save all your changes, you need
    to both save the scenes and the project, as saving just the project won’t save
    the changes to scenes. Sometimes, the best way to be sure everything is saved
    is just by closing Unity, which is recommended when you try to move your project
    between computers or folders. This will show you a prompt to save the changes
    on the scene, and will automatically save any change made to other assets, like
    Prefabs.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 这只保存了场景，但Prefab和其他类型资源的任何更改都不会与该选项一起保存。相反，如果你想保存除了场景之外的所有资源更改，你可以使用**文件** |
    **保存项目**选项。这可能有点令人困惑，但如果你想保存所有更改，你需要同时保存场景和项目，因为只保存项目不会保存场景的更改。有时，确保一切已保存的最佳方式就是关闭Unity，当你尝试在不同计算机或文件夹之间移动项目时，这是推荐的。这将显示一个提示，要求保存场景的更改，并将自动保存对其他资源（如Prefab）所做的任何更改。
- en: Summary
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we saw a quick introduction to essential Unity concepts. We
    reviewed the basic Unity windows and how we can use all of them to edit a full
    scene, from navigating it, then creating premade objects (Prefabs), to manipulating
    them to create our own types of objects using GameObjects and components. We also
    discussed how to use the Hierarchy window to parent GameObjects to create complex
    object Hierarchies, as well as creating Prefabs to reutilize and manipulate large
    amounts of the same type of objects. Finally, we discussed how we can save our
    progress.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们快速介绍了Unity的基本概念。我们回顾了基本Unity窗口以及我们如何使用它们来编辑一个完整的场景，从导航它，然后创建预制对象（Prefab），到使用GameObject和组件操纵它们以创建我们自己的对象类型。我们还讨论了如何使用层次结构窗口将GameObject设置为父级以创建复杂对象层次结构，以及创建Prefab以重复利用和操作大量相同类型的对象。最后，我们讨论了如何保存我们的进度。
- en: In the next chapter, we will learn different tools like the Terrain system and
    ProBuilder to create the first prototype of our game’s level. This prototype will
    serve as a preview of where our scene will be headed, testing some ideas before
    going into full production.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习不同的工具，如地形系统和ProBuilder，来创建我们游戏级别的第一个原型。这个原型将作为我们场景将走向的预览，在全面生产之前测试一些想法。
