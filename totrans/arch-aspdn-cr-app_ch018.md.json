["```cs\nvar currentAssembly = typeof(Program).Assembly;\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services\n    // Plumbing/Dependencies\n    .AddAutoMapper(currentAssembly)\n    .AddMediatR(o => o.RegisterServicesFromAssembly(currentAssembly))\n    .AddSingleton(typeof(IPipelineBehavior<,>), typeof(ThrowFluentValidationExceptionBehavior<,>))\n    // Data\n    .AddDbContext<ProductContext>(options => options\n        .UseInMemoryDatabase(\"ProductContextMemoryDB\")\n        .ConfigureWarnings(builder => builder.Ignore(InMemoryEventId.TransactionIgnoredWarning))\n    )\n    // Web/MVC\n    .AddFluentValidationAutoValidation()\n    .AddValidatorsFromAssembly(currentAssembly)\n    .AddControllers()\n;\nvar app = builder.Build();\napp.MapControllers();\nusing (var seedScope = app.Services.CreateScope())\n{\n    var db = seedScope.ServiceProvider.GetRequiredService<ProductContext>();\n    await ProductSeeder.SeedAsync(db);\n}\napp.Run();\n```", "```cs\nusing AutoMapper;\nusing FluentValidation;\nusing MediatR;\nusing VerticalApp.Data;\nusing VerticalApp.Models;\nnamespace VerticalApp.Features.Stocks;\npublic class RemoveStocks\n{\n    public class Command : IRequest<Result> {/*...*/}\n    public class Result {/*...*/}\n    public class MapperProfile : Profile {/*...*/}\n    public class Validator : AbstractValidator<Command> {/*...*/}\n    public class Handler : IRequestHandler<Command, Result> {/*...*/}\n}\n```", "```cs\npublic class Command : IRequest<Result>\n{\n    public int ProductId { get; set; }\n    public int Amount { get; set; }\n}\n```", "```cs\npublic record class Result(int QuantityInStock);\n```", "```cs\npublic class MapperProfile : Profile\n{\n    public MapperProfile()\n    {\n        CreateMap<Product, Result>();\n    }\n}\n```", "```cs\npublic class Validator : AbstractValidator<Command>\n{\n    public Validator()\n    {\n        RuleFor(x => x.Amount).GreaterThan(0);\n    }\n}\n```", "```cs\npublic class Handler : IRequestHandler<Command, Result>\n{\n    private readonly ProductContext _db;\n    private readonly IMapper _mapper;\n    public Handler(ProductContext db, IMapper mapper)\n    {\n        _db = db ?? throw new ArgumentNullException(nameof(db));\n        _mapper = mapper ?? throw new ArgumentNullException(nameof(mapper));\n    }\n    public async Task<Result> Handle(Command request, CancellationToken cancellationToken)\n    {\n        var product = await _db.Products.FindAsync(new object[] { request.ProductId }, cancellationToken);\n        if (product == null)\n        {\n            throw new ProductNotFoundException(request.ProductId);\n        }\n        if (request.Amount > product.QuantityInStock)\n        {\n            throw new NotEnoughStockException(product.QuantityInStock, request.Amount);\n        }\n        product.QuantityInStock -= request.Amount;\n        await _db.SaveChangesAsync(cancellationToken);\n        return _mapper.Map<Result>(product);\n    }\n}\n```", "```cs\nusing MediatR;\nusing Microsoft.AspNetCore.Mvc;\nnamespace VerticalApp.Features.Stocks;\n[ApiController]\n[Route(\"products/{productId}/\")]\npublic class StocksController : ControllerBase\n{\n    private readonly IMediator _mediator;\n    public StocksController(IMediator mediator)\n    {\n        _mediator = mediator ?? throw new ArgumentNullException(nameof(mediator));\n    }\n    [HttpPost(\"add-stocks\")]\n    public async Task<ActionResult<AddStocks.Result>> AddAsync(\n        int productId,\n        [FromBody] AddStocks.Command command\n    ) {/*...*/}\n    [HttpPost(\"remove-stocks\")]\n    public async Task<ActionResult<RemoveStocks.Result>> RemoveAsync(\n        int productId,\n        [FromBody] RemoveStocks.Command command\n    ) {/*...*/}\n}\n```", "```cs\n[HttpPost(\"remove-stocks\")]\npublic async Task<ActionResult<RemoveStocks.Result>> RemoveAsync(\n    int productId,\n    [FromBody] RemoveStocks.Command command\n)\n{\n    try\n    {\n        command.ProductId = productId;\n        var result = await _mediator.Send(command);\n        return Ok(result);\n    }\n    catch (NotEnoughStockException ex)\n    {\n        return Conflict(new\n        {\n            ex.Message,\n            ex.AmountToRemove,\n            ex.QuantityInStock\n        });\n    }\n    catch (ProductNotFoundException ex)\n    {\n        return NotFound(new\n        {\n            ex.Message,\n            productId,\n        });\n    }\n}\n```", "```cs\nnamespace VerticalApp.Features.Stocks;\npublic class StocksTest\n{\n    private static async Task SeederDelegate(ProductContext db)\n    {\n        db.Products.RemoveRange(db.Products.ToArray());\n        await db.Products.AddAsync(new Product(\n            id: 4,\n            name: \"Ghost Pepper\",\n            quantityInStock: 10\n        ));\n        await db.Products.AddAsync(new Product(\n            id: 5,\n            name: \"Carolina Reaper\",\n            quantityInStock: 10\n        ));\n        await db.SaveChangesAsync();\n    }\n    public class AddStocksTest : StocksTest\n    {\n         // omitted test methods\n    }\n    public class RemoveStocksTest : StocksTest\n    {\n         // omitted test methods\n    }\n    public class StocksControllerTest : StocksTest\n    {\n         // omitted test methods\n    }\n}\n```", "```cs\n[Fact]\npublic async Task Should_increment_QuantityInStock_by_the_specified_amount()\n{\n    // Arrange\n    await using var application = new VerticalAppApplication();\n    await application.SeedAsync(SeederDelegate);\n    using var requestScope = application.Services.CreateScope();\n    var mediator = requestScope.ServiceProvider\n        .GetRequiredService<IMediator>();\n    // Act\n    var result = await mediator.Send(new AddStocks.Command\n    {\n        ProductId = 4,\n        Amount = 10\n    });\n    // Assert\n    using var assertScope = application.Services.CreateScope();\n    var db = assertScope.ServiceProvider\n        .GetRequiredService<ProductContext>();\n    var peppers = await db.Products.FindAsync(4);\n    Assert.NotNull(peppers);\n    Assert.Equal(20, peppers!.QuantityInStock);\n}\n```", "```cs\npublic class AddAsync : StocksControllerTest\n{\n    [Fact]\n    public async Task Should_send_a_valid_AddStocks_Command_to_the_mediator()\n    {\n        // Arrange\n        var mediatorMock = new Mock<IMediator>();\n        AddStocks.Command? addStocksCommand = default;\n        mediatorMock\n            .Setup(x => x.Send(It.IsAny<AddStocks.Command>(), It.IsAny<CancellationToken>()))\n            .Callback((IRequest<AddStocks.Result> request, CancellationToken cancellationToken) => addStocksCommand = request as AddStocks.Command)\n        ;\n        await using var application = new VerticalAppApplication(\n            afterConfigureServices: services => services\n                .AddSingleton(mediatorMock.Object)\n        );\n        var client = application.CreateClient();\n        var httpContent = JsonContent.Create(\n            new { amount = 1 },\n            options: new JsonSerializerOptions(JsonSerializerDefaults.Web)\n        );\n        // Act\n        var response = await client.PostAsync(\"/products/5/add-stocks\", httpContent);\n        // Assert\n        Assert.NotNull(response);\n        Assert.NotNull(addStocksCommand);\n        response.EnsureSuccessStatusCode();\n        mediatorMock.Verify(\n            x => x.Send(It.IsAny<AddStocks.Command>(), It.IsAny<CancellationToken>()),\n            Times.Once()\n        );\n        Assert.Equal(5, addStocksCommand!.ProductId);\n        Assert.Equal(1, addStocksCommand!.Amount);\n    }\n}\n```"]