- en: 'Chapter 4: Creating Projects and Templates'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章：创建项目和模板
- en: A template within Visual Studio is a set of files, references, project properties,
    and compilation options for working with a particular technology. Templates provide
    us with basic code to work with and acts as a guide that we can follow and complete
    by including our business logic and requirements. Different templates are installed
    according to the workloads that have been selected during Visual Studio installation,
    although there are templates that will be installed by default, such as class
    libraries. Depending on the project or technology we want to use, we will find
    different template options to choose from. Selecting the right template that fits
    your needs is the best action that you can take to evade technical debt and future
    issues in your architecture.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio中的模板是一组文件、引用、项目属性和编译选项，用于与特定技术一起工作。模板为我们提供了基本代码以供工作，并作为我们可以遵循并完成的指南，通过包括我们的业务逻辑和需求来完成。根据在Visual
    Studio安装过程中选择的负载，安装了不同的模板，尽管有一些模板会默认安装，例如类库。根据我们想要使用的项目或技术，我们将找到不同的模板选项可供选择。选择适合您需求的正确模板是您可以采取的最佳行动，以避免技术债务和未来在架构中的问题。
- en: In this chapter, we will analyze the main web development templates provided
    by Visual Studio 2022 and the options available to customize these templates.
    Also, during this chapter, we will understand how to pick the best template for
    our projects, considering the scope, requirements, and expertise of the team.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将分析Visual Studio 2022提供的主要Web开发模板以及可用的自定义模板选项。此外，在本章中，我们将了解如何根据项目的范围、需求和团队的专业知识选择最佳的模板。
- en: 'We will review the following topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将回顾以下主题：
- en: Selecting and searching for templates
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择和搜索模板
- en: Templates for .NET Core
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET Core模板
- en: Templates for **application programming interfaces** (**APIs**)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序编程接口**（API）模板'
- en: Templates for .NET Framework
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET Framework模板
- en: Templates for **single-page application** (**SPA**) projects
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单页应用**（SPA）项目的模板'
- en: Let's see what these templates are all about and how to work with them.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这些模板是什么以及如何使用它们。
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To follow along with this chapter, you must have previously installed Visual
    Studio 2022 with the web development workload, as shown in [*Chapter 1*](B17873_01_ePub.xhtml#_idTextAnchor013),
    *Getting Started with Visual Studio 2022*.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本章内容，你必须已经安装了带有Web开发工作负载的Visual Studio 2022，如[*第一章*](B17873_01_ePub.xhtml#_idTextAnchor013)中所示，“Visual
    Studio 2022入门”。
- en: 'You can check out the changes made to the project at the following link: [https://github.com/PacktPublishing/Hands-On-Visual-Studio-2022/tree/main/Chapter04](https://github.com/PacktPublishing/Hands-On-Visual-Studio-2022/tree/main/Chapter04)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过以下链接查看对项目的更改：[https://github.com/PacktPublishing/Hands-On-Visual-Studio-2022/tree/main/Chapter04](https://github.com/PacktPublishing/Hands-On-Visual-Studio-2022/tree/main/Chapter04)
- en: Selecting and searching for templates
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择和搜索模板
- en: As mentioned in the introduction of this chapter, Visual Studio has many templates
    that we can use with .NET and other technologies, depending on the type of project
    you are working on.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如本章引言所述，Visual Studio提供了许多模板，我们可以使用.NET和其他技术，具体取决于你正在处理的项目类型。
- en: 'To explore the templates in Visual Studio 2022, just open Visual Studio and
    select the **Create a new project** option:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Visual Studio 2022中探索模板，只需打开Visual Studio并选择**创建新项目**选项：
- en: '![Figure 4.1 – The Visual Studio Create a new project option](img/Figure_4.01_B17873.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![图4.1 – Visual Studio创建新项目选项](img/Figure_4.01_B17873.jpg)'
- en: Figure 4.1 – The Visual Studio Create a new project option
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.1 – Visual Studio创建新项目选项
- en: 'After selecting this option, we will see a list of templates to choose from
    for creating our new project, as shown in *Figure 4.2*. Similarly, on the left
    side, we will be able to see the templates we have recently selected, with the
    option to pin or unpin each template, so that we can quickly select the templates
    that we use the most:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 选择此选项后，我们将看到一系列可供选择以创建新项目的模板，如图*图4.2*所示。同样，在左侧，我们将能够看到我们最近选择的模板，有固定或取消固定每个模板的选项，这样我们可以快速选择我们最常用的模板：
- en: '![Figure 4.2 – The option to pin or unpin a template in the Recent project
    templates section](img/Figure_4.02_B17873.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图4.2 – 在最近的项目模板部分中固定或取消固定模板的选项](img/Figure_4.02_B17873.jpg)'
- en: Figure 4.2 – The option to pin or unpin a template in the Recent project templates
    section
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.2 – 在最近的项目模板部分中固定或取消固定模板的选项
- en: In *Figure 4.2*, we also see a search bar at the top for filtering the different
    templates. If you know the name or the technology that you will use, you can type
    the term related to it and start searching for the template. The search engine
    will show you all the templates that include the term you have entered.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图4.2*中，我们还可以看到顶部有一个搜索栏，用于过滤不同的模板。如果您知道将要使用的名称或技术，您可以输入相关的术语并开始搜索模板。搜索引擎将显示包含您输入的术语的所有模板。
- en: 'Below the search bar, we can also see three drop-down controls, which also
    serve as filters to search for templates related to the programming language,
    platforms, or types of projects we want to create. Among the most important options
    for each of these filters, we can find the following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在搜索栏下方，我们还可以看到三个下拉控件，这些控件也作为过滤器，用于搜索与我们要创建的编程语言、平台或项目类型相关的模板。在这些过滤器最重要的选项中，我们可以找到以下内容：
- en: '**All languages**:'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**所有语言**：'
- en: '**C#**'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**C#**'
- en: '**JavaScript**'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JavaScript**'
- en: '**Python**'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Python**'
- en: '**TypeScript**'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TypeScript**'
- en: '**Visual Basic**'
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Visual Basic**'
- en: '**All platforms**:'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**所有平台**：'
- en: '**Android**'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Android**'
- en: '**Azure**'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure**'
- en: '**iOS**'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**iOS**'
- en: '**Linux**'
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Linux**'
- en: '**Windows**'
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows**'
- en: '**All project types**:'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**所有项目类型**：'
- en: '**Cloud**'
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**云**'
- en: '**Desktop**'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**桌面**'
- en: '**Games**'
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**游戏**'
- en: '**Machine Learning**'
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**机器学习**'
- en: '**Mobile**'
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**移动**'
- en: '**Test**'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试**'
- en: '**Web**'
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Web**'
- en: 'In addition, it is possible to combine the filters with the search bar. For
    example, you can type `.NET Core` and select the **C#** option in the language
    drop-down menu to get all the projects related to .NET Core and C#, as shown here:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还可以将过滤器与搜索栏结合使用。例如，您可以在语言下拉菜单中选择**C#**选项，输入“.NET Core”以获取所有与.NET Core和C#相关的项目，如图所示：
- en: '![Figure 4.3 – The .NET Core templates for C#'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.3 – C#的.NET Core模板'
- en: '](img/Figure_4.03_B17873.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.03_B17873.jpg)'
- en: Figure 4.3 – The .NET Core templates for C#
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.3 – C#的.NET Core模板
- en: In *Figure 4.3*, we can see many kinds of projects related to .NET Core that
    Visual Studio has found, according to the filters and workloads selected during
    installation.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图4.3*中，我们可以看到Visual Studio根据安装过程中选择的过滤器和工作负载找到的许多与.NET Core相关的项目。
- en: 'At the end of the results, you will have an option to install other templates
    if you cannot find the option that you are looking for:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在结果底部，如果您找不到所需的选项，您将有一个安装其他模板的选项：
- en: '![Figure 4.4 – The option to install more tools and features in Visual Studio'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.4 – 在Visual Studio中安装更多工具和功能的选项'
- en: '](img/Figure_4.04_B17873.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.04_B17873.jpg)'
- en: Figure 4.4 – The option to install more tools and features in Visual Studio
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.4 – 在Visual Studio中安装更多工具和功能的选项
- en: It is important to note that each template has a description including the details
    related to the template, so we can easily identify whether the template includes
    the structure and schema that we need.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，每个模板都有一个描述，包括与模板相关的详细信息，这样我们就可以轻松地识别模板是否包含我们需要的结构和模式。
- en: Lastly, when the description of the template contains the **Empty** keyword,
    it means that the template doesn't contain elements or modules by default and
    includes either demos or examples, such as a guide, for the developer. This kind
    of template only includes the project and the base components to compile and run.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，当模板的描述包含**空**关键字时，这意味着模板默认不包含元素或模块，并包含演示或示例，例如指南，供开发者使用。这种类型的模板仅包含项目和基础组件，以便编译和运行。
- en: Now that we know how to use the template selection window, let's look at the
    most important templates for web development.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了如何使用模板选择窗口，让我们来看看Web开发中最重要的模板。
- en: Templates for .NET Core
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: .NET Core模板
- en: 'Let''s start this section knowing the difference between .NET Core and ASP.NET
    Core:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先了解.NET Core和ASP.NET Core之间的区别：
- en: .NET Core (now called .NET) is a cross-platform, free, and open source framework
    used to create web, desktop, mobile, and other kinds of applications, using a
    standard library and C#, Visual Basic, or F# as a programming language.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET Core（现在称为.NET）是一个跨平台、免费且开源的框架，用于创建Web、桌面、移动和其他类型的应用程序，使用标准库和C#、Visual Basic或F#作为编程语言。
- en: ASP.NET Core, on the other hand, is a multi-platform web technology for creating
    modern applications using .NET. This is why, although the .NET Core framework
    has been replaced with .NET 6, you will still find terms related to .NET Core
    as a part of the templates.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一方面，ASP.NET Core 是一种多平台网络技术，用于使用 .NET 创建现代应用程序。这就是尽管 .NET Core 框架已被 .NET 6
    替换，但您仍然会在模板中找到与 .NET Core 相关的术语。
- en: If we want to create a new clean project of the ASP.NET Core type, we can search
    and select the `AspCoreEmpty`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想创建一个新的 ASP.NET Core 类型的干净项目，我们可以搜索并选择`AspCoreEmpty`。
- en: Also, we must indicate the location to save the project. You can choose to leave
    the default path, or select a custom path, such as `C:\demos\AspCoreEmpty`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们必须指定保存项目的位置。您可以选择保留默认路径，或选择自定义路径，例如`C:\demos\AspCoreEmpty`。
- en: 'Finally, set the name of the solution. By default, it will be the same as the
    project, but you can change it to another name. In *Figure 4.5*, we have kept
    the same name:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，设置解决方案的名称。默认情况下，它将与项目相同，但您可以将其更改为另一个名称。在*图 4.5*中，我们保留了相同的名称：
- en: '![Figure 4.5 – Configuring a new ASP.NET Core Empty project'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.5 – 配置新的 ASP.NET Core Empty 项目'
- en: '](img/Figure_4.05_B17873.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.05_B17873.jpg)'
- en: Figure 4.5 – Configuring a new ASP.NET Core Empty project
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.5 – 配置新的 ASP.NET Core Empty 项目
- en: 'After clicking on the **Next** button, you will be shown a new window, as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**下一步**按钮后，将显示一个新窗口，如下所示：
- en: '![Figure 4.6 – Creating the ASP.NET Core Empty project'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.6 – 创建 ASP.NET Core Empty 项目'
- en: '](img/Figure_4.06_B17873.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.06_B17873.jpg)'
- en: Figure 4.6 – Creating the ASP.NET Core Empty project
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.6 – 创建 ASP.NET Core Empty 项目
- en: 'As shown in *Figure 4.6*, you can configure the following options:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如*图 4.6*所示，您可以配置以下选项：
- en: '**Framework**: This dropdown will show you the set of frameworks available
    to work with the selected technology. Although it is possible to select older
    frameworks, it is always advisable to create new projects with the latest version
    of the framework available.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**框架**：此下拉菜单将显示与所选技术一起可用的框架集。尽管可以选择较旧的框架，但始终建议使用可用的最新框架版本创建新项目。'
- en: '**Configure for HTTPS**: This checkbox allows you to configure the project
    to use a self-signed SSL certificate. If you are working on such a project for
    the first time, you will be asked to trust the certificate when you run the application
    so that everything works correctly. Although it is possible to work with the HTTP
    protocol, it is always recommended to use HTTPS in real life.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置 HTTPS**：此复选框允许您配置项目使用自签名 SSL 证书。如果您第一次在项目中工作，则在运行应用程序时将要求您信任证书，以确保一切正常工作。尽管可以使用
    HTTP 协议进行工作，但在现实生活中始终建议使用 HTTPS。'
- en: '**Enable Docker**: This option allows you to enable Docker support in your
    project. This means that a Docker file will be generated, which you can then publish
    – for example, to Microsoft Azure.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启用 Docker**：此选项允许您在项目中启用 Docker 支持。这意味着将生成 Docker 文件，然后您可以将其发布，例如到 Microsoft
    Azure。'
- en: In our example (*Figure 4.6*), we select **.NET 6** as a target framework. The
    **Configure for HTTPS** option is marked by default, and it is optional for this
    demo. Finally, you can click on **Create** to complete the wizard and create the
    project.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例(*图 4.6*)中，我们选择**.NET 6**作为目标框架。**配置 HTTPS**选项默认选中，对于此演示是可选的。最后，您可以点击**创建**以完成向导并创建项目。
- en: 'After creating the project, we can analyze the structure of the created project,
    which is simple, as shown in *Figure 4.7*:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 创建项目后，我们可以分析创建的项目结构，如图*图 4.7*所示，它很简单：
- en: '![Figure 4.7 – The ASP.NET Core Empty project in Visual Studio'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.7 – Visual Studio 中的 ASP.NET Core Empty 项目'
- en: '](img/Figure_4.07_B17873.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.07_B17873.jpg)'
- en: Figure 4.7 – The ASP.NET Core Empty project in Visual Studio
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.7 – Visual Studio 中的 ASP.NET Core Empty 项目
- en: In the panel called **Solution Explorer**, we can see all the files related
    to the template created for the project.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在名为**解决方案资源管理器**的面板中，我们可以看到与为项目创建的模板相关的所有文件。
- en: 'There are only two files related to the structure of the project, which are
    the following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 与项目结构相关的只有两个文件，如下所示：
- en: '`appsettings.json`: This is a JSON file that contains all the settings by default
    for an ASP.NET Core project.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`appsettings.json`: 这是一个包含默认设置的 JSON 文件，用于 ASP.NET Core 项目。'
- en: '`Program.cs`: This is the entry point of an application that contains a sequence
    of commands to configure and start the application.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Program.cs`: 这是包含配置和启动应用程序命令的应用程序入口点。'
- en: In this template we have selected, a new concept introduced in .NET 6 is used,
    called Minimal APIs, which is a way to have the minimum code necessary to create
    a simple endpoint, using helper functions inside `Program.cs`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们选择的模板中，使用了 .NET 6 中引入的新概念，称为最小 API，这是一种使用`Program.cs`中的辅助函数来创建简单端点所需的最少代码的方式。
- en: By default, when the application is executed, it will show a `GET` method and
    mapped into the base URL – for example, `http://myapiurl/`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，当应用程序执行时，它将显示一个`GET`方法并将其映射到基本 URL – 例如，`http://myapiurl/`。
- en: Important Note
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Minimal API is a new template included in .NET 6 that is very useful for creating
    simple APIs, such as demos, small services, serverless functions, and microservices.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 最小 API 是 .NET 6 中包含的新模板，对于创建简单的 API（如演示、小型服务、无服务器函数和微服务）非常有用。
- en: 'Now, let''s create a new project with the `ASPNET` and select the **ASP.NET
    Core Web App** template:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用`ASPNET`创建一个新的项目并选择**ASP.NET Core Web 应用程序**模板：
- en: '![Figure 4.8 – Searching by ASPNET and selecting the ASP.NET Core Web App template'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.8 – 使用 ASPNET 搜索并选择 ASP.NET Core Web 应用程序模板'
- en: '](img/Figure_4.08_B17873.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_4.08_B17873.jpg)'
- en: Figure 4.8 – Searching by ASPNET and selecting the ASP.NET Core Web App template
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.8 – 使用 ASPNET 搜索并选择 ASP.NET Core Web 应用程序模板
- en: 'Then, click on **Next** and fill out the information required for the new project,
    as shown in *Figure 4.9*:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，点击**下一步**并填写创建新项目所需的信息，如*图 4.9*所示：
- en: '![Figure 4.9 – Configuring the new ASP.NET Core Web App project'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.9 – 配置新的 ASP.NET Core Web 应用程序项目'
- en: '](img/Figure_4.9_B17873.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_4.9_B17873.jpg)'
- en: Figure 4.9 – Configuring the new ASP.NET Core Web App project
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.9 – 配置新的 ASP.NET Core Web 应用程序项目
- en: 'After filling out the additional information for the project, as seen in *Figure
    4.10*, you can click on the **Create** button to generate the project with the
    ASP.NET Core Web App template:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在填写完项目的附加信息后，如*图 4.10*所示，您可以点击**创建**按钮，使用 ASP.NET Core Web 应用程序模板生成项目：
- en: '![Figure 4.10 – Additional options for the new ASP.NET Core Web App template'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.10 – 新的 ASP.NET Core Web 应用程序模板的附加选项'
- en: '](img/Figure_4.10_B17873.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_4.10_B17873.jpg)'
- en: Figure 4.10 – Additional options for the new ASP.NET Core Web App template
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.10 – 新的 ASP.NET Core Web 应用程序模板的附加选项
- en: This template is perfect if you want to create a web application using .NET
    and C# running on the server. Also, it uses razor pages (syntaxes that combine
    C# with HTML in `cshtml` extension files) to build a web application into small
    and reusable pieces.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想使用 .NET 和 C# 在服务器上创建 Web 应用程序，则此模板非常合适。此外，它使用 razor 页面（在`cshtml`扩展文件中将 C#
    与 HTML 结合的语法）将 Web 应用程序构建成小型且可重用的组件。
- en: Modern applications normally run in the browser because they run faster and
    have a better **search engine optimization** (**SEO**), which improves the traffic
    to your website. However, server-side applications are still very useful for dashboards,
    internal projects, administration panels, and many other types of web applications.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现代应用程序通常在浏览器中运行，因为它们运行速度更快，并且有更好的**搜索引擎优化**（**SEO**），这可以提高您网站的流量。然而，服务器端应用程序对于仪表板、内部项目、管理面板以及许多其他类型的
    Web 应用程序仍然非常有用。
- en: 'An ASP.NET Core Web project contains a `wwwroot` folder, which you can see
    in *Figure 4.11*:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core Web 项目包含一个`wwwroot`文件夹，您可以在*图 4.11*中看到：
- en: '![Figure 4.11 – The structure of an ASP.NET Web project'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.11 – ASP.NET Web 项目的结构'
- en: '](img/Figure_4.11_B17873.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_4.11_B17873.jpg)'
- en: Figure 4.11 – The structure of an ASP.NET Web project
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.11 – ASP.NET Web 项目的结构
- en: The `wwwroot` folder is associated with static files such as CSS, images, and
    JavaScript files. There is also a folder called `Pages` that contains all the
    UI pieces.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`wwwroot`文件夹与静态文件相关联，例如 CSS、图片和 JavaScript 文件。还有一个名为`Pages`的文件夹，其中包含所有 UI 组件。'
- en: '`Index.cshtml` is an example where you can see C# code mixed with HTML code.
    The `@` character allows you to use the C# code in the file. `@model`, for example,
    sets the model type to map the values on the page.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`Index.cshtml`是一个示例，您可以在其中看到 C# 代码与 HTML 代码的混合。`@`字符允许您在文件中使用 C# 代码。例如，`@model`将模型类型设置为映射页面上的值。'
- en: 'Other kinds of .NET Core project templates include the following:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 其他类型的 .NET Core 项目模板包括以下内容：
- en: '**Console App**: This template creates a simple console application. Normally,
    we use this kind of application when we are starting out and learning.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制台应用程序**：此模板创建一个简单的控制台应用程序。通常，我们在开始学习和起步时使用此类应用程序。'
- en: '**Class Library**: This allows you to create components and classes to share
    across different projects.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类库**：这允许您创建可在不同项目中共享的组件和类。'
- en: '**Templates for APIs**'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**API模板**'
- en: '**Templates for SPAs**'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SPA模板**'
- en: These are the recommended templates, as they are the most updated and in line
    with the latest versions of .NET.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是推荐的模板，因为它们是最新的，并且与.NET的最新版本保持一致。
- en: Templates for APIs
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API模板
- en: Today, it is almost a rule that applications use API-based endpoints. This is
    because they provide a high level of security and interoperability by not depending
    on a particular technology or operating system, and they can be scaled according
    to the existing demand. Also, we can implement advanced architecture, such as
    microservices using APIs, where all our business logic is distributed in small
    isolated and standalone services.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，应用程序使用基于API的端点是几乎成为一条规则。这是因为它们通过不依赖于特定技术或操作系统提供了高级别的安全性和互操作性，并且可以根据现有需求进行扩展。此外，我们可以实现高级架构，例如使用API的微服务，其中所有业务逻辑都分布在小型隔离的独立服务中。
- en: 'Due to the great importance of being able to develop solutions based on APIs,
    Visual Studio 2022 incorporates a special template so that we can create APIs
    based on .NET 6, which we can search by filtering the `api` term, as can be seen
    in *Figure 4.12*:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 由于能够基于API开发解决方案的重要性，Visual Studio 2022集成了一个特殊的模板，使我们能够创建基于.NET 6的API，我们可以通过过滤`api`术语来搜索它们，如*图4.12*所示：
- en: '![Figure 4.12 – Filtering by API and selecting the ASP.NET Core Web API'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.12 – 通过API过滤并选择ASP.NET Core Web API'
- en: '](img/Figure_4.12_B17873.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_4.12_B17873.jpg)'
- en: Figure 4.12 – Filtering by API and selecting the ASP.NET Core Web API
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.12 – 通过API过滤并选择ASP.NET Core Web API
- en: 'Once we have selected the template, we will have to fill in the complementary
    information, according to our needs, as seen in *Figure 4.13*:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们选择了模板，我们必须根据我们的需求填写补充信息，如图*图4.13*所示：
- en: '![Figure 4.13 – Configuring the ASP.NET Core Web API project'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.13 – 配置ASP.NET Core Web API项目'
- en: '](img/Figure_4.13_B17873.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_4.13_B17873.jpg)'
- en: Figure 4.13 – Configuring the ASP.NET Core Web API project
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.13 – 配置ASP.NET Core Web API项目
- en: 'In the next window, we will be asked to select the version of the framework
    and whether we require some type of authentication, among other data that we have
    already seen in the *Templates for .NET Core* section. However, we have a couple
    of additional options that we do not see in a normal ASP.NET Core project, which
    are as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个窗口中，我们将被要求选择框架版本以及是否需要某种类型的身份验证，以及其他我们在*.NET Core模板*部分中已经看到的数据。然而，我们有一些额外的选项，在正常的ASP.NET
    Core项目中看不到，如下所示：
- en: '**User controllers**: If this option is selected, the use of controller files
    will be enabled from the configuration. If it is deselected, a feature called
    minimal APIs will be used, which will create the minimum code necessary to have
    a functional API.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户控制器**：如果选择此选项，将启用从配置中使用的控制器文件。如果不选择，将使用名为最小API的功能，这将创建实现功能API所需的最少代码。'
- en: '**Enable OpenAPI support**: Swagger is a set of open source tools based on
    the OpenAPI specification that will allow us to describe the APIs we create in
    a simple, easy, and well-structured way, providing API users with good documentation.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启用OpenAPI支持**：Swagger是一组基于OpenAPI规范的开放源代码工具，它将允许我们以简单、易于和结构良好的方式描述我们创建的API，为API用户提供良好的文档。'
- en: 'For our example, we will leave both options selected, as seen in *Figure 4.14*,
    so that you can see the resulting structure:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的示例，我们将保留两个选项都选中，如图*图4.14*所示，以便您可以看到生成的结构：
- en: '![Figure 4.14 – Selecting options in Additional information for the ASP.NET
    Core Web API project'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.14 – 选择ASP.NET Core Web API项目的附加信息中的选项'
- en: '](img/Figure_4.14_B17873.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_4.14_B17873.jpg)'
- en: Figure 4.14 – Selecting options in Additional information for the ASP.NET Core
    Web API project
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.14 – 选择ASP.NET Core Web API项目附加信息中的选项
- en: 'Once the project has been created, we can see that a folder called `Controllers`
    has been created as part of the project:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建项目，我们可以看到已创建一个名为`Controllers`的文件夹作为项目的一部分：
- en: '![Figure 4.15 – The structure of an ASP.NET Core API project'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.15 – ASP.NET Core API项目的结构'
- en: '](img/Figure_4.15_B17873.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_4.15_B17873.jpg)'
- en: Figure 4.15 – The structure of an ASP.NET Core API project
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.15 – ASP.NET Core API项目的结构
- en: In the `Controllers` folder, we will find the controllers that will be created
    as part of the API. Remember that we can see the controllers in this folder because
    of the **Use controllers** option we selected in *Figure 4.14*.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Controllers` 文件夹中，我们将找到作为 API 部分创建的控制器。请记住，我们可以看到这个文件夹中的控制器，是因为我们在 *图 4.14*
    中选择了 **Use controllers** 选项。
- en: 'To run or execute the application, we need to use the green arrow or play icon
    in the standard toolbar:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行或执行应用程序，我们需要使用标准工具栏中的绿色箭头或播放图标：
- en: '![Figure 4.16 – The play button to start the project in Visual Studio'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.16 – 在 Visual Studio 中启动项目的播放按钮'
- en: '](img/Figure_4.16_B17873.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.16_B17873.jpg)'
- en: Figure 4.16 – The play button to start the project in Visual Studio
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.16 – 在 Visual Studio 中启动项目的播放按钮
- en: We can start the project with debugging on or off. In this case, either option
    is fine. We just want to see how the project looks.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以开启或关闭调试来启动项目。在这种情况下，任何一种选择都可以。我们只是想看看项目的外观。
- en: Important Note
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: There are some useful shortcuts to start a project. You can use *F5* on your
    keyboard to run the project in debugging mode, and *Ctrl* + *F5* to start the
    project without debugging.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些有用的快捷键可以启动项目。您可以使用键盘上的 *F5* 以调试模式运行项目，或者使用 *Ctrl* + *F5* 来启动不带调试的项目。
- en: 'If we proceed to run the application, it will immediately take us to a window
    with the URL ending at `/swagger/index.html`:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们继续运行应用程序，它将立即带我们到一个 URL 以 `/swagger/index.html` 结尾的窗口：
- en: '![Figure 4.17 – The Swagger page for the ASP.NET Web API project'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.17 – ASP.NET Web API 项目的 Swagger 页面'
- en: '](img/Figure_4.17_B17873.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.17_B17873.jpg)'
- en: Figure 4.17 – The Swagger page for the ASP.NET Web API project
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.17 – ASP.NET Web API 项目的 Swagger 页面
- en: Here, we will be able to find all the functionality available in our API documented
    through Swagger – this means all the endpoints that we create from the controllers
    in our project. Swagger is a library that uses the OpenAPI standard to show all
    the endpoints, including the parameters required and the type of values returned.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将能够找到通过 Swagger 文档的所有 API 功能 – 这意味着我们项目中的控制器创建的所有端点。Swagger 是一个使用 OpenAPI
    标准来显示所有端点的库，包括所需的参数和返回值的类型。
- en: From this same page, we will be able to test each one of the endpoints, for
    the purpose of validating them, and carry out necessary debugging when some endpoint
    does not work as expected. As you can appreciate, this tool is of great help,
    both for development purposes and for providing users with documentation of the
    created API.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个页面，我们将能够测试每个端点，以验证它们，并在某些端点不符合预期时进行必要的调试。如您所欣赏，这个工具在开发目的和为用户提供创建的 API 文档方面都非常有帮助。
- en: This template gives us everything we need to create our own modern APIs from
    scratch. Let's now take a look at the templates available for working with .NET
    Framework.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模板为我们提供了从头开始创建我们自己的现代 API 所需要的一切。现在，让我们看看可用于与 .NET Framework 一起工作的模板。
- en: Templates for .NET Framework
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: .NET Framework 模板
- en: .NET Framework is the original implementation of .NET, released by Microsoft
    in 2002\. The long-term idea was to make this framework a multi-platform framework.
    Unfortunately, it always worked officially on Windows devices, due to API restrictions.
    To solve this problem, specific versions of the framework were created to support
    different platforms, which caused a fragmentation of the platform. Through the
    experience gathered from these projects launched over time, the Microsoft team
    has finally succeeded in unifying the .NET platform.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: .NET Framework 是 .NET 的原始实现，由微软于 2002 年发布。长期目标是使这个框架成为一个多平台框架。不幸的是，由于 API 限制，它始终在
    Windows 设备上官方运行。为了解决这个问题，创建了特定版本的框架来支持不同的平台，这导致了平台的碎片化。通过从这些随着时间的推移推出的项目中积累的经验，微软团队最终成功地统一了
    .NET 平台。
- en: As, for many years, the .NET Framework platform was the primary framework for
    developing .NET applications, many companies around the world use ASP.NET Web
    Forms, MVC, or Web API applications, based on .NET Framework. This is the reason
    why .NET Framework templates are still included in Visual Studio. This does not
    mean that it is advisable to create applications using such templates. You should
    always opt for the use of modern technologies that have current and constant support.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 由于多年来 .NET Framework 平台一直是开发 .NET 应用程序的主要框架，因此世界上许多公司使用基于 .NET Framework 的 ASP.NET
    Web Forms、MVC 或 Web API 应用程序。这就是为什么 .NET Framework 模板仍然包含在 Visual Studio 中的原因。但这并不意味着建议使用这些模板创建应用程序。您应该始终选择使用具有当前和持续支持的现代技术。
- en: 'Although there are several templates with .NET Framework, there is one that
    really interests us for web development. This is called `net framework` term,
    as seen in *Figure 4.18*:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然有几个带有 .NET 框架的模板，但有一个真正吸引我们的用于 Web 开发。这被称为 `net framework` 术语，如 *图 4.18* 所示：
- en: '![Figure 4.18 – Searching with net framework'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.18 – 使用 net framework 进行搜索'
- en: '](img/Figure_4.18_B17873.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.18_B17873.jpg)'
- en: Figure 4.18 – Searching with net framework
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.18 – 使用 .NET 框架进行搜索
- en: 'Once you select the template, in the next window, you will see numerous fields
    to fill in, which will be familiar to you, such as the project name and location,
    among other data. The important point is to note that we have a dropdown that
    shows us a significant number of versions of .NET Framework that we can work with.
    We will select the last version in this example, as you can see in *Figure 4.19*:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 选择模板后，在下一个窗口中，您将看到许多需要填写字段，这些字段对您来说应该是熟悉的，例如项目名称和位置，以及其他数据。重要的是要注意，我们有一个下拉菜单，显示我们可以工作的
    .NET 框架的多个版本。在这个例子中，我们将选择最后一个版本，如 *图 4.19* 所示：
- en: '![Figure 4.19 – Configuring ASP.NET Web Application (.NET Framework)'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.19 – 配置 ASP.NET Web 应用程序 (.NET 框架)'
- en: '](img/Figure_4.19_B17873.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.19_B17873.jpg)'
- en: Figure 4.19 – Configuring ASP.NET Web Application (.NET Framework)
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.19 – 配置 ASP.NET Web 应用程序 (.NET 框架)
- en: 'Once we have selected the framework, we can choose what type of application
    we want to create – the options include a clean project, templates for web forms,
    MVC-based projects, web APIs, and single-page applications, as seen in *Figure
    4.20*:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们选择了框架，我们就可以选择我们想要创建的应用程序类型 – 选项包括一个干净的项目、Web 表单模板、基于 MVC 的项目、Web API 和单页应用程序，如
    *图 4.20* 所示：
- en: '![Figure 4.20 – The type of web applications for .NET Framework in Visual Studio'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.20 – Visual Studio 中 .NET Framework 的 Web 应用程序类型'
- en: '](img/Figure_4.20_B17873.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.20_B17873.jpg)'
- en: Figure 4.20 – The type of web applications for .NET Framework in Visual Studio
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.20 – Visual Studio 中 .NET Framework 的 Web 应用程序类型
- en: The selection of these templates will depend on the needs of the application,
    although, as mentioned at the beginning of this section, it is recommended to
    opt for templates that are oriented toward .NET.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这些模板的选择将取决于应用程序的需求，尽管，如本节开头所述，建议选择面向 .NET 的模板。
- en: Let's move on to review the category of SPA's templates, which is oriented toward
    the creation of applications with which users will interact.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续审查 SPA 模板的类别，该类别旨在创建用户将与之交互的应用程序。
- en: Templates for SPAs
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单页应用模板
- en: SPAs is an amazing architecture for web projects, where all the elements are
    rendered using a single **HyperText Markup Language** (**HTML**) file. There are
    a good number of libraries and frameworks that use this concept – for example,
    Angular, React.js, and Blazor WebAssembly.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 单页应用（SPA）是 Web 项目的绝佳架构，其中所有元素都使用单个 **超文本标记语言**（**HTML**）文件进行渲染。有许多库和框架使用这个概念
    – 例如，Angular、React.js 和 Blazor WebAssembly。
- en: Any project created with these templates will contain all the required components
    to create a monolithic application, using ASP.NET on the backend and a SPA library
    or framework on the frontend side.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些模板创建的任何项目都将包含创建单体应用程序所需的所有组件，后端使用 ASP.NET，前端使用单页应用库或框架。
- en: 'Let''s create our first SPA project with Visual Studio. You can search for
    `ASP.NET Core with` to find the templates for SPAs:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 Visual Studio 创建我们的第一个 SPA 项目。您可以通过搜索 `ASP.NET Core with` 来找到单页应用的模板：
- en: '![Figure 4.21 – Searching by ASP.NET Core with'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.21 – 使用 ASP.NET Core 进行搜索'
- en: '](img/Figure_4.21_B17873.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.21_B17873.jpg)'
- en: Figure 4.21 – Searching by ASP.NET Core with
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.21 – 使用 ASP.NET Core 进行搜索
- en: 'In *Figure 4.21*, you can see the result of searching by `ASP.NET Core with`.
    There are three templates that we can select to work with SPAs:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *图 4.21* 中，您可以看到使用 `ASP.NET Core with` 进行搜索的结果。我们可以选择三个模板来处理 SPA：
- en: '**ASP.NET Core with Angular**'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ASP.NET Core with Angular**'
- en: '**ASP.NET Core with React.js**'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ASP.NET Core with React.js**'
- en: '**ASP.NET Core with React.js and Redux**'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ASP.NET Core with React.js and Redux**'
- en: 'We will create a project with React.js, so let''s select **ASP.NET Core with
    React.js** and then click on **Next** to continue:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 React.js 创建一个项目，因此让我们选择 **ASP.NET Core with React.js**，然后点击 **下一步** 继续操作：
- en: '![Figure 4.22 – Configuring ASP.NET Core with the React.js project'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.22 – 配置 ASP.NET Core 与 React.js 项目'
- en: '](img/Figure_4.22_B17873.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.22_B17873.jpg)'
- en: Figure 4.22 – Configuring ASP.NET Core with the React.js project
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.22 – 配置 ASP.NET Core 与 React.js 项目
- en: Important Note
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: This project that you will create is going to be used for the next exercises
    in this book, so it's important to save this code in a permanent folder that you
    prefer.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 你将要创建的项目将用于本书接下来的练习，因此将此代码保存在你偏好的永久文件夹中非常重要。
- en: 'Then, you should select **.NET 6 (Long-term support)** as a **Framework** target
    and **None** in **Authentication type**, and finally, click on **Create**, as
    shown in *Figure 4.23*:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你应该选择**.NET 6（长期支持）**作为**框架**目标，并在**身份验证类型**中选择**无**，最后点击**创建**，如图*图4.23*所示：
- en: '![Figure 4.23 – Filling out the Additional information section'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.23 – 填写附加信息部分'
- en: '](img/Figure_4.23_B17873.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_4.23_B17873.jpg)'
- en: Figure 4.23 – Filling out the Additional information section
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.23 – 填写附加信息部分
- en: 'After clicking on **Create**, you can see the project created with the SPA
    template and analyze the architecture:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**创建**后，你可以看到使用SPA模板创建的项目，并分析其架构：
- en: '![Figure 4.24 – The ASP.NET Core project with the React.js project created
    in Visual Studio'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.24 – 在Visual Studio中创建的包含React.js项目的ASP.NET Core项目'
- en: '](img/Figure_4.24_B17873.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_4.24_B17873.jpg)'
- en: Figure 4.24 – The ASP.NET Core project with the React.js project created in
    Visual Studio
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.24 – 在Visual Studio中创建的包含React.js项目的ASP.NET Core项目
- en: 'There are three important folders to highlight in this template:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个模板中，有三个重要的文件夹需要突出：
- en: '**ClientApp**: Contains the client application – in this case, a React.js app'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ClientApp**: 包含客户端应用程序 – 在这种情况下，一个React.js应用程序'
- en: '**Controllers**: Contains all the controllers related to the business logic
    on a server'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Controllers**: 包含与服务器上业务逻辑相关的所有控制器'
- en: '**Pages**: Contains razor pages, which means UI components rendered on a server'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Pages**: 包含razor页面，这意味着在服务器上渲染的UI组件'
- en: The template has a demo with the `WeatherForecastController.cs` file. This is
    a simple demo that returns some random data.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 该模板包含一个`WeatherForecastController.cs`文件的演示。这是一个简单的演示，返回一些随机数据。
- en: 'Let''s run the project by clicking the play button, as shown in *Figure 4.25*,
    to see how the application looks:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过点击播放按钮来运行项目，如图*图4.25*所示，以查看应用的外观：
- en: '![Figure 4.25 – The option to run the project in Visual Studio (the green arrow
    or play icon)'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.25 – 在Visual Studio中运行项目的选项（绿色箭头或播放图标）'
- en: tt
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: tt
- en: '](img/Figure_4.25_B17873.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_4.25_B17873.jpg)'
- en: Figure 4.25 – The option to run the project in Visual Studio (the green arrow
    or play icon)
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.25 – 在Visual Studio中运行项目的选项（绿色箭头或播放图标）
- en: 'When the project is running, you can see a simple HTML page explaining how
    the template works, which includes two demos, **Counter** and **Fetch data**:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 当项目运行时，你可以看到一个简单的HTML页面，解释了模板的工作原理，包括两个演示，**计数器**和**获取数据**：
- en: '![Figure 4.26 – ASP.NET Core with the React.js project running'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.26 – ASP.NET Core与React.js项目运行状态'
- en: '](img/Figure_4.26_B17873.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_4.26_B17873.jpg)'
- en: Figure 4.26 – ASP.NET Core with the React.js project running
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.26 – ASP.NET Core与React.js项目运行状态
- en: The template is simple but includes everything that we need for creating a new
    web application using a monolithic architecture and best practices on the backend
    and frontend sides. If you require a web application with high-performance security,
    this template is a good option. React.js uses JavaScript in the syntaxes, so for
    this template, you need more knowledge of this language and C# for the backend.
    In the template that we analyzed in the *Templates for .NET Core* section, C#
    was more important than JavaScript for writing our UI and business logic.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 该模板简单但包含了我们使用单体架构创建新Web应用所需的所有内容，并在后端和前端方面遵循最佳实践。如果你需要一个高性能安全的Web应用，这个模板是一个不错的选择。React.js使用JavaScript作为语法，因此对于这个模板，你需要更多关于这种语言以及C#（后端）的知识。在我们分析的*.NET
    Core模板*部分中，C#对于编写我们的UI和业务逻辑比JavaScript更重要。
- en: We will perform some modifications in this project, and we will use the files
    and demos by default to analyze the tools in Visual Studio and learn how to take
    advantage of these amazing functionalities.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将对这个项目进行一些修改，并默认使用文件和演示来分析Visual Studio中的工具，并学习如何利用这些惊人的功能。
- en: Summary
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Visual Studio has different options for creating projects, using templates depending
    on the workload added during the installation process. We have four filters to
    search quickly in the templates. Though we can filter by language, platform, and
    project type, we also have the possibility to use the search bar to find our template,
    using a term or a specific word.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio在创建项目方面有不同的选项，根据安装过程中添加的工作负载使用模板。我们有四个过滤器来快速搜索模板。虽然我们可以按语言、平台和项目类型进行筛选，但我们也有可能使用搜索栏通过术语或特定单词来查找我们的模板。
- en: After selecting the template to use, we must always type a project name and
    the folder where our project is going to be created. Then, we must select the
    target framework and some optional information. Visual Studio is going to open
    the project after selecting **Create** on the screen, so we have the possibility
    to start working on our project right away.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 选择要使用的模板后，我们必须始终输入项目名称以及项目将要创建的文件夹。然后，我们必须选择目标框架和一些可选信息。在屏幕上选择**创建**后，Visual
    Studio将打开项目，因此我们可以立即开始工作。
- en: Using **Solution Explorer**, we can see the structure of the project, including
    the folders used in the application. Normally, a project created with a template
    contains a demo that helps us to verify whether an application is running fine.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**解决方案资源管理器**，我们可以查看项目的结构，包括应用中使用的文件夹。通常，使用模板创建的项目包含一个演示，帮助我们验证应用程序是否运行良好。
- en: In [*Chapter 5*](B17873_05_ePub.xhtml#_idTextAnchor060), *Debugging and Compiling
    Your Projects*, we will debug our created SPA project. We will understand why
    this tool is important, and we will check the options to compile our project before
    executing it.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第5章*](B17873_05_ePub.xhtml#_idTextAnchor060)“调试和编译您的项目”中，我们将调试我们创建的SPA项目。我们将了解为什么这个工具很重要，并检查在执行之前编译项目的选项。
