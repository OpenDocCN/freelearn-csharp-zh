["```cs\n// Bad practice: RPC method with multiple parameters.\npublic void SendMessage(string to, string body)\n// Good practice: single parameter using a complex type.\npublic class Message\n{\n  public string To { get; set; }\n  public string Body { get; set; }\n}\npublic void SendMessage(Message message) \n```", "```cs\n    namespace Northwind.Chat.Models;\n    public class UserModel\n    {\n      public string Name { get; set; } = null!;\n      public string ConnectionId { get; set; } = null!;\n      public string? Groups { get; set; } // comma-separated list\n    } \n    ```", "```cs\n    namespace Northwind.Chat.Models;\n    public class MessageModel\n    {\n      public string From { get; set; } = null!;\n      public string To { get; set; } = null!;\n      public string? Body { get; set; }\n    } \n    ```", "```cs\n    <ItemGroup>\n      <ProjectReference\n        Include=\"..\\Northwind.Common\\Northwind.Common.csproj\" />\n    </ItemGroup> \n    ```", "```cs\n    \"**https**\": {\n      \"commandName\": \"Project\",\n      \"dotnetRunMessages\": true,\n      \"launchBrowser\": true,\n    **\"applicationUrl\"****:****\"https://localhost:5111;http://localhost:5112\"****,**\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n      } \n    ```", "```cs\n    using Microsoft.AspNetCore.SignalR; // To use Hub.\n    using Northwind.Chat.Models; // To use UserModel, MessageModel.\n    namespace Northwind.SignalR.Service.Hubs;\n    public class ChatHub : Hub\n    {\n      // A new instance of ChatHub is created to process each method so we\n      // must store user names, connection IDs, and groups in a static field.\n      private static Dictionary<string, UserModel> Users = new();\n      public async Task Register(UserModel newUser)\n      {\n        UserModel user;\n        string action = \"registered as a new user\";\n        // Try to get a stored user with a match on new user.\n        if (Users.ContainsKey(newUser.Name))\n        {\n          user = Users[newUser.Name];\n          // Remove any existing group registrations.\n          if (user.Groups is not null)\n          {\n            foreach (string group in user.Groups.Split(','))\n            {\n              await Groups.RemoveFromGroupAsync(user.ConnectionId, group);\n            }\n          }\n          user.Groups = newUser.Groups;\n          // Connection ID might have changed if the browser \n          // refreshed so update it.\n          user.ConnectionId = Context.ConnectionId;\n          action = \"updated your registered user\";\n        }\n        else\n        {\n          if (string.IsNullOrEmpty(newUser.Name))\n          {\n            // Assign a GUID for name if they are anonymous.\n            newUser.Name = Guid.NewGuid().ToString();\n          }\n          newUser.ConnectionId = Context.ConnectionId;\n          Users.Add(key: newUser.Name, value: newUser);\n          user = newUser;\n        }\n        if (user.Groups is not null)\n        {\n          // A user does not have to belong to any groups\n          // but if they do, register them with the Hub.\n          foreach (string group in user.Groups.Split(','))\n          {\n            await Groups.AddToGroupAsync(user.ConnectionId, group);\n          }\n        }\n        // Send a message to the registering user informing of success.\n        MessageModel message = new() \n        { \n          From = \"SignalR Hub\", To = user.Name, \n          Body = string.Format(\n            \"You have successfully {0} with connection ID {1}.\",\n            arg0: action, arg1: user.ConnectionId)\n        };\n        IClientProxy proxy = Clients.Client(user.ConnectionId);\n        await proxy.SendAsync(\"ReceiveMessage\", message);\n      }\n      public async Task SendMessage(MessageModel message)\n      {\n        IClientProxy proxy;\n        if (string.IsNullOrEmpty(message.To))\n        {\n          message.To = \"Everyone\";\n          proxy = Clients.All;\n          await proxy.SendAsync(\"ReceiveMessage\", message);\n          return;\n        }\n        // Split To into a list of user and group names.\n        string[] userAndGroupList = message.To.Split(',');\n        // Each item could be a user or group name.\n        foreach (string userOrGroup in userAndGroupList)\n        {\n          if (Users.ContainsKey(userOrGroup))\n          {\n            // If the item is in Users then send the message to that user\n            // by looking up their connection ID in the dictionary.\n            message.To = $\"User: {Users[userOrGroup].Name}\";\n            proxy = Clients.Client(Users[userOrGroup].ConnectionId);\n          }\n          else // Assume the item is a group name to send the message to.\n          {\n            message.To = $\"Group: {userOrGroup}\";\n            proxy = Clients.Group(userOrGroup);\n          }\n          await proxy.SendAsync(\"ReceiveMessage\", message);\n        }\n      }\n    } \n    ```", "```cs\n    using Northwind.SignalR.Service.Hubs; // To use ChatHub. \n    ```", "```cs\n    builder.Services.AddSignalR(); \n    ```", "```cs\n    app.MapHub<ChatHub>(\"/chat\"); \n    ```", "```cs\n    dotnet tool install -g Microsoft.Web.LibraryManager.Cli \n    ```", "```cs\n    libman install @microsoft/signalr@latest -p unpkg -d wwwroot/js/signalr --files dist/browser/signalr.js --files dist/browser/signalr.min.js \n    ```", "```cs\n    wwwroot/js/signalr/dist/browser/signalr.js written to disk\n    wwwroot/js/signalr/dist/browser/signalr.min.js written to disk\n    Installed library \"@microsoft/signalr@latest\" to \"wwwroot/js/signalr\" \n    ```", "```cs\n    @using Northwind.Chat.Models\n    @{\n      ViewData[\"Title\"] = \"SignalR Chat\";\n    }\n    <div class=\"container\">\n      <h1>@ViewData[\"Title\"]</h1>\n      <hr />\n      <div class=\"row\">\n        <div class=\"col\">\n          <h2>Register User</h2>\n          <div class=\"mb-3\">\n            <label for=\"myName\" class=\"form-label\">My name</label>\n            <input type=\"text\" class=\"form-control\" \n                   id=\"myName\" value=\"Alice\" required />\n          </div>\n          <div class=\"mb-3\">\n            <label for=\"myGroups\" class=\"form-label\">My groups</label>\n            <input type=\"text\" class=\"form-control\" \n                   id=\"myGroups\" value=\"Sales,IT\" />\n          </div>\n          <div class=\"mb-3\">\n            <input type=\"button\" class=\"form-control\" \n                   id=\"registerButton\" value=\"Register User\" />\n          </div>\n        </div>\n        <div class=\"col\">\n          <h2>Send Message</h2>\n          <div class=\"mb-3\">\n            <label for=\"from\" class=\"form-label\">From</label>\n            <input type=\"text\" class=\"form-control\" \n                   id=\"from\" value=\"Alice\" readonly />\n          </div>\n          <div class=\"mb-3\">\n            <label for=\"to\" class=\"form-label\">To</label>\n            <input type=\"text\" class=\"form-control\" id=\"to\" />\n          </div>\n          <div class=\"mb-3\">\n            <label for=\"body\" class=\"form-label\">Body</label>\n            <input type=\"text\" class=\"form-control\" id=\"body\" />\n          </div>\n          <div class=\"mb-3\">\n            <input type=\"button\" class=\"form-control\" \n                   id=\"sendButton\" value=\"Send Message\" />\n          </div>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col\">\n          <hr />\n          <h2>Messages received</h2>\n          <ul id=\"messages\"></ul>\n        </div>\n      </div>\n    </div>\n    <script src=\"img/signalr.js\"></script>\n    <script src=\"img/chat.js\"></script> \n    ```", "```cs\n    \"use strict\";\n    var connection = new signalR.HubConnectionBuilder()\n      .withUrl(\"/chat\").build();\n    document.getElementById(\"registerButton\").disabled = true;\n    document.getElementById(\"sendButton\").disabled = true;\n    document.getElementById(\"myName\").addEventListener(\"input\",\n      function () {\n        document.getElementById(\"from\").value = \n          document.getElementById(\"myName\").value;\n      }\n    );\n    connection.start().then(function () {\n      document.getElementById(\"registerButton\").disabled = false;\n      document.getElementById(\"sendButton\").disabled = false;\n    }).catch(function (err) {\n      return console.error(err.toString());\n    });\n    connection.on(\"ReceiveMessage\", function (received) {\n      var li = document.createElement(\"li\");\n      document.getElementById(\"messages\").appendChild(li);\n      li.textContent =\n        // This string must use backticks ` to enable an interpolated \n        // string. If you use single quotes ' then it will not work!\n        `To ${received.to}, From ${received.from}: ${received.body}`;\n    });\n    document.getElementById(\"registerButton\").addEventListener(\"click\",\n      function (event) {\n        var registermodel = {\n          name: document.getElementById(\"myName\").value,\n          groups: document.getElementById(\"myGroups\").value\n        };\n        connection.invoke(\"Register\", registermodel).catch(function (err) {\n          return console.error(err.toString());\n        });\n        event.preventDefault();\n      });\n    document.getElementById(\"sendButton\").addEventListener(\"click\",\n      function (event) {\n        var messagemodel = {\n          from: document.getElementById(\"from\").value,\n          to: document.getElementById(\"to\").value,\n          body: document.getElementById(\"body\").value\n        };\n        connection.invoke(\"SendMessage\", messagemodel).catch(function (err) {\n          return console.error(err.toString());\n        });\n        event.preventDefault();\n    }); \n    ```", "```cs\n        dotnet run --launch-profile https \n        ```", "```cs\n    <ItemGroup>\n      <PackageReference Include=\"Microsoft.AspNetCore.SignalR.Client\" \n                        Version=\"8.0.0\" />\n    </ItemGroup>\n    <ItemGroup>\n      <ProjectReference \n        Include=\"..\\Northwind.Common\\Northwind.Common.csproj\" />\n    </ItemGroup> \n    ```", "```cs\n    using Microsoft.AspNetCore.SignalR.Client; // To use HubConnection.\n    using Northwind.Chat.Models; // To use UserModel, MessageModel.\n    Write(\"Enter a username (required): \");\n    string? username = ReadLine();\n    if (string.IsNullOrEmpty(username))\n    {\n      WriteLine(\"You must enter a username to register with chat!\");\n      return;\n    }\n    Write(\"Enter your groups (optional): \");\n    string? groups = ReadLine();\n    HubConnection hubConnection = new HubConnectionBuilder()\n      .WithUrl(\"https://localhost:5111/chat\")\n      .Build();\n    hubConnection.On<MessageModel>(\"ReceiveMessage\", message =>\n    {\n      WriteLine($\"To {message.To}, From {message.From}: {message.Body}\");\n    });\n    await hubConnection.StartAsync();\n    WriteLine(\"Successfully started.\");\n    UserModel registration = new()\n    {\n      Name = username,\n      Groups = groups\n    };\n    await hubConnection.InvokeAsync(\"Register\", registration);\n    WriteLine(\"Successfully registered.\");\n    WriteLine(\"Listening... (press ENTER to stop.)\");\n    ReadLine(); \n    ```", "```cs\n    namespace Northwind.SignalR.Streams;\n    public record StockPrice(string Stock, double Price); \n    ```", "```cs\n    using Microsoft.AspNetCore.SignalR; // To use Hub.\n    using System.Runtime.CompilerServices; // To use [EnumeratorCancellation].\n    using Northwind.SignalR.Streams; // To use StockPrice.\n    namespace Northwind.SignalR.Service.Hubs;\n    public class StockPriceHub : Hub\n    {\n      public async IAsyncEnumerable<StockPrice> GetStockPriceUpdates(\n        string stock,\n        [EnumeratorCancellation] CancellationToken cancellationToken)\n      {\n        double currentPrice = 267.10; // Simulated initial price.\n        for (int i = 0; i < 10; i++)\n        {\n          // Check the cancellation token regularly so that the server will stop\n          // producing items if the client disconnects.\n          cancellationToken.ThrowIfCancellationRequested();\n          // Increment or decrement the current price by a random amount.\n          // The compiler does not need the extra parentheses but it\n          // is clearer for humans if you put them in.\n          currentPrice += (Random.Shared.NextDouble() * 10.0) - 5.0;\n          StockPrice stockPrice = new(stock, currentPrice);\n         Console.WriteLine(\"[{0}] {1} at {2:C}\",\n           DateTime.UtcNow, stockPrice.Stock, stockPrice.Price);\n          yield return stockPrice;\n          await Task.Delay(4000, cancellationToken); // milliseconds\n        }\n      }\n      public async Task UploadStocks(IAsyncEnumerable<string> stocks)\n      {\n        await foreach (string stock in stocks)\n        {\n          Console.WriteLine($\"Receiving {stock} from client...\");\n        }\n      }\n    } \n    ```", "```cs\n    `app.MapHub<StockPriceHub>(\"/stockprice\");` \n    ```", "```cs\n    <ItemGroup>\n      <PackageReference Include=\"Microsoft.AspNetCore.SignalR.Client\" \n                        Version=\"8.0.0\" />\n    </ItemGroup>\n    <ItemGroup>\n      <ProjectReference \n        Include=\"..\\Northwind.Common\\Northwind.Common.csproj\" />\n    </ItemGroup> \n    ```", "```cs\n    // Defined in the empty default namespace to merge with the auto-\n    // generated partial Program class.\n    partial class Program\n    {\n      static async IAsyncEnumerable<string> GetStocksAsync()\n      {\n        for (int i = 0; i < 10; i++)\n        {\n          // Return a random four-letter stock code.\n          yield return $\"{AtoZ()}{AtoZ()}{AtoZ()}{AtoZ()}\";\n          await Task.Delay(TimeSpan.FromSeconds(3));\n        }\n      }\n      static string AtoZ()\n      {\n        return char.ConvertFromUtf32(Random.Shared.Next(65, 91));\n      }\n    } \n    ```", "```cs\n    using Microsoft.AspNetCore.SignalR.Client; // To use HubConnection.\n    using Northwind.SignalR.Streams; // To use StockPrice.\n    Write(\"Enter a stock (press Enter for MSFT): \");\n    string? stock = ReadLine();\n    if (string.IsNullOrEmpty(stock))\n    {\n      stock = \"MSFT\";\n    }\n    HubConnection hubConnection = new HubConnectionBuilder()\n      .WithUrl(\"https://localhost:5111/stockprice\")\n      .Build();\n    await hubConnection.StartAsync();\n    try\n    {\n      CancellationTokenSource cts = new();\n      IAsyncEnumerable<StockPrice> stockPrices = \n        hubConnection.StreamAsync<StockPrice>(\n          \"GetStockPriceUpdates\", stock, cts.Token);\n      await foreach (StockPrice sp in stockPrices)\n      {\n        WriteLine($\"{sp.Stock} is now {sp.Price:C}.\");\n        Write(\"Do you want to cancel (y/n)? \");\n        ConsoleKey key = ReadKey().Key;\n        if (key == ConsoleKey.Y)\n        {\n          cts.Cancel();\n        }\n        WriteLine();\n      }\n    }\n    catch (Exception ex)\n    {\n      WriteLine($\"{ex.GetType()} says {ex.Message}\");\n    }\n    WriteLine();\n    WriteLine(\"Streaming download completed.\");\n    await hubConnection.SendAsync(\"UploadStocks\", GetStocksAsync());\n    WriteLine(\"Uploading stocks to service... (press ENTER to stop.)\");\n    ReadLine();\n    WriteLine(\"Ending console app.\"); \n    ```", "```cs\n    Enter a stock (press Enter for MSFT):\n    MSFT is now £265.00.\n    Do you want to cancel (y/n)? \n    ```", "```cs\n    info: Microsoft.Hosting.Lifetime[14]\n          Now listening on: https://localhost:5131\n    info: Microsoft.Hosting.Lifetime[14]\n          Now listening on: http://localhost:5132\n    info: Microsoft.Hosting.Lifetime[0]\n          Application started. Press Ctrl+C to shut down.\n    info: Microsoft.Hosting.Lifetime[0]\n          Hosting environment: Development\n    info: Microsoft.Hosting.Lifetime[0]\n          Content root path: C:\\apps-services-net7\\Chapter13\\Northwind.SignalR.Service.Client.Mvc\n    [12/09/2022 17:52:26] MSFT at £265.00\n    [12/09/2022 17:52:30] MSFT at £260.78\n    [12/09/2022 17:52:34] MSFT at £264.86\n    [12/09/2022 17:52:38] MSFT at £262.10 \n    ```", "```cs\n    MSFT is now £260.78.\n    Do you want to cancel (y/n)? n\n    MSFT is now £264.86.\n    Do you want to cancel (y/n)? n\n    MSFT is now £262.10.\n    Do you want to cancel (y/n)? y\n    System.Threading.Tasks.TaskCanceledException says A task was canceled.\n    Streaming download completed.\n    Uploading stocks to service... (press ENTER to stop.) \n    ```", "```cs\n    Receiving PJON from client...\n    Receiving VWJD from client...\n    Receiving HMOJ from client...\n    Receiving QQMQ from client... \n    ```"]