["```cs\ndotnet tool install --global dotnet-ef\n```", "```cs\ndotnet new webapi -n BasicEfCoreDemo -controllers\n```", "```cs\ndotnet add package Microsoft.EntityFrameworkCore.SqlServerdotnet add package Microsoft.EntityFrameworkCore.Design\n```", "```cs\nnamespace BasicEfCoreDemo.Models;public class Invoice{\n    public Guid Id { get; set; }\n    public string InvoiceNumber { get; set; } = string.Empty;\n    public string ContactName { get; set; } = string.Empty;\n    public string? Description { get; set; }\n    public decimal Amount { get; set; }\n    public DateTimeOffset InvoiceDate { get; set; }\n    public DateTimeOffset DueDate { get; set; }\n    public InvoiceStatus Status { get; set; }\n}\n```", "```cs\npublic enum InvoiceStatus{\n    Draft,\n    AwaitPayment,\n    Paid,\n    Overdue,\n    Cancelled\n}\n```", "```cs\nusing BasicEfCoreDemo.Models;using Microsoft.EntityFrameworkCore;\nnamespace BasicEfCoreDemo.Data;\npublic class InvoiceDbContext(DbContextOptions<InvoiceDbContext> options) : DbContext(options)\n{\n    public DbSet<Invoice> Invoices => Set<Invoice>();\n}\n```", "```cs\n\"ConnectionStrings\": {    \"DefaultConnection\": \"Server=(localdb)\\\\mssqllocaldb;Database=BasicEfCoreDemoDb;Trusted_Connection=True;MultipleActiveResultSets=true\"\n  }\n```", "```cs\nbuilder.Services.AddDbContext<InvoiceDbContext>(options =>    options.UseSqlServer(builder.Configuration.GetConnectionString(\"DefaultConnection\")));\n```", "```cs\ndotnet ef migrations add InitialDb\n```", "```cs\nprotected override void Up(MigrationBuilder migrationBuilder){\n    migrationBuilder.CreateTable(\n        name: \"Invoices\",\n        columns: table => new\n        {\n            Id = table.Column<Guid>(type: \"uniqueidentifier\", nullable: false),\n            InvoiceNumber = table.Column<string>(type: \"nvarchar(max)\", nullable: false),\n            ContactName = table.Column<string>(type: \"nvarchar(max)\", nullable: false),\n            Description = table.Column<string>(type: \"nvarchar(max)\", nullable: true),\n            Amount = table.Column<decimal>(type: \"decimal(18,2)\", nullable: false),\n            InvoiceDate = table.Column<DateTimeOffset>(type: \"datetimeoffset\", nullable: false),\n            DueDate = table.Column<DateTimeOffset>(type: \"datetimeoffset\", nullable: false),\n            Status = table.Column<int>(type: \"int\", nullable: false)\n        },\n        constraints: table =>\n        {\n            table.PrimaryKey(\"PK_Invoices\", x => x.Id);\n        });\n}\n// Omitted for brevity\n```", "```cs\ndotnet ef database update\n```", "```cs\nprotected override void OnModelCreating(ModelBuilder modelBuilder){\n    modelBuilder.Entity<Invoice>().HasData(\n        new Invoice\n        {\n            Id = Guid.NewGuid(),\n            InvoiceNumber = \"INV-001\",\n            ContactName = \"Iron Man\",\n            Description = \"Invoice for the first month\",\n            Amount = 100,\n            InvoiceDate = new DateTimeOffset(2023, 1, 1, 0, 0, 0, TimeSpan.Zero),\n            DueDate = new DateTimeOffset(2023, 1, 15, 0, 0, 0, TimeSpan.Zero),\n            Status = InvoiceStatus.AwaitPayment\n        },\n        // Omitted for brevity. You can check the full code in the sample project.\n}\n```", "```cs\ndotnet ef migrations add AddSeedDatadotnet ef database update\n```", "```cs\n# Install the tool if you have not installed it yet.#dotnet tool install -g dotnet-aspnet-codegenerator\ndotnet add package Microsoft.VisualStudio.Web.CodeGeneration.Design\ndotnet-aspnet-codegenerator controller -name InvoicesController -api -outDir Controllers ––model Invoice ––dataContext InvoiceDbContext -async -actions\n```", "```cs\nusing BasicEfCoreDemo.Data;using BasicEfCoreDemo.Models;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nnamespace BasicEfCoreDemo.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class InvoicesController : ControllerBase\n    {\n        private readonly InvoiceDbContext _context;\n        public InvoicesController(InvoiceDbContext context)\n        {\n            _context = context;\n        }\n        // GET: api/Invoices\n        [HttpGet]\n        public async Task<ActionResult<IEnumerable<Invoice>>> GetInvoices()\n        {\n            if (_context.Invoices == null)\n            {\n                return NotFound();\n            }\n            return await _context.Invoices.ToListAsync();\n        }\n        // GET: api/Invoices/5\n        [HttpGet(\"{id}\")]\n        public async Task<ActionResult<Invoice>> GetInvoice(Guid id)\n        {\n            if (_context.Invoices == null)\n            {\n                return NotFound();\n            }\n            var invoice = await _context.Invoices.FindAsync(id);\n            if (invoice == null)\n            {\n                return NotFound();\n            }\n            return invoice;\n        }\n        // PUT: api/Invoices/5\n        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754\n        [HttpPut(\"{id}\")]\n        public async Task<IActionResult> PutInvoice(Guid id, Invoice invoice)\n        {\n            if (id != invoice.Id)\n            {\n                return BadRequest();\n            }\n            _context.Entry(invoice).State = EntityState.Modified;\n            try\n            {\n                await _context.SaveChangesAsync();\n            }\n            catch (DbUpdateConcurrencyException)\n            {\n                if (!InvoiceExists(id))\n                {\n                    return NotFound();\n                }\n                else\n                {\n                    throw;\n                }\n            }\n            return NoContent();\n        }\n        // POST: api/Invoices\n        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754\n        [HttpPost]\n        public async Task<ActionResult<Invoice>> PostInvoice(Invoice invoice)\n        {\n            if (_context.Invoices == null)\n            {\n                return Problem(\"Entity set 'InvoiceDbContext.Invoices'  is null.\");\n            }\n            _context.Invoices.Add(invoice);\n            await _context.SaveChangesAsync();\n            return CreatedAtAction(\"GetInvoice\", new { id = invoice.Id }, invoice);\n        }\n        // DELETE: api/Invoices/5\n        [HttpDelete(\"{id}\")]\n        public async Task<IActionResult> DeleteInvoice(Guid id)\n        {\n            if (_context.Invoices == null)\n            {\n                return NotFound();\n            }\n            var invoice = await _context.Invoices.FindAsync(id);\n            if (invoice == null)\n            {\n                return NotFound();\n            }\n            _context.Invoices.Remove(invoice);\n            await _context.SaveChangesAsync();\n            return NoContent();\n        }\n        private bool InvoiceExists(Guid id)\n        {\n            return (_context.Invoices?.Any(e => e.Id == id)).GetValueOrDefault();\n        }\n    }\n}\n```", "```cs\ninfo: Microsoft.EntityFrameworkCore.Database.Command[20101]      Executed DbCommand (26ms) [Parameters=[], CommandType='Text', CommandTimeout='30']\n      SELECT [i].[Id], [i].[Amount], [i].[ContactName], [i].[Description], [i].[DueDate], [i].[InvoiceDate], [i].[InvoiceNumber], [i].[Status]\n      FROM [Invoices] AS [i]\n```", "```cs\nvar invoices = await _context.Invoices.ToListAsync();\n```", "```cs\nvar invoice = await _context.Invoices.FindAsync(id);\n```", "```cs\nExecuted DbCommand (15ms) [Parameters=[@__get_Item_0='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']      SELECT TOP(1) [i].[Id], [i].[Amount], [i].[ContactName], [i].[Description], [i].[DueDate], [i].[InvoiceDate], [i].[InvoiceNumber], [i].[Status]\n      FROM [Invoices] AS [i]\n      WHERE [i].[Id] = @__get_Item_0\n```", "```cs\nvar invoice = await _context.Invoices.SingleAsync(i => i.Id == id);\n```", "```cs\n[HttpGet]public async Task<ActionResult<IEnumerable<Invoice>>> GetInvoices(InvoiceStatus? status)\n{\n    // Omitted for brevity\n    return await _context.Invoices.Where(x => status == null || x.Status == status).ToListAsync();\n}\n```", "```cs\ninfo: Microsoft.EntityFrameworkCore.Database.Command[20101]      Executed DbCommand (44ms) [Parameters=[@__status_0='?' (Size = 16)], CommandType='Text', CommandTimeout='30']\n      SELECT [i].[Id], [i].[Amount], [i].[ContactName], [i].[Description], [i].[DueDate], [i].[InvoiceDate], [i].[InvoiceNumber], [i].[Status]\n      FROM [Invoices] AS [i]\n      WHERE [i].[Status] = @__status_0\n```", "```cs\n[HttpGet]public async Task<ActionResult<IEnumerable<Invoice>>> GetInvoices(int page = 1, int pageSize = 10, InvoiceStatus? status = null)\n{\n    // Omitted for brevity\n    return await _context.Invoices.AsQueryable().Where(x => status == null || x.Status == status)\n                .OrderByDescending(x => x.InvoiceDate)\n                .Skip((page - 1) * pageSize)\n                .Take(pageSize)\n                .ToListAsync();\n}\n```", "```cs\ninfo: Microsoft.EntityFrameworkCore.Database.Command[20101]      Executed DbCommand (40ms) [Parameters=[@__status_0='?' (Size = 16) (DbType = AnsiString), @__p_1='?' (DbType = Int32), @__p_2='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']\n      SELECT [i].[Id], [i].[Amount], [i].[ContactName], [i].[Description], [i].[DueDate], [i].[InvoiceDate], [i].[InvoiceNumber], [i].[Status]\n      FROM [Invoices] AS [i]\n      WHERE [i].[Status] = @__status_0\n      ORDER BY [i].[InvoiceDate] DESC\n      OFFSET @__p_1 ROWS FETCH NEXT @__p_2 ROWS ONLY\n```", "```cs\n[HttpPost]public async Task<ActionResult<Invoice>> PostInvoice(Invoice invoice)\n{\n    if (_context.Invoices == null)\n    {\n        return Problem(\"Entity set 'InvoiceDbContext.Invoices'  is null.\");\n    }\n    _context.Invoices.Add(invoice);\n    await _context.SaveChangesAsync();\n    return CreatedAtAction(\"GetInvoice\", new { id = invoice.Id }, invoice);\n```", "```cs\n info: Microsoft.EntityFrameworkCore.Database.Command[20101]      Executed DbCommand (3ms) [Parameters=[@p0='?' (DbType = Guid), @p1='?' (Precision = 18) (Scale = 2) (DbType = Decimal), @p2='?' (Size = 32), @p3='?' (Size = 256), @p4='?' (DbType = DateTimeOffset), @p5='?' (DbType = DateTimeOffset), @p6='?' (Size = 32) (DbType = AnsiString), @p7='?' (Size = 16) (DbType = AnsiString)], CommandType='Text', CommandTimeout='30']\n      SET IMPLICIT_TRANSACTIONS OFF;\n      SET NOCOUNT ON;\n      INSERT INTO [Invoices] ([Id], [Amount], [ContactName], [Description], [DueDate], [InvoiceDate], [InvoiceNumber], [Status])\n      VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7);\n```", "```cs\n[HttpPut(\"{id}\")]public async Task<IActionResult> PutInvoice(Guid id, Invoice invoice)\n{\n    if (id != invoice.Id)\n    {\n        return BadRequest();\n    }\n    _context.Entry(invoice).State = EntityState.Modified;\n    try\n    {\n        await _context.SaveChangesAsync();\n    }\n    catch (DbUpdateConcurrencyException)\n    {\n        if (!InvoiceExists(id))\n        {\n            return NotFound();\n        }\n        else\n        {\n            throw;\n        }\n    }\n    return NoContent();\n}\n```", "```cs\n//_context.Invoices.Add(invoice); This is equivalent to the following code_context.Entry(invoice).State = EntityState.Added;\nawait _context.SaveChangesAsync();\n```", "```cs\n{  \"id\": \"0d501380-83d9-44f4-9087-27c8f09082f9\",\n  \"invoiceNumber\": \"INV-001\",\n  \"contactName\": \"Spider Man\",\n  \"description\": \"Invoice for the first month\",\n  \"amount\": 100,\n  \"invoiceDate\": \"2023-01-01T00:00:00+00:00\",\n  \"dueDate\": \"2023-01-15T00:00:00+00:00\",\n  \"status\": 1\n}\n```", "```cs\ninfo: Microsoft.EntityFrameworkCore.Database.Command[20101]      Executed DbCommand (39ms) [Parameters=[@p7='?' (DbType = Guid), @p0='?' (Precision = 18) (Scale = 2) (DbType = Decimal), @p1='?' (Size = 32), @p2='?' (Size = 4000), @p3='?' (DbType = DateTimeOffset), @p4='?' (DbType = DateTimeOffset), @p5='?' (Size = 32) (DbType = AnsiString), @p6='?' (Size = 16) (DbType = AnsiString)], CommandType='Text', CommandTimeout='30']\n      SET IMPLICIT_TRANSACTIONS OFF;\n      SET NOCOUNT ON;\n      UPDATE [Invoices] SET [Amount] = @p0, [ContactName] = @p1, [Description] = @p2, [DueDate] = @p3, [InvoiceDate] = @p4, [InvoiceNumber] = @p5, [Status] = @p6\n      OUTPUT 1\n      WHERE [Id] = @p7;\n```", "```cs\nvar invoiceToUpdate = await _context.Invoices.FindAsync(id);if (invoiceToUpdate == null)\n{\n    return NotFound();\n}\ninvoiceToUpdate.Status = invoice.Status;\nawait _context.SaveChangesAsync();\n```", "```cs\ninfo: Microsoft.EntityFrameworkCore.Database.Command[20101]      Executed DbCommand (2ms) [Parameters=[@__get_Item_0='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']\n      SELECT TOP(1) [i].[Id], [i].[Amount], [i].[ContactName], [i].[Description], [i].[DueDate], [i].[InvoiceDate], [i].[InvoiceNumber], [i].[Status]\n      FROM [Invoices] AS [i]\n      WHERE [i].[Id] = @__get_Item_0\ninfo: Microsoft.EntityFrameworkCore.Database.Command[20101]\n      Executed DbCommand (2ms) [Parameters=[@p1='?' (DbType = Guid), @p0='?' (Size = 16) (DbType = AnsiString)], CommandType='Text', CommandTimeout='30']\n      SET IMPLICIT_TRANSACTIONS OFF;\n      SET NOCOUNT ON;\n      UPDATE [Invoices] SET [Status] = @p0\n      OUTPUT 1\n      WHERE [Id] = @p1;\n```", "```cs\n// Omitted for brevityvar invoiceToUpdate = await _context.Invoices.FindAsync(id);\nif (invoiceToUpdate == null)\n{\n    return NotFound();\n}\ninvoiceToUpdate.InvoiceNumber = invoice.InvoiceNumber;\ninvoiceToUpdate.ContactName = invoice.ContactName;\ninvoiceToUpdate.Description = invoice.Description;\ninvoiceToUpdate.Amount = invoice.Amount;\ninvoiceToUpdate.InvoiceDate = invoice.InvoiceDate;\ninvoiceToUpdate.DueDate = invoice.DueDate;\ninvoiceToUpdate.Status = invoice.Status;\nawait _context.SaveChangesAsync();\n// Omitted for brevity\n```", "```cs\ninfo: Microsoft.EntityFrameworkCore.Database.Command[20101]      Executed DbCommand (17ms) [Parameters=[@p2='?' (DbType = Guid), @p0='?' (Size = 256), @p1='?' (Size = 16) (DbType = AnsiString)], CommandType='Text', CommandTimeout='30']\n      SET IMPLICIT_TRANSACTIONS OFF;\n      SET NOCOUNT ON;\n      UPDATE [Invoices] SET [Description] = @p0, [Status] = @p1\n      OUTPUT 1\n      WHERE [Id] = @p2;\n```", "```cs\n// Update only the properties that have changed _context.Entry(invoiceToUpdate).CurrentValues.SetValues(invoice);\n```", "```cs\n[HttpDelete(\"{id}\")]public async Task<IActionResult> DeleteInvoice(Guid id)\n{\n    if (_context.Invoices == null)\n    {\n        return NotFound();\n    }\n    var invoice = await _context.Invoices.FindAsync(id);\n    if (invoice == null)\n    {\n        return NotFound();\n    }\n    _context.Invoices.Remove(invoice);\n    await _context.SaveChangesAsync();\n    return NoContent();\n}\n```", "```cs\n_context.Entry(invoice).State = EntityState.Deleted;\n```", "```cs\ninfo: Microsoft.EntityFrameworkCore.Database.Command[20101]      Executed DbCommand (2ms) [Parameters=[@__get_Item_0='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']\n      SELECT TOP(1) [i].[Id], [i].[Amount], [i].[ContactName], [i].[Description], [i].[DueDate], [i].[InvoiceDate], [i].[InvoiceNumber], [i].[Status]\n      FROM [Invoices] AS [i]\n      WHERE [i].[Id] = @__get_Item_0\ninfo: Microsoft.EntityFrameworkCore.Database.Command[20101]\n      Executed DbCommand (3ms) [Parameters=[@p0='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']\n      SET IMPLICIT_TRANSACTIONS OFF;\n      SET NOCOUNT ON;\n      DELETE FROM [Invoices]\n      OUTPUT 1\n      WHERE [Id] = @p0;\n```", "```cs\n// Omitted for brevityvar invoice = new Invoice { Id = id };\n_context.Invoices.Remove(invoice);\nawait _context.SaveChangesAsync();\n// Omitted for brevity\n```", "```cs\ninfo: Microsoft.EntityFrameworkCore.Database.Command[20101]      Executed DbCommand (2ms) [Parameters=[@p0='?' (DbType = Guid)], CommandType='Text', CommandTimeout='30']\n      SET IMPLICIT_TRANSACTIONS OFF;\n      SET NOCOUNT ON;\n      DELETE FROM [Invoices]\n      OUTPUT 1\n      WHERE [Id] = @p0;\n```", "```cs\nawait _context.Invoices.Where(x => x.Id == id).ExecuteDeleteAsync();\n```", "```cs\n[Table(\"Invoices\")]public class Invoice\n{\n    [Column(\"Id\")]\n    [Key]\n    public Guid Id { get; set; }\n    [Column(name: \"InvoiceNumber\", TypeName = \"varchar(32)\")]\n    [Required]\n    public string InvoiceNumber { get; set; } = string.Empty;\n    [Column(name: \"ContactName\")]\n    [Required]\n    [MaxLength(32)]\n    public string ContactName { get; set; } = string.Empty;\n    [Column(name: \"Description\")]\n    [MaxLength(256)]\n    public string? Description { get; set; }\n    [Column(\"Amount\")]\n    [Precision(18, 2)]\n    [Range(0, 9999999999999999.99)]\n    public decimal Amount { get; set; }\n    [Column(name: \"InvoiceDate\", TypeName = \"datetimeoffset\")]\n    public DateTimeOffset InvoiceDate { get; set; }\n    [Column(name: \"DueDate\", TypeName = \"datetimeoffset\")]\n    public DateTimeOffset DueDate { get; set; }\n    [Column(name: \"Status\", TypeName = \"varchar(16)\")]\n    public InvoiceStatus Status { get; set; }\n}\n```", "```cs\nprotected override void OnModelCreating(ModelBuilder modelBuilder){\n    // Seed data is omitted for brevity\n    modelBuilder.Entity<Invoice>(b =>\n    {\n        b.ToTable(\"Invoices\");\n        b.HasKey(i => i.Id);\n        b.Property(p => p.Id).HasColumnName(\"Id\");\n        b.Property(p => p.InvoiceNumber).HasColumnName(\"InvoiceNumber\").HasColumnType(\"varchar(32)\").IsRequired();\n        b.Property(p => p.ContactName).HasColumnName(\"ContactName\").HasMaxLength(32).IsRequired();\n        b.Property(p => p.Description).HasColumnName(\"Description\").HasMaxLength(256);\n        // b.Property(p => p.Amount).HasColumnName(\"Amount\").HasColumnType(\"decimal(18,2)\").IsRequired();\n        b.Property(p => p.Amount).HasColumnName(\"Amount\").HasPrecision(18, 2);\n        b.Property(p => p.InvoiceDate).HasColumnName(\"InvoiceDate\").HasColumnType(\"datetimeoffset\").IsRequired();\n        b.Property(p => p.DueDate).HasColumnName(\"DueDate\").HasColumnType(\"datetimeoffset\").IsRequired();\n        b.Property(p => p.Status).HasColumnName(\"Status\").HasMaxLength(16).HasConversion(\n                v => v.ToString(),\n                v => (InvoiceStatus)Enum.Parse(typeof(InvoiceStatus), v));\n    });\n}\n```", "```cs\npublic static class InvoiceModelCreatingExtensions{\n    public static void ConfigureInvoice(this ModelBuilder builder)\n    {\n        builder.Entity<Invoice>(b =>\n        {\n            b.ToTable(\"Invoices\");\n            // Other mapping configurations are omitted for brevity\n        });\n    }\n}\n// You can continue to create the mapping for other entities, or create separate files for each entity.\n```", "```cs\nmodelBuilder.ConfigureInvoice();// You can continue to call the extension methods for other entities. such as\n// modelBuilder.ConfigureInvoiceItem();\n```", "```cs\npublic class InvoiceConfiguration : IEntityTypeConfiguration<Invoice>{\n    public void Configure(EntityTypeBuilder<Invoice> builder)\n    {\n        builder.ToTable(\"Invoices\");\n        // Other mapping configurations are omitted for brevity\n    }\n}\n```", "```cs\n    modelBuilder.ApplyConfiguration(new InvoiceConfiguration());// You can continue to call the ApplyConfiguration method for other entities. such as// modelBuilder.ApplyConfiguration(new InvoiceItemConfiguration());\n    ```", "```cs\n    new InvoiceConfiguration().Configure(modelBuilder.Entity<Invoice>());// You can continue to call the Configure method for other entities. such as// new InvoiceItemConfiguration().Configure(modelBuilder.Entity<InvoiceItem>());\n    ```", "```cs\nmodelBuilder.ApplyConfigurationsFromAssembly(typeof(InvoiceDbContext).Assembly);\n```", "```cs\nmigrationBuilder.AlterColumn<string>(    name: \"Status\",\n    table: \"Invoices\",\n    type: \"varchar(16)\",\n    nullable: false,\n    oldClrType: typeof(int),\n    oldType: \"int\");\nmigrationBuilder.AlterColumn<string>(\n    name: \"InvoiceNumber\",\n    table: \"Invoices\",\n    type: \"varchar(32)\",\n    nullable: false,\n    oldClrType: typeof(string),\n    oldType: \"nvarchar(max)\");\n```"]