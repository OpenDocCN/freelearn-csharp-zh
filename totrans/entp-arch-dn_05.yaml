- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: A Utopic Perfect IT System
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个乌托邦式的完美IT系统
- en: Remember the joke in [*Chapter 4*](B21293_04.xhtml#_idTextAnchor121) about the
    perfect information system being formed by a computer, a human, and a dog? There
    was some truth in this because humans change all the time (their minds, their
    way of doing, the rules they follow in business, what they want to buy, and so
    on), while computers are happy with repeating, stable, well-defined tasks. Of
    course, the two do not mix well, hence the presence of the dog to prevent the
    human from making a mess of the computer work.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 记得在[*第4章*](B21293_04.xhtml#_idTextAnchor121)中关于由计算机、人类和狗组成的完美信息系统笑话吗？其中有些真理，因为人类一直在变化（他们的思想、他们的做事方式、他们在商业中遵循的规则、他们想购买的东西等等），而计算机则乐于重复、稳定、定义明确的任务。当然，这两者并不兼容，因此需要狗来防止人类把计算机工作搞得一团糟。
- en: But who created the computer first? Human, of course. So, the joke was not about
    the fact that humans should not touch computers at all, but rather create them
    and then let them do the work without changing anything afterward. Of course,
    this would only be possible if the first attempt was, through some kind of a miracle,
    perfect.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 但谁首先创造了计算机？当然是人类。所以，这个笑话并不是说人类应该完全不接触计算机，而是创造它们，然后让它们在不做任何改变的情况下完成工作。当然，这只有在第一次尝试通过某种奇迹变得完美的情况下才可能实现。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: The concept of an ideal system
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理想系统的概念
- en: Data management in the ideal system
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理想系统中的数据管理
- en: Rules management in the ideal system
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理想系统中的规则管理
- en: Processes management in the ideal system
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理想系统中的流程管理
- en: How close can we get to this utopic system?
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们能接近这个乌托邦式系统有多近？
- en: This chapter will describe what would resemble this 100% ideal information system,
    with an ability to adapt to the ever-changing business changes and still perform
    in terms of speed and robustness, as well as energy efficiency. Such a system
    was imagined by Dominique Vauquier in his fundamental book *Le système d’information
    durable - la refonte du SI avec SOA*. The three main entities constituting the
    ideal information system are **master data management** (**MDM**), **business
    rules management system** (**BRMS**), and **business process modeling** (we are
    going to explain these in more detail shortly). The next few sections will explain
    them one by one, and this chapter will end with an analysis of how this utopic
    system could be created in reality and what would prevent this.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将描述一个类似于100%理想信息系统的东西，它能够适应不断变化的商业变化，同时在速度、鲁棒性和能源效率方面仍然表现出色。这样的系统是由多米尼克·沃基耶在他的基础书籍《可持续信息系统
    - 使用SOA重铸SI》中想象的。构成理想信息系统的三个主要实体是**主数据管理**（**MDM**）、**业务规则管理系统**（**BRMS**）和**业务流程建模**（我们将在稍后详细解释）。接下来的几节将逐一解释它们，本章将以分析如何在现实中创建这个乌托邦式系统以及什么会阻止它为结尾。
- en: The concept of an ideal IT system
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理想IT系统的概念
- en: Before we detail the different parts of such an ideal system, I will explain
    a bit more about the usefulness of such a model. When things are a bit clearer
    about the goal we want to reach, we will detail the different parts of the concept
    and try to make them more concrete.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们详细说明这样一个理想系统的不同部分之前，我将进一步解释这样一个模型的有用性。当我们对想要达到的目标有了更清晰的认识时，我们将详细说明概念的不同部分，并尝试使它们更加具体。
- en: The use for an ideal structure
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理想结构的用途
- en: '“Ideal” or “utopic” are terms that engineers generally have a strange relationship
    with. Though much of their thinking is done inside hypothetical contexts to make
    an advance in theory, they know that practice will always be quite a long shot
    from the theory and, depending on how they are versed between theory and practice,
    engineers can easily fall into many traps:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: “理想”或“乌托邦”是工程师们通常有一种奇怪关系的术语。尽管他们的大部分思考都是在假设的情境中进行的，以在理论上取得进步，但他们知道实践总是与理论有很大距离，并且根据他们在理论与实践之间的掌握程度，工程师们很容易陷入许多陷阱：
- en: Staying purely in theory risks that their thinking is never applied in the real
    world, which ends up in a loss of time and also an impossibility of truly knowing
    the value of their work.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅停留在理论层面可能会让他们的思考从未应用于现实世界，最终导致时间的浪费以及无法真正了解他们工作的价值。
- en: Not having enough theoretical background to make advances in their field; remaining
    purely in the practice of the job might help refine some areas but seldom bring
    strong, domain-changing, revolutionary ideas.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺乏足够的理论基础来在他们的领域取得进步；仅仅停留在工作的实践中可能会帮助完善某些领域，但很少带来强大、改变领域的革命性想法。
- en: 'The worst of all: switching between the two but never making real links between
    them that enrich the practice from the theory and confirm the theory from the
    practice. This capacity of bringing the two together is, in my opinion, what makes
    the best engineering structures, may they be companies or even countries that
    teach and organize this capacity at the highest level.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最糟糕的是：在两者之间切换，但从未真正建立连接，使实践从理论中受益并从实践中证实理论。这种将两者结合在一起的能力，在我看来，是构成最佳工程结构的关键，无论是公司还是甚至国家，只要它们在最高水平上教授和组织这种能力。
- en: This is why there is a place in such a book, otherwise extremely turned toward
    practices with lots of returns on experience from many real-world information
    systems, for a bit of theory and ideal thinking.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 正因如此，在这本书中有一个位置，否则它非常偏向于实践，并从许多现实世界的信息系统中获得了丰富的经验回报，但也有一些理论和理想化的思考。
- en: The origin of the design
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计的起源
- en: The structure of an ideal system, as we are going to describe here, was first
    coined in a *Le système d’information durable - la refonte du SI avec SOA*, by
    Dominique Vauquier, one of the best-known enterprise architects in France, and
    proponent of the PRAXEME method. I was lucky enough to receive training more than
    10 years ago and its explanations were so clear that I immediately bought his
    books, which quickly became some of my references for my consulting work in information
    system industrialization.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要描述的理想系统的结构，最初是在多米尼克·沃基耶的《可持续信息系统 - 使用SOA重整信息系统》中提出的，他是法国最著名的架构师之一，也是PRAXEME方法的倡导者。我有幸在10多年前接受了培训，其解释非常清晰，我立即购买了他的书籍，这些书籍很快成为我在信息系统工业化咨询工作中的参考之一。
- en: 'The principles behind this idea were that, knowing lots of information systems,
    it was possible to describe a kind of meta-system that would encompass all the
    necessary features with only a few generic modules that could be customized to
    implement the business-related aspects. Each of these three modules would be extremely
    general and not related at all to any particular business, which explains why
    there is so little in the whole system. These three areas are as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这个想法背后的原则是，了解许多信息系统，可以描述一种元系统，它将包含所有必要的功能，只需几个通用的模块，这些模块可以定制以实现与业务相关的方面。这三个模块中的每一个都将非常通用，与任何特定的业务都没有关系，这也解释了为什么整个系统中内容如此之少。这三个领域如下：
- en: Storing data and making it available (roughly speaking, this is what gets done
    by databases)
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储数据并使其可用（简而言之，这正是数据库所做的事情）
- en: Executing business rules to make decisions (this would be where software applications
    consuming the data come into the game)
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行业务规则以做出决策（这将涉及使用数据的软件应用程序）
- en: Implementing complex processes by orchestrating many small tasks (though very
    approximative, this is what making applications work together is about)
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过协调许多小任务来实现复杂过程（尽管非常近似，但这正是使应用程序协同工作的关键）
- en: Dominique Vauquier was indeed able to point to any business feature as a composition
    of these three different technical functions. After working with many industrial
    information systems in small and large companies, he considered that the three
    modules together would be able to handle every imaginable feature of any given
    business domain. Though this is not a structure that has been largely used for
    now, it may be just a very anticipated glimpse at what would become industrialized
    and well-controlled information systems a few decades from now. At least, this
    is – from my humble point of view – the best candidate for such a structure with
    so much ahead-thinking.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 多米尼克·沃基耶确实能够将任何业务功能指认为这些三个不同技术功能的组合。在与许多小型和大型公司的工业信息系统合作后，他认为这三个模块结合起来将能够处理任何给定业务领域的所有可想象的特征。尽管现在这种结构还没有被广泛使用，但它可能只是对未来几十年将要工业化和良好控制的工业信息系统的一个非常期待的预览。至少，从我的谦逊观点来看，这是这样一个具有前瞻性结构的最佳候选人。
- en: Using a vision to define a target
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用愿景来定义目标
- en: Why should we talk about an architecture that is so futuristic and that we do
    not have any proof of its capability to be applied in practice? Can this lead
    to overthinking or over-engineering? If you ask yourself these questions, you
    are very right to do so, and this chapter is not about pushing you to use this
    tool for your next information system architecture.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为什么要讨论这样一个如此未来派且我们没有任何证据证明其能够在实践中应用的架构呢？这会不会导致过度思考或过度设计？如果你自己问自己这些问题，你完全有理由这样做，而且这一章节并不是要推动你为你的下一个信息系统架构使用这个工具。
- en: Just like any pattern or architecture tool, it is principally there to give
    you some ideas and, if some parts of it are fit for your system, it will be great
    that it helps you go forward and accelerate your thinking.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 就像任何模式或架构工具一样，它主要存在是为了给你一些想法，如果其中的一些部分适合你的系统，那么它帮助你前进并加速思考将会是非常好的。
- en: But having an “ideal” or “utopic” vision can also be helpful to give a global
    orientation to your realization. Remember the metaphor of Agile development, where
    we do not shoot an arrow but walk with it toward the target and plant the arrow
    with our hands when the target is reached? Well, to do so, we agreed that we need
    to know what the target is like to find and reach it. And sometimes, the target
    shape can be hard to imagine. Sure, a business-oriented mind will give you the
    best idea and you should remain functionally-focused. But what happens if the
    business ideas are quite blurry? Maybe a “soft,” adaptable information system
    would allow you to start working while things get a little clearer. Starting building
    the system will even help the business owners think better about what they want.
    And if you have an “ideal” system that can very quickly adapt to their minds constructing
    the business idea, it may be the kind of system you need for such a project.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，拥有一个“理想”或“乌托邦”的愿景也可以帮助你给你的实现提供一个全局的导向。记住敏捷开发的隐喻，我们不是射箭，而是带着箭走向目标，当达到目标时用手将箭射出？好吧，为了做到这一点，我们同意我们需要知道目标是什么样的，以便找到并达到它。有时候，目标形状可能很难想象。当然，一个以业务为导向的思维方式会给你最好的想法，你应该保持功能性的关注。但如果业务想法相当模糊呢？也许一个“柔软”的、可适应的信息系统会允许你在事情变得稍微清晰一些的时候开始工作。开始构建系统甚至可以帮助企业主更好地思考他们想要什么。而且如果你有一个可以非常快速适应他们构建业务想法的理想系统，那么这可能就是你需要的项目类型。
- en: Of course, there will be an extra cost of being completely generic (in performance
    but also time for initial setup), but if this is the kind of situation you are
    in, the capacity to adapt to a moving business target by simply customizing parameters
    of the information system may largely overcome these drawbacks. And nothing prevents
    you, once the business vision is settled, from re-implementing some now-stable
    parts with specific, optimized bits of code, where needed.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，完全通用的成本（在性能上，以及初始设置的时间上）将会更高，但如果你的情况是这样的，通过简单地定制信息系统的参数来适应不断变化的企业目标的能力可能会在很大程度上克服这些缺点。而且一旦企业愿景确定，就没有什么可以阻止你重新实现一些现在稳定的部分，用特定的、优化的代码来替换，如果需要的话。
- en: Now that the vision is clear, we are going to dive deeper into the three parts
    that constitute this ideal IT system, namely the data management module, the rules
    management module, and, finally, the process management module.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 既然愿景已经清晰，我们将深入探讨构成这个理想IT系统的三个部分，即数据管理模块、规则管理模块，以及最后的流程管理模块。
- en: Data management in the ideal system
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理想系统中的数据管理
- en: '**MDM** is the very first part of the ideal system. Before talking about how
    the data is processed and used, it is logical to explain what form the data will
    take and how it will be managed. This is why we will explain the concept of MDM
    in a utopic system before discussing BRMS and BPM.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**MDM** 是理想系统的第一部分。在讨论数据是如何处理和使用的之前，解释数据将采取什么形式以及如何管理它是合乎逻辑的。这就是为什么我们将在讨论BRMS和BPM之前解释一个乌托邦系统中的MDM概念。'
- en: Data is the blood of information systems
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据是信息系统的血液
- en: Data is the most important component of any information system. Some people
    may even think they are purely about data since the very term “data” has been
    so hyped in the past decade.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 数据是任何信息系统中最重要的组成部分。有些人甚至可能认为它们完全是关于数据的，因为“数据”这个术语在过去十年中被炒作得如此之高。
- en: Admittedly, it is hard to imagine an information system without at least one
    database to store the data, since it would mean there is no knowledge of any business
    event that stays there. It is possible to imagine some pieces of information that
    are completely transient and not stored, but a whole system made of such particular
    cases sounds impossible to fathom.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然很难想象一个没有至少一个数据库来存储数据的信息系统，因为这意味着没有任何关于任何商业事件的知识留存。可以想象一些完全短暂且未存储的信息片段，但由这些特定案例组成的整个系统听起来几乎无法理解。
- en: This means that data should be taken care of first and foremost, and this is
    what the first module of the ideal generic information system is about. The feature
    is called MDM. The term *master*, in this case, refers to the most important data
    in a system, those used by most of the participants in the system. But in this
    particular case of a utopic system, every single piece of data would be considered
    as such and placed in a single module that deals with this responsibility of “MDM.”
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着数据应该首先得到关注，这正是理想通用信息系统第一个模块的主题。这个特性被称为MDM。在这个情况下，“主”一词指的是系统中最重要的数据，那些被系统中的大多数参与者使用的数据。但在这种乌托邦式的系统特定情况下，每一份数据都会被视为如此，并放置在一个单独的模块中，该模块负责“MDM”这一职责。
- en: Data as the 21st-century oil – really?
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据作为21世纪的石油——真的吗？
- en: 'Before we dive a bit more into what would be such a module, a small additional
    note on the importance of data: you may heard the expression “oil of the 21st
    century” regarding data. This is to stress the point that data has become such
    an important part of commercial organizations nowadays that it can be compared
    to oil, which has brought a huge part of the industry improvements in the 20th
    century.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们更深入探讨这样一个模块可能是什么样子之前，关于数据的重要性有一个小的补充说明：你可能听说过关于数据的“21世纪石油”这个表达。这是为了强调数据已经成为商业组织如此重要的一部分，它可以与20世纪带来巨大工业进步的石油相提并论。
- en: Data is used by many industrial companies to follow their machines, optimize
    production, and relate it to selling and stocks, in short virtualizing the industrial
    process in a “digital twin” to better control it. But for some industries, data
    may even be the raw material itself, and lots of digital-native companies nowadays
    make their money purely out of data collection, refining, and reselling, particularly
    for advertisement activities.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 许多工业公司使用数据来跟踪他们的机器，优化生产，并将其与销售和股票联系起来，简而言之，通过“数字孪生”虚拟化工业流程以更好地控制它。但对于某些行业来说，数据甚至可能是原材料本身，如今许多数字原生公司纯粹通过数据收集、精炼和转售来赚钱，尤其是针对广告活动。
- en: Oil exploitation, which has happened since the 20th century, has allowed industrial
    production to be accelerated dramatically in almost every domain (heavy industries,
    trains, fertilizers, agriculture machinery, and so on) but also brought to life
    many of the biggest companies to exploit and produce oil itself. This comparison
    is fair, although care should be taken in keeping a few important differences
    in mind.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 石油开采，自20世纪以来就已经发生，极大地加速了几乎所有领域的工业生产（重工业、铁路、化肥、农业机械等），同时也催生了众多公司自身进行石油的勘探和生产。这种比较是公平的，尽管在保持一些重要差异的同时需要谨慎。
- en: 'First, the equivalent of the oil-cracking refinery column has not been invented
    yet for data, or at least not in its standard form. Sure, some business intelligence
    tools and big data approaches can help in some cases, but the rate of failure
    of data projects (estimated between 70 and 80%, depending on the studies) shows
    that we are still far from industrialization in oil-refinery plants. To this day,
    data remains partly, for most companies, such as oil, was for land owners at the
    end of the 19th century: pollution. Sure, there is value in it, but it is completely
    out of exploitation, and there is no standard way of extracting this value.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，数据的类似物——石油裂化精炼塔——尚未发明，或者至少尚未以标准形式出现。当然，一些商业智能工具和大数据方法在某些情况下可以提供帮助，但数据项目失败率（据估计在70%到80%之间，取决于研究）表明，我们距离石油精炼厂的工业化还有很长的路要走。到目前为止，数据对于大多数公司来说仍然部分地处于未开发状态，就像19世纪末土地所有者对土地的态度一样：污染。当然，数据中存在价值，但它完全未被开发，且没有标准的方法来提取这种价值。
- en: 'Let’s also not forget that data remains based on actual oil: data centers consume
    a huge amount of energy (soon, 8% of the energy on the planet will be taken for
    digital uses, which is more than air travel and will soon reach car transportation).
    And though some data center owners pretend to use renewable energies (but just
    buy compensating activities, which does not reduce global oil consumption), most
    of them are still heavily dependent on oil for energy. In addition, the production
    of servers and network hardware, the transportation used for them, and the exploitation
    functions are large consumers of energy and, eventually, oil.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也不要忘记，数据仍然基于实际的石油：数据中心消耗了大量的能源（很快，地球上8%的能源将被用于数字用途，这超过了航空旅行，并将很快达到汽车运输）。尽管一些数据中心所有者假装使用可再生能源（但只是购买补偿活动，这并不会减少全球石油消耗），但大多数数据中心仍然严重依赖石油作为能源。此外，服务器的生产、网络硬件的使用以及它们的运营功能都是能源的大消费者，最终也是石油的大消费者。
- en: Therefore, it is very important to keep in mind that data may indeed become
    the oil of the next century, but we are in this situation at the moment. The data
    management approach described in this chapter may help you reach it, particularly
    by using governance to improve data quality, which remains the number-one cause
    hindering data exploitation.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们必须牢记，数据确实可能成为下一个世纪的石油，但我们目前正处于这种状况。本章中描述的数据管理方法可以帮助你达到这一目标，特别是通过使用治理来提高数据质量，这仍然是阻碍数据利用的首要原因。
- en: A really “know it all” system
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个真正的“无所不知”的系统
- en: I will not go into too much detail in this chapter since MDM is the subject
    of a dedicated chapter later in this book, and it will be explained together with
    a real example, which will hopefully make everything easier. For now, I will just
    propose a comparison of the MDM with a “know-it-all all” system. Indeed, a well-made
    MDM will not only know the state of entities at present but will know the whole
    story of each entity and remember their different states and modifications, from
    cradle (creation) to grave (archiving or deletion). Due to this, **persistence**
    is the main responsibility of an MDM module.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会在本章中过多地详细阐述，因为MDM将在本书后面的专门章节中讨论，并且将结合一个真实案例进行解释，这有望使一切变得更容易。现在，我只会提出将MDM与“无所不知”的系统进行比较。确实，一个制作精良的MDM不仅会知道实体当前的状态，还会知道每个实体的整个故事，并记住它们的不同状态和修改，从摇篮（创建）到坟墓（存档或删除）。正因为如此，**持久性**是MDM模块的主要责任。
- en: 'However, there are some other responsibilities:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，还有一些其他的责任：
- en: '**Ease of research**: This goes with persistence because keeping data without
    making it available afterward would not make much sense. This particular responsibility
    might be delegated in its implementation, typically when the MDM application uses
    an indexation engine, for example (full-text search is a complicated matter that
    justifies cutting a responsibility into several more atomic ones and trusting
    dedicated modules with each).'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**研究的便捷性**：这与坚持一致，因为如果不提供数据，那么保留数据就没有太多意义。这个特定的责任可能在其实施过程中被委托出去，通常当MDM应用程序使用索引引擎时（全文搜索是一个复杂的问题，它证明了将责任分解成几个更原子的责任并委托给专门的模块是合理的）。'
- en: '**Origin of reporting /business intelligence**: Just like data search, reporting
    is an important responsibility that MDM modules can trust other implementations
    with, for example, a data lake.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**报告/商业智能的来源**：就像数据搜索一样，报告是MDM模块可以委托给其他实现的重要责任，例如数据湖。'
- en: '**Ability to handle multiple versions of entities**: As explained previously,
    a true MDM should know **every** version of a data entity, not only its “latest”
    state (the quotes are there to stress the point that this “latest” concept is
    something of a pain in lots of systems, particularly when they are distributed,
    because it depends on the consistency of data, and thus transactions, optimistic/pessimistic
    locks, and so on).'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**处理实体多个版本的能力**：正如之前所解释的，一个真正的MDM应该知道数据实体的**每一个**版本，而不仅仅是它的“最新”状态（引号用来强调这个“最新”概念在许多系统中都是一个痛点，尤其是在分布式系统中，因为它依赖于数据的一致性，以及因此事务、乐观/悲观锁等等）。'
- en: '**Capacity to manage validation for attribute values**: Though this might be
    a shared responsibility with the BRMS, which we will discuss later in this chapter,
    a small amount of validation can be done by the MDM itself to ensure its basic
    consistency. This should not be confused with data correctness, which depends
    on its purpose (a single piece of data can be fit for business use but not for
    another one) and can vary well in time, depending on the data versions but also
    the changes of business rules.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理属性值验证的能力**：尽管这可能与BRMS共享责任，我们将在本章后面讨论BRMS，但MDM本身可以执行少量验证以确保其基本一致性。这不应与数据正确性混淆，数据正确性取决于其目的（单一数据可以适用于商业用途但不适用于另一个用途），并且可以根据数据版本以及业务规则的变化而很好地变化。'
- en: '**Business rules**: Some entry-level business rules, which only use data that
    is present inside the MDM system, can also be added to the MDM, though most of
    them are concerned with validation, as stated previously.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**业务规则**：一些入门级业务规则，仅使用MDM系统内部的数据，也可以添加到MDM中，尽管如前所述，它们大多数都与验证有关。'
- en: '**Handling of history**: Alongside storing successive versions of data, the
    MDM has to be able to make it possible to easily retrieve these versions depending
    on the time targeted, browse through the history, find who has made which type
    of change on the data, and more.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**历史处理**：除了存储数据的连续版本外，MDM还必须能够根据目标时间轻松检索这些版本，浏览历史记录，找出谁对数据进行了哪种类型的更改，等等。'
- en: If this doesn’t seem clear, don’t worry – the example provided later in this
    book of an MDM storing a person’s data will help you understand how all these
    responsibilities are used and implemented.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这还不清楚，请不要担心——本书后面提供的关于一个MDM存储个人数据的例子将帮助您理解所有这些责任是如何被使用和实施的。
- en: Relationship with CQRS
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与CQRS的关系
- en: If you are into data architecture, the separation of concerns between storing
    versioned modifications of the data and searching the different states of it might
    have been identified by you as the principle of **command and query responsibility
    segregation** (**CQRS**). We are indeed talking about the same principles, even
    if CQRS goes way further than just separating the two responsibilities and proposes
    a technical approach on how to make them work together.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对数据架构感兴趣，你可能已经将存储数据版本化修改和搜索其不同状态之间的关注点分离识别为**命令和查询责任分离**（**CQRS**）的原则。我们确实在谈论相同的原则，即使CQRS远远超出了仅仅分离这两个责任，并提出了如何使它们一起工作的技术方法。
- en: CQRS is too big of a subject for it to be treated in this book together with
    all the other subjects we have to explain, but it perfectly fits the separation
    of responsibilities of an MDM module, and I strongly encourage you to use this
    approach when creating MDM implementations. The example we’ll cover in the next
    few parts of this book will use a CQRS approach, though in a very limited and
    simplified implementation. Again, this is an edition choice as adding a full Kafka
    engine would have made it difficult to concentrate on the application itself and
    would get us too far from the subject of this book.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: CQRS是一个太大的主题，无法在本书中与其他所有主题一起处理，但它非常适合MDM模块的责任分离，我强烈建议你在创建MDM实现时使用这种方法。本书接下来几部分将要涵盖的例子将使用CQRS方法，尽管这是一个非常有限和简化的实现。再次强调，这是一个版本选择，因为添加完整的Kafka引擎会使我们难以专注于应用程序本身，并且会使我们远离本书的主题。
- en: The need for data quality
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据质量的需求
- en: Coming back to the oil metaphor, having sand in it is a real problem because
    oil has to be purified enough to enter the plant. Otherwise, not only the quality
    of the output products would not be as good, but this could also damage this extremely
    expensive piece of industrial equipment that the refinery column is in. This is
    why sweet crude oil is one of the best types of oil, and also the reason why gas
    coming from bituminous sands is so costly to refine (in addition to a catastrophe
    for our environment).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 回到石油的比喻，里面含有沙子是一个真正的问题，因为石油必须被足够净化才能进入工厂。否则，不仅输出产品的质量不会很好，而且这还可能损坏这个极其昂贵的工业设备，即精炼塔。这就是为什么轻质原油是最好类型的石油之一，也是为什么来自沥青砂的天然气之所以如此昂贵进行精炼（除了对我们环境的灾难性影响）的原因。
- en: 'In IT, there is a strong equivalence to data as clean data is a great product
    that will allow precise reporting on the business activity, quick insights on
    problems that may appear, and overall better control of the company. Discuss this
    with anybody in the industry and everyone will agree that the quality of data
    is of paramount importance… Yet, it is estimated that more than half of the job
    of a data scientist is to clean data. I have seen several companies where this
    proportion dangerously increases to around 80%. I say “dangerously” for many reasons:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在信息技术领域，数据与清洁数据之间有着强烈的等价性，因为清洁的数据是一个伟大的产品，它将允许对商业活动进行精确的报告，对可能出现的问题进行快速洞察，并总体上更好地控制公司。与行业内任何人讨论这个问题，每个人都会同意数据质量的重要性……然而，据估计，数据科学家的工作中超过一半的时间是用来清理数据的。我见过一些公司，这个比例危险地增加到了大约80%。我说“危险”，有多个原因：
- en: First, paying a high-salary profile to realize such low-intelligence tasks is
    a waste of money
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，为这样的低智商任务支付高薪是一种金钱的浪费
- en: It is also generally a waste of time as good data scientists will generally
    leave the job in the next 6 months if they have to work more on cleaning and assembling
    the data than “making it talk”
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这通常也是一种浪费时间的行为，因为优秀的数据科学家通常会在接下来的6个月内离开工作，如果他们不得不花更多的时间在清理和组装数据上而不是“让它说话”
- en: Finally, it shows a problem up the pipe because the IT system that sends this
    dirty data has not been correctly designed, which means that there are good chances
    that these reporting issues are not the only ones
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，它揭示了管道中的问题，因为发送这些脏数据的IT系统设计不正确，这意味着这些报告问题可能不是唯一的
- en: 'How come everybody agrees that data cleanliness is important but the situation
    remains so awful? Well, it just so happens that data management is generally not
    about the technical part (which is quite easy, with the number of tools we have
    nowadays) but about the organizational part: who is responsible for which data?
    Who has the right to collect it and update it? Which group decides on how data
    is cut and which data goes into this or this service responsibility? All these
    subjects are a part of what is called **data governance**, which, despite its
    huge importance, is mostly not dealt with by many companies, though they have
    all the technical tools to store data. Again, this is the same root cause as usual:
    technology has never solved an organizational problem, but editors are so good
    at making you believe this… and, as a company owner, you want so much for it to
    be true! But no, you will have to do the uninteresting job of data classification,
    finding data owners and data stewards, implementing regular meetings to follow
    up on the decided data processes, and more. Creating your MDM module now is precisely
    the right time to do so as its success heavily depends on these actions.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么每个人都同意数据清洁的重要性，但情况仍然如此糟糕？好吧，恰好数据管理通常不是关于技术部分（这相当简单，因为我们现在有这么多工具）而是关于组织部分：谁负责哪些数据？谁有权利收集和更新它？哪个团队决定如何切割数据以及哪些数据进入这个或那个服务责任？所有这些问题都是所谓的数据治理的一部分，尽管它非常重要，但许多公司并没有处理这个问题，尽管他们拥有所有存储数据的工具。再次，这是与往常一样的根本原因：技术从未解决过组织问题，但编辑们非常擅长让你相信这一点……而且，作为一个公司老板，你非常希望它是真的！但是，不，你将不得不做一些不有趣的工作，比如数据分类，找到数据所有者和数据管理员，实施定期的会议来跟进决定的数据流程，等等。现在创建你的MDM模块正是做这件事的正确时机，因为它的成功很大程度上取决于这些行动。
- en: Designing a generic “referential”
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计一个通用的“参考”
- en: There will almost always be an internal designation of the software application
    that stores the main entities of an organization, for example, products. Most
    of the time, people will call this by the name of the technology – for example,
    the “products database” or the “products Excel file” – but this is a bad habit
    as it couples the functional concept with a technical, software, concept. Not
    only can these two evolve separately (and the “products file” becomes the “products
    database”) but they should be able to do so as much as possible, and thus be kept
    separate.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎总是会有一个内部标识符来指代存储组织主要实体的软件应用程序，例如产品。大多数时候，人们会根据技术名称来称呼它——例如，“产品数据库”或“产品Excel文件”——但这是一种坏习惯，因为它将功能概念与技术、软件概念耦合在一起。这不仅可能分别发展（“产品文件”变成了“产品数据库”），而且它们应该尽可能多地这样做，因此应该保持分离。
- en: The “products list” is already a bit better from this point of view, but my
    favorite (because it is very close to an equivalent word in French, which is my
    native language) is to call this a product “referential.” This name bears the
    important notion of it assuming a status of reference for the data contained within
    while being also possible to see it as a referential in space, which comes back
    to the idea of a map of the information system, just like we would have a geographical
    map, with coordinates inside a referential.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个角度来看，“产品列表”已经有所改进，但我的最爱（因为它与我母语法语中的一个等效词非常接近）是将其称为“产品参照物”。这个名字承载着这样一个重要概念：它假定数据内部具有参考地位，同时也可以将其视为空间中的参照物，这回到了信息系统地图的概念，就像我们会有一个地理地图，其中包含参照物内的坐标。
- en: Important note
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The naming could be much worse, as I already cited anecdotally in [*Chapter
    3*](B21293_03.xhtml#_idTextAnchor069), with one of my customers calling the article’s
    referential simply “Serge’s file.” This led to a lot of confusion as it was hiding
    the uttermost importance of keeping this file up-to-date, which was not even Serge’s
    job officially!
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 命名可能会更糟糕，正如我在[*第三章*](B21293_03.xhtml#_idTextAnchor069)中提到的轶事，我的一个客户将文章的参照物简单地称为“Serge的文件”。这导致了很多混淆，因为它隐藏了保持此文件最新状态的极端重要性，而这甚至不是Serge的正式工作！
- en: Most of the time, so-called “referentials” are dedicated to a single type of
    entity (products, sales, customers, and so on) The idea of the utopic system described
    in this chapter is to have a single piece of software for any type of entity.
    We won’t dive too deep into the utopia in the rest of this book and will maintain
    a more standard approach with one implementation of referential for a given business
    domain. This also allows us to adopt the best technology for each case (the “best
    of bread” approach), rather than a “one size fits all” approach, which is interesting
    in theory but extremely complex to make work in the real world.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，所谓的“参照物”都是针对单一类型的实体（产品、销售、客户等）。本章所描述的理想化系统的想法是，对于任何类型的实体都使用单一款软件。在本书的其余部分，我们不会深入探讨这个理想化系统，而将保持一种更标准的方法，即针对特定的业务领域实现一个参照物。这也使我们能够为每种情况采用最佳技术（“最好的面包”方法），而不是“一刀切”的方法，尽管在理论上很有趣，但在现实世界中却极其复杂。
- en: Choices of implementation for an MDM
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MDM的实施选择
- en: Love it or hate it, Excel remains the simplest MDM you can have, and in many
    small companies, a well-organized process using Excel can already go a long way,
    provided you have removed the most important shortcomings of a good organization
    (a centralized file shared with rights for different users rather than copies
    everywhere, strict organization of data quality, and so on).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 无论喜欢与否，Excel仍然是你可以拥有的最简单的MDM（主数据管理），在许多小型公司中，使用Excel进行良好的组织流程已经可以走得很远，前提是你已经消除了良好组织的重要缺陷（例如，一个集中式文件，不同用户有权限而不是到处都是副本，严格的数据质量组织等）。
- en: Of course, there will be a level of complexity that will necessitate a dedicated
    implementation. That sounds crazy, but there are very few software applications
    dedicated to MDM. There is an offer from Microsoft based on SQL Server called
    Master Data Services, but its use sounds very limited, at least in my area of
    knowledge. Following a discussion with Microsoft, the product is indeed abandoned,
    and the successor is a partner product called **Profisee** working together with
    **Microsoft Purview** to provide data governance functions ([https://learn.microsoft.com/en-us/azure/architecture/reference-architectures/data/profisee-master-data-management-purview](https://learn.microsoft.com/en-us/azure/architecture/reference-architectures/data/profisee-master-data-management-purview)).
    Semarchy ([https://www.semarchy.com](https://www.semarchy.com)) sounds like a
    new and interesting approach to integrated MDM but I have not given it a sufficient
    try to recommend it yet.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，将需要一定程度的复杂性，这将导致专门的实现。这听起来很疯狂，但针对MDM的软件应用非常少。微软基于SQL Server提供了一项名为Master
    Data Services的解决方案，但它的使用听起来非常有限，至少在我的知识领域内是这样。在与微软讨论后，该产品确实已被放弃，其继任者是名为**Profisee**的合作伙伴产品，它与**Microsoft
    Purview**合作以提供数据治理功能([https://learn.microsoft.com/en-us/azure/architecture/reference-architectures/data/profisee-master-data-management-purview](https://learn.microsoft.com/en-us/azure/architecture/reference-architectures/data/profisee-master-data-management-purview))。Semarchy
    ([https://www.semarchy.com](https://www.semarchy.com))听起来是集成MDM的一种新颖且有趣的方法，但我还没有尝试足够多，无法推荐它。
- en: I have seen some companies using headless CMS systems such as Strapi, Sanity,
    Cockpit, Prisma, and others to create backends that can serve as entry-level MDM.
    But this generally lacks a good data versioning system and implementation of governance
    remains the job of the integrator. All in all, this is a very technology-based
    approach and, as stated previously, an MDM is much more than simply storing data.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我看到一些公司使用无头CMS系统，如Strapi、Sanity、Cockpit、Prisma等，来创建可以作为入门级MDM的后端。但这通常缺乏良好的数据版本控制系统，并且治理的实施仍然是集成商的工作。总的来说，这是一个非常基于技术的方案，如前所述，MDM远不止是简单地存储数据。
- en: This is roughly it for an off-the-shelf approach, and admittedly this does not
    go a long way. Every correct implementation of an MDM I have seen to this day
    has been a dedicated development. Some business applications, such as ERP, sometimes
    have a good referential for products or customers, but most of them miss the alignment
    on business.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是现成方法的概况，诚然这并不走得很远。我至今所见到的每一个MDM的正确实现都是一个专门的开发。一些商业应用程序，如ERP，有时对产品或客户有良好的参考，但大多数都缺乏业务上的对齐。
- en: Tip
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: It may sound logical that an ERP may not be business-aligned as it tries to
    be generic to many business domains. Nonetheless, when you see a top five ERP
    system proposing two separate domains for customers and suppliers, ignoring the
    possible duplication of data for most of the existing companies, this shows that
    the problem is not only the variety of businesses, but the very approach of these
    ERP companies, which consider that modeling the business is 100% the customer’s
    responsibility, whereas it should be a shared responsibility based on written,
    forward-compatible, standards. But this would go against vendor lock-in, which
    is not in their interest, and this is why the only way forward is for the customers
    to choose an implementation that accepts standards for business entity representations,
    including developing these standards in the (rare) cases where they do not exist.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 可能听起来逻辑上ERP可能不与业务对齐，因为它试图适用于许多业务领域。尽管如此，当你看到前五的ERP系统为顾客和供应商提出两个不同的领域，忽略了大多数现有公司可能的数据重复问题时，这表明问题不仅仅是商业的多样性，还有这些ERP公司的非常方法，他们认为建模业务是100%客户的责任，而它应该是基于书面、向前兼容的标准共享责任。但这将违反供应商锁定，这不符合他们的利益，这就是为什么唯一的前进方式是客户选择一个接受业务实体表示标准的实现，包括在（罕见的）它们不存在的情况下开发这些标准。
- en: What remains – and represents the vast majority of running MDM systems – are
    dedicated applications coupled with a database (and sometimes an indexation engine,
    and even a data lake, as explained previously). They are custom-developed for
    a given business use by internal IT or external software companies. This is a
    huge waste of time and money if you think globally as many companies have needs
    that are extremely close to each other. However, this is just how it is for now
    due to the lack of business standards used in the software industry.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 剩余的——并且代表了运行中的大多数MDM系统——是专门的应用程序与数据库（有时是索引引擎，甚至是一个数据湖，如前所述）相结合。它们是由内部IT或外部软件公司为特定的业务用途定制的开发。如果你从全球的角度来看，许多公司的需求非常相似，那么这将是时间和金钱的巨大浪费。然而，由于软件行业缺乏使用的业务标准，目前这只是一个现状。
- en: 'Now for the second part of the ideal system: after talking about data, we need
    to discuss business rules.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是理想系统的第二部分：在讨论数据之后，我们需要讨论业务规则。
- en: Rules management in the ideal system
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理想系统中的规则管理
- en: 'Business rules are predicates that apply to data to help implement real-world
    decisions made that are necessary for the business. For example, you may state
    that a customer cannot be sent a product so long as they have not checked their
    bank coordinates. This is a business rule as it can be expressed without any signs
    of software implementation: this could be done manually by someone in the plant
    checking with accounting via phone that the rule has been respected via p before
    sending the package to the customer.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 业务规则是应用于数据上的谓词，以帮助实施对业务必要的现实世界决策。例如，你可能声明，只要客户没有检查他们的银行坐标，就不能向他们发送产品。这是一个业务规则，因为它可以不带有任何软件实现的迹象来表述：这可以通过工厂中的人手动检查，通过电话与会计确认规则是否得到遵守，然后再将包裹发送给客户。
- en: Rules as the nervous network of the information system
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 规则作为信息系统中的神经系统
- en: 'If data is the blood of the information system, business rules are its nervous
    and muscular networks: they use the blood to realize some activities in a given
    way. A business rule in our metaphor could be that “if you feel a burning sensation
    on your finger, the arm must retract.” This rule is implemented in our spinal
    reflex system, which uses the sensors in its fingers to send the information/data
    through the nerves, resulting in the muscles from the concerned arm being unable
    to be controlled.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数据是信息系统的血液，那么业务规则就是其神经和肌肉网络：它们利用血液以特定方式实现某些活动。在我们的比喻中，一个业务规则可能是“如果你感觉手指有灼热感，手臂必须缩回。”这个规则在我们的脊髓反射系统中得到实现，它使用手指中的传感器通过神经发送信息/数据，导致相关手臂的肌肉无法被控制。
- en: 'In IT, the implementation of business rules is mostly what are called applications.
    This is generally where business rules are contained. In our example, there must
    be some code somewhere in the ERP that alerts the package preparation system that
    the customer has not passed the condition of having a verified way of payment.
    The reaction of the packaging system may be that this order will not be processed,
    or maybe that it will be processed in advance but the resulting physical package
    will be retained before delivery. The actual implementation is the responsibility
    of each module, but the business rule remains the same: “No customer delivered
    with their orders so long as we have not verified we can get paid,”'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在IT领域，业务规则的实现主要是所谓的应用程序。这通常是业务规则包含的地方。在我们的例子中，ERP系统中必须有一些代码，它会警告包装准备系统客户尚未通过已验证的支付方式条件。包装系统的反应可能是这个订单将不会处理，或者可能是它将提前处理，但实际的物理包装将在发货前保留。实际的实现是每个模块的责任，但业务规则保持不变：“只要我们没有验证我们可以收到付款，就不会有客户交付订单”，
- en: 'Business rules also contain all the calculations, from the most complex to
    the most mundane, that you will perform in the information system. Let me go back
    on this because there is something to say about the right separation of responsibility:
    **no client (GUI or application calling an API) should deal with business rules,
    which always have to be implemented server-side**. This is certainly something
    that you know about and sounds logical: after all, it is obvious that such important
    bits of functional reasoning must be centralized to ensure that they are applied
    everywhere the same way. But look at any client for a few minutes and you will
    find loads of functional decisions that are made locally, sometimes with the best
    reasoning. For example, think about calculating a net amount from the gross amount
    and the VAT rate. Sure, the VAT rate does not change very often in an application’s
    lifetime, and the way the calculation is made is itself very stable, so there
    should not be any big issue with trusting the client to do this computing, and
    we are getting better performance since we avoid a roundtrip to a server.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 业务规则还包含你将在信息系统中执行的所有计算，从最复杂的到最平凡的。让我回到这一点，因为关于责任正确划分的某些事情需要说：**任何客户端（GUI或调用API的应用程序）都不应该处理业务规则，这些规则始终必须在服务器端实现**。这肯定是你所知道的事情，听起来也很合理：毕竟，显然这些重要的功能推理必须集中化，以确保它们以相同的方式应用于所有地方。但看看任何客户端几分钟，你会发现有很多在本地做出的功能决策，有时甚至是最合理的。例如，考虑从毛额和增值税率计算净额。当然，增值税率在应用程序的生命周期中不会经常变化，计算方式本身也非常稳定，因此应该没有大问题，可以信任客户端进行这种计算，而且我们通过避免往返服务器而获得更好的性能。
- en: 'Alright, but you can always imagine ways that the business rule is going to
    change. As already imagined, the VAT rate can change. Also, if we are talking
    about net amount calculation for a multi-line order, you must handle multiple
    VAT rates in a single entity. The question boils down to risk management: if you
    know that you will never hit these particular cases, that’s alright. If you doubt
    the possibility they will appear in the future, you should first ask your product
    owners about it. If they are not sure about it, you will have to compare the costs
    of different approaches:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，但你总是可以想象业务规则会发生变化的方式。正如已经想象的那样，增值税率可能会变化。此外，如果我们谈论多行订单的净额计算，你必须在一个实体中处理多个增值税率。问题归结为风险管理：如果你知道你永远不会遇到这些特定情况，那没问题。如果你怀疑它们将来出现的可能性，你应该首先向你的产品所有者询问。如果他们对此不确定，你将不得不比较不同方法的开销：
- en: You can hard-code the business rule in all clients and hope it doesn’t evolve.
    If there are not that many of them and you can easily upgrade them, no big deal.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在所有客户端中硬编码业务规则并希望它不会演变。如果它们不多，并且您可以轻松升级它们，那就没问题。
- en: You can prepare for a possible change by making the rate a parameter of the
    applications you use (when they support it); this will already be better easier
    in case of adjustment, without a huge upfront cost.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以通过将利率作为您使用的应用程序的参数（当它们支持时）来为可能的变化做准备；这样在调整时已经更好、更容易，而且无需巨大的前期成本。
- en: If you foresee changes in the business rules in the coming years and you know
    adjusting the software will be complicated, maybe you should put the rule in a
    server-side, centralized, application. Sure, it will be a bit slower, but client-side
    cache can help and you will be future-proof.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您预计在未来几年内业务规则将发生变化，并且您知道调整软件将会很复杂，那么您可能应该将规则放在服务器端、集中式的应用程序中。当然，它可能会稍微慢一些，但客户端缓存可以帮助，并且您将具备未来适应性。
- en: If you are in a situation where lots of business changes are going to happen,
    and many business rules are going to be dealt with, then you’ll reach the point
    where investing in a centralized piece of software dedicated to managing your
    business rules makes sense.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您处于一个将发生大量业务变化的情况，并且许多业务规则需要处理，那么您将达到一个投资于一个专门用于管理您的业务规则的集中式软件是有意义的点。
- en: BRMS as a dedicated tool for business rule handling
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: BRMS 作为处理业务规则的专用工具
- en: 'Now, let’s concentrate on this last hypothesis, where you need what is called
    a **BRMS**. Again, it is very important to state that this is not a module you
    will need in every information system and the simplest ones do not justify such
    an installation effort. But beware that most information systems start simple
    and become more complex. The real difficulty is that, once you are in production,
    it is going to be harder to replace existing rules with a BRMS customization since
    all calls will have to be changed if they have not been unified behind an API
    contract. This is why this utopic information system makes sense: it shows what
    you should do (and does not hide the size of the investment) if you are serious
    with your information system and do not want to take any bets on it. If you know
    from the start it is going to grow and your activity will become industrial, then
    you should start with something that might seem overly complex and expensive at
    first but that will pay back hugely in the future. If you are not convinced about
    this, simply read all the returns of experience of startups that have failed because
    they have not invested in their information system, though their idea was customer-approved,
    their pricing was fine, and they had a market: this is one of the most common
    reasons for startups to fail, but also bigger companies (the latter, though, generally
    do not provide any feedback).'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们集中关注最后一个假设，即您需要所谓的 **BRMS**。再次强调，这并不是您在每一个信息系统中都需要的功能模块，最简单的系统也不需要这样的安装努力。但请注意，大多数信息系统的起点都很简单，但会变得更加复杂。真正的困难在于，一旦您进入生产阶段，用
    BRMS 定制替换现有规则将会更加困难，因为如果它们没有在 API 合同下统一，所有调用都必须更改。这就是为什么这个乌托邦式的信息系统是有意义的：它展示了如果您对您的信息系统认真负责，并且不想对其打任何赌，您应该做什么（并且不会隐藏投资的规模）。如果您从一开始就知道它将会增长，您的活动将会变得工业化，那么您应该从一些一开始可能看起来过于复杂和昂贵的工具开始，但它们将在未来带来巨大的回报。如果您对此不确信，只需阅读所有那些因为未投资于他们的信息系统而失败的初创公司的经验回报，尽管他们的想法得到了客户的认可，他们的定价合理，并且他们拥有市场：这是初创公司失败最常见的原因之一，也是大公司（后者通常不提供任何反馈）。
- en: Common implementations of business rules
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 业务规则的常见实现
- en: How would you go about implementing a BRMS? It may make you smile but, again,
    Excel is the simplest implementation for a BRMS, most of the time without people
    knowing it. One accountant will certainly tell you (if you ask) that they do not
    use any BRMS for their job. But at the same time, they will boast about a hand-crafted
    Excel workbook with all the calculations (and thus business rules, whether regulatory
    or company-wise) they need in their day-to-day job as well as for the monthly
    closing period. What is this if not a BRMS? In fact, due to the relatively rare
    use of a “true” dedicated BRMS, it simply happens that business rules are contained
    in Excel files for most small companies.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你会如何实施一个BRMS？可能会让你微笑，但同样，Excel通常是BRMS最简单的实现方式，大多数时候人们并不知道这一点。一个会计肯定会告诉你（如果你问的话），他们没有使用任何BRMS来完成工作。但与此同时，他们会吹嘘一个手工制作的Excel工作簿，其中包含了他们在日常工作中以及每月结算期间所需的所有计算（以及相应的业务规则，无论是监管还是公司层面的）。如果不是BRMS，那又是什么呢？事实上，由于“真正的”专用BRMS相对较少使用，对于大多数小型公司来说，业务规则实际上都包含在Excel文件中。
- en: 'Within larger companies, there are more business-line applications, such as
    ERP, or even bespoke software when the companies have internal software development
    capacity. In this case, the proportion of business rules integrated into the application
    rises, but this is not necessarily for the best. Why do lots of business-oriented
    people love Excel spreadsheets despite their shortcomings? Simply because they
    have full control over it and do not depend on the IT department to make changes,
    add functions, and so on. Start implementing a business rule inside some application
    and the coupling problem immediately pops up:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在大型公司中，有更多的业务线应用，例如ERP，或者当公司有内部软件开发能力时，甚至定制软件。在这种情况下，集成到应用中的业务规则比例上升，但这并不一定是最好的。为什么许多以业务为导向的人尽管存在缺点，却仍然喜欢Excel电子表格？简单来说，因为他们可以完全控制它，并且不需要依赖IT部门进行更改、添加功能等。在某个应用中开始实施业务规则，耦合问题立即显现：
- en: Is it possible to change the rule without recompiling, testing, and deploying
    the application again?
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否可以在不重新编译、测试和重新部署应用的情况下更改规则？
- en: If the rules can be customized, is it possible to do so via a functional operator
    or do you need the IT to implement the change (or in the best case, train them)?
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果规则可以定制，是否可以通过功能操作员来定制，或者你需要IT部门来实施更改（或者最好是在最佳情况下，对他们进行培训）？
- en: How do we deal with rules that must change at a particular date and time (for
    example January 1 at midnight for lots of accounting-related or business-wide
    reporting rules)?
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们如何处理必须在特定日期和时间更改的规则（例如，许多与会计相关的或业务范围内的报告规则在午夜1月1日）？
- en: 'Is it possible to have two concurrent versions of the business rule, or are
    we obliged to stop the software at the end of the year to make sure nothing is
    done before somebody changes the rule at the beginning of the new year (do not
    laugh: it happens very often…)?'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否可以有两个业务规则的同时版本，或者我们是否必须停止软件在年底，以确保在新的一年规则更改之前没有任何操作（不要笑：这种情况经常发生……）？
- en: Despite these potential problems, implementing business rules in dedicated business
    applications is already a nice step forward, particularly if this is done server-side,
    preferably as the implementation of a well-documented, contract-first API. This
    solution is less prone to errors than Excel spreadsheets, which might be disseminated
    across the organization with different implementations of rules, resulting in
    a mess. It also tends to provide a first level of governance of the business rules
    since different services are responsible for “their” software applications, and
    thus for the business rules implemented (or customized) in them.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管存在这些潜在问题，但在专用业务应用中实施业务规则已经是一个很大的进步，尤其是如果这是在服务器端完成的，最好是作为实现一个良好文档化的、以合同为先的API。这种解决方案比Excel电子表格更不容易出错，因为规则的不同实现可能会在整个组织中传播，导致混乱。它还倾向于提供业务规则的第一级治理，因为不同的服务负责“他们”的软件应用，以及其中实施（或定制）的业务规则。
- en: 'Still, these implementations are not representative of a BRMS in the sense
    of our utopic system, namely a unique one that would contain all the business
    rules of the company. And if you want to go all the way to a future-proof information
    system, you will rather use something such as Drools (an open source package,
    declined in JBoss Rules by Red Hat) or IBM Operational Decision Manager. These
    pieces of software will generally provide the following features:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这些实现并不能代表我们乌托邦式系统中的BRMS，即一个包含公司所有业务规则的独特系统。而且，如果你想走上一条未来证明的信息系统之路，你可能会更倾向于使用像Drools（一个开源包，由Red
    Hat的JBoss Rules实现）或IBM Operational Decision Manager这样的软件。这些软件通常会提供以下功能：
- en: The execution of business rules, which provides what is called a decision engine
    (**DMN** stands for **Decision Model and Notation** and is an accompanying standard
    of BPMN). If you want to know more about this important bit of a BRMS, I recommend
    the excellent documentation page from Drools, available at [https://www.drools.org/learn/dmn.html](https://www.drools.org/learn/dmn.html).
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 业务规则的执行，这提供了所谓的决策引擎（**DMN**代表**决策模型和符号**，是BPMN的伴随标准）。如果你想了解更多关于BRMS这个重要部分的信息，我推荐Drools提供的优秀文档页面，可在[https://www.drools.org/learn/dmn.html](https://www.drools.org/learn/dmn.html)找到。
- en: Storage for the definition of these business rules, which sounds obvious but
    isn’t when you add the requirement of storing the whole version history of the
    business rules.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些业务规则的存储定义，听起来很显然，但当你加上存储整个业务规则版本历史的要求时，情况就不同了。
- en: Use of decision tables, links between events and actions, and, in the most sophisticated
    cases, inference engines that are going to mix many different rules to find additional
    conclusions (an overly simplified example would be that “all purchases need an
    invoice” and “an invoice must include the buyer’s address in the header,” to “all
    purchases need the address of the buyer”).
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 决策表的使用、事件和动作之间的链接，以及在最复杂的情况下，将混合许多不同规则以找到额外结论的推理引擎（一个过于简化的例子是“所有采购都需要发票”和“发票必须在标题中包含买方的地址”，到“所有采购都需要买方的地址”）。
- en: Some of them provide a graphical editor for non-technical people to be able
    to adjust rules by themselves. Though editors claim anyone can use them, they
    remain quite technical and require some training.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其中一些提供了图形编辑器，让非技术人员能够自行调整规则。尽管编辑器声称任何人都可以使用，但它们仍然相当技术性，需要一些培训。
- en: Together with this, a sandbox is very useful for people to test their business
    rules adjustments before putting them into production.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与此同时，沙盒对于人们在将业务规则调整投入生产之前进行测试非常有用。
- en: Depending on the performance needed and the variation of the calls, a cache
    mechanism can be a good addition to a BRMS.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据所需的性能和调用变化的程度，缓存机制可以是一个很好的BRMS补充。
- en: Tip
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: Open Policy Agent is a BRMS that is dedicated to authorization rules. We will
    show its use in [*Chapter 12*](B21293_12.xhtml#_idTextAnchor446).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Open Policy Agent是一个专注于授权规则的BRMS。我们将在[*第12章*](B21293_12.xhtml#_idTextAnchor446)中展示其用法。
- en: Finally, after talking about data and business rules, we are going to add the
    third and last module to complete our ideal IT system.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在讨论数据和业务规则之后，我们将添加第三个也是最后一个模块，以完成我们的理想IT系统。
- en: Processes management in the ideal system
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理想系统中的流程管理
- en: Our ideal system handles data and can make decisions on it with business rules,
    but what makes it tick? In [*Chapter 4*](B21293_04.xhtml#_idTextAnchor121), we
    stressed that everything is a question of time, but nothing has the role of putting
    the data and rules in controlled, time-based, motion. This will be the role of
    the process engine.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们理想中的系统可以处理数据，并使用业务规则对其做出决策，但是什么让它运转呢？在[*第4章*](B21293_04.xhtml#_idTextAnchor121)中，我们强调了一切都是时间的问题，但没有任何东西具有将数据和规则置于受控、基于时间的运动中的角色。这将是由流程引擎来扮演的角色。
- en: Processes as the brain of the information system
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 流程作为信息系统的大脑
- en: Coming back to our metaphor of the human body, you may have guessed that business
    process management, as the module that orchestrates the actions of applications
    containing the business rules over the data, can be associated with the control
    tower that is the brain. As our brain coordinates the actions of each muscle together
    with receiving the signals coming from our five senses to achieve complex results
    such as catching a ball, typing on a keyboard, or dressing, the processes describe
    the complex tasks that must be accomplished by each part of the information system
    to reach a global objective, and the BPM engine coordinates these tasks, effectively
    calling the modules in charge (or rather, the API, which themselves are implemented
    by technical module; remember the important point we explained in [*Chapter 3*](B21293_03.xhtml#_idTextAnchor069)?).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们的人体比喻，你可能已经猜到，业务流程管理（BPM）作为协调包含业务规则的应用程序动作的模块，可以与大脑的控制塔相联系。正如我们的大脑协调每个肌肉的动作，同时接收来自我们五感的信号，以实现诸如接球、键盘打字或穿衣等复杂的结果，流程描述了信息系统每个部分必须完成的复杂任务，以实现全局目标，而BPM引擎协调这些任务，有效地调用负责的模块（或者更确切地说，API，这些API本身由技术模块实现；还记得我们在[*第三章*](B21293_03.xhtml#_idTextAnchor069)中解释的重要观点吗）。
- en: If the utopic information system is made of one MDM and one BRMS that contain
    all the data and all the business rules for each of the business domains, the
    BPM is the module that makes everything work together, by interoperating all of
    the functions.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果理想的信息系统由一个MDM和一个BRMS组成，包含每个业务领域的所有数据和所有业务规则，那么BPM就是使一切协同工作的模块，通过互操作所有功能。
- en: Implementations of a BPM
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: BPM的实现
- en: 'Before talking about technical implementations (and this should be a reflex
    by now), we have to try and find an accepted standard for our feature. Luckily,
    an indisputable one exists that we have talked about previously: BPMN. So, if
    you are looking for an evolutive way of executing processes, where the engine
    can be completely decoupled from the design, you must use BPMN. I have tested
    editing BPMN 2.0 on a given editor’s GUI and executing on another editor’s execution
    engine, and it works well, which says something about the maturity of the norm.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在谈论技术实现（这现在应该是一种本能）之前，我们必须尝试找到一个我们特征的可接受标准。幸运的是，一个无可争议的标准已经存在，我们之前已经讨论过：BPMN。所以，如果你在寻找一种执行流程的演变方式，其中引擎可以完全与设计解耦，你必须使用BPMN。我已经在一个特定的编辑器的GUI上测试了编辑BPMN
    2.0，并在另一个编辑器的执行引擎上执行，它运行良好，这表明了该标准的成熟度。
- en: Of course, not all information systems need the kind of sophistication we are
    talking about, but all of them use a central orchestration system at some point,
    even if large parts of it can be manual and processes might not even be designed
    in BPMN, but only known in their heads by the participants of the information
    system (again, this does not mean that everything is based on computers). And
    guess what? When we do not need any complexity at all, we will find our old friend
    Excel!
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，并非所有信息系统都需要我们讨论的这种复杂性，但它们在某个时候都会使用一个中央协调系统，即使大部分可以手动操作，流程可能甚至没有在BPMN中设计，而只是信息系统参与者头脑中知道（再次强调，这并不意味着一切都是基于计算机的）。而且你知道吗？当我们根本不需要任何复杂性时，我们会找到我们老朋友Excel！
- en: Tip
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: At this point, I know you must be convinced I am an absolute Excel fan. However,
    I’m not and I have seen my fair share of huge functional problems because of using
    Excel for shared data, not controlling its spreading in the organization, and
    more. I am fully aware of the way it prevents people from working together by
    making it so easy for almost everyone to have a little part of the information
    system. But at the same time, I am not in favor of forgetting everything spreadsheets
    have brought to IT and the empowerment of business specialists. Also, it is not
    my fault that most information systems nowadays are so unsophisticated! So if
    you have to use a crude tool to do the job… so be it! And Excel will long remain
    the “Swiss Army knife” of information systems. You will be better off with a complete
    toolbox but if you can only have one tool, take this knife rather than the circlip-removing
    tongs or some other exotic and highly-specialized utensil. Going back to the software,
    better alternatives for MDM, BRMS, and BPM exist today than an Excel spreadsheet.
    However, if you are aware of Excel’s drawbacks and control them, its versatility
    and ease of use will speed you up in many parts of the information system. In
    particular, though MDM and BPM are much better outside Excel, I have often set
    up some “low-quality BRMS” by putting complex calculations in Excel and plugging
    the spreadsheet into APIs with great business success. Yes, this is somewhat of
    a hack, but so long as it is hidden behind an API, there is no problem with a
    temporary, quick, and dirty implementation… and the business users LOVED it!
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我知道你一定认为我是一个绝对的Excel粉丝。然而，我并不是，我也亲眼见证了由于使用Excel处理共享数据、没有控制其在组织中的传播以及更多问题而导致的巨大功能问题。我完全清楚它如何通过让几乎每个人都能拥有信息系统的一小部分信息来阻止人们共同工作。但与此同时，我也不赞成忘记电子表格为IT和业务专家带来的所有贡献。而且，现在大多数信息系统如此不成熟也不是我的错！所以，如果你必须使用一个粗糙的工具来完成工作……那就这样吧！Excel将长期成为信息系统的“瑞士军刀”。拥有一个完整的工具箱会更好，但如果你只能拥有一个工具，那就拿这把刀而不是拔钳或一些其他奇特且高度专业化的工具。回到软件上，现在对于MDM、BRMS和BPM，比Excel电子表格更好的替代方案已经存在。然而，如果你意识到Excel的缺点并控制它们，其多功能性和易用性将使你在信息系统的许多部分中加快速度。特别是，尽管MDM和BPM在Excel之外要好得多，但我经常通过在Excel中放入复杂的计算并将电子表格插入API中，建立了一些“低质量的BRMS”，并取得了巨大的商业成功。是的，这有点像是一种黑客行为，但只要它隐藏在API后面，这种临时、快速和简陋的实施就没有问题……而且业务用户非常喜欢它！
- en: How close can we get to this utopic system?
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们能有多接近这个乌托邦式的系统？
- en: So far, we have described the contents of an ideal information system, as described
    by Dominique Vauquier in his seminal book. This assembly of MDM + BRMS + BPM will
    also be found in some other sources, such as the “sustainable information system”
    described by the SHIFT project in its approach to the digital transformation toward
    a more ecologically friendly IT industry, or the **Agility Chain Management System**
    (**ACMS**) approach.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经描述了理想信息系统的内容，这是由Dominique Vauquier在他的开创性著作中描述的。这种MDM + BRMS + BPM的组装也可以在其他一些来源中找到，例如，SHIFT项目在其向更环保的IT行业数字化转型的方法中描述的“可持续信息系统”，或者**敏捷链管理系统**（**ACMS**）方法。
- en: Of course, this is an ideal vision, so the question is not to use it as a blueprint
    that actual information systems should all be based on, but how close we can get
    to it when designing new information systems or improving existing ones.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这是一个理想化的愿景，所以问题不是将其用作实际信息系统都应该基于的蓝图，而是在设计新的信息系统或改进现有信息系统时，我们能够接近它有多近。
- en: Favoring contexts
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优先考虑上下文
- en: 'Various context elements may favor the use of the approach discussed in this
    chapter:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 各种上下文元素可能会促进本章讨论的方法的使用：
- en: '**A brand new information system**: If you are lucky enough to start from scratch
    with a newly-created organization, the legacy will not hold you back and this
    is a huge factor that can make an ideal information system come to life.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全新的信息系统**：如果你足够幸运，可以从一个新创建的组织从头开始，那么遗产就不会阻碍你，这是一个可以使理想信息系统得以实现的巨大因素。'
- en: '**Degree of sophistication**: This will not be enough, of course, because as
    stated previously, there is a place for such an ideal system only when it is justified
    by business. If your information system has to be highly evolutive because business
    rules and markets are changing very often, data structures are unclear, and processes
    must be adapted quickly, then this is another factor that can favor the adoption
    of the architecture explained previously.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**复杂程度**：当然，这还远远不够，因为正如之前所述，只有当它得到商业的证明时，这样的理想系统才有其存在的空间。如果你的信息系统必须高度可进化，因为商业规则和市场经常变化，数据结构不明确，并且必须快速适应流程，那么这又是另一个可以促进之前所述架构采用的因素。'
- en: '**Investment approval**: Once again, this factor is not enough because the
    business may need such a highly sophisticated information system but the investors
    might not be aware of this. For lots of CEOs, IT is just a cost center. But if
    you understand that information systems have become the backbones of most industrial
    activities, you have one more positive factor.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**投资批准**：再次强调，这个因素也不够，因为商业可能需要这样一个高度复杂的信息系统，但投资者可能没有意识到这一点。对于许多首席执行官来说，IT只是一个成本中心。但如果你理解信息系统已经成为大多数工业活动的支柱，那么你又有了一个积极的因素。'
- en: '**Capacity of implementation**: Everything seems fine, but do not underestimate
    the difficulty of implementing such an information system. This approach is so
    different from what most professionals know that you will have difficulty finding
    people able to deploy it. You will have to convince them, train them, and adjust
    them to your way with very little existing feedback and return on experience.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实施能力**：一切看似顺利，但不要低估实施这样一个信息系统所面临的困难。这种方法与大多数专业人士所知的方法大相径庭，以至于你很难找到能够部署它的人。你将不得不说服他们，培训他们，并让他们适应你的方式，而现有的反馈和经验回报非常有限。'
- en: Admittedly, these are a lot of factors and chances are you will not have them
    now. For people my age, there is even a chance that we’ll never see such a perfect
    alignment that would make this utopic structure the most used one. But it exists
    – its advantages are obvious and the accelerating rate of changes and digital
    transformation of the industry will, without any doubt, make it a more and more
    observed option. A technical watch also shows that, in the past 3 to 5 years,
    the subject of MDM has advanced and some advanced companies have put them in place,
    together with an internal developer platform, bringing them some very interesting
    results. In short, we are at the very beginning of the trend, but the chances
    that the wave will grow are high.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 诚然，这些因素有很多，而且你很可能现在没有它们。对于像我这样年龄的人来说，甚至有可能我们永远看不到这种完美的协调，使得这种乌托邦式的结构成为最常用的一个。但它确实存在——其优势是显而易见的，而且行业变化的加速和数字化转型将毫无疑问地使其成为一个越来越被观察到的选项。技术监控也显示，在过去3到5年中，MDM的主题已经取得进展，一些先进的公司已经实施了它们，并伴随着一个内部开发者平台，带来了非常有趣的结果。简而言之，我们正处于趋势的初期，但波浪增长的可能性很高。
- en: Approaching the target, the Agile way
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 接近目标，敏捷的方式
- en: The fact that such ideal information systems are not mainstream yet and will
    not be the standard in the near future does not mean that they have no interest.
    It would be a bit like somebody working in an Agile team who would not want to
    know what the vision of the final software is, arguing that they are only interested
    in what will be done in the current sprint!
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的理想信息系统目前还不是主流，并且在未来也不会成为标准，这并不意味着它们没有兴趣。这就像一个在敏捷团队工作的人，他不想知道最终软件的愿景是什么，声称他们只对当前冲刺中将要完成的事情感兴趣！
- en: 'An ideal – a vision – is also there to provide direction, somewhere to guide
    our trip. Remember the metaphor of the arrow? We must know what the target looks
    like to locate it and reach it; otherwise, we are just randomly walking around,
    hoping for the best. In conclusion, please do not discard this concept because
    it is not immediately practical: knowing it can help you make choices in the future
    between different directions of your information system because you will feel
    closer to this long-term, ideal, direction that will bring you better value. Chances
    are you will never reach the ideal state, but hopefully, the direction taken will
    bear more value and flexibility to your information system. The state of information
    systems nowadays is so poor that having something above average is already a huge
    advantage in the era of digitalization of all industrial processes.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 同时也存在一个理想——一个愿景——来提供方向，指引我们的旅程。还记得箭的隐喻吗？我们必须知道目标的样子才能定位并达到它；否则，我们只是在漫无目的地四处走动，希望得到最好的结果。总之，请不要因为这一概念不是立即实用的就放弃它：了解它可以帮助你在未来在信息系统不同的方向之间做出选择，因为你将感觉更接近这个长期、理想的方向，这将为你带来更大的价值。可能性是，你永远无法达到理想状态，但希望，所采取的方向将为你的信息系统带来更多的价值和灵活性。如今信息系统的情况如此糟糕，拥有一些高于平均水平的东西在所有工业流程数字化时代已经是一个巨大的优势。
- en: Summary
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we presented what could be an ideal information system. We
    talked about all the problems that can arise in software industrial deployments,
    particularly concerning their evolution, so it was quite logical to show not only
    punctual solutions but also how the problem could be addressed globally. Of course,
    a fair part of this approach remains utopic, but this exercise is interesting
    in the fact that it shows that only three modules, if very well built, can serve
    any business needs. The separation between data, business rules, and business
    processes is something that should be kept in mind even if the information system
    you work with is far from being ideal.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们展示了可能是一个理想的信息系统。我们讨论了在软件工业部署中可能出现的所有问题，特别是关于它们的演变，因此展示不仅限于点解决方案，还展示了如何全局性地解决这些问题。当然，这一方法的大部分仍然是乌托邦式的，但这一练习有趣之处在于它表明，如果构建得非常好，只有三个模块就可以满足任何商业需求。数据、业务规则和业务流程之间的分离是即使在您工作的信息系统远非理想的情况下也应该记住的事情。
- en: 'This chapter was quite conceptual, but this concludes the first part of this
    book, which was meant to cover a lot of theoretical background. The next part
    of this book will cover more practical methods for architecture and, to be fully
    articulated between theory and practice (which is the main premise of this book),
    the third part will provide source code to show you how to implement the concepts
    and approaches of sound architecture that we have talked about. In particular,
    the three main modules that have been explained here will be shown in a sample
    application with a limited functional perimeter, but with all the sophistication
    needed to grow to a full-fledged information system if needed:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 本章相当概念化，但这本书的第一部分就此结束，这部分旨在涵盖大量的理论背景。本书的下一部分将涵盖更多关于架构的实用方法，为了完全阐述理论与实践（这是本书的主要前提），第三部分将提供源代码，展示如何实现我们讨论过的良好架构的概念和方法。特别是，这里解释的三个主要模块将在一个具有有限功能范围的示例应用程序中展示，但具有所有成长为完整信息系统的必要复杂性：
- en: The MDM will be based on a NoSQL database, with a back office server in ASP.NET
    that exposes API-designed contract-first
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MDM将基于NoSQL数据库，后端服务器使用ASP.NET，并公开API设计的合同优先
- en: A separate BRMS will be used for authorization management
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将使用一个独立的BRMS进行授权管理
- en: A BPM approach will be held to show how to make processes adjustable, with a
    low-code implementation
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将采用BPM方法来展示如何使流程可调整，使用低代码实现
- en: To summarize, in the next seven chapters, we will use battle-hardened methods
    to design the sample application by using examples that apply to parts of the
    use cases we will need. This, in the following five chapters, will be used to
    implement the sample application, module by module. Finally, the last three chapters
    will be about deploying and adjusting this sample application, just like if it
    were in production. As time passes by, adjustments need to be made to keep it
    aligned with the functional business needs.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，在接下来的七个章节中，我们将通过使用适用于所需用例各部分的示例，运用经过实战检验的方法来设计示例应用程序。在接下来的五个章节中，我们将分模块实现这个示例应用程序。最后，最后三个章节将讨论部署和调整这个示例应用程序，就像它在生产环境中一样。随着时间的推移，需要做出调整以保持其与功能业务需求的一致性。
- en: Further reading
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '*A sustainable information system - progressive refurbishing of the IS with
    SOA*, by Pierre Bonnet/Jean-Michel Detavernier - Dominique Vauquier - Hermès /
    Lavoisier - November 2007 - ISBN-13: 978-2746218291'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '*一个可持续的信息系统 - 使用SOA对信息系统进行渐进式翻新*，作者：皮埃尔·博内/让-米歇尔·德塔弗尼耶 - 多米尼克·瓦奎尔 - 赫尔墨斯 /
    拉瓦锡 - 2007年11月 - ISBN-13: 978-2746218291'
- en: 'Part 2: Architecture Frameworks and Methods'
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二部分：架构框架和方法
- en: After *Part 1*, which was quite theoretical so it could be understood by readers
    without a technical background, *Part 2* of the book gets a bit more practical
    and explains how some principles can be applied at the architectural level of
    an information system to make it better. This is where we will talk about methods
    to design low-coupled services with a good alignment to business. General software
    principles will be covered, but also wider approaches such as the externalization
    of authorization management and business rules in general. The correct approach
    to managing data in a business-/IT-aligned information system will also be detailed.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一部分，它相当理论化，因此即使没有技术背景的读者也能理解之后，本书的第二部分*第二部分*变得更加实用，并解释了如何将某些原则应用于信息系统的架构层面，以使其更加完善。这就是我们将讨论如何设计与业务良好对齐的低耦合服务的方法。将涵盖通用软件原则，但也会涉及更广泛的方法，例如授权管理和业务规则的外部化。在业务/IT对齐的信息系统中管理数据的正确方法也将被详细阐述。
- en: 'This part includes the following chapters:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包括以下章节：
- en: '[*Chapter 6*](B21293_06.xhtml#_idTextAnchor212), *SOLID Principles, from Code
    to Systems*'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第6章*](B21293_06.xhtml#_idTextAnchor212)，*SOLID原则，从代码到系统*'
- en: '[*Chapter 7*](B21293_07.xhtml#_idTextAnchor248), *C4 and Other Approaches*'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第7章*](B21293_07.xhtml#_idTextAnchor248)，*C4和其他方法*'
- en: '[*Chapter 8*](B21293_08.xhtml#_idTextAnchor271), *Service Orientation and APIs*'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第8章*](B21293_08.xhtml#_idTextAnchor271)，*面向服务的架构和API*'
- en: '[*Chapter 9*](B21293_09.xhtml#_idTextAnchor318), *Exploring Domain-Driven Design
    and Semantics*'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第9章*](B21293_09.xhtml#_idTextAnchor318)，*探索领域驱动设计和语义*'
- en: '[*Chapter 10*](B21293_10.xhtml#_idTextAnchor344), *Master Data Management*'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第10章*](B21293_10.xhtml#_idTextAnchor344)，*主数据管理*'
- en: '[*Chapter 11*](B21293_11.xhtml#_idTextAnchor393), *Business Processes and Low
    Code*'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第11章*](B21293_11.xhtml#_idTextAnchor393)，*业务流程和低代码*'
- en: '[*Chapter 12*](B21293_12.xhtml#_idTextAnchor446), *Externalization of Business
    Rules*'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第12章*](B21293_12.xhtml#_idTextAnchor446)，*业务规则的外部化*'
- en: '[*Chapter 13*](B21293_13.xhtml#_idTextAnchor470), *Externalization of Authorization*'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第13章*](B21293_13.xhtml#_idTextAnchor470)，*授权的外部化*'
