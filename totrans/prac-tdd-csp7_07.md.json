["```cs\n[Fact]\npublic void ItExists()\n{\n  // Arrange\n  var speakerServiceMock = new Mock<ISpeakerService>();\n  var controller = new SpeakerController(speakerServiceMock.Object);\n\n  // Act\n  controller.GetAll();\n}\n```", "```cs\npublic void GetAll()\n{           \n}\n```", "```cs\n[Fact]\npublic void ItReturnsOkObjectResult()\n{\n  // Arrange\n  var speakerServiceMock = new Mock<ISpeakerService>();\n  var controller = new SpeakerController(speakerServiceMock.Object);\n\n  // Act\n  var result = controller.GetAll();\n\n  // Assert\n  Assert.NotNull(result);\n  Assert.IsType<OkObjectResult>(result);\n}\n```", "```cs\npublic IActionResult GetAll()\n{           \n  return Ok();\n}\n```", "```cs\n[Fact]\npublic void ItReturnsCollectionOfSpeakerSummary()\n{\n  // Arrange\n  var speakerServiceMock = new Mock<ISpeakerService>();\n  var controller = new SpeakerController(speakerServiceMock.Object);\n\n  // Act\n  var result = controller.GetAll() as OkObjectResult;\n\n  // Assert\n  Assert.NotNull(result);\n  Assert.NotNull(result.Value);\n  Assert.IsAssignableFrom<IEnumerable<SpeakerSummary>>(result.Value);\n}\n```", "```cs\npublic IActionResult GetAll()\n{\n  return Ok(new List<SpeakerSummary>());\n}\n```", "```cs\n[Fact]\npublic void ItCallsGetAllServiceOnce()\n{\n  // Arrange\n  var speakerServiceMock = new Mock<ISpeakerService>();\n  var controller = new SpeakerController(_speakerServiceMock.Object);\n\n  // Act\n  controller.GetAll();\n\n  // Assert\n  speakerServiceMock.Verify(mock => mock.GetAll(), Times.Once());\n}\n```", "```cs\nIEnumerable<SpeakerSummary> GetAll();\n```", "```cs\npublic IEnumerable<SpeakerSummary> GetAll()\n{\n  throw new NotImplementedException();\n}\n```", "```cs\npublic IActionResult GetAll()\n{\n  _speakerService.GetAll();\n\n  return Ok(new List<SpeakerSummary>());\n}\n```", "```cs\n[Fact]\npublic void GivenSpeakerServiceThenResultsReturned()\n{\n  // Arrange\n  var speakers = new List<SpeakerSummary> { new SpeakerSummary\n  {\n    Name = \"Speaker\"\n  } };\n\n  var speakerServiceMock = new Mock<ISpeakerService>();\n  speakerServiceMock.Setup(x => x.GetAll()).Returns(() => _speakers);\n\n  var controller = new SpeakerController(speakerServiceMock.Object);\n\n  // Act\n  var result = controller.GetAll() as OkObjectResult;\n  var speakers = ((IEnumerable<SpeakerSummary>)result.Value).ToList();\n\n  // Assert\n  Assert.Equal(_speakers, speakers);\n}\n```", "```cs\nprivate readonly SpeakerController _controller;\nprivate static Mock<ISpeakerService> _speakerServiceMock;\nprivate readonly List<SpeakerSummary> _speakers;\n\npublic GetAll()\n{\n  _speakers = new List<SpeakerSummary> { new SpeakerSummary\n  {\n    Name = \"test\"\n  } };\n\n  _speakerServiceMock = new Mock<ISpeakerService>();\n  _speakerServiceMock.Setup(x => x.GetAll()).Returns(() => _speakers);\n\n  _controller = new SpeakerController(_speakerServiceMock.Object);\n}\n```", "```cs\n[Fact]\npublic void GivenSpeakerNotFoundExceptionThenNotFoundObjectResult()\n{\n  // Arrange\n  // Act\n  var result = _controller.Get(-1);\n\n  // Assert\n  Assert.IsAssignableFrom<NotFoundObjectResult>(result);\n}\n```", "```cs\npublic class SpeakerNotFoundException : Exception\n{\n}\n```", "```cs\n_speakerServiceMock.Setup(x => x.Get(-1)).Returns(() => throw new SpeakerNotFoundException());\n```", "```cs\npublic IActionResult Get(int id)\n{\n  try\n  {\n    var speaker = _speakerService.Get(id);\n    return Ok(speaker);\n  }\n  catch (SpeakerNotFoundException)\n  {\n    return NotFound();\n  }\n}\n```", "```cs\n[Fact]\npublic void GivenSpeakerNotFoundExceptionThenMessageReturned()\n{\n  // Arrange\n  // Act\n  var result = _controller.Get(-1) as NotFoundObjectResult;\n\n  // Assert\n  Assert.NotNull(result);\n  Assert.Equal(\"Speaker Not Found\", result.Value);\n}\n```", "```cs\npublic class SpeakerNotFoundException : Exception\n{\n  public SpeakerNotFoundException() : base(\"Speaker Not Found\")\n  {\n  }\n}\n```", "```cs\npublic IActionResult Get(int id)\n{\n  try\n  {\n    var speaker = _speakerService.Get(id);\n    return Ok(speaker);\n  }\n  catch (SpeakerNotFoundException ex)\n  {\n    return NotFound(ex.Message);\n  }\n}\n```", "```cs\n[Fact]\npublic void ItHasGetAllMethod()\n{\n  var speakerService = new SpeakerService();\n  speakerService.GetAll();\n}\n```", "```cs\npublic IEnumerable<SpeakerSummary> GetAll()\n{\n  return null;\n}\n```", "```cs\n[Fact]\npublic void ItReturnsCollectionOfSpeakerSummary()\n{\n  // Arrange\n  // Act\n  var speakers = _speakerService.GetAll();\n\n  // Assert\n  Assert.NotNull(speakers);\n  Assert.IsAssignableFrom<IEnumerable<SpeakerSummary>>(speakers);\n}\n```", "```cs\npublic IEnumerable<SpeakerSummary> GetAll()\n{\n  return new List<SpeakerSummary>();\n}\n```", "```cs\npublic readonly List<Speaker> HardCodedSpeakers = new List<Speaker>\n{\n  new Speaker {Name = \"Josh\"},\n  new Speaker {Name = \"Joshua\"},\n  new Speaker {Name = \"Joseph\"},\n  new Speaker {Name = \"Bill\"}\n};\n```", "```cs\n[Fact]\npublic void ItReturnsAllSpeakers()\n{\n  // Arrange\n  // Act\n  var speakers = _speakerService.GetAll();\n\n  // Assert\n  Assert.NotNull(speakers);\n  Assert.IsAssignableFrom<IEnumerable<SpeakerSummary>>(speakers);\n  Assert.Equal(_speakerService.HardCodedSpeakers.Count, speakers.Count());\n}\n```", "```cs\npublic IEnumerable<SpeakerSummary> GetAll()\n{\n  return HardCodedSpeakers.Select(speaker => new SpeakerSummary());\n}\n```", "```cs\n[Fact]\npublic void ItReturnsAllSpeakersWithName()\n{\n  // Arrange\n  // Act\n  var speakers = _speakerService.GetAll().ToList();\n\n  // Assert\n  Assert.NotNull(speakers);\n  Assert.IsAssignableFrom<IEnumerable<SpeakerSummary>>(speakers);\n\n  for (var i = 0; i < speakers.Count; i++)\n  {\n    Assert.NotNull(_speakerService.HardCodedSpeakers[i].Name);\n    Assert.Equal(_speakerService.HardCodedSpeakers[i].Name, speakers[i].Name);\n  }\n}\n```", "```cs\npublic IEnumerable<SpeakerSummary> GetAll()\n{\n  return HardCodedSpeakers.Select(speaker => new SpeakerSummary\n  {\n    Name = speaker.Name     \n  });\n}\n```", "```cs\n[Fact]\npublic void ItReturnsAllSpeakersWithId()\n{\n  // Arrange\n  // Act\n  var speakers = _speakerService.GetAll().ToList();\n\n  // Assert\n  Assert.NotNull(speakers);\n  Assert.IsAssignableFrom<IEnumerable<SpeakerSummary>>(speakers);\n\n  for (var i = 0; i < speakers.Count; i++)\n  {\n    Assert.NotNull(_speakerService.HardCodedSpeakers[i].Id);\n    Assert.Equal(_speakerService.HardCodedSpeakers[i].Id, speakers[i].Id);\n  }\n}\n```", "```cs\npublic IEnumerable<SpeakerSummary> GetAll()\n{\n  return HardCodedSpeakers.Select(speaker => new SpeakerSummary\n  {\n    Id = speaker.Id,\n    Name = speaker.Name     \n  });\n}\n```", "```cs\n[Fact]\npublic void ItReturnsAllSpeakersWithLocation()\n{\n  // Arrange\n  // Act\n  var speakers = _speakerService.GetAll().ToList();\n\n  // Assert\n  Assert.NotNull(speakers);\n  Assert.IsAssignableFrom<IEnumerable<SpeakerSummary>>(speakers);\n\n  for (var i = 0; i < speakers.Count; i++)\n  {\n    Assert.NotNull(_speakerService.HardCodedSpeakers[i].Location);\n    Assert.Equal(_speakerService.HardCodedSpeakers[i].Location, speakers[i].Location);\n  }\n}\n```", "```cs\npublic readonly List<Speaker> HardCodedSpeakers = new List<Speaker>\n{\n  new Speaker {Id = 1, Name = \"Josh\", Location = “Tampa, FL”},\n  new Speaker {Id = 2, Name = \"Joshua\", Location = “Louisville, KY”},\n  new Speaker {Id = 3, Name = \"Joseph\", Location = “Las Vegas, NV”},\n  new Speaker {Id = 4, Name = \"Bill\", Location = “New York, NY”},\n};\n```", "```cs\npublic IEnumerable<SpeakerSummary> GetAll()\n{\n  return HardCodedSpeakers.Select(speaker => new SpeakerSummary\n  {\n    Id = speaker.Id,\n    Name = speaker.Name,  \n    Location = speaker.Location,\n  });\n}\n```", "```cs\n[Fact]\npublic void ItReturnsAllSpeakersWithProperties()\n{\n  // Arrange\n  // Act\n  var speakers = _speakerService.GetAll().ToList();\n\n  // Assert\n  Assert.NotNull(speakers);\n  Assert.IsAssignableFrom<IEnumerable<SpeakerSummary>>(speakers);\n\n  for (var i = 0; i < speakers.Count; i++)\n  {\n    Assert.NotNull(_speakerService.HardCodedSpeakers[i].Name);\n    Assert.Equal(_speakerService.HardCodedSpeakers[i].Name, speakers[i].Name);\n    Assert.NotNull(_speakerService.HardCodedSpeakers[i].Id);\n    Assert.Equal(_speakerService.HardCodedSpeakers[i].Id, speakers[i].Id);\n    Assert.NotNull(_speakerService.HardCodedSpeakers[i].Location);\n    Assert.Equal(_speakerService.HardCodedSpeakers[i].Location, speakers[i].Location);\n  }\n}\n```", "```cs\n[Fact]\npublic void ItAcceptsIRepository()\n{\n  // Arrange\n  IRepository fakeRepository = new FakeRepository();\n\n  // Act\n  var service = new SpeakerService(fakeRepository);\n\n  // Assert\n  Assert.NotNull(service);\n}\n```", "```cs\npublic SpeakerService(IRepository repository)\n{\n}\n```", "```cs\n[Fact]\npublic void ItCallsRepository()\n{\n  // Arrange\n  FakeRepository fakeRepository = new FakeRepository();\n  var service = new SpeakerService(fakeRepository);\n\n  // Act\n  var speakers = service.GetAll();\n\n  // Assert\n  Assert.True(fakeRepository.GetAllCalled);\n}\n```", "```cs\npublic bool GetAllCalled { get; private set; }\n\npublic void GetAll()\n{\n  GetAllCalled = true;\n}\n```", "```cs\n[Fact]\npublic void ItReturnsAllSpeakers()\n{\n  // Arrange\n  // Act\n  var speakers = _speakerService.GetAll();\n\n  // Assert\n  Assert.NotNull(speakers);\n  Assert.IsAssignableFrom<IEnumerable<SpeakerSummary>>(speakers);\n  Assert.Equal(_fakeRepository.HardCodedSpeakers.Count, speakers.Count());\n}\n```", "```cs\n[Fact]\npublic void ItReturnsAllSpeakersWithProperties()\n{\n  // Arrange\n  // Act\n  var speakers = _speakerService.GetAll().ToList();\n\n  // Assert\n  Assert.NotNull(speakers);\n  Assert.IsAssignableFrom<IEnumerable<SpeakerSummary>>(speakers);\n\n  for (var i = 0; i < speakers.Count; i++)\n  {\n    Assert.NotNull(_fakeRepository.HardCodedSpeakers[i].Name);\n    Assert.Equal(_fakeRepository.HardCodedSpeakers[i].Name, speakers[i].Name);\n    Assert.NotNull(_fakeRepository.HardCodedSpeakers[i].Id);\n    Assert.Equal(_fakeRepository.HardCodedSpeakers[i].Id, speakers[i].Id);\n    Assert.NotNull(_fakeRepository.HardCodedSpeakers[i].Location);\n    Assert.Equal(_fakeRepository.HardCodedSpeakers[i].Location, speakers[i].Location);\n  }\n}    \n```", "```cs\npublic static class SpeakerFactory\n{\n  public static Speaker Create(FakeRepository fakeRepository, int id = 1, string name = \"Joshua\", string location = \"Springfield, IL\")\n  {\n    var speaker = new Speaker\n    {\n      Id = id,\n      Name = name,\n      Location = location\n    };\n\n    fakeRepository.Speakers.Add(speaker);\n\n    return speaker;\n  }\n}\n```", "```cs\npublic class FakeRepository : IRepository\n{\n  public List<Speaker> Speakers = new List<Speaker>();\n  public bool GetAllCalled { get; private set; }\n\n  public IEnumerable<Speaker> GetAll()\n  {\n    GetAllCalled = true;\n\n    return Speakers;\n  }\n}\n```", "```cs\npublic GetAll()\n{\n  _fakeRepository = new FakeRepository();\n  SpeakerFactory.Create(_fakeRepository);\n  _speakerService = new SpeakerService(_fakeRepository);\n}\n```", "```cs\npublic Search()\n{\n  var fakeRepository = new FakeRepository();\n  SpeakerFactory.Create(fakeRepository);\n  SpeakerFactory.Create(fakeRepository, name:\"Josh\");\n  SpeakerFactory.Create(fakeRepository, name:\"Joseph\");\n  SpeakerFactory.Create(fakeRepository, name:\"Bill\");\n  _speakerService = new SpeakerService(fakeRepository);\n}\n```", "```cs\npublic static Speaker IsDeleted(this Speaker speaker)\n{\n  speaker.IsDeleted = true;\n  return speaker;\n}\n```", "```cs\n[Fact]\npublic void GivenSpeakerIsDeletedSpeakerIsNotReturned()\n{\n  // Arrange\n  var fakeRepository = new FakeRepository();\n  SpeakerFactory.Create(fakeRepository).IsDeleted();\n  var speakerService = new SpeakerService(fakeRepository);\n\n  // Act\n  var speakers = speakerService.GetAll().ToList();\n\n  // Assert\n  Assert.NotNull(speakers);\n  Assert.IsAssignableFrom<IEnumerable<SpeakerSummary>>(speakers);\n  Assert.Equal(0, speakers.Count);           \n}\n```", "```cs\npublic IEnumerable<SpeakerSummary> GetAll()\n{\n  return _repository.GetAll()\n    .Where(x => !x.IsDeleted)\n    .Select(speaker => new SpeakerSummary\n      {\n        Id = speaker.Id,\n        Name = speaker.Name,\n        Location = speaker.Location\n      });\n}\n```", "```cs\n[Fact]\npublic void ItExists()\n{\n  // Arrange\n  var speakerServiceMock = new Mock<ISpeakerService>();\n  var controller = new SpeakerController(speakerServiceMock.Object);\n\n  // Act\n  var result = controller.Get();\n}\n```", "```cs\n[Fact]\npublic void ItExists()\n{\n  // Arrange\n  // Act\n  _controller.Get();\n}\n```", "```cs\n[Fact]\npublic void ItAcceptsInteger()\n{\n  // Arrange\n  // Act\n  _controller.Get(1);\n}\n```", "```cs\npublic void Get(int id)\n{\n} \n```", "```cs\n[Fact]\npublic void ItReturnsOkObjectResult()\n{\n  // Arrange\n  // Act\n  var result = _controller.Get(1);\n\n  // Assert\n  Assert.IsType<OkObjectResult>(result);\n}\n```", "```cs\n[Fact]       \npublic void ItReturnsSpeakerDetail()\n{\n  // Arrange\n  // Act\n  var result = _controller.Get(1) as OkObjectResult;\n\n  // Assert\n  Assert.NotNull(result);\n  Assert.NotNull(result.Value);\n  Assert.IsType<SpeakerDetail>(result.Value);\n}\n```", "```cs\npublic IActionResult Get(int id)\n{\n  return Ok(new SpeakerDetail());\n} \n```", "```cs\n[Fact]\npublic void ItCallsGetServiceOnce()\n{\n  // Arrange\n  // Act\n  _controller.Get(1);\n\n  // Assert\n  _speakerServiceMock.Verify(mock => mock.Get(), Times.Once());\n}\n```", "```cs\nvoid Get();\n```", "```cs\npublic void Get()\n{\n  throw new NotImplementedException();\n}\n```", "```cs\npublic IActionResult Get(int id)\n{\n  _speakerService.Get();\n\n  return Ok(new SpeakerDetail());\n}\n```", "```cs\nSpeakerDetail Get();\n```", "```cs\n[Fact]\npublic void ItCallsGetServiceWithProvidedId()\n{\n  // Arrange\n  const int id = 1;\n\n  // Act\n  _controller.Get(id);\n\n  // Assert\n  _speakerServiceMock.Verify(mock => mock.Get(id),Times.Once());\n}\n```", "```cs\nSpeakerDetail Get(int id);\n\n...\n\npublic SpeakerDetail Get(int id)\n{\n  throw new NotImplementedException();\n}\n```", "```cs\n[Fact]\npublic void GivenSpeakerServiceThenResultIsReturned()\n{\n  // Arrange\n  // Act\n  var result = _controller.Get(1) as OkObjectResult;\n\n  // Assert\n  Assert.NotNull(result);\n  var speaker = ((SpeakerDetail)result.Value);\n  Assert.Equal(_speaker, speaker);\n}\n```", "```cs\npublic IActionResult Get(int id)\n{\n  var speaker = _speakerService.Get();\n\n  return Ok(speaker);\n}\n```", "```cs\nusing Microsoft.AspNetCore.Mvc;\nusing SpeakerMeet.Api.Services;\n\nnamespace SpeakerMeet.Api.Controllers\n{\n  [Route(\"api/[controller]\")]\n  public class SpeakerController : Controller\n  {\n    private readonly ISpeakerService _speakerService;\n\n    public SpeakerController(ISpeakerService speakerService)\n    {\n      _speakerService = speakerService;\n    }\n\n    [Route(\"search\")]\n    public IActionResult Search(string searchString)\n    {\n      var speakers = _speakerService.Search(searchString);\n\n      return Ok(speakers);\n    }\n\n    public IActionResult GetAll()\n    {\n      var speakers = _speakerService.GetAll();\n\n      return Ok(speakers);\n    }\n\n    public IActionResult Get(int id)\n    {\n      var speaker = _speakerService.Get(id);\n\n      return Ok(speaker);\n    }\n  }\n}\n```", "```cs\n[Fact]\npublic void ItHasGetMethod()\n{\n  // Act\n  // Arrange\n  _speakerService.Get();\n}\n```", "```cs\npublic void Get()\n{\n}\n```", "```cs\n[Fact]\npublic void ItAcceptsAnInteger()\n{\n  // Act\n  // Arrange\n  _speakerService.Get(1);\n}\n```", "```cs\npublic SpeakerDetail Get(int id)\n{\n}\n```", "```cs\n[Fact]\npublic void ItReturnsSpeakerDetail()\n{\n  // Arrange\n  // Act\n  var speaker = _speakerService.Get(1);\n\n  // Assert\n  Assert.NotNull(speaker);\n  Assert.IsType<SpeakerDetail>(speaker);\n}\n```", "```cs\npublic SpeakerDetail Get(int id)\n{\n  return new SpeakerDetail();\n}\n```", "```cs\n[Fact]\npublic void GivenSpeakerReturnsId()\n{\n  // Arrange\n  // Act\n  var speaker = _speakerService.Get(1);\n\n  // Assert\n  Assert.Equal(1, speaker.Id);\n}\n```", "```cs\npublic SpeakerDetail Get(int id)\n{\n  return new SpeakerDetail\n  {\n    Id = 1,\n    Name = \"Joshua\"\n  };\n}\n```", "```cs\n[Fact]\npublic void GivenSpeakerReturnsName()\n{\n  // Arrange\n  // Act\n  var speaker = _speakerService.Get(1);\n\n  // Assert\n  Assert.Equal(\"Joshua\", speaker.Name);\n}\n```", "```cs\npublic SpeakerDetail Get(int id)\n{\n  return new SpeakerDetail\n  {\n    Id = 1,\n    Name = \"Joshua\"\n  };\n}\n```", "```cs\n[Fact]\npublic void GivenSpeakerReturnsLocation()\n{\n  // Arrange\n  // Act\n  var speaker = _speakerService.Get(1);\n\n  // Assert\n  Assert.Equal(\"Tampa, FL\", speaker.Location);\n}\n```", "```cs\npublic SpeakerDetail Get(int id)\n{\n  return new SpeakerDetail\n  {\n    Id = 1,\n    Name = \"Joshua\",\n    Location = \"Tampa, FL\"\n  };\n}\n```", "```cs\n[Fact]\npublic void GivenSpeakerReturnsSpeakerWithProperties()\n{\n  // Arrange\n  // Act\n  var speaker = _speakerService.Get(1);\n\n  // Assert\n  Assert.Equal(1, speaker.Id);\n  Assert.Equal(\"Joshua\", speaker.Name);\n}\n```", "```cs\n[Fact]\npublic void ItCallsRepository()\n{\n  // Arrange\n  var fakeRepository = new FakeRepository();\n  var service = new SpeakerService(fakeRepository);\n\n  // Act\n  service.Get(-1);\n\n  // Assert\n  Assert.True(fakeRepository.GetCalled);\n}\n```", "```cs\npublic SpeakerDetail Get(int id)\n{\n  _repository.Get();\n\n  return new SpeakerDetail\n  {\n    Id = 1,\n    Name = \"Joshua\"\n  };\n}\n```", "```cs\n[Fact]\npublic void ItReturnsSpeakerFromRepository()\n{\n  // Arrange\n  var fakeRepository = new FakeRepository();\n  var expectedSpeaker = SpeakerFactory.Create(fakeRepository, 2, \"Bill\");\n  var service = new SpeakerService(fakeRepository);\n\n  // Act\n  var actualSpeaker = service.Get(expectedSpeaker.Id);\n\n  // Assert\n  Assert.True(fakeRepository.GetCalled);\n  Assert.Equal(expectedSpeaker.Id, actualSpeaker.Id);\n  Assert.Equal(expectedSpeaker.Name, actualSpeaker.Name);\n}\n```", "```cs\n        Speaker Get(int id);\n```", "```cs\npublic Speaker Get(int id)\n{\n  GetCalled = true;\n\n  return Speakers.Find(x => x.Id == id);\n}\n```", "```cs\npublic SpeakerDetail Get(int id)\n{\n  var speaker = _repository.Get(id);\n\n  return new SpeakerDetail\n  {\n    Id = speaker.Id,\n    Name = speaker.Name\n  };\n}\n```", "```cs\n[Theory]\n[InlineData(1, \"Joshua\")]\n[InlineData(2, \"Bill\")]\n[InlineData(3, \"Suzie\")]\npublic void ItReturnsSpeakerFromRepository(int id, string name)\n{\n  // Arrange\n  var expectedSpeaker = SpeakerFactory.Create(_fakeRepository, id, name);\n  var service = new SpeakerService(_fakeRepository);\n\n  // Act\n  var actualSpeaker = service.Get(expectedSpeaker.Id);\n\n  // Assert\n  Assert.True(_fakeRepository.GetCalled);\n  Assert.Equal(expectedSpeaker.Id, actualSpeaker.Id);\n  Assert.Equal(expectedSpeaker.Name, actualSpeaker.Name);\n}\n```", "```cs\n[Fact]\npublic void GivenSpeakerNotFoundThenSpeakerNotFoundException()\n{\n  // Arrange\n  var service = new SpeakerService(_fakeRepository);\n\n  // Act\n  var exception = Record.Exception(() => service.Get(-1));\n\n  // Assert\n  Assert.IsAssignableFrom<SpeakerNotFoundException>(exception);\n}\n```", "```cs\npublic SpeakerDetail Get(int id)\n{\n  var speaker = _repository.Get(id);\n\n  if (speaker == null)\n  {\n    throw new SpeakerNotFoundException();\n  }\n\n  return new SpeakerDetail\n  {\n    Id = speaker.Id,\n    Name = speaker.Name\n  };\n}\n```", "```cs\n[Fact]\npublic void GivenSpeakerIsDeletedThenSpeakerNotException()\n{\n  // Arrange\n  var expectedSpeaker = SpeakerFactory.Create(_fakeRepository).IsDeleted();\n  var service = new SpeakerService(_fakeRepository);\n\n  // Act\n  var exception = Record.Exception(() => service.Get(expectedSpeaker.Id));\n\n  // Assert\n  Assert.IsAssignableFrom<SpeakerNotFoundException>(exception);\n}\n```", "```cs\npublic SpeakerDetail Get(int id)\n{\n  var speaker = _repository.Get(id);\n\n  if (speaker == null || speaker.IsDeleted)\n  {\n    throw new SpeakerNotFoundException();\n  }\n\n  return new SpeakerDetail\n  {\n    Id = speaker.Id,\n    Name = speaker.Name\n   };\n}\n```"]