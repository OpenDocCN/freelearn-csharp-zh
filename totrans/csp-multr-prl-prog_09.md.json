["```cs\n    using System;\n    using System.Collections.Concurrent;\n    using System.Collections.Generic;\n    using System.IO;\n    using System.Linq;\n    using System.Text;\n    using System.Threading.Tasks;\n    using System.Threading;\n    ```", "```cs\n    using System;\n    using System.Collections.Concurrent;\n    using System.Collections.Generic;\n    using System.IO;\n    using System.Linq;\n    using System.Text;\n    using System.Threading.Tasks;\n    using System.Threading;\n    ```", "```cs\n    public void FirstStage(BlockingCollection<char> output, String PipelineInputFile)\n            {\n                String DisplayData = \"\";\n                try\n                {\n                    foreach (char C in GetData(PipelineInputFile))\n                    {\n     //Displayed characters read in from the file.\n                        DisplayData = DisplayData + C.ToString();\n\n     // Add each character to the buffer for the next stage.\n                        output.Add(C);\n\n                    }\n                }\n                finally\n                {\n                    output.CompleteAdding();\n                }\n          }\n    ```", "```cs\n    public void StageWorker(BlockingCollection<char> input, BlockingCollection<char> output, String PipelineEncryptFile)\n            {\n                String DisplayData = \"\";\n\n                try\n                {\n                    foreach (char C in input.GetConsumingEnumerable())\n                    {\n                        //Encrypt each character.\n                        char encrypted = Encrypt(C);\n\n                        DisplayData = DisplayData + encrypted.ToString();\n\n     //Add characters to the buffer for the next stage.\n                        output.Add(encrypted);\n\n                    }\n\n     //write the encrypted string to the output file.\n                    using (StreamWriter outfile =\n                               new StreamWriter(PipelineEncryptFile))\n                    {\n                        outfile.Write(DisplayData);\n                    }\n\n                }\n                finally\n                {\n                    output.CompleteAdding();\n                }\n            }\n    ```", "```cs\n    public void FinalStage(BlockingCollection<char> input, String PipelineResultsFile)\n            {\n                String OutputString = \"\";\n                String DisplayData = \"\";\n\n                //Read the encrypted characters from the buffer, decrypt them, and display them.\n                foreach (char C in input.GetConsumingEnumerable())\n                {\n                    //Decrypt the data.\n                    char decrypted = Decrypt(C);\n\n                    //Display the decrypted data.\n                    DisplayData = DisplayData + decrypted.ToString();\n\n                    //Add to the output string.\n                    OutputString += decrypted.ToString();\n\n                }\n\n                //write the decrypted string to the output file.\n                using (StreamWriter outfile =\n                           new StreamWriter(PipelineResultsFile))\n                {\n                    outfile.Write(OutputString);\n                }\n            }\n    ```", "```cs\n    public List<char> GetData(String PipelineInputFile)\n            {\n                List<char> Data = new List<char>();\n\n                //Get the Source data.\n                using (StreamReader inputfile = new StreamReader(PipelineInputFile))\n                {\n                    while (inputfile.Peek() >= 0)\n                    {\n                        Data.Add((char)inputfile.Read());\n                    }\n\n                }\n\n                return Data;\n           }\n    ```", "```cs\n    public char Encrypt(char C)\n            {\n                //Take the character, convert to an int, add 1, then convert back to a character.\n                int i = (int)C;\n                i = i + 1;\n                C = Convert.ToChar(i);\n\n                return C;\n    }\n    ```", "```cs\n    public char Decrypt(char C)\n            {\n                int i = (int)C;\n                i = i - 1;\n                C = Convert.ToChar(i);\n\n                return C;\n           }\n    ```", "```cs\n    using System.Collections.Concurrent;\n    using System.IO;\n    using System.Threading;\n    ```", "```cs\n    private static String PipelineResultsFile = @\"c:\\projects\\OutputData.txt\";\n           private static String PipelineEncryptFile = @\"c:\\projects\\EncryptData.txt\";\n           private static String PipelineInputFile = @\"c:\\projects\\InputData.txt\";\n           private Stages Stage;\n    ```", "```cs\n    //Create the Stage object and register the event listeners to update the UI as the stages work.\n    Stage = new Stages();\n    ```", "```cs\n    private void butEncrpt_Click(object sender, RoutedEventArgs e)\n            {\n                //PipeLine Design Pattern\n\n                //Create queues for input and output to stages.\n                int size = 20;\n                BlockingCollection<char> Buffer1 = new BlockingCollection<char>(size);\n                BlockingCollection<char> Buffer2 = new BlockingCollection<char>(size);\n\n                TaskFactory tasks = new TaskFactory(TaskCreationOptions.LongRunning, TaskContinuationOptions.None);\n\n                Task Stage1 = tasks.StartNew(() => Stage.FirstStage(Buffer1, PipelineInputFile));\n                Task Stage2 = tasks.StartNew(() => Stage.StageWorker(Buffer1, Buffer2, PipelineEncryptFile));\n                Task Stage3 = tasks.StartNew(() => Stage.FinalStage(Buffer2, PipelineResultsFile));\n\n                Task.WaitAll(Stage1, Stage2, Stage3);\n\n                //Display the 3 files.\n                using (StreamReader inputfile = new StreamReader(PipelineInputFile))\n                {\n                    while (inputfile.Peek() >= 0)\n                    {\n                        tbStage1.Text = tbStage1.Text + (char)inputfile.Read();\n                    }\n\n                }\n                using (StreamReader inputfile = new StreamReader(PipelineEncryptFile))\n                {\n                    while (inputfile.Peek() >= 0)\n                    {\n                        tbStage2.Text = tbStage2.Text + (char)inputfile.Read();\n                    }\n\n                }\n                using (StreamReader inputfile = new StreamReader(PipelineResultsFile))\n                {\n                    while (inputfile.Peek() >= 0)\n                    {\n                        tbStage3.Text = tbStage3.Text + (char)inputfile.Read();\n                    }\n\n                }\n          }\n    ```", "```cs\n            //Create queues for input and output to stages.\n            int size = 20;\n            BlockingCollection<char> Buffer1 = new BlockingCollection<char>(size);\n            BlockingCollection<char> Buffer2 = new BlockingCollection<char>(size);\n            TaskFactory tasks = new TaskFactory(TaskCreationOptions.LongRunning, TaskContinuationOptions.None);\n\n            Task Stage1 = tasks.StartNew(() => Stage.FirstStage(Buffer1, PipelineInputFile));\n            Task Stage2 = tasks.StartNew(() => Stage.StageWorker(Buffer1, Buffer2, PipelineEncryptFile));\n            Task Stage3 = tasks.StartNew(() => Stage.FinalStage(Buffer2, PipelineResultsFile));\n```", "```cs\n            finally\n            {\n                output.CompleteAdding();\n            }\n```", "```cs\nTaskCreationOptions.LongRunning\n```", "```cs\nforeach (char C in input.GetConsumingEnumerable())\n```", "```cs\nTask.WaitAll(Stage1, Stage2, Stage3);\n```", "```cs\n            //Display the 3 files.\n            using (StreamReader inputfile = new StreamReader(PipelineInputFile))\n            {\n                while (inputfile.Peek() >= 0)\n                {\n                    tbStage1.Text = tbStage1.Text + (char)inputfile.Read();\n                }\n\n            }\n            using (StreamReader inputfile = new StreamReader(PipelineEncryptFile))\n            {\n                while (inputfile.Peek() >= 0)\n                {\n                    tbStage2.Text = tbStage2.Text + (char)inputfile.Read();\n                }\n\n            }\n            using (StreamReader inputfile = new StreamReader(PipelineResultsFile))\n            {\n                while (inputfile.Peek() >= 0)\n                {\n                    tbStage3.Text = tbStage3.Text + (char)inputfile.Read();\n                }\n\n            }\n```", "```cs\n            ActionBlock<int> action = new ActionBlock<int>(x => Console.WriteLine(x));\n\n            action.Post(10);\n```", "```cs\n    using System.Threading.Tasks.Dataflow;\n    using System.IO;\n    ```", "```cs\n    private static String PipelineEncryptFile = @\"c:\\projects\\EncryptData.txt\";\n           private static String PipelineInputFile = @\"c:\\projects\\InputData.txt\";\n    ```", "```cs\n            // Our Producer method.\n            static void Producer(ITargetBlock<char> Target)\n            {\n                String DisplayData = \"\";\n\n                try\n                {\n                    foreach (char C in GetData(PipelineInputFile))\n                    {\n\n                        //Displayed characters read in from the file.\n                        DisplayData = DisplayData + C.ToString();\n\n                        // Add each character to the buffer for the next stage.\n                        Target.Post(C);\n\n                    }\n                }\n\n                finally\n                {\n                    Target.Complete();\n                }\n\n            }\n    ```", "```cs\n            // This is our consumer method. IT runs asynchronously.\n            static async Task<int> Consumer(ISourceBlock<char> Source)\n            {\n                String DisplayData = \"\";\n\n                // Read from the source buffer until the source buffer has no  \n                // available output data. \n                while (await Source.OutputAvailableAsync())\n                {\n                        char C = Source.Receive();\n\n                        //Encrypt each character.\n                        char encrypted = Encrypt(C);\n\n                        DisplayData = DisplayData + encrypted.ToString();\n\n                }\n\n                //write the decrypted string to the output file.\n                using (StreamWriter outfile =\n                            new StreamWriter(PipelineEncryptFile))\n                {\n                    outfile.Write(DisplayData);\n                }\n\n                return DisplayData.Length;\n            }\n    ```", "```cs\n            public static List<char> GetData(String PipelineInputFile)\n            {\n                List<char> Data = new List<char>();\n\n                //Get the Source data.\n                using (StreamReader inputfile = new StreamReader(PipelineInputFile))\n                {\n                    while (inputfile.Peek() >= 0)\n                    {\n                        Data.Add((char)inputfile.Read());\n                    }\n\n                }\n\n                return Data;\n            }\n    ```", "```cs\n            public static char Encrypt(char C)\n            {\n                //Take the character, convert to an int, add 1, then convert back to a character.\n                int i = (int)C;\n                i = i + 1;\n                C = Convert.ToChar(i);\n\n                return C;\n            }\n    ```", "```cs\n            static void Main(string[] args)\n            {\n                // Create the buffer block object to use between the producer and consumer. \n                BufferBlock<char> buffer = new BufferBlock<char>();\n\n                // The consumer method runs asynchronously. Start it now.  \n                Task<int> consumer = Consumer(buffer);\n\n                // Post source data to the dataflow block.\n                Producer(buffer);\n\n                // Wait for the consumer to process all data.\n                consumer.Wait();\n\n                // Print the count of characters from the input file.\n                Console.WriteLine(\"Processed {0} bytes from input file.\", consumer.Result);\n\n                //Print out the input file to the console.\n                Console.WriteLine(\"\\r\\n\\r\\n\");\n                Console.WriteLine(\"This is the input data file. \\r\\n\");\n                using (StreamReader inputfile = new StreamReader(PipelineInputFile))\n                {\n                    while (inputfile.Peek() >= 0)\n                    {\n                        Console.Write((char)inputfile.Read());\n                    }\n\n                }\n\n                //Print out the encrypted file to the console.\n                Console.WriteLine(\"\\r\\n\\r\\n\");\n                Console.WriteLine(\"This is the encrypted data file. \\r\\n\");\n                using (StreamReader encryptfile = new StreamReader(PipelineEncryptFile))\n                {\n                    while (encryptfile.Peek() >= 0)\n                    {\n                        Console.Write((char)encryptfile.Read());\n                    }\n\n                }\n\n                //Wait before closing the application so we can see the results.\n                Console.ReadLine();\n            }\n    ```", "```cs\nTask<int> consumer = Consumer(buffer);\n```", "```cs\nstatic async Task<int> Consumer(ISourceBlock<char> Source)\n```", "```cs\nProducer(buffer);\n```", "```cs\nconsumer.Wait();\n```", "```cs\n     while (await Source.OutputAvailableAsync())\n            {\n                    char C = Source.Receive();\n\n                    //Encrypt each character.\n                    char encrypted = Encrypt(C);\n\n                    DisplayData = DisplayData + encrypted.ToString();\n\n            }\n```", "```cs\nawait Source.OutputAvailableAsync())\n```", "```cs\nchar C = Source.Receive();\n```", "```cs\nGetData(PipelineInputFile)\n```", "```cs\nTarget.Post(C);\n```", "```cs\nstatic void Producer(ITargetBlock<char> Target)\n```", "```cs\nTarget.Complete();\n```", "```cs\n     // Print the count of characters from the input file.\n            Console.WriteLine(\"Processed {0} bytes from input file.\", consumer.Result);\n\n            //Print out the input file to the console.\n            Console.WriteLine(\"\\r\\n\\r\\n\");\n            Console.WriteLine(\"This is the input data file. \\r\\n\");\n            using (StreamReader inputfile = new StreamReader(PipelineInputFile))\n            {\n                while (inputfile.Peek() >= 0)\n                {\n                    Console.Write((char)inputfile.Read());\n                }\n\n            }\n\n            //Print out the encrypted file to the console.\n            Console.WriteLine(\"\\r\\n\\r\\n\");\n            Console.WriteLine(\"This is the encrypted data file. \\r\\n\");\n            using (StreamReader encryptfile = new StreamReader(PipelineEncryptFile))\n            {\n                while (encryptfile.Peek() >= 0)\n                {\n                    Console.Write((char)encryptfile.Read());\n                }\n\n            }\n```"]