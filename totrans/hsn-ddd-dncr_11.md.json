["```cs\n// Loading:\nstate = foreach(event in history: state = when(state, event))\n\n// Command handling:\nevent = handle(state, command)\n```", "```cs\nprotected override void When(object @event)\n{\n    switch (@event)\n    {\n        case Events.UserRegistered e:\n            Id = new UserId(e.UserId);\n            FullName = new FullName(e.FullName);\n            DisplayName = new DisplayName(e.DisplayName);\n            break;\n        case Events.UserFullNameUpdated e:\n            FullName = new FullName(e.FullName);\n            break;\n        case Events.UserDisplayNameUpdated e:\n            DisplayName = new DisplayName(e.DisplayName);\n            break;\n        case Events.ProfilePhotoUploaded e:\n            PhotoUrl = e.PhotoUrl;\n            break;\n    }\n}\n```", "```cs\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Marketplace.ClassifiedAd\n{\n    public static class Queries\n    {\n        public static ReadModels.ClassifiedAdDetails Query(\n            this IEnumerable<ReadModels.ClassifiedAdDetails> items,\n            QueryModels.GetPublicClassifiedAd query) \n                => items.FirstOrDefault(\n                    x => x.ClassifiedAdId == query.ClassifiedAdId);\n    }\n}\n```", "```cs\nusing System.Collections.Generic;\nusing Marketplace.Infrastructure;\nusing Microsoft.AspNetCore.Mvc;\nusing Serilog;\n\nnamespace Marketplace.ClassifiedAd\n{\n    [Route(\"/ad\")]\n    public class ClassifiedAdsQueryApi : Controller\n    {\n        private static ILogger _log = \n        Log.ForContext<ClassifiedAdsQueryApi>();\n\n        private readonly IEnumerable<ReadModels.ClassifiedAdDetails> \n        _items;\n\n        public ClassifiedAdsQueryApi(\n            IEnumerable <ReadModels.ClassifiedAdDetails> items) => \n            _items = items;\n\n        [HttpGet]\n        public IActionResult Get(\n            QueryModels.GetPublicClassifiedAd request) => \n            RequestHandler.HandleQuery(() => _items.Query(request), \n            _log);\n    }\n}\n```", "```cs\npublic static IActionResult HandleQuery<TModel>(\n    Func<TModel> query, ILogger log)\n{\n    try\n    {\n        return new OkObjectResult(query());\n    }\n    catch (Exception e)\n    {\n        log.Error(e, \"Error handling the query\");\n        return new BadRequestObjectResult(new\n        {\n            error = e.Message, stackTrace = e.StackTrace\n        });\n    }\n}\n```", "```cs\nusing System;\nusing System.Text;\nusing EventStore.ClientAPI;\nusing Newtonsoft.Json;\n\nnamespace Marketplace.Infrastructure\n{\n    public static class EventDeserializer\n    {\n        public static object Deserialzie(this ResolvedEvent \n        resolvedEvent)\n        {\n            var meta = JsonConvert.DeserializeObject<EventMetadata>(\n                Encoding.UTF8.GetString(resolvedEvent.Event.Metadata));\n            var dataType = Type.GetType(meta.ClrType);\n            var jsonData = Encoding.UTF8.GetString(\n                resolvedEvent.Event.Data);\n            var data = JsonConvert.DeserializeObject(\n                jsonData, dataType);\n            return data;\n        }\n    }\n}\n```", "```cs\npublic async Task<T> Load<T, TId>(TId aggregateId)\n    where T : AggregateRoot<TId>\n{\n    if (aggregateId == null)\n        throw new ArgumentNullException(nameof(aggregateId));\n\n    var stream = GetStreamName<T, TId>(aggregateId);\n    var aggregate = (T) Activator.CreateInstance(typeof(T), true);\n\n    var page = await _connection.ReadStreamEventsForwardAsync(\n        stream, 0, 1024, false);\n\n    aggregate.Load(page.Events.Select(resolvedEvent => \n        resolvedEvent.Deserialzie()).ToArray());\n\n    return aggregate;\n}\n```", "```cs\npublic void Start()\n{\n    var settings = new CatchUpSubscriptionSettings(2000, 500,\n        Log.IsEnabled(LogEventLevel.Verbose),\n        true, \"try-out-subscription\");\n\n    _subscription = _connection.SubscribeToAllFrom(Position.Start,\n        settings, EventAppeared);\n}\n```", "```cs\npublic void Stop() => _subscription.Stop();\n```", "```cs\nprivate Task EventAppeared(EventStoreCatchUpSubscription subscription, ResolvedEvent resolvedEvent)\n{\n    var @event = resolvedEvent.Deserialzie();\n\n    switch (@event)\n    {\n        case Events.ClassifiedAdCreated e:\n            _items.Add(new ReadModels.ClassifiedAdDetails\n            {\n                ClassifiedAdId = e.Id\n            });\n            break;\n        case Events.ClassifiedAdTitleChanged e:\n            UpdateItem(e.Id, ad => ad.Title = e.Title);\n            break;\n    }\n\n    return Task.CompletedTask;\n}\n```", "```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing EventStore.ClientAPI;\nusing Marketplace.ClassifiedAd;\nusing Marketplace.Domain.ClassifiedAd;\nusing Serilog.Events;\nusing ILogger = Serilog.ILogger;\n\nnamespace Marketplace.Infrastructure\n{\n    public class EsSubscription\n    {\n        private static readonly ILogger Log = \n        Serilog.Log.ForContext<EsSubscription>();\n\n        private readonly IEventStoreConnection _connection;\n        private readonly IList<ReadModels.ClassifiedAdDetails> _items;\n        private EventStoreAllCatchUpSubscription _subscription;\n\n        public EsSubscription(IEventStoreConnection connection, \n            IList<ReadModels.ClassifiedAdDetails> items)\n        {\n            _connection = connection;\n            _items = items;\n        }\n\n        public void Start()\n        {\n            var settings = new CatchUpSubscriptionSettings(2000, 500,\n                Log.IsEnabled(LogEventLevel.Verbose),\n                true, \"try-out-subscription\");\n\n            _subscription = _connection.SubscribeToAllFrom(\n                Position.Start, settings, EventAppeared);\n        }\n\n        private Task EventAppeared(\n            EventStoreCatchUpSubscription \n            subscription, ResolvedEvent resolvedEvent)\n        {\n            if (resolvedEvent.Event.EventType.StartsWith(\"$\")) \n                return Task.CompletedTask;\n\n            var @event = resolvedEvent.Deserialzie();\n\n            Log.Debug(\"Projecting event {type}\", \n                @event.GetType().Name);\n\n            switch (@event)\n            {\n                case Events.ClassifiedAdCreated e:\n                    _items.Add(new ReadModels.ClassifiedAdDetails\n                    {\n                        ClassifiedAdId = e.Id\n                    });\n                    break;\n                case Events.ClassifiedAdTitleChanged e:\n                    UpdateItem(e.Id, ad => ad.Title = e.Title);\n                    break;\n                case Events.ClassifiedAdTextUpdated e:\n                    UpdateItem(e.Id, ad => ad.Description = e.AdText);\n                    break;\n                case Events.ClassifiedAdPriceUpdated e:\n                    UpdateItem(e.Id, ad =>\n                    {\n                        ad.Price = e.Price;\n                        ad.CurrencyCode = e.CurrencyCode;\n                    });\n                    break;\n            }\n\n            return Task.CompletedTask;\n        }\n\n        private void UpdateItem(Guid id, \n            Action<ReadModels.ClassifiedAdDetails> update)\n        {\n            var item = _items.FirstOrDefault(\n                x => x.ClassifiedAdId == id);\n            if (item == null) return;\n\n            update(item);\n        }\n\n        public void Stop() => _subscription.Stop();\n    }\n}\n```", "```cs\nusing System.Threading;\nusing System.Threading.Tasks;\nusing EventStore.ClientAPI;\nusing Marketplace.Infrastructure;\nusing Microsoft.Extensions.Hosting;\n\nnamespace Marketplace\n{\n    public class EventStoreService : IHostedService\n    {\n        private readonly IEventStoreConnection _esConnection;\n        private readonly EsSubscription _subscription;\n\n        public EventStoreService(\n            IEventStoreConnection esConnection, \n            EsSubscription subscription)\n        {\n            _esConnection = esConnection;\n            _subscription = subscription;\n        }\n\n        public async Task StartAsync(\n            CancellationToken cancellationToken)\n        {\n            await _esConnection.ConnectAsync();\n            _subscription.Start();\n        }\n\n        public Task StopAsync(CancellationToken cancellationToken)\n        {\n            _subscription.Stop();\n            _esConnection.Close();\n\n            return Task.CompletedTask;\n        }\n    }\n}\n```", "```cs\nvar items = new List<ReadModels.ClassifiedAdDetails>();\nservices.AddSingleton<IEnumerable<ReadModels.ClassifiedAdDetails>>(items);\n\nvar subscription = new EsSubscription(esConnection, items);\nservices.AddSingleton<IHostedService>(\n    new EventStoreService(esConnection, subscription));\n```", "```cs\nLog.Logger = new LoggerConfiguration()\n    .MinimumLevel.Debug()\n    .WriteTo.Console()\n    .CreateLogger();\n```", "```cs\nHosting environment: Development\nContent root path: /~/Dev/ddd-book/chapter11/Marketplace/bin/Debug/netcoreapp2.1\nNow listening on: http://localhost:5000\nApplication started. Press Ctrl+C to shut down.\n[21:00:17 DBG] Projecting event ClassifiedAdCreated\n[21:00:17 DBG] Projecting event ClassifiedAdTitleChanged\n[21:00:17 DBG] Projecting event ClassifiedAdTextUpdated\n[21:00:17 DBG] Projecting event ClassifiedAdPriceUpdated\n[21:00:17 DBG] Projecting event ClassidiedAdSentForReview\n[21:00:17 DBG] Projecting event ClassifiedAdPublished\n[21:00:48 DBG] Projecting event ClassifiedAdCreated\n[21:00:48 DBG] Projecting event ClassifiedAdTitleChanged\n[21:00:48 DBG] Projecting event ClassifiedAdTextUpdated\n[21:00:48 DBG] Projecting event ClassifiedAdPriceUpdated\n[21:00:48 DBG] Projecting event ClassidiedAdSentForReview\n[21:00:48 DBG] Projecting event ClassifiedAdPublished\n[21:00:48 DBG] Projecting event ClassifiedAdCreated\n[21:00:48 DBG] Projecting event ClassidiedAdSentForReview\n[21:00:48 DBG] Projecting event ClassifiedAdTitleChanged\n[21:00:48 DBG] Projecting event ClassifiedAdPublished\n[21:00:48 DBG] Projecting event ClassifiedAdPriceUpdated\n[21:00:48 DBG] Projecting event ClassifiedAdCreated\n[21:00:48 DBG] Projecting event ClassifiedAdTextUpdated\n```", "```cs\nprivate void UpdateMultipleItems(\n    Func<ReadModels.ClassifiedAdDetails, bool> query,\n    Action<ReadModels.ClassifiedAdDetails> update)\n{\n    foreach (var item in _items.Where(query))\n        update(item);\n}\n```", "```cs\nprivate Task EventAppeared(EventStoreCatchUpSubscription subscription, \n    ResolvedEvent resolvedEvent)\n{\n    if (resolvedEvent.Event.EventType.StartsWith(\"$\")) \n        return Task.CompletedTask;\n\n    var @event = resolvedEvent.Deserialzie();\n\n    Log.Debug(\"Projecting event {type}\", @event.GetType().Name);\n\n    switch (@event)\n    {\n        case Events.ClassifiedAdCreated e:\n            _items.Add(new ReadModels.ClassifiedAdDetails\n            {\n                ClassifiedAdId = e.Id,\n                SellerId = e.OwnerId\n            });\n            break;\n        case Events.ClassifiedAdTitleChanged e:\n            UpdateItem(e.Id, ad => ad.Title = e.Title);\n            break;\n        case Events.ClassifiedAdTextUpdated e:\n            UpdateItem(e.Id, ad => ad.Description = e.AdText);\n            break;\n        case Events.ClassifiedAdPriceUpdated e:\n            UpdateItem(e.Id, ad =>\n            {\n                ad.Price = e.Price;\n                ad.CurrencyCode = e.CurrencyCode;\n            });\n            break;\n        case Domain.UserProfile.Events.UserDisplayNameUpdated e:\n            UpdateMultipleItems(x => x.SellerId == e.UserId, \n                x => x.SellersDisplayName = e.DisplayName);\n            break;\n    }\n\n    return Task.CompletedTask;\n}\n```", "```cs\nusing System.Threading.Tasks;\n\nnamespace Marketplace.Framework\n{\n    public interface IProjection\n    {\n        Task Project(object @event);\n    }\n}\n```", "```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Marketplace.Domain.ClassifiedAd;\nusing Marketplace.Framework;\n\nnamespace Marketplace.Projections\n{\n    public class ClassifiedAdDetailsProjection : IProjection\n    {\n        private List<ReadModels.ClassifiedAdDetails> _items;\n\n        public ClassifiedAdDetailsProjection(List<ReadModels.\n            ClassifiedAdDetails> items)\n        {\n            _items = items;\n        }\n\n        public Task Project(object @event)\n        {\n            switch (@event)\n            {\n                case Events.ClassifiedAdCreated e:\n                    _items.Add(new ReadModels.ClassifiedAdDetails\n                    {\n                        ClassifiedAdId = e.Id,\n                        SellerId = e.OwnerId\n                    });\n                    break;\n                case Events.ClassifiedAdTitleChanged e:\n                    UpdateItem(e.Id, ad => ad.Title = e.Title);\n                    break;\n                case Events.ClassifiedAdTextUpdated e:\n                    UpdateItem(e.Id, ad => ad.Description = e.AdText);\n                    break;\n                case Events.ClassifiedAdPriceUpdated e:\n                    UpdateItem(e.Id, ad =>\n                    {\n                        ad.Price = e.Price;\n                        ad.CurrencyCode = e.CurrencyCode;\n                    });\n                    break;\n                case Domain.UserProfile.Events.UserDisplayNameUpdated \n                e:\n\n                    UpdateMultipleItems(x => x.SellerId == e.UserId,\n                        x => x.SellersDisplayName = e.DisplayName);\n                    break;\n            }\n\n            return Task.CompletedTask;\n        }\n\n        private void UpdateItem(Guid id,\n            Action<ReadModels.ClassifiedAdDetails> update)\n        {\n            var item = _items.FirstOrDefault(\n                x => x.ClassifiedAdId == id);\n            if (item == null) return;\n\n            update(item);\n        }\n\n        private void UpdateMultipleItems(\n            Func<ReadModels.ClassifiedAdDetails, bool> query,\n            Action<ReadModels.ClassifiedAdDetails> update)\n        {\n            foreach (var item in _items.Where(query))\n                update(item);\n        }\n    }\n}\n```", "```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Marketplace.Domain.UserProfile;\nusing Marketplace.Framework;\n\nnamespace Marketplace.Projections\n{\n    public class UserDetailsProjection : IProjection\n    {\n        List<ReadModels.UserDetails> _items;\n\n        public UserDetailsProjection(\n            List<ReadModels.UserDetails> items)\n        {\n            _items = items;\n        }\n\n        public Task Project(object @event)\n        {\n            switch (@event)\n            {\n                case Events.UserRegistered e:\n                    _items.Add(new ReadModels.UserDetails\n                    {\n                        UserId = e.UserId,\n                        DisplayName = e.DisplayName\n                    });\n                    break;\n                case Events.UserDisplayNameUpdated e:\n                    UpdateItem(e.UserId, \n                        x => x.DisplayName = e.DisplayName);\n                    break;\n            }\n\n            return Task.CompletedTask;\n        }\n\n        private void UpdateItem(Guid id, \n            Action<ReadModels.UserDetails> update)\n        {\n            var item = _items.FirstOrDefault(x => x.UserId == id);\n            if (item == null) return;\n\n            update(item);\n        }\n    }\n}\n```", "```cs\nusing System;\n\nnamespace Marketplace.Projections\n{\n    public static class ReadModels\n    {\n        public class ClassifiedAdDetails\n        {\n            public Guid ClassifiedAdId { get; set; }\n            public string Title { get; set; }\n            public decimal Price { get; set; }\n            public string CurrencyCode { get; set; }\n            public string Description { get; set; }\n            public Guid SellerId { get; set; }\n            public string SellersDisplayName { get; set; }\n            public string[] PhotoUrls { get; set; }\n        }\n\n        public class UserDetails\n        {\n            public Guid UserId { get; set; }\n            public string DisplayName { get; set; }\n        }\n    }\n}\n```", "```cs\nusing System.Linq;\nusing System.Threading.Tasks;\nusing EventStore.ClientAPI;\nusing Marketplace.Framework;\nusing Serilog;\nusing Serilog.Events;\n\nnamespace Marketplace.Infrastructure\n{\n    public class ProjectionManager\n    {\n        private readonly IEventStoreConnection _connection;\n        private readonly IProjection[] _projections;\n        private EventStoreAllCatchUpSubscription _subscription;\n\n        public ProjectionManager(IEventStoreConnection connection, \n            params IProjection[] projections)\n        {\n            _connection = connection;\n            _projections = projections;\n        }\n\n        public void Start()\n        {\n            var settings = new CatchUpSubscriptionSettings(2000, 500,\n                Log.IsEnabled(LogEventLevel.Verbose),\n                true, \"try-out-subscription\");\n            _subscription = _connection.SubscribeToAllFrom(\n                Position.Start, settings, EventAppeared);\n        }\n\n        public void Stop() => _subscription.Stop();\n\n        private Task EventAppeared(EventStoreCatchUpSubscription _, \n            ResolvedEvent resolvedEvent)\n        {\n            if (resolvedEvent.Event.EventType.StartsWith(\"$\")) \n                return Task.CompletedTask;\n\n            var @event = resolvedEvent.Deserialzie();\n\n            Log.Debug(\"Projecting event {type}\", \n                @event.GetType().Name);\n            return Task.WhenAll(_projections.Select(\n                x => x.Project(@event)));\n        }\n    }\n}\n```", "```cs\nusing System.Threading;\nusing System.Threading.Tasks;\nusing EventStore.ClientAPI;\nusing Marketplace.Infrastructure;\nusing Microsoft.Extensions.Hosting;\n\nnamespace Marketplace\n{\n    public class EventStoreService : IHostedService\n    {\n        private readonly IEventStoreConnection _esConnection;\n        private readonly ProjectionManager _projectionManager;\n\n        public EventStoreService(IEventStoreConnection esConnection, \n            ProjectionManager projectionManager)\n        {\n            _esConnection = esConnection;\n            _projectionManager = projectionManager;\n        }\n\n        public async Task StartAsync(\n            CancellationToken cancellationToken)\n        {\n            await _esConnection.ConnectAsync();\n            _projectionManager.Start();\n        }\n\n        public Task StopAsync(CancellationToken cancellationToken)\n        {\n            _projectionManager.Stop();\n            _esConnection.Close();\n\n            return Task.CompletedTask;\n        }\n    }\n}\n```", "```cs\nvar classifiedAdDetails = new List<ReadModels.ClassifiedAdDetails>();\nservices.AddSingleton<IEnumerable<ReadModels.ClassifiedAdDetails>>(classifiedAdDetails);\nvar userDetails = new List<ReadModels.UserDetails>();\nservices.AddSingleton<IEnumerable<ReadModels.UserDetails>>(userDetails);\n\nvar projectionManager = new ProjectionManager(esConnection, \n    new ClassifiedAdDetailsProjection(classifiedAdDetails),\n    new UserDetailsProjection(userDetails));\n```", "```cs\n[21:58:04 DBG] Projecting event UserRegistered\n[21:58:04 DBG] Projecting event UserRegistered\n[21:58:04 DBG] Projecting event UserRegistered\n[21:58:04 DBG] Projecting event UserRegistered\n```", "```cs\npublic void Start()\n{\n    var settings = new CatchUpSubscriptionSettings(2000, 500,\n        Log.IsEnabled(LogEventLevel.Verbose),\n        false, \"try-out-subscription\");\n    _subscription = _connection.SubscribeToAllFrom(Position.Start,\n        settings, EventAppeared);\n}\n```", "```cs\n[22:30:38 DBG] Projecting event ClassifiedAdCreated\n[22:30:38 DBG] Projecting event ClassifiedAdTitleChanged\n[22:30:38 DBG] Projecting event ClassifiedAdTextUpdated\n[22:30:38 DBG] Projecting event ClassifiedAdPriceUpdated\n[22:30:38 DBG] Projecting event ClassifiedAdSentForReview\n[22:30:38 DBG] Projecting event ClassifiedAdPublished\n[22:30:48 DBG] Projecting event UserRegistered\n```", "```cs\npublic ClassifiedAdDetailsProjection(\n    List<ReadModels.ClassifiedAdDetails> items,\n    Func<Guid, string> getUserDisplayName)\n{\n    _items = items;\n    _getUserDisplayName = getUserDisplayName;\n}\n```", "```cs\ncase Events.ClassifiedAdCreated e:\n    _items.Add(new ReadModels.ClassifiedAdDetails\n    {\n        ClassifiedAdId = e.Id,\n        SellerId = e.OwnerId,\n        SellersDisplayName = _getUserDisplayName(e.OwnerId)\n    });\n    break;\n```", "```cs\nvar projectionManager = new ProjectionManager(esConnection, \n    new ClassifiedAdDetailsProjection(classifiedAdDetails, \n        userId => userDetails.FirstOrDefault(\n            x => x.UserId == userId)?.DisplayName),\n```", "```cs\npublic class ClassifiedAdDetails\n{\n    public Guid ClassifiedAdId { get; set; }\n    public string Title { get; set; }\n    public decimal Price { get; set; }\n    public string CurrencyCode { get; set; }\n    public string Description { get; set; }\n    public Guid SellerId { get; set; }\n    public string SellersDisplayName { get; set; }\n    public string SellersPhotoUrl { get; set; }\n    public string[] PhotoUrls { get; set; }\n}\n```", "```cs\npublic void Publish(UserId userId) =>\n    Apply(new Events.ClassifiedAdPublished\n    {\n        Id = Id, \n        ApprovedBy = userId,\n        OwnerId = OwnerId\n    });\n```", "```cs\npublic static class ClassifiedAdUpcastedEvents\n{\n    public static class V1\n    {\n        public class ClassifiedAdPublished\n        {\n            public Guid Id { get; set; }\n            public Guid OwnerId { get; set; }\n            public string SellersPhotoUrl { get; set; }\n            public Guid ApprovedBy { get; set; }\n        }\n    }\n}\n```", "```cs\nusing System;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing EventStore.ClientAPI;\nusing Newtonsoft.Json;\n\nnamespace Marketplace.Infrastructure\n{\n    public static class EventStoreExtensions\n    {\n        public static Task AppendEvents(\n            this IEventStoreConnection connection,\n            string streamName, long version,\n            params object[] events)\n        {\n            if (events == null || !events.Any()) return \n                Task.CompletedTask;\n\n            var preparedEvents = events\n                .Select(@event =>\n                    new EventData(\n                        eventId: Guid.NewGuid(),\n                        type: @event.GetType().Name,\n                        isJson: true,\n                        data: Serialize(@event),\n                        metadata: Serialize(\n                            new EventMetadata {ClrType = \n                                @event.GetType().AssemblyQualifiedName})\n                    ))\n                .ToArray();\n            return connection.AppendToStreamAsync(\n                streamName,\n                version,\n                preparedEvents);\n        } \n\n        private static byte[] Serialize(object data)\n            => Encoding.UTF8.GetBytes(\n                JsonConvert.SerializeObject(data));\n    }\n\n}\n```", "```cs\nusing System;\nusing System.Threading.Tasks;\nusing EventStore.ClientAPI;\nusing Marketplace.Framework;\nusing Marketplace.Infrastructure;\nusing static Marketplace.Domain.ClassifiedAd.Events;\nusing static Marketplace.Projections.ClassifiedAdUpcastedEvents;\n\nnamespace Marketplace.Projections\n{\n    public class ClassifiedAdUpcasters : IProjection\n    {\n        private readonly IEventStoreConnection _eventStoreConnection;\n        private readonly Func<Guid, string> _getUserPhoto;\n        private const string StreamName = \"UpcastedClassifiedAdEvents\";\n\n        public ClassifiedAdUpcasters(\n            IEventStoreConnection eventStoreConnection,\n            Func<Guid, string> getUserPhoto)\n        {\n            _eventStoreConnection = eventStoreConnection;\n            _getUserPhoto = getUserPhoto;\n        }\n\n        public async Task Project(object @event)\n        {\n            switch (@event)\n            {\n                case ClassifiedAdPublished e:\n                    var photoUrl = _getUserPhoto(e.OwnerId);\n                    var newEvent = new V1.ClassifiedAdPublished\n                    {\n                        Id = e.Id,\n                        OwnerId = e.OwnerId,\n                        ApprovedBy = e.ApprovedBy,\n                        SellersPhotoUrl = photoUrl\n                    };\n                    await _eventStoreConnection.AppendEvents(\n                        StreamName,\n                        ExpectedVersion.Any,\n                        newEvent);\n                    break;\n            }\n        }\n    }\n\n    public static class ClassifiedAdUpcastedEvents\n    {\n        public static class V1\n        {\n            public class ClassifiedAdPublished\n            {\n                public Guid Id { get; set; }\n                public Guid OwnerId { get; set; }\n                public string SellersPhotoUrl { get; set; }\n                public Guid ApprovedBy { get; set; }\n            }\n        }\n    }\n}\n```", "```cs\ncase V1.ClassifiedAdPublished e:\n    UpdateItem(e.Id, ad => ad.SellersPhotoUrl = e.SellersPhotoUrl);\n    break;\n```", "```cs\nvar projectionManager = new ProjectionManager(esConnection, \n    new ClassifiedAdDetailsProjection(classifiedAdDetails, \n        userId => userDetails.FirstOrDefault(\n            x => x.UserId == userId)?.DisplayName),\n    new UserDetailsProjection(userDetails),\n    new ClassifiedAdUpcasters(esConnection,\n        userId => userDetails.FirstOrDefault(\n            x => x.UserId == userId)?.PhotoUrl));\n```", "```cs\n{\n  \"classifiedAdId\": \"556bc798-bacc-4bb8-a55b-50144add4f17\",\n  \"title\": \"Wooden table\",\n  \"price\": 10,\n  \"currencyCode\": \"EUR\",\n  \"description\": \"The table is 100 years old but still solid. Probably \n  worth a fortune.\",\n  \"sellerId\": \"8dd8c5c6-6edb-4e42-ac9e-a232ea445b76\",\n  \"sellersDisplayName\": \"JustPrejudice\",\n  \"sellersPhotoUrl\": \"https://www.biography.com/.image/t_share\n  /MTE1ODA0OTcxNTQ2ODcxMzA5/jane-austen-9192819-1-402.jpg\",\n  \"photoUrls\": null\n}\n```", "```cs\nusing System.Threading.Tasks;\nusing EventStore.ClientAPI;\n\nnamespace Marketplace.Framework\n{\n    public interface ICheckpointStore\n    {\n        Task<Position> GetCheckpoint();\n        Task StoreCheckpoint(Position checkpoint);\n    }\n}\n```", "```cs\nusing EventStore.ClientAPI;\n\nnamespace Marketplace.Infrastructure\n{\n    public class Checkpoint\n    {\n        public string Id { get; set; }\n        public Position Position { get; set; }\n    }\n}\n```", "```cs\nusing System;\nusing System.Threading.Tasks;\nusing EventStore.ClientAPI;\nusing Marketplace.Framework;\nusing Raven.Client.Documents.Session;\n\nnamespace Marketplace.Infrastructure\n{\n    public class RavenDbCheckpointStore : ICheckpointStore\n    {\n        private readonly Func<IAsyncDocumentSession> _getSession;\n        private readonly string _checkpointName;\n\n        public RavenDbCheckpointStore(\n            Func<IAsyncDocumentSession> getSession,\n            string checkpointName)\n        {\n            _getSession = getSession;\n            _checkpointName = checkpointName;\n        }\n\n        public async Task<Position> GetCheckpoint()\n        {\n            using var session = _getSession();\n            var checkpoint = await session\n                .LoadAsync<Checkpoint>(_checkpointName);\n            return checkpoint?.Position ?? Position.Start;\n        }\n\n        public async Task StoreCheckpoint(Position position)\n        {\n            using var session = _getSession();\n\n            var checkpoint = await session\n                .LoadAsync<Checkpoint>(_checkpointName);\n\n            if (checkpoint == null)\n            {\n                checkpoint = new Checkpoint\n                {\n                    Id = _checkpointName\n                };\n                await session.StoreAsync(checkpoint);\n            }\n\n            checkpoint.Position = position;\n            await session.SaveChangesAsync();\n        }\n    }\n}\n```", "```cs\nusing System.Linq;\nusing System.Threading.Tasks;\nusing EventStore.ClientAPI;\nusing Marketplace.Framework;\nusing Serilog;\nusing Serilog.Events;\n\nnamespace Marketplace.Infrastructure\n{\n    public class ProjectionManager\n    {\n        private readonly IEventStoreConnection _connection;\n        private readonly ICheckpointStore _checkpointStore;\n        private readonly IProjection[] _projections;\n        private EventStoreAllCatchUpSubscription _subscription;\n\n        public ProjectionManager(\n            IEventStoreConnection connection, \n            ICheckpointStore checkpointStore, \n            params IProjection[] projections)\n        {\n            _connection = connection;\n            _checkpointStore = checkpointStore;\n            _projections = projections;\n        }\n\n        public async Task Start()\n        {\n            var settings = new CatchUpSubscriptionSettings(2000, 500,\n                Log.IsEnabled(LogEventLevel.Verbose),\n                false, \"try-out-subscription\");\n\n            var position = await _checkpointStore.GetCheckpoint();\n            _subscription = _connection.SubscribeToAllFrom(position,\n                settings, EventAppeared);\n        }\n\n        public void Stop() => _subscription.Stop();\n\n        private async Task EventAppeared(\n            EventStoreCatchUpSubscription _, \n            ResolvedEvent resolvedEvent)\n        {\n            if (resolvedEvent.Event.EventType.StartsWith(\"$\")) return;\n\n            var @event = resolvedEvent.Deserialzie();\n\n            Log.Debug(\"Projecting event {type}\", \n                @event.GetType().Name);\n            await Task.WhenAll(_projections.Select(\n                x => x.Project(@event)));\n\n            await _checkpointStore.StoreCheckpoint(\n                resolvedEvent.OriginalPosition.Value);\n        }\n    }\n}\n```", "```cs\nvar documentStore = ConfigureRavenDb(\n    Configuration.GetSection(\"ravenDb\"));\n\nFunc<IAsyncDocumentSession> getSession = \n    () => documentStore.OpenAsyncSession();\n\nservices.AddTransient(c => getSession());\n```", "```cs\nusing System;\nusing System.Linq.Expressions;\nusing System.Threading.Tasks;\nusing Marketplace.Framework;\nusing Raven.Client.Documents;\nusing Raven.Client.Documents.Linq;\nusing Raven.Client.Documents.Session;\n\nnamespace Marketplace.Infrastructure\n{\n    public abstract class RavenDbProjection<T> : IProjection\n    {\n        protected RavenDbProjection(\n            Func<IAsyncDocumentSession> getSession\n        )\n            => GetSession = getSession;\n\n        protected Func<IAsyncDocumentSession> GetSession { get; }\n\n        public abstract Task Project(object @event);\n\n        protected Task Create(Func<Task<T>> model)\n            => UsingSession(\n                async session => \n                    await session.StoreAsync(await model())\n            );\n\n        protected Task UpdateOne(Guid id, Action<T> update)\n            => UsingSession(\n                session =>\n                    UpdateItem(session, id, update)\n            );\n\n        protected Task UpdateWhere(\n            Expression<Func<T, bool>> where,\n            Action<T> update\n        ) => UsingSession(\n            session =>\n                UpdateMultipleItems(\n                    session, where, update\n                )\n        );\n\n        private static async Task UpdateItem(\n            IAsyncDocumentSession session, Guid id,\n            Action<T> update\n        )\n        {\n            var item = await session\n                .LoadAsync<T>(id.ToString());\n\n            if (item == null) return;\n\n            update(item);\n        }\n\n        async Task UpdateMultipleItems(\n            IAsyncDocumentSession session,\n            Expression<Func<T, bool>> query, Action<T> update\n        )\n        {\n            var items = await session\n                .Query<T>()\n                .Where(query)\n                .ToListAsync();\n            foreach (var item in items)\n                update(item);\n        }\n\n        protected async Task UsingSession(\n            Func<IAsyncDocumentSession, Task> operation\n        )\n        {\n            using var session = GetSession();\n\n            await operation(session);\n            await session.SaveChangesAsync();\n        }\n    }\n}\n```", "```cs\nusing System;\nusing System.Threading.Tasks;\nusing Marketplace.Domain.UserProfile;\nusing Marketplace.Infrastructure;\nusing Raven.Client.Documents.Session;\n\nnamespace Marketplace.Projections\n{\n    public class UserDetailsProjection\n        : RavenDbProjection<ReadModels.UserDetails>\n    {\n        public UserDetailsProjection(\n            Func<IAsyncDocumentSession> getSession\n        ) : base(getSession) { }\n\n        public override Task Project(object @event) => \n            @event switch\n            {\n                Events.UserRegistered e =>\n                    Create(\n                        () => Task.FromResult(\n                            new ReadModels.UserDetails\n                            {\n                                Id = e.UserId.ToString(),\n                                DisplayName = e.DisplayName\n                            }\n                        )\n                    ),\n                Events.UserDisplayNameUpdated e =>\n                    UpdateOne(\n                        e.UserId,\n                        x => x.DisplayName = e.DisplayName\n                    ),\n                Events.ProfilePhotoUploaded e =>\n                    UpdateOne(\n                        e.UserId,\n                        x => x.PhotoUrl = e.PhotoUrl\n                    ),\n                _ => Task.CompletedTask\n            };\n    }\n}\n```", "```cs\nusing System;\nusing System.Linq.Expressions;\nusing System.Threading.Tasks;\nusing Marketplace.ClassifiedAd;\nusing Marketplace.Infrastructure;\nusing Raven.Client.Documents.Session;\nusing static Marketplace.Domain.ClassifiedAd.Events;\nusing static Marketplace.Domain.UserProfile.Events;\nusing static Marketplace.Projections.ClassifiedAdUpcastedEvents;\nusing static Marketplace.Projections.ReadModels;\n\nnamespace Marketplace.Projections\n{\n    public class ClassifiedAdDetailsProjection\n        : RavenDbProjection<ClassifiedAdDetails>\n    {\n        private readonly Func<Guid, Task<string>>\n            _getUserDisplayName;\n\n        public ClassifiedAdDetailsProjection(\n            Func<IAsyncDocumentSession> getSession,\n            Func<Guid, Task<string>> getUserDisplayName\n        )\n            : base(getSession)\n            => _getUserDisplayName = getUserDisplayName;\n\n        public override Task Project(object @event) =>\n            @event switch\n            {\n                ClassifiedAdCreated e =>\n                    Create(async () =>\n                        new ClassifiedAdDetails\n                        {\n                            Id = e.Id.ToString(),\n                            SellerId = e.OwnerId,\n                            SellersDisplayName =\n                                await _getUserDisplayName(\n                                    e.OwnerId\n                                )\n                        }\n                    ),\n                ClassifiedAdTitleChanged e =>\n                    UpdateOne(e.Id, ad => ad.Title = e.Title),\n                ClassifiedAdTextUpdated e =>\n                    UpdateOne(e.Id, ad => ad.Description = e.AdText),\n                ClassifiedAdPriceUpdated e =>\n                    UpdateOne(\n                        e.Id,\n                        ad =>\n                        {\n                            ad.Price = e.Price;\n                            ad.CurrencyCode = e.CurrencyCode;\n                        }\n                    ),\n                UserDisplayNameUpdated e =>\n                    UpdateWhere(\n                        x => x.SellerId == e.UserId,\n                        x => x.SellersDisplayName = e.DisplayName\n                    ),\n                V1.ClassifiedAdPublished e =>\n                    UpdateOne(\n                        e.Id,\n                        ad => ad.SellersPhotoUrl = e.SellersPhotoUrl\n                    ),\n                _ => Task.CompletedTask\n            };\n    }\n}\n\n```", "```cs\nvar photoUrl = await _getUserPhoto(e.OwnerId);\n```", "```cs\nusing System;\nusing System.Threading.Tasks;\nusing Raven.Client.Documents.Session;\nusing static Marketplace.Projections.ReadModels;\n\nnamespace Marketplace.UserProfile\n{\n    public static class Queries\n    {\n        public static Task<UserDetails> GetUserDetails(\n            this Func<IAsyncDocumentSession> getSession,\n            Guid id\n        )\n        {\n            using var session = getSession();\n\n            return session.LoadAsync<UserDetails>(id.ToString());\n        }\n    }\n}\n```", "```cs\nusing System.Threading.Tasks;\nusing Raven.Client.Documents.Session;\nusing static Marketplace.ClassifiedAd.QueryModels;\nusing static Marketplace.Projections.ReadModels;\n\nnamespace Marketplace.ClassifiedAd\n{\n    public static class Queries\n    {\n        public static Task<ClassifiedAdDetails> Query(\n            this IAsyncDocumentSession session,\n            GetPublicClassifiedAd query\n        ) =>\n            session.LoadAsync<ClassifiedAdDetails>(\n                query.ClassifiedAdId.ToString()\n            );\n    }\n}\n```", "```cs\npublic static async Task<IActionResult> HandleQuery<TModel>(\n    Func<Task<TModel>> query, ILogger log)\n{\n    try\n    {\n        return new OkObjectResult(await query());\n    }\n    catch (Exception e)\n    {\n        log.Error(e, \"Error handling the query\");\n        return new BadRequestObjectResult(\n            new\n            {\n                error = e.Message, stackTrace = e.StackTrace\n            });\n    }\n}\n```", "```cs\nusing System.Threading.Tasks;\nusing Marketplace.Infrastructure;\nusing Microsoft.AspNetCore.Mvc;\nusing Raven.Client.Documents.Session;\nusing Serilog;\n\nnamespace Marketplace.ClassifiedAd\n{\n    [Route(\"/ad\")]\n    public class ClassifiedAdsQueryApi : Controller\n    {\n        private readonly IAsyncDocumentSession _session;\n        private static ILogger _log = \n        Log.ForContext<ClassifiedAdsQueryApi>();\n\n        public ClassifiedAdsQueryApi(IAsyncDocumentSession session) => \n            _session = session;\n\n        [HttpGet]\n        public Task<IActionResult> \n        Get(QueryModels.GetPublicClassifiedAd request)\n            => RequestHandler.HandleQuery(() => \n                _session.Query(request), _log);\n    }\n}\n```", "```cs\nvar projectionManager = new ProjectionManager(esConnection,\n    new RavenDbCheckpointStore(getSession, \"readmodels\"),\n    new ClassifiedAdDetailsProjection(getSession,\n        async userId => (await \n        getSession.GetUserDetails(userId))?.DisplayName),\n    new ClassifiedAdUpcasters(esConnection,\n        async userId => (await \n        getSession.GetUserDetails(userId))?.PhotoUrl),\n        new UserDetailsProjection(getSession));\n```", "```cs\n{\n    \"Position\": {\n        \"CommitPosition\": 48771203,\n        \"PreparePosition\": 48771203\n    },\n    \"@metadata\": {\n        \"@collection\": \"Checkpoints\",\n        \"Raven-Clr-Type\": \"Marketplace.Infrastructure.Checkpoint, Marketplace\"\n    }\n}\n```"]