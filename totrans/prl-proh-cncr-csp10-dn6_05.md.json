["```cs\nprivate async Task ProcessDataAsync()\n```", "```cs\n{\n```", "```cs\n    // Process data here\n```", "```cs\n}\n```", "```cs\nprivate async Task<string> GetStringDataAsync()\n```", "```cs\n{\n```", "```cs\n    string stringData;\n```", "```cs\n    // Build string here\n```", "```cs\n    ...\n```", "```cs\n    return stringData;\n```", "```cs\n}\n```", "```cs\n    await ProcessDataAsync();\n    string data = await GetStringDataAsync();\n    ```", "```cs\n    Task dataTask = ProcessDataAsync();\n    Task<string> stringDataTask = GetStringDataAsync();\n    DoSomeOtherSynchronousWork();\n    string data = await stringDataTask;\n    await dataTask;\n    ```", "```cs\n    public class Order\n    {\n        public int OrderId { get; set; }\n        public string? CustomerName { get; set; }\n        public bool IsArchived { get; set; }\n    }\n    ```", "```cs\n    public class MainViewModel : ObservableObject\n    {\n        private ObservableCollection<Order> _orders = \n            new();\n        public MainViewModel()\n        {\n            LoadOrderDataCommand = new AsyncRelayCommand\n                (LoadOrderDataAsync);\n        }\n        public ICommand LoadOrderDataCommand { get; set; }\n        public ObservableCollection<Order> Orders\n        {\n            get { return _orders; }\n            set\n            {\n                SetProperty(ref _orders, value);\n            }\n        }\n        private async Task LoadOrderDataAsync()\n        {\n            // TODO – Add code to load orders\n        }\n    }\n    ```", "```cs\n    using Microsoft.Toolkit.Mvvm.ComponentModel;\n    using Microsoft.Toolkit.Mvvm.Input;\n    using System.Collections.Generic;\n    using System.Collections.ObjectModel;\n    using System.Threading.Tasks;\n    using System.Windows.Input;\n    ```", "```cs\n    private async Task<List<Order>> GetCurrentOrders\n        Async()\n    {\n        var orders = new List<Order>();\n        await Task.Delay(4000);\n        orders.Add(new Order { OrderId = 55, CustomerName \n            = \"Tony\", IsArchived = false });\n        orders.Add(new Order { OrderId = 56, CustomerName \n            = \"Peggy\", IsArchived = false });\n        orders.Add(new Order { OrderId = 60, CustomerName \n            = \"Carol\", IsArchived = false });\n        orders.Add(new Order { OrderId = 62, CustomerName \n            = \"Bruce\", IsArchived = false });\n        return orders;\n    }\n    private async Task<List<Order>> GetArchivedOrders\n        Async()\n    {\n        var orders = new List<Order>();\n        await Task.Delay(5000);\n        orders.Add(new Order { OrderId = 3, CustomerName = \n            \"Howard\", IsArchived = true });\n        orders.Add(new Order { OrderId = 18, CustomerName \n            = \"Steve\", IsArchived = true });\n        orders.Add(new Order { OrderId = 19, CustomerName \n            = \"Peter\", IsArchived = true });\n        orders.Add(new Order { OrderId = 21, CustomerName \n            = \"Mary\", IsArchived = true });\n        orders.Add(new Order { OrderId = 25, CustomerName \n            = \"Gwen\", IsArchived = true });\n        orders.Add(new Order { OrderId = 34, CustomerName \n            = \"Harry\", IsArchived = true });\n        orders.Add(new Order { OrderId = 36, CustomerName \n            = \"Bob\", IsArchived = true });\n        orders.Add(new Order { OrderId = 49, CustomerName \n            = \"Bob\", IsArchived = true });\n        return orders;\n    }\n    ```", "```cs\n    private void ProcessOrders(List<Order> currentOrders, \n        List<Order> archivedOrders)\n    {\n        List<Order> allOrders = new(currentOrders);\n        allOrders.AddRange(archivedOrders);\n        Orders = new ObservableCollection<Order>\n            (allOrders);\n    }\n    ```", "```cs\n    private async Task LoadOrderDataAsync()\n    {\n        Task<List<Order>> currentOrdersTask = \n            GetCurrentOrdersAsync();\n        Task<List<Order>> archivedOrdersTask = \n            GetArchivedOrdersAsync();\n        List<Order>[] results = await Task.WhenAll(new \n            Task<List<Order>>[] {\n            currentOrdersTask, archivedOrdersTask\n        }).ConfigureAwait(false);\n        ProcessOrders(results[0], results[1]);\n    }\n    ```", "```cs\n    public MainWindow()\n    {\n        InitializeComponent();\n        var vm = new MainViewModel();\n        DataContext = vm;\n    }\n    ```", "```cs\n    <Grid>\n        <Grid.RowDefinitions>\n            <RowDefinition Height=\"Auto\"/>\n            <RowDefinition Height=\"*\"/>\n        </Grid.RowDefinitions>\n        <Grid Grid.Row=\"0\" Margin=\"4\">\n            <Grid.ColumnDefinitions>\n                <ColumnDefinition Width=\"Auto\"/>\n                <ColumnDefinition Width=\"*\"/>\n            </Grid.ColumnDefinitions>\n            <Button Content=\"Load Data\" Grid.Column=\"0\" \n                Margin=\"2\" Width=\"200\"\n            Command=\"{Binding Path=LoadOrderData\n                Command}\"/>\n            <TextBox Grid.Column=\"1\" Margin=\"2\"/>\n        </Grid>\n        <ListView Grid.Row=\"1\" ItemsSource=\"{Binding \n            Path=Orders}\" Margin=\"4\">\n        </ListView>\n    </Grid>\n    ```", "```cs\n    <ListView Grid.Row=\"1\" ItemsSource=\"{Binding \n        Path=Orders}\" Margin=\"4\">\n        <ListView.ItemTemplate>\n            <DataTemplate>\n                <StackPanel Margin=\"2\">\n                    <StackPanel Orientation=\"Horizontal\">\n                        <TextBlock Text=\"Order Id:\"\n                                   Margin=\"2,2,0,2\"\n                                   Width=\"100\"/>\n                        <TextBox IsReadOnly=\"True\"\n                               Width=\"200\"\n                               Text=\"{Binding \n                               Path=OrderId}\" Margin=\"2\"/>\n                    </StackPanel>\n                    <StackPanel Orientation=\"Horizontal\">\n                        <TextBlock Text=\"Customer:\"\n                                   Margin=\"2,2,0,2\"\n                                   Width=\"100\"/>\n                        <TextBox IsReadOnly=\"True\"\n                                 Width=\"200\"\n                                 Text=\"{Binding \n                                 Path=CustomerName}\" \n                                 Margin=\"2\"/>\n                    </StackPanel>\n                    <StackPanel Orientation=\"Horizontal\">\n                        <TextBlock Text=\"Archived:\"\n                                   Margin=\"2,2,0,2\"\n                                   Width=\"100\"/>\n                        <TextBox IsReadOnly=\"True\"\n                                 Width=\"200\"\n                                 Text=\"{Binding \n                                 Path=IsArchived}\"\n                                  Margin=\"2\"/>\n                    </StackPanel>\n                </StackPanel>\n            </DataTemplate>\n        </ListView.ItemTemplate>\n    </ListView>\n    ```", "```cs\nThreadPool.QueueUserWorkItem(GetCurrentOrders);\n```", "```cs\n    private List<Order> GetCurrentOrders()\n    {\n        var orders = new List<Order>();\n        Thread.Sleep(4000);\n        orders.Add(new Order { OrderId = 55, CustomerName \n            = \"Tony\", IsArchived = false });\n        orders.Add(new Order { OrderId = 56, CustomerName \n            = \"Peggy\", IsArchived = false });\n        orders.Add(new Order { OrderId = 60, CustomerName \n            = \"Carol\", IsArchived = false });\n        orders.Add(new Order { OrderId = 62, CustomerName \n            = \"Bruce\", IsArchived = false });\n        return orders;\n    }\n    private List<Order> GetArchivedOrders()\n    {\n        var orders = new List<Order>();\n        Thread.Sleep(5000);\n        orders.Add(new Order { OrderId = 3, CustomerName = \n            \"Howard\", IsArchived = true });\n        orders.Add(new Order { OrderId = 18, CustomerName \n            = \"Steve\", IsArchived = true });\n        orders.Add(new Order { OrderId = 19, CustomerName \n            = \"Peter\", IsArchived = true });\n        orders.Add(new Order { OrderId = 21, CustomerName \n            = \"Mary\", IsArchived = true });\n        orders.Add(new Order { OrderId = 25, CustomerName \n            = \"Gwen\", IsArchived = true });\n        orders.Add(new Order { OrderId = 34, CustomerName \n            = \"Harry\", IsArchived = true });\n        orders.Add(new Order { OrderId = 36, CustomerName \n            = \"Bob\", IsArchived = true });\n        orders.Add(new Order { OrderId = 49, CustomerName \n            = \"Bob\", IsArchived = true });\n        return orders;\n    }\n    ```", "```cs\n    private async Task LoadOrderDataAsync()\n    {\n        Task<List<Order>> currentOrdersTask = \n            Task.Run(GetCurrentOrders);\n        Task<List<Order>> archivedOrdersTask = \n            Task.Run(GetArchivedOrders);\n        List<Order>[] results = await Task.WhenAll(new \n            Task<List<Order>>[] {\n            currentOrdersTask, archivedOrdersTask\n        }).ConfigureAwait(false);\n        ProcessOrders(results[0], results[1]);\n    }\n    ```", "```cs\nTask<List<Order>> currentOrdersTask = Task.Run\n```", "```cs\n     (GetCurrentOrders);\n```", "```cs\nTask<List<Order>> currentOrdersTask = Task.Factory.StartNew\n```", "```cs\n     (GetCurrentOrders);\n```", "```cs\nTask<List<Order>> currentOrdersTask = \n```", "```cs\n    Task.Factory.StartNew(GetCurrentOrders, \n```", "```cs\n    CancellationToken.None, \n```", "```cs\n    TaskCreationOptions.AttachedToParent, \n```", "```cs\n    TaskScheduler.Default);\n```", "```cs\nApplication.Current.Dispatcher.Invoke(new Action(() => { \n```", "```cs\n    usernameTextBox.Text = \"John Doe\";\n```", "```cs\n}));\n```", "```cs\npublic partial class Form1 : Form\n```", "```cs\n{\n```", "```cs\n    public Form1()\n```", "```cs\n    {\n```", "```cs\n        InitializeComponent();\n```", "```cs\n    }\n```", "```cs\n    private void btnRunInBackground_Click(object sender, \n```", "```cs\n        EventArgs e)\n```", "```cs\n    {\n```", "```cs\n        Task.Run(UpdateUsername);\n```", "```cs\n    }\n```", "```cs\n    private void btnRunOnMainThread_Click(object sender, \n```", "```cs\n        EventArgs e)\n```", "```cs\n    {\n```", "```cs\n        UpdateUsername();\n```", "```cs\n    }\n```", "```cs\n    private void UpdateUsername()\n```", "```cs\n    {\n```", "```cs\n        var updateAction = new Action(() =>\n```", "```cs\n        {\n```", "```cs\n            usernameTextBox.Text = \"John Doe\";\n```", "```cs\n        });\n```", "```cs\n        if (this.InvokeRequired)\n```", "```cs\n        {\n```", "```cs\n            this.Invoke(updateAction);\n```", "```cs\n        }\n```", "```cs\n        else\n```", "```cs\n        {\n```", "```cs\n            updateAction();\n```", "```cs\n        }\n```", "```cs\n    }\n```", "```cs\n}\n```"]