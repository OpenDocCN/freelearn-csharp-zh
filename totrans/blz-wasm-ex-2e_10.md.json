["```cs\n@page \"/authentication/{action}\"\n@using Microsoft.AspNetCore.Components.WebAssembly.Authentication\n<RemoteAuthenticatorView Action=\"@Action\">\n    <LoggingIn>\n        Please sign in to your account ...\n    </LoggingIn>\n</RemoteAuthenticatorView>\n@code{\n    [Parameter] public string? Action { get; set; }\n} \n```", "```cs\n@inject NavigationManager Navigation\n<CascadingAuthenticationState>\n    <Router AppAssembly=\"@typeof(App).Assembly\">\n        <Found Context=\"routeData\">\n        </Found>\n        <NotFound>\n            <PageTitle>Not found</PageTitle>\n            <LayoutView Layout=\"@typeof(MainLayout)\">\n                <p>Sorry, there's nothing here.</p>\n            </LayoutView>\n        </NotFound>\n    </Router>\n</CascadingAuthenticationState> \n```", "```cs\n<AuthorizeRouteView RouteData=\"@routeData\" \n                    DefaultLayout=\"@typeof(MainLayout)\">\n    <NotAuthorized>\n        @if (context.User.Identity?.IsAuthenticated != true)\n        {\n            Navigation.NavigateToLogin($\"authentication/login\");\n        }\n        else\n        {\n            <p>\n                ERROR: You are not authorized to access \n                this page.\n            </p>\n        }\n    </NotAuthorized>\n</AuthorizeRouteView>\n<FocusOnNavigate RouteData=\"@routeData\" Selector=\"h1\" /> \n```", "```cs\n[CascadingParameter] \nprivate Task<AuthenticationState> authStateTask { get; set; }\nprivate string userName;\nprotected override async Task OnInitializedAsync()\n{\n    var authState = await authStateTask;\n    var user = authState.User;\n    if (user.Identity.IsAuthenticated)\n    {\n        userName = user.Identity.Name;\n    };\n} \n```", "```cs\n@page \"/secure\"\n@using Microsoft.AspNetCore.Authorization\n@attribute [Authorize]\n<h2>Secure Page</h2>\nCongratulations, you have been authenticated! \n```", "```cs\nERROR: You are not authorized to access this page \n```", "```cs\n@page \"/secure\"\n@attribute [Authorize(Roles = \"admin, siteadmin\")] \n```", "```cs\n@page \"/secure\"\n@attribute [Authorize(Policy = \"content-admin\")] \n```", "```cs\n@using Microsoft.AspNetCore.Components.Authorization\n@using Microsoft.AspNetCore.Components.WebAssembly.Authentication\n@inject NavigationManager Navigation\n<AuthorizeView>\n    <Authorized>\n        Hello, @context.User.Identity?.Name!\n        <button @onclick=\"BeginLogout\">Log out</button>\n    </Authorized>\n    <NotAuthorized>\n        <a href=\"authentication/login\">Log in</a>\n    </NotAuthorized>\n    <Authorizing>\n        Please be patient. We are trying to authorize you.\n    </Authorizing>\n</AuthorizeView>\n@code{\n    private void BeginLogout(MouseEventArgs args)\n    {\n        Navigation.NavigateToLogout(\"authentication/logout\");\n    }\n} \n```", "```cs\n<AuthorizeView Roles=\"admin, siteadmin\">\n    <p>\n        You can only view this content if you are an admin or\n        siteadmin.\n    </p>\n</AuthorizeView> \n```", "```cs\n<AuthorizeView Policy=\"content-admin\">\n    <p>\n        You can only view this content if you satisfy \n        the \"content-admin\" policy.\n    </p>\n</AuthorizeView> \n```", "```cs\n    {\n      \"AzureAd\": {\n        \"Authority\": \"https://login.microsoftonline.com/{Directory (tenant) ID}\",\n        \"ClientId\": \"{Application (client) ID}\",\n        \"ValidateAuthority\": true\n      }\n    } \n    ```", "```cs\n    https://localhost:5001/authentication/login-callback \n    ```", "```cs\n    Install-package Microsoft.AspNetCore.Authorization \n    ```", "```cs\n    Install-package Microsoft.AspNetCore.Components.Authorization \n    ```", "```cs\n    Install-package Microsoft.Authentication.WebAssembly.Msal \n    ```", "```cs\n    @using Microsoft.AspNetCore.Authorization\n    @using Microsoft.AspNetCore.Components.Authorization\n    @using Microsoft.AspNetCore.Components.WebAssembly.Authentication \n    ```", "```cs\n    <script\n    src=\"img/AuthenticationService.js\">\n    </script> \n    ```", "```cs\n     \"windowsAuthentication\": false,\n        \"anonymousAuthentication\": true, \n    ```", "```cs\n    builder.Services.AddMsalAuthentication(options =>\n    {\n        builder.Configuration.Bind(\"AzureAd\", \n            options.ProviderOptions.Authentication);\n        options.ProviderOptions.LoginMode = \"redirect\";\n    }); \n    ```", "```cs\n    @inject NavigationManager Navigation \n    ```", "```cs\n    <CascadingAuthenticationState>\n    </CascadingAuthenticationState> \n    ```", "```cs\n    <AuthorizeRouteView RouteData=\"@routeData\"  \n        DefaultLayout=\"@typeof(MainLayout)\">\n        <NotAuthorized>\n            @if (context.User.Identity?.IsAuthenticated != \n               true)\n            {\n                Navigation.NavigateTo($\"authentication/login\");\n            }\n            else\n            {\n                <p>\n                    You are not authorized to access \n                    this resource.\n               </p>\n            }\n        </NotAuthorized>\n    </AuthorizeRouteView> \n    ```", "```cs\n    @page \"/authentication/{action}\"\n    @using Microsoft.AspNetCore.Components.WebAssembly.Authentication\n    <RemoteAuthenticatorView Action=\"@Action\" />\n    @code {\n        [Parameter] public string? Action { get; set; }\n    } \n    ```", "```cs\n    @inject NavigationManager Navigation\n    <AuthorizeView>\n        <Authorized>\n            <button @onclick=\"BeginLogout\">\n                Log out of Claims Viewer\n            </button>\n            Welcome, @context.User.Identity?.Name!\n        </Authorized>\n        <NotAuthorized>\n            <button @onclick=\"BeginLogin\">\n                Log in to Claims Viewer\n            </button>\n        </NotAuthorized>\n    </AuthorizeView>\n    <hr />\n    @code {\n\n    } \n    ```", "```cs\n    private void BeginLogin(MouseEventArgs args)\n    {\n        Navigation\n            .NavigateToLogin($\"authentication/login\");\n    }\n    private void BeginLogout(MouseEventArgs args)\n    {\n        Navigation\n            .NavigateToLogout($\"authentication/logout\", $\"/\");\n    } \n    ```", "```cs\n    @using ClaimsViewer.Shared \n    ```", "```cs\n    <main style=\"padding:10px\">\n        <LoginDisplay />\n        <a href=\"/secure\">[Secure Page]</a>\n        <a href=\"/whoami\">[Who Am I?]</a>\n        @Body\n    </main> \n    ```", "```cs\n    @page \"/secure\"\n    @attribute [Authorize]\n    <h2>Secure Page</h2>\n    Congratulations, you have been authenticated! \n    ```", "```cs\n    Welcome to the Claims Viewer app. \n    ```", "```cs\n    @page \"/whoami\"\n    @using System.Security.Claims;\n    <h1>Who Am I?</h1>\n    <AuthorizeView>\n        <NotAuthorized>\n            <div>\n                <b>WARNING: You are not authenticated!</b>\n                You must log in to Claims Viewer.\n            </div>\n        </NotAuthorized>\n        <Authorized>\n            I am @myName\n        </Authorized>\n    </AuthorizeView>\n    @code {\n    } \n    ```", "```cs\n    [CascadingParameter]\n    private Task<AuthenticationState>?\n    authStateTask\n    { get; set; }\n    private string? myName;\n    private List<Claim>? myClaims;\n    protected override async Task OnInitializedAsync()\n    {\n        var authState = await authStateTask!;\n        var user = authState.User;\n        if (user.Identity!.IsAuthenticated)\n        {\n            myName = user.Identity.Name;\n            myClaims = user.Claims.ToList();\n        };\n    } \n    ```", "```cs\n    builder.Services.AddAuthorizationCore(options =>\n    {\n        options.AddPolicy(\"view-all\", policy =>\n            policy.RequireAssertion(context => \n            context.User.HasClaim(c => \n                c.Type == \"groups\" && \n                c.Value.Contains(\"{Object ID}\"))));\n    }); \n    ```", "```cs\n    @attribute [Authorize(Policy = \"view-all\")] \n    ```", "```cs\n    <h2>My Claims</h2>\n    <AuthorizeView Policy=\"view-all\">\n        <NotAuthorized>\n            <div>\n                <b>WARNING: You are not authorized!</b>\n                You must be a member of the ViewAll \n                group in Azure AD.\n            </div>\n        </NotAuthorized>\n        <Authorized>\n            <ul>\n                @foreach (Claim item in myClaims!)\n                {\n                    <li>@item.Type: @item.Value</li>\n                }\n            </ul>\n        </Authorized>\n    </AuthorizeView> \n    ```"]