["```cs\n    public IActionResult AddUser(UserModel userModel)\n    {\n      var user = _usersService.CreateUser(userModel);\n      if (userModel.AddUserToCompany)\n      {\n        var companyService = new CompanyService();\n        companyService.AssignUserToCompany(user);\n      }\n      return View();\n    }\n```", "```cs\n    public class EmployeeService\n    {\n      private readonly EmployeeRepository repository;\n      public EmployeeService()\n      {\n         string connectionString = \"Read String from config\";\n         this.repository = new SqlEmployeeRepository(connectionString);\n      }\n    }\n```", "```cs\n    public class EmployeeRepositoryFactory\n    {\n      public EmployeeRepository Create()\n      {\n        string connectionString = \"Read String from config\";\n        return new SqlEmployeeRepository(connectionString);\n      }\n    }\n```", "```cs\n    public EmployeeService()\n    {\n      var employeeRepofactory = new EmployeeRepositoryFactory();\n      this.repository = employeeRepofactory.Create();\n    }\n```", "```cs\n    public abstract class EmployeeRepositoryFactory\n    {\n        public abstract EmployeeRepository Create();\n    }\n```", "```cs\n    public class SqlEmployeeService : EmployeeRepositoryFactory\n    {\n      public override EmployeeRepository Create()\n      {\n        string connectionString = \"Read String from config\";\n        return new SqlEmployeeRepository(connectionString);\n      }\n    }\n```", "```cs\n    public EmployeeService()\n    {\n      var sqlEmployeeService = new SqlEmployeeService();\n      this.repository = sqlEmployeeService.Create();\n    }\n```", "```cs\n    public static class EmployeeRepositoryFactory\n    {\n      public static EmployeeRepository Create()\n      {\n        string connectionstring = \"read string from config\";\n        return new SqlEmployeeRepository(connectionstring);\n      }\n    }\n```", "```cs\n    public EmployeeService()\n   {\n      repository = EmployeeRepositoryFactory.Create(); \n   }\n```", "```cs\n    public static EmployeeRepository Create()\n    {\n      var repository = \"read from config\";\n      switch (repository)\n      {\n        case \"sql\":\n            return EmployeeRepositoryFactory.CreateSql();\n        case \"azure\":\n            return EmployeeRepositoryFactory.CreateAzure();\n        default:\n            throw new InvalidOperationException(\"Invalid operation\");\n      }\n    }\n```", "```cs\n    public class EmployeeService\n    {\n      private readonly IEmployeeRepository repository;\n      public EmployeeService(IEmployeeRepository repository)\n      {\n        this.repository = repository ?? throw new\n          ArgumentNullException(\"repository\");\n      }\n    }\n```", "```cs\n    static void Main(string[] args)\n    {\n      EmployeeService empService = new \n         EmployeeService(new EmployeeRepository());\n      Console.ReadKey();\n    }\n```", "```cs\n    EmployeeService empService = new \n      EmployeeService(new EmployeeRepository(new\n      Cass1(new Class2(new Class3()))));\n```", "```cs\n    public class EmployeeService : IEmployeeService\n    {\n      private readonly IEmployeeRepository repository;\n // Default Constructor calls the parameterized one\n      public EmployeeService() : this(new EmployeeRepository()) \n {\n }\n      public EmployeeService(IEmployeeRepository employeeRepository)\n      {\n         repository = employeeRepository;\n      }\n    }\n    public class EmployeeRepository : IEmployeeRepository\n    {\n      private readonly ISomeClass class1;\n // Default constructor calls the parameterised one.\n      public EmployeeRepository() : this(new Class1())\n {\n }\n      public EmployeeRepository(ISomeClass someClass)\n      {\n        class1 = someClass;\n      }\n    }\n```", "```cs\n    static void Main(string[] args)\n    {\n      EmployeeService empService = new \n        EmployeeService(); // No Dependency passed here.\n      Console.ReadKey();\n    }\n```", "```cs\n    public class EmployeeService\n    {\n      private readonly IEmployeeRepository repository;\n      // Default Constructor.\n      public EmployeeService()\n      {\n         repository = CreateDefaultRepository();\n      }\n\n      // Constructor Injection can happen here.\n      public EmployeeService(IEmployeeRepository repository)\n      {\n        if (repository == null)\n        {\n          throw new ArgumentNullException(\"repository\");\n        }\n        this.repository = repository;\n      }\n      // Method creating a default repository.\n      private static EmployeeRepository CreateDefaultRepository()\n      {\n        string connectionString = \"Read String from config\";\n        return new SqlEmployeeRepository(connectionString);\n      }\n    }\n```", "```cs\n    var employeeRepositoryTypeName = \"Read from config\"; \n      //SqlEmployeeRepository\n    var connectionString = \"Read from config\";\n\n    var employeeRepositoryType = Type.GetType(employeeRepositoryTypeName,\n         true);\n    var employeeRepository = Activator.CreateInstance(employeeRepositoryType,\n       connectionString);\n```", "```cs\n    public class EmployeeService : IEmployeeService\n    {\n      public EmployeeService(IEmployeeRepository repository)\n      {\n      }\n    }\n```", "```cs\n    var employeeFactoryTypeName = \"Read from config\";\n    var employeeFactoryType = Type.GetType(employeeFactoryTypeName, true);\n    var employeeFactory = Activator.CreateInstance(employeeFactoryType);\n```", "```cs\n    public static class ServiceLocator\n    {\n      static Dictionary<Type, object> servicesDictionary = \n        new Dictionary<Type, object>();\n      public static void Register<T>(T service)\n      {\n         servicesDictionary[typeof(T)] = service;\n      }\n       public static T GetService<T>()\n       {\n         T instance = default(T);\n         if (servicesDictionary.ContainsKey(typeof(T)) == true)\n         {\n            instance = (T)servicesDictionary[typeof(T)];\n         }\n         return instance;\n       }\n    }\n```", "```cs\n    public class EmployeeService : IEmployeeService\n    {\n      private readonly IEmployeeRepository repository;\n      public EmployeeService()\n      {\n        this.repository = ServiceLocator.GetService<IEmployeeRepository>();\n      }\n     } \n```", "```cs\n    var empService = new EmployeeService();\n```", "```cs\n    public class EmployeeService : IEmployeeService\n    {\n      private readonly IEmployeeRepository repository;\n      public EmployeeService(IEmployeeRepository repository)\n      {\n        this.repository = repository;\n      }\n    }\n```"]