["```cs\ndotnet new xunit -n InvoiceApp.IntegrationTestsdotnet sln InvoiceApp.sln add InvoiceApp.IntegrationTests/InvoiceApp.IntegrationTests.csproj\ndotnet add InvoiceApp.IntegrationTests/InvoiceApp.IntegrationTests.csproj reference InvoiceApp.WebApi/InvoiceApp.WebApi.csproj\n```", "```cs\ndotnet add InvoiceApp.IntegrationTests/InvoiceApp.IntegrationTests.csproj package Microsoft.AspNetCore.Mvc.Testing\n```", "```cs\npublic class WeatherForecastApiTests(WebApplicationFactory<Program> factory)    : IClassFixture<WebApplicationFactory<Program>>\n{\n}\n```", "```cs\n    <ItemGroup>     <InternalsVisibleTo Include=\"MyTestProject\" /></ItemGroup>\n    ```", "```cs\n    public partial class Program { }\n    ```", "```cs\n[Fact]public async Task GetWeatherForecast_ReturnsSuccessAndCorrectContentType()\n{\n    // Arrange\n    var client = factory.CreateClient();\n    // Act\n    var response = await client.GetAsync(\"/WeatherForecast\");\n    // Assert\n    response.EnsureSuccessStatusCode(); // Status Code 200-299\n    Assert.Equal(\"application/json; charset=utf-8\", response.Content.Headers.ContentType.ToString());\n    // Deserialize the response\n    var responseContent = await response.Content.ReadAsStringAsync();\n    var weatherForecast = JsonSerializer.Deserialize<List<WeatherForecast>>(responseContent, new JsonSerializerOptions\n    {\n        PropertyNameCaseInsensitive = true\n    });\n    weatherForecast.Should().NotBeNull();\n    weatherForecast.Should().HaveCount(5);\n}\n```", "```cs\npublic class CustomIntegrationTestsFixture : WebApplicationFactory<Program>{\n    private const string ConnectionString = @\"Server=(localdb)\\mssqllocaldb;Database=InvoiceIntegrationTestDb;Trusted_Connection=True\";\n    protected override void ConfigureWebHost(IWebHostBuilder builder)\n    {\n        // Set up a test database\n        builder.ConfigureServices(services =>\n        {\n            var descriptor = services.SingleOrDefault(d => d.ServiceType == typeof(DbContextOptions<InvoiceDbContext>));\n            services.Remove(descriptor);\n            services.AddDbContext<InvoiceDbContext>(options =>\n            {\n                options.UseSqlServer(ConnectionString);\n            });\n        });\n    }\n}\n```", "```cs\nbuilder.ConfigureAppConfiguration((context, config) =>{\n    config.AddJsonFile(\"appsettings.IntegrationTest.json\");\n});\n```", "```cs\nbuilder.UseEnvironment(\"IntegrationTest\");\n```", "```cs\npublic static class Utilities{\n    public static void InitializeDatabase(InvoiceDbContext context)\n    {\n        context.Database.EnsureDeleted();\n        context.Database.EnsureCreated();\n        SeedDatabase(context);\n    }\n    public static void Cleanup(InvoiceDbContext context)\n    {\n        context.Contacts.ExecuteDelete();\n        context.Invoices.ExecuteDelete();\n        context.SaveChanges();\n        SeedDatabase(context);\n    }\n    private static void SeedDatabase(InvoiceDbContext context)\n    {\n        // Omitted for brevity\n    }\n}\n```", "```cs\nbuilder.ConfigureServices(services =>{\n    var descriptor = services.SingleOrDefault(d => d.ServiceType == typeof(DbContextOptions<InvoiceDbContext>));\n    services.Remove(descriptor);\n    services.AddDbContext<InvoiceDbContext>(options =>\n    {\n        options.UseSqlServer(ConnectionString);\n    });\n    using var scope = services.BuildServiceProvider().CreateScope();\n    var scopeServices = scope.ServiceProvider;\n    var dbContext = scopeServices.GetRequiredService<InvoiceDbContext>();\n    Utilities.InitializeDatabase(dbContext);\n});\n```", "```cs\npublic class InvoicesApiTests(CustomIntegrationTestsFixture factory) : IClassFixture<CustomIntegrationTestsFixture>{\n}\n```", "```cs\n[Fact]public async Task GetInvoices_ReturnsSuccessAndCorrectContentType()\n{\n    // Arrange\n    var client = _factory.CreateClient();\n    // Act\n    var response = await client.GetAsync(\"/api/invoice\");\n    // Assert\n    response.EnsureSuccessStatusCode(); // Status Code 200-299\n    response.Content.Headers.ContentType.Should().NotBeNull();\n    response.Content.Headers.ContentType!.ToString().Should().Be(\"application/json; charset=utf-8\");\n    // Deserialize the response\n    var responseContent = await response.Content.ReadAsStringAsync();\n    var invoices = JsonSerializer.Deserialize<List<Invoice>>(responseContent, new JsonSerializerOptions\n    {\n        PropertyNameCaseInsensitive = true\n    });\n    invoices.Should().NotBeNull();\n    invoices.Should().HaveCount(2);\n}\n```", "```cs\n[Fact]public async Task PostInvoice_ReturnsSuccessAndCorrectContentType()\n{\n    // Arrange\n    var client = factory.CreateClient();\n    var invoice = new Invoice\n    {\n        DueDate = DateTimeOffset.Now.AddDays(30),\n        ContactId = Guid.Parse(\"8a9de219-2dde-4f2a-9ebd-b1f8df9fef03\"),\n        Status = InvoiceStatus.Draft,\n        InvoiceItems = new List<InvoiceItem>\n        {\n            // Omitted for brevity        }\n    };\n    var json = JsonSerializer.Serialize(invoice);\n    var data = new StringContent(json, Encoding.UTF8, \"application/json\");\n    // Act\n    var response = await client.PostAsync(\"/api/invoice\", data);\n    // Assert\n    response.EnsureSuccessStatusCode(); // Status Code 200-299\n    response.Content.Headers.ContentType.Should().NotBeNull();\n    response.Content.Headers.ContentType!.ToString().Should().Be(\"application/json; charset=utf-8\");\n    // Deserialize the response\n    var responseContent = await response.Content.ReadAsStringAsync();\n    var invoiceResponse = JsonSerializer.Deserialize<Invoice>(responseContent, new JsonSerializerOptions\n    {\n        PropertyNameCaseInsensitive = true\n    });\n    invoiceResponse.Should().NotBeNull();\n    invoiceResponse!.Id.Should().NotBeEmpty();\n    invoiceResponse.Amount.Should().Be(500);\n    invoiceResponse.Status.Should().Be(invoice.Status);\n    invoiceResponse.ContactId.Should().Be(invoice.ContactId);\n    // Clean up the database\n    var scope = factory.Services.CreateScope();\n    var scopedServices = scope.ServiceProvider;\n    var db = scopedServices.GetRequiredService<InvoiceDbContext>();\n    Utilities.Cleanup(db);\n}\n```", "```cs\n[Fact]public async Task PostInvoice_WhenContactIdDoesNotExist_ReturnsBadRequest()\n{\n    // Arrange\n    var client = factory.CreateClient();\n    var invoice = new Invoice\n    {\n        DueDate = DateTimeOffset.Now.AddDays(30),\n        ContactId = Guid.NewGuid(),\n        Status = InvoiceStatus.Draft,\n        InvoiceItems = new List<InvoiceItem>\n        {\n            // Omitted for brevity\n        }\n    };\n    var json = JsonSerializer.Serialize(invoice);\n    var data = new StringContent(json, Encoding.UTF8, \"application/json\");\n    // Act\n    var response = await client.PostAsync(\"/api/invoice\", data);\n    // Assert\n    response.StatusCode.Should().Be(HttpStatusCode.BadRequest);\n}\n```", "```cs\n[CollectionDefinition(\"CustomIntegrationTests\")]public class CustomIntegrationTestsCollection : ICollectionFixture<CustomIntegrationTestsFixture>\n{\n}\n```", "```cs\n[Collection(\"CustomIntegrationTests\")]public class InvoicesApiTestsWithCollection(CustomIntegrationTestsFixture factory) : IDisposable\n{\n    // Omitted for brevity\n}\n```", "```cs\n[Fact(Skip = \"This test is skipped to avoid conflicts with the test collection\")]public async Task GetInvoices_ReturnsSuccessAndCorrectContentType()\n{\n    // Omitted for brevity\n}\n```", "```cs\n[Theory][InlineData(\"7e096984-5919-492c-8d4f-ce93f25eaed5\")]\n[InlineData(\"b1ca459c-6874-4f2b-bc9d-f3a45a9120e4\")]\npublic async Task SendInvoiceAsync_ReturnsSuccessAndCorrectContentType(string invoiceId)\n{\n    // Arrange\n    var mockEmailSender = new Mock<IEmailSender>();\n    mockEmailSender.Setup(x => x.SendEmailAsync(It.IsAny<string>(), It.IsAny<string>(), It.IsAny<string>()))\n        .Returns(Task.CompletedTask).Verifiable();\n    var client = factory.WithWebHostBuilder(builder =>\n    {\n        builder.ConfigureTestServices(services =>\n        {\n            var emailSender = services.SingleOrDefault(x => x.ServiceType == typeof(IEmailSender));\n            services.Remove(emailSender);\n            services.AddScoped<IEmailSender>(_ => mockEmailSender.Object);\n        });\n    }).CreateClient();\n    // Act\n    var response = await client.PostAsync($\"/api/invoice/{invoiceId}/send\", null);\n    // Assert\n    response.EnsureSuccessStatusCode(); // Status Code 200-299\n    mockEmailSender.Verify(x => x.SendEmailAsync(It.IsAny<string>(), It.IsAny<string>(), It.IsAny<string>()), Times.Once);\n    var scope = factory.Services.CreateScope();\n    var scopedServices = scope.ServiceProvider;\n    var db = scopedServices.GetRequiredService<InvoiceDbContext>();\n    var invoice = await db.Invoices.FindAsync(Guid.Parse(invoiceId));\n    invoice!.Status.Should().Be(InvoiceStatus.AwaitPayment);\n}\n```", "```cs\npublic partial class Program { }\n```", "```cs\npublic class IntegrationTestsFixture : WebApplicationFactory<Program>{\n    protected override void ConfigureWebHost(IWebHostBuilder builder)\n    {\n        // This is where you can set up your test server with the services you need\n        base.ConfigureWebHost(builder);\n    }\n}\n```", "```cs\npublic class AuthTests(IntegrationTestsFixture fixture) : IClassFixture<IntegrationTestsFixture>{\n}\n```", "```cs\n[AllowAnonymous][HttpGet(\"anonymous\")]\npublic IEnumerable<WeatherForecast> GetAnonymous()\n{\n    // Omitted for brevity\n}\n```", "```cs\n[Fact]public async Task GetAnonymousWeatherForecast_ShouldReturnOk()\n{\n    // Arrange\n    var client = fixture.CreateClient();\n    // Act\n    var response = await client.GetAsync(\"/weatherforecast/anonymous\");\n    // Assert\n    response.EnsureSuccessStatusCode(); // Status Code 200-299\n    response.Content.Headers.ContentType.Should().NotBeNull();\n    response.Content.Headers.ContentType!.ToString().Should().Be(\"application/json; charset=utf-8\");\n    // Deserialize the response\n    var responseContent = await response.Content.ReadAsStringAsync();\n    var weatherForecasts = JsonSerializer.Deserialize<List<WeatherForecast>>(responseContent, new JsonSerializerOptions\n    {\n        PropertyNameCaseInsensitive = true\n    });\n    weatherForecasts.Should().NotBeNull();\n    weatherForecasts.Should().HaveCount(5);\n}\n```", "```cs\n[Fact]public async Task GetWeatherForecast_ShouldReturnUnauthorized_WhenNotAuthorized()\n{\n    // Arrange\n    var client = fixture.CreateClient();\n    // Act\n    var response = await client.GetAsync(\"/weatherforecast\");\n    // Assert\n    response.StatusCode.Should().Be(HttpStatusCode.Unauthorized);\n}\n```", "```cs\npublic string? GenerateToken(string userName){\n    using var scope = Services.CreateScope();\n    var configuration = scope.ServiceProvider.GetRequiredService<IConfiguration>();\n    var secret = configuration[\"JwtConfig:Secret\"];\n    var issuer = configuration[\"JwtConfig:ValidIssuer\"];\n    var audience = configuration[\"JwtConfig:ValidAudiences\"];\n    // Omitted for brevity\n    var securityToken = tokenHandler.CreateToken(tokenDescriptor);\n    var token = tokenHandler.WriteToken(securityToken);\n    return token;\n}\n```", "```cs\n[Fact]public async Task GetWeatherForecast_ShouldReturnOk_WhenAuthorized()\n{\n    // Arrange\n    var token = fixture.GenerateToken(\"TestUser\");\n    var client = fixture.CreateClient();\n    client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", token);\n    // Act\n    var response = await client.GetAsync(\"/weatherforecast\");\n    // Assert\n    response.EnsureSuccessStatusCode(); // Status Code 200-299\n    // Omited for brevity\n}\n```", "```cs\npublic class TestAuthHandler : AuthenticationHandler<AuthenticationSchemeOptions>{\n    public const string AuthenticationScheme = \"TestScheme\";\n    public const string UserNameHeader = \"UserName\";\n    public const string CountryHeader = \"Country\";\n    public const string AccessNumberHeader = \"AccessNumber\";\n    public const string DrivingLicenseNumberHeader = \"DrivingLicenseNumber\";\n    public TestAuthHandler(IOptionsMonitor<AuthenticationSchemeOptions> options, ILoggerFactory logger,\n        UrlEncoder encoder, ISystemClock clock) : base(options, logger, encoder, clock)\n    {\n    }\n    protected override Task<AuthenticateResult> HandleAuthenticateAsync()\n    {\n        return Task.FromResult(result);\n    }\n}\n```", "```cs\nprotected override Task<AuthenticateResult> HandleAuthenticateAsync(){\n    var claims = new List<Claim>();\n    if (Context.Request.Headers.TryGetValue(UserNameHeader, out var userName))\n    {\n        claims.Add(new Claim(ClaimTypes.Name, userName[0]));\n    }\n    if (Context.Request.Headers.TryGetValue(CountryHeader, out var country))\n    {\n        claims.Add(new Claim(ClaimTypes.Country, country[0]));\n    }\n    if (Context.Request.Headers.TryGetValue(AccessNumberHeader, out var accessNumber))\n    {\n        claims.Add(new Claim(AppClaimTypes.AccessNumber, accessNumber[0]));\n    }\n    if (Context.Request.Headers.TryGetValue(DrivingLicenseNumberHeader, out var drivingLicenseNumber))\n    {\n        claims.Add(new Claim(AppClaimTypes.DrivingLicenseNumber, drivingLicenseNumber[0]));\n    }\n    // You can add more claims here if you want\n    var identity = new ClaimsIdentity(claims, AuthenticationScheme);\n    var principal = new ClaimsPrincipal(identity);\n    var ticket = new AuthenticationTicket(principal, AuthenticationScheme);\n    var result = AuthenticateResult.Success(ticket);\n    return Task.FromResult(result);\n}\n```", "```cs\n[Fact]public async Task GetDrivingLicense_ShouldReturnOk_WhenAuthorizedWithTestAuthHandler()\n{\n    // Arrange\n    var client = fixture.WithWebHostBuilder(builder =>\n    {\n        builder.ConfigureTestServices(services =>\n        {\n            services.AddAuthentication(options =>\n                {\n                    options.DefaultAuthenticateScheme = TestAuthHandler.AuthenticationScheme;\n                    options.DefaultChallengeScheme = TestAuthHandler.AuthenticationScheme;\n                    options.DefaultScheme = TestAuthHandler.AuthenticationScheme;\n                })\n                .AddScheme<AuthenticationSchemeOptions, TestAuthHandler>(TestAuthHandler.AuthenticationScheme,\n                    options => { });\n        });\n    }).CreateClient();\n    client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(TestAuthHandler.AuthenticationScheme);\n    client.DefaultRequestHeaders.Add(TestAuthHandler.UserNameHeader, \"Test User\");\n    client.DefaultRequestHeaders.Add(TestAuthHandler.CountryHeader, \"New Zealand\");\n    client.DefaultRequestHeaders.Add(TestAuthHandler.AccessNumberHeader, \"123456\");\n    client.DefaultRequestHeaders.Add(TestAuthHandler.DrivingLicenseNumberHeader, \"12345678\");\n    // Act\n    var response = await client.GetAsync(\"/weatherforecast/driving-license\");\n    // Assert\n    response.EnsureSuccessStatusCode(); // Status Code 200-299\n    response.Content.Headers.ContentType.Should().NotBeNull();\n    response.Content.Headers.ContentType!.ToString().Should().Be(\"application/json; charset=utf-8\");\n}\n```", "```cs\n[Fact]public async Task GetDrivingLicense_ShouldReturnForbidden_WhenRequiredClaimsNotProvidedWithTestAuthHandler()\n{\n    // Arrange\n    var client = fixture.WithWebHostBuilder(builder =>\n    {\n        builder.ConfigureTestServices(services =>\n        {\n            services.AddAuthentication(options =>\n                {\n                    options.DefaultAuthenticateScheme = TestAuthHandler.AuthenticationScheme;\n                    options.DefaultChallengeScheme = TestAuthHandler.AuthenticationScheme;\n                    options.DefaultScheme = TestAuthHandler.AuthenticationScheme;\n                })\n                .AddScheme<AuthenticationSchemeOptions, TestAuthHandler>(TestAuthHandler.AuthenticationScheme,\n                    options => { });\n        });\n    }).CreateClient();\n    client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(TestAuthHandler.AuthenticationScheme);\n    client.DefaultRequestHeaders.Add(TestAuthHandler.UserNameHeader, \"Test User\");\n    client.DefaultRequestHeaders.Add(TestAuthHandler.CountryHeader, \"New Zealand\");\n    client.DefaultRequestHeaders.Add(TestAuthHandler.AccessNumberHeader, \"123456\");\n    // Act\n    var response = await client.GetAsync(\"/weatherforecast/driving-license\");\n    // Assert\n    response.StatusCode.Should().Be(HttpStatusCode.Forbidden);\n}\n```", "```cs\npublic HttpClient CreateClientWithAuth(string userName, string country, string accessNumber, string drivingLicenseNumber){\n    var client = WithWebHostBuilder(builder =>\n    {\n        builder.ConfigureTestServices(services =>\n        {\n            services.AddAuthentication(options =>\n                {\n                    options.DefaultAuthenticateScheme = TestAuthHandler.AuthenticationScheme;\n                    options.DefaultChallengeScheme = TestAuthHandler.AuthenticationScheme;\n                    options.DefaultScheme = TestAuthHandler.AuthenticationScheme;\n                })\n                .AddScheme<AuthenticationSchemeOptions, TestAuthHandler>(TestAuthHandler.AuthenticationScheme,\n                    options => { });\n        });\n    }).CreateClient();\n    client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(TestAuthHandler.AuthenticationScheme);\n    client.DefaultRequestHeaders.Add(TestAuthHandler.UserNameHeader, userName);\n    client.DefaultRequestHeaders.Add(TestAuthHandler.CountryHeader, country);\n    client.DefaultRequestHeaders.Add(TestAuthHandler.AccessNumberHeader, accessNumber);\n    client.DefaultRequestHeaders.Add(TestAuthHandler.DrivingLicenseNumberHeader, drivingLicenseNumber);\n    return client;\n}\n```", "```cs\n[Fact]public async Task GetCountry_ShouldReturnOk_WhenAuthorizedWithTestAuthHandler()\n{\n    // Arrange\n    var client = fixture.CreateClientWithAuth(\"Test User\", \"New Zealand\", \"123456\", \"12345678\");\n    // Act\n    var response = await client.GetAsync(\"/weatherforecast/country\");\n    // Assert\n    response.EnsureSuccessStatusCode(); // Status Code 200-299\n    response.Content.Headers.ContentType.Should().NotBeNull();\n    response.Content.Headers.ContentType!.ToString().Should().Be(\"application/json; charset=utf-8\");\n}\n[Fact]\npublic async Task GetCountry_ShouldReturnForbidden_WhenRequiredClaimsNotProvidedWithTestAuthHandler()\n{\n    // Arrange\n    // As we don't provide the country claim, the request will be forbidden\n    var client = fixture.CreateClientWithAuth(\"Test User\", \"\", \"123456\", \"12345678\");\n    // Act\n    var response = await client.GetAsync(\"/weatherforecast/country\");\n    // Assert\n    response.StatusCode.Should().Be(HttpStatusCode.Forbidden);\n}\n```", "```cs\npublic class TestAuthHandlerOptions : AuthenticationSchemeOptions{\n    public string UserName { get; set; } = string.Empty;\n}\n```", "```cs\nvar client = fixture.WithWebHostBuilder(builder =>{\n    builder.ConfigureTestServices(services =>\n    {\n        services.Configure<TestAuthHandlerOptions>(options =>\n        {\n            options.UserName = \"Test User\";\n        });\n        services.AddAuthentication(options =>\n            {\n                options.DefaultAuthenticateScheme = TestAuthHandler.AuthenticationScheme;\n                options.DefaultChallengeScheme = TestAuthHandler.AuthenticationScheme;\n                options.DefaultScheme = TestAuthHandler.AuthenticationScheme;\n            })\n            .AddScheme<TestAuthHandlerOptions, TestAuthHandler>(TestAuthHandler.AuthenticationScheme,\n                options => { });\n    });\n}).CreateClient();\n```", "```cs\npublic class TestAuthHandler : AuthenticationHandler<TestAuthHandlerOptions>{\n    public readonly string _userName;\n    public TestAuthHandler(IOptionsMonitor<TestAuthHandlerOptions> options, ILoggerFactory logger,\n    UrlEncoder encoder, ISystemClock clock) : base(options, logger, encoder, clock)\n    {\n        // Get the user name from the options\n        _userName = options.CurrentValue.UserName;\n    }\n}\n```", "```cs\ndotnet add package coverlet.collector\n```", "```cs\ndotnet test --collect:\"XPlat Code Coverage\"\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\"?><coverage line-rate=\"0.1125\" branch-rate=\"0.1875\" version=\"1.9\" timestamp=\"1685100267\" lines-covered=\"108\" lines-valid=\"960\" branches-covered=\"6\" branches-valid=\"32\">\n  <sources>\n    <source>C:\\dev\\web-api-with-asp-net\\example_code\\chapter9\\IntegrationTestsDemo\\IntegrationTest-v1\\InvoiceApp\\InvoiceApp.WebApi\\</source>\n  </sources>\n  <packages>\n    <package name=\"InvoiceApp.WebApi\" line-rate=\"0.1125\" branch-rate=\"0.1875\" complexity=\"109\">\n      <classes>\n      ...\n        <class name=\"InvoiceApp.WebApi.Services.EmailService\" filename=\"Services\\EmailService.cs\" line-rate=\"1\" branch-rate=\"1\" complexity=\"2\">\n          <methods>\n            <method name=\"GenerateInvoiceEmail\" signature=\"(InvoiceApp.WebApi.Models.Invoice)\" line-rate=\"1\" branch-rate=\"1\" complexity=\"1\">\n              <lines>\n                <line number=\"19\" hits=\"1\" branch=\"False\" />\n                <line number=\"20\" hits=\"1\" branch=\"False\" />\n                <line number=\"21\" hits=\"1\" branch=\"False\" />\n                <!-- ... -->\n                <line number=\"37\" hits=\"1\" branch=\"False\" />\n                <line number=\"38\" hits=\"1\" branch=\"False\" />\n              </lines>\n            </method>\n            <method name=\".ctor\" signature=\"(Microsoft.Extensions.Logging.ILogger`1&lt;InvoiceApp.WebApi.Interfaces.IEmailService&gt;,InvoiceApp.WebApi.Interfaces.IEmailSender)\" line-rate=\"1\" branch-rate=\"1\" complexity=\"1\">\n              <lines>\n                <line number=\"12\" hits=\"3\" branch=\"False\" />\n                <line number=\"13\" hits=\"3\" branch=\"False\" />\n                <line number=\"14\" hits=\"3\" branch=\"False\" />\n                <line number=\"15\" hits=\"3\" branch=\"False\" />\n                <line number=\"16\" hits=\"3\" branch=\"False\" />\n              </lines>\n            </method>\n          </methods>\n          <lines>\n            <line number=\"19\" hits=\"1\" branch=\"False\" />\n            <line number=\"20\" hits=\"1\" branch=\"False\" />\n            <line number=\"21\" hits=\"1\" branch=\"False\" />\n            <!-- ... -->\n            <line number=\"37\" hits=\"1\" branch=\"False\" />\n            <line number=\"38\" hits=\"1\" branch=\"False\" />\n            <line number=\"12\" hits=\"3\" branch=\"False\" />\n            <line number=\"13\" hits=\"3\" branch=\"False\" />\n            <line number=\"14\" hits=\"3\" branch=\"False\" />\n            <line number=\"15\" hits=\"3\" branch=\"False\" />\n            <line number=\"16\" hits=\"3\" branch=\"False\" />\n          </lines>\n        </class>\n        ...\n      </classes>\n    </package>\n  </packages>\n</coverage>\n```", "```cs\ndotnet tool install --global coverlet.console\n```", "```cs\ncoverlet /path/to/InvoiceApp.UnitTests.dll --target \"dotnet\" --targetargs \"test /path/to/test-project --no-build\"\n```", "```cs\ndotnet tool install -g dotnet-reportgenerator-globaltool\n```", "```cs\nreportgenerator \"-reports:/path/to/coverage.cobertura.xml\" \"-targetdir:coveragereport\" \"-reporttypes:Html;HtmlSummary\"\n```"]