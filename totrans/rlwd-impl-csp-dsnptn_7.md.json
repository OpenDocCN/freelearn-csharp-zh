["```cs\npublic interface IManufacturable\n{\n    public string ModelName { get; set; }\n    public int Year { get; }\n    public string SerialNumber { get; }\n    public string BuildStatus { get; set; }\n}\n```", "```cs\npublic abstract class Wheelchair : IManufacturable\n{\n```", "```cs\n    public string ModelName { get; set; }\n    public int Year { get; }\n    public string SerialNumber { get; }\n    public string? BuildStatus { get; set; }\n```", "```cs\n    protected Wheelchair()\n    {\n        ModelName = string.Empty; \n        SerialNumber = Guid.NewGuid().ToString();\n        Year = DateTime.Now.Year; \n    }\n}\n```", "```cs\npublic abstract class UnpoweredChair : Wheelchair\n{\n\n}\n```", "```cs\npublic abstract class WheelchairComponent\n{\n```", "```cs\n    protected float Weight { get; set; }\n    protected float Price { get; set; }\n```", "```cs\n    protected List<WheelchairComponent> Subcomponents { get; set; }\n```", "```cs\n    protected WheelchairComponent()\n    {\n        Subcomponents = new List<WheelchairComponent>();\n        Weight = 0.0f;\n        Price = 0.0f;\n    }\n```", "```cs\n    protected void DisplayWeight()\n    {\n        throw new NotImplementedException();\n    }\n    protected void DisplayCost()\n    {\n        throw new NotImplementedException();\n    }\n\n}\n```", "```cs\npublic abstract class UnpoweredChair : Wheelchair\n{\n    protected WheelchairComponent RightWheel { get; set; }\n    protected WheelchairComponent LeftWheel { get; set; }\n    protected WheelchairComponent Casters { get; set; }\n}\n```", "```cs\nnamespace WheelchairProject;\npublic abstract class WheelchairComponent\n{\n```", "```cs\nnamespace WheelchairProject.WheelchairComponents;\npublic abstract class WheelchairComponent\n{\n```", "```cs\nnamespace WheelchairProject.WheelchairComponents;\npublic class MechanicalWheel\n{\n\n}\n```", "```cs\nnamespace WheelchairProject.WheelchairComponents;\npublic abstract class MechanicalWheel : WheelchairComponent\n{\n    protected float Radius { get; set; }\n    protected int SpokeCount { get; set; }\n    protected bool IsPneumatic { get; set; }\n}\n```", "```cs\nusing WheelchairProject.WheelchairComponents.Wheels;\nnamespace WheelchairProject.WheelchairComponents.Axles;\npublic abstract class Axle : WheelchairComponent \n{\n```", "```cs\n  private MechanicalWheel _leftWheel;\n  private MechanicalWheel _rightWheel;\n```", "```cs\n  protected float Radius { get; set; }\n  protected float Length { get; set; }\n```", "```cs\n  public MechanicalWheel LeftWheel\n  {\n    get => _leftWheel;\n    set\n    {\n      _leftWheel = value;\n      FixComposite();\n    }\n  }\n```", "```cs\n  public MechanicalWheel RightWheel\n  {\n    get => _rightWheel;\n    set\n    {\n      _rightWheel = value;\n      FixComposite();\n    }\n  }\n```", "```cs\n  private void FixComposite()\n  {\n    Subcomponents.Clear();\n    Subcomponents.Add(_leftWheel);\n    Subcomponents.Add(_rightWheel);\n  }\n}\n```", "```cs\nusing WheelchairProject.WheelchairComponents.Frames;\nusing WheelchairProject.WheelchairComponents.Seats;\n```", "```cs\nnamespace WheelchairProject;\nusing WheelchairComponents;\n```", "```cs\npublic abstract class Wheelchair : WheelchairComponent, IManufacturable\n{\n```", "```cs\n    private WheelchairSeat _seat;\n    private WheelchairFrame _frame;\n  public string ModelName { get; set; }\n  public int Year { get; }\n  public string SerialNumber { get; }\n```", "```cs\n  public WheelchairSeat Seat\n  {\n    get => _seat;\n    set\n    {\n      _seat = value;\n      FixComposite();\n    }\n  }\n  public WheelchairFrame Frame\n  {\n    get => _frame;\n    set\n    {\n      _frame = value;\n      FixComposite();\n    }\n  }\n```", "```cs\n  private void FixComposite()\n  {\n    Subcomponents.Clear();\n    Subcomponents.Add(_frame);\n    Subcomponents.Add(_seat);\n  }\n\n```", "```cs\nusing WheelchairComponents;\n```", "```cs\npublic abstract class UnpoweredChair : Wheelchair\n{\n```", "```cs\n    protected MechanicalWheel RightWheel { get; set; }\nprotected MechanicalWheel LeftWheel { get; set; }\n    protected CasterAssembly Casters { get; set; }\n```", "```cs\nprotected void DisplayWeight()\n    {\n        throw new NotImplementedException();\n    }\n    protected void DisplayCost()\n    {\n        throw new NotImplementedException();\n    }\n```", "```cs\nprotected void DisplayWeight()\n{\n```", "```cs\n    if (!Subcomponents.Any()) return;\n```", "```cs\n    foreach (var component in Subcomponents)\n    {\n        Console.WriteLine(component.GetType().Name + \" weighs \"        + component.Weight);\n```", "```cs\n        component.DisplayWeight();\n    }\n}\n```", "```cs\nprotected void DisplayCost()\n{\n    if (!Subcomponents.Any()) return;\n    foreach (var component in Subcomponents)\n    {\n        Console.WriteLine(component.GetType().Name + \" costs $\"         + component.Price + \" USD\");\n        component.DisplayCost();\n    }\n}\n```", "```cs\nnamespace WheelchairProject.Builders;\n```", "```cs\npublic interface IWheelchairBuilder\n{\n    public void Reset();\n    public void BuildFrame();\n    public void BuildWheels();\n    public void BuildSeat();\n    public Wheelchair GetProduct();\n}\n```", "```cs\nnamespace WheelchairProject.Builders;\npublic class WheelchairBuilderDirector\n{\n```", "```cs\n    private IWheelchairBuilder _builder;\n```", "```cs\n    public WheelchairBuilderDirector(IWheelchairBuilder     builder)\n    {\n        _builder = builder;\n    }\n```", "```cs\n    public Wheelchair Build()\n    {\n       _builder.BuildSeat();\n       _builder.BuildFrame();\n       _builder.BuildAxleAssembly();\n       _builder.BuildCasterAssembly();\n```", "```cs\n        return _builder.GetProduct();\n    }\n}\n```", "```cs\nnamespace WheelchairProject.Builders;\npublic class PlanoWheelchairBuilder : IWheelchairBuilder\n{\n```", "```cs\n    private PlanoWheelchair _wheelchair;\n```", "```cs\n    Public PlanoWheelchairBuilder()\n    {\n        Reset();\n    }\n```", "```cs\n    public void Reset()\n    {\n        _wheelchair = new PlanoWheelchair();\n\n    }\n```", "```cs\n    public void BuildFrame()\n    {\n       throw new NotImplementedException();\n    }\n    public void BuildWheels()\n    {\n        throw new NotImplementedException();\n    }\npublic void BuildAxleAssembly()\n    {\n        throw new NotImplementedException();\n    }\n    public void BuildCasterAssembly()\n    {\n        throw new NotImplementedException();\n    }\n    public void BuildSeat()\n    {\n\n        throw new NotImplementedException();\n    }\n    public void BuildComposite()\n    {\n        throw new NotImplementedException();\n    }\n    public void BuildFramePainter()\n    {\n        throw new NotImplementedException();\n    }\n    public Wheelchair GetProduct()\n    {\n        return _wheelchair;\n    }\n}\n```", "```cs\nnamespace WheelchairProject.WheelchairComponents.Axles;\n```", "```cs\nnamespace WheelchairProject.WheelchairComponents.Casters;\n```", "```cs\nnamespace WheelchairProject.WheelchairComponents.Frames;\n```", "```cs\nnamespace WheelchairProject.WheelchairComponents.Seats;\n```", "```cs\nnamespace WheelchairProject.WheelchairComponents.Wheels;\n```", "```cs\nusing WheelchairProject.WheelchairComponents.Wheels;\nnamespace WheelchairProject.WheelchairComponents.Axles;\npublic class StandardAxle : Axle\n{\n    public StandardAxle(MechanicalWheel leftWheel, \n    MechanicalWheel rightWheel)\n    {\n        Price = 4.33f;\n        Weight = 0.335f;\n        Radius = 0.24f;\n        Length = 28.5f;\n        LeftWheel = leftWheel;\n        RightWheel = rightWheel;\n    }\n}\n```", "```cs\nusing WheelchairProject.WheelchairComponents.Wheels;\nnamespace WheelchairProject.WheelchairComponents.Casters;\npublic class PlanoCasterAssembly : CasterAssembly\n{\n    public PlanoCasterAssembly(MechanicalWheel wheel)\n    {\n        LoadCapacity = 300.0f;\n        MountingType = \"STEM\";\n        Weight = 0.443f;\n        Price = 4.32f;\n        Wheel = wheel;\n    }   \n}\n```", "```cs\nnamespace WheelchairProject.WheelchairComponents.Frames;\npublic class PlanoWheelchairFrame : WheelchairFrame\n{\n    public PlanoWheelchairFrame()\n    {\n        Price = 75.92f;\n        Weight = 16.34f;\n    }\n}\n```", "```cs\nnamespace WheelchairProject.WheelchairComponents.Seats;\npublic class PlanoSeat : WheelchairSeat\n{\n    public PlanoSeat()\n    {\n        Price = 27.48f;\n        Weight = 3.22f;\n        Width = 22;\n        BackHeight = 30;\n        SeatThickness = 2.4f;\n    }\n}\n```", "```cs\nnamespace WheelchairProject.WheelchairComponents.Wheels;\npublic class StandardWheel : MechanicalWheel\n{\n    public StandardWheel()\n    {\n        Price = 11.34f;\n        Weight = 1.3f;\n        Radius = 16f;\n        IsPneumatic = true;\n        SpokeCount = 48;\n    }\n}\n```", "```cs\nnamespace WheelchairProject.WheelchairComponents.Wheels;\npublic class CasterWheel : MechanicalWheel\n{\n    public CasterWheel()\n    {\n        Price = 5.21f;\n        Weight = 0.753f;\n        Radius = 6f;\n        IsPneumatic = true;\n        SpokeCount = 24;\n    }\n}\n```", "```cs\npublic void BuildFrame()\n{\n    wheelchair.Frame = new PlanoWheelchairFrame();\n}\n```", "```cs\npublic void BuildAxleAssembly()\n{\n    var leftWheel = new StandardWheel();\n    var rightWheel = new StandardWheel();\n    var axle = new StandardAxle(leftWheel, rightWheel);\n    _wheelchair.Frame.Axle = axle;\n}\n```", "```cs\npublic void BuildCasterAssembly()\n{\n    var planoCasterWheel = new CasterWheel();\n    var casterAssembly = new     PlanoCasterAssembly(planoCasterWheel);\n    _wheelchair.Frame.LeftCaster = casterAssembly;\n    _wheelchair.Frame.RightCaster = casterAssembly;\n}\n```", "```cs\npublic void BuildSeat()\n{\n    _wheelchair.Seat = new PlanoSeat();    \n}\n```", "```cs\npublic Wheelchair GetProduct()\n{\n    return _wheelchair;\n}\n```", "```cs\npublic class WheelchairBuilderDirector\n{\n    private IWheelchairBuilder _builder;\n```", "```cs\n    private static WheelchairBuilderDirector? _instance;\n```", "```cs\n    private WheelchairBuilderDirector(IWheelchairBuilder     builder)\n    {\n        _builder = builder;\n    }\n```", "```cs\n    public static WheelchairBuilderDirector? GetInstance(IWheelchairBuilder builder)\n    {\n        if (_instance == null)\n        {\n            _instance = new WheelchairBuilderDirector(builder);\n        }\n        return _instance;\n    }\n```", "```cs\nnamespace WheelchairProject.Painters;\npublic interface IFramePainter\n{\n```", "```cs\n    public string PaintColorName { get; set; }\n    public int Cyan { get; set; }\n    public int Magenta { get; set; }\n    public int Yellow { get; set; }\n    public int Black { get; set; }\n```", "```cs\n    public void MixPaint();\n    public void PaintFrame();\n}\n```", "```cs\nnamespace WheelchairProject.Painters;\npublic class PlanoWheelchairPainter : IFramePainter\n{\n```", "```cs\n    public string PaintColorName { get; set; }\n    public int Cyan { get; set; }\n    public int Magenta { get; set; }\n    public int Yellow { get; set; }\n    public int Black { get; set; }\n```", "```cs\n    public void MixPaint()\n    {\n        Console.WriteLine(\"Mixing in Cyan: \"         + Cyan.ToString() );\n        Console.WriteLine(\"Mixing in Magenta: \" + Magenta.                         ToString() );\n        Console.WriteLine(\"Mixing in Yellow: \" + Yellow.        ToString() );\n        Console.WriteLine(\"Mixing in Black: \" + Black.        ToString() );\n        Console.WriteLine(\"Mixing complete!  The color is: \" +         PaintColorName);\n    }\n```", "```cs\n    public void PaintFrame()\n    {\n        Console.WriteLine(\"Applying \" + PaintColorName);\n    }\n}\n```", "```cs\npublic abstract class Wheelchair : WheelchairComponent, IManufacturable\n{\n    public IFramePainter FramePainter { get; set; }\n```", "```cs\npublic interface IWheelchairBuilder\n{\n    public void Reset();\n    public void BuildFrame();\n    public void BuildAxleAssembly();\n    public void BuildCasterAssembly();\n    public void BuildSeat();\n```", "```cs\n    public void BuildFramePainter();\n```", "```cs\n    public Wheelchair GetProduct();\n}\n```", "```cs\n    public void BuildFramePainter()\n    {\n```", "```cs\n        var painter = new PlanoWheelchairPainter\n        {\n            PaintColorName = \"Green-Eyed Judy\",\n            Cyan = 79,\n            Magenta = 22,\n            Yellow = 100,\n            Black = 8\n        };\n```", "```cs\n        _wheelchair.FramePainter = painter;\n        _wheelchair.FramePainter.MixPaint();\n        _wheelchair.FramePainter.PaintFrame();\n    }\n```"]