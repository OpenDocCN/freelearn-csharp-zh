["```cs\nbuilder.Services.AddMemoryCache();\n```", "```cs\napp.MapGet(\n    \"/employees/{id}\",\n    async (int id,\n           [FromServices] DapperService dapperService,\n           IMemoryCache memoryCache) =>\n{\n});\n```", "```cs\nif(memoryCache.TryGetValue(id, out var result))\n{\n    return result;\n}\n```", "```cs\n  var employee = await dapperService.GetEmployeeById(id);\n  memoryCache.Set<Employee>(employee.Id, employee);\n```", "```cs\nvar cacheEntryOptions = new MemoryCacheEntryOptions()\n    .SetSlidingExpiration(TimeSpan.FromSeconds(30));\n```", "```cs\nmemoryCache.Set<Employee>(\n    employee.Id,\n    employee,\n    cacheEntryOptions);\n```", "```cs\n            app.MapGet(\"/employees/{id}\",\n            async (int id,\n                   [FromServices] DapperService\n                   dapperService, IMemoryCache memoryCache)\n                   =>\n            {\n                if(memoryCache.TryGetValue(id,\n                    out var result))\n                {\n                    return result;\n                }\n                var employee = await\n                    dapperService.GetEmployeeById(id);\n                var cacheEntryOptions = new\n                    MemoryCacheEntryOptions()\n                        .SetSlidingExpiration(\n                            TimeSpan.FromSeconds(30));\n                memoryCache.Set<Employee>(\n                    employee.Id,\n                    employee,\n                    cacheEntryOptions);\n                return Results.Ok(employee);\n            });\n```", "```cs\ndotnet add package NRedisStack\n```", "```cs\nusing StackExchange.Redis;\n```", "```cs\nConfigurationOptions options = new ConfigurationOptions\n{\n    EndPoints = { { \"REDIS IP\", 6379 } },\n};\nConnectionMultiplexer redis =\n    ConnectionMultiplexer.Connect(options);\nIDatabase db = redis.GetDatabase();\n```", "```cs\nvar employeeIdKey = id.ToString();\nvar cachedEmployee = db.StringGet(employeeIdKey);\nif (cachedEmployee.HasValue)\n{\n    return Results.Ok(\n       JsonSerializer.Deserialize<Employee>(cachedEmployee)\n    );\n}\n```", "```cs\nvar employee = await dapperService.GetEmployeeById(id);\ndb.StringSet(\n    employeeIdKey,\n    JsonSerializer.Serialize(employee));\n```", "```cs\napp.MapGet(\n    \"/employees/{id}\",\n    async (int id,\n           [FromServices] DapperService dapperService) =>\n{\n    ConfigurationOptions options = new ConfigurationOptions\n        {\n          EndPoints = { { \"192.168.2.8\", 6379 } },\n        };\n        ConnectionMultiplexer redis =\n            ConnectionMultiplexer.Connect(options);\n        IDatabase db = redis.GetDatabase();\n        var employeeIdKey = id.ToString();\n        var cachedEmployee = db.StringGet(employeeIdKey);\n        if (cachedEmployee.HasValue)\n        {\n            return Results.Ok(\n                JsonSerializer.Deserialize<Employee>(\n                    cachedEmployee));\n        }\n        var employee = await\n            dapperService.GetEmployeeById(id);\n        return Results.Ok(employee);\n});\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddResponseCaching();\nvar app = builder.Build();\napp.UseResponseCaching();\n```", "```cs\n    app.MapGet(\n        \"/employees/{id}\",\n        async (int id,\n               [FromServices] DapperService dapperService,\n               HttpContext context) =>\n    {\n        var employee = await\n            dapperService.GetEmployeeById(id);\n        context.Response.GetTypedHeaders().CacheControl =\n            new Microsoft.Net.Http.Headers\n                .CacheControlHeaderValue()\n    {\n        Public = true,\n        MaxAge = TimeSpan.FromSeconds(60)\n    };\n        context.Response.Headers[Microsoft.Net.Http.Headers\n            .HeaderNames.Vary] =\n                new string[] { \"Accept-Encoding\" };\n        return Results.Ok(employee);\n});\n```"]