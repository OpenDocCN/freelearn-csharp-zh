- en: Building a Web Client (Consuming Web Services)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建Web客户端（消费Web服务）
- en: So far in this book, we have created RESTful services so that we can call or
    consume these services either within or from outside the project. In this chapter,
    we will discuss some use cases of these services, as well as the techniques and
    approaches for consuming RESTful web services.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在这本书中，我们已经创建了RESTful服务，以便我们可以在项目内部或外部调用或消费这些服务。在本章中，我们将讨论这些服务的某些用例，以及消费RESTful
    Web服务的技巧和方法。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Consuming RESTful web services
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消费RESTful Web服务
- en: Building a REST web client
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建REST Web客户端
- en: Consuming RESTful web services
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消费RESTful Web服务
- en: Until now, we have created RESTful services and discussed server-side code with
    the help of code examples. We have consumed these services using external third-party
    tools, such as Postman and Advanced RESTClient. We have also consumed these services
    using fake objects and during unit testing. While helpful, these examples of consumption
    have not shown the true strength of RESTful services, as they have either tested
    their functionality or verified its output.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经创建了RESTful服务，并使用代码示例讨论了服务器端代码。我们使用外部第三方工具，如Postman和Advanced RESTClient，来消费这些服务。我们还使用模拟对象和单元测试期间消费了这些服务。虽然这些消费示例很有帮助，但它们并没有真正展示RESTful服务的优势，因为它们要么测试了其功能，要么验证了其输出。
- en: 'There may be situations where you will need to consume or use these services
    within another application similar to a controller, or even your own application
    itself. These applications can be any of the following:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 可能存在这样的情况，你需要在另一个类似于控制器或甚至你自己的应用程序中消费或使用这些服务。这些应用程序可以是以下任何一种：
- en: Console based
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于控制台
- en: Web based
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于Web
- en: Mobile or any other device based
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于移动或其他设备
- en: 'Let''s take a look at one of the applications we''ve already discussed: let''s
    say you need some mechanism to implement or consume an external API (in this case,
    PayPal) while integrating an online payment system. In this case, the external
    tools we''ve already covered, such as Postman and Advanced RESTClient can’t help;
    to meet your needs, you require a REST client.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们之前讨论的一个应用程序：假设你需要某种机制来实现或消费外部API（在这种情况下，是PayPal），同时集成在线支付系统。在这种情况下，我们之前已经介绍的外部工具，如Postman和Advanced
    RESTClient，无法帮助；为了满足你的需求，你需要一个REST客户端。
- en: The following diagram illustrates how services can be consumed using a REST
    client with the help of an HTTP client. In the following diagram, the REST client
    is interacting (request, response) with both external and network services that
    have been developed in ASP.NET Core or are located on either the same or a different
    server.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示说明了如何使用HTTP客户端通过REST客户端消费服务。在以下图中，REST客户端正在与ASP.NET Core中开发的外部和服务进行交互（请求、响应），这些服务位于同一服务器或不同服务器上。
- en: '![](img/a80a5a5f-efbd-4d42-a85e-16b910703271.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a80a5a5f-efbd-4d42-a85e-16b910703271.png)'
- en: '**Web**, **Console**, **Mobile**, and so on, are the clients consuming these
    services with the help of the REST client.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**Web**、**控制台**、**移动**等，都是通过REST客户端帮助消费这些服务的客户端。'
- en: We will now discuss how to build a REST client that we can use to consume other
    RESTful web services (that is, APIs) in our application.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将讨论如何构建一个REST客户端，我们可以使用它来消费我们应用程序中的其他RESTful Web服务（即API）。
- en: Building a REST web client
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建REST Web客户端
- en: RESTful services may or may not be a part of a web application. A web application
    may call or consume external APIs or services from the same application. The program
    that enables the interaction or communication (request, response) between the
    services and the application consuming those services is called a **client**.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: RESTful服务可能是也可能不是Web应用程序的一部分。Web应用程序可以调用或消费来自同一应用程序的外部API或服务。使服务与应用程序消费这些服务的交互或通信（请求、响应）成为可能的程序称为**客户端**。
- en: A client helps applications to communicate (Request, Response) with APIs.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端帮助应用程序通过API进行（请求、响应）通信。
- en: In this section, we will create a web client. A web client is an application
    or program written in ASP.NET Core.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建一个Web客户端。Web客户端是用ASP.NET Core编写的应用程序或程序。
- en: Before we build a test web client, we need to discuss what we have to call.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们构建测试Web客户端之前，我们需要讨论我们需要调用什么。
- en: 'Continuing our example of the FlixOne BookStore, the following table lists
    the produces and services that we will call and consume:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 继续我们的FlixOne BookStore示例，以下表格列出了我们将调用和消费的生产者和服务：
- en: '| **API resource** | **Description** |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| **API资源** | **描述** |'
- en: '| `GET /api/product` | Gets a list of products. |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
- en: '| `GET /api/product{id}` | Gets a product. |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
- en: '| `PUT /api/product{id}` | Updates an existing product. |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
- en: '| `DELETE /api/product{id}` | Deletes an existing product. |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
- en: '| `POST /api/product` | Adds a new product. |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
- en: 'Our FlixOne product service is designed for the following tasks:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Adding a new product
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating an existing product
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting an existing product
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving a product
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We have already ensured Swagger support for our product APIs (please refer
    to the previous chapters for more information), so let''s get going. To start
    with this project, follow these steps:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: First, run Visual Studio 2017
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select File | Open
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the project FlixOne.BookStore.ProductService
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the project by pressing *F5* or clicking directly from the menu
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following URL: `http://localhost:10065/swagger/`'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should now see Swagger documentation for your Product APIs, as shown in
    the following screenshot:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4202f70f-415a-491c-affe-7cf9831b0210.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
- en: Product APIs documentation
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Cooking the web client
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have already discussed what APIs need to consume and which resource returns
    what, so now it''s time to cook our web client so we can consume and call our
    product APIs. To do so, follow these steps:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: To create an entirely new solution for our new project, go to File | New | Project
    (or press *Ctrl* + *Shift* + *N*) as shown in the following screenshot.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7f232c75-ae75-41b4-84b9-5ff7b5735f92.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
- en: From New Project, select ASP.NET Core Web Application.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Name the project `FlixOne.BookStore.WebClient` and then click OK as shown in
    the following screenshot:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4dd65c06-4f52-43fd-9c75-68a654d22aae.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
- en: 'From the ASP.NET Core template window, select Web Application and click OK
    as shown in the following screenshot:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b8014e2a-003d-4805-8349-e71cb4fc5e87.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
- en: Now run the project Debug | Start Debugging or hit the *F5* key.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should now see a default website template.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will now create a web client using **RestSharp**. We need to add the support
    of RestSharp to get the facility to make a call over the HTTP protocol for our
    API resources.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: RestSharp is a lightweight HTTP client library. You can make changes to suit
    your needs, as it is an open source library. You can find the complete repository
    at [https://github.com/restsharp/RestSharp](https://github.com/restsharp/RestSharp)
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a NuGet package using Open Package Manager (right-click on Solution from
    Solution Explorer), as shown in the following screenshot:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c88554eb-4b19-480f-8597-e0b8d2645b0c.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
- en: 'Search for RestSharp and check the checkbox saying include prerelease, and
    then click Install as shown in the following screenshot:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/64ac9dd2-1ba4-409d-a422-2104d598a3f1.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
- en: Selecting the RestSharp NuGet package
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 'The required packages will now be installed, as shown in the following screenshot:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/65a1722d-161f-4ab7-a8d5-0e24d31e113d.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
- en: Installing the RestSharp package
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: 'Before going forward, let''s first make sure that our product APIs are working
    correctly. Run the product API project, open Swagger, and hit a `GET /api/product/productlist`
    resource as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续前进之前，让我们首先确保我们的产品API能够正确工作。运行产品API项目，打开Swagger，然后按照以下方式点击`GET /api/product/productlist`资源：
- en: '![](img/d2bd41c1-e23c-40be-805d-0fefb43d419d.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d2bd41c1-e23c-40be-805d-0fefb43d419d.png)'
- en: 'After executing the previous resource, you should see a complete list of products,
    as shown in the following screenshot:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 执行前面的资源后，你应该会看到一个完整的产品列表，如下面的截图所示：
- en: '![](img/dbc16f11-5f14-4aa5-bbf3-a41d6d6c9cc6.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dbc16f11-5f14-4aa5-bbf3-a41d6d6c9cc6.png)'
- en: Try all available resources to make sure that your product APIs are working
    correctly.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试所有可用的资源以确保你的产品API能够正确工作。
- en: Writing code
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写代码
- en: 'So far, we have cooked the things required for writing code for our REST web
    client; in this section, we will be writing actual code:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经为编写REST Web客户端的代码准备好了所需的东西；在本节中，我们将编写实际的代码：
- en: Add a simple code to call or consume your product APIs.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加简单的代码来调用或消费你的产品API。
- en: If you created a new project in the same solution (refer to *step 1* of the
    section *Cooking the web client*), please make sure that the project Product API
    is running before you start your web client project.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在同一解决方案中创建了一个新项目（参考*Cooking the web client*部分的*步骤 1*），请在开始你的web客户端项目之前确保Product
    API项目正在运行。
- en: Add a new class (*Ctrl* + *Shift* + *C*) in the `Client` folder and name it
    `RestSharpWebClient`.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Client`文件夹中添加一个新的类（*Ctrl* + *Shift* + *C*）并命名为`RestSharpWebClient`。
- en: '![](img/2981769f-110c-479f-a737-834a493a847b.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2981769f-110c-479f-a737-834a493a847b.png)'
- en: 'Now open the `RestSharpWebClient` class and add the following code:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开`RestSharpWebClient`类并添加以下代码：
- en: '[PRE0]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding code initializes RestClient of RestSharp and accepts the base
    URL as a string or a URI.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码初始化RestSharp的RestClient并接受一个字符串或URI作为基础URL。
- en: URI stands for Uniform Resource Identifier and is a representation of a string
    used to identify resources.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: URI代表统一资源标识符，它是一个用于标识资源的字符串表示。
- en: You may come across a scenario where there are multiple environments; in this
    case, you should store a URI where you point it as per your environment. For example,
    you can have the URI `http://devserver:10065/api/` for your development environment
    or the URI `http://testenv:10068/api/` for your QA environment. You should store
    these keys in the `config` file or somewhere similar so that the values are easily
    accessible. We recommend using `new RestClient(somevariableforURI);`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会遇到存在多个环境的情况；在这种情况下，你应该存储一个URI，根据你的环境将其指向相应的位置。例如，你可以为你的开发环境使用URI `http://devserver:10065/api/`，或者为你的QA环境使用URI
    `http://testenv:10068/api/`。你应该将这些键存储在`config`文件或类似的位置，以便值易于访问。我们建议使用`new RestClient(somevariableforURI);`。
- en: In our application, product APIs are running on localhost and the listening
    port `10065`. This may be different in your case.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中，产品API在本地主机上运行，监听端口为`10065`。在你的情况下可能会有所不同。
- en: 'Let''s discuss the following code snippet to call or consume the `GET /api/product
    /productlist` resource and populate the complete product list, as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论以下代码片段，以调用或消费`GET /api/product /productlist`资源并填充完整的产品列表，如下所示：
- en: '[PRE1]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, we are making a `GET` request using `RestRequest`, where we passed a resource
    and method.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用`RestRequest`进行`GET`请求，其中我们传递了一个资源和方法。
- en: 'To get a particular product using `productid`, enter the following code:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用`productid`获取特定产品，请输入以下代码：
- en: '[PRE2]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the preceding code block, the `GetProductDetails` method does a similar thing
    to the method `GetProducts`. The difference is that it accepts the parameter `productId`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码块中，`GetProductDetails`方法与`GetProducts`方法做类似的事情。区别在于它接受`productId`参数。
- en: 'The following is the complete code of our REST client:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们REST客户端的完整代码：
- en: '[PRE3]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: With the preceding code snippet, you have now added the functionality that will
    call and consume your product APIs.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前面的代码片段，你现在已经添加了调用和消费你的产品API的功能。
- en: Implementing a REST web client
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现REST Web客户端
- en: RESTful services may or may not be a part of your web application, but we still
    need to understand how to implement them.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: RESTful服务可能是也可能不是你Web应用的一部分，但我们需要了解如何实现它们。
- en: 'So, now it''s time to do some real work. Add `ProductController` to the project,
    as well as the following action:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，现在是时候做一些实际的工作了。将`ProductController`添加到项目中，以及以下操作：
- en: '[PRE4]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Take a look at the preceding code snippet. We have called the `GetProducts`
    method of `RestSharpWebClient` and populated our `Index.cshtml` view with a complete
    list of products.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下前面的代码片段。我们已经调用了`RestSharpWebClient`的`GetProducts`方法，并用产品完整列表填充了`Index.cshtml`视图。
- en: 'To add another action method, enter the following complete code of our `ProductController`.
    The following code snippet contains the `Index` action method and gives us a list
    of products:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加另一个操作方法，输入以下完整的`ProductController`代码。以下代码片段包含`Index`操作方法，并给出了产品列表：
- en: '[PRE5]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Let's now look at two `Create` action methods: `HttpGet` and `HttpPost`. The
    first one provides us with an entry screen for input and the second posts all
    the data (the input values) using the `HttpPost` method. On the server side, you
    can receive all data in an `IFormCollection` parameter, and you can also easily
    write logic to get all of your values in `ProductViewModel`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看两个`Create`操作方法：`HttpGet`和`HttpPost`。第一个提供了一个输入的入口屏幕，第二个使用`HttpPost`方法提交所有数据（输入值）。在服务器端，你可以通过`IFormCollection`参数接收所有数据，你也可以轻松地编写逻辑来获取`ProductViewModel`中的所有值。
- en: '[PRE6]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You can also write a `HttpPost` method that accepts a parameter of the type `ProductViewModel`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以编写一个接受`ProductViewModel`类型参数的`HttpPost`方法。
- en: 'The following code snippet shows us the code for the `Edit` action method,
    which is similar to the `Create` action method but except that it updates existing
    data rather than inserting new data:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段显示了`Edit`操作方法的代码，它与`Create`操作方法类似，但不同之处在于它更新现有数据而不是插入新数据：
- en: '[PRE7]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `Delete` action method is meant to remove a specific record or data from
    a database or collection. The action method `Delete` of `HttpGet` fetches a record
    based on a given ID and displays the data ready for modification. Another `Delete` action
    of `HttpPost` sends modified data to the server for further processing. This means
    the system can delete data and records.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`Delete`操作方法旨在从数据库或集合中删除特定的记录或数据。`HttpGet`的`Delete`操作方法根据给定的ID获取记录并显示准备修改的数据。另一个`HttpPost`的`Delete`操作将修改后的数据发送到服务器进行进一步处理。这意味着系统可以删除数据和记录。'
- en: '[PRE8]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now let''s open `_Layout.cshtml` from the `Shared` folder and add the following
    line to add a link to our newly added `ProductController`:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们打开`Shared`文件夹中的`_Layout.cshtml`并添加以下行，以添加到我们新添加的`ProductController`的链接：
- en: '[PRE9]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You should see a new menu named Web Client when you run the project, as shown
    in the following screenshot:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行项目时，你应该会看到一个名为Web Client的新菜单，如下面的截图所示：
- en: '![](img/0860e52c-5016-46d2-a6df-d0812d31377e.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0860e52c-5016-46d2-a6df-d0812d31377e.png)'
- en: 'We are now ready to see some results. Click on the Web Client menu, and you
    will see the following screen:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备好看到一些结果。点击Web Client菜单，你会看到以下屏幕：
- en: '![](img/1626a7e2-dcdc-4ad2-983c-4410f4e9784a.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1626a7e2-dcdc-4ad2-983c-4410f4e9784a.png)'
- en: From the preceding screen, you can perform other operations, as well as call
    and consume your product APIs—namely, Create, Edit, and Delete.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的屏幕中，你可以执行其他操作，以及调用和消费你的产品API——即创建、编辑和删除。
- en: Summary
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The creation of RESTful services is important for any project, but these services
    are of no use if there is no way of using them. In this chapter, we looked at
    how to add RestSharp support to our web project and consume our pre-developed
    product APIs. We also created a web client that could consume web services by
    rendering output on our web pages using ASP.NET Core.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 创建RESTful服务对任何项目都很重要，但如果无法使用这些服务，这些服务就毫无用处。在本章中，我们探讨了如何将RestSharp支持添加到我们的Web项目中，并消费我们预先开发的产品API。我们还创建了一个可以通过在ASP.NET
    Core网页上渲染输出来消费Web服务的Web客户端。
- en: In the next chapter, we will discuss the hot topic of microservices, the next
    level of the separation of services. We will discuss how microservices communicate,
    what their advantages are, and why we require them.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论微服务这一热门话题，这是服务分离的下一级。我们将讨论微服务如何通信，它们的优点是什么，以及为什么我们需要它们。
