["```cs\nusing System;\nusing System.Collections.Generic;\nusing Volo.Abp.Domain.Entities;\nnamespace FormsApp\n{\n    public class Form : BasicAggregateRoot<Guid>\n    {\n        public string Name { get; set; }\n        public string Description { get; set; }\n        public bool IsDraft { get; set; }\n        public ICollection<Question> Questions { get; set; }\n    }\n}\n```", "```cs\npublic class Question : Entity<Guid>\n{\n    public Guid FormId { get; set; }\n    public string Title { get; set; }\n    public bool AllowMultiSelect { get; set; }\n    public ICollection<Option> Options { get; set; }\n}\n```", "```cs\npublic class Form : BasicAggregateRoot<Guid>\n{\n    ...\n    public ICollection<FormManager> Managers { get; set; }\n}\n```", "```cs\npublic class FormManager : Entity\n{\n    public Guid FormId { get; set; }\n    public Guid UserId { get; set; }\n    public Guid IsOwner { get; set; }\n    public override object[] GetKeys()\n    {\n        return new object[] {FormId, UserId};\n    }\n}\n```", "```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Volo.Abp.DependencyInjection;\nusing Volo.Abp.Domain.Repositories;\nnamespace FormsApp\n{\n    public class FormService : ITransientDependency\n    {\n        private readonly IRepository<Form, Guid>                         _formRepository;\n        public FormService(IRepository<Form, Guid>                       formRepository)\n        {\n            _formRepository = formRepository;\n        }\n        public async Task<List<Form>> GetDraftForms()\n        {\n            return await _formRepository\n                .GetListAsync(f => f.IsDraft);\n        }\n    }\n}\n```", "```cs\nvar form = new Form(); // TODO: set the form properties\nawait _formRepository.InsertAsync(form, autoSave: true);\n```", "```cs\nawait _formRepository.DeleteAsync(form => form.IsDraft);\n```", "```cs\npublic async Task<Form> GetFormAsync(Guid formId)\n{\n    return await _formRepository.GetAsync(formId);\n}\n```", "```cs\npublic async Task<Form> GetFormAsync(string name)\n{\n    return await _formRepository\n        .GetAsync(form => form.Name == name);\n}\n```", "```cs\npublic async Task<List<Form>> GetFormsAsync(string name)\n{\n    return await _formRepository\n        .GetListAsync(form => form.Name.Contains(name));\n}\n```", "```cs\npublic class FormService2 : ITransientDependency\n{\n    private readonly IRepository<Form, Guid>                         _formRepository;\n    private readonly IAsyncQueryableExecuter                         _asyncExecuter;\n    public FormService2(\n        IRepository<Form, Guid> formRepository,\n        IAsyncQueryableExecuter asyncExecuter)\n    {\n        _formRepository = formRepository;\n        _asyncExecuter = asyncExecuter;\n    }\n\n    public async Task<List<Form>>                                   GetOrderedFormsAsync(string name)\n    {\n        var queryable = await                                           _formRepository.GetQueryableAsync();\n        var query = from form in queryable\n            where form.Name.Contains(name)\n            orderby form.Name\n            select form;\n        return await _asyncExecuter.ToListAsync(query);\n    }\n}\n```", "```cs\nvar query = queryable\n    .Where(form => form.Name.Contains(name))\n    .OrderBy(form => form.Name);\n```", "```cs\nreturn await query.ToListAsync();\n```", "```cs\npublic async Task<int> GetCountAsync()\n{\n    return await _formRepository\n        .CountAsync(x => x.Name.StartsWith(\"A\"));\n}\n```", "```cs\npublic class FormManagementService : ITransientDependency\n{\n    private readonly IRepository<FormManager>                       _formManagerRepository;\n    public FormManagementService(\n        IRepository<FormManager> formManagerRepository)\n    {\n        _formManagerRepository = formManagerRepository;\n    }\n    public async Task<List<FormManager>>                             GetManagersAsync(Guid formId)\n    {\n        return await _formManagerRepository\n            .GetListAsync(fm => fm.FormId == formId);\n    }\n}\n```", "```cs\npublic interface IFormRepository : IRepository<Form, Guid>\n{\n    Task<List<Form>> GetListAsync(\n        string name,\n        bool includeDrafts = false\n    );\n}\n```", "```cs\nabp new DemoApp -dbms PostgreSQL\n```", "```cs\nConfigure<AbpDbContextOptions>(options =>\n{\n    options.UseSqlServer();\n});\n```", "```cs\nusing Microsoft.EntityFrameworkCore;\nusing Volo.Abp.EntityFrameworkCore;\nnamespace FormsApp\n{\n    public class FormsAppDbContext :                                 AbpDbContext<FormsAppDbContext>\n    {\n        public DbSet<Form> Forms { get; set; }\n        public FormsAppDbContext(\n            DbContextOptions<FormsAppDbContext> options)\n            : base(options)\n        {\n        }\n    }\n}\n```", "```cs\npublic override void ConfigureServices(\n    ServiceConfigurationContext context)\n{\n    context.Services.AddAbpDbContext<FormsAppDbContext>              (options =>\n    {\n        options.AddDefaultRepositories();\n    });\n}\n```", "```cs\noptions.AddDefaultRepositories(includeAllEntities: true);\n```", "```cs\npublic class FormsAppDbContext : AbpDbContext<FormsAppDbContext>\n{\n    ...\n    protected override void OnModelCreating(ModelBuilder             builder)\n    {\n        base.OnModelCreating(builder);\n        // TODO: configure entities...\n    }\n}\n```", "```cs\nbuilder.Entity<Form>(b =>\n{\n    b.ToTable(\"Forms\");\n    b.ConfigureByConvention();\n    b.Property(x => x.Name)\n        .HasMaxLength(100)\n        .IsRequired();\n    b.HasIndex(x => x.Name);\n});\n```", "```cs\nbuilder.Entity<Question>(b =>\n{\n    b.ToTable(\"FormQuestions\");\n    b.ConfigureByConvention();\n    b.Property(x => x.Title)\n        .HasMaxLength(200)\n        .IsRequired();\n    b.HasOne<Form>()\n        .WithMany(x => x.Questions)\n        .HasForeignKey(x => x.FormId)\n        .IsRequired();\n});\n```", "```cs\npublic class FormRepository :\n    EfCoreRepository<FormsAppDbContext, Form, Guid>,\n    IFormRepository\n{\n    public FormRepository(\n        IDbContextProvider<FormsAppDbContext>                           dbContextProvider)\n        : base(dbContextProvider)\n    { }\n    public async Task<List<Form>> GetListAsync(\n        string name, bool includeDrafts = false)\n    {\n        var dbContext = await GetDbContextAsync();\n        var query = dbContext.Forms\n            .Where(f => f.Name.Contains(name));\n        if (!includeDrafts)\n        {\n            query = query.Where(f => !f.IsDraft);\n        }\n        return await query.ToListAsync();\n    }\n}\n```", "```cs\nvar dbContext = await GetDbContextAsync();\nreturn await dbContext.Forms\n    .Where(f => f.Name.Contains(name))\n    .WhereIf(!includeDrafts, f => !f.IsDraft)\n    .ToListAsync();\n```", "```cs\npublic async Task DeleteAllDraftsAsync()\n{\n    var dbContext = await GetDbContextAsync();\n    await dbContext.Database\n        .ExecuteSqlRawAsync(\"DELETE FROM Forms WHERE                     IsDraft = 1\");\n}\n```", "```cs\npublic class FormService : ITransientDependency\n{\n    private readonly IFormRepository _formRepository;\n    public FormService(IFormRepository formRepository)\n    {\n        _formRepository = formRepository;\n    }\n\n    public async Task<List<Form>> GetFormsAsync(string               name)\n    {\n        return await _formRepository\n            .GetListAsync(name, includeDrafts: true);\n    }\n}\n```", "```cs\ncontext.Services.AddAbpDbContext<FormsAppDbContext>(options =>\n{\n    options.AddDefaultRepositories();\n    options.AddRepository<Form, FormRepository>();\n});\n```", "```cs\npublic async Task<IEnumerable<Question>> GetQuestionsAsync(Form form)\n{\n    await _formRepository\n        .EnsureCollectionLoadedAsync(form, f =>                         f.Questions);\n    return form.Questions;\n}\n```", "```cs\n    Configure<AbpDbContextOptions>(options =>\n    {\n        options.PreConfigure<FormsAppDbContext>(opts =>\n        {\n            opts.DbContextOptions.UseLazyLoadingProxies();\n        });\n        options.UseSqlServer();\n    });\n    ```", "```cs\n    public class Form : BasicAggregateRoot<Guid>\n    {\n        ...\n        public virtual ICollection<Question> Questions {           get; set; }\n        public virtual ICollection<FormManager> Owners {            get; set; }\n    }\n    ```", "```cs\npublic async Task<Form> GetWithQuestions(Guid formId)\n{\n    var dbContext = await GetDbContextAsync();\n    return await dbContext.Forms\n        .Include(f => f.Questions)\n        .SingleAsync(f => f.Id == formId);\n}\n```", "```cs\npublic async Task EagerLoadDemoAsync(Guid formId)\n{\n    var queryable = await _formRepository\n        .WithDetailsAsync(f => f.Questions);\n    var query = queryable.Where(f => f.Id == formId);\n    var form = await                                                 _asyncExecuter.FirstOrDefaultAsync(query);\n    foreach (var question in form.Questions)\n    {\n        //...\n    }\n}\n```", "```cs\nConfigure<AbpEntityOptions>(options =>\n{\n    options.Entity<Form>(orderOptions =>\n    {\n        orderOptions.DefaultWithDetailsFunc = query =>                   query\n            .Include(f => f.Questions)\n            .Include(f => f.Owners);\n    });\n});\n```", "```cs\nvar form = await _formRepository.GetAsync(formId);\n```", "```cs\nvar form = await _formRepository.GetAsync(formId, includeDetails: false);\n```", "```cs\nvar forms = await _formRepository.GetListAsync(f => f.Name.StartsWith(\"A\"));\n```", "```cs\nvar forms = await _formRepository.GetListAsync(f => f.Name.StartsWith(\"A\"), includeDetails: true);\n```", "```cs\nabp new FormsApp -d mongodb\n```", "```cs\npublic class FormsAppDbContext : AbpMongoDbContext\n{\n    [MongoCollection(\"Forms\")]\n    public IMongoCollection<Form> Forms =>                           Collection<Form();\n}\n```", "```cs\nprotected override void CreateModel(IMongoModelBuilder builder)\n{\n    builder.Entity<Form>(b =>\n    {\n        b.BsonMap.UnmapProperty(f => f.Description);\n    });\n}\n```", "```cs\npublic override void ConfigureServices(\n    ServiceConfigurationContext context)\n{\n    context.Services.AddMongoDbContext<FormsAppDbContext>(\n        options =>\n            {\n                options.AddDefaultRepositories();\n            });\n}\n```", "```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing MongoDB.Driver;\nusing MongoDB.Driver.Linq;\nusing Volo.Abp.Domain.Repositories.MongoDB;\nusing Volo.Abp.MongoDB;\nnamespace FormsApp\n{\n    public class FormRepository : \n        MongoDbRepository<FormsAppDbContext, Form, Guid>, \n        IFormRepository\n    {\n        public FormRepository(\n            IMongoDbContextProvider<FormsAppDbContext>                       dbContextProvider)\n            : base(dbContextProvider)\n        { }\n        // TODO: implement the GetListAsync method\n    }\n}\n```", "```cs\npublic async Task<List<Form>> GetListAsync(\n    string name, bool includeDrafts = false)\n{\n    var queryable = await GetMongoQueryableAsync();\n    var query = queryable.Where(f =>                                 f.Name.Contains(name));\n    if (!includeDrafts)\n    {\n        query = queryable.Where(f => !f.IsDraft);\n    }\n    return await query.ToListAsync();\n}\n```", "```cs\nIMongoCollection<Form> formsCollection = await GetCollectionAsync();\n```", "```cs\ncontext.Services.AddMongoDbContext<FormsAppDbContext>(options =>\n{\n    options.AddDefaultRepositories();\n    options.AddRepository<Form, FormRepository>();\n});\n```", "```cs\npublic override void ConfigureServices(\n    ServiceConfigurationContext context)\n{\n    Configure<AbpUnitOfWorkDefaultOptions>(options =>\n    {\n        options.TransactionBehavior =                                   UnitOfWorkTransactionBehavior.Enabled;\n        options.Timeout = 300000; // 5 minutes\n        options.IsolationLevel =                                      IsolationLevel.Serializable;\n    });\n}\n```", "```cs\n[UnitOfWork(isTransactional: true)]\npublic async Task DoItAsync()\n{\n    await _formRepository.InsertAsync(new Form() { ... });\n    await _formRepository.InsertAsync(new Form() { ... });\n}\n```", "```cs\npublic async Task DoItAsync()\n{\n    using (var uow = _unitOfWorkManager.Begin(\n        requiresNew: true,\n        isTransactional: true,\n        timeout: 15000))\n    {\n        await _formRepository.InsertAsync(new Form() { });\n        await _formRepository.InsertAsync(new Form() { });\n        await uow.CompleteAsync();\n    }\n}\n```", "```cs\nawait _unitOfWorkManager.Current.SaveChangesAsync();\n```"]