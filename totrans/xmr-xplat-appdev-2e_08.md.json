["```cs\nfunction insert(item, user, request) {\n\n  request.execute();\n\n}\n```", "```cs\nfunction insert(item, user, request) { \n  var users = tables.getTable('user');\n  users.where({ username : item.Username }).read({\n    success: function(results) {\n      if (results.length == 0) {\n        //This is a new user\n        request.execute();\n      }\n      else {\n        var user = results[0];\n        if (item.Password == user.Password) {\n          request.respond(statusCodes.OK, user);\n        }\n        else {\n        request.respond(statusCodes.UNAUTHORIZED, \"Incorrect username or password\");\n        }\n      }\n    }\n  });\n}\n```", "```cs\nfunction insert(item, user, request) { \n  var users = tables.getTable('user');\n  users.where({ username : item.Username }).read({\n    success: function(results) {\n      if (results.length === 0) {\n        //Could not find the user\n        request.respond(statusCodes.NOT_FOUND, \"User not found\");\n      }\n      else {\n        var existingUser = results[0];\n        item.UserId = existingUser.id;\n        request.execute();\n      }\n    }\n  });\n}\n```", "```cs\npublic class AzureWebService : IWebService\n{\n  #region IWebService implementation\n\n  public Task<User> Login(string username, string password)\n  {\n    throw new NotImplementedException();\n  }\n\n  // -- More methods here -- \n\n  #endregion\n}\n```", "```cs\npublic class AzureWebService : IWebService\n{\n  MobileServiceClient client = new MobileServiceClient(\"https://your-service-name.azure-mobile.net/\", \"your-application-key\");\n\n  // -- Existing code here --\n}\n```", "```cs\npublic async Task<User> Login(string username, string password)\n{\n  var user = new User \n  {\n    Username = username, \n    Password = password \n  };\n  await client.GetTable<User>().InsertAsync(user);\n  return user;\n}\n```", "```cs\n//Replace this line\nServiceContainer.Register<IWebService>(() => new FakeWebService());\n\n//With this line\nServiceContainer.Register<IWebService>(() => new AzureWebService());\n```", "```cs\nCurrentPlatform.Init();\n```", "```cs\npublic class Friend\n{\n  public string Id { get; set; }\n  public string MyId { get; set; }\n  public string UserId { get; set; }\n  public string Username { get; set; }\n}\n```", "```cs\npublic string ToId { get; set; }\n```", "```cs\npublic string MyId { get; set; }\n```", "```cs\npublic async Task LoadData()\n{\n  var users = client.GetTable<User>();\n  var friends = client.GetTable<Friend>();\n\n  var me = new User\n  {\n    Username = \"jonathanpeppers\",\n    Password = \"password\"\n  };\n  var friend = new User\n  {\n    Username = \"chucknorris\",\n    Password = \"password\"\n  };\n  await users.InsertAsync(me);\n  await users.InsertAsync(friend);\n  await friends.InsertAsync(new Friend { MyId = me.Id, Username = friend.Username });\n  await friends.InsertAsync(new Friend { MyId = friend.Id, Username = me.Username });\n}\n```", "```cs\nprivate async void LoadData()\n{\n  var service = ServiceContainer.Resolve<IWebService>() as AzureWebService;\n  await service.LoadData();\n}\n```", "```cs\nvar conversations = client.GetTable<Conversation>();\nvar messages = client.GetTable<Message>();\n\nvar conversation = new Conversation\n{\n  MyId = me.Id,\n  UserId = friend.Id,\n  Username = friend.Username,\n  LastMessage = \"HEY!\"\n};\nawait conversations.InsertAsync(conversation);\nawait messages.InsertAsync(new Message { \n  ConversationId = conversation.Id, \n  ToId = me.Id,\n  UserId = friend.Id, Username = friend.Username, \n  Text = \"What's up?\", Date = DateTime.Now.AddSeconds(-60)\n});\nawait messages.InsertAsync(new Message { \n  ConversationId = conversation.Id, \n  ToId = friend.Id,\n  UserId = me.Id, Username = me.Username, \n  Text = \"Not much\", Date = DateTime.Now.AddSeconds(-30)\n});\nawait messages.InsertAsync(new Message { \n  ConversationId = conversation.Id, \n  ToId = me.Id,\n  UserId = friend.Id, Username = friend.Username, \n  Text = \"HEY!\", Date = DateTime.Now\n});\n```", "```cs\npublic async Task<User> Register(User user)\n{\n  await client.GetTable<User>().InsertAsync(user);\n  return user;\n}\npublic async Task<User[]> GetFriends(string userId)\n{\n  var list = await client.GetTable<Friend>().Where(f => f.MyId == userId).ToListAsync();\n  return list.Select(f => new User { Id = f.UserId, Username = f.Username }).ToArray();\n}\npublic async Task<User> AddFriend( string userId, string username)\n{\n  var friend = new Friend { MyId = userId, Username = username };\n  await client.GetTable<Friend>().InsertAsync(friend);\n  return new User { Id = friend.UserId, Username = friend.Username };\n}\n```", "```cs\npublic async Task<Conversation[]> GetConversations(string userId)\n{\n  var list = await client.GetTable<Conversation>().Where(c => c.MyId == userId).ToListAsync();\n  return list.ToArray();\n}\npublic async Task<Message[]> GetMessages(string conversationId)\n{\n  var list = await client.GetTable<Message>().Where(m => m.ConversationId == conversationId).ToListAsync();\n  return list.ToArray();\n}\npublic async Task<Message> SendMessage(Message message)\n{\n  await client.GetTable<Message>().InsertAsync(message);\n  return message;\n}\n```", "```cs\nTask RegisterPush(string userId, string deviceToken);\n```", "```cs\npublic async Task RegisterPush(string userId, string deviceToken)\n{\n  await Sleep();\n}\n```", "```cs\npublic class Device\n{\n  public string Id { get; set;}\n  public string UserId { get; set; }\n  public string DeviceToken { get; set; }\n}\n```", "```cs\npublic async Task RegisterPush( string userId, string deviceToken)\n{\n  await client.GetTable<Device>().InsertAsync(new Device {\n      UserId = userId,\n      DeviceToken = deviceToken\n    });\n}\n```", "```cs\npublic async Task RegisterPush(string deviceToken)\n{\n  if (settings.User == null)\n    throw new Exception(\"User is null\");\n  await service.RegisterPush(settings.User.Id, deviceToken);\n}\n```", "```cs\nToId = Conversation.UserId,\n```", "```cs\npublic async override void RegisteredForRemoteNotifications(UIApplication application, NSData deviceToken)\n{\n  var loginViewModel = ServiceContainer.Resolve<LoginViewModel>();\n  try\n  {\n    string token = deviceToken.Description;\n    token = token.Substring(1, token.Length - 2);\n    await loginViewModel.RegisterPush(token);\n  }\n  catch (Exception exc)\n  {\n    Console.WriteLine(\"Error registering push: \" + exc);\n  }\n}\npublic override void FailedToRegisterForRemoteNotifications(UIApplication application, NSError error)\n{\n  Console.WriteLine(\"Error registering push: \" + error.LocalizedDescription);\n}\n```", "```cs\nRegisteredForRemoteNotifications will occur when Apple successfully returns a device token from its servers. It is returned within angle brackets, so we do a little work to trim those off and pass the device token through LoginViewModel to Azure Mobile Services. We also implemented FailedToRegisterForRemoteNotifications just to report any errors that might occur throughout the process.\n```", "```cs\nUIApplication.SharedApplication.RegisterForRemoteNotificationTypes( \nUIRemoteNotificationType.Alert | \nUIRemoteNotificationType.Badge | \nUIRemoteNotificationType.Sound);\n```", "```cs\nfunction insert(item, user, request)\n{\n  var devicesTable = tables.getTable('device');\n  devicesTable.where({ userId: item.UserId, deviceToken: item.DeviceToken }).read({ success: function (devices)\n    {\n      if (devices.length > 0)\n      {\n        request.respond(200, devices[0]);\n      }\n      else\n      {\n        request.execute();\n      }\n    }\n  });\n}\n```", "```cs\nfunction insert(item, user, request) {\n  request.execute();\n  var devicesTable = tables.getTable('device');\n  devicesTable.where({ userId : item.ToId }).read({\n    success: function(devices) {\n      devices.forEach(function(device) {\n        var text = item.Username + \": \" + item.Text;\n        push.apns.send(device.DeviceToken, {\n          alert: text,\n          badge: 1,\n          payload: {\n            message: text\n          }\n        });\n      });\n    }\n  });\n}\n```", "```cs\nfunction insert(item, user, request) {\n  request.execute();\n  var devicesTable = tables.getTable('device');\n  devicesTable.where({ userId : item.ToId }).read({\n    success: function(devices) {\n      devices.forEach(function(device) {\n        if (device.DeviceToken.length > 72) {\n          push.gcm.send(device.DeviceToken, {\n            title: item.Username, \n            message: item.Text, \n          });\n        }\n        else {\n          var text = item.Username + \": \" + item.Text;\n          push.apns.send(device.DeviceToken, {\n            alert: text,\n            badge: 1,\n            payload: {\n              message: text\n            }\n          });\n        }\n      });\n    }\n  });\n}\n```", "```cs\npublic static class PushConstants\n{\n  public const string BundleId = \"your-bundle-id\";\n  public const string ProjectNumber = \"your-project-number\";\n}\n```", "```cs\n[assembly: Permission(\n  Name = XamChat.Droid.PushConstants.BundleId + \n  \".permission.C2D_MESSAGE\")]\n[assembly: UsesPermission(\n  Name = XamChat.Droid.PushConstants.BundleId + \n  \".permission.C2D_MESSAGE\")]\n[assembly: UsesPermission(\n  Name = \"com.google.android.c2dm.permission.RECEIVE\")]\n[assembly: UsesPermission(\n  Name = \"android.permission.GET_ACCOUNTS\")]\n[assembly: UsesPermission(\n  Name = \"android.permission.INTERNET\")]\n[assembly: UsesPermission(\n  Name = \"android.permission.WAKE_LOCK\")]\n\n```", "```cs\n[BroadcastReceiver(\n  Permission = GCMConstants.PERMISSION_GCM_INTENTS)]\n[IntentFilter(\n  new string[] { GCMConstants.INTENT_FROM_GCM_MESSAGE }, \n  Categories = new string[] { PushConstants.BundleId })]\n[IntentFilter(\n  new string[] { \n  GCMConstants.INTENT_FROM_GCM_REGISTRATION_CALLBACK }, \n  Categories = new string[] { PushConstants.BundleId })]\n[IntentFilter(\n  new string[] { \n  GCMConstants.INTENT_FROM_GCM_LIBRARY_RETRY }, \n  Categories = new string[] { PushConstants.BundleId })]\npublic class PushReceiver :\n  PushHandlerBroadcastReceiverBase<PushHandlerService>\n{ }\n\n```", "```cs\n[Service]\npublic class PushHandlerService : PushHandlerServiceBase\n{\n  public PushHandlerService() : base (PushConstants.ProjectNumber) \n  { }\n}\n```", "```cs\nprotected async override void OnRegistered (Context context, string registrationId)\n{\n  Console.WriteLine(\"Push successfully registered!\");\n  var loginViewModel = ServiceContainer.Resolve<LoginViewModel>();\n  try\n  {\n    await loginViewModel.RegisterPush(registrationId);\n  }\n  catch (Exception exc)\n  {\n    Console.WriteLine(\"Error registering push: \" + exc);\n  }\n}\n```", "```cs\nprotected override void OnMessage (Context context, Intent intent)\n{\n  //Pull out the notification details\n  string title = intent.Extras.GetString(\"title\");\n  string message = intent.Extras.GetString(\"message\");\n\n  //Create a new intent\n  intent = new Intent(this, typeof(ConversationsActivity));\n\n  //Create the notification\n  var notification = new Notification(Android.Resource.Drawable.SymActionEmail, title);\n  notification.Flags = NotificationFlags.AutoCancel;\n  notification.SetLatestEventInfo(this, \n    new Java.Lang.String(title), \n    new Java.Lang.String(message), PendingIntent.GetActivity(this, 0, intent, 0));\n\n  //Send the notification through the NotificationManager\n  var notificationManager = GetSystemService(Context.NotificationService) as NotificationManager;\n  notificationManager.Notify(1, notification);\n}\n```", "```cs\nprotected override void OnUnRegistered(Context context, string registrationId)\n{\n  Console.WriteLine(\"Push unregistered!\");\n}\n\nprotected override void OnError (Context context, string errorId)\n{\n  Console.WriteLine(\"Push error: \" + errorId);\n}\n```", "```cs\nPushClient.CheckDevice(this);\nPushClient.CheckManifest(this);\n```", "```cs\nPushClient.Register(this, PushConstants.ProjectNumber);\n```"]