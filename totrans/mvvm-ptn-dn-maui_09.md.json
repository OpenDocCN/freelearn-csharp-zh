["```cs\n    public class AddRatingViewModel : Required attribute to the EmailAddress, DisplayName, and RatingInput properties:\n\n    ```", "```cs\n\n    ```", "```cs\n    private Task OnSubmit()\n    {\n        ValidateAllProperties();\n        if(HasErrors)\n        {\n            var errors = GetErrors();\n            Debug.WriteLine( string.Join(\"\\n\",\n                errors.Select(e => e.ErrorMessage)));\n        }\n        else\n        {\n            Debug.WriteLine(\"All OK\");\n        }\n        return Task.CompletedTask;\n    }\n    ```", "```cs\n    public const string EmailValidationRegex =\n     \"^[aA-zZ0-9]+@[aA-zZ]+\\.[aA-zZ]{2, 3}$\";\n    ...\n    [Required]\n    [RegularExpression(EmailValidationRegex)]\n    public string EmailAddress { ... }\n    ```", "```cs\n    public const int DisplayNameMinLength = 5;\n    public const int DisplayNameMaxLength = 25;\n    ...\n    [Required]\n    [MinLength(DisplayNameMinLength)]\n    [MaxLength(DisplayNameMaxLength)]\n    public string DisplayName { ... }\n    ```", "```cs\n    public const string RangeDecimalRegex = @\"^\\d+(\\.\\d{1,1})?$\";\n    public const double RatingMinVal = 0d;\n    public const double RatingMaxVal = 4d;\n    ...\n    [Required]\n    [RegularExpression(RangeDecimalRegex)]\n    [Range(RatingMinVal, RatingMaxVal)]\n    public string RatingInput { ... }\n    ```", "```cs\n    SetProperty(ref _emailAddress, value, DisplayName, RatingInput, and Review properties on this ViewModel as well, to use this overloaded SetProperty method, passing in true in order to trigger validation when the value is set. If we were to pass in false as the last parameter, the validation would not be triggered.\n    ```", "```cs\n    SubmitCommand =\n        new AsyncRelayCommand(OnSubmit, NotifyCanExecuteChanged method of the SubmitCommand, so the canExecute function can be re-evaluated. The ObservableValidator class exposes an event called ErrorsChanged, which gets triggered whenever there is a change in validation errors. That’s the ideal moment to call the NotifyCanExecuteChanged method of the SubmitCommand. Let’s subscribe to this event and implement this:\n\n    ```", "```cs\n\n    ```", "```cs\n    public class EmptyOrWithinRangeAttribute : ValidationAttribute\n    ```", "```cs\n    public int MinLength { get; set; }\n    public int MaxLength { get; set; }\n    ```", "```cs\n    protected override ValidationResult IsValid(object? value, ValidationContext validationContext)\n    {\n        if (value is string valueAsString && (\n            string.IsNullOrEmpty(valueAsString) ||\n            (valueAsString.Length >= MinLength\n            && valueAsString.Length <= MaxLength)))\n        {\n            return ValidationResult.Success;\n        }\n        else\n        {\n            return new ValidationResult($\"The value should be between {MinLength} and {MaxLength} characters long, or empty.\");\n        }\n    }\n    ```", "```cs\n    [EmptyOrWithinRange(MinLength = 10, MaxLength = 250)]\n    public string Review\n    {\n        get => _review;\n        set => SetProperty(ref _review, value, true);\n    }\n    ```", "```cs\n    public static ValidationResult ValidateReview(string review, ValidationContext context)\n    {\n        AddRatingViewModel instance =\n            (AddRatingViewModel)context.ObjectInstance;\n        if (double.TryParse(instance.RatingInput,\n            out var rating))\n        {\n            if (rating <= 2 &&\n                string.IsNullOrEmpty(review))\n            {\n                return new(\"A review is mandatory when rating the recipe 2 or less.\");\n            }\n        }\n        return ValidationResult.Success;\n    }\n    ```", "```cs\n    [CustomValidation(\n        typeof(AddRatingViewModel),\n        nameof(ValidateReview))]\n    [EmptyOrWithinRange(MinLength = 2, MaxLength = 250)]\n    public string Review\n    {\n        get => _review;\n        set => SetProperty(ref _review, value, true);\n    }\n    ```", "```cs\n    [Required]\n    [RegularExpression(RangeDecimalRegex)]\n    [Range(RatingMinVal, RatingMaxVal)]\n    public string RatingInput\n    {\n        get => _ratingInput;\n        set\n        {\n            SetProperty(ref _ratingInput, value, true);\n            ValidateProperty(Review, nameof(Review));\n        }\n    }\n    ```", "```cs\n    public ObservableCollection<ValidationResult> Errors { get; } = new();\n    ```", "```cs\n    private void AddRatingViewModel_ErrorsChanged(object? sender, DataErrorsChangedEventArgs e)\n    {\n        Errors.Clear();\n        GetErrors().ToList().ForEach(Errors.Add);\n        SubmitCommand.NotifyCanExecuteChanged();\n    }\n    ```", "```cs\n    <VerticalStackLayout BindableLayout.ItemsSource=\"{Binding Errors}\">\n        <BindableLayout.ItemTemplate>\n            <DataTemplate x:DataType=\"annotations:ValidationResult\">\n                <Label Text=\"{Binding ErrorMessage}\"\n                    FontSize=\"12\" TextColor=\"Red\"/>\n            </DataTemplate>\n        </BindableLayout.ItemTemplate>\n    </VerticalStackLayout>\n    ```", "```cs\npublic List<ValidationResult> EmailValidationErrors\n{\n    get => GetErrors(nameof(EmailAddress)).ToList();\n}\n```", "```cs\npublic string EmailAddress\n{\n    get => _emailAddress;\n    set\n    {\n        SetProperty(ref _emailAddress, value, true);\n        OnPropertyChanged(nameof(EmailValidationErrors));\n    }\n}\n```", "```cs\n<VerticalStackLayout BindableLayout.ItemsSource=\"{Binding ErrorExposer[EmailAddress]}\">\n```", "```cs\n    public class ValidationErrorExposer : INotifyPropertyChanged, IDisposable\n    {\n        public event PropertyChangedEventHandler? PropertyChanged;\n        public void Dispose()\n        {\n        }\n    }\n    ```", "```cs\n    readonly ObservableValidator validator;\n    public ValidationErrorExposer(\n            ObservableValidator observableValidator)\n    {\n        validator = observableValidator;\n    }\n    ```", "```cs\n    public List<ValidationResult> this[string property]\n        => validator.GetErrors(ValidationErrorExposer accepts a string value as the index and returns a list of ValidationResult objects. This value, which represents the name of the property we want to get the errors of, is passed into the ObservableValidator GetErrors method. The result is returned as a List.\n    ```", "```cs\n    public ValidationErrorExposer(ObservableValidator observableValidator)\n    {\n        validator = observableValidator;\n        validator.ErrorsChanged += ObservableValidator_ErrorsChanged;\n    }\n    private void ObservableValidator_ErrorsChanged(object? sender, DataErrorsChangedEventArgs e)\n        => PropertyChanged?.Invoke(this, new PropertyChangedEventArgs($\"Item[{e.PropertyName}]\"));\n    ```", "```cs\n    public void Dispose()\n        => _validator.ErrorsChanged -=         ObservableValidator_ErrorsChanged;\n    ```", "```cs\n    public ValidationErrorExposer ErrorExposer { get; }\n    ```", "```cs\n    public AddRatingViewModel(INavigationService navigationService)\n    {\n    ...\n        ErrorExposer = new (this);\n    ...\n    }\n    ```", "```cs\n    <Editor Text=\"{Binding Review, Mode=TwoWay}\" />\n    <VerticalStackLayout BindableLayout.ItemsSource=\"{Binding ErrorExposer[Review]}\">\n        <BindableLayout.ItemTemplate>\n            ...\n        </BindableLayout.ItemTemplate>\n    </VerticalStackLayout>\n    ```", "```cs\n    <Grid ColumnDefinitions=\"*, Auto\" HeightRequest=\"45\">\n        <Entry\n            Keyboard=\"Email\"\n            Text=\"{Binding EmailAddress, Mode=TwoWay}\"\n            VerticalOptions=\"End\" />\n    </Grid>\n    ```", "```cs\n    <Label\n        Grid.Column=\"1\" FontFamily=\"MaterialIconsRegular\"\n        FontSize=\"20\" Text=\"&#xe000;\" TextColor=\"Red\"\n        VerticalOptions=\"Center\">\n    </Label>\n    ```", "```cs\n    <Label ... >\n        <Label.Triggers>\n            <DataTrigger\n                TargetType=\"Label\"\n                Binding=\"{Binding ErrorExposer[EmailAddress].Count}\"\n                Value=\"0\">\n                <Setter Property=\"Text\"\n                    Value=\"&#xe86c;\" />\n                <Setter Property=\"TextColor\"\n                    Value=\"Blue\" />\n            </DataTrigger>\n        </Label.Triggers>\n    </Label>\n    ```", "```cs\n    public interface IDialogService\n    {\n        Task Notify(string title, string message,\n            string buttonText = \"OK\");\n        Task<bool> AskYesNo(string title, string message,\n            string trueButtonText = \"Yes\",\n            string falseButtonText = \"No\");\n        Task<string?> Ask(string title, string message,\n            string acceptButtonText = \"OK\",\n            string cancelButtonText = \"Cancel\");\n    }\n    ```", "```cs\n    public class DialogService : IDialogService\n    {\n        public Task Notify(string title, string message,\n            string buttonText = \"OK\")\n            => Application.Current.MainPage\n                .DisplayAlert(title, message, buttonText);\n        public Task<bool> AskYesNo(string title,\n            string message,\n            string trueButtonText = \"Yes\",\n            string falseButtonText = \"No\")\n            => Application.Current.MainPage\n                .DisplayAlert(title, message,\n                trueButtonText, falseButtonText);\n        public Task<string?> Ask(string title,\n            string message,\n            string acceptButtonText = \"OK\",\n            string cancelButtonText = \"Cancel\")\n            => Application.Current.MainPage\n                .DisplayPromptAsync(title, message,\n                acceptButtonText, cancelButtonText);\n    }\n    ```", "```cs\n    builder.Services.AddSingleton<IDialogService, DialogService>();\n    ```", "```cs\n    readonly IDialogService dialogService;\n    ...\n    public AddRatingViewModel(INavigationService navigationSerivce, IDialogService dialogService)\n    {\n    ...\n        this.dialogService = dialogService;\n    ...\n    }\n    ```", "```cs\n    private async Task OnSubmit()\n    {\n        var result = await _dialogService.AskYesNo(\n            \"Are you sure?\",\n            \"Are you sure you want to add this rating?\");\n        if (result)\n        {\n            //ToDo: Submit data\n            await _dialogService.Notify(\"Rating sent\",\n                \"Thank you for your feedback!\");\n            GoBackCommand.Execute(null);\n        }\n    }\n    ```", "```cs\n    public interface INavigatable\n    {\n        Task<bool> CanNavigateFrom(NavigationType navigationType);\n    }\n    ```", "```cs\n    Task<bool> CanNavigate(object bindingContext, NavigationType type);\n    ```", "```cs\n    public Task<bool> CanNavigate(object bindingContext, NavigationType type)\n    {\n        if(bindingContext is INavigatable navigatable)\n            return navigatable.CanNavigateFrom(type);\n        return Task.FromResult(true);\n    }\n    ```", "```cs\n    protected override async void OnNavigating(ShellNavigatingEventArgs args)\n    {\n        base.OnNavigating(args);\n        var token = args.GetDeferral();\n        if(token is not null)\n        {\n            var canNavigate = await interceptor\n            .CanNavigate(CurrentPage?.BindingContext, GetNavigationType(args.Source));\n            if (canNavigate)\n                token.Complete();\n            else\n                args.Cancel();\n        }\n    }\n    ```", "```cs\n    public class AddRatingViewModel : ObservableValidator, INavigationParameterReceiver, INavigatedFrom, INavigatable\n    {\n    ...\n        public Task<bool> CanNavigateFrom(\n            NavigationType navigationType) =>\n            _dialogService.AskYesNo(\n            \"Leaving this page...\",\n            \"Are you sure you want to leave this page?\");\n    }\n    ```"]