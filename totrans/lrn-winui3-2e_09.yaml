- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Enhancing Applications with Community Toolkits
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用社区工具包增强应用程序
- en: The **Windows Community Toolkit** (**WCT**) and the **.NET Community Toolkit**
    are collections of open source libraries for Windows and .NET developers. The
    toolkits contain controls and libraries that can be leveraged by the **Windows
    UI Library** (**WinUI**), **Universal Windows Platform** (**UWP**), .**NET Multi-platform
    App UI** (**.NET MAUI**), **Windows Presentation Foundation** (**WPF**), and **Windows
    Forms** (**WinForms**) applications. In the **Microsoft Store**, there is a companion
    sample application for the WCT that developers can install to explore the controls
    and learn how to use them.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**Windows社区工具包**（**WCT**）和**.NET社区工具包**是面向Windows和.NET开发者的开源库集合。这些工具包包含可以由**Windows
    UI库**（**WinUI**）、**通用Windows平台**（**UWP**）、.**NET多平台应用程序UI**（**.NET MAUI**）、**Windows表现基础**（**WPF**）和**Windows窗体**（**WinForms**）应用程序利用的控件和库。在**Microsoft
    Store**中，有一个WCT的配套示例应用程序，开发者可以安装它来探索控件并学习如何使用它们。'
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Learning about the background and purpose of the toolkits
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解工具包的背景和目的
- en: Using the toolkit sample application to explore the controls available in the
    WCT
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用工具包示例应用程序来探索WCT中可用的控件
- en: Leveraging toolkit controls in a WinUI project
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在WinUI项目中利用工具包控件
- en: Exploring the helpers, services, and extensions for Windows developers in the
    WCT
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索WCT中为Windows开发者提供的辅助工具、服务和扩展
- en: Discovering what’s available in the .NET Community Toolkit for WinUI developers
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发现.NET社区工具包为WinUI开发者提供了什么
- en: By the end of this chapter, you will understand the WCT and how it can boost
    your productivity when building Windows applications. You will also know how to
    incorporate its controls into your WinUI applications.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将了解WCT以及它如何在你构建Windows应用程序时提高你的生产力。你还将知道如何将其控件集成到你的WinUI应用程序中。
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow along with the examples in this chapter, the following software is
    required:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本章中的示例，需要以下软件：
- en: Windows 10 version 1809 (build 17763) or newer
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 10版本1809（构建号17763）或更高版本
- en: Visual Studio 2022 or newer with the .NET desktop development workload configured
    for Windows App SDK development
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置了Windows App SDK开发工作负载的Visual Studio 2022或更高版本
- en: 'The source code for this chapter is available on GitHub at [https://github.com/Packt     Publishing/Learn-WinUI-3-Second-Edition/tree/master/Chapter09](https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/master/Chapter09).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '本章的源代码可在GitHub上找到，网址为[https://github.com/Packt     Publishing/Learn-WinUI-3-Second-Edition/tree/master/Chapter09](https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/master/Chapter09)。'
- en: Introducing the WCT
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍WCT
- en: The WCT was created by Microsoft as an open source collection of controls and
    other helpers, tools, and services for Windows developers. It is primarily used
    by UWP developers but also adds value for WinUI, WinForms, and WPF developers.
    The toolkit is available to developers as a set of NuGet packages. There are over
    a dozen toolkit packages available on NuGet that can be installed independently,
    depending on the needs of your project. We will explore some of these packages
    throughout this chapter. Let’s start by discussing the history of the WCT.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: WCT是由微软创建的，作为一个开源的控件和其他辅助工具、服务和库的集合，专为Windows开发者设计。它主要被UWP开发者使用，但也为WinUI、WinForms和WPF开发者提供了价值。该工具包以NuGet包的形式提供给开发者。在NuGet上有超过一打的工具包包可供安装，可以根据项目需求独立安装。我们将在本章中探讨一些这些包。让我们先讨论WCT的历史。
- en: The toolkit was open sourced from the very beginning. It has long been available
    on GitHub at [https://github.com/CommunityToolkit/WindowsCommunityToolkit](https://github.com/CommunityToolkit/WindowsCommunityToolkit),
    but the next generation of the toolkit is being hosted at [https://github.com/CommunityToolkit/Windows](https://github.com/CommunityToolkit/Windows).
    This new iteration of the toolkit is aimed toward helping WinUI 2, WinUI 3, and
    **Uno Platform** developers, but this new toolkit doesn’t have any releases available
    yet. The toolkit is open to community contributions if you’re interested in helping
    to move the project forward. The documentation for the WCT is available on *Microsoft
    Learn* at [https://learn.microsoft.com/windows/communitytoolkit/](https://learn.microsoft.com/windows/communitytoolkit/).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 工具包从一开始就是开源的。它已经在GitHub上长期可用，网址为[https://github.com/CommunityToolkit/WindowsCommunityToolkit](https://github.com/CommunityToolkit/WindowsCommunityToolkit)，但工具包的下一代托管在[https://github.com/CommunityToolkit/Windows](https://github.com/CommunityToolkit/Windows)。这个工具包的新版本旨在帮助WinUI
    2、WinUI 3和**Uno Platform**开发者，但这个新的工具包还没有任何发布版本。如果你有兴趣帮助推进项目，这个工具包欢迎社区贡献。WCT的文档可在*Microsoft
    Learn*上找到，网址为[https://learn.microsoft.com/windows/communitytoolkit/](https://learn.microsoft.com/windows/communitytoolkit/)。
- en: Origins of the WCT
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: WCT的起源
- en: 'The WCT was first introduced as the **UWP Community Toolkit** in 2016\. As
    the name implies, it was originally a toolkit solely for UWP developers. The toolkit
    was created to simplify UWP app development by providing controls and helpers
    that Windows developers frequently create for their own common libraries. The
    idea of creating a toolkit for XAML development is not a new one. There have been
    several other similar projects for other platforms, including the following:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: WCT最初于2016年以**UWP社区工具包**的形式推出。正如其名所示，它最初是一个仅针对UWP开发者的工具包。该工具包的创建是为了通过提供Windows开发者经常为其自己的常用库创建的控件和辅助工具来简化UWP应用开发。为XAML开发创建工具包的想法并不是新的。已经有一些其他类似的项目针对其他平台，包括以下内容：
- en: '**WPF Toolkit** ([https://github.com/dotnetprojects/wpftoolkit](https://github.com/dotnetprojects/wpftoolkit)):
    A set of WPF open source controls and other components, originally hosted by Microsoft
    on **CodePlex**.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WPF工具包** ([https://github.com/dotnetprojects/wpftoolkit](https://github.com/dotnetprojects/wpftoolkit)):
    一套WPF开源控件和其他组件，最初由微软在**CodePlex**上托管。'
- en: '**Extended WPF Toolkit** ([https://github.com/xceedsoftware/wpftoolkit](https://github.com/xceedsoftware/wpftoolkit)):
    An open source collection of controls maintained by **Xceed Software**, intended
    to complement the original WPF Toolkit.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**扩展WPF工具包** ([https://github.com/xceedsoftware/wpftoolkit](https://github.com/xceedsoftware/wpftoolkit)):
    由**Xceed Software**维护的开源控件集合，旨在补充原始的WPF工具包。'
- en: '**Xamarin Community** **Toolkit** ([https://github.com/xamarin/Xamarin     CommunityToolkit](https://github.com/xamarin/XamarinCommunityToolkit)): An open
    source collection of **Xamarin** controls, animations, behaviors, and effects
    for **Xamarin.Forms**. As Xamarin developers move to **.NET MAUI**, there is now
    a **.NET MAUI Community Toolkit** too ([https://github.com/CommunityToolkit/Maui](https://github.com/CommunityToolkit/Maui)).'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Xamarin社区工具包** ([https://github.com/xamarin/Xamarin     CommunityToolkit](https://github.com/xamarin/XamarinCommunityToolkit)): 一个开源的Xamarin控件、动画、行为和效果集合，用于**Xamarin.Forms**。随着Xamarin开发者转向**.NET
    MAUI**，现在也有了一个**.NET MAUI社区工具包** ([https://github.com/CommunityToolkit/Maui](https://github.com/CommunityToolkit/Maui))。'
- en: 'Microsoft, with help from the open source community, released regular updates
    to the toolkit, adding new and enhanced components and controls multiple times
    a year. In spring 2018, shortly before the release of v3.0, they announced the
    toolkit’s new name: *Windows Community Toolkit*. This renaming signaled the team’s
    intent to embrace all Windows developers moving forward.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 微软在开源社区的帮助下，定期更新工具包，每年多次添加新的和增强的组件和控件。2018年春季，在v3.0发布前夕，他们宣布了工具包的新名称：*Windows社区工具包*。这次更名标志着团队意图向前拥抱所有Windows开发者。
- en: WCT 3.0 included a legacy Microsoft Edge-based `WebView` control—not to be confused
    with `WebView2`, which we will cover later in this chapter—for WPF and WinForms
    applications. The release also added code samples to Visual Basic, which is still
    used in many legacy Windows desktop code bases.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: WCT 3.0包含了一个基于旧版Microsoft Edge的`WebView`控件——不要与稍后在本章中介绍的`WebView2`混淆——用于WPF和WinForms应用。此次发布还添加了Visual
    Basic的代码示例，这在许多遗留的Windows桌面代码库中仍在使用。
- en: Another purpose of the toolkit was to allow developers to work on new controls
    with the hope that some would be integrated into the Windows SDK at a later date
    (or alternatively, the WinUI libraries). This has happened with several controls
    over the years since the toolkit’s introduction, including the `WebView` control.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 工具包的另一个目的是让开发者能够在新控件上工作，希望其中一些控件将来会被集成到 Windows SDK 中（或者作为替代，WinUI 库）。自从工具包推出以来，已经发生了这种情况，包括
    `WebView` 控件。
- en: Subsequent toolkit releases have continued to add value for both UWP and desktop
    developers, and these releases have been fueled by community contributions.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 随后的工具包发布继续为 UWP 和桌面开发者增加价值，这些发布是由社区贡献推动的。
- en: Reviewing recent toolkit releases
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查最近的工具包发布
- en: There have been several major releases of the WCT since version 3.0\. It was
    WCT version 7.0 that first added WinUI 3 support.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 自从 3.0 版本以来，WCT 已经发布了几个主要版本。是 WCT 7.0 首次增加了对 WinUI 3 的支持。
- en: 'In August 2018, WCT 4.0 added a `DataGrid` control, a feature long desired
    by UWP developers who were familiar with the `DataGrid` control available on the
    Silverlight and WPF platforms. This was quickly followed by a fall 2018 release
    of version 5\. This release brought two major features to the toolkit, as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 2018年8月，WCT 4.0 添加了 `DataGrid` 控件，这是熟悉在 Silverlight 和 WPF 平台上可用的 `DataGrid`
    控件的 UWP 开发者一直渴望的功能。很快，2018年秋季发布了版本 5。这次发布为工具包带来了两个主要功能，如下所述：
- en: '`WindowsXamlHost`: This control enabled a single UWP control to be wrapped
    and hosted within a WPF or WinForms control. Later, the `WindowsXamlHost` control
    would be known as XAML Islands, with the hosting API added to the Windows SDK.
    Several *wrapped controls* were also released, including `InkCanvas`, `MapControl`,
    and an update to the legacy `WebView` control.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WindowsXamlHost`：这个控件使单个 UWP 控件能够被包装并托管在 WPF 或 WinForms 控件中。后来，`WindowsXamlHost`
    控件将被称为 XAML Islands，托管 API 被添加到 Windows SDK 中。还发布了一些 `wrapped controls`，包括 `InkCanvas`、`MapControl`
    以及对传统 `WebView` 控件的更新。'
- en: '`TabView`: Behind `DataGrid`, a rich `TabView` control was probably the most
    requested control not yet available to UWP developers. The WCT `TabView` control
    included support for customizing, closing, and dragging and dropping tabs. `TabView`
    has also graduated to the WinUI 2 libraries, becoming available in WinUI 2.2 and
    later.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TabView`：在 `DataGrid` 之后，一个丰富的 `TabView` 控件可能是 UWP 开发者最希望获得但尚未可用的控件。WCT 的
    `TabView` 控件包括自定义、关闭以及拖放标签的支持。`TabView` 也已经升级到 WinUI 2 库，并在 WinUI 2.2 及以后的版本中可用。'
- en: A year later, in fall 2019, WCT 6.0 brought XAML Islands controls to all WinForms,
    WPF, and C++ Win32 developers, adding support for .NET Core 3 clients. The other
    major improvement in this release was adding ARM64 development support. In June
    2020, the team announced WCT 6.1, as well as upcoming previews of versions 7 and
    8\. Several previews of WCT 7.0 were released in 2020, and its final release came
    out in March 2021\. The toolkit’s 7.0 release included major project refactorings
    plus several major features. The most exciting feature was the first release of
    the `ViewModel` classes.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一年后，在2019年秋季，WCT 6.0 将 XAML Islands 控件引入了所有 WinForms、WPF 和 C++ Win32 开发者，并增加了对
    .NET Core 3 客户端的支持。这次发布中的另一项重大改进是增加了 ARM64 开发支持。2020年6月，团队宣布了 WCT 6.1，以及版本 7 和
    8 的即将发布的预览版。2020年发布了 WCT 7.0 的几个预览版，其最终版本于2021年3月发布。工具包的7.0版本包括主要的项目重构以及几个主要功能。最令人兴奋的功能是首次发布了
    `ViewModel` 类。
- en: WCT 7.1 was released in September 2021\. It added some helper classes for Microsoft
    Graph and the Microsoft Identity platform, as well as some new controls, behaviors,
    shadows, and styles. In November 2021, version 7.1.2 was released. This was announced
    as the final release to include updates to .NET libraries in the toolkit, as these
    are all moving to the .NET Community Toolkit. All subsequent 7.x releases have
    been UWP-only updates.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 2021年9月发布了 WCT 7.1。它添加了一些用于 Microsoft Graph 和 Microsoft Identity 平台的辅助类，以及一些新的控件、行为、阴影和样式。2021年11月发布了
    7.1.2 版本。这被宣布为包含工具包中 .NET 库更新的最终版本，因为这些库都将迁移到 .NET Community Toolkit。所有随后的 7.x
    版本都是 UWP 独有的更新。
- en: The newly released WCT 8.0 supports WinUI 3\. Previously, creating WinUI 3 apps
    with .NET supported by WCT was only in preview in the new WCT repository. Trying
    these packages required building the toolkit libraries from source code as it
    has no published releases on GitHub. Now that they are available as stable NuGet
    packages, you can add them to your project as you would with any other package.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 新发布的 WCT 8.0 支持 WinUI 3。之前，使用 WCT 支持的 .NET 创建 WinUI 3 应用程序仅在新的 WCT 仓库中处于预览状态。尝试这些包需要从源代码构建工具库，因为它们在
    GitHub 上没有发布版本。现在，它们作为稳定的 NuGet 包提供，您可以像添加任何其他包一样将它们添加到您的项目中。
- en: Now that we have covered some background and history of the WCT, we will take
    a quick look at some of the controls and components available in the toolkit.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了 WCT 的背景和历史，我们将快速查看工具包中的一些控件和组件。
- en: Exploring the WCT Gallery app
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 WCT 图库应用
- en: As we mentioned earlier in this chapter, the **WCT Gallery app** is available
    from the Microsoft Store ([https://apps.microsoft.com/store/detail/windows-community-toolkit-gallery/9NBLGGH4TLCQ](https://apps.microsoft.com/store/detail/windows-community-toolkit-gallery/9NBLGGH4TLCQ)).
    It can be installed on Windows 10 version 17763 or later, on Windows 11, or even
    on your Xbox, Surface Hub, or HoloLens device. As with the **WinUI 3 Gallery**
    app we discussed in [*Chapter 5*](B20908_05.xhtml#_idTextAnchor114), *Exploring
    WinUI Controls*, the toolkit sample app provides us with an easy way to navigate
    and explore the contents of the WCT.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们本章前面提到的，**WCT 图库应用** 可从 Microsoft Store 获取 ([https://apps.microsoft.com/store/detail/windows-community-toolkit-gallery/9NBLGGH4TLCQ](https://apps.microsoft.com/store/detail/windows-community-toolkit-gallery/9NBLGGH4TLCQ))。它可以在
    Windows 10 版本 17763 或更高版本、Windows 11 上安装，甚至可以在您的 Xbox、Surface Hub 或 HoloLens 设备上安装。与我们在
    [*第 5 章*](B20908_05.xhtml#_idTextAnchor114) 中讨论的 **WinUI 3 图库** 应用一样，工具包示例应用为我们提供了一个轻松导航和探索
    WCT 内容的方法。
- en: Installing and launching the app
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装和启动应用
- en: 'Let’s get started:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧：
- en: 'Open the `windows community` in the **Search** box:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **搜索** 框中打开 `windows community`：
- en: '![Figure 9.1 – Finding the app in the Microsoft Store](img/B20908_09_01.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.1 – 在 Microsoft Store 中查找应用](img/B20908_09_01.jpg)'
- en: Figure 9.1 – Finding the app in the Microsoft Store
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.1 – 在 Microsoft Store 中查找应用
- en: 'Select **Windows Community Toolkit Gallery** from the search results and click
    the **Install** button on the resulting page. Once the installation completes,
    the **Install** button will become an **Open** button. Open the WCT app from there
    or from the Windows Start menu:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从搜索结果中选择 **Windows Community Toolkit 图库** 并点击结果页面上的 **安装** 按钮。安装完成后，**安装** 按钮将变为
    **打开** 按钮。从那里或从 Windows 开始菜单打开 WCT 应用：
- en: '![Figure 9.2 – The WCT Gallery app](img/B20908_09_02.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.2 – WCT 图库应用](img/B20908_09_02.jpg)'
- en: Figure 9.2 – The WCT Gallery app
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.2 – WCT 图库应用
- en: The app opens to an overview page, where there are several highlighted controls,
    helpers, and behaviors. The top section also has some useful links to the WCT
    documentation, GitHub repository, and their Discord community.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 应用打开到概述页面，其中有一些突出显示的控件、辅助工具和行为。顶部部分还有一些链接到 WCT 文档、GitHub 仓库和他们的 Discord 社区的有用链接。
- en: 'The controls and other components are divided into seven sections on the left:
    **Animations**, **Controls**, **Extensions**, **Helpers**, **Layouts**, **Xaml**,
    and the app’s **Settings**. With so many controls in the toolkit, we will explore
    just a few of them and leave the rest for you to explore on your own.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '控件和其他组件在左侧分为七个部分：**动画**、**控件**、**扩展**、**辅助工具**、**布局**、**Xaml** 和应用的 **设置**。由于工具包中有许多控件，我们将探索其中的一些，其余的留给您自己探索。 '
- en: Controls
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控件
- en: 'Click the **Controls** navigation item at the left of the app to display a
    list of controls. This is the largest section of the app, with the controls grouped
    by category, as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 点击应用左侧的 **控件** 导航项以显示控件列表。这是应用中最大的部分，控件按类别分组，如下所示：
- en: '**Input**: These are custom input controls (for example, **RadialGuage**)'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输入**：这些是自定义输入控件（例如，**RadialGuage**）'
- en: '**Layout**: Layout panels and related controls (for example, **HeaderedTreeView**)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**布局**：布局面板和相关控件（例如，**HeaderedTreeView**）'
- en: '**Media**: Controls for working with media (for example, **CameraPreview**)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**媒体**：用于处理媒体的控件（例如，**CameraPreview**）'
- en: '**Sizers**: These are content sizing controls (for example, **GridSplitter**)'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**尺寸调整器**：这些是内容尺寸控件（例如，**GridSplitter**）'
- en: '**Status and Info**: Controls for updating the user on progress or status.
    In the current version of the app, the section only contains the **MetadataControl**'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**状态和信息**：用于更新用户进度或状态的控件。在当前版本的app中，该部分只包含**MetadataControl**'
- en: '**Text**: These are types of text input controls (for example, **RichSuggestBox**)'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文本**：这些是文本输入控件类型（例如，**RichSuggestBox**）'
- en: 'You can see some of the controls in the expanded navigation panel in the following
    screenshot:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下屏幕截图中看到一些展开的导航面板中的控件：
- en: "![Figure 9.3 – The Controls menu expanded in the WCT Gal\uFEFFlery app](img/B20908_09_03.jpg)"
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图9.3 – 在WCT Gallery应用中展开的控件菜单](img/B20908_09_03.jpg)'
- en: Figure 9.3 – The Controls menu expanded in the WCT Gallery app
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.3 – 在WCT Gallery应用中展开的控件菜单
- en: Selecting one of these controls will open a page that contains several regions.
    The main panel is an interactive region where you can interact with the selected
    control. To the right of this panel, there are some drop-down boxes to update
    the control’s behavior and a button where you can toggle between a **Light** or
    **Dark** theme, which will update the controls running in the panel.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 选择这些控件之一将打开一个包含几个区域的页面。主面板是一个交互式区域，你可以与所选控件交互。在此面板右侧有一些下拉框，可以更新控件的行为，还有一个按钮，可以切换**浅色**或**深色**主题，这将更新面板中运行的控件。
- en: 'The right panel contains several controls to modify the display and behavior
    of the current controls. The number of controls seen on the right panel will vary
    depending on the selected control. The **View Code** button expands a XAML editor
    with the markup for the code running in the main panel. You can change the markup
    here, and your changes will be reflected in the code running in the main panel.
    The **C#** tab will display the C# code for the control. Below the interactive
    section of the page, control’s documentation from *Microsoft Learn* is displayed:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 右侧面板包含几个控件，用于修改当前控件的显示和行为。右侧面板上看到的控件数量将根据所选控件而变化。**查看代码**按钮将展开一个XAML编辑器，其中包含在主面板中运行的代码的标记。你可以在这里更改标记，你的更改将在主面板中运行的代码中反映出来。**C#**选项卡将显示控件的C#代码。在页面的交互式部分下方，显示来自*Microsoft
    Learn*的控件文档：
- en: '![Figure 9.4 – Viewing the ImageCropper control in the WCT Gallery app](img/B20908_09_04.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图9.4 – 在WCT Gallery应用中查看ImageCropper控件](img/B20908_09_04.jpg)'
- en: Figure 9.4 – Viewing the ImageCropper control in the WCT Gallery app
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.4 – 在WCT Gallery应用中查看ImageCropper控件
- en: 'Take some time to explore the **ImageCropper** control and **MarkdownTextBlock**
    in the **Controls** section of the toolkit. Follow these steps:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在工具包的**控件**部分花些时间探索**ImageCropper**控件和**MarkdownTextBlock**。按照以下步骤操作：
- en: Open the **ImageCropper** control and give it a try. Click the **Crop Shape**
    drop-down control, select **Circular**, and watch the cropped area change to a
    circle shape.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**ImageCropper**控件并尝试使用它。点击**裁剪形状**下拉控件，选择**圆形**，然后观察裁剪区域变为圆形形状。
- en: 'Next, select the **RangeSelector** control in the left panel. This control’s
    page is similar, but on the main panel, there is a RangeSelector control where
    two sliders can be moved to select minimum and maximum points for the range. The
    **Minimum** and **Maximum** allowed values can be controlled from the right side
    of the panel as well:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在左侧面板中选择**RangeSelector**控件。此控件的页面类似，但在主面板上有一个RangeSelector控件，其中两个滑块可以移动以选择范围的最小和最大点。**最小**和**最大**允许的值也可以从面板的右侧控制：
- en: '![Figure 9.5 – RangeSelector running in the WCT Gallery app](img/B20908_09_05.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图9.5 – RangeSelector在WCT Gallery应用中运行](img/B20908_09_05.jpg)'
- en: Figure 9.5 – RangeSelector running in the WCT Gallery app
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.5 – RangeSelector在WCT Gallery应用中运行
- en: Scroll down to see an example use of the control.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动查看控件的一个示例用法。
- en: There are many more controls you can explore in this part of the app. You should
    take some time to find out which might be useful in your next project.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个app的部分，你可以探索更多控件。你应该花些时间找出哪些可能在你的下一个项目中有用。
- en: Now that we have explored a couple of the controls in the sample app, let’s
    try using them in a WinUI project.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经探索了示例应用中的几个控件，让我们尝试在一个WinUI项目中使用它们。
- en: Using controls from the toolkit
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用工具包中的控件
- en: We explored a handful of the WCT controls in the sample app in the previous
    section. Now, it’s time to use them in a WinUI project. To demonstrate some of
    the controls in action, we are going to create a new **WinUI 3 in** **Desktop**
    project.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们探索了示例应用中的几个WCT控件。现在，是时候在WinUI项目中使用它们了。为了演示一些控件的实际应用，我们将创建一个新的**WinUI
    3 Desktop**项目。
- en: Note
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'At the time of writing, the WCT controls are not recommended for use in production
    apps and have some caveats. To learn more about the current limitations, you can
    read this Microsoft blog post: [https://devblogs.microsoft.com/ifdef-windows/windows-community-toolkit-for-project-reunion-0-5/](https://devblogs.microsoft.com/ifdef-windows/windows-community-toolkit-for-project-reunion-0-5/).'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，WCT 控件不建议在生产应用中使用，并有一些注意事项。要了解更多关于当前限制的信息，您可以阅读这篇 Microsoft 博客文章：[https://devblogs.microsoft.com/ifdef-windows/windows-community-toolkit-for-project-reunion-0-5/](https://devblogs.microsoft.com/ifdef-windows/windows-community-toolkit-for-project-reunion-0-5/)。
- en: Creating the WinUI project
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 WinUI 项目
- en: 'To start our WCT project, you will have to launch Visual Studio and follow
    these steps:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始我们的 WCT 项目，您需要启动 Visual Studio 并按照以下步骤操作：
- en: Create a new project. Then, on the `WinUI in Desktop` in the search field.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的项目。然后在搜索字段中的 `WinUI in Desktop`。
- en: Several project types will be displayed, but one of the top results will be
    **Blank App, Packaged (WinUI 3 in Desktop)**. Select this project template for
    the language of your choice and click **Next**.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将显示几个项目类型，但顶部结果之一将是 **Blank App, Packaged (WinUI 3 in Desktop)**。选择您选择的语言的此项目模板并点击
    **Next**。
- en: 'Name the project `HardwareSupplies` and click the `App.xaml` and `MainWindow.xaml`:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将项目命名为 `HardwareSupplies` 并点击 `App.xaml` 和 `MainWindow.xaml`：
- en: '![Figure 9.6 – The HardwareSupplies project in Visual Studio Solution Explorer](img/B20908_09_06.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.6 – Visual Studio Solution Explorer 中的 HardwareSupplies 项目](img/B20908_09_06.jpg)'
- en: Figure 9.6 – The HardwareSupplies project in Visual Studio Solution Explorer
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.6 – Visual Studio Solution Explorer 中的 HardwareSupplies 项目
- en: 'If you open the `MainWindow.xaml` file, you will see some simple starter markup.
    There is a `StackPanel` control containing a `Button` control named `myButton`
    with `Click Me` as its content. This is what the code looks like:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您打开 `MainWindow.xaml` 文件，您将看到一些简单的起始标记。有一个 `StackPanel` 控件，其中包含一个名为 `myButton`
    的 `Button` 控件，其内容为 `Click Me`。代码如下所示：
- en: '[PRE0]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The `myButton` control’s `Click` event has a `myButton_Click` event handler
    in `MainWindow.xaml.cs` that changes the `myButton` variable’s content to `Clicked`,
    as illustrated in the following code snippet:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`myButton` 控件的 `Click` 事件在 `MainWindow.xaml.cs` 中有一个名为 `myButton_Click` 的事件处理程序，它会将
    `myButton` 变量的内容更改为 `Clicked`，如下面的代码片段所示：'
- en: '[PRE1]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Before we make any changes, run the application and test the button to make
    sure everything is working as expected:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们进行任何更改之前，运行应用程序并测试按钮以确保一切按预期工作：
- en: "![Figure 9.7 – Running the HardwareSupplies app\uFEFF for the first time](img/B20908_09_07.jpg)"
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.7 – 首次运行 HardwareSupplies 应用](img/B20908_09_07.jpg)'
- en: Figure 9.7 – Running the HardwareSupplies app for the first time
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.7 – 首次运行 HardwareSupplies 应用
- en: Everything is working as expected. Next, we’re going to add WCT package references
    to the project.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 一切都按预期工作。接下来，我们将向项目中添加 WCT 包引用。
- en: Referencing WCT packages
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引用 WCT 包
- en: 'The primary control we need for the app is a `DataGrid` control that displays
    a list of hardware items. We will also add a `HeaderedContentControl` control
    and a `DropShadowPanel` control to get an idea of how those controls can be used.
    Most of the WCT controls are part of the `DataGrid` is in the `communitytoolkit.winui`,
    and add the latest version of those two packages to the project:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要为应用程序的主要控件是一个显示硬件项目列表的 `DataGrid` 控件。我们还将添加一个 `HeaderedContentControl` 控件和一个
    `DropShadowPanel` 控件，以了解这些控件如何使用。大多数 WCT 控件都是 `communitytoolkit.winui` 的一部分，并将这两个包的最新版本添加到项目中：
- en: '![Figure 9.8 – Adding the WCT NuGet packages](img/B20908_09_08.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.8 – 添加 WCT NuGet 包](img/B20908_09_08.jpg)'
- en: Figure 9.8 – Adding the WCT NuGet packages
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.8 – 添加 WCT NuGet 包
- en: After installing these two packages, close the package manager window and compile
    the project to ensure all the packages are downloaded. Next, we will set up some
    data for the `DataGrid` control.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 安装这两个包后，关闭包管理器窗口并编译项目以确保所有包都已下载。接下来，我们将为 `DataGrid` 控件设置一些数据。
- en: Adding data to the DataGrid control
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向 DataGrid 控件添加数据
- en: 'The most important part of any `DataGrid` control is the data being presented
    to the user. Before we start building the UI, we’re going to build a small inventory
    of hardware data to display. Proceed as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 任何 `DataGrid` 控件最重要的部分是向用户展示的数据。在我们开始构建 UI 之前，我们将构建一个小型的硬件数据库存以显示。按照以下步骤操作：
- en: 'Start by adding a new class to the `HardwareSupplies` project named `HardwareItem`.
    The class will have six properties, as shown here:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先向 `HardwareSupplies` 项目添加一个名为 `HardwareItem` 的新类。该类将具有六个属性，如下所示：
- en: '[PRE2]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Next, open the `MainWindow.xaml.cs` file. Create a public property named `HardwareItems`
    and define it as an array of `HardwareItem`:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开 `MainWindow.xaml.cs` 文件。创建一个名为 `HardwareItems` 的公共属性，并将其定义为 `HardwareItem`
    的数组：
- en: '[PRE3]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, create a new method named `PopulateItems`. This method will initialize
    the `HardwareItems` array and populate it with 12 items:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建一个名为 `PopulateItems` 的新方法。此方法将初始化 `HardwareItems` 数组并用 12 个项目填充它：
- en: '[PRE4]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The app now has a nice assortment of screws, nails, and electrical items to
    present in the `DataGrid` control.
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 应用程序现在拥有一个不错的螺丝、钉子和电气元件的集合，可以在 `DataGrid` 控件中展示。
- en: Remove the `myButton_Click` event handler, as it’s no longer needed.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除 `myButton_Click` 事件处理程序，因为它不再需要。
- en: 'Finally, call `PopulateItems` at the end of the `MainWindow` constructor:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在 `MainWindow` 构造函数的末尾调用 `PopulateItems`：
- en: '[PRE5]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The data is ready to go. Let’s move on and define the XAML markup for `MainWindow`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 数据已经准备好了。让我们继续并定义 `MainWindow` 的 XAML 标记。
- en: Adding controls to the MainWindow control
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向 MainWindow 控件添加控件
- en: The UI for our app will be simple. We will display the data in a `DataGrid`
    control with a drop shadow beneath some header text.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序的 UI 将很简单。我们将使用带有一些标题文本的阴影在 `DataGrid` 控件中显示数据。
- en: Note
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The `DropShadowPanel` control will be removed from the toolkit in the future.
    You can consider using the `AttachedDropShadow` or `AttachedCardShadow` control
    as alternatives. For more information, read about **Attached** **Shadows**: [https://learn.microsoft.com/windows/communitytoolkit/helpers/attachedshadows](https://learn.microsoft.com/windows/communitytoolkit/helpers/attachedshadows).'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`DropShadowPanel` 控件将在未来从工具包中移除。您可以考虑使用 `AttachedDropShadow` 或 `AttachedCardShadow`
    控件作为替代方案。有关更多信息，请阅读有关 **附加** **阴影** 的内容：[https://learn.microsoft.com/windows/communitytoolkit/helpers/attachedshadows](https://learn.microsoft.com/windows/communitytoolkit/helpers/attachedshadows)。'
- en: 'Proceed as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤进行：
- en: 'Start by placing a `HeaderedContentControl` control inside a `Grid` control
    in `MainWindow.xaml`. Set the `Header` attribute to `Hardware Inventory`. This
    will display at the top of `MainWindow` control’s content. Set `Margin` to `6`
    to leave some space around the edges of the control:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在 `MainWindow.xaml` 中的 `Grid` 控件内放置一个 `HeaderedContentControl` 控件。将 `Header`
    属性设置为 `Hardware Inventory`。这将显示在 `MainWindow` 控件内容的顶部。将 `Margin` 设置为 `6` 以在控件边缘留出一些空间：
- en: '[PRE6]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Don’t forget to add a namespace definition for the WCT controls, as follows:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不要忘记为 WCT 控件添加一个命名空间定义，如下所示：
- en: '[PRE7]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, define a `DropShadowPanel` control as the content of `HeaderedContentControl`.
    `BlurRadius` defines the width of the blurred area of the drop shadow. A `ShadowOpacity`
    value of `1` indicates that the darkest part of the shadow will be completely
    opaque. Most of this will be behind the `DataGrid` control. The `OffsetX` and
    `OffsetY` values will shift the drop shadow over and down by `2` pixels. The `Color`
    attribute sets the color of the shadow. Setting `IsMasked` to `True` creates a
    more precise shadow but degrades performance. In our case, performance will not
    be a concern. Finally, we’ll set `Margin` to `6` to leave some space to see the
    drop shadow:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，定义一个 `DropShadowPanel` 控件作为 `HeaderedContentControl` 的内容。`BlurRadius` 定义了阴影模糊区域的宽度。`ShadowOpacity`
    的值为 `1` 表示阴影最暗的部分将完全不透明。大部分阴影将位于 `DataGrid` 控件后面。`OffsetX` 和 `OffsetY` 的值将使阴影向下和向右移动
    `2` 像素。`Color` 属性设置阴影的颜色。将 `IsMasked` 设置为 `True` 会创建一个更精确的阴影，但会降低性能。在我们的情况下，性能不会成为问题。最后，我们将
    `Margin` 设置为 `6` 以留出一些空间来查看阴影：
- en: '[PRE8]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Lastly, add `DataGrid` as a child of `DropShadowPanel`. The grid will bind
    to the `HardwareItems` property we created. The `AutoGenerateColumns` property
    will create column headers using the names of the `HardwareItem` objects’ properties.
    By setting `Background` and `AlternatingRowBackground` to `ThemeResource` styles,
    the grid will look great for Windows users who use either the `DataGrid` will
    be transparent, and the gray drop shadow will obscure the contents of the grid:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将 `DataGrid` 添加为 `DropShadowPanel` 的子控件。网格将绑定到我们创建的 `HardwareItems` 属性。`AutoGenerateColumns`
    属性将使用 `HardwareItem` 对象属性的名称创建列标题。通过将 `Background` 和 `AlternatingRowBackground`
    设置为 `ThemeResource` 样式，网格将为使用 `DataGrid` 的 Windows 用户看起来很棒；`DataGrid` 将是透明的，而灰色的阴影将遮挡网格的内容：
- en: '[PRE9]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The app’s code is complete. It’s time to build and run the app to see how everything
    looks:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序的代码已经完成。现在是时候构建并运行应用程序，看看一切看起来如何：
- en: '![Figure 9.9 – The HardwareSupplies app running with data](img/B20908_09_09.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.9 – 运行带有数据的 HardwareSupplies 应用程序](img/B20908_09_09.jpg)'
- en: Figure 9.9 – The HardwareSupplies app running with data
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.9 – 运行带有数据的 HardwareSupplies 应用程序
- en: Here, you can see that, with a little bit of code, we have a pretty nice-looking
    app to display some hardware inventory data. The header text, drop shadow, and
    rich `DataGrid` control work well together to create our UI.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以看到，通过一点代码，我们就有了一个相当不错的应用程序来显示一些硬件库存数据。标题文本、阴影和丰富的`DataGrid`控件很好地协同工作，以创建我们的UI。
- en: Let’s finish up our exploration of the WCT by looking at some of the other components
    available in the toolkit.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过查看工具包中可用的其他组件来结束对WCT的探索。
- en: Exploring the toolkit’s helpers, services, and extensions
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索工具包的辅助工具、服务和扩展
- en: We have discussed many of the controls in the WCT, but the toolkit contains
    much more than UI controls. In this section, we will return to the WCT sample
    app to explore some of the other components available in the toolkit. We’ll start
    with some helper classes.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了WCT中的许多控件，但工具包中包含的不仅仅是UI控件。在本节中，我们将回到WCT示例应用，探索工具包中的一些其他组件。我们将从一些辅助类开始。
- en: Helpers
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 辅助工具
- en: 'Next to the controls in the toolkit, the **Helpers** section contains the largest
    number of components. As with the controls, the helpers are divided into categories
    in the sample app, as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在工具包中的控件旁边，**辅助工具**部分包含最多的组件。与控件一样，辅助工具在示例应用中按类别划分，如下所示：
- en: '**Data**: These helpers relate to loading and displaying data. Examples include
    **ImageCache**, **ObservableGroup**, and **Incremental** **Loading Collection**.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据**: 这些辅助工具与加载数据和显示数据相关。例如包括**ImageCache**、**ObservableGroup**和**Incremental
    Loading Collection**。'
- en: '**Developer**: These are helpers that are useful for developers and include
    **DispatcherQueueHelper** for updating the UI from a background thread.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发者**: 这些是对于开发者有用的辅助工具，包括用于从后台线程更新UI的**DispatcherQueueHelper**。'
- en: '**Notifications**: These helpers provide customized ways of notifying users
    with Windows notifications and the Start menu. Included are **LiveTile**, **Toast**,
    and **WeatherLiveTileAndToast**. However, we already saw in the previous chapter
    that Windows App SDK now has built-in support for notifications in WinUI 3 apps.
    These toolkit helpers are useful for UWP developers.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通知**: 这些辅助工具提供了使用Windows通知和开始菜单通知用户的定制方式。包括**LiveTile**、**Toast**和**WeatherLiveTileAndToast**。然而，我们在上一章中已经看到，Windows
    App SDK现在在WinUI 3应用程序中内置了对通知的支持。这些工具包辅助工具对于UWP开发者很有用。'
- en: '`CanvasGeometry` class using **Win2D**.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**Win2D**的`CanvasGeometry`类。
- en: '**State Triggers**: There are currently 10 state trigger helpers in the toolkit,
    including **IsNullOrEmptyStateTrigger**, **FullScreenModeStateTrigger**, and **RegexStateTrigger**.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**状态触发器**: 工具包中目前有10个状态触发辅助工具，包括**IsNullOrEmptyStateTrigger**、**FullScreenModeStateTrigger**和**RegexStateTrigger**。'
- en: '**Systems**: The 14 system helpers currently include **CameraHelper**, **NetworkHelper**,
    **PrintHelper**, and **ThemeListener**.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**系统**: 目前包括14个系统辅助工具，如**CameraHelper**、**NetworkHelper**、**PrintHelper**和**ThemeListener**。'
- en: 'It’s time to take a closer look at one of the helpers in the toolkit. Let’s
    see what the `SystemInformation` helper class offers. This is a static class that
    contains a long list of useful information about the running application and the
    user’s system. These are just a handful of the available properties:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候仔细看看工具包中的一个辅助工具了。让我们看看`SystemInformation`辅助类提供了什么。这是一个静态类，包含有关运行应用程序和用户系统的许多有用信息。以下只是可用属性中的一小部分：
- en: '`ApplicationName`: The application’s name'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ApplicationName`: 应用程序名称'
- en: '`ApplicationVersion`: The application version'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ApplicationVersion`: 应用程序版本'
- en: '`AvailableMemory`: The available system memory'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AvailableMemory`: 可用系统内存'
- en: '`Culture`: The current culture set in Windows'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`文化`: Windows中当前设置的文化'
- en: '`DeviceFamily`: The name of the user’s device family'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DeviceFamily`: 用户设备家族的名称'
- en: '`DeviceModel`: The model number of the current device'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DeviceModel`: 当前设备的型号'
- en: '`FirstUseTime`: The first time the app was launched'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FirstUseTime`: 应用程序首次启动的时间'
- en: '`IsAppUpdated`: Indicates if this is the first time the app has been run after
    being updated'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IsAppUpdated`: 指示这是否是应用程序更新后第一次运行'
- en: '`LaunchCount`: The number of times the app has been launched since a system
    reset'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LaunchCount`: 自系统重置以来应用程序启动的次数'
- en: '`OperatingSystem`: The name of the operating system'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OperatingSystem`: 操作系统名称'
- en: '`OperatingSystemVersion`: The operating system version'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OperatingSystemVersion`: 操作系统版本'
- en: There are many other helpers you can explore in the sample app. We’ll finish
    up by reviewing some of the other tools in the **Extensions** area of the WCT
    sample app.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例应用中，你可以探索许多其他辅助工具。我们将通过回顾WCT示例应用中的**扩展**区域的一些其他工具来结束本次介绍。
- en: Extensions
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展
- en: The **Extensions** menu in the sample app contains several items that add extended
    properties to WinUI controls and extension methods to other classes. We will review
    **FrameworkElementExtensions** (formerly known as the **Mouse** extensions) and
    **StringExtensions** here.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 样例应用中的**扩展**菜单包含几个项目，这些项目为WinUI控件添加扩展属性，并为其他类添加扩展方法。我们将在此处回顾**FrameworkElementExtensions**（以前称为**鼠标**扩展）和**StringExtensions**。
- en: '`FrameworkElement` control in order to set the mouse cursor to display when
    the mouse moves over that element:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`FrameworkElement`控件，以便在鼠标移至该元素时设置鼠标光标：'
- en: '[PRE10]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**StringExtensions** contains a few extension methods related to string data,
    as follows:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '**StringExtensions**包含一些与字符串数据相关的扩展方法，如下所示：'
- en: '`IsEmail`: Determines whether a string is a valid email address format'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IsEmail`：确定一个字符串是否是有效的电子邮件地址格式'
- en: '`IsDecimal`: Determines whether a string is a decimal value'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IsDecimal`：确定一个字符串是否是十进制值'
- en: '`IsNumeric`: Determines whether a string is a numeric value'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IsNumeric`：确定一个字符串是否是数值'
- en: '`IsPhoneNumber`: Determines whether a string contains a valid phone number
    format'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IsPhoneNumber`：确定一个字符串是否包含有效的电话号码格式'
- en: '`IsCharacterString`: Determines whether a string contains only letters'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IsCharacterString`：确定一个字符串是否只包含字母'
- en: '`DecodeHtml`: Returns a string with any HTML formatting, tags, comments, scripts,
    and styles removed'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DecodeHtml`：返回一个字符串，其中任何HTML格式、标签、注释、脚本和样式都被移除'
- en: '`FixHtml`: Similar to `DecodeHtml`, it returns a string with all HTML formatting,
    comments, scripts, and styles removed'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FixHtml`：类似于`DecodeHtml`，它返回一个字符串，其中包含所有HTML格式、注释、脚本和样式'
- en: '`Truncate`: Truncates a string to a specified length, optionally adding an
    ellipsis'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Truncate`：将字符串截断到指定的长度，可选地添加省略号'
- en: 'The `Truncate` extension includes two overloads. This code will truncate the
    `name` string so that it’s no longer than 10 characters. It will truncate the
    `city` string to seven characters and add an ellipsis to the end of the string
    to indicate that it was truncated, as follows:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`Truncate`扩展包括两个重载。以下代码将截断`name`字符串，使其长度不超过10个字符。它将截断`city`字符串到七个字符，并在字符串末尾添加省略号以指示已截断，如下所示：'
- en: '[PRE11]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: I encourage you to explore these extensions, and all the others in the WCT.
    The sample app is a great way to visually explore the toolkit and get ideas of
    how to integrate it into your own projects.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我鼓励您探索这些扩展，以及WCT中的所有其他扩展。样例应用是可视化探索工具包并获得将其集成到您自己的项目中的想法的好方法。
- en: Before we wrap up, let’s briefly discuss the .NET Community Toolkit.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们结束之前，让我们简要讨论一下.NET社区工具包。
- en: .NET Community Toolkit features
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: .NET社区工具包功能
- en: The .NET Community Toolkit can be leveraged by all .NET developers. In [*Chapter
    3*](B20908_03.xhtml#_idTextAnchor073), *MVVM for Maintainability and Testability*,
    we used the MVVM Toolkit, which is part of the .NET Community Toolkit. There are
    several other features of this toolkit, primarily targeting performance and diagnostics.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: .NET社区工具包可以被所有.NET开发者利用。在[*第3章*](B20908_03.xhtml#_idTextAnchor073) *可维护性和可测试性的MVVM*中，我们使用了MVVM
    Toolkit，它是.NET社区工具包的一部分。此工具包还有其他一些功能，主要针对性能和诊断。
- en: The `Guard` and `ThrowHelper`.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`Guard`和`ThrowHelper`。'
- en: '`Guard` APIs are used to validate the arguments passed into your .NET methods.
    They are created to be fast, with minimal impact on the performance of your applications.
    Here are a few examples of their use:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`Guard` API用于验证传递到您的.NET方法中的参数。它们被设计成快速，对应用程序性能的影响最小。以下是一些它们使用示例：'
- en: '[PRE12]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You can view a complete set of helper methods in the *Microsoft Learn* documentation:
    [https://learn.microsoft.com/dotnet/api/microsoft.toolkit.diagnostics.guard#methods](https://learn.microsoft.com/dotnet/api/microsoft.toolkit.diagnostics.guard#methods).'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在*Microsoft Learn*文档中查看一组完整的辅助方法：[https://learn.microsoft.com/dotnet/api/microsoft.toolkit.diagnostics.guard#methods](https://learn.microsoft.com/dotnet/api/microsoft.toolkit.diagnostics.guard#methods)。
- en: 'The `ThrowHelper` class is a performant, efficient method of throwing exceptions.
    It’s intended to work well with `Guard` helpers. The syntax is similar to the
    built-in way of throwing exceptions in .NET. This code could be used to throw
    an `ArgumentException` exception from our `TestData` method shown previously:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`ThrowHelper`类是一种高效抛出异常的方法。它旨在与`Guard`辅助器很好地协同工作。语法类似于.NET中内置的抛出异常的方式。以下代码可以用来从之前显示的`TestData`方法中抛出`ArgumentException`异常：'
- en: '[PRE13]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The **CommunityToolkit.HighPerformance** package includes helpers and extensions
    for code focused on high performance. Once again, the package is available for
    .NET and .NET Standard targets.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '**CommunityToolkit.HighPerformance** 包包含针对高性能代码的辅助程序和扩展。同样，该包适用于 .NET 和 .NET
    Standard 目标。'
- en: 'The following members are available in the **HighPerformance** package:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **HighPerformance** 包中可用的以下成员：
- en: '`Span2D<T>`: This type has the same functionality as a `Span<T>` type but supports
    2D memory.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Span2D<T>`: 此类型与 `Span<T>` 类型具有相同的功能，但支持 2D 内存。'
- en: '`Memory2D<T>`: This type has the same functionality as a `Memory<T>` type but
    supports 2D memory locations.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Memory2D<T>`: 此类型与 `Memory<T>` 类型具有相同的功能，但支持 2D 内存位置。'
- en: '`SpanOwner<T>`: This type is a stack-only buffer that leverages a shared memory
    pool to borrow memory only used in synchronous code.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SpanOwner<T>`: 此类型是一个仅使用堆栈缓冲区的类型，它利用共享内存池来借用仅在同步代码中使用的内存。'
- en: '`MemoryOwner<T>`: This type is another buffer type. It implements `IMemoryOwner<T>`
    and is a lightweight wrapper around `ArrayPool<T>`.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MemoryOwner<T>`: 此类型是另一种缓冲区类型。它实现了 `IMemoryOwner<T>`，并且是 `ArrayPool<T>` 的轻量级包装。'
- en: '`StringPool`: This type is a configurable pool of `string` objects. It can
    improve performance when creating a large number of strings from buffers or streams.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`StringPool`: 此类型是 `string` 对象的可配置池。当从缓冲区或流中创建大量字符串时，它可以提高性能。'
- en: '`ParallelHelper`: This helper class contains a set of APIs for working with
    parallel code in .NET. It has multiple overloads of the following helper methods:
    `For`, `For2D`, and `ForEach`. Each of these helper methods creates an optimized
    parallel loop.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ParallelHelper`: 此辅助类包含一组用于在 .NET 中处理并行代码的 API。它具有以下辅助方法的多个重载：`For`、`For2D`
    和 `ForEach`。这些辅助方法中的每一个都创建一个优化的并行循环。'
- en: '`Ref<T>`: This type is a stack-only type that stores a reference to a value.
    It can be used in place of a `ref T` value in C# code, as they’re not otherwise
    supported. There is also a `ReadOnlyRef<T>` type.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Ref<T>`: 此类型是一个仅使用堆栈的类型，它存储对值的引用。它可以用作 C# 代码中 `ref T` 值的替代，因为它们在其他情况下不受支持。还有一个
    `ReadOnlyRef<T>` 类型。'
- en: 'For an in-depth description of these types and scenarios for their use, you
    should check out the documentation on *Microsoft Learn*: [https://learn.microsoft.com/dotnet/communitytoolkit/high-performance/introduction](https://learn.microsoft.com/dotnet/communitytoolkit/high-performance/introduction).
    The source code for the .NET Community Toolkit is available on GitHub: [https://github.com/CommunityToolkit/dotnet](https://github.com/CommunityToolkit/dotnet).'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些类型及其使用场景的深入了解，你应该查看 *Microsoft Learn* 上的文档：[https://learn.microsoft.com/dotnet/communitytoolkit/high-performance/introduction](https://learn.microsoft.com/dotnet/communitytoolkit/high-performance/introduction)。.NET
    Community Toolkit 的源代码可在 GitHub 上找到：[https://github.com/CommunityToolkit/dotnet](https://github.com/CommunityToolkit/dotnet)。
- en: Now, let’s wrap up and review what we’ve learned in this chapter.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们总结并回顾本章所学的内容。
- en: Summary
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about the controls, helpers, services, and other
    components available to WinUI developers in the WCT and the .NET Community Toolkit.
    We also practiced adding some of the WCT controls into a WinUI 3 project, leveraging
    the powerful `DataGrid` control. Finally, we installed and used the WCT sample
    app to discover the controls and components in the toolkit that we can use in
    our apps. Adding WCT packages to your application will provide controls with rich
    functionality and extensions that save you time.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你了解了 WinUI 开发者在 WCT 和 .NET Community Toolkit 中可用的控件、辅助程序、服务和其它组件。我们还练习了将一些
    WCT 控件添加到 WinUI 3 项目中，利用强大的 `DataGrid` 控件。最后，我们安装并使用了 WCT 示例应用程序来发现工具包中我们可以用于我们应用程序的控件和组件。将
    WCT 包添加到你的应用程序中将为你的应用程序提供具有丰富功能性和节省时间的扩展控件。
- en: In the next chapter, we will be working with the **Template Studio for WinUI**
    extension for Visual Studio to learn how you can quickly create a new WinUI app
    with rich controls and components included.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用 Visual Studio 的 **Template Studio for WinUI** 扩展来学习如何快速创建一个包含丰富控件和组件的新
    WinUI 应用程序。
- en: Questions
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What was the original name of the WCT?
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: WCT 的原始名称是什么？
- en: Which WCT legacy browser control can be used in WPF or WinForms apps?
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个 WCT 旧版浏览器控件可用于 WPF 或 WinForms 应用程序？
- en: Which WCT control can render markdown output?
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个 WCT 控件可以渲染 Markdown 输出？
- en: Which helper in the WCT can manage and group items into an observable collection?
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: WCT 中哪个辅助程序可以管理和将项目分组到可观察集合中？
- en: What is the name of the Visual Studio project template for running WinUI 3 apps?
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 WinUI 3 应用程序的可视 Studio 项目模板的名称是什么？
- en: 'Which of these was moved to the .NET Community Toolkit: `DataGrid` control,
    MVVM Toolkit, or `PrintHelper`?'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这些中哪一个被移动到了 .NET Community Toolkit：`DataGrid` 控件、MVVM Toolkit 还是 `PrintHelper`？
- en: Which extension class in the WCT contains methods to validate strings, including
    `IsEmail` and `IsPhoneNumber`?
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: WCT 中的哪个扩展类包含验证字符串的方法，包括 `IsEmail` 和 `IsPhoneNumber`？
- en: Which WCT extension can update the Windows cursor at the control level?
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个 WCT 扩展可以更新控制级别的 Windows 光标？
