- en: '14'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '14'
- en: Building Interactive Web Components Using Blazor
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Blazor 构建 Interactive Web 组件
- en: This chapter is about using Blazor to build interactive web user interface components.
    You will learn how to build Blazor components that can execute their C# and .NET
    code on the web server or in the web browser.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是关于使用 Blazor 构建交互式 Web 用户界面组件。你将学习如何构建可以在 Web 服务器或 Web 浏览器中执行其 C# 和 .NET 代码的
    Blazor 组件。
- en: When components execute on the server, Blazor uses SignalR to communicate necessary
    updates to the user interface in the browser.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当组件在服务器上执行时，Blazor 使用 SignalR 与浏览器中的用户界面进行必要的更新通信。
- en: When components execute in the browser using WebAssembly, they must make HTTP
    calls to interact with data on the server. You will learn more about this in *Chapter
    15, Building and Consuming Web Services*.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当组件在浏览器中使用 WebAssembly 执行时，它们必须进行 HTTP 调用来与服务器上的数据进行交互。你将在第 15 章“构建和消费 Web 服务”中了解更多关于此内容。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Reviewing the Blazor Web App project template
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查 Blazor Web App 项目模板
- en: Building components using Blazor
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Blazor 构建组件
- en: Defining forms using the EditForm component
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 EditForm 组件定义表单
- en: Reviewing the Blazor Web App project template
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查 Blazor Web App 项目模板
- en: Before .NET 8, there were separate project templates for the different hosting
    models, for example, **Blazor Server App**, **Blazor WebAssembly App**, and **Blazor
    WebAssembly App Empty**. .NET 8 introduced a unified project template, named **Blazor
    Web App**,and a client-only project template, renamed **Blazor WebAssembly Standalone
    App**. Avoid using the other legacy project templates unless you must use older
    .NET SDKs.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在 .NET 8 之前，对于不同的托管模型有单独的项目模板，例如，**Blazor 服务器应用**、**Blazor WebAssembly 应用**和**Blazor
    WebAssembly 应用（空）**。.NET 8 引入了一个统一的项目模板，命名为**Blazor Web App**，以及一个仅客户端的项目模板，重命名为**Blazor
    WebAssembly 独立应用**。除非你必须使用较旧的 .NET SDK，否则请避免使用其他遗留项目模板。
- en: Creating a Blazor Web App project
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 Blazor Web App 项目
- en: 'Let’s look at the default template for a Blazor Web App project. Mostly, you
    will see that it is the same as an ASP.NET Core Empty template, with a few key
    additions:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 Blazor Web App 项目的默认模板。大多数情况下，你会发现它与 ASP.NET Core Empty 模板相同，只是增加了一些关键功能：
- en: 'Use your preferred code editor to open the `ModernWeb` solution, and then add
    a new project, as defined in the following list:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你喜欢的代码编辑器打开 `ModernWeb` 解决方案，然后添加一个新项目，如下所示：
- en: 'Project template: **Blazor Web App**/ `blazor --interactivity Auto`'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目模板：**Blazor Web App**/ `blazor --interactivity Auto`
- en: 'Solution file and folder: `ModernWeb`'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决方案文件和文件夹：`ModernWeb`
- en: 'Project file and folder: `Northwind.Blazor`'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目文件和文件夹：`Northwind.Blazor`
- en: '**Authentication type**: None'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**身份验证类型**：无'
- en: '**Configure for HTTPS**: Selected'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置 HTTPS**：已选择'
- en: '**Interactive render mode**: Auto (Server and WebAssembly)'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**交互式渲染模式**：自动（服务器和 WebAssembly）'
- en: '**Interactivity location**: Per page/component'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**交互性位置**：按页面/组件'
- en: '**Include sample pages**: Selected'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**包含示例页面**：已选择'
- en: '**Do not use top-level statements**: Cleared'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不要使用顶级语句**：已清除'
- en: 'If you are using VS Code or Rider, then enter the following command at the
    command prompt or terminal: `dotnet new blazor --interactivity Auto -o Northwind.Blazor`'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用 VS Code 或 Rider，请在命令提示符或终端中输入以下命令：`dotnet new blazor --interactivity
    Auto -o Northwind.Blazor`
- en: '**Good Practice**: The default interactive render moder is **Server**. We have
    explicitly chosen **Auto** so that we can see both render modes in this project.
    We have also selected to include sample pages, which you will likely not want
    in a real-world project.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：默认的交互式渲染模式是**服务器**。我们明确选择了**自动**，以便在这个项目中可以看到两种渲染模式。我们还选择了包含示例页面，但你可能不会在真实世界的项目中想要这些页面。'
- en: 'Note that two projects are created:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意创建了两个项目：
- en: '`Northwind.Blazor`: This is the main ASP.NET Core project that defines and
    runs static SSR, streaming, and server-side Blazor components. It also references
    and hosts your client-side WebAssembly Blazor components.'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Northwind.Blazor`：这是主要的 ASP.NET Core 项目，它定义并运行静态 SSR、流式传输和服务器端 Blazor 组件。它还引用并托管你的客户端
    WebAssembly Blazor 组件。'
- en: '`Northwind.Blazor.Client`: This is a Blazor WebAssembly project for any client-side
    components that you define. In the future, it might not need to be in a separate
    project, but for .NET 8 and .NET 9, it still does.'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Northwind.Blazor.Client`：这是一个用于你定义的任何客户端组件的 Blazor WebAssembly 项目。在未来，它可能不需要在单独的项目中，但对于
    .NET 8 和 .NET 9，它仍然需要。'
- en: 'In the `ModernWeb` folder, in `Directory.Packages.props`, add an `<ItemGroup>`
    to set version numbers for server-side hosting and defining Blazor WebAssembly
    packages, as shown in the following markup:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `ModernWeb` 文件夹中，在 `Directory.Packages.props` 中，添加一个 `<ItemGroup>` 以设置服务器端托管和定义
    Blazor WebAssembly 包的版本号，如下所示：
- en: '[PRE0]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In `Northwind.Blazor.csproj`, note that it is identical to an ASP.NET Core project
    that uses the Web SDK and targets .NET 9\. Note also that it references the client-side
    project.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Blazor.csproj` 中，请注意它与使用 Web SDK 并针对 .NET 9 的 ASP.NET Core 项目相同。注意，它还引用了客户端项目。
- en: 'In `Northwind.Blazor.csproj`, delete the version number for the `Microsoft.AspNetCore.Components.WebAssembly.Server`
    package that allows this project to host WebAssembly components, as shown in the
    following markup:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Blazor.csproj` 中，删除允许此项目托管 WebAssembly 组件的 `Microsoft.AspNetCore.Components.WebAssembly.Server`
    包的版本号，如下所示：
- en: '[PRE1]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In `Northwind.Blazor.Client.csproj`, note that it is similar to an ASP.NET Core
    project but uses the Blazor WebAssembly SDK.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Blazor.Client.csproj` 中，请注意它与 ASP.NET Core 项目类似，但使用的是 Blazor WebAssembly
    SDK。
- en: 'In `Northwind.Blazor.Client.csproj`, delete the version number for the `Microsoft.AspNetCore.Components.WebAssembly`
    package that allows this project to define WebAssembly components, as shown in
    the following markup:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Blazor.Client.csproj` 中，删除允许此项目定义 WebAssembly 组件的 `Microsoft.AspNetCore.Components.WebAssembly`
    包的版本号，如下所示：
- en: '[PRE2]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Build the `Northwind.Blazor` and `Northwind.Blazor.Client` projects.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建 `Northwind.Blazor` 和 `Northwind.Blazor.Client` 项目。
- en: 'In `Northwind.Blazor`, note that `Program.cs` is almost identical to an ASP.NET
    Core project. One difference is the section that configures services, with its
    call to the `AddRazorComponents` method, which we had in our `Northwind.Web` project.
    This section also calls to enable interactivity on the server and client sides,
    as shown highlighted in the following code:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Blazor` 中，请注意 `Program.cs` 几乎与 ASP.NET Core 项目相同。一个区别是配置服务的部分，其中调用了
    `AddRazorComponents` 方法，这是我们 `Northwind.Web` 项目中有的。此部分还调用以在服务器和客户端上启用交互性，如下所示（代码中高亮显示）：
- en: '[PRE3]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Also note the section for configuring the HTTP pipeline, which calls the `MapRazorComponents<App>`
    method. This configures a root application component that will be named `App.razor`,
    as shown highlighted in the following code:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还请注意配置 HTTP 管道的部分，它调用 `MapRazorComponents<App>` 方法。这配置了一个名为 `App.razor` 的根应用程序组件，如下所示（代码中高亮显示）：
- en: '[PRE4]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In `Northwind.Blazor`, note that the `Components` folder and its subfolders,
    like `Layout` and `Pages`, use the same naming conventions that you used in your
    `Northwind.Web` project when enabling Blazor components.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Blazor` 中，请注意 `Components` 文件夹及其子文件夹，如 `Layout` 和 `Pages`，使用与您在启用
    Blazor 组件时在 `Northwind.Web` 项目中使用的相同命名约定。
- en: 'In `Northwind.Blazor.Client`, in `Program.cs`, note that it creates a `WebAssemblyHostBuilder`
    instead of the normal `WebApplication` builder, as shown highlighted in the following
    code:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Blazor.Client` 的 `Program.cs` 中，请注意它创建了一个 `WebAssemblyHostBuilder`
    而不是正常的 `WebApplication` 构建器，如下所示（代码中高亮显示）：
- en: '[PRE5]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In `Northwind.Blazor.Client`, in the `Pages` folder, note that there is one
    Blazor component named `Counter.razor`.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Blazor.Client` 中，在 `Pages` 文件夹中，请注意有一个名为 `Counter.razor` 的 Blazor
    组件。
- en: Reviewing Blazor routing, layouts, and navigation
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查 Blazor 路由、布局和导航
- en: 'Let’s review how routing is configured for this Blazor project, the layouts,
    and the navigation menu:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下这个 Blazor 项目的路由配置、布局和导航菜单：
- en: 'In the `Northwind.Blazor` project folder, in the `Components` folder, in `App.razor`,
    note that it defines basic HTML page markup that references a local copy of Bootstrap
    for styling, as well as a few Blazor-specific elements, as shown highlighted in
    the following markup and noted in the list after the markup:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Blazor` 项目的文件夹中，在 `Components` 文件夹中，在 `App.razor` 中，请注意它定义了基本的
    HTML 页面标记，引用了本地 Bootstrap 版本进行样式设置，以及一些 Blazor 特定的元素，如下所示（代码中高亮显示）并在标记后的列表中注明：
- en: '[PRE6]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'While reviewing the preceding markup, note the following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在检查前面的标记时，请注意以下内容：
- en: Assets are referenced using the `ComponentBase.Assets` property, which resolves
    the fingerprinted URL for a given asset. This should be used when you use `MapStaticAssets`
    middleware in `Program.cs`.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `ComponentBase.Assets` 属性引用资产，该属性解析给定资产的指纹 URL。当您在 `Program.cs` 中使用 `MapStaticAssets`
    中间件时，应使用此属性。
- en: 'A `<ImportMap />` Blazor component to represent an import map element (`<script
    type="importmap"></script>`) that defines the import map for module scripts. You
    can learn about import maps at the following link: [https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/type/importmap](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/type/importmap).'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于表示导入映射元素（`<script type="importmap"></script>`）的`<ImportMap />` Blazor组件，该元素定义了模块脚本的导入映射。您可以在以下链接中了解导入映射：[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/type/importmap](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/type/importmap)。
- en: A `<HeadOutlet />` Blazor component to inject additional content into the `<head>`
    section. This is one of the built-in components available in all Blazor projects.
    For example, in a Blazor page component, use the `<PageTitle>` component to set
    the `<title>` of a web page.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于向`<head>`部分注入额外内容的`<HeadOutlet />` Blazor组件。这是所有Blazor项目中可用的一些内置组件之一。例如，在一个Blazor页面组件中，使用`<PageTitle>`组件来设置网页的`<title>`。
- en: A `<Routes />` Blazor component to define the custom routes in this project.
    This component can be completely customized by the developer because it is part
    of the current project, in a file named `Routes.razor`.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于定义本项目自定义路由的`<Routes />` Blazor组件。由于该组件是当前项目的一部分，因此它可以被开发者完全自定义，其文件名为`Routes.razor`。
- en: A script block for `blazor.web.js` that manages communication back to the server
    for Blazor’s dynamic features, like downloading WebAssembly components in the
    background and later switching from server-side to client-side component execution.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于管理Blazor动态功能（如后台下载WebAssembly组件并在之后从服务器端到客户端组件执行切换）与服务器通信的`blazor.web.js`脚本块。
- en: 'In the `Components` folder, in `Routes.razor`, note that a `<Router>` enables
    routing for all Blazor components found in the current project assembly or the
    `Northwind.Blazor.Client` project assembly (for WebAssembly components), and if
    a matching route is found, then `RouteView` is executed, which sets the default
    layout for the component to `MainLayout` and passes any route data parameters
    to the component. For that component, the first `<h1>` element in it will be focused
    on, as shown in the following code:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Components`文件夹中的`Routes.razor`文件中，请注意一个`<Router>`组件可以启用当前项目assembly或`Northwind.Blazor.Client`项目assembly（对于WebAssembly组件）中找到的所有Blazor组件的路由。如果找到匹配的路由，则执行`RouteView`，这将设置组件的默认布局为`MainLayout`并将任何路由数据参数传递给组件。对于该组件，第一个`<h1>`元素将被聚焦，如下面的代码所示：
- en: '[PRE7]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the `Components` folder, in `_Imports.razor`, note that this file imports
    some useful namespaces for use in all your custom Blazor components, as shown
    in the following code:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Components`文件夹中的`_Imports.razor`文件中，请注意该文件导入了一些在所有自定义Blazor组件中使用的有用命名空间，如下面的代码所示：
- en: '[PRE8]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the `Components\Layout` folder, in `MainLayout.razor`, note that it defines
    `<div>` for a sidebar containing a navigation menu that is implemented by the
    `NavMenu.razor` component file in this project, as well as HTML5 elements like
    `<main>` and `<article>` for the content, with a `<div>` to show unhandled errors,
    as shown in the following code:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Components\Layout`文件夹中的`MainLayout.razor`文件中，请注意它定义了包含由本项目中的`NavMenu.razor`组件文件实现的导航菜单的侧边栏`<div>`，以及用于内容的HTML5元素如`<main>`和`<article>`，还有一个`<div>`用于显示未处理的错误，如下面的代码所示：
- en: '[PRE9]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the `Components\Layout` folder, in `MainLayout.razor.css`, note that it contains
    isolated CSS styles for the component. Due to the naming convention, styles defined
    in this file take priority over others defined elsewhere that might affect the
    component.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Components\Layout`文件夹中的`MainLayout.razor.css`文件中，请注意它包含针对组件的独立CSS样式。由于命名约定，在此文件中定义的样式优先于其他可能影响组件的样式。
- en: Blazor components often need to provide their own CSS to apply styling or JavaScript
    for activities that cannot be performed purely in C#, like access to browser APIs.
    To ensure that this does not conflict with site-level CSS and JavaScript, Blazor
    supports CSS and JavaScript isolation. If you have a component named `Home.razor`,
    simply create a CSS file named `Home.razor.css`. The styles defined within this
    file will override any other styles in the project.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor组件通常需要提供自己的CSS以应用样式或JavaScript以执行纯C#无法执行的活动，如访问浏览器API。为了确保这不会与站点级别的CSS和JavaScript冲突，Blazor支持CSS和JavaScript隔离。如果您有一个名为`Home.razor`的组件，只需创建一个名为`Home.razor.css`的CSS文件。在此文件中定义的样式将覆盖项目中定义的任何其他样式。
- en: 'In the `Components\Layout` folder, in `NavMenu.razor`, note that it has three
    menu items, **Home**, **Counter**, and **Weather**. These menu links are created
    by using a component named `NavLink`, as shown in the following markup:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Components\Layout` 文件夹中，在 `NavMenu.razor` 文件中，请注意，它有三个菜单项，**首页**、**计数器**和**天气**。这些菜单链接是通过使用名为
    `NavLink` 的组件创建的，如下面的标记所示：
- en: '[PRE10]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note that `NavMenu.razor` has its own isolated stylesheet named `NavMenu.razor.css`.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意，`NavMenu.razor` 有它自己的独立样式表，名为 `NavMenu.razor.css`。
- en: 'In the `Components\Pages` folder, in `Home.razor`, note that it defines a component
    that sets the page title, and then it renders a heading and a welcome message,
    as shown in the following code:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Components\Pages` 文件夹中，在 `Home.razor` 文件中，请注意，它定义了一个设置页面标题的组件，然后渲染一个标题和一个欢迎信息，如下面的代码所示：
- en: '[PRE11]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the `Components\Pages` folder, in `Weather.razor`, note that it defines
    a component that fetches weather forecasts from an injected dependency weather
    service and then renders them in a table, as shown in the following code:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Components\Pages` 文件夹中，在 `Weather.razor` 文件中，请注意，它定义了一个组件，该组件从注入的依赖项天气服务获取天气预报，然后在一个表格中渲染它们，如下面的代码所示：
- en: '[PRE12]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In the `Northwind.Blazor.Client` project, in the `Pages` folder, in `Counter.razor`,
    note that a Blazor page component is defined with a route of `/counter`, a render
    mode that will automatically switch between Server and WebAssembly, which has
    a private field named `currentCount` that is incremented on each click of a button,
    as shown in the following markup:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Blazor.Client` 项目中，在 `Pages` 文件夹下，在 `Counter.razor` 文件中，请注意，一个
    Blazor 页面组件被定义为具有 `/counter` 路由，一个会在服务器和 WebAssembly 之间自动切换的渲染模式，它有一个名为 `currentCount`
    的私有字段，每次按钮点击时都会增加，如下面的标记所示：
- en: '[PRE13]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How to define a routable page component
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何定义一个可路由的页面组件
- en: 'To create a routable page component, add the `@page` directive to the top of
    a component’s `.razor` file, as shown in the following markup:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个可路由的页面组件，将 `@page` 指令添加到组件的 `.razor` 文件顶部，如下面的标记所示：
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The preceding code is the equivalent of a mapped endpoint in `Program.cs`,
    as shown in the following code:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码相当于 `Program.cs` 中的映射端点，如下面的代码所示：
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'A page component can have multiple `@page` directives to register multiple
    routes, as shown in the following code:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 页面组件可以有多个 `@page` 指令来注册多个路由，如下面的代码所示：
- en: '[PRE16]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `Router` component scans the assembly specifically in its `AppAssembly`
    parameter for Blazor components with the `@page` directive, registering their
    URL paths as endpoints.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`Router` 组件在其 `AppAssembly` 参数中特别扫描程序集，以查找带有 `@page` 指令的 Blazor 组件，并将它们的 URL
    路径注册为端点。'
- en: At runtime, a page component is merged with any specific layout that you have
    specified in the `Routes.razor` file `<RouteView>` component. By default, the
    Blazor Web App project template defines `MainLayout.razor` as the layout for page
    components.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行时，页面组件与您在 `Routes.razor` 文件 `<RouteView>` 组件中指定的任何特定布局合并。默认情况下，Blazor Web
    App 项目模板将 `MainLayout.razor` 定义为页面组件的布局。
- en: '**Good Practice**: By convention, put routable page Blazor components in the
    `Components\Pages` folder.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：按照惯例，将可路由页面 Blazor 组件放在 `Components\Pages` 文件夹中。'
- en: How to navigate routes and pass route parameters
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何导航路由并传递路由参数
- en: Microsoft provides a dependency service named `NavigationManager` that understands
    Blazor routing and the `NavLink` component. The `NavigateTo` method is used to
    go to the specified URL.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 微软提供了一个名为 `NavigationManager` 的依赖服务，它理解 Blazor 路由和 `NavLink` 组件。`NavigateTo`
    方法用于跳转到指定的 URL。
- en: 'Blazor routes can include case-insensitive named parameters, and your code
    can most easily access the values passed by binding the parameter to a property
    in the code block, using the `[Parameter]` attribute, as shown in the following
    markup:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor 路由可以包括不区分大小写的命名参数，并且您可以通过将参数绑定到代码块中的属性来最轻松地访问传递的值，使用 `[Parameter]` 属性，如下面的标记所示：
- en: '[PRE17]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The recommended way to handle a parameter that should have a default value
    when it is missing is to suffix the parameter with `?` and use the null-coalescing
    operator in the `OnParametersSet` method, as shown in the following markup:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 处理缺失时应具有默认值的参数的推荐方法是给参数后缀添加 `?` 并在 `OnParametersSet` 方法中使用空合并运算符，如下面的标记所示：
- en: '[PRE18]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: How to use the navigation link component with routes
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何使用带有路由的导航链接组件
- en: 'In HTML, you use the `<a>` element to define navigation links, as shown in
    the following markup:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在 HTML 中，您使用 `<a>` 元素来定义导航链接，如下面的标记所示：
- en: '[PRE19]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In Blazor, use the `<NavLink>` component, as shown in the following markup:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Blazor 中，使用 `<NavLink>` 组件，如下面的标记所示：
- en: '[PRE20]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The `NavLink` component is better than an anchor element because it automatically
    sets its class to `active` if its `href` is a match with the current location
    URL. If your CSS uses a different class name, then you can set the class name
    in the `NavLink.ActiveClass` property.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`NavLink`组件比锚点元素更好，因为它会自动将其类设置为`active`，如果其`href`与当前位置URL匹配。如果您的CSS使用不同的类名，则可以在`NavLink.ActiveClass`属性中设置该类名。'
- en: 'By default, in the matching algorithm, the `href` is a path *prefix*, so if
    `NavLink` has an `href` of `/customers`, as shown in the preceding code example,
    then it would match all the following paths and set them all to have the `active`
    class style:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，在匹配算法中，`href`是一个路径*前缀*，因此如果`NavLink`的`href`为`/customers`，如前面的代码示例所示，那么它会匹配以下所有路径并将它们都设置为具有`active`类样式：
- en: '[PRE21]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'To ensure that the matching algorithm only performs matches on *all* of the
    text in the path (in other words, there is only a match when the whole complete
    text matches and not when just part of the path matches), then set the `Match`
    parameter to `NavLinkMatch.All`, as shown in the following code:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保匹配算法只对路径中的*所有*文本执行匹配（换句话说，只有当整个完整文本匹配时才进行匹配，而不是路径的一部分匹配），请将`Match`参数设置为`NavLinkMatch.All`，如下面的代码所示：
- en: '[PRE22]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: If you set other attributes, such as `target`, they are passed through to the
    underlying `<a>` element that is generated.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您设置了其他属性，例如`target`，它们将被传递到生成的底层`<a>`元素。
- en: Understanding base component classes
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解基组件类
- en: 'The `OnParametersSet` method is defined by the base class that components inherit
    from by default, named `ComponentBase`, as shown in the following code:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnParametersSet`方法是由默认继承自组件的基类`ComponentBase`定义的，如下面的代码所示：'
- en: '[PRE23]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '`ComponentBase` has some useful methods that you can call and override, as
    shown in *Table 14.1*:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`ComponentBase`有一些有用的方法，您可以在其中调用并覆盖，如下表*14.1*所示：'
- en: '| **Method(s)** | **Description** |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| **方法** | **描述** |'
- en: '| `InvokeAsync` | Call this method to execute a function on the associated
    renderer’s synchronization context. |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| `InvokeAsync` | 调用此方法以在关联渲染器的同步上下文中执行函数。 |'
- en: '| `OnAfterRender`,`OnAfterRenderAsync` | Override these methods to invoke code
    after each time the component has been rendered. |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| `OnAfterRender`,`OnAfterRenderAsync` | 覆盖这些方法以在每次组件被渲染后调用代码。 |'
- en: '| `OnInitialized`,`OnInitializedAsync` | Override these methods to invoke code
    after the component has received its initial parameters from its parent in the
    render tree. |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| `OnInitialized`,`OnInitializedAsync` | 覆盖这些方法以在组件从其渲染树中的父组件接收初始参数后调用代码。 |'
- en: '| `OnParametersSet`,`OnParametersSetAsync` | Override these methods to invoke
    code after the component has received parameters and the values have been assigned
    to properties. |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| `OnParametersSet`,`OnParametersSetAsync` | 覆盖这些方法以在组件接收参数并将值分配给属性后调用代码。 |'
- en: '| `ShouldRender` | Override this method to indicate if the component should
    render. |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| `ShouldRender` | 覆盖此方法以指示组件是否应该渲染。 |'
- en: '| `StateHasChanged` | Call this method to cause the component to re-render.
    |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| `StateHasChanged` | 调用此方法以使组件重新渲染。 |'
- en: 'Table 14.1: Useful methods to override in ComponentBase'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 表14.1：在ComponentBase中覆盖的有用方法
- en: 'As you saw in *Chapter 13*, *Building Websites Using ASP.NET Core*, Blazor
    components can have shared layouts. You would create a `.razor` component file
    and make it explicitly inherit from `LayoutComponentBase`, as shown in the following
    markup:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在*第13章*中看到的，*使用ASP.NET Core构建网站*，Blazor组件可以有共享布局。您将创建一个`.razor`组件文件，并使其显式继承自`LayoutComponentBase`，如下面的标记所示：
- en: '[PRE24]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The base class has a property named `Body` that you can render in the markup
    at the correct place within the layout.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 基类有一个名为`Body`的属性，您可以在布局的适当位置在标记中渲染。
- en: 'You can set a default layout for components in the `App.razor` file and its
    `Router` component. To explicitly set a layout for a component, use the `@layout`
    directive, as shown in the following markup:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在`App.razor`文件及其`Router`组件中为组件设置默认布局。要为组件显式设置布局，请使用`@layout`指令，如下面的标记所示：
- en: '[PRE25]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Running the Blazor Web App project template
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行Blazor Web App项目模板
- en: 'Now that we have reviewed the project template and the important parts that
    are specific to the Blazor server, we can start the website and review its behavior:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经审查了项目模板以及特定于Blazor服务器的关键部分，我们可以启动网站并审查其行为：
- en: 'In the `Northwind.Blazor` project, in the `Properties` folder, in `launchSettings.json`,
    for the `https` profile, modify the `applicationUrl` to use port `5141` for HTTPS
    and port `5140` for HTTP, as shown highlighted in the following markup:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Blazor` 项目中，在 `Properties` 文件夹中，在 `launchSettings.json` 文件中，对于
    `https` 配置文件，修改 `applicationUrl` 以使用端口 `5141` 进行 HTTPS 和端口 `5140` 进行 HTTP，如下所示，高亮显示的以下标记：
- en: '[PRE26]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Start the `Northwind.Blazor` project using the `https` launch profile.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `https` 启动配置启动 `Northwind.Blazor` 项目。
- en: Start Chrome and navigate to `https://localhost:5141/`.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Chrome 并导航到 `https://localhost:5141/`。
- en: 'In the left navigation menu, click **Weather** and then the **Click me** button
    three times, and note that the label shows **3**, as shown in *Figure 14.1*:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧导航菜单中，点击 **Weather**，然后点击 **Click me** 按钮 three 次，并注意标签显示 **3**，如图 *图 14.1*
    所示：
- en: '![](img/B22322_14_01.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B22322_14_01.png)'
- en: 'Figure 14.1: A Blazor Counter component using WebAssembly'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.1：使用 WebAssembly 的 Blazor 计数器组件
- en: 'In the left navigation menu, click **Weather**, and note that for half a second,
    a **Loading…** message appears, and then it is replaced by a table of five random
    weather forecasts, as shown in *Figure 14.2*:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧导航菜单中，点击 **Weather**，并注意在半秒钟内，出现一个 **Loading…** 消息，然后它被一个包含五个随机天气预报的表格所取代，如图
    *图 14.2* 所示：
- en: '![](img/B22322_14_02.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B22322_14_02.png)'
- en: 'Figure 14.2: Fetching weather data into a Blazor Web App using streaming'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.2：使用流将天气数据提取到 Blazor Web App 中
- en: Close Chrome and shut down the web server.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭 Chrome 并关闭 web 服务器。
- en: Now that you’ve reviewed the sample Blazor components in the Blazor Web App
    project template, let’s dig in and build our own.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经审查了 Blazor Web App 项目模板中的示例 Blazor 组件，让我们深入挖掘并构建我们自己的组件。
- en: Building components using Blazor
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Blazor 构建组件
- en: In this section, we will build a component to list, create, and edit customers
    in the Northwind database.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将构建一个组件来列出、创建和编辑 Northwind 数据库中的客户。
- en: 'We will build it over several steps:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将分几个步骤来完成它：
- en: Make a Blazor component that renders the name of a country set as a parameter.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 Blazor 组件，用于渲染设置为参数的国家名称。
- en: Make it work as a routable page as well as a component.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使其既能作为可路由页面，也能作为组件工作。
- en: Implement the functionality to perform **CRUD** (**create**, **read**, **update**
    and **delete**) operations on customers in a database.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在数据库中实现执行 **CRUD**（**创建**、**读取**、**更新** 和 **删除**）操作的功能。
- en: Defining and testing a simple Blazor component
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义和测试一个简单的 Blazor 组件
- en: 'We will add the new component to the existing Blazor Web App project:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加新的组件到现有的 Blazor Web App 项目中：
- en: In the `Northwind.Blazor` project, in the `Components\Pages` folder, add a new
    file named `Customers.razor`. In Visual Studio, the project item template is named
    **Razor Component**. In Rider, the project item template is named **Blazor Component**.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Blazor` 项目中，在 `Components\Pages` 文件夹中，添加一个名为 `Customers.razor`
    的新文件。在 Visual Studio 中，项目项模板命名为 **Razor Component**。在 Rider 中，项目项模板命名为 **Blazor
    Component**。
- en: '**Good Practice**: Remember that Blazor component filenames must start with
    an uppercase letter; otherwise, you will have compile errors!'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：请记住，Blazor 组件文件名必须以大写字母开头；否则，您将遇到编译错误！'
- en: 'Add statements to output a heading for the `Customers` component, and define
    a code block that defines a property to store the name of a country, as shown
    highlighted in the following markup:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加语句以输出 `Customers` 组件的标题，并定义一个代码块来存储国家名称，如下所示，高亮显示的以下标记：
- en: '[PRE27]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The `@code` block can be anywhere in the file. Some developers prefer it at
    the top so that any properties defined in it are available while typing the markup
    below, and they can more easily reference them.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`@code` 块可以放在文件的任何位置。一些开发者喜欢将其放在顶部，这样在编写下面的标记时，其中定义的任何属性都可用，并且可以更容易地引用它们。'
- en: 'In the `Components\Pages` folder, in `Home.razor`, add statements to the bottom
    of the file to instantiate the `Customers` component twice, once with `Germany`
    set as the `Country` parameter and once without setting the country, as shown
    in the following markup:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Components\Pages` 文件夹中的 `Home.razor` 文件中，将语句添加到文件底部以实例化 `Customers` 组件两次，一次将
    `Germany` 设置为 `Country` 参数，一次不设置国家，如下所示，以下标记：
- en: '[PRE28]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Start the `Northwind.Blazor` project using the `https` launch profile.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `https` 启动配置启动 `Northwind.Blazor` 项目。
- en: 'Start Chrome, navigate to `https://localhost:5141/`, and note the `Customers`
    components, as shown in *Figure 14.3*:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Chrome，导航到 `https://localhost:5141/`，并注意 `Customers` 组件，如图 *图 14.3* 所示：
- en: '![](img/B22322_14_03.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B22322_14_03.png)'
- en: 'Figure 14.3: The Customers components with the Country parameter set to Germany,
    and not set'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.3：设置国家参数为德国和不设置的客户组件
- en: Close Chrome and shut down the web server.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭Chrome并关闭Web服务器。
- en: Using Bootstrap icons
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Bootstrap图标
- en: 'In the older Blazor project templates with .NET 7 and earlier, they included
    all Bootstrap icons. In the new project templates with .NET 8 and later, only
    three icons are defined using SVG. Let’s see how the Blazor team defined those
    icons, and then we’ll add some more for our own use:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在较旧的.NET 7及更早版本的Blazor项目模板中，它们包含了所有Bootstrap图标。在.NET 8及更高版本的新的项目模板中，只定义了三个使用SVG的图标。让我们看看Blazor团队是如何定义这些图标的，然后我们将添加一些供我们使用的图标：
- en: 'In the `Components\Layout` folder, in `NavMenu.razor.css`, find the text `bi-house`,
    and note the three icons defined using SVG, as partially shown in the following
    code:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Components\Layout`文件夹中，在`NavMenu.razor.css`文件中，找到文本`bi-house`，并注意使用SVG定义的三个图标，部分如下面的代码所示：
- en: '[PRE29]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: In your favorite browser, navigate to [https://icon-sets.iconify.design/bi/](https://icon-sets.iconify.design/bi/),
    and note that **Bootstrap Icons** have an MIT license and contain more than 2,000
    icons.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您喜欢的浏览器中，导航到[https://icon-sets.iconify.design/bi/](https://icon-sets.iconify.design/bi/)，并注意**Bootstrap
    Icons**拥有MIT许可证，包含超过2,000个图标。
- en: There are two input boxes on the web page, one labeled **Search Icons** and
    one labeled **Filter Icons**. In the **Filter Icons** box, enter `globe`, and
    note that six globe icons are found.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在网页上有两个输入框，一个标记为**搜索图标**，另一个标记为**过滤图标**。在**过滤图标**框中输入`globe`，并注意找到了六个地球仪图标。
- en: Click the first globe, in the **CSS** section, click the **CSS** button, and
    note that you could click the **Copy to Clipboard** button to copy and paste the
    definition of this icon for use in the CSS stylesheet; however, you do not need
    to because I have already created a CSS file for you to use, with five icons defined
    for you to use in your Blazor project.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击第一个地球仪，在**CSS**部分，点击**CSS**按钮，并注意您可以通过点击**复制到剪贴板**按钮来复制并粘贴此图标的定义以用于CSS样式表；然而，您不需要这样做，因为我已经为您创建了一个CSS文件，其中定义了五个图标，您可以在Blazor项目中使用。
- en: In your favorite browser, navigate to [https://github.com/markjprice/cs13net9/blob/main/code/ModernWeb/Northwind.Blazor/Northwind.Blazor/wwwroot/icons.css](https://github.com/markjprice/cs13net9/blob/main/code/ModernWeb/Northwind.Blazor/Northwind.Blazor/wwwroot/icons.css),
    download the file, and save it in your own project in its `wwwroot` folder.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您喜欢的浏览器中，导航到[https://github.com/markjprice/cs13net9/blob/main/code/ModernWeb/Northwind.Blazor/Northwind.Blazor/wwwroot/icons.css](https://github.com/markjprice/cs13net9/blob/main/code/ModernWeb/Northwind.Blazor/Northwind.Blazor/wwwroot/icons.css)，下载文件，并将其保存在您自己的项目的`wwwroot`文件夹中。
- en: 'In the `Components` folder, in the `App.razor` component, in the `<head>`,
    add a `<link>` element to reference the `icons.css` stylesheet, as shown in the
    following markup:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Components`文件夹中，在`App.razor`组件中，在`<head>`部分，添加一个`<link>`元素来引用`icons.css`样式表，如下面的标记所示：
- en: '[PRE30]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Save and close the file.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭文件。
- en: Making the component a routable page component
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将组件转换为可路由页面组件
- en: 'It is simple to turn this component into a routable page component with a route
    parameter for the country:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 将此组件转换为具有国家路由参数的可路由页面组件很简单：
- en: 'In the `Components\Pages` folder, in the `Customers.razor` component, add a
    statement at the top of the file to register `/customers` as its route with an
    optional `country` route parameter, as shown in the following markup:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Components\Pages`文件夹中，在`Customers.razor`组件中，在文件顶部添加一个语句将`/customers`注册为其路由，并带有可选的`country`路由参数，如下面的标记所示：
- en: '[PRE31]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'In the `Components\Layout` folder, in `NavMenu.razor`, at the bottom of the
    existing list item elements, add two list item elements for our routable page
    component, showing customers worldwide and in Germany that both use an icon of
    people, as shown in the following markup:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Components\Layout`文件夹中，在`NavMenu.razor`文件中，在现有列表项元素底部，添加两个列表项元素用于我们的可路由页面组件，显示全球和德国的客户，两者都使用人的图标，如下面的标记所示：
- en: '[PRE32]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: In the `Components\Pages` folder, in `Home.razor`, remove the two `<Customers>`
    components because we can test them using their navigation menu items from now
    on, and we want to keep the home page as simple as possible.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Components\Pages`文件夹中，在`Home.razor`文件中，删除两个`<Customers>`组件，因为我们现在可以使用它们的导航菜单项来测试它们，并且我们希望将主页保持尽可能简单。
- en: Start the `Northwind.Blazor` project using the `https` launch profile.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`https`启动配置文件启动`Northwind.Blazor`项目。
- en: Start Chrome and navigate to `https://localhost:5141/`.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Chrome并导航到`https://localhost:5141/`。
- en: 'In the left navigation menu, click **Customers in Germany**. Note that the
    country name is correctly passed to the page component and that the component
    uses the same layout as the other page components, like `Home.razor`. Also note
    the URL, [https://localhost:5141/customers/Germany](https://localhost:5141/customers/Germany),
    as shown in *Figure 14.4*:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧导航菜单中，点击 **德国的客户**。注意国家名称已正确传递到页面组件，并且该组件使用与其他页面组件相同的布局，如 `Home.razor`。还要注意
    URL，[https://localhost:5141/customers/Germany](https://localhost:5141/customers/Germany)，如图
    14.4 所示：
- en: '![](img/B22322_14_04.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B22322_14_04.png)'
- en: 'Figure 14.4: Customers in Germany'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.4：德国的客户
- en: Close Chrome and shut down the web server.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭 Chrome 并关闭 web 服务器。
- en: Getting entities into a Blazor component
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将实体引入 Blazor 组件
- en: 'Now that you have seen the minimum implementation of a Blazor page component,
    we can add some useful functionality to it. In this case, we will use the Northwind
    database context to fetch customers from the database:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经看到了 Blazor 页面组件的最小实现，我们可以向其中添加一些有用的功能。在这种情况下，我们将使用 Northwind 数据库上下文从数据库中获取客户：
- en: 'In `Northwind.Blazor.csproj`, add a reference to the Northwind database context
    project for either SQL Server or SQLite, and globally import the namespace to
    work with Northwind entities, as shown in the following markup:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Blazor.csproj` 中，添加对 SQL Server 或 SQLite 的 Northwind 数据库上下文项目的引用，并全局导入命名空间以处理
    Northwind 实体，如下面标记所示：
- en: '[PRE33]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '**Warning!** The relative path to the data context project is two directories
    up from the current project, so we must use `..\..\`.'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**警告！** 数据上下文项目相对于当前项目向上两个目录，因此我们必须使用 `..\..\`。'
- en: Build the `Northwind.Blazor` project.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建 `Northwind.Blazor` 项目。
- en: 'In `Program.cs`, before the call to `Build`, add a statement to register the
    Northwind database context in the dependency services collection, as shown in
    the following code:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 文件中，在调用 `Build` 之前，向依赖服务集合中添加一个语句以注册 Northwind 数据库上下文，如下面的代码所示：
- en: '[PRE34]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: We need to explicitly set the `relativePath` because the `Northwind.db` file
    is in the `ModernWeb` folder and the project runs in the `ModernWeb\Northwind.Blazor\Northwind.Blazor`
    folder.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要显式设置 `relativePath`，因为 `Northwind.db` 文件位于 `ModernWeb` 文件夹中，而项目运行在 `ModernWeb\Northwind.Blazor\Northwind.Blazor`
    文件夹中。
- en: Abstracting a service for a Blazor component
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为 Blazor 组件抽象服务
- en: We could implement the Blazor component so that it directly calls the Northwind
    database context to fetch the customers using an entity model. This would work
    if the Blazor component executes on the server. However, if the component ran
    in the browser using WebAssembly, then it would not work.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以实现 Blazor 组件，使其直接调用 Northwind 数据库上下文以使用实体模型获取客户。如果 Blazor 组件在服务器上执行，这将有效。然而，如果组件在浏览器中使用
    WebAssembly 运行，则不会有效。
- en: 'We will now create a local dependency service to enable better reuse of the
    components:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将创建一个本地依赖服务，以实现组件的更好重用：
- en: 'Use your preferred coding tool to add a new project, as defined in the following
    list:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您首选的编码工具添加一个新项目，如下面列表中定义的：
- en: 'Project template: **Class Library** / `classlib`'
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目模板：**类库** / `classlib`
- en: 'Project file and folder: `Northwind.Blazor.Services`'
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目文件和文件夹：`Northwind.Blazor.Services`
- en: 'Solution file and folder: `ModernWeb`'
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决方案文件和文件夹：`ModernWeb`
- en: 'In the `Northwind.Blazor.Services.csproj` project file, add a project reference
    to the Northwind entity models library, as shown in the following markup:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Blazor.Services.csproj` 项目文件中，添加对 Northwind 实体模型库的项目引用，如下面标记所示：
- en: '[PRE35]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Build the `Northwind.Blazor.Services` project.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建 `Northwind.Blazor.Services` 项目。
- en: In the `Northwind.Blazor.Services` project, rename `Class1.cs` to `INorthwindService.cs`.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Blazor.Services` 项目中，将 `Class1.cs` 重命名为 `INorthwindService.cs`。
- en: 'In `INorthwindService.cs`, define a contract for a local service that abstracts
    CRUD operations, as shown in the following code:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `INorthwindService.cs` 文件中，定义一个本地服务的契约，该服务抽象了 CRUD 操作，如下面的代码所示：
- en: '[PRE36]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'In the `Northwind.Blazor.csproj` project file, add a project reference to the
    services class library, as shown highlighted in the following markup:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Blazor.csproj` 项目文件中，添加对服务类库的项目引用，如下面高亮显示的标记所示：
- en: '[PRE37]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Build the `Northwind.Blazor` project.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建 `Northwind.Blazor` 项目。
- en: In the `Northwind.Blazor` project, add a new folder named `Services`.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Blazor` 项目中，添加一个名为 `Services` 的新文件夹。
- en: 'In the `Services` folder, add a new file named `NorthwindServiceServerSide.cs`,
    and modify its contents to implement the `INorthwindService` interface by using
    the Northwind database context, as shown in the following code:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Services` 文件夹中，添加一个名为 `NorthwindServiceServerSide.cs` 的新文件，并修改其内容以使用 Northwind
    数据库上下文实现 `INorthwindService` 接口，如下面的代码所示：
- en: '[PRE38]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'In `Program.cs`, import the namespace for our service, as shown in the following
    code:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，导入我们服务的命名空间，如下面的代码所示：
- en: '[PRE39]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'In `Program.cs`, before the call to `Build`, add a statement to register `NorthwindServiceServerSide`
    as a transient service that implements the `INorthwindService` interface, as shown
    in the following code:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 文件中，在调用 `Build` 之前，添加一条语句将 `NorthwindServiceServerSide` 注册为实现
    `INorthwindService` 接口的一个瞬态服务，如下面的代码所示：
- en: '[PRE40]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'A transient service is one that creates a new instance for each request. You
    can read more about the different lifetimes for services at the following link:
    [https://learn.microsoft.com/en-us/dotnet/core/extensions/dependency-injection#service-lifetimes](https://learn.microsoft.com/en-us/dotnet/core/extensions/dependency-injection#service-lifetimes).'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 瞬态服务是指为每个请求创建一个新实例的服务。您可以在以下链接中了解更多关于服务不同生命周期的信息：[https://learn.microsoft.com/en-us/dotnet/core/extensions/dependency-injection#service-lifetimes](https://learn.microsoft.com/en-us/dotnet/core/extensions/dependency-injection#service-lifetimes)。
- en: 'In the `Components` folder, in `_Imports.razor`, import the namespace to work
    with the Northwind entities and our service so that Blazor components that we
    build do not need to import the namespaces individually, as shown in the following
    markup:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Components` 文件夹中的 `_Imports.razor` 文件中，导入用于处理 Northwind 实体和我们的服务的命名空间，以便我们构建的
    Blazor 组件不需要单独导入命名空间，如下面的标记所示：
- en: '[PRE41]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The `_Imports.razor` file only applies to `.razor` files. If you use code-behind
    `.cs` files to implement component code, then they must have namespaces imported
    separately or use global `usings` to implicitly import the namespaces.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '`_Imports.razor` 文件仅适用于 `.razor` 文件。如果您使用代码背后的 `.cs` 文件来实现组件代码，那么它们必须单独导入命名空间或使用全局
    `using` 语句隐式导入命名空间。'
- en: 'In the `Components\Pages` folder, in `Customers.razor`, add statements to inject
    the service, and then use it to output a table of all customers using synchronous
    database operations, as shown highlighted in the following code:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Components\Pages` 文件夹中的 `Customers.razor` 文件中，添加注入服务的语句，然后使用它通过同步数据库操作输出所有客户的表格，如下面高亮显示的代码所示：
- en: '[PRE42]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Start the `Northwind.Blazor` project using the `https` launch profile.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `https` 启动配置启动 `Northwind.Blazor` 项目。
- en: Start Chrome and navigate to `https://localhost:5141/`.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Chrome 并导航到 `https://localhost:5141/`。
- en: 'In the left navigation menu, click **Customers in Germany**, and note that
    the table of customers loads from the database and renders in the web page, as
    shown in *Figure 14.5*:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧导航菜单中，点击 **Customers in Germany**，并注意客户表从数据库加载并在网页中渲染，如图 *14.5* 所示：
- en: '![](img/B22322_14_05.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![图片 B22322_14_05.png]'
- en: 'Figure 14.5: The list of customers in Germany'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.5：德国客户列表
- en: In the browser address bar, change `Germany` to `UK`, and note that the table
    of customers is filtered to only show UK customers.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器地址栏中，将 `Germany` 改为 `UK`，并注意客户表已筛选，仅显示 UK 客户。
- en: In the left navigation menu, click **Customers Worldwide**, and note that the
    table of customers is unfiltered by country.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧导航菜单中，点击 **Customers Worldwide**，注意客户表未按国家进行筛选。
- en: 'Click any of the edit or delete buttons, and note that they return a message
    saying **Error: 404** because we have not yet implemented that functionality.
    Also, note the link to edit the customer identified by the five-character identifier
    `ALFKI`, as shown in the following link: `https://localhost:5141/editcustomer/ALFKI`.'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击任何编辑或删除按钮，并注意它们返回一个消息说 **错误：404**，因为我们还没有实现该功能。同时，注意编辑由五位字符标识符 `ALFKI` 确定的客户链接，如下面的链接所示：`https://localhost:5141/editcustomer/ALFKI`。
- en: Close Chrome and shut down the web server.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭 Chrome 并关闭 web 服务器。
- en: Enabling streaming rendering
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用流式渲染
- en: 'Now, let’s improve the rendering of the table of customers by making it happen
    after the page has appeared to the visitor. We are already using an asynchronous
    operation to fetch the data, but this operation must finish before the web page
    response is sent back to the browser. This is why we never see the **Loading…**
    message on the page. To see it, we must enable streaming rendering. But if you
    are fetching data from a local database, it might still happen too quickly. So
    to make sure we see it, we will also slow down the fetching of the data by adding
    a delay:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过在页面向访客显示后改进客户表的渲染。我们已经在使用异步操作来获取数据，但这个操作必须在将网页响应发送回浏览器之前完成。这就是为什么我们从未在页面上看到**加载中…**消息。要看到它，我们必须启用流式渲染。但是，如果您从本地数据库获取数据，它可能仍然发生得太快。因此，为了确保我们能看到它，我们还将通过添加延迟来减慢数据的获取：
- en: 'In the `Components\Pages` folder, at the top of `Customers.razor`, add an attribute
    to enable streaming rendering, as shown in the following code:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Components\Pages`文件夹中，在`Customers.razor`的顶部添加一个属性以启用流式渲染，如下面的代码所示：
- en: '[PRE43]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'In `Customers.razor`, in the `OnParametersSetAsync` method, add a statement
    to asynchronously delay for one second, as shown highlighted in the following
    code:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Customers.razor`中，在`OnParametersSetAsync`方法中添加一个语句以异步延迟一秒，如下面的代码所示：
- en: '[PRE44]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Start the `Northwind.Blazor` project using the `https` launch profile.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`https`启动配置启动`Northwind.Blazor`项目。
- en: Start Chrome and navigate to `https://localhost:5141/`.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Chrome并导航到`https://localhost:5141/`。
- en: In the left navigation menu, click **Customers in Germany**, and note that the
    **Loading…** message appears for a second and is then replaced by the table of
    customers.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧导航菜单中，点击**德国的客户**，并注意**加载中…**消息出现一秒后，然后被客户表替换。
- en: So far, the component provides only a read-only table of customers. Now, we
    will extend it with full CRUD operations.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，该组件只提供了一个只读的客户表。现在，我们将通过添加完整的CRUD操作来扩展它。
- en: Defining forms using the EditForm component
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用EditForm组件定义表单
- en: Microsoft provides ready-made components to build forms. We will use them to
    provide create, edit, and delete functionality for customers.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 微软提供了现成的组件来构建表单。我们将使用它们为客户提供创建、编辑和删除功能。
- en: Microsoft provides the `EditForm` component and several form elements, such
    as `InputText`, to make it easier to use forms with Blazor.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 微软提供了`EditForm`组件以及几个表单元素，例如`InputText`，以简化使用Blazor表单的过程。
- en: '`EditForm` can have a model set to bind it to an object with properties and
    event handlers for custom validation, as well as to recognize standard Microsoft
    validation attributes on the model class, as shown in the following code:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '`EditForm`可以设置一个模型以将其绑定到一个具有属性和自定义验证事件处理器的对象，以及识别模型类上的标准Microsoft验证属性，如下面的代码所示：'
- en: '[PRE45]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'As an alternative to a `ValidationSummary` component, you can use the `ValidationMessage`
    component to show a message next to an individual form element. To bind the validation
    message to a property, you use a lambda expression to select the property, as
    shown in the following code:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 作为`ValidationSummary`组件的替代方案，您可以使用`ValidationMessage`组件在单个表单元素旁边显示消息。要将验证消息绑定到一个属性，您使用lambda表达式来选择该属性，如下面的代码所示：
- en: '[PRE46]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Building a customer detail component
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建客户详情组件
- en: 'We will create a component to show the details of a customer. This will only
    be a component, never a page, so it will not have a `@page` directive:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个组件来显示客户的详细信息。这只是一个组件，而不是页面，因此它不会有`@page`指令：
- en: In the `Northwind.Blazor` project, in the `Components` folder, create a new
    file named `CustomerDetail.razor`. (The Visual Studio project item template is
    named **Razor Component**; the Rider project item template is named **Blazor Component**.)
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.Blazor`项目中，在`Components`文件夹中创建一个名为`CustomerDetail.razor`的新文件。（Visual
    Studio项目项模板命名为**Razor组件**；Rider项目项模板命名为**Blazor组件**。）
- en: 'Modify its contents to define a form to edit the properties of a customer,
    as shown in the following markup:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改其内容以定义一个用于编辑客户属性的表单，如下面的标记所示：
- en: '[PRE47]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Building customer create, edit, and delete components
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建客户创建、编辑和删除组件
- en: 'Now, we can create three routable page components that use the component:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以创建三个可路由的页面组件，它们使用该组件：
- en: In the `Components\Pages` folder, create a new file named `CreateCustomer.razor`.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Components\Pages`文件夹中创建一个名为`CreateCustomer.razor`的新文件。
- en: 'In `CreateCustomer.razor`, modify its contents to use the customer detail component
    to create a new customer, as shown in the following code:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`CreateCustomer.razor`中，修改其内容以使用客户详情组件来创建新客户，如下面的代码所示：
- en: '[PRE48]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'In the `Components\Pages` folder, in `Customers.razor`, after the `<h3>` element,
    add a `<div>` element with a button to navigate to the create customer page component,
    as shown in the following markup:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Components\Pages`文件夹中，在`Customers.razor`中，在`<h3>`元素之后添加一个包含按钮的`<div>`元素，用于导航到创建客户页面组件，如下面的标记所示：
- en: '[PRE49]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'In the `Components\Pages` folder, create a new file named `EditCustomer.razor`,
    and modify its contents to use the customer detail component to edit and save
    changes to an existing customer, as shown in the following code:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Components\Pages`文件夹中，创建一个名为`EditCustomer.razor`的新文件，并修改其内容以使用客户详情组件来编辑并保存现有客户的更改，如下面的代码所示：
- en: '[PRE50]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'In the `Components\Pages` folder, create a new file named `DeleteCustomer.razor`,
    and modify its contents to use the customer detail component to show the customer
    that is about to be deleted, as shown in the following code:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Components\Pages`文件夹中，创建一个名为`DeleteCustomer.razor`的新文件，并修改其内容以使用客户详情组件来显示即将被删除的客户，如下面的代码所示：
- en: '[PRE51]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Testing the customer components
  id: totrans-254
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试客户组件
- en: 'Now, we can test the customer components and how to use them to create, edit,
    and delete customers:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以测试客户组件以及如何使用它们来创建、编辑和删除客户：
- en: Start the `Northwind.Blazor` project using the `https` launch profile.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`https`启动配置启动`Northwind.Blazor`项目。
- en: Start Chrome and navigate to `https://localhost:5141/`.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Chrome并导航到`https://localhost:5141/`。
- en: Navigate to **Customers Worldwide** or **Customers in Germany** and click the
    **+ Create New** button.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**全球客户**或**德国客户**，然后点击**+ 创建新**按钮。
- en: 'Enter an invalid **Customer Id** like `ABCDEF`, leave the textbox, and note
    the validation message, as shown in *Figure 14.6*:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入无效的**客户ID**如`ABCDEF`，离开文本框，并注意验证信息，如图14.6所示：
- en: '![](img/B22322_14_06.png)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B22322_14_06.png)'
- en: 'Figure 14.6: Creating a new customer and entering an invalid customer ID'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.6：创建新客户并输入无效的客户ID
- en: Change **Customer Id** to `ABCDE`, enter values for the other textboxes like
    `Alpha Corp`, `Main Street`, and `Germany`, and then click the **Create Customer**
    button.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**客户ID**更改为`ABCDE`，为其他文本框如`Alpha Corp`、`Main Street`和`Germany`输入值，然后点击**创建客户**按钮。
- en: When the list of customers appears, click **Customers in Germany**, and scroll
    down to the bottom of the page to see the new customer.
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当客户列表出现时，点击**德国客户**，然后滚动到页面底部以查看新客户。
- en: On the **ABCDE** customer row, click the **Edit** icon button, change the address
    to something like `Upper Avenue`, click the **Update** button, and note that the
    customer record has been updated.
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**ABCDE**客户行上，点击**编辑**图标按钮，将地址更改为类似`Upper Avenue`的内容，点击**更新**按钮，并注意客户记录已被更新。
- en: On the **ABCDE** customer row, click the **Delete** icon button, note the warning,
    click the **Delete Customer** button, and note that the customer record has been
    deleted.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**ABCDE**客户行上，点击**删除**图标按钮，注意警告，点击**删除客户**按钮，并注意客户记录已被删除。
- en: Close Chrome and shut down the web server.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭Chrome并关闭Web服务器。
- en: Practicing and exploring
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习和探索
- en: Test your knowledge and understanding by answering some questions, getting some
    hands-on practice, and exploring this chapter’s topics with deeper research.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 通过回答一些问题、进行一些实际操作练习，并深入研究本章主题来测试你的知识和理解。
- en: Exercise 14.1 – Online material
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习14.1 – 在线材料
- en: Online material can be created by Microsoft or third parties, or it can be found
    in extra content for this book.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 在线材料可以由Microsoft或第三方创建，或者可以在本书的额外内容中找到。
- en: Enhancing Blazor apps
  id: totrans-271
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提升Blazor应用程序
- en: 'To learn how to enhance Blazor apps using AOT native publish and interop with
    JavaScript, as well as handle location-changing events, you can read an optional
    online-only section, found at the following link: [https://github.com/markjprice/cs13net9/blob/main/docs/ch14-enhanced-blazor.md](https://github.com/markjprice/cs13net9/blob/main/docs/ch14-enhanced-blazor.md).'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何使用AOT原生发布和与JavaScript的互操作以及处理位置更改事件来增强Blazor应用程序，你可以阅读一个可选的在线部分，链接如下：[https://github.com/markjprice/cs13net9/blob/main/docs/ch14-enhanced-blazor.md](https://github.com/markjprice/cs13net9/blob/main/docs/ch14-enhanced-blazor.md)。
- en: Leveraging open source Blazor component libraries
  id: totrans-273
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 利用开源Blazor组件库
- en: 'To learn how to use some common Blazor open source components, I have written
    an online-only section for my *Apps and Services with .NET 8* companion book,
    found at the following link: [https://github.com/markjprice/apps-services-net8/blob/main/docs/ch15-blazor-libraries.md](https://github.com/markjprice/apps-services-net8/blob/main/docs/ch15-blazor-libraries.md).'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 为了学习如何使用一些常见的 Blazor 开源组件，我为我的 *Apps and Services with .NET 8* 伴侣书籍编写了一个仅在网络上可用的部分，可在以下链接找到：[https://github.com/markjprice/apps-services-net8/blob/main/docs/ch15-blazor-libraries.md](https://github.com/markjprice/apps-services-net8/blob/main/docs/ch15-blazor-libraries.md)。
- en: Exercise 14.2 – Practice exercises
  id: totrans-275
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 14.2 – 练习
- en: Practice exercises go deeper into the topics for this chapter. First, you will
    create a times table component, and then you will create a country navigation
    component.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 练习深入探讨了本章的主题。首先，你将创建一个乘法表组件，然后你将创建一个国家导航组件。
- en: Creating a times table component
  id: totrans-277
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建乘法表组件
- en: In the `Northwind.Blazor` project, create a routable page component that renders
    a times table, based on a parameter named `Number`, and then test your component
    in two ways.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Northwind.Blazor` 项目中，创建一个可路由的页面组件，该组件根据名为 `Number` 的参数渲染一个乘法表，然后以两种方式测试你的组件。
- en: 'First, do so by adding an instance of your component to the `Home.razor` file,
    as shown in the following markup, to generate the 6 times table with a default
    size of 12 rows, or the 7 times table with a size of 10 rows:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，通过将组件实例添加到 `Home.razor` 文件中，如下所示，以生成默认大小为 12 行的 6 乘法表，或大小为 10 行的 7 乘法表：
- en: '[PRE52]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Second, do so by entering a path in the browser address bar, as shown in the
    following links:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，通过在浏览器地址栏中输入路径来实现，如下所示：
- en: '`https://localhost:5141/timestable/6`'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`https://localhost:5141/timestable/6`'
- en: '[https://localhost:5141/timestable/7/10](https://localhost:5141/timestable/7/10)'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://localhost:5141/timestable/7/10](https://localhost:5141/timestable/7/10)'
- en: Creating a country navigation item
  id: totrans-284
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建国家导航项
- en: In the `Northwind.Blazor` project, in the `NavMenu` component, call the customer’s
    web service to get the list of country names and loop through them, creating a
    menu item for each country.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Northwind.Blazor` 项目中，在 `NavMenu` 组件中，调用客户的 Web 服务以获取国家名称列表，并对它们进行循环，为每个国家创建一个菜单项。
- en: 'Here’s an example:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个例子：
- en: 'In the `Northwind.Blazor` project, in `INorthwindService.cs`, add the following
    code:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Blazor` 项目中，在 `INorthwindService.cs` 文件中，添加以下代码：
- en: '[PRE53]'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'In `NorthwindServiceServerSide.cs`, add the following code:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `NorthwindServiceServerSide.cs` 中添加以下代码：
- en: '[PRE54]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'In `NavMenu.razor`, add the following markup:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `NavMenu.razor` 中添加以下标记：
- en: '[PRE55]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: You cannot use `<NavLink class="nav-link" href="customers/@c">` because Blazor
    does not allow combined text and `@` Razor expressions in components. That is
    why the code above creates a local variable to combine the text to make the country
    URL.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 你不能使用 `<NavLink class="nav-link" href="customers/@c">`，因为 Blazor 不允许在组件中组合文本和
    `@` Razor 表达式。这就是为什么上面的代码创建了一个局部变量来组合文本以生成国家 URL 的原因。
- en: Exercise 14.3 – Test your knowledge
  id: totrans-294
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 14.3 – 测试你的知识
- en: 'Answer the following questions:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 回答以下问题：
- en: What are the four Blazor render modes, and how are they different?
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 四种 Blazor 渲染模式是什么，它们有何不同？
- en: In a Blazor Web App project, compared to an ASP.NET Core MVC project, what extra
    configuration is required?
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个 Blazor Web App 项目中，与 ASP.NET Core MVC 项目相比，需要哪些额外的配置？
- en: Why should you avoid the Blazor Server and Blazor Server Empty project templates?
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么你应该避免使用 Blazor Server 和 Blazor Server Empty 项目模板？
- en: In a Blazor Web App project, what does the `App.razor` file do?
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个 Blazor Web App 项目中，`App.razor` 文件的作用是什么？
- en: What is the main benefit of using the `<NavLink>` component?
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `<NavLink>` 组件的主要好处是什么？
- en: How can you pass a value into a component?
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何将值传递到组件中？
- en: What is the main benefit of using the `<EditForm>` component?
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `<EditForm>` 组件的主要好处是什么？
- en: How can you execute some statements when parameters are set?
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当设置参数时，如何执行一些语句？
- en: How can you execute some statements when a component appears?
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当组件出现时，如何执行一些语句？
- en: One of the benefits of Blazor is being able to implement client-side components
    using C# and .NET instead of JavaScript. Does a Blazor component need any JavaScript?
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Blazor 的一个好处是能够使用 C# 和 .NET 来实现客户端组件，而不是使用 JavaScript。Blazor 组件需要任何 JavaScript
    吗？
- en: Exercise 14.4 – Explore topics
  id: totrans-306
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 14.4 – 探索主题
- en: 'Use the links on the following page to learn more details about the topics
    covered in this chapter:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下页面上的链接了解更多关于本章涵盖主题的详细信息：
- en: '[https://github.com/markjprice/cs13net9/blob/main/docs/book-links.md#chapter-15---building-interactive-web-components-using-blazor](https://github.com/markjprice/cs13net9/blob/main/docs/book-links.md#chapter-15---building-interactive-web-components-using-blazor)'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/cs13net9/blob/main/docs/book-links.md#chapter-15---building-interactive-web-components-using-blazor](https://github.com/markjprice/cs13net9/blob/main/docs/book-links.md#chapter-15---building-interactive-web-components-using-blazor)'
- en: Summary
  id: totrans-309
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, you learned:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了：
- en: About the concepts of Blazor components.
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于Blazor组件的概念。
- en: How to build Blazor components that execute on the server side, using SignalR
    to update the user interface during interactivity.
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何构建在服务器端执行的Blazor组件，使用SignalR在交互过程中更新用户界面。
- en: In the next chapter, you will learn how to build and consume services that use
    HTTP as the communication layer, aka web services. You will also learn how to
    build Blazor components that execute on the client side, using WebAssembly.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何构建和消费使用HTTP作为通信层的服务，即Web服务。你还将学习如何构建在客户端执行的Blazor组件，使用WebAssembly。
