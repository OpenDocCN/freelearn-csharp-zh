- en: Chapter 8. What Is beyond the Cake?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**"From colorful cupcakes to delectable desserts, discover how to tantalize
    the taste buds of consumers!"**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In the first part of the chapter, we will present a series of ideas on how to
    improve your game. Some of these sections have already been anticipated in previous
    chapters. In order to have these sections explained in detail, and by also showing
    the code, we would have required much more time and space, which we unfortunately
    don't have. Therefore, you need to consider these sections as exercises. In fact,
    this is the only chapter in which the *Homework* section is not present (although
    there are some explicit exercises). Please, feel free to expand and implement
    what captures your interest most. After all, nothing can teach you better than
    experience, and trial and error!
  prefs: []
  type: TYPE_NORMAL
- en: Later in the chapter, we will discover what's beyond the cake. In fact, game
    development is not limited to the game itself; there are many things built around
    that you should consider. These things may include, teamwork, playtesting, marketing,
    and localization! Of course, this is not a book about video game marketing, but
    it provides some ground to start to go beyond the mere game!
  prefs: []
  type: TYPE_NORMAL
- en: Finally, I have to say that you should congratulate yourself since you have
    reached this far! In fact, not only have you finished a *Tower Defense* game and
    learnt a lot about Unity, but also you are still here, standing for the last chapter!
    So, to keep yourself motivated, go and grab a slice of cake before continuing
    to read this last chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Enhancing and improving your game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The aim of this section is to give you an idea of the potentiality of your game
    and a direction to work toward. After all, if you have reached this far, you will
    also be able to walk by yourself, and so I won't explain everything in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Improving cupcake towers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here we will focus on how we can improve our cupcake towers by exploring some
    ideas and new directions, such as shooting policies or a special kind of sprinkles.
  prefs: []
  type: TYPE_NORMAL
- en: Shooting policies
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Back in [Chapter 2](part0028.xhtml#aid-QMFO1 "Chapter 2. Baking Cupcake Towers"),
    *Baking Cupcake Towers*, we implemented the first cupcake tower that shot the
    Panda closest to the tower. However, this is not the only policy that you can
    pick. Actually, you can also allow the player to pick one that suits better for
    his/her strategy.
  prefs: []
  type: TYPE_NORMAL
- en: 'These policies may include:'
  prefs: []
  type: TYPE_NORMAL
- en: Shoot the weaker/stronger Panda
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shoot the Panda with less/more health
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shoot the furthest Panda within the range
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shoot the first/last Panda that enters in the range
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Feel free to add more and implement your own.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**How to implement these**:'
  prefs: []
  type: TYPE_NORMAL
- en: In `CupcakeTowerScript`, we loop over all the Pandas (actually colliders, but
    we filter them by tag). We have found and calculated the distance from each one
    of them. Some concepts can be applied with the preceding list. In the case of
    the furthest Panda, this is immediate, because instead of having the `min` variable,
    you can have a `max` variable. The same holds true for weaker/stronger and with
    less/more health Pandas, in which you still need to have a `min` or `max` variable,
    but instead of the distance, you take some properties from the `PandaScript`.
    The case in which we are searching the first or last Panda that has entered the
    range is a bit trickier. In fact, you need to have a data structure for the Pandas
    that enters and exits from the range, and then retrieve the Panda to shoot from
    this structure.
  prefs: []
  type: TYPE_NORMAL
- en: Special sprinkles
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In our game, all of the sprinkles just have a damage and a speed, which can
    be set by the Cupcake towers that shoots them. However, you can have more types
    of sprinkles, and some of them can have special effects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some examples of these effects might be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Freeze**: A probability to slow down the enemy for a limited period of time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Poison**: A probability to poison the Panda; that will decrease its health
    over time (usually within a short period of time).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Explosive**: They don''t damage only the Panda that they hit, but also surrounding
    Pandas.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Critical hit**: A probability that the sprinkle could kill the Panda regardless
    of its remaining life. But for instance, it is not applicable for bosses, which
    in a critical hit just receive double the damage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Feel free to add your own.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**How to implement these**:'
  prefs: []
  type: TYPE_NORMAL
- en: You can create special sprinkle classes that derive from the `ProjectileScript`
    class by using inheritance. This derivative class can contain additional data
    about their effects. In `PandaScript`, you can retrieve in the `OnTriggerEnter2D()`
    function which kind of sprinkle hit the Panda, so as to retrieve its information
    and apply an effect to the Panda.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of the explosive effect, the Panda that was hit should use the `Physics2D.OverlapCircleAll()`
    function (as in `CupcakeTowerScript`) to find nearby Pandas.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, you can animate them so that they have nice and smooth animation.
    Even just a rotation animation could be awesome to see.
  prefs: []
  type: TYPE_NORMAL
- en: Aging and pricing model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Who said that a tower cannot get old? Given that a Cupcake tower is shooting
    at Pandas continually from its creation, it might be subjected to usury. As such,
    its performance may decrease over time and also its value if the player tries
    to sell it.
  prefs: []
  type: TYPE_NORMAL
- en: You can add another trading option to repair a cupcake tower and get it back
    to work as it should.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**How to implement this**:'
  prefs: []
  type: TYPE_NORMAL
- en: You can implement a coroutine within `CupcakeTowerScript` that after a fixed
    amount of time, it ages the tower, by lowering its stats, eventually until it
    stops to work. If you also want to implement a repair functionality, you need
    to store the original values of the tower somewhere in order to restore them after
    the repairing option.
  prefs: []
  type: TYPE_NORMAL
- en: Besides aging, what about the various prices and costs that change over time
    dynamically? Ideally, you would like to create a real pricing model for that (which
    takes a lot of design efforts), but it would be greatly appreciated once it works.
    In fact, it's something to take into consideration when you balance your game.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**How to implement this**:'
  prefs: []
  type: TYPE_NORMAL
- en: Again, you can create a coroutine within `CupcakeTowerScript` that, based on
    the current state of the tower (and potentially of the game), changes its costs.
    As a result, when the trading system fetches these values, they are updated based
    on your model price.
  prefs: []
  type: TYPE_NORMAL
- en: Improving the user interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Also, the user interface of our game can be improved, for instance, a notification
    indicating to the player how many waves he/she has still to defeat. Adding this
    kind of information can be extremely useful. The next step is then to determine,
    where?. This is another design choice that should be taken into account, because
    it might affect the balance we reached when we designed the current UI back in
    [Chapter 3](part0043.xhtml#aid-190861 "Chapter 3. Communicating with the Player
    – the User Interface"), *Communicating with the Player – the User Interface*.
  prefs: []
  type: TYPE_NORMAL
- en: So a good exercise would be to iterate the design of the whole interface of
    the game by taking into account as many things as possible (including showing
    the prices and costs in the trading system; there was an exercise on this in the
    previous chapter).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A really good book on how to design user interfaces is *Designing with the Mind
    in Mind* by Jeff Johnson, but this is just one of many, so be sure to check out
    other more specific books about UI in video games.
  prefs: []
  type: TYPE_NORMAL
- en: Improving levels
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here we will focus on things we can do to improve our levels. As for the cupcake
    towers in the previous section, we will explore new ideas and directions, such
    as including more levels, enemies, and paths to follow.
  prefs: []
  type: TYPE_NORMAL
- en: Multilevel
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Of course, your game must contain more than one level! We have implemented only
    one level, but you should definitely expand your game to more than one.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this stage, you are able to create your own map and level. But here are
    a few hints and considerations that you might find useful:'
  prefs: []
  type: TYPE_NORMAL
- en: Remember that static variables are persistent. Therefore, they need to be reassigned
    with the correct values when you change the scene.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can make some objects persistent between scenes by using the `DontDestroyOnLoad()`
    function (useful when you need to implement music; we will see this in *Audio*
    section).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You have to take designing choices, such as: is the sugar collected by the
    player preserved among levels? And his/her health?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Large maps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can implement very large maps in the game, so large that they cannot be displayed
    all at once on the screen. In this way, we need to implement a way that the user
    can move the camera so as to move the level (or you can also implement that the
    camera is fixed, and all the rest moves).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**How to implement this**:'
  prefs: []
  type: TYPE_NORMAL
- en: Attached to the camera, you can create a script, which detects when the player
    drags the mouse, so as to move the camera in the opposite direction (left drag,
    camera moves right).
  prefs: []
  type: TYPE_NORMAL
- en: Many paths
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Nothing prevents us from creating a map where the path for the Pandas at a certain
    point splits or merges with other paths. We can even have more spawning points,
    or more than one way of access to the cake.
  prefs: []
  type: TYPE_NORMAL
- en: All of this can be taken care of by our waypoint system. In fact, the Pandas
    call the `GetNextWaypoint()` function, which can return any waypoint in the map.
  prefs: []
  type: TYPE_NORMAL
- en: 'As such, you can create many different waypoints that inherit from the parent
    class of waypoint. In the case of a split, you can randomly choose where to send
    the Panda. Here is a fragment of code to give you an example when the path splits
    in two:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: But you can really implement whatever you have in mind as far as you reason
    in terms of waypoints! You can also make `GetNextWaypoint()` accept some parameter,
    such as the Panda itself, and based on the Panda also decide on which waypoint
    to send the Panda! Basically the possibilities are many, and the structure to
    have waypoints as single entities allows us to do this kind of stuff.
  prefs: []
  type: TYPE_NORMAL
- en: Many Pandas
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We cannot limit ourselves to just one type of Panda! We can make green, red,
    and purple Pandas too! Each one of them can have different stats. For instance,
    some are really slow, have a lot of health, and do eat a lot of cake. Others are
    really fast, have low health, and eat just a moderate bite of the player's cake
    when they reach it.
  prefs: []
  type: TYPE_NORMAL
- en: You might even think about giving them different abilities, and again you can
    use the concept of inheritance to implement other Panda classes that derive from
    the `PandaScript`. However, remember to keep in mind that you also need to change
    the spawning system!
  prefs: []
  type: TYPE_NORMAL
- en: Multiphase bosses
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Among the different kinds of Pandas, you can add at the end of the level a
    boss to defeat a giant Panda with a crown on its head:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Multiphase bosses](img/image00608.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The different phases of the boss can be structured with a finite state machine,
    and the different transitions triggered by the amount of its health or how close
    it is to the player's cake. It might also have the possibility to get really angry
    and go off the track to eat a cupcake tower!
  prefs: []
  type: TYPE_NORMAL
- en: A better spawning system
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Since we added so many different kinds of Pandas, we need to restructure our
    spawning system. Ideally you want to find a solution easier for designers to show
    in the **Inspector** an array with the different waves, and for each wave how
    many enemies of one kind and how many enemies of another kind, like this image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A better spawning system](img/image00609.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You may be wondering whether this can really be done in the Unity Inspector.
    The answer is yes; in fact, the Unity Editor can be extended (we will see later
    in this chapter).
  prefs: []
  type: TYPE_NORMAL
- en: Switching difficulty at runtime
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another great way to adapt the game to a large audience might be to switch the
    difficulty of the game at runtime, based on the player's performance. In fact,
    you may want to keep players who seek challenges engaged by increasing the level
    of difficulty if they are progressing relatively easily through the game, or help
    players that are struggling.
  prefs: []
  type: TYPE_NORMAL
- en: There are different ways to do it. The simplest one includes if-chains, based
    on the player's score to increase or decrease the difficulty; whereas the most
    complex ones include adaptive learning algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**How to implement this**:'
  prefs: []
  type: TYPE_NORMAL
- en: Whichever your way is, the first thing to do is to link your entire game to
    a difficulty parameter, maybe within the `Game Manager`. Whenever, this parameter
    is changed, all the parts of the game dependent on it change (refer the *More
    about communication between scripts* section). Then on a separate script, you
    can implement your adaptive algorithm, which, fed with the different states of
    the game, can determine whether to increase or decrease the difficulty.
  prefs: []
  type: TYPE_NORMAL
- en: Training and extending your Unity skills to become a better game developer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will give some ideas on how to improve your Unity skills
    and overall improve any game, including this *Tower Defense* game.
  prefs: []
  type: TYPE_NORMAL
- en: Making things easier for other team members
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you program your scripts in Unity, you need to keep in mind that your
    code will be used by different team members (we will see more about teamwork later
    in the chapter). So keep in mind the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Increase the readability of your code through documentation (we will see later
    in *Teamwork* section) for your programmer's colleagues.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make a nice interface in the Inspector (also by using custom inspectors; see
    later) so that it is easy to use by designers (an example is exposing events,
    which we are going to explore in the next section).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exposing events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are programming a very cool script that needs to interact with other
    elements in the game, you can actually expose your own event in your scripts.
  prefs: []
  type: TYPE_NORMAL
- en: 'In fact, you can add this library to your code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'As a result, you will be able declare and trigger events in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how it appears in the **Inspector**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exposing events](img/image00610.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Cool, isn't' it?
  prefs: []
  type: TYPE_NORMAL
- en: Sprinkles pooling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Instantiating a game object in Unity is a slow operation; as such, every time
    the cupcake tower shoots, a new sprinkle is instantiated and then removed from
    the game.
  prefs: []
  type: TYPE_NORMAL
- en: A much better solution would be to do object pooling, which is an optimization
    technique (we anticipated something about this in [Chapter 2](part0028.xhtml#aid-QMFO1
    "Chapter 2. Baking Cupcake Towers"), *Baking Cupcake Towers*). The concept is
    to instantiate a fixed number of sprinkles at the beginning and keep them off-screen.
    When a cupcake tower shoots a sprinkle, it just takes a sprinkle from this pool and
    shoots that. When the sprinkle is supposed to be destroyed, instead, it is moved
    back into the pool off-screen so that it can be picked again by another tower.
  prefs: []
  type: TYPE_NORMAL
- en: In a scenario where there are many towers shooting, this can dramatically improve
    the performance of your game, especially if you are targeting a mobile platform.
  prefs: []
  type: TYPE_NORMAL
- en: Saving your data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We haven''t discussed saving the data for the game (unfortunately we couldn''t
    cover everything in this book). However, Unity offers a class called `PlayerPrefs`
    (official documentation: [https://docs.unity3d.com/ScriptReference/PlayerPrefs.html](https://docs.unity3d.com/ScriptReference/PlayerPrefs.html)),
    which is great to save some values between sessions of your game, such as the
    score.'
  prefs: []
  type: TYPE_NORMAL
- en: If you need to save many things, you should implement your own solution by saving
    your own file. What format to use for the file is up to you. Unity offers built-in
    support for XML since many versions, and just recently Unity has also included
    built-in support for JSON files.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, you should also consider saving data to the cloud, such as on an online
    database.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Bugs are nasty to fix, but you have a very powerful ally: the console. Don''t
    underestimate the value of this tool. This is because it will save you from many
    situations, and although at the beginning it could seem that what it is logging
    doesn''t make sense, with time you will learn how to interpret those messages
    and correct bugs fast.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Another great way to use the console is by inserting debug logs. In Unity,
    they can be printed with the `Debug` class. Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Placing this line of code in strategic places can help you identify the bug
    and eventually correct it.
  prefs: []
  type: TYPE_NORMAL
- en: Remote Logs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Unity offers the possibility to use your powerful ally (the console) remotely
    if you are targeting another platform. For instance, for Android devices, you
    can read this (which actually allows you to have not only the console by using
    an ADB connection but also a debugger):'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.unity3d.com/Manual/AttachingMonoDevelopDebuggerToAnAndroidDevice.html](https://docs.unity3d.com/Manual/AttachingMonoDevelopDebuggerToAnAndroidDevice.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Otherwise, you can implement your own solution to show console logs or check
    out code written by other people. For instance, you may want to give this free
    asset a look:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.assetstore.unity3d.com/en/#!/content/12294](https://www.assetstore.unity3d.com/en/#!/content/12294)'
  prefs: []
  type: TYPE_NORMAL
- en: Cleaning the release version
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: However, you should remember to remove these lines of code from the final version;
    otherwise, they consume computational power that you could've used in another
    way.
  prefs: []
  type: TYPE_NORMAL
- en: 'A great way to deal with debug statements is to create another class that prints
    a debug message. If you include the `Diagnostics` library, you can define a conditional
    attribute such as the following class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'As a result, you can use the following line of code, instead of the preceding
    one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This line will be compiled only if the `DEBUG_MODE` attribute is defined within
    your game. You can check which attributes are present in your game by navigating
    through **Edit | Project Settings | Player**. In the following screenshot, you
    will find where to define such attributes/symbols highlighted, and as you can
    see, I''ve also added the `DEBUG_MODE` attribute (which you should remove before
    shipping your game):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Cleaning the release version](img/image00611.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For a very nice implementation of this system, you can take a look at the code
    in this link: [https://gist.github.com/kimsama/4123043](https://gist.github.com/kimsama/4123043).'
  prefs: []
  type: TYPE_NORMAL
- en: More about communication between scripts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the last chapter, we saw many ways in which scripts can communicate with
    each other. However, Unity offers many other ways. One of these is messages to
    trigger functions. In fact, you can send a message to a game object asking to
    trigger a certain function if that function exists in any of the scripts attached
    to that game object.
  prefs: []
  type: TYPE_NORMAL
- en: However, this is an expensive (from a computational point of view) method to
    communicate between scripts, and it should be used only when necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, Unity offers more than one messaging system, each one of them with
    their advantages and disadvantages.
  prefs: []
  type: TYPE_NORMAL
- en: 'In any case, these systems can be used to create your custom message system,
    which is a great way to broadcast messages to many scripts when certain events
    happen, for instance, when you need to switch difficulty at runtime and many scripts
    should be aware of the change (refer the *Switching difficulty at runtime* section,
    for more information*)*. You can find many implementations online, such as [http://wiki.unity3d.com/index.php/Advanced_CSharp_Messenger](http://wiki.unity3d.com/index.php/Advanced_CSharp_Messenger),
    but I strongly advise you to create your own, since you will definitely learn
    more in this way. For instance, you can follow this tutorial: [https://unity3d.com/learn/tutorials/topics/scripting/events-creating-simple-messaging-system](https://unity3d.com/learn/tutorials/topics/scripting/events-creating-simple-messaging-system).'
  prefs: []
  type: TYPE_NORMAL
- en: Documenting the code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you work in a team, you need to properly comment all of the code you write.
    There are tools to help you automatically generate documentation, but you need
    to take the efforts to comment everything!
  prefs: []
  type: TYPE_NORMAL
- en: 'It may be worthwhile to also use the summary tag, which I didn''t use in creating
    the tower defense project in order to increase the readability of the code for
    this book: [https://msdn.microsoft.com/library/2d6dt3kf.aspx](https://msdn.microsoft.com/library/2d6dt3kf.aspx).'
  prefs: []
  type: TYPE_NORMAL
- en: 'In any case, when you write your code, you should always maintain a balance
    between performance and readability, which often are in contrast. If the documentation
    is rich and full enough, even the most complicated performance optimization that
    makes code unreadable can be understood. Keep in mind: maintaining a level of
    elegance in your code should be your guiding principle when you writing it.'
  prefs: []
  type: TYPE_NORMAL
- en: Protecting your game
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you have your game, you may want to protect it from piracy and/or game
    hacks. About this, there is an extensive literature, as well as different opinions
    about it. In fact, one of the major critique to these systems is that they make
    hackers' lives more difficult, as well as legitimate players' ones; the game will
    be eventually cracked, and you will end up with upset players. On the other hand,
    the opposite school of thought says that the major amount of revenue that is generated
    from a game happens in the first month from the release date (we are talking about
    non-online games) and therefore a protection system that lasts on month has done
    its job.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'One of the most popular (among both players and hackers) anti-piracy system
    used for games is Denuvo ([www.denuvo.com](http://www.denuvo.com)). Although Devuno
    has received many critiques, it has kept many games from by being immediately
    cracked and is still giving a hard time for cracking others. You can find a list
    of games protected with this system (whether they have been cracked yet or not)
    here on Wikipedia: [https://en.wikipedia.org/wiki/Denuvo](https://en.wikipedia.org/wiki/Denuvo).'
  prefs: []
  type: TYPE_NORMAL
- en: For the most curios of you, Denuvo is an anti-tamper and not a **Digital Rights
    Management** (**DRM**) system (which binds a legitimate copy of the game to an
    user). An anti-tamper makes harder to reverse engineering a DRM system in order
    to by-pass it.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, in case you decide to include some kind of protection for your game,
    but you don''t have time to develop your own systems, you can buy inexpensive
    and useful security tools from the Asset Store, such as these ones: *Anti-Cheat
    Toolkit* ([www.assetstore.unity3d.com/en/#!/content/10395](http://www.assetstore.unity3d.com/en/#!/content/10395))
    or *PlayerPrefs Elite* ([www.assetstore.unity3d.com/en/#!/content/18920](http://www.assetstore.unity3d.com/en/#!/content/18920)).'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more advanced protection systems (such as the aforementioned Denuvo), of
    course the price increases, making it hard for Indie game developers to afford
    one of them. In conclusion, before you spend part of your budget on a protection
    system, think carefully if it is necessary for your game.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here is a short, fun, and easy historical overview of DRM systems: [https://www.youtube.com/watch?v=HjEbpMgiL7U](https://www.youtube.com/watch?v=HjEbpMgiL7U).'
  prefs: []
  type: TYPE_NORMAL
- en: Building for more than one platform
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you consider shipping your game on different platforms, you should keep
    in mind the different platforms you are going to target. Do they have touch input?
    Do they support controllers? Based on this, you need to modify the code in your
    application so that it can work in more than one platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unity offers the possibility to insert some assembly directives to compile
    the code in a certain way. For instance, you may want to compile a small bit of
    the code in a certain way when the game is built for Android rather than for Windows.
    Here is the link to the documentation: [https://docs.unity3d.com/Manual/PlatformDependentCompilation.html](https://docs.unity3d.com/Manual/PlatformDependentCompilation.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For fast prototyping on devices, you should consider some emulators (we will see
    later in the chapter). However, Unity provides for Android devices an application
    called Unity Remote (you can find it here on the Play Store: [https://play.google.com/store/apps/details?id=com.unity3d.genericremote](https://play.google.com/store/apps/details?id=com.unity3d.genericremote)),
    which allows you to test your game directly with your device from the Unity Editor
    through an USB connection.'
  prefs: []
  type: TYPE_NORMAL
- en: Input/output devices
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'What will the player use to play your game and how will it be used during gameplay?
    From consoles to peripherals, there is a large spectrum of different hardware
    devices that can be utilized by your game. To get you started, here is a basic
    list of input/output devices that you should keep in mind when you are developing
    your idea and choice of platform:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Xbox (360, One):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kinect
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Controller (wired, wireless)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Various peripherals (microphone, DJ control station, guitar, and so on)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Playstation (1, 2, 3, 4):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Move controllers
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: EyeToy
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Controllers (wired, wireless)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Various peripherals (microphone, DJ control station, guitar, and so on)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Wii:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controller/Nunchuck
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Motion sensor
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Balance board
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Various peripherals and add on (microphone, DJ control station, guitar, steering
    wheel, sporting equipment, and so on)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Mac/PC:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operating system (OS X, Windows, Linux)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Graphics card
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Video card
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Motherboard
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Sound card
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Network card
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Processor
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Storage space
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Mouse
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Keyboard
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Screen
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Joystick
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Controller
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Various other peripherals (steering wheel)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Portable devices (Phone, Tablet):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Android
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Apple
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Audio devices:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Speakers
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Headsets
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Required network connection:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: High-speed Internet
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: LAN connectivity
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Mobile network
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Wi-Fi
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Bluetooth
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Virtual reality (VR) headsets (such as Oculus Rift or HTC Vive):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Head tracking
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Touch controllers
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Oculus remote (only for Oculus Rift)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Camera (only for HTC Vive)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Leap motion:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hand and gesture tracking
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Brain-scanning headsets (such as Emotiv headset):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Electroencephalography (EEG)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Virtual reality in Unity
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Recent versions of Unity support virtual reality devices (such as Oculus Rift,
    HTC Vive, or Samsung Gear).
  prefs: []
  type: TYPE_NORMAL
- en: 'To start developing for virtual reality in Unity, you should first download
    the appropriate SDK and install it. Then, from the top menu bar select **Edit
    | Project Settings | Player**. Under **Other Settings**, there is the **Virtual
    Reality Supported** option. Once this is checked, you can check which SDKs are
    ready to be used in the menu below the option, as shown in in the following screenshot
    (in this example, there is the Oculus SDK):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Virtual reality in Unity](img/image00612.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Balancing the game
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Don't forget to balance the game. This is very important and can determine the
    success or not of your game. In order to proper balance your game, you need to
    do a lot of playtesting (we will see more about this later).
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that we are playing a co-op game and I have a magical wand, special
    powers, and an invincibility. You, on the other hand have a flashlight. This clearly
    isn't balanced unless the flashlight was a compact version of all the stuff I
    had, which unluckily for you it's not. Now, this isn't just an issue when it comes
    to two player or even multiplayer games but also single player games where the
    AI are highly powered and drain all of your resources just to defeat them, if
    you can at all. The same goes for having limited opportunities to get power ups
    while other players are clearly not having any issues.
  prefs: []
  type: TYPE_NORMAL
- en: Balancing games is important for many reasons because it provides an even playing
    field and gives everyone the opportunity to win, lose, and progress. With every
    iteration of your game, and every subsequent update (especially if you change
    something significant), make sure that your game is balanced. For single and co-op
    games, this will be something that you can iron out with playtesting. For large-scale
    MMOs, you are able to playtest but there are likely to be unbalanced things that
    will come to light the longer people play, explore the world, develop and upgrade
    their character, and progress through the world.
  prefs: []
  type: TYPE_NORMAL
- en: One of the many ways that you can approach the balance of games is via a cost
    analysis approach. In this approach, you can begin by adding, removing, and substituting
    different features in your game. For example, instead of adding a new character,
    make an existing one more powerful, or replace it with a more powerful version
    of itself. So, instead of a *Special Wizard*, substitute it with an *Epic Wizard*.
    Alternatively, you could remove the *Special Wizard* altogether, or add another
    type, such as an *Elemental Wizard*. In each case, their abilities will change
    (or be removed) and as a result it will affect the overall dynamics of play, including
    how other characters will be able to battle against it. Some real-life examples
    of this are in games such as *Clash of Clans* and *Clash Royale*, where adjustments
    are made on a regular basis in order to balance gameplay.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For further reading, check out this link: [https://gamedesignconcepts.wordpress.com/2009/08/20/level-16-game-balance](https://gamedesignconcepts.wordpress.com/2009/08/20/level-16-game-balance).'
  prefs: []
  type: TYPE_NORMAL
- en: Extending the Unity editor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Unity Editor can actually be extended. In fact, some scripts can use the
    Unity Editor library to get access to all the editor related functions. It can
    be imported by adding the following line of code at the beginning of such scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This is a very powerful tool since you can implement custom functionalities,
    or provide easy interfaces to your scripts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the link to the official documentation: [https://docs.unity3d.com/Manual/ExtendingTheEditor.html](https://docs.unity3d.com/Manual/ExtendingTheEditor.html).'
  prefs: []
  type: TYPE_NORMAL
- en: 'However, since this is such an extensive topic, I advise you to read a tutorial
    from some blog post or buy a specific book, such as, *Extending Unity with Editor
    Scripting,* byAngelo Tadres, Packt Publishing, which you can find here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/game-development/extending-unity-editor-scripting](https://www.packtpub.com/game-development/extending-unity-editor-scripting).'
  prefs: []
  type: TYPE_NORMAL
- en: Multiplayer and networking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Wouldn't it be fun if you and your friend could build Cupcake towers together
    and face hordes of waves of sweet-toothed Pandas in cooperation? Wouldn't it be
    even awesome if one of you two could control the pandas and the other one the
    cupcake towers? What if you could connect many players together across the world?
    All these scenarios are possible by transforming your game into a multiplayer
    game, which could be potentially played by many different players over a network.
  prefs: []
  type: TYPE_NORMAL
- en: Unity offers many built-in functions to for multiplayer games, but they are
    not as easy as you would expect. But if you have money, there are many third-party
    plugins to make managing multiplayer games easier. The asset store of Unity is
    full of them!
  prefs: []
  type: TYPE_NORMAL
- en: In either case, programming a multiplayer game is not easy, because there are
    many different parts (such as the server, the client, security protocols, and
    so on) should work perfectly together, and that is not simple at all. As such,
    multiplayer and networking is one of the most difficult topics to face in game
    development (although possible, otherwise you wouldn't see so many online games
    around).
  prefs: []
  type: TYPE_NORMAL
- en: 'The best way to start to understand the principle of multiplayer programming
    is to read a book about it and (if you''re using the built-in functions of Unity)
    read the official documentation about it, which can be found here: [https://docs.unity3d.com/Manual/UNet.html](https://docs.unity3d.com/Manual/UNet.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Practice makes perfect
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Nobody is born with knowledge of game programming or of Unity. You need to gain
    it with hard work, and regardless of your level of experience, there is always
    something new to learn (as we mentioned back in [Chapter 1](part0016.xhtml#aid-F8901
    "Chapter 1. A Flat World in Unity"), *A Flat World in Unity*).
  prefs: []
  type: TYPE_NORMAL
- en: In order to become an expert game developer, you need to keep practicing (as
    everything in life), because there is something to learn around any corner. Challenge
    yourself, work in projects, and give yourself homework. In fact, in this book,
    I have provided you with some homework, but often you need to be your own teacher,
    and force yourself to do homework to improve your skills.
  prefs: []
  type: TYPE_NORMAL
- en: 'In doing this, don''t forget to learn from those who have preceded us, and
    have found some methods and techniques, which work great in most cases. In fact,
    you should learn and develop your own best practices. In the case of Unity, you
    can start by visiting this link: [https://docs.unity3d.com/Manual/BestPracticeGuides.html](https://docs.unity3d.com/Manual/BestPracticeGuides.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Improving the atmosphere of the game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Have you ever played a game or watched a movie and felt like you were there,
    you felt entranced, immersed, and completely a part of the world… the moment?
    This is all relates to the atmosphere. Creating the right mood requires a number
    of different things, it's not just about how it looks but what it sounds like;
    it also has a way of communicating something to the player. Unfortunately, we
    cannot yet tap into touch (although there is a lot of research going on haptic
    interfaces), taste, or smell (with the exception of the Nosulus, a prototype device
    created by Ubisoft; it can be found at [http://nosulusrift.ubisoft.com](http://nosulusrift.ubisoft.com)).
    Therefore, how they look and sound is imperative to the atmosphere!
  prefs: []
  type: TYPE_NORMAL
- en: Visuals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Games don't necessarily have to look amazing to be immersive, but they need
    to provide a visual environment that makes sense. Visuals can range from skyboxes,
    aesthetic style of objects and environment.
  prefs: []
  type: TYPE_NORMAL
- en: Color schemes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Color represents mood, and anyone who has ever taken an art class learns early
    on that colors help to express emotions to the viewer. Although there is not a
    unique interpretation of colors, you could stick with a convention throughout
    all of your game.
  prefs: []
  type: TYPE_NORMAL
- en: 'A great tool for developing color schemes (as we covered back in [Chapter 3](part0043.xhtml#aid-190861
    "Chapter 3. Communicating with the Player – the User Interface"), *Communicating
    with the Player – the User Interface*) is with Adobe Color CC, which you can find
    at [https://color.adobe.com](https://color.adobe.com):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Color schemes](img/image00613.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Did you know that the concept of colors relating to our emotions originated
    from a man named Robert Plutchik*,* who created the first color wheel of emotions
    in 1980?
  prefs: []
  type: TYPE_NORMAL
- en: Homework
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Look at some games. Do they have a particular color dominant over others? If
    so, what would happen if you change the color to something that is opposite? For
    example, if it's mostly blues, what would happen if you changed it to reds or
    yellows? Make a list of what objects are affected by the dominant color. And why
    or why not? If they are/aren't, how would it affect the atmosphere if you changed
    them?
  prefs: []
  type: TYPE_NORMAL
- en: Lighting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you walk into a room full of light, you might feel fresh, energized, and
    positive. Imagine, on the other hand, walking into a dark room without any light
    to gauge what is inside, or how big it is; it may feel a bit daunting. This may
    be the same room, but two different lighting conditions provide two very different
    atmospheres. Pairing it with other sensory cues such as sounds can make it all
    the more terrifying or uplifting. Of course, these are your stereotypic environments;
    a well-lit room doesn't always mean that nothing nasty will jump out just like
    a dark room means that it's full of enemies. These are some things to consider,
    especially for 3D environments when it comes to understanding how to communicate
    a sense of danger or peace.
  prefs: []
  type: TYPE_NORMAL
- en: Lights in Unity
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Unity implements different kinds of lights, which can be placed within our scenes.
    We didn't cover them, because they are strongly related to 3D games, although
    you may use them also for UIs (and therefore also in 2D games).
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned in the preceding section, you need to consider lights in your scene
    as an art expression so as to create an atmosphere. Surprisingly, good-looking
    scenes don't have realistic lights at all. As many things in game development,
    there is a trade off with performances, since usually lights are expensive, especially
    if computed in real time. In fact, one of the most used techniques is to "*bake*"
    the lights, which means to pre-calculate them. Of course, this method has many
    limitations, and that's why there are intermediate solutions as well. A good level
    designer should be able to place the right kind and number of lights in the scene
    to enhance the look without overloading the CPU and GPU, leading to a drop of
    the frame rate.
  prefs: []
  type: TYPE_NORMAL
- en: '![Lights in Unity](img/image00614.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Image by Divine Unity Shrine, Shadowood Productions, Example of use of lights
    in Unity
  prefs: []
  type: TYPE_NORMAL
- en: 'We won''t go any further in the details, but you can read more about them at
    the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://unity3d.com/learn/tutorials/topics/graphics/lighting-overview](https://unity3d.com/learn/tutorials/topics/graphics/lighting-overview)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.unity3d.com/Manual/LightingOverview.html](https://docs.unity3d.com/Manual/LightingOverview.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://unity3d.com/learn/tutorials/topics/graphics/introduction-lighting-and-rendering](https://unity3d.com/learn/tutorials/topics/graphics/introduction-lighting-and-rendering)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Homework
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Think of a particular part of a game that you might like. It can be inside or
    outside, but it has to be a single location. Now, try and find similar locations
    within other games. For example, let's choose a laboratory facility; compare one
    found in a game such as *Portal* to one from *Half-Life*. Keep going until you
    found at least five other examples and then pay attention to the lighting in each
    scene. Are they similar or dissimilar? Do they convey the same meaning or something
    different? For games that you haven't played before, watch online play through
    to get a sense of the environment.
  prefs: []
  type: TYPE_NORMAL
- en: Environment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Is your game set miles below earth in a secluded dungeon, a faraway castle,
    enchanted forest, or perhaps inside a foreign utopian world with mountains and
    glorious landscapes? How you convey your environment can add to your atmosphere.
    For example, creating a desert may not necessarily be a large plane of sand. There
    is vegetation (even if very few), animals, and in some cases wreckage. However,
    a desert on Mars is going to be very different from a desert in Egypt, or one
    in Australia. The same goes for mountains, waterfalls, hills, frozen lands, forests,
    and beneath the Earth's surface
  prefs: []
  type: TYPE_NORMAL
- en: '![Environment](img/image00615.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Image by Open-World demo collection of Unreal Engine: An example of a detailed
    forest'
  prefs: []
  type: TYPE_NORMAL
- en: '![Environment](img/image00616.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Image by Alto's Adventure ([www.altosadventure.com](http://www.altosadventure.com)): A
    minimalist environment, but it provides a great feel of the atmosphere that surrounds
    the scene
  prefs: []
  type: TYPE_NORMAL
- en: Homework
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Similar to what we did with lighting, we can do with the environment. For example,
    look at many different types of forests. Are they dense or sparse? Do they have
    tracks to guide the player or not? Are they occupied by wildlife or are they empty?
    Pay attention to how they are structured and consider why they are like this.
    It will give you some ideas how to go about designing your own environments, what
    works or doesn't work, and it maybe even some inspiration to try alternative approaches
    to the same environment.
  prefs: []
  type: TYPE_NORMAL
- en: Special effects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A spell isn't much of anything without some magical effects behind it, just
    like a magician would look a little crazy if nothing happened when he or she moved
    their hands or wand. Special effects add that something special to action. It
    also provides the player with a bit of feedback when they do something. For example,
    when they fire a deadly spell, you will expect at least something pretty grand
    will happen. Even subtle effects, such as when you heal yourself, can go a long
    way in creating a more immersive experience.
  prefs: []
  type: TYPE_NORMAL
- en: Particle systems
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Unity offers a great built-in particle system that can be used to create atmospheres
    in the scene. Here is a list of different types of particle effects that you could
    implement into you game:'
  prefs: []
  type: TYPE_NORMAL
- en: Fireworks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Snow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fireflies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Embers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dust
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bubbles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Smoke
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Leaves
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fireworks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Of course, these are just a few suggestions, and in reality, anything can become
    a particle effect. Who knows, maybe Pandas could be made like that, given the
    right context.
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that particle systems aren't usually computationally cheap additions
    to your game, but they are for sure a way to enhance the visual aspect of your
    game.
  prefs: []
  type: TYPE_NORMAL
- en: '![Particle systems](img/image00617.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Image by the Fireworks Showcase Video for Unity 5.5: Fireworks made in Unity
    by using particle systems
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It''s worthwhile to mention that from Unity 5.5 a new light module has been
    implemented. As a result, the particles of a particle system can now cast light,
    with the opportunity to create amazing effects. As such, I suggest you to watch
    these three videos taken from the showcase of the beta version of Unity 5.5 illustrating
    the new features of particle systems:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fireworks: [https://www.youtube.com/watch?v=xAzmNo2fxWA](https://www.youtube.com/watch?v=xAzmNo2fxWA)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Embers: [https://www.youtube.com/watch?v=copE2b_XfTc](https://www.youtube.com/watch?v=copE2b_XfTc)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Trails: [https://www.youtube.com/watch?v=rQpgaP-r_lc](https://www.youtube.com/watch?v=rQpgaP-r_lc)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here you can find the official documentation about particle systems: [https://docs.unity3d.com/Manual/ParticleSystems.html](https://docs.unity3d.com/Manual/ParticleSystems.html).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Whereas, here is an introductory tutorial that can help you to get started
    (although it is for a previous version of Unity, many of the concepts apply to
    the new version of Unity as well): [https://unity3d.com/learn/tutorials/topics/graphics/particle-system](https://unity3d.com/learn/tutorials/topics/graphics/particle-system).'
  prefs: []
  type: TYPE_NORMAL
- en: Post processing
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Post processing effects can greatly enhance the visual look of your game at
    a relatively cheap cost (from a computational point of view). Here is an example
    taken from the official documentation of Unity; it shows the difference between
    a scene without post processing and the same with it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Post processing](img/image00618.jpeg)![Post processing](img/image00619.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Images by the official documentation of Unity
  prefs: []
  type: TYPE_NORMAL
- en: 'You can even program your own post processing effect. You could start with
    this link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.unity3d.com/Manual/WritingImageEffects.html](https://docs.unity3d.com/Manual/WritingImageEffects.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, you should definitely consider adding some post processing effect
    to your game, because they can really help you in giving the look you have in
    mind. In any case, the full documentation for post processing in Unity can be
    found here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.unity3d.com/Manual/comp-ImageEffects.html](https://docs.unity3d.com/Manual/comp-ImageEffects.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Other visual effects
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Unity offers other rendering effects that can be placed in the 3D world. These
    include Line and Trail renders to draw lines or trails. Imaging a shooting star
    in the most romantic scene of your game. It needs to have a trail or else it's
    just a point moving in the sky. Another example could be in an RTS with characters
    leaving a small trail, which increases the visual looking of your game although
    it is not realistic.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It's worthwhile to point out that these visual effects have been largely improved
    in Unity 5.5, so if you are working with previous versions, you might find them
    really different.
  prefs: []
  type: TYPE_NORMAL
- en: '![Other visual effects](img/image00620.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Image by the official documentation of Unity: An example of the Trail Render
    component of Unity in action
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some of these effects are really expensive from a computational point of view.
    By knowing how to program in a **Graphic Library** (**GL**), it's possible to
    re-implement simpler versions (so without all of the features they have) of these
    effects within Unity in such a way they are highly optimized to reduce the performance
    overhead.
  prefs: []
  type: TYPE_NORMAL
- en: 'Other effects include Halos, Lens flares, and Projectors. Halos can be used
    to highlight objects in your scene, or just to simulate some really fine dust.
    Lens flares can simulate the effect of the sun on a camera. Projectors can be
    used to create relatively low-cost shadows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Other visual effects](img/image00621.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Image by Battlefield 3 (DICE, 2011): An example of flare lenses used in video
    games
  prefs: []
  type: TYPE_NORMAL
- en: Audio
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Audio can move us, bring us to tears, motivate, excite, and sometimes terrify
    us. In some cases, it can help to place us *in* an environment. The power of music
    is something that can really add a nice special touch if done right. At the same
    time as it being incredibly amazing, it can be incredibly annoying. The pace,
    intensity, and even instrument can all create a different mood.
  prefs: []
  type: TYPE_NORMAL
- en: Music
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Music can serve a specific purpose such as being used as background music. It
    can provide a level of ambience and drama to an experience that visuals alone
    cannot provide. Depending on the part of the game, the music is likely to change.
    We can think of such an example in real life, the music we would use to meditate
    is likely to be quite different from the music when we are lifting weights in
    a gym.
  prefs: []
  type: TYPE_NORMAL
- en: 'In saying that, background music tends to remain consistent and continues to
    play throughout an entire level. Whereas, gameplay tends to be dynamic and music
    can also reflect this. For example, a beautifully created piece of background
    music with strings playing softly; as soon as a dragon appears, the mood is likely
    to change and so is the music. Some more examples may include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Opening/closing credits, sequences, and cut-scenes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A character encountering combat.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Being chased.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When a character enters a dangerous area. An example of this is in *Assassin's
    Creed* when a player enters a restricted area.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When using vehicles.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: During dialogue sequences.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ambient sounds:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Traffic
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Talking
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Machinery
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Gunfire/Artillery
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Water (waterfalls, river, creek, and so on)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Wind
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Room noises (air conditioner, computer's humming, typing, closing/opening doors,
    cabinets, drawers, telephone ringing, and so on)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Animals/Insects (crickets, frogs, owls, birds, and so on)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Sound effects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sound taps into one of our five senses and it can be an important component
    of a gaming experience. The use of sound can range from setting the atmosphere,
    indicating feedback, acknowledging an action, providing sound effects to various
    items (such as weapons), to indicating an event has occurred.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using sounds are not just limited to background music. When we do things, anything,
    we make a noise, and gameplay is no exception. When a character knocks something
    over, it should make a noise, when they walk, open a door, draw a weapon, they
    should all make some sort of sound. Some sound effects that you may use in your
    game include:'
  prefs: []
  type: TYPE_NORMAL
- en: Spells being cast
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ricochet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bullets whizzing by
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Splashing in water
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cable/robes breaking when cut
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Doors creaking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Glass shattering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Footsteps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flying down a zip line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eliciting emotions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In some instances, you''d want to elicit a certain emotion from a player such
    as when a character dies or when the player is triumphant. Just like movies, when
    we want to increase the emotion with a particular aspect of the game, albeit during
    a cut-scene or gameplay, music can do this. Think of some moments during gameplay
    when you have been moved in both a negative and positive way. Here is a list of
    some moments when you may want to elicit the player''s emotion:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction of a new character(s)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Death/Birth of a character
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sadness/Happiness
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anger/Happiness
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Victory/Defeat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dramatic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creepy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Romantic/Envy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tension
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are just some of the many emotions that your game can evoke.
  prefs: []
  type: TYPE_NORMAL
- en: Homework
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A great exercise to do before you start to decide what sounds to add into your
    own game is to play a range of different games and make note of what sounds they
    use. Do this for background music and sound effects. You might be surprised about
    the amount of different sounds that each game has. Also take note of how the music
    in levels transition, do the sounds effects also change?
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that you don't just have to play games; watching movies and even
    TV series can also be useful to see the types of noises that are made, when, and
    if they add any kind of element (scare, represents happiness) within the scene/movie.
  prefs: []
  type: TYPE_NORMAL
- en: Audio in Unity
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Audio is another extensive topic in Unity, which from Unity 5.x has greatly
    improved. Unfortunately, we didn't have enough time to have dedicated a whole
    chapter on how to handle audio in Unity. However, the foundational concept is
    that there is a component that works as listeners. There should be only one (active)
    listener per each scene, otherwise Unity gives you a warning about, and it is
    good practice to keep in that way. Then, there is another component that works
    as an audio source, which can produce a sound or play some music. Moreover, audio
    sources can be set to act in 3D, which means that they can be placed in the environment
    so as to have a spatial sound (the closer the player from the audio source, the
    higher the volume of the audio source will be).
  prefs: []
  type: TYPE_NORMAL
- en: 'In the official website, there is a series of video tutorials on how to use
    audio in Unity, which can be found here: [https://unity3d.com/learn/tutorials/topics/audio](https://unity3d.com/learn/tutorials/topics/audio)'
  prefs: []
  type: TYPE_NORMAL
- en: External audio systems
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In case you are aiming high and the built-in audio system of Unity is not enough
    for your game, there are pieces of third-party software you can integrate into
    Unity.
  prefs: []
  type: TYPE_NORMAL
- en: One of the most used is called FMOD ([www.fmod.org](http://www.fmod.org)), which
    is a complete solution to integrate spatial sounds in your game.
  prefs: []
  type: TYPE_NORMAL
- en: Another similar tool, which is less used due to its high price but offers many
    features, is Wwise ([https://www.audiokinetic.com/products/wwise](https://www.audiokinetic.com/products/wwise)).
    You probably have seen its logo in some games you play.
  prefs: []
  type: TYPE_NORMAL
- en: Both FMOD and Wwise are really powerful tools, but in order to appreciate their
    features, you should see them in action. There are many videos available online,
    and I encourage you to check them out.
  prefs: []
  type: TYPE_NORMAL
- en: Teamwork
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: They say it takes a village to raise a child, well, it can take a team to build
    a game, and a team that works well together can achieve incredible things. However,
    choosing the right people, dealing with conflict and working on a daily basis
    together isn't always straightforward. Next, we will look at a few ideas about
    the roles in a game development team, considerations that need to be made, and
    a few other things that will get you all on your way.
  prefs: []
  type: TYPE_NORMAL
- en: It is not just about you, it is about working in a team
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A good team is like any good relationship; you need to have communication, consideration,
    and understanding, and most importantly you must acknowledge the other person.
    There is no *I* in a team, but too often people get caught up in the *me*. In
    such cases, neglecting others within the team can be for many reasons, from ego,
    skillset (or lack of), impatience, financial gain and so on. Of course, this is
    not to say that such traits are negative, but in the wrong amount (just like anything),
    they are a sure way to end up in a disaster.
  prefs: []
  type: TYPE_NORMAL
- en: Another issue when it comes to teams is the amount of time that you have known
    the others. This is not bad thing, nor can it always be a good one. The idea,
    especially if you're going into business with each other is to keep it professional.
    You have a product that you need to deliver, deadlines that need to be met, and
    potentially stakeholders who are involved in your project. You must be able to
    separate business and friendship. The dynamics will change, and you need to avoid
    making it personal.
  prefs: []
  type: TYPE_NORMAL
- en: 'A game development team will consist of different roles, and how big your team
    is determines how those roles are carried out. In a perfect world, you will have
    a team member for each role, but in most cases you will have to double up on responsibilities. In
    saying this, a typical team is likely to consist of the following members:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The project manager**: Who sets milestones for the team and makes sure that
    they are achieved. But it is not just time management; the project manager should
    also encourage and motivate the team and members who fall behind deadlines. They
    help to boost team morale and keep the project running smoothly and, more importantly,
    on time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The producer**: Who will be the person who deals with the business side of
    the things. They are responsible for maintaining budgets, schedules, and marketing
    strategies. They differ from the project manager in the sense that they are more
    about logistics and the technical details than managing the group''s functioning.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The social media strategist**: Who is someone who is dedicated to all social
    media and marketing aspects of your game. Typically, the producer is also responsible
    for this, but in some cases, depending on the extent of social media that you
    will want, having someone dedicated to promoting you game can help free up time
    for budgets and the financial aspect of your group''s producer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The designer**: Who will be the one who ties all the elements together to
    create the overall experience. They ensure that what is created complements the
    story; they decide how it is revealed to the player and ultimately how the player
    interacts with its flow.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The artist**: Who is responsible for creating the look of the game, from
    concept art of characters, assets, and levels all the way to their models and
    textures. It is ideal to have more than one artist if you are able to, especially
    if your game is large. Art takes time, especially if you want your game to be
    aesthetically magical.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The programmer**: Who is like the arm to the hand of the project; without
    them, you are likely to struggle to make your wonderful ideas come to life. In
    saying all of this, if you are unlucky to not have a Programmer in your team (or
    not enough for all the functionalities that you may want to develop), many game
    engines offer visual scripting that allows you to link commands together to create
    actions. A great example of this is Blueprints in Unreal Engine ([www.unrealengine.com](http://www.unrealengine.com)),
    as shown here:![It is not just about you, it is about working in a team](img/image00622.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Image by Unreal Engine, Blueprints visual scripting ([https://docs.unrealengine.com/latest/INT/Engine/Blueprints](https://docs.unrealengine.com/latest/INT/Engine/Blueprints))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**The sound designer/composer**: Who makes your game sound great. The sound
    designer ensures that every action has some sort of audio feedback. Audio in a
    game includes sound effects and background music. Sound designers contribute to
    the atmosphere by making it sound alive. Even the subtlest effects, such as when
    a player nears some dark and dangerous room, can arouse all kinds of emotions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The quality assurance (QA) tester**: Who is the person (or people) dedicated
    to making sure that the game works. This can range from friends, family and professional
    gamers and QA testers. Ideally, you will want people who are not involved in the
    creation of your project to be QA testers, because even though you will be testing
    it yourself, it is easy to look past aspects of your game that may impact the
    overall gameplay experience.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The writer**: Whois usually responsible developing the story of the game.
    Elements of the story can include the overall plot, the characters, setting, and
    other narrative elements such as dialogue and narrative pathways such as alternate
    endings. In essence, the writer is responsible for ensuring that the story not
    only entices and captivates leaving them wanting for more but also to set the
    atmosphere and enhance the overall game experiences. In addition, the writer must
    also ensure that the story makes sense, follows a logical progression and is explanative.
    Lastly, one thing to keep in mind is that writing for games requires a different
    approach than movies or reading text because it is interactive.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sharing a common vision
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When you''re working in a team, it is important to have a common goal and shared
    interest. While it goes without saying, morale is key when it comes to working
    on team projects. There will be difficult moments in the project, late nights,
    and points where stress levels will rise, but having the support of others can
    improve the way that everyone is able to cope through it all. There will be moments
    when you are busy, not able to, or just overloaded with work that inhibits your
    ability to get it done. Of course, if you''ve been lazy, that is an entirely different
    situation, but you should always communicate any difficulty with the other team
    members, and as soon as possible. To really illustrate this point, consider the
    poetic notion of the Butterfly Effect: *Does the flap of a butterfly''s wings
    in Brazil set off a tornado in Texas?* Small (unresolved) problems in the beginning
    become bigger problems later.'
  prefs: []
  type: TYPE_NORMAL
- en: Managing expectations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Having a common vision is not always the same as having the same expectations.
    For example, you and your team might want to make a high selling and popular application,
    but the amount of time and effort that will be given from each team member can
    vary. Therefore, it is important to establish expectations too, early on, for
    a number of reasons.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to expectations, be sure to take the time to plan the development
    of your game properly. You don't want to over-plan what you intend to do, if you
    have little time or your game contains necessary components. Along the same lines,
    the same can be said for under-planning, where you decide on the design of the
    game but not allow yourself enough time to complete it in. You will get to a point
    where your team will begin to cut back on sections, in order to meet the goals.
    In the end, you might end up with something equivalent to a demo version of your
    game without the exciting full version to keep players interested in your work,
    or worse, you won't have a completed game at all.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, never assume anything. Assumptions are likely to result in disasters
    later on. For example, you look at the wonderfully planned Gantt chart of things
    to do, and at this stage your artists should be modeling assets, but in reality
    they aren't; or at least one of them isn't because they thought that the other
    artist was. Having a regular meetings and a good project manager and producer
    will likely avoid this situation from occurring, but always keep up to date with
    what others are up to.
  prefs: []
  type: TYPE_NORMAL
- en: Collaboration and communication are key
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The worst thing that can happen within a group is to stop talking. Maybe things
    have hit a lull and people become busy, maybe something happened in a member's
    personal life, in any case, things happen that may draw our attention elsewhere;
    it's life after all. However, this is no reason for teams to stop talking. If
    communication breaks down, find out why and do something about it early on. Perhaps
    the issue is something small and can be dealt with easily. In other cases, it
    can be damaging to a project's success, such as work not being completed because
    a team member is too embarrassed to admit that they are unable to complete a task
    or is simply too busy, but fails to notify anyone until the last minute. One way
    to avoid such problems is to make it easy to communicate within the group and
    to communicate often*.*
  prefs: []
  type: TYPE_NORMAL
- en: Ways to communicate
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'While it is obvious, there are a few relatively simple ways to keep in touch
    by using the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**E-mail:** The electronic snail mail is great for keeping a thread for conversations,
    but it can become quite difficult to manage. In these situations, it would ideal
    to schedule a regular (for example, weekly or monthly) progress update. Give it
    a deadline and a template. For example, a list of things that they need to cover
    such as currently working on, problems, and future work. In this way, you''re
    able to keep up-to-date with how everyone is going, and so is everyone else. To
    make the whole process a bit easier to manage, there are functions such as tagging
    and filtering in most (if not all) e-mail software. In these instances, e-mails
    relating to specified criteria, such as e-mail address or subject are then directed
    to a specific folder and/or given a tag to make it easier to retrieve later on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**WhatsApp**: You are likely to have the phone numbers of your other team members,
    albeit personal or business numbers. Therefore, phone messaging services like
    WhatsApp are great ways to keep in touch and make calls regardless of where they
    are in the world.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Social media groups and chats such as Facebook**. With Facebook, you can
    keep communication lines open in a number of ways. You can create a message group
    or a private group. The difference between the two is minimal, in that they function
    in much the same way, you can upload documents and discuss. However, a group functions
    much the same way as a Facebook page. So if you upload an image, it creates a
    separate post, as opposed to within a chat, where it would just be added as the
    next part of dialogue in the conversation. The advantages of creating a Facebook
    group is that it is easier to manage in terms of finding certain items, and keeping
    conversations more specific to a post (or topic).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Skype/Google Hangouts, and so on:** Save time in typing something, and give
    someone a call. Never underestimate the power of a voice/video call. While sometimes,
    especially if you''re working over distance, it is important to maintain contact
    that is beyond text communication. It adds a more personal level to your work
    relationship, and you get a better sense of the other person, than trying to read
    between the lines.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Version control
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An effective solution for artists to share files, such as textures and meshes,
    between them, is by using a cloud storage service (such as Google Drive or Dropbox,
    which we will discuss later). However, when it comes to programmers and developers,
    sharing files is a different situation. During the development of a game, programmers
    tend to work collaboratively with their code and script files. As a result, there
    are some important needs that should be taken into consideration:'
  prefs: []
  type: TYPE_NORMAL
- en: Programmers work together on the same source code. This may involve (but is
    not limited to) collaborating on different areas within a project, as well as
    the same file(s). As a result, without having some sort of file control, it can
    become quite messy with no way to keep track of what has been modified.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The general nature of programming in a project will involve utilizing a range
    of different techniques and trying varying solutions to a range of problems that
    will be the best for the project. Therefore, if large changes are made or changes
    that are not necessarily the right solution, programmers need to have a way to
    go back to a previous version.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reusing all or part of code from other sources, like libraries and source-files,
    where it's relevant can help to save a lot of time later on. By doing this, it
    is possible to save time for parts of the project that have similar elements to
    existing projects leaving more time for more complicated parts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By having some kind of version control in place, coders are able to utilize
    a file-system that not only identifies and tracks file changes, but allows programmers
    to reverse them. In addition, version control can also help to facilitate programmers
    to reuse and integrate code form external sources and/or projects. These features,
    and more, are supported by a piece of version control software.
  prefs: []
  type: TYPE_NORMAL
- en: Git is a free and open source program for version control. You can download
    it by visiting the Git home page here: [www.git-scm.com](http://www.git-scm.com).
    Once installed and properly configured, it can be used to apply version control
    to your files, thus being an incredible asset to your workflow.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are some visual tools to manage Git in an easier way. One of the most
    complete is SourceTree ([www.sourcetreeapp.com](http://www.sourcetreeapp.com))
    by Atlassian. However, if you are a newcomer, probably you'll find it easier to
    use GitKraken ([www.gitkraken.com](http://www.gitkraken.com)) by Axosoft.
  prefs: []
  type: TYPE_NORMAL
- en: 'Moreover, if you want to learn Git, here there is a quick and nice interactive
    tutorial: [https://try.github.io](https://try.github.io).'
  prefs: []
  type: TYPE_NORMAL
- en: Make a GDD and stick to it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When starting out, everyone will have an idea, concept, or something to add
    to the overall development of the game. At this stage, this is fantastic because
    it will give you lots to mull over when it comes to refining your game and provide
    you with an array of different choices to make.
  prefs: []
  type: TYPE_NORMAL
- en: 'A **game design document** (**GDD**)is a neat way to have a current version
    of what your game is and will be. Think of the GDD as a manual that defines your
    aesthetic, audio, naming conventions, story, characters, and other bits and pieces
    of your game. It is a point of a reference, a game bible if you will. The structure
    of a GDD varies, and there is no right or wrong way to do it, as it will all depend
    on what your game is. However, there are some sections that define the substance
    of your game. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Introduction**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is your game about? Think of this like an elevator pitch. Keep it short,
    sharp, and to the point. You don't want to go into too many specifics but enough
    to give the overall gist of your game. For example,Sugar mountain, Panda invasion
    is a 2D real-time tower defense game where the player must defeat Pandas with
    various edible projectiles.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Who is your game aimed towards? Children, adults, perhaps both? Ideally, this
    is where you consider the demographics that you want to engage your game with.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Where will your game be featured / what devices? Android, iOS, Windows, Mac,
    Linux, all come with different challenges and require different considerations,
    so keep this in mind and defined early on to minimize headaches later on down
    the track.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Art**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Mood boards that define the aesthetic style that you're wanting to achieve.
    These can be general or specific for a character or level. That help to guide
    the art direction when it comes to creating concept art.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Concept art includes anything that defines the current state of the game. Of
    course, previous art can be kept in the GDD, but it is ideal to move it to an
    appendix, or separate section to maintain the relevancy of the document.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: UI/GUI/HUD all relates to how the interactive elements will look, and basically
    how anything else that isn't in the game will appear. For example, if you have
    a HUD (heads-up display), how will it appear in-game. How much for the screen
    will it take up, and how will it work with the current aesthetic style?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Characters will need to be illustrated in order to provide an idea about their
    appearance, which will then be modeled (or drawn in the case of 2D) and animated.
    Drawing characters in various poses, environments and situations will help to
    illustrate more about the character's personality and overall appearance.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Assets that will populate your game environment that will then be created (drawn
    or modeled) later on.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Audio**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The background music that will set the atmosphere for the game. It can be as
    simple as music that provides an ambient soundtrack to exploring environments
    or act as audio cues when the player is approaching some significant part of the
    level.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Sound effects that not only provide a source of feedback for actions such as
    when an object makes contact with a surface but also when an event occurs such
    as the player winning or losing.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Story**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Character biographies will include information that relates to each character
    from their general information (age and appearance), background story, personality
    and their relationships with other characters within the game. Depending on your
    type of game it will be general or extremely detailed (as with role-playing games).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The general plot of your game will provide everyone with what the game is about.
    Like character biographies, the level of detail will depend on the type of game.
    For instance, you might not even have a story if it's a game like *Sudoku* (unless
    of course your solutions unlock doors to free a princess).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Narrative flow will explain how the narrative is revealed as the game progresses.
    Think of it like a map that indicates when and how parts of the narrative is revealed
    to the player and how each part of the game relates to the narrative. For example,
    having a player cross through an underground cave is not going to save the princess
    who is stuck in the castle on the other side of the map, unless of course the
    cave has a secret passage to get you there. Just like gameplay, your narrative
    needs to relate to what you are doing in the game, and vice versa.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Technical**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pipeline overview will briefly explain the software that is going to be used
    to build the game (game engines, third-party plugins, and so on) and how to connect
    them together. Moreover, it establishes a connection between the art and the software,
    and how these can communicate (such as, how the graphics should be packed to be
    used in the software/game).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical design will explain how the different parts of your game are connected
    and establish conventions. Moreover, it contains how interfaces should be implemented
    so in order to maintain consistency within the project, and how to encapsulate
    the work in tasks (which can be done by different people) and how to integrate
    them together. Often the technical design is in a technical design document, separate
    from the game design, since it only used by programmers.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: System limitations will explain which are the limitations of the technology
    used, to other members of the team who are not programmers (in fact, more detailed
    limitations are in the technical design document). Like the pipeline overview,
    this document provides a bridge between programmers, designers and artists.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Game flow**: It explains, in brief, how the game will play out. From one
    level/cut-scene/and so on, to the next. Similar to the narrative flow, game flow
    discusses what the player will be doing within the game as they progress through
    the narrative. For example, they will go to part A of the map, kill 20 dragons
    and then discover the magical elixir, cue cut-scene revealing the truth about
    his father, then the player is transported to a magical island to explore the
    family archives. By doing this, you begin to see the holes in your gameplay and/or
    story and are able to make sure that it not only makes sense but it progresses
    at pace that the player will enjoy; that is the game is neither too fast nor boring
    and confusing.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Timeline**: It refers to the time that it takes your game from start to finish
    and all the progress milestones and deadlines to ensure that your game will reach
    the release date:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Milestones are like the stepping stones to progress your project further. These
    are generally when the game reaches a significant point, such as art assets completed,
    cool function implemented, first working prototype, and so on. Milestones can
    be as frequent or infrequent as you want, but they are one way to keep on top
    of what everyone is up to, to ensure that work is delivered within a timeframe
    to reach a ranger of different project targets.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Deadlines can be as daunting as they sound, because if it's an important one,
    it can ruin a project and end up costing (albeit money and time).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Important dates are well important. They are the days where everyone will either
    need to be present, on site (if you have a physical location), online (if you
    have a virtual location), or present in any other shape or form. These dates can
    be for a range of different reasons from stakeholder, client, and even potential
    employer meetings. Members of a team should take these meetings seriously, arrive
    on time, and be prepared. Meeting notes should also be taken, in order to keep
    a log of what happens.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Keeping it tidy with project management tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: No one likes a cluttered workspace; even an organized chaos has its limits when
    you need that one document. The same goes for when you are developing games that
    are likely to have a lot of files. Therefore, we must find ways to not only manage
    the files, but also the team members so that we all know where the files are but
    a way to communicate with others about them. There are many programs out there
    for team and file management, some of the most popular and useful ones are discussed
    next.
  prefs: []
  type: TYPE_NORMAL
- en: Slack
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Slack ([www.slack.com](http://www.slack.com)) is one of the most effective team
    management tools. It keeps all your conversations, topics, to-do lists, notes,
    and many other bits and pieces from your project all in the one place.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of these features are explained here:'
  prefs: []
  type: TYPE_NORMAL
- en: Channels keep topics separated and the discussion focused. Think of them like
    rooms that have a specific topic of discussion. For example, you may have an art
    channel that focuses directly on the art of your project. It also provides a place
    for other team members to request or check on the progress of certain items. Channels
    can be as broad or as narrow as you want them to be.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The app makes Slack a much easier app to manage on the go. It allows you to
    receive real-time updates when members of your group upload and/or post anything.
    In addition, it allows you to also interact with Slack whenever and wherever.
    For example, you get a great idea or you might see something that is useful to
    a concept that you're developing, with the Slack application, all you have to
    do is post or snap your idea and submit it to the channel. You can think of channels
    like groups.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Slack's App Directory allow you to integrate other applications (some of which
    we will explore later) into Slack to make it the ultimate project management software.
    You can find the App Directory at [https://slack.com/apps](https://slack.com/apps).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Slack](img/image00623.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Image by Slack tutorial video ([https://slack.com/is](https://slack.com/is))
  prefs: []
  type: TYPE_NORMAL
- en: HacknPlan
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Similar to Slack, HacknPlan ([www.hacknplan.com](http://www.hacknplan.com))
    is another team management software. However, it is more directed towards game
    development. For example, you are able to provide timelines to work towards, assign
    points or value to each task, which can then be used to determine the payment
    of a particular part of the game and/or contribution from the creator. It allows
    you to have, at a glance, a relatively detailed overview of project in its most
    current state. If you have a look at the following screenshot, you can see that
    there are a number of different boards, each indicating a different part of the
    production pipeline, from things that have yet to commence in **Planned** to things
    that have been finishing in **Completed**. I recommend that you try it out because
    it is one of my favorite tools!
  prefs: []
  type: TYPE_NORMAL
- en: '![HacknPlan](img/image00624.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Image by Press Kit ([http://hacknplan.com/press/#!](http://hacknplan.com/press/#!))
  prefs: []
  type: TYPE_NORMAL
- en: Drive
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Google Drive ([https://drive.google.com](https://drive.google.com)), along with
    all of its program suite, is quite versatile and useful as a communal resource.
    Not only does it offer programs that are like those from other well-known commercial
    products, but also it has sharing capabilities that make the whole process much
    easier. You can easily create and share documents, files and folders with as many
    or as few people as you want either via a private link or through permission.
    There are many ways you can control access to files (from editing to read-only);
    it will all come down to the purpose of sharing them in the first place.
  prefs: []
  type: TYPE_NORMAL
- en: '![Drive](img/image00625.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Image by Google Drive
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some alternatives to Drive in terms of files and document creation are Apache
    OpenOffice ([www.openoffice.org](http://www.openoffice.org)) and ONLYOFFICE ([www.onlyoffice.com](http://www.onlyoffice.com)).
  prefs: []
  type: TYPE_NORMAL
- en: Dropbox
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Like Google Drive, except with the addition of other software, Dropbox ([www.dropbox.com](http://www.dropbox.com))
    provides a versatile tool for managing project files. It allows you to upload
    files, create folders, and share them and the files within them. As a result,
    it is a nice alternative to Drive in terms of sharing files. In addition, for
    documents such as Word files, it allows you to edit them in real time along with
    other team members, while showing you what edits are being or were made.
  prefs: []
  type: TYPE_NORMAL
- en: '![Dropbox](img/image00626.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Image by Dropbox Press Kit ([http://tinyurl.com/DropboxPressKitScreenshot](http://tinyurl.com/DropboxPressKitScreenshot))
  prefs: []
  type: TYPE_NORMAL
- en: Trello
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Trello ([www.trello.com](http://www.trello.com)) is somewhat like a virtual
    pin board for task management. It allows you to create a board, where all your
    tasks are kept. Each board features different panels that feature tasks. Of course,
    these are ordered as you prefer, depending on what kind of process you are intending
    to use Trello for. For example, developing a pipeline style Trello board may feature
    different areas such as art, design, programming, and audio; all of these are
    then assigned tasks specific to their area. For example, the art section may feature
    tasks such as concepts for main menu or concept art of the princess tower, and
    so on. Each task can then also be assigned to specific people, or be left open
    for anyone in the group to engage with. Once a task is completed, it could be
    moved to another section, which of course, is appropriately named finished or
    simply left and moved to the bottom of the list. How you use Trello is ultimately
    up to you, but it definitely helps to keep the process streamlined.
  prefs: []
  type: TYPE_NORMAL
- en: '![Trello](img/image00627.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Image by Trello Tour ([https://trello.com/tour](https://trello.com/tour))
  prefs: []
  type: TYPE_NORMAL
- en: Redbooth
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another option, which is somewhat a mixture of Trello and Dropbox is Redbooth
    ([https://redbooth.com](https://redbooth.com)), which is also known as Teambox.
    Redbooth allows users to share files, assign tasks to team members, and send direct
    messages. Like a number of other applications that we have looked at here, it
    also alerts you whenever the status of a project is updated.
  prefs: []
  type: TYPE_NORMAL
- en: '![Redbooth](img/image00628.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Image by Redbooth ([https://redbooth.com/?ref=teambox#!/dash](https://redbooth.com/?ref=teambox#!/dash))
  prefs: []
  type: TYPE_NORMAL
- en: GitHub
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Earlier, we talked about Version Control. However, you still need a place to
    keep your repositories. GitHub ([www.github.com](http://www.github.com)) offers
    hosting for Git repositories. It is free for public repositories, which means
    that everybody can see what you upload (this choice was made to encourage open
    source software). Otherwise, it offers paid hosting plans for your repositories.
  prefs: []
  type: TYPE_NORMAL
- en: '![GitHub](img/image00629.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Image by GitHub
  prefs: []
  type: TYPE_NORMAL
- en: BitBucket
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Bitbucket ([https://bitbucket.org](https://bitbucket.org)) is a service very
    similar to GitHub to host your Git repositories. Here you can have private repositories
    for free, but the limitation is on the number of users. Up to five users is free
    (which is perfect for small teams); otherwise, you need to switch to a paid plan.
  prefs: []
  type: TYPE_NORMAL
- en: '![BitBucket](img/image00630.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Image by Bitbucket
  prefs: []
  type: TYPE_NORMAL
- en: Calendar
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another intuitive piece of software (or even hardware) to have is a calendar,
    but more importantly a calendar that is shared among your group. It is important
    to set deadlines, but to ensure that everyone sticks to them, use a communal calendar;
    it will send notifications to everyone when upcoming events, meetings, and milestones
    are approaching.
  prefs: []
  type: TYPE_NORMAL
- en: '![Calendar](img/image00631.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Image by Google Calendar ([https://play.google.com/store/apps/details?id=com.google.android.calendar&hl=en](https://play.google.com/store/apps/details?id=com.google.android.calendar&hl=en))
  prefs: []
  type: TYPE_NORMAL
- en: Pinterest
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A great way to communicate the aesthetic part of your idea(s) is mood boards.
    Pinterest ([www.pinterest.com](http://www.pinterest.com)) is an absolutely fantastic
    tool for this. Not only can you create different boards to pin images to, but
    also they can be shared among team members and be made private.
  prefs: []
  type: TYPE_NORMAL
- en: '![Pinterest](img/image00632.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Image by Pinterest
  prefs: []
  type: TYPE_NORMAL
- en: Hootsuite
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One simple way to manage a number of social media channels in the one place
    would have to be Hootsuite ([www.hootsuite.com](http://www.hootsuite.com)). It
    allows you to schedule posts on various platforms (Facebook, Instagram, and Twitter
    to name a few, we will see later) so that you can worry about other important
    things with your application.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, it also allows you to view, at a glance, how each post has been
    interacted with, such as Likes, Tweets, and Favorites.
  prefs: []
  type: TYPE_NORMAL
- en: '![Hootsuite](img/image00633.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Image by Hootsuite ([http://signupnow.hootsuite.com](http://signupnow.hootsuite.com))
  prefs: []
  type: TYPE_NORMAL
- en: Polishing your game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Well, we've filed and buffed our game to shape it into a masterpiece, it's now
    time to add some shine. To make our gem shine, we need to polish it up with a
    few things to make it work better, as well as ensure that it will work as we want
    it to. By now, you should have already tested it (more than once), so you will
    have a few ideas about what needs to be improved, such as lag. In the following
    sections, we will explore ways to optimize various parts of the game so that by
    the time you publish it, you will have something that runs smoothly and effectively.
  prefs: []
  type: TYPE_NORMAL
- en: Processing the power
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One thing that you will want to make sure to do before you really get stuck
    into the development of your game is to determine whether or not it is optimized
    for the device(s) that you are targeting it towards. Often optimization is seen
    as the last step in game development, but it is not true. The sooner you consider
    optimization in your development workflow, the less the effort required later
    on to optimize your game.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Unity provides great resources for optimizing for mobile platforms such as
    specific optimizations such as script and graphics. You can find them here: [https://docs.unity3d.com/Manual/MobileOptimizationPracticalGuide.html](https://docs.unity3d.com/Manual/MobileOptimizationPracticalGuide.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Different devices come with their own issues that you need to overcome. Just
    like our own brains, mobile devices (and computers in general) can process so
    much at any one time. As a result, this will ultimately impact the overall performance
    of your game. For example, certain parts such as graphics (both 2D and 3D), or
    just inefficient code can be extremely draining. Ultimately, this will impact
    the running of your game, causing it to lag. In addition to the device, depending
    on what dimension that you designed in (2D or 3D) will require different considerations,
    of which we are going to explore in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Checking the build size
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of the many things you you need to take into account, is the dimension of
    your game, especially since it will impact how it will be distributed and/or released.
    Thus, checking how the size of your build is key in understanding the dimensions
    of your game. You can just build the game (how to do it, it's explained later
    in the chapter), and check its size. However, this doesn't give us much information
    on what we could reduce.
  prefs: []
  type: TYPE_NORMAL
- en: 'After you have built the game, you can right-click on the **Console** window
    and then select **Open Editor Log**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Checking the build size](img/image00634.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Your operating system will open the `Editor.txt` file with your default text
    editor; near the end, you can find some statistics about your last build, and
    in particular the size divided by the different elements of your game. You should
    have something similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Checking the build size](img/image00635.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'There are details related to individual files (only a fragment is shown) as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Checking the build size](img/image00636.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, most of our game size is taken by **Textures**, which is common
    in 2D games. Let's explore how we can reduce the size of the textures in the following
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Texture optimitation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Some image formats can be problematic, such as file size. Thankfully, in Unity
    you can reduce the file size in a number of ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the image resolution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change how Unity will handle that specific image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In Unity, you can change these in the importing settings. To do this, just
    select an `Asset` from your `Project` folder, and the following screen will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Texture optimitation](img/image00637.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In the past chapters, we explained some of these settings, mainly the ones related
    to the game. But as you can see from the preceding screenshot, there are many
    other options to set the texture in perfect conditions for your game.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As you can see from the previous screenshot, there is a warning about POT textures.
    What are those? **Power Of Two** (**POT**) textures are squared images in which
    the length of the side is a power of 2 (such as 2, 4, 8, 16, 32, 64, 128, 256,
    512, 1024, 2048, 4092, and so on). Since the hardware we have, runs with a binary
    system, the power of 2 is really important, because some techniques allow it to
    be processed in a certain way. As a result, performance can improve. In the specific
    case of the warning, to be compressed into DXT5 format. Therefore, although it's
    hard to have all the textures of your game as POT textures, you should consider
    having as many as you can.
  prefs: []
  type: TYPE_NORMAL
- en: As you can read from the previous screenshot, our Panda sprite sheet is an **NPOT**
    (**Non-Power-Of-Two**) texture, because this sprite sheet was designed for clarity
    to learn animations back in [Chapter 4](part0056.xhtml#aid-1LCVG1 "Chapter 4. No
    Longer Alone – Sweet-Toothed Pandas Strike"), *No Longer Alone – Sweet-Toothed
    Pandas Strike*, and not to be optimized.
  prefs: []
  type: TYPE_NORMAL
- en: 'To improve the performance of your game, the most important parameters are:
    **Generate ** **Mip Maps**, **Filter Mode**, **Max Size**, **Compression**, and
    **Format**. To make it easier to understand, they have been highlighted in the
    previous screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Generate Mip Maps**: It is an option that, if checked, creates smaller versions
    of the texture/sprite. Therefore, when the sprite is far or small with respect
    to the camera, the smaller version is rendered. As a result, there is a gain performance
    at runtime, but it could increase the size of your build.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Filter Mode**: It allows you to apply a filter to the image, in particular
    to make the borders a little blurry. It might be useful, when working with pixel
    art, to have some filters can be handy. This is because filter makes your asset
    less pixelated. **Filter Mode** selects how the texture is filtered when it gets
    stretched by transformations:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Point**: The texture becomes blocky up close'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bilinear**: The texture becomes blurry up close'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Trilinear**: This is like **Bilinear**, but the texture also blurs between
    the different mip levels'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Max Size**: As the name suggests, places a limit on the maximum size that
    the image can have within that specific platform. In fact, while it may be ideal
    to have hi-res pictures or graphics to enhance the experience, it is not not the
    best for an application in terms of performance. This option allows you to drastically
    reduce your build size, in case you have problems with it, at the cost of quality.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Compression** and **Format**: Specify whether or not the image will be compressed
    when the game will be compiled/built. It is important to remember, that if your
    target device is a particular platform, or really old, it is possible that it
    might not be able to support some compression formats. Again, there is a trade-off
    between quality and performance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Exercise**:'
  prefs: []
  type: TYPE_NORMAL
- en: Since we don't have the time to go through all the single options in detail,
    as an exercise, find out how all the other settings work in the official documentation.
    Then, play with them a bit until you are comfortable and really understand how
    they effect the development workflow.
  prefs: []
  type: TYPE_NORMAL
- en: Stats and profiling
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When creating your games, optimization will become a difficult process, especially
    if you have waited until the last minute to worry about it. One of the main issues
    (at least in 3D games) is polycounts, which are the number of faces that your
    3D assets have. For instance, if you think of a cube, each face is a polygon,
    and therefore a cube would have a total of six polygons (some graphic cards don''t
    support quads, and so the six faces of the cube should be split into two triangles
    each, resulting in a total of 12 polygons). In saying this, it is the cumulative
    total that needs to be kept into consideration. Get it too low and you are going
    to have a game that looks relatively blocky; too much and it''s likely (especially
    for mobile devices) to lag. To check the polycount inside your Unity scene, head
    to the top-right hand corner of the **Game** view, and check the **Stats** option,
    as highlighted in this image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Stats and profiling](img/image00638.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: To get a better idea of how you should model, in the User Manual for Unity,
    there is a page that explains how to model assets and characters in order for
    them to be optimized. You can read it here: [http://polycount.com/discussion/130371/polygon-count-for-smartphone-applications](http://polycount.com/discussion/130371/polygon-count-for-smartphone-applications).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have done this, a popup as shown in the next screenshot should appear.
    The statistics in this popup shows you information related to the performance
    of different things, such as draw calls. In addition, it also indicates how many
    polygons are present in your current view of the scene. In fact, one of the great
    advantages of this S**tats** screen is that you can use it in real time when you
    press play so that you can observe which parts of your games are more resource
    heavy than others (we mentioned this back in [Chapter 2](part0028.xhtml#aid-QMFO1
    "Chapter 2. Baking Cupcake Towers"), *Baking Cupcake Towers*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Stats and profiling](img/image00639.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The most important parameters to check (highlighted in the screenshot) are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**FPS** (Frames-Per-Seconds): As the name suggests, this shows how many frames
    your game can produce per second. Of course, this value could change drastically
    between different devices and/or computers depending on their hardware. You should
    ensure that your game is able to run at least at 50/60 FPS on each one of your
    target platforms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In some cases, you''d want to limit the maximum amount of FPS, for two reasons:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Some monitors have a limited refresh rate
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The human eye has a limited refresh rate too
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Therefore, you may want to avoid producing more frames than you actually need,
    resulting in a waste of computational resources.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Tris** (Triangles) and **Verts** (Vertices): They indicate how many triangles
    and vertices are rendered in the current frame from the active cameras (more than
    one camera might be active). Especially in 3D games, this is crucial. The more
    the **Tris** and **Verts**, the more details you can include, but it''s at the
    cost of performance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SetPass calls**: This indicates how many iterations Unity needs to go through
    to render that specific frame. You should do everything you can to try to reduce
    this number. The smaller the number of iterations, the faster Unity will render
    that specific frame, and hence increasing your FPS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you need more sophisticated statistics about the use of resources in your
    game, you can access the **Profiler** by navigating through **Window | Profiler**
    from the top menu bar. You should have a screen like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Stats and profiling](img/image00640.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The window has been stretched vertically in order to show you as many categories
    as possible. However, since the empty spaces will be filled up with graphs and
    the different parts of your game, the profiling window should be enlarged as much
    as possible. If you have a dual monitor setup, consider placing the profiling
    window in your second monitor.
  prefs: []
  type: TYPE_NORMAL
- en: This powerful tool allows you to monitor in detail how the different components
    of your game use resources. The Profiler helps you to optimize your game by analyzing
    the performance of the GPU, CPU, memory, rendering, and audio. Therefore, you
    can have an idea of how much computational power is spent in the different areas
    of your game. For example, you might want to know the percentage of time spent
    rendering, animating, or even in your game logic.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can find more about the Profiler in the official documentation ([https://docs.unity3d.com/Manual/Profiler.html](https://docs.unity3d.com/Manual/Profiler.html))
    or in a video tutorial from the official website at [https://unity3d.com/learn/tutorials/topics/interface-essentials/introduction-profiler](https://unity3d.com/learn/tutorials/topics/interface-essentials/introduction-profiler).
  prefs: []
  type: TYPE_NORMAL
- en: In addition, you can do remote profiling as well; on [https://docs.unity3d.com/Manual/ProfilerWindow.html](https://docs.unity3d.com/Manual/ProfilerWindow.html),
    towards the end, you will find a section named *Remote profiling*. It explains
    how to do it based on the platform you want to remote profile.
  prefs: []
  type: TYPE_NORMAL
- en: Other optimization tips
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another option to optimize your game is to limit the amount of materials (which
    is the way that Unity can apply a shader on a game object) on 3D assets. For example,
    sometimes you can apply many different materials (and maps) to an object to give
    it a range of cool effects; however, less is more. For games that are played on
    computer or console, this is not a big issue, but one that needs to be considered.
    For games on mobile devices, it is important to keep in mind that they are capable
    of handling some cool effects, but everything has a limit. Keeping this in mind
    in the early stages of your game's development will help to reduce the stress
    and amount of work in the later stages if you need to adjust some components of
    your game. Some materials could be really expensive from a computational point
    of view. There are shaders which replicate (with a good approximation) cool effects
    but are optimized for mobile (such as the bloom effect we discussed earlier).
  prefs: []
  type: TYPE_NORMAL
- en: 'The ideas explored in this small paragraph is just scratching the surface in
    optimizing your application from a graphical point of you. However, you can continue
    your reading here: [https://docs.unity3d.com/Manual/OptimizingGraphicsPerformance.html](https://docs.unity3d.com/Manual/OptimizingGraphicsPerformance.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Another way in which you can optimize your game is to pay attention to your
    code.
  prefs: []
  type: TYPE_NORMAL
- en: In previous versions of Unity (before version 5), there was the need to cache
    the Transform component. As you can read at the end of this article at [https://blogs.unity3d.com/2014/06/23/unity5-api-changes-automatic-script-updating](https://blogs.unity3d.com/2014/06/23/unity5-api-changes-automatic-script-updating)
    , there is no more need for this. However, there are still developers that use
    it; now it should be avoided since it reduces the code readability a lot, and
    therefore the development process as well. In any case, you should still cache
    other components into variables, as we did for the UI back in [Chapter 3](part0043.xhtml#aid-190861
    "Chapter 3. Communicating with the Player – the User Interface"), *Communicating
    with the Player – the User Interface*.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In case you are using an old version of Unity, or you just want to understand
    what was the caching of the Transform component, look at this line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`transform.position = Vector3.zero;`'
  prefs: []
  type: TYPE_NORMAL
- en: 'When it was compiled (in past versions of Unity), it was equivalent to:'
  prefs: []
  type: TYPE_NORMAL
- en: '`GetComponent<Transform>().position = Vector3.zero;`'
  prefs: []
  type: TYPE_NORMAL
- en: And, as we already mentioned in various chapters, the `GetComponent()` function
    is slow and it should be avoided when possible. So, you should have considered
    to cache the Transform component into a variable (as we did back in [Chapter 3](part0043.xhtml#aid-190861
    "Chapter 3. Communicating with the Player – the User Interface"), *Communicating
    with the Player – the User Interface*, where we stored the reference to the UI
    component into a variable). Thus, in the case of the Transform, you could have
    done it within a `Start()` or `Awake()` function with the following line of code
    (of course, after have declared the `thisTransform` variable of type Transform):`thisTransform
    = GetComponent<Transform>();`
  prefs: []
  type: TYPE_NORMAL
- en: 'Other tips deal with strings, which are extensively used everywhere in Unity.
    However, unless you are doing particular intense string manipulation, you should
    avoid doing the optimizations presented here for strings, since the performance
    gain may not be worth the time spent and the reduction of readability of the code.
    Here are these tips:'
  prefs: []
  type: TYPE_NORMAL
- en: Remember that if you are concatenating different strings together in a single
    call (which means, for example, doing in a while loop, which is not placed within
    a Coroutine so that it will be computed all in one frame), the memory could fill
    up quickly with unused string objects without giving the time to the garbage collector
    to clean it up. Therefore, you can use the `StringBuilder` class, which is also
    slightly faster.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are many different ways to compare different strings. However, the fastest
    one is the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The reason is that the algorithm just needs to walk (go through character by
    character) the two strings (which the single characters are seen as numbers, thus
    this method is case sensitive) to see whether any difference is found.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playtesting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Test, test, test! Not only test with your target device and audience, but test,
    test, and test again with them! This may seem like an obvious part of the game
    development process, but at this stage, even when you do it by yourself and with
    other members of your team, it is absolutely crucial. Make sure that the game
    works on high-end AND low-end devices that are within the range of your specifications.
    A great video to watch that will give you an overview on the process is extra
    credits video on playtesting, which can be found here: [http://tinyurl.com/PlaytestingExtraCredits](http://tinyurl.com/PlaytestingExtraCredits).'
  prefs: []
  type: TYPE_NORMAL
- en: Don't assume that if it works on your or your friends' devices that it will
    work on everyones'. There have been cases where games don't run on specific model
    of phone. Given this, test on as many as possible. However, thankfully, if you
    can't get a hold of a range of different devices, you are able to use an emulator
    to simulate it running on a particular device (or devices). Genymotion ([www.genymotion.com](http://www.genymotion.com))
    is a product that offers a great way to emulate different devices.
  prefs: []
  type: TYPE_NORMAL
- en: Why are you even playtesting?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The is the most fundamental question of the whole playtesting: why are you
    playtesting your application? Sure, the answer is obvious: to get feedback. But
    why? For example, do you want to see if the additional feature is necessary? Perhaps
    you want to find out whether the sound effects are too frequent and irritating;
    or perhaps they''re not enough.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Call a team meeting, sit down and go through the features that your application
    has, what have been difficult to get working, which ones are novel/experimental,
    or even which ones should be removed. Has there been any informal testing that
    has offered an another perspective about the game? Do you need to redefine the
    project, and does everyone have the same concept of the game in their head? It
    is likely that you have already done this, even a few times, but if you haven't
    it is good practice to have constant reviews of your game and its development.
  prefs: []
  type: TYPE_NORMAL
- en: Whom do you need to playtest?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Whom do you want and need to playtest your game? Is it a multiplayer, single
    player or cooperative game? Ideally, when you are conducting a playtest, you want
    people who are from your target group. While they are playtesting, you'd want
    to encourage them to take notes, before the playtest (what are their expectations?),
    during the playtest (what are they thinking/feeling?), and after the playtest
    (what could be improved, what is good/bad about the game, what is missing, and
    so on).
  prefs: []
  type: TYPE_NORMAL
- en: The solo test run
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: It is better to test your game before you ask anyone outside of your group to
    test it. While this might seem like an obvious thing, but even if you think that
    your game is infallible, it is more than likely something doesn't work the way
    that it should. This is why it is important to playtest with yourself and/or your
    team because if you get bugs and glitches out of the way, then players spend less
    time trying to play your game and more time playing it to give you valuable feedback.
    In saying this, it is even worthwhile to playtest with a small group of others
    before conducting an actual playtesting session. Ideally, this could be easily
    done within your team itself. While you are doing this, it is useful to not only
    get a better idea how you want to test the application with others, but it will
    also help you to shape your questions about their experience for the real thing.
  prefs: []
  type: TYPE_NORMAL
- en: Making it a social occasion
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The more the merrier, and it's the same with playtesting; but at the same time,
    make sure it is manageable with the resources that you have available to you.
    When you are organizing a group test, it is important to have a mix of people
    from both your target demographic and outside of it. This is because you can get
    feedback different perspective, which could offer insight into how the game works
    or doesn't work.
  prefs: []
  type: TYPE_NORMAL
- en: Putting it within boundaries
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This is the same as asking whether your playtest will be public or private.
    At this stage, you need to ask yourself whether the game contains sensitive components
    that could effect the release. As a result, you may require players to sign a
    **non-disclosure agreement** (**NDA**), which prevents them from discussing the
    game publically, sharing screenshots, and legal consequences for doing so. In
    contrast, it may be fine for them to freely and openly talk about the game to
    anyone after they have played.
  prefs: []
  type: TYPE_NORMAL
- en: It is very important that this is made clear to playtesters in the beginning,
    even before they sign up. You don't want to be logging onto Facebook or Twitter
    with people publishing screenshots about your app when it's still being developed.
    Other considerations can be asking playtesters not to take any video or pictures
    during the actual testing, including selfies, check-ins, and social media posts.
    In some cases, the print screen option is disabled for this very purpose. Of course,
    people are smart and they find many workarounds to this. But if you have certain
    measures and consequences in place, ensuring that participants adhere to a set
    of rules prior to playtesting and acknowledge them (for example, signing an agreement),
    you can avoid any unwanted publicity later.
  prefs: []
  type: TYPE_NORMAL
- en: Reaching out to family and friends
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now, playtesting can always start with your friends, family, and other close
    associates. This limits the amount of time that is required to get superficial
    issues out of the way, such as navigation functionality, certain aspects not working
    properly, and so on. Make sure that they don't tell you want you want to hear
    either. Family and friends know you on a more personal level and will know what
    you are looking for, so make sure that they are honest with their feedback and
    constructive with their critiques.
  prefs: []
  type: TYPE_NORMAL
- en: Those who are strangers
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In saying all of that, it's great to get comments from those that we know because
    there really isn't anything unknown and you're comfortable to communicate with
    them. But like we mentioned before, you need an objective opinion from someone
    you don't know and who doesn't know anything about your game other than the synopsis
    that you gave them prior to testing.
  prefs: []
  type: TYPE_NORMAL
- en: Those who you want to play your game
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Given all this talk about people, it is important to keep in mind who you are
    intending your game for. For this group of users, you really need to define your
    target audience (age, location, and experience level). By developing a user profile
    early on, then you are able to define the kind of attributes that they may have
    and that you need to cater for. Not only will this will help you to improve the
    design of your game but also to define how you will need to conduct your playtest.
    By doing this, you are able to focus the questions that are related to the application,
    and to them, and find out (if it's not), what could make it more relevant.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some simple steps that can get you refining this group of people are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Look at who is already using your products (if you have more than one). If you
    don't already have a user-base, then create a list of what would be your most
    ideal one. Start broad and then work your way to refining it to becoming a bit
    more specific. This will help to improve how you also market your game later.
    Look at things like age group, gender, location to help develop a better picture.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See what others, who are similar to you, are doing. This will help you to also
    refine (or redefine) your target audience. Make a list of games that are similar
    to yours and see how their audiences are being targeted.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyze the products and/or services that you already have available. Have they
    done well, if so why, if not why not?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choose specific characteristics of your audience to focus on. For example, while
    all of them may be gamers, maybe some are more casual than others. Perhaps your
    game is more targeted towards adults than children, and so on. While we aim to
    please everyone, we can't, so it's better to a more directed focus.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Take a step back and evaluate your target audience. Are there things that could
    be added to help improve or specify them?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are only some of the things that you will need to consider when defining
    your target audience, so I encourage you to also check out other, and more relevant
    text (on the web, books) that are more relevant to your game.
  prefs: []
  type: TYPE_NORMAL
- en: When
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The time that you decide to run your play-set is also an important consideration.
    Especially if you require people to be physically present. When deciding on a
    time think about what your group would most likely to be doing at that time. For
    example, if your target group students, it is more than likely that during the
    day they will be at school, therefore, weekend testing sessions are probably going
    to be more suited for them. On the other hand, if your group are people who run,
    early mornings or after work are probably more ideal times to have sessions. Of
    course, these are dependent on the type of game that you have as well. If your
    game requires more time commitment, then having a longer period of time for them
    to play your game is going to be better suited both for you and their lifestyle.
    Remember, they are helping you, so flexibility is key.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A good way to ensure that people will turn up on time to your test group is
    to either add them to your calendar or to call or send them reminder a few days
    before the proposed play date.
  prefs: []
  type: TYPE_NORMAL
- en: Where
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If playtesting is all done virtually, either by downloading and executable or
    by logging in to a website, then feel free to skip this section. However, if you
    require participants to come to a physical location, you want to make it as accessible
    as possible. Ideally you want it to be somewhere that is close public transport
    and in an area that is likely to be a central point for people to come to. For
    example, a city center is generally close to public transport, and it is likely
    to be close to people's places of work, or even school.
  prefs: []
  type: TYPE_NORMAL
- en: What
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: What are you expecting from the playtest and what are your playtesters expecting
    to do are two questions that you need to consider. For example, are you wanting
    them to play the tutorial and then provide feedback to you, either written or
    verbal? Perhaps they are thinking that they will need to play the entire game.
    The what of your playtest is essential to define and to make clear to the playtesters,
    that way you're not wasting their time and they aren't wasting you by giving feedback
    to irrelevant parts of the application.
  prefs: []
  type: TYPE_NORMAL
- en: A little goes a long way
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: What will you provide your playtesters during playtest, and/or for their time?
    If you are unable to compensate them, make sure to provide food and beverages.
    This is not to say you need to get a caterer to provide you with cakes and sandwiches,
    but having tea and coffee with some snacks (cut up some fruit, chips, candy, biscuits,
    even make your own sandwiches) will help to keep them sharp, especially if they
    are there for a long time. Scheduling breaks during long playtest sessions is
    also important, because you don't want them to be sitting there for hours. Having
    breaks every 45 minutes is a great way to also check-in with them and see how
    things are going.
  prefs: []
  type: TYPE_NORMAL
- en: How
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: How are the playtesters going to, well play and how will you manage this? How
    are you going to get their feedback? What kind of equipment (recording devices
    or computers) and software (questionnaire) will you need? Prior to the test, make
    sure that they work, batteries are charged and you have all the necessary equipment
    (cables and adapters) available. In addition, make sure you have a backup plan
    if for some reason sometime goes wrong on the day (which it does happen).
  prefs: []
  type: TYPE_NORMAL
- en: Methods of playtesting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are different ways to approach a playtest. You can let the players figure
    it all out on their own (after you've provided a bit of context), or guide them
    through the rules. With each approach, the way that you gain feedback during the
    playtest will differ. The following are some ways that you can playtest your game.
  prefs: []
  type: TYPE_NORMAL
- en: Observe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Observe how your testers are playing. For example, do they do things in a particular
    way or that is not expected? Perhaps this is because of a glitch or from other
    experiences that they have with games, and as a result they use certain features
    (or try to) in the same way. The same concept can happen in reverse, for example
    if players are supposed to obtain or do something but they don't, or the game
    won't allow them to then this needs to be fixed. At these points, future players
    are likely to find the game difficult to use because of a technical issue and
    head towards the **Uninstall** button.
  prefs: []
  type: TYPE_NORMAL
- en: Question and explain
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is no better way to check your understanding of something than to explain
    it to someone else. Therefore, one way to get feedback from your playtesters is
    to ask them to explain the game to you. Do they explain something different, that
    has you asking if you gave them the right game? Or do they explain the game in
    the same way that you intended it to be like? While they are explaining the game
    to you, make sure that you keep the conversation on what the game is, and not
    what it could be. Of course, any improvements are great suggestions, but for the
    purpose of the explanation, you will want them to tell you what they just experienced.
  prefs: []
  type: TYPE_NORMAL
- en: Reflect and follow up
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By now, you're left with an empty testing space and a whole bunch of notes,
    ideas, and different thoughts whizzing around your mind. Now is the time to get
    them out and documented. Have a group meeting. Write it up on a whiteboard, paper,
    document, or somewhere that is easily accessible later. This is an important process
    because what happens here can greatly impact your game upon release.
  prefs: []
  type: TYPE_NORMAL
- en: Now that the playtest is over, you will want to follow up with them. It's just
    like being in a meeting, you think of something useful afterwards, the same goes
    for testing. In a week from the playtest, it might be a nice way to drop them
    an e-mail, thank them again for their participation and if they have thought of
    anything else since the playtest. The important thing here is not to spam them
    with e-mails and questions, but to provide them with an opportunity to suggest
    it. You can provide them with an online (and anonymous) questionnaire.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your online presence
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These days, if it's not on the Internet, it doesn't exist. Well, if you're not
    social, it will be hard for people to know what you are up to, let alone knowing
    that you are making a game! You don't spend months or years developing something
    only to have no one come to the party. But this can be fixed, and it does require
    a bit of planning and time, so be prepared, but I promise you it will be worth
    it in the end.
  prefs: []
  type: TYPE_NORMAL
- en: Do your research
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you're going for a job interview, you wouldn't go in there without having
    done a bit of research about your potential employer, the same goes for making
    a name for yourself. While it's good to get everyone's attention, ideally, you
    want to get noticed by the right people. One way to do this is to pay close attention
    to companies, products, and even individuals who are also in the same market as
    you; and observe who they interact with, what kind of social media tagging are
    they utilizing. For example, are they using a particular hashtag such as *#Android*,
    *#game*, *#AppStore*? Perhaps, there are particular groups that they are targeting,
    from local, international, big, and small companies, even particular key individuals
    within the area. The idea is not to mimic their interactions, but to observe them.
    As you begin to observe you will learn more about the market that you are targeting,
    the major players, and perhaps come across and opportunity to engage with them.
    Such opportunities can range from conferences, expos, perhaps a meet and greet
    for a particular launch. Just remember, time and place is everything.
  prefs: []
  type: TYPE_NORMAL
- en: Conducting an audit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From logos to banners, links and even mission statements, a social media audit
    will ensure that everything is up-to-date. Do this when you first set up your
    social media accounts and right before you make any big announcement (such as
    a game launch). Of course, it is important to maintain these regularly, but if
    you're going to do it, these are the times to check everything is in order, because
    you are likely to get a higher influx of traffic to your channels.
  prefs: []
  type: TYPE_NORMAL
- en: Engaging with your audience
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you're documenting the process, ask those who are engaging with your content
    for their opinions. Create polls, post questions and ask for their responses.
    Keep them engaged and make sure that you interact with your audience on a regular
    basis. Even if you're just posting an update about a day in the office or something
    interesting that happened during the development of your game, it keeps users
    interested. While posting something is good, make sure that it still somehow ties
    back to the game or your development studio.
  prefs: []
  type: TYPE_NORMAL
- en: Rewarding engagement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Sites like Kickstarter, Indiegogo, and other crowdfunding platforms provide
    rewards for certain levels of commitment from their projects backers. Even if
    you choose not to engage with one of these platforms, you can adopt similar approaches
    to the development and eventual release of your game:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Competitions**: Running competitions is a great way to get people involved.
    If you don''t have the funds to create products, offer discounts, early access
    or (free) full versions of your game. Another option is to create some exclusive
    artwork/wallpapers and if possible, get them printed and signed by your team.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The power of the crowd**: Competitions are a great way to get people interacting
    with your company and products. Therefore, when you want to get people involved,
    instead of asking them to write a comment in response to your question or competition,
    get them to like, share, and even tag friends to enter into the competition. Perhaps
    for each friend that they tag, it''s an additional entry. In any case, it is a
    win-win situation because they (and even their friends) have the potential to
    win something, and you get some publicity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Feedback**: Getting insight from those using your product, albeit during
    playtesting or after the game has launched is ensuring that your game is as good
    as it can be. Remember to keep in mind that when take the time to give you detailed
    feedback, it is time out of their day, committed to helping you and your product
    out. While not everything is roses, and in cases you will get negative feedback,
    when it''s constructive it can give you ideas about future updates. Therefore,
    while feedback tends to be altruistic, reward those who make an effort. Rewards
    can be simple as a discount or large like a (or chance to win) free copy of your
    game.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Marketing on social media
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Don't just be a lurker, get involved! It's easy to stay on the sidelines, but
    it's better to get in and amongst it. While some of you may be new to social networking,
    the industry is quite integrated into it, and it does play a major part in it
    all. However, before you get started, there are a few things you should consider
    before shouting from the rooftop about your work.
  prefs: []
  type: TYPE_NORMAL
- en: Blog about it
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that you know about your target audience in a bit more detail, it's time
    to start setting up your own online presence. To begin, let's start with a blog.
    A blog offers many different avenues for communicating detailed information about
    what you do, albeit as a company or during the development of a product. It's
    one way to gather followers and provide a more personal snapshot into your lives.
    In this way, you begin to develop a more meaningful connection between you and
    your audience.
  prefs: []
  type: TYPE_NORMAL
- en: There are a range of different blog platforms to choose from. Some of the most
    popular ones include Tumblr ([www.tumblr.com](http://www.tumblr.com)), WordPress
    ([www.wordpress.com](http://www.wordpress.com)), and Blogger ([www.blogger.com](http://www.blogger.com)).
    These three, while not being the only ones out there, all offer great platforms
    for creating your own blog.
  prefs: []
  type: TYPE_NORMAL
- en: Twitter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Have you ever read a really captivating headline that made you want to read
    more? Well micro blogging platforms are great ways to hook your audience in much
    the same way. Twitter ([www.twitter.com](http://www.twitter.com)) is a perfect
    example of this because it contains you to a limit of 140 characters or less.
    So you have to get straight to the point or you will get cut off, and nobody likes
    th…
  prefs: []
  type: TYPE_NORMAL
- en: '**Tweeting**, there are a number of things to keep in mind when you are tweeting
    updates about your application, some of which, like time zone. However, Twitter
    uses a few key methods of interaction:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Reply**: As the name suggests it allows users to reply to what you have posted.
    This allows you to interact with those who have showed interest in what you have
    said.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Retweet**: It is Twitter''s version of sharing. So if someone tweets something
    that you liked, you can retweet it so that your followers can also see it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Favorite**: It is similar to a *Like* on Facebook or a thumbs up on YouTube.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hashtags**: These are probably one of the most fundamental things to keep
    in mind when sharing content. They are like a filtering system, in terms of categorizing
    information. Using unique hashtags helps you to not only keep track of content
    distribution that is related to your game, but it also makes it easier to be heard
    among other tweets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A great way to make sure that you have a unique hashtag is to search it before
    using it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some useful links to get you going with advertising on Twitter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://business.twitter.com/en/advertising.html](https://business.twitter.com/en/advertising.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://marketing.twitter.com/na/en.html](https://marketing.twitter.com/na/en.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://business.twitter.com/en/help/troubleshooting/how-twitter-ads-work.html](https://business.twitter.com/en/help/troubleshooting/how-twitter-ads-work.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://business.twitter.com/en/advertising/campaign-types.html](https://business.twitter.com/en/advertising/campaign-types.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exercise
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you're having trouble condensing something into a short version, try putting
    a limit on yourself. For example, begin with stating you whole idea, then say
    it in 15, 10, and 5 seconds. You will begin to notice that each time you try to
    say your idea, the core concepts will become more obvious, and the shorter the
    time becomes, the more efficient and simplified your explanation will become.
    We often feel the need to include everything, that one piece of information is
    equally as important as the next, but in reality that become padding to the concept.
  prefs: []
  type: TYPE_NORMAL
- en: Instagram
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While Twitter is the micro blogging platform, Instagram ([www.instagram.com](http://www.instagram.com))
    tells a thousand words with a simple picture (and caption). It works in a similar
    way to Twitter in that you can add hashtags, and connect with a larger audience
    and perhaps follow some of the key players (optional).
  prefs: []
  type: TYPE_NORMAL
- en: Facebook
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Facebook ([www.facebook.com](http://www.facebook.com)) offers a range of different
    options when it comes to creating a place to advertise your game as well as connecting
    with your audience:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Pages**: Create a page and populate it a bit before making it public so that
    you have a somewhat established online presence. By having content on your page,
    it gives visitors a reason to stay. While they are there, you need to be able
    to keep them there for a bit, and there are different ways to get visitors engaged,
    such as having an interesting blog post about a recent update or feature to an
    intriguing photo.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Posts**: These are a versatile feature to use. For example, if you''re asking
    about a particular component for the game, such as the next feature to include,
    you could ask them to *Like* for option one, *Comment* for option two, and *Share*
    for option three. Like we have discussed in this chapter in terms of competitions,
    you can use option two to encourage people to tag their friends as part of the
    process. As a result, while you are getting them interacting with your posts,
    you''re also getting a bit of publicity from it all while reaching their friends
    networks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Polls**: They can be used as a way to quickly gauge users'' opinions and
    see what the common consensus is. It is a bit more linear than post a comment
    (although this feature is available for the poll in general), but it is quicker.
    Of course, you can use polls to encourage competitive behavior such as vote now,
    whichever feature gets the highest amount of votes will be included in the next
    update. In this way, players will also feel as though their input counts and that
    they are also part of the development process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Live**: The live feature allows you to stream an event in real-time and have
    people watch it, well, live. This provides you with a great opportunity to stream
    things such as live game development or a Q&A. The best part is that if people
    miss it, then they can view it later and interact with it (for example, via comments,
    likes, sharing, and so on).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MailChimp
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While you're not ready, you still want a place for potential customers to keep
    in touch and there is no better way to do that then with a mainlining list. MailChimp
    ([www.mailchimp.com](http://www.mailchimp.com)), as well as many others out there,
    helps you to not only collate mailing lists but also inform them, all at once,
    about upcoming events, product releases, and many other special events.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready to publish
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of things, not just to do with your game or application that
    need to be taken care of before you finally release your precious gem into the
    world. In the following sections, we will go through a number of considerations,
    both with your team and final product, to ensure that the final part of this process
    is as smooth as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Crowdfunding campaigns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a number of different platforms for crowdfunding campaigns and each
    has its own features. However, the fundamental thing about them all is that they
    are there to provide a place for you to gather a following and importantly the
    much-needed funds or you to bring your creation to light. Different crowdfunding
    platforms operate for different reasons. For example, some are about causes (nature,
    human rights, or poverty), certain types of products (clothing, music), creative
    (products or virtual goods), and personal (medical treatments). Your game may
    meet criteria on more than one, specifically for creative projects, so it is recommended
    that you spend some time to see where your game is likely to reach those who will
    be the most interested in it.
  prefs: []
  type: TYPE_NORMAL
- en: Crowdfunding platforms work by the developer (or creator of any product or idea)
    presenting their idea, what they need the funding for, how it will be allocated,
    and what's in it for the backers who will be the ones that ultimately will give
    you money. In general, backers for your product (in this case, game) will be offered
    by you, with varying levels of backing opportunities to choose from. For example,
    if a backer contributes $1 then they are able to have their name listed in the
    credits on the game's website, or even in-game. If they give you $50, then they
    are able to get a signed copy of your game, $800 will get them two copies and
    a handwritten thank-you note, and so on. Be careful when you're setting the amounts
    for each level. Too much and you won't get backers; too little and you will ruin
    your budget. One last thing to consider is that in some cases, the crowdfunding
    platform will not only take a certain percentage from the total amount of funds
    that you raise, but will also add a fee to your backer's contributions.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, before you decide on a crowdfunding platform make sure that it will
    be the right one for you and for the funds that you are wanting to raise.
  prefs: []
  type: TYPE_NORMAL
- en: One of the most important things is to keep the risks of your project (both
    if it is funded and isn't) in mind. There are many risks that can occur, especially
    when you do get funded that the funds are managed properly and for what they were
    intended for. You want to have a budget that has been planned well and takes into
    account likely events that may occur (delays, unexpected costs for hardware, and
    additional help).
  prefs: []
  type: TYPE_NORMAL
- en: We have barely scratched the surface of what it means to develop and run a crowdfunding
    platform, but it is not a task for the faint-hearted. A great deal of thought
    is required when you're determining the levels of rewards for your backers and
    you must their cost into consideration and whether or not that will impact your
    budget. For example, digital downloads of your games will definitely be more cost-effective
    than burning them to a disc, and housing them in a beautifully decorated case,
    and then shipping them where they need to go. You can either include the cost
    of postage in the amount that backers are required to pay or ask it to be paid
    separately. In any event, crowdfunding campaigns require a lot of time and effort
    to be run successfully. In addition, they are not always a sure way to get funding,
    so keep this in mind when you're planning your game and its future.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a list of crowdfunding sites to check out:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fig: [www.fig.co](http://www.fig.co)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Kickstarter: [www.kickstarter.com](http://www.kickstarter.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Indiegogo: [www.indiegogo.com](http://www.indiegogo.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'RocketHub: [www.rockethub.com](http://www.rockethub.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GoFundMe: [www.gofundme.com](http://www.gofundme.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Razoo: [www.razoo.com](http://www.razoo.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CrowdRise: [www.crowdrise.com](http://www.crowdrise.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building in Unity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first thing to do is to actually compile the game. Otherwise, you won't
    be able to put it anywhere!
  prefs: []
  type: TYPE_NORMAL
- en: 'To build a game in Unity, you need to navigate in the top bar menu and select
    **File | Build Settings…**. There, you have the following screen, where you can
    choose the platform you want to target (and the scenes you want to include):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building in Unity](img/image00641.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you click on the **Player Settings…** button, you will go into specific
    options for your build. Here you can find more information about it: [https://docs.unity3d.com/Manual/class-PlayerSettings.html](https://docs.unity3d.com/Manual/class-PlayerSettings.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Once you click on the **Build**, Unity will actually build the game and you
    can take a breath (and a break). But here, it's just the beginning of the second
    stage, in which you actually need to publish and market the game!
  prefs: []
  type: TYPE_NORMAL
- en: Clearing the air
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You're getting excited, you're almost at the finished line, but it is imperative
    at this point to ensure that everyone, and I mean everyone who is involved, is
    aware of what will happen next. More importantly, make sure that everyone has
    been accounted for. For example, how the profits/royalties will be divided, their
    responsibilities post game launch, and so forth. Of course, this would have been
    outlined in a contract early on in the project, which they would have signed,
    but we are all guilty of agreeing to terms and conditions without having actually
    read them. It might even be worthwhile at this stage to remind everyone to revisit
    their contract.
  prefs: []
  type: TYPE_NORMAL
- en: Accepting terms and conditions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that your team are all good to go, you need to make sure that what you're
    about to put out there for the world to enjoy also abides by the terms and conditions
    of the platform that you will be targeting. For example, if you are planning to
    release for Android devices, ensure that you have met their terms and conditions;
    the same goes for Apple's App Store and any others that you are intending to publish
    on.
  prefs: []
  type: TYPE_NORMAL
- en: Localization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you are shipping worldwide, you need to localize your game. Many developers
    think that publishing only in English should be enough because it is understood
    by most gamers. However, if you give a look to the marketing and downloading graphs,
    it's clear that English is just 20% of the market. Therefore, you should definitely
    take into consideration localizing your game to other audiences.
  prefs: []
  type: TYPE_NORMAL
- en: 'But localization is much more than just translating your game and/or adding
    subtitles in other languages. There are so many things you should keep in consideration.
    Some of the many reasons are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: In some languages, like German, some words are really long and they might be
    cut off or overflow from your user interface.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some languages, such as Arabic are written in a different direction, for instance,
    right to left or up to down. Thus, you may have to adjust the design of your UI
    to support the visual impact that your interface will have.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In case you have dialogue systems, or just the user interface that uses string
    concatenation in a certain way within the code, be aware than in other languages,
    they need to be rewritten if they are not flexible enough! An example would be
    when you want to place an adjective before the word. In some other languages,
    it might happen in the opposite direction. For instance, the English sentence
    the *red hat* becomes *il cappello rosso* in Italian, where *rosso* means red.
    Thus, the adjective is after the word and not before it, unlike in English. Another
    (practical) example is the following: you reserve an extra character at the end
    of your item to add an *s* to make it plural (*potion* can become *potions*).
    In Italian, you don''t need an extra character but change the last one (*pozione* becomes
    *pozioni* in the plural form). Moreover, in Italian the last character that changes
    depends on whether the object is female or male (a concept that doesn''t exist
    in English, since objects don''t have any sex). Therefore, your solution to reserve
    a character is not structured enough to support Italian. Imagine applying this
    to all the other languages, and you quickly realize that it''s not so easy to
    localize you game by just adding a couple of variables.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In some cultures, the role of the *,* and of the *.* is inverted within numbers
    (For example the number 3,218 can be interpreted as three thousand two hundred
    eighteen or also as three point two one eight, such as in Italy).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In some cultures, specific concepts might be not well tolerated, and therefore
    they should be censured or removed. This is typically with violent games or games
    that contain certain types of adult content.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All of these problems should be taken into consideration when you translate
    because it''s not as straightforward as getting the translation of your text.
    Here is a list of examples, by no means exhaustive:'
  prefs: []
  type: TYPE_NORMAL
- en: Translators need to have the context of the game, because in other languages,
    many shades are lost with direct translation, and in some way, they should be
    kept when possible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Biographies of characters are useful in case your collaborators do voice casting
    for other languages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some metaphors or sayings may have no meaning in other languages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As such, you should consider localization from the very beginning of your development
    flow. However, this is often not possible due time and economic constraints. In
    any case, keep in mind that the sooner you pay attention to localization, the
    easier it will be in the long run.
  prefs: []
  type: TYPE_NORMAL
- en: Ethical considerations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Video games are a technology, and like all technologies, they can be dangerous
    and harm people. They can be used as weapons to hurt people. Unfortunately, this
    ethical aspect of games is often forgotten. As such, I want to quote Jesse Schell,
    who wrote in his book (*The Art of Game Design: a book of lenses*):'
  prefs: []
  type: TYPE_NORMAL
- en: '*"If you are designing a game that involves strangers talking each other, you
    must take responsibility for what that might lead to. This is one of the rare
    cases where your choices in game design could cause lives to be saved or lost.
    You might think there is a one in a million chance of something dangerous happening
    in your game, but if that is true, and your game is so successful that five million
    people play it, that dangerous thing will happen five times."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: You, as a game developer, have certain responsibilities in doing everything
    you could to make this never happen. If you are not willing to take such responsibilities,
    probably it's better not to make any game.
  prefs: []
  type: TYPE_NORMAL
- en: In my personal opinion, which is also shared by Jesse Schell as you can read
    from his book, you have the potential to do something good, and use video games
    as a tool to enhance human life. You should be inspired by questions like, Is
    the game I'm developing doing something good? and Can my game in some way improve
    the life of its players? Of course, these are not questions that game companies
    care about, but you as game developer should, and answer them inside you. Then,
    try to make your game a better game for people.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The same argument, but explained in more detail, can be found in a dedicated
    chapter of Jesse Schell's book.
  prefs: []
  type: TYPE_NORMAL
- en: Please, in your own way, make this world a better place!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we faced many topics, and explored many areas, so let's reorganize
    our ideas.
  prefs: []
  type: TYPE_NORMAL
- en: At the beginning, we discussed about potential improvements for our tower defense
    game and some hints on their implementation. From there, we extended the improvements
    to Unity in general, by providing more areas of game development that we didn't
    have time to cover in detail, but that need your attention if you wish to improve
    your own skills.
  prefs: []
  type: TYPE_NORMAL
- en: During game development, you are often not alone, but you are within a team,
    and it is important that each part of the team works as if they all were one (like
    the human body) so to achieve the finest results. As such, some collaboration
    tools have been highlighted, so that you are free to try them and choose the one
    that suits your team best.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we came back to our game, by focusing on optimization and playtesting,
    which are both wrongly considered as last steps of the game development pipeline,
    but as we found out, this is not true. The sooner you start iterating on them,
    the better your game will be. Optimization is needed to run your game efficiently,
    whereas playtesting is needed to make player's experience smooth.
  prefs: []
  type: TYPE_NORMAL
- en: We didn't stop there, and we went through what's after the game is completed,
    and we discussed topics ranging from marketing your game, creating an online presence
    to publish your game, and hopefully get a revenue out of it. As such, we explored
    many hints on how to use the most common social media platforms as tools to promote
    your image and your game by engaging and expand your target audience.
  prefs: []
  type: TYPE_NORMAL
- en: At the very end, we scratched the surface of localization, just to have a better
    idea of what's behind that, since we didn't have the time to face it properly,
    but it was worthy of mention.
  prefs: []
  type: TYPE_NORMAL
- en: Final notes and goodbye
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unfortunately, this travel in the world of game development has come to an end
    (although this last chapter should have made you realize that this is just the
    beginning of your journey). Time flew, and I just realized that I filled up a
    whole book!
  prefs: []
  type: TYPE_NORMAL
- en: I really want to thank you all, the readers whom I didn't have a chance to meet
    in person. But when I was writing the words of this book until very late at night,
    I felt connected to all of you in some way. For me, this has been an amazing travel
    too (although at sometimes tiring and stressful).
  prefs: []
  type: TYPE_NORMAL
- en: In case you have illegally downloaded this book but you really liked it, please
    consider buying it. I work hard to deliver high-quality content and this takes
    time. If you are unable to afford this book, you can always offer me a coffee
    ([www.francescosapio.com/BuyMeACoffee](http://www.francescosapio.com/BuyMeACoffee))
    or support this book by sharing the link to buy it (not to torrent and download
    it) on social media.
  prefs: []
  type: TYPE_NORMAL
- en: 'Other titles I wrote that might help you in your journey are *Unity UI Cookbook*, Packt Publishing
    ([www.packtpub.com/game-development/unity-ui-cookbook](http://www.packtpub.com/game-development/unity-ui-cookbook))
    and *Unity 5.x 2D Game Development Blueprints*, Packt Publishing ([www.packtpub.com/game-development/unity-5x-2d-game-development-blueprints](http://www.packtpub.com/game-development/unity-5x-2d-game-development-blueprints)).
    Furthermore, here is also my mini guide already quoted in [Chapter 1](part0016.xhtml#aid-F8901
    "Chapter 1. A Flat World in Unity"), *A Flat World in Unity*: *What you need to
    know about Unity 5*, Packt Publishing ([www.packtpub.com/packt/free-ebook/what-you-need-know-about-unity-5](http://www.packtpub.com/packt/free-ebook/what-you-need-know-about-unity-5)).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, networking, meeting other people, and sharing ideas are great ways
    to extend your knowledge and skills. So please feel free to contact me:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Final notes and goodbye](img/image00642.jpeg)'
  prefs: []
  type: TYPE_IMG
