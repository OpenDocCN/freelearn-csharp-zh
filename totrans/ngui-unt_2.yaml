- en: Chapter 2. Creating Widgets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will create our first sprite widget and understand how it
    works. Then we will create one sample of each important widget template, and analyze
    their corresponding parameters so that you know how to create and configure them.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of this chapter, we will have a functional main menu with most of
    NGUI's widgets.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our first widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will create our first sprite widget to display our main menu's background
    window. In order to do that easily, NGUI has a **Widget Wizard** with a few templates
    for us.
  prefs: []
  type: TYPE_NORMAL
- en: Widget Wizard
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Widget Wizard can be opened by navigating to **NGUI** | **Open** | **Widget
    Wizard**. It will look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Widget Wizard](img/8667OT_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see in the previous screenshot, to create a widget, you require **Atlas**
    and **Font** to be configured. As said in [Chapter 1](ch01.html "Chapter 1. Getting
    Started with NGUI"), *Getting Started with NGUI*, an atlas is a large texture
    containing the sprites that you need to create your UI. For the rest of this chapter,
    we will use the default atlas named **SciFi Atlas** , which is included in the
    plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting an atlas
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s select our default SciFi atlas, which contains the necessary sprites,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: In the **Project** view, navigate to **Assets** | **NGUI** | **Examples** |
    **Atlases** | **SciFi**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag-and-drop the prefab `SciFi Atlas.prefab` in the **Atlas** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag-and-drop the prefab `SciFi Font – Header.prefab` in the **Font** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have our **Atlas** and **Font** prefabs selected. We can now create a widget
    from a template.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a widget from a template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s create a widget from a template by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the drop-down menu next to the **Template** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Sprite** option as **Template**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the drop-down menu next to the **Sprite** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the sprite named **Dark**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Leave the **Pivot** option as **Center**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure you have selected **Panel** in the **Hierarchy** view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add To** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ok, our sprite widget has been created!
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The widget wizard adds the new widget as the child of the selected GameObject
    or panel. If you have selected the wrong GameObject, you can still drag-and-drop
    the new widget into the right GameObject after it is created.
  prefs: []
  type: TYPE_NORMAL
- en: Transforming widgets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have created our first widget: **Sprite (Dark)**. Select it in the **Hierarchy**
    view and try the following manipulations to change its transform values.'
  prefs: []
  type: TYPE_NORMAL
- en: Moving widgets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the **Scene** view, you can use the **handles** to move your widget or you
    may enter coordinates directly in the **Inspector** view''s **X**, **Y**, or **Z**
    parameters. The following screenshot is of the **Scene** view with the three parameters
    visible:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Moving widgets](img/8667OT_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You should always leave the **Z** coordinates at 0\. If you need to place a
    widget behind or in front of another, use the **Back** and **Forward** buttons
    in the **Inspector** view to control your widget's depth.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may move your widget on only one axis by pressing *Shift* before you click
    on the axis's handle.
  prefs: []
  type: TYPE_NORMAL
- en: Rotating widgets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On the **Scene** view, place your mouse cursor on the outside of any blue circle
    surrounding your widget. Your cursor will have a rotation icon next to it. You
    can now keep your left mouse button pressed and move your mouse to rotate the
    widget.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, rotation is set to have a 15 degrees step. If you wish to have a
    more precise rotation—a 1 degree step—just hold *Shift* while rotating.
  prefs: []
  type: TYPE_NORMAL
- en: Scaling widgets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may have noticed that in the **Inspector** view, the scale value is grayed
    out. That's because you should use the **Dimensions** parameter of the **UISprite**
    component instead.
  prefs: []
  type: TYPE_NORMAL
- en: On the **Scene** view, place your mouse cursor on any blue circle surrounding
    your widget. Your cursor will have a resize icon next to it. You can now click
    and drag your mouse to resize the widget.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using the blue handles will *not* keep your widget centered to its current position.
    If you want to resize your widget proportionally on both sides, click on the space
    in front of the **X** or **Y** parameter of **Dimensions** of the **UISprite**
    component and drag your mouse left or right.
  prefs: []
  type: TYPE_NORMAL
- en: To keep everything pixel perfect, you should avoid scaling widgets up or down
    with Unity's scale tool. Try to do everything with **Dimensions**. Let's see what
    other parameters we have for widgets.
  prefs: []
  type: TYPE_NORMAL
- en: Common widget parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Select **Sprite (Dark)** and you will find the parameters seen in the following
    screenshot in the **Inspector** view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Common widget parameters](img/8667OT_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'These parameters exist for any type of widget. Let''s see what they are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Color Tint**: This is the widget''s alpha-enabled color.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Clipboard**: If you click on the **Copy** button, the current **Color Tint**
    selection is copied to this parameter. If you click on the **Paste** button, the
    **Clipboard** parameter''s selection will be pasted to **Color Tint**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pivot**: This presents two sets of buttons that can be used to choose which
    corner or side you want the widget''s pivot to be placed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Depth**: This can be used to display your widget in front or behind others.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dimensions**: This can be used to display size in pixels instead of scaling.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now that we have seen the widget parameters, please enter these **Dimensions**
    for our newly created **Sprite (Dark)**: `1300` x `850`.'
  prefs: []
  type: TYPE_NORMAL
- en: Our sprite window just got enormous and ugly. Why? Because it's a 15 x 15 sprite
    stretched to 1300 x 850! Let's talk about sprites and see how we can correct this.
  prefs: []
  type: TYPE_NORMAL
- en: Sprites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have created our first sprite and understood how to move, rotate, and change
    its dimensions. We actually scaled it up massively compared to its original size.
    But this 15 x 15 sprite has something special.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you select the **Sprite (Dark)** GameObject, you will see it has four dotted
    lines inside the **Preview** window in the **Inspector** view. This means it''s
    a **sliced** **sprite**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sprites](img/8667OT_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Sliced sprites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A **sliced** sprite is an image divided in nine sections, making it resizable
    while conserving its corners' proportions. Sliced sprites may be scaled as you
    wish—they still look beautiful.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since **Sprite (Dark)** is a 9-slice sprite, we must tell our **UISprite**
    component to treat it as such. Perform the following steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Sprite (Dark)** GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the drop-down menu next to its **Sprite Type** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Sliced**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Notice how the sprite looks good now—it's not stretched anymore!
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Fill Center** parameter allows you to only show the sprite's borders and
    leave only transparency inside.
  prefs: []
  type: TYPE_NORMAL
- en: Even though sliced sprites are perfect for windows and variable size boxes,
    you may display regular sprites by leaving **Sprite Type** as **Simple**.
  prefs: []
  type: TYPE_NORMAL
- en: Tiled sprites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A tiling sprite is a pattern meant to be repeated indefinitely—it can be used
    to cover a large surface by repeating the same texture. Let''s try it right now:'
  prefs: []
  type: TYPE_NORMAL
- en: In the **Hierarchy** view, rename **Sprite (Dark)** as `Window`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select our **Window** GameObject and perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure it is at {`0`, `0`, `0`} position and has a scale of {`1`, `1`, `1`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure **Depth** is set to `0`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Color Tint** parameter, change **R** to `115`, **G** to `240`, **B**
    to `255`, and **A** to `255`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Ok, we have our window. Let''s create a tiled background to make it look better
    by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select our **Window** GameObject and duplicate it with *Ctrl* + *D*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the duplicate as `Background`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the new **Background** GameObject and perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its UISprite's **Depth** parameter to `1`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the drop-down menu next to the **Sprite Type** field.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Tiled**. It doesn't look good because our sprite is not a tiling sprite.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Sprite** button.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Honeycomb** sprite, which is a tiling sprite.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Color Tint** parameter, change **R** to `115`, **G** to `240`, **B**
    to `255`, and **A** to `255`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Attach a component to it by navigating to **Component** | **NGUI** | **UI**
    | **Stretch** and perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag-and-drop our **Window** GameObject inside the **Container** field.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Style** field to **Both**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Attach a component to it by navigating to **NGUI** | **Attach** | **Anchor**
    and drag-and-drop our **Window** GameObject inside the **Container** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'That looks better! We now have a tiling sprite for our window''s background,
    and it looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Tiled sprites](img/8667OT_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We used the **UIStretch** component to avoid setting dimensions manually; if
    you change the window's **Dimensions**, the background will resize itself automatically.
  prefs: []
  type: TYPE_NORMAL
- en: The **UIAnchor** component is used to make sure the background also moves with
    the window.
  prefs: []
  type: TYPE_NORMAL
- en: Filled sprites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A filled sprite is useful to create life bars or progress bars; with this,
    you can set a sprite and change the **Fill Amount** parameter between 0 and 1
    to hide a part of it. The following screenshot shows a partially hidden progress
    bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Filled sprites](img/8667OT_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s create this effect with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select our **Background** GameObject and set **Sprite Type** to **Filled**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Fill Dir** to **Horizontal**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move the **Fill Amount** slider and you can see what it does on the game view.
    You've understood the filled sprite system. Now set the **Sprite Type** field
    back to **Tiled**.
  prefs: []
  type: TYPE_NORMAL
- en: Ok, we've seen different sprite widgets and parameters. Let's learn how to add
    text.
  prefs: []
  type: TYPE_NORMAL
- en: Labels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Labels are used to display text on the screen with a specific font as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Labels](img/8667OT_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s create a label widget with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Panel** GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **NGUI** | **Open** | **Widget Wizard**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Label** template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have already selected a font; it will be used for this label.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add To** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A new label has been added to the panel and placed at the center of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With **Label** selected, the `UILabel` parameters are shown in the **Inspector**
    view. They are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Text**: This is a large textbox that lets you type the text to be displayed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Overflow**: This offers four different behaviors for the widget when the
    text is larger than the label''s **Dimensions**. The four behaviors are as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Shrink Content**: This shrinks the text in order to fit'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Clamp Content**: This ensures overflow will never happen'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resize Freely**: This resizes to display all the content and overflow'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resize Height**: This resizes height only—column style'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Encoding**: This must be checked if you want to change the characters'' color
    by inserting the `[RRGGBB]` hexadecimal values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Effect**: This will help you add a shadow or outline effect to your label.
    You can adjust the **Distance** and **Color** values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Max Lines**: This is the maximum number of lines assigned for the label.
    For unlimited lines, leave it as **0**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pivot**: The pivot also defines how the text is aligned.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the title bar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s add a title for our window that will look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the title bar](img/8667OT_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Please proceed with the following steps to create this title bar for our window:'
  prefs: []
  type: TYPE_NORMAL
- en: Select **Panel** and create a new child with *Alt* + *Shift* + *N*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename that new child as `Title`. It will be our Title bar container.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag-and-drop the **Label** GameObject into the **Title** GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select our **Title** GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **NGUI** | **Open** | **Widget Wizard**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new sprite using the **Highlight** sprite and perform the following
    steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename this new sprite (**Highlight**) as `Background`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Sprite Type** to **Sliced**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the **Pivot** option to **Top** (the button with the up arrow).
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Reset its **Transform** position to {`0`, `0`, `0`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Color Tint** parameter, change **R** to `95`, **G** to `255`, **B**
    to `150`, and **A** to `200`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter **Depth** as `2`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Attach a component to it by navigating to **Component** | **NGUI** | **UI**
    | **Stretch** and perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag our **Window** GameObject into the **Container** field.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Style** to **Horizontal**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter its UISprite's **Y** dimension as `62`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **Label** GameObject from **Title** and perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change its text to `[AAFFFF]Main Menu`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Overflow** parameter to **Resize Freely**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter **Depth** as `3`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Attach a component to it by navigating to **NGUI** | **Attach** | **Anchor**
    and perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag-and-drop the **Background** GameObject from **Title** in the **Container**
    field.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Side** parameter to **Center**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select our **Title** GameObject in the **Hierarchy** view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Attach a component to it by navigating to **NGUI** | **Attach** | **Anchor**
    and perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag our **Window** GameObject into the **Container** field.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Side** parameter to **Top**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The **Hierarchy** and **Inspector** views of our **Title** GameObject should
    look like the ones in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the title bar](img/8667OT_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We now have a window that actually looks like a window. We used anchors to avoid
    setting positions manually. Now let's add some buttons!
  prefs: []
  type: TYPE_NORMAL
- en: Buttons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With NGUI, buttons are easy to create and configure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create our first one by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Panel** GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new child with *Alt* + *Shift* + *N* and perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename it as `Buttons`. It will be our buttons container.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to **NGUI** | **Open** | **Widget Wizard** and perform the following
    steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Button** Template.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: For the **Background** field, select the sprite named **Button**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: With the **Buttons** GameObject selected, click on the **Add To** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A button has just been created and centered on the screen. If you look at the
    **Hierarchy** view, you will see that a button is composed of a container GameObject
    named **Button** and two children: a **Background** sprite and **Label**. That''s
    how NGUI works; templates are simply assembled components and widgets. If you
    wanted to, you could build a button from scratch using the right components on
    empty GameObjects.'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the Play button. You can see that hover and click are already set!
    Turn off the Play mode, select the new **Button** GameObject, and look at the
    **Inspector** view.
  prefs: []
  type: TYPE_NORMAL
- en: Interactive widgets have a box collider attached to them, and that is the case
    with this button. The collider is used to detect collisions with the cursor.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A button has a `UIButton` component that handles seven button parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Target**: This GameObject is transformed and modified when the user hovers
    or presses the button. By default, this is **Background**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Normal**: This is the color tint when nothing is happening.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hover**: This is the color tint when the user''s cursor is over the button.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pressed**: This is the color tint when the user clicks on the button.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Disabled**: This is the color tint when the button is disabled (can''t be
    clicked).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Duration**: This is the duration of transitions between states.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Notify**: This is the parameter that lets you choose a method to call when
    the button is clicked. You must first drag a GameObject into the **Notify** field.
    A **Method** field will then appear, listing the GameObject''s attached script
    methods, as shown in the following screenshot:![Parameters](img/8667OT_02_10.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the previous example, I dragged the **Panel** GameObject into the **Notify**
    field. My **Panel** GameObject has a `ButtonManager.cs` script attached to it—this
    script has a `ButtonClicked()` method. I can now select it in the **Method** field.
    It will be called on click.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Only **public** methods without arguments will show in the **Method** field
    of the **Notify** parameter.
  prefs: []
  type: TYPE_NORMAL
- en: There is also a **PlaySound** component attached to this button. It lets you
    choose an audio clip to play when the selected event occurs. You can edit the
    **Pitch** and **Volume** parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can add as many **PlaySound** components as you want if you need a sound
    to be played whenever the user hovers or clicks on something, for example.
  prefs: []
  type: TYPE_NORMAL
- en: The play and exit buttons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will now add two buttons to our window that will exit or launch the game.
    They will appear as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The play and exit buttons](img/8667OT_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We need a GameObject that will manage the game. It will contain the `GameManager.cs`
    script attached in order to manage generic behaviors such as exiting or launching
    the game. Let''s create it first; follow these steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new GameObject at the root of **Hierarchy** with *Ctlr* + *Shift*
    + *N* and perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename it as `GameManager`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create and attach a new `GameManager.cs` C# script to it and perform the following
    steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open this new `GameManager.cs` script.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside this new script, add this new method called `ExitPressed()` with the
    following code lines:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that the exit method is ready, let''s create and configure the two buttons
    as shown in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the **Button** GameObject and perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename it as `Exit`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the **GameManager** GameObject into the **Notify** field.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **GameManager.ExitPressed** in the **Method** field.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Normal** color tint parameter, change **R** to `185`, **G** to `255`,
    **B** to `255`, and **A** to `255`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Hover** color tint parameter, change **R** to `0`, **G** to `220`,
    **B** to `255`, and **A** to `255`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Attach a component to it by navigating to **NGUI** | **Attach** | **Anchor**
    and perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag our **Window** GameObject into the **Container** field.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Side** parameter to **BottomLeft**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Pixel Offset** to {`135`, `60`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select our **Exit** button''s child **Background** GameObject and perform the
    following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter **Depth** as `2`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select our **Exit** button''s child **Label** GameObject and perform the following
    steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change its text to `Exit`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter **Depth** as `3`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Ok, we have our **Exit** button. Let''s create our **Play** button as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Duplicate the **Exit** button and perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename this new duplicate as `Play`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Minus** button next to the UIButton's **Notify** field to remove
    the **GameManager** GameObject from it.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Side** parameter to **BottomRight**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Pixel Offset** to {`-135`, `60`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Attach a Component to it by navigating to **Component** | **NGUI** | **Examples**
    | **Load Level On Click**, and set its **Level Name** string parameter to **Game**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select our **Play** button's child **Label** GameObject, and change its text
    to `Play`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Perfect, now if you build your scene, you will have a functional **Exit** button
    with only one line of code! The **Pixel Offset** parameter maintains our buttons
    at the same distance from the window's borders even if you change resolutions
    or the window's dimensions. We will create our game scene later.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Image buttons** can also be created with the Widget Wizard. They are identical
    to normal buttons, except that they use images for the **Normal**, **Hover**,
    **Pressed**, and **Disabled** states instead of color and scale tweens.'
  prefs: []
  type: TYPE_NORMAL
- en: Text input
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we will learn how to add a text input to create a nickname box. Perform
    the following steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Panel** GameObject and create a new child with *Alt* + *Shift*
    + *N*. Then rename this new child as `Nickname`. It will be our nickname box container.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **NGUI** | **Open** | **Widget Wizard**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Project** view, navigate to **NGUI** | **Examples** | **Atlases**
    | **SciFi**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the **SciFi Font – Normal** prefab into the **Font** field.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Input** template.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Sprite (Dark)** as the **Background** parameter.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: With the **Nickname** GameObject selected, click on the **Add To** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A new widget named **Input** has been added to the scene.
  prefs: []
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An **Input** GameObject has been created. Let''s look at its **Inspector**
    parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Input Label**: This is the text label that is to be used for this input.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Inactive Color**: This is the text color while the text is not selected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Active Color**: This is the text color while the text is being edited.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Default Text**: This is either **Blank** or with the label''s default text.
    **Blank** will delete the label''s text when the **Input** GameObject is selected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Keyboard Type**: This allows the different sets of characters to be authorized.
    This will also change the keyboard layout on mobile platforms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Select on Tab**: Drag into this field the GameObject that you want to be
    selected when the *Tab* key is pressed while editing the input.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Auto-save Key**: This enables the label''s text to be automatically saved
    to the specified `PlayerPrefs()` key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Max Characters**: This is the number of maximum characters allowed. `0` means
    infinite.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Carat Character**: This is the end of text character.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Password**: If you activate this Boolean, the label''s characters will be
    replaced by ***** on the screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Auto-correct**: This enables or disables autocorrection on mobile platforms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a nickname box
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s use this text input to create a nickname box that will look like the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a nickname box](img/8667OT_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s create the nickname box seen in the preceding screenshot. Perform the
    following steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Duplicate the **Window** GameObject and perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the new duplicate as `Background`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag it into the **Nickname** container GameObject.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter **Depth** as `2`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Dimensions** to `440` x `120`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select our **Input** GameObject and perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reset its **Box Collider** component's center to {`0`, `0`, `0`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Type in `Nickname` for the **Auto-save Key** parameter.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter **Max Characters** as `25`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Attach a component to it by navigating to **NGUI** | **Attach** | **Anchor**
    and perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the **Background** GameObject from **Nickname** inside the **Container**
    field.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Pixel Offset** to {`0`, `-17`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Duplicate the **Label** child GameObject from **Title** and perform the following
    steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag it inside the **Nickname** GameObject.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Change its text to `[AAFFFF]Nickname`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the **Background** GameObject from **Nickname** inside the **Container**
    field.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Side** parameter to **Top**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Pixel Offset** to {`0`, `-32`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **Background** child GameObject from **Input** and perform the following
    steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter **Depth** as `3`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Pivot** to **Center** (middle button + middle button).
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Reset the **Transform** field's position to {`0`, `0`, `0`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Color Tint** parameter, change **R** to `100`, **G** to `230`, **B**
    to `255`, and **A** to `255`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **Label** child GameObject from **Input** and perform the following
    steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter **Depth** as `4`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Pivot** to **Center** (middle button + middle button).
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Reset the **Transform** field's position to {`0`, `0`, `0`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the **Label** GameObject's text to `Enter your Name Here`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Nickname** container GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Attach a component to it and navigate to **NGUI** | **Attach** | **Anchor**
    and perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag-and-drop our **Window** GameObject inside the **Container** field.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Side** parameter to **Top**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Pixel Offset** to {`0`, `-220`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Ok, we have a **Nickname** box. Your **Hierarchy** view should look like the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a nickname box](img/8667OT_02_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The user can enter his nickname, up to 25 characters. If you move or change
    the window's dimensions, our box will move to stay at the same place.
  prefs: []
  type: TYPE_NORMAL
- en: Slider
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now let's add a volume slider for the user to move and select his/her volume
    level.
  prefs: []
  type: TYPE_NORMAL
- en: 'A slider template is available, enabling you to adjust parameters easily by
    sliding a thumb along a bar. Perform the following steps to create a volume slider:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Panel** GameObject and create a new child with *Alt* + *Shift*
    + *N*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename that new child as `Volume`. It will be our volume settings container.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to **NGUI** | **Open** | **Widget Wizard** and perform the following
    steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Slider** template.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Dark** Sprite to **Empty**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Light** Sprite to **Full**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Highlight** to **Thumb**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: With the **Volume** GameObject selected, click on the **Add To** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A slider has been created. It has 6 parameters as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Value**: This is the slider''s current value, which is between 0 and 1.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Steps**: This is the number of steps to completely fill or empty the slider.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Direction**: This is the slider''s fill direction, either **Horizontal**
    or **Vertical**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Foreground**: This is the sprite used to fill the slider.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Thumb**: This is the sprite used for the handle to change the slider''s value.
    By leaving this as **null**, a simple progress bar will be created (user cannot
    interact).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Notify**: This is the GameObject that lets you choose a method to call when
    there is a change in the slider''s value. When a GameObject is assigned, you may
    choose a method to call on the value change.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a volume slider
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can use this slider to create our volume slider, which will look like the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a volume slider](img/8667OT_02_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Proceed with the following steps to create it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Duplicate the **Background** GameObject from **Nickname** and perform the following
    steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the duplicate inside the **Volume** container GameObject.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Dimensions** to `320` x `135`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Attach a component to it by navigating to **NGUI** | **Attach** | **Anchor**
    and perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag our **Window** GameObject inside the **Container** field.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Pixel Offset** to {`-420`, `-90`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Duplicate the **Label** GameObject from **Nickname** and perform the following
    steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag it inside the **Volume** GameObject.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag our Volume's **Background** GameObject inside the **Container** field.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Change its text to `[AAFFFF]Volume`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Slider** GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Attach a component to it by navigating to **NGUI** | **Attach** | **Anchor**
    and perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the **Background** GameObject from **Volume** inside the **Container**
    field.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Pixel Offset** to {`-100`, `-23`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **Background** GameObject from **Slider** and perform the following
    steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter **Depth** as `3`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Color Tint** parameter, change **R** to `80`, **G** to `220`, **B**
    to `85`, and **A** to `255`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **Foreground** GameObject from **Slider** and perform the following
    steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter **Depth** as `4`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Color Tint** parameter, change **R** to `95`, **G** to `255`, **B**
    to `190`, and **A** to `255`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **Thumb** GameObject from the **Slider** and perform the following
    steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter **Depth** as `5`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Color Tint** parameter, change **R** to `100`, **G** to `255`, **B**
    to `250`, and **A** to `255`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Ok, we now have a nice volume slider! Your **Hierarchy** view should look like
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a volume slider](img/8667OT_02_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We will now link it to the game''s volume with a new script. Let''s add some
    music to our main menu. First, add an audio file of your choice to your Unity
    project as shown in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select our **Main Camera** GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Attach a component to it by navigating to **Component** | **Audio** | **AudioSource**
    and perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag a music file from the **Project** view to the **AudioSource** parameter's
    **Audio Clip** field.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **Slider** GameObject from **Volume** and perform the following
    steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create and attach a new `VolumeManager.cs` C# script to it.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Open this new `VolumeManager.cs` script.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this new script, we will first need to declare and initialize the necessary
    variables. Add the following variable declarations and the `Awake()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here we initialized the slider's value to `NGUITools.soundVolume` because this
    float is persistent and will be saved across scenes—even if you exit the game.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s create an `OnVolumeChange()` method that will modify our AudioListener
    method''s volume each time the slider''s value is changed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Ok, the method is ready. We just need to call it each time the slider''s value
    changes. Let''s use the **UISlider** component''s **Notify** field as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the **Slider** GameObject from **Volume** and perform the following
    steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag-and-drop the **Slider** GameObject from **Volume** into the **Notify**
    field.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: For the **Method** field, select `VolumeManager.OnVolumeChange`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, each time the slider's value is modified, our method will be called.
  prefs: []
  type: TYPE_NORMAL
- en: You can hit the Play button; the game's volume will change with the slider.
    The volume is saved even when you exit the game and restart!
  prefs: []
  type: TYPE_NORMAL
- en: Toggle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have a volume slider, let's add an enable/disable sound checkbox,
    which will turn down the volume to 0 and hide our volume slider.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create a toggle widget as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Panel** GameObject and create a new child with *Alt* + *Shift*
    + *N*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename that new child as `Sound`. It will be our sound toggle container.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to **NGUI** | **Open** | **Widget Wizard** and perform the following
    steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Toggle** as **Template**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Dark** Sprite as **Background**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **X** Sprite as **Checkmark**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: With the **Sound** container selected, click on the **Add To** button.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A checkbox with a label has just been created as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Toggle](img/8667OT_02_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Select our new **Toggle** GameObject. Let''s look at the UIToggle''s **Inspector**
    parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Group**: This is the toggle''s group. Toggles of the same group will act
    as radio buttons; only one of them can be checked at once.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Start State**: This defines in which state the toggle will be at the start.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Animation**: This is the animation that will play when the checkbox changes
    state.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sprite**: This lets us choose the widget to be used as a checkmark; we should
    use our **X** sprite here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Transition**: This is either **Smooth** or **Instant**; uses alpha fade in
    / fade out.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Notify**: This is the GameObject to notify on when toggled. When a GameObject
    is assigned, you may choose a public method to call on a toggle event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a sound toggle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have seen the UIToggle''s parameters. Now we will create this sound toggle
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a sound toggle](img/8667OT_02_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s use our recently added **Toggle** GameObject to create the window shown
    here. Follow these steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select both the **Background** and **Label** GameObjects from **Volume** and
    perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Duplicate them.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag-and-drop those new duplicates inside our **Sound** container.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Background** GameObject from **Sound** and enter its UIAnchor's
    **Pixel Offset** parameter as {`-420`, `43`}.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Label** GameObject from **Sound** and change its text to `[AAFFFF]Sound`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Toggle** GameObject and check the **Start State** Boolean in **UIToggle**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Attach a component to it by navigating to **NGUI** | **Attach** | **Anchor**
    and perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the **Background** GameObject from **Sound** inside the **Container** field.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter its **Pixel Offset** parameter as {`-38`, `-20`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a component to it by navigating to **NGUI** | **Interaction** | **Toggled
    Objects**, and drag our **Volume** container GameObject into the **Activate**
    array.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **Background** sprite GameObject from **Toggle** and perform the
    following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter **Depth** as `3`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Color Tint** parameter, change **R** to `130`, **G** to `255`, **B**
    to `130`, and **A** to `255`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **Checkmark** sprite GameObject from **Toggle** and perform the
    following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter **Depth** as `4`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Color Tint** parameter, change **R** to `50`, **G** to `255`, **B**
    to `70`, and **A** to `255`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **Label** GameObject from **Toggle** and perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter **Depth** as `3`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Change its text to `[AAFFFF]Enabled`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Color Tint** parameter, change **R** to `200`, **G** to `255`, **B**
    to `250`, and **A** to `255`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Hit the Play button. We have a nice sound box with a sound toggle checkbox that
    hides/shows the **Volume** box when needed. But it does not turn off the sound
    yet.
  prefs: []
  type: TYPE_NORMAL
- en: We need to make some changes to our `VolumeManager.cs` script to correct this.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, open our `VolumeManager.cs` script. We will add a new `OnSoundToggle()`
    method that will be called when the toggle changes state. It will set the volume
    directly to 0, or to the slider''s value. Add this new method to `VolumeManager.cs`
    as shown in the following code lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Ok, the previous method will set both our volumes to `0` or the slider's value,
    depending on the toggle's state. Let's link it to our sound's toggle by selecting
    our **Toggle** GameObject and dragging the **Slider** GameObject from **Volume**
    inside the **Notify** field in **UIToggle**, below the **On Value Change** section.
    Then, for the **Method** field, select `VolumeManager.OnSoundToggle`.
  prefs: []
  type: TYPE_NORMAL
- en: Hit the Play button. That's it. When we click on the **Toggle** checkbox from
    **Volume**, the volume reacts accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: But if we turn the sound off using the toggle and stop running, when we hit
    Play again, the checkbox is still checked and the volume slider is displayed,
    but the volume is at `0`.
  prefs: []
  type: TYPE_NORMAL
- en: 'That''s because our volume is set to 0, but the checkbox is still checked at
    start. Let''s add a simple line of code that will set the start state to `false`
    if the volume is at `0`:'
  prefs: []
  type: TYPE_NORMAL
- en: Open our `VolumeManager.cs` script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Declare a new global variable named `public UIToggle soundToggle`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the end of the `Awake()` method, add the following lines of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the script and return to Unity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Slider** GameObject from **Volume**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the**Toggle** GameObject from **Volume** in the volume manager's **Sound
    Toggle** field.
  prefs: []
  type: TYPE_NORMAL
- en: Hit the Play button. That's it. If you disable sound using the toggle and exit
    the Play mode and then launch it again, the checkbox stays unchecked and the volume
    slider is not displayed. Perfect!
  prefs: []
  type: TYPE_NORMAL
- en: Popup list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will now learn how to create the popup list, see its parameters, and create
    a difficulty selector for our game.
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Panel** GameObject and create a new child with *Alt* + *Shift*
    + *N*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename that new child as `Difficulty`. It's our difficulty box container.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to **NGUI** | **Open** | **Widget Wizard** and perform the following
    steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Popup List** as **Template**
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Dark** as **Foreground**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Dark** as **Background**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Highlight** sprite as **Highlight**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: With our **Difficulty** GameObject selected, click on the **Add To** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A **Popup List** GameObject has just been created. Let''s look at its parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Atlas**: This is the atlas used for the popup list''s sprites.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Font**: This is the font used for the popup list''s options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Text Label**: This is the label to update when **Popup List** changes selection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Options**: This is the list of options that will pop up—one per line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Default**: This is the option selected at start.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Position**: You may force the list of options to appear `Above` or `Below`
    the Popup List''s button. If this parameter is set to `Auto`, NGUI will choose
    one of both depending on the available space.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Localized**: This enables localization on options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Background**: This is the background sprite for the popup list''s options
    container.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Highlight**: This is the sprite for the currently hovered option.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Text Color**: This is the options list''s text color tint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Background**: This is the popup list''s background color tint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Highlight**: This is the hovered option''s background color tint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Padding**: This is the padding of the **X** and **Y** options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Text Scale**: This is the options'' text scale.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Animated**: If this is unchecked, the options'' display will be instantaneous.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Notify**: This is the GameObject that lets you choose a method to call when
    the selected option changes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Below the `UIPopup List` component, we have the usual `UIButton` and `UIPlay
    Sound` components that we have already seen before.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A Popup Menu template is also available in the Widget Wizard. The only difference
    is that the menu does not indicate which choice you have selected; the button's
    label is not updated.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a difficulty selector
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will now use our new **Popup List** GameObject to select the game''s difficulty
    level as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a difficulty selector](img/8667OT_02_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s create this difficulty selector as shown in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the **Background** and **Label** GameObjects from **Sound** and perform
    the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Duplicate them.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag-and-drop them into our **Difficulty** container.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Background** GameObject from **Difficulty** and enter its **Pixel
    Offset** parameter to {`420`, `43`}.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Label** GameObject from **Difficulty** and change its text to `[AAFFFF]Difficulty.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select our **Popup List** in the **Hierarchy** view and perform the following
    steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename it as `Popup`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Type in `Normal` and `Hard` separated by a line.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Text Color**, change **R** to `190`, **G** to `250`, **B** to `255`, and
    **A** to `255`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Background**, change **R** to `70`, **G** to `250`, **B** to `255`, and
    **A** to `255`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Highlight**, change **R** to `70`, **G** to `255`, **B** to `150`, and
    **A** to `255`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Hover**, change **R** to `70`, **G** to `255`, **B** to `150`, and **A**
    to `255`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Attach a component to it by navigating to **NGUI** | **Attach** | **Anchor**
    and perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the **Background** GameObject from **Difficulty** in the **Container**
    field.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter **Pixel Offset** as {`-76`, `-20`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select our popup''s **Sprite** GameObject and perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Color Tint**, change **R** to `170`, **G** to `255`, **B** to `190`, and
    **A** to `255`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter **Depth** as `3`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select our popup''s **Label** GameObject and perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Color Tint**, change **R** to `135`, **G** to `255`, **B** to `170`, and
    **A** to `255`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter **Depth** as `4`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Ok, we now have a **Popup List** GameObject that lets us select the game''s
    difficulty level. Your **Hierarchy** panel should look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a difficulty selector](img/8667OT_02_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now it''s time to link it to a method that will take that difficulty into account.
    Do this by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open our `GameManager.cs` script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Declare a new enum for our difficulty levels as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare a new `Difficulty` variable to store the current difficulty as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We used a static variable because it won't be destroyed when loading the game
    scene. By default, the difficulty level is set to **Normal**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to add the `OnDifficultyChange()` method that will change our `Difficulty`
    variable when **Popup List** changes state as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Our method is ready; we need to call it when **Popup List** changes state.
    Do so by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Save all the modified scripts and return to Unity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **Popup List** GameObjectfrom **Difficulty** and perform the following
    steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag our **GameManager** GameObject into the **Notify** field.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: For the **Method** field, select `GameManager.OnDifficultyChange`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, the **Popup List** GameObject will change the `Difficulty` variable according
    to its value. We will be able to access this static variable once we're in the
    game.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned how to create and configure most of NGUI's
    widgets—sprites, labels, buttons, text inputs, sliders, toggles, and popup lists.
  prefs: []
  type: TYPE_NORMAL
- en: We now have a main menu with interactive elements. We also used NGUI's notification
    event system to change variables in code and register the user's choices.
  prefs: []
  type: TYPE_NORMAL
- en: 'We used **UIAnchors** and **UIStretch** components to properly position our
    widgets—we just have to move each box''s background sprite to move the entire
    element. This is much more effective than having to move each GameObject manually!
    You should have a main menu that looks like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Summary](img/8667OT_02_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Ok, now it is time to enhance our UI experience and make this better. Let's
    move on to [Chapter 3](ch03.html "Chapter 3. Enhancing your UI"), *Enhancing your
    UI*.
  prefs: []
  type: TYPE_NORMAL
