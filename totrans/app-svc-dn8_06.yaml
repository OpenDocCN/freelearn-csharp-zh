- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using Popular Third-Party Libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is about some popular third-party libraries for .NET that enable
    you to perform actions that either are not possible with the core .NET libraries
    or are better than the built-in functionality. These actions include manipulating
    images with **ImageSharp**, logging with **Serilog**, mapping objects to other
    objects with **AutoMapper**, making unit test assertions with **FluentAssertions**,
    validating data with **FluentValidation**, and generating PDFs with **QuestPDF**.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Which third-party libraries are most popular?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging with Serilog
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mapping between objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making fluent assertions in unit testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validating data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating PDFs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which third-party libraries are most popular?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To help me decide which third-party libraries to include in this book, I researched
    which are downloaded most frequently at [https://www.nuget.org/stats/packages](https://www.nuget.org/stats/packages),
    and, as shown in *Table 6.1*, they are:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Rank** | **Package** | **Downloads** |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | `newtonsoft.json` | 167,927,712 |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | `serilog` | 42,436,567 |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | `awssdk.core` | 36,423,449 |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | `castle.core` | 28,383,411 |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | `newtonsoft.json.bson` | 26,547,661 |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | `swashbuckle.aspnetcore.swagger` | 25,828,940 |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | `swashbuckle.aspnetcore.swaggergen` | 25,823,941 |'
  prefs: []
  type: TYPE_TB
- en: '| 8 | `polly` | 22,487,368 |'
  prefs: []
  type: TYPE_TB
- en: '| 9 | `automapper` | 21,679,921 |'
  prefs: []
  type: TYPE_TB
- en: '| 10 | `swashbuckle.aspnetcore.swaggerui` | 21,373,873 |'
  prefs: []
  type: TYPE_TB
- en: '| 12 | `moq` | 19,408,440 |'
  prefs: []
  type: TYPE_TB
- en: '| 15 | `fluentvalidation` | 17,739,259 |'
  prefs: []
  type: TYPE_TB
- en: '| 16 | `humanizer.core` | 17,602,598 |'
  prefs: []
  type: TYPE_TB
- en: '| 23 | `stackexchange.redis` | 15,771,377 |'
  prefs: []
  type: TYPE_TB
- en: '| 36 | `fluentassertions` | 12,244,097 |'
  prefs: []
  type: TYPE_TB
- en: '| 40 | `dapper` | 10,819,569 |'
  prefs: []
  type: TYPE_TB
- en: '| 52 | `rabbitmq.client` | 8,591,362 |'
  prefs: []
  type: TYPE_TB
- en: '| 83 | `hangfire.core` | 5,479,381 |'
  prefs: []
  type: TYPE_TB
- en: '| 94 | `nodatime` | 4,944,830 |'
  prefs: []
  type: TYPE_TB
- en: 'Table 6.1: The most downloaded NuGet packages'
  prefs: []
  type: TYPE_NORMAL
- en: What is covered in my books
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: My book *C# 12 and .NET 8 – Modern Cross-Platform Development Fundamentals*
    introduces processing JSON using `newtonsoft.json` and documenting web services
    using `swashbuckle`.
  prefs: []
  type: TYPE_NORMAL
- en: For now, using Castle Core to generate dynamic proxies and typed dictionaries,
    or deploying to and integrating with **Amazon Web Services** (**AWS**), is out
    of scope for this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'As well as raw download numbers, questions from readers and the usefulness
    of the library also contributed to my decision to include a library in this chapter,
    as summarized in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Most popular library for manipulating images: **ImageSharp**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Most popular library for manipulating text: **Humanizer**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Most popular library for logging: **Serilog**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Most popular library for object mapping: **AutoMapper**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Most popular library for unit test assertions: **FluentAssertions**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Most popular library for data validation: **FluentValidation**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Open-source library for generating PDFs: **QuestPDF**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In *Chapter 7*, *Handling Dates, Times, and Internationalization*, I cover
    the most popular library for handling dates and times: **Noda Time**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In *Chapter 9*, *Caching, Queuing, and Resilient Background Services*, I cover
    a few more popular libraries, as summarized in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Most popular library for resilience and transient fault handling: **Polly**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Most popular library for scheduling jobs and implementing background services:
    **Hangfire**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Most popular library for distributed caching: **Redis**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Most popular library for queuing: **RabbitMQ**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**ImageSharp** is a third-party cross-platform 2D graphics library. When .NET
    Core 1.0 was in development, there was negative feedback from the community about
    the missing `System.Drawing` namespace for working with 2D images. The ImageSharp
    project was started to fill that gap for modern .NET applications.'
  prefs: []
  type: TYPE_NORMAL
- en: In their official documentation for `System.Drawing`, Microsoft says, “The `System.Drawing`
    namespace is not recommended for new development due to not being supported within
    a Windows or ASP.NET service, and it is not cross-platform. ImageSharp and SkiaSharp
    are recommended as alternatives.”
  prefs: []
  type: TYPE_NORMAL
- en: 'Six Labors released ImageSharp 3.0 in March 2023\. It now requires .NET 6 or
    later and major future versions will target LTS releases of .NET, like .NET 8\.
    You can read the announcement at the following link: [https://sixlabors.com/posts/announcing-imagesharp-300/](https://sixlabors.com/posts/announcing-imagesharp-300/).'
  prefs: []
  type: TYPE_NORMAL
- en: Generating grayscale thumbnails
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s see what can be achieved with ImageSharp:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use your preferred code editor to create a console app project, as defined
    in the following list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Project template: **Console App** / `console`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Solution file and folder: `Chapter06`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Project file and folder: `WorkingWithImages`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Do not use top-level statements**: Cleared'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enable native AOT publish**: Cleared'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the `WorkingWithImages` project, create an `images` folder and download
    the nine images from the following link to it: [https://github.com/markjprice/apps-services-net8/tree/master/images/Categories](https://github.com/markjprice/apps-services-net8/tree/master/images/Categories).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you are using Visual Studio 2022, then the `images` folder and its files
    must be copied to the `WorkingWithImages\bin\Debug\net8` folder where the compiled
    console app will run. We can configure Visual Studio to do this for us, as shown
    in the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Solution Explorer**, select all nine images.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Properties**, set **Copy to Output Directory** to **Copy always**, as shown
    in *Figure 6.1*:![A picture containing text, screenshot, software, computer icon  Description
    automatically generated](img/B19587_06_01.png)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 6.1: Setting images to always copy to the output directory'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the project file and note the `<ItemGroup>` entries that will copy the
    nine images to the correct folder, as partially shown in the following markup:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `WorkingWithImages` project, treat warnings as errors, globally and
    statically import the `System.Console` class, and add a package reference for
    `SixLabors.ImageSharp`, as shown highlighted in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To save space, in other steps like this in this chapter, I will not show the
    markup to treat warnings as errors or to globally and statically import the `System.Console`
    class. I will only show the `ItemGroup` and `PackageReference` for task-specific
    libraries.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Build the `WorkingWithImages` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are using Visual Studio 2022, then in **Solution Explorer**, toggle **Show
    All Files**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `obj\Debug\net8.0` folder, open `WorkingWithImages.GlobalUsings.g.cs`,
    and note that referencing the `SixLabors.ImageSharp` package adds three global
    namespace imports alongside the usual ones added by the .NET SDK, as shown in
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you reference older versions of `SixLabors.ImageSharp` like 2.0.0, then it
    does not do this so you must manually import those three namespaces in each code
    file. This feature is one reason why version 3.0 and later have a minimum requirement
    of .NET 6.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In `Program.cs`, delete the existing statements and then add statements to
    convert all the files in the `images` folder into grayscale thumbnails at one-tenth
    size, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the console app and note the images should be converted into grayscale
    thumbnails, as shown in the following partial output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the filesystem, open the appropriate `images` folder and note the much-smaller-in-bytes
    grayscale thumbnails, as shown in *Figure 6.2*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_06_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.2: Images after processing'
  prefs: []
  type: TYPE_NORMAL
- en: ImageSharp packages for drawing and the web
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'ImageSharp also has NuGet packages for programmatically drawing images and
    working with images on the web, as shown in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: '`SixLabors.ImageSharp.Drawing`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SixLabors.ImageSharp.Web`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**More Information**: Learn more details at the following link: [https://docs.sixlabors.com/](https://docs.sixlabors.com/).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Working with text and numbers using Humanizer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Humanizer manipulates text in `string` values, names of `enum` values, dates,
    times, numbers, and quantities.
  prefs: []
  type: TYPE_NORMAL
- en: Working with text
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The built-in `string` type has methods to manipulate text like `Substring`
    and `Trim`. But there are plenty of other common manipulations that we might want
    to perform on text. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: You might have an ugly string generated by some code and you want to make it
    look friendlier to display to a user. This is common with `enum` types that cannot
    use spaces in multi-word values.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You might build a web content management system, and when a user enters an article
    title, you need to convert what they enter into a format suitable for a URL path.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You might have a long `string` value that needs to be truncated to show in the
    limited space of a mobile user interface.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Humanizer case transformations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Complex transformations can be performed in sequence by passing multiple Humanizer
    transformations to the `Transform` method. Transforms implement the `IStringTransformer`
    or `ICulturedStringTransformer` interfaces so you can implement your own custom
    transforms.
  prefs: []
  type: TYPE_NORMAL
- en: 'The built-in transforms are all casing transformations, and they are listed
    in *Table 6.2* along with convenient alternative methods that extend the `string`
    type:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Transform** | **Description** | **Example** |'
  prefs: []
  type: TYPE_TB
- en: '| `To.LowerCase` | Transforms all characters in the `string` to lowercase.
    | the cat sat on the mat |'
  prefs: []
  type: TYPE_TB
- en: '| `To.UpperCase` | Transforms all characters in the `string` to uppercase.
    | THE CAT SAT ON THE MAT |'
  prefs: []
  type: TYPE_TB
- en: '| `To.TitleCase` | Transforms the first character of each word in the `string`
    to uppercase. | The Cat Sat on the Mat |'
  prefs: []
  type: TYPE_TB
- en: '| `To.SentenceCase` | Transforms the first character in the `string` to uppercase.
    It ignores periods (full stops) so it does not recognize sentences! | The cat
    sat on the mat |'
  prefs: []
  type: TYPE_TB
- en: 'Table 6.2: Humanizer casing transforms'
  prefs: []
  type: TYPE_NORMAL
- en: '**Good Practice**: It is important to consider the casing of the original text.
    If it is already uppercase, the title and sentence casing options will *not* convert
    to lowercase! You might need to transform to lowercase first, then transform to
    title or sentence case.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As well as calling the `Transform` method with a transform object like `To.TitleCase`,
    there are convenience methods for manipulating the case of text, as shown in *Table
    6.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **String extension method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `Titleize` | Equivalent to transforming with `To.TitleCase` |'
  prefs: []
  type: TYPE_TB
- en: '| `Pascalize` | Converts strings to upper camel case, also removing underscores
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Camelize` | Same as `Pascalize` except that the first character is lowercase
    |'
  prefs: []
  type: TYPE_TB
- en: 'Table 6.3: Humanizer text extension methods'
  prefs: []
  type: TYPE_NORMAL
- en: Humanizer spacing conversions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are convenient methods for manipulating the spacing of text, by adding
    underscores and dashes, as shown in *Table 6.4*:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **String extension method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `Underscore` | Separates the input words with an underscore |'
  prefs: []
  type: TYPE_TB
- en: '| `Dasherize`, `Hyphenate` | Replaces underscores with dashes (hyphens) in
    the string |'
  prefs: []
  type: TYPE_TB
- en: '| `Kebaberize` | Separates the input words with dashes (hyphens) |'
  prefs: []
  type: TYPE_TB
- en: 'Table 6.4: Humanizer spacing conversion methods'
  prefs: []
  type: TYPE_NORMAL
- en: Humanizer’s Singularize and Pluralize methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Humanizer has two extension methods for the `string` class that automate converting
    between the singular and plural versions of a word, as shown in *Table 6.5*:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **String extension method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `Singularize` | If the `string` contains a plural word, it is converted to
    the singular equivalent. |'
  prefs: []
  type: TYPE_TB
- en: '| `Pluralize` | If the `string` contains a singular word, it is converted to
    the plural equivalent. |'
  prefs: []
  type: TYPE_TB
- en: 'Table 6.5: Humanizer’s Singularize and Pluralize methods'
  prefs: []
  type: TYPE_NORMAL
- en: These methods are used by Microsoft Entity Framework Core to singularize and
    pluralize the names of entity classes and their members.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring text manipulations with a console app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s explore some examples of text manipulation using Humanizer:'
  prefs: []
  type: TYPE_NORMAL
- en: Use your preferred code editor to add a new **Console App** / `console` project
    named `HumanizingData` to the `Chapter06` solution. In Visual Studio 2022, set
    the startup project to the current selection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `HumanizingData` project, treat warnings as errors, globally and statically
    import the `System.Console` class, and add a package reference for `Humanizer`,
    as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We are referencing a `Humanizer` package that includes all languages. If you
    only need the English language, then you can reference `Humanizer.Core` instead.
    If you also need a subset of languages, reference specific language packages using
    the pattern `Humanizer.Core.<lang>`, for example, `Humanizer.Core.fr` for French.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Build the `HumanizingData` project to restore packages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a new class file to the project named `Program.Functions.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `Program.Functions.cs`, add statements to import the namespace for working
    with globalization, and to define a method to configure the console to enable
    easy switching of the current culture and enable the use of special characters,
    as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.cs`, delete the existing statements, and then call the `ConfigureConsole`
    method, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.Functions.cs`, add a statement to import the namespace for working
    with extension methods provided by Humanizer, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.Functions.cs`, add statements to define a method to output an original
    `string` and then the results of transforming it using the built-in casing transforms,
    as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.cs`, call the `OutputCasings` method with three different `string`
    values, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the code and view the result, as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.Functions.cs`, add statements to define a method that outputs an
    ugly `string` value using various Humanizer extension methods, as shown in the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.cs`, comment out the previous method calls and then add a statement
    to call the new method, as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the code and view the result, as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add a new class file to the project named `WondersOfTheAncientWorld.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the `WondersOfTheAncientWorld.cs` file, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.Functions.cs`, import the namespace for using the `enum` that we
    just defined, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.Functions.cs`, define a method to create the `WondersOfTheWorld`
    variable and output its name using various Humanizer extension methods, as shown
    in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.cs`, comment out the previous method call, and then add a call
    to `OutputEnumNames`, as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the code and view the result, as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note the `Truncate` method uses the single-character `…` (ellipsis) by default.
    If you ask to truncate to a length of 8, it can return the first seven characters
    followed by the ellipsis character. You can specify a different character using
    an overload of the `Truncate` method.
  prefs: []
  type: TYPE_NORMAL
- en: Working with numbers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now let’s see how Humanizer can help us with numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Program.Functions.cs`, define a method to create some numbers and then
    output them using various Humanizer extension methods, as shown in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.cs`, comment out the previous method call and add a call to `NumberFormatting`,
    as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the code and view the result, as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Humanizer’s default vocabulary is quite decent, but it does not correctly pluralize
    attorney general (the plural is *attorneys general*) or biceps (the singular is
    *biceps* and the plural is *bicepses*).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In `Program.Functions.cs`, import the namespace for working with Humanizer
    vocabularies, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.Functions.cs`, at the top of the `NumberFormatting` method, add
    statements to register two irregular words, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the code, view the result, and note that the two irregular words now output
    correctly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Working with dates and times
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now let’s see how Humanizer can help us with dates and times:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Program.Functions.cs`, define a method to get the current date and time
    and some number of days, and then output them using various Humanizer extension
    methods, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.cs`, comment out the previous method call and add a call to `DateTimeFormatting`,
    as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the code and view the result, as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.cs`, specify the French language and region when configuring the
    console, as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the code, view the result, and note that the text is localized to French.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Logging with Serilog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although .NET includes logging frameworks, third-party logging providers give
    more power and flexibility by using **structured event data**. Serilog is the
    most popular.
  prefs: []
  type: TYPE_NORMAL
- en: Structured event data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most systems write plain text messages to their logs.
  prefs: []
  type: TYPE_NORMAL
- en: Serilog can be told to write serialized structured data to the log. The `@`
    symbol prefixing a parameter tells Serilog to serialize the object passed in,
    instead of just the result of calling the `ToString` method.
  prefs: []
  type: TYPE_NORMAL
- en: Later, that complex object can be queried for improved search and sort capabilities
    in the logs.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'You can learn more about how Serilog handles structured data at the following
    link: [https://github.com/serilog/serilog/wiki/Structured-Data](https://github.com/serilog/serilog/wiki/Structured-Data).'
  prefs: []
  type: TYPE_NORMAL
- en: Serilog sinks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All logging systems need to record the log entries somewhere. That could be
    to the console output, a file, or a more complex data store like a relational
    database or cloud data store. Serilog calls these **sinks**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Serilog has hundreds of official and third-party sink packages for all the
    possible places you might want to record your logs. To use them, just include
    the appropriate package. The most popular are shown in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: '`serilog.sinks.file`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`serilog.sinks.console`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`serilog.sinks.periodicbatching`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`serilog.sinks.debug`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`serilog.sinks.rollingfile` (deprecated; use `serilog.sinks.file` instead)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`serilog.sinks.applicationinsights`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`serilog.sinks.mssqlserver`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are more than 470 packages currently listed on Microsoft’s public NuGet
    feed: [https://www.nuget.org/packages?q=serilog.sinks](https://www.nuget.org/packages?q=serilog.sinks).'
  prefs: []
  type: TYPE_NORMAL
- en: Logging to the console and a rolling file with Serilog
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s start:'
  prefs: []
  type: TYPE_NORMAL
- en: Use your preferred code editor to add a new **Console App** / `console` project
    named `Serilogging` to a `Chapter06` solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Serilogging` project, treat warnings as errors, globally and statically
    import the `System.Console` class, and add a package reference for `Serilog`,
    including sinks for `console` and `file` (which also supports rolling files),
    as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Build the `Serilogging` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `Serilogging` project, add a new folder named `Models`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Serilogging` project, in the `Models` folder, add a new class file
    named `ProductPageView.cs`, and modify its contents, as shown in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.cs`, delete the existing statements and then import some namespaces
    for working with Serilog, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.cs`, create a logger configuration that will write to the console
    as well as configure a rolling interval that means a new file is created each
    day, and write various levels of log entries, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the console app and note the messages, as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the `logYYYYMMDD.txt` file, where `YYYY` is the year, `MM` is the month,
    and `DD` is the day, and note it contains the same messages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For Visual Studio 2022, the log file will be written to the `Serilogging\bin\Debug\net8.0`
    folder.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For Visual Studio Code and `dotnet run`, the log file will be written to the
    `Serilogging` folder.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**More Information**: Learn more details at the following link: [https://serilog.net/](https://serilog.net/).'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Good Practice**: Disable logging when it is not needed. Logging can get costly
    fast. For example, one organization was spending $10,000 per month on cloud resources,
    much more than predicted, and they didn’t know why. It turned out they were logging
    every SQL statement executed in production. By “flipping a switch” to stop that
    logging they saved $8,500 per month! You can read Milan Jovanović’s story at the
    following link: [https://www.linkedin.com/posts/milan-jovanovic_i-helped-a-team-save-100k-in-azure-cloud-activity-7109887614664474625-YDiU/](https://www.linkedin.com/posts/milan-jovanovic_i-helped-a-team-save-100k-in-azure-cloud-activity-7109887614664474625-YDiU/).'
  prefs: []
  type: TYPE_NORMAL
- en: Mapping between objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most boring parts of being a programmer is mapping between objects.
    It is common to need to integrate systems or components that have conceptually
    similar objects but with different structures.
  prefs: []
  type: TYPE_NORMAL
- en: Models for data are different for different parts of an application. Models
    that represent data in storage are often called **entity models**. Models that
    represent data that must be passed between layers are often called **data transfer
    objects** (**DTOs**). Models that represent only the data that must be presented
    to a user are often called **view models**. All these models are likely to have
    commonalities but different structures.
  prefs: []
  type: TYPE_NORMAL
- en: '**AutoMapper** is a popular package for mapping objects because it has conventions
    that make the work as easy as possible. For example, if you have a source member
    called `CompanyName`, it will be mapped to a destination member with the name
    `CompanyName`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'AutoMapper’s creator, Jimmy Bogard, has written an article about its design
    philosophy that is worth reading, available at the following link: [https://jimmybogard.com/automappers-design-philosophy/](https://jimmybogard.com/automappers-design-philosophy/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see an example of AutoMapper in action. You will create four projects:'
  prefs: []
  type: TYPE_NORMAL
- en: A class library for the entity and view models.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A class library to create mapper configurations for reuse in unit tests and
    actual projects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A unit test project to test the mappings.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A console app to perform a live mapping.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will construct an example object model that represents an e-commerce website
    customer and their shopping cart with a couple of items, and then map it to a
    summary view model to present to the user.
  prefs: []
  type: TYPE_NORMAL
- en: Defining models for an AutoMapper configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To test the mapping, we will define some `record` types. As a reminder, a `record`
    (or `record class`) is a reference type that has value-based equality. A `class`
    is a reference type that has memory address-based equality (except for `string`,
    which overrides this behavior).
  prefs: []
  type: TYPE_NORMAL
- en: 'It is good practice to always validate your configuration for mappings before
    using them, so we will start by defining some models and a mapping between them,
    and then create a unit test for the mappings:'
  prefs: []
  type: TYPE_NORMAL
- en: Use your preferred code editor to add a new **Class Library** / `classlib` project
    named `MappingObjects.Models` to the `Chapter06` solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `MappingObjects.Models` project, delete the file named `Class1.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `MappingObjects.Models` project, add a new class file named `Customer.cs`
    and modify its contents to define an immutable record type named `Customer` by
    using constructor syntax, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `MappingObjects.Models` project, add a new class file named `LineItem.cs`
    and modify its contents, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `MappingObjects.Models` project, add a new class file named `Cart.cs`
    and modify its contents, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `MappingObjects.Models` project, add a new class file named `Summary.cs`
    in the `Northwind.ViewModels` namespace (not `Northwind.EntityModels`), delete
    any existing statements, and then define a record type that can have its properties
    set *after* instantiating with a default parameterless constructor, as shown in
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For the entity models, we used `record class` types defined using the constructor
    syntax to make them immutable. But an instance of `Summary` will need to be created
    using a default parameterless constructor and then its members set by AutoMapper.
    Therefore, it must be a `record class` with public properties that can be set
    during initialization but not after that. To do this, we use the `init` keyword.
  prefs: []
  type: TYPE_NORMAL
- en: Defining mappers for an AutoMapper configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we can define the mappings between models:'
  prefs: []
  type: TYPE_NORMAL
- en: Use your preferred code editor to add a new **Class Library** / `classlib` project
    named `MappingObjects.Mappers` to the `Chapter06` solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `MappingObjects.Mappers` project, treat warnings as errors, add a reference
    to the latest `AutoMapper` package, and add a reference to the `Models` project,
    as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Build the `MappingObjects.Mappers` project to restore packages and compile referenced
    projects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `MappingObjects.Mappers` project, delete the file named `Class1.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `MappingObjects.Mappers` project, add a new class file named `CartToSummaryMapper.cs`
    and modify its contents to create a mapper configuration that maps the `FullName`
    of the `Summary` to a combination of the `FirstName` and `LastName` from `Customer`,
    as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Performing tests for an AutoMapper configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we can define unit tests for the mapper:'
  prefs: []
  type: TYPE_NORMAL
- en: Use your preferred code editor to add a new **xUnit Test Project** / `xunit`
    named `MappingObjects.Tests` to the `Chapter06` solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `MappingObjects.Tests` project file, add a package reference to `AutoMapper`,
    as shown highlighted in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `MappingObjects.Tests` project file, add project references to `MappingObjects.Models`
    and `MappingObjects.Mappers`, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Build the `MappingObjects.Tests` project to restore packages and build referenced
    projects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `MappingObjects.Tests` project, rename `UnitTest1.cs` to `TestAutoMapperConfig.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the contents of `TestAutoMapperConfig.cs` to get the mapper and then
    assert that the mapping is complete, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the test:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Visual Studio 2022, navigate to **Test** | **Run All Tests**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In Visual Studio Code, in **Terminal**, enter `dotnet test`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Note the test fails because the `Total` member of the `Summary` view model
    is unmapped, as shown in *Figure 6.3*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_06_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.3: The test fails because the Total member is unmapped'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `MappingObjects.Mappers` project, in the mapper configuration, after
    the mapping for the `FullName` member, add a mapping for the `Total` member, as
    shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the test and note that, this time, it passes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Performing live mappings between models
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have validated the configuration of our mapping, we can use it
    in a live console app:'
  prefs: []
  type: TYPE_NORMAL
- en: Use your preferred code editor to add a new **Console App** / `console` project
    named `MappingObjects.Console` to the `Chapter06` solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `MappingObjects.Console` project, treat warnings as errors, globally
    and statically import the `System.Console` class, add a project reference for
    the two class libraries, and add a package reference for `AutoMapper`, as shown
    in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Build the `MappingObjects.Console` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `Program.cs`, delete the existing statements, add some statements to construct
    an example object model that represents a customer and their shopping cart with
    a couple of items, and then map it to a summary view model to present to the user,
    as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the console app and note the successful result, as shown in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Optionally, write a unit test to perform a similar check as the preceding code
    to assert that the `Summary` has the correct full name and total.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Good Practice**: There is a debate about when AutoMapper should be used that
    you can read about in an article (which has more links at the bottom) at the following
    link: [https://www.anthonysteele.co.uk/AgainstAutoMapper.html](https://www.anthonysteele.co.uk/AgainstAutoMapper.html).'
  prefs: []
  type: TYPE_NORMAL
- en: '**More Information**: Learn more details at the following link: [https://automapper.org/](https://automapper.org/).'
  prefs: []
  type: TYPE_NORMAL
- en: Making fluent assertions in unit testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**FluentAssertions** are a set of extension methods that make writing and reading
    the code in unit tests and the error messages of failing tests more similar to
    a natural human language like English.'
  prefs: []
  type: TYPE_NORMAL
- en: It works with most unit testing frameworks, including xUnit. When you add a
    package reference for a test framework, FluentAssertions will automatically find
    the package and use it for throwing exceptions.
  prefs: []
  type: TYPE_NORMAL
- en: After importing the `FluentAssertions` namespace, call the `Should()` extension
    method on a variable and then one of the hundreds of other extension methods to
    make assertions in a human-readable way. You can chain multiple assertions using
    the `And()` extension method or have separate statements, each calling `Should()`.
  prefs: []
  type: TYPE_NORMAL
- en: Making assertions about strings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s start by making assertions about a single `string` value:'
  prefs: []
  type: TYPE_NORMAL
- en: Use your preferred code editor to add a new **xUnit Test Project** / `xunit`
    named `FluentTests` to a `Chapter06` solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `FluentTests` project, add a package reference to `FluentAssertions`,
    as highlighted in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`FluentAssertions` `7.0` should be available by the time this book is published.
    You can check at the following link: [https://www.nuget.org/packages/FluentAssertions/](https://www.nuget.org/packages/FluentAssertions/).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Build the `FluentTests` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename `UnitTest1.cs` to `FluentExamples.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `FluentExamples.cs`, import the namespace to make the `FluentAssertions`
    extension methods available and write a test method for a `string` value, as shown
    in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the test:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Visual Studio 2022, navigate to **Test** | **Run All Tests**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In Visual Studio Code, in **Terminal**, enter `dotnet test`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Note the test passes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `TestString` method, for the `city` variable, delete the last `n` in
    `London`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the test and note it fails, as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add the `n` back in `London`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the test again to confirm the fix.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Making assertions about collections and arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now let’s continue by making assertions about collections and arrays:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `FluentExamples.cs`, add a test method to explore collection assertions,
    as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the tests and note the collections test fails, as shown in the following
    output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Change `Charlie` to `Charly`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the tests and note they succeed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Making assertions about dates and times
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s start by making assertions about date and time values:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `FluentExamples.cs`, import the namespace for adding more extension methods
    for named months and other useful date/time-related functionality, as shown in
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a test method to explore date/time assertions, as shown in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the tests and note the date/time test fails, as shown in the following
    output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For the `due` variable, change the hour from `11` to `13`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the tests and note that the date/time test succeeds.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**More Information**: You can learn more details about FluentAssertions at
    the following link: [https://fluentassertions.com/](https://fluentassertions.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: Validating data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**FluentValidation** allows you to define strongly typed validation rules in
    a human-readable way.'
  prefs: []
  type: TYPE_NORMAL
- en: You create a validator for a type by inheriting from `AbstractValidator<T>`,
    where `T` is the type that you want to validate. In the constructor, you call
    the `RuleFor` method to define one or more rules. If a rule should run only in
    specified scenarios, then you call the `When` method.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the built-in validators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'FluentValidation ships with lots of useful built-in validator extension methods
    for defining rules, as shown in the following partial list, some of which you
    will explore in the coding task in this section:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Null`, `NotNull`, `Empty`, `NotEmpty`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Equal`, `NotEqual`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Length`, `MaxLength`, `MinLength`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LessThan`, `LessThanOrEqualTo`, `GreaterThan`, `GreaterThanOrEqualTo`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`InclusiveBetween`, `ExclusiveBetween`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ScalePrecision`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Must` (aka predicate)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Matches` (aka regular expression), `EmailAddress`, `CreditCard`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IsInEnum`, `IsEnumName`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing custom validation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The easiest way to create custom rules is to use `Predicate` to write a custom
    validation function. You can also call the `Custom` method to get maximum control.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing validation messages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are a few extension methods that are used to customize the validation
    messages’ output when data fails to pass the rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '`WithName`: Change the name used for a property in the message.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`WithSeverity`: Change the default severity from `Error` to `Warning` or some
    other level.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`WithErrorCode`: Assign an error code that can be output in the message.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`WithState`: Add some state that can be used in the message.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`WithMessage`: Customize the format of the default message.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining a model and validator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s see an example of FluentValidation in action. You will create three projects:'
  prefs: []
  type: TYPE_NORMAL
- en: A class library for a model to validate that represents an order made by a customer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A class library for the validator for the model.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A console app to perform a live validation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s start:'
  prefs: []
  type: TYPE_NORMAL
- en: Use your preferred code editor to add a new **Class Library** / `classlib` project
    named `FluentValidation.Models` to the `Chapter06` solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `FluentValidation.Models` project, delete the file named `Class1.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `FluentValidation.Models` project, add a new class file named `CustomerLevel.cs`
    and modify its contents to define an `enum` with three customer levels, `Bronze`,
    `Silver`, and `Gold`, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `FluentValidation.Models` project, add a new class file named `Order.cs`
    and modify its contents, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use your preferred code editor to add a new **Class Library** / `classlib` project
    named `FluentValidation.Validators` to the `Chapter06` solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `FluentValidation.Validators` project, add a project reference to the
    `Models` project and a package reference to the `FluentValidation` package, as
    shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Build the `FluentValidation.Validators` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `FluentValidation.Validators` project, delete the file named `Class1.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `FluentValidation.Validators` project, add a new class file named `OrderValidator.cs`
    and modify its contents, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Testing the validator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we are ready to create a console app to test the validator on the model:'
  prefs: []
  type: TYPE_NORMAL
- en: Use your preferred code editor to add a new **Console App** / `console` project
    named `FluentValidation.Console` to a `Chapter06` solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `FluentValidation.Console` project, treat warnings as errors, globally
    and statically import the `System.Console` class, and add project references for
    `FluentValidation.Validators` and `FluentValidation.Models`, as shown in the following
    markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Build the `FluentValidation.Console` project to build referenced projects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `Program.cs`, delete the existing statements, and then add statements to
    create an order and validate it, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the console app and note the failed rules, as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Comment out the two statements that set the culture to see the output in your
    local language and region. For example, if you are in France (`fr-FR`), it would
    look like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set some property values for the order, as shown highlighted in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Set the current culture to US English to make sure you see the same output as
    in this book. You can experiment with your own culture later.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the console app and note the failed rules, as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify some property values for the order, as shown highlighted in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the console app and note the order is now valid, as shown in the following
    output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Validating data with ASP.NET Core
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For automatic data validation with ASP.NET Core, FluentValidation supports .NET
    Core 3.1 and later.
  prefs: []
  type: TYPE_NORMAL
- en: '**More Information**: Learn more details at the following link: [https://cecilphillip.com/fluent-validation-rules-with-asp-net-core/](https://cecilphillip.com/fluent-validation-rules-with-asp-net-core/).'
  prefs: []
  type: TYPE_NORMAL
- en: Generating PDFs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most common questions I get when teaching C# and .NET is, “What open-source
    library is available to generate PDF files?”
  prefs: []
  type: TYPE_NORMAL
- en: There are many licensed libraries for generating PDF files, but over the years,
    it has been difficult to find cross-platform open-source ones.
  prefs: []
  type: TYPE_NORMAL
- en: QuestPDF says, “*If you are consuming the QuestPDF library as a Direct Package
    Dependency for usage in a Closed Source software in the capacity of a for-profit
    company/individual with more than 1M USD annual gross revenue, you must purchase
    the QuestPDF Professional or Enterprise License, depending on the number of software
    developers. Please refer to the QuestPDF License and Pricing webpage for more
    details. (*[https://www.questpdf.com/pricing.html](https://www.questpdf.com/pricing.html)*)*”
  prefs: []
  type: TYPE_NORMAL
- en: The older 2022.12.X release will always be available under the MIT license,
    free for commercial usage. If you want to support library development, please
    consider purchasing the Professional License for version 2023.1.X or later.
  prefs: []
  type: TYPE_NORMAL
- en: Using QuestPDF on Apple silicon Macs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: QuestPDF uses SkiaSharp, which has implementations for Windows, Mac, and Linux
    operating systems. The console app that you create in this section to generate
    PDFs is therefore cross-platform. But on an Apple silicon Mac, like my Mac mini
    M1, I had to install the x64 version of .NET SDK and start the project using `dotnet
    new -a x64`. This tells the .NET SDK to use the x64 architecture, otherwise the
    SkiaSharp libraries give an error because they have not yet been built to target
    ARM64.
  prefs: []
  type: TYPE_NORMAL
- en: Creating class libraries to generate PDF documents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s see an example of QuestPDF in action. You will create three projects:'
  prefs: []
  type: TYPE_NORMAL
- en: A class library for a model that represents a catalog of product categories
    with names and images.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A class library for the document template.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A console app to perform a live generation of a PDF file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s start:'
  prefs: []
  type: TYPE_NORMAL
- en: Use your preferred code editor to add a new **Class Library** / `classlib` project
    named `GeneratingPdf.Models` to the `Chapter06` solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `GeneratingPdf.Models` project, delete the file named `Class1.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `GeneratingPdf.Models` project, add a new class file named `Category.cs`
    and modify its contents to define a class with two properties for the name and
    identifier of a category, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Later, you will create an `images` folder with filenames that use the pattern
    `categoryN.jpeg`, where `N` is a number from 1 to 8 that matches the `CategoryId`
    values.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the `GeneratingPdf.Models` project, add a new class file named `Catalog.cs`
    and modify its contents to define a class with a property to store the eight categories,
    as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use your preferred code editor to add a new **Class Library** / `classlib` project
    named `GeneratingPdf.Document` to the `Chapter06` solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `GeneratingPdf.Document` project, add a package reference for `QuestPDF`
    and a project reference for the `Models` class library, as shown in the following
    markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Build the `GeneratingPdf.Document` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `GeneratingPdf.Document` project, delete the file named `Class1.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `GeneratingPdf.Document` project, add a new class file named `CatalogDocument.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `CatalogDocument.cs`, define a class that implements the `IDocument` interface
    to define a template with a header and a footer, and then output the eight categories,
    including name and image, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Creating a console app to generate PDF documents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we can create a console app project that will use the class libraries to
    generate a PDF document:'
  prefs: []
  type: TYPE_NORMAL
- en: Use your preferred code editor to add a new **Console App** / `console` project
    named `GeneratingPdf.Console` to a `Chapter06` solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `GeneratingPdf.Console` project, create an `images` folder and download
    the eight category images 1 to 8 from the following link to it: [https://github.com/markjprice/apps-services-net8/tree/master/images/Categories](https://github.com/markjprice/apps-services-net8/tree/master/images/Categories).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you are using Visual Studio 2022 or JetBrains Rider, then the `images` folder
    and its files must be copied to the `GeneratingPdf.Console\bin\Debug\net8` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Solution Explorer**, select all the images.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Properties**, set **Copy To Output Directory** to **Copy Always**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the project file and note the `<ItemGroup>` entries that will copy the
    eight images to the correct folder, as partially shown in the following markup:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `GeneratingPdf.Console` project, treat warnings as errors, globally
    and statically import the `System.Console` class, and add a project reference
    for the `Document` template class library, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Build the `GeneratingPdf.Console` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `Program.cs`, delete the existing statements and then add statements to
    create a catalog model, pass it to a catalog document, generate a PDF file, and
    then attempt to open the file using the appropriate operating system command,
    as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `Process` class and its `Start` method should also be able to start processes
    on Mac and Linux, but getting the paths right can be tricky, so I’ve left that
    as an optional exercise for the reader. You can learn more about the `Process`
    class and its `Start` method at the following link: [https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.process.start](https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.process.start).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Run the console app and note the PDF file generated, as shown in *Figure 6.4*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_06_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.4: A PDF file generated from C# code'
  prefs: []
  type: TYPE_NORMAL
- en: '**More Information**: Learn more details at the following link: [https://www.questpdf.com/](https://www.questpdf.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: Practicing and exploring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Test your knowledge and understanding by answering some questions, getting some
    hands-on practice, and doing deeper research into the topics in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 6.1 – Test your knowledge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the web to answer the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: What is the most downloaded third-party `NuGet` package of all time?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What method do you call on the `ImageSharp Image` class to make a change like
    resizing the image or replacing colors with grayscale?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is a key benefit of using `Serilog` for logging?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is a Serilog sink?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Should you always use a package like `AutoMapper` to map between objects?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which `FluentAssertions` method should you call to start a fluent assertion
    on a value?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which `FluentAssertions` method should you call to assert that all items in
    a sequence conform to a condition, like a `string` item must have less than six
    characters?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which `FluentValidation` class should you inherit from to define a custom validator?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With `FluentValidation`, how can you set a rule to only apply in certain conditions?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With `QuestPDF`, which interface must you implement to define a document for
    a PDF and what methods of that interface must you implement?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exercise 6.2 – Explore topics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the links on the following page to learn more details about the topics
    covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-6---implementing-popular-third-party-libraries](https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-6---implementing-popular-third-party-libraries)'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you explored some third-party libraries that are popular with
    .NET developers to perform functions, including:'
  prefs: []
  type: TYPE_NORMAL
- en: Manipulating images using a Microsoft-recommended third-party library named
    ImageSharp.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making text, numbers, dates, and times friendlier with Humanizer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging structured data with Serilog.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mapping between objects, for example, entity models to view models.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making fluent assertions in unit testing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validating data in a local culture language-readable way.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating a PDF file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to handle internationalization with dates
    and times and localization, including a new type in .NET 8 for making it easier
    to unit test components with a dependency on the current time.
  prefs: []
  type: TYPE_NORMAL
- en: Learn more on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the author, and learn about new releases – follow the QR code
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/apps_and_services_dotnet8](https://packt.link/apps_and_services_dotnet8)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code3048220001028652625.png)'
  prefs: []
  type: TYPE_IMG
