["```cs\nusing UnityEngine;\n[System.Serializable]\npublic struct ImageInfo\n{\n    public Texture texture;\n    public int width;\n    public int height;\n}\npublic class ImagesData : MonoBehaviour\n{\n    public ImageInfo[] images;\n}\n```", "```cs\nusing UnityEngine;\npublic class FramedPhoto : MonoBehaviour\n{\n    [SerializeField] Transform scalerObject;\n    [SerializeField] GameObject imageObject;\n    ImageInfo imageInfo;\n    public void SetImage(ImageInfo image)\n    {\n        imageInfo = image;\n        Renderer renderer =             imageObject.GetComponent<Renderer>();\n        Material material = renderer.material;\n        material.SetTexture(\"_BaseMap\", imageInfo.texture);\n    }\n}\n```", "```cs\n    using System.Collections.Generic;\n    using UnityEngine;\n    using UnityEngine.InputSystem;\n    using UnityEngine.XR.ARFoundation;\n    using UnityEngine.XR.ARSubsystems;\n    public class AddPictureMode : MonoBehaviour\n    {\n        [SerializeField] ARRaycastManager raycaster;\n        [SerializeField] GameObject placedPrefab;\n        List<ARRaycastHit> hits = new List<ARRaycastHit>();\n        void OnEnable()\n        {\n            UIController.ShowUI(\"AddPicture\");\n        }\n    ```", "```cs\n        public void OnPlaceObject(InputValue value)\n        {\n            Vector2 touchPosition = value.Get<Vector2>();\n            PlaceObject(touchPosition);\n        }\n        void PlaceObject(Vector2 touchPosition)\n        {\n            if (raycaster.Raycast(touchPosition, hits,            TrackableType.PlaneWithinPolygon))\n            {\n                Pose hitPose = hits[0].pose;\n                Instantiate(placedPrefab, hitPose.position,                hitPose.rotation);\n                InteractionController.EnableMode(\"Main\");\n            }\n        }\n    }\n    ```", "```cs\nInstantiate(placedPrefab, hitPose.position, hitPose.rotation);\n```", "```cs\n        public ImageInfo imageInfo;\n        [SerializeField] float defaultScale = 0.5f;\n    ```", "```cs\n        void PlaceObject(Vector2 touchPosition)\n        {\n            if (raycaster.Raycast(touchPosition, hits,            TrackableType.PlaneWithinPolygon))\n            {\n                ARRaycastHit hit = hits[0];\n                Vector3 position = hit.pose.position;\n                Vector3 normal = -hit.pose.up;\n                Quaternion rotation = Quaternion.LookRotation                 (normal, Vector3.up);\n                GameObject spawned = Instantiate(placedPrefab,                position, rotation);\n                FramedPhoto picture =                 spawned.GetComponent<FramedPhoto>();\n                picture.SetImage(imageInfo);\n                spawned.transform.localScale = new                Vector3(defaultScale, defaultScale, 1.0f);\n                InteractionController.EnableMode(\"Main\");\n            }\n        }\n    ```", "```cs\nusing UnityEngine;\npublic class SelectImageMode : MonoBehaviour\n{\n    void OnEnable()\n    {\n        UIController.ShowUI(\"SelectImage\");\n    }\n}\n```", "```cs\nusing UnityEngine;\nusing UnityEngine.UI;\npublic class ImageButtons : MonoBehaviour\n{\n    [SerializeField] GameObject imageButtonPrefab;\n    [SerializeField] ImagesData imagesData;\n    [SerializeField] AddPictureMode addPicture;\n    void Start()\n    {\n        for (int i = transform.childCount - 1; i >= 0; i--)\n        {\n            GameObject.Destroy(                transform.GetChild(i).gameObject);\n        }\n        foreach (ImageInfo image in imagesData.images)\n        {\n            GameObject obj =                 Instantiate(imageButtonPrefab,transform);\n            RawImage rawimage = obj.GetComponent<RawImage>();\n            rawimage.texture = image.texture;\n            Button button = obj.GetComponent<Button>();\n            button.onClick.AddListener(() => OnClick(image));\n        }\n    }\n    void OnClick(ImageInfo image)\n    {\n        addPicture.imageInfo = image;\n        InteractionController.EnableMode(\"AddPicture\");\n    } \n}\n```", "```cs\n    public static Vector2 AspectRatio(float width, float         height)\n    {\n        Vector2 scale = Vector2.one;\n        if (width == 0 || height == 0) \n            return scale;\n        if (width > height)\n        {\n            scale.x = 1f;\n            scale.y = height / width;\n        }\n        else\n        {\n            scale.x = width / height;\n            scale.y = 1f;\n        }\n        return scale;\n    }\n```", "```cs\n    public void SetImage(ImageData image)\n    {\n        imageData = image;\n        Renderer renderer =             imageObject.GetComponent<Renderer>();\n        Material material = renderer.material;\n        material.SetTexture(\"_BaseMap\", imageData.texture);\n        AdjustScale();\n    }\n    public void AdjustScale()\n    {\n        Vector2 scale = ImagesData.AspectRatio(imageInfo.width,            imageInfo.height);\n        scalerObject.localScale = new Vector3(scale.x, scale.y,            1f);\n    }\n```"]