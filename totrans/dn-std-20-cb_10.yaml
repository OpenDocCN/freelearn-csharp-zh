- en: Let’s Fine-Tune Our Library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will be looking at these recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Logging the library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a .NET Core console application to use the library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Informing the end user – exception handling and error messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Visual Studio 2017 diagnostics and debugging tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Readers should have a basic knowledge of C#. They should also have a basic knowledge
    of using Visual Studio, installing packages using NuGet, and referencing libraries
    within projects from other projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code files for this chapter can be found on GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/DotNET-Standard-2-Cookbook/tree/master/Chapter10/Chapter10.Logging](https://github.com/PacktPublishing/DotNET-Standard-2-Cookbook/tree/master/Chapter10/Chapter10.Logging)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://goo.gl/HNVQMh](https://goo.gl/HNVQMh)'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will be looking at how to fine-tune our .NET Standard 2.0
    library, how to create a log, and how to use the debugging tools available in
    Visual Studio 2017\. We will also look at exception handling. Throughout previous
    chapters, we have been looking at how to build a library and its utilization.
    In this chapter, we are going to make that library good and solid.
  prefs: []
  type: TYPE_NORMAL
- en: A library logs things itself
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will be using a text log file to store details about how
    the library interacts with other programs. This is a good practice; to log things
    as you go. Then, you will be able to pinpoint errors and other important things,
    such as usage of the library.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure you have the latest version of Visual Studio 2017 installed on your
    system. Let's get started on our recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Visual Studio 2017.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click File | New | Projectto create a project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the New Project dialog box, expand the Other Project Types node in the left-hand
    pane and select Visual Studio Solutions. In the right-hand pane, select Blank
    Solution**.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Name: textbox, type `Chapter10.Logging`, and, in the Location: textbox,
    select a path from the drop-down box or click on the Browse... button to locate
    a path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/035fee47-ea1d-434a-973b-7147f337d760.png)'
  prefs: []
  type: TYPE_IMG
- en: Click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, the Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e0c73bf8-203a-4665-a2fb-299609fb9714.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, right-click on the `Chapter10.Logging` label in the Solution Explorer and
    select Add | New Project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the New Project dialog box, expand the Visual C# node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select .NET Standard in the left-hand pane and Class Library (.NET Standard)
    in the right-hand pane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bf0d9236-6a2b-4645-9551-4b9d862b980b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Name: textbox, type `Chapter10.Logging.LogLib`, leave the other defaults
    as they are, and click OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ffa51c39-9f81-4f6f-8023-63c9812c63b5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, the Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c64bff24-6840-404c-97a2-1ab5aed72d0f.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, select `Class1.cs` in the Solution Explorer and press *F2* to rename the
    file `LoggerDemo.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Answer Yes in the confirmation dialog box that asks to rename the class name
    as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the `LoggerDemo.cs` label in the Solution Explorer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s scroll up in the code window and add the following `using` directive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, create two class-level variables to hold the filename and the `StreamWriter`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, create the default constructor method as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, create this `private`method to write log details to the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Create these three `public` methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Press *Ctrl* + *Shift* + *B* to build the solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In steps 1 to 11, we created a blank solution and added a .NET Standard 2.0
    library to the solution. In these steps, we assigned proper names to the solution
    and to the library. In steps 12 and 13, we renamed the existing `Class1.cs` created
    by Visual Studio. In step 15, we created a `using` directive to access the file
    operations.
  prefs: []
  type: TYPE_NORMAL
- en: In step 16, we created two `private` variables to hold the filename and the
    `StreamWriter` class. In step 17, we created the default constructor and we are
    calling the `WriteLog()` method we created in step 18\. In step 19, we created
    three test methods to demonstrate logging. Finally, in step 20, we performed a
    quick build to check for syntax.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a .NET Core console application to use the library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will be creating a .NET Core console application to use the
    library from the previous recipe. You can also try this recipe in macOS or Linux,
    since .NET Core is cross-platform.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure you have completed the previous recipe and that it builds successfully.
    Let's open the solution and get ready.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Visual Studio 2017.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, open the solution from the previous recipe. Click File | Open | Open Project/Solution, or
    press *Ctrl* + *Shift* + *O*, and select the `Chapter10.Logging` solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Ctrl* + *Shift* + *B* for a quick build to check that everything is fine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the `Chapter10.Logging` solution label. Click File | Add | New Project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Add New Project template dialog box, expand the Visual C# node in the
    left-hand pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select .NET Core and select Console App (.NET Core) in the right-hand pane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6143722b-69f8-41ca-81b6-8003ecf900b2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Name: textbox, type `Chapter10.Logging.LogCore` as the name of the project.
    The rest of the fields can be left as they are:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2e02cb5f-c6e7-409f-8156-61bb793dc548.png)'
  prefs: []
  type: TYPE_IMG
- en: Click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, the Solution Explorer (press *Ctrl* + *Alt* + *L*) should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2cc47abf-74d8-4d9e-ac94-d2a7462391cb.png)'
  prefs: []
  type: TYPE_IMG
- en: Right-click on the Dependencies label under `Chapter10.Logging.LogCore`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Add Reference.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Reference Manager, click on the Projects label in the right-hand pane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2b417b1b-aba3-47cc-891c-61e641442f6c.png)'
  prefs: []
  type: TYPE_IMG
- en: Check the `Chapter10.Logging.LogLib`project in the left-hand pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, double-click on the `Program.cs` label in the Solution Explorer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll up until you see the `using` directives.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following reference next to the last line of `using` directives:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, replace the existing code in the `Main()` method with this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Press *F5* to debug the code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5b57dfd9-1fd0-4de8-aafb-7db8a976a40a.png)'
  prefs: []
  type: TYPE_IMG
- en: Press *Enter* to exit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will also see a `lib_log.txt` file created inside the `bin/Debug` folder
    (make sure you have clicked Show All Files):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/678d390b-ab8c-4e1d-b32b-d80ac065ccb9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `lib_log.txt` file should have the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3cf2b241-8e03-4898-be5e-32e05c5dff26.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In steps 1 to 10, we opened the solution from the previous recipe and added
    a .NET Core console application. In these steps, we gave it a proper name. In
    step 17, we added the code-level reference to the library. In step 18, we created
    the code inside the `Main` method. In the first line, we created an instance of
    the `LoggerDemo` class and stored it in a variable. In the next few lines, we
    executed the `public` methods of `CallMethod1()`, `CallMethod2()`, and `CallMethod3()`.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, in steps 19 and 20, we executed the code and tested it. In steps 21
    and 22, we investigated the text file created from the library.
  prefs: []
  type: TYPE_NORMAL
- en: Informing the end user – Exception handling and error messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will be looking at exception handling inside a .NET class
    library. We will be reusing the same library created in the first recipe of this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure you have completed the two recipes from this chapter. Open the solution
    and perform a quick build to check that everything is fine and compiles well.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Visual Studio 2017.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, open the solution from the previous recipe. Click File | Open | Open Project/Solution, or
    press *Ctrl* + *Shift* + *O*, and select the `Chapter10.Logging` solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Ctrl* + *Shift* + *B* for a quick build to check that everything is fine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The Solution Explorer should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0e30766f-9714-4c11-8b94-6466e21015f8.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, double-click on the `LoggerDemo.cs` label to open the code window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down until you reach the `WriteLog()` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the current code with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now, click on the .NET Core console application project and press *F5* to test.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In steps 1 to 5, we opened the existing solution. In step 7, we added exception
    handling to the `WriteLog()` method in the library. In the first line of code,
    we added the keyword `try`**. **Inside it, we created the code that creates the
    text file. Then, we caught a `FileNotFoundException` in the first `catch` clause.
    This is a good practice; to catch the exact exception. If you have caught all
    exceptions, then you can catch the default `exception`.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we have used a `finally` clause to close the file stream. The `finally`
    clause will always execute inside a `try...catch` block. It's a good practice
    to include the code for a cleanup inside a `finally` clause.
  prefs: []
  type: TYPE_NORMAL
- en: Using Visual Studio 2017 diagnostics and debugging tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will be looking at how to debug a .NET Standard 2.0 library
    using Visual Studio 2017 and its debugging tools. We will be using the same solution
    we created in the previous recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure you have completed the previous recipes and built them without any
    issues. Let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Visual Studio 2017.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, open the solution from the previous recipe. Click File | Open | Open Project/Solution, or
    press *Ctrl* + *Shift* + *O*, and select the `Chapter10.Logging` solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Ctrl* + *Shift* + *B* for a quick build to check that everything is fine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The Solution Explorer should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e67d6dc6-df65-4b49-83f7-353a1b84c453.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, double-click on the `LoggerDemo.cs` label to open the code window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down until you reach the `WriteLog()` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, as shown in the following, click on the gray bar on the left side of the
    code window to add a debug point:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d8ed76a6-7579-4183-8928-5d9f8bb152a9.png)'
  prefs: []
  type: TYPE_IMG
- en: Again, click on the `Program.cs` tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *F**5* to debug the code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As you can see, the cursor will stop at the debugging point:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/464195b3-1b90-409a-9500-1762a03823ae.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, move your mouse pointer to the `message` parameter of the `WriteLog()`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/eff31b8f-75ea-409c-afc8-4138e53b8c4e.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, you can see what is stored inside that variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the small green arrow as highlighted in the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7dc3e5cf-c01a-44fd-afa1-aa9c14e794c0.png)'
  prefs: []
  type: TYPE_IMG
- en: You should see that the debug point jumps to the `logFile.WriteLine` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the right-hand side of the screen, you should see the Diagnostics Tools
    window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0a7a26ec-9dcd-4ad9-9557-e267942ff5cd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Also, at the bottom, you should see the Watch windows and the Call Stack window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/552bd11d-aa89-40a6-b6f7-b9a0882f6ef8.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, stop debugging by pressing *Shift* + *F5*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In steps 1 to 5, we opened the existing solution with the .NET Standard library
    and its accompanying .NET Core application. In step 10, we added a debugging point
    to the code. In step 11, we could see that it had stopped at the debugging point,
    at the .NET Standard 2.0 library itself. From then on, it performed like a normal
    debugging application. Visual Studio knew we were looking for code in the library.
  prefs: []
  type: TYPE_NORMAL
- en: In step 13, we moved the mouse pointer to the `string` parameter of the `WriteLog()`
    method, which is in the library code itself. Visual Studio showed us the value
    inside that parameter. Again, in step 13, we saw that we could jump to any area
    in the code we desired. This is a new feature in Visual Studio 2017\. In step
    15, we saw the diagnostic tools available, including the Events, Memory, and the
    CPU usage. These tools help us to fine-tune our library as normal C# code.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we looked at the Watch and Call Stack windows, which are self-explanatory.
  prefs: []
  type: TYPE_NORMAL
