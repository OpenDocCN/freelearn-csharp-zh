- en: '*Appendix*'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will include added notes and other topics that don't quite fit
    in our Unity project for several reasons – topics such as **Virtual Reality**
    (**VR**) for a side-scrolling game that could work but ideally would be better
    suited to a first-person view format to help with the potential issues that a
    developer may encounter.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, in the last topic, we will cover some random general knowledge pertaining
    to Unity that could also help you through the exam.
  prefs: []
  type: TYPE_NORMAL
- en: Developing for Virtual Reality
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you probably know, VR has been around commercially since the '90s, but it
    only became more widely recognized when Oculus and Vive headsets, which can be
    hooked up to a PC, became accessible. A short time thereafter, mobile phones were
    being turned into VR headsets as a cheaper alternative, examples including Google
    Cardboard and Samsung's Gear VR attachment headsets.
  prefs: []
  type: TYPE_NORMAL
- en: As Unity developers, we need to not only understand the technical limitations
    of these VR devices but also understand how and why some people feel sick while
    others do not.
  prefs: []
  type: TYPE_NORMAL
- en: VR games/simulations can get rejected very quickly if, for example, the brain
    and the body know they are not inhabiting the world their eyes are telling them
    they are a part of.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you would like to know more about the health and safety aspect of using/developing
    a VR app, refer to the following link: [https://retrophil.codes/Self-Study-App-Cognitive-Behaviour-GearVR](https://retrophil.codes/Self-Study-App-Cognitive-Behaviour-GearVR).
  prefs: []
  type: TYPE_NORMAL
- en: So, in terms of performance and VR applications, frame rate is important. Developers
    are encouraged to aim for a high frame rate of 90 to avoid a jerky disconnect
    with the world the user is in. Latency or, to be more precise, **motion to photon**
    (**MTP**) is required to be no higher than 20 milliseconds (the delay in updates
    when the user moves their head) with a display refresh rate of 90 Hz (displays
    refresh every 11 milliseconds).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows the three aforementioned technical targets that
    need to be achieved when designing a VR app:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure A.1 – Technical targets to achieve with VR'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_A.01_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure A.1 – Technical targets to achieve with VR
  prefs: []
  type: TYPE_NORMAL
- en: So, if we can hit those three targets consistently, the user will feel more
    immersed in their world. Keeping performance high means being careful with the
    platform's resources. For example, if, in the user's distance, there are plenty
    of 3D assets with materials and various textures applied that the players are
    never going to reach, we may as well replace those assets with a skybox to help
    maintain the fluidity of the VR app. Another technique designed to help keep the
    VR app running smoothly is by altering the texture of the display (`renderViewportScale`)
    at unavoidable parts in the VR app.
  prefs: []
  type: TYPE_NORMAL
- en: We, of course, can still make the user feel ill by overdoing things with post-processing
    effects and by adding aspects such as motion blur and depth of field, which may
    confuse the user, while removing aspects such as jagged edges on assets would
    naturally make the user feel even less like they are in a game/simulation. Meanwhile,
    even going as far as increasing the resolution through super-sampling can be a
    very expensive method for a mobile device. If your VR app is basic (no textures,
    basic lighting, and few assets), you may be able to achieve this... as long as
    your performance doesn't dip!
  prefs: []
  type: TYPE_NORMAL
- en: The main takeaway from this is that VR needs to run as smoothly and convincingly
    as possible before filling and polishing a scene too soon.
  prefs: []
  type: TYPE_NORMAL
- en: Closing suggestions for the game/exam
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is also a possibility in the Unity programmer exam that you will come
    across the odd question on shaders to establish how much you know about creating
    shaders or what different shaders can create. Learning about shaders is another
    book in itself, and it's also unlikely when you sit your exam that the majority
    of it will be devoted to shaders. Hence, if you don't know how to write shaders,
    do not concern yourself with the coding and focus more on the general practice
    and functions used. For example, a cel-shaded toon in an environment or custom
    post-processing effect can be achieved by using functions such as `Camera.depthTextureMode`
    to calculate the depth of a scene.
  prefs: []
  type: TYPE_NORMAL
- en: 'Knowing that these functions and methodologies exist will give you a better
    chance of answering them, and if you need more information on shaders in general,
    refer to the Packt book entitled *Unity 2021 Shaders and Effects Cookbook – Third
    Edition*; otherwise, I recommend skimming through the Shader reference manual
    provided by Unity: [https://dev.rbcafe.com/unity/unity-5.3.3/en/Manual/SL-SurfaceShaders.html](https://dev.rbcafe.com/unity/unity-5.3.3/en/Manual/SL-SurfaceShaders.html).'
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, I'll go through the process of installing post-processing
    v2 on later versions of Unity.
  prefs: []
  type: TYPE_NORMAL
- en: Rendering paths
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some of the mock questions in the Unity programmer exam may refer to **Forward**
    and **Deferred** graphic settings, but what are these, apart from a selection
    that can be made in our **Camera** component in the **Inspector** window?
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows alternative rendering paths in the **Camera**
    component:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure A.2 – Render paths'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_A.02_B18381.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure A.2 – Render paths
  prefs: []
  type: TYPE_NORMAL
- en: As we can see in the preceding screenshot, there are a variety of different
    rendering paths. Each of these will render our scene's surface and light in a
    slightly different way. Some will work faster than others but be devoid of other
    benefits, such as anti-aliasing.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Refer to the following link to see the chart comparisons of the various rendering
    paths: [https://docs.unity3d.com/Manual/RenderingPaths.html](https://docs.unity3d.com/Manual/RenderingPaths.html).
  prefs: []
  type: TYPE_NORMAL
- en: Adding to/optimizing Killer Wave
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So, we really have come to the end of the book, and the whole process of designing
    a game/prototype was a way of trying to cover as many objectives from the Unity
    programmer exam as possible in a variety of scenarios. There are parts in this
    tutorial series where obviously things could have been quicker or done better
    with regard to creating a project, but this book was never about making a game.
    It was about covering as much as possible while seeing your project develop.
  prefs: []
  type: TYPE_NORMAL
- en: Also, if you bought this book simply with a view to making a game and you haven't
    made one before, you've covered a range of tools and components that you can now
    use, and for sure, you could find employment as a Unity developer. The majority
    of the 30+ Unity projects I have worked on have all emanated from the skills I
    have demonstrated in this book. Hence, if you want to carry on with Killer Wave
    or rename it and change the concept to personalize the game, go for it. You have
    an adequate foundation to continue, but where should you go next with the game?
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a list of things that you could work on in order to continue with Killer
    Wave:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Optimize the code**:'
  prefs: []
  type: TYPE_NORMAL
- en: Use the Unity **Profiler** as often as possible and take the first and most
    expensive resource used off the top of its list, as discussed back in [*Chapter
    13*](B18381_13_Epub.xhtml#_idTextAnchor219), *Effects, Testing, Performance, and
    Alt Controls*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As your game will likely get bigger and more complex, using functions such as
    `GameObject.Find` and `Transform.Find` is going to slow your game down even more.
    Reference these variables by other means, such as in the **Inspector**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid any kind of `if` statement within a `for` loop.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any multiplications made with Vector3s and floats need to be done separately
    (keep all floats within parentheses to prevent code from going back and forth
    between variables).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following code block shows an example of keeping Vector3s and floats separate:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Cache transforms; Unity performs checks to establish whether a game object
    has been deleted with its own standalone transform. The following code block shows
    an example of caching a transform:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use `transform.localPosition` instead of `transform.position` (if you can).
    Unity automatically stores all data as local positions internally.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reduce engine calls by caching variables.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove the `get` and `set` accessors, and keep variables as `public` to avoid
    accessing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try to avoid `Vector` math and replace it with cache multiplied floats. This
    saves the creation of `Vector` and having to store values inside it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Store `Time.deltaTime` as a `static` float to avoid multiple engine calls.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `for` loops instead of `foreach`, since `foreach` creates garbage.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `array` instead of `List`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try and keep the **GC Alloc** list at zero in the **Profiler**. Basically, don't
    generate garbage if possible in order to avoid performance spikes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instantiate game objects in the first frame.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make an object pool of bullets instead of instantiating and destroying.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don't use `string` concatenations; in worst-case scenarios, use `StringBuilder`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create your own `Update` / `FixedUpdate` managers instead of using those offered
    by Unity. This aids performance, and you can create your own custom features to
    add to it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use animated sprites instead of 3D assets.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try not to use `GetComponent` / `GetComponentInChildren` / `GetComponentsInChildren`
    / `GetComponentInParent` / `GetComponentsInParent`. If you do, make sure you use
    them on startup (Awake, Enable, Start).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid animating game objects with a large hierarchy.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a loading screen if the scenes take too long to load.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make all final **Profiler** tests on the platform (**Development Mode** and/or
    **Logcat** for Android) on which you intend to build your game/app.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Other game ideas**:'
  prefs: []
  type: TYPE_NORMAL
- en: Create alternative scriptable assets for the current enemy.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make more items available in the shop.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add different enemy spawners.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make the cluster bomb do something!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fight the boss.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create level 4.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I hope these ideas/suggestions help and that the book, in general, helps you
    on your journey. The very best of luck!
  prefs: []
  type: TYPE_NORMAL
- en: Mock answers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The answers to the mock questions located at the end of some chapters can be
    found in the following sections:'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 3, Managing Scripts and Taking a Mock Test
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](img/Table_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Chapter 7, Creating a Game Loop and Mock Test
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](img/Table_021.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Chapter 10, Pausing the Game, Altering Sound, and a Mock Test
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](img/Table_03_a.jpg)![](img/Table_03_b.jpg)'
  prefs: []
  type: TYPE_IMG
- en: ', NavMesh, Timeline, and a Mock Test'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](img/Table_04_a.jpg)![](img/Table_04_b.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Chapter 14, Full Unity Programmer Mock Exam
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](img/Table_05_a.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/Table_05_b.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/Table_05_c.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/Table_05_d.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/Table_05_e.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/Table_05_f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'More questions and answers can be found at the Packt repository at the following
    link: https://github.com/PacktPublishing/Unity-Certified-Programmer-Exam-Guide-Second-Edition
    /tree/main/Extra.'
  prefs: []
  type: TYPE_NORMAL
