["```cs\n    choco install k6\n    ```", "```cs\n    winget install k6\n    ```", "```cs\n    docker pull loadimpact/k6\n    ```", "```cs\ndotnet add package BenchmarkDotNet\n```", "```cs\napp.MapGet(\"text-plain\",() => Results.Content(\"response\"))\n.WithName(\"GetTextPlain\");\napp.MapPost(\"validations\",(ValidationData validation) => Results.Ok(validation)).WithName(\"PostValidationData\");\napp.MapGet(\"jsons\", () =>\n     {\n           var response = new[]\n           {\n                new PersonData { Name = \"Andrea\", Surname = \n                \"Tosato\", BirthDate = new DateTime\n                (2022, 01, 01) },\n                new PersonData { Name = \"Emanuele\", \n                Surname = \"Bartolesi\", BirthDate = new \n                DateTime(2022, 01, 01) },\n                new PersonData { Name = \"Marco\", Surname = \n                \"Minerva\", BirthDate = new DateTime\n                (2022, 01, 01) }\n           };\n           return Results.Ok(response);\n     })\n.WithName(\"GetJsonData\");\n```", "```cs\n[Route(\"text-plain\")]\n     [ApiController]\n     public class TextPlainController : ControllerBase\n     {\n           [HttpGet]\n           public IActionResult Get()\n           {\n                 return Content(\"response\");\n           }\n     }\n[Route(\"validations\")]\n     [ApiController]\n     public class ValidationsController : ControllerBase\n     {\n           [HttpPost]\n           public IActionResult Post(ValidationData data)\n           {\n                 return Ok(data);\n           }\n     }\n     public class ValidationData\n     {\n           [Required]\n           public int Id { get; set; }\n           [Required]\n           [StringLength(100)]\n           public string Description { get; set; }\n     }\n[Route(\"jsons\")]\n[ApiController]\npublic class JsonsController : ControllerBase\n{\n     [HttpGet]\n     public IActionResult Get()\n     {\n           var response = new[]\n           {\n              new PersonData { Name = \"Andrea\", Surname = \n              \"Tosato\", BirthDate = new \n              DateTime(2022, 01, 01) },\n              new PersonData { Name = \"Emanuele\", Surname = \n              \"Bartolesi\", BirthDate = new \n              DateTime(2022, 01, 01) },\n              new PersonData { Name = \"Marco\", Surname = \n              \"Minerva\", BirthDate = new \n              DateTime(2022, 01, 01) }\n            };\n            return Ok(response);\n     }\n}\n     public class PersonData\n     {\n           public string Name { get; set; }\n           public string Surname { get; set; }\n           public DateTime BirthDate { get; set; }\n     }\n```", "```cs\nimport http from \"k6/http\";\nimport { check } from \"k6\";\nexport let options = {\n     summaryTrendStats: [\"avg\", \"p(95)\"],\n     stages: [\n           // Linearly ramp up from 1 to 50 VUs during 10 \n              seconds\n              { target: 50, duration: \"10s\" },\n           // Hold at 50 VUs for the next 1 minute\n              { target: 50, duration: \"1m\" },\n           // Linearly ramp down from 50 to 0 VUs over the \n              last 15 seconds\n              { target: 0, duration: \"15s\" }\n     ],\n     thresholds: {\n           // We want the 95th percentile of all HTTP \n              request durations to be less than 500ms\n              \"http_req_duration\": [\"p(95)<500\"],\n           // Thresholds based on the custom metric we \n              defined and use to track application failures\n              \"check_failure_rate\": [\n          // Global failure rate should be less than 1%\n             \"rate<0.01\",\n          // Abort the test early if it climbs over 5%\n             { threshold: \"rate<=0.05\", abortOnFail: true },\n           ],\n     },\n};\nexport default function () {\n    // execute http get call\n    let response = http.get(\"http://localhost:7060/jsons\");\n    // check() returns false if any of the specified \n       conditions fail\n    check(response, {\n           \"status is 200\": (r) => r.status === 200,\n    });\n}\n```", "```cs\n    dotnet .\\MinimalAPI.Sample\\bin\\Release\\net6.0\\MinimalAPI.Sample.dll --urls=https://localhost:7059/;http://localhost:7060/\n    dotnet .\\ControllerAPI.Sample\\bin\\Release\\net6.0\\ControllerAPI.Sample.dll --urls=\"https://localhost:7149/;http://localhost:7150/\"\n    ```", "```cs\n        k6 run .\\K6\\Controllers\\json.js --summary-export=.\\K6\\results\\controller-json.json\n        ```", "```cs\n        k6 run .\\K6\\Minimal\\json.js --summary-export=.\\K6\\results\\minimal-json.json\n        ```", "```cs\n    BenchmarkSwitcher.FromAssembly(typeof(Program).Assembly).Run(args);\n    ```", "```cs\n    namespace DotNetBenchmarkRunners\n    {\n         [SimpleJob(RuntimeMoniker.Net60, baseline: true)]\n         [JsonExporter]\n         public class Performances\n         {\n               private readonly HttpClient clientMinimal = \n               new HttpClient();\n               private readonly HttpClient \n               clientControllers = new HttpClient();\n               private readonly ValidationData data = new \n               ValidationData()\n               {\n                     Id = 1,\n                     Description = \"Performance\"\n               };\n               [GlobalSetup]\n               public void Setup()\n               {\n                     clientMinimal.BaseAddress = new \n                     Uri(\"https://localhost:7059\");\n                     clientControllers.BaseAddress = new \n                     Uri(\"https://localhost:7149\");\n               }\n               [Benchmark]\n               public async Task Minimal_Json_Get() => \n               await clientMinimal.GetAsync(\"/jsons\");\n               [Benchmark]\n               public async Task Controller_Json_Get() => \n               await clientControllers.GetAsync(\"/jsons\");\n               [Benchmark]\n               public async Task Minimal_TextPlain_Get() \n               => await clientMinimal.\n               GetAsync(\"/text-plain\");\n               [Benchmark]\n               public async Task \n               Controller_TextPlain_Get() => await \n               clientControllers.GetAsync(\"/text-plain\");\n\n               [Benchmark]\n               public async Task Minimal_Validation_Post() \n               => await clientMinimal.\n               PostAsJsonAsync(\"/validations\", data);\n\n               [Benchmark]\n               public async Task \n               Controller_Validation_Post() => await \n               clientControllers.\n               PostAsJsonAsync(\"/validations\", data);\n         }\n         public class ValidationData\n         {\n               public int Id { get; set; }\n               public string Description { get; set; }\n         }\n    }\n    ```", "```cs\ndotnet .\\MinimalAPI.Sample\\bin\\Release\\net6.0\\MinimalAPI.Sample.dll --urls=\"https://localhost:7059/;http://localhost:7060/\"\n```", "```cs\ndotnet .\\ControllerAPI.Sample\\bin\\Release\\net6.0\\ControllerAPI.Sample.dll --urls=https://localhost:7149/;http://localhost:7150/\n```", "```cs\ndotnet .\\DotNetBenchmarkRunners\\bin\\Release\\net6.0\\DotNetBenchmarkRunners.dll --filter *\n```"]