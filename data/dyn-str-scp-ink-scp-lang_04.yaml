- en: '*Chapter 3*: Sequences, Cycles, and Shuffling Text'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 3 章*：序列、循环和文本洗牌'
- en: This chapter introduces the concept of **alternatives**, programmable ways of
    introducing additional text, and advanced code that can react to loops. We will
    cover each type of alternative (**sequence**, **cycle**, and **shuffle**) in turn
    and look at how they can be combined with looping structures in ink. Next, we
    will examine **multi-line alternatives**, functionality for defining more complex
    structures based on the type of alternative used to create them. Finally, we will
    close the chapter with **nested alternatives**, the use of one or more alternatives
    inside each other.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了**替代方案**的概念，这是引入额外文本的可编程方式，以及可以响应循环的高级代码。我们将依次介绍每种替代方案类型（**序列**、**循环**和**洗牌**），并探讨它们如何在
    ink 中的循环结构中结合使用。接下来，我们将检查**多行替代方案**，这是基于创建它们的替代方案类型定义更复杂结构的功能。最后，我们将以**嵌套替代方案**结束本章，这是在彼此内部使用一个或多个替代方案。
- en: 'In this chapter, we will to cover the following main topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Using alternatives
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用替代方案
- en: Creating multi-line alternatives
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建多行替代方案
- en: Nesting alternatives
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌套替代方案
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The examples used in this chapter, in `*.ink` files, can be found online on
    GitHub: [https://github.com/PacktPublishing/Dynamic-Story-Scripting-with-the-ink-Scripting-Language/tree/main/Chapter3](https://github.com/PacktPublishing/Dynamic-Story-Scripting-with-the-ink-Scripting-Language/tree/main/Chapter3).'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的示例，在`*.ink`文件中，可以在 GitHub 上找到：[https://github.com/PacktPublishing/Dynamic-Story-Scripting-with-the-ink-Scripting-Language/tree/main/Chapter3](https://github.com/PacktPublishing/Dynamic-Story-Scripting-with-the-ink-Scripting-Language/tree/main/Chapter3)。
- en: Using alternatives
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用替代方案
- en: In [*Chapter 2*](B17597_02_Final_PG_ePub.xhtml#_idTextAnchor031), *Knots, Diverts,
    and Looping Patterns*, the use of opening, `{`, and closing, `}`, curly brackets
    signaled the use of a conditional option. Between using labels and conditions,
    options could become dynamic and react to the reader making choices between loops.
    However, curly brackets are used for more than conditional options. In ink, they
    also signal the use of any *code*, and one of the most common forms of code is
    the use of an `|`. Depending on the type of alternative used, different text effects
    can happen.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在**第 2 章**（B17597_02_Final_PG_ePub.xhtml#_idTextAnchor031）中，*结点、转向和循环模式*，使用开括号`{`和闭括号`}`表示条件选项的使用。在标签和条件之间，选项可以变得动态，并能够根据读者的选择在循环之间做出反应。然而，大括号不仅用于条件选项。在
    ink 中，它们还表示任何**代码**的使用，而最常见的一种代码形式是使用`|`。根据使用的替代方案类型，可以产生不同的文本效果。
- en: Sequences
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 序列
- en: 'The first and default alternative is a **sequence**. As its name might suggest,
    a sequence is a series of values. They are accessed based on their name, *in sequence*:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个和默认的替代方案是一个**序列**。正如其名称可能暗示的那样，序列是一系列值。它们根据其名称，*按顺序*访问：
- en: 'Example 1:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 1：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In *Example 1*, a sequence is used. It has two elements, `dark and stormy night`
    and `bright and shining day`, with a vertical bar between them. When first run,
    the sequence would produce the following output:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在**示例 1**中，使用了一个序列。它有两个元素，`dark and stormy night`和`bright and shining day`，它们之间有一个垂直条。首次运行时，序列将生成以下输出：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In a sequence, any elements beyond the first are only shown when the sequence
    is run additional times. In other words, a sequence with more than one element
    works best inside a looping structure:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在序列中，任何第一个元素之后的元素只有在序列运行多次时才会显示。换句话说，包含多个元素的序列最好在循环结构中使用：
- en: 'Example 2:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 2：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'By diverting back to the knot, `weather`, a loop is created. This allows the
    second element of the sequence to be shown on the second loop:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 通过回到结点，`weather`，创建了一个循环。这允许序列的第二元素在第二个循环中显示：
- en: '![Figure 3.1 – Screenshot of Inky showing both elements from Example 2'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 3.1 – Screenshot of Inky showing both elements from Example 2](img/Figure_3.1_B17597.jpg)'
- en: '](img/Figure_3.1_B17597.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_3.1_B17597.jpg](img/Figure_3.1_B17597.jpg)'
- en: Figure 3.1 – Screenshot of Inky showing both elements from Example 2
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1 – Inky 屏幕截图，显示示例 2 中的两个元素
- en: 'A sequence only continues if new elements are within it. Once a sequence reaches
    its end, it stops on the last element. In *Example 2*, choosing the option `bright
    and shining day`, would be shown again:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果序列中包含新元素，则序列会继续。一旦序列到达其末尾，它将停止在最后一个元素上。在**示例 2**中，选择`bright and shining day`选项将再次显示：
- en: '![Figure 3.2 – Screenshot of Inky showing the repeating element from Example
    2'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 3.2 – Screenshot of Inky showing the repeating element from Example
    2](img/Figure_3.2_B17597.jpg)'
- en: '](img/Figure_3.2_B17597.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_3.2_B17597.jpg](img/Figure_3.2_B17597.jpg)'
- en: Figure 3.2 – Screenshot of Inky showing the repeating element from Example 2
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.2 – Inky 屏幕截图显示示例 2 中的重复元素
- en: Important note
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: '*Example 2* follows a pattern established in [*Chapter 2*](B17597_02_Final_PG_ePub.xhtml#_idTextAnchor031)*,
    Knots, Diverts, and Looping Patterns*, with two choices. The first loops the structure
    and the second breaks it. Always use choices when creating loops to avoid creating
    ones that cannot end!'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 2* 遵循在 [*第 2 章*](B17597_02_Final_PG_ePub.xhtml#_idTextAnchor031)*，节点、分支和循环模式*
    中建立的模式，有两个选择。第一个循环结构，第二个打破它。创建循环时始终使用选择，以避免创建无法结束的循环！'
- en: 'Sequences are best used in situations where a user might exhaust a series of
    elements and end on the last one. When a repeating sequence is needed, a different
    concept is used: **cycles**.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 序列最好用于用户可能会耗尽一系列元素并最终停留在最后一个元素的情况。当需要重复序列时，使用不同的概念：**循环**。
- en: Cycles
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 循环
- en: 'Like sequences, `&`, in front of the first element in the set. This tells ink
    to *cycle* the elements and return to the first after the last:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如同序列，`&` 在集合的第一个元素之前。这告诉 ink *循环* 元素，并在最后一个元素之后返回到第一个：
- en: 'Example 3:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 3：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In *Example 3*, the looping structure reruns the cycle, moving through all
    the months and then *cycling* back to the first element again:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *示例 3* 中，循环结构重新运行周期，遍历所有月份然后 *循环* 回到第一个元素：
- en: '![Figure 3.3 – Screenshot of ink showing all elements from the Example 3 cycle'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.3 – Inky 屏幕截图显示示例 3 循环中的所有元素'
- en: '](img/Figure_3.3_B17597.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.3_B17597.jpg)'
- en: Figure 3.3 – Screenshot of ink showing all elements from the Example 3 cycle
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.3 – Inky 屏幕截图显示示例 3 循环中的所有元素
- en: 'All alternatives can contain empty elements. For cycles, any blank elements
    count towards the total number. It is possible to create a cycle that shows elements
    only after a certain number of loops:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 所有替代方案都可以包含空元素。对于循环，任何空白元素都计入总数。可以创建一个循环，只有在经过一定次数的循环后才会显示元素：
- en: 'Example 4:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 4：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Using empty elements with a cycle can be very effective for creating a situation
    where the reader must take an action multiple times before a result happens. In
    *Example 4*, the cycle has multiple empty elements separated by vertical bars.
    The last element, `For a moment, there was light before the flame went out.`,
    is only shown after the reader chooses the option **Try lighter** four times:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 使用循环与空元素结合可以非常有效地创建一种情况，即读者必须多次采取行动后才能发生结果。在 *示例 4* 中，循环由多个空元素通过竖线分隔。最后一个元素，`For
    a moment, there was light before the flame went out.`, 只有在读者选择 **尝试更轻的火柴** 四次之后才会显示：
- en: '![Figure 3.4 – Screenshot of Inky showing Example 4''s use of empty elements'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.4 – Inky 屏幕截图显示示例 4 使用空元素的情况'
- en: '](img/Figure_3.4_B17597.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.4_B17597.jpg)'
- en: Figure 3.4 – Screenshot of Inky showing Example 4's use of empty elements
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.4 – Inky 屏幕截图显示示例 4 使用空元素的情况
- en: Shuffles
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 洗牌
- en: '`~`, appears before the first element in the set:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`~` 出现在集合的第一个元素之前：'
- en: 'Example 5:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 5：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Unlike sequences and cycles, shuffles do not show their elements in order.
    Combined with empty elements, as shown previously with cycles, the chances of
    an element being picked are always consistent with the total number of elements.
    This means that to create a shuffle where one of its elements is shown 1 of 10
    runs, the code would be the following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 与序列和循环不同，洗牌不按顺序显示其元素。结合之前循环中显示的空元素，选择元素的几率始终与元素总数一致。这意味着要创建一个其中某个元素在 10 次运行中显示
    1 次的洗牌，代码如下：
- en: 'Example 6:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 6：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In *Example 6*, element `10` has a 10% chance of appearing. Most runs (90%)
    would not see it, creating a unique moment for those users encountering the event
    within their narrative experience of the story''s content:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *示例 6* 中，元素 `10` 有 10% 的出现概率。大多数运行（90%）不会看到它，为那些在故事内容叙述体验中遇到此事件的用户创造一个独特的时刻：
- en: '![Figure 3.5 – Screenshot of Inky showing the output of Example 6 without element
    10'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.5 – Inky 屏幕截图显示示例 6 中不包含元素 10 的输出'
- en: '](img/Figure_3.5_B17597.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.5_B17597.jpg)'
- en: Figure 3.5 – Screenshot of Inky showing the output of Example 6 without element
    10
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.5 – Inky 屏幕截图显示示例 6 中不包含元素 10 的输出
- en: Creating multi-line alternatives
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建多行替代方案
- en: Sequences, cycles, and shuffles can be written using one single line of code.
    However, all alternatives can also be written using their multi-line form. For
    each of these, curly brackets are still used, but each element is on its own line
    with a dash, `-`, appearing before it.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 序列、循环和洗牌可以使用一行代码来编写。然而，所有这些替代方案也可以使用它们的多行形式来编写。对于这些中的每一个，仍然使用大括号，但每个元素都在它自己的行上，前面有一个连字符，`-`。
- en: Multi-line cycles
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多行循环
- en: 'To create a multi-line cycle, the keyword `cycle` is used with a colon, `:`,
    and with each element on its own line:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建多行循环，使用关键字 `cycle` 并带有冒号，`:`，并且每个元素都在它自己的行上：
- en: 'Example 7:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '示例 7:'
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Any use of multi-line alternatives also introduces a new issue. Because each
    element is on its own line, each is also considered a *line* by ink. This means
    its output would introduce additional spacing between lines. To help with this
    issue, **glue** can be used between the multi-line alternative and the next text
    content.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 任何使用多行替代方案的情况也会引入一个新的问题。因为每个元素都在它自己的行上，所以每个元素也被 ink 视为一个*行*。这意味着其输出会在行之间引入额外的间距。为了帮助解决这个问题，可以在多行替代方案和下一个文本内容之间使用**粘合剂**。
- en: Reminder
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 提醒
- en: '[*Chapter 1*](B17597_01_Final_PG_ePub.xhtml#_idTextAnchor014)*, Text, Flow,
    Choices, and Weaves*, introduced the concept of **glue**, the use of the less-than
    and greater-than symbols together. This concept *glues* one line to the end of
    the previous. With multi-line alternatives, the use of glue removes the additional
    space between its output and the next line of content.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第一章*](B17597_01_Final_PG_ePub.xhtml#_idTextAnchor014)*，文本、流程、选择和交织*，介绍了**粘合剂**的概念，即使用小于和大于符号。这个概念*粘合*了一行到前一行末尾。在多行替代方案中，使用粘合剂消除了其输出与下一行内容之间的额外空间。'
- en: Multi-line sequences
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多行序列
- en: 'Multi-line cycles use the keyword `cycle` and multi-line shuffles use the keyword
    `shuffle`. However, multi-line sequences use the keyword `stopping`:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 多行循环使用关键字 `cycle`，多行洗牌使用关键字 `shuffle`。然而，多行序列使用关键字 `stopping`：
- en: 'Example 8:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '示例 8:'
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Multi-line sequences also introduce an important difference between themselves
    and their one-line forms: readability. Each element in a multi-line alternative
    is separated by a new line. In the one-line form, a sequence with a particularly
    long text element would be hard to differentiate between its end and the start
    of the next element in the alternative:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 多行序列也引入了它们与其单行形式之间的重要区别：可读性。多行替代方案中的每个元素都由一个新行分隔。在单行形式中，具有特别长的文本元素的序列很难区分其结束和下一个元素在替代方案中的开始：
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Broken into new lines, the previous code can become much easier to edit and
    understand:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 将代码拆分成新行，可以使代码更容易编辑和理解：
- en: 'Example 9:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '示例 9:'
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Nesting alternatives
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌套替代
- en: Sequences, cycles, and shuffles can all be nested *inside* each other. When
    this happens, the combined form is what is known as a **nested alternative**,
    where one alternative appears as the element of another.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 序列、循环和洗牌都可以嵌套在彼此*内部*。当这种情况发生时，组合形式就是所谓的**嵌套替代**，其中一个替代方案作为另一个替代方案的元素。
- en: Combining cycles and shuffles
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结合循环和洗牌
- en: 'Within a looping structure, a cycle can be very useful to repeat content after
    a certain number of loops. When combined with a shuffle, random content can be
    selected from the shuffle and then repeated within the larger cycle. For example,
    to generate a new random number for each loop, a cycle with a single element using
    multiple shuffles would produce this effect using only one line of code:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在循环结构内部，循环可以在经过一定数量的循环后重复内容非常有用。当与洗牌结合使用时，可以从洗牌中随机选择内容，然后在更大的循环中重复。例如，为了在每次循环中生成一个新的随机数，使用单个元素和多次洗牌的循环可以通过一行代码产生这种效果：
- en: 'Example 10:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '示例 10:'
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '*Example 10* uses a cycle and three shuffles. Each time the loop runs, the
    cycle reruns. With only one element, it *cycles* again and reruns the shuffles,
    each of which picks a random number from one to five. This has the effect of generating
    a new three-digit number for each loop:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 10* 使用了一个循环和三次洗牌。每次循环运行时，循环会重新运行。只有一个元素时，它会再次*循环*并重新运行洗牌，每次洗牌都会从一到五中随机选择一个数字。这会产生在每个循环中为每个循环生成一个新的三位数的效果：'
- en: '![Figure 3.6 – Screenshot of Inky showing random three-digit numbers across
    loops from Example 10](img/Figure_3.6_B17597.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.6 – Inky 的截图，显示示例 10 中循环的随机三位数](img/Figure_3.6_B17597.jpg)'
- en: Figure 3.6 – Screenshot of Inky showing random three-digit numbers across loops
    from Example 10
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.6 – 显示示例 10 中循环的随机三位数的 Inky 截图
- en: The code in *Example 10* also demonstrates something not previously made explicit
    about how alternatives work in ink. The elements of alternatives often have text
    content, and options are created from the text of choices. This means that alternatives
    can be used with choices to generate dynamic options. This also means that diverts
    can be elements of alternatives as well.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 10*中的代码还演示了关于ink中可选方案工作方式的一个以前未明确说明的问题。可选方案元素通常具有文本内容，选项是从选择文本中创建的。这意味着可选方案可以与选择一起使用来生成动态选项。这也意味着转向可以是可选方案的元素。'
- en: 'For example, a set of diverts can be used with a shuffle to move the reader
    to different points at random based on the options they chose:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，可以使用一组转向操作与洗牌结合，根据读者选择的选项随机地将读者移动到不同的位置：
- en: 'Example 11:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '示例 11:'
- en: '[PRE12]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: When run, the combination of diverts and a shuffle in *Example 11* would randomly
    pick between two possible branches. The reader would either be diverted to the
    `treasure` or `back_in_hallway` knots.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行时，*示例 11*中转向和洗牌的组合将随机选择两个可能的分支之一。读者将被转向到`treasure`或`back_in_hallway`节点。
- en: Shuffling shuffles
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 洗牌洗牌
- en: 'In both *Example 10* and *Example 11*, one type of alternative was combined
    with another. It is also possible to nest the same type of alternative. Shuffles
    can be nested within other shuffles to make advanced combinatorial results. For
    example, it is possible to generate a quick history of a fantasy kingdom by defining
    possible years and events, and then using one-line shuffles inside a multi-line
    shuffle to build a sentence describing the kingdom:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在*示例 10*和*示例 11*中，一种类型的可选方案与另一种类型结合使用。也可以嵌套相同类型的可选方案。洗牌可以嵌套在其他洗牌中，以生成高级组合结果。例如，可以通过定义可能的年份和事件来生成一个幻想王国的快速历史，然后在多行洗牌中使用单行洗牌来构建描述王国的句子：
- en: 'Example 12:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '示例 12:'
- en: '[PRE13]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In *Example 12*, the use of the single-line shuffles creates all of the small
    details of the kingdom. These are then used within the larger multi-line shuffles
    for the major events. They build a history based on different elements *shuffled*
    together:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在*示例 12*中，单行洗牌的使用创建了王国的所有小细节。然后，它们被用于更大的多行洗牌中，用于主要事件。它们基于不同的元素*洗牌*在一起构建历史：
- en: '![Figure 3.7 – Screenshot of Inky showing of one of the many possible outputs
    of Example 12 ](img/Figure_3.7_B17597.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.7 – Inky 展示的 Example 12 的许多可能输出之一](img/Figure_3.7_B17597.jpg)'
- en: Figure 3.7 – Screenshot of Inky showing of one of the many possible outputs
    of Example 12
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.7 – Inky 展示的 Example 12 的许多可能输出之一
- en: Alternatives and their multi-line forms can be very useful for detecting and
    acting on loops by using sequences and cycles to show new or change old content.
    Shuffles, with the ability to introduce randomness in a story, are an easy way
    to generate dynamic text in a story, as shown in *Example 12*.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 可选方案及其多行形式可以通过使用序列和循环来显示新内容或更改旧内容，从而非常有用，以便检测和执行循环。具有在故事中引入随机性的能力，洗牌是一种简单的方法，可以在故事中生成动态文本，如*示例
    12*所示。
- en: When combining different types of alternatives, such as those used in *Example
    10*, these *nested* alternatives can generate complex content based on how each
    type works individually. However, what was not covered and is introduced in the
    next chapter is a way to save what is generated by an alternative and then compare
    values. As with the story used in *Example 10*, generating a random three-digit
    number is useful, but saving and remembering it is even better. [*Chapter 4*](B17597_04_Final_PG_ePub.xhtml#_idTextAnchor062),
    *Variables, Lists, and Functions*, introduces how to retain values across a story
    as generated by alternatives and changed because of a user's interactions in ink.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当结合不同类型的可选方案，例如*示例 10*中使用的那些，这些*嵌套*的可选方案可以根据每种类型单独工作的方式生成复杂的内容。然而，下一章中未涉及并介绍的是保存由可选方案生成的内容并比较值的方法。与*示例
    10*中使用的叙事一样，生成一个随机的三位数是有用的，但保存并记住它更好。[第 4 章*](B17597_04_Final_PG_ePub.xhtml#_idTextAnchor062)，*变量、列表和函数*介绍了如何保留由可选方案生成并在用户与ink交互时更改的值。
- en: Summary
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we looked at the seemingly simple concept of alternatives.
    In ink, the three types of alternatives are sequences, cycles, and shuffles. Each
    provides a different way of accessing its elements. Sequences show each element
    in turn until its last one. Cycles repeat their elements, looping back to the
    first element after encountering the end. Shuffles select a random element from
    their set each time they are run, creating a way to introduce randomness to stories
    for the first time.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了看似简单的替代方案概念。在ink中，三种类型的替代方案是序列、循环和洗牌。每种都提供了访问其元素的不同方式。序列按顺序显示每个元素，直到最后一个。循环重复其元素，在遇到末尾后返回到第一个元素。洗牌每次运行时都会从其集合中选择一个随机元素，从而为故事引入随机性。
- en: Alternatives can also be expressed in both one-line and multi-line forms. When
    written in their longer multi-line forms, alternatives use a keyword for their
    type and have each element on a separate line. While much easier to read for an
    author, we reviewed how care must be taken to incorporate glue because of how
    ink interprets each line of text in a story.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 替代方案也可以用单行和多行形式表达。当以较长的多行形式书写时，替代方案使用一个关键字来表示其类型，并且每个元素都在单独的一行上。虽然对于作者来说更容易阅读，但我们回顾了如何注意将粘合剂融入其中，因为墨水如何解释故事中每一行的文本。
- en: Finally, we learned alternatives can be combined in a nested form. An element
    of an alternative can be another alternative. When used together, this showed
    how, for example, a cycle and shuffle can be combined to regenerate random selections
    from multiple shuffles each time they are run. We also saw how the text of elements
    from alternatives can be used with choices and even how diverts can be elements
    of alternatives.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们了解到替代方案可以以嵌套形式结合。替代方案的一个元素可以是另一个替代方案。当它们一起使用时，这展示了例如循环和洗牌如何结合，每次运行时从多个洗牌中重新生成随机选择。我们还看到了如何使用替代方案中元素的文本与选择一起使用，甚至如何使转向成为替代方案的元素。
- en: In the next chapter, we will see how to create and access the values of variables
    in ink.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到如何在ink中创建和访问变量的值。
- en: Q&A
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Q&A
- en: What are the three types of alternatives in ink?
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ink中有哪三种类型的替代方案？
- en: What special symbol is used between elements in their single-line form?
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在单行形式中，元素之间使用什么特殊符号？
- en: What special symbol is used before the first element in the set to create a
    cycle?
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在集合中的第一个元素之前使用什么特殊符号来创建一个循环？
- en: What is the difference between a sequence and a cycle?
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 序列和循环之间的区别是什么？
- en: What is unique about a shuffle?
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 洗牌有什么独特之处？
- en: What is the keyword used to create a multi-line sequence?
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用于创建多行序列的关键字是什么？
