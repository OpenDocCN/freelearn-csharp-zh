- en: Chapter 1. Introduction to Physics in Unity3D
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. Unity3D中物理学的介绍
- en: Physics has been used for a long time in different sectors such as scientific,
    study, and software. The use of Physics in interactive development and software
    is not new, but its use has been the focus of special attention in recent years.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 物理在科学、研究和软件等不同领域已经使用了很长时间。物理在交互式开发和软件中的应用并不新鲜，但近年来其应用受到了特别的关注。
- en: At first glance, Physics gives the impression that it's all about long, webbed
    equations and calculations. However, the contributions of Physics are tremendous
    and have made developer's life easy. The idea of gaming was possible only because
    of Physics. All of us remember our childhood games, which were facilitated by
    the use of Physics; for example, the Ping Pong game. Isn't it amazing how much
    Physics has touched our lives and how we cannot escape its influence? There are
    many games that possess primitive Physics, used to calculate the movement and
    trajectory of a bouncing ball. If you look into the structure of Physics used
    for one of the earliest games, Pong, you get a brief insight into how Physics
    was used in these games. Game behavior, motion trajectory, and paddle movement
    were all handled by primitive Physics.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 初看物理，给人一种都是关于长篇的网状方程和计算的感觉。然而，物理的贡献是巨大的，它让开发者的生活变得容易。游戏的想法之所以可能，仅仅是因为物理。我们都记得我们童年的游戏，它们都是通过物理的使用来实现的；例如，乒乓球游戏。物理对我们生活的影响如此之大，我们无法摆脱其影响，这不是很令人惊讶吗？有许多游戏具有原始的物理，用于计算弹跳球的运动和轨迹。如果你深入研究用于最早游戏之一Pong的物理结构，你会对物理在这些游戏中的应用有一个简要的了解。游戏行为、运动轨迹和挡板运动都是由原始物理处理的。
- en: 'In this chapter, we will learn about the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下主题：
- en: How Physics is used in interactive development
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 物理在交互式开发中的应用
- en: The basic components of Physics for interactive development
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交互式开发中物理的基本组件
- en: Physical simulation in Unity
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity中的物理模拟
- en: In today's interactive world, the use of Physics is changing day by day. In
    recent years, the use of Physics in games, software, and interactive development
    has increased drastically. Now, we are able to make games and other applications
    using Physics in different ways. In the modern era, the importance of in-game
    Physics and interactive development has increased.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在今天的交互式世界中，物理的使用每天都在变化。近年来，物理在游戏、软件和交互式开发中的应用急剧增加。现在，我们能够以不同的方式使用物理来制作游戏和其他应用程序。在现代社会，游戏内物理和交互式开发的重要性日益增加。
- en: 'If you look at the way Physics was used in older interactive applications or
    games, you will find that they were all based on some specific scenarios. The
    Physics code was written according to the scenario of interactive development.
    For example, if the Physics code is written for a ball to handle its trajectory
    motion, it only handles the trajectory motion and nothing else; this means that
    every time a developer has to write a new code for a new effect. Also, with the
    passage of time, if an update is required, the developer has to modify or even
    rewrite the code. Based on such cases, development became very complicated and
    time-consuming. Conditions became worse when the number of scenarios increased.
    As mentioned earlier, the way Physics is used is changing day by day, and it is
    required in various sectors. Let''s take a look at the areas where Physics is
    widely used these days:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你回顾一下物理在较老交互式应用程序或游戏中的应用方式，你会发现它们都是基于某些特定场景的。物理代码是根据交互式开发的场景编写的。例如，如果物理代码是为一个球处理其轨迹运动而编写的，它只处理轨迹运动而不处理其他任何事情；这意味着每次开发者都必须为新的效果编写新的代码。随着时间的推移，如果需要更新，开发者必须修改甚至重写代码。基于这些案例，开发变得非常复杂和耗时。当场景数量增加时，情况变得更糟。如前所述，物理的使用方式每天都在变化，并且需要在各个领域中使用。让我们看看物理现在广泛应用的领域：
- en: '![Introduction to Physics in Unity3D](img/00002.jpeg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![Unity3D中物理学的介绍](img/00002.jpeg)'
- en: 'Physics is useful in the following areas of interactive development:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 物理在以下交互式开发领域很有用：
- en: Real-time programming where we need knowledge of electronics, which is much
    related to Physics
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要电子学知识（与物理密切相关）的实时编程
- en: A Physics engine for graphics software or games, where Physics is heavily used
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于图形软件或游戏且物理应用广泛的物理引擎
- en: Creating 3D programs for various software and game engines
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为各种软件和游戏引擎创建3D程序
- en: Physics-based simulations
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于物理的模拟
- en: The most common component of Physics used in interactive development
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交互式开发中使用的最常见物理组件
- en: '**Rigidbody dynamics** is the most common component used in interactive development.
    For Physics-based simulation development, we use algorithms of Rigidbody dynamics.
    Rigidbody dynamics is based on the Newtonian principle of movement and mass.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**刚体动力学**是交互式开发中最常用的组件。对于基于物理的模拟开发，我们使用刚体动力学的算法。刚体动力学基于牛顿运动和质量的原理。'
- en: Now, the question that arises here is what is a Rigidbody? An idealized solid
    whose size and shape is fixed and remains unaltered when some external forces
    are applied and is used in Newtonian mechanics to model real objects is known
    as a Rigidbody. For example, a box, wall, and so on.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这里出现的问题是什么是刚体？一个理想化的固体，其大小和形状固定，当施加某些外部力时保持不变，并在牛顿力学中用于模拟真实物体，被称为刚体。例如，盒子、墙壁等。
- en: The use of accurate Physics in interactive development is not feasible as it
    has its own natural constraints. In interactive development, we cannot use accurate
    Physics due to the standard frame rate restrictions, but the physical accuracy
    of a simulation only needs to be believable.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在交互式开发中使用精确的物理是不切实际的，因为它有其固有的自然限制。在交互式开发中，由于标准的帧率限制，我们无法使用精确的物理，但模拟的物理精度只需要看起来可信。
- en: Use of Physics in simulation and frame rate
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模拟和帧率中的物理使用
- en: In order to use Physics for interactive development, there are many things that
    need to be taken care of. Physics simulations are related to the frame rate. The
    frame rate can be described as the number of frames that are displayed per second.
    This is relevant to animation, in which many images are displayed quickly to give
    the impression of movement. The standard frame rate for most PCs and console games
    is 60 fps.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在交互式开发中使用物理，有许多事情需要考虑。物理模拟与帧率相关。帧率可以描述为每秒显示的帧数。这与动画相关，其中许多图像快速显示以产生运动感。大多数PC和游戏机的标准帧率为60
    fps。
- en: The interval of moving objects with their trajectories is called Physics simulation.
    Almost every Physics simulation equation involves time, and the time required
    for solving this is determined by interactive development.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 移动物体及其轨迹的间隔称为物理模拟。几乎每个物理模拟方程都涉及时间，而解决这个方程所需的时间由交互式开发决定。
- en: Basic components of Physics for interactive development
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交互式开发中物理的基本组件
- en: 'There are a few basic components that can be used for interactive development.
    Let''s take a look at them one by one:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些基本组件可以用于交互式开发。让我们逐一看看它们：
- en: '![Basic components of Physics for interactive development](img/00003.jpeg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![交互式开发中物理的基本组件](img/00003.jpeg)'
- en: Integration
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 整合
- en: There are multiple factors that have to be considered when we are talking about
    the integration of Physics. How we track objects that participate in simulation
    is of paramount importance in this regard.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论物理学的整合时，需要考虑多个因素。如何追踪参与模拟的对象在这方面至关重要。
- en: To implement Physics in interactive development, we normally track all the objects
    that are simulating in a data structure.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要在交互式开发中实现物理，我们通常在一个数据结构中跟踪所有正在模拟的对象。
- en: To implement Physics for each object, we need to know some important information
    such as the object's physical properties, that is, mass, current velocity, current
    position, orientation, the external forces acting on the object, and the future
    time of an object.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要为每个对象实现物理，我们需要了解一些重要信息，例如对象的物理属性，即质量、当前速度、当前位置、方向、作用在对象上的外部力以及对象未来的时间。
- en: Note
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**What is future time?**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**什么是未来时间？**'
- en: Future time = the current time + the time slice for the frame
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 未来时间 = 当前时间 + 帧的时间片
- en: Collision detection
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 碰撞检测
- en: There is no collision detection if only one object is moving in a vacuum. However,
    most interactive developments involve more than one object and these objects move
    in an environment. Therefore, a situation arises where two objects are moving
    towards each other.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果只有一个物体在真空中移动，则没有碰撞检测。然而，大多数交互式开发涉及多个对象，这些对象在环境中移动。因此，出现两个物体朝彼此移动的情况。
- en: What will happen if no action is taken? These objects will just pass through
    each other. In most interactive developments, however, we don't want the objects
    to pass through each other.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不采取任何行动会发生什么？这些对象将只是穿过彼此。然而，在大多数交互式开发中，我们并不希望对象穿过彼此。
- en: In order to handle those scenarios where collision occurs, the interactive development
    needs to know that two objects are colliding. One of Physics' most important tasks
    is to identify these scenarios.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理发生碰撞的场景，交互式开发需要知道两个对象正在碰撞。物理最重要的任务之一就是识别这些场景。
- en: The collision detection code has to determine all such pairs of overlapping
    objects, collect some additional data such as how far they overlap and in which
    orientation, and provide this data to the interactive development for further
    processing.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 碰撞检测代码必须确定所有这样的重叠对象对，收集一些额外的数据，例如它们重叠的距离和方向，并将这些数据提供给交互式开发以供进一步处理。
- en: In the later chapters, we will see how we can handle collision detection in
    Unity3D.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在后面的章节中，我们将看到如何在Unity3D中处理碰撞检测。
- en: Collision resolution
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 碰撞解决
- en: What will happen after the collision? Let's take a look at one such scenario
    where two or more objects overlap and see what can we do in this case. In many
    cases, some specific rules are added to the interactive development.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 碰撞后会发生什么？让我们看看这样一个场景，其中两个或多个对象重叠，看看在这种情况下我们能做什么。在许多情况下，会添加一些特定的规则到交互式开发中。
- en: For example, in a shooting game, when a bullet hits the player's ship, the game
    might decide to show an explosion animation. Following this, before removing the
    player's ship, the game might start the level again and reduce the number of lives
    of the player. These effects of the collision are driven by the game itself and
    not by Physics because they are very specific to the game.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在一个射击游戏中，当子弹击中玩家的飞船时，游戏可能会决定显示一个爆炸动画。在此之后，在移除玩家的飞船之前，游戏可能会重新开始关卡并减少玩家的生命值。这些碰撞效果是由游戏本身驱动的，而不是物理，因为它们非常特定于游戏。
- en: However, there are certain cases where the game doesn't have to be involved.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在某些情况下，游戏不必涉及。
- en: We've covered the basics of all Physics components. Every simulation suitable
    for interactive development will have these components. Other than the covered
    topics, there are many more features to be included, such as joints, cloth simulations,
    Physics-based animations, and so on.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经涵盖了所有物理组件的基础知识。每个适合交互式开发的模拟都将包含这些组件。除了已涵盖的主题外，还有许多其他功能需要包括，例如关节、布料模拟、基于物理的动画等等。
- en: Physical simulation in Unity
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unity中的物理模拟
- en: 'We will now look at the physical simulations already available in Physics and
    how Unity uses them. This section will also give you an overview of the built-in
    Physics components in Unity3D. Let''s take a look at the Physics simulation in
    Unity:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将探讨物理中已有的物理模拟以及Unity如何使用它们。本节还将为您概述Unity3D中内置的物理组件。让我们看看Unity中的物理模拟：
- en: Unity is a powerful tool. It is able to take care of many problems involved
    with interactive physical simulations. It embeds a state-of-the-art Physics engine
    called PhysX.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity是一个强大的工具。它能够处理交互式物理模拟中涉及到的许多问题。它集成了名为PhysX的顶尖物理引擎。
- en: It's Rigidbody is mostly targeted at rigid objects.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Rigidbody主要针对刚体对象。
- en: Using Unity we can make Physics approximations based on an object's parameter
    values.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Unity，我们可以根据对象的参数值进行物理近似。
- en: Built-in Physics in Unity3D
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Unity3D内置的物理
- en: As I mentioned earlier, Unity is a powerful engine that has a number of built-in
    Physics components. It handles physical simulations. By adjusting a few parameter
    settings, we can create an object that behaves in a realistic way.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如我之前提到的，Unity是一个强大的引擎，它包含了许多内置的物理组件。它处理物理模拟。通过调整一些参数设置，我们可以创建一个以现实方式行为的对象。
- en: By controlling Physics from scripts, we can give an object the dynamics of a
    vehicle, machine, cloth, and so on. The built-in components are very useful in
    fast development. In most interactive developments, these simulations are required.
    By making Physics a built-in component, Unity3D has made developers' lives easier.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 通过从脚本中控制物理，我们可以给对象赋予车辆、机器、布料等的动力学。内置组件在快速开发中非常有用。在大多数交互式开发中，这些模拟是必需的。通过将物理作为内置组件，Unity3D使开发者的生活变得更加容易。
- en: Note
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Unity has two separate Physics engines: one for 3D Physics and one for 2D Physics.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Unity有两个独立的物理引擎：一个用于3D物理，一个用于2D物理。
- en: As such, there is a separate Rigidbody component for 3D Physics and an analogous
    Rigidbody2D component for 2D Physics.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，3D物理有一个单独的Rigidbody组件，而2D物理有一个类似的Rigidbody2D组件。
- en: Now, let's explore the built-in components in Unity3D.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们探索Unity3D中的内置组件。
- en: Built-in Physics components in Unity3D
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Unity3D内置的物理组件
- en: 'The following figure depicts the basic built-in Physics components in Unity3D,
    which help us in interactive development:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示展示了Unity3D中基本的内置物理组件，这些组件有助于我们在交互式开发中：
- en: '![Built-in Physics components in Unity3D](img/00004.jpeg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![Unity3D内置的物理组件](img/00004.jpeg)'
- en: Rigidbodies
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 刚体
- en: We have already discussed that in simulation or interactive development, the
    most important component is a Rigidbody. It enables the physical behavior of an
    object. The object to which a Rigidbody is attached can be made to respond to
    gravity. If we want to create a ball and want it to respond to gravity, we need
    to add a Rigidbody component to the object and gravity will be enabled by default.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论过，在模拟或交互式开发中，最重要的组件是刚体。它使物体的物理行为成为可能。附加了刚体的物体可以响应重力。如果我们想创建一个球体并使其响应重力，我们需要在对象上添加刚体组件，重力将默认启用。
- en: A Rigidbody component takes the movement of the object to which it is attached;
    therefore, we shouldn't try to move it using a script by changing the position
    and rotation. Instead, we can apply forces to push the object and let the Physics
    engine calculate the results.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 刚体组件会接受它所附加的物体的运动；因此，我们不应尝试通过改变位置和旋转来使用脚本移动它。相反，我们可以施加力来推动物体，并让物理引擎计算结果。
- en: Kinematic motion and Rigidbodies
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运动学运动和刚体
- en: Sometimes, it is desirable for a Rigidbody object's motion to not be controlled
    by the Physics engine but by the script code instead. This type of motion produced
    from a script is known as kinematic motion.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们希望刚体对象的运动不由物理引擎控制，而是由脚本代码控制。从脚本中产生的这种运动称为运动学运动。
- en: '**Is Kinematic** is one of the properties of a Rigidbody that will remove it
    from the control of the Physics engine and allow it to be moved using a script.
    We can change the value of Is Kinematic from a script to switch this property
    on and off for an object by using both the script and the inspector.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**是否运动学**是刚体的一个属性，它将使物体从物理引擎的控制中移除，并允许使用脚本移动它。我们可以通过脚本和检查器来更改Is Kinematic的值，以在对象上打开和关闭此属性。'
- en: Note
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Is Kinematic is useful, but we should keep in mind that enabling it will affect
    performance. If enabled, the object will not be driven by the Physics engine and
    can only be manipulated by its transform, which is more performance consuming.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Is Kinematic很有用，但我们应该记住，启用它会影响性能。如果启用，物体将不会由物理引擎驱动，只能通过其变换来操作，这会更消耗性能。
- en: Colliders
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 碰撞体
- en: It's one of the most important built-in components of Unity3D. A collider component
    is used to define the shape for the physical collision. We use different colliders
    according to the shape of the objects. A collider, which is invisible, need not
    be matched exactly to the shape of the object's mesh.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Unity3D中最重要的一些内置组件之一。碰撞体组件用于定义物理碰撞的形状。我们根据对象的形状使用不同的碰撞体。一个不可见的碰撞体不需要与对象网格的形状完全匹配。
- en: In the later chapters, we will see how to use different colliders.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在后面的章节中，我们将看到如何使用不同的碰撞体。
- en: 'In 3D, the following are the basic colliders:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在3D中，以下是一些基本碰撞体：
- en: Box Collider
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 箱体碰撞体
- en: Sphere Collider
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 球形碰撞体
- en: Capsule Collider
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 胶囊碰撞体
- en: Mesh Collider
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网格碰撞体
- en: 'Take a look at the following figure:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看以下图示：
- en: '![Colliders](img/00005.jpeg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![碰撞体](img/00005.jpeg)'
- en: 'There are differences between 3D colliders and 2D colliders. In 2D, the following
    are the basic colliders:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 3D碰撞体和2D碰撞体之间存在差异。在2D中，以下是一些基本碰撞体：
- en: Box Collider 2D
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2D箱体碰撞体
- en: Circle Collider 2D
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2D圆形碰撞体
- en: Polygon Collider 2D
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2D多边形碰撞体
- en: 'Take a look at the following figure:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看以下图示：
- en: '![Colliders](img/00006.jpeg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![碰撞体](img/00006.jpeg)'
- en: Apart from the aforementioned core colliders, there are a few important terms
    about the colliders that you need to know.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 除了上述核心碰撞体之外，还有一些关于碰撞体的重要术语，你需要了解。
- en: Static colliders
  id: totrans-83
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 静态碰撞体
- en: Colliders can be added to an object without a Rigidbody component in order to
    create floors, walls, and so on. These are referred to as static colliders. Repositioning
    static colliders by changing the transform position will impact the performance
    of the Physics engine heavily.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 可以向没有刚体组件的对象添加碰撞体，以创建地板、墙壁等。这些被称为静态碰撞体。通过改变变换位置来重新定位静态碰撞体会严重影响物理引擎的性能。
- en: Note
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To improve the performance, we should not reposition static colliders by changing
    the transformation position.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提高性能，我们不应通过改变变换位置来重新定位静态碰撞体。
- en: Dynamic colliders
  id: totrans-87
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 动态碰撞体
- en: Colliders attached to a Rigidbody object are known as dynamic colliders. Static
    colliders do not respond to collisions with dynamic colliders with any movement.
    In the later chapters, we will learn about the aforementioned colliders and how
    to implement these colliders in detail.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到 Rigidbody 对象的碰撞体被称为动态碰撞体。静态碰撞体不会对动态碰撞体的任何运动做出响应。在后面的章节中，我们将学习上述碰撞体以及如何详细实现这些碰撞体。
- en: Physic Materials
  id: totrans-89
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 物理材料
- en: Different materials are used for different objects. As the colliders interact,
    their surfaces need to simulate the properties of the material that they are supposed
    to represent. We can configure the friction and bounce using Physic Materials.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的物体使用不同的材料。当碰撞体相互作用时，它们的表面需要模拟它们所代表材料的属性。我们可以使用物理材料来配置摩擦和弹跳。
- en: Again, Physic Materials for 2D and 3D are different; they are called Physic
    Materials 3D and Physic Materials 2D.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，2D 和 3D 的物理材料是不同的；它们分别称为物理材料 3D 和物理材料 2D。
- en: Triggers
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 触发器
- en: In scripting, we can detect when the collisions are going to occur and then
    we can initiate taking actions using the `OnCollisionEnter` function. We can configure
    a collider, which does not behave as a solid object, as a trigger using the `Is
    Trigger` property of Unity3D, and we will simply allow other colliders to pass
    through. When a collision occurs, a trigger will call the `OnTriggerEnter` function
    on the trigger object's scripts. Using these functions, we can handle a number
    of scenarios where an action after the collision is required.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本编写中，我们可以检测碰撞何时发生，然后我们可以使用 `OnCollisionEnter` 函数来启动采取行动。我们可以配置一个不作为固体对象行为的碰撞体，使用
    Unity3D 的 `Is Trigger` 属性将其作为触发器，然后我们将简单地允许其他碰撞体通过。当发生碰撞时，触发器将调用触发对象脚本上的 `OnTriggerEnter`
    函数。使用这些函数，我们可以处理需要碰撞后采取行动的多种场景。
- en: Note
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The following points will give you sources where you can find more details
    on this particular topic:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 以下要点将为您提供更多关于此特定主题的详细信息来源：
- en: '`Collider.OnCollisionEnter(Collision)` at [http://docs.unity3d.com/ScriptReference/Collider.OnCollisionEnter.html](http://docs.unity3d.com/ScriptReference/Collider.OnCollisionEnter.html)'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Collider.OnCollisionEnter(Collision)` 在 [http://docs.unity3d.com/ScriptReference/Collider.OnCollisionEnter.html](http://docs.unity3d.com/ScriptReference/Collider.OnCollisionEnter.html)'
- en: '`Collider.OnCollisionStay(Collision)` at [http://docs.unity3d.com/ScriptReference/Collider.OnCollisionStay.html](http://docs.unity3d.com/ScriptReference/Collider.OnCollisionStay.html)'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Collider.OnCollisionStay(Collision)` 在 [http://docs.unity3d.com/ScriptReference/Collider.OnCollisionStay.html](http://docs.unity3d.com/ScriptReference/Collider.OnCollisionStay.html)'
- en: '`Collider.OnCollisionExit(Collision)` at [http://docs.unity3d.com/ScriptReference/Collider.OnCollisionExit.html](http://docs.unity3d.com/ScriptReference/Collider.OnCollisionExit.html)'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Collider.OnCollisionExit(Collision)` 在 [http://docs.unity3d.com/ScriptReference/Collider.OnCollisionExit.html](http://docs.unity3d.com/ScriptReference/Collider.OnCollisionExit.html)'
- en: '`Collider.OnTriggerEnter(Collider)` at [http://docs.unity3d.com/ScriptReference/Collider.OnTriggerEnter.html](http://docs.unity3d.com/ScriptReference/Collider.OnTriggerEnter.html)'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Collider.OnTriggerEnter(Collider)` 在 [http://docs.unity3d.com/ScriptReference/Collider.OnTriggerEnter.html](http://docs.unity3d.com/ScriptReference/Collider.OnTriggerEnter.html)'
- en: '`Collider.OnTriggerStay(Collider)` at [http://docs.unity3d.com/ScriptReference/Collider.OnTriggerStay.html](http://docs.unity3d.com/ScriptReference/Collider.OnTriggerStay.html)'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Collider.OnTriggerStay(Collider)` 在 [http://docs.unity3d.com/ScriptReference/Collider.OnTriggerStay.html](http://docs.unity3d.com/ScriptReference/Collider.OnTriggerStay.html)'
- en: '`Collider.OnTriggerExit(Collider)` at [http://docs.unity3d.com/ScriptReference/Collider.OnTriggerExit.html](http://docs.unity3d.com/ScriptReference/Collider.OnTriggerExit.html)'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Collider.OnTriggerExit(Collider)` 在 [http://docs.unity3d.com/ScriptReference/Collider.OnTriggerExit.html](http://docs.unity3d.com/ScriptReference/Collider.OnTriggerExit.html)'
- en: Joints
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关节
- en: Often, one Rigidbody object is attached to another using joints. Unity provides
    different joints to help us in different scenarios. We can attach one Rigidbody
    object to another or to a fixed point in space using a joint component. If we
    want a joint to allow at least some freedom of motion and so on, then Unity provides
    different joint components that enforce different restrictions.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，一个 Rigidbody 对象会通过关节连接到另一个对象。Unity 提供了不同的关节来帮助我们处理不同的场景。我们可以使用关节组件将一个 Rigidbody
    对象连接到另一个对象或空间中的固定点。如果我们希望关节允许至少一些运动自由度等，那么 Unity 提供了不同的关节组件，它们施加不同的限制。
- en: 'The following figure depicts the types of joints:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图展示了关节的类型：
- en: '![Joints](img/00007.jpeg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![关节](img/00007.jpeg)'
- en: Joints also have other options that enable specific effects; for example, we
    can set a joint to break when the force applied to it exceeds a decided limit.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 关节还有其他选项，可以启用特定效果；例如，我们可以设置一个关节，当施加在其上的力超过设定的限制时，该关节会断裂。
- en: We will learn more about joints in the later chapters.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在后面的章节中，我们将学习更多关于关节的内容。
- en: Character controllers
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 角色控制器
- en: In game development, often a character is required, and for this, a controller
    is always required. A character in a first- or third-person game will often need
    some collision-based Physics so that character doesn't fall on the floor or walk
    over the walls.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在游戏开发中，通常需要一个角色，为此，需要一个控制器。在第一人称或第三人称游戏中，角色通常会需要一些基于碰撞的物理，这样角色就不会掉到地板上或穿过墙壁。
- en: Unity3D provides a component to create this behavior, which is called **CharacterController**.
    This component uses a Capsule Collider. The controller has functions to set the
    object's speed and direction.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Unity3D 提供了一个用于创建这种行为的组件，该组件被称为 **CharacterController**。此组件使用胶囊碰撞体。控制器具有设置对象速度和方向的功能。
- en: Note
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can find more details at [http://docs.unity3d.com/ScriptReference/CharacterController.html](http://docs.unity3d.com/ScriptReference/CharacterController.html).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [http://docs.unity3d.com/ScriptReference/CharacterController.html](http://docs.unity3d.com/ScriptReference/CharacterController.html)
    找到更多详细信息。
- en: Scripting based on collision
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基于碰撞的脚本
- en: Let's see how we can handle collision and an after-collision effects with scripting.
    Scripts are attached to the objects in order to call some functions on collision.
    We can write any code in these functions to respond to the collision event. For
    example, we might play a sound effect when a ball hits an obstacle.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们如何通过脚本处理碰撞和碰撞后的效果。脚本附加到对象上，以便在碰撞时调用某些函数。我们可以在这些函数中编写任何代码来响应碰撞事件。例如，当球撞击障碍物时，我们可能会播放音效。
- en: '`OnCollisionEnter`: This function indicates that the collision is detected
    in the first update'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnCollisionEnter`：此函数表示在第一次更新中检测到碰撞'
- en: '`OnCollisionStay`: This function indicates that during the updates, the contact
    is maintained'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnCollisionStay`：此函数表示在更新期间保持接触'
- en: '`OnCollisionExit`: This function indicates that the contact has been broken'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnCollisionExit`：此函数表示接触已被断开'
- en: Similarly, for Trigger Colliders, these functions are called `OnTriggerEnter`,
    `OnTriggerStay`, and `OnTriggerExit`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，对于触发碰撞体，这些函数分别称为 `OnTriggerEnter`、`OnTriggerStay` 和 `OnTriggerExit`。
- en: Note
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For 2D Physics, there are equivalent functions with 2D appended to the name;
    for example, `OnCollisionEnter2D`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 2D 物理学，有以 2D 结尾的等效函数；例如，`OnCollisionEnter2D`。
- en: With normal nontrigger collisions, there is an additional requirement that at
    least one of the objects involved must have a nonkinematic Rigidbody. To create
    a nonkinematic Rigidbody, we must set Is Kinematic to `off`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在正常非触发碰撞中，有一个额外要求，即至少有一个参与的对象必须具有非运动刚体。要创建非运动刚体，我们必须将“是运动学”设置为“关闭”。
- en: Frictionless Physic Materials
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 无摩擦物理材料
- en: 'Sometimes, during the development, we require frictionless Physic Materials.
    Let''s try to create a frictionless material. In Unity3D, to create a completely
    frictionless material, we need to create a new Physic Materials asset in the **Project**
    view and set its properties as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，在开发过程中，我们需要无摩擦物理材料。让我们尝试创建一个无摩擦材料。在 Unity3D 中，要创建一个完全无摩擦的材料，我们需要在 **项目**
    视图中创建一个新的物理材料资产，并设置其属性如下：
- en: '![Frictionless Physic Materials](img/00008.jpeg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![无摩擦物理材料](img/00008.jpeg)'
- en: In the previous image, we can see various parameters, using which we can fulfil
    our frictionless game requirement.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图像中，我们可以看到各种参数，使用这些参数我们可以满足我们的无摩擦游戏需求。
- en: Summary
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: This chapter is a quick introduction to Physics in Unity3D. In this chapter,
    we learned the use of Physics in an interactive world, built-in components of
    Unity3D, and frictionless material. In the next chapter, we will learn about colliders
    and their types, with examples. The chapter will also teach us how we can use
    different colliders for interaction.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是 Unity3D 中物理学的快速介绍。在本章中，我们学习了在交互式世界中使用物理，Unity3D 的内置组件，以及无摩擦材料。在下一章中，我们将学习碰撞体及其类型，并举例说明。本章还将教我们如何使用不同的碰撞体进行交互。
