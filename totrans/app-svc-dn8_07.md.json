["```cs\nDateTime dotnet9GA = new(year: 2024, month: 11, day: 12,\n  hour: 11, minute: 0, second: 0); \n```", "```cs\n    using System.Globalization; // To use CultureInfo.\n    partial class Program\n    {\n      private static void ConfigureConsole(string culture = \"en-US\",\n        bool overrideComputerCulture = true)\n      {\n        // To enable special characters like Euro currency symbol.\n        OutputEncoding = System.Text.Encoding.UTF8;\n        Thread t = Thread.CurrentThread;\n        if (overrideComputerCulture)\n        {\n          t.CurrentCulture = CultureInfo.GetCultureInfo(culture);\n          t.CurrentUICulture = t.CurrentCulture;\n        }\n        CultureInfo ci = t.CurrentCulture;\n        WriteLine($\"Current culture: {ci.DisplayName}\");\n        WriteLine($\"Short date pattern: {\n          ci.DateTimeFormat.ShortDatePattern}\");\n        WriteLine($\"Long date pattern: {\n          ci.DateTimeFormat.LongDatePattern}\");\n        WriteLine();\n      }\n      private static void SectionTitle(string title)\n      {\n        ConsoleColor previousColor = ForegroundColor;\n        ForegroundColor = ConsoleColor.DarkYellow;\n        WriteLine($\"*** {title}\");\n        ForegroundColor = previousColor;\n      }\n    } \n    ```", "```cs\n    ConfigureConsole(); // Defaults to en-US culture.\n    SectionTitle(\"Specifying date and time values\");\n    WriteLine($\"DateTime.MinValue:  {DateTime.MinValue}\");\n    WriteLine($\"DateTime.MaxValue:  {DateTime.MaxValue}\");\n    WriteLine($\"DateTime.UnixEpoch: {DateTime.UnixEpoch}\");\n    WriteLine($\"DateTime.Now:       {DateTime.Now}\");\n    WriteLine($\"DateTime.Today:     {DateTime.Today}\");\n    WriteLine($\"DateTime.Today:     {DateTime.Today:d}\");\n    WriteLine($\"DateTime.Today:     {DateTime.Today:D}\"); \n    ```", "```cs\n    Current culture: English (United States)\n    Short date pattern: M/d/yyyy\n    Long date pattern: dddd, MMMM d, yyyy\n    *** Specifying date and time values\n    DateTime.MinValue:  1/1/0001 12:00:00 AM\n    DateTime.MaxValue:  12/31/9999 11:59:59 PM\n    DateTime.UnixEpoch: 1/1/1970 12:00:00 AM\n    DateTime.Now:       5/30/2023 9:18:05 AM\n    DateTime.Today:     5/30/2023 12:00:00 AM\n    DateTime.Today:     5/30/2023\n    DateTime.Today:     Tuesday, May 30, 2023 \n    ```", "```cs\n    ConfigureConsole(overrideComputerCulture: false); \n    ```", "```cs\n    ConfigureConsole(\"fr-CA\"); \n    ```", "```cs\n    ConfigureConsole(); // Defaults to en-US culture. \n    ```", "```cs\n    DateTime xmas = new(year: 2024, month: 12, day: 25);\n    WriteLine($\"Christmas (default format): {xmas}\");\n    WriteLine($\"Christmas (custom short format): {xmas:ddd d/M/yy}\");\n    WriteLine($\"Christmas (custom long format): {\n      xmas:dddd, dd MMMM yyyy}\");\n    WriteLine($\"Christmas (standard long format): {xmas:D}\");\n    WriteLine($\"Christmas (sortable): {xmas:u}\");\n    WriteLine($\"Christmas is in month {xmas.Month} of the year.\");\n    WriteLine($\"Christmas is day {xmas.DayOfYear} of {xmas.Year}.\");\n    WriteLine($\"Christmas {xmas.Year} is on a {xmas.DayOfWeek}.\"); \n    ```", "```cs\n    Christmas (default format): 12/25/2024 12:00:00 AM\n    Christmas (custom short format): Wed, 25/12/24\n    Christmas (custom long format): Wednesday, 25 December 2024\n    Christmas (standard long format): Wednesday, December 25, 2024\n    Christmas (sortable): 2024-12-25 00:00:00Z\n    Christmas is in month 12 of the year.\n    Christmas is day 360 of 2024.\n    Christmas 2024 is on a Wednesday. \n    ```", "```cs\n    ConfigureConsole(\"fr-FR\"); // Defaults to en-US culture. \n    ```", "```cs\n    SectionTitle(\"Date and time calculations\");\n    DateTime beforeXmas = xmas.Subtract(TimeSpan.FromDays(12));\n    DateTime afterXmas = xmas.AddDays(12);\n    WriteLine($\"12 days before Christmas: {beforeXmas:d}\");\n    WriteLine($\"12 days after Christmas: {afterXmas:d}\");\n    TimeSpan untilXmas = xmas - DateTime.Now;\n    WriteLine($\"Now: {DateTime.Now}\");\n    WriteLine($\"There are {untilXmas.Days} days and {untilXmas.Hours\n      } hours until Christmas {xmas.Year.\");\n    WriteLine(\"There are {untilXmas.TotalHours:N0} hours \" +\n      $\"until Christmas {xmas.Year}.\"); \n    ```", "```cs\n    *** Date and time calculations\n    12 days before Christmas: 12/13/2024\n    12 days after Christmas: 1/6/2025\n    Now: 5/30/2023 1:57:01 PM\n    There are 574 days and 10 hours until Christmas 2024.\n    There are 13,786 hours until Christmas 2024. \n    ```", "```cs\n    DateTime kidsWakeUp = new(\n      year: 2024, month: 12, day: 25, \n      hour: 6, minute: 30, second: 0);\n    WriteLine($\"Kids wake up: {kidsWakeUp}\");\n    WriteLine($\"The kids woke me up at {\n      kidsWakeUp.ToShortTimeString()}\"); \n    ```", "```cs\n    Kids wake up: 25/12/2024 06:30:00 AM\n    The kids woke me up at 06:30 AM \n    ```", "```cs\n    SectionTitle(\"Milli-, micro-, and nanoseconds\");\n    DateTime preciseTime = new(\n      year: 2022, month: 11, day: 8,\n      hour: 12, minute: 0, second: 0,\n      millisecond: 6, microsecond: 999);\n    WriteLine($\"Millisecond: {preciseTime.Millisecond}, Microsecond: {\n      preciseTime.Microsecond}, Nanosecond: {preciseTime.Nanosecond}\");\n    preciseTime = DateTime.UtcNow;\n    // Nanosecond value will be 0 to 900 in 100 nanosecond increments.\n    WriteLine($\"Millisecond: {preciseTime.Millisecond}, Microsecond: {\n      preciseTime.Microsecond}, Nanosecond: {preciseTime.Nanosecond}\"); \n    ```", "```cs\n    *** Milli-, micro-, and nanoseconds\n    Millisecond: 6, Microsecond: 999, Nanosecond: 0\n    Millisecond: 243, Microsecond: 958, Nanosecond: 400 \n    ```", "```cs\n    using System.Globalization; // To use CultureInfo. \n    ```", "```cs\n    SectionTitle(\"Globalization with dates and times\");\n    // Same as Thread.CurrentThread.CurrentCulture.\n    WriteLine($\"Current culture: {CultureInfo.CurrentCulture.Name}\");\n    string textDate = \"4 July 2024\";\n    DateTime independenceDay = DateTime.Parse(textDate);\n    WriteLine($\"Text: {textDate}, DateTime: {independenceDay:d MMMM}\");\n    textDate = \"7/4/2024\";\n    independenceDay = DateTime.Parse(textDate);\n    WriteLine($\"Text: {textDate}, DateTime: {independenceDay:d MMMM}\");\n    // Explicitly override the current culture by setting a provider.\n    independenceDay = DateTime.Parse(textDate,\n      provider: CultureInfo.GetCultureInfo(\"en-US\"));\n    WriteLine($\"Text: {textDate}, DateTime: {independenceDay:d MMMM}\"); \n    ```", "```cs\n    ConfigureConsole(\"en-GB\"); \n    ```", "```cs\n    *** Globalization with dates and times\n    Current culture is: en-GB\n    Text: 4 July 2024, DateTime: 4 July\n    Text: 7/4/2024, DateTime: 7 April\n    Text: 7/4/2024, DateTime: 4 July \n    ```", "```cs\n    for (int year = 2023; year <= 2028; year++)\n    {\n      Write($\"{year} is a leap year: {DateTime.IsLeapYear(year)}. \");\n      WriteLine($\"There are {DateTime.DaysInMonth(year: year, month: 2)\n        } days in February {year}.\");\n    }\n    WriteLine($\"Is Christmas daylight saving time? {\n      xmas.IsDaylightSavingTime()}\");\n    WriteLine($\"Is July 4th daylight saving time? {\n      independenceDay.IsDaylightSavingTime()}\"); \n    ```", "```cs\n    2023 is a leap year: False. There are 28 days in February 2023.\n    2024 is a leap year: True. There are 29 days in February 2024.\n    2025 is a leap year: False. There are 28 days in February 2025.\n    2026 is a leap year: False. There are 28 days in February 2026.\n    2027 is a leap year: False. There are 28 days in February 2027.\n    2028 is a leap year: True. There are 29 days in February 2028.\n    Is Christmas daylight saving time? False\n    Is July 4th daylight saving time? True \n    ```", "```cs\nnamespace System\n{\n  public enum DayOfWeek\n  {\n    Sunday = 0,\n    Monday = 1,\n    Tuesday = 2,\n    Wednesday = 3,\n    Thursday = 4,\n    Friday = 5,\n    Saturday = 6\n  }\n} \n```", "```cs\nWriteLine($\"The day of the week is {DateTime.Now:dddd}.\"); \n```", "```cs\n    SectionTitle(\"Localizing the DayOfWeek enum\");\n    CultureInfo previousCulture = Thread.CurrentThread.CurrentCulture;\n    // Explicitly set culture to Danish (Denmark).\n    Thread.CurrentThread.CurrentCulture = \n      CultureInfo.GetCultureInfo(\"da-DK\");\n    // DayOfWeek is not localized to Danish.\n    WriteLine(\"Culture: {Thread.CurrentThread.CurrentCulture\n      .NativeName}, DayOfWeek: {DateTime.Now.DayOfWeek}\";\n    // Use dddd format code to get day of the week localized.\n    WriteLine($\"Culture: {Thread.CurrentThread.CurrentCulture\n      .NativeName}, DayOfWeek: {DateTime.Now:dddd}\");\n    // Use GetDayName method to get day of the week localized.\n    WriteLine(\"Culture: {Thread.CurrentThread.CurrentCulture\n      .NativeName}, DayOfWeek: {DateTimeFormatInfo.CurrentInfo\n      .GetDayName(DateTime.Now.DayOfWeek)}\");\n    Thread.CurrentThread.CurrentCulture = previousCulture; \n    ```", "```cs\n    *** Localizing the DayOfWeek enum\n    Culture: dansk (Danmark), DayOfWeek: Thursday\n    Culture: dansk (Danmark), DayOfWeek: torsdag\n    Culture: dansk (Danmark), DayOfWeek: torsdag \n    ```", "```cs\n    SectionTitle(\"Working with only a date or a time\");\n    DateOnly party = new(year: 2024, month: 11, day: 12);\n    WriteLine($\"The .NET 9 release party is on {party.ToLongDateString()}.\");\n    TimeOnly starts = new(hour: 11, minute: 30);\n    WriteLine($\"The party starts at {starts}.\");\n    DateTime calendarEntry = party.ToDateTime(starts);\n    WriteLine($\"Add to your calendar: {calendarEntry}.\"); \n    ```", "```cs\n    *** Working with only a date or a time\n    The .NET 9 release party is on Tuesday, November 12, 2024.\n    The party starts at 11:30 AM.\n    Add to your calendar: 11/12/2024 11:30:00 AM. \n    ```", "```cs\n    SectionTitle(\"Working with date/time formats\");\n    DateTimeFormatInfo dtfi = DateTimeFormatInfo.CurrentInfo;\n    // Or use Thread.CurrentThread.CurrentCulture.DateTimeFormat.\n    WriteLine($\"Date separator: {dtfi.DateSeparator}\");\n    WriteLine($\"Time separator: {dtfi.TimeSeparator}\");\n    WriteLine($\"Long date pattern: {dtfi.LongDatePattern}\");\n    WriteLine($\"Short date pattern: {dtfi.ShortDatePattern}\");\n    WriteLine($\"Long time pattern: {dtfi.LongTimePattern}\");\n    WriteLine($\"Short time pattern: {dtfi.ShortTimePattern}\");\n    Write(\"Day names:\");\n    for (int i = 0; i < dtfi.DayNames.Length - 1; i++)\n    {\n      Write($\"  {dtfi.GetDayName((DayOfWeek)i)}\");\n    }\n    WriteLine();\n    Write(\"Month names:\");\n    for (int i = 1; i < dtfi.MonthNames.Length; i++)\n    {\n      Write($\"  {dtfi.GetMonthName(i)}\");\n    }\n    WriteLine(); \n    ```", "```cs\n    *** Working with date/time formats\n    Date separator: /\n    Time separator: :\n    Long date pattern: dddd, MMMM d, yyyy\n    Short date pattern: M/d/yyyy\n    Long time pattern: h:mm:ss tt\n    Short time pattern: h:mm tt\n    Day names:  Sunday  Monday  Tuesday  Wednesday  Thursday  Friday\n    Month names:  January  February  March  April  May  June  July  August  September  October  November  December \n    ```", "```cs\n    namespace Northwind.Services;\n    public class DiscountService\n    {\n      public decimal GetDiscount()\n      {\n        // This has a dependency on the current time provided by the system.\n        var now = DateTime.UtcNow;\n        return now.DayOfWeek switch\n        {\n          DayOfWeek.Saturday or DayOfWeek.Sunday => 0.2M,\n          _ => 0M\n        };\n      }\n    } \n    ```", "```cs\n    <ItemGroup>\n      <ProjectReference Include=\n        \"..\\TimeFunctionsLib\\TimeFunctionsLib.csproj\" />\n    </ItemGroup> \n    ```", "```cs\n    using Northwind.Services; // To use DiscountService.\n    namespace TestingWithTimeProvider;\n    public class TimeTests\n    {\n      [Fact]\n      public void TestDiscountDuringWorkdays()\n      {\n        // Arrange\n        DiscountService service = new();\n        // Act\n        decimal discount = service.GetDiscount();\n        // Assert\n        Assert.Equal(0M, discount);\n      }\n      [Fact]\n      public void TestDiscountDuringWeekends()\n      {\n        DiscountService service = new();\n        decimal discount = service.GetDiscount();\n        Assert.Equal(0.2M, discount);\n      }\n    } \n    ```", "```cs\nusing System;\nnamespace Microsoft.Extensions.Internal\n{\n  public interface ISystemClock\n  {\n    DateTimeOffset UtcNow { get; }\n  }\n  public class SystemClock\n  {\n    public DateTimeOffset UtcNow \n    {\n      return DateTimeOffset.UtcNow;\n    }\n  }\n} \n```", "```cs\n    namespace Northwind.Services;\n    public class DiscountService\n    {\n    **private** **TimeProvider _timeProvider;**\n    **public****DiscountService****(****TimeProvider timeProvider****)**\n     **{**\n     **_timeProvider = timeProvider;**\n     **}**\n      public decimal GetDiscount()\n      {\n        // This has a dependency on the current time provided by the system.\n        **//** var now = DateTime.UtcNow;\n    **var** **now = _timeProvider.GetUtcNow();**\n        // This has a dependency on the current time provided by the system.\n        return now.DayOfWeek switch\n        {\n          DayOfWeek.Saturday or DayOfWeek.Sunday => 0.2M,\n          _ => 0M\n        };\n      }\n    } \n    ```", "```cs\n    // This would use the .NET 8 or later dependency service,\n    // but its implementation is still the system clock.\n    DiscountService service = new(TimeProvider.System); \n    ```", "```cs\n    <!-- The newest version before the controversy. -->\n    <PackageReference Include=\"Moq\" Version=\"4.18.4\" /> \n    ```", "```cs\n    using Moq; // To use Mock.Of<T> method. \n    ```", "```cs\n    TimeProvider timeProvider = Mock.Of<TimeProvider>();\n    // Mock the time provider so it always returns the date of\n    // 2023-11-07 09:30:00 UTC which is a Tuesday.\n    Mock.Get(timeProvider).Setup(s => s.GetUtcNow()).Returns(\n      new DateTimeOffset(year: 2023, month: 11, day: 7, \n      hour: 9, minute: 30, second: 0, offset: TimeSpan.Zero));\n    DiscountService service = new(timeProvider); \n    ```", "```cs\n    TimeProvider timeProvider = Mock.Of<TimeProvider>();\n    // Mock the time provider so it always returns the date of\n    // 2023-11-04 09:30:00 UTC which is a Saturday.\n    Mock.Get(timeProvider).Setup(s => s.GetUtcNow()).Returns(\n      new DateTimeOffset(year: 2023, month: 11, day: 4, \n      hour: 9, minute: 30, second: 0, offset: TimeSpan.Zero));\n    DiscountService service = new(timeProvider); \n    ```", "```cs\n    using System.Collections.ObjectModel; // To use ReadOnlyCollection<T>\n    partial class Program\n    {\n      private static void SectionTitle(string title)\n      {\n        ConsoleColor previousColor = ForegroundColor;\n        ForegroundColor = ConsoleColor.DarkYellow;\n        WriteLine($\"*** {title}\");\n        ForegroundColor = previousColor;\n      }\n      private static void OutputTimeZones()\n      {\n        // get the time zones registered with the OS\n        ReadOnlyCollection<TimeZoneInfo> zones = \n          TimeZoneInfo.GetSystemTimeZones();\n        WriteLine($\"*** {zones.Count} time zones:\");\n        // order the time zones by Id instead of DisplayName\n        foreach (TimeZoneInfo zone in zones.OrderBy(z => z.Id))\n        {\n          WriteLine($\"{zone.Id}\");\n        }\n      }\n      private static void OutputDateTime(DateTime dateTime, string title)\n      {\n        SectionTitle(title);\n        WriteLine($\"Value: {dateTime}\");\n        WriteLine($\"Kind: {dateTime.Kind}\");\n        WriteLine($\"IsDaylightSavingTime: {dateTime.IsDaylightSavingTime()}\");\n        WriteLine($\"ToLocalTime(): {dateTime.ToLocalTime()}\");\n        WriteLine($\"ToUniversalTime(): {dateTime.ToUniversalTime()}\");\n      }\n      private static void OutputTimeZone(TimeZoneInfo zone, string title)\n      {\n        SectionTitle(title);\n        WriteLine($\"Id: {zone.Id}\");\n        WriteLine($\"IsDaylightSavingTime(DateTime.Now): {\n          zone.IsDaylightSavingTime(DateTime.Now)}\");\n        WriteLine($\"StandardName: {zone.StandardName}\");\n        WriteLine($\"DaylightName: {zone.DaylightName}\");\n        WriteLine($\"BaseUtcOffset: {zone.BaseUtcOffset}\");\n      }\n      private static string GetCurrentZoneName(TimeZoneInfo zone, DateTime when)\n      {\n        // time zone names change if Daylight Saving time is active\n        // e.g. GMT Standard Time becomes GMT Summer Time\n        return zone.IsDaylightSavingTime(when) ?\n          zone.DaylightName : zone.StandardName;\n      }\n    } \n    ```", "```cs\n    OutputTimeZones();\n    OutputDateTime(DateTime.Now, \"DateTime.Now\");\n    OutputDateTime(DateTime.UtcNow, \"DateTime.UtcNow\");\n    OutputTimeZone(TimeZoneInfo.Local, \"TimeZoneInfo.Local\");\n    OutputTimeZone(TimeZoneInfo.Utc, \"TimeZoneInfo.Utc\"); \n    ```", "```cs\n    *** 141 time zones:\n    Afghanistan Standard Time\n    Alaskan Standard Time\n    ...\n    West Pacific Standard Time\n    Yakutsk Standard Time\n    Yukon Standard Time\n    *** DateTime.Now\n    Value: 31/05/2022 16:17:03\n    Kind: Local\n    IsDaylightSavingTime: True\n    ToLocalTime(): 31/05/2022 16:17:03\n    ToUniversalTime(): 31/05/2022 15:17:03\n    *** DateTime.UtcNow\n    Value: 31/05/2022 15:17:03\n    Kind: Utc\n    IsDaylightSavingTime: False\n    ToLocalTime(): 31/05/2022 16:17:03\n    ToUniversalTime(): 31/05/2022 15:17:03\n    *** TimeZoneInfo.Local\n    Id: GMT Standard Time\n    IsDaylightSavingTime(DateTime.Now): True\n    StandardName: GMT Standard Time\n    DaylightName: GMT Summer Time\n    BaseUtcOffset: 00:00:00\n    *** TimeZoneInfo.Utc\n    Id: UTC\n    IsDaylightSavingTime(DateTime.Now): False\n    StandardName: Coordinated Universal Time\n    DaylightName: Coordinated Universal Time\n    BaseUtcOffset: 00:00:00 \n    ```", "```cs\n    Write(\"Enter a time zone or press Enter for US East Coast: \");\n    string zoneId = ReadLine()!;\n    if (string.IsNullOrEmpty(zoneId))\n    {\n      zoneId = \"Eastern Standard Time\";\n    }\n    try\n    {\n      TimeZoneInfo otherZone = TimeZoneInfo.FindSystemTimeZoneById(zoneId);\n      OutputTimeZone(otherZone,\n        $\"TimeZoneInfo.FindSystemTimeZoneById(\\\"{zoneId}\\\")\");\n      SectionTitle($\"What's the time in {zoneId}?\");\n      Write(\"Enter a local time or press Enter for now: \");\n      string? timeText = ReadLine();\n      DateTime localTime;\n      if (string.IsNullOrEmpty(timeText) || \n        !DateTime.TryParse(timeText, out localTime))\n      {\n        localTime = DateTime.Now;\n      }\n      DateTime otherZoneTime = TimeZoneInfo.ConvertTime(\n        dateTime: localTime, sourceTimeZone: TimeZoneInfo.Local,\n        destinationTimeZone: otherZone);\n      WriteLine($\"{localTime} {GetCurrentZoneName(TimeZoneInfo.Local,\n        localTime)} is {otherZoneTime} {GetCurrentZoneName(otherZone,\n        otherZoneTime)}.\");\n    }\n    catch (TimeZoneNotFoundException)\n    {\n      WriteLine($\"The {zoneId} zone cannot be found on the local system.\");\n    }\n    catch (InvalidTimeZoneException)\n    {\n      WriteLine($\"The {zoneId} zone contains invalid or missing data.\");\n    }\n    catch (System.Security.SecurityException)\n    {\n      WriteLine(\"The application does not have permission to read time zone information.\");\n    }\n    catch (OutOfMemoryException)\n    {\n      WriteLine($\"Not enough memory is available to load information on the {zoneId} zone.\");\n    } \n    ```", "```cs\n    Enter a time zone or press Enter for US East Coast:\n    *** TimeZoneInfo.FindSystemTimeZoneById(\"Eastern Standard Time\")\n    Id: Eastern Standard Time\n    IsDaylightSavingTime(DateTime.Now): True\n    StandardName: Eastern Standard Time\n    DaylightName: Eastern Summer Time\n    BaseUtcOffset: -05:00:00\n    *** What's the time in Eastern Standard Time?\n    Enter a local time or press Enter for now: 12:30pm\n    31/05/2023 12:30:00 GMT Summer Time is 31/05/2023 07:30:00 Eastern Summer Time. \n    ```", "```cs\n    Enter a time zone or press Enter for US East Coast: AUS Eastern Standard Time\n    *** TimeZoneInfo.FindSystemTimeZoneById(\"AUS Eastern Standard Time\")\n    Id: AUS Eastern Standard Time\n    IsDaylightSavingTime(DateTime.Now): False\n    StandardName: AUS Eastern Standard Time\n    DaylightName: AUS Eastern Summer Time\n    BaseUtcOffset: 10:00:00\n    *** What's the time in AUS Eastern Standard Time?\n    Enter a local time or press Enter for now:\n    31/05/2023 17:00:04 GMT Summer Time is 01/06/2023 02:00:04 AUS Eastern Standard Time. \n    ```", "```cs\n    <ItemGroup>\n      <Using Include=\"System.Console\" Static=\"true\" />\n      <Using Include=\"System.Globalization\" />\n    </ItemGroup> \n    ```", "```cs\n    partial class Program\n    {\n      private static void OutputCultures(string title)\n      {\n        ConsoleColor previousColor = ForegroundColor;\n        ForegroundColor = ConsoleColor.DarkYellow;\n        WriteLine($\"*** {title}\");\n        // Get the cultures from the current thread.\n        CultureInfo globalization = CultureInfo.CurrentCulture;\n        CultureInfo localization = CultureInfo.CurrentUICulture;\n        WriteLine($\"The current globalization culture is {\n          globalization.Name}: {globalization.DisplayName}\");\n        WriteLine($\"The current localization culture is {\n          localization.Name}: {localization.DisplayName}\");\n        WriteLine($\"Days of the week: {string.Join(\", \",\n          globalization.DateTimeFormat.DayNames)}\");\n        WriteLine($\"Months of the year: {string.Join(\", \",\n          globalization.DateTimeFormat.MonthNames\n          // Some have 13 months; most 12, and the last is empty.\n          .TakeWhile(month => !string.IsNullOrEmpty(month)))}\");\n        WriteLine($\"1st day of this year: {new DateTime(\n          year: DateTime.Today.Year, month: 1, day: 1)\n          .ToString(\"D\", globalization)}\");\n        WriteLine($\"Number group separator: {globalization\n          .NumberFormat.NumberGroupSeparator}\");\n        WriteLine($\"Number decimal separator: {globalization\n          .NumberFormat.NumberDecimalSeparator}\");\n        RegionInfo region = new(globalization.LCID);\n        WriteLine($\"Currency symbol: {region.CurrencySymbol}\");\n        WriteLine($\"Currency name: {region.CurrencyNativeName} ({\n          region.CurrencyEnglishName})\");\n        WriteLine($\"IsMetric: {region.IsMetric}\");\n        WriteLine();\n        ForegroundColor = previousColor;\n      }\n    } \n    ```", "```cs\n    // To enable special characters like €.\n    OutputEncoding = System.Text.Encoding.UTF8;\n    OutputCultures(\"Current culture\");\n    WriteLine(\"Example ISO culture codes:\");\n    string[] cultureCodes = { \n      \"da-DK\", \"en-GB\", \"en-US\", \"fa-IR\", \n      \"fr-CA\", \"fr-FR\", \"he-IL\", \"pl-PL\", \"sl-SI\" };\n    foreach (string code in cultureCodes)\n    {\n      CultureInfo culture = CultureInfo.GetCultureInfo(code);\n      WriteLine($\"  {culture.Name}: {culture.EnglishName} / {\n        culture.NativeName}\");\n    }\n\n    WriteLine();\n    Write(\"Enter an ISO culture code: \");\n    string? cultureCode = ReadLine();\n    if (string.IsNullOrWhiteSpace(cultureCode))\n    {\n      cultureCode = \"en-US\";\n    }  \n    CultureInfo ci;\n    try\n    {\n      ci = CultureInfo.GetCultureInfo(cultureCode);\n    }\n    catch (CultureNotFoundException)\n    {\n      WriteLine($\"Culture code not found: {cultureCode}\");\n      WriteLine(\"Exiting the app.\");\n      return;\n    }\n    // change the current cultures on the thread\n    CultureInfo.CurrentCulture = ci;\n    CultureInfo.CurrentUICulture = ci;\n    OutputCultures(\"After changing the current culture\");\n    Write(\"Enter your name: \");\n    string? name = ReadLine();\n    if (string.IsNullOrWhiteSpace(name))\n    {\n      name = \"Bob\";\n    }\n    Write(\"Enter your date of birth: \");\n    string? dobText = ReadLine();\n    if (string.IsNullOrWhiteSpace(dobText))\n    {\n      // If they do not enter a DOB then use\n      // sensible defaults for their culture.\n      dobText = ci.Name switch\n        {\n          \"en-US\" or \"fr-CA\" => \"1/27/1990\",\n          \"da-DK\" or \"fr-FR\" or \"pl-PL\" => \"27/1/1990\",\n          \"fa-IR\" => \"1990/1/27\",\n          _ => \"1/27/1990\"\n        };\n    }\n    Write(\"Enter your salary: \");\n    string? salaryText = ReadLine();\n    if (string.IsNullOrWhiteSpace(salaryText))\n    {\n      salaryText = \"34500\";\n    }\n    DateTime dob = DateTime.Parse(dobText);\n    int minutes = (int)DateTime.Today.Subtract(dob).TotalMinutes;\n    decimal salary = decimal.Parse(salaryText);\n    WriteLine($\"{name} was born on a {dob:dddd}. {name} is {\n      minutes:N0} minutes old. {name} earns {salary:C}.\"); \n    ```", "```cs\n    *** Current culture\n    The current globalization culture is en-GB: English (United Kingdom)\n    The current localization culture is en-GB: English (United Kingdom)\n    Days of the week: Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday\n    Months of the year: January, February, March, April, May, June, July, August, September, October, November, December\n    1st day of this year: 01 January 2023\n    Number group separator: ,\n    Number decimal separator: .\n    Currency symbol: £\n    Currency name: British Pound (British Pound)\n    IsMetric: True\n    Example ISO culture codes:\n      da-DK: Danish (Denmark) / dansk (Danmark)\n      en-GB: English (United Kingdom) / English (United Kingdom)\n      en-US: English (United States) / English (United States)\n      fa-IR: Persian (Iran) / فارسی (ایران)\n      fr-CA: French (Canada) / français (Canada)\n      fr-FR: French (France) / français (France)\n      he-IL: Hebrew (Israel) / עברית (ישראל)\n      pl-PL: Polish (Poland) / polski (Polska)\n      sl-SI: Slovenian (Slovenia) / slovenščina (Slovenija)\n    Enter an ISO culture code: en-US\n    *** After changing the current culture\n    The current globalization culture is en-US: English (United States)\n    The current localization culture is en-US: English (United States)\n    Days of the week: Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday\n    Months of the year: January, February, March, April, May, June, July, August, September, October, November, December\n    1st day of this year: Sunday, January 1, 2023\n    Number group separator: ,\n    Number decimal separator: .\n    Currency symbol: $\n    Currency name: US Dollar (US Dollar)\n    IsMetric: False\n    Enter your name: Alice\n    Enter your date of birth: 3/30/1967\n    Enter your salary: 34500\n    Alice was born on a Thursday. Alice is 29,541,600 minutes old. Alice earns $34,500.00 \n    ```", "```cs\n    Enter an ISO culture code: da-DK\n    *** After changing the current culture\n    The current globalization culture is da-DK: dansk (Danmark)\n    The current localization culture is da-DK: dansk (Danmark)\n    Days of the week: søndag, mandag, tirsdag, onsdag, torsdag, fredag, lørdag\n    Months of the year: januar, februar, marts, april, maj, juni, juli, august, september, oktober, november, december\n    1st day of this year: søndag den 1\\. januar 2023\n    Number group separator: .\n    Number decimal separator: ,\n    Currency symbol: kr.\n    Currency name: dansk krone (Danish Krone)\n    IsMetric: True\n    Enter your name: Mikkel\n    Enter your date of birth: 16/3/1980\n    Enter your salary: 65000\n    Mikkel was born on a søndag. Mikkel is 22.723.200 minutes old. Mikkel earns 65.000,00 kr.. \n    ```", "```cs\n    The current globalization culture is pl-PL: polski (Polska)\n    ...\n    Months of the year: styczeń, luty, marzec, kwiecień, maj, czerwiec, lipiec, sierpień, wrzesień, październik, listopad, grudzień\n    1st day of this year: niedziela, 1 stycznia 2023\n    ...\n    Enter your name: Bob\n    Enter your date of birth: 1972/4/16\n    Enter your salary: 50000\n    Bob was born on a niedziela. Bob is 26 886 240 minutes old. Bob earns 50 000,00 zł. \n    ```", "```cs\n    The current globalization culture is fa-IR: فارسی (ایران)\n    The current localization culture is fa-IR: فارسی (ایران)\n    Days of the week: یکشنبه, دوشنبه, سهشنبه, چهارشنبه, پنجشنبه, جمعه, شنبه\n    Months of the year: فروردین, اردیبهشت, خرداد, تیر, مرداد, شهریور, مهر, آبان, آذر, دی, بهمن, اسفند\n    1st day of this year: 1401 دی 11, شنبه\n    Number group separator: ٬\n    Number decimal separator: ٫\n    Currency symbol: ریال\n    Currency name: ریال ایران (Iranian Rial)\n    IsMetric: True\n    Enter your name: Cyrus\n    Enter your date of birth: 1372/4/16\n    Enter your salary: 50000\n    Cyrus was born on a چهارشنبه. Cyrus is 15٬723٬360 minutes old. Cyrus earns ریال50٬000. \n    ```", "```cs\ndecimal price = 54321.99M;\nstring document = $$\"\"\"\n  {\n    \"price\": \"{{price:N2}}\"\n  }\n  \"\"\"; \n```", "```cs\n{\n  \"price\": \" 54.321,99\"\n} \n```", "```cs\ndecimal price = 54321.99M;\nstring document = $$\"\"\"\n  {\n    \"price\": \"{{price.ToString(\"N2\", CultureInfo.InvariantCulture)}}\"\n  }\n  \"\"\"; \n```", "```cs\n{\n  \"price\": \" 54,321.99\"\n} \n```", "```cs\n    <ItemGroup>\n      <PackageReference Include=\"Microsoft.Extensions.Hosting\" \n                        Version=\"8.0.0\" />\n      <PackageReference Include=\"Microsoft.Extensions.Localization\" \n                        Version=\"8.0.0\" />\n    </ItemGroup> \n    ```", "```cs\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <root>\n      <data name=\"EnterYourDob\" xml:space=\"preserve\">\n        <value>Enter your date of birth: </value>\n      </data>\n      <data name=\"EnterYourName\" xml:space=\"preserve\">\n        <value>Enter your name: </value>\n      </data>\n      <data name=\"EnterYourSalary\" xml:space=\"preserve\">\n        <value>Enter your salary: </value>\n      </data>\n      <data name=\"PersonDetails\" xml:space=\"preserve\">\n        <value>{0} was born on a {1:dddd}. {0} is {2:N0} minutes old. {0} earns {3:C}.</value>\n      </data>\n    </root> \n    ```", "```cs\n    using Microsoft.Extensions.Localization; // To use IStringLocalizer and so on.\n    public class PacktResources\n    {\n      private readonly IStringLocalizer<PacktResources> localizer = null!;\n      public PacktResources(IStringLocalizer<PacktResources> localizer)\n      {\n        this.localizer = localizer;\n      }\n      public string? GetEnterYourNamePrompt()\n      {\n        string resourceStringName = \"EnterYourName\";\n        // 1\\. Get the LocalizedString object.\n        LocalizedString localizedString = localizer[resourceStringName];\n        // 2\\. Check if the resource string was found.\n        if (localizedString.ResourceNotFound)\n        {\n          ConsoleColor previousColor = ForegroundColor;\n          ForegroundColor = ConsoleColor.Red;\n          WriteLine($\"Error: resource string \\\"{resourceStringName}\\\" not found.\"\n            + Environment.NewLine\n            + $\"Search path: {localizedString.SearchedLocation}\");\n          ForegroundColor = previousColor;\n          return $\"{localizedString}: \";\n        }\n        // 3\\. Return the found resource string.\n        return localizedString;\n      }\n      public string? GetEnterYourDobPrompt()\n      {\n        // LocalizedString has an implicit cast to string\n        // that falls back to the key if the resource \n        // string is not found.\n        return localizer[\"EnterYourDob\"];\n      }\n      public string? GetEnterYourSalaryPrompt()\n      {\n        return localizer[\"EnterYourSalary\"];\n      }\n      public string? GetPersonDetails(\n        string name, DateTime dob, int minutes, decimal salary)\n      {\n        return localizer[\"PersonDetails\", name, dob, minutes, salary];\n      }\n    } \n    ```", "```cs\n    using Microsoft.Extensions.Hosting; // To use IHost, Host.\n    // To use AddLocalization, AddTransient<T>.\n    using Microsoft.Extensions.DependencyInjection;\n    using IHost host = Host.CreateDefaultBuilder(args)\n      .ConfigureServices(services =>\n      {\n        services.AddLocalization(options =>\n        {\n          options.ResourcesPath = \"Resources\";\n        });\n        services.AddTransient<PacktResources>();\n      })\n      .Build(); \n    ```", "```cs\n    OutputCultures(\"After changing the current culture\");\n    **PacktResources resources =**\n     **host.Services.GetRequiredService<PacktResources>();**\n    Write(**resources.GetEnterYourNamePrompt()**);\n    string? name = ReadLine();\n    if (string.IsNullOrWhiteSpace(name))\n    {\n      name = \"Bob\";\n    }\n    Write(**resources.GetEnterYourDobPrompt()**);\n    string? dobText = ReadLine();\n    if (string.IsNullOrWhiteSpace(dobText))\n    {\n      // If they do not enter a DOB then use\n      // sensible defaults for their culture.\n      dobText = ci.Name switch\n        {\n          \"en-US\" or \"fr-CA\" => \"1/27/1990\",\n          \"da-DK\" or \"fr-FR\" or \"pl-PL\" => \"27/1/1990\",\n          \"fa-IR\" => \"1990/1/27\",\n          _ => \"1/27/1990\"\n        };\n    }\n    Write(**resources.GetEnterYourSalaryPrompt()**);\n    string? salaryText = ReadLine();\n    if (string.IsNullOrWhiteSpace(salaryText))\n    {\n      salaryText = \"34500\";\n    }\n    DateTime dob = DateTime.Parse(dobText);\n    int minutes = (int)DateTime.Today.Subtract(dob).TotalMinutes;\n    decimal salary = decimal.Parse(salaryText);\n    WriteLine(**resources.GetPersonDetails(name, dob, minutes, salary)**); \n    ```", "```cs\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <root>\n      <data name=\"EnterYourDob\" xml:space=\"preserve\">\n        <value>Indtast din fødselsdato: </value>\n      </data>\n      <data name=\"EnterYourName\" xml:space=\"preserve\">\n        <value>Indtast dit navn: </value>\n      </data>\n      <data name=\"EnterYourSalary\" xml:space=\"preserve\">\n        <value>Indtast din løn: </value>\n      </data>\n      <data name=\"PersonDetails\" xml:space=\"preserve\">\n        <value>{0} blev født på en {1:dddd}. {0} er {2:N0} minutter gammel. {0} tjener {3:C}.</value>\n      </data>\n    </root> \n    ```", "```cs\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <root>\n      <data name=\"EnterYourDob\" xml:space=\"preserve\">\n        <value>Entrez votre date de naissance: </value>\n      </data>\n      <data name=\"EnterYourName\" xml:space=\"preserve\">\n        <value>Entrez votre nom: </value>\n      </data>\n      <data name=\"EnterYourSalary\" xml:space=\"preserve\">\n        <value>Entrez votre salaire: </value>\n      </data>\n      <data name=\"PersonDetails\" xml:space=\"preserve\">\n        <value>{0} est né un {1:dddd}. {0} a {2:N0} minutes. {0} gagne {3:C}.</value>\n      </data>\n    </root> \n    ```", "```cs\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <root>\n      <data name=\"EnterYourDob\" xml:space=\"preserve\">\n        <value>Entrez votre date de naissance / Enter your date of birth: </value>\n      </data>\n      <data name=\"EnterYourName\" xml:space=\"preserve\">\n        <value>Entrez votre nom / Enter your name: </value>\n      </data>\n      <data name=\"EnterYourSalary\" xml:space=\"preserve\">\n        <value>Entrez votre salaire / Enter your salary: </value>\n      </data>\n      <data name=\"PersonDetails\" xml:space=\"preserve\">\n        <value>{0} est né un {1:dddd}. {0} a {2:N0} minutes. {0} gagne {3:C}.</value>\n      </data>\n    </root> \n    ```", "```cs\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <root>\n      <data name=\"EnterYourDob\" xml:space=\"preserve\">\n        <value>Wpisz swoją datę urodzenia: </value>\n      </data>\n      <data name=\"EnterYourName\" xml:space=\"preserve\">\n        <value>Wpisz swoje imię i nazwisko: </value>\n      </data>\n      <data name=\"EnterYourSalary\" xml:space=\"preserve\">\n        <value>Wpisz swoje wynagrodzenie: </value>\n      </data>\n      <data name=\"PersonDetails\" xml:space=\"preserve\">\n        <value>{0} urodził się na {1:dddd}. {0} ma {2:N0} minut. {0} zarabia {3:C}.</value>\n      </data>\n    </root> \n    ```", "```cs\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <root>\n      <data name=\"EnterYourDob\" xml:space=\"preserve\">\n        <value>تاریخ تولد خود را وارد کنید / Enter your date of birth: </value>\n      </data>\n      <data name=\"EnterYourName\" xml:space=\"preserve\">\n        <value>اسمت را وارد کن / Enter your name: </value>\n      </data>\n      <data name=\"EnterYourSalary\" xml:space=\"preserve\">\n        <value>حقوق خود را وارد کنید / Enter your salary: </value>\n      </data>\n      <data name=\"PersonDetails\" xml:space=\"preserve\">\n        <value>{0} در {1:dddd}به دنیا آمد. {0} {2:N0} دقیقه است. {0} {3:C}.</value>\n      </data>\n    </root> \n    ```", "```cs\n    The current localization culture is da-DK: dansk (Danmark)\n    ...\n    Indtast dit navn: Bob\n    Indtast din fødselsdato: 3/4/1987\n    Indtast din løn: 45449\n    Bob blev født på en fredag. Bob er 19.016.640 minutter gammel. Bob tjener 45.449,00 kr. \n    ```", "```cs\n    The current localization culture is fr-FR: français (France)\n    ...\n    Entrez votre nom: Monique\n    Entrez votre date de naissance: 2/12/1990\n    Entrez votre salaire: 45000\n    Monique est né un dimanche. Monique a 17 088 480 minutes. Monique gagne 45 000,00 €. \n    ```", "```cs\n    The current localization culture is fr-CA: français (Canada)\n    ...\n    Entrez votre nom / Enter your name: Sophie\n    Entrez votre date de naissance / Enter your date of birth: 4/5/2001\n    Entrez votre salaire / Enter your salary: 65000\n    Sophie est né un jeudi. Sophie a 11 649 600 minutes. Sophie gagne 65 000,00 $ CA. \n    ```", "```cs\n    The current localization culture is fa-IR: فارسی (ایران)\n    ...\n    اسمت را وارد کن / Enter your name: Hoshyar\n    تاریخ تولد خود را وارد کنید / Enter your date of birth: 1370/3/6\n    حقوق خود را وارد کنید / Enter your salary: 90000\n    Hoshyar در چهارشنبهبه دنیا آمد. Hoshyar 11٬190٬240 دقیقه است. Hoshyar ریال90٬000. \n    ```", "```cs\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <root>\n      <data name=\"EnterYourDob\" xml:space=\"preserve\">\n        <value>Indtast din fødselsdato: </value>\n      </data>\n      <data name=\"EnterYourName**Wrong**\" xml:space=\"preserve\">\n        <value>Indtast dit navn: </value>\n      </data>\n      <data name=\"EnterYourSalary\" xml:space=\"preserve\">\n        <value>Indtast din løn: </value>\n      </data>\n      <data name=\"PersonDetails\" xml:space=\"preserve\">\n        <value>{0} blev født på en {1:dddd}. {0} er {2:N0} minutter gammel. {0} tjener {3:C}.</value>\n      </data>\n    </root> \n    ```", "```cs\n    The current localization culture is da-DK: dansk (Danmark)\n    ...\n    **Enter your name**: Bob\n    Indtast din fødselsdato: 3/4/1987\n    Indtast din løn: 45449\n    Bob blev født på en fredag. Bob er 18.413.280 minutter gammel. Bob tjener 45.449,00 kr. \n    ```", "```cs\n    The current localization culture is da-DK: dansk (Danmark)\n    ...\n    **Error: resource string \"EnterYourName\" not found.**\n    **Search path: WorkingWithCultures.Resources.PacktResources**\n    **EnterYourName:** Bob\n    Indtast din fødselsdato: 3/4/1987\n    Indtast din løn: 45449\n    Bob blev født på en fredag. Bob er 18.413.280 minutter gammel. Bob tjener 45.449,00 kr. \n    ```", "```cs\n        <ItemGroup>\n          <PackageReference Include=\"NodaTime\" Version=\"3.1.9\" />\n        </ItemGroup> \n        ```", "```cs\n    partial class Program\n    {\n      private static void SectionTitle(string title)\n      {\n        ConsoleColor previousColor = ForegroundColor;\n        ForegroundColor = ConsoleColor.DarkYellow;\n        WriteLine($\"*** {title}\");\n        ForegroundColor = previousColor;\n      }\n    } \n    ```", "```cs\n    using NodaTime; // To use SystemClock, Instant and so on.\n    SectionTitle(\"Converting Noda Time types\");\n    // Get the current instant in time.\n    Instant now = SystemClock.Instance.GetCurrentInstant();\n    WriteLine($\"Now (Instant): {now}\");\n    WriteLine();\n    ZonedDateTime nowInUtc = now.InUtc();\n    WriteLine($\"Now (DateTimeZone): {nowInUtc.Zone}\");\n    WriteLine($\"Now (ZonedDateTime): {nowInUtc}\");\n    WriteLine($\"Now (DST): {nowInUtc.IsDaylightSavingTime()}\");\n    WriteLine();\n    // Use the Tzdb provider to get the time zone for US Pacific.\n    // To use .NET compatible time zones, use the Bcl provider.\n    DateTimeZone zonePT = DateTimeZoneProviders.Tzdb[\"US/Pacific\"];\n    ZonedDateTime nowInPT = now.InZone(zonePT);\n    WriteLine($\"Now (DateTimeZone): {nowInPT.Zone}\");\n    WriteLine($\"Now (ZonedDateTime): {nowInPT}\");\n    WriteLine($\"Now (DST): {nowInPT.IsDaylightSavingTime()}\");\n    WriteLine();\n    DateTimeZone zoneUK = DateTimeZoneProviders.Tzdb[\"Europe/London\"];\n    ZonedDateTime nowInUK = now.InZone(zoneUK);\n    WriteLine($\"Now (DateTimeZone): {nowInUK.Zone}\");\n    WriteLine($\"Now (ZonedDateTime): {nowInUK}\");\n    WriteLine($\"Now (DST): {nowInUK.IsDaylightSavingTime()}\");\n    WriteLine();\n    LocalDateTime nowInLocal = nowInUtc.LocalDateTime;\n    WriteLine($\"Now (LocalDateTime): {nowInLocal}\");\n    WriteLine($\"Now (LocalDate): {nowInLocal.Date}\");\n    WriteLine($\"Now (LocalTime): {nowInLocal.TimeOfDay}\");\n    WriteLine(); \n    ```", "```cs\n    *** Converting Noda Time types\n    Now (Instant): 2023-06-01T09:21:05Z\n    Now (DateTimeZone): UTC\n    Now (ZonedDateTime): 2023-06-01T09:21:05 UTC (+00)\n    Now (DST): False\n    Now (DateTimeZone): US/Pacific\n    Now (ZonedDateTime): 2023-06-01T02:21:05 US/Pacific (-07)\n    Now (DST): True\n    Now (DateTimeZone): Europe/London\n    Now (ZonedDateTime): 2023-06-01T10:21:05 Europe/London (+01)\n    Now (DST): True\n    Now (LocalDateTime): 01/06/2023 09:21:05\n    Now (LocalDate): 01 June 2023\n    Now (LocalTime): 09:21:05 \n    ```", "```cs\n    SectionTitle(\"Working with periods\");\n    // The modern .NET era began with the release of .NET Core 1.0\n    // on June 27, 2016 at 10am Pacific Time, or 5pm UTC.\n    LocalDateTime start = new(year: 2016, month: 6, day: 27, \n      hour: 17, minute: 0, second: 0);\n    LocalDateTime end = LocalDateTime.FromDateTime(DateTime.UtcNow);\n    WriteLine(\"Modern .NET era\");\n    WriteLine($\"Start: {start}\");\n    WriteLine($\"End: {end}\");\n    WriteLine();\n    Period period = Period.Between(start, end);\n    WriteLine($\"Period: {period}\");\n    WriteLine($\"Years: {period.Years}\");\n    WriteLine($\"Months: {period.Months}\");\n    WriteLine($\"Weeks: {period.Weeks}\");\n    WriteLine($\"Days: {period.Days}\");\n    WriteLine($\"Hours: {period.Hours}\");\n    WriteLine();\n    Period p1 = Period.FromWeeks(2);\n    Period p2 = Period.FromDays(14);\n    WriteLine($\"p1 (period of two weeks): {p1}\");\n    WriteLine($\"p2 (period of 14 days): {p2}\");\n    WriteLine($\"p1 == p2: {p1 == p2}\");\n    WriteLine($\"p1.Normalize() == p2: {p1.Normalize() == p2}\"); \n    ```", "```cs\n    *** Working with periods\n    Modern .NET era\n    Start: 27/06/2016 17:00:00\n    End: 01/06/2023 09:21:05\n    Period: P6Y11M4DT16H21M5S889s9240t\n    Years: 6\n    Months: 11\n    Weeks: 0\n    Days: 4\n    Hours: 16\n    p1 (period of two weeks): P2W\n    p2 (period of 14 days): P14D\n    p1 == p2: False\n    p1.Normalize() == p2: True \n    ```"]