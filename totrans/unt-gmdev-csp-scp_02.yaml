- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Creating Your First Unity Project – Mastering Scenes and Assets
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建你的第一个 Unity 项目 – 掌握场景和资产
- en: In this chapter, we’ll embark on an exciting journey into the world of game
    development using Unity. This chapter has been designed as a hands-on guide to
    help you lay the foundational stones of your game development journey, starting
    with initializing and setting up your very first Unity project. Through a step-by-step
    approach, you will learn how to navigate the Unity workspace with ease, an essential
    skill that will underpin all your future game design endeavors.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将踏上使用 Unity 进入游戏开发世界的激动人心的旅程。本章被设计为一本实践指南，旨在帮助你奠定游戏开发旅程的基础，从初始化和设置你的第一个
    Unity 项目开始。通过逐步的方法，你将学会如何轻松地导航 Unity 工作空间，这是一项将支撑你未来所有游戏设计工作的基本技能。
- en: We’ll delve into the essential aspects of importing, organizing, and effectively
    utilizing assets within Unity, providing you with the knowledge to manage the
    building blocks of your game efficiently. You’ll gain practical experience regarding
    the basic aspects of manipulating and customizing GameObjects, which are pivotal
    in bringing your game to life.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将深入研究在 Unity 中导入、组织和有效利用资产的基本方面，为你提供管理游戏构建块的知识。你将获得有关操作和定制 GameObject 的基本方面的实践经验，这对于让你的游戏栩栩如生至关重要。
- en: This chapter will help you prepare your initial game scene, setting the stage
    for further development and the integration of gameplay elements. Whether it’s
    a simple 2D setup or a more complex scene, you’ll be equipped with the skills
    to start developing your game level. With examples of integrating assets and developing
    basic game levels, alongside best practices for file naming and asset management,
    this chapter offers a comprehensive toolkit for budding game developers. By the
    end of this chapter, you’ll have not only set up your first Unity project but
    also prepared a functional game scene, ready for the exciting development journey
    ahead.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将帮助你准备你的初始游戏场景，为后续的开发和游戏元素的集成奠定基础。无论是简单的 2D 设置还是更复杂的场景，你都将具备开始开发你的游戏关卡所需的技能。通过整合资产和开发基本游戏关卡示例，以及文件命名和资产管理最佳实践，本章为初学者游戏开发者提供了一个全面的工具包。到本章结束时，你不仅将设置好你的第一个
    Unity 项目，还将准备一个功能性的游戏场景，为接下来的激动人心的开发旅程做好准备。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Creating a new project in Unity
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Unity 中创建新项目
- en: Navigating the Unity Editor interface
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导航 Unity 编辑器界面
- en: Importing and managing assets
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入和管理资产
- en: Basic GameObject manipulation
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本GameObject操作
- en: Preparing your first scene
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备你的第一个场景
- en: Creating a new project in Unity
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Unity 中创建新项目
- en: Your journey into game development begins with creating a new Unity project,
    the cornerstone of your creative endeavors. This section guides you through the
    initial steps, from understanding the essence of a Unity project to navigating
    the setup process. You’ll learn how to launch a new project, select the appropriate
    template for your game’s needs, and configure essential settings to tailor the
    development environment to your vision. This foundational knowledge is vital,
    setting the stage for all the development work that follows, and ensuring you’re
    equipped to bring your game ideas to life efficiently.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你的游戏开发之旅从创建一个新的 Unity 项目开始，这是你创造性工作的基石。本节将引导你了解 Unity 项目的本质，以及导航设置过程。你将学习如何启动新项目，选择适合你游戏需求的适当模板，并配置基本设置以定制开发环境以符合你的愿景。这种基础知识对于后续的所有开发工作至关重要，确保你能够高效地将你的游戏想法变为现实。
- en: Introduction to Unity projects
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Unity 项目的介绍
- en: A Unity project is where the magic of game development happens, acting as a
    hub for all the elements that make up your game. Initially, Unity sets up a basic
    structure for your project, including a default scene for the layout, assets,
    and scripts folders for organization, and configuration files for project settings.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Unity 项目是游戏开发魔法发生的地方，作为构成你游戏的所有元素的枢纽。最初，Unity 为你的项目设置了一个基本结构，包括用于布局的默认场景，用于组织的资产和脚本文件夹，以及用于项目设置的配置文件。
- en: Game developers enrich this structure with custom content such as character
    models, environment textures, sound effects, and C# scripts to bring gameplay
    mechanics and interactive elements to life. They also add scenes to build the
    game’s environments. Additionally, developers often incorporate plugins and tools
    from Unity’s ecosystem to expand their project’s capabilities, adding features
    such as advanced physics or AI.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏开发者通过添加自定义内容来丰富这种结构，例如角色模型、环境纹理、音效和 C# 脚本，以使游戏玩法机制和交互元素栩栩如生。他们还添加场景来构建游戏环境。此外，开发者经常从
    Unity 的生态系统中整合插件和工具，以扩展他们项目的功能，添加诸如高级物理或 AI 等功能。
- en: In summary, a Unity project blends Unity’s foundational setup with the developer’s
    unique assets and scripts, creating an interactive and immersive game experience.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，Unity 项目将 Unity 的基础设置与开发者的独特资源和脚本相结合，创造出一个互动和沉浸式的游戏体验。
- en: Step-by-step guide to project creation
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目创建的逐步指南
- en: 'Creating a Unity project is your first step into game development with this
    powerful engine. The following figure provides a step-by-step guide to getting
    started right from the Unity Hub:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个强大的引擎开始创建 Unity 项目是您进入游戏开发的第一步。以下图提供了从 Unity Hub 开始的逐步指南：
- en: '![Figure 2.1 – The Unity Hub’s Projects Window and New Projects Window](img/B22128_02_01.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.1 – Unity Hub 的项目窗口和新项目窗口](img/B22128_02_01.jpg)'
- en: Figure 2.1 – The Unity Hub’s Projects Window and New Projects Window
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.1 – Unity Hub 的项目窗口和新项目窗口
- en: 'Let’s take a closer look at these steps:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看看这些步骤：
- en: '**Launch Unity Hub**: Open Unity Hub on your computer. This application is
    the gateway to all your Unity projects and installations.'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**启动 Unity Hub**：在您的计算机上打开 Unity Hub。此应用程序是您所有 Unity 项目和安装的入口。'
- en: '**New project**: Click on the **New project** button. This will take you to
    the project creation window, where you can define the specifics of your new game
    or application.'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**新建项目**：点击**新建项目**按钮。这将带您进入项目创建窗口，在那里您可以定义您的新游戏或应用程序的详细信息。'
- en: '**Choose a template**: Unity offers several project templates to help you start
    with a setup that best matches your intended game type. You can choose from **2D**,
    **3D**, **High Definition RP** (for high-end graphics), **Universal RP** (for
    cross-platform), and more. Each template pre-configures your project with relevant
    settings and assets.'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**选择模板**：Unity 提供了多个项目模板，以帮助您从最适合您预期游戏类型的设置开始。您可以选择**2D**、**3D**、**高清晰度 RP**（用于高端图形）、**通用
    RP**（用于跨平台）等等。每个模板都预先配置了与项目相关的设置和资源。'
- en: If a template displays a cloud with a down arrow icon, it means the template
    is not installed but can be downloaded. Selecting the template will bring up an
    option to download the template.
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果模板显示带有向下箭头图标的云朵，这意味着模板尚未安装，但可以下载。选择该模板将弹出一个下载模板的选项。
- en: '**Select a Unity Editor version**: Here, you can choose which version of the
    Unity Editor you want to use for your project. It’s recommended to select a **long-term
    support** (**LTS**) version for its stability and extended support, as discussed
    in [*Chapter 1*](B22128_01.xhtml#_idTextAnchor015). LTS versions are ideal for
    projects where reliability is crucial over having the latest features.'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**选择 Unity 编辑器版本**：在这里，您可以选择您想要用于项目的 Unity 编辑器版本。建议选择**长期支持**（**LTS**）版本，因为它具有稳定性和扩展支持，如[*第
    1 章*](B22128_01.xhtml#_idTextAnchor015)中所述。LTS 版本对于可靠性至关重要的项目来说非常理想，而不是拥有最新的功能。'
- en: '**Name your project**: Give your project a descriptive name that reflects its
    content or purpose. This will help you identify it easily among other projects
    in the Unity Hub.'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**命名您的项目**：为您的项目提供一个描述性的名称，反映其内容或目的。这将帮助您在 Unity Hub 中的其他项目中轻松识别它。'
- en: '**Set the location**: Choose where on your computer you’d like to save the
    project. It’s good practice to have a dedicated folder for all your Unity projects
    to keep things organized.'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**设置位置**：选择您想在计算机上保存项目的位置。将所有 Unity 项目放在一个专门的文件夹中是一种良好的做法，以保持事物井然有序。'
- en: '**Create**: After setting up all the details, hit the **Create** button. Unity
    will then generate your new project with the chosen template and open it in the
    selected Unity Editor version.'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**创建**：设置所有详细信息后，点击**创建**按钮。Unity 将使用所选模板生成您的新项目，并在所选的 Unity 编辑器版本中打开它。'
- en: It will take several moments for the project to be created. The launch screen
    for the selected Unity Editor will appear. It will take longer the first time
    a project is opened while the Unity Editor installs its resources. Subsequently,
    launching this project will be much faster.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 创建项目需要一些时间。所选Unity编辑器的启动屏幕将出现。第一次打开项目时，由于Unity编辑器正在安装其资源，所以需要更长的时间。之后，启动此项目将会更快。
- en: Note
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: As mentioned in [*Chapter 1*](B22128_01.xhtml#_idTextAnchor015), opting for
    an LTS version of the Unity Editor is preferred due to its stability and comprehensive
    support, making it a reliable foundation for your project development.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如[*第一章*](B22128_01.xhtml#_idTextAnchor015)所述，选择Unity编辑器的LTS版本是首选，因为它具有稳定性和全面的支持，使其成为项目开发的可靠基础。
- en: By following these steps, you’ll have a new Unity project set up and ready for
    development, laying the groundwork for your game creation journey.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 按照这些步骤，您将拥有一个新设置的Unity项目，并准备好进行开发，为您游戏创作的旅程奠定基础。
- en: Overview of project settings and configuration
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目设置和配置概述
- en: Within the Unity Editor, fine-tuning your workspace and project through **Preferences**
    and **Project Settings** is important for an efficient development process. These
    settings allow you to customize the editor to your liking and configure important
    aspects of your project to ensure optimal performance and compatibility.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity编辑器中，通过**首选项**和**项目设置**对工作空间和项目进行微调对于高效的开发过程非常重要。这些设置允许您根据个人喜好自定义编辑器，并配置项目的重要方面，以确保最佳性能和兼容性。
- en: In the **Preferences** area (accessible under **Unity** > **Preferences** on
    macOS or **Edit** > **Settings** on Windows and Linux), one of the popular options
    is the **Colors** section. Here, you can customize the color scheme of your workspace
    to better suit your workflow or to highlight certain modes. A notable feature
    is **Playmode Tint**, which changes the color of the Unity Editor interface when
    in Play Mode.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在**首选项**区域（在macOS上通过**Unity** > **首选项**访问或在Windows和Linux上通过**编辑** > **设置**访问），最受欢迎的选项之一是**颜色**部分。在这里，您可以自定义工作空间的配色方案，以更好地适应您的流程或突出某些模式。一个值得注意的功能是**播放模式色调**，它在播放模式下改变Unity编辑器界面的颜色。
- en: This tint serves as a clear visual indicator that the editor is currently running
    the game. Unity allows you to make edits while in Play Mode, but these changes
    are temporary and will be discarded once you exit Play Mode. This behavior can
    be extremely confusing for new users who might not realize their changes will
    disappear. After a few instances, it becomes annoying and can lead to a significant
    loss of work.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这种色调充当一个清晰的视觉指示器，表明编辑器当前正在运行游戏。Unity允许你在播放模式下进行编辑，但这些更改是临时的，一旦退出播放模式，这些更改将被丢弃。对于可能没有意识到他们的更改会消失的新用户来说，这种行为可能会非常令人困惑。经过几次之后，这会变得令人烦恼，并可能导致大量工作损失。
- en: The **Playmode Tint** feature is invaluable because it prevents this confusion
    by providing a constant reminder that you are in Play Mode and any changes made
    won’t be saved. Setting this tint to a distinctive color, such as red, ensures
    that you always know when the editor is in Play Mode, helping you avoid unintentional
    loss of work and frustration.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**播放模式色调**功能非常有价值，因为它通过提供一个持续的提醒来防止这种困惑，即您正在播放模式中，所做的任何更改都不会被保存。将此色调设置为独特的颜色，如红色，确保您始终知道编辑器是否处于播放模式，这有助于您避免意外丢失工作和挫败感。'
- en: 'In the **Project Settings** area (found under **Edit** > **Project Settings**),
    you’ll find a wide array of configurations that impact your game’s build and runtime
    behavior. Some of the more significant sections are as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在**项目设置**区域（位于**编辑** > **项目设置**下），您会发现许多影响游戏构建和运行时行为的配置。以下是一些更重要的部分：
- en: '**Quality**: This section allows you to set different quality levels for your
    game, affecting various aspects such as texture quality, shadow resolution, and
    anti-aliasing. These settings can be adjusted for different platforms, ensuring
    your game runs optimally across a range of devices.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**质量**：本节允许您为您的游戏设置不同的质量级别，影响纹理质量、阴影分辨率和抗锯齿等方面。这些设置可以根据不同的平台进行调整，确保您的游戏在各种设备上运行优化。'
- en: '**Player**: Here, you can configure settings related to the game build, including
    screen resolutions, supported aspect ratios, and icons. Importantly, it’s also
    where you set platform-specific settings, such as orientation for mobile games
    or splash screens.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**玩家**：在这里，您可以配置与游戏构建相关的设置，包括屏幕分辨率、支持的纵横比和图标。重要的是，这也是您设置平台特定设置的地方，例如移动游戏的朝向或启动画面。'
- en: '**Input**: This critical section lets you define and manage the input controls
    for your game, mapping actions to keyboard keys, mouse buttons, or gamepad controls.
    Customizing input settings is key to creating a responsive and intuitive control
    scheme for your players.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输入**：这个关键部分让您可以定义和管理游戏的控制输入，将动作映射到键盘键、鼠标按钮或游戏手柄控制。自定义输入设置对于创建响应灵敏且直观的控制方案至关重要。'
- en: '**Audio**: Adjusting the audio settings for your project can significantly
    impact the game’s performance and auditory experience. This section allows you
    to set the overall audio quality, sample rate, and other parameters that affect
    how sound is played back within your game.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**音频**：调整项目的音频设置可以显著影响游戏性能和听觉体验。本节允许您设置整体音频质量、采样率以及其他影响游戏内声音播放的参数。'
- en: Understanding and utilizing these settings effectively allows you to create
    a more personalized development environment and ensures that your game is optimized
    for both development and play. Taking the time to explore these options can lead
    to significant improvements in both your workflow and the final quality of your
    Unity projects.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 有效理解和利用这些设置可以让您创建一个更加个性化的开发环境，并确保您的游戏在开发和游戏体验方面都得到优化。花时间探索这些选项可以显著提高您的工作流程和
    Unity 项目的最终质量。
- en: So far, we’ve laid a solid foundation for your journey into game development.
    Starting with an introduction to what Unity projects encompass, we’ve walked through
    the initial setup process, ensuring you’re well-equipped to navigate the Unity
    Editor confidently. The step-by-step guide provided a clear path for initializing
    your project, selecting the right template, and customizing your workspace to
    align with your game’s needs.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经为您进入游戏开发之旅奠定了坚实的基础。从介绍 Unity 项目包含的内容开始，我们走过了初始设置过程，确保您能够自信地导航 Unity
    编辑器。提供的逐步指南为您提供了初始化项目、选择正确的模板以及根据游戏需求自定义工作空间的一条清晰路径。
- en: The exploration of Unity’s **Preferences** and **Project Settings** areas highlighted
    the importance of tailoring your environment and project configurations for optimal
    efficiency and performance. From setting a distinctive playmode tint as a visual
    reminder to fine-tuning quality settings for various platforms, these adjustments
    are pivotal in streamlining your development process.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 探索 Unity 的**首选项**和**项目设置**区域强调了根据最佳效率和性能调整您的环境和项目配置的重要性。从设置一个独特的游戏模式色调作为视觉提醒，到针对不同平台微调质量设置，这些调整对于简化您的开发过程至关重要。
- en: Armed with this knowledge, you’re now ready to dive deeper into Unity’s rich
    features and start bringing your game ideas to life. The initial setup of your
    project is just the beginning; the real adventure begins as you start to populate
    your scenes with assets, scripts, and gameplay elements.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有这些知识，您现在可以深入探索 Unity 的丰富功能，并开始将您的游戏想法变为现实。项目的初始设置只是开始；真正的冒险从您开始用资产、脚本和游戏元素填充场景时才开始。
- en: Navigating the Unity Editor interface
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导航 Unity 编辑器界面
- en: Diving deeper into Unity game development, understanding the Unity Editor interface
    is necessary for any developer. This section thoroughly explores the workspace
    you’ll frequently interact with, moving beyond the basics covered in [*Chapter
    1*](B22128_01.xhtml#_idTextAnchor015). The Unity Editor is designed to be flexible
    and customizable, catering to the diverse needs of different projects. You’ll
    learn to navigate its comprehensive environment, from managing assets and scenes
    to tweaking game object properties. Familiarizing yourself with this interface
    is key to efficient game development as it directly impacts your workflow and
    productivity. As you become more acquainted with the Unity Editor, it will transform
    into an intuitive workspace, empowering you to bring your creative visions to
    life with greater ease.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 深入Unity游戏开发，理解Unity编辑器界面对于任何开发者都是必要的。本节彻底探讨了您将频繁交互的工作空间，超越了在[*第1章*](B22128_01.xhtml#_idTextAnchor015)中介绍的基础内容。Unity编辑器旨在灵活且可定制，满足不同项目的多样化需求。您将学习如何导航其全面的环境，从管理资产和场景到调整游戏对象属性。熟悉这个界面对于高效的游戏开发至关重要，因为它直接影响到您的流程和生产力。随着您对Unity编辑器越来越熟悉，它将变成一个直观的工作空间，让您能够更轻松地将创意愿景变为现实。
- en: Understanding the Unity Editor’s layout
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解Unity编辑器的布局
- en: The Unity Editor interface is a sophisticated environment that’s been crafted
    to streamline the game development process, offering various sections tailored
    for specific activities within your project. At its core, the interface is divided
    into several key areas, each serving a distinct purpose to help you create and
    manage your game.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Unity编辑器界面是一个经过精心设计的复杂环境，旨在简化游戏开发过程，为项目中的特定活动提供各种部分。其核心，界面被分为几个关键区域，每个区域都服务于不同的目的，以帮助您创建和管理游戏。
- en: 'Let’s take a look:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看：
- en: '![Figure 2.2 – The Unity Editor’s layout](img/B22128_02_02.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图2.2 – Unity编辑器的布局](img/B22128_02_02.jpg)'
- en: Figure 2.2 – The Unity Editor’s layout
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.2 – Unity编辑器的布局
- en: For reference, please take a look at *Figure 2**.2*. The **Scene** view (*2*)
    is your interactive canvas and is where you can place and arrange game objects,
    design levels, and visually construct your game world. It’s a dynamic workspace
    that allows 3D navigation and manipulation of the environment and assets, providing
    a real-time glimpse into how your game will appear and function.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为参考，请查看*图2.2*。**场景**视图（*2*）是你的交互式画布，你可以在这里放置和排列游戏对象、设计关卡，以及视觉构建你的游戏世界。它是一个动态的工作空间，允许3D导航和环境及资产的操作，提供了实时预览游戏外观和功能的方式。
- en: Adjacent to the **Scene** view, the **Game** view (*2*, not shown) offers a
    preview of your game from the perspective of the active camera, essentially showing
    you exactly what your players will see. It’s invaluable for testing and iterating
    on gameplay, allowing you to experience your game in **Play Mode** without leaving
    the editor.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在**场景**视图旁边，**游戏**视图（*2*，未显示）提供了从活动摄像机的视角预览游戏的功能，本质上显示了玩家将看到的内容。这对于测试和迭代游戏玩法非常有价值，允许你在**播放模式**下体验游戏，而无需离开编辑器。
- en: The **Hierarchy** window (*1*) provides a structured view of all GameObjects
    in the current scene, reflecting their parent-child relationships and scene organization.
    It’s essential for managing the elements of your game scene, selecting objects
    for editing, and understanding the structure of your game’s environment.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**层次**窗口（*1*）提供了一个当前场景中所有GameObject的结构化视图，反映了它们的父子关系和场景组织。这对于管理你的游戏场景元素、选择编辑对象以及理解游戏环境结构至关重要。'
- en: In the **Project** window (*4*), you’ll find all the assets available in your
    project – textures, models, scripts, and more – organized in a file structure
    similar to a traditional filesystem. This section is core for asset management,
    importing new assets, and accessing your project’s resources.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在**项目**窗口（*4*）中，你可以找到项目中所有可用的资产——纹理、模型、脚本等——它们按照类似于传统文件系统的文件结构组织。这一部分是资产管理、导入新资产以及访问项目资源的核心。
- en: Lastly, the **Inspector** window (*3*) is where the properties and settings
    of the selected GameObject or asset are displayed and edited. It allows for detailed
    customization of object components, from adjusting the physics properties of a
    collider to scripting behavior and more.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，**检查器**窗口（*3*）是显示和编辑所选GameObject或资产属性和设置的地方。它允许对对象组件进行详细定制，从调整碰撞体的物理属性到编写行为等。
- en: While this layout forms the backbone of the Unity Editor interface, its true
    power lies in its configurability. The interface can be extensively customized
    to suit individual preferences and project requirements, with the ability to dock,
    undock, and rearrange windows as needed. This flexibility ensures that whether
    you’re coding, designing, animating, or sound mixing, the Unity Editor can adapt
    to facilitate your workflow, a topic we’ll explore further in this section.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这种布局构成了 Unity 编辑器界面的骨架，但其真正的力量在于其可配置性。界面可以广泛自定义以适应个人偏好和项目需求，可以按需停靠、取消停靠和重新排列窗口。这种灵活性确保了无论您是在编码、设计、动画还是混音，Unity
    编辑器都能适应以促进您的工作流程，我们将在本节中进一步探讨这一主题。
- en: Exploring the views/windows (Scene, Game, Hierarchy, Project, and Inspector)
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索视图/窗口（场景、游戏、层次、项目、和检查器）
- en: 'The Unity Editor interface comprises essential sections: the **Scene**/**Game**
    view for designing and previewing your game, the **Hierarchy** window for organizing
    scene objects, the **Project** window for managing assets, and the **Inspector**
    window for editing object properties. These areas, which are indispensable for
    efficient game development, will be explored in depth to enhance your understanding
    and navigation of the Unity Editor.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Unity 编辑器界面由以下基本部分组成：用于设计和预览游戏的 **场景**/**游戏** 视图，用于组织场景对象的 **层次** 窗口，用于管理资源的
    **项目** 窗口，以及用于编辑对象属性的 **检查器** 窗口。这些对于高效游戏开发不可或缺的区域将深入探讨，以增强您对 Unity 编辑器的理解和导航。
- en: The Scene view
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 场景视图
- en: 'The **Scene** view in Unity is a powerful tool for building and visually editing
    game scenes in real time. It serves as the primary interface for arranging, positioning,
    and manipulating GameObjects within your game environment. Understanding how to
    effectively use the **Scene** view, including keyboard shortcuts and mouse controls,
    can significantly enhance your workflow and efficiency in Unity:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Unity 中的 **场景** 视图是一个强大的工具，用于实时构建和可视化编辑游戏场景。它是安排、定位和操作游戏环境内 GameObjects 的主要界面。了解如何有效地使用
    **场景** 视图，包括键盘快捷键和鼠标控制，可以显著提高您在 Unity 中的工作流程和效率：
- en: '**Navigation** **and manipulation**:'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**导航** **和操作**：'
- en: '**Pan**: Hold down the **middle mouse button** (**MMB**) and move the mouse
    to pan around the **Scene** view.'
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平移**：按住 **中间鼠标按钮**（MMB）并移动鼠标以在 **场景** 视图中平移。'
- en: '**Zoom**: Use the scroll wheel to zoom in and out of the scene. Alternatively,
    you can hold down *Alt* (*Option* on Mac) + **right mouse button** (**RMB**) and
    move the mouse up and down.'
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缩放**：使用滚轮来缩放场景。或者，您可以按住 *Alt* 键（在 Mac 上为 *Option* 键）和 **右鼠标按钮**（RMB），然后上下移动鼠标。'
- en: '**Orbit**: To orbit around a point of interest, hold down the *Alt* (*Option*
    on Mac) key and the **left mouse button** (**LMB**), then move the mouse. The
    view orbits around the current pivot point, which is usually the center of the
    selected object.'
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**环绕**：要围绕一个感兴趣的点环绕，按住 *Alt* 键（在 Mac 上为 *Option* 键）和 **左鼠标按钮**（LMB），然后移动鼠标。视图将围绕当前旋转中心点旋转，这通常是选中对象的中点。'
- en: '**Object manipulation**:'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对象操作**：'
- en: '**Select**: Click an object with the LMB to select it. You can select multiple
    objects by holding down the *Ctrl* (*Cmd* on Mac) key while clicking.'
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选择**：使用左鼠标键（LMB）点击一个对象来选择它。在点击的同时按住 *Ctrl* 键（在 Mac 上为 *Cmd* 键）可以同时选择多个对象。'
- en: '**Move**: With an object selected, press the *W* key to activate the **Move**
    tool. You can then click and drag the object along the axes in the **Scene** view.
    Alternatively, you can use the LMB to drag the object freely.'
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**移动**：选中对象后，按下 *W* 键激活 **移动** 工具。然后您可以在 **场景** 视图中点击并沿轴拖动对象。或者，您也可以使用 LMB
    自由拖动对象。'
- en: '**Rotate**: Press the *E* key to switch to the **Rotate** tool. Click and drag
    around the object to rotate it along the desired axis.'
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**旋转**：按下 *E* 键切换到 **旋转** 工具。点击并围绕对象拖动以沿所需轴旋转对象。'
- en: '**Scale**: Press the *R* key to use the **Scale** tool, which allows you to
    resize the object by clicking and dragging along the axes.'
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缩放**：按下 *R* 键使用 **缩放** 工具，通过点击并沿轴拖动来调整对象的大小。'
- en: '**Viewing options**:'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**查看选项**：'
- en: '**Focus**: Press the *F* key while an object is selected to focus the **Scene**
    view on that object. This centers the object in the view and adjusts the zoom
    level for a closer look.'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**聚焦**：当对象被选中时，按下 *F* 键将 **场景** 视图聚焦到该对象。这将在视图中居中对象并调整缩放级别以进行更近距离的查看。'
- en: '**2D/3D mode**: Toggle between 2D and 3D mode by clicking the 2D/3D button
    in the **Scene** view toolbar. In 2D mode, navigation becomes constrained to the
    XY plane, suitable for 2D game development.'
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**2D/3D模式**：通过点击**场景**视图工具栏中的2D/3D按钮，在2D和3D模式之间切换。在2D模式下，导航被限制在XY平面上，适合2D游戏开发。'
- en: '**Perspective/Isometric view**: Change between **Perspective** and **Isometric**
    views by clicking the corresponding button in the **Scene** view toolbar. **Perspective**
    view offers a realistic depth perception, while **Isometric** view removes perspective
    distortion, something that’s useful for certain types of games.'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**透视/等距视图**：通过点击**场景**视图工具栏中相应的按钮，在**透视**和**等距**视图之间切换。**透视**视图提供了真实的深度感知，而**等距**视图消除了透视失真，这对于某些类型的游戏很有用。'
- en: Mastering these controls and shortcuts will allow you to navigate the **Scene**
    view with ease, laying out and fine-tuning your game environment with precision.
    The **Scene** view is an indispensable tool in the Unity Editor, providing a direct
    and intuitive means of crafting your game’s visual elements.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 掌握这些控制和快捷键将使您能够轻松地使用**场景**视图导航，精确地布局和微调您的游戏环境。**场景**视图是Unity编辑器中不可或缺的工具，它提供了一种直接且直观的方式来制作您游戏的可视元素。
- en: The Game view
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**游戏视图**'
- en: The **Game** view in Unity is where you can view and test your game from the
    perspective of the camera(s) in your scene, essentially seeing what your players
    will see. It’s an essential tool for testing gameplay, visual elements, UI, and
    overall player experience within the Unity Editor. Unlike the **Scene** view,
    which is designed for building and editing your game environment, the **Game**
    view focuses on playing and experiencing the game in real time.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Unity中的**游戏**视图是您可以从场景中的摄像机视角查看和测试游戏的地方，基本上是看到玩家将看到的内容。它是Unity编辑器中测试游戏玩法、视觉元素、UI和整体玩家体验的必备工具。与设计用于构建和编辑游戏环境的**场景**视图不同，**游戏**视图专注于实时播放和体验游戏。
- en: 'First, we’ll look into using the **Game** view:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将探讨如何使用**游戏**视图：
- en: '**Play, Pause, and Step**: At the top of the Game view, you’ll find controls
    to Play, Pause, and Step through your game. Clicking the **Play** button starts
    the game within the editor, **Pause** temporarily halts the game, and **Step**
    advances the game by one frame, which is incredibly useful for debugging purposes.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**播放、暂停和单步执行**：在**游戏**视图的顶部，您将找到用于播放、暂停和单步执行游戏的控件。点击**播放**按钮在编辑器内开始游戏，**暂停**暂时停止游戏，**单步执行**则将游戏前进一帧，这对于调试非常有用。'
- en: '**Maximize on Play**: There’s an option to **Maximize on Play** that, when
    enabled, will make the **Game** view take up the full screen of the Unity Editor
    when the game is played. This is useful for a more immersive testing experience.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在播放时最大化**：有一个**在播放时最大化**的选项，当启用时，当游戏播放时，**游戏**视图将占据Unity编辑器的整个屏幕。这对于更沉浸式的测试体验很有用。'
- en: '**Aspect ratios and resolutions**: You can test your game in various aspect
    ratios and resolutions by selecting different options from the drop-down menu
    at the top of the **Game** view. This helps ensure your game looks great on different
    devices and screen sizes. Additionally, Unity provides a **Simulator** view, which
    is essential for Android and iOS platform game development. This view allows you
    to approximate screen sizes and resolutions for various mobile devices, helping
    you optimize your game for different hardware configurations and ensuring a consistent
    experience across all platforms.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**纵横比和分辨率**：您可以通过从**游戏**视图顶部的下拉菜单中选择不同的选项来测试您的游戏在不同纵横比和分辨率下的效果。这有助于确保您的游戏在不同设备和屏幕尺寸上看起来都很棒。此外，Unity提供了一个**模拟器**视图，这对于Android和iOS平台的游戏开发至关重要。此视图允许您估计各种移动设备的屏幕尺寸和分辨率，帮助您针对不同的硬件配置优化您的游戏，并确保跨所有平台的一致体验。'
- en: 'Now, let’s look at the keyboard shortcuts that can be used in the **Game**
    view:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看可以在**游戏**视图中使用的键盘快捷键：
- en: '**Ctrl + P (Cmd + P on Mac)**: Start or stop playing the game. This shortcut
    is particularly handy as it allows you to quickly enter and exit **Play Mode**
    without having to move your mouse to the **Play** button.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ctrl + P（在Mac上为Cmd + P）**：开始或停止游戏播放。这个快捷键特别方便，因为它允许您快速进入和退出**播放模式**，而无需将鼠标移动到**播放**按钮。'
- en: '**No direct interaction**: Unlike the **Scene** view, the **Game** view doesn’t
    support direct object manipulation or navigation shortcuts as it intends to replicate
    the player’s experience.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无直接交互**：与**场景**视图不同，**游戏**视图不支持直接对象操作或导航快捷键，因为它旨在复制玩家的体验。'
- en: 'Finally, let’s look at the mouse buttons that can be used in the **Game** view:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们看看可以在**游戏**视图中使用的鼠标按钮：
- en: '**LMB**: This button interacts with the game’s UI elements or captures player
    input, depending on how you’ve programmed the game – for example, clicking buttons,
    dragging UI sliders, or controlling a character.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LMB**: 此按钮根据您如何编程游戏与游戏界面元素交互或捕获玩家输入，例如，点击按钮、拖动UI滑块或控制角色。'
- en: '**RMB and MMB**: Typically, these don’t have default functions in the **Game**
    view unless specifically programmed within the game’s input system.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RMB和MMB**: 通常，在**游戏**视图中它们没有默认功能，除非在游戏输入系统中特别编程。'
- en: The **Game** view’s primary role is to provide an accurate preview of your game,
    enabling you to test and refine gameplay mechanics, visual aesthetics, UI/UX designs,
    and more, all from within the Unity Editor. Familiarizing yourself with the **Game**
    view’s features and controls is integral for an efficient game testing and debugging
    workflow.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**游戏**视图的主要作用是提供一个准确的游戏预览，使您可以在Unity编辑器内测试和改进游戏玩法机制、视觉美学、UI/UX设计等。熟悉**游戏**视图的功能和控制对于高效的游戏测试和调试工作流程至关重要。'
- en: The Hierarchy window
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 层级窗口
- en: The **Hierarchy** window in Unity is a major component of the Unity Editor that
    displays all the GameObjects in the current scene, organized in a hierarchical
    structure. It reflects the parent-child relationships between objects, making
    it an essential tool for managing the elements of your game’s environment and
    understanding their relationships and dependencies.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Unity中的**层级**窗口是Unity编辑器的一个主要组件，它显示当前场景中的所有GameObject，并按层次结构组织。它反映了对象之间的父子关系，是管理游戏环境元素以及理解它们之间的关系和依赖关系的必备工具。
- en: 'First, we’ll look into using the **Hierarchy** window:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将探讨如何使用**层级**窗口：
- en: '**Selecting GameObjects**: Clicking on an item in the **Hierarchy** window
    selects that GameObject in the **Scene** view, allowing you to visually identify
    and manipulate it.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选择GameObject**: 在**层级**窗口中单击项目将选择**场景**视图中的该GameObject，使您能够直观地识别和操作它。'
- en: '**Creating new GameObjects**: Right-click within the **Hierarchy** window to
    access a context menu where you can create new GameObjects, cameras, lights, or
    even empty objects that can serve as containers for organizing your scene.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建新的GameObject**: 在**层级**窗口内右键单击以访问上下文菜单，您可以在其中创建新的GameObject、相机、灯光，甚至可以作为组织场景的容器的空对象。'
- en: '**Organizing objects**: You can drag and drop objects within the **Hierarchy**
    window to establish or change parent-child relationships, which is central for
    grouping objects and creating complex hierarchical structures.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组织对象**: 您可以在**层级**窗口内拖放对象以建立或更改父子关系，这对于分组对象和创建复杂层次结构至关重要。'
- en: 'Now, let’s look at the keyboard shortcuts that can be used in the **Hierarchy**
    window:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看可以在**层级**窗口中使用的键盘快捷键：
- en: '**F2 (Windows)/Enter (Mac)**: Renames the selected GameObject. This is useful
    for quickly organizing and identifying objects in your scene.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**F2（Windows）/Enter（Mac）**: 重命名选定的GameObject。这对于快速组织和识别场景中的对象非常有用。'
- en: '**Delete/backspace**: Removes the selected GameObject from the scene. Be cautious
    with this shortcut to avoid accidentally deleting important objects.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Delete/退格键**: 从场景中删除选定的GameObject。使用此快捷键时要小心，以免意外删除重要对象。'
- en: '**Ctrl + D (Cmd + D on Mac)**: Duplicates the selected GameObject, creating
    an exact copy within the same scene.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ctrl + D（Mac上的Cmd + D）**: 复制选定的GameObject，在相同场景中创建一个精确的副本。'
- en: 'Finally, let’s look at the mouse buttons that can be used in the **Hierarchy**
    window:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们看看可以在**层级**窗口中使用的鼠标按钮：
- en: '**LMB**: Used for selecting objects, dragging to reorder or parent them, and
    double-clicking to focus the **Scene** view on the selected object.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LMB**: 用于选择对象、拖动以重新排序或设置父级，以及双击以将**场景**视图聚焦到选定的对象。'
- en: '**RMB**: Opens the context menu, providing options to create new GameObjects
    and delete, rename, or apply Prefab changes, among other actions.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RMB**: 打开上下文菜单，提供创建新GameObject、删除、重命名或应用Prefab更改等操作选项。'
- en: The **Hierarchy** window is a powerful organizational tool in Unity that allows
    developers to efficiently manage and navigate the components of their scenes.
    Understanding how to effectively use the keyboard shortcuts and mouse controls
    in the **Hierarchy** window can significantly speed up your workflow and enhance
    your ability to structure your game’s environment logically and intuitively.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**层次结构**窗口是Unity中的一种强大组织工具，允许开发者高效地管理和导航场景的组件。了解如何在**层次结构**窗口中有效地使用键盘快捷键和鼠标控制可以显著加快您的工作流程，并增强您逻辑和直观地构建游戏环境的能
    力。'
- en: The Project window
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**项目**窗口'
- en: The **Project** window in Unity serves as the central hub for all assets available
    in your game project, from scripts and 3D models to textures and audio files.
    It functions much like a file explorer, organizing your assets in a clear, hierarchical
    structure, making it easy to locate, manage, and utilize your resources throughout
    the development process.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Unity中的**项目**窗口是您游戏项目中所有可用资产的中央枢纽，从脚本和3D模型到纹理和音频文件。它的工作方式类似于文件资源管理器，以清晰、层次化的结构组织您的资产，使您在整个开发过程中轻松定位、管理和利用资源。
- en: 'First, we’ll learn about using the **Project** window:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将学习如何使用**项目**窗口：
- en: '**Navigating and organizing assets**: The **Project** window allows you to
    create, import, and organize your assets into folders. You can drag and drop assets
    into the **Scene** view or the Inspector window to apply them.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**导航和组织资产**: **项目**窗口允许您创建、导入和组织您的资产到文件夹中。您可以将资产拖放到**场景**视图或检查器窗口中应用它们。'
- en: '**Asset preview**: Selecting an asset in the **Project** window displays a
    preview and relevant information in the bottom pane, giving you a quick look at
    the asset without the need to open it.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资产预览**: 在**项目**窗口中选择一个资产会在底部面板显示预览和相关信息，让您无需打开资产即可快速查看。'
- en: '**Importing assets**: You can import assets by dragging them from your filesystem
    directly into the **Project** window or by using the **Assets** | **Import New
    Asset** menu option.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**导入资产**: 您可以通过将它们从文件系统直接拖动到**项目**窗口或使用**资产** | **导入新资产**菜单选项来导入资产。'
- en: 'Now, let’s learn about the keyboard shortcuts that can be used in the **Project**
    window:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们了解可以在**项目**窗口中使用的键盘快捷键：
- en: '**Delete/backspace**: Deletes the selected asset or folder. A confirmation
    dialog will appear to prevent accidental deletion.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**删除/退格键**: 删除所选资产或文件夹。将出现确认对话框以防止意外删除。'
- en: '**F2 (Windows)/Enter (Mac)**: This lets you rename the selected asset or folder,
    allowing you to keep your project organized and assets easily identifiable.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**F2（Windows）/Enter（Mac）**: 这允许您重命名所选资产或文件夹，使您能够保持项目组织有序，资产易于识别。'
- en: '**Ctrl + D (Cmd + D on Mac)**: Duplicates the selected asset, creating an exact
    copy within the same folder.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ctrl + D（在Mac上为Cmd + D）**: 复制所选资产，在同一个文件夹内创建一个精确的副本。'
- en: 'Finally, let’s look at the mouse buttons that can be used in the **Project**
    window:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们看看可以在**项目**窗口中使用的鼠标按钮：
- en: '**LMB**: Used for selecting and dragging assets. Clicking an asset selects
    it, while dragging it allows you to reposition it within the folder hierarchy
    or drop it into the Scene view or Inspector window.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**左键单击（LMB）**: 用于选择和拖动资产。单击资产选择它，拖动它允许您在文件夹层次结构中重新定位它或将它拖放到场景视图或检查器窗口中。'
- en: '**RMB**: Opens the context menu, which provides various options, depending
    on the selected asset or folder. This menu allows you to create new assets or
    folders, import assets, delete, rename, and more.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**人民币（RMB）**: 打开上下文菜单，根据所选资产或文件夹提供各种选项。此菜单允许您创建新资产或文件夹、导入资产、删除、重命名等。'
- en: The **Project** window is an indispensable tool in Unity, providing a comprehensive
    view of all the resources at your disposal and streamlining the asset management
    process. Mastery of navigating and utilizing the **Project** window, along with
    familiarizing yourself with its shortcuts and controls, is requisite for maintaining
    an efficient workflow and ensuring your assets are well-organized and readily
    accessible throughout your game’s development.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**项目**窗口是Unity中不可或缺的工具，提供了对所有可用资源的全面视图，并简化了资产管理流程。掌握导航和使用**项目**窗口，以及熟悉其快捷键和控制，对于保持高效的工作流程和确保您的资产在整个游戏开发过程中组织良好且易于访问是必不可少的。'
- en: The Inspector window
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**检查器**窗口'
- en: The **Inspector** window in Unity is a versatile and essential tool that displays
    detailed information and editable properties of the currently selected GameObject
    or asset. It dynamically updates to reflect the selection in the **Scene** view
    or **Project** window, allowing for deep customization and control over the components
    and settings of your game elements.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Unity中的**检查器**窗口是一个多功能且必不可少的工具，它显示当前选定的GameObject或资源的详细信息和可编辑属性。它动态更新以反映**场景**视图或**项目**窗口中的选择，允许对游戏元素组件和设置进行深入的自定义和控制。
- en: 'First, let’s look at ways of using the **Inspector** window:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看如何使用**检查器**窗口：
- en: '**Viewing and editing properties**: The **Inspector** window is where you can
    view and modify the properties of GameObjects, components, and assets. Each component
    of a GameObject, such as **Transform**, **Mesh Renderer**, or custom scripts,
    has its settings displayed here so that they can be tweaked.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**查看和编辑属性**：**检查器**窗口是您可以查看和修改GameObject、组件和资产属性的地方。每个GameObject的组件，如**变换**、**网格渲染器**或自定义脚本，其设置都显示在此处，以便进行微调。'
- en: '**Adding components**: You can enhance GameObjects by adding new components
    via the **Add Component** button at the bottom of the **Inspector** window. This
    could range from physics components such as Rigidbodies to custom scripts that
    define behavior.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**添加组件**：您可以通过**检查器**窗口底部的**添加组件**按钮增强GameObject。这可以是从刚体等物理组件到定义行为的自定义脚本的范围。'
- en: 'The **Inspector** window does not have specific keyboard shortcuts dedicated
    solely to its functionality. However, general Unity shortcuts can affect the **Inspector**
    window, such as the following:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**检查器**窗口没有专门针对其功能的特定键盘快捷键。然而，一般的Unity快捷键可能会影响**检查器**窗口，如下所示：'
- en: '**Ctrl + Z (Cmd + Z on Mac)**: Undoes changes made to an object’s properties
    in the **Inspector** window.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ctrl + Z (Mac上的Cmd + Z)**: 撤销在**检查器**窗口中对对象属性所做的更改。'
- en: '**Ctrl + Shift + Z (Cmd + Shift + Z on Mac)**: Redoes changes.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ctrl + Shift + Z (Mac上的Cmd + Shift + Z)**: 重做更改。'
- en: 'Finally, let’s look at the mouse buttons that can be used in the **Inspector**
    window:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们看看在**检查器**窗口中可以使用的鼠标按钮：
- en: '**LMB**: Used primarily for selecting and interacting with various fields and
    properties within the **Inspector** window. Clicking on property fields allows
    you to edit values, toggle checkboxes, and select options from drop-down menus.
    By dragging with the LMB, you can adjust values such as sliders or color pickers.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LMB**: 主要用于在**检查器**窗口中选择和与各种字段和属性交互。点击属性字段允许您编辑值、切换复选框，并从下拉菜单中选择选项。通过使用LMB拖动，您可以调整滑块或颜色选择器等值。'
- en: '**RMB**: In some contexts, clicking with the RMB in the **Inspector** window
    can open a contextual menu, offering additional options such as resetting the
    value to its default or, for script components, navigating to the script’s source.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RMB**：在某些上下文中，在**检查器**窗口中使用RMB可以打开上下文菜单，提供额外的选项，例如将值重置为其默认值，或者对于脚本组件，导航到脚本的源代码。'
- en: The **Inspector** window is integral to game development in Unity, offering
    a direct and detailed interface for configuring the components that constitute
    your game’s functionality and aesthetics. Efficient use of the **Inspector** window,
    combined with an understanding of its interactive capabilities, empowers developers
    to fine-tune their game elements with precision, contributing significantly to
    the game design and development process.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '**检查器**窗口是Unity游戏开发的核心，它提供了一个直接且详细的界面来配置构成游戏功能和美学的组件。有效使用**检查器**窗口，并结合对其交互功能的理解，使开发者能够以精确的方式微调游戏元素，对游戏设计和开发过程产生重大贡献。'
- en: Customizing the workspace
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义工作区
- en: Customizing the configuration of the Unity Editor interface allows developers
    to tailor their workspace to fit their specific workflow and project needs. This
    flexibility ensures that essential tools and panels are readily accessible, enhancing
    productivity and efficiency. Whether it’s rearranging panels for better ergonomics,
    docking windows for specific tasks, or adjusting settings for optimal performance,
    personalizing the Unity Editor interface can significantly streamline the development
    process and create a more intuitive environment for game creation.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 定制Unity编辑器界面的配置允许开发者根据他们的特定工作流程和项目需求调整他们的工作空间。这种灵活性确保了基本工具和面板可以轻松访问，提高了生产力和效率。无论是重新排列面板以获得更好的人体工程学，将窗口停靠在特定任务上，还是调整设置以获得最佳性能，个性化Unity编辑器界面可以显著简化开发过程，并为游戏创建创造一个更直观的环境。
- en: The Unity Editor offers a wide range of configurable options to cater to the
    diverse workflows of game developers. Among these, Unity provides several pre-configured
    layouts, such as **Default**, **2 by 3**, **4 Split**, and **Tall**, each designed
    to optimize the workspace for different development tasks. For instance, the **2
    by 3** layout is particularly useful for managing multiple views simultaneously,
    while the **Tall** layout offers an extended **Inspector** window, ideal for in-depth
    component editing.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: Unity编辑器提供了一系列可配置的选项，以满足游戏开发者多样化的工作流程。在这些选项中，Unity提供了几个预配置的布局，如**默认**、**2x3**、**4分割**和**高**，每个布局都是为了优化不同开发任务的工作空间而设计的。例如，**2x3**布局特别适用于同时管理多个视图，而**高**布局提供了一个扩展的**检查器**窗口，非常适合深入编辑组件。
- en: Beyond the pre-configured options, Unity empowers developers to create a highly
    personalized environment. You can move and dock windows anywhere within the Unity
    Editor, group them, or float them as separate windows. This level of customization
    ensures that every tool or panel you frequently use is positioned exactly where
    you need it, from the **Scene** and **Game** views to the **Hierarchy**, **Project**,
    and **Inspector** windows.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 除了预配置的选项之外，Unity赋予开发者创建高度个性化的环境的能力。你可以在Unity编辑器内部任意移动和停靠窗口，将它们分组，或者将它们作为独立窗口浮动。这种程度的定制确保了每个你经常使用的工具或面板都正好位于你需要的位置，从**场景**和**游戏**视图到**层次结构**、**项目**和**检查器**窗口。
- en: Unity makes the process of saving your custom layout for future use straightforward.
    Once you’ve arranged the Unity Editor to your liking, simply go to the **Layout**
    drop-down menu at the top right of the editor, next to the cloud and account icons.
    From there, select **Save Layout...** and give your new layout a memorable name.
    This custom configuration is then stored and accessible from the same layout drop-down
    menu, allowing you to switch between layouts or apply your preferred setup to
    any Unity project you work on.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: Unity使保存自定义布局以供将来使用的过程变得简单直接。一旦你将Unity编辑器调整到你喜欢的样子，只需简单地转到编辑器右上角的**布局**下拉菜单，紧挨着云图标和账户图标。从那里，选择**保存布局...**并给你的新布局起一个容易记住的名字。这个自定义配置随后将被存储，并可以从相同的布局下拉菜单中访问，让你能够在不同的布局之间切换，或者将你偏好的设置应用到你所工作的任何Unity项目中。
- en: This ability to customize and save editor configurations not only enhances your
    immediate workflow but also establishes a consistent and comfortable development
    environment across all your Unity projects. Whether you’re working solo or as
    part of a team, these personalized settings can significantly streamline your
    development process, making it easier to focus on bringing your creative visions
    to life.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这种自定义和保存编辑器配置的能力不仅增强了你的即时工作流程，而且为你的所有Unity项目建立了一个一致且舒适的开发环境。无论你是单独工作还是作为团队的一部分，这些个性化的设置可以显著简化你的开发过程，使你更容易将你的创意愿景变为现实。
- en: Mastering the Unity Editor interface is a fundamental step in harnessing the
    full potential of Unity for game development. By familiarizing yourself with its
    various windows and customizable configurations, you set the stage for a more
    efficient and personalized development experience. Whether you’re laying out scenes,
    managing assets, or fine-tuning game object properties, the Unity Editor interface
    offers the tools and flexibility needed to bring your creative visions to fruition.
    With this knowledge in hand, you’re well-prepared to dive deeper into the intricacies
    of game development with Unity, equipped to tackle challenges and innovate with
    confidence.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 掌握Unity编辑器界面是充分利用Unity进行游戏开发的基本步骤。通过熟悉其各种窗口和可定制的配置，你将为更高效和个性化的开发体验做好准备。无论你是布置场景、管理资源还是微调游戏对象属性，Unity编辑器界面提供了将你的创意愿景变为现实所需的工具和灵活性。掌握这些知识后，你将准备好深入Unity游戏开发的复杂性，自信地应对挑战和创新。
- en: Moving forward, we’ll delve into the art of importing and managing assets in
    Unity, a pivotal step in shaping the visual and auditory essence of your game.
    The next section unveils how to seamlessly integrate and organize assets, ensuring
    a streamlined and efficient development workflow.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将深入探讨在Unity中导入和管理资源的方法，这是塑造游戏视觉和听觉精髓的关键步骤。下一节将揭示如何无缝集成和组织资源，确保开发工作流程流畅高效。
- en: Importing and managing assets
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入和管理资源
- en: In the realm of game development with Unity, mastering the process of importing
    and managing assets is fundamental for crafting immersive and dynamic experiences.
    Assets, which include everything from textures and models to audio clips and scripts,
    form the building blocks of your game world. This section provides an in-depth
    look at the essential processes and best practices for asset management, ensuring
    your project remains well-organized and efficient.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Unity进行游戏开发领域，掌握导入和管理资源的过程对于制作沉浸式和动态体验是基础性的。资源，包括从纹理和模型到音频剪辑和脚本的各个方面，构成了你游戏世界的基石。本节深入探讨了资产管理的必要过程和最佳实践，确保你的项目保持良好的组织和效率。
- en: We’ll begin by exploring the fundamentals of asset importing, detailing how
    Unity streamlines the process of integrating external resources into your project.
    Understanding the nuances of importing different types of assets, optimizing them
    for your game, and utilizing Unity’s automatic settings adjustments is key to
    a smooth development process.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先探讨资源导入的基础，详细说明Unity如何简化将外部资源集成到项目中的过程。理解导入不同类型资源的细微差别，优化它们以适应你的游戏，并利用Unity的自动设置调整是顺畅开发过程的关键。
- en: The significance of a systematic approach to organizing your assets becomes
    increasingly apparent as projects grow. Strategies for effective asset organization,
    such as the use of logical folder structures and consistent naming conventions,
    will be discussed as they prevent common issues such as asset misplacement or
    duplication and enhance workflow efficiency.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 随着项目的增长，系统化组织资源的重要性越来越明显。本节将讨论有效的资源组织策略，例如使用逻辑文件夹结构和一致的命名约定，这些策略可以防止常见的资源错位或重复问题，并提高工作流程效率。
- en: Furthermore, we’ll delve into the overarching strategies that experienced developers
    use to keep their projects streamlined. Emphasizing efficiency and organization,
    we’ll cover everything from leveraging Unity’s built-in systems for asset categorization
    to the critical role of version control in managing asset libraries.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们将深入探讨经验丰富的开发者用来保持项目流畅的总体策略。强调效率和组织，我们将涵盖从利用Unity内置系统进行资产分类到版本控制在管理资源库中的关键作用。
- en: By honing your skills in asset import and management within Unity, you’ll set
    the stage for a more focused and creative development process, ensuring that your
    project’s foundation is both solid and scalable.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在Unity中磨练你的资源导入和管理技能，你将为更专注和富有创造性的开发过程奠定基础，确保你的项目基础既稳固又可扩展。
- en: Basics of asset importing
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 资源导入的基础
- en: Bringing assets into a Unity project is a straightforward process that’s essential
    for adding the visual, auditory, and interactive elements that make up your game.
    Unity supports a wide range of asset types, including images, audio files, 3D
    models, and animations, each with its own set of considerations for optimal import
    and use within the engine.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 将资产引入 Unity 项目是一个简单的过程，这对于添加构成游戏视觉、听觉和交互元素至关重要。Unity 支持广泛的资产类型，包括图像、音频文件、3D
    模型和动画，每种类型在引擎中的最佳导入和使用都有其考虑因素。
- en: For images, Unity accepts the most common formats, such as JPEG, PNG, and PSD.
    When importing images, particularly for textures or sprites, you might need to
    adjust import settings such as compression, resolution, and texture type to balance
    quality and performance. Audio files can also be imported with ease, and Unity
    supports formats such as MP3, WAV, and OGG. Here, you’ll have options to modify
    the bitrate, load type, and compression format to ensure your audio assets don’t
    unnecessarily inflate your game’s size.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 对于图像，Unity 接受最常用的格式，如 JPEG、PNG 和 PSD。在导入图像时，尤其是对于纹理或精灵，您可能需要调整导入设置，如压缩、分辨率和纹理类型，以平衡质量和性能。音频文件也可以轻松导入，Unity
    支持的格式包括 MP3、WAV 和 OGG。在这里，您将有权修改比特率、加载类型和压缩格式，以确保您的音频资产不会不必要地增加游戏的大小。
- en: 3D objects and animations often come from external 3D modeling tools such as
    Blender or Maya. Unity is compatible with several 3D formats, including FBX, OBJ,
    and COLLADA. When importing these, it’s paramount to check scale, orientation,
    and rigging settings to ensure they seamlessly integrate into your Unity scenes.
    Animations in particular may require additional setup in Unity’s Animator to function
    correctly within your game logic.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 3D 对象和动画通常来自外部 3D 建模工具，如 Blender 或 Maya。Unity 兼容多种 3D 格式，包括 FBX、OBJ 和 COLLADA。在导入这些格式时，检查比例、方向和绑定设置至关重要，以确保它们能够无缝集成到您的
    Unity 场景中。特别是动画，可能需要在 Unity 的 Animator 中进行额外的设置，以确保在游戏逻辑中正确运行。
- en: Manually adding assets to a Unity project can be accomplished through several
    straightforward methods, catering to different types of assets and developer preferences.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 通过几种简单的方法可以将资产手动添加到 Unity 项目中，以满足不同类型的资产和开发者偏好。
- en: 'Here’s an overview of the primary ways to bring your assets into the Unity
    environment:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是主要将资产引入 Unity 环境的方法概述：
- en: '**Drag and drop**: One of the simplest methods is to drag assets directly from
    your file explorer into the Unity Editor’s Project Window. This method works for
    a wide range of asset types, including images, audio files, 3D models, and scripts.
    Unity will automatically import and configure the assets based on their file types.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拖放**：最简单的方法之一是将资产直接从文件资源管理器拖放到 Unity 编辑器的项目窗口中。这种方法适用于广泛的资产类型，包括图像、音频文件、3D
    模型和脚本。Unity 会根据文件类型自动导入和配置资产。'
- en: '**Assets menu**: Within the Unity Editor, you can use the **Assets** menu located
    at the top of the screen. Select **Assets** | **Import New Asset…**, which opens
    a file browser where you can select the asset you wish to import. This method
    is particularly useful when you need to import assets located in different folders
    or when you prefer navigating through the editor.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资产菜单**：在 Unity 编辑器中，您可以使用屏幕顶部的 **资产** 菜单。选择 **资产** | **导入新资产…**，这将打开一个文件浏览器，您可以在其中选择要导入的资产。当您需要导入位于不同文件夹中的资产或您更喜欢在编辑器中导航时，此方法特别有用。'
- en: '**Copy and paste**: Assets can also be added by simply copying them from the
    file explorer (*Ctrl* + *C* or *Cmd* + *C*) and pasting them into the **Project**
    window in Unity *(Ctrl* + *V* or *Cmd* + *V*). Unity recognizes the copied files
    and imports them into the project, maintaining their original file structure if
    copied from multiple folders.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**复制和粘贴**：您还可以通过简单地从文件资源管理器复制资产（*Ctrl* + *C* 或 *Cmd* + *C*）并将其粘贴到 Unity 的 **项目**
    窗口中（*Ctrl* + *V* 或 *Cmd* + *V*）来添加资产。Unity 会识别复制的文件并将它们导入到项目中，如果是从多个文件夹中复制的，则会保持其原始文件结构。'
- en: '**External tools**: For certain asset types, especially 3D models and animations,
    you might use external applications such as 3D modeling software. Many of these
    tools offer Unity-specific plugins or export options that allow you to save these
    assets in a format that’s readily compatible with Unity, such as FBX for 3D models.
    Once exported, these assets can be imported into Unity using any of the methods
    mentioned previously.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**外部工具**：对于某些资产类型，尤其是3D模型和动画，你可能需要使用外部应用程序，例如3D建模软件。许多这些工具提供Unity特定的插件或导出选项，允许你以与Unity兼容的格式保存这些资产，例如FBX格式的3D模型。一旦导出，这些资产就可以使用之前提到的方法之一导入到Unity中。'
- en: 'Beyond manual asset import, Unity offers two powerful tools to expand your
    asset library: **Package Manager** and **Asset Store**.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 除了手动导入资产之外，Unity还提供了两个强大的工具来扩展你的资产库：**包管理器**和**资产商店**。
- en: The **Unity Package Manager** is a tool that streamlines the process of using
    shared code and assets. It allows developers to easily install, update, and manage
    external packages from Unity and third-party providers. These packages can include
    everything from new functionalities and libraries to complete project templates,
    significantly speeding up development by providing ready-made solutions for common
    needs. Additionally, **Package Manager** provides access to built-in packages
    that come with Unity, such as **Input System**, **Physics**, and **UI Toolkit**,
    as well as advanced features such as **AR Foundation** for augmented reality,
    **Cinemachine** for advanced camera control, and various render pipelines (URP
    and HDRP). It also supports custom packages, enabling teams to create and share
    their own packages for reuse across projects. **Package Manager** handles version
    management and dependencies, ensuring that all required packages are installed
    and up-to-date, maintaining compatibility and stability within projects.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '**Unity包管理器**是一个简化使用共享代码和资产的工具。它允许开发者轻松安装、更新和管理来自Unity和第三方提供商的外部包。这些包可能包括从新的功能性和库到完整的项目模板，通过提供现成的解决方案来满足常见需求，从而显著加快开发速度。此外，**包管理器**还提供了访问Unity内置包的权限，例如**输入系统**、**物理**和**UI工具包**，以及高级功能，如用于增强现实（AR）的**AR
    Foundation**、用于高级相机控制的**Cinemachine**以及各种渲染管线（URP和HDRP）。它还支持自定义包，使团队能够创建和共享他们自己的包，以便在项目之间重复使用。**包管理器**处理版本管理和依赖关系，确保所有必需的包都已安装并保持最新，以保持项目中的兼容性和稳定性。'
- en: The **Unity Asset Store** is an expansive marketplace where creators can buy,
    sell, and download assets. It hosts a vast array of assets, including 3D models,
    textures, sounds, scripts, and complete project examples. **Asset Store** is an
    invaluable resource for developers looking to enhance their projects without creating
    every element from scratch, offering both free and paid assets tailored to a wide
    range of game genres and styles.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '**Unity资产商店**是一个庞大的市场，创作者可以在这里购买、出售和下载资产。它托管了大量的资产，包括3D模型、纹理、声音、脚本和完整的项目示例。对于希望在不从头开始创建每个元素的情况下增强其项目的开发者来说，**资产商店**是一个无价的资源，提供免费和付费资产，适用于广泛的游戏类型和风格。'
- en: When incorporating assets from **Package Manager** or **Asset Store**, it’s
    essential to review their compatibility with your Unity version and project requirements.
    Properly leveraging these tools can greatly enhance your development workflow,
    providing a wealth of resources to enrich your game projects.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 当从**包管理器**或**资产商店**引入资产时，检查它们与你的Unity版本和项目需求兼容性是至关重要的。正确利用这些工具可以极大地提高你的开发工作流程，为你的游戏项目提供丰富的资源。
- en: Organizing assets using folders and naming conventions
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用文件夹和命名约定组织资产
- en: Organizing assets within a Unity project is pivotal for maintaining a streamlined
    workflow and ensuring that your development process remains efficient, especially
    as projects scale up. A well-organized project not only makes assets easily navigable
    but also enhances collaboration within teams. The use of folders and consistent
    naming conventions plays a critical role in this organization.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity项目中组织资产对于保持流畅的工作流程和确保开发过程高效至关重要，尤其是在项目规模扩大时。一个组织良好的项目不仅使资产易于导航，而且还能增强团队之间的协作。使用文件夹和一致的命名约定在这个组织过程中起着关键作用。
- en: 'First, let’s look at folders. A typical Unity project should have a set of
    top-level folders in the Assets directory to categorize assets by their types
    or functionalities. The following are some commonly expected folders:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看文件夹。一个典型的Unity项目应该在Assets目录中有一组顶级文件夹，用于根据类型或功能对资源进行分类。以下是一些常见的预期文件夹：
- en: '**Scenes**: Contains all your Unity scene files. You might further organize
    this with subfolders such as *Main*, *Levels*, or *UI* for different parts of
    your game.'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**场景**：包含所有Unity场景文件。你可以通过子文件夹如*Main*、*Levels*或*UI*进一步组织，以适应游戏的不同部分。'
- en: '**Scripts**: Houses all your C# scripts. Subfolders can be used to categorize
    scripts by their purpose, such as *Characters*, *UI*, *Gameplay*, or *Utilities*.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**脚本**：存放所有C#脚本。子文件夹可以用来根据用途对脚本进行分类，如*Characters*、*UI*、*Gameplay*或*Utilities*。'
- en: '**Materials**: For storing material assets that are used to define the appearance
    of surfaces in the game.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**材质**：用于存储用于定义游戏表面外观的材质资源。'
- en: '**Textures**: Contains image files that are used in materials or UI elements.
    Subfolders might include *UI*, *Environment*, *Characters*, and so on.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**纹理**：包含用于材质或UI元素的图像文件。子文件夹可能包括*UI*、*Environment*、*Characters*等。'
- en: '**Models**: For 3D models that have been imported into your project. This can
    be further divided into *Characters*, *Props*, *Environment*, and so on.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型**：用于已导入项目的3D模型。这可以进一步细分为*Characters*、*Props*、*Environment*等。'
- en: '**Animations**: Stores animation files and controllers. Subcategories might
    include different characters or types of animations, such as *CharacterAnimations*
    or *UIAnimations*.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动画**：存储动画文件和控制器。子类别可能包括不同的角色或动画类型，如*CharacterAnimations*或*UIAnimations*。'
- en: '**Audio**: Holds music and sound effect files, potentially organized into *Music*,
    *SFX*, *Dialog*, and so on.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**音频**：包含音乐和音效文件，可能组织为*音乐*、*SFX*、*对话*等。'
- en: '**Prefabs**: Prefabs are reusable GameObject templates, so this folder would
    contain all Prefabs created for the project.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预制体**：预制体是可重复使用的GameObject模板，因此这个文件夹将包含为项目创建的所有预制体。'
- en: 'Adopting a clear and consistent naming convention for folders and assets is
    equally important. Here are some general guidelines:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 采用清晰和一致的文件夹和资源命名约定同样重要。以下是一些一般性指南：
- en: '**Use clear, descriptive names**: Names should be self-explanatory, indicating
    the purpose or content of the asset or folder. For instance, *PlayerCharacter*
    is more descriptive than *NewModel1*.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用清晰、描述性的名称**：名称应该是自我解释的，表明资源的用途或内容。例如，*PlayerCharacter*比*NewModel1*更具描述性。'
- en: '**Maintain consistency**: Apply a consistent naming structure across your project.
    If you use camelCase for one script, use it for all scripts. Similarly, if you
    start folder names with uppercase letters, continue this pattern throughout.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**保持一致性**：在整个项目中应用一致的命名结构。如果你为某个脚本使用camelCase，那么所有脚本都应该使用它。同样，如果你以大写字母开头命名文件夹，那么在整个项目中都应该保持这种模式。'
- en: '`_`) or camelCase for asset names to avoid issues with spaces in file paths,
    especially when dealing with cross-platform projects or version control systems.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_`)或camelCase用于资源名称，以避免文件路径中的空格问题，尤其是在处理跨平台项目或版本控制系统时。'
- en: '**Adopt versioning**: For assets that might have multiple versions, include
    a version number at the end of the filename – for example, *EnemyModel_v02*.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**采用版本控制**：对于可能有多个版本的资源，在文件名末尾包含版本号——例如，*EnemyModel_v02*。'
- en: A well-organized Unity project, with thoughtfully named folders and assets,
    significantly reduces the time spent searching for files and prevents clutter
    that can slow down the development process. It’s a practice that pays dividends,
    particularly in larger projects or when working within a team, ensuring that everyone
    can find what they need quickly and understand the project structure at a glance.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 一个组织良好的Unity项目，拥有精心命名的文件夹和资源，可以显著减少查找文件的时间，并防止可能减慢开发进程的杂乱。这是一种值得投资的实践，尤其是在大型项目或团队协作时，确保每个人都能快速找到他们需要的东西，并一眼就能理解项目结构。
- en: 'Finally, let’s look at the reserved folder names. In Unity, reserved folder
    names refer to specific directory names that have special significance and behavior
    within the engine. These folders are recognized by Unity and are treated differently,
    no matter where they are located or their quantity:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们看看保留的文件夹名称。在Unity中，保留的文件夹名称指的是在引擎中具有特殊意义和行为的特定目录名称。这些文件夹被Unity识别，并且无论它们位于何处或数量如何，都会被以不同的方式处理：
- en: '**Editor folder**:'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编辑器文件夹**：'
- en: The *Editor* folder is a special directory that’s used to store scripts, assets,
    and tools that are only used within the Unity Editor and should not be included
    in the final build of the game. Unity recognizes this folder and its subfolders
    globally and excludes their contents from game builds, ensuring that development
    tools and editor-specific functionality don’t unnecessarily increase the build
    size or affect the performance of the final game.
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*编辑器*文件夹是一个特殊的目录，用于存储仅在Unity编辑器中使用的脚本、资产和工具，不应包含在游戏的最终构建中。Unity全局识别此文件夹及其子文件夹，并从游戏构建中排除其内容，确保开发工具和编辑器特定功能不会不必要地增加构建大小或影响最终游戏的表现。'
- en: Assets and scripts placed in an *Editor* folder are ideal for enhancing the
    development process, such as custom editor windows, inspector enhancements, or
    build automation scripts. If you have multiple *Editor* folders at different locations
    within your Assets directory, Unity treats them all with the same special consideration.
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 放置在*编辑器*文件夹中的资产和脚本非常适合增强开发过程，例如自定义编辑器窗口、检查器增强或构建自动化脚本。如果你在资产目录的不同位置有多个*编辑器*文件夹，Unity会将它们都视为具有特殊考虑的文件夹。
- en: '`Resources.Load()` method. Unity includes the entire contents of *Resources*
    folders in the build, regardless of whether they are directly referenced by other
    assets in the project. This allows developers to access assets by their path and
    name without needing a direct reference in the editor, providing flexibility for
    loading content on demand.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Resources.Load()`方法。Unity将*资源*文件夹的整个内容包含在构建中，无论它们是否被项目中的其他资产直接引用。这允许开发者通过路径和名称访问资产，而无需在编辑器中直接引用，从而为按需加载内容提供灵活性。'
- en: However, this convenience comes with a performance cost. Since assets in *Resources*
    folders are always included in the build, they can significantly increase the
    size of your game and lead to longer loading times. It’s recommended to use the
    *Resources* system sparingly and consider alternative strategies for asset management
    and loading, such as AssetBundles or the Addressable Asset System, for more efficient
    runtime asset loading.
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然而，这种便利性伴随着性能成本。由于*资源*文件夹中的资产总是包含在构建中，它们可以显著增加游戏的大小，并导致更长的加载时间。建议谨慎使用*资源*系统，并考虑资产管理和加载的替代策略，例如AssetBundles或可寻址资产系统，以实现更高效的运行时资产加载。
- en: Understanding the special functionalities of these reserved folder names in
    Unity is key for effective project organization and optimization. Proper use of
    the *Editor* and *Resources* folders can significantly enhance your development
    workflow and game performance, but they should be used judicially and with an
    awareness of their impact on your project.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 理解Unity中这些保留文件夹名称的特殊功能对于有效的项目组织和优化至关重要。正确使用*编辑器*和*资源*文件夹可以显著提高你的开发工作流程和游戏性能，但它们应该审慎使用，并意识到它们对项目的影响。
- en: Asset management best practices (efficiency and organization)
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 资产管理最佳实践（效率和组织）
- en: Effective asset management is a cornerstone of successful game development in
    Unity, ensuring not only a smoother workflow but also optimal performance of the
    final game. Adhering to best practices in asset management can significantly contribute
    to the efficiency and organization of your Unity project.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 有效的资产管理是Unity中成功游戏开发的基础，它不仅确保了更流畅的工作流程，还保证了最终游戏的最佳性能。遵循资产管理最佳实践可以显著提高你的Unity项目的效率和组织性。
- en: One critical practice is the strategic use of folders to maintain a clear and
    logical structure within your project’s Assets directory. Organize assets into
    categorically named folders such as *Textures*, *Scripts*, *Models*, and *Audio*.
    This not only makes assets easier to locate but also helps in managing dependencies
    and understanding the project’s architecture at a glance.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 一个关键的做法是战略性地使用文件夹来维护项目资产目录内的清晰和逻辑结构。将资产组织到以类别命名的文件夹中，例如*纹理*、*脚本*、*模型*和*音频*。这不仅使资产更容易定位，还有助于管理依赖关系，并一眼看出项目的架构。
- en: Consistent naming conventions are equally important. Establish a clear, descriptive
    naming system for your assets and stick to it throughout the project. This can
    involve prefixing asset names with their type (for example, *tex_* for textures
    and *snd_* for sound effects) or using suffixes to denote variations (for example,
    *Character_Run* and *Character_Jump*). Consistency in naming reduces confusion
    and aids in quickly identifying assets’ purposes and relationships.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 一致的命名约定同样重要。为您的资产建立一个清晰、描述性的命名系统，并在整个项目中坚持使用。这可能包括在资产名称前缀中添加其类型（例如，*tex_*用于纹理和*snd_*用于音效）或使用后缀表示变体（例如，*Character_Run*和*Character_Jump*）。命名的一致性可以减少混淆并有助于快速识别资产的目的和关系。
- en: The efficient use of assets is another key aspect. Consider the impact of asset
    resolution and file size on your game’s performance and loading times. For instance,
    overly high-resolution textures can be a drain on memory and increase load times
    without providing noticeable benefits, especially on smaller screens or less powerful
    hardware. Utilizing Unity’s built-in tools to compress textures and audio files
    can help in balancing quality with performance.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 资源的高效使用是另一个关键方面。考虑资产分辨率和文件大小对游戏性能和加载时间的影响。例如，过高的分辨率纹理可能会消耗内存并增加加载时间，而不会带来明显的益处，尤其是在小屏幕或性能较弱的硬件上。利用Unity内置的工具压缩纹理和音频文件，有助于在质量和性能之间取得平衡。
- en: Unity’s `Assets/Textures/Player.png`, `Assets/Prefabs/Enemy.prefab`, or a remote
    server), which can be particularly useful for games that require a lot of content.
    This advanced system allows for more dynamic asset loading and can reduce your
    game’s initial load time by loading assets on demand rather than at startup, making
    it an important concept to understand for optimizing performance.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: Unity的`Assets/Textures/Player.png`、`Assets/Prefabs/Enemy.prefab`或远程服务器），这对于需要大量内容的游戏尤其有用。这个高级系统允许更动态的资产加载，可以通过按需加载资产而不是在启动时加载，从而减少游戏的初始加载时间，这是优化性能时需要理解的重要概念。
- en: Lastly, regular audits of your asset library can prevent asset bloat – the accumulation
    of unused or redundant assets that can clutter your project and increase build
    size. Tools such as Unity’s **Asset Usage Detector** can help identify unused
    assets that can be safely removed or archived.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，定期审计您的资产库可以防止资产膨胀——即未使用或冗余资产的积累，这可能会使项目杂乱无章并增加构建大小。Unity的**资产使用检测器**等工具可以帮助识别可以安全删除或存档的未使用资产。
- en: By implementing these asset management best practices, you can ensure that your
    Unity project remains organized, efficient, and scalable, facilitating a smoother
    development process and a better-performing game.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 通过实施这些资产管理最佳实践，您可以确保您的Unity项目保持组织、高效和可扩展，从而促进更顺畅的开发过程和性能更佳的游戏。
- en: In wrapping up our exploration of importing and managing assets in Unity, we’ve
    delved into the fundamental practices that streamline the development process
    and enhance project organization. Beginning with the basics of asset importing,
    we’ve seen how Unity simplifies the integration of diverse asset types, from textures
    and models to audio and scripts, ensuring they are optimized for game performance
    and quality.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在总结我们对Unity中导入和管理资产探索的过程中，我们深入探讨了简化开发流程和增强项目组织的根本实践。从资产导入的基本知识开始，我们看到了Unity如何简化不同类型资产的集成，从纹理和模型到音频和脚本，确保它们针对游戏性能和质量进行了优化。
- en: The importance of organizing assets using folders and naming conventions cannot
    be overstated. By structuring assets logically and adhering to consistent naming,
    we create a project environment that is not only easier to navigate but also more
    conducive to collaboration and scalability. This organization is the backbone
    of efficient project management, saving valuable time and reducing the risk of
    errors during development.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 使用文件夹和命名约定组织资产的重要性不容忽视。通过逻辑地构建资产结构并坚持一致的命名规则，我们创建了一个不仅易于导航，而且更有利于协作和可扩展性的项目环境。这种组织结构是高效项目管理的基础，可以节省宝贵的时间并减少开发过程中的错误风险。
- en: Furthermore, asset management best practices extend beyond simple organization,
    encompassing strategies for maintaining project efficiency and cleanliness. Regular
    audits, efficient use of assets, and leveraging advanced tools such as the Addressable
    Assets System are part of a holistic approach to managing the wealth of resources
    at your disposal. These practices ensure that your Unity project remains streamlined,
    manageable, and primed for optimal performance, regardless of its size or complexity.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，资产管理最佳实践不仅限于简单的组织，还包括维护项目效率和整洁性的策略。定期的审计、资产的高效使用以及利用诸如可寻址资产系统等高级工具都是管理可用资源的整体方法的一部分。这些实践确保无论项目的大小或复杂性如何，你的Unity项目都能保持流畅、易于管理，并准备好实现最佳性能。
- en: In essence, mastering the art of importing and managing assets is a critical
    skill in Unity game development, laying the foundation for a smooth, efficient
    workflow. By embracing these principles, developers can focus more on the creative
    aspects of game design, secure in the knowledge that their project’s assets are
    well-organized, optimized, and ready to bring their vision to life.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 从本质上讲，掌握导入和管理资产的艺术是Unity游戏开发中的关键技能，为流畅、高效的流程奠定基础。通过接受这些原则，开发者可以更多地关注游戏设计的创意方面，有信心知道他们的项目资产组织良好、优化得当，并准备好将他们的愿景变为现实。
- en: Next, we’ll focus on the essentials of GameObject manipulation in Unity, a key
    skill in shaping your game’s interactive elements. The next segment will show
    you how to manipulate GameObjects and components, the foundational aspects of
    your Unity project, to create engaging 2D and 3D environments.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将关注Unity中GameObject操作的基本要素，这是塑造游戏交互元素的关键技能。下一部分将展示如何操作GameObject和组件，这是你的Unity项目的基石，以创建引人入胜的2D和3D环境。
- en: Basic GameObject manipulation
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本的GameObject操作
- en: Diving into the world of Unity, the concept of GameObject manipulation stands
    at the heart of creating interactive and dynamic environments. Unity’s robust
    framework allows developers to craft their visions into reality, starting with
    the basic building blocks known as GameObjects. These objects, combined with a
    versatile set of components, form the backbone of any Unity project, enabling
    the creation of a wide array of 2D and 3D content that ranges from simple shapes
    to complex interactive systems.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 深入Unity的世界，GameObject操作的概念是创建交互性和动态环境的核心。Unity强大的框架允许开发者将他们的愿景转化为现实，从被称为GameObject的基本构建块开始。这些对象与一套多功能的组件结合，构成了任何Unity项目的骨架，使得创建从简单形状到复杂交互系统的各种2D和3D内容成为可能。
- en: At the core of Unity’s design philosophy is the ability to not only create but
    also extensively configure and manipulate these objects. Whether you’re working
    within a 2D platformer or a 3D adventure game, understanding how to adeptly add,
    modify, and interact with these elements is integral. Developers are equipped
    to precisely control the position, rotation, and scale of objects within the game
    world, providing the freedom to bring intricate designs and ideas to life.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: Unity的设计哲学的核心在于不仅能够创建，而且能够广泛地配置和操作这些对象。无论你是在2D平台游戏还是3D冒险游戏中工作，理解如何熟练地添加、修改和交互这些元素是至关重要的。开发者能够精确控制游戏世界中对象的定位、旋转和缩放，从而提供将复杂设计和想法实现为现实的能力。
- en: Moreover, Unity introduces the concept of Prefabs, a powerful feature that allows
    for the creation of asset templates that can be reused across the project. This
    system of reusable assets significantly streamlines the development process, ensuring
    consistency and efficiency, especially in larger projects with numerous recurring
    elements.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Unity引入了Prefab的概念，这是一个强大的功能，允许创建可以在整个项目中重复使用的资产模板。这种可重复使用资产的系统显著简化了开发过程，确保了一致性和效率，尤其是在具有许多重复元素的大型项目中。
- en: Through mastering these fundamental aspects of GameObject manipulation, developers
    gain the ability to construct rich, immersive game worlds. This section aims to
    equip you with the knowledge and skills necessary to harness the full potential
    of Unity’s GameObject and component system, paving the way for the realization
    of your creative visions in the game development journey.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 通过掌握GameObject操作的基本方面，开发者能够构建丰富、沉浸式的游戏世界。本节旨在为您提供利用Unity的GameObject和组件系统的全部潜力的知识和技能，为您的游戏开发之旅中实现创意愿景铺平道路。
- en: Introduction to GameObjects and components
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GameObject和组件简介
- en: In Unity3D, the concept of a GameObject is fundamental, serving as the cornerstone
    of every element within a game’s environment. At its essence, a **GameObject**
    is a container that holds various components, which collectively define the object’s
    behavior, appearance, and role within the game world. Think of a GameObject as
    an empty vessel that, by itself, doesn’t do much. However, when components are
    added, it becomes a dynamic and interactive part of your game.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity3D中，GameObject的概念是基础性的，它是游戏环境中每个元素的基石。本质上，**GameObject**是一个容器，它包含各种组件，这些组件共同定义了对象在游戏世界中的行为、外观和角色。将GameObject想象成一个空容器，它本身并不做什么。然而，当添加组件后，它就变成了游戏中的一个动态和交互式部分。
- en: One of the most critical and omnipresent components attached to every GameObject
    is the **Transform** component. This essential component controls the object’s
    position, rotation, and scale within the game world, making it the bedrock of
    spatial manipulation in Unity. Whether you’re positioning a character, rotating
    a door, or scaling a landscape, the **Transform** component is your primary tool.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 每个GameObject都附有一个最关键且无处不在的组件，那就是**变换**组件。这个基本组件控制对象在游戏世界中的位置、旋转和缩放，是Unity中空间操作的基础。无论你是定位角色、旋转门还是缩放景观，**变换**组件都是你的主要工具。
- en: Beyond the **Transform** component, GameObjects can be equipped with a myriad
    of other components that add functionality and life to what would otherwise be
    static objects. These can include Renderer and Mesh Filter components for visual
    representation, Collider components for physical interaction, Rigidbody components
    for applying physics, and custom scripts to create bespoke behaviors tailored
    to your game’s needs.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 除了**变换**组件之外，GameObject还可以配备众多其他组件，这些组件为原本静态的对象增添了功能性和活力。这些组件可能包括用于视觉表现的渲染器和网格过滤器组件，用于物理交互的碰撞器组件，用于应用物理的刚体组件，以及用于创建针对游戏需求量身定制的自定义脚本。
- en: Light components add illumination, Camera components define the player’s viewpoint,
    and Audio Source components bring sound into the mix, each contributing to a more
    immersive and interactive game experience. Unity’s component-based architecture
    encourages a modular and flexible approach to game design, allowing developers
    to mix and match functionalities to create complex and varied game objects.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 光组件增加照明，相机组件定义玩家的视角，而音频源组件则将声音融入其中，每个组件都为更沉浸式和互动的游戏体验做出了贡献。Unity的基于组件的架构鼓励采用模块化和灵活的游戏设计方法，允许开发者混合和匹配功能，以创建复杂多样的游戏对象。
- en: Understanding GameObjects and their components is the first step in unlocking
    the vast potential of Unity3D for game development. By mastering how to manipulate
    these fundamental elements, you set the foundation for building everything from
    simple interactive items to complex, dynamically behaving entities in your game
    world.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 理解GameObject及其组件是解锁Unity3D游戏开发巨大潜力的第一步。通过掌握如何操作这些基本元素，你为构建从简单交互项到复杂、动态行为的游戏世界实体奠定了基础。
- en: Creating and configuring basic 2D/3D objects
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建和配置基本的2D/3D对象
- en: Adding a basic cube to a Unity project is a simple yet fundamental skill in
    game development, serving as a gateway to creating more complex structures and
    environments. To begin, you’ll need to utilize the Unity Editor’s intuitive interface,
    specifically the **Hierarchy** window. Here, you can right-click in an empty space
    and navigate the context menu to **3D Object** | **Cube**. Selecting this option
    instantly creates a default cube and places it in your scene, visible both in
    the **Hierarchy** window and the **Scene** view.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个基本的立方体添加到Unity项目中是游戏开发中的一个简单但基础技能，它是创建更复杂结构和环境的大门。要开始，你需要利用Unity编辑器的直观界面，特别是**层次结构**窗口。在这里，你可以在空白区域右键单击，并导航到上下文菜单中的**3D对象**
    | **立方体**。选择此选项会立即创建一个默认的立方体并将其放置在场景中，在**层次结构**窗口和**场景**视图中都可见。
- en: Unity doesn’t stop at cubes; it offers a variety of other primitive shapes such
    as spheres, cylinders, planes, and capsules that can also be added to your scene
    using the same method. These primitives serve as the building blocks for complex
    models and environments, allowing you to experiment with and craft your game’s
    elements from these basic shapes.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: Unity不仅仅局限于立方体；它还提供了多种其他原始形状，如球体、圆柱体、平面和胶囊体，这些形状也可以使用相同的方法添加到场景中。这些原始形状是复杂模型和环境的构建块，允许你从这些基本形状中实验和制作游戏元素。
- en: Once your cube or any other primitive is in place, you might find the need to
    add more specific assets or Prefabs to your scene. This is where the **Project**
    window comes into play. The **Project** window acts as the central repository
    for all assets in your project. You can drag an item, such as a custom model or
    Prefab, directly from the **Project** window into the **Scene** view. This action
    places the item into your **Game** view, where it can be further manipulated and
    integrated into your game environment.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的立方体或其他任何原语就位，你可能需要向场景添加更多特定的资产或预制件。这时，**项目**窗口就派上用场。**项目**窗口充当项目中所有资产的中央存储库。你可以直接从**项目**窗口将项目，如自定义模型或预制件，拖放到**场景视图**。这个动作将项目放入你的**游戏视图**，在那里它可以进一步操作并集成到游戏环境中。
- en: Dragging an item into the **Scene** view is not just limited to 3D models; textures,
    audio clips, and even scripts can be applied to objects within your scene through
    this drag-and-drop method. For example, dragging a texture onto a cube applies
    the texture as a material, altering the cube’s appearance.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 将项目拖入**场景视图**不仅限于3D模型；纹理、音频剪辑甚至脚本都可以通过这种拖放方法应用于场景中的对象。例如，将纹理拖放到立方体上会将纹理作为材质应用，改变立方体的外观。
- en: The process of adding basic objects such as a cube, utilizing other primitives,
    and incorporating assets via drag-and-drop from the **Project** window to the
    **Scene** view lays the foundation for building and enriching your game’s world
    in Unity. With these essential techniques, you’re well-equipped to start shaping
    the visual and interactive aspects of your game projects.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 添加基本对象的过程，如立方体，使用其他原语，以及通过从**项目**窗口拖放至**场景视图**来整合资产，为在Unity中构建和丰富游戏世界奠定基础。有了这些基本技巧，你将准备好开始塑造游戏项目的视觉和交互方面。
- en: Transforming objects (position, rotation, and scale)
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 转换对象（位置、旋转和缩放）
- en: Transforming objects in Unity, such as adjusting their position, rotation, and
    scale, is a fundamental aspect of game development that allows you to precisely
    control how objects are situated and appear within your game world. These transformations
    are primarily managed through the **Transform** component, which is inherent to
    every GameObject in Unity.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity中转换对象，如调整其位置、旋转和缩放，是游戏开发的基本方面，它允许你精确控制对象在游戏世界中的位置和外观。这些转换主要通过**变换**组件来管理，该组件是Unity中每个GameObject固有的。
- en: 'In the **Inspector** window, the **Transform** component displays three key
    properties: **Position**, **Rotation**, and **Scale**. Each property has three
    fields corresponding to the *X*, *Y*, and *Z* axes, allowing for detailed adjustments
    to be made in 3D space. To modify the position of an object, you simply enter
    new values in the **Position** fields, effectively moving the object to the specified
    coordinates in your scene. Rotating an object involves changing the values in
    the **Rotation** fields, which rotate the object around the respective axes. Lastly,
    scaling an object involves adjusting the **Scale** fields, which increase or decrease
    the size of the object along each axis. These changes are reflected in real-time
    in the **Scene** view, providing immediate visual feedback on your adjustments.'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在**检查器**窗口中，**变换**组件显示三个关键属性：**位置**、**旋转**和**缩放**。每个属性都有三个字段，对应于*X*、*Y*和*Z*轴，允许在3D空间中进行详细的调整。要修改对象的位置，你只需在**位置**字段中输入新值，实际上是将对象移动到场景中指定的坐标。旋转对象涉及更改**旋转**字段中的值，这将围绕相应的轴旋转对象。最后，缩放对象涉及调整**缩放**字段，这将增加或减少对象沿每个轴的大小。这些更改在**场景视图**中实时反映，为你提供调整的即时视觉反馈。
- en: Within the **Scene** view, transforming objects can be more intuitive and visually
    guided, thanks to Unity’s transformation tools. These tools, accessible from the
    toolbar or by using hotkeys (*W* for **Move**, *E* for **Rotate**, and *R* for
    **Scale**), present interactive gizmos when an object is selected. The **Move**
    tool displays arrows for dragging the object along the axes, the **Rotate** tool
    shows circular handles for intuitive rotation, and the **Scale** tool provides
    boxes that you can drag to resize the object. This direct manipulation in the
    **Scene** view allows for a more hands-on approach to positioning, rotating, and
    scaling, offering a complementary method to the numerical precision available
    in the **Inspector** window.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在**场景**视图中，由于Unity的变换工具，变换对象可以更加直观和视觉引导。这些工具可以通过工具栏访问或通过使用快捷键（*W* 用于**移动**，*E*
    用于**旋转**，*R* 用于**缩放**）来使用，当选择对象时，它们会显示交互式图示。**移动**工具显示箭头，可以沿着轴拖动对象，**旋转**工具显示圆形手柄，用于直观旋转，**缩放**工具提供可以拖动以调整对象大小的框。在**场景**视图中这种直接操作允许更直观地定位、旋转和缩放，为**检查器**窗口中可用的数值精度提供补充方法。
- en: Whether you’re making adjustments in the **Inspector** window for precise numerical
    control or using the interactive tools in the **Scene** view for a more tactile
    experience, transforming objects in Unity is a seamless process that empowers
    developers to shape their game environment exactly as envisioned. These capabilities
    are essential for everything from basic scene layout to intricate animation and
    gameplay mechanics, underscoring the importance of mastering object transformation
    in Unity.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 不论是在**检查器**窗口中进行调整以实现精确的数值控制，还是使用**场景**视图中的交互式工具以获得更直观的体验，在Unity中变换对象都是一个无缝的过程，使开发者能够精确塑造他们的游戏环境。这些功能对于从基本的场景布局到复杂的动画和游戏机制等一切事物都是必不可少的，强调了掌握Unity中对象变换的重要性。
- en: Prefabs – creating and using reusable assets
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预制件 - 创建和使用可重用资产
- en: In Unity, a **Prefab** is a powerful feature that allows developers to create,
    configure, and store a GameObject with all its components, properties, and child
    objects as a reusable asset. Prefabs serve as templates from which you can create
    new instances in your scenes, ensuring consistency and efficiency in game development.
    They are ideal for objects that are repeated within the game, such as props, characters,
    or UI elements, allowing for centralized management and updates.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity中，**预制件**是一个强大的功能，允许开发者创建、配置和存储具有所有组件、属性和子对象的GameObject，作为一个可重用资产。预制件作为模板，你可以从中创建场景中的新实例，确保游戏开发中的一致性和效率。它们非常适合在游戏中重复出现的对象，如道具、角色或UI元素，允许集中管理和更新。
- en: Using Prefabs has several advantages. First, they streamline the development
    process by enabling you to create complex objects once and reuse them across multiple
    scenes or even different projects. Any changes that are made to a Prefab are automatically
    propagated to all its instances, making it incredibly efficient to update game
    elements globally. This not only saves time but also ensures uniformity and reduces
    the risk of errors when making widespread modifications.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 使用预制件有多个优点。首先，它们通过允许你一次性创建复杂对象并在多个场景或甚至不同的项目中重复使用它们，从而简化了开发过程。对预制件所做的任何更改都会自动传播到其所有实例，这使得全局更新游戏元素变得非常高效。这不仅节省了时间，还确保了统一性，并在进行广泛修改时降低了出错的风险。
- en: Creating a Prefab is straightforward. After setting up a GameObject in the scene
    with all the desired components and configurations, simply drag it from the **Hierarchy**
    window into a folder within the **Project** window. This action converts the GameObject
    into a Prefab, indicated by a blue cube icon next to its name.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 创建预制件很简单。在场景中设置好具有所有所需组件和配置的GameObject后，只需将其从**层次结构**窗口拖动到**项目**窗口中的文件夹中。这个动作将GameObject转换为预制件，其名称旁边会显示一个蓝色的立方体图标。
- en: Adding Prefab instances to a scene is as simple as dragging the Prefab from
    the **Project** window into the **Scene** view or the Hierarchy window. Each instance
    is independent in terms of its specific properties, such as position and rotation,
    but it remains linked to the original Prefab for shared characteristics and components.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 将预制件实例添加到场景中就像将预制件从**项目**窗口拖动到**场景**视图或**层次结构**窗口一样简单。每个实例在其特定属性（如位置和旋转）方面都是独立的，但仍然与原始预制件保持链接，以共享特性和组件。
- en: Editing a Prefab can be done in two ways. You can directly modify the Prefab
    in the **Project** window by opening it in Prefab Mode, where changes affect the
    Prefab itself and all its instances. Alternatively, you can make overrides to
    specific instances in your scene through the **Inspector** window; these changes
    will only apply to the selected instance. To apply changes from an instance to
    the Prefab itself, select the instance, make your modifications, and then click
    the **Overrides** dropdown in the **Inspector** window. From there, you can choose
    to **Apply All** to update the Prefab, ensuring all instances reflect the changes.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑Prefab有两种方式。你可以在**项目**窗口中直接通过在Prefab模式中打开它来修改Prefab，那里的更改会影响Prefab本身及其所有实例。或者，你可以通过**检查器**窗口对场景中的特定实例进行覆盖；这些更改只会应用于所选实例。要将实例的更改应用到Prefab本身，请选择实例，进行修改，然后在**检查器**窗口中的**覆盖**下拉菜单中点击。从那里，你可以选择**应用全部**来更新Prefab，确保所有实例都反映更改。
- en: Prefabs in Unity are invaluable for maintaining a clean, efficient workflow,
    especially in larger projects with many recurring elements. By leveraging Prefabs,
    developers can significantly reduce repetitive work, ensure consistency across
    game elements, and manage updates more effectively, making them a vital tool in
    your Unity development arsenal.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity中，Prefab对于保持干净、高效的流程至关重要，尤其是在具有许多重复元素的大型项目中。通过利用Prefab，开发者可以显著减少重复工作，确保游戏元素之间的一致性，并更有效地管理更新，使它们成为你的Unity开发工具箱中的关键工具。
- en: Mastering basic game object manipulation in Unity lays the groundwork for bringing
    any game concept to life. From the foundational understanding of GameObjects and
    their components to the creation and configuration of 2D and 3D objects, these
    skills are essential in constructing your game’s environment and elements. The
    ability to adeptly position, rotate, and scale objects ensures precise control
    over the visual and functional aspects of your game, allowing you to meticulously
    craft scenes and interactions. Furthermore, the use of Prefabs revolutionizes
    asset management, enabling efficient reuse and global updates across your project.
    Armed with these capabilities, developers are equipped to build rich, dynamic
    game worlds with consistency and efficiency, setting the stage for more advanced
    development tasks and creative exploration in Unity.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity中掌握基本游戏对象操作是使任何游戏概念得以实现的基础。从对GameObject及其组件的基础理解到2D和3D对象的创建和配置，这些技能在构建你的游戏环境和元素中是必不可少的。能够熟练地定位、旋转和缩放对象确保了对游戏视觉和功能方面的精确控制，让你能够精心制作场景和交互。此外，Prefab的使用彻底改变了资产管理，使得在整个项目中高效地重用和全局更新成为可能。拥有这些能力，开发者可以构建丰富、动态的游戏世界，保持一致性和效率，为在Unity中进行更高级的开发任务和创意探索奠定基础。
- en: Next, you’ll learn how to create your first scene, something that marks a significant
    step in bringing your game to life. The next section will guide you through setting
    up an engaging environment, strategically placing objects, and fine-tuning lighting
    and camera angles, laying the foundation for your game’s atmosphere and storytelling.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将学习如何创建你的第一个场景，这是将你的游戏带入生命的一个重大步骤。下一节将指导你如何设置一个引人入胜的环境，策略性地放置对象，以及微调灯光和摄像机角度，为你的游戏氛围和叙事奠定基础。
- en: Preparing your first scene
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备你的第一个场景
- en: Embarking on the creation of your first scene in Unity is a pivotal moment in
    the game development process. This initial setup is where the abstract concepts
    and isolated assets begin to coalesce into an interactive, engaging environment.
    It’s in this foundational stage that the groundwork is laid for the player’s experience,
    setting the tone, atmosphere, and narrative context of your game. Crafting this
    initial scene involves carefully considering the environment, strategically placing
    and arranging objects, and meticulously setting up lighting and camera angles
    to breathe life into your vision.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity中开始创建你的第一个场景是游戏开发过程中的一个关键时刻。这个初始设置是抽象概念和孤立资产开始融合成互动、引人入胜环境的地方。正是在这个基础阶段，为玩家的体验奠定了基础，设定了游戏的基调、氛围和叙事背景。制作这个初始场景需要仔细考虑环境，策略性地放置和排列对象，以及精心设置灯光和摄像机角度，让你的愿景栩栩如生。
- en: As you prepare your first scene, you’ll delve into the intricacies of environment
    design, ensuring that every element, from terrain to skyboxes, contributes to
    a cohesive and immersive world. The addition of objects, whether they are simple
    placeholders or detailed models, starts to fill this environment, giving it purpose
    and interactivity. This stage is important for establishing the basic layout and
    structure of your scene, where the spatial relationships between objects begin
    to define the gameplay dynamics and visual storytelling.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在准备您的第一个场景时，您将深入了解环境设计的复杂性，确保从地形到天空盒的每个元素都为构建一个统一且沉浸式的世界做出贡献。添加的对象，无论是简单的占位符还是详细的模型，开始填充这个环境，赋予它目的和交互性。这一阶段对于建立场景的基本布局和结构至关重要，其中对象之间的空间关系开始定义游戏动态和视觉叙事。
- en: Lighting and camera setup further enhance the mood and clarity of your scene,
    with lighting playing a key role in setting the atmosphere and guiding the player’s
    focus. The camera’s position and movement are equally critical as they determine
    the player’s perspective and interaction with the game world. Together, these
    elements combine to create a scene that not only looks compelling but also provides
    a functional and enjoyable space for players to explore.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 灯光和摄像机设置进一步增强了场景的氛围和清晰度，其中灯光在设定氛围和引导玩家焦点方面发挥着关键作用。摄像机的位置和运动同样至关重要，因为它们决定了玩家的视角和与游戏世界的交互。这些元素共同结合，创造出一个不仅看起来引人入胜，而且为玩家提供一个功能性和愉悦的探索空间的场景。
- en: In preparing your first scene, you’re not just building a stage for your game
    – you’re setting the scene for all the adventures that await. This initial foray
    into scene creation is a blend of technical skill and artistic vision, a balance
    between functionality and aesthetic appeal that will set the tone for your entire
    project.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在准备您的第一个场景时，您不仅是在为您的游戏搭建舞台，您还在为所有即将到来的冒险设置场景。这次对场景创建的初步探索是技术技能和艺术视野的结合，是功能性和美学吸引力的平衡，这将为您整个项目定下基调。
- en: Setting up the scene environment
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置场景环境
- en: Setting up your scene environment in Unity begins with optimizing the default
    elements provided by your chosen template, primarily **Directional Light** and
    **Main Camera**. **Directional Light** acts as a sun, casting parallel light rays
    across the entire scene, which profoundly influences the mood and visibility of
    your environment. Adjusting its intensity, color, and angle can mimic different
    times of day or atmospheric conditions, instantly transforming the scene’s ambiance.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity中设置场景环境首先从优化您选择的模板提供的默认元素开始，主要是**方向光**和**主摄像机**。**方向光**充当太阳，在整个场景中投射平行光线，这深刻影响了环境的氛围和可见性。调整其强度、颜色和角度可以模仿不同的时间或大气条件，瞬间改变场景的氛围。
- en: '**Main Camera**, your window into the game world, dictates what players see
    and how they perceive the environment. Positioning and orienting the camera is
    requisite for framing the scene correctly and ensuring that key elements and actions
    are in the player’s view. Together, strategically manipulating **Directional Light**
    and **Main Camera** lays the groundwork for an immersive scene, setting the stage
    for further environmental enhancements and gameplay elements.'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '**主摄像机**，您进入游戏世界的窗口，决定了玩家看到的内容以及他们如何感知环境。定位和调整摄像机是正确构图和确保关键元素和动作在玩家视野中的必要条件。共同地，策略性地操作**方向光**和**主摄像机**为沉浸式场景打下基础，为进一步的环境增强和游戏元素设定舞台。'
- en: Adding objects to your scene and basic layout
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加对象到您的场景和基本布局
- en: Adding objects to your scene and establishing a basic layout are key steps in
    bringing your Unity project to life. For a simple start, let’s consider adding
    a plane to serve as the ground and a sphere to act as an object of interest within
    the scene. These basic geometric shapes can be easily added through the **Hierarchy**
    window by right-clicking, selecting **3D Object**, and then choosing **Plane**
    for the ground and **Sphere** for the object.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 将对象添加到您的场景中并建立基本布局是使您的Unity项目生动起来的关键步骤。为了简单起见，让我们考虑添加一个平面作为地面，一个球体作为场景中的兴趣对象。这些基本几何形状可以通过**层次**窗口轻松添加，通过右键单击，选择**3D对象**，然后选择**平面**作为地面，**球体**作为对象。
- en: Once added, you can use the **Scene** view to visually position and scale these
    objects to your liking. The **Scene** view provides a hands-on approach to layout,
    allowing you to drag objects around the scene, resize them, and rotate them to
    achieve the desired arrangement. For precise control over these transformations,
    you can select an object and utilize the **Inspector** window to input exact values
    for the object’s position, rotation, and scale under its **Transform** component.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦添加，您可以使用**场景**视图来直观地定位和调整这些对象的大小，使其符合您的喜好。**场景**视图提供了一种直观的布局方法，允许您在场景中拖动对象，调整它们的大小，并旋转它们以达到所需的排列。为了对这些变换进行精确控制，您可以选择一个对象，并利用**检查器**窗口在其**变换**组件下输入对象的位置、旋转和缩放的精确值。
- en: However, after setting up your objects, you might find that the **Game** view
    doesn’t reflect your changes. This usually means that **Main Camera** isn’t aligned
    to capture the scene you’ve laid out. To remedy this, navigate to the **Scene**
    view, select **Main Camera** in the **Hierarchy** window, and then use the **GameObject**
    menu to select **Align with View**. This action aligns the camera’s perspective
    with your current **Scene** view, ensuring that your layout is captured accurately
    in the **Game** view.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在设置好对象之后，您可能会发现**游戏**视图没有反映您的更改。这通常意味着**主相机**没有对准以捕捉您布置的场景。为了解决这个问题，导航到**场景**视图，在**层次结构**窗口中选择**主相机**，然后使用**游戏对象**菜单选择**与视图对齐**。此操作将相机的视角与您的当前**场景**视图对齐，确保您的布局在**游戏**视图中被准确捕捉。
- en: If you’re having trouble locating objects in the **Scene** view, a quick tip
    is to double-click the game object in the **Hierarchy** window. This action will
    focus the **Scene** view on the selected object, bringing it into view and allowing
    you to make further adjustments.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在**场景**视图中难以定位对象，一个快速提示是双击**层次结构**窗口中的游戏对象。此操作将使**场景**视图聚焦于所选对象，将其带入视野，并允许您进行进一步调整。
- en: Through these steps, which involve using the **Hierarchy** window to add objects,
    the **Scene** view and **Inspector** window to adjust their properties, and the
    **Game** view to preview the scene from the camera’s perspective, you can begin
    to understand the fundamental workflow of scene construction in Unity. This basic
    setup serves as a foundation upon which more complex and detailed environments
    can be built as your skills and project develop.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '通过这些步骤，包括使用**层次结构**窗口添加对象，使用**场景**视图和**检查器**窗口调整它们的属性，以及使用**游戏**视图从相机的视角预览场景，您可以开始理解Unity中场景构建的基本工作流程。这个基本设置是构建更复杂和详细环境的基础，随着您的技能和项目的不断发展，可以在其上构建。 '
- en: Scene lighting and camera setup
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 场景照明和相机设置
- en: In Unity, both **Directional Light** and **Main Camera** come equipped with
    a variety of options in the **Inspector** window, each playing a pivotal role
    in shaping the visual dynamics of a scene.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity中，**方向光**和**主相机**都配备了**检查器**窗口中的各种选项，每个选项都在塑造场景的视觉动态中扮演着关键角色。
- en: 'Here are the **Directional Light** options in the **Inspector** window:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是**检查器**窗口中的**方向光**选项：
- en: '**Color**: Adjusts the light’s color, which can affect the mood and atmosphere
    of the scene. A warmer color might simulate sunset, while a cooler color could
    suggest moonlight.'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**颜色**：调整光线的颜色，这可以影响场景的氛围和情感。较暖的颜色可能模拟日落，而较冷的颜色可能暗示月光。'
- en: '**Intensity**: Controls the brightness of the light. Higher values make the
    scene brighter, whereas lower values can create a dusk or night-time effect.'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**强度**：控制光线的亮度。较高的值会使场景更亮，而较低的值可以创建黄昏或夜晚的效果。'
- en: '**Light Baking**: Options such as **Realtime**, **Baked**, and **Mixed** affect
    how lighting is calculated, with real-time lighting being more dynamic and baked
    lighting offering performance benefits for static scenes.'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**光照烘焙**：如**实时**、**烘焙**和**混合**等选项会影响光照的计算方式，实时光照更动态，而烘焙光照为静态场景提供性能优势。'
- en: '**Shadows**: You can toggle shadows on or off and adjust their quality and
    resolution. Soft shadows contribute to a more realistic look but can be more performance-intensive.'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**阴影**：您可以切换阴影的开启或关闭，并调整其质量和分辨率。柔和的阴影有助于营造更逼真的外观，但可能对性能要求更高。'
- en: '**Rotation**: Since directional light simulates distant light sources such
    as the sun, its rotation affects the angle of shadows in the scene, mimicking
    the time of day.'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**旋转**：由于方向光模拟远处的光源，如太阳，其旋转会影响场景中阴影的角度，模仿一天中的时间。'
- en: 'Here are the **Main Camera** options in the **Inspector** window:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是**检查器**窗口中的**主相机**选项：
- en: '**Projection**: The camera can be set to **Perspective**, which offers a natural
    view with objects appearing smaller as they recede, or **Orthographic**, which
    lacks depth, making all objects appear at the same scale regardless of distance.'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**投影**：相机可以设置为**透视**，这提供了一种自然的视图，随着对象的远离，它们看起来会变得更小；或者设置为**正交**，这缺乏深度，使得所有对象无论距离如何都显示在相同的比例上。'
- en: '**Field of View**: Available in **Perspective** mode, this determines the width
    of the camera’s view. A wider field of view captures more of the scene, while
    a narrower field of view zooms in closer.'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视野范围**：在**透视**模式下可用，这决定了相机的视野宽度。较宽的视野范围可以捕捉到更多的场景，而较窄的视野范围则可以更近地放大场景。'
- en: '**Clipping planes**: The **Near** and **Far** clipping planes determine the
    closest and furthest distances from the camera at which objects are rendered.
    Objects outside this range are not displayed, impacting performance and visibility.'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**裁剪平面**：**近裁剪平面**和**远裁剪平面**决定了对象渲染的最近和最远距离。超出此范围的对象不会被显示，这会影响性能和可见性。'
- en: '**Depth**: Determines the rendering order of multiple cameras. Cameras with
    higher depth values draw on top, which is useful for creating UI overlays or special
    effects.'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**深度**：决定了多个相机的渲染顺序。深度值较高的相机会在顶部绘制，这对于创建UI叠加层或特殊效果很有用。'
- en: '**Clear flags**: Defines what is shown when no objects are rendered in the
    camera’s view. Options include **Skybox**, **Solid Color**, and **Don’t Clear**,
    each affecting the background appearance in the **Game** view.'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**清除标志**：定义了在相机视图中没有渲染任何对象时显示的内容。选项包括**天空盒**、**纯色**和**不清除**，每个选项都会影响**游戏**视图中背景的外观。'
- en: Manipulating these options for both **Directional Light** and **Main Camera**
    allows developers to fine-tune the visual experience of their game. Adjusting
    light settings can dramatically change the scene’s ambiance, while camera settings
    directly influence how players perceive and interact with the game world. Understanding
    and leveraging these options is key to crafting engaging and visually compelling
    Unity projects.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 通过操作**方向光**和**主相机**的这些选项，开发者可以微调他们游戏中的视觉体验。调整光照设置可以显著改变场景的氛围，而相机设置则直接影响玩家对游戏世界的感知和交互。理解和利用这些选项是制作引人入胜且视觉上吸引人的Unity项目的关键。
- en: Summary
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter has equipped you with the essential skills and knowledge to embark
    on your Unity game development journey. Starting with the basics of setting up
    a new project, you learned how to navigate Unity’s comprehensive interface and
    harness its powerful features to create and manage game assets efficiently. The
    exploration of GameObject manipulation unveiled how you can give life to your
    game environment, providing you with the tools to adjust and refine objects to
    fit your creative vision.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 本章为你提供了开始Unity游戏开发之旅所必需的技能和知识。从设置新项目的基础开始，你学习了如何导航Unity的综合界面并利用其强大的功能高效地创建和管理游戏资源。对GameObject操作的探索揭示了如何让你的游戏环境充满活力，为你提供了调整和细化对象以适应你的创意愿景的工具。
- en: The process of assembling your first scene has brought these concepts together,
    demonstrating the significant impact of lighting and camera positioning on the
    player’s experience. This chapter has set a solid foundation, preparing you to
    delve into more advanced topics and challenges in Unity. With this groundwork,
    you’re well on your way to transforming your ideas into engaging, interactive
    game experiences, ready to explore the endless possibilities that Unity offers
    to developers.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 组装你的第一个场景的过程将这些概念结合在一起，展示了光照和相机定位对玩家体验的重大影响。本章为你打下了坚实的基础，准备你深入探索Unity中更高级的主题和挑战。有了这个基础，你正走在将你的想法转化为引人入胜、互动游戏体验的道路上，准备探索Unity为开发者提供的无限可能性。
- en: In the next chapter, we’ll dive into the core principles of C# programming tailored
    for Unity developers. The next chapter serves as a cornerstone for those looking
    to strengthen their foundation in C# syntax and its practical application within
    the Unity engine. From grasping the intricacies of various data types to the strategic
    use of variables, you will gain the skills needed to manipulate game flow and
    enhance interactivity through loops and conditional structures. The journey will
    continue with an exploration into the art of function creation, fostering a modular
    and maintainable coding approach. Furthermore, you’ll learn about fundamental
    debugging techniques, something that’s pivotal for troubleshooting common script-related
    challenges, thus paving the way for a more efficient and seamless game development
    process.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨专为Unity开发者定制的C#编程核心原则。下一章对于那些希望加强C#语法及其在Unity引擎中实际应用基础的人来说，是一个基石。从掌握各种数据类型的复杂性到变量的战略使用，你将获得操纵游戏流程和通过循环和条件结构增强交互性的技能。旅程将继续探索函数创作的艺术，培养模块化和可维护的编码方法。此外，你还将学习基本的调试技术，这对于解决常见的脚本相关挑战至关重要，从而为更高效、更流畅的游戏开发过程铺平道路。
- en: In the upcoming chapter, we’ll transition from foundational concepts to hands-on
    C# programming in Unity, covering syntax, game flow control, functions, and debugging,
    equipping you with practical skills for dynamic game development.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在即将到来的章节中，我们将从基础概念过渡到Unity中的实战C#编程，涵盖语法、游戏流程控制、函数和调试等内容，为你提供动态游戏开发所需的实用技能。
- en: Join our community on Discord
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的Discord社区
- en: 'Join our community’s Discord space for discussions with the authors and other
    readers: [https://packt.link/gamedevelopment](https://discord.com/invite/NnJesrUJbu?link_from_packtlink=yes)'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们的社区Discord空间，与作者和其他读者进行讨论：[https://packt.link/gamedevelopment](https://discord.com/invite/NnJesrUJbu?link_from_packtlink=yes)
- en: '![](img/Disclaimer_QR1.jpg)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Disclaimer_QR1.jpg)'
