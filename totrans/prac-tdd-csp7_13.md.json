["```cs\nTake a guess: AAAA\n---+\nTake a guess: BBBA\n-+-+\nTake a guess: CBCA\n++\nTake a guess: DBDA\n++-+\n```", "```cs\nTake a guess: DBEA\n++++\nCongratulations you guessed the password in 5 tries.\nPress any key to quit.\n```", "```cs\nclass Program\n{\n  static void Main(string[] args)\n  {\n    char[] g;\n    char[] p = new[] { 'A', 'A', 'A', 'A' };\n    int i = 0;\n    int j = 0;\n    int x = 0;\n    int c = 0;\n    Random rand = new Random(DateTime.Now.Millisecond);\n    if (args.Length > 0 && args[0] != null) p = args[0].ToCharArray();\n    else goto randomize_password;\n    guess: Console.Write(\"Take a guess: \");\n    g = Console.ReadLine().ToArray();\n    i = i + 1;\n    if (g.Length != 4) goto wrong_size;\n    if (g == p) goto success;\n    x = 0;\n    c = 0;\n    check_loop:\n    if (g[x] > 65 + 26) g[x] = (char)(g[x] - 32);\n    if (g[x] == p[x]) Console.Write(\"+\", c = c + 1);\n    else if (p.Contains(g[x])) Console.Write(\"-\");\n    x = x + 1;\n    if (x < 4) goto check_loop;\n    Console.WriteLine();\n    if (c == 4) goto success;\n    goto guess;\n    success: Console.WriteLine(\"Congratulations you guessed the   \n    password in \" + i + \" tries.\");\n    goto end;\n    wrong_size: Console.WriteLine(\"Password length is 4.\");\n    goto guess;\n    randomize_password: j = 0;\n    password_loop: p[j] = (char)(rand.Next(6) + 65);\n    j = j + 1;\n    if (j < 4) goto password_loop;\n    goto guess;\n    end: Console.WriteLine(\"Press any key to quit.\");\n    Console.ReadKey();\n  }\n}\n```", "```cs\nclass Program\n{\n  static void Main(string[] args)\n  {\n    var game = new Mastermind();\n    game.Play(args);\n  }\n}\n```", "```cs\nclass Mastermind\n{\n  public void Play(string[] args)\n  {\n    char[] g;\n    char[] p = new[] { 'A', 'A', 'A', 'A' };\n    int i = 0;\n    int j = 0;\n    int x = 0;\n    int c = 0;\n    Random rand = new Random(DateTime.Now.Millisecond);\n    if (args.Length > 0 && args[0] != null) p = args[0].ToCharArray();\n    else goto randomize_password;\n    guess: Console.Write(\"Take a guess: \");\n    g = Console.ReadLine().ToArray();\n    i = i + 1;\n    if (g.Length != 4) goto wrong_size;\n    if (g == p) goto success;\n    x = 0;\n    c = 0;\n    check_loop:\n    if (g[x] > 65 + 26) g[x] = (char)(g[x] - 32);\n    if (g[x] == p[x]) Console.Write(\"+\", c = c + 1);\n    else if (p.Contains(g[x])) Console.Write(\"-\");\n    x = x + 1;\n    if (x < 4) goto check_loop;\n    Console.WriteLine();\n    if (c == 4) goto success;\n    goto guess;\n    success: Console.WriteLine(\"Congratulations you guessed the \n    password in \" + i + \" tries.\");\n    goto end;\n    wrong_size: Console.WriteLine(\"Password length is 4.\");\n    goto guess;\n    randomize_password: j = 0;\n    password_loop: p[j] = (char)(rand.Next(6) + 65);\n    j = j + 1;\n    if (j < 4) goto password_loop;\n    goto guess;\n    end: Console.WriteLine(\"Press any key to quit.\");\n    Console.ReadKey();\n  }\n}\n```", "```cs\nclass Mastermind\n{\n  public void Play(string[] args)\n  {\n    // Variable Declarations - Global??\n    char[] g;\n    char[] p = new[] { 'A', 'A', 'A', 'A' };\n    int i = 0;\n    int j = 0;\n    int x = 0;\n    int c = 0;\n    // Initialize randomness\n    Random rand = new Random(DateTime.Now.Millisecond);\n    // Determine if a password was passed in?\n    if (args.Length > 0 && args[0] != null) p = args[0].ToCharArray();\n    else goto randomize_password; // Create a password if one was not \n    provided\n    // Player move - guess the password\n    guess: Console.Write(\"Take a guess: \");\n    g = Console.ReadLine().ToArray();\n    i = i + 1;\n    if (g.Length != 4) goto wrong_size;\n    if (g == p) goto success;\n    x = 0;\n    c = 0;\n    // Check if the password provided by the player is correct\n    check_loop:\n    if (g[x] > 65 + 26) g[x] = (char)(g[x] - 32);\n    if (g[x] == p[x]) Console.Write(\"+\", c = c + 1);\n    else if (p.Contains(g[x])) Console.Write(\"-\");\n    x = x + 1;\n    if (x < 4) goto check_loop; // Still checking??\n    Console.WriteLine();\n    if (c == 4) goto success; // Password must have been correct\n    goto guess; // No correct, try again\n    // Game over you win\n    success: Console.WriteLine(\"Congratulations you guessed the \n    password in \" + i + \" tries.\");\n    goto end;\n    // Password guess was wrong size - Error Message\n    wrong_size: Console.WriteLine(\"Password length is 4.\");\n    goto guess;\n    // Create a random password\n    randomize_password: j = 0;\n    password_loop: p[j] = (char)(rand.Next(6) + 65);\n    j = j + 1;\n    if (j < 4) goto password_loop;\n    goto guess; // Start the game\n    // Game is complete - exit\n    end: Console.WriteLine(\"Press any key to quit.\");\n    Console.ReadKey();\n  }\n}\n```", "```cs\npublic class InputOutputTests\n{\n  [Fact]\n  public void ItExists()\n  {\n    var inout = new MockInputOutput();\n  }\n}\n```", "```cs\npublic class ReadLineTests\n{\n  [Fact]\n  public void ItCanBeReadFrom()\n  {\n    var inout = new MockInputOutput();\n    inout.InFeed.Enqueue(\"Test\");\n\n    // Act\n    var input = inout.ReadLine();\n  }\n\n  [Fact]\n  public void ProvidedInputCanBeRetrieved()\n  {\n    // Arrange\n    var inout = new MockInputOutput();\n    inout.InFeed.Enqueue(\"Test\");\n\n    // Act\n    var input = inout.ReadLine();\n\n    // Assert\n    Assert.Equal(\"Test\", input);\n  }\n\n  [Fact]\n  public void ProvidedInputCanBeRetrievedInSuccession()\n  {\n    // Arrange\n    var inout = new MockInputOutput();\n    inout.InFeed.Enqueue(\"Test 1\");\n    inout.InFeed.Enqueue(\"Test 2\");\n\n    // Act\n    var input1 = inout.ReadLine();\n    var input2 = inout.ReadLine();\n\n    // Assert\n    Assert.Equal(\"Test 1\", input1);\n    Assert.Equal(\"Test 2\", input2);\n  }\n}\n```", "```cs\npublic class ReadTests\n{\n  [Fact]\n  public void ItCanBeReadFrom() \n  {\n    var inout = new MockInputOutput();\n    inout.InFeed.Enqueue(\"T\");\n\n    // Act\n    var input = inout.Read();\n  }\n\n  [Fact]\n  public void ProvidedInputCanBeRetrieved()\n  {\n    // Arrange\n    var inout = new MockInputOutput();\n    inout.InFeed.Enqueue(\"T\");\n\n    // Act\n    var input = inout.Read();\n\n    // Assert\n    Assert.Equal('T', input);\n  }\n\n  [Fact]\n  public void ProvidedInputCanBeRetrievedInSuccession()\n  {\n    // Arrange\n    var inout = new MockInputOutput();\n    inout.InFeed.Enqueue(\"T\");\n    inout.InFeed.Enqueue(\"E\");\n\n    // Act\n    var input1 = inout.Read();\n    var input2 = inout.Read();\n\n    // Assert\n    Assert.Equal('T', input1);\n    Assert.Equal('E', input2);\n  }\n}\n```", "```cs\npublic class WriteTests\n{\n  [Fact]\n  public void ItCanBeWrittenTo()\n  {\n    var inout = new MockInputOutput();\n\n    // Act\n    inout.Write(\"Text\");\n  }\n\n  [Fact]\n  public void WrittenTextCanBeRetrieved()\n  {\n    // Arrange\n    var inout = new MockInputOutput();\n    inout.Write(\"Text\");\n\n    // Act    \n    var writtenText = inout.OutFeed;\n\n    // Assert\n    Assert.Single(writtenText);\n    Assert.Equal(\"Text\", writtenText.First());\n  }\n}\n```", "```cs\npublic class WriteLineTests\n{\n  [Fact]\n  public void ItCanBeWrittenTo()\n  {\n    var inout = new MockInputOutput();\n\n    // Act\n    inout.WriteLine(\"Text\");\n  }\n\n  [Fact]\n  public void WrittenTextCanBeRetrieved()\n  {\n    // Arrange\n    var inout = new MockInputOutput();\n    inout.WriteLine(\"Text\");\n\n    // Act\n    var writtenText = inout.OutFeed;\n\n    // Assert\n    Assert.Single(writtenText);\n    Assert.Equal(\"Text\" + Environment.NewLine, writtenText.First());\n  }\n}\n```", "```cs\npublic interface IInputOutput\n{\n  void Write(string text);\n  void WriteLine(string text);\n  char Read();\n  string ReadLine();\n}\n```", "```cs\npublic class MockInputOutput : IInputOutput\n{\n  public List<string> OutFeed { get; set; }\n  public Queue<string> InFeed { get; set; }\n\n  public MockInputOutput()\n  {\n    OutFeed = new List<string>();\n    InFeed = new Queue<string>();\n  }\n\n  public void Write(string text)\n  {\n    OutFeed.Add(text);\n  }\n\n  public void WriteLine(string text)\n  {\n    OutFeed.Add(text + Environment.NewLine);\n  }\n\n  public char Read()\n  {\n    return InFeed.Dequeue().ToCharArray().First();\n  }\n\n  public string ReadLine()\n  {\n    return InFeed.Dequeue();\n  }\n}\n```", "```cs\nConsole.Write(\"+\", c = c + 1);\n```", "```cs\nConsole.WriteLine();\n```", "```cs\n[Fact]\npublic void ItCanWriteABlankLine()\n{\n  // Arrange\n  var inout = new MockInputOutput();\n\n  // Act\n  inout.WriteLine();\n\n  // Assert\n  Assert.Single(inout.OutFeed);\n  Assert.Equal(Environment.NewLine, inout.OutFeed.First());\n}\n```", "```cs\nvoid WriteLine(string text = null);\n```", "```cs\npublic void WriteLine(string text = null)\n{\n  OutFeed.Add((text ?? \"\") + Environment.NewLine);\n}\n```", "```cs\nvoid Write(string text, params object[] args);\n```", "```cs\npublic void Write(string text, params object[] args)\n{\n  OutFeed.Add(text);\n}\n```", "```cs\npublic class ConsoleInputOutput : IInputOutput\n{\n  public void Write(string text, params object[] args)\n  {\n    Console.Write(text, args);\n  }\n\n  public void WriteLine(string text)\n  {\n    Console.WriteLine(text);\n  }\n\n  public char Read()\n  {\n    return Console.ReadKey().KeyChar;\n  }\n\n  public string ReadLine()\n  {\n    return Console.ReadLine();\n  }\n}\n```", "```cs\nclass Program\n{\n  static void Main(string[] args)\n  {\n    var inout = new ConsoleInputOutput();\n    var game = new Mastermind(inout);\n    game.Play(args);\n  }\n}\n```", "```cs\npublic class Mastermind\n{\n  private readonly IInputOutput _inout;\n\n  public Mastermind(IInputOutput inout)\n  {\n    _inout = inout;\n  }\n\n  public void Play(string[] args)\n  {\n    // Variable Declarations - Global??\n    char[] g;\n    char[] p = new[] { 'A', 'A', 'A', 'A' };\n    int i = 0;\n    int j = 0;\n    int x = 0;\n    int c = 0;\n\n    // Initialize randomness\n    Random rand = new Random(DateTime.Now.Millisecond);\n\n    // Determine if a password was passed in?\n    if (args.Length > 0 && args[0] != null) p = args[0].ToCharArray();\n    else goto randomize_password; // Create a password if one was not \n    provided\n    // Player move - guess the password\n    guess: _inout.Write(\"Take a guess: \");\n    g = _inout.ReadLine().ToArray();\n    i = i + 1;\n    if (g.Length != 4) goto wrong_size;\n    if (g == p) goto success;\n    x = 0;\n    c = 0;\n\n    // Check if the password provided by the player is correct\n    check_loop:\n    if (g[x] > 65 + 26) g[x] = (char)(g[x] - 32);\n    if (g[x] == p[x]) _inout.Write(\"+\", c = c + 1);\n    else if (p.Contains(g[x])) _inout.Write(\"-\");\n    x = x + 1;\n    if (x < 4) goto check_loop; // Still checking??\n    _inout.WriteLine();\n    if (c == 4) goto success; // Password must have been correct\n    goto guess; // No correct, try again\n\n    // Game over you win\n    success: _inout.WriteLine(\"Congratulations you guessed the password \n    in \" + i + \" tries.\");\n    goto end;\n    // Password guess was wrong size - Error Message\n    wrong_size: _inout.WriteLine(\"Password length is 4.\");\n    goto guess;\n\n    // Create a random password\n    randomize_password: j = 0;\n    password_loop: p[j] = (char)(rand.Next(6) + 65);\n    j = j + 1;\n    if (j < 4) goto password_loop;\n    goto guess; // Start the game\n\n    // Game is complete - exit\n    end: _inout.WriteLine(\"Press any key to quit.\");\n    _inout.Read();\n  }\n}\n```", "```cs\nTake a guess: AAAA\nTake a guess: BBBB\nTake a guess: CCCC\nTake a guess: DDDD\n+-++\nTake a guess: DEDD\n+++\nTake a guess: DFDD\n++++\nCongratulations you guessed the password in 6 tries.\n\nPress any key to quit.\n```", "```cs\npublic class GoldStandardTests\n{\n  [Fact]\n  public void StandardTestRun()\n  {\n    // Arrange\n    var inout = new MockInputOutput();\n    var game = new Mastermind(inout);\n\n    // Arrange - Inputs\n    inout.InFeed.Enqueue(\"AAA\");\n    inout.InFeed.Enqueue(\"AAAA\");\n    inout.InFeed.Enqueue(\"ABBB\");\n    inout.InFeed.Enqueue(\"ABCC\");\n    inout.InFeed.Enqueue(\"ABCD\");\n    inout.InFeed.Enqueue(\"ABCF\");\n    inout.InFeed.Enqueue(\" \");\n\n    // Arrange - Outputs\n    var expectedOutputs = new Queue<string>();\n    expectedOutputs.Enqueue(\"Take a guess: \");\n    expectedOutputs.Enqueue(\"Password length is 4.\" + \n     Environment.NewLine);\n    expectedOutputs.Enqueue(\"Take a guess: \");\n    expectedOutputs.Enqueue(\"+\");\n    expectedOutputs.Enqueue(\"-\");\n    expectedOutputs.Enqueue(\"-\");\n    expectedOutputs.Enqueue(\"-\");\n    expectedOutputs.Enqueue(Environment.NewLine);\n    expectedOutputs.Enqueue(\"Take a guess: \");\n    expectedOutputs.Enqueue(\"+\");\n    expectedOutputs.Enqueue(\"+\");\n    expectedOutputs.Enqueue(\"-\");\n    expectedOutputs.Enqueue(\"-\");\n    expectedOutputs.Enqueue(Environment.NewLine);\n    expectedOutputs.Enqueue(\"Take a guess: \");\n    expectedOutputs.Enqueue(\"+\");\n    expectedOutputs.Enqueue(\"+\");\n    expectedOutputs.Enqueue(\"+\");\n    expectedOutputs.Enqueue(\"-\");\n    expectedOutputs.Enqueue(Environment.NewLine);\n    expectedOutputs.Enqueue(\"Take a guess: \");\n    expectedOutputs.Enqueue(\"+\");\n    expectedOutputs.Enqueue(\"+\");\n    expectedOutputs.Enqueue(\"+\");\n    expectedOutputs.Enqueue(Environment.NewLine);\n    expectedOutputs.Enqueue(\"Take a guess: \");\n    expectedOutputs.Enqueue(\"+\");\n    expectedOutputs.Enqueue(\"+\");\n    expectedOutputs.Enqueue(\"+\");\n    expectedOutputs.Enqueue(\"+\");\n    expectedOutputs.Enqueue(Environment.NewLine);\n    expectedOutputs.Enqueue(\"Congratulations you guessed the password \n     in 6 tries.\" + Environment.NewLine);\n    expectedOutputs.Enqueue(\"Press any key to quit.\" + \n     Environment.NewLine);\n    // Act\n    game.Play(new[] { \"ABCF\" });\n\n    // Assert\n    inout.OutFeed.ForEach((text) =>\n    {    \n      Assert.Equal(expectedOutputs.Dequeue(), text);\n    });\n  }\n}\n```", "```cs\nprivate char[] g;\nprivate char[] p = new[] { 'A', 'A', 'A', 'A' };\nprivate int i = 0;\nprivate int j = 0;\nprivate int x = 0;\nprivate int c = 0;\n```", "```cs\npublic class Mastermind\n{\n  private readonly IInputOutput _inout;\n  private char[] g;\n  private char[] p = new[] { 'A', 'A', 'A', 'A' };\n  private int i = 0;\n  private int j = 0;\n  private int x = 0;\n  private int c = 0;\n\n  public Mastermind(IInputOutput inout)\n  {\n    _inout = inout;\n  }\n\n  public void Play(string[] args)\n  {\n    // Determine if a password was passed in?\n    if (args.Length > 0 && args[0] != null) p = args[0].ToCharArray();\n    else CreateRandomPassword(); // Create a password if one was not \n    provided\n    // Player move - guess the password\n    guess:\n    _inout.Write(\"Take a guess: \");\n    g = _inout.ReadLine().ToArray();\n    i = i + 1;\n    if (g.Length != 4) goto wrong_size;\n    if (g == p) goto success;\n    x = 0;\n    c = 0;\n\n    // Check if the password provided by the player is correct\n    check_loop:\n    if (g[x] > 65 + 26) g[x] = (char)(g[x] - 32);\n    if (g[x] == p[x]) _inout.Write(\"+\", c = c + 1);\n    else if (p.Contains(g[x])) _inout.Write(\"-\");\n    x = x + 1;\n    if (x < 4) goto check_loop; // Still checking??\n    _inout.WriteLine();\n    if (c == 4) goto success; // Password must have been correct\n    goto guess; // No correct, try again\n\n    // Password guess was wrong size - Error Message\n    wrong_size: _inout.WriteLine(\"Password length is 4.\");\n    goto guess;\n\n    // Game over you win\n    success: _inout.WriteLine(\"Congratulations you guessed the password \n     in \" + i + \" tries.\");\n    _inout.WriteLine(\"Press any key to quit.\");\n    _inout.Read();\n  }\n  private void CreateRandomPassword()\n  {\n    // Initialize randomness\n    Random rand = new Random(DateTime.Now.Millisecond);\n\n    j = 0;\n\n    password_loop:\n    p[j] = (char)(rand.Next(6) + 65);\n    j = j + 1;   \n    if (j < 4) goto password_loop;\n  }\n}\n```", "```cs\npublic void Play(string[] args)\n{\n  // Determine if a password was passed in?\n  if (args.Length > 0 && args[0] != null) p = args[0].ToCharArray();\n  else CreateRandomPassword(); // Create a password if one was not \n   provided\n  // Player move - guess the password           \n  while (c != 4)\n  {\n    _inout.Write(\"Take a guess: \");\n    g = _inout.ReadLine().ToArray();\n\n    i = i + 1;\n\n    if (g.Length != 4)\n    {\n      // Password guess was wrong size - Error Message\n      _inout.WriteLine(\"Password length is 4.\");\n    }\n    else\n    {\n      // Check if the password provided by the player is correct\n      for (x = 0, c = 0; g.Length == 4 && x < 4; x++)\n      {\n        if (g[x] > 65 + 26) g[x] = (char)(g[x] - 32);\n        if (g[x] == p[x]) _inout.Write(\"+\", c = c + 1);\n        else if (p.Contains(g[x])) _inout.Write(\"-\");\n      }\n\n      _inout.WriteLine();\n    }\n  }           \n\n  // Game over you win\n  _inout.WriteLine(\"Congratulations you guessed the password in \" + i +   \n  \" tries.\");\n  _inout.WriteLine(\"Press any key to quit.\");\n  _inout.Read();\n}\n```", "```cs\nC ~= Correct Letter Guesses\nG ~= Current Guess\nP ~= Password\nI ~= Tries\nX ~= Loop Index / Pointer to Guess Character being checked\nJ ~= Loop Index / Pointer to Password Character being generated\n```", "```cs\npublic void Play(string[] args)\n{\n  // Determine if a password was passed in?\n  if (args.Length > 0 && args[0] != null) password =   \n   args[0].ToCharArray();\n  else CreateRandomPassword(); // Create a password if one was not \n   provided\n  // Player move - guess the password           \n  while (correctPositions != 4)\n  {\n    _inout.Write(\"Take a guess: \");\n    guess = _inout.ReadLine().ToArray();\n\n    tries = tries + 1;\n\n    if (guess.Length != 4)\n    {\n      // Password guess was wrong size - Error Message\n      _inout.WriteLine(\"Password length is 4.\");\n    }\n    else\n    {\n      // Check if the password provided by the player is correct\n      for (x = 0, correctPositions = 0; x < 4; x++)\n      {\n        if (guess[x] > 65 + 26) guess[x] = (char)(guess[x] - 32);\n        if (guess[x] == password[x]) _inout.Write(\"+\", correctPositions \n          = correctPositions + 1);\n        else if (password.Contains(guess[x])) _inout.Write(\"-\");\n      }\n      _inout.WriteLine();\n    }\n  }           \n  // Game over you win\n  _inout.WriteLine(\"Congratulations you guessed the password in \" + \n   tries + \" tries.\");\n  _inout.WriteLine(\"Press any key to quit.\");\n  _inout.Read();\n}\n```", "```cs\nif (guess[x] > 65 + 26) guess[x] = (char)(guess[x] - 32);\n```", "```cs\nclass Program\n{\n  static void Main(string[] args)\n  {\n    var inout = new ConsoleInputOutput();\n    var game = new Mastermind(inout);\n\n    var password = args.Length > 0 ? args[0] : null;\n    game.Play(password);\n\n    inout.WriteLine(\"Press any key to quit.\");\n    inout.Read();\n  }\n}\n```", "```cs\npublic class Mastermind\n{\n  private readonly IInputOutput _inout;\n  private string guess;\n  private int tries;\n  private int correctPositions;\n\n  public Mastermind(IInputOutput inout)\n  {\n    _inout = inout;\n  }\n\n  public void Play(string password = null)\n  {\n    // Determine if a password was passed in?\n    password = password ?? CreateRandomPassword();           \n\n    // Player move - guess the password           \n    while (correctPositions != 4)\n    {\n      _inout.Write(\"Take a guess: \");\n      guess = _inout.ReadLine();\n      tries = tries + 1;\n\n      if (guess.Length != 4)\n      {\n        // Password guess was wrong size - Error Message\n        _inout.WriteLine(\"Password length is 4.\");\n      }\n      else\n      {\n        // Check if the password provided by the player is correct\n        guess = guess.ToUpper();\n        var guessResult = \"\";\n\n        for (var x = 0; x < 4; x++)\n        {\n          if (guess[x] == password[x])\n          {                            \n            guessResult += \"+\";\n          }\n          else if (password.Contains(guess[x]))\n          {\n            guessResult += \"-\";\n          }\n        }\n\n        correctPositions = guessResult.Count(c => c == '+');\n        _inout.WriteLine(guessResult);\n      }\n    }\n\n    // Game over you win\n    _inout.WriteLine(\"Congratulations you guessed the password in \" + \n     tries + \" tries.\");           \n  }\n\n  private string CreateRandomPassword()\n  {\n    // Initialize randomness\n    Random rand = new Random(DateTime.Now.Millisecond);\n\n    var password = new [] {'A', 'A', 'A', 'A'};\n\n    var j = 0;\n\n    password_loop:\n    password[j] = (char)(rand.Next(6) + 65);\n    j = j + 1;\n\n    if (j < 4) goto password_loop;\n    return password.ToString();\n  }\n}\n```", "```cs\npublic class GoldStandardTests\n{\n  [Fact]\n  public void StandardTestRun()\n  {\n    // Arrange\n    var inout = new MockInputOutput();\n    var game = new Mastermind(inout);\n\n    // Arrange - Inputs\n    inout.InFeed.Enqueue(\"AAA\");\n    inout.InFeed.Enqueue(\"AAAA\");\n    inout.InFeed.Enqueue(\"ABBB\");\n    inout.InFeed.Enqueue(\"ABCC\");\n    inout.InFeed.Enqueue(\"ABCD\");\n    inout.InFeed.Enqueue(\"ABCF\");\n    inout.InFeed.Enqueue(\" \");\n\n    // Arrange - Outputs\n    var expectedOutputs = new Queue<string>();\n    expectedOutputs.Enqueue(\"Take a guess: \");\n    expectedOutputs.Enqueue(\"Password length is 4.\" + \n    Environment.NewLine);\n    expectedOutputs.Enqueue(\"Take a guess: \");\n    expectedOutputs.Enqueue(\"+---\" + Environment.NewLine);\n    expectedOutputs.Enqueue(\"Take a guess: \");\n    expectedOutputs.Enqueue(\"++--\" + Environment.NewLine);\n    expectedOutputs.Enqueue(\"Take a guess: \");\n    expectedOutputs.Enqueue(\"+++-\" + Environment.NewLine);\n    expectedOutputs.Enqueue(\"Take a guess: \");\n    expectedOutputs.Enqueue(\"+++\" + Environment.NewLine);\n    expectedOutputs.Enqueue(\"Take a guess: \");\n    expectedOutputs.Enqueue(\"++++\" + Environment.NewLine);\n    expectedOutputs.Enqueue(\"Congratulations you guessed the password \n    in 6 tries.\" + Environment.NewLine);\n\n    // Act\n    game.Play(\"ABCF\");\n\n    // Assert\n    inout.OutFeed.ForEach(text =>\n    {\n      Assert.Equal(expectedOutputs.Dequeue(), text);\n    });\n  }\n}\n```", "```cs\npublic class Mastermind\n{\n  private readonly IInputOutput _inout;\n  private int _tries;\n\n  public Mastermind(IInputOutput inout)\n  {\n    _inout = inout;\n  }\n\n  public void Play(string password = null)\n  {\n    password = password ?? CreateRandomPassword();\n    var correctPositions = 0;\n\n    while (correctPositions != 4)\n    {\n      correctPositions = GuessPasswordAndCheck(password);\n    }\n\n    _inout.WriteLine(\"Congratulations you guessed the password in \" + \n    _tries + \" tries.\");\n  }\n\n  private int GuessPasswordAndCheck(string password)\n  {\n    var guess = Guess();                        \n    return Check(guess, password);\n  }\n\n  private int Check(string guess, string password)\n  {\n    var checkResult = \"\";\n\n    for (var x = 0; x < 4; x++)\n    {\n      if (guess[x] == password[x])\n      {\n        checkResult += \"+\";\n      }\n      else if (password.Contains(guess[x]))\n      {\n        checkResult += \"-\";\n      }\n    }\n\n    _inout.WriteLine(checkResult);\n    return checkResult.Count(c => c == '+');\n  }\n\n  private string Guess()\n  {\n    _tries = _tries + 1;\n\n    _inout.Write(\"Take a guess: \");\n    var guess = _inout.ReadLine();\n\n    if (guess.Length == 4)\n    {\n      return guess.ToUpper();\n    }\n\n    // Password guess was wrong size - Error Message\n    _inout.WriteLine(\"Password length is 4.\");\n    return Guess();\n  }\n\n  private string CreateRandomPassword()\n  {\n    // Initialize randomness\n    Random rand = new Random(DateTime.Now.Millisecond);\n\n    var password = new[] { 'A', 'A', 'A', 'A' };\n\n    var j = 0;\n\n    password_loop:\n    password[j] = (char)(rand.Next(6) + 65);\n    j = j + 1;\n\n    if (j < 4) goto password_loop;\n\n    return password.ToString();\n  }\n}\n```", "```cs\npublic class RandomNumberTests\n{\n  private readonly MockRandomGenerator _rand;\n\n  public RandomNumberTests()\n  {\n    _rand = new MockRandomGenerator();\n  }\n\n  [Fact]\n  public void ItExists()\n  {\n    _rand.Number();\n  }\n\n  [Fact]\n  public void ItReturnsDefaultValue()\n  {\n    // Act\n    var result = _rand.Number();\n\n    // Assert\n    Assert.Equal(0, result);\n  }\n\n  [Fact]\n  public void ItCanReturnPredeterminedNumbers()\n  {\n    // Arrange\n    _rand.SetNumbers(1, 2, 3, 4, 5);\n\n    // Act\n    var a = _rand.Number();\n    var b = _rand.Number();\n    var c = _rand.Number();\n    var d = _rand.Number();\n    var e = _rand.Number();\n\n    // Arrange\n    Assert.Equal(1, a);\n    Assert.Equal(2, b);\n    Assert.Equal(3, c);\n    Assert.Equal(4, d);\n    Assert.Equal(5, e);\n  }\n\n  [Fact]\n  public void ItCanHaveAMaxRange()\n  {\n    // Arrange\n    const int maxRange = 3;\n    _rand.SetNumbers(1, 2, 3, 4, 5);\n\n    // Act\n    var a = _rand.Number(maxRange);\n    var b = _rand.Number(maxRange);\n    var c = _rand.Number(maxRange);\n    var d = _rand.Number(maxRange);\n    var e = _rand.Number(maxRange);\n\n    // Arrange\n    Assert.Equal(1, a);\n    Assert.Equal(2, b);\n    Assert.Equal(3, c);\n    Assert.Equal(3, d);\n    Assert.Equal(3, e);\n  }\n\n  [Fact]\n  public void ItCanHaveAMinMaxRange()\n  {\n    // Arrange\n    const int minRange = 2;\n    const int maxRange = 3;\n    _rand.SetNumbers(1, 2, 3, 4, 5);\n\n    // Act\n    var a = _rand.Number(minRange, maxRange);\n    var b = _rand.Number(minRange, maxRange);\n    var c = _rand.Number(minRange, maxRange);\n    var d = _rand.Number(minRange, maxRange);\n    var e = _rand.Number(minRange, maxRange);\n\n    // Arrange\n    Assert.Equal(2, a);\n    Assert.Equal(2, b);\n    Assert.Equal(3, c);\n    Assert.Equal(3, d);\n    Assert.Equal(3, e);\n  }\n}\n```", "```cs\npublic interface IRandomGenerator\n{\n  int Number(int max = 100);\n  int Number(int min, int max);\n}\n```", "```cs\npublic class MockRandomGenerator : IRandomGenerator\n{\n  private readonly List<int> _numbers;\n  private List<int>.Enumerator _numbersEnumerator;\n\n  public MockRandomGenerator(List<int> numbers = null)\n  {\n    _numbers = numbers ?? new List<int>();\n    _numbersEnumerator = _numbers.GetEnumerator();\n  }\n\n  public int Number(int min, int max)\n  {\n    var result = Number(max);\n\n    return result < min ? min : result;\n  }\n\n  public int Number(int max = 100)\n  {\n    _numbersEnumerator.MoveNext();\n    var result = _numbersEnumerator.Current;\n\n    return result > max ? max : result;\n  }\n\n  public void SetNumbers(params int[] args)\n  {\n    _numbers.AddRange(args);\n    _numbersEnumerator = _numbers.GetEnumerator();\n  }\n}\n```", "```cs\npublic class RandomGenerator : IRandomGenerator\n{\n  private readonly Random _rand;\n\n  public RandomGenerator()\n  {\n    _rand = new Random();\n  }\n\n  public int Number(int max = 100)\n  {\n    return _rand.Next(0, max);\n  }\n\n  public int Number(int min, int max)\n  {\n    return _rand.Next(min, max);\n  }\n}\n```", "```cs\nclass Program\n{\n  static void Main(string[] args)\n  {\n    var rand = new RandomGenerator();\n    var inout = new ConsoleInputOutput();\n    var game = new Mastermind(inout, rand);\n\n    var password = args.Length > 0 ? args[0] : null;\n    game.Play(password);\n\n    inout.WriteLine(\"Press any key to quit.\");\n    inout.Read();\n  }\n}\n```", "```cs\npublic class Mastermind\n{\n  private readonly IInputOutput _inout;\n  private readonly IRandomGenerator _random;\n\n  private int _tries;\n\n  public Mastermind(IInputOutput inout, IRandomGenerator random)\n  {\n    _inout = inout;\n    _random = random;\n  }\n\n  public void Play(string password = null)\n  {\n    password = password ?? CreateRandomPassword();\n    var correctPositions = 0;\n\n    while (correctPositions != 4)\n    {\n      correctPositions = GuessPasswordAndCheck(password);\n    }\n\n    _inout.WriteLine(\"Congratulations you guessed the password in \" + \n    _tries + \" tries.\");\n  }\n\n  private int GuessPasswordAndCheck(string password)\n  {\n    var guess = Guess();\n    return Check(guess, password);\n  }\n\n  private int Check(string guess, string password)\n  {\n    var checkResult = \"\";\n\n    for (var x = 0; x < 4; x++)\n    {\n      if (guess[x] == password[x])\n      {\n        checkResult += \"+\";\n      }\n      else if (password.Contains(guess[x]))\n      {\n        checkResult += \"-\";\n      }\n    }\n\n    _inout.WriteLine(checkResult);\n    return checkResult.Count(c => c == '+');\n  }\n\n  private string Guess()\n  {\n    _tries = _tries + 1;\n\n    _inout.Write(\"Take a guess: \");\n    var guess = _inout.ReadLine();\n\n    if (guess.Length == 4)\n    {\n      return guess.ToUpper();\n    }\n\n    // Password guess was wrong size - Error Message\n    _inout.WriteLine(\"Password length is 4.\");\n    return Guess();\n  }\n\n  private string CreateRandomPassword()\n  {\n    var password = new[] { 'A', 'A', 'A', 'A' };\n\n    var j = 0;\n\n    password_loop:\n    password[j] = (char)(_random.Number(6) + 65);\n    j = j + 1;\n\n    if (j < 4) goto password_loop;\n\n    return new string(password);\n  }\n}\n```", "```cs\npublic class GoldStandardTests\n{\n  [Fact]\n  public void StandardTestRun()\n  {\n    // Arrange\n    var inout = new MockInputOutput();\n    var rand = new MockRandomGenerator();\n    var game = new Mastermind(inout, rand);\n\n    // Arrange - Inputs\n    rand.SetNumbers(0, 1, 2, 5);\n    inout.InFeed.Enqueue(\"AAA\");\n    inout.InFeed.Enqueue(\"AAAA\");\n    inout.InFeed.Enqueue(\"ABBB\");\n    inout.InFeed.Enqueue(\"ABCC\");\n    inout.InFeed.Enqueue(\"ABCD\");\n    inout.InFeed.Enqueue(\"ABCF\");\n    inout.InFeed.Enqueue(\" \");\n\n    // Arrange - Outputs\n    var expectedOutputs = new Queue<string>();\n    expectedOutputs.Enqueue(\"Take a guess: \");\n    expectedOutputs.Enqueue(\"Password length is 4.\" + \n    Environment.NewLine);\n    expectedOutputs.Enqueue(\"Take a guess: \");\n    expectedOutputs.Enqueue(\"+---\" + Environment.NewLine);\n    expectedOutputs.Enqueue(\"Take a guess: \");\n    expectedOutputs.Enqueue(\"++--\" + Environment.NewLine);\n    expectedOutputs.Enqueue(\"Take a guess: \");\n    expectedOutputs.Enqueue(\"+++-\" + Environment.NewLine);\n    expectedOutputs.Enqueue(\"Take a guess: \");\n    expectedOutputs.Enqueue(\"+++\" + Environment.NewLine);\n    expectedOutputs.Enqueue(\"Take a guess: \");\n    expectedOutputs.Enqueue(\"++++\" + Environment.NewLine);\n    expectedOutputs.Enqueue(\"Congratulations you guessed the password \n    in 6 tries.\" + Environment.NewLine);\n\n    // Act\n    game.Play();\n\n    // Assert\n    inout.OutFeed.ForEach(text =>\n    {\n      Assert.Equal(expectedOutputs.Dequeue(), text);\n    });\n  }\n}\n```", "```cs\nprivate string CreateRandomPassword()\n{\n  var password = new[] { 'A', 'A', 'A', 'A' };\n\n  for(var j = 0; j < 4; j++)\n  {\n    password[j] = (char)(_random.Number(6) + 65);\n  }\n\n  return new string(password);\n}\n```", "```cs\nprivate int Check(string guess, string password)\n{\n  var checkResult = \"\";\n\n  Times(4, x => {\n    if (guess[x] == password[x])\n    {\n      checkResult += \"+\";\n    }\n    else if (password.Contains(guess[x]))\n    {\n      checkResult += \"-\";\n    }\n  });\n\n  _inout.WriteLine(checkResult);\n  return checkResult.Count(c => c == '+');\n}\n\nprivate string CreateRandomPassword()\n{\n  var password = new[] { 'A', 'A', 'A', 'A' };\n\n  Times(4, x => password[x] = (char)(_random.Number(6) + 65));\n\n  return new string(password);\n}\n\nprivate static void Times(int count, Action<int> act)\n{\n  for (var index = 0; index < count; index++)\n  {\n    act(index);\n  }\n}\n```", "```cs\npublic class RandomLetterTests\n{\n  private readonly MockRandomGenerator _rand;\n\n  public RandomLetterTests()\n  {\n    _rand = new MockRandomGenerator();\n  }\n\n  [Fact]\n  public void ItExists()\n  {\n    _rand.Letter();\n  }\n\n  [Fact]\n  public void ItReturnsDefaultValue()\n  {\n    // Act\n    var result = _rand.Letter();\n\n    // Assert\n    Assert.Equal('A', result);\n  }\n\n  [Fact]\n  public void ItCanReturnPredeterminedLetters()\n  {\n    // Arrange\n    _rand.SetLetters('A', 'B', 'C', 'D', 'E');\n\n    // Act\n    var a = _rand.Letter();\n    var b = _rand.Letter();\n    var c = _rand.Letter();\n    var d = _rand.Letter();\n    var e = _rand.Letter();\n\n    // Assert\n    Assert.Equal('A', a);\n    Assert.Equal('B', b);\n    Assert.Equal('C', c);\n    Assert.Equal('D', d);\n    Assert.Equal('E', e);\n  }\n\n  [Fact]\n  public void ItCanHaveAMaxRange()\n  {\n    // Arrange\n    const char maxRange = 'C';\n    _rand.SetLetters('A', 'B', 'C', 'D', 'E');\n\n    // Act\n    var a = _rand.Letter(maxRange);\n    var b = _rand.Letter(maxRange);\n    var c = _rand.Letter(maxRange);\n    var d = _rand.Letter(maxRange);\n    var e = _rand.Letter(maxRange);\n\n    // Arrange\n    Assert.Equal('A', a);\n    Assert.Equal('B', b);\n    Assert.Equal('C', c);\n    Assert.Equal('C', d);\n    Assert.Equal('C', e);\n  }\n\n  [Fact]\n  public void ItCanHaveAMinMaxRange()\n  {\n    // Arrange\n    const char minRange = 'B';\n    const char maxRange = 'C';\n    _rand.SetLetters('A', 'B', 'C', 'D', 'E');\n\n    // Act\n    var a = _rand.Letter(minRange, maxRange);\n    var b = _rand.Letter(minRange, maxRange);\n    var c = _rand.Letter(minRange, maxRange);\n    var d = _rand.Letter(minRange, maxRange);\n    var e = _rand.Letter(minRange, maxRange);\n\n    // Arrange\n    Assert.Equal('B', a);\n    Assert.Equal('B', b);\n    Assert.Equal('C', c);\n    Assert.Equal('C', d);\n    Assert.Equal('C', e);\n  }\n}\n```", "```cs\npublic class MockRandomGenerator : IRandomGenerator\n{\n  private readonly List<int> _numbers;\n  private List<int>.Enumerator _numbersEnumerator;\n\n  private readonly List<char> _letters;\n  private List<char>.Enumerator _lettersEnumerator;\n\n  private const char NullChar = '\\0';\n\n  public MockRandomGenerator(List<int> numbers = null, List<char> \n  letters = null)\n  {\n    _numbers = numbers ?? new List<int>();\n    _numbersEnumerator = _numbers.GetEnumerator();\n\n    _letters = letters ?? new List<char>();\n    _lettersEnumerator = _letters.GetEnumerator();\n  }\n\n  public int Number(int min, int max)\n  {\n    var result = Number(max);\n\n    return result < min ? min : result;\n  }\n\n  public int Number(int max = 100)\n  {\n    _numbersEnumerator.MoveNext();\n    var result = _numbersEnumerator.Current;\n\n    return result > max ? max : result;\n  }\n\n  public void SetNumbers(params int[] args)\n  {\n    _numbers.AddRange(args);\n    _numbersEnumerator = _numbers.GetEnumerator();\n  }\n\n  public int Letter(char min, char max)\n  {\n    var result = Letter(max);\n\n    return result < min ? min : result;\n  }\n\n  public char Letter(char max = 'Z')\n  {\n    _lettersEnumerator.MoveNext();           \n    var result = _lettersEnumerator.Current;\n    result = result == NullChar ? 'A' : result;\n\n    return result > max ? max : result;\n  }\n\n  public void SetLetters(params char[] args)\n  {\n    _letters.AddRange(args);\n    _lettersEnumerator = _letters.GetEnumerator();\n  }\n}\n```", "```cs\npublic interface IRandomGenerator\n{\n  int Number(int max = 100);\n  int Number(int min, int max);\n  char Letter(char max = 'Z');\n  char Letter(char min, char max);\n}\n```", "```cs\npublic class RandomGenerator : IRandomGenerator\n{\n  private readonly Random _rand;\n\n  public RandomGenerator()\n  {\n    _rand = new Random();\n  }\n\n  public int Number(int max = 100)\n  {\n    return Number(0, max);\n  }\n\n  public int Number(int min, int max)\n  {\n    return _rand.Next(min, max);\n  }\n\n  public char Letter(char max = 'Z')\n  {\n    return Letter('A', max);\n  }\n\n  public char Letter(char min, char max)\n  {\n    return (char) _rand.Next(min, max);\n  }\n}\n```", "```cs\nprivate string CreateRandomPassword()\n{\n  var password = new[] { 'A', 'A', 'A', 'A' };\n\n  Times(4, x => password[x] = _random.Letter('F'));\n\n  return new string(password);\n}\n```", "```cs\n// Arrange - Inputs\nrand.SetLetters('A', 'B', 'C', 'F');\n```", "```cs\nprivate string CreateRandomPassword()\n{\n  var password = new[] { 'A', 'A', 'A', 'A' };\n\n  Times(4, x => password[x] = _random.Letter());\n\n  return new string(password);\n}\n```", "```cs\nTake a guess: AAAA\nTake a guess: BBBB\nTake a guess: CCCC\n---+\nTake a guess: DDDC\n+\nTake a guess: EEEC\n+\nTake a guess: FFFC\n+\nTake a guess: GGGC\n+\nTake a guess: HHHC\n+\nTake a guess: IIIC\n+\nTake a guess: JJJC\n+\nTake a guess: KKKC\n+\nTake a guess: LLLC\n+\nTake a guess: mmmc\n+\nTake a guess: nnnc\n+\nTake a guess: oooc\n+--+\nTake a guess: oppc\n++-+\nTake a guess: opqc\n+++\nTake a guess: oprc\n+++\nTake a guess: opsc\n+++\nTake a guess: optc\n+++\nTake a guess: opuc\n+++\nTake a guess: opvc\n+++\nTake a guess: opwc\n++++\nCongratulations you guessed the password in 23 tries.\n\nPress any key to quit.\n```"]