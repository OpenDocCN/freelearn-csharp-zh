["```cs\ndotnet new mvc -n DiSample -o DiSample\n```", "```cs\ncd DiSample\ncode .\n```", "```cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.Configure<CookiePolicyOptions>(options =>\n    {\n        // This lambda determines whether user\n        // consent for non-essential cookies is\n        // needed for a given request.\n         options.CheckConsentNeeded = context => true;\n    });\n    services.AddControllersWithViews();\n    services.AddRazorPages();\n}\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\n// Add services to the container.\nbuilder.Services.AddControllersWithViews();\nvar app = builder.Build();\n// The rest of the file isn't relevant for this chapter\n```", "```cs\nIServiceProvider provider = services.BuildServiceProvider()\n```", "```cs\n    Autofac is good for this because you are easily able to see what is happening here.\n    ```", "```cs\n    using Autofac;\n    using Autofac.Extensions.DependencyInjection;\n\n    namespace DiSample;\n    public static class IHostBuilderExtension\n    {\n        public static IHostBuilder \n          UseAutofacServiceProviderFactory(\n            this IHostBuilder hostbuilder)\n        {\n            hostbuilder.UseServiceProviderFactory\n              <ContainerBuilder>(\n            new AutofacServiceProviderFactory());\n            return hostbuilder;\n        }\n    }\n    ```", "```cs\n    var builder = WebApplication.CreateBuilder(args);\n    builder.Host.UseAutofacServiceProviderFactory();\n    // Add services to the container.\n    builder.Services.AddControllersWithViews();\n    ```"]