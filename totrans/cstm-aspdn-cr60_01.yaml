- en: '*Chapter 1*: Customizing Logging'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, the first in this book about customizing **ASP.NET** **Core**,
    you will see how to customize **logging**. The default logging only writes to
    the console or the debug window. This is quite good for the majority of cases,
    but sometimes you need to log to a sink, such as a file or a database. Or, perhaps
    you want to extend the logger with additional information. In these cases, you
    need to know how to change the default logging.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring logging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom logger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plugging in an existing third-party logger provider
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The topics in this chapter refer to the hosting layer of the ASP.NET Core architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1 – The ASP.NET Core architecture](img/Figure_1.1_B17996.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.1 – The ASP.NET Core architecture
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To follow the descriptions in this chapter, you will need to create an ASP.NET
    Core MVC application. To do this, open your console, shell, or Bash terminal,
    and change to your working directory. Then, use the following command to create
    a new MVC application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, open the project in **Microsoft** **Visual Studio** by double-clicking
    the project file, or in Visual Studio Code, by typing the following command in
    the already-open console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: All of the code samples in this chapter can be found in the **GitHub** repository
    for this book at [https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter01](https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter01).
  prefs: []
  type: TYPE_NORMAL
- en: Configuring logging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous versions of ASP.NET Core (that is, before version 2.0), logging
    was configured in `Startup.cs`. As a reminder, since version 2.0, the `Startup.cs`
    file has been simplified, and a lot of configurations have been moved to the default
    `WebHostBuilder`, which is called in `Program.cs`. Also, logging was moved to
    the default `WebHostBuilder`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In ASP.NET Core 3.1 and later versions, the `Program.cs` file gets more generic,
    and `IHostBuilder` will be created first. `IHostBuilder` is pretty useful for
    bootstrapping an application without all of the ASP.NET web stuff. We''ll learn
    a lot more about `IHostBuilder` later on in this book. With this `IHostBuilder`,
    we create `IWebHostBuilder` to configure ASP.NET Core. In ASP.NET Core 3.1 and
    later versions, we get `IWebHostBuilder` with the `webBuilder` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In ASP.NET Core 6.0, Microsoft introduced the `Startup` file and adds all of
    the configurations to the `Program.cs` file instead. Let''s see what this looks
    like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In ASP.NET Core, you are able to override and customize almost everything.
    This includes logging. `IWebHostBuilder` has a lot of extension methods that allow
    us to override the default behavior of different features. To override the default
    settings for logging, we need to use the `ConfigureLogging` method. The following
    code snippet shows almost exactly the same logging as was configured inside the
    `ConfigureWebHostDefaults()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the minimal API approach, we don''t need the `ConfigureLogging` method
    anymore, and we can use the `Logging` property of `WebApplicationBuilder` directly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now that we've seen how to configure logging, let's look at building a custom
    logger.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom logger
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To demonstrate a custom logger, let's use a small, simple logger I created that
    is able to colorize log entries with a specific log level in the console. This
    logger is called `ColoredConsoleLogger`, and it will be created and added using
    `LoggerProvider`, which we also need to write for ourselves. To specify the color
    and the log level to colorize, we need to add a configuration class.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next snippets, all three parts (`Logger`, `LoggerProvider`, and `Configuration`)
    are shown:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create the configuration class of our logger in a new file called `CustomLogger.cs`
    in the same folder as the `Program.cs` file. Add the following using statement
    at the top of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will call it `ColoredConsoleLoggerConfiguration`. This class contains three
    properties to define – `LogLevel`, `EventId`, and `Color` – that can be set:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we need a provider to retrieve the configuration and create the actual
    logger instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Don't forget to add a `using` statement for `System.Collections.Concurrent`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The third class is the actual logger we want to use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We now need to lock the actual console output – this is because we will encounter
    some race conditions where incorrect log entries get colored with the wrong color,
    as the console itself is not really thread-safe.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After this is done, we can start to plug in the new logger to the configuration
    in `Program.cs`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You might need to add a using statement to the `LoggerSample` namespace.
  prefs: []
  type: TYPE_NORMAL
- en: If you don't want to use the existing loggers, you can clear all the logger
    providers added previously. Then, we call `AddProvider` to add a new instance
    of our `ColoredConsoleLoggerProvider` class with the specific settings. We could
    also add some more instances of the provider with different settings.
  prefs: []
  type: TYPE_NORMAL
- en: This shows how you could handle the log levels in a different way. You could
    use this approach to send emails regarding hard errors or to log debug messages
    to a different log sink from regular informational messages, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 1.2* shows the colored output of the previously created custom logger:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.2 – A screenshot of the custom logger](img/Figure_1.2_B17996.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.2 – A screenshot of the custom logger
  prefs: []
  type: TYPE_NORMAL
- en: In many cases, it doesn't make sense to write a custom logger, as many good
    third-party loggers are already available, such as `ELMAH`, `log4net`, and `NLog`.
    In the next section, we will see how to use `NLog` in ASP.NET Core.
  prefs: []
  type: TYPE_NORMAL
- en: Plugging in an existing third-party logger provider
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`NLog` was one of the very first available as a `NLog` also already provides
    a logger provider to easily plug into ASP.NET Core.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You will find `NLog` via `NLog` is not yet explicitly available for ASP.NET
    Core 6.0, it will still work with version 6.0:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to add an `NLog.Config` file that defines two different sinks to log
    all standard messages in a single log file and custom messages only in another
    file. Since this file is too long to print, you can view it or download it directly
    from GitHub: [https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/blob/main/Chapter01/LoggingSample6.0/NLog.Config](https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/blob/main/Chapter01/LoggingSample6.0/NLog.Config)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We then need to add the `NLog` ASP.NET Core package from NuGet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Important Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Be sure that you are in the project directory before you execute the preceding
    command!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, you only need to clear all the other providers in the `ConfigureLogging`
    method in `Program.cs` and to use `NLog` with `IWebHostBuilder` using the `UseNLog()`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Using the minimal API, it looks much simpler:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, you can add as many logger providers as you require.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: That covers using an existing third-party logger. Let's now recap what we've
    covered in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The good thing about hiding the basic configuration of an application is that
    it allows you to clean up the newly scaffolded projects and to keep the actual
    start as simple as possible. The developer is able to focus on the actual features.
    However, the more the application grows, the more important logging becomes. The
    default logging configuration is easy and it works like a charm, but in production,
    you need a persisted log to see errors from the past. Therefore, you need to add
    a custom logging configuration or a more flexible third-party logger, such as
    `NLog` or `log4net`.
  prefs: []
  type: TYPE_NORMAL
- en: You will learn more about how to configure ASP.NET Core 6.0 in the next chapter.
  prefs: []
  type: TYPE_NORMAL
