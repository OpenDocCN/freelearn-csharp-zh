["```cs\ndotnet new webapi -n LoggingDemo -controllers\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);builder.Logging.ClearProviders();\nbuilder.Logging.AddConsole();\n```", "```cs\nprivate readonly ILogger<WeatherForecastController> _logger;public WeatherForecastController(ILogger<WeatherForecastController> logger\n{\n    _logger = logger;\n}\n```", "```cs\n[HttpGet(Name = \"GetWeatherForecast\")]public IEnumerable<WeatherForecast> Get()\n{\n    _logger.Log(LogLevel.Information, \"This is a logging message.\");\n    // Omitted for brevity\n}\n```", "```cs\ninfo: LoggingDemo.WeatherForecastController[0]      This is a logging message.\n```", "```cs\nbuilder.Logging.ClearProviders();builder.Logging.AddConsole();\nbuilder.Logging.AddDebug();\n```", "```cs\nbuilder.Logging.AddEventLog();\n```", "```cs\n{  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Trace\",\n      \"Microsoft.AspNetCore\": \"Warning\"\n    },\n    \"EventLog\": {\n      \"LogLevel\": {\n        \"Default\": \"Information\"\n      }\n    }\n  }\n}\n```", "```cs\n_logger.LogInformation(\"This is a logging message.\");\n```", "```cs\n_logger.LogTrace(\"This is a trace message\");\n```", "```cs\n\"Logging\": {  \"LogLevel\": {\n    \"Default\": \"Information\",\n    \"Microsoft.AspNetCore\": \"Warning\"\n  }\n},\n```", "```cs\n\"Logging\": {  \"LogLevel\": {\n    \"Default\": \"Trace\",\n    \"Microsoft.AspNetCore\": \"Warning\"\n  }\n}\n```", "```cs\npublic WeatherForecastController(ILogger<WeatherForecastController> logger){\n    _logger = logger;\n}\n```", "```cs\n public class EventIds{\n    public const int LoginEvent = 2000;\n    public const int LogoutEvent = 2001;\n    public const int FileUploadEvent = 2002;\n    public const int FileDownloadEvent = 2003;\n    public const int UserRegistrationEvent = 2004;\n    public const int PasswordChangeEvent = 2005;\n    // Omitted for brevity\n}\n```", "```cs\n_logger.LogInformation(EventIds.LoginEvent, \"This is a logging message with event id.\");\n```", "```cs\n_logger.LogInformation(\"This is a logging message with args: Today is {Week}. It is {Time}.\", DateTime.Now.DayOfWeek, DateTime.Now.ToLongTimeString());\n```", "```cs\ntry{\n    // Omitted for brevity\n}\ncatch (Exception ex)\n{\n    _logger.LogError(ex, \"This is a logging message with exception.\");\n}\n```", "```cs\ndotnet add package Serilog.AspNetCore\n```", "```cs\ndotnet add package Serilog.Sinks.File\n```", "```cs\nusing Serilog;var builder = WebApplication.CreateBuilder(args);\nbuilder.Logging.ClearProviders();\nvar logger = new LoggerConfiguration().WriteTo.File(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, \"logs/log.txt\"), rollingInterval: RollingInterval.Day, retainedFileCountLimit: 90).CreateLogger();\nbuilder.Logging.AddSerilog(logger);\n```", "```cs\nlogger.LogInformation($\"This is a logging message with string concatenation: Today is {DateTime.Now.DayOfWeek}. It is {DateTime.Now.ToLongTimeString()}.\");\n```", "```cs\nvar logger = new LoggerConfiguration()    .WriteTo.File(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, \"logs/log.txt\"), rollingInterval: RollingInterval.Day, retainedFileCountLimit: 90)\n    .WriteTo.Console(new JsonFormatter())\n    .CreateLogger();\nbuilder.Logging.AddSerilog(logger);\n```", "```cs\n[HttpGet][Route(\"structured-logging\")]\npublic ActionResult StructuredLoggingSample()\n{\n    logger.LogInformation(\"This is a logging message with args: Today is {Week}. It is {Time}.\", DateTime.Now.DayOfWeek, DateTime.Now.ToLongTimeString());\n    logger.LogInformation($\"This is a logging message with string concatenation: Today is {DateTime.Now.DayOfWeek}. It is {DateTime.Now.ToLongTimeString()}.\");\n    return Ok(\"This is to test the difference between structured logging and string concatenation.\");\n}\n```", "```cs\n{   \"Timestamp\":\"2022-11-22T09:59:44.6590391+13:00\",\n   \"Level\":\"Information\",\n   \"MessageTemplate\":\"This is a logging message with args: Today is {Week}. It is {Time}.\",\n   \"Properties\":{\n      \"Week\":\"Tuesday\",\n      \"Time\":\"9:59:44 AM\",\n      \"SourceContext\":\"LoggingDemo.Controllers.LoggingController\",\n      \"ActionId\":\"9fdba8d6-8997-4cba-a9e1-0cefe36cabd1\",\n      \"ActionName\":\"LoggingDemo.Controllers.LoggingController.StructuredLoggingSample (LoggingDemo)\",\n      \"RequestId\":\"0HMMC0D2M1GC4:00000001\",\n      \"RequestPath\":\"/api/Logging/structured-logging\",\n      \"ConnectionId\":\"0HMMC0D2M1GC4\"\n   }\n}\n```", "```cs\n{   \"Timestamp\":\"2022-11-22T09:59:44.6597035+13:00\",\n   \"Level\":\"Information\",\n   \"MessageTemplate\":\"This is a logging message with string concatenation: Today is Tuesday. It is 9:59:44 AM.\",\n   \"Properties\":{\n      \"SourceContext\":\"LoggingDemo.Controllers.LoggingController\",\n      \"ActionId\":\"9fdba8d6-8997-4cba-a9e1-0cefe36cabd1\",\n      \"ActionName\":\"LoggingDemo.Controllers.LoggingController.StructuredLoggingSample (LoggingDemo)\",\n      \"RequestId\":\"0HMMC0D2M1GC4:00000001\",\n      \"RequestPath\":\"/api/Logging/structured-logging\",\n      \"ConnectionId\":\"0HMMC0D2M1GC4\"\n   }\n}\n```", "```cs\ndotnet add package Serilog.Sinks.Seq\n```", "```cs\nvar logger = new LoggerConfiguration()    .WriteTo.File(formatter: new JsonFormatter(), Path.Combine(AppDomain.CurrentDomain.BaseDirectory, \"logs/log.txt\"), rollingInterval: RollingInterval.Day, retainedFileCountLimit: 90)\n    .WriteTo.Console(new JsonFormatter())\n    .WriteTo.Seq(\"http://localhost:5341\")\n    .CreateLogger();\n```", "```cs\ndotnet new webapi -n MiddlewareDemo -controllers\n```", "```cs\nvar app = builder.Build();app.Run(async context =>\n{\n    await context.Response.WriteAsync(\"Hello world!\");\n});\n```", "```cs\nvar app = builder.Build();app.Use(async (context, next) =>\n{\n    var logger = app.Services.GetRequiredService<ILogger<Program>>();\n    logger.LogInformation($\"Request Host: {context.Request.Host}\");\n    logger.LogInformation(\"My Middleware - Before\");\n    await next(context);\n    logger.LogInformation(\"My Middleware - After\");\n    logger.LogInformation($\"Response StatusCode: {context.Response.StatusCode}\");\n});\n```", "```cs\ninfo: Program[0]      Request Host: localhost:5170\ninfo: Program[0]\n      My Middleware - Before\ninfo: Program[0]\n      My Middleware - After\ninfo: Program[0]\n      Response StatusCode: 200\n```", "```cs\nvar app = builder.Build();app.Use(async (context, next) =>\n{\n    var logger = app.Services.GetRequiredService<ILogger<Program>>();\n    logger.LogInformation($\"ClientName HttpHeader in Middleware 1: {context.Request.Headers[\"ClientName\"]}\");\n    logger.LogInformation($\"Add a ClientName HttpHeader in Middleware 1\");\n    context.Request.Headers.TryAdd(\"ClientName\", \"Windows\");\n    logger.LogInformation(\"My Middleware 1 - Before\");\n    await next(context);\n    logger.LogInformation(\"My Middleware 1 - After\");\n    logger.LogInformation($\"Response StatusCode in Middleware 1: {context.Response.StatusCode}\");\n});\napp.Use(async (context, next) =>\n{\n    var logger = app.Services.GetRequiredService<ILogger<Program>>();\n    logger.LogInformation($\"ClientName HttpHeader in Middleware 2: {context.Request.Headers[\"ClientName\"]}\");\n    logger.LogInformation(\"My Middleware 2 - Before\");\n    context.Response.StatusCode = StatusCodes.Status202Accepted;\n    await next(context);\n    logger.LogInformation(\"My Middleware 2 - After\");\n    logger.LogInformation($\"Response StatusCode in Middleware 2: {context.Response.StatusCode}\");\n});\n```", "```cs\ninfo: Program[0]      ClientName HttpHeader in Middleware 1:\ninfo: Program[0]\n      Add a ClientName HttpHeader in Middleware 1\ninfo: Program[0]\n      My Middleware 1 - Before\ninfo: Program[0]\n      ClientName HttpHeader in Middleware 2: Windows\ninfo: Program[0]\n      My Middleware 2 - Before\ninfo: Program[0]\n      My Middleware 2 - After\ninfo: Program[0]\n      Response StatusCode in Middleware 2: 202\ninfo: Program[0]\n      My Middleware 1 - After\ninfo: Program[0]\n      Response StatusCode in Middleware 1: 202\n```", "```cs\napp.Map(\"/lottery\", app =>{\n    var random = new Random();\n    var luckyNumber = random.Next(1, 6);\n    app.UseWhen(context => context.Request.QueryString.Value == $\"?{luckyNumber.ToString()}\", app =>\n    {\n        app.Run(async context =>\n        {\n            await context.Response.WriteAsync($\"You win! You got the lucky number {luckyNumber}!\");\n        });\n    });\n    app.UseWhen(context => string.IsNullOrWhiteSpace(context.Request.QueryString.Value), app =>\n    {\n        app.Use(async (context, next) =>\n        {\n            var number = random.Next(1, 6);\n            context.Request.Headers.TryAdd(\"number\", number.ToString());\n            await next(context);\n        });\n        app.UseWhen(context => context.Request.Headers[\"number\"] == luckyNumber.ToString(), app =>\n        {\n            app.Run(async context =>\n            {\n                await context.Response.WriteAsync($\"You win! You got the lucky number {luckyNumber}!\");\n            });\n        });\n    });\n    app.Run(async context =>\n    {\n        var number = \"\";\n        if (context.Request.QueryString.HasValue)\n        {\n            number = context.Request.QueryString.Value?.Replace(\"?\", \"\");\n        }\n        else\n        {\n            number = context.Request.Headers[\"number\"];\n        }\n        await context.Response.WriteAsync($\"Your number is {number}. Try again!\");\n    });\n});\napp.Run(async context =>\n{\n    await context.Response.WriteAsync($\"Use the /lottery URL to play. You can choose your number with the format /lottery?1.\");\n});\n```", "```cs\napp.UseWhen(context => context.Request.Query.ContainsKey(\"branch\"), app =>{\n    app.Use(async (context, next) =>\n    {\n        var logger = app.ApplicationServices.GetRequiredService<ILogger<Program>>();\n        logger.LogInformation($\"From UseWhen(): Branch used = {context.Request.Query[\"branch\"]}\");\n        await next();\n    });\n});\napp.Run(async context =>\n{\n    await context.Response.WriteAsync(\"Hello world!\");\n});\n```", "```cs\ninfo: Program[0]      From UseWhen(): Branch used = 1\n```", "```cs\napp.MapWhen(context => context.Request.Query.ContainsKey(\"branch\"), app =>{\n    app.Use(async (context, next) =>\n    {\n        var logger = app.ApplicationServices.GetRequiredService<ILogger<Program>>();\n        logger.LogInformation($\"From MapWhen(): Branch used = {context.Request.Query[\"branch\"]}\");\n        await next();\n    });\n});\n```", "```cs\napp.MapWhen(context => context.Request.Query.ContainsKey(\"branch\"), app =>{\n    app.Use(async (context, next) =>\n    {\n        var logger = app.ApplicationServices.GetRequiredService<ILogger<Program>>();\n        logger.LogInformation($\"From MapWhen(): Branch used = {context.Request.Query[\"branch\"]}\");\n        await next();\n    });\n    app.Run(async context =>\n    {\n       var branchVer = context.Request.Query[\"branch\"];\n       await context.Response.WriteAsync($\"Branch used = {branchVer}\");\n    });\n});\n```", "```cs\nif (app.Environment.IsDevelopment()){\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\napp.UseHttpsRedirection();\napp.UseAuthorization();\n```", "```cs\nbuilder.Services.AddRateLimiter(_ =>    _.AddFixedWindowLimiter(policyName: \"fixed\", options =>\n        {\n            options.PermitLimit = 5;\n            options.Window = TimeSpan.FromSeconds(10);\n            options.QueueProcessingOrder = QueueProcessingOrder.OldestFirst;\n            options.QueueLimit = 2;\n        }));\n// Omitted for brevity\napp.UseRateLimiter();\napp.MapGet(\"/rate-limiting-mini\", () => Results.Ok($\"Hello {DateTime.Now.Ticks.ToString()}\")).RequireRateLimiting(\"fixed\");\n```", "```cs\n[HttpGet(\"rate-limiting\")][EnableRateLimiting(policyName: \"fixed\")]\npublic ActionResult RateLimitingDemo()\n{\n    return Ok($\"Hello {DateTime.Now.Ticks.ToString()}\");\n}\n```", "```cs\nbuilder.Services.AddRequestTimeouts(); // Omitted for brevity\n app.UseRequestTimeouts();\n```", "```cs\n[HttpGet(\"request-timeout\")] [RequestTimeout(5000)]\n public async Task<ActionResult> RequestTimeoutDemo()\n {\n     var delay = _random.Next(1, 10);\n     logger.LogInformation($\"Delaying for {delay} seconds\");\n     try\n     {\n         await Task.Delay(TimeSpan.FromSeconds(delay), Request.HttpContext.RequestAborted);\n     }\n     catch\n     {\n         logger.LogWarning(\"The request timed out\");\n         return StatusCode(StatusCodes.Status503ServiceUnavailable, \"The request timed out\");\n     }\n     return Ok($\"Hello! The task is complete in {delay} seconds\");\n }\n```", "```cs\napp.MapGet(\"/request-timeout-mini\", async (HttpContext context, ILogger<Program> logger) => {\n     // Omited for brevity\n }).WithRequestTimeout(TimeSpan.FromSeconds(5));\n```", "```cs\nbuilder.Services.AddRequestTimeouts(option => {\n     option.DefaultPolicy = new RequestTimeoutPolicy { Timeout = TimeSpan.FromSeconds(5) };\n     option.AddPolicy(\"ShortTimeoutPolicy\", TimeSpan.FromSeconds(2));\n     option.AddPolicy(\"LongTimeoutPolicy\", TimeSpan.FromSeconds(10));\n });\n```", "```cs\n[HttpGet(\"request-timeout-short\")] [RequestTimeout(\"ShortTimeoutPolicy\")]\n public async Task<ActionResult> RequestTimeoutShortDemo()\n```", "```cs\napp.MapGet(\"robots.txt\", () => Results.Content(\"User-agent: *\\nDisallow: /\", \"text/plain\")).ShortCircuit();\n```", "```cs\napp.MapShortCircuit((int)HttpStatusCode.NotFound, \"robots.txt\", \"favicon.ico\");\n```", "```cs\npublic class CorrelationIdMiddleware(RequestDelegate next, ILogger<CorrelationIdMiddleware> logger){    private const string CorrelationIdHeaderName = \"X-Correlation-Id\";\n    public async Task InvokeAsync(HttpContext context)\n    {\n        var correlationId = context.Request.Headers[CorrelationIdHeaderName].FirstOrDefault();\n        if (string.IsNullOrEmpty(correlationId))\n        {\n            correlationId = Guid.NewGuid().ToString();\n        }\n        context.Request.Headers.TryAdd(CorrelationIdHeaderName, correlationId);\n        // Log the correlation ID\n        logger.LogInformation(\"Request path: {RequestPath}. CorrelationId: {CorrelationId}\", context.Request.Path, correlationId);\n        context.Response.Headers.TryAdd(CorrelationIdHeaderName, correlationId);\n        await next(context);\n    }\n}\n```", "```cs\npublic static class CorrelationIdMiddlewareExtensions{\n    public static IApplicationBuilder UseCorrelationId(this IApplicationBuilder builder)\n    {\n        return builder.UseMiddleware<CorrelationIdMiddleware>();\n    }\n}\n```", "```cs\napp.UseCorrelationId();\n```", "```cs\n[HttpGet(Name = \"GetWeatherForecast\")]public IEnumerable<WeatherForecast> Get()\n{\n    // Get the \"X-Correlation-Id\" header from the request\n    var correlationId = Request.Headers[\"X-Correlation-Id\"].FirstOrDefault();\n    // Log the correlation ID\n    _logger.LogInformation(\"Handling the request. CorrelationId: {CorrelationId}\", correlationId);\n    // Call another service with the same \"X-Correlation-Id\" header when you set up the HttpClient\n    //var httpContent = new StringContent(\"Hello world!\");\n    //httpContent.Headers.Add(\"X-Correlation-Id\", correlationId);\n    // Omitted for brevity\n```", "```cs\ncontent-type: application/json; charset=utf-8date: Wed,05 Oct 2022 08:17:55 GMT\nserver: Kestrel\ntransfer-encoding: chunked\nx-correlation-id: de67a42b-fd95-4ba1-bd2a-28a54c878d4a\n```", "```cs\nMiddlewareDemo.CorrelationIdMiddleware: Information: Request path: /WeatherForecast. CorrelationId: 795bf955-50a1-4d71-a90d-f859e636775a...\nMiddlewareDemo.Controllers.WeatherForecastController: Information: Handling the request. CorrelationId: 795bf955-50a1-4d71-a90d-f859e636775a\n```"]