- en: Chapter 10. Preparing Xamarin.Android Apps for Distribution
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 10 章：准备分发 Xamarin.Android 应用程序
- en: 'In this chapter, we will discuss activities related to preparing a Xamarin.Android
    app for distribution and look at the various options for distributing apps. Many
    of the activities we will discuss are an integral part of any Android app deployment.
    However, in this chapter, we will try to narrow the scope of our coverage to aspects
    that are unique to developing with Xamarin.Android. We will cover the following
    topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论与准备分发 Xamarin.Android 应用程序相关的活动，并查看分发应用程序的各种选项。我们将讨论的许多活动是任何 Android
    应用程序部署的组成部分。然而，在本章中，我们将尝试缩小覆盖范围，仅关注使用 Xamarin.Android 开发时独特的方面。我们将涵盖以下主题：
- en: App profiling
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序性能分析
- en: Android Build settings for distributing apps
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分发应用程序的 Android 构建设置
- en: App distribution options
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序分发选项
- en: Preparing for a release APK
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备发布 APK
- en: Prior to publishing a signed APK file for release, there are a number of activities
    that need to be completed. The following sections discuss topics that should be
    considered prior to producing a release APK.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在发布签名的 APK 文件之前，需要完成一系列活动。以下章节讨论了在生成发布 APK 之前应考虑的主题。
- en: Profiling Xamarin.Android apps
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 性能分析 Xamarin.Android 应用程序
- en: The Xamarin.Android Business license provides limited support to profile Android
    apps. Profiling can be a very effective way to identify memory leaks and process
    bottlenecks.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin.Android 商业许可证为性能分析 Android 应用程序提供有限支持。性能分析可以是非常有效的识别内存泄漏和进程瓶颈的方法。
- en: Tip
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'We will not cover profiling within this book, but the following link provides
    an overview of using the profiling capabilities of Xamarin.Android: [http://docs.xamarin.com/guides/android/deployment,_testing,_and_metrics/profiling](http://docs.xamarin.com/guides/android/deployment,_testing,_and_metrics/profiling).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将不会涵盖性能分析，但以下链接提供了使用 Xamarin.Android 性能分析功能的概述：[http://docs.xamarin.com/guides/android/deployment,_testing,_and_metrics/profiling](http://docs.xamarin.com/guides/android/deployment,_testing,_and_metrics/profiling)。
- en: In addition to using the tools provided with Xamarin.Android, traditional Android
    profiling tools such as Traceview and `dmtracedump` can be used. You can find
    more information at [http://developer.android.com/tools/debugging/debugging-tracing.html](http://developer.android.com/tools/debugging/debugging-tracing.html).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用 Xamarin.Android 提供的工具外，还可以使用传统的 Android 性能分析工具，如 Traceview 和 `dmtracedump`。更多信息请参阅
    [http://developer.android.com/tools/debugging/debugging-tracing.html](http://developer.android.com/tools/debugging/debugging-tracing.html)。
- en: Disabling debug
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 禁用调试
- en: 'When developing a Xamarin.Android app, Xamarin Studio supports debugging with
    the use of **Java Debug Wire Protocol** (**JDWP**). This feature needs to be disabled
    in release builds as it poses a security risk. You have two different ways to
    accomplish this:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发 Xamarin.Android 应用程序时，Xamarin Studio 支持使用 **Java 调试 Wire Protocol**（**JDWP**）进行调试。这个功能需要在发布构建中禁用，因为它存在安全风险。你有两种不同的方法来完成这个任务：
- en: Changing the settings in `AndroidManifest.xml`
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改 `AndroidManifest.xml` 中的设置
- en: Changing the settings in `AssemblyInfo.cs`
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改 `AssemblyInfo.cs` 中的设置
- en: Changing the settings in AndroidManifest.xml
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改 AndroidManifest.xml 中的设置
- en: 'The first method can be done by using the following listing, which shows you
    how to turn off JDWP debugging from the `AndroidManifest.xml` file:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法可以通过以下列表来完成，该列表展示了如何从 `AndroidManifest.xml` 文件中关闭 JDWP 调试：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Changing the settings in AssemblyInfo.cs
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改 AssemblyInfo.cs 中的设置
- en: 'The alternative method is done by disabling JDWP through `AssemblyInfo.cs`.
    This has the advantage of being based on the currently selected configuration.
    The following listing shows how to use a conditional directive to turn JDWP debugging
    off:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 替代方法是通过在 `AssemblyInfo.cs` 中禁用 JDWP 来实现的。这种方法的优势在于它基于当前选定的配置。以下列表展示了如何使用条件指令来关闭
    JDWP 调试：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Android Application (AndroidManifest.xml) settings
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Android 应用程序（AndroidManifest.xml）设置
- en: 'By the time you start considering deployment of your app, you will have already
    established most of the settings needed in `AndroidManifest.xml`. However, you
    will need to update the version information. Keep in mind, the version number
    is used by the Android platform during the installation process to determine whether
    an APK is an update to an existing app. A version name is a free-form text and
    can be used to track app versions in any manner desired. This can be accomplished
    by opening the **Project Options** dialog box and navigating to **Build** | **Android
    Application**, or by double-clicking on `NationalParks/Properties/AndroidManifest.xml`.
    The following screenshot depicts the **Android Application** settings dialog box:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始考虑部署你的应用程序时，你已经在 `AndroidManifest.xml` 中建立了大多数需要的设置。然而，你需要更新版本信息。请注意，版本号在安装过程中由
    Android 平台使用，以确定 APK 是否是现有应用程序的更新。版本名称是自由形式的文本，可以用来以任何希望的方式跟踪应用程序版本。这可以通过打开 **项目选项**
    对话框并导航到 **构建** | **Android 应用程序**，或者通过双击 `NationalParks/Properties/AndroidManifest.xml`
    来完成。以下截图显示了 **Android 应用程序** 设置对话框：
- en: '![Android Application (AndroidManifest.xml) settings](img/0838OT_10_01.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![Android 应用程序 (AndroidManifest.xml) 设置](img/0838OT_10_01.jpg)'
- en: Linker Options
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 链接器选项
- en: 'During a build, Xamarin.Android performs static analysis of the assemblies
    that make up an app and attempts to eliminate type and member instances that are
    not needed. The settings that control this process can be viewed and set in the
    **Project Options** dialog box under the **Android Build** section, as shown in
    the following screenshot:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建过程中，Xamarin.Android 对构成应用程序的组件进行静态分析，并尝试消除不需要的类型和成员实例。控制此过程的设置可以在 **项目选项**
    对话框中查看和设置，该对话框位于 **Android 构建** 部分下，如下截图所示：
- en: '![Linker Options](img/0838OT_10_03.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![链接器选项](img/0838OT_10_03.jpg)'
- en: 'Xamarin.Android supports the same linker options as Xamarin.iOS. When viewing
    and adjusting the **Linker Options** settings, be sure to first select **Release**
    from the **Configuration** drop-down box. The following linking options are available:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin.Android 支持与 Xamarin.iOS 相同的链接器选项。在查看和调整 **链接器选项** 设置时，请确保首先从 **配置**
    下拉菜单中选择 **发布**。以下链接选项可用：
- en: '**Don''t link**: This option disables the linker and ensures that all referenced
    assemblies are included without modification. This is the default setting for
    builds that target the iOS Simulator. This eliminates the time-consuming process
    of linking, and deploying a large file to the simulator is relatively quick.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不链接**：此选项禁用链接器，并确保所有引用的组件都包含在内，而不进行修改。这是针对 iOS 模拟器构建的默认设置。这消除了链接的耗时过程，并将大文件部署到模拟器相对较快。'
- en: '**Link SDK assemblies only**: This option tells the linker to operate only
    on the SDK assemblies; those assemblies that ship with Xamarin.iOS. This is the
    default setting for builds that target a device.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仅链接 SDK 组件**：此选项告诉链接器仅对 SDK 组件进行操作；那些与 Xamarin.iOS 一起发货的组件。这是针对设备构建的默认设置。'
- en: '**Link all assemblies**: This option tells the linker to operate on the entire
    app, as well as all referenced assemblies. This allows the linker to use a larger
    set of optimizations and results in the smallest possible application. However,
    when the linker runs in this mode, there is a greater chance that it might break
    portions of your code due to false assumptions made by the static analysis process.
    In particular, the use of reflection and serialization can trip up the static
    analysis.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**链接所有组件**：此选项告诉链接器对整个应用程序以及所有引用的组件进行操作。这允许链接器使用更大的优化集，并产生可能的最小应用程序。然而，当链接器以这种方式运行时，由于静态分析过程中做出的错误假设，它可能会破坏你的代码的一部分。特别是，反射和序列化的使用可能会使静态分析失败。'
- en: 'The following table shows how the APK file size varies based on the linker
    setting:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格显示了 APK 文件大小根据链接器设置的变化：
- en: '|   | File linking version | PCL version |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '|   | 文件链接版本 | PCL 版本 |'
- en: '| --- | --- | --- |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| **Don''t link** | 26.4 MB | 27.5 MB |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| **不链接** | 26.4 MB | 27.5 MB |'
- en: '| **Link SDK assemblies only** | 4.3 MB | 4.3 MB |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| **仅链接 SDK 组件** | 4.3 MB | 4.3 MB |'
- en: '| **Link all assemblies** | 4.1 MB | 4.2 MB |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| **链接所有组件** | 4.1 MB | 4.2 MB |'
- en: Overriding the linker
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 覆盖链接器
- en: In some cases, the linking option can have negative side effects, such as important
    types and/or members being accidentally eliminated. It is important for an application
    that has been compiled and linked in release mode to be thoroughly tested before
    distribution in order to identify such issues. In some situations, you should
    conduct tests beyond the initial developer's testing, and this should be conducted
    using an APK file produced in release mode.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，链接选项可能会有负面影响，例如意外删除重要的类型和/或成员。对于已经编译和链接为发布模式的程序，在分发之前进行彻底测试以识别此类问题非常重要。在某些情况下，你应该进行超出初始开发者测试的测试，并且这应该使用发布模式生成的APK文件进行。
- en: In the event that you encounter any runtime exceptions related to missing types
    or trouble locating specific methods, you can make use of one of the following
    methods to give explicit instructions to the linker.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果遇到与缺失类型或定位特定方法相关的任何运行时异常，你可以使用以下方法之一来向链接器提供明确的指令。
- en: Preserving code with attributes
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用属性保留代码
- en: If you determine from testing that the linking is removing classes or methods
    needed by your app, you can explicitly tell the linker to always include them
    by using the `Preserve` attribute on a class and/or method.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你通过测试确定链接过程移除了你的应用所需的类或方法，你可以通过在类和/或方法上使用`Preserve`属性来明确告诉链接器始终包含它们。
- en: 'To preserve the entire type, use the following command:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要保留整个类型，请使用以下命令：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To preserve a single member, use the following command:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要保留单个成员，请使用以下命令：
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Preserving code with custom linker files
  id: totrans-47
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用自定义链接器文件保留代码
- en: 'There are times when you might not have access to the source code, but still
    need to preserve specific types and/or members. This can be accomplished with
    a custom linker file. The following example instructs the linker to always include
    specific members for a type:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，你可能无法访问源代码，但仍然需要保留特定的类型和/或成员。这可以通过自定义链接器文件实现。以下示例指示链接器始终包含特定类型的特定成员：
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You can add a custom-linking file to a project by adding a simple XML file
    and populating it with similar content to the previous example; it does not really
    matter where you place it in the project structure. After adding the file to the
    project, select the file, open the **Properties** pad, and choose **LinkDescription**
    for **Build action**, as shown in the following screenshot:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过添加一个简单的XML文件并将其填充与上一个示例类似的内容来向项目中添加自定义链接文件；实际上，它在项目结构中的位置并不重要。在将文件添加到项目后，选择该文件，打开**属性**面板，然后为**构建操作**选择**LinkDescription**，如图所示：
- en: '![Preserving code with custom linker files](img/0838OT_10_02.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![使用自定义链接器文件保留代码](img/0838OT_10_02.jpg)'
- en: Skipping assemblies
  id: totrans-52
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 跳过程序集
- en: 'You can also instruct the linker to skip entire assemblies so that all the
    types and members will be retained. This can be accomplished in the following
    two ways:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以指示链接器跳过整个程序集，这样所有的类型和成员都将被保留。这可以通过以下两种方式实现：
- en: Using a command-line option `linkskip`, for example, `--linkskip=someassembly`
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用命令行选项`linkskip`，例如，`--linkskip=someassembly`
- en: 'Using the `AndroidLinkSkip` MSBuild property, as follows:'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`AndroidLinkSkip` MSBuild属性，如下所示：
- en: '[PRE5]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Supported ABIs
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 支持的ABIs
- en: Android supports a number of different CPU architectures. The Android platform
    defines a set of **Application Binary Interfaces** (**ABI**) that corresponds
    to different CPU architectures. By default, Xamarin.Android assumes that armeabi-v7a
    is appropriate for most circumstances. To support additional architectures, check
    each option that applies on the **Project Options** dialog box under the **Android
    Build** section.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Android支持多种不同的CPU架构。Android平台定义了一组**应用程序二进制接口**（**ABI**），对应不同的CPU架构。默认情况下，Xamarin.Android假定armeabi-v7a适用于大多数情况。要支持额外的架构，请在**Android构建**部分下的**项目选项**对话框中检查每个适用的选项。
- en: '![Supported ABIs](img/0838OT_10_04.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![支持的ABIs](img/0838OT_10_04.jpg)'
- en: Publishing a release APK
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布发布版APK
- en: Now that you have adjusted the setting needed to produce a release build, you
    are ready to publish the actual APK. When we say publish, we simply mean to produce
    an APK that can be uploaded to the Google Play Store. The following sections discuss
    the steps of producing a signed APK from within Xamarin Studio.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经调整了生成发布构建所需的所有设置，你就可以发布实际的APK了。当我们说发布时，我们只是意味着生成一个可以上传到Google Play Store的APK。以下章节将讨论在Xamarin
    Studio内部生成签名APK的步骤。
- en: Keystores
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 密钥库
- en: A keystore is a database of security certificates created and managed by the
    keytool program from the Java SDK. You can create the keystore outside of Xamarin
    Studio using the keytool command or from within Xamarin Studio that provides a
    UI that interfaces with the keytool command. The next section takes you through
    the steps to publish an APK and create a new keystore from within Xamarin Studio.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 密钥库是由 Java SDK 中的 keytool 程序创建和管理的安全证书数据库。您可以使用 keytool 命令在 Xamarin Studio 外部创建密钥库，或者从
    Xamarin Studio 内部创建，它提供了一个与 keytool 命令交互的 UI。下一节将指导您在 Xamarin Studio 内部发布 APK
    和创建新密钥库的步骤。
- en: Publishing from Xamarin.Android
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从 Xamarin.Android 发布
- en: 'The following steps guide you through the creation of a new keystore as a part
    of the process of creating a signed APK:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤指导您在创建签名 APK 的过程中创建新密钥库：
- en: In the **Configuration** drop-down box, select **Release**.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**配置**下拉框中，选择**发布**。
- en: Navigate to **Project** | **Publish Android Application** from the main menu;
    note the **Keystore selection** page of the **Publish Android Application** wizard,
    as shown in the following screenshot:![Publishing from Xamarin.Android](img/0838OT_10_05.jpg)
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从主菜单导航到**项目** | **发布 Android 应用程序**；注意**发布 Android 应用程序**向导的**密钥库选择**页面，如下截图所示：![从
    Xamarin.Android 发布](img/0838OT_10_05.jpg)
- en: Select **Create new keystore**, select a location including a filename for the
    keystore, and enter the password and confirm it. The example keystore is in the
    project folder named `NationalParks.keystore` and the password is `nationalparks`.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**创建新密钥库**，选择一个包含密钥库名称的位置，并输入密码并确认。示例密钥库位于项目文件夹中，名为`NationalParks.keystore`，密码为`nationalparks`。
- en: Select **Forward**; you will see the **Key creation** page of the **Publish
    Android Application** wizard, as shown in the following screenshot:![Publishing
    from Xamarin.Android](img/0838OT_10_06.jpg)
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**前进**；您将看到**密钥创建**页面，如下截图所示：![从 Xamarin.Android 发布](img/0838OT_10_06.jpg)
- en: Enter all the relevant information. This example uses `nationalparks` for the
    **Alias** field and **Password**.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入所有相关信息。本例使用`nationalparks`作为**别名**字段和**密码**。
- en: Select **Forward**; you will see the **Select destination** page of the **Publish
    Android Application** wizard, as shown in the following screenshot:![Publishing
    from Xamarin.Android](img/0838OT_10_07.jpg)
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**前进**；您将看到**发布 Android 应用程序**向导的**选择目标**页面，如下截图所示：![从 Xamarin.Android 发布](img/0838OT_10_07.jpg)
- en: Select the required **Target directory** option and click on **Create**. Xamarin
    Studio will compile the app for release and generate a signed APK file. You should
    see the following in the **Publishing package** pad:![Publishing from Xamarin.Android](img/0838OT_10_08.jpg)
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择所需的**目标目录**选项，然后点击**创建**。Xamarin Studio 将为发布编译应用程序并生成签名 APK 文件。您应该在**发布包**面板中看到以下内容：![从
    Xamarin.Android 发布](img/0838OT_10_08.jpg)
- en: The resulting APK is ready for final testing and potential distribution. Be
    sure to secure and back up your keystore as it is critical to distributing future
    versions.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的 APK 已准备好进行最终测试和潜在的分发。请确保安全并备份您的密钥库，因为它对于分发未来版本至关重要。
- en: Republishing from Xamarin.Android
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从 Xamarin.Android 重新发布
- en: Subsequent publications of an app should always use the original keystore. To
    accomplish this, simply select **Use existing keystore** on the **Keystore selection**
    page of the **Publish Android Application** wizard.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序后续发布应始终使用原始密钥库。为此，只需在**发布 Android 应用程序**向导的**密钥库选择**页面选择**使用现有密钥库**。
- en: Publishing from Visual Studio
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从 Visual Studio 发布
- en: Publishing a signed APK from within Visual Studio essentially follows the same
    process. To do so, simply navigate to **Tools** | **Publish Android Application**
    from the main menu.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Visual Studio 内部发布签名 APK 基本上遵循相同的流程。要这样做，只需从主菜单导航到**工具** | **发布 Android 应用程序**。
- en: App distribution options
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序分发选项
- en: Distributing Xamarin.Android apps is no different from any other Android app.
    They can be distributed through all the normal channels, app stores, e-mail attachments,
    website links, thumb drive, and so on.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 分发 Xamarin.Android 应用程序与任何其他 Android 应用程序没有区别。它们可以通过所有正常渠道分发，包括应用商店、电子邮件附件、网站链接、U盘等。
- en: Summary
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have reviewed activities related to preparing for distribution
    of an app and the process to actually produce a signed release APK file.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们回顾了与准备应用程序分发相关的内容以及实际生成签名发布 APK 文件的流程。
- en: This chapter completes our book on Xamarin Essentials. We have tried to provide
    a productive approach for experienced mobile developers to quickly come up to
    speed on developing apps using the Xamarin platform. We have reviewed the Xamarin
    architecture, developed functional apps for both iOS and Android, and looked at
    how to maximize Xamarin's value by sharing code across mobile platforms using
    several different approaches and frameworks. You are now ready to put Xamarin
    to work.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 本章完成了我们关于Xamarin Essentials的书籍。我们试图为经验丰富的移动开发者提供一个高效的方法，以便他们能够快速掌握使用Xamarin平台开发应用程序。我们回顾了Xamarin架构，为iOS和Android开发了功能性的应用程序，并探讨了如何通过使用多种不同的方法和框架，在移动平台间共享代码来最大化Xamarin的价值。现在，你已经准备好将Xamarin投入使用了。
- en: I hope you have found this book a useful resource and that it has generated
    some excitement in you about developing great mobile apps with Xamarin.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你们觉得这本书是一本有用的资源，并且它激发了你使用Xamarin开发优秀移动应用程序的热情。
