["```cs\ndocker run hello-world\n```", "```cs\ndocker images\n```", "```cs\ndocker container ls\n```", "```cs\ndocker pull mcr.microsoft.com/mssql/server:2022-latest\n```", "```cs\ndocker run -e \"ACCEPT_EULA=Y\" -e \"MSSQL_SA_PASSWORD=Pa$$w0rd\" -p 14333:1433 --name sql1 --hostname sql1 -d mcr.microsoft.com/mssql/server:2022-latest\n```", "```cs\ndocker container logs sql1\n```", "```cs\ndocker volume create gamessqlstorage\n```", "```cs\ndocker run -e \"ACCEPT_EULA=Y\" -e \"MSSQL_SA_PASSWORD=Pa$$w0rd\" -p 14333:1433 --name codebreakersql1 --hostname codebreakersql1 -v gamessqlstorage:/var/opt/mssql -d mcr.microsoft.com/mssql/server:2022-latest\n```", "```cs\n{\n  \"ConnectionStrings\": {\n    \"GamesSqlServerConnection\": \"server=host.docker.internal,14333;database=CodebreakerGames;user id=sa;password=Pa$$w0rd;TrustServerCertificate=true\"\n  }\n}\n```", "```cs\ncd Codebreaker.GameAPIs\ndotnet ef database update -p ..\\Codebreaker.Data.SqlServer -c GamesSqlServerContext\n```", "```cs\nFROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base\nUSER app\nWORKDIR /app\nEXPOSE 8080\n```", "```cs\nFROM mcr.microsoft.com/dotnet/sdk:8.0 AS build\nARG BUILD_CONFIGURATION=Release\nWORKDIR /src\nCOPY [\"Codebreaker.GameAPIs/Codebreaker.GameAPIs.csproj\", \"Codebreaker.GameAPIs/\"]\nRUN dotnet restore \"./Codebreaker.GameAPIs/Codebreaker.GameAPIs.csproj\"\nCOPY . .\nWORKDIR \"/src/Codebreaker.GameAPIs\"\nRUN dotnet build \"./Codebreaker.GameAPIs.csproj\" -c $BUILD_CONFIGURATION -o /app/build\n```", "```cs\nFROM build AS publish\nARG BUILD_CONFIGURATION=Release\nRUN dotnet publish \"./Codebreaker.GameAPIs.csproj\" -c $BUILD_CONFIGURATION -o /app/publish /p:UseAppHost=false\n```", "```cs\nFROM base AS final\nWORKDIR /app\nCOPY --from=publish /app/publish .\nENTRYPOINT [\"dotnet\", \"Codebreaker.GameAPIs.dll\"]\n```", "```cs\ndocker build . -f Codebreaker.GameAPIs\\Dockerfile -t codebreaker/gamesapi:3.5.3 -t codebreaker/gamesapi:latest\n```", "```cs\ndocker images codebreaker/*\n```", "```cs\ndocker history codebreaker/gamesapi:latest\n```", "```cs\ndocker image inspect codebreaker/gamesapi:latest\n```", "```cs\ndocker run -p 8080:8080 -d codebreaker/gamesapi:latest\n```", "```cs\ndocker network create codebreakernet\n```", "```cs\ndocker start sql1\n```", "```cs\ndocker network connect codebreakernet sql1\n```", "```cs\nDataStore=SqlServer\nConnectionStrings__GamesSqlServerConnection=sql1,1433;database=CodebreakerGames;user id=sa;password=<enter your password>;TrustServerCertificate=true\n```", "```cs\ndocker run -p 8080:8080 -d --env-file gameapis.env -d --name gamesapi codebreaker/gamesapi:latest\ndocker network connect codebreakernet gamesapi\n```", "```cs\n<PropertyGroup>\n  <ContainerRegistry>codebreaker/bot</ContainerRegistry>\n<ContainerImageTags>3.5.3;latest</ContainerImageTags>\n</PropertyGroup>\n<ItemGroup>\n  <ContainerPort Include=\"8080\" Type=\"tcp\" />\n</ItemGroup>\n```", "```cs\ncd Codebreaker.Bot\ndotnet publish Codebreaker.Bot.csproj --os linux --arch x64 /t:PublishContainer -c Release\n```", "```cs\nvar builder = DistributedApplication.CreateBuilder(args);\nvar sqlPassword = builder.AddParameter(\"SqlPassword\", secret: true);\nvar sqlServer = builder.AddSqlServer(\"sql\", sqlPassword)\n  WithDataVolume(\"codebreaker-sql-data\", isReadOnly: false)\n .AddDatabase(\"CodebreakerSql\");\n  var gameAPIs = builder.AddProject<Projects.\nCodebreaker_GameAPIs>(\"gameapis\")\n    .WithReference(sqlServer);\n  // code removed for brevity\n```", "```cs\npublic static IResourceBuilder<SqlServerServerResource> \n  AddSqlServer(this IDistributedApplicationBuilder builder, string \n  name, string? password = null, int? port = null)\n{\nvar passwordParameter = password?.Resource \n  ??  ParameterResourceBuilderExtensions.\n  CreateDefaultPasswordPArameter(builder, $\"{name}-password\", \n  minLower: 1, minUpper: 1, minNumeric: 1);\n  var sqlServer = new SqlServerServerResource(name, \n    passwordParameter);\n  return builder.AddResource(sqlServer)\n    .WithEndpoint(1433, port, null, \"tcp\")\n    .WithImage(\"mssql/server\", \"2022-latest\")\n    .WithImageRegistry(\"mcr.microsoft.com\")\n    .WithEnvironment(\"ACCEPT_EULA\", \"Y\")\n    .WithEnvironment(context =>)\n    {\n      context.EnvironmentVariables[\"MSSQL_SA_PASSWORD\"] =\n        sqlServer.PasswordParameter;\n    });\n  }\n```", "```cs\ndotnet user-secrets set Parameters:SqlPassword \"Password123!\"\n```", "```cs\npublic static class ApplicationServices\n{\n  public static void AddApplicationServices(this \n    IHostApplicationBuilder builder)\n  {\n    static void ConfigureSqlServer(IHostApplicationBuilder builder)\n    {\nbuilder.AddDbContextPool<IGamesRepository, \n        GamesSqlServerContext>(options =>\n        {\n          var connectionString = builder.Configuration.\n            GetConnectionString(\"CodebreakerSql\")\n            ?? throw new InvalidOperationException(\"Could not read SQL \n            Server connection string\");\n          options.UseSqlServer(connectionString);\n          options.UseQueryTrackingBehavior(\n            QueryTrackingBehavior.NoTracking);\n        });\n         builder.EnrichSqlServerDbContext<GamesSqlServerContext>();\n    }\n    // code removed for brevity\n    string? dataStore = builder.Configuration.\n      GetValue<string>(\"DataStore\");\n    switch (dataStore)\n    {\n      case \"SqlServer\":\n        ConfigureSqlServer(builder);\n        break;\n      default:\n        ConfigureInMemory(builder);\n      break;\n    }\n    builder.Services.AddScoped<IGamesService, GamesService>();\n  }\n}\n```", "```cs\nvar gameAPIs = builder.AddProject<Projects.Codebreaker_GameAPIs>(\"gameapis\")\n  .WithReference(sqlServer);\nbuilder.AddProject<Projects.CodeBreaker_Bot>(\"bot\")\n  .WithReference(gameAPIs);\n```", "```cs\npublic static void AddApplicationServices(this IHostApplicationBuilder \n  builder)\n{\n  builder.Services.AddHttpClient<GamesClient>(client =>\n  {\n    client.BaseAddress = new Uri(\"http://gameapis\");\n  });\n  builder.Services.AddScoped<CodeBreakerTimer>();\n  builder.Services.AddScoped<CodeBreakerGameRunner>();\n}\n```", "```cs\ndotnet new webapiaot -o Codebreaker.GameAPIs.NativeAOT\n```", "```cs\nvar builder = WebApplication.CreateSlimBuilder(args);\n```", "```cs\n[JsonSerializable(typeof(IEnumerable<Game>))]\n[JsonSerializable(typeof(UpdateGameRequest))]\n[JsonSerializable(typeof(UpdateGameResponse))]\n[JsonSerializable(typeof(CreateGameResponse))]\n[JsonSerializable(typeof(CreateGameRequest))]\n[JsonSerializable(typeof(Game[]))]\ninternal partial class AppJsonSerializerContext : JsonSerializerContext\n{\n}\n```", "```cs\nbuilder.Services.ConfigureHttpJsonOptions(options =>\n{\n    options.SerializerOptions.TypeInfoResolverChain.Insert(0,\n       AppJsonSerializerContext.Default);\n});\n```", "```cs\ncd Codebreaker.GameAPIs.NativeAOT\ndotnet publish -r win-x64 -c Release -o pubwin\n```", "```cs\nFROM mcr.microsoft.com/dotnet/sdk:8.0 AS build\nRUN apt-get update \\\n    && apt-get install -y --no-install-recommends \\\n    clang zlib1g-dev\nARG BUILD_CONFIGURATION=Release\nWORKDIR /src\nCOPY [\"Codebreaker.GameAPIs.NativeAOT.csproj\", \".\"]\nRUN dotnet restore \"./Codebreaker.GameAPIs.NativeAOT.csproj\"\nCOPY . .\nWORKDIR \"/src/.\"\nRUN dotnet build \"./Codebreaker.GameAPIs.NativeAOT.csproj\" -c $BUILD_CONFIGURATION -o /app/build\nFROM build AS publish\nARG BUILD_CONFIGURATION=Release\nRUN dotnet publish \"./Codebreaker.GameAPIs.NativeAOT.csproj\" -c $BUILD_CONFIGURATION -o /app/publish /p:UseAppHost=true\nFROM mcr.microsoft.com/dotnet/runtime-deps:8.0 AS final\nWORKDIR /app\nEXPOSE 8080\nCOPY --from=publish /app/publish .\nENTRYPOINT [\"./Codebreaker.GameAPIs.NativeAOT\"]\n```", "```cs\ndocker build . -f Codebreaker.GameAPIs.NativeAOT\\Dockerfile -t codebreaker/gamesapi-aot:latest -t codebreaker/gamesapi-aot:3.5.6\n```"]