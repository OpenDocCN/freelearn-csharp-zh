- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Using Azure Active Directory to Secure a Blazor WebAssembly Application
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Azure Active Directory保护Blazor WebAssembly应用程序
- en: Security is important. Most applications require each user to provide their
    credentials before they can access all the functionality supplied by the application.
    Managing usernames, passwords, roles, and groups can be tedious and complicated.
    Using **Azure Active Directory** (**Azure AD**) makes it easy. Azure AD is an
    identity provider in the cloud.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性很重要。大多数应用程序在用户可以访问应用程序提供的所有功能之前，都需要用户提供其凭据。管理用户名、密码、角色和组可能会很繁琐且复杂。使用**Azure
    Active Directory**（**Azure AD**）可以使其变得简单。Azure AD是云中的身份提供者。
- en: The project that we create in this chapter will allow the user to view the claims
    provided by the token that is returned from Azure AD after the user is authenticated
    by Azure AD. We will be using the **Microsoft Authentication Library** (**MSAL**)
    to acquire **JSON Web Tokens** (**JWTs**)from Azure AD. We will be using **Open
    ID Connect** (**OIDC**) endpoints to authenticate users. OIDC is a simple identity
    layer built on the industry standard OAuth 2.0 protocol. It allows clients to
    verify the identity of a user based on the authentication performed by an identity
    provider, such as Duende Identity Server or Azure AD.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中我们将创建的项目将允许用户查看在用户通过Azure AD进行身份验证后，Azure AD返回的令牌所提供的声明。我们将使用**Microsoft身份验证库**（**MSAL**）从Azure
    AD获取**JSON Web令牌**（**JWTs**）。我们将使用**Open ID Connect**（**OIDC**）端点进行用户身份验证。OIDC是在行业标准OAuth
    2.0协议之上构建的一个简单的身份层。它允许客户端根据身份提供者（如Duende Identity Server或Azure AD）执行的认证来验证用户的身份。
- en: In this chapter, we will learn the difference between authentication and authorization.
    We will learn how to use the `RemoteAuthenticationView` component to handle the
    various actions required during each stage of authentication. We will also learn
    how to use the `CascadingAuthenticationState` component to share the authentication
    state with each of its children. Finally, we will learn how to control what is
    rendered to the user by using the `Authorize` attribute and the `AuthorizeView`
    component.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习身份验证和授权之间的区别。我们将学习如何使用`RemoteAuthenticationView`组件来处理身份验证每个阶段所需的各项操作。我们还将学习如何使用`CascadingAuthenticationState`组件将其身份验证状态与其每个子组件共享。最后，我们将学习如何通过使用`Authorize`属性和`AuthorizeView`组件来控制呈现给用户的内容。
- en: The project that we create in this chapter will be a claims reader. It will
    allow users who belong to a particular group within Azure AD to view the contents
    of the token that is returned from Azure AD after authentication. If the user
    is not authenticated or does not belong to the appropriate group, they will receive
    a warning message.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中我们将创建的项目将是一个声明读取器。它将允许属于Azure AD中特定组的用户查看在身份验证后Azure AD返回的令牌的内容。如果用户未进行身份验证或不属于适当的组，他们将收到警告消息。
- en: Who are you? And what
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你是谁？你有什么
- en: ''
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: are you authorized to do?
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你是否有权限执行？
- en: ''
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Your identity.
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 您的身份。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Understanding the difference between authentication and authorization
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解身份验证和授权之间的区别
- en: Working with authentication
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与身份验证一起工作
- en: Controlling the user interface using authorization
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用授权控制用户界面
- en: Creating the claims viewer project
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建声明查看器项目
- en: Technical requirements
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To complete this project, you need to have Visual Studio 2022 installed on your
    PC. For instructions on how to install the free Community Edition of Visual Studio
    2022, refer to *Chapter 1*, *Introduction to Blazor WebAssembly*. Since we will
    be using Azure AD for authentication, you will need an account on Microsoft Azure.
    If you do not have an account on Microsoft Azure, refer to *Chapter 1*, *Introduction
    to Blazor WebAssembly*, to create a free account.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成此项目，您需要在您的PC上安装Visual Studio 2022。有关如何安装Visual Studio 2022免费社区版的说明，请参阅*第1章*，*Blazor
    WebAssembly简介*。由于我们将使用Azure AD进行身份验证，您需要在Microsoft Azure上有一个账户。如果您没有Microsoft
    Azure账户，请参阅*第1章*，*Blazor WebAssembly简介*，以创建一个免费账户。
- en: 'The source code for this chapter is available in the following GitHub repository:
    [https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter10](https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter10).'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可在以下GitHub仓库中找到：[https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter10](https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter10).
- en: 'The Code in Action video is available here: [https://packt.link/Ch10](https://packt.link/Ch10).'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 代码在行动视频在此处可用：[https://packt.link/Ch10](https://packt.link/Ch10)。
- en: Understanding the difference between authentication and authorization
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解认证和授权之间的区别
- en: Authentication and authorization are the two sides of the same security coin.
    Authentication is the process of obtaining credentials from a user to verify the
    identity of the user. Authorization is the process of checking the privileges
    for the user to access specific resources.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 认证和授权是同一枚安全硬币的两面。认证是从用户那里获取凭证以验证用户身份的过程。授权是检查用户访问特定资源的权限的过程。
- en: Authentication always precedes authorization.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 认证始终先于授权。
- en: '![Graphical user interface  Description automatically generated](img/B18471_10_01.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面  描述自动生成](img/B18471_10_01.png)'
- en: 'Figure 10.1: Authentication vs Authorization'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.1：认证与授权对比
- en: The preceding image illustrates the difference between authentication and authorization.
    The left-hand side of the image shows a sample login screen that is used to determine
    who the user is. The right-hand side of the image shows the list of groups or
    roles that the user does or does not belong to, which is used to determine what
    the user can do.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图像说明了认证和授权之间的区别。图像的左侧显示了一个用于确定用户身份的示例登录屏幕。图像的右侧显示了用户属于或不属于的组或角色列表，这用于确定用户可以做什么。
- en: Authentication
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 认证
- en: Blazor provides the **RemoteAuthenticatorView** component to make creating the
    various authentication pages easier. This component persists and controls state
    across authentication operations.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor 提供了 **RemoteAuthenticatorView** 组件，以简化创建各种认证页面的过程。此组件在认证操作之间持久化和控制状态。
- en: 'This is a high-level explanation of how authentication works:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这是对认证工作原理的高级解释：
- en: An anonymous user attempts to log in or requests a page with the `Authorize`
    attribute applied.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 匿名用户尝试登录或请求带有 `Authorize` 属性的页面。
- en: The user is redirected to the `/authentication/login` page.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户将被重定向到 `/authentication/login` 页面。
- en: The user enters their credentials.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户输入他们的凭证。
- en: If they are authenticated, they are redirected to the `/authentication/login-callback`
    page.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果他们已认证，他们将被重定向到 `/authentication/login-callback` 页面。
- en: However, if they are not authenticated, they are redirected to the `/authentication/login-failed`
    page.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然而，如果他们未认证，他们将被重定向到 `/authentication/login-failed` 页面。
- en: 'This is the code for a sample `Authentication` component that relies on the
    `RemoteAuthenticatorView` component to handle the various authentication actions:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这是依赖于 `RemoteAuthenticatorView` 组件处理各种认证操作的示例 `Authentication` 组件的代码：
- en: '**Authentication.razor**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**Authentication.razor**'
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the preceding code, the `Action` property is determined by the route, and
    the `LoggingIn` property is used to define the UI that is rendered while the user
    is logging in. The `LoggingIn` property is a `RenderFragment`. We do not need
    to provide the `LoggingIn` property since there is a default one defined by the
    `RemoteAuthenticatorView` component. We have only included it as an example. All
    the properties of the `RemoteAuthenticatorView` component that are of type `RenderFragment`
    have default values provided for them by the framework.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，`Action` 属性由路由确定，而 `LoggingIn` 属性用于定义用户登录时渲染的 UI。`LoggingIn` 属性是一个 `RenderFragment`。我们不需要提供
    `LoggingIn` 属性，因为 `RemoteAuthenticatorView` 组件已经定义了一个默认值。我们只将其包括作为示例。`RemoteAuthenticatorView`
    组件中所有类型为 `RenderFragment` 的属性都由框架提供了默认值。
- en: In the preceding code, only two of the properties of the `RemoteAuthenticatorView`
    component are defined. However, there are quite a few more properties available.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，`RemoteAuthenticatorView` 组件只定义了两个属性。然而，还有许多其他属性可用。
- en: 'These are the properties of the `RemoteAuthenticatorView` class:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是 `RemoteAuthenticatorView` 类的属性：
- en: '`Action`: the current action. The options are `LogIn`, `LogInCallback`, `LogInFailed`,
    `LogOut`, `LogOutCallback`, `LogOutFailed`, `LogOutSucceeded`, `Profile`, and
    `Register`.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Action`: 当前操作。选项包括 `LogIn`、`LogInCallback`、`LogInFailed`、`LogOut`、`LogOutCallback`、`LogOutFailed`、`LogOutSucceeded`、`Profile`
    和 `Register`。'
- en: '`ApplicationPaths`: the paths to the various authentication pages. Since we
    will be using the default values for each path, we will not be using this property.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ApplicationPaths`：各种认证页面的路径。由于我们将使用每个路径的默认值，因此我们不会使用此属性。'
- en: '`AuthenticationState`: the authentication state. It is persisted during the
    authentication operation. It is of type `TAuthenticationState`.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AuthenticationState`: 认证状态。在认证操作期间保持持久。它是 `TAuthenticationState` 类型。'
- en: '`CompletingLoggingIn`: the UI to display when `LogInCallback` is being handled.
    It is a `RenderFragment`.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CompletingLoggingIn`: 当处理 `LogInCallback` 时显示的 UI。它是一个 `RenderFragment`。'
- en: '`CompletingLogOut`: the UI to display when `LogOutCallback` is being handled.
    It is a `RenderFragment`.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CompletingLogOut`: 当处理 `LogOutCallback` 时显示的 UI。它是一个 `RenderFragment`。'
- en: '`LoggingIn`: the UI to display when `LogIn` is being handled. It is a `RenderFragment`.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LoggingIn`: 当处理 `LogIn` 时显示的 UI。它是一个 `RenderFragment`。'
- en: '`LogInFailed`: the UI to display when `LogInFailed` is being handled. It is
    a `RenderFragment`.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LogInFailed`: 当处理 `LogInFailed` 时显示的 UI。它是一个 `RenderFragment`。'
- en: '`LogOut`: the UI to display when `LogOut` is being handled. It is a `RenderFragment`.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LogOut`: 当处理 `LogOut` 时显示的 UI。它是一个 `RenderFragment`。'
- en: '`LogOutFailed`: the UI to display when `LogOutFailed` is being handled. It
    is a `RenderFragment`.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LogOutFailed`: 当处理 `LogOutFailed` 时显示的 UI。它是一个 `RenderFragment`。'
- en: '`LogOutSucceeded`: the UI to display when `LogOutSucceeded` is being handled.
    It is a `RenderFragment`.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LogOutSucceeded`: 当处理 `LogOutSucceeded` 时显示的 UI。它是一个 `RenderFragment`。'
- en: '`OnLogInSucceeded`: the event callback that is invoked when the log-in operation
    succeeds.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnLogInSucceeded`: 当登录操作成功时调用的回调事件。'
- en: '`OnLogOutSucceeded`: the event callback that is invoked when the logout operation
    succeeds.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnLogOutSucceeded`: 当注销操作成功时调用的回调事件。'
- en: '`Registering`: the UI to display when `Register` is being handled. It is a
    `RenderFragment`.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Registering`: 当处理 `Register` 时显示的 UI。它是一个 `RenderFragment`。'
- en: '`UserProfile`: the UI to display when `Profile` is being handled. It is a `RenderFragment`.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UserProfile`: 当处理 `Profile` 时显示的 UI。它是一个 `RenderFragment`。'
- en: Using the `RemoteAuthenticatorView` component makes it easy to handle the authentication
    process.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `RemoteAuthenticatorView` 组件可以轻松处理认证过程。
- en: Authorization
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 授权
- en: In Blazor WebAssembly applications, the authorization checks are all handled
    on the client. Since a malicious user can change the behavior of the client-side
    code, our authorization checks can be compromised. Therefore, we will only be
    using authorization to handle differences in the user interface that vary depending
    on the rights of the user.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Blazor WebAssembly 应用程序中，授权检查都在客户端处理。由于恶意用户可以更改客户端代码的行为，我们的授权检查可能会受到损害。因此，我们只会使用授权来处理根据用户权限而变化的用户界面差异。
- en: '**TIP**'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: Never trust the client!
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 永远不要相信客户端！
- en: Real security can only be enforced by using a backend server. We cannot authenticate
    our users on the client, nor can we reliably authorize their actions on the client.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 只有通过使用后端服务器，才能强制执行真实的安全。我们无法在客户端认证我们的用户，也无法在客户端可靠地授权他们的操作。
- en: Authentication and authorization work together to secure our applications. Authentication
    is used to determine who the user is, while authorization is used to determine
    what they can do.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 认证和授权协同工作以保护我们的应用程序。认证用于确定用户是谁，而授权用于确定他们可以做什么。
- en: In addition to the `RemoteAuthenticatorView` component, Blazor WebAssembly provides
    some other built-in components to help us work with authentication.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `RemoteAuthenticatorView` 组件之外，Blazor WebAssembly 还提供了一些其他内置组件，以帮助我们处理认证。
- en: Working with authentication
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与认证一起工作
- en: The `CascadingAuthenticationState` component and the `AuthorizeRouteView` component
    work together to make authentication simpler. The `CascadingAuthenticationState`
    component is responsible for cascading the user’s authentication state to all
    its descendants. It is typically used to wrap the `Router` component.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`CascadingAuthenticationState` 组件和 `AuthorizeRouteView` 组件协同工作，使认证更简单。`CascadingAuthenticationState`
    组件负责将用户的认证状态级联到所有后代。它通常用于包装 `Router` 组件。'
- en: 'In the following example, the `App` component relies on the `CascadingAuthenticationState`
    component to provide the user’s authentication state to all the routable components:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，`App` 组件依赖于 `CascadingAuthenticationState` 组件，为所有可路由组件提供用户的认证状态：
- en: '**IMPORTANT NOTE**'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: Sometimes we refer to routable components as pages.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我们将可路由组件称为页面。
- en: '**App.razor**'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**App.razor**'
- en: '[PRE1]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the preceding markup, the `Found` attribute contains the following `AuthorizeRouteView`
    component:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的标记中，`Found` 属性包含以下 `AuthorizeRouteView` 组件：
- en: '[PRE2]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the preceding code, the `Router` component is used to route the requests.
    If a valid route is found, it uses the `AuthorizeRouteView` component instead
    of the `RouteView` component to determine if the user is authorized to view the
    page. If they are not authorized and they have not yet been authenticated, it
    redirects the user to the `/authentication/login` page. However, if they are not
    authorized and they have been authenticated, it renders the error message.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，`Router` 组件用于路由请求。如果找到有效的路由，它将使用 `AuthorizeRouteView` 组件而不是 `RouteView`
    组件来确定用户是否有权查看页面。如果他们没有授权并且尚未认证，它将重定向用户到 `/authentication/login` 页面。然而，如果他们没有授权并且已经认证，它将渲染错误信息。
- en: 'Since the `App` component is using the `CascadingAuthenticationState` component,
    the `Task<AuthenticationState>` cascading parameter is supplied to each page.
    The following code uses it to populate the `userName` field:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `App` 组件正在使用 `CascadingAuthenticationState` 组件，因此 `Task<AuthenticationState>`
    级联参数被提供给每个页面。以下代码使用它来填充 `userName` 字段：
- en: '[PRE3]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the preceding code, the `authStateTask` parameter is used to cascade the
    value of the `AuthenticationState` from the `CascadingAuthenticationState` component.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，`authStateTask` 参数用于将 `CascadingAuthenticationState` 组件的 `AuthenticationState`
    值级联传递。
- en: Blazor WebAssembly uses the built-in DI service called `AuthenticationStateProvider`
    to determine whether the user is logged in. The `AuthenicationStateProvider` class
    provides information about the authentication state of the current user. The `User`
    property of the `AuthenicationStateProvider` provides the **ClaimsPrincipal**
    for the current user. The `ClaimsPrincipal` is simply the claims-based identity
    of the user.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor WebAssembly 使用名为 `AuthenticationStateProvider` 的内置 DI 服务来确定用户是否已登录。`AuthenicationStateProvider`
    类提供了关于当前用户认证状态的信息。`AuthenicationStateProvider` 的 `User` 属性提供了当前用户的 **ClaimsPrincipal**。`ClaimsPrincipal`
    简单来说就是基于声明的用户身份。
- en: By using the built-in components, we can confirm the identity of the user. Next,
    we need to determine what the user is authorized to do.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用内置组件，我们可以确认用户的身份。接下来，我们需要确定用户被授权执行的操作。
- en: Controlling the user interface using authorization
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用授权控制用户界面
- en: After a user is authenticated, authorization rules are used to control what
    the user can see and do. The `Authorize` attribute and the `AuthorizeView` component
    are used to control the user interface.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 用户认证后，授权规则用于控制用户可以看到和执行的操作。`Authorize` 属性和 `AuthorizeView` 组件用于控制用户界面。
- en: The Authorize attribute
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`Authorize` 属性'
- en: 'The `Authorize` attribute is used to require that the user is authorized to
    view the page that is decorated with the attribute. It should only be used on
    routable components. The following component includes the `Authorize` attribute:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`Authorize` 属性用于要求用户有权查看带有该属性的页面。它应该只用于可路由组件。以下组件包含 `Authorize` 属性：'
- en: '**Secure.razor**'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**Secure.razor**'
- en: '[PRE4]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: When an unauthenticated user tries to navigate to a page with the `Authorize`
    attribute, they are automatically redirected to the `/authentication/login` page.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当未认证的用户尝试导航到带有 `Authorize` 属性的页面时，他们将被自动重定向到 `/authentication/login` 页面。
- en: '**TIP**'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: You can require authentication for every page by adding the `Authorize` attribute
    to the `_Imports.razor` file. However, if you do that, you must add the `AllowAnonymous`
    attribute to the `Authentication` component or your users won’t be able to log
    in.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在 `_Imports.razor` 文件中添加 `Authorize` 属性来要求每个页面进行认证。但是，如果您这样做，您必须将 `AllowAnonymous`
    属性添加到 `Authentication` 组件，否则您的用户将无法登录。
- en: 'The `Authorize` component supports role-based and policy-based authorization.
    If the user has been authenticated and they try to navigate to a page that includes
    either role-based or policy-based authorization, and they do not meet the requirements,
    they will receive the message provided by the `App` component. In the preceding
    sample `App` component, the message is as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`Authorize` 组件支持基于角色的授权和基于策略的授权。如果用户已经认证并且尝试导航到包含基于角色或基于策略授权的页面，并且不符合要求，他们将收到
    `App` 组件提供的信息。在前面的示例 `App` 组件中，信息如下：'
- en: '[PRE5]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This example uses the `Roles` parameter for role-based authorization:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例使用 `Roles` 参数进行基于角色的授权：
- en: '[PRE6]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the preceding example, only users who are in either the `admin` or `siteadmin`
    role can access this page.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，只有处于 `admin` 或 `siteadmin` 角色的用户才能访问此页面。
- en: 'This example uses the `Policy` parameter for policy-based authorization:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例使用 `Policy` 参数进行基于策略的授权：
- en: '[PRE7]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the preceding example, only users who meet the requirements of the `content-admin`
    policy can access the page.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，只有满足`content-admin`策略要求的用户才能访问该页面。
- en: The `Authorize` attribute should only be used on routable components since authorization
    is not performed for child components within a page.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 应仅在可路由组件上使用`Authorize`属性，因为页面内的子组件不会执行授权。
- en: For example, if we create a routable component called `Secure` and secure it
    using either role-based or policy-based authorization, the user cannot navigate
    to the page if their credentials do not meet the requirements. However, if we
    place the same component in another page that the user is authorized to view,
    they can see the content of the `Secure` component.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们创建一个名为`Secure`的可路由组件并使用基于角色或基于策略的授权来保护它，那么如果用户的凭据不符合要求，用户将无法导航到该页面。然而，如果我们将相同的组件放置在用户被授权查看的另一个页面上，他们可以看到`Secure`组件的内容。
- en: To only authorize the display of certain parts of a page, use the `AuthorizeView`
    component.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要仅授权显示页面的一定部分，请使用`AuthorizeView`组件。
- en: The AuthorizeView component
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`AuthorizeView`组件'
- en: The `AuthorizeView` component is used to control the parts of the user interface
    that are displayed based on what the user is authorized to view.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`AuthorizeView`组件用于控制基于用户授权可以查看的内容的用户界面部分。'
- en: '**IMPORTANT NOTE**'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: By default, non-authenticated users are not authorized to view any content.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，未经认证的用户无权查看任何内容。
- en: 'The `AuthorizeView` class has the following properties:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`AuthorizeView`类具有以下属性：'
- en: '`Authorized`: the content that is rendered if the user is authorized. It is
    a `RenderFragment`.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Authorized`：当用户被授权时渲染的内容。它是一个`RenderFragment`。'
- en: '`Authorizing`: the content that is rendered as the user is being authenticated.
    It is a `RenderFragment`.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Authorizing`：在用户进行认证时渲染的内容。它是一个`RenderFragment`。'
- en: '`NotAuthorized`: the content that is rendered if the user is not authorized.
    It is a `RenderFragment`.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NotAuthorized`：当用户未授权时渲染的内容。它是一个`RenderFragment`。'
- en: '`Policy`: the policy that determines if the content can be rendered.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Policy`：确定内容是否可以渲染的策略。'
- en: '`Roles`: a comma-delimited list of the roles that are allowed to render the
    content.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Roles`：允许渲染内容的角色的逗号分隔列表。'
- en: Unlike the `RemoteAuthenticatorView` component, the framework does not provide
    default values for the `RenderFragments` used by the `AuthorizeView` component.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 与`RemoteAuthenticatorView`组件不同，框架没有为`AuthorizeView`组件使用的`RenderFragments`提供默认值。
- en: 'The following code uses the `AuthorizeView` component to create a `LoginDisplay`
    component:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码使用`AuthorizeView`组件创建`LoginDisplay`组件：
- en: '**LoginDisplay.razor**'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**LoginDisplay.razor**'
- en: '[PRE8]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The preceding example provides both the `Authorized` template and the `NotAuthorized`
    template. If the user is authorized, their name is displayed, and the **Log out**
    button is rendered. If the user is not authorized, the **Log in** link is rendered.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的示例提供了`Authorized`模板和`NotAuthorized`模板。如果用户被授权，则显示其姓名，并渲染**注销**按钮。如果用户未授权，则渲染**登录**链接。
- en: The `AuthorizeView` component supports role-based and policy-based authorization.
    If the user has been authenticated and they try to navigate to a page that includes
    either role-based or policy-based authorization, and they meet the requirements,
    the UI in the `Authorized` template will be rendered; otherwise, the UI in the
    `NotAuthorized` template will be rendered.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`AuthorizeView`组件支持基于角色和基于策略的授权。如果用户已经认证并且他们尝试导航到一个包含基于角色或基于策略的授权的页面，并且他们满足要求，则渲染`Authorized`模板中的UI；否则，渲染`NotAuthorized`模板中的UI。'
- en: 'This example uses the `Roles` parameter for role-based authorization:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 本例使用`Roles`参数进行基于角色的授权：
- en: '[PRE9]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the preceding example, only users who are in either the `admin` or `siteadmin`
    role will have the indicated text rendered.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，只有属于`admin`或`siteadmin`角色的用户才会渲染指示的文本。
- en: 'This example uses the `Policy` parameter for policy-based authorization:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 本例使用`Policy`参数进行基于策略的授权：
- en: '[PRE10]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the preceding example, only users who meet the requirements of the `content-admin`
    policy will have the indicated text rendered.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，只有满足`content-admin`策略要求的用户才会渲染指示的文本。
- en: The `AuthorizeView` component can be used in the `NavMenu` component. However,
    although a component does not appear in the `NavMenu`, that does not prevent the
    user from navigating directly to the component. So, you must always set authorization
    rules at the component level.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`AuthorizeView` 组件可以在 `NavMenu` 组件中使用。然而，尽管组件没有出现在 `NavMenu` 中，但这并不能阻止用户直接导航到该组件。因此，您必须在组件级别始终设置授权规则。'
- en: '**TIP**'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: Never rely on the `NavMenu` component to hide components from unauthorized users.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 不要依赖 `NavMenu` 组件来隐藏未授权用户无法访问的组件。
- en: We can use the `Authorize` attribute and the `AuthorizeView` component to force
    the user to be authenticated and to hide portions of the user interface.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `Authorize` 属性和 `AuthorizeView` 组件强制用户进行身份验证并隐藏用户界面的部分。
- en: Now, let’s get a quick overview of the project that we are going to build in
    this chapter.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们快速概述一下本章将要构建的项目。
- en: Creating the claims viewer project
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建声明查看器项目
- en: 'The Blazor WebAssembly application that we are going to build in this chapter
    is a claims viewer. First, we will add the application to Azure AD. After we have
    added the application, we will add a group and a user to Azure AD. We will add
    the required NuGet packages and configure the project to use MSAL authentication.
    Next, we will add components for authentication and login display. We will also
    add the following routable components: **Secure** and **WhoAmI**. Finally, we
    will add and test an authentication policy.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将构建的 Blazor WebAssembly 应用程序是一个声明查看器。首先，我们将应用程序添加到 Azure AD。添加应用程序后，我们将向
    Azure AD 添加一个组和用户。我们将添加所需的 NuGet 包并配置项目以使用 MSAL 身份验证。接下来，我们将添加身份验证和登录显示组件。我们还将添加以下可路由组件：**Secure**
    和 **WhoAmI**。最后，我们将添加并测试一个身份验证策略。
- en: 'The following is a screenshot of the **WhoAmI** component from the completed
    application:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是从完成的应用程序中截取的 **WhoAmI** 组件的截图：
- en: '![Text  Description automatically generated](img/B18471_10_02.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![文本  自动生成的描述](img/B18471_10_02.png)'
- en: 'Figure 10.2: The WhoAmI component from Claims Viewer'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.2：Claims Viewer 中的 WhoAmI 组件
- en: The build time for this project is approximately 60 minutes.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 此项目的构建时间大约为 60 分钟。
- en: Project overview
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目概述
- en: The `ClaimsViewer` project will be created by using Microsoft’s **Blazor WebAssembly
    App** **Empty** project template to create an empty Blazor WebAssembly project.
    After we have created our project, we will configure Azure AD by adding the application,
    a new group, and a new user to our Azure AD tenant. Then, we will add the required
    NuGet packages and update our project’s settings. Next, we will add an authentication
    component and a login display component. We will also add a component to display
    the contents of our claims. Finally, we will add and test an authentication policy.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Microsoft 的 **Blazor WebAssembly App Empty** 项目模板创建一个空的 Blazor WebAssembly
    项目，`ClaimsViewer` 项目将通过这种方式创建。创建完我们的项目后，我们将通过添加应用程序、一个新的组和一个新的用户到我们的 Azure AD
    租户中来配置 Azure AD。然后，我们将添加所需的 NuGet 包并更新项目设置。接下来，我们将添加一个身份验证组件和一个登录显示组件。我们还将添加一个用于显示声明内容的组件。最后，我们将添加并测试一个身份验证策略。
- en: '**IMPORTANT NOTE**'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: Since Microsoft is constantly updating the Azure Portal, some of the screens
    in the Azure Portal may no longer match the information in this chapter.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Microsoft 持续更新 Azure Portal，Azure Portal 中的一些屏幕可能不再与本章中的信息匹配。
- en: Create the claims viewer project
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建声明查看器项目
- en: 'We need to create a new Blazor WebAssembly app. We do this as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建一个新的 Blazor WebAssembly 应用程序。我们可以这样做：
- en: Open Visual Studio 2022.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio 2022。
- en: Click the **Create a new project** button.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **创建新项目** 按钮。
- en: Press *Alt*+*S* to enter the **Search for templates** textbox.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Alt*+*S* 进入 **搜索模板** 文本框。
- en: Enter `Blazor` and press the *Enter* key.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 `Blazor` 并按 *Enter* 键。
- en: 'The following screenshot shows the **Blazor WebAssembly App Empty** project
    template:'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图显示了 **Blazor WebAssembly App Empty** 项目模板：
- en: '![Graphical user interface, text, application, chat or text message  Description
    automatically generated](img/B18471_10_03.png)'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形用户界面、文本、应用程序、聊天或文本消息  自动生成的描述](img/B18471_10_03.png)'
- en: 'Figure 10.3: Blazor WebAssembly App Empty project template'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 10.3：Blazor WebAssembly App Empty 项目模板
- en: Select the **Blazor WebAssembly App Empty** project template and click the **Next**
    button.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **Blazor WebAssembly App Empty** 项目模板并点击 **下一步** 按钮。
- en: Enter `ClaimsViewer` in the **Project name** textbox and click the **Next**
    button.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **项目名称** 文本框中输入 `ClaimsViewer` 并点击 **下一步** 按钮。
- en: 'This is a screenshot of the dialog used to configure our new project:'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是用于配置我们新项目的对话框截图：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_10_04.png)'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B18471_10_04.png)'
- en: 'Figure 10.4: Blazor WebAssembly App Empty Project Template'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图10.4：Blazor WebAssembly App空项目模板
- en: '**TIP**'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**提示**'
- en: In the preceding example, we placed the `ClaimsViewer` project into the `E:/Blazor`
    folder. However, the location of this project is not important.
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们将`ClaimsViewer`项目放置在`E:/Blazor`文件夹中。然而，此项目的位置并不重要。
- en: Select **.NET 7.0** as the version of the `Framework` to use.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**.NET 7.0**作为要使用的`Framework`版本。
- en: Check the **Configure for HTTPS** checkbox.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**配置HTTPS**复选框。
- en: Uncheck the **ASP.NET Core Hosted** checkbox.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消选择**ASP.NET Core托管**复选框。
- en: Uncheck the **Progressive Web Application** checkbox.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消选择**渐进式Web应用程序**复选框。
- en: 'This is a screenshot of the dialog used to collect additional information about
    our new project:'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是用于收集有关我们新项目额外信息的对话框截图：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_10_05.png)'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B18471_10_05.png)'
- en: 'Figure 10.5: Additional information dialog'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图10.5：额外信息对话框
- en: Click the **Create** button.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建**按钮。
- en: We have created an empty `ClaimsViewer` Blazor WebAssembly project. We will
    use Azure AD to provide the identity services.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已创建了一个空的`ClaimsViewer` Blazor WebAssembly项目。我们将使用Azure AD来提供身份服务。
- en: Add the application to Azure AD
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将应用程序添加到Azure AD
- en: 'We need to register the application in Azure AD and add an `appsettings.json`
    file to the project. We do this as follows:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在Azure AD中注册应用程序并向项目中添加一个`appsettings.json`文件。我们这样做如下：
- en: Right-click the `wwwroot` folder and select the **Add**, **New Item** option
    from the menu.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`wwwroot`文件夹，从菜单中选择**添加**，**新建项**选项。
- en: Enter `json` in the **Search** box.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**搜索**框中输入`json`。
- en: Select **App Settings File**.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**应用程序设置文件**。
- en: Name the new item `appsettings.json`.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新项目命名为`appsettings.json`。
- en: Click the **Add** button.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加**按钮。
- en: 'Replace all the text in the file with the following:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件中的所有文本替换为以下内容：
- en: '[PRE11]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: After we add the application to Azure AD, we will replace the `{Directory (tenant)
    ID}` and the `{Application (client) ID}` placeholders used in the preceding code.
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在我们将应用程序添加到Azure AD之后，我们将替换前面代码中使用的`{Directory (tenant) ID}`和`{Application (client)
    ID}`占位符。
- en: Navigate to the Azure Portal, [https://portal.azure.com](https://portal.azure.com).
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到Azure门户，[https://portal.azure.com](https://portal.azure.com)。
- en: Open your `Azure Active Directory` resource.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的`Azure Active Directory`资源。
- en: '**IMPORTANT NOTE**'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: An instance of `Azure Active Directory` was automatically created when you signed
    up for a Microsoft Cloud service subscription.
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当您注册Microsoft云服务订阅时，会自动创建一个`Azure Active Directory`实例。
- en: Select **App registration** from the **Add** menu.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**添加**菜单中选择**应用程序注册**。
- en: '![Graphical user interface, application  Description automatically generated](img/B18471_10_06.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序  自动生成的描述](img/B18471_10_06.png)'
- en: 'Figure 10.6: App registration in Azure AD'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.6：Azure AD中的应用程序注册
- en: For the user-facing display name, enter `ClaimsViewer`.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于面向用户的显示名称，输入`ClaimsViewer`。
- en: For the supported account types, select the **Accounts in this organizational
    directory only** option.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于支持的账户类型，选择**仅此组织目录中的账户**选项。
- en: 'For the redirect URI, select **Single-page application (SPA)** as the platform
    and enter the following text for the URI:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于重定向URI，选择**单页应用程序（SPA）**作为平台，并输入以下文本作为URI：
- en: '[PRE12]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following screenshot shows the completed **Register an application** dialog:'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图显示了完成的**注册应用程序**对话框：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_10_07.png)'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B18471_10_07.png)'
- en: 'Figure 10.7: Register an application dialog'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图10.7：注册应用程序对话框
- en: Click the **Register** button.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**注册**按钮。
- en: 'The following screenshot highlights the information that we need to copy to
    the `appsettings.json` file in our project:'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图突出了我们需要复制到我们项目中`appsettings.json`文件中的信息：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_10_08.png)'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B18471_10_08.png)'
- en: 'Figure 10.8: ClaimsViewer app in Azure AD'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图10.8：Azure AD中的ClaimsViewer应用程序
- en: Return to Visual Studio.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回Visual Studio。
- en: Open the `appsettings.json` file.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`appsettings.json`文件。
- en: Replace the **{Directory (tenant) ID}** placeholder with the value of `Directory
    (tenant) ID` from Azure AD.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **{目录（租户）ID}** 占位符替换为从 Azure AD 获取的 `目录（租户）ID` 的值。
- en: Replace the **{Application (client) ID}** placeholder with the value of `Application
    (client) ID` from Azure AD.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **{应用程序（客户端）ID}** 占位符替换为从 Azure AD 获取的 `应用程序（客户端）ID` 的值。
- en: To test our application, we need to add at least one user. Also, later in this
    project, we will need to use a group to enable policy-based authentication. So,
    let’s add a user and a group.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试我们的应用程序，我们需要添加至少一个用户。此外，在本项目的后期，我们还需要使用一个组来启用基于策略的认证。因此，让我们添加一个用户和一个组。
- en: Add a user and a group to Azure AD
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将用户和组添加到 Azure AD
- en: 'Before we exit the Azure Portal, let’s create a new group and add a new user
    to that group. We do this as follows:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们退出 Azure Portal 之前，让我们创建一个新的组并向该组添加一个新用户。我们这样做如下：
- en: Return to your `Azure Active Directory` tenant.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回您的 `Azure Active Directory` 租户。
- en: Select **Groups** from the menu.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从菜单中选择 **组**。
- en: Select **New group** from the top menu.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从顶部菜单中选择 **新建组**。
- en: For the **Group type**, leave **Security** selected.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于 **组类型**，保留 **安全** 选中。
- en: For the **Group name**, enter `ViewAll`.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于 **组名**，输入 `ViewAll`。
- en: For the **Group description**, enter `Members` `can` `view` `all` `of` `the`
    `claims`.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于 **组描述**，输入 `Members` `can` `view` `all` `of` `the` `claims`。
- en: 'The following screenshot shows the completed **New Group** dialog:'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图显示了完成的 **新组** 对话框：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_10_09.png)'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B18471_10_09.png)'
- en: 'Figure 10.9: New Group dialog in Azure AD'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 10.9：Azure AD 中的新组对话框
- en: Click the **Create** button.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **创建** 按钮。
- en: 'You should now see the new group. If you do not see the new group, select the
    **Refresh** option from the top menu. The following screenshot highlights the
    information that we will need to complete this project:'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您现在应该看到新组。如果您看不到新组，请从顶部菜单中选择 **刷新** 选项。以下截图突出显示了我们需要完成此项目的信息：
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18471_10_10.png)'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序  自动生成的描述](img/B18471_10_10.png)'
- en: 'Figure 10.10: Groups in Azure AD'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 10.10：Azure AD 中的组
- en: Copy the **Object Id** for your new group and save it for later.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制您新组的 **对象 ID** 并保存以备后用。
- en: We will need the `Object Id` of the group when we add an authentication policy
    to our project.
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当我们在项目中添加认证策略时，我们需要该组的 `对象 ID`。
- en: Return to your `Azure Active Directory` tenant.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回您的 `Azure Active Directory` 租户。
- en: Select **App registrations** from the menu.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从菜单中选择 **应用程序注册**。
- en: Click on the **ClaimsViewer** application.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **ClaimsViewer** 应用程序。
- en: Select **Token configuration** from the menu.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从菜单中选择 **令牌配置**。
- en: Click the **Add groups claim** option.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **添加组声明** 选项。
- en: Check the **Security groups** checkbox.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **安全组** 复选框。
- en: Click the **Add** button.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **添加** 按钮。
- en: Return to your **Azure Active Directory** resource.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回您的 **Azure Active Directory** 资源。
- en: Select **Users** from the menu.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从菜单中选择 **用户**。
- en: Select **Create new user** from the **New user** top menu as shown in the following
    screenshot:![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_10_11.png)
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **新用户** 顶部菜单中选择 **创建新用户**，如图所示：![图形用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B18471_10_11.png)
- en: 'Figure 10.11: Create new user in Azure AD'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 10.11：在 Azure AD 中创建新用户
- en: Enter a **Username** and **Name** for the new user.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为新用户输入 **用户名** 和 **姓名**。
- en: Enter a **Password**.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 **密码**。
- en: Add the **ViewAll** group.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 **ViewAll** 组。
- en: Click the **Create** button.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **创建** 按钮。
- en: You should now see your new user. If you do not see your new user, select the
    **Refresh** option from the top menu.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在应该看到您的新用户。如果您看不到您的新用户，请从顶部菜单中选择 **刷新** 选项。
- en: You have added a new user to Azure AD that is a member of the **ViewAll** group.
    We have finished setting up Azure AD. Now we can return to Visual Studio.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 您已向 Azure AD 添加了一个新用户，该用户是 **ViewAll** 组的成员。我们已经完成了 Azure AD 的设置。现在我们可以返回 Visual
    Studio。
- en: Add the required NuGet packages
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加所需的 NuGet 包
- en: 'We need to add three NuGet packages to our application. We do this as follows:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要向我们的应用程序添加三个 NuGet 包。我们这样做如下：
- en: Return to Visual Studio.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回 Visual Studio。
- en: Select **Tools**, **NuGet Package Manager**, and **Package Manager Console**
    from the Visual Studio menu to open the **Package Manager Console**.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Visual Studio 菜单中选择 **工具**、**NuGet 包管理器** 和 **包管理器控制台** 以打开 **包管理器控制台**。
- en: 'Enter the following command:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令：
- en: '[PRE13]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Press the *Enter* key.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下 *Enter* 键。
- en: You have installed the ASP.NET Core authorization classes.
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您已安装了 ASP.NET Core 授权类。
- en: 'Enter the following command:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令：
- en: '[PRE14]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Press the *Enter* key.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下 *Enter* 键。
- en: You have installed authentication and authorization classes for Blazor applications.
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您已为 Blazor 应用程序安装了认证和授权类。
- en: 'Enter the following command:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令：
- en: '[PRE15]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Press the *Enter* key.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下 *Enter* 键。
- en: You have installed the `Microsoft Authentication Library`. It is used to acquire
    security tokens from the Microsoft identity platform. The tokens can be used to
    both authenticate users and access Web APIs.
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您已安装了 `Microsoft Authentication Library`。它用于从 Microsoft 身份平台获取安全令牌。这些令牌可以用于认证用户和访问
    Web API。
- en: Open the `_Imports.razor` file.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `_Imports.razor` 文件。
- en: 'Add the following `using` statements:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下 `using` 语句：
- en: '[PRE16]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: All the required NuGet packages have been installed. Now we need to update some
    of the project’s settings.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 所有必需的 NuGet 包都已安装。现在我们需要更新一些项目设置。
- en: Enable authentication
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用认证
- en: 'We need to update some of the project’s files to enable authentication. We
    do this as follows:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要更新一些项目文件以启用认证。我们这样做如下：
- en: Open the `wwwroot/index.html` file.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `wwwroot/index.html` 文件。
- en: 'Add the following `script` element above the existing `script` element:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在现有的 `script` 元素上方添加以下 `script` 元素：
- en: '[PRE17]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Open the `Properties/launchSettings.json` file.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Properties/launchSettings.json` 文件。
- en: 'Add the following to `iisSettings`:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `iisSettings` 中添加以下内容：
- en: '[PRE18]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Open the `Program.cs` file.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Program.cs` 文件。
- en: 'Add the following code above the last line in the file:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件的最后一行上方添加以下代码：
- en: '[PRE19]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In the preceding code, the application is instructed to reference the **AzureAd**
    section of the `appsetting.json` file for the parameters that are required to
    authenticate the app. The value of `LoginMode` can be either `popup` or `redirect`.
    We are using `redirect` because the popup login dialog is not modal and can easily
    get hidden behind other windows.
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的代码中，应用程序被指示引用 `appsetting.json` 文件的 **AzureAd** 部分，以获取认证应用程序所需的参数。`LoginMode`
    的值可以是 `popup` 或 `redirect`。我们使用 `redirect`，因为弹出登录对话框不是模态的，并且很容易被其他窗口隐藏。
- en: Open the `App.Razor` file.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `App.Razor` 文件。
- en: 'Add the following directive:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下指令：
- en: '[PRE20]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Surround the `Router` element with the following `CascadingAuthenticationState`
    element:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `Router` 元素用以下 `CascadingAuthenticationState` 元素包围：
- en: '[PRE21]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Replace the `RouteView` element with the following `AuthorizeRouteView` element:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `RouteView` 元素替换为以下 `AuthorizeRouteView` 元素：
- en: '[PRE22]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In the preceding code, if the user is not authorized and they have not been
    authenticated, they are redirected to the `authentication/login` page. However,
    if they are not authorized and they have been authenticated, the error message
    is rendered.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，如果用户未经授权且未进行认证，他们将被重定向到 `authentication/login` 页面。然而，如果他们未经授权但已进行认证，将渲染错误消息。
- en: We have enabled authentication in our application. Now we need to add an `Authentication`
    component.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已在应用程序中启用了认证。现在我们需要添加一个 `Authentication` 组件。
- en: Add an Authentication component
  id: totrans-267
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加一个认证组件
- en: 'We need to add an `Authentication` component to handle our authentication actions.
    We do this as follows:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要添加一个 `Authentication` 组件来处理我们的认证操作。我们这样做如下：
- en: Right-click the `Pages` folder and select the **Add**, **Razor Component** option
    from the menu.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击 `Pages` 文件夹，从菜单中选择 **添加**，**Razor 组件** 选项。
- en: Name the new component `Authentication`.
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新组件命名为 `Authentication`。
- en: 'Replace all the text in the file with the following:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用以下内容替换文件中的所有文本：
- en: '[PRE23]'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: By leveraging the power of the `RemoteAuthenticatorView` component, we were
    able to create an `Authentication` component with only a few lines of code. Now
    let’s add a way for the users to log in and out of our application.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用 `RemoteAuthenticatorView` 组件的强大功能，我们仅用几行代码就创建了一个 `Authentication` 组件。现在让我们添加一种让用户登录和注销我们应用程序的方法。
- en: Add a LoginDisplay component
  id: totrans-274
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加一个 LoginDisplay 组件
- en: 'We will add a `LoginDisplay` component to log the users in and out of our application.
    We do this as follows:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加一个 `LoginDisplay` 组件来登录和注销我们的应用程序。我们这样做如下：
- en: Right-click the `ClaimsViewer` project and select the **Add**, **New Folder**
    option from the menu.
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击 `ClaimsViewer` 项目，从菜单中选择 **添加**，**新建文件夹** 选项。
- en: Name the new folder `Shared`.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新文件夹命名为 `Shared`。
- en: Right-click the `Shared` folder and select the **Add**, **Razor Component**
    option from the menu.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击 `Shared` 文件夹，从菜单中选择 **添加**，**Razor 组件** 选项。
- en: Name the new component `LoginDisplay`.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新组件命名为 `LoginDisplay`。
- en: 'Replace all the text in the file with the following:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用以下内容替换文件中的所有文本：
- en: '[PRE24]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The preceding markup includes an `AuthorizeView` component. If the user has
    been authenticated, the **Log out of Claims Viewer** button is rendered. If the
    user has not been authenticated, the **Log in to Claims Viewer** button is rendered.
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的标记包括一个`AuthorizeView`组件。如果用户已经认证，则渲染**退出 Claims Viewer**按钮。如果用户尚未认证，则渲染**登录到
    Claims Viewer**按钮。
- en: 'Add the following code to the code block:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到代码块中：
- en: '[PRE25]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Both the `BeginLogin` method and the `BeginLogout` method redirect the user
    to the `Authentication` page. The `BeginLogin` method sets the action parameter
    to `login`, and the `BeginLogout` method sets the action parameter to `logout`
    and includes a value for the `ReturnUrl`. In this example, the `ReturnUrl` is
    the `Home` page.
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`BeginLogin`方法和`BeginLogout`方法都将用户重定向到`Authentication`页面。`BeginLogin`方法将操作参数设置为`login`，而`BeginLogout`方法将操作参数设置为`logout`并包含一个`ReturnUrl`的值。在此示例中，`ReturnUrl`是`Home`页面。'
- en: Open the `_Imports.razor` file.
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`_Imports.razor`文件。
- en: 'Add the following `using` statement:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下`using`语句：
- en: '[PRE26]'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Open the `MainLayout.razor` file.
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`MainLayout.razor`文件。
- en: 'Update the `main` element to the following:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`main`元素更新为以下内容：
- en: '[PRE27]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Since we have added the `LoginDisplay` component to the `MainLayout` component,
    it will appear on every page of our application.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经将`LoginDisplay`组件添加到`MainLayout`组件中，它将出现在我们应用程序的每个页面上。
- en: Now that the users can log in and log out, let’s test our application by adding
    the `Authorize` attribute to a routable component.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 现在用户可以登录和登出，让我们通过向可路由组件添加`Authorize`属性来测试我们的应用程序。
- en: Add a Secure component
  id: totrans-294
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加一个 Secure 组件
- en: 'We will add the routable `Secure` component to demonstrate the `Authorize`
    attribute. We do this as follows:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加可路由的`Secure`组件来演示`Authorize`属性。我们这样做如下：
- en: Right-click the `Pages` folder and select the **Add**, **Razor Component** option
    from the menu.
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`Pages`文件夹，从菜单中选择**添加**，**Razor 组件**选项。
- en: Name the new component `Secure`.
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新组件命名为`Secure`。
- en: 'Replace all the text in the file with the following:'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件中的所有文本替换为以下内容：
- en: '[PRE28]'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Open the `Pages`/`Index.razor` page.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Pages`/`Index.razor`页面。
- en: 'Replace the contents of the `h1` element with the following:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`h1`元素的内容替换为以下内容：
- en: '[PRE29]'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Press *Ctrl*+*F5* to start the application without debugging.
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Ctrl*+*F5*启动应用程序，不进行调试。
- en: Click the **Log in to Claims Viewer** button.
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**登录到 Claims Viewer**按钮。
- en: Enter your credentials and click the **Sign in** button.
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入您的凭据并点击**登录**按钮。
- en: 'The first time you sign in, you will receive the following dialog:'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第一次登录时，您将收到以下对话框：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_10_12.png)'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B18471_10_12.png)'
- en: 'Figure 10.12: Permissions requested dialog'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图10.12：请求权限对话框
- en: Click the **Accept** button.
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**接受**按钮。
- en: 'After you click the **Accept** button, you will receive the following dialog:'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 点击**接受**按钮后，您将收到以下对话框：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_10_13.png)'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B18471_10_13.png)'
- en: 'Figure 10.13: Security Defaults dialog'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图10.13：安全默认值对话框
- en: Click the **Skip for now** link.
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**稍后跳过**链接。
- en: '**IMPORTANT NOTE**'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: Do not click the **Next** button on the preceding dialog unless you want to
    use Microsoft Authenticator.
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您不想使用Microsoft Authenticator，请不要点击前面的对话框中的**下一步**按钮。
- en: Click the **Yes** button when asked if you want to stay signed in.
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当询问您是否想保持登录状态时，点击**是**按钮。
- en: You are now authenticated. Notice that the `LoginDisplay` has been updated to
    display the **Log out of Claims Viewer** button and the user’s name.
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您现在已认证。请注意，`LoginDisplay`已更新以显示**退出 Claims Viewer**按钮和用户名。
- en: Click the **Secure Page** link.
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**Secure Page**链接。
- en: '**IMPORTANT NOTE**'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: If you have not yet been authenticated when you click the **Secure Page** link,
    you will be forced to log in because the page includes an `Authenticate` attribute.
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您点击**Secure Page**链接时尚未认证，您将被强制登录，因为该页面包含一个`Authenticate`属性。
- en: Click the **Log out of Claims Viewer** button.
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**退出 Claims Viewer**按钮。
- en: Pick the account to sign out of.
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择要登出的账户。
- en: Close the browser.
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭浏览器。
- en: We have demonstrated the `Authorize` attribute. Now let’s use the `AuthorizeView`
    component again.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经演示了`Authorize`属性。现在让我们再次使用`AuthorizeView`组件。
- en: Add a WhoAmI component
  id: totrans-325
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加一个 WhoAmI 组件
- en: 'We need to create the `WhoAmI` component that will be used to display information
    about the user. We will use the `AuthorizeView` component to render different
    information based on the user’s authentication status. We do this as follows:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建一个 `WhoAmI` 组件，用于显示有关用户的信息。我们将使用 `AuthorizeView` 组件根据用户的身份验证状态渲染不同的信息。我们这样做如下：
- en: Return to Visual Studio.
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回 Visual Studio。
- en: Right-click the `Pages` folder and select the **Add**,**Razor Component** option
    from the menu.
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击 `Pages` 文件夹，从菜单中选择 **添加**，**Razor 组件** 选项。
- en: Name the new component `WhoAmI`.
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新组件命名为 `WhoAmI`。
- en: 'Replace all the text in the file with the following:'
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件中的所有文本替换为以下内容：
- en: '[PRE30]'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The preceding code renders the name of the user if they have been authenticated.
    If the user has not yet been authenticated, the warning message is rendered instead.
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述代码在用户已认证的情况下渲染用户的名字。如果用户尚未认证，则渲染警告信息。
- en: 'Add the following code to the code block:'
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到代码块中：
- en: '[PRE31]'
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: In the preceding code, the value of `authStateTask` is cascading from the `App`
    component.
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的代码中，`authStateTask` 的值是从 `App` 组件级联下来的。
- en: Press *Ctrl*+*F5* to start the application without debugging.
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Ctrl*+*F5* 以无调试模式启动应用程序。
- en: Click the **Who Am I** link.
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **我是谁** 链接。
- en: The `AuthorizeView` component is rendering the text in the `NotAuthorized` element.
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`AuthorizeView` 组件正在渲染 `NotAuthorized` 元素中的文本。'
- en: Click the **Log in to Claims Viewer** button.
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **登录到声明查看器** 按钮。
- en: Provide your credentials and complete the login process.
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供您的凭据并完成登录过程。
- en: The `AuthorizeView` component is rendering the user’s name.
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`AuthorizeView` 组件正在渲染用户的名字。'
- en: Click the **Log out of Claims Viewer** button.
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **从声明查看器注销** 按钮。
- en: The preceding code sets the value of `myClaims` to the list of the user’s claims.
    But how does my app get the list of claims? The claims come from the ID token
    that is sent from Azure AD. We can view the ID token by using the browser’s developer
    tools. The ID token is a **JSON Web Token** (**JWT**).
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将 `myClaims` 的值设置为用户的声明列表。但我的应用程序是如何获取声明列表的呢？声明来自 Azure AD 发送的 ID 令牌。我们可以通过使用浏览器的开发者工具来查看
    ID 令牌。ID 令牌是一个 **JSON Web Token** (**JWT**)。
- en: View the JSON Web Token (JWT)
  id: totrans-344
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看JSON Web Token (JWT)
- en: 'We will view the ID token sent from Azure AD to our web app. The ID token uses
    JWT to share security information between a server and a client. We do this as
    follows:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将查看从 Azure AD 发送到我们 Web 应用的 ID 令牌。ID 令牌使用 JWT 在服务器和客户端之间共享安全信息。我们这样做如下：
- en: Press *F12* to open the browser’s developer tools.
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *F12* 打开浏览器的开发者工具。
- en: Select the **Network** tab.
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **网络** 选项卡。
- en: Click the **Log in to Claims Viewer** button.
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **登录到声明查看器** 按钮。
- en: Provide your credentials and complete the login process.
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供您的凭据并完成登录过程。
- en: 'Click on **token** and select the **Preview** tab, as shown in the following
    screenshot:'
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **token** 并选择 **预览** 选项卡，如图下所示：
- en: '![Text  Description automatically generated](img/B18471_10_14.png)'
  id: totrans-351
  prefs: []
  type: TYPE_IMG
  zh: '![文本描述自动生成](img/B18471_10_14.png)'
- en: 'Figure 10.14: Sample Token'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.14：示例令牌
- en: Copy the value of `id_token` to the clipboard.
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `id_token` 的值复制到剪贴板。
- en: Navigate to [https://jwt.ms/](https://jwt.ms/).
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 导航到 [https://jwt.ms/](https://jwt.ms/)。
- en: Paste the contents of the clipboard into the empty text area.
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将剪贴板的内容粘贴到空文本区域中。
- en: After you paste the contents of your token, the decoded token is rendered. This
    is the information that will be displayed on our **WhoAmI** page. Next to the
    **Decoded Token** tab is the **Claims** tab.
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在您粘贴令牌内容后，将渲染解码后的令牌。这是将在我们的 **WhoAmI** 页面上显示的信息。在 **解码令牌** 选项卡旁边是 **声明** 选项卡。
- en: Click on the **Claims** tab to learn more about each of the claims in the token.
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **声明** 选项卡以了解令牌中每个声明的详细信息。
- en: Close the browser.
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭浏览器。
- en: Now that we know what to expect on our **WhoAmI** page, let’s finish it.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经知道我们的 **WhoAmI** 页面上将有什么，让我们完成它。
- en: Add an authentication policy
  id: totrans-360
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加身份验证策略
- en: 'We want to limit access to the list of users’ claims to only users who are
    members of the `ViewAll` group in Azure AD. To do that, we will add an authentication
    policy. We do this as follows:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望将用户声明的列表访问权限限制为仅限于 Azure AD 中的 `ViewAll` 组成员。为此，我们将添加一个身份验证策略。我们这样做如下：
- en: Return to Visual Studio.
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回 Visual Studio。
- en: Open the `Program.cs` file.
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Program.cs` 文件。
- en: 'Add the following code above the last line in the file:'
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件的最后一行上方添加以下代码：
- en: '[PRE32]'
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Open the `Pages/Secure.razor` page.
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Pages/Secure.razor` 页面。
- en: 'Add the **view-all** policy to the `Authorize` attribute as shown below:'
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **view-all** 策略添加到 `Authorize` 属性中，如下所示：
- en: '[PRE33]'
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The preceding code will prevent users who do not meet all the requirements of
    the `view-all` policy from viewing the page.
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述代码将阻止不符合`view-all`策略所有要求的用户查看页面。
- en: Open the `Pages/WhoAmI.razor` page.
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Pages/WhoAmI.razor`页面。
- en: 'Add the following markup below the existing `AuthorizeView` component:'
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在现有的`AuthorizeView`组件下方添加以下标记：
- en: '[PRE34]'
  id: totrans-372
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The preceding code will prevent users who do not meet all the requirements of
    the `view-all` policy from viewing the list of claims.
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述代码将阻止不符合`view-all`策略所有要求的用户查看声明列表。
- en: Press *Ctrl*+*F5* to start the application without debugging.
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Ctrl*+*F5*启动应用程序而不进行调试。
- en: Click the **Log in to Claims Viewer** button.
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**登录到声明查看器**按钮。
- en: Click the **Secure Page** link.
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**安全页面**链接。
- en: '**You are not authorized to see this page because the user does not meet the
    requirements of the policy**. This message is coming from the `App` component.'
  id: totrans-377
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**您无权查看此页面，因为用户不符合策略的要求**。此消息来自`App`组件。'
- en: Click the **Who Am I?** link.
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**我是谁？**链接。
- en: '**You are not authorized to view your claims**. This message is coming directly
    from the `WhoAmI` component.'
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**您无权查看您的声明**。此消息直接来自`WhoAmI`组件。'
- en: Return to Visual Studio.
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回Visual Studio。
- en: Open the `Program.cs` file.
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Program.cs`文件。
- en: Replace the `{Object ID}` placeholder with the value of the **Object ID** for
    the **ViewAll** group in Azure AD.
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`{Object ID}`占位符替换为Azure AD中**ViewAll**组的**对象ID**的值。
- en: '**IMPORTANT NOTE**'
  id: totrans-383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: You saved the value of the group’s **Object ID** after you added the **ViewAll**
    group during the **Add a user and group to Azure AD** step.
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在**添加用户和组到Azure AD**步骤中添加**ViewAll**组后，你保存了组的**对象ID**的值。
- en: Select **Build Solution** from the **Build** menu.
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**构建**菜单中选择**构建解决方案**。
- en: Return to the browser.
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回浏览器。
- en: Since the user now meets the requirements of the policy, you are now able to
    view the list of their claims.
  id: totrans-387
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于用户现在符合策略的要求，你现在可以查看他们的声明列表。
- en: Click the **Secure Page** link.
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**安全页面**链接。
- en: Likewise, since the user now meets all of the requirements of the policy, you
    are now able to view the **Secure** page.
  id: totrans-389
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 同样，由于用户现在符合策略的所有要求，你现在可以查看**安全**页面。
- en: We have created a secure application that allows authenticated users who are
    members of the `ViewAll` group to view the claims provided by the ID token from
    Azure AD.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了一个安全的应用程序，允许认证用户（他们是`ViewAll`组的成员）查看由Azure AD提供的ID令牌中的声明。
- en: Summary
  id: totrans-391
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: You should now be able to render the list of an authenticated user’s claims
    by delegating identity management to Azure AD.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该能够通过将身份管理委托给Azure AD来渲染已认证用户的声明列表。
- en: In this chapter, we learned the difference between authentication and authorization.
    We also learned how to work with the authentication components. Finally, we learned
    how to control the user interface by using the `Authorize` attribute and the `AuthorizeView`
    component.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了认证和授权之间的区别。我们还学习了如何与认证组件一起工作。最后，我们学习了如何通过使用`Authorize`属性和`AuthorizeView`组件来控制用户界面。
- en: After that, we used the **Blazor WebAssembly App Empty** project template to
    create a new project. Next, we used the Azure Portal to configure our Azure AD
    tenant to add a new application. Then we added a group to our new application
    and added a user to that group. We used the Client ID and the Tenant ID from Azure
    AD to update the `appsettings.json` file in our project. We added the required
    NuGet packages and finished configuring our application to use authentication.
    We added the `Authentication`, `LoginDisplay`, `Secure`, and `WhoAmI` components.
    Finally, we used a policy to restrict access to the list of claims.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们使用了**Blazor WebAssembly App Empty**项目模板来创建一个新的项目。接下来，我们使用Azure Portal配置我们的Azure
    AD租户以添加一个新应用程序。然后我们在新应用程序中添加了一个组，并将用户添加到该组。我们使用Azure AD中的客户端ID和租户ID来更新项目中`appsettings.json`文件。我们添加了所需的NuGet包，并完成了配置应用程序以使用认证。我们添加了`Authentication`、`LoginDisplay`、`Secure`和`WhoAmI`组件。最后，我们使用策略来限制对声明列表的访问。
- en: In the next chapter, we will use SQL Server to build a task manager using the
    ASP.NET Web API.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用SQL Server和ASP.NET Web API构建一个任务管理器。
- en: Questions
  id: totrans-396
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'The following questions are provided for your consideration:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 以下问题供您考虑：
- en: What is the difference between authentication and authorization?
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 认证和授权之间有什么区别？
- en: If you add a `Secure` component to the `Home` page, will the user need to be
    authenticated to render it?
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你在**主页**上添加一个`Secure`组件，用户是否需要认证才能渲染它？
- en: How can you secure a Blazor WebAssembly app without using the `Authorize` attribute
    on every routable component?
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在不使用每个可路由组件上的 `Authorize` 属性的情况下保护 Blazor WebAssembly 应用？
- en: What are some of the claims that are included in a **JSON Web Token** (**JWT**)?
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**JSON Web Token**（**JWT**）中包含哪些声明？'
- en: Further reading
  id: totrans-402
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'The following resources provide more information concerning the topics covered
    in this chapter:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 以下资源提供了有关本章涵盖主题的更多信息：
- en: For more information on the current authentication state, refer to [https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.authorization](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.authorization).
  id: totrans-404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关当前认证状态更多信息，请参阅 [https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.authorization](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.authorization)。
- en: For more information on the `ClaimsPrincipal` class, refer to [https://learn.microsoft.com/en-us/dotnet/api/system.security.claims.claimsprincipal](https://learn.microsoft.com/en-us/dotnet/api/system.security.claims.claimsprincipal).
  id: totrans-405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关 `ClaimsPrincipal` 类更多信息，请参阅 [https://learn.microsoft.com/en-us/dotnet/api/system.security.claims.claimsprincipal](https://learn.microsoft.com/en-us/dotnet/api/system.security.claims.claimsprincipal)。
- en: For more information on the Microsoft identity platform, refer to [https://learn.microsoft.com/en-us/azure/active-directory/develop](https://learn.microsoft.com/en-us/azure/active-directory/develop).
  id: totrans-406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关 Microsoft 身份平台更多信息，请参阅 [https://learn.microsoft.com/en-us/azure/active-directory/develop](https://learn.microsoft.com/en-us/azure/active-directory/develop)。
- en: For the `RemoteAuthenticatorViewCore` source code in GitHub, refer to [https://github.com/dotnet/aspnetcore/blob/600eb9aa53c052ec7327e2399744215dbe493a89/src/Components/WebAssembly/WebAssembly.Authentication/src/RemoteAuthenticatorViewCore.cs](https://github.com/dotnet/aspnetcore/blob/600eb9aa53c052ec7327e2399744215dbe493a89/src/Components/WebAssembly/WebAssembly.Authentication/src/RemoteAuthenticatorViewCore.cs).
  id: totrans-407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub 上的 `RemoteAuthenticatorViewCore` 源代码，请参阅 [https://github.com/dotnet/aspnetcore/blob/600eb9aa53c052ec7327e2399744215dbe493a89/src/Components/WebAssembly/WebAssembly.Authentication/src/RemoteAuthenticatorViewCore.cs](https://github.com/dotnet/aspnetcore/blob/600eb9aa53c052ec7327e2399744215dbe493a89/src/Components/WebAssembly/WebAssembly.Authentication/src/RemoteAuthenticatorViewCore.cs)。
- en: To decode a **JSON Web Token** (**JWT**), refer to [https://jwt.ms](https://jwt.ms).
  id: totrans-408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要解码 **JSON Web Token**（**JWT**），请参阅 [https://jwt.ms](https://jwt.ms)。
- en: Join our community on Discord
  id: totrans-409
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的 Discord 社区
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们的 Discord 空间，与作者和其他读者进行讨论：
- en: '[https://packt.link/BlazorWASM2e](https://packt.link/BlazorWASM2e)'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: '[Blazor WebAssembly 2e](https://packt.link/BlazorWASM2e)'
- en: '![](img/Discord_QR.png)'
  id: totrans-412
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Discord_QR.png)'
