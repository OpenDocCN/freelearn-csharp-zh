- en: '*Chapter 8*: Story API – Accessing ink Variables and Functions'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will discuss how to use the ink Unity API to work with variables
    and functions. Any variables or functions defined in ink can be accessed from
    any point in its code. The API provided by the ink-Unity Integration plugin provides
    an interface through its `variablesState` property to access any defined variables.
    This is also true of a method provided by the `EvaluateFunction()` API, which
    can access any functions defined in the ink code. Understanding this functionality
    is key to creating more complex projects by using the ink-Unity Integration plugin
    as a bridge between an ink story and Unity code.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Changing ink variables outside a story
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calling ink functions externally
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling a story through variables and functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The examples used in this chapter, in the `*.cs` and `*.ink` files, can be found
    on GitHub at [https://github.com/PacktPublishing/Dynamic-Story-Scripting-with-the-ink-Scripting-Language/tree/main/Chapter8](https://github.com/PacktPublishing/Dynamic-Story-Scripting-with-the-ink-Scripting-Language/tree/main/Chapter8).
  prefs: []
  type: TYPE_NORMAL
- en: Changing ink variables outside a story
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`VAR` keyword and an initial value. Throughout a story, the value of a variable
    can be changed. By comparing their values, variables can also influence the flow
    of a story.'
  prefs: []
  type: TYPE_NORMAL
- en: Variables are *global* in ink. Once created, they can be accessed by any other
    part of the code within the same story. This functionality is also carried over
    into a named property as part of the ink-Unity Integration plugin, called `variablesState`.
    Every variable defined in an Ink story can be accessed by using its name.
  prefs: []
  type: TYPE_NORMAL
- en: In this topic, we will examine how to use this property to access and change
    values in a running ink story. We will begin by looking at how to use the `variablesState`
    property and comparing values in ink to control its flow outside the story.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing ink variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Story API in Unity provides access to ink variables. In this section, we
    will explore the `variablesState` property and how to access an ink variable by
    its name. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Start by creating a new project in Unity based on the 2D built-in template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the ink-Unity Integration plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a new ink file and rename it `InkVariables.ink`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The file that is created will hold the ink source code. Because the ink-Unity
    Integration plugin runs compiled ink stories, the source code for a story must
    exist before the API can be used to access and run its contents:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.1 – The project window showing the InkVariables.ink file'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_8.1_B17597.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.1 – The project window showing the InkVariables.ink file
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open the `InkVariables.ink` file for editing in Inky.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the contents to the `Example 1 (InkVariables.ink)` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the file and return to Unity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reminder
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The automatic recompilation of ink source files can be changed by visiting the
    **Project Settings** window. You can do this by clicking on **Edit** and then
    **Project Settings**. Clicking on **Ink** and then changing the **Compile All
    Ink Automatically** setting allows you to update this value. If enabled, the plugin
    will automatically create a JSON file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create a new, empty game object and name it `InkStory`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new `Script` component in the `InkStory` game object and name the new
    C# file `InkStoryScript.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `InkStoryScript.cs` file for editing in Visual Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the `InkStoryScript.cs` file to `Example` `1` `(InkStoryScript.cs)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The updated code uses the `GetVariableWithName()` method as part of the `VariablesState`
    object. The `variablesState` property is used with the name of the variable in
    ink, `number_example`, as part of the `GetVariableWithName()` method. Additionally,
    the `Debug.Log()` method is used to display the value of the variable in the **Console**
    window when run in Unity.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Associate the file with the code. You can do this using either the `Ink JSON
    File` property inside the `Script` component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the project in Unity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the project starts running, open the **Console** window. A new message
    will have been added:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.2 – The console window showing the value of the ink variable'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_8.2_B17597.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.2 – The console window showing the value of the ink variable
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Stop the running project in Unity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If variables are defined before the first text content in ink, they are also
    loaded *before* the content. In *Example 1*, as is evident from *Step 8*, the
    initial values of the variables can be accessed immediately after loading an ink
    story. The functionality for accessing variables is separate from the functionality
    of loading and displaying text content.
  prefs: []
  type: TYPE_NORMAL
- en: Any ink variable that is able to be accessed can also be changed. In the next
    section, we will discover how this functionality is key to using the `variablesState`
    property, as part of the Ink API, and how it allows you to create more complex
    projects in Unity when using the ink-Unity Integration plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the value of the ink variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The English word "variable" means *able to be changed*. All ink variables, once
    created, can be changed at any point. The `variablesState` property follows the
    same pattern. If a variable can be accessed, its value can be changed.
  prefs: []
  type: TYPE_NORMAL
- en: The `VariablesState` class contains multiple methods in which to access and
    change the values of the variables within an ink story. However, it also contains
    a shorthand access operator using square brackets and the name of the variable
    in quotation marks. Often, this shorthand is used rather than directly using method
    names to change the values of variables within the `variablesState` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, return to the project that we used as part of the *Accessing Ink variables*
    section. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `InkStoryScript.cs` file for editing in Visual Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the existing code to `Example 2 (InkStoryScript.cs)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the file and return to Unity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `variablesState` property. Any changes to these values are reflected in
    the next use of the `Continue()` or `ContinueMaximally()` methods.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Stop the running project in Unity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Variables are not the only values that can be accessed from outside an ink story.
    The ink-Unity Integration plugin also adds the ability to call functions in ink
    from Unity. While accessing and changing the values of variables can be helpful,
    directly calling functions in ink and passing them values from Unity is often
    the preferred way in which to approach the exchange of data between Unity and
    ink. In the next section, we will review why using functions is frequently the
    better option for complex data or for when you want to process multiple values
    as part of the same task in ink.
  prefs: []
  type: TYPE_NORMAL
- en: Calling ink functions externally
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As with variables, functions are also global in ink. This means they can be
    accessed as part of any ink code that is part of the same story. As part of the
    Unity API provided by the `Story` class, the `EvaluateFunction()` method calls
    a function in the ink code based on the name passed to it. Because functions in
    ink are global, they can be called from outside the story itself. However, unlike
    working with the `variablesState` property and only accessing a single value,
    multiple values can be passed to an ink function at one time. Additionally, the
    `EvaluateFunction()` method can be configured to return the text output within
    the ink function or any returning data, too.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will begin by testing whether an ink function exists using
    the `HasFunction()` method. Next, we will examine how the `EvaluateFunction()`
    method is the preferred option for complex data or multiple data values when communicating
    between Unity and ink. Finally, we will review examples of how to use the text
    result and return data from an ink function within Unity code.
  prefs: []
  type: TYPE_NORMAL
- en: Verifying and evaluating ink functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When working with functions in ink, the `HasFunction()` method verifies whether
    an ink function exists. Note that it should always be used before working with
    an ink function to prevent any issues:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new project in Unity based on the built-in 2D template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the ink-Unity Integration plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new, empty game object named `InkStory`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a `Script` component to the `InkStory` game object and name the ink file
    `InkStoryFunctions.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a new ink file and rename it `InkFunctions.ink`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `InkFunctions.ink` file in Inky and change its contents to `Example
    4 (InkFunctions.ink)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open `InkStoryFunctions.cs` for editing in Visual Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the `InkStoryFunctions.cs` file to `Example 4 (InkStoryFunctions.cs)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the `InkStoryFunctions.cs` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Unity, associate the compiled JSON file for the `InkFunctions.ink` file with
    the `Ink JSON File` property, as part of the `Script` component of the `InkStory`
    game object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `relationship` ink variable has been changed as a result of calling two
    methods, `HasFunction()` and `EvaluateFunction()`. The `HasFunction()` method
    of the `Story` class returns a Boolean value. It also guarantees that a function
    exists before it is used.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Stop the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After verifying that a function exists, it can be evaluated. The code in the
    `InkStoryFunctions.cs` file uses two methods: `HasFunction()` and `EvaluateFunction()`.
    Within the ink API, the term `EvaluateFunction()` method.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When using the `EvaluateFunction()` method, the first parameter is the name
    of the function in ink. Any additional parameters are passed to the ink function
    directly. In the code that is used as part of the `InkStoryFunctions.cs` file,
    the use of the `EvaluateFunction()` method includes two parameters: the name of
    the `increase()` ink function and the amount of value to increase inside ink.'
  prefs: []
  type: TYPE_NORMAL
- en: This use of an ink function that has been called from Unity to change values
    is a very common pattern when using the ink-Unity Integration plugin. In this
    case, the `increase()` function in ink updates the `relationship` value inside
    ink. This allows ink values to be adjusted by ink functions. When working in Unity,
    values can be passed to ink to perform multiple tasks, depending on the ink functions
    defined for those tasks, without extra code on the Unity side.
  prefs: []
  type: TYPE_NORMAL
- en: 'ink functions are special sections of a story. This means they can also produce
    text output along with other code-related actions. However, to gain access to
    the text output of an ink function using the `EvaluateFunction()` method, a special
    keyword is needed in C#: `out`. We will learn more about this keyword in the next
    section.'
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving the ink function text output
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The C# programming language allows you to define a variable and then pass it
    to a method. Internal to the method, it is expected that the value of the variable
    will change. Note that this will not be a change to the value passed to the method,
    but to the value contained within the variable itself. More generally, in programming,
    this is known as passing by reference. Instead of passing some data to a method,
    a reference (that is, where to find the variable to store the value) is passed
    instead.
  prefs: []
  type: TYPE_NORMAL
- en: In C#, the `out` keyword can be used with a parameter to a method to specify
    that the variable, and not its value, should be passed by reference. This means
    that when the method is finished with its actions, the value within a variable
    that was passed to the method will change as a result. In C#, using the `out`
    keyword allows a developer to specify they want a value *out* of the method and
    into a specific variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'When working with the `EvaluateFunction()` method provided by the ink-Unity
    Integration plugin, if the second parameter uses the `out` keyword, the method
    knows to take any text produced during the evaluation and pass it *out* of the
    method back to the variable. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Return to the code used in the *Verifying and evaluating ink functions* section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the code in the `InkStoryFunctions.cs` file to `Example 5 (InkStoryFunctions.cs)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the changed `InkStoryFunctions.cs` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Return to Unity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Play the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Stop the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the `out` keyword with the `functionOut` variable as a parameter to the
    `EvaluateFunction()` method lets C# know to pass any text *out* of the method.
    Because the `relationship` value was updated internally in ink by calling the
    `increase()` function from Unity to ink, its value is shown as `51` in the `functionOut`
    variable in C# is given the text *out* of the use of the `EvaluateFunction()`
    method. This allows it to then pass its value to the `Debug.Log()` method and,
    ultimately, show the updated value in the **Console** window.
  prefs: []
  type: TYPE_NORMAL
- en: When the `out` keyword is used with the `EvaluateFunction()` method in this
    way, any text output from a function can be captured and passed back from ink
    to Unity. Combined with creating ink functions to update ink values, this additional
    change to the pattern shown in the *Verifying and evaluating ink functions* section
    allows you to call ink functions to perform ink-related tasks. This allows for
    the separation between ink concerns and those in Unity.
  prefs: []
  type: TYPE_NORMAL
- en: Within ink, a story can be controlled by different values. Using conditional
    options and a selective output, the text of a choice can be displayed or a diversion
    followed. Because the values of variables can be directly accessed using the `variablesState`
    property and functions that have been called using the `EvaluateFunction()` method,
    this means an ink story can be controlled from Unity. In the next section, we
    will learn how to connect user interface elements in Unity with ink variables
    and functions.
  prefs: []
  type: TYPE_NORMAL
- en: Controlling a story through variables and functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `variablesState` property and the `EvaluateFunction()` method give the developer
    two ways in which to access values within an ink story. By using these two approaches,
    a story can be *controlled* by more than just the options that are presented to
    a player. User interface elements within Unity can be attached to methods that
    can then change ink values.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will connect ink to Unity. By using the `variablesState`
    property and the `EvaluateFunction()` method, we will review a code pattern where
    Unity provides the user interface and communicates with ink functions to adjust
    and react to values during runtime.
  prefs: []
  type: TYPE_NORMAL
- en: Across the three sections of this topic, first, we will prepare a Unity project
    by creating the necessary game objects. Next, we will add the code to control
    the user interface. Finally, we will adjust the presentation of the user interface
    and run the project.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing a user interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin work with Unity buttons, a new project is required. For simplicity,
    a 2D project is recommended. This will allow you to work easily with an interface
    without needing to worry about perspective. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new project in Unity using the built-in 2D template and name this project
    `Shopping Trip`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the ink-Unity Integration plugin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new, empty game object named `InkStory`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new `Script` component inside the `InkStory` game object. Name the
    created C# file `InkStoryShopping.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new ink file named `InkShopping.ink`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `InkShopping.ink` file for editing in Inky and change its contents
    to `Example 6 (InkShopping.ink)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In Unity, create a new `Button` game object. Select the automatically created
    `Canvas` game object in Unity and create a second `Button` game object so that
    both buttons are the children of the `Canvas` game object:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 8.4 – The created buttons in Unity'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_8.4_B17597.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.4 – The created buttons in Unity
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select the `Canvas` game object again and create a `Text` game object. Both
    buttons, along with the newly created `Text` game object, should all be children
    of the `Canvas` game object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The ink file created as part of *Step 6* established the ink functions that
    will be called from future Unity code. The two buttons will serve as an interface
    for the buying and selling of an inventory that is also tracked by the ink code.
    In the next section, we will move from having set up everything to writing the
    Unity code to create a bridge between the interface and ink. This will track two
    values: `money` and `inventory`.'
  prefs: []
  type: TYPE_NORMAL
- en: Scripting user interface objects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the previous section, we worked through the steps that were needed to create
    a new Unity 2D project and to create the necessary game objects. In this section,
    we will learn how to connect user actions (that is, clicking) with the user interface
    by adding code on the Unity side. Then, we will use the `EvaluateFunction()` method
    in Unity to communicate with ink functions within a running story to control its
    progression:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `InkStoryShopping.cs` file for editing in Visual Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change its content to `Example 6 (InkStoryShopping.cs)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the new code, three new methods have been added to the Unity code. We have
    directly mapped the Unity methods to ink functions. For example, the name of the
    `Sell()` method in Unity almost matches the `sell()` name of the ink function.
    The differences in capitalization are only because of the recommended capitalization
    usage in each programming context.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Associate the compiled ink JSON file with the new public property. Associate
    the `Text` game object with the `Text Status` property:![Figure 8.5 – Associating
    the Text GameObject with the Text Status property
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.5_B17597.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.5 – Associating the Text GameObject with the Text Status property
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Recommendation
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Because the two existing `Button` game objects have children `Text` game objects,
    it is recommended that you use the drag-and-drop approach to associate a game
    object with a property. This will prevent any issues with associating the wrong
    `Text` game object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select the `Canvas` game object in Unity in the `Horizontal Layout Group` component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the `Horizontal Layout Group` component from the default value of `Horizontal
    Layout Group` component adds a layout structure to the `Canvas` game object. The
    adjustment of the **Child Alignment** property changes the starting position of
    all its children to the absolute-center positions of the available screen space.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the first `Button` game object of the children game objects of the `Canvas`
    game object, in the `Button` game object can have one or more listener functions
    associated with its `OnClick` user event. When a user clicks on the `Button` game
    object, these functions will be called in the order in which they appear in the
    list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Because `Button` is a `GameObject`, it can only communicate with other game
    objects. This is an important aspect of how Unity understands the differences
    between game objects and their components. A `GameObject` is a *container* for
    other components, including any `script` components. This means that to connect
    the `OnClick` user event for a `Button` game object to some code found in a `script`
    component, the `GameObject` that the `script` component is associated with must
    be used. For us, this means the `InkStory` game object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Associate the `InkStory` game object with the `On Click ()` component of the
    first `Button` game object. This can be done by dragging and dropping the `InkStory`
    game object onto the property:![Figure 8.8 – Associating the InkStory GameObject
    with the On Click () component
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.8_B17597.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.8 – Associating the InkStory GameObject with the On Click () component
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once a `GameObject` has been associated with an entry in the `On Click ()` component
    listing, the **No Function** drop-down menu will be enabled. Upon this association,
    Unity will have processed the game object and looked for every possible method
    or function that might be used.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Using the `InkStoryShopping.Buy`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the second `Button` game object of the children of the `Canvas game object`,
    in the `On Click ()` component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Follow *Step 7* and *Step 8* to associate the `InkStory` game object with the
    `On Click` `()` component. For *Step 8*, instead of using the `Buy` `()` method,
    select the `Sell` `()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.9 – Associating the InkStoryShopping.Sell() method'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.9_B17597.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.9 – Associating the InkStoryShopping.Sell() method
  prefs: []
  type: TYPE_NORMAL
- en: At the end of *Step 10*, the first `Button` game object is associated with the
    `Buy()` method, and the second is associated with the `Sell()` method. Internally,
    those methods are communicating with their corresponding ink functions. As you
    will discover shortly, clicking on the buttons will call Unity methods, which,
    in turn, will call ink functions.
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting the presentation values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this final section, we will change the default values of the user interface
    game objects created in the previous section. Adjusting these values will help
    us to better understand the relationship between game objects and improve the
    experience of interacting with the onscreen buttons:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the first `Button` game object in the `Text` game object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the `Text` property value from its default setting of `Button` to `Buy`:![Figure
    8.10 – Changing the Text property
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.10_B17597.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.10 – Changing the Text property
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select the second `Button` game object in the `Text` game object presented.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the default text of the second `Button` game object from `Button` to
    `Sell`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the third child game object of the `Canvas` game object, that is, the
    `Text` game object. Be sure not to select the previous two `Text` game objects
    that were updated in the previous steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the width and height of the `Text` game object to `400` and `250`:![Figure
    8.11 – Adjusting the width and height of the Text game object
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.11_B17597.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.11 – Adjusting the width and height of the Text game object
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Change the font size of the `Text` game object from its default value to `32`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the color of the `Text` game object from its default setting to a white
    or near-white color:![Figure 8.12 – Updating the color for the Text game object
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.12_B17597.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.12 – Updating the color for the Text game object
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Play the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When played, the far-left side will show the updated status of the `money` and
    `inventory` variables in ink. Clicking on the buttons will call the Unity methods,
    which, in turn, will evaluate the ink functions and change the values inside the
    running ink story. This is a complete example of how to *control* an ink story
    through variables and functions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Stop the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: While multiple steps were involved to create the user interface elements and
    change the values of their properties, the code is relatively simple. Functions
    were created in ink to adjust the ink values. In Unity, methods were created matching
    the names of the ink functions.
  prefs: []
  type: TYPE_NORMAL
- en: This section demonstrated how a simple shopping scene could be created in ink
    and manipulated from Unity. By knowing the name of the ink functions, C# methods
    in Unity can evaluate them to either adjust values or, in the case of the `status()`
    ink function, retrieve the text output. This was also a demonstration of how to
    separate user interface programming from story-related code. They communicated
    with each other, but they were written in different contexts.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will examine a different approach to working with variables
    and functions in a story while continuing the trend of separating our narrative
    and game code. However, instead of clicking on buttons in Unity to trigger functions
    in ink, we will explore the reverse. Events will happen in ink and trigger changes
    in Unity. This chapter focused on how to control ink from Unity. The next chapter
    will demonstrate how to control parts of Unity from events happening within a
    running ink story.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we began by demonstrating how the `variablesState` property
    exposes all of the variables in ink. We started by using the `GetVariableWithName()`
    method to access variables by name and the provided shorthand syntax of using
    square brackets. For completeness, the `variablesState` property was explained.
    However, in most situations, ink functions should change ink values. This helps
    to keep any code working with those values existing within the ink story and is
    easier to maintain over time, and we closed the chapter on this same theme. Additionally,
    we explored how buttons in Unity can call their methods and then call ink functions.
    By using the `EvaluateFunction()` method, we can access the ink function in Unity
    to either pass data into the project or retrieve possible text output with the
    `out` keyword in C#.
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 9*](B17597_09_Final_PG_ePub.xhtml#_idTextAnchor137), *Story API
    – Observing and Reacting to Story Events*, we will emphasize the ink-Unity Integration
    plugin and its API by inspecting a different approach to the relationship between
    Unity and ink. Instead of using Unity methods to call ink functions, we will examine
    some patterns to control parts of Unity from ink. Instead of having to click on
    buttons in Unity to change values, ink will cause changes that will then register
    in Unity. For projects requiring more real-time feedback from ink, these patterns
    will be a preferred approach to those shown in this chapter using the `variablesState`
    property and the `EvaluateFunction()` method.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Are variables global in ink?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What effect does functions being global mean regarding how they are accessed
    in ink?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do the `Continue()` and `ContinueMaximally()` methods affect the values of variables
    in ink?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What shorthand syntax does the `VariablesState` class provide to access variables
    based on their names?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Should the name of an ink function be used to test whether it exists before
    you attempt to access it?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How is the `out` C# keyword used with the `EvaluateFunction()` method as part
    of the Story API when working with the ink-Unity Integration plugin?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
