- en: Chapter 6. API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we've only looked at the graphical tools to interact with **Windows
    Azure BizTalk Services** (**WABS**). These have included Visual Studio for creating
    and deploying solutions as well as the BizTalk Services Portal (and Azure Management
    Portal) for management and monitoring of the deployed solutions. Underlying all
    these tools though is a REST-based API that allows easy integration with scripting
    tools as well as your own processes to facilitate automated actions such as deployment,
    testing, and management.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll look at the WABS API and how to interact with it using:'
  prefs: []
  type: TYPE_NORMAL
- en: RESTful web services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PowerShell
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While there are three methods in which the API can be used (portal, REST services,
    and PowerShell), each serves a different need, and although there is an overlap,
    there are also differences in functionality. The portal has been explored elsewhere
    in this book and provides an easy-to-access dashboard for system administrators.
    PowerShell is a familiar tool for IT pros that is useful for scripting system
    interactions such as deployments. Using the REST API directly is useful for building
    your own tools and capabilities on top of WABS or for interacting with WABS from
    another application. By the end of this chapter, you'll have a good understanding
    of the WABS API and how you can leverage it to your advantage in your own organization.
  prefs: []
  type: TYPE_NORMAL
- en: REST
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, let''s take a quick look at the grounding of the provided API. All functions
    available in Visual Studio and in the management portal are also available in
    the API. In fact, the API actually provides more capabilities than these tools
    do, as we''ll see. This shouldn''t be too much of a surprise as it is often the
    case—the API usually comes first and the tools later. It''s therefore a good idea
    to understand what the API can do. Underpinning this API is a set of web services
    accessible using HTTP. WABS uses RESTful services for this. REST is not a standard
    or protocol, but an architectural style that enables simple HTTP-based integration.
    It doesn''t need the overhead of SOAP or frameworks such as Microsoft''s WCF.
    In fact, you can often use just your web browser to make requests or query for
    information. REST is based on a set of standard HTTP verbs that specify the type
    of request. WABS uses the following HTTP verbs in its API:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Verb | Purpose |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| PUT | Create a new artifact or update an existing one |'
  prefs: []
  type: TYPE_TB
- en: '| GET | Retrieve artifact(s) |'
  prefs: []
  type: TYPE_TB
- en: '| DELETE | Remove an artifact from WABS |'
  prefs: []
  type: TYPE_TB
- en: '| POST | Update an artifact or service status |'
  prefs: []
  type: TYPE_TB
- en: WABS REST API verbs
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the full set of CRUD (create, read, update, and delete) operations
    are supported in this way, which provides a great deal of flexibility as it facilitates
    cross-platform access and easy integration with third-party tools.
  prefs: []
  type: TYPE_NORMAL
- en: Calling the API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start by looking at a simple REST call to the BizTalk Services API. In
    this example, we'll query the BizTalk Services instances deployed for a given
    Azure subscription. We are going to see how you can execute this request using
    a very useful tool called Fiddler. You can download Fiddler for free from [http://fiddler2.com/](http://fiddler2.com/).
  prefs: []
  type: TYPE_NORMAL
- en: In order to execute these API calls against Azure, a mutual certificate exchange
    process is required in order for each party to authenticate one another. When
    your machine makes a request to the Windows Azure management endpoint, Azure returns
    the configured certificate and in return your client machine sends Azure its certificate
    to validate. Once complete, Azure executes the request and returns an acknowledgement.
    In order for this to work, we first need to create a client certificate and then
    upload it to Azure.
  prefs: []
  type: TYPE_NORMAL
- en: There are two options here. You can use a certificate you create yourself, which
    is known as a self-signed certificate. Such a certificate is useful for testing
    but would not be appropriate for the production usage. In this case, you would
    purchase a certificate from a signing authority and use that. The reason for this
    is that certificates are about trust, not just between the two parties (your machine/organization
    and Azure), but with the signing authority as well. When a party receives a certificate,
    it can check its validity with the signing authority. This also allows, for example,
    the ability for a signing authority to revoke a certificate if it has been compromised.
  prefs: []
  type: TYPE_NORMAL
- en: 'For our purposes though, a self-signed certificate will do just fine. To create
    a certificate, open a command prompt and enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will create a self-signed certificate and install it in your machine''s
    certificate store under your logged on account. With this done, we need to associate
    it with our Azure subscription where we have provisioned BizTalk Services:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Windows Azure Management Portal at [http://manage.windowsazure.com](http://manage.windowsazure.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the left-hand margin, click on **Settings** (it's the last one in the list).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **Settings**, click on the **Management Certificates** tab and then click
    on **Upload**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Browse to the certificate file you created in the command window earlier—it
    will be located by default under `c:\users\<youraccount>\documents`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the tick button to associate your certificate with the management service.![Calling
    the API](img/7401EN_06_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Upload management certificate
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now that we''ve done this, we can make a call using the Request Composer feature
    of Fiddler to query the WABS services deployment. To set up the certificate in
    Fiddler, we need to perform a few steps first before making the request:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Fiddler.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Rules** menu, select **Customize Rules…**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `CustomRules.js` file, which opens in Notepad, find the `OnBeforeRequest`
    function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following at the top of this function, replacing `<username>` with
    your username:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file and close Notepad.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'What this will do is send the client certificate to the service whenever the
    Azure management URL is accessed. For the next step, you will need your Azure
    subscription ID. To get this, go back to the Azure Management Portal, and under
    **Settings** | **Subscriptions**, you will see a list of your subscriptions in
    the **Subscription** column and the required subscription IDs in the **SubscriptionID**
    column, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Calling the API](img/7401EN_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Obtaining the subscription ID
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can make the request as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Composer** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure the verb next to the URL is set to **GET**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following URL in the box, replacing `<SubscriptionID>` with your
    own:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`https://management.core.windows.net/<SubscriptionID>/cloudservices`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the header provided here in the **Request Headers** area:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`x-ms-version:2010-10-28`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This HTTP header specifies the service version we want and is mandatory. Currently,
    there is only one version, but over time the service may change, and this will
    allow you to call a particular version of it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Your Fiddler request should look like the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Calling the API](img/7401EN_06_03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Retrieving a list of cloud services
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **Execute** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If all went as planned, you should now see the results of the call in the Fiddler
    window as shown in the following screenshot. What you are looking at is a list,
    in XML format, of all the BizTalk Services instances provisioned for the subscription
    you passed in as the argument. If you were to call this API programmatically,
    you could read through the XML and pull out particular properties for each instance
    and perhaps stop or restart them all. I've blurred out the subscription IDs and
    other details for obvious reasons.
  prefs: []
  type: TYPE_NORMAL
- en: '![Calling the API](img/7401EN_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Retrieving a list of cloud services
  prefs: []
  type: TYPE_NORMAL
- en: 'With the results of this call, we can now retrieve the details of a single
    WABS instance with the following URL. Here, the cloud service name returned by
    the previous call is passed into the Get Cloud Service call:'
  prefs: []
  type: TYPE_NORMAL
- en: '`https://management.core.windows.net/<SubscriptionID>/cloudservices/<CloudServiceName>`'
  prefs: []
  type: TYPE_NORMAL
- en: 'The request and response are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Calling the API](img/7401EN_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Retrieving a single BizTalk Services instance
  prefs: []
  type: TYPE_NORMAL
- en: Back up and restore
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've looked at a simple example of what the WABS API can do, let's
    look at some of the more interesting capabilities. An essential aspect of enterprise
    development is the ability to move artifacts between environments. Commonly, an
    organization or team will have a development, testing, user acceptance, and production
    environment (and multiple instances of each). This DTAP (dev, test, user, and
    prod) setup is perfectly possible with BizTalk Services by creating multiple service
    instances and provisioning them as required. Then, each can be used as desired
    to manage the overall integration estate.
  prefs: []
  type: TYPE_NORMAL
- en: Backing up a BizTalk Services instance is not just useful to move content between
    environments, but can also be used to keep a set of backups or snapshots of a
    particular environment for disaster recovery or to restore to a particular point
    in time. It is also possible to restore an instance to a different version of
    the service, provided that the service type is at least the same or higher. For
    example, a Basic subscription can be restored to not just another Basic sub, but
    to Standard or Premium as well. Downgrading however, is not possible, and nor
    is backing up a Developer instance of the service.
  prefs: []
  type: TYPE_NORMAL
- en: This feature now has (as of the February 2014 service update) out of the box
    tooling via the Windows Azure Management Portal as shown in the following screenshot
    in the **CONFIGURE** tab. While the portal UI now allows you to back up a service
    instance and even create a new BizTalk Services instance from a backup, using
    the API programmatically is very useful. The API provides the ability to move
    or "promote" a set of artifacts from one instance (say Test) to another (for example,
    User Acceptance) programmatically. In this section, we'll look at how to achieve
    this capability with the REST API by writing some .NET code to do it. As you'll
    see, this is very easy and straightforward to perform.
  prefs: []
  type: TYPE_NORMAL
- en: '![Back up and restore](img/7401EN_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Back up BizTalk Service Instance with the Management Portal
  prefs: []
  type: TYPE_NORMAL
- en: Before trying this out, I should point out that this capability provides a similar
    copy of the service instance. It's quite possible (even likely) that some of your
    settings or configuration is environment specific. For example, if your bridges
    send messages to Service Bus queues, it is unlikely that you would use the same
    queues for test as production. Therefore, while being able to back up one environment
    and restore to another is certainly very useful, you also need to think about
    using the REST API to apply configuration changes on top of a restored service
    instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Visual Studio and create a new console application. Call it `BackupService`.
    In the static `Main` method, add the following code to replace the empty `Main`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now add the `Run` method as shown in the next code snippet. This code formats
    the required URL to make the backup API call. For this, three pieces of information
    are required.
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, you''ll need your Windows Azure subscription ID; this is the same
    ID as discussed earlier, and you can obtain it as before through the Windows Azure
    portal in the *Upload management certificate* screenshot in the *Calling the API*
    section. You''ll also need the service name. This is the value in the **Name**
    field as shown previously, and you can obtain yours by making that API call in
    Fiddler as we saw. The final piece of data you need is the resource name of the
    BizTalk Services instance. This is the name you gave your WABS instance when you
    created it. It can be obtained either through the Azure portal, by clicking the
    BizTalk Services link, or again by using Fiddler as shown in the previous screenshot.
    The name you need is under the **Resources**/**Resource**/**Name** element. Replace
    the three placeholders in the code with your service values as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, add the following two assembly references that contain the necessary types
    to make the request to the service endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Add the following method directly underneath the previously added code. This
    will set up the call to the Backup REST API, and to do this, it needs your certificate.
    As discussed earlier, the management API calls authenticate services using mutual
    certificates, and therefore we need to pass our certificate. However, as the rule
    that we added to Fiddler earlier sends the client certificate with each request
    made to the management URL, we don't need to send the certificate in the code—you
    just need to ensure that Fiddler is still running (the code is provided to add
    the certificate later if you want to run it without Fiddler). This simplifies
    things quite a bit.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You need to replace the `<storageaccountname>` and `<storageaccountkey>` values
    in the preceding code with your own storage account details. To obtain your `AccountName`
    and `AccountKey` values, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the Azure Management Portal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Storage icon in the left-hand navigation bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the list of storage accounts, select the one that has the same name as the
    one created by your BizTalk Services instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Manage Access Keys** button at the bottom of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy and paste the **Storage Account Name** and **Primary Access Key** fields
    into the preceding code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can actually use any storage account you like in step 3, or even create
    a new one. The account is used to store the backed-up WABS instance. The third
    placeholder in the code is `<backupname>`. This is the label to use for backup,
    and it is good practice to name this something meaningful, such as with the date
    the backup was made. The label you use must start with a letter or a digit, can
    only contain digits, dashes (-), or lowercase letters, and can be between 3 and
    63 characters long. Dashes must not be consecutive.
  prefs: []
  type: TYPE_NORMAL
- en: The format of the data posted to the service is **JSON** (**JavaScript Object
    Notation**), and this is simply a string containing the storage account details
    and backup name. The PostAsync call will invoke the API and wait for a response.
    If successful, the service will return an OK response HTTP code 200\. This API
    is asynchronous because the service backup can take up to an hour to complete.
    In response, we get a tracking identifier that allows you to check the status
    of the backup operation. The API provides a polling query for this that allows
    you to make a call passing your returned identifier (a GUID) and retrieve the
    results of the operation at any point. In this way, you can ensure that the backup
    was successfully completed.
  prefs: []
  type: TYPE_NORMAL
- en: Now that the code is complete, hit *F5* to build and run it. If successful,
    the console application should just open and close down a few seconds later. You
    might want to put a couple of breakpoints in the code and run it to see if it's
    working. I've also omitted any exception handling code for brevity. If it fails
    to call the API, an exception will be thrown. In such a case, run the debugger
    so you can determine what the problem is.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, there is also a reciprocal Restore API call that allows you to restore
    a previously backed up instance to any other BizTalk Service instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'As I mentioned previously, you need to keep Fiddler running for this example
    as Fiddler is supplying the necessary certificate. If you want to run without
    Fiddler, just add the following code at the start of the `MakeRequest` method,
    replacing the `<your thumbprint>` placeholder with your own certificate''s thumbprint
    as displayed in the Azure Management Portal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code retrieves your certificate from your local machine''s certificate
    store. You therefore need to ensure it is stored already. To do this, double-click
    on your certificate, and in the wizard that appears, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Accept any security warnings first.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Install Certificate** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the **Store Location** option, select **Local Machine**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Accept any warning that appears.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Place all certificates in the following store**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Browse** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Personal** and click on **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Next** and then **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should see a message confirming successful installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the dialog.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using PowerShell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we've seen two different ways to utilize the API provided by BizTalk
    Services, directly making HTTP requests in Fiddler and by writing code to make
    the calls to it programmatically. Now we'll look at an even easier way, using
    Windows PowerShell. Windows PowerShell is a command-line tool aimed at administrators
    that provides a consistent way to perform tasks across many Microsoft products
    (and third-party ones). With PowerShell, it is possible to automate common actions
    and create sophisticated scripts that perform configuration and administration
    of BizTalk Services environments and Azure in general.
  prefs: []
  type: TYPE_NORMAL
- en: BizTalk Services provides a set of PowerShell cmdlets that can call the complete
    set of APIs provided. Cmdlets are units of functionality that are executed in
    PowerShell, and BizTalk Services provides a cmdlet for each API call available.
  prefs: []
  type: TYPE_NORMAL
- en: 'To be absolutely correct, BizTalk Services actually provides two sets of cmdlets.
    The first is installed when you download and install the BizTalk Services SDK
    while the second needs to be downloaded. The first allows control over the artifacts
    in a provisioned BizTalk Services instance while the second allows control over
    BizTalk Services as a whole—including creating new BizTalk Services instances.
    As the second set is associated with the APIs we''ve already been looking at,
    we''ll start there. This second set is provided as source code and can be downloaded
    from the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://code.msdn.microsoft.com/windowsazure/Windows-Azure-BizTalk-91e1bdf3](http://code.msdn.microsoft.com/windowsazure/Windows-Azure-BizTalk-91e1bdf3)'
  prefs: []
  type: TYPE_NORMAL
- en: As it is the source code, it needs to be opened and compiled in Visual Studio.
    We should also note that this is a sample and not officially supported code from
    Microsoft. Once the source code is built, open PowerShell on Windows 8/Server
    2012 by clicking on the Start button and typing `PowerShell` (on Windows 8 or
    2012). You should see Windows Azure PowerShell appear in the list of results.
    Click on it to launch it. If you don't see Windows Azure PowerShell, make sure
    you have installed it and you have at least Version 0.6.19 installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the PowerShell command window, enter the following command to load the cmdlets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to use the cmdlets, the subscription context must first be set. Do
    this by entering the following code in the command window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: You should now know how to obtain the value for `<subscription ID>` that needs
    to be substituted. For `<certificate thumbprint>`, if you followed the steps earlier
    to generate and upload a certificate, you need to replace this value with the
    thumbprint of your own certificate. To find this, go to the Azure portal and click
    on **Settings** in the left-hand navigation bar. On the Settings page, click on
    **Management Certificates** and then cut and paste the value for the thumbprint
    column for the certificate you uploaded earlier.
  prefs: []
  type: TYPE_NORMAL
- en: I've used the value of `Test` in the previous code to name the subscription.
    This can be any label you like. It is only used to name the subscription during
    the PowerShell session. Now, as soon as this is done, all cmdlets will be executed
    in the context of the particular subscription.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example of how to use the cmdlets, let''s look at one of the API calls
    we made earlier. In the command window, type the following command, substituting
    the name of your BizTalk Service instance for `<service name>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a response in the command window similar to the one in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using PowerShell](img/7401EN_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Get BizTalk Service cmdlet
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the API doesn''t stop at just being able to query the service. We can
    also create a brand new BizTalk Services instance or delete an existing one. It
    is also possible to suspend or resume a particular service instance if required.
    To create a new instance, the `New-AzureBizTalkService` cmdlet is provided. This
    takes the following form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Apart from the name of the instance and what data center to create it in, the
    main parameter is actually a file. The download for the source code actually contains
    a couple of example files that you can adapt for this purpose. The file you provide
    contains all the details that you would normally specify when creating a new service
    via the Azure portal; for example, the database to use, the certificate to protect
    the service with, the type of service—developer, premium, among others—and the
    ACS settings. Given what you know after reading this book, you should find editing
    the provided sample files with your settings quite straightforward. Once done,
    you can automate the creation of services to your heart's content!
  prefs: []
  type: TYPE_NORMAL
- en: OK, so far we've covered the management aspects of the BizTalk Services API.
    But as mentioned earlier, there is also another set of PowerShell cmdlets that
    are used to manipulate artifacts and settings in a BizTalk Services instance.
    This set of cmdlets is already installed if you have the BizTalk Services SDK
    installed, which by default is located under `C:\Program Files\Windows Azure BizTalk
    Services Tools`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To load the cmdlets, type the following command in the PowerShell window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This PowerShell module provides features that are not available in the UI of
    BizTalk Services via the portal. One example is the ability to start and stop
    a bridge. When a new bridge is deployed, it is active by default, but there are
    times when you may wish to stop a bridge from receiving messages. This can be
    achieved with the `Stop-AzureBizTalkBridgeSource` cmdlet as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This will stop all sources available on the bridge `MyBridge`, but it's also
    possible to stop a particular source by providing the `SourceName` parameter.
    This is very useful when you need to perform maintenance that requires some or
    all of the sources to be temporarily stopped. To restart a bridge/source, the
    corresponding `Start-AzureBizTalkBridgeSource` cmdlet is used with the same parameters.
  prefs: []
  type: TYPE_NORMAL
- en: The remaining cmdlets concern adding and removing artifacts such as bridges,
    schemas, certificates, and assemblies to a BizTalk Service. Visual Studio uses
    these API calls during deployment and their primary usage outside of this is to
    automate and manage deployments. For the full list of cmdlets, visit [http://msdn.microsoft.com/en-us/library/windowsazure/dn232360.aspx](http://msdn.microsoft.com/en-us/library/windowsazure/dn232360.aspx).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have looked at the API underpinning BizTalk Services. We've
    seen how to leverage the API from the humble web browser and how to use PowerShell
    cmdlets and write our own code to invoke it. We've looked at the different types
    of APIs, capabilities, and the cmdlets that wrap all of them, and hopefully you've
    seen how you can make use of the capabilities of the BizTalk Services API to create,
    manage, maintain, and more importantly, automate your BizTalk Services instances.
    In the next chapter, we will look at troubleshooting your integration solutions
    and how to use the tracking capabilities of WABS.
  prefs: []
  type: TYPE_NORMAL
