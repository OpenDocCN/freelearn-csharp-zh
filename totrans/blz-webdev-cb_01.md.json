["```cs\ndotnet new blazor -o BlazorCookbook.App -int Auto --framework net9.0\n```", "```cs\n    <div class=\"ticket\">\n        <div class=\"name\">Adult</div>\n        <div class=\"price\">10.00 $</div>\n    </div>\n    ```", "```cs\n    @page \"/ch01r02\"\n    <Ticket />\n    ```", "```cs\n    @code {\n        [Parameter] public string Tariff { get; set; }\n        [Parameter] public decimal Price { get; set; }\n        [Parameter]\n        public EventCallback OnAdded { get; set; }\n    }\n    ```", "```cs\n    <div class=\"ticket\">\n        <div class=\"name\">@Tariff</div>\n        <div class=\"price\">\n            @(Price.ToString(\"0.00 $\"))\n        </div>\n        <div class=\"ticket-actions\">\n            <button @onclick=\"@OnAdded\">\n                Add to cart\n            </button>\n        </div>\n    </div>\n    ```", "```cs\n    @page \"/ch01r03\"\n    @rendermode InteractiveWebAssembly\n    ```", "```cs\n    <Ticket Tariff=\"Adult\" Price=\"10.00m\"\n            OnAdded=\"@Add\" />\n    <Ticket Tariff=\"Child\" Price=\"5.00m\"\n            OnAdded=\"@Add\" />\n    @code {\n        private void Add()\n            => Console.WriteLine(\"Added to cart!\");\n    }\n    ```", "```cs\n@attribute [ExcludeFromInteractiveRouting]\n```", "```cs\n    @page \"/ch01r04\"\n    @rendermode InteractiveWebAssembly\n    ```", "```cs\n    @if (!RendererInfo.IsInteractive)\n    {\n        <p>Getting ready...</p>\n        return;\n    }\n    @* existing markup is obscured, but still down here *@\n    ```", "```cs\n    @code {\n        [Parameter, EditorRequired]\n        public string Tariff { get; set; }\n        [Parameter, EditorRequired]\n        public decimal Price { get; set; }\n        [Parameter]\n        public EventCallback OnAdded { get; set; }\n    }\n    ```", "```cs\n    <Project Sdk=\"Microsoft.NET.Sdk.Web\">\n      <PropertyGroup>\n        <TargetFramework>net9.0</TargetFramework>\n        <ImplicitUsings>enable</ImplicitUsings>\n        <WarningsAsErrors>RZ2012</WarningsAsErrors>\n      </PropertyGroup>\n      <!-- ... -->\n    </Project>\n    ```", "```cs\n    <Ticket Tariff=\"Adult\" Price=\"10.00m\" />\n    <Ticket Tariff=\"Child\" />\n    ```", "```cs\n    public class Cart(Action onStateHasChanged)\n    {\n        public List<string> Content { get; init; } = [];\n        public decimal Value { get; private set; }\n        public int Volume => Content.Count;\n        public void Add(string tariff, decimal price)\n        {\n            Content.Add(tariff);\n            Value += price;\n            onStateHasChanged.Invoke();\n        }\n    }\n    ```", "```cs\n    @page \"/ch01r06\"\n    @rendermode InteractiveWebAssembly\n    ```", "```cs\n    @code {\n        protected Cart Cart;\n        protected override void OnInitialized()\n        {\n            Cart = new(() =>\n                InvokeAsync(StateHasChanged));\n        }\n    }\n    ```", "```cs\n    <CascadingValue Value=\"Cart\">\n        <Ticket Tariff=\"Adult\" Price=\"10.00m\" />\n        <Ticket Tariff=\"Child\" Price=\"5.00m\" />\n    </CascadingValue>\n    ```", "```cs\n    <div class=\"cart-summary\">\n        <div class=\"cart-content\">\n            Items: @Cart.Volume\n        </div>\n        <div class=\"cart-value\">Price: @Cart.Value</div>\n    </div>\n    ```", "```cs\n    @code {\n        [CascadingParameter]\n        public Cart Cart { get; set; }\n        public void Add() => Cart.Add(Tariff, Price);\n    }\n    ```", "```cs\n    <div class=\"ticket-actions\">\n        <button @onclick=\"@Add\">Add to cart</button>\n    </div>\n    ```", "```cs\n    @code {\n        [Parameter, EditorRequired]\n        public Guid Id { get; set; }\n        [Parameter, EditorRequired]\n        public RenderFragment ChildContent { get; set; }\n        public void Add()\n            => Console.WriteLine($\"Ticket {Id} added!\");\n    }\n    ```", "```cs\n    <div class=\"ticket\">\n        <div class=\"ticket-info\">@ChildContent</div>\n        <div class=\"ticket-actions\">\n            <button @onclick=\"@Add\">Add to cart</button>\n        </div>\n    </div>\n    ```", "```cs\n    @page \"/ch01r07\"\n    @using\n        BlazorCookbook.App.Client.Chapters.Chapter01.Data\n    @rendermode InteractiveWebAssembly\n    ```", "```cs\n    <Ticket Id=\"@Samples.Adult.Id\">\n        @Samples.Adult.Tariff (@Samples.Adult.Price)\n    </Ticket>\n    <Ticket Id=\"@Samples.FreeAdmission.Id\">\n        <div class=\"free-ticket\">\n            @Samples.FreeAdmission.Tariff\n        </div>\n    </Ticket>\n    ```", "```cs\n<div class=\"ticket\">\n    <div class=\"ticket-info\">@Details</div>\n    <div class=\"ticket-actions\">@Actions</div>\n</div>\n@code {\n    [Parameter, EditorRequired]\n    public RenderFragment Details { get; set; }\n    [Parameter, EditorRequired]\n    public RenderFragment Actions { get; set; }\n}\n```", "```cs\n<Ticket>\n    <Details>\n        @Samples.Adult.Tariff (@Samples.Adult.Price)\n    </Details>\n    <Actions>\n        <button @onclick=\"@(() => Add(Samples.Adult.Id))\">\n            Add to cart\n        </button>\n    </Actions>\n</Ticket>\n```", "```cs\n    @typeparam T\n    ```", "```cs\n    @code {\n        [Parameter, EditorRequired]\n        public IList<T> Data { get; set; }\n        [Parameter, EditorRequired]\n        public RenderFragment Header { get; set; }\n        [Parameter, EditorRequired]\n        public RenderFragment<T> Row { get; set; }\n    }\n    ```", "```cs\n    <table class=\"grid\">\n        <thead>\n            @Header\n        </thead>\n        <tbody>\n            @foreach (var item in Data)\n                @Row(item)\n        </tbody>\n    </table>\n    ```", "```cs\n    @page \"/ch01r08\"\n    @using\n        BlazorCookbook.App.Client.Chapters.Chapter01.Data\n    @rendermode InteractiveWebAssembly\n    ```", "```cs\n    public void Add(TicketViewModel ticket)\n       => Console.WriteLine($\"Ticket {ticket.Id} added!\");\n    ```", "```cs\n    <Grid Data=\"@Samples.Tickets\">\n        @* you will add areas here *@\n    </Grid>\n    ```", "```cs\n    <Header>\n        <tr>\n            <td>Ticket code</td>\n            <td>Tariff</td>\n            <td>Price</td>\n            <td></td>\n        </tr>\n    </Header>\n    ```", "```cs\n    <Row>\n        <tr>\n            <td>@context.Id</td>\n            <td>@context.Tariff</td>\n            <td>@context.Price</td>\n            <td @onclick=\"() => Add(context)\">\n                Add to Cart\n            </td>\n        </tr>\n    </Row>\n    ```", "```cs\n<Grid Data=\"@Data.Tickets\" Context=\"ticket\">\n    ...\n    <Row>\n        <tr>\n            <td>@ticket.Id</td>\n            ... *\n        </tr>\n    </Row>\n</Grid>\n```", "```cs\n    <div class=\"alert alert-success\" role=\"alert\">\n        Added to cart successfully.\n    </div>\n    ```", "```cs\n    <div class=\"alert alert-danger\" role=\"alert\">\n        Ticket @Tariff is sold out!\n    </div>\n    @code {\n        [Parameter] public string Tariff { get; set; }\n    }\n    ```", "```cs\n    protected Type AlertType;\n    protected Dictionary<string, object> AlertParams;\n    ```", "```cs\n    public void Add(TicketViewModel ticket)\n    {\n        AlertType = ticket.AvailableSeats == 0 ?\n            typeof(Alerts.SoldOut) :\n            typeof(Alerts.AddedToCart);\n        AlertParams = new();\n        if (ticket.AvailableSeats == 0)\n        {\n            AlertParams.Add(\n                nameof(ticket.Tariff),\n                ticket.Tariff\n            );\n        }\n    }\n    ```", "```cs\n    @if (AlertType is null) return;\n    <DynamicComponent Type=\"@AlertType\"\n                      Parameters=\"@AlertParams\" />\n    ```"]