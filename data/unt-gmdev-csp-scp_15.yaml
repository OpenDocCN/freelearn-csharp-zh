- en: '15'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '15'
- en: Cross-Platform Game Development in Unity – Mobile, Desktop, and Console
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unity中的跨平台游戏开发 – 移动、桌面和游戏机
- en: Cross-platform game development in Unity presents unique challenges and opportunities.
    As the gaming industry expands, mastering the art of creating games that excel
    on mobile, desktop, and console is crucial. This chapter guides you through cross-platform
    development complexities, offering strategies to optimize game performance for
    mobile, design versatile UIs, and manage resources efficiently. We will explore
    the best practices to handle platform-specific constraints and conduct comprehensive
    testing across platforms. With examples such as adapting a game for PC and mobile
    and handling different input methods, you will gain practical knowledge to create
    scalable and high-performing games.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Unity中的跨平台游戏开发具有独特的挑战和机遇。随着游戏行业的扩张，掌握在移动、桌面和游戏机上创建出色游戏的技艺至关重要。本章将引导您了解跨平台开发的复杂性，提供优化游戏性能、设计多功能的UI和管理资源的策略。我们将探讨处理特定平台限制的最佳实践，并在各个平台上进行全面的测试。通过例如为PC和移动设备适配游戏和处理不同输入方法等示例，您将获得创建可扩展和高性能游戏的实际知识。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Identifying and addressing cross-platform development challenges
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别和解决跨平台开发挑战
- en: Optimizing games for mobile performance and controls
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优化游戏以适应移动性能和控制
- en: Designing user interfaces that adapt to different screens
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计适应不同屏幕的用户界面
- en: Conducting effective testing across various platforms
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在各种平台上进行有效的测试
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Before you start, ensure your development environment is set up as described
    in [*Chapter 1*](B22128_01.xhtml#_idTextAnchor015). This includes having the latest
    recommended version of Unity and a suitable code editor installed on your system.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，请确保您的开发环境已按照[*第1章*](B22128_01.xhtml#_idTextAnchor015)中描述的方式进行设置。这包括在您的系统上安装最新推荐的Unity版本和合适的代码编辑器。
- en: Hardware requirements
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 硬件要求
- en: 'Ensure your setup meets the following hardware requirements:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您的设置满足以下硬件要求：
- en: '**Desktop computer**:'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**桌面计算机**：'
- en: A graphics card that supports at least DX10 (shader model 4.0)
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 至少支持DX10（着色器模型4.0）的显卡
- en: A minimum of 8 GB RAM for optimal performance
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 至少8 GB RAM以实现最佳性能
- en: '**An alternative** **game platform**:'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一个替代** **游戏平台**：'
- en: This could be an iPhone, Android device, Xbox, and so on, which is required
    for testing
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这可能包括iPhone、Android设备、Xbox等，这些设备都需要进行测试
- en: Software requirements
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 软件要求
- en: 'Ensure you have the following software installed:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您已安装以下软件：
- en: '**Unity Editor**: Utilize the version of the Unity Editor installed from [*Chapter
    1*](B22128_01.xhtml#_idTextAnchor015), ideally the latest **Long-Term Support**
    (**LTS**) version'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Unity编辑器**：使用从[*第1章*](B22128_01.xhtml#_idTextAnchor015)安装的Unity编辑器版本，理想情况下是最新**长期支持**（**LTS**）版本'
- en: '**Code Editor**: Visual Studio or Visual Studio Code, with Unity development
    tools, should already be integrated as per the initial setup'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码编辑器**：Visual Studio或Visual Studio Code，根据初始设置，应已集成Unity开发工具'
- en: 'You can find the examples/files related to this chapter here: [https://github.com/PacktPublishing/Unity-6-Game-Development-with-C-Scripting/tree/main/Chapter15](https://github.com/PacktPublishing/Unity-6-Game-Development-with-C-Scripting/tree/main/Chapter15)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此处找到与本章相关的示例/文件：[https://github.com/PacktPublishing/Unity-6-Game-Development-with-C-Scripting/tree/main/Chapter15](https://github.com/PacktPublishing/Unity-6-Game-Development-with-C-Scripting/tree/main/Chapter15)
- en: Understanding platform-specific challenges
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解特定平台的挑战
- en: Developing games for multiple platforms presents many challenges that developers
    must navigate to ensure a seamless and enjoyable experience for all users. This
    section will cover outlining common obstacles encountered in cross-platform game
    development, such as varying hardware capabilities, diverse input methods, and
    differing user interface considerations. We will provide an overview of the cross-platform
    development landscape in Unity, emphasizing how Unity’s robust tools and features
    help address these challenges. Key considerations, including performance optimization,
    adaptable input handling, and responsive UI design, will be highlighted to guide
    you in creating games that perform well across a wide range of devices.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为多个平台开发游戏面临着许多挑战，开发者必须克服这些挑战，以确保所有用户都能获得无缝且愉悦的体验。本节将概述在跨平台游戏开发中遇到的常见障碍，例如不同的硬件能力、多样的输入方法和不同的用户界面考虑因素。我们将概述Unity中的跨平台开发格局，强调Unity的强大工具和功能如何帮助解决这些挑战。包括性能优化、可适应的输入处理和响应式UI设计在内的关键考虑因素将被突出，以指导你创建在广泛设备上表现良好的游戏。
- en: Hardware capabilities and performance optimization
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 硬件能力与性能优化
- en: In the realm of cross-platform game development, one of the primary challenges
    is navigating the diverse hardware capabilities across various devices. This section
    explores the differences in processing power, memory, storage, and graphics capabilities
    that exist between platforms, such as high-end PCs and mobile phones. Understanding
    how these variations can impact game performance is crucial for developers aiming
    to deliver a smooth and enjoyable gaming experience on all devices.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在跨平台游戏开发的领域，一个主要挑战是在各种设备之间导航不同的硬件能力。本节探讨了不同平台之间存在的处理能力、内存、存储和图形能力的差异，例如高端PC和手机。了解这些差异如何影响游戏性能对于旨在在所有设备上提供流畅和愉悦游戏体验的开发者至关重要。
- en: The hardware capabilities of a device significantly influence game performance,
    with high-end PCs handling more complex games compared to mobile phones. Developers
    must optimize their games for different platforms, using techniques such as quality
    settings and asset bundles in Unity. These features allow you to adjust graphical
    fidelity and package necessary assets to reduce memory usage and improve load
    times. Additionally, optimizing code and assets through **Level of Detail** (**LOD**)
    adjustments, texture compression, and efficient memory management helps maintain
    performance. Unity’s profiler and diagnostic tools are essential for identifying
    and resolving performance bottlenecks, ensuring a consistent experience across
    devices.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 设备的硬件能力显著影响游戏性能，与手机相比，高端PC可以处理更复杂的游戏。开发者必须针对不同平台优化他们的游戏，使用如Unity中的质量设置和资源包等技术。这些功能允许你调整图形保真度并打包必要的资源，以减少内存使用并提高加载时间。此外，通过**细节级别**（**LOD**）调整、纹理压缩和有效的内存管理来优化代码和资源，有助于保持性能。Unity的剖析器和诊断工具对于识别和解决性能瓶颈至关重要，确保设备间的一致体验。
- en: In summary, understanding the diverse hardware capabilities across platforms
    and employing performance optimization techniques are vital for creating cross-platform
    games that run smoothly on all devices. By leveraging Unity’s features, such as
    quality settings and asset bundles, developers can ensure that their games perform
    well, whether on high-end PCs or mobile phones. As we continue to explore the
    intricacies of cross-platform development, the next crucial aspect to consider
    is how different input methods and control schemes affect gameplay across various
    devices.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，了解跨平台之间的不同硬件能力并采用性能优化技术对于创建在所有设备上都能流畅运行的跨平台游戏至关重要。通过利用Unity的功能，如质量设置和资源包，开发者可以确保他们的游戏在高端PC或手机上都能表现良好。随着我们继续探索跨平台开发的复杂性，下一个需要考虑的关键方面是如何不同的输入方法和控制方案影响各种设备上的游戏玩法。
- en: Input methods and control schemes
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 输入方法和控制方案
- en: Supporting various input methods is a significant challenge in cross-platform
    game development. From touchscreens and mobile sensors to gamepads and keyboard/mouse
    setups, developers must design flexible control schemes that adapt seamlessly
    to different devices. Ensuring a smooth player experience across platforms requires
    careful consideration of these diverse input methods.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 支持各种输入方法是跨平台游戏开发中的一个重大挑战。从触摸屏和移动传感器到游戏手柄和键盘/鼠标设置，开发者必须设计灵活的控制方案，以无缝适应不同的设备。确保跨平台平滑的玩家体验需要仔细考虑这些不同的输入方法。
- en: The diversity of input methods across platforms necessitates a flexible and
    adaptive approach to control scheme design. Mobile devices use touchscreens and
    sensors such as accelerometers and gyroscopes, requiring intuitive touch gestures
    and responsive controls. Desktops and consoles use gamepads, keyboards, and mice,
    each needing distinct control schemes.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 跨平台输入方法的多样性需要灵活且适应性强的控制方案设计。移动设备使用触摸屏和传感器，如加速度计和陀螺仪，需要直观的触摸手势和响应式控制。桌面和游戏机使用游戏手柄、键盘和鼠标，每个都需要不同的控制方案。
- en: Unity’s Input System helps manage these challenges by abstracting input controls
    and handling device-specific configurations. Developers can define input actions
    that map to different devices, ensuring consistency across platforms. For example,
    a jump action can be triggered by a screen tap on a mobile, a button press on
    a gamepad, or a key press on a keyboard. Playtesting on various devices ensures
    intuitive and responsive controls, allowing for iterative refinement based on
    user feedback to meet player expectations.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Unity的输入系统通过抽象输入控制和处理设备特定配置来帮助管理这些挑战。开发者可以定义映射到不同设备的输入动作，确保跨平台的一致性。例如，跳跃动作可以在移动设备上通过屏幕点击触发，在游戏手柄上通过按钮按下触发，或在键盘上通过按键触发。在多种设备上进行测试确保直观且响应式控制，允许根据用户反馈进行迭代优化，以满足玩家期望。
- en: In summary, supporting various input methods requires designing flexible control
    schemes that adapt to different devices, ensuring a seamless player experience
    across platforms. Unity’s Input System simplifies the management of device-specific
    input configurations, enabling consistent and responsive controls. As we move
    forward, it’s essential to consider the impact of user interface and user experience
    design, which plays a critical role in enhancing the overall gameplay experience
    across diverse platforms.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，支持各种输入方法需要设计灵活的控制方案，以适应不同的设备，确保跨平台无缝的玩家体验。Unity的输入系统简化了设备特定输入配置的管理，实现了一致且响应的控制。随着我们向前发展，考虑用户界面和用户体验设计的影响至关重要，它在增强跨平台整体游戏体验中发挥着关键作用。
- en: User interface and user experience considerations
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户界面和用户体验考虑因素
- en: Designing a **User Interface** (**UI**) and **User Experience** (**UX**) that
    adapt to different screen sizes, resolutions, and aspect ratios is crucial for
    cross-platform game development. Ensuring that your game provides a consistent
    and enjoyable experience across various devices requires thoughtful strategies
    and tools. This section focuses on creating responsive UIs in Unity and considering
    platform-specific UX conventions.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 设计一个**用户界面**（**UI**）和**用户体验**（**UX**）以适应不同的屏幕尺寸、分辨率和纵横比对于跨平台游戏开发至关重要。确保你的游戏在各种设备上提供一致且愉悦的体验需要深思熟虑的策略和工具。本节重点介绍在Unity中创建响应式UI以及考虑特定平台的UX约定。
- en: Adapting UIs for various screen sizes and resolutions is a fundamental challenge
    in cross-platform development. Different devices, from smartphones to desktops
    and consoles, have unique display characteristics that must be accommodated. Unity
    offers several tools to assist developers in creating responsive UIs that adjust
    dynamically to these variations.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 适应不同屏幕尺寸和分辨率的UI是跨平台开发中的一个基本挑战。从智能手机到桌面和游戏机，不同的设备具有独特的显示特性，必须进行适配。Unity提供了几个工具来帮助开发者创建响应式UI，这些UI可以动态地适应这些变化。
- en: The following is an `Canvas` GameObject, highlighting the `Canvas` and `CanvasScaler`
    components.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个`Canvas` GameObject，突出显示了`Canvas`和`CanvasScaler`组件。
- en: '![Figure 15.1 – The Inspector view showing the Canvas and CanvasScaler components
    of a Canvas GameObject](img/B22128_15_1.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图15.1 – 检查器视图显示Canvas GameObject的Canvas和CanvasScaler组件](img/B22128_15_1.jpg)'
- en: Figure 15.1 – The Inspector view showing the Canvas and CanvasScaler components
    of a Canvas GameObject
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.1 – 检查器视图显示Canvas GameObject的Canvas和CanvasScaler组件
- en: The `CanvasScaler` component in Unity is particularly useful for managing UI
    scaling across different resolutions. By setting `CanvasScaler` to scale with
    screen size, developers can ensure that UI elements remain proportional and readable
    on all devices. Additionally, anchoring UI elements to specific points on a screen
    allows them to adjust dynamically as the screen size changes. This ensures that
    critical UI components remain accessible and properly positioned, regardless of
    a device’s resolution or aspect ratio.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Unity中的`CanvasScaler`组件特别适用于管理不同分辨率下的UI缩放。通过将`CanvasScaler`设置为随屏幕大小缩放，开发者可以确保UI元素在所有设备上保持比例和可读性。此外，将UI元素锚定到屏幕上的特定点，允许它们在屏幕大小变化时动态调整。这确保了关键UI组件无论设备的分辨率或纵横比如何，都保持可访问和正确定位。
- en: When setting UI properties in Unity, you can use the **Inspector** Window for
    precise adjustments. Typing in values directly allows for exact control over position,
    size, and other properties. The **Anchor Presets** menu provides options to quickly
    set anchors, ensuring the UI elements adapt to different screen sizes. Using *Alt*
    + *Click* on an anchor preset adjusts the position without changing the size,
    while *Shift* + *Click* moves the pivot to match the anchors. Combining these
    commands facilitates efficient and accurate UI placement.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity中设置UI属性时，你可以使用**检查器**窗口进行精确调整。直接输入值可以精确控制位置、大小和其他属性。**锚点预设**菜单提供了快速设置锚点的选项，确保UI元素适应不同的屏幕尺寸。使用*Alt*
    + *点击*锚点预设可以调整位置而不改变大小，而*Shift* + *点击*则将轴心移动以匹配锚点。结合这些命令可以方便且准确地放置UI。
- en: Responsive design also involves creating layouts that can adapt fluidly to various
    screen orientations and sizes. Techniques such as flexible grids and adaptive
    layouts enable developers to design UIs that look and function well on both large
    and small screens. Unity’s layout components, such as **Grid Layout Group**, **Vertical
    Layout Group**, and **Horizontal Layout Group** provide the tools needed to build
    these adaptive interfaces.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式设计还涉及创建能够灵活适应各种屏幕方向和大小的布局。诸如弹性网格和自适应布局等技术使开发者能够设计出在大屏幕和小屏幕上都能良好显示和工作的UI。Unity的布局组件，如**网格布局组**、**垂直布局组**和**水平布局组**，提供了构建这些自适应界面的所需工具。
- en: '![Figure 15.2 – The Horizontal Layout Group, Vertical Layout Group, and Grid
    Layout Group components](img/B22128_15_2.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图15.2 – 水平布局组、垂直布局组和网格布局组组件](img/B22128_15_2.jpg)'
- en: Figure 15.2 – The Horizontal Layout Group, Vertical Layout Group, and Grid Layout
    Group components
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.2 – 水平布局组、垂直布局组和网格布局组组件
- en: Considering platform-specific UX conventions is equally important. Different
    platforms have established user expectations and interaction patterns. For example,
    mobile users are accustomed to touch gestures, while console users expect navigation
    via gamepads. Adhering to these conventions enhances the UX and makes the game
    feel more intuitive. Unity’s ability to customize input handling and UI elements
    for different platforms helps developers create a cohesive UX across all devices.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑平台特定的用户体验惯例同样重要。不同的平台已经建立了用户期望和交互模式。例如，移动用户习惯于触摸手势，而控制台用户期望通过游戏手柄进行导航。遵循这些惯例可以提升用户体验，并使游戏感觉更加直观。Unity能够为不同平台定制输入处理和UI元素的能力，帮助开发者创建跨所有设备的统一用户体验。
- en: In summary, designing adaptable UIs and UX for various screen sizes and resolutions
    is essential for a successful cross-platform game. Unity’s tools, such as the
    `CanvasScaler` and layout components, facilitate the creation of responsive and
    dynamic interfaces. By considering platform-specific UX conventions, developers
    can ensure a consistent and enjoyable experience for all users. As we continue,
    we will explore the specific challenges and strategies involved in adapting games
    for mobile devices.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，为各种屏幕尺寸和分辨率设计可适应的UI和UX对于成功跨平台游戏至关重要。Unity的工具，如`CanvasScaler`和布局组件，有助于创建响应式和动态的界面。通过考虑平台特定的用户体验惯例，开发者可以确保所有用户都能获得一致且愉快的体验。随着我们继续前进，我们将探讨适应移动设备游戏所涉及的具体挑战和策略。
- en: Adapting games for mobile devices
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 适配移动设备上的游戏
- en: Mobile platforms present unique constraints and opportunities that require careful
    consideration during game development. This section delves into the specific challenges
    of optimizing game performance on mobile devices, including managing assets, handling
    different resolutions, and conserving battery life. Additionally, it explores
    the adaptation of control schemes from desktops and consoles to touch and gyroscopic
    inputs. Through practical examples, we will illustrate effective strategies to
    ensure that your game not only runs smoothly but also provides an engaging and
    intuitive experience for mobile users.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 移动平台在游戏开发过程中呈现出独特的约束和机遇，这需要我们在开发过程中仔细考虑。本节深入探讨了在移动设备上优化游戏性能的具体挑战，包括管理资源、处理不同分辨率和节省电池寿命。此外，它还探讨了从桌面和游戏机控制方案到触摸和陀螺仪输入的适应。通过实际案例，我们将展示确保您的游戏不仅运行流畅，而且为移动用户提供吸引人和直观体验的有效策略。
- en: Optimizing performance for mobile devices
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优化移动设备的性能
- en: Performance optimization is crucial for mobile game development due to the inherent
    constraints of mobile platforms, such as limited processing power, memory, and
    graphics capabilities. Ensuring that your game runs efficiently on a variety of
    mobile devices requires strategic asset management, resolution handling, and battery
    consumption considerations. This section discusses the techniques and best practices
    to achieve optimal performance on mobile platforms.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 由于移动平台固有的限制，如有限的处理能力、内存和图形能力，性能优化对移动游戏开发至关重要。确保您的游戏在各种移动设备上高效运行需要战略性的资源管理、分辨率处理和电池消耗考虑。本节讨论了在移动平台上实现最佳性能的技术和最佳实践。
- en: Mobile devices vary significantly in their hardware capabilities, making performance
    optimization crucial for developers. Managing assets efficiently to accommodate
    lower processing power and memory is one primary challenge. Using lower-resolution
    textures and optimized 3D models can significantly reduce the load on a device’s
    GPU and CPU. Unity supports texture compression and mipmaps, which are pre-calculated,
    lower-resolution versions of a texture that help manage texture quality dynamically,
    based on the device’s capabilities. Efficient asset management also involves reducing
    the number of draw calls and minimizing shader complexity. Leveraging Unity’s
    optimization tools, such as the Profiler and Frame Debugger, helps identify performance
    bottlenecks and streamline the rendering process. Additionally, using asset bundles
    allows you to load assets on demand, ensuring that only necessary resources are
    in memory at any given time.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 移动设备的硬件能力差异很大，这使得性能优化对开发者来说至关重要。高效管理资源以适应较低的处理能力和内存是一个主要挑战。使用低分辨率纹理和优化的3D模型可以显著减少设备GPU和CPU的负载。Unity支持纹理压缩和米帕图（mipmaps），这是纹理的预计算、低分辨率版本，有助于根据设备的性能动态管理纹理质量。高效的资源管理还涉及减少绘制调用和最小化着色器复杂性。利用Unity的优化工具，如Profiler和Frame
    Debugger，有助于识别性能瓶颈并简化渲染过程。此外，使用资源包允许您按需加载资源，确保在任何给定时间内存中只有必要的资源。
- en: Resolution handling is another critical aspect of mobile optimization. Mobile
    screens come in various sizes and resolutions, and ensuring that your game looks
    good and performs well across all devices is essential. Unity’s `CanvasScaler`
    component helps manage UI scaling, while adaptive resolution techniques dynamically
    adjust the game’s resolution based on a device’s performance. Testing on multiple
    devices is crucial to ensure consistent performance and visual quality. Battery
    life is also a significant concern for mobile gamers. Reducing battery consumption
    can enhance the UX by allowing longer play sessions. Unity provides features such
    as setting appropriate frame rates and using Mobile Quality Settings to balance
    performance and energy efficiency. Reducing unnecessary background processes and
    optimizing code efficiency also contributes to lower battery usage.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 分辨率处理是移动优化另一个关键方面。移动屏幕大小和分辨率各不相同，确保您的游戏在所有设备上看起来都很好且表现良好是至关重要的。Unity的`CanvasScaler`组件有助于管理UI缩放，而自适应分辨率技术可以根据设备的性能动态调整游戏分辨率。在多台设备上进行测试对于确保一致的性能和视觉质量至关重要。电池寿命也是移动游戏玩家关注的重大问题。减少电池消耗可以通过允许更长的游戏时间来提升用户体验。Unity提供了一些功能，如设置适当的帧率和使用移动质量设置来平衡性能和能源效率。减少不必要的后台进程和优化代码效率也有助于降低电池使用。
- en: In summary, optimizing performance for mobile devices involves efficient asset
    management, resolution handling, and battery consumption considerations. Using
    Unity’s tools and best practices, developers can ensure their games run smoothly
    on a wide range of mobile devices. As we continue, we will explore the adaptation
    of control schemes for touch and motion inputs, further enhancing the mobile gaming
    experience.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，为移动设备优化性能涉及高效的资源管理、分辨率处理和电池消耗考虑。使用Unity的工具和最佳实践，开发者可以确保他们的游戏在各种移动设备上运行顺畅。随着我们继续前进，我们将探讨触摸和动作输入控制方案的适应，进一步丰富移动游戏体验。
- en: Adapting control schemes for touch and motion inputs
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 适应触摸和动作输入的控制方案
- en: Adapting game controls from traditional input methods to touchscreens and motion
    sensors on mobile devices presents unique challenges and opportunities. This section
    explores the design of intuitive touch interfaces and the integration of motion
    inputs, such as accelerometers and gyroscopes, to create engaging gameplay mechanics.
    We will discuss strategies and provide examples of successful control scheme adaptations,
    demonstrating how Unity facilitates these transitions.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 将游戏控制从传统的输入方式适应到触摸屏和移动设备上的动作传感器，既带来了独特的挑战，也提供了机遇。本节探讨了直观触摸界面的设计以及将加速度计和陀螺仪等动作输入集成，以创造引人入胜的游戏玩法机制。我们将讨论策略并提供成功控制方案适应的例子，展示Unity如何促进这些过渡。
- en: Transitioning from traditional input methods, such as keyboards, mouses, and
    gamepads, to touchscreens requires thoughtful design to ensure an intuitive and
    responsive UX. One of the primary considerations is the placement and design of
    virtual buttons. These should be positioned where they can be easily accessed
    without obstructing the player’s view. The size and spacing of these buttons must
    be optimized to prevent accidental presses while ensuring they are comfortable
    to use.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 从传统的输入方式，如键盘、鼠标和游戏手柄，过渡到触摸屏需要精心设计，以确保直观和响应灵敏的用户体验。其中一个主要考虑因素是虚拟按钮的位置和设计。这些按钮应该放置在玩家可以轻松访问的位置，而不会阻挡他们的视线。这些按钮的大小和间距必须优化，以防止意外按下，同时确保使用舒适。
- en: 'Swipe controls and gesture recognition are also integral to touch interfaces.
    Swipe controls can be used for actions, such as navigating menus, or performing
    in-game actions, such as dodging or attacking. Unity’s `Input` class can be utilized
    to detect touch gestures and implement corresponding gameplay mechanics. For instance,
    a simple swipe detection can be achieved with the following script:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 滑动控制和手势识别也是触摸界面的重要组成部分。滑动控制可用于导航菜单或执行游戏中的动作，如躲避或攻击。Unity的`Input`类可以用来检测触摸手势并实现相应的游戏玩法机制。例如，可以使用以下脚本实现简单的滑动检测：
- en: '[PRE0]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This script detects swipe gestures on a touchscreen by recording the start and
    end positions of a touch, determining the swipe direction if the swipe distance
    meets a minimum threshold. `startTouchPosition` and `endTouchPosition` store the
    touch positions, while `minSwipeDistance` defines the minimum swipe distance.
    The `Update` method checks for touch input and processes the first detected touch.
    If the touch begins, it records the start position; if it ends, it records the
    end position and calls `DetectSwipe`. The `DetectSwipe` method calculates the
    distance and direction of the swipe, allowing you to implement specific actions
    based on the swipe direction.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本通过记录触摸的开始和结束位置来检测触摸屏上的滑动手势，如果滑动距离达到最小阈值，则确定滑动方向。`startTouchPosition`和`endTouchPosition`存储触摸位置，而`minSwipeDistance`定义了最小滑动距离。`Update`方法检查触摸输入并处理第一个检测到的触摸。如果触摸开始，它记录开始位置；如果触摸结束，它记录结束位置并调用`DetectSwipe`。`DetectSwipe`方法计算滑动的距离和方向，允许您根据滑动方向实现特定的动作。
- en: Motion inputs, such as accelerometers and gyroscopes, add another layer of interaction
    by allowing players to control the game through device movements. For example,
    tilting a device can be used to steer a vehicle in a racing game. Unity’s `Input.acceleration`
    provides access to the device’s accelerometer data, enabling developers to create
    motion-based controls.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 动作输入，如加速度计和陀螺仪，通过允许玩家通过设备移动来控制游戏，增加了另一层交互。例如，倾斜设备可以在赛车游戏中用来控制车辆的方向。Unity的`Input.acceleration`提供了访问设备加速度计数据的功能，使开发者能够创建基于动作的控制。
- en: 'The following script allows motion control of game objects using the device’s
    accelerometer:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以下脚本允许使用设备的加速度计来控制游戏对象：
- en: '[PRE1]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This script uses a device’s accelerometer to detect a tilt and moves the game
    object accordingly, based on the tilt direction and sensitivity. The `sensitivity`
    variable allows adjustment of how responsive the movement is to the device’s tilt.
    In the `Update` method, `Input.acceleration` captures the device’s tilt and multiplies
    it by the sensitivity. The `tilt` vector is then used in `transform.Translate`
    to move the game object horizontally and vertically, based on the *x* and *y*
    values of the tilt. This enables real-time motion control of the game object through
    the physical tilting of the device.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本使用设备的加速度计来检测倾斜并根据倾斜方向和灵敏度移动游戏对象。`sensitivity`变量允许调整运动对设备倾斜的响应程度。在`Update`方法中，`Input.acceleration`捕获设备的倾斜并将其乘以灵敏度。然后，使用`tilt`向量在`transform.Translate`中移动游戏对象，根据倾斜的*x*和*y*值在水平和垂直方向上移动。这通过设备的物理倾斜实现了游戏对象的实时运动控制。
- en: 'Case studies of games such as *Asphalt 9: Legends* and *Temple Run* illustrate
    successful adaptations of control schemes to mobile devices. *Asphalt 9* uses
    tilt controls for steering, while *Temple Run* employs swipe and tilt controls
    for character navigation, demonstrating the effective integration of touch and
    motion inputs.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '游戏如 *Asphalt 9: Legends* 和 *Temple Run* 的案例研究展示了控制方案在移动设备上的成功适配。*Asphalt 9*
    使用倾斜控制进行转向，而 *Temple Run* 则采用滑动和倾斜控制进行角色导航，展示了触摸和运动输入的有效整合。'
- en: Adapting control schemes for mobile devices involves designing intuitive touch
    interfaces and leveraging motion sensors to enhance gameplay. Unity provides robust
    tools and features to facilitate these adaptations, ensuring a seamless player
    experience. As we continue, we will delve into mobile UI and UX considerations,
    focusing on creating interfaces that adapt to various screen sizes and resolutions
    while maintaining usability and aesthetic appeal.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为移动设备适配控制方案涉及设计直观的触摸界面并利用运动传感器来增强游戏体验。Unity提供了强大的工具和功能来促进这些适配，确保玩家体验的流畅性。随着我们继续前进，我们将深入探讨移动UI和UX考虑因素，重点关注创建能够适应各种屏幕尺寸和分辨率的界面，同时保持可用性和美观性。
- en: Mobile UI and UX considerations
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 移动UI和UX考虑因素
- en: Designing a UI and UX for mobile devices presents unique challenges due to the
    smaller screen sizes and touch-based interactions. This section explores strategies
    to create mobile-friendly UIs that are easily interactable and readable, and we
    will also discuss the importance of optimizing the UX to enhance player engagement
    and retention on mobile platforms.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 由于屏幕尺寸较小且基于触摸的交互，为移动设备设计UI和UX带来了独特的挑战。本节探讨了创建易于交互和阅读的移动友好型UI的策略，我们还将讨论优化UX以增强玩家在移动平台上的参与度和留存率的重要性。
- en: When designing a UI for mobile devices, it’s crucial to consider “safe areas”
    to ensure that interactive elements are within reachable and interactable parts
    of the display. Modern mobile devices often feature notches, rounded corners,
    and other interface elements that can obstruct parts of the screen. By adhering
    to safe area guidelines, developers can prevent essential UI components from being
    hidden or difficult to access, providing a seamless and user-friendly experience
    across all devices.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当为移动设备设计UI时，考虑“安全区域”至关重要，以确保交互元素位于可触及和可交互的显示部分。现代移动设备通常具有刘海、圆角和其他界面元素，可能会遮挡屏幕的一部分。通过遵循安全区域指南，开发者可以防止关键UI组件被隐藏或难以访问，为所有设备提供无缝且用户友好的体验。
- en: One of the primary challenges in mobile UI design is accommodating smaller screen
    sizes while ensuring that UI elements remain easily interactable and readable.
    It’s crucial to design buttons, icons, and text with sufficient size and spacing
    to avoid touch input errors and enhance readability. Unity’s UI system provides
    flexible tools to address these challenges, allowing developers to create interfaces
    that scale appropriately across different devices.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 移动UI设计的主要挑战之一是在确保UI元素易于交互和阅读的同时，适应较小的屏幕尺寸。设计按钮、图标和文本时，必须足够大且间距适中，以避免触摸输入错误并提高可读性。Unity的UI系统提供了灵活的工具来解决这些挑战，允许开发者创建在不同设备上适当缩放的界面。
- en: 'Using Unity’s `CanvasScaler` component, developers can ensure that UI elements
    maintain their proportions across various screen sizes and resolutions. This component
    allows you to set a reference resolution and dynamically scale UI elements based
    on the actual screen size, ensuring consistency in appearance and usability. The
    following script is intended to be attached to a `Canvas` GameObject; Unity will
    have already added a `CanvasScaler` component to ensure consistent scaling:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Unity的`CanvasScaler`组件，开发者可以确保UI元素在各种屏幕尺寸和分辨率上保持比例。此组件允许你设置参考分辨率并根据实际屏幕大小动态缩放UI元素，确保外观和可用性的一致性。以下脚本旨在附加到`Canvas`GameObject上；Unity已经添加了`CanvasScaler`组件以确保一致的缩放：
- en: '[PRE2]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This script configures `CanvasScaler` to ensure consistent UI scaling by setting
    a reference resolution and adjusting the UI scale mode. The `canvasScaler` variable
    references the `CanvasScaler` component on the `Canvas` GameObject. In the `Start`
    method, `referenceResolution` is set to `1920x1080`, making this the base resolution
    to scale UI elements. `uiScaleMode` is then set to `CanvasScaler.ScaleMode.ScaleWithScreenSize`,
    which ensures that the UI scales proportionally with the screen size, maintaining
    a consistent appearance across different device resolutions.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本配置`CanvasScaler`以确保通过设置参考分辨率和调整UI缩放模式来实现一致的UI缩放。`canvasScaler`变量引用了`Canvas`GameObject上的`CanvasScaler`组件。在`Start`方法中，`referenceResolution`被设置为`1920x1080`，这使得它成为缩放UI元素的基准分辨率。然后`uiScaleMode`被设置为`CanvasScaler.ScaleMode.ScaleWithScreenSize`，这确保了UI按屏幕大小成比例缩放，在不同设备分辨率上保持一致的外观。
- en: Menu navigation should be intuitive and optimized for touch interactions. This
    includes designing large, easily tappable buttons and ensuring that navigation
    flows logically. Utilizing touch gestures such as swipes for navigation can enhance
    the UX by making it more fluid and natural.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单导航应直观且针对触摸交互进行优化。这包括设计大而易于触摸的按钮，并确保导航流程合理。利用如滑动等触摸手势进行导航可以增强UX，使其更加流畅和自然。
- en: Effective UX design also considers the constraints of mobile devices, such as
    limited processing power and battery life. Ensuring that a game runs smoothly
    without excessive battery drain is essential for maintaining player engagement.
    Techniques such as optimizing frame rates and reducing background processes can
    help achieve this balance.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 有效的UX设计也考虑了移动设备的限制，如有限的处理能力和电池寿命。确保游戏在没有过度消耗电池的情况下运行顺畅对于保持玩家参与度至关重要。优化帧率和减少后台进程等技术可以帮助实现这种平衡。
- en: In conclusion, designing a UI and UX for mobile devices requires careful consideration
    of screen size, touch interactions, and performance constraints. By leveraging
    Unity’s flexible UI system and implementing best practices for the mobile UX,
    developers can create engaging and accessible interfaces that enhance the overall
    player experience. As we proceed, we will delve into techniques to create responsive
    UI designs that adapt seamlessly to various screen sizes and aspect ratios, ensuring
    a consistent and enjoyable experience across all platforms.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，为移动设备设计UI和UX需要仔细考虑屏幕尺寸、触摸交互和性能限制。通过利用Unity灵活的UI系统并实施移动UX的最佳实践，开发者可以创建引人入胜且易于访问的界面，从而提升整体玩家体验。随着我们的深入，我们将探讨创建能够无缝适应各种屏幕尺寸和宽高比的响应式UI设计的技巧，确保所有平台都能提供一致且愉快的体验。
- en: Responsive UI design
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 响应式UI设计
- en: Designing UIs that are intuitive and adaptable to various screen sizes and resolutions
    is crucial for cross-platform games. A responsive UI ensures that your game provides
    a consistent and enjoyable UX across all devices, from mobile phones to high-resolution
    desktops. This section focuses on the best practices for creating responsive UIs
    in Unity, using Unity’s UI system (uGUI). We will explore techniques such as anchoring,
    dynamic layout components, and scalable UI elements, providing insights into making
    UI elements legible and accessible across different platforms. Examples of UI
    adaptations for various devices will illustrate how to implement these strategies
    effectively.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 设计能够直观适应各种屏幕尺寸和分辨率的UI对于跨平台游戏至关重要。响应式UI确保你的游戏在所有设备上提供一致且愉快的UX，从手机到高分辨率桌面。本节重点介绍在Unity中创建响应式UI的最佳实践，使用Unity的UI系统（uGUI）。我们将探讨如锚定、动态布局组件和可缩放UI元素等技术，提供关于在不同平台上使UI元素可读和可访问的见解。各种设备的UI适应示例将说明如何有效地实施这些策略。
- en: The fundamentals of responsive UI design in Unity
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Unity中响应式UI设计的原理
- en: Responsive UI design is important for creating UIs that adapt seamlessly to
    various screen sizes and resolutions. This section provides an overview of the
    key principles of responsive UI design within the Unity environment. We will introduce
    Unity’s UI system (uGUI) and its core components, such as the **Canvas**, **RectTransform**,
    and UI elements such as buttons, text, and images. Understanding resolution independence
    and aspect ratios is crucial to ensuring that your UI remains consistent and functional
    across different devices.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式UI设计对于创建能够无缝适应各种屏幕尺寸和分辨率的UI至关重要。本节概述了Unity环境中响应式UI设计的核心原则。我们将介绍Unity的UI系统（uGUI）及其核心组件，如**画布**、**RectTransform**以及按钮、文本和图像等UI元素。理解分辨率无关性和纵横比对于确保您的UI在不同设备上保持一致性和功能性至关重要。
- en: uGUI provides a robust framework for building responsive interfaces. The foundation
    of any UI in Unity is the Canvas, which acts as the container for all UI elements.
    The Canvas ensures that UI elements are rendered in the correct order and are
    responsive to changes in screen size and resolution. Each UI element within the
    Canvas is managed by a **RectTransform** component, which defines the position,
    size, and anchor points of the element.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: uGUI提供了一个强大的框架来构建响应式界面。任何Unity中的UI的基础都是Canvas，它充当所有UI元素的容器。Canvas确保UI元素以正确的顺序渲染，并能够响应屏幕尺寸和分辨率的变化。Canvas中的每个UI元素都由一个**RectTransform**组件管理，该组件定义了元素的位置、大小和锚点。
- en: 'To illustrate, let’s create a simple UI with a button that adjusts its size
    and position, based on the screen resolution:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明，让我们创建一个简单的UI，其中包含一个根据屏幕分辨率调整大小和位置的按钮：
- en: '[PRE3]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this example, we set up `CanvasScaler` to ensure resolution independence,
    allowing the UI to scale appropriately across different screen sizes. The button
    is anchored to the bottom-right corner, making it responsive to changes in screen
    dimensions. Additionally, we add haptic feedback to the button’s `onClick` event
    to enhance the UX.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们设置了`CanvasScaler`以确保分辨率无关性，允许UI在不同屏幕尺寸上适当缩放。按钮锚定在右下角，使其能够响应屏幕尺寸的变化。此外，我们为按钮的`onClick`事件添加了触觉反馈，以增强用户体验。
- en: Resolution independence and aspect ratios are fundamental concepts in responsive
    UI design. Ensuring that your UI elements scale and position correctly across
    various devices involves understanding and working with these principles. The
    `CanvasScaler` component plays a crucial role in achieving this, as it allows
    you to specify a reference resolution and automatically adjusts the scale of UI
    elements to match the actual screen size.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 分辨率无关性和纵横比是响应式UI设计的基本概念。确保您的UI元素在各种设备上正确缩放和定位，需要理解和运用这些原则。`CanvasScaler`组件在实现这一点中扮演着至关重要的角色，因为它允许您指定一个参考分辨率，并自动调整UI元素的缩放以匹配实际屏幕尺寸。
- en: In summary, understanding the fundamentals of responsive UI design in Unity
    involves mastering the core components of uGUI, such as the `CanvasScaler`, developers
    can create adaptable and consistent UIs for various screen sizes and resolutions.
    As we proceed, we will explore the use of anchors and dynamic layouts to further
    enhance the responsiveness and flexibility of our UI designs.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，理解Unity中响应式UI设计的基本原理涉及掌握uGUI的核心组件，如`CanvasScaler`，开发者可以创建适用于各种屏幕尺寸和分辨率的适应性和一致的UI。随着我们的深入，我们将探讨使用锚点和动态布局来进一步增强UI设计的响应性和灵活性。
- en: Utilizing anchors and dynamic layouts
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 利用锚点和动态布局
- en: Achieving responsive UI designs in Unity involves effectively using anchoring
    and dynamic layout components. Anchors allow UI elements to be positioned relative
    to their parent container, providing flexibility across various screen dimensions.
    Dynamic layout components, such as **Horizontal Layout Group**, **Vertical Layout
    Group**, and **Grid Layout Group**, enable the automatic adjustment of UI elements
    based on screen size and orientation. This section dives into these techniques,
    providing practical examples of setting up responsive layouts for both landscape
    and portrait modes.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity中实现响应式UI设计涉及有效地使用锚点和动态布局组件。锚点允许UI元素相对于其父容器进行定位，从而在不同屏幕尺寸上提供灵活性。动态布局组件，如**水平布局组**、**垂直布局组**和**网格布局组**，能够根据屏幕尺寸和方向自动调整UI元素。本节将深入探讨这些技术，提供设置响应式布局的实用示例，适用于横屏和竖屏模式。
- en: Anchors in Unity are a powerful tool to make UI elements responsive. By setting
    anchor points, you can define how UI elements should behave relative to their
    parent container when a screen size changes. Anchors are particularly useful for
    maintaining consistent positioning and sizing of UI elements across different
    devices.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Unity中的锚点是一个强大的工具，可以使UI元素响应。通过设置锚点，你可以定义当屏幕尺寸变化时UI元素相对于其父容器应该如何行为。锚点特别适用于在不同设备上保持UI元素的定位和大小的一致性。
- en: 'For example, to create a UI element that remains centered on the screen, you
    can set its anchor points to the center:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要创建一个始终位于屏幕中心的UI元素，你可以将其锚点设置为中央：
- en: '[PRE4]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This script centers a UI element by setting its anchor points, pivot, and position
    to the center of its parent container. The `uiElement's RectTransform` is adjusted
    so that the anchor points and pivot are both set to `(0.5, 0.5)`, the exact center
    of the UI element, and its `anchoredPosition` value is set to zero. This centers
    the pivot of the UI element, which is the reference point for any future movement,
    rotation, or scaling.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本通过设置其锚点、枢轴和位置到其父容器的中心来居中一个UI元素。`uiElement's RectTransform`被调整，使得锚点和枢轴都设置为`(0.5,
    0.5)`，即UI元素的精确中心，其`anchoredPosition`值设置为零。这使UI元素的枢轴居中，这是任何未来移动、旋转或缩放的参考点。
- en: Utilizing layout groups enables the automatic adjustment of UI elements based
    on screen size and orientation, by positioning and sizing child elements according
    to the available space and layout settings. This ensures a flexible and adaptive
    UI design.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 利用布局组可以自动根据屏幕尺寸和方向调整UI元素，通过根据可用空间和布局设置定位和调整子元素的大小。这确保了灵活且自适应的UI设计。
- en: The **Horizontal Layout Group** component arranges its children in a horizontal
    line, adjusting their positions and sizes dynamically. Similarly, the **Vertical
    Layout** **Group** component arranges its children vertically. The **Grid Layout
    Group** component organizes its children into a grid, making it ideal for creating
    responsive grids of UI elements.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**水平布局组**组件将其子元素排列成一行，动态调整它们的定位和大小。同样，**垂直布局组**组件垂直排列其子元素。**网格布局组**组件将子元素组织成网格，非常适合创建响应式UI元素网格。'
- en: 'A common requirement in a video game is to create a column of buttons. The
    following script generates that column:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在视频游戏中，一个常见的需求是创建一列按钮。以下脚本生成了这一列：
- en: '[PRE5]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This script creates a column of buttons and adds them to a parent container.
    `buttonPrefab` references the button template, and `contentParent` is where the
    buttons will be added. In the `Start` method, a loop instantiates `10` buttons,
    sets their parent to `contentParent`, and updates their text to `Button`, followed
    by their index number. This method efficiently generates a list of buttons for
    a menu or interface.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本创建一列按钮并将它们添加到父容器中。`buttonPrefab`引用按钮模板，`contentParent`是按钮将被添加的位置。在`Start`方法中，循环实例化`10`个按钮，将它们的父级设置为`contentParent`，并更新它们的文本为`Button`，后跟它们的索引号。这种方法有效地生成了一组按钮，用于菜单或界面。
- en: 'To accommodate both landscape and portrait modes, you can use a combination
    of anchors and layout groups. For example, a UI panel that adjusts its layout
    based on the screen orientation can be set up as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 为了适应横幅和纵向模式，你可以结合使用锚点和布局组。例如，一个根据屏幕方向调整布局的UI面板可以设置如下：
- en: '[PRE6]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This script adjusts a panel’s anchors based on screen orientation. The `panel`
    variable references the RectTransform of the panel. In the `Update` method, if
    the screen is in landscape mode, the anchors are set to `(0.25, 0.25)` and `(0.75,
    0.75)`. If the screen is in portrait mode, the anchors are set to `(0.1, 0.1)`
    and `(0.9, 0.9)`. This ensures that the panel is appropriately scaled and positioned
    for both orientations.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本根据屏幕方向调整面板的锚点。`panel`变量引用面板的RectTransform。在`Update`方法中，如果屏幕处于横幅模式，则锚点设置为`(0.25,
    0.25)`和`(0.75, 0.75)`。如果屏幕处于纵向模式，则锚点设置为`(0.1, 0.1)`和`(0.9, 0.9)`。这确保了面板在两种方向上都得到了适当的缩放和定位。
- en: By effectively utilizing anchors and dynamic layout components, you can ensure
    that your UI elements remain responsive and adaptable across different screen
    sizes and orientations.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 通过有效地利用锚点和动态布局组件，你可以确保你的UI元素在不同屏幕尺寸和方向上保持响应性和适应性。
- en: In summary, using anchors and dynamic layout components in Unity allows you
    to create responsive UI designs that adapt to various screen dimensions and orientations.
    These tools enable flexible positioning and automatic adjustment of UI elements,
    ensuring a consistent UX across devices. As we proceed, we will explore scalability
    and accessibility considerations, focusing on designing UIs that are both scalable
    and accessible to all users, further enhancing the overall usability and inclusivity
    of your game.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，使用Unity中的锚点和动态布局组件可以创建响应式UI设计，这些设计可以适应各种屏幕尺寸和方向。这些工具使UI元素的定位灵活，并能自动调整，确保跨设备的一致用户体验。随着我们继续前进，我们将探讨可扩展性和可访问性考虑，重点关注设计既可扩展又对所有用户可访问的UI，从而进一步增强游戏的总体可用性和包容性。
- en: Scalability and accessibility considerations
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**可扩展性和可访问性考虑**'
- en: Ensuring that UIs are not only responsive but also scalable and accessible is
    crucial for creating inclusive and user-friendly games. This section focuses on
    strategies for scaling UI components and maintaining visual quality and legibility,
    using Unity’s `CanvasScaler`. We will also discuss the best practices for designing
    accessible UIs, including sufficient contrast, readable font sizes, and accommodating
    various input methods. Testing UI designs on multiple devices is essential to
    guarantee a consistent and user-friendly experience across all platforms.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 确保UI不仅响应式，而且可扩展和可访问对于创建包容性和用户友好的游戏至关重要。本节重点介绍缩放UI组件的策略，以及使用Unity的`CanvasScaler`保持视觉质量和可读性。我们还将讨论设计可访问UI的最佳实践，包括足够的对比度、可读的字体大小和适应各种输入方法。在多个设备上测试UI设计对于确保所有平台上一致和用户友好的体验至关重要。
- en: Scalability is a key aspect of responsive UI design, ensuring that UI elements
    remain clear and functional on screens of all sizes. Unity’s `CanvasScaler` component
    is instrumental in achieving this. By configuring `CanvasScaler` to scale with
    a screen size and defining a reference resolution, you can ensure that UI elements
    maintain their proportions and legibility across different devices.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**可扩展性**是响应式UI设计的关键方面，确保UI元素在所有尺寸的屏幕上保持清晰和功能。Unity的`CanvasScaler`组件在实现这一点上起着至关重要的作用。通过配置`CanvasScaler`以适应屏幕尺寸并定义一个参考分辨率，你可以确保UI元素在不同设备上保持其比例和可读性。'
- en: Accessibility is equally important in UI design, ensuring that all users, including
    those with disabilities, can interact with a game effectively.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在UI设计中，可访问性同样重要，确保所有用户，包括有残疾的用户，都能有效地与游戏互动。
- en: 'Implementing accessible design practices involves several key strategies:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 实施可访问性设计实践涉及几个关键策略：
- en: '**Sufficient contrast**: Ensure that text and important UI elements stand out
    against the background by using contrasting colors, and avoid color combinations
    that are difficult to distinguish by colorblind users.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**足够的对比度**：通过使用对比颜色确保文本和重要的UI元素与背景形成鲜明对比，并避免色盲用户难以区分的颜色组合。'
- en: '**Readable font sizes**: Use font sizes that are easily readable on small screens.
    Avoid using excessively small text, and provide options for users to adjust the
    text size if possible.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可读的字体大小**：使用在小屏幕上易于阅读的字体大小。避免使用过小的文本，并在可能的情况下提供用户调整文本大小的选项。'
- en: '**Accommodating various input methods**: Design UI elements that are accessible
    via different input methods, such as touch, keyboard, and gamepad. This includes
    ensuring that buttons are large enough to be easily tapped on touchscreens and
    navigable when using keyboard or gamepad controls.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**适应各种输入方法**：设计可通过不同输入方法访问的UI元素，例如触摸、键盘和游戏手柄。这包括确保按钮足够大，以便在触摸屏上轻松点击，并在使用键盘或游戏手柄控制时可导航。'
- en: Testing UI designs on multiple devices is crucial to ensure that they are both
    scalable and accessible. This involves checking the UI on various screen sizes
    and resolutions, as well as using different input methods to verify usability.
    Unity’s Remote device testing and the Unity Editor’s simulation view can help
    to identify and resolve potential issues.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在多个设备上测试UI设计对于确保它们既可扩展又可访问至关重要。这包括检查不同屏幕尺寸和分辨率的UI，以及使用不同的输入方法来验证可用性。Unity的远程设备测试和Unity编辑器的模拟视图可以帮助识别和解决潜在问题。
- en: In summary, addressing scalability and accessibility considerations in UI design
    ensures that your interfaces are not only responsive but also legible and usable
    across all devices. By using Unity’s `CanvasScaler` and adhering to best practices
    for accessible design, you can create inclusive and user-friendly UIs.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，在UI设计中考虑可扩展性和可访问性，确保您的界面不仅响应迅速，而且在所有设备上都是可读的且易于使用。通过使用Unity的`CanvasScaler`并遵循可访问设计的最佳实践，您可以创建包容性和用户友好的UI。
- en: As we move forward, we will delve into testing and debugging on multiple platforms,
    emphasizing the importance of thorough testing to maintain a consistent gameplay
    experience across all target devices.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们继续前进，我们将深入探讨在多个平台上进行测试和调试，强调彻底测试的重要性，以确保在所有目标设备上保持一致的游戏体验。
- en: Testing and debugging on multiple platforms
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在多个平台上进行测试和调试
- en: Ensuring a consistent gameplay experience across all target platforms requires
    thorough testing and debugging. This section emphasizes the critical role of comprehensive
    testing in cross-platform game development. We will cover setting up Unity’s build
    settings for various platforms, utilizing both emulators and actual devices for
    testing, and strategies to identify and resolve platform-specific bugs. Additionally,
    we’ll explore tips to automate testing processes, where feasible, and discuss
    how to leverage Unity’s Cloud Build and Analytics services to gather valuable
    performance data and player feedback. These practices are essential for delivering
    a polished and enjoyable game across all devices.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在所有目标平台上保持一致的游戏体验需要彻底的测试和调试。本节强调了在跨平台游戏开发中全面测试的关键作用。我们将介绍为不同平台设置Unity构建设置的方法，利用模拟器和实际设备进行测试，以及识别和解决特定平台问题的策略。此外，我们还将探讨在可行的情况下自动化测试流程的技巧，并讨论如何利用Unity的云构建和分析服务收集有价值的表现数据和玩家反馈。这些做法对于在所有设备上提供精致且令人愉悦的游戏至关重要。
- en: Setting up for cross-platform testing
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为跨平台测试做准备
- en: Configuring Unity projects for cross-platform testing is a crucial step in ensuring
    that your game performs well across all target devices. This section provides
    an overview of the necessary steps to set up Unity projects for testing on different
    platforms. We will discuss the importance of adjusting Unity’s build settings
    to meet the specific requirements and limitations of each platform, as well as
    highlight the use of platform emulators and simulators for initial testing, alongside
    the necessity of testing on actual hardware devices.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 为跨平台测试配置Unity项目是确保您的游戏在所有目标设备上表现良好的关键步骤。本节概述了为在不同平台上进行测试设置Unity项目的必要步骤。我们将讨论调整Unity构建设置以满足每个平台特定要求和限制的重要性，以及强调使用平台模拟器和模拟器进行初始测试的必要性，同时强调在实际硬件设备上进行测试的必要性。
- en: When developing your video game project for multiple platforms, it is essential
    to adjust Unity’s build settings to cater to each target platform’s unique requirements.
    This includes configuring resolution settings, texture compression, and platform-specific
    features to ensure optimal performance and compatibility. Different platforms
    have varying screen sizes and resolutions, so configuring appropriate resolution
    settings ensures that your game displays correctly and maintains visual quality
    across all devices. Efficient texture compression is vital for managing memory
    usage and ensuring smooth performance, especially on resource-constrained devices
    such as mobile phones. Unity provides various texture compression formats tailored
    to different platforms, such as ASTC, A texture compression format that provides
    high-quality graphics and efficient memory usage on Android devices, for Android
    and PVRTC, A texture compression format optimized for high-quality graphics and
    efficient memory usage on iOS devices, for iOS. Additionally, each platform has
    unique features and limitations, such as touch input support and battery optimization
    for mobile devices, or specific controller configurations and higher graphical
    fidelity for consoles.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 当为多个平台开发你的视频游戏项目时，调整Unity的构建设置以适应每个目标平台的独特需求是至关重要的。这包括配置分辨率设置、纹理压缩和平台特定功能，以确保最佳性能和兼容性。不同的平台具有不同的屏幕尺寸和分辨率，因此配置适当的分辨率设置确保你的游戏在所有设备上正确显示并保持视觉质量。有效的纹理压缩对于管理内存使用和确保在资源受限的设备（如手机）上平滑性能至关重要。Unity为不同的平台提供了各种纹理压缩格式，例如ASTC，一种在Android设备上提供高质量图形和高效内存使用的纹理压缩格式，用于Android和PVRTC，一种针对iOS设备上高质量图形和高效内存使用进行优化的纹理压缩格式。此外，每个平台都有其独特的功能和限制，例如移动设备的触摸输入支持和电池优化，或控制台特定的控制器配置和更高的图形保真度。
- en: Using platform emulators and simulators is beneficial for preliminary testing,
    allowing developers to test their games in virtual environments that mimic different
    devices and operating systems. These tools help identify issues related to screen
    resolution, input methods, and basic performance metrics without needing extensive
    physical hardware. However, emulators and simulators cannot fully replicate the
    experience of running a game on actual hardware. Testing on real devices is crucial
    for identifying hardware-specific issues such as performance bottlenecks, input
    latency, and platform-specific bugs that may not be apparent in an emulated environment.
    It is important to test your game on a range of actual devices that represent
    the diversity of your target audience’s hardware.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 使用平台模拟器和仿真器对初步测试有益，允许开发者测试他们的游戏在模仿不同设备和操作系统的虚拟环境中。这些工具有助于识别与屏幕分辨率、输入方法和基本性能指标相关的问题，而无需大量物理硬件。然而，模拟器和仿真器无法完全复制在真实硬件上运行游戏的经验。在实际设备上进行测试对于识别与硬件相关的问题至关重要，例如性能瓶颈、输入延迟和可能在仿真环境中不明显的平台特定错误。测试代表目标受众硬件多样性的各种实际设备对于你的游戏来说非常重要。
- en: 'The following figure is a screenshot of the Unity **Build Settings** window,
    where you can configure your project’s build options:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 下图是Unity **构建设置**窗口的截图，您可以在其中配置项目的构建选项：
- en: '![Figure 15.3 – Unity’s Build Settings window, where you can select target
    build platforms, configure platform options, and specify the scenes to include
    in the final build](img/B22128_15_3.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图15.3 – Unity的构建设置窗口，您可以在其中选择目标构建平台、配置平台选项并指定最终构建中包含的场景](img/B22128_15_3.jpg)'
- en: Figure 15.3 – Unity’s Build Settings window, where you can select target build
    platforms, configure platform options, and specify the scenes to include in the
    final build
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.3 – Unity的构建设置窗口，您可以在其中选择目标构建平台、配置平台选项并指定最终构建中包含的场景
- en: In summary, setting up Unity projects for cross-platform testing involves configuring
    build settings to address the specific needs of each platform, utilizing emulators
    and simulators for initial testing, and ensuring thorough testing on actual hardware
    devices. This comprehensive approach helps identify and resolve potential issues,
    ensuring a smooth and consistent gaming experience across all platforms. As we
    move forward, we will delve into identifying and resolving platform-specific bugs,
    a critical aspect of refining and polishing your game for release.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，为跨平台测试设置Unity项目涉及配置构建设置以解决每个平台的具体需求，利用模拟器和仿真器进行初步测试，并确保在实际硬件设备上进行彻底测试。这种全面的方法有助于识别和解决潜在问题，确保所有平台上的游戏体验流畅且一致。随着我们继续前进，我们将深入了解识别和解决平台特定错误，这是完善和精炼游戏以发布的关键方面。
- en: Identifying and resolving platform-specific bugs
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 识别和解决平台特定错误
- en: Identifying and resolving platform-specific bugs is crucial for a seamless gaming
    experience across all devices. This section delves into strategies to troubleshoot
    issues, from performance bottlenecks to input method inconsistencies. Unity’s
    debugging tools, log files, and profiler are key for pinpointing sources of bugs.
    Additionally, leveraging beta testing communities and user feedback can help identify
    issues not caught during internal testing.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 识别和解决平台特定错误对于确保所有设备上的无缝游戏体验至关重要。本节深入探讨了从性能瓶颈到输入方法不一致性的故障排除策略。Unity的调试工具、日志文件和性能分析器对于定位错误源至关重要。此外，利用测试社区和用户反馈可以帮助识别在内部测试中未发现的问题。
- en: Platform-specific bugs often stem from differences in hardware, operating systems,
    and input methods. Effective troubleshooting begins with Unity’s built-in debugging
    tools. The **Console** window helps monitor log files and error messages, while
    the Profiler identifies performance bottlenecks, providing detailed CPU, GPU,
    and memory usage information. For Android, tools such as **Android Debug Bridge**
    (**ADB**) and Logcat are invaluable for gathering device information. For iOS,
    Xcode’s **Device and Simulators** window serves a similar purpose.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 平台特定错误通常源于硬件、操作系统和输入方法之间的差异。有效的故障排除从Unity内置的调试工具开始。**控制台**窗口有助于监控日志文件和错误消息，而**性能分析器**则识别性能瓶颈，提供详细的CPU、GPU和内存使用信息。对于Android，**Android调试桥接器（ADB**）和**日志猫（Logcat**）等工具对于收集设备信息非常有价值。对于iOS，Xcode的**设备和模拟器**窗口起到类似的作用。
- en: Testing on real devices is essential for identifying hardware-specific issues
    such as performance bottlenecks, input latency, and platform-specific bugs. Emulators
    and simulators can provide useful insights, but they often fail to replicate the
    exact behavior of actual hardware. For example, a game might perform smoothly
    on an emulator but experience significant frame drops or input delays on a real
    device. By testing on a variety of physical devices, developers can uncover and
    address these issues, ensuring a consistent and optimized experience for all users.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在真实设备上进行测试对于识别硬件特定问题至关重要，例如性能瓶颈、输入延迟和平台特定错误。模拟器和仿真器可以提供有用的见解，但它们往往无法完全复制实际硬件的行为。例如，一个游戏可能在模拟器上运行流畅，但在真实设备上可能会出现显著的帧率下降或输入延迟。通过在多种物理设备上进行测试，开发者可以发现并解决这些问题，确保所有用户都能获得一致和优化的体验。
- en: 'Implementing a structured testing regimen is vital for comprehensive bug detection
    and resolution. This regimen should include various types of tests:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 实施结构化的测试计划对于全面发现和解决错误至关重要。这个计划应包括各种类型的测试：
- en: '**Unit tests**: Focus on individual components of a game, ensuring each part
    functions correctly in isolation.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单元测试**：专注于游戏的单个组件，确保每个部分在独立情况下都能正确运行。'
- en: '**Integration tests**: Check the interactions between different components,
    ensuring they work together seamlessly.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成测试**：检查不同组件之间的交互，确保它们能够无缝协作。'
- en: '**User Acceptance Testing (UAT)**: This involves real users testing the game
    to ensure that it meets their expectations and requirements.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户验收测试（UAT）**：这涉及到真实用户测试游戏，以确保它符合他们的期望和需求。'
- en: Beta testing communities and user feedback offer diverse hardware and usage
    scenarios, uncovering performance, usability, and compatibility issues that might
    otherwise go unnoticed. Engaging with the community and encouraging detailed feedback
    helps address platform-specific problems effectively.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 测试社区和用户反馈提供了不同的硬件和用法场景，揭示了可能被忽视的性能、可用性和兼容性问题。与社区互动并鼓励详细的反馈有助于有效地解决平台特定问题。
- en: In summary, identifying and resolving platform-specific bugs requires using
    Unity’s debugging tools, log files, and profiler, alongside tools such as ADB,
    Logcat, and Xcode’s **Device and Simulators** window. Implementing a structured
    testing regimen and leveraging beta testing communities and user feedback ensure
    comprehensive coverage and effective issue resolution.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，识别和解决平台特定错误需要使用Unity的调试工具、日志文件和性能分析器，以及如ADB、Logcat和Xcode的**设备和模拟器**窗口等工具。实施结构化测试计划并利用测试社区和用户反馈确保全面覆盖和有效问题解决。
- en: Next, we will explore automating testing processes and leveraging analytics
    to enhance game development and refinement.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探讨自动化测试流程并利用分析来增强游戏开发和优化。
- en: Automating testing and leveraging analytics
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动化测试和利用分析
- en: Automating testing enhances efficiency and reliability in game development.
    This section explores using Unity’s Test Framework to automate tests and integrate
    them into the development pipeline with CI tools. We will also highlight Unity
    Cloud Build to automate platform builds and Unity Analytics to gather real-time
    data on game performance and player behavior.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化测试提高了游戏开发的效率和可靠性。本节将探讨使用Unity的测试框架来自动化测试并将其与CI工具集成到开发流程中。我们还将突出Unity Cloud
    Build来自动化平台构建和Unity Analytics来收集游戏性能和玩家行为的实时数据。
- en: Automating testing ensures continuous testing throughout development, catching
    issues early and reducing manual testing time. Unity’s Test Framework allows you
    to create and run automated unit and integration tests, providing immediate feedback
    on any issues introduced by new code. These tests can be executed automatically
    as part of the build process, verifying that the code works as intended after
    every change.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化测试确保了开发过程中的持续测试，及早发现问题并减少手动测试时间。Unity的测试框架允许您创建和运行自动化单元和集成测试，对新代码引入的任何问题提供即时反馈。这些测试可以作为构建过程的一部分自动执行，验证代码在每次更改后是否按预期工作。
- en: CI tools such as Jenkins, Travis CI, or GitHub Actions can integrate automated
    tests into the development pipeline, maintaining code quality and stability. Unity
    Cloud Build automates builds for different platforms, ensuring a game is always
    ready to test and catch platform-specific issues early. Unity Analytics collects
    real-time data on game performance and player behavior, helping developers identify
    issues and refine the game based on actual usage patterns.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: CI工具，如Jenkins、Travis CI或GitHub Actions，可以将自动化测试集成到开发流程中，维护代码质量和稳定性。Unity Cloud
    Build自动化不同平台的构建，确保游戏始终准备好测试并及早发现平台特定问题。Unity Analytics收集游戏性能和玩家行为的实时数据，帮助开发者识别问题并根据实际使用模式优化游戏。
- en: To summarize, automating the testing process and leveraging analytics are crucial
    steps in modern game development. Utilizing Unity’s Test Framework and CI tools
    for automated testing, alongside Unity Cloud Build for automated builds, significantly
    improves efficiency and reliability. Additionally, Unity Analytics provides real-time
    data on game performance and player behavior, guiding the refinement of a game
    based on actual usage. These practices ensure a streamlined development process
    and a high-quality final product.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，自动化测试过程和利用分析是现代游戏开发中的关键步骤。利用Unity的测试框架和CI工具进行自动化测试，以及Unity Cloud Build进行自动化构建，显著提高了效率和可靠性。此外，Unity
    Analytics提供了游戏性能和玩家行为的实时数据，根据实际使用指导游戏的优化。这些实践确保了开发流程的流畅和最终产品的优质。
- en: Summary
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Cross-platform game development in Unity involves navigating a range of complexities
    to create games that perform seamlessly on mobile, desktop, and console platforms.
    This chapter provided an in-depth look at the unique challenges that developers
    face and offered strategies to overcome them. We explored techniques to optimize
    game performance on mobile devices, including tailored controls for touchscreens,
    and learned how to design versatile UIs that adapt to different screen sizes and
    resolutions. Finally, we delved into the importance of comprehensive testing across
    various platforms to ensure a consistent and enjoyable gaming experience for all
    users. With these insights and tools, you’re well-equipped to tackle cross-platform
    development in Unity. As we move forward, the next step is to explore effective
    strategies to publish and monetize your game, ensuring that it reaches the right
    audience and achieves commercial success, which will be discussed in the upcoming
    chapter.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity中进行跨平台游戏开发涉及处理一系列复杂性，以创建在移动、桌面和游戏机平台上无缝运行的游戏。本章深入探讨了开发者面临独特挑战，并提供了克服这些挑战的策略。我们探讨了优化移动设备游戏性能的技术，包括针对触摸屏的定制控制，并学习了如何设计适应不同屏幕尺寸和分辨率的通用用户界面。最后，我们深入探讨了在各个平台上进行全面测试的重要性，以确保所有用户都能获得一致且愉快的游戏体验。凭借这些见解和工具，你已准备好应对Unity中的跨平台开发。随着我们继续前进，下一步是探索有效的发布和盈利策略，确保你的游戏能够触及目标受众并取得商业成功，这将在下一章中讨论。
