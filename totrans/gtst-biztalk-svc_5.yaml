- en: Chapter 5. Business-to-business Integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A transaction between two companies in a buyer-seller relationship is business-to-business
    (B2B) as opposed to a B2C relationship between a company and its consumer. In
    the context of integration, B2B is about two organizations agreeing on a set of
    well-defined transactions for the exchange of business information. The B2B process
    starts off with a business negotiation or an agreement, which further translates
    into the technical details at the message flow level.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will focus on the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding B2B integration in the context of Azure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the capabilities of the service with partner, agreement, batching,
    and tracking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Walkthrough of a real-world B2B scenario using BizTalk Services on Azure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic concepts of B2B
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Consider a retailer, Contoso, who wishes to procure stock from a supplier,
    Northwind. From a technology standpoint, the message flow between Contoso and
    Northwind can be explained using the following flow:'
  prefs: []
  type: TYPE_NORMAL
- en: Contoso and Northwind agree to enter into a business relationship (usually over
    phone/e-mail/meetings). The legal teams draft the memorandum of understanding
    (MoU) between the partners.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The partners exchange information on how one would receive/send payments, including
    cheque and bank details.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both partners enter a setup phase where each of their IT departments configures
    the B2B system to enable the exchange of electronic data interchange (EDI).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both partners exchange sample test messages to validate the configuration, and
    after sufficient testing, they agree to move ahead with production.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In production, the following steps are carried out:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Contoso raises a purchase order from their Dynamics AX ERP system and sends
    it to Northwind
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Northwind receives the order and acknowledges that they have received the order
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Northwind processes the order and looks up the inventory in their SAP ERP to
    determine whether they can service the request
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If the order can be serviced, Northwind send the goods to a third-party logistics
    company (3PL) who handles the shipment of goods
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Northwind replies with the shipment details to Contoso
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Contoso can optionally acknowledge the receipt of the shipment notice
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Northwind sends an invoice to Contoso for the cost of goods sold
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Contoso sends payment to Northwind based on the financial terms agreed upon.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The preceding flow can be visually represented as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Basic concepts of B2B](img/7401EN_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Each of the arrows in the preceding diagram represents a set of messages exchanged
    between Contoso and Northwind. Each message type is identified by a document name
    or transaction set (for example, PO/X12 850) and has a defined format based on
    the protocol used. The protocol, in addition to the structure of the message,
    governs the set of messages exchanged back and forth. In the preceding example,
    we can write the first transaction as "Contoso raises an EDI X12 purchase order
    (850) to Northwind". Here, X12 is the EDI format and 850 is the purchase order
    message type.
  prefs: []
  type: TYPE_NORMAL
- en: Common interaction models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are two common ways to integrate trading partners for B2B. They are listed
    as follows.
  prefs: []
  type: TYPE_NORMAL
- en: Direct enterprise integration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this model, both trading partner organizations have in-house IT and can directly
    transact EDI messages. There are systems in place to send and receive EDI transactions
    over point-to-point protocols without any mediator or middleman.
  prefs: []
  type: TYPE_NORMAL
- en: Service provider integration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this model, one of the trading partners is a small-to-medium business player
    who cannot afford in-house IT. In order to facilitate EDI interactions, there
    is a middleman, or the EDI service provider, who acts as a liaison between the
    two partners. The service provider talks about EDI to a trading partner on one
    end and transacts non-EDI (such as XLS/XML) with the other trading partner. The
    service provider charges a fee based on transaction size/volume or the complexity
    of the protocols used.
  prefs: []
  type: TYPE_NORMAL
- en: '**Value Added Networks** (**VANs**) are specialized networks offering end-to-end
    B2B services in a service provider integration. VANs manage the hosting of servers
    and software to process EDI traffic and usually charge based on message volume.
    They could specialize solutions for a particular vertical or offer generic message
    processing services.'
  prefs: []
  type: TYPE_NORMAL
- en: Industry standards and protocols
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Various organizations define protocols for different industry verticals. Each
    protocol governs the set of messages exchanged, the acknowledgements transferred,
    and the error behavior between trading partners.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are some of the most common protocols and their standards organization
    supported in BizTalk today:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Standards body | Website | Protocol | Industries |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| ANSI ASC X12 | [http://www.x12.org/](http://www.x12.org/) | X12 | In the
    US: manufacturing, retail, government, and transportation |'
  prefs: []
  type: TYPE_TB
- en: '|  |  | HIPAA | Healthcare, insurance |'
  prefs: []
  type: TYPE_TB
- en: '| UN/CEFACT | [http://www.unece.org/cefact/edifact](http://www.unece.org/cefact/edifact)[http://www.gefeg.com/jswg/](http://www.gefeg.com/jswg/)
    | UN/ EDIFACT | In Europe: manufacturing, retail, government, and transportation
    |'
  prefs: []
  type: TYPE_TB
- en: '| SWIFT | [http://www.swift.com](http://www.swift.com) | SWIFT | Financial
    transactions for treasury, trade, and banking |'
  prefs: []
  type: TYPE_TB
- en: '| RosettaNet | [http://www.rosettanet.org/](http://www.rosettanet.org/) | RosettaNet
    | Supply chain |'
  prefs: []
  type: TYPE_TB
- en: '| OAGi | [http://www.oagi.org](http://www.oagi.org) | CIDX | Horizontal framework
    for several verticals |'
  prefs: []
  type: TYPE_TB
- en: '| PIDX | [http://www.pidx.org/](http://www.pidx.org/) | PIDX | Oil and Natural
    Gas |'
  prefs: []
  type: TYPE_TB
- en: '| HL7 | [http://www.hl7.org/](http://www.hl7.org/) | HL7 | Healthcare |'
  prefs: []
  type: TYPE_TB
- en: X12 is heavily used in the US, while EDIFACT is more popular in Europe and Asian
    countries. Both these protocols are supported in BizTalk Services today. The remaining
    protocols are available in BizTalk Server.
  prefs: []
  type: TYPE_NORMAL
- en: Concepts in BizTalk Services B2B
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: B2B in BizTalk Services is all about processing EDI and non-EDI messages between
    trading partners. It is meant to make B2B integration simple, powerful, and flexible
    using Azure. B2B, by its nature of protocols, formats, and transport, tends to
    be complex in configuration; with Azure, service configuration of an agreement
    between partners is simple. It's easy to extend the service and connect with other
    technologies such as SharePoint and mobile services to build a rich and powerful
    solution.
  prefs: []
  type: TYPE_NORMAL
- en: 'The top-level concepts in B2B/EDI include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: EDI message structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Partners and agreements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Property promotion in EDI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Batching
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tracking and archiving
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extensibility and object model API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EDI message structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'EDI messages (either X12 or EDIFACT) have a nested structure, compartmentalizing
    transactions for ease of understanding by the receiver. Every structure has a
    header and trailer to identify the start and end of the nested structure. The
    following outlines the nesting structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Interchange**: This is the outermost envelope with a header and trailer.
    It identifies the sender and receiver of the message as well as the date/time
    when the message was sent. In the case of X12, the ISA and IEA are the header
    and trailer respectively; in EDIFACT, the UNB and UNZ form the header and trailer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Group**: A group segment in an interchange is a set of transactions clubbed
    together by their function. A group starts with a header (GS in X12 and UNG in
    EDIFACT) and ends with a trailer (GE in X12 and UNE in EDIFACT). Unlike X12, groups
    are optional in EDIFACT; but when groups are present, they must contain all transactions
    of the same type (for example, all purchase orders).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Transaction set**: A transaction set in a group is the message of a given
    type (for example, a purchase order message) with segments detailing transactions
    such as item quantity or price. A transaction set starts with a header (ST in
    X12 and UNH in EDIFACT) and ends with a trailer (SE in X12 and UNT in EDIFACT).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following table illustrates the X12 and EDIFACT headers and trailers:'
  prefs: []
  type: TYPE_NORMAL
- en: '| X12 header and trailer | EDIFACT header and trailer |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| ISA Interchange Control Header | UNA Optional Advice |'
  prefs: []
  type: TYPE_TB
- en: '| GS Functional Group Header | UNB Interchange Control Header |'
  prefs: []
  type: TYPE_TB
- en: '| ST Transaction Set Header | UNG Functional Group Header |'
  prefs: []
  type: TYPE_TB
- en: '| SE Transaction Set Trailer | UNH Message Header |'
  prefs: []
  type: TYPE_TB
- en: '| GE Functional Group Trailer | UNT Message Trailer |'
  prefs: []
  type: TYPE_TB
- en: '| IEA Interchange Control Trailer | UNE Functional Group Trailer |'
  prefs: []
  type: TYPE_TB
- en: '|   | UNZ Interchange Control Trailer |'
  prefs: []
  type: TYPE_TB
- en: Partners and agreements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the key concepts used with agreements:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Partner**: A partner is an organization with which a trading relationship
    is established. Each partner has one or more business units referred to as **business
    profiles**. Every business profile has an identifier (for example, a DUNS ID or
    phone number) that is unique and added to each message exchanged between the partners.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Agreement**: An agreement represents the technical settings of message exchange
    between partners. An agreement is established between two business profiles of
    partners. The agreement is composed of send settings (send of Contoso, receive
    of Northwind) and receive settings (receive of Contoso and send of Northwind)
    in the trading partner relationship. An agreement refers to a protocol such as
    AS2, X12, EDIFACT, and so on, based on messaging requirements. An agreement also
    identifies the schemas and requirements around tracking and batching. Deployment
    of the agreement results in two bridge deployments and, therefore, endpoints in
    Azure that can receive EDI messages and send XML and vice versa. The agreement
    definition in the BizTalk Portal has the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Transport**: This is the send side or the receive side transport of the bridges.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Protocol**: This is the EDI protocol under use in the bridge.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Transform**: These are the maps used while a message is processed in the
    bridge.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Route**: This is the target destination where the bridge will route the message
    to the recipient of the message.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Inbound URI**: This is the address of the send side bridge which receives
    messages to be sent to the destination partner.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Suspend endpoint**: This is the endpoint which would process the message
    if there are errors in the processing of the EDI message. This endpoint can be
    used to build repair-resubmit scenarios.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Partnership**: At least one agreement between partners constitutes a partnership
    between the partners. The concept of partnership is exposed only through the trading
    partner management API.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Agreement template**: An agreement template is a unit of re-use where commonly
    repeated settings can be captured as a template and applied while defining an
    agreement for rapid configuration. An agreement template is associated with a
    profile. Each template definition identifies the hosted partner in the definition
    to determine the direction of settings to be applied while creating an agreement.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AS2 agreement**: AS2 agreement refers to the AS2 transport settings agreed
    between two partners adhering to the RFC 4130 standard. In a nutshell, AS2 allows
    messages and acknowledgements to be transmitted in compressed, signed, or encrypted
    form over HTTP or HTTPS. Signing and encryption is supported using certificates.
    AS2 is not specific to the payload and can be used for both B2B flat files and
    EAI XML messages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If the endpoints of one partner, say Partner A, require HTTPS for AS2 traffic,
    then Partner A''s deployment certificate needs to be added to the "Trusted People"
    certificate store of Partner B. Alternately, if the AS2 messaging from Partner
    A is to an HTTPS endpoint of Partner B, then Partner B''s public certificate needs
    to be added to the certificate store of Partner A''s deployment. Both these certificates
    need to be uploaded to the BizTalk Services deployment certificate store using
    `PSCmdlet` loaded from BizTalk Services Tools. Here is the sample code to add
    the certificate using PowerShell:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If self-signed certificates are generated by using `makecert.exe`, ensure that
    you pass the `–pe` and `–key` exchange parameters to the command to make the certificate
    exportable and usable for encryption purposes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**X12 and EDIFACT agreement**: Both X12 and EDIFACT are supported on BizTalk
    Services. The choice of the agreement is available through a combobox selection
    during agreement creation. For each application protocol, the agreement settings
    consist of a series of schema selection, acknowledgement configuration, control
    number configuration, batching, character sets and separators configuration, and
    configuration of message validation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Property promotion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Certain properties in the EDI envelopes we discussed earlier are autopromoted
    and are available for use in routing and tracking scenarios. They can also be
    used to determine the agreement endpoints programmatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listed in the following tables are the promoted properties in EDI and AS2:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Property | Location | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Message Type | X12 Receive | Numeric value identifies type of message, for
    example, 850 PO, 810 Invoice |'
  prefs: []
  type: TYPE_TB
- en: '| AgreementName | X12 Receive | Name of the agreement |'
  prefs: []
  type: TYPE_TB
- en: '| ISA 5-8ISA 9, 10, 12, 15 | X12 Receive | X12 ISA envelopes |'
  prefs: []
  type: TYPE_TB
- en: '| GS01-08 | X12 Receive | X12 GS envelopes |'
  prefs: []
  type: TYPE_TB
- en: '| ST01 | X12 Receive | X12 transaction set message type |'
  prefs: []
  type: TYPE_TB
- en: '| ST03 | X12 Receive | X12 transaction set version |'
  prefs: []
  type: TYPE_TB
- en: '| AS2-To, AS2-Version, Mime-Version, AS2-From | AS2 Send/Receive | AS2 header
    properties |'
  prefs: []
  type: TYPE_TB
- en: '| Content-ID, Content-Type, Content-Transfer-Encoding |   |   |'
  prefs: []
  type: TYPE_TB
- en: '| Disposition-Notification-To, Disposition-Notification-Options |   |   |'
  prefs: []
  type: TYPE_TB
- en: '| Content-Description, Content-Disposition, Receipt-Delivery-Option |   |  
    |'
  prefs: []
  type: TYPE_TB
- en: '| SystemRequestID | X12 Send, X12 Receive, AS2 Receive | ID to track the message
    flow in the bridge |'
  prefs: []
  type: TYPE_TB
- en: '| MessageReceivedTime | X12 Send, X12 Receive, AS2 Receive | Date and time
    of incoming message |'
  prefs: []
  type: TYPE_TB
- en: '| SourceType | X12 Send, X12 Receive, AS2 Receive | FTP, HTTP, or AS2 per configuration
    |'
  prefs: []
  type: TYPE_TB
- en: '| SourceName | X12 Send, X12 Receive, AS2 Receive | The name configured for
    source; this is an autogenerated name in EDI agreements |'
  prefs: []
  type: TYPE_TB
- en: '| AgreementID | X12 Send, X12 Receive, AS2 Receive | Agreement ID as displayed
    in the agreements list view in the BizTalk portal |'
  prefs: []
  type: TYPE_TB
- en: '| UNA_Segment | EDIFACT Receive | UNA Segment with characters as separators
    and indicators |'
  prefs: []
  type: TYPE_TB
- en: '| UNB_Segment | EDIFACT Receive | Interchange header segment |'
  prefs: []
  type: TYPE_TB
- en: '| UNB2_1 | EDIFACT Receive | Sender Identification |'
  prefs: []
  type: TYPE_TB
- en: '| UNB2_2 | EDIFACT Receive | Sender Code qualifier |'
  prefs: []
  type: TYPE_TB
- en: '| UNB2_3 | EDIFACT Receive | Sender Reverse Routing address |'
  prefs: []
  type: TYPE_TB
- en: '| UNB3_1 | EDIFACT Receive | Receiver Identification |'
  prefs: []
  type: TYPE_TB
- en: '| UNB3_2 | EDIFACT Receive | Receiver Code qualifier |'
  prefs: []
  type: TYPE_TB
- en: '| UNB11 | EDIFACT Receive | Test indicator |'
  prefs: []
  type: TYPE_TB
- en: '| UNG_Segment | EDIFACT Receive | Functional group header segment |'
  prefs: []
  type: TYPE_TB
- en: '| UNG1 | EDIFACT Receive | Functional group identifier |'
  prefs: []
  type: TYPE_TB
- en: '| UNG2_1 | EDIFACT Receive | Group Application Sender Identifier |'
  prefs: []
  type: TYPE_TB
- en: '| UNG3_1 | EDIFACT Receive | Group Application Receiver Identifier |'
  prefs: []
  type: TYPE_TB
- en: '| UNH2_1 | EDIFACT Receive | Message type identifier |'
  prefs: []
  type: TYPE_TB
- en: '| UNH2_2 | EDIFACT Receive | Message type version number |'
  prefs: []
  type: TYPE_TB
- en: '| UNH2_3 | EDIFACT Receive | Message type release number |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: AS2 Send is sending the message to the partner; hence, the properties are not
    usable directly. In the case of X12 Send, we can route the message to a blob store
    or Service Bus queue and base our action on the properties promoted.
  prefs: []
  type: TYPE_NORMAL
- en: Batching
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Batching is a concept where messages are accumulated based on selection criteria
    and released once the desired event known as the release criteria is met. Customers
    use batching of messages to aggregate messages for reasons of cost, compatibility,
    and convenience. In the early days of VAN, messages were charged on size and customers
    were optimized by sending batches of messages. An example of this is airlines
    charging the same for all containers, whether they contain 2000 kg or 5000 kg.
    It makes sense for freight forwarders to batch requests from multiple shipments
    into a single container to save costs. Few mainframe systems of trading partners
    cannot accept messages more than 250 KB. It is important to break messages such
    as these to sizes less than or equal to 250 KB before sending them to the target
    system.
  prefs: []
  type: TYPE_NORMAL
- en: As part of BizTalk Services B2B, customers can configure and manage a batch
    in an agreement's send side configuration (debatching is already part of the system
    as the interchange format is implicitly known). An agreement can contain zero
    or more batch definitions. Every batch has a state—it can be enabled, disabled,
    or in error. Batches are enabled when the corresponding agreement is deployed
    or the start command is used explicitly. When batches are stopped, messages in
    the batch are flushed out. Each batch definition contains the selection and the
    release criteria.
  prefs: []
  type: TYPE_NORMAL
- en: Selection criteria
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The selection criteria are used to select a message for batching. In BizTalk
    Services, customers can promote properties and use them in expressions to select
    the message to be added to one or more batches. If the property of an incoming
    batch matches more than one definition, then the message is copied to these many
    batches.
  prefs: []
  type: TYPE_NORMAL
- en: Release criteria
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The release criteria determine when the batch should be released. One of the
    following can be used as release criteria:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Release criteria | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Size | The maximum size of the message (excluding interchange and groups)
    in bytes with UTF-8 encoding |'
  prefs: []
  type: TYPE_TB
- en: '| Count | The number of transaction sets in a batched message |'
  prefs: []
  type: TYPE_TB
- en: '| Schedule | The configuration of the occurrence and recurrence values to release
    messages periodically |'
  prefs: []
  type: TYPE_TB
- en: '| Timeout | Inter-message idle timeout when a batch needs to be released |'
  prefs: []
  type: TYPE_TB
- en: '| Interchange size and schedule | Either size or based on schedule |'
  prefs: []
  type: TYPE_TB
- en: '| Interchange size and timeout | Either size or configured timeout |'
  prefs: []
  type: TYPE_TB
- en: '| Message count and schedule | Either count or based on schedule |'
  prefs: []
  type: TYPE_TB
- en: '| Message count and timeout | Either count or configured timeout |'
  prefs: []
  type: TYPE_TB
- en: '| Interchange size and message count | Either size or count |'
  prefs: []
  type: TYPE_TB
- en: Messages from a batch are released when either the release criteria are met
    or the batch has been stopped from the BizTalk portal. If the release criteria
    are met but no messages are in the batch, a null message is not sent to the send
    endpoint. If the send endpoint is not available when the batch releases a message,
    the message is passed to the suspend endpoint. In the worst case, if the suspend
    endpoint is also down in spite of retries, the set of unbatched transaction sets
    are held in the system and released to the suspend endpoint the next time it becomes
    available. Also, note that for an agreement to be deleted, the batches defined
    in the agreement must not have any messages.
  prefs: []
  type: TYPE_NORMAL
- en: Tracking and archiving
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tracking helps in storing interesting properties in a message and archiving
    messages in stores. Both tracking and archiving are settings enabled as part of
    an agreement configuration. In the case of B2B, the system and user-promoted properties
    are tracked and written to the Azure SQL Tracking database. In addition to messages,
    the system tracks properties with which a message can be correlated with its acknowledgement.
    This would let users know if an X12 has received a technical or a functional acknowledgement
    and if an AS2 message has received its MDN NACK or ACK message. Tracking identifies
    the list of batches that are active with the list of messages currently held in
    the batch. It also identifies the history of batches that were dispatched on the
    send side.
  prefs: []
  type: TYPE_NORMAL
- en: 'Archiving is supported in the following cases for X12 and AS2 as illustrated
    in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: Just before sending a message
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Immediately after receiving a message![Tracking and archiving](img/7401EN_05_02.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Archiving is configured in the **General Settings** section in the agreement.
    The messages can be accessed from the BizTalk portal's tracking view option by
    clicking on the relevant message entry and choosing **Details**. From the message
    info pop-up view, you can select the entity to download and click on the **Download**
    option.
  prefs: []
  type: TYPE_NORMAL
- en: Non-repudiation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Non-repudiation of Receipt** (**NRR**) is supported in AS2 using both tracking
    and archiving. NRR is required in dispute settlement scenarios where, for example,
    a supplier may not process a PO or claim not to have received the order or the
    payment. NRR ensures that the AS2 message is stored and the incoming Message Integrity
    Check (MIC) value or hashcode is validated against the MIC of the stored AS2 message.
    This validates that the other partner has indeed received and processed the message.
    If the NRR option is turned on and if the tracking or archiving fails, then the
    message processing also fails (unlike in cases without NRR, where message processing
    can continue even if there are tracking errors). To enable NRR, check the **Enable
    NRR** option in the **General Settings** page of the AS2 agreement, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Non-repudiation](img/7401EN_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Extensibility
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Extensibility in B2B is possible by using the public API for **Trading Partner
    Management Object Model** (**TPM OM**). We will cover TPM OM as part of the overall
    extensibility in BizTalk Services using API.
  prefs: []
  type: TYPE_NORMAL
- en: Scenario walk-through
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let us revisit the scenario we began with in this chapter; we will add a service
    provider to illustrate the concepts. A service provider, as we know, is an expert
    in EDI and will act as a middleman to help suppliers connect to large retailers.
    In this example, Contoso, a large retailer, wishes to procure stock from supplier
    Northwind. Since Northwind is not aware of EDI, they approach a service provider,
    Fabrikam, to help them connect with the retailer Contoso.
  prefs: []
  type: TYPE_NORMAL
- en: Ecosystem players
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are three players in our example. Contoso is a large retailer, Northwind
    is the supplier connecting to Contoso, and finally, Fabrikam is the EDI service
    provider providing EDI services to Northwind.
  prefs: []
  type: TYPE_NORMAL
- en: Provisioning BizTalk Services
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Fabrikam creates a new BizTalk Services deployment. See [Chapter 1](ch01.html
    "Chapter 1. Hello BizTalk Services"), *Hello BizTalk Services*, on creating BizTalk
    Services deployment and registering the BizTalk Services portal.
  prefs: []
  type: TYPE_NORMAL
- en: Fabrikam adds Northwind's admin e-mail ID as a registered user in the BizTalk
    Services portal Settings page. This allows Northwind users to log in to the same
    view as that of Fabrikam.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring partners – Fabrikam, Northwind, and Contoso
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to configure the trading partners and the agreement in BizTalk Services.
    The following steps need to be carried out by Fabrikam to add partners:'
  prefs: []
  type: TYPE_NORMAL
- en: Once signed in, click on the **PARTNERS** page and then the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the **Partner name** as `Northwind`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter **First name**, **Last Name**, **Email ID**, and **Phone** details, if
    required.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat the above steps for `Contoso` and `Fabrikam` as partner names.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on each partner, navigate to the default profile, and upload the certificate
    for AS2 signing and encryption.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The creation of a new partner is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring partners – Fabrikam, Northwind, and Contoso](img/7401EN_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Configuring the AS2 agreement between Fabrikam and Contoso
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once the partners are created, we need to add agreements. The following steps
    need to be carried out to add the AS2 agreement between Fabrikam and Contoso:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on **AGREEMENTS** in the left navigation bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **AS2** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Add**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **New Agreement** (AS2) page, fill the agreement name as `Fabrikam-Contoso
    agreement` and add a description.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Hosted Partner** as `Fabrikam` and **Guest Partner** as `Contoso` .
    Here, **Hosted Partner** is the partner who owns the bridge in BizTalk Services.
    In this case, `Fabrikam` owns the BizTalk Services deployment, and hence is the
    host partner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter **AS2 Identity** of Fabrikam as `fabrikam` and for Contoso as `contoso`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable tracking and archiving; the latter is available for Premium SKUs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Continue**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The page is now renamed to `Fabrikam-Contoso agreement` and you are on the **Receive
    Settings** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Following are the steps to configure **Receive Settings**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **Inbound URL**, set **URL Suffix** to `endpoint1` and note down the complete
    URL. This is where `Fabrikam` would receive messages from `Contoso`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Under **Protocol**, open **Message** and choose **Messages should be signed**
    or **Messages should be encrypted** if applicable. Note that both these options
    require you to add a certificate in the profiles pages of Contoso and Fabrikam
    for this purpose. Also, set **Acknowledgement** and select **Send MDN** if required.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Click on **Send Settings**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Inbound URL** is where `Fabrikam` would send messages to reach `Contoso`.
    The `<Agreement ID>` in the URL would be filled in after the agreement is deployed.
    The inbound refers to the endpoint where messages need to be delivered from the
    `Fabrikam` system in order to be sent to `Contoso` over AS2.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Under **Protocol**, similar to **Send Settings**, configure signing and encryption
    options if required. Also, set **Acknowledgement** and select **Request MDN**
    (you can leave the other two checkboxes unchecked).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Under **Transport**, enter the URL of the `Contoso` endpoint. You can create
    a BizTalk Server or BizTalk Services setup which can mock the other end of the
    partner, or simply leave the URL to the default [http://www.microsoft.com](http://www.microsoft.com).
    Note that the prefix `http` is required.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on **Deploy**. You should see the following message in the portal:![Configuring
    the AS2 agreement between Fabrikam and Contoso](img/7401EN_05_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring the X12 agreement between Northwind and Contoso
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Similar to the AS2 agreement, we now need to configure the X12 agreement between
    Northwind and Contoso. The following steps need to be carried out:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on **AGREEMENTS** in the left navigation bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **EDI** this time; the (0) indicates there are no X12 or EDIFACT agreements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Add**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **New Agreement** option, choose the protocol as **X12** and fill the
    agreement name as `Northwind-Contoso agreement`, and also add a description. You
    can also create an EDIFACT agreement. The next set of steps configure the specific
    X12 settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Hosted Partner** as `Northwind` and **Guest Partner** as `Contoso`.
    Here, **Hosted Partner** is the partner who directly/indirectly owns the bridge
    in BizTalk Services.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Qualifier** as **ZZ - Mutually Defined (X12)** and enter the value
    for Northwind as `northwind` and for Contoso as `contoso`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable tracking and archiving on both sides; the latter is available for Premium
    SKUs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Continue**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The page is now renamed to `Fabrikam-Contoso agreement` and you are on **Receive
    Settings**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following are the steps to configure **Receive Settings**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **Transport**, choose **Transport type** as **AS2** and **AS2 Agreement**
    as `Fabrikam-Contoso agreement`. This means all messages from the X12 agreement
    will be received from the AS2 channel configured earlier. In future, `Fabrikam`
    can create multiple such X12 agreements and reuse the same AS2 agreement to connect
    with the retailer `Contoso`. This is possible as only the X12 configuration changes
    across suppliers while the `Fabrikam` connectivity to `Contoso` is mostly constant.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Under **Protocol**, select **TA1 expected** and **997 expected**. Assuming
    you have downloaded the B2B schemas from the BizTalk Services download page, click
    on **Upload** and add `X12_00401_810.xsd` and `X12_00401_850.xsd` one after the
    other. They will be listed post upload, as shown in the following screenshot:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Configuring the X12 agreement between Northwind and Contoso](img/7401EN_05_06.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Leave the **Transform** settings as they are for now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Under **Route**, click on **Add** to add the success route rule:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the rule name as `default`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on **Advanced Settings** and enter `1=1` in the expression window. This
    means we will route all successful messages to this endpoint.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Select **Transport type** as **Azure Service Bus**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Select **Route destination type** as **BasicHttpRelay**. Add the **BasicHttpRelay
    URL**, **issuer name**, and **issuer key**. This is the URL where the BasicHttpRelay
    service will be listening for successful messages routed from this agreement.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on **Save**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add the **Message Suspension Settings**. The suspend settings refer to the
    target URL if messages fail to successfully reach Northwind. We can configure
    Azure Service Bus with Queue, Topic, or Relay. Queues and Topics need to be pre
    created with Shared Access Signature or Issuer Name and Secret:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Transport type** as **Azure Service Bus**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Select **Route destination type** as **BasicHttpRelay**. Add the **BasicHttpRelay
    URL**, **issuer name**, and **issuer key**. This is the URL where the BasicHttpRelay
    service will be listening for failed messages from this agreement.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on **Save**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Click on **Send Settings**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **Inbound URL**, note the **Endpoint** value—the `<Agreement-ID>` in the
    URL will be updated after the agreement is deployed. We will return to this view
    later.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Leave the **Transform** settings on the send side as the are for now.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Under **Batching**, you can configure to send a batch of messages instead of
    a single message.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on **Add Batch**, enter `batch of 3 messages` as the name, and add a description.
    Click on **Next**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In **Batch criteria**, choose **Use advanced definitions** and enter `1=1` in
    the textbox. This implies all messages will be batches. Click on **Next**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In **Batch release criteria**, choose **MessageCountBased** and enter `3` as
    the value of **Count**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on **Next,** and finally, **Save**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You don't have to click on **Start Batch**; the batch will be started automatically
    once the agreement is deployed.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Under **Protocol**, select **TA1 expected** and **997 expected**. Also, click
    on the **+** symbol under the **Schemas** section and choose the existing **X12_00401_810.xsd**
    option from the **Schema** dropdown. This should already be listed if the same
    was uploaded in the previous **Receive Settings** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **Transport**, fill both the **Transport Settings** and **Message Suspension
    Settings**. Under **Transport**, choose **Transport type** as **AS2** and **AS2
    Agreement** as `Fabrikam-Contoso agreement`. This means all messages from the
    X12 agreement will be sent to the AS2 channel configured earlier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the **Message Suspension Settings**. The suspend settings refer to the
    target URL if messages fail to reach Contoso. We can configure Azure Service Bus
    with Queue, Topic, or Relay. Queues and Topics need to be precreated with Shared
    Access Signature or Issuer Name and Secret. In this case, we configure a service
    running with BasicHttpRelay binding:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Transport type** as **Azure Service Bus**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Select **Route destination type** as **BasicHttpRelay**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add the **BasicHttpRelay URL**, **issuer name**, and **issuer key**. This is
    the URL where the BasicHttpRelay service will be listening for messages which
    could not be sent to `Contoso`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Click on **Deploy**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A success message, `The agreement between Northwind and Contoso was successfully
    deployed` should be shown. If not, check for errors and click on **Deploy** again.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigate to the agreement's **Send Settings** page and note down the **Inbound
    URL** value. This will be used to send messages to the agreement.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending messages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Web Sender** is a tool available in MSDN Code Gallery for BizTalk Services''
    samples. It can be used to send messages to AS2 receive endpoints. Since in this
    example the AS2 is tied to X12 endpoints, all messages sent to AS2 receive should
    be routed to the success endpoint of X12 receive (the Azure Service Bus relay
    endpoint in this case). **Message Receiver** is a tool in MSDN Code Gallery to
    receive messages on relay endpoints; it needs to listen on the configured address
    in the X12 agreement route address.'
  prefs: []
  type: TYPE_NORMAL
- en: Use **Web Sender** from MSDN Code Gallery to test the AS2 message with sample
    850\. You can generate an instance of the Purchase Order EDI 850 using Visual
    Studio **Generate Instance** command from the BizTalk Services project.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can download the Message Receiver C# sample at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://code.msdn.microsoft.com/Windows-Azure-BizTalk-EAI-e01a5b64](http://code.msdn.microsoft.com/Windows-Azure-BizTalk-EAI-e01a5b64)'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can download the Web Sender C# sample at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://code.msdn.microsoft.com/Windows-Azure-BizTalk-a0d12dca](http://code.msdn.microsoft.com/Windows-Azure-BizTalk-a0d12dca)'
  prefs: []
  type: TYPE_NORMAL
- en: Viewing tracking data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Click on the **TRACKING** view in the navigation bar to see the status of message
    flow on the agreement.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we started with the basic concepts around B2B and its relevance
    in the context of Azure. We introduced key concepts of B2B on Azure, notably partners,
    agreements, templates, batching, tracking, and archiving. We also walked through
    a simple agreement configuration for AS2 and X12 in BizTalk Services. Trading
    partners can also be managed using API—this is covered in detail in the extensibility
    chapter later.
  prefs: []
  type: TYPE_NORMAL
