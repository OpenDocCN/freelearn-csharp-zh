["```cs\nMyComponent component = new MyComponent();\n```", "```cs\nvar uriBuilder = new UriBuilder(url);\n```", "```cs\npublic class Warehouse \n{ \n    public Dictionary<string, int> Products { get; } \n    …\n}\n```", "```cs\n[Fact]\npublic void Complete_SampleInventory_IsCompleted() \n{\n    // Arrange\n    var order = new Order(\"trouser\", 1); \n    var warehouse = new Warehouse(); \n    Mock.Arrange(() => warehouse.Products)\n.Returns(new Dictionary<string, int>() { \n{ \"shirt\", 12}, \n        { \"trouser\", 5}\n    }); \n\n    // Act\n    order.Complete(warehouse); \n\n    // Assert\n    Assert.True(order.IsCompleted); \n}\n```", "```cs\nvar obj = new Foo();\nobj.DoBar();\n```", "```cs\nclass Foo\n{\n    public void DoBar();\n}\n```", "```cs\ninterface IFoo\n{\n    void DoBar();\n}\nclass Foo : IFoo\n{\n    public void DoBar();\n}\n```", "```cs\ninterface IFooWrapper\n{\n    void DoBar();\n}\nclass FooWrapper : IFooWrapper\n{\n    private Foo _foo = new();\n    public void DoBar() => _foo.DoBar();\n}\n```", "```cs\nbuilder.Services.AddScoped<IFoo, Foo>();\n```", "```cs\nbuilder.Services.AddScoped<IFooWrapper, FooWrapper>();\n```", "```cs\npublic class MyService\n{\n    private readonly IFooWrapper _foo;\n    public MyService(IFooWrapper foo)\n    {\n        _foo = foo;\n    }\n    public void BarIt()\n    {\n        _foo.DoBar();\n    }\n}\n```", "```cs\npublic interface IDateTimeWrapper\n{\n    DateTime Now { get; }\n}\npublic class DateTimeWrapper : IDateTimeWrapper\n{\n    public DateTime Now => DateTime.Now;\n}\n```", "```cs\nInterface IFoo\n{\n    string PropWrapper { get; }\n}\nclass Foo : IFoo\n{\n    public static string Prop => …\n    public string PropWrapper => Foo.Prop;\n}\n```", "```cs\npublic class Consumer \n{\n    public void Bar()\n    {\n        …\n        var baz = Foo.Prop;\n        …\n    }\n}\n```", "```cs\npublic class Consumer \n{\n    private readonly IFoo _foo;\n    public Consumer(IFoo foo)\n    {\n        _foo = foo;\n    }\n    public void Bar()\n    {\n        …\n        var baz = _foo.PropWrapper;\n        …\n    }\n}\n```", "```cs\npublic void Post()\n{\n    // plenty of code lines\n}\n```", "```cs\npublic class WeatherForecastController : ControllerBase\n{\n    public async Task<IEnumerable<WeatherForecast>>\n    GetReal([FromQuery]decimal lat, [FromQuery]decimal lon)\n    {\n        var res = (await OneCallAsync(lat, lon)).ToArray();\n        …\n        for (int i = 0; i < wfs.Length; i++)\n        {\n            …\n            wf.Summary = MapFeelToTemp(wf.TemperatureC);\n        }\n        return wfs;\n    }\n    private static async\n        Task<IEnumerable<(DateTime,decimal)>> OneCallAsync(\n        decimal latitude, decimal longitude)\n    {\n        var uriBuilder = new UriBuilder(\n        \"https://api.openweathermap.org/data/2.5/onecall\");\n        …\n        var httpClient = new HttpClient();\n    }\n    private static string MapFeelToTemp(int temperatureC)\n    {\n        …\n    }\n}\n```", "```cs\npublic class WeatherForecastController : ControllerBase\n{\n    private readonly IWeatherAnalysisService \n        _weatherAnalysisService;\n    public WeatherForecastController(\n        IWeatherAnalysisService weatherAnalysisService)\n    {\n        _weatherAnalysisService = weatherAnalysisService;\n    }\n    [HttpGet]\n    public async Task<IEnumerable<WeatherForecast>> \n        GetReal(\n       [FromQuery]decimal? lat, [FromQuery]decimal? lon)\n    {\n        if (lat is null || lon is null)\n        {\n            return await _weatherAnalysisService\n               .GetForecastWeatherAnalysis();\n        }\n        return await _weatherAnalysisService\n         .GetForecastWeatherAnalysis(lat.Value, lon.Value);\n    }\n}\n```", "```cs\npublic class WeatherAnalysisService : \n    IWeatherAnalysisService\n{\n    …\n    private readonly IopenWeatherService\n        _openWeatherService;\n    public WeatherAnalysisService(\n        IOpenWeatherService openWeatherService)\n    {\n        _openWeatherService = openWeatherService;\n    }\n    public async Task<IEnumerable<WeatherForecast>> \n       GetForecastWeatherAnalysis(decimal lat, decimal lon)\n    {\n        OneCallResponse res = await \n            _openWeatherService.OneCallAsync(…)\n        …\n    }\n    private static string MapFeelToTemp(int temperatureC)\n    {\n        …\n    }\n}\n```", "```cs\npublic class OpenWeatherService : IOpenWeatherService\n{\n    …\n    public OpenWeatherService(string apiKey, \n        HttpClient httpClient)\n    {\n        _apiKey = apiKey;\n        _httpClient = httpClient;\n    }\n    public async Task<OneCallResponse> OneCallAsync(\n        decimal latitude, decimal longitude, \n        IEnumerable<Excludes> excludes, Units unit)\n    {\n        …\n    }\n}\n```"]