["```cs\nCache-Control:public,max-age=10\n```", "```cs\n        [HttpGet]\n```", "```cs\n        [ResponseCache(Duration = 500, VaryByHeader = \n```", "```cs\n          \"user-agent\", Location = \n```", "```cs\n          ResponseCacheLocation.Any, VaryByQueryKeys = \n```", "```cs\n          new[] { \"Id\" })]\n```", "```cs\n        public async Task<IActionResult> \n```", "```cs\n          Get([FromQuery]int Id = 0)\n```", "```cs\n            builder.Services.AddControllers(options =>\n```", "```cs\n            {\n```", "```cs\n                options.CacheProfiles.Add(\"Default\", \n```", "```cs\n                  new CacheProfile {\n```", "```cs\n                    Duration = 500,\n```", "```cs\n                    VaryByHeader = \"user-agent\",\n```", "```cs\n                    Location = ResponseCacheLocation.Any,\n```", "```cs\n                    VaryByQueryKeys = new[] { \"Id\" } });\n```", "```cs\n            });\n```", "```cs\n[ResponseCache(CacheProfileName = \"Default\")]\n```", "```cs\n    public class WeatherForecastController : ControllerBase\n```", "```cs\n    {\n```", "```cs\n        private IMemoryCache cache;\n```", "```cs\n        public WeatherForecastController(IMemoryCache \n```", "```cs\n          cache)\n```", "```cs\n        {\n```", "```cs\n            this.cache = cache;\n```", "```cs\n        }\n```", "```cs\n        [HttpGet]\n```", "```cs\n        public IActionResult Get()\n```", "```cs\n        {            \n```", "```cs\n            DateTime? cacheEntry;            \n```", "```cs\n            if (!cache.TryGetValue(\"Weather\", \n```", "```cs\n              out cacheEntry))\n```", "```cs\n            {\n```", "```cs\n                cacheEntry = DateTime.Now;\n```", "```cs\n                var cacheEntryOptions = new \n```", "```cs\n                  MemoryCacheEntryOptions()\n```", "```cs\n                    .SetSlidingExpiration(\n```", "```cs\n                     TimeSpan.FromSeconds(50))\n```", "```cs\n                    .SetAbsoluteExpiration(\n```", "```cs\n                     TimeSpan.FromSeconds(100))\n```", "```cs\n                    .SetPriority(\n```", "```cs\n                     CacheItemPriority.NeverRemove);\n```", "```cs\n                cache.Set(\"Weather\", cacheEntry, \n```", "```cs\n                  cacheEntryOptions);\n```", "```cs\n            }\n```", "```cs\n            cache.TryGetValue(\"Weather\", out cacheEntry);\n```", "```cs\n            var rng = new Random();\n```", "```cs\n            return Ok(from temp in Enumerable.Range(1, 5)\n```", "```cs\n                   select new\n```", "```cs\n                   {\n```", "```cs\n                       Date = cacheEntry,\n```", "```cs\n                       TemperatureC = rng.Next(-20, 55),\n```", "```cs\n                       Summary = \"Rainy day\"\n```", "```cs\n                   });\n```", "```cs\n        }\n```", "```cs\n    }\n```", "```cs\npublic delegate void PostEvictionDelegate(object key, object value, EvictionReason reason, object state);\n```", "```cs\nprivate void EvictionCallback(object key, object value, EvictionReason reason, object state)\n```", "```cs\n{\n```", "```cs\n      Debug.WriteLine(reason);        \n```", "```cs\n}\n```", "```cs\ncacheEntryOptions.RegisterPostEvictionCallback(EvictionCallback);\n```", "```cs\n    dotnet tool install ––global dotnet-sql-cache\n    ```", "```cs\n    dotnet sql-cache create \"Data Source=.;Initial Catalog=DistributedCache;Integrated Security=true;\" dbo cache\n    ```", "```cs\n    builder.Services.AddDistributedSqlServerCache(options =>\n    {\n        options.ConnectionString = \"Data Source=.;Initial \n          Catalog=DistributedCache;Integrated \n          Security=true;\";\n        options.SchemaName = \"dbo\";\n        options.TableName = \"Cache\";\n    });\n    ```", "```cs\n        public class WeatherForecastController : ControllerBase\n        {\n            private readonly IDistributedCache \n              distributedCache;\n            public WeatherForecastController(\n              IDistributedCache distributedCache)\n            {\n                this.distributedCache = distributedCache;\n            }\n        }\n    ```", "```cs\n    [HttpGet]\n    public IActionResult Get()\n            {\n                DateTime? cacheEntry;\n                if (distributedCache.Get(\"Weather\") == \n                  null)\n                {\n                    cacheEntry = DateTime.Now;\n                    var cacheEntryOptions = new \n                      DistributedCacheEntryOptions()\n                        .SetSlidingExpiration(TimeSpan\n                        .FromSeconds(50))\n                        .SetAbsoluteExpiration(TimeSpan\n                        .FromSeconds(100));\n                    distributedCache.SetString(\"Weather\", \n                      cacheEntry.ToString(), \n                      cacheEntryOptions);\n                }\n                var cachedDate = \n                  distributedCache.GetString(\"Weather\");\n                var rng = new Random();\n                return Ok(from temp in Enumerable.Range(1, \n                  5)\n                          select new\n                          {\n                              Date = cachedDate,\n                              TemperatureC = rng.Next(-20, \n                                55),\n                              Summary = \"Rainy day\"\n                          });\n            }\n    ```", "```cs\n                builder.Services.AddStackExchangeRedisCache(\n                    options =>\n                    {\n                        options.Configuration = \n                          \"<Connection string copied in \n                            step 1>\";\n                    });\n    ```", "```cs\n    if (this.Configuration.GetValue<bool>(\"AppSettings:UseRedis\"))\n    {\n        builder.Services.AddStackExchangeRedisCache(\n          options =>\n        {\n            options.Configuration = this.Configuration\n              .GetConnectionString(\"Redis\");\n        });\n    }\n    else\n    {\n        services.AddDistributedMemoryCache();\n    }\n    ```", "```cs\n      \"ConnectionStrings\": {\n        //removed other values for brevity\n        \"Redis\": \"\" //Azure Cache for Redis connection \n                    //string.\n      },\n      \"AppSettings\": {\n        //removed other values for brevity\n        \"UseRedis\": false //Flag to fallback to in memory \n        //distributed caching, usually false for local \n        //development.\n      },\n    ```", "```cs\n   public class Country\n```", "```cs\n    {\n```", "```cs\n      public int Id { get; set; }\n```", "```cs\n      public string Name { get; set; }\n```", "```cs\n    }\n```", "```cs\n        public async Task<Country> GetCountryAsync()\n```", "```cs\n        {\n```", "```cs\n            var country = await \n```", "```cs\n            this.cacheService.GetAsync<Country>(\"Country\"); // cacheservice is of Type IDistributedCacheService and is \n```", "```cs\n// injected using constructor injection.\n```", "```cs\n            if (country == null)\n```", "```cs\n            {\n```", "```cs\n                country = await \n```", "```cs\n                  this.countryRepository.GetCountryAsync(); // Retrieving data from database using Repository pattern.\n```", "```cs\n                if (country != null)\n```", "```cs\n                {\n```", "```cs\n                    await this.cacheService\n```", "```cs\n                     .AddOrUpdateAsync<Country>(\"Country\", \n```", "```cs\n                     country, TimeSpan.FromMinutes(5));\n```", "```cs\n                }\n```", "```cs\n            }\n```", "```cs\n            return country;\n```", "```cs\n        }\n```"]