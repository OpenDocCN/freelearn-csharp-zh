- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building a Weather App as a Progressive Web App (PWA)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As web developers, we develop amazing web apps of all kinds, but until recently
    there has been a divide between what a web app can do versus what a native app
    can do. A new class of apps called **Progressive Web Apps** (**PWAs**) is helping
    to bridge that divide by enabling us to add native-like capabilities, reliability,
    and installability to our web apps. A PWA is a web application that takes advantage
    of native app features while retaining all the features of a web app.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn what defines a PWA, as well as how to create
    a PWA by adding a **manifest file** and a **service worker** to an existing web
    application.
  prefs: []
  type: TYPE_NORMAL
- en: The project that we create in this chapter will be a local 5-day weather forecast
    application that can be installed and run as a native application on Windows,
    macOS, iPhones, Android phones, and so on and can be distributed through the various
    app stores. We will use JavaScript’s **Geolocation API** to obtain the location
    of the device and the **OpenWeather One Call API** to fetch the weather forecast
    for that location. We will convert the application into a PWA by adding a manifest
    file and a service worker. The service worker will use the **CacheStorage API**
    to cache information so that the PWA can work offline.
  prefs: []
  type: TYPE_NORMAL
- en: Native app, am I?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Web application, am I?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: PWA!
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding PWAs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with manifest files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with service workers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the `CacheStorage` API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the `Geolocation` API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the `OpenWeather One Call` API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a PWA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To complete this project, you need to have Visual Studio 2022 installed on your
    PC. For instructions on how to install the free Community Edition of Visual Studio
    2022, refer to *Chapter 1*, *Introduction to Blazor WebAssembly*.
  prefs: []
  type: TYPE_NORMAL
- en: We will be using an external weather API to access the weather forecast data
    for our project. The API that we will be using is the `OpenWeather One Call` API.
    This is a free API that is provided by `OpenWeather` ([https://openweathermap.org](https://openweathermap.org)).
    To get started with this API, you need to create an account and obtain an API
    key. If you do not want to create an account, you can use the `weather.json` file
    that we have provided in the GitHub repository for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The source code for this chapter is available in the following GitHub repository:
    [https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter06](https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter06).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Code in Action video is available here: [https://packt.link/Ch6](https://packt.link/Ch6).'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding PWAs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A PWA is a web application that uses modern web capabilities to deliver a native
    app-like experience to users. PWAs look and feel like native applications because
    they run in their own app window instead of the browser’s window, and they can
    be launched from the **Start** menu or taskbar. PWAs offer an offline experience
    and load instantly due to their use of caching. They can receive push notifications
    and are automatically updated in the background. Finally, although they do not
    require a listing in an app store for distribution, they can be distributed through
    the various app stores.
  prefs: []
  type: TYPE_NORMAL
- en: Many large companies, such as Pinterest, Starbucks, Trivago, and Twitter, have
    embraced PWAs. Companies are drawn to PWAs because they can develop them once
    and use them everywhere.
  prefs: []
  type: TYPE_NORMAL
- en: A PWA feels like a native application due to a combination of technologies.
    To convert a web app into a PWA, it must use HTTPS and include both a manifest
    file and a service worker.
  prefs: []
  type: TYPE_NORMAL
- en: HTTPS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To be converted into a PWA, the web app must use HTTPS and must be served over
    a secure network. This should not be a problem since most browsers will no longer
    serve pages over HTTP. Therefore, even if you are not planning to convert a Blazor
    WebAssembly app into a PWA, you should always be using HTTPS.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs: []
  type: TYPE_NORMAL
- en: A **Secure Sockets Layer** (**SSL**) certificate is required to enable HTTPS.
    A great source for free SSL certificates is **Let’s Encrypt** ([https://letsencrypt.org](https://letsencrypt.org)).
    It is a free, automated, and open **Certificate Authority** (**CA**).
  prefs: []
  type: TYPE_NORMAL
- en: Manifest files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A manifest file is a simple **JavaScript Object Notation** (**JSON**) document
    that contains an application’s name, defaults, and startup parameters for when
    a web application is launched. It describes how an application looks and feels.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is an example of a simple manifest file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A manifest file must include the name of the application and at least one icon.
    We will look more closely at manifest files in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Service workers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A service worker is a JavaScript file that defines the offline experience for
    the PWA. It intercepts and controls how a web browser handles its network requests
    and asset caching.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the content of the `service-worker.js` file that is included in the
    `Blazor WebAssembly PWA` project template provided by Microsoft:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: It is only one line of code and—as you can see—it does not actually do anything.
    However, it counts as a service worker and is all that is technically needed to
    convert an application into a PWA. We will take a closer look at more robust service
    workers later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: A PWA is a web app that can be installed on a device like a native application.
    If a web app uses HTTPS and includes both a manifest file and a service worker,
    it can be converted into a PWA. Let’s take a closer look at manifest files.
  prefs: []
  type: TYPE_NORMAL
- en: Working with manifest files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a more robust manifest file that includes more fields than the previous
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '**manifest.json**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: As mentioned earlier, a manifest file must include the name of the application
    and at least one icon. Beyond that, everything else is optional, although we highly
    recommend that you include at least the `description`, `short_name`, and `start_url`
    in your manifest files.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the keys used in the preceding `manifest.json` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dir`: The base direction of `name`, `short_name`, and `description`. It is
    either `ltr`, `rtl`, or `auto`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lang`: The primary language of `name`, `short_name`, and `description`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name`: The name of the app. The maximum length is 45 characters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`short_name`: The short name of the app. The maximum length is 12 characters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scope`: The navigation scope of the app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`display`: The way the app is displayed. The valid options are `fullscreen`,
    `standalone`, `minimal-UI`, or `browser`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`start_url`: The **Uniform Resource Locator** (**URL**) of the app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`background_color`: The color used for the app’s background during installation
    on the splash screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`theme_color`: The default theme color.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`description`: A short description of the app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`orientation`: The default screen orientation. Some of the options are `any`,
    `natural`, `landscape`, and `portrait`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`related_applications`: Any related apps that the developer wishes to highlight.
    These are usually native apps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`prefer_related_applications`: A value notifying the user agent that the related
    application is preferred over a web app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`icons`: One or more images used by the app. This is usually the largest section
    of the file because many devices prefer images of different sizes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`url`: The address of the app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`screenshots`: An array of images of the app in action.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`categories`: An array of strings representing the categories that the app
    belongs to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The preceding list does not include all the keys that can be included in a `manifest.json`
    file. Also, more keys are still being added every year.
  prefs: []
  type: TYPE_NORMAL
- en: A manifest file controls how the PWA appears to the user and is required to
    convert a web app into a PWA. A service worker is also required to convert a web
    app into a PWA. Let’s take a closer look at service workers.
  prefs: []
  type: TYPE_NORMAL
- en: Working with service workers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Service workers provide the magic behind PWAs. They are used for caching, background
    syncing, and push notifications. A service worker is a JavaScript file that intercepts
    and modifies navigation and resource requests. It gives us full control over which
    resources are cached and how our PWA behaves in different situations.
  prefs: []
  type: TYPE_NORMAL
- en: A service worker is simply a script that your browser runs in the background.
    It is separate from the app and has no **Document Object Model** (**DOM**) access.
    It runs on a different thread than the thread used by the main JavaScript that
    powers your app, so it is not blocking. It is designed to be fully asynchronous.
  prefs: []
  type: TYPE_NORMAL
- en: Service worker life cycle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When working with service workers, it is very important to understand their
    life cycle because offline support can add a significant amount of complexity
    to the web app. There are three steps in the life cycle of a service worker—**install,
    activate, and** **fetch**, as illustrated in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18471_06_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.1: Service worker life cycle'
  prefs: []
  type: TYPE_NORMAL
- en: Install
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: During the install step, the service worker usually caches some of the static
    assets of the website, such as a `You are offline` splash screen. If the files
    are cached successfully, the service worker is installed. However, if any of the
    files fail to download and cache, the service worker is not installed and does
    not move to the activate step.
  prefs: []
  type: TYPE_NORMAL
- en: If the service worker is not successfully installed, it will try to be installed
    the next time the web app is run. Therefore, the developer can be assured that
    if the service worker has been successfully installed, the cache contains all
    the static assets that were designated to be cached. After the install step is
    successfully completed, the activate step is initiated.
  prefs: []
  type: TYPE_NORMAL
- en: Activate
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: During the activate step, the service worker handles the management of the old
    caches. Since a previous installation may have created a cache, this is the app’s
    opportunity to delete it. After the activate step is successfully completed, the
    service worker is ready to begin processing the fetch events.
  prefs: []
  type: TYPE_NORMAL
- en: Fetch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: During the fetch step, the service worker controls all the pages that fall under
    its scope. It handles all the fetch events that occur when a network request is
    made from the PWA. The service worker will continue to fetch until it is terminated.
  prefs: []
  type: TYPE_NORMAL
- en: Updating a service worker
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To update the service worker that is running for our website, we need to update
    the service worker’s JavaScript file. Each time a user navigates to our site,
    the browser downloads the current service worker and compares it with the installed
    service worker. If they are different, it will attempt to replace the old service
    worker.
  prefs: []
  type: TYPE_NORMAL
- en: However, this does not happen immediately. The new service worker must wait
    until the old service worker is no longer in control before it can be activated.
    The old service worker will remain in control until all the open pages are closed.
    When the new service worker takes control, its activate event will fire.
  prefs: []
  type: TYPE_NORMAL
- en: Cache management is handled during the activate callback. The reason we manage
    the cache during the activate callback is that if we were to wipe out any old
    caches in the install step, the old service worker (which has control of all the
    current pages) would suddenly stop being able to serve files from that cache.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows a service worker that is **waiting to activate**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B18471_06_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.2: Service worker waiting to activate'
  prefs: []
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs: []
  type: TYPE_NORMAL
- en: The service worker will not be activated until the user has navigated away from
    the app in all tabs. Reloading the tab will not suffice, even if the app is only
    running in that one tab. However, you can activate a service worker that is **waiting
    to activate** by clicking the **skipWaiting** link. The **skipWaiting** link is
    highlighted in *Figure 6.2*.
  prefs: []
  type: TYPE_NORMAL
- en: Types of service workers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are many different types of service workers, from the ridiculously simple
    to the more complex. The following diagram shows some of the different types of
    service workers, ordered from simple to complex:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated with low
    confidence](img/B18471_06_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.3: Types of service workers from simple to complex'
  prefs: []
  type: TYPE_NORMAL
- en: Offline page
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is the simplest type of functioning service worker to create. All we need
    to create this type of service worker is an HTML page that indicates an application
    is offline. Whenever an application is unable to connect to a network, we simply
    display that HTML page.
  prefs: []
  type: TYPE_NORMAL
- en: Offline copy of pages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With this type of service worker, we store a copy of each page in the cache
    as our visitors view them. When the application is offline, it serves the pages
    from the cache. This approach may only work for applications with a limited number
    of pages because if a page that a user wants to view has not yet been viewed by
    that user, it will not yet be in the cache and the app will fail.
  prefs: []
  type: TYPE_NORMAL
- en: Offline copy with offline page
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This type of service worker is an improved version of the offline copy of pages
    service worker. It combines the two previous types of service workers. With this
    type of service worker, we store a copy of each page in the cache as our visitors
    view them. When an application is offline, it serves the pages from the cache.
    If a page that a user wants to view is not in the cache, we display the HTML page
    that indicates the application is offline.
  prefs: []
  type: TYPE_NORMAL
- en: Cache-first network
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This type of service worker always uses the cache first. If the requested page
    is in the cache, it serves that page before it requests the page from the server
    and updates the cache with the requested page. Using this service worker, we always
    serve the version of the page that is in the cache before requesting the page
    from the server, thus users are served the same data whether they are online or
    offline.
  prefs: []
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: The cache-first network service worker is the type of service worker that is
    preferred by Microsoft.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced caching
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This type of service worker is a combination of each of the preceding types.
    With this type of service worker, we designate different files and routes to be
    cached using different rules. For example, some data, such as stock prices, should
    never be cached, while other data that does not change very often should be cached.
  prefs: []
  type: TYPE_NORMAL
- en: Background sync
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is the most complex type of service worker. It allows a user to continue
    to use an application to add and edit data when they are offline. Then, when they
    are back online, the application will sync their data with the network.
  prefs: []
  type: TYPE_NORMAL
- en: This is not a complete list of all the different types of service workers that
    are available. However, it should give you an idea of the power and flexibility
    of service workers and the importance of caching. All the service workers on our
    list rely on the `CacheStorage` API for caching.
  prefs: []
  type: TYPE_NORMAL
- en: Using the CacheStorage API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `CacheStorage` API is used to cache `request/response` object pairs, where
    the `request` objects are the keys and the `response` objects are the values.
    It was designed to be used by service workers to provide offline functionality.
    A `caches` object is an instance of `CacheStorage`. It is a global object that
    is located in the `window` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use the following code to test if `CacheStorage` is available on the
    browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: A `caches` object is used to maintain a list of caches for a particular web
    app. Caches cannot be shared with other web apps and they are isolated from the
    browser’s HTTP cache. They are entirely managed through the JavaScript that we
    write.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are some of the methods of `CacheStorage`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`delete(cacheName`): This method deletes the indicated cache and returns `true`.
    If the indicated cache is not found, it returns `false`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`has(cacheName)`: This method returns `true` if the indicated cache exists
    and `false` otherwise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`keys`: This method returns a string array of the names of all the caches.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`open(cacheName)`: This method opens the indicated cache. If it does not exist,
    it is created and then opened.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When we open an instance of `CacheStorage`, a `Cache` object is returned. These
    are some of the methods of a `Cache` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '`add(request)`: This method takes a request and adds the resulting response
    to the cache.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`addAll(requests)`: This method takes an array of requests and adds all the
    resulting responses to the cache.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`delete(request)`: This method returns `true` if it can find and delete the
    indicated request, and `false` otherwise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`keys()`: This method returns an array of keys.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`match(request`): This method returns the response associated with the matching
    request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`put(request, response)`: This method adds the `request` and `response` pair
    to the cache.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs: []
  type: TYPE_NORMAL
- en: A `Cache` object does not get updated unless we explicitly request it to be
    updated. Also, these objects do not expire. We need to delete them as they become
    obsolete.
  prefs: []
  type: TYPE_NORMAL
- en: Service workers use the `CacheStorage` API to allow the PWA to continue to function
    when it is offline. Next, we will explain how to use the **Geolocation API**.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Geolocation API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Geolocation` API for JavaScript provides a mechanism for us to obtain the
    location of a user. Using the `Geolocation` API, we can obtain the coordinates
    of a device that the browser is running on.
  prefs: []
  type: TYPE_NORMAL
- en: The `Geolocation` API is accessed through a `navigator.geolocation` object.
    When we make a call to the `navigator.geolocation` object, the user’s browser
    asks the user for permission to access their location. If they accept, the browser
    uses the device’s positioning hardware, such as the **Global Positioning System**
    (**GPS**) on a smartphone, to determine its location.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we attempt to use the `navigator.geolocation` object, we should verify
    that it is supported by the browser. The following code tests for the presence
    of geolocation support on the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: For the project in this chapter, we will be using the `getCurrentPosition` method
    to retrieve the device’s location. This method uses two callback functions. The
    `success` callback function returns a `GeolocationPosition` object, while the
    `error` callback function returns a `GeolocationPositionError` object. If the
    user denies us access to their position, it will be reported in the `GeolocationPositionError`
    object.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the properties of the `GeolocationPosition` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '`coords.latitude`: This property returns a double that represents the latitude
    of the device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`coords.longitude`: This property returns a double that represents the longitude
    of the device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`coords.accuracy`: This property returns a double that represents the accuracy
    of the latitude and the longitude, expressed in meters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`coords.altitude`: This property returns a double that represents the altitude
    of the device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`coords.altitudeAccuracy`: This property returns a double that represents the
    accuracy of the altitude, expressed in meters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`coords.heading`: This property returns a double that represents the direction
    in which the device is heading, expressed in degrees. If the device is stationary,
    the value is NaN.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`coords.speed`: This property returns a double that represents the speed of
    the device, expressed in meters per second.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`timestamp`: This property returns the date and time of the response.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `GeolocationPosition` object always returns the `coords.latitude`, `coords.longitude`,
    `coords.accuracy`, and `timestamp` properties. The other properties are only returned
    if they are available.
  prefs: []
  type: TYPE_NORMAL
- en: By using JavaScript’s `Geolocation` API, we can determine the latitude and longitude
    of a device. We need this information to use the `OpenWeather` `One` `Call` API
    to request a local weather forecast for our project.
  prefs: []
  type: TYPE_NORMAL
- en: Using the OpenWeather One Call API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The data source for the project in this chapter is a free API provided by `OpenWeather`.
    It is called the `OpenWeather One Call` API ([https://openweathermap.org/api/one-call-api](https://openweathermap.org/api/one-call-api)).
    This API can return current, forecast, and historical weather data. We will be
    using it to access the local forecast for the next 5 days. This is the format
    of an API call using the `OpenWeather One Call` API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'These are the parameters for the `OpenWeather One Call` API:'
  prefs: []
  type: TYPE_NORMAL
- en: '`lat`: Latitude. This parameter is required.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lon`: Longitude. This parameter is required.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`appid`: API key. This parameter is required. After you create an account,
    you can manage your API keys from the `API keys` tab.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`units`: Units of measurement. This is set to `Standard`, `Metric`, or `Imperial`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`exclude`: Excluded data. This is used to simplify data that is returned. Since
    we will only be using the daily forecast, we will exclude current, per minute,
    and hourly data, and alerts for our project. This is a comma-delimited list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lang`: Language of the output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is a fragment of the response from the `OpenWeather One Call` API:'
  prefs: []
  type: TYPE_NORMAL
- en: '**weather.json fragment**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding JSON fragment, we have highlighted the fields that we are using
    in this chapter’s project.
  prefs: []
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: This project uses version 2.5 of the `OpenWeather One Call` API. They have recently
    released version 3.0 of the API. There is a small fee to use the new version of
    the API if you make over 1,000 API calls in a day.
  prefs: []
  type: TYPE_NORMAL
- en: The `OpenWeather One Call` API is a simple API that we will be using to obtain
    the daily forecast for a given location. Now, let’s get a quick overview of the
    project that we are going to build in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a PWA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will build a Blazor WebAssembly app to display a local 5-day
    weather forecast and then convert it into a PWA.
  prefs: []
  type: TYPE_NORMAL
- en: The web app we will build uses JavaScript’s `Geolocation` API to determine the
    current latitude and longitude of the device. It uses the `OpenWeather One Call`
    API to obtain the local weather forecast and uses a variety of Razor components
    to display the weather forecast to the user. After we have completed the web app,
    we will convert it into a PWA by adding a logo, a manifest file, and a service
    worker. Finally, we will install, run, and uninstall the PWA.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a screenshot of the completed application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B18471_06_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.4: 5-Day Weather Forecast application'
  prefs: []
  type: TYPE_NORMAL
- en: The build time for this project is approximately 90 minutes.
  prefs: []
  type: TYPE_NORMAL
- en: Project overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A `WeatherForecast` project will be created by using Microsoft’s **Blazor WebAssembly
    App Empty** project template to create an empty Blazor WebAssembly project. First,
    we will use JavaScript interop with the `Geolocation` API to obtain the coordinates
    of the device. We will then use the `OpenWeather One Call` API to obtain a weather
    forecast for those coordinates. Next, we will create a couple of Razor components
    to display the forecast.
  prefs: []
  type: TYPE_NORMAL
- en: To convert the web app into a PWA, we will add a logo, a manifest file, and
    an offline page service worker. After testing the service worker, we will install,
    run, and uninstall the PWA.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with the project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to create a new Blazor WebAssembly app. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Visual Studio 2022.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create a new project** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Alt*+*S* to enter the **Search for templates** textbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `Blazor` and press the *Enter* key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The following screenshot shows the **Blazor WebAssembly App Empty** project
    template.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, chat or text message  Description
    automatically generated](img/B18471_06_05.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 6.5: Blazor WebAssembly App Empty project template'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select the **Blazor WebAssembly App Empty** project template and click the **Next**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `WeatherForecast` in the **Project name** textbox and click the **Next**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is a screenshot of the dialog used to configure our new project:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_06_06.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 6.6: Configure your new project dialog'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the preceding example, we placed the `WeatherForecast` project into the `E:/Blazor`
    folder. However, the location of this project is not important.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select **.NET 7.0** as the version of the **Framework** to use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Configure for HTTPS** checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncheck the **ASP.NET Core Hosted** checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncheck the **Progressive Web Application** checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is a screenshot of the dialog used to collect additional information about
    our new project:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_06_07.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 6.7: Additional information dialog'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The reason that we are not checking the **Progressive Web Application** checkbox
    is that we will be transforming the application into a PWA as part of this project.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have created an empty `WeatherForecast` Blazor WebAssembly project. Let’s
    get started by adding the JavaScript function for determining the location of
    the device.
  prefs: []
  type: TYPE_NORMAL
- en: Add JavaScript to determine our location
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to add the JavaScript function to determine our current latitude and
    longitude. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `wwwroot` folder and select the **Add**, **New Folder** option
    from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new folder `scripts`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the `scripts` folder and select the **Add**, **New Item** option
    from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `javascript` in the **Search** box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **JavaScript File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the file `bweInterop.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In this book, we will be using the `bweInterop` namespace for our JavaScript
    code to both structure our code and minimize the risk of naming conflicts.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following JavaScript:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding JavaScript code uses the `Geolocation` API to return the latitude
    and longitude of the device. If it is not allowed or it is not supported, an error
    is thrown.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open the `wwwroot/index.html` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following markup at the bottom of the `body` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have created a JavaScript function that uses the `Geolocation` API to return
    our current latitude and longitude. Next, we need to invoke it from our web app.
  prefs: []
  type: TYPE_NORMAL
- en: Invoke the JavaScript function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to add a class to store our location and then we can invoke our `bweInterop.getPosition`
    function. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `WeatherForecast` project and select the **Add**, **New Folder**
    option from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new folder `Models`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the `Models` folder and select the **Add**, **Class** option from
    the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new class `Position`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following properties to the `Position` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is the class that we will use to store our coordinates.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open the `Pages/Index.razor` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the `H1` element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following directives:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding markup displays the value of the `message` field if the `pos`
    property is `null`. Otherwise, it displays the latitude and longitude from the
    `pos` property.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following `OnInitializedAsync` method to the code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code attempts to get our coordinates when the page initializes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following `GetPositionAsync` method to the code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code uses JavaScript interop to invoke the JavaScript function
    that we wrote that uses the `Geolocation` API to return our coordinates. For more
    information on JavaScript interop, refer to *Chapter 5*, *Building a Local Storage
    Service Using JavaScript Interoperability (JS Interop)*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Press *Ctrl*+*F5* to start the application without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot is an example of the dialog that will ask you for
    permission to access your location:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Table  Description automatically generated with low confidence](img/B18471_06_08.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 6.8: Geolocation permission dialog'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Allow** button to allow the app to have access to your location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot is of the **Home** page of our Weather Forecast app:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18471_06_09.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 6.9: Home page displaying our coordinates'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can disable the app’s ability to access your location by using the **Location
    access allowed** dialog that is shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B18471_06_10.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 6.10: Location access allowed dialog'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The **Location access allowed** dialog is accessed via the highlighted button
    on the browser’s toolbar. You may want to toggle the permissions to see how that
    impacts the app.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Close the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have used the `Geolocation` API to display our latitude and longitude on
    the **Home** page. Next, we need to provide those coordinates to the `OpenWeather
    One Call` API.
  prefs: []
  type: TYPE_NORMAL
- en: Add an OpenWeather class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to add an `OpenWeather` class to capture the results from the `OpenWeather
    One Call` API. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Return to Visual Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the `Models` folder and select the **Add**, **Class** option from
    the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new class `OpenWeather`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following classes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding classes will be used to store the responses from the `OpenWeather
    One Call` API.
  prefs: []
  type: TYPE_NORMAL
- en: Now we need to add a component to display the responses. We will use `Bootstrap`
    to style our new component.
  prefs: []
  type: TYPE_NORMAL
- en: Install Bootstrap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to install `Bootstrap` in our web app. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `wwwroot/css` folder and select the **Add**, **Client-Side Library**
    option from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `bootstrap` into the **Library** search textbox and press the *Enter*
    key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Choose specific files**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select only the `css` files, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_06_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.11: Add Client-Side Library dialog'
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Install** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After you install `Bootstrap`, a new folder will be added to the `wwwroot/css`
    folder. This new folder contains all the CSS files needed for `Bootstrap`. We
    will only be using the `bootstrap.min.css` file in this project.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that `Bootstrap` is installed, let’s verify that it is working.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open the `wwwroot/index.html` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the following markup to the `head` element before the link to the `css/app.css`
    stylesheet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `Pages/Index.razor` page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the following markup below the `PageTitle` component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Press *Ctrl*+*F5* to start the application without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that the top of the page is now blue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that `Bootstrap` is properly installed, we can add the new component.
  prefs: []
  type: TYPE_NORMAL
- en: Add a DailyForecast component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need the new component to display each day’s forecast. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `WeatherForecast` project and select the **Add**, **New Folder**
    option from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new folder `Shared`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the `Shared` folder and select the **Add**, **Razor Component**
    option from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new component `DailyForecast`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the existing markup with the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This component uses the `Card` component from `Bootstrap` to display the daily
    forecast.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following code to the code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code defines the parameters that are used to display the daily
    weather forecast. The `OnInitialized` method is used to format the `Date` and
    `IconUrl` fields.
  prefs: []
  type: TYPE_NORMAL
- en: We have added a Razor component to display each day’s weather forecast using
    the `Card` component from `Bootstrap`.
  prefs: []
  type: TYPE_NORMAL
- en: Fetch the forecast
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to fetch the weather forecast. We can fetch the forecast by either
    calling the `OpenWeather One Call` API or using the `weather.json` file that is
    in GitHub. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Pages/Index.razor` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following `using` statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following directive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following field to the top of the code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `GetForecastAsync` method to the code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code to the `GetForecastAsync` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**IMPORTANT NOTE**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You need to replace `{Your_API_Key}` with the API key that you obtained from
    `OpenWeather`. Also, it may take a couple of hours for your API key to become
    active.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The preceding method uses the `OpenWeather One Call` API with the coordinates
    obtained by the `GetPositionAsync` method to populate the `forecast` object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you cannot use the `OpenWeather One Call` API, use the following version
    of the `GetForecastAsync` method:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding version of the `GetForecastAsync` method uses a static file to
    populate the `forecast` object. It assumes that the `weather.json` file has been
    downloaded from the GitHub repository for this chapter and that it has been placed
    into the `wwwroot/sample-data` folder.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the `OnInitializedAsync` method to call the `GetForecastAsync` method
    and update the error message, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now that we have populated the forecast object, we can display the forecast.
  prefs: []
  type: TYPE_NORMAL
- en: Display the forecast
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to add a collection of daily forecasts to the **Home** page. We do
    this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Remove the `div` element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the `@if` statement with the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding markup loops through the `forecast` object five times. It uses
    the `DailyForecast` component to display the daily forecast.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Press *Ctrl*+*F5* to start the application without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have completed our Weather Forecastapplication. Now, we need to convert it
    into a PWA. To do that, we need to add a logo, a manifest file, and a service
    worker.
  prefs: []
  type: TYPE_NORMAL
- en: Add the logo
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to add an image to be used as a logo for the app. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `wwwroot` folder and select the **Add**, **New Folder** option
    from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new folder `images`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the `Sun-512.png` image from the GitHub repository for this chapter to
    the `images` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At least one image must be included in the manifest file for the PWA to be installed.
    Now, we can add a manifest file.
  prefs: []
  type: TYPE_NORMAL
- en: Add a manifest file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To convert the web app into a PWA, we need to add a manifest file. We do this
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `wwwroot` folder and select the **Add**, **New Item** option
    from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `json` in the **Search** box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **JSON File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the file `manifest.json`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following JSON code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `wwwroot/index.html` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following markup to the bottom of the `head` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following markup below the preceding markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**TIP**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: With iOS Safari, you must include the preceding link tag to instruct it to use
    the indicated icon or it will generate an icon by taking a screenshot of the page’s
    content.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We have added a manifest file to our web app to control how it looks and behaves
    when it is installed. Next, we need to add a service worker.
  prefs: []
  type: TYPE_NORMAL
- en: Add a simple service worker
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To finish converting the web app into a PWA, we need to add a service worker.
    We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `wwwroot` folder and select the **Add**, **New Item** option
    from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `html` in the **Search** box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **HTML Page**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the file `offline.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following markup to the `body` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Right-click the `wwwroot` folder and select the **Add**, **New Item** option
    from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `javascript` in the **Search** box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select `JavaScript File`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the file `service-worker.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following constants:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code sets the name of the current cache and the name of the file
    we will be using to indicate that we are offline.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following event listeners:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding code designates the functions to be used for each of the following
    steps: install, activate, and fetch.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following `onInstall` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding function opens the indicated cache. If the cache does not yet
    exist, it creates the cache and then opens it. After the cache is open, it adds
    the indicated request/response pair to the cache.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following `onActivate` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code fetches the names of all the caches. All the caches that
    do not match the name of the indicated cache are deleted.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It is your responsibility to purge obsolete caches. Each browser has a limit
    as to the amount of storage that a web app can use. If you violate that limit,
    all of your caches may be deleted by the browser.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following `onFetch` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code, if the fetch fails, the cache is opened, and the previously
    cached offline page is served.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open the `wwwroot/index.html` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following markup to the bottom of the `body` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code registers the service worker.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We have added an offline page service worker that will display the `offline.html`
    page when the PWA is offline.
  prefs: []
  type: TYPE_NORMAL
- en: Test the service worker
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to test that the service worker is allowing us to work offline. We
    do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Press *Ctrl*+*F5* to start the application without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click *F12* to open the `Developer Tools` interface.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Application** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Manifest** option from the menu on the left to view the **App Manifest**
    details.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, chat or text message  Description
    automatically generated](img/B18471_06_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.12: App Manifest details'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Service Workers** option from the menu on the left to view the
    service worker that is installed for the current client, as illustrated in the
    following screenshot:![Graphical user interface, application  Description automatically
    generated](img/B18471_06_13.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 6.13: Service Workers dialog'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the preceding screenshot, we have highlighted both the **Offline** checkbox
    and the **See all registrations** link.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **See all registrations** link to see all the service workers that
    are installed on your device. You will probably be surprised to see how many service
    workers are installed on your computer.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select the **Cache Storage** option from the menu on the left to view the caches.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **offline1** cache to view its contents, as illustrated in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B18471_06_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.14: Cache Storage'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Service Workers** option from the menu on the left.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Offline** checkbox on the **Service Workers** dialog.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The **Offline** checkbox is highlighted in Figure 16.13.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Refresh the browser, and you should see the following screen:![Graphical user
    interface, text, application, chat or text message  Description automatically
    generated](img/B18471_06_15.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 6.15: Offline page'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The page that is displayed is from the browser’s cache.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Uncheck the **Offline** checkbox on the **Service Workers** dialog.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Refresh the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since the web app is now back online, the **Offline** page is no longer displayed.
  prefs: []
  type: TYPE_NORMAL
- en: We have tested that the service worker enables our web app to work offline.
    Now, we can install the PWA.
  prefs: []
  type: TYPE_NORMAL
- en: Install the PWA
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to test the PWA by installing it. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the **App available. Install 5-Day Weather Forecast** menu option from
    the browser’s menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Graphical user interface  Description automatically generated](img/B18471_06_16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.16: Install 5-Day Weather Forecast option'
  prefs: []
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs: []
  type: TYPE_NORMAL
- en: On Chromium-based browsers, the **Install** button is on the URL bar. However,
    for other types of browsers, you will need to install the PWA from either the
    **Menu** button or the **Share** button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Install** button in the **Install PWA** dialog:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Text  Description automatically generated](img/B18471_06_17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.17: Install PWA dialog'
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Allow** button in the **App installed** dialog.![Graphical user
    interface, text, application  Description automatically generated](img/B18471_06_18.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 6.18: App installed dialog'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Once installed, the PWA appears without an address bar. It appears on our taskbar,
    and we can run it from our **Start** menu. The following screenshot shows the
    PWA after it has been installed:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B18471_06_19.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 6.19: Installed PWA'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Close the app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the *Windows* key and search for the **5-Day Weather Forecast** app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the **5-Day Weather Forecast** app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the application opens, its icon appears on the taskbar. We can pin it to
    the taskbar if we want.
  prefs: []
  type: TYPE_NORMAL
- en: We have successfully installed and run the PWA. It is just as easy to uninstall
    a PWA as it is to install one.
  prefs: []
  type: TYPE_NORMAL
- en: Uninstall the PWA
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to uninstall the PWA. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Close the **5-Day Weather Forecast** app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the *Windows* key and search for the **5-Day Weather Forecast** app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the **5-Day Weather Forecast** app and select the **Uninstall**
    option from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, chat or text message  Description
    automatically generated](img/B18471_06_20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.20: Uninstall the 5-Day Weather Forecast app'
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Uninstall** button.![Graphical user interface, text, application,
    chat or text message  Description automatically generated](img/B18471_06_21.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 6.21: Uninstall the 5-Day Weather Forecast app'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We have uninstalled the PWA.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: It may take a few seconds for the app to be removed from the taskbar.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should now be able to convert a Blazor WebAssembly app into a PWA by adding
    a manifest file and a service worker.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we introduced PWAs. We explained how to convert a web app into
    a PWA by adding a manifest file and a service worker. We explained how to work
    with manifest files and service workers. We went into some detail explaining the
    different types of service workers and explained how to use the `CacheStorage`
    API to cache request/response pairs. Finally, we demonstrated how to use both
    the `Geolocation` API and the `OpenWeather One Call` API.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we used the `Blazor WebAssembly App Empty` project template to create
    a new project. We added a JavaScript function that uses the `Geolocation` API
    to obtain our coordinates. We added some models to capture the coordinates and
    used JavaScript interop to invoke the JavaScript function. We used the `OpenWeather
    One Call API` to obtain the local 5-day weather forecast. We installed `Bootstrap`
    and created a Razor component to display each day’s forecast.
  prefs: []
  type: TYPE_NORMAL
- en: In the last part of the chapter, we converted the Blazor WebAssembly app into
    a PWA by adding an image, a manifest file, and an offline page service worker.
    Finally, we installed, ran, and uninstalled the PWA. We can apply our new skills
    to convert our existing web apps into PWAs that combine the benefits of a web
    app with the look and feel of a native app.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will use **dependency injection** (**DI)** to build
    a shopping cart application.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following questions are provided for your consideration:'
  prefs: []
  type: TYPE_NORMAL
- en: Are service workers asynchronous or synchronous?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can `localStorage` be used inside a service worker for data storage?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can service workers manipulate the DOM?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Are PWAs secure?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Are PWAs platform-specific?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the differences between a PWA and a native app?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following resources provide more information concerning the topics in this
    chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: For more information on the `Geolocation` API specification, refer to [https://w3c.github.io/geolocation-api](https://w3c.github.io/geolocation-api).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information on using the `Geolocation` API, refer to [https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information on the `Weather` API, refer to [https://openweathermap.org/api](https://openweathermap.org/api).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information on the `Web Application Manifest` specification, refer
    to [https://www.w3.org/TR/appmanifest](https://www.w3.org/TR/appmanifest).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information on the `Service Worker` specification, refer to [https://w3c.github.io/ServiceWorker](https://w3c.github.io/ServiceWorker).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information on using the `CacheStorage` API, refer to [https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage](https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more examples of service workers, refer to the Workbox website at [https://developers.google.com/web/tools/workbox](https://developers.google.com/web/tools/workbox).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information on Microsoft’s `PWABuilder`, refer to [https://www.pwabuilder.com](https://www.pwabuilder.com).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For a PWA image generator, refer to [https://www.pwabuilder.com/imageGenerator](https://www.pwabuilder.com/imageGenerator).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information on `Bootstrap`, refer to [https://getbootstrap.com/](https://getbootstrap.com/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
