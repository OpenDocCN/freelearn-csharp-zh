- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Release Often, Release Early
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 经常发布，尽早发布
- en: The ability to adapt and respond to market demands quickly and efficiently is
    crucial for a SaaS application to be successful. With **software-as-a-service**
    (**SaaS**) applications, customer satisfaction and user experience are key drivers
    for growth and retention, and one of the most effective ways to meet these demands
    is by adopting **continuous integration** (**CI**) and **continuous deployment**
    (**CD**) practices, collectively known as CI/CD.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 快速有效地适应和响应市场需求对于SaaS应用的成功至关重要。在**软件即服务**（**SaaS**）应用中，客户满意度和用户体验是增长和保留的关键驱动因素，而满足这些需求的最有效方式之一是采用**持续集成**（**CI**）和**持续部署**（**CD**）实践，统称为CI/CD。
- en: CI/CD is a set of development practices that emphasizes the importance of integrating
    code frequently, testing it continuously, and deploying updates to the application
    with minimal delays. By automating these processes, CI/CD helps development teams
    reduce the time it takes to deliver new features, improvements, and bug fixes
    to users while also improving the overall quality and reliability of the software.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: CI/CD是一套开发实践，强调频繁集成代码、持续测试以及以最小延迟部署应用更新的重要性。通过自动化这些流程，CI/CD帮助开发团队减少将新功能、改进和错误修复交付给用户所需的时间，同时提高软件的整体质量和可靠性。
- en: This chapter will provide a high-level understanding of CI/CD concepts and their
    significance in the context of SaaS applications. The focus will be on the principles
    and practices that can be applied to various CI/CD tools rather than diving into
    detailed instructions for specific tools such as Azure Pipelines or GitHub Actions.
    By keeping the discussion more general, the goal is to enable readers to gain
    the knowledge and insights necessary to implement CI/CD processes using their
    preferred tools and adapt them to their unique project requirements.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将提供对CI/CD概念及其在SaaS应用背景下的重要性的高层次理解。重点将放在可以应用于各种CI/CD工具的原则和实践上，而不是深入到特定工具（如Azure
    Pipelines或GitHub Actions）的详细说明。通过使讨论更加通用，目标是使读者能够获得使用他们首选工具实施CI/CD流程并适应其独特项目需求所需的知识和见解。
- en: Throughout the chapter, we will cover the key components of a CI/CD pipeline,
    including source control integration, build and release triggers, containerization,
    and deployment strategies. We will also discuss best practices and tips for implementing
    CI/CD effectively in SaaS applications, ensuring security and compliance, scaling
    pipelines, and monitoring and optimizing CI/CD processes.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍CI/CD管道的关键组件，包括源代码控制集成、构建和发布触发器、容器化和部署策略。我们还将讨论在SaaS应用中有效实施CI/CD的最佳实践和技巧，确保安全性和合规性，扩展管道，以及监控和优化CI/CD流程。
- en: 'The following are the main topics covered in this chapter:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主要内容：
- en: Understanding CI/CD
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解CI/CD
- en: Configuring CI/CD pipelines
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置CI/CD管道
- en: CI/CD pipelines and tools overview
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CI/CD管道和工具概述
- en: SaaS-specific considerations
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SaaS特定考虑因素
- en: By the end of this chapter, you should have a solid understanding of the importance
    of CI/CD in SaaS applications and be well-equipped to implement these practices
    in your projects, irrespective of the specific CI/CD tools you choose. This knowledge
    will help you create more efficient, reliable, and adaptable SaaS applications
    that meet the ever-changing needs of your customers.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，你应该对SaaS应用中CI/CD的重要性有一个牢固的理解，并准备好在你的项目中实施这些实践，无论你选择的具体CI/CD工具是什么。这些知识将帮助你创建更高效、可靠和适应性强，以满足客户不断变化需求的SaaS应用。
- en: Understanding CI/CD
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解CI/CD
- en: CI and CD are development practices that aim to streamline the software development
    life cycle by automating various stages of the process. CI focuses on automating
    the integration of code changes, ensuring that developers merge their work frequently
    and that the resulting codebase is tested continuously. CD, on the other hand,
    automates the process of deploying the integrated and tested code into production,
    making new features and bug fixes available to users as quickly as possible.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: CI和CD是旨在通过自动化流程的各个阶段来简化软件开发生命周期的开发实践。CI专注于自动化代码更改的集成，确保开发者频繁合并他们的工作，并且生成的代码库持续受到测试。另一方面，CD自动化将集成和测试的代码部署到生产环境的过程，使新功能和错误修复尽可能快地提供给用户。
- en: In this section, we’ll take a deeper look into both types of pipelines and understand
    how they work together to make everyone’s life easier when developing a SaaS application.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将更深入地探讨这两种流水线类型，并了解它们如何协同工作，使开发SaaS应用程序时每个人的生活变得更轻松。
- en: CI
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CI
- en: A CI pipeline is typically triggered when a developer submits code that has
    been worked on locally to a centralized repository. The purpose of the CI pipeline
    is to ensure that the incoming changes are compatible with the existing work and
    that there have been no regressions or new bugs introduced. It is typical (although
    not mandated) that the incoming code will not be merged into the existing code
    until the CI pipeline has successfully completed all of the tasks in the pipeline,
    which indicates that the new code is safe to merge.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: CI流水线通常在开发者将本地修改过的代码提交到集中式仓库时被触发。CI流水线的目的是确保传入的更改与现有工作兼容，并且没有引入回归或新的错误。通常（尽管不是强制性的），传入的代码在CI流水线成功完成所有任务之前，不会合并到现有代码中，这表明新代码是安全的。
- en: 'The CI pipeline will typically run automatically when the new code is submitted
    and will carry out the following tasks:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当新代码提交时，CI流水线通常会自动运行，并执行以下任务：
- en: '**Download the code**: The first thing that a CI pipeline must do is to locate
    and download the code. The code will typically be hosted in a Git repository somewhere
    in the cloud. It is common for the repo and the pipeline to sit in the same system
    (such as with Azure DevOps), but this does not have to be the case. For example,
    using GitHub to host the repo and CircleCI to run the pipelines. Before a pipeline
    can do anything at all, it must first get the source code!'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**下载代码**：CI流水线必须做的第一件事是定位和下载代码。代码通常托管在云中的某个Git仓库中。仓库和流水线位于同一系统（如Azure DevOps）中是常见的，但这不是必须的。例如，使用GitHub托管仓库，使用CircleCI运行流水线。在流水线能够进行任何操作之前，它必须首先获取源代码！'
- en: '**Build the code**: The next thing that a CI pipeline will typically do is
    run a build to make sure that the newly submitted code actually compiles. This
    step will be performed on a **virtual machine** (**VM**) or in a container that
    has been configured with the tools required to build the project. This VM or container
    will also have to manage the dependencies, so it may require internet access so
    that it can download any required packages.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建代码**：CI流水线通常会执行构建步骤，以确保新提交的代码确实可以编译。这一步骤将在配置了构建项目所需工具的**虚拟机**（**VM**）或容器中执行。这个VM或容器还需要管理依赖项，因此可能需要互联网访问，以便下载所需的任何包。'
- en: '**Run the tests**: Assuming that the newly submitted code builds, a CI pipeline
    can then move on to running the tests. As we discussed in [*Chapter 9*](B19343_09.xhtml#_idTextAnchor219),
    there are broadly three categories of tests: unit tests, integration tests, and
    **end-to-end** (**E2E**) tests. All of these can be run by the CI pipeline, although
    in some circumstances, integration and E2E tests may be skipped. Typically, at
    least the unit tests are always executed by the CI pipeline.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行测试**：假设新提交的代码可以构建，CI流水线接下来会运行测试。正如我们在[*第9章*](B19343_09.xhtml#_idTextAnchor219)中讨论的，测试大致分为三类：单元测试、集成测试和**端到端**（**E2E**）测试。所有这些测试都可以由CI流水线运行，尽管在某些情况下，可能会跳过集成和E2E测试。通常，至少单元测试总是由CI流水线执行。'
- en: '**Test coverage reports**: If test coverage has been configured for the project,
    this will also be run by the CI pipeline. This can help ensure that developers
    are being diligent in their unit testing by ensuring that the code coverage for
    the application remains above a certain percentage.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试覆盖率报告**：如果项目配置了测试覆盖率，这也会由CI流水线运行。这可以帮助确保开发者在进行单元测试时非常勤奋，确保应用程序的代码覆盖率保持在一定百分比以上。'
- en: '**Static analysis and linting**: If there are code standards defined by either
    static analysis or linting tools, these will also typically be run by the CI pipeline.
    This ensures that the code is written in a consistent way, regardless of who in
    the team has written the code.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**静态分析和代码检查**：如果静态分析或代码检查工具定义了代码标准，这些标准通常也会由CI流水线运行。这确保了代码以一致的方式编写，无论团队中的谁编写了代码。'
- en: '**Security testing**: If there are automated security tests, the CI pipeline
    will also run them.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全测试**：如果有自动化的安全测试，CI流水线也会运行它们。'
- en: '**Automatic versioning**: The CI pipeline is responsible for creating the artifacts
    that are subsequently released. This ensures that the versioning policy is always
    upheld and that every release is uniquely identifiable.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动版本控制**：CI 管道负责创建随后发布的工件。这确保了版本控制策略始终得到遵守，并且每个发布都是唯一可识别的。'
- en: '**Artifact creation and storage**: Finally, assuming that all of the previous
    tasks have passed, the CI pipeline will package the built application and all
    of its dependencies into deployable artifacts. Typically these deployable artifacts
    will be used by a CD pipeline to deploy the application. The artifacts are the
    output from the CI pipeline and the input to the CD pipeline.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工件创建和存储**：最后，假设所有前面的任务都已通过，CI 管道将打包构建的应用程序及其所有依赖项到可部署的工件中。通常，这些可部署的工件将由 CD
    管道用于部署应用程序。这些工件是 CI 管道的输出，也是 CD 管道的输入。'
- en: This is not an exhaustive list – there is any number of jobs that you may want
    to run, and ensure they pass before allowing new code to be merged into the repo.
    You can see that the CI pipeline can be quite busy!
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是一份详尽的列表——你可能想要运行的工作有无数种，确保它们通过后再允许新代码合并到仓库中。你可以看到 CI 管道可能相当繁忙！
- en: CD
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CD
- en: 'A CD pipeline is initiated once the CI pipeline has successfully completed
    its tasks and produced deployable artifacts. The purpose of the CD pipeline is
    to ensure that the application is deployed and released in a consistent, efficient,
    and automated manner, reducing the risk of human errors and minimizing the time
    it takes to get new features and bug fixes into the hands of users. CD pipelines
    typically involve several stages, such as deploying to various environments (e.g.,
    staging, production), running post-deployment tests, and monitoring the application,
    as shown in the following list:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当 CI 管道成功完成其任务并生成可部署的工件后，CD 管道就会被启动。CD 管道的目的是确保应用程序以一致、高效和自动化的方式部署和发布，降低人为错误的风险，并最大限度地减少将新功能和错误修复带给用户所需的时间。CD
    管道通常涉及几个阶段，例如部署到各种环境（例如，预发布、生产）、运行部署后测试和监控应用程序，如下列所示：
- en: '**Deploy to environments**: The CD pipeline will usually deploy the application
    to different environments sequentially. It often starts with deploying to a test
    environment, which is a replica of the production environment. This allows the
    team to validate the application’s behavior, performance, and compatibility with
    other services or components in a production-like environment.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署到环境**：CD 管道通常会按顺序将应用程序部署到不同的环境。它通常从部署到测试环境开始，这是一个生产环境的副本。这允许团队在一个类似生产的环境中验证应用程序的行为、性能以及与其他服务或组件的兼容性。'
- en: '**Run post-deployment tests**: After the application is deployed to an environment,
    the CD pipeline can run additional tests, such as smoke tests or regression tests,
    to ensure that the deployment was successful and that the application’s critical
    functionalities are still working as expected.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行部署后测试**：在应用程序部署到环境后，CD 管道可以运行额外的测试，例如冒烟测试或回归测试，以确保部署成功，并且应用程序的关键功能仍然按预期工作。'
- en: '**Monitor application performance**: The CD pipeline should include monitoring
    tools that gather data on the application’s performance, resource usage, and error
    rates. This information can be used to identify potential issues or areas for
    improvement, helping to maintain a high-quality user experience. We talked about
    monitoring and logging in [*Chapter 10*](B19343_10.xhtml#_idTextAnchor240) – some
    of these tasks can be initiated or at least configured by the CD pipeline.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控应用程序性能**：CD 管道应包括监控工具，收集有关应用程序性能、资源使用和错误率的指标。这些信息可用于识别潜在问题或改进领域，有助于保持高质量的用户体验。我们在[*第
    10 章*](B19343_10.xhtml#_idTextAnchor240)中讨论了监控和日志记录——一些这些任务可以由 CD 管道启动或至少配置。'
- en: '**Manage configuration and environment variables**: The CD pipeline should
    handle environment-specific configurations, such as API keys or database connection
    strings, ensuring that the appropriate values are used for each environment.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理配置和环境变量**：CD 管道应处理特定环境的配置，例如 API 密钥或数据库连接字符串，确保每个环境使用适当的值。'
- en: '**Rollback strategy**: A well-designed CD pipeline should include a rollback
    mechanism, allowing the team to revert to a previous version of the application
    if issues are detected after deployment. This can help minimize downtime and mitigate
    the impact of any problems. This can be particularly challenging with a database
    platform. Once an update has been applied to the database, it can be challenging
    to roll back, even with help from Entity Framework!'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**回滚策略**：设计良好的CD管道应包括回滚机制，允许团队在部署后发现问题后回滚到应用程序的先前版本。这有助于最小化停机时间并减轻任何问题的冲击。在数据库平台上，这可能特别具有挑战性。一旦数据库应用了更新，即使有Entity
    Framework的帮助，回滚也可能很困难！'
- en: '**Notifications and reporting**: The CD pipeline should send notifications
    about the deployment status and generate reports on the deployment process. This
    helps to keep the team informed and enables them to quickly address any issues
    that arise during deployment.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通知和报告**：持续交付（CD）管道应发送有关部署状态的通知，并生成有关部署过程的报告。这有助于让团队保持知情，并使他们能够快速解决部署过程中出现的任何问题。'
- en: The preceding tasks are just a starting point for a CD pipeline, and you can
    tailor the process to meet the specific needs and requirements of your application.
    By implementing a robust and automated CD pipeline, you can streamline the release
    process, improve the reliability and stability of your application, and ensure
    that new features and fixes are delivered to users as quickly and safely as possible.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的任务只是CD管道的起点，你可以根据应用程序的具体需求和需求调整流程。通过实施强大且自动化的CD管道，你可以简化发布过程，提高应用程序的可靠性和稳定性，并确保新功能和修复尽可能快速、安全地交付给用户。
- en: Environments
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 环境
- en: Environments are isolated instances of an application, each with its own configurations,
    resources, and infrastructure. They are used to replicate various stages of the
    software development life cycle, allowing developers to test, validate, and optimize
    the application before it is released to end users. Using different environments
    helps to minimize risks, detect issues early, and ensure the application’s stability,
    performance, and security.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 环境是应用程序的独立实例，每个环境都有其自己的配置、资源和基础设施。它们被用来复制软件开发生命周期的各个阶段，使开发者能够在将应用程序发布给最终用户之前对其进行测试、验证和优化。使用不同的环境有助于降低风险、及早发现问题，并确保应用程序的稳定性、性能和安全。
- en: Typically, a feature or bug fix will move sequentially through a series of environments,
    starting on the developer’s own laptop and finally ending on the production environment,
    in the hands of the users. As the new code moves through the environments, the
    consequences of bugs increase, and so the authority required to green-light the
    deployment also increases. A developer on a project will hopefully have full control
    over the local development environment but may have no access to the production
    environment, which may require a senior manager’s approval to make changes.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，一个功能或错误修复将依次通过一系列环境，从开发者的笔记本电脑开始，最终结束在用户手中的生产环境。随着新代码通过环境，bug的后果会增加，因此批准部署所需的权限也会增加。项目上的开发者可能希望完全控制本地开发环境，但可能无法访问生产环境，这可能需要高级经理的批准才能进行更改。
- en: 'The following presents a common setup of environments in a software development
    process:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在软件开发过程中环境的一个常见设置：
- en: '**Development environment**: This environment is where developers work on their
    local machines, writing code and testing features as they build the application.
    It is configured to allow rapid iteration and debugging, and it often has relaxed
    security constraints compared to other environments.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发环境**：这个环境是开发者在其本地机器上工作的地方，他们在构建应用程序的过程中编写代码和测试功能。它被配置为允许快速迭代和调试，并且与其他环境相比，通常具有更宽松的安全约束。'
- en: '**Test environment**: The test environment is used for running various types
    of tests, such as unit tests, integration tests, and E2E tests. It is set up to
    closely resemble the production environment so that the tests can validate the
    application’s behavior, compatibility, and performance under realistic conditions.
    Test environments are typically managed by **quality assurance** (**QA**) teams
    and are separate from developers’ local machines to ensure consistent testing
    results.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试环境**：测试环境用于运行各种类型的测试，例如单元测试、集成测试和端到端测试。它被设置得与生产环境非常相似，以便测试可以在现实条件下验证应用程序的行为、兼容性和性能。测试环境通常由**质量保证**（**QA**）团队管理，并且与开发者的本地机器分开，以确保测试结果的一致性。'
- en: '**Staging environment**: The staging environment is a close replica of the
    production environment, including configurations, infrastructure, and resources.
    It is used to perform final testing and validation before deploying the application
    to production. This environment helps to identify and address any potential issues
    that may not have been detected in the test environment, reducing the risk of
    deploying faulty software to end users.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预发布环境**：预发布环境是生产环境的近似副本，包括配置、基础设施和资源。它用于在将应用程序部署到生产之前执行最终测试和验证。这个环境有助于识别和解决在测试环境中可能未被发现的问题，从而降低向最终用户部署有缺陷软件的风险。'
- en: '**Production environment**: This is the live environment where the application
    is made available to end users. The production environment has the most stringent
    security, performance, and reliability requirements, as any issues or downtime
    can directly impact users and the business. Deployments to the production environment
    should be carefully managed and monitored to ensure the application’s stability
    and performance.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生产环境**：这是应用程序向最终用户提供的实时环境。生产环境对安全性、性能和可靠性要求最为严格，因为任何问题或停机都可能直接影响到用户和业务。向生产环境的部署应谨慎管理并监控，以确保应用程序的稳定性和性能。'
- en: 'In some cases, organizations may also have additional environments, such as
    the following:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，组织还可能有额外的环境，例如以下内容：
- en: '**Pre-production environment**: This environment is used to perform final checks,
    such as load testing or security testing, before deploying to production. It is
    an optional environment that can be used to further reduce risks associated with
    releasing new software.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预生产环境**：这个环境用于在部署到生产环境之前执行最终检查，例如负载测试或安全测试。这是一个可选的环境，可以用来进一步降低发布新软件相关的风险。'
- en: '**Disaster recovery environment**: This environment is a backup of the production
    environment, used to quickly restore the application in case of a catastrophic
    failure or disaster. It ensures business continuity and minimizes downtime during
    unforeseen events.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灾难恢复环境**：这个环境是生产环境的备份，用于在发生灾难性故障或灾难时快速恢复应用程序。它确保业务连续性，并在不可预见的事件中最大限度地减少停机时间。'
- en: Using multiple environments allows organizations to detect and fix issues at
    various stages, improving the overall quality of the application and reducing
    the likelihood of deploying faulty software to end users.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用多个环境允许组织在各个阶段检测和修复问题，从而提高应用程序的整体质量，并降低向最终用户部署有缺陷软件的可能性。
- en: Benefits of adopting CI/CD
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 采用CI/CD的好处
- en: If you think that all of this sounds like a lot of work – you are right. It
    is a lot of work, but there are also a number of very large benefits in building
    out CI/CD systems. These benefits ultimately contribute to the efficiency, reliability,
    and agility of your software development process, ensuring the delivery of high-quality
    software to your users.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你认为这一切听起来工作量很大——你是对的。这是一项很大的工作，但构建CI/CD系统也有许多非常显著的好处。这些好处最终有助于提高软件开发过程的效率、可靠性和敏捷性，确保向用户交付高质量的软件。
- en: CI/CD can dramatically reduce the time between the code being written and the
    features being in the hands of the customers. Code that has value to customers
    should be deployed as fast as possible, but it is very common for that code to
    languish for months in a repository delivering no value at all. As well as adding
    new features, CI/CD will result in bug fixes and patches being rolled out faster.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: CI/CD可以显著缩短代码编写与功能交付给客户之间的时间。对客户有价值的代码应尽可能快地部署，但代码在仓库中闲置数月，没有任何价值的情况非常普遍。除了添加新功能外，CI/CD还将导致错误修复和补丁的快速推出。
- en: As well as the improved speed of deployment, CI/CD will also hugely reduce deployment
    failures, if not eliminate them completely. Many of the problems typically encountered
    during a release will be caught nearly instantly in either the CI or the CD pipeline,
    almost guaranteeing a successful release every time.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 除了部署速度的提升，CI/CD 还将极大地减少部署失败，甚至可能完全消除。在发布过程中通常遇到的问题几乎都会在 CI 或 CD 流水线中被立即捕捉到，几乎每次都能保证发布成功。
- en: The benefits of CI/CD are not all for the users of the application, though.
    There are also significant benefits for the developers. Generally, the pipelines
    will enforce higher code quality and consistency through tools such as automated
    testing, linting, and static analysis. This makes working on the product a much
    more enjoyable experience for everyone involved and should ultimately result in
    a quicker turnaround time for new features and bug fixes on the developer side
    as well.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: CI/CD 的好处并不只是针对应用程序的用户。对于开发者来说，也有显著的好处。通常，流水线将通过自动化测试、代码审查和静态分析等工具强制执行更高的代码质量和一致性。这使得所有参与产品工作的人都能够享受到更加愉快的体验，并最终导致开发者侧在新的功能和错误修复上的周转时间更快。
- en: The pipelines will increase the confidence of the whole team in the releases
    and the ability to turn around releases quickly. This additional peace of mind
    is a huge benefit for the team.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 流水线将提高整个团队对发布和快速回滚发布的信心。这种额外的安心感对团队来说是一大好处。
- en: We will talk about scaling the app in detail in [*Chapter 12*](B19343_12.xhtml#_idTextAnchor284),
    but it’s worth mentioning at this point that CI/CD is essential when your applications
    start to scale, and you are required to deploy and manage multiple instances of
    the app to manage the load on the servers. Achieving this ‘by hand’ is next to
    impossible, and so CI/CD becomes almost mandatory when you start to seriously
    scale the application.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[*第 12 章*](B19343_12.xhtml#_idTextAnchor284)中详细讨论应用程序的扩展，但在此处值得提及的是，当您的应用程序开始扩展，您需要部署和管理多个应用程序实例以管理服务器负载时，CI/CD
    是必不可少的。手动实现这一点几乎是不可能的，因此当您开始认真扩展应用程序时，CI/CD 几乎是强制性的。
- en: While implementing CI/CD pipelines may be a significant investment of time and
    resources, the benefits they provide in terms of efficiency, reliability, and
    overall software quality make them an essential component of modern software development
    processes. Embracing CI/CD will help your organization stay competitive, deliver
    value to users faster, and build a strong foundation for future growth.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然实施 CI/CD 流水线可能需要大量的时间和资源投入，但它们在效率、可靠性和整体软件质量方面提供的益处使它们成为现代软件开发流程的必要组成部分。拥抱
    CI/CD 将帮助您的组织保持竞争力，更快地向用户交付价值，并为未来的增长奠定坚实的基础。
- en: Is CI/CD DevOps?
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CI/CD 是 DevOps 吗？
- en: You will often hear CI/CD mentioned in the same sentence as DevOps, and while
    the concepts are related, CI/CD is not quite synonymous with DevOps. DevOps is
    a broader concept that encompasses the cultural shift, collaboration, and practices
    that bring together software development and IT operations teams with the goal
    of increasing efficiency, reducing the time to deliver software, and improving
    overall software quality.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 您经常会听到 CI/CD 和 DevOps 被放在同一句话中提到，尽管这两个概念相关，但 CI/CD 并不完全等同于 DevOps。DevOps 是一个更广泛的概念，它包括文化转变、协作和实践，旨在将软件开发和
    IT 运维团队结合起来，以提高效率、减少交付软件的时间并提高整体软件质量。
- en: CI/CD focuses specifically on automating the process of integrating code changes,
    testing, and deploying the application to production environments. By implementing
    CI/CD pipelines, development and operations teams can work more closely and iteratively,
    which aligns with the DevOps philosophy.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: CI/CD 专注于自动化代码更改集成、测试并将应用程序部署到生产环境的过程。通过实施 CI/CD 流水线，开发和运维团队能够更紧密、更迭代地工作，这与
    DevOps 哲学是一致的。
- en: In short, CI/CD is a key component of the DevOps approach, but DevOps encompasses
    a wider range of practices, tools, and cultural shifts that aim to bridge the
    gap between development and operations teams.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，CI/CD 是 DevOps 方法的关键组成部分，但 DevOps 包含了更广泛的做法、工具和文化转变，旨在弥合开发和运维团队之间的差距。
- en: Configuring CI/CD pipelines
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 CI/CD 流水线
- en: 'While the concepts around CI/CD are fairly straightforward, they can be a deceptively
    large and complex topic to grasp completely. The skills that are required are
    something of a blend of developers and IT operations (thus: DevOps!), so it can
    be challenging to get right. There are a number of popular systems for doing this;
    the ‘big three’ are Azure DevOps, GitHub Actions, and Jenkins, each with its own
    pros and cons. In this section, I will offer some general advice that should be
    applicable to any system that you choose to build your pipelines in.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然CI/CD的概念相对简单明了，但要完全掌握它们可能是一个看似庞大且复杂的主题。所需技能是开发人员和IT运营（即DevOps）的某种混合体，因此正确实施可能具有挑战性。有许多流行的系统可以完成这项工作；'三大'是Azure
    DevOps、GitHub Actions和Jenkins，每个都有自己的优缺点。在本节中，我将提供一些通用的建议，这些建议应该适用于您选择的任何系统来构建管道。
- en: Source control integration
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 源代码控制集成
- en: The first and most important thing to get right is to integrate the source control
    with the pipelines. This is foundational as without the source control, there
    is nothing for the pipelines to run against. This integration must allow the pipeline
    to detect changes to the code base (typically through a commit or a pull request)
    and then initiate the appropriate build, test, and deployment processes. When
    setting up source control integration, ensure that it supports the various branches
    and workflows your team uses, enabling seamless collaboration and efficient development.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 首先也是最重要的事情是集成源代码控制与管道。这是基础性的，因为没有源代码控制，管道就没有运行的目标。这种集成必须允许管道检测代码库的变化（通常是通过提交或拉取请求），然后启动适当的构建、测试和部署流程。在设置源代码控制集成时，请确保它支持团队使用的各种分支和工作流程，以实现无缝协作和高效开发。
- en: Build triggers and build agents
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建触发器和构建代理
- en: Build triggers and build agents play a crucial role in automating the build
    process. Build triggers determine when the pipeline should start building the
    application, typically in response to events such as new code commits, pull requests,
    or a schedule. Build agents are responsible for executing the build tasks on dedicated
    machines or cloud-based environments, ensuring the application is built, tested,
    and packaged according to the specified configuration. When configuring build
    triggers and agents, consider factors such as the frequency of code changes, the
    resources required for building the application, and the desired level of parallelism.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 构建触发器和构建代理在自动化构建过程中发挥着至关重要的作用。构建触发器确定管道何时开始构建应用程序，通常是对新代码提交、拉取请求或计划的响应。构建代理负责在专用机器或基于云的环境中执行构建任务，确保应用程序根据指定的配置进行构建、测试和打包。在配置构建触发器和代理时，请考虑代码更改的频率、构建应用程序所需的资源以及所需的并行程度。
- en: A build agent is typically a VM or a container running in a cloud environment
    somewhere. As with everything in the cloud, you must pay per use for the build
    agents. This can quickly start to add up! On smaller projects, it may be possible
    to do a build every time code is committed to the repo, but as the team grows
    and the number of commits per day starts to increase, it may make more sense to
    do a single nightly build or even a weekly build.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 构建代理通常是在某个云环境中运行的虚拟机或容器。与云中的所有事物一样，您必须为构建代理按使用付费。这可能会迅速累积费用！在较小的项目中，每次代码提交到仓库时可能都进行一次构建，但随着团队的增长和每日提交次数的增加，进行单个夜间构建甚至周构建可能更有意义。
- en: Defining build tasks and stages
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义构建任务和阶段
- en: Defining build tasks and stages is essential for organizing and managing the
    various steps of the build process and keeping everything tidy. Your pipeline
    configuration is essentially just more code, and it should be looked after in
    the same way as the actual application code.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 定义构建任务和阶段对于组织和管理工作流中的各个构建步骤以及保持一切整洁至关重要。您的管道配置本质上只是更多的代码，因此它应该像实际的应用程序代码一样得到妥善管理。
- en: Build tasks are individual actions performed during the build, such as compiling
    code, running tests, or packaging the application.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 构建任务是在构建过程中执行的单个操作，例如编译代码、运行测试或打包应用程序。
- en: Stages represent a sequence of related tasks that are executed together, often
    corresponding to different phases of the development life cycle, such as development,
    testing, and production. When defining build tasks and stages, ensure they are
    aligned with your team’s development practices and that they support the required
    level of automation and testing.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 阶段代表一系列相关任务，这些任务通常一起执行，通常对应于开发生命周期的不同阶段，如开发、测试和生产。在定义构建任务和阶段时，确保它们与团队的开发实践相一致，并且支持所需的自动化和测试水平。
- en: Release triggers and environments
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发布触发器和环境
- en: Release triggers and environments govern the deployment of the application to
    various environments, such as staging or production. Release triggers determine
    when a new release should be created and deployed, typically in response to events
    such as successful builds, scheduled times, or manual intervention. Environments
    represent the target deployment destinations, including their configurations,
    resources, and access controls. When configuring release triggers and environments,
    consider factors such as the desired release frequency, the complexity of your
    deployment process, and the need for staging and testing before deploying to production.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 发布触发器和环境控制着应用程序部署到各种环境，例如预发布或生产环境。发布触发器决定何时创建和部署新版本，通常是对成功构建、预定时间或人工干预等事件的响应。环境代表目标部署目的地，包括它们的配置、资源和访问控制。在配置发布触发器和环境时，考虑因素包括期望的发布频率、部署过程的复杂性以及在生产部署前进行预发布和测试的需求。
- en: It is fairly common for deployments to test or even staging environments to
    happen fully autonomously or with the approval of any member of the team. Deployments
    to production will rarely happen fully automatically and will usually need approval
    from a senior member of the team. Often multiple approvals will be required, for
    example, from management, the QA team, and the devlopment manager.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试或预发布环境中进行部署通常是相当常见的，可以完全自主进行，或者得到团队任何成员的批准。而部署到生产环境很少会完全自动进行，通常需要团队高级成员的批准。通常需要多个批准，例如来自管理层、质量保证团队和开发经理。
- en: Deploying to multiple tenants
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署到多个租户
- en: Deploying to multiple tenants is a key aspect of SaaS applications, as it allows
    you to serve multiple customers using the same codebase while maintaining data
    isolation and customization. To achieve this, configure your CI/CD pipeline to
    support tenant-specific deployments, enabling you to deploy updates and new features
    to all tenants simultaneously or selectively. This may involve parameterizing
    your deployment tasks, using tenant-specific configurations, or leveraging features
    provided by your CI/CD tool or hosting platform.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 部署到多个租户是SaaS应用的关键方面，因为它允许你使用相同的代码库为多个客户提供服务，同时保持数据隔离和定制。为了实现这一点，配置你的CI/CD管道以支持特定租户的部署，使你能够同时或选择性地将更新和新功能部署到所有租户。这可能涉及参数化部署任务，使用特定租户的配置，或利用CI/CD工具或托管平台提供的功能。
- en: We discussed multi-tenancy in detail in [*Chapter 3*](B19343_03.xhtml#_idTextAnchor082),
    so you will appreciate how challenging it can be to manage an application that
    has many tenants, some of which require fully segregated installations.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[*第3章*](B19343_03.xhtml#_idTextAnchor082)中详细讨论了多租户，因此你会欣赏到管理具有许多租户的应用程序可能有多么具有挑战性，其中一些租户可能需要完全隔离的安装。
- en: Deploying microservices in SaaS applications
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在SaaS应用中部署微服务
- en: Deploying microservices is a crucial aspect of SaaS applications, as they enable
    you to build scalable, flexible, and maintainable systems. Microservices architecture
    allows you to divide your application into small, independent components, each
    responsible for a specific function or feature. This enables you to develop, test,
    and deploy these components independently, reducing the complexity and risk associated
    with monolithic applications. We discussed microservices in detail in [*Chapter
    6*](B19343_06.xhtml#_idTextAnchor140), so you will appreciate the benefits and
    challenges associated with managing a SaaS application built on this architecture.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在SaaS应用中部署微服务是至关重要的，因为它们使你能够构建可扩展、灵活且易于维护的系统。微服务架构允许你将应用程序划分为小型、独立的组件，每个组件负责特定的功能或特性。这使得你可以独立地开发、测试和部署这些组件，从而降低了与单体应用相关的复杂性和风险。我们在[*第6章*](B19343_06.xhtml#_idTextAnchor140)中详细讨论了微服务，因此你会欣赏到管理基于这种架构构建的SaaS应用所关联的益处和挑战。
- en: In the context of CI/CD pipelines, deploying microservices requires careful
    coordination and management to ensure that each service is built, tested, and
    deployed in a consistent and reliable manner. This may involve configuring your
    CI/CD pipeline to handle multiple repositories, using service-specific build and
    deployment tasks, and leveraging containerization technologies, such as Docker,
    to package and deploy your microservices.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在CI/CD管道的背景下，部署微服务需要仔细的协调和管理，以确保每个服务都能以一致和可靠的方式构建、测试和部署。这可能包括配置您的CI/CD管道以处理多个仓库，使用特定于服务的构建和部署任务，以及利用容器化技术，如Docker，来打包和部署您的微服务。
- en: Additionally, deploying microservices in a SaaS application may involve integrating
    with other components, such as APIs, databases, and third-party services. This
    requires your CI/CD pipeline to manage dependencies, versioning, and configuration
    settings for each microservice, ensuring seamless interaction between all components
    of your application.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在SaaS应用程序中部署微服务可能涉及与其他组件的集成，例如API、数据库和第三方服务。这要求您的CI/CD管道管理每个微服务的依赖项、版本控制和配置设置，以确保应用程序所有组件之间的无缝交互。
- en: Approvals and gates for quality control
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 质量控制审批和门控
- en: Approvals and gates for quality control are vital for ensuring that your application
    meets the required standards before being deployed to production. Approvals involve
    manual sign-offs from designated team members, while gates are automated checks
    that must pass before proceeding to the next stage of the pipeline. Examples of
    gates include successful test results, performance metrics, or security scans.
    By implementing approvals and gates, you can minimize the risk of deploying faulty
    or insecure code, ensuring that your SaaS application maintains a high level of
    quality and reliability.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 质量控制审批和门控对于确保您的应用程序在部署到生产之前达到所需标准至关重要。审批涉及指定团队成员的手动签字，而门控是在进入管道的下一阶段之前必须通过的自动化检查。门控的例子包括成功的测试结果、性能指标或安全扫描。通过实施审批和门控，您可以最大限度地降低部署有缺陷或不安全的代码的风险，确保您的SaaS应用程序保持高水平的质量和可靠性。
- en: CI/CD pipelines and tools overview
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CI/CD管道和工具概述
- en: There are quite a few tools and systems available that you can use to build
    your CI/CD pipelines. Often, the CI/CD tool will come along with the source control
    tool that you are using, but that does not have to be the case, and it’s worth
    understanding the available tools so you can make your choice.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 可用于构建您的CI/CD管道的工具和系统相当多。通常，CI/CD工具将与您使用的源代码控制工具一起提供，但这并不一定如此，了解可用的工具以便您做出选择是值得的。
- en: The feature overlap of these tools is fairly extensive, and you will find that
    all of the main functionality that we have discussed in this chapter is available
    in all of the mainstream tools. The choice of tool will largely come down to individual
    preference. The three most commonly used tools in enterprise settings are Azure
    DevOps, GitHub Actions, and Jenkins. The open source community more commonly uses
    CircleCI or Travis CI.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工具的功能重叠相当广泛，您会发现我们在这章中讨论的所有主要功能都在所有主流工具中都有提供。工具的选择将主要取决于个人偏好。在企业环境中最常用的三个工具是Azure
    DevOps、GitHub Actions和Jenkins。开源社区更常用CircleCI或Travis CI。
- en: Popular CI/CD tools
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 流行的CI/CD工具
- en: Microsoft’s Azure DevOps is a comprehensive suite of tools that covers the entire
    development life cycle, from planning and coding to building, testing, and deploying.
    It offers a range of services, including Azure Repos for source control, Azure
    Boards for project management, and Azure Pipelines for CI/CD. Azure DevOps provides
    seamless integration with other Microsoft services and supports various programming
    languages, platforms, and frameworks. It is particularly suited for teams already
    using Microsoft technologies and looking for a tightly integrated CI/CD solution.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 微软的Azure DevOps是一个涵盖整个开发生命周期的综合工具套件，从规划、编码到构建、测试和部署。它提供了一系列服务，包括Azure Repos用于源代码控制、Azure
    Boards用于项目管理以及Azure Pipelines用于CI/CD。Azure DevOps与其他Microsoft服务提供无缝集成，并支持各种编程语言、平台和框架。它特别适合那些已经使用Microsoft技术并寻求紧密集成的CI/CD解决方案的团队。
- en: GitHub Actions is a CI/CD solution built directly into GitHub, making it an
    attractive option for teams that already use GitHub for source control. With GitHub
    Actions, you can create custom workflows using a variety of pre-built actions
    or create your own. These workflows can be triggered by various events, such as
    commits, pull requests, or scheduled events. GitHub Actions offers a marketplace
    where you can find a wide array of community-contributed actions, enabling you
    to quickly build and customize your CI/CD pipeline. It also supports multiple
    languages, platforms, and frameworks.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Actions 是一个直接构建在 GitHub 中的 CI/CD 解决方案，对于已经使用 GitHub 进行源代码控制的团队来说，它是一个有吸引力的选择。使用
    GitHub Actions，你可以使用各种预构建动作创建自定义工作流程，或者创建自己的动作。这些工作流程可以由各种事件触发，例如提交、拉取请求或计划事件。GitHub
    Actions 提供了一个市场，你可以在这里找到各种社区贡献的动作，使你能够快速构建和自定义你的 CI/CD 管道。它还支持多种编程语言、平台和框架。
- en: Jenkins is an open source CI/CD server that has been widely adopted in the software
    development industry. It offers a high level of flexibility and extensibility
    thanks to its large ecosystem of plugins and integrations. Jenkins supports various
    build tools, version control systems, and deployment platforms, making it a versatile
    option for teams with diverse technology stacks. With Jenkins, you can create
    custom-build pipelines using its pipeline-as-code feature, allowing you to manage
    your pipeline configuration within your source control system.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 是一个在软件开发行业中广泛采用的开放源代码 CI/CD 服务器。由于其庞大的插件和集成生态系统，它提供了高度的可灵活性和可扩展性。Jenkins
    支持各种构建工具、版本控制系统和部署平台，使其成为具有多样化技术堆栈的团队的多功能选择。使用 Jenkins 的管道作为代码功能，你可以创建自定义构建管道，允许你在源代码控制系统中管理你的管道配置。
- en: Travis CI is a popular CI/CD platform known for its ease of use and seamless
    integration with GitHub. It offers both cloud-based and on-premises options, providing
    flexibility to organizations with different requirements. Travis CI supports a
    wide range of languages, platforms, and frameworks, making it a versatile choice
    for various projects. Like other CI/CD tools, Travis CI enables you to define
    your build pipeline as code, which can be version-controlled and managed within
    your repository.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Travis CI 是一个广受欢迎的 CI/CD 平台，以其易用性和与 GitHub 无缝集成为人所知。它提供基于云和本地部署的选项，为具有不同需求的组织提供灵活性。Travis
    CI 支持广泛的编程语言、平台和框架，使其成为各种项目的多功能选择。与其他 CI/CD 工具一样，Travis CI 允许你将构建管道定义为代码，这可以在你的仓库中进行版本控制和管理工作。
- en: CircleCI is another popular CI/CD platform that emphasizes speed and simplicity.
    It offers a cloud-based solution as well as a self-hosted option for teams with
    specific security or compliance requirements. CircleCI supports a wide range of
    languages and platforms and provides a robust set of integrations with other development
    tools. Its pipeline-as-code approach, like other CI/CD tools, allows you to manage
    your pipeline configuration within your source control system, making it easy
    to maintain and update as your project evolves.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: CircleCI 是另一个强调速度和简单的流行 CI/CD 平台。它提供基于云的解决方案以及针对具有特定安全或合规性要求的团队的本地托管选项。CircleCI
    支持广泛的编程语言和平台，并提供了一套强大的与其他开发工具的集成。其管道作为代码的方法，与其他 CI/CD 工具类似，允许你在源代码控制系统中管理你的管道配置，这使得随着项目的演变轻松维护和更新。
- en: These tools, including Azure DevOps, GitHub Actions, Jenkins, Travis CI, and
    CircleCI, offer a diverse set of options for CI/CD. The best choice for your specific
    needs will depend on factors such as your existing technology stack, team size,
    and project requirements. Each of these tools provides unique features and benefits,
    so it is important to evaluate them based on your team’s needs and preferences.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工具，包括 Azure DevOps、GitHub Actions、Jenkins、Travis CI 和 CircleCI，为 CI/CD 提供了多样化的选项。最适合你特定需求的选择将取决于你的现有技术堆栈、团队规模和项目需求。这些工具中的每一个都提供了独特的功能和好处，因此根据你团队的需求和偏好进行评估非常重要。
- en: Factors to consider when choosing a CI/CD tool
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择 CI/CD 工具时需要考虑的因素
- en: Selecting the right CI/CD tool for your project is an essential step toward
    building a successful pipeline. A well-chosen CI/CD tool can improve your team’s
    productivity, streamline your processes, and help you maintain a high-quality
    codebase.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 为你的项目选择正确的 CI/CD 工具是构建成功管道的关键步骤。一个精心选择好的 CI/CD 工具可以提高团队的生产力，简化你的流程，并帮助你保持高质量的代码库。
- en: One of the most critical aspects to consider when selecting a CI/CD tool is
    its ability to seamlessly integrate with your current source control, issue tracking,
    and other development tools. This ensures a smooth and efficient workflow, reducing
    the overhead of managing disparate systems. Before choosing a CI/CD tool, evaluate
    its compatibility with your existing tools and services, and consider the ease
    of integration.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择 CI/CD 工具时，考虑其与当前源代码控制、问题跟踪和其他开发工具无缝集成的能力是最关键的方面之一。这确保了流畅和高效的流程，减少了管理不同系统的工作量。在选择
    CI/CD 工具之前，评估其与现有工具和服务的兼容性，并考虑集成的简便性。
- en: We will discuss scaling in detail in the next chapter, but it’s worth mentioning
    at this point that as your SaaS application grows, your CI/CD pipeline should
    be able to scale with it. It’s essential to consider the tool’s capabilities to
    handle large projects and multiple teams working simultaneously. A scalable CI/CD
    tool should be able to support increasing workloads, additional users, and more
    complex pipelines without compromising performance or reliability.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一章详细讨论扩展性，但在此处值得提及的是，随着你的 SaaS 应用程序的增长，你的 CI/CD 管道应该能够与之一起扩展。考虑工具处理大型项目和多个团队同时工作的能力是至关重要的。一个可扩展的
    CI/CD 工具应该能够支持不断增长的工作负载、更多用户和更复杂的管道，而不会影响性能或可靠性。
- en: Depending on your project’s specific requirements, you may need a CI/CD tool
    that offers a high degree of customization and extensibility. This could be through
    plugins, integrations, or custom scripting. A customizable CI/CD tool allows you
    to tailor the pipeline to your unique needs, implement custom logic, and integrate
    with niche tools or services. Consider the available options for extending the
    tool’s functionality and the ease of implementing these customizations.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你项目的具体要求，你可能需要一个提供高度定制和可扩展性的 CI/CD 工具。这可能通过插件、集成或自定义脚本来实现。一个可定制的 CI/CD 工具允许你根据独特需求调整管道，实现自定义逻辑，并与利基工具或服务集成。考虑扩展工具功能的选择以及实施这些定制的简便性。
- en: Finally, none of this comes for free! Compare the pricing models and available
    support options for different CI/CD tools. Factors such as the size of your team,
    the frequency of deployments, and your budget constraints can significantly impact
    your decision. Many CI/CD tools offer a range of pricing tiers, including free
    plans with limited features and enterprise plans with advanced capabilities and
    support. Additionally, consider the quality of the documentation, community support,
    and vendor-provided support when evaluating CI/CD tools. A tool with strong support
    resources can help your team troubleshoot issues and adopt best practices more
    effectively.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这一切都不是免费的！比较不同 CI/CD 工具的定价模式和可用的支持选项。团队规模、部署频率和预算限制等因素可能会显著影响你的决策。许多 CI/CD
    工具提供一系列定价层，包括具有有限功能的免费计划和具有高级功能和支持的企业计划。此外，在评估 CI/CD 工具时，还应考虑文档质量、社区支持和供应商提供的支持。具有强大支持资源的工具可以帮助你的团队更有效地解决问题和采用最佳实践。
- en: Building a flexible and adaptable CI/CD process
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建灵活且适应性强的 CI/CD 流程
- en: While selecting the right CI/CD tool is essential, it is equally important to
    design a CI/CD process that is flexible and adaptable to your project’s unique
    needs. A well-structured and agile CI/CD process can improve your team’s productivity,
    reduce the time to market for new features, and help you maintain a high-quality
    codebase.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择合适的 CI/CD 工具至关重要时，设计一个灵活且能适应你项目独特需求的 CI/CD 流程同样重要。一个结构良好且敏捷的 CI/CD 流程可以提高团队的生产力，缩短新功能上市时间，并帮助你保持高质量的代码库。
- en: Fostering collaboration and communication among team members is crucial for
    a successful CI/CD process. Encouraging open discussions about the pipeline and
    its goals helps create a shared understanding and ownership of the process. Regular
    meetings, code reviews, and shared documentation can facilitate better communication
    and collaboration, making it easier to address issues and make improvements.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在团队成员之间培养协作和沟通对于成功的 CI/CD 流程至关重要。鼓励就管道及其目标进行开放讨论有助于形成对流程的共同理解和所有权。定期的会议、代码审查和共享文档可以促进更好的沟通和协作，使解决问题和进行改进变得更加容易。
- en: Continuous improvement is an integral part of all of the development process,
    and CI/CD is no different. Incorporate feedback from team members and adapt to
    changes in project requirements or tools as needed. By regularly reviewing and
    refining your CI/CD processes, you can ensure they remain efficient, up-to-date,
    and aligned with your project’s goals.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 持续改进是所有开发过程的一个基本组成部分，CI/CD也不例外。根据需要整合团队成员的反馈，并适应项目需求或工具的变化。通过定期审查和改进您的CI/CD流程，您可以确保它们保持高效、最新并与项目目标保持一致。
- en: Ensure that your CI/CD pipeline is well-documented and easily understood by
    new team members. Clear documentation makes your pipeline more maintainable and
    scalable over time, reducing the learning curve for new team members and making
    it easier for the team to make updates and improvements. Additionally, by documenting
    your pipeline’s configuration, best practices, and troubleshooting guides, you
    can create a valuable resource for your team.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您的CI/CD管道有良好的文档记录，并且新团队成员可以轻松理解。清晰的文档使您的管道随着时间的推移更容易维护和扩展，减少新团队成员的学习曲线，并使团队更容易进行更新和改进。此外，通过记录管道的配置、最佳实践和故障排除指南，您可以为您团队创建一个有价值的资源。
- en: Monitoring the performance and effectiveness of your CI/CD pipeline is crucial
    for identifying areas for improvement and optimizing the process. Use metrics
    such as build success rates, deployment frequency, and lead time for changes to
    evaluate the pipeline’s efficiency and effectiveness. Regularly analyze these
    metrics to spot trends, detect bottlenecks, and pinpoint areas where improvements
    can be made. By actively monitoring and optimizing your CI/CD process, you can
    ensure it remains robust, efficient, and capable of meeting your project’s evolving
    needs.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 监控CI/CD管道的性能和有效性对于识别改进领域和优化流程至关重要。使用构建成功率、部署频率和变更的领先时间等指标来评估管道的效率和有效性。定期分析这些指标以发现趋势、检测瓶颈并确定可以改进的领域。通过积极监控和优化您的CI/CD流程，您可以确保它保持稳健、高效，并能够满足项目不断变化的需求。
- en: If you understand the tools that are available, make an informed choice, and
    build in the correct amount of flexibility, then you should be well on the way
    to success with CI/CD. As with everything SaaS-related, there are a few specific
    considerations that are worth being aware of. We’ll discuss these in the next
    section.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您了解可用的工具，做出明智的选择，并构建适当程度的灵活性，那么您在CI/CD方面应该已经走上了成功的道路。正如与SaaS相关的所有事物一样，有一些特定的考虑因素值得关注。我们将在下一节中讨论这些内容。
- en: SaaS-specific considerations
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SaaS特定考虑因素
- en: SaaS applications bring their own unique set of challenges and requirements.
    As a result, it is essential to carefully consider the specific aspects of SaaS
    when building and deploying these applications. This section will explore the
    key SaaS-specific considerations that you should keep in mind when designing and
    implementing your CI/CD pipelines.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: SaaS应用带来了一组独特的挑战和需求。因此，在构建和部署这些应用时，仔细考虑SaaS的特定方面至关重要。本节将探讨在设计和管理您的CI/CD管道时应牢记的关键SaaS特定考虑因素。
- en: Containerization
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 容器化
- en: We have made use of containerization already to build the developer environment,
    but that is far from the only use case in the context of SaaS applications. When
    developing SaaS apps, containerization is particularly valuable due to the inherent
    complexity and scale of such systems. By packaging each microservice in a self-contained
    container, developers can ensure that their applications run consistently across
    different environments, reducing the likelihood of issues arising from discrepancies
    in dependencies or configurations. Furthermore, containers enable better resource
    utilization and make it easier to scale individual components of the application
    independently, resulting in more efficient and cost-effective SaaS solutions.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经利用容器化技术构建了开发者环境，但这在SaaS应用背景下并非唯一的用例。在开发SaaS应用时，由于这类系统的固有复杂性和规模，容器化特别有价值。通过将每个微服务打包到自包含的容器中，开发者可以确保他们的应用程序在不同环境中的一致运行，减少因依赖项或配置差异而产生问题的可能性。此外，容器化提高了资源利用率，并使得独立扩展应用程序的各个组件变得更加容易，从而实现更高效和成本效益更高的SaaS解决方案。
- en: To leverage containerization in your SaaS application, start by creating container
    images for each of your app’s microservices. These images are built using a Dockerfile,
    which defines the base image, application code, dependencies, and runtime configuration.
    By creating a separate image for each microservice, you can ensure that they remain
    isolated, allowing you to update, scale, and deploy each service independently
    of the others.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 要在您的SaaS应用中利用容器化，首先为您的应用中的每个微服务创建容器镜像。这些镜像是通过Dockerfile构建的，它定义了基本镜像、应用程序代码、依赖项和运行时配置。通过为每个微服务创建单独的镜像，您可以确保它们保持隔离，从而允许您独立于其他服务更新、扩展和部署每个服务。
- en: Managing multi-container applications can be complex, as it often involves coordinating
    the deployment, scaling, and communication of multiple interconnected services.
    To simplify this process, use orchestration tools such as Docker Compose, Kubernetes,
    or Amazon **Elastic Container Service** (**ECS**), which allow you to define multi-container
    applications using configuration files and automate the management of containerized
    services. These tools help you maintain a consistent application state and facilitate
    communication between containers, making it easier to develop and operate large-scale
    SaaS applications.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 管理多容器应用可能很复杂，因为它通常涉及协调多个相互连接服务的部署、扩展和通信。为了简化此过程，使用编排工具，如Docker Compose、Kubernetes或Amazon
    **弹性容器服务**（**ECS**），这些工具允许您使用配置文件定义多容器应用，并自动化容器化服务的管理。这些工具帮助您保持应用程序状态的一致性，并促进容器之间的通信，使开发和管理大规模SaaS应用变得更加容易。
- en: Integrating containerization with your CI/CD pipeline is essential for automating
    the build, test, and deployment processes of your containerized SaaS application.
    To achieve this, configure your CI/CD pipeline to build container images for each
    microservice whenever code changes are integrated and automatically run tests
    against these images to validate their functionality and performance. Once the
    tests pass, the pipeline should deploy the updated images to the appropriate environments
    using the chosen orchestration tool. By incorporating containerization into your
    CI/CD pipeline, you can streamline the development and deployment processes, making
    it easier to deliver high-quality, scalable SaaS solutions to your customers.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 将容器化集成到您的CI/CD管道中对于自动化构建、测试和部署您的容器化SaaS应用至关重要。为了实现这一点，配置您的CI/CD管道，以便在代码更改集成时为每个微服务构建容器镜像，并自动对这些镜像运行测试以验证其功能和性能。一旦测试通过，管道应使用所选的编排工具将更新的镜像部署到适当的环境。通过将容器化纳入您的CI/CD管道，您可以简化开发和部署流程，使向客户交付高质量、可扩展的SaaS解决方案变得更加容易。
- en: Upgrades
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 升级
- en: The importance of a well-planned upgrade strategy cannot be overstated for SaaS
    microservice applications. As these applications often serve multiple customers
    with diverse requirements and high expectations for uptime, a seamless upgrade
    strategy ensures that new features, improvements, and bug fixes can be delivered
    without disrupting the user experience.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 一个周密的升级策略对于SaaS微服务应用的重要性不容小觑。因为这些应用通常服务于多个具有不同需求和高度可用性预期的客户，一个无缝的升级策略确保了新功能、改进和错误修复可以在不干扰用户体验的情况下交付。
- en: 'Zero-downtime deployments are a critical component of a successful upgrade
    strategy. By minimizing the impact of updates on the availability and performance
    of the application, zero-downtime deployments ensure that users can continue using
    the service without interruptions. There are several approaches to achieving zero-downtime
    deployments:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 无停机部署是成功升级策略的一个关键组成部分。通过最小化更新对应用程序可用性和性能的影响，无停机部署确保用户可以在不间断的情况下继续使用服务。实现无停机部署有几种方法：
- en: '**Blue-green deployment**: This approach involves maintaining two identical
    production environments, referred to as “blue” and “green.” At any given time,
    one environment is active and serving users, while the other is idle. During an
    upgrade, changes are deployed to the idle environment, which is then tested and
    verified. Once the upgrade is deemed successful, traffic is gradually switched
    over to the updated environment. This method allows for quick rollbacks if issues
    arise, as traffic can be easily redirected back to the original environment.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**蓝绿部署**：这种方法涉及维护两个相同的生产环境，分别称为“蓝”和“绿”。在任何给定时间，一个环境处于活动状态，为用户提供服务，而另一个处于空闲状态。在升级期间，更改部署到空闲环境，然后进行测试和验证。一旦升级被认为成功，流量将逐渐切换到更新后的环境。如果出现问题，这种方法允许快速回滚，因为流量可以轻松地重新定向回原始环境。'
- en: '**Canary releases**: In this approach, upgrades are deployed to a small subset
    of users, or “canary” instances, before being rolled out to the entire user base.
    This enables developers to monitor the performance and stability of the upgrade
    in a controlled manner and identify any issues before they affect all users. If
    the upgrade is successful, it is gradually deployed to the remaining instances.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**金丝雀发布**：在这种方法中，升级首先部署到一小部分用户或“金丝雀”实例，然后再推广到整个用户群。这使开发者能够以受控的方式监控升级的性能和稳定性，并在问题影响所有用户之前识别任何问题。如果升级成功，它将逐渐部署到剩余的实例。'
- en: '**Rolling updates**: Rolling updates involve deploying upgrades incrementally
    across instances, typically one at a time or in small groups. As each instance
    is updated, it is briefly taken out of service, and traffic is redirected to the
    remaining instances. This process continues until all instances have been upgraded.
    While this approach may be slower than others, it minimizes the risk of widespread
    issues and allows for easier troubleshooting.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**滚动更新**：滚动更新涉及增量地将升级部署到实例，通常是逐个或以小批量进行。随着每个实例的更新，它将暂时退出服务，流量被重新定向到剩余的实例。这个过程一直持续到所有实例都已升级。虽然这种方法可能比其他方法慢，但它最大限度地减少了广泛问题的风险，并允许更容易地进行故障排除。'
- en: Managing database schema changes in SaaS applications can be particularly challenging,
    as updates often need to be performed without disrupting existing data or compromising
    the integrity of the application. To handle these changes, consider using tools
    and techniques such as migrations, versioning, or feature flags, which allow for
    incremental and reversible updates to the database schema. Additionally, ensure
    that your database is designed to support multi-tenancy, allowing for seamless
    upgrades across all tenants.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在SaaS应用程序中管理数据库模式更改可能特别具有挑战性，因为更新通常需要在不破坏现有数据或损害应用程序完整性的情况下进行。为了处理这些更改，考虑使用迁移、版本控制或功能标志等工具和技术，这些工具和技术允许对数据库模式进行增量且可逆的更新。此外，确保您的数据库设计支持多租户，允许在所有租户之间无缝升级。
- en: Monitoring and rollback strategies are crucial for quickly identifying and addressing
    failed upgrades. By closely monitoring the performance and stability of your application
    during and after an upgrade, you can detect issues early and take appropriate
    action. Implement a rollback strategy that enables you to quickly revert to a
    previous stable version of the application if an issue arises during an upgrade.
    By having a well-defined monitoring and rollback plan, you can minimize the impact
    of failed upgrades on your users and maintain the high quality and reliability
    of your SaaS microservice application.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 监控和回滚策略对于快速识别和解决失败的升级至关重要。通过在升级期间及之后密切监控应用程序的性能和稳定性，您可以早期发现问题并采取适当的行动。实施一个回滚策略，以便在升级过程中出现问题时，您可以快速回滚到应用程序的先前稳定版本。通过拥有一个明确的监控和回滚计划，您可以最小化失败升级对用户的影响，并保持SaaS微服务应用程序的高质量和可靠性。
- en: Security and compliance in CI/CD pipelines
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CI/CD管道中的安全和合规性
- en: In SaaS applications, ensuring the security and compliance of your software
    is of paramount importance, as it involves handling sensitive data and meeting
    industry-specific regulations. By implementing rigorous security measures and
    compliance checks within your CI/CD pipeline, you can safeguard your application
    and its users while adhering to the required standards.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在SaaS应用程序中，确保软件的安全性和合规性至关重要，因为它涉及处理敏感数据并满足行业特定的法规。通过在CI/CD管道中实施严格的安全措施和合规性检查，您可以在遵守所需标准的同时保护应用程序及其用户。
- en: 'To incorporate security and compliance into your CI/CD pipeline, consider the
    following best practices:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 要将安全和合规措施纳入你的CI/CD管道，请考虑以下最佳实践：
- en: '**Automate security testing**: Integrate automated security testing tools,
    such as **static application security testing** (**SAST**) and **dynamic application
    security testing** (**DAST**), into your pipeline. These tools help identify vulnerabilities
    and potential security risks in your code, enabling you to address them before
    they reach production.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化安全测试**：将自动化安全测试工具，如**静态应用安全测试**（SAST）和**动态应用安全测试**（DAST），集成到你的管道中。这些工具有助于识别代码中的漏洞和潜在的安全风险，使你能够在它们达到生产环境之前解决这些问题。'
- en: '**Implement secure coding practices**: Encourage your development team to follow
    secure coding best practices and guidelines. This includes adhering to the principles
    of least privilege, input validation, and secure data storage. You can also integrate
    code analysis tools into your pipeline to enforce these practices and identify
    potential security issues.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实施安全的编码实践**：鼓励你的开发团队遵循安全的编码最佳实践和指南。这包括遵守最小权限原则、输入验证和安全的存储数据。你还可以将代码分析工具集成到你的管道中，以强制执行这些实践并识别潜在的安全问题。'
- en: '**Monitor and audit your pipeline**: Regularly monitor and audit your CI/CD
    pipeline to ensure that it remains secure and compliant. This includes checking
    for unauthorized access, tracking changes to your pipeline configuration, and
    reviewing security logs. Implementing access controls and role-based permissions
    can also help prevent unauthorized modifications to your pipeline.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控和审计你的管道**：定期监控和审计你的CI/CD管道，以确保它保持安全和合规。这包括检查未经授权的访问、跟踪管道配置的变化以及审查安全日志。实施访问控制和基于角色的权限也可以帮助防止对管道的未经授权修改。'
- en: '**Manage secrets and credentials securely**: Store sensitive data, such as
    API keys, passwords, and tokens, securely by using secret management tools or
    secure storage services. Avoid embedding these credentials in your code or configuration
    files, and ensure that they are encrypted both at rest and in transit.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全地管理秘密和凭证**：通过使用秘密管理工具或安全存储服务，安全地存储敏感数据，如API密钥、密码和令牌。避免将这些凭证嵌入到你的代码或配置文件中，并确保它们在静态和传输过程中都得到加密。'
- en: '**Perform regular vulnerability scans and updates**: Keep your CI/CD infrastructure
    up-to-date by regularly scanning for vulnerabilities and applying necessary patches.
    This includes updating your build tools, dependencies, and runtime environments
    to mitigate the risk of known security issues.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定期进行漏洞扫描和更新**：通过定期扫描漏洞并应用必要的补丁，保持你的CI/CD基础设施的最新状态。这包括更新你的构建工具、依赖项和运行时环境，以减轻已知安全问题的风险。'
- en: '**Compliance checks**: Incorporate automated compliance checks into your pipeline
    to ensure that your application meets the required industry standards and regulations.
    This may involve validating your application against predefined compliance policies
    or integrating with specialized compliance tools.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**合规性检查**：将自动合规性检查纳入你的管道，以确保你的应用程序符合所需的行业标准法规。这可能涉及将你的应用程序与预定义的合规性策略进行验证或与专门的合规性工具集成。'
- en: By incorporating security and compliance measures into your CI/CD pipeline,
    you can proactively address potential risks and maintain a high level of trust
    in your SaaS application. This not only protects your users but also ensures that
    your application remains reliable and compliant with industry standards.Top of
    Form
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将安全和合规措施纳入你的CI/CD管道，你可以主动应对潜在风险，并保持对你SaaS应用程序的高度信任。这不仅保护了你的用户，还确保了你的应用程序保持可靠并符合行业标准。
- en: Summary
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In summary, this chapter covered the essential concepts and best practices for
    implementing CI/CD in SaaS applications. We explored the benefits of CI/CD in
    enhancing the development life cycle and improving the quality of SaaS apps. We
    discussed various CI/CD pipelines, tools, and factors to consider when choosing
    a CI/CD tool, emphasizing the importance of building a flexible and adaptable
    process.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 总结，本章涵盖了在SaaS应用程序中实施CI/CD的基本概念和最佳实践。我们探讨了CI/CD在增强开发周期和提高SaaS应用程序质量方面的好处。我们讨论了各种CI/CD管道、工具以及在选择CI/CD工具时需要考虑的因素，强调了构建灵活和适应性强的流程的重要性。
- en: We examined the configuration of CI/CD pipelines, including source control integration,
    build triggers and agents, defining build tasks and stages, release triggers and
    environments, deploying to multiple tenants, and incorporating approvals and gates
    for quality control. We also highlighted the value of containerization in SaaS
    applications, discussing the use of Docker and container orchestration tools to
    manage and deploy containerized microservices.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们检查了CI/CD管道的配置，包括源代码控制集成、构建触发器和代理、定义构建任务和阶段、发布触发器和环境、部署到多个租户以及纳入质量控制的批准和门控。我们还强调了容器化在SaaS应用中的价值，讨论了使用Docker和容器编排工具来管理和部署容器化微服务。
- en: We delved into upgrading SaaS microservice applications, discussing the importance
    of a well-planned upgrade strategy and various zero-downtime deployment techniques,
    such as blue-green deployment, canary releases, and rolling updates. We addressed
    the challenges of managing database schema changes and the need for monitoring
    and rollback strategies for failed upgrades.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们深入探讨了升级SaaS微服务应用，讨论了良好规划升级策略的重要性以及各种零停机部署技术，如蓝绿部署、金丝雀发布和滚动更新。我们还解决了管理数据库模式变更的挑战以及失败升级的监控和回滚策略的需求。
- en: Finally, we provided best practices and tips for CI/CD in SaaS applications,
    emphasizing the importance of automation and testing, ensuring security and compliance,
    scaling CI/CD pipelines for large-scale applications, and continuously monitoring
    and optimizing the pipeline. By following the guidance presented in this chapter,
    you can build efficient and effective CI/CD pipelines that support the development
    and deployment of high-quality, scalable, and reliable SaaS applications.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们提供了SaaS应用中CI/CD的最佳实践和技巧，强调了自动化和测试的重要性，确保安全性和合规性，为大规模应用扩展CI/CD管道，并持续监控和优化管道。通过遵循本章中提供的指导，您可以构建高效且有效的CI/CD管道，以支持高质量、可扩展和可靠的SaaS应用的开发和部署。
- en: In the next chapter, we’ll look into how to scale your SaaS applications.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何扩展您的SaaS应用。
- en: Further reading
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Best Practices for SaaS Businesses: [https://www.missioncloud.com/blog/five-best-practices-for-saas-businesses-deploying-devops-as-your-secret-weapon](https://www.missioncloud.com/blog/five-best-practices-for-saas-businesses-deploying-devops-as-your-secret-weapon)'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SaaS企业的最佳实践：[https://www.missioncloud.com/blog/five-best-practices-for-saas-businesses-deploying-devops-as-your-secret-weapon](https://www.missioncloud.com/blog/five-best-practices-for-saas-businesses-deploying-devops-as-your-secret-weapon)
- en: 'CI/CD baseline architecture with Azure Pipelines: [https://learn.microsoft.com/en-us/azure/architecture/example-scenario/apps/devops-dotnet-baseline](https://learn.microsoft.com/en-us/azure/architecture/example-scenario/apps/devops-dotnet-baseline)'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Azure Pipelines的CI/CD基准架构：[https://learn.microsoft.com/en-us/azure/architecture/example-scenario/apps/devops-dotnet-baseline](https://learn.microsoft.com/en-us/azure/architecture/example-scenario/apps/devops-dotnet-baseline)
- en: 'How to build a CI/CD pipeline with GitHub Actions in four simple steps: [https://github.blog/2022-02-02-build-ci-cd-pipeline-github-actions-four-steps/](https://github.blog/2022-02-02-build-ci-cd-pipeline-github-actions-four-steps/)'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何用四个简单步骤使用GitHub Actions构建CI/CD管道：[https://github.blog/2022-02-02-build-ci-cd-pipeline-github-actions-four-steps/](https://github.blog/2022-02-02-build-ci-cd-pipeline-github-actions-four-steps/)
- en: What is Jenkins? [https://phoenixnap.com/kb/what-is-jenkins](https://phoenixnap.com/kb/what-is-jenkins)
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins是什么？[https://phoenixnap.com/kb/what-is-jenkins](https://phoenixnap.com/kb/what-is-jenkins)
- en: What is CI/CD? [https://www.synopsys.com/glossary/what-is-cicd.html](https://www.synopsys.com/glossary/what-is-cicd.html)
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CI/CD是什么？[https://www.synopsys.com/glossary/what-is-cicd.html](https://www.synopsys.com/glossary/what-is-cicd.html)
- en: 'DevOps: [https://aws.amazon.com/devops/what-is-devops/](https://aws.amazon.com/devops/what-is-devops/)'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps：[https://aws.amazon.com/devops/what-is-devops/](https://aws.amazon.com/devops/what-is-devops/)
- en: Questions
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What are the key benefits of implementing CI/CD in SaaS applications?
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实施CI/CD在SaaS应用中的关键好处是什么？
- en: How can containerization, such as Docker, improve the development and deployment
    of SaaS apps?
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何通过容器化（如Docker）改进SaaS应用的开发和部署？
- en: Which zero-downtime deployment techniques can be used for upgrading SaaS microservice
    applications?
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪些零停机部署技术可以用于升级SaaS微服务应用？
- en: What factors should you consider when choosing a CI/CD tool for your SaaS application?
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择CI/CD工具时，您应该考虑哪些因素？
- en: How can you ensure security and compliance in your SaaS CI/CD processes?
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您如何确保SaaS CI/CD过程中的安全性和合规性？
- en: Why is monitoring and rollback planning essential for handling failed upgrades
    in SaaS applications?
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么监控和回滚计划对于处理 SaaS 应用程序中的失败升级至关重要？
- en: What are some best practices for scaling CI/CD pipelines to accommodate large-scale
    SaaS apps?
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 扩展 CI/CD 管道以适应大规模 SaaS 应用程序的最佳实践有哪些？
