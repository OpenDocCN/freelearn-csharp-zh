- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Building a Weather App as a Progressive Web App (PWA)
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将天气应用构建为渐进式网络应用（PWA）
- en: As web developers, we develop amazing web apps of all kinds, but until recently
    there has been a divide between what a web app can do versus what a native app
    can do. A new class of apps called **Progressive Web Apps** (**PWAs**) is helping
    to bridge that divide by enabling us to add native-like capabilities, reliability,
    and installability to our web apps. A PWA is a web application that takes advantage
    of native app features while retaining all the features of a web app.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 作为Web开发者，我们开发了各种类型的精彩Web应用，但直到最近，Web应用能做什么与原生应用能做什么之间一直存在分歧。一类名为**渐进式网络应用**（**PWAs**）的新应用类别正在帮助我们弥合这一分歧，通过使我们能够向Web应用添加类似原生的功能、可靠性和可安装性。PWA是一种利用原生应用功能的同时保留Web应用所有功能的Web应用。
- en: In this chapter, we will learn what defines a PWA, as well as how to create
    a PWA by adding a **manifest file** and a **service worker** to an existing web
    application.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习什么定义了PWA，以及如何通过向现有Web应用添加**清单文件**和**服务工作者**来创建PWA。
- en: The project that we create in this chapter will be a local 5-day weather forecast
    application that can be installed and run as a native application on Windows,
    macOS, iPhones, Android phones, and so on and can be distributed through the various
    app stores. We will use JavaScript’s **Geolocation API** to obtain the location
    of the device and the **OpenWeather One Call API** to fetch the weather forecast
    for that location. We will convert the application into a PWA by adding a manifest
    file and a service worker. The service worker will use the **CacheStorage API**
    to cache information so that the PWA can work offline.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中创建的项目将是一个本地5天天气预报应用，它可以作为原生应用安装在Windows、macOS、iPhone、Android手机等设备上，并且可以通过各种应用商店进行分发。我们将使用JavaScript的**地理位置API**来获取设备的地理位置，并使用**OpenWeather
    One Call API**来获取该位置的天气预报。我们将通过添加清单文件和服务工作者将应用转换为PWA。服务工作者将使用**CacheStorage API**来缓存信息，以便PWA可以在离线状态下工作。
- en: Native app, am I?
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原生应用，我是吗？
- en: ''
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Web application, am I?
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Web应用，我是吗？
- en: ''
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: PWA!
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: PWA！
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Understanding PWAs
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解PWA
- en: Working with manifest files
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与清单文件（manifest files）一起工作
- en: Working with service workers
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与服务工作者一起工作
- en: Using the `CacheStorage` API
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`CacheStorage` API
- en: Using the `Geolocation` API
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`Geolocation` API
- en: Using the `OpenWeather One Call` API
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`OpenWeather One Call` API
- en: Creating a PWA
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建PWA
- en: Technical requirements
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To complete this project, you need to have Visual Studio 2022 installed on your
    PC. For instructions on how to install the free Community Edition of Visual Studio
    2022, refer to *Chapter 1*, *Introduction to Blazor WebAssembly*.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成此项目，您需要在您的PC上安装Visual Studio 2022。有关如何安装Visual Studio 2022免费社区版的说明，请参阅*第1章*，*Blazor
    WebAssembly简介*。
- en: We will be using an external weather API to access the weather forecast data
    for our project. The API that we will be using is the `OpenWeather One Call` API.
    This is a free API that is provided by `OpenWeather` ([https://openweathermap.org](https://openweathermap.org)).
    To get started with this API, you need to create an account and obtain an API
    key. If you do not want to create an account, you can use the `weather.json` file
    that we have provided in the GitHub repository for this chapter.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个外部天气API来访问我们项目的天气预报数据。我们将使用的API是`OpenWeather One Call` API。这是一个由`OpenWeather`提供的免费API（[https://openweathermap.org](https://openweathermap.org)）。要开始使用此API，您需要创建一个账户并获取一个API密钥。如果您不想创建账户，可以使用我们提供的`weather.json`文件，该文件位于本章GitHub仓库中。
- en: 'The source code for this chapter is available in the following GitHub repository:
    [https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter06](https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter06).'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可在以下GitHub仓库中找到：[https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter06](https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter06).
- en: 'The Code in Action video is available here: [https://packt.link/Ch6](https://packt.link/Ch6).'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 代码实战视频在此处可用：[https://packt.link/Ch6](https://packt.link/Ch6).
- en: Understanding PWAs
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解PWA（渐进式网络应用）
- en: A PWA is a web application that uses modern web capabilities to deliver a native
    app-like experience to users. PWAs look and feel like native applications because
    they run in their own app window instead of the browser’s window, and they can
    be launched from the **Start** menu or taskbar. PWAs offer an offline experience
    and load instantly due to their use of caching. They can receive push notifications
    and are automatically updated in the background. Finally, although they do not
    require a listing in an app store for distribution, they can be distributed through
    the various app stores.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: PWA是一种使用现代Web功能向用户提供类似原生应用程序体验的Web应用。PWA看起来和感觉就像原生应用程序，因为它们在自己的应用程序窗口中运行，而不是在浏览器的窗口中，并且可以从**开始**菜单或任务栏启动。PWA提供离线体验，并且由于使用缓存而可以即时加载。它们可以接收推送通知，并在后台自动更新。最后，尽管它们不需要在应用商店中列出以进行分发，但可以通过各种应用商店进行分发。
- en: Many large companies, such as Pinterest, Starbucks, Trivago, and Twitter, have
    embraced PWAs. Companies are drawn to PWAs because they can develop them once
    and use them everywhere.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 许多大型公司，如Pinterest、星巴克、Trivago和Twitter，都采用了PWA。公司被PWA吸引，因为它们可以一次开发，然后到处使用。
- en: A PWA feels like a native application due to a combination of technologies.
    To convert a web app into a PWA, it must use HTTPS and include both a manifest
    file and a service worker.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: PWA的感觉就像是一个原生应用程序，这是由于一系列技术的结合。要将Web应用转换为PWA，它必须使用HTTPS，并包含清单文件和服务工作者。
- en: HTTPS
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTTPS
- en: To be converted into a PWA, the web app must use HTTPS and must be served over
    a secure network. This should not be a problem since most browsers will no longer
    serve pages over HTTP. Therefore, even if you are not planning to convert a Blazor
    WebAssembly app into a PWA, you should always be using HTTPS.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要转换为PWA，Web应用必须使用HTTPS，并且必须在安全网络上提供服务。这不应该成为问题，因为大多数浏览器将不再通过HTTP提供服务。因此，即使你并没有计划将Blazor
    WebAssembly应用转换为PWA，你也应该始终使用HTTPS。
- en: '**TIP**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: A **Secure Sockets Layer** (**SSL**) certificate is required to enable HTTPS.
    A great source for free SSL certificates is **Let’s Encrypt** ([https://letsencrypt.org](https://letsencrypt.org)).
    It is a free, automated, and open **Certificate Authority** (**CA**).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用HTTPS，需要一个**安全套接字层**（**SSL**）证书。免费SSL证书的一个很好的来源是**Let’s Encrypt**（[https://letsencrypt.org](https://letsencrypt.org)）。它是一个免费、自动和开放的**证书授权机构**（**CA**）。
- en: Manifest files
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 清单文件
- en: A manifest file is a simple **JavaScript Object Notation** (**JSON**) document
    that contains an application’s name, defaults, and startup parameters for when
    a web application is launched. It describes how an application looks and feels.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 清单文件是一个简单的**JavaScript对象表示法**（**JSON**）文档，它包含应用程序的名称、默认值和Web应用程序启动时的启动参数。它描述了应用程序的外观和感觉。
- en: 'This is an example of a simple manifest file:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单清单文件的示例：
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: A manifest file must include the name of the application and at least one icon.
    We will look more closely at manifest files in the next section.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 清单文件必须包含应用程序的名称和至少一个图标。我们将在下一节更详细地探讨清单文件。
- en: Service workers
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务工作者
- en: A service worker is a JavaScript file that defines the offline experience for
    the PWA. It intercepts and controls how a web browser handles its network requests
    and asset caching.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 服务工作者是一个JavaScript文件，它定义了PWA的离线体验。它拦截并控制Web浏览器如何处理其网络请求和资产缓存。
- en: 'This is the content of the `service-worker.js` file that is included in the
    `Blazor WebAssembly PWA` project template provided by Microsoft:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这是包含在Microsoft提供的“Blazor WebAssembly PWA”项目模板中的`service-worker.js`文件的内容：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: It is only one line of code and—as you can see—it does not actually do anything.
    However, it counts as a service worker and is all that is technically needed to
    convert an application into a PWA. We will take a closer look at more robust service
    workers later in this chapter.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一行代码，并且——正如你所看到的——它实际上并没有做什么。然而，它算作一个服务工作者，并且是转换应用程序为PWA所需的所有技术需求。我们将在本章后面更详细地探讨更健壮的服务工作者。
- en: A PWA is a web app that can be installed on a device like a native application.
    If a web app uses HTTPS and includes both a manifest file and a service worker,
    it can be converted into a PWA. Let’s take a closer look at manifest files.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: PWA是一种可以像原生应用程序一样安装在设备上的Web应用。如果一个Web应用使用HTTPS并包含清单文件和服务工作者，它可以被转换为PWA。让我们更详细地看看清单文件。
- en: Working with manifest files
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与清单文件一起工作
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here is a more robust manifest file that includes more fields than the previous
    example:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个比上一个示例更健壮的清单文件，它包含比之前示例更多的字段：
- en: '**manifest.json**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**manifest.json**'
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As mentioned earlier, a manifest file must include the name of the application
    and at least one icon. Beyond that, everything else is optional, although we highly
    recommend that you include at least the `description`, `short_name`, and `start_url`
    in your manifest files.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，清单文件必须包含应用程序的名称和至少一个图标。除此之外，其他所有内容都是可选的，尽管我们强烈建议您在清单文件中至少包含`description`、`short_name`和`start_url`。
- en: 'These are the keys used in the preceding `manifest.json` file:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是前面`manifest.json`文件中使用的键：
- en: '`dir`: The base direction of `name`, `short_name`, and `description`. It is
    either `ltr`, `rtl`, or `auto`.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dir`: `name`、`short_name`和`description`的基本方向。它可以是`ltr`、`rtl`或`auto`。'
- en: '`lang`: The primary language of `name`, `short_name`, and `description`.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lang`: `name`、`short_name`和`description`的主要语言。'
- en: '`name`: The name of the app. The maximum length is 45 characters.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`: 应用的名称。最大长度为45个字符。'
- en: '`short_name`: The short name of the app. The maximum length is 12 characters.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`short_name`: 应用的简称。最大长度为12个字符。'
- en: '`scope`: The navigation scope of the app.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scope`: 应用的导航范围。'
- en: '`display`: The way the app is displayed. The valid options are `fullscreen`,
    `standalone`, `minimal-UI`, or `browser`.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`display`: 应用显示的方式。有效的选项有`fullscreen`、`standalone`、`minimal-UI`或`browser`。'
- en: '`start_url`: The **Uniform Resource Locator** (**URL**) of the app.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`start_url`: 应用的**统一资源定位符**（**URL**）。'
- en: '`background_color`: The color used for the app’s background during installation
    on the splash screen.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`background_color`: 应用在启动屏幕上安装时使用的背景颜色。'
- en: '`theme_color`: The default theme color.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`theme_color`: 默认的主题颜色。'
- en: '`description`: A short description of the app.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`description`: 应用的简短描述。'
- en: '`orientation`: The default screen orientation. Some of the options are `any`,
    `natural`, `landscape`, and `portrait`.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`orientation`: 默认屏幕方向。一些选项包括`any`、`natural`、`landscape`和`portrait`。'
- en: '`related_applications`: Any related apps that the developer wishes to highlight.
    These are usually native apps.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`related_applications`: 开发者希望突出的任何相关应用。这些通常是原生应用。'
- en: '`prefer_related_applications`: A value notifying the user agent that the related
    application is preferred over a web app.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`prefer_related_applications`: 一个值，通知用户代理相关应用比网页应用更受欢迎。'
- en: '`icons`: One or more images used by the app. This is usually the largest section
    of the file because many devices prefer images of different sizes.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`icons`: 应用使用的一个或多个图片。这通常是文件中最大的部分，因为许多设备更喜欢不同尺寸的图片。'
- en: '`url`: The address of the app.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`url`: 应用的地址。'
- en: '`screenshots`: An array of images of the app in action.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`screenshots`: 应用运行时的一组图片。'
- en: '`categories`: An array of strings representing the categories that the app
    belongs to.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`categories`: 表示应用所属类别的字符串数组。'
- en: The preceding list does not include all the keys that can be included in a `manifest.json`
    file. Also, more keys are still being added every year.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 上述列表并未包括可以在`manifest.json`文件中包含的所有键。此外，每年仍在添加更多键。
- en: A manifest file controls how the PWA appears to the user and is required to
    convert a web app into a PWA. A service worker is also required to convert a web
    app into a PWA. Let’s take a closer look at service workers.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一个清单文件控制了PWA在用户面前的显示方式，并且是转换网页应用为PWA所必需的。还需要一个服务工作者来将网页应用转换为PWA。让我们更详细地看看服务工作者。
- en: Working with service workers
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与服务工作者一起工作
- en: Service workers provide the magic behind PWAs. They are used for caching, background
    syncing, and push notifications. A service worker is a JavaScript file that intercepts
    and modifies navigation and resource requests. It gives us full control over which
    resources are cached and how our PWA behaves in different situations.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 服务工作者提供了PWA背后的魔法。它们用于缓存、后台同步和推送通知。服务工作者是一个JavaScript文件，它拦截并修改导航和资源请求。它使我们能够完全控制哪些资源被缓存以及我们的PWA在不同情况下的行为。
- en: A service worker is simply a script that your browser runs in the background.
    It is separate from the app and has no **Document Object Model** (**DOM**) access.
    It runs on a different thread than the thread used by the main JavaScript that
    powers your app, so it is not blocking. It is designed to be fully asynchronous.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 服务工作者只是一个在浏览器后台运行的脚本。它与应用分离，没有**文档对象模型**（**DOM**）访问。它运行在与为您的应用提供动力的主JavaScript不同的线程上，因此它不会阻塞。它被设计成完全异步的。
- en: Service worker life cycle
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务工作者生命周期
- en: 'When working with service workers, it is very important to understand their
    life cycle because offline support can add a significant amount of complexity
    to the web app. There are three steps in the life cycle of a service worker—**install,
    activate, and** **fetch**, as illustrated in the following diagram:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在与服务工作者一起工作时，了解它们的生命周期非常重要，因为离线支持可以为网络应用增加大量的复杂性。服务工作者生命周期中有三个步骤——**安装、激活和**
    **获取**，如下面的图所示：
- en: '![](img/B18471_06_01.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18471_06_01.png)'
- en: 'Figure 6.1: Service worker life cycle'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1：服务工作者生命周期
- en: Install
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装
- en: During the install step, the service worker usually caches some of the static
    assets of the website, such as a `You are offline` splash screen. If the files
    are cached successfully, the service worker is installed. However, if any of the
    files fail to download and cache, the service worker is not installed and does
    not move to the activate step.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装步骤期间，服务工作者通常会缓存网站的一些静态资源，例如一个`您已离线`的启动屏幕。如果文件成功缓存，则服务工作者已安装。然而，如果任何文件下载和缓存失败，则服务工作者未安装，并且不会移动到激活步骤。
- en: If the service worker is not successfully installed, it will try to be installed
    the next time the web app is run. Therefore, the developer can be assured that
    if the service worker has been successfully installed, the cache contains all
    the static assets that were designated to be cached. After the install step is
    successfully completed, the activate step is initiated.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果服务工作者没有成功安装，它将在下次运行网络应用时尝试安装。因此，开发者可以确信，如果服务工作者已经成功安装，缓存将包含所有被指定为缓存的静态资源。在安装步骤成功完成后，将启动激活步骤。
- en: Activate
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 激活
- en: During the activate step, the service worker handles the management of the old
    caches. Since a previous installation may have created a cache, this is the app’s
    opportunity to delete it. After the activate step is successfully completed, the
    service worker is ready to begin processing the fetch events.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在激活步骤期间，服务工作者处理旧缓存的管理工作。由于之前的安装可能已创建缓存，这是应用程序删除缓存的机会。在激活步骤成功完成后，服务工作者准备开始处理获取事件。
- en: Fetch
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取
- en: During the fetch step, the service worker controls all the pages that fall under
    its scope. It handles all the fetch events that occur when a network request is
    made from the PWA. The service worker will continue to fetch until it is terminated.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在获取步骤期间，服务工作者控制其范围内的所有页面。它处理从PWA发起的网络请求时发生的所有获取事件。服务工作者将继续获取，直到它被终止。
- en: Updating a service worker
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新服务工作者
- en: To update the service worker that is running for our website, we need to update
    the service worker’s JavaScript file. Each time a user navigates to our site,
    the browser downloads the current service worker and compares it with the installed
    service worker. If they are different, it will attempt to replace the old service
    worker.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更新为我们网站运行的服务工作者，我们需要更新服务工作者的JavaScript文件。每次用户导航到我们的网站时，浏览器都会下载当前的服务工作者并将其与已安装的服务工作者进行比较。如果它们不同，它将尝试替换旧服务工作者。
- en: However, this does not happen immediately. The new service worker must wait
    until the old service worker is no longer in control before it can be activated.
    The old service worker will remain in control until all the open pages are closed.
    When the new service worker takes control, its activate event will fire.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这不会立即发生。新服务工作者必须等待旧服务工作者不再控制，然后才能激活。旧服务工作者将保持控制，直到所有打开的页面都关闭。当新服务工作者接管控制时，其激活事件将触发。
- en: Cache management is handled during the activate callback. The reason we manage
    the cache during the activate callback is that if we were to wipe out any old
    caches in the install step, the old service worker (which has control of all the
    current pages) would suddenly stop being able to serve files from that cache.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存管理在激活回调期间处理。我们在激活回调期间管理缓存的原因是，如果我们要在安装步骤中清除任何旧缓存，那么控制所有当前页面的旧服务工作者将突然无法从该缓存中提供文件。
- en: 'The following screenshot shows a service worker that is **waiting to activate**:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了一个**等待激活**的服务工作者：
- en: '![Graphical user interface, application  Description automatically generated](img/B18471_06_02.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序描述自动生成](img/B18471_06_02.png)'
- en: 'Figure 6.2: Service worker waiting to activate'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.2：服务工作者等待激活
- en: '**TIP**'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: The service worker will not be activated until the user has navigated away from
    the app in all tabs. Reloading the tab will not suffice, even if the app is only
    running in that one tab. However, you can activate a service worker that is **waiting
    to activate** by clicking the **skipWaiting** link. The **skipWaiting** link is
    highlighted in *Figure 6.2*.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 服务工作者将在用户在所有标签页中离开应用后才被激活。即使应用只在该一个标签页中运行，重新加载标签页也不足以激活服务工作者。然而，你可以通过点击**跳过等待**链接来激活一个**等待激活**的服务工作者。**跳过等待**链接在*图6.2*中被突出显示。
- en: Types of service workers
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务工作者的类型
- en: 'There are many different types of service workers, from the ridiculously simple
    to the more complex. The following diagram shows some of the different types of
    service workers, ordered from simple to complex:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 服务工作者有许多不同类型，从极其简单到更复杂。以下图表显示了不同类型的服务工作者，按从简单到复杂的顺序排列：
- en: '![A screenshot of a computer  Description automatically generated with low
    confidence](img/B18471_06_03.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![计算机截图  描述由低置信度自动生成](img/B18471_06_03.png)'
- en: 'Figure 6.3: Types of service workers from simple to complex'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.3：从简单到复杂的服务工作者类型
- en: Offline page
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 离线页面
- en: This is the simplest type of functioning service worker to create. All we need
    to create this type of service worker is an HTML page that indicates an application
    is offline. Whenever an application is unable to connect to a network, we simply
    display that HTML page.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最简单的一种功能服务工作者创建方式。我们只需要创建一个HTML页面来指示应用处于离线状态。每当应用无法连接到网络时，我们只需显示该HTML页面。
- en: Offline copy of pages
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 页面离线副本
- en: With this type of service worker, we store a copy of each page in the cache
    as our visitors view them. When the application is offline, it serves the pages
    from the cache. This approach may only work for applications with a limited number
    of pages because if a page that a user wants to view has not yet been viewed by
    that user, it will not yet be in the cache and the app will fail.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种类型的服务工作者，我们将每个页面在缓存中的副本存储为我们访客查看它们时的状态。当应用离线时，它从缓存中提供页面。这种方法可能只适用于页面数量有限的应用，因为如果用户想要查看的页面尚未被该用户查看，它将不会在缓存中，应用将失败。
- en: Offline copy with offline page
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 离线页面与离线副本
- en: This type of service worker is an improved version of the offline copy of pages
    service worker. It combines the two previous types of service workers. With this
    type of service worker, we store a copy of each page in the cache as our visitors
    view them. When an application is offline, it serves the pages from the cache.
    If a page that a user wants to view is not in the cache, we display the HTML page
    that indicates the application is offline.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的服务工作者是页面离线副本服务工作者的改进版本。它结合了前两种服务工作者类型。使用这种类型的服务工作者，我们存储每个页面的缓存副本，当我们的访客查看它们时。当应用离线时，它从缓存中提供页面。如果用户想要查看的页面不在缓存中，我们显示指示应用离线的HTML页面。
- en: Cache-first network
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缓存优先网络
- en: This type of service worker always uses the cache first. If the requested page
    is in the cache, it serves that page before it requests the page from the server
    and updates the cache with the requested page. Using this service worker, we always
    serve the version of the page that is in the cache before requesting the page
    from the server, thus users are served the same data whether they are online or
    offline.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的服务工作者始终首先使用缓存。如果请求的页面在缓存中，它会在从服务器请求页面并更新缓存之前提供该页面。使用这种服务工作者，我们始终在请求页面之前提供缓存中的页面版本，因此无论用户在线还是离线，用户都会收到相同的数据。
- en: '**IMPORTANT NOTE**'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: The cache-first network service worker is the type of service worker that is
    preferred by Microsoft.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存优先的网络服务工作者是微软推荐的服务工作者类型。
- en: Advanced caching
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 高级缓存
- en: This type of service worker is a combination of each of the preceding types.
    With this type of service worker, we designate different files and routes to be
    cached using different rules. For example, some data, such as stock prices, should
    never be cached, while other data that does not change very often should be cached.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的服务工作者是前述每种类型的组合。使用这种类型的服务工作者，我们使用不同的规则指定不同的文件和路由进行缓存。例如，某些数据，如股价，永远不应该被缓存，而其他不经常变化的数据应该被缓存。
- en: Background sync
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 背景同步
- en: This is the most complex type of service worker. It allows a user to continue
    to use an application to add and edit data when they are offline. Then, when they
    are back online, the application will sync their data with the network.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最复杂的服务工作者类型。它允许用户在离线时继续使用应用程序添加和编辑数据。然后，当他们重新上线时，应用程序将同步他们的数据与网络。
- en: This is not a complete list of all the different types of service workers that
    are available. However, it should give you an idea of the power and flexibility
    of service workers and the importance of caching. All the service workers on our
    list rely on the `CacheStorage` API for caching.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是所有可用服务工作者类型的完整列表。然而，它应该能让你了解服务工作者功能和灵活性的强大，以及缓存的重要性。我们列表中的所有服务工作者都依赖于 `CacheStorage`
    API 进行缓存。
- en: Using the CacheStorage API
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 `CacheStorage` API
- en: The `CacheStorage` API is used to cache `request/response` object pairs, where
    the `request` objects are the keys and the `response` objects are the values.
    It was designed to be used by service workers to provide offline functionality.
    A `caches` object is an instance of `CacheStorage`. It is a global object that
    is located in the `window` object.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`CacheStorage` API 用于缓存 `request/response` 对象对，其中 `request` 对象是键，`response`
    对象是值。它被设计为供服务工作者使用，以提供离线功能。一个 `caches` 对象是 `CacheStorage` 的实例。它是一个位于 `window`
    对象中的全局对象。'
- en: 'We can use the following code to test if `CacheStorage` is available on the
    browser:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下代码来测试浏览器上是否可用 `CacheStorage`：
- en: '[PRE5]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: A `caches` object is used to maintain a list of caches for a particular web
    app. Caches cannot be shared with other web apps and they are isolated from the
    browser’s HTTP cache. They are entirely managed through the JavaScript that we
    write.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`caches` 对象用于维护特定 Web 应用程序的缓存列表。缓存不能与其他 Web 应用程序共享，并且它们与浏览器的 HTTP 缓存隔离。它们完全通过我们编写的
    JavaScript 进行管理。'
- en: 'These are some of the methods of `CacheStorage`:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是 `CacheStorage` 的一些方法：
- en: '`delete(cacheName`): This method deletes the indicated cache and returns `true`.
    If the indicated cache is not found, it returns `false`.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`delete(cacheName)`: 此方法删除指定的缓存并返回 `true`。如果指定的缓存未找到，则返回 `false`。'
- en: '`has(cacheName)`: This method returns `true` if the indicated cache exists
    and `false` otherwise.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`has(cacheName)`: 如果指定的缓存存在，则此方法返回 `true`，否则返回 `false`。'
- en: '`keys`: This method returns a string array of the names of all the caches.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`keys`: 此方法返回一个包含所有缓存名称的字符串数组。'
- en: '`open(cacheName)`: This method opens the indicated cache. If it does not exist,
    it is created and then opened.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`open(cacheName)`: 此方法打开指定的缓存。如果它不存在，则创建并打开。'
- en: 'When we open an instance of `CacheStorage`, a `Cache` object is returned. These
    are some of the methods of a `Cache` object:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们打开 `CacheStorage` 的一个实例时，会返回一个 `Cache` 对象。以下是 `Cache` 对象的一些方法：
- en: '`add(request)`: This method takes a request and adds the resulting response
    to the cache.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`add(request)`: 此方法接受一个请求，并将生成的响应添加到缓存中。'
- en: '`addAll(requests)`: This method takes an array of requests and adds all the
    resulting responses to the cache.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`addAll(requests)`: 此方法接受一个请求数组，并将所有生成的响应添加到缓存中。'
- en: '`delete(request)`: This method returns `true` if it can find and delete the
    indicated request, and `false` otherwise.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`delete(request)`: 如果它能找到并删除指定的请求，则此方法返回 `true`，否则返回 `false`。'
- en: '`keys()`: This method returns an array of keys.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`keys()`: 此方法返回一个键数组。'
- en: '`match(request`): This method returns the response associated with the matching
    request.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`match(request)`: 此方法返回与匹配请求关联的响应。'
- en: '`put(request, response)`: This method adds the `request` and `response` pair
    to the cache.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`put(request, response)`: 此方法将 `request` 和 `response` 对添加到缓存中。'
- en: '**TIP**'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: A `Cache` object does not get updated unless we explicitly request it to be
    updated. Also, these objects do not expire. We need to delete them as they become
    obsolete.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 除非我们明确请求更新，否则 `Cache` 对象不会更新。此外，这些对象也不会过期。我们需要在它们变得过时后删除它们。
- en: Service workers use the `CacheStorage` API to allow the PWA to continue to function
    when it is offline. Next, we will explain how to use the **Geolocation API**.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 服务工作者使用 `CacheStorage` API 允许 PWA 在离线时继续运行。接下来，我们将解释如何使用 **Geolocation API**。
- en: Using the Geolocation API
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Geolocation API
- en: The `Geolocation` API for JavaScript provides a mechanism for us to obtain the
    location of a user. Using the `Geolocation` API, we can obtain the coordinates
    of a device that the browser is running on.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 的 `Geolocation` API 提供了一种机制，使我们能够获取用户的地理位置。使用 `Geolocation` API，我们可以获取浏览器正在运行的设备的坐标。
- en: The `Geolocation` API is accessed through a `navigator.geolocation` object.
    When we make a call to the `navigator.geolocation` object, the user’s browser
    asks the user for permission to access their location. If they accept, the browser
    uses the device’s positioning hardware, such as the **Global Positioning System**
    (**GPS**) on a smartphone, to determine its location.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`Geolocation` API 通过 `navigator.geolocation` 对象访问。当我们调用 `navigator.geolocation`
    对象时，用户的浏览器会请求用户允许访问其位置。如果他们接受，浏览器将使用设备的定位硬件，例如智能手机上的 **全球定位系统** (**GPS**)，来确定其位置。'
- en: 'Before we attempt to use the `navigator.geolocation` object, we should verify
    that it is supported by the browser. The following code tests for the presence
    of geolocation support on the browser:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们尝试使用 `navigator.geolocation` 对象之前，我们应该验证它是否被浏览器支持。以下代码测试浏览器是否支持地理位置：
- en: '[PRE6]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: For the project in this chapter, we will be using the `getCurrentPosition` method
    to retrieve the device’s location. This method uses two callback functions. The
    `success` callback function returns a `GeolocationPosition` object, while the
    `error` callback function returns a `GeolocationPositionError` object. If the
    user denies us access to their position, it will be reported in the `GeolocationPositionError`
    object.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章的项目，我们将使用 `getCurrentPosition` 方法来检索设备的地理位置。此方法使用两个回调函数。`success` 回调函数返回一个
    `GeolocationPosition` 对象，而 `error` 回调函数返回一个 `GeolocationPositionError` 对象。如果用户拒绝我们访问他们的位置，它将在
    `GeolocationPositionError` 对象中报告。
- en: 'These are the properties of the `GeolocationPosition` object:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是 `GeolocationPosition` 对象的属性：
- en: '`coords.latitude`: This property returns a double that represents the latitude
    of the device.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`coords.latitude`: 这个属性返回一个表示设备纬度的双精度值。'
- en: '`coords.longitude`: This property returns a double that represents the longitude
    of the device.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`coords.longitude`: 这个属性返回一个表示设备经度的双精度值。'
- en: '`coords.accuracy`: This property returns a double that represents the accuracy
    of the latitude and the longitude, expressed in meters.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`coords.accuracy`: 这个属性返回一个表示纬度和经度精度的双精度值，以米为单位。'
- en: '`coords.altitude`: This property returns a double that represents the altitude
    of the device.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`coords.altitude`: 这个属性返回一个表示设备海拔的双精度值。'
- en: '`coords.altitudeAccuracy`: This property returns a double that represents the
    accuracy of the altitude, expressed in meters.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`coords.altitudeAccuracy`: 这个属性返回一个表示海拔精度的双精度值，以米为单位。'
- en: '`coords.heading`: This property returns a double that represents the direction
    in which the device is heading, expressed in degrees. If the device is stationary,
    the value is NaN.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`coords.heading`: 这个属性返回一个表示设备前进方向的双精度值，以度为单位。如果设备处于静止状态，则该值为 NaN。'
- en: '`coords.speed`: This property returns a double that represents the speed of
    the device, expressed in meters per second.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`coords.speed`: 这个属性返回一个表示设备速度的双精度值，以米/秒为单位。'
- en: '`timestamp`: This property returns the date and time of the response.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timestamp`: 这个属性返回响应的日期和时间。'
- en: The `GeolocationPosition` object always returns the `coords.latitude`, `coords.longitude`,
    `coords.accuracy`, and `timestamp` properties. The other properties are only returned
    if they are available.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`GeolocationPosition` 对象始终返回 `coords.latitude`、`coords.longitude`、`coords.accuracy`
    和 `timestamp` 属性。其他属性仅在它们可用时返回。'
- en: By using JavaScript’s `Geolocation` API, we can determine the latitude and longitude
    of a device. We need this information to use the `OpenWeather` `One` `Call` API
    to request a local weather forecast for our project.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 JavaScript 的 `Geolocation` API，我们可以确定设备的纬度和经度。我们需要这些信息来使用 `OpenWeather`
    的 `One` `Call` API 为我们的项目请求本地天气预报。
- en: Using the OpenWeather One Call API
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 OpenWeather One Call API
- en: 'The data source for the project in this chapter is a free API provided by `OpenWeather`.
    It is called the `OpenWeather One Call` API ([https://openweathermap.org/api/one-call-api](https://openweathermap.org/api/one-call-api)).
    This API can return current, forecast, and historical weather data. We will be
    using it to access the local forecast for the next 5 days. This is the format
    of an API call using the `OpenWeather One Call` API:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 本章项目中数据源是一个由 `OpenWeather` 提供的免费 API。它被称为 `OpenWeather One Call` API ([https://openweathermap.org/api/one-call-api](https://openweathermap.org/api/one-call-api))。此
    API 可以返回当前、预报和历史天气数据。我们将使用它来获取未来 5 天的本地预报。这是使用 `OpenWeather One Call` API 进行 API
    调用的格式：
- en: '[PRE7]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'These are the parameters for the `OpenWeather One Call` API:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是 `OpenWeather One Call` API 的参数：
- en: '`lat`: Latitude. This parameter is required.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lat`: 纬度。此参数是必需的。'
- en: '`lon`: Longitude. This parameter is required.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`appid`: API key. This parameter is required. After you create an account,
    you can manage your API keys from the `API keys` tab.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`units`: Units of measurement. This is set to `Standard`, `Metric`, or `Imperial`.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`exclude`: Excluded data. This is used to simplify data that is returned. Since
    we will only be using the daily forecast, we will exclude current, per minute,
    and hourly data, and alerts for our project. This is a comma-delimited list.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lang`: Language of the output.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is a fragment of the response from the `OpenWeather One Call` API:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '**weather.json fragment**'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the preceding JSON fragment, we have highlighted the fields that we are using
    in this chapter’s project.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: This project uses version 2.5 of the `OpenWeather One Call` API. They have recently
    released version 3.0 of the API. There is a small fee to use the new version of
    the API if you make over 1,000 API calls in a day.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: The `OpenWeather One Call` API is a simple API that we will be using to obtain
    the daily forecast for a given location. Now, let’s get a quick overview of the
    project that we are going to build in this chapter.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: Creating a PWA
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will build a Blazor WebAssembly app to display a local 5-day
    weather forecast and then convert it into a PWA.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: The web app we will build uses JavaScript’s `Geolocation` API to determine the
    current latitude and longitude of the device. It uses the `OpenWeather One Call`
    API to obtain the local weather forecast and uses a variety of Razor components
    to display the weather forecast to the user. After we have completed the web app,
    we will convert it into a PWA by adding a logo, a manifest file, and a service
    worker. Finally, we will install, run, and uninstall the PWA.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a screenshot of the completed application:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B18471_06_04.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6.4: 5-Day Weather Forecast application'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: The build time for this project is approximately 90 minutes.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: Project overview
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A `WeatherForecast` project will be created by using Microsoft’s **Blazor WebAssembly
    App Empty** project template to create an empty Blazor WebAssembly project. First,
    we will use JavaScript interop with the `Geolocation` API to obtain the coordinates
    of the device. We will then use the `OpenWeather One Call` API to obtain a weather
    forecast for those coordinates. Next, we will create a couple of Razor components
    to display the forecast.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: To convert the web app into a PWA, we will add a logo, a manifest file, and
    an offline page service worker. After testing the service worker, we will install,
    run, and uninstall the PWA.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with the project
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to create a new Blazor WebAssembly app. We do this as follows:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: Open Visual Studio 2022.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create a new project** button.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Alt*+*S* to enter the **Search for templates** textbox.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `Blazor` and press the *Enter* key.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The following screenshot shows the **Blazor WebAssembly App Empty** project
    template.
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图显示了**Blazor WebAssembly App Empty**项目模板。
- en: '![Graphical user interface, text, application, chat or text message  Description
    automatically generated](img/B18471_06_05.png)'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形用户界面、文本、应用程序、聊天或文本消息  自动生成的描述](img/B18471_06_05.png)'
- en: 'Figure 6.5: Blazor WebAssembly App Empty project template'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.5：Blazor WebAssembly App Empty项目模板
- en: Select the **Blazor WebAssembly App Empty** project template and click the **Next**
    button.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Blazor WebAssembly App Empty**项目模板并点击**下一步**按钮。
- en: Enter `WeatherForecast` in the **Project name** textbox and click the **Next**
    button.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**项目名称**文本框中输入`WeatherForecast`并点击**下一步**按钮。
- en: 'This is a screenshot of the dialog used to configure our new project:'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是用于配置我们新项目的对话框截图：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_06_06.png)'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形用户界面、文本、应用程序、电子邮件  自动生成的描述](img/B18471_06_06.png)'
- en: 'Figure 6.6: Configure your new project dialog'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.6：配置新项目对话框
- en: '**TIP**'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**提示**'
- en: In the preceding example, we placed the `WeatherForecast` project into the `E:/Blazor`
    folder. However, the location of this project is not important.
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们将`WeatherForecast`项目放置在`E:/Blazor`文件夹中。然而，这个项目的位置并不重要。
- en: Select **.NET 7.0** as the version of the **Framework** to use.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**.NET 7.0**作为要使用的**框架**版本。
- en: Check the **Configure for HTTPS** checkbox.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 勾选**配置为HTTPS**复选框。
- en: Uncheck the **ASP.NET Core Hosted** checkbox.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消勾选**ASP.NET Core 承载**复选框。
- en: Uncheck the **Progressive Web Application** checkbox.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消勾选**渐进式Web应用**复选框。
- en: 'This is a screenshot of the dialog used to collect additional information about
    our new project:'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是用于收集有关我们新项目额外信息的对话框截图：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_06_07.png)'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形用户界面、文本、应用程序、电子邮件  自动生成的描述](img/B18471_06_07.png)'
- en: 'Figure 6.7: Additional information dialog'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.7：附加信息对话框
- en: '**IMPORTANT NOTE**'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: The reason that we are not checking the **Progressive Web Application** checkbox
    is that we will be transforming the application into a PWA as part of this project.
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们没有勾选**渐进式Web应用**复选框的原因是，我们将在这个项目中将应用转换为PWA。
- en: Click the **Create** button.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建**按钮。
- en: We have created an empty `WeatherForecast` Blazor WebAssembly project. Let’s
    get started by adding the JavaScript function for determining the location of
    the device.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个空的`WeatherForecast` Blazor WebAssembly项目。让我们通过添加用于确定设备位置的JavaScript函数来开始吧。
- en: Add JavaScript to determine our location
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加JavaScript以确定我们的位置
- en: 'We need to add the JavaScript function to determine our current latitude and
    longitude. We do this as follows:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要添加一个JavaScript函数来确定我们的当前纬度和经度。我们这样做如下：
- en: Right-click the `wwwroot` folder and select the **Add**, **New Folder** option
    from the menu.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`wwwroot`文件夹，从菜单中选择**添加**，**新建文件夹**选项。
- en: Name the new folder `scripts`.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新文件夹命名为`scripts`。
- en: Right-click the `scripts` folder and select the **Add**, **New Item** option
    from the menu.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`scripts`文件夹，从菜单中选择**添加**，**新建项**选项。
- en: Enter `javascript` in the **Search** box.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**搜索**框中输入`javascript`。
- en: Select **JavaScript File**.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**JavaScript文件**。
- en: Name the file `bweInterop.js`.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件命名为`bweInterop.js`。
- en: '**TIP**'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**提示**'
- en: In this book, we will be using the `bweInterop` namespace for our JavaScript
    code to both structure our code and minimize the risk of naming conflicts.
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这本书中，我们将使用`bweInterop`命名空间来为我们的JavaScript代码结构化和最小化命名冲突的风险。
- en: Click the **Add** button.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加**按钮。
- en: 'Enter the following JavaScript:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下JavaScript：
- en: '[PRE9]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The preceding JavaScript code uses the `Geolocation` API to return the latitude
    and longitude of the device. If it is not allowed or it is not supported, an error
    is thrown.
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的JavaScript代码使用`Geolocation` API返回设备的纬度和经度。如果未允许或不受支持，则会抛出错误。
- en: Open the `wwwroot/index.html` file.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`wwwroot/index.html`文件。
- en: 'Add the following markup at the bottom of the `body` element:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`body`元素的底部添加以下标记：
- en: '[PRE10]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We have created a JavaScript function that uses the `Geolocation` API to return
    our current latitude and longitude. Next, we need to invoke it from our web app.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个使用`Geolocation` API返回我们当前纬度和经度的JavaScript函数。接下来，我们需要在我们的Web应用中调用它。
- en: Invoke the JavaScript function
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调用JavaScript函数
- en: 'We need to add a class to store our location and then we can invoke our `bweInterop.getPosition`
    function. We do this as follows:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要添加一个类来存储我们的位置，然后我们可以调用我们的`bweInterop.getPosition`函数。我们这样做如下：
- en: Right-click the `WeatherForecast` project and select the **Add**, **New Folder**
    option from the menu.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击 `WeatherForecast` 项目，从菜单中选择 **添加**，**新建文件夹** 选项。
- en: Name the new folder `Models`.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新文件夹命名为 `Models`。
- en: Right-click the `Models` folder and select the **Add**, **Class** option from
    the menu.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击 `Models` 文件夹，从菜单中选择 **添加**，**类** 选项。
- en: Name the new class `Position`.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新类命名为 `Position`。
- en: 'Add the following properties to the `Position` class:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下属性添加到 `Position` 类中：
- en: '[PRE11]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This is the class that we will use to store our coordinates.
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是我们将用来存储我们坐标的类。
- en: Open the `Pages/Index.razor` file.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Pages/Index.razor` 文件。
- en: Delete the `H1` element.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除 `H1` 元素。
- en: 'Add the following directives:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下指令：
- en: '[PRE12]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Add the following markup:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下标记：
- en: '[PRE13]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The preceding markup displays the value of the `message` field if the `pos`
    property is `null`. Otherwise, it displays the latitude and longitude from the
    `pos` property.
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述标记显示如果 `pos` 属性为 `null`，则显示 `message` 字段的值。否则，它显示 `pos` 属性中的纬度和经度。
- en: 'Add the following `OnInitializedAsync` method to the code block:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 `OnInitializedAsync` 方法添加到代码块中：
- en: '[PRE14]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The preceding code attempts to get our coordinates when the page initializes.
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述代码尝试在页面初始化时获取我们的坐标。
- en: 'Add the following `GetPositionAsync` method to the code block:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 `GetPositionAsync` 方法添加到代码块中：
- en: '[PRE15]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The preceding code uses JavaScript interop to invoke the JavaScript function
    that we wrote that uses the `Geolocation` API to return our coordinates. For more
    information on JavaScript interop, refer to *Chapter 5*, *Building a Local Storage
    Service Using JavaScript Interoperability (JS Interop)*.
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述代码使用 JavaScript 互操作来调用我们编写的使用 `Geolocation` API 返回我们坐标的 JavaScript 函数。有关 JavaScript
    互操作的更多信息，请参阅 *第 5 章*，*使用 JavaScript 互操作 (JS Interop) 构建本地存储服务*。
- en: Press *Ctrl*+*F5* to start the application without debugging.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Ctrl*+*F5* 以无调试模式启动应用程序。
- en: 'The following screenshot is an example of the dialog that will ask you for
    permission to access your location:'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图是请求您允许访问位置的对话框示例：
- en: '![Table  Description automatically generated with low confidence](img/B18471_06_08.png)'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![表格  自动生成的低置信度描述](img/B18471_06_08.png)'
- en: 'Figure 6.8: Geolocation permission dialog'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.8：地理位置权限对话框
- en: Click the **Allow** button to allow the app to have access to your location.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **允许** 按钮以允许应用程序访问您的位置。
- en: 'The following screenshot is of the **Home** page of our Weather Forecast app:'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图是我们天气预报应用程序的 **主页**：
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18471_06_09.png)'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序  自动生成的描述](img/B18471_06_09.png)'
- en: 'Figure 6.9: Home page displaying our coordinates'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.9：显示我们坐标的主页
- en: 'You can disable the app’s ability to access your location by using the **Location
    access allowed** dialog that is shown in the following screenshot:'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以使用以下截图所示的 **位置访问允许** 对话框禁用应用程序访问您位置的能力：
- en: '![Graphical user interface, application  Description automatically generated](img/B18471_06_10.png)'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序  自动生成的描述](img/B18471_06_10.png)'
- en: 'Figure 6.10: Location access allowed dialog'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.10：位置访问允许对话框
- en: The **Location access allowed** dialog is accessed via the highlighted button
    on the browser’s toolbar. You may want to toggle the permissions to see how that
    impacts the app.
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**位置访问允许** 对话框通过浏览器工具栏上的突出显示按钮访问。您可能想切换权限以查看这对应用程序的影响。'
- en: Close the browser.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭浏览器。
- en: We have used the `Geolocation` API to display our latitude and longitude on
    the **Home** page. Next, we need to provide those coordinates to the `OpenWeather
    One Call` API.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用 `Geolocation` API 在 **主页** 上显示我们的纬度和经度。接下来，我们需要将这些坐标提供给 `OpenWeather
    One Call` API。
- en: Add an OpenWeather class
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加一个 OpenWeather 类
- en: 'We need to add an `OpenWeather` class to capture the results from the `OpenWeather
    One Call` API. We do this as follows:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要添加一个 `OpenWeather` 类来捕获来自 `OpenWeather One Call` API 的结果。我们这样做如下：
- en: Return to Visual Studio.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回 Visual Studio。
- en: Right-click the `Models` folder and select the **Add**, **Class** option from
    the menu.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击 `Models` 文件夹，从菜单中选择 **添加**，**类** 选项。
- en: Name the new class `OpenWeather`.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新类命名为 `OpenWeather`。
- en: Click the **Add** button.
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **添加** 按钮。
- en: 'Add the following classes:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下类：
- en: '[PRE16]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The preceding classes will be used to store the responses from the `OpenWeather
    One Call` API.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 上述类将用于存储来自 `OpenWeather One Call` API 的响应。
- en: Now we need to add a component to display the responses. We will use `Bootstrap`
    to style our new component.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要添加一个组件来显示响应。我们将使用 `Bootstrap` 来为新组件添加样式。
- en: Install Bootstrap
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Bootstrap
- en: 'We need to install `Bootstrap` in our web app. We do this as follows:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在我们的 Web 应用程序中安装 `Bootstrap`。我们这样做如下：
- en: Right-click the `wwwroot/css` folder and select the **Add**, **Client-Side Library**
    option from the menu.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击 `wwwroot/css` 文件夹，从菜单中选择 **添加**，**客户端库** 选项。
- en: Enter `bootstrap` into the **Library** search textbox and press the *Enter*
    key.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **库** 搜索文本框中输入 `bootstrap` 并按 **Enter** 键。
- en: Select **Choose specific files**.
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **选择特定文件**。
- en: 'Select only the `css` files, as shown in the following screenshot:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只选择 `css` 文件，如图下截图所示：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_06_11.png)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B18471_06_11.png)'
- en: 'Figure 6.11: Add Client-Side Library dialog'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.11：添加客户端库对话框
- en: Click the **Install** button.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **安装** 按钮。
- en: '**IMPORTANT NOTE**'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: After you install `Bootstrap`, a new folder will be added to the `wwwroot/css`
    folder. This new folder contains all the CSS files needed for `Bootstrap`. We
    will only be using the `bootstrap.min.css` file in this project.
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 安装 `Bootstrap` 后，将在 `wwwroot/css` 文件夹中添加一个新文件夹。这个新文件夹包含 `Bootstrap` 所需的所有 CSS
    文件。在本项目中，我们只会使用 `bootstrap.min.css` 文件。
- en: Now that `Bootstrap` is installed, let’s verify that it is working.
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在 `Bootstrap` 已安装，让我们验证它是否正常工作。
- en: Open the `wwwroot/index.html` file.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `wwwroot/index.html` 文件。
- en: Add the following markup to the `head` element before the link to the `css/app.css`
    stylesheet.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `css/app.css` 样式表链接之前，向 `head` 元素添加以下标记：
- en: '[PRE17]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Open the `Pages/Index.razor` page.
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Pages/Index.razor` 页面。
- en: Add the following markup below the `PageTitle` component.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `PageTitle` 组件下方添加以下标记：
- en: '[PRE18]'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Press *Ctrl*+*F5* to start the application without debugging.
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Ctrl*+*F5* 以无调试模式启动应用程序。
- en: Verify that the top of the page is now blue.
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证页面顶部是否现在为蓝色。
- en: Close the browser.
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭浏览器。
- en: Now that `Bootstrap` is properly installed, we can add the new component.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 `Bootstrap` 已正确安装，我们可以添加新组件。
- en: Add a DailyForecast component
  id: totrans-288
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加 DailyForecast 组件
- en: 'We need the new component to display each day’s forecast. We do this as follows:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要新组件来显示每天的预报。我们这样做如下：
- en: Right-click the `WeatherForecast` project and select the **Add**, **New Folder**
    option from the menu.
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击 `WeatherForecast` 项目，从菜单中选择 **添加**，**新建文件夹** 选项。
- en: Name the new folder `Shared`.
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新文件夹命名为 `Shared`。
- en: Right-click the `Shared` folder and select the **Add**, **Razor Component**
    option from the menu.
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击 `Shared` 文件夹，从菜单中选择 **添加**，**Razor 组件** 选项。
- en: Name the new component `DailyForecast`.
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新组件命名为 `DailyForecast`。
- en: Click the **Add** button.
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **添加** 按钮。
- en: 'Replace the existing markup with the following markup:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将现有标记替换为以下标记：
- en: '[PRE19]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This component uses the `Card` component from `Bootstrap` to display the daily
    forecast.
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此组件使用 `Bootstrap` 的 `Card` 组件来显示每日预报。
- en: 'Add the following code to the code block:'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码块中添加以下代码：
- en: '[PRE20]'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The preceding code defines the parameters that are used to display the daily
    weather forecast. The `OnInitialized` method is used to format the `Date` and
    `IconUrl` fields.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码定义了用于显示每日天气预报的参数。`OnInitialized` 方法用于格式化 `Date` 和 `IconUrl` 字段。
- en: We have added a Razor component to display each day’s weather forecast using
    the `Card` component from `Bootstrap`.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已添加一个 Razor 组件，使用 `Bootstrap` 的 `Card` 组件显示每天的天气预报。
- en: Fetch the forecast
  id: totrans-302
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取预报
- en: 'We need to fetch the weather forecast. We can fetch the forecast by either
    calling the `OpenWeather One Call` API or using the `weather.json` file that is
    in GitHub. We do this as follows:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要获取天气预报。我们可以通过调用 `OpenWeather One Call` API 或使用 GitHub 中的 `weather.json`
    文件来获取预报。我们这样做如下：
- en: Open the `Pages/Index.razor` file.
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Pages/Index.razor` 文件。
- en: 'Add the following `using` statements:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下 `using` 语句：
- en: '[PRE21]'
  id: totrans-306
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Add the following directive:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下指令：
- en: '[PRE22]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Add the following field to the top of the code block:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码块顶部添加以下字段：
- en: '[PRE23]'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Add the `GetForecastAsync` method to the code block:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `GetForecastAsync` 方法添加到代码块：
- en: '[PRE24]'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Add the following code to the `GetForecastAsync` method:'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `GetForecastAsync` 方法中添加以下代码：
- en: '[PRE25]'
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '**IMPORTANT NOTE**'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: You need to replace `{Your_API_Key}` with the API key that you obtained from
    `OpenWeather`. Also, it may take a couple of hours for your API key to become
    active.
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您需要将 `{Your_API_Key}` 替换为从 `OpenWeather` 获得的 API 密钥。此外，您的 API 密钥可能需要几小时才能激活。
- en: The preceding method uses the `OpenWeather One Call` API with the coordinates
    obtained by the `GetPositionAsync` method to populate the `forecast` object.
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前述方法使用 `OpenWeather One Call` API，并通过 `GetPositionAsync` 方法获取的坐标来填充 `forecast`
    对象。
- en: 'If you cannot use the `OpenWeather One Call` API, use the following version
    of the `GetForecastAsync` method:'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您不能使用 `OpenWeather One Call` API，请使用以下版本的 `GetForecastAsync` 方法：
- en: '[PRE26]'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The preceding version of the `GetForecastAsync` method uses a static file to
    populate the `forecast` object. It assumes that the `weather.json` file has been
    downloaded from the GitHub repository for this chapter and that it has been placed
    into the `wwwroot/sample-data` folder.
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之前版本的 `GetForecastAsync` 方法使用静态文件来填充 `forecast` 对象。它假设 `weather.json` 文件已经从本章的
    GitHub 仓库下载，并且已经放置在 `wwwroot/sample-data` 文件夹中。
- en: 'Update the `OnInitializedAsync` method to call the `GetForecastAsync` method
    and update the error message, like this:'
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 `OnInitializedAsync` 方法以调用 `GetForecastAsync` 方法并更新错误信息，如下所示：
- en: '[PRE27]'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Now that we have populated the forecast object, we can display the forecast.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经填充了预报对象，我们可以显示预报。
- en: Display the forecast
  id: totrans-324
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示预报
- en: 'We need to add a collection of daily forecasts to the **Home** page. We do
    this as follows:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要向 **主页** 添加一组每日预报。我们这样做如下：
- en: Remove the `div` element.
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除 `div` 元素。
- en: 'Replace the `@if` statement with the following markup:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `@if` 语句替换为以下标记：
- en: '[PRE28]'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The preceding markup loops through the `forecast` object five times. It uses
    the `DailyForecast` component to display the daily forecast.
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之前的标记循环遍历 `forecast` 对象五次。它使用 `DailyForecast` 组件来显示每日预报。
- en: Press *Ctrl*+*F5* to start the application without debugging.
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Ctrl*+*F5* 以无调试模式启动应用程序。
- en: Close the browser.
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭浏览器。
- en: We have completed our Weather Forecastapplication. Now, we need to convert it
    into a PWA. To do that, we need to add a logo, a manifest file, and a service
    worker.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了天气预报应用。现在，我们需要将其转换为 PWA。为此，我们需要添加一个标志、一个清单文件和一个服务工作者。
- en: Add the logo
  id: totrans-333
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加标志
- en: 'We need to add an image to be used as a logo for the app. We do this as follows:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要添加一个图片作为应用的标志。我们这样做如下：
- en: Right-click the `wwwroot` folder and select the **Add**, **New Folder** option
    from the menu.
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击 `wwwroot` 文件夹，从菜单中选择 **添加**，**新建文件夹** 选项。
- en: Name the new folder `images`.
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新文件夹命名为 `images`。
- en: Copy the `Sun-512.png` image from the GitHub repository for this chapter to
    the `images` folder.
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将本章 GitHub 仓库中的 `Sun-512.png` 图片复制到 `images` 文件夹。
- en: At least one image must be included in the manifest file for the PWA to be installed.
    Now, we can add a manifest file.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 清单文件中至少必须包含一个图片才能安装 PWA。现在，我们可以添加一个清单文件。
- en: Add a manifest file
  id: totrans-339
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加一个清单文件
- en: 'To convert the web app into a PWA, we need to add a manifest file. We do this
    as follows:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 Web 应用转换为 PWA，我们需要添加一个清单文件。我们这样做如下：
- en: Right-click the `wwwroot` folder and select the **Add**, **New Item** option
    from the menu.
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击 `wwwroot` 文件夹，从菜单中选择 **添加**，**新建项** 选项。
- en: Enter `json` in the **Search** box.
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **搜索** 框中输入 `json`。
- en: Select **JSON File**.
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **JSON 文件**。
- en: Name the file `manifest.json`.
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件命名为 `manifest.json`。
- en: Click the **Add** button.
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **添加** 按钮。
- en: 'Enter the following JSON code:'
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下 JSON 代码：
- en: '[PRE29]'
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Open the `wwwroot/index.html` file.
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `wwwroot/index.html` 文件。
- en: 'Add the following markup to the bottom of the `head` element:'
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下标记添加到 `head` 元素的底部：
- en: '[PRE30]'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Add the following markup below the preceding markup:'
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前面的标记下方添加以下标记：
- en: '[PRE31]'
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '**TIP**'
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**提示**'
- en: With iOS Safari, you must include the preceding link tag to instruct it to use
    the indicated icon or it will generate an icon by taking a screenshot of the page’s
    content.
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 iOS Safari 时，您必须包含前面的链接标签来指示它使用指定的图标，否则它将通过截图页面内容来生成图标。
- en: We have added a manifest file to our web app to control how it looks and behaves
    when it is installed. Next, we need to add a service worker.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经向我们的 Web 应用添加了一个清单文件来控制它在安装时的外观和行为。接下来，我们需要添加一个服务工作者。
- en: Add a simple service worker
  id: totrans-356
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加一个简单的服务工作者
- en: 'To finish converting the web app into a PWA, we need to add a service worker.
    We do this as follows:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成将 Web 应用转换为 PWA 的过程，我们需要添加一个服务工作者。我们这样做如下：
- en: Right-click the `wwwroot` folder and select the **Add**, **New Item** option
    from the menu.
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击 `wwwroot` 文件夹，从菜单中选择 **添加**，**新建项** 选项。
- en: Enter `html` in the **Search** box.
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **搜索** 框中输入 `html`。
- en: Select **HTML Page**.
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **HTML 页面**。
- en: Name the file `offline.html`.
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件命名为 `offline.html`。
- en: Click the **Add** button.
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **添加** 按钮。
- en: 'Add the following markup to the `body` element:'
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下标记添加到 `body` 元素中：
- en: '[PRE32]'
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Right-click the `wwwroot` folder and select the **Add**, **New Item** option
    from the menu.
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击 `wwwroot` 文件夹，从菜单中选择 **添加**，**新建项** 选项。
- en: Enter `javascript` in the **Search** box.
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **搜索** 框中输入 `javascript`。
- en: Select `JavaScript File`.
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 `JavaScript 文件`。
- en: Name the file `service-worker.js`.
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件命名为 `service-worker.js`。
- en: Click the **Add** button.
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加**按钮。
- en: 'Add the following constants:'
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下常量：
- en: '[PRE33]'
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The preceding code sets the name of the current cache and the name of the file
    we will be using to indicate that we are offline.
  id: totrans-372
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的代码设置当前缓存的名称和我们将使用的文件名称以指示我们处于离线状态。
- en: 'Add the following event listeners:'
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下事件监听器：
- en: '[PRE34]'
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The preceding code designates the functions to be used for each of the following
    steps: install, activate, and fetch.'
  id: totrans-375
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的代码指定了以下步骤中要使用的函数：安装、激活和获取。
- en: 'Add the following `onInstall` function:'
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下`onInstall`函数：
- en: '[PRE35]'
  id: totrans-377
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The preceding function opens the indicated cache. If the cache does not yet
    exist, it creates the cache and then opens it. After the cache is open, it adds
    the indicated request/response pair to the cache.
  id: totrans-378
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的函数打开指定的缓存。如果缓存尚不存在，它将创建缓存然后打开它。缓存打开后，它将指定的请求/响应对添加到缓存中。
- en: 'Add the following `onActivate` function:'
  id: totrans-379
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下`onActivate`函数：
- en: '[PRE36]'
  id: totrans-380
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The preceding code fetches the names of all the caches. All the caches that
    do not match the name of the indicated cache are deleted.
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的代码获取所有缓存的名称。所有与指定缓存名称不匹配的缓存都将被删除。
- en: '**TIP**'
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**提示**'
- en: It is your responsibility to purge obsolete caches. Each browser has a limit
    as to the amount of storage that a web app can use. If you violate that limit,
    all of your caches may be deleted by the browser.
  id: totrans-383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 清除过时缓存是您的责任。每个浏览器都对Web应用可以使用的存储量有限制。如果您违反了该限制，浏览器可能会删除您的所有缓存。
- en: 'Add the following `onFetch` function:'
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下`onFetch`函数：
- en: '[PRE37]'
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: In the preceding code, if the fetch fails, the cache is opened, and the previously
    cached offline page is served.
  id: totrans-386
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的代码中，如果获取失败，将打开缓存，并服务之前缓存的离线页面。
- en: Open the `wwwroot/index.html` file.
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`wwwroot/index.html`文件。
- en: 'Add the following markup to the bottom of the `body` element:'
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下标记添加到`body`元素的底部：
- en: '[PRE38]'
  id: totrans-389
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The preceding code registers the service worker.
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的代码注册了服务工作者。
- en: We have added an offline page service worker that will display the `offline.html`
    page when the PWA is offline.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已添加一个离线页面服务工作者，当PWA离线时将显示`offline.html`页面。
- en: Test the service worker
  id: totrans-392
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试服务工作者
- en: 'We need to test that the service worker is allowing us to work offline. We
    do this as follows:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要测试服务工作者是否允许我们在离线状态下工作。我们这样做如下：
- en: Press *Ctrl*+*F5* to start the application without debugging.
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Ctrl*+*F5*以无调试模式启动应用程序。
- en: Click *F12* to open the `Developer Tools` interface.
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击*F12*以打开`开发者工具`界面。
- en: Select the **Application** tab.
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**应用程序**选项卡。
- en: Select the **Manifest** option from the menu on the left to view the **App Manifest**
    details.
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧菜单中选择**清单**选项以查看**应用清单**详情。
- en: '![Graphical user interface, text, application, chat or text message  Description
    automatically generated](img/B18471_06_12.png)'
  id: totrans-398
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，聊天或文本消息  自动生成的描述](img/B18471_06_12.png)'
- en: 'Figure 6.12: App Manifest details'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.12：应用清单详情
- en: Select the **Service Workers** option from the menu on the left to view the
    service worker that is installed for the current client, as illustrated in the
    following screenshot:![Graphical user interface, application  Description automatically
    generated](img/B18471_06_13.png)
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧菜单中选择**服务工作者**选项以查看当前客户端安装的服务工作者，如图下所示：![图形用户界面，应用程序  自动生成的描述](img/B18471_06_13.png)
- en: 'Figure 6.13: Service Workers dialog'
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图6.13：服务工作者对话框
- en: In the preceding screenshot, we have highlighted both the **Offline** checkbox
    and the **See all registrations** link.
  id: totrans-402
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，我们已突出显示**离线**复选框和**查看所有注册**链接。
- en: '**TIP**'
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**提示**'
- en: Click on the **See all registrations** link to see all the service workers that
    are installed on your device. You will probably be surprised to see how many service
    workers are installed on your computer.
  id: totrans-404
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 点击**查看所有注册**链接以查看您设备上安装的所有服务工作者。您可能会惊讶地发现您的计算机上安装了多少服务工作者。
- en: Select the **Cache Storage** option from the menu on the left to view the caches.
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧菜单中选择**缓存存储**选项以查看缓存。
- en: 'Click on the **offline1** cache to view its contents, as illustrated in the
    following screenshot:'
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**offline1**缓存以查看其内容，如图下所示：
- en: '![Graphical user interface, application  Description automatically generated](img/B18471_06_14.png)'
  id: totrans-407
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序  自动生成的描述](img/B18471_06_14.png)'
- en: 'Figure 6.14: Cache Storage'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.14：缓存存储
- en: Select the **Service Workers** option from the menu on the left.
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧菜单中选择**服务工作者**选项。
- en: Check the **Offline** checkbox on the **Service Workers** dialog.
  id: totrans-410
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**服务工作者**对话框中勾选**离线**复选框。
- en: '**TIP**'
  id: totrans-411
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**提示**'
- en: The **Offline** checkbox is highlighted in Figure 16.13.
  id: totrans-412
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 16.13 中的**离线**复选框被突出显示。
- en: Refresh the browser, and you should see the following screen:![Graphical user
    interface, text, application, chat or text message  Description automatically
    generated](img/B18471_06_15.png)
  id: totrans-413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 刷新浏览器，你应该看到以下屏幕：![图形用户界面，文本，应用，聊天或短信描述自动生成](img/B18471_06_15.png)
- en: 'Figure 6.15: Offline page'
  id: totrans-414
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.15：离线页面
- en: The page that is displayed is from the browser’s cache.
  id: totrans-415
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 显示的页面来自浏览器的缓存。
- en: Uncheck the **Offline** checkbox on the **Service Workers** dialog.
  id: totrans-416
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**服务工作者**对话框中取消选中**离线**复选框。
- en: Refresh the browser.
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 刷新浏览器。
- en: Since the web app is now back online, the **Offline** page is no longer displayed.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 由于网络应用现在已重新上线，**离线**页面不再显示。
- en: We have tested that the service worker enables our web app to work offline.
    Now, we can install the PWA.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经测试过服务工作者使我们的网络应用能够离线工作。现在，我们可以安装 PWA。
- en: Install the PWA
  id: totrans-420
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 PWA
- en: 'We need to test the PWA by installing it. We do this as follows:'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要通过安装来测试 PWA。我们这样做如下：
- en: 'Select the **App available. Install 5-Day Weather Forecast** menu option from
    the browser’s menu:'
  id: totrans-422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从浏览器的菜单中选择**应用可用。安装 5 天天气预报**菜单选项：
- en: '![Graphical user interface  Description automatically generated](img/B18471_06_16.png)'
  id: totrans-423
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面描述自动生成](img/B18471_06_16.png)'
- en: 'Figure 6.16: Install 5-Day Weather Forecast option'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.16：安装 5 天天气预报选项
- en: '**TIP**'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: On Chromium-based browsers, the **Install** button is on the URL bar. However,
    for other types of browsers, you will need to install the PWA from either the
    **Menu** button or the **Share** button.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于 Chromium 的浏览器中，**安装**按钮位于 URL 栏。然而，对于其他类型的浏览器，您需要从**菜单**按钮或**分享**按钮安装 PWA。
- en: 'Click the **Install** button in the **Install PWA** dialog:'
  id: totrans-427
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**安装 PWA**对话框中点击**安装**按钮：
- en: '![Text  Description automatically generated](img/B18471_06_17.png)'
  id: totrans-428
  prefs: []
  type: TYPE_IMG
  zh: '![文本描述自动生成](img/B18471_06_17.png)'
- en: 'Figure 6.17: Install PWA dialog'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.17：安装 PWA 对话框
- en: Click the **Allow** button in the **App installed** dialog.![Graphical user
    interface, text, application  Description automatically generated](img/B18471_06_18.png)
  id: totrans-430
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**应用已安装**对话框中点击**允许**按钮。![图形用户界面，文本，应用描述自动生成](img/B18471_06_18.png)
- en: 'Figure 6.18: App installed dialog'
  id: totrans-431
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.18：应用已安装对话框
- en: 'Once installed, the PWA appears without an address bar. It appears on our taskbar,
    and we can run it from our **Start** menu. The following screenshot shows the
    PWA after it has been installed:'
  id: totrans-432
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 安装后，PWA 无地址栏显示。它出现在我们的任务栏上，我们可以从**开始**菜单运行它。以下截图显示了安装后的 PWA：
- en: '![Graphical user interface, application  Description automatically generated](img/B18471_06_19.png)'
  id: totrans-433
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形用户界面，应用描述自动生成](img/B18471_06_19.png)'
- en: 'Figure 6.19: Installed PWA'
  id: totrans-434
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.19：已安装 PWA
- en: Close the app.
  id: totrans-435
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭应用。
- en: Click the *Windows* key and search for the **5-Day Weather Forecast** app.
  id: totrans-436
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下 *Windows* 键并搜索**5 天天气预报**应用。
- en: Open the **5-Day Weather Forecast** app.
  id: totrans-437
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**5 天天气预报**应用。
- en: When the application opens, its icon appears on the taskbar. We can pin it to
    the taskbar if we want.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用打开时，其图标会出现在任务栏上。如果我们想的话，可以将其固定到任务栏上。
- en: We have successfully installed and run the PWA. It is just as easy to uninstall
    a PWA as it is to install one.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已成功安装并运行了 PWA。卸载 PWA 和安装一样简单。
- en: Uninstall the PWA
  id: totrans-440
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 卸载 PWA
- en: 'We need to uninstall the PWA. We do this as follows:'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要卸载 PWA。我们这样做如下：
- en: Close the **5-Day Weather Forecast** app.
  id: totrans-442
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭**5 天天气预报**应用。
- en: Click the *Windows* key and search for the **5-Day Weather Forecast** app.
  id: totrans-443
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下 *Windows* 键并搜索**5 天天气预报**应用。
- en: Right-click the **5-Day Weather Forecast** app and select the **Uninstall**
    option from the menu.
  id: totrans-444
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击**5 天天气预报**应用，并从菜单中选择**卸载**选项。
- en: '![Graphical user interface, text, application, chat or text message  Description
    automatically generated](img/B18471_06_20.png)'
  id: totrans-445
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用，聊天或短信描述自动生成](img/B18471_06_20.png)'
- en: 'Figure 6.20: Uninstall the 5-Day Weather Forecast app'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.20：卸载 5 天天气预报应用
- en: Click the **Uninstall** button.![Graphical user interface, text, application,
    chat or text message  Description automatically generated](img/B18471_06_21.png)
  id: totrans-447
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**卸载**按钮。![图形用户界面，文本，应用，聊天或短信描述自动生成](img/B18471_06_21.png)
- en: 'Figure 6.21: Uninstall the 5-Day Weather Forecast app'
  id: totrans-448
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 6.21：卸载 5 天天气预报应用
- en: We have uninstalled the PWA.
  id: totrans-449
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们已卸载 PWA。
- en: '**IMPORTANT NOTE**'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: It may take a few seconds for the app to be removed from the taskbar.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 应用从任务栏中移除可能需要几秒钟。
- en: Summary
  id: totrans-452
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: You should now be able to convert a Blazor WebAssembly app into a PWA by adding
    a manifest file and a service worker.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该能够通过添加清单文件和服务工作者将 Blazor WebAssembly 应用程序转换为 PWA。
- en: In this chapter, we introduced PWAs. We explained how to convert a web app into
    a PWA by adding a manifest file and a service worker. We explained how to work
    with manifest files and service workers. We went into some detail explaining the
    different types of service workers and explained how to use the `CacheStorage`
    API to cache request/response pairs. Finally, we demonstrated how to use both
    the `Geolocation` API and the `OpenWeather One Call` API.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了 PWA。我们解释了如何通过添加清单文件和服务工作者将 Web 应用程序转换为 PWA。我们解释了如何处理清单文件和服务工作者。我们详细解释了不同类型的服务工作者，并解释了如何使用
    `CacheStorage` API 来缓存请求/响应对。最后，我们演示了如何使用 `Geolocation` API 和 `OpenWeather One
    Call` API。
- en: After that, we used the `Blazor WebAssembly App Empty` project template to create
    a new project. We added a JavaScript function that uses the `Geolocation` API
    to obtain our coordinates. We added some models to capture the coordinates and
    used JavaScript interop to invoke the JavaScript function. We used the `OpenWeather
    One Call API` to obtain the local 5-day weather forecast. We installed `Bootstrap`
    and created a Razor component to display each day’s forecast.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们使用了 `Blazor WebAssembly App Empty` 项目模板来创建一个新的项目。我们添加了一个使用 `Geolocation`
    API 获取我们坐标的 JavaScript 函数。我们添加了一些模型来捕获坐标，并使用 JavaScript 互操作调用了 JavaScript 函数。我们使用
    `OpenWeather One Call API` 获取当地的 5 天天气预报。我们安装了 `Bootstrap` 并创建了一个 Razor 组件来显示每天的预报。
- en: In the last part of the chapter, we converted the Blazor WebAssembly app into
    a PWA by adding an image, a manifest file, and an offline page service worker.
    Finally, we installed, ran, and uninstalled the PWA. We can apply our new skills
    to convert our existing web apps into PWAs that combine the benefits of a web
    app with the look and feel of a native app.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最后部分，我们通过添加图片、清单文件和离线页面服务工作者将 Blazor WebAssembly 应用程序转换为 PWA。最后，我们安装、运行和卸载了
    PWA。我们可以应用我们的新技能将现有的 Web 应用程序转换为结合 Web 应用程序优势和原生应用外观和感觉的 PWA。
- en: In the next chapter, we will use **dependency injection** (**DI)** to build
    a shopping cart application.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用 **依赖注入**（**DI**）来构建购物车应用程序。
- en: Questions
  id: totrans-458
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'The following questions are provided for your consideration:'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 以下问题供您思考：
- en: Are service workers asynchronous or synchronous?
  id: totrans-460
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务工作者是异步的还是同步的？
- en: Can `localStorage` be used inside a service worker for data storage?
  id: totrans-461
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是否可以在服务工作者内部使用 `localStorage` 进行数据存储？
- en: Can service workers manipulate the DOM?
  id: totrans-462
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务工作者能否操作 DOM？
- en: Are PWAs secure?
  id: totrans-463
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: PWA 是否安全？
- en: Are PWAs platform-specific?
  id: totrans-464
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: PWA 是否具有平台特定性？
- en: What are the differences between a PWA and a native app?
  id: totrans-465
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: PWA 和原生应用之间有什么区别？
- en: Further reading
  id: totrans-466
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'The following resources provide more information concerning the topics in this
    chapter:'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 以下资源提供了有关本章主题的更多信息：
- en: For more information on the `Geolocation` API specification, refer to [https://w3c.github.io/geolocation-api](https://w3c.github.io/geolocation-api).
  id: totrans-468
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关 `Geolocation` API 规范的更多信息，请参阅 [https://w3c.github.io/geolocation-api](https://w3c.github.io/geolocation-api)。
- en: For more information on using the `Geolocation` API, refer to [https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API).
  id: totrans-469
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关使用 `Geolocation` API 的更多信息，请参阅 [https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API](https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API)。
- en: For more information on the `Weather` API, refer to [https://openweathermap.org/api](https://openweathermap.org/api).
  id: totrans-470
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关 `Weather` API 的更多信息，请参阅 [https://openweathermap.org/api](https://openweathermap.org/api)。
- en: For more information on the `Web Application Manifest` specification, refer
    to [https://www.w3.org/TR/appmanifest](https://www.w3.org/TR/appmanifest).
  id: totrans-471
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关 `Web 应用程序清单` 规范的更多信息，请参阅 [https://www.w3.org/TR/appmanifest](https://www.w3.org/TR/appmanifest)。
- en: For more information on the `Service Worker` specification, refer to [https://w3c.github.io/ServiceWorker](https://w3c.github.io/ServiceWorker).
  id: totrans-472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关 `Service Worker` 规范的更多信息，请参阅 [https://w3c.github.io/ServiceWorker](https://w3c.github.io/ServiceWorker)。
- en: For more information on using the `CacheStorage` API, refer to [https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage](https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage).
  id: totrans-473
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关使用 `CacheStorage` API 的更多信息，请参阅 [https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage](https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage)。
- en: For more examples of service workers, refer to the Workbox website at [https://developers.google.com/web/tools/workbox](https://developers.google.com/web/tools/workbox).
  id: totrans-474
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 想要了解更多关于服务工作者（service workers）的示例，请参考 Workbox 网站上的[https://developers.google.com/web/tools/workbox](https://developers.google.com/web/tools/workbox)。
- en: For more information on Microsoft’s `PWABuilder`, refer to [https://www.pwabuilder.com](https://www.pwabuilder.com).
  id: totrans-475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如需了解有关微软的 `PWABuilder` 的更多信息，请参考[https://www.pwabuilder.com](https://www.pwabuilder.com)。
- en: For a PWA image generator, refer to [https://www.pwabuilder.com/imageGenerator](https://www.pwabuilder.com/imageGenerator).
  id: totrans-476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如需 PWA 图片生成器，请参考[https://www.pwabuilder.com/imageGenerator](https://www.pwabuilder.com/imageGenerator)。
- en: For more information on `Bootstrap`, refer to [https://getbootstrap.com/](https://getbootstrap.com/).
  id: totrans-477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如需了解有关 `Bootstrap` 的更多信息，请参考[https://getbootstrap.com/](https://getbootstrap.com/)。
