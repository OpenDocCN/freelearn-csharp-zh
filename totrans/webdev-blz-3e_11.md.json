["```cs\n@page \"/posts/{PageNumber:int}\" \n```", "```cs\n[Parameter]\npublic int PageNumber{ get; set; } \n```", "```cs\n@page \"/post/{PageNumber:int?}\" \n```", "```cs\n@inject NavigationManager Navigation\n@code{\nvar query = new Uri(Navigation.Uri).Query;\n} \n```", "```cs\n[Parameter, SupplyParameterFromQuery(Name = \"parameterName\")]\npublic string ParameterFromQuery { get; set; } \n```", "```cs\n    namespace SharedComponents.Interfaces;\n    public interface IBrowserStorage\n    {\n        Task<T?> GetAsync<T>(string key);\n        Task SetAsync(string key, object value);\n        Task DeleteAsync(string key);\n    } \n    ```", "```cs\n    using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;\n    using SharedComponents.Interfaces; \n    ```", "```cs\n    public class BlogProtectedBrowserStorage : IBrowserStorage\n    {\n        ProtectedSessionStorage Storage { get; set; }\n        public BlogProtectedBrowserStorage(ProtectedSessionStorage storage)\n        {\n            Storage = storage;\n        }\n        public async Task DeleteAsync(string key)\n        {\n            await Storage.DeleteAsync(key);\n        }\n        public async Task<T?> GetAsync<T>(string key)\n        {\n            var value = await Storage.GetAsync<T>(key);\n            return value.Success ? value.Value : default(T);\n        }\n        public async Task SetAsync(string key, object value)\n        {\n            await Storage.SetAsync(key, value);\n        }\n    } \n    ```", "```cs\n    using SharedComponents.Interfaces;\n    using BlazorWebApp.Services; \n    ```", "```cs\n    builder.Services.AddScoped<IBrowserStorage,BlogProtectedBrowserStorage>(); \n    ```", "```cs\n    using Blazored.SessionStorage;\n    using SharedComponents.Interfaces;\n    namespace BlazorWebApp.Client.Services;\n    public class BlogBrowserStorage : IBrowserStorage\n    {\n        ISessionStorageService Storage { get; set; }\n        public BlogBrowserStorage(ISessionStorageService storage)\n        {\n            Storage = storage;\n        }\n        public async Task DeleteAsync(string key)\n        {\n            await Storage.RemoveItemAsync(key);\n        }\n        public async Task<T?> GetAsync<T>(string key)\n        {\n            return await Storage.GetItemAsync<T>(key);\n        }\n        public async Task SetAsync(string key, object value)\n        {\n            await Storage.SetItemAsync(key, value);\n        }\n    } \n    ```", "```cs\n    using Blazored.SessionStorage;\n    using SharedComponents.Interfaces;\n    using BlazorWebApp.Client.Services; \n    ```", "```cs\n    builder.Services.AddBlazoredSessionStorage();\n    builder.Services.AddScoped<IBrowserStorage, BlogBrowserStorage>(); \n    ```", "```cs\n    @inject SharedComponents.Interfaces.IBrowserStorage _storage \n    ```", "```cs\n    protected override async Task OnAfterRenderAsync(bool firstRender)\n    {\n        if (firstRender && string.IsNullOrEmpty(Id))\n        {\n            var saved = await _storage.GetAsync<BlogPost>(\"EditCurrentPost\");\n            if (saved != null)\n            {\n               Post = saved;\n       StateHasChanged();\n            }\n        }\n        await base.OnAfterRenderAsync(firstRender);\n    } \n    ```", "```cs\n    protected async Task UpdateHTMLAsync()\n    {\n        if (!string.IsNullOrEmpty(Post.Text))\n        {\n            markDownAsHTML = Markdig.Markdown.ToHtml(Post.Text, pipeline);\n            if (string.IsNullOrEmpty(Post.Id))\n            {\n                await _storage.SetAsync(\"EditCurrentPost\", Post);\n            }\n        }\n    } \n    ```", "```cs\n    await UpdateHTMLAsync(); \n    ```", "```cs\n    @rendermode @(new InteractiveServerRenderMode(prerender: false)) \n    ```", "```cs\n    @rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false)) \n    ```", "```cs\n    using Data.Models;\n    namespace SharedComponents.Interfaces;\n    public interface IBlogNotificationService\n    {\n        event Action<BlogPost>? BlogPostChanged;\n        Task SendNotification(BlogPost post);\n    } \n    ```", "```cs\n    using SharedComponents.Interfaces;\n    using Data.Models;\n    namespace BlazorServer.Services;\n    public class BlazorServerBlogNotificationService : IBlogNotificationService\n    {\n        public event Action<BlogPost>? BlogPostChanged;\n        public Task SendNotification(BlogPost post)\n        {\n            BlogPostChanged?.Invoke(post);\n            return Task.CompletedTask;\n        }\n    } \n    ```", "```cs\n    builder.Services.AddSingleton<IBlogNotificationService, BlazorServerBlogNotificationService>(); \n    ```", "```cs\n    @using SharedComponents.Interfaces\n    @inject IBlogNotificationService _notificationService\n    @implements IDisposable \n    ```", "```cs\n    _notificationService.BlogPostChanged += PostChanged; \n    ```", "```cs\n    private async void PostChanged(BlogPost post)\n    {\n        if (BlogPost?.Id == post.Id)\n        {\n            BlogPost = post;\n            await InvokeAsync(()=>this.StateHasChanged());\n        }\n    } \n    ```", "```cs\n    void IDisposable.Dispose()\n    {\n        _notificationService.BlogPostChanged -= PostChanged;\n    } \n    ```", "```cs\n    @rendermode InteractiveServer \n    ```", "```cs\n    @using SharedComponents.Interfaces\n    @inject IBlogNotificationService _notificationService \n    ```", "```cs\n    await _notificationService.SendNotification(Post); \n    ```", "```cs\n    @rendermode @(new InteractiveServerRenderMode(prerender: false)) \n    ```", "```cs\n    using Data.Models;\n    using Microsoft.AspNetCore.SignalR;\n    namespace BlazorWebApp.Hubs;\n    public class BlogNotificationHub : Hub\n    {\n        public async Task SendNotification(BlogPost post)\n        {\n            await Clients.All.SendAsync(\"BlogPostChanged\", post);\n        }\n    } \n    ```", "```cs\n    builder.Services.AddSignalR(); \n    ```", "```cs\n    using BlazorWebApp.Hubs; \n    ```", "```cs\n    app.MapHub<BlogNotificationHub>(\"/BlogNotificationHub\"); \n    ```", "```cs\n    using Microsoft.AspNetCore.Components;\n    using Microsoft.AspNetCore.SignalR.Client;\n    using Data.Models;\n    using SharedComponents.Interfaces; \n    ```", "```cs\n    public class BlazorWebAssemblyBlogNotificationService : IBlogNotificationService, IAsyncDisposable\n    {\n        public BlazorWebAssemblyBlogNotificationService(NavigationManager navigationManager)\n        {\n            _hubConnection = new HubConnectionBuilder()\n            .WithUrl(navigationManager.ToAbsoluteUri(\"/BlogNotificationHub\"))\n            .Build();\n            _hubConnection.On<BlogPost>(\"BlogPostChanged\", (post) =>\n            {\n                BlogPostChanged?.Invoke(post);\n            });\n            _hubConnection.StartAsync();\n        }\n        private readonly HubConnection _hubConnection;\n        public event Action<BlogPost>? BlogPostChanged;\n\n        public async Task SendNotification(BlogPost post)\n        {\n            await _hubConnection.SendAsync(\"SendNotification\", post);\n        }\n        public async ValueTask DisposeAsync()\n        {\n            await _hubConnection.DisposeAsync();\n        }\n    } \n    ```", "```cs\n    builder.Services.AddSingleton<IBlogNotificationService, BlazorWebAssemblyBlogNotificationService>(); \n    ```", "```cs\n    @rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false)). \n    ```", "```cs\n    @rendermode InteractiveWebAssembly. \n    ```", "```cs\n@(Preferences?.DarkTheme)\n@code {\n    [CascadingParameter(Name = \"Preferences\")]\n    public Preferences Preferences { get; set; }\n} \n```", "```cs\nbuilder.Services.AddCascadingValue<Preferences>(sp =>\n{\n    var preferences = new Preferences { DarkTheme = true };\n    var source = new CascadingValueSource<Preferences>(\"Preferences\", preferences, isFixed: false);\n    return source;\n}); \n```", "```cs\nbuilder.Services.AddCascadingValue<Preferences>(sp =>\n{\n    var preferences = new Preferences { DarkTheme = true };\n    var source = new CascadingValueSource<Preferences>(\"Preferences\", preferences, isFixed: false);\n    if (preferences is INotifyPropertyChanged changed)\n        changed.PropertyChanged += (sender, args) => source.NotifyChangedAsync();\n    return source;\n}); \n```"]