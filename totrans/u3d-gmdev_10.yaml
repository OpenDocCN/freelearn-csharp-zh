- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Sound Effects
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 声音效果
- en: Sound effects! Sound is the only part of a video game that comes from the real
    world and makes it into the game. Using microphones, sound designers will record
    common video game sounds such as voiceovers, music, UI sounds, weapons, and ambient
    sounds to help bring a game to life! Sound tends to have a very subtle effect
    on how players perceive a video game’s quality. A good-looking animation in a
    game can only be as good as its sound.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 声音效果！声音是唯一来自真实世界并进入游戏的部分。使用麦克风，声音设计师将录制常见的视频游戏声音，如配音、音乐、UI声音、武器和环境声音，以帮助使游戏栩栩如生！声音往往对玩家对视频游戏质量的感知有非常微妙的影响。游戏中看起来不错的动画，其声音效果也只能与其声音一样好。
- en: 'In this chapter, we will be going over the five elements of selecting or designing
    sounds. These are **Source**, **Envelope**, **Pitch**, **Frequency**, and **Layering**.
    Understanding these five elements will give you a strong foundation to ensure
    your sounds fit the overall design of the narrative, character, environment, and
    mechanics we’ve worked through so far. Then we will go into how to scale these
    elements in the game engine with our code and mixing! Sounds tell a story on an
    individual sound effect basis as well as working together to tell a greater, more
    in-depth story. Finally, we will go through specific examples of our sound design
    in our project as well as their implementation in Unity. These examples include
    magical sounds, footstep sounds, and ambient sounds. Here’s a quick summary of
    this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论选择或设计声音的五个要素。这些是**源**、**包络**、**音高**、**频率**和**分层**。理解这五个要素将为你提供一个坚实的基础，以确保你的声音适合我们迄今为止所工作的叙事、角色、环境和机制的整体设计。然后我们将讨论如何在游戏引擎中通过我们的代码和混音来扩展这些元素！声音在单个声音效果的基础上讲述故事，同时也共同讲述一个更大、更深入的故事。最后，我们将通过我们项目中的具体声音设计示例以及它们在Unity中的实现来探讨。这些示例包括魔法声音、脚步声和环境声音。以下是本章的简要总结：
- en: The five elements of sound design
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声音设计的五个要素
- en: Designing for scale
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规模化设计
- en: Our project’s sound design and implementation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们项目的声音设计和实现
- en: Triggering sound through player interaction
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过玩家交互触发声音
- en: Sound… design?
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 声音…设计？
- en: Sound design! The forgotten stepchild of video games, but also the soul and
    emotion behind them.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 声音设计！它是视频游戏中被遗忘的次子，但也是它们的灵魂和情感。
- en: A straightforward explanation of sound design is that a sound is recorded, processed,
    and then coded directly into a game. Therefore, this makes sound the only part
    of a video game that comes directly from the real world.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 声音设计的简单解释是，声音被录制、处理，然后直接编码到游戏中。因此，这使得声音成为视频游戏中唯一直接来自真实世界的部分。
- en: Any sound that we reference in this chapter can be found in `/Assets/Sounds/[Name]`.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中提到的任何声音都可以在 `/Assets/Sounds/[Name]` 中找到。
- en: The five elements of sound design
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 声音设计的五个要素
- en: The elements of sound design we’ll be discussing are source, envelope, pitch,
    frequency, and layering. These apply to the process of making an individual sound
    effect, as well as a broader scope of how sounds work together in a game.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要讨论的声音设计要素包括源、包络、音高、频率和分层。这些适用于制作单个声音效果的过程，以及声音在游戏中的更广泛作用。
- en: Source
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 源
- en: A source can be a person, place, or thing from which your inspiration comes
    or is obtained. Your source is what helps your listener understand the real-world
    characteristics of your sound. If you record the sound of a footstep hitting a
    grassy surface versus a concrete surface, the minute qualities and differences
    between these two sounds help us distinguish them. And thus, we can utilize the
    source as a creative limitation in creating our sounds authentically.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 源可以是一个人、一个地方或一个事物，它是你灵感的来源或获取途径。你的源是帮助你的听众理解你声音的真实世界特性的东西。如果你录制了脚步声击打草地表面和混凝土表面的声音，这两种声音之间的细微品质和差异帮助我们区分它们。因此，我们可以利用源作为创造我们声音的真实性的创造性限制。
- en: Limitations are what artists use to cut out all of the clutter in our brains
    to help create their visions. So, in our recording process, if we needed a magical
    water sound in a video game, we would record some water as a base layer. Or, if
    we wanted to record the sound for an animation of a dog rolling in dirt, the first
    and best thing to record would be the sound of a dog rolling in dirt. What we
    are creating sounds for helps us select what to record!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 限制是艺术家用来从我们的大脑中剔除所有杂乱，以帮助创造他们愿景的工具。因此，在我们的录音过程中，如果我们需要在视频游戏中录制神奇的水声，我们会先录制一些水声作为基础层。或者，如果我们想要录制一只狗在泥地里打滚的动画声音，首先和最好的录制内容就是狗在泥地里打滚的声音。我们正在为哪些声音创作帮助我们选择要录制的内容！
- en: Recording sounds can be a difficult process and has an entire art form behind
    it; while it will help with your growth as a sound designer, I highly recommend
    using existing sound libraries. Almost any sound that you can think of has already
    been recorded, so it makes more sense to just buy or download sounds online! This
    will help speed up your workflow drastically. If you don’t want to use sound libraries,
    then you can use a microphone! Using a microphone is a very in-depth process that
    we won’t be covering in this book because you could literally write entire books
    on this art.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 录制声音可能是一个困难的过程，它背后有着完整的艺术形式；虽然它将有助于你作为声音设计师的成长，但我强烈建议使用现有的声音库。几乎你能想到的任何声音都已经有人录制过了，所以直接在网上购买或下载声音更有意义！这将极大地加快你的工作流程。如果你不想使用声音库，那么你可以使用麦克风！使用麦克风是一个非常深入的过程，我们在这本书中不会涉及，因为你可以真正地写整本书来介绍这门艺术。
- en: 'Here are some popular free websites and sound libraries:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些流行的免费网站和声音库：
- en: 'Blipsounds: [https://blipsounds.com/community-library/](https://blipsounds.com/community-library/)'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Blipsounds: [https://blipsounds.com/community-library/](https://blipsounds.com/community-library/)'
- en: 'Andrew V Scott: [https://www.andrewvscott.com/Building-A-Large-SFX-Library-for-Free](https://www.andrewvscott.com/Building-A-Large-SFX-Library-for-Free)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Andrew V Scott: [https://www.andrewvscott.com/Building-A-Large-SFX-Library-for-Free](https://www.andrewvscott.com/Building-A-Large-SFX-Library-for-Free)'
- en: 'SKYES Audio: [https://www.skyesaudio.com/blog/2019/4/1/the-ultimate-free-sound-effects-list-free-to-download](https://www.skyesaudio.com/blog/2019/4/1/the-ultimate-free-sound-effects-list-free-to-download)'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'SKYES Audio: [https://www.skyesaudio.com/blog/2019/4/1/the-ultimate-free-sound-effects-list-free-to-download](https://www.skyesaudio.com/blog/2019/4/1/the-ultimate-free-sound-effects-list-free-to-download)'
- en: 'Freesound: [https://freesound.org/](https://freesound.org/)'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Freesound: [https://freesound.org/](https://freesound.org/)'
- en: There are many more that can be found with some internet searching. Don’t be
    afraid to look around to find what fits your needs.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 通过一些网络搜索，你还可以找到更多。不要害怕四处寻找适合你需求的东西。
- en: In video games, the source of a sound effect is usually determined by what you
    see visually. For an ice mage that casts an icy wind spell, you’d limit yourself
    to using wind and ice sounds to get started. If you have a gun made of jello that
    shoots tiny horses with the power of radioactive farts, you’ll likely utilize
    jello, horses, farting, and gun sounds.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在视频游戏中，声音效果来源通常由你视觉上看到的内容决定。对于一个施放冰风法术的冰法师，你会限制自己只使用风和冰的声音来开始。如果你有一把由果冻制成的枪，它用放射性屁的力量射出小马，你可能会利用果冻、马、放屁和枪的声音。
- en: So, if we take a magic sword that has metal textures, and purple magic VFX that
    runs along the blade, what kind of sounds are we going to look for? You’ve probably
    put together that we’ll use sounds from a magic sound library and some metallic
    ringing sounds.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，如果我们拿一把带有金属纹理的魔法剑，以及沿着剑刃运行的紫色魔法VFX效果，我们将寻找什么样的声音呢？你可能已经想到，我们将使用魔法声音库和一些金属的叮当声。
- en: Another way to determine your source is via story context. The same magic sword
    may look like it’s magic, but maybe the writers of the game determined the blade
    uses futuristic magic so you need to use sci-fi sound elements.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种确定声音来源的方法是通过故事背景。同样的魔法剑可能看起来很神奇，但也许游戏的编剧决定剑使用的是未来魔法，因此你需要使用科幻声音元素。
- en: It should be mentioned that there are many games that have limitations where
    the sound must fill in the gaps. A game that emulates graphics from an Atari 2600
    with realistic sound design might require some imagination. A green area that
    your player walks on could be grass or a toxic waste dump depending on the context
    of the game’s world.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 应该提到的是，有许多游戏在声音上有限制，必须填补这些空白。一个模仿Atari 2600图形并具有真实声音设计的游戏可能需要一些想象力。玩家行走的绿色区域可能是草地或有毒垃圾场，这取决于游戏世界的背景。
- en: Envelopes
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Envelopes
- en: An envelope is a way for sound designers to explain the volume of a sound over
    time (volume as in decibels, not 3D models). The two parts of an envelope you’ll
    use are the “attack” and “release.”
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 包络是声音设计师用来解释声音随时间变化的音量的方式（这里的音量是指分贝，而不是3D模型）。你将使用的包络的两个部分是“攻击”和“释放”。
- en: The attack, shown below in *Figure 10.1*, is the start of the sound, and the
    release is the end of the sound. We describe the attack and release of a sound
    by speed (i.e., fast and slow).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击，如图10.1所示，是声音的开始，释放是声音的结束。我们通过速度（即快和慢）来描述声音的攻击和释放。
- en: '![Diagram  Description automatically generated](img/B17304_10_01.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图表  自动生成的描述](img/B17304_10_01.png)'
- en: 'Figure 10.1: Envelope explanation'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.1：包络解释
- en: Attack
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 攻击
- en: An example of a sound with a slow attack would be something like a “sword whoosh”
    sound effect when a sword is slashed through the air. The sound starts off being
    almost inaudible and raises in volume over the course of half of a second. We
    can make the attack even slower by making the volume raise over the course of
    a few seconds. You can see a direct visual in *Figure 10.2* of how the envelope
    would look in its waveform. Sounds with a slower attack tend to appear more subtle
    and gentle to the player. Some other examples of sounds with a slow attack would
    be a car passing by or a kettle getting ready to whistle.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 具有慢攻击的声音的例子可以是当剑在空中挥舞时产生的“剑啸”声效果。声音一开始几乎听不见，在半秒内逐渐增加音量。我们可以通过让音量在几秒内增加来使攻击变得更慢。你可以在*图10.2*中直接看到包络在波形中的样子。具有较慢攻击的声音往往对玩家来说显得更微妙和温柔。其他一些具有慢攻击声音的例子包括汽车经过或水壶准备鸣哨。
- en: '![](img/B17304_10_02.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17304_10_02.png)'
- en: 'Figure 10.2: Fast attack sound'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.2：快速攻击声音
- en: An example of a sound with a fast attack as in *Figure 10.2* would be a punching
    sound effect. As soon as the sound starts, it will be almost at max volume, creating
    a transient sound. A transient sound is a sound with a faster attack, seeming
    more aggressive to the player, usually to create an impact of sorts to convey
    power or shock the player. Some other examples of a sound with a fast attack would
    be a gun firing, a cymbal crash as seen in *Figure 10.3*, or a hammer hitting
    an anvil.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于*图10.2*中快速攻击的例子，可以是击打声效果。声音一响起，几乎就是最大音量，创造出瞬态声音。瞬态声音是一种攻击速度较快的声音，对玩家来说似乎更具侵略性，通常用来传达力量或震惊玩家。其他一些具有快速攻击声音的例子包括枪声、如图10.3所示的钹声，或者锤子击打铁砧的声音。
- en: '![Chart, line chart  Description automatically generated](img/B17304_10_03.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图表，折线图  自动生成的描述](img/B17304_10_03.png)'
- en: 'Figure 10.3: Cymbal crash example of fast attack'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.3：快速攻击的钹声示例
- en: Release
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 释放
- en: Then we have the release of a sound. As you can probably guess, we’ll be using
    speed to determine the nature of the release. An example of a sound with a slower
    release would be a car engine turning off or an explosion. Most sound effects
    will have a slower release as it sounds more appealing.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是我们有声音的释放。正如你可能猜到的，我们将使用速度来确定释放的性质。具有较慢释放的声音的例子可以是汽车引擎关闭或爆炸声。大多数音效都将具有较慢的释放，因为它听起来更吸引人。
- en: 'There aren’t many examples that you will hear in video games that will have
    a short release. A hard cutoff in a sound effect is unnatural and unpleasant to
    hear in most cases, barring some advanced stylized techniques. A sound with a
    slow release could be a big gong ringing out, or the sound of a car driving into
    the distance while you hear the sound’s volume dissipate. For the sake of example,
    here is what a slow release looks like:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在视频游戏中，你将听到的具有短释放的例子并不多。在音效中，硬截止通常在大多数情况下听起来不自然且令人不快，除非是一些高级的样式化技巧。具有慢释放的声音可以是巨大的钟声响起，或者汽车驶入远处的声音，同时你听到声音的音量逐渐消失。为了举例说明，这里是一个慢释放的例子：
- en: '![Chart, line chart, histogram  Description automatically generated](img/B17304_10_04.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图表，折线图，直方图  自动生成的描述](img/B17304_10_04.png)'
- en: 'Figure 10.4: Slow release sound'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.4：慢释放声音
- en: 'And here is what a fast release looks like:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个快释放的例子：
- en: '![Chart, line chart  Description automatically generated](img/B17304_10_05.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图表，折线图  自动生成的描述](img/B17304_10_05.png)'
- en: 'Figure 10.5: Fast release sound'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.5：快释放声音
- en: Another element of sound is pitch.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 声音的另一个元素是音高。
- en: Pitch
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 音高
- en: Pitch is an element of sound that determines its “highness” or “lowness.”
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 音高是决定声音“高低”的元素。
- en: This is probably one of the easiest concepts to grasp as we hear it in movies,
    video games, and even day-to-day life. A big, buff character in an animated movie
    will commonly have a low-pitched voice, while a smaller, cuter character might
    have a high-pitched voice.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是我们通过电影、视频游戏甚至日常生活中的体验，最容易理解的概念之一。在动画电影中，一个高大健壮的角色通常会有低沉的声音，而一个较小、可爱的角色可能会有尖细的声音。
- en: The example given above is one of the most common reasons to control the pitch
    of a sound effect – size. The other one is speed. Think of a car that is going
    slowly versus one that is going quickly. The one that is going faster has an engine
    revving at a higher pitch while an idle or slow-moving car will resonate low-frequency
    bellows.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 上面给出的例子是控制声音效果音调的最常见原因之一——大小。另一个原因是速度。想象一辆慢慢行驶的汽车和一辆快速行驶的汽车。行驶速度较快的汽车发动机转速较高，而闲置或缓慢移动的汽车则会发出低频的风箱共鸣声。
- en: To fully understand pitch, it will help to understand frequency, which is directly
    tied to it.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要完全理解音调，了解频率会有所帮助，因为它们直接相关。
- en: Frequency
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 频率
- en: Frequency is the most complicated element to explain, but it’s one of the most
    important to understand. You have probably listened to music in a car or on a
    stereo and have seen the option to control “bass” or “treble.” Treble refers to
    “higher frequencies” while bass refers to “lower frequencies.” The human hearing
    range is from 20 Hz to 20,000 Hz (Hertz), and many sounds, no matter if they sound
    high-pitched or low-pitched, hit every single frequency. When you play a sound
    in your car and turn down the “bass,” you’re turning down the lower frequencies.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 频率是解释起来最复杂，但也是理解起来最重要的元素之一。你可能已经在汽车或立体声音响中听过音乐，并看到过控制“低音”或“高音”的选项。高音指的是“较高频率”，而低音指的是“较低频率”。人类的听觉范围是20
    Hz到20,000 Hz（赫兹），许多声音，无论听起来是高音还是低音，都会触及每一个频率。当你在你车里播放声音并降低“低音”时，你实际上是在降低较低频率。
- en: The best example is white noise. White noise is simply a sound that plays every
    single frequency at the same volume. If you’ve never heard it, it sounds like
    TV static. You can listen to the sound in `/Assets/Sounds/WhiteNoise.wav`. You
    can find it in the project on GitHub, which you can find a link for in this book’s
    *Preface*.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 最好的例子是白噪声。白噪声简单地说就是以相同音量播放每个频率的声音。如果你从未听过它，它听起来就像电视静电。你可以在`/Assets/Sounds/WhiteNoise.wav`中听到这个声音。你可以在GitHub上的项目中找到它，这本书的*前言*中有一个链接。
- en: The weird part about this sound is that, just by listening, it feels like the
    sound consists mostly of higher frequencies. But we can use a tool called an equalizer
    (or EQ for short) to visualize the frequencies that are playing, as well as controlling
    the volume of individual frequencies.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这个声音奇怪的地方在于，仅仅通过听，它感觉主要由高频组成。但我们可以使用一个叫做均衡器（或简称EQ）的工具来可视化正在播放的频率，以及控制单个频率的音量。
- en: Generally, higher frequencies are perceived as louder, which is an important
    fact to consider when making sounds for your game. If you want to make a sound
    stand out, including higher frequencies will help quite a bit, while cutting them
    out might help blend sounds into the background. But if you want every sound to
    stand out, but also want them to have weight and power, we will have to utilize
    our lower frequencies. So, a balance must be struck.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，较高的频率会被感知为较响亮，这在为你的游戏制作声音时是一个重要的考虑因素。如果你想使某个声音突出，包括较高的频率会有很大帮助，而去除它们可能会帮助将声音融入背景。但如果你想让每个声音都突出，同时还想让它们有重量和力量，我们就必须利用我们的低频。因此，必须找到一个平衡点。
- en: The yellow lines on this graph indicate where the frequencies are hitting, and
    you can see that it’s practically at the same volume across the whole spectrum.
    This means that every single frequency has generally the same frequency volume.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这张图上的黄色线条表示频率的冲击点，你可以看到在整个频谱上几乎处于相同的音量。这意味着每个频率通常具有相同的音量。
- en: '![](img/B17304_10_06.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17304_10_06.png)'
- en: 'Figure 10.6: Example of similar-frequency volume'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.6：相似频率音量示例
- en: I’ve provided a few sounds below so you can all hear the differences when we
    remove the lower and higher frequencies, along with a graph showing which frequencies
    we removed. As you listen, you’ll hear and see that every sound seems to cover
    higher and lower frequencies to a certain degree, and we can control these frequencies
    to elicit unique feelings with each sound.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我提供了一些声音，这样你们在移除高低频时可以听到差异，同时还有一个图表显示我们移除了哪些频率。当你听的时候，你会听到并看到每个声音似乎都覆盖了一定程度的高低频，我们可以控制这些频率，以每个声音唤起独特的感受。
- en: Listen to `Assets/Sounds/Explosion.wav` then `Assets/Sounds/ExplosionLP.wav`
    to hear what it’s like to have the higher frequencies cut. And then listen to
    `ExplosionHP.wav` to hear what it’s like to have the lower frequencies cut out.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 听一下`Assets/Sounds/Explosion.wav`然后是`Assets/Sounds/ExplosionLP.wav`，以了解高频被截断后的声音效果。然后听一下`ExplosionHP.wav`，以了解低频被截断后的声音效果。
- en: Listen to Assets/Sounds/`BeamSword.wav` then `Assets/Sounds/BeamSwordLP.wav`
    to hear what it’s like to have the higher frequencies cut. And then listen to
    `BeamSwordHP.wav` to hear what it’s like to have the lower frequencies cut out.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 听一下`Assets/Sounds/BeamSword.wav`然后是`Assets/Sounds/BeamSwordLP.wav`，以了解高频被截断后的声音效果。然后听一下`BeamSwordHP.wav`，以了解低频被截断后的声音效果。
- en: Listen to `Assets/Sounds/MagicIceSpell.wav` then `Assets/Sounds/MagicIceSpellLP.wav`
    to hear what it’s like to have the higher frequencies cut. And then listen to
    `MagicIceSpellHP.wav` to hear what it’s like to have the lower frequencies cut
    out.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 听一下`Assets/Sounds/MagicIceSpell.wav`然后是`Assets/Sounds/MagicIceSpellLP.wav`，以了解高频被截断后的声音效果。然后听一下`MagicIceSpellHP.wav`，以了解低频被截断后的声音效果。
- en: Listen to `Assets/Sounds/Footstep.wav` then `Assets/Sounds/``FootstepLP.wav`
    to hear what it’s like to have the higher frequencies cut. And then listen to
    `Assets/Sounds/FootstepHP.wav` to hear what it’s like to have the lower frequencies
    cut out.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 听一下`Assets/Sounds/Footstep.wav`然后是`Assets/Sounds/FootstepLP.wav`，以了解高频被截断后的声音效果。然后听一下`Assets/Sounds/FootstepHP.wav`，以了解低频被截断后的声音效果。
- en: The reason frequency is one of the toughest concepts to grasp is because your
    ears aren’t trained to listen for it. We just hear a sound and know whether it
    sounds good or not.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 频率之所以是最难掌握的概念之一，是因为你的耳朵没有经过训练去聆听它。我们只是听到一个声音，就知道它听起来好不好。
- en: Layering
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 层次
- en: Layering is the simplest concept to grasp of the five elements. While visual
    mediums are almost all multiplicative, sound mediums are additive. Layering is
    simply the process of playing multiple sounds at the same time in a unique sequence.Next,
    we have four unique sound effects that stand alone. We have the “impact,” the
    “bloom,” the “tail,” and the “bass.” If you listen to each on their own, they
    feel empty, but as soon as we add them all together, we have a beautiful explosion
    sound.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 层次是五个元素中最容易理解的概念。虽然视觉媒介几乎都是乘法关系，但声音媒介是加法关系。层次简单来说就是以独特的顺序同时播放多个声音的过程。接下来，我们有四个独特的音效，它们各自独立。我们有“冲击”、“绽放”、“尾音”和“低音”。如果你单独听每个音效，它们会感觉空洞，但当我们把它们全部加在一起时，我们就得到了一个美丽的爆炸声。
- en: This is a useful process because we can take a source like “Sci-fi Energy” and
    “Metal Sword” and combine these together to make a “Sci-Fi Energy Sword.” Or,
    we can take our horse fart gun and choose our layers based on the description
    and functionality of the gun. Listen to `Assets/Sounds/ScifiEnergySword01.wav`,
    then `Assets/Sounds/ScifiEnergySword02.wav`, then `Assets/Sounds/ScifiEnergySword03.wav`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个有用的过程，因为我们可以从“科幻能量”和“金属剑”这样的源文件中提取，将它们结合起来制作一个“科幻能量剑”。或者，我们可以拿我们的马屁枪，根据枪的描述和功能来选择我们的层次。听一下`Assets/Sounds/ScifiEnergySword01.wav`，然后是`Assets/Sounds/ScifiEnergySword02.wav`，然后是`Assets/Sounds/ScifiEnergySword03.wav`。
- en: Layering also allows us to break down our frequencies to more isolated parts.
    We can take a sound that is primarily lower frequencies and add it to a regular
    sound to give it more weight and power. Listen to `Assets/Sounds/Splash01.wav`,
    then listen to the lower frequencies added to `Assets/Sounds/Splash02.wav` to
    hear how it becomes more powerful.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 层次还允许我们将频率分解成更独立的部分。我们可以将主要包含低频的声音添加到常规声音中，以增加它的重量和力量。听一下`Assets/Sounds/Splash01.wav`，然后听一下添加到`Assets/Sounds/Splash02.wav`中的低频，以了解它如何变得更强大。
- en: We can also layer together two sounds with different envelopes, one with a long
    attack, and one with a fast attack to create a cool buildup effect to add impact.
    Listen to `Assets/Sounds/EarthSpell01.wav` to hear the sound before we add a buildup,
    and then listen to `Assets/Sounds/EarthSpell02.wav` to hear what happens when
    we add a buildup to hear how we can change the story of our sound!
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将两个具有不同包络的音效叠加在一起，一个具有较长的攻击时间，另一个具有较快的攻击时间，以创建一个酷炫的累积效果，增加冲击力。在添加累积效果之前，请听一下`Assets/Sounds/EarthSpell01.wav`中的声音，然后听一下`Assets/Sounds/EarthSpell02.wav`，以了解添加累积效果后会发生什么，这样我们可以了解如何改变我们声音的故事！
- en: Now that we’ve gone over what makes up a sound and how it applies to a single
    sound effect being created, we’ll go over the applications of these five elements
    on a broader scale of a game.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了构成声音的要素以及它们如何应用于单个音效的创建，接下来我们将探讨这些五个要素在游戏更广泛的应用。
- en: Designing for scale
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 规模化设计
- en: Unlike art, which is multiplicative, making sound effects is a completely additive
    process. As an example, if we have 100 sounds without paying attention to the
    volume or frequency range of them, this can end up creating a lot of clutter.
    In the space of a video game, we must be prepared for any sounds, whether it’s
    a sword swipe, ambient sound, an orchestral score, or a voiceover reading, to
    be played at the same time. We have tools to control these sounds individually,
    but we must make sure that we have what’s called a balanced mix.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 与艺术不同，制作音效是一个完全累加的过程。例如，如果我们有100个声音，但没有注意它们的音量或频率范围，这可能会导致很多杂音。在视频游戏的空间中，我们必须为任何声音做好准备，无论是剑挥舞声、环境音、管弦乐或旁白，都要同时播放。我们有工具可以单独控制这些声音，但我们必须确保我们有一个所谓的平衡混音。
- en: How to approach making sounds for a game
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如何为游戏制作声音
- en: So where do sounds go in your game? Sounds can often go overlooked since they
    are technically not necessary to make what is defined as a “game.” And because
    of this, it’s tough to think immediately about what needs sound and what doesn’t.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 那么声音在你的游戏中应该放在哪里呢？声音往往会被忽视，因为从技术上讲，它们不是制作“游戏”所必需的。正因为如此，立即考虑哪些需要声音，哪些不需要是很困难的。
- en: Put quite simply, I like to look for anything that moves in a game. Even down
    to the smallest subtleties. Adding sounds for an NPC can include breathing, the
    sound of their feet hitting a surface, the sound of their clothes rustling...
    All of these are viable sounds to put into a game. We’ll talk about some reasons
    later in *Chapter 11* as to why this much attention to detail might be difficult
    to achieve.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，我喜欢寻找游戏中任何移动的元素。甚至包括最小的细微之处。为NPC添加声音可以包括呼吸声、他们的脚步声击打地面的声音、衣服的沙沙声... 所有这些都可以是游戏中可行的声音。我们将在第11章中讨论一些原因，说明为什么如此关注细节可能很难实现。
- en: Sometimes the art in a game is minimal. What you see isn’t quite enough information,
    so use your imagination as to what sounds could be included! The more you add
    to the sound, the better. Sometimes a game can be nothing but pixel-art, and you
    might be incentivized to add fewer sounds, but you should always think about what
    attention to detail you can hear that isn’t being seen! If a player falls into
    a pit where you can’t see what’s happening, creating an audible experience can
    tell a more detailed story than visuals can allow! Maybe there are spikes, a bottomless
    pit, or lava! We would want the player to hear the bubbles of the lava, the impact
    of the spikes impaling the player, or the whistle of a player falling off a steep
    cliff!
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 有时游戏中的艺术表现是简约的。你所看到的信息并不足以提供足够的信息，因此请发挥你的想象力，思考可能包含哪些声音！你添加的声音越多，效果越好。有时一个游戏可能仅仅是像素艺术，你可能会被鼓励添加较少的声音，但你应该始终思考你能听到的细节，而这些细节是看不到的！如果玩家掉入你无法看到的地方，创造一个可听到的体验可以讲述比视觉更详细的故事！也许有尖刺、无底洞或熔岩！我们希望玩家能听到熔岩的气泡声，尖刺刺穿玩家的冲击声，或者玩家从陡峭的山崖上掉落时的尖叫声！
- en: Our project’s sound design and implementation
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们项目的声音设计和实现
- en: We find that the best way to learn is to jump in headfirst and start understanding
    how things work. This process is relatively simple now that we’ve gone over the
    Unity engine.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发现，最好的学习方法是全力以赴地投入其中，开始理解事物是如何运作的。现在我们已经了解了Unity引擎，这个过程相对简单。
- en: Getting our first sound to play
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 播放第一个声音
- en: To start off, let’s get some audio files into our project. We’ll start by creating
    a folder called `Audio` in Unity, and then dragging our `Assets/Sounds/TestTone.wav`
    file into it.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们将一些音频文件放入我们的项目中。我们将在Unity中创建一个名为`Audio`的文件夹，然后将`Assets/Sounds/TestTone.wav`文件拖入其中。
- en: Now that we have our audio in the folder, let’s create an empty GameObject in
    the scene right by our player. We’re going to begin by placing an object in the
    scene next to our character. For now, let’s call this GameObject `Sound Emitter`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将音频文件放在了文件夹中，让我们在场景中为玩家创建一个空的GameObject。我们将首先在场景中放置一个与我们的角色相邻的对象。暂时让我们称这个GameObject为`Sound
    Emitter`。
- en: As it stands, this GameObject won’t do anything. So, let’s click and drag our
    audio from its Unity folder directly into our `Sound Emitter` GameObject’s inspector.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 按照现状，这个GameObject不会做任何事情。所以，让我们点击并拖动我们的音频文件从其Unity文件夹直接到`Sound Emitter`GameObject的inspector中。
- en: This will automatically create an **Audio Source** component on the GameObject.
    This is what allows our sound effects to play in Unity! Let’s go ahead and hit
    play to see what happens!
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在GameObject上自动创建一个**Audio Source**组件。这是允许我们在Unity中播放声音的组件！让我们继续并点击播放来查看会发生什么！
- en: If you followed properly, you likely already heard your first sound! Congrats!
    This is of course just a placeholder sound, so we’ll focus more on adding other
    sounds that we’ll use in the game. In this process, we’ll go over the parameters
    we can change on the **Audio Source** component.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正确地操作了，你很可能已经听到了你的第一个声音！恭喜！当然，这只是一个占位符声音，所以我们将更多地关注添加游戏中将使用的其他声音。在这个过程中，我们将讨论可以在**Audio
    Source**组件上更改的参数。
- en: Organization
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 组织
- en: To better organize this project, let’s go ahead and add a new prefab called
    `====SFX====`. We will put all our sound effects that exist in our scene into
    here.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地组织这个项目，让我们继续添加一个新的prefab，名为`====SFX====`。我们将把场景中存在的所有音效放入这里。
- en: In addition to this, we’ll create two new folders in `/Assets/Sounds/` in our
    GitHub project. We’ll have a `sources` folder and a `prefabs` folder.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这个之外，我们将在我们的GitHub项目中在`/Assets/Sounds/`目录下创建两个新的文件夹。我们将有一个`sources`文件夹和一个`prefabs`文件夹。
- en: Music
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 音乐
- en: Music is a massive part of video games. Sound effects help bring a game to life
    through detailed ambient sounds, player sounds, and expressive voiceovers, but
    music is what helps drive moment-to-moment emotions for the player.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 音乐是电子游戏的重要组成部分。音效通过详细的环境声音、玩家声音和表达性的旁白帮助游戏栩栩如生，但音乐是帮助推动玩家每一刻情绪的关键。
- en: You might have some questions about the difference between sounds and music.
    Technically they are the same, but to make it easier to communicate about them,
    most professional sound designers will consider music to be the score, or pitched
    instruments like piano, violins, guitars, and drums working together to make a
    cohesive song or musical track to listen to as background music. Meanwhile, sound
    effects are usually real-life instances like footsteps, swords, UI sounds, etc.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能对声音和音乐之间的区别有一些疑问。技术上它们是相同的，但为了更容易地交流，大多数专业音效设计师会将音乐视为配乐，或者是有音高的乐器，如钢琴、小提琴、吉他和大鼓，它们一起创作出一个连贯的歌曲或音乐轨道，作为背景音乐。与此同时，音效通常是现实生活中的实例，如脚步声、剑声、UI声音等。
- en: Let’s add music to our game! To add music to our game, all we must do is take
    our `SFX` GameObject that’s in our scene and rename it to `Music`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在游戏中添加音乐！要添加音乐到我们的游戏，我们只需要将场景中的`SFX`GameObject重命名为`Music`。
- en: Let’s give our `Assets/Sounds/Music_01.wav` a listen. First, select the audio
    file in your folder and click the looping button at the bottom of the inspector.
    It’s the button right above the waveform to the far right, seen in *Figure 10.7*
    below.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们听听`Assets/Sounds/Music_01.wav`。首先，在文件夹中选择音频文件，然后在inspector底部的循环按钮上点击。这是在下面的*图10.7*中看到的，位于波形右侧的按钮上方。
- en: '![](img/B17304_10_07.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图10.7：inspector中的波形播放UI](img/B17304_10_07.png)'
- en: 'Figure 10.7: Wave play UI in inspector'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.7：inspector中的波形播放UI
- en: Now, hit the **Play** button, which is the sideways triangle to the right in
    the inspector, but to the left of the looping button.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击**播放**按钮，这是inspector中向右的侧向三角形，但在循环按钮的左侧。
- en: If you listen to the music all the way through until the end, you’ll recognize
    that the music is a seamless loop! To hear this in action in the game, let’s take
    our `Sound Emitter` GameObject in the scene, and rename it to `Music`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你一直听到音乐结束，你会意识到音乐是一个无缝循环！为了在游戏中听到这个效果，让我们将场景中的`Sound Emitter`GameObject重命名为`Music`。
- en: Next, let’s click and drag our music into our new `Music` GameObject. We’ll
    be putting it into the **AudioClip** space of our **Audio Source** component seen
    in *Figure 10.8.*
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们点击并拖动我们的音乐到新的`Music`游戏对象中。我们将将其放入*图10.8*中看到的**Audio Source**组件的**AudioClip**空间。
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](img/B17304_10_08.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![计算机屏幕截图，描述自动生成，置信度中等](img/B17304_10_08.png)'
- en: 'Figure 10.8: Audio Source component'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.8：Audio Source组件
- en: If we were to test playing the game right now, we would be able to hear sound
    but it would stop eventually. But we pressed the looping button in the inspector
    for the `.wav` file, right? So why isn’t it working?
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在测试玩游戏，我们能够听到声音，但最终它会停止。但我们按下了检查器中`.wav`文件的循环按钮，对吧？那么为什么它不起作用呢？
- en: Well, that looping button was strictly for playback in that one instance. If
    we want to loop the sound on the **Audio Source** component, we must check **Loop**
    as on, seen under **Play On Awake** in *Figure 10.8*. Now if we play the game,
    our music will loop! How exciting!
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，那个循环按钮只是为了在那个特定实例中播放。如果我们想在**Audio Source**组件上循环声音，我们必须在*图10.8*中的**Play On
    Awake**下检查**Loop**。现在如果我们玩游戏，我们的音乐将会循环！多么令人兴奋！
- en: Later on in this chapter, we will adjust the volumes of all of the sounds in
    the game, otherwise called “the mix,” or “mixing the game.” We aren’t going to
    mix the game immediately because the volume of every sound in a game is entirely
    dependent on how it sounds relative to other sound effects!
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的后面部分，我们将调整游戏中所有声音的音量，这通常被称为“混音”或“游戏混音”。我们不会立即混音游戏，因为游戏中每个声音的音量完全取决于它相对于其他音效的声音。
- en: 2D sounds
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2D声音
- en: Up until now, we’ve only heard 2D sound effects. 2D sound effects are sounds
    that have no in-game location and will play anywhere for the player. No matter
    where you move on the map, a 2D sound will play as a consistent trigger.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只听到了2D声音效果。2D声音效果是没有游戏位置的声音，将在任何地方为玩家播放。无论你在地图上移动到哪里，2D声音都会作为一个一致的触发器播放。
- en: 'The following is a list of 2D sounds that you’ve likely heard while playing
    video games:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在玩电子游戏时可能听到的2D声音列表：
- en: '**Music**: Intro music that plays during the opening menu before you press
    play'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**音乐**：在按下播放按钮之前，在开场菜单中播放的介绍音乐'
- en: '**UI**: Pressing a button, hearing the “click” of the button'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户界面（UI）**：按下按钮时听到的“咔哒”声'
- en: '**Voiceover**: The narrator speaking over gameplay'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**旁白**：在游戏过程中说话的解说员'
- en: '**Ambient sound**: General sound being played when in an area, such as wind'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**环境声音**：在某个区域播放的通用声音，例如风声'
- en: All the categories above can be triggered by player action, by a game event,
    by just starting the game, or by entering a new area of a game. But not all of
    them will exist in a 3D space in the game. This makes them 2D sound effects.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 上述所有类别都可以通过玩家操作、游戏事件、开始游戏或进入游戏的新区域来触发。但并非所有这些都会存在于游戏中的3D空间中。这使得它们成为2D声音效果。
- en: So now that we’ve gone over what 2D sounds are, let’s talk about 3D sounds.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，既然我们已经讨论了2D声音是什么，那么让我们来谈谈3D声音。
- en: 3D sounds
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3D声音
- en: Unlike 2D sounds, 3D sounds exist in the world of the game. When you play a
    game, you can usually tell what sounds are 3D by moving around in the world and
    hearing what sounds occur in which ear. This is called panning.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 与2D声音不同，3D声音存在于游戏的世界中。当你玩游戏时，你可以通过在世界中移动并听到哪些声音在哪个耳朵中发生来判断哪些声音是3D的。这被称为横滚。
- en: Panning is the stereo quality of a sound. Have you ever listened to a song with
    headphones on and taken them off one of your ears only to hear some of the instruments
    playing instead of the full song? This is what panning is! The music producers
    who made that song purposefully put those instruments in one ear to create better
    “stereo imaging” (we won’t be going much deeper than this, I promise).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 横滚是指声音的立体声质量。你有没有在戴耳机听歌时，只摘下一只耳朵，结果听到的是部分乐器演奏而不是整首歌？这就是横滚的原理！制作那首歌的音乐制作人故意将那些乐器放在一只耳朵里，以创造更好的“立体声成像”（我保证不会深入探讨这个话题）。
- en: So in the real world, if someone is speaking on your left, you will hear them
    in your left ear while you won’t hear them as much in your right ear. We want
    to recreate this feeling in video games. So, we define positional sound as 3D
    sounds.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在现实世界中，如果有人在你的左边说话，你会在左耳听到他们，而右耳听到的声音会少一些。我们希望在电子游戏中重现这种感觉。因此，我们将位置声音定义为3D声音。
- en: Using 3D sounds
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用3D声音
- en: Let’s do a little experiment. Let’s take our `Music` GameObject and move the
    `Spatial Blend` option from `0 to 1`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们做一个实验。让我们将`Music`GameObject的`Spatial Blend`选项从`0`调整到`1`。
- en: We now have spatial audio! This means that our sounds will be in 3D!
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了空间音频！这意味着我们的声音将在3D中！
- en: As it stands, it might be difficult to pinpoint exactly where the music is playing
    from because there’s no visual indicator for it. So, to fix this, I like to create
    a sphere GameObject as a child of our audio source to visualize exactly where
    it lies!
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 就目前而言，可能很难确切地指出音乐是从哪里播放的，因为没有视觉指示器。所以，为了解决这个问题，我喜欢创建一个作为音频源子对象的球体GameObject来可视化它确切的位置！
- en: '![](img/B17304_10_09.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B17304_10_09.png)'
- en: 'Figure 10.9: Sphere GameObject being set to a child object'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.9：将球体GameObject设置为子对象
- en: Now when we hit **play**, we can see exactly where the audio source is playing
    from! Next, we will talk about how to control the parameters of our 3D sound effects.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们点击**播放**，我们可以确切地看到音频源是从哪里播放的！接下来，我们将讨论如何控制我们的3D音效参数。
- en: Audio listener part I
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 音频监听器第一部分
- en: How are we able to hear sounds in a game? We hear them through our audio listener.
    It’s a component that we can place on any GameObject that acts as a virtual pair
    of ears. Placing this listener in most cases is very simple, but sometimes we
    require more complex integration.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何在游戏中听到声音？我们是通过音频监听器来听到声音的。这是一个我们可以放置在任何GameObject上的组件，它充当一对虚拟的耳朵。在大多数情况下，放置这个监听器非常简单，但有时我们需要更复杂的集成。
- en: 'In a game that uses a first-person camera, it’s simple: we just add the listener
    to the camera GameObject and we call it a day.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用第一人称相机的游戏中，这很简单：我们只需将监听器添加到相机GameObject中，然后就算完成了。
- en: We use an audio listener on the camera because it acts as the ears of the player.
    But sometimes the camera can be in an isometric view, and the camera is too far
    from the player to properly pan and hear sounds as they move around in the world,
    so we offset the audio listener on a new GameObject to be offset from the camera.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在相机上使用音频监听器，因为它充当玩家的耳朵。但有时相机可能处于等距视图，并且相机离玩家太远，无法正确地平移并听到随着它们在世界中移动的声音，因此我们将在一个新的GameObject上偏移音频监听器，使其与相机偏移。
- en: We’ll get back to this in the *Audio listener part II* section. For now, let’s
    set up some 3D sound settings. We won’t be able to utilize the audio listener
    in a practical sense until we get our 3D sounds set up.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在**音频监听器第二部分**中回到这个问题。现在，让我们设置一些3D音效设置。在我们设置好3D声音之前，我们无法在实际中利用音频监听器。
- en: 3D sound settings
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3D音效设置
- en: When you hear a sound in real life, you can usually get close to it and it will
    become louder, while when you get further away from it, it gets quieter, and eventually
    becomes silent. We can control this effect using the 3D sound settings on our
    **Audio Source** component.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在现实生活中听到声音时，你通常可以靠近它，它就会变得更响，而当你远离它时，它就会变得 quieter，最终变得无声。我们可以通过在**音频源**组件上的3D音效设置来控制这种效果。
- en: We’ll be focusing on **Min Distance** and **Max Distance** for our 3D sound
    settings.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将专注于3D音效设置中的**最小距离**和**最大距离**。
- en: Go ahead and change **Max Distance** to 10 in the **Audio Source** component
    and hit **Play**. Assuming you still have the sphere on your GameObject, get closer
    and further away from it in-game. To help visualize this further, let’s undock
    our scene tab in Unity and put it side by side with our **Game** tab.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在音频源组件中，将**最大距离**改为10，然后点击**播放**。假设你还在你的GameObject上保留着球体，在游戏中靠近它再远离它。为了进一步可视化，让我们在Unity中将场景标签页取消停靠，并将其与我们的**游戏**标签页并排放置。
- en: Now that we’ve done this, we can visualize the min and **max distance** with
    a wireframe gizmo sphere in-game! And we can see that when we move our player
    outside of the range of the sphere, we will no longer hear the sound.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经做了这些，我们可以在游戏中使用线框球体工具来可视化最小和**最大距离**！我们可以看到，当我们把玩家移动到球体范围之外时，我们将不再听到声音。
- en: With our **max distance** slider, we can control the distance from where we
    can hear the sound. And with **Min Distance**, we can control at what point the
    sound will be the loudest. Let’s go ahead and change the min distance to 3\. You’ll
    notice that the smaller sphere inside of the larger sphere changes, as shown later
    in the chapter in *Figure 10.17*.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们的**最大距离**滑块，我们可以控制我们能听到声音的距离。而使用**最小距离**，我们可以控制声音最响亮的位置。让我们将最小距离改为3。你会注意到，在较大球体内部的较小球体会随之改变，如图10.17中所示。
- en: When we move our player inside of this sphere, you will notice that there is
    no panning. This is because the sound has reached its maximum volume, and inside
    of the smaller sphere, the sound will turn into a 2D sound!
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将玩家移动到这个球体内部时，你会注意到没有声像。这是因为声音已经达到最大音量，在较小的球体内部，声音将变成2D声音！
- en: Lastly, we just want to take **Volume Rolloff** and set it to **Linear Rolloff**
    instead of **Logarithmic**. The reason we do this is when you change the max distance
    to a number less than 500 in **Logarithmic** mode, the sound doesn’t actually
    get cut off at that distance. So if we were to set the max distance to 10, then
    we would continue to hear it even if we’re 400 units across the map, even though
    we set the max distance to much less than this.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们只想将**音量衰减**设置为**线性衰减**，而不是**对数衰减**。我们这样做的原因是，当你在**对数衰减**模式下将最大距离更改为小于500的数字时，声音实际上并不会在那个距离被切断。所以如果我们把最大距离设置为10，即使我们在地图上400个单位的位置，我们仍然会听到它，尽管我们设置的最大距离远小于这个值。
- en: 'For reference’s sake, here is **Logarithmic**:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 为了参考，这里是对数衰减的**对数**：
- en: '![](img/B17304_10_10.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17304_10_10.png)'
- en: 'Figure 10.10: Logarithmic Rolloff'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.10：对数衰减
- en: 'And here is **Linear**:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是**线性**：
- en: '![](img/B17304_10_11.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17304_10_11.png)'
- en: 'Figure 10.11: Linear Rolloff'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.11：线性衰减
- en: Audio listener part II
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 音频监听器第二部分
- en: You may have noticed that the audio feels a tiny bit off while your player is
    inside of the sphere. Usually, when our player passes the sphere, it isn’t at
    its loudest; it only reaches its loudest when the camera is next to the sphere.
    This is because the audio listener for Unity defaults to being set on the camera.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，当你的玩家在球体内部时，音频感觉有点不对劲。通常，当我们的玩家穿过球体时，它并不是最响的；它只有在摄像机靠近球体时才达到最响。这是因为Unity的音频监听器默认设置为在摄像机上。
- en: In a third-person game, like the one we’re making, we’ll want to add it to the
    player, but there’s a catch. We want it on the player without rotating with the
    player. We want to rotate it with the camera, showing the selection in *Figure
    10.12* below.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个第三人称游戏中，就像我们正在制作的，我们希望将其添加到玩家身上，但有一个问题。我们希望它在玩家身上，而不随玩家旋转。我们希望它随摄像机旋转，如下面的*图10.12*所示进行选择。
- en: '![Graphical user interface, text, application  Description automatically generated](img/B17304_10_12.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序  自动生成的描述](img/B17304_10_12.png)'
- en: 'Figure 10.12: Selecting the camera in the Hierarchy'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.12：在层次结构中选择摄像机
- en: If we open our scene, we can see that `MyvariWithCameraRig` has `Main Camera`
    attached. And inside the inspector, we’ll find a component called **Audio Listener**,
    shown below in *Figure 10.13*.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们打开我们的场景，我们可以看到`MyvariWithCameraRig`已经附加了`Main Camera`。在检查器中，我们会找到一个名为**音频监听器**的组件，如下面的*图10.13*所示。
- en: '![Graphical user interface, text, application  Description automatically generated](img/B17304_10_13.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序  自动生成的描述](img/B17304_10_13.png)'
- en: 'Figure 10.13: Audio Listener on Main Camera in Inspector'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.13：检查器中的主摄像机上的音频监听器
- en: Now as an experiment, let’s remove the **Audio Listener** here, and move it
    directly onto our main character. Just placing it on the `Character` GameObject
    will work just fine.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，作为一个实验，让我们在这里移除**音频监听器**，并将其直接移动到我们的主要角色上。只需将其放置在`Character`游戏对象上即可。
- en: Now play the game, and move about and away from our sphere object, and rotate
    around it. You’ll notice that the panning is all over the place! From our perspective
    watching the character, it’s hard to tell where information is coming from because
    we’re not in the shoes of our character; we have a third-person perspective.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在玩游戏，并在球体对象周围移动和远离，旋转它。你会注意到声像到处都是！从我们的视角观察角色，很难判断信息来自哪里，因为我们不是站在角色的位置；我们有一个第三人称视角。
- en: In a game like this, we could probably get away with just placing our **Audio
    Listener** on the camera, but it would help quite a bit to have it on our character
    model. But we can’t do that because the player isn’t locked by its rotation.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在这样的游戏中，我们可能只需要将我们的**音频监听器**放置在摄像机上，但将它放在我们的角色模型上会很有帮助。但我们不能这样做，因为玩家没有被锁定在其旋转上。
- en: But there’s a solution to this! In most games, we would have to add it as a
    child GameObject to `Main Camera` inside of the `MyvariWithCameraRig` GameObject.
    But here, we’ve already done most of the work, because the root `MyvariWithCameraRig`
    transform is already lined up with the character model!
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 但有一个解决方案！在大多数游戏中，我们可能需要将其作为子游戏对象添加到`MyvariWithCameraRig`游戏对象内部的`Main Camera`中。但在这里，我们已经做了大部分工作，因为根`MyvariWithCameraRig`变换已经与角色模型对齐了！
- en: All we must do is create a new GameObject inside of the root `MyvariWithCameraRig`,
    rename it `Listener`, as seen in *Figure 10.14,* and we can add our **Audio Listener**
    component to it.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须做的就是在一个根`MyvariWithCameraRig`内部创建一个新的游戏对象，将其重命名为`Listener`，如下面的*图10.14*所示，然后我们可以向其添加**音频监听器**组件。
- en: '![Graphical user interface, text, application  Description automatically generated](img/B17304_10_14.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，自动生成描述](img/B17304_10_14.png)'
- en: 'Figure 10.14: New GameObject to place our Audio Listener onto'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.14：放置音频监听器的新游戏对象
- en: Next, we can take this `Listener` GameObject and move it up on the *y* axis
    so it lines up right next to the ears of our character, seen by the transform
    gizmo below in *Figure 10.15*.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以将这个`Listener`游戏对象沿着*y*轴向上移动，使其正好位于我们角色的耳朵旁边，如下面的*图10.15*中通过变换小工具看到的。
- en: '![A screenshot of a video game  Description automatically generated](img/B17304_10_15.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![视频游戏截图，自动生成描述](img/B17304_10_15.png)'
- en: 'Figure 10.15: Audio Listener GameObject lined up to head height on Myvari'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.15：音频监听器游戏对象在Myvari头部高度对齐
- en: I moved it up by 1.5 units on the *y* axis. Now when we move around, the `transform`
    of the `Listener` GameObject will move alongside the camera. Our 3D sounds will
    now play relative to the character’s position instead of the camera!
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我将其在*y*轴上向上移动了1.5个单位。现在当我们移动时，`Listener`游戏对象的`transform`将随着相机移动。我们的3D声音现在将相对于角色的位置播放，而不是相对于相机！
- en: Adding 3D ambient sounds to the game
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将3D环境声音添加到游戏中
- en: How often in your life do you experience absolute silence? You might think that
    enjoying a quiet evening in your living room has absolute silence, but you still
    can hear your air conditioning, the refrigerator running, sounds outside your
    window, etc.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的生活中，你有多少次经历过绝对的寂静？你可能认为在客厅里享受一个安静的夜晚就是绝对的寂静，但你仍然能听到空调、冰箱运行、窗户外的声音等。
- en: These sounds mentioned of course are very quiet, but the point is that we never
    truly experience absolute silence!
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，提到的这些声音非常微弱，但重点是，我们从未真正体验过绝对的寂静！
- en: So even in our video games, if our player is idle, not moving, and staying completely
    still, it helps a lot to always have some sort of sound. This is where ambient
    sounds come in.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，即使在我们的视频游戏中，如果玩家处于空闲状态，没有移动，并且完全静止，那么始终有一些声音会很有帮助。这就是环境声音发挥作用的地方。
- en: Ambient sounds can be generally defined as “sounds that exist in a 3D space
    but don’t move.” In our Holy Forest project, we can add sound for trees rustling,
    the interior of the cave, the portal humming, magical energies emitting from an
    object, rivers, and more!
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 环境声音可以一般定义为“存在于3D空间中的声音，但不会移动。”在我们的Holy Forest项目中，我们可以添加树木沙沙声、洞穴内部、传送门嗡嗡声、从物体发出的魔法能量、河流等等的声音！
- en: To add an ambient sound is quite simple. We’ve technically already done this!
    The sound we listened to in the *3D sound settings* section can technically be
    seen as ambient sound.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 添加环境声音相当简单。实际上，我们已经在技术上做了这件事！我们在*3D声音设置*部分听到的声音在技术上可以被视为环境声音。
- en: Let’s start with a very simple ambient sound of trees rustling in our scene.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从场景中非常简单的树木沙沙声环境音效开始。
- en: Let’s take our `Assets/Sounds`/`AMB_Trees3D.wav` file and drop it into an **audio
    source** component on a GameObject. Let’s set **Volume Rolloff** to **Linear Rolloff**
    and set **Spatial Blend** to 1\. Next, let’s keep our min distance to 1 and our
    max distance to 5.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将`Assets/Sounds`/`AMB_Trees3D.wav`文件拖放到一个游戏对象的**音频源**组件上。我们将**音量衰减**设置为**线性衰减**，并将**空间混合**设置为1。接下来，我们将最小距离设置为1，最大距离设置为5。
- en: Once we’ve done this, we can place our GameObject’s transform values as in the
    following image. The transform in the image reflects the ambient sound GameObject
    seen in *Figure 10.16*, and is physically available in the scene under **Sound**,
    in the hierarchy for the first `AMB_Trees3D` GameObject.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些后，我们可以将我们的游戏对象的变换值设置为以下图像所示。图像中的变换反映了*图10.16*中看到的背景声音游戏对象，并且在场景中的**声音**部分，在`AMB_Trees3D`第一个游戏对象的层次结构中是物理存在的。
- en: '![A close up of a car dashboard  Description automatically generated with low
    confidence](img/B17304_10_16.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![汽车仪表盘的特写 信心度低的自动生成的描述](img/B17304_10_16.png)'
- en: 'Figure 10.16: Ambient Tree 3D sound transform'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.16：环境树3D声音转换
- en: We’re going to put it on the bigger tree to the left of where our player spawns.
    In the following image, you can see our sound gizmo placed in the scene.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把它放在玩家出生点左侧的大树上。在下面的图像中，你可以看到我们的声音小工具放置在场景中。
- en: You can see this in *Figure 10.17* below as well as in the scene. Double-clicking
    on the `AMB_Trees3D` GameObject in the hierarchy will bring you physically to
    that location in the scene.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在下面的*图10.17*以及场景中看到这一点。在层次结构中双击`AMB_Trees3D`游戏对象，你将物理地被带到场景中的那个位置。
- en: '![A picture containing kite, flying, wire, outdoor object  Description automatically
    generated](img/B17304_10_17.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![包含风筝、飞行、线、户外物体的图片 自动生成的描述](img/B17304_10_17.png)'
- en: 'Figure 10.17: Gizmo for the ambient audio source'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.17：环境音频源的小工具
- en: Lastly, we just want to make sure that **Play On Awake** is checked on so the
    sound plays immediately when the scene starts, as shown below in *Figure 10.18*.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们只想确保**唤醒时播放**被勾选，这样声音在场景开始时就会立即播放，如图*图10.18*所示。
- en: '![Graphical user interface, text  Description automatically generated](img/B17304_10_18.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本 自动生成的描述](img/B17304_10_18.png)'
- en: 'Figure 10.18: Ensuring Play On Awake is set to True'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.18：确保“唤醒时播放”设置为True
- en: Now let’s press **Play**. And here we will see that the sound plays properly
    in the game! It will work exactly as our previous sound did, where we can hear
    it directionally, and the sound will eventually cut out when we leave the radius
    of the tree!
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们按**播放**。在这里，我们将看到声音在游戏中正常播放！它将与我们之前的声音一样工作，我们可以听到它的方向性，当我们离开树的半径时，声音最终会消失！
- en: Filling out our ambient sounds
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 填充我们的环境声音
- en: For the remainder of the ambient sounds, it will be a rinse and repeat of what
    we’ve just done. We’ll include the min/max ranges and the positions of our ambient
    sounds as well as the audio files that we feel work for each ambient item. In
    the scene we have the ambient sounds set up under `====AMB====`, as seen in *Figure
    10.19* below. I strongly encourage you to listen to the ambient sounds and see
    how they sound to you!
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 对于剩余的环境声音，它将是我们刚刚所做事情的重复。我们将包括环境声音的最小/最大范围和位置，以及我们认为适合每个环境项目的音频文件。在场景中，我们将环境声音设置在`====AMB====`下，如图*图10.19*所示。我强烈建议你听听环境声音，看看它们听起来如何！
- en: '![Text  Description automatically generated](img/B17304_10_19.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![文本 自动生成的描述](img/B17304_10_19.png)'
- en: 'Figure 10.19: List of ambient sounds in the hierarchy'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.19：层次结构中环境声音的列表
- en: 2D ambience
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2D环境声音
- en: If you walk around our newly filled-out scene, you’ll notice that it feels much
    more alive now! However, you’ll notice that in certain spots, you’ll hear silence,
    and as we’ve learned, hearing absolute silence is not something we ever want our
    players to experience in the game!
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在我们刚刚填充的场景中四处走动，你会注意到它现在感觉更加生动了！然而，你会在某些地方注意到 silence，正如我们所学的，听到绝对的 silence绝不是我们希望玩家在游戏中体验的事情！
- en: Let’s add an audio source to our `====SOUND====` parent GameObject and throw
    in our `General2D_Amb.wav`.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`====SOUND====`父游戏对象中添加一个音频源，并扔进我们的`General2D_Amb.wav`。
- en: Triggering sound through player interaction
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过玩家交互触发声音
- en: All the sounds we’ve created so far are sounds that will play as soon as you
    enter a scene. This happens because we have **Play On Awake** checked in the **Audio
    Source** component.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们迄今为止创建的所有声音都是在进入场景时立即播放的声音。这是因为我们在**音频源**组件中勾选了**唤醒时播放**。
- en: If we don’t have this checked, sounds will never play. But what’s cool is we
    get to trigger sounds in other ways!
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们没有勾选这个选项，声音将永远不会播放。但酷的是，我们可以以其他方式触发声音！
- en: Triggering sound through Unity events
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过Unity事件触发声音
- en: Let’s get a sound for our first stairs puzzle. This one will be quite easy.
    The easiest way for us to add our sound will be to add an **Audio Source** component
    directly to the trigger region GameObject. Let’s find `LeftStairsTrigger` and
    scroll down in the **Inspector** until we find the **Interactio Trigger** script,
    as shown in *Figure 10.20*.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为我们的第一个楼梯谜题获取一个声音。这个将会相当简单。我们添加声音的最简单方法是将**音频源**组件直接添加到触发区域游戏对象中。让我们找到`LeftStairsTrigger`，在**检查器**中向下滚动，直到我们找到**交互触发**脚本，如图*图10.20*所示。
- en: '![Graphical user interface, application  Description automatically generated](img/B17304_10_20.png)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序，自动生成描述](img/B17304_10_20.png)'
- en: 'Figure 10.20: Interaction Trigger script on the LeftStairsTrigger GameObject'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.20：`LeftStairsTrigger` GameObject上的交互触发脚本
- en: If you recall, we made a `UnityEvent` called `OnInteract`, which we can utilize
    with our **Audio Source** component! Go ahead and click **Add Component** at the
    bottom of the inspector and select **Audio Source**.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还记得，我们创建了一个名为`OnInteract`的`UnityEvent`，我们可以利用我们的**Audio Source**组件！继续在检查器底部点击**添加组件**并选择**Audio
    Source**。
- en: Next, drag and drop the `StairsPuzzleSuccess.wav` file into the **Audio Source**
    component. We will leave the **Audio Source** as 2D since the sound that we’re
    playing is a reward jingle.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将`StairsPuzzleSuccess.wav`文件拖放到**Audio Source**组件中。我们将保持**Audio Source**为2D，因为我们播放的声音是一个奖励铃声。
- en: Now, click the **+** in the `OnInteract` `UnityEvent`, and in the field that
    says `None (Object)`, drag and drop your **Audio Source** component, as shown
    in *Figure 10.21*.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击`OnInteract` `UnityEvent`中的**+**，并将`None (Object)`字段中的**Audio Source**组件拖放进去，如*图10.21*所示。
- en: '![Graphical user interface, application  Description automatically generated](img/B17304_10_21.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序，自动生成描述](img/B17304_10_21.png)'
- en: 'Figure 10.21: Sound added to Interaction Trigger'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.21：添加到交互触发的声音
- en: Next, you’ll see the dropdown that currently is labeled as `No Function`. Let’s
    click this and go down to **AudioSource** and then to **Play ()**, as in *Figure
    10.22* below.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你会看到一个当前标记为`No Function`的下拉菜单。让我们点击它，然后下拉到**AudioSource**，然后到**Play ()**，如下面的*图10.22*所示。
- en: '![Graphical user interface  Description automatically generated](img/B17304_10_22.png)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，自动生成描述](img/B17304_10_22.png)'
- en: 'Figure 10.22: Adding the Play method to the sound object on interact'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.22：在交互时向声音对象添加Play方法
- en: This will ensure that we play our audio file when we activate `LeftStairsTrigger`.
    Go ahead and hit play and navigate to `LeftStairsTrigger`. Once you do this, you’ll
    hear our sound! Let’s go ahead and repeat the same exact process for `RightStairsTrigger`.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 这将确保我们在激活`LeftStairsTrigger`时播放音频文件。请继续点击播放并导航到`LeftStairsTrigger`。一旦这样做，你将听到我们的声音！让我们继续重复相同的步骤来处理`RightStairsTrigger`。
- en: Rotating puzzle sounds
  id: totrans-206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 旋转拼图声音
- en: For the first time, we’ll be triggering sound directly in code. This will be
    a fairly simple process of making our **Audio Source** variable publicly available
    through code. Then we just trigger it.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次，我们将直接在代码中触发声音。这将是一个相当简单的过程，通过代码使我们的**Audio Source**变量公开可用。然后我们只需触发它。
- en: 'We’ll be adding the following sounds:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加以下声音：
- en: A sound that plays when the puzzle is complete
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当拼图完成时播放的声音
- en: A sound for when the spire starts moving
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当尖塔开始移动时的声音
- en: 'Let’s start with the simplest one, our “puzzle complete” sound. This will play
    when all the spires are aligned, and the door opens. Go into our `First Puzzle`
    prefab in our scene and open up the `FirstPuzzle.cs` script. This script is where
    we will add our code, as in *Figure 10.23*. On line 173, go ahead and type in:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从最简单的一个开始，我们的“拼图完成”声音。当所有尖塔对齐并且门打开时，这个声音将会播放。进入场景中的`First Puzzle`预制体，打开`FirstPuzzle.cs`脚本。这个脚本是我们将添加代码的地方，如*图10.23*所示。在第173行，继续输入以下内容：
- en: '[PRE0]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Text  Description automatically generated](img/B17304_10_23.png)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![文本，自动生成描述](img/B17304_10_23.png)'
- en: 'Figure 10.23: Public Audio Source added to the first puzzle script'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.23：添加到第一个拼图脚本的公共Audio Source
- en: Now go back to the `First Puzzle` prefab in our scene, open up the inspector,
    and add an **Audio Source** component. On this **Audio Source**, we will uncheck
    **Play on Awake** and drag `FirstPuzzleJingle.wav` into it.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 现在回到场景中的`First Puzzle`预制体，打开检查器，并添加一个**Audio Source**组件。在这个**Audio Source**上，我们将取消勾选**Play
    on Awake**并将`FirstPuzzleJingle.wav`拖放到它里面。
- en: Next, in the same way we dragged and dropped our audio component into the `UnityEvent`,
    we will drag and drop the Audio Source into the new serialized field labeled `Puzzle
    Complete` `SFX` on our `FirstPuzzle` script component, seen in *Figure 10.24*.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，就像我们将音频组件拖放到`UnityEvent`中一样，我们将Audio Source拖放到新序列化的字段`Puzzle Complete` `SFX`上，如*图10.24*所示。
- en: '![Graphical user interface, application  Description automatically generated](img/B17304_10_24.png)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序，自动生成描述](img/B17304_10_24.png)'
- en: 'Figure 10.24: Dragging and dropping an audio file into the Audio Source component'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.24：将音频文件拖放到Audio Source组件中
- en: 'Now our last step is to go to the `CheckForVictory()` function inside the `FirstPuzzle.cs`
    script and go into the `if` statement on line 241\. Right before `return true`
    on line 245, in *Figure 10.25*, we are going to add the following:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们最后一步是进入`FirstPuzzle.cs`脚本中的`CheckForVictory()`函数，进入第241行的`if`语句。在`return
    true`之前，在第245行，在*图10.25*中，我们将添加以下内容：
- en: '![Text  Description automatically generated](img/B17304_10_25.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![文本描述自动生成](img/B17304_10_25.png)'
- en: 'Figure 10.25: Adding Play to the Audio Source'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.25：向音频源添加播放功能
- en: Now let’s go into our game and see if it works. When we enter the game, we should
    be able to activate our puzzle and hear sound when we successfully rotate the
    spires!
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们进入游戏看看它是否工作。当我们进入游戏时，我们应该能够激活我们的谜题，并在成功旋转尖塔时听到声音！
- en: Tree puzzle
  id: totrans-223
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 树形谜题
- en: 'Using the same method as before, let’s add a sound that plays when we put the
    ball on the bridge, when we solve part of the puzzle, and when we complete the
    final puzzle. We’ll open `FinalPuzzle.cs` and add:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 使用之前相同的方法，让我们添加一个当我们将球放在桥上、解决谜题的一部分以及完成最终谜题时播放的声音。我们将打开`FinalPuzzle.cs`并添加：
- en: '`IntroPuzzleSolved.wav` on line 31'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第31行上的`IntroPuzzleSolved.wav`
- en: '`FinalPuzzlePartial.wav` on line 38'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第38行上的`FinalPuzzlePartial.wav`
- en: '`FinalPuzzleSolved.wav` on line 41'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第41行上的`FinalPuzzleSolved.wav`
- en: Summary
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: Congrats! We’ve just taken our first steps to understanding audio in video games.
    We’ve gone over what makes up a sound effect, broken down the five parts of sound
    design, learned about audio listeners and the differences between music and sound,
    learned how to use 3D sound, and learned how to trigger Audio Source components
    through code! This is a great start to breathing life into our game through sound.
    In *Chapter 12*, *Final Touches*, while polishing audio, we will go over some
    extra tips to make your audio go that one step further.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！我们刚刚迈出了理解游戏音频的第一步。我们已经了解了构成音效的要素，分解了声音设计的五个部分，了解了音频听众以及音乐与声音的区别，学习了如何使用3D声音，以及如何通过代码触发音频源组件！这是通过声音让我们的游戏充满活力的一个很好的开始。在*第12章*，*最后的润色*中，当我们润色音频时，我们将介绍一些额外的技巧，让你的音频更进一步。
- en: In the next chapter, we’ll move on to building our project so you can share
    it with others.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将继续构建我们的项目，这样你就可以与他人分享了。
