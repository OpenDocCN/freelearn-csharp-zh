- en: '*Chapter 4*: Understanding the Reference Solution'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第4章*：理解参考解决方案'
- en: In the previous chapter, we built a simple full-stack web application that is
    used to manage products with categories. We've seen a typical flow of developing
    applications with ABP Framework. You are now ready to create your own application
    with the basic features. In the next chapters, you will better understand the
    ABP features and create more advanced applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们构建了一个简单的全栈Web应用程序，用于管理具有分类的产品。我们看到了使用ABP框架开发应用程序的典型流程。你现在可以创建自己的应用程序，并具备基本功能。在下一章中，你将更好地理解ABP功能并创建更高级的应用程序。
- en: 'Giving examples with real-world complexities in a book is not very easy. Having
    reflected on that, we''ve prepared a complete, real-world reference application
    built with ABP Framework: *EventHub*. It is open source and freely available on
    GitHub.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在书中用具有现实复杂性的例子来说明并不容易。经过反思，我们准备了一个完整的、现实世界的参考应用程序，该应用程序是用ABP框架构建的：*EventHub*。它是开源的，可以在GitHub上免费获取。
- en: The EventHub solution is thought of as a live system that is available on [openeventhub.com.](http://openeventhub.com.)
    You can just try it out to explore it. We've established the **continuous integration/continuous
    development** (**CI/CD**) pipelines, and we are updating the website as we develop
    it and get contributions from the community. Feel free to see its source code,
    submit bug reports or feature requests, or even send your pull requests to contribute!
    As the name suggests, this is an open platform.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: EventHub解决方案被视为一个可用的实时系统，位于[openeventhub.com.](http://openeventhub.com.)上。你可以尝试它来探索它。我们已经建立了**持续集成/持续开发**（**CI/CD**）管道，我们在开发它并获得社区贡献的同时更新网站。请随意查看其源代码，提交错误报告或功能请求，甚至发送你的pull请求来贡献！正如其名所示，这是一个开放平台。
- en: This book is the only source of documentation that explains the EventHub solution
    because we've mainly prepared it for the readers of this book. I will refer to
    that solution in the next chapters of the book, especially in *Part 3*, *Implementing
    Domain-Driven Design*.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本书是唯一解释EventHub解决方案的文档来源，因为我们主要为此书的读者准备了它。我将在本书的下一章中提及该解决方案，特别是在*第3部分*，*实现领域驱动设计*。
- en: 'In this chapter, we will investigate the EventHub solution in the following
    sections:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将以下节中调查EventHub解决方案：
- en: Introducing the application
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍应用程序
- en: Understanding the architecture
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解架构
- en: Running the solution
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行解决方案
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You can clone or download the source code of the EventHub project from GitHub,
    at [https://github.com/volosoft/eventhub](https://github.com/volosoft/eventhub).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从GitHub上克隆或下载EventHub项目的源代码，在[https://github.com/volosoft/eventhub](https://github.com/volosoft/eventhub)。
- en: If you want to run the solution in your local development environment, you need
    to have an **integrated development environment** (**IDE**)/editor (such as Visual
    Studio) to build and run ASP.NET Core solutions. You also need to have **Docker**
    installed on your computer. You can download and install **Docker Desktop** for
    the development environment by following the documentation at [https://docs.docker.com/get-docker](https://docs.docker.com/get-docker).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在本地开发环境中运行该解决方案，你需要有一个**集成开发环境**（**IDE**）/编辑器（如Visual Studio）来构建和运行ASP.NET
    Core解决方案。你还需要在计算机上安装**Docker**。你可以通过遵循[https://docs.docker.com/get-docker](https://docs.docker.com/get-docker)上的文档来下载并安装**Docker
    Desktop**用于开发环境。
- en: Introducing the application
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍应用程序
- en: 'EventHub is a platform that is used to create organizations to organize events.
    You create events, either online or in person, then people register them. The
    following screenshot is taken from the **Home** page of the [openeventhub.com](http://openeventhub.com)
    website:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: EventHub是一个用于创建组织以组织活动的平台。你创建活动，无论是线上还是线下，然后人们注册它们。以下截图来自[openeventhub.com](http://openeventhub.com)网站的**首页**：
- en: '![Figure 4.1 – EventHub Home page'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.1 – EventHub首页'
- en: '](img/Figure_4.01_B17287.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.01_B17287.jpg)'
- en: Figure 4.1 – EventHub Home page
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.1 – EventHub首页
- en: You can explore upcoming **Events** section on the **Home** page. Click on an
    event for details and register for the event. You get an email notification before
    the event starts or the event time changes.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在**首页**上的即将到来的**事件**部分进行探索。点击一个活动以获取详细信息并注册该活动。活动开始前或活动时间更改时，你会收到电子邮件通知。
- en: 'Here is another screenshot from the **Create New Event** page:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是来自**创建新事件**页面的另一个截图：
- en: '![Figure 4.2 – Create New Event page'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.2 – 创建新事件页面'
- en: '](img/Figure_4.02_B17287.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.02_B17287.jpg)'
- en: Figure 4.2 – Create New Event page
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.2 – 创建新事件页面
- en: You can select one of your owned organizations on this page, set a **Title**,
    time, and description, pick a **Cover Image**, and determine other details about
    the event you are organizing.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这一页上选择你拥有的一个组织，设置 **标题**、时间、描述，选择 **封面图片**，并确定你组织的其他事件细节。
- en: If you want to learn more, please register at [openeventhub.com](http://openeventhub.com)
    and explore the platform. In this book, I want to talk about the technical details
    rather than the application's features. Let's begin with the big picture and understand
    the solution's architecture.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多信息，请注册 [openeventhub.com](http://openeventhub.com) 并探索该平台。在这本书中，我想讨论技术细节，而不是应用程序的功能。让我们从整体图景开始，了解解决方案的架构。
- en: Understanding the architecture
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解架构
- en: 'Here is an overall diagram of the applications inside the solution:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是解决方案内部应用程序的整体图：
- en: '![Figure 4.3 – Applications of the EventHub solution'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.3 – EventHub 解决方案的应用'
- en: '](img/Figure_4.03_B17287.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.03_B17287.jpg)'
- en: Figure 4.3 – Applications of the EventHub solution
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.3 – EventHub 解决方案的应用
- en: 'There are six applications and one database shown in *Figure 4.3*, and more
    information on them is provided here:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *图 4.3* 中显示了六个应用程序和一个数据库，关于它们更详细的信息如下：
- en: '`IdentityServer` library. It is a **single sign-on** (**SSO**) server, which
    means that if you log in to one of the applications, you are then logged in to
    all of the applications (and vice versa, meaning that if you log out of one of
    the applications, you are logged out of all of the applications). That is an **ASP.NET
    Core Razor Pages** application, and it directly connects to **The Database**.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IdentityServer` 库。这是一个 **单点登录** （**SSO**） 服务器，这意味着如果你登录到其中一个应用程序，你将登录到所有应用程序（反之亦然，即如果你从其中一个应用程序注销，你将从所有应用程序注销）。这是一个
    **ASP.NET Core Razor Pages** 应用程序，它直接连接到 **数据库**。'
- en: '**Main Website**: This is an essential website ([www.openeventhub.com](http://www.openeventhub.com))
    of the platform used by **End Users** to create new events and register for events.
    It is an **ASP.NET Core Razor Pages** application that uses the **Main HTTP API**
    as the backend.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主网站**：这是用户创建新事件和注册事件的平台的基本网站 ([www.openeventhub.com](http://www.openeventhub.com))。它是一个使用
    **ASP.NET Core Razor Pages** 的应用程序，作为后端使用 **主 HTTP API**。'
- en: '**Admin Application**: This application allows **Admin Users** to manage organizations,
    events, and the system. It uses the **Admin HTTP API** for all the operations,
    which is a **Blazor WebAssembly** application that runs in the browser.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理应用程序**：此应用程序允许 **管理员用户** 管理组织、事件和系统。它使用 **管理 HTTP API** 进行所有操作，这是一个在浏览器中运行的
    **Blazor WebAssembly** 应用程序。'
- en: '**Main HTTP API**: Exposes **HyperText Transfer Protocol** (**HTTP**) **application
    programming interfaces** (**APIs**) to be consumed by the main website.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主 HTTP API**：暴露 **超文本传输协议** （**HTTP**） 应用程序编程接口 （**API**） 以供主网站消费。'
- en: '**Admin HTTP API**: Exposes HTTP APIs to be consumed by the admin application.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理 HTTP API**：暴露 HTTP API 以供管理应用程序消费。'
- en: '**Background Services**: A **console application** that runs background workers
    and background jobs of the system.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**后台服务**：一个运行系统后台工作者和后台作业的控制台应用程序。'
- en: '**The Database**: This is a relational **PostgreSQL** database that stores
    all the data in the system.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据库**：这是一个关系型 **PostgreSQL** 数据库，存储系统中所有的数据。'
- en: Since it is a distributed system, it uses **Redis** as the distributed cache
    server.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 由于它是一个分布式系统，它使用 **Redis** 作为分布式缓存服务器。
- en: It is a good idea to start by understanding the authentication flow to then
    understand the system.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 首先理解认证流程是一个好主意，然后才能理解系统。
- en: Authentication flow
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 认证流程
- en: 'As mentioned in the previous section, the **Authentication Server** is an SSO
    server used to authenticate users and clients. **Main Website** and **Admin Application**
    use the **OpenID Connect** (**OIDC**) protocol to redirect users to the **Authentication
    Server** when users want or need to log in to the application. The following diagram
    shows the login process:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，**认证服务器**是一个用于认证用户和客户端的单点登录 (SSO) 服务器。**主网站** 和 **管理应用程序** 使用 **OpenID
    Connect** （**OIDC**） 协议在用户想要或需要登录应用程序时将用户重定向到 **认证服务器**。以下图表显示了登录过程：
- en: '![Figure 4.4 – The authentication flow'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.4 – 认证流程'
- en: '](img/Figure_4.04_B17287.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.04_B17287.jpg)'
- en: Figure 4.4 – The authentication flow
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.4 – 认证流程
- en: 'In *Figure 4.4*, the logic process occurs in the following order:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *图 4.4* 中，逻辑流程按以下顺序发生：
- en: Whenever a user wants to visit a page that requires authentication **(1)** or
    a user explicitly clicks to the login link, the **Main Website** redirects the
    user **(2)** to the **Authentication Server**.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authentication Server** has a login page so that users can enter a username
    and password or register as a new user. Once the login process is done, the user
    is redirected back to the **Main Website** with an authorization code **(3)**
    and **(4)**.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Main Website** then performs a token request **(5)** to the server using
    the obtained authorization code.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authentication Server** returns an **identifier** (**ID**) token (contains
    some user information such as username, ID, email, and so on) and an access token
    **(6)**.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Main Website** stores the access token in a cookie so that it can be obtained
    in the next requests. In the next requests, it gets the access token from the
    cookie and adds it to the HTTP request header while performing HTTP requests to
    the **Main HTTP API** application **(7)**.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Main HTTP API** application validates the access token **(8)** and authorizes
    the request.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Main Website** uses cookies to store the access token, as mentioned. On
    the other hand, the **Admin (Blazor WebAssembly) Application** stores the access
    token in the local storage of the browser and adds it to the HTTP request header
    in every request to the server.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: All that process is done by ABP's `Account` and `IdentityServer` modules with
    some configurations in the applications. I won't show the detailed configuration
    here to keep this chapter focused on the overall solution structure and architecture
    (check the source code for more details).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will explore the EventHub .NET solution and the projects
    inside it.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the solution
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The EventHub .NET solution consists of several projects, grouped by the application
    type and shown in the following screenshot:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.5 – EventHub .NET solution in Visual Studio'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.05_B17287.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.5 – EventHub .NET solution in Visual Studio
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: The solution contains a single domain layer with two application layers and
    corresponding HTTP API and **user interface** (**UI**) layers. Two applications
    use the single domain layer but they have different application logic, so they
    are separated. We will return to this topic (multiple application layers) in the
    *Dealing with multiple applications* section of [*Chapter 9*](B17287_09_Epub_AM.xhtml#_idTextAnchor300),
    *Understanding Domain-Driven Design*.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s begin explaining the projects with the core part, the `common` folder.
    That folder contains common libraries and services, as outlined here:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: The `EventHub.Domain` project is the domain layer that contains the entities,
    domain services, and other domain objects. The `EventHub.Domain.Shared` project
    contains constants and some other classes, which are shared among all layers and
    applications in the solution.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `EventHub.EntityFrameworkCore` project contains the code that defines `DbContext`,
    mappings, database migrations, repository implementations, and other code related
    to EF Core.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EventHub.EntityFrameworkCore` 项目包含定义 `DbContext`、映射、数据库迁移、存储库实现以及其他与 EF Core
    相关的代码。'
- en: The `EventHub.DbMigrator` project is a console application that you can run
    to apply pending database migrations and seed the initial data (such as the admin
    user/ role and their permissions). It is suitable to use in development and production
    environments.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EventHub.DbMigrator` 项目是一个控制台应用程序，您可以通过它应用挂起的数据库迁移并初始化数据（例如管理员用户/角色及其权限）。它适合在开发和生产环境中使用。'
- en: The `EventHub.BackgroundServices` project is another console application that
    runs background workers and jobs on the system and should always be running.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EventHub.BackgroundServices` 项目是另一个控制台应用程序，它在系统上运行后台工作者和作业，并且应该始终运行。'
- en: 'The `www` folder contains the **Main Website** ([www.openeventhub.com](http://www.openeventhub.com))
    application''s components, listed as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`www` 文件夹包含 **主网站**（[www.openeventhub.com](http://www.openeventhub.com)）应用程序的组件，如下所示：'
- en: The `EventHub.Application` project is the application layer that contains the
    implementation of the application services, while the `EventHub.Application.Contracts`
    project includes the application service interfaces and **data transfer objects**
    (**DTOs**) that are shared with the UI layer.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EventHub.Application` 项目是包含应用程序服务实现的应用层，而 `EventHub.Application.Contracts`
    项目包括与应用程序服务接口和与 UI 层共享的 **数据传输对象**（**DTOs**）。'
- en: The `EventHub.HttpApi` project contains the API controllers that are consumed
    by the UI (web) layer. The controllers in that project are simple wrappers around
    the application services.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EventHub.HttpApi` 项目包含由 UI（Web）层消费的 API 控制器。该项目中的控制器是围绕应用程序服务的简单包装。'
- en: The `EventHub.HttpApi.Host` project hosts the HTTP API layer. In this way, the
    hosting logic is separated from the project that contains the API controllers
    (which makes it possible to reuse the `EventHub.HttpApi` project as a library).
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EventHub.HttpApi.Host` 项目托管 HTTP API 层。这样，托管逻辑就与包含 API 控制器的项目（这使得可以将 `EventHub.HttpApi`
    项目作为库重用）分离了。'
- en: The `EventHub.HttpApi.Client` project is a library that can be referenced by
    a .NET application to consume the API controllers easily. The UI (web) layer uses
    that project to call the HTTP APIs. This project uses ABP's dynamic C# proxy feature,
    which will be covered in [*Chapter 14*](B17287_14_Epub_AM.xhtml#_idTextAnchor429),
    *Building HTTP APIs and Real-Time Services*. In this way, we don't need to deal
    with HTTP clients and low-level details to call HTTP APIs from the UI layer.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EventHub.HttpApi.Client` 项目是一个库，可以由 .NET 应用程序引用以轻松消费 API 控制器。UI（Web）层使用该项目调用
    HTTP API。此项目使用 ABP 的动态 C# 代理功能，将在 [*第 14 章*](B17287_14_Epub_AM.xhtml#_idTextAnchor429)，*构建
    HTTP API 和实时服务* 中介绍。这样，我们就不需要处理 HTTP 客户端和底层细节，从 UI 层调用 HTTP API。'
- en: The `EventHub.Web` project is the UI layer of the application. That is a typical
    Razor Pages application that renders the **HyperText Markup Language** (**HTML**)
    in the server. It has no database connection but uses the **Main HTTP API** application
    for all operations.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EventHub.Web` 项目是应用程序的 UI 层。这是一个典型的 Razor Pages 应用程序，在服务器上渲染 **超文本标记语言**（**HTML**）。它没有数据库连接，但使用
    **主 HTTP API** 应用程序进行所有操作。'
- en: The `EventHub.Web.Theme` project is a custom theme for the application. ABP
    has a theming system that you can use to build your own themes and reuse them
    in any application. The `EventHub.Web` project uses this theme. Theming system
    will be covered in *Part 4*, *User Interface and API Development*.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EventHub.Web.Theme` 项目是应用程序的定制主题。ABP 有一个主题系统，您可以使用它来构建自己的主题并在任何应用程序中重用它们。`EventHub.Web`
    项目使用这个主题。主题系统将在 *第 4 部分*，*用户界面和 API 开发* 中介绍。'
- en: 'The `admin` folder contains the admin application that is used by the users
    who maintain the system, and is explained in more detail here:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`admin` 文件夹包含由维护系统的用户使用的管理员应用程序，并在此处进行更详细的解释：'
- en: The `EventHub.Admin.Application` project is the application layer of the admin
    side that contains the implementation of the application services, while the `EventHub.Admin.Application.Contracts`
    project includes the application service interfaces and DTOs that are shared with
    the UI layer.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EventHub.Admin.Application` 项目是管理员侧的应用层，包含应用程序服务的实现，而 `EventHub.Admin.Application.Contracts`
    项目包括与应用程序服务接口和与 UI 层共享的 DTOs。'
- en: The `EventHub.Admin.HttpApi` project contains the API controllers that are consumed
    by the UI (web) layer.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EventHub.Admin.HttpApi` 项目包含由 UI（Web）层消费的 API 控制器。'
- en: The `EventHub.Admin.HttpApi.Host` project hosts the HTTP API layer. In this
    way, the hosting logic is separated from the project that contains the API controllers.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EventHub.Admin.HttpApi.Host` 项目托管 HTTP API 层。这样，托管逻辑就与包含 API 控制器的项目分离了。'
- en: The `EventHub.Admin.HttpApi.Client` project is a library that can be referenced
    by a .NET application to consume the API controllers easily. The UI (web) layer
    uses that project to call the HTTP APIs. This project uses ABP's dynamic C# proxy
    feature, which will be covered in [*Chapter 14*](B17287_14_Epub_AM.xhtml#_idTextAnchor429),
    *Building HTTP APIs and Real-Time Services*. In this way, we don't need to deal
    with HTTP clients and low-level details to call HTTP APIs from the UI layer.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EventHub.Admin.HttpApi.Client` 项目是一个库，.NET 应用程序可以通过它轻松地引用并消费 API 控制器。UI（Web）层使用该项目来调用
    HTTP API。此项目使用了 ABP 的动态 C# 代理功能，该功能将在 [*第 14 章*](B17287_14_Epub_AM.xhtml#_idTextAnchor429)
    中介绍，即 *构建 HTTP API 和实时服务*。通过这种方式，我们不需要处理 HTTP 客户端和底层细节，就可以从 UI 层调用 HTTP API。'
- en: The `EventHub.Admin.Web` project is the UI layer of the application. That is
    a **Blazor WebAssembly** application that runs in the browser and performs HTTP
    API calls to the server.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EventHub.Admin.Web` 项目是应用程序的 UI 层。这是一个 **Blazor WebAssembly** 应用程序，它在浏览器中运行并执行对服务器的
    HTTP API 调用。'
- en: Finally, the `account` folder contains the `EventHub.IdentityServer`, that is
    used by other applications to authenticate the users.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`account` 文件夹包含 `EventHub.IdentityServer`，它被其他应用程序用于用户认证。
- en: I've explained all the projects in the solution, in brief. It is also important
    to understand the relations and dependencies between the projects.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经简要地解释了解决方案中的所有项目。了解项目之间的关系和依赖也很重要。
- en: Project dependencies
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目依赖关系
- en: Separating the solution into multiple projects makes it possible to have multiple
    applications on runtime while sharing the code base between applications where
    it is necessary.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 将解决方案拆分为多个项目，使得在运行时可以拥有多个应用程序，同时在必要时在应用程序之间共享代码库。
- en: In the next sections, I will show the dependency graph of each application so
    that you can understand how the code base is organized. We begin with the **Main
    Website**, the essential application.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几节中，我将展示每个应用程序的依赖关系图，以便您了解代码库是如何组织的。我们首先从 **主网站**，这个基本的应用程序开始。
- en: Main Website
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 主网站
- en: 'Remember that the `Web`:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 记住 `Web`：
- en: '![Figure 4.6 – Main website project dependencies'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.6 – 主网站项目依赖关系'
- en: '](img/Figure_4.06_B17287.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.06_B17287.jpg)'
- en: Figure 4.6 – Main website project dependencies
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.6 – 主网站项目依赖关系
- en: The `Web` project depends on `Web.Theme`, which implements the EventHub application's
    UI theme. `Web.Theme` is a separate project because it is reused from the **Authentication
    Server** application. That is an example of reusing a UI theme between multiple
    applications.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`Web` 项目依赖于 `Web.Theme`，该组件实现了 EventHub 应用程序的 UI 主题。`Web.Theme` 是一个独立的项目，因为它是从
    **认证服务器** 应用程序中复用的。这是一个在多个应用程序之间复用 UI 主题的例子。'
- en: The `Web` project also depends on the `HttpApi` project. In this way, the HTTP
    API controllers become available in the web application, and we can consume these
    APIs from the client (JavaScript) code. However, when you call an HTTP API controller
    of this application, the request is redirected to the `HttpApi.Client` package.
    Notice that both the `HttpApi` and `HttpApi.Client` project reference the `Application.Contacts`
    project. API controllers in the `HttpApi` project use the application service
    interfaces, while the `HttpApi.Client` package implements these interfaces (using
    ABP's dynamic C# proxy system, which will be explored in [*Chapter 14*](B17287_14_Epub_AM.xhtml#_idTextAnchor429),
    *Building HTTP APIs and Real-Time Services*) to perform remote HTTP calls to the
    **Main HTTP API** application. So, this application becomes a proxy for the direct
    API calls between the client (JavaScript) and the HTTP API server. The actual
    implementations of the application service interfaces run in the **Main HTTP API**
    application, which will be explained in the next section.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`Web`项目也依赖于`HttpApi`项目。这样，HTTP API控制器就可以在Web应用程序中使用，我们可以从客户端（JavaScript）代码中调用这些API。然而，当你调用此应用程序的HTTP
    API控制器时，请求会被重定向到`HttpApi.Client`包。请注意，`HttpApi`和`HttpApi.Client`项目都引用了`Application.Contacts`项目。`HttpApi`项目中的API控制器使用应用程序服务接口，而`HttpApi.Client`包实现这些接口（使用ABP的动态C#代理系统，将在[*第14章*](B17287_14_Epub_AM.xhtml#_idTextAnchor429)，*构建HTTP
    API和实时服务*)以执行对**主HTTP API**应用程序的远程HTTP调用。因此，此应用程序成为客户端（JavaScript）和HTTP API服务器之间直接API调用的代理。应用程序服务接口的实际实现运行在**主HTTP
    API**应用程序中，将在下一节中解释。'
- en: Main HTTP API
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 主HTTP API
- en: '`HttpApi.Host` project and its direct and indirect dependencies:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`HttpApi.Host`项目和其直接及间接依赖：'
- en: '![Figure 4.7 – Main HTTP API project dependencies'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.7 – 主HTTP API项目依赖关系](img/Figure_4.07_B17287.jpg)'
- en: '](img/Figure_4.07_B17287.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_4.07_B17287.jpg)'
- en: Figure 4.7 – Main HTTP API project dependencies
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.7 – 主HTTP API项目依赖关系
- en: By referencing (adding a project dependency to) the `HttpApi` project (which
    includes the API controllers), we can respond to HTTP API calls. The API controllers
    use the application service interfaces defined in the `Application.Contracts`
    project. These interfaces are implemented by the `Application` project. That is
    why we need to reference the `Application` project from the `HttpApi.Host` project.
    The `Application` project uses the `Domain` project to perform the business logic
    of the application.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 通过引用（添加对`HttpApi`项目的依赖）`HttpApi`项目（其中包含API控制器），我们可以响应HTTP API调用。API控制器使用在`Application.Contracts`项目中定义的应用程序服务接口。这些接口由`Application`项目实现。这就是为什么我们需要从`HttpApi.Host`项目引用`Application`项目的原因。`Application`项目使用`Domain`项目来执行应用程序的业务逻辑。
- en: The `HttpApi.Host` project also references the `EntityFrameworkCore` project
    since we need a data layer on runtime. The `EntityFrameworkCore` project maps
    entities to the tables in the database, and implements the repositories defined
    in the `Domain` project.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`HttpApi.Host`项目还引用了`EntityFrameworkCore`项目，因为我们需要在运行时有一个数据层。`EntityFrameworkCore`项目将实体映射到数据库中的表，并实现了在`Domain`项目中定义的存储库。'
- en: Notice that the `Application.Contracts` project (and the `Domain.Shared` project,
    indirectly) is shared by the client application, the **Main Website**, so they
    can rely on the same application service interfaces to communicate.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到`Application.Contracts`项目（以及间接的`Domain.Shared`项目）被客户端应用程序和**主网站**共享，因此它们可以依赖于相同的应用程序服务接口进行通信。
- en: We have now explored the **Main Website** application components. The next section
    continues from the admin side.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经探讨了**主网站**应用程序组件。下一节将从管理端继续。
- en: Admin application
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 管理应用程序
- en: 'The admin application is a Blazor WebAssembly application that runs on the
    browser and is accessed using the following **Uniform Resource Locator** (**URL**):
    [admin.openeventhub.com](http://admin.openeventhub.com). It is used by the users
    who maintain the system. This application has a different set of APIs, UI pages,
    authorization rules, caching requirements, and so on. Hence, we''ve created a
    different application and HTTP API layers for that application. Nevertheless,
    it shares the same domain layer, so it uses the same domain logic and the same
    database.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 管理应用程序是一个在浏览器上运行的Blazor WebAssembly应用程序，可以通过以下**统一资源定位符**（**URL**）访问：[admin.openeventhub.com](http://admin.openeventhub.com)。它被维护系统的用户使用。此应用程序有一套不同的API、UI页面、授权规则、缓存需求等。因此，我们为该应用程序创建了一个不同的应用程序和HTTP
    API层。尽管如此，它共享相同的领域层，因此它使用相同的领域逻辑和相同的数据库。
- en: 'Let''s start from the following diagram of the frontend (Blazor WebAssembly)
    application:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从以下前端（Blazor WebAssembly）应用程序的图开始：
- en: '![Figure 4.8 – Admin website project dependencies'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.8 – 管理网站项目依赖关系'
- en: '](img/Figure_4.08_B17287.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.08_B17287.jpg)'
- en: Figure 4.8 – Admin website project dependencies
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.8 – 管理网站项目依赖关系
- en: This diagram is simple compared to previous ones. The `Admin.Web` project (which
    is the Blazor WebAssembly application) references the `Admin.HttpApi.Client` project
    because it needs to call remote HTTP APIs. ABP's dynamic C# client proxy system
    (covered in [*Chapter 14*](B17287_14_Epub_AM.xhtml#_idTextAnchor429), *Building
    HTTP APIs and Real-Time Services*) makes it possible to use the application service
    interfaces in the Blazor WebAssembly application to consume Admin HTTP APIs on
    the server easily. The `Admin.HttpApi.Client` project depends on the `Admin.Application.Contracts`
    project (which internally depends on the `Domain.Shared` project) to be able to
    use the application service interfaces defined in that project.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的图相比，此图较为简单。`Admin.Web` 项目（Blazor WebAssembly应用程序）引用了 `Admin.HttpApi.Client`
    项目，因为它需要调用远程HTTP API。ABP的动态C#客户端代理系统（在第[*第14章*](B17287_14_Epub_AM.xhtml#_idTextAnchor429)，*构建HTTP
    API和实时服务*中介绍）使得在Blazor WebAssembly应用程序中使用应用服务接口来轻松消费服务器上的Admin HTTP API成为可能。`Admin.HttpApi.Client`
    项目依赖于 `Admin.Application.Contracts` 项目（该项目内部依赖于 `Domain.Shared` 项目），以便能够使用在该项目中定义的应用服务接口。
- en: Admin HTTP API
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 管理HTTP API
- en: 'The `Admin.HttpApi.Host` project and its direct and indirect dependencies:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`Admin.HttpApi.Host` 项目及其直接和间接依赖：'
- en: '![Figure 4.9 – Admin HTTP API project dependencies'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.9 – Admin HTTP API项目依赖关系'
- en: '](img/Figure_4.09_B17287.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.09_B17287.jpg)'
- en: Figure 4.9 – Admin HTTP API project dependencies
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.9 – 管理HTTP API项目依赖关系
- en: The diagram is very similar to the diagram of the `EntityFrameworkCore`) layers
    to share the same core domain rules and the same **Database**. I will return to
    that topic in the *Dealing with multiple applications* section of [*Chapter 9*](B17287_09_Epub_AM.xhtml#_idTextAnchor300),
    *Understanding Domain-Driven Design*.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `EntityFrameworkCore` 层的图非常相似，以共享相同的核心领域规则和相同的 **数据库**。我将在[*第9章*](B17287_09_Epub_AM.xhtml#_idTextAnchor300)，*理解领域驱动设计*的*处理多个应用程序*部分中回到这个话题。
- en: All the applications use the **Authentication Server** application as an SSO
    server, discussed in the next section.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 所有应用程序都使用 **认证服务器** 应用作为SSO服务器，下一节将讨论。
- en: Authentication Server
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 认证服务器
- en: 'The `IdentityServer` project and has the dependencies shown in the following
    diagram:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`IdentityServer` 项目及其依赖关系如以下图所示：'
- en: '![Figure 4.10 – Authentication Server project dependencies'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.10 – 认证服务器项目依赖关系'
- en: '](img/Figure_4.10_B17287.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.10_B17287.jpg)'
- en: Figure 4.10 – Authentication Server project dependencies
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.10 – 认证服务器项目依赖关系
- en: The `IdentityServer` project has a reference to the `Web.Theme` project, which
    is the UI theme that is shared with the `EntityFrameworkCore` project to be able
    to use the `EntityFrameworkCore` project, we also have indirect references to
    the `Domain` and `Domain.Shared` projects.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`IdentityServer` 项目引用了 `Web.Theme` 项目，这是与 `EntityFrameworkCore` 项目共享的 UI 主题，以便能够使用
    `EntityFrameworkCore` 项目，我们也有对 `Domain` 和 `Domain.Shared` 项目的间接引用。'
- en: The next section shows the dependencies of the final application in the solution.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节将展示解决方案中最终应用的依赖关系。
- en: Background Services
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 后台服务
- en: 'The `BackgroundServices` project has the dependencies shown in the following
    diagram:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`BackgroundServices` 项目具有以下图所示的依赖关系：'
- en: '![Figure 4.11 – BackgroundServices project dependencies'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.11 – BackgroundServices 项目依赖关系'
- en: '](img/Figure_4.11_B17287.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.11_B17287.jpg)'
- en: Figure 4.11 – BackgroundServices project dependencies
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.11 – BackgroundServices 项目依赖关系
- en: The `BackgroundServices` project uses the `EntityFrameworkCore` project so that
    it can work with the **Database**. It can also use the **Domain** objects (entities,
    domain services) to perform background tasks.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`BackgroundServices` 项目使用 `EntityFrameworkCore` 项目，以便能够与 **数据库** 一起工作。它还可以使用
    **领域** 对象（实体、领域服务）来执行后台任务。'
- en: We've explored all the projects in the solution. Now, we are ready to run them
    in our local development environment.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经探讨了解决方案中的所有项目。现在，我们准备在本地开发环境中运行它们。
- en: Running the solution
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行解决方案
- en: If you want to run the solution in your local environment, follow the steps
    in the next sections.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在本地环境中运行解决方案，请遵循下一节中的步骤。
- en: Cloning the GitHub repository
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 克隆GitHub仓库
- en: 'First of all, you need to clone the GitHub repository on your local computer.
    The repository is located at [https://github.com/volosoft/eventhub](https://github.com/volosoft/eventhub)
    and can be cloned using the following command (which requires Git tools to be
    installed):'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要在本地计算机上克隆GitHub仓库。仓库位于[https://github.com/volosoft/eventhub](https://github.com/volosoft/eventhub)，可以使用以下命令克隆（需要安装Git工具）：
- en: '[PRE0]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Alternatively, navigate to [https://github.com/volosoft/eventhub](https://github.com/volosoft/eventhub),
    click the **Code** button, and then click **Download ZIP**, as shown in the following
    screenshot:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，导航到[https://github.com/volosoft/eventhub](https://github.com/volosoft/eventhub)，点击**Code**按钮，然后点击**Download
    ZIP**，如图所示：
- en: '![Figure 4.12 – Downloading the EventHub repository from GitHub'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.12 – 从GitHub下载EventHub仓库'
- en: '](img/Figure_4.12_B17287.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.12_B17287.jpg)'
- en: Figure 4.12 – Downloading the EventHub repository from GitHub
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.12 – 从GitHub下载EventHub仓库
- en: You should extract the ZIP file into an empty folder.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该将ZIP文件提取到一个空文件夹中。
- en: Running the infrastructure
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行基础设施
- en: The EventHub solution needs `docker-compose` files in the `etc/docker` folder.
    If you have the Docker installed on your computer, you can execute the `up.ps1`
    file in that folder to run these servers. If you can't use PowerShell on your
    computer, you can just open it in a text editor, copy the content, and execute
    it in a command-line terminal in the `etc/docker` directory. In the first run,
    it may take a few minutes to download the Docker images. If you don't want to
    use Docker, you need to install **Redis** and **PostgreSQL** servers on your computer.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: EventHub解决方案需要在`etc/docker`文件夹中包含`docker-compose`文件。如果您在计算机上安装了Docker，您可以在该文件夹中执行`up.ps1`文件来运行这些服务器。如果您无法在计算机上使用PowerShell，您可以直接在文本编辑器中打开它，复制内容，然后在`etc/docker`目录中的命令行终端中执行它。在第一次运行时，可能需要几分钟来下载Docker镜像。如果您不想使用Docker，您需要在计算机上安装**Redis**和**PostgreSQL**服务器。
- en: Opening the solution
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 打开解决方案
- en: The cloned or downloaded repository contains an `EventHub.sln` file in the root
    folder. If you want to develop or debug the solution, open it in Visual Studio
    or another .NET-compatible IDE.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 克隆或下载的仓库在根目录中包含一个`EventHub.sln`文件。如果您想开发或调试解决方案，请在Visual Studio或另一个.NET兼容的IDE中打开它。
- en: Creating a database
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建数据库
- en: The solution has a console application named `EventHub.DbMigrator` that is shown
    in *Figure 4.5*. Run this application (for Visual Studio, right-click on it and
    choose **Set as the startup project**, then hit *Ctrl* + *F5*). It will create
    a database and seed some initial data.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案中有一个名为`EventHub.DbMigrator`的控制台应用程序，如图4.5所示。运行此应用程序（对于Visual Studio，右键单击它并选择**设置为启动项目**，然后按*Ctrl*
    + *F5*）。它将创建一个数据库并初始化一些初始数据。
- en: Running the applications
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行应用程序
- en: 'We are now ready to start the actual applications. You can run the projects
    in the following order (for Visual Studio, right-click on each project, select
    **Set as the startup project**, then hit *Ctrl* + *F5*):'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已准备好启动实际的应用程序。您可以按以下顺序运行项目（对于Visual Studio，右键单击每个项目，选择**设置为启动项目**，然后按*Ctrl*
    + *F5*）：
- en: '`EventHub.IdentityServer`'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EventHub.IdentityServer`'
- en: '`EventHub.HttpApi.Host`'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EventHub.HttpApi.Host`'
- en: '`EventHub.Web`'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EventHub.Web`'
- en: '`EventHub.Admin.HttpApi.Host`'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EventHub.Admin.HttpApi.Host`'
- en: '`EventHub.Admin.Web`'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EventHub.Admin.Web`'
- en: '`EventHub.BackgroundServices`'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EventHub.BackgroundServices`'
- en: To log in to one of the applications, use `admin` as the username and `1q2w3E*`
    as the password. Of course, you can create additional users on the UI.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 要登录到应用程序之一，请使用`admin`作为用户名，`1q2w3E*`作为密码。当然，您可以在UI中创建更多用户。
- en: Notice that Visual Studio has some problems when you run multiple applications.
    Sometimes, a previously run application may stop. In this case, run the stopped
    applications again. However, Microsoft's `Tye` project makes it much easier to
    run multiple applications.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，当运行多个应用程序时，Visual Studio可能会出现一些问题。有时，之前运行的应用程序可能会停止。在这种情况下，请重新运行已停止的应用程序。然而，Microsoft的`Tye`项目使得运行多个应用程序变得更加容易。
- en: Using the Tye project
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Tye项目
- en: If you don't need to develop or debug the solution but just want to run it,
    you can use the Microsoft `Tye` project to run it without opening an IDE. `Tye`
    is a .NET global tool used to run such distributed applications easily with a
    simple configuration file. The EventHub solution was configured to run with `Tye`.
    All you need to do is to install `Tye` and run it.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不需要开发或调试解决方案，只想运行它，可以使用Microsoft的`Tye`项目来运行它，而无需打开IDE。`Tye`是一个.NET全局工具，用于通过简单的配置文件轻松运行此类分布式应用程序。EventHub解决方案已配置为使用`Tye`运行。您需要做的只是安装`Tye`并运行它。
- en: 'Before using `Tye`, you still need to run the infrastructure (see the *Running
    the infrastructure* section), then create a database using the `EventHub.DbMigrator`
    application. If you haven''t done this before, open a command-line terminal in
    the `src/EventHub.DbMigrator` directory and run the following command:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 `Tye` 之前，您仍然需要运行基础设施（请参阅 *运行基础设施* 部分），然后使用 `EventHub.DbMigrator` 应用程序创建数据库。如果您之前没有这样做，请在
    `src/EventHub.DbMigrator` 目录中打开命令行终端并运行以下命令：
- en: '[PRE1]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After the database is ready, you can install `Tye` using the following command
    in a command-line terminal:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库准备就绪后，您可以在命令行终端中使用以下命令安装 `Tye`：
- en: '[PRE2]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'At the time of writing this book, the `Tye` project was still in preview. You
    may need to specify the latest preview version (you can find this on NuGet, at
    [https://www.nuget.org/packages/Microsoft.Tye](https://www.nuget.org/packages/Microsoft.Tye)).
    For example, see the following code snippet:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，`Tye` 项目仍在预览阶段。您可能需要指定最新的预览版本（您可以在 NuGet 上找到它，在 [https://www.nuget.org/packages/Microsoft.Tye](https://www.nuget.org/packages/Microsoft.Tye)）。例如，请参阅以下代码片段：
- en: '[PRE3]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Check [https://github.com/dotnet/tye/blob/main/docs/getting_started.md](https://github.com/dotnet/tye/blob/main/docs/getting_started.md)
    to learn how to install `Tye`.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下链接了解如何安装 `Tye`：[https://github.com/dotnet/tye/blob/main/docs/getting_started.md](https://github.com/dotnet/tye/blob/main/docs/getting_started.md)。
- en: '`Tye` requires Docker to be installed on your computer. If you haven''t installed
    it yet, you also need to do so. After all the installation is done, you can run
    the following command to start the applications (it is suggested to close the
    IDE first if it is open):'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`Tye` 需要在您的计算机上安装 Docker。如果您还没有安装，也需要这样做。安装完成后，您可以使用以下命令启动应用程序（如果 IDE 已经打开，建议先关闭它）：'
- en: '[PRE4]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'It will take some time on the first run. Once it is complete, you can open
    a browser and navigate to `http://127.0.0.1:8000` to open the **Tye Dashboard**,
    which you can see in the following screenshot:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次运行可能需要一些时间。一旦完成，您就可以打开浏览器并导航到 `http://127.0.0.1:8000` 来打开 **Tye 仪表板**，您可以在以下屏幕截图中看到：
- en: '![Figure 4.13 – The Tye Dashboard'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.13 – Tye 仪表板'
- en: '](img/Figure_4.13_B17287.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.13_B17287.jpg)'
- en: Figure 4.13 – The Tye Dashboard
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.13 – Tye 仪表板
- en: The `web` is the **Main Website** of the system.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`web` 是系统的 **主网站**。'
- en: 'Tye is a handy tool when you have a solution with multiple applications that
    need to run together. You can also configure `dotnet watch` for a project so that
    it is automatically reloaded (or hotloaded with .NET 6.0) when you change it.
    See Microsoft''s documentation to learn more about this: [https://github.com/dotnet/tye/tree/main/docs](https://github.com/dotnet/tye/tree/main/docs).'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 当您有一个需要一起运行多个应用程序的解决方案时，Tye 是一个方便的工具。您还可以为项目配置 `dotnet watch`，以便在更改项目时自动重新加载（或使用
    .NET 6.0 热加载）。有关更多信息，请参阅 Microsoft 的文档：[https://github.com/dotnet/tye/tree/main/docs](https://github.com/dotnet/tye/tree/main/docs)。
- en: Summary
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: EventHub is a complete, real-world quality application built on ABP Framework.
    It is not just an example but also a live project published on [openeventhub.com](http://openeventhub.com)
    and actively developed on [https://github.com/volosoft/eventhub](https://github.com/volosoft/eventhub).
    Feel free to send bug reports, feature requests, and pull requests.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: EventHub 是基于 ABP 框架构建的完整、真实世界质量的应用程序。它不仅是一个示例，也是一个在 [openeventhub.com](http://openeventhub.com)
    上发布的实时项目，并在 [https://github.com/volosoft/eventhub](https://github.com/volosoft/eventhub)
    上积极开发。请随时发送错误报告、功能请求和拉取请求。
- en: In this chapter, my purpose was not to explain the code base in detail. I explained
    the overall architecture and structure of the solution so that you can understand
    how to explore the code base and run the solution. The next chapters will refer
    to that solution while introducing some ABP features and concepts.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我的目的不是详细解释代码库。我解释了解决方案的整体架构和结构，以便您了解如何探索代码库并运行解决方案。下一章将参考该解决方案，同时介绍一些 ABP
    功能和概念。
- en: EventHub is a good example of a system that was built with multiple applications.
    It is also a clear example to understand the purpose of ABP's layering model and
    how to reuse these layers in different applications.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: EventHub 是一个使用多个应用程序构建的系统的良好示例。它也是一个理解 ABP 分层模型目的以及如何在不同的应用程序中重用这些层的清晰示例。
- en: You may not understand all the details of the EventHub solution now because
    we haven't explained the module system, database integrations, dynamic C# client
    proxies, and all the other ABP features yet. The chapters in the next part will
    explore the fundamental building blocks of ABP Framework and the ASP.NET Core
    framework so that you will start to understand all the details.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可能无法完全理解 EventHub 解决方案的所有细节，因为我们还没有解释模块系统、数据库集成、动态 C# 客户端代理以及所有其他 ABP 功能。下一部分中的章节将探讨
    ABP 框架和 ASP.NET Core 框架的基本构建块，以便你开始理解所有细节。
- en: In the next chapter, we will explore the basic building blocks of ASP.NET Core
    and ABP Framework to understand how an application is configured and initialized.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨 ASP.NET Core 和 ABP 框架的基本构建块，以了解应用程序是如何配置和初始化的。
