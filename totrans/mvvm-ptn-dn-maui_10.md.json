["```cs\n    builder.Services.AddTransient<IRatingsService,\n      RatingsService>();\n    builder.Services.AddTransient<IRecipeService,\n      RecipeService>();\n    ```", "```cs\npublic sealed class Result<TSuccess>\n{\n    ...\n    public bool IsSuccess { get; }\n    public TSuccess? Data { get; }\n    public string? ErrorCode { get; }\n    public string? ErrorData { get; }\n    public Exception? Exception { get; }\n    private Result(TSuccess? data,\n        string? errorCode, string? errorData,\n        Exception? exception, bool isSuccess)\n    {\n        Data = data;\n        ErrorCode = errorCode;\n        ErrorData = errorData;\n        Exception = exception;\n        IsSuccess = isSuccess;\n    }\n}\n```", "```cs\npublic static Result<TSuccess> Success(TSuccess data)\n    => new Result<TSuccess>(data, null, null, null, true);\npublic static Result<TSuccess> Success()\n    => new Result<TSuccess>(default, null, null,\n        null, true);\npublic static Result<TSuccess> Fail(string errorCode,\n  string? errorData = null, Exception? exception = null)\n    => new Result<TSuccess>(default, errorCode,\n        errorData, exception, false);\npublic static Result<TSuccess> Fail(Exception exception)\n    => new Result<TSuccess>(default, nameof(exception),\n        exception.Message, exception, false);\n```", "```cs\nprivate async Task LoadData(RecipeDetail recipe)\n{\n...\n    var loadRatings = await\n        ratingsService.LoadRatings(recipe.Id);\n    if(loadRatings.IsSuccess)\n    {\n        GroupedReviews = loadRatings.Data\n        ...\n        .ToList();\n    }\n    else\n    {\n        var shouldRetry = await dialogService.AskYesNo(\n            \"Failed to load\", \"Retry?\");\n        if (shouldRetry)\n            await LoadData(recipe);\n        else\n            await navigationService.GoBack();\n    }\n}\n```", "```cs\nif (loadRatings is { IsSuccess: true, Data: var ratings })\n{\n    GroupedReviews = ratings\n    ...\n    .ToList();\n}\nelse\n{\n    ...\n}\n```", "```cs\n    public interface IRecipeRepository\n    {\n        Task<Result<LoadRecipesResponse>> LoadRecipes(\n            int pageSize = 7, int page = 0);\n        Task<Result<RecipeDetail>> LoadRecipe(string id);\n    }\n    ```", "```cs\n    public class RecipeService : IRecipeService\n    {\n        readonly IRecipeRepository _recipeRepository;\n    ...\n        public RecipeService(\n            IRecipeRepository recipeRepository)\n        {\n            _recipeRepository = recipeRepository;\n        }\n    }\n    ```", "```cs\n    public Task<Result<RecipeDetail>> LoadRecipe(\n        string id) => _recipeRepository.LoadRecipe(id);\n    public Task<Result<LoadRecipesResponse>> LoadRecipes(\n        int pageSize = 7, int page = 0)\n        => _recipeRepository.LoadRecipes(pageSize, page);\n    ```", "```cs\n    Task<Result<IReadOnlyCollection<Rating>>>\n        GetRatings(string recipeId);\n    Task<Result<RatingsSummary>> GetRatingsSummary(\n        string recipeId);\n    ```", "```cs\n    public class RatingsService : IRatingsService\n    {\n        readonly IRatingsRepository _ratingsRepository;\n    ...\n        public RatingsService(\n            IRatingsRepository ratingsRepository)\n        {\n            _ratingsRepository = ratingsRepository;\n        }\n    }\n    ```", "```cs\n    public Task<Result<RatingsSummary>>\n        LoadRatingsSummary(string recipeId)\n        => _ratingsRepository.GetRatingsSummary(recipeId);\n    public Task<<Result<IReadOnlyCollection<Rating>>>\n        LoadRatings(string recipeId)\n        => _ratingsRepository.GetRatings(recipeId);\n    ```", "```cs\npublic interface IFavoritesRepository\n{\n    Task<Result<IReadonlyCollection<string>>>\n        LoadFavorites(string userId);\n    Task<Result<Nothing>> Add(string userId, string id);\n    Task<Result<Nothing>> Remove(string userId, string id);\n}\n```", "```cs\npublic struct Nothing\n{\n}\n```", "```cs\n    public class FavoritesService : IFavoritesService\n    {\n        readonly IFavoritesRepository\n            _favoritesRepository;\n    ...\n        public FavoritesService(\n            IFavoritesRepository favoritesRepository)\n        {\n            _favoritesRepository = favoritesRepository;\n        }\n    }\n    ```", "```cs\n    List<string> favorites = null;\n    private async ValueTask LoadList()\n    {\n        if (favorites is null)\n        {\n            var loadResult = await _favoritesRepository\n                .LoadFavorites(GetCurrentUserId());\n            if (loadResult.IsSuccess)\n            {\n                favorites = loadResult.Data.ToList();\n            }\n        }\n    }\n    //Dummy implementation,\n    //could be retrieved via injected service\n    private string GetCurrentUserId()\n        => \"3\";\n    ```", "```cs\n    public async Task<bool> IsFavorite(string id)\n    {\n        await LoadList();\n        return favorites is not null\n            && favorites.Contains(id);\n    }\n    ```", "```cs\n    public async Task<Result<Nothing>> Add(string id)\n    {\n        var result = await _favoritesRepository\n            .Add(GetCurrentUserId(), id);\n    }\n    ```", "```cs\n    if (result.IsSuccess)\n    {\n        if (favorites is not null\n            && !favorites.Contains(id))\n            favorites.Add(id);\n        WeakReferenceMessenger.Default\n            .Send(new FavoriteUpdateMessage(id, true));\n    }\n    return result;\n    ```", "```cs\n    public async Task<Result<Nothing>> Remove(string id)\n    {\n        var result = await _favoritesRepository\n            .Remove(GetCurrentUserId(), id);\n        if (result.IsSuccess)\n        {\n            if (favorites is not null\n                && favorites.Contains(id))\n                favorites.Remove(id);\n            WeakReferenceMessenger.Default\n                .Send(\n                new FavoriteUpdateMessage(id, false));\n        }\n        return result;\n    }\n    ```", "```cs\n    public static class ServiceCollectionExtension\n    {\n        public static IServiceCollection\n            RegisterRepositories(\n            this IServiceCollection services)\n        {\n            services.AddTransient<IRatingsRepository,\n                RatingsApiGateway>();\n            services.AddTransient<IRecipeRepository,\n                RecipeApiGateway>();\n            services.AddTransient<IFavoritesRepository,\n                FavoritesApiGateway>();\n            return services;\n        }\n    }\n    ```", "```cs\n    builder.Services.RegisterRepositories();\n    ```", "```cs\n    public interface IRecipeApi\n    {\n        [Get(\"/recipe/{recipeId}\")]\n        Task<ApiResponse<RecipeDto>>\n            GetRecipe(string recipeId);\n    }\n    ```", "```cs\n    var api = RestService.For<IRecipeApi>(\n            \"https://api.yourservice.com\");\n    ```", "```cs\n    var recipeResponse = await api.GetRecipe(\"1\");\n    if (recipeResponse.IsSuccessStatusCode)\n    {\n        RecipeDto recipe = recipeResponse.Content;\n    }\n    Task<RecipeDto> GetRecipe(string recipeId);\n    ```", "```cs\n    public interface IFavoritesApi\n    {\n        [Get(\"/users/{userId}/favorites\")]\n        Task<string[]> GetFavorites(string userId);\n        [Post(\"/users/{userId}/favorites\")]\n        Task AddFavorite(string userId,\n            FavoriteDto favorite);\n        [Delete(\"/users/{userId}/favorites/{recipeId}\")]\n        Task DeleteFavorite(string userId,\n            string recipeId);\n    }\n    ```", "```cs\n    [Post(\"/users/{userId}/favorites\")]\n        Task AddFavorite(string userId,\n            IRatingsApi interface, which looks like this:\n\n    ```", "```cs\n\n    Again, these methods and their attributes correspond with the endpoints that allow us to retrieve ratings and a ratings summary for a given recipe ID.\n    ```", "```cs\n    public interface IRecipeApi\n    {\n        [Get(\"/recipe/{recipeId}\")]\n        Task<ApiResponse<RecipeDetailDto>>\n          GetRecipe(string recipeId);\n        [Get(\"/recipes\")]\n        Task<ApiResponse<RecipeOverviewItemsDto>>\n          GetRecipes(int pageSize = 7, int pageIndex = 0);\n    }\n    ```", "```cs\nprotected async Task<Result<TResult>>\n    InvokeAndMap<TResult, TDtoResult>(\n    Task<ApiResponse<TDtoResult>> call,\n    Func<TDtoResult, TResult> mapper)\n{\n}\n```", "```cs\ntry\n{\n    var response = await call;\n    if (response.IsSuccessStatusCode)\n    {\n        return Result<TResult>\n            .Success(mapper(response.Content));\n    }\n    else\n    {\n        return Result<TResult>.Fail(\"FAILED_REQUEST\",\n            response.Error.StatusCode.ToString());\n    }\n}\n...\n```", "```cs\ntry\n{\n...\n}\ncatch (ApiException aex)\n{\n    return Result<TResult>\n        .Fail(\"ApiException\",\n            aex.StatusCode.ToString(), aex);\n}\ncatch (Exception ex)\n{\n    return Result<TResult>.Fail(ex);\n}\n```", "```cs\nprotected Task<Result<T>>\n    InvokeAndMap<T>(<ApiResponse<T>> call)\n    => InvokeAndMap(call, e => e);\n```", "```cs\n    internal class FavoritesApiGateway : ApiGateway,\n      IFavoritesRepository { ... }\n    internal class RatingsApiGateway : ApiGateway,\n      IRatingsRepository { ... }\n    internal class RecipeApiGateway : ApiGateway,\n      IRecipeRepository { ... }\n    ```", "```cs\n    internal class RatingsApiGateway : ApiGateway,\n      IRatingsRepository\n    {\n        readonly IRatingsApi _api;\n    ...\n        public RatingsApiGateway(IRatingsApi api)\n        {\n            _api = api;\n        }\n    }\n    ```", "```cs\n    public Task<Result<IReadOnlyCollection<Rating>>>\n        GetRatings(string recipeId)\n        => InvokeAndMap(\n            _api.GetRatings(recipeId), MapRatings);\n    ```", "```cs\n    using static Recipes.Client.Repositories.Mappers\n      .RatingsMapper;\n    ```", "```cs\n    public Task<Result<RatingsSummary>>\n        GetRatingsSummary(string recipeId)\n        => InvokeAndMap(_api.GetRatingsSummary(recipeId),\n            MapRatingSummary);\n    ```", "```cs\n    internal class FavoritesApiGateway : ApiGateway,\n        IFavoritesRepository\n    {\n        readonly IFavoritesApi _api;\n        public Task<Result<Nothing>> Add(\n            string userId, string id)\n            => InvokeAndMap(_api.AddFavorite(userId,\n                new FavoriteDto(id)));\n        public Task<Result<string[]>> LoadFavorites(\n            string userId)\n            => InvokeAndMap(_api.GetFavorites(userId));\n        public Task<Result<Nothing>> Remove(string userId,\n        string recipeId)\n            => InvokeAndMap(_api.DeleteFavorite(userId,\n                recipeId));\n        public FavoritesApiGateway(IFavoritesApi api)\n        {\n            _api = api;\n        }\n    }\n    ```", "```cs\n    internal class RecipeApiGateway : ApiGateway,\n        IRecipeRepository\n    {\n        readonly IRecipeApi _api;\n    ...\n        public RecipeApiGateway(IRecipeApi api)\n        {\n            _api = api;\n        }\n    }\n    ```", "```cs\n    public Task<Result<LoadRecipesResponse>>\n        LoadRecipes(int pageSize, int page)\n        => InvokeAndMap(_api.GetRecipes(pageSize, page),\n            MapRecipesOverview);\n    ```", "```cs\n    public Task<Result<RecipeDetail>> LoadRecipe(\n        string id)\n        => InvokeAndMap(_api.GetRecipe(id), MapRecipe);\n    ```", "```cs\npublic class RepositorySettings\n{\n    public HttpClient HttpClient { get; }\n    public RepositorySettings(HttpClient httpClient)\n    {\n        HttpClient = httpClient;\n    }\n}\n```", "```cs\n    public static class ServiceCollectionExtension\n    {\n        public static IServiceCollection\n            RegisterRepositories (\n            this IServiceCollection services,\n            RepositorySettings settings)\n        {\n            ...\n            return services;\n        }\n    }\n    ```", "```cs\n    services.AddSingleton((s) =>\n      RestService.For<IRatingsApi>(settings.HttpClient));\n    services.AddSingleton((s) =>\n      RestService.For<IRecipeApi>(settings.HttpClient));\n    services.AddSingleton((s) =>\n    RestService.For<IFavoritesApi>(settings.HttpClient));\n    ```", "```cs\n    var baseAddress = DeviceInfo.Platform ==\n        DevicePlatform.Android\n        ? \"https://10.0.2.2:7220\"\n        : \"https://localhost:7220\";\n    var httpClient = HttpClientHelper\n        .GetPlatformHttpClient(baseAddress);\n    builder.Services.RegisterRepositories(\n        new RepositorySettings(httpClient));\n    ```", "```cs\nprivate bool _isLoading = true;\npublic bool IsLoading\n{\n    get => _isLoading;\n    set => SetProperty(ref _isLoading, value);\n}\nprivate async Task LoadRecipe(string recipeId)\n{\n    IsLoading = true;\n...\n    await Task.WhenAll(loadRecipeTask,\n        loadIsFavoriteTask, loadRatingsTask);\n...\n    IsLoading = false;\n}\n```", "```cs\n<Grid>\n    <ScrollView>\n        ...\n    </ScrollView>\n    <Grid\n        BackgroundColor=\"GhostWhite\"\n        IsVisible=\"{Binding IsLoading}\">\n        <ActivityIndicator\n            HorizontalOptions=\"Center\"\n            IsRunning=\"{Binding IsLoading}\"\n            VerticalOptions=\"Center\" />\n    </Grid>\n</Grid>\n```", "```cs\nprivate async Task LoadRecipes(int pageSize, int page)\n{\n    LoadFailed = false;\n    var loadRecipesTask =\n        recipeService.LoadRecipes(pageSize, page);\n    ...\n    if(recipesResult.IsSuccess)\n    {\n        //Set TotalNumberOfRecipes property\n        //Fill Recipes collection\n        ...\n    }\n    else\n    {\n        LoadFailed = true;\n        ReloadCommand =\n            new AsyncRelayCommand(\n            () => LoadRecipes(pageSize, page));\n    }\n}\n```", "```cs\n<Grid>\n    <CollectionView>\n    ...\n    </CollectionView>\n    <Grid\n        BackgroundColor=\"{StaticResource Primary}\"\n        HorizontalOptions=\"Fill\"\n        IsVisible=\"{Binding LoadFailed}\"\n        VerticalOptions=\"Fill\">\n        <VerticalStackLayout\n            HorizontalOptions=\"Center\"\n            VerticalOptions=\"Center\">\n            <Label Text=\"Unable to load recipes\" />\n            <Button Command=\"{Binding ReloadCommand}\"\n                Text=\"Retry\" />\n        </VerticalStackLayout>\n    </Grid>\n</Grid>\n```"]