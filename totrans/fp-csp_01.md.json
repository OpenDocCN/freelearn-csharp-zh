["```cs\npublic record Book(string Title, string Author, int Year, string Content);\n// Pure function to validate a book\nprivate static bool IsValid(Book book) =>\n     !string.IsNullOrEmpty(book.Title) &&\n     !string.IsNullOrEmpty(book.Author) &&\n     book.Year > 1900 &&\n     !string.IsNullOrEmpty(book.Content);\n// Pure function to format a book\nprivate static string FormatBook(Book book) =>\n     $\"{book.Title} by {book.Author} ({book.Year})\";\n// Higher-order function for processing books\nprivate static IEnumerable<T> ProcessBooks<R>(\n     IEnumerable<Book> books,\n     Func<Book, bool> validator,\n     Func<Book, T> formatter) =>\n     books.Where(validator).Select(formatter);\npublic static void Main()\n{\n    var books = new List<Book>\n         {\n              new Book(\"The Great Gatsby\", \"F. Scott Fitzgerald\", 1925, \"In my younger and more vulnerable years...\"),\n              new Book(\"To Kill a Mockingbird\", \"Harper Lee\", 1960, \"When he was nearly thirteen, my brother Jem...\"),\n              new Book(\"Invalid Book\", \"\", 1800, \"\"),\n              new Book(\"1984\", \"George Orwell\", 1949, \"It was a bright cold day in April, and the clocks were striking thirteen.\")\n         };\n    // Using our higher-order function to process books\n    var formattedBooks = ProcessBooks(books, IsValid, FormatBook);\n    Console.WriteLine(\"Processed books:\");\n    foreach (var book in formattedBooks)\n    {\n         Console.WriteLine(book);\n    }\n}\n```"]