["```cs\n public class ShadowMover : MonoBehaviour {\n         public float windSpeedX = 2;\n         public float windSpeedZ = 2;\n\n         private float lightCookieSize;\n         private Vector3 startPosition;\n         private float limitX;\n         private float limitZ;\n         private Vector3 windMovement;\n\n         void Start() {\n             startPosition = transform.position;\n             lightCookieSize = GetComponent<Light>().cookieSize;\n             limitX = Mathf.Abs(startPosition.x) + lightCookieSize;\n             limitZ = Mathf.Abs(startPosition.z) + lightCookieSize;\n             windMovement = new Vector3(windSpeedX, 0, windSpeedZ);\n         }\n\n         void Update() {\n             Vector3 position = transform.position + (Time.deltaTime \n             * windMovement);\n             position.x = WrapValue(position.x, limitX,     \n             startPosition.x);\n             position.z = WrapValue(position.z, limitZ,         \n             startPosition.z);\n             transform.position = position;\n         }\n\n         private float WrapValue(float n, float limit, float  \n         startValue) {\n             float absoluteValue = Mathf.Abs(n);\n             if (absoluteValue > limit)\n                 return startValue;\n             else\n                 return n;\n         }\n     }\n```", "```cs\nusing UnityEngine;\n\n     public class LaserAim : MonoBehaviour  {\n         private Projector projector;\n         private float margin = 0.5f;\n\n         void Start () {\n             projector = GetComponent<Projector> ();\n         }\n\n         void Update ()  {\n             RaycastHit hit;\n             Vector3 forward =         \n             transform.TransformDirection(Vector3.forward);\n\n             if (Physics.Raycast(transform.position, forward, out hit))\n                 projector.farClipPlane = hit.distance + margin;\n         }\n     }\n```", "```cs\nprojector.farClipPlane = hit.distance + margin \n```", "```cs\npublic class LaserBeam : MonoBehaviour  {\n     public float lineWidth = 0.2f;\n     public Color regularColor = new Color (0.15f, 0, 0, 1);\n     public Material beamMaterial;\n\n     private Vector3 lineEnd;\n     private LineRenderer line;\n\n     void Start () {\n         line = gameObject.AddComponent<LineRenderer>();\n         line.material = beamMaterial;\n         line.material.SetColor(\"_TintColor\", regularColor);\n         line.SetVertexCount(2);\n         line.SetWidth(lineWidth, lineWidth);\n     }\n\n     void Update () {\n         RaycastHit hit;\n         Vector3 forward = \n         transform.TransformDirection(Vector3.forward);\n\n         if (Physics.Raycast (transform.position, forward, out hit))\n             lineEnd =  hit.point;\n         else\n             lineEnd = transform.position + forward * 10f;\n\n         line.SetPosition(0, transform.position);\n         line.SetPosition(1, lineEnd);\n     }\n }\n```", "```cs\npublic Color firingColor = new Color (0.31f, 0, 0, 1);\n```", "```cs\nprivate void SetupColor() {\n         float lerpSpeed = Mathf.Sin (Time.time * 10f);\n         lerpSpeed = Mathf.Abs(lerpSpeed);\n         Color lerpColor = Color.Lerp(regularColor, firingColor, \n         lerpSpeed);\n         line.material.SetColor(\"_TintColor\", lerpColor);\n     }\n```", "```cs\nvoid Update ()  {\n         // â€¦ (as before)\n\n         if(Input.GetButton(\"Fire1\"))\n             SetupColor();\n\n         if(Input.GetButtonUp(\"Fire1\"))\n             line.material.SetColor(\"_TintColor\", regularColor);\n     }\n```", "```cs\nusing UnityEngine;\n     using System.Collections;\n     public class RotateLight : MonoBehaviour {\n       public float speed = -1.0f;\n       void Update () {\n         transform.Rotate(Vector3.right * speed * Time.deltaTime);\n       }\n     }\n```", "```cs\n using UnityEngine;\n using System.Collections;\n\n public class UpdateProbe : MonoBehaviour {\n    private ReflectionProbe probe;\n\n    void Awake () {\n       probe = GetComponent<ReflectionProbe> ();\n       probe.RenderProbe();\n    }\n\n    public void RefreshProbe(){\n       probe.RenderProbe();\n    }\n }\n```", "```cs\nusing UnityEngine;\n\npublic class RandomRotation : MonoBehaviour {\n   private GameObject probe;\n   private UpdateProbe updateProbe;\n\n   void Awake() {\n      probe = GameObject.Find(\"ReflectionProbe-onDemand\");\n      updateProbe = probe.GetComponent<UpdateProbe>();\n   }\n\n   void Update () {\n      if (Input.anyKeyDown) {\n          Vector3 newRotation = transform.eulerAngles;\n          newRotation.y = Random.Range(0F, 360F);\n          transform.eulerAngles = newRotation;\n          updateProbe.RefreshProbe();\n      }\n   }\n}\n```"]