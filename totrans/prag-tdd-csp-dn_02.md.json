["```cs\nmd UqsWeather\ncd UqsWeather\ndotnet new sln\ndotnet new webapi -o Uqs.Weather -f net6.0\ndotnet sln add Uqs.Weather\n```", "```cs\n{\n  \"OpenWeather\": {\n    \"Key\": \"yourapikeygoeshere\"\n  },\n  \"Logging\": {\n  …\n```", "```cs\ndotnet add package AdamTibi.OpenWeather\n```", "```cs\nprivate static readonly string[] Summaries = new[]\n{\n    \"Freezing\", \"Bracing\", \"Chilly\", \"Cool\", \"Mild\",\n    \"Warm\", \"Balmy\", \"Hot\", \"Sweltering\", \"Scorching\"\n};\nprivate string MapFeelToTemp(int temperatureC)\n{\n    if (temperatureC <= 0) return Summaries.First();\n    int summariesIndex = (temperatureC / 5) + 1;\n    if (summariesIndex >= Summaries.Length) return \n       Summaries.Last();\n    return Summaries[summariesIndex];\n}\n```", "```cs\n[HttpGet(\"GetRandomWeatherForecast\")]\npublic IEnumerable<WeatherForecast> GetRandom()\n{\n    WeatherForecast[] wfs = new \n        WeatherForecast[FORECAST_DAYS];\n    for(int i = 0;i < wfs.Length;i++)\n    {\n        var wf = wfs[i] = new WeatherForecast();\n        wf.Date = DateTime.Now.AddDays(i + 1);\n        wf.TemperatureC = Random.Shared.Next(-20, 55);\n        wf.Summary = MapFeelToTemp(wf.TemperatureC);\n    }\n    return wfs;\n}\n```", "```cs\n[\n  {\n    \"date\": \"2021-11-26T22:23:38.6987801+00:00\",\n    \"temperatureC\": 30,\n    \"temperatureF\": 85,\n    \"summary\": \"Hot\"\n  },\n  {\n    \"date\": \"2021-11-27T22:23:38.7001358+00:00\",\n    \"temperatureC\": -15,\n    \"temperatureF\": 6,\n    \"summary\": \"Freezing\"\n  },\n…\n```", "```cs\n[HttpGet(\"GetRealWeatherForecast\")]\npublic async Task<IEnumerable<WeatherForecast>> GetReal()\n{\n    …\n    string apiKey = _config[\"OpenWeather:Key\"];\n    HttpClient httpClient = new HttpClient();\n    Client openWeatherClient = \n       new Client(apiKey, httpClient);\n    OneCallResponse res = await \n      openWeatherClient.OneCallAsync\n        (GREENWICH_LAT, GREENWICH_LON, new [] {\n            Excludes.Current, Excludes.Minutely,\n            Excludes.Hourly, Excludes.Alerts }, \n            Units.Metric);\n    …\n}\n```", "```cs\n[\n  {\n    \"date\": \"2021-11-26T11:00:00Z\",\n    \"temperatureC\": 8,\n    \"temperatureF\": 46,\n    \"summary\": \"Chilly\"\n  },\n  {\n    \"date\": \"2021-11-27T11:00:00Z\",\n    \"temperatureC\": 4,\n    \"temperatureF\": 39,\n    \"summary\": \"Bracing\"\n  },\n…\n```", "```cs\n[HttpGet(\"ConvertCToF\")]\npublic double ConvertCToF(double c)\n{\n    double f = c * (9d / 5d) + 32;\n    _logger.LogInformation(\"conversion requested\");\n    return f;\n}\n```", "```cs\nhttps://localhost:7218/WeatherForecast/ConvertCToF?c=27\n```", "```cs\nFileStream fileStream = new FileStream(…)\n```", "```cs\n    public WeatherForecastController(\n      ILogger<WeatherForecastController> logger, …)\n    ```", "```cs\n    public void DoSomething(B b) { …\n    ```", "```cs\n    wf.Date = DateTime.Now.AddDays(i + 1);\n    ```", "```cs\n    HttpClient httpClient = new HttpClient();\n    ```", "```cs\nprivate readonly ILogger<WeatherForecastController> \n    _logger;\n```", "```cs\n_logger.LogInformation(\"conversion requested\");\n```", "```cs\nprivate readonly IConfiguration _config;\n```", "```cs\nstring apiKey = _config[\"OpenWeather:Key\"];\n```", "```cs\nHttpClient httpClient = new HttpClient();\n```", "```cs\nClient openWeatherClient = new Client(apiKey, httpClient);\n```", "```cs\nwf.Date = DateTime.Now.AddDays(i + 1);\n```", "```cs\npublic static DateTime Now { get; }\n```", "```cs\nwf.TemperatureC = Random.Shared.Next(-20, 55);\n```", "```cs\nWeatherForecast[] wfs = new WeatherForecast[FORECAST_DAYS];\n```", "```cs\npublic abstract class Stream : …\n```", "```cs\npublic class FileStream : Stream\n```", "```cs\npublic class MemoryStream : Stream\n```", "```cs\npublic static void Serialize (Stream utf8Json, object? \n    value, …);\n```", "```cs\npublic static void Serialize (FileStream utf8Json, …);\npublic static void Serialize (MemoryStream utf8Json, …);\npublic static void Serialize (SqlFileStream utf8Json, …);\npublic static void Serialize (BufferedStream utf8Json, …);\nMore Stream overloads…\n```", "```cs\npublic static int Sum(int[] elements) \n{\n    int sum = 0;\n    foreach (int e in elements) sum += e;\n    return sum;\n}\n```", "```cs\npublic static int Sum(IEnumerable<int> elements)\n```", "```cs\nint[] array = new int[] { 1, 2 };\nList<int> list = new List<int> { 1, 2 };\nQueue<int> queue = new Queue<int>();\nqueue.Enqueue(1);\nqueue.Enqueue(2);\n// More collections\nSum(array);\nSum(list); // new benefit\nSum(queue); // new benefit\n```", "```cs\npublic WeatherForecastController(\n  ILogger<WeatherForecastController> logger, \n    IConfiguration config)\n```", "```cs\nClient openWeatherClient = new Client(apiKey, httpClient); \n```", "```cs\npublic class BadClass \n{\n    public BadClass() {}\n    public void DoSometing()\n    {\n      MyConcreteType t = new MyConcreteType();\n      t.UseADependency();\n    }\n}\n```", "```cs\npublic class GoodClass \n{\n    private readonly IMyClass _myClass; \n    public GoodClass(IMyClass myClass) \n        { _myClass = myClass; }\n    public void DoSometing()\n    {\n      _myClass.UseADependency();\n    }\n    public void DoSometingElse(SecondClass second)\n    {\n      second.UseAnotherDependency();\n    }\n}\n```", "```cs\npublic WeatherForecastController(\n    ILogger<WeatherForecastController> logger) \n{\n    _logger = logger;\n```", "```cs\nILogger<WeatherForecastController> logger = new \n    Logger<WeatherForecastController>(…); \nvar controller = new WeatherForecastController(logger);\n```", "```cs\ndotnet new console -o Uqs.Weather.TestRunner\ndotnet sln add Uqs.Weather.TestRunner\ndotnet add Uqs.Weather.TestRunner reference Uqs.Weather\n```", "```cs\nusing Microsoft.Extensions.Logging;\nusing Uqs.Weather.Controllers;\nvar logger = new Logger<WeatherForecastController>(null); \n//fails\nvar controller = new WeatherForecastController(logger, \n    null!);\ndouble f1 = controller.ConvertCToF(-1.0);\nif (f1 != 30.20d) throw new Exception(\"Invalid\");\ndouble f2 = controller.ConvertCToF(1.2);\nif (f2 != 34.16d) throw new Exception(\"Invalid\");\nConsole.WriteLine(\"Test Passed\");\n```", "```cs\nvar controller = new WeatherForecastController(null, null);\n```", "```cs\n_logger.LogInformation(\"conversion requested\");\n```", "```cs\nvar logger = NullLogger<WeatherForecastController>\n    .Instance;\nvar controller = new WeatherForecastController(logger, …);\n```", "```cs\npublic class NullLogger<T> : Microsoft.Extensions.Logging\n    .ILogger<T>\n```", "```cs\npublic double ConvertCToF(double c)\n{\n    double f = c * (9d / 5d) + 32;\n    _logger.LogInformation(\"conversion requested\");\n    return f;\n}\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\n```", "```cs\nint servicesCount = builder.Services.Count;\n```", "```cs\nvar logServices = builder.Services.Where(_ => \n    x.ServiceType.Name.Contains(\"Log\")).ToArray();\n```", "```cs\nstring apiKey = _config[\"OpenWeather:Key\"];\nHttpClient httpClient = new HttpClient();\nClient openWeatherClient = new Client(apiKey, httpClient);\nOneCallResponse res = \n   await openWeatherClient.OneCallAsync(…)\n```", "```cs\npublic class Client : IClient\n```", "```cs\npublic interface IClient\n{\n    Task<OneCallResponse> OneCallAsync(decimal latitude, \n       decimal longitude, IEnumerable<Excludes> excludes,\n       Units unit);\n}\n```", "```cs\nprivate readonly IClient _client;\npublic WeatherForecastController(IClient client, …\n{\n    _client = client;\n    …\n```", "```cs\nClient openWeatherClient = new Client(apiKey, httpClient);\nOneCallResponse res = \n    await openWeatherClient.OneCallAsync(…);\n```", "```cs\nOneCallResponse res = await _client.OneCallAsync(…);\n```", "```cs\nSystem.InvalidOperationException: Unable to resolve service \n  for type IClient' while attempting to activate \n    'WeatherForecastController'\n```", "```cs\n// Add services to the container.\nbuilder.Services.AddSingleton<IClient>(_ => {\n    string apiKey = \n        builder.Configuration[\"OpenWeather:Key\"];\n    HttpClient httpClient = new HttpClient();\n    return new Client(apiKey, httpClient);\n});\n```", "```cs\nwf.Date = DateTime.Now.AddDays(i + 1);\n```", "```cs\npublic static DateTime Now\n```", "```cs\npublic interface INowWrapper\n{\n    DateTime Now { get; }\n}\n```", "```cs\npublic class NowWrapper : INowWrapper\n{\n    public DateTime Now => DateTime.Now;\n}\n```", "```cs\npublic WeatherForecastController(, INowWrapper nowWrapper, )\n{\n    _nowWrapper = nowWrapper;\n…\n```", "```cs\nwf.Date = _nowWrapper.Now.AddDays(i + 1);\n```", "```cs\nbuilder.Services.AddSingleton<INowWrapper>(_ => \n    new NowWrapper());\n```", "```cs\nwf.TemperatureC = Random.Shared.Next(-20, 55);\n```", "```cs\npublic interface IRandomWrapper\n{\n    int Next(int minValue, int maxValue);\n}\n```", "```cs\npublic class RandomWrapper : IRandomWrapper\n{\n    private readonly Random _random = Random.Shared;\n    public int Next(int minValue, int maxValue)\n        => _random.Next(minValue, maxValue);\n}\n```", "```cs\nwf.TemperatureC = _randomWrapper.Next(-20, 55);\n```", "```cs\nbuilder.Services.AddTransient<IRandomWrapper>(_ => \n    new RandomWrapper());\n```", "```cs\nOneCallResponse res = await _client.OneCallAsync(…)\n```", "```cs\n\"LoadTest\": {\n  \"IsActive\" : false \n}, …\n```", "```cs\npublic class ClientStub : IClient\n{\n    public Task<OneCallResponse> OneCallAsync(\n        decimal latitude, decimal longitude, \n        IEnumerable<Excludes> excludes, Units unit) \n    {\n        const int DAYS = 7;\n        OneCallResponse res = new OneCallResponse();\n        res.Daily = new Daily[DAYS];\n        DateTime now = DateTime.Now;\n        for (int i = 0; i < DAYS; i++)\n        {\n            res.Daily[i] = new Daily();\n            res.Daily[i].Dt = now.AddDays(i);\n            res.Daily[i].Temp = new Temp();\n            res.Daily[i].Temp.Day = \n                Random.Shared.Next(-20, 55);\n        }\n        return Task.FromResult(res);\n    }\n}\n```", "```cs\nbuilder.Services.AddSingleton<IClient>(_ => {\n    bool isLoad =      \n    bool.Parse(builder.Configuration[\"LoadTest:IsActive\"]);\n    if (isLoad) return new ClientStub();\n    else\n    {\n        string apiKey = \n            builder.Configuration[\"OpenWeather:Key\"];\n        HttpClient httpClient = new HttpClient();\n        return new Client(apiKey, httpClient);\n    }\n});\n```", "```cs\npublic double ConvertCToF(double c,\n    [FromServices] ILogger<WeatherForecastController>\n       logger)\n{\n    double f = c * (9d / 5d) + 32;\n    logger.LogInformation(\"conversion requested\");\n    return f;\n}\n```", "```cs\npublic class SampleClass\n{\n    private readonly IServiceProvider _serviceProvider;\n    public SampleClass(IServiceProvider serviceProvider)\n    {\n        _serviceProvider = serviceProvider;\n    }\n    public void Method()\n    {\n        MyClass myClass = \n            _serviceProvider.GetService<IMyClass>();\n        myClass.DoSomething();\n    }\n}\n```", "```cs\npublic SampleClass(IMyClass myClass) \n```"]