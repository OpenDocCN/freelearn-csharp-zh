- en: Functional Programming
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will be looking at these recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Creating a .NET Standard 2.0 library
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a .NET Core console application to use the library
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a .NET Standard 2.0 library that uses tuples
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Razor Pages web application to use the library
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a .NET Standard 2.0 library that uses delegates and lambda expressions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a .NET console application to use the library
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Readers should have a basic knowledge of C#. They should also have a basic knowledge
    of using Visual Studio, installing packages using NuGet, and referencing libraries
    within projects from other projects.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: 'The code files for this chapter can be found on GitHub:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/DotNET-Standard-2-Cookbook/tree/master/Chapter04](https://github.com/PacktPublishing/DotNET-Standard-2-Cookbook/tree/master/Chapter04)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '[https://goo.gl/yeUdkd](https://goo.gl/yeUdkd)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter talks about the functional programming capabilities of C# and
    how to use them for a .NET Standard 2.0 library. Let''s look at a definition of
    functional programming:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: <q>"Functional programming is a style that treats computation as the evaluation
    of mathematical functions and avoids changing state and mutable data."</q>
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: 'Simply put, it means you will be able to use functions as inputs and outputs
    for other functions. You can also assign them to variables and store them in collections.
    Have a look at the following code, which explains what we just talked about:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Again, when we follow the functional paradigm, we must avoid state mutation.
    This means that when an object is created, it never changes; variables should
    never be reassigned. Functional programming has been around for quite a while
    and C# supports it very well. Although, if you are looking at functional programming,
    F# is also a good choice.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: Creating a .NET Standard 2.0 library
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will be looking at the basics of functional programming using
    C# inside a .NET Standard 2.0 library.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's get ready and open Visual Studio 2017\. You should also check to see whether
    it's updated to the latest version.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Visual Studio 2017.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click File | New | Project to create a project.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the New Project dialog box, expand the Other Project Types node in the left-hand
    pane and select Visual Studio Solutions. In the right-hand pane, select Blank
    Solution**.**
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Name: textbox, type `Chapter4.Functions` and, in the Location: textbox,
    select a path from the drop-down box or click on the Browse... button to locate
    a path:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/df12a8b7-e54b-47d9-b334-ec3f7871e555.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
- en: Click OK.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, your Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4b394f95-c5b0-419e-a5dd-0206b9f30d2f.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
- en: Now, right-click on the `Chapter4.Functions` label in the Solution Explorer
    and select Add  | New Project**.**
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the New Project dialog box, expand the Visual C# node.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select .NET Standard in the left-hand pane and Class Library (.NET Standard)
    in the right-hand pane:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3cc92569-210f-4dc1-b96c-d4c3efc24a03.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
- en: 'Now, in the Name: textbox, type `Chapter4.Functions.FuncLib`. Leave the other
    defaults as they are and click OK:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/650f77a2-9643-42e1-8953-2f35241d01ea.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
- en: 'Now, the Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b9dd5e0e-7d25-42c5-bfd4-d696a32b1e94.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
- en: Now, select `Class1.cs` in the Solution Explorer and press *F2* to rename the
    file `Helper.cs`.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Answer Yes in the confirmation dialog box that asks to rename the class name
    as well.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, double-click on the `Helper.cs` label in the Solution Explorer.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the code window for `Helper.cs`, type the following code in between the
    curly brackets of the class:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Let's press *Ctrl* + *Shift* + *B* for a quick build to check that all the syntax
    is correct.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In steps 1 to 5, we added a blank solution. This is the base of the coding we
    are adding in this recipe and the next. After that, we added a .NET Standard 2.0
    library in steps 7 to 11\. In steps 12 and 13, we renamed the default class generated
    by the template. You can always delete this default class template and add a new
    class to the project with the new name.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: 'In step 15, we added code to the `Helper` class. In the first line, we created
    a function that takes a number as an integer and returns an integer as the output.
    Before the output, we added 1 to the input. `Func<>`  is used to create the function.
    The first `int` is taken as the input and the last one as the output. You can
    add many parameters to this, but the last one is always taken as the output type.
    For example:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The preceding function takes two `string` inputs and returns an `int` as the
    output. And in the step 15, the second line of code checks whether the input number
    is zero and returns a Boolean value as the output. If the number is zero, it always
    returns `true`, or else it returns `false`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: Creating a .NET Core console application to use the library
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will be creating a .NET Core 2.0 console application to use
    the library we built in the previous recipe.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure you have completed the previous recipe that built the .NET Standard
    2.0 library. If you have completed it, locate it, and open it using Visual Studio
    2017\. Perform a quick build to check for the syntax using *Ctrl* + *Shift* +
    *B*.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Visual Studio 2017.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now open the solution that we built from the previous recipe.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The Solution Explorer should look like this:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/761cb57a-41cb-429f-a655-cf3c1b0080e1.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
- en: Press *Ctrl* + *Shift* + *B* for a quick build to check the syntax.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let's select the solution name and right-click.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the menu, select Add | New Project.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the New Project dialog box, expand the Visual C# node and select .NET Core
    in the left-hand pane.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the right-hand pane, select Console App (.NET Core):'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4a680020-6fa9-4d11-9f8f-ff9854711b8d.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
- en: 'In the Name: textbox, type `Chapter4.Functions.CoreConsoleApp` and leave the
    defaults as they are:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f5fc2991-5dd5-45ef-902e-54a455812e45.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
- en: 'Now, the Solution Explorer should look like this:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/67176e37-d2f9-4d6b-aedd-1cc7cf960dda.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
- en: Now, select the `Chapter4.Functions.CoreConsoleApp` label in the Solution Explorer.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the Dependencies label and select Add Reference.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Reference Manager dialog box, in the left-hand pane, select Projects.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the right-hand pane, check `Chapter4.Functions.Funclib` in the list:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3fd74c7b-ea5e-4805-a1f2-bb296a3f87fc.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
- en: Click OK.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, double-click on the `Program.cs` label to open the code window.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the code window, scroll up till you see the `using` directives.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following `using` directive at the end of all the `using` directives:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, scroll down to the main method and replace the default code that was generated
    from the template with the following:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now, make sure the `Chapter4.Functions.CoreConsoleApp` project is set as the
    start up project and then press *F5* to execute.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see output like this:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/64568cb1-970c-44c9-bd2c-83fa9f2f64ef.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In steps 1 to 5, we opened the previous solution from the recipe that built
    the .NET Standard 2.0 library. Then, we performed a quick build to check for syntax
    errors. This is very good practice; check for syntax on previously built code
    before we go further. Then, in steps 6 to 10, we added a .NET Core 2.0 console
    application to the project. In steps 12 to 14, we added the library we built as
    a dependency to the .NET Core 2.0 console application.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: You must add this reference to use the library's functionality in the console
    application. Then, we added two `using` statements in step 18\. The first one
    will allow you to use LINQ capabilities in the code and the second one will allow
    you to use the available methods from the library.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: Then, in step 19, we added code to use the methods from the library. In the
    first line, we created an instance of the `Helper` class and stored it in a variable.
    Then, we used the `AddOne` function and wrote the output to the console. In the
    third line, we created an integer array and stored a few numbers. Finally, we
    used the count function available in LINQ to use the function we created. The
    count function will go through each number in the array, pass it to our `IsZero`
    function, and return the output.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: At the end, in step 21, we executed the application to see the output.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: Creating a .NET Standard 2.0 library that uses tuples
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we will be using C# tuples with our library. Tuples allow you
    to combine the assignment of multiple variables of varying types in a single statement.
    For example, you can do this in a single line of code:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Let's have a look at using tuples in a .NET Standard 2.0 library.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's launch Visual Studio 2017 and make sure it's updated to the latest version.
    We will require C# 7.0 to complete this recipe.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Visual Studio 2017.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click File | New | Projectto create a project.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the New Project dialog box, expand the Other Project Types node in the left-hand
    pane and select Visual Studio Solutions. In the right-hand pane, select Blank
    Solution**.**
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Name: textbox, type `Chapter4.Tuples` and, in the Location: textbox,
    select a path from the drop-down box or click on the Browse... button to locate
    a path:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b3f541e2-3dad-4fa8-8bc3-2655eb663fe3.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
- en: Click OK.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, your Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a0b6f493-e522-49cc-ab25-9f4ed0466b0f.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
- en: Now, right-click on the `Chapter4.Tuples` label in the Solution Explorer and
    select Add | New Project**.**
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the New Project dialog box, expand the Visual C# node.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select .NET Standard in the left-hand pane and Class Library (.NET Standard)
    in the right-hand pane:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4199963e-871c-4e27-9ecb-2c051bc3afe5.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
- en: 'Now, in the Name: textbox, type `Chapter4.Tuples.TupleLib`, leave the other
    defaults as they are, and click OK:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/713fc22a-2a69-4810-8385-71c507b1579e.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
- en: 'Now, the Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9024199f-b49e-48c8-933a-9d4f7cf03449.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
- en: Now, select `Class1.cs` in the Solution Explorer and press *F2* to rename the
    file `Employee.cs`.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Answer Yes in the confirmation dialog box that asks to rename the class name
    as well.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, double-click on the `Employee.cs` label in the Solution Explorer.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the code window, add the following code in between the curly brackets of
    the `Employee` class:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Press *Ctrl* + *Shift* + *B* for a quick build to check syntax.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have created a blank solution in steps 1 to 5 and assigned it a proper name.
    In steps 6 to 10, we added a new project to the solution. We selected a .NET Standard
    2.0 library template as the starting point of the project and then we gave it
    a proper name. In steps 11 and 12, we renamed the default `Class1.cs` to something
    more meaningful. This class was generated from the template itself. You can rename
    it or you can delete that file and add a new one.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: In step 15, we created a method that returns two string types and an integer
    type. This was possible because of tuples. In that method, we assigned the variables
    and returned them in a sequence to match the return type of the method. Finally,
    we performed a quick build to confirm the syntax was correct.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Razor Pages web application to use the library
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will be building a Razor Pages web application to use the
    .NET Standard 2.0 library created in the previous recipe. A Razor Pages web application
    is a slimmer version of the MVC framework. You can tell it's the successor to
    good old `.aspx` web form pages. This was an addition after .NET Core 2.0.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure you have the latest version of Visual Studio 2017 and .NET Core 2.0
    installed, and that you have access to the solution we built in the previous recipe.
    Do a quick *Ctrl* + *Shift* + *B* to check that everything is intact and working.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Visual Studio 2017.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now open the solution that we built from the previous recipe.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The Solution Explorer should look like this:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f677fce4-2d25-4260-ba5a-e2a40a112821.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
- en: Press *Ctrl* + *Shift* + *B* for a quick build to check the syntax.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let's select the solution name and right-click.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the menu, select Add | New Project.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the New Project dialog box, expand the Visual C# node and select .NET Core
    in the left-hand pane.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the right-hand pane, select ASP.NET Core Web Application:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/940630cc-e081-43c9-94c6-7084983d27b4.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
- en: 'In the Name: textbox, type `Chapter4.Tuples.CoreRazorWebApp` and leave the
    defaults as they are:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/791921f9-dd98-4170-8a0a-3c7e07320a1a.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
- en: Click OK.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, in the New ASP.NET Core Web Application dialog box, select Web Application
    in the templates list (make sure you have selected .NET Core and ASP.NET Core
    2.0 from the drop-down lists):'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/eb316942-5828-433f-aa7e-03f81bc732e7.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
- en: Leave the defaults as they are and click OK.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, the Solution Explorer should look like this:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/33848027-4921-43ca-8d71-f61081f360ff.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
- en: Now, select the `Chapter4.Tuples.CoreRazorWebApp` label in the Solution Explorer.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the Dependencies label and select Add Reference.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Reference Manager dialog box, in the left-hand pane, select Projects.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the right-hand pane, check `Chapter4.Tuples.TupleLib` in the list:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8c62794d-fde2-4e3a-8ef8-5c026df1824b.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
- en: Click OK.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now expand the Pages node.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the Pages label and select Add | Razor Page.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Add Scaffold dialog box, select Razor Page from the template list:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1435bdca-0a84-43b6-bf2d-206ee1831830.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
- en: Click Add.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Add Razor Page dialog box, type `Employee` in the Razor Page name: textbox:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ef52928d-995f-4e16-ace1-09270ddd2f0a.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
- en: Click Add.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By default, Visual Studio will present you with the `Employee.chtml.cs` file.
    If not, you can always expand the node for the `Employee.chtml` file and double-click
    on the `Employee.chtml.cs` label.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now scroll up till you reach the `using` directives.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the end of the `using` directive, add the reference to our library:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now scroll down till you reach the `OnGet()` method.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code in between the curly brackets of the `OnGet()` method:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now click on the `Employee.cshtml` tab to enter the Razor Page.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code at the end of the page:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now save your work.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *F5* to execute the application.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The browser will display the default index page as follows:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/98dd83f3-b9a9-4229-b777-546628725f0a.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
- en: 'Click on the address bar. At the end of the URL, type `Employee` and press
    *Enter*. (The entire URL should look like this: `localhost:<yourportnumber>/Employee`):'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f46c6a0f-6d6f-4235-9da7-1a7b058df6cd.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
- en: Now close the browser.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In steps 1 to 5, we opened the solution from the previous recipe. We also performed
    a quick build to check for syntax. Then, in steps 6 to 13, we added an ASP.NET
    Core Web application to the solution. In steps 14 to 16, we added the reference
    to the library we built in the previous recipe. This will allow you to use the
    available functionality from the library in your ASP.NET Core Web application
    project.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: In steps 20 to 24, we added a new Razor Page to the project. A Razor Page contains
    two files. One is a `.chtml` file, which contains the look and feel, and the other
    file contains the code for that Razor file. This is similar to an `.aspx` page
    and the code behind the file in an ASP.NET Web Forms application.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: In step 27, we added reference code to our library. Then, in step 29, we added
    code to use the functionality from the library. In the first line of code, we
    created an instance of the `Employee` class and stored it in a variable. Then,
    in the second line, we used the `GetBasicDetails()` method to access employee
    details using tuples. Finally, we stored those values in the `ViewData` helper
    class.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: In step 31, we used the `ViewData` helper class to display the values to the
    user. In this step, we used HTML markup and Razor syntax to display the information.
    Finally, in steps 33 to 36, we executed the application and tested it in the default
    browser.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: Creating a .NET Standard 2.0 library that uses delegates and lambda expressions
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we will be using another functionality available in C#. These
    are called delegates and lambda expressions. What is a delegate in C#? As per
    the Microsoft documentation, it says:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: <q>"A delegate is a type that represents references to methods with a particular
    parameter list and return type."</q>
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: Simply put, delegates are used to pass methods as arguments to other methods,
    and a lambda expression is an anonymous function that you can use to create delegates
    or expression tree types.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure Visual Studio 2017 is installed and updated to the latest version.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Visual Studio 2017.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click File | New | Projectto create a project.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the New Project dialog box, expand the Other Project Types node in the left-hand
    pane and select Visual Studio Solutions. In the right-hand pane, select Blank
    Solution**.**
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Name: textbox, type `Chapter4.Delegates` and, in the Location: textbox,
    select a path from the drop-down box or click on the Browse... button to locate
    a path:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8313c0ba-8270-4ed8-9d1f-3fdca77f9032.png)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
- en: Click OK.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, your Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1eb9e934-c032-4e77-8d90-877fc8e64800.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
- en: Now, right-click on the `Chapter4.Delegates` label in the Solution Explorer
    and select Add | New Project**.**
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the New Project dialog box, expand the Visual C# node.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select .NET Standard in the left-hand pane and Class Library (.NET Standard)
    in the right-hand pane:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0cd7d6ae-bd4f-4923-a150-b2725bfc2577.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
- en: 'Now, in the Name: textbox, type `Chapter4.Delegates.DelegateLib`. Leave the
    other defaults as they are and click OK:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d14e3acc-9a71-44bf-b314-0770de567fd8.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
- en: 'Now, the Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cba687dc-513d-47fd-8a5f-ca424807dd5b.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
- en: Now, select `Class1.cs` in the Solution Explorer and press *F2* to rename the
    file `Calculator.cs`.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Answer Yes in the confirmation dialog box that asks to rename the class name
    as well.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, select the `Calculators.cs` label and double-click on it to open the code
    window.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following `using` directive to the top of the code:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, scroll down in between the curly brackets of the `Calculator` class and
    add the following code:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, next to the end curly bracket of the `AddTwoNumbers()` method, add the
    following code:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Perform a quick build by pressing *Ctrl* + *Shift* + *B* and confirm that all
    the syntax is correct.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We created a blank solution in steps 1 to 5\. In steps 7 to 10, we added a .NET
    Standard 2.0 Class Library project to the solution. We have given a meaningful
    name to the project in these steps. We renamed the default class name generated
    from the template in steps 12 and 13\. We added a `using` statement for LINQ in
    step 14\. This is necessary to explain the lambda expressions using LINQ.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: In step 16, we added code to create a delegate and a method to use that delegate
    as a parameter. The delegate `Message` takes a parameter as a `string` and returns
    the output as a `string`. Then, we added a method to add two numbers and return
    the answer as a string with a message. As you can see, there are three parameters
    for the `AddTwoNumbers()` method. The first two are integers and the last parameter
    is the delegate we created.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: In step 17, we created another method to count the occurrences of numbers in
    an array of integers. In the first line of the `CountScoresMoreThan80()` method,
    we used the `Where()` method that comes with LINQ. Inside the `Where()` method,
    we used a lambda expression to check for numbers that are greater than `80`. We
    then used the `Count()` method to count the occurrences filtered with the `Where()`
    method and returned the answer as a `string`.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we performed a quick build to confirm the syntax is correct.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: Creating a .NET console application to use the library
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will be building a .NET console-based application to test
    our library. We will be using the full .NET Framework, which is available for
    Windows only.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure you have located the solution built in the previous recipe and done
    a quick *Ctrl* + *Shift* + *B* to build the solution. We are all set to test the
    library, so let's get started.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Visual Studio 2017.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, open the solution that we built from the previous recipe.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The Solution Explorer should look like this:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0b218e00-6639-45a5-b2ff-4fd982785b19.png)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
- en: Press *Ctrl* + *Shift* + *B* for a quick build to check the syntax.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let's select the solution name and right-click.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the menu, select Add | New Project.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the New Project dialog box, expand the Visual C# node and select Windows
    Classic Desktop in the left-hand pane.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the right-hand pane, select Console App (.NET Framework):'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/743786fa-77b3-4bdd-85bd-97ee65353f39.png)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
- en: 'In the Name: textbox, type `Chapter4.Delegates.ConsoleApp` and leave the defaults
    as they are:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ce9e1137-9891-4f69-96b3-4b61e53ade81.png)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
- en: 'Now, the Solution Explorer should look like this:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/02bd0871-6722-47ce-97e7-19e2ad2ac6d7.png)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
- en: Now, select the `Chapter4.Delegates.ConsoleApp` label in the Solution Explorer.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the References label and select Add Reference.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Reference Manager dialog box, in the left-hand pane, select Projects.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the right-hand pane, check `Chapter4.Delegates.DelegateLib` in the list:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c94b548e-792e-44b6-9605-615a3a386bdb.png)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
- en: Click OK.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now double-click on the `Program.cs` label to open the code window.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the code window, scroll up till you see the `using` directives.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following `using` directive at the end of all the `using` directives:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, next to the end curly bracket of the `Main()` method, add the following
    code:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, scroll down to the `Main()` method and add the following code in between
    the curly brackets of the `Main()` method:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Let's press *F5* to execute the program.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see output similar to this:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b1c6b6d1-9842-4c3e-8877-31bf3a43aa82.png)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
- en: Press *Enter* to close the console window.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In steps 1 to 5, we opened the solution from the previous recipe and perform
    a quick build. This will make sure the code syntax is correct. If the build fails,
    you might have to check for any typos and correct them. This is always a good
    practice to make sure your code builds successfully before you close a solution
    or send it to source control. In steps 6 to 10, we added a new project to the
    solution. We have selected a console application template, which supports the
    full .NET Framework under Windows.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: Then, in steps 12 to 15, we added the reference to the .NET Standard 2.0 library
    from our console application. This will allow you to access all the available
    functionality in the library for the console application. In step 18, we added
    the reference to the library. We have used a `using` statement for it. Then, in
    step 19, we added a method to use with the delegate in the library.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: In step 20, in the first line, we created an instance of the Calculator class
    and stored it in a variable, and then, in the second line, used the delegate inside
    the class and assigned it from the method created in step 19\. Then, we used the
    `AddTwoNumbers()` method with two integer values and the delegate variable as
    the parameters and printed the output to the console window. In the fourth line,
    we created an integer array, stored a few values, used the `CountScoresMoreThan80()`
    method, passed the integer array as the parameter, and printed the output to the
    console.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤20中，第一行我们创建了一个Calculator类的实例并将其存储在一个变量中，然后，在第二行中，我们在类内部使用了代理，并将其从步骤19中创建的方法中赋值。接着，我们使用`AddTwoNumbers()`方法，传入两个整数值和代理变量作为参数，并将输出打印到控制台窗口。在第四行，我们创建了一个整数数组，存储了一些值，使用`CountScoresMoreThan80()`方法，将整数数组作为参数传递，并将输出打印到控制台。
- en: Finally, in steps 21 and 22, we executed the code and checked the output.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在步骤21和22中，我们执行了代码并检查了输出结果。
