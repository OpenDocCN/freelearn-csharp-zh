["```cs\n    using UnityEngine;using System.Collections;\n    ```", "```cs\n    public class PlayerTransition : MonoBehaviour  {\n    ```", "```cs\n        Vector3 transitionToEnd = new Vector3(-100,0,0);    Vector3 transitionToCompleteGame = new Vector3(7000,0,0);    Vector3 readyPos = new Vector3(900,0,0);    Vector3 startPos;\n    ```", "```cs\n      float distCovered;  float journeyLength;\n    ```", "```cs\n     bool levelStarted = true; bool speedOff = false; bool levelEnds = false; bool gameCompleted = false; public bool LevelEnds  {    get {return levelEnds;}    set {levelEnds = value;} } public bool GameCompleted  {    get {return gameCompleted;}    set {gameCompleted = value;} }\n    ```", "```cs\n        void Start()    {        this.transform.localPosition = Vector3.zero;        startPos = transform.position;        Distance();    }\n    ```", "```cs\n        void Distance()    {        journeyLength = Vector3.Distance(startPos, readyPos);    }\n    ```", "```cs\n        void Update()    {        if (levelStarted)        {            PlayerMovement(transitionToEnd, 10);         }\n    ```", "```cs\n    if (levelEnds)  {    GetComponent<Player>().enabled = false;    GetComponent<SphereCollider>().enabled = false;    Distance();    PlayerMovement(transitionToEnd, 200);  }\n    ```", "```cs\n  if (gameCompleted)    {      GetComponent<Player>().enabled = false;      GetComponent<SphereCollider>().enabled = false;      PlayerMovement(transitionToCompleteGame, 200);    }\n```", "```cs\n     if (speedOff)    {       Invoke(\"SpeedOff\",1f);    }}\n    ```", "```cs\n     void PlayerMovement(Vector3 point, float transitionSpeed)    { \n    ```", "```cs\n       if (Mathf.Round(transform.localPosition.x) >= readyPos.x -5 &&               Mathf.Round(transform.localPosition.x) <= readyPos.x +5 &&               Mathf.Round(transform.localPosition.y) >= -5f &&                         Mathf.Round(transform.localPosition.y) <= +5f)                        {\n    ```", "```cs\n       if (levelEnds)    {      levelEnds = false;      speedOff = true;    }   if (levelStarted)     {       levelStarted = false;       distCovered = 0;       GetComponent<Player>().enabled = true;      }   }\n    ```", "```cs\n       else      {       distCovered += Time.deltaTime * transitionSpeed;       float fractionOfJourney = distCovered /     journeyLength;       transform.position = Vector3.Lerp(transform.    position, point,         fractionOfJourney);      }   }\n    ```", "```cs\n    playerShip.transform.position = Vector3.zero;\n    ```", "```cs\n    playerShip.GetComponent<PlayerTransition>().enabled = true;\n    ```", "```cs\n    GetComponentInChildren<Player>().enabled = true;\n    ```", "```cs\n     void SpeedOff() { transform.Translate(Vector3.left * Time.deltaTime*800); }\n    ```", "```cs\n      float gameTimer = 0;  float[] endLevelTimer = {30,30,45};  int currentSceneNumber = 0;  bool gameEnding = false;\n    ```", "```cs\n      void Update()  {    if (currentSceneNumber !=       SceneManager.GetActiveScene().buildIndex)    {      currentSceneNumber = SceneManager.GetActiveScene().buildIndex;      GetScene();    }    GameTimer();  }\n    ```", "```cs\n      void GetScene()  {    scenes = (Scenes)currentSceneNumber;  }\n    ```", "```cs\nvoid GameTimer() {   switch (scenes)   {     case Scenes.level1 : case Scenes.level2 : case Scenes.level3 :     {         if (gameTimer < endLevelTimer[currentSceneNumber-3])        {           //if level has not completed            gameTimer += Time.deltaTime;         }         else          {         //if level is completed          if (!gameEnding)         {            gameEnding = true;            if (SceneManager.GetActiveScene().name != \"level3\")          {            GameObject.FindGameObjectWithTag(\"Player\").    GetComponent                 <PlayerTransition>().LevelEnds = true;          }          else           {            GameObject.FindGameObjectWithTag(\"Player\").    GetComponent                <PlayerTransition> ().GameCompleted = true;                                                                                                                     }             Invoke(\"NextLevel\",4);         }       }      break;     }    } }\n```", "```cs\n      public void ResetScene()  {    gameTimer = 0;    SceneManager.LoadScene(GameManager.currentScene);  }\n    ```", "```cs\n      void NextLevel()  {    gameEnding = false;    gameTimer = 0;    SceneManager.LoadScene(GameManager.currentScene+1);  }\n    ```", "```cs\n     public void BeginGame(int gameLevel) {   SceneManager.LoadScene(gameLevel); }}\n    ```", "```cs\n    UnityEngine.SceneManagement.SceneManager.LoadScene(\"testLevel\");\n    ```", "```cs\n    GameManager.Instance.GetComponent<ScenesManager>   ().BeginGame(GameManager.gameLevelScene);\n    ```", "```cs\n    case 3 : case 4 : case 5:\n    ```", "```cs\n    using UnityEngine.SceneManagement;using UnityEngine;public class LoadSceneComponent : MonoBehaviour { float timer = 0; public string loadThisScene; void Start(){  GameManager.Instance.GetComponentInChildren      <ScoreManager>().ResetScore();} void Update() {     timer += Time.deltaTime;     if (timer > 3)     {         SceneManager.LoadScene(loadThisScene);     } }}\n    ```", "```cs\n    using UnityEngine.SceneManagement;using UnityEngine;public class TitleComponent : MonoBehaviour { void Update() {     if (Input.GetButtonDown(\"Fire1\"))     {         SceneManager.LoadScene(\"shop\");     } }  void Start()  {    GameManager.playerLives = 3;  }}\n    ```"]