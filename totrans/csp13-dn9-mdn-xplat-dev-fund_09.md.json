["```cs\n    <ItemGroup>\n      <PackageReference Include=\"Spectre.Console\" Version=\"0.47.0\" />\n    </ItemGroup>\n    <ItemGroup>\n      <Using Include=\"System.Console\" Static=\"true\" />\n      <Using Include=\"System.IO.Directory\" Static=\"true\" />\n      <Using Include=\"System.IO.Path\" Static=\"true\" />\n      <Using Include=\"System.Environment\" Static=\"true\" />\n    </ItemGroup> \n    ```", "```cs\n    // null namespace to merge with auto-generated Program.\n    partial class Program\n    {\n      private static void SectionTitle(string title)\n      {\n        WriteLine();\n        ConsoleColor previousColor = ForegroundColor;\n        // Use a color that stands out on your system.\n        ForegroundColor = ConsoleColor.DarkYellow;\n        WriteLine($\"*** {title} ***\");\n        ForegroundColor = previousColor;\n      }\n    } \n    ```", "```cs\n    using Spectre.Console; // To use Table.\n    #region Handling cross-platform environments and filesystems\n    SectionTitle(\"Handling cross-platform environments and filesystems\");\n    // Create a Spectre Console table.\n    Table table = new();\n    // Add two columns with markup for colors.\n    table.AddColumn(\"[blue]MEMBER[/]\");\n    table.AddColumn(\"[blue]VALUE[/]\");\n    // Add rows.\n    table.AddRow(\"Path.PathSeparator\", PathSeparator.ToString());\n    table.AddRow(\"Path.DirectorySeparatorChar\",\n      DirectorySeparatorChar.ToString());\n    table.AddRow(\"Directory.GetCurrentDirectory()\",\n      GetCurrentDirectory());\n    table.AddRow(\"Environment.CurrentDirectory\", CurrentDirectory);\n    table.AddRow(\"Environment.SystemDirectory\", SystemDirectory);\n    table.AddRow(\"Path.GetTempPath()\", GetTempPath());\n    table.AddRow(\"\");\n    table.AddRow(\"GetFolderPath(SpecialFolder\", \"\");\n    table.AddRow(\"  .System)\", GetFolderPath(SpecialFolder.System));\n    table.AddRow(\"  .ApplicationData)\",\n      GetFolderPath(SpecialFolder.ApplicationData));\n    table.AddRow(\"  .MyDocuments)\",\n      GetFolderPath(SpecialFolder.MyDocuments));\n    table.AddRow(\"  .Personal)\",\n      GetFolderPath(SpecialFolder.Personal));\n    // Render the table to the console\n    AnsiConsole.Write(table);\n    #endregion \n    ```", "```cs\n    SectionTitle(\"Managing drives\");\n    Table drives = new();\n    drives.AddColumn(\"[blue]NAME[/]\");\n    drives.AddColumn(\"[blue]TYPE[/]\");\n    drives.AddColumn(\"[blue]FORMAT[/]\");\n    drives.AddColumn(new TableColumn(\n      \"[blue]SIZE (BYTES)[/]\").RightAligned());\n    drives.AddColumn(new TableColumn(\n      \"[blue]FREE SPACE[/]\").RightAligned());\n    foreach (DriveInfo drive in DriveInfo.GetDrives())\n    {\n      if (drive.IsReady)\n      {\n        drives.AddRow(drive.Name, drive.DriveType.ToString(),\n          drive.DriveFormat, drive.TotalSize.ToString(\"N0\"),\n          drive.AvailableFreeSpace.ToString(\"N0\"));\n      }\n      else\n      {\n        drives.AddRow(drive.Name, drive.DriveType.ToString(),\n          string.Empty, string.Empty, string.Empty);\n      }\n    }\n    AnsiConsole.Write(drives); \n    ```", "```cs\n        SectionTitle(\"Managing directories\");\n        string newFolder = Combine(\n          GetFolderPath(SpecialFolder.Personal), \"NewFolder\");\n        WriteLine($\"Working with: {newFolder}\");\n        // We must explicitly say which Exists method to use\n        // because we statically imported both Path and Directory.\n        WriteLine($\"Does it exist? {Path.Exists(newFolder)}\");\n        WriteLine(\"Creating it...\");\n        CreateDirectory(newFolder);\n        // Let's use the Directory.Exists method this time.\n        WriteLine($\"Does it exist? {Directory.Exists(newFolder)}\");\n        Write(\"Confirm the directory exists, and then press any key.\");\n        ReadKey(intercept: true);\n        WriteLine(\"Deleting it...\");\n        Delete(newFolder, recursive: true);\n        WriteLine($\"Does it exist? {Path.Exists(newFolder)}\"); \n        ```", "```cs\n    Working with: C:\\Users\\markj\\OneDrive\\Documents\\NewFolder\n    Does it exist? False\n    Creating it...\n    Does it exist? True\n    Confirm the directory exists, and then press any key.\n    Deleting it...\n    Does it exist? False \n    ```", "```cs\n        SectionTitle(\"Managing files\");\n        // Define a directory path to output files starting\n        // in the user's folder.\n        string dir = Combine(\n          GetFolderPath(SpecialFolder.Personal), \"OutputFiles\");\n        CreateDirectory(dir);\n        // Define file paths.\n        string textFile = Combine(dir, \"Dummy.txt\");\n        string backupFile = Combine(dir, \"Dummy.bak\");\n        WriteLine($\"Working with: {textFile}\");\n        WriteLine($\"Does it exist? {File.Exists(textFile)}\");\n        // Create a new text file and write a line to it.\n        StreamWriter textWriter = File.CreateText(textFile);\n        textWriter.WriteLine(\"Hello, C#!\");\n        textWriter.Close(); // Close file and release resources.\n        WriteLine($\"Does it exist? {File.Exists(textFile)}\");\n        // Copy the file, and overwrite if it already exists.\n        File.Copy(sourceFileName: textFile,\n          destFileName: backupFile, overwrite: true);\n        WriteLine(\n          $\"Does {backupFile} exist? {File.Exists(backupFile)}\");\n        Write(\"Confirm the files exist, and then press any key.\");\n        ReadKey(intercept: true);\n        // Delete the file.\n        File.Delete(textFile);\n        WriteLine($\"Does it exist? {File.Exists(textFile)}\");\n        // Read from the text file backup.\n        WriteLine($\"Reading contents of {backupFile}:\");\n        StreamReader textReader = File.OpenText(backupFile);\n        WriteLine(textReader.ReadToEnd());\n        textReader.Close(); \n        ```", "```cs\n    Working with: C:\\Users\\markj\\OneDrive\\Documents\\OutputFiles\\Dummy.txt\n    Does it exist? False\n    Does it exist? True\n    Does C:\\Users\\markj\\OneDrive\\Documents\\OutputFiles\\Dummy.bak exist? True\n    Confirm the files exist, and then press any key.\n    Does it exist? False\n    Reading contents of C:\\Users\\markj\\OneDrive\\Documents\\OutputFiles\\Dummy.bak:\n    Hello, C#! \n    ```", "```cs\n    SectionTitle(\"Managing paths\");\n    WriteLine($\"Folder Name: {GetDirectoryName(textFile)}\");\n    WriteLine($\"File Name: {GetFileName(textFile)}\");\n    WriteLine(\"File Name without Extension: {0}\",\n      GetFileNameWithoutExtension(textFile));\n    WriteLine($\"File Extension: {GetExtension(textFile)}\");\n    WriteLine($\"Random File Name: {GetRandomFileName()}\");\n    WriteLine($\"Temporary File Name: {GetTempFileName()}\"); \n    ```", "```cs\n    Folder Name: C:\\Users\\markj\\OneDrive\\Documents\\OutputFiles\n    File Name: Dummy.txt\n    File Name without Extension: Dummy\n    File Extension: .txt\n    Random File Name: u45w1zki.co3\n    Temporary File Name:\n    C:\\Users\\markj\\AppData\\Local\\Temp\\tmphdmipz.tmp \n    ```", "```cs\n    SectionTitle(\"Getting file information\");\n    FileInfo info = new(backupFile);\n    WriteLine($\"{backupFile}:\");\n    WriteLine($\"  Contains {info.Length} bytes.\");\n    WriteLine($\"  Last accessed: {info.LastAccessTime}\");\n    WriteLine($\"  Has readonly set to {info.IsReadOnly}.\"); \n    ```", "```cs\n    C:\\Users\\markj\\OneDrive\\Documents\\OutputFiles\\Dummy.bak:\n      Contains 12 bytes.\n      Last accessed: 13/07/2023 12:11:12\n      Has readonly set to False. \n    ```", "```cs\nFileStream file = File.Open(pathToFile,\n  FileMode.Open, FileAccess.Read, FileShare.Read); \n```", "```cs\nFileInfo info = new(backupFile);\nWriteLine(\"Is the backup file compressed? {0}\",\n  info.Attributes.HasFlag(FileAttributes.Compressed)); \n```", "```cs\n    // null namespace to merge with auto-generated Program.\n    partial class Program\n    {\n      private static void SectionTitle(string title)\n      {\n        ConsoleColor previousColor = ForegroundColor;\n        ForegroundColor = ConsoleColor.DarkYellow;\n        WriteLine($\"*** {title} ***\");\n        ForegroundColor = previousColor;\n      }\n      private static void OutputFileInfo(string path)\n      {\n        WriteLine(\"**** File Info ****\");\n        WriteLine($\"File: {GetFileName(path)}\");\n        WriteLine($\"Path: {GetDirectoryName(path)}\");\n        WriteLine($\"Size: {new FileInfo(path).Length:N0} bytes.\");\n        WriteLine(\"/------------------\");\n        WriteLine(File.ReadAllText(path));\n        WriteLine(\"------------------/\");\n      }\n    } \n    ```", "```cs\n    namespace Packt.Shared;\n    public static class Viper\n    {\n      // Define an array of Viper pilot call signs.\n      public static string[] Callsigns = new[]\n      {\n        \"Husker\", \"Starbuck\", \"Apollo\", \"Boomer\",\n        \"Bulldog\", \"Athena\", \"Helo\", \"Racetrack\"\n      };\n    } \n    ```", "```cs\n    using Packt.Shared; // To use Viper. \n    ```", "```cs\n    SectionTitle(\"Writing to text streams\");\n    // Define a file to write to.\n    string textFile = Combine(CurrentDirectory, \"streams.txt\");\n    // Create a text file and return a helper writer.\n    StreamWriter text = File.CreateText(textFile);\n    // Enumerate the strings, writing each one to the stream\n    // on a separate line.\n    foreach (string item in Viper.Callsigns)\n    {\n      text.WriteLine(item);\n    }\n    text.Close(); // Release unmanaged file resources.\n    OutputFileInfo(textFile); \n    ```", "```cs\n    **** File Info ****\n    File: streams.txt\n    Path: C:\\cs13net9\\Chapter09\\WorkingWithStreams\\bin\\Debug\\net9.0\n    Size: 68 bytes.\n    /------------------\n    Husker\n    Starbuck\n    Apollo\n    Boomer\n    Bulldog\n    Athena\n    Helo\n    Racetrack\n    ------------------/ \n    ```", "```cs\n    using System.Xml; // To use XmlWriter and so on. \n    ```", "```cs\n    SectionTitle(\"Writing to XML streams\");\n    // Define a file path to write to.\n    string xmlFile = Combine(CurrentDirectory, \"streams.xml\");\n    // Declare variables for the filestream and XML writer.\n    FileStream? xmlFileStream = null;\n    XmlWriter? xml = null;\n    try\n    {\n      xmlFileStream = File.Create(xmlFile);\n      // Wrap the file stream in an XML writer helper and tell it\n      // to automatically indent nested elements.\n      xml = XmlWriter.Create(xmlFileStream,\n        new XmlWriterSettings { Indent = true });\n      // Write the XML declaration.\n      xml.WriteStartDocument();\n      // Write a root element.\n      xml.WriteStartElement(\"callsigns\");\n      // Enumerate the strings, writing each one to the stream.\n      foreach (string item in Viper.Callsigns)\n      {\n        xml.WriteElementString(\"callsign\", item);\n      }\n      // Write the close root element.\n      xml.WriteEndElement();\n    }\n    catch (Exception ex)\n    {\n      // If the path doesn't exist the exception will be caught.\n      WriteLine($\"{ex.GetType()} says {ex.Message}\");\n    }\n    finally\n    {\n      if (xml is not null)\n      {\n        xml.Close();\n        WriteLine(\"The XML writer's unmanaged resources have been disposed.\");\n      }\n      if (xmlFileStream is not null)\n      {\n        xmlFileStream.Close();\n        WriteLine(\"The file stream's unmanaged resources have been disposed.\");\n      }\n    }\n    OutputFileInfo(xmlFile); \n    ```", "```cs\n    public void Dispose() => Close();\n    public virtual void Close()\n    {\n      // When initially designed, Stream required that all cleanup logic\n      // went into Close(), but this was thought up before IDisposable\n      // was added and never revisited. All subclasses\n      // should put their cleanup now in Dispose(bool).\n      Dispose(true);\n      GC.SuppressFinalize(this);\n    }\n    protected virtual void Dispose(bool disposing)\n    {\n      // Note: Never change this to call other virtual methods on Stream\n      // like Write, since the state on subclasses has already been\n      // torn down.  This is the last code to run on cleanup for a stream.\n    } \n    ```", "```cs\n    **** File Info ****\n    The XML writer's unmanaged resources have been disposed.\n    The file stream's unmanaged resources have been disposed.\n    File: streams.xml\n    Path: C:\\cs13net9\\Chapter09\\WorkingWithStreams\\bin\\Debug\\net9.0\n    Size: 320 bytes.\n    /------------------\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <callsigns>\n      <callsign>Husker</callsign>\n      <callsign>Starbuck</callsign>\n      <callsign>Apollo</callsign>\n      <callsign>Boomer</callsign>\n      <callsign>Bulldog</callsign>\n      <callsign>Athena</callsign>\n      <callsign>Helo</callsign>\n      <callsign>Racetrack</callsign>\n    </callsigns>\n    -------------------/ \n    ```", "```cs\nusing (FileStream file2 = File.OpenWrite(\n  Path.Combine(path, \"file2.txt\")))\n{\n  using (StreamWriter writer2 = new StreamWriter(file2))\n  {\n    try\n    {\n      writer2.WriteLine(\"Welcome, .NET!\");\n    }\n    catch(Exception ex)\n    {\n      WriteLine($\"{ex.GetType()} says {ex.Message}\");\n    }\n  } // Automatically calls Dispose if the object is not null.\n} // Automatically calls Dispose if the object is not null. \n```", "```cs\nusing FileStream file2 = File.OpenWrite(\n  Path.Combine(path, \"file2.txt\"));\nusing StreamWriter writer2 = new(file2);\ntry\n{\n  writer2.WriteLine(\"Welcome, .NET!\");\n}\ncatch(Exception ex)\n{\n  WriteLine($\"{ex.GetType()} says {ex.Message}\");\n} \n```", "```cs\nusing (ObjectWithUnmanagedResources thing = new())\n{\n  // Statements that use thing.\n} \n```", "```cs\nusing ObjectWithUnmanagedResources thing = new();\n// Statements that use thing.\n// Dispose called at the end of the container scope e.g. method. \n```", "```cs\n    using Packt.Shared; // To use Viper.\n    using System.IO.Compression; // To use BrotliStream, GZipStream.\n    using System.Xml; // To use XmlWriter, XmlReader.\n    partial class Program\n    {\n      private static void Compress(string algorithm = \"gzip\")\n      {\n        // Define a file path using the algorithm as file extension.\n        string filePath = Combine(\n          CurrentDirectory, $\"streams.{algorithm}\");\n        FileStream file = File.Create(filePath);\n        Stream compressor;\n        if (algorithm == \"gzip\")\n        {\n          compressor = new GZipStream(file, CompressionMode.Compress);\n        }\n        else\n        {\n          compressor = new BrotliStream(file, CompressionMode.Compress);\n        }\n        using (compressor)\n        {\n          using (XmlWriter xml = XmlWriter.Create(compressor))\n          {\n            xml.WriteStartDocument();\n            xml.WriteStartElement(\"callsigns\");\n            foreach (string item in Viper.Callsigns)\n            {\n              xml.WriteElementString(\"callsign\", item);\n            }\n          }\n        } // Also closes the underlying stream.\n        OutputFileInfo(filePath);\n        // Read the compressed file.\n        WriteLine(\"Reading the compressed XML file:\");\n        file = File.Open(filePath, FileMode.Open);\n        Stream decompressor;\n        if (algorithm == \"gzip\")\n        {\n          decompressor = new GZipStream(\n            file, CompressionMode.Decompress);\n        }\n        else\n        {\n          decompressor = new BrotliStream(\n            file, CompressionMode.Decompress);\n        }\n        using (decompressor)\n\n        using (XmlReader reader = XmlReader.Create(decompressor))\n\n        while (reader.Read())\n        {\n          // Check if we are on an element node named callsign.\n          if ((reader.NodeType == XmlNodeType.Element)\n            && (reader.Name == \"callsign\"))\n          {\n            reader.Read(); // Move to the text inside element.\n            WriteLine($\"{reader.Value}\"); // Read its value.\n          }\n          // Alternative syntax with property pattern matching:\n          // if (reader is { NodeType: XmlNodeType.Element,\n          //   Name: \"callsign\" })\n        }\n      }\n    } \n    ```", "```cs\nif (c = 1)\n{\n// Execute a single statement.\n}\nif (c = 1)\n// Execute a single statement.\nusing (someObject)\n{\n// Execute a single statement.\n}\nusing (someObject)\n// Execute a single statement \n```", "```cs\n    SectionTitle(\"Compressing streams\");\n    Compress(algorithm: \"gzip\");\n    Compress(algorithm: \"brotli\"); \n    ```", "```cs\n    **** File Info ****\n    File: streams.gzip\n    Path: C:\\cs13net9\\Chapter09\\WorkingWithStreams\\bin\\Debug\\net9.0\n    Size: 151 bytes.\n    /------------------\n    ­?\n    z?{??}En?BYjQqf~???????Bj^r~Jf^??RiI??????MrbNNqfz^1?i?QZ??Zd?@H?$%?&gc?t,\n    ?????*????H?????t?&?d??%b??H?aUPbrjIQ\"??b;????9\n    ------------------/\n    Reading the compressed XML file:\n    Husker\n    Starbuck\n    Apollo\n    Boomer\n    Bulldog\n    Athena\n    Helo\n    Racetrack\n    **** File Info ****\n    File: streams.brotli\n    Path: C:\\cs13net9\\Chapter09\\WorkingWithStreams\\bin\\Debug\\net9.0\n    Size: 117 bytes.\n    /-------------------\n     ??d?&?_????\\@?Gm????/?h>?6????? ??^?__???wE?'?t<J??]??\n    ???b?\\fA?>?+??F??]\n    ?T?\\?~??A?J?Q?q6 ?-??\n    ???\n    --------------------/\n    Reading the compressed XML file:\n    Husker\n    Starbuck\n    Apollo\n    Boomer\n    Bulldog\n    Athena\n    Helo\n    Racetrack \n    ```", "```cs\n    using Microsoft.Win32.SafeHandles; // To use SafeFileHandle.\n    using System.Text; // To use Encoding.\n    using SafeFileHandle handle =\n      File.OpenHandle(path: \"coffee.txt\",\n        mode: FileMode.OpenOrCreate,\n        access: FileAccess.ReadWrite); \n    ```", "```cs\n    string message = \"Café £4.39\";\n    ReadOnlyMemory<byte> buffer = new(Encoding.UTF8.GetBytes(message));\n    await RandomAccess.WriteAsync(handle, buffer, fileOffset: 0); \n    ```", "```cs\n    long length = RandomAccess.GetLength(handle);\n    Memory<byte> contentBytes = new(new byte[length]);\n    await RandomAccess.ReadAsync(handle, contentBytes, fileOffset: 0);\n    string content = Encoding.UTF8.GetString(contentBytes.ToArray());\n    WriteLine($\"Content of file: {content}\"); \n    ```", "```cs\n    Content of file: Café £4.39 \n    ```", "```cs\n    using System.Text; // To use Encoding.\n    WriteLine(\"Encodings\");\n    WriteLine(\"[1] ASCII\");\n    WriteLine(\"[2] UTF-7\");\n    WriteLine(\"[3] UTF-8\");\n    WriteLine(\"[4] UTF-16 (Unicode)\");\n    WriteLine(\"[5] UTF-32\");\n    WriteLine(\"[6] Latin1\");\n    WriteLine(\"[any other key] Default encoding\");\n    WriteLine();\n    Write(\"Press a number to choose an encoding.\");\n    ConsoleKey number = ReadKey(intercept: true).Key;\n    WriteLine(); WriteLine();\n    Encoding encoder = number switch\n    {\n      ConsoleKey.D1 or ConsoleKey.NumPad1 => Encoding.ASCII,\n      ConsoleKey.D2 or ConsoleKey.NumPad2 => Encoding.UTF7,\n      ConsoleKey.D3 or ConsoleKey.NumPad3 => Encoding.UTF8,\n      ConsoleKey.D4 or ConsoleKey.NumPad4 => Encoding.Unicode,\n      ConsoleKey.D5 or ConsoleKey.NumPad5 => Encoding.UTF32,\n      ConsoleKey.D6 or ConsoleKey.NumPad6 => Encoding.Latin1,\n      _  => Encoding.Default\n    };\n    // Define a string to encode\n    string message = \"Café £4.39\";\n    WriteLine($\"Text to encode: {message}  Characters: {message.Length}.\");\n    // Encode the string into a byte array.\n    byte[] encoded = encoder.GetBytes(message);\n    // Check how many bytes the encoding needed.\n    WriteLine(\"{0} used {1:N0} bytes.\",\n      encoder.GetType().Name, encoded.Length);\n    WriteLine();\n    // Enumerate each byte.\n    WriteLine(\"BYTE | HEX | CHAR\");\n    foreach (byte b in encoded)\n    {\n      WriteLine($\"{b,4} | {b,3:X} | {(char)b,4}\");\n    }\n    // Decode the byte array back into a string and display it.\n    string decoded = encoder.GetString(encoded);\n    WriteLine($\"Decoded: {decoded}\"); \n    ```", "```cs\n    Text to encode: Café £4.39  Characters: 10\n    ASCIIEncodingSealed used 10 bytes.\n    BYTE | HEX | CHAR\n      67 |  43 |    C\n      97 |  61 |    a\n     102 |  66 |    f\n      63 |  3F |    ?\n      32 |  20 |\n      63 |  3F |    ?\n      52 |  34 |    4\n      46 |  2E |    .\n      51 |  33 |    3\n      57 |  39 |    9\n    Decoded: Caf? ?4.39 \n    ```", "```cs\n    Text to encode: Café £4.39  Characters: 10\n    UTF8EncodingSealed used 12 bytes.\n    BYTE | HEX | CHAR\n      67 |  43 |    C\n      97 |  61 |    a\n     102 |  66 |    f\n     195 |  C3 |    Ã\n     169 |  A9 |    ©\n      32 |  20 |\n     194 |  C2 |    Â\n     163 |  A3 |    £\n      52 |  34 |    4\n      46 |  2E |    .\n      51 |  33 |    3\n      57 |  39 |    9\n    Decoded: Café £4.39 \n    ```", "```cs\nStreamReader reader = new(stream, Encoding.UTF8);\nStreamWriter writer = new(stream, Encoding.UTF8); \n```", "```cs\n    // null namespace to merge with auto-generated Program.\n    partial class Program\n    {\n      private static void SectionTitle(string title)\n      {\n        ConsoleColor previousColor = ForegroundColor;\n        ForegroundColor = ConsoleColor.DarkYellow;\n        WriteLine($\"*** {title} ***\");\n        ForegroundColor = previousColor;\n      }\n      private static void OutputFileInfo(string path)\n      {\n        WriteLine(\"**** File Info ****\");\n        WriteLine($\"File: {GetFileName(path)}\");\n        WriteLine($\"Path: {GetDirectoryName(path)}\");\n        WriteLine($\"Size: {new FileInfo(path).Length:N0} bytes.\");\n        WriteLine(\"/------------------\");\n        WriteLine(File.ReadAllText(path));\n        WriteLine(\"------------------/\");\n      }\n    } \n    ```", "```cs\n    namespace Packt.Shared;\n    public class Person\n    {\n      public Person(decimal initialSalary)\n      {\n        Salary = initialSalary;\n      }\n      public string? FirstName { get; set; }\n      public string? LastName { get; set; }\n      public DateTime DateOfBirth { get; set; }\n      public HashSet<Person>? Children { get; set; }\n      protected decimal Salary { get; set; }\n    } \n    ```", "```cs\n    using System.Xml.Serialization; // To use XmlSerializer.\n    using Packt.Shared; // To use Person. \n    ```", "```cs\n    List<Person> people = new()\n    {\n      new(initialSalary: 30_000M)\n      {\n        FirstName = \"Alice\",\n        LastName = \"Smith\",\n        DateOfBirth = new(year: 1974, month: 3, day: 14)\n      },\n      new(initialSalary: 40_000M)\n      {\n        FirstName = \"Bob\",\n        LastName = \"Jones\",\n        DateOfBirth = new(year: 1969, month: 11, day: 23)\n      },\n      new(initialSalary: 20_000M)\n      {\n        FirstName = \"Charlie\",\n        LastName = \"Cox\",\n        DateOfBirth = new(year: 1984, month: 5, day: 4),\n        Children = new()\n        {\n          new(initialSalary: 0M)\n          {\n            FirstName = \"Sally\",\n            LastName = \"Cox\",\n            DateOfBirth = new(year: 2012, month: 7, day: 12)\n          }\n        }\n      }\n    };\n    SectionTitle(\"Serializing as XML\");\n    // Create serializer to format a \"List of Person\" as XML.\n    XmlSerializer xs = new(type: people.GetType());\n    // Create a file to write to.\n    string path = Combine(CurrentDirectory, \"people.xml\");\n    using (FileStream stream = File.Create(path))\n    {\n      // Serialize the object graph to the stream.\n      xs.Serialize(stream, people);\n    } // Closes the stream.\n    OutputFileInfo(path); \n    ```", "```cs\n    Unhandled Exception: System.InvalidOperationException: Packt.Shared.Person cannot be serialized because it does not have a parameterless constructor. \n    ```", "```cs\n    // A parameterless constructor is required for XML serialization.\n    public Person() { } \n    ```", "```cs\n    **** File Info ****\n    File: people.xml\n    Path: C:\\cs13net9\\Chapter09\\WorkingWithSerialization\\bin\\Debug\\net9.0\n    Size: 793 bytes.\n    /------------------\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <ArrayOfPerson  >\n      <Person>\n        <FirstName>Alice</FirstName>\n        <LastName>Smith</LastName>\n        <DateOfBirth>1974-03-14T00:00:00</DateOfBirth>\n      </Person>\n      <Person>\n        <FirstName>Bob</FirstName>\n        <LastName>Jones</LastName>\n        <DateOfBirth>1969-11-23T00:00:00</DateOfBirth>\n      </Person>\n      <Person>\n        <FirstName>Charlie</FirstName>\n        <LastName>Cox</LastName>\n        <DateOfBirth>1984-05-04T00:00:00</DateOfBirth>\n        <Children>\n          <Person>\n            <FirstName>Sally</FirstName>\n            <LastName>Cox</LastName>\n            <DateOfBirth>2012-07-12T00:00:00</DateOfBirth>\n          </Person>\n        </Children>\n      </Person>\n    </ArrayOfPerson>\n    ------------------/ \n    ```", "```cs\n    using System.Xml.Serialization; // To use [XmlAttribute]. \n    ```", "```cs\n    **[****XmlAttribute(****\"fname\"****)****]**\n    public string? FirstName { get; set; }\n    **[****XmlAttribute(****\"lname\"****)****]**\n    public string? LastName { get; set; }\n    **[****XmlAttribute(****\"dob\"****)****]**\n    public DateTime DateOfBirth { get; set; } \n    ```", "```cs\n    **** File Info ****\n    File: people.xml\n    Path: C:\\cs13net9\\Chapter09\\WorkingWithSerialization\\bin\\Debug\\net9.0\n    Size: 488 bytes.\n    /------------------\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <ArrayOfPerson  >\n      <Person fname=\"Alice\" lname=\"Smith\" dob=\"1974-03-14T00:00:00\" />\n      <Person fname=\"Bob\" lname=\"Jones\" dob=\"1969-11-23T00:00:00\" />\n      <Person fname=\"Charlie\" lname=\"Cox\" dob=\"1984-05-04T00:00:00\">\n        <Children>\n          <Person fname=\"Sally\" lname=\"Cox\" dob=\"2012-07-12T00:00:00\" />\n        </Children>\n      </Person>\n    </ArrayOfPerson>\n    ------------------/ \n    ```", "```cs\n    SectionTitle(\"Deserializing XML files\");\n    using (FileStream xmlLoad = File.Open(path, FileMode.Open))\n    {\n      // Deserialize and cast the object graph into a \"List of Person\".\n      List<Person>? loadedPeople =\n        xs.Deserialize(xmlLoad) as List<Person>;\n      if (loadedPeople is not null)\n      {\n        foreach (Person p in loadedPeople)\n        {\n          WriteLine(\"{0} has {1} children.\",\n            p.LastName, p.Children?.Count ?? 0);\n        }\n      }\n    } \n    ```", "```cs\n    Smith has 0 children.\n    Jones has 0 children.\n    Cox has 1 children. \n    ```", "```cs\n    <ItemGroup>\n      <PackageReference Include=\"Newtonsoft.Json\" Version=\"13.0.3\" />\n    </ItemGroup> \n    ```", "```cs\n    SectionTitle(\"Serializing with JSON\");\n    // Create a file to write to.\n    string jsonPath = Combine(CurrentDirectory, \"people.json\");\n    using (StreamWriter jsonStream = File.CreateText(jsonPath))\n    {\n      Newtonsoft.Json.JsonSerializer jss = new();\n      // Serialize the object graph into a string.\n      jss.Serialize(jsonStream, people);\n    } // Closes the file stream and release resources.\n    OutputFileInfo(jsonPath); \n    ```", "```cs\n    **** File Info ****\n    File: people.json\n    Path: C:\\cs13net9\\Chapter09\\WorkingWithSerialization\\bin\\Debug\\net9.0\n    Size: 366 bytes.\n    /------------------\n    [{\"FirstName\":\"Alice\",\"LastName\":\"Smith\",\"DateOfBirth\":\"1974-03-14T00:00:00\",\"Children\":null},{\"FirstName\":\"Bob\",\"LastName\":\"Jones\",\"DateOfBirth\":\"1969-11-23T00:00:00\",\"Children\":null},{\"FirstName\":\"Charlie\",\"LastName\":\"Cox\",\"DateOfBirth\":\"1984-05-04T00:00:00\",\"Children\":[{\"FirstName\":\"Sally\",\"LastName\":\"Cox\",\"DateOfBirth\":\"2012-07-12T00:00:00\",\"Children\":null}]}]\n    ------------------/ \n    ```", "```cs\n    using FastJson = System.Text.Json.JsonSerializer; \n    ```", "```cs\n    SectionTitle(\"Deserializing JSON files\");\n    await using (FileStream jsonLoad = File.Open(jsonPath, FileMode.Open))\n    {\n      // Deserialize object graph into a \"List of Person\".\n      List<Person>? loadedPeople =\n        await FastJson.DeserializeAsync(utf8Json: jsonLoad,\n          returnType: typeof(List<Person>)) as List<Person>;\n      if (loadedPeople is not null)\n      {\n        foreach (Person p in loadedPeople)\n        {\n          WriteLine(\"{0} has {1} children.\",\n            p.LastName, p.Children?.Count ?? 0);\n        }\n      }\n    } \n    ```", "```cs\n    Smith has 0 children.\n    Jones has 0 children.\n    Cox has 1 children. \n    ```", "```cs\n    using System.Text.Json; // To use JsonSerializerOptions.\n    using System.Text.Json.Schema; // To use JsonSchemaExporter. \n    ```", "```cs\n    SectionTitle(\"JSON schema exporter\");\n    WriteLine(JsonSchemaExporter.GetJsonSchemaAsNode(\n      JsonSerializerOptions.Default, typeof(Person))); \n    ```", "```cs\n    {\n      \"type\": [\n        \"object\",\n        \"null\"\n      ],\n      \"properties\": {\n        \"FirstName\": {\n          \"type\": [\n            \"string\",\n            \"null\"\n          ]\n        },\n        \"LastName\": {\n          \"type\": [\n            \"string\",\n            \"null\"\n          ]\n        },\n        \"DateOfBirth\": {\n          \"type\": \"string\",\n          \"format\": \"date-time\"\n        },\n        \"Children\": {\n          \"type\": [\n            \"array\",\n            \"null\"\n          ],\n          \"items\": {\n            \"$ref\": \"#\"\n          }\n        }\n      }\n    } \n    ```", "```cs\n    using System.Text.Json.Serialization; // To use [JsonInclude].\n    namespace Packt.Shared;\n    public class Book\n    {\n      // Constructor to set non-nullable property.\n      public Book(string title)\n      {\n        Title = title;\n      }\n      // Properties.\n      public string Title { get; set; }\n      public string? Author { get; set; }\n      // Fields.\n      [JsonInclude] // Include this field.\n      public DateTime PublishDate;\n      [JsonInclude] // Include this field.\n      public DateTimeOffset Created;\n      public ushort Pages;\n    } \n    ```", "```cs\n    using Packt.Shared; // To use Book.\n    using System.Text.Json; // To use JsonSerializer. \n    ```", "```cs\n    Book csharpBook = new(title:\n      \"C# 13 and .NET 9 - Modern Cross-Platform Development Fundamentals\")\n    {\n      Author = \"Mark J Price\",\n      PublishDate = new(year: 2024, month: 11, day: 12),\n      Pages = 823,\n      Created = DateTimeOffset.UtcNow,\n    };\n    JsonSerializerOptions options = new()\n    {\n      IncludeFields = true, // Includes all fields.\n      PropertyNameCaseInsensitive = true,\n      WriteIndented = true,\n      PropertyNamingPolicy = JsonNamingPolicy.CamelCase,\n    };\n    string path = Combine(CurrentDirectory, \"book.json\");\n    using (Stream fileStream = File.Create(path))\n    {\n      JsonSerializer.Serialize(\n        utf8Json: fileStream, value: csharpBook, options);\n    }\n    WriteLine(\"**** File Info ****\");\n    WriteLine($\"File: {GetFileName(path)}\");\n    WriteLine($\"Path: {GetDirectoryName(path)}\");\n    WriteLine($\"Size: {new FileInfo(path).Length:N0} bytes.\");\n    WriteLine(\"/------------------\");\n    WriteLine(File.ReadAllText(path));\n    WriteLine(\"------------------/\"); \n    ```", "```cs\n    **** File Info ****\n    File: book.json\n    Path: C:\\cs13net9\\Chapter09\\ControllingJson\\bin\\Debug\\net9.0\n    Size: 221 bytes.\n    /------------------\n    {\n      \"title\": \"C# 13 and .NET 9 - Modern Cross-Platform Development Fundamentals\",\n      \"author\": \"Mark J Price\",\n      \"publishDate\": \"2024-11-12T00:00:00\",\n      \"created\": \"2024-07-13T14:29:07.119631+00:00\",\n      \"pages\": 823\n    }\n    ------------------/ \n    ```", "```cs\n    **** File Info ****\n    File: book.json\n    Path: C:\\cs13net9\\Chapter09\\ControllingJson\\bin\\Debug\\net9.0\n    Size: 184 bytes.\n    /------------------\n    {\"Title\":\"C# 13 and .NET 9 - Modern Cross-Platform Development Fundamentals\",\"Author\":\"Mark J Price\",\"PublishDate\":\"2024-11-12T00:00:00\",\"Created\":\"2024-07-13T14:30:29.2205861+00:00\"}\n    ------------------/ \n    ```", "```cs\n// Create a list of Shapes to serialize.\nList<Shape> listOfShapes = new()\n{\n  new Circle { Colour = \"Red\", Radius = 2.5 },\n  new Rectangle { Colour = \"Blue\", Height = 20.0, Width = 10.0 },\n  new Circle { Colour = \"Green\", Radius = 8.0 },\n  new Circle { Colour = \"Purple\", Radius = 12.3 },\n  new Rectangle { Colour = \"Blue\", Height = 45.0, Width = 18.0 }\n}; \n```", "```cs\nList<Shape> loadedShapesXml =\n  serializerXml.Deserialize(fileXml) as List<Shape>;\nforeach (Shape item in loadedShapesXml)\n{\n  WriteLine(\"{0} is {1} and has an area of {2:N2}\",\n    item.GetType().Name, item.Colour, item.Area);\n} \n```", "```cs\nLoading shapes from XML:\nCircle is Red and has an area of 19.63\nRectangle is Blue and has an area of 200.00\nCircle is Green and has an area of 201.06\nCircle is Purple and has an area of 475.29\nRectangle is Blue and has an area of 810.00 \n```"]