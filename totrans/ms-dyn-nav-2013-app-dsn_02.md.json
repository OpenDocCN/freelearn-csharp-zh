["```cs\nTESTFIELD(\"Company No.\");\n```", "```cs\nRMSetup.GET;\nRMSetup.TESTFIELD(\"Bus. Rel. Code for Vendors\");\n```", "```cs\nCLEAR(Vend);\nVend.SetInsertFromContact(TRUE);\nVend.INSERT(TRUE);\nVend.SetInsertFromContact(FALSE);\n```", "```cs\nIF Type = Type::Company THEN\n  ContComp := Rec \nELSE\n  ContComp.GET(\"Company No.\");\n```", "```cs\nContBusRel.\"Contact No.\" := ContComp.\"No.\";\nContBusRel.\"Business Relation Code\" := RMSetup.\"Bus. Rel. Code for Vendors\";\nContBusRel.\"Link to Table\" := ContBusRel.\"Link to Table\"::Vendor;\nContBusRel.\"No.\" := Vend.\"No.\";\nContBusRel.INSERT(TRUE);\n```", "```cs\nUpdateCustVendBank.UpdateVendor(ContComp,ContBusRel);\n```", "```cs\nMESSAGE(Text009,Vend.TABLECAPTION,Vend.\"No.\");\n```", "```cs\nUpdateVendor()\nWITH Vend DO BEGIN\n  GET(ContBusRel.\"No.\");\n  xRecRef.GETTABLE(Vend);\n  NoSerie := \"No. Series\";\n  PurchaserCode :=  Vend.\"Purchaser Code\";\n  TRANSFERFIELDS(Cont);\n  \"No.\" := ContBusRel.\"No.\";\n  \"No. Series\" := NoSerie;\n  Vend.\"Purchaser Code\" := PurchaserCode;\n  MODIFY;\n  RecRef.GETTABLE(Vend);\n  ChangeLogMgt.LogModification(RecRef,xRecRef);\nEND;\n```", "```cs\n    OnInsert()\n    IF \"No.\" = '' THEN BEGIN\n      SquashSetup.GET;\n      SquashSetup.TESTFIELD(\"Squash Player Nos.\");\n      NoSeriesMgt.InitSeries(SquashSetup.\"Squash Player Nos.\",\n        xRec.\"No. Series\",0D,\"No.\",\"No. Series\");\n    END;\n    ```", "```cs\n    No. - OnValidate()\n    IF \"No.\" <> xRec.\"No.\" THEN BEGIN\n      SquashSetup.GET;\n      NoSeriesMgt.TestManual(SquashSetup.\"Squash Player Nos.\");\n      \"No. Series\" := '';\n    END;\n    ```", "```cs\n    AssistEdit() : Boolean\n    SquashSetup.GET;\n    SquashSetup.TESTFIELD(\"Squash Player Nos.\");\n    IF NoSeriesMgt.SelectSeries(SquashSetup.\"Squash Player Nos.\",\n      xRec.\"No. Series\",\"No. Series\") \n    THEN BEGIN\n      NoSeriesMgt.SetSeries(\"No.\");\n      EXIT(TRUE);\n    END;\n    ```", "```cs\nUpdateSquashPlayer()\nWITH SquashPlayer DO BEGIN\n  GET(ContBusRel.\"No.\");\n  xRecRef.GETTABLE(SquashPlayer);\n  NoSerie := \"No. Series\";\n  TRANSFERFIELDS(Cont);\n  \"No.\" := ContBusRel.\"No.\";\n  \"No. Series\" := NoSerie;\n  MODIFY;\n  RecRef.GETTABLE(SquashPlayer);\n  ChangeLogMgt.LogModification(RecRef,xRecRef);\nEND;\n```", "```cs\nCreateSquashPlayer()\nTESTFIELD(Type, Type::Person);\n\nRMSetup.GET;\nRMSetup.TESTFIELD(\"Bus. Rel. Code for Squash Pl.\");\n\nCLEAR(SquashPlayer);\nSquashPlayer.INSERT(TRUE);\n\nContBusRel.\"Contact No.\" := Cont.\"No.\";\nContBusRel.\"Business Relation Code\" := \n  RMSetup.\"Bus. Rel. Code for Squash Pl.\";\nContBusRel.\"Link to Table\" := \n  ContBusRel.\"Link to Table\"::\"Squash Player\";\nContBusRel.\"No.\" := SquashPlayer.\"No.\";\nContBusRel.INSERT(TRUE);\n\nUpdateCustVendBank.UpdateSquashPlayer(Cont,ContBusRel);\n\nMESSAGE(Text009,SquashPlayer.TABLECAPTION,SquashPlayer.\"No.\");\n```", "```cs\nFrom Time - OnValidate()\nCalcQty;\n\nTo Time - OnValidate()\nCalcQty;\n\nCalcQty()\nIF (\"From Time\" <> 0T) AND (\"To Time\" <> 0T) THEN BEGIN\n  IF \"To Time\" <= \"From Time\" THEN\n    FIELDERROR(\"To Time\");\n  ResTime.SETRANGE(\"Reservation Time\", \"From Time\", \n    \"To Time\");\n  ResTime.FIND('+');\n  ResTime.NEXT(-1);\n  ResTime.SETRANGE(\"Reservation Time\", \"From Time\", \n    ResTime.\"Reservation Time\");\n  ResTime.CALCSUMS(Duration);\n  VALIDATE(Quantity, ResTime.Duration);\nEND;\n```", "```cs\nFindSquashPrice()\nWITH FromSquashPrice DO BEGIN\n  SETFILTER(\"Ending Date\",'%1|>=%2',0D,StartingDate);\n  SETRANGE(\"Starting Date\",0D,StartingDate);\n\n  ToSquashPrice.RESET;\n  ToSquashPrice.DELETEALL;\n\n  SETRANGE(Member, IsMember);\n\n  SETRANGE(\"Ending Time\", 0T);\n  SETRANGE(\"Squash Court No.\", '');\n  CopySquashPriceToSquashPrice(FromSquashPrice,ToSquashPrice);\n\n  SETRANGE(\"Ending Time\", 0T);\n  SETRANGE(\"Squash Court No.\", CourtNo);\n  CopySquashPriceToSquashPrice(FromSquashPrice,ToSquashPrice);\n\n  SETRANGE(\"Squash Court No.\", '');\n  IF StartingTime <> 0T THEN BEGIN\n    SETFILTER(\"Ending Time\",'%1|>=%2',000001T,StartingTime);\n    CopySquashPriceToSquashPrice(FromSquashPrice,\n      ToSquashPrice);\n  END;\n\n  SETRANGE(\"Squash Court No.\", CourtNo);\n  IF StartingTime <> 0T THEN BEGIN\n    SETFILTER(\"Ending Time\",'%1|>=%2',000001T,StartingTime);\n    CopySquashPriceToSquashPrice(FromSquashPrice,\n      ToSquashPrice);\n  END;\nEND;\n```", "```cs\nCalcBestUnitPrice()\nWITH SquashPrice DO BEGIN\n  FoundSquashPrice := FINDSET;\n  IF FoundSquashPrice THEN BEGIN\n    BestSquashPrice := SquashPrice;\n    REPEAT\n      IF SquashPrice.\"Unit Price\" < \n        BestSquashPrice.\"Unit Price\" \n      THEN\n        BestSquashPrice := SquashPrice;\n    UNTIL NEXT = 0;\n  END;\nEND;\n\n// No price found in agreement\nIF BestSquashPrice.\"Unit Price\" = 0 THEN\n  BestSquashPrice.\"Unit Price\" := SquashCourt.\"Unit Price\";\n\nSquashPrice := BestSquashPrice;\n```", "```cs\nSquash Court No. - OnValidate()\nIF SquashCourt.GET(\"Squash Court No.\") THEN BEGIN\n  Description := SquashCourt.Description;\n  \"Unit Cost\" := SquashCourt.\"Unit Cost\";\n  \"Gen. Prod. Posting Group\" := SquashCourt.\"Gen. Prod. Posting Group\";\n  FindSquashPlayerPrice;\nEND;\n```", "```cs\nSetupObjectNoList()\nTableIDArray[1] := DATABASE::\"Salesperson/Purchaser\";\nTableIDArray[2] := DATABASE::\"G/L Account\";\nTableIDArray[3] := DATABASE::Customer;\n...\nTableIDArray[22] := DATABASE::\"Service Item Group\";\nTableIDArray[23] := DATABASE::\"Service Item\";\n\n//* Squash Application\nTableIDArray[49] := DATABASE::\"Squash Player\";\nTableIDArray[50] := DATABASE::\"Squash Court\";\n//* Squash Application\n\nObject.SETRANGE(Type,Object.Type::Table);\n\nFOR Index := 1 TO ARRAYLEN(TableIDArray) DO BEGIN\n  ...\n```", "```cs\nValidateShortcutDimCode()\nDimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);\nDimMgt.SaveDefaultDim(DATABASE::\"Squash Player\",\"No.\",\n  FieldNumber,ShortcutDimCode);\nMODIFY;\n```", "```cs\nCreateDim()\nTableID[1] := Type1;\nNo[1] := No1;\nTableID[2] := Type2;\nNo[2] := No2;\nTableID[3] := Type3;\nNo[3] := No3;\n\n\"Shortcut Dimension 1 Code\" := '';\n\"Shortcut Dimension 2 Code\" := '';\n\n\"Dimension Set ID\" :=\n  DimMgt.GetDefaultDimID(TableID,No,\"Source Code\",\n    \"Shortcut Dimension 1 Code\",\n      \"Shortcut Dimension 2 Code\",0,0);\n```", "```cs\nSquash Court No. - OnValidate()\nCreateDim(\n  DATABASE::\"Squash Court\",\"Squash Court No.\",\n  DATABASE::\"Squash Player\",\"Squash Player No.\",\n  DATABASE::Customer,\"Bill-to Customer No.\");\n```", "```cs\nCode()\n\n...\nSquashLedgEntry.\"Dimension Set ID\" := \"Dimension Set ID\";\n...\n\nSquashLedgEntry.INSERT;\n\nNextEntryNo := NextEntryNo + 1;\n```", "```cs\nCreateLn()\n...\nSalesLn.INIT;\n\nSalesLn.\"Dimension Set ID\" := \"Dimension Set ID\";\n\nSalesLn.INSERT(TRUE);\n```", "```cs\nRunCheck()\nWITH SquashJnlLine DO BEGIN\n  IF EmptyLine THEN\n    EXIT;\n\n  TESTFIELD(\"Squash Player No.\");\n  TESTFIELD(\"Squash Court No.\");\n  TESTFIELD(\"Posting Date\");\n  TESTFIELD(\"Gen. Prod. Posting Group\");\n  TESTFIELD(\"From Time\");\n  TESTFIELD(\"To Time\");\n  TESTFIELD(\"Reservation Date\");\n  TESTFIELD(\"Bill-to Customer No.\");\n\n  IF \"Entry Type\" = \"Entry Type\"::Invoice THEN\n    TESTFIELD(\"Applies-to Entry No.\");\n\n  IF \"Applies-to Entry No.\" <> 0 THEN\n    TESTFIELD(\"Entry Type\", \"Entry Type\"::Invoice);\n  IF \"Posting Date\" <> NORMALDATE(\"Posting Date\") THEN\n    FIELDERROR(\"Posting Date\",Text000);\n\n  IF (AllowPostingFrom = 0D) AND (AllowPostingTo = 0D) THEN \n    ...  \n  END;\n\n  ...\n\n  IF NOT DimMgt.CheckDimIDComb(\"Dimension Set ID\") THEN\n    ...\n  TableID[1] := DATABASE::\"Squash Player\";\n  No[1] := \"Squash Player No.\";\n  ...\n  IF NOT DimMgt.CheckJnlLineDimValuePosting(JnlLineDim,\n    TableID,No) \n  THEN\n    IF \"Line No.\" <> 0 THEN\n      ..................\n```", "```cs\nCode()\nWITH SquashJnlLine DO BEGIN\n  IF EmptyLine THEN\n    EXIT;\n\n  SquashJnlCheckLine.RunCheck(SquashJnlLine,TempJnlLineDim);\n\n  IF NextEntryNo = 0 THEN BEGIN\n    SquashLedgEntry.LOCKTABLE;\n    IF SquashLedgEntry.FIND('+') THEN\n      NextEntryNo := SquashLedgEntry.\"Entry No.\";\n    NextEntryNo := NextEntryNo + 1;\n  END;\n\n  IF SquashReg.\"No.\" = 0 THEN BEGIN\n    SquashReg.LOCKTABLE;\n    IF (NOT SquashReg.FIND('+') OR ... THEN BEGIN\n      SquashReg.INIT;\n      SquashReg.\"No.\" := SquashReg.\"No.\" + 1;\n      ...\n      SquashReg.INSERT;\n    END;\n  END;\n  SquashReg.\"To Entry No.\" := NextEntryNo;\n  SquashReg.MODIFY;\n\n  SquashPlayer.GET(\"Squash Player No.\");\n  SquashPlayer.TESTFIELD(Blocked,FALSE);\n\n  IF (GenPostingSetup.\"Gen. Bus. Posting Group\" <> \n    \"Gen. Bus. Posting Group\") OR\n    (GenPostingSetup.\"Gen. Prod. Posting Group\" <> \n    \"Gen. Prod. Posting Group\")\n  THEN\n    GenPostingSetup.GET(\"Gen. Bus. Posting Group\",\n      \"Gen. Prod. Posting Group\");\n\n  SquashLedgEntry.INIT;\n  SquashLedgEntry.\"Entry Type\" := \"Entry Type\";\n  SquashLedgEntry.\"Document No.\" := \"Document No.\";\n  ...\n  SquashLedgEntry.\"No. Series\" := \"Posting No. Series\";\n\n  SquashLedgEntry.INSERT;\n```", "```cs\nSquash Ledger Entry - OnAfterGetRecord()\nIF \"Bill-to Customer No.\" <> SalesHdr.\"Bill-to Customer No.\" \nTHEN\n  CreateSalesHdr;\n\nCreateLn;\n```", "```cs\nCreateSalesHdr()\nCLEAR(SalesHdr);\nSalesHdr.SetHideValidationDialog(TRUE);\nSalesHdr.\"Document Type\" := SalesHdr.\"Document Type\"::Invoice;\nSalesHdr.\"Document Date\" := WORKDATE;\nSalesHdr.\"Posting Date\" := WORKDATE;\nSalesHdr.VALIDATE(\"Sell-to Customer No.\", \n  \"Squash Ledger Entry\".\"Bill-to Customer No.\");\nSalesHdr.INSERT(TRUE);\n\nNextLineNo := 10000;\nCounterOK := CounterOK + 1;\n```", "```cs\nCreateLn()\nWITH \"Squash Ledger Entry\" DO BEGIN\n  GenPstSetup.GET(\"Gen. Bus. Posting Group\", \n    \"Gen. Prod. Posting Group\");\n  GenPstSetup.TESTFIELD(\"Sales Account\");\n\n  SalesLn.INIT;\n  SalesLn.\"Document Type\" := SalesHdr.\"Document Type\";\n  SalesLn.\"Document No.\" := SalesHdr.\"No.\";\n  SalesLn.\"Line No.\" := NextLineNo;\n  SalesLn.\"Dimension Set ID\" := \"Dimension Set ID\";\n\n  SalesLn.\"System-Created Entry\" := TRUE;\n\n  SalesLn.Type := SalesLn.Type::\"G/L Account\";\n  SalesLn.VALIDATE(\"No.\", GenPstSetup.\"Sales Account\");\n  SalesLn.Description := Description;\n\n  SalesLn.VALIDATE(Quantity, Quantity);\n  SalesLn.VALIDATE(\"Unit Price\", \"Unit Price\");\n  SalesLn.VALIDATE(\"Unit Cost (LCY)\", \"Unit Cost\");\n\n  SalesLn.\"Applies-to Squash Entry No.\" := \"Entry No.\";\n  SalesLn.INSERT(TRUE);\n\nEND;\nNextLineNo := NextLineNo + 10000;\n```", "```cs\nSquash Ledger Entry - OnPreDataItem()\nCounterTotal := COUNT;\nWindow.OPEN(Text000);\n\nSquash Ledger Entry - OnAfterGetRecord()\nCounter := Counter + 1;\nWindow.UPDATE(1,\"Bill-to Customer No.\");\nWindow.UPDATE(2,ROUND(Counter / CounterTotal * 10000,1));\n\n...\n\nSquash Ledger Entry - OnPostDataItem()\nWindow.CLOSE;\nMESSAGE(Text001,CounterOK,CounterTotal);\n```", "```cs\nCode()\n...\nWITH SalesHeader DO BEGIN\n  TESTFIELD(\"Document Type\");\n  TESTFIELD(\"Sell-to Customer No.\");\n  TESTFIELD(\"Bill-to Customer No.\");\n  TESTFIELD(\"Posting Date\");\n  TESTFIELD(\"Document Date\");\n  IF GenJnlCheckLine.DateNotAllowed(\"Posting Date\") THEN\n    FIELDERROR(\"Posting Date\",Text045);\n  CASE \"Document Type\" OF\n    \"Document Type\"::Order:\n      Receive := FALSE;\n    \"Document Type\"::Invoice:\n      BEGIN\n        Ship := TRUE;\n        Invoice := TRUE;\n        Receive := FALSE;\n      END;\n    \"Document Type\"::\"Return Order\":\n      Ship := FALSE;\n    \"Document Type\"::\"Credit Memo\":\n      BEGIN\n        Ship := FALSE;\n        Invoice := TRUE;\n        Receive := TRUE;\n      END;\n  END;\n\n  IF NOT (Ship OR Invoice OR Receive) THEN\n    ERROR(...);\n\n  WhseReference := \"Posting from Whse. Ref.\";\n  \"Posting from Whse. Ref.\" := 0;\n\n  IF Invoice THEN\n    CreatePrepaymentLines(...);\n  CheckDim;\n```", "```cs\n  // Insert invoice header or credit memo header\n  IF Invoice THEN\n    IF \"Document Type\" IN [\"Document Type\"::Order,\n      \"Document Type\"::Invoice] \n    THEN BEGIN\n      SalesInvHeader.INIT;\n      SalesInvHeader.TRANSFERFIELDS(SalesHeader);\n```", "```cs\n  // Lines\n  InvPostingBuffer[1].DELETEALL;\n  DropShipPostBuffer.DELETEALL;\n  EverythingInvoiced := TRUE;\n\n  SalesLine.RESET;\n  SalesLine.SETRANGE(\"Document Type\",\"Document Type\");\n  SalesLine.SETRANGE(\"Document No.\",\"No.\");\n  LineCount := 0;\n  RoundingLineInserted := FALSE;\n  MergeSaleslines(...);\n```", "```cs\n  // Post drop shipment of purchase order\n  PurchSetup.GET;\n  IF DropShipPostBuffer.FIND('-') THEN\n    REPEAT\n      PurchOrderHeader.GET(\n        PurchOrderHeader.\"Document Type\"::Order,\n        DropShipPostBuffer.\"Order No.\");\n```", "```cs\n  IF Invoice THEN BEGIN\n    // Post sales and VAT to G/L entries from posting buffer\n    LineCount := 0;\n    IF InvPostingBuffer[1].FIND('+') THEN\n      REPEAT\n        LineCount := LineCount + 1;\n        Window.UPDATE(3,LineCount);\n\n        GenJnlLine.INIT;\n        GenJnlLine.\"Posting Date\" := \"Posting Date\";\n        GenJnlLine.\"Document Date\" := \"Document Date\";\n```", "```cs\nIF (\"Document Type\" IN [\"Document Type\"::Order,\n  \"Document Type\"::\"Return Order\"]) AND\n   (NOT EverythingInvoiced)\nTHEN BEGIN\n  MODIFY;\n  // Insert T336 records\n  InsertTrackingSpecification;\n\n  IF SalesLine.FINDSET THEN\n    REPEAT\n      IF SalesLine.Quantity <> 0 THEN BEGIN\n        IF Ship THEN BEGIN\n          SalesLine.\"Quantity Shipped\" :=\n            SalesLine.\"Quantity Shipped\" +\n            SalesLine.\"Qty. to Ship\";\n          SalesLine.\"Qty. Shipped (Base)\" :=\n            SalesLine.\"Qty. Shipped (Base)\" +\n            SalesLine.\"Qty. to Ship (Base)\";\n        END;\n```", "```cs\nIF HASLINKS THEN DELETELINKS;\nDELETE;\n...\n\nSalesLine.DELETEALL;\nDeleteItemChargeAssgnt;\n...\n\nCLEAR(WhsePostRcpt);\nCLEAR(WhsePostShpt);\n...\nCLEAR(WhseJnlPostLine);\nCLEAR(InvtAdjmt);\nWindow.CLOSE;\n```", "```cs\n// Squash Journal Line\nIF SalesLine.\"Applies-to Squash Entry No.\" <> 0 THEN\n  PostSquashJnlLn;\n\nIF (SalesLine.Type >= SalesLine.Type::\"G/L Account\") AND \n  (SalesLine.\"Qty. to Invoice\" <> 0) \nTHEN BEGIN\n  // Copy sales to buffer\n```", "```cs\nPostSquashJnlLn()\nWITH SalesHeader DO BEGIN\n  OldSquashLedEnt.GET(\n    SalesLine.\"Applies-to Squash Entry No.\");\n  OldSquashLedEnt.TESTFIELD(Open);\n  OldSquashLedEnt.TESTFIELD(\"Bill-to Customer No.\", \n    \"Bill-to Customer No.\");\n\n  SquashJnlLn.INIT;\n  SquashJnlLn.\"Posting Date\" := \"Posting Date\";\n  SquashJnlLn.\"Reason Code\" := \"Reason Code\";\n  ...\n  SquashJnlLn.\"Document No.\" := GenJnlLineDocNo;\n  SquashJnlLn.\"External Document No.\" := GenJnlLineExtDocNo;\n  SquashJnlLn.Quantity := -SalesLine.\"Qty. to Invoice\";\n  SquashJnlLn.\"Source Code\" := SrcCode;\n  SquashJnlLn.\"Dimension Set ID\" := \n    SalesLine.\"Dimension Set ID\";\n  SquashJnlLn.Chargeable := TRUE;\n  SquashJnlLn.\"Posting No. Series\" := \"Posting No. Series\";\n  SquashJnlPostLine.RunWithCheck(SquashJnlLn);\nEND;\n```", "```cs\nFindRecords()\n...\n// Squash Ledger Entries\nIF SquashLedgEntry.READPERMISSION THEN BEGIN\n  SquashLedgEntry.RESET;\n  SquashLedgEntry.SETCURRENTKEY(\"Document No.\",\n    \"Posting Date\");\n  SquashLedgEntry.SETFILTER(\"Document No.\",DocNoFilter);\n  SquashLedgEntry.SETFILTER(\"Posting Date\",PostingDateFilter);\n  InsertIntoDocEntry(\n    DATABASE::\"Squash Ledger Entry\",0,\n    SquashLedgEntry.TABLECAPTION,SquashLedgEntry.COUNT);\nEND;\n// Squash Ledger Entries\n\nDocExists := FINDFIRST;\n```", "```cs\nShowRecords()\n...\n    DATABASE::\"Warranty Ledger Entry\":\n      FORM.RUN(0,WarrantyLedgerEntry);\n//* Squash Ledger Entries\n    DATABASE::\"Squash Ledger Entry\":\n      FORM.RUN(0,SquashLedgEntry);\n   END;\nEND;\n```"]