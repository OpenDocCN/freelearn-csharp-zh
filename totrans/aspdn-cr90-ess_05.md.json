["```cs\nwinget install -e --id Docker.DockerDesktop\n```", "```cs\n    docker run -d -e \"ACCEPT_EULA=Y\" -e \"MSSQL_SA_PASSWORD=Password123\" -p 1433:1433 mcr.microsoft.com/mssql/server:2019-latest\n    ```", "```cs\n    docker ps\n    ```", "```cs\ndotnet new console -n MyFirstDbConnection\ncd MyFirstDbConnection\ndotnet add package System.Data.SqlClient\ncode.\n```", "```cs\nusing System.Data.SqlClient;\nSqlConnection sql = new SqlConnection(\"Server=localhost,\n  1433;Database=DbStore; user id=sa;\n  password=Password123\");\ntry\n{\n    sql.Open();\n    Console.WriteLine(\"Connection Opened\");\n    SqlCommand cmd = new SqlCommand(\n      \"select * from Product\", sql);\n    SqlDataReader reader = cmd.ExecuteReader();\n    while (reader.Read())\n    {\n        Console.WriteLine($\"{reader[0]} - {reader[1]}\n          - {reader[2]:C2}\");\n    }\n}\ncatch (Exception ex)\n{\n    Console.WriteLine(ex.Message);\n}\nfinally\n{\n    sql.Close();\n    Console.WriteLine(\"Connection Closed\");\n}\n```", "```cs\npublic class BankingDbContext : DbContext\n  {\n    public BankingDbContext (DbContextOptions\n      < BankingDbContext > options)\n      : base(options)\n    {\n    }\n    public DbSet<Customer> Customers { get; set; }\n    public DbSet<Account> Accounts { get; set; }\n    public DbSet<Movement> Movements { get; set; }\n  }\n```", "```cs\npublic async Task<ICollection<Account>>\n  GetAllAccountsAsync()\n{\n     return await _context.Accounts.ToListAsync();\n}\n```", "```cs\ndotnet new webapi -n WorkingWithOrm\ncd WorkingWithOrm\n```", "```cs\ndotnet tool install –global dotnet-ef\ndotnet add package Microsoft.EntityFrameworkCore\ndotnet add package Microsoft.EntityFrameworkCore.SqlServer\ndotnet add package Microsoft.EntityFrameworkCore.Design\n```", "```cs\ncode .\n```", "```cs\n{\n   \"Logging\": {\n     \"LogLevel\": {\n       \"Default\": \"Information\",\n       \"Microsoft.AspNetCore\": \"Warning\"\n     }\n   },\n   \"AllowedHosts\": \"*\",\n   \"ConnectionStrings\": {\n    \"BankingDbContext\": \"Server=localhost;\n      Database=dbBanking;User Id=sa;\n      Password=Password123;\n      TrustServerCertificate=True\"\n   }\n}\n```", "```cs\nnamespace WorkingWithOrm.Context;\nusing Microsoft.EntityFrameworkCore;\nusing WorkingWithOrm.Model;\npublic class BankingDbContext : DbContext\n{\n    public BankingDbContext(DbContextOptions\n      <BankingDbContext> options) : base(options)\n    {\n    }\n    public DbSet<Account> Accounts { get; set; }\n    public DbSet<Customer> Customers { get; set; }\n    public DbSet<Movement> Movements { get; set; }\n}\n```", "```cs\npublic class Account\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public decimal Balance { get; set; }\n    public int CustomerId { get; set; }\n    public virtual Customer? Customer { get; set; }\n    public virtual ICollection<Movement>? Movements\n      { get; set; }\n}\n```", "```cs\noverride protected void OnModelCreating(\n  ModelBuilder modelBuilder)\n  {\n    modelBuilder.Entity<Customer>(obj => {\n      obj.ToTable(\"tbl_customer\");\n      obj.HasKey(c => c.Id).HasName\n        (\"pk_customer_id\");\n      obj.Property(c => c.Name).HasColumnName\n        (\"customer_name\").HasMaxLength(100).IsRequired();\n      obj.HasMany(c => c.Accounts)\n        .WithOne(a => a.Customer)\n        .HasForeignKey(a => a.CustomerId);\n    });\n  }\n```", "```cs\n// Code omitted for readability\nbuilder.Services.AddDbContext<BankingDbContext>(options =>\n  options.UseSqlServer(builder.Configuration\n    .GetConnectionString(\"BankingDbContext\")));\nvar app = builder.Build();\n// Code omitted for readability\n```", "```cs\ndotnet ef migrations add InitialDatabase\n```", "```cs\n…\nprotected override void Up(MigrationBuilder\n  migrationBuilder)\n  {\n    migrationBuilder.CreateTable(\n      name: \"Customers\",\n      columns: table => new\n      {\n          Id = table.Column<int>(type: \"int\",\n            nullable: false)\n            .Annotation(\"SqlServer:Identity\", \"1, 1\"),\n          Name = table.Column<string>(\n            type: \"nvarchar(max)\", nullable: false)\n        },\n        constraints: table =>\n        {\n          table.PrimaryKey(\"PK_Customers\", x => x.Id);\n        });\n…\n```", "```cs\ndotnet ef database update\n```", "```cs\napp.MapGet(\"/customers\", async (CancellationToken\n  cancellationToken, BankingDbContext dbContext) =>\n  {\n    var customers = await dbContext.Customers\n      .ToListAsync(cancellationToken);\n    return Results.Ok(customers);\n        });\n    app.MapGet(\"/customers/{id}\", async (int id,\n      BankingDbContext dbContext,\n      CancellationToken cancellationToken) =>\n      {\n        var customer = await dbContext.Customers\n          .FindAsync(id, cancellationToken);\n        return Results.Ok(customer);\n      });\n      app.MapPost(\"/customers\", async (\n        [FromBody]Customer customer,\n        BankingDbContext dbContext,\n        CancellationToken cancellationToken) =>\n        {\n          await dbContext.Customers.AddAsync(\ncustomer, cancellationToken);\n          await dbContext\n            .SaveChangesAsync(cancellationToken);\n          return Results.Created();\n        });\n```", "```cs\ndotnet add package Dapper\n```", "```cs\nbuilder.Services.AddScoped(_ => new SqlConnection(builder\n  .Configuration.GetConnectionString(\"BankingDbContext\")));\nvar app = builder.Build();\n// Codes omitted for readability\napp.MapGet(\"GetAllCustomersUsingDapper\", async(SqlConnection connection) =>\n{\n  var customers = await connection.QueryAsync<Customer>\n    (\"SELECT Id, Name FROM Customers ORDER BY Name\");\n  return Results.Ok(customers);\n});\napp.MapGet(\"GetCustomerByIdUsingDapper\",\n  async(int id, SqlConnection connection) =>\n{\n    var customer = await connection\n      .QueryFirstOrDefaultAsync<Customer>(\"SELECT Id,\n      Name FROM Customers WHERE Id = @Id\", new {\n        Id = id });\n    if (customer is null) return Results.NotFound();\n    return Results.Ok(customer);\n});\n```"]