- en: '*Chapter 14*: Creating a Custom ActionFilter'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will keep on customizing on the controller level in this chapter. We'll have
    a look into action filters and how to create your own `ActionFilter` class to
    keep your Actions small and readable.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing `ActionFilter`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `ActionFilter`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The topics of this chapter belong to the **Model-View-Controller** (**MVC**)
    layer of the ASP.NET Core architecture, depicted here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.1 – ASP.NET Core architecture](img/Figure_14.1_B17996.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.1 – ASP.NET Core architecture
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To follow the exercises in this chapter, you will need to create an ASP.NET
    Core MVC application. Open your console, shell, or Bash terminal and change to
    your working directory. Use the following command to create a new MVC application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, open the project in Visual Studio by double-clicking the project file
    or in **Visual Studio Code** (**VS Code**) by typing the following command in
    the already open console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'All of the code samples in this chapter can be found in the GitHub repository
    for this book at: [https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter14](https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter14).'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing ActionFilter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Action filters are a little bit like middleware because they can manipulate
    the input and the output but are executed immediately on a specific action or
    on all actions of a specific controller on the MVC layer, and MiddleWare works
    directly on the request object on the hosting layer. An `ActionFilter` class is
    created to execute code right before or after an action is executed. They are
    introduced to execute aspects that are not part of the actual action logic: `AuthorizeAttribute`
    is used to allow users or groups to access specific Actions or Controllers. `AuthorizeAttribute`
    is an `ActionFilter`. It checks whether the logged-on user is authorized or not.
    If not, it redirects to the login page.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you apply an `ActionFilter` globally, it executes on all actions in your
    application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next code sample shows the skeletons of a normal action filter and an async
    `ActionFilter`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see here, there are always two methods to place code to execute
    before and after the target action is executed. These action filters cannot be
    used as attributes. If you want to use action filters as attributes in your Controllers,
    you need to derive them from `Attribute` or from `ActionFilterAttribute`, as shown
    in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code snippet shows a simple `ActionFilter` that always returns
    `BadRequestObjectResult` if `ModelState` is not valid. This may be useful within
    a web `POST`, `PUT`, and `PATCH` requests. This could be extended with a lot more
    validation logic. We'll see how to use it later on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another possible use case for an `ActionFilter` is logging. You don''t need
    to log in controller actions directly. You can do this in an action filter to
    keep your actions readable with relevant code, as illustrated in the following
    snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This logs an informational message out to the console. You can get more information
    about the current action out of `ActionExecutingContext` or `ActionExecutedContext`—for
    example, the arguments, the argument values, and so on. This makes action filters
    pretty useful.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see how action filters work in practice.
  prefs: []
  type: TYPE_NORMAL
- en: Using ActionFilter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Action filters that are actually attributes can be registered as an attribute
    of an Action or a Controller, as illustrated in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Here, we use `ValidateModel` attribute that checks the `ModelState` and returns
    `BadRequestObjectResult` in case the `ModelState` is invalid; we don't need to
    check the `ModelState` in the actual Action.
  prefs: []
  type: TYPE_NORMAL
- en: 'To register action filters globally, you need to extend the MVC registration
    in the `ConfigureServices` method of the `Startup.cs` file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Action filters registered like this will be executed on every action. This way,
    you are able to use action filters that don't derive from an attribute.
  prefs: []
  type: TYPE_NORMAL
- en: The `LoggingActionFilter` we created previously is a little more special. It
    is dependent on an instance of `ILoggerFactory`, which needs to be passed into
    the constructor. This won't work well as an attribute, because `Attributes` don't
    support `ILoggerFactory` is registered in the ASP.NET Core DI container and needs
    to be injected into `LoggingActionFilter`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because of this, there are some more ways to register action filters. Globally,
    we are able to register them as a type that gets instantiated by the DI container,
    and the dependencies can be solved by the container, as illustrated in the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This works well. We now have `ILoggerFactory` in the filter.
  prefs: []
  type: TYPE_NORMAL
- en: 'To support automatic resolution in `Attributes`, you need to use the `ServiceFilter`
    attribute on the Controller or Action level, as illustrated here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition to the global filter registration, `ActionFilter` needs to be registered
    in `ServiceCollection` before we can use it with `ServiceFilter` attribute, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: To be complete, there is another way to use action filters that needs arguments
    passed into the constructor. You can use the `TypeFilter` attribute to automatically
    instantiate the filter. But using this attribute, the filter *isn't* instantiated
    by the DI container; the arguments need to be specified as arguments of the `TypeFilter`
    attribute.
  prefs: []
  type: TYPE_NORMAL
- en: 'See the next snippet from the official documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The type of the filter and the arguments are specified with the `TypeFilter`
    attribute.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Action filters give us an easy way to keep actions clean. If we find repeating
    tasks inside our Actions that are not really relevant to the actual responsibility
    of the Action, we can move those tasks out to an `ActionFilter`, or maybe a `ModelBinder`
    or some MiddleWare, depending on how it needs to work globally. The more relevant
    it is to an Action, the more appropriate it is to use an `ActionFilter`.
  prefs: []
  type: TYPE_NORMAL
- en: There are more kinds of filters, all of which work in a similar fashion. To
    learn more about the different kinds of filters, reading the documentation is
    definitely recommended.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we speed up your web application by using caches.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Microsoft ASP.NET Core filters: [https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/filters](https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/filters)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
