["```cs\nusing System;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nclass Program\n{\nstatic Random ran = new Random();\nstatic void Main(string[] args)\n    {\n        // Wait on a single task with no timeout.\n        Task taskA = Task.Factory.StartNew(() => Worker(10000));\ntaskA.Wait();\nConsole.WriteLine(\"Task A Finished.\");\n\n        // Wait on a single task with a timeout.\n        Task taskB = Task.Factory.StartNew(() => Worker(2000000));\ntaskB.Wait(2000); //Wait for 2 seconds. \n\nif (taskB.IsCompleted)\nConsole.WriteLine(\"Task B Finished.\");\nelse\nConsole.WriteLine(\"Timed out without Task B finishing.\");\n\nConsole.ReadLine();\n    }\n\nstatic void Worker(intwaitTime)\n    {\nThread.Sleep(waitTime);\n    }\n}\n```", "```cs\nstatic double Worker1()\n    {\nint i = ran.Next(1000000);\nThread.SpinWait(i);\nreturn i;\n    }\n```", "```cs\nTask<double> taskC = Task<double>.Factory.StartNew(() => Worker1());\n\nConsole.WriteLine(\"TaskC finished = result is {0}.\", taskC.Result);\n```", "```cs\nConsole.WriteLine(\"Timed out without Task B finishing.\");\n```", "```cs\n    using System.Threading;\n    ```", "```cs\n    private String Worker1()\n            {\n    int result = ran.Next(10000000);\n    Thread.SpinWait(result);\n    return String.Format(\"Random Number is {0} and Time is {1}.\",result, DateTime.Now.Millisecond);\n            }\n    ```", "```cs\n    private void btnRandomAll_Click(object sender, RoutedEventArgs e)\n            {\n    // Wait for all tasks to finish.\n    Task<String>[] tasks = newTask<String>[3];\n    for (int i = 0; i< 3; i++)\n                {\n    tasks[i] = Task<String>.Factory.StartNew(() => Worker1());\n                }\n    Task.WaitAll(tasks);\n\n                text1.Text = tasks[0].Result.ToString();\n                text2.Text = tasks[1].Result.ToString();\n                text3.Text = tasks[2].Result.ToString();\n            }\n    ```", "```cs\n    private void btnRandomFirst_Click(object sender, RoutedEventArgs e)\n            {\n    Task<String>[] tasks = newTask<String>[3];\n    for (int i = 0; i< 3; i++)\n                {\n    tasks[i] = Task<String>.Factory.StartNew(() => Worker1());\n                }\n    //Task.WaitAll(tasks);\n    int index = Task.WaitAny(tasks);\n\n                text4.Text = \"Task \" + index.ToString() + \" finished first.\";\n            }\n    ```", "```cs\n    Task<String>.Factory.StartNew(() => Worker1());\n    ```", "```cs\n    Task<String>[] tasks = newTask<String>[3];\n    ```", "```cs\n    Task.WaitAll(tasks);\n    ```", "```cs\n    int index = Task.WaitAny(tasks);\n    ```", "```cs\n    using System.Threading;\n    ```", "```cs\n    CancellationTokenSourcets;\n    ```", "```cs\n    public double AddMultiple(int number)\n            {\n    double result = 1;\n    for (int i = 1; i< 100000000; i++)\n                {\n    ts.Token.ThrowIfCancellationRequested();\n    result = result + (number * i);\n                }\n    return result;\n     }\n    ```", "```cs\n    private void btnStart_Click(object sender, RoutedEventArgs e)\n            {\n    ts = new CancellationTokenSource();\n\n                textBlock1.Text = \"\";\n\n    List<Task> tasks = new List<Task>();\n\n    for (int i = 2; i<= 10; i++)\n                {\n    int tmp = i;\n\n    Task<double> adder = Task.Factory.StartNew(() =>AddMultiple(tmp), ts.Token);\n\n    tasks.Add(adder);\n\n    var show = adder.ContinueWith(resultTask =>\n                                         textBlock1.Text += tmp.ToString() + \" - \" + adder.Result.ToString() + Environment.NewLine,\n    CancellationToken.None,\n    TaskContinuationOptions.OnlyOnRanToCompletion,\n    TaskScheduler.FromCurrentSynchronizationContext());\n\n    var showCancel = adder.ContinueWith(resultTask =>\n                                                   textBlock1.Text += tmp.ToString() + \" canceled\" + Environment.NewLine,\n    CancellationToken.None,\n    TaskContinuationOptions.OnlyOnCanceled, TaskScheduler.FromCurrentSynchronizationContext());\n                }\n            }\n    ```", "```cs\n    private void btnCancel_Click(object sender, RoutedEventArgs e)\n            {\n    ts.Cancel();\n            }\n    ```", "```cs\nTask<double> adder = Task.Factory.StartNew(() =>AddMultiple(tmp), ts.Token);\n```", "```cs\nvar show = adder.ContinueWith(resultTask =>\n                                     textBlock1.Text += tmp.ToString() + \" - \" + adder.Result.ToString() + Environment.NewLine,\nCancellationToken.None,\nTaskContinuationOptions.OnlyOnRanToCompletion,\nTaskScheduler.FromCurrentSynchronizationContext());\n\nvar showCancel = adder.ContinueWith(resultTask =>\n                                               textBlock1.Text += tmp.ToString() + \" canceled\" + Environment.NewLine,\nCancellationToken.None,\n\nTaskContinuationOptions.OnlyOnCanceled, TaskScheduler.FromCurrentSynchronizationContext());\n```", "```cs\ntask.ContinueWith(resultTask =>DoSomething(), TaskContinuationOptions.OnlyOnFaulted);\n```"]