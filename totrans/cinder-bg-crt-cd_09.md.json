["```cs\n#include \"cinder/audio/Output.h\"\n```", "```cs\naudio::SourceRef src;\n```", "```cs\nsrc = audio::load(loadAsset(\"sample.wav\"));\naudio::Output::play(src);\n```", "```cs\naudio::TrackRef trackRef;\n```", "```cs\nsrc = audio::load(loadAsset(\"sample.wav\"));\ntrackRef = audio::Output::addTrack(src);\n```", "```cs\ntrackRef = audio::Output::addTrack(src, false);\n```", "```cs\ntrackRef->play();\n```", "```cs\ntrackRef->setLooping(true);\n```", "```cs\ntrackRef->setVolume(0.5f); // set track volume\naudio::Output::setVolume(0.5f); // set master volume\n```", "```cs\nfloat masterVol, trackVol;\nvoid mouseMove(MouseEvent event);\n```", "```cs\nvoid BasicAudioApp::setup() {\n masterVol = trackVol = 0.5f;\n  src = audio::load(loadAsset(\"sample.wav\"));\n  trackRef = audio::Output::addTrack(src, false);\n  trackRef->setLooping(true);\n  trackRef->setVolume(trackVol); // set track volume\n  audio::Output::setVolume(masterVol); // set master volume\n  trackRef->play();\n}\n```", "```cs\nvoid BasicAudioApp::mouseMove(MouseEvent event) {\n    masterVol = (float)event.getX()/getWindowWidth();\n    trackVol = (float)event.getY()/getWindowHeight();\n    audio::Output::setVolume(masterVol);\n    trackRef->setVolume(trackVol);\n}\n```", "```cs\nvoid mouseDrag(MouseEvent event);\n```", "```cs\nvoid BasicAudioApp::mouseDrag(MouseEvent event) {\n    double time =\n    (double)event.getX()/getWindowWidth()*src->getDuration();\n    trackRef->setTime( time );\n}\n```", "```cs\ntrackRef->enablePcmBuffering( true );\n```", "```cs\naudio::PcmBuffer32fRef pcmBuffer;\n```", "```cs\npcmBuffer = trackRef->getPcmBuffer();\n```", "```cs\nvoid BasicAudioApp::draw() {\n  // clear the screen by drawing\n  // a semi-transparent black rectangle all over the screen\n  gl::enableAlphaBlending();\n  gl::color( 0.f, 0.f, 0.f, 0.1f );\n  gl::drawSolidRect(getWindowBounds());\n\n  if( !pcmBuffer ) {\n    gl::disableAlphaBlending();\n    return; // stop here if the buffer is empty\n  }\n\n  // get copy of the left channel data from the pcmBuffer\n  audio::Buffer32fRef buffer =\n  pcmBuffer->getChannelData( audio::CHANNEL_FRONT_LEFT );\n\n  // get buffer length\n  uint32_t bufferLength = pcmBuffer->getSampleCount();\n\n  // calculate scale for mapping the buffer data on the screen\n  float scale = getWindowWidth() / (float)bufferLength;\n  // set color to cyan\n  gl::color( 0.f, 1.f ,1.f ,0.8f );\n\n  // loop through current buffer data\n  // in steps of 10 and construct waveform\n  for( int i=0; i<bufferLength; i+=10 ) {\n    // map current x position of buffer value to window width\n    float x = i * scale;\n\n    // buffer data fluctuates from -1 to +1,\n    // map it to window height\n    float y = ( (buffer->mData[i]+1) * getWindowHeight()/2 );\n\n    // draw a circle\n    gl::drawStrokedCircle( Vec2f(x, y),\n    ( abs(buffer->mData[i])*getWindowHeight()/2 ) );\n  }\n\n  gl::disableAlphaBlending();\n}\n```", "```cs\n#include \"cinder/audio/Input.h\"\n```", "```cs\naudio::Input input;\nbool useInput;\n```", "```cs\ninput = audio::Input();\n```", "```cs\nuseInput = !useInput;\n\nif ( useInput ) {\n    input.start();\n    trackRef->stop();\n} else {\n    input.stop();\n    trackRef->play();\n}\n```", "```cs\nif ( useInput ) pcmBuffer = input.getPcmBuffer();\nelse pcmBuffer = trackRef->getPcmBuffer();\n```"]