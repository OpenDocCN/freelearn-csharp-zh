["```cs\n    public void SleepCommand(int milliseconds)\n    {\n        Thread.Sleep(milliseconds);\n    }\n    ```", "```cs\n    public DateTime DateTimeQuery()\n    {\n        return DateTime.Now;\n    }\n    ```", "```cs\n    private static void ExecuteCommand()\n    {\n        new CQRSBasedClass().SleepCommand(1000);\n    }\n    ```", "```cs\n    private static DateTime ExecuteQuery()\n    {\n        return new CQRSBasedClass().DateTimeQuery();\n    }\n    ```", "```cs\n        Console.WriteLine(\"Hello, World! This is the most \n            simple example of CQRS in action.\");\n        ExecuteCommand();\n        Console.WriteLine($\"The current date and time is: \n          {ExecuteQuery()}.\");\n    ```", "```cs\n    void RegisterWithEventAggregator(IEventAggregator \n        eventAggregator);\n    ```", "```cs\n    void Register(IRegisterable registerable);\n    void Register<T>(EventHandler<T> eventhandler) where\n         T : IEvent;\n    void RaiseEvent(IEvent evt);\n    ```", "```cs\n    namespace CH13_EventSourcing;\n    public delegate void EventHandler<T>(T evt) where T : \n        IEvent;\n    ```", "```cs\n    IDictionary<Type, IList<EventHandler<IEvent>>> \n        _eventHandlers; \n    ```", "```cs\n    public SingleThreadedEventAggregator()\n    {\n         _eventHandlers = new Dictionary<Type, \n             IList<EventHandler<IEvent>>>();\n    }\n    ```", "```cs\n    public void Register(IRegisterable registerable)\n    {\n         registerable.RegisterWithEventAggregator(this);\n    }\n    ```", "```cs\n    public void Register<T>(EventHandler<T> eventHandler) \n        where T : IEvent\n    {\n         if (!_eventHandlers.ContainsKey(typeof(T)))\n         {\n              _eventHandlers[typeof(T)] = new \n                 List<EventHandler<IEvent>>();\n         }\n         var eventHandlerList = _eventHandlers[typeof(T)];\n         eventHandlerList.Add(evt => eventHandler\n              ((T)evt));\n    }\n    ```", "```cs\n    public void RaiseEvent(IEvent evt)\n    {\n         IList<EventHandler<IEvent>> eventHandlerList;\n         if (_eventHandlers.TryGetValue(evt.GetType(), \n             out eventHandlerList))\n         {\n             foreach (EventHandler<IEvent> eventHandler in \n                 eventHandlerList)\n             {\n                   eventHandler.Invoke(evt);\n               }\n         }\n    }\n    ```", "```cs\n    IDictionary<Type, IList<EventHandler<IEvent>>> \n        _eventHandlers;\n    ```", "```cs\n    public MultiThreadedEventAggregator()\n    {\n         _eventHandlers = new ConcurrentDictionary<Type, \n             IList<EventHandler<IEvent>>>();\n    }\n    ```", "```cs\n    public void Register(IRegisterable registerable)\n    {              \n         registerable.RegisterWithEventAggregator(this);\n    }\n    ```", "```cs\n    public void Register<T>(EventHandler<T> eventHandler) \n        where T : IEvent\n    {\n         if (!_eventHandlers.ContainsKey(typeof(T)))\n         {\n             _eventHandlers[typeof(T)] = new \n                 List<EventHandler<IEvent>>();\n         }\n         var eventHandlerList = _eventHandlers[typeof(T)];\n         eventHandlerList.Add(evt => eventHandler((T)evt));\n    }\n    ```", "```cs\n    public void RaiseEvent(IEvent evt)\n    {\n         IList<EventHandler<IEvent>> eventHandlerList;\n         if (_eventHandlers.TryGetValue(evt.GetType(), out \n            eventHandlerList))\n          {\n              Parallel.ForEach(eventHandlerList, \n                  eventHandler =>\n                   {\n                       eventHandler.Invoke(evt);\n                   });\n         }\n    }\n    ```", "```cs\n    internal class DividendPayment : IEvent\n    {\n         public string From { get; set; }\n         public string To { get; set; }\n         public DateTime PaymentDate { get; set; }\n         public Decimal Amount { get; set; }\n    }\n    ```", "```cs\n    internal sealed class InvalidDateException : Exception\n    {\n         public InvalidDateException() : base()\n         {\n         }\n         public InvalidDateException(string? message) \n             : base(message)\n         {\n         }\n          public InvalidDateException(string? message, \n              Exception? innerException) : base(message, \n                  innerException)\n         {\n         }\n    }\n    ```", "```cs\n    internal class StandingOrderPayment : IEvent\n    {\n         public string From { get; set; }\n         public string To { get; set; }\n         public DateOnly StartDate { get; set; }\n         public decimal Amount { get; set; }\n    }\n    ```", "```cs\n    internal class EventHandlers : IRegisterable\n    {\n    }\n    ```", "```cs\n    public string Name { get; }\n    public EventHandlers(string name)\n    {\n         Name = name;\n    }\n    ```", "```cs\n    public void RegisterWithEventAggregator\n         (IEventAggregator eventAggregator)\n    {   \n        eventAggregator.Register<DividendPayment>\n             (OnDividendPayment);  \n        eventAggregator.Register<StandingOrderPayment>\n             (OnStandingOrderPayment);\n    }\n    ```", "```cs\n    private void OnDividendPayment(DividendPayment evt)\n    {\n        Console.WriteLine($\"Dividend paid by {evt.From} to \n            {evt.To} on {evt.PaymentDate} of \n                £{evt.Amount}.\");\n    }\n    ```", "```cs\n    private void OnStandingOrderPayment\n        (StandingOrderPayment evt)\n    {\n         try\n         {\n              Console.WriteLine($\"Standing order paid by \n              {evt.From} to {evt.To} on {GetStanding\n              OrderDate(evt.StartDate)} of \n              £{evt.Amount}.\");\n         }\n         catch (InvalidDateException idex)\n         {\n              Console.WriteLine(idex.Message);\n         }\n    }\n    ```", "```cs\n    private static DateTime GetStandingOrderDate(DateOnly \n        startDate)\n    {\n         if (DateTime.UtcNow.Ticks < startDate.ToDateTime\n             (TimeOnly.FromTimeSpan(TimeSpan.Zero)).Ticks)\n              throw new InvalidDateException(\"Invalid \n                Date: Payment date cannot be before \n                  standing order start date!\");\n         if (DateTime.Now.Day < startDate.Day)\n              throw new InvalidDateException(\"InvalidDate: \n                Payment cannot be made before the standing \n                  order month pay day.\");\n         return DateTime.Now;\n    }\n    ```", "```cs\n    using CH13_EventSourcing;\n    using CH13_EventSourcing.BankApp;\n    using EventHandlers = CH13_EventSourcing.BankApp\n        .EventHandlers;\n    SingleThreadedEventAggregator eventAggregator = new();\n    EventHandlers eventHandlers = new(\"Payment Event \n        Handlers\");\n    DividendPayment dividendPayment = new DividendPayment \n        { From = \"Company Name\", To = \"Customer Name\", \n            PaymentDate = DateTime.Now, Amount = 23.45M };\n    StandingOrderPayment standingOrderPayment = new \n        StandingOrderPayment { From = \"Customer Name\", To \n            = \"Company One\", StartDate = DateOnly.Parse\n                (\"25/02/2022\") };\n    eventAggregator.Register(eventHandlers);\n    eventAggregator.RaiseEvent(dividendPayment);\n    eventAggregator.RaiseEvent(standingOrderPayment);\n    ```", "```cs\n    > choco install pulumi\n    ```", "```cs\n    az login\n    ```", "```cs\n    Invoke-WebRequest -Uri https://aka.ms/\n    installazurecliwindows -OutFile .\\AzureCLI.msi; Start-\n    Process msiexec.exe -Wait -ArgumentList '/I \n    AzureCLI.msi /quiet'; rm .\\AzureCLI.msi\n    ```", "```cs\n    > Mkdir CH13_Pulumi\n    > cd CH13_Pulumi\n    > pulumi new azure-csharp\n    ```", "```cs\n    Pulumi up\n    ```", "```cs\n    <html><head><title>Sample \n      HTML</title></head><body><h1>Hello, World!</h1>\n    <hr /><p>This is a sample paragraph.</p></body></html>\n    ```", "```cs\n    // Enable static website support\n    var staticWebsite = new StorageAccountStaticWebsite(\n         \"staticWebsite\",\n         new StorageAccountStaticWebsiteArgs\n    {\n         AccountName = storageAccount.Name,\n         ResourceGroupName = resourceGroup.Name,\n         IndexDocument = \"index.html\",\n    });\n    ```", "```cs\n    // Upload the file\n    var index_html = new Blob(\"index.html\", new BlobArgs\n    {\n    ResourceGroupName = resourceGroup.Name,\n    AccountName = storageAccount.Name,\n    ContainerName = staticWebsite.ContainerName,\n    Source = new FileAsset(\"index.html\"),\n    ContentType = \"text/html\",\n    });\n    ```", "```cs\n    // Web endpoint to the website\n    this.StaticEndpoint = storageAccount\n         .PrimaryEndpoints.Apply(\n             primaryEndpoints => primaryEndpoints.Web\n         );\n    ```", "```cs\n    [Output]\n    public Output<string> StaticEndpoint { get; set; }\n    ```", "```cs\n    pulumi up\n    ```", "```cs\n    pulumi destroy\n    ```", "```cs\npulumi stack rm dev\n```"]