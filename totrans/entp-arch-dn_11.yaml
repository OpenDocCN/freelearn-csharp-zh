- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Business Processes and Low Code
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 业务流程和低代码
- en: 'Business processes are all over information systems, and when talking to CEOs,
    they generally inform the way they see IT: as a way of automating the business
    processes of the company, providing reliability, repeatability, and – in the best
    systems – visibility of what happens that brings value to customers, be they internal
    or external. Business processes are at the heart of the company’s information
    system because each activity is generally ported by an instance of a process.
    When the company is certified with ISO 9001, each of the processes in the certified
    perimeter is precisely documented and its use by each of the actors concerned
    can be verified in practice. The processes thus structure the activity of the
    company.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 业务流程遍布信息系统，在与CEO交谈时，他们通常会告知他们如何看待IT：作为一种自动化公司业务流程的方式，提供可靠性、可重复性和——在最佳系统中——对发生的事情的可见性，无论这些事情是为内部客户还是外部客户带来价值。业务流程是公司信息系统的核心，因为每个活动通常由一个流程实例承载。当公司获得ISO
    9001认证时，认证范围内的每个流程都得到了精确的记录，并且可以验证相关演员的实际使用情况。因此，这些流程结构化了公司的活动。
- en: This chapter details how a clean architecture should behave from the business
    process point of view by explaining the notions of business process modeling,
    business activity monitoring, and business process mining, and then by showing
    how business processes can be used in an IT system. Low-code and no-code approaches
    are discussed, as well as BPMN-2.0-based approaches. Throughout the chapter, we
    will provide examples to relate the practice to our demonstration information
    system and make the processes used in IT more concrete. Finally, another approach
    to business processes through service choreography will also be detailed.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章详细说明了从业务流程的角度来看，一个干净的架构应该如何表现，通过解释业务流程建模、业务活动监控和业务流程挖掘的概念，然后展示如何在IT系统中使用业务流程。本章讨论了低代码和无代码方法，以及基于BPMN-2.0的方法。在整个章节中，我们将提供示例，将实践与我们的演示信息系统联系起来，使IT中使用的流程更加具体。最后，还将详细说明通过服务编排的业务流程的另一种方法。
- en: 'In this chapter, we’ll cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Business processes and the BPMN approach
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 业务流程和BPMN方法
- en: Business process software-based execution
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于业务流程软件的执行
- en: Other associated practices
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他相关实践
- en: Other approaches to business process implementation
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 业务流程实施的其他方法
- en: Should I use BPMN in my information system?
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我应该在信息系统中使用BPMN吗？
- en: If you remember well, [*Chapter 5*](B21293_05.xhtml#_idTextAnchor164) introduced
    the idea of a utopic perfect information system that would be made of only three
    modules. **Master Data Management** (**MDM**) was the first one and it has been
    studied in detail in the previous chapter. Now, we will analyze what the second
    module, namely BPM, is all about. In the next chapter, we will end this with a
    thorough explanation of a BRMS. As you will see, the business process approach
    is not currently very widely adopted in information systems, certainly even less
    than the culture of data referential services. The norms and standards are there
    for the taking, but very little implementation can be observed. This is an important
    point to consider, as what will be shown in this chapter is more of an ideal (at
    least for now) than a recommendation to orient existing information systems. Only
    time will tell whether IT gets structured around this solid approach or whether
    the costs will remain too high for widespread use in the IT industry.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果记得清楚，[*第五章*](B21293_05.xhtml#_idTextAnchor164)介绍了乌托邦式的理想信息系统的概念，该系统仅由三个模块组成。**主数据管理**（**MDM**）是第一个模块，在上一章中已经对其进行了详细研究。现在，我们将分析第二个模块，即BPM，究竟是什么。在下一章中，我们将通过彻底解释BRMS来结束这一部分。正如您将看到的，业务流程方法目前在信息系统中的应用并不广泛，当然甚至不如数据参考服务文化那样普及。规范和标准已经存在，但实际实施却很少。这是一个需要考虑的重要观点，因为本章将要展示的内容更多的是一种理想（至少目前是这样），而不是对现有信息系统进行定位的建议。只有时间才能告诉我们，IT是否会围绕这种稳固的方法进行结构化，或者成本是否会过高，以至于在IT行业中难以广泛应用。
- en: Business processes and the BPMN approach
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 业务流程和BPMN方法
- en: In this first section, we are going to explain in more detail what business
    processes are and how we can model them with a software approach, using, in particular,
    a norm called BPMN. Before talking about processes in the IT world, it is indeed
    interesting to come back to the definition of a process from a purely functional
    point of view, as we always do in this book about business/IT alignment.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将更详细地解释什么是业务流程，以及我们如何使用软件方法对它们进行建模，特别是使用一种称为BPMN的标准。在谈论IT世界中的流程之前，确实很有趣回到从纯粹的功能角度对流程的定义，正如我们在关于业务/IT对齐的这本书中一直所做的那样。
- en: What is a business process?
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是业务流程？
- en: A **business process** is a coordinated set of human and automated actions realized
    to reach an objective. The term “*process*” is often replaceable by the almost
    equivalent “workflow”, which better expresses the fact that the actions (or “tasks”)
    are actual work that is being done by a human actor or a piece of software and
    that they are realized in an organized stream (the “flow”) to achieve the business
    goal that the process aims at.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**业务流程**是一组协调的人力和自动化动作，旨在实现一个目标。术语“*流程*”通常可以替换为几乎等价的“工作流程”，这更好地表达了这样一个事实：这些动作（或“任务”）是由一个人类行为者或软件片段实际执行的工作，并且它们在一个有组织的流程（“流程”）中实现，以实现流程所追求的商业目标。'
- en: As explained in the introduction, business processes are everywhere in an organization,
    as an “enterprise” is – by definition – a group of people with a means to achieve
    a goal that cannot be reached alone. Processes are the ways an enterprise achieves
    these goals. There is generally a main strategic goal that explains that several
    processes are, in fact, necessary. For example, the strategic objective of a company
    may be to become the world leader in the editing and publication of software books.
    Its strategy could be, for example, to cover all possible subjects in great detail,
    by employing many different expert authors. Working out how this is going to be
    realized requires several smaller, operational objectives. In our example, this
    means a good recruitment process, since finding the right experts for all the
    software subjects will require a well-organized approach. Another operational
    process will be the follow-ups of writing, enlisting editors, correctors, proofreaders,
    and so on.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如引言中所述，业务流程在组织中无处不在，因为“企业”按定义是一群人，他们拥有实现一个目标的方法，这个目标单靠他们是无法实现的。流程是企业实现这些目标的方式。通常有一个主要战略目标，解释了为什么几个流程实际上是必要的。例如，公司的战略目标可能是成为软件书籍编辑和出版的世界领导者。其战略可能包括，例如，通过雇佣许多不同的专家作者，详细涵盖所有可能的主题。制定如何实现这一点需要几个较小的、操作性的目标。在我们的例子中，这意味着一个良好的招聘流程，因为为所有软件主题找到合适的专家需要一种有组织的做法。另一个操作流程将是写作的跟进，包括编辑、校对员、校对员等。
- en: 'This kind of process is the first one we generally think of because it is directly
    oriented toward the goal, which here is to produce and sell books. There are two
    other kinds of business processes, though:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的流程是我们通常首先想到的，因为它直接面向目标，在这里是生产和销售书籍。尽管如此，还有两种其他类型的商业流程：
- en: '**Support processes** are all business workflows necessary so that the company
    goes on working, without being directly related to the goal of the company. In
    profit-oriented companies, paying employees’ salaries is not the strategic objective;
    it is absolutely necessary to keep the company and the processes running, but
    it is not the reason why the company was created. These processes that are not
    established as goals of the company but are necessary for it to realize these
    goals are called supporting processes.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**支持流程**是所有必要的商业工作流程，以便公司能够继续运营，而这些工作流程与公司的目标没有直接关系。在以盈利为导向的公司中，支付员工的薪水不是战略目标；绝对有必要保持公司和流程的运行，但这不是公司成立的原因。这些不是作为公司目标建立的，但对于实现这些目标来说是必要的流程，被称为支持流程。'
- en: '**Piloting processes** are the ones that deal with the governance and analysis
    of the other workflows. One such workflow is the analysis of the activity indicators
    of the company. Another process that can be classified as “piloting” is the management
    of quality, which covers all operational processes and has the goal of continuously
    improving how efficient they are. Governance or piloting processes, just like
    support processes, are not directly operational. The difference with piloting
    processes is that they sit on top of all other processes, whereas support processes
    are dependencies for the operational processes.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**试点流程**是处理其他工作流程治理和分析的流程。其中一种工作流程是分析公司的活动指标。另一个可以归类为“试点”的流程是质量管理，它涵盖所有运营流程，目标是持续提高其效率。治理或试点流程，就像支持流程一样，不是直接运营的。与试点流程的区别在于，它们位于所有其他流程之上，而支持流程是运营流程的依赖。'
- en: Granularity in the processes
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 流程的粒度
- en: As we just saw, there often is a main, high-level, strategic objective for an
    organization, and several processes are necessary to realize the different lower-level
    objectives necessary to reach the high-level goal. When grouping the processes
    at such a large granularity, we often talk about macro-processes, because they
    are very general. They are easy to define as such because their objective is not
    a concrete deliverable outcome but a general idea of what a company does. For
    example, one could talk about “commerce” and “production” as macro-processes,
    because their outcomes are very general, respectively getting money from sales
    and producing goods or services. It is hard to say how we could really achieve
    this in detail.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们刚才看到的，一个组织通常有一个主要的高层次战略目标，并且需要几个流程来实现达到高层次目标所需的各个较低层次的目标。当以如此大的粒度对流程进行分组时，我们通常谈论宏观流程，因为它们非常通用。它们很容易被定义为这样的，因为它们的目的是一个具体的可交付成果，而是一个公司做什么的一般想法。例如，可以谈论“商业”和“生产”作为宏观流程，因为它们的成果非常通用，分别是通过销售获得资金和生产商品或服务。很难说我们如何真正详细地实现这一点。
- en: When talking about business processes, in contrast to macro-processes, the outcome
    is quantifiable. For example, producing a car is a business process because we
    can count how many cars leave the factory in a week. Writing software is another
    example of a business process because the outcome is the release of a piece of
    software, together with the ways to exploit it (documentation, setup software,
    etc.). The tasks that compose the business processes are associated with a type
    of actor, such as “assembling the engine,” “writing the summary of the book,”
    or “producing a commercial quote.” This is how they differ from macro-process
    where a single part of the process can necessitate many different profiles, such
    as “product marketing” or “invoicing”. Units inside a macro-process can be business
    processes. In our editing example, the macro-process of “producing books” needs
    a business process to recruit authors, another one to supervise their writing,
    and yet another one to correct the book.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当谈论业务流程时，与宏观流程相比，其结果是可量化的。例如，生产汽车是一个业务流程，因为我们能计算一周内有多少辆车离开工厂。编写软件是另一个业务流程的例子，因为其结果是发布一款软件，以及如何利用它（文档、设置软件等）。构成业务流程的任务与一种类型的参与者相关联，例如“组装发动机”、“撰写书籍摘要”或“制作商业报价”。这就是它们与宏观流程的不同之处，在宏观流程中，流程的某个部分可能需要许多不同的角色，例如“产品营销”或“开票”。宏观流程内部的单元可以是业务流程。在我们的编辑示例中，“生产书籍”的宏观流程需要招聘作者的业务流程，另一个是监督他们的写作，还有一个是校对书籍。
- en: 'The same idea of level-based decomposition and granularity of processes can
    be observed one level down, by decomposing the different items of a business process
    into detailed steps, which themselves constitute another process, this time a
    fine-grained one, often called a “procedure”. This time, the procedure not only
    states the tasks that have got to take place for each actor, but the precise operation
    that each of them has to carry out to realize a given task of the business process.
    For example, inside the business process of “selling a book”, there may be a task
    called “sending an invoice”. A detailed procedure for this task would be, for
    example, composed of the following “elements of procedure”:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将业务流程的不同项目分解成详细的步骤，可以在一个层次下观察到基于级别的分解和流程的粒度。这些步骤本身又构成了另一个流程，这次是一个细粒度的流程，通常被称为“程序”。这次，程序不仅说明了每个参与者必须完成的任务，而且还精确地说明了他们必须执行的操作来实现业务流程中的特定任务。例如，在“销售书籍”的业务流程中，可能有一个名为“发送发票”的任务。这个任务的详细程序可能由以下“程序要素”组成：
- en: Every month, list all the customers that have ordered books.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个月列出所有订购书籍的客户。
- en: For each customer, gather all books and quantities that have been sent from
    the stock database.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每位客户，从库存数据库中收集所有已发送的书籍和数量。
- en: Check that the packages have indeed been sent.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 核实这些包裹确实已经发出。
- en: Verify the discount agreement with this customer.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 核实与该客户的折扣协议。
- en: Calculate the total amount due for the books sent.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计算已发送书籍的总金额。
- en: Subtract possible credits that the customer may have due to book returns or
    warranties.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 减去客户可能因书籍退货或保修而应得的信用额度。
- en: Enter all this data into the “invoice” template.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有这些数据输入到“发票”模板中。
- en: Print two copies and store one at the accounting office.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印两份副本，并将其中一份存放在会计办公室。
- en: Send out the other copy to the customer using its billing address.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用客户的账单地址将另一份副本发送给客户。
- en: This last example may seem a little bit old-fashioned in the virtual world we
    live in today, filled with Customer Relationship Management (CRM) and Enterprise
    Resource Planning (ERP) systems, selling only e-books and ordering/invoicing online.
    The reason why this example is used is two-fold. First, as has been explained
    previously, it is always interesting in business/IT alignment to consider a problem
    by removing anything related to IT. This allows us to concentrate only on the
    functional problem and understand it in its most intricate details before thinking
    about implementing it technically. This way, software-based hypotheses, which
    can lead to coupling, are left out of the scope, at least in the first analysis.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们今天这个充满客户关系管理（CRM）和企业资源规划（ERP）系统、只销售电子书并在网上订购/开票的虚拟世界中，这个最后的例子可能显得有些过时。使用这个例子有两个原因。首先，正如之前所解释的，在业务/IT对齐中，通过去除与IT相关的任何内容来考虑问题总是很有趣。这使我们能够只关注功能问题，并在考虑技术实现之前，从最复杂的细节来理解它。这样，基于软件的假设，这些假设可能导致耦合，至少在第一次分析中，被排除在范围之外。
- en: 'The second reason for showing such an old procedure is to illustrate how the
    software implementation of business processes has led us to almost forget them.
    There are good chances that when reading this list of steps, you thought, “No
    one does this manually anymore.” And you would be right: all these operations
    are mostly done by ERPs and dedicated invoicing software applications nowadays.
    But… there has to be at least one person who knows about these steps, and this
    is the person who will design these software applications! As this is what this
    book is about, it is important – once again – to start from a pure and correct
    understanding of the business aspects before trying to implement them in an information
    system.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 展示这样一个过时的程序的第二原因是，为了说明软件实现业务流程是如何让我们几乎忘记它们的。有很大可能性，当阅读这个步骤列表时，你会想，“没有人再手动做这些了。”你会是对的：现在所有这些操作大多由ERP和专门的发票软件应用完成。但是……必须至少有一个人了解这些步骤，这个人将设计这些软件应用！由于这本书正是关于这个的，因此——再次强调——在尝试在信息系统实现它们之前，从纯和正确的业务理解开始是非常重要的。
- en: Also, establishing this detailed procedure before automating it will allow you
    to gain some insights from business experts. For example, someone from accounting
    will tell you that you forgot about multiple VAT rates you will have to deal with
    if you want to sell internationally. Another person will add that credits should
    not be taken into account if the customer has a debt towards you. Yet another
    colleague may argue that, in some cases, the payer for the order might be a different
    legal person than the one who should receive the invoice. And so on…
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在自动化之前建立这个详细的程序将允许你从业务专家那里获得一些见解。例如，来自会计部门的人会告诉你，如果你想要在国际上销售，你必须处理多个增值税率。另一个人会补充说，如果客户欠你债务，则不应考虑信用。还有另一位同事可能会争论，在某些情况下，订单的付款人可能是一个不同于应该接收发票的法人。等等……
- en: The very principle of processes containing some other processes as detailed
    explanations of a single task is one of the important concepts in the business
    process modeling approach and we will see in this chapter how this can be detailed
    in a formalized way. The three main levels are macro-processes, business processes,
    and procedure but, depending on the context, some other levels may appear.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 流程包含其他流程作为单个任务的详细说明的原理是业务流程建模方法中的重要概念之一，我们将在本章中看到如何以正式化的方式详细说明这一点。三个主要级别是宏观流程、业务流程和程序，但根据上下文，可能还会出现其他级别。
- en: Limits of the processes
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 流程的限制
- en: If you have been exposed to business processes in an organization as an actor
    in a given task, there are strong chance that you have a bad opinion about them.
    Business processes have suffered from a bad reputation because of many badly-led
    implementations. There are many ways of missing the point with processes and doing
    more harm than good, but let’s start with the way that works. If you want to improve
    your organization with process management, the very first rule is that the processes
    should always reflect what happens in reality.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你作为一个特定任务中的参与者在一个组织中接触过业务流程，那么你很可能对它们有不好的看法。由于许多实施不当，业务流程一直遭受着坏名声。有很多方法会导致流程偏离重点，造成更多的伤害而不是好处，但让我们从有效的方法开始。如果你想通过流程管理来改善你的组织，最基本的规则是流程应该始终反映现实中的情况。
- en: 'This might sound obvious at the beginning of the process design: most process
    designers will start by looking at what happens in the organization to draw up
    the process. Yet, there still are some organization leaders who think they know
    better how operational people work and will create a process that is not based
    on reality. This, of course, leads to useless processes, and this is why Gemba
    is one of the important concepts in the Lean method, designating the place where
    the value is created. In industrial organizations, that means going to the factory
    floor to understand what really happens.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在流程设计初期，这听起来可能很显然：大多数流程设计者会首先观察组织中的情况来制定流程。然而，还有一些组织领导者认为他们比运营人员更了解工作方式，并创建了一个不符合现实的流程。这当然会导致无用的流程，这也是为什么Gemba是精益方法中的重要概念之一，表示价值创造的地方。在工业组织中，这意味着去工厂车间了解真正发生的事情。
- en: 'Another fallacy is to believe that, once the process is well established, improvements
    will flow from optimizing its representation. This is a much-observed sequence:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个谬误是认为，一旦流程建立得很好，改进就会从优化其表示中流出。这是一个常见的顺序：
- en: A process analyst observes the work of an operational team.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 流程分析师观察运营团队的工作。
- en: The process is drawn up and correctly reflects the actual work.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 流程被制定出来，并且正确地反映了实际工作。
- en: The process analyst detects a possible optimization in the process.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 流程分析师在流程中发现了可能的优化点。
- en: An improved version of the process is designed.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设计了流程的改进版本。
- en: The team goes on working with the existing process and no improvement is observed
    in reality.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 团队继续使用现有的流程工作，现实中没有观察到任何改进。
- en: This is simply another case where one forgets that the process should always
    reflect what happens in reality. The process analysis might find some place for
    improvement but the only way to achieve improvement is when the operational team
    takes this into account and discerns – by itself and within its own organization
    – how to alter its way of working to avoid the problem. Once this is done (and
    most of the time, the solution found by the team will be different from the one
    imagined by the solution analyst), the process should be updated to account for
    the modification done by the operational team and to keep on reflecting it.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个例子，其中人们忘记了过程应该始终反映现实中的发生情况。过程分析可能会找到一些改进的地方，但实现改进的唯一方法是在运营团队考虑到这一点并自行判断——在其自身组织内部——如何改变其工作方式以避免问题。一旦这样做（而且大多数时候，团队找到的解决方案将与解决方案分析师想象的解决方案不同），过程应该更新以反映运营团队所做的修改，并继续反映它。
- en: 'The worst that can happen is when a business analyst has hierarchical power
    over the operational team and tries to force them into following a process that
    comes out of pure analysis and does not come from operational observation. Except
    purely randomly, there is no chance this process will have a positive effect and
    improve the way that people actually work. What will happen is the contrary: working
    with an unadapted process will lower the operational team’s morale and increase
    the likelihood of people going around the process, or even failing to realize
    the task by finding a flaw in the process and voluntarily acting on it to show
    how bad the process is. Sounds crazy, doesn’t it? Yet it happens every day in
    many companies, simply because people use processes in a bad way, thinking that
    theoretically knowing them can lead to an improvement “on paper.” Processes get
    a bad reputation in this kind of situation, where they are thought to be more
    important or more correct than the actors themselves.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 最糟糕的情况是，当业务分析师对运营团队拥有层级权力，并试图强迫他们遵循一个纯粹来自分析而非来自运营观察的流程时。除非纯粹随机，否则这种流程不可能产生积极效果并改善人们实际工作的方式。会发生的情况正好相反：与不适应的流程一起工作将降低运营团队的士气，并增加人们绕过流程或甚至通过在流程中找到缺陷并主动采取行动来展示流程有多糟糕的可能性。听起来疯狂，不是吗？然而，这种情况每天都在许多公司发生，仅仅是因为人们以错误的方式使用流程，认为理论上了解它们可以导致“纸上”的改进。在这种情况下，流程会获得坏名声，因为人们认为它们比行动者本身更重要或更正确。
- en: Again, processes can only be a representation of what happens in a real, concrete
    organization. They may be a great tool to uncover bottlenecks, design solutions,
    and even in some cases simulate them. But the only reality always comes from the
    factory floor and processes can never be more than a useful representation of
    people’s actual work.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，流程只能是对真实、具体组织中发生情况的表示。它们可能是一个很好的工具，用于揭示瓶颈、设计解决方案，甚至在某些情况下模拟它们。但唯一真实的现实总是来自工厂车间，流程永远不能超过对人们实际工作的有用表示。
- en: Business process modeling
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 业务流程建模
- en: The previous section may make you think that processes are a bad tool, and indeed,
    they often are. But that does not mean that they cannot be correctly used and
    their advantages, when doing so, are numerous. First, they are a great visual
    way to communicate around coordinated work for a team. Just like a Kanban board
    is a visual way to share a common view of the advancement of a project, a well-formulated
    process is a great way to share a common understanding of how a team works together.
    When a team comes together around a process description, there is almost never
    a case where it doesn’t lead to an interesting optimization, whether this is by
    better sharing the information (“I did not know you were the person doing this
    task; next time, I will inform you directly of this situation that might affect
    your step in the process”) or by proposing different ways of doing things (“What
    if I passed the information directly to the actor after your job? Since they are
    not dependent on your output, they could start right away and the total cycle
    time would be reduced”).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 前一节可能会让你认为流程是一个糟糕的工具，确实，它们通常是这样的。但这并不意味着它们不能被正确使用，并且当这样做时，它们的优点是众多的。首先，它们是团队围绕协调工作进行沟通的一种很好的视觉方式。就像看板是一个共享项目进展共同视图的视觉方式一样，一个制定良好的流程是分享团队如何共同工作的一种很好的方式。当团队围绕流程描述聚集在一起时，几乎从未有过不导致有趣优化的情况，无论是通过更好地共享信息（“我不知道你是做这个任务的人；下次，我会直接通知你这种情况，这可能会影响你在流程中的步骤”）还是通过提出不同的做事方式（“如果我在你完成任务后直接将信息传递给执行者呢？由于他们不依赖于你的输出，他们可以立即开始，总周期时间将会减少”）。
- en: '“Visualization,” “drawn,” “visual way”: all these terms clearly indicate that
    a process should be a graphical reality and, guess what? I am sure you have already
    drawn many processes in your life without even knowing you did so. How about this
    simple diagram?'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: “可视化”、“绘制”、“视觉方式”：所有这些术语都清楚地表明流程应该是一个图形化的现实，猜猜看？我相信你肯定在不知道的情况下已经绘制了许多流程。比如这个简单的图？
- en: '![Figure 11.1 – An extremely simple example of a process diagram](img/B21293_11_1.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图11.1 – 一个极其简单的流程图示例](img/B21293_11_1.jpg)'
- en: Figure 11.1 – An extremely simple example of a process diagram
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.1 – 一个极其简单的流程图示例
- en: 'This is already a process diagram, even if an admittedly very simple one: it
    contains two tasks; they are coordinated (the arrow shows that the second task
    should be done after the first one is complete); and they are done in order to
    reach an objective, namely getting paid for books.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这已经是一个流程图，即使是一个不可否认的非常简单的流程图：它包含两个任务；它们是协调的（箭头显示第二个任务应该在第一个任务完成后进行）；并且它们是为了达到一个目标而完成的，即通过书籍获得报酬。
- en: '**Business Process Modeling** or **Business Process Management** (you will
    find both decompositions used for the **BPM** acronym) are about formalizing such
    processes in a way that any organization process can be described in detail and
    that the process descriptions can be used for more than just graphical representations,
    which means, for example, clear communication about the tasks of every actor,
    change impact analysis, or process optimization, and so on. When talking about
    formalization, you should normally have the reflex by now to think of a norm or
    standard that would help this. The good news is that these exist; the bad news
    is that they were so numerous that it took almost two decades in order to reach
    a point where a single standard is complete and widely accepted as the reference
    for BPMN.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**业务流程建模**或**业务流程管理**（你将发现这两个分解都用于**BPM**的缩写）是关于以某种方式正式化这些流程，使得任何组织流程都可以详细描述，并且流程描述可以用于不仅仅是图形表示，这意味着，例如，关于每个执行者的任务的清晰沟通，变更影响分析，或流程优化等等。当谈到正式化时，你现在应该有条件反射地想到一个规范或标准，这将有助于这一点。好消息是，这些确实存在；坏消息是，它们如此之多，以至于几乎花了近二十年的时间才达到一个单一代码完整且被广泛接受作为BPMN参考点的程度。'
- en: The history of BPM standards
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: BPM标准的历程
- en: 'There have been so many approaches in software text-based representation of
    processes that the evolution of those tentative standards and their cooperation,
    competition, and crossovers can be represented as complex chronological diagrams
    that are almost impossible to display on a single page. You will easily find those
    diagrams with an internet search, but since all of this dates back ten years or
    so, there is simply no use in reproducing it here. What might possibly still be
    useful is to trace the big milestones in this work:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件文本化流程表示方面有如此多的方法，那些尝试性标准的演变以及它们的合作、竞争和交叉可以表示为复杂的时序图，这些图几乎不可能在一页上显示。您可以通过网络搜索轻松找到这些图，但由于所有这些都是在大约十年前发生的，所以在这里重新呈现它们毫无意义。可能还有一点有用的是，追踪这项工作中的重大里程碑：
- en: In 2000, the WfMC consortium created WPDL 1.0, having started the design in
    1997.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2000年，WfMC联盟创建了WPDL 1.0，该设计始于1997年。
- en: A few years later, it adopted the then-new XML approach and created Wf-XML 1.0,
    followed by a few other versions.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 几年后，它采用了当时的新XML方法，创建了Wf-XML 1.0，随后又推出了一些其他版本。
- en: WPDL itself evolved into an XML-based grammar called XPDL, which was also developed
    into later versions by WfMC, reaching 2.2 in 2009\. This made for an awkward situation
    where two standards were proposed by the same organization.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WPDL本身演变成了一种基于XML的语法，称为XPDL，WfMC也在此基础上开发了后续版本，到2009年达到了2.2版本。这导致了一个尴尬的局面，即同一个组织提出了两个标准。
- en: Meanwhile, another consortium called BPMI created BPMN around the same time
    as WPDL was released in the early 2000s. **BPMN** stands for **Business Process
    Modeling Notation**. This standard itself reached 1.0 in 2004 and is about representing
    any process.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同时，另一个名为BPMI的联盟在2000年代初WPDL发布的同时创建了BPMN。**BPMN**代表**业务流程建模符号**。这个标准本身在2004年达到了1.0版本，是关于表示任何流程的。
- en: At the same time, IBM was working on WSFL, which evolved under a joint effort
    with Microsoft and BEA into BPEL4WS in 2002\. **BPEL** stands for **Business Process
    Execution Language**, and takes a bit of a different approach than BPMN, as it
    insists on the execution of the process and not its representation. BPEL4WS targets
    web services as the means of execution of the processes.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同时，IBM正在开发WSFL，在微软和BEA的共同努力下，于2002年演变成BPEL4WS。**BPEL**代表**业务流程执行语言**，与BPMN采取的方法略有不同，因为它强调的是流程的执行而不是其表示。BPEL4WS将Web服务作为流程执行的手段。
- en: OMG is another consortium that is famous for its definition of **Unified Modeling
    Language** (**UML**). This consortium took care of the evolution of BPMN by replacing
    BPMI in 2006 in this work and releasing BPMN 1.1 in 2008\. BPMN exchanged concepts
    with XPDL, rendering the latter less useful in time.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OMG是另一个以其定义**统一建模语言**（**UML**）而闻名的联盟。这个联盟负责BPMN的演变，2006年取代了BPMI，并在2008年发布了BPMN
    1.1。BPMN与XPDL交换了概念，使得后者随着时间的推移变得不那么有用。
- en: OASIS, another well-known consortium, used the same approach for hosting the
    works on BPEL4WS 1.1 and supervised the transformation into WS-BPEL 2.0 in 2007\.
    OASIS had an older standard called ebXML, which was integrated into WS-BPEL 2.0.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OASIS是另一个知名的联盟，它采用了相同的方法来托管BPEL4WS 1.1的工作，并在2007年监督了其转换为WS-BPEL 2.0。OASIS有一个更早的标准，称为ebXML，它被整合到了WS-BPEL
    2.0中。
- en: The lack of support for human activity gave birth to BPEL4People in order to
    complement WS-BPEL 2.0.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于缺乏对人类活动的支持，BPEL4People应运而生，以补充WS-BPEL 2.0。
- en: In 2010, OMG released BPMN 2.0, which effectively grouped most of the concepts
    of the existing standards for business process representation into one XML-based
    grammar.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2010年，OMG发布了BPMN 2.0，有效地将现有标准中用于业务流程表示的大多数概念整合到一个基于XML的语法中。
- en: The BPMN 2.0 standard
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: BPMN 2.0标准
- en: While XPDL continued to evolve for some years after the birth of BPMN 2.0, and
    WS-BPEL 2.0 is still used but only for process-driven execution of web services,
    BPMN 2.0 is generally considered the go-to standard for process representation
    nowadays. Its versatile approach makes it able to model virtually any human or
    machine process from any kind of organization, thus making it possible to apply
    all operations in formats such as visual representation, of course, but also process
    optimization, transformation, and monitoring with dedicated tools. Execution is
    also possible, since the format is very generic, which makes BPMN 2.0 a serious
    contender for even specialized standards such as WS-BPEL 2.0\. Since the latter
    is also coupled to the web service stack, which is largely considered outdated
    in favor of REST API approaches, it looks very much like BPMN 2.0 is the standard
    to learn if you need to use software-based processes.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在 BPMN 2.0 诞生后的几年里，XPDL 继续发展，WS-BPEL 2.0 仍然在使用，但仅用于 Web 服务的流程驱动执行，但 BPMN 2.0
    通常被认为是当今流程表示的首选标准。其灵活的方法使其能够模拟任何类型组织的任何人类或机器流程，从而使得在诸如视觉表示、流程优化、转换和监控等格式中应用所有操作成为可能。由于格式非常通用，执行也是可能的，这使得
    BPMN 2.0 成为 WS-BPEL 2.0 等专业标准的强劲竞争对手。由于后者还与 Web 服务堆栈耦合，而 Web 服务堆栈在很大程度上被认为过时，更倾向于
    REST API 方法，因此，如果需要使用基于软件的流程，学习 BPMN 2.0 标准看起来是非常必要的。
- en: You will find plenty of resources on the internet to learn about BPMN 2.0 and
    how to design processes with this standard. If you need a starting place, there
    is a great poster containing – in a single image – all concepts of BPMN 2.0 and
    explaining them all including their relationships to each other, which can be
    found at [http://bpmb.de/index.php/BPMNPoster](http://bpmb.de/index.php/BPMNPoster).
    Nothing can be clearer and more concise than this graphical sheet but I will nonetheless
    provide a few quick explanatory notes about the main concepts of BPMN 2.0 as follows,
    in order to make it more accessible to follow the examples in the rest of this
    chapter.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在互联网上找到大量关于 BPMN 2.0 以及如何使用该标准设计流程的资源。如果你需要一个起点，有一张非常好的海报，其中包含 BPMN 2.0 的所有概念，并以单一图像的形式解释它们，包括它们之间的关系，可以在
    [http://bpmb.de/index.php/BPMNPoster](http://bpmb.de/index.php/BPMNPoster) 找到。没有什么比这张图形表格更清晰、更简洁了，但我仍将提供一些关于
    BPMN 2.0 主要概念的简要说明，如下，以便更容易地跟随本章后面的示例。
- en: 'Let’s start with the simplest BPMN diagram possible:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从可能的最简单的 BPMN 图开始：
- en: '![Figure 11.2 – Simplest BPMN diagram](img/B21293_11_2.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.2 – 最简单的 BPMN 图](img/B21293_11_2.jpg)'
- en: Figure 11.2 – Simplest BPMN diagram
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.2 – 最简单的 BPMN 图
- en: It contains a start event, a task, and an end event. The events have been labeled
    with text, but this is not mandatory, as their representation is enough to distinguish
    them. The task needs some text, though, and the convention is to always use a
    verb in its imperative form to describe the task.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 它包含一个开始事件、一个任务和一个结束事件。事件已用文本标记，但这不是强制性的，因为它们的表示足以区分它们。不过，任务需要一些文本，惯例是始终使用祈使句形式的动词来描述任务。
- en: 'The text representation of this process is the following (as output by the
    Camundi design tool – available online at [https://demo.bpmn.io/](https://demo.bpmn.io/)
    – that I have used for most of this book’s figures):'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 该流程的文本表示如下（由 Camundi 设计工具输出，该工具可在 [https://demo.bpmn.io/](https://demo.bpmn.io/)
    上在线获取，我已用它制作了本书的大部分图表）：
- en: '[PRE0]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This may appear quite complex because the XML-based BPMN grammar is quite verbose,
    but it is the smallest possible file, as it represents the process above, consisting
    of only one task.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能看起来相当复杂，因为基于 XML 的 BPMN 语法相当冗长，但它是最小的文件，因为它表示上面的流程，仅包含一个任务。
- en: Note that only the first part of the file is an actual BPMN standard representation,
    as can be seen by the use of `bpmn:` prefixes, associated in the header to the
    [http://www.omg.org/spec/BPMN/20100524/MODEL](http://www.omg.org/spec/BPMN/20100524/MODEL)
    namespace. The rest of the file, where the tags are prefixed with `bpmndi`, corresponds
    to proprietary additions from Camundi in order to overload the graphical positioning
    of the elements.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，文件的前一部分是实际的 BPMN 标准表示，这可以通过使用 `bpmn:` 前缀来看到，这些前缀与标题中的 [http://www.omg.org/spec/BPMN/20100524/MODEL](http://www.omg.org/spec/BPMN/20100524/MODEL)
    命名空间相关联。文件的其他部分，其中标签以 `bpmndi` 前缀开头，对应于 Camundi 的专有扩展，用于覆盖元素的图形定位。
- en: 'Without going into too many details, one can notice in the first part of the
    XML representation the following:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 不深入细节，可以在 XML 表示的第一部分注意到以下内容：
- en: As said previously, the representation clearly states what an event is and what
    a task is, even precisely what kind of event is used
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如前所述，表示法清楚地说明了事件和任务是什么，甚至精确地说明了使用了哪种类型的事件
- en: All entities receive a unique identifier, which makes it possible to link them
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有实体都接收一个唯一的标识符，这使得它们可以相互链接
- en: Flows (which correspond to the arrows in the visual diagram) are also represented
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流（在视觉图表中对应于箭头）也被表示出来
- en: There is volunteer duplication of information between the `incoming/outcoming`
    attributes and the `sourceRef/targetRef` attributes
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `incoming/outcoming` 属性和 `sourceRef/targetRef` 属性之间存在信息重复
- en: 'There is an important notion in BPMN, namely that an activity may be a task
    but also a sub-process itself made of several activities. This allows us to implement
    the different levels of granularity we talked about above. It is thus possible,
    in the BPMN standard, to represent a business process where an activity is described
    in a very generic manner like the following:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在 BPMN 中有一个重要的概念，即活动可能是一个任务，也可能是一个由多个活动组成的子流程本身。这使我们能够实现上面提到的不同粒度级别。因此，在 BPMN
    标准中，可以表示一个业务流程，其中活动以非常通用的方式描述，如下所示：
- en: '![Figure 11.3 – Representation of a collapsed sub-process](img/B21293_11_3.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.3 – 收缩子流程的表示](img/B21293_11_3.jpg)'
- en: Figure 11.3 – Representation of a collapsed sub-process
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.3 – 收缩子流程的表示
- en: 'And, if the tool supports it, the diagram can be simply expanded into the full
    definition of the content, which provides the following representation:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果工具支持的话，图表可以简单地扩展到内容的完整定义，提供以下表示：
- en: '![Figure 11.4 – Expanded representation of a sub-process](img/B21293_11_4.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.4 – 子流程的扩展表示](img/B21293_11_4.jpg)'
- en: Figure 11.4 – Expanded representation of a sub-process
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.4 – 子流程的扩展表示
- en: 'In the BPMN standards, tasks can be decorated with an icon that specifies how
    they will be operated:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在 BPMN 标准中，任务可以用一个图标来装饰，以指定它们的操作方式：
- en: '![Figure 11.5 – Different kinds of tasks](img/B21293_11_5.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.5 – 不同类型的任务](img/B21293_11_5.jpg)'
- en: Figure 11.5 – Different kinds of tasks
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.5 – 不同类型的任务
- en: 'Events can also be specialized to account for time-based, message-driven, or
    other kinds of events:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 事件也可以被专门化，以考虑基于时间、消息驱动或其他类型的事件：
- en: '![Figure 11.6 – Example of specialized events](img/B21293_11_6.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.6 – 专门化事件的示例](img/B21293_11_6.jpg)'
- en: Figure 11.6 – Example of specialized events
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.6 – 专门化事件的示例
- en: 'If several actors are needed for a given process, they are drawn with what
    resemble – and as described by the official jargon – swimming lanes in a pool:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个流程需要多个演员，它们会被绘制成类似游泳池中的泳道：
- en: '![Figure 11.7 – Using lanes in a process](img/B21293_11_7.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.7 – 在流程中使用泳道](img/B21293_11_7.jpg)'
- en: Figure 11.7 – Using lanes in a process
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.7 – 在流程中使用泳道
- en: 'The last essential concept to know in BPMN is the one of gateways. Gateways
    can derive the stream of a process depending on conditions, and also duplicate
    the sequences in a given portion of the workflow. Two main types of gateways are
    exemplified in the following diagram:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在 BPMN 中需要了解的最后一种基本概念是网关。网关可以根据条件推导出流程的流，也可以在工作流程的给定部分中复制序列。以下图表展示了两种主要的网关类型：
- en: '![Figure 11.8 – Two main types of gateways in BPMN](img/B21293_11_8.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.8 – BPMN 中的两种主要网关类型](img/B21293_11_8.jpg)'
- en: Figure 11.8 – Two main types of gateways in BPMN
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.8 – BPMN 中的两种主要网关类型
- en: The first type of gateway shown on the left-hand side is an exclusive gateway
    (symbol **X**), which means only one path can be used (in our example, the manuscript
    can be accepted or rejected by the editor). The second type, using a **+** symbol,
    is a parallel gateway, used to execute multiple tasks before joining and continuing
    the process when all of them are finished (in our example, when all marketing
    operations have been realized, the process reaches its end event).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧展示的第一种网关是排他网关（符号 **X**），这意味着只能使用一条路径（在我们的例子中，稿件可以被编辑接受或拒绝）。第二种，使用 **+** 符号，是并行网关，用于在所有任务完成并加入流程继续之前执行多个任务（在我们的例子中，当所有营销活动都实施完毕时，流程达到其结束事件）。
- en: There are many other things to know about BPMN, but this book is not the place
    to become proficient in using this standard format, so I will just stop with these
    very basic concepts that will be used afterward and advise you to get deeper into
    BPMN if it will help in the modeling of your organization’s business processes.
    If you doubt at some point that BPMN could correctly represent your activity,
    remember that 20 years of experts in consortiums have finally achieved the creation
    of a global standard that is thought to be able to formalize just about any possible
    assembly of human and computerized tasks. Some may be difficult to design but
    this is always because of a lack of knowledge of the standard. With a bit of practice,
    you will be able to model anything with BPMN, and this will, of course, bring
    a lot of value to your information system design activity, because this means
    that all functional activity in it will be detailed and formalized, which will
    highly favor the much-sought alignment of IT.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 关于BPMN还有很多其他需要了解的内容，但本书并不是让你精通使用这种标准格式的场所，所以我会只介绍这些非常基础的概念，这些概念将在之后被使用，并建议你在组织业务流程建模中需要深入了解BPMN。如果你在某些时候怀疑BPMN是否能够正确地表示你的活动，请记住，经过20年的专家在联盟中的努力，最终创建了一个全球标准，这个标准被认为能够形式化几乎任何可能的人类和计算机化任务的组合。有些可能很难设计，但这总是由于对标准的了解不足。通过一点实践，你将能够使用BPMN建模任何事物，这当然会给你的信息系统设计活动带来很多价值，因为这意味着其中的所有功能活动都将被详细和形式化，这将极大地有利于IT的寻求对齐。
- en: Business processes software-based execution
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于软件的业务流程执行
- en: 'As explained, using the BPMN standard already has great value in itself: the
    simple fact that you use a formalized way to represent your business processes
    will provide you with great insight and give rise to questions that you might
    have not thought about but that could become important issues once your information
    system is built if you have not taken them into account. But an additional value
    of BPMN is the capacity, once modeled, to execute your processes with the help
    of software, since the formalism of the representation makes it possible for machines
    to interpret the processes and even automatically execute instances of them.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 正如所解释的，使用BPMN标准本身就已经具有很大的价值：仅仅使用一种形式化的方式来表示你的业务流程，就会为你提供深刻的见解，并引发你可能未曾考虑但一旦信息系统建立时如果没有考虑它们可能会成为重要问题的疑问。但BPMN的另一个附加价值是，一旦建模，就可以借助软件执行你的流程，因为表示的形式化使得机器能够解释这些流程，甚至可以自动执行它们的实例。
- en: In this section, we will explain the principles behind BPMN and give a few examples
    related to our example information system to give a better understanding of these
    principles. Then, we will explain how BPMN diagrams are decomposed along roles
    and what kind of software we can use to model and run them. Finally, I will propose
    a small explanation as to why BPMN is not more used in the software industry.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将解释BPMN背后的原则，并给出一些与我们的示例信息系统相关的示例，以更好地理解这些原则。然后，我们将解释BPMN图是如何根据角色分解的，以及我们可以使用什么类型的软件来建模和运行它们。最后，我将简要解释为什么BPMN在软件行业中没有得到更广泛的应用。
- en: Principles
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原则
- en: 'The principles of business process execution are very simple: a piece of software
    called a BPM engine reads the XML-based BPMN-compliant representation of a business
    process and can start as many “instances” of this process as you wish. Once started,
    an instance will roughly have the following behavior:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 业务流程执行的原则非常简单：一个名为BPM引擎的软件读取基于XML的BPMN合规的业务流程表示，可以启动你想要的任意多个“实例”。一旦启动，一个实例将大致具有以下行为：
- en: The instance is saved on disk or to a database, and instances can be read and
    modified at the different steps of their development, which correspond to the
    advancement in the tasks that constitute the processes.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实例被保存在磁盘或数据库中，实例可以在它们发展的不同步骤中被读取和修改，这些步骤对应于构成流程的任务的进展。
- en: Each instance of a given process is completely separated from the other instances,
    though they execute the same process definition. How the process is executed in
    the instances may radically differ depending on how gateways are passed.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个给定过程的实例与其他实例完全分离，尽管它们执行的是相同的过程定义。实例中过程的执行方式可能会根据网关的通过方式而根本不同。
- en: Once started, an instance follows the process as it was designed at its moment
    of creation. If the process design evolves afterwards, all running instances will
    go on with the old version, in order to keep workflow consistency.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦启动，实例将遵循其创建时刻设计的流程。如果流程设计之后有所演变，所有正在运行的实例将继续使用旧版本，以保持工作流程的一致性。
- en: 'Every task in the flow is “executed” by the engine. The actual execution of
    the step depends on its type and on how the engine is configured to handle it:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 流程中的每个任务都是由引擎“执行”的。实际执行步骤取决于其类型以及引擎如何配置来处理它：
- en: When a service task is reached, the execution is supposed to be automatic. An
    API can be called or a connector to an application, and so on.
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当达到服务任务时，执行应该是自动的。可以调用API或连接到应用程序等。
- en: When a manual task is reached, the engine warns the user that something needs
    to be done by them. This can be done by a notification through email or any other
    channel. When the user has finished the task, they are usually invited to inform
    the BPM engine about this, so that the execution of the instance of the process
    can go on.
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当达到手动任务时，引擎会提醒用户需要他们完成某些操作。这可以通过电子邮件或其他渠道的通知来完成。当用户完成任务后，他们通常会被邀请通知BPM引擎，以便流程实例的执行可以继续。
- en: When a user task is reached, the user is also informed but since the action
    expected is to fill in a form or at least realize something on a machine, a pointer
    to the required form can be provided in order to speed up the action.
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当达到用户任务时，用户也会被告知，但由于预期的操作是填写表格或至少在机器上实现某些操作，可以提供一个指向所需表格的指针，以加快操作速度。
- en: 'If the engine encounters a gateway, it will react differently depending on
    its type:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果引擎遇到网关，它将根据其类型以不同的方式反应：
- en: If this is a parallel gateway, all subsequent tasks will be run and the engine
    will take care of waiting for all paths to finish before running the rest of the
    process.
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果这是一个并行网关，所有后续任务都将运行，并且引擎将负责等待所有路径完成后再运行流程的其余部分。
- en: If this is an exclusive gateway, the decision engine (we will come back to this
    in more detail in the next chapter) will be activated and the execution of the
    business rules will define which branch should be taken.
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果这是一个排他网关，决策引擎（我们将在下一章更详细地讨论这一点）将被激活，业务规则的执行将定义应该采取哪个分支。
- en: On some advanced engines, notifications can be designed in order for stale process
    instances to emit a warning to a functional administrator, in order for them to
    get things done.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一些高级引擎中，可以设计通知，以便过时的流程实例向功能管理员发出警告，以便他们完成任务。
- en: When the end event is reached, the process instance is considered as finished
    and archived. It is not possible to execute anything in it, but it is kept for
    statistics or traceability reasons.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当达到结束事件时，流程实例被视为完成并归档。在其中无法执行任何操作，但它被保留用于统计或可追溯性原因。
- en: Application to our example information system
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将应用于我们的示例信息系统
- en: The best way to comprehend a technology is with examples, and this is why we
    have followed an example of information system design from the beginning of the
    book. Let’s come back to `DemoEditor` and take a look at what business processes
    could be designed – and maybe even automated.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 理解技术的最佳方式是通过示例，这就是为什么我们从本书的开头就遵循了一个信息系统设计的示例。让我们回到`DemoEditor`，看看可以设计哪些业务流程——也许甚至可以自动化。
- en: 'The first example will show how processes accumulate data throughout their
    execution. After all, processes in IT systems most of the time are about creating
    or gathering data. A book is a piece of data, sales are data even if their main
    goal is to bring money to the company, and so on. A process can be seen as a series
    of tasks that create (or not) data. By the end of the process, enough data has
    been created or retrieved to obtain the objective of the process, at least in
    its instance. In the following example, we request information from an editor
    and ask an author to complete this information because the goal of the process
    is to publish complete information about a new author:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个示例将展示流程在其执行过程中如何积累数据。毕竟，IT系统中的流程大多数时候都是关于创建或收集数据。一本书是一份数据，销售也是数据，即使它们的主要目标是为公司带来金钱，等等。流程可以被视为一系列创建（或不创建）数据的任务。到流程结束时，已经创建了足够的数据或检索到了数据，以实现流程的目标，至少在其实例中是这样。在下面的示例中，我们从一个编辑那里请求信息，并要求作者完成这些信息，因为流程的目标是发布关于新作者的完整信息：
- en: '![Figure 11.9 – Example of BPMN for author enrolling](img/B21293_11_9.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.9 – 为作者注册的 BPMN 示例](img/B21293_11_9.jpg)'
- en: Figure 11.9 – Example of BPMN for author enrolling
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.9 – 为作者注册的 BPMN 示例
- en: 'The process should be self-explainable, so we are not going to give any details.
    A second example of a business process of `DemoEditor` is the following:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 流程应该是自我解释的，所以我们不会提供任何细节。`DemoEditor` 的第二个业务流程示例如下：
- en: '![Figure 11.10 – Example of BPMN for contract signing](img/B21293_11_10.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.10 – 为合同签署的 BPMN 示例](img/B21293_11_10.jpg)'
- en: Figure 11.10 – Example of BPMN for contract signing
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.10 – 为合同签署的 BPMN 示例
- en: 'This time, the collection of data may not be as obvious as in the previous
    process diagram, but we still can think of the process this way:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，数据的收集可能不像之前的过程图那样明显，但我们仍然可以这样思考流程：
- en: The first task collects a piece of data, namely the identity of the selected
    author
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个任务收集一些数据，即所选作者的标识
- en: The second one creates some data, because the contract draft will be a document,
    and thus constitutes electronic data
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个流程会创建一些数据，因为合同草案将是一份文档，因此构成了电子数据
- en: The third task may not produce functional data, but the simple fact that the
    author downloads the contract draft to possibly sign it is a signal nonetheless
    and produces data in the information system (even if very simple, such as a log)
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个任务可能不会产生功能性数据，但作者下载合同草案以供签署这一简单事实本身就是一个信号，并在信息系统中产生数据（即使非常简单，如日志）。
- en: How these processes will be executed in the example software will be part of
    [*Chapter 17*](B21293_17.xhtml#_idTextAnchor608). In the present chapter, we only
    show them as examples of what can be done with BPMN and why a BPM engine is one
    of the three parts of the utopic information system architecture described in
    [*Chapter 5*](B21293_05.xhtml#_idTextAnchor164). They also are going to be used
    in the rest of the present chapter to illustrate some points about process execution.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这些流程在示例软件中的执行方式将是 [*第 17 章*](B21293_17.xhtml#_idTextAnchor608) 的一部分。在本章中，我们只展示它们作为使用
    BPMN 可以做什么的示例，以及为什么 BPM 引擎是本章中描述的乌托邦信息系统架构的三个部分之一。它们也将在本章的其余部分用来说明关于流程执行的一些观点。
- en: Link to users
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 链接到用户
- en: Now is the good time to come back to a notion that had hitherto been covered
    a bit too swiftly. When talking about how complex diagrams featuring multiple
    participants are cut into “swimlanes” in a “pool” that the process represents,
    the notion of “actor” was introduced to explain that each of these lanes had to
    be associated (and, by convention, named after) an “actor.” It may sound like
    we are talking about a user, but an actor is more generic than this and should
    rather be associated with a group of users (what some would call a *profile*,
    even if this word is normally used to designate cohesive sets of authorizations,
    as in the “role” semantics in the **Role-Based Access** **Control** paradigm).
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是回到一个之前有点过于迅速覆盖的概念的好时机。当谈到如何将包含多个参与者的复杂图切割成流程所代表的“池”中的“泳道”时，引入了“参与者”这个概念来解释每个泳道都必须与一个“参与者”相关联（并且按照惯例，以该“参与者”命名）。这听起来像是在谈论用户，但参与者比这更通用，应该与一组用户相关联（有些人可能会称之为*配置文件*，即使这个词通常用来指代授权的紧密集合，如在**基于角色的访问控制**范式中的“角色”语义）。
- en: In the two preceding examples of BPMN diagrams (*Figures* *11.9* and *11.10*),
    the actors were `Editor` and `Author`. In the user directory, groups with equivalent
    names would normally be found. A good BPMN engine always includes a user directory
    supporting groups of users – or even better, can be plugged into a central enterprise
    directory, using for example the standardized LDAP protocol. This allows a level
    of indirection as when talking about the functional process, which specific author
    or editor we are referring to makes no difference. In the first example, a given
    editor will receive an agreement for enrollment and will then send a request for
    information to a given author.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在前两个 BPMN 图表示例（*图 11.9* 和 *图 11.10*）中，参与者是 `Editor` 和 `Author`。在用户目录中，通常可以找到具有等效名称的组。一个好的
    BPMN 引擎总是包括支持用户组的用户目录 – 或者甚至更好，可以通过例如标准化的 LDAP 协议连接到一个中央企业目录。这允许在谈论功能流程时进行一定程度的间接引用，即我们指的是哪个特定的作者或编辑并不重要。在第一个示例中，某个编辑将收到一份注册协议，然后向某个作者发送信息请求。
- en: It is important to understand this notion correctly and not to couple it too
    much to the user’s directory. Associating a BPMN actor/swimlane with a group is
    the most logical approach, but the coupling should not be too hard. For example,
    if it is decided at some point that only a few senior editors can start a contract,
    the process engine should be able to implement this without being dependent on
    the user’s directory to create a new group for these privileged editors. Of course,
    it is more elegant if this is the situation, but again, a technical prerequisite
    should never block a functional request.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 正确理解这个概念很重要，不要过多地将它与用户的目录耦合。将BPMN参与者/泳道与一个组关联是最合理的做法，但这种耦合不应过于紧密。例如，如果某个时候决定只有少数高级编辑可以启动合同，流程引擎应该能够实现这一点，而无需依赖于用户目录为这些特权编辑创建一个新的组。当然，如果这种情况更加优雅，但这再次说明，技术前提条件永远不应该阻碍功能请求。
- en: The moment when a process is instantiated is also important from the point of
    view of the actors’ selection. The choice of which precise user will correspond
    to the generic definition of an actor in a “swimlane” will generally be realized
    upon instantiation of the process in the BPM engine. Most engines will show a
    dialog asking for who precisely in their user directory will be associated with
    this or that actor/lane in the process pool. Some even allow the definition of
    default user affectation or rules to select users depending on other elements
    of context. For example, we could have a `DemoEditor` process that would automatically
    select the editor associated with an author when the latter sends its manuscript
    for review.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 从参与者的选择角度来看，一个流程实例化的时刻同样重要。在“泳道”中，哪个具体用户将对应于一个通用定义的参与者，通常是在BPM引擎中实例化流程时实现的。大多数引擎都会显示一个对话框，询问用户目录中谁将与此或彼参与者/泳道在流程池中关联。有些甚至允许定义默认用户分配或根据其他上下文元素选择用户的规则。例如，我们可以有一个`DemoEditor`流程，当作者发送其稿件进行审阅时，它会自动选择与该作者关联的编辑。
- en: Available software for BPMN edition and execution
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可用于BPMN编辑和执行的软件
- en: 'In such a book that tries to remain generic and push forward standards instead
    of implementations, we are not likely to find examples of vendors, but the uses
    of BPM engines in the industry are so scarce that I thought it could be useful
    to cite a few of them. Of course, I only will list those vendors who play by the
    rules and make the effort to support the BPMN 2.0 standard, instead of trying
    to tempt their customers into vendor lock-in by providing sweet but proprietary
    features. Here are a few BPMN engines (some of them including a graphical editor):'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在这样一本书中，试图保持通用性并推动标准而不是实现，我们不太可能找到供应商的例子，但BPM引擎在行业中的应用如此稀少，我认为引用一些例子可能是有用的。当然，我只会列出那些遵守规则并努力支持BPMN
    2.0标准的供应商，而不是通过提供甜蜜但专有的功能来试图将客户锁定在供应商身上。以下是一些BPMN引擎（其中一些包括图形编辑器）：
- en: Bonitasoft ([https://www.bonitasoft.com/library/the-ultimate-guide-to-bpmn2](https://www.bonitasoft.com/library/the-ultimate-guide-to-bpmn2))
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bonitasoft ([https://www.bonitasoft.com/library/the-ultimate-guide-to-bpmn2](https://www.bonitasoft.com/library/the-ultimate-guide-to-bpmn2))
- en: Activiti ([https://www.activiti.org/userguide/#bpmn20](https://www.activiti.org/userguide/#bpmn20))
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Activiti ([https://www.activiti.org/userguide/#bpmn20](https://www.activiti.org/userguide/#bpmn20))
- en: Bizagi ([https://www.bizagi.com/en/platform/standards](https://www.bizagi.com/en/platform/standards))
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bizagi ([https://www.bizagi.com/en/platform/standards](https://www.bizagi.com/en/platform/standards))
- en: Kogito ([https://docs.kogito.kie.org/latest/html_single/#ref-kogito-app-examples_kogito-creating-running](https://docs.kogito.kie.org/latest/html_single/#ref-kogito-app-examples_kogito-creating-running))
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kogito ([https://docs.kogito.kie.org/latest/html_single/#ref-kogito-app-examples_kogito-creating-running](https://docs.kogito.kie.org/latest/html_single/#ref-kogito-app-examples_kogito-creating-running))
- en: The market always changes, and new versions and features appear; this is why
    I am not going to recommend or compare these solutions. There are also certainly
    many others that I simply have not been exposed to. This list is there simply
    to serve as a starting point.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 市场总是在变化，新的版本和功能不断出现；这就是为什么我不会推荐或比较这些解决方案。当然，还有许多其他我未曾接触到的解决方案。这份列表仅仅作为一个起点。
- en: Why so little use of BPMN in the industry?
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么在行业中BPMN的使用如此之少？
- en: As we saw, the norms and standards have existed for quite a long time, and the
    BPMN engines are there, up and ready for global use. Yet, the overall use of BPMN
    in the industry is very small. Apart from some very large companies, and only
    within dedicated perimeters, the use of BPMN-based automated processes is very
    scarce, although there is no problem in terms of the price or complexity of the
    norm. In fact, lots of implementations are free and the norm is quite easy to
    learn, even for a non-technical person. Actually, it may even be one of the easiest
    norms to understand for business-oriented people, as it represents their everyday
    job (at least when used properly). So why do so few use it?
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，规范和标准已经存在了很长时间，BPMN引擎也已准备好，可供全球使用。然而，BPMN在行业中的整体使用非常有限。除了少数非常大的公司，并且仅限于特定的区域，基于BPMN的自动化流程的使用非常稀少，尽管在规范的价格或复杂性方面没有问题。事实上，许多实现都是免费的，规范也相当容易学习，即使是对于非技术人员来说也是如此。实际上，它可能是面向商业人士最容易理解的标准之一，因为它代表了他们的日常工作（至少当正确使用时）。那么，为什么这么少的人使用它呢？
- en: One of the reasons may be that automating a process does not bear so much value
    in many cases. Indeed, setting up a BPM engine is quite a complex task and is
    only worth it when this investment is compensated either by an important complexity
    of the process (BPMN drawn up by business specialists and executed “blindly” by
    the software) or by frequent changes in the process definition (which makes it
    interesting to delegate execution to a generic engine, as this will allow the
    rest of the software to remain stable). And when you think about it, lots of business
    processes are not such frequently moving objects. The process of sending invoices
    does not change every month and all regulation-associated processes tend to be
    quite stable. Even operational processes do not change much more often than new
    versions of applications are released.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 可能的原因之一是，在许多情况下，自动化一个流程并不带来太多的价值。确实，设置一个BPM引擎是一项相当复杂的任务，只有在以下情况下才值得投资：要么是流程的复杂性很高（由业务专家绘制的BPMN流程图，由软件“盲目”执行），要么是流程定义频繁变化（这使得将执行委托给通用引擎变得有趣，因为这将允许软件的其他部分保持稳定）。当你这么想的时候，许多业务流程并不是那么频繁地变动。发送发票的过程不会每个月都改变，所有与法规相关的流程都倾向于相当稳定。甚至运营流程的变化频率也不会比应用程序的新版本发布频率高多少。
- en: 'Another reason is that designing a process inside a BPMN file tends to add
    rigidity to it. In lots of organizations, processes are not so clear and depend
    a lot on how humans execute them, sometimes not respecting a common way of doing
    so, and most of the time finding a creative way to the process objective, which
    is – in the end – the only thing that really matters. Sure, this might upset some
    managers who love the feeling of control that processes can provide. But this
    is also one of the drawbacks of processes that was explained previously in this
    chapter: when they tend to replace human choice, they not only bring down team
    morale but also reduce productivity while trying to increase it.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个原因是，在BPMN文件中设计流程往往会使其变得僵化。在许多组织中，流程并不那么清晰，很大程度上依赖于人类如何执行它们，有时并不遵循共同的做法，而大多数时候是找到一种创造性的方法来实现流程目标，而这最终是唯一真正重要的事情。当然，这可能会让一些喜欢流程带来的控制感的经理感到不满。但这也是本章先前解释的流程的缺点之一：当它们倾向于取代人类选择时，它们不仅会降低团队士气，而且在试图提高生产力的同时也会降低生产力。
- en: Or maybe the reason for BPM engines’ low use is just that BPMN remains a bit
    complicated. Of course, the basics of the BPMN 2.0 standard are very easy to understand
    and apply (a box for each task, a lane for each actor, and arrows between tasks
    to show the stream of activities) but the rest of the norm can require much more
    intellectual engagement.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，BPM引擎的低使用率可能仅仅是因为BPMN仍然有点复杂。当然，BPMN 2.0标准的基礎非常容易理解和应用（每个任务一个框，每个参与者一个通道，任务之间的箭头显示活动流），但规范的其他部分可能需要更多的智力投入。
- en: All in all, BPMN 2.0 is not used as widely as it should be because it could
    really bring more value to the IT industry if it was better known and widespread.
    This is why we need to try other solutions, and this is what the last section
    of this chapter is about showcasing some alternatives that may be used as a lighter
    replacement of BPM, hopefully giving it a new boost, even though not based on
    the BPMN 2.0 standard. But before that, we are going to digress just a little
    bit on other operations that can be performed using BPM – process execution is
    definitely the most advanced one, but not the only one that can deliver operational
    value.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，BPMN 2.0并没有像它应该的那样被广泛使用，因为它如果被更好地了解和普及，确实可以为IT行业带来更多价值。这就是为什么我们需要尝试其他解决方案，这也是本章最后一节要展示一些可能用作BPM轻量级替代品的替代方案的原因，希望它能给BPM带来新的推动力，尽管它不是基于BPMN
    2.0标准。但在那之前，我们将稍微偏离一下，讨论一下可以使用BPM执行的其他操作——流程执行无疑是其中最先进的，但不是唯一能带来运营价值的操作。
- en: Other associated practices
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他相关实践
- en: Automatic execution of processes is the ideal, but BPM comes with loads of other
    advantages, some of them much easier to obtain. This section outlines some of
    these possibilities.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 流程的自动执行是理想状态，但BPM还带来了大量其他优势，其中一些更容易获得。本节概述了其中一些可能性。
- en: Business activity monitoring
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 业务活动监控
- en: '**Business Activity Monitoring** (**BAM**) is the use of BPMN process representation
    to extract statistics about the sequence flows in instances of business processes,
    and, of course, to gain some insights into the activity represented by the process.
    The following are some examples of such statistics-based questions:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '**业务活动监控**（**BAM**）是使用BPMN流程表示法从业务流程实例中提取关于序列流的统计数据，当然，也可以从中获得对流程所表示活动的洞察。以下是一些基于此类统计问题的例子：'
- en: Which tasks take the longest in the process?
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在流程中，哪些任务耗时最长？
- en: How much time does the process take on average?
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流程平均需要多少时间？
- en: Does this average time vary in a regular time-related pattern? Are there seasons
    where the process is quicker/slower?
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个平均时间是否会以规律的时间相关模式变化？是否存在某些季节使得这个过程更快/更慢？
- en: What are the cycle time and lead time in the process?
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流程中的循环时间和提前期是多少？
- en: What changes in execution times have been associated with the deployment of
    a new version of the process?
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署流程新版本与执行时间的变化有什么关联？
- en: Has automation of a certain task indeed brought productivity improvement to
    the whole?
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 某项任务的自动化是否确实提高了整个流程的生产力？
- en: Apart from the promise of automated execution (which brings repeatability and
    uniformity), BAM is the most sought-after feature that brings managers to BPMN.
    The reason behind this is that managers need indicators to understand how their
    business behaves. And what better indicators could they have than metrics directly
    borne by their business processes?
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 除了自动执行的承诺（这带来了可重复性和一致性）之外，BAM是BPMN中最受欢迎的功能，它吸引了管理者。背后的原因是管理者需要指标来了解他们的业务行为。他们还能有什么比直接由他们的业务流程产生的指标更好的指标呢？
- en: The implementation of BAM is actually quite simple if you already use a monitoring
    system. In this case, it is only the adding logs on every input and every output
    of the tasks, and then using your aggregation mechanism to derive the desired
    statistics. In addition, showing these values on a graphical representation of
    the process is a must in order to make them easy to understand. Time-based statistics
    can be interesting, but sometimes, only knowing how many times a given task has
    been executed can bring knowledge to the process.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经使用监控系统，BAM的实施实际上相当简单。在这种情况下，只需在任务的每个输入和输出上添加日志，然后使用您的聚合机制来推导出所需的统计数据。此外，在流程的图形表示上显示这些值是必须的，以便使它们易于理解。基于时间的统计数据可能很有趣，但有时，只知道某个特定任务执行了多少次，就能为流程带来知识。
- en: 'For example, imagine we add counters to our second example of the `DemoEditor`
    business process:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们给`DemoEditor`业务流程的第二个例子添加计数器：
- en: '![Figure 11.11 – Example of BAM](img/B21293_11_11.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![图11.11 – BAM的示例](img/B21293_11_11.jpg)'
- en: Figure 11.11 – Example of BAM
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.11 – BAM的示例
- en: 'The counters are shown at the bottom of the tasks and should be read as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 计数器显示在任务的底部，应按以下方式阅读：
- en: '**100** instances of the process have been started'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**100** 个流程实例已被启动'
- en: '**98** have passed the first task and 2 remain in this state where the author
    has not been selected'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**98** 个已通过第一个任务，2个仍处于作者尚未被选中的状态'
- en: '**88** have passed the second task and **10** remain at the state of contract
    drafting (which accounts for the **98** from the previous task)'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**88**份已通过第二项任务，**10**份仍处于合同起草状态（占上一任务的**98**份）'
- en: '**88** contracts have been sent to authors, and all messages have been acknowledged'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**88**份合同已发送给作者，所有消息都已确认'
- en: '**75** contracts have been downloaded by authors; **13** authors have received
    the message but not processed it'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**75**份合同已被作者下载；**13**位作者已收到消息但未处理'
- en: Out of these **75**, **15** have rejected the contract and **60** of them have
    signed and sent the approval message
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这**75**份中，**15**份已拒绝合同，**60**份已签署并发送了批准消息
- en: The time-based statistics are at the top of the task. In this example, they
    only target the tasks and not the transitions. The format shows the average time
    first, followed by the minimum -> maximum range between parentheses. This kind
    of statistics could allow us to count how many contracts have been sent over the
    time interval; how many have been signed and returned; how long it takes on average
    to draft a contract versus how long it takes for the author to sign it; whether
    reminders should be used to speed up the process or there would be a waste of
    time because authors sign quickly their contract; and so on.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 基于时间的统计信息位于任务的最上方。在这个例子中，它们只针对任务，而不是转换。格式首先显示平均时间，然后是括号内的最小 -> 最大范围。这种统计信息可能允许我们计算在时间间隔内发送了多少合同；签了多少并已返回；平均起草合同所需时间与作者签署它所需时间相比；是否应该使用提醒来加快流程，或者作者快速签署合同会导致时间浪费；等等。
- en: BAM is also helpful for finding bottlenecks in the processes. Sometimes, where
    the process stops is quite easy to find, but in large organizations where roles
    are scattered, authorizations can be delegated and many steps are involved, some
    in different services with other managers and where politics could apply, so finding
    the reason why the whole process has suddenly degraded can be daunting if you
    do not use BAM. This is just like finding a bug in a distributed cloud application
    can be almost impossible if you do not have a good monitoring system in place.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: BAM对于在流程中找到瓶颈也很有帮助。有时，流程停止的地方很容易找到，但在角色分散的大型组织中，授权可以委派，涉及许多步骤，有些步骤在不同的服务中，涉及其他经理，并且可能存在政治因素，所以如果你不使用BAM，找到整个流程突然下降的原因可能会很令人沮丧。这就像在没有良好的监控系统的情况下，在分布式云应用程序中找到错误几乎是不可能的。
- en: 'Finally, BAM can be used to find out whether the recommended process is indeed
    respected. When a process is put in place (of course, together with the team using
    it), it can happen that newcomers are not told about it and they try to follow
    the lead of the seniors in their field. They may miss some steps of the process
    and effective monitoring can bring these mishaps to light for them or the process
    owner. Remediation then simply involves instructing the person on how to carry
    out the task, but it may be interesting to take a deeper approach and start continuous
    improvement on the process itself: how come the person was not correctly instructed
    about the process? What should have prevented this task from being forgotten?
    Since it is evidently easy to do without, shouldn’t this task be fully automated
    in order to be sure nobody forgets it in the future? All these questions will
    improve how the process works but the trigger, in this example, is BAM.'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，BAM可以用来找出是否确实遵守了推荐流程。当流程实施（当然，与使用它的团队一起），可能会发生新来的人不知道它，并试图跟随他们领域资深人士的领导。他们可能会错过流程的一些步骤，有效的监控可以帮助他们或流程所有者发现这些失误。补救措施只是简单地指导人员如何执行任务，但可能有趣的是采取更深入的方法，并开始对流程本身进行持续改进：为什么人员没有正确了解流程？应该有什么可以防止这项任务被遗忘？既然显然可以不这样做，那么这项任务是否应该完全自动化，以确保将来没有人忘记它？所有这些问题都将改善流程的工作方式，但在这个例子中，触发因素是BAM。
- en: Business process simulation and optimization
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 业务流程模拟和优化
- en: 'Another use of BPM, less known but quite valuable in some cases, is to simulate
    possible executions of processes in order to find a good balance of material resources,
    tools, and people, and optimize the whole. Imagine for example the following business
    process:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: BPM的另一个用途，虽然不太为人所知，但在某些情况下非常有价值，是模拟流程的可能执行，以找到材料资源、工具和人员之间的良好平衡，并优化整体。例如，想象以下业务流程：
- en: '![Figure 11.12 – Base for business process optimization](img/B21293_11_12.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![图11.12 – 业务流程优化的基础](img/B21293_11_12.jpg)'
- en: Figure 11.12 – Base for business process optimization
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.12 – 业务流程优化的基础
- en: 'Having this diagram may prove particularly helpful if you have to deal with
    masses of incoming letters and need to find a way to balance the people doing
    the five tasks. Let’s start with the overly simplified hypothesis that you have
    ten people in your team, each is able to perform any of the tasks, and each task
    takes as much time as any other. You may think a good repartition of people would
    be two people per task… but think again! The **Send response letter** task is
    necessarily called twice as much as the two preceding tasks. You also do not know
    what percentage of mail will be going to the **Update contact form** task: if
    none goes there, then you will gain some time sharing the two persons initially
    affected by this stage on two other sub-teams.'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要处理大量的 incoming letters 并需要找到一种平衡执行五个任务的人员的方法，那么拥有这张图可能会特别有用。让我们从一个过于简化的假设开始，即您的团队中有十个人，每个人都能执行任何一项任务，并且每项任务所需的时间与其他任务相同。您可能会认为合理的人员分配是每个任务两人……但再想想！**发送回复信件**这项任务必然比前两个任务多调用两次。您也不知道有多少比例的邮件会发送到**更新联系表单**这项任务：如果没有任何邮件发送到那里，那么您将节省一些时间，将最初受此阶段影响的两个人分配到两个其他子团队。
- en: Keeping the aforementioned hypotheses, once you have a statistical repartition
    of the types of mail, you may be able to calculate how you should partition people
    on the different tasks in order to optimize the whole process with a simple calculator.
    If you start to introduce more realistic behavior, like the fact that not all
    tasks take the same time, you will most certainly need a spreadsheet or at least
    some brain power.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在保持上述假设的情况下，一旦您有了邮件类型的统计分配，您可能能够计算出您应该如何在不同任务上分配人员，以优化整个流程，只需一个简单的计算器即可。如果您开始引入更现实的行为，比如不是所有任务都需要相同的时间，那么您肯定需要电子表格或至少一些脑力。
- en: Now, imagine that the shares of the incoming mail change seasonally (for example,
    changes of addresses being more frequent at the beginning of the year and in September);
    that all tasks have a given average time, but some with a much higher spread (meaning
    that they can vary significantly around the average time); that some people may
    be able to handle some tasks and not others, depending on their competencies;
    that you have to account for the probability of a person being sick or for the
    fact that people take holidays, though not everyone at the same time due to internal
    team rules… All of this makes for such a complex system that there is no way you
    will be able to determine an optimal repartition of people for the different tasks.
    Luckily, the BPMN representation may help you get an optimal result simply by
    simulating different team organizations and thousands of process instances, then
    determining the total duration and choosing the best configuration depending on
    your criteria.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设 incoming mail 的份额会季节性变化（例如，地址变更在年初和九月更为频繁）；所有任务都有一个给定的平均时间，但有些任务的波动范围要大得多（这意味着它们可以显著地围绕平均时间变化）；某些人可能能够处理某些任务而无法处理其他任务，这取决于他们的能力；您必须考虑到有人生病的可能性，或者人们休假的事实，尽管由于团队内部规则，并不是每个人都同时休假……所有这些都使得系统如此复杂，以至于您无法确定不同任务的最佳人员分配。幸运的是，BPMN
    表示法可以帮助您通过模拟不同的团队组织和数千个流程实例，然后根据您的标准确定总持续时间并选择最佳配置，从而简单地获得最佳结果。
- en: 'Large populations-based optimization applications already exist (for example,
    with genetic-like algorithms or the Monte-Carlo approach) but they all need something
    to quickly simulate how the system responds: this is where a good BPMN engine
    will help because it can execute purely automated tasks that simulate the time
    taken pseudo-randomly. The optimization engine will thus be able to simulate a
    large number of situations, send them to the BPMN engine for virtual execution,
    collect the outcome, and finally converge on an optimal solution.'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 基于大人群的优化应用已经存在（例如，使用类似遗传算法或蒙特卡洛方法），但它们都需要某种快速模拟系统如何响应的东西：这就是一个好的 BPMN 引擎可以帮助的地方，因为它可以执行纯自动化的任务，这些任务可以随机模拟所需的时间。因此，优化引擎将能够模拟大量情况，将它们发送到
    BPMN 引擎进行虚拟执行，收集结果，并最终收敛到最佳解决方案。
- en: Business process mining
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 业务流程挖掘
- en: Finally, business process mining should be quickly explained, even if it is
    not a use of BPMN, but rather an activity that can be the source of a business
    process. Business process mining (not abbreviated in order to avoid confusion
    with business process management) consists of determining a business process by
    analyzing other data that generally comes from software, typically logs.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，即使业务流程挖掘不是BPMN的使用，而是一种可以成为业务流程来源的活动，我们也应该快速解释业务流程挖掘。业务流程挖掘（不缩写以避免与业务流程管理混淆）是通过分析通常来自软件的其他数据（通常是日志）来确定业务流程。
- en: For example, a process mining system could use logs appearing on the website,
    together with history tables of invoicing and stocks/expedition metrics, in order
    to determine a standard process that corresponds to the “normal” act of buying
    on an e-commerce shop.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，一个流程挖掘系统可以使用出现在网站上的日志，以及发票和库存/配送指标的历史表，以便确定与电子商务商店上“正常”购买行为相对应的标准流程。
- en: There are lots of other applications of BPMN, but we should not deviate too
    much from our goal, which is to show how business process management can help
    in reaching business/IT alignment. We have seen how process automation is one
    of the uses of BPMN that brings the most value, but also sadly how the investment
    can be quite high, and – for this reason – the industrial uses of such an approach
    do not frequently arise. Some alternative approaches may help in becoming more
    process-oriented while keeping the required investment low, or even in some cases
    without any additional investment than the usual business application.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: BPMN有许多其他应用，但我们不应该偏离我们的目标太远，我们的目标是展示业务流程管理如何帮助实现业务/IT对齐。我们已经看到流程自动化是BPMN带来最大价值的使用之一，但遗憾的是，投资可能相当高，因此这种方法在工业应用中并不常见。一些替代方法可能有助于在保持所需投资低的情况下变得更加流程导向，甚至在某些情况下不需要比通常的商业应用更多的额外投资。
- en: Other approaches to business process implementation
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 业务流程实现的其它方法
- en: In this section, we will consider all of the methods that offer an alternative
    to BPMN engines executing business processes. We will discover which are the more
    common/more modern ones and will compare their effectiveness. In the end, everything
    depends on the context, but knowing the specificities should hopefully help you
    know when to apply this or that approach.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将考虑所有提供替代BPMN引擎执行业务流程的方法。我们将发现哪些是更常见/更现代的，并将比较它们的效率。最后，一切取决于上下文，但了解具体细节应该有助于你了解何时应用这种方法或那种方法。
- en: Process in the GUI
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图形用户界面中的流程
- en: You might have not realized but, if you have ever created a software **Graphical
    User Interface** (**GUI**), chances are you have implemented a process without
    even realizing it. All wizards, for example, are processes since they chain screens
    in order to provide a way to add data in a sequential order. The most complex
    ones allow choices, which are the perfect equivalent of gateways in BPMN. They
    also have a beginning and an end, like any process. Wizards are very similar to
    processes, but when we take the simple definition of a business process as a series
    of human and automated tasks organized to reach an objective, then any GUI is
    indeed a process.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能没有意识到，如果你曾经创建过软件图形用户界面（GUI），那么你很可能在不经意间实现了一个流程。例如，所有向导都是流程，因为它们通过链接屏幕来提供按顺序添加数据的方式。最复杂的那些允许选择，这在BPMN中是网关的完美等价物。它们也有开始和结束，就像任何流程一样。向导与流程非常相似，但当我们简单地将业务流程定义为一系列旨在达到目标的人力和自动化任务时，那么任何GUI实际上就是一个流程。
- en: Every GUI allows human interactions that are always the start of a simple process.
    This process will collect data through forms, and then run some “service” tasks
    by calling a backend in order to execute some commands. Like wizards, the behavior
    of the GUI will change depending on business rules or values specified in forms
    (again, like gateways) and the end of the process will generally be signaled by
    a toast notification, a dialog box, or simply the fact that the GUI waits for
    another interaction.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 每个图形用户界面（GUI）都允许人类交互，这通常是简单过程的开始。这个过程将通过表单收集数据，然后通过调用后端来执行一些“服务”任务，以执行一些命令。就像向导一样，GUI的行为将根据在表单中指定的业务规则或值（再次，就像网关一样）而改变，并且过程的结束通常由一个吐司通知、一个对话框，或者简单地由GUI等待另一个交互来表示。
- en: You could argue that a process in the GUI is really a human process where the
    user follows a process within the software. However, a good GUI leads the user
    into a particular way of using it that tends to mimic the business process. This
    is obvious in the case of a wizard, but it also happens in a GUI that has been
    designed with UX competency. Of course, in the simplest interfaces like a command
    line, a very large part – if not all – of the process execution is in the hands
    of the user. But the simple fact that arguments are named after data collected
    by the BPMN process is already a help in respecting the represented workflow.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会争辩说，GUI中的过程实际上是一个人类过程，其中用户在软件中遵循一个过程。然而，一个好的GUI会引导用户以特定的方式使用它，这往往倾向于模仿业务流程。这在向导的情况下很明显，但在设计有UX能力的GUI中也会发生。当然，在像命令行这样的最简单界面中，过程执行的大部分——如果不是全部——都在用户手中。但简单的事实是，参数的命名是根据BPMN过程收集的数据来进行的，这已经在尊重所表示的工作流程方面提供了一些帮助。
- en: Process in higher-level APIs
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高级API中的过程
- en: 'While we are at simple solutions to the orchestration question, having dedicated
    APIs that implement an organized sequence of calls to other, simpler, APIs is
    also a documented approach. In fact, this is a well-known API structure, organizing
    them in three layers, each building on the one below:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们考虑解决编排问题的简单方案时，拥有实现一系列对其他更简单API调用的有序序列的专用API也是一种已记录的方法。实际上，这是一种众所周知的API结构，将它们组织成三层，每一层都建立在下一层之上：
- en: The first level is the CRUD APIs, which are used to manipulate and read a single
    business entity. This is the kind of API that we talked about in the previous
    chapter when explaining the concept of MDM and showing how it could be implemented
    with REST APIs.
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一层是CRUD API，用于操作和读取单个业务实体。这是我们之前章节中在解释MDM概念并展示如何使用REST API实现时讨论的那种API。
- en: The second level is about APIs that compose several first-level API calls in
    order to realize a complex operation in the system. For example, one such API
    could be exposed as `/api/contract` and its `POST` verb implementation could call
    `GET` on `/api/authors` to verify the author is already registered, then make
    a `POST` call to the same API if this is not the case. After that, the code would
    call the service dedicated to proposing a contract amount, then finally reach
    the `/api/pdf-fusion` service in order to retrieve the address of the document
    created and sent to the electronic document management system (of course, using
    the CMIS standard). At any time where a failure happens, this implementation would
    have rules to know what it should do and, in the worst case, would provide notifications
    to a human to clean up the remaining situations that are too complex for the computer
    to resolve.
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二层是关于那些将多个第一级API调用组合起来以在系统中实现复杂操作的API。例如，这样的API可以公开为`/api/contract`，其`POST`动词实现可以调用`/api/authors`以验证作者是否已经注册，然后在这种情况下对该API进行`POST`调用。之后，代码会调用专门用于提出合同金额的服务，然后最终到达`/api/pdf-fusion`服务以检索创建并发送到电子文档管理系统（当然，使用CMIS标准）的文档地址。在任何发生失败的地方，这种实现都会有规则知道它应该做什么，在最坏的情况下，会向人类提供通知以清理计算机难以解决的过于复杂的情况。
- en: The third level is used to adjust APIs to their callers. This time, they do
    not necessarily compose several calls but rather add some arguments to the request,
    adjust and filter some content to the response, and so on. These tertiary APIs
    are typically used to provide a “backend for a frontend” and, for example, adjust
    the default pagination and sets of attributes retrieved for a mobile application.
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三层用于调整API以适应其调用者。这一次，它们不一定组合多个调用，而是向请求添加一些参数，调整和过滤一些响应内容，等等。这些三级API通常用于提供“前端的后端”，例如，调整移动应用程序检索的默认分页和属性集。
- en: 'When using an API gateway to include general features such as authentication,
    authorization, rate limiting, and counting accesses for invoices, the server used
    can be considered as another level, but it does not sit on top of the three levels
    described above. Since it can be used to expose any level, a better representation
    is to show it on the side of the three levels of business-oriented APIs, providing
    a technical coating for them:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用API网关包括诸如身份验证、授权、速率限制和为发票计数等通用功能时，所使用的服务器可以被视为另一个级别，但它并不位于上述三个级别之上。由于它可以用于暴露任何级别，更好的表示方法是将它显示在面向业务API的三个级别旁边，为它们提供技术覆盖：
- en: '![Figure 11.13 – The three levels of APIs](img/B21293_11_13.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![图11.13 – API的三个级别](img/B21293_11_13.jpg)'
- en: Figure 11.13 – The three levels of APIs
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.13 – API的三个级别
- en: As you can see from the examples chosen in this schema, APIs on different levels
    do not necessarily use different expositions. For example, it could be decided
    that the API exposing the authors together with their past books uses the `/api/authors`
    route just like the CRUD API exposition of the authors alone does. One rationale
    for this would be to respect the Open Data Protocol standard, and in particular,
    the `$expand` grammar that is well adapted to this case. The API would nonetheless
    be a second-level one.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从该方案中选择的示例中可以看到，不同级别的API不一定使用不同的表述。例如，可以决定暴露作者及其过去书籍的API使用`/api/authors`路由，就像仅暴露作者本身的CRUD
    API表述一样。这样做的一个理由是尊重开放数据协议标准，特别是适用于此情况的`$expand`语法。尽管如此，该API仍将是第二级API。
- en: One of the advantages of this approach to implementing a business process inside
    an API is that it greatly respects the principle of single responsibility. A drawback
    is that the implementation will either be in code, which is more difficult to
    evolve, or with a BPMN engine but, in this case, this creates some coupling to
    a technology. There of course is a bit of coupling when choosing a BPMN engine,
    but using it in many API implementations definitely increases this level of dependency
    on it.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法在API内部实现业务流程的一个优点是它极大地尊重了单一责任原则。一个缺点是实施将要么在代码中，这更难进化，要么使用BPMN引擎，但在这种情况下，这会创建一些与技术的耦合。当然，在选择BPMN引擎时会有一些耦合，但在许多API实现中使用它无疑会增加对它的这种依赖程度。
- en: Now that we have shown two “simple” ways to implement business processes in
    software, let’s analyze some more complex ones. We will start with dedicated middleware
    servers, which we previously talked about in the context of service-oriented architecture.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经展示了两种“简单”的软件中实现业务流程的方法，让我们分析一些更复杂的方法。我们将从专门的中间件服务器开始，我们之前在面向服务的架构的背景下讨论过这些服务器。
- en: Process in a MOM/ESB
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MOM/ESB中的流程
- en: In [*Chapter 8*](B21293_08.xhtml#_idTextAnchor271), the notion of middleware
    was introduced and a few well-known implementations were presented, including
    **Message-Oriented Middleware** (**MOM**) and **Enterprise Service Bus** (**ESB**).
    These can of course be used to implement processes and orchestrate the different
    messages or service calls that will practically realize the tasks of a given business
    process. Though MOMs and ESBs do not understand BPMN, the use of **Enterprise
    Integration Patterns** (**EIPs**) can be enough to make a business process concrete,
    then executed and monitored in the middleware.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第8章*](B21293_08.xhtml#_idTextAnchor271)中，引入了中间件的概念，并介绍了一些著名的实现，包括**面向消息的中间件**（**MOM**）和**企业服务总线**（**ESB**）。当然，这些可以用来实现流程并编排不同消息或服务调用，从而实际实现特定业务流程的任务。尽管MOM和ESB并不理解BPMN，但使用**企业集成模式**（**EIPs**）足以使业务流程具体化，然后在中间件中执行和监控。
- en: You might look at this last sentence, as I recommend introducing business functions
    inside the middleware, while I stated in [*Chapter 10*](B21293_10.xhtml#_idTextAnchor344)
    that all business rules should always be inside the MDM service associated with
    the entity bearing it. Is there a possible paradox here? In fact, there is not
    if you make use of the Single Responsibility Principle. When talking about business
    functions that are the responsibility of a given service, it is important that
    the services are clearly made responsible for each function. For example, if an
    accounting service needs the net price for a book and the book service only contains
    the raw price without VAT, it is important not to take the easy path of applying
    the VAT rate inside the middleware simply because it is quicker and will avoid
    a change and the deployment of a new version of the book MDM service. The books
    and all their attributes are clearly under the responsibility of the books referential
    service, another attribute has to be added to the list of what it exposes (which
    does not harm backward compatibility, so should not have any impact if clients
    are correctly written).
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会看到这句话，正如我建议在中间件中引入业务功能一样，而我在[*第10章*](B21293_10.xhtml#_idTextAnchor344)中提到，所有业务规则都应该始终位于与承载它的实体关联的MDM服务中。这里是否存在可能的悖论？实际上，如果你利用单一责任原则，就不会存在悖论。当谈论某个服务负责的业务功能时，重要的是服务应该明确对每个功能负责。例如，如果一个会计服务需要一本书的净价，而图书服务只包含不含增值税的原始价格，那么在中间件中简单地应用增值税率以节省时间并避免更改和部署新的图书MDM服务版本，这并不是一条简单的道路。图书及其所有属性显然属于图书参考服务的责任，必须将另一个属性添加到它所公开的列表中（这不会损害向后兼容性，因此如果客户端编写正确，不应有任何影响）。
- en: On the other hand, let’s say that when an editor decides a book should be discontinued,
    the command should delete the reference from the CRM and from the commercial website,
    but also set the status of the book to `archived` in the books referential service.
    Clearly, the action will be sent to the book referential service first, but who
    should decide about the other actions? We could ask the data referential service
    to send a message to the CRM and the website, but that would make a clear coupling
    with these applications. Neither the CRM nor the website should be in control
    of this interaction since none of them is supposed to be responsible for what
    happens at the book entity level. The responsibility of this grouped set of commands
    is not unique, and thus hard to give to a single service.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，假设编辑决定一本书应该停止出版，那么命令应该从CRM和商业网站上删除该书的引用，同时也应该将该书在图书参考服务中的状态设置为`存档`。显然，该操作首先会发送到图书参考服务，但谁应该决定其他操作呢？我们可以要求数据参考服务向CRM和网站发送消息，但这会与这些应用产生明确的耦合。CRM和网站都不应该控制这种交互，因为它们都不应该对图书实体级别的发生的事情负责。这个命令组的责任不是唯一的，因此很难将其分配给单个服务。
- en: 'How the middleware solves this is by providing another application that is
    responsible for these “orchestration” tasks. It sits on top of messages and has
    only the responsibility of handling them and routing them to whatever service
    needs them. Note that the middleware application does not know anything about
    the content of the message; it simply takes care of the fact that a `DELETE` operation
    on `/api/books` should be sent to the book MDM service, the CRM, and the website.
    What they do with it is none of its business. Of course, there are details that
    should be sorted out. For example, how should the middleware react if one of the
    services sends an error? Is it its responsibility to cancel the transaction and
    ask other services to roll back what they have done? These questions will be addressed
    a bit further on in this section but, for now, keep in mind the old proverb “dumb
    pipes, smart endpoints”: the middleware should never embed any business rules
    other than pure orchestration, which is the simple dispatch of messages and nothing
    else.'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 中间件解决这个问题的方法是通过提供另一个负责这些“编排”任务的应用程序。它位于消息之上，只负责处理和路由消息到需要它们的任何服务。请注意，中间件应用程序对消息的内容一无所知；它只是确保对`/api/books`上的`DELETE`操作应该发送到图书MDM服务、CRM和网站。它们如何处理这些消息不是它的业务。当然，有一些细节需要解决。例如，如果其中一个服务发送错误，中间件应该如何反应？这是它的责任取消交易并要求其他服务回滚它们所做的一切吗？这些问题将在本节稍后部分进行讨论，但在此期间，请记住古老的谚语“哑管道，智能端点”：中间件永远不应该嵌入任何除了纯粹编排之外的业务规则，即简单的消息分发，不再做其他事情。
- en: Low-code/no-code approaches to processes
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 流程的低代码/无代码方法
- en: You have almost certainly heard about the low-code/no-code movement in the industry
    lately. The idea behind these approaches is that specialized platforms can make
    it possible for non-developers to create **Line-Of-Business** (**LOB**) software
    applications by removing most or all code and proposing visual editors to create
    forms, workflows, data structures, and so on. In a way, they contain everything
    that is necessary to create a complete system, just like the utopic system we
    talked about does. The difference resides in the fact that they do so with graphical
    editors and the user never has to type a line of text-based code (or almost, in
    the low-code approach, as opposed to the no-code approach that demands that not
    a single line of code is typed).
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '你最近很可能已经听说业界关于低代码/无代码运动的讨论。这些方法背后的理念是，专门的平台可以使非开发者通过移除大部分或所有代码，并提议使用可视化编辑器来创建表单、工作流、数据结构等，从而能够创建业务线（**Line-Of-Business**，**LOB**）软件应用。从某种意义上说，它们包含了创建完整系统所需的一切，就像我们之前讨论的理想化系统一样。区别在于，它们通过图形编辑器来实现，用户根本不需要输入任何基于文本的代码（或者在低代码方法中几乎不需要，与无代码方法不同，无代码方法要求不输入任何代码）。 '
- en: Lots of polemics have surrounded these approaches and their associated platforms,
    some presenting them as a revolution allowing the appearance of the “citizen developer”,
    and others explaining that the code logic and algorithms are still there, simply
    in a non-textual form. For them, these platforms are not much more than the next
    avatar of an old promise that went over code generation, fourth-generation frameworks,
    previous approaches of graphical integrated development platforms… and of course,
    all the applications that have been created with the most versatile tool ever,
    which is Excel. As an architect, I try to step away from these opinions and stay
    focused on the kind of value that such tools can bring.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法和它们相关的平台周围有很多争议，有些人把它们呈现为一场革命，允许“公民开发者”的出现，而其他人则解释说代码逻辑和算法仍然存在，只是以非文本的形式存在。对他们来说，这些平台不过是一个老承诺的新化身，这个承诺已经超越了代码生成、第四代框架、之前的图形集成开发平台方法……以及当然，所有使用最灵活的工具（Excel）创建的应用程序。作为一个架构师，我试图远离这些观点，专注于这些工具可能带来的价值。
- en: In particular, better tooling may be an answer to the difficulty expressed above
    on the limited use of BPMN engines in the industry. Just like MOMs, BPMN engines
    are quite complex systems and require some setup, maintenance, and expertise.
    With its focus on the simplicity of use by non-developers (I was about to write
    “non-technical persons,” but that would be far-fetched, as you definitely require
    a technically oriented mind to use them), perhaps the low-code/no-code tools could
    be a way to provide an easy-to-use orchestration that would allow the business
    process execution approach to become more widely used?
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 尤其是更好的工具可能是对上述行业中对BPMN引擎有限使用的困难的一个答案。就像MOMs一样，BPMN引擎是相当复杂的系统，需要一些设置、维护和专业知识。由于其专注于非开发人员（我差点写“非技术人员”，但这过于牵强，因为使用它们肯定需要技术导向的思维）的易用性，也许低代码/无代码工具可以提供一种易于使用的编排方式，从而使业务流程执行方法得到更广泛的应用？
- en: 'This could happen in two different ways, depending on the kind of tools one
    uses. The first family of tools is the easiest one to use for process automation:
    namely, platforms that are data-driven. As the ideal information system clearly
    separates MDM and business process management (and business rules management),
    that may sound a bit weird, but the concept of reification will help get out of
    this separation. The word “*reification*” means the making of something into a
    concrete entity, typically a relationship between two entities. In the case of
    processes, they can be seen as a series of tasks that contribute to acquiring
    data, but we could also apply reification and consider that an instance of the
    process itself is data, after all. This is how data-driven no-code systems, such
    as Airtable for example, deal with business processes: they simply store data
    about the process in their data structures, each line corresponding to an instance
    of a process. In addition, this is made easier by the fact that most simple processes
    target mainly one business entity, which means that the process and the associated
    entity can simply be turned into the same entity, managed by the MDM that Airtable
    and the like actually are.'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能以两种不同的方式发生，具体取决于一个人使用的工具类型。第一种工具族是用于流程自动化的最容易使用的：即数据驱动的平台。由于理想的信息系统明确区分了主数据管理（MDM）和业务流程管理（以及业务规则管理），这听起来可能有点奇怪，但具体化的概念将有助于打破这种分离。单词“*具体化*”意味着将某物转化为一个具体实体，通常是两个实体之间的关系。在流程的情况下，它们可以被看作是一系列有助于获取数据的任务，但我们可以应用具体化，并考虑流程本身的一个实例也是数据。这就是数据驱动的无代码系统，例如Airtable，如何处理业务流程：它们只是在其数据结构中存储有关流程的数据，每一行对应于流程的一个实例。此外，由于大多数简单的流程主要针对一个业务实体，这意味着流程和相关的实体可以简单地转化为同一个实体，由Airtable等实际的主数据管理（MDM）来管理。
- en: For example, let’s model a process of onboarding for Human Resources. The target
    entity is an employee which concerns the onboarding process. We will thus simply
    create a data structure for these onboarded employees, and complete it with data
    that is more process-oriented, typically the date of entry (beginning of the process),
    the date of full integration (end of the onboarding process), the URL to the picture
    that has been taken of the new employee on their first day at work, maybe a pointer
    to the signed document of IT charts they were required to approve, and so on.
    As you can see, data from the processes and data about the employees themselves
    sometimes have blurred boundaries. For example, the date of joining the company
    is the start of the onboarding process, but this remains important data for the
    employee long after the end of the onboarding process, as it is used by HR to
    calculate how many additional vacation days the person receives (determined by
    how long they have been with the company).
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们以人力资源的入职流程为例。目标实体是员工，这与入职流程有关。因此，我们将简单地为这些入职员工创建一个数据结构，并用更面向流程的数据来完善它，通常是入职日期（流程的开始），完全融入日期（入职流程的结束），新员工第一天上班时拍摄的照片的URL，可能是指向他们需要批准的IT图表签署文件的指针，等等。正如你所看到的，流程数据和关于员工本身的数据有时界限模糊。例如，加入公司的日期是入职流程的开始，但这个日期在入职流程结束后对员工来说仍然是非常重要的数据，因为人力资源部门用它来计算这个人将获得多少额外的假期（取决于他们在公司工作的时间长短）。
- en: 'There is a second family of tools that can be classified as *no code* since
    they allow graphical-only operations: these are the light orchestration tools
    such as Zapier, IFTTT, and many others that are similar in their use. These platforms
    allow us to create simple interactions by binding an event (for example, when
    a GMail account receives an email with an attachment) to an action (storing the
    file in a OneDrive account, under a given directory named `Pictures`). The GUI
    to create these interactions can go a bit further, for example by allowing an
    intermediate task that will filter files based on their extensions and stop if
    the attachment detected does not end with `.png` or `.jpg`, but this will generally
    be the most sophisticated use you can have. This limitation is compensated for
    by providing lots of connectors to third-party platforms. I cited Google Mail
    and Microsoft OneDrive in the example, but there are hundreds or thousands of
    editors that have made their applications accessible with these tools. Exposing
    a public API is generally a prerequisite to doing so, and we will see shortly
    that webhooks can also be very useful here.'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一类工具可以被归类为“无代码”，因为它们只允许图形化操作：这些是轻量级编排工具，如 Zapier、IFTTT 以及许多类似的使用方式。这些平台允许我们通过将事件（例如，当
    GMail 账户收到带有附件的电子邮件）绑定到动作（例如，将文件存储在 OneDrive 账户的指定目录“图片”下）来创建简单的交互。创建这些交互的 GUI
    可以更进一步，例如，允许一个中间任务根据文件扩展名过滤文件，如果检测到的附件不以 `.png` 或 `.jpg` 结尾，则停止。但这通常将是您能拥有的最复杂的使用方式。这种限制通过提供大量连接器到第三方平台得到补偿。我在例子中提到了
    Google Mail 和 Microsoft OneDrive，但还有数百或数千个编辑器已经通过这些工具使他们的应用程序可访问。公开 API 通常是这样做的先决条件，我们很快就会看到
    webhooks 在这里也非常有用。
- en: '![Figure 11.14 – Zapier example](img/B21293_11_14.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.14 – Zapier 示例](img/B21293_11_14.jpg)'
- en: Figure 11.14 – Zapier example
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.14 – Zapier 示例
- en: 'Some platforms such as Microsoft Power Apps are more sophisticated while keeping
    the same approach of associating business events with actions. Simply, they make
    it easier to add intermediate filters, duplicate messages, and so on. They could
    be considered as an implementation of EIPs in their functional approach but, since
    they do not respect the names of the patterns, they are not eligible for this.
    An advantage they have, though, is that EIPs’ implementations are written in Java
    or with a technical **Domain Specialized Language** (**DSL**), both of which are
    code, necessitating true developers to be involved. Let’s not think that the replacement
    of this text by a visual diagram editor radically changes the skills necessary
    to implement “flows,” as they are sometimes called: one needs a developer-oriented
    mindset to be able to set up Microsoft Power Apps workflows correctly. In this
    way, this kind of tool is really *low code* rather than *no code*, since part
    of them, such as the complex attributes mapping functions, involve a programming
    language.'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 一些平台如 Microsoft Power Apps 在保持将业务事件与动作关联的相同方法的同时更加复杂。简单来说，它们使得添加中间过滤器、复制消息等操作变得更加容易。它们可以被视为在功能方法中实现
    EIPs，但由于它们不遵守模式名称，因此不符合这一条件。尽管如此，它们的一个优点是，EIPs 的实现是用 Java 或技术**领域特定语言**（**DSL**）编写的，这两种都是代码，需要真正的开发者参与。我们不要认为用视觉图表编辑器替换文本会彻底改变实现“流程”（有时这样称呼）所需的技能：需要开发者导向的思维来正确设置
    Microsoft Power Apps 工作流。这样，这类工具实际上是**低代码**而不是**无代码**，因为其中一部分，如复杂的属性映射函数，涉及编程语言。
- en: 'To end this section, simply know that low-code/no-code tools can be great tools
    to implement an MDM, but also BPM and BRMS. It is easy to create an information
    system with them but beware: the technical coupling to the platform can be very
    high. If your goal is to design an industrial-grade, long-term evolving information
    system, the most important aspect will always be business/IT alignment, and the
    technical coupling may make you miss some important things and degrade your system’s
    performance. Still, they can be great tools to prototype the orchestration or
    the entity’s definition. And if you keep a clear separation between your services
    behind contract-first APIs, these low-ceremony tools can be absolutely great as
    an implementation of the “dumb pipes,” while API implementations are the “smart
    endpoints.”'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 为了结束本节，只需知道低代码/无代码工具可以是非常好的工具来实现MDM，也可以是BPM和BRMS。使用它们很容易创建一个信息系统，但请注意：与平台的技术耦合可能非常高。如果你的目标是设计一个工业级、长期演进的信息系统，最重要的方面始终是业务/IT的协同，技术耦合可能会让你错过一些重要的事情，并降低你系统的性能。尽管如此，它们可以是非常好的工具来原型化编排或实体的定义。而且，如果你在合同优先的API背后保持服务之间的清晰分离，这些低仪式的工具可以作为一个“哑管道”的实现，而API实现则是“智能端点”。
- en: Choreography instead of orchestration
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 舞台编排而非编排
- en: 'For now, we have only talked about orchestration when considering executing
    a business process in a software approach: in every implementation exposed, something
    (a middleware, a BPMN engine, or a low-code platform) was at the center of the
    game, receiving messages and looking at events from one side, and sending commands
    to services on the other side. What happens in this case when this central router
    fails? Since it is a **Single Point of Failure** (**SPOF**), the whole system
    halts, which is of course a problem. Some people will argue that ESBs have distributed
    brokers and that a network failure can be handled by the broadcasting approach,
    delivering the message even in the case of technical incidents. But the functional
    logic remains centralized and, if a route is badly designed, it may affect the
    whole system.'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只讨论了在软件方法中执行业务流程时使用编排：在每一个公开的实现中，某个东西（一个中间件、一个BPMN引擎或一个低代码平台）处于游戏中心，从一侧接收消息并查看事件，从另一侧向服务发送命令。当这个中心路由器失败时，这种情况会发生什么？由于它是一个**单点故障**（**SPOF**），整个系统都会停止，这当然是一个问题。有些人会争辩说ESBs有分布式代理，并且网络故障可以通过广播方法处理，即使在技术事件发生的情况下也能传递消息。但功能逻辑仍然是集中的，如果路由设计不当，可能会影响整个系统。
- en: 'To illustrate this, imagine you have the following process to automate (we
    only represent the first three layers of the CIGREF map, as the hardware layer
    would not change anything here):'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这一点，想象你有一个以下要自动化的流程（我们只表示CIGREF地图的前三层，因为硬件层在这里不会改变任何东西）：
- en: '![Figure 11.15 – Example of a process to be automated](img/B21293_11_15.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![图11.15 – 自动化流程示例](img/B21293_11_15.jpg)'
- en: Figure 11.15 – Example of a process to be automated
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.15 – 自动化流程示例
- en: After analyzing the content of an incoming letter that has been OCR-ized by
    SimpleOCR, the binary document is stored in the EDM (for example, a Community
    version of Alfresco). If a signature is required, the signing book (implemented
    perhaps by the iXParapheur software) is called and, finally, the signed document
    is also sent to Alfresco to be stored alongside the unsigned version.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在分析由SimpleOCR OCR化的来函内容后，二进制文档存储在EDM中（例如，Alfresco的社区版本）。如果需要签名，将调用签名簿（可能由iXParapheur软件实现），最后，签名的文档也发送到Alfresco存储，与未签名的版本一起。
- en: 'If we use the orchestration approach, a BPMN engine, such as Kogito, would
    be added to the software layer (and its function in the BCM) and the file corresponding
    to the business process would be in the same layer, as this is a software artifact.
    Kogito would then call all the functions needed when an instance of the process
    is run:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用编排方法，将一个BPMN引擎，例如Kogito，添加到软件层（及其在BCM中的功能）中，并且与业务流程对应的文件也在同一层，因为这是一个软件工件。然后，当流程实例运行时，Kogito将调用所有需要的函数：
- en: '![Figure 11.16 – Automation by orchestration](img/B21293_11_16.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![图11.16 – 通过编排自动化](img/B21293_11_16.jpg)'
- en: Figure 11.16 – Automation by orchestration
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.16 – 通过编排自动化
- en: 'It can easily be seen that if the `proc1.bpmn` file, there is a serious problem
    and the whole process will go down. This is how harmful an SPOF is to an organization.
    But it could be even worse in terms of evolution and SPOF: imagine that, instead
    of selecting best-of-breed applications for the different functions in the BCM,
    we had chosen the “fully integrated” approach, with SharePoint used for storing
    the file (**Docs** in the following diagram), its OCR features, and also for the
    workflows (**WFW** in the following diagram) it features. The result would be
    the highly-coupled one below:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易看出，如果`proc1.bpmn`文件存在问题，整个流程将会崩溃。这就是单点故障（SPOF）对一个组织造成的危害。但从演变和SPOF的角度来看，情况可能会更糟：想象一下，如果我们不是为BCM中的不同功能选择最佳应用，而是选择了“完全集成”的方法，使用SharePoint来存储文件（以下图中标记为**Docs**），其OCR功能，以及用于工作流（以下图中标记为**WFW**）的功能。结果将是以下高度耦合的：
- en: '![Figure 11.17 – Higher coupling with integrated orchestration](img/B21293_11_17.jpg)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![图11.17 – 集成编排的更高耦合](img/B21293_11_17.jpg)'
- en: Figure 11.17 – Higher coupling with integrated orchestration
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.17 – 集成编排的更高耦合
- en: In this case, if there is a failure in SharePoint, not only will the process
    be down, but also all the features implemented by this server. And since they
    are most likely used by many other business processes in your organization, the
    SPOF now carries more risk than ever. Of course, Microsoft has a very robust implementation
    of SharePoint 365, but you may lose internet access. And if you think you will
    be better off running SharePoint locally, think again because you will never reach
    the level of robustness Microsoft can provide for its own solution, however gifted
    your admins are. So how can we get rid of this SPOF problem for the process execution?
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，如果SharePoint出现故障，不仅流程会中断，而且该服务器实现的所有功能也会受到影响。由于它们很可能被组织中的许多其他业务流程使用，因此SPOF现在所承担的风险比以往任何时候都要大。当然，Microsoft对SharePoint
    365有一个非常健壮的实现，但你可能会失去互联网访问。如果你认为运行SharePoint本地会更好，那么再想想，因为你永远无法达到Microsoft为其自身解决方案提供的鲁棒性水平，无论你的管理员多么有才能。那么我们如何才能消除流程执行中的这个SPOF问题呢？
- en: One radical answer to this problem is to simply eliminate all kinds of centralized
    authority and keep only what is absolutely necessary for the messages to flow
    between the services, which is a network connection. That may sound quite harsh
    but, after all, if we really want dumb pipes, how much dumber can they be than
    simple TCP/IP packets? HTTP and in particular, HTTPS, will add some welcomed low-level
    features such as streaming encryption and receipt acknowledgment, but they will
    remain completely agnostic from the business point of view, which is what we define
    as “dumb”.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个问题的一个激进答案是简单地消除所有集中式权威，只保留消息在服务之间流动所绝对必要的部分，即网络连接。这听起来可能相当严厉，但毕竟，如果我们真的想要“愚蠢”的管道，它们还能比简单的TCP/IP数据包更愚蠢吗？HTTP以及特别是HTTPS，将添加一些受欢迎的低级功能，如流加密和收据确认，但它们将完全从业务角度保持中立，这正是我们所说的“愚蠢”。
- en: 'Eliminating any centralized orchestration is realized by setting up what is
    called “choreography.” In the orchestration approach, just like in musical orchestras,
    there is a leader who directs the rhythm and tone of all instruments from a physically
    centralized position. In choreography, a group of dancers does not follow a single
    leader, but each adjusts by observing their neighbors, just like in flocks of
    birds or fish. For example, when moving left, a dancer will stare at the feet
    of their left neighbor; then, when going right, they will synchronize with the
    dancer on the other side. In these groups, there is no “main dancer” but only
    a group that is used to working together. By the way, this means that there still
    is some kind of leader: when learning their choreography, a choreographer will
    explain the expected moves to the group of dancers, show how they can synchronize,
    and so on. Practice will then make it so that, once dancing is “in production,”
    the team will no longer need a choreographer. This goes the same in IT choreography:
    you need an architect to tell each service what signal they should listen to and
    what their reaction should be. But once set up, the system is on its own and the
    architect can simply monitor that everything is going as expected.'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 通过设置所谓的“编排”来消除任何集中的编排。在编排方法中，就像在音乐乐团中一样，有一个领导者从物理集中的位置指导所有乐器的节奏和音调。在编排中，一群舞者不跟随一个单一的领导者，而是通过观察他们的邻居来调整，就像鸟群或鱼群一样。例如，当向左移动时，舞者会盯着他们左边邻居的脚；然后，当向右移动时，他们会与另一边的舞者同步。在这些群体中，没有“主要舞者”，而只有一群习惯于共同工作的舞者。顺便说一句，这意味着仍然存在某种类型的领导者：当学习他们的编排时，编舞者会向舞者群体解释预期的动作，展示他们如何同步，等等。练习之后，一旦舞蹈“投入生产”，团队就不再需要编舞者。这在
    IT 编排中也是一样的：你需要一个架构师告诉每个服务它们应该监听什么信号以及它们的反应应该是什么。但一旦设置完成，系统就会自行运行，架构师只需简单地监控一切是否按预期进行。
- en: 'In our example, implementing this choreographic approach for our process would
    be done as follows:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，为我们的过程实现这种编排方法将如下进行：
- en: '![Figure 11.18 – Low-coupling choreography](img/B21293_11_18.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.18 – 低耦合编排](img/B21293_11_18.jpg)'
- en: Figure 11.18 – Low-coupling choreography
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.18 – 低耦合编排
- en: 'There would simply not be any additional software because each application
    would look out for events on the other applications. As a consequence, there would
    be no possible SPOF. In order to implement the process, the “registrations” would
    be the following:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，将不会有任何额外的软件，因为每个应用程序都会关注其他应用程序的事件。因此，将不会有任何可能的单点故障。为了实施此过程，“注册”将如下所示：
- en: The EDM would wait for a signal from the OCR stating a new document has been
    analyzed. Upon this signal, the EDM would store this document.
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EDM 会等待来自 OCR 的信号，表明新文档已被分析。收到此信号后，EDM 会存储该文档。
- en: 'The signing book would wait for a signal that a new document was stored and
    would use the business rule to filter documents that need to be signed. This could
    be done in two ways:'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 签署簿会等待一个信号，表明新文档已存储，并会使用业务规则来筛选需要签署的文档。这可以通过两种方式完成：
- en: The signing book could get all the documents and decide by itself depending
    on the metadata whether the document needs to be signed.
  id: totrans-241
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 签署簿可以获取所有文档，并根据自己的元数据自行决定文档是否需要签署。
- en: Even better, if the EDM application supports this, it could tell this application
    to only notify it for specific documents by registering with a “filter expression”
    that the EDM could apply. This would reduce bandwidth and improve performance,
    as only documents actually requiring a signature would be notified to the signing
    book for handling.
  id: totrans-242
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更好的是，如果 EDM 应用程序支持此功能，它可以通过注册一个 EDM 可以应用的“过滤器表达式”来告诉此应用程序仅通知特定文档。这将减少带宽并提高性能，因为只有实际需要签署的文档才会被通知给签署簿进行处理。
- en: The EDM would also wait for signals from the signing book software (just like
    it would for signals coming from the OCR platform) and store the signed document
    when such an event happens.
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EDM 还会等待来自签署簿软件的信号（就像它会等待来自 OCR 平台的信号一样），并在发生此类事件时存储签署的文档。
- en: 'The great thing about not having an SPOF is that all parts not concerned by
    a failure will continue to work in the system. For example, if, for one reason
    or another, the signing book software is not available (let’s say it is a SaaS
    application and your internet connection is down), the rest of the process will
    work fine: documents that do not need any signature will simply be sent to the
    EDM and stored; the problem will only be that documents needing to be signed would
    not be presented for signature (but they would still be stored in the EDM in their
    original form). We will see a bit further in this section that we could even put
    in place a “safety net” so that events are not lost and documents to be signed
    eventually reach the signing book once it is back online.'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 没有单点故障（SPOF）的伟大之处在于，所有不受故障影响的部件将继续在系统中工作。例如，如果由于某种原因，签名簿软件不可用（比如说它是一个SaaS应用，你的互联网连接中断了），其余的过程将正常工作：不需要签名的文件将直接发送到EDM并存储；问题只在于需要签名的文件将不会被展示出来进行签名（但它们仍然以原始形式存储在EDM中）。在本节稍后，我们将看到我们甚至可以建立一个“安全网”，以确保事件不会丢失，并且待签名的文件最终会在系统恢复在线时到达签名簿。
- en: Implementing choreography
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现编舞
- en: 'One of the most logical and least-coupled ways to implement this kind of choreographic
    approach is to use webhooks. We talked about webhooks in [*Chapter 8*](B21293_08.xhtml#_idTextAnchor271)
    already and saw they are a great way to invert the order of service. In the context
    of choreography, webhooks are a great way to eliminate all centralized orchestration,
    since the responsibilities are shared between two components only: the emitter
    and the receiver. The emitter can store requests for callbacks on certain events
    and takes care of sending a message to these callback URLs when the business event
    happens in their service. On the other hand, the receiver needs to register for
    the emitter’s events it wants to know about, provide a callback URL and listen
    to it, and deal with the message once it arrives. Almost everything (we will see
    later that a few things *are* missing) is handled by those two participants.'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 实现这种编舞方法最逻辑且耦合度最低的方式之一是使用webhooks。我们已经在[*第8章*](B21293_08.xhtml#_idTextAnchor271)中讨论了webhooks，并看到它们是反转服务顺序的绝佳方式。在编舞的背景下，webhooks是消除所有集中式编排的绝佳方式，因为责任只由两个组件分担：发射器和接收器。发射器可以存储对某些事件的回调请求，并在其服务中发生业务事件时，负责将这些消息发送到这些回调URL。另一方面，接收器需要注册它想要了解的发射器事件，提供一个回调URL，并监听它，一旦消息到达，就要处理它。几乎所有的事情（我们稍后会看到一些事情确实是缺失的）都由这两个参与者处理。
- en: Then why do platforms like Zapier or IFTTT exist, you might ask? Simply because
    webhooks and business events are not standardized yet. OpenAPI version 3.0.2 supports
    webhook definitions, but it is not complete yet and very few editors support it
    for now. And it will definitely take a long time to define some standards for
    technical events, let alone business-oriented ones. What Zapier and the like bring
    to the game is a centralized market of proprietary connectors to hundreds of LOB
    applications, and this is why they are still in the game. Their value can also
    be in simple flows that could be implemented with only a webhook plugged into
    an API, because using them in the middle provides you with monitoring, error detection,
    automatic retries, and notifications of durable failures, among others.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，为什么像Zapier或IFTTT这样的平台存在呢？你可能会问。简单来说，是因为webhooks和业务事件还没有标准化。OpenAPI 3.0.2支持webhooks定义，但尚未完成，目前很少有编辑器支持它。而且，定义技术事件的标准需要很长时间，更不用说以业务为导向的事件了。Zapier和类似的产品为游戏带来的是成百上千的LOB应用的专有连接器的集中市场，这就是它们仍然在游戏中的原因。它们的价值也可能在于简单的流程，这些流程只需要将webhook插入API即可实现，因为在中间使用它们可以为你提供监控、错误检测、自动重试以及持久性故障的通知等。
- en: But in pure theory, it would be possible to implement your **Event-Driven Architecture**
    (**EDA**) (this is the accepted jargon to define this generalized approach) simply
    by registering webhooks on all the services in your information system, telling
    them to call back APIs exposed by others. This would however require that all
    messages be standardized and a global convention on defining all available business
    events to exist.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 但在纯粹的理论上，通过在信息系统中的所有服务上注册webhooks，告诉它们调用其他服务公开的API，就可以实现你的**事件驱动架构（EDA**）（这是定义这种通用方法的公认术语）。然而，这要求所有消息都必须标准化，并且存在一个全球性的约定来定义所有可用的业务事件。
- en: As always, the devil lies in the details, and everything would work fine in
    such an ideal EDA system until a packet is lost by the dumb pipes, or a network
    card goes down. Since everything is synchronous and in memory, such a technical
    incident would result in a functional loss, with potential business impacts, low
    or catastrophic, depending on what has been lost. This is of course something
    that cannot be tolerated in an industry-grade system and the reason why, for important
    data streams, it is a good idea to keep some kind of middleware, such as a message-queuing
    system. The principle is to keep the pipes dumb, though, and this is where it
    gets difficult because, once a distributed broker is set up, it is hard to restrain
    its use to just orchestration. There may be good reasons to do so because this
    approach can be more adapted to other contexts than the choreography-based one.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，魔鬼藏在细节中，在这样的理想EDA系统中，一切都会运行得很好，直到某个数据包被愚蠢的管道丢失，或者网卡出现故障。由于一切都在同步和内存中，这样的技术事故会导致功能损失，可能对业务产生低到灾难性的影响，具体取决于丢失了什么。这当然是在工业级系统中无法容忍的事情，也是为什么对于重要的数据流来说，保留某种中间件，比如消息队列系统，是一个好主意。然而，原则是保持管道的愚蠢，这很困难，因为一旦设置了分布式代理，就很难限制其仅用于编排。这样做可能有很好的理由，因为这种方法比基于编排的方法更能适应其他环境。
- en: Queuing systems will allow for the robust delivery of messages. If you also
    need the ability to go back in time and do some event sourcing (such as for CQRS,
    in order to implement Big Data complex calculation, or even to ease eventual consistency),
    then you may go as far as deploying specialized distributed systems such as Apache
    Kafka. Again, this is quite a heavy machinery to pull up, so be particularly careful
    with the balance between losing messages from time to time (and we really are
    talking about infrequent events, as modern networks are much more resilient than
    their ancestors) and paying for all the extra cost of a middleware (as a rule
    of thumb, you can consider that an average-sized middleware will cost you one
    Full-Time Equivalent). Remember in particular that even huge players in e-commerce
    accept the loss of consistency and implement many strategies to reduce the consequences
    (limited time to retain a basket, stock management and acceptance of reservation
    only if there is enough stock, improved reimbursement if the lock of the product
    failed, etc.).
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 队列系统将允许消息的稳健交付。如果你还需要回溯时间并执行某些事件源操作（例如，为了实现CQRS，进行大数据复杂计算，或者甚至为了简化最终一致性），那么你可能需要部署专门的分布式系统，如Apache
    Kafka。再次强调，这是一套相当复杂的工具，所以请特别注意在偶尔丢失消息（我们真正谈论的是不频繁的事件，因为现代网络比它们的祖先更加健壮）和支付中间件额外成本之间的平衡（作为一个经验法则，你可以认为一个平均大小的中间件将花费你一个全职员工）。特别记住，即使是电子商务的巨头也接受一致性的损失，并实施许多策略来减轻后果（限制保留购物篮的时间，库存管理，只有在有足够库存的情况下才接受预订，如果产品锁定失败，提供改进的赔偿等）。
- en: Again, remember that functional alignment is key. When thinking about how dangerous
    it is to miss an event, do not take a technical approach that will immediately
    draw you into firing up the big guns; think only in functional terms, imagining
    an information system without any piece of software. How could you compensate
    for this? Maybe one way would be that the next time you receive an order event,
    you check with the emitter that all orders that have been passed since the indicated
    date and time; normally, there should only be the one that triggered the event
    but if you missed the previous one, you are now informed about it. Another way
    to implement consistency could be to double the webhook approach with an automated
    job that will query all new orders every five minutes and verify they have indeed
    been treated as they should. If you really want to take it to the next level,
    you could even set up a self-healing system that clones all important data from
    its neighboring services and only reacts to time-based and interaction-based events
    to perform its duties, while always keeping and communicating a value date on
    its operations.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 再次提醒，功能一致性至关重要。在思考错过一个事件有多危险时，不要采取会立即让你启动大炮的技术方法；只从功能角度思考，想象一个没有任何软件的信息系统。你该如何补偿这一点？也许有一种方法是在你下一次收到订单事件时，与发射者核实自指定日期和时间以来所有已通过的订单；通常情况下，应该只有一个触发事件的订单，但如果你错过了之前的订单，你现在就会了解到这一点。实现一致性的另一种方法可能是使用双重的webhook方法，通过一个自动作业每五分钟查询所有新订单，并验证它们是否确实按照应有的方式处理。如果你真的想把它提升到下一个层次，你甚至可以设置一个自我修复系统，该系统从其相邻服务中克隆所有重要数据，并且只对基于时间和基于交互的事件做出反应以执行其任务，同时始终在其操作中保持和传达一个价值日期。
- en: When I talk about this functional-first approach with software architects, they
    generally tend to reply that a good transactional system will take care of consistency,
    allowing us to get rid of these functional complications. Or that Apache Kafka
    is best for this kind of problem and will be the solution – sometimes without
    having a documented estimation of the cost of such solutions. Though this can
    be acceptable at times (again, it all depends on the context), getting the deepest
    possible understanding of the business always brings value to a software architect.
    One should also remember that, even though the technical approach seems to cover
    perfectly the difficulties, there is always a way to fail as well, and this should
    be taken into account (this danger is high when these technologies are SPOFs).
    On the other hand, when you have a clear understanding of how functionally consistent
    your system has to be, failure is included in the debate and thus cannot cause
    surprises anymore. **The functional approach is the only way to solve a problem
    as** **a whole.**
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 当我与软件架构师讨论这种以功能优先的方法时，他们通常倾向于回答说，一个好的事务性系统会处理一致性，让我们摆脱这些功能复杂性。或者Apache Kafka最适合这类问题，将是解决方案——有时甚至没有对这些解决方案成本的文档估计。尽管有时这可能是可以接受的（再次强调，这完全取决于上下文），但尽可能深入地理解业务总是会给软件架构师带来价值。同时，也应该记住，尽管技术方法似乎完美地覆盖了困难，但总有失败的可能，这一点应该被考虑进去（当这些技术是SPOFs时，这种危险很高）。另一方面，当你清楚地了解你的系统在功能上必须保持多少一致性时，失败就包含在讨论中，因此不会再造成惊喜。**功能方法是解决整体问题的唯一途径。**
- en: 'If you are interested in digging into this deeper, a good starting point is
    to understand how sagas work (quickly said, sagas are a way to re-create transactions
    when you have separated your persistence into several databases, as the MDM and
    SRP propose to do in order to reduce coupling). The great article at [https://microservices.io/patterns/data/saga.html](https://microservices.io/patterns/data/saga.html)
    shows how to implement them with orchestration and choreography. Please note,
    though, that in both cases a MOM is necessary, so we still return to the same
    conclusion: since transactions are a technical solution, they cannot fully cover
    a functional problem; if you really want a global solution, you have to provide
    a fully functional solution. In this case, this is about finding business rules
    for eventual consistency and implementing them. As you are probably used to doing
    by now, the best way to find this functional solution is to imagine an office
    without any computer: how would you go about ensuring consistency over a complex
    workflow, for example, a business case that requires two people working in sequence?
    Most simply, you would alternate synchronous calls with asynchronous callbacks:
    “Here is the file, call me when you are done.” And when the callback is made,
    this would trigger passing the business case to the next person, with the same
    request. When the second one tells the initiator they have finished this part
    of the job, the whole process can be considered as complete. If there is a stall
    at any position, the initiator can request the status of the job. If the request
    has been lost at some point, it can be sent again. When one of the executing agents
    expresses they are done with their unit of work, the initiator may be used to
    send them another one, which is great to avoid overloading the agents and building
    up buffers, which are bad for performance at scale.'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要更深入地了解这一点，一个很好的起点是理解传奇（简单来说，传奇是在你将持久性分离成几个数据库时，重新创建事务的一种方式，正如MDM和SRP所建议的，以减少耦合）。在[https://microservices.io/patterns/data/saga.html](https://microservices.io/patterns/data/saga.html)上的优秀文章展示了如何通过编排和协奏来实施它们。请注意，尽管如此，在两种情况下都需要一个消息中间件（MOM），所以我们仍然得出相同的结论：由于事务是一种技术解决方案，它们不能完全覆盖功能性问题；如果你真的需要一个全局解决方案，你必须提供一个完全功能性的解决方案。在这种情况下，这涉及到为最终一致性找到业务规则并实施它们。正如你现在可能已经习惯的那样，找到这种功能性解决方案的最好方法是想象一个没有任何电脑的办公室：你将如何确保在复杂的工作流程中的一致性，例如，一个需要两个人按顺序工作的业务案例？最简单的方法是交替同步调用和异步回调：“这是文件，当你完成时叫我。”当回调发生时，这将触发将业务案例传递给下一个人的过程，带有相同的请求。当第二个人告诉发起者他们已经完成了这项工作的这一部分，整个过程就可以被认为是完成了。如果在任何位置出现停滞，发起者可以请求工作的状态。如果请求在某个地方丢失了，它可以再次发送。当一个执行代理表示他们已经完成了他们的工作单元时，发起者可能会用另一个工作单元发送给他们，这可以很好地避免过载代理和建立缓冲区，这对扩展规模时的性能是不利的。
- en: Should I use BPMN in my information system?
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我应该在信息系统中使用BPMN吗？
- en: 'The length of this chapter may indicate that I am truly passionate about using
    processes for software information system integration. To be fully transparent,
    I have long been against processes as I had been mostly exposed to their bad aspects:
    constraining people into working in a way that has been decided away from the
    people actually doing the work, being rigid as a working process tends to block
    any innovation since “it has always worked this way”, and so on. Following two
    **Massive Open Online Courses** (**MOOCs**) from France Université Numérique (French
    Digital University) named CARTOPRO (mapping business processes) and PILOPRO (using
    business processes to pilot an organization) completely changed my mind by showing
    me the power of BPM when used correctly, which means the process is designed by
    the team using it (the BPMN expert is only there to help them with the BPMN standard
    and ask the right questions) and continuous improvement is at the base of the
    whole process strategy. In fact, I went as far as continuing the two MOOCs with
    an additional digital diploma from the University Jean Moulin (Lyon 3) in France,
    for which my thesis work was on Agile method process representation (a challenge,
    since the very first recommendation in the Agile Manifesto is “people over processes”).'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的长度可能表明我真正热衷于使用流程来实现软件信息系统集成。为了完全透明，我长期以来一直反对使用流程，因为我主要接触到它们的负面方面：将人们限制在远离实际工作的人所决定的工作方式中，工作流程的僵化往往阻碍任何创新，因为“它一直都是这样工作的”，等等。通过跟随法国数字大学（French
    Digital University）提供的两个名为CARTOPRO（业务流程映射）和PILOPRO（使用业务流程来引导组织）的**大规模开放在线课程**（**MOOCs**），我完全改变了我的想法，因为这些课程通过展示正确使用BPM（业务流程管理）时的力量，让我认识到，这意味着流程是由使用它的团队设计的（BPMN专家只是帮助他们使用BPMN标准并提出正确的问题），而持续改进是整个流程策略的基础。实际上，我甚至继续参加了这两个MOOCs，并从法国让·穆兰大学（Lyon
    3）获得了额外的数字文凭，我的论文工作集中在敏捷方法流程表示（这是一个挑战，因为敏捷宣言的第一条建议是“人胜于流程”）。
- en: Why do I tell this personal information? Simply to stress even more the fact
    that, even if it might surprise you very much, I generally do not recommend using
    BPMN engines in your architecture of an information system. I know that may sound
    weird after all I have said and demonstrated here, and particularly since BPM
    is part of this ideal information system that I have tried to show how to reach
    since the beginning of the book. But after many attempts at using this approach
    in production, I can now honestly say that the tools and – more generally – the
    understanding of BPM are, in most organizations, not developed enough for a true
    BPM approach to be worthy.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我要分享这些个人信息？只是为了强调这样一个事实：即使这可能会让你非常惊讶，我通常不推荐在信息系统架构中使用BPMN引擎。我知道，在我所说的和展示的所有内容之后，这可能会听起来很奇怪，尤其是考虑到BPM是这本书从开始就试图展示如何达到的理想信息系统的一部分。但经过多次在生产中使用这种方法尝试后，我现在可以真诚地说，在大多数组织中，工具和——更普遍地说——对BPM的理解还没有发展到足以使真正的BPM方法值得。
- en: 'Hear me well: I am not saying that the approach does not have value at all.
    If you have a given business process that is complex or moving frequently, the
    investment may be worth it. But this is a very particular case when you will have
    to meet the following criteria:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 请仔细听我说：我并不是说这种方法完全没有价值。如果你有一个复杂或经常变化的具体业务流程，投资可能是值得的。但这是一个非常特殊的情况，当你必须满足以下标准时：
- en: This process is core to your business and you know it will last for years, or
    even be so important that it will stay for as long as the company is around
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个流程对你的业务至关重要，你知道它将持续多年，甚至可能如此重要，以至于它将和公司一样长存。
- en: You know that the tools are not completely stable and you are prepared to change
    the implementation of a BPMN engine in the middle of the project if needed, considering
    all costs and consequences
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你知道工具并不完全稳定，并且你准备在必要时在项目中间更改BPMN引擎的实施，考虑到所有成本和后果。
- en: You have the right expertise for BPM modeling and the maintenance of the BPMN
    engine, and you are aware that the chances are you will never be able to group
    this in a single person
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你拥有BPM建模和BPMN引擎维护的正确专业知识，并且你意识到你几乎不可能将这项工作集中在一个人身上。
- en: Management understands that turning the workflow of the team into a process-driven
    approach will require training for everyone and a process of change management
    that will be long and complex
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理层理解，将团队的工作流程转变为以流程为导向的方法将需要为每个人提供培训，并且将需要长期而复杂的变革管理过程。
- en: 'If you check all these boxes, you have a lot of work in front of you but you
    are in for a treat at the end of this project as, once the investment is done,
    the returns are phenomenal: modifying the implementation of a process by changing
    a few files when the strategy of the company needs to adjust is really the cherry
    on top of a well-aligned information system. You will need to go through decoupling,
    appropriate separation of responsibilities, the long evolution of legacy systems,
    and all the aforementioned BPM hurdles, but once you get there, the information
    system will not only be the spine of your organization… it will be its main asset.'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你勾选了所有这些选项，你面前将有一大堆工作要做，但在这个项目的最后，你将得到一份大礼：一旦投资完成，回报将是惊人的：当公司需要调整策略时，通过更改几个文件来修改流程的实施，这真的是一个信息系统的完美匹配的顶点。你需要经历解耦、适当的职责分离、遗留系统的长期演变，以及所有上述的BPM障碍，但一旦你到达那里，信息系统不仅将成为你组织的脊柱……它将成为其主要资产。
- en: Summary
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have covered the second part of the utopic information system,
    namely **business process management**, after talking about MDM. Though the BPMN
    2.0 standard is not much used in the standard LOB systems, it is definitely a
    mature norm, and the tooling is quite complete for edition and runtime. Sadly,
    the use of BPMN 2.0 is still not soaring, which is a pity as it can truly help
    adapted information systems to evolve smoothly. Maybe low-code/no-code approaches
    will achieve a better result at making functional changes easier and less dependent
    on IT people; only time will tell.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们在讨论了MDM之后，已经涵盖了乌托邦式信息系统的第二部分，即**业务流程管理**。尽管BPMN 2.0标准在标准LOB系统中并不常用，但它绝对是一个成熟的规范，而且工具对于编辑和运行时相当完整。遗憾的是，BPMN
    2.0的使用仍然没有飙升，这真是一件遗憾的事，因为它确实可以帮助适应信息系统的平滑演变。也许低代码/无代码方法将更好地实现使功能变更更容易、更少依赖IT人员的成果；只有时间才能告诉我们。
- en: In the coming chapter, we will cover the third and final part of the utopic
    information system, which is **business rules management**. We will show what
    this expression covers, how it can be integrated with the two other responsibilities,
    provide examples based on our demonstration information system scenario and, of
    course, discuss how such a function should be implemented with which software
    applications and observing which general recommendations.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将涵盖乌托邦式信息系统的第三部分和最后一部分，即**业务规则管理**。我们将展示这个表达式的涵盖范围，它如何与另外两个职责集成，基于我们的演示信息系统场景提供示例，当然，我们还将讨论如何使用哪些软件应用来实现这样的功能，并遵循哪些一般性建议。
