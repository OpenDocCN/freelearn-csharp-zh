["```cs\npublic class Flight {\n  public string BuildMessage(string id, string status){\n    return $\"Flight {id} is {status}\";\n  }\n}\n```", "```cs\npublic class FlightTests {\n  [Fact]\n  public void GeneratedMessageShouldBeCorrect() {\n// Arrange\n    Flight flight = new();\n    string id = \"CSA1234\";\n    string status = \"On Time\";\n    // Act\n    string message = flight.BuildMessage(id, status);\n    // Assert\n    Assert.Equal(\"Flight CSA1234 is On Time\", message);\n  }\n}\n```", "```cs\nnamespace Chapter6XUnitTests {\n    public class UnitTest1 {\n        [Fact]\n        public void Test1() {\n        }\n    }\n}\n```", "```cs\npublic decimal CalculatePrice(int bags, int carryOn,\n  int passengers, bool isHoliday)\n```", "```cs\nnamespace Chapter6XUnitTests {\n  public class BaggageCalculatorTests {\n    [Fact]\n    public void CarryOnBaggageIsPricedCorrectly() {\n    }\n  }\n}\n```", "```cs\n[Fact]\npublic void CarryOnBaggageIsPricedCorrectly() {\n    // Arrange\n    BaggageCalculator calculator = new();\n    int carryOnBags = 2;\n    int checkedBags = 0;\n    int passengers = 1;\n    bool isHoliday = false;\n```", "```cs\n// Act\ndecimal result = calculator.CalculatePrice(checkedBags,\n  carryOnBags, passengers, isHoliday);\n```", "```cs\n// Assert\nAssert.Equal(60m, result);\n```", "```cs\n  Assert.Equal() Failure\n  Expected: 60\n  Actual:   50\n```", "```cs\n  Assert.Equal() Failure\n  Expected: 50\n  Actual:   60\n```", "```cs\n[Fact]\npublic void FirstCheckedBagShouldCostExpectedAmount() {\n  // Arrange\n  BaggageCalculator calculator = new();\n  int carryOnBags = 0;\n  int checkedBags = 1;\n  int passengers = 1;\n  bool isHoliday = false;\n  // Act\n  decimal result = calculator.CalculatePrice(checkedBags,\ncarryOnBags, passengers, isHoliday);\n  // Assert\n  Assert.Equal(40m, result);\n}\n```", "```cs\n[Theory]\n[InlineData(0, 0, 1, false, 0)]\n[InlineData(2, 3, 2, false, 190)]\n[InlineData(2, 1, 1, false, 100)]\n[InlineData(2, 3, 2, true, 209)]\npublic void BaggageCalculatorCalculatesCorrectPrice(\n  int carryOnBags, int checkedBags, int passengers,\n  bool isHoliday, decimal expected) {\n    // Arrange\n    BaggageCalculator calculator = new();\n    // Act\n    decimal result = calculator.CalculatePrice        (checkedBags, carryOnBags, passengers, isHoliday);\n    // Assert\n    Assert.Equal(expected, result);\n}\n```", "```cs\n[Fact]\npublic void ScheduleFlightShouldAddFlight() {\n  // Arrange\n  Airport airport1 = new() {\n    Code = \"DNA\",\n    Country = \"United States\",\n    Name = \"Dotnet Airport\"\n  };\n  Airport airport2 = new() {\n    Code = \"CSI\",\n    Country = \"United Kingdom\",\n    Name = \"C# International Airport\"\n  };\n  FlightScheduler scheduler = new();\n  PassengerFlightInfo flight = new() {\n    Id = \"CS2024\",\n    Status = FlightStatus.OnTime,\n    Departure = new AirportEvent() {\n        Location = airport1,\n        Time = DateTime.Now,\n    },\n    Arrival = new AirportEvent() {\n        Location = airport2,\n        Time = DateTime.Now.AddHours(2)\n    }\n  };\n```", "```cs\n  // Act\n  scheduler.ScheduleFlight(flight);\n  // Assert\n  IEnumerable<IFlightInfo> result =\n    scheduler.GetAllFlights();\n  Assert.NotNull(result);\n  Assert.Contains(flight, result);\n}\n```", "```cs\npublic class FlightSchedulerTests {\n  private readonly Airport _airport1;\n  private readonly Airport _airport2;\n  public FlightSchedulerTests() {\n    _airport1 = new() {\n        Code = \"DNA\",\n        Country = \"United States\",\n        Name = \"Dotnet Airport\"\n    };\n    _airport2 = new() {\n        Code = \"CSI\",\n        Country = \"United Kingdom\",\n        Name = \"C# International Airport\"\n    };\n  }\n```", "```cs\n// Arrange\nFlightScheduler scheduler = new();\nPassengerFlightInfo flight = new() {\n    Id = \"CS2024\",\n    Status = FlightStatus.OnTime,\n    Departure = new AirportEvent() {\n        Location = _airport1,\n        Time = DateTime.Now\n    },\n    Arrival = new AirportEvent() {\n        Location = _airport2,\n        Time = DateTime.Now.AddHours(2)\n    }\n};\n```", "```cs\nprivate PassengerFlightInfo CreateFlight(string id)\n  => new() {\n    Status = FlightStatus.OnTime,\n    Id = id,\n    Departure = new AirportEvent() {\n      Location = _airport1,\n      Time = DateTime.Now\n    },\n    Arrival = new AirportEvent() {\n      Location = _airport2,\n      Time = DateTime.Now.AddHours(2)\n    }\n  };\n```", "```cs\n[Fact]\npublic void ScheduleFlightShouldAddFlight() {\n  // Arrange\n  FlightScheduler scheduler = new();\n  PassengerFlightInfo flight = CreateFlight(\"CS2024\");\n  // Act\n  scheduler.ScheduleFlight(flight);\n  // Assert\n  IEnumerable<IFlightInfo> result =\n    scheduler.GetAllFlights();\n  Assert.NotNull(result);\n  Assert.Contains(flight, result);\n}\n```", "```cs\n[Fact]\npublic void RemoveShouldRemoveFlight() {\n  // Arrange\n  FlightScheduler scheduler = new();\n  PassengerFlightInfo flight = CreateFlight(\"CS2024\");\n  scheduler.ScheduleFlight(flight);\n  // Act\n  scheduler.RemoveFlight(flight);\n  // Assert\n  IEnumerable<IFlightInfo> result =\n    scheduler.GetAllFlights();\n  Assert.NotNull(result);\n  Assert.DoesNotContain(flight, result);\n}\n```", "```cs\npublic class PassengerFlightTests {\n    [TestCase(6)]\n    public void AddPassengerShouldAdd(int passengers) {\n        // Arrange\n        PassengerFlightInfo flight = new();\n        // Act\n        flight.Load(passengers);\n        // Assert\n        int actual = flight.Passengers;\n        Assert.AreEqual(passengers, actual);\n        Assert.That(actual, Is.EqualTo(passengers));\n    }\n}\n```", "```cs\n[TestClass]\npublic class PassengerTests {\n  [TestMethod]\n[DataRow(\"Calvin\", \"Allen\", \"Calvin Allen\")]\n  [DataRow(\"Matthew\", \"Groves\", \"Matthew Groves\")]\n  [DataRow(\"Sam\", \"Gomez\", \"Sam Gomez\")]\n  [DataRow(\"Brad\", \"Knowles\", \"Brad Knowles\")]\n  public void PassengerNameShouldBeCorrect(string first,\n    string last, string expected) {\n    // Arrange\n    Passenger passenger = new() {\n      FirstName = first,\n      LastName = last,\n    };\n    // Act\n    string fullName = passenger.FullName;\n    // Assert\n    Assert.AreEqual(expected, fullName);\n  }\n}\n```", "```cs\npublic class FlightScheduler {\n  private readonly EmailClient _email = new();\n  public void ScheduleFlight(Flight flight) {\n     // other logic omitted...\n     _email.SendMessage($\"Flight {flight.Id} confirmed\");\n  }\n}\n```", "```cs\npublic class FlightScheduler {\n  private readonly IEmailClient _email;\n  public FlightScheduler(IEmailClient email) {\n    _email = email;\n  }\n  public void ScheduleFlight(Flight flight) {\n     // other logic omitted...\n     _email.SendMessage($\"Flight {flight.Id} confirmed\");\n  }\n}\n```"]