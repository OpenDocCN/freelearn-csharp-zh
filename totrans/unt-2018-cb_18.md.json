["```cs\nusing System.Collections;\n using UnityEngine;\n using System.IO;\n\n public class CaptureScreenshot : MonoBehaviour {\n     public string prefix = \"Screenshot\";\n     public enum CaptureMethod {\n         SCREENSHOT_PNG,\n         READ_PIXELS_PNG,\n         READ_PIXELS_JPG\n     };\n     public CaptureMethod captureMethod = CaptureMethod.SCREENSHOT_PNG;\n     public int screenshotScale = 1;\n\n     // A slider from 0 to 100 from which to set JPG quality\n     [Range(0, 100)]\n     public int jpgQuality = 75;\n\n     private Texture2D texture;\n     string date;\n\n     void  Update () {\n         if (Input.GetKeyDown (KeyCode.P)){\n             TakeShot();\n         }\n     }\n\n     private void TakeShot() {\n         date = System.DateTime.Now.ToString(\"_d-MMM-yyyy-HH-mm-ss-f\");\n\n         if (CaptureMethod.SCREENSHOT_PNG == captureMethod){\n             string fileExtension = \".png\";\n             string filename = prefix + date + fileExtension;\n             ScreenCapture.CaptureScreenshot(filename, screenshotScale);\n         } else {\n             StartCoroutine(ReadPixels());\n         }\n     }\n\n     IEnumerator  ReadPixels () {\n         byte[] bytes;\n         yield return new WaitForEndOfFrame();\n\n         int screenWidth = Screen.width;\n         int screenHeight = Screen.height;\n         Rect screenRectangle = new Rect(0, 0, screenWidth, screenHeight);\n         texture = new Texture2D (screenWidth, screenHeight, TextureFormat.RGB24, false);\n         texture.ReadPixels(screenRectangle, 0, 0);\n         texture.Apply();\n\n         switch(captureMethod){\n             case CaptureMethod.READ_PIXELS_JPG:\n                 bytes = texture.EncodeToJPG(jpgQuality);\n                 WriteBytesToFile(bytes, \".jpg\");\n                 break;\n\n             case CaptureMethod.READ_PIXELS_PNG:\n             default:\n                 bytes = texture.EncodeToPNG();\n                 WriteBytesToFile(bytes, \".png\");\n                 break;\n         }\n     }\n\n     void WriteBytesToFile(byte[] bytes, string fileExtension) {\n         Destroy (texture);\n         string filename = prefix + date + fileExtension;\n         string path = Application.dataPath;\n         path = Path.Combine(path, \"..\");\n         path = Path.Combine(path, filename);\n         File.WriteAllBytes(path, bytes);\n     }\n } \n```", "```cs\nusing UnityEngine;\n\n public class Player : MonoBehaviour {\n   public static int scoreCorrect = 0;\n   public static int scoreIncorrect = 0;\n } \n```", "```cs\nusing UnityEngine;\n using System.Collections;\n\n using UnityEngine.UI;\n\n public class UpdateScoreText : MonoBehaviour {\n   void Start(){\n     Text scoreText = GetComponent<Text>();\n     int totalAttempts = Player.scoreCorrect + Player.scoreIncorrect;\n     string scoreMessage = \"Score = \";\n     scoreMessage += Player.scoreCorrect + \" / \" + totalAttempts;\n\n     scoreText.text = scoreMessage;\n   }\n } \n```", "```cs\nusing UnityEngine;\n\n public class IncrementCorrectScore : MonoBehaviour {\n   void Start () {\n     Player.scoreCorrect++;\n   }\n } \n```", "```cs\nusing UnityEngine;\n\n public class IncrementIncorrectScore : MonoBehaviour {\n   void Start () {\n     Player.scoreIncorrect++;\n   }\n } \n```", "```cs\nvoid Start(){\n   Text scoreText = GetComponent<Text>();\n   int totalAttempts = Player.scoreCorrect + Player.scoreIncorrect;\n\n   // default is empty string\n   string scoreMessage = \"\";\n   if( totalAttempts > 0){\n     scoreMessage = \"Score = \";\n     scoreMessage += Player.scoreCorrect + \" / \" + totalAttempts;\n   }\n\n   scoreText.text = scoreMessage;\n } \n```", "```cs\nvoid Start(){\n   Text scoreText = GetComponent<Text>();\n\n   int scoreCorrect = PlayerPrefs.GetInt(\"scoreCorrect\");\n   int scoreIncorrect = PlayerPrefs.GetInt(\"scoreIncorrect\");\n\n   int totalAttempts = scoreCorrect + scoreIncorrect;\n   string scoreMessage = \"Score = \";\n   scoreMessage += scoreCorrect + \" / \" + totalAttempts;\n\n   scoreText.text = scoreMessage;\n } \n```", "```cs\nvoid Start () {\n   int newScoreCorrect = 1 + PlayerPrefs.GetInt(\"scoreCorrect\");\n   PlayerPrefs.SetInt(\"scoreCorrect\", newScoreCorrect);\n } \n```", "```cs\nvoid Start () {\n   int newScoreIncorrect = 1 + PlayerPrefs.GetInt(\"scoreIncorrect\");\n   PlayerPrefs.SetInt(\"scoreIncorrect\", newScoreIncorrect);\n } \n```", "```cs\nusing UnityEngine;\n using System.Collections;\n\n using System.Collections.Generic;\n\n public class LoadMapFromTextfile : MonoBehaviour\n {\n   public TextAsset levelDataTextFile;\n\n   public GameObject floor_848;\n   public GameObject corridor_849;\n   public GameObject horiz_1034;\n   public GameObject vert_1025;\n   public GameObject corpse_175;\n   public GameObject door_844;\n   public GameObject potion_675;\n   public GameObject chest_586;\n   public GameObject alter_583;\n   public GameObject stairs_up_994;\n   public GameObject stairs_down_993;\n   public GameObject wizard_287;\n\n   public Dictionary<char, GameObject> dictionary = new Dictionary<char, GameObject>();\n\n   void Awake(){\n     char newlineChar = '\\n';\n\n     dictionary['.'] = floor_848;\n     dictionary['#'] = corridor_849;\n     dictionary['('] = chest_586;\n     dictionary['!'] = potion_675;\n     dictionary['_'] = alter_583;\n     dictionary['>'] = stairs_down_993;\n     dictionary['<'] = stairs_up_994;\n     dictionary['-'] = horiz_1034;\n     dictionary['|'] = vert_1025;\n     dictionary['+'] = door_844;\n     dictionary['%'] = corpse_175;\n     dictionary['@'] = wizard_287;\n\n     string[] stringArray = levelDataTextFile.text.Split(newlineChar);\n     BuildMaze( stringArray );\n   }\n\n   private void BuildMaze(string[] stringArray){\n     int numRows = stringArray.Length;\n\n     float yOffset = (numRows / 2);\n\n     for(int row=0; row < numRows; row++){\n       string currentRowString = stringArray[row];\n       float y = -1 * (row - yOffset);\n       CreateRow(currentRowString, y);\n     }\n   }\n\n   private void CreateRow(string currentRowString, float y) {\n     int numChars = currentRowString.Length;\n     float xOffset = (numChars/2);\n\n     for(int charPos = 0; charPos < numChars; charPos++){\n       float x = (charPos - xOffset);\n       char prefabCharacter = currentRowString[charPos];\n\n       if (dictionary.ContainsKey(prefabCharacter)){\n         CreatePrefabInstance( dictionary[prefabCharacter], x, y);\n       }\n     }\n   }\n\n   private void CreatePrefabInstance(GameObject objectPrefab, float x, float y){\n     float z = 0;\n     Vector3 position = new Vector3(x, y, z);\n     Quaternion noRotation = Quaternion.identity;\n     Instantiate (objectPrefab, position, noRotation);\n   }\n } \n```", "```cs\n    using UnityEngine;\n     using UnityEngine.UI;\n     using System.Collections;\n\n     public class QualityChooser : MonoBehaviour {\n         public GameObject panelGo;\n         public Slider slider;\n         public Text textLabel;\n\n         void Awake () {\n             slider.maxValue = QualitySettings.names.Length - 1;\n             slider.value = QualitySettings.GetQualityLevel();\n             SetQualitySliderActive(true);\n         }\n\n         public void SetQualitySliderActive(bool active) {\n             Cursor.visible = active;\n             panelGo.SetActive(active);\n         }\n\n         public void UpdateQuality(float sliderFloat) {\n             int qualityInt = Mathf.RoundToInt (sliderFloat);\n             QualitySettings.SetQualityLevel (qualityInt);\n             textLabel.text = QualitySettings.names [qualityInt];\n         }\n     } \n```", "```cs\n    using UnityEngine;\n     using UnityEngine.UI;\n     using System.Collections;\n\n     public class PauseGame : MonoBehaviour {\n         private bool isPaused = false;\n         private QualityChooser qualityChooser;\n\n         void Start () {\n             qualityChooser = GetComponent<QualityChooser>();\n         }\n\n         void Update () {\n             if (Input.GetKeyDown(KeyCode.Escape)) {\n                 isPaused = !isPaused;\n                 SetPause ();\n             }\n         }\n\n         private void SetPause() {\n             float timeScale = !isPaused ? 1f : 0f;\n             Time.timeScale = timeScale;\n             GetComponent<MouseLook> ().enabled = !isPaused;\n             qualityChooser.SetQualitySliderActive(isPaused);\n         }        \n     } \n```", "```cs\n        void Awake () {\n             slider.maxValue = QualitySettings.names.Length - 1;\n             slider.value = QualitySettings.GetQualityLevel();\n             SetQualitySliderActive(false);\n         } \n```", "```cs\n    using UnityEngine;\n     using UnityEngine.UI;\n     using System.Collections;\n\n     public class BulletTime : MonoBehaviour {\n         public float slowSpeed = 0.1f;\n         public float totalTime = 10f;\n         public float recoveryRate = 0.5f;\n         public Slider EnergyBar;\n         private float elapsed = 0f;\n         private bool isSlow = false;\n\n         void Update (){        \n             if (Input.GetButtonDown (\"Fire2\") && elapsed < totalTime)\n                 SetSpeed (slowSpeed);\n```", "```cs\n\n             if (Input.GetButtonUp (\"Fire2\"))\n                 SetSpeed (1f);\n\n             if (isSlow) {\n                 elapsed += Time.deltaTime / sloSpeed;\n\n                 if (elapsed >= totalTime)\n                     SetSpeed (1f);                  \n             } else {\n                 elapsed -= Time.deltaTime * recoveryRate;\n                 elapsed = Mathf.Clamp (elapsed, 0, totalTime);\n             }\n\n             float remainingTime = (totalTime - elapsed) / totalTime;\n             EnergyBar.value = remainingTime;\n         }\n\n         private void SetSpeed (float speed) {\n             Time.timeScale = speed;\n             Time.fixedDeltaTime = 0.02f * speed;\n             isSlow = !(speed >= 1.0f);  \n         }\n     } \n```", "```cs\n    GameObject fill = GameObject.Find(\"Fill\").gameObject;\n     Color sliderColor =  Color.Lerp(Color.red, Color.green, remainingTime);\n     fill.GetComponent<Image> ().color = sliderColor; \n```", "```cs\n    using UnityEngine;\n\n     public class GizmoHighlightSelected : MonoBehaviour {\n         public float radius = 5.0f;\n\n         void OnDrawGizmosSelected() {\n             Gizmos.color = Color.red;\n             Gizmos.DrawWireSphere(transform.position, radius);\n\n             Gizmos.color = Color.yellow;\n             Gizmos.DrawWireSphere(transform.position, radius - 0.1f);\n\n             Gizmos.color = Color.green;\n             Gizmos.DrawWireSphere(transform.position, radius - 0.2f);\n         }\n     } \n```", "```cs\n    using System.Collections;\n     using System.Collections.Generic;\n     using UnityEngine;\n\n     public class GridGizmo : MonoBehaviour {\n         [SerializeField]\n         public int grid = 2;\n\n         public void SetGrid(int grid) {\n             this.grid = grid;\n             SnapAllChildren();\n         }\n\n         [SerializeField]\n         public Color gridColor = Color.red;\n\n         [SerializeField]\n         public int numLines = 6;\n\n         [SerializeField]\n         public int lineLength = 50;\n\n         private void SnapAllChildren() {\n             foreach (Transform child in transform)\n                 SnapPositionToGrid(child);\n         }\n\n         void OnDrawGizmos() {\n             Gizmos.color = gridColor;\n\n             int min = -lineLength;\n             int max = lineLength;\n\n             int n = -1 * RoundForGrid(numLines / 2);\n             for (int i = 0; i < numLines; i++) {\n                 Vector3 start = new Vector3(min, n, 0);\n                 Vector3 end = new Vector3(max, n, 0); \n                 Gizmos.DrawLine(start, end);\n\n                 start = new Vector3(n, min, 0);\n                 end = new Vector3(n, max, 0); \n                 Gizmos.DrawLine(start, end);\n\n                 n += grid;\n             }\n         }\n\n         public int RoundForGrid(int n) {\n             return (n/ grid) * grid;\n         }\n\n         public int RoundForGrid(float n) {\n             int posInt = (int) (n / grid);\n             return posInt * grid;\n         }\n\n         public void SnapPositionToGrid(Transform transform) {\n             transform.position = new Vector3 (\n                 RoundForGrid(transform.position.x),\n                 RoundForGrid(transform.position.y),\n                 RoundForGrid(transform.position.z)\n             );\n         }\n     } \n```", "```cs\n    using UnityEngine;\n     using UnityEditor;\n     using System.Collections;\n\n     public class EditorGridGizmoMenuItem : Editor {\n         [MenuItem(\"GameObject/Create New Snapgrid\", false, 10000)]\n         static void CreateCustomEmptyGameObject(MenuCommand menuCommand) {\n             GameObject gameObject = new GameObject(\"___snap-to-grid___\");\n\n             gameObject.transform.parent = null;\n             gameObject.transform.position = Vector3.zero;\n             gameObject.AddComponent<GridGizmo>();        \n         }\n     } \n```", "```cs\n    using UnityEngine;\n     using UnityEditor;\n     using System.Collections;\n\n     [CustomEditor(typeof(GridGizmo))]\n     public class EditorGridGizmo : Editor {\n         private GridGizmo gridGizmoObject;\n         private int grid;\n         private Color gridColor;\n         private int numLines;\n         private int lineLength;\n\n         private string[] gridSizes = {\n             \"1\", \"2\", \"3\", \"4\", \"5\"\n         };\n\n         void OnEnable() {\n             gridGizmoObject = (GridGizmo)target;\n             grid = serializedObject.FindProperty(\"grid\").intValue;\n             gridColor = serializedObject.FindProperty(\"gridColor\").colorValue;\n             numLines = serializedObject.FindProperty(\"numLines\").intValue;\n             lineLength = serializedObject.FindProperty(\"lineLength\").intValue;\n         }\n\n         public override void OnInspectorGUI() {\n             serializedObject.Update ();\n\n             int gridIndex = grid - 1;\n             gridIndex =  EditorGUILayout.Popup(\"Grid size:\",  gridIndex, gridSizes);                \n             gridColor = EditorGUILayout.ColorField(\"Color:\", gridColor);\n             numLines =  EditorGUILayout.IntField(\"Number of grid lines\",  numLines);\n             lineLength =  EditorGUILayout.IntField(\"Length of grid lines\",  lineLength);\n\n             grid = gridIndex + 1;\n             gridGizmoObject.SetGrid(grid);  \n             gridGizmoObject.gridColor = gridColor;\n             gridGizmoObject.numLines = numLines;    \n             gridGizmoObject.lineLength = lineLength;    \n             serializedObject.ApplyModifiedProperties ();\n             sceneView.RepaintAll();\n         }        \n     } \n```", "```cs\n    using System.Collections;\n     using System.Collections.Generic;\n     using UnityEngine;\n\n     [ExecuteInEditMode]\n     public class SnapToGridGizmo : MonoBehaviour {\n         public void Update()\n         {\n     #if UNITY_EDITOR\n             transform.parent.GetComponent<GridGizmo>().SnapPositionToGrid(transform);\n     #endif\n         }\n     } \n```"]