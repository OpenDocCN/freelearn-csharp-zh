- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Evaluating and Benchmarking the Performance of Minimal APIs
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估和基准测试最小 API 的性能
- en: The purpose of this chapter is to understand one of the motivations for which
    the minimal APIs framework was created.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目的是理解创建最小 API 框架的动机之一。
- en: This chapter will provide some obvious data and examples of how you can measure
    the performance of an ASP.NET 6 application using the traditional approach as
    well as how you can measure the performance of an ASP.NET application using the
    minimal API approach.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将提供一些明显的数据和示例，说明您如何使用传统方法以及如何使用最小 API 方法来测量 ASP.NET 6 应用程序的性能。
- en: Performance is key to any functioning application; however, very often it takes
    a back seat.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 性能是任何运行中的应用的关键；然而，它往往被放在次要位置。
- en: A performant and scalable application depends not only on our code but also
    on the development stack. Today, we have moved on from the .NET full framework
    and .NET Core to .NET and can start to appreciate the performance that the new
    .NET has achieved, version after version – not only with the introduction of new
    features and the clarity of the framework but also primarily because the framework
    has been completely rewritten and improved with many features that have made it
    fast and very competitive compared to other languages.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 一个高性能和可扩展的应用程序不仅取决于我们的代码，还取决于开发栈。今天，我们已经从 .NET 全框架和 .NET Core 过渡到 .NET，并开始欣赏新
    .NET 在版本更新后所取得的性能——这不仅是因为新特性的引入和框架的清晰性，而且主要是因为框架已被完全重写并改进了许多特性，使其与其他语言相比既快速又具有竞争力。
- en: In this chapter, we will evaluate the performance of the minimal API by comparing
    its code with identical code that has been developed traditionally. We’ll understand
    how to evaluate the performance of a web application, taking advantage of the
    **BenchmarkDotNet** framework, which can be useful in other application scenarios.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过比较其代码与传统开发方式开发的相同代码来评估最小 API 的性能。我们将了解如何利用 **BenchmarkDotNet** 框架评估
    Web 应用程序的性能，这在其他应用场景中也可能很有用。
- en: With minimal APIs, we have a new simplified framework that helps improve performance
    by leaving out some components that we take for granted with ASP.NET.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 使用最小 API，我们有一个新的简化框架，通过省略一些我们在 ASP.NET 中视为理所当然的组件来提高性能。
- en: 'The themes we will touch on in this chapter are as follows:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涉及的主题如下：
- en: Improvements with minimal APIs
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小 API 的改进
- en: Exploring performance with load tests
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过负载测试探索性能
- en: Benchmarking minimal APIs with BenchmarkDotNet
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 BenchmarkDotNet 基准测试最小 API
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Many systems can help us test the performance of a framework.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 许多系统可以帮助我们测试框架的性能。
- en: We can measure how many requests per second one application can handle compared
    to another, assuming equal application load. In this case, we are talking about
    load testing.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以测量一个应用每秒可以处理多少请求，与另一个应用相比，假设应用负载相等。在这种情况下，我们谈论的是负载测试。
- en: To put the minimal APIs on the test bench, we need to install **k6**, the framework
    we will use for conducting our tests.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将最小 API 放上测试台，我们需要安装 **k6**，这是我们进行测试将使用的框架。
- en: We will launch load testing on a Windows machine with only .NET applications
    running.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在仅运行 .NET 应用程序的 Windows 机器上启动负载测试。
- en: 'To install k6, you can do either one of the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 k6，您可以选择以下两种方法之一：
- en: 'If you’re using the *Chocolatey package manager* ([https://chocolatey.org/](https://chocolatey.org/)),
    you can install the unofficial k6 package with the following command:'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您使用的是 *Chocolatey 包管理器* ([https://chocolatey.org/](https://chocolatey.org/))，您可以使用以下命令安装非官方的
    k6 包：
- en: '[PRE0]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you’re using *Windows Package Manager* ([https://github.com/microsoft/winget-cli](https://github.com/microsoft/winget-cli)),
    you can install the official package from the k6 manifests with this command:'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您使用 *Windows 包管理器* ([https://github.com/microsoft/winget-cli](https://github.com/microsoft/winget-cli))，您可以使用以下命令从
    k6 清单中安装官方包：
- en: '[PRE1]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can also test your application published on the internet with Docker:'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您还可以使用 Docker 测试您在互联网上发布的应用程序：
- en: '[PRE2]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Or as we did, we installed k6 on the Windows machine and launched everything
    from the command line. You can download k6 from this link: [https://dl.k6.io/msi/k6-latest-amd64.msi](https://dl.k6.io/msi/k6-latest-amd64.msi).'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或者，我们像这样做，我们在 Windows 机器上安装了 k6，并从命令行启动了一切。您可以从以下链接下载 k6：[https://dl.k6.io/msi/k6-latest-amd64.msi](https://dl.k6.io/msi/k6-latest-amd64.msi)。
- en: In the final part of the chapter, we’ll measure the duration of the HTTP method
    for making calls to the API.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最后部分，我们将测量调用API的HTTP方法的持续时间。
- en: 'We’ll stand at the end of the system as if the API were a black box and measure
    the reaction time. BenchmarkDotNet is the tool we’ll be using – to include it
    in our project, we need to reference its **NuGet** package:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将站在系统的末端，就像API是一个黑盒一样，并测量反应时间。我们将使用BenchmarkDotNet工具——为了将其包含到我们的项目中，我们需要引用其**NuGet**包：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'All the code samples in this chapter can be found in the GitHub repository
    for this book at the following link:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的所有代码示例都可以在本书的GitHub仓库中找到，链接如下：
- en: '[https://github.com/PacktPublishing/Minimal-APIs-in-ASP.NET-Core-6/tree/main/Chapter10](https://github.com/PacktPublishing/Minimal-APIs-in-ASP.NET-Core-6/tree/main/Chapter10)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Minimal-APIs-in-ASP.NET-Core-6/tree/main/Chapter10](https://github.com/PacktPublishing/Minimal-APIs-in-ASP.NET-Core-6/tree/main/Chapter10)'
- en: Improvements with minimal APIs
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最小API的改进
- en: Minimal APIs were designed not only to improve the performance of APIs but also
    for better code convenience and similarity to other languages to bring developers
    from other platforms closer. Performance has increased both from the point of
    view of the .NET framework, as each version has incredible improvements, as well
    as from the point of view of the simplification of the application pipeline. Let’s
    see in detail what has not been ported and what improves the performance of this
    framework.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 最小API不仅旨在提高API的性能，还旨在提高代码的便利性和与其他语言的相似性，以便将其他平台上的开发者更接近。从.NET框架的角度来看，性能有所提升，因为每个版本都有令人难以置信的改进，从简化应用程序管道的角度来看也是如此。让我们详细看看哪些内容没有被移植，以及哪些内容提高了这个框架的性能。
- en: 'The minimal APIs execution pipeline omits the following features, which makes
    the framework lighter:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 最小API执行管道省略了以下功能，这使得框架更轻量：
- en: Filters, such as `IAsyncAuthorizationFilter`, `IAsyncActionFilter`, `IAsyncExceptionFilter`,
    `IAsyncResultFilter`, and `IasyncResourceFilter`
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过滤器，例如`IAsyncAuthorizationFilter`、`IAsyncActionFilter`、`IAsyncExceptionFilter`、`IAsyncResultFilter`和`IasyncResourceFilter`
- en: Model binding
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型绑定
- en: Binding for forms, such as `IFormFile`
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单绑定，例如`IFormFile`
- en: Built-in validation
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内置验证
- en: Formatters
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 格式化器
- en: Content negotiations
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内容协商
- en: Some middleware
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些中间件
- en: View rendering
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图渲染
- en: JsonPatch
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JsonPatch
- en: OData
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OData
- en: API versioning
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API版本控制
- en: Performance Improvements in .NET 6
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: .NET 6的性能改进
- en: 'Version after version, .NET improves its performance. In the latest version
    of the framework, improvements made over previous versions have been reported.
    Here’s where you can find a complete summary of what’s new in .NET 6:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 版本迭代中，.NET不断提升其性能。在框架的最新版本中，相较于之前版本的改进已经有所报道。以下是可以找到.NET 6中所有新功能的完整总结：
- en: '[https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-6/](https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-6/)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-6/](https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-6/)'
- en: Exploring performance with load tests
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用负载测试探索性能
- en: How to estimate the performance of minimal APIs? There are many points of view
    to consider and in this chapter, we will try to address them from the point of
    view of the load they can support. We decided to adopt a tool – k6 – that performs
    load tests on a web application and tells us how many requests per second can
    a minimal API handle.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如何估算最小API的性能？有许多观点需要考虑，在本章中，我们将尝试从它们能够支持的负载角度来探讨。我们决定采用一个工具——k6，该工具对Web应用程序进行负载测试，并告诉我们最小API每秒可以处理多少请求。
- en: As described by its creators, k6 is an open source load testing tool that makes
    performance testing easy and productive for engineering teams. The tool is free,
    developer-centric, and extensible. Using k6, you can test the reliability and
    performance of your systems and catch performance regressions and problems earlier.
    This tool will help you to build resilient and performant applications that scale.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如其创造者所述，k6是一个开源的负载测试工具，它使性能测试对工程团队来说既简单又高效。该工具免费、以开发者为中心且可扩展。使用k6，您可以测试您系统的可靠性和性能，并尽早捕捉到性能回归和问题。这个工具将帮助您构建健壮且可扩展的应用程序。
- en: In our case, we would like to use the tool for performance evaluation and not
    for load testing. Many parameters should be considered during load testing, but
    we will only focus on the `http_reqs` index, which indicates how many requests
    have been handled correctly by the system.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，我们希望使用这个工具进行性能评估，而不是进行负载测试。在负载测试期间应考虑许多参数，但我们将只关注`http_reqs`指标，该指标表示系统正确处理了多少个请求。
- en: We agree with the creators of k6 about the purpose of our test, namely *performance*
    and *synthetic monitoring*.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们同意k6创建者的测试目的，即*性能*和*合成监控*。
- en: Use cases
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用例
- en: 'k6 users are typically developers, QA engineers, SDETs, and SREs. They use
    k6 for testing the performance and reliability of APIs, microservices, and websites.
    Common k6 use cases include the following:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: k6用户通常是开发者、QA工程师、SDETs和SREs。他们使用k6来测试API、微服务和网站的性能和可靠性。常见的k6用例包括以下内容：
- en: '**Load testing**: k6 is optimized for minimal resource consumption and designed
    for running high load tests (spike, stress, and soak tests).'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**负载测试**：k6针对最小资源消耗进行了优化，并设计用于运行高负载测试（峰值、压力和浸泡测试）。'
- en: '**Performance and synthetic monitoring**: With k6, you can run tests with a
    small load to continuously validate the performance and availability of your production
    environment.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能和合成监控**：使用k6，您可以运行小负载测试以持续验证生产环境的性能和可用性。'
- en: '**Chaos and reliability testing**: k6 provides an extensible architecture.
    You can use k6 to simulate traffic as part of your chaos experiments or trigger
    them from your k6 tests.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**混沌和可靠性测试**：k6提供了一个可扩展的架构。您可以使用k6作为混沌实验的一部分来模拟流量，或者从您的k6测试中触发它们。'
- en: However, we have to make several assumptions if we want to evaluate the application
    from the point of view just described. When a load test is performed, it is usually
    much more complex than the ones we will perform in this section. When an application
    is bombarded with requests, not all of them will be successful. We can say that
    the test passed successfully if a very small percentage of the responses failed.
    In particular, we usually consider 95 or 98 percentiles of outcomes as the statistic
    on which to derive the test numbers.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们想从上述角度评估应用程序，我们必须做出几个假设。当进行负载测试时，它通常比我们在本节中进行的测试要复杂得多。当应用程序被大量请求轰炸时，并非所有请求都会成功。我们可以这样说，如果响应失败的比例非常小，则测试成功。特别是，我们通常将95或98个百分位数的成果视为推导测试数字的统计数据。
- en: 'With this background, we can perform stepwise load testing as follows: in ramp
    up, the system will be concerned with running the **virtual user** (**VU**) load
    from 0 to 50 for about 15 seconds. Then, we will keep the number of users stable
    for 60 seconds, and finally, ramp down the load to zero virtual users for another
    15 seconds.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个背景下，我们可以按以下步骤进行逐步负载测试：在爬坡阶段，系统将关注从0到50的**虚拟用户**（**VU**）负载，大约15秒。然后，我们将保持用户数量稳定60秒，最后，将负载降至零虚拟用户，再持续15秒。
- en: Each newly written stage of the test is expressed in the JavaScript file in
    the *stages* section. Testing is therefore conducted under a simple empirical
    evaluation.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 每个新编写的测试阶段都在`stages`部分的JavaScript文件中表达。因此，测试是在简单的经验评估下进行的。
- en: 'First, we create three types of responses, both for the ASP.NET Web API and
    minimal API:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们为ASP.NET Web API和最小API创建了三种类型的响应：
- en: '*Plain-text*.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*纯文本*。'
- en: Very small *JSON* data against a call – the data is static and always the same.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非常小的*JSON*数据与调用相对比——数据是静态的，始终相同。
- en: In the third response, we send JSON data with an HTTP `POST` method to the API.
    For the Web API, we check the *validation* of the object, and for the minimal
    API, since there is no validation, we return the object as received.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第三个响应中，我们使用HTTP `POST`方法向API发送JSON数据。对于Web API，我们检查对象的*验证*，而对于最小API，由于没有验证，我们返回接收到的对象。
- en: 'The following code will be used to compare the performance between the minimal
    API and the traditional approach:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将用于比较最小API和传统方法之间的性能：
- en: Minimal API
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 最小API
- en: '[PRE4]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Traditional Approach
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 传统方法
- en: 'For the traditional approach, three distinct controllers have been designed
    as shown here:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 对于传统方法，已经设计了三个不同的控制器，如下所示：
- en: '[PRE5]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the next section, we will define an `options` object, where we are going
    to define the execution ramp described here. We define all clauses to consider
    the test satisfied. As the last step, we write the real test, which does nothing
    but call the HTTP endpoint using `GET` or `POST`, depending on the test.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将定义一个`options`对象，其中我们将定义这里描述的执行斜坡。我们定义所有条款以考虑测试满足。作为最后一步，我们编写实际的测试，该测试只是使用`GET`或`POST`调用HTTP端点，具体取决于测试。
- en: Writing k6 tests
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写k6测试
- en: 'Let’s create a test for each case scenario that we described in the previous
    section:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为之前章节中描述的每个场景创建一个测试：
- en: '[PRE6]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the preceding JavaScript file, we wrote the test using k6 syntax. We have
    defined the options, such as the evaluation threshold of the test, the parameters
    to be measured, and the stages that the test should simulate. Once we have defined
    the options of the test, we just have to write the code to call the APIs that
    interest us – in our case, we have defined three tests to call the three endpoints
    that we want to evaluate.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的JavaScript文件中，我们使用k6语法编写了测试。我们定义了选项，例如测试的评估阈值、要测量的参数以及测试应模拟的阶段。一旦我们定义了测试的选项，我们只需编写调用我们感兴趣的API的代码
    – 在我们的案例中，我们定义了三个测试来调用我们想要评估的三个端点。
- en: Running a k6 performance test
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行k6性能测试
- en: Now that we have written the code to test the performance, let’s run the test
    and generate the statistics of the tests.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经编写了测试性能的代码，让我们运行测试并生成测试的统计数据。
- en: 'We will report all the general statistics of the collected tests:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将报告收集到的所有测试的一般统计数据：
- en: First, we need to start the web applications to run the load test. Let’s start
    with both the ASP.NET Web API application and the minimal API application. We
    expose the URLs, both the HTTPS and HTTP protocols.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要启动Web应用程序以运行负载测试。让我们从ASP.NET Web API应用程序和最小API应用程序开始。我们公开了URL，包括HTTPS和HTTP协议。
- en: 'Move the shell to the root folder and run the following two commands in two
    different shells:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将shell移动到根文件夹，并在两个不同的shell中运行以下两个命令：
- en: '[PRE7]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now, we just have to run the three test files for each project.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们只需为每个项目运行三个测试文件。
- en: 'This one is for the controller-based Web API:'
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这一个是针对基于控制器的Web API的：
- en: '[PRE8]'
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This one is for the minimal API:'
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这一个是针对最小API的：
- en: '[PRE9]'
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here are the results.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是结果。
- en: 'For the test in traditional development mode with a `plain-text` content type,
    the number of requests served per second is 1,547:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统开发模式且内容类型为`plain-text`的测试中，每秒处理的请求数为1,547：
- en: '![Figure 10.1 – The load test for a controller-based API and plain text ](img/Figure_10.1_B17902.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图10.1 – 基于控制器的API和纯文本的负载测试](img/Figure_10.1_B17902.jpg)'
- en: Figure 10.1 – The load test for a controller-based API and plain text
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.1 – 基于控制器的API和纯文本的负载测试
- en: 'For the test in traditional development mode with a `json` content type, the
    number of requests served per second is 1,614:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统开发模式且内容类型为`json`的测试中，每秒处理的请求数为1,614：
- en: '![Figure 10.2 – The load test for a controller-based API and JSON result ](img/Figure_10.2_B17902.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图10.2 – 基于控制器的API和JSON结果的负载测试](img/Figure_10.2_B17902.jpg)'
- en: Figure 10.2 – The load test for a controller-based API and JSON result
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.2 – 基于控制器的API和JSON结果的负载测试
- en: 'For the test in traditional development mode with a `json` content type and
    model validation, the number of requests served per second is 1,602:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统开发模式且内容类型为`json`且包含模型验证的测试中，每秒处理的请求数为1,602：
- en: '![Figure 10.3 – The load test for a controller-based API and validation payload
    ](img/Figure_10.3_B17902.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图10.3 – 基于控制器的API和验证负载的负载测试](img/Figure_10.3_B17902.jpg)'
- en: Figure 10.3 – The load test for a controller-based API and validation payload
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.3 – 基于控制器的API和验证负载的负载测试
- en: 'For the test in minimal API development mode with a `plain-text` content type,
    the number of requests served per second is 2,285:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在最小API开发模式且内容类型为`plain-text`的测试中，每秒处理的请求数为2,285：
- en: '![Figure 10.4 – The load test for a minimal API and plain text ](img/Figure_10.4_B17902.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图10.4 – 最小API和纯文本的负载测试](img/Figure_10.4_B17902.jpg)'
- en: Figure 10.4 – The load test for a minimal API and plain text
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.4 – 最小API和纯文本的负载测试
- en: 'For the test in minimal API development mode with a `json` content type, the
    number of requests served per second is 2,030:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在最小API开发模式且内容类型为`json`的测试中，每秒处理的请求数为2,030：
- en: '![Figure 10.5 – The load test for a minimal API and JSON result ](img/Figure_10.5_B17902.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图10.5 – 最小API和JSON结果的负载测试](img/Figure_10.5_B17902.jpg)'
- en: Figure 10.5 – The load test for a minimal API and JSON result
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.5 – 最小 API 和 JSON 结果的负载测试
- en: 'For the test in minimal API development mode with a `json` content type with
    model validation, the number of requests served per second is 2,070:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 对于具有模型验证的 `json` 内容类型的最小 API 开发模式下的测试，每秒处理的请求数为 2,070：
- en: '![Figure 10.6 – The load test for a minimal API and no validation payload ](img/Figure_10.6_B17902.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.6 – 最小 API 和无验证负载的负载测试](img/Figure_10.6_B17902.jpg)'
- en: Figure 10.6 – The load test for a minimal API and no validation payload
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.6 – 最小 API 和无验证负载的负载测试
- en: 'In the following image, we show a comparison of the three tested functionalities,
    reporting the number of requests served with the same functionality:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下图像中，我们展示了三个测试功能的比较，报告了具有相同功能的请求数量：
- en: '![Figure 10.7 – The performance results ](img/Figure_10.7_B17902.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.7 – 性能结果](img/Figure_10.7_B17902.jpg)'
- en: Figure 10.7 – The performance results
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.7 – 性能结果
- en: As we might have expected, minimal APIs are much faster than controller-based
    web APIs.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所预期的，最小 API 比基于控制器的 Web API 快得多。
- en: The difference is approximately 30%, and that’s no small feat.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 差异大约为 30%，这可不是一个小成就。
- en: Obviously, as previously mentioned, minimal APIs have features missing in order
    to optimize performance, the most striking being data validation.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，正如之前提到的，最小 API 为了优化性能而缺少了一些功能，最显著的是数据验证。
- en: In the example, the payload is very small, and the differences are not very
    noticeable.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例中，有效负载非常小，差异并不明显。
- en: As the payload and validation rules grow, the difference in speed between the
    two frameworks will only increase.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 随着有效负载和验证规则的增加，两个框架之间的速度差异将只会增加。
- en: We have seen how to measure performance with a load testing tool and then evaluate
    how many requests it can serve per second with the same number of machines and
    users connected.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到如何使用负载测试工具来衡量性能，然后评估在相同数量的机器和用户连接的情况下，它每秒可以处理多少请求。
- en: We can also use other tools to understand how minimal APIs have had a strong
    positive impact on performance.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用其他工具来了解最小 API 对性能产生了强烈的积极影响。
- en: Benchmarking minimal APIs with BenchmarkDotNet
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 BenchmarkDotNet 基准测试最小 API
- en: BenchmarkDotNet is a framework that allows you to measure written code and compare
    performance between libraries written in different versions or compiled with different
    .NET frameworks.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: BenchmarkDotNet 是一个框架，允许您测量编写的代码，并比较不同版本或使用不同 .NET 框架编译的库之间的性能。
- en: This tool is used for calculating the time taken for the execution of a task,
    the memory used, and many other parameters.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 此工具用于计算任务执行所需的时间、使用的内存以及许多其他参数。
- en: Our case is a very simple scenario. We want to compare the response times of
    two applications written to the same version of the .NET Framework.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的案例是一个非常简单的场景。我们想要比较两个针对相同版本的 .NET Framework 编写的应用程序的响应时间。
- en: How do we perform this comparison? We take an `HttpClient` object and start
    calling the methods that we have also defined for the load testing case.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何进行这个比较？我们取一个 `HttpClient` 对象，并开始调用我们也为负载测试案例定义的方法。
- en: We will therefore obtain a comparison between two methods that exploit the same
    `HttpClient` object and recall methods with the same functionality, but one is
    written with the ASP.NET Web API and the traditional controllers, while the other
    is written using minimal APIs.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将获得两种方法的比较，这两种方法都利用了相同的 `HttpClient` 对象和具有相同功能的方法，但一个是用 ASP.NET Web API
    和传统控制器编写的，而另一个是使用最小 API 编写的。
- en: BenchmarkDotNet helps you to transform methods into benchmarks, track their
    performance, and share reproducible measurement experiments.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: BenchmarkDotNet 帮助您将方法转换为基准测试，跟踪其性能，并共享可重复的测量实验。
- en: Under the hood, it performs a lot of magic that guarantees reliable and precise
    results thanks to the perfolizer statistical engine. BenchmarkDotNet protects
    you from popular benchmarking mistakes and warns you if something is wrong with
    your benchmark design or obtained measurements. The library has been adopted by
    over 6,800 projects, including .NET Runtime, and is supported by the .NET Foundation
    ([https://benchmarkdotnet.org/](https://benchmarkdotnet.org/)).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在底层，它执行了许多魔法般的功能，这得益于 perfolizer 统计引擎，保证了可靠和精确的结果。BenchmarkDotNet 可以保护您免受流行的基准测试错误的影响，并在您的基准设计或获得的测量结果出现问题时发出警告。该库已被超过
    6,800 个项目采用，包括 .NET Runtime，并得到 .NET 基金会的支持 ([https://benchmarkdotnet.org/](https://benchmarkdotnet.org/))。
- en: Running BenchmarkDotNet
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行 BenchmarkDotNet
- en: 'We will write a class that represents all the methods for calling the APIs
    of the two web applications. Let’s make the most of the startup feature and prepare
    the objects we will send via `POST`. The function marked as `[GlobalSetup]` is
    not computed during runtime, and this helps us calculate exactly how long it takes
    between the call and the response from the web application:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将编写一个类，用于表示调用两个网络应用API的所有方法。让我们充分利用启动功能，并准备我们将通过`POST`发送的对象。标记为`[GlobalSetup]`的函数在运行时不会被计算，这有助于我们精确计算调用和从网络应用返回响应所需的时间：
- en: 'Register all the classes in `Program.cs` that implement BenchmarkDotNet:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注册`Program.cs`中实现BenchmarkDotNet的所有类：
- en: '[PRE10]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the preceding snippet, we have registered the current assembly that implements
    all the functions that will be needed to be evaluated in the performance calculation.
    The methods marked with `[Benchmark]` will be executed over and over again to
    establish the average execution time.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们已经注册了当前程序集，该程序集实现了在性能计算中需要评估的所有函数。标记为`[Benchmark]`的方法将被反复执行，以确定平均执行时间。
- en: 'The application must be compiled on release and possibly within the production
    environment:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用必须在发布时编译，可能还在生产环境中编译：
- en: '[PRE11]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Before launching the benchmark application, launch the web applications:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在启动基准应用之前，启动网络应用：
- en: Minimal API application
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 最小API应用
- en: '[PRE12]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Controller-based application
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 基于控制器的应用
- en: '[PRE13]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'By launching these applications, various steps will be performed and a summary
    report will be extracted with the timelines that we report here:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 通过启动这些应用，将执行各种步骤，并提取出我们在此处报告的时间线总结报告：
- en: '[PRE14]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: For each method performed, the average value or the average execution time is
    reported.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个执行的方法，报告平均值或平均执行时间。
- en: '![Table 10.1 – Benchmark HTTP requests for minimal APIs and controllers ](img/B17902_10_Table1.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![表10.1 – 最小API和控制器基准HTTP请求](img/B17902_10_Table1.jpg)'
- en: Table 10.1 – Benchmark HTTP requests for minimal APIs and controllers
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 表10.1 – 最小API和控制器基准HTTP请求
- en: In the following table, **Error** denotes how much the average value may vary
    due to a measurement error. Finally, the standard deviation (**StdDev**) indicates
    the deviation from the mean value. The times are given in **μs** and are therefore
    very small to measure empirically if not with instruments with that just exposed.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下表格中，**Error**表示平均值的可能变化量，这是由于测量误差造成的。最后，标准差（**StdDev**）表示与平均值之间的偏差。时间以**μs**为单位给出，因此如果没有使用具有该特性的仪器，很难从经验上测量这些时间。
- en: Summary
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In the chapter, we compared the performance of minimal APIs with that of the
    traditional approach by using two very different methods.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们通过使用两种非常不同的方法，比较了最小API与传统方法的性能。
- en: Minimal APIs were not designed for performance alone and evaluating them solely
    on that basis is a poor starting point.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 最小API并非仅为了性能而设计，仅基于这一点来评估它们是一个糟糕的起点。
- en: '*Table 10.1* indicates that there are a lot of differences between the responses
    of minimal APIs and that of traditional ASP.NET Web API applications.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '*表10.1*表明，最小API的响应与传统ASP.NET Web API应用的响应之间存在许多差异。'
- en: The tests were conducted on the same machine with the same resources. We found
    that minimal APIs performed about 30% better than the traditional framework.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 测试在同一台机器上使用相同的资源进行。我们发现最小API的性能比传统框架提高了大约30%：
- en: We have learned about how to measure the speed of our applications – this can
    be useful for understanding whether the application will hold the load and what
    response time it can offer. We can also leverage this on small portions of critical
    code.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们了解了如何测量我们应用的速度——这有助于了解应用是否能够承受负载以及它可以提供多少响应时间。我们还可以利用这一点来优化关键代码的小部分。
- en: As a final note, the applications tested were practically bare bones. The validation
    part that should be evaluated in the ASP.NET Web API application is almost irrelevant
    since there are only two fields to consider. The gap between the two frameworks
    increases as the number of components that have been eliminated in the minimal
    APIs that we have already described increases.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最后的注意事项，测试的应用实际上非常简单。在ASP.NET Web API应用中应该评估的验证部分几乎无关紧要，因为只有两个字段需要考虑。随着我们在最小API中已经描述的已消除组件数量的增加，两个框架之间的差距也在增加。
