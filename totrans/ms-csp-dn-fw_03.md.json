["```cs\nPolygon p = new Triangle();\nPolygon.GreaterThan(new Triangle(), new Rectangle());\n```", "```cs\nList<Triangle> triangles = new List<Triangle>\n{\n  new Triangle(),\n  new Triangle()\n};\nList<Polygon> polygons = triangles;\n```", "```cs\nList<Polygon> polygons = triangles.ToList<Polygon>();\n```", "```cs\nIEnumerable<Polygon> polygons2 =\n  new List<Triangle> {\n  new Triangle(), new Triangle()};\n```", "```cs\nIList<Polygon> polygons3 =\n  new List<Triangle> {\n  new Triangle(), new Triangle()};\n```", "```cs\npolygons3[1] = new Rectangle();\n```", "```cs\nIEnumerable<Func<Polygon>> dp =\n  new List<Func<Rectangle>>();\n```", "```cs\nIEnumerable<int> ints = new int[] { 1, 2, 3 };\nIEnumerable<double> doubles = ints;\n```", "```cs\npolygons = polygons.Union(triangles);\n```", "```cs\nvar y = triangles.Union(rectangles);\n```", "```cs\nvar y = triangles.Union<Polygon>(rectangles);\n```", "```cs\npublic class GenericComparer : IComparer<IPersonBalance>\n{\n  public int Compare(IPersonBalance x, IPersonBalance y)\n  {\n    if (x.Balance < y.Balance) { return -1; }\n    else if (x.Balance > y.Balance) return 1;\n    else { return 0; }\n  }\n}\n```", "```cs\n// Contravariance\nIComparer<Polygon> polygonComparer = new\n  ComparePolygons();\ntriangles = triangles.Sort(polygonComparer);\n```", "```cs\nTuple.Create(1, 2, 3, 4, 5);\n```", "```cs\nnew Tuple<int,int,int,int,int>(1, 2, 3, 4, 5);\n```", "```cs\nTuple.Create(\"Hello\", DateTime.Today, 99, 3.3);\n```", "```cs\nstatic IEnumerable<Tuple<int, string, double>> CustBalance(string city)\n{\n  var result =\n    from c in Customers\n    where c.City == city\n    orderby c.Code, c.Balance\n    select Tuple.Create(c.Code, c.Name, c.Balance);\n  return result;\n}\n```", "```cs\npublic class Customer\n{\n  public int Code { get; set; }\n  public string Name { get; set; }\n  public string City { get; set; }\n  public double Balance { get; set; }\n\n  public List<Customer> getCustomers()\n  {\n    string[] names = File.ReadAllLines(\"ListOfNames.txt\");\n    string[] cities = { \"New York\", \"Los Angeles\", \"Chicago\", \"New Orleans\" };\n    int totalCustomers = names.Length;\n    List<Customer> list = new List<Customer>();\n    Random r = new Random(DateTime.Now.Millisecond);\n    for (int i = 1; i < totalCustomers; i++)\n    {\n      list.Add(new Customer()\n      {\n        Code = i,\n        Balance = r.Next(0, 10000),\n        Name = names[r.Next(1, 50)],\n        City = cities[r.Next(1, 4)]\n      });\n    }\n    return list;\n  }\n}\n```", "```cs\nstatic List<Customer> Customers;\nstatic IEnumerable<Tuple<int, string, double>> Balances;\nstatic void Main()\n{\n  Customers = new Customer().getCustomers();\n  Balances = CustBalance(\"Chicago\");\n  Printout();\n  Console.ReadLine();\n}\n\nstatic void Printout()\n{\n  string formatString = \" Code: {0,-6} Name: {1,-20} Balance: {2,10:C2}\";\n  Console.WriteLine(\" Balance: Customers from Chicago\");\n  Console.WriteLine((\" \").PadRight(32, '-'));\n  foreach (var f in Balances)\n    Console.WriteLine(formatString, f.Item1, f.Item2, f.Item3);\n}\n```", "```cs\npublic class Customer\n{\n  public int Code { get; set; }\n  public string Name { get; set; }\n  public string City { get; set; }\n  public double Balance { get; set; }\n  public Customer()\n  {\n    // We force a delay for testing purposes\n    Thread.Sleep(100);\n  }\n  public List<Customer> getCustomers()\n  {\n    string[] names = File.ReadAllLines(\"ListOfNames.txt\");\n    string[] cities = { \"New York\", \"Los Angeles\", \"Chicago\", \"New Orleans\" };\n    int totalCustomers = names.Length;\n    List<Customer> list = new List<Customer>();\n    Random r = new Random(DateTime.Now.Millisecond);\n    for (int i = 1; i < totalCustomers; i++)\n    {\n      list.Add(new Customer()\n      {\n        Code = i,\n        Balance = r.Next(0, 10000),\n        Name = names[r.Next(1, 50)],\n        City = cities[r.Next(1, 4)]\n      });\n    }\n    return list;\n  }\n\n  public List<Lazy<Customer>> getCustomersLazy()\n  {\n    string[] names = File.ReadAllLines(\"ListOfNames.txt\");\n    string[] cities = { \"New York\", \"Los Angeles\", \"Chicago\", \"New Orleans\" };\n    int totalCustomers = names.Length;\n    List<Lazy<Customer>> list = new List<Lazy<Customer>>();\n    Random r = new Random(DateTime.Now.Millisecond);\n    for (int i = 1; i < totalCustomers; i++)\n    {\n      list.Add(new Lazy<Customer>(() => new Customer()\n      {\n        Code = i,\n        Balance = r.Next(0, 10000),\n        Name = names[r.Next(1, 50)],\n        City = cities[r.Next(1, 4)]\n      }));\n    }\n    return list;\n  }\n}\n```", "```cs\nstatic List<Customer> Customers;\nstatic List<Lazy<Customer>> CustomersLazy;\nstatic void Main()\n{\n  Stopwatch watchLazy = Stopwatch.StartNew();\n  CustomersLazy = new Customer().getCustomersLazy();\n  watchLazy.Stop();\n  Console.WriteLine(\" Generation of Customers (Lazy Version)\");\n  Console.WriteLine((\" \").PadRight(42, '-'));\n  Console.WriteLine(\" Total time (milliseconds): \" +\n    watchLazy.Elapsed.TotalMilliseconds);\n  Console.WriteLine();\n\n  Console.WriteLine(\" Generation of Customers (non-lazy)\");\n  Console.WriteLine((\" \").PadRight(42, '-'));\n  Stopwatch watch = Stopwatch.StartNew();\n  Customers = new Customer().getCustomers();\n  watch.Stop();\n  Console.WriteLine(\"Total time (milliseconds): \" +\n  watch.Elapsed.TotalMilliseconds);\n  Console.ReadLine();\n}\n```", "```cs\ndynamic o = GetUnknownObject();\no.UnknownMethod();\n```", "```cs\nobject p = ReturnObjectType();\n((T)p).UnknownMethod();\n```", "```cs\ndynamic dyn = \"This is a dynamic declared string\";\nConsole.WriteLine(dyn.GetType());\nConsole.WriteLine(dyn);\nConsole.WriteLine(dyn.Length);\nConsole.WriteLine(dyn.ToUpper());\n```", "```cs\ndynamic dyn = \"This is a dynamic declared string\";\nType t = dyn.GetType();\nPropertyInfo prop = t.GetProperty(\"Length\");\nint stringLength = prop.GetValue(dyn, new object[] { });\nConsole.WriteLine(dyn);\nConsole.WriteLine(stringLength);\n```", "```cs\n// Expando objects allow dynamic creation of properties\ndynamic oex = new ExpandoObject();\noex.integerProp = 7;\noex.stringProp = \"And this is the string property\";\noex.datetimeProp = new ExpandoObject();\noex.datetimeProp.dayOfWeek = DateTime.Today.DayOfWeek;\noex.datetimeProp.time = DateTime.Now.TimeOfDay;\nConsole.WriteLine(\"Int: {0}\", oex.integerProp);\nConsole.WriteLine(\"String: {0}\", oex.stringProp);\nConsole.WriteLine(\"Day of Week: {0}\", oex.datetimeProp.dayOfWeek);\nConsole.WriteLine(\"Time: {0}\", oex.datetimeProp.time);\n```", "```cs\npublic static dynamic CreateBookObject(dynamic title, dynamic pages)\n{\n  dynamic book = new ExpandoObject();\n  book.Title = title;\n  book.Pages = pages;\n  return book;\n}\n```", "```cs\nvar listOfBooks = new List<dynamic>();\nvar book1 = CreateBookObject(\"Mastering C# and .NET Programming\", 500);\nvar book2 = CreateBookObject(\"Practical Machine Learning\", 468);\nlistOfBooks.Add(book1);\nlistOfBooks.Add(book2);\nvar bookWith500Pages = listOfBooks.Find(b => b.Pages == 500);\nConsole.WriteLine(\"Packt Pub. Books with 500 pages: {0}\",\n  bookWith500Pages.Title);\nConsole.ReadLine();\n```", "```cs\nstatic void RepeatStringOptional(int x, string text = \"Message\")\n{\n  for (int i = 0; i < x; i++)\n  {\n    Console.WriteLine(\"String no {0}: {1}\", i, text);\n  }\n}\n```", "```cs\npublic static string theString = \"\";\nstatic void Main(string[] args)\n{\n  Task t = new Task(() =>\n  {\n    SlowMethod(ref theString);\n  });\n  t.Start();\n  Console.WriteLine(\"Waiting for SlowMethod to finish...\");\n  t.Wait();\n  Console.WriteLine(\"Finished at: {0}\",theString);\n}\n\nstatic void SlowMethod(ref string value)\n{\n  System.Threading.Thread.Sleep(3000);\n  value = DateTime.Now.ToLongTimeString();\n}\n```", "```cs\nstatic void Main(string[] args)\n{\n  Task<string> t = Task.Factory.StartNew<string>(\n    () => SlowMethod());\n  Console.WriteLine(\"Waiting for SlowMethod to finish...\");\n  t.Wait();\n  Console.WriteLine(\"Finished at: {0}\", t.Result);\n  Console.ReadLine();\n}\nstatic string SlowMethod()\n{\n  System.Threading.Thread.Sleep(3000);\n  return DateTime.Now.ToLongTimeString();\n}\n```", "```cs\nstatic void Main(string[] args)\n{\n  Console.WriteLine(\"SlowMethod started at...{0}\",\n    DateTime.Now.ToLongTimeString());\n  SlowMethod();\n  Console.WriteLine(\"Awaiting for SlowMethod...\");\n  Console.ReadLine();\n}\nstatic async Task SlowMethod()\n{\n  // Simulation of slow method \"Sleeping\" the thread for 3 secs.\n  await Task.Run(new Action(() => System.Threading.Thread.Sleep(3000)));\n  Console.WriteLine(\"Finished at: {0}\", DateTime.Now.ToLongTimeString());\n  return;\n}\n```", "```cs\nConsole.WriteLine($\"File contents: {File.ReadAllText(\"TextFile.txt\")}\");\nConsole.ReadLine();\n```", "```cs\nstring filename = \"TextFile.txt\";\ntry\n{\n  Console.WriteLine($\"File contents: {File.ReadAllText(filename)}\");\n  Console.ReadLine();\n}\ncatch when (File.Exists(filename) && \n  DateTime.Today.DayOfWeek == DayOfWeek.Saturday)\n{\n  Console.WriteLine(\"File content unreadable on Saturdays\");\n}\ncatch (Exception ex)\n{\n  Console.WriteLine($\"I/O Exception generated:{ex.Message}\");\n}\n```", "```cs\n[DebuggerDisplay(\"={\" + nameof(GetString) + \"()}\")]\nclass C\n{\n  string GetString() { return \"Hello\"; }\n}\n```", "```cs\nint? x = 8;\nx.HasValue // == true if x != null\n```", "```cs\nstring str = null;\nConsole.WriteLine(str ?? \"Unspecified\");\nConsole.WriteLine($\"str value: { str  ?? \"Unspecified\"}\");\n```", "```cs\nConsole.WriteLine(str?.Length.ToString());\n```", "```cs\n// Case 2\nstring str = null;\nstring str2 = \"string\";\nConsole.WriteLine(str ?? \"Unspecified\");\nConsole.WriteLine(str2 ?? \"Unspecified\");\nConsole.WriteLine($\"str value: { str ?? \"Unspecified\"}\");\nConsole.WriteLine($\"str2 value: { str2 ?? \"Unspecified\"}\");\nConsole.WriteLine($\"str Length: {str?.Length}\");\nConsole.WriteLine($\"str2 Length: {str2?.Length}\");\nConsole.ReadLine();\n```", "```cs\npublic static string User { get; } = Environment.UserName;\npublic static string OpSystem { get; } = Environment.OSVersion.VersionString;\nstatic void Main()\n{\n  Console.WriteLine($\"Current {nameof(User)}: {User}\");\n  Console.WriteLine($\"Version of Windows: : {OpSystem}\");\n}\n```", "```cs\nusing static System.Math;\n```", "```cs\n// Static reference of types\nConsole.WriteLine($\"The square root of 9 is {Sqrt(9)}\");\n```", "```cs\nusing static System.DayOfWeek;\n```", "```cs\nConsole.WriteLine($\"Today is {Friday}\");\n```", "```cs\nDayOfWeek today = DateTime.Today.DayOfWeek;\nConsole.WriteLine($\"{nameof(today)} is {today}\");\n```", "```cs\nConsoleColor backcolor = ConsoleColor.Blue;\nConsoleColor forecolor = ConsoleColor.White;\nConsole.BackgroundColor = backcolor;\nConsole.ForegroundColor = forecolor;\n```", "```cs\nusing static System.Console;\nusing static System.ConsoleColor;\n```", "```cs\nBackgroundColor = DarkBlue;\nForegroundColor = White;\nWriteLine($\"{nameof(today)} is {today}\");\nWriteLine($\"Using {nameof(BackgroundColor)} : {BackgroundColor}\");\nWriteLine($\"Using {nameof(ForegroundColor)} : {ForegroundColor}\");\nRead();\n```", "```cs\nusing static System.Console;\nnamespace Chapter03_03\n{\n  public class ExpressionBodied\n  {\n    public static void Main()\n    {\n      ExpressionBodied eb = new ExpressionBodied();\n      WriteLine(eb.ToString());\n    }\n    public string Name { get; } = \"Chris\";\n    public string LastName { get; } = \"Talline\";\n    public override string ToString() => $\"FullName: {LastName}, {Name}\";\n  }\n}\n```", "```cs\npublic bool FullNameFits => ((Name.Length + LastName.Length) > 12) ? false : true;\n```", "```cs\nDictionary<int, string> HttpWebErrors = new Dictionary<int, string>\n{\n  [301] = \"The page requested has been permanently moved\",\n  [307] = \"The requested resource is available only through a proxy\",\n  [403] = \"Access forbidden by the server\",\n  [404] = \"Page not found. Try to change the URL\",\n  [408] = \"Request timeout. Try again.\"\n};\n```", "```cs\nint[] binNumbers = { 0b1, 0b10, 0b100, 0b1000, 0b100000 };\n```", "```cs\nint[] binNumbers = { 0b1, 0b10, 0b100, 0b1_000, 0b100_000, 123_456_ };\n```", "```cs\nbinNumbers.ToList().ForEach((n) => Console.WriteLine($\"Item: {n}\"));\nConsole.Read(); \n```", "```cs\nvar theValue = \"123\";\nvar result = CheckNumber(theValue);\nConsole.WriteLine($\"Result: {result}\");\nConsole.Read();\n//…\nstatic object CheckNumber(string s)\n{\n  // If the string can be converted to int, we double\n  // the value. Otherwise, return it with a prefix\n  int i = default(int);  // i must be initialized\n  if (int.TryParse(s, out i)) {\n    return (i * 2);\n  }\n  else\n  {\n    return \"NotInt_\" + s;\n  }\n}\n```", "```cs\nstatic object CheckNumberC7(string s)\n{\n  // Now i is declared inside the If\n  if (int.TryParse(s, out int i))\n    return (i * 2);\n  else return \"NotInt_\" + s;\n}\n```", "```cs\nstatic object CheckObjectSwitch(object o)\n{\n  var result = default(object);\n  switch (o)\n  {\n    case null:\n      result = \"null\";\n      break;\n    case int i:\n    case string s when int.TryParse(s, out i):\n      result = i * 2;\n      break;\n    case string v:\n      result = \"NotInt_\" + v;\n      break;\n    default:\n      result = \"Unknown value\";\n      break;\n  }\n  return result;\n}\n```", "```cs\n(int n, string s) = ( 4, \"data\" );\n```", "```cs\nstatic (int sum, int count) ProcessArray(List<int> numbers)\n{\n  var result = (sum:0 , count:0);\n  numbers.ForEach(n =>\n  {\n    result.count++;\n    result.sum += n;\n  });\n  return result;\n}\n```", "```cs\nvar res = ProcessArray(binNumbers.ToList());\nConsole.WriteLine($\"Count: {res.count}\");\nConsole.WriteLine($\"Sum: {res.sum}\");\nConsole.Read();\n```", "```cs\nvar (count, sum) = ProcessArray(binNumbers.ToList());\n```", "```cs\nstatic void Deconstruct(this DateTime dt, out int hour,\n  out int minute, out int second)\n{\n  hour = dt.Hour;\n  minute = dt.Minute;\n  second = dt.Second;\n}\n```", "```cs\nvar (hour, minute, second) = DateTime.Now;\nConsole.WriteLine($\"Hour: {hour} - Minute: {minute} - Second: {second}\");\n```", "```cs\nstatic (int sum, int count) ProcessArrayWithLocal(List<int> numbers)\n{\n  var result = (s: 0, c: 0);\n  foreach (var item in numbers)\n  {\n    ProcessItem(item, 1);\n  }\n  return result;\n  void ProcessItem(int s, int c) { result.s+= s; result.c += c; };\n}\n```", "```cs\npublic ref int Find(int number, int[] numbers)\n{\n  for (int i = 0; i < numbers.Length; i++)\n  {\n    if (numbers[i] == number) \n    {\n      return ref numbers[i]; // return the storage location, not the value\n    }\n  }\n  throw new IndexOutOfRangeException($\"{nameof(number)} not found\");\n}\n\nint[] array = { 1, 15, -39, 0, 7, 14, -12 };\nref int place = ref Find(7, array); // aliases 7's place in the array\nplace = 9; // replaces 7 with 9 in the array\nWriteLine(array[4]); // prints 9\n```"]