["```cs\n<EditForm Model=\"expense\" OnValidSubmit=\"@HandleValidSubmit\">\n    Vendor <InputText @bind-Value=\"expense.Vendor\"\n                      placeholder=\"Enter Vendor\"/>\n    <button type=\"submit\">\n        Save\n    </button>\n</EditForm>\n@code {\n    private Expense expense = new();\n} \n```", "```cs\n<form>\n    Vendor <input placeholder=\"Enter Vendor\" \n                  class=\"valid\" _bl_2=\"\">\n     <button type=\"submit\">\n         Save\n     </button>\n</form> \n```", "```cs\n<EditForm EditContext=\"editContext\" \n          OnValidSubmit=\"@HandleValidSubmit\">\n    Vendor <InputText @bind-Value=\"expense.Vendor\" />\n    <button type=\"submit\">\n        Save\n    </button>\n</EditForm>\n@code {\n    private Expense expense = new();\n    private EditContext? editContext;\n\n    protected override void OnInitialized()\n    {\n        editContext = new(expense);\n    }\n} \n```", "```cs\n[Required]\npublic DateTime? Date { get; set; }\n[Required]\n[Range(0, 500, ErrorMessage = \"The Amount must be <= $500\")]\npublic decimal? Amount { get; set; } \n```", "```cs\n<ValidationMessage For=\"() => expense.Date\" /> \n```", "```cs\n<ValidationSummary /> \n```", "```cs\n<NavigationLock ConfirmExternalNavigation=\"true\"\n    OnBeforeInternalNavigation=\"HandleBeforeInternalNav\" /> \n```", "```cs\nprivate async Task HandleBeforeInternalNav\n    (LocationChangingContext context)\n{\n    if (context.IsNavigationIntercepted)\n    {\n        var confirm = await JS.InvokeAsync<bool>(\"confirm\",\n                \"Are you sure you are ready to leave?\");\n        if (!confirm)\n        {\n            context.PreventNavigation();\n        }\n    }\n} \n```", "```cs\n    <link href=\"css/bootstrap/css/bootstrap.min.css\" \n          rel=\"stylesheet\" /> \n    ```", "```cs\n    **public** class ExpenseType \n    ```", "```cs\n    public int Id { get; set; }\n    public string? Type { get; set; } \n    ```", "```cs\n    **public** class Expense \n    ```", "```cs\n    using System.ComponentModel.DataAnnotations; \n    ```", "```cs\n    public int Id { get; set; }\n    [Required]\n    public DateTime? Date { get; set; }\n    [Required]\n    [MaxLength(100)]\n    public string? Vendor { get; set; }\n    public string? Description { get; set; }\n    [Required]\n    [Display(Name = \"Expense Type\")]\n    public int? ExpenseTypeId { get; set; }\n    [Required]\n    [Range(0, \n           500, \n           ErrorMessage = \"The {0} field must be <= {2}\")]\n    public decimal? Amount { get; set; }\n    public bool Paid { get; set; } \n    ```", "```cs\n    \"ConnectionStrings\": {\n      \"ExpenseTrackerServerContext\": \"Server={Server name}; Database=ExpenseTracker; Trusted_Connection=True; Encrypt=False;\"\n    } \n    ```", "```cs\n    protected override void OnModelCreating\n        (ModelBuilder modelBuilder)\n    {\n        modelBuilder.Entity<ExpenseType>().HasData(\n        new ExpenseType { Type = \"Airfare\", Id = 1 },\n        new ExpenseType { Type = \"Lodging\", Id = 2 },\n        new ExpenseType { Type = \"Meal\", Id = 3 },\n        new ExpenseType { Type = \"Other\", Id = 4 }\n        );\n    } \n    ```", "```cs\n    Add-Migration Init\n    Update-Database \n    ```", "```cs\n    @using ExpenseTracker.Shared\n    @inject HttpClient Http\n    <h2>Expenses</h2>\n    @if (expenses == null)\n    {\n        <p><em>Loadingâ€¦</em></p>\n    }\n    else if (expenses.Count == 0)\n    {\n        <div>None Found</div>\n    }\n    else\n    {\n    }\n    @code {\n        List<Expense>? expenses;\n    } \n    ```", "```cs\n    protected override async Task OnInitializedAsync()\n    {\n        expenses = await Http.GetFromJsonAsync\n            <List<Expense>>(\"api/expenses\");\n    } \n    ```", "```cs\n    <table class=\"table\">\n    </table> \n    ```", "```cs\n    <thead>\n        <tr>\n            <th></th>\n            <th>#</th>\n            <th>Date</th>\n            <th>Vendor</th>\n            <th class=\"text-right\">Amount</th>\n        </tr>\n    </thead> \n    ```", "```cs\n    <tbody>\n        @foreach (var item in expenses)\n        {\n            <tr class=\"@(item.Paid ? \"\" : \"table-danger\")\">\n                <td>\n                    <a href=\"/expense/@item.Id\">Edit</a>\n                </td>\n                <td>@item.Id</td>\n                <td>@item.Date!.Value.ToShortDateString()</td>\n                <td>@item.Vendor</td>\n                <td class=\"text-right\">@item.Amount</td>\n            </tr>\n        }\n    </tbody> \n    ```", "```cs\n    <ul class=\"nav nav-tabs bg-secondary bg-opacity-10\">\n        <li class=\"nav-item\">\n            <NavLink class=\"nav-link\"\n                     href=\"\"\n                     Match=\"NavLinkMatch.All\">\n                Home\n            </NavLink>\n        </li>\n        <li class=\"nav-item\">\n            <NavLink class=\"nav-link\" href=\"expense\">\n                Add Expense\n            </NavLink>\n        </li>\n    </ul> \n    ```", "```cs\n    <main **class****=****\"p-3\"**>\n        @Body\n    </main> \n    ```", "```cs\n    @page \"/expense\"\n    @page \"/expense/{id:int}\"\n    @using ExpenseTracker.Shared\n    @using Microsoft.AspNetCore.Components.Forms\n    @inject HttpClient Http\n    @inject NavigationManager Nav\n    @if (id == 0)\n    {\n        <h2>Add Expense</h2>\n    }\n    else\n    {\n        <h2>Edit Expense</h2>\n    }\n    @if (!ready)\n    {\n        <p><em>Loading...</em></p>\n    }\n    else\n    {\n        <EditForm Model=\"expense\"\n              OnValidSubmit=\"HandleValidSubmit\">        \n        </EditForm>\n        <div>@error</div>\n    }\n    @code {\n    } \n    ```", "```cs\n    [Parameter] public int id { get; set; }\n    private bool ready;\n    private string? error;\n    private Expense? expense = new(); \n    private List<ExpenseType>? types; \n    ```", "```cs\n    protected override async Task OnInitializedAsync()\n    {\n        types = await Http.GetFromJsonAsync<List<ExpenseType>>\n          (\"api/ExpenseTypes\"); \n        if (id > 0)\n        {\n            try\n            {\n            }\n            catch (Exception)\n            {\n                Nav.NavigateTo(\"/\");\n            }\n        }\n        ready = true;\n    } \n    ```", "```cs\n    var result = await Http.GetFromJsonAsync<Expense>\n       ($\"api/Expenses/{id}\");\n    if (result != null)\n    {\n        expense = result;\n    } \n    ```", "```cs\n    private async Task HandleValidSubmit()\n    {\n        HttpResponseMessage response;\n        if (expense!.Id == 0)\n        {\n            response = await Http.PostAsJsonAsync\n              (\"api/Expenses\", expense);\n        }\n        else\n        {\n            string requestUri = $\"api/Expenses/{expense.Id}\";\n            response = await Http.PutAsJsonAsync\n                (requestUri, expense);\n        };\n        if (response.IsSuccessStatusCode)\n        {\n            Nav.NavigateTo(\"/\");\n        }\n        else\n        {\n            error = response.ReasonPhrase;\n        };\n    } \n    ```", "```cs\n    <div class=\"row mb-3\">    \n        <label>\n            Date\n            <InputDate @bind-Value=\"expense.Date\"\n                       class=\"form-control\" />\n        </label>\n    </div> \n    ```", "```cs\n    <div class=\"row mb-3\">    \n        <label>\n            Vendor\n            <InputText @bind-Value=\"expense.Vendor\"\n                       class=\"form-control\" />\n        </label>\n    </div> \n    ```", "```cs\n    <div class=\"row mb-3\">    \n        <label>\n            Description\n            <InputTextArea @bind-Value=\"expense.Description\"\n                           class=\"form-control\" />    </label>\n    </div> \n    ```", "```cs\n    <div class=\"row mb-3\">    \n        <label>\n            Expense Type\n            <InputSelect @bind-Value=\"expense.ExpenseTypeId\"\n                         class=\"form-control\">\n                <option value=\"\"></option>\n                @foreach (var item in types!)\n                {\n                    <option value=\"@item.Id\">\n                        @item.Type\n                    </option>\n                }\n            </InputSelect>\n        </label>\n    </div> \n    ```", "```cs\n    <div class=\"row mb-3\">    \n        <label>\n            Amount\n            <InputNumber @bind-Value=\"expense.Amount\"\n                        class=\"form-control\" />\n        </label>\n    </div> \n    ```", "```cs\n    <div class=\"row mb-3\">    \n        <label>\n            Paid?\n            <InputCheckbox @bind-Value=\"expense.Paid\"\n                           class=\"form-check-input mx-1\" />\n        </label>\n    </div> \n    ```", "```cs\n    <div class=\"pt-2 pb-2\">    \n        <button type=\"submit\"\n            class=\"btn btn-primary mr-auto\">\n            Save\n        </button>\n    </div> \n    ```", "```cs\n    <DataAnnotationsValidator />\n    <ValidationSummary /> \n    ```", "```cs\n    .invalid {\n        outline: 1px solid red;\n    }\n    .validation-message {\n        color: red;\n    }\n    h2 {\n        color: darkblue;\n    } \n    ```", "```cs\n    @inject IJSRuntime JS \n    ```", "```cs\n    <NavigationLock ConfirmExternalNavigation=\"true\"\n        OnBeforeInternalNavigation=\"HandleBeforeInternalNav\" /> \n    ```", "```cs\n    private async Task HandleBeforeInternalNav\n        (LocationChangingContext context)\n    {\n        if (context.IsNavigationIntercepted)\n        {\n            var confirm = await JS.InvokeAsync<boo>(\"confirm\",\n               \"Are you sure you are ready to leave?\");\n            if (!confirm)\n            {\n                context.PreventNavigation();\n            }\n        }\n    } \n    ```"]