["```cs\ndotnet new blazor -o BlazorCookbook.Auth -int Auto --framework net9.0 -au Individual\n```", "```cs\nbuilder.Services.AddDbContext<ApplicationDbContext>(\n    options => options.UseSqlServer(connectionString));\n```", "```cs\n    @page \"/ch08r02\"\n    ```", "```cs\n    @using Microsoft.AspNetCore.Authorization\n    @attribute [Authorize]\n    ```", "```cs\n    <h3>Settings</h3>\n    <p>You're authorized to see settings.</p>\n    ```", "```cs\n[Route(\"/ch08r02\")]\n[Authorize]\npublic class Settings : ComponentBase\n{\n    // ...\n}\n```", "```cs\n    <h3>Settings</h3>\n    <AuthorizeView>\n        <p>You're authorized to see settings.</p>\n    </AuthorizeView>\n    ```", "```cs\n<h3>Settings</h3>\n<AuthorizeView>\n    <Authorized>\n        <p>You're authorized to see settings.</p>\n    </Authorized>\n    <Authorizing>\n        <p>Give us a few moments...</p>\n    </Authorizing>\n    <NotAuthorized>\n        <p>You can't be here, sorry.</p>\n    </NotAuthorized>\n</AuthorizeView>\n```", "```cs\n    builder.Services.AddIdentityCore<ApplicationUser>()\n        .AddRoles<IdentityRole>()\n        .AddEntityFrameworkStores<ApplicationDbContext>()\n        .AddRoleManager<RoleManager<IdentityRole>>()\n        .AddSignInManager()\n        .AddDefaultTokenProviders();\n    ```", "```cs\n    @using BlazorCookbook.Auth.Components.Account\n    @using BlazorCookbook.Auth.Components.Account.Shared\n    @using Microsoft.AspNetCore.Identity\n    ```", "```cs\n    @inject RoleManager<IdentityRole> RoleManager\n    @inject IdentityRedirectManager Navigation\n    ```", "```cs\n    @code {\n        private sealed class InputModel\n        {\n            public string RoleName { get; set; }\n        }\n    }\n    ```", "```cs\n    [CascadingParameter]\n    private HttpContext HttpContext { get; set; }\n    ```", "```cs\n    [SupplyParameterFromForm]\n    private InputModel Input { get; set; } = new();\n    protected override void OnInitialized()\n        => Input ??= new();\n    ```", "```cs\n    private async Task SaveAsync()\n    {\n        var role = new IdentityRole(Input.RoleName);\n        await RoleManager.CreateAsync(role);\n        Navigation.RedirectToCurrentPageWithStatus(\n            $\"'{role.Name}' role has been created\",\n            HttpContext);\n    }\n    ```", "```cs\n    <AuthorizeView Context=\"auth\">\n        <StatusMessage />\n    </AuthorizeView>\n    ```", "```cs\n    <EditForm FormName=\"creator\"\n              OnValidSubmit=\"@SaveAsync\"\n              Model=\"@Input\">\n    </EditForm>\n    ```", "```cs\n    <p>Role name\n      <InputText @bind-Value=\"@Input.RoleName\" />\n    </p>\n    ```", "```cs\n    <p><button type=\"submit\">Save</button></p>\n    ```", "```cs\n    public class ApplicationUser : IdentityUser\n    {\n        public string FirstName { get; set; }\n        public string LastName { get; set; }\n    }\n    ```", "```cs\n    add-migration AddedUserFullName\n    ```", "```cs\n    dotnet ef migrations add AddedUserFullName\n    ```", "```cs\n    update-database\n    ```", "```cs\n    dotnet ef database update\n    ```", "```cs\n    @using BlazorCookbook.Auth.Data\n    ```", "```cs\n    @inject IdentityUserAccessor UserAccessor\n    @inject UserManager<ApplicationUser> UserManager\n    @inject SignInManager<ApplicationUser> SignInManager\n    @inject IdentityRedirectManager Navigation\n    ```", "```cs\n    private sealed class InputModel\n    {\n        public string FirstName { get; set; }\n        public string LastName { get; set; }\n    }\n    ```", "```cs\n    private ApplicationUser _user;\n    ```", "```cs\n    protected override async Task OnInitializedAsync()\n    {\n        _user = await UserAccessor\n            .GetRequiredUserAsync(HttpContext);\n        Input.FirstName ??= _user.FirstName;\n        Input.LastName ??= _user.LastName;\n    }\n    ```", "```cs\n    private async Task SaveAsync()\n    {\n        _user.FirstName = Input.FirstName;\n        _user.LastName = Input.LastName;\n        await UserManager.UpdateAsync(_user);\n        await SignInManager.RefreshSignInAsync(_user);\n        Navigation.RedirectToCurrentPageWithStatus(\n            \"Your profile has been updated\",\n            HttpContext);\n    }\n    ```", "```cs\n    <p>First Name\n      <InputText @bind-Value=\"@Input.FirstName\" />\n    </p>\n    ```", "```cs\n    <p>Last Name\n      <InputText @bind-Value=\"@Input.LastName\" />\n    </p>\n    ```", "```cs\n    builder.Services.AddAuthorizationCore(options =>\n    {\n        options.AddPolicy(\"InternalEmployee\", policy =>\n            policy.RequireAssertion(context =>\n                context.User?.Identity?.Name?\n                    .EndsWith(\"@packt.com\") ?? false));\n    });\n    ```", "```cs\n    public class UserInfo\n    {\n        //... existing properties ...\n        public required string Role { get; set; }\n    }\n    ```", "```cs\n    Claim[] claims = [\n        // ... existing properties ...\n        new Claim(ClaimTypes.Email, userInfo.Email),\n        new Claim(ClaimTypes.Role, userInfo.Role),\n    ];\n    ```", "```cs\n    builder.Services\n        .AddAuthorizationBuilder()\n        .AddPolicy(\"InternalEmployee\",\n            policy => policy.RequireAssertion(context =>\n                context.User?.Identity?.Name?\n                    .EndsWith(\"@packt.com\") ?? false));\n    var app = builder.Build();\n    ```", "```cs\n    var userId = principal.FindFirst(\n        options.ClaimsIdentity.UserIdClaimType)?.Value;\n    var email = principal.FindFirst(\n        options.ClaimsIdentity.EmailClaimType)?.Value;\n    var role = principal.FindFirst(\n        options.ClaimsIdentity.RoleClaimType)?.Value;\n    state.PersistAsJson(nameof(UserInfo), new UserInfo\n    {\n        UserId = userId,\n        Email = email,\n        Role = role\n    });\n    ```", "```cs\n    @using Microsoft.AspNetCore.Authorization\n    @attribute [Authorize(Policy = \"InternalEmployee\")]\n    ```", "```cs\n    <AuthorizeView Context=\"user\" Roles=\"Support,Admin\">\n        @* here's still the existing EditForm *@\n    </AuthorizeView>\n    ```", "```cs\n    <AuthorizeView Roles=\"Admin\">\n        <p><button>Shut down the app</button></p>\n    </AuthorizeView>\n    ```", "```cs\n@attribute [Authorize(Roles = \"User,Support,Admin\")]\n<h3>Settings</h3>\n<AuthorizeView Context=\"user\" Policy=\"InternalEmployee\">\n    @* here's still the existing EditForm *@\n</AuthorizeView>\n<AuthorizeView Policy=\"InternalEmployee\" Roles=\"Admin\">\n    <p><button>Shutdown the app</button></p>\n</AuthorizeView>\n```", "```cs\n    @page \"/ch08r07\"\n    @rendermode InteractiveServer\n    @inject NavigationManager Navigation\n    ```", "```cs\n    @code {\n        [CascadingParameter]\n        private Task<AuthenticationState> AuthState\n        {\n            get; set;\n        }\n    }\n    ```", "```cs\n    private async Task GoToTicketsAsync()\n    {\n        var user = (await AuthState).User;\n        //we will continue building logic here\n    }\n    ```", "```cs\n    if (user.Identity is null)\n    {\n        Navigation.NavigateTo(\"/Account/Login\");\n        return;\n    }\n    ```", "```cs\n    if (!user.Identity.IsAuthenticated)\n    {\n        Navigation.NavigateTo(\"/Account/Login\");\n        return;\n    }\n    ```", "```cs\n    if (!user.Identity.Name.EndsWith(\"@packt.com\"))\n    {\n        Navigation.NavigateTo(\"/tickets\");\n        return;\n    }\n    ```", "```cs\n    if (user.IsInRole(\"Support\") ||\n        user.IsInRole(\"Admin\"))\n    {\n        Navigation.NavigateTo(\"/tickets/admin\");\n        return;\n    }\n    ```", "```cs\n    Navigation.NavigateTo(\"/tickets/denied\");\n    ```", "```cs\n    <p>\n        <button @onclick=@GoToTicketsAsync>\n            Support tickets\n        </button>\n    </p>\n    ```"]