- en: Scripting Victory and Defeat
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写胜利和失败脚本
- en: In [Chapter 10](fdacd7a8-63fe-454d-9d50-f9f40070e484.xhtml), *Scripting Our
    Points System*, we designed, scripted, and implemented our game's point system.
    We made changes to the appropriate GameObjects and wrote several scripts to manage
    the point system. We ensured the points were updated on our **Head's-Up Display**
    (**HUD**) for each frame of the game. In addition, we added the ability for the
    Cucumber Man to collect cherries from the cherry trees and use them as weapons
    against the Cucumber Beetles.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第10章](fdacd7a8-63fe-454d-9d50-f9f40070e484.xhtml)，*编写我们的得分系统*中，我们设计、编写和实现了游戏的得分系统。我们对适当的GameObject进行了更改，并编写了几个脚本来管理得分系统。我们确保每帧游戏中的得分都更新到我们的**抬头显示**（**HUD**）上。此外，我们还增加了Cucumber
    Man从樱桃树上收集樱桃并将其用作对抗Cucumber Beetles武器的功能。
- en: In this chapter, we will design and script our game's victory and defeat conditions.
    We will update the scripts we created in other chapters to manage the Cucumber
    Man's health, providing frame-by-frame onscreen updates and ensuring a player
    life is lost when the health runs out. We will manage, through scripts, the lives
    remaining. We will also design and script the respawning of our player character.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将设计和编写游戏的胜利和失败条件。我们将更新在其他章节中创建的脚本，以管理Cucumber Man的健康状况，提供逐帧的屏幕更新，并在健康耗尽时确保玩家生命值丢失。我们将通过脚本管理剩余的生命值。我们还将设计和编写玩家角色的重生脚本。
- en: 'Specifically, we will cover the following in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，本章将涵盖以下内容：
- en: Designing the defeat and victory conditions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计失败和胜利条件
- en: Updating the player's health
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新玩家的健康
- en: Implementing the victory logic
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现胜利逻辑
- en: Implementing the end-of-game logic
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现游戏结束逻辑
- en: Updating the HUD with lives remaining
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新剩余生命值的HUD
- en: Scripting the player character's respawning
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写玩家角色重生的脚本
- en: Designing victory and defeat conditions
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计胜利和失败条件
- en: Currently, our game has no clear end and does not implement any reward for the
    player's actions. In this section, we will design our game's victory and defeat
    conditions so that there is a clear goal or way to win the game.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们的游戏没有明确的结束，也没有为玩家的行为实现任何奖励。在本节中，我们将设计游戏的胜利和失败条件，以便有一个明确的目标或获胜的方式。
- en: 'In [Chapter 3](df7798e1-3730-4af7-8c04-857d71ac78d2.xhtml), *Designing the
    Game*, we identified three end-of-game conditions: two ending in defeat for our
    Cucumber Man, and only one resulting in defeat for our Cucumber Beetles.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](df7798e1-3730-4af7-8c04-857d71ac78d2.xhtml)，*设计游戏*中，我们确定了三种游戏结束条件：Cucumber
    Man有两种结束条件以失败告终，而Cucumber Beetles只有一种结果会导致失败。
- en: 'Here are the victory conditions for our game:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们游戏的胜利条件：
- en: 'The Cucumber Beetles win if:'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果以下条件满足，Cucumber Beetles获胜：
- en: There are no cucumbers left in the game
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏中没有剩余的黄瓜
- en: The Cucumber Man runs out of lives
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cucumber Man的生命值耗尽
- en: 'The Cucumber Man wins if:'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果以下条件满足，Cucumber Man 获胜：
- en: There are no Cucumber Beetles left in the game
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏中没有剩余的Cucumber Beetles
- en: These victory and defeat conditions are pretty simple, and there can only be
    one winner. If the Cucumber Beetles win, the Cucumber Man loses.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这些胜利和失败条件相当简单，只有一个赢家。如果Cucumber Beetles获胜，Cucumber Man就会失败。
- en: 'In order to implement these conditions, we need to track the following with
    our scripts:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这些条件，我们需要通过脚本跟踪以下内容：
- en: Number of cucumbers
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 黄瓜的数量
- en: Number of Cucumber Beetles
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cucumber Beetles的数量
- en: Number of Cucumber Man lives remaining
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cucumber Man剩余的生命值
- en: In [Chapter 10](fdacd7a8-63fe-454d-9d50-f9f40070e484.xhtml), *Scripting Our
    Points System*, we wrote the necessary scripts to keep track of cucumbers and
    Cucumber Beetles. We also ensured the HUD is continuously updated with those counts.
    It is important for the player to have a sense of how they are doing in the game.
    Beyond just points, the player will want to continually review how many cucumbers
    and Cucumber Beetles there are in the game. The player will also want to know
    how many Cucumber Man lives remain.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第10章](fdacd7a8-63fe-454d-9d50-f9f40070e484.xhtml)，*编写我们的得分系统*中，我们编写了必要的脚本来跟踪黄瓜和Cucumber
    Beetles。我们还确保HUD持续更新这些计数。对于玩家来说，了解他们在游戏中的表现感非常重要。除了得分之外，玩家还希望不断查看游戏中有多少黄瓜和Cucumber
    Beetles。玩家还想知道Cucumber Man剩余的生命值。
- en: In the next section, we will update our game so the number of lives are updated
    and the player's health bar is put into use. These will provide the player with
    much-needed visual components of the HUD during gameplay.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将更新我们的游戏，以便更新生命值并开始使用玩家的健康条。这些将为玩家在游戏过程中提供所需的HUD视觉组件。
- en: Updating the player's health
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新玩家的健康
- en: In this section, we will fully implement our player's health. We will start
    the Cucumber Man with three lives, each with a full health value of 100\. We will
    update our scripts so that the Cucumber Man loses health when a cucumber beetle
    attacks him. Our approach will be to deduct one point from the Cucumber Man's
    health for every second that it is colliding with a Cucumber Beetle. We will also
    script the HUD's health bar and start with that task in the next section.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将完全实现玩家的健康系统。我们将让 Cucumber Man 从三个生命开始，每个生命都有满值的 100 健康点。我们将更新脚本，以便当
    Cucumber Man 被黄瓜甲虫攻击时，它会失去健康。我们的方法是从 Cucumber Man 的健康中扣除每秒钟与黄瓜甲虫碰撞的分数。我们还将编写 HUD
    健康条的脚本，并在下一节中开始这个任务。
- en: Before we get started, you should open your Unity game project. Alternatively,
    you can download the *Starting-Chapter-11** Unity* project available from the
    publisher's companion site.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，你应该打开你的 Unity 游戏项目。或者，你也可以从出版商的配套网站上下载可用的 *Starting-Chapter-11 Unity*
    项目。
- en: Scripting the health bar
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写健康条脚本
- en: In this section, we will create a new script and attach it to our HUD's health
    bar. We will edit the script and use it to manage our Cucumber Man's health and
    the visible status of the HUD's health bar.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建一个新的脚本并将其附加到我们的 HUD 健康条上。我们将编辑脚本并使用它来管理 Cucumber Man 的健康和 HUD 健康条的可见状态。
- en: 'Let''s start by reviewing our health bar:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先来回顾一下我们的健康条：
- en: In the Hierarchy panel, select the `HUD_Canvas` | `Health_Slider`.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构面板中，选择 `HUD_Canvas` | `Health_Slider`。
- en: 'In the Inspector panel, review the Slider (Script) component. As you can see
    in the following screenshot, there is a Value component with a slider at the bottom
    of the interface:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中，查看滑块（脚本）组件。正如你在以下截图中所见，界面底部有一个带有滑块的值组件：
- en: '![](img/94572672-7913-46ac-adec-96ee531eb0c9.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/94572672-7913-46ac-adec-96ee531eb0c9.png)'
- en: Click the Game view tab so you can see the HUD without being in game-mode.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击游戏视图标签，这样你就可以在不进入游戏模式的情况下看到 HUD。
- en: In the Inspector panel, drag the Value slider and observe how the health bar
    functions.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中，拖动值滑块并观察健康条的功能。
- en: 'You can see that the health bar already functions; we merely need to add a
    script to the slider so that it tracks the player''s health and updates the HUD
    during game play. Here are those steps:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到健康条已经可以正常工作；我们只需要给滑块添加一个脚本，以便它跟踪玩家的健康并在游戏过程中更新 HUD。以下是这些步骤：
- en: In the Inspector panel, click the Add Component button
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中，点击添加组件按钮
- en: Select New Script and name the script `HealthManager`
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择新建脚本并命名为 `HealthManager`
- en: In the Project panel, click Favorites | All Scripts
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目面板中，点击收藏夹 | 所有脚本
- en: Drag the `HealthManager` script to the `Assets` | `Custom Scripts` folder
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `HealthManager` 脚本拖到 `Assets` | `Custom Scripts` 文件夹
- en: Double-click the `HealthManager` script to open it in an editor
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击 `HealthManager` 脚本来在编辑器中打开它
- en: 'Edit the script so that it matches the following code, the first section of
    the code contains the namespace `import` statements and the `HealthManager` class
    declaration:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑脚本以匹配以下代码，代码的第一部分包含 `import` 语句和 `HealthManager` 类声明：
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The next section of code declares our class variables. We will use `currentHealth`
    to hold the value of the Cucumber Man''s up-to-date health value. We will use
    `healthBar` as a reference to the slider:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 下一段代码声明了我们的类变量。我们将使用 `currentHealth` 来保存 Cucumber Man 的最新健康值。我们将使用 `healthBar`
    作为对滑块的引用：
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Our `HealthManager` class has three methods; the first is the `Awake()` method.
    The first statement in this method gets a reference to the `Slider` component.
    The second statement sets the `currentHealth` to `100`. This is our maximum health
    starting point for the Cucumber Man:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 `HealthManager` 类有三个方法；第一个是 `Awake()` 方法。在这个方法中的第一条语句获取了对 `Slider` 组件的引用。第二条语句将
    `currentHealth` 设置为 `100`。这是 Cucumber Man 的最大健康起始点：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Our second method is the `ReduceHealth()` method. This will be used by other
    scripts to call for a health reduction. As you can see, the first statement simply
    decrements the `currentHealth` value by one. The second statement updates the
    slider on the screen:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第二个方法是 `ReduceHealth()` 方法。这个方法将被其他脚本用来请求健康减少。正如你所见，第一条语句只是将 `currentHealth`
    值减一。第二条语句更新屏幕上的滑块：
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The last method for this class is the `Update()` method. We have one statement
    in that method to update the slider for each frame of the game. This results in
    the slider accurately depicting the player''s health:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类最后的 `Update()` 方法中有一句用于每帧更新滑块的语句。这导致滑块准确地显示玩家的健康值：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the next section, we will modify the appropriate script to call the `ReduceHealth()`
    method when the Cucumber Man is being bitten by a Cucumber Beetle.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将修改适当的脚本，以便当黄瓜人被黄瓜甲虫咬时调用 `ReduceHealth()` 方法。
- en: Decrementing health
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 减少健康值
- en: 'Our `BeetleNPC` script already detects collisions with the Cucumber Man, so
    we can simply update that script to deduct a point from the Cucumber Man''s health
    when a collision is detected. We will do this by making a call to the `ReduceHealth()`
    method of the `HealthManager` script. Here are the steps:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 `BeetleNPC` 脚本已经检测到与黄瓜人的碰撞，因此我们可以简单地更新该脚本，在检测到碰撞时从黄瓜人的健康值中减去一点。我们将通过调用 `HealthManager`
    脚本的 `ReduceHealth()` 方法来完成此操作。以下是步骤：
- en: In the Project panel, select Assets | Custom Scripts and double-click the `BeetleNPC`
    script.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目面板中，选择 Assets | Custom Scripts 并双击 `BeetleNPC` 脚本。
- en: 'Add the following statement in the class variables section of the script. This
    creates a variable we can use to reference the `HealthManager` class:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在脚本的类变量部分添加以下语句。这创建了一个我们可以用来引用 `HealthManager` 类的变量：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Add the following two statements in the `OnCollisionEnter()` method after the
    first `if` statement:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第一个 `if` 语句之后，在 `OnCollisionEnter()` 方法中添加以下两个语句：
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: With these two statements, we obtain a reference to the `HealthManager` script
    of `Health_Slider`, and then call the `ReduceHealth()` method.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这两个语句，我们获得了对 `Health_Slider` 的 `HealthManager` 脚本的引用，然后调用 `ReduceHealth()`
    方法。
- en: You can now test your game and watch the health bar change as Cucumber Beetles
    start attacking the Cucumber Man.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以测试您的游戏，并观察生命条随黄瓜甲虫开始攻击黄瓜人而变化。
- en: Implementing victory
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现胜利
- en: In this section, we will implement the victory condition for the Cucumber Man.
    The only victory condition for the Cucumber Man is when the number of Cucumber
    Beetles is zero. Our `BeetleManager` script already provides functionality for
    counting Cucumber Beetles. As you will recall, that is how we update our Cucumber
    Beetle count on our HUD. We will make some modifications to that script and create
    a new script in this section.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将实现黄瓜人的胜利条件。黄瓜人的唯一胜利条件是黄瓜甲虫的数量为零。我们的 `BeetleManager` 脚本已经提供了计数黄瓜甲虫的功能。如您所回忆的，这就是我们在我们的
    HUD 上更新我们的黄瓜甲虫计数的方式。我们将对该脚本进行一些修改，并在本节中创建一个新的脚本。
- en: 'Let''s start by creating an onscreen text component to display You Won! when
    the number of Cucumber Beetles reaches zero. Here are the steps:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个屏幕文本组件开始，当黄瓜甲虫的数量达到零时显示“你赢了！”以下是步骤：
- en: Right-click an empty area of the Hierarchy panel.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构面板的空白区域右键单击。
- en: Select Create Empty.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择创建空对象。
- en: In the Inspector panel, rename the new GameObject to `EndofGame`. We will use
    this as a container for our victory and defeat text labels.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中，将新的 GameObject 重命名为 `EndofGame`。我们将使用它作为胜利和失败文本标签的容器。
- en: In the Hierarchy panel, drag the `EndofGame` GameObject to subordinate it to
    our `HUD_Canvas`.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构面板中，将 `EndofGame` GameObject 拖动以使其从属我们的 `HUD_Canvas`。
- en: With the `EndofGame` GameObject selected, in the Inspector panel, select the
    Transform dropdown and click Reset. This resets the transform of the object.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 `EndofGame` GameObject，在检查器面板中，选择 Transform 下拉菜单并单击重置。这将重置对象的变换。
- en: In the Hierarchy panel, right-click and select UI | Text.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构面板中，右键单击并选择 UI | Text。
- en: Subordinate the new text object to the `EndofGame` GameObject.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新的文本对象从 `EndofGame` GameObject 下属。
- en: Rename the new text object `Victory`.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新的文本对象重命名为 `Victory`。
- en: 'The next four steps are used to configure the Victory text object in the Inspector
    panel:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的四个步骤用于在检查器面板中配置胜利文本对象：
- en: Change the text property to `You Won!`
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文本属性更改为 `You Won!`
- en: Set the Font Style to Bold
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将字体样式设置为粗体
- en: Increase the Font Size to 24
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将字体大小增加到 24。
- en: Select a bright Color for the text
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个明亮的文本颜色
- en: 'By clicking on the Game tab or putting the game into game mode, you can see
    the new victory text is displayed in the center of the screen. We only want that
    text displayed when the player has won the game. Let''s tackle that task:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 通过单击游戏选项卡或将游戏置于游戏模式，您可以看到新的胜利文本显示在屏幕中央。我们只想在玩家赢得游戏时显示该文本。让我们解决这个问题：
- en: Ensure the Victory text component is selected
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保选择胜利文本组件
- en: In the Inspector panel, click the Add Component button
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中，点击添加组件按钮
- en: Select New Script and name the script `VictoryManager`
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择新建脚本，并将脚本命名为 `VictoryManager`
- en: In the Project panel, click Favorites | All Scripts
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目面板中，点击收藏夹 | 所有脚本
- en: Drag the `VictoryManager` script to the `Assets` | `Custom Scripts` folder
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `VictoryManager` 脚本拖到 `Assets` | `Custom Scripts` 文件夹
- en: Double-click the VictoryManager script to open it in an editor
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击 `VictoryManager` 脚本来在编辑器中打开它
- en: 'Edit the script so that it matches the following code, the first section of
    the code contains the namespace `import` statements and the `VictoryManager` class
    declaration:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑脚本，使其与以下代码匹配，代码的第一部分包含命名空间 `import` 语句和 `VictoryManager` 类声明：
- en: '[PRE7]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The next section of our script contains two class variable declarations and
    the `Awake()` method. In the `Awake()` method, we get the reference to the text
    component of our `Victory` UI object. We also set the initial text to null, so
    nothing will be displayed:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们脚本的下一部分包含两个类变量声明和 `Awake()` 方法。在 `Awake()` 方法中，我们获取 `Victory` UI 对象的文本组件引用。我们还设置初始文本为空，这样就不会显示任何内容：
- en: '[PRE8]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The last section of our script is the `Update()` method. Here we set the value
    of count to the current count of Cucumber Beetles, then test whether the count
    equals zero. If the `(count == 0)` condition is true, we display the victory text
    on the screen:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们脚本的最后一部分是 `Update()` 方法。在这里，我们将计数值设置为当前黄瓜甲虫的数量，然后测试计数值是否为零。如果 `(count == 0)`
    条件为真，我们将在屏幕上显示胜利文本：
- en: '[PRE9]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Our next task is to update the `BeetleManager` script. We will make three changes
    to the script:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来的任务是更新 `BeetleManager` 脚本。我们将对该脚本进行三项更改：
- en: 'Add the `static` modifier to the `currentBeetleCount` class variable. The new
    line of code should be:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `static` 修饰符添加到 `currentBeetleCount` 类变量。新的一行代码应该是：
- en: '[PRE10]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the `Awake()` method, change `currentBeetleCount = 0;` to `currentBeetleCount
    =1;`.  This will help ensure the game does not think there are no Cucumber Beetles
    when the game starts.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Awake()` 方法中，将 `currentBeetleCount = 0;` 改为 `currentBeetleCount = 1;`。这将有助于确保游戏在开始时不会认为没有黄瓜甲虫。
- en: 'Add the following statement as the final statement in the `Update()` method:
    `currentBeetleCount = beetles.Length;`. This will update the `currentBeetleCount`
    variable for each frame.'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Update()` 方法中添加以下语句作为最后的语句：`currentBeetleCount = beetles.Length;`。这将更新每个帧的
    `currentBeetleCount` 变量。
- en: 'You are now ready to test the game. Kill all your Cucumber Beetles to test
    the code changes you made. If something does not work correctly or you receive
    errors, please refer to the following updated `BeetleManager` script:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以测试游戏了。杀死所有的黄瓜甲虫来测试你做的代码更改。如果某些东西没有正确工作或你收到错误，请参考以下更新的 `BeetleManager` 脚本：
- en: '[PRE11]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now that the victory condition has been implemented, we are ready to implement
    our defeat conditions. We will do that in the next section.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在胜利条件已经实现，我们准备实现我们的失败条件。我们将在下一节中这样做。
- en: Implementing defeat
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现失败
- en: There are two game conditions in which the player can lose the game. The first
    condition is if there are no cucumbers left in the game. The second condition
    is if all three lives are gone. Let's look at each of these defeat conditions
    separately.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种游戏条件会导致玩家输掉游戏。第一个条件是游戏中没有剩余的黄瓜。第二个条件是如果所有三个生命都消失了。让我们分别看看这些失败条件。
- en: Scripting defeat based on no cucumbers remaining
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于剩余黄瓜数量实现脚本失败
- en: Our `CucumberManager` script already keeps track of the number of cucumbers
    in the game, so we merely need to give that script's `currentCucumberCount` class
    variable the static modifier and then update our `VictoryManager` script. Here
    are the steps.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 `CucumberManager` 脚本已经跟踪了游戏中的黄瓜数量，所以我们只需要给该脚本的 `currentCucumberCount` 类变量添加静态修饰符，然后更新我们的
    `VictoryManager` 脚本。以下是步骤。
- en: 'Edit the `CucumberManager` script so the `currentCucumberCount` variable declaration
    is as follows:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 `CucumberManager` 脚本，使 `currentCucumberCount` 变量声明如下：
- en: '[PRE12]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the `Awake()` method, change `currentCucumberCount = 0;` to `currentCucumberCount
    = 1;`. This will help ensure the game does not think there are no cucumbers when
    the game starts.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Awake()` 方法中，将 `currentCucumberCount = 0;` 改为 `currentCucumberCount = 1;`。这将有助于确保游戏在开始时不会认为没有黄瓜。
- en: Add the following statement at the end of the `Update()` method, `currentCucumberCount = cucumbers.Length;`.
    This will keep the counter updated in each frame.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Update()` 方法的末尾添加以下语句，`currentCucumberCount = cucumbers.Length;`。这将保持计数器在每个帧中更新。
- en: 'Those were the only changes needed for the `CucumberManager` script. Next,
    we will edit the `VictoryManager` script:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这些就是 `CucumberManager` 脚本所需的唯一更改。接下来，我们将编辑 `VictoryManager` 脚本：
- en: Edit the `VictoryManager` script by adding the `int cucumberCount;` class variable.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加 `int cucumberCount;` 类变量来编辑 `VictoryManager` 脚本。
- en: 'Add the following lines of code to the bottom of the `Update()` method. These
    lines will continually check to see whether there are no cucumbers remaining and
    display the You Lost! text when the count equals zero:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码行添加到 `Update()` 方法的底部。这些行将不断检查是否没有剩余的黄瓜，并在计数等于零时显示“你输了！”文本：
- en: '[PRE13]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You are now ready to test this defeat condition.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以测试这个失败条件。
- en: You can speed up your testing by deleting cucumbers from the Hierarchy panel
    when in game mode. When you exit game mode, all deleted objects will be restored.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在游戏模式下从层次结构面板中删除黄瓜来加快测试速度。当您退出游戏模式时，所有已删除的对象将被恢复。
- en: Scripting defeat for no lives remaining
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写无生命剩余的失败脚本
- en: 'We will use the `CucumberManManager` script to keep track of the number of
    lives the Cucumber Man has remaining. Edit that script and make the following
    changes:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `CucumberManManager` 脚本来跟踪剩余的 Cucumber Man 生命值。编辑该脚本并做出以下更改：
- en: Add the `public static int livesRemaining;` class variable. We will use this
    variable to track the number of remaining lives.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `public static int livesRemaining;` 类变量。我们将使用这个变量来跟踪剩余的生命值。
- en: Add the `public Animator anim;` class variable. We will use this to play the
    Cucumber Man's death animation.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `public Animator anim;` 类变量。我们将使用它来播放 Cucumber Man 的死亡动画。
- en: Add the `livesRemaining = 3;` statement to the bottom of the `Awake()` method.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `livesRemaining = 3;` 语句添加到 `Awake()` 方法的底部。
- en: 'Add the following `if` statement block to the bottom of the `Update()` method:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 `if` 语句块添加到 `Update()` 方法的底部：
- en: '[PRE14]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: As you can see in the changes to our `Update()` method, we are simply checking
    the value of `livesRemaining` and, when no lives remain, we play the appropriate
    death animation.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在 `Update()` 方法的更改中看到的，我们只是检查 `livesRemaining` 的值，当没有生命剩余时，播放相应的死亡动画。
- en: 'You can test this defeat condition by following these steps:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过以下步骤测试这个失败条件：
- en: Remove the `static` modifier from the `public static int livesRemaining` statement
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `public static int livesRemaining` 语句中移除 `static` 修饰符
- en: Put the game in game-mode
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将游戏置于游戏模式
- en: In the Hierarchy panel, click the `CucumberMan` GameObject
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构面板中，点击 `CucumberMan` GameObject
- en: In the Inspector panel, scroll to the Cucumber Man Manager (Script) component
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中，滚动到 Cucumber Man Manager (Script) 组件
- en: 'Change the Lives Remaining to `0` (zero). See the following screenshot for
    details:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将剩余生命值改为 `0`（零）。以下截图提供了详细信息：
- en: '![](img/be498c7e-b996-4414-9e47-4ae6bc0055c2.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/be498c7e-b996-4414-9e47-4ae6bc0055c2.png)'
- en: When your testing is complete, put the `static` modifier back into the statement
    from step 1
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您的测试完成时，将步骤 1 中的语句的 `static` 修饰符放回
- en: Updating the HUD with lives remaining
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新显示剩余生命值的 HUD
- en: In the previous section, we modified the `CucumberManManager` script to track
    the number of lives our player has remaining and, when none were left, the appropriate
    animation was played. In this section, we will continue modifying the `CucumberManManager`
    script to update the HUD with the number of lives remaining.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们修改了 `CucumberManManager` 脚本来跟踪玩家剩余的生命值，当没有生命剩余时，播放相应的动画。在本节中，我们将继续修改
    `CucumberManManager` 脚本来更新 HUD 中的剩余生命值。
- en: 'We only need to modify the `CucumberManManager` script''s `Update()` method.
    The completed `Update()` method is provided here with an explanation of the changes
    made:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要修改 `CucumberManManager` 脚本的 `Update()` 方法。下面提供了修改后的 `Update()` 方法及其更改说明：
- en: '[PRE15]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We added conditional statements to check for the number of lives remaining.
    When two are left, we destroy the third life image. We destroy the second one
    when only one life remains, and destroy the first life image when no life remains.
    We used the `Destroy()` method to accomplish this.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了条件语句来检查剩余的生命值。当剩下两个生命时，我们销毁第三个生命图像。当只剩下一个生命时，我们销毁第二个生命图像，当没有生命剩余时，我们销毁第一个生命图像。我们使用
    `Destroy()` 方法来完成这个任务。
- en: Scripting the player character's respawning
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写玩家角色复活脚本
- en: 'In the previous section, we modified the `CucumberManManager` script to track
    how many lives remain and to destroy the UI image elements as appropriate. In
    this section, we will modify that script to accomplish the following when a life
    is lost:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们修改了 `CucumberManManager` 脚本来跟踪剩余的生命数量，并在适当的时候销毁 UI 图像元素。在本节中，我们将修改该脚本，以便在生命丢失时完成以下操作：
- en: Play the die animation
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 播放死亡动画
- en: Respawn the player on a respawn pad
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在重生垫上重生玩家
- en: 'Let''s start by modifying the `CucumberManManager` script:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先修改 `CucumberManManager` 脚本：
- en: 'Add the following class variables:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下类变量：
- en: '[PRE16]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the Hierarchy panel, select the `CucumberMan` GameObject and, in the Inspector
    panel, scroll until you locate the Cucumber Man Manager (Script) component.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Hierarchy 面板中，选择 `CucumberMan` GameObject，然后在 Inspector 面板中滚动，直到找到 Cucumber
    Man Manager (Script) 组件。
- en: 'Drag `SpawnPad1`, `SpawnPad2`, and `SpawnPad3` from the Hierarchy view to the
    designated spots in the Inspector panel. See the following for details:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `SpawnPad1`、`SpawnPad2` 和 `SpawnPad3` 从 Hierarchy 视图中拖动到 Inspector 面板中指定的位置。以下为详细信息：
- en: '![](img/6b9033e5-038d-4ba4-97d4-590066db7680.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6b9033e5-038d-4ba4-97d4-590066db7680.png)'
- en: 'Modify the bottom section of the `Update()` method, as shown here:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `Update()` 方法的底部部分，如下所示：
- en: '[PRE17]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Reviewing the preceding code reveals that there are three conditions being
    checked based on the value of the `livesRemaining` variable. In each case, the
    appropriate UI image component is removed from the HUD, and we play the `CM_Die`
    animation. For the first two cases (`livesRemaining` equals two or one), we have
    a `StartCoroutine("RespawnCucumberMan");` method call. We will write that method
    next:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 检查前面的代码可以发现，根据 `livesRemaining` 变量的值，有三种条件正在被检查。在每种情况下，适当的 UI 图像组件都会从 HUD 中移除，并且播放
    `CM_Die` 动画。对于前两种情况（`livesRemaining` 等于两或一），我们有一个 `StartCoroutine("RespawnCucumberMan");`
    方法调用。我们将在下一节中编写该方法：
- en: 'Write the `ReSpawnCucumberMan()` method. Enter the following code after the
    `OnTriggerEnter()` methods in the `CucumberManManager` class:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写 `ReSpawnCucumberMan()` 方法。在 `CucumberManManager` 类中的 `OnTriggerEnter()` 方法之后输入以下代码：
- en: '[PRE18]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Our `ReSpawnCucumberMan()` method starts by obtaining a random number of `1`,
    `2`, or `3`. We then check to see which random number was generated, and branch
    appropriately. We have a four-second delay in order for the die animation to complete.
    We then respawn the Cucumber Man to the spawn pad corresponding with the randomly
    generated number. Lastly, we play the idle animation.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 `ReSpawnCucumberMan()` 方法首先获取一个随机的 `1`、`2` 或 `3`。然后我们检查生成了哪个随机数，并相应地进行分支。我们有一个四秒的延迟，以便死亡动画完成。然后我们将
    Cucumber Man 重生到与随机生成的数字相对应的重生垫上。最后，我们播放空闲动画。
- en: Summary
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we designed and scripted our game's victory and defeat conditions.
    We updated our game's scripts to manage the Cucumber Man's health, including updating
    the HUD's health bar. We implemented our victory and end-of-game logic through
    scripting. We also implemented the lives remaining and the onscreen indicators
    of those lives. Lastly, we scripted the respawning of our player character.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们设计和编写了游戏的胜利和失败条件。我们更新了游戏脚本以管理 Cucumber Man 的健康，包括更新 HUD 的健康条。我们通过脚本实现了胜利和游戏结束的逻辑。我们还实现了剩余生命和屏幕上的生命指示器。最后，我们编写了玩家角色的重生脚本。
- en: In the next chapter, we will plan and implement audio and visual effects in
    our game to help enhance overall game play. Specifically, we will add audio to
    key events in our combat system and add several special effects using Unity's
    particle system to add to the game's visual appeal.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将计划和实现游戏中的音效和视觉效果，以增强整体游戏体验。具体来说，我们将为战斗系统中的关键事件添加音效，并使用 Unity 的粒子系统添加几个特殊效果，以增加游戏的可视吸引力。
