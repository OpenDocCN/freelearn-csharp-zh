["```cs\n    dotnet new webapp -o TaskManager\n    ```", "```cs\n    cd TaskManager\n    ```", "```cs\n    dotnet to LibraryManager.Cli ol uninstall -g Microsoft.Web.\n    dotnet tool install -g Microsoft.Web.LibraryManager.Cli\n    ```", "```cs\n    libman install @microsoft/signalr@latest -p unpkg -d wwwroot/js/signalr --files dist/browser/signalr.js\n    ```", "```cs\ncode .\n```", "```cs\npublic class TaskManagerHub : Hub\n  {\n    public async Task CreateTask(TaskModel taskModel)\n    {\n       // ..\n    }\n    public async Task CompleteTask(TaskModel taskModel)\n    {\n       // ..\n    }\n  }\n```", "```cs\npublic class TaskModel\n  {\n    public Guid Id { get;  } = Guid.NewGuid();\n    public string Name { get; set; }\n    public bool IsCompleted { get; set; }\n    public TaskModel()\n    {\n       IsCompleted = false;\n    }\n    public TaskModel(string name) : this()\n    {\n      Name = name;\n    }\n    public TaskModel(string name, bool isCompleted)\n    {\n      Name = name;\n      IsCompleted = isCompleted;\n    }\n  }\n```", "```cs\npublic async Task CreateTask(TaskModel taskModel)\n  {\n    _taskRepository.Save(taskModel);\n    await Clients.All.SendAsync(ClientConstants\n      .NOTIFY_TASK_MANAGER, taskModel);\n  }\n```", "```cs\nusing TaskManager.Hubs;\nusing TaskManager.Service;\nusing TaskManager.Service.Contract;\nvar builder = WebApplication.CreateBuilder(args);\n// Add Razor Page services to the container.\nbuilder.Services.AddRazorPages();\n//Add SignalR Services\nbuilder.Services.AddSignalR();\n// ..\nvar app = builder.Build();\n// Some codes have been omitted to facilitate learning\napp.MapRazorPages();\n// Add Hub Endpoint\napp.MapHub<TaskManagerHub>(\"/taskmanagerhub\");\napp.Run();\n```", "```cs\n@page\n@model IndexModel\n@{\n    ViewData[\"Title\"] = \"Home page\";\n}\n<div class=\"text-center\">\n    <h1 class=\"display-4\">SignalR Task Manager</h1>\n</div>\n<div class=\"task-form-container\">\n    <h2>Add a New Task</h2>\n    <form method=\"post\" class=\"task-form\">\n      <input type=\"text\" id=\"taskName\"\n        placeholder=\"Enter task name\"\n        class=\"task-input\"/>\n      <input type=\"button\" value=\"Add Task\"\n        id=\"addTaskButton\" class=\"task-submit\"/>\n    </form>\n</div>\n<div class=\"tasks-container\">\n    <h2>Uncompleted Tasks</h2>\n    <div class=\"tasks-list\" id=\"uncompletedTaskList\">\n      </div>\n    <h2>Completed Tasks</h2>\n    <div class=\"tasks-list\" id=\"completedTaskList\">\n    </div>\n</div>\n@section Scripts {\n    <script src=\"img/signalr.js\"\n      asp-append-version=\"true\"></script>\n    <script src=\"img/index-page.js\"\n      asp-append-version=\"true\"></script>\n}\n```", "```cs\nvar connection = new signalR.HubConnectionBuilder()\n  .withUrl(HUB_URL).build();\nconnection.on(NOTIFY_TASK_MANAGER_EVENT, updateTaskList);\nconnection.start().then(function () {\n     addTaskButton.disabled = false;\n}).catch(function (err) {\n     return console.error(err.toString());\n});\n```", "```cs\nfunction updateTaskList(taskModel) {\n    //Code\n}\n```", "```cs\nvar addTaskButton = document\n  .getElementById(\"addTaskButton\");\naddTaskButton.addEventListener(\"click\", function (event) {\n    let taskName = document.getElementById(TASK_NAME_ID);\n    connection.invoke(HUB_ADD_TASK_METHOD,\n      { name: taskName.value }).catch(function (err) {\n        return console.error(err.toString());\n    });\n    taskName.value = \"\";\n    taskName.focus();\n    event.preventDefault();\n});\n```", "```cs\n    mkdir SignalRStream\n    cd SignalRStream\n    ```", "```cs\n        dotnet new webapp -o SignalRStreamingApp\n        ```", "```cs\n        cd SignalRStreamingApp\n        code .\n        ```", "```cs\n        using Microsoft.AspNetCore.SignalR;\n        using System.Threading.Channels;\n        namespace SignalRStream.Hubs;\n        public class StreamHub : Hub\n        {\n            public ChannelReader<int> Countdown(int count)\n            {\n                var channel = Channel\n                  .CreateUnbounded<int>();\n                _ = WriteItemsAsync(channel.Writer, count);\n                return channel.Reader;\n            }\n            private async Task\n              WriteItemsAsync(ChannelWriter<int>\n              writer, int count)\n            {\n                for (int i = count; i >= 0; i--)\n                {\n                    await writer.WriteAsync(i);\n                    await Task.Delay(1000); // Simulates some delay\n                }\n                writer.TryComplete();\n            }\n        }\n        ```", "```cs\n        using TaskManager.Hubs;\n        using TaskManager.Service;\n        using TaskManager.Service.Contract;\n        var builder = WebApplication.CreateBuilder(args);\n        builder.Services.AddRazorPages();\n        //Add SignalR\n        builder.Services.AddSignalR();\n        var app = builder.Build();\n        if (!app.Environment.IsDevelopment())\n        {\n            app.UseExceptionHandler(\"/Error\");\n            app.UseHsts();\n        }\n        app.UseHttpsRedirection();\n        app.UseStaticFiles();\n        app.UseRouting();\n        app.UseAuthorization();\n        app.MapRazorPages();\n        // Add Hub Endpoint\n        app.MapHub<StreamHub>(\"/streamHub\");\n        app.Run();\n        ```", "```cs\n        libman install @microsoft/signalr@latest -p unpkg -d wwwroot/js/signalr --files dist/browser/signalr.js\n        ```", "```cs\n        const connection = new signalR.HubConnectionBuilder()\n            .withUrl(\"/streamHub\")\n            .build();\n        connection.start().then(function () {\n          connection.stream(\"Countdown\", 10).subscribe({\n            next: (count) => {\n              logStream(count);\n            },\n            complete: () => {\n              logStream(\"Stream completed\");\n            },\n            error: (err) => {\n              logStream(err);\n            }\n          });\n        }).catch(err => logStream(err.toString()));\n        function logStream(status) {\n          let li = document.createElement(\"li\");\n          let ul = document.getElementById(\"ulLog\");\n          li.textContent = status;\n          ul.appendChild(li);\n        }\n        ```", "```cs\n        @page\n        @model IndexModel\n        @{\n          ViewData[\"Title\"] = \"Home page\";\n        }\n        <div class=\"text-center\">\n          <h1 class=\"display-4\">Stream</h1>\n          <ul id=\"ulLog\"></ul>\n        </div>\n        @section Scripts {\n          <script src=\n            \"~/js/signalr/dist/browser/signalr.js\"\n            asp-append-version=\"true\">\n          </script>\n          <script src=\"img/index-stream.js\"\n            asp-append-version=\"true\"></script>\n        }\n        ```", "```cs\n        dotnet run\n        ```", "```cs\n    dotnet pubilish -c Release -o ./Published\n    ```"]